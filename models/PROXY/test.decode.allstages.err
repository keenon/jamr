Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: 2007-08-21

mkDayMonthYear(2007-08-21,21,08,2007)
mkDayMonthYear(2007-08-21,21,08,2007)
Spans:
Span 0-1:  2007-08-21 => (date-entity :day 21 :month 8 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2007-08-21 => (date-entity :day 21 :month 8 :year 2007)

Dependencies:
1	2007-08-21	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 21)
(d / date-entity, month, 8)
(d / date-entity, year, 2007)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-08-21,(date-entity :day 21 :month 8 :year 2007),false)),Map(2 -> 8, 1 -> 21, 0 -> date-entity, 3 -> 2007),Map(2 -> 21, 8 -> 8, d -> date-entity, 22 -> 2007))),[Ljava.lang.String;@192d43ce,Annotation([Ljava.lang.String;@72057ecf,[Ljava.lang.String;@1afd44cb,[Ljava.lang.String;@6973b51b),Annotation([Ljava.lang.String;@1ab3a8c8,[Ljava.lang.String;@43195e57,[Ledu.cmu.lti.nlp.amr.Dependency;@333291e3),Annotation([Ljava.lang.String;@479d31f3,[Ljava.lang.String;@40ef3420,[Ljava.lang.String;@498d318c),Annotation([Ljava.lang.String;@6e171cd7,[Ljava.lang.String;@402bba4f,[Ledu.cmu.lti.nlp.amr.Entity;@795cd85e))
AMR:
(d / date-entity, day, 2 / 21)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2007)

Decoded in 349,791 microseconds
Sentence: Iran (Islamic Republic of) (IR)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic" :op "of" :op ")"))
NER Entity: (organization :name (name :op "IR"))
Spans:
Span 0-5:  Iran ( Islamic Republic of => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
WARNING ADDING ANOTHER SPAN TO NODE 0.0.1
ArrayBuffer(0) + 1
WARNING ADDING ANOTHER SPAN TO NODE 0.0.2
ArrayBuffer(0) + 2
WARNING ADDING ANOTHER SPAN TO NODE 0.0.3
ArrayBuffer(0) + 3
Oracle Span 0-1:  Iran => "Iran"
Oracle Span 0-5:  Iran ( Islamic Republic of => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))
Oracle Span 4-5:  of => "of"
Oracle Span 3-4:  Republic => "Republic"

Missing span: Republic => "Republic"
Missing span: of => "of"
Missing span: Iran => "Iran"
Dependencies:
1	Iran	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	4	punct	_	_
3	Islamic	_	NNP	NNP	_	4	nn	_	_
4	Republic	_	NNP	NNP	_	1	dep	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	)	_	)	)	_	4	punct	_	_
7	(	_	(	(	_	8	punct	_	_
8	IR	_	NNP	NNP	_	1	appos	_	_
9	)	_	)	)	_	8	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Islamic")
(n / name, op, I / "Iran")
(n / name, op, R / "Republic")
(n / name, op, o / "of")

Input(Some(Graph(null,ArrayBuffer(Span(0,5,List(5, 4, 3, 2, 1, 0),Iran ( Islamic Republic of,(country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic")),false)),Map(2 -> "Iran", 5 -> "Islamic", 1 -> name, 4 -> "Republic", 0 -> country, 3 -> "of"),Map(n -> name, c -> country))),[Ljava.lang.String;@222545dc,Annotation([Ljava.lang.String;@5c5eefef,[Ljava.lang.String;@16293aa2,[Ljava.lang.String;@5158b42f),Annotation([Ljava.lang.String;@595b007d,[Ljava.lang.String;@72d1ad2e,[Ledu.cmu.lti.nlp.amr.Dependency;@2d7275fc),Annotation([Ljava.lang.String;@399f45b1,[Ljava.lang.String;@38c6f217,[Ljava.lang.String;@478190fc),Annotation([Ljava.lang.String;@79e2c065,[Ljava.lang.String;@3a93b025,[Ledu.cmu.lti.nlp.amr.Entity;@35cabb2a))
AMR:
(c / country, name, n / name)
(n / name, op, "Iran")
(n / name, op, "Islamic")
(n / name, op, "Republic")
(n / name, op, "of")

Decoded in 93,143 microseconds
Sentence: International; weapons; politics; proliferation; energy

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 8-9:  energy => energy
Span 4-5:  politics => politics

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 8-9:  energy => energy
Oracle Span 0-1:  International => international
Oracle Span 4-5:  politics => politics
Oracle Span 6-7:  proliferation => proliferate-01
Oracle Span 2-3:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: weapons => weapon
Missing span: International => international
Missing span: proliferation => proliferate-01
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	weapons	_	NNS	NNS	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	politics	_	NNS	NNS	_	3	dep	_	_
6	;	_	:	:	_	3	punct	_	_
7	proliferation	_	NN	NN	_	3	dep	_	_
8	;	_	:	:	_	7	punct	_	_
9	energy	_	NN	NN	_	7	dep	_	_

Oracle:
(a / and, op, e / energy)
(a / and, op, i / international)
(a / and, op, p / politics)
(a / and, op, p2 / proliferate-01)
(a / and, op, w / weapon)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),energy,energy,false), Span(7,8,List(1),;,and,false), Span(5,6,List(2),;,and,false), Span(4,5,List(3),politics,politics,false), Span(3,4,List(4),;,and,false), Span(1,2,List(5),;,and,false)),Map(2 -> and, 5 -> and, 1 -> and, 4 -> and, 0 -> energy, 3 -> politics),Map(e -> energy, a3 -> and, p -> politics, a -> and, a2 -> and, a4 -> and))),[Ljava.lang.String;@57a3af25,Annotation([Ljava.lang.String;@2b662a77,[Ljava.lang.String;@7f0eb4b4,[Ljava.lang.String;@5c33f1a9),Annotation([Ljava.lang.String;@1623b78d,[Ljava.lang.String;@c8c12ac,[Ledu.cmu.lti.nlp.amr.Dependency;@6adbc9d),Annotation([Ljava.lang.String;@4550bb58,[Ljava.lang.String;@4ec4f3a0,[Ljava.lang.String;@223191a6),Annotation([Ljava.lang.String;@49139829,[Ljava.lang.String;@9597028,[Ledu.cmu.lti.nlp.amr.Entity;@6069db50))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, e / energy)
(a4 / and, op, p / politics)

Decoded in 288,892 microseconds
Sentence: The International Atomic Energy Agency reached an agreement with Iranian officials that stated there were no remaining issues and ambiguities regarding Iran's nuclear program and activities.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 26-27:  activities => activity
Span 7-8:  agreement => agree-01
Span 19-20:  ambiguities => ambiguity
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 17-18:  issues => issue
Span 15-16:  no => -
Span 23-24:  nuclear => nucleus
Span 10-11:  officials => (have-org-role-91 :ARG2 official)
Span 24-25:  program => program
Span 5-6:  reached => reach-01
Span 16-17:  remaining => remain-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 26-27:  activities => activity
Oracle Span 7-8:  agreement => agree-01
Oracle Span 19-20:  ambiguities => ambiguity
Oracle Span 18-19:  and => and
Oracle Span 25-26:  and => and
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 21-22:  Iran => (country :name (name :op "Iran"))
Oracle Span 17-18:  issues => issue
Oracle Span 15-16:  no => -
Oracle Span 23-24:  nuclear => nucleus
Oracle Span 10-11:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 24-25:  program => program
Oracle Span 5-6:  reached => reach-01
Oracle Span 20-21:  regarding => regard-01
Oracle Span 16-17:  remaining => remain-01
Oracle Span 12-13:  stated => state-01

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: and => and
Missing span: regarding => regard-01
Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	International	_	NNP	NNP	_	5	nn	_	_
3	Atomic	_	NNP	NNP	_	5	nn	_	_
4	Energy	_	NNP	NNP	_	5	nn	_	_
5	Agency	_	NNP	NNP	_	6	nsubj	_	_
6	reached	_	VBD	VBD	_	0	root	_	_
7	an	_	DT	DT	_	8	det	_	_
8	agreement	_	NN	NN	_	6	dobj	_	_
9	with	_	IN	IN	_	6	prep	_	_
10	Iranian	_	JJ	JJ	_	11	amod	_	_
11	officials	_	NNS	NNS	_	9	pobj	_	_
12	that	_	WDT	WDT	_	13	nsubj	_	_
13	stated	_	VBD	VBD	_	11	rcmod	_	_
14	there	_	EX	EX	_	15	expl	_	_
15	were	_	VBD	VBD	_	13	ccomp	_	_
16	no	_	DT	DT	_	18	neg	_	_
17	remaining	_	VBG	VBG	_	18	amod	_	_
18	issues	_	NNS	NNS	_	15	nsubj	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	ambiguities	_	NNS	NNS	_	18	conj	_	_
21	regarding	_	VBG	VBG	_	20	prep	_	_
22	Iran	_	NNP	NNP	_	25	poss	_	_
23	's	_	POS	POS	_	22	possessive	_	_
24	nuclear	_	JJ	JJ	_	25	amod	_	_
25	program	_	NN	NN	_	21	pobj	_	_
26	and	_	CC	CC	_	25	cc	_	_
27	activities	_	NNS	NNS	_	25	conj	_	_
28	.	_	.	.	_	6	punct	_	_

Oracle:
(a / agree-01, ARG0, o / organization)
(a2 / and, op, a3 / ambiguity)
(a2 / and, op, i / issue)
(a4 / and, op, a5 / activity)
(a4 / and, op, p / program)
(a5 / activity, mod, n3 / nucleus)
(a5 / activity, poss, c / country)
(c / country, name, n2 / name)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o2 / official)
(i / issue, polarity, - / -)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Iran")
(o / organization, name, n / name)
(p / program, mod, n3 / nucleus)
(p / program, poss, c / country)
(r / remain-01, ARG1, a3 / ambiguity)
(r / remain-01, ARG1, i / issue)
(r2 / regard-01, ARG0, a2 / and)
(r2 / regard-01, ARG1, a4 / and)
(r3 / reach-01, ARG0, o / organization)
(r3 / reach-01, ARG1, a / agree-01)
(s / state-01, ARG0, a / agree-01)
(s / state-01, ARG1, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),activities,activity,false), Span(24,25,List(1),program,program,false), Span(23,24,List(2),nuclear,nucleus,false), Span(19,20,List(3),ambiguities,ambiguity,false), Span(17,18,List(4),issues,issue,false), Span(16,17,List(5),remaining,remain-01,false), Span(15,16,List(6),no,-,false), Span(10,11,List(8, 7),officials,(have-org-role-91 :ARG2 official),false), Span(7,8,List(9),agreement,agree-01,false), Span(5,6,List(10),reached,reach-01,false), Span(1,5,List(16, 15, 14, 13, 12, 11),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> nucleus, 5 -> remain-01, 12 -> name, 15 -> "Energy", 8 -> official, 7 -> have-org-role-91, 1 -> program, 4 -> issue, 11 -> organization, 14 -> "Atomic", 6 -> -, 0 -> activity, 9 -> agree-01, 16 -> "Agency", 3 -> ambiguity, 10 -> reach-01, 13 -> "International"),Map(n -> nucleus, h -> have-org-role-91, a3 -> agree-01, p -> program, r2 -> reach-01, a -> activity, o2 -> organization, a2 -> ambiguity, i -> issue, r -> remain-01, - -> -, o -> official, n2 -> name))),[Ljava.lang.String;@2f9f7dcf,Annotation([Ljava.lang.String;@747ddf94,[Ljava.lang.String;@35e2d654,[Ljava.lang.String;@1bd4fdd),Annotation([Ljava.lang.String;@55183b20,[Ljava.lang.String;@4f83df68,[Ledu.cmu.lti.nlp.amr.Dependency;@6cf0e0ba),Annotation([Ljava.lang.String;@7d8995e,[Ljava.lang.String;@130d63be,[Ljava.lang.String;@42a48628),Annotation([Ljava.lang.String;@293a5bf6,[Ljava.lang.String;@6aeb35e6,[Ledu.cmu.lti.nlp.amr.Entity;@1283bb96))
AMR:
(a / activity, mod, n / nucleus)
(a2 / ambiguity, topic, p / program)
(a3 / agree-01, ARG1, h / have-org-role-91)
(h / have-org-role-91, ARG1, p / program)
(h / have-org-role-91, ARG2, o / official)
(i / issue, polarity, - / -)
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(o2 / organization, name, n2 / name)
(p / program, mod, n / nucleus)
(r / remain-01, ARG0, p / program)
(r / remain-01, ARG1, i / issue)
(r2 / reach-01, ARG0, o2 / organization)
(r2 / reach-01, ARG1, a3 / agree-01)

Decoded in 476,394 microseconds
Sentence: U.S. and European officials suspect that Iran's civilian nuclear energy program masks an effort to obtain technology that could be used in the production of an atomic bomb.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 28-29:  bomb => bomb
Span 8-9:  civilian => civilian
Span 19-20:  could => possible
Span 14-15:  effort => effort
Span 10-11:  energy => energy
Span 9-10:  nuclear => nucleus
Span 16-17:  obtain => obtain-01
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 24-25:  production => produce-01
Span 11-12:  program => program
Span 4-5:  suspect => suspect-01
Span 17-18:  technology => technology
Span 21-22:  used => use-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 27-28:  atomic => atom
Oracle Span 28-29:  bomb => bomb
Oracle Span 8-9:  civilian => civilian
Oracle Span 19-20:  could => possible
Oracle Span 14-15:  effort => effort
Oracle Span 10-11:  energy => energy
Oracle Span 2-3:  European => (continent :name (name :op "Europe"))
Oracle Span 6-7:  Iran => (country :name (name :op "Iran"))
Oracle Span 12-13:  masks => mask-01
Oracle Span 9-10:  nuclear => nucleus
Oracle Span 16-17:  obtain => obtain-01
Oracle Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 24-25:  production => produce-01
Oracle Span 11-12:  program => program
Oracle Span 4-5:  suspect => suspect-01
Oracle Span 17-18:  technology => technology
Oracle Span 0-1:  U.S. => (have-org-role-91 :ARG1 (country :name (name :op "U.S.")))
Oracle Span 21-22:  used => use-01

Missing span: U.S. => (have-org-role-91 :ARG1 (country :name (name :op "U.S.")))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: European => (continent :name (name :op "Europe"))
Missing span: masks => mask-01
Missing span: and => and
Missing span: atomic => atom
Dependencies:
1	U.S.	_	NNP	NNP	_	4	nn	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	European	_	JJ	JJ	_	1	conj	_	_
4	officials	_	NNS	NNS	_	5	nsubj	_	_
5	suspect	_	VBP	VBP	_	0	root	_	_
6	that	_	IN	IN	_	13	mark	_	_
7	Iran	_	NNP	NNP	_	12	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	civilian	_	JJ	JJ	_	12	amod	_	_
10	nuclear	_	JJ	JJ	_	12	amod	_	_
11	energy	_	NN	NN	_	12	nn	_	_
12	program	_	NN	NN	_	13	nsubj	_	_
13	masks	_	VBZ	VBZ	_	5	ccomp	_	_
14	an	_	DT	DT	_	15	det	_	_
15	effort	_	NN	NN	_	13	dobj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	obtain	_	VB	VB	_	15	vmod	_	_
18	technology	_	NN	NN	_	17	dobj	_	_
19	that	_	WDT	WDT	_	22	nsubjpass	_	_
20	could	_	MD	MD	_	22	aux	_	_
21	be	_	VB	VB	_	22	auxpass	_	_
22	used	_	VBN	VBN	_	18	rcmod	_	_
23	in	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	production	_	NN	NN	_	23	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	an	_	DT	DT	_	29	det	_	_
28	atomic	_	JJ	JJ	_	29	amod	_	_
29	bomb	_	NN	NN	_	26	pobj	_	_
30	.	_	.	.	_	5	punct	_	_

Oracle:
(b / bomb, mod, a2 / atom)
(c / country, name, n / name)
(c2 / continent, name, n2 / name)
(c4 / country, name, n4 / name)
(e / energy, mod, c3 / civilian)
(e / energy, mod, n3 / nucleus)
(e2 / effort, purpose, o2 / obtain-01)
(h / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG1, c2 / continent)
(h2 / have-org-role-91, ARG2, o3 / official)
(m / mask-01, ARG1, e2 / effort)
(m / mask-01, ARG2, p / program)
(n / name, op, "U.S.")
(n2 / name, op, "Europe")
(n4 / name, op, "Iran")
(o2 / obtain-01, ARG1, t / technology)
(p / program, mod, e / energy)
(p / program, poss, c4 / country)
(p2 / produce-01, ARG1, b / bomb)
(s / suspect-01, ARG0, a / and)
(s / suspect-01, ARG1, m / mask-01)
(u2 / use-01, ARG1, t / technology)
(u2 / use-01, ARG2, p2 / produce-01)
(u2 / use-01, mod, p4 / possible)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),bomb,bomb,false), Span(24,25,List(1),production,produce-01,false), Span(21,22,List(2),used,use-01,false), Span(19,20,List(3),could,possible,false), Span(17,18,List(4),technology,technology,false), Span(16,17,List(5),obtain,obtain-01,false), Span(14,15,List(6),effort,effort,false), Span(11,12,List(7),program,program,false), Span(10,11,List(8),energy,energy,false), Span(9,10,List(9),nuclear,nucleus,false), Span(8,9,List(10),civilian,civilian,false), Span(4,5,List(11),suspect,suspect-01,false), Span(3,4,List(13, 12),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> use-01, 5 -> obtain-01, 12 -> have-org-role-91, 8 -> energy, 7 -> program, 1 -> produce-01, 4 -> technology, 11 -> suspect-01, 6 -> effort, 0 -> bomb, 9 -> nucleus, 3 -> possible, 10 -> civilian, 13 -> official),Map(e -> effort, n -> nucleus, h -> have-org-role-91, b -> bomb, t -> technology, p2 -> possible, e2 -> energy, s -> suspect-01, p -> produce-01, o2 -> official, c -> civilian, u -> use-01, o -> obtain-01, p3 -> program))),[Ljava.lang.String;@74f0ea28,Annotation([Ljava.lang.String;@f6efaab,[Ljava.lang.String;@3c19aaa5,[Ljava.lang.String;@3349e9bb),Annotation([Ljava.lang.String;@409bf450,[Ljava.lang.String;@38d8f54a,[Ledu.cmu.lti.nlp.amr.Dependency;@49e53c76),Annotation([Ljava.lang.String;@351d00c0,[Ljava.lang.String;@2a3b5b47,[Ljava.lang.String;@55b699ef),Annotation([Ljava.lang.String;@35d019a3,[Ljava.lang.String;@689604d9,[Ledu.cmu.lti.nlp.amr.Entity;@18078bef))
AMR:
(e / effort, purpose, o / obtain-01)
(e2 / energy, mod, c / civilian)
(e2 / energy, mod, n / nucleus)
(h / have-org-role-91, ARG2, o2 / official)
(o / obtain-01, ARG0, p3 / program)
(o / obtain-01, ARG1, t / technology)
(p / produce-01, ARG1, b / bomb)
(p / produce-01, ARG2, h / have-org-role-91)
(p3 / program, mod, e2 / energy)
(s / suspect-01, ARG1, e / effort)
(u / use-01, ARG1, t / technology)
(u / use-01, ARG2, p / produce-01)
(u / use-01, mod, p2 / possible)

Decoded in 407,907 microseconds
Sentence: U.S. and European officials suspect that Iran's civilian nuclear energy program masks an effort to obtain technology that could be used in the production of an atomic bomb.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 28-29:  bomb => bomb
Span 8-9:  civilian => civilian
Span 19-20:  could => possible
Span 14-15:  effort => effort
Span 10-11:  energy => energy
Span 9-10:  nuclear => nucleus
Span 16-17:  obtain => obtain-01
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 24-25:  production => produce-01
Span 11-12:  program => program
Span 4-5:  suspect => suspect-01
Span 17-18:  technology => technology
Span 21-22:  used => use-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 27-28:  atomic => atom
Oracle Span 28-29:  bomb => bomb
Oracle Span 8-9:  civilian => civilian
Oracle Span 19-20:  could => possible
Oracle Span 14-15:  effort => effort
Oracle Span 10-11:  energy => energy
Oracle Span 2-3:  European => (continent :name (name :op "Europe"))
Oracle Span 6-7:  Iran => (country :name (name :op "Iran"))
Oracle Span 12-13:  masks => mask-01
Oracle Span 9-10:  nuclear => nucleus
Oracle Span 16-17:  obtain => obtain-01
Oracle Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 24-25:  production => produce-01
Oracle Span 11-12:  program => program
Oracle Span 4-5:  suspect => suspect-01
Oracle Span 17-18:  technology => technology
Oracle Span 0-1:  U.S. => (have-org-role-91 :ARG1 (country :name (name :op "U.S.")))
Oracle Span 21-22:  used => use-01

Missing span: U.S. => (have-org-role-91 :ARG1 (country :name (name :op "U.S.")))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: European => (continent :name (name :op "Europe"))
Missing span: masks => mask-01
Missing span: and => and
Missing span: atomic => atom
Dependencies:
1	U.S.	_	NNP	NNP	_	4	nn	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	European	_	JJ	JJ	_	1	conj	_	_
4	officials	_	NNS	NNS	_	5	nsubj	_	_
5	suspect	_	VBP	VBP	_	0	root	_	_
6	that	_	IN	IN	_	13	mark	_	_
7	Iran	_	NNP	NNP	_	12	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	civilian	_	JJ	JJ	_	12	amod	_	_
10	nuclear	_	JJ	JJ	_	12	amod	_	_
11	energy	_	NN	NN	_	12	nn	_	_
12	program	_	NN	NN	_	13	nsubj	_	_
13	masks	_	VBZ	VBZ	_	5	ccomp	_	_
14	an	_	DT	DT	_	15	det	_	_
15	effort	_	NN	NN	_	13	dobj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	obtain	_	VB	VB	_	15	vmod	_	_
18	technology	_	NN	NN	_	17	dobj	_	_
19	that	_	WDT	WDT	_	22	nsubjpass	_	_
20	could	_	MD	MD	_	22	aux	_	_
21	be	_	VB	VB	_	22	auxpass	_	_
22	used	_	VBN	VBN	_	18	rcmod	_	_
23	in	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	production	_	NN	NN	_	23	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	an	_	DT	DT	_	29	det	_	_
28	atomic	_	JJ	JJ	_	29	amod	_	_
29	bomb	_	NN	NN	_	26	pobj	_	_
30	.	_	.	.	_	5	punct	_	_

Oracle:
(b / bomb, mod, a2 / atom)
(c / country, name, n / name)
(c2 / continent, name, n2 / name)
(c4 / country, name, n4 / name)
(e / energy, mod, c3 / civilian)
(e / energy, mod, n3 / nucleus)
(e2 / effort, purpose, o2 / obtain-01)
(h / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG1, c2 / continent)
(h2 / have-org-role-91, ARG2, o3 / official)
(m / mask-01, ARG1, e2 / effort)
(m / mask-01, ARG2, p / program)
(n / name, op, "U.S.")
(n2 / name, op, "Europe")
(n4 / name, op, "Iran")
(o2 / obtain-01, ARG1, t / technology)
(p / program, mod, e / energy)
(p / program, poss, c4 / country)
(p2 / produce-01, ARG1, b / bomb)
(s / suspect-01, ARG0, a / and)
(s / suspect-01, ARG1, m / mask-01)
(u2 / use-01, ARG1, t / technology)
(u2 / use-01, ARG2, p2 / produce-01)
(u2 / use-01, mod, p4 / possible)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),bomb,bomb,false), Span(24,25,List(1),production,produce-01,false), Span(21,22,List(2),used,use-01,false), Span(19,20,List(3),could,possible,false), Span(17,18,List(4),technology,technology,false), Span(16,17,List(5),obtain,obtain-01,false), Span(14,15,List(6),effort,effort,false), Span(11,12,List(7),program,program,false), Span(10,11,List(8),energy,energy,false), Span(9,10,List(9),nuclear,nucleus,false), Span(8,9,List(10),civilian,civilian,false), Span(4,5,List(11),suspect,suspect-01,false), Span(3,4,List(13, 12),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> use-01, 5 -> obtain-01, 12 -> have-org-role-91, 8 -> energy, 7 -> program, 1 -> produce-01, 4 -> technology, 11 -> suspect-01, 6 -> effort, 0 -> bomb, 9 -> nucleus, 3 -> possible, 10 -> civilian, 13 -> official),Map(e -> effort, n -> nucleus, h -> have-org-role-91, b -> bomb, t -> technology, p2 -> possible, e2 -> energy, s -> suspect-01, p -> produce-01, o2 -> official, c -> civilian, u -> use-01, o -> obtain-01, p3 -> program))),[Ljava.lang.String;@799f10e1,Annotation([Ljava.lang.String;@4c371370,[Ljava.lang.String;@145f66e3,[Ljava.lang.String;@3023df74),Annotation([Ljava.lang.String;@313ac989,[Ljava.lang.String;@4562e04d,[Ledu.cmu.lti.nlp.amr.Dependency;@2a65fe7c),Annotation([Ljava.lang.String;@4135c3b,[Ljava.lang.String;@6302bbb1,[Ljava.lang.String;@31304f14),Annotation([Ljava.lang.String;@34a3d150,[Ljava.lang.String;@2a4fb17b,[Ledu.cmu.lti.nlp.amr.Entity;@5c6648b0))
AMR:
(e / effort, purpose, o / obtain-01)
(e2 / energy, mod, c / civilian)
(e2 / energy, mod, n / nucleus)
(h / have-org-role-91, ARG2, o2 / official)
(o / obtain-01, ARG0, p3 / program)
(o / obtain-01, ARG1, t / technology)
(p / produce-01, ARG1, b / bomb)
(p / produce-01, ARG2, h / have-org-role-91)
(p3 / program, mod, e2 / energy)
(s / suspect-01, ARG1, e / effort)
(u / use-01, ARG1, t / technology)
(u / use-01, ARG2, p / produce-01)
(u / use-01, mod, p2 / possible)

Decoded in 319,908 microseconds
Sentence: U.S. and European officials may impose a 4th round of sanctions on Tehran when the U.N. Security Council considers the issue of Iran's nuclear energy program most likely in September 2007.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Tehran"))
Spans:
Span 18-19:  considers => consider-01
Span 25-26:  energy => energy
Span 5-6:  impose => impose-01
Span 20-21:  issue => issue
Span 28-29:  likely => likely
Span 4-5:  may => possible
Span 24-25:  nuclear => nucleus
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 26-27:  program => program
Span 30-32:  September 2007 => (date-entity :month 9 :year 2007)
Span 12-13:  Tehran => (city :name (name :op "Tehran"))
Span 15-18:  U.N. Security Council => (organization :name (name :op "Council" :op "Security" :op "U.N."))

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 18-19:  considers => consider-02
Oracle Span 25-26:  energy => energy
Oracle Span 2-3:  European => (continent :name (name :op "Europe"))
Oracle Span 5-6:  impose => impose-01
Oracle Span 22-23:  Iran => (country :name (name :op "Iran"))
Oracle Span 20-21:  issue => issue
Oracle Span 28-29:  likely => likely
Oracle Span 4-5:  may => possible
Oracle Span 27-28:  most => most
Oracle Span 24-25:  nuclear => nucleus
Oracle Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 26-27:  program => program
Oracle Span 8-9:  round => round
Oracle Span 10-11:  sanctions => sanction-02
Oracle Span 30-32:  September 2007 => (date-entity :month 9 :year 2007)
Oracle Span 12-13:  Tehran => (city :name (name :op "Tehran"))
Oracle Span 15-18:  U.N. Security Council => (organization :name (name :op "Council" :op "Security" :op "U.N."))
Oracle Span 0-1:  U.S. => (have-org-role-91 :ARG1 (country :name (name :op "U.S.")))

Incorrect span: considers => consider-01
Missing span: U.S. => (have-org-role-91 :ARG1 (country :name (name :op "U.S.")))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: European => (continent :name (name :op "Europe"))
Missing span: round => round
Missing span: sanctions => sanction-02
Missing span: considers => consider-02
Missing span: most => most
Missing span: and => and
Dependencies:
1	U.S.	_	NNP	NNP	_	4	nn	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	European	_	JJ	JJ	_	1	conj	_	_
4	officials	_	NNS	NNS	_	6	nsubj	_	_
5	may	_	MD	MD	_	6	aux	_	_
6	impose	_	VB	VB	_	0	root	_	_
7	a	_	DT	DT	_	9	det	_	_
8	4th	_	JJ	JJ	_	9	amod	_	_
9	round	_	NN	NN	_	6	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	sanctions	_	NNS	NNS	_	10	pobj	_	_
12	on	_	IN	IN	_	11	prep	_	_
13	Tehran	_	NNP	NNP	_	12	pobj	_	_
14	when	_	WRB	WRB	_	19	advmod	_	_
15	the	_	DT	DT	_	18	det	_	_
16	U.N.	_	NNP	NNP	_	18	nn	_	_
17	Security	_	NNP	NNP	_	18	nn	_	_
18	Council	_	NNP	NNP	_	19	nsubj	_	_
19	considers	_	VBZ	VBZ	_	6	advcl	_	_
20	the	_	DT	DT	_	21	det	_	_
21	issue	_	NN	NN	_	19	dobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	Iran	_	NNP	NNP	_	27	poss	_	_
24	's	_	POS	POS	_	23	possessive	_	_
25	nuclear	_	JJ	JJ	_	27	amod	_	_
26	energy	_	NN	NN	_	27	nn	_	_
27	program	_	NN	NN	_	22	pobj	_	_
28	most	_	RBS	RBS	_	29	advmod	_	_
29	likely	_	JJ	JJ	_	27	amod	_	_
30	in	_	IN	IN	_	19	prep	_	_
31	September	_	NNP	NNP	_	30	pobj	_	_
32	2007	_	CD	CD	_	31	num	_	_
33	.	_	.	.	_	6	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / continent, name, n2 / name)
(c3 / city, name, n3 / name)
(c4 / consider-02, ARG0, o2 / organization)
(c4 / consider-02, ARG1, i2 / issue)
(c4 / consider-02, time, d / date-entity)
(c5 / country, name, n6 / name)
(d / date-entity, mod, l / likely)
(d / date-entity, month, 9)
(d / date-entity, year, 2007)
(e / energy, mod, n5 / nucleus)
(h / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG1, c2 / continent)
(h2 / have-org-role-91, ARG2, o4 / official)
(i / impose-01, ARG0, a2 / and)
(i / impose-01, ARG1, r / round)
(i2 / issue, topic, p2 / program)
(l / likely, mod, m / most)
(n / name, op, "U.S.")
(n2 / name, op, "Europe")
(n3 / name, op, "Tehran")
(n4 / name, op, "Council")
(n4 / name, op, "Security")
(n4 / name, op, "U.N.")
(n6 / name, op, "Iran")
(o2 / organization, name, n4 / name)
(p / possible, domain, i / impose-01)
(p2 / program, mod, e / energy)
(p2 / program, poss, c5 / country)
(s / sanction-02, ARG0, a2 / and)
(s / sanction-02, ARG1, c3 / city)
(s / sanction-02, ARG2, r / round)
(s / sanction-02, time, c4 / consider-02)

Input(Some(Graph(null,ArrayBuffer(Span(30,32,List(2, 1, 0),September 2007,(date-entity :month 9 :year 2007),false), Span(28,29,List(3),likely,likely,false), Span(26,27,List(4),program,program,false), Span(25,26,List(5),energy,energy,false), Span(24,25,List(6),nuclear,nucleus,false), Span(20,21,List(7),issue,issue,false), Span(18,19,List(8),considers,consider-01,false), Span(15,18,List(13, 12, 11, 10, 9),U.N. Security Council,(organization :name (name :op "Council" :op "Security" :op "U.N.")),false), Span(12,13,List(16, 15, 14),Tehran,(city :name (name :op "Tehran")),false), Span(5,6,List(17),impose,impose-01,false), Span(4,5,List(18),may,possible,false), Span(3,4,List(20, 19),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> 2007, 5 -> energy, 12 -> "Security", 15 -> name, 8 -> consider-01, 18 -> possible, 7 -> issue, 17 -> impose-01, 1 -> 9, 4 -> program, 11 -> "Council", 14 -> city, 20 -> official, 6 -> nucleus, 0 -> date-entity, 9 -> organization, 16 -> "Tehran", 19 -> have-org-role-91, 3 -> likely, 10 -> name, 13 -> "U.N."),Map(e -> energy, n -> nucleus, h -> have-org-role-91, 2 -> 2007, p2 -> possible, d -> date-entity, p -> program, n3 -> name, o2 -> official, i2 -> impose-01, i -> issue, c -> consider-01, l -> likely, 9 -> 9, o -> organization, n2 -> name, c2 -> city))),[Ljava.lang.String;@692f203f,Annotation([Ljava.lang.String;@48f2bd5b,[Ljava.lang.String;@7b2bbc3,[Ljava.lang.String;@a1153bc),Annotation([Ljava.lang.String;@1aafa419,[Ljava.lang.String;@47eaca72,[Ledu.cmu.lti.nlp.amr.Dependency;@55141def),Annotation([Ljava.lang.String;@55182842,[Ljava.lang.String;@3270d194,[Ljava.lang.String;@235834f2),Annotation([Ljava.lang.String;@5656be13,[Ljava.lang.String;@4218d6a3,[Ledu.cmu.lti.nlp.amr.Entity;@76505305))
AMR:
(c / consider-01, ARG0, o / organization)
(c / consider-01, ARG1, i / issue)
(c / consider-01, time, d / date-entity)
(c2 / city, name, n3 / name)
(c2 / city, op, c / consider-01)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2007)
(e / energy, mod, n / nucleus)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, o2 / official)
(i / issue, topic, p / program)
(i2 / impose-01, ARG0, l / likely)
(i2 / impose-01, ARG1, o / organization)
(n2 / name, op, "Council")
(n2 / name, op, "Security")
(n2 / name, op, "U.N.")
(n3 / name, op, "Tehran")
(o / organization, name, n2 / name)
(p / program, mod, e / energy)
(p2 / possible, domain, i2 / impose-01)

Decoded in 1,079,910 microseconds
Sentence: The International Atomic Energy Agency distributed limited copies of the IAEA report before a meeting on 11 September 2007 of the 35 members of the IAEA board.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (organization :name (name :op "IAEA"))
mkDayMonthYear(11	September	2007,11,September,2007)
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 16-19:  11 September 2007 => (date-entity :day 11 :month 9 :year 2007)
Span 12-13:  before => before
Span 7-8:  copies => copy-01
Span 5-6:  distributed => distribute-01
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 6-7:  limited => limit-01
Span 22-23:  members => (have-org-role-91 :ARG2 member)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 16-19:  11 September 2007 => (date-entity :day 11 :month 9 :year 2007)
Oracle Span 21-22:  35 => 35
Oracle Span 12-13:  before => before
Oracle Span 26-27:  board => board
Oracle Span 7-8:  copies => copy-01
Oracle Span 5-6:  distributed => distribute-01
Oracle Span 10-11:  IAEA => (organization :name (name :op "IAEA"))
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 6-7:  limited => limit-01
Oracle Span 14-15:  meeting => meet-03
Oracle Span 22-23:  members => (have-org-role-91 :ARG2 member)
Oracle Span 11-12:  report => (thing :ARG1-of report-01)

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: IAEA => (organization :name (name :op "IAEA"))
Missing span: meeting => meet-03
Missing span: 35 => 35
Missing span: board => board
Missing span: report => (thing :ARG1-of report-01)
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	International	_	NNP	NNP	_	5	nn	_	_
3	Atomic	_	NNP	NNP	_	5	nn	_	_
4	Energy	_	NNP	NNP	_	5	nn	_	_
5	Agency	_	NNP	NNP	_	6	nsubj	_	_
6	distributed	_	VBD	VBD	_	0	root	_	_
7	limited	_	JJ	JJ	_	8	amod	_	_
8	copies	_	NNS	NNS	_	6	dobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	IAEA	_	NNP	NNP	_	12	nn	_	_
12	report	_	NN	NN	_	9	pobj	_	_
13	before	_	IN	IN	_	6	prep	_	_
14	a	_	DT	DT	_	15	det	_	_
15	meeting	_	NN	NN	_	13	pobj	_	_
16	on	_	IN	IN	_	15	prep	_	_
17	11	_	CD	CD	_	18	num	_	_
18	September	_	NNP	NNP	_	16	pobj	_	_
19	2007	_	CD	CD	_	18	num	_	_
20	of	_	IN	IN	_	18	prep	_	_
21	the	_	DT	DT	_	23	det	_	_
22	35	_	CD	CD	_	23	num	_	_
23	members	_	NNS	NNS	_	20	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	27	det	_	_
26	IAEA	_	NNP	NNP	_	27	nn	_	_
27	board	_	NN	NN	_	24	pobj	_	_
28	.	_	.	.	_	6	punct	_	_

Oracle:
(b / before, op, m / meet-03)
(b2 / board, poss, o / organization)
(c / copy-01, ARG1, t / thing)
(d / distribute-01, ARG0, o / organization)
(d / distribute-01, time, b / before)
(d2 / date-entity, day, 11)
(d2 / date-entity, month, 9)
(d2 / date-entity, year, 2007)
(h / have-org-role-91, ARG1, b2 / board)
(h / have-org-role-91, ARG2, m2 / member)
(m / meet-03, time, d2 / date-entity)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "IAEA")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(r / report-01, ARG0, o2 / organization)
(r / report-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(1, 0),members,(have-org-role-91 :ARG2 member),false), Span(16,19,List(5, 4, 3, 2),11 September 2007,(date-entity :day 11 :month 9 :year 2007),false), Span(12,13,List(6),before,before,false), Span(7,8,List(7),copies,copy-01,false), Span(6,7,List(8),limited,limit-01,false), Span(5,6,List(9),distributed,distribute-01,false), Span(1,5,List(15, 14, 13, 12, 11, 10),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> date-entity, 5 -> 2007, 12 -> "International", 15 -> "Agency", 8 -> limit-01, 7 -> copy-01, 1 -> member, 4 -> 9, 11 -> name, 14 -> "Energy", 6 -> before, 0 -> have-org-role-91, 9 -> distribute-01, 3 -> 11, 10 -> organization, 13 -> "Atomic"),Map(n -> name, 2 -> 2007, h -> have-org-role-91, b -> before, d -> date-entity, m -> member, 1 -> 11, d2 -> distribute-01, l -> limit-01, c -> copy-01, o -> organization, 9 -> 9))),[Ljava.lang.String;@14cd1699,Annotation([Ljava.lang.String;@77888435,[Ljava.lang.String;@73a1e9a9,[Ljava.lang.String;@71d44a3),Annotation([Ljava.lang.String;@7b98f307,[Ljava.lang.String;@4802796d,[Ledu.cmu.lti.nlp.amr.Dependency;@34123d65),Annotation([Ljava.lang.String;@59474f18,[Ljava.lang.String;@65fb9ffc,[Ljava.lang.String;@3e694b3f),Annotation([Ljava.lang.String;@1bb5a082,[Ljava.lang.String;@78691363,[Ledu.cmu.lti.nlp.amr.Entity;@41d477ed))
AMR:
(c / copy-01, ARG0, o / organization)
(d / date-entity, day, 1 / 11)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2007)
(d2 / distribute-01, ARG0, o / organization)
(d2 / distribute-01, time, b / before)
(d2 / distribute-01, time, d / date-entity)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(l / limit-01, ARG1, c / copy-01)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)

Decoded in 199,466 microseconds
Sentence: The findings reflect an agency agreement on 21 August 2007 with Tehran that Iranian officials began publicizing the week of 12 August 2007.

mkDayMonthYear(21	August	2007,21,August,2007)
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(12	August	2007,12,August,2007)
NER Entity: (country :name (name :op "Tehran"))
Spans:
Span 20-23:  12 August 2007 => (date-entity :day 12 :month 8 :year 2007)
Span 7-10:  21 August 2007 => (date-entity :day 21 :month 8 :year 2007)
Span 4-5:  agency => agency
Span 5-6:  agreement => agree-01
Span 15-16:  began => begin-01
Span 1-2:  findings => (thing :ARG1-of find-01)
Span 14-15:  officials => (have-org-role-91 :ARG2 official)
Span 2-3:  reflect => reflect-01
Span 11-12:  Tehran => (city :name (name :op "Tehran"))

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 20-23:  12 August 2007 => (date-entity :day 12 :month 8 :year 2007)
Oracle Span 7-10:  21 August 2007 => (date-entity :day 21 :month 8 :year 2007)
Oracle Span 4-5:  agency => agency
Oracle Span 5-6:  agreement => agree-01
Oracle Span 15-16:  began => begin-01
Oracle Span 1-2:  findings => (thing :ARG1-of find-01)
Oracle Span 13-14:  Iranian => (country :name (name :op "Iran"))
Oracle Span 14-15:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 16-17:  publicizing => publicize-01
Oracle Span 2-3:  reflect => reflect-01
Oracle Span 11-12:  Tehran => (city :name (name :op "Tehran"))
Oracle Span 18-19:  week => week

Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: publicizing => publicize-01
Missing span: week => week
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	findings	_	NNS	NNS	_	3	nsubj	_	_
3	reflect	_	VBP	VBP	_	0	root	_	_
4	an	_	DT	DT	_	6	det	_	_
5	agency	_	NN	NN	_	6	nn	_	_
6	agreement	_	NN	NN	_	3	dobj	_	_
7	on	_	IN	IN	_	3	prep	_	_
8	21	_	CD	CD	_	7	pobj	_	_
9	August	_	NNP	NNP	_	8	tmod	_	_
10	2007	_	CD	CD	_	9	num	_	_
11	with	_	IN	IN	_	8	prep	_	_
12	Tehran	_	NNP	NNP	_	11	pobj	_	_
13	that	_	IN	IN	_	16	mark	_	_
14	Iranian	_	JJ	JJ	_	15	amod	_	_
15	officials	_	NNS	NNS	_	16	nsubj	_	_
16	began	_	VBD	VBD	_	3	ccomp	_	_
17	publicizing	_	VBG	VBG	_	16	xcomp	_	_
18	the	_	DT	DT	_	19	det	_	_
19	week	_	NN	NN	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	12	_	CD	CD	_	20	pobj	_	_
22	August	_	NNP	NNP	_	17	tmod	_	_
23	2007	_	CD	CD	_	22	num	_	_
24	.	_	.	.	_	3	punct	_	_

Oracle:
(a / agree-01, ARG0, a2 / agency)
(a / agree-01, ARG2, c / city)
(a / agree-01, time, d / date-entity)
(b / begin-01, ARG0, o / official)
(b / begin-01, ARG1, p / publicize-01)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(d / date-entity, day, 21)
(d / date-entity, month, 8)
(d / date-entity, year, 2007)
(d2 / date-entity, day, 12)
(d2 / date-entity, month, 8)
(d2 / date-entity, year, 2007)
(f / find-01, ARG1, t / thing)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Tehran")
(n2 / name, op, "Iran")
(p / publicize-01, ARG1, a / agree-01)
(p / publicize-01, time, w / week)
(r / reflect-01, ARG1, t / thing)
(r / reflect-01, ARG2, a / agree-01)
(w / week, mod, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(20,23,List(3, 2, 1, 0),12 August 2007,(date-entity :day 12 :month 8 :year 2007),false), Span(15,16,List(4),began,begin-01,false), Span(14,15,List(6, 5),officials,(have-org-role-91 :ARG2 official),false), Span(11,12,List(9, 8, 7),Tehran,(city :name (name :op "Tehran")),false), Span(7,10,List(13, 12, 11, 10),21 August 2007,(date-entity :day 21 :month 8 :year 2007),false), Span(5,6,List(14),agreement,agree-01,false), Span(4,5,List(15),agency,agency,false), Span(2,3,List(16),reflect,reflect-01,false), Span(1,2,List(18, 17),findings,(thing :ARG1-of find-01),false)),Map(2 -> 8, 5 -> have-org-role-91, 12 -> 8, 15 -> agency, 8 -> name, 18 -> find-01, 7 -> city, 17 -> thing, 1 -> 12, 4 -> begin-01, 11 -> 21, 14 -> agree-01, 6 -> official, 0 -> date-entity, 9 -> "Tehran", 16 -> reflect-01, 3 -> 2007, 10 -> date-entity, 13 -> 2007),Map(n -> name, h -> have-org-role-91, 2 -> 2007, t -> thing, b -> begin-01, 8 -> 8, d -> date-entity, 1 -> 12, 23 -> 2007, a -> agree-01, d2 -> date-entity, 82 -> 8, r -> reflect-01, a2 -> agency, c -> city, f -> find-01, 22 -> 21, o -> official))),[Ljava.lang.String;@3590fc5b,Annotation([Ljava.lang.String;@397fbdb,[Ljava.lang.String;@33d512c1,[Ljava.lang.String;@515c6049),Annotation([Ljava.lang.String;@639c2c1d,[Ljava.lang.String;@5fe94a96,[Ledu.cmu.lti.nlp.amr.Dependency;@443118b0),Annotation([Ljava.lang.String;@765d7657,[Ljava.lang.String;@74235045,[Ljava.lang.String;@618b19ad),Annotation([Ljava.lang.String;@2d3379b4,[Ljava.lang.String;@30c15d8b,[Ledu.cmu.lti.nlp.amr.Entity;@5e0e82ae))
AMR:
(a / agree-01, ARG1, a2 / agency)
(b / begin-01, ARG1, d / date-entity)
(c / city, name, n / name)
(d / date-entity, day, 1 / 12)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 2 / 2007)
(d2 / date-entity, day, 22 / 21)
(d2 / date-entity, mod, c / city)
(d2 / date-entity, month, 82 / 8)
(d2 / date-entity, year, 23 / 2007)
(f / find-01, ARG1, t / thing)
(h / have-org-role-91, ARG0, a2 / agency)
(h / have-org-role-91, ARG1, c / city)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Tehran")
(r / reflect-01, ARG0, t / thing)
(r / reflect-01, ARG1, b / begin-01)
(r / reflect-01, ARG2, a / agree-01)

Decoded in 787,457 microseconds
Sentence: The accord said that there were no remaining issues and ambiguities regarding Iran's nuclear program and activities.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 1-2:  accord => accord
Span 17-18:  activities => activity
Span 10-11:  ambiguities => ambiguity
Span 8-9:  issues => issue
Span 6-7:  no => -
Span 14-15:  nuclear => nucleus
Span 15-16:  program => program
Span 7-8:  remaining => remain-01
Span 2-3:  said => say-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 1-2:  accord => accord
Oracle Span 17-18:  activities => activity
Oracle Span 10-11:  ambiguities => ambiguity
Oracle Span 9-10:  and => and
Oracle Span 16-17:  and => and
Oracle Span 12-13:  Iran => (country :name (name :op "Iran"))
Oracle Span 8-9:  issues => issue
Oracle Span 6-7:  no => -
Oracle Span 14-15:  nuclear => nucleus
Oracle Span 15-16:  program => program
Oracle Span 11-12:  regarding => regard-01
Oracle Span 7-8:  remaining => remain-01
Oracle Span 2-3:  said => say-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: and => and
Missing span: regarding => regard-01
Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	accord	_	NN	NN	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	6	mark	_	_
5	there	_	EX	EX	_	6	expl	_	_
6	were	_	VBD	VBD	_	3	ccomp	_	_
7	no	_	DT	DT	_	9	neg	_	_
8	remaining	_	VBG	VBG	_	9	amod	_	_
9	issues	_	NNS	NNS	_	6	nsubj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	ambiguities	_	NNS	NNS	_	9	conj	_	_
12	regarding	_	VBG	VBG	_	11	prep	_	_
13	Iran	_	NNP	NNP	_	16	poss	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	nuclear	_	JJ	JJ	_	16	amod	_	_
16	program	_	NN	NN	_	12	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	activities	_	NNS	NNS	_	16	conj	_	_
19	.	_	.	.	_	3	punct	_	_

Oracle:
(a2 / and, op, a3 / ambiguity)
(a2 / and, op, i / issue)
(a4 / and, op, a5 / activity)
(a4 / and, op, p / program)
(a5 / activity, mod, n / nucleus)
(a5 / activity, poss, c2 / country)
(c2 / country, name, n2 / name)
(i / issue, polarity, - / -)
(n2 / name, op, "Iran")
(p / program, mod, n / nucleus)
(p / program, poss, c2 / country)
(r / remain-01, ARG1, a3 / ambiguity)
(r / remain-01, ARG1, i / issue)
(r2 / regard-01, ARG0, a3 / ambiguity)
(r2 / regard-01, ARG0, i / issue)
(r2 / regard-01, ARG1, a4 / and)
(s / say-01, ARG0, a / accord)
(s / say-01, ARG1, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),activities,activity,false), Span(15,16,List(1),program,program,false), Span(14,15,List(2),nuclear,nucleus,false), Span(10,11,List(3),ambiguities,ambiguity,false), Span(8,9,List(4),issues,issue,false), Span(7,8,List(5),remaining,remain-01,false), Span(6,7,List(6),no,-,false), Span(2,3,List(7),said,say-01,false), Span(1,2,List(8),accord,accord,false)),Map(2 -> nucleus, 5 -> remain-01, 8 -> accord, 7 -> say-01, 1 -> program, 4 -> issue, 6 -> -, 0 -> activity, 3 -> ambiguity),Map(n -> nucleus, a3 -> accord, s -> say-01, p -> program, a -> activity, r -> remain-01, i -> issue, a2 -> ambiguity, - -> -))),[Ljava.lang.String;@6771beb3,Annotation([Ljava.lang.String;@51399530,[Ljava.lang.String;@6b2ea799,[Ljava.lang.String;@411f53a0),Annotation([Ljava.lang.String;@2b71e916,[Ljava.lang.String;@36fc695d,[Ledu.cmu.lti.nlp.amr.Dependency;@28701274),Annotation([Ljava.lang.String;@13c9d689,[Ljava.lang.String;@3754a4bf,[Ljava.lang.String;@62379589),Annotation([Ljava.lang.String;@4afcd809,[Ljava.lang.String;@175c2241,[Ledu.cmu.lti.nlp.amr.Entity;@5bf0d49))
AMR:
(a / activity, mod, n / nucleus)
(a2 / ambiguity, topic, p / program)
(i / issue, polarity, - / -)
(p / program, mod, n / nucleus)
(r / remain-01, ARG0, p / program)
(r / remain-01, ARG1, i / issue)
(s / say-01, ARG0, a3 / accord)
(s / say-01, ARG1, i / issue)

Decoded in 135,161 microseconds
Sentence: According to an account by Reuters news agency the IAEA report said the work plan is a significant step forward.

NER Entity: (organization :name (name :op "Reuters"))
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 3-4:  account => account
Span 7-8:  agency => agency
Span 19-20:  forward => forward
Span 6-7:  news => news
Span 11-12:  said => say-01
Span 17-18:  significant => significant

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  account => account-01
Oracle Span 7-8:  agency => agency
Oracle Span 19-20:  forward => forward
Oracle Span 9-10:  IAEA => (organization :name (name :op "IAEA"))
Oracle Span 6-7:  news => news
Oracle Span 14-15:  plan => plan-01
Oracle Span 10-11:  report => (thing :ARG1-of report-01)
Oracle Span 5-6:  Reuters => (name :op "Reuters")
Oracle Span 11-12:  said => say-01
Oracle Span 17-18:  significant => significant
Oracle Span 18-19:  step => step-01
Oracle Span 13-14:  work => work

Incorrect span: account => account
Missing span: Reuters => (name :op "Reuters")
Missing span: IAEA => (organization :name (name :op "IAEA"))
Missing span: report => (thing :ARG1-of report-01)
Missing span: step => step-01
Missing span: plan => plan-01
Missing span: work => work
Missing span: account => account-01
Dependencies:
1	According	_	VBG	VBG	_	12	prep	_	_
2	to	_	TO	TO	_	1	pcomp	_	_
3	an	_	DT	DT	_	4	det	_	_
4	account	_	NN	NN	_	2	pobj	_	_
5	by	_	IN	IN	_	4	prep	_	_
6	Reuters	_	NNP	NNP	_	8	nn	_	_
7	news	_	NN	NN	_	8	nn	_	_
8	agency	_	NN	NN	_	5	pobj	_	_
9	the	_	DT	DT	_	11	det	_	_
10	IAEA	_	NNP	NNP	_	11	nn	_	_
11	report	_	NN	NN	_	12	nsubj	_	_
12	said	_	VBD	VBD	_	0	root	_	_
13	the	_	DT	DT	_	15	det	_	_
14	work	_	NN	NN	_	15	nn	_	_
15	plan	_	NN	NN	_	19	nsubj	_	_
16	is	_	VBZ	VBZ	_	19	cop	_	_
17	a	_	DT	DT	_	19	det	_	_
18	significant	_	JJ	JJ	_	19	amod	_	_
19	step	_	NN	NN	_	12	ccomp	_	_
20	forward	_	RB	RB	_	19	advmod	_	_
21	.	_	.	.	_	12	punct	_	_

Oracle:
(a / account-01, ARG0, a2 / agency)
(a2 / agency, mod, n / news)
(a2 / agency, name, n2 / name)
(n2 / name, op, "Reuters")
(n3 / name, op, "IAEA")
(o / organization, name, n3 / name)
(p / plan-01, ARG1, w / work)
(r / report-01, ARG0, o / organization)
(r / report-01, ARG1, t / thing)
(s / say-01, ARG0, a / account-01)
(s3 / step-01, ARG1, p / plan-01)
(s3 / step-01, ARG2, f / forward)
(s3 / step-01, manner, s4 / significant)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),forward,forward,false), Span(17,18,List(1),significant,significant,false), Span(11,12,List(2),said,say-01,false), Span(7,8,List(3),agency,agency,false), Span(6,7,List(4),news,news,false), Span(3,4,List(5),account,account,false)),Map(2 -> say-01, 5 -> account, 1 -> significant, 4 -> news, 0 -> forward, 3 -> agency),Map(n -> news, s2 -> say-01, s -> significant, a -> agency, a2 -> account, f -> forward))),[Ljava.lang.String;@5b7a5baa,Annotation([Ljava.lang.String;@776aec5c,[Ljava.lang.String;@1d296da,[Ljava.lang.String;@7c7a06ec),Annotation([Ljava.lang.String;@75d4a5c2,[Ljava.lang.String;@557caf28,[Ledu.cmu.lti.nlp.amr.Dependency;@408d971b),Annotation([Ljava.lang.String;@6c6cb480,[Ljava.lang.String;@3c46e67a,[Ljava.lang.String;@c730b35),Annotation([Ljava.lang.String;@206a70ef,[Ljava.lang.String;@292b08d6,[Ledu.cmu.lti.nlp.amr.Entity;@22555ebf))
AMR:
(a / agency, mod, n / news)
(a2 / account, op, s / significant)
(a2 / account, poss, a / agency)
(s2 / say-01, ARG0, a2 / account)
(s2 / say-01, ARG1, f / forward)

Decoded in 67,081 microseconds
Sentence: Reuters quoted a senior U.N. official as stating the Iranian government's efforts to enrich uranium had slowed.

NER Entity: (organization :name (name :op "Reuters"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 12-13:  efforts => effort
Span 14-15:  enrich => enrich-01
Span 1-2:  quoted => quote-01
Span 3-4:  senior => senior
Span 17-18:  slowed => slow-01
Span 7-8:  stating => state-01
Span 15-16:  uranium => uranium

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 12-13:  efforts => effort
Oracle Span 14-15:  enrich => enrich-01
Oracle Span 10-11:  government => (government-organization :ARG0-of govern-01)
Oracle Span 16-17:  had => (person :ARG0-of have-org-role-91)
Oracle Span 9-10:  Iranian => (country :name (name :op "Iran"))
Oracle Span 5-6:  official => official
Oracle Span 1-2:  quoted => quote-01
Oracle Span 0-1:  Reuters => (publication :name (name :op "Reuters"))
Oracle Span 3-4:  senior => senior
Oracle Span 17-18:  slowed => slow-01
Oracle Span 7-8:  stating => state-01
Oracle Span 4-5:  U.N. => (organization :name (name :op "U.N."))
Oracle Span 15-16:  uranium => uranium

Missing span: Reuters => (publication :name (name :op "Reuters"))
Missing span: U.N. => (organization :name (name :op "U.N."))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: official => official
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: had => (person :ARG0-of have-org-role-91)
Dependencies:
1	Reuters	_	NNP	NNP	_	18	nsubj	_	_
2	quoted	_	VBN	VBN	_	1	vmod	_	_
3	a	_	DT	DT	_	6	det	_	_
4	senior	_	JJ	JJ	_	6	amod	_	_
5	U.N.	_	NNP	NNP	_	6	nn	_	_
6	official	_	NN	NN	_	2	dobj	_	_
7	as	_	IN	IN	_	2	prep	_	_
8	stating	_	VBG	VBG	_	7	pcomp	_	_
9	the	_	DT	DT	_	11	det	_	_
10	Iranian	_	JJ	JJ	_	11	amod	_	_
11	government	_	NN	NN	_	13	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	efforts	_	NNS	NNS	_	8	dobj	_	_
14	to	_	TO	TO	_	8	prep	_	_
15	enrich	_	JJ	JJ	_	16	amod	_	_
16	uranium	_	NN	NN	_	14	pobj	_	_
17	had	_	VBD	VBD	_	18	aux	_	_
18	slowed	_	VBN	VBN	_	0	root	_	_
19	.	_	.	.	_	18	punct	_	_

Oracle:
(c / country, name, n3 / name)
(e / effort, poss, g / government-organization)
(e / effort, purpose, e2 / enrich-01)
(e2 / enrich-01, ARG0, g / government-organization)
(e2 / enrich-01, ARG1, u / uranium)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Reuters")
(n2 / name, op, "U.N.")
(n3 / name, op, "Iran")
(o / official, mod, s / senior)
(o2 / organization, name, n2 / name)
(p / publication, name, n / name)
(q / quote-01, ARG0, p / publication)
(q / quote-01, ARG1, p2 / person)
(q / quote-01, ARG2, s2 / state-01)
(s2 / state-01, ARG0, o / official)
(s2 / state-01, ARG1, s3 / slow-01)
(s3 / slow-01, ARG1, e / effort)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),slowed,slow-01,false), Span(15,16,List(1),uranium,uranium,false), Span(14,15,List(2),enrich,enrich-01,false), Span(12,13,List(3),efforts,effort,false), Span(7,8,List(4),stating,state-01,false), Span(3,4,List(5),senior,senior,false), Span(1,2,List(6),quoted,quote-01,false)),Map(2 -> enrich-01, 5 -> senior, 1 -> uranium, 4 -> state-01, 6 -> quote-01, 0 -> slow-01, 3 -> effort),Map(e -> enrich-01, q -> quote-01, s2 -> state-01, e2 -> effort, s -> slow-01, s3 -> senior, u -> uranium))),[Ljava.lang.String;@36ebc363,Annotation([Ljava.lang.String;@45752059,[Ljava.lang.String;@34e9fd99,[Ljava.lang.String;@3c41ed1d),Annotation([Ljava.lang.String;@54d9d12d,[Ljava.lang.String;@38425407,[Ledu.cmu.lti.nlp.amr.Dependency;@43bc63a3),Annotation([Ljava.lang.String;@702657cc,[Ljava.lang.String;@6a6cb05c,[Ljava.lang.String;@40a4337a),Annotation([Ljava.lang.String;@6025e1b6,[Ljava.lang.String;@22ff4249,[Ledu.cmu.lti.nlp.amr.Entity;@2d1ef81a))
AMR:
(e / enrich-01, ARG1, u / uranium)
(q / quote-01, ARG1, s / slow-01)
(q / quote-01, ARG2, s2 / state-01)
(s / slow-01, ARG0, s3 / senior)
(s2 / state-01, ARG1, e2 / effort)
(s2 / state-01, ARG2, e / enrich-01)

Decoded in 87,332 microseconds
Sentence: The IAEA report stated that Iranian officials must continue to build confidence about the scope and nature of Iran's present and future nuclear program.

NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 8-9:  continue => continue-01
Span 22-23:  future => future
Span 16-17:  nature => nature
Span 23-24:  nuclear => nucleus
Span 6-7:  officials => (have-org-role-91 :ARG2 official)
Span 20-21:  present => present
Span 24-25:  program => program
Span 14-15:  scope => scope

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 21-22:  and => and
Oracle Span 10-11:  build => build-02
Oracle Span 11-12:  confidence => confidence
Oracle Span 8-9:  continue => continue-01
Oracle Span 22-23:  future => future
Oracle Span 1-2:  IAEA => (organization :name (name :op "IAEA"))
Oracle Span 18-19:  Iran => (country :name (name :op "Iran"))
Oracle Span 16-17:  nature => nature
Oracle Span 23-24:  nuclear => nucleus
Oracle Span 6-7:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 20-21:  present => present
Oracle Span 24-25:  program => program
Oracle Span 2-3:  report => (thing :ARG1-of report-01)
Oracle Span 14-15:  scope => scope
Oracle Span 3-4:  stated => state-01

Missing span: IAEA => (organization :name (name :op "IAEA"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: build => build-02
Missing span: confidence => confidence
Missing span: and => and
Missing span: and => and
Missing span: report => (thing :ARG1-of report-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	IAEA	_	NNP	NNP	_	3	nn	_	_
3	report	_	NN	NN	_	4	nsubj	_	_
4	stated	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	9	mark	_	_
6	Iranian	_	JJ	JJ	_	7	amod	_	_
7	officials	_	NNS	NNS	_	9	nsubj	_	_
8	must	_	MD	MD	_	9	aux	_	_
9	continue	_	VB	VB	_	4	ccomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	build	_	VB	VB	_	9	xcomp	_	_
12	confidence	_	NN	NN	_	11	dobj	_	_
13	about	_	IN	IN	_	11	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	scope	_	NN	NN	_	13	pobj	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	nature	_	NN	NN	_	15	conj	_	_
18	of	_	IN	IN	_	15	prep	_	_
19	Iran	_	NNP	NNP	_	21	poss	_	_
20	's	_	POS	POS	_	19	possessive	_	_
21	present	_	NN	NN	_	18	pobj	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	future	_	JJ	JJ	_	25	amod	_	_
24	nuclear	_	JJ	JJ	_	25	amod	_	_
25	program	_	NN	NN	_	21	conj	_	_
26	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, n3 / nature)
(a / and, op, s2 / scope)
(a2 / and, op, f / future)
(a2 / and, op, p2 / present)
(b / build-02, ARG0, o2 / official)
(b / build-02, ARG1, c3 / confidence)
(c / continue-01, ARG1, b / build-02)
(c2 / country, name, n2 / name)
(c3 / confidence, topic, a / and)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o2 / official)
(n / name, op, "IAEA")
(n2 / name, op, "Iran")
(n3 / nature, poss, p / program)
(o3 / organization, name, n / name)
(p / program, mod, n4 / nucleus)
(p / program, poss, c2 / country)
(p / program, time, a2 / and)
(r / report-01, ARG0, o3 / organization)
(r / report-01, ARG1, t / thing)
(s / state-01, ARG0, t / thing)
(s2 / scope, poss, p / program)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),program,program,false), Span(23,24,List(1),nuclear,nucleus,false), Span(22,23,List(2),future,future,false), Span(20,21,List(3),present,present,false), Span(16,17,List(4),nature,nature,false), Span(14,15,List(5),scope,scope,false), Span(8,9,List(6),continue,continue-01,false), Span(6,7,List(8, 7),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> future, 5 -> scope, 8 -> official, 7 -> have-org-role-91, 1 -> nucleus, 4 -> nature, 6 -> continue-01, 0 -> program, 3 -> present),Map(n -> nucleus, h -> have-org-role-91, p2 -> present, s -> scope, p -> program, c -> continue-01, o -> official, f -> future, n2 -> nature))),[Ljava.lang.String;@4c402120,Annotation([Ljava.lang.String;@327514f,[Ljava.lang.String;@5b12b668,[Ljava.lang.String;@1165b38),Annotation([Ljava.lang.String;@4c12331b,[Ljava.lang.String;@7586beff,[Ledu.cmu.lti.nlp.amr.Dependency;@3b69e7d1),Annotation([Ljava.lang.String;@815b41f,[Ljava.lang.String;@5542c4ed,[Ljava.lang.String;@1573f9fc),Annotation([Ljava.lang.String;@6150c3ec,[Ljava.lang.String;@44c03695,[Ledu.cmu.lti.nlp.amr.Entity;@7e6f74c))
AMR:
(c / continue-01, ARG1, h / have-org-role-91)
(c / continue-01, time, s / scope)
(h / have-org-role-91, ARG1, p / program)
(h / have-org-role-91, ARG2, o / official)
(n2 / nature, poss, p2 / present)
(p / program, mod, n / nucleus)
(p / program, time, f / future)
(s / scope, poss, p2 / present)

Decoded in 118,048 microseconds
Sentence: Iranian officials on 30 August 2007 stated cooperation with the IAEA possibly to prevent a further round of international sanctions.

NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(30	August	2007,30,August,2007)
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 3-6:  30 August 2007 => (date-entity :day 30 :month 8 :year 2007)
Span 7-8:  cooperation => cooperate-01
Span 15-16:  further => further
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 11-12:  possibly => possible
Span 13-14:  prevent => prevent-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-6:  30 August 2007 => (date-entity :day 30 :month 8 :year 2007)
Oracle Span 7-8:  cooperation => cooperate-01
Oracle Span 15-16:  further => further
Oracle Span 10-11:  IAEA => (organization :name (name :op "IAEA"))
Oracle Span 18-19:  international => international
Oracle Span 0-1:  Iranian => (country :name (name :op "Iran"))
Oracle Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 11-12:  possibly => possible
Oracle Span 13-14:  prevent => prevent-01
Oracle Span 16-17:  round => round
Oracle Span 19-20:  sanctions => sanction-02
Oracle Span 6-7:  stated => state-01

Missing span: IAEA => (organization :name (name :op "IAEA"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: round => round
Missing span: sanctions => sanction-02
Missing span: international => international
Dependencies:
1	Iranian	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	7	nsubj	_	_
3	on	_	IN	IN	_	2	prep	_	_
4	30	_	CD	CD	_	3	pobj	_	_
5	August	_	NNP	NNP	_	2	tmod	_	_
6	2007	_	CD	CD	_	5	num	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	cooperation	_	NN	NN	_	7	dobj	_	_
9	with	_	IN	IN	_	7	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	IAEA	_	NNP	NNP	_	9	pobj	_	_
12	possibly	_	RB	RB	_	14	advmod	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	prevent	_	VB	VB	_	7	vmod	_	_
15	a	_	DT	DT	_	17	det	_	_
16	further	_	JJ	JJ	_	17	amod	_	_
17	round	_	NN	NN	_	14	dobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	international	_	JJ	JJ	_	20	amod	_	_
20	sanctions	_	NNS	NNS	_	18	pobj	_	_
21	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / cooperate-01, ARG0, o / official)
(c2 / cooperate-01, ARG1, o2 / organization)
(c2 / cooperate-01, purpose, p / possible)
(d / date-entity, day, 30)
(d / date-entity, month, 8)
(d / date-entity, year, 2007)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Iran")
(n2 / name, op, "IAEA")
(o2 / organization, name, n2 / name)
(p / possible, domain, p2 / prevent-01)
(p2 / prevent-01, ARG1, r / round)
(r / round, degree, f / further)
(s / state-01, ARG1, c2 / cooperate-01)
(s / state-01, time, d / date-entity)
(s2 / sanction-02, consist, r / round)
(s2 / sanction-02, mod, i / international)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),further,further,false), Span(13,14,List(1),prevent,prevent-01,false), Span(11,12,List(2),possibly,possible,false), Span(7,8,List(3),cooperation,cooperate-01,false), Span(3,6,List(7, 6, 5, 4),30 August 2007,(date-entity :day 30 :month 8 :year 2007),false), Span(1,2,List(9, 8),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> possible, 5 -> 30, 8 -> have-org-role-91, 7 -> 2007, 1 -> prevent-01, 4 -> date-entity, 6 -> 8, 9 -> official, 0 -> further, 3 -> cooperate-01),Map(h -> have-org-role-91, 2 -> 2007, 8 -> 8, p2 -> possible, d -> date-entity, p -> prevent-01, c -> cooperate-01, o -> official, f -> further, 3 -> 30))),[Ljava.lang.String;@dd05255,Annotation([Ljava.lang.String;@6a78afa0,[Ljava.lang.String;@2f4948e4,[Ljava.lang.String;@1f2586d6),Annotation([Ljava.lang.String;@10683d9d,[Ljava.lang.String;@3fc2959f,[Ledu.cmu.lti.nlp.amr.Dependency;@5aa9e4eb),Annotation([Ljava.lang.String;@6989da5e,[Ljava.lang.String;@385c9627,[Ljava.lang.String;@139982de),Annotation([Ljava.lang.String;@682b2fa,[Ljava.lang.String;@217ed35e,[Ledu.cmu.lti.nlp.amr.Entity;@7dcf94f8))
AMR:
(c / cooperate-01, ARG2, p / prevent-01)
(d / date-entity, day, 3 / 30)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 2 / 2007)
(h / have-org-role-91, ARG1, f / further)
(h / have-org-role-91, ARG2, o / official)
(h / have-org-role-91, time, d / date-entity)
(p / prevent-01, ARG0, h / have-org-role-91)
(p / prevent-01, mod, p2 / possible)

Decoded in 108,144 microseconds
Sentence: Iran's representative to the IAEA Ali Asghar SOLTANIEH stated to Tehran's Fars news agency that the report emphasized that there exists no sign or evidence indicating diversion of Iran's nuclear activities and that all of Iran's nuclear materials have been audited.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (person :name (name :op "Ali" :op "Asghar"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (organization :name (name :op "Fars"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Tehran"))
Spans:
Span 33-34:  activities => activity
Span 15-16:  agency => agency
Span 6-8:  Ali Asghar => (person :name (name :op "Ali" :op "Asghar"))
Span 36-37:  all => all
Span 19-20:  emphasized => emphasize-01
Span 26-27:  evidence => (thing :ARG0-of evidence-01)
Span 27-28:  indicating => indicate-01
Span 41-42:  materials => material
Span 14-15:  news => news
Span 23-24:  no => -
Span 40-41:  nuclear => nucleus
Span 32-33:  nuclear => nucleus
Span 25-26:  or => or
Span 2-3:  representative => represent-01
Span 11-12:  Tehran => (city :name (name :op "Tehran"))

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 33-34:  activities => activity
Oracle Span 6-9:  Ali Asghar SOLTANIEH => (person :name (name :op "Soltanieh" :op "Asghar" :op "Ali"))
Oracle Span 36-37:  all => all
Oracle Span 34-35:  and => and
Oracle Span 44-45:  audited => audit-01
Oracle Span 28-29:  diversion => divert-01
Oracle Span 19-20:  emphasized => emphasize-01
Oracle Span 26-27:  evidence => evidence-01
Oracle Span 22-23:  exists => exist-01
Oracle Span 13-16:  Fars news agency => (publication :name (name :op "Agency" :op "News" :op "Fars"))
Oracle Span 42-43:  have => have-org-role-91
Oracle Span 5-6:  IAEA => (organization :name (name :op "IAEA"))
Oracle Span 27-28:  indicating => indicate-01
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 41-42:  materials => material
Oracle Span 23-24:  no => -
Oracle Span 32-33:  nuclear => nucleus
Oracle Span 25-26:  or => or
Oracle Span 18-19:  report => (thing :ARG0-of report-01)
Oracle Span 2-3:  representative => represent-01
Oracle Span 24-25:  sign => sign
Oracle Span 9-10:  stated => state-01
Oracle Span 11-12:  Tehran => (city :name (name :op "Tehran"))

Extra span: nuclear => nucleus
Incorrect span: evidence => (thing :ARG0-of evidence-01)
Extra span: agency => agency
Extra span: news => news
Extra span: Ali Asghar => (person :name (name :op "Ali" :op "Asghar"))
Missing span: Ali Asghar SOLTANIEH => (person :name (name :op "Soltanieh" :op "Asghar" :op "Ali"))
Missing span: IAEA => (organization :name (name :op "IAEA"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Fars news agency => (publication :name (name :op "Agency" :op "News" :op "Fars"))
Missing span: stated => state-01
Missing span: and => and
Missing span: audited => audit-01
Missing span: exists => exist-01
Missing span: evidence => evidence-01
Missing span: sign => sign
Missing span: report => (thing :ARG0-of report-01)
Missing span: diversion => divert-01
Missing span: have => have-org-role-91
Dependencies:
1	Iran	_	NNP	NNP	_	3	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	representative	_	NN	NN	_	10	nsubj	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	the	_	DT	DT	_	9	det	_	_
6	IAEA	_	NNP	NNP	_	9	nn	_	_
7	Ali	_	NNP	NNP	_	9	nn	_	_
8	Asghar	_	NNP	NNP	_	9	nn	_	_
9	SOLTANIEH	_	NNP	NNP	_	4	pobj	_	_
10	stated	_	VBD	VBD	_	0	root	_	_
11	to	_	TO	TO	_	10	prep	_	_
12	Tehran	_	NNP	NNP	_	16	poss	_	_
13	's	_	POS	POS	_	12	possessive	_	_
14	Fars	_	NNP	NNP	_	16	nn	_	_
15	news	_	NN	NN	_	16	nn	_	_
16	agency	_	NN	NN	_	11	pobj	_	_
17	that	_	IN	IN	_	20	mark	_	_
18	the	_	DT	DT	_	19	det	_	_
19	report	_	NN	NN	_	20	nsubj	_	_
20	emphasized	_	VBD	VBD	_	10	ccomp	_	_
21	that	_	IN	IN	_	23	mark	_	_
22	there	_	EX	EX	_	23	expl	_	_
23	exists	_	VBZ	VBZ	_	20	ccomp	_	_
24	no	_	DT	DT	_	25	neg	_	_
25	sign	_	NN	NN	_	23	dobj	_	_
26	or	_	CC	CC	_	25	cc	_	_
27	evidence	_	NN	NN	_	25	conj	_	_
28	indicating	_	VBG	VBG	_	25	vmod	_	_
29	diversion	_	NN	NN	_	28	dobj	_	_
30	of	_	IN	IN	_	29	prep	_	_
31	Iran	_	NNP	NNP	_	34	poss	_	_
32	's	_	POS	POS	_	31	possessive	_	_
33	nuclear	_	JJ	JJ	_	34	amod	_	_
34	activities	_	NNS	NNS	_	30	pobj	_	_
35	and	_	CC	CC	_	23	cc	_	_
36	that	_	IN	IN	_	45	mark	_	_
37	all	_	DT	DT	_	45	nsubjpass	_	_
38	of	_	IN	IN	_	37	prep	_	_
39	Iran	_	NNP	NNP	_	42	poss	_	_
40	's	_	POS	POS	_	39	possessive	_	_
41	nuclear	_	JJ	JJ	_	42	amod	_	_
42	materials	_	NNS	NNS	_	38	pobj	_	_
43	have	_	VBP	VBP	_	45	aux	_	_
44	been	_	VBN	VBN	_	45	auxpass	_	_
45	audited	_	VBN	VBN	_	23	conj	_	_
46	.	_	.	.	_	10	punct	_	_

Oracle:
(a / activity, mod, n6 / nucleus)
(a / activity, poss, c / country)
(a2 / and, op, a3 / audit-01)
(a2 / and, op, e2 / exist-01)
(a3 / audit-01, ARG1, m / material)
(c / country, name, n3 / name)
(c2 / city, name, n5 / name)
(d / divert-01, ARG1, a / activity)
(e / emphasize-01, ARG0, t / thing)
(e / emphasize-01, ARG1, a2 / and)
(e2 / exist-01, ARG1, o2 / or)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG3, r / represent-01)
(i / indicate-01, ARG0, e3 / evidence-01)
(i / indicate-01, ARG0, s2 / sign)
(i / indicate-01, ARG1, d / divert-01)
(m / material, mod, n6 / nucleus)
(m / material, poss, c / country)
(m / material, quant, a4 / all)
(n / name, op, "Ali")
(n / name, op, "Asghar")
(n / name, op, "Soltanieh")
(n2 / name, op, "IAEA")
(n3 / name, op, "Iran")
(n5 / name, op, "Tehran")
(n7 / name, op, "Agency")
(n7 / name, op, "Fars")
(n7 / name, op, "News")
(o / organization, name, n2 / name)
(o2 / or, op, e3 / evidence-01)
(o2 / or, op, s2 / sign)
(p / person, name, n / name)
(p2 / publication, location, c2 / city)
(p2 / publication, name, n7 / name)
(r / represent-01, ARG1, c / country)
(r2 / report-01, ARG0, t / thing)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, e / emphasize-01)
(s / state-01, ARG2, p2 / publication)
(s2 / sign, polarity, - / -)

Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),materials,material,false), Span(40,41,List(1),nuclear,nucleus,false), Span(36,37,List(2),all,all,false), Span(33,34,List(3),activities,activity,false), Span(32,33,List(4),nuclear,nucleus,false), Span(27,28,List(5),indicating,indicate-01,false), Span(26,27,List(7, 6),evidence,(thing :ARG0-of evidence-01),false), Span(25,26,List(8),or,or,false), Span(23,24,List(9),no,-,false), Span(19,20,List(10),emphasized,emphasize-01,false), Span(15,16,List(11),agency,agency,false), Span(14,15,List(12),news,news,false), Span(11,12,List(15, 14, 13),Tehran,(city :name (name :op "Tehran")),false), Span(6,8,List(19, 18, 17, 16),Ali Asghar,(person :name (name :op "Ali" :op "Asghar")),false), Span(2,3,List(20),representative,represent-01,false)),Map(2 -> all, 5 -> indicate-01, 12 -> news, 15 -> "Tehran", 8 -> or, 18 -> "Ali", 7 -> evidence-01, 17 -> name, 1 -> nucleus, 4 -> nucleus, 11 -> agency, 14 -> name, 20 -> represent-01, 6 -> thing, 0 -> material, 9 -> -, 16 -> person, 19 -> "Asghar", 3 -> activity, 10 -> emphasize-01, 13 -> city),Map(e -> evidence-01, n -> nucleus, t -> thing, e2 -> emphasize-01, n4 -> name, a3 -> agency, m -> material, p -> person, a -> all, n3 -> news, r -> represent-01, a2 -> activity, i -> indicate-01, - -> -, c -> city, o -> or, n2 -> nucleus, n5 -> name))),[Ljava.lang.String;@229f66ed,Annotation([Ljava.lang.String;@31190526,[Ljava.lang.String;@662ac478,[Ljava.lang.String;@6743e411),Annotation([Ljava.lang.String;@3eb25e1a,[Ljava.lang.String;@477b4cdf,[Ledu.cmu.lti.nlp.amr.Dependency;@77c2494c),Annotation([Ljava.lang.String;@f5958c9,[Ljava.lang.String;@233795b6,[Ljava.lang.String;@3eb738bb),Annotation([Ljava.lang.String;@5bda8e08,[Ljava.lang.String;@1e800aaa,[Ledu.cmu.lti.nlp.amr.Entity;@185a6e9))
AMR:
(a2 / activity, mod, n2 / nucleus)
(a3 / agency, mod, n3 / news)
(a3 / agency, poss, c / city)
(c / city, name, n4 / name)
(e / evidence-01, ARG0, t / thing)
(e / evidence-01, ARG1, - / -)
(e2 / emphasize-01, ARG0, a3 / agency)
(e2 / emphasize-01, ARG1, i / indicate-01)
(i / indicate-01, ARG0, a / all)
(i / indicate-01, ARG1, a2 / activity)
(i / indicate-01, ARG2, o / or)
(m / material, mod, n / nucleus)
(m / material, quant, a / all)
(n4 / name, op, "Tehran")
(n5 / name, op, "Ali")
(n5 / name, op, "Asghar")
(o / or, op, t / thing)
(p / person, name, n5 / name)
(r / represent-01, ARG1, c / city)
(r / represent-01, ARG2, p / person)

Decoded in 1,157,067 microseconds
Sentence: Some Nonproliferation Experts stated the IAEA was ceding too much to Iran.

NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 2-3:  Experts => (person :ARG1-of expert-41)
Span 9-10:  much => much
Span 8-9:  too => too

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 7-8:  ceding => cede-01
Oracle Span 2-3:  Experts => (person :ARG1-of expert-41)
Oracle Span 5-6:  IAEA => (organization :name (name :op "IAEA"))
Oracle Span 11-12:  Iran => (country :name (name :op "Iran"))
Oracle Span 9-10:  much => much
Oracle Span 0-1:  Some => some
Oracle Span 3-4:  stated => state-01
Oracle Span 8-9:  too => too

Missing span: IAEA => (organization :name (name :op "IAEA"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: ceding => cede-01
Missing span: Some => some
Dependencies:
1	Some	_	DT	DT	_	3	det	_	_
2	Nonproliferation	_	NNP	NNP	_	3	nn	_	_
3	Experts	_	NNS	NNS	_	4	nsubj	_	_
4	stated	_	VBD	VBD	_	0	root	_	_
5	the	_	DT	DT	_	6	det	_	_
6	IAEA	_	NNP	NNP	_	8	nsubj	_	_
7	was	_	VBD	VBD	_	8	aux	_	_
8	ceding	_	VBG	VBG	_	4	ccomp	_	_
9	too	_	RB	RB	_	10	advmod	_	_
10	much	_	RB	RB	_	8	advmod	_	_
11	to	_	TO	TO	_	8	prep	_	_
12	Iran	_	NNP	NNP	_	11	pobj	_	_
13	.	_	.	.	_	4	punct	_	_

Oracle:
(c / cede-01, ARG0, o / organization)
(c / cede-01, ARG1, m / much)
(c / cede-01, ARG2, c2 / country)
(c2 / country, name, n2 / name)
(e / expert-41, ARG1, p / person)
(m / much, degree, t / too)
(n / name, op, "IAEA")
(n2 / name, op, "Iran")
(o / organization, name, n / name)
(p / person, quant, s2 / some)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / cede-01)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),much,much,false), Span(8,9,List(1),too,too,false), Span(2,3,List(3, 2),Experts,(person :ARG1-of expert-41),false)),Map(2 -> person, 1 -> too, 0 -> much, 3 -> expert-41),Map(e -> expert-41, t -> too, m -> much, p -> person))),[Ljava.lang.String;@6f03482,Annotation([Ljava.lang.String;@9d5509a,[Ljava.lang.String;@179ece50,[Ljava.lang.String;@3b0090a4),Annotation([Ljava.lang.String;@3cd3e762,[Ljava.lang.String;@1fa121e2,[Ledu.cmu.lti.nlp.amr.Dependency;@7eac9008),Annotation([Ljava.lang.String;@4116aac9,[Ljava.lang.String;@62ddbd7e,[Ljava.lang.String;@74e52ef6),Annotation([Ljava.lang.String;@6ed3ccb2,[Ljava.lang.String;@1a677343,[Ledu.cmu.lti.nlp.amr.Entity;@15de0b3c))
AMR:
(e / expert-41, ARG0, t / too)
(e / expert-41, ARG1, p / person)
(m / much, degree, t / too)

Decoded in 57,050 microseconds
Sentence: Arms-control experts David Albright and Jacqueline Shire of the Washington-based Institute for Science and International Security wrote in a criticism published the week of 19 August 2007 that the idea of closing files violates fundamental safeguards principles and that the agreement does not specify that Iranian officials would provide the IAEA access to key people, facilities, and documents that are needed to verify Iranian answers to the IAEA's questions.

NER Entity: (person :name (name :op "David" :op "Albright"))
NER Entity: (person :name (name :op "Jacqueline" :op "Shire"))
NER Entity: (organization :name (name :op "Washington" :op "-" :op "based" :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
mkDayMonthYear(19	August	2007,19,August,2007)
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 28-31:  19 August 2007 => (date-entity :day 19 :month 8 :year 2007)
Span 55-56:  access => access-01
Span 44-45:  agreement => agree-01
Span 5-7:  Albright and => (person :name (name :op "Jacqueline" :op "Shire"))
Span 35-36:  closing => close-01
Span 2-4:  control experts => (person :name (name :op "David" :op "Albright"))
Span 23-24:  criticism => criticize-01
Span 63-64:  documents => document
Span 60-61:  facilities => facility
Span 36-37:  files => file
Span 38-39:  fundamental => fundamental
Span 33-34:  idea => idea
Span 57-58:  key => key
Span 66-67:  needed => need-01
Span 9-16:  of the Washington - based Institute for => (organization :name (name :op "Washington" :op "-" :op "based" :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Span 50-51:  officials => (have-org-role-91 :ARG2 official)
Span 40-41:  principles => principle
Span 52-53:  provide => provide-01
Span 24-25:  published => publish-01
Span 39-40:  safeguards => safeguard-01
Span 47-48:  specify => specify-01
Span 68-69:  verify => verify-01
Span 20-21:  wrote => write-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 28-31:  19 August 2007 => (date-entity :day 19 :month 8 :year 2007)
Oracle Span 55-56:  access => access-01
Oracle Span 44-45:  agreement => agree-01
Oracle Span 6-7:  and => and
Oracle Span 41-42:  and => and
Oracle Span 62-63:  and => and
Oracle Span 70-71:  answers => answer-01
Oracle Span 0-1:  Arms => arm
Oracle Span 13-14:  based => base-01
Oracle Span 35-36:  closing => close-01
Oracle Span 2-3:  control => control-01
Oracle Span 23-24:  criticism => criticize-01
Oracle Span 4-6:  David Albright => (person :name (name :op "Albright" :op "David"))
Oracle Span 63-64:  documents => document
Oracle Span 3-4:  experts => expert-41
Oracle Span 60-61:  facilities => facility
Oracle Span 36-37:  files => file
Oracle Span 38-39:  fundamental => fundamental
Oracle Span 54-55:  IAEA => (organization :name (name :op "IAEA"))
Oracle Span 33-34:  idea => idea
Oracle Span 14-20:  Institute for Science and International Security => (have-org-role-91 :ARG1 (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute")))
Oracle Span 49-50:  Iranian => (country :name (name :op "Iran"))
Oracle Span 7-9:  Jacqueline Shire => (person :name (name :op "Shire" :op "Jacqueline"))
Oracle Span 57-58:  key => key
Oracle Span 66-67:  needed => (person :ARG1-of need-01)
Oracle Span 50-51:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 40-41:  principles => principle
Oracle Span 52-53:  provide => provide-01
Oracle Span 24-25:  published => publish-01
Oracle Span 75-76:  questions => question-01
Oracle Span 39-40:  safeguards => safeguard-01
Oracle Span 47-48:  specify => specify-01
Oracle Span 68-69:  verify => verify-01
Oracle Span 37-38:  violates => violate-01
Oracle Span 11-12:  Washington => (city :name (name :op "Washington"))
Oracle Span 26-27:  week => week
Oracle Span 20-21:  wrote => write-01

Incorrect span: needed => need-01
Extra span: of the Washington - based Institute for => (organization :name (name :op "Washington" :op "-" :op "based" :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Extra span: Albright and => (person :name (name :op "Jacqueline" :op "Shire"))
Extra span: control experts => (person :name (name :op "David" :op "Albright"))
Missing span: David Albright => (person :name (name :op "Albright" :op "David"))
Missing span: Institute for Science and International Security => (have-org-role-91 :ARG1 (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute")))
Missing span: Washington => (city :name (name :op "Washington"))
Missing span: Jacqueline Shire => (person :name (name :op "Shire" :op "Jacqueline"))
Missing span: IAEA => (organization :name (name :op "IAEA"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: week => week
Missing span: and => and
Missing span: and => and
Missing span: needed => (person :ARG1-of need-01)
Missing span: answers => answer-01
Missing span: questions => question-01
Missing span: violates => violate-01
Missing span: and => and
Missing span: experts => expert-41
Missing span: based => base-01
Missing span: control => control-01
Missing span: Arms => arm
Dependencies:
1	Arms-control	_	NNP	NNP	_	4	nn	_	_
2	experts	_	NNS	NNS	_	4	nn	_	_
3	David	_	NNP	NNP	_	4	nn	_	_
4	Albright	_	NNP	NNP	_	17	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	Jacqueline	_	NNP	NNP	_	7	nn	_	_
7	Shire	_	NNP	NNP	_	4	conj	_	_
8	of	_	IN	IN	_	4	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	Washington-based	_	JJ	JJ	_	11	amod	_	_
11	Institute	_	NNP	NNP	_	8	pobj	_	_
12	for	_	IN	IN	_	11	prep	_	_
13	Science	_	NNP	NNP	_	16	nn	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	International	_	NNP	NNP	_	13	conj	_	_
16	Security	_	NNP	NNP	_	12	pobj	_	_
17	wrote	_	VBD	VBD	_	0	root	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	a	_	DT	DT	_	20	det	_	_
20	criticism	_	NN	NN	_	18	pobj	_	_
21	published	_	VBN	VBN	_	20	vmod	_	_
22	the	_	DT	DT	_	23	det	_	_
23	week	_	NN	NN	_	21	dobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	19	_	CD	CD	_	24	pobj	_	_
26	August	_	NNP	NNP	_	21	tmod	_	_
27	2007	_	CD	CD	_	26	num	_	_
28	that	_	IN	IN	_	34	mark	_	_
29	the	_	DT	DT	_	30	det	_	_
30	idea	_	NN	NN	_	34	nsubj	_	_
31	of	_	IN	IN	_	30	prep	_	_
32	closing	_	VBG	VBG	_	33	amod	_	_
33	files	_	NNS	NNS	_	31	pobj	_	_
34	violates	_	VBZ	VBZ	_	21	ccomp	_	_
35	fundamental	_	JJ	JJ	_	37	amod	_	_
36	safeguards	_	NNS	NNS	_	37	nn	_	_
37	principles	_	NNS	NNS	_	34	dobj	_	_
38	and	_	CC	CC	_	34	cc	_	_
39	that	_	IN	IN	_	44	mark	_	_
40	the	_	DT	DT	_	41	det	_	_
41	agreement	_	NN	NN	_	44	nsubj	_	_
42	does	_	VBZ	VBZ	_	44	aux	_	_
43	not	_	RB	RB	_	44	neg	_	_
44	specify	_	VB	VB	_	34	conj	_	_
45	that	_	IN	IN	_	49	mark	_	_
46	Iranian	_	JJ	JJ	_	47	amod	_	_
47	officials	_	NNS	NNS	_	49	nsubj	_	_
48	would	_	MD	MD	_	49	aux	_	_
49	provide	_	VB	VB	_	44	ccomp	_	_
50	the	_	DT	DT	_	52	det	_	_
51	IAEA	_	NNP	NNP	_	52	nn	_	_
52	access	_	NN	NN	_	49	dobj	_	_
53	to	_	TO	TO	_	49	prep	_	_
54	key	_	JJ	JJ	_	55	amod	_	_
55	people	_	NNS	NNS	_	53	pobj	_	_
56	,	_	,	,	_	20	punct	_	_
57	facilities	_	NNS	NNS	_	20	conj	_	_
58	,	_	,	,	_	20	punct	_	_
59	and	_	CC	CC	_	20	cc	_	_
60	documents	_	NNS	NNS	_	20	conj	_	_
61	that	_	WDT	WDT	_	63	nsubjpass	_	_
62	are	_	VBP	VBP	_	63	auxpass	_	_
63	needed	_	VBN	VBN	_	60	rcmod	_	_
64	to	_	TO	TO	_	65	aux	_	_
65	verify	_	VB	VB	_	63	xcomp	_	_
66	Iranian	_	JJ	JJ	_	67	amod	_	_
67	answers	_	NNS	NNS	_	65	dobj	_	_
68	to	_	TO	TO	_	65	prep	_	_
69	the	_	DT	DT	_	70	det	_	_
70	IAEA	_	NNP	NNP	_	72	poss	_	_
71	's	_	POS	POS	_	70	possessive	_	_
72	questions	_	NNS	NNS	_	68	pobj	_	_
73	.	_	.	.	_	17	punct	_	_

Oracle:
(a / and, op, p / person)
(a / and, op, p2 / person)
(a3 / and, op, s2 / specify-01)
(a3 / and, op, v / violate-01)
(a5 / access-01, ARG0, n6 / name)
(a5 / access-01, ARG1, a6 / and)
(a6 / and, op, d / document)
(a6 / and, op, f3 / facility)
(a6 / and, op, p5 / person)
(a7 / answer-01, ARG0, n5 / name)
(a7 / answer-01, ARG1, q / question-01)
(b / base-01, ARG1, o / organization)
(b / base-01, location, c2 / city)
(c / control-01, ARG1, a2 / arm)
(c2 / city, name, n3 / name)
(c3 / close-01, ARG1, f / file)
(c4 / country, name, n5 / name)
(d2 / date-entity, day, 19)
(d2 / date-entity, month, 8)
(d2 / date-entity, year, 2007)
(e2 / expert-41, ARG1, p2 / person)
(e2 / expert-41, ARG2, c / control-01)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, o2 / official)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, o / organization)
(i / idea, topic, c3 / close-01)
(n / name, op, "Albright")
(n / name, op, "David")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Science")
(n2 / name, op, "Security")
(n2 / name, op, "and")
(n2 / name, op, "for")
(n3 / name, op, "Washington")
(n4 / name, op, "Jacqueline")
(n4 / name, op, "Shire")
(n5 / name, op, "Iran")
(n6 / name, op, "IAEA")
(n7 / need-01, ARG1, d / document)
(n7 / need-01, ARG1, f3 / facility)
(n7 / need-01, ARG1, p5 / person)
(n7 / need-01, purpose, v2 / verify-01)
(o / organization, name, n2 / name)
(o3 / organization, name, n6 / name)
(p / person, name, n / name)
(p2 / person, name, n4 / name)
(p3 / principle, mod, f2 / fundamental)
(p4 / provide-01, ARG1, a5 / access-01)
(p4 / provide-01, ARG2, o3 / organization)
(p5 / person, mod, k / key)
(p6 / publish-01, ARG1, c5 / criticize-01)
(p6 / publish-01, time, w2 / week)
(q / question-01, ARG0, o3 / organization)
(s / safeguard-01, ARG1, p3 / principle)
(s2 / specify-01, ARG0, a4 / agree-01)
(s2 / specify-01, ARG1, p4 / provide-01)
(v / violate-01, ARG0, i / idea)
(v / violate-01, ARG1, p3 / principle)
(v2 / verify-01, ARG1, a7 / answer-01)
(w / write-01, ARG0, a / and)
(w / write-01, ARG1, a3 / and)
(w / write-01, location, c5 / criticize-01)
(w2 / week, mod, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(68,69,List(0),verify,verify-01,false), Span(66,67,List(1),needed,need-01,false), Span(63,64,List(2),documents,document,false), Span(60,61,List(3),facilities,facility,false), Span(57,58,List(4),key,key,false), Span(55,56,List(5),access,access-01,false), Span(52,53,List(6),provide,provide-01,false), Span(50,51,List(8, 7),officials,(have-org-role-91 :ARG2 official),false), Span(47,48,List(9),specify,specify-01,false), Span(44,45,List(10),agreement,agree-01,false), Span(40,41,List(11),principles,principle,false), Span(39,40,List(12),safeguards,safeguard-01,false), Span(38,39,List(13),fundamental,fundamental,false), Span(36,37,List(14),files,file,false), Span(35,36,List(15),closing,close-01,false), Span(33,34,List(16),idea,idea,false), Span(28,31,List(20, 19, 18, 17),19 August 2007,(date-entity :day 19 :month 8 :year 2007),false), Span(24,25,List(21),published,publish-01,false), Span(23,24,List(22),criticism,criticize-01,false), Span(20,21,List(23),wrote,write-01,false), Span(9,16,List(34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24),of the Washington - based Institute for,(organization :name (name :op "Washington" :op "-" :op "based" :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false), Span(5,7,List(38, 37, 36, 35),Albright and,(person :name (name :op "Jacqueline" :op "Shire")),false), Span(2,4,List(42, 41, 40, 39),control experts,(person :name (name :op "David" :op "Albright")),false)),Map(39 -> person, 30 -> "for", 2 -> document, 5 -> access-01, 33 -> "International", 27 -> "-", 12 -> safeguard-01, 8 -> official, 15 -> close-01, 42 -> "Albright", 36 -> name, 21 -> publish-01, 18 -> 19, 24 -> organization, 41 -> "David", 35 -> person, 7 -> have-org-role-91, 1 -> need-01, 17 -> date-entity, 23 -> write-01, 38 -> "Shire", 26 -> "Washington", 4 -> key, 11 -> principle, 32 -> "and", 14 -> file, 29 -> "Institute", 20 -> 2007, 34 -> "Security", 28 -> "based", 6 -> provide-01, 40 -> name, 9 -> specify-01, 0 -> verify-01, 22 -> criticize-01, 16 -> idea, 37 -> "Jacqueline", 19 -> 8, 10 -> agree-01, 3 -> facility, 31 -> "Science", 25 -> name, 13 -> fundamental),Map(n -> need-01, w -> write-01, h -> have-org-role-91, 2 -> 2007, p5 -> person, s2 -> safeguard-01, k -> key, 8 -> 8, p2 -> principle, n4 -> name, s -> specify-01, v -> verify-01, d -> document, 1 -> 19, p -> provide-01, n3 -> name, a -> access-01, p4 -> person, d2 -> date-entity, o2 -> organization, f3 -> file, a2 -> agree-01, i -> idea, c -> close-01, f2 -> fundamental, f -> facility, o -> official, p3 -> publish-01, n2 -> name, c2 -> criticize-01))),[Ljava.lang.String;@489115ef,Annotation([Ljava.lang.String;@3857f613,[Ljava.lang.String;@198b6731,[Ljava.lang.String;@7c6908d7),Annotation([Ljava.lang.String;@3c9754d8,[Ljava.lang.String;@3bf7ca37,[Ledu.cmu.lti.nlp.amr.Dependency;@79079097),Annotation([Ljava.lang.String;@4d1c00d0,[Ljava.lang.String;@4b2bac3f,[Ljava.lang.String;@4e08711f),Annotation([Ljava.lang.String;@bcec361,[Ljava.lang.String;@26794848,[Ledu.cmu.lti.nlp.amr.Entity;@302552ec))
AMR:
(a / access-01, ARG0, i / idea)
(a / access-01, ARG1, f / facility)
(a2 / agree-01, ARG1, p2 / principle)
(c / close-01, ARG1, f3 / file)
(c / close-01, ARG2, c2 / criticize-01)
(d2 / date-entity, day, 1 / 19)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 2 / 2007)
(h / have-org-role-91, ARG0, p5 / person)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, o / official)
(h / have-org-role-91, location, p2 / principle)
(i / idea, domain, f3 / file)
(n / need-01, ARG1, d / document)
(n / need-01, purpose, v / verify-01)
(n2 / name, op, "-")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Science")
(n2 / name, op, "Security")
(n2 / name, op, "Washington")
(n2 / name, op, "and")
(n2 / name, op, "based")
(n2 / name, op, "for")
(n3 / name, op, "Jacqueline")
(n3 / name, op, "Shire")
(n4 / name, op, "Albright")
(n4 / name, op, "David")
(o2 / organization, name, n2 / name)
(p / provide-01, ARG0, d2 / date-entity)
(p / provide-01, ARG1, a / access-01)
(p3 / publish-01, ARG1, c2 / criticize-01)
(p4 / person, name, n3 / name)
(p5 / person, name, n4 / name)
(s / specify-01, ARG0, i / idea)
(s / specify-01, ARG1, a2 / agree-01)
(s2 / safeguard-01, ARG0, p2 / principle)
(s2 / safeguard-01, ARG1, f2 / fundamental)
(v / verify-01, ARG0, k / key)
(v / verify-01, ARG1, f / facility)
(w / write-01, ARG0, p4 / person)
(w / write-01, ARG1, c2 / criticize-01)

Decoded in 3,844,555 microseconds
Sentence: Independent experts stated Iran's latest agreement with the IAEA which gives inspectors access to more nuclear sites and information falls short of the West's demand to halt the production of concentrated uranium that could potentially be used for a bomb.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (country :name (name :op "West" :op "'s"))
NER Entity: (country :name (name :op "West" :op "'s"))
Spans:
Span 13-14:  access => access-01
Span 6-7:  agreement => agree-01
Span 41-42:  bomb => bomb
Span 32-33:  concentrated => concentrate-02
Span 35-36:  could => possible
Span 26-27:  demand => demand-01
Span 11-12:  gives => give-01
Span 28-29:  halt => halt-01
Span 19-20:  information => information
Span 5-6:  latest => (late :degree most)
Span 16-17:  nuclear => nucleus
Span 36-37:  potentially => potential
Span 30-31:  production => produce-01
Span 17-18:  sites => site
Span 33-34:  uranium => uranium
Span 38-39:  used => use-01
Span 24-25:  West => (world-region :name (name :op "West"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 13-14:  access => access-01
Oracle Span 6-7:  agreement => agree-01
Oracle Span 18-19:  and => and
Oracle Span 41-42:  bomb => bomb
Oracle Span 32-33:  concentrated => concentrate-02
Oracle Span 35-36:  could => possible
Oracle Span 26-27:  demand => demand-01
Oracle Span 1-2:  experts => expert-41
Oracle Span 20-21:  falls => fall-01
Oracle Span 28-29:  halt => halt-01
Oracle Span 9-10:  IAEA => (organization :name (name :op "IAEA"))
Oracle Span 19-20:  information => information
Oracle Span 12-13:  inspectors => (person :ARG0-of inspect-01)
Oracle Span 3-4:  Iran => (country :name (name :op "Iran"))
Oracle Span 5-6:  latest => (late :degree most)
Oracle Span 15-16:  more => more
Oracle Span 16-17:  nuclear => nucleus
Oracle Span 36-37:  potentially => potential
Oracle Span 30-31:  production => produce-01
Oracle Span 21-22:  short => short
Oracle Span 17-18:  sites => site
Oracle Span 2-3:  stated => state-01
Oracle Span 33-34:  uranium => uranium
Oracle Span 38-39:  used => use-01
Oracle Span 24-25:  West => (world-region :name (name :op "West"))

Extra span: gives => give-01
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: IAEA => (organization :name (name :op "IAEA"))
Missing span: stated => state-01
Missing span: falls => fall-01
Missing span: short => short
Missing span: and => and
Missing span: more => more
Missing span: experts => expert-41
Missing span: inspectors => (person :ARG0-of inspect-01)
Dependencies:
1	Independent	_	JJ	JJ	_	2	amod	_	_
2	experts	_	NNS	NNS	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	Iran	_	NNP	NNP	_	7	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	latest	_	JJS	JJS	_	7	amod	_	_
7	agreement	_	NN	NN	_	3	dobj	_	_
8	with	_	IN	IN	_	3	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	IAEA	_	NNP	NNP	_	8	pobj	_	_
11	which	_	WDT	WDT	_	12	nsubj	_	_
12	gives	_	VBZ	VBZ	_	10	rcmod	_	_
13	inspectors	_	NNS	NNS	_	12	iobj	_	_
14	access	_	NN	NN	_	12	dobj	_	_
15	to	_	TO	TO	_	14	prep	_	_
16	more	_	JJR	JJR	_	18	amod	_	_
17	nuclear	_	JJ	JJ	_	18	amod	_	_
18	sites	_	NNS	NNS	_	15	pobj	_	_
19	and	_	CC	CC	_	3	cc	_	_
20	information	_	NN	NN	_	21	nsubj	_	_
21	falls	_	VBZ	VBZ	_	3	conj	_	_
22	short	_	JJ	JJ	_	21	dobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	West	_	NNP	NNP	_	27	poss	_	_
26	's	_	POS	POS	_	25	possessive	_	_
27	demand	_	NN	NN	_	23	pobj	_	_
28	to	_	TO	TO	_	29	aux	_	_
29	halt	_	VB	VB	_	27	vmod	_	_
30	the	_	DT	DT	_	31	det	_	_
31	production	_	NN	NN	_	29	dobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	concentrated	_	JJ	JJ	_	34	amod	_	_
34	uranium	_	NN	NN	_	32	pobj	_	_
35	that	_	WDT	WDT	_	39	nsubjpass	_	_
36	could	_	MD	MD	_	39	aux	_	_
37	potentially	_	RB	RB	_	39	advmod	_	_
38	be	_	VB	VB	_	39	auxpass	_	_
39	used	_	VBN	VBN	_	31	rcmod	_	_
40	for	_	IN	IN	_	39	prep	_	_
41	a	_	DT	DT	_	42	det	_	_
42	bomb	_	NN	NN	_	40	pobj	_	_
43	.	_	.	.	_	3	punct	_	_

Oracle:
(a / agree-01, ARG0, c / country)
(a / agree-01, ARG1, a2 / access-01)
(a / agree-01, ARG2, o / organization)
(a / agree-01, time, l / late)
(a2 / access-01, ARG0, p / person)
(a2 / access-01, ARG1, a3 / and)
(a3 / and, op, i2 / information)
(a3 / and, op, s2 / site)
(c / country, name, n / name)
(c2 / concentrate-02, ARG1, u / uranium)
(d2 / demand-01, ARG0, w / world-region)
(d2 / demand-01, ARG1, h / halt-01)
(f / fall-01, ARG1, a / agree-01)
(f / fall-01, ARG3, d2 / demand-01)
(f / fall-01, manner, s3 / short)
(h / halt-01, ARG1, p2 / produce-01)
(i / inspect-01, ARG0, p / person)
(l / late, degree, m2 / most)
(n / name, op, "Iran")
(n2 / name, op, "IAEA")
(n4 / name, op, "West")
(o / organization, name, n2 / name)
(p2 / produce-01, ARG1, u / uranium)
(s / state-01, ARG1, f / fall-01)
(s2 / site, mod, m / more)
(s2 / site, mod, n3 / nucleus)
(u2 / use-01, ARG1, u / uranium)
(u2 / use-01, ARG2, b / bomb)
(u2 / use-01, mod, p3 / possible)
(u2 / use-01, mod, p4 / potential)
(w / world-region, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),bomb,bomb,false), Span(38,39,List(1),used,use-01,false), Span(36,37,List(2),potentially,potential,false), Span(35,36,List(3),could,possible,false), Span(33,34,List(4),uranium,uranium,false), Span(32,33,List(5),concentrated,concentrate-02,false), Span(30,31,List(6),production,produce-01,false), Span(28,29,List(7),halt,halt-01,false), Span(26,27,List(8),demand,demand-01,false), Span(24,25,List(11, 10, 9),West,(world-region :name (name :op "West")),false), Span(19,20,List(12),information,information,false), Span(17,18,List(13),sites,site,false), Span(16,17,List(14),nuclear,nucleus,false), Span(13,14,List(15),access,access-01,false), Span(11,12,List(16),gives,give-01,false), Span(6,7,List(17),agreement,agree-01,false), Span(5,6,List(19, 18),latest,(late :degree most),false)),Map(2 -> potential, 5 -> concentrate-02, 12 -> information, 15 -> access-01, 8 -> demand-01, 18 -> late, 7 -> halt-01, 17 -> agree-01, 1 -> use-01, 4 -> uranium, 11 -> "West", 14 -> nucleus, 6 -> produce-01, 0 -> bomb, 9 -> world-region, 16 -> give-01, 19 -> most, 3 -> possible, 10 -> name, 13 -> site),Map(w -> world-region, n -> name, h -> halt-01, b -> bomb, p2 -> possible, u2 -> uranium, s -> site, m -> most, d -> demand-01, g -> give-01, p -> potential, a -> access-01, a2 -> agree-01, i -> information, c -> concentrate-02, l -> late, u -> use-01, p3 -> produce-01, n2 -> nucleus))),[Ljava.lang.String;@3d285d7e,Annotation([Ljava.lang.String;@40005471,[Ljava.lang.String;@2cd76f31,[Ljava.lang.String;@367ffa75),Annotation([Ljava.lang.String;@49438269,[Ljava.lang.String;@ba2f4ec,[Ledu.cmu.lti.nlp.amr.Dependency;@1c1bbc4e),Annotation([Ljava.lang.String;@55fe41ea,[Ljava.lang.String;@fbd1f6,[Ljava.lang.String;@1ce24091),Annotation([Ljava.lang.String;@5dda768f,[Ljava.lang.String;@7a8c8dcf,[Ledu.cmu.lti.nlp.amr.Entity;@24269709))
AMR:
(a / access-01, ARG1, s / site)
(a2 / agree-01, ARG1, a / access-01)
(a2 / agree-01, time, l / late)
(c / concentrate-02, ARG1, u2 / uranium)
(d / demand-01, ARG0, i / information)
(d / demand-01, ARG1, h / halt-01)
(g / give-01, ARG1, a / access-01)
(h / halt-01, ARG0, w / world-region)
(h / halt-01, ARG1, p3 / produce-01)
(i / information, op, a2 / agree-01)
(l / late, degree, m / most)
(n / name, op, "West")
(p2 / possible, domain, u / use-01)
(p3 / produce-01, ARG1, u2 / uranium)
(s / site, mod, n2 / nucleus)
(u / use-01, ARG1, u2 / uranium)
(u / use-01, ARG2, b / bomb)
(u / use-01, mod, p / potential)
(w / world-region, name, n / name)

Decoded in 794,779 microseconds
Sentence: U.S. State Department spokesman for the Bush administration Tom Casey stated that while the report may offer some new details or insight into the development of Iran's program Iranian officials have not met any international obligations regarding the nuclear program.

NER Entity: (organization :name (name :op "U.S." :op "State" :op "Department"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Tom" :op "Casey"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 7-8:  administration => administrate-01
Span 34-35:  any => any
Span 6-7:  Bush => (person :name (name :op "Bush"))
Span 19-20:  details => detail-01
Span 24-25:  development => develop-02
Span 15-16:  may => possible
Span 33-34:  met => meet-03
Span 18-19:  new => new
Span 39-40:  nuclear => nucleus
Span 30-31:  officials => (have-org-role-91 :ARG2 official)
Span 20-21:  or => or
Span 40-41:  program => program
Span 28-29:  program => program
Span 17-18:  some => some
Span 3-4:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 8-10:  Tom Casey => (person :name (name :op "Tom" :op "Casey"))
Span 0-3:  U.S. State Department => (government-organization :name (name :op "Department" :op "State" :op "U.S."))

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 7-8:  administration => administrate-01
Oracle Span 34-35:  any => any
Oracle Span 6-7:  Bush => (person :name (name :op "Bush"))
Oracle Span 19-20:  details => detail-01
Oracle Span 24-25:  development => develop-02
Oracle Span 31-32:  have => (person :ARG0-of have-org-role-91)
Oracle Span 21-22:  insight => insight
Oracle Span 35-36:  international => international
Oracle Span 26-27:  Iran => (country :name (name :op "Iran"))
Oracle Span 15-16:  may => possible
Oracle Span 33-34:  met => meet-01
Oracle Span 18-19:  new => new
Oracle Span 39-40:  nuclear => nucleus
Oracle Span 36-37:  obligations => obligation
Oracle Span 16-17:  offer => offer-01
Oracle Span 30-31:  officials => official
Oracle Span 20-21:  or => or
Oracle Span 28-29:  program => program
Oracle Span 40-41:  program => program
Oracle Span 37-38:  regarding => regard-01
Oracle Span 14-15:  report => report
Oracle Span 17-18:  some => some
Oracle Span 3-4:  spokesman => (have-org-role-91 :ARG2 spokesman)
Oracle Span 1-3:  State Department => (government-organization :name (name :op "Department" :op "State"))
Oracle Span 10-11:  stated => state-01
Oracle Span 8-10:  Tom Casey => (person :name (name :op "Casey" :op "Tom"))
Oracle Span 0-1:  U.S. => (country :name (name :op "U.S."))

Incorrect span: met => meet-03
Incorrect span: officials => (have-org-role-91 :ARG2 official)
Incorrect span: Tom Casey => (person :name (name :op "Tom" :op "Casey"))
Extra span: U.S. State Department => (government-organization :name (name :op "Department" :op "State" :op "U.S."))
Missing span: Tom Casey => (person :name (name :op "Casey" :op "Tom"))
Missing span: State Department => (government-organization :name (name :op "Department" :op "State"))
Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: met => meet-01
Missing span: obligations => obligation
Missing span: regarding => regard-01
Missing span: international => international
Missing span: officials => official
Missing span: offer => offer-01
Missing span: insight => insight
Missing span: report => report
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	U.S.	_	NNP	NNP	_	4	nn	_	_
2	State	_	NNP	NNP	_	4	nn	_	_
3	Department	_	NNP	NNP	_	4	nn	_	_
4	spokesman	_	NN	NN	_	11	nsubj	_	_
5	for	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	10	det	_	_
7	Bush	_	NNP	NNP	_	10	nn	_	_
8	administration	_	NN	NN	_	10	nn	_	_
9	Tom	_	NNP	NNP	_	10	nn	_	_
10	Casey	_	NNP	NNP	_	5	pobj	_	_
11	stated	_	VBD	VBD	_	0	root	_	_
12	that	_	IN	IN	_	34	mark	_	_
13	while	_	IN	IN	_	17	mark	_	_
14	the	_	DT	DT	_	15	det	_	_
15	report	_	NN	NN	_	17	nsubj	_	_
16	may	_	MD	MD	_	17	aux	_	_
17	offer	_	VB	VB	_	34	advcl	_	_
18	some	_	DT	DT	_	20	det	_	_
19	new	_	JJ	JJ	_	20	amod	_	_
20	details	_	NNS	NNS	_	17	dobj	_	_
21	or	_	CC	CC	_	20	cc	_	_
22	insight	_	NN	NN	_	20	conj	_	_
23	into	_	IN	IN	_	17	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	development	_	NN	NN	_	23	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	Iran	_	NNP	NNP	_	29	poss	_	_
28	's	_	POS	POS	_	27	possessive	_	_
29	program	_	NN	NN	_	26	pobj	_	_
30	Iranian	_	JJ	JJ	_	31	amod	_	_
31	officials	_	NNS	NNS	_	34	nsubj	_	_
32	have	_	VBP	VBP	_	34	aux	_	_
33	not	_	RB	RB	_	34	neg	_	_
34	met	_	VBN	VBN	_	11	ccomp	_	_
35	any	_	DT	DT	_	37	det	_	_
36	international	_	JJ	JJ	_	37	amod	_	_
37	obligations	_	NNS	NNS	_	34	dobj	_	_
38	regarding	_	VBG	VBG	_	37	prep	_	_
39	the	_	DT	DT	_	41	det	_	_
40	nuclear	_	JJ	JJ	_	41	amod	_	_
41	program	_	NN	NN	_	38	pobj	_	_
42	.	_	.	.	_	11	punct	_	_

Oracle:
(c / country, name, n3 / name)
(c3 / country, name, n5 / name)
(d / detail-01, ARG1, d2 / develop-02)
(d / detail-01, mod, n7 / new)
(d / detail-01, mod, s3 / some)
(d2 / develop-02, ARG0, c3 / country)
(d2 / develop-02, ARG1, p4 / program)
(g2 / government-organization, name, n2 / name)
(g2 / government-organization, poss, c / country)
(h / have-org-role-91, ARG0, p5 / person)
(h / have-org-role-91, ARG1, g2 / government-organization)
(h / have-org-role-91, ARG2, s2 / spokesman)
(h2 / have-org-role-91, ARG0, p6 / person)
(h2 / have-org-role-91, ARG1, c3 / country)
(h2 / have-org-role-91, ARG2, o3 / official)
(i2 / insight, mod, n7 / new)
(i2 / insight, mod, s3 / some)
(i2 / insight, prep-into, d2 / develop-02)
(m / meet-01, ARG0, p6 / person)
(m / meet-01, ARG1, o4 / obligation)
(n / name, op, "Casey")
(n / name, op, "Tom")
(n2 / name, op, "Department")
(n2 / name, op, "State")
(n3 / name, op, "U.S.")
(n4 / name, op, "Bush")
(n5 / name, op, "Iran")
(o2 / offer-01, ARG0, r2 / report)
(o2 / offer-01, ARG1, o5 / or)
(o4 / obligation, mod, a2 / any)
(o4 / obligation, mod, i / international)
(o5 / or, op, d / detail-01)
(o5 / or, op, i2 / insight)
(p / person, name, n4 / name)
(p2 / possible, domain, o2 / offer-01)
(p3 / program, mod, n6 / nucleus)
(p5 / person, name, n / name)
(r / regard-01, ARG0, o4 / obligation)
(r / regard-01, ARG1, p3 / program)
(s / state-01, ARG0, p5 / person)

Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),program,program,false), Span(39,40,List(1),nuclear,nucleus,false), Span(34,35,List(2),any,any,false), Span(33,34,List(3),met,meet-03,false), Span(30,31,List(5, 4),officials,(have-org-role-91 :ARG2 official),false), Span(28,29,List(6),program,program,false), Span(24,25,List(7),development,develop-02,false), Span(20,21,List(8),or,or,false), Span(19,20,List(9),details,detail-01,false), Span(18,19,List(10),new,new,false), Span(17,18,List(11),some,some,false), Span(15,16,List(12),may,possible,false), Span(8,10,List(16, 15, 14, 13),Tom Casey,(person :name (name :op "Tom" :op "Casey")),false), Span(7,8,List(17),administration,administrate-01,false), Span(6,7,List(20, 19, 18),Bush,(person :name (name :op "Bush")),false), Span(3,4,List(22, 21),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(0,3,List(27, 26, 25, 24, 23),U.S. State Department,(government-organization :name (name :op "Department" :op "State" :op "U.S.")),false)),Map(2 -> any, 5 -> official, 27 -> "U.S.", 12 -> possible, 8 -> or, 15 -> "Tom", 21 -> have-org-role-91, 18 -> person, 24 -> name, 7 -> develop-02, 1 -> nucleus, 17 -> administrate-01, 23 -> government-organization, 26 -> "State", 4 -> have-org-role-91, 11 -> some, 14 -> name, 20 -> "Bush", 6 -> program, 9 -> detail-01, 0 -> program, 22 -> spokesman, 16 -> "Casey", 19 -> name, 10 -> new, 3 -> meet-03, 25 -> "Department", 13 -> person),Map(n -> nucleus, h -> have-org-role-91, s2 -> spokesman, h2 -> have-org-role-91, p5 -> person, p2 -> program, n4 -> name, s -> some, m -> meet-03, d -> develop-02, g -> government-organization, p -> program, n3 -> name, a -> any, p4 -> person, o2 -> or, d2 -> detail-01, a2 -> administrate-01, o -> official, p3 -> possible, n2 -> new, n5 -> name))),[Ljava.lang.String;@3a52dba3,Annotation([Ljava.lang.String;@2a5c8d3f,[Ljava.lang.String;@752325ad,[Ljava.lang.String;@279fedbd),Annotation([Ljava.lang.String;@b3ca52e,[Ljava.lang.String;@45c7e403,[Ledu.cmu.lti.nlp.amr.Dependency;@2925bf5b),Annotation([Ljava.lang.String;@710f4dc7,[Ljava.lang.String;@1ff4931d,[Ljava.lang.String;@65e98b1c),Annotation([Ljava.lang.String;@61322f9d,[Ljava.lang.String;@6ad82709,[Ledu.cmu.lti.nlp.amr.Entity;@510f3d34))
AMR:
(a2 / administrate-01, ARG0, p4 / person)
(a2 / administrate-01, ARG1, p5 / person)
(d / develop-02, ARG1, p2 / program)
(d2 / detail-01, ARG0, a / any)
(d2 / detail-01, ARG1, h / have-org-role-91)
(d2 / detail-01, mod, n2 / new)
(d2 / detail-01, mod, s / some)
(g / government-organization, name, n5 / name)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, o / official)
(h2 / have-org-role-91, ARG0, p5 / person)
(h2 / have-org-role-91, ARG1, g / government-organization)
(h2 / have-org-role-91, ARG2, s2 / spokesman)
(m / meet-03, ARG1, p / program)
(m / meet-03, ARG2, p3 / possible)
(n3 / name, op, "Casey")
(n3 / name, op, "Tom")
(n4 / name, op, "Bush")
(n5 / name, op, "Department")
(n5 / name, op, "State")
(n5 / name, op, "U.S.")
(o2 / or, op, d2 / detail-01)
(o2 / or, op, p2 / program)
(p / program, mod, n / nucleus)
(p3 / possible, domain, d2 / detail-01)
(p4 / person, name, n3 / name)
(p5 / person, name, n4 / name)

Decoded in 1,204,652 microseconds
Sentence: Casey stated the fact that the nuclear program continues to move forward shows that the Iranian regime is continuing on a path of defiance of the international community.

NER Entity: (person :name (name :op "Casey"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 27-28:  community => community
Span 8-9:  continues => continue-01
Span 18-19:  continuing => continue-01
Span 11-12:  forward => forward
Span 6-7:  nuclear => nucleus
Span 21-22:  path => path
Span 7-8:  program => program
Span 16-17:  regime => regime

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 0-1:  Casey => (person :name (name :op "Casey"))
Oracle Span 27-28:  community => community
Oracle Span 8-9:  continues => continue-01
Oracle Span 18-19:  continuing => continue-01
Oracle Span 11-12:  forward => forward
Oracle Span 26-27:  international => international
Oracle Span 15-16:  Iranian => (country :name (name :op "Iran"))
Oracle Span 10-11:  move => move-01
Oracle Span 6-7:  nuclear => nucleus
Oracle Span 7-8:  program => program
Oracle Span 16-17:  regime => regime
Oracle Span 12-13:  shows => show-01
Oracle Span 1-2:  stated => state-01

Extra span: path => path
Missing span: Casey => (person :name (name :op "Casey"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: shows => show-01
Missing span: international => international
Missing span: move => move-01
Dependencies:
1	Casey	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	fact	_	NN	NN	_	2	dobj	_	_
5	that	_	IN	IN	_	9	mark	_	_
6	the	_	DT	DT	_	8	det	_	_
7	nuclear	_	JJ	JJ	_	8	amod	_	_
8	program	_	NN	NN	_	9	nsubj	_	_
9	continues	_	VBZ	VBZ	_	2	ccomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	move	_	VB	VB	_	9	xcomp	_	_
12	forward	_	RP	RP	_	11	prt	_	_
13	shows	_	NNS	NNS	_	11	dobj	_	_
14	that	_	IN	IN	_	19	mark	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Iranian	_	JJ	JJ	_	17	amod	_	_
17	regime	_	NN	NN	_	19	nsubj	_	_
18	is	_	VBZ	VBZ	_	19	aux	_	_
19	continuing	_	VBG	VBG	_	11	ccomp	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	a	_	DT	DT	_	22	det	_	_
22	path	_	NN	NN	_	20	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	defiance	_	NN	NN	_	23	pobj	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	28	det	_	_
27	international	_	JJ	JJ	_	28	amod	_	_
28	community	_	NN	NN	_	25	pobj	_	_
29	.	_	.	.	_	2	punct	_	_

Oracle:
(c / continue-01, ARG1, p2 / program)
(c2 / continue-01, ARG1, r / regime)
(c3 / country, name, n3 / name)
(c4 / community, mod, i / international)
(m / move-01, ARG0, p2 / program)
(m / move-01, ARG1, p2 / program)
(m / move-01, ARG2, f / forward)
(n / name, op, "Casey")
(n3 / name, op, "Iran")
(p / person, name, n / name)
(p2 / program, mod, n2 / nucleus)
(r / regime, mod, c3 / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / continue-01)
(s2 / show-01, ARG0, c / continue-01)
(s2 / show-01, ARG1, c2 / continue-01)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),community,community,false), Span(21,22,List(1),path,path,false), Span(18,19,List(2),continuing,continue-01,false), Span(16,17,List(3),regime,regime,false), Span(11,12,List(4),forward,forward,false), Span(8,9,List(5),continues,continue-01,false), Span(7,8,List(6),program,program,false), Span(6,7,List(7),nuclear,nucleus,false)),Map(2 -> continue-01, 5 -> continue-01, 7 -> nucleus, 1 -> path, 4 -> forward, 6 -> program, 0 -> community, 3 -> regime),Map(n -> nucleus, p2 -> program, p -> path, c3 -> continue-01, r -> regime, c -> community, f -> forward, c2 -> continue-01))),[Ljava.lang.String;@7817fd62,Annotation([Ljava.lang.String;@8297b3a,[Ljava.lang.String;@2362f559,[Ljava.lang.String;@b2c9a9c),Annotation([Ljava.lang.String;@4c178a76,[Ljava.lang.String;@fa4c865,[Ledu.cmu.lti.nlp.amr.Dependency;@3bd82cf5),Annotation([Ljava.lang.String;@544fa968,[Ljava.lang.String;@247bddad,[Ljava.lang.String;@d35dea7),Annotation([Ljava.lang.String;@7770f470,[Ljava.lang.String;@5e5d171f,[Ledu.cmu.lti.nlp.amr.Entity;@24313fcc))
AMR:
(c2 / continue-01, ARG0, r / regime)
(c2 / continue-01, ARG1, p / path)
(c3 / continue-01, ARG0, f / forward)
(c3 / continue-01, ARG1, p2 / program)
(c3 / continue-01, ARG2, c2 / continue-01)
(p / path, location, c / community)
(p2 / program, mod, n / nucleus)

Decoded in 253,284 microseconds
Sentence: Most Western Nonproliferation Experts stated the Agreement on 21 August 2007 contained little that could dissuade policymakers in Washington, London, Paris and Berlin from moving forward with another round of Security Council sanctions.

NER Entity: (thing :name (name :op "Western" :op "Nonproliferation"))
mkDayMonthYear(21	August	2007,21,August,2007)
NER Entity: (country :name (name :op "Washington"))
NER Entity: (country :name (name :op "London"))
NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "Berlin"))
NER Entity: (organization :name (name :op "Security" :op "Council"))
NER Entity: (country :name (name :op "Berlin"))
NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "London"))
Spans:
Span 8-11:  21 August 2007 => (date-entity :day 21 :month 8 :year 2007)
Span 6-7:  Agreement => agreement
Span 29-30:  another => another
Span 24-25:  Berlin => (city :name (name :op "Berlin"))
Span 11-12:  contained => contain-01
Span 14-15:  could => possible
Span 15-16:  dissuade => dissuade-01
Span 3-4:  Experts => (person :ARG1-of expert-41)
Span 27-28:  forward => forward
Span 20-21:  London => (city :name (name :op "London"))
Span 0-1:  Most => most
Span 26-27:  moving => move-02
Span 22-23:  Paris => (city :name (name :op "Paris"))
Span 16-17:  policymakers => policy
Span 32-34:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 1-3:  Western Nonproliferation => (thing :name (name :op "Western" :op "Nonproliferation"))

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 8-11:  21 August 2007 => (date-entity :day 21 :month 8 :year 2007)
Oracle Span 6-7:  Agreement => agree-01
Oracle Span 23-24:  and => and
Oracle Span 29-30:  another => another
Oracle Span 24-25:  Berlin => (city :name (name :op "Berlin"))
Oracle Span 11-12:  contained => contain-01
Oracle Span 14-15:  could => possible
Oracle Span 15-16:  dissuade => dissuade-01
Oracle Span 3-4:  Experts => (person :ARG1-of expert-41)
Oracle Span 27-28:  forward => forward
Oracle Span 12-13:  little => little
Oracle Span 20-21:  London => (city :name (name :op "London"))
Oracle Span 0-1:  Most => most
Oracle Span 26-27:  moving => move-01
Oracle Span 22-23:  Paris => (city :name (name :op "Paris"))
Oracle Span 16-17:  policymakers => policy
Oracle Span 30-31:  round => round
Oracle Span 34-35:  sanctions => sanction-02
Oracle Span 32-34:  Security Council => (organization :name (name :op "Council" :op "Security"))
Oracle Span 4-5:  stated => state-01
Oracle Span 18-19:  Washington => (city :name (name :op "Washington"))
Oracle Span 1-2:  Western => (world-region :name (name :op "West"))

Incorrect span: moving => move-02
Incorrect span: Agreement => agreement
Extra span: Western Nonproliferation => (thing :name (name :op "Western" :op "Nonproliferation"))
Missing span: Washington => (city :name (name :op "Washington"))
Missing span: Western => (world-region :name (name :op "West"))
Missing span: stated => state-01
Missing span: little => little
Missing span: moving => move-01
Missing span: round => round
Missing span: sanctions => sanction-02
Missing span: and => and
Missing span: Agreement => agree-01
Dependencies:
1	Most	_	JJS	JJS	_	4	amod	_	_
2	Western	_	NNP	NNP	_	4	nn	_	_
3	Nonproliferation	_	NNP	NNP	_	4	nn	_	_
4	Experts	_	NNS	NNS	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	the	_	DT	DT	_	7	det	_	_
7	Agreement	_	NN	NN	_	12	nsubj	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	21	_	CD	CD	_	8	pobj	_	_
10	August	_	NNP	NNP	_	7	tmod	_	_
11	2007	_	CD	CD	_	10	num	_	_
12	contained	_	VBD	VBD	_	5	ccomp	_	_
13	little	_	RB	RB	_	14	advmod	_	_
14	that	_	WDT	WDT	_	16	nsubj	_	_
15	could	_	MD	MD	_	16	aux	_	_
16	dissuade	_	VB	VB	_	12	ccomp	_	_
17	policymakers	_	NNS	NNS	_	16	dobj	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	Washington	_	NNP	NNP	_	18	pobj	_	_
20	,	_	,	,	_	19	punct	_	_
21	London	_	NNP	NNP	_	19	conj	_	_
22	,	_	,	,	_	19	punct	_	_
23	Paris	_	NNP	NNP	_	19	conj	_	_
24	and	_	CC	CC	_	19	cc	_	_
25	Berlin	_	NNP	NNP	_	19	conj	_	_
26	from	_	IN	IN	_	16	prep	_	_
27	moving	_	VBG	VBG	_	26	pcomp	_	_
28	forward	_	RB	RB	_	27	advmod	_	_
29	with	_	IN	IN	_	27	prep	_	_
30	another	_	DT	DT	_	31	det	_	_
31	round	_	NN	NN	_	29	pobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	Security	_	NNP	NNP	_	35	nn	_	_
34	Council	_	NNP	NNP	_	35	nn	_	_
35	sanctions	_	NNS	NNS	_	32	pobj	_	_
36	.	_	.	.	_	5	punct	_	_

Oracle:
(a / agree-01, time, d / date-entity)
(a2 / and, op, c2 / city)
(a2 / and, op, c3 / city)
(a2 / and, op, c4 / city)
(a2 / and, op, c5 / city)
(c / contain-01, ARG0, a / agree-01)
(c / contain-01, ARG1, l / little)
(c2 / city, name, n / name)
(c3 / city, name, n2 / name)
(c4 / city, name, n3 / name)
(c5 / city, name, n4 / name)
(d / date-entity, day, 21)
(d / date-entity, month, 8)
(d / date-entity, year, 2007)
(d2 / dissuade-01, ARG0, l / little)
(d2 / dissuade-01, ARG2, m3 / move-01)
(d2 / dissuade-01, mod, p5 / possible)
(e / expert-41, ARG1, p / person)
(m3 / move-01, ARG1, r / round)
(m3 / move-01, ARG2, f / forward)
(n / name, op, "Washington")
(n2 / name, op, "London")
(n3 / name, op, "Paris")
(n4 / name, op, "Berlin")
(n5 / name, op, "Council")
(n5 / name, op, "Security")
(n6 / name, op, "West")
(o / organization, name, n5 / name)
(p / person, location, w / world-region)
(p / person, quant, m / most)
(r / round, mod, a3 / another)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / contain-01)
(s2 / sanction-02, consist, r / round)
(s2 / sanction-02, mod, o / organization)
(w / world-region, name, n6 / name)

Input(Some(Graph(null,ArrayBuffer(Span(32,34,List(3, 2, 1, 0),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(29,30,List(4),another,another,false), Span(27,28,List(5),forward,forward,false), Span(26,27,List(6),moving,move-02,false), Span(24,25,List(9, 8, 7),Berlin,(city :name (name :op "Berlin")),false), Span(22,23,List(12, 11, 10),Paris,(city :name (name :op "Paris")),false), Span(20,21,List(15, 14, 13),London,(city :name (name :op "London")),false), Span(16,17,List(16),policymakers,policy,false), Span(15,16,List(17),dissuade,dissuade-01,false), Span(14,15,List(18),could,possible,false), Span(11,12,List(19),contained,contain-01,false), Span(8,11,List(23, 22, 21, 20),21 August 2007,(date-entity :day 21 :month 8 :year 2007),false), Span(6,7,List(24),Agreement,agreement,false), Span(3,4,List(26, 25),Experts,(person :ARG1-of expert-41),false), Span(1,3,List(30, 29, 28, 27),Western Nonproliferation,(thing :name (name :op "Western" :op "Nonproliferation")),false), Span(0,1,List(31),Most,most,false)),Map(30 -> "Nonproliferation", 2 -> "Council", 5 -> forward, 27 -> thing, 12 -> "Paris", 8 -> name, 15 -> "London", 21 -> 21, 18 -> possible, 24 -> agreement, 7 -> city, 1 -> name, 17 -> dissuade-01, 23 -> 2007, 26 -> expert-41, 4 -> another, 11 -> name, 14 -> name, 29 -> "Western", 20 -> date-entity, 28 -> name, 6 -> move-02, 9 -> "Berlin", 0 -> organization, 22 -> 8, 16 -> policy, 19 -> contain-01, 10 -> city, 3 -> "Security", 31 -> most, 25 -> person, 13 -> city),Map(e -> expert-41, n -> name, 2 -> 21, t -> thing, m2 -> most, 8 -> 8, p2 -> possible, n4 -> name, c4 -> contain-01, d -> dissuade-01, m -> move-02, p -> policy, c3 -> city, n3 -> name, a -> another, d2 -> date-entity, a2 -> agreement, c -> city, f -> forward, 22 -> 2007, o -> organization, p3 -> person, c2 -> city, n2 -> name, n5 -> name))),[Ljava.lang.String;@7d20d0b,Annotation([Ljava.lang.String;@77f1baf5,[Ljava.lang.String;@41a2befb,[Ljava.lang.String;@6c40365c),Annotation([Ljava.lang.String;@7bedc48a,[Ljava.lang.String;@131ef10,[Ledu.cmu.lti.nlp.amr.Dependency;@55b0dcab),Annotation([Ljava.lang.String;@38afe297,[Ljava.lang.String;@2df3b89c,[Ljava.lang.String;@23348b5d),Annotation([Ljava.lang.String;@70325e14,[Ljava.lang.String;@37ceb1df,[Ledu.cmu.lti.nlp.amr.Entity;@7c9d8e2))
AMR:
(a2 / agreement, time, d2 / date-entity)
(c / city, name, n2 / name)
(c / city, topic, m / move-02)
(c2 / city, name, n3 / name)
(c2 / city, op, m / move-02)
(c3 / city, name, n4 / name)
(c3 / city, op, m / move-02)
(c4 / contain-01, ARG0, p3 / person)
(c4 / contain-01, ARG1, p2 / possible)
(c4 / contain-01, time, d2 / date-entity)
(d / dissuade-01, ARG0, a / another)
(d / dissuade-01, ARG1, p / policy)
(d / dissuade-01, ARG2, m / move-02)
(d2 / date-entity, day, 2 / 21)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 22 / 2007)
(e / expert-41, ARG1, p3 / person)
(e / expert-41, ARG2, t / thing)
(m / move-02, ARG1, o / organization)
(m / move-02, manner, f / forward)
(n / name, op, "Council")
(n / name, op, "Security")
(n2 / name, op, "Berlin")
(n3 / name, op, "Paris")
(n4 / name, op, "London")
(n5 / name, op, "Nonproliferation")
(n5 / name, op, "Western")
(o / organization, name, n / name)
(p2 / possible, domain, d / dissuade-01)
(p3 / person, quant, m2 / most)
(t / thing, name, n5 / name)

Decoded in 1,915,286 microseconds
Sentence: Experts stated many of the transparency issues reportedly resolved in the Agreement on 21 August 2007 should have been resolved previously.

mkDayMonthYear(21	August	2007,21,August,2007)
Spans:
Span 13-16:  21 August 2007 => (date-entity :day 21 :month 8 :year 2007)
Span 11-12:  Agreement => agreement
Span 0-1:  Experts => (person :ARG1-of expert-41)
Span 6-7:  issues => issue
Span 2-3:  many => many
Span 20-21:  previously => previous
Span 7-8:  reportedly => report-01
Span 19-20:  resolved => resolve-01
Span 8-9:  resolved => resolve-01
Span 16-17:  should => recommend-01
Span 5-6:  transparency => transparency

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 13-16:  21 August 2007 => (date-entity :day 21 :month 8 :year 2007)
Oracle Span 11-12:  Agreement => agree-01
Oracle Span 0-1:  Experts => (person :ARG1-of expert-41)
Oracle Span 6-7:  issues => issue
Oracle Span 2-3:  many => many
Oracle Span 20-21:  previously => previous
Oracle Span 7-8:  reportedly => report-01
Oracle Span 8-9:  resolved => resolve-01
Oracle Span 19-20:  resolved => resolve-01
Oracle Span 16-17:  should => recommend-01
Oracle Span 1-2:  stated => state-01
Oracle Span 5-6:  transparency => transparency

Incorrect span: Agreement => agreement
Missing span: stated => state-01
Missing span: Agreement => agree-01
Dependencies:
1	Experts	_	NNS	NNS	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	many	_	JJ	JJ	_	20	nsubjpass	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	transparency	_	JJ	JJ	_	7	amod	_	_
7	issues	_	NNS	NNS	_	4	pobj	_	_
8	reportedly	_	RB	RB	_	9	advmod	_	_
9	resolved	_	VBN	VBN	_	7	vmod	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	Agreement	_	NN	NN	_	10	pobj	_	_
13	on	_	IN	IN	_	12	prep	_	_
14	21	_	CD	CD	_	13	pobj	_	_
15	August	_	NNP	NNP	_	12	tmod	_	_
16	2007	_	CD	CD	_	15	num	_	_
17	should	_	MD	MD	_	20	aux	_	_
18	have	_	VB	VB	_	20	aux	_	_
19	been	_	VBN	VBN	_	20	auxpass	_	_
20	resolved	_	VBN	VBN	_	2	ccomp	_	_
21	previously	_	RB	RB	_	20	advmod	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(d / date-entity, day, 21)
(d / date-entity, month, 8)
(d / date-entity, year, 2007)
(e2 / expert-41, ARG1, p2 / person)
(i / issue, quant, m / many)
(i / issue, topic, t / transparency)
(r / recommend-01, ARG1, r2 / resolve-01)
(r2 / resolve-01, ARG1, i / issue)
(r2 / resolve-01, time, p3 / previous)
(r3 / resolve-01, ARG1, i / issue)
(r3 / resolve-01, location, a / agree-01)
(r3 / resolve-01, time, d / date-entity)
(r5 / report-01, ARG1, r3 / resolve-01)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, r / recommend-01)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),previously,previous,false), Span(19,20,List(1),resolved,resolve-01,false), Span(16,17,List(2),should,recommend-01,false), Span(13,16,List(6, 5, 4, 3),21 August 2007,(date-entity :day 21 :month 8 :year 2007),false), Span(11,12,List(7),Agreement,agreement,false), Span(8,9,List(8),resolved,resolve-01,false), Span(7,8,List(9),reportedly,report-01,false), Span(6,7,List(10),issues,issue,false), Span(5,6,List(11),transparency,transparency,false), Span(2,3,List(12),many,many,false), Span(0,1,List(14, 13),Experts,(person :ARG1-of expert-41),false)),Map(2 -> recommend-01, 5 -> 8, 12 -> many, 8 -> resolve-01, 7 -> agreement, 1 -> resolve-01, 4 -> 21, 11 -> transparency, 14 -> expert-41, 6 -> 2007, 0 -> previous, 9 -> report-01, 3 -> date-entity, 10 -> issue, 13 -> person),Map(e -> expert-41, r3 -> resolve-01, 2 -> 21, t -> transparency, 8 -> 8, p2 -> person, d -> date-entity, m -> many, p -> previous, r2 -> recommend-01, a -> agreement, r -> resolve-01, r4 -> report-01, i -> issue, 22 -> 2007))),[Ljava.lang.String;@20d525,Annotation([Ljava.lang.String;@6200f9cb,[Ljava.lang.String;@2002fc1d,[Ljava.lang.String;@69453e37),Annotation([Ljava.lang.String;@6f4a47c7,[Ljava.lang.String;@ae13544,[Ledu.cmu.lti.nlp.amr.Dependency;@3d34d211),Annotation([Ljava.lang.String;@7dc0f706,[Ljava.lang.String;@4009e306,[Ljava.lang.String;@43c1b556),Annotation([Ljava.lang.String;@587e5365,[Ljava.lang.String;@22fcf7ab,[Ledu.cmu.lti.nlp.amr.Entity;@2de23121))
AMR:
(d / date-entity, day, 2 / 21)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2007)
(e / expert-41, ARG1, p2 / person)
(i / issue, mod, m / many)
(i / issue, mod, t / transparency)
(r / resolve-01, ARG1, i / issue)
(r / resolve-01, time, p / previous)
(r2 / recommend-01, ARG0, p2 / person)
(r2 / recommend-01, ARG1, r / resolve-01)
(r3 / resolve-01, ARG1, i / issue)
(r3 / resolve-01, location, a / agreement)
(r3 / resolve-01, time, d / date-entity)
(r4 / report-01, ARG1, r3 / resolve-01)

Decoded in 396,258 microseconds
Sentence: Executive Director of nonpartisan Washington think tank the Arms Control Association Daryl G. Kimball stated the agreement does not address the problem that the Iranian government is pursuing an enrichment technology and capability that could lead to the production of nuclear bomb material.

NER Entity: (country :name (name :op "Washington"))
NER Entity: (organization :name (name :op "Arms" :op "Control" :op "Association"))
NER Entity: (person :name (name :op "Daryl" :op "G." :op "Kimball"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 16-17:  agreement => agree-01
Span 8-11:  Arms Control Association => (organization :name (name :op "Arms" :op "Control" :op "Association"))
Span 41-42:  bomb => bomb
Span 32-33:  capability => capable-41
Span 34-35:  could => possible
Span 11-14:  Daryl G. Kimball => (person :name (name :op "Daryl" :op "G." :op "Kimball"))
Span 29-30:  enrichment => enrich-01
Span 0-1:  Executive => executive
Span 42-43:  material => material
Span 40-41:  nuclear => nucleus
Span 21-22:  problem => problem
Span 38-39:  production => produce-01
Span 27-28:  pursuing => pursue-01
Span 6-7:  tank => tank
Span 30-31:  technology => technology

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 19-20:  address => address-02
Oracle Span 16-17:  agreement => agree-01
Oracle Span 31-32:  and => and
Oracle Span 8-11:  Arms Control Association => (name :op "Association" :op "Control" :op "Arms")
Oracle Span 41-42:  bomb => bomb
Oracle Span 32-33:  capability => capable-41
Oracle Span 34-35:  could => possible
Oracle Span 11-14:  Daryl G. Kimball => (person :name (name :op "Kimball" :op "G." :op "Daryl"))
Oracle Span 1-2:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 29-30:  enrichment => enrich-01
Oracle Span 0-1:  Executive => executive
Oracle Span 25-26:  government => (government-organization :ARG0-of govern-01)
Oracle Span 24-25:  Iranian => (country :name (name :op "Iran"))
Oracle Span 35-36:  lead => lead-03
Oracle Span 42-43:  material => material
Oracle Span 40-41:  nuclear => nucleus
Oracle Span 21-22:  problem => problem
Oracle Span 38-39:  production => produce-01
Oracle Span 27-28:  pursuing => pursue-01
Oracle Span 14-15:  stated => state-01
Oracle Span 30-31:  technology => technology
Oracle Span 5-6:  think => think-tank
Oracle Span 4-5:  Washington => (city :name (name :op "Washington"))

Incorrect span: Daryl G. Kimball => (person :name (name :op "Daryl" :op "G." :op "Kimball"))
Incorrect span: Arms Control Association => (organization :name (name :op "Arms" :op "Control" :op "Association"))
Extra span: tank => tank
Missing span: Daryl G. Kimball => (person :name (name :op "Kimball" :op "G." :op "Daryl"))
Missing span: Arms Control Association => (name :op "Association" :op "Control" :op "Arms")
Missing span: Washington => (city :name (name :op "Washington"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: address => address-02
Missing span: lead => lead-03
Missing span: and => and
Missing span: Director => (have-org-role-91 :ARG2 director)
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: think => think-tank
Dependencies:
1	Executive	_	NNP	NNP	_	2	nn	_	_
2	Director	_	NNP	NNP	_	6	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	nonpartisan	_	NNP	NNP	_	5	nn	_	_
5	Washington	_	NNP	NNP	_	3	pobj	_	_
6	think	_	VBP	VBP	_	0	root	_	_
7	tank	_	NN	NN	_	6	dobj	_	_
8	the	_	DT	DT	_	14	det	_	_
9	Arms	_	NNP	NNP	_	14	nn	_	_
10	Control	_	NNP	NNP	_	14	nn	_	_
11	Association	_	NNP	NNP	_	14	nn	_	_
12	Daryl	_	NNP	NNP	_	14	nn	_	_
13	G.	_	NNP	NNP	_	14	nn	_	_
14	Kimball	_	NNP	NNP	_	15	nsubj	_	_
15	stated	_	VBD	VBD	_	7	rcmod	_	_
16	the	_	DT	DT	_	17	det	_	_
17	agreement	_	NN	NN	_	20	nsubj	_	_
18	does	_	VBZ	VBZ	_	20	aux	_	_
19	not	_	RB	RB	_	20	neg	_	_
20	address	_	VB	VB	_	15	ccomp	_	_
21	the	_	DT	DT	_	22	det	_	_
22	problem	_	NN	NN	_	20	dobj	_	_
23	that	_	IN	IN	_	28	mark	_	_
24	the	_	DT	DT	_	26	det	_	_
25	Iranian	_	JJ	JJ	_	26	amod	_	_
26	government	_	NN	NN	_	28	nsubj	_	_
27	is	_	VBZ	VBZ	_	28	aux	_	_
28	pursuing	_	VBG	VBG	_	20	ccomp	_	_
29	an	_	DT	DT	_	31	det	_	_
30	enrichment	_	JJ	JJ	_	31	amod	_	_
31	technology	_	NN	NN	_	28	dobj	_	_
32	and	_	CC	CC	_	31	cc	_	_
33	capability	_	NN	NN	_	31	conj	_	_
34	that	_	WDT	WDT	_	36	nsubj	_	_
35	could	_	MD	MD	_	36	aux	_	_
36	lead	_	VB	VB	_	31	rcmod	_	_
37	to	_	TO	TO	_	36	prep	_	_
38	the	_	DT	DT	_	39	det	_	_
39	production	_	NN	NN	_	37	pobj	_	_
40	of	_	IN	IN	_	39	prep	_	_
41	nuclear	_	JJ	JJ	_	43	amod	_	_
42	bomb	_	NN	NN	_	43	nn	_	_
43	material	_	NN	NN	_	40	pobj	_	_
44	.	_	.	.	_	6	punct	_	_

Oracle:
(a / address-02, ARG0, a2 / agree-01)
(a / address-02, ARG1, p2 / problem)
(a3 / and, op, c3 / capable-41)
(a3 / and, op, t2 / technology)
(b / bomb, mod, n5 / nucleus)
(c / city, name, n3 / name)
(c2 / country, name, n4 / name)
(d / director, mod, e / executive)
(e2 / enrich-01, ARG1, c3 / capable-41)
(e2 / enrich-01, ARG1, t2 / technology)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, t / think-tank)
(h / have-org-role-91, ARG2, d / director)
(l / lead-03, ARG0, p3 / pursue-01)
(l / lead-03, ARG2, p5 / produce-01)
(l / lead-03, mod, p6 / possible)
(m / material, mod, b / bomb)
(n / name, op, "Daryl")
(n / name, op, "G.")
(n / name, op, "Kimball")
(n2 / name, op, "Arms")
(n2 / name, op, "Association")
(n2 / name, op, "Control")
(n3 / name, op, "Washington")
(n4 / name, op, "Iran")
(p2 / problem, topic, p3 / pursue-01)
(p3 / pursue-01, ARG0, g / government-organization)
(p3 / pursue-01, ARG1, a3 / and)
(p4 / person, name, n / name)
(p5 / produce-01, ARG1, m / material)
(s / state-01, ARG0, p4 / person)
(s / state-01, ARG1, a / address-02)
(t / think-tank, location, c / city)
(t / think-tank, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),material,material,false), Span(41,42,List(1),bomb,bomb,false), Span(40,41,List(2),nuclear,nucleus,false), Span(38,39,List(3),production,produce-01,false), Span(34,35,List(4),could,possible,false), Span(32,33,List(5),capability,capable-41,false), Span(30,31,List(6),technology,technology,false), Span(29,30,List(7),enrichment,enrich-01,false), Span(27,28,List(8),pursuing,pursue-01,false), Span(21,22,List(9),problem,problem,false), Span(16,17,List(10),agreement,agree-01,false), Span(11,14,List(15, 14, 13, 12, 11),Daryl G. Kimball,(person :name (name :op "Daryl" :op "G." :op "Kimball")),false), Span(8,11,List(20, 19, 18, 17, 16),Arms Control Association,(organization :name (name :op "Arms" :op "Control" :op "Association")),false), Span(6,7,List(21),tank,tank,false), Span(0,1,List(22),Executive,executive,false)),Map(2 -> nucleus, 5 -> capable-41, 12 -> name, 15 -> "Kimball", 8 -> pursue-01, 21 -> tank, 18 -> "Arms", 7 -> enrich-01, 17 -> name, 1 -> bomb, 4 -> possible, 11 -> person, 14 -> "G.", 20 -> "Association", 6 -> technology, 22 -> executive, 0 -> material, 9 -> problem, 16 -> organization, 19 -> "Control", 3 -> produce-01, 10 -> agree-01, 13 -> "Daryl"),Map(e -> enrich-01, n -> nucleus, p5 -> person, b -> bomb, t -> technology, e2 -> executive, p2 -> possible, m -> material, p -> produce-01, n3 -> name, a -> agree-01, p4 -> problem, t2 -> tank, c -> capable-41, o -> organization, p3 -> pursue-01, n2 -> name))),[Ljava.lang.String;@63475ace,Annotation([Ljava.lang.String;@4988d8b8,[Ljava.lang.String;@c0c2f8d,[Ljava.lang.String;@305b7c14),Annotation([Ljava.lang.String;@6913c1fb,[Ljava.lang.String;@66d18979,[Ledu.cmu.lti.nlp.amr.Dependency;@bccb269),Annotation([Ljava.lang.String;@609cd4d8,[Ljava.lang.String;@17f7cd29,[Ljava.lang.String;@7d8704ef),Annotation([Ljava.lang.String;@13b6aecc,[Ljava.lang.String;@158a8276,[Ledu.cmu.lti.nlp.amr.Entity;@3c3d9b6b))
AMR:
(a / agree-01, ARG0, t2 / tank)
(a / agree-01, ARG1, p3 / pursue-01)
(b / bomb, mod, n / nucleus)
(c / capable-41, ARG1, p2 / possible)
(c / capable-41, ARG2, p / produce-01)
(e / enrich-01, ARG1, p4 / problem)
(e2 / executive, op, a / agree-01)
(m / material, mod, n / nucleus)
(n2 / name, op, "Daryl")
(n2 / name, op, "G.")
(n2 / name, op, "Kimball")
(n3 / name, op, "Arms")
(n3 / name, op, "Association")
(n3 / name, op, "Control")
(o / organization, name, n3 / name)
(p / produce-01, ARG1, m / material)
(p3 / pursue-01, ARG0, o / organization)
(p3 / pursue-01, ARG1, t / technology)
(p3 / pursue-01, ARG2, p2 / possible)
(p5 / person, mod, o / organization)
(p5 / person, name, n2 / name)
(t / technology, mod, e / enrich-01)

Decoded in 659,286 microseconds
Sentence: Kimball stated the Iranian government's design is to deflect criticism and pressure and to claim that progress is being made.

NER Entity: (person :name (name :op "Kimball"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 15-16:  claim => claim-01
Span 10-11:  criticism => criticize-01
Span 9-10:  deflect => deflect-01
Span 6-7:  design => design-01
Span 12-13:  pressure => pressure-01
Span 17-18:  progress => progress-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 13-14:  and => and
Oracle Span 15-16:  claim => claim-01
Oracle Span 10-11:  criticism => criticize-01
Oracle Span 9-10:  deflect => deflect-01
Oracle Span 6-7:  design => design-01
Oracle Span 4-5:  government => (government-organization :ARG0-of govern-01)
Oracle Span 3-4:  Iranian => (country :name (name :op "Iran"))
Oracle Span 0-1:  Kimball => (person :name (name :op "Kimball"))
Oracle Span 20-21:  made => make-01
Oracle Span 12-13:  pressure => pressure-01
Oracle Span 17-18:  progress => progress-01
Oracle Span 1-2:  stated => state-01

Missing span: Kimball => (person :name (name :op "Kimball"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: and => and
Missing span: made => make-01
Missing span: and => and
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Kimball	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	5	det	_	_
4	Iranian	_	JJ	JJ	_	5	amod	_	_
5	government	_	NN	NN	_	7	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	design	_	NN	NN	_	8	nsubj	_	_
8	is	_	VBZ	VBZ	_	2	ccomp	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	deflect	_	VB	VB	_	8	ccomp	_	_
11	criticism	_	NN	NN	_	10	dobj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	pressure	_	NN	NN	_	11	conj	_	_
14	and	_	CC	CC	_	10	cc	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	claim	_	VB	VB	_	10	conj	_	_
17	that	_	IN	IN	_	21	mark	_	_
18	progress	_	NN	NN	_	21	nsubjpass	_	_
19	is	_	VBZ	VBZ	_	21	aux	_	_
20	being	_	VBG	VBG	_	21	auxpass	_	_
21	made	_	VBN	VBN	_	16	ccomp	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c3 / claim-01)
(a / and, op, d2 / deflect-01)
(a2 / and, op, c2 / criticize-01)
(a2 / and, op, p2 / pressure-01)
(c / country, name, n2 / name)
(c3 / claim-01, ARG0, g / government-organization)
(c3 / claim-01, ARG1, m / make-01)
(d / design-01, ARG0, g / government-organization)
(d / design-01, ARG1, a / and)
(d2 / deflect-01, ARG0, g / government-organization)
(d2 / deflect-01, ARG1, a2 / and)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(m / make-01, ARG1, p3 / progress-01)
(n / name, op, "Kimball")
(n2 / name, op, "Iran")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, d / design-01)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),progress,progress-01,false), Span(15,16,List(1),claim,claim-01,false), Span(12,13,List(2),pressure,pressure-01,false), Span(10,11,List(3),criticism,criticize-01,false), Span(9,10,List(4),deflect,deflect-01,false), Span(6,7,List(5),design,design-01,false)),Map(2 -> pressure-01, 5 -> design-01, 1 -> claim-01, 4 -> deflect-01, 0 -> progress-01, 3 -> criticize-01),Map(p2 -> pressure-01, d -> deflect-01, p -> progress-01, d2 -> design-01, c -> claim-01, c2 -> criticize-01))),[Ljava.lang.String;@79d8407f,Annotation([Ljava.lang.String;@5fbe4146,[Ljava.lang.String;@1e66f1f5,[Ljava.lang.String;@4e50c791),Annotation([Ljava.lang.String;@7530ad9c,[Ljava.lang.String;@58a9760d,[Ledu.cmu.lti.nlp.amr.Dependency;@71e9ddb4),Annotation([Ljava.lang.String;@394df057,[Ljava.lang.String;@4961f6af,[Ljava.lang.String;@5aebe890),Annotation([Ljava.lang.String;@65d09a04,[Ljava.lang.String;@33c911a1,[Ledu.cmu.lti.nlp.amr.Entity;@75db5df9))
AMR:
(c / claim-01, ARG1, p / progress-01)
(c / claim-01, ARG2, c2 / criticize-01)
(d / deflect-01, ARG0, d2 / design-01)
(d / deflect-01, ARG1, c2 / criticize-01)
(p2 / pressure-01, ARG1, c2 / criticize-01)

Decoded in 156,734 microseconds
Sentence: Iranian officials stated a possible reduction in collaboration with inspectors in the event of more sanctions.

NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 7-8:  collaboration => collaborate-01
Span 12-13:  event => event
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 4-5:  possible => possible
Span 5-6:  reduction => reduce-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  collaboration => collaborate-01
Oracle Span 9-10:  inspectors => (person :ARG0-of inspect-01)
Oracle Span 0-1:  Iranian => (country :name (name :op "Iran"))
Oracle Span 14-15:  more => more
Oracle Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 4-5:  possible => possible
Oracle Span 5-6:  reduction => reduce-01
Oracle Span 15-16:  sanctions => sanction-02
Oracle Span 2-3:  stated => state-01

Extra span: event => event
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: sanctions => sanction-02
Missing span: more => more
Missing span: inspectors => (person :ARG0-of inspect-01)
Dependencies:
1	Iranian	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	a	_	DT	DT	_	6	det	_	_
5	possible	_	JJ	JJ	_	6	amod	_	_
6	reduction	_	NN	NN	_	3	dobj	_	_
7	in	_	IN	IN	_	3	prep	_	_
8	collaboration	_	NN	NN	_	7	pobj	_	_
9	with	_	IN	IN	_	3	prep	_	_
10	inspectors	_	NNS	NNS	_	9	pobj	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	event	_	NN	NN	_	11	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	more	_	JJR	JJR	_	16	amod	_	_
16	sanctions	_	NNS	NNS	_	14	pobj	_	_
17	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / collaborate-01, ARG0, o / official)
(c2 / collaborate-01, ARG1, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(i / inspect-01, ARG0, p2 / person)
(n / name, op, "Iran")
(r / reduce-01, condition, s2 / sanction-02)
(r / reduce-01, manner, c2 / collaborate-01)
(r / reduce-01, mod, p / possible)
(s / state-01, ARG1, r / reduce-01)
(s2 / sanction-02, mod, m / more)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),event,event,false), Span(7,8,List(1),collaboration,collaborate-01,false), Span(5,6,List(2),reduction,reduce-01,false), Span(4,5,List(3),possible,possible,false), Span(1,2,List(5, 4),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> reduce-01, 5 -> official, 1 -> collaborate-01, 4 -> have-org-role-91, 0 -> event, 3 -> possible),Map(e -> event, h -> have-org-role-91, p -> possible, r -> reduce-01, c -> collaborate-01, o -> official))),[Ljava.lang.String;@707194ba,Annotation([Ljava.lang.String;@1190200a,[Ljava.lang.String;@6a2f6f80,[Ljava.lang.String;@45b4c3a9),Annotation([Ljava.lang.String;@399c4be1,[Ljava.lang.String;@291caca8,[Ledu.cmu.lti.nlp.amr.Dependency;@385e9564),Annotation([Ljava.lang.String;@5b94b04d,[Ljava.lang.String;@8c3b9d,[Ljava.lang.String;@4c39bec8),Annotation([Ljava.lang.String;@f79e,[Ljava.lang.String;@7ee8290b,[Ledu.cmu.lti.nlp.amr.Entity;@1f59a598))
AMR:
(c / collaborate-01, ARG0, h / have-org-role-91)
(h / have-org-role-91, ARG2, o / official)
(p / possible, domain, r / reduce-01)
(r / reduce-01, ARG0, e / event)
(r / reduce-01, ARG1, c / collaborate-01)

Decoded in 54,179 microseconds
Sentence: The Security Council has voted unanimously to impose sanctions against Iran but the penalties have been limited from U.S. demands under Chinese and Russian pressure.

NER Entity: (organization :name (name :op "Security" :op "Council"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 19-20:  demands => demand-01
Span 7-8:  impose => impose-01
Span 16-17:  limited => limit-01
Span 13-14:  penalties => penalize-01
Span 24-25:  pressure => pressure-01
Span 1-3:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 5-6:  unanimously => unanimous
Span 4-5:  voted => vote-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 22-23:  and => and
Oracle Span 21-22:  Chinese => (country :name (name :op "China"))
Oracle Span 19-20:  demands => demand-01
Oracle Span 7-8:  impose => impose-01
Oracle Span 10-11:  Iran => (country :name (name :op "Iran"))
Oracle Span 16-17:  limited => limit-01
Oracle Span 13-14:  penalties => penalize-01
Oracle Span 24-25:  pressure => pressure-01
Oracle Span 23-24:  Russian => (country :name (name :op "Russia"))
Oracle Span 8-9:  sanctions => sanction-02
Oracle Span 1-3:  Security Council => (organization :name (name :op "Council" :op "Security"))
Oracle Span 18-19:  U.S. => (country :name (name :op "U.S."))
Oracle Span 5-6:  unanimously => unanimous
Oracle Span 4-5:  voted => vote-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: and => and
Missing span: sanctions => sanction-02
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Security	_	NNP	NNP	_	3	nn	_	_
3	Council	_	NNP	NNP	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	voted	_	VBN	VBN	_	0	root	_	_
6	unanimously	_	RB	RB	_	5	advmod	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	impose	_	VB	VB	_	5	xcomp	_	_
9	sanctions	_	NNS	NNS	_	8	dobj	_	_
10	against	_	IN	IN	_	8	prep	_	_
11	Iran	_	NNP	NNP	_	10	pobj	_	_
12	but	_	CC	CC	_	5	cc	_	_
13	the	_	DT	DT	_	14	det	_	_
14	penalties	_	NNS	NNS	_	17	nsubjpass	_	_
15	have	_	VBP	VBP	_	17	aux	_	_
16	been	_	VBN	VBN	_	17	auxpass	_	_
17	limited	_	VBN	VBN	_	5	conj	_	_
18	from	_	IN	IN	_	17	prep	_	_
19	U.S.	_	NNP	NNP	_	20	nn	_	_
20	demands	_	NNS	NNS	_	18	pobj	_	_
21	under	_	IN	IN	_	17	prep	_	_
22	Chinese	_	JJ	JJ	_	25	amod	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	Russian	_	JJ	JJ	_	22	conj	_	_
25	pressure	_	NN	NN	_	21	pobj	_	_
26	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(d / demand-01, ARG0, c2 / country)
(d / demand-01, ARG1, p / penalize-01)
(i / impose-01, ARG0, o / organization)
(i / impose-01, ARG1, s / sanction-02)
(i / impose-01, ARG2, c / country)
(l / limit-01, ARG1, p / penalize-01)
(n / name, op, "Council")
(n / name, op, "Security")
(n2 / name, op, "Iran")
(n3 / name, op, "U.S.")
(n4 / name, op, "China")
(n5 / name, op, "Russia")
(o / organization, name, n / name)
(p2 / pressure-01, ARG0, a / and)
(v / vote-01, ARG0, o / organization)
(v / vote-01, ARG1, i / impose-01)
(v / vote-01, concession, l / limit-01)
(v / vote-01, mod, u / unanimous)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),pressure,pressure-01,false), Span(19,20,List(1),demands,demand-01,false), Span(16,17,List(2),limited,limit-01,false), Span(13,14,List(3),penalties,penalize-01,false), Span(7,8,List(4),impose,impose-01,false), Span(5,6,List(5),unanimously,unanimous,false), Span(4,5,List(6),voted,vote-01,false), Span(1,3,List(10, 9, 8, 7),Security Council,(organization :name (name :op "Council" :op "Security")),false)),Map(2 -> limit-01, 5 -> unanimous, 8 -> name, 7 -> organization, 1 -> demand-01, 4 -> impose-01, 6 -> vote-01, 9 -> "Council", 0 -> pressure-01, 10 -> "Security", 3 -> penalize-01),Map(n -> name, p2 -> penalize-01, v -> vote-01, d -> demand-01, p -> pressure-01, i -> impose-01, u -> unanimous, l -> limit-01, o -> organization))),[Ljava.lang.String;@1e178745,Annotation([Ljava.lang.String;@192c3f1e,[Ljava.lang.String;@26b3fd41,[Ljava.lang.String;@7494f96a),Annotation([Ljava.lang.String;@561b6512,[Ljava.lang.String;@2e377400,[Ledu.cmu.lti.nlp.amr.Dependency;@1757cd72),Annotation([Ljava.lang.String;@445b295b,[Ljava.lang.String;@49e5f737,[Ljava.lang.String;@5c671d7f),Annotation([Ljava.lang.String;@757277dc,[Ljava.lang.String;@687e99d8,[Ledu.cmu.lti.nlp.amr.Entity;@e4487af))
AMR:
(i / impose-01, ARG0, o / organization)
(i / impose-01, mod, u / unanimous)
(l / limit-01, ARG0, o / organization)
(l / limit-01, ARG1, p2 / penalize-01)
(l / limit-01, time, d / demand-01)
(l / limit-01, time, p / pressure-01)
(n / name, op, "Council")
(n / name, op, "Security")
(o / organization, name, n / name)
(v / vote-01, ARG0, o / organization)

Decoded in 303,844 microseconds
Sentence: SOLTANIEH stated in an interview with state-controlled Iranian television that the report and the measures taken make the intervention of any other international organization including the Security Council irrelevant and unjustified.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "Security" :op "Council"))
Spans:
Span 22-23:  any => any
Span 8-9:  controlled => control-01
Span 26-28:  including the => (organization :name (name :op "Security" :op "Council"))
Span 20-21:  intervention => intervene-01
Span 4-5:  interview => interview-01
Span 16-17:  measures => measure
Span 25-26:  organization => organization
Span 23-24:  other => other
Span 28-30:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 10-11:  television => television

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 22-23:  any => any
Oracle Span 8-9:  controlled => control-01
Oracle Span 24-25:  international => international
Oracle Span 20-21:  intervention => intervene-01
Oracle Span 4-5:  interview => interview-01
Oracle Span 9-10:  Iranian => (country :name (name :op "Iran"))
Oracle Span 18-19:  make => make-02
Oracle Span 16-17:  measures => measure
Oracle Span 21-22:  of => include-01
Oracle Span 25-26:  organization => organization
Oracle Span 23-24:  other => other
Oracle Span 13-14:  report => report
Oracle Span 28-30:  Security Council => (organization :name (name :op "Council" :op "Security"))
Oracle Span 0-1:  SOLTANIEH => (person :name (name :op "Soltanieh"))
Oracle Span 6-7:  state => state
Oracle Span 1-2:  stated => state-01
Oracle Span 17-18:  taken => take-01
Oracle Span 10-11:  television => television
Oracle Span 32-33:  unjustified => (justify-01 :polarity -)

Extra span: including the => (organization :name (name :op "Security" :op "Council"))
Missing span: SOLTANIEH => (person :name (name :op "Soltanieh"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: state => state
Missing span: make => make-02
Missing span: of => include-01
Missing span: international => international
Missing span: and => and
Missing span: taken => take-01
Missing span: report => report
Missing span: unjustified => (justify-01 :polarity -)
Dependencies:
1	SOLTANIEH	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	an	_	DT	DT	_	5	det	_	_
5	interview	_	NN	NN	_	3	pobj	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	state-controlled	_	JJ	JJ	_	9	amod	_	_
8	Iranian	_	JJ	JJ	_	9	amod	_	_
9	television	_	NN	NN	_	6	pobj	_	_
10	that	_	IN	IN	_	17	mark	_	_
11	the	_	DT	DT	_	12	det	_	_
12	report	_	NN	NN	_	17	nsubj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	the	_	DT	DT	_	15	det	_	_
15	measures	_	NNS	NNS	_	12	conj	_	_
16	taken	_	VBN	VBN	_	15	vmod	_	_
17	make	_	VBP	VBP	_	2	ccomp	_	_
18	the	_	DT	DT	_	19	det	_	_
19	intervention	_	NN	NN	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	any	_	DT	DT	_	24	det	_	_
22	other	_	JJ	JJ	_	24	amod	_	_
23	international	_	JJ	JJ	_	24	amod	_	_
24	organization	_	NN	NN	_	20	pobj	_	_
25	including	_	VBG	VBG	_	24	prep	_	_
26	the	_	DT	DT	_	28	det	_	_
27	Security	_	NNP	NNP	_	28	nn	_	_
28	Council	_	NNP	NNP	_	25	pobj	_	_
29	irrelevant	_	JJ	JJ	_	28	amod	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	unjustified	_	JJ	JJ	_	29	conj	_	_
32	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, m2 / measure)
(a / and, op, r / report)
(c / country, name, n3 / name)
(c2 / control-01, ARG0, s2 / state)
(c2 / control-01, ARG1, t2 / television)
(i / intervene-01, ARG0, o / organization)
(i3 / include-01, ARG1, o2 / organization)
(i3 / include-01, ARG2, o / organization)
(i4 / interview-01, ARG0, t2 / television)
(j / justify-01, ARG1, i / intervene-01)
(j / justify-01, polarity, -)
(m / make-02, ARG0, a / and)
(m / make-02, ARG1, i / intervene-01)
(n / name, op, "Soltanieh")
(n2 / name, op, "Council")
(n2 / name, op, "Security")
(n3 / name, op, "Iran")
(o / organization, mod, a2 / any)
(o / organization, mod, i2 / international)
(o / organization, mod, o3 / other)
(o2 / organization, name, n2 / name)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, m / make-02)
(s / state-01, medium, i4 / interview-01)
(t / take-01, ARG1, m2 / measure)
(t2 / television, mod, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(28,30,List(3, 2, 1, 0),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(26,28,List(7, 6, 5, 4),including the,(organization :name (name :op "Security" :op "Council")),false), Span(25,26,List(8),organization,organization,false), Span(23,24,List(9),other,other,false), Span(22,23,List(10),any,any,false), Span(20,21,List(11),intervention,intervene-01,false), Span(16,17,List(12),measures,measure,false), Span(10,11,List(13),television,television,false), Span(8,9,List(14),controlled,control-01,false), Span(4,5,List(15),interview,interview-01,false)),Map(2 -> "Council", 5 -> name, 12 -> measure, 15 -> interview-01, 8 -> organization, 7 -> "Council", 1 -> name, 4 -> organization, 11 -> intervene-01, 14 -> control-01, 6 -> "Security", 0 -> organization, 9 -> other, 3 -> "Security", 10 -> any, 13 -> television),Map(n -> name, t -> television, o3 -> organization, m -> measure, a -> any, o2 -> organization, i2 -> interview-01, i -> intervene-01, c -> control-01, o4 -> other, o -> organization, n2 -> name))),[Ljava.lang.String;@6aaceffd,Annotation([Ljava.lang.String;@c86b9e3,[Ljava.lang.String;@10aa41f2,[Ljava.lang.String;@3af9c5b7),Annotation([Ljava.lang.String;@37271612,[Ljava.lang.String;@ed7f8b4,[Ledu.cmu.lti.nlp.amr.Dependency;@4c309d4d),Annotation([Ljava.lang.String;@38102d01,[Ljava.lang.String;@37883b97,[Ljava.lang.String;@6ab778a),Annotation([Ljava.lang.String;@4e3958e7,[Ljava.lang.String;@77f80c04,[Ledu.cmu.lti.nlp.amr.Entity;@1dac5ef))
AMR:
(a / any, op, c / control-01)
(c / control-01, ARG1, t / television)
(i / intervene-01, ARG0, o3 / organization)
(i / intervene-01, ARG1, o / organization)
(i / intervene-01, ARG2, t / television)
(i2 / interview-01, ARG1, t / television)
(m / measure, op, c / control-01)
(n / name, op, "Council")
(n / name, op, "Security")
(n2 / name, op, "Council")
(n2 / name, op, "Security")
(o / organization, name, n / name)
(o2 / organization, mod, o3 / organization)
(o2 / organization, name, n2 / name)
(o3 / organization, mod, o4 / other)

Decoded in 562,811 microseconds
Sentence: 2007-09-30

mkDayMonthYear(2007-09-30,30,09,2007)
mkDayMonthYear(2007-09-30,30,09,2007)
Spans:
Span 0-1:  2007-09-30 => (date-entity :day 30 :month 9 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2007-09-30 => (date-entity :day 30 :month 9 :year 2007)

Dependencies:
1	2007-09-30	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 30)
(d / date-entity, month, 9)
(d / date-entity, year, 2007)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-09-30,(date-entity :day 30 :month 9 :year 2007),false)),Map(2 -> 9, 1 -> 30, 0 -> date-entity, 3 -> 2007),Map(2 -> 2007, d -> date-entity, 9 -> 9, 3 -> 30))),[Ljava.lang.String;@5c90e579,Annotation([Ljava.lang.String;@58ea606c,[Ljava.lang.String;@6f45df59,[Ljava.lang.String;@38e79ae3),Annotation([Ljava.lang.String;@63070bab,[Ljava.lang.String;@68e5eea7,[Ledu.cmu.lti.nlp.amr.Dependency;@291b4bf5),Annotation([Ljava.lang.String;@2d2ffcb7,[Ljava.lang.String;@762ef0ea,[Ljava.lang.String;@31f9b85e),Annotation([Ljava.lang.String;@424e1977,[Ljava.lang.String;@10d68fcd,[Ledu.cmu.lti.nlp.amr.Entity;@117e949d))
AMR:
(d / date-entity, day, 3 / 30)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2007)

Decoded in 12,887 microseconds
Sentence: Israel (IL)

NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "IL"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 0-1:  Israel => (country :name (name :op "Israel"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Israel => (country :name (name :op "Israel"))

Dependencies:
1	Israel	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	IL	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Israel")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Israel,(country :name (name :op "Israel")),false)),Map(2 -> "Israel", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@6db9f5a4,Annotation([Ljava.lang.String;@5f8edcc5,[Ljava.lang.String;@7b02881e,[Ljava.lang.String;@1ebd319f),Annotation([Ljava.lang.String;@3c0be339,[Ljava.lang.String;@15ca7889,[Ledu.cmu.lti.nlp.amr.Dependency;@7a675056),Annotation([Ljava.lang.String;@d21a74c,[Ljava.lang.String;@6e509ffa,[Ljava.lang.String;@2898ac89),Annotation([Ljava.lang.String;@683dbc2c,[Ljava.lang.String;@68267da0,[Ledu.cmu.lti.nlp.amr.Entity;@2638011))
AMR:
(c / country, name, n / name)
(n / name, op, "Israel")

Decoded in 9,153 microseconds
Sentence: proliferation; technology; international; politics

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 6-7:  politics => politics
Span 2-3:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 4-5:  international => international
Oracle Span 6-7:  politics => politics
Oracle Span 0-1:  proliferation => proliferate-01
Oracle Span 2-3:  technology => technology

Extra span: ; => and
Extra span: ; => and
Missing span: international => international
Missing span: proliferation => proliferate-01
Dependencies:
1	proliferation	_	NN	NN	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	technology	_	NN	NN	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	international	_	JJ	JJ	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	politics	_	NNS	NNS	_	5	dep	_	_

Oracle:
(a / and, op, i / international)
(a / and, op, p / proliferate-01)
(a / and, op, p2 / politics)
(a / and, op, t / technology)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),politics,politics,false), Span(5,6,List(1),;,and,false), Span(3,4,List(2),;,and,false), Span(2,3,List(3),technology,technology,false), Span(1,2,List(4),;,and,false)),Map(2 -> and, 1 -> and, 4 -> and, 0 -> politics, 3 -> technology),Map(t -> technology, a3 -> and, p -> politics, a -> and, a2 -> and))),[Ljava.lang.String;@6ff29830,Annotation([Ljava.lang.String;@6a2b953e,[Ljava.lang.String;@313b2ea6,[Ljava.lang.String;@2f465398),Annotation([Ljava.lang.String;@548e6d58,[Ljava.lang.String;@623a8092,[Ledu.cmu.lti.nlp.amr.Dependency;@a1cdc6d),Annotation([Ljava.lang.String;@175b9425,[Ljava.lang.String;@3098cf3b,[Ljava.lang.String;@610f7aa),Annotation([Ljava.lang.String;@6a03bcb1,[Ljava.lang.String;@21b2e768,[Ledu.cmu.lti.nlp.amr.Entity;@57250572))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, p / politics)
(a3 / and, op, a2 / and)
(a3 / and, op, t / technology)

Decoded in 23,775 microseconds
Sentence: Documents outlining the Israeli proposal to allow the international transfer of nuclear technology to States that have not signed on to nonproliferation rules were distributed to the Nuclear Suppliers Group.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "States"))
NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 6-7:  allow => allow-01
Span 24-25:  distributed => distribute-01
Span 11-12:  nuclear => nucleus
Span 27-30:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 4-5:  proposal => propose-01
Span 22-23:  rules => rule
Span 12-13:  technology => technology
Span 9-10:  transfer => transfer-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 6-7:  allow => allow-01
Oracle Span 24-25:  distributed => distribute-01
Oracle Span 0-1:  Documents => document
Oracle Span 8-9:  international => international
Oracle Span 3-4:  Israeli => (country :name (name :op "Israel"))
Oracle Span 11-12:  nuclear => nucleus
Oracle Span 27-30:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 1-2:  outlining => outline-01
Oracle Span 4-5:  proposal => propose-01
Oracle Span 22-23:  rules => rule
Oracle Span 18-19:  signed => sign-04
Oracle Span 14-15:  States => state
Oracle Span 12-13:  technology => technology
Oracle Span 9-10:  transfer => transfer-01

Incorrect span: Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: Documents => document
Missing span: outlining => outline-01
Missing span: international => international
Missing span: States => state
Missing span: signed => sign-04
Dependencies:
1	Documents	_	NNS	NNS	_	25	nsubjpass	_	_
2	outlining	_	VBG	VBG	_	1	vmod	_	_
3	the	_	DT	DT	_	5	det	_	_
4	Israeli	_	JJ	JJ	_	5	amod	_	_
5	proposal	_	NN	NN	_	2	dobj	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	allow	_	VB	VB	_	2	vmod	_	_
8	the	_	DT	DT	_	10	det	_	_
9	international	_	JJ	JJ	_	10	amod	_	_
10	transfer	_	NN	NN	_	7	dobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	nuclear	_	JJ	JJ	_	13	amod	_	_
13	technology	_	NN	NN	_	11	pobj	_	_
14	to	_	TO	TO	_	7	prep	_	_
15	States	_	NNPS	NNPS	_	14	pobj	_	_
16	that	_	WDT	WDT	_	19	nsubj	_	_
17	have	_	VBP	VBP	_	19	aux	_	_
18	not	_	RB	RB	_	19	neg	_	_
19	signed	_	VBN	VBN	_	15	rcmod	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	to	_	TO	TO	_	20	pcomp	_	_
22	nonproliferation	_	NN	NN	_	23	nn	_	_
23	rules	_	NNS	NNS	_	21	pobj	_	_
24	were	_	VBD	VBD	_	25	auxpass	_	_
25	distributed	_	VBN	VBN	_	0	root	_	_
26	to	_	TO	TO	_	25	prep	_	_
27	the	_	DT	DT	_	30	det	_	_
28	Nuclear	_	NNP	NNP	_	30	nn	_	_
29	Suppliers	_	NNP	NNP	_	30	nn	_	_
30	Group	_	NNP	NNP	_	26	pobj	_	_
31	.	_	.	.	_	25	punct	_	_

Oracle:
(a / allow-01, ARG1, t / transfer-01)
(c / country, name, n2 / name)
(d / distribute-01, ARG1, d2 / document)
(d / distribute-01, ARG2, o / organization)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(n2 / name, op, "Israel")
(o / organization, name, n / name)
(o2 / outline-01, ARG0, d2 / document)
(o2 / outline-01, ARG1, p / propose-01)
(p / propose-01, ARG0, c / country)
(p / propose-01, ARG1, a / allow-01)
(s2 / sign-04, ARG0, s / state)
(s2 / sign-04, ARG1, r / rule)
(t / transfer-01, ARG1, t2 / technology)
(t / transfer-01, ARG2, s / state)
(t / transfer-01, mod, i / international)
(t2 / technology, mod, n3 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(27,30,List(4, 3, 2, 1, 0),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(24,25,List(5),distributed,distribute-01,false), Span(22,23,List(6),rules,rule,false), Span(12,13,List(7),technology,technology,false), Span(11,12,List(8),nuclear,nucleus,false), Span(9,10,List(9),transfer,transfer-01,false), Span(6,7,List(10),allow,allow-01,false), Span(4,5,List(11),proposal,propose-01,false)),Map(2 -> "Nuclear", 5 -> distribute-01, 8 -> nucleus, 7 -> technology, 1 -> name, 11 -> propose-01, 4 -> "Group", 6 -> rule, 9 -> transfer-01, 0 -> organization, 10 -> allow-01, 3 -> "Suppliers"),Map(n -> name, t -> technology, d -> distribute-01, p -> propose-01, a -> allow-01, t2 -> transfer-01, r -> rule, o -> organization, n2 -> nucleus))),[Ljava.lang.String;@5609159b,Annotation([Ljava.lang.String;@2118cddf,[Ljava.lang.String;@17a7f733,[Ljava.lang.String;@68567e20),Annotation([Ljava.lang.String;@76ed1b7c,[Ljava.lang.String;@11fc564b,[Ledu.cmu.lti.nlp.amr.Dependency;@394a2528),Annotation([Ljava.lang.String;@6236eb5f,[Ljava.lang.String;@7c1e2a9e,[Ljava.lang.String;@fa36558),Annotation([Ljava.lang.String;@672872e1,[Ljava.lang.String;@32910148,[Ledu.cmu.lti.nlp.amr.Entity;@3f56875e))
AMR:
(a / allow-01, ARG1, t2 / transfer-01)
(d / distribute-01, ARG0, r / rule)
(d / distribute-01, ARG2, o / organization)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(p / propose-01, ARG1, a / allow-01)
(t / technology, mod, n2 / nucleus)
(t2 / transfer-01, ARG1, t / technology)
(t2 / transfer-01, ARG2, d / distribute-01)

Decoded in 306,650 microseconds
Sentence: The proposal may complicate the Bush administration's efforts to win an exemption for India to engage in nuclear trade.

NER Entity: (person :name (name :op "Bush"))
NER Entity: (country :name (name :op "India"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 6-7:  administration => administrate-01
Span 5-6:  Bush => (person :name (name :op "Bush"))
Span 3-4:  complicate => complicate-01
Span 8-9:  efforts => effort
Span 16-17:  engage => engage-01
Span 12-13:  exemption => exempt-01
Span 2-3:  may => possible
Span 18-19:  nuclear => nucleus
Span 1-2:  proposal => propose-01
Span 19-20:  trade => trade-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  administration => administrate-01
Oracle Span 5-6:  Bush => (person :name (name :op "Bush"))
Oracle Span 3-4:  complicate => complicate-01
Oracle Span 8-9:  efforts => effort
Oracle Span 16-17:  engage => engage-01
Oracle Span 12-13:  exemption => exempt-01
Oracle Span 14-15:  India => (country :name (name :op "India"))
Oracle Span 2-3:  may => possible
Oracle Span 18-19:  nuclear => nucleus
Oracle Span 1-2:  proposal => (thing :ARG1-of propose-01)
Oracle Span 19-20:  trade => trade-01
Oracle Span 10-11:  win => win-01

Incorrect span: proposal => propose-01
Missing span: India => (country :name (name :op "India"))
Missing span: win => win-01
Missing span: proposal => (thing :ARG1-of propose-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	proposal	_	NN	NN	_	4	nsubj	_	_
3	may	_	MD	MD	_	4	aux	_	_
4	complicate	_	VB	VB	_	0	root	_	_
5	the	_	DT	DT	_	7	det	_	_
6	Bush	_	NNP	NNP	_	7	nn	_	_
7	administration	_	NN	NN	_	9	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	efforts	_	NNS	NNS	_	4	dobj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	win	_	VB	VB	_	9	vmod	_	_
12	an	_	DT	DT	_	13	det	_	_
13	exemption	_	NN	NN	_	11	dobj	_	_
14	for	_	IN	IN	_	13	prep	_	_
15	India	_	NNP	NNP	_	14	pobj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	engage	_	VB	VB	_	11	vmod	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	nuclear	_	JJ	JJ	_	20	amod	_	_
20	trade	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	4	punct	_	_

Oracle:
(c / complicate-01, ARG0, t / thing)
(c / complicate-01, ARG1, e / effort)
(c2 / country, name, n2 / name)
(e / effort, purpose, w / win-01)
(e2 / exempt-01, ARG1, c2 / country)
(e2 / exempt-01, purpose, e3 / engage-01)
(e3 / engage-01, ARG1, c2 / country)
(e3 / engage-01, ARG2, t2 / trade-01)
(n / name, op, "Bush")
(n2 / name, op, "India")
(p / possible, domain, c / complicate-01)
(p2 / propose-01, ARG1, t / thing)
(p3 / person, name, n / name)
(t2 / trade-01, mod, n3 / nucleus)
(w / win-01, ARG1, e2 / exempt-01)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),trade,trade-01,false), Span(18,19,List(1),nuclear,nucleus,false), Span(16,17,List(2),engage,engage-01,false), Span(12,13,List(3),exemption,exempt-01,false), Span(8,9,List(4),efforts,effort,false), Span(6,7,List(5),administration,administrate-01,false), Span(5,6,List(8, 7, 6),Bush,(person :name (name :op "Bush")),false), Span(3,4,List(9),complicate,complicate-01,false), Span(2,3,List(10),may,possible,false), Span(1,2,List(11),proposal,propose-01,false)),Map(2 -> engage-01, 5 -> administrate-01, 8 -> "Bush", 7 -> name, 1 -> nucleus, 11 -> propose-01, 4 -> effort, 6 -> person, 9 -> complicate-01, 0 -> trade-01, 10 -> possible, 3 -> exempt-01),Map(e -> engage-01, n -> nucleus, t -> trade-01, p2 -> possible, e2 -> exempt-01, p -> person, a -> administrate-01, c -> complicate-01, p3 -> propose-01, n2 -> name, e3 -> effort))),[Ljava.lang.String;@2b4bac49,Annotation([Ljava.lang.String;@fd07cbb,[Ljava.lang.String;@3571b748,[Ljava.lang.String;@3e96bacf),Annotation([Ljava.lang.String;@484970b0,[Ljava.lang.String;@4470f8a6,[Ledu.cmu.lti.nlp.amr.Dependency;@7c83dc97),Annotation([Ljava.lang.String;@7748410a,[Ljava.lang.String;@740773a3,[Ljava.lang.String;@37f1104d),Annotation([Ljava.lang.String;@55740540,[Ljava.lang.String;@60015ef5,[Ledu.cmu.lti.nlp.amr.Entity;@2f54a33d))
AMR:
(a / administrate-01, ARG1, p / person)
(c / complicate-01, ARG0, p3 / propose-01)
(c / complicate-01, ARG1, e3 / effort)
(e / engage-01, ARG0, e3 / effort)
(e / engage-01, ARG2, t / trade-01)
(e2 / exempt-01, ARG0, a / administrate-01)
(e2 / exempt-01, ARG1, e / engage-01)
(n2 / name, op, "Bush")
(p / person, name, n2 / name)
(p2 / possible, domain, c / complicate-01)
(t / trade-01, ARG1, n / nucleus)

Decoded in 102,012 microseconds
Sentence: Israeli officials convinced a key group of nations engaged in nuclear trade to adopt new guidelines allowing the international transfer of nuclear technology to States that have not signed on to nonproliferation rules.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "States"))
Spans:
Span 13-14:  adopt => adopt-01
Span 16-17:  allowing => allow-01
Span 2-3:  convinced => convince-01
Span 8-9:  engaged => engage-01
Span 15-16:  guidelines => guideline
Span 4-5:  key => key
Span 7-8:  nations => nation
Span 14-15:  new => new
Span 21-22:  nuclear => nucleus
Span 10-11:  nuclear => nucleus
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 32-33:  rules => rule
Span 22-23:  technology => technology
Span 11-12:  trade => trade-01
Span 19-20:  transfer => transfer-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 13-14:  adopt => adopt-01
Oracle Span 16-17:  allowing => allow-01
Oracle Span 2-3:  convinced => convince-01
Oracle Span 8-9:  engaged => engage-01
Oracle Span 5-6:  group => group
Oracle Span 15-16:  guidelines => guideline
Oracle Span 26-27:  have => (person :ARG0-of have-org-role-91)
Oracle Span 18-19:  international => international
Oracle Span 0-1:  Israeli => (country :name (name :op "Israel"))
Oracle Span 4-5:  key => key
Oracle Span 7-8:  nations => nation
Oracle Span 14-15:  new => new
Oracle Span 10-11:  nuclear => nucleus
Oracle Span 1-2:  officials => official
Oracle Span 32-33:  rules => rule
Oracle Span 28-29:  signed => sign-04
Oracle Span 24-25:  States => state
Oracle Span 22-23:  technology => technology
Oracle Span 11-12:  trade => trade-01
Oracle Span 19-20:  transfer => transfer-01

Extra span: nuclear => nucleus
Incorrect span: officials => (have-org-role-91 :ARG2 official)
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: international => international
Missing span: States => state
Missing span: signed => sign-04
Missing span: group => group
Missing span: officials => official
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	Israeli	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	3	nsubj	_	_
3	convinced	_	VBD	VBD	_	0	root	_	_
4	a	_	DT	DT	_	6	det	_	_
5	key	_	JJ	JJ	_	6	amod	_	_
6	group	_	NN	NN	_	3	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	nations	_	NNS	NNS	_	7	pobj	_	_
9	engaged	_	VBN	VBN	_	8	vmod	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	nuclear	_	JJ	JJ	_	12	amod	_	_
12	trade	_	NN	NN	_	10	pobj	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	adopt	_	VB	VB	_	9	xcomp	_	_
15	new	_	JJ	JJ	_	16	amod	_	_
16	guidelines	_	NNS	NNS	_	14	dobj	_	_
17	allowing	_	VBG	VBG	_	16	vmod	_	_
18	the	_	DT	DT	_	20	det	_	_
19	international	_	JJ	JJ	_	20	amod	_	_
20	transfer	_	NN	NN	_	17	dobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	nuclear	_	JJ	JJ	_	23	amod	_	_
23	technology	_	NN	NN	_	21	pobj	_	_
24	to	_	TO	TO	_	17	prep	_	_
25	States	_	NNPS	NNPS	_	24	pobj	_	_
26	that	_	WDT	WDT	_	29	nsubj	_	_
27	have	_	VBP	VBP	_	29	aux	_	_
28	not	_	RB	RB	_	29	neg	_	_
29	signed	_	VBN	VBN	_	25	rcmod	_	_
30	on	_	IN	IN	_	29	prep	_	_
31	to	_	TO	TO	_	30	pcomp	_	_
32	nonproliferation	_	NN	NN	_	33	nn	_	_
33	rules	_	NNS	NNS	_	31	pobj	_	_
34	.	_	.	.	_	3	punct	_	_

Oracle:
(a / adopt-01, ARG0, g / group)
(a / adopt-01, ARG1, g2 / guideline)
(a2 / allow-01, ARG0, g2 / guideline)
(a2 / allow-01, ARG1, t2 / transfer-01)
(c / convince-01, ARG0, p2 / person)
(c / convince-01, ARG1, g / group)
(c / convince-01, ARG2, a / adopt-01)
(c2 / country, name, n / name)
(e / engage-01, ARG1, n2 / nation)
(e / engage-01, ARG2, t / trade-01)
(g / group, mod, k / key)
(g2 / guideline, mod, n4 / new)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Israel")
(n2 / nation, consist, g / group)
(s2 / sign-04, ARG0, s / state)
(s2 / sign-04, ARG1, r / rule)
(t / trade-01, mod, n3 / nucleus)
(t2 / transfer-01, ARG1, t3 / technology)
(t2 / transfer-01, ARG2, s / state)
(t2 / transfer-01, mod, i / international)
(t3 / technology, mod, n3 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),rules,rule,false), Span(22,23,List(1),technology,technology,false), Span(21,22,List(2),nuclear,nucleus,false), Span(19,20,List(3),transfer,transfer-01,false), Span(16,17,List(4),allowing,allow-01,false), Span(15,16,List(5),guidelines,guideline,false), Span(14,15,List(6),new,new,false), Span(13,14,List(7),adopt,adopt-01,false), Span(11,12,List(8),trade,trade-01,false), Span(10,11,List(9),nuclear,nucleus,false), Span(8,9,List(10),engaged,engage-01,false), Span(7,8,List(11),nations,nation,false), Span(4,5,List(12),key,key,false), Span(2,3,List(13),convinced,convince-01,false), Span(1,2,List(15, 14),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> nucleus, 5 -> guideline, 12 -> key, 15 -> official, 8 -> trade-01, 7 -> adopt-01, 1 -> technology, 4 -> allow-01, 11 -> nation, 14 -> have-org-role-91, 6 -> new, 0 -> rule, 9 -> nucleus, 3 -> transfer-01, 10 -> engage-01, 13 -> convince-01),Map(e -> engage-01, n -> nucleus, h -> have-org-role-91, t -> technology, k -> key, n4 -> nation, t3 -> trade-01, g -> guideline, a -> allow-01, n3 -> nucleus, t2 -> transfer-01, r -> rule, a2 -> adopt-01, c -> convince-01, o -> official, n2 -> new))),[Ljava.lang.String;@1018bde2,Annotation([Ljava.lang.String;@65b3f4a4,[Ljava.lang.String;@f2ff811,[Ljava.lang.String;@568ff82),Annotation([Ljava.lang.String;@50caa560,[Ljava.lang.String;@2a266d09,[Ledu.cmu.lti.nlp.amr.Dependency;@5ab9e72c),Annotation([Ljava.lang.String;@186f8716,[Ljava.lang.String;@1d8bd0de,[Ljava.lang.String;@45ca843),Annotation([Ljava.lang.String;@11c9af63,[Ljava.lang.String;@757acd7b,[Ledu.cmu.lti.nlp.amr.Entity;@36b4fe2a))
AMR:
(a / allow-01, ARG0, g / guideline)
(a / allow-01, ARG1, t2 / transfer-01)
(a / allow-01, ARG2, h / have-org-role-91)
(a2 / adopt-01, ARG0, k / key)
(a2 / adopt-01, ARG1, g / guideline)
(c / convince-01, ARG1, e / engage-01)
(e / engage-01, ARG1, n4 / nation)
(e / engage-01, ARG2, t3 / trade-01)
(g / guideline, mod, n2 / new)
(h / have-org-role-91, ARG2, o / official)
(r / rule, topic, t3 / trade-01)
(t / technology, mod, n / nucleus)
(t2 / transfer-01, ARG1, t / technology)
(t3 / trade-01, ARG1, a2 / adopt-01)
(t3 / trade-01, manner, n3 / nucleus)

Decoded in 421,288 microseconds
Sentence: Countries including India, Israel and Pakistan that have not signed the nuclear Non-Proliferation Treaty are prohibited from participating in international nuclear trade which includes purchasing reactors, uranium fuel or yellowcake.

NER Entity: (country :name (name :op "Countries"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Pakistan"))
NER Entity: (organization :name (name :op "Non" :op "-" :op "Proliferation" :op "Treaty"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Countries"))
Spans:
Span 0-1:  Countries => country
Span 31-32:  fuel => fuel
Span 26-27:  includes => include-01
Span 4-5:  Israel => (country :name (name :op "Israel"))
Span 23-24:  nuclear => nucleus
Span 12-17:  nuclear Non - Proliferation Treaty => (treaty :name (name :op "Treaty" :op "Non-Proliferation" :op "Nuclear"))
Span 32-33:  or => or
Span 20-21:  participating => participate-01
Span 18-19:  prohibited => prohibit-01
Span 27-28:  purchasing => purchase-01
Span 28-29:  reactors => reactor
Span 24-25:  trade => trade-01
Span 30-31:  uranium => uranium

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 5-6:  and => and
Oracle Span 0-1:  Countries => country
Oracle Span 31-32:  fuel => fuel
Oracle Span 26-27:  includes => include-01
Oracle Span 1-2:  including => include-01
Oracle Span 2-3:  India => (country :name (name :op "India"))
Oracle Span 22-23:  international => international
Oracle Span 4-5:  Israel => (country :name (name :op "Israel"))
Oracle Span 23-24:  nuclear => nucleus
Oracle Span 12-17:  nuclear Non - Proliferation Treaty => (treaty :name (name :op "Treaty" :op "Non-Proliferation" :op "Nuclear"))
Oracle Span 32-33:  or => or
Oracle Span 6-7:  Pakistan => (country :name (name :op "Pakistan"))
Oracle Span 20-21:  participating => participate-01
Oracle Span 18-19:  prohibited => prohibit-01
Oracle Span 27-28:  purchasing => purchase-01
Oracle Span 28-29:  reactors => reactor
Oracle Span 10-11:  signed => sign-01
Oracle Span 24-25:  trade => trade-01
Oracle Span 30-31:  uranium => uranium
Oracle Span 33-34:  yellowcake => yellowcake

Missing span: India => (country :name (name :op "India"))
Missing span: Pakistan => (country :name (name :op "Pakistan"))
Missing span: including => include-01
Missing span: yellowcake => yellowcake
Missing span: international => international
Missing span: signed => sign-01
Missing span: and => and
Dependencies:
1	Countries	_	NNPS	NNPS	_	17	nsubjpass	_	_
2	including	_	VBG	VBG	_	1	prep	_	_
3	India	_	NNP	NNP	_	2	pobj	_	_
4	,	_	,	,	_	3	punct	_	_
5	Israel	_	NNP	NNP	_	3	conj	_	_
6	and	_	CC	CC	_	3	cc	_	_
7	Pakistan	_	NNP	NNP	_	3	conj	_	_
8	that	_	WDT	WDT	_	11	nsubj	_	_
9	have	_	VBP	VBP	_	11	aux	_	_
10	not	_	RB	RB	_	11	neg	_	_
11	signed	_	VBN	VBN	_	3	rcmod	_	_
12	the	_	DT	DT	_	15	det	_	_
13	nuclear	_	JJ	JJ	_	15	amod	_	_
14	Non-Proliferation	_	NNP	NNP	_	15	nn	_	_
15	Treaty	_	NNP	NNP	_	11	dobj	_	_
16	are	_	VBP	VBP	_	17	auxpass	_	_
17	prohibited	_	VBN	VBN	_	0	root	_	_
18	from	_	IN	IN	_	17	prep	_	_
19	participating	_	VBG	VBG	_	18	pcomp	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	international	_	JJ	JJ	_	23	amod	_	_
22	nuclear	_	JJ	JJ	_	23	amod	_	_
23	trade	_	NN	NN	_	20	pobj	_	_
24	which	_	WDT	WDT	_	25	nsubj	_	_
25	includes	_	VBZ	VBZ	_	23	rcmod	_	_
26	purchasing	_	VBG	VBG	_	27	amod	_	_
27	reactors	_	NNS	NNS	_	25	dobj	_	_
28	,	_	,	,	_	27	punct	_	_
29	uranium	_	NN	NN	_	30	nn	_	_
30	fuel	_	NN	NN	_	27	appos	_	_
31	or	_	CC	CC	_	30	cc	_	_
32	yellowcake	_	NN	NN	_	30	conj	_	_
33	.	_	.	.	_	17	punct	_	_

Oracle:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(f / fuel, mod, u / uranium)
(i / include-01, ARG1, a / and)
(i / include-01, ARG2, c / country)
(i3 / include-01, ARG1, p3 / purchase-01)
(i3 / include-01, ARG2, t2 / trade-01)
(n / name, op, "India")
(n2 / name, op, "Israel")
(n3 / name, op, "Pakistan")
(n4 / name, op, "Non-Proliferation")
(n4 / name, op, "Nuclear")
(n4 / name, op, "Treaty")
(o / or, op, f / fuel)
(o / or, op, r / reactor)
(o / or, op, y / yellowcake)
(p / prohibit-01, ARG1, c / country)
(p / prohibit-01, ARG2, p2 / participate-01)
(p2 / participate-01, ARG0, c / country)
(p2 / participate-01, ARG1, t2 / trade-01)
(p3 / purchase-01, ARG1, o / or)
(s / sign-01, ARG0, c / country)
(s / sign-01, ARG1, t / treaty)
(t / treaty, name, n4 / name)
(t2 / trade-01, mod, i2 / international)
(t2 / trade-01, mod, n5 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),or,or,false), Span(31,32,List(1),fuel,fuel,false), Span(30,31,List(2),uranium,uranium,false), Span(28,29,List(3),reactors,reactor,false), Span(27,28,List(4),purchasing,purchase-01,false), Span(26,27,List(5),includes,include-01,false), Span(24,25,List(6),trade,trade-01,false), Span(23,24,List(7),nuclear,nucleus,false), Span(20,21,List(8),participating,participate-01,false), Span(18,19,List(9),prohibited,prohibit-01,false), Span(12,17,List(14, 13, 12, 11, 10),nuclear Non - Proliferation Treaty,(treaty :name (name :op "Treaty" :op "Non-Proliferation" :op "Nuclear")),false), Span(4,5,List(17, 16, 15),Israel,(country :name (name :op "Israel")),false), Span(0,1,List(18),Countries,country,false)),Map(2 -> uranium, 5 -> include-01, 12 -> "Treaty", 15 -> country, 8 -> participate-01, 18 -> country, 7 -> nucleus, 17 -> "Israel", 1 -> fuel, 4 -> purchase-01, 11 -> name, 14 -> "Nuclear", 6 -> trade-01, 0 -> or, 9 -> prohibit-01, 16 -> name, 3 -> reactor, 10 -> treaty, 13 -> "Non-Proliferation"),Map(n -> nucleus, t -> trade-01, p2 -> participate-01, p -> purchase-01, n3 -> name, t2 -> treaty, r -> reactor, i -> include-01, c -> country, u -> uranium, f -> fuel, o -> or, p3 -> prohibit-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@574b560f,Annotation([Ljava.lang.String;@ba54932,[Ljava.lang.String;@28975c28,[Ljava.lang.String;@3943a2be),Annotation([Ljava.lang.String;@343570b7,[Ljava.lang.String;@157853da,[Ledu.cmu.lti.nlp.amr.Dependency;@71c3b41),Annotation([Ljava.lang.String;@236e3f4e,[Ljava.lang.String;@3cc1435c,[Ljava.lang.String;@6bf0219d),Annotation([Ljava.lang.String;@dd0c991,[Ljava.lang.String;@5f16132a,[Ledu.cmu.lti.nlp.amr.Entity;@69fb6037))
AMR:
(c / country, name, n3 / name)
(f / fuel, topic, u / uranium)
(i / include-01, ARG0, t / trade-01)
(i / include-01, ARG1, r / reactor)
(n2 / name, op, "Non-Proliferation")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Treaty")
(n3 / name, op, "Israel")
(o / or, op, f / fuel)
(o / or, op, r / reactor)
(p / purchase-01, ARG0, c / country)
(p / purchase-01, ARG1, r / reactor)
(p2 / participate-01, ARG0, c2 / country)
(p2 / participate-01, ARG1, t / trade-01)
(p3 / prohibit-01, ARG1, t2 / treaty)
(p3 / prohibit-01, ARG2, p2 / participate-01)
(t / trade-01, ARG1, n / nucleus)
(t2 / treaty, name, n2 / name)

Decoded in 491,113 microseconds
Sentence: Documents outlining the Israeli proposal were distributed to the 45-member Nuclear Suppliers Group (NSG) in March 2007.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (organization :name (name :op "NSG"))
Spans:
Span 10-13:  - member Nuclear => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 9-10:  45 => 45
Span 6-7:  distributed => distribute-01
Span 19-21:  March 2007 => (date-entity :month 3 :year 2007)
Span 4-5:  proposal => propose-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  45 => 45
Oracle Span 6-7:  distributed => distribute-01
Oracle Span 0-1:  Documents => document
Oracle Span 3-4:  Israeli => (country :name (name :op "Israel"))
Oracle Span 19-21:  March 2007 => (date-entity :month 3 :year 2007)
Oracle Span 11-12:  member => (have-org-role-91 :ARG2 member)
Oracle Span 12-15:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 1-2:  outlining => outline-01
Oracle Span 4-5:  proposal => propose-01

Extra span: - member Nuclear => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: member => (have-org-role-91 :ARG2 member)
Missing span: Documents => document
Missing span: outlining => outline-01
Dependencies:
1	Documents	_	NNS	NNS	_	7	nsubjpass	_	_
2	outlining	_	VBG	VBG	_	1	vmod	_	_
3	the	_	DT	DT	_	5	det	_	_
4	Israeli	_	JJ	JJ	_	5	amod	_	_
5	proposal	_	NN	NN	_	2	dobj	_	_
6	were	_	VBD	VBD	_	7	auxpass	_	_
7	distributed	_	VBN	VBN	_	0	root	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	the	_	DT	DT	_	13	det	_	_
10	45-member	_	JJ	JJ	_	13	amod	_	_
11	Nuclear	_	NNP	NNP	_	13	nn	_	_
12	Suppliers	_	NNP	NNP	_	13	nn	_	_
13	Group	_	NNP	NNP	_	8	pobj	_	_
14	(	_	(	(	_	15	punct	_	_
15	NSG	_	NNP	NNP	_	13	appos	_	_
16	)	_	)	)	_	15	punct	_	_
17	in	_	IN	IN	_	7	prep	_	_
18	March	_	NNP	NNP	_	17	pobj	_	_
19	2007	_	CD	CD	_	18	num	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n / name)
(d / distribute-01, ARG1, d2 / document)
(d / distribute-01, time, d3 / date-entity)
(d3 / date-entity, month, 3)
(d3 / date-entity, year, 2007)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Israel")
(n2 / name, op, "Group")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Suppliers")
(o / outline-01, ARG0, d2 / document)
(o / outline-01, ARG1, p / propose-01)
(o2 / organization, name, n2 / name)
(p / propose-01, ARG0, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(19,21,List(2, 1, 0),March 2007,(date-entity :month 3 :year 2007),false), Span(10,13,List(7, 6, 5, 4, 3),- member Nuclear,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(9,10,List(8),45,45,false), Span(6,7,List(9),distributed,distribute-01,false), Span(4,5,List(10),proposal,propose-01,false)),Map(2 -> 2007, 5 -> "Nuclear", 8 -> 45, 7 -> "Group", 1 -> 3, 4 -> name, 6 -> "Suppliers", 9 -> distribute-01, 0 -> date-entity, 10 -> propose-01, 3 -> organization),Map(n -> name, 2 -> 2007, d -> date-entity, p -> propose-01, 4 -> 45, d2 -> distribute-01, o -> organization, 3 -> 3))),[Ljava.lang.String;@36d585c,Annotation([Ljava.lang.String;@87a85e1,[Ljava.lang.String;@671a5887,[Ljava.lang.String;@5552768b),Annotation([Ljava.lang.String;@3c947bc5,[Ljava.lang.String;@609db43b,[Ledu.cmu.lti.nlp.amr.Dependency;@55f616cf),Annotation([Ljava.lang.String;@1356d4d4,[Ljava.lang.String;@c03cf28,[Ljava.lang.String;@1329eff),Annotation([Ljava.lang.String;@6497b078,[Ljava.lang.String;@41c2284a,[Ledu.cmu.lti.nlp.amr.Entity;@53aad5d5))
AMR:
(4 / 45, op, o / organization)
(d / date-entity, month, 3 / 3)
(d / date-entity, year, 2 / 2007)
(d2 / distribute-01, ARG1, p / propose-01)
(d2 / distribute-01, time, d / date-entity)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(p / propose-01, ARG1, 4 / 45)

Decoded in 84,914 microseconds
Sentence: The Israeli presentation was made in a nonpaper that allows for official deniability.

NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 9-10:  allows => allow-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  allows => allow-01
Oracle Span 1-2:  Israeli => (country :name (name :op "Israel"))
Oracle Span 4-5:  made => make-01
Oracle Span 11-12:  official => official
Oracle Span 2-3:  presentation => presentation

Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: made => make-01
Missing span: official => official
Missing span: presentation => presentation
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Israeli	_	JJ	JJ	_	3	amod	_	_
3	presentation	_	NN	NN	_	5	nsubjpass	_	_
4	was	_	VBD	VBD	_	5	auxpass	_	_
5	made	_	VBN	VBN	_	0	root	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	a	_	DT	DT	_	8	det	_	_
8	nonpaper	_	NN	NN	_	6	pobj	_	_
9	that	_	WDT	WDT	_	10	nsubj	_	_
10	allows	_	VBZ	VBZ	_	8	rcmod	_	_
11	for	_	IN	IN	_	10	prep	_	_
12	official	_	JJ	JJ	_	13	amod	_	_
13	deniability	_	NN	NN	_	11	pobj	_	_
14	.	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n / name)
(m / make-01, ARG1, p / presentation)
(n / name, op, "Israel")
(p / presentation, mod, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),allows,allow-01,false)),Map(0 -> allow-01),Map(a -> allow-01))),[Ljava.lang.String;@46fa7c39,Annotation([Ljava.lang.String;@1fb700ee,[Ljava.lang.String;@4f67eb2a,[Ljava.lang.String;@4a668b6e),Annotation([Ljava.lang.String;@5f683daf,[Ljava.lang.String;@78ffe6dc,[Ledu.cmu.lti.nlp.amr.Dependency;@8317c52),Annotation([Ljava.lang.String;@76f2bbc1,[Ljava.lang.String;@68e965f5,[Ljava.lang.String;@6f27a732),Annotation([Ljava.lang.String;@6c779568,[Ljava.lang.String;@f381794,[Ledu.cmu.lti.nlp.amr.Entity;@2cdd0d4b))
AMR:


Decoded in 23,645 microseconds
Sentence: According to a letter from the Chairman of the NSG on 17 March 2007 the Israeli presentation was offered in the context of the NSG's debate over Indian officials' bid for an exemption.

NER Entity: (organization :name (name :op "NSG"))
mkDayMonthYear(17	March	2007,17,March,2007)
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Indian"))
Spans:
Span 11-14:  17 March 2007 => (date-entity :day 17 :month 3 :year 2007)
Span 31-32:  bid => bid-01
Span 26-27:  debate => debate-01
Span 34-35:  exemption => exempt-01
Span 3-4:  letter => letter
Span 18-19:  offered => offer-01
Span 29-30:  officials => (have-org-role-91 :ARG2 official)

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 11-14:  17 March 2007 => (date-entity :day 17 :month 3 :year 2007)
Oracle Span 31-32:  bid => bid-01
Oracle Span 6-7:  Chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 21-22:  context => context
Oracle Span 26-27:  debate => debate-01
Oracle Span 34-35:  exemption => exempt-01
Oracle Span 28-29:  Indian => (country :name (name :op "India"))
Oracle Span 15-16:  Israeli => (country :name (name :op "Israel"))
Oracle Span 3-4:  letter => letter
Oracle Span 9-10:  NSG => (organization :name (name :op "NSG"))
Oracle Span 18-19:  offered => offer-01
Oracle Span 29-30:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 16-17:  presentation => presentation

Missing span: NSG => (organization :name (name :op "NSG"))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: Indian => (country :name (name :op "India"))
Missing span: Chairman => (have-org-role-91 :ARG2 chairman)
Missing span: context => context
Missing span: presentation => presentation
Dependencies:
1	According	_	VBG	VBG	_	19	prep	_	_
2	to	_	TO	TO	_	1	pcomp	_	_
3	a	_	DT	DT	_	4	det	_	_
4	letter	_	NN	NN	_	2	pobj	_	_
5	from	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	Chairman	_	NNP	NNP	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	NSG	_	NNP	NNP	_	8	pobj	_	_
11	on	_	IN	IN	_	10	prep	_	_
12	17	_	CD	CD	_	11	pobj	_	_
13	March	_	NNP	NNP	_	10	tmod	_	_
14	2007	_	CD	CD	_	13	num	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Israeli	_	JJ	JJ	_	17	amod	_	_
17	presentation	_	NN	NN	_	19	nsubjpass	_	_
18	was	_	VBD	VBD	_	19	auxpass	_	_
19	offered	_	VBN	VBN	_	0	root	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	context	_	NN	NN	_	20	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	NSG	_	NNP	NNP	_	27	poss	_	_
26	's	_	POS	POS	_	25	possessive	_	_
27	debate	_	NN	NN	_	23	pobj	_	_
28	over	_	IN	IN	_	19	prep	_	_
29	Indian	_	JJ	JJ	_	30	amod	_	_
30	officials	_	NNS	NNS	_	32	poss	_	_
31	'	_	POS	POS	_	30	possessive	_	_
32	bid	_	NN	NN	_	28	pobj	_	_
33	for	_	IN	IN	_	32	prep	_	_
34	an	_	DT	DT	_	35	det	_	_
35	exemption	_	NN	NN	_	33	pobj	_	_
36	.	_	.	.	_	19	punct	_	_

Oracle:
(b / bid-01, ARG1, e / exempt-01)
(c2 / country, name, n2 / name)
(c3 / context, poss, d / debate-01)
(c4 / country, name, n3 / name)
(d / debate-01, ARG0, o / organization)
(d / debate-01, ARG1, b / bid-01)
(d2 / date-entity, day, 17)
(d2 / date-entity, month, 3)
(d2 / date-entity, year, 2007)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, c / chairman)
(h2 / have-org-role-91, ARG1, c4 / country)
(h2 / have-org-role-91, ARG2, o4 / official)
(n / name, op, "NSG")
(n2 / name, op, "Israel")
(n3 / name, op, "India")
(o / organization, name, n / name)
(o2 / offer-01, ARG1, p / presentation)
(o2 / offer-01, time, c3 / context)
(o2 / offer-01, time, d2 / date-entity)
(p / presentation, mod, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),exemption,exempt-01,false), Span(31,32,List(1),bid,bid-01,false), Span(29,30,List(3, 2),officials,(have-org-role-91 :ARG2 official),false), Span(26,27,List(4),debate,debate-01,false), Span(18,19,List(5),offered,offer-01,false), Span(11,14,List(9, 8, 7, 6),17 March 2007,(date-entity :day 17 :month 3 :year 2007),false), Span(3,4,List(10),letter,letter,false)),Map(2 -> have-org-role-91, 5 -> offer-01, 8 -> 3, 7 -> 17, 1 -> bid-01, 4 -> debate-01, 6 -> date-entity, 9 -> 2007, 0 -> exempt-01, 10 -> letter, 3 -> official),Map(e -> exempt-01, 2 -> 2007, h -> have-org-role-91, b -> bid-01, d -> debate-01, 1 -> 17, d2 -> date-entity, o2 -> offer-01, l -> letter, o -> official, 3 -> 3))),[Ljava.lang.String;@7e9131d5,Annotation([Ljava.lang.String;@2e1d27ba,[Ljava.lang.String;@61d6015a,[Ljava.lang.String;@2525ff7e),Annotation([Ljava.lang.String;@524d6d96,[Ljava.lang.String;@152aa092,[Ledu.cmu.lti.nlp.amr.Dependency;@44a7bfbc),Annotation([Ljava.lang.String;@4ef37659,[Ljava.lang.String;@776b83cc,[Ljava.lang.String;@37858383),Annotation([Ljava.lang.String;@4e268090,[Ljava.lang.String;@1bb266b3,[Ledu.cmu.lti.nlp.amr.Entity;@306cf3ea))
AMR:
(b / bid-01, ARG0, e / exempt-01)
(b / bid-01, ARG1, h / have-org-role-91)
(d / debate-01, ARG1, h / have-org-role-91)
(d2 / date-entity, day, 1 / 17)
(d2 / date-entity, month, 3 / 3)
(d2 / date-entity, year, 2 / 2007)
(h / have-org-role-91, ARG2, o / official)
(o2 / offer-01, ARG0, l / letter)
(o2 / offer-01, ARG1, d / debate-01)
(o2 / offer-01, time, d2 / date-entity)

Decoded in 262,404 microseconds
Sentence: Among the nations that have not signed the Treaty only India and Israel would qualify for admission to the NSG under the Israeli proposal.

NER Entity: (country :name (name :op "Treaty"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 12-13:  Israel => (country :name (name :op "Israel"))
Span 2-3:  nations => nation
Span 9-10:  only => only
Span 23-24:  proposal => propose-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 16-17:  admission => admit-02
Oracle Span 11-12:  and => and
Oracle Span 10-11:  India => (country :name (name :op "India"))
Oracle Span 12-13:  Israel => (country :name (name :op "Israel"))
Oracle Span 2-3:  nations => nation
Oracle Span 19-20:  NSG => (organization :name (name :op "NSG"))
Oracle Span 9-10:  only => only
Oracle Span 23-24:  proposal => propose-01
Oracle Span 14-15:  qualify => qualify-02
Oracle Span 6-7:  signed => sign-01
Oracle Span 8-9:  Treaty => treaty

Missing span: India => (country :name (name :op "India"))
Missing span: NSG => (organization :name (name :op "NSG"))
Missing span: qualify => qualify-02
Missing span: and => and
Missing span: signed => sign-01
Missing span: Treaty => treaty
Missing span: admission => admit-02
Dependencies:
1	Among	_	IN	IN	_	15	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	nations	_	NNS	NNS	_	1	pobj	_	_
4	that	_	WDT	WDT	_	7	nsubj	_	_
5	have	_	VBP	VBP	_	7	aux	_	_
6	not	_	RB	RB	_	7	neg	_	_
7	signed	_	VBN	VBN	_	3	rcmod	_	_
8	the	_	DT	DT	_	9	det	_	_
9	Treaty	_	NNP	NNP	_	7	dobj	_	_
10	only	_	RB	RB	_	7	advmod	_	_
11	India	_	NNP	NNP	_	15	nsubj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	Israel	_	NNP	NNP	_	11	conj	_	_
14	would	_	MD	MD	_	15	aux	_	_
15	qualify	_	VB	VB	_	0	root	_	_
16	for	_	IN	IN	_	15	prep	_	_
17	admission	_	NN	NN	_	16	pobj	_	_
18	to	_	TO	TO	_	15	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	NSG	_	NNP	NNP	_	18	pobj	_	_
21	under	_	IN	IN	_	15	prep	_	_
22	the	_	DT	DT	_	24	det	_	_
23	Israeli	_	JJ	JJ	_	24	amod	_	_
24	proposal	_	NN	NN	_	21	pobj	_	_
25	.	_	.	.	_	15	punct	_	_

Oracle:
(a / and, mod, o / only)
(a / and, op, c / country)
(a / and, op, c2 / country)
(a2 / admit-02, ARG0, p / propose-01)
(a2 / admit-02, ARG2, o2 / organization)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "India")
(n2 / name, op, "Israel")
(n4 / name, op, "NSG")
(o2 / organization, name, n4 / name)
(p / propose-01, ARG0, c2 / country)
(q / qualify-02, ARG1, a / and)
(q / qualify-02, ARG2, a2 / admit-02)
(s / sign-01, ARG0, n3 / nation)
(s / sign-01, ARG1, t / treaty)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),proposal,propose-01,false), Span(12,13,List(3, 2, 1),Israel,(country :name (name :op "Israel")),false), Span(9,10,List(4),only,only,false), Span(2,3,List(5),nations,nation,false)),Map(2 -> name, 5 -> nation, 1 -> country, 4 -> only, 0 -> propose-01, 3 -> "Israel"),Map(n -> name, p -> propose-01, c -> country, o -> only, n2 -> nation))),[Ljava.lang.String;@2beee7ff,Annotation([Ljava.lang.String;@5136d012,[Ljava.lang.String;@5939a379,[Ljava.lang.String;@e1de817),Annotation([Ljava.lang.String;@52102734,[Ljava.lang.String;@3541cb24,[Ledu.cmu.lti.nlp.amr.Dependency;@2177849e),Annotation([Ljava.lang.String;@40cb8df7,[Ljava.lang.String;@13b13b5d,[Ljava.lang.String;@2892dae4),Annotation([Ljava.lang.String;@355ce81c,[Ljava.lang.String;@29647f75,[Ledu.cmu.lti.nlp.amr.Entity;@3315d2d7))
AMR:
(c / country, name, n / name)
(n / name, op, "Israel")
(o / only, op, p / propose-01)
(p / propose-01, ARG0, c / country)
(p / propose-01, ARG1, n2 / nation)

Decoded in 91,023 microseconds
Sentence: The Israeli plan offered 12 criteria for allowing nuclear trade with non-treaty states.

NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 7-8:  allowing => allow-01
Span 8-9:  nuclear => nucleus
Span 3-4:  offered => offer-01
Span 9-10:  trade => trade-01
Span 13-14:  treaty => treaty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  12 => 12
Oracle Span 7-8:  allowing => allow-01
Oracle Span 5-6:  criteria => criterion
Oracle Span 1-2:  Israeli => (country :name (name :op "Israel"))
Oracle Span 8-9:  nuclear => nucleus
Oracle Span 3-4:  offered => offer-01
Oracle Span 2-3:  plan => plan-01
Oracle Span 14-15:  states => state
Oracle Span 9-10:  trade => trade-01
Oracle Span 13-14:  treaty => treaty

Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: criteria => criterion
Missing span: states => state
Missing span: 12 => 12
Missing span: plan => plan-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Israeli	_	JJ	JJ	_	3	amod	_	_
3	plan	_	NN	NN	_	4	nsubj	_	_
4	offered	_	VBD	VBD	_	0	root	_	_
5	12	_	CD	CD	_	6	num	_	_
6	criteria	_	NNS	NNS	_	4	dobj	_	_
7	for	_	IN	IN	_	4	prep	_	_
8	allowing	_	VBG	VBG	_	7	pcomp	_	_
9	nuclear	_	JJ	JJ	_	10	amod	_	_
10	trade	_	NN	NN	_	8	dobj	_	_
11	with	_	IN	IN	_	8	prep	_	_
12	non-treaty	_	JJ	JJ	_	13	amod	_	_
13	states	_	NNS	NNS	_	11	pobj	_	_
14	.	_	.	.	_	4	punct	_	_

Oracle:
(a / allow-01, ARG1, t / trade-01)
(c / country, name, n / name)
(c2 / criterion, purpose, a / allow-01)
(c2 / criterion, quant, 1 / 12)
(n / name, op, "Israel")
(o / offer-01, ARG0, p / plan-01)
(o / offer-01, ARG1, c2 / criterion)
(p / plan-01, ARG0, c / country)
(s / state, mod, t2 / treaty)
(t / trade-01, ARG2, s / state)
(t / trade-01, mod, n2 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),treaty,treaty,false), Span(9,10,List(1),trade,trade-01,false), Span(8,9,List(2),nuclear,nucleus,false), Span(7,8,List(3),allowing,allow-01,false), Span(3,4,List(4),offered,offer-01,false)),Map(2 -> nucleus, 1 -> trade-01, 4 -> offer-01, 0 -> treaty, 3 -> allow-01),Map(n -> nucleus, t -> treaty, a -> allow-01, t2 -> trade-01, o -> offer-01))),[Ljava.lang.String;@d6e7bab,Annotation([Ljava.lang.String;@5fa07e12,[Ljava.lang.String;@55b53d44,[Ljava.lang.String;@482bce4f),Annotation([Ljava.lang.String;@366647c2,[Ljava.lang.String;@6a6afff2,[Ledu.cmu.lti.nlp.amr.Dependency;@1649b0e6),Annotation([Ljava.lang.String;@865dd6,[Ljava.lang.String;@4da4253,[Ljava.lang.String;@3972a855),Annotation([Ljava.lang.String;@62e7f11d,[Ljava.lang.String;@503d687a,[Ledu.cmu.lti.nlp.amr.Entity;@6a370f4))
AMR:
(a / allow-01, ARG1, t2 / trade-01)
(o / offer-01, ARG1, t / treaty)
(o / offer-01, ARG2, a / allow-01)
(t2 / trade-01, ARG1, n / nucleus)

Decoded in 40,290 microseconds
Sentence: 1 criterion indicated Israel's status as an undeclared nuclear weapons state and said a State should be allowed to engage in nuclear trade if the State applies stringent physical protection, control and accountancy measures to all nuclear weapons, nuclear facilities, source material and special nuclear material in the State's territory.

NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 37-38:  all => all
Span 18-19:  allowed => allow-01
Span 27-28:  applies => apply-02
Span 32-33:  control => control-01
Span 20-21:  engage => engage-01
Span 42-43:  facilities => facility
Span 2-3:  indicated => indicate-01
Span 3-4:  Israel => (country :name (name :op "Israel"))
Span 49-50:  material => material
Span 45-46:  material => material
Span 35-36:  measures => measure
Span 48-49:  nuclear => nucleus
Span 41-42:  nuclear => nucleus
Span 38-39:  nuclear => nucleus
Span 22-23:  nuclear => nucleus
Span 9-10:  nuclear => nucleus
Span 29-30:  physical => physical
Span 30-31:  protection => protect-01
Span 13-14:  said => say-01
Span 16-17:  should => recommend-01
Span 47-48:  special => special
Span 5-6:  status => status
Span 54-55:  territory => territory
Span 23-24:  trade => trade-01
Span 8-9:  undeclared => (declare-02 :polarity -)

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 0-1:  1 => 1
Oracle Span 34-35:  accountancy => accountancy
Oracle Span 37-38:  all => all
Oracle Span 18-19:  allowed => allow-01
Oracle Span 12-13:  and => and
Oracle Span 33-34:  and => and
Oracle Span 46-47:  and => and
Oracle Span 27-28:  applies => apply-02
Oracle Span 32-33:  control => control-01
Oracle Span 1-2:  criterion => criterion
Oracle Span 20-21:  engage => engage-01
Oracle Span 42-43:  facilities => facility
Oracle Span 2-3:  indicated => indicate-01
Oracle Span 3-4:  Israel => (country :name (name :op "Israel"))
Oracle Span 45-46:  material => material
Oracle Span 49-50:  material => material
Oracle Span 35-36:  measures => measure
Oracle Span 9-10:  nuclear => nucleus
Oracle Span 29-30:  physical => physical
Oracle Span 30-31:  protection => protect-01
Oracle Span 13-14:  said => say-01
Oracle Span 16-17:  should => recommend-01
Oracle Span 44-45:  source => source
Oracle Span 47-48:  special => special
Oracle Span 11-12:  state => state
Oracle Span 15-16:  State => state
Oracle Span 5-6:  status => status
Oracle Span 28-29:  stringent => stringent
Oracle Span 54-55:  territory => territory
Oracle Span 23-24:  trade => trade-01
Oracle Span 8-9:  undeclared => (declare-01 :polarity -)
Oracle Span 10-11:  weapons => weapon
Oracle Span 39-40:  weapons => weapon

Extra span: nuclear => nucleus
Extra span: nuclear => nucleus
Extra span: nuclear => nucleus
Extra span: nuclear => nucleus
Incorrect span: undeclared => (declare-02 :polarity -)
Missing span: and => and
Missing span: and => and
Missing span: source => source
Missing span: weapons => weapon
Missing span: and => and
Missing span: accountancy => accountancy
Missing span: stringent => stringent
Missing span: state => state
Missing span: State => state
Missing span: weapons => weapon
Missing span: criterion => criterion
Missing span: 1 => 1
Missing span: undeclared => (declare-01 :polarity -)
Dependencies:
1	1	_	CD	CD	_	2	num	_	_
2	criterion	_	NN	NN	_	3	nsubj	_	_
3	indicated	_	VBD	VBD	_	0	root	_	_
4	Israel	_	NNP	NNP	_	6	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	status	_	NN	NN	_	3	dobj	_	_
7	as	_	IN	IN	_	3	prep	_	_
8	an	_	DT	DT	_	12	det	_	_
9	undeclared	_	JJ	JJ	_	12	amod	_	_
10	nuclear	_	JJ	JJ	_	12	amod	_	_
11	weapons	_	NNS	NNS	_	12	nn	_	_
12	state	_	NN	NN	_	7	pobj	_	_
13	and	_	CC	CC	_	3	cc	_	_
14	said	_	VBD	VBD	_	3	conj	_	_
15	a	_	DT	DT	_	16	det	_	_
16	State	_	NNP	NNP	_	19	nsubjpass	_	_
17	should	_	MD	MD	_	19	aux	_	_
18	be	_	VB	VB	_	19	auxpass	_	_
19	allowed	_	VBN	VBN	_	14	ccomp	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	engage	_	VB	VB	_	19	xcomp	_	_
22	in	_	IN	IN	_	21	prep	_	_
23	nuclear	_	JJ	JJ	_	24	amod	_	_
24	trade	_	NN	NN	_	22	pobj	_	_
25	if	_	IN	IN	_	28	mark	_	_
26	the	_	DT	DT	_	27	det	_	_
27	State	_	NNP	NNP	_	28	nsubj	_	_
28	applies	_	VBZ	VBZ	_	21	advcl	_	_
29	stringent	_	JJ	JJ	_	36	amod	_	_
30	physical	_	JJ	JJ	_	36	amod	_	_
31	protection	_	NN	NN	_	36	nn	_	_
32	,	_	,	,	_	31	punct	_	_
33	control	_	NN	NN	_	31	conj	_	_
34	and	_	CC	CC	_	31	cc	_	_
35	accountancy	_	NN	NN	_	31	conj	_	_
36	measures	_	NNS	NNS	_	28	dobj	_	_
37	to	_	TO	TO	_	28	prep	_	_
38	all	_	DT	DT	_	40	det	_	_
39	nuclear	_	JJ	JJ	_	40	amod	_	_
40	weapons	_	NNS	NNS	_	37	pobj	_	_
41	,	_	,	,	_	40	punct	_	_
42	nuclear	_	JJ	JJ	_	43	amod	_	_
43	facilities	_	NNS	NNS	_	40	conj	_	_
44	,	_	,	,	_	40	punct	_	_
45	source	_	NN	NN	_	46	nn	_	_
46	material	_	NN	NN	_	40	conj	_	_
47	and	_	CC	CC	_	40	cc	_	_
48	special	_	JJ	JJ	_	50	amod	_	_
49	nuclear	_	JJ	JJ	_	50	amod	_	_
50	material	_	NN	NN	_	40	conj	_	_
51	in	_	IN	IN	_	50	prep	_	_
52	the	_	DT	DT	_	53	det	_	_
53	State	_	NNP	NNP	_	55	poss	_	_
54	's	_	POS	POS	_	53	possessive	_	_
55	territory	_	NN	NN	_	51	pobj	_	_
56	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, i / indicate-01)
(a / and, op, s3 / say-01)
(a2 / allow-01, ARG1, e / engage-01)
(a2 / allow-01, condition, a3 / apply-02)
(a3 / apply-02, ARG0, s4 / state)
(a3 / apply-02, ARG1, a4 / and)
(a3 / apply-02, ARG2, a6 / and)
(a4 / and, op, m2 / measure)
(a4 / and, op, p / protect-01)
(a6 / and, op, f / facility)
(a6 / and, op, m3 / material)
(a6 / and, op, m4 / material)
(a6 / and, op, w2 / weapon)
(c / criterion, quant, 1 / 1)
(c2 / country, name, n / name)
(d / declare-01, ARG0, s2 / state)
(d / declare-01, polarity, -)
(e / engage-01, ARG1, s4 / state)
(e / engage-01, ARG2, t / trade-01)
(f / facility, location, t2 / territory)
(f / facility, mod, n2 / nucleus)
(f / facility, quant, a7 / all)
(i / indicate-01, ARG0, c / criterion)
(i / indicate-01, ARG1, s / status)
(m2 / measure, mod, a5 / accountancy)
(m3 / material, location, t2 / territory)
(m3 / material, mod, s6 / source)
(m3 / material, quant, a7 / all)
(m4 / material, location, t2 / territory)
(m4 / material, mod, n2 / nucleus)
(m4 / material, mod, s7 / special)
(m4 / material, quant, a7 / all)
(n / name, op, "Israel")
(p / protect-01, mod, p2 / physical)
(p / protect-01, mod, s5 / stringent)
(r / recommend-01, ARG1, a2 / allow-01)
(s / status, poss, c2 / country)
(s / status, prep-as, s2 / state)
(s2 / state, mod, w / weapon)
(s3 / say-01, ARG0, c / criterion)
(s3 / say-01, ARG1, r / recommend-01)
(t / trade-01, mod, n2 / nucleus)
(t2 / territory, poss, s4 / state)
(w / weapon, mod, n2 / nucleus)
(w2 / weapon, location, t2 / territory)
(w2 / weapon, mod, n2 / nucleus)
(w2 / weapon, quant, a7 / all)

Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(0),territory,territory,false), Span(49,50,List(1),material,material,false), Span(48,49,List(2),nuclear,nucleus,false), Span(47,48,List(3),special,special,false), Span(45,46,List(4),material,material,false), Span(42,43,List(5),facilities,facility,false), Span(41,42,List(6),nuclear,nucleus,false), Span(38,39,List(7),nuclear,nucleus,false), Span(37,38,List(8),all,all,false), Span(35,36,List(9),measures,measure,false), Span(32,33,List(10),control,control-01,false), Span(30,31,List(11),protection,protect-01,false), Span(29,30,List(12),physical,physical,false), Span(27,28,List(13),applies,apply-02,false), Span(23,24,List(14),trade,trade-01,false), Span(22,23,List(15),nuclear,nucleus,false), Span(20,21,List(16),engage,engage-01,false), Span(18,19,List(17),allowed,allow-01,false), Span(16,17,List(18),should,recommend-01,false), Span(13,14,List(19),said,say-01,false), Span(9,10,List(20),nuclear,nucleus,false), Span(8,9,List(22, 21),undeclared,(declare-02 :polarity -),false), Span(5,6,List(23),status,status,false), Span(3,4,List(26, 25, 24),Israel,(country :name (name :op "Israel")),false), Span(2,3,List(27),indicated,indicate-01,false)),Map(2 -> nucleus, 5 -> facility, 27 -> indicate-01, 12 -> physical, 8 -> all, 15 -> nucleus, 21 -> declare-02, 18 -> recommend-01, 24 -> country, 7 -> nucleus, 1 -> material, 17 -> allow-01, 23 -> status, 26 -> "Israel", 4 -> material, 11 -> protect-01, 14 -> trade-01, 20 -> nucleus, 6 -> nucleus, 9 -> measure, 0 -> territory, 22 -> -, 16 -> engage-01, 19 -> say-01, 10 -> control-01, 3 -> special, 25 -> name, 13 -> apply-02),Map(m3 -> measure, e -> engage-01, n -> nucleus, s2 -> say-01, t -> territory, m2 -> material, p2 -> physical, n4 -> nucleus, a3 -> allow-01, s -> special, m -> material, d -> declare-02, p -> protect-01, a -> all, n3 -> nucleus, n6 -> name, t2 -> trade-01, i -> indicate-01, a2 -> apply-02, r -> recommend-01, c -> control-01, s3 -> status, f -> facility, n2 -> nucleus, c2 -> country, n5 -> nucleus))),[Ljava.lang.String;@2abf4075,Annotation([Ljava.lang.String;@770d3326,[Ljava.lang.String;@4cc8eb05,[Ljava.lang.String;@51f116b8),Annotation([Ljava.lang.String;@19d481b,[Ljava.lang.String;@1f97cf0d,[Ledu.cmu.lti.nlp.amr.Dependency;@140c9f39),Annotation([Ljava.lang.String;@4d910fd6,[Ljava.lang.String;@26275bef,[Ljava.lang.String;@7690781),Annotation([Ljava.lang.String;@77eca502,[Ljava.lang.String;@3246fb96,[Ledu.cmu.lti.nlp.amr.Entity;@2e222612))
AMR:
(a2 / apply-02, ARG0, m / material)
(a2 / apply-02, ARG1, m3 / measure)
(a3 / allow-01, ARG1, e / engage-01)
(c / control-01, ARG1, m2 / material)
(c / control-01, instrument, m3 / measure)
(c2 / country, name, n6 / name)
(d / declare-02, ARG1, s2 / say-01)
(d / declare-02, polarity, -)
(e / engage-01, ARG1, n5 / nucleus)
(e / engage-01, ARG2, t2 / trade-01)
(e / engage-01, condition, a2 / apply-02)
(f / facility, mod, n2 / nucleus)
(f / facility, mod, n3 / nucleus)
(f / facility, mod, n4 / nucleus)
(i / indicate-01, ARG1, s3 / status)
(m / material, mod, n / nucleus)
(m / material, mod, s / special)
(m / material, poss, t / territory)
(m3 / measure, mod, a / all)
(n6 / name, op, "Israel")
(p / protect-01, ARG0, n4 / nucleus)
(p / protect-01, ARG1, p2 / physical)
(r / recommend-01, ARG1, a3 / allow-01)
(s2 / say-01, ARG1, r / recommend-01)
(s2 / say-01, concession, i / indicate-01)
(s3 / status, poss, c2 / country)
(t2 / trade-01, ARG1, n4 / nucleus)

Decoded in 1,583,981 microseconds
Sentence: The documents circulated on Capitol Hill in September 2007 as the Bush administration worked toward an agreement with Indian officials.

NER Entity: (country :name (name :op "Capitol" :op "Hill"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 12-13:  administration => administrate-01
Span 16-17:  agreement => agree-01
Span 11-12:  Bush => (person :name (name :op "Bush"))
Span 4-6:  Capitol Hill => (country :name (name :op "Capitol" :op "Hill"))
Span 1-2:  documents => document
Span 19-20:  officials => (have-org-role-91 :ARG2 official)
Span 7-9:  September 2007 => (date-entity :month 9 :year 2007)
Span 13-14:  worked => work-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 12-13:  administration => administrate-01
Oracle Span 16-17:  agreement => agree-01
Oracle Span 11-12:  Bush => (person :name (name :op "Bush"))
Oracle Span 4-6:  Capitol Hill => (location :name (name :op "Hill" :op "Capitol"))
Oracle Span 2-3:  circulated => circulate-01
Oracle Span 1-2:  documents => document
Oracle Span 18-19:  Indian => (country :name (name :op "India"))
Oracle Span 19-20:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 7-9:  September 2007 => (date-entity :month 9 :year 2007)
Oracle Span 14-15:  toward => toward
Oracle Span 13-14:  worked => work-06

Incorrect span: worked => work-01
Incorrect span: Capitol Hill => (country :name (name :op "Capitol" :op "Hill"))
Missing span: Capitol Hill => (location :name (name :op "Hill" :op "Capitol"))
Missing span: Indian => (country :name (name :op "India"))
Missing span: circulated => circulate-01
Missing span: worked => work-06
Missing span: toward => toward
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	documents	_	NNS	NNS	_	3	nsubj	_	_
3	circulated	_	VBD	VBD	_	0	root	_	_
4	on	_	IN	IN	_	3	prep	_	_
5	Capitol	_	NNP	NNP	_	6	nn	_	_
6	Hill	_	NNP	NNP	_	4	pobj	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	September	_	NNP	NNP	_	7	pobj	_	_
9	2007	_	CD	CD	_	8	num	_	_
10	as	_	IN	IN	_	14	mark	_	_
11	the	_	DT	DT	_	13	det	_	_
12	Bush	_	NNP	NNP	_	13	nn	_	_
13	administration	_	NN	NN	_	14	nsubj	_	_
14	worked	_	VBD	VBD	_	3	advcl	_	_
15	toward	_	IN	IN	_	14	prep	_	_
16	an	_	DT	DT	_	17	det	_	_
17	agreement	_	NN	NN	_	15	pobj	_	_
18	with	_	IN	IN	_	14	prep	_	_
19	Indian	_	JJ	JJ	_	20	amod	_	_
20	officials	_	NNS	NNS	_	18	pobj	_	_
21	.	_	.	.	_	3	punct	_	_

Oracle:
(c / circulate-01, ARG1, d / document)
(c / circulate-01, location, l / location)
(c / circulate-01, time, d2 / date-entity)
(c / circulate-01, time, w / work-06)
(c2 / country, name, n3 / name)
(d2 / date-entity, month, 9)
(d2 / date-entity, year, 2007)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(l / location, name, n / name)
(n / name, op, "Capitol")
(n / name, op, "Hill")
(n2 / name, op, "Bush")
(n3 / name, op, "India")
(p / person, name, n2 / name)
(w / work-06, ARG1, t / toward)
(w / work-06, ARG4, a2 / agree-01)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),officials,(have-org-role-91 :ARG2 official),false), Span(16,17,List(2),agreement,agree-01,false), Span(13,14,List(3),worked,work-01,false), Span(12,13,List(4),administration,administrate-01,false), Span(11,12,List(7, 6, 5),Bush,(person :name (name :op "Bush")),false), Span(7,9,List(10, 9, 8),September 2007,(date-entity :month 9 :year 2007),false), Span(4,6,List(14, 13, 12, 11),Capitol Hill,(country :name (name :op "Capitol" :op "Hill")),false), Span(1,2,List(15),documents,document,false)),Map(2 -> agree-01, 5 -> person, 12 -> name, 15 -> document, 8 -> date-entity, 7 -> "Bush", 1 -> official, 4 -> administrate-01, 11 -> country, 14 -> "Hill", 6 -> name, 0 -> have-org-role-91, 9 -> 9, 3 -> work-01, 10 -> 2007, 13 -> "Capitol"),Map(w -> work-01, n -> name, h -> have-org-role-91, 2 -> 2007, d -> date-entity, p -> person, a -> agree-01, d2 -> document, a2 -> administrate-01, c -> country, 9 -> 9, o -> official, n2 -> name))),[Ljava.lang.String;@61386958,Annotation([Ljava.lang.String;@73ee04c8,[Ljava.lang.String;@7671cb68,[Ljava.lang.String;@49dc7102),Annotation([Ljava.lang.String;@6b8ca3c8,[Ljava.lang.String;@68c72235,[Ledu.cmu.lti.nlp.amr.Dependency;@10959ece),Annotation([Ljava.lang.String;@3a6bb9bf,[Ljava.lang.String;@34f7cfd9,[Ljava.lang.String;@65f095f8),Annotation([Ljava.lang.String;@59af0466,[Ljava.lang.String;@3e6ef8ad,[Ledu.cmu.lti.nlp.amr.Entity;@346d61be))
AMR:
(a2 / administrate-01, ARG1, c / country)
(c / country, name, n2 / name)
(d / date-entity, month, 9 / 9)
(d / date-entity, part, c / country)
(d / date-entity, year, 2 / 2007)
(d2 / document, time, d / date-entity)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Bush")
(n2 / name, op, "Capitol")
(n2 / name, op, "Hill")
(p / person, name, n / name)
(w / work-01, ARG0, p / person)
(w / work-01, ARG1, a2 / administrate-01)
(w / work-01, manner, a / agree-01)

Decoded in 485,326 microseconds
Sentence: Executive Director of the Arms Control Association in Washington Daryl Kimball stated the Israeli document could affect the debate over India.

NER Entity: (organization :name (name :op "Arms" :op "Control" :op "Association"))
NER Entity: (country :name (name :op "Washington"))
NER Entity: (person :name (name :op "Daryl" :op "Kimball"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 16-17:  affect => affect-01
Span 4-7:  Arms Control Association => (organization :name (name :op "Arms" :op "Control" :op "Association"))
Span 15-16:  could => possible
Span 9-11:  Daryl Kimball => (person :name (name :op "Kimball" :op "Daryl"))
Span 18-19:  debate => debate-01
Span 14-15:  document => document
Span 0-1:  Executive => executive

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 16-17:  affect => affect-01
Oracle Span 4-7:  Arms Control Association => (organization :name (name :op "Association" :op "Control" :op "Arms"))
Oracle Span 15-16:  could => possible
Oracle Span 9-11:  Daryl Kimball => (person :name (name :op "Kimball" :op "Daryl"))
Oracle Span 18-19:  debate => debate-01
Oracle Span 1-2:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 14-15:  document => document
Oracle Span 0-1:  Executive => executive
Oracle Span 20-21:  India => (country :name (name :op "India"))
Oracle Span 13-14:  Israeli => (country :name (name :op "Israel"))
Oracle Span 11-12:  stated => state-01
Oracle Span 8-9:  Washington => (city :name (name :op "Washington"))

Incorrect span: Arms Control Association => (organization :name (name :op "Arms" :op "Control" :op "Association"))
Missing span: Arms Control Association => (organization :name (name :op "Association" :op "Control" :op "Arms"))
Missing span: Washington => (city :name (name :op "Washington"))
Missing span: India => (country :name (name :op "India"))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: stated => state-01
Missing span: Director => (have-org-role-91 :ARG2 director)
Dependencies:
1	Executive	_	NNP	NNP	_	2	nn	_	_
2	Director	_	NNP	NNP	_	12	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	7	det	_	_
5	Arms	_	NNP	NNP	_	7	nn	_	_
6	Control	_	NNP	NNP	_	7	nn	_	_
7	Association	_	NNP	NNP	_	3	pobj	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	Washington	_	NNP	NNP	_	11	nn	_	_
10	Daryl	_	NNP	NNP	_	11	nn	_	_
11	Kimball	_	NNP	NNP	_	8	pobj	_	_
12	stated	_	VBD	VBD	_	0	root	_	_
13	the	_	DT	DT	_	15	det	_	_
14	Israeli	_	JJ	JJ	_	15	amod	_	_
15	document	_	NN	NN	_	17	nsubj	_	_
16	could	_	MD	MD	_	17	aux	_	_
17	affect	_	VB	VB	_	12	ccomp	_	_
18	the	_	DT	DT	_	19	det	_	_
19	debate	_	NN	NN	_	17	dobj	_	_
20	over	_	IN	IN	_	19	prep	_	_
21	India	_	NNP	NNP	_	20	pobj	_	_
22	.	_	.	.	_	12	punct	_	_

Oracle:
(a / affect-01, ARG0, d2 / document)
(a / affect-01, ARG1, d3 / debate-01)
(a / affect-01, mod, p / possible)
(c / city, name, n3 / name)
(c2 / country, name, n4 / name)
(c3 / country, name, n5 / name)
(d / director, mod, e / executive)
(d2 / document, mod, c2 / country)
(d3 / debate-01, ARG1, c3 / country)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, d / director)
(n / name, op, "Daryl")
(n / name, op, "Kimball")
(n2 / name, op, "Arms")
(n2 / name, op, "Association")
(n2 / name, op, "Control")
(n3 / name, op, "Washington")
(n4 / name, op, "Israel")
(n5 / name, op, "India")
(o / organization, location, c / city)
(o / organization, name, n2 / name)
(p2 / person, name, n / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, a / affect-01)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),debate,debate-01,false), Span(16,17,List(1),affect,affect-01,false), Span(15,16,List(2),could,possible,false), Span(14,15,List(3),document,document,false), Span(9,11,List(7, 6, 5, 4),Daryl Kimball,(person :name (name :op "Kimball" :op "Daryl")),false), Span(4,7,List(12, 11, 10, 9, 8),Arms Control Association,(organization :name (name :op "Arms" :op "Control" :op "Association")),false), Span(0,1,List(13),Executive,executive,false)),Map(2 -> possible, 5 -> name, 12 -> "Association", 8 -> organization, 7 -> "Daryl", 1 -> affect-01, 4 -> person, 11 -> "Control", 6 -> "Kimball", 0 -> debate-01, 9 -> name, 3 -> document, 10 -> "Arms", 13 -> executive),Map(e -> executive, n -> name, p2 -> person, d -> debate-01, p -> possible, a -> affect-01, d2 -> document, o -> organization, n2 -> name))),[Ljava.lang.String;@55536d9e,Annotation([Ljava.lang.String;@747edf66,[Ljava.lang.String;@3d1cfad4,[Ljava.lang.String;@62230c58),Annotation([Ljava.lang.String;@2cd2a21f,[Ljava.lang.String;@2e55dd0c,[Ledu.cmu.lti.nlp.amr.Dependency;@74455848),Annotation([Ljava.lang.String;@e7edb54,[Ljava.lang.String;@378542de,[Ljava.lang.String;@3738449f),Annotation([Ljava.lang.String;@69e1dd28,[Ljava.lang.String;@11bd0f3b,[Ledu.cmu.lti.nlp.amr.Entity;@c333c60))
AMR:
(a / affect-01, ARG0, d2 / document)
(a / affect-01, ARG1, d / debate-01)
(d / debate-01, ARG0, p2 / person)
(d / debate-01, ARG1, e / executive)
(n / name, op, "Daryl")
(n / name, op, "Kimball")
(n2 / name, op, "Arms")
(n2 / name, op, "Association")
(n2 / name, op, "Control")
(o / organization, name, n2 / name)
(o / organization, poss, p2 / person)
(p / possible, domain, a / affect-01)
(p2 / person, name, n / name)

Decoded in 146,519 microseconds
Sentence: Kimball stated --

NER Entity: (person :name (name :op "Kimball"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Kimball => (person :name (name :op "Kimball"))
Oracle Span 1-2:  stated => state-01

Incorrect span:  => amr-empty
Missing span: Kimball => (person :name (name :op "Kimball"))
Missing span: stated => state-01
Dependencies:
1	Kimball	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	--	_	:	:	_	2	punct	_	_

Oracle:
(n / name, op, "Kimball")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@79da8dc5,Annotation([Ljava.lang.String;@1eb5174b,[Ljava.lang.String;@67080771,[Ljava.lang.String;@72cde7cc),Annotation([Ljava.lang.String;@5fd4f8f5,[Ljava.lang.String;@696da30b,[Ledu.cmu.lti.nlp.amr.Dependency;@4e7912d8),Annotation([Ljava.lang.String;@53976f5c,[Ljava.lang.String;@2bfc268b,[Ljava.lang.String;@2f8dad04),Annotation([Ljava.lang.String;@29e495ff,[Ljava.lang.String;@41e1e210,[Ledu.cmu.lti.nlp.amr.Entity;@be35cd9))
AMR:


Decoded in 5,279 microseconds
Sentence: The dynamics at the NSG are that officials from the countries do not want to be obstacles to India which is the largest country and the United States which is the most powerful country.

NER Entity: (organization :name (name :op "NSG"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "United" :op "States"))
Spans:
Span 10-11:  countries => country
Span 33-34:  country => country
Span 23-24:  country => country
Span 16-17:  obstacles => obstacle
Span 7-8:  officials => (have-org-role-91 :ARG2 official)
Span 32-33:  powerful => powerful
Span 26-28:  United States => (country :name (name :op "United" :op "States"))
Span 13-14:  want => want-01

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 24-25:  and => and
Oracle Span 10-11:  countries => country
Oracle Span 23-24:  country => country
Oracle Span 33-34:  country => country
Oracle Span 1-2:  dynamics => dynamic
Oracle Span 18-19:  India => (name :op "India")
Oracle Span 22-23:  largest => (large :degree most)
Oracle Span 31-32:  most => most
Oracle Span 4-5:  NSG => (organization :name (name :op "NSG"))
Oracle Span 16-17:  obstacles => obstacle
Oracle Span 7-8:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 32-33:  powerful => powerful
Oracle Span 26-28:  United States => (name :op "States" :op "United")
Oracle Span 13-14:  want => want-01

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: India => (name :op "India")
Missing span: United States => (name :op "States" :op "United")
Missing span: NSG => (organization :name (name :op "NSG"))
Missing span: dynamics => dynamic
Missing span: and => and
Missing span: most => most
Missing span: largest => (large :degree most)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	dynamics	_	NNS	NNS	_	6	nsubj	_	_
3	at	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	NSG	_	NNP	NNP	_	3	pobj	_	_
6	are	_	VBP	VBP	_	0	root	_	_
7	that	_	IN	IN	_	14	mark	_	_
8	officials	_	NNS	NNS	_	14	nsubj	_	_
9	from	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	countries	_	NNS	NNS	_	9	pobj	_	_
12	do	_	VBP	VBP	_	14	aux	_	_
13	not	_	RB	RB	_	14	neg	_	_
14	want	_	VB	VB	_	6	ccomp	_	_
15	to	_	TO	TO	_	17	aux	_	_
16	be	_	VB	VB	_	17	cop	_	_
17	obstacles	_	NNS	NNS	_	14	xcomp	_	_
18	to	_	TO	TO	_	17	prep	_	_
19	India	_	NNP	NNP	_	18	pobj	_	_
20	which	_	WDT	WDT	_	24	nsubj	_	_
21	is	_	VBZ	VBZ	_	24	cop	_	_
22	the	_	DT	DT	_	24	det	_	_
23	largest	_	JJS	JJS	_	24	amod	_	_
24	country	_	NN	NN	_	17	rcmod	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	the	_	DT	DT	_	28	det	_	_
27	United	_	NNP	NNP	_	28	nn	_	_
28	States	_	NNPS	NNPS	_	24	conj	_	_
29	which	_	WDT	WDT	_	34	nsubj	_	_
30	is	_	VBZ	VBZ	_	34	cop	_	_
31	the	_	DT	DT	_	34	det	_	_
32	most	_	RBS	RBS	_	33	advmod	_	_
33	powerful	_	JJ	JJ	_	34	amod	_	_
34	country	_	NN	NN	_	28	rcmod	_	_
35	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c2 / country)
(a / and, op, c4 / country)
(c2 / country, name, n / name)
(c4 / country, domain, c5 / country)
(c4 / country, name, n2 / name)
(c5 / country, mod, p / powerful)
(d / dynamic, domain, w / want-01)
(d / dynamic, location, o3 / organization)
(h / have-org-role-91, ARG2, o / official)
(l / large, degree, m / most)
(n / name, op, "India")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "NSG")
(o2 / obstacle, prep-to, a / and)
(o3 / organization, name, n3 / name)
(p / powerful, degree, m2 / most)
(w / want-01, ARG1, o2 / obstacle)

Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),country,country,false), Span(32,33,List(1),powerful,powerful,false), Span(26,28,List(5, 4, 3, 2),United States,(country :name (name :op "United" :op "States")),false), Span(23,24,List(6),country,country,false), Span(16,17,List(7),obstacles,obstacle,false), Span(13,14,List(8),want,want-01,false), Span(10,11,List(9),countries,country,false), Span(7,8,List(11, 10),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> country, 5 -> "States", 8 -> want-01, 7 -> obstacle, 1 -> powerful, 11 -> official, 4 -> "United", 6 -> country, 9 -> country, 0 -> country, 10 -> have-org-role-91, 3 -> name),Map(w -> want-01, n -> name, h -> have-org-role-91, c4 -> country, p -> powerful, c3 -> country, o2 -> official, c -> country, o -> obstacle, c2 -> country))),[Ljava.lang.String;@4944252c,Annotation([Ljava.lang.String;@44821a96,[Ljava.lang.String;@a3d8174,[Ljava.lang.String;@1ba9117e),Annotation([Ljava.lang.String;@732c2a62,[Ljava.lang.String;@272ed83b,[Ledu.cmu.lti.nlp.amr.Dependency;@41fecb8b),Annotation([Ljava.lang.String;@120f102b,[Ljava.lang.String;@625732,[Ljava.lang.String;@51dcb805),Annotation([Ljava.lang.String;@66498326,[Ljava.lang.String;@cad498c,[Ledu.cmu.lti.nlp.amr.Entity;@1e6454ec))
AMR:
(c / country, mod, p / powerful)
(c2 / country, name, n / name)
(c3 / country, name, o / obstacle)
(c4 / country, mod, o / obstacle)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o2 / official)
(n / name, op, "States")
(n / name, op, "United")
(o / obstacle, op, h / have-org-role-91)
(p / powerful, op, h / have-org-role-91)
(w / want-01, ARG1, o / obstacle)

Decoded in 509,504 microseconds
Sentence: Consensus on India will be difficult to reach when the NSG meets in November 2007.

NER Entity: (country :name (name :op "India"))
NER Entity: (organization :name (name :op "NSG"))
Spans:
Span 5-6:  difficult => difficult
Span 13-15:  November 2007 => (date-entity :month 11 :year 2007)
Span 7-8:  reach => reach-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Consensus => consensus
Oracle Span 5-6:  difficult => difficult
Oracle Span 2-3:  India => (country :name (name :op "India"))
Oracle Span 11-12:  meets => meet-03
Oracle Span 13-15:  November 2007 => (date-entity :month 11 :year 2007)
Oracle Span 10-11:  NSG => (organization :name (name :op "NSG"))
Oracle Span 7-8:  reach => reach-01

Missing span: India => (country :name (name :op "India"))
Missing span: NSG => (organization :name (name :op "NSG"))
Missing span: meets => meet-03
Missing span: Consensus => consensus
Dependencies:
1	Consensus	_	NNP	NNP	_	6	nsubj	_	_
2	on	_	IN	IN	_	1	prep	_	_
3	India	_	NNP	NNP	_	2	pobj	_	_
4	will	_	MD	MD	_	6	aux	_	_
5	be	_	VB	VB	_	6	cop	_	_
6	difficult	_	JJ	JJ	_	0	root	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	reach	_	VB	VB	_	6	xcomp	_	_
9	when	_	WRB	WRB	_	12	advmod	_	_
10	the	_	DT	DT	_	11	det	_	_
11	NSG	_	NNP	NNP	_	12	nsubj	_	_
12	meets	_	VBZ	VBZ	_	8	advcl	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	November	_	NNP	NNP	_	13	pobj	_	_
15	2007	_	CD	CD	_	14	num	_	_
16	.	_	.	.	_	6	punct	_	_

Oracle:
(c / consensus, topic, c2 / country)
(c2 / country, name, n / name)
(d / difficult, domain, r / reach-01)
(d2 / date-entity, month, 11)
(d2 / date-entity, year, 2007)
(m / meet-03, ARG0, o / organization)
(m / meet-03, time, d2 / date-entity)
(n / name, op, "India")
(n2 / name, op, "NSG")
(o / organization, name, n2 / name)
(r / reach-01, ARG1, c / consensus)
(r / reach-01, time, m / meet-03)

Input(Some(Graph(null,ArrayBuffer(Span(13,15,List(2, 1, 0),November 2007,(date-entity :month 11 :year 2007),false), Span(7,8,List(3),reach,reach-01,false), Span(5,6,List(4),difficult,difficult,false)),Map(2 -> 2007, 1 -> 11, 4 -> difficult, 0 -> date-entity, 3 -> reach-01),Map(2 -> 2007, d -> date-entity, 1 -> 11, d2 -> difficult, r -> reach-01))),[Ljava.lang.String;@2accdbb5,Annotation([Ljava.lang.String;@b62d79,[Ljava.lang.String;@6631f5ca,[Ljava.lang.String;@5ace1ed4),Annotation([Ljava.lang.String;@1613674b,[Ljava.lang.String;@27ff5d15,[Ledu.cmu.lti.nlp.amr.Dependency;@4e096385),Annotation([Ljava.lang.String;@649bec2e,[Ljava.lang.String;@693fe6c9,[Ljava.lang.String;@34f5090e),Annotation([Ljava.lang.String;@31e5415e,[Ljava.lang.String;@a2431d0,[Ledu.cmu.lti.nlp.amr.Entity;@1cbb87f3))
AMR:
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2007)
(d2 / difficult, domain, r / reach-01)
(r / reach-01, time, d / date-entity)

Decoded in 41,593 microseconds
Sentence: Israel's proposal gives officials from some countries reason to suggest an alternative approach to a specific exemption.

NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 12-13:  alternative => alternative
Span 13-14:  approach => approach-02
Span 7-8:  countries => country
Span 17-18:  exemption => exempt-01
Span 3-4:  gives => give-01
Span 0-1:  Israel => (country :name (name :op "Israel"))
Span 4-5:  officials => (have-org-role-91 :ARG2 official)
Span 2-3:  proposal => propose-01
Span 6-7:  some => some
Span 16-17:  specific => specific
Span 10-11:  suggest => suggest-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  alternative => alternative
Oracle Span 13-14:  approach => approach-02
Oracle Span 7-8:  countries => country
Oracle Span 17-18:  exemption => exempt-01
Oracle Span 3-4:  gives => give-01
Oracle Span 0-1:  Israel => (country :name (name :op "Israel"))
Oracle Span 4-5:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 2-3:  proposal => propose-01
Oracle Span 8-9:  reason => reason
Oracle Span 6-7:  some => some
Oracle Span 16-17:  specific => specific
Oracle Span 10-11:  suggest => suggest-01

Missing span: reason => reason
Dependencies:
1	Israel	_	NNP	NNP	_	3	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	proposal	_	NN	NN	_	4	nsubj	_	_
4	gives	_	VBZ	VBZ	_	0	root	_	_
5	officials	_	NNS	NNS	_	4	iobj	_	_
6	from	_	IN	IN	_	5	prep	_	_
7	some	_	DT	DT	_	8	det	_	_
8	countries	_	NNS	NNS	_	6	pobj	_	_
9	reason	_	NN	NN	_	4	dobj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	suggest	_	VB	VB	_	4	vmod	_	_
12	an	_	DT	DT	_	14	det	_	_
13	alternative	_	JJ	JJ	_	14	amod	_	_
14	approach	_	NN	NN	_	11	dobj	_	_
15	to	_	TO	TO	_	11	prep	_	_
16	a	_	DT	DT	_	18	det	_	_
17	specific	_	JJ	JJ	_	18	amod	_	_
18	exemption	_	NN	NN	_	15	pobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(a / approach-02, ARG1, e / exempt-01)
(a / approach-02, mod, a2 / alternative)
(c / country, name, n / name)
(c2 / country, quant, s / some)
(e / exempt-01, mod, s3 / specific)
(g / give-01, ARG0, p / propose-01)
(g / give-01, ARG1, r / reason)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Israel")
(p / propose-01, ARG0, c / country)
(r / reason, prep-to, s2 / suggest-01)
(s2 / suggest-01, ARG0, o / official)
(s2 / suggest-01, ARG1, a / approach-02)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),exemption,exempt-01,false), Span(16,17,List(1),specific,specific,false), Span(13,14,List(2),approach,approach-02,false), Span(12,13,List(3),alternative,alternative,false), Span(10,11,List(4),suggest,suggest-01,false), Span(7,8,List(5),countries,country,false), Span(6,7,List(6),some,some,false), Span(4,5,List(8, 7),officials,(have-org-role-91 :ARG2 official),false), Span(3,4,List(9),gives,give-01,false), Span(2,3,List(10),proposal,propose-01,false), Span(0,1,List(13, 12, 11),Israel,(country :name (name :op "Israel")),false)),Map(2 -> approach-02, 5 -> country, 12 -> name, 8 -> official, 7 -> have-org-role-91, 1 -> specific, 4 -> suggest-01, 11 -> country, 6 -> some, 0 -> exempt-01, 9 -> give-01, 3 -> alternative, 10 -> propose-01, 13 -> "Israel"),Map(e -> exempt-01, n -> name, h -> have-org-role-91, s2 -> suggest-01, s -> specific, g -> give-01, p -> propose-01, a -> approach-02, a2 -> alternative, c -> country, s3 -> some, o -> official, c2 -> country))),[Ljava.lang.String;@1a4013,Annotation([Ljava.lang.String;@1b6e1eff,[Ljava.lang.String;@306f16f3,[Ljava.lang.String;@702b8b12),Annotation([Ljava.lang.String;@22e357dc,[Ljava.lang.String;@49912c99,[Ledu.cmu.lti.nlp.amr.Dependency;@10163d6),Annotation([Ljava.lang.String;@2dde1bff,[Ljava.lang.String;@15bbf42f,[Ljava.lang.String;@550ee7e5),Annotation([Ljava.lang.String;@5f9b2141,[Ljava.lang.String;@247d8ae,[Ledu.cmu.lti.nlp.amr.Entity;@48974e45))
AMR:
(a / approach-02, ARG1, e / exempt-01)
(a / approach-02, mod, a2 / alternative)
(c / country, mod, s3 / some)
(c2 / country, name, n / name)
(e / exempt-01, time, s / specific)
(g / give-01, ARG1, p / propose-01)
(g / give-01, ARG2, h / have-org-role-91)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Israel")
(p / propose-01, ARG0, c2 / country)
(s2 / suggest-01, ARG0, h / have-org-role-91)
(s2 / suggest-01, ARG1, a / approach-02)

Decoded in 113,795 microseconds
Sentence: Israel's record is good and better than India's in following international nuclear rules.

NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 6-7:  better => good
Span 0-1:  Israel => (country :name (name :op "Israel"))
Span 13-14:  nuclear => nucleus
Span 2-3:  record => record
Span 14-15:  rules => rule

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  and => and
Oracle Span 6-7:  better => good
Oracle Span 11-12:  following => follow-02
Oracle Span 4-5:  good => good
Oracle Span 8-9:  India => (country :name (name :op "India"))
Oracle Span 12-13:  international => international
Oracle Span 0-1:  Israel => (country :name (name :op "Israel"))
Oracle Span 13-14:  nuclear => nucleus
Oracle Span 2-3:  record => record
Oracle Span 14-15:  rules => rule

Missing span: India => (country :name (name :op "India"))
Missing span: and => and
Missing span: following => follow-02
Missing span: international => international
Missing span: good => good
Dependencies:
1	Israel	_	NNP	NNP	_	3	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	record	_	NN	NN	_	5	nsubj	_	_
4	is	_	VBZ	VBZ	_	5	cop	_	_
5	good	_	JJ	JJ	_	0	root	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	better	_	JJR	JJR	_	5	conj	_	_
8	than	_	IN	IN	_	5	prep	_	_
9	India	_	NNP	NNP	_	8	pobj	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	in	_	IN	IN	_	5	prep	_	_
12	following	_	VBG	VBG	_	11	pcomp	_	_
13	international	_	JJ	JJ	_	15	amod	_	_
14	nuclear	_	JJ	JJ	_	15	amod	_	_
15	rules	_	NNS	NNS	_	12	dobj	_	_
16	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, domain, r / record)
(a / and, op, g / good)
(a / and, op, g2 / good)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(f / follow-02, ARG0, r / record)
(f / follow-02, ARG1, r3 / rule)
(n / name, op, "Israel")
(n2 / name, op, "India")
(r / record, poss, c / country)
(r3 / rule, mod, i / international)
(r3 / rule, mod, n3 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),rules,rule,false), Span(13,14,List(1),nuclear,nucleus,false), Span(6,7,List(2),better,good,false), Span(2,3,List(3),record,record,false), Span(0,1,List(6, 5, 4),Israel,(country :name (name :op "Israel")),false)),Map(2 -> good, 5 -> name, 1 -> nucleus, 4 -> country, 6 -> "Israel", 0 -> rule, 3 -> record),Map(n -> nucleus, r2 -> record, g -> good, r -> rule, c -> country, n2 -> name))),[Ljava.lang.String;@6a84a97d,Annotation([Ljava.lang.String;@6c130c45,[Ljava.lang.String;@50ad3bc1,[Ljava.lang.String;@223aa2f7),Annotation([Ljava.lang.String;@6d3a388c,[Ljava.lang.String;@193f604a,[Ledu.cmu.lti.nlp.amr.Dependency;@20f5239f),Annotation([Ljava.lang.String;@57af006c,[Ljava.lang.String;@6bedbc4d,[Ljava.lang.String;@932bc4a),Annotation([Ljava.lang.String;@d29f28,[Ljava.lang.String;@2fd1433e,[Ledu.cmu.lti.nlp.amr.Entity;@29d89d5d))
AMR:
(c / country, name, n2 / name)
(c / country, op, r / rule)
(g / good, mod, r2 / record)
(n2 / name, op, "Israel")
(r / rule, mod, n / nucleus)
(r2 / record, poss, c / country)

Decoded in 45,602 microseconds
Sentence: Despite ties between Israeli and U.S. governments the Bush Administration rejected the Israeli proposal.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (organization :name (name :op "Bush" :op "Administration"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 8-10:  Bush Administration => (organization :name (name :op "Bush" :op "Administration"))
Span 13-14:  proposal => propose-01
Span 10-11:  rejected => reject-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  Administration => administrate-01
Oracle Span 2-3:  between => between
Oracle Span 8-9:  Bush => (person :name (name :op "Bush"))
Oracle Span 6-7:  governments => (government-organization :ARG0-of govern-01)
Oracle Span 3-4:  Israeli => (country :name (name :op "Israel"))
Oracle Span 13-14:  proposal => propose-01
Oracle Span 10-11:  rejected => reject-01
Oracle Span 1-2:  ties => tie-01
Oracle Span 5-6:  U.S. => (country :name (name :op "U.S."))

Extra span: Bush Administration => (organization :name (name :op "Bush" :op "Administration"))
Missing span: Bush => (person :name (name :op "Bush"))
Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: ties => tie-01
Missing span: between => between
Missing span: governments => (government-organization :ARG0-of govern-01)
Missing span: Administration => administrate-01
Dependencies:
1	Despite	_	IN	IN	_	11	prep	_	_
2	ties	_	NNS	NNS	_	1	pobj	_	_
3	between	_	IN	IN	_	2	prep	_	_
4	Israeli	_	NNP	NNP	_	7	nn	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	U.S.	_	NNP	NNP	_	4	conj	_	_
7	governments	_	NNS	NNS	_	3	pobj	_	_
8	the	_	DT	DT	_	10	det	_	_
9	Bush	_	NNP	NNP	_	10	nn	_	_
10	Administration	_	NNP	NNP	_	11	nsubj	_	_
11	rejected	_	VBD	VBD	_	0	root	_	_
12	the	_	DT	DT	_	14	det	_	_
13	Israeli	_	JJ	JJ	_	14	amod	_	_
14	proposal	_	NN	NN	_	11	dobj	_	_
15	.	_	.	.	_	11	punct	_	_

Oracle:
(b / between, op, g4 / government-organization)
(c / country, name, n2 / name)
(c2 / country, name, n / name)
(g5 / govern-01, ARG0, g4 / government-organization)
(g5 / govern-01, ARG1, c2 / country)
(n / name, op, "U.S.")
(n2 / name, op, "Israel")
(n3 / name, op, "Bush")
(p / person, name, n3 / name)
(p2 / propose-01, ARG0, c / country)
(r / reject-01, ARG1, p2 / propose-01)
(r / reject-01, concession, t / tie-01)
(t / tie-01, ARG1, b / between)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),proposal,propose-01,false), Span(10,11,List(1),rejected,reject-01,false), Span(8,10,List(5, 4, 3, 2),Bush Administration,(organization :name (name :op "Bush" :op "Administration")),false)),Map(2 -> organization, 5 -> "Administration", 1 -> reject-01, 4 -> "Bush", 0 -> propose-01, 3 -> name),Map(n -> name, p -> propose-01, r -> reject-01, o -> organization))),[Ljava.lang.String;@3514a4c0,Annotation([Ljava.lang.String;@212b5695,[Ljava.lang.String;@446293d,[Ljava.lang.String;@69997e9d),Annotation([Ljava.lang.String;@793be5ca,[Ljava.lang.String;@2df9b86,[Ledu.cmu.lti.nlp.amr.Dependency;@37654521),Annotation([Ljava.lang.String;@15aab8c6,[Ljava.lang.String;@33990a0c,[Ljava.lang.String;@4de4b452),Annotation([Ljava.lang.String;@50b5ac82,[Ljava.lang.String;@101952da,[Ledu.cmu.lti.nlp.amr.Entity;@6babf3bf))
AMR:
(n / name, op, "Administration")
(n / name, op, "Bush")
(o / organization, name, n / name)
(r / reject-01, ARG0, o / organization)
(r / reject-01, ARG1, p / propose-01)

Decoded in 41,400 microseconds
Sentence: The proposal may complicate the Bush administration's efforts to win an exemption for India to engage in nuclear trade.

NER Entity: (person :name (name :op "Bush"))
NER Entity: (country :name (name :op "India"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 6-7:  administration => administrate-01
Span 5-6:  Bush => (person :name (name :op "Bush"))
Span 3-4:  complicate => complicate-01
Span 8-9:  efforts => effort
Span 16-17:  engage => engage-01
Span 12-13:  exemption => exempt-01
Span 2-3:  may => possible
Span 18-19:  nuclear => nucleus
Span 1-2:  proposal => propose-01
Span 19-20:  trade => trade-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  administration => administrate-01
Oracle Span 5-6:  Bush => (person :name (name :op "Bush"))
Oracle Span 3-4:  complicate => complicate-01
Oracle Span 8-9:  efforts => effort
Oracle Span 16-17:  engage => engage-01
Oracle Span 12-13:  exemption => exempt-01
Oracle Span 14-15:  India => (country :name (name :op "India"))
Oracle Span 2-3:  may => possible
Oracle Span 18-19:  nuclear => nucleus
Oracle Span 1-2:  proposal => (thing :ARG1-of propose-01)
Oracle Span 19-20:  trade => trade-01
Oracle Span 10-11:  win => win-01

Incorrect span: proposal => propose-01
Missing span: India => (country :name (name :op "India"))
Missing span: win => win-01
Missing span: proposal => (thing :ARG1-of propose-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	proposal	_	NN	NN	_	4	nsubj	_	_
3	may	_	MD	MD	_	4	aux	_	_
4	complicate	_	VB	VB	_	0	root	_	_
5	the	_	DT	DT	_	7	det	_	_
6	Bush	_	NNP	NNP	_	7	nn	_	_
7	administration	_	NN	NN	_	9	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	efforts	_	NNS	NNS	_	4	dobj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	win	_	VB	VB	_	9	vmod	_	_
12	an	_	DT	DT	_	13	det	_	_
13	exemption	_	NN	NN	_	11	dobj	_	_
14	for	_	IN	IN	_	13	prep	_	_
15	India	_	NNP	NNP	_	14	pobj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	engage	_	VB	VB	_	11	vmod	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	nuclear	_	JJ	JJ	_	20	amod	_	_
20	trade	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	4	punct	_	_

Oracle:
(c / complicate-01, ARG0, t / thing)
(c / complicate-01, ARG1, e / effort)
(c2 / country, name, n2 / name)
(e / effort, purpose, w / win-01)
(e2 / exempt-01, ARG1, c2 / country)
(e2 / exempt-01, purpose, e3 / engage-01)
(e3 / engage-01, ARG1, c2 / country)
(e3 / engage-01, ARG2, t2 / trade-01)
(n / name, op, "Bush")
(n2 / name, op, "India")
(p / possible, domain, c / complicate-01)
(p2 / propose-01, ARG1, t / thing)
(p3 / person, name, n / name)
(t2 / trade-01, mod, n3 / nucleus)
(w / win-01, ARG1, e2 / exempt-01)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),trade,trade-01,false), Span(18,19,List(1),nuclear,nucleus,false), Span(16,17,List(2),engage,engage-01,false), Span(12,13,List(3),exemption,exempt-01,false), Span(8,9,List(4),efforts,effort,false), Span(6,7,List(5),administration,administrate-01,false), Span(5,6,List(8, 7, 6),Bush,(person :name (name :op "Bush")),false), Span(3,4,List(9),complicate,complicate-01,false), Span(2,3,List(10),may,possible,false), Span(1,2,List(11),proposal,propose-01,false)),Map(2 -> engage-01, 5 -> administrate-01, 8 -> "Bush", 7 -> name, 1 -> nucleus, 11 -> propose-01, 4 -> effort, 6 -> person, 9 -> complicate-01, 0 -> trade-01, 10 -> possible, 3 -> exempt-01),Map(e -> engage-01, n -> nucleus, t -> trade-01, p2 -> possible, e2 -> exempt-01, p -> person, a -> administrate-01, c -> complicate-01, p3 -> propose-01, n2 -> name, e3 -> effort))),[Ljava.lang.String;@3059cbc,Annotation([Ljava.lang.String;@7ea9e1e2,[Ljava.lang.String;@24fcf36f,[Ljava.lang.String;@10feca44),Annotation([Ljava.lang.String;@3fb1549b,[Ljava.lang.String;@ea6147e,[Ledu.cmu.lti.nlp.amr.Dependency;@4d02f94e),Annotation([Ljava.lang.String;@2b48a640,[Ljava.lang.String;@1e683a3e,[Ljava.lang.String;@2053d869),Annotation([Ljava.lang.String;@7a419da4,[Ljava.lang.String;@14555e0a,[Ledu.cmu.lti.nlp.amr.Entity;@4bb33f74))
AMR:
(a / administrate-01, ARG1, p / person)
(c / complicate-01, ARG0, p3 / propose-01)
(c / complicate-01, ARG1, e3 / effort)
(e / engage-01, ARG0, e3 / effort)
(e / engage-01, ARG2, t / trade-01)
(e2 / exempt-01, ARG0, a / administrate-01)
(e2 / exempt-01, ARG1, e / engage-01)
(n2 / name, op, "Bush")
(p / person, name, n2 / name)
(p2 / possible, domain, c / complicate-01)
(t / trade-01, ARG1, n / nucleus)

Decoded in 100,933 microseconds
Sentence: President Bush and Secretary of State Condoleezza Rice view the Pact as an important part of the Bush administration's foreign policy legacy.

NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Condoleezza" :op "Rice"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 18-19:  administration => administrate-01
Span 17-18:  Bush => (person :name (name :op "Bush"))
Span 1-2:  Bush => (person :name (name :op "Bush"))
Span 6-8:  Condoleezza Rice => (person :name (name :op "Rice" :op "Condoleezza"))
Span 13-14:  important => important
Span 22-23:  legacy => legacy
Span 21-22:  policy => policy
Span 0-1:  President => (have-org-role-91 :ARG2 president)
Span 8-9:  view => view-02

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Oracle Span 18-19:  administration => administrate-01
Oracle Span 2-3:  and => and
Oracle Span 1-2:  Bush => (person :name (name :op "Bush"))
Oracle Span 6-8:  Condoleezza Rice => (person :name (name :op "Rice" :op "Condoleezza"))
Oracle Span 20-21:  foreign => foreign
Oracle Span 13-14:  important => important
Oracle Span 22-23:  legacy => legacy
Oracle Span 10-11:  Pact => pact
Oracle Span 14-15:  part => part
Oracle Span 21-22:  policy => policy
Oracle Span 0-1:  President => (have-org-role-91 :ARG2 president)
Oracle Span 3-4:  Secretary => (have-org-role-91 :ARG2 secretary)
Oracle Span 5-6:  State => state
Oracle Span 8-9:  view => view-02

Extra span: Bush => (person :name (name :op "Bush"))
Missing span: part => part
Missing span: foreign => foreign
Missing span: Pact => pact
Missing span: and => and
Missing span: Secretary => (have-org-role-91 :ARG2 secretary)
Missing span: State => state
Dependencies:
1	President	_	NNP	NNP	_	2	nn	_	_
2	Bush	_	NNP	NNP	_	9	nsubj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	Secretary	_	NNP	NNP	_	2	conj	_	_
5	of	_	IN	IN	_	2	prep	_	_
6	State	_	NNP	NNP	_	8	nn	_	_
7	Condoleezza	_	NNP	NNP	_	8	nn	_	_
8	Rice	_	NNP	NNP	_	5	pobj	_	_
9	view	_	VBP	VBP	_	0	root	_	_
10	the	_	DT	DT	_	11	det	_	_
11	Pact	_	NNP	NNP	_	9	dobj	_	_
12	as	_	IN	IN	_	9	prep	_	_
13	an	_	DT	DT	_	15	det	_	_
14	important	_	JJ	JJ	_	15	amod	_	_
15	part	_	NN	NN	_	12	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	the	_	DT	DT	_	19	det	_	_
18	Bush	_	NNP	NNP	_	19	nn	_	_
19	administration	_	NN	NN	_	23	poss	_	_
20	's	_	POS	POS	_	19	possessive	_	_
21	foreign	_	JJ	JJ	_	23	amod	_	_
22	policy	_	NN	NN	_	23	nn	_	_
23	legacy	_	NN	NN	_	16	pobj	_	_
24	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, p / person)
(a / and, op, p6 / person)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG2, p5 / president)
(h3 / have-org-role-91, ARG0, p6 / person)
(h3 / have-org-role-91, ARG2, s / secretary)
(l / legacy, mod, p4 / policy)
(n / name, op, "Bush")
(n2 / name, op, "Condoleezza")
(n2 / name, op, "Rice")
(p / person, name, n / name)
(p3 / part, mod, i / important)
(p4 / policy, mod, f / foreign)
(p6 / person, name, n2 / name)
(s / secretary, mod, s2 / state)
(v / view-02, ARG0, a / and)
(v / view-02, ARG1, p2 / pact)
(v / view-02, ARG2, p3 / part)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),legacy,legacy,false), Span(21,22,List(1),policy,policy,false), Span(18,19,List(2),administration,administrate-01,false), Span(17,18,List(5, 4, 3),Bush,(person :name (name :op "Bush")),false), Span(13,14,List(6),important,important,false), Span(8,9,List(7),view,view-02,false), Span(6,8,List(11, 10, 9, 8),Condoleezza Rice,(person :name (name :op "Rice" :op "Condoleezza")),false), Span(1,2,List(14, 13, 12),Bush,(person :name (name :op "Bush")),false), Span(0,1,List(16, 15),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> administrate-01, 5 -> "Bush", 12 -> person, 15 -> have-org-role-91, 8 -> person, 7 -> view-02, 1 -> policy, 4 -> name, 11 -> "Condoleezza", 14 -> "Bush", 6 -> important, 0 -> legacy, 9 -> name, 16 -> president, 3 -> person, 10 -> "Rice", 13 -> name),Map(n -> name, h -> have-org-role-91, p5 -> president, p2 -> person, v -> view-02, p -> policy, a -> administrate-01, n3 -> name, p4 -> person, i -> important, l -> legacy, p3 -> person, n2 -> name))),[Ljava.lang.String;@759d26fb,Annotation([Ljava.lang.String;@3c73951,[Ljava.lang.String;@3d5c822d,[Ljava.lang.String;@6f46426d),Annotation([Ljava.lang.String;@73700b80,[Ljava.lang.String;@49c7b90e,[Ledu.cmu.lti.nlp.amr.Dependency;@10d307f1),Annotation([Ljava.lang.String;@4d5b6aac,[Ljava.lang.String;@3e84448c,[Ljava.lang.String;@4a7f959b),Annotation([Ljava.lang.String;@429bffaa,[Ljava.lang.String;@5403f35f,[Ledu.cmu.lti.nlp.amr.Entity;@483f6d77))
AMR:
(a / administrate-01, ARG1, p2 / person)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, p3 / person)
(h / have-org-role-91, ARG2, p5 / president)
(i / important, op, h / have-org-role-91)
(l / legacy, mod, p / policy)
(l / legacy, poss, a / administrate-01)
(n / name, op, "Bush")
(n2 / name, op, "Condoleezza")
(n2 / name, op, "Rice")
(n3 / name, op, "Bush")
(p2 / person, name, n / name)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(v / view-02, ARG0, p4 / person)
(v / view-02, ARG1, p / policy)

Decoded in 913,364 microseconds
Sentence: The deal is controversial in India and Congress must give approval.

NER Entity: (country :name (name :op "India"))
NER Entity: (organization :name (name :op "Congress"))
Spans:
Span 10-11:  approval => approve-01
Span 1-2:  deal => deal-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 10-11:  approval => approve-01
Oracle Span 7-8:  Congress => (government-organization :name (name :op "Congress"))
Oracle Span 3-4:  controversial => controversy
Oracle Span 1-2:  deal => deal
Oracle Span 9-10:  give => give-01
Oracle Span 5-6:  India => (country :name (name :op "India"))

Incorrect span: deal => deal-01
Missing span: India => (country :name (name :op "India"))
Missing span: Congress => (government-organization :name (name :op "Congress"))
Missing span: and => and
Missing span: give => give-01
Missing span: deal => deal
Missing span: controversial => controversy
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	deal	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	controversial	_	JJ	JJ	_	0	root	_	_
5	in	_	IN	IN	_	10	mark	_	_
6	India	_	NNP	NNP	_	10	nsubj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	Congress	_	NNP	NNP	_	6	conj	_	_
9	must	_	MD	MD	_	10	aux	_	_
10	give	_	VB	VB	_	4	advcl	_	_
11	approval	_	NN	NN	_	10	dobj	_	_
12	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / controversy)
(a2 / approve-01, ARG0, g2 / government-organization)
(c / controversy, domain, d / deal)
(c / controversy, location, c2 / country)
(c2 / country, name, n2 / name)
(g / give-01, ARG0, g2 / government-organization)
(g / give-01, ARG1, a2 / approve-01)
(g2 / government-organization, name, n / name)
(n / name, op, "Congress")
(n2 / name, op, "India")

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),approval,approve-01,false), Span(1,2,List(1),deal,deal-01,false)),Map(1 -> deal-01, 0 -> approve-01),Map(d -> deal-01, a -> approve-01))),[Ljava.lang.String;@7e5afaa6,Annotation([Ljava.lang.String;@63a12c68,[Ljava.lang.String;@28f3b248,[Ljava.lang.String;@1b1426f4),Annotation([Ljava.lang.String;@32b260fa,[Ljava.lang.String;@581ac8a8,[Ledu.cmu.lti.nlp.amr.Dependency;@6d4e5011),Annotation([Ljava.lang.String;@57d7f8ca,[Ljava.lang.String;@76c3e77a,[Ljava.lang.String;@78123e82),Annotation([Ljava.lang.String;@67c33749,[Ljava.lang.String;@fba92d3,[Ledu.cmu.lti.nlp.amr.Entity;@662b4c69))
AMR:
(a / approve-01, ARG1, d / deal-01)

Decoded in 22,621 microseconds
Sentence: Delays in winning approval for the India deal could have a negative effect on the administration's foreign policy legacy with delay until an election year having the most negative effect.

NER Entity: (country :name (name :op "India"))
Spans:
Span 15-16:  administration => administrate-01
Span 3-4:  approval => approve-01
Span 8-9:  could => possible
Span 7-8:  deal => deal-01
Span 21-22:  delay => delay-01
Span 0-1:  Delays => delay-01
Span 24-25:  election => elect-01
Span 19-20:  legacy => legacy
Span 29-30:  negative => negative
Span 11-12:  negative => negative
Span 18-19:  policy => policy
Span 22-23:  until => until
Span 2-3:  winning => win-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 15-16:  administration => administrate-01
Oracle Span 3-4:  approval => approve-01
Oracle Span 8-9:  could => possible
Oracle Span 7-8:  deal => deal
Oracle Span 21-22:  delay => delay-01
Oracle Span 0-1:  Delays => delay-01
Oracle Span 12-13:  effect => effect-01
Oracle Span 30-31:  effect => effect-01
Oracle Span 24-25:  election => elect-01
Oracle Span 17-18:  foreign => foreign
Oracle Span 6-7:  India => (country :name (name :op "India"))
Oracle Span 19-20:  legacy => legacy
Oracle Span 28-29:  most => most
Oracle Span 11-12:  negative => negative
Oracle Span 29-30:  negative => negative
Oracle Span 18-19:  policy => policy
Oracle Span 2-3:  winning => win-01
Oracle Span 25-26:  year => year

Extra span: until => until
Incorrect span: deal => deal-01
Missing span: India => (country :name (name :op "India"))
Missing span: effect => effect-01
Missing span: most => most
Missing span: year => year
Missing span: effect => effect-01
Missing span: foreign => foreign
Missing span: deal => deal
Dependencies:
1	Delays	_	NNS	NNS	_	10	nsubj	_	_
2	in	_	IN	IN	_	1	prep	_	_
3	winning	_	VBG	VBG	_	4	amod	_	_
4	approval	_	NN	NN	_	2	pobj	_	_
5	for	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	India	_	NNP	NNP	_	8	nn	_	_
8	deal	_	NN	NN	_	5	pobj	_	_
9	could	_	MD	MD	_	10	aux	_	_
10	have	_	VB	VB	_	0	root	_	_
11	a	_	DT	DT	_	13	det	_	_
12	negative	_	JJ	JJ	_	13	amod	_	_
13	effect	_	NN	NN	_	10	dobj	_	_
14	on	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	administration	_	NN	NN	_	20	poss	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	foreign	_	JJ	JJ	_	20	amod	_	_
19	policy	_	NN	NN	_	20	nn	_	_
20	legacy	_	NN	NN	_	14	pobj	_	_
21	with	_	IN	IN	_	20	prep	_	_
22	delay	_	NN	NN	_	21	pobj	_	_
23	until	_	IN	IN	_	22	prep	_	_
24	an	_	DT	DT	_	26	det	_	_
25	election	_	NN	NN	_	26	nn	_	_
26	year	_	NN	NN	_	23	pobj	_	_
27	having	_	VBG	VBG	_	26	vmod	_	_
28	the	_	DT	DT	_	31	det	_	_
29	most	_	RBS	RBS	_	30	advmod	_	_
30	negative	_	JJ	JJ	_	31	amod	_	_
31	effect	_	NN	NN	_	27	dobj	_	_
32	.	_	.	.	_	10	punct	_	_

Oracle:
(a / approve-01, ARG1, d2 / deal)
(c / country, name, n / name)
(d / delay-01, ARG1, w / win-01)
(d2 / deal, mod, c / country)
(d3 / delay-01, ARG2, y / year)
(e / effect-01, ARG0, d3 / delay-01)
(e / effect-01, mod, n3 / negative)
(e4 / effect-01, ARG0, d / delay-01)
(e4 / effect-01, ARG1, l / legacy)
(e4 / effect-01, mod, n2 / negative)
(l / legacy, mod, p2 / policy)
(n / name, op, "India")
(n3 / negative, degree, m / most)
(p / possible, domain, e4 / effect-01)
(p / possible, prep-with, d3 / delay-01)
(p2 / policy, mod, f / foreign)
(w / win-01, ARG1, a / approve-01)
(y / year, mod, e2 / elect-01)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),negative,negative,false), Span(24,25,List(1),election,elect-01,false), Span(22,23,List(2),until,until,false), Span(21,22,List(3),delay,delay-01,false), Span(19,20,List(4),legacy,legacy,false), Span(18,19,List(5),policy,policy,false), Span(15,16,List(6),administration,administrate-01,false), Span(11,12,List(7),negative,negative,false), Span(8,9,List(8),could,possible,false), Span(7,8,List(9),deal,deal-01,false), Span(3,4,List(10),approval,approve-01,false), Span(2,3,List(11),winning,win-01,false), Span(0,1,List(12),Delays,delay-01,false)),Map(2 -> until, 5 -> policy, 12 -> delay-01, 8 -> possible, 7 -> negative, 1 -> elect-01, 4 -> legacy, 11 -> win-01, 6 -> administrate-01, 0 -> negative, 9 -> deal-01, 3 -> delay-01, 10 -> approve-01),Map(e -> elect-01, n -> negative, w -> win-01, d3 -> delay-01, p2 -> possible, d -> delay-01, p -> policy, a -> administrate-01, d2 -> deal-01, a2 -> approve-01, u -> until, l -> legacy, n2 -> negative))),[Ljava.lang.String;@fa49800,Annotation([Ljava.lang.String;@71238fc2,[Ljava.lang.String;@2a54a73f,[Ljava.lang.String;@16a0ee18),Annotation([Ljava.lang.String;@3d6f0054,[Ljava.lang.String;@505fc5a4,[Ledu.cmu.lti.nlp.amr.Dependency;@5fbdfdcf),Annotation([Ljava.lang.String;@4efc180e,[Ljava.lang.String;@bd4dc25,[Ljava.lang.String;@25084a1e),Annotation([Ljava.lang.String;@156b88f5,[Ljava.lang.String;@3bf9ce3e,[Ledu.cmu.lti.nlp.amr.Entity;@16610890))
AMR:
(a / administrate-01, ARG1, p2 / possible)
(a2 / approve-01, ARG1, d2 / deal-01)
(d / delay-01, ARG1, d2 / deal-01)
(d / delay-01, time, u / until)
(d2 / deal-01, ARG1, n2 / negative)
(d3 / delay-01, ARG1, w / win-01)
(e / elect-01, ARG0, a / administrate-01)
(e / elect-01, ARG1, n / negative)
(e / elect-01, ARG2, d2 / deal-01)
(l / legacy, mod, p / policy)
(p / policy, poss, d2 / deal-01)
(w / win-01, ARG1, a2 / approve-01)

Decoded in 220,972 microseconds
Sentence: State Department spokesman Tom Casey stated the U.S. government views the India deal as unique and does not see the deal as a precedent for any other country including Israel.

NER Entity: (organization :name (name :op "State" :op "Department"))
NER Entity: (person :name (name :op "Tom" :op "Casey"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 25-26:  any => any
Span 27-28:  country => country
Span 20-21:  deal => deal-01
Span 12-13:  deal => deal-01
Span 29-30:  Israel => (country :name (name :op "Israel"))
Span 26-27:  other => other
Span 23-24:  precedent => precedent
Span 18-19:  see => see-01
Span 2-3:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 0-2:  State Department => (organization :name (name :op "State" :op "Department"))
Span 3-5:  Tom Casey => (person :name (name :op "Tom" :op "Casey"))
Span 14-15:  unique => unique

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 25-26:  any => any
Oracle Span 27-28:  country => country
Oracle Span 12-13:  deal => deal
Oracle Span 8-9:  government => (government-organization :ARG0-of govern-01)
Oracle Span 28-29:  including => include-01
Oracle Span 11-12:  India => (country :name (name :op "India"))
Oracle Span 29-30:  Israel => (country :name (name :op "Israel"))
Oracle Span 26-27:  other => other
Oracle Span 23-24:  precedent => precedent
Oracle Span 18-19:  see => see-01
Oracle Span 2-3:  spokesman => (have-org-role-91 :ARG2 spokesman)
Oracle Span 0-2:  State Department => (government-organization :name (name :op "Department" :op "State"))
Oracle Span 5-6:  stated => state-01
Oracle Span 3-5:  Tom Casey => (person :name (name :op "Casey" :op "Tom"))
Oracle Span 7-8:  U.S. => (country :name (name :op "U.S."))
Oracle Span 14-15:  unique => unique
Oracle Span 9-10:  views => view-02

Extra span: deal => deal-01
Incorrect span: deal => deal-01
Incorrect span: Tom Casey => (person :name (name :op "Tom" :op "Casey"))
Incorrect span: State Department => (organization :name (name :op "State" :op "Department"))
Missing span: Tom Casey => (person :name (name :op "Casey" :op "Tom"))
Missing span: State Department => (government-organization :name (name :op "Department" :op "State"))
Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: India => (country :name (name :op "India"))
Missing span: stated => state-01
Missing span: and => and
Missing span: including => include-01
Missing span: views => view-02
Missing span: deal => deal
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	State	_	NNP	NNP	_	5	nn	_	_
2	Department	_	NNP	NNP	_	5	nn	_	_
3	spokesman	_	NN	NN	_	5	nn	_	_
4	Tom	_	NNP	NNP	_	5	nn	_	_
5	Casey	_	NNP	NNP	_	6	nsubj	_	_
6	stated	_	VBD	VBD	_	0	root	_	_
7	the	_	DT	DT	_	9	det	_	_
8	U.S.	_	NNP	NNP	_	9	nn	_	_
9	government	_	NN	NN	_	10	nsubj	_	_
10	views	_	VBZ	VBZ	_	6	ccomp	_	_
11	the	_	DT	DT	_	13	det	_	_
12	India	_	NNP	NNP	_	13	nn	_	_
13	deal	_	NN	NN	_	15	nsubj	_	_
14	as	_	RB	RB	_	15	advmod	_	_
15	unique	_	JJ	JJ	_	10	xcomp	_	_
16	and	_	CC	CC	_	10	cc	_	_
17	does	_	VBZ	VBZ	_	19	aux	_	_
18	not	_	RB	RB	_	19	neg	_	_
19	see	_	VB	VB	_	10	conj	_	_
20	the	_	DT	DT	_	21	det	_	_
21	deal	_	NN	NN	_	19	dobj	_	_
22	as	_	IN	IN	_	19	prep	_	_
23	a	_	DT	DT	_	24	det	_	_
24	precedent	_	NN	NN	_	22	pobj	_	_
25	for	_	IN	IN	_	24	prep	_	_
26	any	_	DT	DT	_	28	det	_	_
27	other	_	JJ	JJ	_	28	amod	_	_
28	country	_	NN	NN	_	25	pobj	_	_
29	including	_	VBG	VBG	_	28	prep	_	_
30	Israel	_	NNP	NNP	_	29	pobj	_	_
31	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, s3 / see-01)
(a / and, op, v / view-02)
(c / country, name, n3 / name)
(c2 / country, name, n4 / name)
(c3 / country, mod, a2 / any)
(c3 / country, mod, o / other)
(c4 / country, name, n5 / name)
(d / deal, mod, c2 / country)
(g / government-organization, name, n2 / name)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, s2 / spokesman)
(i / include-01, ARG1, c4 / country)
(i / include-01, ARG2, c3 / country)
(n / name, op, "Casey")
(n / name, op, "Tom")
(n2 / name, op, "Department")
(n2 / name, op, "State")
(n3 / name, op, "U.S.")
(n4 / name, op, "India")
(n5 / name, op, "Israel")
(p / precedent, beneficiary, c3 / country)
(p2 / person, name, n / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, a / and)
(s3 / see-01, ARG0, g2 / government-organization)
(s3 / see-01, ARG1, d / deal)
(s3 / see-01, ARG2, p / precedent)
(v / view-02, ARG0, g2 / government-organization)
(v / view-02, ARG1, d / deal)
(v / view-02, ARG2, u / unique)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(2, 1, 0),Israel,(country :name (name :op "Israel")),false), Span(27,28,List(3),country,country,false), Span(26,27,List(4),other,other,false), Span(25,26,List(5),any,any,false), Span(23,24,List(6),precedent,precedent,false), Span(20,21,List(7),deal,deal-01,false), Span(18,19,List(8),see,see-01,false), Span(14,15,List(9),unique,unique,false), Span(12,13,List(10),deal,deal-01,false), Span(3,5,List(14, 13, 12, 11),Tom Casey,(person :name (name :op "Tom" :op "Casey")),false), Span(2,3,List(16, 15),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(0,2,List(20, 19, 18, 17),State Department,(organization :name (name :op "State" :op "Department")),false)),Map(2 -> "Israel", 5 -> any, 12 -> name, 15 -> have-org-role-91, 8 -> see-01, 18 -> name, 7 -> deal-01, 17 -> organization, 1 -> name, 4 -> other, 11 -> person, 14 -> "Casey", 20 -> "Department", 6 -> precedent, 0 -> country, 9 -> unique, 16 -> spokesman, 19 -> "State", 3 -> country, 10 -> deal-01, 13 -> "Tom"),Map(n -> name, h -> have-org-role-91, s2 -> spokesman, p2 -> person, s -> see-01, d -> deal-01, p -> precedent, n3 -> name, a -> any, o2 -> organization, d2 -> deal-01, c -> country, u -> unique, o -> other, c2 -> country, n2 -> name))),[Ljava.lang.String;@71def8f8,Annotation([Ljava.lang.String;@383bfa16,[Ljava.lang.String;@4d465b11,[Ljava.lang.String;@53fdffa1),Annotation([Ljava.lang.String;@5562c41e,[Ljava.lang.String;@32ee6fee,[Ledu.cmu.lti.nlp.amr.Dependency;@4d0f2471),Annotation([Ljava.lang.String;@7133da86,[Ljava.lang.String;@3232a28a,[Ljava.lang.String;@73e22a3d),Annotation([Ljava.lang.String;@47faa49c,[Ljava.lang.String;@28f2a10f,[Ledu.cmu.lti.nlp.amr.Entity;@f736069))
AMR:
(c / country, name, n / name)
(c2 / country, mod, a / any)
(c2 / country, mod, o / other)
(d / deal-01, ARG1, d2 / deal-01)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, s2 / spokesman)
(n / name, op, "Israel")
(n2 / name, op, "Casey")
(n2 / name, op, "Tom")
(n3 / name, op, "Department")
(n3 / name, op, "State")
(o2 / organization, name, n3 / name)
(p / precedent, location, c2 / country)
(p / precedent, poss, c / country)
(p2 / person, name, n2 / name)
(s / see-01, ARG0, p2 / person)
(s / see-01, ARG1, d / deal-01)
(s / see-01, location, p / precedent)
(u / unique, domain, d2 / deal-01)

Decoded in 611,722 microseconds
Sentence: Spokesman for the Israeli embassy David Siegel stated the suggestion that the Israeli government is demanding an exemption or linking efforts to any other issue including the India debate is grossly inaccurate.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (person :name (name :op "David" :op "Siegel"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 22-23:  any => any
Span 5-7:  David Siegel => (person :name (name :op "David" :op "Siegel"))
Span 28-29:  debate => debate-01
Span 15-16:  demanding => demand-01
Span 20-21:  efforts => effort
Span 4-5:  embassy => embassy
Span 17-18:  exemption => exempt-01
Span 30-31:  grossly => gross
Span 24-25:  issue => issue
Span 19-20:  linking => link-01
Span 18-19:  or => or
Span 23-24:  other => other
Span 0-1:  Spokesman => (have-org-role-91 :ARG2 spokesman)
Span 9-10:  suggestion => suggest-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 22-23:  any => any
Oracle Span 5-7:  David Siegel => (person :name (name :op "Siegel" :op "David"))
Oracle Span 28-29:  debate => debate-01
Oracle Span 15-16:  demanding => demand-01
Oracle Span 20-21:  efforts => effort
Oracle Span 4-5:  embassy => embassy
Oracle Span 17-18:  exemption => exempt-01
Oracle Span 13-14:  government => (government-organization :ARG0-of govern-01)
Oracle Span 30-31:  grossly => gross
Oracle Span 31-32:  inaccurate => (accurate :polarity -)
Oracle Span 25-26:  including => include-01
Oracle Span 27-28:  India => (country :name (name :op "India"))
Oracle Span 3-4:  Israeli => (country :name (name :op "Israel"))
Oracle Span 24-25:  issue => issue
Oracle Span 19-20:  linking => link-01
Oracle Span 18-19:  or => or
Oracle Span 23-24:  other => other
Oracle Span 0-1:  Spokesman => (have-org-role-91 :ARG2 spokesman)
Oracle Span 7-8:  stated => state-01
Oracle Span 9-10:  suggestion => suggest-01

Incorrect span: David Siegel => (person :name (name :op "David" :op "Siegel"))
Missing span: David Siegel => (person :name (name :op "Siegel" :op "David"))
Missing span: India => (country :name (name :op "India"))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: stated => state-01
Missing span: inaccurate => (accurate :polarity -)
Missing span: including => include-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Spokesman	_	NNP	NNP	_	32	nsubj	_	_
2	for	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	5	det	_	_
4	Israeli	_	JJ	JJ	_	5	amod	_	_
5	embassy	_	NN	NN	_	2	pobj	_	_
6	David	_	NNP	NNP	_	7	nn	_	_
7	Siegel	_	NNP	NNP	_	8	nsubj	_	_
8	stated	_	VBD	VBD	_	5	rcmod	_	_
9	the	_	DT	DT	_	10	det	_	_
10	suggestion	_	NN	NN	_	8	dobj	_	_
11	that	_	IN	IN	_	16	mark	_	_
12	the	_	DT	DT	_	14	det	_	_
13	Israeli	_	JJ	JJ	_	14	amod	_	_
14	government	_	NN	NN	_	16	nsubj	_	_
15	is	_	VBZ	VBZ	_	16	aux	_	_
16	demanding	_	VBG	VBG	_	8	ccomp	_	_
17	an	_	DT	DT	_	18	det	_	_
18	exemption	_	NN	NN	_	16	dobj	_	_
19	or	_	CC	CC	_	16	cc	_	_
20	linking	_	VBG	VBG	_	16	conj	_	_
21	efforts	_	NNS	NNS	_	20	dobj	_	_
22	to	_	TO	TO	_	20	prep	_	_
23	any	_	DT	DT	_	25	det	_	_
24	other	_	JJ	JJ	_	25	amod	_	_
25	issue	_	NN	NN	_	22	pobj	_	_
26	including	_	VBG	VBG	_	25	prep	_	_
27	the	_	DT	DT	_	29	det	_	_
28	India	_	NNP	NNP	_	29	nn	_	_
29	debate	_	NN	NN	_	26	pobj	_	_
30	is	_	VBZ	VBZ	_	32	cop	_	_
31	grossly	_	RB	RB	_	32	advmod	_	_
32	inaccurate	_	JJ	JJ	_	0	root	_	_
33	.	_	.	.	_	32	punct	_	_

Oracle:
(a / accurate, domain, s3 / suggest-01)
(a / accurate, manner, g3 / gross)
(a / accurate, polarity, -)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(d / demand-01, ARG0, g / government-organization)
(d / demand-01, ARG1, e2 / exempt-01)
(d2 / debate-01, ARG1, c2 / country)
(e / embassy, mod, c / country)
(e3 / effort, prep-to, i / issue)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, e / embassy)
(h / have-org-role-91, ARG2, s2 / spokesman)
(i / issue, mod, a2 / any)
(i / issue, mod, o2 / other)
(i2 / include-01, ARG1, d2 / debate-01)
(i2 / include-01, ARG2, i / issue)
(l / link-01, ARG0, g / government-organization)
(l / link-01, ARG1, e3 / effort)
(n / name, op, "David")
(n / name, op, "Siegel")
(n2 / name, op, "Israel")
(n3 / name, op, "India")
(o / or, op, d / demand-01)
(o / or, op, l / link-01)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / accurate)
(s3 / suggest-01, ARG1, o / or)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),grossly,gross,false), Span(28,29,List(1),debate,debate-01,false), Span(24,25,List(2),issue,issue,false), Span(23,24,List(3),other,other,false), Span(22,23,List(4),any,any,false), Span(20,21,List(5),efforts,effort,false), Span(19,20,List(6),linking,link-01,false), Span(18,19,List(7),or,or,false), Span(17,18,List(8),exemption,exempt-01,false), Span(15,16,List(9),demanding,demand-01,false), Span(9,10,List(10),suggestion,suggest-01,false), Span(5,7,List(14, 13, 12, 11),David Siegel,(person :name (name :op "David" :op "Siegel")),false), Span(4,5,List(15),embassy,embassy,false), Span(0,1,List(17, 16),Spokesman,(have-org-role-91 :ARG2 spokesman),false)),Map(2 -> issue, 5 -> effort, 12 -> name, 15 -> embassy, 8 -> exempt-01, 7 -> or, 17 -> spokesman, 1 -> debate-01, 4 -> any, 11 -> person, 14 -> "Siegel", 6 -> link-01, 0 -> gross, 9 -> demand-01, 16 -> have-org-role-91, 3 -> other, 10 -> suggest-01, 13 -> "David"),Map(e -> effort, n -> name, h -> have-org-role-91, s2 -> spokesman, e2 -> exempt-01, s -> suggest-01, d -> debate-01, g -> gross, p -> person, a -> any, o2 -> or, d2 -> demand-01, i -> issue, l -> link-01, o -> other, e3 -> embassy))),[Ljava.lang.String;@6da21078,Annotation([Ljava.lang.String;@7fee8714,[Ljava.lang.String;@4229bb3f,[Ljava.lang.String;@56cdfb3b),Annotation([Ljava.lang.String;@2b91004a,[Ljava.lang.String;@20ccf40b,[Ledu.cmu.lti.nlp.amr.Dependency;@2fb3536e),Annotation([Ljava.lang.String;@169e6180,[Ljava.lang.String;@35aea049,[Ljava.lang.String;@7205765b),Annotation([Ljava.lang.String;@47987356,[Ljava.lang.String;@22ef9844,[Ledu.cmu.lti.nlp.amr.Entity;@6283d8b8))
AMR:
(d / debate-01, ARG1, l / link-01)
(d2 / demand-01, ARG1, e2 / exempt-01)
(e2 / exempt-01, ARG1, g / gross)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, e3 / embassy)
(h / have-org-role-91, ARG2, s2 / spokesman)
(i / issue, mod, a / any)
(i / issue, mod, o / other)
(l / link-01, ARG1, i / issue)
(l / link-01, ARG2, e / effort)
(n / name, op, "David")
(n / name, op, "Siegel")
(o2 / or, op, d2 / demand-01)
(o2 / or, op, l / link-01)
(p / person, name, n / name)
(s / suggest-01, ARG0, p / person)
(s / suggest-01, ARG1, d2 / demand-01)

Decoded in 944,581 microseconds
Sentence: Seigel stated --

NER Entity: (person :name (name :op "Seigel"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Seigel => (person :name (name :op "Seigel"))
Oracle Span 1-2:  stated => state-01

Incorrect span:  => amr-empty
Missing span: Seigel => (person :name (name :op "Seigel"))
Missing span: stated => state-01
Dependencies:
1	Seigel	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	--	_	:	:	_	2	punct	_	_

Oracle:
(n / name, op, "Seigel")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@3b6ddd1d,Annotation([Ljava.lang.String;@3f6b0be5,[Ljava.lang.String;@611889f4,[Ljava.lang.String;@1da2cb77),Annotation([Ljava.lang.String;@48f278eb,[Ljava.lang.String;@2f217633,[Ledu.cmu.lti.nlp.amr.Dependency;@a530d0a),Annotation([Ljava.lang.String;@1a18644,[Ljava.lang.String;@5acf93bb,[Ljava.lang.String;@7e7be63f),Annotation([Ljava.lang.String;@6cd28fa7,[Ljava.lang.String;@614ca7df,[Ledu.cmu.lti.nlp.amr.Entity;@4738a206))
AMR:


Decoded in 4,751 microseconds
Sentence: The Israeli government has never asked the NSG for any exemption to nuclear supply guidelines or made any Israeli-specific request of the NSG.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Israeli" :op "-" :op "specific"))
NER Entity: (organization :name (name :op "NSG"))
Spans:
Span 17-18:  any => any
Span 9-10:  any => any
Span 10-11:  exemption => exempt-01
Span 14-15:  guidelines => guideline
Span 12-13:  nuclear => nucleus
Span 15-16:  or => or
Span 21-22:  request => request-01
Span 20-21:  specific => specific
Span 13-14:  supply => supply-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  asked => ask-02
Oracle Span 10-11:  exemption => exempt-01
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 14-15:  guidelines => guideline
Oracle Span 1-2:  Israeli => (country :name (name :op "Israel"))
Oracle Span 16-17:  made => make-03
Oracle Span 7-8:  NSG => (organization :name (name :op "NSG"))
Oracle Span 12-13:  nuclear => nucleus
Oracle Span 15-16:  or => or
Oracle Span 21-22:  request => request-01
Oracle Span 20-21:  specific => specific
Oracle Span 13-14:  supply => supply-01

Extra span: any => any
Extra span: any => any
Missing span: NSG => (organization :name (name :op "NSG"))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: made => make-03
Missing span: asked => ask-02
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Israeli	_	JJ	JJ	_	3	amod	_	_
3	government	_	NN	NN	_	6	nsubj	_	_
4	has	_	VBZ	VBZ	_	6	aux	_	_
5	never	_	RB	RB	_	6	neg	_	_
6	asked	_	VBN	VBN	_	0	root	_	_
7	the	_	DT	DT	_	8	det	_	_
8	NSG	_	NNP	NNP	_	6	dobj	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	any	_	DT	DT	_	11	det	_	_
11	exemption	_	NN	NN	_	9	pobj	_	_
12	to	_	TO	TO	_	6	prep	_	_
13	nuclear	_	JJ	JJ	_	15	amod	_	_
14	supply	_	NN	NN	_	15	nn	_	_
15	guidelines	_	NNS	NNS	_	12	pobj	_	_
16	or	_	CC	CC	_	6	cc	_	_
17	made	_	VBD	VBD	_	6	conj	_	_
18	any	_	DT	DT	_	20	det	_	_
19	Israeli-specific	_	NNP	NNP	_	20	nn	_	_
20	request	_	NN	NN	_	17	dobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	NSG	_	NNP	NNP	_	21	pobj	_	_
24	.	_	.	.	_	6	punct	_	_

Oracle:
(a2 / ask-02, ARG0, g / government-organization)
(a2 / ask-02, ARG1, e2 / exempt-01)
(a2 / ask-02, ARG2, o / organization)
(c / country, name, n / name)
(e2 / exempt-01, ARG1, c / country)
(e2 / exempt-01, purpose, g3 / guideline)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(g3 / guideline, mod, s / supply-01)
(m / make-03, ARG0, g / government-organization)
(m / make-03, ARG1, r / request-01)
(n / name, op, "Israel")
(n2 / name, op, "NSG")
(o / organization, name, n2 / name)
(o2 / or, op, a2 / ask-02)
(o2 / or, op, m / make-03)
(r / request-01, ARG0, c / country)
(r / request-01, ARG2, o / organization)
(r / request-01, mod, s2 / specific)
(s / supply-01, mod, n3 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),request,request-01,false), Span(20,21,List(1),specific,specific,false), Span(17,18,List(2),any,any,false), Span(15,16,List(3),or,or,false), Span(14,15,List(4),guidelines,guideline,false), Span(13,14,List(5),supply,supply-01,false), Span(12,13,List(6),nuclear,nucleus,false), Span(10,11,List(7),exemption,exempt-01,false), Span(9,10,List(8),any,any,false)),Map(2 -> any, 5 -> supply-01, 8 -> any, 7 -> exempt-01, 1 -> specific, 4 -> guideline, 6 -> nucleus, 0 -> request-01, 3 -> or),Map(e -> exempt-01, n -> nucleus, s2 -> supply-01, s -> specific, g -> guideline, a -> any, a2 -> any, r -> request-01, o -> or))),[Ljava.lang.String;@66d3eec0,Annotation([Ljava.lang.String;@1e04fa0a,[Ljava.lang.String;@1af2d44a,[Ljava.lang.String;@18d87d80),Annotation([Ljava.lang.String;@618425b5,[Ljava.lang.String;@58695725,[Ledu.cmu.lti.nlp.amr.Dependency;@543588e6),Annotation([Ljava.lang.String;@f5acb9d,[Ljava.lang.String;@4fb3ee4e,[Ljava.lang.String;@5d7148e2),Annotation([Ljava.lang.String;@25fb8912,[Ljava.lang.String;@7c24b813,[Ledu.cmu.lti.nlp.amr.Entity;@2c35e847))
AMR:
(e / exempt-01, ARG1, g / guideline)
(e / exempt-01, mod, a2 / any)
(o / or, op, g / guideline)
(o / or, op, r / request-01)
(r / request-01, ARG1, s / specific)
(r / request-01, mod, a / any)
(s2 / supply-01, ARG0, g / guideline)
(s2 / supply-01, mod, n / nucleus)

Decoded in 99,450 microseconds
Sentence: Israel is recognized as a full-fledged adherent to the NSG Guidelines.

NER Entity: (country :name (name :op "Israel"))
NER Entity: (organization :name (name :op "NSG" :op "Guidelines"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 0-1:  Israel => (country :name (name :op "Israel"))
Span 9-11:  to the => (organization :name (name :op "NSG" :op "Guidelines"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  adherent => adhere-02
Oracle Span 7-8:  fledged => fledge-01
Oracle Span 5-6:  full => full
Oracle Span 0-1:  Israel => (country :name (name :op "Israel"))
Oracle Span 11-13:  NSG Guidelines => (publication :name (name :op "Guidelines" :op "NSG"))
Oracle Span 2-3:  recognized => recognize-01

Extra span: to the => (organization :name (name :op "NSG" :op "Guidelines"))
Missing span: NSG Guidelines => (publication :name (name :op "Guidelines" :op "NSG"))
Missing span: recognized => recognize-01
Missing span: fledged => fledge-01
Missing span: full => full
Missing span: adherent => adhere-02
Dependencies:
1	Israel	_	NNP	NNP	_	3	nsubjpass	_	_
2	is	_	VBZ	VBZ	_	3	auxpass	_	_
3	recognized	_	VBN	VBN	_	0	root	_	_
4	as	_	IN	IN	_	3	prep	_	_
5	a	_	DT	DT	_	7	det	_	_
6	full-fledged	_	JJ	JJ	_	7	amod	_	_
7	adherent	_	NN	NN	_	4	pobj	_	_
8	to	_	TO	TO	_	3	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	NSG	_	NNP	NNP	_	11	nn	_	_
11	Guidelines	_	NNS	NNS	_	8	pobj	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(a / adhere-02, ARG0, c / country)
(a / adhere-02, ARG1, p / publication)
(c / country, name, n / name)
(f / fledge-01, ARG1, a / adhere-02)
(f / fledge-01, mod, f2 / full)
(n / name, op, "Israel")
(n2 / name, op, "Guidelines")
(n2 / name, op, "NSG")
(p / publication, name, n2 / name)
(r / recognize-01, ARG1, c / country)
(r / recognize-01, ARG2, a / adhere-02)

Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),to the,(organization :name (name :op "NSG" :op "Guidelines")),false), Span(0,1,List(6, 5, 4),Israel,(country :name (name :op "Israel")),false)),Map(2 -> "NSG", 5 -> name, 1 -> name, 4 -> country, 6 -> "Israel", 0 -> organization, 3 -> "Guidelines"),Map(n -> name, c -> country, o -> organization, n2 -> name))),[Ljava.lang.String;@7bd4937b,Annotation([Ljava.lang.String;@21e360a,[Ljava.lang.String;@5ba3f27a,[Ljava.lang.String;@58d75e99),Annotation([Ljava.lang.String;@74751b3,[Ljava.lang.String;@741a8937,[Ledu.cmu.lti.nlp.amr.Dependency;@306e95ec),Annotation([Ljava.lang.String;@52af26ee,[Ljava.lang.String;@6fd83fc1,[Ljava.lang.String;@4f2b503c),Annotation([Ljava.lang.String;@bae7dc0,[Ljava.lang.String;@209da20d,[Ledu.cmu.lti.nlp.amr.Entity;@e15b7e8))
AMR:
(c / country, consist, o / organization)
(c / country, name, n2 / name)
(n / name, op, "Guidelines")
(n / name, op, "NSG")
(n2 / name, op, "Israel")
(o / organization, name, n / name)

Decoded in 31,000 microseconds
Sentence: The Israeli government has urged the NSG to consider adopting a generic, multi-tiered, criteria-based approach towards nuclear technology transfers.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (organization :name (name :op "NSG"))
Spans:
Span 20-21:  approach => approach-02
Span 8-9:  consider => consider-02
Span 11-12:  generic => generic
Span 22-23:  nuclear => nucleus
Span 23-24:  technology => technology
Span 24-25:  transfers => transfer-01
Span 4-5:  urged => urge-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 9-10:  adopting => adopt-01
Oracle Span 20-21:  approach => approach-02
Oracle Span 19-20:  based => base-02
Oracle Span 8-9:  consider => consider-02
Oracle Span 17-18:  criteria => criterion
Oracle Span 11-12:  generic => generic
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 1-2:  Israeli => (country :name (name :op "Israel"))
Oracle Span 13-14:  multi => multiple
Oracle Span 6-7:  NSG => (organization :name (name :op "NSG"))
Oracle Span 22-23:  nuclear => nucleus
Oracle Span 23-24:  technology => technology
Oracle Span 15-16:  tiered => tier
Oracle Span 24-25:  transfers => transfer-01
Oracle Span 4-5:  urged => urge-01

Missing span: NSG => (organization :name (name :op "NSG"))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: adopting => adopt-01
Missing span: tiered => tier
Missing span: based => base-02
Missing span: criteria => criterion
Missing span: multi => multiple
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Israeli	_	JJ	JJ	_	3	amod	_	_
3	government	_	NN	NN	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	urged	_	VBN	VBN	_	0	root	_	_
6	the	_	DT	DT	_	7	det	_	_
7	NSG	_	NNP	NNP	_	5	dobj	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	consider	_	VB	VB	_	5	xcomp	_	_
10	adopting	_	VBG	VBG	_	9	xcomp	_	_
11	a	_	DT	DT	_	17	det	_	_
12	generic	_	JJ	JJ	_	17	amod	_	_
13	,	_	,	,	_	17	punct	_	_
14	multi-tiered	_	JJ	JJ	_	17	amod	_	_
15	,	_	,	,	_	17	punct	_	_
16	criteria-based	_	JJ	JJ	_	17	amod	_	_
17	approach	_	NN	NN	_	10	dobj	_	_
18	towards	_	IN	IN	_	10	prep	_	_
19	nuclear	_	JJ	JJ	_	21	amod	_	_
20	technology	_	NN	NN	_	21	nn	_	_
21	transfers	_	NNS	NNS	_	18	pobj	_	_
22	.	_	.	.	_	5	punct	_	_

Oracle:
(a / adopt-01, ARG0, o / organization)
(a / adopt-01, ARG1, a2 / approach-02)
(a2 / approach-02, ARG1, t2 / transfer-01)
(a2 / approach-02, manner, t / tier)
(a2 / approach-02, mod, g3 / generic)
(b / base-02, ARG1, a2 / approach-02)
(b / base-02, ARG2, c3 / criterion)
(c / country, name, n / name)
(c2 / consider-02, ARG0, o / organization)
(c2 / consider-02, ARG1, a / adopt-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "Israel")
(n2 / name, op, "NSG")
(o / organization, name, n2 / name)
(t / tier, quant, m / multiple)
(t2 / transfer-01, ARG1, t3 / technology)
(t3 / technology, mod, n3 / nucleus)
(u / urge-01, ARG0, g / government-organization)
(u / urge-01, ARG1, o / organization)
(u / urge-01, ARG2, c2 / consider-02)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),transfers,transfer-01,false), Span(23,24,List(1),technology,technology,false), Span(22,23,List(2),nuclear,nucleus,false), Span(20,21,List(3),approach,approach-02,false), Span(11,12,List(4),generic,generic,false), Span(8,9,List(5),consider,consider-02,false), Span(4,5,List(6),urged,urge-01,false)),Map(2 -> nucleus, 5 -> consider-02, 1 -> technology, 4 -> generic, 6 -> urge-01, 0 -> transfer-01, 3 -> approach-02),Map(n -> nucleus, t -> transfer-01, g -> generic, a -> approach-02, t2 -> technology, u -> urge-01, c -> consider-02))),[Ljava.lang.String;@1b2abca6,Annotation([Ljava.lang.String;@6392827e,[Ljava.lang.String;@2ed2d9cb,[Ljava.lang.String;@d5b810e),Annotation([Ljava.lang.String;@43dac38f,[Ljava.lang.String;@342c38f8,[Ledu.cmu.lti.nlp.amr.Dependency;@c88a337),Annotation([Ljava.lang.String;@5d0a1059,[Ljava.lang.String;@485966cc,[Ljava.lang.String;@1de76cc7),Annotation([Ljava.lang.String;@54bff557,[Ljava.lang.String;@593aaf41,[Ledu.cmu.lti.nlp.amr.Entity;@5a56cdac))
AMR:
(a / approach-02, ARG2, t / transfer-01)
(a / approach-02, mod, g / generic)
(c / consider-02, ARG1, a / approach-02)
(t / transfer-01, ARG1, t2 / technology)
(t2 / technology, mod, n / nucleus)
(u / urge-01, ARG2, c / consider-02)

Decoded in 87,497 microseconds
Sentence: Some officials from NSG countries have previously suggested an approach like the Israeli plan.

NER Entity: (country :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 9-10:  approach => approach-02
Span 4-5:  countries => country
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 6-7:  previously => previous
Span 7-8:  suggested => suggest-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  approach => approach-02
Oracle Span 4-5:  countries => country
Oracle Span 5-6:  have => (person :ARG0-of have-org-role-91)
Oracle Span 12-13:  Israeli => (name :op "Israel")
Oracle Span 3-4:  NSG => (organization :name (name :op "NSG"))
Oracle Span 1-2:  officials => official
Oracle Span 13-14:  plan => plan
Oracle Span 6-7:  previously => previous
Oracle Span 0-1:  Some => some
Oracle Span 7-8:  suggested => suggest-01

Incorrect span: officials => (have-org-role-91 :ARG2 official)
Missing span: NSG => (organization :name (name :op "NSG"))
Missing span: Israeli => (name :op "Israel")
Missing span: plan => plan
Missing span: officials => official
Missing span: Some => some
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	Some	_	DT	DT	_	2	det	_	_
2	officials	_	NNS	NNS	_	8	nsubj	_	_
3	from	_	IN	IN	_	2	prep	_	_
4	NSG	_	NNP	NNP	_	5	nn	_	_
5	countries	_	NNS	NNS	_	3	pobj	_	_
6	have	_	VBP	VBP	_	8	aux	_	_
7	previously	_	RB	RB	_	8	advmod	_	_
8	suggested	_	VBN	VBN	_	0	root	_	_
9	an	_	DT	DT	_	10	det	_	_
10	approach	_	NN	NN	_	8	dobj	_	_
11	like	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	Israeli	_	JJ	JJ	_	14	amod	_	_
14	plan	_	NN	NN	_	11	pobj	_	_
15	.	_	.	.	_	8	punct	_	_

Oracle:
(c / country, name, n2 / name)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "NSG")
(n2 / name, op, "Israel")
(o2 / organization, name, n / name)
(p / plan, mod, c / country)
(p3 / person, quant, s2 / some)
(s / suggest-01, ARG0, p3 / person)
(s / suggest-01, ARG1, a / approach-02)
(s / suggest-01, time, p2 / previous)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),approach,approach-02,false), Span(7,8,List(1),suggested,suggest-01,false), Span(6,7,List(2),previously,previous,false), Span(4,5,List(3),countries,country,false), Span(1,2,List(5, 4),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> previous, 5 -> official, 1 -> suggest-01, 4 -> have-org-role-91, 0 -> approach-02, 3 -> country),Map(h -> have-org-role-91, s -> suggest-01, p -> previous, a -> approach-02, c -> country, o -> official))),[Ljava.lang.String;@7c711375,Annotation([Ljava.lang.String;@57cf54e1,[Ljava.lang.String;@5b03b9fe,[Ljava.lang.String;@37d4349f),Annotation([Ljava.lang.String;@434a63ab,[Ljava.lang.String;@6e0f5f7f,[Ledu.cmu.lti.nlp.amr.Dependency;@2805d709),Annotation([Ljava.lang.String;@3ee37e5a,[Ljava.lang.String;@2ea41516,[Ljava.lang.String;@3a44431a),Annotation([Ljava.lang.String;@3c7f66c4,[Ljava.lang.String;@194bcebf,[Ledu.cmu.lti.nlp.amr.Entity;@17497425))
AMR:
(a / approach-02, ARG0, c / country)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(s / suggest-01, ARG1, a / approach-02)
(s / suggest-01, time, p / previous)

Decoded in 45,448 microseconds
Sentence: If modification of the NSG Guidelines were to take place along the lines proposed by Israeli officials the nuclear nonproliferation regime would be considerably enhanced.

NER Entity: (organization :name (name :op "NSG" :op "Guidelines"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 10-11:  along => along
Span 23-24:  considerably => considerably
Span 24-25:  enhanced => enhance-01
Span 12-13:  lines => line
Span 4-6:  NSG Guidelines => (organization :name (name :op "NSG" :op "Guidelines"))
Span 18-19:  nuclear => nucleus
Span 16-17:  officials => (have-org-role-91 :ARG2 official)
Span 13-14:  proposed => propose-01
Span 20-21:  regime => regime

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 23-24:  considerably => considerable
Oracle Span 24-25:  enhanced => enhance-01
Oracle Span 15-16:  Israeli => (country :name (name :op "Israel"))
Oracle Span 12-13:  lines => line
Oracle Span 1-2:  modification => modify-01
Oracle Span 4-6:  NSG Guidelines => (publication :name (name :op "Guidelines" :op "NSG"))
Oracle Span 18-19:  nuclear => nucleus
Oracle Span 16-17:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 13-14:  proposed => propose-01
Oracle Span 20-21:  regime => regime
Oracle Span 8-9:  take => take-14

Incorrect span: considerably => considerably
Extra span: along => along
Incorrect span: NSG Guidelines => (organization :name (name :op "NSG" :op "Guidelines"))
Missing span: NSG Guidelines => (publication :name (name :op "Guidelines" :op "NSG"))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: take => take-14
Missing span: modification => modify-01
Missing span: considerably => considerable
Dependencies:
1	If	_	IN	IN	_	7	mark	_	_
2	modification	_	NN	NN	_	7	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	NSG	_	NNP	NNP	_	6	nn	_	_
6	Guidelines	_	NNS	NNS	_	3	pobj	_	_
7	were	_	VBD	VBD	_	25	advcl	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	take	_	VB	VB	_	7	xcomp	_	_
10	place	_	NN	NN	_	9	dobj	_	_
11	along	_	IN	IN	_	9	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	lines	_	NNS	NNS	_	11	pobj	_	_
14	proposed	_	VBN	VBN	_	13	vmod	_	_
15	by	_	IN	IN	_	14	prep	_	_
16	Israeli	_	JJ	JJ	_	17	amod	_	_
17	officials	_	NNS	NNS	_	15	pobj	_	_
18	the	_	DT	DT	_	21	det	_	_
19	nuclear	_	JJ	JJ	_	21	amod	_	_
20	nonproliferation	_	NN	NN	_	21	nn	_	_
21	regime	_	NN	NN	_	25	nsubjpass	_	_
22	would	_	MD	MD	_	25	aux	_	_
23	be	_	VB	VB	_	25	auxpass	_	_
24	considerably	_	RB	RB	_	25	advmod	_	_
25	enhanced	_	VBN	VBN	_	0	root	_	_
26	.	_	.	.	_	25	punct	_	_

Oracle:
(c2 / country, name, n3 / name)
(e / enhance-01, ARG1, r / regime)
(e / enhance-01, condition, t / take-14)
(e / enhance-01, manner, c / considerable)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(m / modify-01, ARG1, p2 / publication)
(n2 / name, op, "Guidelines")
(n2 / name, op, "NSG")
(n3 / name, op, "Israel")
(p2 / publication, name, n2 / name)
(p3 / propose-01, ARG1, l / line)
(t / take-14, ARG1, m / modify-01)
(t / take-14, ARG2, l / line)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),enhanced,enhance-01,false), Span(23,24,List(1),considerably,considerably,false), Span(20,21,List(2),regime,regime,false), Span(18,19,List(3),nuclear,nucleus,false), Span(16,17,List(5, 4),officials,(have-org-role-91 :ARG2 official),false), Span(13,14,List(6),proposed,propose-01,false), Span(12,13,List(7),lines,line,false), Span(10,11,List(8),along,along,false), Span(4,6,List(12, 11, 10, 9),NSG Guidelines,(organization :name (name :op "NSG" :op "Guidelines")),false)),Map(2 -> regime, 5 -> official, 12 -> "Guidelines", 8 -> along, 7 -> line, 1 -> considerably, 4 -> have-org-role-91, 11 -> "NSG", 6 -> propose-01, 0 -> enhance-01, 9 -> organization, 3 -> nucleus, 10 -> name),Map(n -> nucleus, e -> enhance-01, h -> have-org-role-91, p -> propose-01, a -> along, o2 -> organization, r -> regime, l -> line, c -> considerably, o -> official, n2 -> name))),[Ljava.lang.String;@f0da945,Annotation([Ljava.lang.String;@4803b726,[Ljava.lang.String;@ffaa6af,[Ljava.lang.String;@53ce1329),Annotation([Ljava.lang.String;@316bcf94,[Ljava.lang.String;@6404f418,[Ledu.cmu.lti.nlp.amr.Dependency;@3e11f9e9),Annotation([Ljava.lang.String;@1de5f259,[Ljava.lang.String;@729d991e,[Ljava.lang.String;@31fa1761),Annotation([Ljava.lang.String;@957e06,[Ljava.lang.String;@32502377,[Ledu.cmu.lti.nlp.amr.Entity;@2c1b194a))
AMR:
(a / along, op, l / line)
(e / enhance-01, ARG1, r / regime)
(e / enhance-01, mod, c / considerably)
(h / have-org-role-91, ARG0, l / line)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, o / official)
(n2 / name, op, "Guidelines")
(n2 / name, op, "NSG")
(o2 / organization, name, n2 / name)
(p / propose-01, ARG1, l / line)
(r / regime, mod, n / nucleus)
(r / regime, mod, o2 / organization)

Decoded in 176,577 microseconds
Sentence: 2008-07-26

mkDayMonthYear(2008-07-26,26,07,2008)
mkDayMonthYear(2008-07-26,26,07,2008)
Spans:
Span 0-1:  2008-07-26 => (date-entity :day 26 :month 7 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2008-07-26 => (date-entity :year 2008 :day 26 :month 7)

Incorrect span: 2008-07-26 => (date-entity :day 26 :month 7 :year 2008)
Missing span: 2008-07-26 => (date-entity :year 2008 :day 26 :month 7)
Dependencies:
1	2008-07-26	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 26)
(d / date-entity, month, 7)
(d / date-entity, year, 2008)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-07-26,(date-entity :day 26 :month 7 :year 2008),false)),Map(2 -> 7, 1 -> 26, 0 -> date-entity, 3 -> 2008),Map(2 -> 26, 7 -> 7, d -> date-entity, 22 -> 2008))),[Ljava.lang.String;@4dbb42b7,Annotation([Ljava.lang.String;@66f57048,[Ljava.lang.String;@550dbc7a,[Ljava.lang.String;@21282ed8),Annotation([Ljava.lang.String;@36916eb0,[Ljava.lang.String;@7bab3f1a,[Ledu.cmu.lti.nlp.amr.Dependency;@437da279),Annotation([Ljava.lang.String;@23c30a20,[Ljava.lang.String;@1e1a0406,[Ljava.lang.String;@3cebbb30),Annotation([Ljava.lang.String;@12aba8be,[Ljava.lang.String;@290222c1,[Ledu.cmu.lti.nlp.amr.Entity;@67f639d3))
AMR:
(d / date-entity, day, 2 / 26)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2008)

Decoded in 10,943 microseconds
Sentence: Iran (IR)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "IR"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))

Incorrect span:  => amr-empty
Missing span: Iran => (country :name (name :op "Iran"))
Dependencies:
1	Iran	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	IR	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Iran")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@6253c26,Annotation([Ljava.lang.String;@49049a04,[Ljava.lang.String;@71a8adcf,[Ljava.lang.String;@27462a88),Annotation([Ljava.lang.String;@82de64a,[Ljava.lang.String;@659499f1,[Ledu.cmu.lti.nlp.amr.Dependency;@51e69659),Annotation([Ljava.lang.String;@47e2e487,[Ljava.lang.String;@201a4587,[Ljava.lang.String;@61001b64),Annotation([Ljava.lang.String;@4310d43,[Ljava.lang.String;@54a7079e,[Ledu.cmu.lti.nlp.amr.Entity;@26e356f0))
AMR:


Decoded in 5,620 microseconds
Sentence: International; proliferation

Spans:
Span 1-2:  ; => and

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 0-1:  International => international
Oracle Span 2-3:  proliferation => proliferate-01

Missing span: International => international
Missing span: proliferation => proliferate-01
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	proliferation	_	NN	NN	_	1	dep	_	_

Oracle:
(a / and, op, i / international)
(a / and, op, p / proliferate-01)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),;,and,false)),Map(0 -> and),Map(a -> and))),[Ljava.lang.String;@47d9a273,Annotation([Ljava.lang.String;@4b8ee4de,[Ljava.lang.String;@27f981c6,[Ljava.lang.String;@1b11171f),Annotation([Ljava.lang.String;@1151e434,[Ljava.lang.String;@2dc54ad4,[Ledu.cmu.lti.nlp.amr.Dependency;@4659191b),Annotation([Ljava.lang.String;@55634720,[Ljava.lang.String;@4b0d79fc,[Ljava.lang.String;@4c1909a3),Annotation([Ljava.lang.String;@428640fa,[Ljava.lang.String;@d9345cd,[Ledu.cmu.lti.nlp.amr.Entity;@2d710f1a))
AMR:


Decoded in 5,154 microseconds
Sentence: Ahmadinejad announces expansion of Iranian uranium-producing capability.

NER Entity: (person :name (name :op "Ahmadinejad"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 1-2:  announces => announce-01
Span 8-9:  capability => capable-41
Span 2-3:  expansion => expand-01
Span 7-8:  producing => produce-01
Span 5-6:  uranium => uranium

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 0-1:  Ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 1-2:  announces => announce-01
Oracle Span 8-9:  capability => capable-41
Oracle Span 2-3:  expansion => expand-01
Oracle Span 4-5:  Iranian => (country :name (name :op "Iran"))
Oracle Span 7-8:  producing => produce-01
Oracle Span 5-6:  uranium => uranium

Missing span: Ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: Iranian => (country :name (name :op "Iran"))
Dependencies:
1	Ahmadinejad	_	NNP	NNP	_	2	nsubj	_	_
2	announces	_	VBZ	VBZ	_	0	root	_	_
3	expansion	_	NN	NN	_	2	dobj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	Iranian	_	JJ	JJ	_	7	amod	_	_
6	uranium-producing	_	JJ	JJ	_	7	amod	_	_
7	capability	_	NN	NN	_	4	pobj	_	_
8	.	_	.	.	_	2	punct	_	_

Oracle:
(a / announce-01, ARG0, p / person)
(a / announce-01, ARG1, e / expand-01)
(c / capable-41, ARG1, c2 / country)
(c / capable-41, ARG2, p2 / produce-01)
(c2 / country, name, n2 / name)
(e / expand-01, ARG1, c / capable-41)
(n / name, op, "Ahmadinejad")
(n2 / name, op, "Iran")
(p / person, name, n / name)
(p2 / produce-01, ARG1, u / uranium)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),capability,capable-41,false), Span(7,8,List(1),producing,produce-01,false), Span(5,6,List(2),uranium,uranium,false), Span(2,3,List(3),expansion,expand-01,false), Span(1,2,List(4),announces,announce-01,false)),Map(2 -> uranium, 1 -> produce-01, 4 -> announce-01, 0 -> capable-41, 3 -> expand-01),Map(e -> expand-01, p -> produce-01, a -> announce-01, u -> uranium, c -> capable-41))),[Ljava.lang.String;@29215f06,Annotation([Ljava.lang.String;@59505b48,[Ljava.lang.String;@4efac082,[Ljava.lang.String;@6bd61f98),Annotation([Ljava.lang.String;@48aca48b,[Ljava.lang.String;@13fd2ccd,[Ledu.cmu.lti.nlp.amr.Dependency;@b9b00e0),Annotation([Ljava.lang.String;@506ae4d4,[Ljava.lang.String;@7d4f9aae,[Ljava.lang.String;@72e5a8e),Annotation([Ljava.lang.String;@54e1c68b,[Ljava.lang.String;@53aac487,[Ledu.cmu.lti.nlp.amr.Entity;@52b1beb6))
AMR:
(a / announce-01, ARG1, e / expand-01)
(e / expand-01, ARG1, c / capable-41)
(p / produce-01, ARG1, c / capable-41)
(p / produce-01, ARG2, u / uranium)

Decoded in 56,936 microseconds
Sentence: Iran refuses commitment to halt expansion but hints a possible future halt.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 2-3:  commitment => commit-01
Span 5-6:  expansion => expand-01
Span 10-11:  future => future
Span 11-12:  halt => halt-01
Span 4-5:  halt => halt-01
Span 9-10:  possible => possible
Span 1-2:  refuses => refuse-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 2-3:  commitment => commit-01
Oracle Span 5-6:  expansion => expand-01
Oracle Span 10-11:  future => future
Oracle Span 4-5:  halt => halt-01
Oracle Span 11-12:  halt => halt-01
Oracle Span 7-8:  hints => hint-01
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 9-10:  possible => possible
Oracle Span 1-2:  refuses => refuse-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: hints => hint-01
Dependencies:
1	Iran	_	NNP	NNP	_	2	nsubj	_	_
2	refuses	_	VBZ	VBZ	_	0	root	_	_
3	commitment	_	NN	NN	_	2	dobj	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	halt	_	VB	VB	_	2	vmod	_	_
6	expansion	_	NN	NN	_	5	dobj	_	_
7	but	_	CC	CC	_	2	cc	_	_
8	hints	_	VBZ	VBZ	_	2	conj	_	_
9	a	_	DT	DT	_	12	det	_	_
10	possible	_	JJ	JJ	_	12	amod	_	_
11	future	_	JJ	JJ	_	12	amod	_	_
12	halt	_	NN	NN	_	8	dobj	_	_
13	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / commit-01, ARG1, c / country)
(c2 / commit-01, ARG2, h / halt-01)
(h / halt-01, ARG0, c / country)
(h / halt-01, ARG1, e / expand-01)
(h2 / hint-01, ARG0, c / country)
(h2 / hint-01, ARG1, p / possible)
(h2 / hint-01, concession, r / refuse-01)
(h3 / halt-01, time, f / future)
(n / name, op, "Iran")
(p / possible, domain, h3 / halt-01)
(r / refuse-01, ARG0, c / country)
(r / refuse-01, ARG1, c2 / commit-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),halt,halt-01,false), Span(10,11,List(1),future,future,false), Span(9,10,List(2),possible,possible,false), Span(5,6,List(3),expansion,expand-01,false), Span(4,5,List(4),halt,halt-01,false), Span(2,3,List(5),commitment,commit-01,false), Span(1,2,List(6),refuses,refuse-01,false)),Map(2 -> possible, 5 -> commit-01, 1 -> future, 4 -> halt-01, 6 -> refuse-01, 0 -> halt-01, 3 -> expand-01),Map(e -> expand-01, h -> halt-01, h2 -> halt-01, p -> possible, r -> refuse-01, c -> commit-01, f -> future))),[Ljava.lang.String;@273e7444,Annotation([Ljava.lang.String;@7db12bb6,[Ljava.lang.String;@783a467b,[Ljava.lang.String;@272113c4),Annotation([Ljava.lang.String;@73e9cf30,[Ljava.lang.String;@771a660,[Ledu.cmu.lti.nlp.amr.Dependency;@2d52216b),Annotation([Ljava.lang.String;@242b836,[Ljava.lang.String;@3f6f6701,[Ljava.lang.String;@3527942a),Annotation([Ljava.lang.String;@942a29c,[Ljava.lang.String;@1ed6388a,[Ledu.cmu.lti.nlp.amr.Entity;@5a45133e))
AMR:
(c / commit-01, ARG1, h2 / halt-01)
(e / expand-01, ARG1, h / halt-01)
(h / halt-01, mod, p / possible)
(h / halt-01, time, f / future)
(h2 / halt-01, ARG1, e / expand-01)
(r / refuse-01, ARG1, c / commit-01)

Decoded in 140,032 microseconds
Sentence: 20080726 Iranian President Mahmoud ahmadinejad stated to scholars in the northeastern city of mashbad that Iran had expanded its arsenal of centrifuges producing enriched uranium to over 5000.

mkDayMonthYear(20080726,26,07,2008)
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (person :name (name :op "Mahmoud" :op "ahmadinejad"))
NER Entity: (country :name (name :op "mashbad"))
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(20080726,26,07,2008)
Spans:
Span 0-1:  20080726 => (date-entity :day 26 :month 7 :year 2008)
Span 27-28:  5000 => 5000
Span 19-20:  arsenal => arsenal
Span 21-22:  centrifuges => centrifuge
Span 11-12:  city => city
Span 23-24:  enriched => enrich-01
Span 17-18:  expanded => expand-01
Span 3-5:  Mahmoud ahmadinejad => (person :name (name :op "Mahmoud" :op "ahmadinejad"))
Span 10-11:  northeastern => northeast
Span 2-3:  President => (have-org-role-91 :ARG2 president)
Span 22-23:  producing => produce-01
Span 7-8:  scholars => scholar
Span 24-25:  uranium => uranium

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 0-1:  20080726 => (date-entity :day 26 :month 7 :year 2008)
Oracle Span 27-28:  5000 => 5000
Oracle Span 19-20:  arsenal => arsenal
Oracle Span 21-22:  centrifuges => centrifuge
Oracle Span 11-12:  city => city
Oracle Span 23-24:  enriched => enrich-01
Oracle Span 17-18:  expanded => expand-01
Oracle Span 16-17:  had => have-org-role-91
Oracle Span 15-16:  Iran => (country :name (name :op "Iran"))
Oracle Span 3-5:  Mahmoud ahmadinejad => (person :name (name :op "Ahmadinejad" :op "Mahmoud"))
Oracle Span 13-14:  mashbad => (name :op "Mashbad")
Oracle Span 10-11:  northeastern => northeast
Oracle Span 26-27:  over => over
Oracle Span 2-3:  President => president
Oracle Span 22-23:  producing => produce-01
Oracle Span 7-8:  scholars => scholar
Oracle Span 5-6:  stated => state-01
Oracle Span 24-25:  uranium => uranium

Incorrect span: Mahmoud ahmadinejad => (person :name (name :op "Mahmoud" :op "ahmadinejad"))
Incorrect span: President => (have-org-role-91 :ARG2 president)
Missing span: Mahmoud ahmadinejad => (person :name (name :op "Ahmadinejad" :op "Mahmoud"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: mashbad => (name :op "Mashbad")
Missing span: stated => state-01
Missing span: over => over
Missing span: President => president
Missing span: had => have-org-role-91
Dependencies:
1	20080726	_	CD	CD	_	5	num	_	_
2	Iranian	_	JJ	JJ	_	5	amod	_	_
3	President	_	NNP	NNP	_	5	nn	_	_
4	Mahmoud	_	NNP	NNP	_	5	nn	_	_
5	ahmadinejad	_	NN	NN	_	6	nsubj	_	_
6	stated	_	VBD	VBD	_	0	root	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	scholars	_	NNS	NNS	_	7	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	northeastern	_	JJ	JJ	_	12	amod	_	_
12	city	_	NN	NN	_	9	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	mashbad	_	NN	NN	_	13	pobj	_	_
15	that	_	IN	IN	_	18	mark	_	_
16	Iran	_	NNP	NNP	_	18	nsubj	_	_
17	had	_	VBD	VBD	_	18	aux	_	_
18	expanded	_	VBN	VBN	_	6	ccomp	_	_
19	its	_	PRP$	PRP$	_	20	poss	_	_
20	arsenal	_	NN	NN	_	18	dobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	centrifuges	_	NNS	NNS	_	21	pobj	_	_
23	producing	_	VBG	VBG	_	22	vmod	_	_
24	enriched	_	JJ	JJ	_	25	amod	_	_
25	uranium	_	NN	NN	_	23	dobj	_	_
26	to	_	TO	TO	_	23	prep	_	_
27	over	_	IN	IN	_	28	quantmod	_	_
28	5000	_	CD	CD	_	26	pobj	_	_
29	.	_	.	.	_	6	punct	_	_

Oracle:
(a / arsenal, poss, c / country)
(c / country, name, n2 / name)
(c2 / city, mod, n4 / northeast)
(c2 / city, name, n3 / name)
(c3 / centrifuge, consist, a / arsenal)
(d / date-entity, day, 26)
(d / date-entity, month, 7)
(d / date-entity, year, 2008)
(e / expand-01, ARG0, c / country)
(e / expand-01, ARG1, a / arsenal)
(e / expand-01, ARG4, o / over)
(e2 / enrich-01, ARG1, u / uranium)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Ahmadinejad")
(n / name, op, "Mahmoud")
(n2 / name, op, "Iran")
(n3 / name, op, "Mashbad")
(o / over, quant, 5 / 5000)
(p / person, name, n / name)
(p3 / produce-01, ARG0, c3 / centrifuge)
(p3 / produce-01, ARG1, u / uranium)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, e / expand-01)
(s / state-01, ARG2, s2 / scholar)
(s / state-01, location, c2 / city)
(s / state-01, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),5000,5000,false), Span(24,25,List(1),uranium,uranium,false), Span(23,24,List(2),enriched,enrich-01,false), Span(22,23,List(3),producing,produce-01,false), Span(21,22,List(4),centrifuges,centrifuge,false), Span(19,20,List(5),arsenal,arsenal,false), Span(17,18,List(6),expanded,expand-01,false), Span(11,12,List(7),city,city,false), Span(10,11,List(8),northeastern,northeast,false), Span(7,8,List(9),scholars,scholar,false), Span(3,5,List(13, 12, 11, 10),Mahmoud ahmadinejad,(person :name (name :op "Mahmoud" :op "ahmadinejad")),false), Span(2,3,List(15, 14),President,(have-org-role-91 :ARG2 president),false), Span(0,1,List(19, 18, 17, 16),20080726,(date-entity :day 26 :month 7 :year 2008),false)),Map(2 -> enrich-01, 5 -> arsenal, 12 -> "Mahmoud", 15 -> president, 8 -> northeast, 18 -> 7, 7 -> city, 17 -> 26, 1 -> uranium, 4 -> centrifuge, 11 -> name, 14 -> have-org-role-91, 6 -> expand-01, 0 -> 5000, 9 -> scholar, 16 -> date-entity, 19 -> 2008, 3 -> produce-01, 10 -> person, 13 -> "ahmadinejad"),Map(e -> enrich-01, n -> northeast, h -> have-org-role-91, 2 -> 26, 5 -> 5000, e2 -> expand-01, p2 -> person, s -> scholar, 7 -> 7, d -> date-entity, p -> produce-01, a -> arsenal, c -> centrifuge, u -> uranium, 22 -> 2008, p3 -> president, c2 -> city, n2 -> name))),[Ljava.lang.String;@534a5a98,Annotation([Ljava.lang.String;@4f80542f,[Ljava.lang.String;@60bd273d,[Ljava.lang.String;@121314f7),Annotation([Ljava.lang.String;@130c12b7,[Ljava.lang.String;@5e600dd5,[Ledu.cmu.lti.nlp.amr.Dependency;@576d5deb),Annotation([Ljava.lang.String;@5d534f5d,[Ljava.lang.String;@2e3967ea,[Ljava.lang.String;@70e9c95d),Annotation([Ljava.lang.String;@4d5650ae,[Ljava.lang.String;@a38c7fe,[Ledu.cmu.lti.nlp.amr.Entity;@6fdbe764))
AMR:
(c2 / city, mod, n / northeast)
(d / date-entity, day, 2 / 26)
(d / date-entity, month, 7 / 7)
(d / date-entity, op, e / enrich-01)
(d / date-entity, year, 22 / 2008)
(e / enrich-01, ARG0, 5 / 5000)
(e / enrich-01, ARG1, u / uranium)
(e2 / expand-01, ARG0, p2 / person)
(e2 / expand-01, ARG1, a / arsenal)
(e2 / expand-01, ARG2, s / scholar)
(e2 / expand-01, instrument, u / uranium)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, p3 / president)
(n2 / name, op, "Mahmoud")
(n2 / name, op, "ahmadinejad")
(p / produce-01, ARG0, c / centrifuge)
(p / produce-01, ARG1, u / uranium)
(p2 / person, name, n2 / name)
(s / scholar, location, c2 / city)

Decoded in 571,089 microseconds
Sentence: The statement was ahmadinejad's first asserting an expansion since the 20080400 announcement that Iran was approaching the implementation of 6000 centrifuges.

mkDayMonthYear(20080400,00,04,2008)
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(20080400,00,04,2008)
Spans:
Span 11-12:  20080400 => (date-entity :day 0 :month 4 :year 2008)
Span 20-21:  6000 => 6000
Span 16-17:  approaching => approach-01
Span 21-22:  centrifuges => centrifuge
Span 8-9:  expansion => expand-01
Span 18-19:  implementation => implement-01
Span 9-10:  since => since

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 11-12:  20080400 => 2008
Oracle Span 20-21:  6000 => 6000
Oracle Span 3-4:  ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 12-13:  announcement => announce-01
Oracle Span 16-17:  approaching => approach-01
Oracle Span 6-7:  asserting => assert-03
Oracle Span 21-22:  centrifuges => centrifuge
Oracle Span 8-9:  expansion => expand-01
Oracle Span 18-19:  implementation => implement-01
Oracle Span 14-15:  Iran => (country :name (name :op "Iran"))
Oracle Span 9-10:  since => since
Oracle Span 1-2:  statement => state-01

Incorrect span: 20080400 => (date-entity :day 0 :month 4 :year 2008)
Missing span: ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: asserting => assert-03
Missing span: statement => state-01
Missing span: announcement => announce-01
Missing span: 20080400 => 2008
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	statement	_	NN	NN	_	4	nsubj	_	_
3	was	_	VBD	VBD	_	4	cop	_	_
4	ahmadinejad	_	JJ	JJ	_	0	root	_	_
5	's	_	VBZ	VBZ	_	7	aux	_	_
6	first	_	RB	RB	_	7	advmod	_	_
7	asserting	_	VBG	VBG	_	4	ccomp	_	_
8	an	_	DT	DT	_	9	det	_	_
9	expansion	_	NN	NN	_	7	dobj	_	_
10	since	_	IN	IN	_	7	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	20080400	_	CD	CD	_	13	num	_	_
13	announcement	_	NN	NN	_	10	pobj	_	_
14	that	_	IN	IN	_	17	mark	_	_
15	Iran	_	NNP	NNP	_	17	nsubj	_	_
16	was	_	VBD	VBD	_	17	aux	_	_
17	approaching	_	VBG	VBG	_	4	ccomp	_	_
18	the	_	DT	DT	_	19	det	_	_
19	implementation	_	NN	NN	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	6000	_	CD	CD	_	22	num	_	_
22	centrifuges	_	NNS	NNS	_	20	pobj	_	_
23	.	_	.	.	_	4	punct	_	_

Oracle:
(a / assert-03, ARG0, p / person)
(a / assert-03, ARG1, e / expand-01)
(a2 / announce-01, ARG1, a3 / approach-01)
(a3 / approach-01, ARG1, c / country)
(a3 / approach-01, ARG2, i / implement-01)
(c / country, name, n2 / name)
(c2 / centrifuge, quant, 6 / 6000)
(i / implement-01, ARG0, c / country)
(i / implement-01, ARG1, c2 / centrifuge)
(n / name, op, "Ahmadinejad")
(n2 / name, op, "Iran")
(p / person, name, n / name)
(s / state-01, ARG1, a / assert-03)
(s2 / since, op, a2 / announce-01)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),centrifuges,centrifuge,false), Span(20,21,List(1),6000,6000,false), Span(18,19,List(2),implementation,implement-01,false), Span(16,17,List(3),approaching,approach-01,false), Span(11,12,List(7, 6, 5, 4),20080400,(date-entity :day 0 :month 4 :year 2008),false), Span(9,10,List(8),since,since,false), Span(8,9,List(9),expansion,expand-01,false)),Map(2 -> implement-01, 5 -> 0, 8 -> since, 7 -> 2008, 1 -> 6000, 4 -> date-entity, 6 -> 4, 9 -> expand-01, 0 -> centrifuge, 3 -> approach-01),Map(e -> expand-01, 2 -> 2008, s -> since, d -> date-entity, 4 -> 4, a -> approach-01, i -> implement-01, 6 -> 6000, c -> centrifuge, 0 -> 0))),[Ljava.lang.String;@51c668e3,Annotation([Ljava.lang.String;@2e6a8155,[Ljava.lang.String;@6221a451,[Ljava.lang.String;@52719fb6),Annotation([Ljava.lang.String;@3012646b,[Ljava.lang.String;@4a883b15,[Ledu.cmu.lti.nlp.amr.Dependency;@25641d39),Annotation([Ljava.lang.String;@7b36aa0c,[Ljava.lang.String;@5824a83d,[Ljava.lang.String;@537f60bf),Annotation([Ljava.lang.String;@5677323c,[Ljava.lang.String;@18df8434,[Ledu.cmu.lti.nlp.amr.Entity;@65c7a252))
AMR:
(a / approach-01, ARG1, i / implement-01)
(c / centrifuge, quant, 6 / 6000)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2008)
(e / expand-01, ARG1, i / implement-01)
(e / expand-01, time, s / since)
(i / implement-01, ARG1, c / centrifuge)
(i / implement-01, ARG2, d / date-entity)

Decoded in 200,539 microseconds
Sentence: Iran articulated the goal of 50000 centrifuges operating at the enrichment plant near the town of Natanz.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Natanz"))
Spans:
Span 5-6:  50000 => 50000
Span 6-7:  centrifuges => centrifuge
Span 10-11:  enrichment => enrich-01
Span 3-4:  goal => goal
Span 16-17:  Natanz => (city :name (name :op "Natanz"))
Span 12-13:  near => near
Span 7-8:  operating => operate-01
Span 11-12:  plant => plant
Span 14-15:  town => town

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 5-6:  50000 => 50000
Oracle Span 1-2:  articulated => articulate-01
Oracle Span 6-7:  centrifuges => centrifuge
Oracle Span 10-11:  enrichment => enrich-01
Oracle Span 3-4:  goal => goal
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 16-17:  Natanz => (name :op "Natanz")
Oracle Span 12-13:  near => near
Oracle Span 7-8:  operating => operate-01
Oracle Span 11-12:  plant => plant
Oracle Span 14-15:  town => town

Incorrect span: Natanz => (city :name (name :op "Natanz"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Natanz => (name :op "Natanz")
Missing span: articulated => articulate-01
Dependencies:
1	Iran	_	NNP	NNP	_	2	nsubj	_	_
2	articulated	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	goal	_	NN	NN	_	2	dobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	50000	_	CD	CD	_	7	num	_	_
7	centrifuges	_	NNS	NNS	_	5	pobj	_	_
8	operating	_	VBG	VBG	_	7	vmod	_	_
9	at	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	enrichment	_	JJ	JJ	_	12	amod	_	_
12	plant	_	NN	NN	_	9	pobj	_	_
13	near	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	town	_	NN	NN	_	13	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	Natanz	_	NNP	NNP	_	16	pobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(a / articulate-01, ARG0, c / country)
(a / articulate-01, ARG1, g / goal)
(c / country, name, n / name)
(c2 / centrifuge, quant, 5 / 50000)
(e / enrich-01, ARG0, p / plant)
(g / goal, mod, c2 / centrifuge)
(n / name, op, "Iran")
(n2 / name, op, "Natanz")
(n3 / near, op, t / town)
(o / operate-01, ARG1, c2 / centrifuge)
(o / operate-01, location, p / plant)
(p / plant, location, n3 / near)
(t / town, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),Natanz,(city :name (name :op "Natanz")),false), Span(14,15,List(3),town,town,false), Span(12,13,List(4),near,near,false), Span(11,12,List(5),plant,plant,false), Span(10,11,List(6),enrichment,enrich-01,false), Span(7,8,List(7),operating,operate-01,false), Span(6,7,List(8),centrifuges,centrifuge,false), Span(5,6,List(9),50000,50000,false), Span(3,4,List(10),goal,goal,false)),Map(2 -> "Natanz", 5 -> plant, 8 -> centrifuge, 7 -> operate-01, 1 -> name, 4 -> near, 6 -> enrich-01, 9 -> 50000, 0 -> city, 10 -> goal, 3 -> town),Map(e -> enrich-01, n -> name, 5 -> 50000, t -> town, g -> goal, p -> plant, c -> city, o -> operate-01, c2 -> centrifuge, n2 -> near))),[Ljava.lang.String;@4d154ccd,Annotation([Ljava.lang.String;@229c6181,[Ljava.lang.String;@4686afc2,[Ljava.lang.String;@1e0b4072),Annotation([Ljava.lang.String;@791f145a,[Ljava.lang.String;@38cee291,[Ledu.cmu.lti.nlp.amr.Dependency;@4b45a2f5),Annotation([Ljava.lang.String;@f09733f,[Ljava.lang.String;@e350b40,[Ljava.lang.String;@41a0aa7d),Annotation([Ljava.lang.String;@2794eab6,[Ljava.lang.String;@6340e5f0,[Ledu.cmu.lti.nlp.amr.Entity;@45099dd3))
AMR:
(c / city, name, n / name)
(e / enrich-01, ARG1, 5 / 50000)
(g / goal, mod, c2 / centrifuge)
(n / name, op, "Natanz")
(o / operate-01, ARG1, c2 / centrifuge)
(o / operate-01, ARG2, p / plant)
(p / plant, location, n2 / near)
(p / plant, location, t / town)
(p / plant, mod, e / enrich-01)
(t / town, name, c / city)

Decoded in 142,173 microseconds
Sentence: The international community has demanded that Iran halt the production of nuclear material.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 2-3:  community => community
Span 4-5:  demanded => demand-01
Span 7-8:  halt => halt-01
Span 12-13:  material => material
Span 11-12:  nuclear => nucleus
Span 9-10:  production => produce-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  community => community
Oracle Span 4-5:  demanded => demand-01
Oracle Span 7-8:  halt => halt-01
Oracle Span 1-2:  international => international
Oracle Span 6-7:  Iran => (country :name (name :op "Iran"))
Oracle Span 12-13:  material => material
Oracle Span 11-12:  nuclear => nucleus
Oracle Span 9-10:  production => produce-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: international => international
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	international	_	JJ	JJ	_	3	amod	_	_
3	community	_	NN	NN	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	demanded	_	VBN	VBN	_	0	root	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	Iran	_	NNP	NNP	_	8	nsubj	_	_
8	halt	_	VBP	VBP	_	5	ccomp	_	_
9	the	_	DT	DT	_	10	det	_	_
10	production	_	NN	NN	_	8	dobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	nuclear	_	JJ	JJ	_	13	amod	_	_
13	material	_	NN	NN	_	11	pobj	_	_
14	.	_	.	.	_	5	punct	_	_

Oracle:
(c / community, mod, i / international)
(c2 / country, name, n / name)
(d / demand-01, ARG0, c / community)
(d / demand-01, ARG1, h / halt-01)
(h / halt-01, ARG0, c2 / country)
(h / halt-01, ARG1, p / produce-01)
(m / material, mod, n2 / nucleus)
(n / name, op, "Iran")
(p / produce-01, ARG1, m / material)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),material,material,false), Span(11,12,List(1),nuclear,nucleus,false), Span(9,10,List(2),production,produce-01,false), Span(7,8,List(3),halt,halt-01,false), Span(4,5,List(4),demanded,demand-01,false), Span(2,3,List(5),community,community,false)),Map(2 -> produce-01, 5 -> community, 1 -> nucleus, 4 -> demand-01, 0 -> material, 3 -> halt-01),Map(n -> nucleus, h -> halt-01, d -> demand-01, m -> material, p -> produce-01, c -> community))),[Ljava.lang.String;@13e344d,Annotation([Ljava.lang.String;@1ffaf86,[Ljava.lang.String;@6574a52c,[Ljava.lang.String;@6c1a5b54),Annotation([Ljava.lang.String;@1c7696c6,[Ljava.lang.String;@60099951,[Ledu.cmu.lti.nlp.amr.Dependency;@20140db9),Annotation([Ljava.lang.String;@1e6a3214,[Ljava.lang.String;@368247b9,[Ljava.lang.String;@1a6d8329),Annotation([Ljava.lang.String;@1a942c18,[Ljava.lang.String;@55a147cc,[Ledu.cmu.lti.nlp.amr.Entity;@71ba6d4e))
AMR:
(d / demand-01, ARG0, c / community)
(d / demand-01, ARG1, h / halt-01)
(h / halt-01, ARG1, p / produce-01)
(m / material, mod, n / nucleus)
(p / produce-01, ARG1, m / material)

Decoded in 41,821 microseconds
Sentence: Media reports differed on the number of centrifuges ahmadinejad cited.

Spans:
Span 7-8:  centrifuges => centrifuge
Span 9-10:  cited => cite-01
Span 0-1:  Media => media

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 7-8:  centrifuges => centrifuge
Oracle Span 9-10:  cited => cite-01
Oracle Span 2-3:  differed => differ-01
Oracle Span 0-1:  Media => media
Oracle Span 5-6:  number => number
Oracle Span 1-2:  reports => (thing :ARG1-of report-01)

Missing span: ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: differed => differ-01
Missing span: number => number
Missing span: reports => (thing :ARG1-of report-01)
Dependencies:
1	Media	_	NNP	NNP	_	2	nn	_	_
2	reports	_	NNS	NNS	_	10	nsubj	_	_
3	differed	_	VBN	VBN	_	2	vmod	_	_
4	on	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	number	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	centrifuges	_	NNS	NNS	_	7	pobj	_	_
9	ahmadinejad	_	VBN	VBN	_	8	vmod	_	_
10	cited	_	VBD	VBD	_	0	root	_	_
11	.	_	.	.	_	10	punct	_	_

Oracle:
(c / cite-01, ARG0, p / person)
(c / cite-01, ARG1, n2 / number)
(c2 / centrifuge, quant, n2 / number)
(d / differ-01, ARG0, t / thing)
(d / differ-01, ARG2, n2 / number)
(n / name, op, "Ahmadinejad")
(p / person, name, n / name)
(r / report-01, ARG0, m / media)
(r / report-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),cited,cite-01,false), Span(7,8,List(1),centrifuges,centrifuge,false), Span(0,1,List(2),Media,media,false)),Map(2 -> media, 1 -> centrifuge, 0 -> cite-01),Map(m -> media, c -> cite-01, c2 -> centrifuge))),[Ljava.lang.String;@738dc9b,Annotation([Ljava.lang.String;@3c77d488,[Ljava.lang.String;@63376bed,[Ljava.lang.String;@4145bad8),Annotation([Ljava.lang.String;@d86a6f,[Ljava.lang.String;@2892d68,[Ledu.cmu.lti.nlp.amr.Dependency;@5ab956d7),Annotation([Ljava.lang.String;@3646a422,[Ljava.lang.String;@750e2b97,[Ljava.lang.String;@3e27aa33),Annotation([Ljava.lang.String;@2e385cce,[Ljava.lang.String;@2ddc9a9f,[Ledu.cmu.lti.nlp.amr.Entity;@298a5e20))
AMR:
(c / cite-01, ARG0, m / media)
(c / cite-01, ARG1, c2 / centrifuge)

Decoded in 22,480 microseconds
Sentence: An Iranian news agency reported that ahmadinejad stated Iran had 6000 working centrifuges but the agency subsequently removed the statement from the Internet.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Internet"))
Spans:
Span 10-11:  6000 => 6000
Span 15-16:  agency => agency
Span 3-4:  agency => agency
Span 12-13:  centrifuges => centrifuge
Span 2-3:  news => news
Span 17-18:  removed => remove-01
Span 4-5:  reported => report-01
Span 16-17:  subsequently => subsequent

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 10-11:  6000 => 6000
Oracle Span 3-4:  agency => agency
Oracle Span 6-7:  ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 12-13:  centrifuges => centrifuge
Oracle Span 9-10:  had => have-03
Oracle Span 22-23:  Internet => internet
Oracle Span 8-9:  Iran => (country :name (name :op "Iran"))
Oracle Span 2-3:  news => news
Oracle Span 17-18:  removed => remove-01
Oracle Span 4-5:  reported => report-01
Oracle Span 7-8:  stated => state-01
Oracle Span 16-17:  subsequently => subsequent
Oracle Span 11-12:  working => work-09

Extra span: agency => agency
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: Internet => internet
Missing span: stated => state-01
Missing span: had => have-03
Missing span: working => work-09
Dependencies:
1	An	_	DT	DT	_	4	det	_	_
2	Iranian	_	JJ	JJ	_	4	amod	_	_
3	news	_	NN	NN	_	4	nn	_	_
4	agency	_	NN	NN	_	5	nsubj	_	_
5	reported	_	VBD	VBD	_	0	root	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	ahmadinejad	_	NN	NN	_	8	nsubj	_	_
8	stated	_	VBD	VBD	_	5	ccomp	_	_
9	Iran	_	NNP	NNP	_	10	nsubj	_	_
10	had	_	VBD	VBD	_	8	ccomp	_	_
11	6000	_	CD	CD	_	13	num	_	_
12	working	_	VBG	VBG	_	13	amod	_	_
13	centrifuges	_	NNS	NNS	_	10	dobj	_	_
14	but	_	CC	CC	_	5	cc	_	_
15	the	_	DT	DT	_	16	det	_	_
16	agency	_	NN	NN	_	18	nsubj	_	_
17	subsequently	_	RB	RB	_	18	advmod	_	_
18	removed	_	VBD	VBD	_	5	conj	_	_
19	the	_	DT	DT	_	20	det	_	_
20	statement	_	NN	NN	_	18	dobj	_	_
21	from	_	IN	IN	_	18	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	Internet	_	NN	NN	_	21	pobj	_	_
24	.	_	.	.	_	5	punct	_	_

Oracle:
(a / agency, mod, c / country)
(a / agency, mod, n / news)
(c / country, name, n2 / name)
(c2 / centrifuge, quant, 6 / 6000)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, c2 / centrifuge)
(n2 / name, op, "Iran")
(n3 / name, op, "Ahmadinejad")
(p / person, name, n3 / name)
(r / report-01, ARG0, a / agency)
(r / report-01, ARG1, s / state-01)
(r2 / remove-01, ARG0, a / agency)
(r2 / remove-01, ARG1, s / state-01)
(r2 / remove-01, ARG2, i / internet)
(r2 / remove-01, concession, r / report-01)
(r2 / remove-01, time, s2 / subsequent)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, h / have-03)
(w / work-09, ARG0, c2 / centrifuge)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),removed,remove-01,false), Span(16,17,List(1),subsequently,subsequent,false), Span(15,16,List(2),agency,agency,false), Span(12,13,List(3),centrifuges,centrifuge,false), Span(10,11,List(4),6000,6000,false), Span(4,5,List(5),reported,report-01,false), Span(3,4,List(6),agency,agency,false), Span(2,3,List(7),news,news,false)),Map(2 -> agency, 5 -> report-01, 7 -> news, 1 -> subsequent, 4 -> 6000, 6 -> agency, 0 -> remove-01, 3 -> centrifuge),Map(n -> news, s -> subsequent, r2 -> report-01, a -> agency, a2 -> agency, r -> remove-01, 6 -> 6000, c -> centrifuge))),[Ljava.lang.String;@2a7f1f10,Annotation([Ljava.lang.String;@46cdf8bd,[Ljava.lang.String;@f0c8a99,[Ljava.lang.String;@740cae06),Annotation([Ljava.lang.String;@26d9b808,[Ljava.lang.String;@f78a47e,[Ledu.cmu.lti.nlp.amr.Dependency;@644baf4a),Annotation([Ljava.lang.String;@7526515b,[Ljava.lang.String;@1ed4ae0f,[Ljava.lang.String;@54c5a2ff),Annotation([Ljava.lang.String;@6d4d66d2,[Ljava.lang.String;@2a265ea9,[Ledu.cmu.lti.nlp.amr.Entity;@11392934))
AMR:
(a2 / agency, mod, n / news)
(c / centrifuge, quant, 6 / 6000)
(r / remove-01, ARG0, a / agency)
(r / remove-01, ARG1, a2 / agency)
(r / remove-01, mod, s / subsequent)
(r2 / report-01, ARG0, a2 / agency)
(r2 / report-01, ARG1, 6 / 6000)

Decoded in 218,923 microseconds
Sentence: Another Iranian news agency stated that ahmadinejad referred to 100000s of centrifuges.

NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 9-10:  100000s => 100000
Span 3-4:  agency => agency
Span 0-1:  Another => another
Span 11-12:  centrifuges => centrifuge
Span 2-3:  news => news
Span 7-8:  referred => refer-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  100000s => 100000
Oracle Span 3-4:  agency => agency
Oracle Span 6-7:  ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 0-1:  Another => another
Oracle Span 11-12:  centrifuges => centrifuge
Oracle Span 1-2:  Iranian => (country :name (name :op "Iran"))
Oracle Span 2-3:  news => news
Oracle Span 7-8:  referred => refer-01
Oracle Span 4-5:  stated => state-01

Missing span: ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Dependencies:
1	Another	_	DT	DT	_	4	det	_	_
2	Iranian	_	JJ	JJ	_	4	amod	_	_
3	news	_	NN	NN	_	4	nn	_	_
4	agency	_	NN	NN	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	ahmadinejad	_	NN	NN	_	8	nsubj	_	_
8	referred	_	VBD	VBD	_	5	ccomp	_	_
9	to	_	TO	TO	_	8	prep	_	_
10	100000s	_	NNS	NNS	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	centrifuges	_	NNS	NNS	_	11	pobj	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(a / agency, mod, a2 / another)
(a / agency, mod, c / country)
(a / agency, mod, n / news)
(c / country, name, n2 / name)
(n2 / name, op, "Iran")
(n3 / name, op, "Ahmadinejad")
(p / person, name, n3 / name)
(r / refer-01, ARG0, p / person)
(r / refer-01, ARG1, c2 / centrifuge)
(s / state-01, ARG0, a / agency)
(s / state-01, ARG1, r / refer-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),centrifuges,centrifuge,false), Span(9,10,List(1),100000s,100000,false), Span(7,8,List(2),referred,refer-01,false), Span(3,4,List(3),agency,agency,false), Span(2,3,List(4),news,news,false), Span(0,1,List(5),Another,another,false)),Map(2 -> refer-01, 5 -> another, 1 -> 100000, 4 -> news, 0 -> centrifuge, 3 -> agency),Map(n -> news, 1 -> 100000, a -> agency, a2 -> another, r -> refer-01, c -> centrifuge))),[Ljava.lang.String;@6892b3b6,Annotation([Ljava.lang.String;@6e6f2380,[Ljava.lang.String;@76a4ebf2,[Ljava.lang.String;@2e8c1c9b),Annotation([Ljava.lang.String;@53fe15ff,[Ljava.lang.String;@449a4f23,[Ledu.cmu.lti.nlp.amr.Dependency;@1530c739),Annotation([Ljava.lang.String;@5b1669c0,[Ljava.lang.String;@78e4deb0,[Ljava.lang.String;@6e9175d8),Annotation([Ljava.lang.String;@7d0b7e3c,[Ljava.lang.String;@15bb5034,[Ledu.cmu.lti.nlp.amr.Entity;@4b741d6d))
AMR:
(a / agency, mod, a2 / another)
(a / agency, mod, n / news)
(r / refer-01, ARG0, a / agency)
(r / refer-01, ARG1, 1 / 100000)
(r / refer-01, location, c / centrifuge)

Decoded in 40,434 microseconds
Sentence: Experts discounted the significance of ahmadinejad's claim in the absence of information on the centrifuges' functionality.

Spans:
Span 15-16:  centrifuges => centrifuge
Span 7-8:  claim => claim-01
Span 0-1:  Experts => (person :ARG1-of expert-41)
Span 12-13:  information => information

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 10-11:  absence => absent-01
Oracle Span 5-6:  ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 15-16:  centrifuges => centrifuge
Oracle Span 7-8:  claim => (thing :ARG1-of claim-01)
Oracle Span 1-2:  discounted => discount-02
Oracle Span 0-1:  Experts => (person :ARG1-of expert-41)
Oracle Span 17-18:  functionality => functionality
Oracle Span 12-13:  information => information
Oracle Span 3-4:  significance => significance

Incorrect span: claim => claim-01
Missing span: ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: discounted => discount-02
Missing span: functionality => functionality
Missing span: significance => significance
Missing span: claim => (thing :ARG1-of claim-01)
Missing span: absence => absent-01
Dependencies:
1	Experts	_	NNS	NNS	_	2	nsubj	_	_
2	discounted	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	significance	_	NN	NN	_	2	dobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	ahmadinejad	_	NN	NN	_	8	poss	_	_
7	's	_	POS	POS	_	6	possessive	_	_
8	claim	_	NN	NN	_	5	pobj	_	_
9	in	_	IN	IN	_	2	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	absence	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	information	_	NN	NN	_	12	pobj	_	_
14	on	_	IN	IN	_	2	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	centrifuges	_	NNS	NNS	_	18	poss	_	_
17	'	_	POS	POS	_	16	possessive	_	_
18	functionality	_	NN	NN	_	14	pobj	_	_
19	.	_	.	.	_	2	punct	_	_

Oracle:
(a / absent-01, ARG1, i / information)
(c / claim-01, ARG0, p / person)
(c / claim-01, ARG1, t / thing)
(d / discount-02, ARG0, p2 / person)
(d / discount-02, ARG1, s / significance)
(e / expert-41, ARG1, p2 / person)
(f / functionality, poss, c3 / centrifuge)
(i / information, topic, f / functionality)
(n / name, op, "Ahmadinejad")
(p / person, name, n / name)
(s / significance, poss, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),centrifuges,centrifuge,false), Span(12,13,List(1),information,information,false), Span(7,8,List(2),claim,claim-01,false), Span(0,1,List(4, 3),Experts,(person :ARG1-of expert-41),false)),Map(2 -> claim-01, 1 -> information, 4 -> expert-41, 0 -> centrifuge, 3 -> person),Map(e -> expert-41, p -> person, i -> information, c -> centrifuge, c2 -> claim-01))),[Ljava.lang.String;@2eae8e6e,Annotation([Ljava.lang.String;@8f2ef19,[Ljava.lang.String;@470734c3,[Ljava.lang.String;@2cf3d63b),Annotation([Ljava.lang.String;@7674f035,[Ljava.lang.String;@69e153c5,[Ledu.cmu.lti.nlp.amr.Dependency;@173ed316),Annotation([Ljava.lang.String;@25ce9dc4,[Ljava.lang.String;@74ea2410,[Ljava.lang.String;@17f62e33),Annotation([Ljava.lang.String;@76b1e9b8,[Ljava.lang.String;@27406a17,[Ledu.cmu.lti.nlp.amr.Entity;@2af004b))
AMR:
(c2 / claim-01, ARG0, p / person)
(c2 / claim-01, ARG1, i / information)
(c2 / claim-01, ARG2, c / centrifuge)
(e / expert-41, ARG1, p / person)

Decoded in 74,256 microseconds
Sentence: A Western diplomat in Tehran speaking under condition of anonymity stated that the quantity of centrifuges is less important than whether the machines are operational and efficient but that ahmadinejad's assertion will hinder a resolution of the diplomatic standoff between Iran and the West.

NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 9-10:  anonymity => anonymity
Span 31-32:  assertion => assert-03
Span 15-16:  centrifuges => centrifuge
Span 38-39:  diplomatic => diplomacy
Span 33-34:  hinder => hinder-01
Span 18-19:  important => important
Span 22-23:  machines => machine
Span 24-25:  operational => operate-01
Span 13-14:  quantity => quantity
Span 35-36:  resolution => resolution
Span 5-6:  speaking => speak-01
Span 39-40:  standoff => standoff
Span 4-5:  Tehran => (city :name (name :op "Tehran"))
Span 44-45:  West => (world-region :name (name :op "West"))
Span 1-2:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Oracle Span 29-30:  ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 25-26:  and => and
Oracle Span 9-10:  anonymity => anonymity
Oracle Span 31-32:  assertion => (thing :ARG1-of assert-03)
Oracle Span 40-41:  between => between
Oracle Span 15-16:  centrifuges => centrifuge
Oracle Span 7-8:  condition => condition-01
Oracle Span 2-3:  diplomat => (have-org-role-91 :ARG2 diplomat)
Oracle Span 38-39:  diplomatic => diplomacy
Oracle Span 26-27:  efficient => efficient-41
Oracle Span 33-34:  hinder => hinder-01
Oracle Span 18-19:  important => important
Oracle Span 41-42:  Iran => (country :name (name :op "Iran"))
Oracle Span 17-18:  less => less
Oracle Span 22-23:  machines => machine
Oracle Span 24-25:  operational => operate-01
Oracle Span 13-14:  quantity => quantity
Oracle Span 35-36:  resolution => resolution
Oracle Span 5-6:  speaking => (person :ARG0-of speak-01)
Oracle Span 39-40:  standoff => standoff
Oracle Span 10-11:  stated => state-01
Oracle Span 4-5:  Tehran => (city :name (name :op "Tehran"))
Oracle Span 44-45:  West => (world-region :name (name :op "West"))

Incorrect span: assertion => assert-03
Incorrect span: speaking => speak-01
Extra span: Western => (world-region :name (name :op "West"))
Missing span: ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: between => between
Missing span: and => and
Missing span: efficient => efficient-41
Missing span: less => less
Missing span: speaking => (person :ARG0-of speak-01)
Missing span: condition => condition-01
Missing span: diplomat => (have-org-role-91 :ARG2 diplomat)
Missing span: assertion => (thing :ARG1-of assert-03)
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	Western	_	JJ	JJ	_	3	amod	_	_
3	diplomat	_	NN	NN	_	11	nsubj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Tehran	_	NNP	NNP	_	4	pobj	_	_
6	speaking	_	VBG	VBG	_	5	vmod	_	_
7	under	_	IN	IN	_	6	prep	_	_
8	condition	_	NN	NN	_	7	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	anonymity	_	NN	NN	_	9	pobj	_	_
11	stated	_	VBD	VBD	_	0	root	_	_
12	that	_	IN	IN	_	19	mark	_	_
13	the	_	DT	DT	_	14	det	_	_
14	quantity	_	NN	NN	_	19	nsubj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	centrifuges	_	NNS	NNS	_	15	pobj	_	_
17	is	_	VBZ	VBZ	_	19	cop	_	_
18	less	_	RBR	RBR	_	19	advmod	_	_
19	important	_	JJ	JJ	_	11	ccomp	_	_
20	than	_	IN	IN	_	25	mark	_	_
21	whether	_	IN	IN	_	25	mark	_	_
22	the	_	DT	DT	_	23	det	_	_
23	machines	_	NNS	NNS	_	25	nsubj	_	_
24	are	_	VBP	VBP	_	25	cop	_	_
25	operational	_	JJ	JJ	_	19	advcl	_	_
26	and	_	CC	CC	_	25	cc	_	_
27	efficient	_	JJ	JJ	_	25	conj	_	_
28	but	_	CC	CC	_	19	cc	_	_
29	that	_	IN	IN	_	34	mark	_	_
30	ahmadinejad	_	NN	NN	_	32	poss	_	_
31	's	_	POS	POS	_	30	possessive	_	_
32	assertion	_	NN	NN	_	34	nsubj	_	_
33	will	_	MD	MD	_	34	aux	_	_
34	hinder	_	VB	VB	_	19	conj	_	_
35	a	_	DT	DT	_	36	det	_	_
36	resolution	_	NN	NN	_	34	dobj	_	_
37	of	_	IN	IN	_	36	prep	_	_
38	the	_	DT	DT	_	40	det	_	_
39	diplomatic	_	JJ	JJ	_	40	amod	_	_
40	standoff	_	NN	NN	_	37	pobj	_	_
41	between	_	IN	IN	_	40	prep	_	_
42	Iran	_	NNP	NNP	_	41	pobj	_	_
43	and	_	CC	CC	_	42	cc	_	_
44	the	_	DT	DT	_	45	det	_	_
45	West	_	NN	NN	_	42	conj	_	_
46	.	_	.	.	_	11	punct	_	_

Oracle:
(a2 / and, op, e / efficient-41)
(a2 / and, op, o / operate-01)
(a3 / assert-03, ARG0, p / person)
(a3 / assert-03, ARG1, t / thing)
(b / between, op, c4 / country)
(b / between, op, w / world-region)
(c / condition-01, ARG1, s2 / speak-01)
(c / condition-01, ARG2, a / anonymity)
(c2 / city, name, n2 / name)
(c3 / centrifuge, quant, q / quantity)
(c4 / country, name, n4 / name)
(e / efficient-41, ARG1, m / machine)
(h / hinder-01, ARG0, t / thing)
(h / hinder-01, ARG1, r / resolution)
(h / hinder-01, concession, i / important)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG2, d / diplomat)
(i / important, compared-to, a2 / and)
(i / important, degree, l / less)
(i / important, domain, q / quantity)
(n / name, op, "West")
(n2 / name, op, "Tehran")
(n3 / name, op, "Ahmadinejad")
(n4 / name, op, "Iran")
(o / operate-01, ARG1, m / machine)
(p / person, name, n3 / name)
(p2 / person, location, c2 / city)
(p2 / person, mod, w / world-region)
(r / resolution, poss, s3 / standoff)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, i / important)
(s2 / speak-01, ARG0, p2 / person)
(s3 / standoff, mod, b / between)
(s3 / standoff, mod, d2 / diplomacy)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(2, 1, 0),West,(world-region :name (name :op "West")),false), Span(39,40,List(3),standoff,standoff,false), Span(38,39,List(4),diplomatic,diplomacy,false), Span(35,36,List(5),resolution,resolution,false), Span(33,34,List(6),hinder,hinder-01,false), Span(31,32,List(7),assertion,assert-03,false), Span(24,25,List(8),operational,operate-01,false), Span(22,23,List(9),machines,machine,false), Span(18,19,List(10),important,important,false), Span(15,16,List(11),centrifuges,centrifuge,false), Span(13,14,List(12),quantity,quantity,false), Span(9,10,List(13),anonymity,anonymity,false), Span(5,6,List(14),speaking,speak-01,false), Span(4,5,List(17, 16, 15),Tehran,(city :name (name :op "Tehran")),false), Span(1,2,List(20, 19, 18),Western,(world-region :name (name :op "West")),false)),Map(2 -> "West", 5 -> resolution, 12 -> quantity, 15 -> city, 8 -> operate-01, 18 -> world-region, 7 -> assert-03, 17 -> "Tehran", 1 -> name, 4 -> diplomacy, 11 -> centrifuge, 14 -> speak-01, 20 -> "West", 6 -> hinder-01, 0 -> world-region, 9 -> machine, 16 -> name, 19 -> name, 3 -> standoff, 10 -> important, 13 -> anonymity),Map(w -> world-region, n -> name, h -> hinder-01, q -> quantity, s2 -> speak-01, s -> standoff, d -> diplomacy, m -> machine, n3 -> name, a -> assert-03, w2 -> world-region, r -> resolution, i -> important, a2 -> anonymity, c -> centrifuge, o -> operate-01, n2 -> name, c2 -> city))),[Ljava.lang.String;@248e319b,Annotation([Ljava.lang.String;@5d0bf09b,[Ljava.lang.String;@793f29ff,[Ljava.lang.String;@3e8c3cb),Annotation([Ljava.lang.String;@563f38c4,[Ljava.lang.String;@543295b0,[Ledu.cmu.lti.nlp.amr.Dependency;@54422e18),Annotation([Ljava.lang.String;@117159c0,[Ljava.lang.String;@3e27ba32,[Ljava.lang.String;@7ef82753),Annotation([Ljava.lang.String;@3b0fe47a,[Ljava.lang.String;@202b0582,[Ledu.cmu.lti.nlp.amr.Entity;@235ecd9f))
AMR:
(a / assert-03, ARG1, i / important)
(c / centrifuge, quant, q / quantity)
(c2 / city, name, n2 / name)
(h / hinder-01, ARG0, a / assert-03)
(h / hinder-01, ARG1, r / resolution)
(h / hinder-01, condition, o / operate-01)
(h / hinder-01, location, w / world-region)
(i / important, domain, q / quantity)
(n / name, op, "West")
(n2 / name, op, "Tehran")
(n3 / name, op, "West")
(o / operate-01, ARG0, w2 / world-region)
(o / operate-01, ARG1, m / machine)
(q / quantity, part, a2 / anonymity)
(r / resolution, beneficiary, s / standoff)
(s / standoff, mod, d / diplomacy)
(s2 / speak-01, ARG1, c2 / city)
(s2 / speak-01, condition, a2 / anonymity)
(w / world-region, name, n / name)
(w2 / world-region, name, n3 / name)

Decoded in 1,776,649 microseconds
Sentence: Arms control expert Jeffrey G. Lewis of the new America Foundation think tank stated that the Foundation was aware of Iran's goal of assembling 6000 centrifuges but the operational status of the machines is unknown.

NER Entity: (person :name (name :op "Jeffrey" :op "G." :op "Lewis"))
NER Entity: (thing :name (name :op "America" :op "Foundation"))
NER Entity: (organization :name (name :op "think" :op "tank"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 25-26:  6000 => 6000
Span 9-11:  America Foundation => (thing :name (name :op "America" :op "Foundation"))
Span 26-27:  centrifuges => centrifuge
Span 1-2:  control => control-01
Span 22-23:  goal => goal
Span 3-6:  Jeffrey G. Lewis => (person :name (name :op "Jeffrey" :op "G." :op "Lewis"))
Span 33-34:  machines => machine
Span 8-9:  new => new
Span 29-30:  operational => operate-01
Span 30-31:  status => status
Span 11-13:  think tank => (organization :name (name :op "think" :op "tank"))
Span 35-36:  unknown => (know-01 :polarity -)

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 25-26:  6000 => 6000
Oracle Span 0-1:  Arms => arm-01
Oracle Span 24-25:  assembling => assemble-01
Oracle Span 26-27:  centrifuges => centrifuge
Oracle Span 1-2:  control => control-01
Oracle Span 2-3:  expert => expert-41
Oracle Span 22-23:  goal => goal
Oracle Span 20-21:  Iran => (country :name (name :op "Iran"))
Oracle Span 3-6:  Jeffrey G. Lewis => (person :name (name :op "Lewis" :op "G." :op "Jeffrey"))
Oracle Span 33-34:  machines => machine
Oracle Span 8-11:  new America Foundation => (name :op "Foundation" :op "America" :op "New")
Oracle Span 29-30:  operational => operate-01
Oracle Span 13-14:  stated => state-01
Oracle Span 30-31:  status => status
Oracle Span 11-12:  think => (have-org-role-91 :ARG1 think-tank)
Oracle Span 35-36:  unknown => (know-01 :polarity -)

Extra span: think tank => (organization :name (name :op "think" :op "tank"))
Extra span: America Foundation => (thing :name (name :op "America" :op "Foundation"))
Extra span: new => new
Incorrect span: Jeffrey G. Lewis => (person :name (name :op "Jeffrey" :op "G." :op "Lewis"))
Missing span: Jeffrey G. Lewis => (person :name (name :op "Lewis" :op "G." :op "Jeffrey"))
Missing span: new America Foundation => (name :op "Foundation" :op "America" :op "New")
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: assembling => assemble-01
Missing span: expert => expert-41
Missing span: Arms => arm-01
Missing span: think => (have-org-role-91 :ARG1 think-tank)
Dependencies:
1	Arms	_	NNP	NNP	_	6	nn	_	_
2	control	_	NN	NN	_	6	nn	_	_
3	expert	_	NN	NN	_	6	nn	_	_
4	Jeffrey	_	NNP	NNP	_	6	nn	_	_
5	G.	_	NNP	NNP	_	6	nn	_	_
6	Lewis	_	NNP	NNP	_	12	nsubj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	11	det	_	_
9	new	_	JJ	JJ	_	11	amod	_	_
10	America	_	NNP	NNP	_	11	nn	_	_
11	Foundation	_	NNP	NNP	_	7	pobj	_	_
12	think	_	VBP	VBP	_	0	root	_	_
13	tank	_	NN	NN	_	14	nsubj	_	_
14	stated	_	VBD	VBD	_	12	ccomp	_	_
15	that	_	IN	IN	_	19	mark	_	_
16	the	_	DT	DT	_	17	det	_	_
17	Foundation	_	NNP	NNP	_	19	nsubj	_	_
18	was	_	VBD	VBD	_	19	cop	_	_
19	aware	_	JJ	JJ	_	14	ccomp	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	Iran	_	NNP	NNP	_	23	poss	_	_
22	's	_	POS	POS	_	21	possessive	_	_
23	goal	_	NN	NN	_	20	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	assembling	_	VBG	VBG	_	24	pcomp	_	_
26	6000	_	CD	CD	_	27	num	_	_
27	centrifuges	_	NNS	NNS	_	25	dobj	_	_
28	but	_	CC	CC	_	12	cc	_	_
29	the	_	DT	DT	_	31	det	_	_
30	operational	_	JJ	JJ	_	31	amod	_	_
31	status	_	NN	NN	_	36	nsubj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	the	_	DT	DT	_	34	det	_	_
34	machines	_	NNS	NNS	_	32	pobj	_	_
35	is	_	VBZ	VBZ	_	36	cop	_	_
36	unknown	_	JJ	JJ	_	12	conj	_	_
37	.	_	.	.	_	12	punct	_	_

Oracle:
(a2 / assemble-01, ARG0, c2 / country)
(a2 / assemble-01, ARG1, c3 / centrifuge)
(c / control-01, ARG1, a / arm-01)
(c2 / country, name, n4 / name)
(c3 / centrifuge, quant, 6 / 6000)
(e / expert-41, ARG1, p / person)
(e / expert-41, ARG2, c / control-01)
(g / goal, mod, a2 / assemble-01)
(g / goal, poss, c2 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, t / think-tank)
(h / have-org-role-91, ARG3, e / expert-41)
(k / know-01, ARG1, s2 / status)
(k / know-01, polarity, -)
(n / name, op, "G.")
(n / name, op, "Jeffrey")
(n / name, op, "Lewis")
(n2 / name, op, "America")
(n2 / name, op, "Foundation")
(n2 / name, op, "New")
(n4 / name, op, "Iran")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s2 / status, mod, o / operate-01)
(s2 / status, poss, m / machine)
(t / think-tank, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(1, 0),unknown,(know-01 :polarity -),false), Span(33,34,List(2),machines,machine,false), Span(30,31,List(3),status,status,false), Span(29,30,List(4),operational,operate-01,false), Span(26,27,List(5),centrifuges,centrifuge,false), Span(25,26,List(6),6000,6000,false), Span(22,23,List(7),goal,goal,false), Span(11,13,List(11, 10, 9, 8),think tank,(organization :name (name :op "think" :op "tank")),false), Span(9,11,List(15, 14, 13, 12),America Foundation,(thing :name (name :op "America" :op "Foundation")),false), Span(8,9,List(16),new,new,false), Span(3,6,List(21, 20, 19, 18, 17),Jeffrey G. Lewis,(person :name (name :op "Jeffrey" :op "G." :op "Lewis")),false), Span(1,2,List(22),control,control-01,false)),Map(2 -> machine, 5 -> centrifuge, 12 -> thing, 15 -> "Foundation", 8 -> organization, 21 -> "Lewis", 18 -> name, 7 -> goal, 17 -> person, 1 -> -, 4 -> operate-01, 11 -> "tank", 14 -> "America", 20 -> "G.", 6 -> 6000, 22 -> control-01, 0 -> know-01, 9 -> name, 16 -> new, 19 -> "Jeffrey", 3 -> status, 10 -> "think", 13 -> name),Map(n -> name, k -> know-01, t -> thing, n4 -> name, s -> status, m -> machine, g -> goal, p -> person, n3 -> new, o2 -> organization, c -> centrifuge, 6 -> 6000, o -> operate-01, c2 -> control-01, n2 -> name))),[Ljava.lang.String;@1ca3b418,Annotation([Ljava.lang.String;@58cbafc2,[Ljava.lang.String;@2034b64c,[Ljava.lang.String;@75d3a5e0),Annotation([Ljava.lang.String;@74d1dc36,[Ljava.lang.String;@7161d8d1,[Ledu.cmu.lti.nlp.amr.Dependency;@74e28667),Annotation([Ljava.lang.String;@1cf6d1be,[Ljava.lang.String;@663c9e7a,[Ljava.lang.String;@19e4653c),Annotation([Ljava.lang.String;@795509d9,[Ljava.lang.String;@53045c6c,[Ledu.cmu.lti.nlp.amr.Entity;@5149d738))
AMR:
(c / centrifuge, quant, 6 / 6000)
(c2 / control-01, ARG0, p / person)
(c2 / control-01, ARG1, g / goal)
(k / know-01, ARG0, s / status)
(k / know-01, ARG1, p / person)
(k / know-01, polarity, -)
(n / name, op, "tank")
(n / name, op, "think")
(n2 / name, op, "America")
(n2 / name, op, "Foundation")
(n4 / name, op, "G.")
(n4 / name, op, "Jeffrey")
(n4 / name, op, "Lewis")
(o / operate-01, ARG1, s / status)
(o2 / organization, name, n / name)
(o2 / organization, op, p / person)
(p / person, location, t / thing)
(p / person, name, n4 / name)
(s / status, name, c / centrifuge)
(s / status, poss, m / machine)
(t / thing, mod, n3 / new)
(t / thing, name, n2 / name)

Decoded in 514,932 microseconds
Sentence: Diplomats and arms control experts stated that the Iranian enrichment program is hindered by technical problems.

NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 3-4:  control => control-01
Span 0-1:  Diplomats => (have-org-role-91 :ARG2 diplomat)
Span 9-10:  enrichment => enrich-01
Span 12-13:  hindered => hinder-01
Span 15-16:  problems => problem
Span 10-11:  program => program
Span 14-15:  technical => technical

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 2-3:  arms => arm-01
Oracle Span 3-4:  control => control-01
Oracle Span 0-1:  Diplomats => (have-org-role-91 :ARG2 diplomat)
Oracle Span 9-10:  enrichment => enrich-01
Oracle Span 4-5:  experts => (person :ARG1-of expert-41)
Oracle Span 12-13:  hindered => hinder-01
Oracle Span 8-9:  Iranian => (country :name (name :op "Iran"))
Oracle Span 15-16:  problems => problem
Oracle Span 10-11:  program => program
Oracle Span 5-6:  stated => state-01
Oracle Span 14-15:  technical => technical

Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: and => and
Missing span: experts => (person :ARG1-of expert-41)
Missing span: arms => arm-01
Dependencies:
1	Diplomats	_	NNS	NNS	_	4	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	arms	_	NNS	NNS	_	1	conj	_	_
4	control	_	VBP	VBP	_	0	root	_	_
5	experts	_	NNS	NNS	_	6	nsubj	_	_
6	stated	_	VBD	VBD	_	4	ccomp	_	_
7	that	_	IN	IN	_	13	mark	_	_
8	the	_	DT	DT	_	11	det	_	_
9	Iranian	_	JJ	JJ	_	11	amod	_	_
10	enrichment	_	NN	NN	_	11	nn	_	_
11	program	_	NN	NN	_	13	nsubjpass	_	_
12	is	_	VBZ	VBZ	_	13	auxpass	_	_
13	hindered	_	VBN	VBN	_	6	ccomp	_	_
14	by	_	IN	IN	_	13	prep	_	_
15	technical	_	JJ	JJ	_	16	amod	_	_
16	problems	_	NNS	NNS	_	14	pobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, p / person)
(c / control-01, ARG1, a2 / arm-01)
(c2 / country, name, n / name)
(e / expert-41, ARG1, p / person)
(e / expert-41, ARG2, c / control-01)
(h / hinder-01, ARG0, p3 / problem)
(h / hinder-01, ARG1, p2 / program)
(h2 / have-org-role-91, ARG2, d / diplomat)
(n / name, op, "Iran")
(p2 / program, poss, c2 / country)
(p2 / program, topic, e2 / enrich-01)
(p3 / problem, mod, t / technical)
(s / state-01, ARG0, a / and)
(s / state-01, ARG1, h / hinder-01)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),problems,problem,false), Span(14,15,List(1),technical,technical,false), Span(12,13,List(2),hindered,hinder-01,false), Span(10,11,List(3),program,program,false), Span(9,10,List(4),enrichment,enrich-01,false), Span(3,4,List(5),control,control-01,false), Span(0,1,List(7, 6),Diplomats,(have-org-role-91 :ARG2 diplomat),false)),Map(2 -> hinder-01, 5 -> control-01, 7 -> diplomat, 1 -> technical, 4 -> enrich-01, 6 -> have-org-role-91, 0 -> problem, 3 -> program),Map(e -> enrich-01, h -> hinder-01, h2 -> have-org-role-91, t -> technical, p2 -> program, d -> diplomat, p -> problem, c -> control-01))),[Ljava.lang.String;@6bbe85a8,Annotation([Ljava.lang.String;@3a7442c7,[Ljava.lang.String;@4be29ed9,[Ljava.lang.String;@548d708a),Annotation([Ljava.lang.String;@4b013c76,[Ljava.lang.String;@53fb3dab,[Ledu.cmu.lti.nlp.amr.Dependency;@cb0755b),Annotation([Ljava.lang.String;@33065d67,[Ljava.lang.String;@712625fd,[Ljava.lang.String;@7bba5817),Annotation([Ljava.lang.String;@742ff096,[Ljava.lang.String;@75437611,[Ledu.cmu.lti.nlp.amr.Entity;@350aac89))
AMR:
(c / control-01, ARG1, p / problem)
(h / hinder-01, ARG1, p2 / program)
(h / hinder-01, ARG2, p / problem)
(h2 / have-org-role-91, ARG1, p2 / program)
(h2 / have-org-role-91, ARG2, d / diplomat)
(p / problem, mod, t / technical)
(p2 / program, topic, e / enrich-01)

Decoded in 84,478 microseconds
Sentence: Iran has repeatedly asserted that its nuclear program aims to produce only electricity because nuclear weapon production contradicts Islamic principles.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Islamic"))
NER Entity: (thing :name (name :op "Islamic"))
Spans:
Span 8-9:  aims => aim-01
Span 13-14:  because => cause-01
Span 12-13:  electricity => electricity
Span 18-19:  Islamic => (religious-group :name (name :op "Islam"))
Span 14-15:  nuclear => nucleus
Span 6-7:  nuclear => nucleus
Span 11-12:  only => only
Span 19-20:  principles => principle
Span 10-11:  produce => produce-01
Span 16-17:  production => produce-01
Span 7-8:  program => program
Span 2-3:  repeatedly => repeat-01
Span 15-16:  weapon => weapon

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 8-9:  aims => aim-01
Oracle Span 3-4:  asserted => assert-03
Oracle Span 13-14:  because => cause-01
Oracle Span 17-18:  contradicts => contradict-01
Oracle Span 12-13:  electricity => electricity
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 18-19:  Islamic => (religious-group :name (name :op "Islam"))
Oracle Span 6-7:  nuclear => nucleus
Oracle Span 11-12:  only => only
Oracle Span 19-20:  principles => principle
Oracle Span 10-11:  produce => produce-01
Oracle Span 7-8:  program => program
Oracle Span 2-3:  repeatedly => repeat-01
Oracle Span 15-16:  weapon => weapon

Extra span: production => produce-01
Extra span: nuclear => nucleus
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: asserted => assert-03
Missing span: contradicts => contradict-01
Dependencies:
1	Iran	_	NNP	NNP	_	4	nsubj	_	_
2	has	_	VBZ	VBZ	_	4	aux	_	_
3	repeatedly	_	RB	RB	_	4	advmod	_	_
4	asserted	_	VBN	VBN	_	0	root	_	_
5	that	_	IN	IN	_	9	mark	_	_
6	its	_	PRP$	PRP$	_	8	poss	_	_
7	nuclear	_	JJ	JJ	_	8	amod	_	_
8	program	_	NN	NN	_	9	nsubj	_	_
9	aims	_	VBZ	VBZ	_	4	ccomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	produce	_	VB	VB	_	9	xcomp	_	_
12	only	_	JJ	JJ	_	13	amod	_	_
13	electricity	_	NN	NN	_	11	dobj	_	_
14	because	_	IN	IN	_	18	mark	_	_
15	nuclear	_	JJ	JJ	_	17	amod	_	_
16	weapon	_	NN	NN	_	17	nn	_	_
17	production	_	NN	NN	_	18	nsubj	_	_
18	contradicts	_	VBZ	VBZ	_	11	advcl	_	_
19	Islamic	_	JJ	JJ	_	20	amod	_	_
20	principles	_	NNS	NNS	_	18	dobj	_	_
21	.	_	.	.	_	4	punct	_	_

Oracle:
(a / assert-03, ARG0, c / country)
(a / assert-03, ARG1, a2 / aim-01)
(a2 / aim-01, ARG0, p2 / program)
(a2 / aim-01, ARG1, p / produce-01)
(c / country, name, n / name)
(c2 / cause-01, ARG0, c3 / contradict-01)
(c2 / cause-01, ARG1, p / produce-01)
(c3 / contradict-01, ARG1, p4 / principle)
(n / name, op, "Iran")
(n4 / name, op, "Islam")
(p / produce-01, ARG1, e / electricity)
(p / produce-01, mod, o / only)
(p2 / program, mod, n2 / nucleus)
(p2 / program, poss, c / country)
(p4 / principle, mod, r2 / religious-group)
(r / repeat-01, ARG0, c / country)
(r / repeat-01, ARG1, a / assert-03)
(r2 / religious-group, name, n4 / name)
(w / weapon, mod, n2 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),principles,principle,false), Span(18,19,List(3, 2, 1),Islamic,(religious-group :name (name :op "Islam")),false), Span(16,17,List(4),production,produce-01,false), Span(15,16,List(5),weapon,weapon,false), Span(14,15,List(6),nuclear,nucleus,false), Span(13,14,List(7),because,cause-01,false), Span(12,13,List(8),electricity,electricity,false), Span(11,12,List(9),only,only,false), Span(10,11,List(10),produce,produce-01,false), Span(8,9,List(11),aims,aim-01,false), Span(7,8,List(12),program,program,false), Span(6,7,List(13),nuclear,nucleus,false), Span(2,3,List(14),repeatedly,repeat-01,false)),Map(2 -> name, 5 -> weapon, 12 -> program, 8 -> electricity, 7 -> cause-01, 1 -> religious-group, 4 -> produce-01, 11 -> aim-01, 14 -> repeat-01, 6 -> nucleus, 0 -> principle, 9 -> only, 3 -> "Islam", 10 -> produce-01, 13 -> nucleus),Map(e -> electricity, n -> name, w -> weapon, p2 -> produce-01, r2 -> repeat-01, p -> principle, a -> aim-01, n3 -> nucleus, p4 -> program, r -> religious-group, c -> cause-01, o -> only, p3 -> produce-01, n2 -> nucleus))),[Ljava.lang.String;@1c5920df,Annotation([Ljava.lang.String;@17f9d882,[Ljava.lang.String;@79e4c792,[Ljava.lang.String;@196a42c3),Annotation([Ljava.lang.String;@4c60d6e9,[Ljava.lang.String;@15043a2f,[Ledu.cmu.lti.nlp.amr.Dependency;@4a83a74a),Annotation([Ljava.lang.String;@1349883,[Ljava.lang.String;@4b29d1d2,[Ljava.lang.String;@7f485fda),Annotation([Ljava.lang.String;@28261e8e,[Ljava.lang.String;@d737b89,[Ledu.cmu.lti.nlp.amr.Entity;@8519cb4))
AMR:
(a / aim-01, ARG0, p4 / program)
(a / aim-01, ARG1, p3 / produce-01)
(c / cause-01, ARG0, p / principle)
(c / cause-01, ARG1, p3 / produce-01)
(e / electricity, mod, o / only)
(n / name, op, "Islam")
(p / principle, mod, r / religious-group)
(p / principle, op, p2 / produce-01)
(p2 / produce-01, ARG1, w / weapon)
(p3 / produce-01, ARG1, e / electricity)
(p4 / program, mod, n3 / nucleus)
(r / religious-group, name, n / name)
(r2 / repeat-01, ARG1, p3 / produce-01)
(w / weapon, mod, n2 / nucleus)

Decoded in 325,113 microseconds
Sentence: The US, Israel, Europe and the majority of Western arms control experts believe that Iran is pursuing the capability to produce bombs immediately in the event of a decision.

NER Entity: (country :name (name :op "The" :op "US"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 14-15:  believe => believe-01
Span 23-24:  bombs => bomb
Span 20-21:  capability => capable-41
Span 12-13:  control => control-01
Span 27-28:  event => event
Span 24-25:  immediately => immediate
Span 3-4:  Israel => (country :name (name :op "Israel"))
Span 8-9:  majority => majority
Span 22-23:  produce => produce-01
Span 18-19:  pursuing => pursue-01
Span 0-2:  The US => (country :name (name :op "The" :op "US"))
Span 10-11:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 11-12:  arms => arm
Oracle Span 14-15:  believe => believe-01
Oracle Span 23-24:  bombs => bomb
Oracle Span 20-21:  capability => capable-41
Oracle Span 12-13:  control => control-01
Oracle Span 30-31:  decision => decide-01
Oracle Span 5-6:  Europe => (continent :name (name :op "Europe"))
Oracle Span 13-14:  experts => (person :ARG1-of expert-41)
Oracle Span 24-25:  immediately => immediate
Oracle Span 16-17:  Iran => (country :name (name :op "Iran"))
Oracle Span 3-4:  Israel => (country :name (name :op "Israel"))
Oracle Span 8-9:  majority => majority
Oracle Span 22-23:  produce => produce-01
Oracle Span 18-19:  pursuing => pursue-01
Oracle Span 1-2:  US => (country :name (name :op "US"))
Oracle Span 10-11:  Western => (world-region :name (name :op "West"))

Extra span: event => event
Extra span: The US => (country :name (name :op "The" :op "US"))
Missing span: US => (country :name (name :op "US"))
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: and => and
Missing span: experts => (person :ARG1-of expert-41)
Missing span: arms => arm
Missing span: decision => decide-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	US	_	NNP	NNP	_	15	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	Israel	_	NNP	NNP	_	2	conj	_	_
5	,	_	,	,	_	2	punct	_	_
6	Europe	_	NNP	NNP	_	2	conj	_	_
7	and	_	CC	CC	_	2	cc	_	_
8	the	_	DT	DT	_	9	det	_	_
9	majority	_	NN	NN	_	2	conj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	Western	_	JJ	JJ	_	14	amod	_	_
12	arms	_	NNS	NNS	_	14	nn	_	_
13	control	_	NN	NN	_	14	nn	_	_
14	experts	_	NNS	NNS	_	10	pobj	_	_
15	believe	_	VBP	VBP	_	0	root	_	_
16	that	_	IN	IN	_	19	mark	_	_
17	Iran	_	NNP	NNP	_	19	nsubj	_	_
18	is	_	VBZ	VBZ	_	19	aux	_	_
19	pursuing	_	VBG	VBG	_	15	ccomp	_	_
20	the	_	DT	DT	_	21	det	_	_
21	capability	_	NN	NN	_	19	dobj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	produce	_	VB	VB	_	21	vmod	_	_
24	bombs	_	NNS	NNS	_	23	dobj	_	_
25	immediately	_	RB	RB	_	23	advmod	_	_
26	in	_	IN	IN	_	23	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	event	_	NN	NN	_	26	pobj	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	a	_	DT	DT	_	31	det	_	_
31	decision	_	NN	NN	_	29	pobj	_	_
32	.	_	.	.	_	15	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, c3 / continent)
(a / and, op, p / person)
(b / believe-01, ARG0, a / and)
(b / believe-01, ARG1, p2 / pursue-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / continent, name, n3 / name)
(c4 / control-01, ARG1, a2 / arm)
(c5 / country, name, n5 / name)
(c6 / capable-41, ARG1, c5 / country)
(c6 / capable-41, ARG2, p3 / produce-01)
(e / expert-41, ARG1, p / person)
(e / expert-41, ARG2, c4 / control-01)
(n / name, op, "US")
(n2 / name, op, "Israel")
(n3 / name, op, "Europe")
(n4 / name, op, "West")
(n5 / name, op, "Iran")
(p / person, mod, w / world-region)
(p / person, quant, m / majority)
(p2 / pursue-01, ARG0, c5 / country)
(p2 / pursue-01, ARG1, c6 / capable-41)
(p3 / produce-01, ARG1, b2 / bomb)
(p3 / produce-01, condition, d / decide-01)
(p3 / produce-01, time, i / immediate)
(w / world-region, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),event,event,false), Span(24,25,List(1),immediately,immediate,false), Span(23,24,List(2),bombs,bomb,false), Span(22,23,List(3),produce,produce-01,false), Span(20,21,List(4),capability,capable-41,false), Span(18,19,List(5),pursuing,pursue-01,false), Span(14,15,List(6),believe,believe-01,false), Span(12,13,List(7),control,control-01,false), Span(10,11,List(10, 9, 8),Western,(world-region :name (name :op "West")),false), Span(8,9,List(11),majority,majority,false), Span(3,4,List(14, 13, 12),Israel,(country :name (name :op "Israel")),false), Span(0,2,List(18, 17, 16, 15),The US,(country :name (name :op "The" :op "US")),false)),Map(2 -> bomb, 5 -> pursue-01, 12 -> country, 15 -> country, 8 -> world-region, 18 -> "US", 7 -> control-01, 17 -> "The", 1 -> immediate, 4 -> capable-41, 11 -> majority, 14 -> "Israel", 6 -> believe-01, 0 -> event, 9 -> name, 16 -> name, 3 -> produce-01, 10 -> "West", 13 -> name),Map(e -> event, w -> world-region, n -> name, b -> bomb, b2 -> believe-01, p2 -> pursue-01, c4 -> country, m -> majority, p -> produce-01, n3 -> name, c3 -> country, i -> immediate, c -> capable-41, c2 -> control-01, n2 -> name))),[Ljava.lang.String;@35dab4eb,Annotation([Ljava.lang.String;@2d901eb0,[Ljava.lang.String;@3ba987b8,[Ljava.lang.String;@3f191845),Annotation([Ljava.lang.String;@5f049ea1,[Ljava.lang.String;@72cc7e6f,[Ledu.cmu.lti.nlp.amr.Dependency;@5afa3c9),Annotation([Ljava.lang.String;@72035809,[Ljava.lang.String;@909217e,[Ljava.lang.String;@18271936),Annotation([Ljava.lang.String;@606e4010,[Ljava.lang.String;@8458f04,[Ledu.cmu.lti.nlp.amr.Entity;@48075da3))
AMR:
(b2 / believe-01, ARG0, m / majority)
(b2 / believe-01, ARG1, p2 / pursue-01)
(c / capable-41, ARG1, c4 / country)
(c / capable-41, ARG2, p / produce-01)
(c2 / control-01, ARG0, c4 / country)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(n / name, op, "West")
(n2 / name, op, "Israel")
(n3 / name, op, "The")
(n3 / name, op, "US")
(p / produce-01, ARG1, b / bomb)
(p / produce-01, time, e / event)
(p / produce-01, time, i / immediate)
(p2 / pursue-01, ARG0, c3 / country)
(p2 / pursue-01, ARG1, c / capable-41)
(w / world-region, name, n / name)
(w / world-region, op, p / produce-01)

Decoded in 541,086 microseconds
Sentence: Experts stated that producing weapons-grade uranium from reactor-grade material is relatively simple.

Spans:
Span 0-1:  Experts => (person :ARG1-of expert-41)
Span 12-13:  material => material
Span 3-4:  producing => produce-01
Span 9-10:  reactor => reactor
Span 15-16:  simple => simple
Span 7-8:  uranium => uranium

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Experts => (person :ARG1-of expert-41)
Oracle Span 12-13:  material => material
Oracle Span 3-4:  producing => produce-01
Oracle Span 9-10:  reactor => reactor-grade
Oracle Span 14-15:  relatively => relative
Oracle Span 15-16:  simple => simple
Oracle Span 1-2:  stated => state-01
Oracle Span 7-8:  uranium => uranium
Oracle Span 4-5:  weapons => weapons-grade

Incorrect span: reactor => reactor
Missing span: stated => state-01
Missing span: relatively => relative
Missing span: reactor => reactor-grade
Missing span: weapons => weapons-grade
Dependencies:
1	Experts	_	NNS	NNS	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	12	mark	_	_
4	producing	_	VBG	VBG	_	12	csubj	_	_
5	weapons-grade	_	JJ	JJ	_	6	amod	_	_
6	uranium	_	NN	NN	_	4	dobj	_	_
7	from	_	IN	IN	_	4	prep	_	_
8	reactor-grade	_	JJ	JJ	_	9	amod	_	_
9	material	_	NN	NN	_	7	pobj	_	_
10	is	_	VBZ	VBZ	_	12	cop	_	_
11	relatively	_	RB	RB	_	12	advmod	_	_
12	simple	_	JJ	JJ	_	2	ccomp	_	_
13	.	_	.	.	_	2	punct	_	_

Oracle:
(e / expert-41, ARG1, p / person)
(m / material, mod, r2 / reactor-grade)
(p2 / produce-01, ARG1, u / uranium)
(p2 / produce-01, ARG2, m / material)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, s3 / simple)
(s3 / simple, degree, r3 / relative)
(s3 / simple, domain, p2 / produce-01)
(u / uranium, mod, w / weapons-grade)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),simple,simple,false), Span(12,13,List(1),material,material,false), Span(9,10,List(2),reactor,reactor,false), Span(7,8,List(3),uranium,uranium,false), Span(3,4,List(4),producing,produce-01,false), Span(0,1,List(6, 5),Experts,(person :ARG1-of expert-41),false)),Map(2 -> reactor, 5 -> person, 1 -> material, 4 -> produce-01, 6 -> expert-41, 0 -> simple, 3 -> uranium),Map(e -> expert-41, p2 -> person, s -> simple, m -> material, p -> produce-01, r -> reactor, u -> uranium))),[Ljava.lang.String;@68c9133c,Annotation([Ljava.lang.String;@7a35b0f5,[Ljava.lang.String;@5e2c3d18,[Ljava.lang.String;@2cb4893b),Annotation([Ljava.lang.String;@cc43f62,[Ljava.lang.String;@5b218417,[Ledu.cmu.lti.nlp.amr.Dependency;@645aa696),Annotation([Ljava.lang.String;@6caf0677,[Ljava.lang.String;@413d1baf,[Ljava.lang.String;@16eb3ea3),Annotation([Ljava.lang.String;@273444fe,[Ljava.lang.String;@33bc72d1,[Ledu.cmu.lti.nlp.amr.Entity;@1a75e76a))
AMR:
(e / expert-41, ARG1, p2 / person)
(m / material, mod, r / reactor)
(p / produce-01, ARG0, p2 / person)
(p / produce-01, ARG1, u / uranium)
(p / produce-01, location, m / material)
(s / simple, domain, p / produce-01)

Decoded in 53,097 microseconds
Sentence: Ahmadinejad stated that after Iran resisted the West's demands for a halt in nuclear activities, the West still pursued the resumption of negotiations.

NER Entity: (person :name (name :op "Ahmadinejad"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "West"))
Spans:
Span 15-16:  activities => activity
Span 3-4:  after => after
Span 9-10:  demands => demand-01
Span 12-13:  halt => halt-01
Span 24-25:  negotiations => negotiate-01
Span 14-15:  nuclear => nucleus
Span 20-21:  pursued => pursue-01
Span 5-6:  resisted => resist-01
Span 22-23:  resumption => resume-01
Span 19-20:  still => still
Span 18-19:  West => (world-region :name (name :op "West"))
Span 7-8:  West => (world-region :name (name :op "West"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 15-16:  activities => activity
Oracle Span 3-4:  after => after
Oracle Span 0-1:  Ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 9-10:  demands => demand-01
Oracle Span 12-13:  halt => halt-01
Oracle Span 4-5:  Iran => (country :name (name :op "Iran"))
Oracle Span 24-25:  negotiations => negotiate-01
Oracle Span 14-15:  nuclear => nucleus
Oracle Span 20-21:  pursued => pursue-01
Oracle Span 5-6:  resisted => resist-01
Oracle Span 22-23:  resumption => resume-01
Oracle Span 1-2:  stated => state-01
Oracle Span 19-20:  still => still
Oracle Span 7-8:  West => (world-region :name (name :op "West"))

Extra span: West => (world-region :name (name :op "West"))
Missing span: Ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Dependencies:
1	Ahmadinejad	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	21	mark	_	_
4	after	_	IN	IN	_	6	mark	_	_
5	Iran	_	NNP	NNP	_	6	nsubj	_	_
6	resisted	_	VBD	VBD	_	21	advcl	_	_
7	the	_	DT	DT	_	8	det	_	_
8	West	_	NNP	NNP	_	10	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	demands	_	NNS	NNS	_	6	dobj	_	_
11	for	_	IN	IN	_	6	prep	_	_
12	a	_	DT	DT	_	13	det	_	_
13	halt	_	NN	NN	_	11	pobj	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	nuclear	_	JJ	JJ	_	16	amod	_	_
16	activities	_	NNS	NNS	_	14	pobj	_	_
17	,	_	,	,	_	21	punct	_	_
18	the	_	DT	DT	_	19	det	_	_
19	West	_	NNP	NNP	_	21	nsubj	_	_
20	still	_	RB	RB	_	21	advmod	_	_
21	pursued	_	VBD	VBD	_	2	ccomp	_	_
22	the	_	DT	DT	_	23	det	_	_
23	resumption	_	NN	NN	_	21	dobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	negotiations	_	NNS	NNS	_	24	pobj	_	_
26	.	_	.	.	_	2	punct	_	_

Oracle:
(a / after, op, r2 / resist-01)
(a2 / activity, mod, n5 / nucleus)
(c / country, name, n4 / name)
(d / demand-01, ARG0, w / world-region)
(d / demand-01, ARG1, h / halt-01)
(h / halt-01, ARG0, c / country)
(h / halt-01, ARG1, a2 / activity)
(n / name, op, "Ahmadinejad")
(n2 / name, op, "West")
(n4 / name, op, "Iran")
(p / person, name, n / name)
(p2 / pursue-01, ARG0, w / world-region)
(p2 / pursue-01, ARG1, r / resume-01)
(p2 / pursue-01, mod, s2 / still)
(p2 / pursue-01, time, a / after)
(r / resume-01, ARG1, n3 / negotiate-01)
(r2 / resist-01, ARG0, c / country)
(r2 / resist-01, ARG1, d / demand-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, p2 / pursue-01)
(w / world-region, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),negotiations,negotiate-01,false), Span(22,23,List(1),resumption,resume-01,false), Span(20,21,List(2),pursued,pursue-01,false), Span(19,20,List(3),still,still,false), Span(18,19,List(6, 5, 4),West,(world-region :name (name :op "West")),false), Span(15,16,List(7),activities,activity,false), Span(14,15,List(8),nuclear,nucleus,false), Span(12,13,List(9),halt,halt-01,false), Span(9,10,List(10),demands,demand-01,false), Span(7,8,List(13, 12, 11),West,(world-region :name (name :op "West")),false), Span(5,6,List(14),resisted,resist-01,false), Span(3,4,List(15),after,after,false)),Map(2 -> pursue-01, 5 -> name, 12 -> name, 15 -> after, 8 -> nucleus, 7 -> activity, 1 -> resume-01, 4 -> world-region, 11 -> world-region, 14 -> resist-01, 6 -> "West", 0 -> negotiate-01, 9 -> halt-01, 3 -> still, 10 -> demand-01, 13 -> "West"),Map(n -> negotiate-01, w -> world-region, h -> halt-01, n4 -> name, s -> still, d -> demand-01, p -> pursue-01, r2 -> resist-01, a -> activity, n3 -> nucleus, w2 -> world-region, a2 -> after, r -> resume-01, n2 -> name))),[Ljava.lang.String;@5524cca1,Annotation([Ljava.lang.String;@5032714f,[Ljava.lang.String;@48bb62,[Ljava.lang.String;@353352b6),Annotation([Ljava.lang.String;@4681c175,[Ljava.lang.String;@57a78e3,[Ledu.cmu.lti.nlp.amr.Dependency;@402c4085),Annotation([Ljava.lang.String;@6fa51cd4,[Ljava.lang.String;@2767e23c,[Ljava.lang.String;@710c2b53),Annotation([Ljava.lang.String;@5386659f,[Ljava.lang.String;@14028087,[Ledu.cmu.lti.nlp.amr.Entity;@cecf639))
AMR:
(a / activity, mod, n3 / nucleus)
(a2 / after, op, r2 / resist-01)
(d / demand-01, ARG0, w2 / world-region)
(d / demand-01, ARG1, h / halt-01)
(h / halt-01, ARG1, a / activity)
(n2 / name, op, "West")
(n4 / name, op, "West")
(p / pursue-01, ARG0, w / world-region)
(p / pursue-01, ARG1, r / resume-01)
(p / pursue-01, manner, s / still)
(p / pursue-01, time, a2 / after)
(r / resume-01, ARG1, n / negotiate-01)
(r2 / resist-01, ARG1, d / demand-01)
(w / world-region, name, n2 / name)
(w2 / world-region, name, n4 / name)

Decoded in 154,339 microseconds
Sentence: EU foreign policy chief Javier Solana recently presented Iran with 2 offers --

NER Entity: (organization :name (name :op "EU"))
NER Entity: (person :name (name :op "Javier" :op "Solana"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 3-4:  chief => (have-org-role-91 :ARG2 chief)
Span 4-6:  Javier Solana => (person :name (name :op "Javier" :op "Solana"))
Span 11-12:  offers => offer-01
Span 2-3:  policy => policy
Span 7-8:  presented => present-01
Span 6-7:  recently => recent

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  2 => 2
Oracle Span 3-4:  chief => (have-org-role-91 :ARG2 chief)
Oracle Span 0-1:  EU => (organization :name (name :op "EU"))
Oracle Span 1-2:  foreign => foreign
Oracle Span 8-9:  Iran => (country :name (name :op "Iran"))
Oracle Span 4-6:  Javier Solana => (person :name (name :op "Solana" :op "Javier"))
Oracle Span 11-12:  offers => offer-01
Oracle Span 2-3:  policy => policy
Oracle Span 7-8:  presented => present-01
Oracle Span 6-7:  recently => recent

Incorrect span: Javier Solana => (person :name (name :op "Javier" :op "Solana"))
Missing span: Javier Solana => (person :name (name :op "Solana" :op "Javier"))
Missing span: EU => (organization :name (name :op "EU"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: 2 => 2
Missing span: foreign => foreign
Dependencies:
1	EU	_	NNP	NNP	_	6	nn	_	_
2	foreign	_	JJ	JJ	_	6	amod	_	_
3	policy	_	NN	NN	_	6	nn	_	_
4	chief	_	NN	NN	_	6	nn	_	_
5	Javier	_	NNP	NNP	_	6	nn	_	_
6	Solana	_	NNP	NNP	_	0	root	_	_
7	recently	_	RB	RB	_	8	advmod	_	_
8	presented	_	VBN	VBN	_	6	vmod	_	_
9	Iran	_	NNP	NNP	_	8	dobj	_	_
10	with	_	IN	IN	_	9	prep	_	_
11	2	_	CD	CD	_	12	num	_	_
12	offers	_	NNS	NNS	_	10	pobj	_	_
13	--	_	:	:	_	6	punct	_	_

Oracle:
(c / chief, mod, p3 / policy)
(c2 / country, name, n3 / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, c / chief)
(n / name, op, "Javier")
(n / name, op, "Solana")
(n2 / name, op, "EU")
(n3 / name, op, "Iran")
(o / organization, name, n2 / name)
(o2 / offer-01, quant, 2 / 2)
(p / present-01, ARG0, p2 / person)
(p / present-01, ARG1, o2 / offer-01)
(p / present-01, ARG2, c2 / country)
(p / present-01, time, r / recent)
(p2 / person, name, n / name)
(p3 / policy, mod, f / foreign)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),offers,offer-01,false), Span(7,8,List(1),presented,present-01,false), Span(6,7,List(2),recently,recent,false), Span(4,6,List(6, 5, 4, 3),Javier Solana,(person :name (name :op "Javier" :op "Solana")),false), Span(3,4,List(8, 7),chief,(have-org-role-91 :ARG2 chief),false), Span(2,3,List(9),policy,policy,false)),Map(2 -> recent, 5 -> "Javier", 8 -> chief, 7 -> have-org-role-91, 1 -> present-01, 4 -> name, 6 -> "Solana", 9 -> policy, 0 -> offer-01, 3 -> person),Map(n -> name, h -> have-org-role-91, p2 -> person, p -> present-01, r -> recent, c -> chief, o -> offer-01, p3 -> policy))),[Ljava.lang.String;@1caa0244,Annotation([Ljava.lang.String;@7ce026d3,[Ljava.lang.String;@7ce69770,[Ljava.lang.String;@1750fbeb),Annotation([Ljava.lang.String;@5b247367,[Ljava.lang.String;@268f106e,[Ledu.cmu.lti.nlp.amr.Dependency;@6e9a5ed8),Annotation([Ljava.lang.String;@7e057f43,[Ljava.lang.String;@6c284af,[Ljava.lang.String;@5890e879),Annotation([Ljava.lang.String;@6440112d,[Ljava.lang.String;@31ea9581,[Ledu.cmu.lti.nlp.amr.Entity;@231f98ef))
AMR:
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, p3 / policy)
(h / have-org-role-91, ARG2, c / chief)
(n / name, op, "Javier")
(n / name, op, "Solana")
(o / offer-01, ARG1, r / recent)
(p / present-01, ARG1, h / have-org-role-91)
(p / present-01, mod, r / recent)
(p2 / person, name, n / name)

Decoded in 53,293 microseconds
Sentence: A US-endorsed package of incentives to cease enriched uranium production

NER Entity: (thing :name (name :op "US" :op "-" :op "endorsed"))
Spans:
Span 8-9:  cease => cease-01
Span 3-4:  endorsed => endorse-01
Span 9-10:  enriched => enrich-01
Span 6-7:  incentives => (thing :ARG0-of incentivize-01)
Span 4-5:  package => package
Span 11-12:  production => produce-01
Span 10-11:  uranium => uranium

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  cease => cease-01
Oracle Span 3-4:  endorsed => endorse-01
Oracle Span 9-10:  enriched => enrich-01
Oracle Span 6-7:  incentives => (thing :ARG0-of incentivize-01)
Oracle Span 4-5:  package => package
Oracle Span 11-12:  production => produce-01
Oracle Span 10-11:  uranium => uranium
Oracle Span 1-2:  US => (country :name (name :op "US"))

Missing span: US => (country :name (name :op "US"))
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	US-endorsed	_	JJ	JJ	_	3	amod	_	_
3	package	_	NN	NN	_	0	root	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	incentives	_	NNS	NNS	_	4	pobj	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	cease	_	VB	VB	_	5	vmod	_	_
8	enriched	_	JJ	JJ	_	10	amod	_	_
9	uranium	_	NN	NN	_	10	nn	_	_
10	production	_	NN	NN	_	7	dobj	_	_

Oracle:
(c / country, name, n / name)
(c2 / cease-01, ARG1, p2 / produce-01)
(e / endorse-01, ARG0, c / country)
(e / endorse-01, ARG1, p / package)
(e2 / enrich-01, ARG1, u / uranium)
(i / incentivize-01, ARG0, t / thing)
(i / incentivize-01, ARG2, c2 / cease-01)
(n / name, op, "US")
(p2 / produce-01, ARG1, u / uranium)
(t / thing, consist, p / package)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),production,produce-01,false), Span(10,11,List(1),uranium,uranium,false), Span(9,10,List(2),enriched,enrich-01,false), Span(8,9,List(3),cease,cease-01,false), Span(6,7,List(5, 4),incentives,(thing :ARG0-of incentivize-01),false), Span(4,5,List(6),package,package,false), Span(3,4,List(7),endorsed,endorse-01,false)),Map(2 -> enrich-01, 5 -> incentivize-01, 7 -> endorse-01, 1 -> uranium, 4 -> thing, 6 -> package, 0 -> produce-01, 3 -> cease-01),Map(e -> enrich-01, t -> thing, e2 -> endorse-01, p2 -> package, p -> produce-01, i -> incentivize-01, c -> cease-01, u -> uranium))),[Ljava.lang.String;@7c137fd5,Annotation([Ljava.lang.String;@183ec003,[Ljava.lang.String;@7d9d0818,[Ljava.lang.String;@221a3fa4),Annotation([Ljava.lang.String;@451001e5,[Ljava.lang.String;@2b40ff9c,[Ledu.cmu.lti.nlp.amr.Dependency;@3e08ff24),Annotation([Ljava.lang.String;@4d1c005e,[Ljava.lang.String;@8462f31,[Ljava.lang.String;@24569dba),Annotation([Ljava.lang.String;@5ddeb7cb,[Ljava.lang.String;@70ed52de,[Ledu.cmu.lti.nlp.amr.Entity;@496bc455))
AMR:
(c / cease-01, ARG1, p / produce-01)
(e / enrich-01, ARG1, u / uranium)
(e2 / endorse-01, ARG1, p2 / package)
(i / incentivize-01, ARG0, t / thing)
(i / incentivize-01, ARG1, c / cease-01)
(p / produce-01, ARG1, u / uranium)
(t / thing, consist, p2 / package)

Decoded in 48,211 microseconds
Sentence: A 6-week pre-negotiation' freeze for freeze' period during which Iran would add no centrifuges and the West would refrain from promoting a 4th round of economic sanctions against Iran at the UN Security Council.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "UN" :op "Security" :op "Council"))
Spans:
Span 19-20:  centrifuges => centrifuge
Span 31-34:  economic sanctions against => (organization :name (name :op "UN" :op "Security" :op "Council"))
Span 10-11:  freeze => freeze-02
Span 8-9:  freeze => freeze-02
Span 6-7:  negotiation => negotiate-01
Span 18-19:  no => -
Span 12-13:  period => period
Span 26-27:  promoting => promote-02
Span 24-25:  refrain => refrain-01
Span 38-40:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 22-23:  West => (world-region :name (name :op "West"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 1-2:  6 => 6
Oracle Span 17-18:  add => add-02
Oracle Span 20-21:  and => and
Oracle Span 19-20:  centrifuges => centrifuge
Oracle Span 31-32:  economic => economy
Oracle Span 8-9:  freeze => freeze-for-freeze
Oracle Span 15-16:  Iran => (country :name (name :op "Iran"))
Oracle Span 18-19:  no => -
Oracle Span 12-13:  period => period
Oracle Span 26-27:  promoting => promote-02
Oracle Span 24-25:  refrain => refrain-01
Oracle Span 29-30:  round => round
Oracle Span 32-33:  sanctions => sanction-02
Oracle Span 37-40:  UN Security Council => (organization :name (name :op "Council" :op "Security" :op "UN"))
Oracle Span 3-4:  week => (temporal-quantity :unit week)
Oracle Span 22-23:  West => (world-region :name (name :op "West"))

Extra span: Security Council => (organization :name (name :op "Council" :op "Security"))
Extra span: economic sanctions against => (organization :name (name :op "UN" :op "Security" :op "Council"))
Extra span: freeze => freeze-02
Incorrect span: freeze => freeze-02
Extra span: negotiation => negotiate-01
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: UN Security Council => (organization :name (name :op "Council" :op "Security" :op "UN"))
Missing span: 6 => 6
Missing span: week => (temporal-quantity :unit week)
Missing span: and => and
Missing span: round => round
Missing span: sanctions => sanction-02
Missing span: add => add-02
Missing span: freeze => freeze-for-freeze
Missing span: economic => economy
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	6-week	_	JJ	JJ	_	3	amod	_	_
3	pre-negotiation	_	NN	NN	_	5	poss	_	_
4	'	_	POS	POS	_	3	possessive	_	_
5	freeze	_	NN	NN	_	21	nsubj	_	_
6	for	_	IN	IN	_	5	prep	_	_
7	freeze	_	NN	NN	_	9	poss	_	_
8	'	_	POS	POS	_	7	possessive	_	_
9	period	_	NN	NN	_	6	pobj	_	_
10	during	_	IN	IN	_	14	prep	_	_
11	which	_	WDT	WDT	_	10	pobj	_	_
12	Iran	_	NNP	NNP	_	14	nsubj	_	_
13	would	_	MD	MD	_	14	aux	_	_
14	add	_	VB	VB	_	9	rcmod	_	_
15	no	_	DT	DT	_	16	neg	_	_
16	centrifuges	_	NNS	NNS	_	14	dobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	the	_	DT	DT	_	19	det	_	_
19	West	_	NN	NN	_	16	conj	_	_
20	would	_	MD	MD	_	21	aux	_	_
21	refrain	_	VB	VB	_	0	root	_	_
22	from	_	IN	IN	_	21	prep	_	_
23	promoting	_	VBG	VBG	_	22	pcomp	_	_
24	a	_	DT	DT	_	26	det	_	_
25	4th	_	JJ	JJ	_	26	amod	_	_
26	round	_	NN	NN	_	23	dobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	economic	_	JJ	JJ	_	29	amod	_	_
29	sanctions	_	NNS	NNS	_	27	pobj	_	_
30	against	_	IN	IN	_	29	prep	_	_
31	Iran	_	NNP	NNP	_	30	pobj	_	_
32	at	_	IN	IN	_	23	prep	_	_
33	the	_	DT	DT	_	36	det	_	_
34	UN	_	NNP	NNP	_	36	nn	_	_
35	Security	_	NNP	NNP	_	36	nn	_	_
36	Council	_	NNP	NNP	_	32	pobj	_	_
37	.	_	.	.	_	21	punct	_	_

Oracle:
(a / and, op, a2 / add-02)
(a / and, op, r / refrain-01)
(a / and, time, p / period)
(a2 / add-02, ARG0, c / country)
(a2 / add-02, ARG1, c2 / centrifuge)
(a2 / add-02, polarity, - / -)
(c / country, name, n / name)
(n / name, op, "Iran")
(n2 / name, op, "West")
(n3 / name, op, "Council")
(n3 / name, op, "Security")
(n3 / name, op, "UN")
(o / organization, name, n3 / name)
(p / period, duration, t / temporal-quantity)
(p / period, mod, f / freeze-for-freeze)
(p2 / promote-02, ARG0, w2 / world-region)
(p2 / promote-02, ARG1, r2 / round)
(p2 / promote-02, ARG2, o / organization)
(r / refrain-01, ARG0, w2 / world-region)
(r / refrain-01, ARG1, p2 / promote-02)
(r2 / round, mod, s / sanction-02)
(s / sanction-02, ARG1, c / country)
(s / sanction-02, mod, e / economy)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, w / week)
(w2 / world-region, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(38,40,List(3, 2, 1, 0),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(31,34,List(8, 7, 6, 5, 4),economic sanctions against,(organization :name (name :op "UN" :op "Security" :op "Council")),false), Span(26,27,List(9),promoting,promote-02,false), Span(24,25,List(10),refrain,refrain-01,false), Span(22,23,List(13, 12, 11),West,(world-region :name (name :op "West")),false), Span(19,20,List(14),centrifuges,centrifuge,false), Span(18,19,List(15),no,-,false), Span(12,13,List(16),period,period,false), Span(10,11,List(17),freeze,freeze-02,false), Span(8,9,List(18),freeze,freeze-02,false), Span(6,7,List(19),negotiation,negotiate-01,false)),Map(2 -> "Council", 5 -> name, 12 -> name, 15 -> -, 8 -> "Council", 18 -> freeze-02, 7 -> "Security", 17 -> freeze-02, 1 -> name, 4 -> organization, 11 -> world-region, 14 -> centrifuge, 6 -> "UN", 0 -> organization, 9 -> promote-02, 16 -> period, 19 -> negotiate-01, 3 -> "Security", 10 -> refrain-01, 13 -> "West"),Map(n -> name, w -> world-region, p2 -> period, n4 -> negotiate-01, p -> promote-02, n3 -> name, o2 -> organization, r -> refrain-01, - -> -, c -> centrifuge, f2 -> freeze-02, f -> freeze-02, o -> organization, n2 -> name))),[Ljava.lang.String;@59402b8f,Annotation([Ljava.lang.String;@7188af83,[Ljava.lang.String;@6be968ce,[Ljava.lang.String;@7c37508a),Annotation([Ljava.lang.String;@247310d0,[Ljava.lang.String;@1033576a,[Ledu.cmu.lti.nlp.amr.Dependency;@303cf2ba),Annotation([Ljava.lang.String;@76494737,[Ljava.lang.String;@4a003cbe,[Ljava.lang.String;@4082ba93),Annotation([Ljava.lang.String;@17fc391b,[Ljava.lang.String;@2b30a42c,[Ledu.cmu.lti.nlp.amr.Entity;@609e8838))
AMR:
(c / centrifuge, polarity, - / -)
(f / freeze-02, ARG1, - / -)
(f2 / freeze-02, ARG0, n4 / negotiate-01)
(f2 / freeze-02, ARG1, p2 / period)
(n / name, op, "Council")
(n / name, op, "Security")
(n2 / name, op, "Council")
(n2 / name, op, "Security")
(n2 / name, op, "UN")
(n3 / name, op, "West")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(p / promote-02, ARG0, f2 / freeze-02)
(p / promote-02, ARG1, o / organization)
(p / promote-02, ARG2, o2 / organization)
(p2 / period, poss, f / freeze-02)
(r / refrain-01, ARG0, w / world-region)
(r / refrain-01, ARG1, p / promote-02)
(w / world-region, name, n3 / name)

Decoded in 418,004 microseconds
Sentence: US officials repeatedly stated that no negotiations can begin before Iran verifiably halts all enrichment-related activities but the Bush administration recently agreed to the' freeze for freeze' proposal and dispatch burns to Geneva.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (country :name (name :op "Geneva"))
Spans:
Span 17-18:  activities => activity
Span 21-22:  administration => administrate-01
Span 13-14:  all => all
Span 9-10:  before => before
Span 8-9:  begin => begin-01
Span 20-21:  Bush => (person :name (name :op "Bush"))
Span 7-8:  can => possible
Span 33-34:  dispatch => dispatch-01
Span 14-15:  enrichment => enrich-01
Span 29-30:  freeze => freeze-02
Span 27-28:  freeze => freeze-02
Span 6-7:  negotiations => negotiate-01
Span 5-6:  no => -
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 31-32:  proposal => propose-01
Span 22-23:  recently => recent
Span 16-17:  related => relate-01
Span 2-3:  repeatedly => repeat-01

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Oracle Span 17-18:  activities => activity
Oracle Span 21-22:  administration => administrate-01
Oracle Span 23-24:  agreed => agree-01
Oracle Span 13-14:  all => all
Oracle Span 32-33:  and => and
Oracle Span 9-10:  before => before
Oracle Span 8-9:  begin => begin-01
Oracle Span 34-35:  burns => (person :name (name :op "Burns"))
Oracle Span 20-21:  Bush => (person :name (name :op "Bush"))
Oracle Span 7-8:  can => possible
Oracle Span 33-34:  dispatch => dispatch-01
Oracle Span 14-15:  enrichment => enrich-01
Oracle Span 27-28:  freeze => freeze-for-freeze
Oracle Span 36-37:  Geneva => (city :name (name :op "Geneva"))
Oracle Span 12-13:  halts => halt-01
Oracle Span 10-11:  Iran => (country :name (name :op "Iran"))
Oracle Span 6-7:  negotiations => negotiate-01
Oracle Span 5-6:  no => -
Oracle Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 31-32:  proposal => (thing :ARG1-of propose-01)
Oracle Span 22-23:  recently => recent
Oracle Span 16-17:  related => relate-01
Oracle Span 2-3:  repeatedly => repeat-01
Oracle Span 3-4:  stated => state-01
Oracle Span 0-1:  US => (country :name (name :op "US"))
Oracle Span 11-12:  verifiably => verify-01

Incorrect span: proposal => propose-01
Extra span: freeze => freeze-02
Incorrect span: freeze => freeze-02
Missing span: US => (country :name (name :op "US"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: burns => (person :name (name :op "Burns"))
Missing span: Geneva => (city :name (name :op "Geneva"))
Missing span: stated => state-01
Missing span: halts => halt-01
Missing span: and => and
Missing span: agreed => agree-01
Missing span: freeze => freeze-for-freeze
Missing span: proposal => (thing :ARG1-of propose-01)
Missing span: verifiably => verify-01
Dependencies:
1	US	_	NNP	NNP	_	2	nn	_	_
2	officials	_	NNS	NNS	_	4	nsubj	_	_
3	repeatedly	_	RB	RB	_	4	advmod	_	_
4	stated	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	9	mark	_	_
6	no	_	DT	DT	_	7	neg	_	_
7	negotiations	_	NNS	NNS	_	9	nsubj	_	_
8	can	_	MD	MD	_	9	aux	_	_
9	begin	_	VB	VB	_	4	ccomp	_	_
10	before	_	IN	IN	_	9	prep	_	_
11	Iran	_	NNP	NNP	_	13	nn	_	_
12	verifiably	_	NN	NN	_	13	nn	_	_
13	halts	_	NNS	NNS	_	10	pobj	_	_
14	all	_	DT	DT	_	16	det	_	_
15	enrichment-related	_	JJ	JJ	_	16	amod	_	_
16	activities	_	NNS	NNS	_	9	dobj	_	_
17	but	_	CC	CC	_	16	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	Bush	_	NNP	NNP	_	20	nn	_	_
20	administration	_	NN	NN	_	17	pobj	_	_
21	recently	_	RB	RB	_	22	advmod	_	_
22	agreed	_	VBN	VBN	_	20	vmod	_	_
23	to	_	TO	TO	_	22	prep	_	_
24	the	_	NNP	NNP	_	26	poss	_	_
25	'	_	POS	POS	_	24	possessive	_	_
26	freeze	_	NN	NN	_	23	pobj	_	_
27	for	_	IN	IN	_	26	prep	_	_
28	freeze	_	NN	NN	_	30	poss	_	_
29	'	_	POS	POS	_	28	possessive	_	_
30	proposal	_	NN	NN	_	27	pobj	_	_
31	and	_	CC	CC	_	9	cc	_	_
32	dispatch	_	VB	VB	_	9	conj	_	_
33	burns	_	NNS	NNS	_	32	dobj	_	_
34	to	_	TO	TO	_	32	prep	_	_
35	Geneva	_	NNP	NNP	_	34	pobj	_	_
36	.	_	.	.	_	4	punct	_	_

Oracle:
(a / agree-01, ARG1, t / thing)
(a / agree-01, mod, r3 / recent)
(a3 / and, concession, r / repeat-01)
(a3 / and, op, a / agree-01)
(a3 / and, op, d / dispatch-01)
(a4 / activity, quant, a5 / all)
(b / begin-01, ARG1, n2 / negotiate-01)
(b / begin-01, time, b2 / before)
(b2 / before, op, h / halt-01)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / city, name, n6 / name)
(d / dispatch-01, ARG1, p5 / person)
(d / dispatch-01, ARG2, c3 / city)
(h / halt-01, ARG0, c2 / country)
(h / halt-01, ARG1, a4 / activity)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, o / official)
(n / name, op, "US")
(n3 / name, op, "Iran")
(n4 / name, op, "Bush")
(n5 / name, op, "Burns")
(n6 / name, op, "Geneva")
(p / possible, domain, b / begin-01)
(p / possible, polarity, - / -)
(p2 / person, name, n4 / name)
(p3 / propose-01, ARG1, t / thing)
(p5 / person, name, n5 / name)
(r / repeat-01, ARG1, s / state-01)
(r2 / relate-01, ARG1, a4 / activity)
(r2 / relate-01, ARG2, e / enrich-01)
(s / state-01, ARG1, p / possible)
(t / thing, mod, f / freeze-for-freeze)
(v / verify-01, ARG1, h / halt-01)

Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),dispatch,dispatch-01,false), Span(31,32,List(1),proposal,propose-01,false), Span(29,30,List(2),freeze,freeze-02,false), Span(27,28,List(3),freeze,freeze-02,false), Span(22,23,List(4),recently,recent,false), Span(21,22,List(5),administration,administrate-01,false), Span(20,21,List(8, 7, 6),Bush,(person :name (name :op "Bush")),false), Span(17,18,List(9),activities,activity,false), Span(16,17,List(10),related,relate-01,false), Span(14,15,List(11),enrichment,enrich-01,false), Span(13,14,List(12),all,all,false), Span(9,10,List(13),before,before,false), Span(8,9,List(14),begin,begin-01,false), Span(7,8,List(15),can,possible,false), Span(6,7,List(16),negotiations,negotiate-01,false), Span(5,6,List(17),no,-,false), Span(2,3,List(18),repeatedly,repeat-01,false), Span(1,2,List(20, 19),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> freeze-02, 5 -> administrate-01, 12 -> all, 15 -> possible, 8 -> "Bush", 18 -> repeat-01, 7 -> name, 17 -> -, 1 -> propose-01, 4 -> recent, 11 -> enrich-01, 14 -> begin-01, 20 -> official, 6 -> person, 0 -> dispatch-01, 9 -> activity, 16 -> negotiate-01, 19 -> have-org-role-91, 3 -> freeze-02, 10 -> relate-01, 13 -> before),Map(e -> enrich-01, n -> name, h -> have-org-role-91, r3 -> repeat-01, b -> before, b2 -> begin-01, p2 -> person, a3 -> all, d -> dispatch-01, p -> propose-01, r2 -> relate-01, a -> administrate-01, r -> recent, a2 -> activity, - -> -, f2 -> freeze-02, f -> freeze-02, o -> official, p3 -> possible, n2 -> negotiate-01))),[Ljava.lang.String;@359df09a,Annotation([Ljava.lang.String;@43df23d3,[Ljava.lang.String;@6d60fe40,[Ljava.lang.String;@792b749c),Annotation([Ljava.lang.String;@23e84203,[Ljava.lang.String;@19932c16,[Ledu.cmu.lti.nlp.amr.Dependency;@73eb439a),Annotation([Ljava.lang.String;@514646ef,[Ljava.lang.String;@305ffe9e,[Ljava.lang.String;@302c971f),Annotation([Ljava.lang.String;@1972e513,[Ljava.lang.String;@7ae0a9ec,[Ledu.cmu.lti.nlp.amr.Entity;@35841320))
AMR:
(a / administrate-01, ARG1, p2 / person)
(a / administrate-01, frequency, r / recent)
(a2 / activity, mod, a3 / all)
(b2 / begin-01, ARG0, n2 / negotiate-01)
(b2 / begin-01, ARG1, a2 / activity)
(b2 / begin-01, time, b / before)
(d / dispatch-01, ARG1, a2 / activity)
(d / dispatch-01, ARG2, f / freeze-02)
(f2 / freeze-02, ARG1, p / propose-01)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Bush")
(n2 / negotiate-01, polarity, - / -)
(p / propose-01, ARG1, f / freeze-02)
(p2 / person, name, n / name)
(p3 / possible, domain, b2 / begin-01)
(r2 / relate-01, ARG0, a / administrate-01)
(r2 / relate-01, ARG1, a2 / activity)
(r2 / relate-01, ARG2, e / enrich-01)
(r3 / repeat-01, ARG1, h / have-org-role-91)

Decoded in 1,507,643 microseconds
Sentence: 20080726 during talks in Geneva attended by US Undersecretary of State William J. Burns Iran refused to respond to Solana's offers.

mkDayMonthYear(20080726,26,07,2008)
NER Entity: (country :name (name :op "Geneva"))
NER Entity: (organization :name (name :op "US" :op "Undersecretary" :op "of" :op "State"))
NER Entity: (person :name (name :op "William" :op "J." :op "Burns"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (person :name (name :op "Solana"))
mkDayMonthYear(20080726,26,07,2008)
Spans:
Span 0-1:  20080726 => (date-entity :day 26 :month 7 :year 2008)
Span 5-6:  attended => attend-01
Span 21-22:  offers => offer-01
Span 15-16:  refused => refuse-01
Span 17-18:  respond => respond-01
Span 2-3:  talks => talk-01
Span 7-11:  US Undersecretary of State => (organization :name (name :op "US" :op "Undersecretary" :op "of" :op "State"))
Span 11-14:  William J. Burns => (person :name (name :op "William" :op "J." :op "Burns"))

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 0-1:  20080726 => (date-entity :day 26 :month 7 :year 2008)
Oracle Span 5-6:  attended => attend-01
Oracle Span 4-5:  Geneva => (city :name (name :op "Geneva"))
Oracle Span 14-15:  Iran => (country :name (name :op "Iran"))
Oracle Span 21-22:  offers => (thing :ARG1-of offer-01)
Oracle Span 15-16:  refused => refuse-01
Oracle Span 17-18:  respond => respond-01
Oracle Span 19-20:  Solana => (person :name (name :op "Solana"))
Oracle Span 10-11:  State => state
Oracle Span 2-3:  talks => talk-01
Oracle Span 8-9:  Undersecretary => (have-org-role-91 :ARG2 undersecretary)
Oracle Span 7-8:  US => (country :name (name :op "US"))
Oracle Span 11-14:  William J. Burns => (person :name (name :op "Burns" :op "J." :op "William"))

Incorrect span: offers => offer-01
Incorrect span: William J. Burns => (person :name (name :op "William" :op "J." :op "Burns"))
Extra span: US Undersecretary of State => (organization :name (name :op "US" :op "Undersecretary" :op "of" :op "State"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Solana => (person :name (name :op "Solana"))
Missing span: Geneva => (city :name (name :op "Geneva"))
Missing span: William J. Burns => (person :name (name :op "Burns" :op "J." :op "William"))
Missing span: US => (country :name (name :op "US"))
Missing span: Undersecretary => (have-org-role-91 :ARG2 undersecretary)
Missing span: State => state
Missing span: offers => (thing :ARG1-of offer-01)
Dependencies:
1	20080726	_	CD	CD	_	6	nsubj	_	_
2	during	_	IN	IN	_	1	prep	_	_
3	talks	_	NNS	NNS	_	2	pobj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Geneva	_	NNP	NNP	_	4	pobj	_	_
6	attended	_	VBD	VBD	_	0	root	_	_
7	by	_	IN	IN	_	6	prep	_	_
8	US	_	NNP	NNP	_	9	nn	_	_
9	Undersecretary	_	NNP	NNP	_	7	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	State	_	NNP	NNP	_	15	nn	_	_
12	William	_	NNP	NNP	_	15	nn	_	_
13	J.	_	NNP	NNP	_	15	nn	_	_
14	Burns	_	NNP	NNP	_	15	nn	_	_
15	Iran	_	NNP	NNP	_	10	pobj	_	_
16	refused	_	VBN	VBN	_	15	vmod	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	respond	_	VB	VB	_	16	xcomp	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	Solana	_	NNP	NNP	_	22	poss	_	_
21	's	_	POS	POS	_	20	possessive	_	_
22	offers	_	NNS	NNS	_	19	pobj	_	_
23	.	_	.	.	_	6	punct	_	_

Oracle:
(a / attend-01, ARG0, p2 / person)
(a / attend-01, ARG1, t / talk-01)
(c / country, name, n / name)
(c2 / city, name, n3 / name)
(c3 / country, name, n5 / name)
(d / date-entity, day, 26)
(d / date-entity, month, 7)
(d / date-entity, year, 2008)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, u / undersecretary)
(n / name, op, "Iran")
(n2 / name, op, "Solana")
(n3 / name, op, "Geneva")
(n4 / name, op, "Burns")
(n4 / name, op, "J.")
(n4 / name, op, "William")
(n5 / name, op, "US")
(o / offer-01, ARG0, p / person)
(o / offer-01, ARG1, t2 / thing)
(p / person, name, n2 / name)
(p2 / person, name, n4 / name)
(r / refuse-01, ARG0, c / country)
(r / refuse-01, ARG1, r2 / respond-01)
(r / refuse-01, time, d / date-entity)
(r / refuse-01, time, t / talk-01)
(r2 / respond-01, ARG0, c / country)
(r2 / respond-01, ARG1, t2 / thing)
(t / talk-01, location, c2 / city)
(u / undersecretary, mod, s / state)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),offers,offer-01,false), Span(17,18,List(1),respond,respond-01,false), Span(15,16,List(2),refused,refuse-01,false), Span(11,14,List(7, 6, 5, 4, 3),William J. Burns,(person :name (name :op "William" :op "J." :op "Burns")),false), Span(7,11,List(13, 12, 11, 10, 9, 8),US Undersecretary of State,(organization :name (name :op "US" :op "Undersecretary" :op "of" :op "State")),false), Span(5,6,List(14),attended,attend-01,false), Span(2,3,List(15),talks,talk-01,false), Span(0,1,List(19, 18, 17, 16),20080726,(date-entity :day 26 :month 7 :year 2008),false)),Map(2 -> refuse-01, 5 -> "William", 12 -> "of", 15 -> talk-01, 8 -> organization, 18 -> 7, 7 -> "Burns", 17 -> 26, 1 -> respond-01, 4 -> name, 11 -> "Undersecretary", 14 -> attend-01, 6 -> "J.", 0 -> offer-01, 9 -> name, 16 -> date-entity, 19 -> 2008, 3 -> person, 10 -> "US", 13 -> "State"),Map(n -> name, 2 -> 26, t -> talk-01, d -> date-entity, 7 -> 7, r2 -> refuse-01, p -> person, a -> attend-01, o2 -> organization, r -> respond-01, 22 -> 2008, o -> offer-01, n2 -> name))),[Ljava.lang.String;@61c4eee0,Annotation([Ljava.lang.String;@6f10d5b6,[Ljava.lang.String;@1040be71,[Ljava.lang.String;@548a24a),Annotation([Ljava.lang.String;@433defed,[Ljava.lang.String;@2a693f59,[Ledu.cmu.lti.nlp.amr.Dependency;@3f4faf53),Annotation([Ljava.lang.String;@7fd50002,[Ljava.lang.String;@533bda92,[Ljava.lang.String;@304bb45b),Annotation([Ljava.lang.String;@723ca036,[Ljava.lang.String;@25be7b63,[Ledu.cmu.lti.nlp.amr.Entity;@28dcca0c))
AMR:
(a / attend-01, ARG1, t / talk-01)
(d / date-entity, day, 2 / 26)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2008)
(n / name, op, "Burns")
(n / name, op, "J.")
(n / name, op, "William")
(n2 / name, op, "State")
(n2 / name, op, "US")
(n2 / name, op, "Undersecretary")
(n2 / name, op, "of")
(o / offer-01, ARG1, d / date-entity)
(o2 / organization, name, n2 / name)
(o2 / organization, op, r2 / refuse-01)
(p / person, name, n / name)
(r / respond-01, ARG1, o / offer-01)
(r2 / refuse-01, ARG1, r / respond-01)
(t / talk-01, ARG1, r2 / refuse-01)
(t / talk-01, ARG2, p / person)

Decoded in 151,878 microseconds
Sentence: The talks constituted the highest-level diplomatic contact between the US and Iran for nearly 30 years.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 2-3:  constituted => constitute-01
Span 8-9:  contact => contact-01
Span 7-8:  diplomatic => diplomacy
Span 4-5:  highest => (high :degree most)
Span 6-7:  level => level
Span 1-2:  talks => talk-01
Span 17-18:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 16-17:  30 => 30
Oracle Span 2-3:  constituted => constitute-01
Oracle Span 8-9:  contact => contact-01
Oracle Span 7-8:  diplomatic => diplomacy
Oracle Span 4-5:  highest => (high :degree most)
Oracle Span 13-14:  Iran => (country :name (name :op "Iran"))
Oracle Span 6-7:  level => level
Oracle Span 15-16:  nearly => nearly
Oracle Span 1-2:  talks => talk-01
Oracle Span 11-12:  US => (country :name (name :op "US"))
Oracle Span 17-18:  years => (temporal-quantity :unit year)

Missing span: US => (country :name (name :op "US"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: nearly => nearly
Missing span: 30 => 30
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	talks	_	NNS	NNS	_	3	nsubj	_	_
3	constituted	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	7	det	_	_
5	highest-level	_	JJ	JJ	_	7	amod	_	_
6	diplomatic	_	JJ	JJ	_	7	amod	_	_
7	contact	_	NN	NN	_	3	dobj	_	_
8	between	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	US	_	NNP	NNP	_	8	pobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	Iran	_	NNP	NNP	_	10	conj	_	_
13	for	_	IN	IN	_	3	prep	_	_
14	nearly	_	RB	RB	_	15	quantmod	_	_
15	30	_	CD	CD	_	16	num	_	_
16	years	_	NNS	NNS	_	13	pobj	_	_
17	.	_	.	.	_	3	punct	_	_

Oracle:
(c / constitute-01, ARG0, t / talk-01)
(c / constitute-01, ARG1, c2 / contact-01)
(c2 / contact-01, ARG0, c3 / country)
(c2 / contact-01, ARG1, c4 / country)
(c2 / contact-01, mod, d / diplomacy)
(c2 / contact-01, mod, l / level)
(c2 / contact-01, time, n4 / nearly)
(c3 / country, name, n / name)
(c4 / country, name, n2 / name)
(h / high, degree, m / most)
(l / level, mod, h / high)
(n / name, op, "US")
(n2 / name, op, "Iran")
(n4 / nearly, op, t2 / temporal-quantity)
(t2 / temporal-quantity, quant, 3 / 30)
(t2 / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(1, 0),years,(temporal-quantity :unit year),false), Span(8,9,List(2),contact,contact-01,false), Span(7,8,List(3),diplomatic,diplomacy,false), Span(6,7,List(4),level,level,false), Span(4,5,List(6, 5),highest,(high :degree most),false), Span(2,3,List(7),constituted,constitute-01,false), Span(1,2,List(8),talks,talk-01,false)),Map(2 -> contact-01, 5 -> high, 8 -> talk-01, 7 -> constitute-01, 1 -> year, 4 -> level, 6 -> most, 0 -> temporal-quantity, 3 -> diplomacy),Map(h -> high, t -> temporal-quantity, m -> most, d -> diplomacy, y -> year, t2 -> talk-01, l -> level, c -> contact-01, c2 -> constitute-01))),[Ljava.lang.String;@45d84a20,Annotation([Ljava.lang.String;@52f27fbd,[Ljava.lang.String;@4c163e3,[Ljava.lang.String;@4a8355dd),Annotation([Ljava.lang.String;@4d0d9fe7,[Ljava.lang.String;@c430e6c,[Ledu.cmu.lti.nlp.amr.Dependency;@312aa7c),Annotation([Ljava.lang.String;@536f2a7e,[Ljava.lang.String;@72bc6553,[Ljava.lang.String;@66982506),Annotation([Ljava.lang.String;@70cf32e3,[Ljava.lang.String;@5a59ca5e,[Ledu.cmu.lti.nlp.amr.Entity;@4bdeaabb))
AMR:
(c / contact-01, ARG1, t / temporal-quantity)
(c / contact-01, mod, d / diplomacy)
(c / contact-01, mod, l / level)
(c2 / constitute-01, ARG0, t2 / talk-01)
(c2 / constitute-01, ARG1, c / contact-01)
(h / high, degree, m / most)
(l / level, mod, h / high)
(t / temporal-quantity, unit, y / year)

Decoded in 116,873 microseconds
Sentence: Solana, burns and European envoys set a deadline for Iran to respond positively before initiating new sanctions including prohibitions on selling Iran refined petroleum products vital to the country's economy.

NER Entity: (person :name (name :op "Solana"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 14-15:  before => before
Span 29-30:  country => country
Span 8-9:  deadline => deadline
Span 16-17:  new => new
Span 25-26:  products => product
Span 23-24:  refined => refine-01
Span 12-13:  respond => respond-01
Span 21-22:  selling => sell-01
Span 26-27:  vital => vital

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 3-4:  and => and
Oracle Span 14-15:  before => before
Oracle Span 2-3:  burns => (person :name (name :op "Burns"))
Oracle Span 29-30:  country => country
Oracle Span 8-9:  deadline => deadline
Oracle Span 31-32:  economy => economy
Oracle Span 5-6:  envoys => envoy
Oracle Span 4-5:  European => (continent :name (name :op "Europe"))
Oracle Span 18-19:  including => include-01
Oracle Span 15-16:  initiating => initiate-01
Oracle Span 10-11:  Iran => (name :op "Iran")
Oracle Span 16-17:  new => new
Oracle Span 24-25:  petroleum => petroleum
Oracle Span 13-14:  positively => positive
Oracle Span 25-26:  products => product
Oracle Span 19-20:  prohibitions => prohibit-01
Oracle Span 23-24:  refined => refine-01
Oracle Span 12-13:  respond => respond-01
Oracle Span 17-18:  sanctions => sanction-02
Oracle Span 21-22:  selling => sell-01
Oracle Span 6-7:  set => set-01
Oracle Span 0-1:  Solana => (person :name (name :op "Solana"))
Oracle Span 26-27:  vital => vital

Missing span: Solana => (person :name (name :op "Solana"))
Missing span: burns => (person :name (name :op "Burns"))
Missing span: Iran => (name :op "Iran")
Missing span: European => (continent :name (name :op "Europe"))
Missing span: set => set-01
Missing span: initiating => initiate-01
Missing span: sanctions => sanction-02
Missing span: including => include-01
Missing span: economy => economy
Missing span: petroleum => petroleum
Missing span: and => and
Missing span: envoys => envoy
Missing span: prohibitions => prohibit-01
Missing span: positively => positive
Dependencies:
1	Solana	_	NNP	NNP	_	7	nsubj	_	_
2	,	_	,	,	_	1	punct	_	_
3	burns	_	NNS	NNS	_	1	conj	_	_
4	and	_	CC	CC	_	1	cc	_	_
5	European	_	JJ	JJ	_	6	amod	_	_
6	envoys	_	NNS	NNS	_	1	conj	_	_
7	set	_	VBD	VBD	_	0	root	_	_
8	a	_	DT	DT	_	9	det	_	_
9	deadline	_	NN	NN	_	7	dobj	_	_
10	for	_	IN	IN	_	7	prep	_	_
11	Iran	_	NNP	NNP	_	10	pobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	respond	_	VB	VB	_	7	vmod	_	_
14	positively	_	RB	RB	_	13	advmod	_	_
15	before	_	IN	IN	_	13	prep	_	_
16	initiating	_	VBG	VBG	_	15	pcomp	_	_
17	new	_	JJ	JJ	_	18	amod	_	_
18	sanctions	_	NNS	NNS	_	16	dobj	_	_
19	including	_	VBG	VBG	_	18	prep	_	_
20	prohibitions	_	NNS	NNS	_	19	pobj	_	_
21	on	_	IN	IN	_	20	prep	_	_
22	selling	_	VBG	VBG	_	21	pcomp	_	_
23	Iran	_	NNP	NNP	_	26	nn	_	_
24	refined	_	JJ	JJ	_	26	amod	_	_
25	petroleum	_	NN	NN	_	26	nn	_	_
26	products	_	NNS	NNS	_	27	nsubj	_	_
27	vital	_	JJ	JJ	_	22	xcomp	_	_
28	to	_	TO	TO	_	27	prep	_	_
29	the	_	DT	DT	_	30	det	_	_
30	country	_	NN	NN	_	32	poss	_	_
31	's	_	POS	POS	_	30	possessive	_	_
32	economy	_	NN	NN	_	28	pobj	_	_
33	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, e / envoy)
(a / and, op, p / person)
(a / and, op, p2 / person)
(b / before, op, i / initiate-01)
(c / continent, name, n3 / name)
(c2 / country, name, n4 / name)
(d / deadline, prep-for, r / respond-01)
(e / envoy, mod, c / continent)
(e2 / economy, poss, c2 / country)
(i / initiate-01, ARG0, a / and)
(i / initiate-01, ARG1, s2 / sanction-02)
(i2 / include-01, ARG1, p4 / prohibit-01)
(i2 / include-01, ARG2, s2 / sanction-02)
(n / name, op, "Solana")
(n2 / name, op, "Burns")
(n3 / name, op, "Europe")
(n4 / name, op, "Iran")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p4 / prohibit-01, ARG1, s3 / sell-01)
(p5 / product, mod, p6 / petroleum)
(p5 / product, mod, v / vital)
(r / respond-01, ARG0, c2 / country)
(r / respond-01, ARG2, p3 / positive)
(r2 / refine-01, ARG1, p6 / petroleum)
(s / set-01, ARG0, a / and)
(s / set-01, ARG1, d / deadline)
(s / set-01, time, b / before)
(s2 / sanction-02, mod, n5 / new)
(s3 / sell-01, ARG1, p5 / product)
(s3 / sell-01, ARG2, c2 / country)
(v / vital, prep-to, e2 / economy)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),country,country,false), Span(26,27,List(1),vital,vital,false), Span(25,26,List(2),products,product,false), Span(23,24,List(3),refined,refine-01,false), Span(21,22,List(4),selling,sell-01,false), Span(16,17,List(5),new,new,false), Span(14,15,List(6),before,before,false), Span(12,13,List(7),respond,respond-01,false), Span(8,9,List(8),deadline,deadline,false)),Map(2 -> product, 5 -> new, 8 -> deadline, 7 -> respond-01, 1 -> vital, 4 -> sell-01, 6 -> before, 0 -> country, 3 -> refine-01),Map(n -> new, b -> before, s -> sell-01, d -> deadline, v -> vital, r2 -> respond-01, p -> product, r -> refine-01, c -> country))),[Ljava.lang.String;@6c4906d3,Annotation([Ljava.lang.String;@65987993,[Ljava.lang.String;@71075444,[Ljava.lang.String;@4f32a3ad),Annotation([Ljava.lang.String;@6b695b06,[Ljava.lang.String;@4d1bf319,[Ledu.cmu.lti.nlp.amr.Dependency;@6f53b8a),Annotation([Ljava.lang.String;@5c80cf32,[Ljava.lang.String;@7d900ecf,[Ljava.lang.String;@6f01b95f),Annotation([Ljava.lang.String;@4007f65e,[Ljava.lang.String;@1a245833,[Ledu.cmu.lti.nlp.amr.Entity;@673fdbce))
AMR:
(d / deadline, purpose, r2 / respond-01)
(r / refine-01, ARG1, p / product)
(r2 / respond-01, ARG0, c / country)
(r2 / respond-01, ARG1, n / new)
(r2 / respond-01, path, b / before)
(s / sell-01, ARG0, c / country)
(s / sell-01, ARG1, p / product)
(s / sell-01, ARG2, v / vital)

Decoded in 425,053 microseconds
Sentence: Iranian officials refused to commit to stopping expansion or to observe the deadline.

NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 4-5:  commit => commit-02
Span 12-13:  deadline => deadline
Span 7-8:  expansion => expand-01
Span 10-11:  observe => observe-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 8-9:  or => or
Span 2-3:  refused => refuse-01
Span 6-7:  stopping => stop-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 4-5:  commit => commit-01
Oracle Span 12-13:  deadline => deadline
Oracle Span 7-8:  expansion => expand-01
Oracle Span 0-1:  Iranian => (country :name (name :op "Iran"))
Oracle Span 10-11:  observe => observe-00
Oracle Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 8-9:  or => or
Oracle Span 2-3:  refused => refuse-01
Oracle Span 6-7:  stopping => stop-01

Incorrect span: observe => observe-01
Incorrect span: commit => commit-02
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: commit => commit-01
Missing span: observe => observe-00
Dependencies:
1	Iranian	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	3	nsubj	_	_
3	refused	_	VBD	VBD	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	commit	_	VB	VB	_	3	ccomp	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	stopping	_	NN	NN	_	8	nn	_	_
8	expansion	_	NN	NN	_	6	pobj	_	_
9	or	_	CC	CC	_	5	cc	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	observe	_	VB	VB	_	5	conj	_	_
12	the	_	DT	DT	_	13	det	_	_
13	deadline	_	NN	NN	_	11	dobj	_	_
14	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / commit-01, ARG2, o2 / or)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Iran")
(o2 / or, op, o3 / observe-00)
(o2 / or, op, s / stop-01)
(o3 / observe-00, ARG1, d / deadline)
(r / refuse-01, ARG1, c2 / commit-01)
(s / stop-01, ARG1, e / expand-01)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),deadline,deadline,false), Span(10,11,List(1),observe,observe-01,false), Span(8,9,List(2),or,or,false), Span(7,8,List(3),expansion,expand-01,false), Span(6,7,List(4),stopping,stop-01,false), Span(4,5,List(5),commit,commit-02,false), Span(2,3,List(6),refused,refuse-01,false), Span(1,2,List(8, 7),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> or, 5 -> commit-02, 8 -> official, 7 -> have-org-role-91, 1 -> observe-01, 4 -> stop-01, 6 -> refuse-01, 0 -> deadline, 3 -> expand-01),Map(e -> expand-01, h -> have-org-role-91, o3 -> official, s -> stop-01, d -> deadline, o2 -> or, r -> refuse-01, c -> commit-02, o -> observe-01))),[Ljava.lang.String;@5965d37,Annotation([Ljava.lang.String;@7a5ceedd,[Ljava.lang.String;@4201c465,[Ljava.lang.String;@5b799640),Annotation([Ljava.lang.String;@6cb107fd,[Ljava.lang.String;@710636b0,[Ledu.cmu.lti.nlp.amr.Dependency;@3de8f619),Annotation([Ljava.lang.String;@2ab4bc72,[Ljava.lang.String;@4e5ed836,[Ljava.lang.String;@eadd4fb),Annotation([Ljava.lang.String;@740fb309,[Ljava.lang.String;@7bd7d6d6,[Ledu.cmu.lti.nlp.amr.Entity;@43f02ef2))
AMR:
(c / commit-02, ARG1, e / expand-01)
(e / expand-01, ARG1, s / stop-01)
(h / have-org-role-91, ARG2, o3 / official)
(o / observe-01, ARG1, d / deadline)
(o2 / or, op, c / commit-02)
(o2 / or, op, o / observe-01)
(r / refuse-01, ARG2, o2 / or)
(s / stop-01, ARG1, h / have-org-role-91)

Decoded in 71,505 microseconds
Sentence: 20080726 ahmadinejad appeared to suggest that Iran might potentially halt expansion at a higher number of centrifuges that previously expected and for over 6 weeks.

mkDayMonthYear(20080726,26,07,2008)
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(20080726,26,07,2008)
Spans:
Span 0-1:  20080726 => (date-entity :day 26 :month 7 :year 2008)
Span 16-17:  centrifuges => centrifuge
Span 10-11:  expansion => expand-01
Span 19-20:  expected => expect-01
Span 9-10:  halt => halt-01
Span 13-14:  higher => high
Span 8-9:  potentially => potential
Span 18-19:  previously => previous
Span 4-5:  suggest => suggest-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 0-1:  20080726 => (date-entity :day 26 :month 7 :year 2008)
Oracle Span 23-24:  6 => 6
Oracle Span 1-2:  ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 2-3:  appeared => appear-02
Oracle Span 16-17:  centrifuges => centrifuge
Oracle Span 10-11:  expansion => expand-01
Oracle Span 19-20:  expected => expect-01
Oracle Span 9-10:  halt => halt-01
Oracle Span 13-14:  higher => high
Oracle Span 6-7:  Iran => (country :name (name :op "Iran"))
Oracle Span 14-15:  number => number
Oracle Span 22-23:  over => over
Oracle Span 8-9:  potentially => potential
Oracle Span 18-19:  previously => previous
Oracle Span 4-5:  suggest => suggest-01
Oracle Span 24-25:  weeks => (temporal-quantity :unit week)

Missing span: ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: appeared => appear-02
Missing span: over => over
Missing span: 6 => 6
Missing span: weeks => (temporal-quantity :unit week)
Missing span: number => number
Dependencies:
1	20080726	_	CD	CD	_	2	num	_	_
2	ahmadinejad	_	NN	NN	_	3	nsubj	_	_
3	appeared	_	VBD	VBD	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	suggest	_	VB	VB	_	3	xcomp	_	_
6	that	_	IN	IN	_	10	mark	_	_
7	Iran	_	NNP	NNP	_	10	nsubj	_	_
8	might	_	MD	MD	_	10	aux	_	_
9	potentially	_	RB	RB	_	10	advmod	_	_
10	halt	_	VB	VB	_	5	ccomp	_	_
11	expansion	_	NN	NN	_	10	dobj	_	_
12	at	_	IN	IN	_	10	prep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	higher	_	JJR	JJR	_	15	amod	_	_
15	number	_	NN	NN	_	12	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	centrifuges	_	NNS	NNS	_	16	pobj	_	_
18	that	_	WDT	WDT	_	20	nsubj	_	_
19	previously	_	RB	RB	_	20	advmod	_	_
20	expected	_	VBN	VBN	_	17	rcmod	_	_
21	and	_	CC	CC	_	12	cc	_	_
22	for	_	IN	IN	_	12	conj	_	_
23	over	_	IN	IN	_	25	amod	_	_
24	6	_	CD	CD	_	25	num	_	_
25	weeks	_	NNS	NNS	_	22	pobj	_	_
26	.	_	.	.	_	3	punct	_	_

Oracle:
(a / appear-02, ARG1, s / suggest-01)
(a / appear-02, time, d / date-entity)
(c / country, name, n2 / name)
(c2 / centrifuge, quant, n3 / number)
(d / date-entity, day, 26)
(d / date-entity, month, 7)
(d / date-entity, year, 2008)
(e2 / expect-01, time, p3 / previous)
(h / halt-01, ARG0, c / country)
(h / halt-01, ARG1, e / expand-01)
(h / halt-01, duration, o / over)
(h / halt-01, prep-at, n3 / number)
(n / name, op, "Ahmadinejad")
(n2 / name, op, "Iran")
(n3 / number, mod, h2 / high)
(o / over, op, t / temporal-quantity)
(p / person, name, n / name)
(s / suggest-01, ARG0, p / person)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, w / week)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),expected,expect-01,false), Span(18,19,List(1),previously,previous,false), Span(16,17,List(2),centrifuges,centrifuge,false), Span(13,14,List(3),higher,high,false), Span(10,11,List(4),expansion,expand-01,false), Span(9,10,List(5),halt,halt-01,false), Span(8,9,List(6),potentially,potential,false), Span(4,5,List(7),suggest,suggest-01,false), Span(0,1,List(11, 10, 9, 8),20080726,(date-entity :day 26 :month 7 :year 2008),false)),Map(2 -> centrifuge, 5 -> halt-01, 8 -> date-entity, 7 -> suggest-01, 1 -> previous, 11 -> 2008, 4 -> expand-01, 6 -> potential, 9 -> 26, 0 -> expect-01, 10 -> 7, 3 -> high),Map(e -> expect-01, 2 -> 26, h -> high, h2 -> halt-01, p2 -> potential, e2 -> expand-01, s -> suggest-01, 7 -> 7, d -> date-entity, p -> previous, c -> centrifuge, 22 -> 2008))),[Ljava.lang.String;@239a307b,Annotation([Ljava.lang.String;@2a8448fa,[Ljava.lang.String;@6f204a1a,[Ljava.lang.String;@2de56eb2),Annotation([Ljava.lang.String;@5f8e8a9d,[Ljava.lang.String;@5745ca0e,[Ledu.cmu.lti.nlp.amr.Dependency;@3ad83a66),Annotation([Ljava.lang.String;@3cce5371,[Ljava.lang.String;@17bffc17,[Ljava.lang.String;@6e535154),Annotation([Ljava.lang.String;@15a34df2,[Ljava.lang.String;@5b38c1ec,[Ledu.cmu.lti.nlp.amr.Entity;@338fc1d8))
AMR:
(d / date-entity, day, 2 / 26)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2008)
(e / expect-01, ARG0, c / centrifuge)
(e / expect-01, ARG1, h2 / halt-01)
(e / expect-01, time, p / previous)
(e2 / expand-01, ARG1, h / high)
(h2 / halt-01, ARG0, d / date-entity)
(h2 / halt-01, ARG1, e2 / expand-01)
(h2 / halt-01, mod, p2 / potential)
(s / suggest-01, ARG1, h2 / halt-01)

Decoded in 169,032 microseconds
Sentence: Ahmadinejad stated that the West had consented to the existing 5000-6000 centrifuges in operation provided that the number did not increase.

NER Entity: (person :name (name :op "Ahmadinejad"))
NER Entity: (country :name (name :op "West"))
mkDayMonthYear(5000-6000,00,60,5000)
mkDayMonthYear(5000-6000,00,60,5000)
NER Entity: (country :name (name :op "West"))
Spans:
Span 10-11:  5000-6000 => (date-entity :day 0 :month 60 :year 5000)
Span 11-12:  centrifuges => centrifuge
Span 6-7:  consented => consent-01
Span 9-10:  existing => exist-01
Span 20-21:  increase => increase-01
Span 13-14:  operation => operation
Span 14-15:  provided => provide-01
Span 4-5:  West => (world-region :name (name :op "West"))

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 10-11:  5000-6000 => 5000
Oracle Span 0-1:  Ahmadinejad => (person :name (name :op "Ahmadinejad"))
Oracle Span 11-12:  centrifuges => centrifuge
Oracle Span 6-7:  consented => consent-01
Oracle Span 9-10:  existing => exist-01
Oracle Span 20-21:  increase => increase-01
Oracle Span 17-18:  number => number
Oracle Span 13-14:  operation => operate-01
Oracle Span 1-2:  stated => state-01
Oracle Span 4-5:  West => (world-region :name (name :op "West"))

Extra span: provided => provide-01
Incorrect span: operation => operation
Incorrect span: 5000-6000 => (date-entity :day 0 :month 60 :year 5000)
Missing span: Ahmadinejad => (person :name (name :op "Ahmadinejad"))
Missing span: stated => state-01
Missing span: number => number
Missing span: 5000-6000 => 5000
Missing span: operation => operate-01
Dependencies:
1	Ahmadinejad	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	West	_	NNP	NNP	_	7	nsubj	_	_
6	had	_	VBD	VBD	_	7	aux	_	_
7	consented	_	VBN	VBN	_	2	ccomp	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	the	_	DT	DT	_	12	det	_	_
10	existing	_	JJ	JJ	_	12	amod	_	_
11	5000-6000	_	CD	CD	_	12	num	_	_
12	centrifuges	_	NNS	NNS	_	8	pobj	_	_
13	in	_	IN	IN	_	7	prep	_	_
14	operation	_	NN	NN	_	13	pobj	_	_
15	provided	_	VBN	VBN	_	14	vmod	_	_
16	that	_	IN	IN	_	21	mark	_	_
17	the	_	DT	DT	_	18	det	_	_
18	number	_	NN	NN	_	21	nsubj	_	_
19	did	_	VBD	VBD	_	21	aux	_	_
20	not	_	RB	RB	_	21	neg	_	_
21	increase	_	VB	VB	_	15	ccomp	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(c / consent-01, ARG0, w / world-region)
(c / consent-01, ARG1, c3 / centrifuge)
(c / consent-01, condition, i / increase-01)
(c3 / centrifuge, quant, n3 / number)
(e / exist-01, ARG1, c3 / centrifuge)
(i / increase-01, ARG0, n3 / number)
(n / name, op, "Ahmadinejad")
(n2 / name, op, "West")
(o / operate-01, ARG1, c3 / centrifuge)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / consent-01)
(w / world-region, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),increase,increase-01,false), Span(14,15,List(1),provided,provide-01,false), Span(13,14,List(2),operation,operation,false), Span(11,12,List(3),centrifuges,centrifuge,false), Span(10,11,List(7, 6, 5, 4),5000-6000,(date-entity :day 0 :month 60 :year 5000),false), Span(9,10,List(8),existing,exist-01,false), Span(6,7,List(9),consented,consent-01,false), Span(4,5,List(12, 11, 10),West,(world-region :name (name :op "West")),false)),Map(2 -> operation, 5 -> 0, 12 -> "West", 8 -> exist-01, 7 -> 5000, 1 -> provide-01, 4 -> date-entity, 11 -> name, 6 -> 60, 0 -> increase-01, 9 -> consent-01, 3 -> centrifuge, 10 -> world-region),Map(n -> name, w -> world-region, e -> exist-01, 5 -> 5000, d -> date-entity, p -> provide-01, i -> increase-01, 6 -> 60, c -> centrifuge, 0 -> 0, o -> operation, c2 -> consent-01))),[Ljava.lang.String;@4722ef0c,Annotation([Ljava.lang.String;@48e1f6c7,[Ljava.lang.String;@55cb6996,[Ljava.lang.String;@1807e3f6),Annotation([Ljava.lang.String;@480d3575,[Ljava.lang.String;@f1da57d,[Ledu.cmu.lti.nlp.amr.Dependency;@194fad1),Annotation([Ljava.lang.String;@26abb146,[Ljava.lang.String;@72c8e7b,[Ljava.lang.String;@65f8f5ae),Annotation([Ljava.lang.String;@431cd9b2,[Ljava.lang.String;@38467116,[Ledu.cmu.lti.nlp.amr.Entity;@5b7a7f33))
AMR:
(c / centrifuge, time, d / date-entity)
(c2 / consent-01, ARG0, w / world-region)
(c2 / consent-01, ARG1, c / centrifuge)
(c2 / consent-01, time, o / operation)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 6 / 60)
(d / date-entity, year, 5 / 5000)
(e / exist-01, ARG1, c / centrifuge)
(n / name, op, "West")
(o / operation, op, i / increase-01)
(p / provide-01, ARG1, o / operation)
(w / world-region, name, n / name)

Decoded in 614,630 microseconds
Sentence: 5000 centrifuges can produce sufficient nuclear material for a power plant or an atomic bomb if the material is highly enriched.

Spans:
Span 0-1:  5000 => 5000
Span 14-15:  bomb => bomb
Span 2-3:  can => possible
Span 1-2:  centrifuges => centrifuge
Span 20-21:  enriched => enrich-01
Span 19-20:  highly => high
Span 17-18:  material => material
Span 6-7:  material => material
Span 5-6:  nuclear => nucleus
Span 11-12:  or => or
Span 10-11:  plant => plant
Span 9-10:  power => power
Span 3-4:  produce => produce-01
Span 4-5:  sufficient => suffice-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 0-1:  5000 => 5000
Oracle Span 13-14:  atomic => atom
Oracle Span 14-15:  bomb => bomb
Oracle Span 2-3:  can => possible
Oracle Span 1-2:  centrifuges => centrifuge
Oracle Span 20-21:  enriched => enrich-01
Oracle Span 19-20:  highly => high
Oracle Span 6-7:  material => material
Oracle Span 5-6:  nuclear => nucleus
Oracle Span 11-12:  or => or
Oracle Span 10-11:  plant => plant
Oracle Span 9-10:  power => power
Oracle Span 3-4:  produce => produce-01
Oracle Span 4-5:  sufficient => suffice-01

Extra span: material => material
Missing span: atomic => atom
Dependencies:
1	5000	_	JJ	JJ	_	2	amod	_	_
2	centrifuges	_	NNS	NNS	_	4	nsubj	_	_
3	can	_	MD	MD	_	4	aux	_	_
4	produce	_	VB	VB	_	0	root	_	_
5	sufficient	_	JJ	JJ	_	7	amod	_	_
6	nuclear	_	JJ	JJ	_	7	amod	_	_
7	material	_	NN	NN	_	4	dobj	_	_
8	for	_	IN	IN	_	4	prep	_	_
9	a	_	DT	DT	_	11	det	_	_
10	power	_	NN	NN	_	11	nn	_	_
11	plant	_	NN	NN	_	8	pobj	_	_
12	or	_	CC	CC	_	11	cc	_	_
13	an	_	DT	DT	_	15	det	_	_
14	atomic	_	JJ	JJ	_	15	amod	_	_
15	bomb	_	NN	NN	_	11	conj	_	_
16	if	_	IN	IN	_	21	mark	_	_
17	the	_	DT	DT	_	18	det	_	_
18	material	_	NN	NN	_	21	nsubj	_	_
19	is	_	VBZ	VBZ	_	21	cop	_	_
20	highly	_	RB	RB	_	21	advmod	_	_
21	enriched	_	JJ	JJ	_	4	advcl	_	_
22	.	_	.	.	_	4	punct	_	_

Oracle:
(b / bomb, mod, a / atom)
(c / centrifuge, quant, 5 / 5000)
(e / enrich-01, ARG1, m / material)
(e / enrich-01, degree, h / high)
(m / material, mod, n / nucleus)
(o / or, op, b / bomb)
(o / or, op, p3 / plant)
(p / possible, condition, e / enrich-01)
(p / possible, domain, p2 / produce-01)
(p2 / produce-01, ARG0, c / centrifuge)
(p2 / produce-01, ARG1, m / material)
(p3 / plant, mod, p4 / power)
(s / suffice-01, ARG0, m / material)
(s / suffice-01, ARG1, o / or)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),enriched,enrich-01,false), Span(19,20,List(1),highly,high,false), Span(17,18,List(2),material,material,false), Span(14,15,List(3),bomb,bomb,false), Span(11,12,List(4),or,or,false), Span(10,11,List(5),plant,plant,false), Span(9,10,List(6),power,power,false), Span(6,7,List(7),material,material,false), Span(5,6,List(8),nuclear,nucleus,false), Span(4,5,List(9),sufficient,suffice-01,false), Span(3,4,List(10),produce,produce-01,false), Span(2,3,List(11),can,possible,false), Span(1,2,List(12),centrifuges,centrifuge,false), Span(0,1,List(13),5000,5000,false)),Map(2 -> material, 5 -> plant, 12 -> centrifuge, 8 -> nucleus, 7 -> material, 1 -> high, 4 -> or, 11 -> possible, 6 -> power, 0 -> enrich-01, 9 -> suffice-01, 3 -> bomb, 10 -> produce-01, 13 -> 5000),Map(e -> enrich-01, n -> nucleus, h -> high, 5 -> 5000, b -> bomb, m2 -> material, p2 -> power, s -> suffice-01, m -> material, p -> plant, p4 -> possible, c -> centrifuge, o -> or, p3 -> produce-01))),[Ljava.lang.String;@790da477,Annotation([Ljava.lang.String;@5c7933ad,[Ljava.lang.String;@57bc27f5,[Ljava.lang.String;@5fb759d6),Annotation([Ljava.lang.String;@4b8d604b,[Ljava.lang.String;@5e7cd6cc,[Ledu.cmu.lti.nlp.amr.Dependency;@68c9d179),Annotation([Ljava.lang.String;@d554c5f,[Ljava.lang.String;@2dfaea86,[Ljava.lang.String;@15888343),Annotation([Ljava.lang.String;@33ecda92,[Ljava.lang.String;@14fc5f04,[Ledu.cmu.lti.nlp.amr.Entity;@6e2829c7))
AMR:
(c / centrifuge, mod, 5 / 5000)
(e / enrich-01, ARG0, m / material)
(e / enrich-01, ARG1, c / centrifuge)
(e / enrich-01, mod, h / high)
(m2 / material, mod, n / nucleus)
(o / or, op, b / bomb)
(o / or, op, p / plant)
(p / plant, mod, p2 / power)
(p3 / produce-01, ARG0, c / centrifuge)
(p3 / produce-01, ARG1, m2 / material)
(p3 / produce-01, location, p / plant)
(p4 / possible, domain, p3 / produce-01)
(s / suffice-01, ARG1, m2 / material)

Decoded in 209,546 microseconds
Sentence: 6000 centrifuges running continuously can produce sufficient weapons-grade uranium for 1 bomb in 6 months.

Spans:
Span 0-1:  6000 => 6000
Span 13-14:  bomb => bomb
Span 4-5:  can => possible
Span 1-2:  centrifuges => centrifuge
Span 3-4:  continuously => continue-01
Span 16-17:  months => (temporal-quantity :unit month)
Span 5-6:  produce => produce-01
Span 6-7:  sufficient => suffice-01
Span 10-11:  uranium => uranium

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 12-13:  1 => 1
Oracle Span 15-16:  6 => 6
Oracle Span 0-1:  6000 => 6000
Oracle Span 13-14:  bomb => bomb
Oracle Span 4-5:  can => possible
Oracle Span 1-2:  centrifuges => centrifuge
Oracle Span 3-4:  continuously => continue-01
Oracle Span 16-17:  months => (temporal-quantity :unit month)
Oracle Span 5-6:  produce => produce-01
Oracle Span 2-3:  running => run-01
Oracle Span 6-7:  sufficient => suffice-01
Oracle Span 10-11:  uranium => uranium
Oracle Span 7-8:  weapons => weapons-grade

Missing span: 6 => 6
Missing span: 1 => 1
Missing span: running => run-01
Missing span: weapons => weapons-grade
Dependencies:
1	6000	_	CD	CD	_	2	num	_	_
2	centrifuges	_	NNS	NNS	_	6	nsubj	_	_
3	running	_	VBG	VBG	_	2	vmod	_	_
4	continuously	_	RB	RB	_	3	advmod	_	_
5	can	_	MD	MD	_	6	aux	_	_
6	produce	_	VB	VB	_	0	root	_	_
7	sufficient	_	JJ	JJ	_	9	amod	_	_
8	weapons-grade	_	JJ	JJ	_	9	amod	_	_
9	uranium	_	NN	NN	_	6	dobj	_	_
10	for	_	IN	IN	_	6	prep	_	_
11	1	_	CD	CD	_	12	num	_	_
12	bomb	_	NN	NN	_	10	pobj	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	6	_	CD	CD	_	15	num	_	_
15	months	_	NNS	NNS	_	13	pobj	_	_
16	.	_	.	.	_	6	punct	_	_

Oracle:
(b / bomb, duration, t / temporal-quantity)
(b / bomb, quant, 1 / 1)
(c / centrifuge, quant, 62 / 6000)
(c2 / continue-01, ARG1, r / run-01)
(p / possible, domain, p2 / produce-01)
(p2 / produce-01, ARG0, c / centrifuge)
(p2 / produce-01, ARG1, u / uranium)
(r / run-01, ARG0, c / centrifuge)
(s / suffice-01, ARG0, u / uranium)
(s / suffice-01, ARG1, b / bomb)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, m / month)
(u / uranium, mod, w2 / weapons-grade)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),months,(temporal-quantity :unit month),false), Span(13,14,List(2),bomb,bomb,false), Span(10,11,List(3),uranium,uranium,false), Span(6,7,List(4),sufficient,suffice-01,false), Span(5,6,List(5),produce,produce-01,false), Span(4,5,List(6),can,possible,false), Span(3,4,List(7),continuously,continue-01,false), Span(1,2,List(8),centrifuges,centrifuge,false), Span(0,1,List(9),6000,6000,false)),Map(2 -> bomb, 5 -> produce-01, 8 -> centrifuge, 7 -> continue-01, 1 -> month, 4 -> suffice-01, 6 -> possible, 9 -> 6000, 0 -> temporal-quantity, 3 -> uranium),Map(b -> bomb, t -> temporal-quantity, p2 -> possible, s -> suffice-01, m -> month, p -> produce-01, 6 -> 6000, c -> continue-01, u -> uranium, c2 -> centrifuge))),[Ljava.lang.String;@3feb2dda,Annotation([Ljava.lang.String;@6a8658ff,[Ljava.lang.String;@1c742ed4,[Ljava.lang.String;@333d4a8c),Annotation([Ljava.lang.String;@55de24cc,[Ljava.lang.String;@dc7df28,[Ledu.cmu.lti.nlp.amr.Dependency;@30f842ca),Annotation([Ljava.lang.String;@69c81773,[Ljava.lang.String;@4d14b6c2,[Ljava.lang.String;@7e990ed7),Annotation([Ljava.lang.String;@c05fddc,[Ljava.lang.String;@25df00a0,[Ledu.cmu.lti.nlp.amr.Entity;@4d15107f))
AMR:
(c / continue-01, ARG1, c2 / centrifuge)
(c2 / centrifuge, quant, 6 / 6000)
(p / produce-01, ARG0, c2 / centrifuge)
(p / produce-01, ARG1, u / uranium)
(p / produce-01, ARG2, b / bomb)
(p / produce-01, location, t / temporal-quantity)
(p2 / possible, domain, p / produce-01)
(s / suffice-01, ARG1, u / uranium)
(t / temporal-quantity, unit, m / month)

Decoded in 110,288 microseconds
Sentence: 20080500 the International Atomic Energy Agency stated that Iran possessed 3500 centrifuges in operations.

mkDayMonthYear(20080500,00,05,2008)
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(20080500,00,05,2008)
Spans:
Span 0-1:  20080500 => (date-entity :day 0 :month 5 :year 2008)
Span 10-11:  3500 => 3500
Span 11-12:  centrifuges => centrifuge
Span 2-6:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 9-10:  possessed => possess-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  20080500 => 2008
Oracle Span 10-11:  3500 => 3500
Oracle Span 11-12:  centrifuges => centrifuge
Oracle Span 2-6:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 8-9:  Iran => (country :name (name :op "Iran"))
Oracle Span 13-14:  operations => operate-01
Oracle Span 9-10:  possessed => possess-01
Oracle Span 6-7:  stated => state-01

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Incorrect span: 20080500 => (date-entity :day 0 :month 5 :year 2008)
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: 20080500 => 2008
Missing span: operations => operate-01
Dependencies:
1	20080500	_	CD	CD	_	7	nsubj	_	_
2	the	_	DT	DT	_	6	det	_	_
3	International	_	NNP	NNP	_	6	nn	_	_
4	Atomic	_	NNP	NNP	_	6	nn	_	_
5	Energy	_	NNP	NNP	_	6	nn	_	_
6	Agency	_	NNP	NNP	_	1	dep	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	10	mark	_	_
9	Iran	_	NNP	NNP	_	10	nsubj	_	_
10	possessed	_	VBD	VBD	_	7	ccomp	_	_
11	3500	_	CD	CD	_	12	num	_	_
12	centrifuges	_	NNS	NNS	_	10	dobj	_	_
13	in	_	IN	IN	_	10	prep	_	_
14	operations	_	NNS	NNS	_	13	pobj	_	_
15	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / centrifuge, quant, 3 / 3500)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Iran")
(o / organization, name, n / name)
(o2 / operate-01, ARG1, c2 / centrifuge)
(p / possess-01, ARG0, c / country)
(p / possess-01, ARG1, c2 / centrifuge)
(s / state-01, ARG0, o / organization)
(s / state-01, ARG1, p / possess-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),centrifuges,centrifuge,false), Span(10,11,List(1),3500,3500,false), Span(9,10,List(2),possessed,possess-01,false), Span(2,6,List(8, 7, 6, 5, 4, 3),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(0,1,List(12, 11, 10, 9),20080500,(date-entity :day 0 :month 5 :year 2008),false)),Map(2 -> possess-01, 5 -> "International", 12 -> 2008, 8 -> "Agency", 7 -> "Energy", 1 -> 3500, 4 -> name, 11 -> 5, 6 -> "Atomic", 0 -> centrifuge, 9 -> date-entity, 3 -> organization, 10 -> 0),Map(n -> name, 2 -> 2008, 5 -> 5, d -> date-entity, p -> possess-01, c -> centrifuge, 0 -> 0, o -> organization, 3 -> 3500))),[Ljava.lang.String;@7b4c50bc,Annotation([Ljava.lang.String;@5884a914,[Ljava.lang.String;@50378a4,[Ljava.lang.String;@60f00693),Annotation([Ljava.lang.String;@79207381,[Ljava.lang.String;@491b9b8,[Ledu.cmu.lti.nlp.amr.Dependency;@1a4927d6),Annotation([Ljava.lang.String;@7a6d7e92,[Ljava.lang.String;@aba625,[Ljava.lang.String;@97e93f1),Annotation([Ljava.lang.String;@5a5a729f,[Ljava.lang.String;@4b520ea8,[Ledu.cmu.lti.nlp.amr.Entity;@16150369))
AMR:
(c / centrifuge, poss, d / date-entity)
(c / centrifuge, quant, 3 / 3500)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 5 / 5)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(p / possess-01, ARG0, o / organization)
(p / possess-01, ARG1, c / centrifuge)

Decoded in 68,158 microseconds
Sentence: 2008-11-14

mkDayMonthYear(2008-11-14,14,11,2008)
mkDayMonthYear(2008-11-14,14,11,2008)
Spans:
Span 0-1:  2008-11-14 => (date-entity :day 14 :month 11 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2008-11-14 => (date-entity :day 14 :month 11 :year 2008)

Dependencies:
1	2008-11-14	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 14)
(d / date-entity, month, 11)
(d / date-entity, year, 2008)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-11-14,(date-entity :day 14 :month 11 :year 2008),false)),Map(2 -> 11, 1 -> 14, 0 -> date-entity, 3 -> 2008),Map(2 -> 2008, 12 -> 11, d -> date-entity, 1 -> 14))),[Ljava.lang.String;@6b09fb41,Annotation([Ljava.lang.String;@624ea235,[Ljava.lang.String;@3932c79a,[Ljava.lang.String;@782859e),Annotation([Ljava.lang.String;@23f5b5dc,[Ljava.lang.String;@34bde49d,[Ledu.cmu.lti.nlp.amr.Dependency;@1b1cfb87),Annotation([Ljava.lang.String;@821330f,[Ljava.lang.String;@6f43c82,[Ljava.lang.String;@5db6b9cd),Annotation([Ljava.lang.String;@210ab13f,[Ljava.lang.String;@20b2475a,[Ledu.cmu.lti.nlp.amr.Entity;@7857fe2))
AMR:
(d / date-entity, day, 1 / 14)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 2 / 2008)

Decoded in 9,732 microseconds
Sentence: Iran (IR); Russian Federation (RU); China (CN); France (FR); United States (US)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "IR"))
NER Entity: (country :name (name :op "Russian" :op "Federation"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 20-21:  ; => and
Span 15-16:  ; => and
Span 10-11:  ; => and
Span 4-5:  ; => and
Span 5-7:  Russian Federation => (country :name (name :op "Russian" :op "Federation"))
Span 21-23:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  ; => and
Oracle Span 11-12:  China => (country :name (name :op "China"))
Oracle Span 16-17:  France => (country :name (name :op "France"))
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 5-7:  Russian Federation => (country :name (name :op "Federation" :op "Russian"))
Oracle Span 21-23:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Incorrect span: Russian Federation => (country :name (name :op "Russian" :op "Federation"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Russian Federation => (country :name (name :op "Federation" :op "Russian"))
Missing span: China => (country :name (name :op "China"))
Missing span: France => (country :name (name :op "France"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Dependencies:
1	Iran	_	NNP	NNP	_	3	nn	_	_
2	(	_	(	(	_	3	punct	_	_
3	IR	_	NN	NN	_	0	root	_	_
4	)	_	)	)	_	3	punct	_	_
5	;	_	:	:	_	3	punct	_	_
6	Russian	_	NNP	NNP	_	7	nn	_	_
7	Federation	_	NNP	NNP	_	3	dep	_	_
8	(	_	(	(	_	9	punct	_	_
9	RU	_	NNP	NNP	_	7	appos	_	_
10	)	_	)	)	_	9	punct	_	_
11	;	_	:	:	_	7	punct	_	_
12	China	_	NNP	NNP	_	7	dep	_	_
13	(	_	(	(	_	14	punct	_	_
14	CN	_	NNP	NNP	_	12	appos	_	_
15	)	_	)	)	_	14	punct	_	_
16	;	_	:	:	_	7	punct	_	_
17	France	_	NNP	NNP	_	7	dep	_	_
18	(	_	(	(	_	19	punct	_	_
19	FR	_	NNP	NNP	_	17	appos	_	_
20	)	_	)	)	_	19	punct	_	_
21	;	_	:	:	_	7	punct	_	_
22	United	_	NNP	NNP	_	23	nn	_	_
23	States	_	NNPS	NNPS	_	7	dep	_	_
24	(	_	(	(	_	25	punct	_	_
25	US	_	NNP	NNP	_	23	appos	_	_
26	)	_	)	)	_	25	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(n / name, op, "Iran")
(n2 / name, op, "Federation")
(n2 / name, op, "Russian")
(n3 / name, op, "China")
(n4 / name, op, "France")
(n5 / name, op, "States")
(n5 / name, op, "United")

Input(Some(Graph(null,ArrayBuffer(Span(21,23,List(3, 2, 1, 0),United States,(country :name (name :op "United" :op "States")),false), Span(20,21,List(4),;,and,false), Span(15,16,List(5),;,and,false), Span(10,11,List(6),;,and,false), Span(5,7,List(10, 9, 8, 7),Russian Federation,(country :name (name :op "Russian" :op "Federation")),false), Span(4,5,List(11),;,and,false)),Map(2 -> "United", 5 -> and, 8 -> name, 7 -> country, 1 -> name, 11 -> and, 4 -> and, 6 -> and, 9 -> "Russian", 0 -> country, 10 -> "Federation", 3 -> "States"),Map(n -> name, a3 -> and, a -> and, a2 -> and, c -> country, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@6f15d60e,Annotation([Ljava.lang.String;@1be2019a,[Ljava.lang.String;@29d80d2b,[Ljava.lang.String;@58e1d9d),Annotation([Ljava.lang.String;@446a1e84,[Ljava.lang.String;@4f0f2942,[Ledu.cmu.lti.nlp.amr.Dependency;@2657d4dd),Annotation([Ljava.lang.String;@5340477f,[Ljava.lang.String;@47caedad,[Ljava.lang.String;@7139992f),Annotation([Ljava.lang.String;@69504ae9,[Ljava.lang.String;@387a8303,[Ledu.cmu.lti.nlp.amr.Entity;@28cda624))
AMR:
(a / and, op, c / country)
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Federation")
(n2 / name, op, "Russian")

Decoded in 93,193 microseconds
Sentence: International; weapons; proliferation; Government; politics; energy

Spans:
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 10-11:  energy => energy
Span 8-9:  politics => politics

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 10-11:  energy => energy
Oracle Span 6-7:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 8-9:  politics => politics
Oracle Span 4-5:  proliferation => proliferate-01
Oracle Span 2-3:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: weapons => weapon
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Missing span: proliferation => proliferate-01
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	weapons	_	NNS	NNS	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	proliferation	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	Government	_	NNP	NNP	_	5	dep	_	_
8	;	_	:	:	_	3	punct	_	_
9	politics	_	NNS	NNS	_	3	dep	_	_
10	;	_	:	:	_	1	punct	_	_
11	energy	_	VBN	VBN	_	1	dep	_	_

Oracle:
(a / and, op, e / energy)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, p / proliferate-01)
(a / and, op, p2 / politics)
(a / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),energy,energy,false), Span(9,10,List(1),;,and,false), Span(8,9,List(2),politics,politics,false), Span(7,8,List(3),;,and,false), Span(5,6,List(4),;,and,false), Span(3,4,List(5),;,and,false), Span(1,2,List(6),;,and,false)),Map(2 -> politics, 5 -> and, 1 -> and, 4 -> and, 6 -> and, 0 -> energy, 3 -> and),Map(e -> energy, a3 -> and, p -> politics, a -> and, a5 -> and, a2 -> and, a4 -> and))),[Ljava.lang.String;@1500b2f3,Annotation([Ljava.lang.String;@7eecb5b8,[Ljava.lang.String;@126253fd,[Ljava.lang.String;@57db2b13),Annotation([Ljava.lang.String;@475c9c31,[Ljava.lang.String;@5c86a017,[Ledu.cmu.lti.nlp.amr.Dependency;@5c7bfdc1),Annotation([Ljava.lang.String;@5276d6ee,[Ljava.lang.String;@71687585,[Ljava.lang.String;@1807f5a7),Annotation([Ljava.lang.String;@1b919693,[Ljava.lang.String;@7fb4f2a9,[Ledu.cmu.lti.nlp.amr.Entity;@4dc27487))
AMR:
(a / and, op, a5 / and)
(a2 / and, op, a4 / and)
(a4 / and, op, a3 / and)
(a5 / and, op, a4 / and)
(a5 / and, op, e / energy)
(a5 / and, op, p / politics)

Decoded in 37,968 microseconds
Sentence: A diplomatic meeting in Paris concludes with no agreement on further steps to pressure Iran to halt uranium enrichment at Iran's facility in Natanz.

NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Paris"))
Spans:
Span 8-9:  agreement => agree-01
Span 5-6:  concludes => conclude-01
Span 1-2:  diplomatic => diplomacy
Span 18-19:  enrichment => enrich-01
Span 22-23:  facility => facility
Span 10-11:  further => further
Span 16-17:  halt => halt-01
Span 24-25:  Natanz => (city :name (name :op "Natanz"))
Span 7-8:  no => -
Span 4-5:  Paris => (city :name (name :op "Paris"))
Span 13-14:  pressure => pressure-01
Span 11-12:  steps => step-01
Span 17-18:  uranium => uranium

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 8-9:  agreement => agree-01
Oracle Span 5-6:  concludes => conclude-02
Oracle Span 1-2:  diplomatic => diplomacy
Oracle Span 18-19:  enrichment => enrich-01
Oracle Span 22-23:  facility => facility
Oracle Span 10-11:  further => further
Oracle Span 16-17:  halt => halt-01
Oracle Span 14-15:  Iran => (country :name (name :op "Iran"))
Oracle Span 2-3:  meeting => meet-03
Oracle Span 24-25:  Natanz => (city :name (name :op "Natanz"))
Oracle Span 7-8:  no => -
Oracle Span 4-5:  Paris => (city :name (name :op "Paris"))
Oracle Span 13-14:  pressure => pressure-01
Oracle Span 11-12:  steps => step-01
Oracle Span 17-18:  uranium => uranium

Incorrect span: concludes => conclude-01
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: concludes => conclude-02
Missing span: meeting => meet-03
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	diplomatic	_	JJ	JJ	_	3	amod	_	_
3	meeting	_	NN	NN	_	6	nsubj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Paris	_	NNP	NNP	_	4	pobj	_	_
6	concludes	_	VBZ	VBZ	_	0	root	_	_
7	with	_	IN	IN	_	6	prep	_	_
8	no	_	DT	DT	_	9	neg	_	_
9	agreement	_	NN	NN	_	7	pobj	_	_
10	on	_	IN	IN	_	9	prep	_	_
11	further	_	JJ	JJ	_	12	amod	_	_
12	steps	_	NNS	NNS	_	10	pobj	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	pressure	_	VB	VB	_	6	xcomp	_	_
15	Iran	_	NNP	NNP	_	14	dobj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	halt	_	VB	VB	_	14	xcomp	_	_
18	uranium	_	NN	NN	_	19	nn	_	_
19	enrichment	_	NN	NN	_	17	dobj	_	_
20	at	_	IN	IN	_	17	prep	_	_
21	Iran	_	NNP	NNP	_	23	poss	_	_
22	's	_	POS	POS	_	21	possessive	_	_
23	facility	_	NN	NN	_	20	pobj	_	_
24	in	_	IN	IN	_	23	prep	_	_
25	Natanz	_	NNP	NNP	_	24	pobj	_	_
26	.	_	.	.	_	6	punct	_	_

Oracle:
(a / agree-01, ARG1, s / step-01)
(a / agree-01, polarity, - / -)
(c / conclude-02, ARG1, m / meet-03)
(c / conclude-02, ARG2, a / agree-01)
(c2 / country, name, n / name)
(c3 / city, name, n2 / name)
(c4 / city, name, n3 / name)
(e / enrich-01, ARG1, u / uranium)
(e / enrich-01, location, f2 / facility)
(f2 / facility, location, c3 / city)
(f2 / facility, mod, c2 / country)
(h / halt-01, ARG0, c2 / country)
(h / halt-01, ARG1, e / enrich-01)
(m / meet-03, location, c4 / city)
(m / meet-03, mod, d / diplomacy)
(n / name, op, "Iran")
(n2 / name, op, "Natanz")
(n3 / name, op, "Paris")
(p / pressure-01, ARG1, c2 / country)
(p / pressure-01, ARG2, h / halt-01)
(s / step-01, ARG2, p / pressure-01)
(s / step-01, degree, f / further)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(2, 1, 0),Natanz,(city :name (name :op "Natanz")),false), Span(22,23,List(3),facility,facility,false), Span(18,19,List(4),enrichment,enrich-01,false), Span(17,18,List(5),uranium,uranium,false), Span(16,17,List(6),halt,halt-01,false), Span(13,14,List(7),pressure,pressure-01,false), Span(11,12,List(8),steps,step-01,false), Span(10,11,List(9),further,further,false), Span(8,9,List(10),agreement,agree-01,false), Span(7,8,List(11),no,-,false), Span(5,6,List(12),concludes,conclude-01,false), Span(4,5,List(15, 14, 13),Paris,(city :name (name :op "Paris")),false), Span(1,2,List(16),diplomatic,diplomacy,false)),Map(2 -> "Natanz", 5 -> uranium, 12 -> conclude-01, 15 -> "Paris", 8 -> step-01, 7 -> pressure-01, 1 -> name, 4 -> enrich-01, 11 -> -, 14 -> name, 6 -> halt-01, 0 -> city, 9 -> further, 16 -> diplomacy, 3 -> facility, 10 -> agree-01, 13 -> city),Map(e -> enrich-01, n -> name, h -> halt-01, s -> step-01, d -> diplomacy, p -> pressure-01, a -> agree-01, c3 -> city, - -> -, c -> city, u -> uranium, f2 -> further, f -> facility, c2 -> conclude-01, n2 -> name))),[Ljava.lang.String;@6a4f1a55,Annotation([Ljava.lang.String;@7dfd3c81,[Ljava.lang.String;@2584b82d,[Ljava.lang.String;@7bbc8656),Annotation([Ljava.lang.String;@6933b6c6,[Ljava.lang.String;@7d3e8655,[Ledu.cmu.lti.nlp.amr.Dependency;@7dfb0c0f),Annotation([Ljava.lang.String;@626abbd0,[Ljava.lang.String;@169bb4dd,[Ljava.lang.String;@1f9e9475),Annotation([Ljava.lang.String;@3aa078fd,[Ljava.lang.String;@d23e042,[Ledu.cmu.lti.nlp.amr.Entity;@46d59067))
AMR:
(a / agree-01, polarity, - / -)
(c / city, name, n / name)
(c2 / conclude-01, ARG1, a / agree-01)
(c2 / conclude-01, purpose, p / pressure-01)
(c3 / city, name, n2 / name)
(d / diplomacy, op, e / enrich-01)
(e / enrich-01, ARG0, c3 / city)
(e / enrich-01, ARG1, u / uranium)
(e / enrich-01, location, f / facility)
(f / facility, location, c / city)
(h / halt-01, ARG1, e / enrich-01)
(n / name, op, "Natanz")
(n2 / name, op, "Paris")
(p / pressure-01, purpose, h / halt-01)
(s / step-01, ARG1, p / pressure-01)
(s / step-01, degree, f2 / further)

Decoded in 413,735 microseconds
Sentence: On 081114 diplomats stated to the media that American, European, Russian and Chinese officials at a meeting on 081113 in Paris did not reach agreement on further actions to persuade Iran to halt uranium enrichment at Iran's facility in Natanz.

mkDayMonthYear(081114,14,11,2008)
mkDayMonthYear(081114,14,11,08)
NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Chinese"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Paris"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
mkDayMonthYear(081114,14,11,2008)
mkDayMonthYear(081114,14,11,08)
Spans:
Span 20-21:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 1-2:  081114 => (date-entity :day 14 :month 11 :year 08)
Span 29-30:  actions => action
Span 26-27:  agreement => agree-01
Span 2-3:  diplomats => (have-org-role-91 :ARG2 diplomat)
Span 36-37:  enrichment => enrich-01
Span 40-41:  facility => facility
Span 28-29:  further => further
Span 34-35:  halt => halt-01
Span 6-7:  media => media
Span 42-43:  Natanz => (city :name (name :op "Natanz"))
Span 15-16:  officials => (have-org-role-91 :ARG2 official)
Span 22-23:  Paris => (city :name (name :op "Paris"))
Span 31-32:  persuade => persuade-01
Span 25-26:  reach => reach-01
Span 35-36:  uranium => uranium

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 20-21:  081113 => (date-entity :day 13 :month 11 :year 2008)
Oracle Span 1-2:  081114 => (date-entity :day 14 :month 11 :year 2008)
Oracle Span 26-27:  agreement => agree-01
Oracle Span 13-14:  and => and
Oracle Span 14-15:  Chinese => (country :name (name :op "China"))
Oracle Span 2-3:  diplomats => (have-org-role-91 :ARG2 diplomat)
Oracle Span 36-37:  enrichment => enrich-01
Oracle Span 10-11:  European => (have-org-role-91 :ARG1 (continent :name (name :op "Europe")))
Oracle Span 40-41:  facility => facility
Oracle Span 28-29:  further => further
Oracle Span 34-35:  halt => halt-01
Oracle Span 32-33:  Iran => (country :name (name :op "Iran"))
Oracle Span 6-7:  media => media
Oracle Span 18-19:  meeting => meet-03
Oracle Span 42-43:  Natanz => (city :name (name :op "Natanz"))
Oracle Span 15-16:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 22-23:  Paris => (city :name (name :op "Paris"))
Oracle Span 31-32:  persuade => persuade-01
Oracle Span 25-26:  reach => reach-01
Oracle Span 12-13:  Russian => (have-org-role-91 :ARG1 (country :name (name :op "Russia")))
Oracle Span 3-4:  stated => state-01
Oracle Span 35-36:  uranium => uranium

Extra span: actions => action
Incorrect span: 081113 => (date-entity :day 13 :month 11 :year 08)
Incorrect span: 081114 => (date-entity :day 14 :month 11 :year 08)
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: European => (have-org-role-91 :ARG1 (continent :name (name :op "Europe")))
Missing span: Russian => (have-org-role-91 :ARG1 (country :name (name :op "Russia")))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: 081113 => (date-entity :day 13 :month 11 :year 2008)
Missing span: 081114 => (date-entity :day 14 :month 11 :year 2008)
Missing span: stated => state-01
Missing span: meeting => meet-03
Missing span: and => and
Dependencies:
1	On	_	IN	IN	_	26	prep	_	_
2	081114	_	CD	CD	_	3	num	_	_
3	diplomats	_	NNS	NNS	_	1	pobj	_	_
4	stated	_	VBN	VBN	_	3	vmod	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	media	_	NNS	NNS	_	5	pobj	_	_
8	that	_	DT	DT	_	16	det	_	_
9	American	_	JJ	JJ	_	16	amod	_	_
10	,	_	,	,	_	9	punct	_	_
11	European	_	JJ	JJ	_	9	conj	_	_
12	,	_	,	,	_	9	punct	_	_
13	Russian	_	JJ	JJ	_	9	conj	_	_
14	and	_	CC	CC	_	9	cc	_	_
15	Chinese	_	JJ	JJ	_	9	conj	_	_
16	officials	_	NNS	NNS	_	26	nsubj	_	_
17	at	_	IN	IN	_	16	prep	_	_
18	a	_	DT	DT	_	19	det	_	_
19	meeting	_	NN	NN	_	17	pobj	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	081113	_	CD	CD	_	20	pobj	_	_
22	in	_	IN	IN	_	21	prep	_	_
23	Paris	_	NNP	NNP	_	22	pobj	_	_
24	did	_	VBD	VBD	_	26	aux	_	_
25	not	_	RB	RB	_	26	neg	_	_
26	reach	_	VB	VB	_	0	root	_	_
27	agreement	_	NN	NN	_	26	dobj	_	_
28	on	_	IN	IN	_	27	prep	_	_
29	further	_	JJ	JJ	_	30	amod	_	_
30	actions	_	NNS	NNS	_	28	pobj	_	_
31	to	_	TO	TO	_	32	aux	_	_
32	persuade	_	VB	VB	_	26	vmod	_	_
33	Iran	_	NNP	NNP	_	32	dobj	_	_
34	to	_	TO	TO	_	35	aux	_	_
35	halt	_	VB	VB	_	32	xcomp	_	_
36	uranium	_	NN	NN	_	37	nn	_	_
37	enrichment	_	NN	NN	_	35	dobj	_	_
38	at	_	IN	IN	_	35	prep	_	_
39	Iran	_	NNP	NNP	_	41	poss	_	_
40	's	_	POS	POS	_	39	possessive	_	_
41	facility	_	NN	NN	_	38	pobj	_	_
42	in	_	IN	IN	_	41	prep	_	_
43	Natanz	_	NNP	NNP	_	42	pobj	_	_
44	.	_	.	.	_	26	punct	_	_

Oracle:
(a / agree-01, ARG0, a2 / and)
(c2 / continent, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / city, name, n5 / name)
(c6 / country, name, n6 / name)
(c7 / city, name, n7 / name)
(d / date-entity, day, 14)
(d / date-entity, month, 11)
(d / date-entity, year, 2008)
(d3 / date-entity, day, 13)
(d3 / date-entity, month, 11)
(d3 / date-entity, year, 2008)
(e / enrich-01, ARG1, u / uranium)
(e / enrich-01, location, f2 / facility)
(f2 / facility, location, c7 / city)
(f2 / facility, mod, c6 / country)
(h / halt-01, ARG0, c6 / country)
(h / halt-01, ARG1, e / enrich-01)
(h3 / have-org-role-91, ARG1, c2 / continent)
(h4 / have-org-role-91, ARG1, c3 / country)
(h5 / have-org-role-91, ARG1, c4 / country)
(h5 / have-org-role-91, ARG2, o4 / official)
(h6 / have-org-role-91, ARG2, d2 / diplomat)
(m2 / meet-03, location, c5 / city)
(m2 / meet-03, time, d3 / date-entity)
(n2 / name, op, "Europe")
(n3 / name, op, "Russia")
(n4 / name, op, "China")
(n5 / name, op, "Paris")
(n6 / name, op, "Iran")
(n7 / name, op, "Natanz")
(p / persuade-01, ARG1, c6 / country)
(p / persuade-01, ARG2, h / halt-01)
(r / reach-01, ARG0, a2 / and)
(r / reach-01, ARG1, a / agree-01)
(r / reach-01, time, m2 / meet-03)
(s / state-01, ARG1, r / reach-01)
(s / state-01, ARG2, m / media)
(s / state-01, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(2, 1, 0),Natanz,(city :name (name :op "Natanz")),false), Span(40,41,List(3),facility,facility,false), Span(36,37,List(4),enrichment,enrich-01,false), Span(35,36,List(5),uranium,uranium,false), Span(34,35,List(6),halt,halt-01,false), Span(31,32,List(7),persuade,persuade-01,false), Span(29,30,List(8),actions,action,false), Span(28,29,List(9),further,further,false), Span(26,27,List(10),agreement,agree-01,false), Span(25,26,List(11),reach,reach-01,false), Span(22,23,List(14, 13, 12),Paris,(city :name (name :op "Paris")),false), Span(20,21,List(18, 17, 16, 15),081113,(date-entity :day 13 :month 11 :year 08),false), Span(15,16,List(20, 19),officials,(have-org-role-91 :ARG2 official),false), Span(6,7,List(21),media,media,false), Span(2,3,List(23, 22),diplomats,(have-org-role-91 :ARG2 diplomat),false), Span(1,2,List(27, 26, 25, 24),081114,(date-entity :day 14 :month 11 :year 08),false)),Map(2 -> "Natanz", 5 -> uranium, 27 -> 08, 12 -> city, 8 -> action, 15 -> date-entity, 21 -> media, 18 -> 08, 24 -> date-entity, 7 -> persuade-01, 1 -> name, 17 -> 11, 23 -> diplomat, 26 -> 11, 4 -> enrich-01, 11 -> reach-01, 14 -> "Paris", 20 -> official, 6 -> halt-01, 9 -> further, 0 -> city, 22 -> have-org-role-91, 16 -> 13, 19 -> have-org-role-91, 10 -> agree-01, 3 -> facility, 25 -> 14, 13 -> name),Map(e -> enrich-01, n -> name, h -> halt-01, h2 -> have-org-role-91, 12 -> 11, d3 -> date-entity, d -> date-entity, m -> media, 1 -> 13, p -> persuade-01, a -> action, d2 -> diplomat, 14 -> 11, 02 -> 08, r -> reach-01, a2 -> agree-01, c -> city, h3 -> have-org-role-91, f2 -> further, u -> uranium, 0 -> 08, f -> facility, o -> official, n2 -> name, c2 -> city, 13 -> 14))),[Ljava.lang.String;@2d0399f4,Annotation([Ljava.lang.String;@14dd7b39,[Ljava.lang.String;@66ea810,[Ljava.lang.String;@6cd24612),Annotation([Ljava.lang.String;@5dafbe45,[Ljava.lang.String;@2254127a,[Ledu.cmu.lti.nlp.amr.Dependency;@51891008),Annotation([Ljava.lang.String;@2f953efd,[Ljava.lang.String;@f68f0dc,[Ljava.lang.String;@d2de489),Annotation([Ljava.lang.String;@14bdbc74,[Ljava.lang.String;@12591ac8,[Ledu.cmu.lti.nlp.amr.Entity;@5a7fe64f))
AMR:
(a / action, mod, f2 / further)
(a2 / agree-01, ARG0, m / media)
(a2 / agree-01, ARG1, h3 / have-org-role-91)
(a2 / agree-01, ARG2, a / action)
(a2 / agree-01, time, d / date-entity)
(c / city, name, n / name)
(c2 / city, name, n2 / name)
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 0 / 08)
(d3 / date-entity, day, 13 / 14)
(d3 / date-entity, month, 14 / 11)
(d3 / date-entity, year, 02 / 08)
(e / enrich-01, ARG1, u / uranium)
(e / enrich-01, location, f / facility)
(f / facility, location, c / city)
(h / halt-01, ARG0, h2 / have-org-role-91)
(h / halt-01, ARG1, e / enrich-01)
(h2 / have-org-role-91, ARG1, c2 / city)
(h2 / have-org-role-91, ARG2, o / official)
(h3 / have-org-role-91, ARG2, d2 / diplomat)
(n / name, op, "Natanz")
(n2 / name, op, "Paris")
(p / persuade-01, ARG1, h / halt-01)
(r / reach-01, ARG1, a2 / agree-01)
(r / reach-01, purpose, p / persuade-01)
(r / reach-01, time, d3 / date-entity)

Decoded in 1,157,298 microseconds
Sentence: Uranium enrichment is a highly technical process that can produce fuel for a nuclear power plant or fissile material for atomic weapons.

Spans:
Span 8-9:  can => possible
Span 1-2:  enrichment => enrich-01
Span 17-18:  fissile => fissile
Span 10-11:  fuel => fuel
Span 4-5:  highly => high
Span 18-19:  material => material
Span 13-14:  nuclear => nucleus
Span 16-17:  or => or
Span 15-16:  plant => plant
Span 14-15:  power => power
Span 6-7:  process => process
Span 9-10:  produce => produce-01
Span 5-6:  technical => technical
Span 0-1:  Uranium => uranium

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 20-21:  atomic => atom
Oracle Span 8-9:  can => possible
Oracle Span 1-2:  enrichment => enrich-01
Oracle Span 17-18:  fissile => fissile
Oracle Span 10-11:  fuel => fuel
Oracle Span 4-5:  highly => high
Oracle Span 18-19:  material => material
Oracle Span 13-14:  nuclear => nucleus
Oracle Span 16-17:  or => or
Oracle Span 15-16:  plant => plant
Oracle Span 14-15:  power => power
Oracle Span 6-7:  process => process
Oracle Span 9-10:  produce => produce-01
Oracle Span 5-6:  technical => technical
Oracle Span 0-1:  Uranium => uranium
Oracle Span 21-22:  weapons => weapon

Missing span: weapons => weapon
Missing span: atomic => atom
Dependencies:
1	Uranium	_	JJ	JJ	_	2	amod	_	_
2	enrichment	_	NN	NN	_	7	nsubj	_	_
3	is	_	VBZ	VBZ	_	7	cop	_	_
4	a	_	DT	DT	_	7	det	_	_
5	highly	_	RB	RB	_	6	advmod	_	_
6	technical	_	JJ	JJ	_	7	amod	_	_
7	process	_	NN	NN	_	0	root	_	_
8	that	_	WDT	WDT	_	10	nsubj	_	_
9	can	_	MD	MD	_	10	aux	_	_
10	produce	_	VB	VB	_	7	rcmod	_	_
11	fuel	_	NN	NN	_	10	dobj	_	_
12	for	_	IN	IN	_	10	prep	_	_
13	a	_	DT	DT	_	16	det	_	_
14	nuclear	_	JJ	JJ	_	16	amod	_	_
15	power	_	NN	NN	_	16	nn	_	_
16	plant	_	NN	NN	_	12	pobj	_	_
17	or	_	CC	CC	_	16	cc	_	_
18	fissile	_	NN	NN	_	19	nn	_	_
19	material	_	NN	NN	_	16	conj	_	_
20	for	_	IN	IN	_	16	prep	_	_
21	atomic	_	JJ	JJ	_	22	amod	_	_
22	weapons	_	NNS	NNS	_	20	pobj	_	_
23	.	_	.	.	_	7	punct	_	_

Oracle:
(e / enrich-01, ARG2, u / uranium)
(m / material, mod, f2 / fissile)
(m / material, purpose, w / weapon)
(o / or, op, p4 / produce-01)
(p / process, domain, e / enrich-01)
(p / process, mod, p2 / possible)
(p / process, mod, t / technical)
(p2 / possible, domain, o / or)
(p4 / produce-01, ARG0, p / process)
(p4 / produce-01, ARG1, m / material)
(p5 / plant, mod, p6 / power)
(p6 / power, mod, n / nucleus)
(t / technical, mod, h / high)
(w / weapon, mod, a / atom)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),material,material,false), Span(17,18,List(1),fissile,fissile,false), Span(16,17,List(2),or,or,false), Span(15,16,List(3),plant,plant,false), Span(14,15,List(4),power,power,false), Span(13,14,List(5),nuclear,nucleus,false), Span(10,11,List(6),fuel,fuel,false), Span(9,10,List(7),produce,produce-01,false), Span(8,9,List(8),can,possible,false), Span(6,7,List(9),process,process,false), Span(5,6,List(10),technical,technical,false), Span(4,5,List(11),highly,high,false), Span(1,2,List(12),enrichment,enrich-01,false), Span(0,1,List(13),Uranium,uranium,false)),Map(2 -> or, 5 -> nucleus, 12 -> enrich-01, 8 -> possible, 7 -> produce-01, 1 -> fissile, 4 -> power, 11 -> high, 6 -> fuel, 0 -> material, 9 -> process, 3 -> plant, 10 -> technical, 13 -> uranium),Map(e -> enrich-01, n -> nucleus, h -> high, p5 -> process, t -> technical, p2 -> power, m -> material, p -> plant, p4 -> possible, u -> uranium, f2 -> fuel, f -> fissile, o -> or, p3 -> produce-01))),[Ljava.lang.String;@38145825,Annotation([Ljava.lang.String;@41330d4f,[Ljava.lang.String;@1b66c0fb,[Ljava.lang.String;@3e0e1046),Annotation([Ljava.lang.String;@24c1b2d2,[Ljava.lang.String;@7dc19a70,[Ledu.cmu.lti.nlp.amr.Dependency;@508dec2b),Annotation([Ljava.lang.String;@1e4f4a5c,[Ljava.lang.String;@37313c65,[Ljava.lang.String;@465232e9),Annotation([Ljava.lang.String;@798162bc,[Ljava.lang.String;@1df8da7a,[Ledu.cmu.lti.nlp.amr.Entity;@23941fb4))
AMR:
(e / enrich-01, ARG1, p5 / process)
(e / enrich-01, mod, u / uranium)
(m / material, mod, f / fissile)
(o / or, op, m / material)
(o / or, op, p / plant)
(p / plant, mod, p2 / power)
(p2 / power, mod, n / nucleus)
(p3 / produce-01, ARG0, p5 / process)
(p3 / produce-01, ARG1, f2 / fuel)
(p3 / produce-01, location, p / plant)
(p4 / possible, domain, p3 / produce-01)
(p5 / process, mod, t / technical)
(t / technical, degree, h / high)

Decoded in 368,862 microseconds
Sentence: The 081113 meeting ended without any new measures to announce.

mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
Spans:
Span 1-2:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 9-10:  announce => announce-01
Span 5-6:  any => any
Span 7-8:  measures => measure
Span 6-7:  new => new

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  081113 => (date-entity :day 13 :month 11 :year 2008)
Oracle Span 9-10:  announce => announce-01
Oracle Span 3-4:  ended => end-01
Oracle Span 7-8:  measures => measure
Oracle Span 2-3:  meeting => meet-03
Oracle Span 6-7:  new => new

Extra span: any => any
Incorrect span: 081113 => (date-entity :day 13 :month 11 :year 08)
Missing span: 081113 => (date-entity :day 13 :month 11 :year 2008)
Missing span: ended => end-01
Missing span: meeting => meet-03
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	081113	_	CD	CD	_	3	num	_	_
3	meeting	_	NN	NN	_	4	nsubj	_	_
4	ended	_	VBD	VBD	_	0	root	_	_
5	without	_	IN	IN	_	4	prep	_	_
6	any	_	DT	DT	_	8	det	_	_
7	new	_	JJ	JJ	_	8	amod	_	_
8	measures	_	NNS	NNS	_	5	pobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	announce	_	VB	VB	_	4	xcomp	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(a / announce-01, ARG1, m2 / measure)
(d / date-entity, day, 13)
(d / date-entity, month, 11)
(d / date-entity, year, 2008)
(e / end-01, ARG1, m / meet-03)
(e / end-01, ARG2, m2 / measure)
(m / meet-03, time, d / date-entity)
(m2 / measure, mod, n / new)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),announce,announce-01,false), Span(7,8,List(1),measures,measure,false), Span(6,7,List(2),new,new,false), Span(5,6,List(3),any,any,false), Span(1,2,List(7, 6, 5, 4),081113,(date-entity :day 13 :month 11 :year 08),false)),Map(2 -> new, 5 -> 13, 7 -> 08, 1 -> measure, 4 -> date-entity, 6 -> 11, 0 -> announce-01, 3 -> any),Map(n -> new, 12 -> 11, d -> date-entity, m -> measure, 1 -> 13, a -> announce-01, a2 -> any, 0 -> 08))),[Ljava.lang.String;@7486b455,Annotation([Ljava.lang.String;@660acfb,[Ljava.lang.String;@5d908d47,[Ljava.lang.String;@5efa40fe),Annotation([Ljava.lang.String;@1f9f6368,[Ljava.lang.String;@1c9b0314,[Ledu.cmu.lti.nlp.amr.Dependency;@45385f75),Annotation([Ljava.lang.String;@49c90a9c,[Ljava.lang.String;@2d29b4ee,[Ljava.lang.String;@69ee81fc),Annotation([Ljava.lang.String;@6e2aa843,[Ljava.lang.String;@6f36c2f0,[Ledu.cmu.lti.nlp.amr.Entity;@f58853c))
AMR:
(a / announce-01, ARG0, m / measure)
(a / announce-01, time, d / date-entity)
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 0 / 08)
(m / measure, mod, a2 / any)
(m / measure, mod, n / new)

Decoded in 43,051 microseconds
Sentence: After the 081113 meeting the French foreign ministry released a statement declaring the international community had reaffirmed the importance of the dual-track approach of engaging diplomatically with Iran and working towards sanctions.

mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (thing :name (name :op "French"))
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
Spans:
Span 2-3:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 0-1:  After => after
Span 24-25:  approach => approach-02
Span 14-15:  community => community
Span 21-22:  dual => dual
Span 26-27:  engaging => engage-01
Span 18-19:  importance => important
Span 7-8:  ministry => ministry
Span 8-9:  released => release-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 2-3:  081113 => (date-entity :day 13 :month 11 :year 2008)
Oracle Span 0-1:  After => after
Oracle Span 30-31:  and => and
Oracle Span 24-25:  approach => approach-02
Oracle Span 14-15:  community => community
Oracle Span 11-12:  declaring => declare-01
Oracle Span 27-28:  diplomatically => diplomacy
Oracle Span 21-22:  dual => dual
Oracle Span 26-27:  engaging => engage-01
Oracle Span 6-8:  foreign ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Oracle Span 5-6:  French => (country :name (name :op "France"))
Oracle Span 18-19:  importance => importance
Oracle Span 13-14:  international => international
Oracle Span 29-30:  Iran => (country :name (name :op "Iran"))
Oracle Span 3-4:  meeting => meet-03
Oracle Span 16-17:  reaffirmed => reaffirm-01
Oracle Span 8-9:  released => release-01
Oracle Span 33-34:  sanctions => sanction-02
Oracle Span 10-11:  statement => (thing :ARG1-of state-01)
Oracle Span 23-24:  track => track
Oracle Span 31-32:  working => work-06

Incorrect span: importance => important
Extra span: ministry => ministry
Incorrect span: 081113 => (date-entity :day 13 :month 11 :year 08)
Missing span: foreign ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: 081113 => (date-entity :day 13 :month 11 :year 2008)
Missing span: meeting => meet-03
Missing span: statement => (thing :ARG1-of state-01)
Missing span: declaring => declare-01
Missing span: reaffirmed => reaffirm-01
Missing span: importance => importance
Missing span: track => track
Missing span: and => and
Missing span: working => work-06
Missing span: sanctions => sanction-02
Missing span: international => international
Missing span: French => (country :name (name :op "France"))
Missing span: diplomatically => diplomacy
Dependencies:
1	After	_	IN	IN	_	9	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	081113	_	CD	CD	_	4	num	_	_
4	meeting	_	NN	NN	_	1	pobj	_	_
5	the	_	DT	DT	_	8	det	_	_
6	French	_	JJ	JJ	_	8	amod	_	_
7	foreign	_	JJ	JJ	_	8	amod	_	_
8	ministry	_	NN	NN	_	9	nsubj	_	_
9	released	_	VBD	VBD	_	0	root	_	_
10	a	_	DT	DT	_	11	det	_	_
11	statement	_	NN	NN	_	17	nsubj	_	_
12	declaring	_	VBG	VBG	_	11	vmod	_	_
13	the	_	DT	DT	_	15	det	_	_
14	international	_	JJ	JJ	_	15	amod	_	_
15	community	_	NN	NN	_	12	dobj	_	_
16	had	_	VBD	VBD	_	17	aux	_	_
17	reaffirmed	_	VBD	VBD	_	9	ccomp	_	_
18	the	_	DT	DT	_	19	det	_	_
19	importance	_	NN	NN	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	23	det	_	_
22	dual-track	_	JJ	JJ	_	23	amod	_	_
23	approach	_	NN	NN	_	20	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	engaging	_	VBG	VBG	_	24	pcomp	_	_
26	diplomatically	_	RB	RB	_	25	advmod	_	_
27	with	_	IN	IN	_	25	prep	_	_
28	Iran	_	NNP	NNP	_	27	pobj	_	_
29	and	_	CC	CC	_	25	cc	_	_
30	working	_	VBG	VBG	_	25	conj	_	_
31	towards	_	IN	IN	_	30	prep	_	_
32	sanctions	_	NNS	NNS	_	31	pobj	_	_
33	.	_	.	.	_	9	punct	_	_

Oracle:
(a / approach-02, ARG1, a2 / and)
(a / approach-02, mod, t / track)
(a2 / and, op, e / engage-01)
(a2 / and, op, w / work-06)
(a3 / after, op, m2 / meet-03)
(c / country, name, n / name)
(c2 / community, mod, i / international)
(c3 / country, name, n2 / name)
(d / declare-01, ARG0, t2 / thing)
(d / declare-01, ARG1, r2 / reaffirm-01)
(d2 / date-entity, day, 13)
(d2 / date-entity, month, 11)
(d2 / date-entity, year, 2008)
(e / engage-01, ARG1, c3 / country)
(e / engage-01, manner, d3 / diplomacy)
(g / government-organization, mod, c / country)
(g / government-organization, name, n3 / name)
(i2 / importance, poss, a / approach-02)
(m2 / meet-03, time, d2 / date-entity)
(n / name, op, "France")
(n2 / name, op, "Iran")
(n3 / name, op, "Foreign")
(n3 / name, op, "Ministry")
(r / release-01, ARG0, g / government-organization)
(r / release-01, ARG1, t2 / thing)
(r / release-01, time, a3 / after)
(r2 / reaffirm-01, ARG0, c2 / community)
(r2 / reaffirm-01, ARG1, i2 / importance)
(s / state-01, ARG1, t2 / thing)
(t / track, mod, d4 / dual)
(w / work-06, ARG4, s2 / sanction-02)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),engaging,engage-01,false), Span(24,25,List(1),approach,approach-02,false), Span(21,22,List(2),dual,dual,false), Span(18,19,List(3),importance,important,false), Span(14,15,List(4),community,community,false), Span(8,9,List(5),released,release-01,false), Span(7,8,List(6),ministry,ministry,false), Span(2,3,List(10, 9, 8, 7),081113,(date-entity :day 13 :month 11 :year 08),false), Span(0,1,List(11),After,after,false)),Map(2 -> dual, 5 -> release-01, 8 -> 13, 7 -> date-entity, 1 -> approach-02, 11 -> after, 4 -> community, 6 -> ministry, 9 -> 11, 0 -> engage-01, 10 -> 08, 3 -> important),Map(e -> engage-01, 12 -> 11, m -> ministry, d -> dual, 1 -> 13, a -> approach-02, d2 -> date-entity, a2 -> after, r -> release-01, i -> important, c -> community, 0 -> 08))),[Ljava.lang.String;@1224144a,Annotation([Ljava.lang.String;@29f7cefd,[Ljava.lang.String;@700fb871,[Ljava.lang.String;@3b35a229),Annotation([Ljava.lang.String;@9816741,[Ljava.lang.String;@1e16c0aa,[Ledu.cmu.lti.nlp.amr.Dependency;@13d73f29),Annotation([Ljava.lang.String;@565f390,[Ljava.lang.String;@7dc3712,[Ljava.lang.String;@2f67a4d3),Annotation([Ljava.lang.String;@5e3f861,[Ljava.lang.String;@2fb0623e,[Ledu.cmu.lti.nlp.amr.Entity;@49b2a47d))
AMR:
(a / approach-02, ARG1, e / engage-01)
(a / approach-02, location, c / community)
(a / approach-02, mod, d / dual)
(d2 / date-entity, day, 1 / 13)
(d2 / date-entity, month, 12 / 11)
(d2 / date-entity, year, 0 / 08)
(e / engage-01, ARG1, i / important)
(r / release-01, ARG0, m / ministry)
(r / release-01, ARG1, i / important)
(r / release-01, time, a2 / after)
(r / release-01, time, d2 / date-entity)

Decoded in 302,687 microseconds
Sentence: Russia and China have resisted new sanctions against Iran.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 5-6:  new => new
Span 4-5:  resisted => resist-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 2-3:  China => (country :name (name :op "China"))
Oracle Span 8-9:  Iran => (country :name (name :op "Iran"))
Oracle Span 5-6:  new => new
Oracle Span 4-5:  resisted => resist-01
Oracle Span 0-1:  Russia => (country :name (name :op "Russia"))
Oracle Span 6-7:  sanctions => sanction-02

Missing span: Russia => (country :name (name :op "Russia"))
Missing span: China => (country :name (name :op "China"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: sanctions => sanction-02
Missing span: and => and
Dependencies:
1	Russia	_	NNP	NNP	_	5	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	China	_	NNP	NNP	_	1	conj	_	_
4	have	_	VBP	VBP	_	5	aux	_	_
5	resisted	_	VBN	VBN	_	0	root	_	_
6	new	_	JJ	JJ	_	7	amod	_	_
7	sanctions	_	NNS	NNS	_	5	dobj	_	_
8	against	_	IN	IN	_	5	prep	_	_
9	Iran	_	NNP	NNP	_	8	pobj	_	_
10	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(n / name, op, "Russia")
(n2 / name, op, "China")
(n3 / name, op, "Iran")
(r / resist-01, ARG0, a / and)
(r / resist-01, ARG1, s / sanction-02)
(s / sanction-02, ARG1, c3 / country)
(s / sanction-02, mod, n4 / new)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),new,new,false), Span(4,5,List(1),resisted,resist-01,false)),Map(1 -> resist-01, 0 -> new),Map(n -> new, r -> resist-01))),[Ljava.lang.String;@5be1d0a4,Annotation([Ljava.lang.String;@415b0b49,[Ljava.lang.String;@6d5620ce,[Ljava.lang.String;@311bf055),Annotation([Ljava.lang.String;@642a7222,[Ljava.lang.String;@7d322cad,[Ledu.cmu.lti.nlp.amr.Dependency;@21be3395),Annotation([Ljava.lang.String;@4f49f6af,[Ljava.lang.String;@78452606,[Ljava.lang.String;@147e2ae7),Annotation([Ljava.lang.String;@448c8166,[Ljava.lang.String;@4470fbd6,[Ledu.cmu.lti.nlp.amr.Entity;@15d49048))
AMR:
(r / resist-01, ARG1, n / new)

Decoded in 19,236 microseconds
Sentence: Russia and China have close political and business ties with Iran and feel no domestic pressure to act against the Islamic Republic of Iran.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
Spans:
Span 7-8:  business => business
Span 14-15:  domestic => domestic
Span 12-13:  feel => feel-01
Span 20-24:  Islamic Republic of Iran => (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
Span 13-14:  no => -
Span 15-16:  pressure => pressure-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 17-18:  act => act-02
Oracle Span 1-2:  and => and
Oracle Span 6-7:  and => and
Oracle Span 11-12:  and => and
Oracle Span 7-8:  business => business
Oracle Span 2-3:  China => (country :name (name :op "China"))
Oracle Span 4-5:  close => close
Oracle Span 14-15:  domestic => domestic
Oracle Span 12-13:  feel => feel-01
Oracle Span 20-24:  Islamic Republic of Iran => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))
Oracle Span 13-14:  no => -
Oracle Span 5-6:  political => politics
Oracle Span 15-16:  pressure => pressure-01
Oracle Span 0-1:  Russia => (country :name (name :op "Russia"))
Oracle Span 8-9:  ties => tie-01

Incorrect span: Islamic Republic of Iran => (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: China => (country :name (name :op "China"))
Missing span: Islamic Republic of Iran => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))
Missing span: and => and
Missing span: act => act-02
Missing span: ties => tie-01
Missing span: close => close
Missing span: and => and
Missing span: and => and
Missing span: political => politics
Dependencies:
1	Russia	_	NNP	NNP	_	4	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	China	_	NNP	NNP	_	1	conj	_	_
4	have	_	VBP	VBP	_	0	root	_	_
5	close	_	VB	VB	_	4	ccomp	_	_
6	political	_	JJ	JJ	_	9	amod	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	business	_	NN	NN	_	6	conj	_	_
9	ties	_	NNS	NNS	_	5	dobj	_	_
10	with	_	IN	IN	_	5	prep	_	_
11	Iran	_	NNP	NNP	_	10	pobj	_	_
12	and	_	CC	CC	_	5	cc	_	_
13	feel	_	VB	VB	_	5	conj	_	_
14	no	_	DT	DT	_	16	neg	_	_
15	domestic	_	JJ	JJ	_	16	amod	_	_
16	pressure	_	NN	NN	_	13	dobj	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	act	_	VB	VB	_	13	vmod	_	_
19	against	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	22	det	_	_
21	Islamic	_	JJ	JJ	_	22	amod	_	_
22	Republic	_	NN	NN	_	19	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	Iran	_	NNP	NNP	_	23	pobj	_	_
25	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a2 / and, op, f / feel-01)
(a2 / and, op, t / tie-01)
(a3 / act-02, ARG0, a / and)
(a3 / act-02, prep-against, c3 / country)
(a5 / and, op, b / business)
(a5 / and, op, p2 / politics)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(f / feel-01, ARG0, a / and)
(f / feel-01, ARG1, p / pressure-01)
(f / feel-01, polarity, - / -)
(n / name, op, "Russia")
(n2 / name, op, "China")
(n3 / name, op, "Iran")
(n3 / name, op, "Islamic")
(n3 / name, op, "Republic")
(n3 / name, op, "of")
(p / pressure-01, ARG1, a / and)
(p / pressure-01, ARG2, a3 / act-02)
(p / pressure-01, mod, d / domestic)
(t / tie-01, ARG0, a / and)
(t / tie-01, ARG1, c3 / country)
(t / tie-01, ARG2, a5 / and)
(t / tie-01, mod, c5 / close)

Input(Some(Graph(null,ArrayBuffer(Span(20,24,List(5, 4, 3, 2, 1, 0),Islamic Republic of Iran,(country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran")),false), Span(15,16,List(6),pressure,pressure-01,false), Span(14,15,List(7),domestic,domestic,false), Span(13,14,List(8),no,-,false), Span(12,13,List(9),feel,feel-01,false), Span(7,8,List(10),business,business,false)),Map(2 -> "Islamic", 5 -> "Iran", 8 -> -, 7 -> domestic, 1 -> name, 4 -> "of", 6 -> pressure-01, 9 -> feel-01, 0 -> country, 10 -> business, 3 -> "Republic"),Map(n -> name, b -> business, d -> domestic, p -> pressure-01, - -> -, c -> country, f -> feel-01))),[Ljava.lang.String;@7098b907,Annotation([Ljava.lang.String;@503f91c3,[Ljava.lang.String;@13526e59,[Ljava.lang.String;@2235eaab),Annotation([Ljava.lang.String;@17503f6b,[Ljava.lang.String;@3bcd05cb,[Ledu.cmu.lti.nlp.amr.Dependency;@3b6d844d),Annotation([Ljava.lang.String;@36804139,[Ljava.lang.String;@20bd8be5,[Ljava.lang.String;@730d2164),Annotation([Ljava.lang.String;@24959ca4,[Ljava.lang.String;@10289886,[Ledu.cmu.lti.nlp.amr.Entity;@5c86dbc5))
AMR:
(c / country, name, n / name)
(f / feel-01, ARG0, c / country)
(f / feel-01, ARG1, p / pressure-01)
(f / feel-01, ARG2, b / business)
(n / name, op, "Iran")
(n / name, op, "Islamic")
(n / name, op, "Republic")
(n / name, op, "of")
(p / pressure-01, mod, d / domestic)
(p / pressure-01, polarity, - / -)

Decoded in 89,066 microseconds
Sentence: The United States does not have close political and business ties with Iran and feels domestic pressure to act against the Islamic Republic of Iran.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
Spans:
Span 9-10:  business => business
Span 15-16:  domestic => domestic
Span 14-15:  feels => feel-02
Span 21-25:  Islamic Republic of Iran => (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
Span 16-17:  pressure => pressure-01
Span 1-3:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 18-19:  act => act-02
Oracle Span 8-9:  and => and
Oracle Span 13-14:  and => and
Oracle Span 9-10:  business => business
Oracle Span 6-7:  close => close
Oracle Span 15-16:  domestic => domestic
Oracle Span 14-15:  feels => feel-01
Oracle Span 21-25:  Islamic Republic of Iran => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))
Oracle Span 7-8:  political => politics
Oracle Span 16-17:  pressure => pressure-01
Oracle Span 10-11:  ties => tie-01
Oracle Span 1-3:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: Islamic Republic of Iran => (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
Incorrect span: feels => feel-02
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Islamic Republic of Iran => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))
Missing span: and => and
Missing span: feels => feel-01
Missing span: act => act-02
Missing span: ties => tie-01
Missing span: close => close
Missing span: and => and
Missing span: political => politics
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	United	_	NNP	NNP	_	3	nn	_	_
3	States	_	NNPS	NNPS	_	6	nsubj	_	_
4	does	_	VBZ	VBZ	_	6	aux	_	_
5	not	_	RB	RB	_	6	neg	_	_
6	have	_	VB	VB	_	0	root	_	_
7	close	_	JJ	JJ	_	11	amod	_	_
8	political	_	JJ	JJ	_	11	amod	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	business	_	NN	NN	_	8	conj	_	_
11	ties	_	NNS	NNS	_	6	dobj	_	_
12	with	_	IN	IN	_	6	prep	_	_
13	Iran	_	NNP	NNP	_	12	pobj	_	_
14	and	_	CC	CC	_	6	cc	_	_
15	feels	_	VBZ	VBZ	_	6	conj	_	_
16	domestic	_	JJ	JJ	_	17	amod	_	_
17	pressure	_	NN	NN	_	15	dobj	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	act	_	VB	VB	_	15	vmod	_	_
20	against	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	23	det	_	_
22	Islamic	_	JJ	JJ	_	23	amod	_	_
23	Republic	_	NN	NN	_	20	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	Iran	_	NNP	NNP	_	24	pobj	_	_
26	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, f / feel-01)
(a / and, op, t / tie-01)
(a2 / act-02, ARG0, c / country)
(a4 / and, op, b / business)
(a4 / and, op, p / politics)
(c / country, name, n / name)
(c3 / country, name, n3 / name)
(f / feel-01, ARG0, c / country)
(f / feel-01, ARG1, p2 / pressure-01)
(n / name, op, "States")
(n / name, op, "United")
(n3 / name, op, "Iran")
(n3 / name, op, "Islamic")
(n3 / name, op, "Republic")
(n3 / name, op, "of")
(p2 / pressure-01, ARG1, c / country)
(p2 / pressure-01, ARG2, a2 / act-02)
(p2 / pressure-01, mod, d / domestic)
(t / tie-01, ARG0, c / country)
(t / tie-01, ARG1, c3 / country)
(t / tie-01, ARG2, a4 / and)
(t / tie-01, mod, c4 / close)

Input(Some(Graph(null,ArrayBuffer(Span(21,25,List(5, 4, 3, 2, 1, 0),Islamic Republic of Iran,(country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran")),false), Span(16,17,List(6),pressure,pressure-01,false), Span(15,16,List(7),domestic,domestic,false), Span(14,15,List(8),feels,feel-02,false), Span(9,10,List(9),business,business,false), Span(1,3,List(13, 12, 11, 10),United States,(country :name (name :op "United" :op "States")),false)),Map(2 -> "Islamic", 5 -> "Iran", 12 -> "United", 8 -> feel-02, 7 -> domestic, 1 -> name, 4 -> "of", 11 -> name, 6 -> pressure-01, 0 -> country, 9 -> business, 3 -> "Republic", 10 -> country, 13 -> "States"),Map(n -> name, b -> business, d -> domestic, p -> pressure-01, c -> country, f -> feel-02, n2 -> name, c2 -> country))),[Ljava.lang.String;@461ad730,Annotation([Ljava.lang.String;@4ee203eb,[Ljava.lang.String;@1a5a4e19,[Ljava.lang.String;@7068e664),Annotation([Ljava.lang.String;@60db1c0e,[Ljava.lang.String;@3e78b6a5,[Ledu.cmu.lti.nlp.amr.Dependency;@769a1df5),Annotation([Ljava.lang.String;@41f69e84,[Ljava.lang.String;@7975d1d8,[Ljava.lang.String;@2438dcd),Annotation([Ljava.lang.String;@24105dc5,[Ljava.lang.String;@5167f57d,[Ledu.cmu.lti.nlp.amr.Entity;@64b0598))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(f / feel-02, ARG0, c2 / country)
(f / feel-02, ARG1, p / pressure-01)
(f / feel-02, ARG2, b / business)
(n / name, op, "Iran")
(n / name, op, "Islamic")
(n / name, op, "Republic")
(n / name, op, "of")
(n2 / name, op, "States")
(n2 / name, op, "United")
(p / pressure-01, ARG1, c / country)
(p / pressure-01, mod, d / domestic)

Decoded in 335,548 microseconds
Sentence: Russia and China hold veto power over Security Council decisions.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "Security" :op "Council"))
Spans:
Span 9-10:  decisions => decide-01
Span 3-4:  hold => hold-04
Span 5-6:  power => power
Span 7-9:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 4-5:  veto => veto

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 2-3:  China => (country :name (name :op "China"))
Oracle Span 9-10:  decisions => decide-01
Oracle Span 3-4:  hold => hold-01
Oracle Span 5-6:  power => power
Oracle Span 0-1:  Russia => (country :name (name :op "Russia"))
Oracle Span 7-9:  Security Council => (organization :name (name :op "Council" :op "Security"))
Oracle Span 4-5:  veto => veto-01

Incorrect span: veto => veto
Incorrect span: hold => hold-04
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: China => (country :name (name :op "China"))
Missing span: hold => hold-01
Missing span: veto => veto-01
Missing span: and => and
Dependencies:
1	Russia	_	NNP	NNP	_	4	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	China	_	NNP	NNP	_	1	conj	_	_
4	hold	_	VBP	VBP	_	0	root	_	_
5	veto	_	NN	NN	_	6	nn	_	_
6	power	_	NN	NN	_	4	dobj	_	_
7	over	_	IN	IN	_	6	prep	_	_
8	Security	_	NNP	NNP	_	10	nn	_	_
9	Council	_	NNP	NNP	_	10	nn	_	_
10	decisions	_	NNS	NNS	_	7	pobj	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / decide-01, ARG0, o / organization)
(h / hold-01, ARG0, a / and)
(h / hold-01, ARG1, p / power)
(n / name, op, "Russia")
(n2 / name, op, "China")
(n3 / name, op, "Council")
(n3 / name, op, "Security")
(o / organization, name, n3 / name)
(p / power, mod, v / veto-01)
(v / veto-01, ARG1, d / decide-01)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),decisions,decide-01,false), Span(7,9,List(4, 3, 2, 1),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(5,6,List(5),power,power,false), Span(4,5,List(6),veto,veto,false), Span(3,4,List(7),hold,hold-04,false)),Map(2 -> name, 5 -> power, 7 -> hold-04, 1 -> organization, 4 -> "Security", 6 -> veto, 0 -> decide-01, 3 -> "Council"),Map(n -> name, h -> hold-04, v -> veto, d -> decide-01, p -> power, o -> organization))),[Ljava.lang.String;@18f8cd79,Annotation([Ljava.lang.String;@3e2055d6,[Ljava.lang.String;@50029372,[Ljava.lang.String;@e3b3b2f),Annotation([Ljava.lang.String;@50f6ac94,[Ljava.lang.String;@6cc4cdb9,[Ledu.cmu.lti.nlp.amr.Dependency;@28194a50),Annotation([Ljava.lang.String;@7f2cfe3f,[Ljava.lang.String;@1a5b6f42,[Ljava.lang.String;@5038d0b5),Annotation([Ljava.lang.String;@32115b28,[Ljava.lang.String;@2ad48653,[Ledu.cmu.lti.nlp.amr.Entity;@6bb4dd34))
AMR:
(d / decide-01, ARG0, o / organization)
(h / hold-04, ARG1, p / power)
(h / hold-04, ARG2, d / decide-01)
(n / name, op, "Council")
(n / name, op, "Security")
(o / organization, name, n / name)
(p / power, mod, v / veto)

Decoded in 79,984 microseconds
Sentence: Moscow's Interfax news agency quoted Russian diplomat Sergei ryabkov as stating that the parties struck no deal on sanctions against Iran at the 081113 meeting and that the Western countries are in favor of the sanctions against Iran while China and Russia did not support sanctions against Iran.

NER Entity: (country :name (name :op "Moscow"))
NER Entity: (organization :name (name :op "Interfax"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Sergei" :op "ryabkov"))
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Western"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (country :name (name :op "Moscow"))
Spans:
Span 24-25:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 4-5:  agency => agency
Span 30-31:  countries => country
Span 17-18:  deal => deal-01
Span 0-1:  Moscow => (city :name (name :op "Moscow"))
Span 3-4:  news => news
Span 16-17:  no => -
Span 14-15:  parties => party
Span 5-6:  quoted => quote-01
Span 8-10:  Sergei ryabkov => (person :name (name :op "Sergei" :op "ryabkov"))
Span 11-12:  stating => state-01
Span 15-16:  struck => strike-01
Span 45-46:  support => support-01
Span 29-30:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 70 iterations. Delta = 0.0
Oracle Span 24-25:  081113 => (date-entity :day 13 :month 11 :year 2008)
Oracle Span 4-5:  agency => agency
Oracle Span 26-27:  and => and
Oracle Span 41-42:  and => and
Oracle Span 40-41:  China => (country :name (name :op "China"))
Oracle Span 30-31:  countries => country
Oracle Span 17-18:  deal => deal-01
Oracle Span 7-8:  diplomat => (have-org-role-91 :ARG2 diplomat)
Oracle Span 33-34:  favor => favor-01
Oracle Span 2-3:  Interfax => (name :op "Interfax")
Oracle Span 21-22:  Iran => (country :name (name :op "Iran"))
Oracle Span 25-26:  meeting => meet-03
Oracle Span 0-1:  Moscow => (city :name (name :op "Moscow"))
Oracle Span 3-4:  news => news
Oracle Span 16-17:  no => -
Oracle Span 14-15:  parties => party
Oracle Span 5-6:  quoted => quote-01
Oracle Span 42-43:  Russia => (country :name (name :op "Russia"))
Oracle Span 19-20:  sanctions => sanction-02
Oracle Span 8-10:  Sergei ryabkov => (person :name (name :op "Ryabkov" :op "Sergei"))
Oracle Span 15-16:  struck => strike-05
Oracle Span 45-46:  support => support-01
Oracle Span 29-30:  Western => (world-region :name (name :op "West"))

Incorrect span: 081113 => (date-entity :day 13 :month 11 :year 08)
Incorrect span: struck => strike-01
Extra span: stating => state-01
Incorrect span: Sergei ryabkov => (person :name (name :op "Sergei" :op "ryabkov"))
Missing span: Interfax => (name :op "Interfax")
Missing span: Sergei ryabkov => (person :name (name :op "Ryabkov" :op "Sergei"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: China => (country :name (name :op "China"))
Missing span: 081113 => (date-entity :day 13 :month 11 :year 2008)
Missing span: and => and
Missing span: favor => favor-01
Missing span: and => and
Missing span: struck => strike-05
Missing span: meeting => meet-03
Missing span: sanctions => sanction-02
Missing span: diplomat => (have-org-role-91 :ARG2 diplomat)
Dependencies:
1	Moscow	_	NNP	NNP	_	5	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	Interfax	_	NNP	NNP	_	5	nn	_	_
4	news	_	NN	NN	_	5	nn	_	_
5	agency	_	NN	NN	_	6	nsubj	_	_
6	quoted	_	VBD	VBD	_	0	root	_	_
7	Russian	_	JJ	JJ	_	10	amod	_	_
8	diplomat	_	NN	NN	_	10	nn	_	_
9	Sergei	_	NNP	NNP	_	10	nn	_	_
10	ryabkov	_	NNP	NNP	_	6	dobj	_	_
11	as	_	IN	IN	_	6	prep	_	_
12	stating	_	VBG	VBG	_	11	pcomp	_	_
13	that	_	IN	IN	_	16	mark	_	_
14	the	_	DT	DT	_	15	det	_	_
15	parties	_	NNS	NNS	_	16	nsubj	_	_
16	struck	_	VBD	VBD	_	12	ccomp	_	_
17	no	_	DT	DT	_	18	neg	_	_
18	deal	_	NN	NN	_	16	dobj	_	_
19	on	_	IN	IN	_	16	prep	_	_
20	sanctions	_	NNS	NNS	_	19	pobj	_	_
21	against	_	IN	IN	_	20	prep	_	_
22	Iran	_	NNP	NNP	_	21	pobj	_	_
23	at	_	IN	IN	_	16	prep	_	_
24	the	_	DT	DT	_	26	det	_	_
25	081113	_	CD	CD	_	26	num	_	_
26	meeting	_	NN	NN	_	23	pobj	_	_
27	and	_	CC	CC	_	16	cc	_	_
28	that	_	IN	IN	_	32	mark	_	_
29	the	_	DT	DT	_	31	det	_	_
30	Western	_	JJ	JJ	_	31	amod	_	_
31	countries	_	NNS	NNS	_	32	nsubj	_	_
32	are	_	VBP	VBP	_	16	conj	_	_
33	in	_	IN	IN	_	32	prep	_	_
34	favor	_	NN	NN	_	33	pobj	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	the	_	DT	DT	_	37	det	_	_
37	sanctions	_	NNS	NNS	_	35	pobj	_	_
38	against	_	IN	IN	_	37	prep	_	_
39	Iran	_	NNP	NNP	_	38	pobj	_	_
40	while	_	IN	IN	_	46	mark	_	_
41	China	_	NNP	NNP	_	46	nsubj	_	_
42	and	_	CC	CC	_	41	cc	_	_
43	Russia	_	NNP	NNP	_	41	conj	_	_
44	did	_	VBD	VBD	_	46	aux	_	_
45	not	_	RB	RB	_	46	neg	_	_
46	support	_	VB	VB	_	32	advcl	_	_
47	sanctions	_	NNS	NNS	_	46	dobj	_	_
48	against	_	IN	IN	_	46	prep	_	_
49	Iran	_	NNP	NNP	_	48	pobj	_	_
50	.	_	.	.	_	6	punct	_	_

Oracle:
(a / agency, location, c6 / city)
(a / agency, mod, n / news)
(a / agency, name, n2 / name)
(a2 / and, op, s / strike-05)
(a3 / and, op, c / country)
(a3 / and, op, c5 / country)
(c / country, name, n3 / name)
(c2 / country, name, n5 / name)
(c3 / country, mod, w / world-region)
(c5 / country, name, n7 / name)
(c6 / city, name, n8 / name)
(d2 / deal-01, ARG1, s3 / sanction-02)
(d3 / date-entity, day, 13)
(d3 / date-entity, month, 11)
(d3 / date-entity, year, 2008)
(f / favor-01, ARG0, c3 / country)
(f / favor-01, ARG1, s3 / sanction-02)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, d / diplomat)
(m / meet-03, time, d3 / date-entity)
(n2 / name, op, "Interfax")
(n3 / name, op, "Russia")
(n4 / name, op, "Ryabkov")
(n4 / name, op, "Sergei")
(n5 / name, op, "Iran")
(n6 / name, op, "West")
(n7 / name, op, "China")
(n8 / name, op, "Moscow")
(p2 / person, name, n4 / name)
(q / quote-01, ARG0, a / agency)
(q / quote-01, ARG1, p2 / person)
(q / quote-01, ARG2, a2 / and)
(s / strike-05, ARG0, p / party)
(s / strike-05, ARG1, d2 / deal-01)
(s / strike-05, polarity, - / -)
(s / strike-05, time, m / meet-03)
(s3 / sanction-02, ARG1, c2 / country)
(s5 / support-01, ARG0, a3 / and)
(s5 / support-01, ARG1, s3 / sanction-02)
(w / world-region, name, n6 / name)

Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),support,support-01,false), Span(30,31,List(1),countries,country,false), Span(29,30,List(4, 3, 2),Western,(world-region :name (name :op "West")),false), Span(24,25,List(8, 7, 6, 5),081113,(date-entity :day 13 :month 11 :year 08),false), Span(17,18,List(9),deal,deal-01,false), Span(16,17,List(10),no,-,false), Span(15,16,List(11),struck,strike-01,false), Span(14,15,List(12),parties,party,false), Span(11,12,List(13),stating,state-01,false), Span(8,10,List(17, 16, 15, 14),Sergei ryabkov,(person :name (name :op "Sergei" :op "ryabkov")),false), Span(5,6,List(18),quoted,quote-01,false), Span(4,5,List(19),agency,agency,false), Span(3,4,List(20),news,news,false), Span(0,1,List(23, 22, 21),Moscow,(city :name (name :op "Moscow")),false)),Map(2 -> world-region, 5 -> date-entity, 12 -> party, 15 -> name, 8 -> 08, 21 -> city, 18 -> quote-01, 7 -> 11, 17 -> "ryabkov", 1 -> country, 23 -> "Moscow", 4 -> "West", 11 -> strike-01, 14 -> person, 20 -> news, 6 -> 13, 22 -> name, 0 -> support-01, 9 -> deal-01, 16 -> "Sergei", 19 -> agency, 3 -> name, 10 -> -, 13 -> state-01),Map(w -> world-region, n -> name, q -> quote-01, s2 -> strike-01, 12 -> 11, p2 -> person, n4 -> name, s -> support-01, d -> date-entity, 1 -> 13, p -> party, n3 -> news, a -> agency, d2 -> deal-01, - -> -, c -> country, s3 -> state-01, 0 -> 08, c2 -> city, n2 -> name))),[Ljava.lang.String;@7d9f158f,Annotation([Ljava.lang.String;@45efd90f,[Ljava.lang.String;@4b8729ff,[Ljava.lang.String;@61710c6),Annotation([Ljava.lang.String;@3214ee6,[Ljava.lang.String;@383dc82c,[Ledu.cmu.lti.nlp.amr.Dependency;@4a07d605),Annotation([Ljava.lang.String;@74287ea3,[Ljava.lang.String;@7d7758be,[Ljava.lang.String;@2bdd8394),Annotation([Ljava.lang.String;@5f9edf14,[Ljava.lang.String;@68746f22,[Ledu.cmu.lti.nlp.amr.Entity;@2f01783a))
AMR:
(a / agency, location, c2 / city)
(a / agency, mod, n3 / news)
(c2 / city, name, n4 / name)
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 0 / 08)
(d2 / deal-01, ARG0, p / party)
(n / name, op, "West")
(n2 / name, op, "Sergei")
(n2 / name, op, "ryabkov")
(n4 / name, op, "Moscow")
(p2 / person, name, n2 / name)
(q / quote-01, ARG0, a / agency)
(q / quote-01, ARG1, p2 / person)
(s / support-01, ARG0, c / country)
(s / support-01, ARG1, w / world-region)
(s2 / strike-01, ARG0, c / country)
(s2 / strike-01, ARG1, d2 / deal-01)
(s2 / strike-01, polarity, - / -)
(s2 / strike-01, time, d / date-entity)
(s3 / state-01, ARG0, p2 / person)
(s3 / state-01, ARG1, s2 / strike-01)
(w / world-region, name, n / name)

Decoded in 2,532,519 microseconds
Sentence: Sergei ryabkov attended the 081113 meeting.

NER Entity: (person :name (name :op "Sergei"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
Spans:
Span 4-5:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 2-3:  attended => attend-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  081113 => (date-entity :day 13 :month 11 :year 2008)
Oracle Span 2-3:  attended => attend-01
Oracle Span 5-6:  meeting => meet-03
Oracle Span 0-2:  Sergei ryabkov => (person :name (name :op "Ryabkov" :op "Sergei"))

Incorrect span: 081113 => (date-entity :day 13 :month 11 :year 08)
Missing span: Sergei ryabkov => (person :name (name :op "Ryabkov" :op "Sergei"))
Missing span: 081113 => (date-entity :day 13 :month 11 :year 2008)
Missing span: meeting => meet-03
Dependencies:
1	Sergei	_	NNP	NNP	_	2	nn	_	_
2	ryabkov	_	NNP	NNP	_	3	nsubj	_	_
3	attended	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	081113	_	CD	CD	_	6	num	_	_
6	meeting	_	NN	NN	_	3	dobj	_	_
7	.	_	.	.	_	3	punct	_	_

Oracle:
(a / attend-01, ARG0, p / person)
(a / attend-01, ARG1, m / meet-03)
(d / date-entity, day, 13)
(d / date-entity, month, 11)
(d / date-entity, year, 2008)
(m / meet-03, time, d / date-entity)
(n / name, op, "Ryabkov")
(n / name, op, "Sergei")
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(3, 2, 1, 0),081113,(date-entity :day 13 :month 11 :year 08),false), Span(2,3,List(4),attended,attend-01,false)),Map(2 -> 11, 1 -> 13, 4 -> attend-01, 0 -> date-entity, 3 -> 08),Map(12 -> 11, d -> date-entity, 1 -> 13, a -> attend-01, 0 -> 08))),[Ljava.lang.String;@68878f6d,Annotation([Ljava.lang.String;@41488b16,[Ljava.lang.String;@a8ef162,[Ljava.lang.String;@2eea88a1),Annotation([Ljava.lang.String;@7ac296f6,[Ljava.lang.String;@7fd7a283,[Ledu.cmu.lti.nlp.amr.Dependency;@22f59fa),Annotation([Ljava.lang.String;@78fa769e,[Ljava.lang.String;@16612a51,[Ljava.lang.String;@54e041a4),Annotation([Ljava.lang.String;@2c78324b,[Ljava.lang.String;@79defdc,[Ledu.cmu.lti.nlp.amr.Entity;@18317edc))
AMR:
(a / attend-01, ARG1, d / date-entity)
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 0 / 08)

Decoded in 21,804 microseconds
Sentence: A report released this week says Iran has made significant progress at Iran's heavy-water research reactor facility near the city of Arak.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
Spans:
Span 24-25:  Arak => (city :name (name :op "Arak"))
Span 22-23:  city => city
Span 19-20:  facility => facility
Span 14-15:  heavy => heavy
Span 20-21:  near => near
Span 10-11:  progress => progress-01
Span 18-19:  reactor => reactor
Span 2-3:  released => release-01
Span 17-18:  research => research-01
Span 5-6:  says => say-01
Span 9-10:  significant => significant
Span 3-4:  this => this
Span 16-17:  water => water

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 24-25:  Arak => (name :op "Arak")
Oracle Span 22-23:  city => city
Oracle Span 19-20:  facility => facility
Oracle Span 14-15:  heavy => heavy
Oracle Span 6-7:  Iran => (country :name (name :op "Iran"))
Oracle Span 20-21:  near => near
Oracle Span 10-11:  progress => progress-01
Oracle Span 18-19:  reactor => reactor
Oracle Span 2-3:  released => release-01
Oracle Span 1-2:  report => report-01
Oracle Span 17-18:  research => research-01
Oracle Span 9-10:  significant => significant
Oracle Span 3-4:  this => this
Oracle Span 16-17:  water => water
Oracle Span 4-5:  week => week

Incorrect span: Arak => (city :name (name :op "Arak"))
Extra span: says => say-01
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Arak => (name :op "Arak")
Missing span: report => report-01
Missing span: week => week
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	report	_	NN	NN	_	6	nsubj	_	_
3	released	_	VBN	VBN	_	2	vmod	_	_
4	this	_	DT	DT	_	5	det	_	_
5	week	_	NN	NN	_	3	tmod	_	_
6	says	_	VBZ	VBZ	_	0	root	_	_
7	Iran	_	NNP	NNP	_	9	nsubj	_	_
8	has	_	VBZ	VBZ	_	9	aux	_	_
9	made	_	VBN	VBN	_	6	ccomp	_	_
10	significant	_	JJ	JJ	_	11	amod	_	_
11	progress	_	NN	NN	_	9	dobj	_	_
12	at	_	IN	IN	_	9	prep	_	_
13	Iran	_	NNP	NNP	_	18	poss	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	heavy-water	_	NN	NN	_	18	nn	_	_
16	research	_	NN	NN	_	18	nn	_	_
17	reactor	_	NN	NN	_	18	nn	_	_
18	facility	_	NN	NN	_	12	pobj	_	_
19	near	_	IN	IN	_	9	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	city	_	NN	NN	_	19	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	Arak	_	NNP	NNP	_	22	pobj	_	_
24	.	_	.	.	_	6	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / city, name, n3 / name)
(f / facility, location, n2 / near)
(f / facility, mod, r3 / reactor)
(n / name, op, "Iran")
(n2 / near, op, c2 / city)
(n3 / name, op, "Arak")
(p / progress-01, ARG1, c / country)
(p / progress-01, mod, s / significant)
(p / progress-01, topic, f / facility)
(r / report-01, ARG1, p / progress-01)
(r2 / release-01, ARG1, r / report-01)
(r2 / release-01, time, w / week)
(r3 / reactor, mod, w2 / water)
(r3 / reactor, purpose, r4 / research-01)
(w / week, mod, t / this)
(w2 / water, mod, h / heavy)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(2, 1, 0),Arak,(city :name (name :op "Arak")),false), Span(22,23,List(3),city,city,false), Span(20,21,List(4),near,near,false), Span(19,20,List(5),facility,facility,false), Span(18,19,List(6),reactor,reactor,false), Span(17,18,List(7),research,research-01,false), Span(16,17,List(8),water,water,false), Span(14,15,List(9),heavy,heavy,false), Span(10,11,List(10),progress,progress-01,false), Span(9,10,List(11),significant,significant,false), Span(5,6,List(12),says,say-01,false), Span(3,4,List(13),this,this,false), Span(2,3,List(14),released,release-01,false)),Map(2 -> "Arak", 5 -> facility, 12 -> say-01, 8 -> water, 7 -> research-01, 1 -> name, 4 -> near, 11 -> significant, 14 -> release-01, 6 -> reactor, 0 -> city, 9 -> heavy, 3 -> city, 10 -> progress-01, 13 -> this),Map(n -> name, w -> water, r3 -> release-01, h -> heavy, s2 -> say-01, t -> this, s -> significant, r2 -> research-01, p -> progress-01, r -> reactor, c -> city, f -> facility, c2 -> city, n2 -> near))),[Ljava.lang.String;@4e0ae11f,Annotation([Ljava.lang.String;@238d68ff,[Ljava.lang.String;@4b86805d,[Ljava.lang.String;@5852c06f),Annotation([Ljava.lang.String;@4149c063,[Ljava.lang.String;@9cb8225,[Ledu.cmu.lti.nlp.amr.Dependency;@76b07f29),Annotation([Ljava.lang.String;@38af9828,[Ljava.lang.String;@376a0d86,[Ljava.lang.String;@62656be4),Annotation([Ljava.lang.String;@17d919b6,[Ljava.lang.String;@53f3bdbd,[Ledu.cmu.lti.nlp.amr.Entity;@34129c78))
AMR:
(c / city, name, n / name)
(f / facility, location, c2 / city)
(f / facility, mod, r / reactor)
(f / facility, mod, r2 / research-01)
(n / name, op, "Arak")
(n2 / near, op, c2 / city)
(p / progress-01, ARG1, f / facility)
(p / progress-01, mod, s / significant)
(r2 / research-01, ARG1, w / water)
(r3 / release-01, ARG1, p / progress-01)
(s2 / say-01, ARG1, p / progress-01)
(s2 / say-01, ARG2, t / this)
(s2 / say-01, location, c / city)
(w / water, mod, h / heavy)

Decoded in 352,014 microseconds
Sentence: Iran's heavy-water research reactor near Arak could eventually produce plutonium that might be used in a nuclear weapon.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
Spans:
Span 8-9:  Arak => (city :name (name :op "Arak"))
Span 9-10:  could => possible
Span 10-11:  eventually => eventual
Span 2-3:  heavy => heavy
Span 7-8:  near => near
Span 19-20:  nuclear => nucleus
Span 12-13:  plutonium => plutonium
Span 11-12:  produce => produce-01
Span 6-7:  reactor => reactor
Span 5-6:  research => research-01
Span 16-17:  used => use-01
Span 4-5:  water => water
Span 20-21:  weapon => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  Arak => (city :name (name :op "Arak"))
Oracle Span 9-10:  could => possible
Oracle Span 10-11:  eventually => eventual
Oracle Span 2-3:  heavy => heavy
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 7-8:  near => near
Oracle Span 19-20:  nuclear => nucleus
Oracle Span 12-13:  plutonium => plutonium
Oracle Span 11-12:  produce => produce-01
Oracle Span 6-7:  reactor => reactor
Oracle Span 5-6:  research => research-01
Oracle Span 16-17:  used => use-01
Oracle Span 4-5:  water => water
Oracle Span 20-21:  weapon => weapon

Missing span: Iran => (country :name (name :op "Iran"))
Dependencies:
1	Iran	_	NNP	NNP	_	5	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	heavy-water	_	NN	NN	_	5	nn	_	_
4	research	_	NN	NN	_	5	nn	_	_
5	reactor	_	NN	NN	_	10	nsubj	_	_
6	near	_	IN	IN	_	5	prep	_	_
7	Arak	_	NNP	NNP	_	6	pobj	_	_
8	could	_	MD	MD	_	10	aux	_	_
9	eventually	_	RB	RB	_	10	advmod	_	_
10	produce	_	VB	VB	_	0	root	_	_
11	plutonium	_	NN	NN	_	10	dobj	_	_
12	that	_	WDT	WDT	_	15	nsubjpass	_	_
13	might	_	MD	MD	_	15	aux	_	_
14	be	_	VB	VB	_	15	auxpass	_	_
15	used	_	VBN	VBN	_	11	rcmod	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	a	_	DT	DT	_	19	det	_	_
18	nuclear	_	JJ	JJ	_	19	amod	_	_
19	weapon	_	NN	NN	_	16	pobj	_	_
20	.	_	.	.	_	10	punct	_	_

Oracle:
(c / city, name, n3 / name)
(c2 / country, name, n4 / name)
(n2 / near, op, c / city)
(n3 / name, op, "Arak")
(n4 / name, op, "Iran")
(p / possible, domain, p2 / produce-01)
(p / possible, mod, e / eventual)
(p2 / produce-01, ARG0, r / reactor)
(p2 / produce-01, ARG1, p3 / plutonium)
(r / reactor, location, n2 / near)
(r / reactor, mod, c2 / country)
(r / reactor, mod, w2 / water)
(r / reactor, purpose, r2 / research-01)
(u / use-01, ARG1, p3 / plutonium)
(u / use-01, ARG2, w / weapon)
(w / weapon, mod, n / nucleus)
(w2 / water, mod, h / heavy)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),weapon,weapon,false), Span(19,20,List(1),nuclear,nucleus,false), Span(16,17,List(2),used,use-01,false), Span(12,13,List(3),plutonium,plutonium,false), Span(11,12,List(4),produce,produce-01,false), Span(10,11,List(5),eventually,eventual,false), Span(9,10,List(6),could,possible,false), Span(8,9,List(9, 8, 7),Arak,(city :name (name :op "Arak")),false), Span(7,8,List(10),near,near,false), Span(6,7,List(11),reactor,reactor,false), Span(5,6,List(12),research,research-01,false), Span(4,5,List(13),water,water,false), Span(2,3,List(14),heavy,heavy,false)),Map(2 -> use-01, 5 -> eventual, 12 -> research-01, 8 -> name, 7 -> city, 1 -> nucleus, 4 -> produce-01, 11 -> reactor, 14 -> heavy, 6 -> possible, 0 -> weapon, 9 -> "Arak", 3 -> plutonium, 10 -> near, 13 -> water),Map(e -> eventual, w -> weapon, n -> nucleus, h -> heavy, p2 -> produce-01, p -> plutonium, r2 -> research-01, n3 -> near, w2 -> water, r -> reactor, c -> city, u -> use-01, p3 -> possible, n2 -> name))),[Ljava.lang.String;@7d61eb55,Annotation([Ljava.lang.String;@222a59e6,[Ljava.lang.String;@6c7a164b,[Ljava.lang.String;@4c2bb6e0),Annotation([Ljava.lang.String;@3e62d773,[Ljava.lang.String;@4ef74c30,[Ledu.cmu.lti.nlp.amr.Dependency;@7283d3eb),Annotation([Ljava.lang.String;@638ef7ed,[Ljava.lang.String;@4bff7da0,[Ljava.lang.String;@3f1d2e23),Annotation([Ljava.lang.String;@536dbea0,[Ljava.lang.String;@47c81abf,[Ledu.cmu.lti.nlp.amr.Entity;@776a6d9b))
AMR:
(c / city, name, n2 / name)
(n2 / name, op, "Arak")
(n3 / near, op, c / city)
(p2 / produce-01, ARG0, r / reactor)
(p2 / produce-01, ARG1, p / plutonium)
(p2 / produce-01, time, e / eventual)
(p3 / possible, domain, p2 / produce-01)
(r / reactor, location, n3 / near)
(r / reactor, mod, r2 / research-01)
(r2 / research-01, ARG1, w2 / water)
(u / use-01, ARG1, p / plutonium)
(u / use-01, ARG2, w / weapon)
(w / weapon, mod, n / nucleus)
(w2 / water, mod, h / heavy)

Decoded in 138,497 microseconds
Sentence: Satellite images published by the Institute for Science and International Security show construction at the heavy-water research reactor facility near the city of Arak has progressed significantly between 080200 and 081000.

NER Entity: (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
NER Entity: (country :name (name :op "Arak"))
mkDayMonthYear(080200,00,02,08)
mkDayMonthYear(081000,00,10,08)
mkDayMonthYear(081000,00,10,08)
mkDayMonthYear(080200,00,02,08)
NER Entity: (country :name (name :op "Arak"))
Spans:
Span 30-31:  080200 => (date-entity :day 0 :month 2 :year 08)
Span 32-33:  081000 => (date-entity :day 0 :month 10 :year 08)
Span 25-26:  Arak => (city :name (name :op "Arak"))
Span 23-24:  city => city
Span 12-13:  construction => construct-01
Span 20-21:  facility => facility
Span 15-16:  heavy => heavy
Span 1-2:  images => image
Span 5-11:  Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Span 21-22:  near => near
Span 27-28:  progressed => (thing :ARG4-of progress-01)
Span 2-3:  published => publish-01
Span 19-20:  reactor => reactor
Span 18-19:  research => research-01
Span 11-12:  show => show-01
Span 28-29:  significantly => significant
Span 17-18:  water => water

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 30-31:  080200 => (date-entity :year 2008 :month 2)
Oracle Span 32-33:  081000 => (date-entity :year 2008 :month 10)
Oracle Span 25-26:  Arak => (name :op "Arak")
Oracle Span 23-24:  city => city
Oracle Span 12-13:  construction => construct-01
Oracle Span 20-21:  facility => facility
Oracle Span 15-16:  heavy => heavy
Oracle Span 1-2:  images => image
Oracle Span 5-11:  Institute for Science and International Security => (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute"))
Oracle Span 21-22:  near => near
Oracle Span 27-28:  progressed => progress-01
Oracle Span 2-3:  published => publish-01
Oracle Span 19-20:  reactor => reactor
Oracle Span 18-19:  research => research-01
Oracle Span 0-1:  Satellite => satellite
Oracle Span 11-12:  show => show-01
Oracle Span 28-29:  significantly => significant
Oracle Span 17-18:  water => water

Incorrect span: 081000 => (date-entity :day 0 :month 10 :year 08)
Incorrect span: 080200 => (date-entity :day 0 :month 2 :year 08)
Incorrect span: progressed => (thing :ARG4-of progress-01)
Incorrect span: Arak => (city :name (name :op "Arak"))
Incorrect span: Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Missing span: Institute for Science and International Security => (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute"))
Missing span: Arak => (name :op "Arak")
Missing span: 080200 => (date-entity :year 2008 :month 2)
Missing span: 081000 => (date-entity :year 2008 :month 10)
Missing span: progressed => progress-01
Missing span: Satellite => satellite
Dependencies:
1	Satellite	_	NNP	NNP	_	2	nn	_	_
2	images	_	NNS	NNS	_	26	nsubj	_	_
3	published	_	VBN	VBN	_	2	vmod	_	_
4	by	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	19	det	_	_
6	Institute	_	NNP	NNP	_	19	dep	_	_
7	for	_	IN	IN	_	6	prep	_	_
8	Science	_	NNP	NNP	_	13	nn	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	International	_	NNP	NNP	_	8	conj	_	_
11	Security	_	NNP	NNP	_	13	nn	_	_
12	show	_	NN	NN	_	13	nn	_	_
13	construction	_	NN	NN	_	7	pobj	_	_
14	at	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	heavy-water	_	NN	NN	_	17	nn	_	_
17	research	_	NN	NN	_	14	pobj	_	_
18	reactor	_	NN	NN	_	19	nn	_	_
19	facility	_	NN	NN	_	4	pobj	_	_
20	near	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	city	_	NN	NN	_	20	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	Arak	_	NNP	NNP	_	23	pobj	_	_
25	has	_	VBZ	VBZ	_	26	aux	_	_
26	progressed	_	VBN	VBN	_	0	root	_	_
27	significantly	_	RB	RB	_	26	advmod	_	_
28	between	_	IN	IN	_	26	prep	_	_
29	080200	_	CD	CD	_	28	pobj	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	081000	_	CD	CD	_	29	conj	_	_
32	.	_	.	.	_	26	punct	_	_

Oracle:
(c / construct-01, ARG1, f / facility)
(c2 / city, name, n3 / name)
(d / date-entity, month, 2)
(d / date-entity, year, 2008)
(d2 / date-entity, month, 10)
(d2 / date-entity, year, 2008)
(f / facility, location, n2 / near)
(f / facility, mod, r2 / reactor)
(i / image, source, s2 / satellite)
(n / name, op, "Institute")
(n / name, op, "International")
(n / name, op, "Science")
(n / name, op, "Security")
(n / name, op, "and")
(n / name, op, "for")
(n2 / near, op, c2 / city)
(n3 / name, op, "Arak")
(o / organization, name, n / name)
(p / publish-01, ARG0, o / organization)
(p / publish-01, ARG1, i / image)
(p2 / progress-01, ARG1, c / construct-01)
(p2 / progress-01, mod, s3 / significant)
(r2 / reactor, mod, w / water)
(r2 / reactor, purpose, r3 / research-01)
(s / show-01, ARG0, i / image)
(s / show-01, ARG1, p2 / progress-01)
(w / water, mod, h / heavy)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(3, 2, 1, 0),081000,(date-entity :day 0 :month 10 :year 08),false), Span(30,31,List(7, 6, 5, 4),080200,(date-entity :day 0 :month 2 :year 08),false), Span(28,29,List(8),significantly,significant,false), Span(27,28,List(10, 9),progressed,(thing :ARG4-of progress-01),false), Span(25,26,List(13, 12, 11),Arak,(city :name (name :op "Arak")),false), Span(23,24,List(14),city,city,false), Span(21,22,List(15),near,near,false), Span(20,21,List(16),facility,facility,false), Span(19,20,List(17),reactor,reactor,false), Span(18,19,List(18),research,research-01,false), Span(17,18,List(19),water,water,false), Span(15,16,List(20),heavy,heavy,false), Span(12,13,List(21),construction,construct-01,false), Span(11,12,List(22),show,show-01,false), Span(5,11,List(30, 29, 28, 27, 26, 25, 24, 23),Institute for Science and International Security,(organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false), Span(2,3,List(31),published,publish-01,false), Span(1,2,List(32),images,image,false)),Map(30 -> "Security", 2 -> 10, 5 -> 0, 27 -> "Science", 12 -> name, 8 -> significant, 15 -> near, 21 -> construct-01, 18 -> research-01, 24 -> name, 7 -> 08, 1 -> 0, 17 -> reactor, 23 -> organization, 26 -> "for", 4 -> date-entity, 11 -> city, 32 -> image, 14 -> city, 29 -> "International", 20 -> heavy, 28 -> "and", 6 -> 2, 9 -> thing, 0 -> date-entity, 22 -> show-01, 16 -> facility, 19 -> water, 10 -> progress-01, 3 -> 08, 31 -> publish-01, 25 -> "Institute", 13 -> "Arak"),Map(n -> name, w -> water, h -> heavy, 2 -> 2, s2 -> show-01, t -> thing, 03 -> 0, p2 -> publish-01, s -> significant, d -> date-entity, 1 -> 10, r2 -> research-01, p -> progress-01, c3 -> construct-01, n3 -> name, d2 -> date-entity, 02 -> 08, i -> image, r -> reactor, c -> city, 0 -> 0, f -> facility, o -> organization, 04 -> 08, c2 -> city, n2 -> near))),[Ljava.lang.String;@21d03963,Annotation([Ljava.lang.String;@1f760b47,[Ljava.lang.String;@18ece7f4,[Ljava.lang.String;@3cce57c7),Annotation([Ljava.lang.String;@1cf56a1c,[Ljava.lang.String;@33f676f6,[Ledu.cmu.lti.nlp.amr.Dependency;@4c5ae43b),Annotation([Ljava.lang.String;@264f218,[Ljava.lang.String;@3576ddc2,[Ljava.lang.String;@35b74c5c),Annotation([Ljava.lang.String;@2e570ded,[Ljava.lang.String;@b86de0d,[Ledu.cmu.lti.nlp.amr.Entity;@81d9a72))
AMR:
(c / city, name, n / name)
(c3 / construct-01, ARG0, d / date-entity)
(c3 / construct-01, manner, s2 / show-01)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 02 / 08)
(d2 / date-entity, day, 03 / 0)
(d2 / date-entity, month, 2 / 2)
(d2 / date-entity, year, 04 / 08)
(f / facility, location, n2 / near)
(f / facility, mod, r / reactor)
(n / name, op, "Arak")
(n2 / near, op, c2 / city)
(n3 / name, op, "Institute")
(n3 / name, op, "International")
(n3 / name, op, "Science")
(n3 / name, op, "Security")
(n3 / name, op, "and")
(n3 / name, op, "for")
(o / organization, name, n3 / name)
(p / progress-01, ARG0, c / city)
(p / progress-01, ARG1, i / image)
(p / progress-01, ARG4, t / thing)
(p / progress-01, degree, s / significant)
(p2 / publish-01, ARG1, i / image)
(r / reactor, topic, r2 / research-01)
(r2 / research-01, ARG1, w / water)
(s2 / show-01, ARG0, o / organization)
(s2 / show-01, ARG1, r2 / research-01)
(t / thing, op, s2 / show-01)
(t / thing, time, d2 / date-entity)
(w / water, mod, h / heavy)

Decoded in 1,002,480 microseconds
Sentence: David Albright stated that Iran's heavy-water research reactor near Arak has evaded the international security community's notice.

NER Entity: (person :name (name :op "David" :op "Albright"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
Spans:
Span 12-13:  Arak => (city :name (name :op "Arak"))
Span 18-19:  community => community
Span 0-2:  David Albright => (person :name (name :op "David" :op "Albright"))
Span 6-7:  heavy => heavy
Span 11-12:  near => near
Span 20-21:  notice => notice
Span 10-11:  reactor => reactor
Span 9-10:  research => research-01
Span 8-9:  water => water

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 12-13:  Arak => (city :name (name :op "Arak"))
Oracle Span 18-19:  community => community
Oracle Span 0-2:  David Albright => (person :name (name :op "Albright" :op "David"))
Oracle Span 14-15:  evaded => evade-01
Oracle Span 6-7:  heavy => heavy
Oracle Span 16-17:  international => international
Oracle Span 4-5:  Iran => (country :name (name :op "Iran"))
Oracle Span 11-12:  near => near
Oracle Span 20-21:  notice => notice-01
Oracle Span 10-11:  reactor => reactor
Oracle Span 9-10:  research => research-01
Oracle Span 17-18:  security => security
Oracle Span 2-3:  stated => state-01
Oracle Span 8-9:  water => water

Incorrect span: notice => notice
Incorrect span: David Albright => (person :name (name :op "David" :op "Albright"))
Missing span: David Albright => (person :name (name :op "Albright" :op "David"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: evaded => evade-01
Missing span: notice => notice-01
Missing span: security => security
Missing span: international => international
Dependencies:
1	David	_	NNP	NNP	_	2	nn	_	_
2	Albright	_	NNP	NNP	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	13	mark	_	_
5	Iran	_	NNP	NNP	_	9	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	heavy-water	_	NN	NN	_	9	nn	_	_
8	research	_	NN	NN	_	9	nn	_	_
9	reactor	_	NN	NN	_	13	nsubj	_	_
10	near	_	IN	IN	_	9	prep	_	_
11	Arak	_	NNP	NNP	_	10	pobj	_	_
12	has	_	VBZ	VBZ	_	13	aux	_	_
13	evaded	_	VBN	VBN	_	3	ccomp	_	_
14	the	_	DT	DT	_	17	det	_	_
15	international	_	JJ	JJ	_	17	amod	_	_
16	security	_	NN	NN	_	17	nn	_	_
17	community	_	NN	NN	_	19	poss	_	_
18	's	_	POS	POS	_	17	possessive	_	_
19	notice	_	NN	NN	_	13	dobj	_	_
20	.	_	.	.	_	3	punct	_	_

Oracle:
(c / city, name, n3 / name)
(c2 / community, mod, s2 / security)
(c3 / country, name, n5 / name)
(e / evade-01, ARG0, r / reactor)
(e / evade-01, ARG1, n4 / notice-01)
(n / name, op, "Albright")
(n / name, op, "David")
(n2 / near, op, c / city)
(n3 / name, op, "Arak")
(n4 / notice-01, ARG0, c2 / community)
(n5 / name, op, "Iran")
(p / person, name, n / name)
(r / reactor, location, n2 / near)
(r / reactor, mod, c3 / country)
(r / reactor, mod, w / water)
(r / reactor, purpose, r2 / research-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, e / evade-01)
(s2 / security, mod, i / international)
(w / water, mod, h / heavy)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),notice,notice,false), Span(18,19,List(1),community,community,false), Span(12,13,List(4, 3, 2),Arak,(city :name (name :op "Arak")),false), Span(11,12,List(5),near,near,false), Span(10,11,List(6),reactor,reactor,false), Span(9,10,List(7),research,research-01,false), Span(8,9,List(8),water,water,false), Span(6,7,List(9),heavy,heavy,false), Span(0,2,List(13, 12, 11, 10),David Albright,(person :name (name :op "David" :op "Albright")),false)),Map(2 -> city, 5 -> near, 12 -> "David", 8 -> water, 7 -> research-01, 1 -> community, 4 -> "Arak", 11 -> name, 6 -> reactor, 0 -> notice, 9 -> heavy, 3 -> name, 10 -> person, 13 -> "Albright"),Map(w -> water, n -> notice, h -> heavy, n4 -> name, p -> person, r2 -> research-01, n3 -> near, r -> reactor, c -> community, n2 -> name, c2 -> city))),[Ljava.lang.String;@747f281,Annotation([Ljava.lang.String;@1169afe1,[Ljava.lang.String;@2ca26d77,[Ljava.lang.String;@4808bc9b),Annotation([Ljava.lang.String;@70e38ce1,[Ljava.lang.String;@2ca923bb,[Ledu.cmu.lti.nlp.amr.Dependency;@13df2a8c),Annotation([Ljava.lang.String;@1ebea008,[Ljava.lang.String;@72d6b3ba,[Ljava.lang.String;@1787f2a0),Annotation([Ljava.lang.String;@7de62196,[Ljava.lang.String;@163370c2,[Ledu.cmu.lti.nlp.amr.Entity;@51bf5add))
AMR:
(c / community, poss, p / person)
(c2 / city, name, n2 / name)
(n / notice, poss, c / community)
(n2 / name, op, "Arak")
(n3 / near, op, c2 / city)
(n4 / name, op, "Albright")
(n4 / name, op, "David")
(p / person, name, n4 / name)
(r / reactor, location, n3 / near)
(r / reactor, mod, r2 / research-01)
(r2 / research-01, ARG0, c / community)
(r2 / research-01, ARG1, w / water)
(w / water, mod, h / heavy)

Decoded in 154,820 microseconds
Sentence: David Albright stated that Iran's heavy-water research reactor near Arak is making significant progress according to the satellite images and that in a year and a half the heavy-water research reactor near Arak has progressed from building frames to a largely finished facility.

NER Entity: (person :name (name :op "David" :op "Albright"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
Spans:
Span 37-38:  Arak => (city :name (name :op "Arak"))
Span 12-13:  Arak => (city :name (name :op "Arak"))
Span 0-2:  David Albright => (person :name (name :op "David" :op "Albright"))
Span 47-48:  facility => facility
Span 46-47:  finished => finish
Span 31-32:  heavy => heavy
Span 6-7:  heavy => heavy
Span 21-22:  images => image
Span 45-46:  largely => large
Span 36-37:  near => near
Span 11-12:  near => near
Span 16-17:  progress => progress-01
Span 39-40:  progressed => (thing :ARG4-of progress-01)
Span 35-36:  reactor => reactor
Span 10-11:  reactor => reactor
Span 34-35:  research => research-01
Span 9-10:  research => research-01
Span 20-21:  satellite => satellite
Span 15-16:  significant => significant
Span 33-34:  water => water
Span 8-9:  water => water

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 22-23:  and => and
Oracle Span 12-13:  Arak => (city :name (name :op "Arak"))
Oracle Span 41-42:  building => building
Oracle Span 0-2:  David Albright => (person :name (name :op "Albright" :op "David"))
Oracle Span 47-48:  facility => facility
Oracle Span 46-47:  finished => finish-01
Oracle Span 42-43:  frames => frame
Oracle Span 6-7:  heavy => heavy
Oracle Span 21-22:  images => image
Oracle Span 4-5:  Iran => (country :name (name :op "Iran"))
Oracle Span 45-46:  largely => large
Oracle Span 11-12:  near => near
Oracle Span 16-17:  progress => progress-01
Oracle Span 39-40:  progressed => progress-01
Oracle Span 10-11:  reactor => reactor
Oracle Span 9-10:  research => research-01
Oracle Span 20-21:  satellite => satellite
Oracle Span 15-16:  significant => significant
Oracle Span 2-3:  stated => state-01
Oracle Span 8-9:  water => water
Oracle Span 26-27:  year => (temporal-quantity :unit year)

Incorrect span: finished => finish
Incorrect span: progressed => (thing :ARG4-of progress-01)
Extra span: Arak => (city :name (name :op "Arak"))
Extra span: near => near
Extra span: reactor => reactor
Extra span: research => research-01
Extra span: water => water
Extra span: heavy => heavy
Incorrect span: David Albright => (person :name (name :op "David" :op "Albright"))
Missing span: David Albright => (person :name (name :op "Albright" :op "David"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: and => and
Missing span: year => (temporal-quantity :unit year)
Missing span: finished => finish-01
Missing span: frames => frame
Missing span: building => building
Missing span: progressed => progress-01
Dependencies:
1	David	_	NNP	NNP	_	2	nn	_	_
2	Albright	_	NNP	NNP	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	13	mark	_	_
5	Iran	_	NNP	NNP	_	9	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	heavy-water	_	NN	NN	_	9	nn	_	_
8	research	_	NN	NN	_	9	nn	_	_
9	reactor	_	NN	NN	_	13	nsubj	_	_
10	near	_	IN	IN	_	9	prep	_	_
11	Arak	_	NNP	NNP	_	10	pobj	_	_
12	is	_	VBZ	VBZ	_	13	aux	_	_
13	making	_	VBG	VBG	_	3	ccomp	_	_
14	significant	_	JJ	JJ	_	15	amod	_	_
15	progress	_	NN	NN	_	13	dobj	_	_
16	according	_	VBG	VBG	_	13	prep	_	_
17	to	_	TO	TO	_	16	pcomp	_	_
18	the	_	DT	DT	_	20	det	_	_
19	satellite	_	NN	NN	_	20	nn	_	_
20	images	_	NNS	NNS	_	17	pobj	_	_
21	and	_	CC	CC	_	13	cc	_	_
22	that	_	IN	IN	_	36	mark	_	_
23	in	_	IN	IN	_	36	prep	_	_
24	a	_	DT	DT	_	25	det	_	_
25	year	_	NN	NN	_	23	pobj	_	_
26	and	_	CC	CC	_	25	cc	_	_
27	a	_	DT	DT	_	28	det	_	_
28	half	_	NN	NN	_	25	conj	_	_
29	the	_	DT	DT	_	32	det	_	_
30	heavy-water	_	NN	NN	_	32	nn	_	_
31	research	_	NN	NN	_	32	nn	_	_
32	reactor	_	NN	NN	_	36	nsubj	_	_
33	near	_	IN	IN	_	32	prep	_	_
34	Arak	_	NNP	NNP	_	33	pobj	_	_
35	has	_	VBZ	VBZ	_	36	aux	_	_
36	progressed	_	VBN	VBN	_	13	conj	_	_
37	from	_	IN	IN	_	36	prep	_	_
38	building	_	NN	NN	_	39	nn	_	_
39	frames	_	NNS	NNS	_	37	pobj	_	_
40	to	_	TO	TO	_	36	prep	_	_
41	a	_	DT	DT	_	44	det	_	_
42	largely	_	RB	RB	_	43	advmod	_	_
43	finished	_	VBN	VBN	_	44	amod	_	_
44	facility	_	NN	NN	_	40	pobj	_	_
45	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, p3 / progress-01)
(c / country, name, n2 / name)
(c2 / city, name, n4 / name)
(f / frame, mod, b / building)
(f3 / finish-01, ARG1, f2 / facility)
(f3 / finish-01, degree, l / large)
(i2 / image, source, s3 / satellite)
(n / name, op, "Albright")
(n / name, op, "David")
(n2 / name, op, "Iran")
(n3 / near, op, c2 / city)
(n4 / name, op, "Arak")
(p / person, name, n / name)
(p2 / progress-01, ARG1, r / reactor)
(p2 / progress-01, mod, s4 / significant)
(p3 / progress-01, ARG1, r / reactor)
(p3 / progress-01, ARG3, f / frame)
(p3 / progress-01, ARG4, f2 / facility)
(r / reactor, location, n3 / near)
(r / reactor, mod, c / country)
(r / reactor, mod, w / water)
(r / reactor, purpose, r2 / research-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(t / temporal-quantity, unit, y / year)
(w / water, mod, h / heavy)

Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),facility,facility,false), Span(46,47,List(1),finished,finish,false), Span(45,46,List(2),largely,large,false), Span(39,40,List(4, 3),progressed,(thing :ARG4-of progress-01),false), Span(37,38,List(7, 6, 5),Arak,(city :name (name :op "Arak")),false), Span(36,37,List(8),near,near,false), Span(35,36,List(9),reactor,reactor,false), Span(34,35,List(10),research,research-01,false), Span(33,34,List(11),water,water,false), Span(31,32,List(12),heavy,heavy,false), Span(21,22,List(13),images,image,false), Span(20,21,List(14),satellite,satellite,false), Span(16,17,List(15),progress,progress-01,false), Span(15,16,List(16),significant,significant,false), Span(12,13,List(19, 18, 17),Arak,(city :name (name :op "Arak")),false), Span(11,12,List(20),near,near,false), Span(10,11,List(21),reactor,reactor,false), Span(9,10,List(22),research,research-01,false), Span(8,9,List(23),water,water,false), Span(6,7,List(24),heavy,heavy,false), Span(0,2,List(28, 27, 26, 25),David Albright,(person :name (name :op "David" :op "Albright")),false)),Map(2 -> large, 5 -> city, 27 -> "David", 12 -> heavy, 8 -> near, 15 -> progress-01, 21 -> reactor, 18 -> name, 24 -> heavy, 7 -> "Arak", 1 -> finish, 17 -> city, 23 -> water, 26 -> name, 4 -> progress-01, 11 -> water, 14 -> satellite, 20 -> near, 28 -> "Albright", 6 -> name, 9 -> reactor, 0 -> facility, 22 -> research-01, 16 -> significant, 19 -> "Arak", 10 -> research-01, 3 -> thing, 25 -> person, 13 -> image),Map(w -> water, n -> name, h -> heavy, r3 -> reactor, s2 -> significant, h2 -> heavy, t -> thing, p2 -> progress-01, n4 -> near, s -> satellite, r2 -> research-01, p -> progress-01, n3 -> name, w2 -> water, i -> image, r -> reactor, r4 -> research-01, c -> city, f2 -> finish, l -> large, f -> facility, p3 -> person, n2 -> near, c2 -> city, n5 -> name))),[Ljava.lang.String;@7905a0b8,Annotation([Ljava.lang.String;@35a3d49f,[Ljava.lang.String;@389b0789,[Ljava.lang.String;@13d9cbf5),Annotation([Ljava.lang.String;@478db956,[Ljava.lang.String;@6ca18a14,[Ledu.cmu.lti.nlp.amr.Dependency;@c667f46),Annotation([Ljava.lang.String;@51bd8b5c,[Ljava.lang.String;@7b50df34,[Ljava.lang.String;@1b410b60),Annotation([Ljava.lang.String;@2462cb01,[Ljava.lang.String;@19b843ba,[Ledu.cmu.lti.nlp.amr.Entity;@64ec96c6))
AMR:
(c / city, name, n / name)
(c2 / city, name, n3 / name)
(f / facility, mod, f2 / finish)
(f / facility, poss, r / reactor)
(f2 / finish, degree, l / large)
(i / image, location, r / reactor)
(i / image, mod, s / satellite)
(n / name, op, "Arak")
(n2 / near, op, c / city)
(n3 / name, op, "Arak")
(n4 / near, op, c2 / city)
(n5 / name, op, "Albright")
(n5 / name, op, "David")
(p / progress-01, ARG0, r3 / reactor)
(p / progress-01, ARG1, r / reactor)
(p / progress-01, ARG2, p3 / person)
(p / progress-01, ARG4, t / thing)
(p2 / progress-01, ARG1, r3 / reactor)
(p2 / progress-01, mod, s2 / significant)
(p3 / person, name, n5 / name)
(r / reactor, location, n2 / near)
(r / reactor, mod, r2 / research-01)
(r2 / research-01, ARG1, w / water)
(r3 / reactor, location, n4 / near)
(r3 / reactor, mod, r4 / research-01)
(r4 / research-01, ARG1, w2 / water)
(w / water, mod, h / heavy)
(w2 / water, mod, h2 / heavy)

Decoded in 982,092 microseconds
Sentence: David Albright is a former arms inspector and Director of the Institute for Science and International Security that is based in Washington, D.C..

NER Entity: (person :name (name :op "David" :op "Albright"))
NER Entity: (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
NER Entity: (country :name (name :op "Washington"))
NER Entity: (country :name (name :op "D.C."))
Spans:
Span 0-2:  David Albright => (person :name (name :op "David" :op "Albright"))
Span 4-5:  former => former
Span 11-17:  Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 5-6:  arms => arm
Oracle Span 19-20:  based => base-01
Oracle Span 0-2:  David Albright => (person :name (name :op "Albright" :op "David"))
Oracle Span 8-9:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 4-5:  former => former
Oracle Span 6-7:  inspector => inspect-01
Oracle Span 11-17:  Institute for Science and International Security => (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute"))
Oracle Span 21-24:  Washington , D.C. => (city :name (name :op "D.C." :op "Washington"))

Incorrect span: Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Incorrect span: David Albright => (person :name (name :op "David" :op "Albright"))
Missing span: David Albright => (person :name (name :op "Albright" :op "David"))
Missing span: Institute for Science and International Security => (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute"))
Missing span: Washington , D.C. => (city :name (name :op "D.C." :op "Washington"))
Missing span: and => and
Missing span: based => base-01
Missing span: Director => (have-org-role-91 :ARG2 director)
Missing span: arms => arm
Missing span: inspector => inspect-01
Dependencies:
1	David	_	NNP	NNP	_	2	nn	_	_
2	Albright	_	NNP	NNP	_	7	nsubj	_	_
3	is	_	VBZ	VBZ	_	7	cop	_	_
4	a	_	DT	DT	_	7	det	_	_
5	former	_	JJ	JJ	_	7	amod	_	_
6	arms	_	NNS	NNS	_	7	nn	_	_
7	inspector	_	NN	NN	_	0	root	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	Director	_	NNP	NNP	_	7	conj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	Institute	_	NNP	NNP	_	10	pobj	_	_
13	for	_	IN	IN	_	12	prep	_	_
14	Science	_	NNP	NNP	_	17	nn	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	International	_	NNP	NNP	_	14	conj	_	_
17	Security	_	NNP	NNP	_	13	pobj	_	_
18	that	_	WDT	WDT	_	20	nsubjpass	_	_
19	is	_	VBZ	VBZ	_	20	auxpass	_	_
20	based	_	VBN	VBN	_	9	rcmod	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	Washington	_	NNP	NNP	_	24	nn	_	_
23	,	_	,	,	_	24	punct	_	_
24	D.C.	_	NNP	NNP	_	21	pobj	_	_
25	.	_	.	.	_	7	punct	_	_

Oracle:
(a2 / and, op, h / have-org-role-91)
(b / base-01, ARG1, o / organization)
(b / base-01, location, c / city)
(c / city, name, n3 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, d / director)
(i / inspect-01, ARG0, p / person)
(i / inspect-01, ARG1, a / arm)
(i / inspect-01, mod, f / former)
(n / name, op, "Albright")
(n / name, op, "David")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Science")
(n2 / name, op, "Security")
(n2 / name, op, "and")
(n2 / name, op, "for")
(n3 / name, op, "D.C.")
(n3 / name, op, "Washington")
(o / organization, name, n2 / name)
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(11,17,List(7, 6, 5, 4, 3, 2, 1, 0),Institute for Science and International Security,(organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false), Span(4,5,List(8),former,former,false), Span(0,2,List(12, 11, 10, 9),David Albright,(person :name (name :op "David" :op "Albright")),false)),Map(2 -> "Institute", 5 -> "and", 12 -> "Albright", 8 -> former, 7 -> "Security", 1 -> name, 4 -> "Science", 11 -> "David", 6 -> "International", 0 -> organization, 9 -> person, 3 -> "for", 10 -> name),Map(n -> name, p -> person, f -> former, o -> organization, n2 -> name))),[Ljava.lang.String;@77659b30,Annotation([Ljava.lang.String;@456d6c1e,[Ljava.lang.String;@1e13529a,[Ljava.lang.String;@1ec9bd38),Annotation([Ljava.lang.String;@452e19ca,[Ljava.lang.String;@6b0d80ed,[Ledu.cmu.lti.nlp.amr.Dependency;@6f8e8894),Annotation([Ljava.lang.String;@3cfdd820,[Ljava.lang.String;@928763c,[Ljava.lang.String;@e25951c),Annotation([Ljava.lang.String;@15f47664,[Ljava.lang.String;@471a9022,[Ledu.cmu.lti.nlp.amr.Entity;@dc9876b))
AMR:
(n / name, op, "Institute")
(n / name, op, "International")
(n / name, op, "Science")
(n / name, op, "Security")
(n / name, op, "and")
(n / name, op, "for")
(n2 / name, op, "Albright")
(n2 / name, op, "David")
(o / organization, name, n / name)
(p / person, mod, f / former)
(p / person, name, n2 / name)
(p / person, poss, o / organization)

Decoded in 81,232 microseconds
Sentence: Iran stated that Iran is pursuing nuclear technology to produce energy and conduct research.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 12-13:  conduct => conduct-01
Span 10-11:  energy => energy
Span 6-7:  nuclear => nucleus
Span 9-10:  produce => produce-01
Span 5-6:  pursuing => pursue-01
Span 13-14:  research => research-01
Span 7-8:  technology => technology

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 12-13:  conduct => conduct-01
Oracle Span 10-11:  energy => energy
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 6-7:  nuclear => nucleus
Oracle Span 9-10:  produce => produce-01
Oracle Span 5-6:  pursuing => pursue-01
Oracle Span 13-14:  research => research-01
Oracle Span 1-2:  stated => state-01
Oracle Span 7-8:  technology => technology

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: and => and
Dependencies:
1	Iran	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	Iran	_	NNP	NNP	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	aux	_	_
6	pursuing	_	VBG	VBG	_	2	ccomp	_	_
7	nuclear	_	JJ	JJ	_	8	amod	_	_
8	technology	_	NN	NN	_	6	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	produce	_	VB	VB	_	6	vmod	_	_
11	energy	_	NN	NN	_	14	nn	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	conduct	_	NN	NN	_	11	conj	_	_
14	research	_	NN	NN	_	10	dobj	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(a2 / and, op, c2 / conduct-01)
(a2 / and, op, p2 / produce-01)
(c / country, name, n / name)
(c2 / conduct-01, ARG0, c / country)
(c2 / conduct-01, ARG1, r / research-01)
(n / name, op, "Iran")
(p / pursue-01, ARG0, c / country)
(p / pursue-01, ARG1, t / technology)
(p / pursue-01, purpose, a2 / and)
(p2 / produce-01, ARG0, c / country)
(p2 / produce-01, ARG1, e / energy)
(s / state-01, ARG0, c / country)
(s / state-01, ARG1, p / pursue-01)
(t / technology, mod, n2 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),research,research-01,false), Span(12,13,List(1),conduct,conduct-01,false), Span(10,11,List(2),energy,energy,false), Span(9,10,List(3),produce,produce-01,false), Span(7,8,List(4),technology,technology,false), Span(6,7,List(5),nuclear,nucleus,false), Span(5,6,List(6),pursuing,pursue-01,false)),Map(2 -> energy, 5 -> nucleus, 1 -> conduct-01, 4 -> technology, 6 -> pursue-01, 0 -> research-01, 3 -> produce-01),Map(n -> nucleus, e -> energy, t -> technology, p2 -> pursue-01, p -> produce-01, r -> research-01, c -> conduct-01))),[Ljava.lang.String;@2f666ebb,Annotation([Ljava.lang.String;@19976a65,[Ljava.lang.String;@a1f72f5,[Ljava.lang.String;@4b2c5e02),Annotation([Ljava.lang.String;@57a3e26a,[Ljava.lang.String;@75c56eb9,[Ledu.cmu.lti.nlp.amr.Dependency;@4bc222e),Annotation([Ljava.lang.String;@2dc9b0f5,[Ljava.lang.String;@6531a794,[Ljava.lang.String;@3b5fad2d),Annotation([Ljava.lang.String;@5e17553a,[Ljava.lang.String;@3eb91815,[Ledu.cmu.lti.nlp.amr.Entity;@56dc1551))
AMR:
(c / conduct-01, ARG1, r / research-01)
(p / produce-01, ARG1, e / energy)
(p2 / pursue-01, ARG1, t / technology)
(r / research-01, ARG1, t / technology)
(t / technology, mod, n / nucleus)
(t / technology, purpose, p / produce-01)

Decoded in 116,564 microseconds
Sentence: The United States and its western allies suspect that Iran's efforts to produce is a precursor to creating a nuclear-weapons infrastructure.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 18-19:  creating => create-01
Span 11-12:  efforts => effort
Span 23-24:  infrastructure => infrastructure
Span 20-21:  nuclear => nucleus
Span 16-17:  precursor => precursor
Span 13-14:  produce => produce-01
Span 7-8:  suspect => suspect-01
Span 1-3:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 6-7:  allies => ally-01
Oracle Span 3-4:  and => and
Oracle Span 18-19:  creating => create-01
Oracle Span 11-12:  efforts => effort
Oracle Span 23-24:  infrastructure => infrastructure
Oracle Span 9-10:  Iran => (country :name (name :op "Iran"))
Oracle Span 20-21:  nuclear => nucleus
Oracle Span 16-17:  precursor => precede-01
Oracle Span 13-14:  produce => produce-01
Oracle Span 7-8:  suspect => suspect-01
Oracle Span 1-3:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 22-23:  weapons => weapon
Oracle Span 5-6:  western => (world-region :name (name :op "West"))

Incorrect span: precursor => precursor
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: western => (world-region :name (name :op "West"))
Missing span: weapons => weapon
Missing span: and => and
Missing span: allies => ally-01
Missing span: precursor => precede-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	United	_	NNP	NNP	_	3	nn	_	_
3	States	_	NNPS	NNPS	_	8	nsubj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	its	_	PRP$	PRP$	_	7	poss	_	_
6	western	_	JJ	JJ	_	7	amod	_	_
7	allies	_	NNS	NNS	_	3	conj	_	_
8	suspect	_	VBP	VBP	_	0	root	_	_
9	that	_	IN	IN	_	17	mark	_	_
10	Iran	_	NNP	NNP	_	12	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	efforts	_	NNS	NNS	_	17	nsubj	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	produce	_	VB	VB	_	12	vmod	_	_
15	is	_	VBZ	VBZ	_	17	cop	_	_
16	a	_	DT	DT	_	17	det	_	_
17	precursor	_	NN	NN	_	8	ccomp	_	_
18	to	_	TO	TO	_	17	prep	_	_
19	creating	_	VBG	VBG	_	18	pcomp	_	_
20	a	_	DT	DT	_	22	det	_	_
21	nuclear-weapons	_	JJ	JJ	_	22	amod	_	_
22	infrastructure	_	NN	NN	_	19	dobj	_	_
23	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, c / country)
(a2 / ally-01, ARG2, c / country)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / create-01, ARG0, c2 / country)
(c3 / create-01, ARG1, i / infrastructure)
(e / effort, poss, c2 / country)
(e / effort, purpose, p / produce-01)
(i / infrastructure, mod, w2 / weapon)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "West")
(n3 / name, op, "Iran")
(p / produce-01, ARG0, c2 / country)
(p3 / precede-01, ARG0, e / effort)
(p3 / precede-01, ARG1, c3 / create-01)
(s / suspect-01, ARG0, a / and)
(s / suspect-01, ARG1, p3 / precede-01)
(w / world-region, name, n2 / name)
(w2 / weapon, mod, n4 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),infrastructure,infrastructure,false), Span(20,21,List(1),nuclear,nucleus,false), Span(18,19,List(2),creating,create-01,false), Span(16,17,List(3),precursor,precursor,false), Span(13,14,List(4),produce,produce-01,false), Span(11,12,List(5),efforts,effort,false), Span(7,8,List(6),suspect,suspect-01,false), Span(1,3,List(10, 9, 8, 7),United States,(country :name (name :op "United" :op "States")),false)),Map(2 -> create-01, 5 -> effort, 8 -> name, 7 -> country, 1 -> nucleus, 4 -> produce-01, 6 -> suspect-01, 9 -> "United", 0 -> infrastructure, 10 -> "States", 3 -> precursor),Map(e -> effort, n -> nucleus, p2 -> produce-01, s -> suspect-01, p -> precursor, i -> infrastructure, c -> create-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@102cec62,Annotation([Ljava.lang.String;@74f6c5d8,[Ljava.lang.String;@27912e3,[Ljava.lang.String;@34b9f960),Annotation([Ljava.lang.String;@43015c69,[Ljava.lang.String;@19b89d4,[Ledu.cmu.lti.nlp.amr.Dependency;@4bbf6d0e),Annotation([Ljava.lang.String;@30b6ffe0,[Ljava.lang.String;@791d1f8b,[Ljava.lang.String;@2415fc55),Annotation([Ljava.lang.String;@14f232c4,[Ljava.lang.String;@13bc8645,[Ledu.cmu.lti.nlp.amr.Entity;@24c22fe))
AMR:
(c / create-01, ARG1, i / infrastructure)
(c2 / country, name, n2 / name)
(e / effort, purpose, p2 / produce-01)
(i / infrastructure, mod, n / nucleus)
(n2 / name, op, "States")
(n2 / name, op, "United")
(p / precursor, purpose, c / create-01)
(p2 / produce-01, ARG1, p / precursor)
(s / suspect-01, ARG1, p / precursor)
(s / suspect-01, ARG2, c2 / country)

Decoded in 182,071 microseconds
Sentence: Low-grade uranium production is legal under international arms-control regulations.

Spans:
Span 11-12:  control => control-01
Span 4-5:  production => produce-01
Span 12-13:  regulations => regulate-01
Span 3-4:  uranium => uranium

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 9-10:  arms => arm
Oracle Span 11-12:  control => control-01
Oracle Span 2-3:  grade => grade
Oracle Span 8-9:  international => international
Oracle Span 0-1:  Low => low
Oracle Span 4-5:  production => produce-01
Oracle Span 12-13:  regulations => regulate-01
Oracle Span 3-4:  uranium => uranium

Missing span: arms => arm
Missing span: international => international
Missing span: grade => grade
Missing span: Low => low
Dependencies:
1	Low-grade	_	JJ	JJ	_	3	amod	_	_
2	uranium	_	NN	NN	_	3	nn	_	_
3	production	_	NN	NN	_	5	nsubj	_	_
4	is	_	VBZ	VBZ	_	5	cop	_	_
5	legal	_	JJ	JJ	_	0	root	_	_
6	under	_	IN	IN	_	5	prep	_	_
7	international	_	JJ	JJ	_	9	amod	_	_
8	arms-control	_	NN	NN	_	9	nn	_	_
9	regulations	_	NNS	NNS	_	6	pobj	_	_
10	.	_	.	.	_	5	punct	_	_

Oracle:
(c / control-01, ARG1, a / arm)
(g / grade, mod, l / low)
(p / produce-01, ARG1, u / uranium)
(r / regulate-01, ARG1, c / control-01)
(r / regulate-01, mod, i / international)
(u / uranium, mod, g / grade)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),regulations,regulate-01,false), Span(11,12,List(1),control,control-01,false), Span(4,5,List(2),production,produce-01,false), Span(3,4,List(3),uranium,uranium,false)),Map(2 -> produce-01, 1 -> control-01, 0 -> regulate-01, 3 -> uranium),Map(p -> produce-01, r -> regulate-01, u -> uranium, c -> control-01))),[Ljava.lang.String;@93081b6,Annotation([Ljava.lang.String;@cd1e646,[Ljava.lang.String;@7ba8c737,[Ljava.lang.String;@1890516e),Annotation([Ljava.lang.String;@15a04efb,[Ljava.lang.String;@16c069df,[Ledu.cmu.lti.nlp.amr.Dependency;@2bec854f),Annotation([Ljava.lang.String;@31edaa7d,[Ljava.lang.String;@26adfd2d,[Ljava.lang.String;@3336e6b6),Annotation([Ljava.lang.String;@7c3fdb62,[Ljava.lang.String;@205d38da,[Ledu.cmu.lti.nlp.amr.Entity;@6950ed69))
AMR:
(c / control-01, ARG1, p / produce-01)
(p / produce-01, ARG1, u / uranium)
(r / regulate-01, ARG1, c / control-01)

Decoded in 30,466 microseconds
Sentence: The latest developments in Iran's nuclear technology development show the complex diplomatic and technical challenges facing the incoming foreign policy team of United States President-elect Barack Obama when it takes on the task of stopping Iran from mastering technology that could be used to manufacture and deliver nuclear weapons.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "Barack" :op "Obama"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 26-28:  - elect => (person :name (name :op "Barack" :op "Obama"))
Span 28-30:  Barack Obama => (person :name (name :op "Obama" :op "Barack"))
Span 15-16:  challenges => (thing :ARG2-of challenge-01)
Span 11-12:  complex => complex
Span 43-44:  could => possible
Span 49-50:  deliver => deliver-01
Span 8-9:  development => develop-02
Span 12-13:  diplomatic => diplomacy
Span 16-17:  facing => face-01
Span 18-19:  incoming => incoming
Span 1-2:  latest => (late :degree most)
Span 47-48:  manufacture => manufacture-01
Span 50-51:  nuclear => nucleus
Span 6-7:  nuclear => nucleus
Span 20-21:  policy => policy
Span 25-26:  President => (have-org-role-91 :ARG2 president)
Span 9-10:  show => show-01
Span 37-38:  stopping => stop-01
Span 32-33:  takes => take-01
Span 35-36:  task => task
Span 21-22:  team => team
Span 14-15:  technical => technical
Span 41-42:  technology => technology
Span 7-8:  technology => technology
Span 23-25:  United States => (country :name (name :op "United" :op "States"))
Span 45-46:  used => use-01

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 28-30:  Barack Obama => (person :name (name :op "Obama" :op "Barack"))
Oracle Span 15-16:  challenges => challenge-01
Oracle Span 11-12:  complex => complex
Oracle Span 43-44:  could => possible
Oracle Span 49-50:  deliver => deliver-01
Oracle Span 2-3:  developments => develop-02
Oracle Span 12-13:  diplomatic => diplomacy
Oracle Span 27-28:  elect => elect-01
Oracle Span 16-17:  facing => face-01
Oracle Span 19-20:  foreign => foreign
Oracle Span 18-19:  incoming => incoming
Oracle Span 4-5:  Iran => (country :name (name :op "Iran"))
Oracle Span 1-2:  latest => (late :degree most)
Oracle Span 47-48:  manufacture => manufacture-01
Oracle Span 40-41:  mastering => master-01
Oracle Span 6-7:  nuclear => nucleus
Oracle Span 50-51:  nuclear => nucleus
Oracle Span 20-21:  policy => policy
Oracle Span 25-26:  President => (have-org-role-91 :ARG2 president)
Oracle Span 9-10:  show => show-01
Oracle Span 37-38:  stopping => stop-01
Oracle Span 32-33:  takes => take-09
Oracle Span 35-36:  task => task-01
Oracle Span 21-22:  team => team
Oracle Span 14-15:  technical => technical
Oracle Span 7-8:  technology => technology
Oracle Span 41-42:  technology => technology
Oracle Span 23-25:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 45-46:  used => use-01
Oracle Span 51-52:  weapons => weapon

Incorrect span: task => task
Incorrect span: takes => take-01
Extra span: - elect => (person :name (name :op "Barack" :op "Obama"))
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: challenges => (thing :ARG2-of challenge-01)
Extra span: development => develop-02
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: challenges => challenge-01
Missing span: elect => elect-01
Missing span: foreign => foreign
Missing span: takes => take-09
Missing span: task => task-01
Missing span: mastering => master-01
Missing span: and => and
Missing span: weapons => weapon
Missing span: developments => develop-02
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	latest	_	JJS	JJS	_	3	amod	_	_
3	developments	_	NNS	NNS	_	10	nsubj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Iran	_	NNP	NNP	_	9	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	nuclear	_	JJ	JJ	_	9	amod	_	_
8	technology	_	NN	NN	_	9	nn	_	_
9	development	_	NN	NN	_	4	pobj	_	_
10	show	_	VBP	VBP	_	0	root	_	_
11	the	_	DT	DT	_	13	det	_	_
12	complex	_	JJ	JJ	_	13	amod	_	_
13	diplomatic	_	JJ	JJ	_	17	nsubj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	technical	_	JJ	JJ	_	16	amod	_	_
16	challenges	_	NNS	NNS	_	13	conj	_	_
17	facing	_	VBG	VBG	_	10	dep	_	_
18	the	_	DT	DT	_	22	det	_	_
19	incoming	_	JJ	JJ	_	22	amod	_	_
20	foreign	_	JJ	JJ	_	22	amod	_	_
21	policy	_	NN	NN	_	22	nn	_	_
22	team	_	NN	NN	_	17	dobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	United	_	NNP	NNP	_	28	nn	_	_
25	States	_	NNPS	NNPS	_	28	nn	_	_
26	President-elect	_	NNP	NNP	_	28	nn	_	_
27	Barack	_	NNP	NNP	_	28	nn	_	_
28	Obama	_	NNP	NNP	_	23	pobj	_	_
29	when	_	WRB	WRB	_	31	advmod	_	_
30	it	_	PRP	PRP	_	31	nsubj	_	_
31	takes	_	VBZ	VBZ	_	28	rcmod	_	_
32	on	_	IN	IN	_	31	prep	_	_
33	the	_	DT	DT	_	34	det	_	_
34	task	_	NN	NN	_	32	pobj	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	stopping	_	VBG	VBG	_	35	pcomp	_	_
37	Iran	_	NNP	NNP	_	36	dobj	_	_
38	from	_	IN	IN	_	36	prep	_	_
39	mastering	_	VBG	VBG	_	40	amod	_	_
40	technology	_	NN	NN	_	38	pobj	_	_
41	that	_	WDT	WDT	_	44	nsubjpass	_	_
42	could	_	MD	MD	_	44	aux	_	_
43	be	_	VB	VB	_	44	auxpass	_	_
44	used	_	VBN	VBN	_	40	ccomp	_	_
45	to	_	TO	TO	_	46	aux	_	_
46	manufacture	_	VB	VB	_	44	xcomp	_	_
47	and	_	CC	CC	_	46	cc	_	_
48	deliver	_	VB	VB	_	46	conj	_	_
49	nuclear	_	JJ	JJ	_	50	amod	_	_
50	weapons	_	NNS	NNS	_	46	dobj	_	_
51	.	_	.	.	_	10	punct	_	_

Oracle:
(a2 / and, op, d3 / deliver-01)
(a2 / and, op, m3 / manufacture-01)
(c / country, name, n / name)
(c2 / challenge-01, ARG1, t3 / team)
(c2 / challenge-01, ARG2, t6 / take-09)
(c2 / challenge-01, mod, c3 / complex)
(c2 / challenge-01, mod, d2 / diplomacy)
(c2 / challenge-01, mod, t2 / technical)
(c4 / country, name, n3 / name)
(d / develop-02, ARG0, c / country)
(d / develop-02, ARG1, t / technology)
(d / develop-02, time, l / late)
(d3 / deliver-01, ARG1, w / weapon)
(e / elect-01, ARG1, p3 / person)
(e / elect-01, ARG2, p2 / president)
(f / face-01, ARG0, c2 / challenge-01)
(f / face-01, ARG1, t3 / team)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, p2 / president)
(l / late, degree, m / most)
(m2 / master-01, ARG0, c / country)
(m2 / master-01, ARG1, t5 / technology)
(m3 / manufacture-01, ARG1, w / weapon)
(n / name, op, "Iran")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / name, op, "Barack")
(n4 / name, op, "Obama")
(p / policy, mod, f2 / foreign)
(p3 / person, name, n4 / name)
(s / show-01, ARG0, d / develop-02)
(s / show-01, ARG1, c2 / challenge-01)
(s2 / stop-01, ARG1, m2 / master-01)
(t / technology, mod, n2 / nucleus)
(t3 / team, mod, i / incoming)
(t3 / team, mod, p / policy)
(t3 / team, poss, p3 / person)
(t4 / task-01, ARG1, s2 / stop-01)
(t6 / take-09, ARG0, t3 / team)
(t6 / take-09, ARG1, t4 / task-01)
(u / use-01, ARG1, t5 / technology)
(u / use-01, ARG2, a2 / and)
(u / use-01, mod, p4 / possible)
(w / weapon, mod, n5 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(50,51,List(0),nuclear,nucleus,false), Span(49,50,List(1),deliver,deliver-01,false), Span(47,48,List(2),manufacture,manufacture-01,false), Span(45,46,List(3),used,use-01,false), Span(43,44,List(4),could,possible,false), Span(41,42,List(5),technology,technology,false), Span(37,38,List(6),stopping,stop-01,false), Span(35,36,List(7),task,task,false), Span(32,33,List(8),takes,take-01,false), Span(28,30,List(12, 11, 10, 9),Barack Obama,(person :name (name :op "Obama" :op "Barack")),false), Span(26,28,List(16, 15, 14, 13),- elect,(person :name (name :op "Barack" :op "Obama")),false), Span(25,26,List(18, 17),President,(have-org-role-91 :ARG2 president),false), Span(23,25,List(22, 21, 20, 19),United States,(country :name (name :op "United" :op "States")),false), Span(21,22,List(23),team,team,false), Span(20,21,List(24),policy,policy,false), Span(18,19,List(25),incoming,incoming,false), Span(16,17,List(26),facing,face-01,false), Span(15,16,List(28, 27),challenges,(thing :ARG2-of challenge-01),false), Span(14,15,List(29),technical,technical,false), Span(12,13,List(30),diplomatic,diplomacy,false), Span(11,12,List(31),complex,complex,false), Span(9,10,List(32),show,show-01,false), Span(8,9,List(33),development,develop-02,false), Span(7,8,List(34),technology,technology,false), Span(6,7,List(35),nuclear,nucleus,false), Span(1,2,List(37, 36),latest,(late :degree most),false)),Map(30 -> diplomacy, 2 -> manufacture-01, 5 -> technology, 33 -> develop-02, 27 -> thing, 12 -> "Barack", 8 -> take-01, 15 -> "Barack", 36 -> late, 21 -> "United", 18 -> president, 24 -> policy, 35 -> nucleus, 7 -> task, 1 -> deliver-01, 17 -> have-org-role-91, 23 -> team, 26 -> face-01, 4 -> possible, 11 -> "Obama", 32 -> show-01, 14 -> name, 29 -> technical, 20 -> name, 34 -> technology, 28 -> challenge-01, 6 -> stop-01, 9 -> person, 0 -> nucleus, 22 -> "States", 16 -> "Obama", 37 -> most, 19 -> country, 10 -> name, 3 -> use-01, 31 -> complex, 25 -> incoming, 13 -> person),Map(n -> nucleus, h -> have-org-role-91, t4 -> team, s2 -> show-01, p5 -> policy, t -> technology, m2 -> most, d3 -> develop-02, p2 -> person, n4 -> name, t6 -> technical, s -> stop-01, m -> manufacture-01, d -> deliver-01, t3 -> take-01, p -> possible, c3 -> complex, n3 -> name, p4 -> president, d2 -> diplomacy, t2 -> task, t5 -> thing, i -> incoming, c -> country, l -> late, u -> use-01, f -> face-01, p3 -> person, n2 -> name, c2 -> challenge-01, t7 -> technology, n5 -> nucleus))),[Ljava.lang.String;@6dd7b5a3,Annotation([Ljava.lang.String;@6f3187b0,[Ljava.lang.String;@2663e964,[Ljava.lang.String;@48b67364),Annotation([Ljava.lang.String;@189cbd7c,[Ljava.lang.String;@7bf3a5d8,[Ledu.cmu.lti.nlp.amr.Dependency;@42e25b0b),Annotation([Ljava.lang.String;@39b43d60,[Ljava.lang.String;@44be0077,[Ljava.lang.String;@2205a05d),Annotation([Ljava.lang.String;@72ef8d15,[Ljava.lang.String;@6aa8e115,[Ledu.cmu.lti.nlp.amr.Entity;@5e21e98f))
AMR:
(c / country, name, n4 / name)
(c2 / challenge-01, ARG1, c3 / complex)
(c2 / challenge-01, ARG2, t5 / thing)
(d / deliver-01, ARG1, u / use-01)
(d3 / develop-02, ARG0, l / late)
(d3 / develop-02, ARG1, t7 / technology)
(f / face-01, ARG0, t5 / thing)
(f / face-01, ARG1, t4 / team)
(f / face-01, ARG2, d2 / diplomacy)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p4 / president)
(h / have-org-role-91, direction, p3 / person)
(l / late, degree, m2 / most)
(n2 / name, op, "Barack")
(n2 / name, op, "Obama")
(n3 / name, op, "Barack")
(n3 / name, op, "Obama")
(n4 / name, op, "States")
(n4 / name, op, "United")
(p2 / person, name, n2 / name)
(p3 / person, name, n3 / name)
(s / stop-01, ARG0, t2 / task)
(s / stop-01, ARG1, n / nucleus)
(s / stop-01, location, t / technology)
(s2 / show-01, ARG0, d3 / develop-02)
(s2 / show-01, ARG1, f / face-01)
(t3 / take-01, ARG0, p2 / person)
(t3 / take-01, ARG1, t2 / task)
(t4 / team, mod, i / incoming)
(t4 / team, mod, p5 / policy)
(t4 / team, poss, p3 / person)
(t5 / thing, mod, t6 / technical)
(t7 / technology, mod, n5 / nucleus)
(u / use-01, ARG1, t / technology)
(u / use-01, ARG2, m / manufacture-01)
(u / use-01, mod, p / possible)

Decoded in 4,253,973 microseconds
Sentence: The administration of United States President George W. Bush in its last months in power has managed to synchronize United States policies with the European Union, British, French and German leaders, to press for tougher sanctions and diplomatic action against Iran.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "George" :op "W." :op "Bush"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "European" :op "Union"))
NER Entity: (thing :name (name :op "British"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 41-42:  action => action
Span 1-2:  administration => administrate-01
Span 40-41:  diplomatic => diplomacy
Span 24-26:  European Union => (organization :name (name :op "Union" :op "European"))
Span 6-9:  George W. Bush => (person :name (name :op "Bush" :op "W." :op "George"))
Span 31-32:  German => (country :name (name :op "Germany"))
Span 11-12:  last => last
Span 32-33:  leaders => (person :ARG0-of lead-02)
Span 16-17:  managed => manage-02
Span 12-13:  months => (temporal-quantity :unit month)
Span 21-22:  policies => policy
Span 14-15:  power => power
Span 5-6:  President => (have-org-role-91 :ARG2 president)
Span 35-36:  press => press
Span 37-38:  tougher => tough
Span 19-21:  United States => (country :name (name :op "United" :op "States"))
Span 3-5:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 1-2:  administration => administrate-01
Oracle Span 30-31:  and => and
Oracle Span 39-40:  and => and
Oracle Span 27-28:  British => "Britain"
Oracle Span 40-41:  diplomatic => diplomacy
Oracle Span 24-26:  European Union => (organization :name (name :op "Union" :op "European"))
Oracle Span 29-30:  French => (country :name (name :op "France"))
Oracle Span 6-9:  George W. Bush => (person :name (name :op "Bush" :op "W." :op "George"))
Oracle Span 31-32:  German => (country :name (name :op "Germany"))
Oracle Span 15-16:  has => have-org-role-91
Oracle Span 43-44:  Iran => (country :name (name :op "Iran"))
Oracle Span 11-12:  last => last
Oracle Span 32-33:  leaders => (person :ARG0-of lead-02)
Oracle Span 16-17:  managed => manage-02
Oracle Span 12-13:  months => month
Oracle Span 21-22:  policies => policy
Oracle Span 5-6:  President => president
Oracle Span 35-36:  press => press-01
Oracle Span 38-39:  sanctions => sanction-02
Oracle Span 18-19:  synchronize => synchronize-01
Oracle Span 37-38:  tougher => tough
Oracle Span 3-5:  United States => (country :name (name :op "States" :op "United"))

Extra span: action => action
Incorrect span: press => press
Extra span: United States => (country :name (name :op "United" :op "States"))
Extra span: power => power
Incorrect span: months => (temporal-quantity :unit month)
Incorrect span: President => (have-org-role-91 :ARG2 president)
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: months => month
Missing span: synchronize => synchronize-01
Missing span: press => press-01
Missing span: and => and
Missing span: sanctions => sanction-02
Missing span: and => and
Missing span: French => (country :name (name :op "France"))
Missing span: President => president
Missing span: British => "Britain"
Missing span: has => have-org-role-91
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	administration	_	NN	NN	_	17	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	United	_	NNP	NNP	_	9	nn	_	_
5	States	_	NNPS	NNPS	_	9	nn	_	_
6	President	_	NNP	NNP	_	9	nn	_	_
7	George	_	NNP	NNP	_	9	nn	_	_
8	W.	_	NNP	NNP	_	9	nn	_	_
9	Bush	_	NNP	NNP	_	3	pobj	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	its	_	PRP$	PRP$	_	13	poss	_	_
12	last	_	JJ	JJ	_	13	amod	_	_
13	months	_	NNS	NNS	_	10	pobj	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	power	_	NN	NN	_	14	pobj	_	_
16	has	_	VBZ	VBZ	_	17	aux	_	_
17	managed	_	VBN	VBN	_	0	root	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	synchronize	_	VB	VB	_	17	xcomp	_	_
20	United	_	NNP	NNP	_	22	nn	_	_
21	States	_	NNPS	NNPS	_	22	nn	_	_
22	policies	_	NNS	NNS	_	19	dobj	_	_
23	with	_	IN	IN	_	19	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	European	_	JJ	JJ	_	36	dep	_	_
26	Union	_	NNP	NNP	_	25	dep	_	_
27	,	_	,	,	_	26	punct	_	_
28	British	_	NNP	NNP	_	26	dep	_	_
29	,	_	,	,	_	26	punct	_	_
30	French	_	NNP	NNP	_	33	amod	_	_
31	and	_	CC	CC	_	30	cc	_	_
32	German	_	NNP	NNP	_	30	conj	_	_
33	leaders	_	NNS	NNS	_	36	dep	_	_
34	,	_	,	,	_	36	punct	_	_
35	to	_	TO	TO	_	36	aux	_	_
36	press	_	VB	VB	_	23	pobj	_	_
37	for	_	IN	IN	_	36	prep	_	_
38	tougher	_	JJR	JJR	_	39	amod	_	_
39	sanctions	_	NNS	NNS	_	37	pobj	_	_
40	and	_	CC	CC	_	36	cc	_	_
41	diplomatic	_	JJ	JJ	_	42	amod	_	_
42	action	_	NN	NN	_	36	conj	_	_
43	against	_	IN	IN	_	42	prep	_	_
44	Iran	_	NNP	NNP	_	43	pobj	_	_
45	.	_	.	.	_	17	punct	_	_

Oracle:
(a2 / and, op, p7 / person)
(a3 / and, op, s2 / sanction-02)
(c2 / country, name, n6 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n7 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c6 / country)
(h / have-org-role-91, ARG2, p9 / president)
(l5 / lead-02, ARG0, p7 / person)
(l5 / lead-02, ARG1, c5 / country)
(m / manage-02, ARG1, s / synchronize-01)
(m / manage-02, time, m2 / month)
(m2 / month, mod, l / last)
(n / name, op, "Bush")
(n / name, op, "George")
(n / name, op, "W.")
(n2 / name, op, "European")
(n2 / name, op, "Union")
(n4 / name, op, "France")
(n5 / name, op, "Germany")
(n6 / name, op, "Iran")
(n7 / name, op, "States")
(n7 / name, op, "United")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(p3 / policy, mod, c6 / country)
(p8 / press-01, ARG2, a3 / and)
(s / synchronize-01, ARG1, p3 / policy)
(s / synchronize-01, ARG2, a2 / and)
(s / synchronize-01, purpose, p8 / press-01)
(s2 / sanction-02, ARG1, c2 / country)
(s2 / sanction-02, mod, t / tough)

Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),action,action,false), Span(40,41,List(1),diplomatic,diplomacy,false), Span(37,38,List(2),tougher,tough,false), Span(35,36,List(3),press,press,false), Span(32,33,List(5, 4),leaders,(person :ARG0-of lead-02),false), Span(31,32,List(8, 7, 6),German,(country :name (name :op "Germany")),false), Span(24,26,List(12, 11, 10, 9),European Union,(organization :name (name :op "Union" :op "European")),false), Span(21,22,List(13),policies,policy,false), Span(19,21,List(17, 16, 15, 14),United States,(country :name (name :op "United" :op "States")),false), Span(16,17,List(18),managed,manage-02,false), Span(14,15,List(19),power,power,false), Span(12,13,List(21, 20),months,(temporal-quantity :unit month),false), Span(11,12,List(22),last,last,false), Span(6,9,List(27, 26, 25, 24, 23),George W. Bush,(person :name (name :op "Bush" :op "W." :op "George")),false), Span(5,6,List(29, 28),President,(have-org-role-91 :ARG2 president),false), Span(3,5,List(33, 32, 31, 30),United States,(country :name (name :op "United" :op "States")),false), Span(1,2,List(34),administration,administrate-01,false)),Map(30 -> country, 2 -> tough, 5 -> lead-02, 33 -> "States", 27 -> "George", 12 -> "European", 8 -> "Germany", 15 -> name, 21 -> month, 18 -> manage-02, 24 -> name, 7 -> name, 1 -> diplomacy, 17 -> "States", 23 -> person, 26 -> "W.", 4 -> person, 11 -> "Union", 32 -> "United", 14 -> country, 29 -> president, 20 -> temporal-quantity, 34 -> administrate-01, 28 -> have-org-role-91, 6 -> country, 9 -> organization, 0 -> action, 22 -> last, 16 -> "United", 19 -> power, 10 -> name, 3 -> press, 31 -> name, 25 -> "Bush", 13 -> policy),Map(n -> name, h -> have-org-role-91, p5 -> person, t -> tough, m2 -> month, p2 -> person, n4 -> name, d -> diplomacy, m -> manage-02, p -> press, n3 -> name, a -> action, c3 -> country, p4 -> power, t2 -> temporal-quantity, l2 -> last, a2 -> administrate-01, c -> country, p6 -> president, l -> lead-02, o -> organization, p3 -> policy, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@51a9ad5e,Annotation([Ljava.lang.String;@5f20155b,[Ljava.lang.String;@72ade7e3,[Ljava.lang.String;@239105a8),Annotation([Ljava.lang.String;@3fce8fd9,[Ljava.lang.String;@609bcfb6,[Ledu.cmu.lti.nlp.amr.Dependency;@7d94beb9),Annotation([Ljava.lang.String;@560348e6,[Ljava.lang.String;@1df8b5b8,[Ljava.lang.String;@23202fce),Annotation([Ljava.lang.String;@7b993c65,[Ljava.lang.String;@37911f88,[Ledu.cmu.lti.nlp.amr.Entity;@6f1c29b7))
AMR:
(a / action, mod, d / diplomacy)
(a2 / administrate-01, ARG0, p5 / person)
(a2 / administrate-01, ARG1, c / country)
(a2 / administrate-01, ARG2, p4 / power)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(h / have-org-role-91, ARG0, p5 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, p6 / president)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, o / organization)
(l / lead-02, ARG2, p / press)
(m / manage-02, ARG0, p5 / person)
(m / manage-02, ARG1, p3 / policy)
(m2 / month, mod, l2 / last)
(n / name, op, "Germany")
(n2 / name, op, "European")
(n2 / name, op, "Union")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / name, op, "Bush")
(n4 / name, op, "George")
(n4 / name, op, "W.")
(n5 / name, op, "States")
(n5 / name, op, "United")
(o / organization, name, n2 / name)
(p / press, op, a / action)
(p2 / person, location, c / country)
(p3 / policy, mod, c2 / country)
(p5 / person, name, n4 / name)
(p5 / person, prep-as, t2 / temporal-quantity)
(t / tough, op, m / manage-02)
(t2 / temporal-quantity, unit, m2 / month)

Decoded in 2,174,870 microseconds
Sentence: The International Atomic Energy Agency is expected to release a report critical of Iran next week.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 11-12:  critical => critical
Span 6-7:  expected => expect-01
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 14-15:  next => next
Span 8-9:  release => release-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 11-12:  critical => criticize-01
Oracle Span 6-7:  expected => expect-01
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 13-14:  Iran => (country :name (name :op "Iran"))
Oracle Span 14-15:  next => next
Oracle Span 8-9:  release => release-01
Oracle Span 10-11:  report => (thing :ARG1-of report-01)
Oracle Span 15-16:  week => week

Incorrect span: critical => critical
Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: week => week
Missing span: report => (thing :ARG1-of report-01)
Missing span: critical => criticize-01
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	International	_	NNP	NNP	_	5	nn	_	_
3	Atomic	_	NNP	NNP	_	5	nn	_	_
4	Energy	_	NNP	NNP	_	5	nn	_	_
5	Agency	_	NNP	NNP	_	7	nsubjpass	_	_
6	is	_	VBZ	VBZ	_	7	auxpass	_	_
7	expected	_	VBN	VBN	_	0	root	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	release	_	VB	VB	_	7	xcomp	_	_
10	a	_	DT	DT	_	11	det	_	_
11	report	_	NN	NN	_	9	dobj	_	_
12	critical	_	JJ	JJ	_	11	amod	_	_
13	of	_	IN	IN	_	11	prep	_	_
14	Iran	_	NNP	NNP	_	13	pobj	_	_
15	next	_	JJ	JJ	_	16	amod	_	_
16	week	_	NN	NN	_	9	tmod	_	_
17	.	_	.	.	_	7	punct	_	_

Oracle:
(c / criticize-01, ARG0, t / thing)
(c / criticize-01, ARG1, c2 / country)
(c2 / country, name, n2 / name)
(e / expect-01, ARG1, r / release-01)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Iran")
(o / organization, name, n / name)
(r / release-01, ARG0, o / organization)
(r / release-01, ARG1, t / thing)
(r / release-01, time, w / week)
(r2 / report-01, ARG1, t / thing)
(w / week, mod, n3 / next)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),next,next,false), Span(11,12,List(1),critical,critical,false), Span(8,9,List(2),release,release-01,false), Span(6,7,List(3),expected,expect-01,false), Span(1,5,List(9, 8, 7, 6, 5, 4),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> release-01, 5 -> name, 8 -> "Energy", 7 -> "Atomic", 1 -> critical, 4 -> organization, 6 -> "International", 9 -> "Agency", 0 -> next, 3 -> expect-01),Map(e -> expect-01, n -> next, r -> release-01, c -> critical, o -> organization, n2 -> name))),[Ljava.lang.String;@4d6025c5,Annotation([Ljava.lang.String;@7f284218,[Ljava.lang.String;@407a7f2a,[Ljava.lang.String;@4ea5b703),Annotation([Ljava.lang.String;@2a7ed1f,[Ljava.lang.String;@3fa247d1,[Ledu.cmu.lti.nlp.amr.Dependency;@2cb2fc20),Annotation([Ljava.lang.String;@4f4c4b1a,[Ljava.lang.String;@723e88f9,[Ljava.lang.String;@5f0fd5a0),Annotation([Ljava.lang.String;@64e7619d,[Ljava.lang.String;@495ee280,[Ledu.cmu.lti.nlp.amr.Entity;@4fa1c212))
AMR:
(e / expect-01, ARG0, n / next)
(e / expect-01, ARG1, r / release-01)
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(o / organization, name, n2 / name)
(r / release-01, ARG0, o / organization)
(r / release-01, ARG1, c / critical)

Decoded in 93,475 microseconds
Sentence: The International Atomic Energy Agency is the United Nations's nuclear watchdog agency.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
Spans:
Span 12-13:  agency => agency
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 10-11:  nuclear => nucleus
Span 7-9:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 11-12:  watchdog => watchdog

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  agency => agency
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 10-11:  nuclear => nucleus
Oracle Span 7-9:  United Nations => (organization :name (name :op "Nations" :op "United"))
Oracle Span 11-12:  watchdog => watchdog

Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: United Nations => (organization :name (name :op "Nations" :op "United"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	International	_	NNP	NNP	_	5	nn	_	_
3	Atomic	_	NNP	NNP	_	5	nn	_	_
4	Energy	_	NNP	NNP	_	5	nn	_	_
5	Agency	_	NNP	NNP	_	13	nsubj	_	_
6	is	_	VBZ	VBZ	_	13	cop	_	_
7	the	_	DT	DT	_	9	det	_	_
8	United	_	NNP	NNP	_	9	nn	_	_
9	Nations	_	NNPS	NNPS	_	13	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	nuclear	_	JJ	JJ	_	13	amod	_	_
12	watchdog	_	NN	NN	_	13	nn	_	_
13	agency	_	NN	NN	_	0	root	_	_
14	.	_	.	.	_	13	punct	_	_

Oracle:
(a / agency, domain, o / organization)
(a / agency, mod, o2 / organization)
(a / agency, mod, w / watchdog)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n3 / name, op, "Nations")
(n3 / name, op, "United")
(o / organization, name, n / name)
(o2 / organization, name, n3 / name)
(w / watchdog, mod, n2 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),agency,agency,false), Span(11,12,List(1),watchdog,watchdog,false), Span(10,11,List(2),nuclear,nucleus,false), Span(7,9,List(6, 5, 4, 3),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(1,5,List(12, 11, 10, 9, 8, 7),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> nucleus, 5 -> "United", 12 -> "Agency", 8 -> name, 7 -> organization, 1 -> watchdog, 4 -> name, 11 -> "Energy", 6 -> "Nations", 0 -> agency, 9 -> "International", 3 -> organization, 10 -> "Atomic"),Map(n -> nucleus, w -> watchdog, n3 -> name, a -> agency, o2 -> organization, o -> organization, n2 -> name))),[Ljava.lang.String;@6ea2bc93,Annotation([Ljava.lang.String;@3116c353,[Ljava.lang.String;@f627d13,[Ljava.lang.String;@4e928fbf),Annotation([Ljava.lang.String;@352ff4da,[Ljava.lang.String;@3224a577,[Ledu.cmu.lti.nlp.amr.Dependency;@2e32ccc5),Annotation([Ljava.lang.String;@748741cb,[Ljava.lang.String;@3e44f2a5,[Ljava.lang.String;@295cf707),Annotation([Ljava.lang.String;@1130520d,[Ljava.lang.String;@5f77d0f9,[Ledu.cmu.lti.nlp.amr.Entity;@463fd068))
AMR:
(a / agency, domain, o2 / organization)
(a / agency, mod, n / nucleus)
(a / agency, mod, w / watchdog)
(a / agency, poss, o / organization)
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(n3 / name, op, "Agency")
(n3 / name, op, "Atomic")
(n3 / name, op, "Energy")
(n3 / name, op, "International")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)

Decoded in 50,381 microseconds
Sentence: Due to the Act that no new initiatives regarding Iran's nuclear program emerged from the 081113 Paris talks the hopes of imposing another set of United Nations Security Council sanctions before the end of President Bush's term were decreasing.

NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (country :name (name :op "Paris"))
NER Entity: (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (country :name (name :op "Paris"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
Spans:
Span 16-17:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 23-24:  another => another
Span 31-32:  before => before
Span 36-37:  Bush => (person :name (name :op "Bush"))
Span 40-41:  decreasing => decrease-01
Span 13-14:  emerged => emerge-02
Span 20-21:  hopes => hope-01
Span 22-23:  imposing => impose-01
Span 7-8:  initiatives => initiate-01
Span 6-7:  new => new
Span 5-6:  no => -
Span 11-12:  nuclear => nucleus
Span 17-18:  Paris => (city :name (name :op "Paris"))
Span 35-36:  President => (have-org-role-91 :ARG2 president)
Span 12-13:  program => program
Span 18-19:  talks => talk-01
Span 26-30:  United Nations Security Council => (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 16-17:  081113 => (date-entity :year 2008 :month 11 :day 13)
Oracle Span 23-24:  another => another
Oracle Span 31-32:  before => before
Oracle Span 36-37:  Bush => (person :name (name :op "Bush"))
Oracle Span 40-41:  decreasing => decrease-01
Oracle Span 13-14:  emerged => emerge-01
Oracle Span 33-34:  end => end-01
Oracle Span 20-21:  hopes => hope-01
Oracle Span 22-23:  imposing => impose-01
Oracle Span 7-8:  initiatives => initiative
Oracle Span 9-10:  Iran => (country :name (name :op "Iran"))
Oracle Span 6-7:  new => new
Oracle Span 5-6:  no => -
Oracle Span 11-12:  nuclear => nucleus
Oracle Span 17-18:  Paris => (city :name (name :op "Paris"))
Oracle Span 35-36:  President => (have-org-role-91 :ARG2 president)
Oracle Span 12-13:  program => program
Oracle Span 30-31:  sanctions => sanction-02
Oracle Span 24-25:  set => set
Oracle Span 18-19:  talks => talk-01
Oracle Span 38-39:  term => term
Oracle Span 26-30:  United Nations Security Council => (organization :name (name :op "Council" :op "Security" :op "Nations" :op "United"))

Incorrect span: United Nations Security Council => (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
Incorrect span: 081113 => (date-entity :day 13 :month 11 :year 08)
Incorrect span: emerged => emerge-02
Incorrect span: initiatives => initiate-01
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: United Nations Security Council => (organization :name (name :op "Council" :op "Security" :op "Nations" :op "United"))
Missing span: 081113 => (date-entity :year 2008 :month 11 :day 13)
Missing span: emerged => emerge-01
Missing span: initiatives => initiative
Missing span: end => end-01
Missing span: term => term
Missing span: set => set
Missing span: sanctions => sanction-02
Dependencies:
1	Due	_	JJ	JJ	_	2	mwe	_	_
2	to	_	TO	TO	_	31	prep	_	_
3	the	_	DT	DT	_	4	det	_	_
4	Act	_	NNP	NNP	_	2	pobj	_	_
5	that	_	IN	IN	_	14	mark	_	_
6	no	_	DT	DT	_	8	neg	_	_
7	new	_	JJ	JJ	_	8	amod	_	_
8	initiatives	_	NNS	NNS	_	14	nsubj	_	_
9	regarding	_	VBG	VBG	_	8	prep	_	_
10	Iran	_	NNP	NNP	_	13	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	nuclear	_	JJ	JJ	_	13	amod	_	_
13	program	_	NN	NN	_	9	pobj	_	_
14	emerged	_	VBD	VBD	_	4	dep	_	_
15	from	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	19	det	_	_
17	081113	_	CD	CD	_	19	num	_	_
18	Paris	_	NNP	NNP	_	19	nn	_	_
19	talks	_	NNS	NNS	_	15	pobj	_	_
20	the	_	DT	DT	_	21	det	_	_
21	hopes	_	NNS	NNS	_	31	nsubj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	imposing	_	VBG	VBG	_	22	pcomp	_	_
24	another	_	DT	DT	_	25	det	_	_
25	set	_	NN	NN	_	23	dobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	United	_	NNP	NNP	_	30	nn	_	_
28	Nations	_	NNPS	NNPS	_	30	nn	_	_
29	Security	_	NNP	NNP	_	30	nn	_	_
30	Council	_	NNP	NNP	_	26	pobj	_	_
31	sanctions	_	VBZ	VBZ	_	0	root	_	_
32	before	_	IN	IN	_	41	mark	_	_
33	the	_	DT	DT	_	34	det	_	_
34	end	_	NN	NN	_	41	nsubj	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	President	_	NNP	NNP	_	37	nn	_	_
37	Bush	_	NNP	NNP	_	39	poss	_	_
38	's	_	POS	POS	_	37	possessive	_	_
39	term	_	NN	NN	_	35	pobj	_	_
40	were	_	VBD	VBD	_	41	aux	_	_
41	decreasing	_	VBG	VBG	_	31	advcl	_	_
42	.	_	.	.	_	31	punct	_	_

Oracle:
(b / before, op, e / end-01)
(c / city, name, n2 / name)
(c3 / country, name, n6 / name)
(d / date-entity, day, 13)
(d / date-entity, month, 11)
(d / date-entity, year, 2008)
(d2 / decrease-01, ARG1, h / hope-01)
(e / end-01, ARG1, t2 / term)
(e2 / emerge-01, ARG0, i2 / initiative)
(e2 / emerge-01, ARG1, t / talk-01)
(e2 / emerge-01, polarity, - / -)
(h / hope-01, ARG1, i / impose-01)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG2, p / president)
(i / impose-01, ARG1, s2 / set)
(i / impose-01, time, b / before)
(i2 / initiative, mod, n4 / new)
(i2 / initiative, topic, p2 / program)
(n / name, op, "Bush")
(n2 / name, op, "Paris")
(n3 / name, op, "Council")
(n3 / name, op, "Nations")
(n3 / name, op, "Security")
(n3 / name, op, "United")
(n6 / name, op, "Iran")
(o / organization, name, n3 / name)
(p2 / program, mod, c3 / country)
(p2 / program, mod, n5 / nucleus)
(p3 / person, name, n / name)
(s / sanction-02, ARG0, o / organization)
(s / sanction-02, consist, s2 / set)
(s2 / set, mod, a / another)
(t / talk-01, location, c / city)
(t / talk-01, time, d / date-entity)
(t2 / term, poss, p3 / person)

Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),decreasing,decrease-01,false), Span(36,37,List(3, 2, 1),Bush,(person :name (name :op "Bush")),false), Span(35,36,List(5, 4),President,(have-org-role-91 :ARG2 president),false), Span(31,32,List(6),before,before,false), Span(26,30,List(12, 11, 10, 9, 8, 7),United Nations Security Council,(organization :name (name :op "United" :op "Nations" :op "Security" :op "Council")),false), Span(23,24,List(13),another,another,false), Span(22,23,List(14),imposing,impose-01,false), Span(20,21,List(15),hopes,hope-01,false), Span(18,19,List(16),talks,talk-01,false), Span(17,18,List(19, 18, 17),Paris,(city :name (name :op "Paris")),false), Span(16,17,List(23, 22, 21, 20),081113,(date-entity :day 13 :month 11 :year 08),false), Span(13,14,List(24),emerged,emerge-02,false), Span(12,13,List(25),program,program,false), Span(11,12,List(26),nuclear,nucleus,false), Span(7,8,List(27),initiatives,initiate-01,false), Span(6,7,List(28),new,new,false), Span(5,6,List(29),no,-,false)),Map(2 -> name, 5 -> president, 27 -> initiate-01, 12 -> "Council", 8 -> name, 15 -> hope-01, 21 -> 13, 18 -> name, 24 -> emerge-02, 7 -> organization, 1 -> person, 17 -> city, 23 -> 08, 26 -> nucleus, 4 -> have-org-role-91, 11 -> "Security", 14 -> impose-01, 29 -> -, 20 -> date-entity, 28 -> new, 6 -> before, 9 -> "United", 0 -> decrease-01, 22 -> 11, 16 -> talk-01, 19 -> "Paris", 10 -> "Nations", 3 -> "Bush", 25 -> program, 13 -> another),Map(e -> emerge-02, n -> name, h -> have-org-role-91, h2 -> hope-01, 12 -> 11, b -> before, t -> talk-01, p2 -> president, n4 -> nucleus, d -> decrease-01, 1 -> 13, p -> person, n3 -> name, a -> another, d2 -> date-entity, i2 -> initiate-01, i -> impose-01, - -> -, c -> city, 0 -> 08, o -> organization, p3 -> program, n2 -> name, n5 -> new))),[Ljava.lang.String;@895e367,Annotation([Ljava.lang.String;@1b266842,[Ljava.lang.String;@7a3793c7,[Ljava.lang.String;@42b3b079),Annotation([Ljava.lang.String;@651aed93,[Ljava.lang.String;@4dd6fd0a,[Ledu.cmu.lti.nlp.amr.Dependency;@bb9e6dc),Annotation([Ljava.lang.String;@5456afaa,[Ljava.lang.String;@6692b6c6,[Ljava.lang.String;@1cd629b3),Annotation([Ljava.lang.String;@589da3f3,[Ljava.lang.String;@39d76cb5,[Ledu.cmu.lti.nlp.amr.Entity;@4a00d9cf))
AMR:
(b / before, op, d / decrease-01)
(c / city, name, n3 / name)
(d / decrease-01, ARG0, h2 / hope-01)
(d2 / date-entity, day, 1 / 13)
(d2 / date-entity, month, 12 / 11)
(d2 / date-entity, year, 0 / 08)
(e / emerge-02, ARG0, c / city)
(e / emerge-02, ARG2, i / impose-01)
(e / emerge-02, purpose, t / talk-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / hope-01, ARG0, p / person)
(h2 / hope-01, ARG1, i / impose-01)
(i2 / initiate-01, mod, n5 / new)
(i2 / initiate-01, polarity, - / -)
(i2 / initiate-01, topic, p3 / program)
(n / name, op, "Bush")
(n2 / name, op, "Council")
(n2 / name, op, "Nations")
(n2 / name, op, "Security")
(n2 / name, op, "United")
(n3 / name, op, "Paris")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(p3 / program, mod, n4 / nucleus)
(t / talk-01, ARG0, i2 / initiate-01)
(t / talk-01, ARG1, a / another)
(t / talk-01, time, d2 / date-entity)

Decoded in 1,067,940 microseconds
Sentence: While diplomatic maneuvering is taking place Iran continues to work towards mastering nuclear and missile technology.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 7-8:  continues => continue-01
Span 1-2:  diplomatic => diplomacy
Span 14-15:  missile => missile
Span 12-13:  nuclear => nucleus
Span 15-16:  technology => technology

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 7-8:  continues => continue-01
Oracle Span 1-2:  diplomatic => diplomacy
Oracle Span 6-7:  Iran => (country :name (name :op "Iran"))
Oracle Span 2-3:  maneuvering => maneuver-01
Oracle Span 11-12:  mastering => master-01
Oracle Span 14-15:  missile => missile
Oracle Span 12-13:  nuclear => nucleus
Oracle Span 4-5:  taking => take-14
Oracle Span 15-16:  technology => technology
Oracle Span 9-10:  work => work-06

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: taking => take-14
Missing span: maneuvering => maneuver-01
Missing span: work => work-06
Missing span: mastering => master-01
Missing span: and => and
Dependencies:
1	While	_	IN	IN	_	5	mark	_	_
2	diplomatic	_	JJ	JJ	_	3	amod	_	_
3	maneuvering	_	NN	NN	_	5	nsubj	_	_
4	is	_	VBZ	VBZ	_	5	aux	_	_
5	taking	_	VBG	VBG	_	8	advcl	_	_
6	place	_	NN	NN	_	5	dobj	_	_
7	Iran	_	NNP	NNP	_	8	nsubj	_	_
8	continues	_	VBZ	VBZ	_	0	root	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	work	_	VB	VB	_	8	xcomp	_	_
11	towards	_	IN	IN	_	10	prep	_	_
12	mastering	_	VBG	VBG	_	11	pcomp	_	_
13	nuclear	_	JJ	JJ	_	16	amod	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	missile	_	NN	NN	_	13	conj	_	_
16	technology	_	NN	NN	_	12	dobj	_	_
17	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, t2 / technology)
(c / continue-01, ARG0, c2 / country)
(c / continue-01, ARG1, w / work-06)
(c / continue-01, time, t3 / take-14)
(c2 / country, name, n / name)
(m / master-01, ARG0, c2 / country)
(m / master-01, ARG1, a / and)
(m3 / maneuver-01, mod, d / diplomacy)
(n / name, op, "Iran")
(t2 / technology, mod, m2 / missile)
(t3 / take-14, ARG1, m3 / maneuver-01)
(w / work-06, ARG0, c2 / country)
(w / work-06, ARG4, m / master-01)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),technology,technology,false), Span(14,15,List(1),missile,missile,false), Span(12,13,List(2),nuclear,nucleus,false), Span(7,8,List(3),continues,continue-01,false), Span(1,2,List(4),diplomatic,diplomacy,false)),Map(2 -> nucleus, 1 -> missile, 4 -> diplomacy, 0 -> technology, 3 -> continue-01),Map(n -> nucleus, t -> technology, d -> diplomacy, m -> missile, c -> continue-01))),[Ljava.lang.String;@6736fa8d,Annotation([Ljava.lang.String;@52815fa3,[Ljava.lang.String;@50313382,[Ljava.lang.String;@1cb346ea),Annotation([Ljava.lang.String;@4c012563,[Ljava.lang.String;@14a50707,[Ledu.cmu.lti.nlp.amr.Dependency;@4d518b32),Annotation([Ljava.lang.String;@4bd31064,[Ljava.lang.String;@e3c0e40,[Ljava.lang.String;@329dbdbf),Annotation([Ljava.lang.String;@7354b8c5,[Ljava.lang.String;@20d7d6fb,[Ledu.cmu.lti.nlp.amr.Entity;@4ef782af))
AMR:
(c / continue-01, ARG0, t / technology)
(c / continue-01, ARG1, n / nucleus)
(d / diplomacy, poss, m / missile)
(t / technology, mod, m / missile)

Decoded in 59,857 microseconds
Sentence: Some Israeli officials have stated their alarm about Iran's test-firing this week of a solid-fuel, two-stage rocket with a range of 1200 miles.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 29-30:  1200 => 1200
Span 6-7:  alarm => alarm-01
Span 12-13:  firing => fire-01
Span 19-20:  fuel => fuel
Span 2-3:  officials => (have-org-role-91 :ARG2 official)
Span 24-25:  rocket => rocket
Span 17-18:  solid => solid
Span 23-24:  stage => stage
Span 10-11:  test => test-01
Span 13-14:  this => this
Span 21-22:  two => 2

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 29-30:  1200 => 1200
Oracle Span 6-7:  alarm => alarm-01
Oracle Span 12-13:  firing => fire-01
Oracle Span 19-20:  fuel => fuel
Oracle Span 3-4:  have => (person :ARG0-of have-org-role-91)
Oracle Span 8-9:  Iran => (country :name (name :op "Iran"))
Oracle Span 1-2:  Israeli => (country :name (name :op "Israel"))
Oracle Span 30-31:  miles => (distance-quantity :unit mile)
Oracle Span 2-3:  officials => official
Oracle Span 27-28:  range => range-01
Oracle Span 24-25:  rocket => rocket
Oracle Span 17-18:  solid => solid
Oracle Span 0-1:  Some => some
Oracle Span 23-24:  stage => stage
Oracle Span 4-5:  stated => state-01
Oracle Span 10-11:  test => test-01
Oracle Span 13-14:  this => this
Oracle Span 21-22:  two => 2
Oracle Span 14-15:  week => week

Incorrect span: officials => (have-org-role-91 :ARG2 official)
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Israeli => (country :name (name :op "Israel"))
Missing span: stated => state-01
Missing span: week => week
Missing span: range => range-01
Missing span: miles => (distance-quantity :unit mile)
Missing span: officials => official
Missing span: Some => some
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	Some	_	DT	DT	_	3	det	_	_
2	Israeli	_	JJ	JJ	_	3	amod	_	_
3	officials	_	NNS	NNS	_	5	nsubj	_	_
4	have	_	VBP	VBP	_	5	aux	_	_
5	stated	_	VBN	VBN	_	0	root	_	_
6	their	_	PRP$	PRP$	_	7	poss	_	_
7	alarm	_	NN	NN	_	5	dobj	_	_
8	about	_	IN	IN	_	5	prep	_	_
9	Iran	_	NNP	NNP	_	11	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	test-firing	_	NN	NN	_	8	pobj	_	_
12	this	_	DT	DT	_	13	det	_	_
13	week	_	NN	NN	_	11	tmod	_	_
14	of	_	IN	IN	_	11	prep	_	_
15	a	_	DT	DT	_	19	det	_	_
16	solid-fuel	_	JJ	JJ	_	19	amod	_	_
17	,	_	,	,	_	19	punct	_	_
18	two-stage	_	JJ	JJ	_	19	amod	_	_
19	rocket	_	NN	NN	_	14	pobj	_	_
20	with	_	IN	IN	_	19	prep	_	_
21	a	_	DT	DT	_	22	det	_	_
22	range	_	NN	NN	_	20	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	1200	_	CD	CD	_	25	num	_	_
25	miles	_	NNS	NNS	_	23	pobj	_	_
26	.	_	.	.	_	5	punct	_	_

Oracle:
(a / alarm-01, ARG0, t / test-01)
(a / alarm-01, ARG1, p / person)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / distance-quantity, quant, 1 / 1200)
(d / distance-quantity, unit, m / mile)
(f / fire-01, ARG1, r / rocket)
(f2 / fuel, mod, s4 / solid)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Israel")
(n2 / name, op, "Iran")
(p / person, quant, s2 / some)
(r / rocket, mod, f2 / fuel)
(r / rocket, mod, s3 / stage)
(r2 / range-01, ARG1, r / rocket)
(r2 / range-01, ARG2, d / distance-quantity)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / alarm-01)
(s3 / stage, quant, 2 / 2)
(t / test-01, ARG0, c2 / country)
(t / test-01, ARG1, f / fire-01)
(t / test-01, time, w / week)
(w / week, mod, t2 / this)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),1200,1200,false), Span(24,25,List(1),rocket,rocket,false), Span(23,24,List(2),stage,stage,false), Span(21,22,List(3),two,2,false), Span(19,20,List(4),fuel,fuel,false), Span(17,18,List(5),solid,solid,false), Span(13,14,List(6),this,this,false), Span(12,13,List(7),firing,fire-01,false), Span(10,11,List(8),test,test-01,false), Span(6,7,List(9),alarm,alarm-01,false), Span(2,3,List(11, 10),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> stage, 5 -> solid, 8 -> test-01, 7 -> fire-01, 1 -> rocket, 11 -> official, 4 -> fuel, 6 -> this, 9 -> alarm-01, 0 -> 1200, 10 -> have-org-role-91, 3 -> 2),Map(h -> have-org-role-91, 2 -> 2, t -> this, s2 -> solid, s -> stage, 1 -> 1200, a -> alarm-01, t2 -> test-01, r -> rocket, f2 -> fire-01, o -> official, f -> fuel))),[Ljava.lang.String;@11d8ae8b,Annotation([Ljava.lang.String;@479cbee5,[Ljava.lang.String;@59e2d8e3,[Ljava.lang.String;@2b72cb8a),Annotation([Ljava.lang.String;@7f8a9499,[Ljava.lang.String;@5d43661b,[Ledu.cmu.lti.nlp.amr.Dependency;@12299890),Annotation([Ljava.lang.String;@2fba3fc4,[Ljava.lang.String;@4bf48f6,[Ljava.lang.String;@420a85c4),Annotation([Ljava.lang.String;@1c39680d,[Ljava.lang.String;@62833051,[Ledu.cmu.lti.nlp.amr.Entity;@1c852c0f))
AMR:
(a / alarm-01, ARG0, t2 / test-01)
(a / alarm-01, ARG1, h / have-org-role-91)
(f2 / fire-01, ARG0, t / this)
(f2 / fire-01, ARG1, t2 / test-01)
(h / have-org-role-91, ARG2, o / official)
(r / rocket, mod, f / fuel)
(r / rocket, mod, s / stage)
(r / rocket, mod, s2 / solid)
(s / stage, quant, 2 / 2)
(t2 / test-01, ARG0, 1 / 1200)
(t2 / test-01, ARG1, r / rocket)

Decoded in 385,699 microseconds
Sentence: The city of Tel Aviv is fewer than 650 miles from Iranian territory.

NER Entity: (country :name (name :op "Tel" :op "Aviv"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 1-2:  city => city
Span 6-7:  fewer => few
Span 3-5:  Tel Aviv => (city :name (name :op "Aviv" :op "Tel"))
Span 12-13:  territory => territory

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  650 => 650
Oracle Span 1-2:  city => city
Oracle Span 6-7:  fewer => fewer-than
Oracle Span 11-12:  Iranian => (country :name (name :op "Iran"))
Oracle Span 9-10:  miles => mile
Oracle Span 12-13:  territory => territory

Incorrect span: fewer => few
Extra span: Tel Aviv => (city :name (name :op "Aviv" :op "Tel"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: 650 => 650
Missing span: miles => mile
Missing span: fewer => fewer-than
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	city	_	NN	NN	_	6	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	Tel	_	NNP	NNP	_	5	nn	_	_
5	Aviv	_	NNP	NNP	_	3	pobj	_	_
6	is	_	VBZ	VBZ	_	0	root	_	_
7	fewer	_	JJR	JJR	_	8	mwe	_	_
8	than	_	IN	IN	_	9	quantmod	_	_
9	650	_	CD	CD	_	10	num	_	_
10	miles	_	NNS	NNS	_	11	npadvmod	_	_
11	from	_	IN	IN	_	6	prep	_	_
12	Iranian	_	JJ	JJ	_	13	amod	_	_
13	territory	_	NN	NN	_	11	pobj	_	_
14	.	_	.	.	_	6	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(f / fewer-than, quant, 6 / 650)
(f / fewer-than, unit, m / mile)
(n2 / name, op, "Iran")
(t / territory, mod, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),territory,territory,false), Span(6,7,List(1),fewer,few,false), Span(3,5,List(5, 4, 3, 2),Tel Aviv,(city :name (name :op "Aviv" :op "Tel")),false), Span(1,2,List(6),city,city,false)),Map(2 -> city, 5 -> "Tel", 1 -> few, 4 -> "Aviv", 6 -> city, 0 -> territory, 3 -> name),Map(n -> name, t -> territory, c -> city, f -> few, c2 -> city))),[Ljava.lang.String;@a37aefe,Annotation([Ljava.lang.String;@5d99c6b5,[Ljava.lang.String;@266374ef,[Ljava.lang.String;@13b3d178),Annotation([Ljava.lang.String;@24c4ddae,[Ljava.lang.String;@37fb0bed,[Ledu.cmu.lti.nlp.amr.Dependency;@a82c5f1),Annotation([Ljava.lang.String;@7b7fdc8,[Ljava.lang.String;@51c693d,[Ljava.lang.String;@6a57ae10),Annotation([Ljava.lang.String;@766653e6,[Ljava.lang.String;@4e07b95f,[Ledu.cmu.lti.nlp.amr.Entity;@28b46423))
AMR:
(c / city, name, n / name)
(c2 / city, name, n / name)
(f / few, location, c / city)
(n / name, op, "Aviv")
(n / name, op, "Tel")
(t / territory, quant, f / few)

Decoded in 30,951 microseconds
Sentence: 2002-04-06

mkDayMonthYear(2002-04-06,06,04,2002)
mkDayMonthYear(2002-04-06,06,04,2002)
Spans:
Span 0-1:  2002-04-06 => (date-entity :day 6 :month 4 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2002-04-06 => (date-entity :day 6 :month 4 :year 2002)

Dependencies:
1	2002-04-06	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 6)
(d / date-entity, month, 4)
(d / date-entity, year, 2002)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-04-06,(date-entity :day 6 :month 4 :year 2002),false)),Map(2 -> 4, 1 -> 6, 0 -> date-entity, 3 -> 2002),Map(2 -> 2002, d -> date-entity, 4 -> 4, 6 -> 6))),[Ljava.lang.String;@7fc4780b,Annotation([Ljava.lang.String;@3b79fd76,[Ljava.lang.String;@48c76607,[Ljava.lang.String;@43599640),Annotation([Ljava.lang.String;@1f81aa00,[Ljava.lang.String;@6b6776cb,[Ledu.cmu.lti.nlp.amr.Dependency;@1863d2fe),Annotation([Ljava.lang.String;@1787bc24,[Ljava.lang.String;@544d57e,[Ljava.lang.String;@55c53a33),Annotation([Ljava.lang.String;@53b7f657,[Ljava.lang.String;@797b0699,[Ledu.cmu.lti.nlp.amr.Entity;@5a37d3ed))
AMR:
(d / date-entity, day, 6 / 6)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2002)

Decoded in 9,283 microseconds
Sentence: Russian Federation (RU)

NER Entity: (country :name (name :op "Russian" :op "Federation"))
Spans:
Span 0-2:  Russian Federation => (country :name (name :op "Russian" :op "Federation"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-2:  Russian Federation => (country :name (name :op "Federation" :op "Russian"))

Incorrect span: Russian Federation => (country :name (name :op "Russian" :op "Federation"))
Missing span: Russian Federation => (country :name (name :op "Federation" :op "Russian"))
Dependencies:
1	Russian	_	NNP	NNP	_	2	nn	_	_
2	Federation	_	NNP	NNP	_	0	root	_	_
3	(	_	(	(	_	4	punct	_	_
4	RU	_	NNP	NNP	_	2	appos	_	_
5	)	_	)	)	_	4	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Federation")
(n / name, op, "Russian")

Input(Some(Graph(null,ArrayBuffer(Span(0,2,List(3, 2, 1, 0),Russian Federation,(country :name (name :op "Russian" :op "Federation")),false)),Map(2 -> "Russian", 1 -> name, 0 -> country, 3 -> "Federation"),Map(n -> name, c -> country))),[Ljava.lang.String;@26df6e3a,Annotation([Ljava.lang.String;@4a3631f8,[Ljava.lang.String;@6b58b9e9,[Ljava.lang.String;@f14a7d4),Annotation([Ljava.lang.String;@52e7a6b2,[Ljava.lang.String;@29a5f4e7,[Ledu.cmu.lti.nlp.amr.Dependency;@79c97cb),Annotation([Ljava.lang.String;@2d9caaeb,[Ljava.lang.String;@42a15bdc,[Ljava.lang.String;@44a59da3),Annotation([Ljava.lang.String;@27e47833,[Ljava.lang.String;@6f6745d6,[Ledu.cmu.lti.nlp.amr.Entity;@27508c5d))
AMR:
(c / country, name, n / name)
(n / name, op, "Federation")
(n / name, op, "Russian")

Decoded in 9,204 microseconds
Sentence: International; science; energy; weapons

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  energy => energy
Span 2-3:  science => science

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 4-5:  energy => energy
Oracle Span 0-1:  International => international
Oracle Span 2-3:  science => science
Oracle Span 6-7:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Missing span: weapons => weapon
Missing span: International => international
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	science	_	NN	NN	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	energy	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	weapons	_	NNS	NNS	_	5	dep	_	_

Oracle:
(a / and, op, e / energy)
(a / and, op, i / international)
(a / and, op, s / science)
(a / and, op, w / weapon)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),;,and,false), Span(4,5,List(1),energy,energy,false), Span(3,4,List(2),;,and,false), Span(2,3,List(3),science,science,false), Span(1,2,List(4),;,and,false)),Map(2 -> and, 1 -> energy, 4 -> and, 0 -> and, 3 -> science),Map(e -> energy, a3 -> and, s -> science, a -> and, a2 -> and))),[Ljava.lang.String;@4f704591,Annotation([Ljava.lang.String;@4b5189ac,[Ljava.lang.String;@1e4d3ce5,[Ljava.lang.String;@3ddc6915),Annotation([Ljava.lang.String;@704deff2,[Ljava.lang.String;@379614be,[Ledu.cmu.lti.nlp.amr.Dependency;@404bbcbd),Annotation([Ljava.lang.String;@1e81f160,[Ljava.lang.String;@1acaf3d,[Ljava.lang.String;@6986852),Annotation([Ljava.lang.String;@1bab8268,[Ljava.lang.String;@a307a8c,[Ledu.cmu.lti.nlp.amr.Entity;@6e01f9b0))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a3 / and, op, e / energy)
(a3 / and, op, s / science)

Decoded in 19,080 microseconds
Sentence: A high-security Russian laboratory complex storing anthrax, plague and other deadly bacteria faces loosing electricity for lack of payment to the mosenergo electric utility.

NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 6-7:  complex => complex
Span 25-26:  electric => electric
Span 17-18:  electricity => electricity
Span 15-16:  faces => face-01
Span 5-6:  laboratory => laboratory
Span 19-20:  lack => lack-01
Span 12-13:  other => other
Span 26-27:  utility => utility

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 8-9:  anthrax => anthrax
Oracle Span 14-15:  bacteria => bacterium
Oracle Span 6-7:  complex => complex
Oracle Span 17-18:  electricity => electricity
Oracle Span 15-16:  faces => face-01
Oracle Span 1-2:  high => high
Oracle Span 5-6:  laboratory => laboratory
Oracle Span 19-20:  lack => lack-01
Oracle Span 24-25:  mosenergo => (name :op "Mosenergo")
Oracle Span 12-13:  other => other
Oracle Span 10-11:  plague => plague
Oracle Span 4-5:  Russian => (country :name (name :op "Russia"))
Oracle Span 3-4:  security => security
Oracle Span 7-8:  storing => store-01
Oracle Span 26-27:  utility => utility

Extra span: electric => electric
Missing span: mosenergo => (name :op "Mosenergo")
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: storing => store-01
Missing span: and => and
Missing span: plague => plague
Missing span: anthrax => anthrax
Missing span: security => security
Missing span: high => high
Missing span: bacteria => bacterium
Dependencies:
1	A	_	DT	DT	_	5	det	_	_
2	high-security	_	JJ	JJ	_	5	amod	_	_
3	Russian	_	JJ	JJ	_	5	amod	_	_
4	laboratory	_	NN	NN	_	5	nn	_	_
5	complex	_	NN	NN	_	14	nsubj	_	_
6	storing	_	VBG	VBG	_	5	vmod	_	_
7	anthrax	_	NN	NN	_	6	dobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	plague	_	NNP	NNP	_	7	conj	_	_
10	and	_	CC	CC	_	7	cc	_	_
11	other	_	JJ	JJ	_	13	amod	_	_
12	deadly	_	JJ	JJ	_	13	amod	_	_
13	bacteria	_	NNS	NNS	_	7	conj	_	_
14	faces	_	VBZ	VBZ	_	0	root	_	_
15	loosing	_	VBG	VBG	_	14	xcomp	_	_
16	electricity	_	NN	NN	_	15	dobj	_	_
17	for	_	IN	IN	_	15	prep	_	_
18	lack	_	NN	NN	_	17	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	payment	_	NN	NN	_	19	pobj	_	_
21	to	_	TO	TO	_	15	prep	_	_
22	the	_	DT	DT	_	25	det	_	_
23	mosenergo	_	JJ	JJ	_	25	amod	_	_
24	electric	_	JJ	JJ	_	25	amod	_	_
25	utility	_	NN	NN	_	21	pobj	_	_
26	.	_	.	.	_	14	punct	_	_

Oracle:
(a / and, op, a2 / anthrax)
(a / and, op, b / bacterium)
(a / and, op, p / plague)
(b / bacterium, mod, o / other)
(c / complex, mod, c2 / country)
(c / complex, mod, l / laboratory)
(c / complex, mod, s / security)
(c2 / country, name, n / name)
(f / face-01, ARG0, c / complex)
(l3 / lack-01, ARG0, c / complex)
(n / name, op, "Russia")
(n3 / name, op, "Mosenergo")
(s / security, degree, h / high)
(s2 / store-01, ARG0, c / complex)
(s2 / store-01, ARG1, a / and)
(u2 / utility, mod, e2 / electricity)
(u2 / utility, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),utility,utility,false), Span(25,26,List(1),electric,electric,false), Span(19,20,List(2),lack,lack-01,false), Span(17,18,List(3),electricity,electricity,false), Span(15,16,List(4),faces,face-01,false), Span(12,13,List(5),other,other,false), Span(6,7,List(6),complex,complex,false), Span(5,6,List(7),laboratory,laboratory,false)),Map(2 -> lack-01, 5 -> other, 7 -> laboratory, 1 -> electric, 4 -> face-01, 6 -> complex, 0 -> utility, 3 -> electricity),Map(e -> electric, e2 -> electricity, l2 -> laboratory, c -> complex, l -> lack-01, u -> utility, o -> other, f -> face-01))),[Ljava.lang.String;@2b9ed6da,Annotation([Ljava.lang.String;@6c61a903,[Ljava.lang.String;@658c5a19,[Ljava.lang.String;@421e361),Annotation([Ljava.lang.String;@59d4cd39,[Ljava.lang.String;@389c4eb1,[Ledu.cmu.lti.nlp.amr.Dependency;@3fc79729),Annotation([Ljava.lang.String;@34f6515b,[Ljava.lang.String;@4b34fff9,[Ljava.lang.String;@1187c9e8),Annotation([Ljava.lang.String;@127a7a2e,[Ljava.lang.String;@14008db3,[Ledu.cmu.lti.nlp.amr.Entity;@78a773fd))
AMR:
(c / complex, mod, l2 / laboratory)
(f / face-01, ARG0, c / complex)
(f / face-01, ARG1, e2 / electricity)
(f / face-01, mod, o / other)
(l / lack-01, ARG0, e2 / electricity)
(l / lack-01, ARG1, u / utility)
(u / utility, mod, e / electric)

Decoded in 203,156 microseconds
Sentence: A large repository of anthrax, plague and other deadly bacteria stored in a high-security Russian laboratory complex 100 miles south of Moscow is facing the threat of loosing electricity.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
Spans:
Span 20-21:  100 => 100
Span 19-20:  complex => complex
Span 31-32:  electricity => electricity
Span 26-27:  facing => face-01
Span 18-19:  laboratory => laboratory
Span 1-2:  large => large
Span 24-25:  Moscow => (city :name (name :op "Moscow"))
Span 8-9:  other => other
Span 22-23:  south => south
Span 11-12:  stored => store-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 20-21:  100 => 100
Oracle Span 7-8:  and => and
Oracle Span 4-5:  anthrax => anthrax
Oracle Span 10-11:  bacteria => bacterium
Oracle Span 19-20:  complex => complex
Oracle Span 31-32:  electricity => electricity
Oracle Span 14-15:  high => high
Oracle Span 18-19:  laboratory => laboratory
Oracle Span 1-2:  large => large
Oracle Span 21-22:  miles => (distance-quantity :unit mile)
Oracle Span 24-25:  Moscow => (city :name (name :op "Moscow"))
Oracle Span 8-9:  other => other
Oracle Span 6-7:  plague => plague
Oracle Span 2-3:  repository => repository
Oracle Span 17-18:  Russian => (country :name (name :op "Russia"))
Oracle Span 16-17:  security => security
Oracle Span 22-23:  south => south
Oracle Span 11-12:  stored => store-01
Oracle Span 28-29:  threat => threaten-01

Extra span: facing => face-01
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: repository => repository
Missing span: miles => (distance-quantity :unit mile)
Missing span: security => security
Missing span: high => high
Missing span: and => and
Missing span: plague => plague
Missing span: anthrax => anthrax
Missing span: threat => threaten-01
Missing span: bacteria => bacterium
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	large	_	JJ	JJ	_	3	amod	_	_
3	repository	_	NN	NN	_	25	nsubj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	anthrax	_	NN	NN	_	7	nn	_	_
6	,	_	,	,	_	7	punct	_	_
7	plague	_	NN	NN	_	11	nn	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	other	_	JJ	JJ	_	7	conj	_	_
10	deadly	_	JJ	JJ	_	11	amod	_	_
11	bacteria	_	NNS	NNS	_	4	pobj	_	_
12	stored	_	VBN	VBN	_	3	vmod	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	a	_	DT	DT	_	18	det	_	_
15	high-security	_	JJ	JJ	_	18	amod	_	_
16	Russian	_	JJ	JJ	_	18	amod	_	_
17	laboratory	_	NN	NN	_	18	nn	_	_
18	complex	_	NN	NN	_	13	pobj	_	_
19	100	_	CD	CD	_	20	num	_	_
20	miles	_	NNS	NNS	_	21	npadvmod	_	_
21	south	_	RB	RB	_	22	advmod	_	_
22	of	_	IN	IN	_	18	prep	_	_
23	Moscow	_	NNP	NNP	_	22	pobj	_	_
24	is	_	VBZ	VBZ	_	25	aux	_	_
25	facing	_	VBG	VBG	_	0	root	_	_
26	the	_	DT	DT	_	27	det	_	_
27	threat	_	NN	NN	_	25	dobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	loosing	_	VBG	VBG	_	30	amod	_	_
30	electricity	_	NN	NN	_	28	pobj	_	_
31	.	_	.	.	_	25	punct	_	_

Oracle:
(a / and, consist, r / repository)
(a / and, op, a2 / anthrax)
(a / and, op, b / bacterium)
(a / and, op, p / plague)
(b / bacterium, mod, o / other)
(c / complex, mod, c2 / country)
(c / complex, mod, l3 / laboratory)
(c / complex, mod, s2 / security)
(c2 / country, name, n / name)
(c3 / city, name, n2 / name)
(d / distance-quantity, quant, 1 / 100)
(d / distance-quantity, unit, m / mile)
(n / name, op, "Russia")
(n2 / name, op, "Moscow")
(r / repository, mod, l / large)
(s / store-01, ARG1, r / repository)
(s / store-01, location, c / complex)
(s2 / security, degree, h / high)
(t2 / threaten-01, ARG0, r / repository)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),electricity,electricity,false), Span(26,27,List(1),facing,face-01,false), Span(24,25,List(4, 3, 2),Moscow,(city :name (name :op "Moscow")),false), Span(22,23,List(5),south,south,false), Span(20,21,List(6),100,100,false), Span(19,20,List(7),complex,complex,false), Span(18,19,List(8),laboratory,laboratory,false), Span(11,12,List(9),stored,store-01,false), Span(8,9,List(10),other,other,false), Span(1,2,List(11),large,large,false)),Map(2 -> city, 5 -> south, 8 -> laboratory, 7 -> complex, 1 -> face-01, 11 -> large, 4 -> "Moscow", 6 -> 100, 9 -> store-01, 0 -> electricity, 10 -> other, 3 -> name),Map(n -> name, e -> electricity, s2 -> store-01, s -> south, 1 -> 100, l2 -> large, l -> laboratory, c -> city, o -> other, f -> face-01, c2 -> complex))),[Ljava.lang.String;@57c03d88,Annotation([Ljava.lang.String;@16aa8654,[Ljava.lang.String;@6d7fc27,[Ljava.lang.String;@45ac5f9b),Annotation([Ljava.lang.String;@135606db,[Ljava.lang.String;@518caac3,[Ledu.cmu.lti.nlp.amr.Dependency;@68034211),Annotation([Ljava.lang.String;@4f74980d,[Ljava.lang.String;@6c372fe6,[Ljava.lang.String;@58594a11),Annotation([Ljava.lang.String;@2a3888c1,[Ljava.lang.String;@4167d97b,[Ledu.cmu.lti.nlp.amr.Entity;@14fa86ae))
AMR:
(1 / 100, location, l / laboratory)
(c / city, name, n / name)
(f / face-01, ARG0, c / city)
(f / face-01, ARG1, s2 / store-01)
(l2 / large, mod, s / south)
(n / name, op, "Moscow")
(o / other, op, f / face-01)
(s / south, op, c / city)
(s2 / store-01, ARG0, e / electricity)
(s2 / store-01, ARG1, l / laboratory)
(s2 / store-01, location, c2 / complex)

Decoded in 225,408 microseconds
Sentence: An official from the Moscow region's mosenergo electric utility arrived recently at the Russian laboratory complex and threatened to turn off the electricity for lack of payment.

NER Entity: (country :name (name :op "Moscow"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Moscow"))
Spans:
Span 10-11:  arrived => arrive-01
Span 16-17:  complex => complex
Span 8-9:  electric => electric
Span 23-24:  electricity => electricity
Span 15-16:  laboratory => laboratory
Span 25-26:  lack => lack-01
Span 4-5:  Moscow => (city :name (name :op "Moscow"))
Span 11-12:  recently => recent
Span 5-6:  region => region
Span 18-19:  threatened => threaten-01
Span 9-10:  utility => utility

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 17-18:  and => and
Oracle Span 10-11:  arrived => arrive-01
Oracle Span 16-17:  complex => complex
Oracle Span 23-24:  electricity => electricity
Oracle Span 15-16:  laboratory => laboratory
Oracle Span 25-26:  lack => lack-01
Oracle Span 4-5:  Moscow => (city :name (name :op "Moscow"))
Oracle Span 7-8:  mosenergo => (name :op "Mosenergo")
Oracle Span 1-2:  official => (have-org-role-91 :ARG2 official)
Oracle Span 11-12:  recently => recent
Oracle Span 5-6:  region => region
Oracle Span 14-15:  Russian => (country :name (name :op "Russia"))
Oracle Span 18-19:  threatened => threaten-01
Oracle Span 20-21:  turn => turn-07
Oracle Span 9-10:  utility => utility

Extra span: electric => electric
Missing span: mosenergo => (name :op "Mosenergo")
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: and => and
Missing span: turn => turn-07
Missing span: official => (have-org-role-91 :ARG2 official)
Dependencies:
1	An	_	DT	DT	_	2	det	_	_
2	official	_	NN	NN	_	11	nsubj	_	_
3	from	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Moscow	_	NNP	NNP	_	6	nn	_	_
6	region	_	NN	NN	_	10	poss	_	_
7	's	_	POS	POS	_	6	possessive	_	_
8	mosenergo	_	JJ	JJ	_	10	amod	_	_
9	electric	_	JJ	JJ	_	10	amod	_	_
10	utility	_	NN	NN	_	3	pobj	_	_
11	arrived	_	VBD	VBD	_	0	root	_	_
12	recently	_	RB	RB	_	11	advmod	_	_
13	at	_	IN	IN	_	11	prep	_	_
14	the	_	DT	DT	_	17	det	_	_
15	Russian	_	JJ	JJ	_	17	amod	_	_
16	laboratory	_	NN	NN	_	17	nn	_	_
17	complex	_	NN	NN	_	13	pobj	_	_
18	and	_	CC	CC	_	11	cc	_	_
19	threatened	_	VBD	VBD	_	11	conj	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	turn	_	VB	VB	_	19	xcomp	_	_
22	off	_	RP	RP	_	21	prt	_	_
23	the	_	DT	DT	_	24	det	_	_
24	electricity	_	NN	NN	_	21	dobj	_	_
25	for	_	IN	IN	_	24	prep	_	_
26	lack	_	NN	NN	_	25	pobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	payment	_	NN	NN	_	27	pobj	_	_
29	.	_	.	.	_	11	punct	_	_

Oracle:
(a / arrive-01, ARG4, c3 / complex)
(a / arrive-01, time, r2 / recent)
(a2 / and, op, a / arrive-01)
(a2 / and, op, t / threaten-01)
(c2 / city, name, n2 / name)
(c3 / complex, mod, c4 / country)
(c3 / complex, mod, l / laboratory)
(c4 / country, name, n3 / name)
(h / have-org-role-91, ARG1, u2 / utility)
(h / have-org-role-91, ARG2, o / official)
(n2 / name, op, "Moscow")
(n3 / name, op, "Russia")
(n4 / name, op, "Mosenergo")
(r / region, mod, c2 / city)
(t / threaten-01, ARG1, t2 / turn-07)
(t2 / turn-07, ARG1, e2 / electricity)
(u2 / utility, location, r / region)
(u2 / utility, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),lack,lack-01,false), Span(23,24,List(1),electricity,electricity,false), Span(18,19,List(2),threatened,threaten-01,false), Span(16,17,List(3),complex,complex,false), Span(15,16,List(4),laboratory,laboratory,false), Span(11,12,List(5),recently,recent,false), Span(10,11,List(6),arrived,arrive-01,false), Span(9,10,List(7),utility,utility,false), Span(8,9,List(8),electric,electric,false), Span(5,6,List(9),region,region,false), Span(4,5,List(12, 11, 10),Moscow,(city :name (name :op "Moscow")),false)),Map(2 -> threaten-01, 5 -> recent, 12 -> "Moscow", 8 -> electric, 7 -> utility, 1 -> electricity, 4 -> laboratory, 11 -> name, 6 -> arrive-01, 0 -> lack-01, 9 -> region, 3 -> complex, 10 -> city),Map(n -> name, e -> electricity, t -> threaten-01, e2 -> electric, r2 -> region, a -> arrive-01, r -> recent, l2 -> laboratory, u -> utility, c -> complex, l -> lack-01, c2 -> city))),[Ljava.lang.String;@6e15fe2,Annotation([Ljava.lang.String;@68f1b17f,[Ljava.lang.String;@1722011b,[Ljava.lang.String;@57ad2aa7),Annotation([Ljava.lang.String;@5b3f61ff,[Ljava.lang.String;@3e2059ae,[Ledu.cmu.lti.nlp.amr.Dependency;@398dada8),Annotation([Ljava.lang.String;@7cb502c,[Ljava.lang.String;@275bf9b3,[Ljava.lang.String;@1b8a29df),Annotation([Ljava.lang.String;@4fbe37eb,[Ljava.lang.String;@12a94400,[Ledu.cmu.lti.nlp.amr.Entity;@6a47b187))
AMR:
(a / arrive-01, ARG0, u / utility)
(a / arrive-01, ARG1, e / electricity)
(a / arrive-01, ARG2, c / complex)
(a / arrive-01, time, r / recent)
(c / complex, mod, l2 / laboratory)
(c2 / city, name, n / name)
(l / lack-01, ARG0, c2 / city)
(l / lack-01, ARG1, e / electricity)
(n / name, op, "Moscow")
(r2 / region, part, c2 / city)
(t / threaten-01, ARG1, a / arrive-01)
(u / utility, mod, e2 / electric)

Decoded in 339,309 microseconds
Sentence: The Russian laboratory complex is a 90-building campus and served as the location for Russia's secret biological weapons program in the Soviet era.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Soviet"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 6-7:  90 => 90
Span 19-20:  biological => biology
Span 9-10:  campus => campus
Span 3-4:  complex => complex
Span 25-26:  era => era
Span 2-3:  laboratory => laboratory
Span 14-15:  location => location
Span 21-22:  program => program
Span 18-19:  secret => secret
Span 11-12:  served => serve-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 6-7:  90 => 90
Oracle Span 10-11:  and => and
Oracle Span 19-20:  biological => biology
Oracle Span 8-9:  building => building
Oracle Span 9-10:  campus => campus
Oracle Span 3-4:  complex => complex
Oracle Span 25-26:  era => era
Oracle Span 2-3:  laboratory => laboratory
Oracle Span 14-15:  location => location
Oracle Span 21-22:  program => program
Oracle Span 16-17:  Russia => (country :name (name :op "Russia"))
Oracle Span 18-19:  secret => secret
Oracle Span 11-12:  served => serve-01
Oracle Span 24-25:  Soviet => (country :name (name :op "Soviet"))
Oracle Span 20-21:  weapons => weapon

Missing span: Russia => (country :name (name :op "Russia"))
Missing span: Soviet => (country :name (name :op "Soviet"))
Missing span: and => and
Missing span: weapons => weapon
Missing span: building => building
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Russian	_	JJ	JJ	_	4	amod	_	_
3	laboratory	_	NN	NN	_	4	nn	_	_
4	complex	_	NN	NN	_	8	nsubj	_	_
5	is	_	VBZ	VBZ	_	8	cop	_	_
6	a	_	DT	DT	_	8	det	_	_
7	90-building	_	JJ	JJ	_	8	amod	_	_
8	campus	_	NN	NN	_	0	root	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	served	_	VBD	VBD	_	8	conj	_	_
11	as	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	location	_	NN	NN	_	11	pobj	_	_
14	for	_	IN	IN	_	10	prep	_	_
15	Russia	_	NNP	NNP	_	20	poss	_	_
16	's	_	POS	POS	_	15	possessive	_	_
17	secret	_	JJ	JJ	_	20	amod	_	_
18	biological	_	JJ	JJ	_	20	amod	_	_
19	weapons	_	NNS	NNS	_	20	nn	_	_
20	program	_	NN	NN	_	14	pobj	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	24	det	_	_
23	Soviet	_	JJ	JJ	_	24	amod	_	_
24	era	_	NN	NN	_	21	pobj	_	_
25	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, c / campus)
(a / and, op, s / serve-01)
(b / building, consist, c / campus)
(b / building, quant, 9 / 90)
(c / campus, domain, c2 / complex)
(c2 / complex, mod, c3 / country)
(c2 / complex, mod, l / laboratory)
(c3 / country, name, n / name)
(c4 / country, name, n2 / name)
(e / era, mod, c4 / country)
(n / name, op, "Russia")
(n2 / name, op, "Soviet")
(p / program, location, l2 / location)
(p / program, mod, s2 / secret)
(p / program, topic, w / weapon)
(s / serve-01, ARG0, c / campus)
(s / serve-01, ARG1, l2 / location)
(s / serve-01, time, e / era)
(w / weapon, mod, b2 / biology)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),era,era,false), Span(21,22,List(1),program,program,false), Span(19,20,List(2),biological,biology,false), Span(18,19,List(3),secret,secret,false), Span(14,15,List(4),location,location,false), Span(11,12,List(5),served,serve-01,false), Span(9,10,List(6),campus,campus,false), Span(6,7,List(7),90,90,false), Span(3,4,List(8),complex,complex,false), Span(2,3,List(9),laboratory,laboratory,false)),Map(2 -> biology, 5 -> serve-01, 8 -> complex, 7 -> 90, 1 -> program, 4 -> location, 6 -> campus, 9 -> laboratory, 0 -> era, 3 -> secret),Map(e -> era, s2 -> serve-01, b -> biology, s -> secret, p -> program, l2 -> laboratory, c -> campus, l -> location, 9 -> 90, c2 -> complex))),[Ljava.lang.String;@2049a9c1,Annotation([Ljava.lang.String;@1ef6d34c,[Ljava.lang.String;@46271dd6,[Ljava.lang.String;@11bb571c),Annotation([Ljava.lang.String;@7c51f34b,[Ljava.lang.String;@5495333e,[Ledu.cmu.lti.nlp.amr.Dependency;@2a225dd7),Annotation([Ljava.lang.String;@61eaec38,[Ljava.lang.String;@125290e5,[Ljava.lang.String;@6fa34d52),Annotation([Ljava.lang.String;@57576994,[Ljava.lang.String;@616ac46a,[Ledu.cmu.lti.nlp.amr.Entity;@67b9b51a))
AMR:
(c / campus, domain, c2 / complex)
(c / campus, mod, 9 / 90)
(c2 / complex, mod, l2 / laboratory)
(p / program, mod, b / biology)
(p / program, mod, s / secret)
(p / program, poss, l / location)
(p / program, purpose, e / era)
(s2 / serve-01, ARG0, c2 / complex)
(s2 / serve-01, ARG1, l / location)

Decoded in 189,456 microseconds
Sentence: An incorrect headline in the newspaper Izvestia stated that deadly viruses from a Moscow regional depository threaten Moscow.

NER Entity: (organization :name (name :op "Izvestia"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
Spans:
Span 2-3:  headline => headline
Span 17-18:  Moscow => (city :name (name :op "Moscow"))
Span 13-14:  Moscow => (city :name (name :op "Moscow"))
Span 5-6:  newspaper => newspaper
Span 14-15:  regional => region
Span 16-17:  threaten => threaten-01
Span 10-11:  viruses => virus

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 15-16:  depository => depository
Oracle Span 2-3:  headline => headline
Oracle Span 1-2:  incorrect => (correct :polarity -)
Oracle Span 6-7:  Izvestia => (name :op "Izvestia")
Oracle Span 13-14:  Moscow => (city :name (name :op "Moscow"))
Oracle Span 5-6:  newspaper => newspaper
Oracle Span 14-15:  regional => region
Oracle Span 7-8:  stated => state-01
Oracle Span 16-17:  threaten => threaten-01
Oracle Span 10-11:  viruses => virus

Extra span: Moscow => (city :name (name :op "Moscow"))
Missing span: Izvestia => (name :op "Izvestia")
Missing span: stated => state-01
Missing span: depository => depository
Missing span: incorrect => (correct :polarity -)
Dependencies:
1	An	_	DT	DT	_	3	det	_	_
2	incorrect	_	JJ	JJ	_	3	amod	_	_
3	headline	_	NN	NN	_	8	nsubj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	newspaper	_	NN	NN	_	7	nn	_	_
7	Izvestia	_	NNP	NNP	_	4	pobj	_	_
8	stated	_	VBD	VBD	_	0	root	_	_
9	that	_	IN	IN	_	17	mark	_	_
10	deadly	_	JJ	JJ	_	11	amod	_	_
11	viruses	_	NNS	NNS	_	17	nsubj	_	_
12	from	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	16	det	_	_
14	Moscow	_	NNP	NNP	_	16	nn	_	_
15	regional	_	JJ	JJ	_	16	amod	_	_
16	depository	_	NN	NN	_	12	pobj	_	_
17	threaten	_	VBP	VBP	_	8	ccomp	_	_
18	Moscow	_	NNP	NNP	_	17	dobj	_	_
19	.	_	.	.	_	8	punct	_	_

Oracle:
(c / correct, polarity, -)
(c2 / city, name, n3 / name)
(d2 / depository, mod, c2 / city)
(d2 / depository, mod, r / region)
(h / headline, medium, n / newspaper)
(h / headline, mod, c / correct)
(n / newspaper, name, n2 / name)
(n2 / name, op, "Izvestia")
(n3 / name, op, "Moscow")
(s / state-01, ARG0, h / headline)
(s / state-01, ARG1, t / threaten-01)
(t / threaten-01, ARG0, v / virus)
(t / threaten-01, ARG2, c2 / city)
(v / virus, source, d2 / depository)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(2, 1, 0),Moscow,(city :name (name :op "Moscow")),false), Span(16,17,List(3),threaten,threaten-01,false), Span(14,15,List(4),regional,region,false), Span(13,14,List(7, 6, 5),Moscow,(city :name (name :op "Moscow")),false), Span(10,11,List(8),viruses,virus,false), Span(5,6,List(9),newspaper,newspaper,false), Span(2,3,List(10),headline,headline,false)),Map(2 -> "Moscow", 5 -> city, 8 -> virus, 7 -> "Moscow", 1 -> name, 4 -> region, 6 -> name, 9 -> newspaper, 0 -> city, 10 -> headline, 3 -> threaten-01),Map(n -> name, h -> headline, t -> threaten-01, v -> virus, n3 -> newspaper, r -> region, c -> city, n2 -> name, c2 -> city))),[Ljava.lang.String;@1205bd62,Annotation([Ljava.lang.String;@7ef27d7f,[Ljava.lang.String;@490caf5f,[Ljava.lang.String;@6337c201),Annotation([Ljava.lang.String;@5c669da8,[Ljava.lang.String;@31920ade,[Ledu.cmu.lti.nlp.amr.Dependency;@1d483de4),Annotation([Ljava.lang.String;@4032d386,[Ljava.lang.String;@28d18df5,[Ljava.lang.String;@934b6cb),Annotation([Ljava.lang.String;@55cf0d14,[Ljava.lang.String;@3b74ac8,[Ledu.cmu.lti.nlp.amr.Entity;@27adc16e))
AMR:
(c / city, mod, r / region)
(c / city, name, n / name)
(c2 / city, name, n2 / name)
(h / headline, poss, v / virus)
(n / name, op, "Moscow")
(n2 / name, op, "Moscow")
(n3 / newspaper, op, t / threaten-01)
(t / threaten-01, ARG0, v / virus)
(t / threaten-01, ARG1, c / city)
(v / virus, location, c2 / city)

Decoded in 76,593 microseconds
Sentence: There are no viruses at the State Scientific Center of applied Microbiology in obolensk.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Spans:
Span 2-3:  no => -
Span 6-12:  State Scientific Center of applied Microbiology => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Span 3-4:  viruses => virus

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  no => -
Oracle Span 13-14:  obolensk => (city :name (name :op "Obolensk"))
Oracle Span 6-12:  State Scientific Center of applied Microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 3-4:  viruses => virus

Incorrect span: State Scientific Center of applied Microbiology => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Missing span: State Scientific Center of applied Microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: obolensk => (city :name (name :op "Obolensk"))
Dependencies:
1	There	_	EX	EX	_	2	expl	_	_
2	are	_	VBP	VBP	_	0	root	_	_
3	no	_	DT	DT	_	4	neg	_	_
4	viruses	_	JJ	JJ	_	2	acomp	_	_
5	at	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	State	_	NNP	NNP	_	9	nn	_	_
8	Scientific	_	NNP	NNP	_	9	nn	_	_
9	Center	_	NNP	NNP	_	5	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	applied	_	JJ	JJ	_	12	amod	_	_
12	Microbiology	_	NNP	NNP	_	10	pobj	_	_
13	in	_	IN	IN	_	4	prep	_	_
14	obolensk	_	NN	NN	_	13	pobj	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(c / city, name, n2 / name)
(n / name, op, "Applied")
(n / name, op, "Center")
(n / name, op, "Microbiology")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Obolensk")
(r / research-institute, location, c / city)
(r / research-institute, name, n / name)
(v / virus, polarity, - / -)

Input(Some(Graph(null,ArrayBuffer(Span(6,12,List(7, 6, 5, 4, 3, 2, 1, 0),State Scientific Center of applied Microbiology,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology")),false), Span(3,4,List(8),viruses,virus,false), Span(2,3,List(9),no,-,false)),Map(2 -> "State", 5 -> "of", 8 -> virus, 7 -> "Microbiology", 1 -> name, 4 -> "Center", 6 -> "applied", 9 -> -, 0 -> organization, 3 -> "Scientific"),Map(n -> name, v -> virus, - -> -, o -> organization))),[Ljava.lang.String;@b83a9be,Annotation([Ljava.lang.String;@2609b277,[Ljava.lang.String;@1fd14d74,[Ljava.lang.String;@563e4951),Annotation([Ljava.lang.String;@4066c471,[Ljava.lang.String;@2b175c00,[Ledu.cmu.lti.nlp.amr.Dependency;@3eb81efb),Annotation([Ljava.lang.String;@1ae8bcbc,[Ljava.lang.String;@6cdba6dc,[Ljava.lang.String;@7d3d101b),Annotation([Ljava.lang.String;@30c8681,[Ljava.lang.String;@5cdec700,[Ledu.cmu.lti.nlp.amr.Entity;@6d026701))
AMR:
(n / name, op, "Center")
(n / name, op, "Microbiology")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "applied")
(n / name, op, "of")
(o / organization, mod, v / virus)
(o / organization, name, n / name)
(v / virus, mod, - / -)

Decoded in 36,516 microseconds
Sentence: At the State Scientific Center of applied microbiology there is every kind of deadly bacteria that was studied for use in the secret biological weapons program of the Soviet Union.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (country :name (name :op "Soviet" :op "Union"))
Spans:
Span 23-24:  biological => biology
Span 10-11:  every => every
Span 11-12:  kind => kind
Span 25-26:  program => program
Span 22-23:  secret => secret
Span 28-30:  Soviet Union => (country :name (name :op "Union" :op "Soviet"))
Span 2-6:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 17-18:  studied => study-01
Span 19-20:  use => use-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 14-15:  bacteria => bacterium
Oracle Span 23-24:  biological => biology
Oracle Span 10-11:  every => every
Oracle Span 11-12:  kind => kind
Oracle Span 25-26:  program => program
Oracle Span 22-23:  secret => secret
Oracle Span 28-30:  Soviet Union => (country :name (name :op "Union" :op "Soviet"))
Oracle Span 2-8:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 17-18:  studied => study-01
Oracle Span 19-20:  use => use-01
Oracle Span 24-25:  weapons => weapon

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: weapons => weapon
Missing span: bacteria => bacterium
Dependencies:
1	At	_	IN	IN	_	10	prep	_	_
2	the	_	DT	DT	_	5	det	_	_
3	State	_	NNP	NNP	_	5	nn	_	_
4	Scientific	_	NNP	NNP	_	5	nn	_	_
5	Center	_	NNP	NNP	_	1	pobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	applied	_	JJ	JJ	_	8	amod	_	_
8	microbiology	_	NN	NN	_	6	pobj	_	_
9	there	_	EX	EX	_	10	expl	_	_
10	is	_	VBZ	VBZ	_	0	root	_	_
11	every	_	DT	DT	_	12	det	_	_
12	kind	_	NN	NN	_	10	nsubj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	deadly	_	JJ	JJ	_	15	amod	_	_
15	bacteria	_	NNS	NNS	_	13	pobj	_	_
16	that	_	WDT	WDT	_	18	nsubjpass	_	_
17	was	_	VBD	VBD	_	18	auxpass	_	_
18	studied	_	VBN	VBN	_	12	rcmod	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	use	_	NN	NN	_	19	pobj	_	_
21	in	_	IN	IN	_	18	prep	_	_
22	the	_	DT	DT	_	26	det	_	_
23	secret	_	JJ	JJ	_	26	amod	_	_
24	biological	_	JJ	JJ	_	26	amod	_	_
25	weapons	_	NNS	NNS	_	26	nn	_	_
26	program	_	NN	NN	_	21	pobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	the	_	DT	DT	_	30	det	_	_
29	Soviet	_	NNP	NNP	_	30	nn	_	_
30	Union	_	NNP	NNP	_	27	pobj	_	_
31	.	_	.	.	_	10	punct	_	_

Oracle:
(b4 / bacterium, mod, k / kind)
(c / country, name, n2 / name)
(k / kind, mod, e / every)
(n / name, op, "Applied")
(n / name, op, "Center")
(n / name, op, "Microbiology")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Soviet")
(n2 / name, op, "Union")
(p / program, mod, s2 / secret)
(p / program, poss, c / country)
(p / program, topic, w / weapon)
(r / research-institute, name, n / name)
(s / study-01, ARG1, b4 / bacterium)
(s / study-01, purpose, u / use-01)
(u / use-01, ARG1, b4 / bacterium)
(u / use-01, ARG2, p / program)
(w / weapon, mod, b2 / biology)

Input(Some(Graph(null,ArrayBuffer(Span(28,30,List(3, 2, 1, 0),Soviet Union,(country :name (name :op "Union" :op "Soviet")),false), Span(25,26,List(4),program,program,false), Span(23,24,List(5),biological,biology,false), Span(22,23,List(6),secret,secret,false), Span(19,20,List(7),use,use-01,false), Span(17,18,List(8),studied,study-01,false), Span(11,12,List(9),kind,kind,false), Span(10,11,List(10),every,every,false), Span(2,6,List(16, 15, 14, 13, 12, 11),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false)),Map(2 -> "Union", 5 -> biology, 12 -> name, 15 -> "Center", 8 -> study-01, 7 -> use-01, 1 -> name, 4 -> program, 11 -> organization, 14 -> "Scientific", 6 -> secret, 0 -> country, 9 -> kind, 16 -> "of", 3 -> "Soviet", 10 -> every, 13 -> "State"),Map(e -> every, n -> name, k -> kind, s2 -> study-01, b -> biology, s -> secret, p -> program, u -> use-01, c -> country, o -> organization, n2 -> name))),[Ljava.lang.String;@78aa1f72,Annotation([Ljava.lang.String;@1f75a668,[Ljava.lang.String;@35399441,[Ljava.lang.String;@4b7dc788),Annotation([Ljava.lang.String;@6304101a,[Ljava.lang.String;@5170bcf4,[Ledu.cmu.lti.nlp.amr.Dependency;@2812b107),Annotation([Ljava.lang.String;@df6620a,[Ljava.lang.String;@4e31276e,[Ljava.lang.String;@1a72a540),Annotation([Ljava.lang.String;@27d5a580,[Ljava.lang.String;@198d6542,[Ledu.cmu.lti.nlp.amr.Entity;@5e403b4a))
AMR:
(c / country, name, n / name)
(k / kind, mod, e / every)
(n / name, op, "Soviet")
(n / name, op, "Union")
(n2 / name, op, "Center")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(o / organization, name, n2 / name)
(p / program, location, c / country)
(p / program, mod, b / biology)
(p / program, mod, s / secret)
(s2 / study-01, ARG0, k / kind)
(s2 / study-01, ARG1, p / program)
(s2 / study-01, ARG2, u / use-01)
(u / use-01, ARG0, o / organization)

Decoded in 327,882 microseconds
Sentence: A large virus repository is located in Siberia.

NER Entity: (country :name (name :op "Siberia"))
NER Entity: (country :name (name :op "Siberia"))
Spans:
Span 1-2:  large => large
Span 7-8:  Siberia => (country-region :name (name :op "Siberia"))
Span 2-3:  virus => virus

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  large => large
Oracle Span 3-4:  repository => repository
Oracle Span 7-8:  Siberia => (country-region :name (name :op "Siberia"))
Oracle Span 2-3:  virus => virus

Missing span: repository => repository
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	large	_	JJ	JJ	_	3	amod	_	_
3	virus	_	NN	NN	_	6	nsubjpass	_	_
4	repository	_	RB	RB	_	6	advmod	_	_
5	is	_	VBZ	VBZ	_	6	auxpass	_	_
6	located	_	VBN	VBN	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	Siberia	_	NNP	NNP	_	7	pobj	_	_
9	.	_	.	.	_	6	punct	_	_

Oracle:
(c / country-region, name, n / name)
(n / name, op, "Siberia")
(r / repository, mod, l / large)
(r / repository, mod, v / virus)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(2, 1, 0),Siberia,(country-region :name (name :op "Siberia")),false), Span(2,3,List(3),virus,virus,false), Span(1,2,List(4),large,large,false)),Map(2 -> "Siberia", 1 -> name, 4 -> large, 0 -> country-region, 3 -> virus),Map(n -> name, v -> virus, l -> large, c -> country-region))),[Ljava.lang.String;@5117dd67,Annotation([Ljava.lang.String;@5be49b60,[Ljava.lang.String;@2931522b,[Ljava.lang.String;@7674b62c),Annotation([Ljava.lang.String;@19e7a160,[Ljava.lang.String;@662706a7,[Ledu.cmu.lti.nlp.amr.Dependency;@45a4b042),Annotation([Ljava.lang.String;@16b2bb0c,[Ljava.lang.String;@327af41b,[Ljava.lang.String;@6cb6decd),Annotation([Ljava.lang.String;@c7045b9,[Ljava.lang.String;@f99f5e0,[Ledu.cmu.lti.nlp.amr.Entity;@6aa61224))
AMR:
(c / country-region, mod, v / virus)
(c / country-region, name, n / name)
(n / name, op, "Siberia")
(v / virus, mod, l / large)

Decoded in 18,797 microseconds
Sentence: Both Russian and Western officials have stated that it is unlikely that any public health threat would result from a power cutoff at the State Scientific Center of applied microbiology.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 12-13:  any => any
Span 0-1:  Both => both
Span 14-15:  health => health
Span 4-5:  officials => (have-org-role-91 :ARG2 official)
Span 20-21:  power => power
Span 13-14:  public => public
Span 17-18:  result => result-01
Span 24-28:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 10-11:  unlikely => (likely :polarity -)
Span 3-4:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 2-3:  and => and
Oracle Span 12-13:  any => any
Oracle Span 5-6:  have => (person :ARG0-of have-org-role-91)
Oracle Span 14-15:  health => health
Oracle Span 4-5:  officials => official
Oracle Span 20-21:  power => power
Oracle Span 13-14:  public => public
Oracle Span 17-18:  result => result-01
Oracle Span 1-2:  Russian => (have-org-role-91 :ARG1 (country :name (name :op "Russia")))
Oracle Span 24-30:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 6-7:  stated => state-01
Oracle Span 15-16:  threat => threaten-01
Oracle Span 10-11:  unlikely => (likely :polarity -)
Oracle Span 3-4:  Western => (world-region :name (name :op "West"))

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: officials => (have-org-role-91 :ARG2 official)
Extra span: Both => both
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: Russian => (have-org-role-91 :ARG1 (country :name (name :op "Russia")))
Missing span: stated => state-01
Missing span: and => and
Missing span: officials => official
Missing span: threat => threaten-01
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	Both	_	DT	DT	_	5	det	_	_
2	Russian	_	JJ	JJ	_	5	amod	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	Western	_	JJ	JJ	_	2	conj	_	_
5	officials	_	NNS	NNS	_	7	nsubj	_	_
6	have	_	VBP	VBP	_	7	aux	_	_
7	stated	_	VBN	VBN	_	0	root	_	_
8	that	_	IN	IN	_	11	mark	_	_
9	it	_	PRP	PRP	_	11	nsubj	_	_
10	is	_	VBZ	VBZ	_	11	cop	_	_
11	unlikely	_	JJ	JJ	_	7	ccomp	_	_
12	that	_	IN	IN	_	18	mark	_	_
13	any	_	DT	DT	_	16	det	_	_
14	public	_	JJ	JJ	_	16	amod	_	_
15	health	_	NN	NN	_	16	nn	_	_
16	threat	_	NN	NN	_	18	nsubj	_	_
17	would	_	MD	MD	_	18	aux	_	_
18	result	_	VB	VB	_	11	ccomp	_	_
19	from	_	IN	IN	_	18	prep	_	_
20	a	_	DT	DT	_	22	det	_	_
21	power	_	NN	NN	_	22	nn	_	_
22	cutoff	_	NN	NN	_	19	pobj	_	_
23	at	_	IN	IN	_	18	prep	_	_
24	the	_	DT	DT	_	27	det	_	_
25	State	_	NNP	NNP	_	27	nn	_	_
26	Scientific	_	NNP	NNP	_	27	nn	_	_
27	Center	_	NNP	NNP	_	23	pobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	applied	_	JJ	JJ	_	30	amod	_	_
30	microbiology	_	NN	NN	_	28	pobj	_	_
31	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, p4 / person)
(c / country, name, n / name)
(h / health, mod, p / public)
(h2 / have-org-role-91, ARG1, c / country)
(h3 / have-org-role-91, ARG0, p4 / person)
(h3 / have-org-role-91, ARG1, w / world-region)
(h3 / have-org-role-91, ARG2, o4 / official)
(l / likely, domain, r / result-01)
(l / likely, polarity, -)
(n / name, op, "Russia")
(n2 / name, op, "West")
(n3 / name, op, "Applied")
(n3 / name, op, "Center")
(n3 / name, op, "Microbiology")
(n3 / name, op, "Scientific")
(n3 / name, op, "State")
(n3 / name, op, "of")
(r / result-01, ARG2, t / threaten-01)
(r2 / research-institute, name, n3 / name)
(s / state-01, ARG0, a / and)
(s / state-01, ARG1, l / likely)
(t / threaten-01, ARG1, h / health)
(t / threaten-01, mod, a2 / any)
(w / world-region, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(24,28,List(5, 4, 3, 2, 1, 0),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(20,21,List(6),power,power,false), Span(17,18,List(7),result,result-01,false), Span(14,15,List(8),health,health,false), Span(13,14,List(9),public,public,false), Span(12,13,List(10),any,any,false), Span(10,11,List(12, 11),unlikely,(likely :polarity -),false), Span(4,5,List(14, 13),officials,(have-org-role-91 :ARG2 official),false), Span(3,4,List(17, 16, 15),Western,(world-region :name (name :op "West")),false), Span(0,1,List(18),Both,both,false)),Map(2 -> "State", 5 -> "of", 12 -> -, 15 -> world-region, 8 -> health, 18 -> both, 7 -> result-01, 17 -> "West", 1 -> name, 4 -> "Center", 11 -> likely, 14 -> official, 6 -> power, 0 -> organization, 9 -> public, 16 -> name, 3 -> "Scientific", 10 -> any, 13 -> have-org-role-91),Map(n -> name, w -> world-region, h -> health, h2 -> have-org-role-91, b -> both, p2 -> public, p -> power, a -> any, o2 -> official, r -> result-01, l -> likely, o -> organization, n2 -> name))),[Ljava.lang.String;@30bce90b,Annotation([Ljava.lang.String;@3e6f3f28,[Ljava.lang.String;@7e19ebf0,[Ljava.lang.String;@2474f125),Annotation([Ljava.lang.String;@7357a011,[Ljava.lang.String;@3406472c,[Ledu.cmu.lti.nlp.amr.Dependency;@5717c37),Annotation([Ljava.lang.String;@68f4865,[Ljava.lang.String;@4816278d,[Ljava.lang.String;@4eaf3684),Annotation([Ljava.lang.String;@40317ba2,[Ljava.lang.String;@3c01cfa1,[Ledu.cmu.lti.nlp.amr.Entity;@45d2ade3))
AMR:
(a / any, op, h2 / have-org-role-91)
(h / health, mod, p2 / public)
(h2 / have-org-role-91, ARG0, p / power)
(h2 / have-org-role-91, ARG1, o / organization)
(h2 / have-org-role-91, ARG2, o2 / official)
(h2 / have-org-role-91, mod, w / world-region)
(l / likely, compared-to, r / result-01)
(l / likely, polarity, -)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "West")
(o / organization, name, n / name)
(r / result-01, ARG0, b / both)
(r / result-01, ARG1, h / health)
(r / result-01, ARG2, o / organization)
(w / world-region, name, n2 / name)

Decoded in 274,518 microseconds
Sentence: Russian and Western officials have stated that there is enough uncertainty that they could not be positive a loss of power at the State Scientific Center of applied microbiology would not cause a public health threat.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 13-14:  could => possible
Span 9-10:  enough => enough
Span 34-35:  health => health
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 16-17:  positive => positive
Span 20-21:  power => power
Span 33-34:  public => public
Span 23-27:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 10-11:  uncertainty => (certainty :polarity -)
Span 2-3:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 31-32:  cause => cause-01
Oracle Span 13-14:  could => possible
Oracle Span 9-10:  enough => enough
Oracle Span 4-5:  have => (person :ARG0-of have-org-role-91)
Oracle Span 34-35:  health => health
Oracle Span 3-4:  officials => official
Oracle Span 20-21:  power => power
Oracle Span 33-34:  public => public
Oracle Span 0-1:  Russian => (have-org-role-91 :ARG1 (country :name (name :op "Russia")))
Oracle Span 23-29:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 5-6:  stated => state-01
Oracle Span 35-36:  threat => threat
Oracle Span 10-11:  uncertainty => certainty
Oracle Span 2-3:  Western => (world-region :name (name :op "West"))

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Extra span: positive => positive
Incorrect span: uncertainty => (certainty :polarity -)
Incorrect span: officials => (have-org-role-91 :ARG2 official)
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: Russian => (have-org-role-91 :ARG1 (country :name (name :op "Russia")))
Missing span: stated => state-01
Missing span: uncertainty => certainty
Missing span: cause => cause-01
Missing span: threat => threat
Missing span: and => and
Missing span: officials => official
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	Russian	_	JJ	JJ	_	4	amod	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Western	_	JJ	JJ	_	1	conj	_	_
4	officials	_	NNS	NNS	_	6	nsubj	_	_
5	have	_	VBP	VBP	_	6	aux	_	_
6	stated	_	VBN	VBN	_	0	root	_	_
7	that	_	IN	IN	_	9	mark	_	_
8	there	_	EX	EX	_	9	expl	_	_
9	is	_	VBZ	VBZ	_	6	ccomp	_	_
10	enough	_	JJ	JJ	_	11	amod	_	_
11	uncertainty	_	NN	NN	_	9	nsubj	_	_
12	that	_	IN	IN	_	17	mark	_	_
13	they	_	PRP	PRP	_	17	nsubj	_	_
14	could	_	MD	MD	_	17	aux	_	_
15	not	_	RB	RB	_	17	neg	_	_
16	be	_	VB	VB	_	17	cop	_	_
17	positive	_	JJ	JJ	_	9	ccomp	_	_
18	a	_	DT	DT	_	19	det	_	_
19	loss	_	NN	NN	_	32	nsubj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	power	_	NN	NN	_	20	pobj	_	_
22	at	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	26	det	_	_
24	State	_	NNP	NNP	_	26	nn	_	_
25	Scientific	_	NNP	NNP	_	26	nn	_	_
26	Center	_	NNP	NNP	_	22	pobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	applied	_	JJ	JJ	_	29	amod	_	_
29	microbiology	_	NN	NN	_	27	pobj	_	_
30	would	_	MD	MD	_	32	aux	_	_
31	not	_	RB	RB	_	32	neg	_	_
32	cause	_	VB	VB	_	17	ccomp	_	_
33	a	_	DT	DT	_	36	det	_	_
34	public	_	JJ	JJ	_	36	amod	_	_
35	health	_	NN	NN	_	36	nn	_	_
36	threat	_	NN	NN	_	32	dobj	_	_
37	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, p5 / person)
(c / country, name, n / name)
(c2 / certainty, mod, e / enough)
(c3 / cause-01, ARG0, c2 / certainty)
(c3 / cause-01, ARG1, p / possible)
(h / health, mod, p4 / public)
(h2 / have-org-role-91, ARG1, c / country)
(h3 / have-org-role-91, ARG0, p5 / person)
(h3 / have-org-role-91, ARG1, w / world-region)
(h3 / have-org-role-91, ARG2, o2 / official)
(n / name, op, "Russia")
(n2 / name, op, "West")
(n3 / name, op, "Applied")
(n3 / name, op, "Center")
(n3 / name, op, "Microbiology")
(n3 / name, op, "Scientific")
(n3 / name, op, "State")
(n3 / name, op, "of")
(r / research-institute, name, n3 / name)
(s / state-01, ARG0, a / and)
(s / state-01, ARG1, c2 / certainty)
(t / threat, mod, h / health)
(w / world-region, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),health,health,false), Span(33,34,List(1),public,public,false), Span(23,27,List(7, 6, 5, 4, 3, 2),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(20,21,List(8),power,power,false), Span(16,17,List(9),positive,positive,false), Span(13,14,List(10),could,possible,false), Span(10,11,List(12, 11),uncertainty,(certainty :polarity -),false), Span(9,10,List(13),enough,enough,false), Span(3,4,List(15, 14),officials,(have-org-role-91 :ARG2 official),false), Span(2,3,List(18, 17, 16),Western,(world-region :name (name :op "West")),false)),Map(2 -> organization, 5 -> "Scientific", 12 -> -, 15 -> official, 8 -> power, 18 -> "West", 7 -> "of", 17 -> name, 1 -> public, 4 -> "State", 11 -> certainty, 14 -> have-org-role-91, 6 -> "Center", 0 -> health, 9 -> positive, 16 -> world-region, 3 -> name, 10 -> possible, 13 -> enough),Map(e -> enough, n -> name, w -> world-region, h -> health, h2 -> have-org-role-91, p2 -> power, p -> public, p4 -> possible, o2 -> official, c -> certainty, o -> organization, p3 -> positive, n2 -> name))),[Ljava.lang.String;@727eb8cb,Annotation([Ljava.lang.String;@39d9314d,[Ljava.lang.String;@b978d10,[Ljava.lang.String;@5b7a8434),Annotation([Ljava.lang.String;@5c45d770,[Ljava.lang.String;@2ce6c6ec,[Ledu.cmu.lti.nlp.amr.Dependency;@1bae316d),Annotation([Ljava.lang.String;@147a5d08,[Ljava.lang.String;@6676f6a0,[Ljava.lang.String;@7cbd9d24),Annotation([Ljava.lang.String;@1672fe87,[Ljava.lang.String;@5026735c,[Ledu.cmu.lti.nlp.amr.Entity;@1b45c0e))
AMR:
(c / certainty, polarity, -)
(c / certainty, quant, e / enough)
(h / health, mod, p / public)
(h2 / have-org-role-91, ARG1, o / organization)
(h2 / have-org-role-91, ARG2, o2 / official)
(h2 / have-org-role-91, mod, w / world-region)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "West")
(o / organization, name, n / name)
(p / public, mod, c / certainty)
(p / public, op, h2 / have-org-role-91)
(p2 / power, poss, o / organization)
(p3 / positive, op, p2 / power)
(p3 / positive, op, p4 / possible)
(w / world-region, name, n2 / name)

Decoded in 322,398 microseconds
Sentence: General Nikolai N. Urakov stated by telephone that the State Scientific Center of applied microbiology has quite reliable systems of protection in case of emergency.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 22-23:  case => case
Span 24-25:  emergency => emergency
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 20-21:  protection => protect-01
Span 16-17:  quite => quite
Span 9-13:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 18-19:  systems => system

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 24-25:  emergency => emergency
Oracle Span 0-1:  General => (have-org-role-91 :ARG2 general)
Oracle Span 15-16:  has => have-03
Oracle Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Oracle Span 20-21:  protection => protect-01
Oracle Span 16-17:  quite => quite
Oracle Span 17-18:  reliable => reliable
Oracle Span 9-15:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 4-5:  stated => state-01
Oracle Span 18-19:  systems => system
Oracle Span 6-7:  telephone => telephone

Extra span: case => case
Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Missing span: Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: stated => state-01
Missing span: telephone => telephone
Missing span: has => have-03
Missing span: reliable => reliable
Missing span: General => (have-org-role-91 :ARG2 general)
Dependencies:
1	General	_	NNP	NNP	_	4	nn	_	_
2	Nikolai	_	NNP	NNP	_	4	nn	_	_
3	N.	_	NNP	NNP	_	4	nn	_	_
4	Urakov	_	NNP	NNP	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	by	_	IN	IN	_	5	prep	_	_
7	telephone	_	NN	NN	_	6	pobj	_	_
8	that	_	IN	IN	_	16	mark	_	_
9	the	_	DT	DT	_	12	det	_	_
10	State	_	NNP	NNP	_	12	nn	_	_
11	Scientific	_	NNP	NNP	_	12	nn	_	_
12	Center	_	NNP	NNP	_	16	nsubj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	applied	_	JJ	JJ	_	15	amod	_	_
15	microbiology	_	NN	NN	_	13	pobj	_	_
16	has	_	VBZ	VBZ	_	5	ccomp	_	_
17	quite	_	RB	RB	_	18	advmod	_	_
18	reliable	_	JJ	JJ	_	19	amod	_	_
19	systems	_	NNS	NNS	_	16	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	protection	_	NN	NN	_	20	pobj	_	_
22	in	_	IN	IN	_	21	prep	_	_
23	case	_	NN	NN	_	22	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	emergency	_	NN	NN	_	24	pobj	_	_
26	.	_	.	.	_	5	punct	_	_

Oracle:
(h / have-03, ARG0, r2 / research-institute)
(h / have-03, ARG1, s2 / system)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG2, g / general)
(n / name, op, "N.")
(n / name, op, "Nikolai")
(n / name, op, "Urakov")
(n2 / name, op, "Applied")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(p / protect-01, ARG0, s2 / system)
(p / protect-01, condition, e / emergency)
(p2 / person, name, n / name)
(r / reliable, degree, q / quite)
(r2 / research-institute, name, n2 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, h / have-03)
(s / state-01, medium, t / telephone)
(s2 / system, mod, r / reliable)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),emergency,emergency,false), Span(22,23,List(1),case,case,false), Span(20,21,List(2),protection,protect-01,false), Span(18,19,List(3),systems,system,false), Span(16,17,List(4),quite,quite,false), Span(9,13,List(10, 9, 8, 7, 6, 5),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(1,4,List(15, 14, 13, 12, 11),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false)),Map(2 -> protect-01, 5 -> organization, 12 -> name, 15 -> "Urakov", 8 -> "Scientific", 7 -> "State", 1 -> case, 4 -> quite, 11 -> person, 14 -> "N.", 6 -> name, 0 -> emergency, 9 -> "Center", 3 -> system, 10 -> "of", 13 -> "Nikolai"),Map(n -> name, e -> emergency, q -> quite, p2 -> person, s -> system, p -> protect-01, c -> case, o -> organization, n2 -> name))),[Ljava.lang.String;@11f0a5a1,Annotation([Ljava.lang.String;@10f7f7de,[Ljava.lang.String;@73a8da0f,[Ljava.lang.String;@50dfbc58),Annotation([Ljava.lang.String;@4416d64f,[Ljava.lang.String;@6bf08014,[Ledu.cmu.lti.nlp.amr.Dependency;@5e3d57c7),Annotation([Ljava.lang.String;@732d0d24,[Ljava.lang.String;@1fb19a0,[Ljava.lang.String;@6ee4d9ab),Annotation([Ljava.lang.String;@5a5338df,[Ljava.lang.String;@418c5a9c,[Ledu.cmu.lti.nlp.amr.Entity;@18e36d14))
AMR:
(c / case, topic, e / emergency)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(o / organization, name, n / name)
(p / protect-01, ARG0, o / organization)
(p / protect-01, ARG1, q / quite)
(p / protect-01, location, e / emergency)
(p2 / person, name, n2 / name)
(s / system, poss, p2 / person)
(s / system, purpose, p / protect-01)

Decoded in 141,117 microseconds
Sentence: General Nikolai N. Urakov is the longtime director of the the State Scientific Center of applied microbiology.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 7-8:  director => (have-org-role-91 :ARG2 director)
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 11-15:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  director => (have-org-role-91 :ARG2 director)
Oracle Span 0-1:  General => (have-org-role-91 :ARG2 general)
Oracle Span 6-7:  longtime => longtime
Oracle Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Oracle Span 11-17:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Missing span: Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: General => (have-org-role-91 :ARG2 general)
Missing span: longtime => longtime
Dependencies:
1	General	_	NNP	NNP	_	4	nn	_	_
2	Nikolai	_	NNP	NNP	_	4	nn	_	_
3	N.	_	NNP	NNP	_	4	nn	_	_
4	Urakov	_	NNP	NNP	_	8	nsubj	_	_
5	is	_	VBZ	VBZ	_	8	cop	_	_
6	the	_	DT	DT	_	8	det	_	_
7	longtime	_	JJ	JJ	_	8	amod	_	_
8	director	_	NN	NN	_	0	root	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	14	predet	_	_
11	the	_	DT	DT	_	14	det	_	_
12	State	_	NNP	NNP	_	14	nn	_	_
13	Scientific	_	NNP	NNP	_	14	nn	_	_
14	Center	_	NNP	NNP	_	9	pobj	_	_
15	of	_	IN	IN	_	8	prep	_	_
16	applied	_	JJ	JJ	_	17	amod	_	_
17	microbiology	_	NN	NN	_	15	pobj	_	_
18	.	_	.	.	_	8	punct	_	_

Oracle:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, r / research-institute)
(h / have-org-role-91, ARG2, d2 / director)
(h / have-org-role-91, duration, l / longtime)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG2, g / general)
(n / name, op, "Applied")
(n / name, op, "Center")
(n / name, op, "Microbiology")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(p / person, name, n2 / name)
(r / research-institute, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(11,15,List(5, 4, 3, 2, 1, 0),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(7,8,List(7, 6),director,(have-org-role-91 :ARG2 director),false), Span(1,4,List(12, 11, 10, 9, 8),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false)),Map(2 -> "State", 5 -> "of", 12 -> "Urakov", 8 -> person, 7 -> director, 1 -> name, 4 -> "Center", 11 -> "N.", 6 -> have-org-role-91, 0 -> organization, 9 -> name, 3 -> "Scientific", 10 -> "Nikolai"),Map(n -> name, h -> have-org-role-91, d -> director, p -> person, o -> organization, n2 -> name))),[Ljava.lang.String;@5082d622,Annotation([Ljava.lang.String;@13d4992d,[Ljava.lang.String;@302f7971,[Ljava.lang.String;@332729ad),Annotation([Ljava.lang.String;@75d2da2d,[Ljava.lang.String;@4278284b,[Ledu.cmu.lti.nlp.amr.Dependency;@9573584),Annotation([Ljava.lang.String;@3370f42,[Ljava.lang.String;@6057aebb,[Ljava.lang.String;@63eef88a),Annotation([Ljava.lang.String;@53251a66,[Ljava.lang.String;@6853425f,[Ledu.cmu.lti.nlp.amr.Entity;@352c1b98))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, d / director)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(o / organization, name, n / name)
(p / person, name, n2 / name)

Decoded in 57,484 microseconds
Sentence: The State scientific center of applied microbiology has been working with Western scientists to convert the complex into a biomedical manufacturing site.

NER Entity: (organization :name (name :op "State" :op "scientific"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 3-4:  center => center
Span 16-17:  complex => complex
Span 14-15:  convert => convert-01
Span 20-21:  manufacturing => manufacture-01
Span 12-13:  scientists => scientist
Span 21-22:  site => site
Span 1-3:  State scientific => (organization :name (name :op "State" :op "scientific"))
Span 11-12:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 19-20:  biomedical => biomedicine
Oracle Span 16-17:  complex => complex
Oracle Span 14-15:  convert => convert-01
Oracle Span 20-21:  manufacturing => manufacture-01
Oracle Span 12-13:  scientists => scientist
Oracle Span 21-22:  site => site
Oracle Span 1-7:  State scientific center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 11-12:  Western => (world-region :name (name :op "West"))
Oracle Span 9-10:  working => work-01

Extra span: center => center
Extra span: State scientific => (organization :name (name :op "State" :op "scientific"))
Missing span: State scientific center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: working => work-01
Missing span: biomedical => biomedicine
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	State	_	NNP	NNP	_	4	nn	_	_
3	scientific	_	JJ	JJ	_	4	amod	_	_
4	center	_	NN	NN	_	10	nsubj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	applied	_	JJ	JJ	_	7	amod	_	_
7	microbiology	_	NN	NN	_	5	pobj	_	_
8	has	_	VBZ	VBZ	_	10	aux	_	_
9	been	_	VBN	VBN	_	10	aux	_	_
10	working	_	VBG	VBG	_	0	root	_	_
11	with	_	IN	IN	_	10	prep	_	_
12	Western	_	JJ	JJ	_	13	amod	_	_
13	scientists	_	NNS	NNS	_	11	pobj	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	convert	_	VB	VB	_	10	xcomp	_	_
16	the	_	DT	DT	_	17	det	_	_
17	complex	_	NN	NN	_	15	dobj	_	_
18	into	_	IN	IN	_	15	prep	_	_
19	a	_	DT	DT	_	22	det	_	_
20	biomedical	_	JJ	JJ	_	22	amod	_	_
21	manufacturing	_	NN	NN	_	22	nn	_	_
22	site	_	NN	NN	_	18	pobj	_	_
23	.	_	.	.	_	10	punct	_	_

Oracle:
(c / convert-01, ARG1, c2 / complex)
(c / convert-01, ARG2, s2 / site)
(m2 / manufacture-01, location, s2 / site)
(m2 / manufacture-01, mod, b / biomedicine)
(n / name, op, "Applied")
(n / name, op, "Center")
(n / name, op, "Microbiology")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "West")
(r / research-institute, name, n / name)
(s / scientist, mod, w2 / world-region)
(w / work-01, ARG0, r / research-institute)
(w / work-01, ARG1, c / convert-01)
(w / work-01, ARG3, s / scientist)
(w2 / world-region, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),site,site,false), Span(20,21,List(1),manufacturing,manufacture-01,false), Span(16,17,List(2),complex,complex,false), Span(14,15,List(3),convert,convert-01,false), Span(12,13,List(4),scientists,scientist,false), Span(11,12,List(7, 6, 5),Western,(world-region :name (name :op "West")),false), Span(3,4,List(8),center,center,false), Span(1,3,List(12, 11, 10, 9),State scientific,(organization :name (name :op "State" :op "scientific")),false)),Map(2 -> complex, 5 -> world-region, 12 -> "scientific", 8 -> center, 7 -> "West", 1 -> manufacture-01, 4 -> scientist, 11 -> "State", 6 -> name, 0 -> site, 9 -> organization, 3 -> convert-01, 10 -> name),Map(n -> name, w -> world-region, s2 -> scientist, s -> site, m -> manufacture-01, c3 -> center, c -> complex, o -> organization, n2 -> name, c2 -> convert-01))),[Ljava.lang.String;@21129f1f,Annotation([Ljava.lang.String;@5a9f4771,[Ljava.lang.String;@282cb7c7,[Ljava.lang.String;@7d898981),Annotation([Ljava.lang.String;@48d61b48,[Ljava.lang.String;@68d279ec,[Ledu.cmu.lti.nlp.amr.Dependency;@258d79be),Annotation([Ljava.lang.String;@14f9390f,[Ljava.lang.String;@6c0d7c83,[Ljava.lang.String;@176b75f7),Annotation([Ljava.lang.String;@5965be2d,[Ljava.lang.String;@409c54f,[Ledu.cmu.lti.nlp.amr.Entity;@3e74829))
AMR:
(c2 / convert-01, ARG0, c3 / center)
(c2 / convert-01, ARG1, c / complex)
(c2 / convert-01, ARG2, s / site)
(c3 / center, mod, o / organization)
(n / name, op, "West")
(n2 / name, op, "State")
(n2 / name, op, "scientific")
(o / organization, name, n2 / name)
(s / site, purpose, m / manufacture-01)
(s2 / scientist, mod, w / world-region)
(s2 / scientist, purpose, c2 / convert-01)
(w / world-region, name, n / name)

Decoded in 311,192 microseconds
Sentence: General Nikolai N. Urakov stated by telephone that the people at the State Scientific Center of applied microbiology are scared by this threat of a sudden shutdown of electricity because it is a kind of psychological pressure on the people at the State Scientific Center of applied microbiology.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 29-30:  because => cause-01
Span 28-29:  electricity => electricity
Span 33-34:  kind => kind
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 36-37:  pressure => pressure-01
Span 26-27:  shutdown => shutdown
Span 42-46:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 12-16:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 25-26:  sudden => sudden
Span 21-22:  this => this

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 29-30:  because => cause-01
Oracle Span 28-29:  electricity => electricity
Oracle Span 0-1:  General => (have-org-role-91 :ARG2 general)
Oracle Span 33-34:  kind => kind
Oracle Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Oracle Span 36-37:  pressure => pressure-01
Oracle Span 35-36:  psychological => psychology
Oracle Span 19-20:  scared => scare-01
Oracle Span 26-27:  shutdown => shut-05
Oracle Span 12-18:  State Scientific Center of applied microbiology => (have-org-role-91 :ARG1 (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State")))
Oracle Span 4-5:  stated => state-01
Oracle Span 25-26:  sudden => sudden
Oracle Span 6-7:  telephone => telephone
Oracle Span 21-22:  this => this
Oracle Span 22-23:  threat => threaten-01

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: shutdown => shutdown
Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Missing span: Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Missing span: State Scientific Center of applied microbiology => (have-org-role-91 :ARG1 (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State")))
Missing span: stated => state-01
Missing span: telephone => telephone
Missing span: scared => scare-01
Missing span: General => (have-org-role-91 :ARG2 general)
Missing span: psychological => psychology
Missing span: threat => threaten-01
Missing span: shutdown => shut-05
Dependencies:
1	General	_	NNP	NNP	_	4	nn	_	_
2	Nikolai	_	NNP	NNP	_	4	nn	_	_
3	N.	_	NNP	NNP	_	4	nn	_	_
4	Urakov	_	NNP	NNP	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	by	_	IN	IN	_	5	prep	_	_
7	telephone	_	NN	NN	_	6	pobj	_	_
8	that	_	IN	IN	_	20	mark	_	_
9	the	_	DT	DT	_	10	det	_	_
10	people	_	NNS	NNS	_	20	nsubjpass	_	_
11	at	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	15	det	_	_
13	State	_	NNP	NNP	_	15	nn	_	_
14	Scientific	_	NNP	NNP	_	15	nn	_	_
15	Center	_	NNP	NNP	_	11	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	applied	_	JJ	JJ	_	18	amod	_	_
18	microbiology	_	NN	NN	_	16	pobj	_	_
19	are	_	VBP	VBP	_	20	auxpass	_	_
20	scared	_	VBN	VBN	_	5	ccomp	_	_
21	by	_	IN	IN	_	20	prep	_	_
22	this	_	DT	DT	_	23	det	_	_
23	threat	_	NN	NN	_	21	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	a	_	DT	DT	_	27	det	_	_
26	sudden	_	JJ	JJ	_	27	amod	_	_
27	shutdown	_	NN	NN	_	24	pobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	electricity	_	NN	NN	_	28	pobj	_	_
30	because	_	IN	IN	_	34	mark	_	_
31	it	_	PRP	PRP	_	34	nsubj	_	_
32	is	_	VBZ	VBZ	_	34	cop	_	_
33	a	_	DT	DT	_	34	det	_	_
34	kind	_	NN	NN	_	20	advcl	_	_
35	of	_	IN	IN	_	34	prep	_	_
36	psychological	_	JJ	JJ	_	37	amod	_	_
37	pressure	_	NN	NN	_	35	pobj	_	_
38	on	_	IN	IN	_	37	prep	_	_
39	the	_	DT	DT	_	40	det	_	_
40	people	_	NNS	NNS	_	38	pobj	_	_
41	at	_	IN	IN	_	40	prep	_	_
42	the	_	DT	DT	_	45	det	_	_
43	State	_	NNP	NNP	_	45	nn	_	_
44	Scientific	_	NNP	NNP	_	45	nn	_	_
45	Center	_	NNP	NNP	_	41	pobj	_	_
46	of	_	IN	IN	_	45	prep	_	_
47	applied	_	JJ	JJ	_	48	amod	_	_
48	microbiology	_	NN	NN	_	46	pobj	_	_
49	.	_	.	.	_	5	punct	_	_

Oracle:
(c / cause-01, ARG0, p2 / pressure-01)
(c / cause-01, ARG1, s4 / scare-01)
(h / have-org-role-91, ARG1, r / research-institute)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG2, g / general)
(n / name, op, "N.")
(n / name, op, "Nikolai")
(n / name, op, "Urakov")
(n2 / name, op, "Applied")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(p2 / pressure-01, ARG0, t2 / threaten-01)
(p2 / pressure-01, mod, k / kind)
(p2 / pressure-01, mod, p3 / psychology)
(p4 / person, name, n / name)
(r / research-institute, name, n2 / name)
(s / state-01, ARG0, p4 / person)
(s / state-01, ARG1, s4 / scare-01)
(s / state-01, medium, t / telephone)
(s2 / shut-05, ARG1, e / electricity)
(s2 / shut-05, mod, s3 / sudden)
(s4 / scare-01, ARG2, t2 / threaten-01)
(t2 / threaten-01, ARG1, s2 / shut-05)
(t2 / threaten-01, mod, t3 / this)

Input(Some(Graph(null,ArrayBuffer(Span(42,46,List(5, 4, 3, 2, 1, 0),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(36,37,List(6),pressure,pressure-01,false), Span(33,34,List(7),kind,kind,false), Span(29,30,List(8),because,cause-01,false), Span(28,29,List(9),electricity,electricity,false), Span(26,27,List(10),shutdown,shutdown,false), Span(25,26,List(11),sudden,sudden,false), Span(21,22,List(12),this,this,false), Span(12,16,List(18, 17, 16, 15, 14, 13),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(1,4,List(23, 22, 21, 20, 19),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false)),Map(2 -> "State", 5 -> "of", 12 -> this, 15 -> "State", 8 -> cause-01, 21 -> "Nikolai", 18 -> "of", 7 -> kind, 17 -> "Center", 1 -> name, 23 -> "Urakov", 4 -> "Center", 11 -> sudden, 14 -> name, 20 -> name, 6 -> pressure-01, 22 -> "N.", 0 -> organization, 9 -> electricity, 16 -> "Scientific", 19 -> person, 3 -> "Scientific", 10 -> shutdown, 13 -> organization),Map(e -> electricity, n -> name, s2 -> sudden, k -> kind, t -> this, p2 -> person, s -> shutdown, p -> pressure-01, n3 -> name, o2 -> organization, c -> cause-01, o -> organization, n2 -> name))),[Ljava.lang.String;@4f6f416f,Annotation([Ljava.lang.String;@3b8f0a79,[Ljava.lang.String;@71e693fa,[Ljava.lang.String;@48793bef),Annotation([Ljava.lang.String;@7d286fb6,[Ljava.lang.String;@3eb77ea8,[Ledu.cmu.lti.nlp.amr.Dependency;@7b8b43c7),Annotation([Ljava.lang.String;@7aaca91a,[Ljava.lang.String;@44c73c26,[Ljava.lang.String;@41005828),Annotation([Ljava.lang.String;@60b4beb4,[Ljava.lang.String;@7fcf2fc1,[Ledu.cmu.lti.nlp.amr.Entity;@2141a12))
AMR:
(c / cause-01, ARG1, k / kind)
(e / electricity, quant, s / shutdown)
(e / electricity, time, c / cause-01)
(k / kind, purpose, p / pressure-01)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Center")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(n3 / name, op, "N.")
(n3 / name, op, "Nikolai")
(n3 / name, op, "Urakov")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(o2 / organization, op, p / pressure-01)
(p / pressure-01, ARG0, o / organization)
(p / pressure-01, ARG1, p2 / person)
(p2 / person, name, n3 / name)
(s / shutdown, mod, s2 / sudden)
(s / shutdown, mod, t / this)

Decoded in 529,658 microseconds
Sentence: General Nikolai N. Urakov stated by telephone that in the event of a power shutdown at the State Scientific Center of applied microbiology scientists must destroy all bacteriological experiments under way.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 26-27:  all => all
Span 25-26:  destroy => destroy-01
Span 10-11:  event => event
Span 28-29:  experiments => experiment-01
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 13-14:  power => power
Span 23-24:  scientists => scientist
Span 14-15:  shutdown => shutdown
Span 17-21:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 30-31:  way => way

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 26-27:  all => all
Oracle Span 27-28:  bacteriological => bacteriology
Oracle Span 25-26:  destroy => destroy-01
Oracle Span 28-29:  experiments => experiment-01
Oracle Span 0-1:  General => (have-org-role-91 :ARG2 general)
Oracle Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Oracle Span 13-14:  power => power
Oracle Span 23-24:  scientists => scientist
Oracle Span 14-15:  shutdown => shut-05
Oracle Span 17-23:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 4-5:  stated => state-01
Oracle Span 6-7:  telephone => telephone
Oracle Span 30-31:  way => way

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: shutdown => shutdown
Extra span: event => event
Incorrect span: Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Missing span: Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: stated => state-01
Missing span: telephone => telephone
Missing span: General => (have-org-role-91 :ARG2 general)
Missing span: bacteriological => bacteriology
Missing span: shutdown => shut-05
Dependencies:
1	General	_	NNP	NNP	_	4	nn	_	_
2	Nikolai	_	NNP	NNP	_	4	nn	_	_
3	N.	_	NNP	NNP	_	4	nn	_	_
4	Urakov	_	NNP	NNP	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	by	_	IN	IN	_	5	prep	_	_
7	telephone	_	NN	NN	_	6	pobj	_	_
8	that	_	IN	IN	_	26	mark	_	_
9	in	_	IN	IN	_	26	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	event	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	power	_	NN	NN	_	15	nn	_	_
15	shutdown	_	NN	NN	_	12	pobj	_	_
16	at	_	IN	IN	_	15	prep	_	_
17	the	_	DT	DT	_	20	det	_	_
18	State	_	NNP	NNP	_	20	nn	_	_
19	Scientific	_	NNP	NNP	_	20	nn	_	_
20	Center	_	NNP	NNP	_	16	pobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	applied	_	JJ	JJ	_	23	amod	_	_
23	microbiology	_	NN	NN	_	21	pobj	_	_
24	scientists	_	NNS	NNS	_	26	nsubj	_	_
25	must	_	MD	MD	_	26	aux	_	_
26	destroy	_	VB	VB	_	5	ccomp	_	_
27	all	_	DT	DT	_	29	det	_	_
28	bacteriological	_	JJ	JJ	_	29	amod	_	_
29	experiments	_	NNS	NNS	_	26	dobj	_	_
30	under	_	IN	IN	_	26	prep	_	_
31	way	_	NN	NN	_	30	pobj	_	_
32	.	_	.	.	_	5	punct	_	_

Oracle:
(d / destroy-01, ARG0, s2 / scientist)
(d / destroy-01, ARG1, e / experiment-01)
(e / experiment-01, ARG1, b / bacteriology)
(e / experiment-01, mod, a / all)
(e / experiment-01, prep-under, w / way)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG2, g / general)
(n / name, op, "N.")
(n / name, op, "Nikolai")
(n / name, op, "Urakov")
(n2 / name, op, "Applied")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(p2 / person, name, n / name)
(r / research-institute, name, n2 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, medium, t / telephone)
(s3 / shut-05, ARG1, p / power)
(s3 / shut-05, location, r / research-institute)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),way,way,false), Span(28,29,List(1),experiments,experiment-01,false), Span(26,27,List(2),all,all,false), Span(25,26,List(3),destroy,destroy-01,false), Span(23,24,List(4),scientists,scientist,false), Span(17,21,List(10, 9, 8, 7, 6, 5),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(14,15,List(11),shutdown,shutdown,false), Span(13,14,List(12),power,power,false), Span(10,11,List(13),event,event,false), Span(1,4,List(18, 17, 16, 15, 14),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false)),Map(2 -> all, 5 -> organization, 12 -> power, 15 -> name, 8 -> "Scientific", 18 -> "Urakov", 7 -> "State", 17 -> "N.", 1 -> experiment-01, 4 -> scientist, 11 -> shutdown, 14 -> person, 6 -> name, 0 -> way, 9 -> "Center", 16 -> "Nikolai", 3 -> destroy-01, 10 -> "of", 13 -> event),Map(n -> name, e -> experiment-01, w -> way, s2 -> shutdown, p2 -> person, e2 -> event, s -> scientist, d -> destroy-01, p -> power, a -> all, o -> organization, n2 -> name))),[Ljava.lang.String;@4196c360,Annotation([Ljava.lang.String;@41294f8,[Ljava.lang.String;@225129c,[Ljava.lang.String;@20435c40),Annotation([Ljava.lang.String;@573906eb,[Ljava.lang.String;@479ceda0,[Ledu.cmu.lti.nlp.amr.Dependency;@6d07a63d),Annotation([Ljava.lang.String;@571c5681,[Ljava.lang.String;@488d1cd7,[Ljava.lang.String;@68dc098b),Annotation([Ljava.lang.String;@38ba6ce3,[Ljava.lang.String;@d278d2b,[Ledu.cmu.lti.nlp.amr.Entity;@2d6c53fc))
AMR:
(d / destroy-01, ARG0, s / scientist)
(d / destroy-01, ARG1, e / experiment-01)
(d / destroy-01, time, e2 / event)
(e / experiment-01, ARG0, p2 / person)
(e / experiment-01, ARG1, w / way)
(e / experiment-01, mod, a / all)
(e2 / event, location, s2 / shutdown)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(o / organization, name, n / name)
(p2 / person, name, n2 / name)
(s2 / shutdown, mod, p / power)
(s2 / shutdown, poss, o / organization)

Decoded in 486,450 microseconds
Sentence: General Nikolai N. Urakov would like the United States and Western countries that have contributed about 6 million United States dollars to the transformation of the former bioweapons complex to contribute another 500000 United States dollars per year to pay the State Scientific Center of applied microbiology's electric bills and arrears.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "United" :op "States"))
mkDayMonthYear(500000,00,00,50)
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
mkDayMonthYear(500000,00,00,50)
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 32-33:  500000 => 500000
Span 31-32:  another => another
Span 28-29:  complex => complex
Span 30-31:  contribute => contribute-01
Span 14-15:  contributed => contribute-01
Span 11-12:  countries => country
Span 35-36:  dollars => (monetary-quantity :unit dollar)
Span 20-21:  dollars => (monetary-quantity :unit dollar)
Span 48-49:  electric => electric
Span 26-27:  former => former
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 39-40:  pay => pay-01
Span 41-45:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 33-35:  United States => (country :name (name :op "United" :op "States"))
Span 18-20:  United States => (country :name (name :op "United" :op "States"))
Span 7-9:  United States => (country :name (name :op "United" :op "States"))
Span 10-11:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 32-33:  500000 => 500000
Oracle Span 15-16:  about => about
Oracle Span 9-10:  and => and
Oracle Span 50-51:  and => and
Oracle Span 31-32:  another => another
Oracle Span 51-52:  arrears => arrear
Oracle Span 49-50:  bills => bill
Oracle Span 27-28:  bioweapons => bioweapon
Oracle Span 28-29:  complex => complex
Oracle Span 30-31:  contribute => contribute-01
Oracle Span 14-15:  contributed => contribute-01
Oracle Span 11-12:  countries => country
Oracle Span 20-21:  dollars => (monetary-quantity :unit dollar)
Oracle Span 48-49:  electric => electric
Oracle Span 26-27:  former => former
Oracle Span 0-1:  General => general
Oracle Span 13-14:  have => have-org-role-91
Oracle Span 5-6:  like => like-02
Oracle Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Oracle Span 39-40:  pay => pay-01
Oracle Span 41-47:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 23-24:  transformation => transform-01
Oracle Span 7-9:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 10-11:  Western => (world-region :name (name :op "West"))
Oracle Span 37-38:  year => (temporal-quantity :unit year)

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Extra span: dollars => (monetary-quantity :unit dollar)
Extra span: United States => (country :name (name :op "United" :op "States"))
Extra span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Missing span: Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: like => like-02
Missing span: and => and
Missing span: arrears => arrear
Missing span: bills => bill
Missing span: year => (temporal-quantity :unit year)
Missing span: and => and
Missing span: bioweapons => bioweapon
Missing span: about => about
Missing span: General => general
Missing span: transformation => transform-01
Missing span: have => have-org-role-91
Dependencies:
1	General	_	NNP	NNP	_	4	nn	_	_
2	Nikolai	_	NNP	NNP	_	4	nn	_	_
3	N.	_	NNP	NNP	_	4	nn	_	_
4	Urakov	_	NNP	NNP	_	6	nsubj	_	_
5	would	_	MD	MD	_	6	aux	_	_
6	like	_	VB	VB	_	0	root	_	_
7	the	_	DT	DT	_	9	det	_	_
8	United	_	NNP	NNP	_	9	nn	_	_
9	States	_	NNPS	NNPS	_	29	nsubj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	Western	_	NNP	NNP	_	12	nn	_	_
12	countries	_	NNS	NNS	_	9	conj	_	_
13	that	_	WDT	WDT	_	15	nsubj	_	_
14	have	_	VBP	VBP	_	15	aux	_	_
15	contributed	_	VBN	VBN	_	9	rcmod	_	_
16	about	_	RB	RB	_	18	quantmod	_	_
17	6	_	CD	CD	_	18	number	_	_
18	million	_	CD	CD	_	21	num	_	_
19	United	_	NNP	NNP	_	21	nn	_	_
20	States	_	NNPS	NNPS	_	21	nn	_	_
21	dollars	_	NNS	NNS	_	15	dobj	_	_
22	to	_	TO	TO	_	15	prep	_	_
23	the	_	DT	DT	_	24	det	_	_
24	transformation	_	NN	NN	_	22	pobj	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	28	det	_	_
27	former	_	JJ	JJ	_	28	amod	_	_
28	bioweapons	_	NNS	NNS	_	25	pobj	_	_
29	complex	_	JJ	JJ	_	6	xcomp	_	_
30	to	_	TO	TO	_	31	aux	_	_
31	contribute	_	VB	VB	_	29	xcomp	_	_
32	another	_	DT	DT	_	33	quantmod	_	_
33	500000	_	CD	CD	_	36	num	_	_
34	United	_	NNP	NNP	_	36	nn	_	_
35	States	_	NNP	NNP	_	36	nn	_	_
36	dollars	_	NNS	NNS	_	31	dobj	_	_
37	per	_	IN	IN	_	36	prep	_	_
38	year	_	NN	NN	_	37	pobj	_	_
39	to	_	TO	TO	_	40	aux	_	_
40	pay	_	VB	VB	_	31	vmod	_	_
41	the	_	DT	DT	_	44	det	_	_
42	State	_	NNP	NNP	_	44	nn	_	_
43	Scientific	_	NNP	NNP	_	44	nn	_	_
44	Center	_	NNP	NNP	_	40	dobj	_	_
45	of	_	IN	IN	_	44	prep	_	_
46	applied	_	JJ	JJ	_	47	amod	_	_
47	microbiology	_	NN	NN	_	50	poss	_	_
48	's	_	POS	POS	_	47	possessive	_	_
49	electric	_	JJ	JJ	_	50	amod	_	_
50	bills	_	NNS	NNS	_	45	pobj	_	_
51	and	_	CC	CC	_	50	cc	_	_
52	arrears	_	NNS	NNS	_	50	conj	_	_
53	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a4 / and, op, a5 / arrear)
(a4 / and, op, b2 / bill)
(a4 / and, poss, r / research-institute)
(a7 / about, op, m / monetary-quantity)
(b2 / bill, mod, e / electric)
(c / contribute-01, ARG0, a / and)
(c / contribute-01, purpose, p / pay-01)
(c2 / country, name, n2 / name)
(c3 / country, location, w / world-region)
(c4 / contribute-01, ARG0, a / and)
(c4 / contribute-01, ARG1, a7 / about)
(c4 / contribute-01, ARG2, t / transform-01)
(c5 / complex, mod, b3 / bioweapon)
(c5 / complex, mod, f / former)
(d / dollar, mod, c2 / country)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, g / general)
(l / like-02, ARG0, p2 / person)
(l / like-02, ARG1, c / contribute-01)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "N.")
(n / name, op, "Nikolai")
(n / name, op, "Urakov")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "West")
(n4 / name, op, "Applied")
(n4 / name, op, "Center")
(n4 / name, op, "Microbiology")
(n4 / name, op, "Scientific")
(n4 / name, op, "State")
(n4 / name, op, "of")
(p / pay-01, ARG0, a / and)
(p / pay-01, ARG3, a4 / and)
(p2 / person, name, n / name)
(r / research-institute, name, n4 / name)
(t / transform-01, ARG1, c5 / complex)
(t2 / temporal-quantity, unit, y / year)
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),electric,electric,false), Span(41,45,List(6, 5, 4, 3, 2, 1),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(39,40,List(7),pay,pay-01,false), Span(35,36,List(9, 8),dollars,(monetary-quantity :unit dollar),false), Span(33,35,List(13, 12, 11, 10),United States,(country :name (name :op "United" :op "States")),false), Span(32,33,List(14),500000,500000,false), Span(31,32,List(15),another,another,false), Span(30,31,List(16),contribute,contribute-01,false), Span(28,29,List(17),complex,complex,false), Span(26,27,List(18),former,former,false), Span(20,21,List(20, 19),dollars,(monetary-quantity :unit dollar),false), Span(18,20,List(24, 23, 22, 21),United States,(country :name (name :op "United" :op "States")),false), Span(14,15,List(25),contributed,contribute-01,false), Span(11,12,List(26),countries,country,false), Span(10,11,List(29, 28, 27),Western,(world-region :name (name :op "West")),false), Span(7,9,List(33, 32, 31, 30),United States,(country :name (name :op "United" :op "States")),false), Span(1,4,List(38, 37, 36, 35, 34),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false)),Map(30 -> country, 2 -> name, 5 -> "Center", 33 -> "States", 27 -> world-region, 12 -> "United", 8 -> monetary-quantity, 15 -> another, 36 -> "Nikolai", 21 -> country, 18 -> former, 24 -> "States", 35 -> name, 7 -> pay-01, 1 -> organization, 17 -> complex, 23 -> "United", 38 -> "Urakov", 26 -> country, 4 -> "Scientific", 11 -> name, 32 -> "United", 14 -> 500000, 29 -> "West", 20 -> dollar, 34 -> person, 28 -> name, 6 -> "of", 9 -> dollar, 0 -> electric, 22 -> name, 16 -> contribute-01, 37 -> "N.", 19 -> monetary-quantity, 10 -> country, 3 -> "State", 31 -> name, 25 -> contribute-01, 13 -> "States"),Map(e -> electric, n -> name, w -> world-region, 5 -> 500000, m2 -> monetary-quantity, c7 -> country, p2 -> person, c4 -> country, n4 -> name, d -> dollar, m -> monetary-quantity, p -> pay-01, c3 -> complex, a -> another, n3 -> name, d2 -> dollar, n6 -> name, c6 -> country, c -> country, f -> former, o -> organization, c2 -> contribute-01, n2 -> name, c5 -> contribute-01, n5 -> name))),[Ljava.lang.String;@25f4878b,Annotation([Ljava.lang.String;@4e423aa2,[Ljava.lang.String;@7fbdb894,[Ljava.lang.String;@3081f72c),Annotation([Ljava.lang.String;@3148f668,[Ljava.lang.String;@6e005dc9,[Ledu.cmu.lti.nlp.amr.Dependency;@7ceb3185),Annotation([Ljava.lang.String;@436c81a3,[Ljava.lang.String;@3561c410,[Ljava.lang.String;@59e32960),Annotation([Ljava.lang.String;@7c214cc0,[Ljava.lang.String;@5b67bb7e,[Ledu.cmu.lti.nlp.amr.Entity;@609db546))
AMR:
(a / another, op, 5 / 500000)
(c / country, name, n2 / name)
(c2 / contribute-01, ARG0, c7 / country)
(c2 / contribute-01, ARG1, m / monetary-quantity)
(c2 / contribute-01, ARG2, f / former)
(c2 / contribute-01, ARG3, p2 / person)
(c2 / contribute-01, purpose, p / pay-01)
(c3 / complex, purpose, c2 / contribute-01)
(c4 / country, name, n3 / name)
(c5 / contribute-01, ARG0, c7 / country)
(c5 / contribute-01, ARG1, m2 / monetary-quantity)
(c6 / country, location, w / world-region)
(c6 / country, op, c5 / contribute-01)
(c7 / country, name, n5 / name)
(d / dollar, mod, c / country)
(d2 / dollar, mod, c4 / country)
(m / monetary-quantity, quant, 5 / 500000)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / name, op, "West")
(n5 / name, op, "States")
(n5 / name, op, "United")
(n6 / name, op, "N.")
(n6 / name, op, "Nikolai")
(n6 / name, op, "Urakov")
(o / organization, name, n / name)
(p / pay-01, ARG0, e / electric)
(p / pay-01, ARG1, o / organization)
(p2 / person, name, n6 / name)
(w / world-region, name, n4 / name)

Decoded in 1,621,319 microseconds
Sentence: An American scientist who works closely with the State Scientific Center of applied microbiology stated that the Russian government was responsible for paying for the State Scientific Center of applied microbiology's electric bills.

NER Entity: (thing :name (name :op "American"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 5-6:  closely => close
Span 32-33:  electric => electric
Span 22-23:  paying => pay-01
Span 25-29:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 8-12:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 1-2:  American => (country :name (name :op "America"))
Oracle Span 33-34:  bills => bill
Oracle Span 5-6:  closely => close
Oracle Span 32-33:  electric => electric
Oracle Span 18-19:  government => (government-organization :ARG0-of govern-01)
Oracle Span 22-23:  paying => pay-01
Oracle Span 20-21:  responsible => responsible-41
Oracle Span 17-18:  Russian => (country :name (name :op "Russia"))
Oracle Span 2-3:  scientist => scientist
Oracle Span 8-14:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 14-15:  stated => state-01
Oracle Span 4-5:  works => work-01

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: American => (country :name (name :op "America"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: stated => state-01
Missing span: responsible => responsible-41
Missing span: bills => bill
Missing span: scientist => scientist
Missing span: works => work-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	An	_	DT	DT	_	3	det	_	_
2	American	_	JJ	JJ	_	3	amod	_	_
3	scientist	_	NN	NN	_	15	nsubj	_	_
4	who	_	WP	WP	_	5	nsubj	_	_
5	works	_	VBZ	VBZ	_	3	rcmod	_	_
6	closely	_	RB	RB	_	5	advmod	_	_
7	with	_	IN	IN	_	5	prep	_	_
8	the	_	DT	DT	_	11	det	_	_
9	State	_	NNP	NNP	_	11	nn	_	_
10	Scientific	_	NNP	NNP	_	11	nn	_	_
11	Center	_	NNP	NNP	_	7	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	applied	_	JJ	JJ	_	14	amod	_	_
14	microbiology	_	NN	NN	_	12	pobj	_	_
15	stated	_	VBD	VBD	_	0	root	_	_
16	that	_	IN	IN	_	21	mark	_	_
17	the	_	DT	DT	_	19	det	_	_
18	Russian	_	JJ	JJ	_	19	amod	_	_
19	government	_	NN	NN	_	21	nsubj	_	_
20	was	_	VBD	VBD	_	21	cop	_	_
21	responsible	_	JJ	JJ	_	15	ccomp	_	_
22	for	_	IN	IN	_	21	prep	_	_
23	paying	_	VBG	VBG	_	22	pcomp	_	_
24	for	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	28	det	_	_
26	State	_	NNP	NNP	_	28	nn	_	_
27	Scientific	_	NNP	NNP	_	28	nn	_	_
28	Center	_	NNP	NNP	_	24	pobj	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	applied	_	JJ	JJ	_	31	amod	_	_
31	microbiology	_	NN	NN	_	34	poss	_	_
32	's	_	POS	POS	_	31	possessive	_	_
33	electric	_	JJ	JJ	_	34	amod	_	_
34	bills	_	NNS	NNS	_	29	pobj	_	_
35	.	_	.	.	_	15	punct	_	_

Oracle:
(b / bill, mod, e / electric)
(b / bill, poss, r2 / research-institute)
(c / country, name, n / name)
(c3 / country, name, n3 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(n / name, op, "America")
(n2 / name, op, "Applied")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(n3 / name, op, "Russia")
(p / pay-01, ARG0, g / government-organization)
(p / pay-01, ARG3, b / bill)
(r / responsible-41, ARG1, g / government-organization)
(r / responsible-41, ARG2, p / pay-01)
(r2 / research-institute, name, n2 / name)
(s / state-01, ARG0, s2 / scientist)
(s / state-01, ARG1, r / responsible-41)
(s2 / scientist, mod, c / country)
(w / work-01, ARG0, s2 / scientist)
(w / work-01, ARG3, r2 / research-institute)
(w / work-01, degree, c2 / close)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),electric,electric,false), Span(25,29,List(6, 5, 4, 3, 2, 1),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(22,23,List(7),paying,pay-01,false), Span(8,12,List(13, 12, 11, 10, 9, 8),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(5,6,List(14),closely,close,false)),Map(2 -> name, 5 -> "Center", 12 -> "Center", 8 -> organization, 7 -> pay-01, 1 -> organization, 4 -> "Scientific", 11 -> "Scientific", 14 -> close, 6 -> "of", 0 -> electric, 9 -> name, 3 -> "State", 10 -> "State", 13 -> "of"),Map(n -> name, e -> electric, p -> pay-01, o2 -> organization, c -> close, o -> organization, n2 -> name))),[Ljava.lang.String;@20f5281c,Annotation([Ljava.lang.String;@56c4278e,[Ljava.lang.String;@301eda63,[Ljava.lang.String;@3d246ea3),Annotation([Ljava.lang.String;@341814d3,[Ljava.lang.String;@4397ad89,[Ledu.cmu.lti.nlp.amr.Dependency;@59cba5a),Annotation([Ljava.lang.String;@1bd39d3c,[Ljava.lang.String;@6f19ac19,[Ljava.lang.String;@119cbf96),Annotation([Ljava.lang.String;@71329995,[Ljava.lang.String;@768fc0f2,[Ledu.cmu.lti.nlp.amr.Entity;@5454d35e))
AMR:
(c / close, op, p / pay-01)
(e / electric, op, p / pay-01)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Center")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(p / pay-01, ARG1, o / organization)
(p / pay-01, ARG2, o2 / organization)

Decoded in 211,274 microseconds
Sentence: Western aid for conversion of General Nikolai N. Urakov's one time bioweapons laboratory peaked in 970000 because it was learned that Iran had made offers to the State Scientific Center of applied microbiology to purchase its expertise.

NER Entity: (thing :name (name :op "Western"))
NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
mkDayMonthYear(970000,00,00,97)
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
mkDayMonthYear(970000,00,00,97)
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 16-17:  970000 => (date-entity :day 0 :month 0 :year 97)
Span 1-2:  aid => aid-01
Span 17-18:  because => cause-01
Span 3-4:  conversion => convert-01
Span 37-38:  expertise => expertise
Span 13-14:  laboratory => laboratory
Span 20-21:  learned => learn-01
Span 6-9:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 25-26:  offers => offer-01
Span 35-36:  purchase => purchase-01
Span 28-32:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 0-1:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 16-17:  970000 => (date-entity :year 1997)
Oracle Span 1-2:  aid => aid-01
Oracle Span 17-18:  because => cause-01
Oracle Span 12-13:  bioweapons => bioweapon
Oracle Span 3-4:  conversion => convert-01
Oracle Span 37-38:  expertise => expert-41
Oracle Span 5-6:  General => general
Oracle Span 23-24:  had => have-org-role-91
Oracle Span 22-23:  Iran => (country :name (name :op "Iran"))
Oracle Span 13-14:  laboratory => laboratory
Oracle Span 20-21:  learned => learn-01
Oracle Span 6-9:  Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Oracle Span 25-26:  offers => offer-01
Oracle Span 14-15:  peaked => peak-01
Oracle Span 35-36:  purchase => purchase-01
Oracle Span 28-34:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 0-1:  Western => (world-region :name (name :op "West"))

Incorrect span: expertise => expertise
Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: 970000 => (date-entity :day 0 :month 0 :year 97)
Incorrect span: Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Missing span: Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: 970000 => (date-entity :year 1997)
Missing span: peaked => peak-01
Missing span: General => general
Missing span: bioweapons => bioweapon
Missing span: expertise => expert-41
Missing span: had => have-org-role-91
Dependencies:
1	Western	_	JJ	JJ	_	2	amod	_	_
2	aid	_	NN	NN	_	15	nsubj	_	_
3	for	_	IN	IN	_	2	prep	_	_
4	conversion	_	NN	NN	_	3	pobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	General	_	NNP	NNP	_	9	nn	_	_
7	Nikolai	_	NNP	NNP	_	9	nn	_	_
8	N.	_	NNP	NNP	_	9	nn	_	_
9	Urakov	_	NNP	NNP	_	14	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	one	_	CD	CD	_	14	num	_	_
12	time	_	NN	NN	_	14	nn	_	_
13	bioweapons	_	NNS	NNS	_	14	nn	_	_
14	laboratory	_	NN	NN	_	5	pobj	_	_
15	peaked	_	VBD	VBD	_	0	root	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	970000	_	CD	CD	_	16	pobj	_	_
18	because	_	IN	IN	_	21	mark	_	_
19	it	_	PRP	PRP	_	21	nsubjpass	_	_
20	was	_	VBD	VBD	_	21	auxpass	_	_
21	learned	_	VBN	VBN	_	15	advcl	_	_
22	that	_	IN	IN	_	25	mark	_	_
23	Iran	_	NNP	NNP	_	25	nsubj	_	_
24	had	_	VBD	VBD	_	25	aux	_	_
25	made	_	VBN	VBN	_	21	ccomp	_	_
26	offers	_	NNS	NNS	_	25	dobj	_	_
27	to	_	TO	TO	_	25	prep	_	_
28	the	_	DT	DT	_	31	det	_	_
29	State	_	NNP	NNP	_	31	nn	_	_
30	Scientific	_	NNP	NNP	_	31	nn	_	_
31	Center	_	NNP	NNP	_	27	pobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	applied	_	JJ	JJ	_	34	amod	_	_
34	microbiology	_	NN	NN	_	32	pobj	_	_
35	to	_	TO	TO	_	36	aux	_	_
36	purchase	_	VB	VB	_	25	vmod	_	_
37	its	_	PRP$	PRP$	_	38	poss	_	_
38	expertise	_	NN	NN	_	36	dobj	_	_
39	.	_	.	.	_	15	punct	_	_

Oracle:
(a / aid-01, ARG0, w / world-region)
(a / aid-01, ARG1, c / convert-01)
(c / convert-01, ARG1, l / laboratory)
(c2 / cause-01, ARG0, l2 / learn-01)
(c2 / cause-01, ARG1, p / peak-01)
(c3 / country, name, n3 / name)
(d / date-entity, year, 1997)
(e / expert-41, ARG1, r / research-institute)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG2, g / general)
(l / laboratory, mod, b2 / bioweapon)
(l / laboratory, poss, p3 / person)
(l2 / learn-01, ARG1, o2 / offer-01)
(n / name, op, "West")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(n3 / name, op, "Iran")
(n4 / name, op, "Applied")
(n4 / name, op, "Center")
(n4 / name, op, "Microbiology")
(n4 / name, op, "Scientific")
(n4 / name, op, "State")
(n4 / name, op, "of")
(o2 / offer-01, ARG0, c3 / country)
(o2 / offer-01, ARG1, p2 / purchase-01)
(o2 / offer-01, ARG3, r / research-institute)
(p / peak-01, ARG1, a / aid-01)
(p / peak-01, time, d / date-entity)
(p2 / purchase-01, ARG0, c3 / country)
(p2 / purchase-01, ARG1, e / expert-41)
(p3 / person, name, n2 / name)
(r / research-institute, name, n4 / name)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),expertise,expertise,false), Span(35,36,List(1),purchase,purchase-01,false), Span(28,32,List(7, 6, 5, 4, 3, 2),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(25,26,List(8),offers,offer-01,false), Span(20,21,List(9),learned,learn-01,false), Span(17,18,List(10),because,cause-01,false), Span(16,17,List(14, 13, 12, 11),970000,(date-entity :day 0 :month 0 :year 97),false), Span(13,14,List(15),laboratory,laboratory,false), Span(6,9,List(20, 19, 18, 17, 16),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false), Span(3,4,List(21),conversion,convert-01,false), Span(1,2,List(22),aid,aid-01,false), Span(0,1,List(25, 24, 23),Western,(world-region :name (name :op "West")),false)),Map(2 -> organization, 5 -> "Scientific", 12 -> 0, 8 -> offer-01, 15 -> laboratory, 21 -> convert-01, 18 -> "Nikolai", 24 -> name, 7 -> "of", 1 -> purchase-01, 17 -> name, 23 -> world-region, 4 -> "State", 11 -> date-entity, 14 -> 97, 20 -> "Urakov", 6 -> "Center", 9 -> learn-01, 0 -> expertise, 22 -> aid-01, 16 -> person, 19 -> "N.", 10 -> cause-01, 3 -> name, 25 -> "West", 13 -> 0),Map(e -> expertise, w -> world-region, n -> name, p2 -> person, d -> date-entity, p -> purchase-01, n3 -> name, a -> aid-01, o2 -> offer-01, 02 -> 0, l2 -> laboratory, c -> cause-01, l -> learn-01, 0 -> 0, 9 -> 97, o -> organization, c2 -> convert-01, n2 -> name))),[Ljava.lang.String;@20c0a64d,Annotation([Ljava.lang.String;@455b6df1,[Ljava.lang.String;@4ddbbdf8,[Ljava.lang.String;@3f67593e),Annotation([Ljava.lang.String;@1ab06251,[Ljava.lang.String;@41ab013,[Ledu.cmu.lti.nlp.amr.Dependency;@14bee915),Annotation([Ljava.lang.String;@1115ec15,[Ljava.lang.String;@82ea68c,[Ljava.lang.String;@59e505b2),Annotation([Ljava.lang.String;@3af0a9da,[Ljava.lang.String;@43b9fd5,[Ledu.cmu.lti.nlp.amr.Entity;@79dc5318))
AMR:
(a / aid-01, ARG0, p2 / person)
(a / aid-01, ARG1, c2 / convert-01)
(a / aid-01, mod, w / world-region)
(c / cause-01, ARG0, l / learn-01)
(c / cause-01, ARG1, d / date-entity)
(c2 / convert-01, ARG1, l2 / laboratory)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 9 / 97)
(l / learn-01, ARG0, a / aid-01)
(l / learn-01, ARG1, o2 / offer-01)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(n3 / name, op, "West")
(o / organization, name, n / name)
(o2 / offer-01, ARG1, p / purchase-01)
(p / purchase-01, ARG0, o / organization)
(p / purchase-01, ARG1, e / expertise)
(p2 / person, name, n2 / name)
(w / world-region, name, n3 / name)

Decoded in 471,102 microseconds
Sentence: Russian scientists and military leaders who now depend on Western financing to destroy nuclear, chemical and biological weapons have been known to orchestrate a sense of crisis to increase financing.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 17-18:  biological => biology
Span 15-16:  chemical => chemical
Span 27-28:  crisis => crisis
Span 7-8:  depend => depend-01
Span 12-13:  destroy => destroy-01
Span 30-31:  financing => finance-01
Span 10-11:  financing => finance-01
Span 29-30:  increase => increase-01
Span 21-22:  known => know-01
Span 4-5:  leaders => (person :ARG0-of lead-02)
Span 6-7:  now => now
Span 13-14:  nuclear => nucleus
Span 1-2:  scientists => scientist
Span 25-26:  sense => sense
Span 9-10:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 2-3:  and => and
Oracle Span 16-17:  and => and
Oracle Span 17-18:  biological => biology
Oracle Span 15-16:  chemical => chemical
Oracle Span 27-28:  crisis => crisis
Oracle Span 7-8:  depend => depend-01
Oracle Span 12-13:  destroy => destroy-01
Oracle Span 10-11:  financing => finance-01
Oracle Span 30-31:  financing => finance-01
Oracle Span 29-30:  increase => increase-01
Oracle Span 21-22:  known => know-01
Oracle Span 4-5:  leaders => (person :ARG0-of lead-02)
Oracle Span 3-4:  military => military
Oracle Span 6-7:  now => now
Oracle Span 13-14:  nuclear => nucleus
Oracle Span 23-24:  orchestrate => orchestrate-01
Oracle Span 0-1:  Russian => (country :name (name :op "Russia"))
Oracle Span 1-2:  scientists => scientist
Oracle Span 25-26:  sense => sense-01
Oracle Span 18-19:  weapons => weapon
Oracle Span 9-10:  Western => (world-region :name (name :op "West"))

Incorrect span: sense => sense
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: orchestrate => orchestrate-01
Missing span: sense => sense-01
Missing span: and => and
Missing span: and => and
Missing span: weapons => weapon
Missing span: military => military
Dependencies:
1	Russian	_	JJ	JJ	_	2	amod	_	_
2	scientists	_	NNS	NNS	_	22	nsubjpass	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	military	_	JJ	JJ	_	5	amod	_	_
5	leaders	_	NNS	NNS	_	2	conj	_	_
6	who	_	WP	WP	_	8	nsubj	_	_
7	now	_	RB	RB	_	8	advmod	_	_
8	depend	_	VBP	VBP	_	5	rcmod	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	Western	_	JJ	JJ	_	11	amod	_	_
11	financing	_	NN	NN	_	9	pobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	destroy	_	VB	VB	_	8	xcomp	_	_
14	nuclear	_	JJ	JJ	_	19	amod	_	_
15	,	_	,	,	_	14	punct	_	_
16	chemical	_	JJ	JJ	_	14	conj	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	biological	_	JJ	JJ	_	14	conj	_	_
19	weapons	_	NNS	NNS	_	13	dobj	_	_
20	have	_	VBP	VBP	_	22	aux	_	_
21	been	_	VBN	VBN	_	22	auxpass	_	_
22	known	_	VBN	VBN	_	0	root	_	_
23	to	_	TO	TO	_	24	aux	_	_
24	orchestrate	_	VB	VB	_	22	xcomp	_	_
25	a	_	DT	DT	_	26	det	_	_
26	sense	_	NN	NN	_	24	dobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	crisis	_	NN	NN	_	27	pobj	_	_
29	to	_	TO	TO	_	30	aux	_	_
30	increase	_	VB	VB	_	24	vmod	_	_
31	financing	_	NN	NN	_	30	dobj	_	_
32	.	_	.	.	_	22	punct	_	_

Oracle:
(a2 / and, op, p / person)
(a2 / and, op, s / scientist)
(a3 / and, op, w5 / weapon)
(c / country, name, n / name)
(d / depend-01, ARG0, a2 / and)
(d / depend-01, ARG1, f / finance-01)
(d / depend-01, purpose, d2 / destroy-01)
(d / depend-01, time, n2 / now)
(d2 / destroy-01, ARG1, a3 / and)
(f / finance-01, ARG0, w / world-region)
(i / increase-01, ARG1, f2 / finance-01)
(k / know-01, ARG1, a2 / and)
(k / know-01, ARG2, o / orchestrate-01)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, m / military)
(n / name, op, "Russia")
(n3 / name, op, "West")
(o / orchestrate-01, ARG0, a2 / and)
(o / orchestrate-01, ARG1, s2 / sense-01)
(o / orchestrate-01, purpose, i / increase-01)
(s / scientist, mod, c / country)
(s2 / sense-01, ARG1, c3 / crisis)
(w / world-region, name, n3 / name)
(w5 / weapon, mod, b / biology)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),financing,finance-01,false), Span(29,30,List(1),increase,increase-01,false), Span(27,28,List(2),crisis,crisis,false), Span(25,26,List(3),sense,sense,false), Span(21,22,List(4),known,know-01,false), Span(17,18,List(5),biological,biology,false), Span(15,16,List(6),chemical,chemical,false), Span(13,14,List(7),nuclear,nucleus,false), Span(12,13,List(8),destroy,destroy-01,false), Span(10,11,List(9),financing,finance-01,false), Span(9,10,List(12, 11, 10),Western,(world-region :name (name :op "West")),false), Span(7,8,List(13),depend,depend-01,false), Span(6,7,List(14),now,now,false), Span(4,5,List(16, 15),leaders,(person :ARG0-of lead-02),false), Span(1,2,List(17),scientists,scientist,false)),Map(2 -> crisis, 5 -> biology, 12 -> "West", 15 -> person, 8 -> destroy-01, 7 -> nucleus, 17 -> scientist, 1 -> increase-01, 4 -> know-01, 11 -> name, 14 -> now, 6 -> chemical, 0 -> finance-01, 9 -> finance-01, 16 -> lead-02, 3 -> sense, 10 -> world-region, 13 -> depend-01),Map(n -> nucleus, w -> world-region, s2 -> scientist, k -> know-01, b -> biology, s -> sense, d -> destroy-01, p -> person, n3 -> now, d2 -> depend-01, i -> increase-01, c -> crisis, l -> lead-02, f2 -> finance-01, f -> finance-01, c2 -> chemical, n2 -> name))),[Ljava.lang.String;@8e50104,Annotation([Ljava.lang.String;@37e4d7bb,[Ljava.lang.String;@6f7923a5,[Ljava.lang.String;@74a6f9c1),Annotation([Ljava.lang.String;@54eb2b70,[Ljava.lang.String;@45a37759,[Ledu.cmu.lti.nlp.amr.Dependency;@63611043),Annotation([Ljava.lang.String;@20ca951f,[Ljava.lang.String;@2d778add,[Ljava.lang.String;@73302995),Annotation([Ljava.lang.String;@1838ccb8,[Ljava.lang.String;@6c2ed0cd,[Ledu.cmu.lti.nlp.amr.Entity;@7d9e8ef7))
AMR:
(b / biology, op, f / finance-01)
(d / destroy-01, ARG1, s2 / scientist)
(d2 / depend-01, ARG0, p / person)
(d2 / depend-01, ARG1, d / destroy-01)
(d2 / depend-01, time, n3 / now)
(f / finance-01, ARG0, c2 / chemical)
(f / finance-01, ARG1, n / nucleus)
(f2 / finance-01, ARG0, w / world-region)
(f2 / finance-01, ARG1, d / destroy-01)
(i / increase-01, ARG0, s2 / scientist)
(i / increase-01, ARG1, f / finance-01)
(k / know-01, ARG1, s2 / scientist)
(l / lead-02, ARG0, p / person)
(n2 / name, op, "West")
(s / sense, op, c / crisis)
(s / sense, purpose, i / increase-01)
(w / world-region, name, n2 / name)

Decoded in 728,333 microseconds
Sentence: American scientist Randall Lee Beatty is working on the conversion of the State Scientific Center of applied Microbiology in obolensk.

NER Entity: (thing :name (name :op "American"))
NER Entity: (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Spans:
Span 9-10:  conversion => convert-01
Span 2-5:  Randall Lee Beatty => (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
Span 12-18:  State Scientific Center of applied Microbiology => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  American => (country :name (name :op "America"))
Oracle Span 9-10:  conversion => convert-01
Oracle Span 19-20:  obolensk => (city :name (name :op "Obolensk"))
Oracle Span 2-5:  Randall Lee Beatty => (name :op "Beatty" :op "Lee" :op "Randall")
Oracle Span 1-2:  scientist => scientist
Oracle Span 12-18:  State Scientific Center of applied Microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 6-7:  working => work-01

Incorrect span: State Scientific Center of applied Microbiology => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Incorrect span: Randall Lee Beatty => (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
Missing span: Randall Lee Beatty => (name :op "Beatty" :op "Lee" :op "Randall")
Missing span: State Scientific Center of applied Microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: obolensk => (city :name (name :op "Obolensk"))
Missing span: American => (country :name (name :op "America"))
Missing span: working => work-01
Missing span: scientist => scientist
Dependencies:
1	American	_	JJ	JJ	_	5	amod	_	_
2	scientist	_	NN	NN	_	5	nn	_	_
3	Randall	_	NNP	NNP	_	5	nn	_	_
4	Lee	_	NNP	NNP	_	5	nn	_	_
5	Beatty	_	NNP	NNP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	aux	_	_
7	working	_	VBG	VBG	_	0	root	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	conversion	_	NN	NN	_	8	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	15	det	_	_
13	State	_	NNP	NNP	_	15	nn	_	_
14	Scientific	_	NNP	NNP	_	15	nn	_	_
15	Center	_	NNP	NNP	_	11	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	applied	_	JJ	JJ	_	18	amod	_	_
18	Microbiology	_	NNP	NNP	_	16	pobj	_	_
19	in	_	IN	IN	_	7	prep	_	_
20	obolensk	_	NN	NN	_	19	pobj	_	_
21	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / convert-01, ARG0, s / scientist)
(c2 / convert-01, ARG1, r / research-institute)
(c3 / city, name, n4 / name)
(n / name, op, "Beatty")
(n / name, op, "Lee")
(n / name, op, "Randall")
(n2 / name, op, "America")
(n3 / name, op, "Applied")
(n3 / name, op, "Center")
(n3 / name, op, "Microbiology")
(n3 / name, op, "Scientific")
(n3 / name, op, "State")
(n3 / name, op, "of")
(n4 / name, op, "Obolensk")
(r / research-institute, location, c3 / city)
(r / research-institute, name, n3 / name)
(s / scientist, mod, c / country)
(s / scientist, name, n / name)
(w / work-01, ARG0, s / scientist)
(w / work-01, ARG1, c2 / convert-01)

Input(Some(Graph(null,ArrayBuffer(Span(12,18,List(7, 6, 5, 4, 3, 2, 1, 0),State Scientific Center of applied Microbiology,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology")),false), Span(9,10,List(8),conversion,convert-01,false), Span(2,5,List(13, 12, 11, 10, 9),Randall Lee Beatty,(person :name (name :op "Randall" :op "Lee" :op "Beatty")),false)),Map(2 -> "State", 5 -> "of", 12 -> "Lee", 8 -> convert-01, 7 -> "Microbiology", 1 -> name, 4 -> "Center", 11 -> "Randall", 6 -> "applied", 0 -> organization, 9 -> person, 3 -> "Scientific", 10 -> name, 13 -> "Beatty"),Map(n -> name, p -> person, c -> convert-01, o -> organization, n2 -> name))),[Ljava.lang.String;@f107c50,Annotation([Ljava.lang.String;@51133c06,[Ljava.lang.String;@4b213651,[Ljava.lang.String;@4241e0f4),Annotation([Ljava.lang.String;@4ebff610,[Ljava.lang.String;@60410cd,[Ledu.cmu.lti.nlp.amr.Dependency;@44d52de2),Annotation([Ljava.lang.String;@95e33cc,[Ljava.lang.String;@38604b81,[Ljava.lang.String;@1e44b638),Annotation([Ljava.lang.String;@7393222f,[Ljava.lang.String;@babafc2,[Ledu.cmu.lti.nlp.amr.Entity;@31add175))
AMR:
(c / convert-01, ARG0, p / person)
(c / convert-01, ARG1, o / organization)
(n / name, op, "Center")
(n / name, op, "Microbiology")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "applied")
(n / name, op, "of")
(n2 / name, op, "Beatty")
(n2 / name, op, "Lee")
(n2 / name, op, "Randall")
(o / organization, name, n / name)
(p / person, name, n2 / name)

Decoded in 68,908 microseconds
Sentence: Beatty stated that this threat to cut electricity to the State Scientific Center of applied microbiology is a crisis.

NER Entity: (person :name (name :op "Beatty"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 18-19:  crisis => crisis
Span 7-8:  electricity => electricity
Span 10-14:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 3-4:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Beatty => (person :name (name :op "Beatty"))
Oracle Span 18-19:  crisis => crisis
Oracle Span 6-7:  cut => cut-02
Oracle Span 7-8:  electricity => electricity
Oracle Span 10-16:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 1-2:  stated => state-01
Oracle Span 3-4:  this => this
Oracle Span 4-5:  threat => threaten-01

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Missing span: Beatty => (person :name (name :op "Beatty"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: stated => state-01
Missing span: cut => cut-02
Missing span: threat => threaten-01
Dependencies:
1	Beatty	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	19	mark	_	_
4	this	_	DT	DT	_	5	det	_	_
5	threat	_	NN	NN	_	19	nsubj	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	cut	_	VB	VB	_	5	vmod	_	_
8	electricity	_	NN	NN	_	7	dobj	_	_
9	to	_	TO	TO	_	7	prep	_	_
10	the	_	DT	DT	_	13	det	_	_
11	State	_	NNP	NNP	_	13	nn	_	_
12	Scientific	_	NNP	NNP	_	13	nn	_	_
13	Center	_	NNP	NNP	_	9	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	applied	_	JJ	JJ	_	16	amod	_	_
16	microbiology	_	NN	NN	_	14	pobj	_	_
17	is	_	VBZ	VBZ	_	19	cop	_	_
18	a	_	DT	DT	_	19	det	_	_
19	crisis	_	NN	NN	_	2	ccomp	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(c / cut-02, ARG1, e / electricity)
(c / cut-02, location, r / research-institute)
(c2 / crisis, domain, t / threaten-01)
(n / name, op, "Beatty")
(n2 / name, op, "Applied")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(p / person, name, n / name)
(r / research-institute, name, n2 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c2 / crisis)
(t / threaten-01, ARG1, c / cut-02)
(t / threaten-01, mod, t2 / this)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),crisis,crisis,false), Span(10,14,List(6, 5, 4, 3, 2, 1),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(7,8,List(7),electricity,electricity,false), Span(3,4,List(8),this,this,false)),Map(2 -> name, 5 -> "Center", 8 -> this, 7 -> electricity, 1 -> organization, 4 -> "Scientific", 6 -> "of", 0 -> crisis, 3 -> "State"),Map(e -> electricity, n -> name, t -> this, c -> crisis, o -> organization))),[Ljava.lang.String;@ae3540e,Annotation([Ljava.lang.String;@600b9d27,[Ljava.lang.String;@3688eb5b,[Ljava.lang.String;@69f1a286),Annotation([Ljava.lang.String;@7922d892,[Ljava.lang.String;@457c9034,[Ledu.cmu.lti.nlp.amr.Dependency;@345f69f3),Annotation([Ljava.lang.String;@50de186c,[Ljava.lang.String;@3f57bcad,[Ljava.lang.String;@1e8b7643),Annotation([Ljava.lang.String;@51549490,[Ljava.lang.String;@71e9ebae,[Ledu.cmu.lti.nlp.amr.Entity;@73d983ea))
AMR:
(c / crisis, domain, t / this)
(e / electricity, location, o / organization)
(e / electricity, poss, c / crisis)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(o / organization, name, n / name)

Decoded in 58,166 microseconds
Sentence: Randall Lee Beatty is a Director of the International Science and Technology Center.

NER Entity: (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
NER Entity: (organization :name (name :op "International" :op "Science"))
NER Entity: (organization :name (name :op "Technology" :op "Center"))
Spans:
Span 8-10:  International Science => (organization :name (name :op "International" :op "Science"))
Span 0-3:  Randall Lee Beatty => (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
Span 11-13:  Technology Center => (organization :name (name :op "Technology" :op "Center"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 8-13:  International Science and Technology Center => (research-institute :name (name :op "Center" :op "Technology" :op "and" :op "Science" :op "International"))
Oracle Span 0-3:  Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))

Extra span: Technology Center => (organization :name (name :op "Technology" :op "Center"))
Extra span: International Science => (organization :name (name :op "International" :op "Science"))
Incorrect span: Randall Lee Beatty => (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
Missing span: Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))
Missing span: International Science and Technology Center => (research-institute :name (name :op "Center" :op "Technology" :op "and" :op "Science" :op "International"))
Missing span: Director => (have-org-role-91 :ARG2 director)
Dependencies:
1	Randall	_	NNP	NNP	_	3	nn	_	_
2	Lee	_	NNP	NNP	_	3	nn	_	_
3	Beatty	_	NNP	NNP	_	6	nsubj	_	_
4	is	_	VBZ	VBZ	_	6	cop	_	_
5	a	_	DT	DT	_	6	det	_	_
6	Director	_	NNP	NNP	_	0	root	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	International	_	NNP	NNP	_	10	nn	_	_
10	Science	_	NNP	NNP	_	7	pobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	Technology	_	NNP	NNP	_	13	nn	_	_
13	Center	_	NNP	NNP	_	10	conj	_	_
14	.	_	.	.	_	6	punct	_	_

Oracle:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, r / research-institute)
(h / have-org-role-91, ARG2, d2 / director)
(n / name, op, "Center")
(n / name, op, "International")
(n / name, op, "Science")
(n / name, op, "Technology")
(n / name, op, "and")
(n2 / name, op, "Beatty")
(n2 / name, op, "Lee")
(n2 / name, op, "Randall")
(p / person, name, n2 / name)
(r / research-institute, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(11,13,List(3, 2, 1, 0),Technology Center,(organization :name (name :op "Technology" :op "Center")),false), Span(8,10,List(7, 6, 5, 4),International Science,(organization :name (name :op "International" :op "Science")),false), Span(0,3,List(12, 11, 10, 9, 8),Randall Lee Beatty,(person :name (name :op "Randall" :op "Lee" :op "Beatty")),false)),Map(2 -> "Technology", 5 -> name, 12 -> "Beatty", 8 -> person, 7 -> "Science", 1 -> name, 4 -> organization, 11 -> "Lee", 6 -> "International", 0 -> organization, 9 -> name, 3 -> "Center", 10 -> "Randall"),Map(n -> name, p -> person, n3 -> name, o2 -> organization, o -> organization, n2 -> name))),[Ljava.lang.String;@36a5cabc,Annotation([Ljava.lang.String;@432038ec,[Ljava.lang.String;@7daa0fbd,[Ljava.lang.String;@42530531),Annotation([Ljava.lang.String;@5a3bc7ed,[Ljava.lang.String;@181e731e,[Ledu.cmu.lti.nlp.amr.Dependency;@35645047),Annotation([Ljava.lang.String;@6f44a157,[Ljava.lang.String;@6bc407fd,[Ljava.lang.String;@291f18),Annotation([Ljava.lang.String;@17d88132,[Ljava.lang.String;@5ddcc487,[Ledu.cmu.lti.nlp.amr.Entity;@16eccb2e))
AMR:
(n / name, op, "Center")
(n / name, op, "Technology")
(n2 / name, op, "International")
(n2 / name, op, "Science")
(n3 / name, op, "Beatty")
(n3 / name, op, "Lee")
(n3 / name, op, "Randall")
(o / organization, name, n / name)
(o2 / organization, mod, o / organization)
(o2 / organization, name, n2 / name)
(p / person, name, n3 / name)
(p / person, poss, o / organization)

Decoded in 43,638 microseconds
Sentence: The International Science and Technology Center finances approximately half of General Nikolai N. Urakov's budget to support about 350 Russian biowarfare scientists and technicians.

NER Entity: (organization :name (name :op "International" :op "Science"))
NER Entity: (organization :name (name :op "Technology" :op "Center"))
NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 19-20:  350 => 350
Span 1-3:  International Science => (organization :name (name :op "International" :op "Science"))
Span 11-14:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 22-23:  scientists => scientist
Span 17-18:  support => support-01
Span 24-25:  technicians => technician
Span 4-6:  Technology Center => (organization :name (name :op "Technology" :op "Center"))

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 19-20:  350 => 350
Oracle Span 18-19:  about => about
Oracle Span 23-24:  and => and
Oracle Span 7-8:  approximately => approximately
Oracle Span 21-22:  biowarfare => biowarfare
Oracle Span 15-16:  budget => budget-01
Oracle Span 6-7:  finances => finance-01
Oracle Span 10-11:  General => (have-org-role-91 :ARG2 general)
Oracle Span 1-6:  International Science and Technology Center => (research-institute :name (name :op "Center" :op "Technology" :op "and" :op "Science" :op "International"))
Oracle Span 11-14:  Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Oracle Span 9-10:  of => include-91
Oracle Span 20-21:  Russian => (country :name (name :op "Russia"))
Oracle Span 22-23:  scientists => scientist
Oracle Span 17-18:  support => support-01
Oracle Span 24-25:  technicians => technician

Incorrect span: Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Extra span: Technology Center => (organization :name (name :op "Technology" :op "Center"))
Extra span: International Science => (organization :name (name :op "International" :op "Science"))
Missing span: International Science and Technology Center => (research-institute :name (name :op "Center" :op "Technology" :op "and" :op "Science" :op "International"))
Missing span: Nikolai N. Urakov => (person :name (name :op "Urakov" :op "N." :op "Nikolai"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: finances => finance-01
Missing span: of => include-91
Missing span: approximately => approximately
Missing span: budget => budget-01
Missing span: about => about
Missing span: and => and
Missing span: biowarfare => biowarfare
Missing span: General => (have-org-role-91 :ARG2 general)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	International	_	NNP	NNP	_	3	nn	_	_
3	Science	_	NNP	NNP	_	7	nsubj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	Technology	_	NNP	NNP	_	6	nn	_	_
6	Center	_	NNP	NNP	_	3	conj	_	_
7	finances	_	VBZ	VBZ	_	0	root	_	_
8	approximately	_	RB	RB	_	9	quantmod	_	_
9	half	_	PDT	PDT	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	General	_	NNP	NNP	_	14	nn	_	_
12	Nikolai	_	NNP	NNP	_	14	nn	_	_
13	N.	_	NNP	NNP	_	14	nn	_	_
14	Urakov	_	NNP	NNP	_	16	poss	_	_
15	's	_	POS	POS	_	14	possessive	_	_
16	budget	_	NN	NN	_	10	pobj	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	support	_	VB	VB	_	16	vmod	_	_
19	about	_	RB	RB	_	20	quantmod	_	_
20	350	_	CD	CD	_	23	num	_	_
21	Russian	_	JJ	JJ	_	23	amod	_	_
22	biowarfare	_	NN	NN	_	23	nn	_	_
23	scientists	_	NNS	NNS	_	18	dobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	technicians	_	NNS	NNS	_	23	conj	_	_
26	.	_	.	.	_	7	punct	_	_

Oracle:
(a2 / about, op, a3 / and)
(a3 / and, mod, b2 / biowarfare)
(a3 / and, mod, c / country)
(a3 / and, op, s2 / scientist)
(a3 / and, op, t / technician)
(a3 / and, quant, 3 / 350)
(b / budget-01, ARG2, s / support-01)
(c / country, name, n3 / name)
(f / finance-01, ARG0, r / research-institute)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG2, g / general)
(i2 / include-91, ARG3, a / approximately)
(n / name, op, "Center")
(n / name, op, "International")
(n / name, op, "Science")
(n / name, op, "Technology")
(n / name, op, "and")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(n3 / name, op, "Russia")
(p / person, name, n2 / name)
(r / research-institute, name, n / name)
(s / support-01, ARG0, r / research-institute)
(s / support-01, ARG1, a2 / about)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),technicians,technician,false), Span(22,23,List(1),scientists,scientist,false), Span(19,20,List(2),350,350,false), Span(17,18,List(3),support,support-01,false), Span(11,14,List(8, 7, 6, 5, 4),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false), Span(4,6,List(12, 11, 10, 9),Technology Center,(organization :name (name :op "Technology" :op "Center")),false), Span(1,3,List(16, 15, 14, 13),International Science,(organization :name (name :op "International" :op "Science")),false)),Map(2 -> 350, 5 -> name, 12 -> "Center", 15 -> "International", 8 -> "Urakov", 7 -> "N.", 1 -> scientist, 4 -> person, 11 -> "Technology", 14 -> name, 6 -> "Nikolai", 0 -> technician, 9 -> organization, 16 -> "Science", 3 -> support-01, 10 -> name, 13 -> organization),Map(n -> name, s2 -> support-01, t -> technician, s -> scientist, p -> person, n3 -> name, o2 -> organization, o -> organization, n2 -> name, 3 -> 350))),[Ljava.lang.String;@5ef5c734,Annotation([Ljava.lang.String;@d771cc9,[Ljava.lang.String;@36b4091c,[Ljava.lang.String;@4671115f),Annotation([Ljava.lang.String;@36cda2c2,[Ljava.lang.String;@3697186,[Ledu.cmu.lti.nlp.amr.Dependency;@1583741e),Annotation([Ljava.lang.String;@5b367418,[Ljava.lang.String;@36060e,[Ljava.lang.String;@481ba2cf),Annotation([Ljava.lang.String;@46b61c56,[Ljava.lang.String;@2e48362c,[Ledu.cmu.lti.nlp.amr.Entity;@1efe439d))
AMR:
(n / name, op, "N.")
(n / name, op, "Nikolai")
(n / name, op, "Urakov")
(n2 / name, op, "Center")
(n2 / name, op, "Technology")
(n3 / name, op, "International")
(n3 / name, op, "Science")
(o / organization, name, n2 / name)
(o2 / organization, mod, t / technician)
(o2 / organization, name, n3 / name)
(o2 / organization, op, s2 / support-01)
(p / person, name, n / name)
(s / scientist, quant, 3 / 350)
(s2 / support-01, ARG0, p / person)
(s2 / support-01, ARG1, s / scientist)
(s2 / support-01, ARG2, o / organization)

Decoded in 291,612 microseconds
Sentence: Randall Lee Beatty stated that it is known that the State Scientific Center of applied microbiology has not paid its electricity bill for 14 months.

NER Entity: (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 21-22:  bill => bill
Span 20-21:  electricity => electricity
Span 7-8:  known => know-01
Span 24-25:  months => (temporal-quantity :unit month)
Span 18-19:  paid => pay-01
Span 0-3:  Randall Lee Beatty => (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
Span 10-14:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 23-24:  14 => 14
Oracle Span 21-22:  bill => bill
Oracle Span 20-21:  electricity => electricity
Oracle Span 7-8:  known => know-01
Oracle Span 24-25:  months => (temporal-quantity :unit month)
Oracle Span 18-19:  paid => pay-01
Oracle Span 0-3:  Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))
Oracle Span 10-16:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 3-4:  stated => state-01

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: Randall Lee Beatty => (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
Missing span: Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: stated => state-01
Missing span: 14 => 14
Dependencies:
1	Randall	_	NNP	NNP	_	3	nn	_	_
2	Lee	_	NNP	NNP	_	3	nn	_	_
3	Beatty	_	NNP	NNP	_	4	nsubj	_	_
4	stated	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	8	mark	_	_
6	it	_	PRP	PRP	_	8	nsubjpass	_	_
7	is	_	VBZ	VBZ	_	8	auxpass	_	_
8	known	_	VBN	VBN	_	4	ccomp	_	_
9	that	_	IN	IN	_	19	mark	_	_
10	the	_	DT	DT	_	13	det	_	_
11	State	_	NNP	NNP	_	13	nn	_	_
12	Scientific	_	NNP	NNP	_	13	nn	_	_
13	Center	_	NNP	NNP	_	19	nsubj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	applied	_	JJ	JJ	_	16	amod	_	_
16	microbiology	_	NN	NN	_	14	pobj	_	_
17	has	_	VBZ	VBZ	_	19	aux	_	_
18	not	_	RB	RB	_	19	neg	_	_
19	paid	_	VBN	VBN	_	8	ccomp	_	_
20	its	_	PRP$	PRP$	_	22	poss	_	_
21	electricity	_	NN	NN	_	22	nn	_	_
22	bill	_	NN	NN	_	19	dobj	_	_
23	for	_	IN	IN	_	19	prep	_	_
24	14	_	CD	CD	_	25	num	_	_
25	months	_	NNS	NNS	_	23	pobj	_	_
26	.	_	.	.	_	4	punct	_	_

Oracle:
(b / bill, mod, e / electricity)
(b / bill, poss, r / research-institute)
(k / know-01, ARG1, p2 / pay-01)
(n / name, op, "Beatty")
(n / name, op, "Lee")
(n / name, op, "Randall")
(n2 / name, op, "Applied")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(p / person, name, n / name)
(p2 / pay-01, ARG0, r / research-institute)
(p2 / pay-01, ARG1, b / bill)
(p2 / pay-01, duration, t / temporal-quantity)
(r / research-institute, name, n2 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, k / know-01)
(t / temporal-quantity, quant, 1 / 14)
(t / temporal-quantity, unit, m / month)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),months,(temporal-quantity :unit month),false), Span(21,22,List(2),bill,bill,false), Span(20,21,List(3),electricity,electricity,false), Span(18,19,List(4),paid,pay-01,false), Span(10,14,List(10, 9, 8, 7, 6, 5),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(7,8,List(11),known,know-01,false), Span(0,3,List(16, 15, 14, 13, 12),Randall Lee Beatty,(person :name (name :op "Randall" :op "Lee" :op "Beatty")),false)),Map(2 -> bill, 5 -> organization, 12 -> person, 15 -> "Lee", 8 -> "Scientific", 7 -> "State", 1 -> month, 4 -> pay-01, 11 -> know-01, 14 -> "Randall", 6 -> name, 0 -> temporal-quantity, 9 -> "Center", 16 -> "Beatty", 3 -> electricity, 10 -> "of", 13 -> name),Map(n -> name, e -> electricity, k -> know-01, b -> bill, t -> temporal-quantity, p2 -> person, m -> month, p -> pay-01, o -> organization, n2 -> name))),[Ljava.lang.String;@be68757,Annotation([Ljava.lang.String;@7d446ed1,[Ljava.lang.String;@12d2ce03,[Ljava.lang.String;@7e5c856f),Annotation([Ljava.lang.String;@413f69cc,[Ljava.lang.String;@1f53a5dc,[Ledu.cmu.lti.nlp.amr.Dependency;@1b75c2e3),Annotation([Ljava.lang.String;@1984b1f,[Ljava.lang.String;@3bd323e9,[Ljava.lang.String;@39ac0c0a),Annotation([Ljava.lang.String;@c7ba306,[Ljava.lang.String;@4ff8d125,[Ledu.cmu.lti.nlp.amr.Entity;@6d167f58))
AMR:
(b / bill, mod, e / electricity)
(k / know-01, ARG0, p2 / person)
(k / know-01, ARG1, p / pay-01)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Beatty")
(n2 / name, op, "Lee")
(n2 / name, op, "Randall")
(o / organization, name, n / name)
(p / pay-01, ARG0, o / organization)
(p / pay-01, ARG1, b / bill)
(p / pay-01, time, m / month)
(p2 / person, name, n2 / name)
(t / temporal-quantity, unit, m / month)

Decoded in 114,764 microseconds
Sentence: Randall Lee Beatty stated that the State Scientific Center of applied microbiology is one of the important archives for dangerous pathogens in the world and it would be a shame if those archives were destroyed for not paying the electricity utility.

NER Entity: (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 34-35:  destroyed => destroy-01
Span 39-40:  electricity => electricity
Span 16-17:  important => important
Span 37-38:  paying => pay-01
Span 0-3:  Randall Lee Beatty => (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
Span 6-10:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 40-41:  utility => utility

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 24-25:  and => and
Oracle Span 17-18:  archives => archive-01
Oracle Span 19-20:  dangerous => danger
Oracle Span 34-35:  destroyed => destroy-01
Oracle Span 39-40:  electricity => electricity
Oracle Span 30-31:  if => cause-01
Oracle Span 16-17:  important => importance
Oracle Span 14-15:  of => include-91
Oracle Span 20-21:  pathogens => pathogen
Oracle Span 37-38:  paying => pay-01
Oracle Span 0-3:  Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))
Oracle Span 29-30:  shame => shame-01
Oracle Span 6-12:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 3-4:  stated => state-01
Oracle Span 40-41:  utility => utility
Oracle Span 23-24:  world => world

Incorrect span: important => important
Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: Randall Lee Beatty => (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
Missing span: Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: stated => state-01
Missing span: and => and
Missing span: shame => shame-01
Missing span: if => cause-01
Missing span: of => include-91
Missing span: archives => archive-01
Missing span: world => world
Missing span: pathogens => pathogen
Missing span: important => importance
Missing span: dangerous => danger
Dependencies:
1	Randall	_	NNP	NNP	_	3	nn	_	_
2	Lee	_	NNP	NNP	_	3	nn	_	_
3	Beatty	_	NNP	NNP	_	4	nsubj	_	_
4	stated	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	14	mark	_	_
6	the	_	DT	DT	_	9	det	_	_
7	State	_	NNP	NNP	_	9	nn	_	_
8	Scientific	_	NNP	NNP	_	9	nn	_	_
9	Center	_	NNP	NNP	_	14	nsubj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	applied	_	JJ	JJ	_	12	amod	_	_
12	microbiology	_	NN	NN	_	10	pobj	_	_
13	is	_	VBZ	VBZ	_	14	cop	_	_
14	one	_	CD	CD	_	4	ccomp	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	18	det	_	_
17	important	_	JJ	JJ	_	18	amod	_	_
18	archives	_	NNS	NNS	_	15	pobj	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	dangerous	_	JJ	JJ	_	21	amod	_	_
21	pathogens	_	NNS	NNS	_	19	pobj	_	_
22	in	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	24	det	_	_
24	world	_	NN	NN	_	22	pobj	_	_
25	and	_	CC	CC	_	14	cc	_	_
26	it	_	PRP	PRP	_	30	nsubj	_	_
27	would	_	MD	MD	_	30	aux	_	_
28	be	_	VB	VB	_	30	cop	_	_
29	a	_	DT	DT	_	30	det	_	_
30	shame	_	NN	NN	_	14	conj	_	_
31	if	_	IN	IN	_	35	mark	_	_
32	those	_	DT	DT	_	33	det	_	_
33	archives	_	NNS	NNS	_	35	nsubjpass	_	_
34	were	_	VBD	VBD	_	35	auxpass	_	_
35	destroyed	_	VBN	VBN	_	30	advcl	_	_
36	for	_	IN	IN	_	35	prep	_	_
37	not	_	RB	RB	_	38	neg	_	_
38	paying	_	VBG	VBG	_	36	pcomp	_	_
39	the	_	DT	DT	_	41	det	_	_
40	electricity	_	NN	NN	_	41	nn	_	_
41	utility	_	NN	NN	_	38	dobj	_	_
42	.	_	.	.	_	4	punct	_	_

Oracle:
(a / archive-01, ARG1, p2 / pathogen)
(a / archive-01, location, w / world)
(a / archive-01, mod, i2 / importance)
(a2 / and, op, i / include-91)
(a2 / and, op, s2 / shame-01)
(c / cause-01, ARG0, p3 / pay-01)
(c / cause-01, ARG1, d2 / destroy-01)
(i / include-91, ARG1, r / research-institute)
(n / name, op, "Beatty")
(n / name, op, "Lee")
(n / name, op, "Randall")
(n2 / name, op, "Applied")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(p / person, name, n / name)
(p2 / pathogen, mod, d / danger)
(p3 / pay-01, ARG3, u / utility)
(r / research-institute, name, n2 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a2 / and)
(s2 / shame-01, ARG0, d2 / destroy-01)
(u / utility, mod, e / electricity)

Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),utility,utility,false), Span(39,40,List(1),electricity,electricity,false), Span(37,38,List(2),paying,pay-01,false), Span(34,35,List(3),destroyed,destroy-01,false), Span(16,17,List(4),important,important,false), Span(6,10,List(10, 9, 8, 7, 6, 5),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(0,3,List(15, 14, 13, 12, 11),Randall Lee Beatty,(person :name (name :op "Randall" :op "Lee" :op "Beatty")),false)),Map(2 -> pay-01, 5 -> organization, 12 -> name, 15 -> "Beatty", 8 -> "Scientific", 7 -> "State", 1 -> electricity, 4 -> important, 11 -> person, 14 -> "Lee", 6 -> name, 0 -> utility, 9 -> "Center", 3 -> destroy-01, 10 -> "of", 13 -> "Randall"),Map(n -> name, e -> electricity, p2 -> person, d -> destroy-01, p -> pay-01, i -> important, u -> utility, o -> organization, n2 -> name))),[Ljava.lang.String;@3403e2ac,Annotation([Ljava.lang.String;@65b104b9,[Ljava.lang.String;@6c4980d3,[Ljava.lang.String;@327bcebd),Annotation([Ljava.lang.String;@19c65cdc,[Ljava.lang.String;@74bf1791,[Ledu.cmu.lti.nlp.amr.Dependency;@54504ecd),Annotation([Ljava.lang.String;@38b27cdc,[Ljava.lang.String;@1339e7aa,[Ljava.lang.String;@1fb669c3),Annotation([Ljava.lang.String;@49c66ade,[Ljava.lang.String;@6239aba6,[Ledu.cmu.lti.nlp.amr.Entity;@3e6104fc))
AMR:
(d / destroy-01, ARG0, o / organization)
(i / important, op, p / pay-01)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Beatty")
(n2 / name, op, "Lee")
(n2 / name, op, "Randall")
(o / organization, name, n / name)
(p / pay-01, ARG0, d / destroy-01)
(p / pay-01, ARG1, u / utility)
(p2 / person, name, n2 / name)
(p2 / person, op, p / pay-01)
(u / utility, mod, e / electricity)

Decoded in 348,476 microseconds
Sentence: Approximately 3000 strains of bacteria are stored at the State Scientific Center of applied microbiology and many of the bacteria are stored in cryogenic casks cooled with liquid nitrogen and isolated from the environment by layered enclosures and oversize air-handling systems that all depend on electricity to function.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 1-2:  3000 => (date-entity :year 3000)
Span 44-45:  all => all
Span 25-26:  cooled => cool-01
Span 45-46:  depend => depend-01
Span 47-48:  electricity => electricity
Span 33-34:  environment => environment
Span 49-50:  function => function-01
Span 41-42:  handling => handle-01
Span 30-31:  isolated => isolate-01
Span 27-28:  liquid => liquid
Span 16-17:  many => many
Span 9-13:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 21-22:  stored => store-01
Span 6-7:  stored => store-01
Span 2-3:  strains => strain
Span 42-43:  systems => system

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 1-2:  3000 => 3000
Oracle Span 39-40:  air => air
Oracle Span 44-45:  all => all
Oracle Span 15-16:  and => and
Oracle Span 29-30:  and => and
Oracle Span 0-1:  Approximately => approximately
Oracle Span 4-5:  bacteria => bacterium
Oracle Span 19-20:  bacteria => bacterium
Oracle Span 24-25:  casks => cask
Oracle Span 25-26:  cooled => cool-01
Oracle Span 23-24:  cryogenic => cryogen
Oracle Span 45-46:  depend => depend-01
Oracle Span 47-48:  electricity => electricity
Oracle Span 36-37:  enclosures => enclosure
Oracle Span 33-34:  environment => environment
Oracle Span 49-50:  function => function-01
Oracle Span 41-42:  handling => handle-01
Oracle Span 30-31:  isolated => isolate-01
Oracle Span 35-36:  layered => layer-00
Oracle Span 27-28:  liquid => liquid
Oracle Span 16-17:  many => many
Oracle Span 28-29:  nitrogen => nitrogen
Oracle Span 3-4:  of => include-91
Oracle Span 38-39:  oversize => oversize
Oracle Span 9-15:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 6-7:  stored => store-01
Oracle Span 21-22:  stored => store-01
Oracle Span 2-3:  strains => strain
Oracle Span 42-43:  systems => system

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: 3000 => (date-entity :year 3000)
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: and => and
Missing span: casks => cask
Missing span: and => and
Missing span: oversize => oversize
Missing span: air => air
Missing span: enclosures => enclosure
Missing span: layered => layer-00
Missing span: nitrogen => nitrogen
Missing span: of => include-91
Missing span: Approximately => approximately
Missing span: 3000 => 3000
Missing span: cryogenic => cryogen
Missing span: bacteria => bacterium
Missing span: bacteria => bacterium
Dependencies:
1	Approximately	_	RB	RB	_	2	quantmod	_	_
2	3000	_	CD	CD	_	3	num	_	_
3	strains	_	NNS	NNS	_	7	nsubjpass	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	bacteria	_	NNS	NNS	_	4	pobj	_	_
6	are	_	VBP	VBP	_	7	auxpass	_	_
7	stored	_	VBN	VBN	_	0	root	_	_
8	at	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	12	det	_	_
10	State	_	NNP	NNP	_	12	nn	_	_
11	Scientific	_	NNP	NNP	_	12	nn	_	_
12	Center	_	NNP	NNP	_	8	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	applied	_	JJ	JJ	_	15	amod	_	_
15	microbiology	_	NN	NN	_	13	pobj	_	_
16	and	_	CC	CC	_	7	cc	_	_
17	many	_	JJ	JJ	_	22	nsubjpass	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	bacteria	_	NNS	NNS	_	18	pobj	_	_
21	are	_	VBP	VBP	_	22	auxpass	_	_
22	stored	_	VBN	VBN	_	7	conj	_	_
23	in	_	IN	IN	_	22	prep	_	_
24	cryogenic	_	JJ	JJ	_	25	amod	_	_
25	casks	_	NNS	NNS	_	23	pobj	_	_
26	cooled	_	VBN	VBN	_	25	dep	_	_
27	with	_	IN	IN	_	26	prep	_	_
28	liquid	_	JJ	JJ	_	29	amod	_	_
29	nitrogen	_	NN	NN	_	27	pobj	_	_
30	and	_	CC	CC	_	26	cc	_	_
31	isolated	_	VBN	VBN	_	26	conj	_	_
32	from	_	IN	IN	_	31	prep	_	_
33	the	_	DT	DT	_	34	det	_	_
34	environment	_	NN	NN	_	32	pobj	_	_
35	by	_	IN	IN	_	31	prep	_	_
36	layered	_	JJ	JJ	_	37	amod	_	_
37	enclosures	_	NNS	NNS	_	35	pobj	_	_
38	and	_	CC	CC	_	37	cc	_	_
39	oversize	_	JJ	JJ	_	41	amod	_	_
40	air-handling	_	JJ	JJ	_	41	amod	_	_
41	systems	_	NNS	NNS	_	37	conj	_	_
42	that	_	IN	IN	_	44	mark	_	_
43	all	_	DT	DT	_	44	nsubj	_	_
44	depend	_	VBP	VBP	_	31	ccomp	_	_
45	on	_	IN	IN	_	44	prep	_	_
46	electricity	_	NN	NN	_	45	pobj	_	_
47	to	_	TO	TO	_	44	prep	_	_
48	function	_	NN	NN	_	47	pobj	_	_
49	.	_	.	.	_	7	punct	_	_

Oracle:
(a / approximately, op, 3 / 3000)
(a2 / and, op, s / store-01)
(a2 / and, op, s3 / store-01)
(a3 / and, op, e4 / enclosure)
(a3 / and, op, s4 / system)
(a3 / and, quant, a5 / all)
(b2 / bacterium, quant, m / many)
(b3 / bacterium, mod, s2 / strain)
(c / cask, mod, c2 / cryogen)
(c3 / cool-01, ARG1, c / cask)
(c3 / cool-01, instrument, n2 / nitrogen)
(d / depend-01, ARG0, a3 / and)
(d / depend-01, ARG1, e3 / electricity)
(d / depend-01, purpose, f / function-01)
(h / handle-01, ARG0, s4 / system)
(h / handle-01, ARG1, a4 / air)
(i / isolate-01, ARG1, c / cask)
(i / isolate-01, ARG2, e / environment)
(i / isolate-01, instrument, a3 / and)
(i2 / include-91, ARG1, b2 / bacterium)
(i2 / include-91, ARG2, b3 / bacterium)
(l2 / layer-00, ARG1, e4 / enclosure)
(n / name, op, "Applied")
(n / name, op, "Center")
(n / name, op, "Microbiology")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / nitrogen, mod, l / liquid)
(r / research-institute, name, n / name)
(s / store-01, ARG1, b3 / bacterium)
(s / store-01, location, r / research-institute)
(s2 / strain, quant, a / approximately)
(s3 / store-01, ARG1, b2 / bacterium)
(s3 / store-01, location, c / cask)
(s4 / system, mod, o2 / oversize)

Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),function,function-01,false), Span(47,48,List(1),electricity,electricity,false), Span(45,46,List(2),depend,depend-01,false), Span(44,45,List(3),all,all,false), Span(42,43,List(4),systems,system,false), Span(41,42,List(5),handling,handle-01,false), Span(33,34,List(6),environment,environment,false), Span(30,31,List(7),isolated,isolate-01,false), Span(27,28,List(8),liquid,liquid,false), Span(25,26,List(9),cooled,cool-01,false), Span(21,22,List(10),stored,store-01,false), Span(16,17,List(11),many,many,false), Span(9,13,List(17, 16, 15, 14, 13, 12),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(6,7,List(18),stored,store-01,false), Span(2,3,List(19),strains,strain,false), Span(1,2,List(21, 20),3000,(date-entity :year 3000),false)),Map(2 -> depend-01, 5 -> handle-01, 12 -> organization, 15 -> "Scientific", 8 -> liquid, 21 -> 3000, 18 -> store-01, 7 -> isolate-01, 17 -> "of", 1 -> electricity, 4 -> system, 11 -> many, 14 -> "State", 20 -> date-entity, 6 -> environment, 0 -> function-01, 9 -> cool-01, 16 -> "Center", 19 -> strain, 3 -> all, 10 -> store-01, 13 -> name),Map(e -> electricity, n -> name, h -> handle-01, s2 -> store-01, e2 -> environment, s -> system, s4 -> strain, d -> depend-01, m -> many, a -> all, d2 -> date-entity, i -> isolate-01, s3 -> store-01, c -> cool-01, l -> liquid, f -> function-01, o -> organization, 3 -> 3000))),[Ljava.lang.String;@12359a82,Annotation([Ljava.lang.String;@68df9280,[Ljava.lang.String;@479460a6,[Ljava.lang.String;@7164ca4c),Annotation([Ljava.lang.String;@4f3bbf68,[Ljava.lang.String;@5be46f9d,[Ledu.cmu.lti.nlp.amr.Dependency;@3f91b517),Annotation([Ljava.lang.String;@68702e03,[Ljava.lang.String;@7a220c9a,[Ljava.lang.String;@2421cc4),Annotation([Ljava.lang.String;@30c93896,[Ljava.lang.String;@59a008ba,[Ledu.cmu.lti.nlp.amr.Entity;@338c99c8))
AMR:
(c / cool-01, ARG0, m / many)
(d / depend-01, ARG0, e2 / environment)
(d / depend-01, ARG1, e / electricity)
(d / depend-01, ARG4, f / function-01)
(d / depend-01, mod, a / all)
(d2 / date-entity, year, 3 / 3000)
(f / function-01, ARG1, l / liquid)
(h / handle-01, ARG1, s / system)
(i / isolate-01, ARG0, e2 / environment)
(i / isolate-01, ARG1, c / cool-01)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(o / organization, name, n / name)
(s / system, prep-against, d / depend-01)
(s2 / store-01, ARG1, s4 / strain)
(s2 / store-01, ARG2, c / cool-01)
(s3 / store-01, ARG1, s4 / strain)
(s3 / store-01, location, o / organization)
(s4 / strain, time, d2 / date-entity)

Decoded in 754,308 microseconds
Sentence: The greatest danger from a shutdown of electric power at the State Scientific Center of applied microbiology would be the defrosting of live germs that are currently preserved in a frozen state.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 26-27:  currently => current
Span 2-3:  danger => danger
Span 7-8:  electric => electric
Span 30-31:  frozen => freeze-02
Span 1-2:  greatest => (great :degree most)
Span 22-23:  live => live-01
Span 8-9:  power => power
Span 5-6:  shutdown => shutdown
Span 11-15:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 26-27:  currently => current
Oracle Span 2-3:  danger => danger
Oracle Span 20-21:  defrosting => defrost-01
Oracle Span 7-8:  electric => electric
Oracle Span 30-31:  frozen => freeze-01
Oracle Span 23-24:  germs => germ
Oracle Span 1-2:  greatest => (great :degree most)
Oracle Span 22-23:  live => live-01
Oracle Span 8-9:  power => power
Oracle Span 27-28:  preserved => preserve-01
Oracle Span 5-6:  shutdown => shut-05
Oracle Span 31-32:  state => state
Oracle Span 11-17:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))

Incorrect span: frozen => freeze-02
Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: shutdown => shutdown
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: defrosting => defrost-01
Missing span: germs => germ
Missing span: preserved => preserve-01
Missing span: state => state
Missing span: frozen => freeze-01
Missing span: shutdown => shut-05
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	greatest	_	JJS	JJS	_	3	amod	_	_
3	danger	_	NN	NN	_	21	nsubj	_	_
4	from	_	IN	IN	_	3	prep	_	_
5	a	_	DT	DT	_	6	det	_	_
6	shutdown	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	electric	_	JJ	JJ	_	9	amod	_	_
9	power	_	NN	NN	_	7	pobj	_	_
10	at	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	14	det	_	_
12	State	_	NNP	NNP	_	14	nn	_	_
13	Scientific	_	NNP	NNP	_	14	nn	_	_
14	Center	_	NNP	NNP	_	10	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	applied	_	JJ	JJ	_	17	amod	_	_
17	microbiology	_	NN	NN	_	15	pobj	_	_
18	would	_	MD	MD	_	21	aux	_	_
19	be	_	VB	VB	_	21	cop	_	_
20	the	_	DT	DT	_	21	det	_	_
21	defrosting	_	NN	NN	_	0	root	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	live	_	JJ	JJ	_	24	amod	_	_
24	germs	_	NNS	NNS	_	22	pobj	_	_
25	that	_	WDT	WDT	_	28	nsubjpass	_	_
26	are	_	VBP	VBP	_	28	auxpass	_	_
27	currently	_	RB	RB	_	28	advmod	_	_
28	preserved	_	VBN	VBN	_	21	rcmod	_	_
29	in	_	IN	IN	_	28	prep	_	_
30	a	_	DT	DT	_	32	det	_	_
31	frozen	_	JJ	JJ	_	32	amod	_	_
32	state	_	NN	NN	_	29	pobj	_	_
33	.	_	.	.	_	21	punct	_	_

Oracle:
(d / danger, domain, d2 / defrost-01)
(d / danger, mod, g / great)
(d / danger, source, s / shut-05)
(d2 / defrost-01, ARG1, g2 / germ)
(g / great, degree, m / most)
(l / live-01, ARG0, g2 / germ)
(n / name, op, "Applied")
(n / name, op, "Center")
(n / name, op, "Microbiology")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(p / power, mod, e / electric)
(p2 / preserve-01, ARG1, g2 / germ)
(p2 / preserve-01, mod, s2 / state)
(p2 / preserve-01, time, c / current)
(r / research-institute, name, n / name)
(s / shut-05, ARG1, p / power)
(s / shut-05, location, r / research-institute)
(s2 / state, mod, f / freeze-01)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),frozen,freeze-02,false), Span(26,27,List(1),currently,current,false), Span(22,23,List(2),live,live-01,false), Span(11,15,List(8, 7, 6, 5, 4, 3),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(8,9,List(9),power,power,false), Span(7,8,List(10),electric,electric,false), Span(5,6,List(11),shutdown,shutdown,false), Span(2,3,List(12),danger,danger,false), Span(1,2,List(14, 13),greatest,(great :degree most),false)),Map(2 -> live-01, 5 -> "State", 12 -> danger, 8 -> "of", 7 -> "Center", 1 -> current, 4 -> name, 11 -> shutdown, 14 -> most, 6 -> "Scientific", 0 -> freeze-02, 9 -> power, 3 -> organization, 10 -> electric, 13 -> great),Map(e -> electric, n -> name, s -> shutdown, m -> most, d -> danger, g -> great, p -> power, l -> live-01, c -> current, o -> organization, f -> freeze-02))),[Ljava.lang.String;@21ba0741,Annotation([Ljava.lang.String;@58ce9668,[Ljava.lang.String;@172b013,[Ljava.lang.String;@56673b2c),Annotation([Ljava.lang.String;@2796aeae,[Ljava.lang.String;@b4711e2,[Ledu.cmu.lti.nlp.amr.Dependency;@1fa1cab1),Annotation([Ljava.lang.String;@70f02c32,[Ljava.lang.String;@62010f5c,[Ljava.lang.String;@51fadaff),Annotation([Ljava.lang.String;@401f7633,[Ljava.lang.String;@31ff43be,[Ledu.cmu.lti.nlp.amr.Entity;@5b6ec132))
AMR:
(d / danger, mod, g / great)
(d / danger, poss, s / shutdown)
(f / freeze-02, ARG1, l / live-01)
(g / great, degree, m / most)
(l / live-01, ARG1, d / danger)
(l / live-01, ARG2, c / current)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(o / organization, name, n / name)
(p / power, mod, e / electric)
(p / power, poss, o / organization)
(s / shutdown, mod, p / power)

Decoded in 281,223 microseconds
Sentence: A biological warfare expert at the Monterey Institute of International Studies named Raymond zilinskas stated that the main threat from cutting power to the State Scientific Center of applied microbiology would be to the organisms themselves rather than that they might escape.

NER Entity: (organization :name (name :op "Monterey" :op "Institute" :op "of" :op "International" :op "Studies"))
NER Entity: (person :name (name :op "Raymond" :op "zilinskas"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 1-2:  biological => biology
Span 41-42:  escape => escape-01
Span 17-18:  main => main
Span 6-11:  Monterey Institute of International Studies => (organization :name (name :op "Monterey" :op "Institute" :op "of" :op "International" :op "Studies"))
Span 21-22:  power => power
Span 12-14:  Raymond zilinskas => (person :name (name :op "Raymond" :op "zilinskas"))
Span 24-28:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 2-3:  warfare => warfare

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 1-2:  biological => biology
Oracle Span 20-21:  cutting => cut-02
Oracle Span 41-42:  escape => escape-01
Oracle Span 3-4:  expert => expert-41
Oracle Span 17-18:  main => main
Oracle Span 6-11:  Monterey Institute of International Studies => (have-org-role-91 :ARG1 (research-institute :name (name :op "Studies" :op "International" :op "of" :op "Institute" :op "Monterey")))
Oracle Span 34-35:  organisms => organism
Oracle Span 21-22:  power => power
Oracle Span 12-14:  Raymond zilinskas => (person :name (name :op "Zilinskas" :op "Raymond"))
Oracle Span 24-30:  State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 14-15:  stated => state-01
Oracle Span 18-19:  threat => threaten-01
Oracle Span 2-3:  warfare => warfare

Extra span: State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Incorrect span: Raymond zilinskas => (person :name (name :op "Raymond" :op "zilinskas"))
Incorrect span: Monterey Institute of International Studies => (organization :name (name :op "Monterey" :op "Institute" :op "of" :op "International" :op "Studies"))
Missing span: Raymond zilinskas => (person :name (name :op "Zilinskas" :op "Raymond"))
Missing span: Monterey Institute of International Studies => (have-org-role-91 :ARG1 (research-institute :name (name :op "Studies" :op "International" :op "of" :op "Institute" :op "Monterey")))
Missing span: State Scientific Center of applied microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: stated => state-01
Missing span: organisms => organism
Missing span: cutting => cut-02
Missing span: expert => expert-41
Missing span: threat => threaten-01
Dependencies:
1	A	_	DT	DT	_	4	det	_	_
2	biological	_	JJ	JJ	_	4	amod	_	_
3	warfare	_	NN	NN	_	4	nn	_	_
4	expert	_	NN	NN	_	12	nsubj	_	_
5	at	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Monterey	_	NNP	NNP	_	8	nn	_	_
8	Institute	_	NNP	NNP	_	5	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	International	_	NNP	NNP	_	11	nn	_	_
11	Studies	_	NNPS	NNPS	_	9	pobj	_	_
12	named	_	VBD	VBD	_	0	root	_	_
13	Raymond	_	NNP	NNP	_	14	nn	_	_
14	zilinskas	_	NNS	NNS	_	15	nsubj	_	_
15	stated	_	VBD	VBD	_	12	ccomp	_	_
16	that	_	IN	IN	_	32	mark	_	_
17	the	_	DT	DT	_	19	det	_	_
18	main	_	JJ	JJ	_	19	amod	_	_
19	threat	_	NN	NN	_	32	nsubj	_	_
20	from	_	IN	IN	_	19	prep	_	_
21	cutting	_	VBG	VBG	_	20	pcomp	_	_
22	power	_	NN	NN	_	21	dobj	_	_
23	to	_	TO	TO	_	21	prep	_	_
24	the	_	DT	DT	_	27	det	_	_
25	State	_	NNP	NNP	_	27	nn	_	_
26	Scientific	_	NNP	NNP	_	27	nn	_	_
27	Center	_	NNP	NNP	_	23	pobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	applied	_	JJ	JJ	_	30	amod	_	_
30	microbiology	_	NN	NN	_	28	pobj	_	_
31	would	_	MD	MD	_	32	aux	_	_
32	be	_	VB	VB	_	15	dobj	_	_
33	to	_	TO	TO	_	32	prep	_	_
34	the	_	DT	DT	_	35	det	_	_
35	organisms	_	NNS	NNS	_	33	pobj	_	_
36	themselves	_	PRP	PRP	_	35	advmod	_	_
37	rather	_	RB	RB	_	32	cc	_	_
38	than	_	IN	IN	_	37	mwe	_	_
39	that	_	IN	IN	_	42	mark	_	_
40	they	_	PRP	PRP	_	42	nsubj	_	_
41	might	_	MD	MD	_	42	aux	_	_
42	escape	_	VB	VB	_	32	conj	_	_
43	.	_	.	.	_	12	punct	_	_

Oracle:
(c / cut-02, ARG1, p2 / power)
(e / expert-41, ARG1, p4 / person)
(e / expert-41, ARG2, w / warfare)
(e2 / escape-01, ARG0, o2 / organism)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, r / research-institute)
(h / have-org-role-91, ARG3, e / expert-41)
(n / name, op, "Institute")
(n / name, op, "International")
(n / name, op, "Monterey")
(n / name, op, "Studies")
(n / name, op, "of")
(n3 / name, op, "Raymond")
(n3 / name, op, "Zilinskas")
(n4 / name, op, "Applied")
(n4 / name, op, "Center")
(n4 / name, op, "Microbiology")
(n4 / name, op, "Scientific")
(n4 / name, op, "State")
(n4 / name, op, "of")
(p2 / power, beneficiary, r2 / research-institute)
(p4 / person, name, n3 / name)
(r / research-institute, name, n / name)
(r2 / research-institute, name, n4 / name)
(s / state-01, ARG0, p4 / person)
(t / threaten-01, ARG2, o2 / organism)
(t / threaten-01, mod, m / main)
(w / warfare, mod, b / biology)

Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),escape,escape-01,false), Span(24,28,List(6, 5, 4, 3, 2, 1),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(21,22,List(7),power,power,false), Span(17,18,List(8),main,main,false), Span(12,14,List(12, 11, 10, 9),Raymond zilinskas,(person :name (name :op "Raymond" :op "zilinskas")),false), Span(6,11,List(19, 18, 17, 16, 15, 14, 13),Monterey Institute of International Studies,(organization :name (name :op "Monterey" :op "Institute" :op "of" :op "International" :op "Studies")),false), Span(2,3,List(20),warfare,warfare,false), Span(1,2,List(21),biological,biology,false)),Map(2 -> name, 5 -> "Center", 12 -> "zilinskas", 15 -> "Monterey", 8 -> main, 21 -> biology, 18 -> "International", 7 -> power, 17 -> "of", 1 -> organization, 4 -> "Scientific", 11 -> "Raymond", 14 -> name, 20 -> warfare, 6 -> "of", 0 -> escape-01, 9 -> person, 16 -> "Institute", 19 -> "Studies", 3 -> "State", 10 -> name, 13 -> organization),Map(w -> warfare, n -> name, e -> escape-01, b -> biology, p2 -> person, m -> main, p -> power, n3 -> name, o2 -> organization, o -> organization, n2 -> name))),[Ljava.lang.String;@5c44c582,Annotation([Ljava.lang.String;@67d18ed7,[Ljava.lang.String;@2c78d320,[Ljava.lang.String;@132e0cc),Annotation([Ljava.lang.String;@7b205dbd,[Ljava.lang.String;@106cc338,[Ledu.cmu.lti.nlp.amr.Dependency;@7a67e3c6),Annotation([Ljava.lang.String;@6cc558c6,[Ljava.lang.String;@15713d56,[Ljava.lang.String;@63f259c3),Annotation([Ljava.lang.String;@26ceffa8,[Ljava.lang.String;@600b90df,[Ledu.cmu.lti.nlp.amr.Entity;@7c8c9a05))
AMR:
(b / biology, poss, p2 / person)
(e / escape-01, ARG0, p2 / person)
(e / escape-01, ARG1, o / organization)
(m / main, poss, w / warfare)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Raymond")
(n2 / name, op, "zilinskas")
(n3 / name, op, "Institute")
(n3 / name, op, "International")
(n3 / name, op, "Monterey")
(n3 / name, op, "Studies")
(n3 / name, op, "of")
(o / organization, name, n / name)
(o2 / organization, name, n3 / name)
(o2 / organization, op, e / escape-01)
(p / power, op, e / escape-01)
(p2 / person, name, n2 / name)
(w / warfare, mod, b / biology)

Decoded in 319,757 microseconds
Sentence: Raymond zilinskas stated that in the worst case the bacteria would be defrosted from minus 70 degrees and it would be a real mess to clean up afterward because it would not be known for certain whether all the bacteria was dead.

NER Entity: (person :name (name :op "Raymond" :op "zilinskas"))
Spans:
Span 15-16:  70 => 70
Span 27-28:  afterward => afterward
Span 37-38:  all => all
Span 28-29:  because => cause-01
Span 7-8:  case => case
Span 35-36:  certain => certain
Span 33-34:  known => know-01
Span 0-2:  Raymond zilinskas => (person :name (name :op "Raymond" :op "zilinskas"))
Span 6-7:  worst => bad

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 27-28:  afterward => afterward
Oracle Span 37-38:  all => all
Oracle Span 17-18:  and => and
Oracle Span 9-10:  bacteria => bacterium
Oracle Span 39-40:  bacteria => bacterium
Oracle Span 28-29:  because => cause-01
Oracle Span 7-8:  case => case
Oracle Span 35-36:  certain => certain
Oracle Span 25-26:  clean => clean-02
Oracle Span 12-13:  defrosted => defrost-01
Oracle Span 33-34:  known => know-01
Oracle Span 23-24:  mess => mess
Oracle Span 0-2:  Raymond zilinskas => (person :name (name :op "Zilinskas" :op "Raymond"))
Oracle Span 22-23:  real => real
Oracle Span 2-3:  stated => state-01
Oracle Span 6-7:  worst => bad

Extra span: 70 => 70
Incorrect span: Raymond zilinskas => (person :name (name :op "Raymond" :op "zilinskas"))
Missing span: Raymond zilinskas => (person :name (name :op "Zilinskas" :op "Raymond"))
Missing span: stated => state-01
Missing span: and => and
Missing span: mess => mess
Missing span: clean => clean-02
Missing span: real => real
Missing span: defrosted => defrost-01
Missing span: bacteria => bacterium
Missing span: bacteria => bacterium
Dependencies:
1	Raymond	_	NNP	NNP	_	2	nn	_	_
2	zilinskas	_	NNS	NNS	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	13	mark	_	_
5	in	_	IN	IN	_	13	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	worst	_	JJS	JJS	_	8	amod	_	_
8	case	_	NN	NN	_	5	pobj	_	_
9	the	_	DT	DT	_	10	det	_	_
10	bacteria	_	NNS	NNS	_	13	nsubjpass	_	_
11	would	_	MD	MD	_	13	aux	_	_
12	be	_	VB	VB	_	13	auxpass	_	_
13	defrosted	_	VBN	VBN	_	3	ccomp	_	_
14	from	_	IN	IN	_	13	prep	_	_
15	minus	_	CC	CC	_	16	cc	_	_
16	70	_	CD	CD	_	17	num	_	_
17	degrees	_	NNS	NNS	_	14	pobj	_	_
18	and	_	CC	CC	_	13	cc	_	_
19	it	_	PRP	PRP	_	24	nsubj	_	_
20	would	_	MD	MD	_	24	aux	_	_
21	be	_	VB	VB	_	24	cop	_	_
22	a	_	DT	DT	_	24	det	_	_
23	real	_	JJ	JJ	_	24	amod	_	_
24	mess	_	NN	NN	_	13	conj	_	_
25	to	_	TO	TO	_	26	aux	_	_
26	clean	_	VB	VB	_	24	vmod	_	_
27	up	_	RB	RB	_	28	advmod	_	_
28	afterward	_	RB	RB	_	26	advmod	_	_
29	because	_	IN	IN	_	34	mark	_	_
30	it	_	PRP	PRP	_	34	nsubjpass	_	_
31	would	_	MD	MD	_	34	aux	_	_
32	not	_	RB	RB	_	34	neg	_	_
33	be	_	VB	VB	_	34	auxpass	_	_
34	known	_	VBN	VBN	_	28	advcl	_	_
35	for	_	IN	IN	_	34	prep	_	_
36	certain	_	JJ	JJ	_	35	pobj	_	_
37	whether	_	IN	IN	_	42	mark	_	_
38	all	_	PDT	PDT	_	40	predet	_	_
39	the	_	DT	DT	_	40	det	_	_
40	bacteria	_	NNS	NNS	_	42	nsubj	_	_
41	was	_	VBD	VBD	_	42	cop	_	_
42	dead	_	JJ	JJ	_	24	ccomp	_	_
43	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, d4 / defrost-01)
(a / and, op, m2 / mess)
(b3 / bacterium, mod, a3 / all)
(c / case, mod, b / bad)
(c2 / clean-02, time, a2 / afterward)
(c3 / cause-01, ARG0, k / know-01)
(c3 / cause-01, ARG1, m2 / mess)
(d4 / defrost-01, ARG1, b2 / bacterium)
(d4 / defrost-01, condition, c / case)
(k / know-01, mod, c4 / certain)
(m2 / mess, domain, c2 / clean-02)
(m2 / mess, mod, r / real)
(n / name, op, "Raymond")
(n / name, op, "Zilinskas")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),all,all,false), Span(35,36,List(1),certain,certain,false), Span(33,34,List(2),known,know-01,false), Span(28,29,List(3),because,cause-01,false), Span(27,28,List(4),afterward,afterward,false), Span(15,16,List(5),70,70,false), Span(7,8,List(6),case,case,false), Span(6,7,List(7),worst,bad,false), Span(0,2,List(11, 10, 9, 8),Raymond zilinskas,(person :name (name :op "Raymond" :op "zilinskas")),false)),Map(2 -> know-01, 5 -> 70, 8 -> person, 7 -> bad, 1 -> certain, 11 -> "zilinskas", 4 -> afterward, 6 -> case, 9 -> name, 0 -> all, 10 -> "Raymond", 3 -> cause-01),Map(n -> name, b -> bad, k -> know-01, 7 -> 70, p -> person, c3 -> case, a -> all, a2 -> afterward, c -> certain, c2 -> cause-01))),[Ljava.lang.String;@d41f816,Annotation([Ljava.lang.String;@5c2375a9,[Ljava.lang.String;@60129b9a,[Ljava.lang.String;@78d6692f),Annotation([Ljava.lang.String;@7a55af6b,[Ljava.lang.String;@3d9c13b5,[Ledu.cmu.lti.nlp.amr.Dependency;@492691d7),Annotation([Ljava.lang.String;@27216cd,[Ljava.lang.String;@558bdf1f,[Ljava.lang.String;@8576fa0),Annotation([Ljava.lang.String;@7582ff54,[Ljava.lang.String;@67545b57,[Ledu.cmu.lti.nlp.amr.Entity;@6c2c1385))
AMR:
(a2 / afterward, op, c2 / cause-01)
(c2 / cause-01, ARG0, k / know-01)
(c2 / cause-01, ARG1, 7 / 70)
(c3 / case, mod, b / bad)
(c3 / case, op, c2 / cause-01)
(k / know-01, ARG0, p / person)
(k / know-01, ARG1, c / certain)
(k / know-01, ARG2, a / all)
(n / name, op, "Raymond")
(n / name, op, "zilinskas")
(p / person, name, n / name)

Decoded in 269,248 microseconds
Sentence: The confrontation between the mosenergo electric utility and the State Scientific Center of applied Microbiology in obolensk is another example of how the basic capitalist imperative for enterprises to be self-sustaining can clash in a dangerous way with the old remnants of Soviet weapons science.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
NER Entity: (thing :name (name :op "Soviet"))
Spans:
Span 18-19:  another => another
Span 23-24:  basic => basic
Span 33-34:  can => possible
Span 1-2:  confrontation => confront-01
Span 5-6:  electric => electric
Span 27-28:  enterprises => enterprise
Span 19-20:  example => example
Span 25-26:  imperative => imperative
Span 46-47:  science => science
Span 30-31:  self => self
Span 9-15:  State Scientific Center of applied Microbiology => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Span 6-7:  utility => utility
Span 38-39:  way => way

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 18-19:  another => another
Oracle Span 23-24:  basic => basic
Oracle Span 33-34:  can => possible
Oracle Span 24-25:  capitalist => capitalism
Oracle Span 34-35:  clash => clash-01
Oracle Span 1-2:  confrontation => confront-01
Oracle Span 37-38:  dangerous => dangerous
Oracle Span 5-6:  electric => electricity
Oracle Span 27-28:  enterprises => enterprise
Oracle Span 25-26:  imperative => imperative
Oracle Span 4-5:  mosenergo => (name :op "Mosenergo")
Oracle Span 16-17:  obolensk => (city :name (name :op "Obolensk"))
Oracle Span 41-42:  old => old
Oracle Span 46-47:  science => science
Oracle Span 44-45:  Soviet => "Soviet"
Oracle Span 9-15:  State Scientific Center of applied Microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Oracle Span 32-33:  sustaining => sustain-01
Oracle Span 6-7:  utility => utility
Oracle Span 45-46:  weapons => weapon

Extra span: way => way
Extra span: self => self
Extra span: example => example
Incorrect span: State Scientific Center of applied Microbiology => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Incorrect span: electric => electric
Missing span: mosenergo => (name :op "Mosenergo")
Missing span: State Scientific Center of applied Microbiology => (research-institute :name (name :op "Microbiology" :op "Applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Missing span: obolensk => (city :name (name :op "Obolensk"))
Missing span: clash => clash-01
Missing span: dangerous => dangerous
Missing span: old => old
Missing span: weapons => weapon
Missing span: Soviet => "Soviet"
Missing span: sustaining => sustain-01
Missing span: electric => electricity
Missing span: capitalist => capitalism
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	confrontation	_	NN	NN	_	20	nsubj	_	_
3	between	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	7	det	_	_
5	mosenergo	_	JJ	JJ	_	7	amod	_	_
6	electric	_	JJ	JJ	_	7	amod	_	_
7	utility	_	NN	NN	_	3	pobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	the	_	DT	DT	_	12	det	_	_
10	State	_	NNP	NNP	_	12	nn	_	_
11	Scientific	_	NNP	NNP	_	12	nn	_	_
12	Center	_	NNP	NNP	_	7	conj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	applied	_	NNP	NNP	_	15	nn	_	_
15	Microbiology	_	NNP	NNP	_	13	pobj	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	obolensk	_	NN	NN	_	16	pobj	_	_
18	is	_	VBZ	VBZ	_	20	cop	_	_
19	another	_	DT	DT	_	20	det	_	_
20	example	_	NN	NN	_	0	root	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	how	_	WRB	WRB	_	33	advmod	_	_
23	the	_	DT	DT	_	26	det	_	_
24	basic	_	JJ	JJ	_	26	amod	_	_
25	capitalist	_	JJ	JJ	_	26	amod	_	_
26	imperative	_	NN	NN	_	33	nsubj	_	_
27	for	_	IN	IN	_	26	prep	_	_
28	enterprises	_	NNS	NNS	_	27	pobj	_	_
29	to	_	TO	TO	_	31	aux	_	_
30	be	_	VB	VB	_	31	cop	_	_
31	self-sustaining	_	JJ	JJ	_	28	vmod	_	_
32	can	_	MD	MD	_	33	aux	_	_
33	clash	_	VB	VB	_	21	pcomp	_	_
34	in	_	IN	IN	_	33	prep	_	_
35	a	_	DT	DT	_	37	det	_	_
36	dangerous	_	JJ	JJ	_	37	amod	_	_
37	way	_	NN	NN	_	34	pobj	_	_
38	with	_	IN	IN	_	33	prep	_	_
39	the	_	DT	DT	_	41	det	_	_
40	old	_	JJ	JJ	_	41	amod	_	_
41	remnants	_	NNS	NNS	_	38	pobj	_	_
42	of	_	IN	IN	_	41	prep	_	_
43	Soviet	_	JJ	JJ	_	45	amod	_	_
44	weapons	_	NNS	NNS	_	45	nn	_	_
45	science	_	NN	NN	_	42	pobj	_	_
46	.	_	.	.	_	20	punct	_	_

Oracle:
(c / confront-01, ARG0, u2 / utility)
(c / confront-01, ARG1, r2 / research-institute)
(c3 / city, name, n3 / name)
(c4 / clash-01, ARG0, i / imperative)
(c4 / clash-01, manner, d / dangerous)
(i / imperative, mod, b / basic)
(i / imperative, mod, c2 / capitalism)
(i / imperative, topic, s3 / sustain-01)
(n2 / name, op, "Applied")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(n3 / name, op, "Obolensk")
(n5 / name, op, "Mosenergo")
(p / possible, domain, c4 / clash-01)
(r2 / research-institute, location, c3 / city)
(r2 / research-institute, name, n2 / name)
(s2 / science, mod, w2 / weapon)
(s3 / sustain-01, ARG0, e3 / enterprise)
(s3 / sustain-01, ARG1, e3 / enterprise)
(u2 / utility, mod, e2 / electricity)
(u2 / utility, name, n5 / name)

Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),science,science,false), Span(38,39,List(1),way,way,false), Span(33,34,List(2),can,possible,false), Span(30,31,List(3),self,self,false), Span(27,28,List(4),enterprises,enterprise,false), Span(25,26,List(5),imperative,imperative,false), Span(23,24,List(6),basic,basic,false), Span(19,20,List(7),example,example,false), Span(18,19,List(8),another,another,false), Span(9,15,List(16, 15, 14, 13, 12, 11, 10, 9),State Scientific Center of applied Microbiology,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology")),false), Span(6,7,List(17),utility,utility,false), Span(5,6,List(18),electric,electric,false), Span(1,2,List(19),confrontation,confront-01,false)),Map(2 -> possible, 5 -> imperative, 12 -> "Scientific", 15 -> "applied", 8 -> another, 18 -> electric, 7 -> example, 17 -> utility, 1 -> way, 4 -> enterprise, 11 -> "State", 14 -> "of", 6 -> basic, 0 -> science, 9 -> organization, 16 -> "Microbiology", 19 -> confront-01, 3 -> self, 10 -> name, 13 -> "Center"),Map(e -> enterprise, w -> way, n -> name, s2 -> self, b -> basic, e2 -> example, s -> science, p -> possible, a -> another, i -> imperative, c -> confront-01, u -> utility, o -> organization, e3 -> electric))),[Ljava.lang.String;@5f354bcf,Annotation([Ljava.lang.String;@3daf7722,[Ljava.lang.String;@78641d23,[Ljava.lang.String;@74589991),Annotation([Ljava.lang.String;@146dfe6,[Ljava.lang.String;@4716be8b,[Ledu.cmu.lti.nlp.amr.Dependency;@1fc32e4f),Annotation([Ljava.lang.String;@2f67b837,[Ljava.lang.String;@1869fbd2,[Ljava.lang.String;@6af9fcb2),Annotation([Ljava.lang.String;@6cce16f4,[Ljava.lang.String;@7efaad5a,[Ledu.cmu.lti.nlp.amr.Entity;@291a7e3c))
AMR:
(c / confront-01, ARG0, i / imperative)
(c / confront-01, ARG1, o / organization)
(c / confront-01, location, u / utility)
(e / enterprise, mod, s2 / self)
(e2 / example, domain, c / confront-01)
(e2 / example, mod, a / another)
(i / imperative, mod, b / basic)
(i / imperative, mod, e / enterprise)
(n / name, op, "Center")
(n / name, op, "Microbiology")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "applied")
(n / name, op, "of")
(o / organization, name, n / name)
(p / possible, mod, s2 / self)
(s / science, location, w / way)
(u / utility, mod, e3 / electric)
(w / way, poss, i / imperative)

Decoded in 519,480 microseconds
Sentence: Due to an overdue power bill in 000000 the Russian National Power Company cut off electricity to a strategic base where nuclear missiles stood on high alert.

mkDayMonthYear(000000,00,00,00)
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (organization :name (name :op "National"))
NER Entity: (organization :name (name :op "Power" :op "Company"))
mkDayMonthYear(000000,00,00,00)
Spans:
Span 7-8:  000000 => (date-entity :year 2000)
Span 26-27:  alert => alert-01
Span 5-6:  bill => bill
Span 15-16:  electricity => electricity
Span 22-23:  missiles => missile
Span 21-22:  nuclear => nucleus
Span 4-5:  power => power
Span 11-13:  Power Company => (organization :name (name :op "Power" :op "Company"))
Span 23-24:  stood => stand-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 7-8:  000000 => (date-entity :year 2000)
Oracle Span 26-27:  alert => alert-01
Oracle Span 19-20:  base => base
Oracle Span 5-6:  bill => bill
Oracle Span 13-14:  cut => cut-04
Oracle Span 15-16:  electricity => electricity
Oracle Span 25-26:  high => high
Oracle Span 22-23:  missiles => missile
Oracle Span 10-13:  National Power Company => (company :name (name :op "Company" :op "Power" :op "National"))
Oracle Span 21-22:  nuclear => nucleus
Oracle Span 3-4:  overdue => overdue
Oracle Span 4-5:  power => power
Oracle Span 9-10:  Russian => (country :name (name :op "Russia"))
Oracle Span 23-24:  stood => stand-02
Oracle Span 18-19:  strategic => strategy

Incorrect span: stood => stand-01
Extra span: Power Company => (organization :name (name :op "Power" :op "Company"))
Missing span: National Power Company => (company :name (name :op "Company" :op "Power" :op "National"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: overdue => overdue
Missing span: cut => cut-04
Missing span: base => base
Missing span: stood => stand-02
Missing span: high => high
Missing span: strategic => strategy
Dependencies:
1	Due	_	JJ	JJ	_	2	mwe	_	_
2	to	_	TO	TO	_	14	prep	_	_
3	an	_	DT	DT	_	6	det	_	_
4	overdue	_	JJ	JJ	_	6	amod	_	_
5	power	_	NN	NN	_	6	nn	_	_
6	bill	_	NN	NN	_	2	pobj	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	000000	_	CD	CD	_	7	pobj	_	_
9	the	_	DT	DT	_	13	det	_	_
10	Russian	_	NNP	NNP	_	13	nn	_	_
11	National	_	NNP	NNP	_	13	nn	_	_
12	Power	_	NNP	NNP	_	13	nn	_	_
13	Company	_	NNP	NNP	_	14	nsubj	_	_
14	cut	_	VBD	VBD	_	0	root	_	_
15	off	_	RP	RP	_	14	prt	_	_
16	electricity	_	NN	NN	_	14	dobj	_	_
17	to	_	TO	TO	_	14	prep	_	_
18	a	_	DT	DT	_	20	det	_	_
19	strategic	_	JJ	JJ	_	20	amod	_	_
20	base	_	NN	NN	_	17	pobj	_	_
21	where	_	WRB	WRB	_	24	advmod	_	_
22	nuclear	_	JJ	JJ	_	23	amod	_	_
23	missiles	_	NNS	NNS	_	24	nsubj	_	_
24	stood	_	VBD	VBD	_	20	rcmod	_	_
25	on	_	IN	IN	_	24	prep	_	_
26	high	_	JJ	JJ	_	27	amod	_	_
27	alert	_	NN	NN	_	25	pobj	_	_
28	.	_	.	.	_	14	punct	_	_

Oracle:
(a / alert-01, mod, h / high)
(b / base, mod, s / strategy)
(b2 / bill, mod, o / overdue)
(b2 / bill, mod, p / power)
(b2 / bill, time, d / date-entity)
(c / cut-04, ARG0, c2 / company)
(c / cut-04, ARG1, e / electricity)
(c / cut-04, location, b / base)
(c2 / company, mod, c3 / country)
(c2 / company, name, n / name)
(c3 / country, name, n2 / name)
(d / date-entity, year, 2000)
(m / missile, mod, n3 / nucleus)
(n / name, op, "Company")
(n / name, op, "National")
(n / name, op, "Power")
(n2 / name, op, "Russia")
(s2 / stand-02, ARG1, m / missile)
(s2 / stand-02, ARG2, a / alert-01)
(s2 / stand-02, location, b / base)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),alert,alert-01,false), Span(23,24,List(1),stood,stand-01,false), Span(22,23,List(2),missiles,missile,false), Span(21,22,List(3),nuclear,nucleus,false), Span(15,16,List(4),electricity,electricity,false), Span(11,13,List(8, 7, 6, 5),Power Company,(organization :name (name :op "Power" :op "Company")),false), Span(7,8,List(10, 9),000000,(date-entity :year 2000),false), Span(5,6,List(11),bill,bill,false), Span(4,5,List(12),power,power,false)),Map(2 -> missile, 5 -> organization, 12 -> power, 8 -> "Company", 7 -> "Power", 1 -> stand-01, 4 -> electricity, 11 -> bill, 6 -> name, 0 -> alert-01, 9 -> date-entity, 3 -> nucleus, 10 -> 2000),Map(e -> electricity, n -> nucleus, 2 -> 2000, b -> bill, s -> stand-01, d -> date-entity, m -> missile, p -> power, a -> alert-01, o -> organization, n2 -> name))),[Ljava.lang.String;@ca30bc1,Annotation([Ljava.lang.String;@1046d517,[Ljava.lang.String;@3b7d3a38,[Ljava.lang.String;@416c58f5),Annotation([Ljava.lang.String;@5505ae1a,[Ljava.lang.String;@73cd37c0,[Ledu.cmu.lti.nlp.amr.Dependency;@21337f7b),Annotation([Ljava.lang.String;@2bb3058,[Ljava.lang.String;@7a362b6b,[Ljava.lang.String;@60df60da),Annotation([Ljava.lang.String;@5a2d131d,[Ljava.lang.String;@14fc1f0,[Ledu.cmu.lti.nlp.amr.Entity;@4ae9cfc1))
AMR:
(a / alert-01, ARG0, m / missile)
(a / alert-01, ARG1, b / bill)
(b / bill, mod, p / power)
(d / date-entity, op, s / stand-01)
(d / date-entity, year, 2 / 2000)
(e / electricity, consist, o / organization)
(m / missile, mod, n / nucleus)
(n2 / name, op, "Company")
(n2 / name, op, "Power")
(o / organization, name, n2 / name)
(s / stand-01, ARG0, e / electricity)
(s / stand-01, ARG1, m / missile)

Decoded in 207,729 microseconds
Sentence: The nuclear missile silos themselves did not lose power.

Spans:
Span 2-3:  missile => missile
Span 1-2:  nuclear => nucleus
Span 8-9:  power => power

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  lose => lose-02
Oracle Span 2-3:  missile => missile
Oracle Span 1-2:  nuclear => nucleus
Oracle Span 8-9:  power => power
Oracle Span 3-4:  silos => silo

Missing span: lose => lose-02
Missing span: silos => silo
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	nuclear	_	JJ	JJ	_	3	amod	_	_
3	missile	_	NN	NN	_	4	nsubj	_	_
4	silos	_	VBZ	VBZ	_	0	root	_	_
5	themselves	_	PRP	PRP	_	8	nsubj	_	_
6	did	_	VBD	VBD	_	8	aux	_	_
7	not	_	RB	RB	_	8	neg	_	_
8	lose	_	VB	VB	_	4	ccomp	_	_
9	power	_	NN	NN	_	8	dobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(l / lose-02, ARG0, s / silo)
(l / lose-02, ARG1, p / power)
(m / missile, mod, n / nucleus)
(s / silo, mod, m / missile)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),power,power,false), Span(2,3,List(1),missile,missile,false), Span(1,2,List(2),nuclear,nucleus,false)),Map(2 -> nucleus, 1 -> missile, 0 -> power),Map(n -> nucleus, m -> missile, p -> power))),[Ljava.lang.String;@512baff6,Annotation([Ljava.lang.String;@632ceb35,[Ljava.lang.String;@1c93f6e1,[Ljava.lang.String;@1800a575),Annotation([Ljava.lang.String;@1458ed9c,[Ljava.lang.String;@10a9d961,[Ledu.cmu.lti.nlp.amr.Dependency;@130e116b),Annotation([Ljava.lang.String;@e383572,[Ljava.lang.String;@5ddf0d24,[Ljava.lang.String;@363a52f),Annotation([Ljava.lang.String;@60856961,[Ljava.lang.String;@2fd953a6,[Ledu.cmu.lti.nlp.amr.Entity;@a4add54))
AMR:
(m / missile, mod, n / nucleus)
(p / power, poss, m / missile)

Decoded in 25,124 microseconds
Sentence: Armed troops marched to the substations and turned the power back on.

Spans:
Span 2-3:  marched => march-01
Span 9-10:  power => power

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 0-1:  Armed => arm-01
Oracle Span 10-11:  back => back
Oracle Span 2-3:  marched => march-01
Oracle Span 9-10:  power => power
Oracle Span 5-6:  substations => substation
Oracle Span 1-2:  troops => troop
Oracle Span 7-8:  turned => turn-13

Missing span: and => and
Missing span: turned => turn-13
Missing span: back => back
Missing span: substations => substation
Missing span: troops => troop
Missing span: Armed => arm-01
Dependencies:
1	Armed	_	NNP	NNP	_	2	nn	_	_
2	troops	_	NNS	NNS	_	3	nsubj	_	_
3	marched	_	VBD	VBD	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	substations	_	NNS	NNS	_	4	pobj	_	_
7	and	_	CC	CC	_	3	cc	_	_
8	turned	_	VBD	VBD	_	3	conj	_	_
9	the	_	DT	DT	_	10	det	_	_
10	power	_	NN	NN	_	8	dobj	_	_
11	back	_	RP	RP	_	8	prt	_	_
12	on	_	IN	IN	_	8	prep	_	_
13	.	_	.	.	_	3	punct	_	_

Oracle:
(a / arm-01, ARG1, t / troop)
(a2 / and, op, m / march-01)
(a2 / and, op, t2 / turn-13)
(m / march-01, ARG0, t / troop)
(m / march-01, destination, s / substation)
(t2 / turn-13, ARG0, t / troop)
(t2 / turn-13, ARG1, p / power)
(t2 / turn-13, mod, b / back)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),power,power,false), Span(2,3,List(1),marched,march-01,false)),Map(1 -> march-01, 0 -> power),Map(m -> march-01, p -> power))),[Ljava.lang.String;@141e5bef,Annotation([Ljava.lang.String;@5f9be66c,[Ljava.lang.String;@3abada5a,[Ljava.lang.String;@66c61024),Annotation([Ljava.lang.String;@61fe30,[Ljava.lang.String;@c9d0d6,[Ledu.cmu.lti.nlp.amr.Dependency;@6ccdb29f),Annotation([Ljava.lang.String;@3adcc812,[Ljava.lang.String;@35432107,[Ljava.lang.String;@7b420819),Annotation([Ljava.lang.String;@7a1a14a4,[Ljava.lang.String;@265adfad,[Ledu.cmu.lti.nlp.amr.Entity;@a3d9978))
AMR:
(m / march-01, ARG1, p / power)

Decoded in 22,895 microseconds
Sentence: In 010100 and 010200 the national utility, United energy systems cut power to a number of military installations around Russia.

mkDayMonthYear(010100,00,01,01)
mkDayMonthYear(010200,00,02,01)
NER Entity: (thing :name (name :op "United"))
NER Entity: (country :name (name :op "Russia"))
mkDayMonthYear(010200,00,02,01)
mkDayMonthYear(010100,00,01,01)
Spans:
Span 1-2:  010100 => (date-entity :day 0 :month 1 :year 01)
Span 3-4:  010200 => (date-entity :day 0 :month 2 :year 01)
Span 19-20:  around => around
Span 9-10:  energy => energy
Span 18-19:  installations => installation
Span 12-13:  power => power
Span 10-11:  systems => system
Span 6-7:  utility => utility

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  010100 => (date-entity :month 1 :year 2001)
Oracle Span 3-4:  010200 => (date-entity :month 2 :year 2001)
Oracle Span 19-20:  around => around
Oracle Span 11-12:  cut => cut-02
Oracle Span 18-19:  installations => installation
Oracle Span 17-18:  military => military
Oracle Span 5-6:  national => nation
Oracle Span 15-16:  number => number
Oracle Span 12-13:  power => power
Oracle Span 20-21:  Russia => (country :name (name :op "Russia"))
Oracle Span 8-11:  United energy systems => (company :name (name :op "Systems" :op "Energy" :op "United"))

Extra span: systems => system
Extra span: energy => energy
Extra span: utility => utility
Incorrect span: 010200 => (date-entity :day 0 :month 2 :year 01)
Incorrect span: 010100 => (date-entity :day 0 :month 1 :year 01)
Missing span: United energy systems => (company :name (name :op "Systems" :op "Energy" :op "United"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: 010100 => (date-entity :month 1 :year 2001)
Missing span: 010200 => (date-entity :month 2 :year 2001)
Missing span: cut => cut-02
Missing span: number => number
Missing span: military => military
Missing span: national => nation
Dependencies:
1	In	_	IN	IN	_	12	prep	_	_
2	010100	_	CD	CD	_	1	pobj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	010200	_	CD	CD	_	2	conj	_	_
5	the	_	DT	DT	_	7	det	_	_
6	national	_	JJ	JJ	_	7	amod	_	_
7	utility	_	NN	NN	_	2	dep	_	_
8	,	_	,	,	_	12	punct	_	_
9	United	_	NNP	NNP	_	11	nn	_	_
10	energy	_	NN	NN	_	11	nn	_	_
11	systems	_	NNS	NNS	_	12	nsubj	_	_
12	cut	_	VBD	VBD	_	0	root	_	_
13	power	_	NN	NN	_	12	dobj	_	_
14	to	_	TO	TO	_	12	prep	_	_
15	a	_	DT	DT	_	16	det	_	_
16	number	_	NN	NN	_	14	pobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	military	_	JJ	JJ	_	19	amod	_	_
19	installations	_	NNS	NNS	_	17	pobj	_	_
20	around	_	IN	IN	_	12	prep	_	_
21	Russia	_	NNP	NNP	_	20	pobj	_	_
22	.	_	.	.	_	12	punct	_	_

Oracle:
(a2 / around, op, c2 / country)
(c / cut-02, ARG0, c3 / company)
(c / cut-02, ARG1, p / power)
(c / cut-02, location, i2 / installation)
(c2 / country, name, n4 / name)
(c3 / company, mod, n / nation)
(c3 / company, name, n2 / name)
(d / date-entity, month, 1)
(d / date-entity, year, 2001)
(d2 / date-entity, month, 2)
(d2 / date-entity, year, 2001)
(i2 / installation, location, a2 / around)
(i2 / installation, mod, m / military)
(i2 / installation, quant, n3 / number)
(n2 / name, op, "Energy")
(n2 / name, op, "Systems")
(n2 / name, op, "United")
(n4 / name, op, "Russia")
(p / power, time, d / date-entity)
(p / power, time, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),around,around,false), Span(18,19,List(1),installations,installation,false), Span(12,13,List(2),power,power,false), Span(10,11,List(3),systems,system,false), Span(9,10,List(4),energy,energy,false), Span(6,7,List(5),utility,utility,false), Span(3,4,List(9, 8, 7, 6),010200,(date-entity :day 0 :month 2 :year 01),false), Span(1,2,List(13, 12, 11, 10),010100,(date-entity :day 0 :month 1 :year 01),false)),Map(2 -> power, 5 -> utility, 12 -> 1, 8 -> 2, 7 -> 0, 1 -> installation, 4 -> energy, 11 -> 0, 6 -> date-entity, 0 -> around, 9 -> 01, 3 -> system, 10 -> date-entity, 13 -> 01),Map(e -> energy, 2 -> 2, 03 -> 0, s -> system, d -> date-entity, 1 -> 1, p -> power, a -> around, d2 -> date-entity, 02 -> 01, i -> installation, u -> utility, 0 -> 0, 04 -> 01))),[Ljava.lang.String;@61544ae6,Annotation([Ljava.lang.String;@4b41dd5c,[Ljava.lang.String;@3b96c42e,[Ljava.lang.String;@5d066c7d),Annotation([Ljava.lang.String;@1e461e41,[Ljava.lang.String;@5ba88be8,[Ledu.cmu.lti.nlp.amr.Dependency;@56928307),Annotation([Ljava.lang.String;@3899782c,[Ljava.lang.String;@1603cd68,[Ljava.lang.String;@9ebe38b),Annotation([Ljava.lang.String;@4b23c30a,[Ljava.lang.String;@38089a5a,[Ledu.cmu.lti.nlp.amr.Entity;@30e868be))
AMR:
(d / date-entity, day, 0 / 0)
(d / date-entity, mod, u / utility)
(d / date-entity, month, 2 / 2)
(d / date-entity, year, 02 / 01)
(d2 / date-entity, day, 03 / 0)
(d2 / date-entity, month, 1 / 1)
(d2 / date-entity, year, 04 / 01)
(i / installation, op, d2 / date-entity)
(i / installation, poss, d / date-entity)
(i / installation, poss, e / energy)
(p / power, location, a / around)
(p / power, location, s / system)
(s / system, mod, e / energy)

Decoded in 130,526 microseconds
Sentence: The military installations that lost power included the Russian space forces monitoring center on the Kamchatka Peninsula.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Kamchatka" :op "Peninsula"))
Spans:
Span 12-13:  center => center
Span 2-3:  installations => installation
Span 15-17:  Kamchatka Peninsula => (peninsula :name (name :op "Peninsula" :op "Kamchatka"))
Span 4-5:  lost => lose-02
Span 11-12:  monitoring => monitor-01
Span 5-6:  power => power
Span 9-11:  space forces => (military :name (name :op "Forces" :op "Space"))

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 12-13:  center => center
Oracle Span 6-7:  included => include-01
Oracle Span 2-3:  installations => installation
Oracle Span 15-16:  Kamchatka => (name :op "Kamchatka")
Oracle Span 4-5:  lost => lose-02
Oracle Span 1-2:  military => military
Oracle Span 11-12:  monitoring => monitor-01
Oracle Span 16-17:  Peninsula => peninsula
Oracle Span 5-6:  power => power
Oracle Span 8-11:  Russian space forces => (military :name (name :op "Forces" :op "Space" :op "Russian"))

Extra span: Kamchatka Peninsula => (peninsula :name (name :op "Peninsula" :op "Kamchatka"))
Extra span: space forces => (military :name (name :op "Forces" :op "Space"))
Missing span: Russian space forces => (military :name (name :op "Forces" :op "Space" :op "Russian"))
Missing span: Kamchatka => (name :op "Kamchatka")
Missing span: included => include-01
Missing span: military => military
Missing span: Peninsula => peninsula
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	military	_	JJ	JJ	_	3	amod	_	_
3	installations	_	NNS	NNS	_	7	nsubj	_	_
4	that	_	WDT	WDT	_	5	nsubj	_	_
5	lost	_	VBD	VBD	_	3	rcmod	_	_
6	power	_	NN	NN	_	5	dobj	_	_
7	included	_	VBD	VBD	_	0	root	_	_
8	the	_	DT	DT	_	13	det	_	_
9	Russian	_	JJ	JJ	_	13	amod	_	_
10	space	_	NN	NN	_	13	nn	_	_
11	forces	_	NNS	NNS	_	13	nn	_	_
12	monitoring	_	NN	NN	_	13	nn	_	_
13	center	_	NN	NN	_	7	dobj	_	_
14	on	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Kamchatka	_	NNP	NNP	_	17	nn	_	_
17	Peninsula	_	NNP	NNP	_	14	pobj	_	_
18	.	_	.	.	_	7	punct	_	_

Oracle:
(c / center, location, p2 / peninsula)
(i / installation, mod, m / military)
(i3 / include-01, ARG1, c / center)
(i3 / include-01, ARG2, i / installation)
(l / lose-02, ARG0, i / installation)
(l / lose-02, ARG1, p / power)
(m2 / monitor-01, ARG0, c / center)
(m2 / monitor-01, ARG1, m3 / military)
(m3 / military, name, n3 / name)
(n2 / name, op, "Kamchatka")
(n3 / name, op, "Forces")
(n3 / name, op, "Russian")
(n3 / name, op, "Space")
(p2 / peninsula, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(15,17,List(3, 2, 1, 0),Kamchatka Peninsula,(peninsula :name (name :op "Peninsula" :op "Kamchatka")),false), Span(12,13,List(4),center,center,false), Span(11,12,List(5),monitoring,monitor-01,false), Span(9,11,List(9, 8, 7, 6),space forces,(military :name (name :op "Forces" :op "Space")),false), Span(5,6,List(10),power,power,false), Span(4,5,List(11),lost,lose-02,false), Span(2,3,List(12),installations,installation,false)),Map(2 -> "Peninsula", 5 -> monitor-01, 12 -> installation, 8 -> "Forces", 7 -> name, 1 -> name, 4 -> center, 11 -> lose-02, 6 -> military, 0 -> peninsula, 9 -> "Space", 3 -> "Kamchatka", 10 -> power),Map(n -> name, m2 -> military, p2 -> power, m -> monitor-01, p -> peninsula, i -> installation, l -> lose-02, c -> center, n2 -> name))),[Ljava.lang.String;@66c92293,Annotation([Ljava.lang.String;@332796d3,[Ljava.lang.String;@4f0100a7,[Ljava.lang.String;@3cdf2c61),Annotation([Ljava.lang.String;@13ad5cd3,[Ljava.lang.String;@1c33c17b,[Ledu.cmu.lti.nlp.amr.Dependency;@5bf0fe62),Annotation([Ljava.lang.String;@1e097d59,[Ljava.lang.String;@673be18f,[Ljava.lang.String;@6581dc0a),Annotation([Ljava.lang.String;@39de3d36,[Ljava.lang.String;@6ce86ce1,[Ledu.cmu.lti.nlp.amr.Entity;@54e7df6a))
AMR:
(c / center, location, p / peninsula)
(l / lose-02, ARG0, i / installation)
(l / lose-02, ARG1, p2 / power)
(m / monitor-01, ARG0, c / center)
(m / monitor-01, ARG1, m2 / military)
(m / monitor-01, prep-against, p2 / power)
(m2 / military, name, n2 / name)
(n / name, op, "Kamchatka")
(n / name, op, "Peninsula")
(n2 / name, op, "Forces")
(n2 / name, op, "Space")
(p / peninsula, name, n / name)

Decoded in 117,013 microseconds
Sentence: In most cases of military installations having their electricity cut off the electricity has been quickly restored.

Spans:
Span 2-3:  cases => case
Span 12-13:  electricity => electricity
Span 8-9:  electricity => electricity
Span 5-6:  installations => installation
Span 15-16:  quickly => quick
Span 16-17:  restored => restore-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 2-3:  cases => case
Oracle Span 9-10:  cut => cut-04
Oracle Span 8-9:  electricity => electricity
Oracle Span 5-6:  installations => installation
Oracle Span 4-5:  military => military
Oracle Span 1-2:  most => most
Oracle Span 15-16:  quickly => quick
Oracle Span 16-17:  restored => restore-01

Extra span: electricity => electricity
Missing span: cut => cut-04
Missing span: military => military
Missing span: most => most
Dependencies:
1	In	_	IN	IN	_	17	prep	_	_
2	most	_	JJS	JJS	_	3	amod	_	_
3	cases	_	NNS	NNS	_	7	nsubj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	military	_	JJ	JJ	_	6	amod	_	_
6	installations	_	NNS	NNS	_	4	pobj	_	_
7	having	_	VBG	VBG	_	1	pcomp	_	_
8	their	_	PRP$	PRP$	_	9	poss	_	_
9	electricity	_	NN	NN	_	10	nsubj	_	_
10	cut	_	VB	VB	_	7	ccomp	_	_
11	off	_	RP	RP	_	10	prt	_	_
12	the	_	DT	DT	_	13	det	_	_
13	electricity	_	NN	NN	_	17	nsubjpass	_	_
14	has	_	VBZ	VBZ	_	17	aux	_	_
15	been	_	VBN	VBN	_	17	auxpass	_	_
16	quickly	_	RB	RB	_	17	advmod	_	_
17	restored	_	VBN	VBN	_	0	root	_	_
18	.	_	.	.	_	17	punct	_	_

Oracle:
(c2 / cut-04, ARG1, e / electricity)
(c2 / cut-04, ARG4, i / installation)
(c3 / case, mod, i / installation)
(c3 / case, quant, m3 / most)
(i / installation, mod, m2 / military)
(r2 / restore-01, ARG1, e / electricity)
(r2 / restore-01, mod, q / quick)
(r2 / restore-01, time, c3 / case)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),restored,restore-01,false), Span(15,16,List(1),quickly,quick,false), Span(12,13,List(2),electricity,electricity,false), Span(8,9,List(3),electricity,electricity,false), Span(5,6,List(4),installations,installation,false), Span(2,3,List(5),cases,case,false)),Map(2 -> electricity, 5 -> case, 1 -> quick, 4 -> installation, 0 -> restore-01, 3 -> electricity),Map(e -> electricity, q -> quick, e2 -> electricity, i -> installation, r -> restore-01, c -> case))),[Ljava.lang.String;@3fed2870,Annotation([Ljava.lang.String;@77128536,[Ljava.lang.String;@58326051,[Ljava.lang.String;@32c4e8b2),Annotation([Ljava.lang.String;@64bce832,[Ljava.lang.String;@764faa6,[Ledu.cmu.lti.nlp.amr.Dependency;@4c1f22f3),Annotation([Ljava.lang.String;@598bd2ba,[Ljava.lang.String;@5a755cc1,[Ljava.lang.String;@7ae42ce3),Annotation([Ljava.lang.String;@4f5991f6,[Ljava.lang.String;@484094a5,[Ledu.cmu.lti.nlp.amr.Entity;@38234a38))
AMR:
(c / case, topic, i / installation)
(e2 / electricity, op, i / installation)
(r / restore-01, ARG0, c / case)
(r / restore-01, ARG1, e / electricity)
(r / restore-01, manner, q / quick)

Decoded in 60,683 microseconds
Sentence: Often investigations show that the tug of war with the utility forces the military to spend budgeted funds for electrical power instead of diverting money for other uses.

Spans:
Span 16-17:  budgeted => budget-01
Span 23-24:  diverting => divert-01
Span 19-20:  electrical => electricity
Span 21-22:  instead => instead
Span 1-2:  investigations => investigate-01
Span 24-25:  money => money
Span 26-27:  other => other
Span 20-21:  power => power
Span 2-3:  show => show-01
Span 15-16:  spend => spend-01
Span 27-28:  uses => use-01
Span 10-11:  utility => utility

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 16-17:  budgeted => budget-01
Oracle Span 23-24:  diverting => divert-01
Oracle Span 19-20:  electrical => electricity
Oracle Span 11-12:  forces => force-01
Oracle Span 17-18:  funds => fund-01
Oracle Span 1-2:  investigations => investigate-01
Oracle Span 13-14:  military => military
Oracle Span 24-25:  money => money
Oracle Span 0-1:  Often => often
Oracle Span 26-27:  other => other
Oracle Span 20-21:  power => power
Oracle Span 2-3:  show => show-01
Oracle Span 15-16:  spend => spend-01
Oracle Span 5-6:  tug => tug-02
Oracle Span 27-28:  uses => (thing :ARG2-of use-01)
Oracle Span 10-11:  utility => utility
Oracle Span 7-8:  war => war

Incorrect span: uses => use-01
Extra span: instead => instead
Missing span: Often => often
Missing span: tug => tug-02
Missing span: forces => force-01
Missing span: uses => (thing :ARG2-of use-01)
Missing span: military => military
Missing span: funds => fund-01
Missing span: war => war
Dependencies:
1	Often	_	RB	RB	_	3	advmod	_	_
2	investigations	_	NNS	NNS	_	3	nsubj	_	_
3	show	_	VBP	VBP	_	0	root	_	_
4	that	_	IN	IN	_	12	mark	_	_
5	the	_	DT	DT	_	6	det	_	_
6	tug	_	NN	NN	_	12	nsubj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	war	_	NN	NN	_	7	pobj	_	_
9	with	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	utility	_	NN	NN	_	9	pobj	_	_
12	forces	_	VBZ	VBZ	_	3	ccomp	_	_
13	the	_	DT	DT	_	14	det	_	_
14	military	_	NN	NN	_	12	dobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	spend	_	VB	VB	_	14	vmod	_	_
17	budgeted	_	VBN	VBN	_	18	amod	_	_
18	funds	_	NNS	NNS	_	16	dobj	_	_
19	for	_	IN	IN	_	16	prep	_	_
20	electrical	_	JJ	JJ	_	21	amod	_	_
21	power	_	NN	NN	_	19	pobj	_	_
22	instead	_	RB	RB	_	23	advmod	_	_
23	of	_	IN	IN	_	21	prep	_	_
24	diverting	_	VBG	VBG	_	23	pcomp	_	_
25	money	_	NN	NN	_	24	dobj	_	_
26	for	_	IN	IN	_	24	prep	_	_
27	other	_	JJ	JJ	_	28	amod	_	_
28	uses	_	NNS	NNS	_	26	pobj	_	_
29	.	_	.	.	_	3	punct	_	_

Oracle:
(d / divert-01, ARG0, m / military)
(d / divert-01, ARG1, m2 / money)
(d / divert-01, ARG3, t2 / thing)
(d / divert-01, prep-instead, s2 / spend-01)
(f / force-01, ARG0, t / tug-02)
(f / force-01, ARG2, s2 / spend-01)
(p / power, mod, e / electricity)
(s / show-01, ARG0, i / investigate-01)
(s / show-01, ARG1, t / tug-02)
(s / show-01, frequency, o / often)
(s2 / spend-01, ARG1, p / power)
(t / tug-02, mod, w / war)
(t2 / thing, mod, o2 / other)
(u / use-01, ARG2, t2 / thing)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),uses,use-01,false), Span(26,27,List(1),other,other,false), Span(24,25,List(2),money,money,false), Span(23,24,List(3),diverting,divert-01,false), Span(21,22,List(4),instead,instead,false), Span(20,21,List(5),power,power,false), Span(19,20,List(6),electrical,electricity,false), Span(16,17,List(7),budgeted,budget-01,false), Span(15,16,List(8),spend,spend-01,false), Span(10,11,List(9),utility,utility,false), Span(2,3,List(10),show,show-01,false), Span(1,2,List(11),investigations,investigate-01,false)),Map(2 -> money, 5 -> power, 8 -> spend-01, 7 -> budget-01, 1 -> other, 11 -> investigate-01, 4 -> instead, 6 -> electricity, 9 -> utility, 0 -> use-01, 10 -> show-01, 3 -> divert-01),Map(e -> electricity, s2 -> show-01, b -> budget-01, u2 -> utility, s -> spend-01, d -> divert-01, m -> money, p -> power, i2 -> investigate-01, i -> instead, u -> use-01, o -> other))),[Ljava.lang.String;@63fbfaeb,Annotation([Ljava.lang.String;@602e0143,[Ljava.lang.String;@2c07545f,[Ljava.lang.String;@e57b96d),Annotation([Ljava.lang.String;@32c726ee,[Ljava.lang.String;@22f31dec,[Ledu.cmu.lti.nlp.amr.Dependency;@34c01041),Annotation([Ljava.lang.String;@76f4b65,[Ljava.lang.String;@c94fd30,[Ljava.lang.String;@36328d33),Annotation([Ljava.lang.String;@2c4d1ac,[Ljava.lang.String;@7f0d96f2,[Ledu.cmu.lti.nlp.amr.Entity;@545b995e))
AMR:
(b / budget-01, ARG1, p / power)
(d / divert-01, ARG1, m / money)
(d / divert-01, mod, i / instead)
(p / power, example, d / divert-01)
(p / power, mod, e / electricity)
(s / spend-01, ARG0, u2 / utility)
(s / spend-01, ARG1, b / budget-01)
(s2 / show-01, ARG0, i2 / investigate-01)
(s2 / show-01, ARG1, d / divert-01)
(u / use-01, ARG1, m / money)
(u / use-01, manner, o / other)

Decoded in 203,914 microseconds
Sentence: Some of the budgeted funds cut at times have included the building country residences for generals.

Spans:
Span 3-4:  budgeted => budget-01
Span 12-13:  country => country
Span 15-16:  generals => (have-org-role-91 :ARG2 general)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  budgeted => budget-01
Oracle Span 11-12:  building => build-01
Oracle Span 12-13:  country => country
Oracle Span 5-6:  cut => cut-02
Oracle Span 4-5:  funds => fund-01
Oracle Span 15-16:  generals => general
Oracle Span 8-9:  have => (person :ARG0-of have-org-role-91)
Oracle Span 1-2:  of => include-01
Oracle Span 13-14:  residences => residence
Oracle Span 0-1:  Some => some

Incorrect span: generals => (have-org-role-91 :ARG2 general)
Missing span: of => include-01
Missing span: funds => fund-01
Missing span: Some => some
Missing span: cut => cut-02
Missing span: building => build-01
Missing span: generals => general
Missing span: residences => residence
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	Some	_	DT	DT	_	10	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	5	det	_	_
4	budgeted	_	VBN	VBN	_	5	amod	_	_
5	funds	_	NNS	NNS	_	2	pobj	_	_
6	cut	_	VBN	VBN	_	5	vmod	_	_
7	at	_	IN	IN	_	6	prep	_	_
8	times	_	NNS	NNS	_	7	pobj	_	_
9	have	_	VBP	VBP	_	10	aux	_	_
10	included	_	VBN	VBN	_	0	root	_	_
11	the	_	DT	DT	_	14	det	_	_
12	building	_	VBG	VBG	_	14	amod	_	_
13	country	_	NN	NN	_	14	nn	_	_
14	residences	_	NNS	NNS	_	10	dobj	_	_
15	for	_	IN	IN	_	14	prep	_	_
16	generals	_	NNS	NNS	_	15	pobj	_	_
17	.	_	.	.	_	10	punct	_	_

Oracle:
(b / build-01, ARG1, r / residence)
(b / build-01, beneficiary, p / person)
(b2 / budget-01, ARG1, f / fund-01)
(c2 / cut-02, ARG1, f / fund-01)
(f / fund-01, quant, s2 / some)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, g / general)
(i / include-01, ARG1, b / build-01)
(i / include-01, ARG2, f / fund-01)
(r / residence, location, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),generals,(have-org-role-91 :ARG2 general),false), Span(12,13,List(2),country,country,false), Span(3,4,List(3),budgeted,budget-01,false)),Map(2 -> country, 1 -> general, 0 -> have-org-role-91, 3 -> budget-01),Map(h -> have-org-role-91, b -> budget-01, g -> general, c -> country))),[Ljava.lang.String;@76a2ddf3,Annotation([Ljava.lang.String;@524f3b3a,[Ljava.lang.String;@41e68d87,[Ljava.lang.String;@49ff7d8c),Annotation([Ljava.lang.String;@29526c05,[Ljava.lang.String;@2ef14fe,[Ledu.cmu.lti.nlp.amr.Dependency;@77102b91),Annotation([Ljava.lang.String;@45312be2,[Ljava.lang.String;@7fb95505,[Ljava.lang.String;@58be6e8),Annotation([Ljava.lang.String;@7331196b,[Ljava.lang.String;@3f9342d4,[Ledu.cmu.lti.nlp.amr.Entity;@ab7395e))
AMR:
(b / budget-01, ARG0, c / country)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, g / general)

Decoded in 38,463 microseconds
Sentence: 2004-07-24

mkDayMonthYear(2004-07-24,24,07,2004)
mkDayMonthYear(2004-07-24,24,07,2004)
Spans:
Span 0-1:  2004-07-24 => (date-entity :day 24 :month 7 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2004-07-24 => (date-entity :day 24 :month 7 :year 2004)

Dependencies:
1	2004-07-24	_	NNP	NNP	_	0	root	_	_

Oracle:
(d2 / date-entity, day, 24)
(d2 / date-entity, month, 7)
(d2 / date-entity, year, 2004)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-07-24,(date-entity :day 24 :month 7 :year 2004),false)),Map(2 -> 7, 1 -> 24, 0 -> date-entity, 3 -> 2004),Map(2 -> 24, 7 -> 7, d -> date-entity, 22 -> 2004))),[Ljava.lang.String;@50d13246,Annotation([Ljava.lang.String;@2bd08376,[Ljava.lang.String;@e70f13a,[Ljava.lang.String;@3d3e5463),Annotation([Ljava.lang.String;@64a40280,[Ljava.lang.String;@4b40f651,[Ledu.cmu.lti.nlp.amr.Dependency;@42b02722),Annotation([Ljava.lang.String;@d62fe5b,[Ljava.lang.String;@49964d75,[Ljava.lang.String;@528c868),Annotation([Ljava.lang.String;@466276d8,[Ljava.lang.String;@5ce8d869,[Ledu.cmu.lti.nlp.amr.Entity;@27eedb64))
AMR:
(d / date-entity, day, 2 / 24)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2004)

Decoded in 9,394 microseconds
Sentence: Brazil (BR)

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (organization :name (name :op "BR"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 0-1:  Brazil => (country :name (name :op "Brazil"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Brazil => (country :name (name :op "Brazil"))

Dependencies:
1	Brazil	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	BR	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Brazil")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> "Brazil", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@64c63c79,Annotation([Ljava.lang.String;@31c7528f,[Ljava.lang.String;@2b76ff4e,[Ljava.lang.String;@7a1234bf),Annotation([Ljava.lang.String;@2f62ea70,[Ljava.lang.String;@24ba9639,[Ledu.cmu.lti.nlp.amr.Dependency;@38aa816f),Annotation([Ljava.lang.String;@53f6fd09,[Ljava.lang.String;@6bffbc6d,[Ljava.lang.String;@1b84f475),Annotation([Ljava.lang.String;@7749bf93,[Ljava.lang.String;@13330ac6,[Ledu.cmu.lti.nlp.amr.Entity;@539d019))
AMR:
(c / country, name, n / name)
(n / name, op, "Brazil")

Decoded in 6,934 microseconds
Sentence: International; crime; Government; narcotics

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 2-3:  crime => crime
Span 6-7:  narcotics => narcotic

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 2-3:  crime => crime
Oracle Span 4-5:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 6-7:  narcotics => narcotic

Extra span: ; => and
Extra span: ; => and
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	crime	_	NN	NN	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	Government	_	NNP	NNP	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	narcotics	_	NNS	NNS	_	5	dep	_	_

Oracle:
(a / and, op, c / crime)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, n / narcotic)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),narcotics,narcotic,false), Span(5,6,List(1),;,and,false), Span(3,4,List(2),;,and,false), Span(2,3,List(3),crime,crime,false), Span(1,2,List(4),;,and,false)),Map(2 -> and, 1 -> and, 4 -> and, 0 -> narcotic, 3 -> crime),Map(n -> narcotic, a3 -> and, a -> and, a2 -> and, c -> crime))),[Ljava.lang.String;@39a2bb97,Annotation([Ljava.lang.String;@3ad2e17,[Ljava.lang.String;@8c3619e,[Ljava.lang.String;@4331d187),Annotation([Ljava.lang.String;@6f63b475,[Ljava.lang.String;@554e218,[Ledu.cmu.lti.nlp.amr.Dependency;@1608bcbd),Annotation([Ljava.lang.String;@5bf8fa12,[Ljava.lang.String;@29ca3d04,[Ljava.lang.String;@b2c5e07),Annotation([Ljava.lang.String;@5812f68b,[Ljava.lang.String;@4426bff1,[Ledu.cmu.lti.nlp.amr.Entity;@3c7c886c))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a3 / and, op, c / crime)
(a3 / and, op, n / narcotic)

Decoded in 19,640 microseconds
Sentence: Brazil to implement law allowing air force to target drug trafficking aircraft in Brazilian airspace.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 5-7:  air force => (military :name (name :op "Force" :op "Air"))
Span 11-12:  aircraft => aircraft
Span 14-15:  airspace => airspace
Span 4-5:  allowing => allow-01
Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Span 13-14:  Brazilian => (country :name (name :op "Brazil"))
Span 9-10:  drug => drug
Span 2-3:  implement => implement-01
Span 3-4:  law => law

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 5-7:  air force => (military :name (name :op "Force" :op "Air"))
Oracle Span 11-12:  aircraft => aircraft
Oracle Span 14-15:  airspace => airspace
Oracle Span 4-5:  allowing => allow-01
Oracle Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 9-10:  drug => drug
Oracle Span 2-3:  implement => implement-01
Oracle Span 3-4:  law => law
Oracle Span 8-9:  target => target-01
Oracle Span 10-11:  trafficking => traffic-00

Extra span: Brazilian => (country :name (name :op "Brazil"))
Missing span: target => target-01
Missing span: trafficking => traffic-00
Dependencies:
1	Brazil	_	NNP	NNP	_	7	nsubj	_	_
2	to	_	TO	TO	_	3	aux	_	_
3	implement	_	VB	VB	_	1	vmod	_	_
4	law	_	NN	NN	_	3	dobj	_	_
5	allowing	_	VBG	VBG	_	3	xcomp	_	_
6	air	_	NN	NN	_	5	dobj	_	_
7	force	_	VBP	VBP	_	0	root	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	target	_	VB	VB	_	7	xcomp	_	_
10	drug	_	NN	NN	_	12	nn	_	_
11	trafficking	_	NN	NN	_	12	nn	_	_
12	aircraft	_	NN	NN	_	9	dobj	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	Brazilian	_	JJ	JJ	_	15	amod	_	_
15	airspace	_	NN	NN	_	13	pobj	_	_
16	.	_	.	.	_	7	punct	_	_

Oracle:
(a / allow-01, ARG0, l / law)
(a / allow-01, ARG1, t / target-01)
(a4 / airspace, mod, c / country)
(c / country, name, n / name)
(i / implement-01, ARG0, c / country)
(i / implement-01, ARG1, l / law)
(m / military, name, n2 / name)
(n / name, op, "Brazil")
(n2 / name, op, "Air")
(n2 / name, op, "Force")
(t / target-01, ARG0, m / military)
(t / target-01, ARG1, a3 / aircraft)
(t / target-01, location, a4 / airspace)
(t2 / traffic-00, ARG0, a3 / aircraft)
(t2 / traffic-00, ARG1, d / drug)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),airspace,airspace,false), Span(13,14,List(3, 2, 1),Brazilian,(country :name (name :op "Brazil")),false), Span(11,12,List(4),aircraft,aircraft,false), Span(9,10,List(5),drug,drug,false), Span(5,7,List(9, 8, 7, 6),air force,(military :name (name :op "Force" :op "Air")),false), Span(4,5,List(10),allowing,allow-01,false), Span(3,4,List(11),law,law,false), Span(2,3,List(12),implement,implement-01,false), Span(0,1,List(15, 14, 13),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> name, 5 -> drug, 12 -> implement-01, 15 -> "Brazil", 8 -> "Force", 7 -> name, 1 -> country, 4 -> aircraft, 11 -> law, 14 -> name, 6 -> military, 0 -> airspace, 9 -> "Air", 3 -> "Brazil", 10 -> allow-01, 13 -> country),Map(n -> name, a3 -> allow-01, m -> military, d -> drug, n3 -> name, a -> airspace, i -> implement-01, a2 -> aircraft, l -> law, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@55493582,Annotation([Ljava.lang.String;@1a20270e,[Ljava.lang.String;@6b88ca8c,[Ljava.lang.String;@336f1079),Annotation([Ljava.lang.String;@2f16c6b3,[Ljava.lang.String;@34158c08,[Ledu.cmu.lti.nlp.amr.Dependency;@19e4fcac),Annotation([Ljava.lang.String;@52c3cb31,[Ljava.lang.String;@4b79ac84,[Ljava.lang.String;@53941c2f),Annotation([Ljava.lang.String;@6dab9b6d,[Ljava.lang.String;@21fd5faa,[Ledu.cmu.lti.nlp.amr.Entity;@2766ca9d))
AMR:
(a / airspace, mod, c / country)
(a2 / aircraft, mod, a / airspace)
(a2 / aircraft, mod, d / drug)
(a2 / aircraft, poss, c2 / country)
(a3 / allow-01, ARG0, l / law)
(a3 / allow-01, ARG1, m / military)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(i / implement-01, ARG0, c2 / country)
(i / implement-01, ARG1, l / law)
(m / military, name, n2 / name)
(n / name, op, "Brazil")
(n2 / name, op, "Air")
(n2 / name, op, "Force")
(n3 / name, op, "Brazil")

Decoded in 147,948 microseconds
Sentence: US concerned over liability in the event of misidentification of a civilian plane.

NER Entity: (country :name (name :op "US"))
Spans:
Span 11-12:  civilian => civilian
Span 1-2:  concerned => concern-01
Span 6-7:  event => event
Span 3-4:  liability => liability
Span 12-13:  plane => plane

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 11-12:  civilian => civilian
Oracle Span 1-2:  concerned => concern-01
Oracle Span 3-4:  liability => liability
Oracle Span 8-9:  misidentification => misidentify-00
Oracle Span 12-13:  plane => plane
Oracle Span 0-1:  US => (country :name (name :op "US"))

Extra span: event => event
Missing span: US => (country :name (name :op "US"))
Missing span: misidentification => misidentify-00
Dependencies:
1	US	_	NNP	NNP	_	2	nsubj	_	_
2	concerned	_	VBN	VBN	_	0	root	_	_
3	over	_	IN	IN	_	2	prep	_	_
4	liability	_	NN	NN	_	3	pobj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	event	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	misidentification	_	NN	NN	_	8	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	13	det	_	_
12	civilian	_	JJ	JJ	_	13	amod	_	_
13	plane	_	NN	NN	_	10	pobj	_	_
14	.	_	.	.	_	2	punct	_	_

Oracle:
(c / concern-01, ARG0, l / liability)
(c / concern-01, ARG1, c2 / country)
(c2 / country, name, n / name)
(l / liability, condition, m / misidentify-00)
(m / misidentify-00, ARG1, p / plane)
(n / name, op, "US")
(p / plane, mod, c3 / civilian)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),plane,plane,false), Span(11,12,List(1),civilian,civilian,false), Span(6,7,List(2),event,event,false), Span(3,4,List(3),liability,liability,false), Span(1,2,List(4),concerned,concern-01,false)),Map(2 -> event, 1 -> civilian, 4 -> concern-01, 0 -> plane, 3 -> liability),Map(e -> event, p -> plane, l -> liability, c -> civilian, c2 -> concern-01))),[Ljava.lang.String;@5460cf3a,Annotation([Ljava.lang.String;@65a15628,[Ljava.lang.String;@2e6a5539,[Ljava.lang.String;@3fc9504b),Annotation([Ljava.lang.String;@6d025197,[Ljava.lang.String;@27d4a09,[Ledu.cmu.lti.nlp.amr.Dependency;@7e4204e2),Annotation([Ljava.lang.String;@b7c4869,[Ljava.lang.String;@740d2e78,[Ljava.lang.String;@1c481ff2),Annotation([Ljava.lang.String;@72437d8d,[Ljava.lang.String;@1b955cac,[Ledu.cmu.lti.nlp.amr.Entity;@676cf48))
AMR:
(c2 / concern-01, ARG0, l / liability)
(c2 / concern-01, ARG1, p / plane)
(l / liability, poss, e / event)
(p / plane, mod, c / civilian)

Decoded in 34,392 microseconds
Sentence: Brazil announced that the air force will begin shooting down aircraft used in trafficking illegal drugs in Brazilian airspace.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 4-6:  air force => (military :name (name :op "Force" :op "Air"))
Span 10-11:  aircraft => aircraft
Span 18-19:  airspace => airspace
Span 1-2:  announced => announce-01
Span 7-8:  begin => begin-01
Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Span 17-18:  Brazilian => (country :name (name :op "Brazil"))
Span 11-12:  used => use-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 4-6:  air force => (military :name (name :op "Force" :op "Air"))
Oracle Span 10-11:  aircraft => aircraft
Oracle Span 18-19:  airspace => airspace
Oracle Span 1-2:  announced => announce-01
Oracle Span 7-8:  begin => begin-01
Oracle Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 15-16:  drugs => drug
Oracle Span 14-15:  illegal => (law :polarity -)
Oracle Span 8-9:  shooting => shoot-05
Oracle Span 13-14:  trafficking => traffic-00
Oracle Span 11-12:  used => use-01

Extra span: Brazilian => (country :name (name :op "Brazil"))
Missing span: shooting => shoot-05
Missing span: trafficking => traffic-00
Missing span: drugs => drug
Missing span: illegal => (law :polarity -)
Dependencies:
1	Brazil	_	NNP	NNP	_	2	nsubj	_	_
2	announced	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	air	_	NN	NN	_	6	nn	_	_
6	force	_	NN	NN	_	8	nsubj	_	_
7	will	_	MD	MD	_	8	aux	_	_
8	begin	_	VB	VB	_	2	ccomp	_	_
9	shooting	_	VBG	VBG	_	8	xcomp	_	_
10	down	_	RP	RP	_	9	prt	_	_
11	aircraft	_	NN	NN	_	9	dobj	_	_
12	used	_	VBN	VBN	_	11	vmod	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	trafficking	_	NN	NN	_	16	nn	_	_
15	illegal	_	JJ	JJ	_	16	amod	_	_
16	drugs	_	NNS	NNS	_	13	pobj	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	Brazilian	_	JJ	JJ	_	19	amod	_	_
19	airspace	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(a / announce-01, ARG0, c / country)
(a / announce-01, ARG1, b / begin-01)
(a4 / airspace, mod, c / country)
(b / begin-01, ARG0, m / military)
(b / begin-01, ARG1, s / shoot-05)
(c / country, name, n / name)
(d / drug, mod, l / law)
(l / law, polarity, -)
(m / military, name, n2 / name)
(n / name, op, "Brazil")
(n2 / name, op, "Air")
(n2 / name, op, "Force")
(s / shoot-05, ARG0, m / military)
(s / shoot-05, ARG1, a3 / aircraft)
(t / traffic-00, ARG1, d / drug)
(t / traffic-00, location, a4 / airspace)
(u / use-01, ARG1, a3 / aircraft)
(u / use-01, ARG2, t / traffic-00)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),airspace,airspace,false), Span(17,18,List(3, 2, 1),Brazilian,(country :name (name :op "Brazil")),false), Span(11,12,List(4),used,use-01,false), Span(10,11,List(5),aircraft,aircraft,false), Span(7,8,List(6),begin,begin-01,false), Span(4,6,List(10, 9, 8, 7),air force,(military :name (name :op "Force" :op "Air")),false), Span(1,2,List(11),announced,announce-01,false), Span(0,1,List(14, 13, 12),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> name, 5 -> aircraft, 12 -> country, 8 -> name, 7 -> military, 1 -> country, 4 -> use-01, 11 -> announce-01, 14 -> "Brazil", 6 -> begin-01, 0 -> airspace, 9 -> "Force", 3 -> "Brazil", 10 -> "Air", 13 -> name),Map(n -> name, b -> begin-01, a3 -> announce-01, m -> military, n3 -> name, a -> airspace, a2 -> aircraft, u -> use-01, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@5a1de7fb,Annotation([Ljava.lang.String;@335b5620,[Ljava.lang.String;@29a0cdb,[Ljava.lang.String;@32a68f4f),Annotation([Ljava.lang.String;@73194df,[Ljava.lang.String;@6eb2384f,[Ledu.cmu.lti.nlp.amr.Dependency;@3c9c0d96),Annotation([Ljava.lang.String;@3a4621bd,[Ljava.lang.String;@31dadd46,[Ljava.lang.String;@4ed5eb72),Annotation([Ljava.lang.String;@12f9af83,[Ljava.lang.String;@19b93fa8,[Ledu.cmu.lti.nlp.amr.Entity;@7e6ef134))
AMR:
(a / airspace, mod, c / country)
(a3 / announce-01, ARG0, c2 / country)
(a3 / announce-01, ARG1, b / begin-01)
(b / begin-01, ARG0, m / military)
(b / begin-01, ARG1, a2 / aircraft)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(m / military, name, n2 / name)
(n / name, op, "Brazil")
(n2 / name, op, "Air")
(n2 / name, op, "Force")
(n3 / name, op, "Brazil")
(u / use-01, ARG0, c / country)
(u / use-01, ARG1, a2 / aircraft)

Decoded in 139,990 microseconds
Sentence: The plan requires 8 precautionary steps before the order to shoot down a plane may be issued.

Spans:
Span 6-7:  before => before
Span 16-17:  issued => issue-01
Span 14-15:  may => possible
Span 13-14:  plane => plane
Span 2-3:  requires => require-01
Span 10-11:  shoot => shoot-05
Span 5-6:  steps => step-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  8 => 8
Oracle Span 6-7:  before => before
Oracle Span 16-17:  issued => issue-01
Oracle Span 14-15:  may => possible
Oracle Span 8-9:  order => order-01
Oracle Span 1-2:  plan => (thing :ARG1-of plan-01)
Oracle Span 13-14:  plane => plane
Oracle Span 4-5:  precautionary => precaution
Oracle Span 2-3:  requires => require-01
Oracle Span 10-11:  shoot => shoot-05
Oracle Span 5-6:  steps => step

Incorrect span: steps => step-01
Missing span: order => order-01
Missing span: steps => step
Missing span: 8 => 8
Missing span: plan => (thing :ARG1-of plan-01)
Missing span: precautionary => precaution
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	plan	_	NN	NN	_	3	nsubj	_	_
3	requires	_	VBZ	VBZ	_	0	root	_	_
4	8	_	CD	CD	_	6	num	_	_
5	precautionary	_	JJ	JJ	_	6	amod	_	_
6	steps	_	NNS	NNS	_	3	dobj	_	_
7	before	_	IN	IN	_	17	mark	_	_
8	the	_	DT	DT	_	9	det	_	_
9	order	_	NN	NN	_	17	nsubjpass	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	shoot	_	VB	VB	_	9	vmod	_	_
12	down	_	RP	RP	_	11	prt	_	_
13	a	_	DT	DT	_	14	det	_	_
14	plane	_	NN	NN	_	11	dobj	_	_
15	may	_	MD	MD	_	17	aux	_	_
16	be	_	VB	VB	_	17	auxpass	_	_
17	issued	_	VBN	VBN	_	3	advcl	_	_
18	.	_	.	.	_	3	punct	_	_

Oracle:
(b / before, op, p3 / possible)
(i / issue-01, ARG1, o / order-01)
(o / order-01, ARG2, s2 / shoot-05)
(p / plan-01, ARG1, t / thing)
(p3 / possible, domain, i / issue-01)
(r / require-01, ARG0, t / thing)
(r / require-01, ARG1, s / step)
(r / require-01, time, b / before)
(s / step, mod, p2 / precaution)
(s / step, quant, 8 / 8)
(s2 / shoot-05, ARG1, p4 / plane)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),issued,issue-01,false), Span(14,15,List(1),may,possible,false), Span(13,14,List(2),plane,plane,false), Span(10,11,List(3),shoot,shoot-05,false), Span(6,7,List(4),before,before,false), Span(5,6,List(5),steps,step-01,false), Span(2,3,List(6),requires,require-01,false)),Map(2 -> plane, 5 -> step-01, 1 -> possible, 4 -> before, 6 -> require-01, 0 -> issue-01, 3 -> shoot-05),Map(s2 -> step-01, b -> before, p2 -> plane, s -> shoot-05, p -> possible, r -> require-01, i -> issue-01))),[Ljava.lang.String;@1f010bf0,Annotation([Ljava.lang.String;@40db2a24,[Ljava.lang.String;@10cf09e8,[Ljava.lang.String;@1921ad94),Annotation([Ljava.lang.String;@ee86bcb,[Ljava.lang.String;@177bea38,[Ledu.cmu.lti.nlp.amr.Dependency;@7f132176),Annotation([Ljava.lang.String;@6bca7e0d,[Ljava.lang.String;@2631f68c,[Ljava.lang.String;@6ed3f258),Annotation([Ljava.lang.String;@8ad6665,[Ljava.lang.String;@30af5b6b,[Ledu.cmu.lti.nlp.amr.Entity;@19835e64))
AMR:
(b / before, op, i / issue-01)
(p / possible, domain, i / issue-01)
(r / require-01, ARG1, s2 / step-01)
(r / require-01, time, b / before)
(s / shoot-05, ARG1, p2 / plane)
(s2 / step-01, ARG2, s / shoot-05)

Decoded in 54,311 microseconds
Sentence: Prior to the policy taking effect late 20041000 a publicity campaign will notify ranchers and others of the need to file flight plans.

mkDayMonthYear(20041000,00,10,2004)
mkDayMonthYear(20041000,00,10,2004)
Spans:
Span 7-8:  20041000 => 2004
Span 10-11:  campaign => campaign-01
Span 6-7:  late => late
Span 18-19:  need => need-01
Span 15-16:  others => other
Span 22-23:  plans => plan-01
Span 3-4:  policy => policy
Span 0-1:  Prior => prior
Span 9-10:  publicity => publicity

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 7-8:  20041000 => 2004
Oracle Span 14-15:  and => and
Oracle Span 10-11:  campaign => campaign-01
Oracle Span 5-6:  effect => effect
Oracle Span 20-21:  file => file-01
Oracle Span 6-7:  late => late
Oracle Span 18-19:  need => need-01
Oracle Span 12-13:  notify => notify-01
Oracle Span 15-16:  others => (person :mod other)
Oracle Span 22-23:  plans => plan
Oracle Span 3-4:  policy => policy
Oracle Span 0-1:  Prior => prior
Oracle Span 9-10:  publicity => publicity
Oracle Span 13-14:  ranchers => (person :ARG0-of ranch-01)
Oracle Span 4-5:  taking => take-01

Incorrect span: plans => plan-01
Incorrect span: others => other
Missing span: notify => notify-01
Missing span: taking => take-01
Missing span: effect => effect
Missing span: file => file-01
Missing span: plans => plan
Missing span: and => and
Missing span: others => (person :mod other)
Missing span: ranchers => (person :ARG0-of ranch-01)
Dependencies:
1	Prior	_	RB	RB	_	13	advmod	_	_
2	to	_	TO	TO	_	1	prep	_	_
3	the	_	DT	DT	_	4	det	_	_
4	policy	_	NN	NN	_	2	pobj	_	_
5	taking	_	VBG	VBG	_	4	vmod	_	_
6	effect	_	NN	NN	_	5	dobj	_	_
7	late	_	RB	RB	_	5	advmod	_	_
8	20041000	_	CD	CD	_	7	pobj	_	_
9	a	_	DT	DT	_	11	det	_	_
10	publicity	_	NN	NN	_	11	nn	_	_
11	campaign	_	NN	NN	_	13	nsubj	_	_
12	will	_	MD	MD	_	13	aux	_	_
13	notify	_	VB	VB	_	0	root	_	_
14	ranchers	_	NNS	NNS	_	13	dobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	others	_	NNS	NNS	_	14	conj	_	_
17	of	_	IN	IN	_	14	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	need	_	NN	NN	_	17	pobj	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	file	_	VB	VB	_	19	vmod	_	_
22	flight	_	NN	NN	_	23	nn	_	_
23	plans	_	NNS	NNS	_	21	dobj	_	_
24	.	_	.	.	_	13	punct	_	_

Oracle:
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(c / campaign-01, mod, p / publicity)
(f / file-01, ARG0, a / and)
(f / file-01, ARG1, p4 / plan)
(n / notify-01, ARG0, c / campaign-01)
(n / notify-01, ARG1, a / and)
(n / notify-01, ARG2, n2 / need-01)
(n / notify-01, time, p5 / prior)
(n2 / need-01, ARG0, a / and)
(n2 / need-01, ARG1, f / file-01)
(p3 / person, mod, o / other)
(p5 / prior, op, t / take-01)
(r / ranch-01, ARG0, p2 / person)
(t / take-01, ARG0, p6 / policy)
(t / take-01, ARG1, e / effect)
(t / take-01, time, l2 / late)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),plans,plan-01,false), Span(18,19,List(1),need,need-01,false), Span(15,16,List(2),others,other,false), Span(10,11,List(3),campaign,campaign-01,false), Span(9,10,List(4),publicity,publicity,false), Span(7,8,List(5),20041000,2004,false), Span(6,7,List(6),late,late,false), Span(3,4,List(7),policy,policy,false), Span(0,1,List(8),Prior,prior,false)),Map(2 -> other, 5 -> 2004, 8 -> prior, 7 -> policy, 1 -> need-01, 4 -> publicity, 6 -> late, 0 -> plan-01, 3 -> campaign-01),Map(n -> need-01, 2 -> 2004, p2 -> publicity, p -> plan-01, p4 -> prior, l -> late, c -> campaign-01, o -> other, p3 -> policy))),[Ljava.lang.String;@68b32e3e,Annotation([Ljava.lang.String;@bcef303,[Ljava.lang.String;@41709512,[Ljava.lang.String;@42039326),Annotation([Ljava.lang.String;@33308786,[Ljava.lang.String;@4f9a2c08,[Ledu.cmu.lti.nlp.amr.Dependency;@a87f8ec),Annotation([Ljava.lang.String;@5443d039,[Ljava.lang.String;@63787180,[Ljava.lang.String;@7d1cfb8b),Annotation([Ljava.lang.String;@48e92c5c,[Ljava.lang.String;@2e1ef60,[Ledu.cmu.lti.nlp.amr.Entity;@22356acd))
AMR:
(c / campaign-01, ARG1, 2 / 2004)
(c / campaign-01, mod, p2 / publicity)
(l / late, op, 2 / 2004)
(n / need-01, ARG0, o / other)
(n / need-01, ARG1, p / plan-01)
(n / need-01, ARG2, c / campaign-01)
(p / plan-01, ARG1, p4 / prior)
(p4 / prior, op, p3 / policy)

Decoded in 109,338 microseconds
Sentence: The Law to permit such an action was originally approved in 1998 but 1995-2003 President Fernando Henrique Cardoso never put the policy into effect.

mkDayMonthYear(1995-2003,03,20,1995)
NER Entity: (person :name (name :op "Fernando" :op "Henrique" :op "Cardoso"))
mkDayMonthYear(1995-2003,03,20,1995)
Spans:
Span 13-14:  1995-2003 => (date-entity :day 3 :month 20 :year 1995)
Span 11-12:  1998 => (date-entity :year 1998)
Span 6-7:  action => action
Span 9-10:  approved => approve-01
Span 15-18:  Fernando Henrique Cardoso => (person :name (name :op "Cardoso" :op "Henrique" :op "Fernando"))
Span 1-2:  Law => law
Span 8-9:  originally => original
Span 3-4:  permit => permit-01
Span 21-22:  policy => policy
Span 14-15:  President => (have-org-role-91 :ARG2 president)
Span 4-5:  such => such

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 13-14:  1995-2003 => 1995
Oracle Span 11-12:  1998 => (date-entity :year 1998)
Oracle Span 6-7:  action => action
Oracle Span 9-10:  approved => approve-01
Oracle Span 12-13:  but => contrast-01
Oracle Span 23-24:  effect => effect
Oracle Span 15-18:  Fernando Henrique Cardoso => (person :name (name :op "Cardoso" :op "Henrique" :op "Fernando"))
Oracle Span 1-2:  Law => law
Oracle Span 8-9:  originally => original
Oracle Span 3-4:  permit => permit-01
Oracle Span 21-22:  policy => policy
Oracle Span 14-15:  President => (have-org-role-91 :ARG2 president)
Oracle Span 19-20:  put => put-03
Oracle Span 4-5:  such => such

Incorrect span: 1995-2003 => (date-entity :day 3 :month 20 :year 1995)
Missing span: but => contrast-01
Missing span: put => put-03
Missing span: effect => effect
Missing span: 1995-2003 => 1995
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	Law	_	NN	NN	_	10	nsubjpass	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	permit	_	VB	VB	_	2	vmod	_	_
5	such	_	PDT	PDT	_	7	predet	_	_
6	an	_	DT	DT	_	7	det	_	_
7	action	_	NN	NN	_	4	dobj	_	_
8	was	_	VBD	VBD	_	10	auxpass	_	_
9	originally	_	RB	RB	_	10	advmod	_	_
10	approved	_	VBN	VBN	_	0	root	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	1998	_	CD	CD	_	11	pobj	_	_
13	but	_	CC	CC	_	10	cc	_	_
14	1995-2003	_	NNP	NNP	_	18	nn	_	_
15	President	_	NNP	NNP	_	18	nn	_	_
16	Fernando	_	NNP	NNP	_	18	nn	_	_
17	Henrique	_	NNP	NNP	_	18	nn	_	_
18	Cardoso	_	NNP	NNP	_	20	nsubj	_	_
19	never	_	RB	RB	_	20	neg	_	_
20	put	_	VBD	VBD	_	10	conj	_	_
21	the	_	DT	DT	_	22	det	_	_
22	policy	_	NN	NN	_	20	dobj	_	_
23	into	_	IN	IN	_	20	prep	_	_
24	effect	_	NN	NN	_	23	pobj	_	_
25	.	_	.	.	_	10	punct	_	_

Oracle:
(a / approve-01, ARG1, l / law)
(a / approve-01, mod, o / original)
(a / approve-01, time, d / date-entity)
(a2 / action, mod, s / such)
(c / contrast-01, ARG1, a / approve-01)
(c / contrast-01, ARG2, p2 / put-03)
(d / date-entity, year, 1998)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG2, p4 / president)
(n / name, op, "Cardoso")
(n / name, op, "Fernando")
(n / name, op, "Henrique")
(p / permit-01, ARG0, l / law)
(p / permit-01, ARG1, a2 / action)
(p2 / put-03, ARG0, p3 / person)
(p2 / put-03, ARG1, p5 / policy)
(p2 / put-03, ARG2, e2 / effect)
(p3 / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),policy,policy,false), Span(15,18,List(5, 4, 3, 2, 1),Fernando Henrique Cardoso,(person :name (name :op "Cardoso" :op "Henrique" :op "Fernando")),false), Span(14,15,List(7, 6),President,(have-org-role-91 :ARG2 president),false), Span(13,14,List(11, 10, 9, 8),1995-2003,(date-entity :day 3 :month 20 :year 1995),false), Span(11,12,List(13, 12),1998,(date-entity :year 1998),false), Span(9,10,List(14),approved,approve-01,false), Span(8,9,List(15),originally,original,false), Span(6,7,List(16),action,action,false), Span(4,5,List(17),such,such,false), Span(3,4,List(18),permit,permit-01,false), Span(1,2,List(19),Law,law,false)),Map(2 -> name, 5 -> "Fernando", 12 -> date-entity, 15 -> original, 8 -> date-entity, 18 -> permit-01, 7 -> president, 17 -> such, 1 -> person, 4 -> "Henrique", 11 -> 1995, 14 -> approve-01, 6 -> have-org-role-91, 0 -> policy, 9 -> 3, 16 -> action, 19 -> law, 3 -> "Cardoso", 10 -> 20, 13 -> 1998),Map(n -> name, h -> have-org-role-91, 2 -> 20, 12 -> 1998, p2 -> person, s -> such, d -> date-entity, 1 -> 1995, p -> policy, a -> approve-01, p4 -> permit-01, d2 -> date-entity, a2 -> action, l -> law, o -> original, p3 -> president, 3 -> 3))),[Ljava.lang.String;@386f0da3,Annotation([Ljava.lang.String;@39655d3e,[Ljava.lang.String;@34f22f9d,[Ljava.lang.String;@3d1848cc),Annotation([Ljava.lang.String;@7dda48d9,[Ljava.lang.String;@6e4566f1,[Ledu.cmu.lti.nlp.amr.Dependency;@4b6e2263),Annotation([Ljava.lang.String;@344f4dea,[Ljava.lang.String;@1b7c473a,[Ljava.lang.String;@5e4bd84a),Annotation([Ljava.lang.String;@648c94da,[Ljava.lang.String;@2a62b5bc,[Ledu.cmu.lti.nlp.amr.Entity;@53de625d))
AMR:
(a / approve-01, ARG0, p2 / person)
(a / approve-01, ARG1, l / law)
(a / approve-01, time, d2 / date-entity)
(a / approve-01, time, o / original)
(a2 / action, mod, s / such)
(d / date-entity, day, 3 / 3)
(d / date-entity, month, 2 / 20)
(d / date-entity, year, 1 / 1995)
(d2 / date-entity, year, 12 / 1998)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, d / date-entity)
(h / have-org-role-91, ARG2, p3 / president)
(n / name, op, "Cardoso")
(n / name, op, "Fernando")
(n / name, op, "Henrique")
(p / policy, poss, p2 / person)
(p2 / person, name, n / name)
(p4 / permit-01, ARG0, l / law)
(p4 / permit-01, ARG1, a2 / action)

Decoded in 288,907 microseconds
Sentence: The United States dissuaded Cardoso from signing the decree out of concern that the accidental downing of civilian aircraft could expose the US government and companies to lawsuits.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "Cardoso"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 18-19:  aircraft => aircraft
Span 17-18:  civilian => civilian
Span 25-26:  companies => company
Span 11-12:  concern => concern-01
Span 19-20:  could => possible
Span 8-9:  decree => decree
Span 1-3:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 14-15:  accidental => accident
Oracle Span 18-19:  aircraft => aircraft
Oracle Span 24-25:  and => and
Oracle Span 4-5:  Cardoso => (person :name (name :op "Cardoso"))
Oracle Span 17-18:  civilian => civilian
Oracle Span 25-26:  companies => company
Oracle Span 11-12:  concern => concern-01
Oracle Span 19-20:  could => possible
Oracle Span 8-9:  decree => decree
Oracle Span 3-4:  dissuaded => dissuade-01
Oracle Span 15-16:  downing => down-01
Oracle Span 20-21:  expose => expose-01
Oracle Span 23-24:  government => (government-organization :ARG0-of govern-01)
Oracle Span 27-28:  lawsuits => lawsuit
Oracle Span 6-7:  signing => sign-01
Oracle Span 1-3:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Cardoso => (person :name (name :op "Cardoso"))
Missing span: dissuaded => dissuade-01
Missing span: expose => expose-01
Missing span: lawsuits => lawsuit
Missing span: and => and
Missing span: downing => down-01
Missing span: signing => sign-01
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: accidental => accident
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	United	_	NNP	NNP	_	3	nn	_	_
3	States	_	NNPS	NNPS	_	4	nsubj	_	_
4	dissuaded	_	VBD	VBD	_	0	root	_	_
5	Cardoso	_	NNP	NNP	_	4	dobj	_	_
6	from	_	IN	IN	_	4	prep	_	_
7	signing	_	VBG	VBG	_	6	pcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	decree	_	NN	NN	_	7	dobj	_	_
10	out	_	RP	RP	_	7	prt	_	_
11	of	_	IN	IN	_	7	prep	_	_
12	concern	_	NN	NN	_	11	pobj	_	_
13	that	_	IN	IN	_	21	mark	_	_
14	the	_	DT	DT	_	16	det	_	_
15	accidental	_	JJ	JJ	_	16	amod	_	_
16	downing	_	NN	NN	_	21	nsubj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	civilian	_	JJ	JJ	_	19	amod	_	_
19	aircraft	_	NN	NN	_	17	pobj	_	_
20	could	_	MD	MD	_	21	aux	_	_
21	expose	_	VB	VB	_	4	ccomp	_	_
22	the	_	DT	DT	_	24	det	_	_
23	US	_	NNP	NNP	_	24	nn	_	_
24	government	_	NN	NN	_	21	dobj	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	companies	_	NNS	NNS	_	24	conj	_	_
27	to	_	TO	TO	_	21	prep	_	_
28	lawsuits	_	NNS	NNS	_	27	pobj	_	_
29	.	_	.	.	_	4	punct	_	_

Oracle:
(a / aircraft, mod, c4 / civilian)
(a3 / and, op, c5 / company)
(a3 / and, op, g / government-organization)
(c / country, name, n / name)
(c3 / concern-01, ARG0, p2 / possible)
(c3 / concern-01, ARG1, c / country)
(d / dissuade-01, ARG0, c / country)
(d / dissuade-01, ARG1, p / person)
(d / dissuade-01, ARG2, s / sign-01)
(d3 / down-01, ARG1, a / aircraft)
(d3 / down-01, mod, a2 / accident)
(e / expose-01, ARG0, d3 / down-01)
(e / expose-01, ARG1, a3 / and)
(e / expose-01, ARG2, l / lawsuit)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Cardoso")
(p / person, name, n2 / name)
(p2 / possible, domain, e / expose-01)
(s / sign-01, ARG0, p / person)
(s / sign-01, ARG1, d2 / decree)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),companies,company,false), Span(19,20,List(1),could,possible,false), Span(18,19,List(2),aircraft,aircraft,false), Span(17,18,List(3),civilian,civilian,false), Span(11,12,List(4),concern,concern-01,false), Span(8,9,List(5),decree,decree,false), Span(1,3,List(9, 8, 7, 6),United States,(country :name (name :op "United" :op "States")),false)),Map(2 -> aircraft, 5 -> decree, 8 -> "United", 7 -> name, 1 -> possible, 4 -> concern-01, 6 -> country, 9 -> "States", 0 -> company, 3 -> civilian),Map(n -> name, c4 -> country, d -> decree, p -> possible, c3 -> concern-01, a -> aircraft, c -> company, c2 -> civilian))),[Ljava.lang.String;@535779e4,Annotation([Ljava.lang.String;@53fd0d10,[Ljava.lang.String;@6c0d9d86,[Ljava.lang.String;@4ce1d6d0),Annotation([Ljava.lang.String;@24111ef1,[Ljava.lang.String;@1f3f02ee,[Ledu.cmu.lti.nlp.amr.Dependency;@1fde5d22),Annotation([Ljava.lang.String;@5dcb4f5f,[Ljava.lang.String;@71812481,[Ljava.lang.String;@16ce702d),Annotation([Ljava.lang.String;@7b94089b,[Ljava.lang.String;@7ca20101,[Ledu.cmu.lti.nlp.amr.Entity;@47f9738))
AMR:
(a / aircraft, mod, c2 / civilian)
(c / company, op, c3 / concern-01)
(c / company, poss, c4 / country)
(c3 / concern-01, ARG0, p / possible)
(c3 / concern-01, ARG1, d / decree)
(c3 / concern-01, ARG2, a / aircraft)
(c4 / country, name, n / name)
(n / name, op, "States")
(n / name, op, "United")

Decoded in 195,044 microseconds
Sentence: 20010400 the United States reduced previous support for operations targeting drug-running aircraft when a Peruvian jet shot down a small plane misidentified as a drug carrier and killed an American missionary and her child.

mkDayMonthYear(20010400,00,04,2001)
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "American"))
mkDayMonthYear(20010400,00,04,2001)
Spans:
Span 0-1:  20010400 => (date-entity :day 0 :month 4 :year 2001)
Span 13-14:  aircraft => aircraft
Span 27-28:  carrier => carry-01
Span 35-36:  child => child
Span 26-27:  drug => drug
Span 10-11:  drug => drug
Span 17-18:  jet => jet
Span 29-30:  killed => kill-01
Span 22-23:  plane => plane
Span 5-6:  previous => previous
Span 4-5:  reduced => reduce-01
Span 21-22:  small => small
Span 6-7:  support => support-01
Span 9-10:  targeting => target-01
Span 2-4:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 0-1:  20010400 => 2001
Oracle Span 13-14:  aircraft => aircraft
Oracle Span 28-29:  and => and
Oracle Span 33-34:  and => and
Oracle Span 27-28:  carrier => (thing :ARG0-of carry-01)
Oracle Span 35-36:  child => child
Oracle Span 10-11:  drug => drug
Oracle Span 26-27:  drug => drug
Oracle Span 17-18:  jet => jet
Oracle Span 29-30:  killed => kill-01
Oracle Span 23-24:  misidentified => misidentify-00
Oracle Span 32-33:  missionary => missionary
Oracle Span 8-9:  operations => operation
Oracle Span 16-17:  Peruvian => (country :name (name :op "Peru"))
Oracle Span 22-23:  plane => plane
Oracle Span 5-6:  previous => previous
Oracle Span 4-5:  reduced => reduce-01
Oracle Span 12-13:  running => run-08
Oracle Span 18-19:  shot => shoot-05
Oracle Span 21-22:  small => small
Oracle Span 6-7:  support => support-01
Oracle Span 9-10:  targeting => target-01
Oracle Span 2-4:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: carrier => carry-01
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: 20010400 => (date-entity :day 0 :month 4 :year 2001)
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Peruvian => (country :name (name :op "Peru"))
Missing span: and => and
Missing span: and => and
Missing span: missionary => missionary
Missing span: shot => shoot-05
Missing span: operations => operation
Missing span: running => run-08
Missing span: 20010400 => 2001
Missing span: misidentified => misidentify-00
Missing span: carrier => (thing :ARG0-of carry-01)
Dependencies:
1	20010400	_	CD	CD	_	5	nsubj	_	_
2	the	_	DT	DT	_	4	det	_	_
3	United	_	NNP	NNP	_	4	nn	_	_
4	States	_	NNPS	NNPS	_	1	dep	_	_
5	reduced	_	VBD	VBD	_	0	root	_	_
6	previous	_	JJ	JJ	_	7	amod	_	_
7	support	_	NN	NN	_	5	dobj	_	_
8	for	_	IN	IN	_	5	prep	_	_
9	operations	_	NNS	NNS	_	8	pobj	_	_
10	targeting	_	VBG	VBG	_	9	vmod	_	_
11	drug-running	_	JJ	JJ	_	12	amod	_	_
12	aircraft	_	NN	NN	_	10	dobj	_	_
13	when	_	WRB	WRB	_	17	advmod	_	_
14	a	_	DT	DT	_	16	det	_	_
15	Peruvian	_	JJ	JJ	_	16	amod	_	_
16	jet	_	NN	NN	_	17	nsubj	_	_
17	shot	_	VBD	VBD	_	10	advcl	_	_
18	down	_	RP	RP	_	17	prt	_	_
19	a	_	DT	DT	_	21	det	_	_
20	small	_	JJ	JJ	_	21	amod	_	_
21	plane	_	NN	NN	_	17	dobj	_	_
22	misidentified	_	VBN	VBN	_	21	vmod	_	_
23	as	_	IN	IN	_	22	prep	_	_
24	a	_	DT	DT	_	26	det	_	_
25	drug	_	NN	NN	_	26	nn	_	_
26	carrier	_	NN	NN	_	23	pobj	_	_
27	and	_	CC	CC	_	5	cc	_	_
28	killed	_	VBD	VBD	_	5	conj	_	_
29	an	_	DT	DT	_	31	det	_	_
30	American	_	JJ	JJ	_	31	amod	_	_
31	missionary	_	NN	NN	_	28	dobj	_	_
32	and	_	CC	CC	_	31	cc	_	_
33	her	_	PRP$	PRP$	_	34	poss	_	_
34	child	_	NN	NN	_	31	conj	_	_
35	.	_	.	.	_	5	punct	_	_

Oracle:
(a2 / and, op, k / kill-01)
(a2 / and, op, s2 / shoot-05)
(a3 / and, op, c4 / child)
(a3 / and, op, m2 / missionary)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / carry-01, ARG0, t2 / thing)
(c3 / carry-01, ARG1, d3 / drug)
(c4 / child, poss, m2 / missionary)
(j / jet, mod, c2 / country)
(k / kill-01, ARG0, j / jet)
(k / kill-01, ARG1, a3 / and)
(m / misidentify-00, ARG1, p2 / plane)
(m / misidentify-00, ARG2, t2 / thing)
(m2 / missionary, mod, c / country)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Peru")
(p2 / plane, mod, s3 / small)
(r / reduce-01, ARG0, c / country)
(r / reduce-01, ARG1, s / support-01)
(r / reduce-01, time, a2 / and)
(r2 / run-08, ARG0, a / aircraft)
(r2 / run-08, ARG1, d2 / drug)
(s / support-01, ARG0, c / country)
(s / support-01, ARG1, o / operation)
(s / support-01, time, p / previous)
(s2 / shoot-05, ARG0, j / jet)
(s2 / shoot-05, ARG1, p2 / plane)
(t / target-01, ARG0, o / operation)
(t / target-01, ARG1, a / aircraft)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),child,child,false), Span(29,30,List(1),killed,kill-01,false), Span(27,28,List(2),carrier,carry-01,false), Span(26,27,List(3),drug,drug,false), Span(22,23,List(4),plane,plane,false), Span(21,22,List(5),small,small,false), Span(17,18,List(6),jet,jet,false), Span(13,14,List(7),aircraft,aircraft,false), Span(10,11,List(8),drug,drug,false), Span(9,10,List(9),targeting,target-01,false), Span(6,7,List(10),support,support-01,false), Span(5,6,List(11),previous,previous,false), Span(4,5,List(12),reduced,reduce-01,false), Span(2,4,List(16, 15, 14, 13),United States,(country :name (name :op "United" :op "States")),false), Span(0,1,List(20, 19, 18, 17),20010400,(date-entity :day 0 :month 4 :year 2001),false)),Map(2 -> carry-01, 5 -> small, 12 -> reduce-01, 15 -> "United", 8 -> drug, 18 -> 0, 7 -> aircraft, 17 -> date-entity, 1 -> kill-01, 4 -> plane, 11 -> previous, 14 -> name, 20 -> 2001, 6 -> jet, 0 -> child, 9 -> target-01, 16 -> "States", 19 -> 4, 3 -> drug, 10 -> support-01, 13 -> country),Map(n -> name, 2 -> 2001, s2 -> support-01, k -> kill-01, t -> target-01, d3 -> date-entity, p2 -> previous, j -> jet, s -> small, d -> drug, p -> plane, 4 -> 4, c3 -> country, a -> aircraft, d2 -> drug, r -> reduce-01, c -> child, 0 -> 0, c2 -> carry-01))),[Ljava.lang.String;@6155d082,Annotation([Ljava.lang.String;@3a5ecce3,[Ljava.lang.String;@561868a0,[Ljava.lang.String;@2ea6e30c),Annotation([Ljava.lang.String;@6138e79a,[Ljava.lang.String;@2dcd168a,[Ledu.cmu.lti.nlp.amr.Dependency;@388526fb),Annotation([Ljava.lang.String;@21a21c64,[Ljava.lang.String;@7803bfd,[Ljava.lang.String;@42bc14c1),Annotation([Ljava.lang.String;@531f4093,[Ljava.lang.String;@62ef27a8,[Ledu.cmu.lti.nlp.amr.Entity;@6436a7db))
AMR:
(c2 / carry-01, ARG0, c / child)
(c2 / carry-01, ARG1, d / drug)
(c3 / country, name, n / name)
(d3 / date-entity, day, 0 / 0)
(d3 / date-entity, month, 4 / 4)
(d3 / date-entity, year, 2 / 2001)
(k / kill-01, ARG0, d2 / drug)
(k / kill-01, ARG1, s2 / support-01)
(k / kill-01, ARG2, p / plane)
(n / name, op, "States")
(n / name, op, "United")
(p / plane, mod, s / small)
(r / reduce-01, ARG0, c3 / country)
(r / reduce-01, ARG1, s2 / support-01)
(r / reduce-01, time, d3 / date-entity)
(s2 / support-01, ARG1, t / target-01)
(s2 / support-01, ARG2, c2 / carry-01)
(s2 / support-01, time, p2 / previous)
(t / target-01, ARG0, j / jet)
(t / target-01, ARG1, a / aircraft)

Decoded in 788,983 microseconds
Sentence: Relatives of the victims sued the US government and won a settlement due to the Government's provision of intelligence and technical support to the operation.

NER Entity: (country :name (name :op "US"))
Spans:
Span 19-20:  intelligence => intelligence
Span 25-26:  operation => operation
Span 0-1:  Relatives => relative
Span 4-5:  sued => sue-01
Span 22-23:  support => support-01
Span 21-22:  technical => technical
Span 3-4:  victims => victim
Span 9-10:  won => win-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 20-21:  and => and
Oracle Span 7-8:  government => government-organization
Oracle Span 15-16:  Government => govern-01
Oracle Span 19-20:  intelligence => intelligence
Oracle Span 25-26:  operation => operation
Oracle Span 17-18:  provision => provide-01
Oracle Span 0-1:  Relatives => relative
Oracle Span 11-12:  settlement => settle-02
Oracle Span 4-5:  sued => sue-01
Oracle Span 22-23:  support => support-01
Oracle Span 21-22:  technical => technical
Oracle Span 6-7:  US => (country :name (name :op "US"))
Oracle Span 3-4:  victims => victim
Oracle Span 9-10:  won => win-01

Missing span: US => (country :name (name :op "US"))
Missing span: and => and
Missing span: and => and
Missing span: provision => provide-01
Missing span: settlement => settle-02
Missing span: government => government-organization
Missing span: Government => govern-01
Dependencies:
1	Relatives	_	NNS	NNS	_	5	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	4	det	_	_
4	victims	_	NNS	NNS	_	2	pobj	_	_
5	sued	_	VBD	VBD	_	0	root	_	_
6	the	_	DT	DT	_	8	det	_	_
7	US	_	NNP	NNP	_	8	nn	_	_
8	government	_	NN	NN	_	5	dobj	_	_
9	and	_	CC	CC	_	5	cc	_	_
10	won	_	VBD	VBD	_	5	conj	_	_
11	a	_	DT	DT	_	12	det	_	_
12	settlement	_	NN	NN	_	10	dobj	_	_
13	due	_	JJ	JJ	_	14	mwe	_	_
14	to	_	TO	TO	_	10	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	Government	_	NN	NN	_	18	poss	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	provision	_	NN	NN	_	14	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	intelligence	_	NN	NN	_	23	nn	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	technical	_	JJ	JJ	_	20	conj	_	_
23	support	_	NN	NN	_	19	pobj	_	_
24	to	_	TO	TO	_	10	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	operation	_	NN	NN	_	24	pobj	_	_
27	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, s / sue-01)
(a / and, op, w / win-01)
(a2 / and, op, i / intelligence)
(a2 / and, op, s3 / support-01)
(c / country, name, n / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "US")
(p / provide-01, ARG0, g / government-organization)
(p / provide-01, ARG1, a2 / and)
(p / provide-01, ARG2, o / operation)
(r / relative, poss, v / victim)
(s / sue-01, ARG0, r / relative)
(s / sue-01, ARG1, g / government-organization)
(s3 / support-01, mod, t / technical)
(w / win-01, ARG0, r / relative)
(w / win-01, ARG1, s2 / settle-02)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),operation,operation,false), Span(22,23,List(1),support,support-01,false), Span(21,22,List(2),technical,technical,false), Span(19,20,List(3),intelligence,intelligence,false), Span(9,10,List(4),won,win-01,false), Span(4,5,List(5),sued,sue-01,false), Span(3,4,List(6),victims,victim,false), Span(0,1,List(7),Relatives,relative,false)),Map(2 -> technical, 5 -> sue-01, 7 -> relative, 1 -> support-01, 4 -> win-01, 6 -> victim, 0 -> operation, 3 -> intelligence),Map(w -> win-01, s2 -> sue-01, t -> technical, s -> support-01, v -> victim, r -> relative, i -> intelligence, o -> operation))),[Ljava.lang.String;@460ebd80,Annotation([Ljava.lang.String;@6f3c660a,[Ljava.lang.String;@74f5ce22,[Ljava.lang.String;@25aca718),Annotation([Ljava.lang.String;@16fdec90,[Ljava.lang.String;@1afdd473,[Ledu.cmu.lti.nlp.amr.Dependency;@40238dd0),Annotation([Ljava.lang.String;@7776ab,[Ljava.lang.String;@79179359,[Ljava.lang.String;@dbd8e44),Annotation([Ljava.lang.String;@51acdf2e,[Ljava.lang.String;@6a55299e,[Ledu.cmu.lti.nlp.amr.Entity;@2f1de2d6))
AMR:
(i / intelligence, op, s2 / sue-01)
(s / support-01, ARG1, o / operation)
(s / support-01, mod, t / technical)
(s2 / sue-01, ARG0, r / relative)
(s2 / sue-01, ARG1, v / victim)
(w / win-01, ARG0, r / relative)
(w / win-01, ARG1, o / operation)

Decoded in 157,851 microseconds
Sentence: A US State Department official stated --

NER Entity: (organization :name (name :op "US" :op "State" :op "Department"))
Spans:
Span 1-4:  US State Department => (organization :name (name :op "US" :op "State" :op "Department"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  official => (have-org-role-91 :ARG2 official)
Oracle Span 2-4:  State Department => (government-organization :name (name :op "Department" :op "State"))
Oracle Span 5-6:  stated => state-01
Oracle Span 1-2:  US => (country :name (name :op "US"))

Extra span: US State Department => (organization :name (name :op "US" :op "State" :op "Department"))
Missing span: State Department => (government-organization :name (name :op "Department" :op "State"))
Missing span: US => (country :name (name :op "US"))
Missing span: stated => state-01
Missing span: official => (have-org-role-91 :ARG2 official)
Dependencies:
1	A	_	DT	DT	_	5	det	_	_
2	US	_	NNP	NNP	_	5	nn	_	_
3	State	_	NNP	NNP	_	5	nn	_	_
4	Department	_	NNP	NNP	_	5	nn	_	_
5	official	_	NN	NN	_	0	root	_	_
6	stated	_	VBN	VBN	_	5	vmod	_	_
7	--	_	:	:	_	5	punct	_	_

Oracle:
(c / country, name, n2 / name)
(g / government-organization, mod, c / country)
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Department")
(n / name, op, "State")
(n2 / name, op, "US")

Input(Some(Graph(null,ArrayBuffer(Span(1,4,List(4, 3, 2, 1, 0),US State Department,(organization :name (name :op "US" :op "State" :op "Department")),false)),Map(2 -> "US", 1 -> name, 4 -> "Department", 0 -> organization, 3 -> "State"),Map(n -> name, o -> organization))),[Ljava.lang.String;@4eb386df,Annotation([Ljava.lang.String;@79517588,[Ljava.lang.String;@3a0baae5,[Ljava.lang.String;@7ac0e420),Annotation([Ljava.lang.String;@289710d9,[Ljava.lang.String;@5a18cd76,[Ledu.cmu.lti.nlp.amr.Dependency;@3da30852),Annotation([Ljava.lang.String;@403f0a22,[Ljava.lang.String;@503ecb24,[Ljava.lang.String;@4c51cf28),Annotation([Ljava.lang.String;@6995bf68,[Ljava.lang.String;@5143c662,[Ledu.cmu.lti.nlp.amr.Entity;@77825085))
AMR:
(n / name, op, "Department")
(n / name, op, "State")
(n / name, op, "US")
(o / organization, name, n / name)

Decoded in 13,165 microseconds
Sentence: US law may forbid assistance to countries that implement shoot-down laws under certain conditions.

NER Entity: (country :name (name :op "US"))
Spans:
Span 4-5:  assistance => assist-01
Span 14-15:  certain => certain
Span 6-7:  countries => country
Span 8-9:  implement => implement-01
Span 1-2:  law => law
Span 12-13:  laws => law
Span 2-3:  may => possible
Span 9-10:  shoot => shoot-05

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 4-5:  assistance => assist-01
Oracle Span 14-15:  certain => certain
Oracle Span 15-16:  conditions => condition-01
Oracle Span 6-7:  countries => country
Oracle Span 3-4:  forbid => forbid-01
Oracle Span 8-9:  implement => implement-01
Oracle Span 1-2:  law => law
Oracle Span 12-13:  laws => law
Oracle Span 2-3:  may => possible
Oracle Span 9-10:  shoot => shoot-05
Oracle Span 0-1:  US => (country :name (name :op "US"))

Missing span: US => (country :name (name :op "US"))
Missing span: conditions => condition-01
Missing span: forbid => forbid-01
Dependencies:
1	US	_	NNP	NNP	_	2	nn	_	_
2	law	_	NN	NN	_	4	nsubj	_	_
3	may	_	MD	MD	_	4	aux	_	_
4	forbid	_	VB	VB	_	0	root	_	_
5	assistance	_	NN	NN	_	4	dobj	_	_
6	to	_	TO	TO	_	4	prep	_	_
7	countries	_	NNS	NNS	_	6	pobj	_	_
8	that	_	WDT	WDT	_	9	nsubj	_	_
9	implement	_	VB	VB	_	7	rcmod	_	_
10	shoot-down	_	JJ	JJ	_	11	amod	_	_
11	laws	_	NNS	NNS	_	9	dobj	_	_
12	under	_	IN	IN	_	9	prep	_	_
13	certain	_	JJ	JJ	_	14	amod	_	_
14	conditions	_	NNS	NNS	_	12	pobj	_	_
15	.	_	.	.	_	4	punct	_	_

Oracle:
(a / assist-01, ARG1, c2 / country)
(c / country, name, n / name)
(c3 / condition-01, ARG1, p / possible)
(f / forbid-01, ARG0, l / law)
(f / forbid-01, ARG1, a / assist-01)
(i / implement-01, ARG0, c2 / country)
(i / implement-01, ARG1, l2 / law)
(l / law, mod, c / country)
(l2 / law, mod, s / shoot-05)
(n / name, op, "US")
(p / possible, domain, f / forbid-01)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),certain,certain,false), Span(12,13,List(1),laws,law,false), Span(9,10,List(2),shoot,shoot-05,false), Span(8,9,List(3),implement,implement-01,false), Span(6,7,List(4),countries,country,false), Span(4,5,List(5),assistance,assist-01,false), Span(2,3,List(6),may,possible,false), Span(1,2,List(7),law,law,false)),Map(2 -> shoot-05, 5 -> assist-01, 7 -> law, 1 -> law, 4 -> country, 6 -> possible, 0 -> certain, 3 -> implement-01),Map(s -> shoot-05, p -> possible, a -> assist-01, l2 -> law, i -> implement-01, l -> law, c -> certain, c2 -> country))),[Ljava.lang.String;@3568f9d2,Annotation([Ljava.lang.String;@71c27ee8,[Ljava.lang.String;@3e7dd664,[Ljava.lang.String;@5b1ebf56),Annotation([Ljava.lang.String;@294a6b8e,[Ljava.lang.String;@4b1d6571,[Ledu.cmu.lti.nlp.amr.Dependency;@1b835480),Annotation([Ljava.lang.String;@3549bca9,[Ljava.lang.String;@4f25b795,[Ljava.lang.String;@6fb365ed),Annotation([Ljava.lang.String;@6e950bcf,[Ljava.lang.String;@16414e40,[Ledu.cmu.lti.nlp.amr.Entity;@74bada02))
AMR:
(a / assist-01, ARG0, l2 / law)
(a / assist-01, ARG1, c2 / country)
(c / certain, op, a / assist-01)
(i / implement-01, ARG0, c2 / country)
(i / implement-01, ARG1, l / law)
(p / possible, domain, a / assist-01)
(s / shoot-05, ARG1, l / law)

Decoded in 138,496 microseconds
Sentence: The US agrees with the Brazilian assessment that the threat posed by drug traffickers is both very serious and increasing.

NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 6-7:  assessment => assess-01
Span 15-16:  both => both
Span 5-6:  Brazilian => (country :name (name :op "Brazil"))
Span 12-13:  drug => drug
Span 19-20:  increasing => increase-01
Span 17-18:  serious => serious
Span 13-14:  traffickers => (person :ARG0-of traffic-00)
Span 16-17:  very => very

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 2-3:  agrees => agree-01
Oracle Span 18-19:  and => and
Oracle Span 6-7:  assessment => assess-01
Oracle Span 5-6:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 12-13:  drug => drug
Oracle Span 19-20:  increasing => increase-01
Oracle Span 17-18:  serious => serious
Oracle Span 9-10:  threat => (thing :ARG1-of threaten-01)
Oracle Span 13-14:  traffickers => (person :ARG0-of traffic-00)
Oracle Span 1-2:  US => (country :name (name :op "US"))
Oracle Span 16-17:  very => very

Extra span: both => both
Missing span: US => (country :name (name :op "US"))
Missing span: agrees => agree-01
Missing span: and => and
Missing span: threat => (thing :ARG1-of threaten-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	US	_	NNP	NNP	_	3	nsubj	_	_
3	agrees	_	VBZ	VBZ	_	0	root	_	_
4	with	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	Brazilian	_	JJ	JJ	_	7	amod	_	_
7	assessment	_	NN	NN	_	4	pobj	_	_
8	that	_	IN	IN	_	18	mark	_	_
9	the	_	DT	DT	_	10	det	_	_
10	threat	_	NN	NN	_	18	nsubj	_	_
11	posed	_	VBN	VBN	_	10	vmod	_	_
12	by	_	IN	IN	_	11	prep	_	_
13	drug	_	NN	NN	_	14	nn	_	_
14	traffickers	_	NNS	NNS	_	12	pobj	_	_
15	is	_	VBZ	VBZ	_	18	cop	_	_
16	both	_	DT	DT	_	18	det	_	_
17	very	_	RB	RB	_	18	advmod	_	_
18	serious	_	JJ	JJ	_	3	ccomp	_	_
19	and	_	CC	CC	_	3	cc	_	_
20	increasing	_	VBG	VBG	_	3	conj	_	_
21	.	_	.	.	_	3	punct	_	_

Oracle:
(a / agree-01, ARG0, c / country)
(a / agree-01, ARG1, a2 / assess-01)
(a2 / assess-01, ARG0, c2 / country)
(a2 / assess-01, ARG2, a3 / and)
(a3 / and, op, i / increase-01)
(a3 / and, op, s / serious)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(i / increase-01, ARG1, t / thing)
(n / name, op, "US")
(n2 / name, op, "Brazil")
(s / serious, degree, v / very)
(s / serious, domain, t / thing)
(t2 / threaten-01, ARG0, p / person)
(t2 / threaten-01, ARG1, t / thing)
(t3 / traffic-00, ARG0, p / person)
(t3 / traffic-00, ARG1, d / drug)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),increasing,increase-01,false), Span(17,18,List(1),serious,serious,false), Span(16,17,List(2),very,very,false), Span(15,16,List(3),both,both,false), Span(13,14,List(5, 4),traffickers,(person :ARG0-of traffic-00),false), Span(12,13,List(6),drug,drug,false), Span(6,7,List(7),assessment,assess-01,false), Span(5,6,List(10, 9, 8),Brazilian,(country :name (name :op "Brazil")),false)),Map(2 -> very, 5 -> traffic-00, 8 -> country, 7 -> assess-01, 1 -> serious, 4 -> person, 6 -> drug, 9 -> name, 0 -> increase-01, 10 -> "Brazil", 3 -> both),Map(n -> name, t -> traffic-00, b -> both, s -> serious, d -> drug, v -> very, p -> person, a -> assess-01, i -> increase-01, c -> country))),[Ljava.lang.String;@525575,Annotation([Ljava.lang.String;@46dffdc3,[Ljava.lang.String;@5a709816,[Ljava.lang.String;@78383390),Annotation([Ljava.lang.String;@6ad3381f,[Ljava.lang.String;@53dbe163,[Ledu.cmu.lti.nlp.amr.Dependency;@db57326),Annotation([Ljava.lang.String;@34a875b3,[Ljava.lang.String;@4748a0f9,[Ljava.lang.String;@4b14918a),Annotation([Ljava.lang.String;@6d1ef78d,[Ljava.lang.String;@1a6c1270,[Ledu.cmu.lti.nlp.amr.Entity;@18a136ac))
AMR:
(a / assess-01, ARG1, c / country)
(a / assess-01, ARG2, d / drug)
(b / both, mod, v / very)
(c / country, name, n / name)
(i / increase-01, ARG1, a / assess-01)
(i / increase-01, ARG3, s / serious)
(n / name, op, "Brazil")
(s / serious, degree, v / very)
(t / traffic-00, ARG0, p / person)
(t / traffic-00, ARG1, d / drug)

Decoded in 128,448 microseconds
Sentence: The US government has consulted the Brazilian Government about the provisions of US law.

NER Entity: (country :name (name :op "The" :op "US"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 6-7:  Brazilian => (country :name (name :op "Brazil"))
Span 4-5:  consulted => consult-01
Span 13-14:  law => law
Span 10-11:  provisions => provision
Span 0-2:  The US => (country :name (name :op "The" :op "US"))

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 6-7:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 4-5:  consulted => consult-01
Oracle Span 2-3:  government => government-organization
Oracle Span 7-8:  Government => govern-01
Oracle Span 13-14:  law => law
Oracle Span 10-11:  provisions => provision
Oracle Span 1-2:  US => (country :name (name :op "US"))

Extra span: The US => (country :name (name :op "The" :op "US"))
Missing span: US => (country :name (name :op "US"))
Missing span: government => government-organization
Missing span: Government => govern-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	US	_	NNP	NNP	_	3	nn	_	_
3	government	_	NN	NN	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	consulted	_	VBN	VBN	_	0	root	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Brazilian	_	JJ	JJ	_	8	amod	_	_
8	Government	_	NN	NN	_	5	dobj	_	_
9	about	_	IN	IN	_	5	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	provisions	_	NNS	NNS	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	US	_	NNP	NNP	_	14	nn	_	_
14	law	_	NN	NN	_	12	pobj	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(c / consult-01, ARG1, g3 / government-organization)
(c / consult-01, ARG2, p / provision)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c3 / country)
(l / law, mod, c / consult-01)
(n / name, op, "US")
(n2 / name, op, "Brazil")
(p / provision, mod, l / law)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),law,law,false), Span(10,11,List(1),provisions,provision,false), Span(6,7,List(4, 3, 2),Brazilian,(country :name (name :op "Brazil")),false), Span(4,5,List(5),consulted,consult-01,false), Span(0,2,List(9, 8, 7, 6),The US,(country :name (name :op "The" :op "US")),false)),Map(2 -> country, 5 -> consult-01, 8 -> "The", 7 -> name, 1 -> provision, 4 -> "Brazil", 6 -> country, 9 -> "US", 0 -> law, 3 -> name),Map(n -> name, p -> provision, c3 -> country, c -> country, l -> law, n2 -> name, c2 -> consult-01))),[Ljava.lang.String;@77d67cf3,Annotation([Ljava.lang.String;@6dee4f1b,[Ljava.lang.String;@176b3f44,[Ljava.lang.String;@6ee6f53),Annotation([Ljava.lang.String;@421bba99,[Ljava.lang.String;@5d12a356,[Ledu.cmu.lti.nlp.amr.Dependency;@134d26af),Annotation([Ljava.lang.String;@66ac5762,[Ljava.lang.String;@797cf65c,[Ljava.lang.String;@31bcf236),Annotation([Ljava.lang.String;@4b3ed2f0,[Ljava.lang.String;@4fad9bb2,[Ledu.cmu.lti.nlp.amr.Entity;@517d4a0d))
AMR:
(c / country, name, n / name)
(c / country, op, l / law)
(c2 / consult-01, ARG1, c3 / country)
(c2 / consult-01, time, p / provision)
(c3 / country, name, n2 / name)
(n / name, op, "Brazil")
(n2 / name, op, "The")
(n2 / name, op, "US")
(p / provision, mod, l / law)

Decoded in 66,034 microseconds
Sentence: Brazilian Defense Minister Jose Viegas stated that Brazil has encountered difficulties in securing US support for the plan but recent bilateral talks led to certainty that the decree would be accepted by the US government without exposing Brazil to commercial sanctions.

NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (person :name (name :op "Jose" :op "Viegas"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 30-31:  accepted => accept-01
Span 20-21:  bilateral => bilateral
Span 37-38:  Brazil => (country :name (name :op "Brazil"))
Span 7-8:  Brazil => (country :name (name :op "Brazil"))
Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Span 24-25:  certainty => certain
Span 39-40:  commercial => commerce
Span 27-28:  decree => decree
Span 10-11:  difficulties => difficulty
Span 9-10:  encountered => encounter-01
Span 3-5:  Jose Viegas => (person :name (name :op "Jose" :op "Viegas"))
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 19-20:  recent => recent
Span 12-13:  securing => secure-02
Span 14-15:  support => support-01
Span 21-22:  talks => talk-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 30-31:  accepted => accept-01
Oracle Span 20-21:  bilateral => bilateral
Oracle Span 7-8:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 18-19:  but => contrast-01
Oracle Span 24-25:  certainty => certainty
Oracle Span 39-40:  commercial => commerce
Oracle Span 27-28:  decree => decree
Oracle Span 1-2:  Defense => defense
Oracle Span 10-11:  difficulties => difficulty
Oracle Span 9-10:  encountered => encounter-01
Oracle Span 36-37:  exposing => expose-01
Oracle Span 34-35:  government => (government-organization :ARG0-of govern-01)
Oracle Span 8-9:  has => have-org-role-91
Oracle Span 3-5:  Jose Viegas => (person :name (name :op "Viegas" :op "Jose"))
Oracle Span 22-23:  led => lead-03
Oracle Span 2-3:  Minister => minister
Oracle Span 17-18:  plan => plan
Oracle Span 19-20:  recent => recent
Oracle Span 40-41:  sanctions => sanction-02
Oracle Span 12-13:  securing => secure-01
Oracle Span 5-6:  stated => state-01
Oracle Span 14-15:  support => support-01
Oracle Span 21-22:  talks => talk-01
Oracle Span 13-14:  US => (country :name (name :op "US"))

Extra span: Brazil => (country :name (name :op "Brazil"))
Incorrect span: certainty => certain
Incorrect span: securing => secure-02
Incorrect span: Jose Viegas => (person :name (name :op "Jose" :op "Viegas"))
Incorrect span: Minister => (have-org-role-91 :ARG2 minister)
Extra span: Brazilian => (country :name (name :op "Brazil"))
Missing span: Jose Viegas => (person :name (name :op "Viegas" :op "Jose"))
Missing span: US => (country :name (name :op "US"))
Missing span: stated => state-01
Missing span: but => contrast-01
Missing span: led => lead-03
Missing span: certainty => certainty
Missing span: exposing => expose-01
Missing span: sanctions => sanction-02
Missing span: securing => secure-01
Missing span: plan => plan
Missing span: Minister => minister
Missing span: Defense => defense
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: has => have-org-role-91
Dependencies:
1	Brazilian	_	JJ	JJ	_	5	amod	_	_
2	Defense	_	NNP	NNP	_	5	nn	_	_
3	Minister	_	NNP	NNP	_	5	nn	_	_
4	Jose	_	NNP	NNP	_	5	nn	_	_
5	Viegas	_	NNP	NNP	_	6	nsubj	_	_
6	stated	_	VBD	VBD	_	0	root	_	_
7	that	_	IN	IN	_	10	mark	_	_
8	Brazil	_	NNP	NNP	_	10	nsubj	_	_
9	has	_	VBZ	VBZ	_	10	aux	_	_
10	encountered	_	VBN	VBN	_	6	ccomp	_	_
11	difficulties	_	NNS	NNS	_	10	dobj	_	_
12	in	_	IN	IN	_	10	prep	_	_
13	securing	_	VBG	VBG	_	12	pcomp	_	_
14	US	_	NNP	NNP	_	15	nn	_	_
15	support	_	NN	NN	_	13	dobj	_	_
16	for	_	IN	IN	_	13	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	plan	_	NN	NN	_	16	pobj	_	_
19	but	_	CC	CC	_	6	cc	_	_
20	recent	_	JJ	JJ	_	22	amod	_	_
21	bilateral	_	JJ	JJ	_	22	amod	_	_
22	talks	_	NNS	NNS	_	23	nsubj	_	_
23	led	_	VBD	VBD	_	6	conj	_	_
24	to	_	TO	TO	_	23	prep	_	_
25	certainty	_	NN	NN	_	24	pobj	_	_
26	that	_	IN	IN	_	31	mark	_	_
27	the	_	DT	DT	_	28	det	_	_
28	decree	_	NN	NN	_	31	nsubjpass	_	_
29	would	_	MD	MD	_	31	aux	_	_
30	be	_	VB	VB	_	31	auxpass	_	_
31	accepted	_	VBN	VBN	_	23	ccomp	_	_
32	by	_	IN	IN	_	31	prep	_	_
33	the	_	DT	DT	_	35	det	_	_
34	US	_	NNP	NNP	_	35	nn	_	_
35	government	_	NN	NN	_	32	pobj	_	_
36	without	_	IN	IN	_	31	prep	_	_
37	exposing	_	VBG	VBG	_	36	pcomp	_	_
38	Brazil	_	NNP	NNP	_	37	dobj	_	_
39	to	_	TO	TO	_	37	prep	_	_
40	commercial	_	JJ	JJ	_	41	amod	_	_
41	sanctions	_	NNS	NNS	_	39	pobj	_	_
42	.	_	.	.	_	6	punct	_	_

Oracle:
(a / accept-01, ARG0, g / government-organization)
(a / accept-01, ARG1, d3 / decree)
(a / accept-01, manner, e2 / expose-01)
(c / country, name, n / name)
(c2 / contrast-01, ARG1, e / encounter-01)
(c2 / contrast-01, ARG2, l / lead-03)
(c3 / country, name, n3 / name)
(c4 / certainty, domain, a / accept-01)
(d2 / difficulty, domain, s2 / secure-01)
(e / encounter-01, ARG0, c / country)
(e / encounter-01, ARG1, d2 / difficulty)
(e2 / expose-01, ARG0, g / government-organization)
(e2 / expose-01, ARG1, c / country)
(e2 / expose-01, ARG2, s4 / sanction-02)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(l / lead-03, ARG0, t / talk-01)
(l / lead-03, ARG2, c4 / certainty)
(m / minister, mod, d / defense)
(n / name, op, "Brazil")
(n2 / name, op, "Jose")
(n2 / name, op, "Viegas")
(n3 / name, op, "US")
(p2 / person, name, n2 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, c2 / contrast-01)
(s2 / secure-01, ARG0, c / country)
(s2 / secure-01, ARG1, s3 / support-01)
(s2 / secure-01, ARG2, c3 / country)
(s2 / secure-01, ARG3, p / plan)
(s3 / support-01, ARG0, c3 / country)
(s3 / support-01, ARG1, p / plan)
(s4 / sanction-02, ARG1, c / country)
(s4 / sanction-02, mod, c5 / commerce)
(t / talk-01, mod, b / bilateral)
(t / talk-01, time, r / recent)

Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),commercial,commerce,false), Span(37,38,List(3, 2, 1),Brazil,(country :name (name :op "Brazil")),false), Span(30,31,List(4),accepted,accept-01,false), Span(27,28,List(5),decree,decree,false), Span(24,25,List(6),certainty,certain,false), Span(21,22,List(7),talks,talk-01,false), Span(20,21,List(8),bilateral,bilateral,false), Span(19,20,List(9),recent,recent,false), Span(14,15,List(10),support,support-01,false), Span(12,13,List(11),securing,secure-02,false), Span(10,11,List(12),difficulties,difficulty,false), Span(9,10,List(13),encountered,encounter-01,false), Span(7,8,List(16, 15, 14),Brazil,(country :name (name :op "Brazil")),false), Span(3,5,List(20, 19, 18, 17),Jose Viegas,(person :name (name :op "Jose" :op "Viegas")),false), Span(2,3,List(22, 21),Minister,(have-org-role-91 :ARG2 minister),false), Span(0,1,List(25, 24, 23),Brazilian,(country :name (name :op "Brazil")),false)),Map(2 -> name, 5 -> decree, 12 -> difficulty, 8 -> bilateral, 15 -> name, 21 -> have-org-role-91, 18 -> name, 24 -> name, 7 -> talk-01, 1 -> country, 17 -> person, 23 -> country, 4 -> accept-01, 11 -> secure-02, 14 -> country, 20 -> "Viegas", 6 -> certain, 9 -> recent, 0 -> commerce, 22 -> minister, 16 -> "Brazil", 19 -> "Jose", 10 -> support-01, 3 -> "Brazil", 25 -> "Brazil", 13 -> encounter-01),Map(e -> encounter-01, n -> name, h -> have-org-role-91, s2 -> secure-02, t -> talk-01, b -> bilateral, n4 -> name, c4 -> country, s -> support-01, m -> minister, d -> decree, p -> person, n3 -> name, a -> accept-01, c3 -> certain, d2 -> difficulty, r -> recent, c -> commerce, n2 -> name, c2 -> country, c5 -> country))),[Ljava.lang.String;@7862f56,Annotation([Ljava.lang.String;@3a12c404,[Ljava.lang.String;@1941a8ff,[Ljava.lang.String;@22d7b4f8),Annotation([Ljava.lang.String;@149dd36b,[Ljava.lang.String;@38831718,[Ledu.cmu.lti.nlp.amr.Dependency;@2c1156a7),Annotation([Ljava.lang.String;@33fe57a9,[Ljava.lang.String;@4982cc36,[Ljava.lang.String;@691939c9),Annotation([Ljava.lang.String;@4f1bfe23,[Ljava.lang.String;@e19bb76,[Ledu.cmu.lti.nlp.amr.Entity;@512535ff))
AMR:
(a / accept-01, ARG0, c4 / country)
(a / accept-01, ARG1, d / decree)
(c2 / country, name, n / name)
(c2 / country, poss, d / decree)
(c4 / country, name, n2 / name)
(c5 / country, name, n4 / name)
(e / encounter-01, ARG0, c4 / country)
(e / encounter-01, ARG1, d2 / difficulty)
(e / encounter-01, ARG2, s2 / secure-02)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, m / minister)
(n / name, op, "Brazil")
(n2 / name, op, "Brazil")
(n3 / name, op, "Jose")
(n3 / name, op, "Viegas")
(n4 / name, op, "Brazil")
(p / person, mod, c5 / country)
(p / person, name, n3 / name)
(s / support-01, ARG1, c3 / certain)
(s2 / secure-02, ARG1, s / support-01)
(t / talk-01, ARG0, c / commerce)
(t / talk-01, ARG1, a / accept-01)
(t / talk-01, mod, b / bilateral)
(t / talk-01, time, r / recent)

Decoded in 1,332,514 microseconds
Sentence: Brazilian officials have expressed hope that the policy will be endorsed by the US before going into effect.

NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 14-15:  before => before
Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Span 10-11:  endorsed => endorse-01
Span 3-4:  expressed => express-01
Span 4-5:  hope => hope-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 7-8:  policy => policy

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 14-15:  before => before
Oracle Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 17-18:  effect => effect
Oracle Span 10-11:  endorsed => endorse-01
Oracle Span 3-4:  expressed => express-01
Oracle Span 15-16:  going => go-06
Oracle Span 2-3:  have => (person :ARG0-of have-org-role-91)
Oracle Span 4-5:  hope => hope-01
Oracle Span 1-2:  officials => official
Oracle Span 7-8:  policy => policy
Oracle Span 13-14:  US => (country :name (name :op "US"))

Incorrect span: officials => (have-org-role-91 :ARG2 official)
Missing span: US => (country :name (name :op "US"))
Missing span: going => go-06
Missing span: effect => effect
Missing span: officials => official
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	Brazilian	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	4	nsubj	_	_
3	have	_	VBP	VBP	_	4	aux	_	_
4	expressed	_	VBN	VBN	_	0	root	_	_
5	hope	_	NN	NN	_	4	dobj	_	_
6	that	_	IN	IN	_	11	mark	_	_
7	the	_	DT	DT	_	8	det	_	_
8	policy	_	NN	NN	_	11	nsubjpass	_	_
9	will	_	MD	MD	_	11	aux	_	_
10	be	_	VB	VB	_	11	auxpass	_	_
11	endorsed	_	VBN	VBN	_	4	ccomp	_	_
12	by	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	US	_	NNP	NNP	_	12	pobj	_	_
15	before	_	IN	IN	_	11	prep	_	_
16	going	_	VBG	VBG	_	15	pcomp	_	_
17	into	_	IN	IN	_	16	prep	_	_
18	effect	_	NN	NN	_	17	pobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(b / before, op, g / go-06)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e / express-01, ARG0, p / person)
(e / express-01, ARG1, h2 / hope-01)
(e2 / endorse-01, ARG0, c2 / country)
(e2 / endorse-01, ARG1, p2 / policy)
(e2 / endorse-01, time, b / before)
(g / go-06, ARG1, p2 / policy)
(g / go-06, ARG2, e3 / effect)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(h2 / hope-01, ARG0, p / person)
(h2 / hope-01, ARG1, e2 / endorse-01)
(n / name, op, "Brazil")
(n2 / name, op, "US")

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),before,before,false), Span(10,11,List(1),endorsed,endorse-01,false), Span(7,8,List(2),policy,policy,false), Span(4,5,List(3),hope,hope-01,false), Span(3,4,List(4),expressed,express-01,false), Span(1,2,List(6, 5),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(9, 8, 7),Brazilian,(country :name (name :op "Brazil")),false)),Map(2 -> policy, 5 -> have-org-role-91, 8 -> name, 7 -> country, 1 -> endorse-01, 4 -> express-01, 6 -> official, 9 -> "Brazil", 0 -> before, 3 -> hope-01),Map(n -> name, e -> endorse-01, h -> hope-01, h2 -> have-org-role-91, b -> before, e2 -> express-01, p -> policy, c -> country, o -> official))),[Ljava.lang.String;@71529963,Annotation([Ljava.lang.String;@61a88b8c,[Ljava.lang.String;@22295ec4,[Ljava.lang.String;@5adb0db3),Annotation([Ljava.lang.String;@3f270e0a,[Ljava.lang.String;@1a760689,[Ledu.cmu.lti.nlp.amr.Dependency;@7241a47d),Annotation([Ljava.lang.String;@70f59913,[Ljava.lang.String;@77258e59,[Ljava.lang.String;@5dcd8c7a),Annotation([Ljava.lang.String;@2250b9f2,[Ljava.lang.String;@7e3181aa,[Ledu.cmu.lti.nlp.amr.Entity;@253d9f73))
AMR:
(c / country, name, n / name)
(e / endorse-01, ARG1, p / policy)
(e / endorse-01, time, b / before)
(e2 / express-01, ARG1, h / hope-01)
(e2 / express-01, time, b / before)
(h / hope-01, ARG1, h2 / have-org-role-91)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, o / official)
(n / name, op, "Brazil")

Decoded in 546,191 microseconds
Sentence: The US is scheduled to provide 10.2 million dollars in drug and law enforcement aid to Brazil in 2004.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 18-19:  2004 => (date-entity :year 2004)
Span 14-15:  aid => aid-01
Span 16-17:  Brazil => (country :name (name :op "Brazil"))
Span 8-9:  dollars => (monetary-quantity :unit dollar)
Span 10-11:  drug => drug
Span 13-14:  enforcement => enforce-01
Span 12-13:  law => law
Span 5-6:  provide => provide-01
Span 3-4:  scheduled => schedule-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 18-19:  2004 => (date-entity :year 2004)
Oracle Span 14-15:  aid => aid-01
Oracle Span 11-12:  and => and
Oracle Span 16-17:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 8-9:  dollars => (monetary-quantity :unit dollar)
Oracle Span 10-11:  drug => drug
Oracle Span 13-14:  enforcement => enforce-01
Oracle Span 12-13:  law => law
Oracle Span 5-6:  provide => provide-01
Oracle Span 3-4:  scheduled => schedule-01
Oracle Span 1-2:  US => (country :name (name :op "US"))

Missing span: US => (country :name (name :op "US"))
Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	US	_	NNP	NNP	_	4	nsubjpass	_	_
3	is	_	VBZ	VBZ	_	4	auxpass	_	_
4	scheduled	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	provide	_	VB	VB	_	4	xcomp	_	_
7	10.2	_	CD	CD	_	8	number	_	_
8	million	_	CD	CD	_	9	num	_	_
9	dollars	_	NNS	NNS	_	6	dobj	_	_
10	in	_	IN	IN	_	6	prep	_	_
11	drug	_	NN	NN	_	15	nn	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	law	_	NN	NN	_	11	conj	_	_
14	enforcement	_	NN	NN	_	15	nn	_	_
15	aid	_	NN	NN	_	10	pobj	_	_
16	to	_	TO	TO	_	6	prep	_	_
17	Brazil	_	NNP	NNP	_	16	pobj	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	2004	_	CD	CD	_	18	pobj	_	_
20	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, instrument, m2 / monetary-quantity)
(a / and, op, a3 / aid-01)
(a3 / aid-01, ARG0, c / country)
(a3 / aid-01, ARG2, c2 / country)
(a3 / aid-01, mod, e / enforce-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d2 / date-entity, year, 2004)
(e / enforce-01, ARG1, l / law)
(m2 / monetary-quantity, unit, d3 / dollar)
(n / name, op, "US")
(n2 / name, op, "Brazil")
(p / provide-01, ARG0, c / country)
(p / provide-01, ARG1, m2 / monetary-quantity)
(p / provide-01, ARG2, c2 / country)
(s / schedule-01, ARG1, c / country)
(s / schedule-01, ARG2, p / provide-01)
(s / schedule-01, ARG3, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),2004,(date-entity :year 2004),false), Span(16,17,List(4, 3, 2),Brazil,(country :name (name :op "Brazil")),false), Span(14,15,List(5),aid,aid-01,false), Span(13,14,List(6),enforcement,enforce-01,false), Span(12,13,List(7),law,law,false), Span(10,11,List(8),drug,drug,false), Span(8,9,List(10, 9),dollars,(monetary-quantity :unit dollar),false), Span(5,6,List(11),provide,provide-01,false), Span(3,4,List(12),scheduled,schedule-01,false)),Map(2 -> country, 5 -> aid-01, 12 -> schedule-01, 8 -> drug, 7 -> law, 1 -> 2004, 4 -> "Brazil", 11 -> provide-01, 6 -> enforce-01, 0 -> date-entity, 9 -> monetary-quantity, 3 -> name, 10 -> dollar),Map(e -> enforce-01, n -> name, 2 -> 2004, d3 -> dollar, s -> schedule-01, m -> monetary-quantity, d -> date-entity, p -> provide-01, a -> aid-01, d2 -> drug, l -> law, c -> country))),[Ljava.lang.String;@142269f2,Annotation([Ljava.lang.String;@331acdad,[Ljava.lang.String;@41d426b5,[Ljava.lang.String;@8dbfffb),Annotation([Ljava.lang.String;@f316aeb,[Ljava.lang.String;@6aa3a905,[Ledu.cmu.lti.nlp.amr.Dependency;@a22cb6a),Annotation([Ljava.lang.String;@5dd1c9f2,[Ljava.lang.String;@59b38691,[Ljava.lang.String;@2e2ff723),Annotation([Ljava.lang.String;@324a0017,[Ljava.lang.String;@6187d1f5,[Ledu.cmu.lti.nlp.amr.Entity;@2445445a))
AMR:
(a / aid-01, ARG0, m / monetary-quantity)
(a / aid-01, time, d / date-entity)
(c / country, name, n / name)
(d / date-entity, year, 2 / 2004)
(e / enforce-01, ARG0, a / aid-01)
(e / enforce-01, ARG1, l / law)
(m / monetary-quantity, source, d2 / drug)
(m / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Brazil")
(p / provide-01, ARG1, a / aid-01)
(p / provide-01, ARG2, c / country)
(s / schedule-01, ARG1, p / provide-01)

Decoded in 392,504 microseconds
Sentence: Former air force chief and current Director of the Air Institute at estacio de sa University in Rio de Janeiro General Mauro Jose Miranda gandra stated that the measure was a courageous step by the Government but the impact may be more political than practical because of self-imposed restrictions by the Brazilian government.

NER Entity: (organization :name (name :op "Air" :op "Institute"))
NER Entity: (country :name (name :op "Rio" :op "de" :op "Janeiro"))
NER Entity: (person :name (name :op "Mauro" :op "Jose" :op "Miranda" :op "gandra"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 1-3:  air force => (military :name (name :op "Force" :op "Air"))
Span 9-11:  Air Institute => (organization :name (name :op "Air" :op "Institute"))
Span 45-46:  because => cause-01
Span 53-54:  Brazilian => (country :name (name :op "Brazil"))
Span 3-4:  chief => (have-org-role-91 :ARG2 chief)
Span 31-32:  courageous => courageous
Span 5-6:  current => current
Span 0-1:  Former => former
Span 49-50:  imposed => impose-01
Span 21-25:  Mauro Jose Miranda gandra => (person :name (name :op "Mauro" :op "Jose" :op "Miranda" :op "gandra"))
Span 39-40:  may => possible
Span 28-29:  measure => measure
Span 44-45:  practical => practical
Span 50-51:  restrictions => restrict-01
Span 17-20:  Rio de Janeiro => (name :op "Janeiro" :op "de" :op "Rio")
Span 47-48:  self => self

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 1-3:  air force => (military :name (name :op "Force" :op "Air"))
Oracle Span 9-11:  Air Institute => (research-institute :name (name :op "Institute" :op "Air"))
Oracle Span 45-46:  because => cause-01
Oracle Span 53-54:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 36-37:  but => contrast-01
Oracle Span 3-4:  chief => (have-org-role-91 :ARG2 chief)
Oracle Span 31-32:  courageous => courage
Oracle Span 5-6:  current => current
Oracle Span 6-7:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 12-16:  estacio de sa University => (university :name (name :op "University" :op "Sa" :op "de" :op "Estacio"))
Oracle Span 0-1:  Former => former
Oracle Span 20-21:  General => (have-org-role-91 :ARG2 general)
Oracle Span 35-36:  Government => government-organization
Oracle Span 54-55:  government => govern-01
Oracle Span 38-39:  impact => impact-01
Oracle Span 49-50:  imposed => impose-01
Oracle Span 21-25:  Mauro Jose Miranda gandra => (person :name (name :op "Gandra" :op "Miranda" :op "Jose" :op "Mauro"))
Oracle Span 39-40:  may => possible
Oracle Span 28-29:  measure => measure
Oracle Span 41-42:  more => more
Oracle Span 42-43:  political => politics
Oracle Span 44-45:  practical => practical
Oracle Span 50-51:  restrictions => (thing :ARG2-of restrict-01)
Oracle Span 17-20:  Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Oracle Span 25-26:  stated => state-01
Oracle Span 32-33:  step => step-01

Incorrect span: restrictions => restrict-01
Extra span: self => self
Incorrect span: courageous => courageous
Incorrect span: Mauro Jose Miranda gandra => (person :name (name :op "Mauro" :op "Jose" :op "Miranda" :op "gandra"))
Incorrect span: Rio de Janeiro => (name :op "Janeiro" :op "de" :op "Rio")
Incorrect span: Air Institute => (organization :name (name :op "Air" :op "Institute"))
Missing span: Mauro Jose Miranda gandra => (person :name (name :op "Gandra" :op "Miranda" :op "Jose" :op "Mauro"))
Missing span: Air Institute => (research-institute :name (name :op "Institute" :op "Air"))
Missing span: estacio de sa University => (university :name (name :op "University" :op "Sa" :op "de" :op "Estacio"))
Missing span: Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Missing span: stated => state-01
Missing span: but => contrast-01
Missing span: more => more
Missing span: impact => impact-01
Missing span: step => step-01
Missing span: Director => (have-org-role-91 :ARG2 director)
Missing span: General => (have-org-role-91 :ARG2 general)
Missing span: restrictions => (thing :ARG2-of restrict-01)
Missing span: Government => government-organization
Missing span: government => govern-01
Missing span: political => politics
Missing span: courageous => courage
Dependencies:
1	Former	_	JJ	JJ	_	4	amod	_	_
2	air	_	NN	NN	_	4	nn	_	_
3	force	_	NN	NN	_	4	nn	_	_
4	chief	_	NN	NN	_	26	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	current	_	JJ	JJ	_	7	amod	_	_
7	Director	_	NN	NN	_	4	conj	_	_
8	of	_	IN	IN	_	4	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	Air	_	NNP	NNP	_	11	nn	_	_
11	Institute	_	NNP	NNP	_	8	pobj	_	_
12	at	_	IN	IN	_	11	prep	_	_
13	estacio	_	NNP	NNP	_	16	nn	_	_
14	de	_	IN	IN	_	16	amod	_	_
15	sa	_	NNP	NNP	_	16	nn	_	_
16	University	_	NNP	NNP	_	12	pobj	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	Rio	_	NNP	NNP	_	25	nn	_	_
19	de	_	NNP	NNP	_	25	nn	_	_
20	Janeiro	_	NNP	NNP	_	25	nn	_	_
21	General	_	NNP	NNP	_	25	nn	_	_
22	Mauro	_	NNP	NNP	_	25	nn	_	_
23	Jose	_	NNP	NNP	_	25	nn	_	_
24	Miranda	_	NNP	NNP	_	25	nn	_	_
25	gandra	_	NN	NN	_	17	pobj	_	_
26	stated	_	VBD	VBD	_	0	root	_	_
27	that	_	IN	IN	_	33	mark	_	_
28	the	_	DT	DT	_	29	det	_	_
29	measure	_	NN	NN	_	33	nsubj	_	_
30	was	_	VBD	VBD	_	33	cop	_	_
31	a	_	DT	DT	_	33	det	_	_
32	courageous	_	JJ	JJ	_	33	amod	_	_
33	step	_	NN	NN	_	26	ccomp	_	_
34	by	_	IN	IN	_	33	prep	_	_
35	the	_	DT	DT	_	36	det	_	_
36	Government	_	NN	NN	_	34	pobj	_	_
37	but	_	CC	CC	_	26	cc	_	_
38	the	_	DT	DT	_	39	det	_	_
39	impact	_	NN	NN	_	43	nsubj	_	_
40	may	_	MD	MD	_	43	aux	_	_
41	be	_	VB	VB	_	43	cop	_	_
42	more	_	RBR	RBR	_	43	advmod	_	_
43	political	_	JJ	JJ	_	26	conj	_	_
44	than	_	IN	IN	_	43	prep	_	_
45	practical	_	JJ	JJ	_	44	pobj	_	_
46	because	_	RB	RB	_	47	advmod	_	_
47	of	_	IN	IN	_	45	prep	_	_
48	self-imposed	_	JJ	JJ	_	49	amod	_	_
49	restrictions	_	NNS	NNS	_	47	pobj	_	_
50	by	_	IN	IN	_	43	prep	_	_
51	the	_	DT	DT	_	53	det	_	_
52	Brazilian	_	JJ	JJ	_	53	amod	_	_
53	government	_	NN	NN	_	50	pobj	_	_
54	.	_	.	.	_	26	punct	_	_

Oracle:
(c / chief, mod, f2 / former)
(c2 / city, name, n4 / name)
(c4 / contrast-01, ARG1, s2 / step-01)
(c4 / contrast-01, ARG2, p / possible)
(c6 / cause-01, ARG0, t / thing)
(c6 / cause-01, ARG1, p / possible)
(c7 / country, name, n5 / name)
(d2 / director, time, c3 / current)
(g5 / govern-01, ARG0, g4 / government-organization)
(g5 / govern-01, ARG1, c7 / country)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, m3 / military)
(h / have-org-role-91, ARG2, c / chief)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG1, r / research-institute)
(h2 / have-org-role-91, ARG2, d2 / director)
(h3 / have-org-role-91, ARG0, p4 / person)
(h3 / have-org-role-91, ARG2, g / general)
(i2 / impose-01, ARG0, g4 / government-organization)
(i2 / impose-01, ARG1, r2 / restrict-01)
(i2 / impose-01, ARG2, g4 / government-organization)
(m3 / military, name, n6 / name)
(n / name, op, "Gandra")
(n / name, op, "Jose")
(n / name, op, "Mauro")
(n / name, op, "Miranda")
(n2 / name, op, "Air")
(n2 / name, op, "Institute")
(n3 / name, op, "Estacio")
(n3 / name, op, "Sa")
(n3 / name, op, "University")
(n3 / name, op, "de")
(n4 / name, op, "Janeiro")
(n4 / name, op, "Rio")
(n4 / name, op, "de")
(n5 / name, op, "Brazil")
(n6 / name, op, "Air")
(n6 / name, op, "Force")
(p / possible, domain, p2 / politics)
(p2 / politics, compared-to, p3 / practical)
(p2 / politics, degree, m2 / more)
(p2 / politics, domain, i / impact-01)
(p4 / person, name, n / name)
(r / research-institute, name, n2 / name)
(r2 / restrict-01, ARG0, g4 / government-organization)
(r2 / restrict-01, ARG2, t / thing)
(s / state-01, ARG0, p4 / person)
(s / state-01, ARG1, c4 / contrast-01)
(s2 / step-01, domain, m / measure)
(s2 / step-01, mod, c5 / courage)
(u / university, location, c2 / city)
(u / university, name, n3 / name)
(u / university, part, r / research-institute)

Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(2, 1, 0),Brazilian,(country :name (name :op "Brazil")),false), Span(50,51,List(3),restrictions,restrict-01,false), Span(49,50,List(4),imposed,impose-01,false), Span(47,48,List(5),self,self,false), Span(45,46,List(6),because,cause-01,false), Span(44,45,List(7),practical,practical,false), Span(39,40,List(8),may,possible,false), Span(31,32,List(9),courageous,courageous,false), Span(28,29,List(10),measure,measure,false), Span(21,25,List(16, 15, 14, 13, 12, 11),Mauro Jose Miranda gandra,(person :name (name :op "Mauro" :op "Jose" :op "Miranda" :op "gandra")),false), Span(17,20,List(20, 19, 18, 17),Rio de Janeiro,(name :op "Janeiro" :op "de" :op "Rio"),false), Span(9,11,List(24, 23, 22, 21),Air Institute,(organization :name (name :op "Air" :op "Institute")),false), Span(5,6,List(25),current,current,false), Span(3,4,List(27, 26),chief,(have-org-role-91 :ARG2 chief),false), Span(1,3,List(31, 30, 29, 28),air force,(military :name (name :op "Force" :op "Air")),false), Span(0,1,List(32),Former,former,false)),Map(30 -> "Force", 2 -> "Brazil", 5 -> self, 27 -> chief, 12 -> name, 8 -> possible, 15 -> "Miranda", 21 -> organization, 18 -> "Janeiro", 24 -> "Institute", 7 -> practical, 1 -> name, 17 -> name, 23 -> "Air", 26 -> have-org-role-91, 4 -> impose-01, 11 -> person, 32 -> former, 14 -> "Jose", 29 -> name, 20 -> "Rio", 28 -> military, 6 -> cause-01, 9 -> courageous, 0 -> country, 22 -> name, 16 -> "gandra", 19 -> "de", 10 -> measure, 3 -> restrict-01, 31 -> "Air", 25 -> current, 13 -> "Mauro"),Map(n -> name, h -> have-org-role-91, m2 -> military, p2 -> possible, c4 -> current, n4 -> name, s -> self, m -> measure, p -> practical, c3 -> courageous, n3 -> name, r -> restrict-01, i -> impose-01, c -> country, f -> former, o -> organization, p3 -> person, c2 -> cause-01, n2 -> name, n5 -> name, c5 -> chief))),[Ljava.lang.String;@7502291e,Annotation([Ljava.lang.String;@17aad511,[Ljava.lang.String;@487db668,[Ljava.lang.String;@46944ca9),Annotation([Ljava.lang.String;@22bac7bc,[Ljava.lang.String;@63798ca7,[Ledu.cmu.lti.nlp.amr.Dependency;@4612b856),Annotation([Ljava.lang.String;@22875539,[Ljava.lang.String;@5674e1f2,[Ljava.lang.String;@79c7532f),Annotation([Ljava.lang.String;@2a448449,[Ljava.lang.String;@32f232a5,[Ledu.cmu.lti.nlp.amr.Entity;@43f82e78))
AMR:
(c / country, name, n / name)
(c2 / cause-01, ARG0, p2 / possible)
(c2 / cause-01, ARG1, r / restrict-01)
(c2 / cause-01, location, c / country)
(c4 / current, mod, m / measure)
(c5 / chief, mod, f / former)
(c5 / chief, mod, m2 / military)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG2, c5 / chief)
(i / impose-01, ARG0, s / self)
(i / impose-01, ARG1, r / restrict-01)
(m / measure, part, p3 / person)
(m / measure, poss, c / country)
(m2 / military, name, n5 / name)
(n / name, op, "Brazil")
(n2 / name, op, "Jose")
(n2 / name, op, "Mauro")
(n2 / name, op, "Miranda")
(n2 / name, op, "gandra")
(n3 / name, op, "Janeiro")
(n3 / name, op, "Rio")
(n3 / name, op, "de")
(n4 / name, op, "Air")
(n4 / name, op, "Institute")
(n5 / name, op, "Air")
(n5 / name, op, "Force")
(o / organization, name, n3 / name)
(o / organization, name, n4 / name)
(o / organization, poss, p3 / person)
(p3 / person, name, n2 / name)
(r / restrict-01, ARG1, c3 / courageous)
(r / restrict-01, manner, p / practical)

Decoded in 1,464,243 microseconds
Sentence: Brazilian officials stated that the policy would be inapplicable against aircraft with children on board.

NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 10-11:  aircraft => aircraft
Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Span 12-13:  children => child
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 5-6:  policy => policy

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  against => against
Oracle Span 10-11:  aircraft => aircraft
Oracle Span 14-15:  board => board-01
Oracle Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 12-13:  children => child
Oracle Span 8-9:  inapplicable => (apply-02 :polarity -)
Oracle Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 5-6:  policy => policy
Oracle Span 2-3:  stated => state-01

Missing span: stated => state-01
Missing span: against => against
Missing span: board => board-01
Missing span: inapplicable => (apply-02 :polarity -)
Dependencies:
1	Brazilian	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	9	mark	_	_
5	the	_	DT	DT	_	6	det	_	_
6	policy	_	NN	NN	_	9	nsubj	_	_
7	would	_	MD	MD	_	9	aux	_	_
8	be	_	VB	VB	_	9	cop	_	_
9	inapplicable	_	JJ	JJ	_	3	ccomp	_	_
10	against	_	IN	IN	_	9	prep	_	_
11	aircraft	_	NN	NN	_	10	pobj	_	_
12	with	_	IN	IN	_	9	prep	_	_
13	children	_	NNS	NNS	_	12	pobj	_	_
14	on	_	IN	IN	_	13	prep	_	_
15	board	_	NN	NN	_	14	pobj	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(a / apply-02, ARG1, p3 / policy)
(a / apply-02, ARG2, a2 / against)
(a / apply-02, polarity, -)
(a2 / against, op, a3 / aircraft)
(b / board-01, ARG0, c2 / child)
(b / board-01, ARG1, a3 / aircraft)
(c / country, name, n / name)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Brazil")
(s / state-01, ARG1, a / apply-02)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),children,child,false), Span(10,11,List(1),aircraft,aircraft,false), Span(5,6,List(2),policy,policy,false), Span(1,2,List(4, 3),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(7, 6, 5),Brazilian,(country :name (name :op "Brazil")),false)),Map(2 -> policy, 5 -> country, 7 -> "Brazil", 1 -> aircraft, 4 -> official, 6 -> name, 0 -> child, 3 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, p -> policy, a -> aircraft, c -> child, o -> official, c2 -> country))),[Ljava.lang.String;@e54303,Annotation([Ljava.lang.String;@e8df99a,[Ljava.lang.String;@2dc995f4,[Ljava.lang.String;@2f40e5db),Annotation([Ljava.lang.String;@517566b,[Ljava.lang.String;@64b73e7a,[Ledu.cmu.lti.nlp.amr.Dependency;@530712d),Annotation([Ljava.lang.String;@2df6226d,[Ljava.lang.String;@12ed9db6,[Ljava.lang.String;@4ff4357f),Annotation([Ljava.lang.String;@49cb9cb5,[Ljava.lang.String;@55322aab,[Ledu.cmu.lti.nlp.amr.Entity;@2b4c1d96))
AMR:
(a / aircraft, location, c / child)
(a / aircraft, mod, c2 / country)
(c2 / country, mod, p / policy)
(c2 / country, name, n / name)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Brazil")

Decoded in 54,926 microseconds
Sentence: Viegas stated that the limitation was necessary.

NER Entity: (person :name (name :op "Viegas"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  limitation => limit-01
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Viegas => (person :name (name :op "Viegas"))

Incorrect span:  => amr-empty
Missing span: Viegas => (person :name (name :op "Viegas"))
Missing span: stated => state-01
Missing span: limitation => limit-01
Dependencies:
1	Viegas	_	NNS	NNS	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	limitation	_	NN	NN	_	7	nsubj	_	_
6	was	_	VBD	VBD	_	7	cop	_	_
7	necessary	_	JJ	JJ	_	2	ccomp	_	_
8	.	_	.	.	_	2	punct	_	_

Oracle:
(n / name, op, "Viegas")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@45fd9a4d,Annotation([Ljava.lang.String;@50468873,[Ljava.lang.String;@146587a2,[Ljava.lang.String;@5f0e9815),Annotation([Ljava.lang.String;@76884e4b,[Ljava.lang.String;@126945f9,[Ledu.cmu.lti.nlp.amr.Dependency;@2a898881),Annotation([Ljava.lang.String;@16c63f5,[Ljava.lang.String;@35229f85,[Ljava.lang.String;@6d3c5255),Annotation([Ljava.lang.String;@b1712f3,[Ljava.lang.String;@6986bbaf,[Ledu.cmu.lti.nlp.amr.Entity;@4879dfad))
AMR:


Decoded in 10,566 microseconds
Sentence: Gandra stated that the provision undermines the decree's essential purpose by granting immunity to drug-smuggling aircraft carrying children and thus introducing the possibility of kidnapped children being used as human shields.

NER Entity: (country :name (name :op "Gandra"))
Spans:
Span 18-19:  aircraft => aircraft
Span 19-20:  carrying => carry-01
Span 28-29:  children => child
Span 20-21:  children => child
Span 7-8:  decree => decree
Span 15-16:  drug => drug
Span 9-10:  essential => essential
Span 12-13:  granting => grant-01
Span 32-33:  human => human
Span 23-24:  introducing => introduce-02
Span 25-26:  possibility => possible
Span 17-18:  smuggling => smuggle-01
Span 5-6:  undermines => undermine-01
Span 30-31:  used => use-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 18-19:  aircraft => aircraft
Oracle Span 19-20:  carrying => carry-01
Oracle Span 20-21:  children => child
Oracle Span 28-29:  children => child
Oracle Span 7-8:  decree => decree
Oracle Span 15-16:  drug => drug
Oracle Span 9-10:  essential => essential
Oracle Span 0-1:  Gandra => (person :name (name :op "Gandra"))
Oracle Span 12-13:  granting => grant-01
Oracle Span 32-33:  human => human
Oracle Span 13-14:  immunity => immunity
Oracle Span 23-24:  introducing => introduce-02
Oracle Span 27-28:  kidnapped => kidnap-01
Oracle Span 25-26:  possibility => possible
Oracle Span 4-5:  provision => provision
Oracle Span 10-11:  purpose => purpose
Oracle Span 33-34:  shields => shield-01
Oracle Span 17-18:  smuggling => smuggle-01
Oracle Span 1-2:  stated => state-01
Oracle Span 5-6:  undermines => undermine-01
Oracle Span 30-31:  used => use-01

Missing span: Gandra => (person :name (name :op "Gandra"))
Missing span: stated => state-01
Missing span: shields => shield-01
Missing span: kidnapped => kidnap-01
Missing span: immunity => immunity
Missing span: purpose => purpose
Missing span: provision => provision
Dependencies:
1	Gandra	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	provision	_	NN	NN	_	6	nsubj	_	_
6	undermines	_	VBZ	VBZ	_	2	ccomp	_	_
7	the	_	DT	DT	_	8	det	_	_
8	decree	_	NN	NN	_	11	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	essential	_	JJ	JJ	_	11	amod	_	_
11	purpose	_	NN	NN	_	6	dobj	_	_
12	by	_	IN	IN	_	6	prep	_	_
13	granting	_	VBG	VBG	_	12	pcomp	_	_
14	immunity	_	NN	NN	_	13	dobj	_	_
15	to	_	TO	TO	_	13	prep	_	_
16	drug-smuggling	_	JJ	JJ	_	19	amod	_	_
17	aircraft	_	NN	NN	_	19	nn	_	_
18	carrying	_	NN	NN	_	19	nn	_	_
19	children	_	NNS	NNS	_	15	pobj	_	_
20	and	_	CC	CC	_	13	cc	_	_
21	thus	_	RB	RB	_	22	advmod	_	_
22	introducing	_	VBG	VBG	_	13	conj	_	_
23	the	_	DT	DT	_	24	det	_	_
24	possibility	_	NN	NN	_	22	dobj	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	kidnapped	_	JJ	JJ	_	27	amod	_	_
27	children	_	NNS	NNS	_	25	pobj	_	_
28	being	_	VBG	VBG	_	29	auxpass	_	_
29	used	_	VBN	VBN	_	27	vmod	_	_
30	as	_	IN	IN	_	29	prep	_	_
31	human	_	JJ	JJ	_	32	amod	_	_
32	shields	_	NNS	NNS	_	30	pobj	_	_
33	.	_	.	.	_	2	punct	_	_

Oracle:
(c / carry-01, ARG0, a / aircraft)
(c / carry-01, ARG1, c2 / child)
(g / grant-01, ARG0, p2 / provision)
(g / grant-01, ARG1, i / immunity)
(g / grant-01, ARG2, a / aircraft)
(i2 / introduce-02, ARG0, p2 / provision)
(i2 / introduce-02, ARG1, p4 / possible)
(k / kidnap-01, ARG1, c4 / child)
(n / name, op, "Gandra")
(p / person, name, n / name)
(p3 / purpose, mod, e / essential)
(p3 / purpose, poss, d / decree)
(p4 / possible, domain, u2 / use-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, u / undermine-01)
(s2 / smuggle-01, ARG0, a / aircraft)
(s2 / smuggle-01, ARG1, d2 / drug)
(s3 / shield-01, mod, h / human)
(u / undermine-01, ARG0, p2 / provision)
(u / undermine-01, ARG1, p3 / purpose)
(u / undermine-01, instrument, g / grant-01)
(u2 / use-01, ARG1, c4 / child)
(u2 / use-01, ARG2, s3 / shield-01)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),human,human,false), Span(30,31,List(1),used,use-01,false), Span(28,29,List(2),children,child,false), Span(25,26,List(3),possibility,possible,false), Span(23,24,List(4),introducing,introduce-02,false), Span(20,21,List(5),children,child,false), Span(19,20,List(6),carrying,carry-01,false), Span(18,19,List(7),aircraft,aircraft,false), Span(17,18,List(8),smuggling,smuggle-01,false), Span(15,16,List(9),drug,drug,false), Span(12,13,List(10),granting,grant-01,false), Span(9,10,List(11),essential,essential,false), Span(7,8,List(12),decree,decree,false), Span(5,6,List(13),undermines,undermine-01,false)),Map(2 -> child, 5 -> child, 12 -> decree, 8 -> smuggle-01, 7 -> aircraft, 1 -> use-01, 4 -> introduce-02, 11 -> essential, 6 -> carry-01, 0 -> human, 9 -> drug, 3 -> possible, 10 -> grant-01, 13 -> undermine-01),Map(e -> essential, h -> human, u2 -> undermine-01, s -> smuggle-01, d -> drug, p -> possible, g -> grant-01, c3 -> carry-01, a -> aircraft, d2 -> decree, i -> introduce-02, c -> child, u -> use-01, c2 -> child))),[Ljava.lang.String;@4758820d,Annotation([Ljava.lang.String;@74eb909f,[Ljava.lang.String;@28ec166e,[Ljava.lang.String;@2eee3069),Annotation([Ljava.lang.String;@2da59753,[Ljava.lang.String;@5629510,[Ledu.cmu.lti.nlp.amr.Dependency;@4df5bcb4),Annotation([Ljava.lang.String;@12c7a01b,[Ljava.lang.String;@13d9b21f,[Ljava.lang.String;@2826f61),Annotation([Ljava.lang.String;@62727399,[Ljava.lang.String;@4d9ac0b4,[Ledu.cmu.lti.nlp.amr.Entity;@130dca52))
AMR:
(c3 / carry-01, ARG0, c2 / child)
(g / grant-01, ARG1, c2 / child)
(i / introduce-02, ARG1, p / possible)
(i / introduce-02, concession, g / grant-01)
(p / possible, domain, c / child)
(p / possible, mod, h / human)
(s / smuggle-01, ARG0, a / aircraft)
(s / smuggle-01, ARG1, c3 / carry-01)
(s / smuggle-01, ARG2, d / drug)
(u / use-01, ARG0, e / essential)
(u / use-01, ARG1, c / child)
(u2 / undermine-01, ARG0, d2 / decree)
(u2 / undermine-01, ARG1, g / grant-01)

Decoded in 425,310 microseconds
Sentence: Viegas stated in an interview in Brasilia that the government will use the law to more powerfully dissuade drug traffickers who have previously entered Brazilian airspace feeling unthreatened by the air force.

NER Entity: (person :name (name :op "Viegas"))
NER Entity: (country :name (name :op "Brasilia"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 30-32:  air force => (military :name (name :op "Force" :op "Air"))
Span 25-26:  airspace => airspace
Span 24-25:  Brazilian => (country :name (name :op "Brazil"))
Span 17-18:  dissuade => dissuade-01
Span 18-19:  drug => drug
Span 23-24:  entered => enter-01
Span 4-5:  interview => interview-01
Span 13-14:  law => law
Span 22-23:  previously => previous
Span 19-20:  traffickers => (person :ARG0-of traffic-00)
Span 11-12:  use => use-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 30-32:  air force => (military :name (name :op "Force" :op "Air"))
Oracle Span 25-26:  airspace => airspace
Oracle Span 6-7:  Brasilia => (city :name (name :op "Brasilia"))
Oracle Span 24-25:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 17-18:  dissuade => dissuade-01
Oracle Span 18-19:  drug => drug
Oracle Span 23-24:  entered => enter-01
Oracle Span 26-27:  feeling => feel-01
Oracle Span 9-10:  government => (government-organization :ARG0-of govern-01)
Oracle Span 4-5:  interview => interview-01
Oracle Span 13-14:  law => law
Oracle Span 15-16:  more => more
Oracle Span 16-17:  powerfully => powerful
Oracle Span 22-23:  previously => previous
Oracle Span 1-2:  stated => state-01
Oracle Span 19-20:  traffickers => (person :ARG0-of traffic-00)
Oracle Span 27-28:  unthreatened => (threaten-01 :polarity -)
Oracle Span 11-12:  use => use-01
Oracle Span 0-1:  Viegas => (person :name (name :op "Viegas"))

Missing span: Viegas => (person :name (name :op "Viegas"))
Missing span: Brasilia => (city :name (name :op "Brasilia"))
Missing span: stated => state-01
Missing span: more => more
Missing span: feeling => feel-01
Missing span: powerfully => powerful
Missing span: unthreatened => (threaten-01 :polarity -)
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Viegas	_	NNS	NNS	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	an	_	DT	DT	_	5	det	_	_
5	interview	_	NN	NN	_	3	pobj	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	Brasilia	_	NNP	NNP	_	6	pobj	_	_
8	that	_	IN	IN	_	12	mark	_	_
9	the	_	DT	DT	_	10	det	_	_
10	government	_	NN	NN	_	12	nsubj	_	_
11	will	_	MD	MD	_	12	aux	_	_
12	use	_	VB	VB	_	2	ccomp	_	_
13	the	_	DT	DT	_	14	det	_	_
14	law	_	NN	NN	_	12	dobj	_	_
15	to	_	TO	TO	_	12	prep	_	_
16	more	_	RBR	RBR	_	17	advmod	_	_
17	powerfully	_	JJ	JJ	_	20	amod	_	_
18	dissuade	_	JJ	JJ	_	20	amod	_	_
19	drug	_	NN	NN	_	20	nn	_	_
20	traffickers	_	NNS	NNS	_	15	pobj	_	_
21	who	_	WP	WP	_	24	nsubj	_	_
22	have	_	VBP	VBP	_	24	aux	_	_
23	previously	_	RB	RB	_	24	advmod	_	_
24	entered	_	VBN	VBN	_	20	rcmod	_	_
25	Brazilian	_	JJ	JJ	_	27	amod	_	_
26	airspace	_	NN	NN	_	27	nn	_	_
27	feeling	_	NN	NN	_	24	dobj	_	_
28	unthreatened	_	VBN	VBN	_	27	vmod	_	_
29	by	_	IN	IN	_	28	prep	_	_
30	the	_	DT	DT	_	32	det	_	_
31	air	_	NN	NN	_	32	nn	_	_
32	force	_	NN	NN	_	29	pobj	_	_
33	.	_	.	.	_	2	punct	_	_

Oracle:
(a / airspace, mod, c / country)
(c / country, name, n2 / name)
(c2 / city, name, n3 / name)
(d / dissuade-01, ARG0, g / government-organization)
(d / dissuade-01, ARG1, p2 / person)
(d / dissuade-01, manner, p3 / powerful)
(e / enter-01, ARG0, p2 / person)
(e / enter-01, ARG1, a / airspace)
(e / enter-01, manner, f / feel-01)
(e / enter-01, time, p4 / previous)
(f / feel-01, ARG0, p2 / person)
(f / feel-01, ARG1, t2 / threaten-01)
(g2 / govern-01, ARG0, g / government-organization)
(i / interview-01, ARG1, p / person)
(m2 / military, name, n4 / name)
(n / name, op, "Viegas")
(n2 / name, op, "Brazil")
(n3 / name, op, "Brasilia")
(n4 / name, op, "Air")
(n4 / name, op, "Force")
(p / person, name, n / name)
(p3 / powerful, degree, m / more)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, u / use-01)
(s / state-01, location, c2 / city)
(s / state-01, medium, i / interview-01)
(t / traffic-00, ARG0, p2 / person)
(t / traffic-00, ARG1, d2 / drug)
(t2 / threaten-01, ARG0, m2 / military)
(t2 / threaten-01, ARG2, p2 / person)
(t2 / threaten-01, polarity, -)
(u / use-01, ARG0, g / government-organization)
(u / use-01, ARG1, l / law)
(u / use-01, ARG2, d / dissuade-01)

Input(Some(Graph(null,ArrayBuffer(Span(30,32,List(3, 2, 1, 0),air force,(military :name (name :op "Force" :op "Air")),false), Span(25,26,List(4),airspace,airspace,false), Span(24,25,List(7, 6, 5),Brazilian,(country :name (name :op "Brazil")),false), Span(23,24,List(8),entered,enter-01,false), Span(22,23,List(9),previously,previous,false), Span(19,20,List(11, 10),traffickers,(person :ARG0-of traffic-00),false), Span(18,19,List(12),drug,drug,false), Span(17,18,List(13),dissuade,dissuade-01,false), Span(13,14,List(14),law,law,false), Span(11,12,List(15),use,use-01,false), Span(4,5,List(16),interview,interview-01,false)),Map(2 -> "Force", 5 -> country, 12 -> drug, 15 -> use-01, 8 -> enter-01, 7 -> "Brazil", 1 -> name, 4 -> airspace, 11 -> traffic-00, 14 -> law, 6 -> name, 0 -> military, 9 -> previous, 16 -> interview-01, 3 -> "Air", 10 -> person, 13 -> dissuade-01),Map(e -> enter-01, n -> name, t -> traffic-00, p2 -> person, m -> military, d -> drug, p -> previous, a -> airspace, d2 -> dissuade-01, i -> interview-01, c -> country, l -> law, u -> use-01, n2 -> name))),[Ljava.lang.String;@2654635,Annotation([Ljava.lang.String;@737a135b,[Ljava.lang.String;@687ef2e0,[Ljava.lang.String;@15dcfae7),Annotation([Ljava.lang.String;@3da05287,[Ljava.lang.String;@1e636ea3,[Ledu.cmu.lti.nlp.amr.Dependency;@115667d),Annotation([Ljava.lang.String;@736caf7a,[Ljava.lang.String;@4ce7fffa,[Ljava.lang.String;@497486b3),Annotation([Ljava.lang.String;@63f8276e,[Ljava.lang.String;@75f95314,[Ledu.cmu.lti.nlp.amr.Entity;@6127a7e))
AMR:
(a / airspace, poss, c / country)
(c / country, name, n2 / name)
(d2 / dissuade-01, ARG1, p2 / person)
(e / enter-01, ARG0, p2 / person)
(e / enter-01, ARG1, c / country)
(e / enter-01, time, p / previous)
(i / interview-01, ARG1, u / use-01)
(m / military, name, n / name)
(n / name, op, "Air")
(n / name, op, "Force")
(n2 / name, op, "Brazil")
(t / traffic-00, ARG0, p2 / person)
(t / traffic-00, ARG1, d / drug)
(u / use-01, ARG0, m / military)
(u / use-01, ARG1, l / law)
(u / use-01, ARG2, p2 / person)

Decoded in 384,259 microseconds
Sentence: The Government was prompted to act due to the deteriorating public security situation with increasingly powerful and violent drug gangs in Sao Paolo and particularly Rio de Janeiro.

NER Entity: (country :name (name :op "Sao" :op "Paolo"))
NER Entity: (country :name (name :op "Rio" :op "de" :op "Janeiro"))
Spans:
Span 9-10:  deteriorating => deteriorate-01
Span 18-19:  drug => drug
Span 19-20:  gangs => gang
Span 14-15:  increasingly => increase-01
Span 24-25:  particularly => particular
Span 15-16:  powerful => powerful
Span 10-11:  public => public
Span 25-28:  Rio de Janeiro => (name :op "Janeiro" :op "de" :op "Rio")
Span 21-23:  Sao Paolo => (country :name (name :op "Sao" :op "Paolo"))
Span 12-13:  situation => situation

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 5-6:  act => act-02
Oracle Span 16-17:  and => and
Oracle Span 9-10:  deteriorating => deteriorate-01
Oracle Span 18-19:  drug => drug
Oracle Span 19-20:  gangs => gang
Oracle Span 1-2:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 14-15:  increasingly => increase-01
Oracle Span 24-25:  particularly => particular
Oracle Span 15-16:  powerful => power
Oracle Span 3-4:  prompted => prompt-02
Oracle Span 10-11:  public => public
Oracle Span 25-28:  Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Oracle Span 21-23:  Sao Paolo => (city :name (name :op "Paolo" :op "Sao"))
Oracle Span 11-12:  security => security
Oracle Span 12-13:  situation => situation
Oracle Span 17-18:  violent => violence

Incorrect span: Rio de Janeiro => (name :op "Janeiro" :op "de" :op "Rio")
Incorrect span: Sao Paolo => (country :name (name :op "Sao" :op "Paolo"))
Incorrect span: powerful => powerful
Missing span: Sao Paolo => (city :name (name :op "Paolo" :op "Sao"))
Missing span: Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Missing span: prompted => prompt-02
Missing span: act => act-02
Missing span: and => and
Missing span: security => security
Missing span: Government => (government-organization :ARG0-of govern-01)
Missing span: violent => violence
Missing span: powerful => power
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	Government	_	NN	NN	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	prompted	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	act	_	VB	VB	_	4	xcomp	_	_
7	due	_	JJ	JJ	_	6	acomp	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	the	_	DT	DT	_	13	det	_	_
10	deteriorating	_	VBG	VBG	_	13	amod	_	_
11	public	_	JJ	JJ	_	13	amod	_	_
12	security	_	NN	NN	_	13	nn	_	_
13	situation	_	NN	NN	_	8	pobj	_	_
14	with	_	IN	IN	_	13	prep	_	_
15	increasingly	_	RB	RB	_	16	advmod	_	_
16	powerful	_	JJ	JJ	_	20	amod	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	violent	_	JJ	JJ	_	16	conj	_	_
19	drug	_	NN	NN	_	20	nn	_	_
20	gangs	_	NNS	NNS	_	14	pobj	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	Sao	_	NNP	NNP	_	23	nn	_	_
23	Paolo	_	NNP	NNP	_	21	pobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	particularly	_	RB	RB	_	23	advmod	_	_
26	Rio	_	NNP	NNP	_	28	nn	_	_
27	de	_	IN	IN	_	28	amod	_	_
28	Janeiro	_	NNP	NNP	_	23	dep	_	_
29	.	_	.	.	_	4	punct	_	_

Oracle:
(a / act-02, ARG0, g / government-organization)
(a2 / and, op, c / city)
(a2 / and, op, c2 / city)
(c / city, name, n / name)
(c2 / city, mod, p4 / particular)
(c2 / city, name, n2 / name)
(d / deteriorate-01, ARG0, s / situation)
(g2 / govern-01, ARG0, g / government-organization)
(g3 / gang, location, a2 / and)
(g3 / gang, mod, d2 / drug)
(g3 / gang, mod, p3 / power)
(g3 / gang, mod, v / violence)
(i / increase-01, ARG1, p3 / power)
(i / increase-01, ARG1, v / violence)
(n / name, op, "Paolo")
(n / name, op, "Sao")
(n2 / name, op, "Janeiro")
(n2 / name, op, "Rio")
(n2 / name, op, "de")
(p / prompt-02, ARG0, d / deteriorate-01)
(p / prompt-02, ARG1, g / government-organization)
(p / prompt-02, ARG2, a / act-02)
(s / situation, mod, s2 / security)
(s / situation, topic, g3 / gang)
(s2 / security, mod, p2 / public)

Input(Some(Graph(null,ArrayBuffer(Span(25,28,List(3, 2, 1, 0),Rio de Janeiro,(name :op "Janeiro" :op "de" :op "Rio"),false), Span(24,25,List(4),particularly,particular,false), Span(21,23,List(8, 7, 6, 5),Sao Paolo,(country :name (name :op "Sao" :op "Paolo")),false), Span(19,20,List(9),gangs,gang,false), Span(18,19,List(10),drug,drug,false), Span(15,16,List(11),powerful,powerful,false), Span(14,15,List(12),increasingly,increase-01,false), Span(12,13,List(13),situation,situation,false), Span(10,11,List(14),public,public,false), Span(9,10,List(15),deteriorating,deteriorate-01,false)),Map(2 -> "de", 5 -> country, 12 -> increase-01, 15 -> deteriorate-01, 8 -> "Paolo", 7 -> "Sao", 1 -> "Janeiro", 4 -> particular, 11 -> powerful, 14 -> public, 6 -> name, 0 -> name, 9 -> gang, 3 -> "Rio", 10 -> drug, 13 -> situation),Map(n -> name, p2 -> powerful, s -> situation, d -> drug, g -> gang, p -> particular, d2 -> deteriorate-01, i -> increase-01, c -> country, p3 -> public, n2 -> name))),[Ljava.lang.String;@6bbe2511,Annotation([Ljava.lang.String;@495fac5f,[Ljava.lang.String;@76012793,[Ljava.lang.String;@635572a7),Annotation([Ljava.lang.String;@79d94571,[Ljava.lang.String;@4dd02341,[Ledu.cmu.lti.nlp.amr.Dependency;@3212a8d7),Annotation([Ljava.lang.String;@7a1a3478,[Ljava.lang.String;@495b0487,[Ljava.lang.String;@55dfcc6),Annotation([Ljava.lang.String;@222eb8aa,[Ljava.lang.String;@93cf163,[Ledu.cmu.lti.nlp.amr.Entity;@1852a3ff))
AMR:
(c / country, name, n2 / name)
(d2 / deteriorate-01, ARG1, s / situation)
(d2 / deteriorate-01, time, i / increase-01)
(g / gang, location, c / country)
(g / gang, mod, d / drug)
(i / increase-01, ARG0, p / particular)
(i / increase-01, ARG1, p2 / powerful)
(n / name, mod, p / particular)
(n / name, op, "Janeiro")
(n / name, op, "Rio")
(n / name, op, "de")
(n2 / name, op, "Paolo")
(n2 / name, op, "Sao")
(s / situation, mod, p3 / public)
(s / situation, poss, g / gang)

Decoded in 198,184 microseconds
Sentence: Rio de Janeiro drug gangs have more firepower than the police and have successfully attacked police stations and forced businesses and schools to close.

NER Entity: (country :name (name :op "Rio" :op "de" :op "Janeiro"))
Spans:
Span 14-15:  attacked => attack-01
Span 19-20:  businesses => business
Span 3-4:  drug => drug
Span 7-8:  firepower => firepower
Span 4-5:  gangs => gang
Span 0-3:  Rio de Janeiro => (name :op "Janeiro" :op "de" :op "Rio")
Span 21-22:  schools => school
Span 16-17:  stations => station

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 17-18:  and => and
Oracle Span 14-15:  attacked => attack-01
Oracle Span 19-20:  businesses => business
Oracle Span 23-24:  close => close-01
Oracle Span 3-4:  drug => drug
Oracle Span 7-8:  firepower => firepower
Oracle Span 18-19:  forced => force-01
Oracle Span 4-5:  gangs => gang
Oracle Span 5-6:  have => have-03
Oracle Span 6-7:  more => more
Oracle Span 10-11:  police => police
Oracle Span 15-16:  police => police
Oracle Span 0-3:  Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Oracle Span 21-22:  schools => school
Oracle Span 16-17:  stations => station
Oracle Span 13-14:  successfully => succeed-01

Incorrect span: Rio de Janeiro => (name :op "Janeiro" :op "de" :op "Rio")
Missing span: Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Missing span: and => and
Missing span: forced => force-01
Missing span: close => close-01
Missing span: and => and
Missing span: police => police
Missing span: have => have-03
Missing span: police => police
Missing span: more => more
Missing span: successfully => succeed-01
Dependencies:
1	Rio	_	NNP	NNP	_	5	nn	_	_
2	de	_	NNP	NNP	_	5	nn	_	_
3	Janeiro	_	NNP	NNP	_	5	nn	_	_
4	drug	_	NN	NN	_	5	nn	_	_
5	gangs	_	NNS	NNS	_	6	nsubj	_	_
6	have	_	VBP	VBP	_	0	root	_	_
7	more	_	JJR	JJR	_	8	amod	_	_
8	firepower	_	NN	NN	_	6	dobj	_	_
9	than	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	police	_	NN	NN	_	9	pobj	_	_
12	and	_	CC	CC	_	6	cc	_	_
13	have	_	VBP	VBP	_	15	aux	_	_
14	successfully	_	RB	RB	_	15	advmod	_	_
15	attacked	_	VBN	VBN	_	6	conj	_	_
16	police	_	NN	NN	_	17	nn	_	_
17	stations	_	NNS	NNS	_	15	dobj	_	_
18	and	_	CC	CC	_	15	cc	_	_
19	forced	_	VBN	VBN	_	15	conj	_	_
20	businesses	_	NNS	NNS	_	19	dobj	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	schools	_	NNS	NNS	_	20	conj	_	_
23	to	_	TO	TO	_	24	aux	_	_
24	close	_	VB	VB	_	19	xcomp	_	_
25	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, a2 / attack-01)
(a / and, op, f2 / force-01)
(a / and, op, h / have-03)
(a2 / attack-01, ARG0, g / gang)
(a2 / attack-01, ARG1, s / station)
(a3 / and, op, b / business)
(a3 / and, op, s3 / school)
(c / city, name, n / name)
(c2 / close-01, ARG1, a3 / and)
(f / firepower, compared-to, p / police)
(f / firepower, mod, m / more)
(f2 / force-01, ARG0, g / gang)
(f2 / force-01, ARG1, a3 / and)
(f2 / force-01, ARG2, c2 / close-01)
(g / gang, location, c / city)
(g / gang, mod, d / drug)
(h / have-03, ARG0, g / gang)
(h / have-03, ARG1, f / firepower)
(n / name, op, "Janeiro")
(n / name, op, "Rio")
(n / name, op, "de")
(s / station, mod, p2 / police)
(s2 / succeed-01, ARG0, g / gang)
(s2 / succeed-01, ARG1, a2 / attack-01)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),schools,school,false), Span(19,20,List(1),businesses,business,false), Span(16,17,List(2),stations,station,false), Span(14,15,List(3),attacked,attack-01,false), Span(7,8,List(4),firepower,firepower,false), Span(4,5,List(5),gangs,gang,false), Span(3,4,List(6),drug,drug,false), Span(0,3,List(10, 9, 8, 7),Rio de Janeiro,(name :op "Janeiro" :op "de" :op "Rio"),false)),Map(2 -> station, 5 -> gang, 8 -> "Janeiro", 7 -> name, 1 -> business, 4 -> firepower, 6 -> drug, 9 -> "de", 0 -> school, 10 -> "Rio", 3 -> attack-01),Map(n -> name, s2 -> station, b -> business, s -> school, d -> drug, g -> gang, a -> attack-01, f -> firepower))),[Ljava.lang.String;@7203c7ff,Annotation([Ljava.lang.String;@25bfcafd,[Ljava.lang.String;@4b6690c0,[Ljava.lang.String;@46268f08),Annotation([Ljava.lang.String;@2a76840c,[Ljava.lang.String;@71454b9d,[Ledu.cmu.lti.nlp.amr.Dependency;@eda25e5),Annotation([Ljava.lang.String;@7cf6a5f9,[Ljava.lang.String;@623e088f,[Ljava.lang.String;@39fcbef6),Annotation([Ljava.lang.String;@66565121,[Ljava.lang.String;@2fc6f97f,[Ledu.cmu.lti.nlp.amr.Entity;@3d2ee678))
AMR:
(a / attack-01, ARG0, g / gang)
(a / attack-01, ARG1, s2 / station)
(a / attack-01, ARG4, f / firepower)
(b / business, poss, f / firepower)
(g / gang, mod, d / drug)
(g / gang, name, n / name)
(n / name, op, "Janeiro")
(n / name, op, "Rio")
(n / name, op, "de")
(s2 / station, op, s / school)

Decoded in 389,659 microseconds
Sentence: President Luiz Inacio Lula da Silva stated in a 2003 interview with foreign correspondents --

NER Entity: (person :name (name :op "Luiz" :op "Inacio" :op "Lula" :op "da" :op "Silva"))
Spans:
Span 9-10:  2003 => (date-entity :year 2003)
Span 10-11:  interview => interview-01
Span 1-6:  Luiz Inacio Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula" :op "Inacio" :op "Luiz"))
Span 0-1:  President => (have-org-role-91 :ARG2 president)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  2003 => (date-entity :year 2003)
Oracle Span 13-14:  correspondents => correspondent
Oracle Span 12-13:  foreign => foreign
Oracle Span 10-11:  interview => interview-01
Oracle Span 1-6:  Luiz Inacio Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula" :op "Inacio" :op "Luiz"))
Oracle Span 0-1:  President => (have-org-role-91 :ARG2 president)
Oracle Span 6-7:  stated => state-01

Missing span: stated => state-01
Missing span: correspondents => correspondent
Missing span: foreign => foreign
Dependencies:
1	President	_	NNP	NNP	_	6	nn	_	_
2	Luiz	_	NNP	NNP	_	6	nn	_	_
3	Inacio	_	NNP	NNP	_	6	nn	_	_
4	Lula	_	NNP	NNP	_	6	nn	_	_
5	da	_	NNP	NNP	_	6	nn	_	_
6	Silva	_	NNP	NNP	_	0	root	_	_
7	stated	_	VBN	VBN	_	6	vmod	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	a	_	DT	DT	_	11	det	_	_
10	2003	_	CD	CD	_	11	num	_	_
11	interview	_	NN	NN	_	8	pobj	_	_
12	with	_	IN	IN	_	7	prep	_	_
13	foreign	_	JJ	JJ	_	14	amod	_	_
14	correspondents	_	NNS	NNS	_	12	pobj	_	_
15	--	_	:	:	_	6	punct	_	_

Oracle:
(c2 / correspondent, mod, f / foreign)
(d / date-entity, year, 2003)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / president)
(i / interview-01, ARG0, c2 / correspondent)
(i / interview-01, ARG1, p / person)
(i / interview-01, time, d / date-entity)
(n / name, op, "Inacio")
(n / name, op, "Luiz")
(n / name, op, "Lula")
(n / name, op, "Silva")
(n / name, op, "da")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, medium, i / interview-01)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),interview,interview-01,false), Span(9,10,List(2, 1),2003,(date-entity :year 2003),false), Span(1,6,List(9, 8, 7, 6, 5, 4, 3),Luiz Inacio Lula da Silva,(person :name (name :op "Silva" :op "da" :op "Lula" :op "Inacio" :op "Luiz")),false), Span(0,1,List(11, 10),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> 2003, 5 -> "Silva", 8 -> "Inacio", 7 -> "Lula", 1 -> date-entity, 11 -> president, 4 -> name, 6 -> "da", 9 -> "Luiz", 0 -> interview-01, 10 -> have-org-role-91, 3 -> person),Map(n -> name, h -> have-org-role-91, 2 -> 2003, p2 -> president, d -> date-entity, p -> person, i -> interview-01))),[Ljava.lang.String;@6179e425,Annotation([Ljava.lang.String;@35f26e72,[Ljava.lang.String;@2d6764b2,[Ljava.lang.String;@67304a40),Annotation([Ljava.lang.String;@49c6c24f,[Ljava.lang.String;@6fe1b4fb,[Ledu.cmu.lti.nlp.amr.Dependency;@79351f41),Annotation([Ljava.lang.String;@1c32386d,[Ljava.lang.String;@6399551e,[Ljava.lang.String;@13d73fa),Annotation([Ljava.lang.String;@5023bb8b,[Ljava.lang.String;@5d5f10b2,[Ledu.cmu.lti.nlp.amr.Entity;@74c79fa2))
AMR:
(d / date-entity, year, 2 / 2003)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / president)
(i / interview-01, ARG1, p / person)
(i / interview-01, time, d / date-entity)
(n / name, op, "Inacio")
(n / name, op, "Luiz")
(n / name, op, "Lula")
(n / name, op, "Silva")
(n / name, op, "da")
(p / person, name, n / name)

Decoded in 51,723 microseconds
Sentence: The policy is a matter of national sovereignty and security.

Spans:
Span 4-5:  matter => matter
Span 1-2:  policy => policy
Span 7-8:  sovereignty => sovereignty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 4-5:  matter => matter
Oracle Span 6-7:  national => nation
Oracle Span 1-2:  policy => policy
Oracle Span 9-10:  security => security
Oracle Span 7-8:  sovereignty => sovereignty

Missing span: and => and
Missing span: security => security
Missing span: national => nation
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	policy	_	NN	NN	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	a	_	DT	DT	_	5	det	_	_
5	matter	_	NN	NN	_	0	root	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	national	_	JJ	JJ	_	8	amod	_	_
8	sovereignty	_	NN	NN	_	6	pobj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	security	_	NN	NN	_	8	conj	_	_
11	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, s / sovereignty)
(a / and, op, s2 / security)
(m / matter, domain, p / policy)
(m / matter, topic, a / and)
(s / sovereignty, mod, n / nation)
(s2 / security, mod, n / nation)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),sovereignty,sovereignty,false), Span(4,5,List(1),matter,matter,false), Span(1,2,List(2),policy,policy,false)),Map(2 -> policy, 1 -> matter, 0 -> sovereignty),Map(s -> sovereignty, m -> matter, p -> policy))),[Ljava.lang.String;@1e0f9063,Annotation([Ljava.lang.String;@53bd8fca,[Ljava.lang.String;@7642df8f,[Ljava.lang.String;@3e30646a),Annotation([Ljava.lang.String;@5cde6747,[Ljava.lang.String;@63a270c9,[Ledu.cmu.lti.nlp.amr.Dependency;@37c7595),Annotation([Ljava.lang.String;@3ed242a4,[Ljava.lang.String;@1199fe66,[Ljava.lang.String;@614df0a4),Annotation([Ljava.lang.String;@1fdf1c5,[Ljava.lang.String;@2d96543c,[Ledu.cmu.lti.nlp.amr.Entity;@73a2e526))
AMR:
(m / matter, domain, p / policy)
(m / matter, topic, s / sovereignty)

Decoded in 21,135 microseconds
Sentence: Some pilots of drug-running aircraft felt so confidently immune from retribution as to make obscene gestures at pursuing Brazilian air force pilots.

NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 21-23:  air force => (military :name (name :op "Force" :op "Air"))
Span 6-7:  aircraft => aircraft
Span 20-21:  Brazilian => (country :name (name :op "Brazil"))
Span 3-4:  drug => drug
Span 7-8:  felt => feel-01
Span 10-11:  immune => immune
Span 23-24:  pilots => (have-org-role-91 :ARG2 (person :ARG0-of pilot-01))
Span 1-2:  pilots => (have-org-role-91 :ARG2 (person :ARG0-of pilot-01))
Span 19-20:  pursuing => pursue-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 6-7:  aircraft => aircraft
Oracle Span 20-23:  Brazilian air force => (have-org-role-91 :ARG1 (military :name (name :op "Force" :op "Air" :op "Brazilian")))
Oracle Span 9-10:  confidently => confident-41
Oracle Span 3-4:  drug => drug
Oracle Span 7-8:  felt => feel-01
Oracle Span 17-18:  gestures => gesture-01
Oracle Span 10-11:  immune => immune
Oracle Span 16-17:  obscene => obscene
Oracle Span 1-2:  pilots => pilot-01
Oracle Span 23-24:  pilots => (person :ARG0-of pilot-01)
Oracle Span 19-20:  pursuing => pursue-01
Oracle Span 12-13:  retribution => retribution
Oracle Span 5-6:  running => run-08
Oracle Span 8-9:  so => so
Oracle Span 0-1:  Some => some

Incorrect span: pilots => (have-org-role-91 :ARG2 (person :ARG0-of pilot-01))
Extra span: air force => (military :name (name :op "Force" :op "Air"))
Extra span: Brazilian => (country :name (name :op "Brazil"))
Incorrect span: pilots => (have-org-role-91 :ARG2 (person :ARG0-of pilot-01))
Missing span: Brazilian air force => (have-org-role-91 :ARG1 (military :name (name :op "Force" :op "Air" :op "Brazilian")))
Missing span: gestures => gesture-01
Missing span: obscene => obscene
Missing span: pilots => pilot-01
Missing span: retribution => retribution
Missing span: so => so
Missing span: pilots => (person :ARG0-of pilot-01)
Missing span: running => run-08
Missing span: Some => some
Missing span: confidently => confident-41
Dependencies:
1	Some	_	DT	DT	_	2	det	_	_
2	pilots	_	NNS	NNS	_	6	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	drug-running	_	JJ	JJ	_	5	amod	_	_
5	aircraft	_	NN	NN	_	3	pobj	_	_
6	felt	_	VBD	VBD	_	0	root	_	_
7	so	_	RB	RB	_	9	advmod	_	_
8	confidently	_	RB	RB	_	9	advmod	_	_
9	immune	_	JJ	JJ	_	6	acomp	_	_
10	from	_	IN	IN	_	9	prep	_	_
11	retribution	_	NN	NN	_	10	pobj	_	_
12	as	_	IN	IN	_	14	mark	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	make	_	VB	VB	_	6	advcl	_	_
15	obscene	_	JJ	JJ	_	16	amod	_	_
16	gestures	_	NNS	NNS	_	14	dobj	_	_
17	at	_	IN	IN	_	14	prep	_	_
18	pursuing	_	VBG	VBG	_	17	pcomp	_	_
19	Brazilian	_	JJ	JJ	_	22	amod	_	_
20	air	_	NN	NN	_	22	nn	_	_
21	force	_	NN	NN	_	22	nn	_	_
22	pilots	_	NNS	NNS	_	18	dobj	_	_
23	.	_	.	.	_	6	punct	_	_

Oracle:
(c / confident-41, ARG1, p / person)
(c / confident-41, ARG2, i2 / immune)
(f / feel-01, ARG0, p / person)
(f / feel-01, ARG1, i2 / immune)
(f / feel-01, ARG2, r2 / retribution)
(g / gesture-01, ARG0, p / person)
(g / gesture-01, mod, o / obscene)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG3, p5 / pilot-01)
(i2 / immune, degree, s2 / so)
(m / military, name, n / name)
(n / name, op, "Air")
(n / name, op, "Brazilian")
(n / name, op, "Force")
(p / person, quant, s / some)
(p2 / pilot-01, ARG0, p / person)
(p2 / pilot-01, ARG1, a / aircraft)
(r / run-08, ARG0, a / aircraft)
(r / run-08, ARG1, d / drug)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(2, 1, 0),pilots,(have-org-role-91 :ARG2 (person :ARG0-of pilot-01)),false), Span(21,23,List(6, 5, 4, 3),air force,(military :name (name :op "Force" :op "Air")),false), Span(20,21,List(9, 8, 7),Brazilian,(country :name (name :op "Brazil")),false), Span(19,20,List(10),pursuing,pursue-01,false), Span(10,11,List(11),immune,immune,false), Span(7,8,List(12),felt,feel-01,false), Span(6,7,List(13),aircraft,aircraft,false), Span(3,4,List(14),drug,drug,false), Span(1,2,List(17, 16, 15),pilots,(have-org-role-91 :ARG2 (person :ARG0-of pilot-01)),false)),Map(2 -> pilot-01, 5 -> "Force", 12 -> feel-01, 15 -> have-org-role-91, 8 -> name, 7 -> country, 17 -> pilot-01, 1 -> person, 4 -> name, 11 -> immune, 14 -> drug, 6 -> "Air", 0 -> have-org-role-91, 9 -> "Brazil", 16 -> person, 3 -> military, 10 -> pursue-01, 13 -> aircraft),Map(n -> name, h -> have-org-role-91, p5 -> pilot-01, h2 -> have-org-role-91, p2 -> pilot-01, m -> military, d -> drug, p -> person, a -> aircraft, p4 -> person, i -> immune, c -> country, f -> feel-01, p3 -> pursue-01, n2 -> name))),[Ljava.lang.String;@7d64e326,Annotation([Ljava.lang.String;@13f95696,[Ljava.lang.String;@cd1d761,[Ljava.lang.String;@68be8808),Annotation([Ljava.lang.String;@32193bea,[Ljava.lang.String;@6b8d96d9,[Ledu.cmu.lti.nlp.amr.Dependency;@69653e16),Annotation([Ljava.lang.String;@758705fa,[Ljava.lang.String;@ebaa6cb,[Ljava.lang.String;@906d29b),Annotation([Ljava.lang.String;@49d3c823,[Ljava.lang.String;@436bc36,[Ledu.cmu.lti.nlp.amr.Entity;@5fe1ce85))
AMR:
(c / country, name, n2 / name)
(f / feel-01, ARG0, p4 / person)
(f / feel-01, ARG1, i / immune)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, p4 / person)
(m / military, name, n / name)
(n / name, op, "Air")
(n / name, op, "Force")
(n2 / name, op, "Brazil")
(p2 / pilot-01, ARG0, p / person)
(p2 / pilot-01, ARG1, m / military)
(p3 / pursue-01, ARG0, d / drug)
(p3 / pursue-01, ARG1, p / person)
(p5 / pilot-01, ARG0, p4 / person)
(p5 / pilot-01, ARG1, a / aircraft)

Decoded in 446,949 microseconds
Sentence: The constitutionality of the law has been questioned under Brazil's prohibition of the death penalty as punishment for criminal acts.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 9-10:  Brazil => (country :name (name :op "Brazil"))
Span 14-15:  death => die-01
Span 4-5:  law => law
Span 17-18:  punishment => punish-01
Span 7-8:  questioned => question-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 20-21:  acts => act
Oracle Span 9-10:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 1-2:  constitutionality => constitution
Oracle Span 19-20:  criminal => crime
Oracle Span 14-15:  death => die-01
Oracle Span 4-5:  law => law
Oracle Span 15-16:  penalty => penalize-01
Oracle Span 11-12:  prohibition => prohibit-01
Oracle Span 17-18:  punishment => punish-01
Oracle Span 7-8:  questioned => question-01

Missing span: acts => act
Missing span: prohibition => prohibit-01
Missing span: penalty => penalize-01
Missing span: criminal => crime
Missing span: constitutionality => constitution
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	constitutionality	_	NN	NN	_	8	nsubjpass	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	law	_	NN	NN	_	3	pobj	_	_
6	has	_	VBZ	VBZ	_	8	aux	_	_
7	been	_	VBN	VBN	_	8	auxpass	_	_
8	questioned	_	VBN	VBN	_	0	root	_	_
9	under	_	IN	IN	_	8	prep	_	_
10	Brazil	_	NNP	NNP	_	12	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	prohibition	_	NN	NN	_	9	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	death	_	NN	NN	_	16	nn	_	_
16	penalty	_	NN	NN	_	13	pobj	_	_
17	as	_	IN	IN	_	8	prep	_	_
18	punishment	_	NN	NN	_	17	pobj	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	criminal	_	JJ	JJ	_	21	amod	_	_
21	acts	_	NNS	NNS	_	19	pobj	_	_
22	.	_	.	.	_	8	punct	_	_

Oracle:
(a / act, mod, c3 / crime)
(c / constitution, domain, l / law)
(c2 / country, name, n / name)
(n / name, op, "Brazil")
(p / prohibit-01, ARG0, c2 / country)
(p / prohibit-01, ARG1, p2 / penalize-01)
(p2 / penalize-01, instrument, d / die-01)
(p3 / punish-01, ARG2, a / act)
(p3 / punish-01, instrument, p2 / penalize-01)
(q / question-01, ARG1, c / constitution)
(q / question-01, prep-under, p / prohibit-01)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),punishment,punish-01,false), Span(14,15,List(1),death,die-01,false), Span(9,10,List(4, 3, 2),Brazil,(country :name (name :op "Brazil")),false), Span(7,8,List(5),questioned,question-01,false), Span(4,5,List(6),law,law,false)),Map(2 -> country, 5 -> question-01, 1 -> die-01, 4 -> "Brazil", 6 -> law, 0 -> punish-01, 3 -> name),Map(n -> name, q -> question-01, d -> die-01, p -> punish-01, l -> law, c -> country))),[Ljava.lang.String;@604c5de8,Annotation([Ljava.lang.String;@37091312,[Ljava.lang.String;@66fdec9,[Ljava.lang.String;@57abad67),Annotation([Ljava.lang.String;@550a1967,[Ljava.lang.String;@2a640157,[Ledu.cmu.lti.nlp.amr.Dependency;@52851b44),Annotation([Ljava.lang.String;@584f54e6,[Ljava.lang.String;@5d8bafa9,[Ljava.lang.String;@576f63f6),Annotation([Ljava.lang.String;@2dca0d64,[Ljava.lang.String;@f80945f,[Ledu.cmu.lti.nlp.amr.Entity;@ff684e1))
AMR:
(c / country, name, n / name)
(d / die-01, ARG1, l / law)
(d / die-01, ARG2, p / punish-01)
(n / name, op, "Brazil")
(q / question-01, ARG0, c / country)
(q / question-01, ARG1, p / punish-01)

Decoded in 73,943 microseconds
Sentence: Some legal experts and other commentators stated that contrary to government claims, the Statute amounts to a de facto execution of drug traffickers.

Spans:
Span 15-16:  amounts => amount
Span 11-12:  claims => claim-01
Span 5-6:  commentators => commentator
Span 8-9:  contrary => contrary-41
Span 22-23:  drug => drug
Span 20-21:  execution => execute-01
Span 4-5:  other => other
Span 23-24:  traffickers => (person :ARG0-of traffic-00)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 15-16:  amounts => amount-02
Oracle Span 3-4:  and => and
Oracle Span 11-12:  claims => (thing :ARG1-of claim-01)
Oracle Span 5-6:  commentators => (person :ARG0-of comment-01)
Oracle Span 8-9:  contrary => contrary-41
Oracle Span 22-23:  drug => drug
Oracle Span 20-21:  execution => execute-01
Oracle Span 2-3:  experts => (person :ARG1-of expert-41)
Oracle Span 10-11:  government => (government-organization :ARG0-of govern-01)
Oracle Span 4-5:  other => other
Oracle Span 0-1:  Some => some
Oracle Span 6-7:  stated => state-01
Oracle Span 14-15:  Statute => statute
Oracle Span 23-24:  traffickers => (person :ARG0-of traffic-00)

Incorrect span: amounts => amount
Incorrect span: claims => claim-01
Incorrect span: commentators => commentator
Missing span: stated => state-01
Missing span: amounts => amount-02
Missing span: claims => (thing :ARG1-of claim-01)
Missing span: Statute => statute
Missing span: and => and
Missing span: experts => (person :ARG1-of expert-41)
Missing span: Some => some
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: commentators => (person :ARG0-of comment-01)
Dependencies:
1	Some	_	DT	DT	_	3	det	_	_
2	legal	_	JJ	JJ	_	3	amod	_	_
3	experts	_	NNS	NNS	_	7	nsubj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	other	_	JJ	JJ	_	6	amod	_	_
6	commentators	_	NNS	NNS	_	3	conj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	16	mark	_	_
9	contrary	_	JJ	JJ	_	16	advmod	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	government	_	NN	NN	_	12	nn	_	_
12	claims	_	NNS	NNS	_	10	pobj	_	_
13	,	_	,	,	_	16	punct	_	_
14	the	_	DT	DT	_	15	det	_	_
15	Statute	_	NNP	NNP	_	16	nsubj	_	_
16	amounts	_	VBZ	VBZ	_	7	ccomp	_	_
17	to	_	TO	TO	_	16	prep	_	_
18	a	_	DT	DT	_	21	det	_	_
19	de	_	FW	FW	_	21	amod	_	_
20	facto	_	FW	FW	_	19	dep	_	_
21	execution	_	NN	NN	_	17	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	drug	_	NN	NN	_	24	nn	_	_
24	traffickers	_	NNS	NNS	_	22	pobj	_	_
25	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, p / person)
(a / and, op, p2 / person)
(a2 / amount-02, ARG1, s3 / statute)
(a2 / amount-02, ARG2, e2 / execute-01)
(c / comment-01, ARG0, p2 / person)
(c2 / contrary-41, ARG1, a2 / amount-02)
(c2 / contrary-41, ARG2, t2 / thing)
(c3 / claim-01, ARG0, g / government-organization)
(c3 / claim-01, ARG1, t2 / thing)
(e / expert-41, ARG1, p / person)
(e2 / execute-01, ARG1, p3 / person)
(g2 / govern-01, ARG0, g / government-organization)
(p / person, quant, s2 / some)
(p2 / person, mod, o / other)
(s / state-01, ARG0, a / and)
(s / state-01, ARG1, a2 / amount-02)
(t / traffic-00, ARG0, p3 / person)
(t / traffic-00, ARG1, d / drug)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(1, 0),traffickers,(person :ARG0-of traffic-00),false), Span(22,23,List(2),drug,drug,false), Span(20,21,List(3),execution,execute-01,false), Span(15,16,List(4),amounts,amount,false), Span(11,12,List(5),claims,claim-01,false), Span(8,9,List(6),contrary,contrary-41,false), Span(5,6,List(7),commentators,commentator,false), Span(4,5,List(8),other,other,false)),Map(2 -> drug, 5 -> claim-01, 8 -> other, 7 -> commentator, 1 -> traffic-00, 4 -> amount, 6 -> contrary-41, 0 -> person, 3 -> execute-01),Map(e -> execute-01, t -> traffic-00, d -> drug, p -> person, c3 -> commentator, a -> amount, c -> claim-01, o -> other, c2 -> contrary-41))),[Ljava.lang.String;@23aa363a,Annotation([Ljava.lang.String;@5ef6ae06,[Ljava.lang.String;@55dfebeb,[Ljava.lang.String;@6e35bc3d),Annotation([Ljava.lang.String;@1cdc4c27,[Ljava.lang.String;@77b14724,[Ledu.cmu.lti.nlp.amr.Dependency;@5d9b7a8a),Annotation([Ljava.lang.String;@1e8ce150,[Ljava.lang.String;@604f2bd2,[Ljava.lang.String;@1d3ac898),Annotation([Ljava.lang.String;@1b73be9f,[Ljava.lang.String;@628c4ac0,[Ledu.cmu.lti.nlp.amr.Entity;@7b84fcf8))
AMR:
(c / claim-01, ARG0, p / person)
(c / claim-01, ARG1, c3 / commentator)
(c2 / contrary-41, ARG0, a / amount)
(c2 / contrary-41, ARG1, c / claim-01)
(c3 / commentator, mod, o / other)
(e / execute-01, ARG1, p / person)
(t / traffic-00, ARG0, p / person)
(t / traffic-00, ARG1, d / drug)

Decoded in 145,232 microseconds
Sentence: The daily newspaper O Estado de Sao Paolo stated in an editorial the week of 20040718-20040824 -- the extreme measure raises ethical and juridical problems exceeding any potential benefits.

NER Entity: (country :name (name :op "O" :op "Estado" :op "de"))
NER Entity: (country :name (name :op "Sao" :op "Paolo"))
Spans:
Span 26-27:  any => any
Span 28-29:  benefits => benefit-01
Span 11-12:  editorial => editorial
Span 21-22:  ethical => ethics
Span 18-19:  extreme => extreme
Span 19-20:  measure => measure
Span 2-3:  newspaper => newspaper
Span 3-6:  O Estado de => (country :name (name :op "O" :op "Estado" :op "de"))
Span 27-28:  potential => potential
Span 24-25:  problems => problem
Span 20-21:  raises => raise-01
Span 6-8:  Sao Paolo => (country :name (name :op "Sao" :op "Paolo"))

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 15-16:  20040718-20040824 => 2004
Oracle Span 22-23:  and => and
Oracle Span 26-27:  any => any
Oracle Span 28-29:  benefits => benefit-01
Oracle Span 11-12:  editorial => editorial
Oracle Span 21-22:  ethical => ethics
Oracle Span 25-26:  exceeding => exceed-01
Oracle Span 18-19:  extreme => extreme
Oracle Span 23-24:  juridical => juridical
Oracle Span 19-20:  measure => measure
Oracle Span 2-3:  newspaper => newspaper
Oracle Span 3-8:  O Estado de Sao Paolo => (name :op "Paolo" :op "Sao" :op "de" :op "Estado" :op "O")
Oracle Span 27-28:  potential => potential
Oracle Span 24-25:  problems => problem
Oracle Span 20-21:  raises => raise-01
Oracle Span 8-9:  stated => state-01
Oracle Span 13-14:  week => week

Extra span: Sao Paolo => (country :name (name :op "Sao" :op "Paolo"))
Extra span: O Estado de => (country :name (name :op "O" :op "Estado" :op "de"))
Missing span: O Estado de Sao Paolo => (name :op "Paolo" :op "Sao" :op "de" :op "Estado" :op "O")
Missing span: stated => state-01
Missing span: week => week
Missing span: and => and
Missing span: juridical => juridical
Missing span: exceeding => exceed-01
Missing span: 20040718-20040824 => 2004
Dependencies:
1	The	_	DT	DT	_	8	det	_	_
2	daily	_	JJ	JJ	_	8	amod	_	_
3	newspaper	_	NN	NN	_	8	nn	_	_
4	O	_	NNP	NNP	_	8	nn	_	_
5	Estado	_	NNP	NNP	_	8	nn	_	_
6	de	_	FW	FW	_	8	nn	_	_
7	Sao	_	NNP	NNP	_	8	nn	_	_
8	Paolo	_	NNP	NNP	_	9	nsubj	_	_
9	stated	_	VBD	VBD	_	0	root	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	an	_	DT	DT	_	12	det	_	_
12	editorial	_	NN	NN	_	10	pobj	_	_
13	the	_	DT	DT	_	14	det	_	_
14	week	_	NN	NN	_	9	tmod	_	_
15	of	_	IN	IN	_	9	prep	_	_
16	20040718-20040824	_	CD	CD	_	15	pobj	_	_
17	--	_	:	:	_	9	punct	_	_
18	the	_	DT	DT	_	20	det	_	_
19	extreme	_	JJ	JJ	_	20	amod	_	_
20	measure	_	NN	NN	_	21	nsubj	_	_
21	raises	_	VBZ	VBZ	_	9	parataxis	_	_
22	ethical	_	JJ	JJ	_	25	amod	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	juridical	_	JJ	JJ	_	22	conj	_	_
25	problems	_	NNS	NNS	_	21	dobj	_	_
26	exceeding	_	VBG	VBG	_	25	vmod	_	_
27	any	_	DT	DT	_	29	det	_	_
28	potential	_	JJ	JJ	_	29	amod	_	_
29	benefits	_	NNS	NNS	_	26	dobj	_	_
30	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, p2 / problem)
(b / benefit-01, mod, a2 / any)
(b / benefit-01, mod, p3 / potential)
(e3 / exceed-01, ARG0, p2 / problem)
(e3 / exceed-01, ARG1, b / benefit-01)
(m / measure, mod, e / extreme)
(n / newspaper, name, n2 / name)
(n2 / name, op, "Estado")
(n2 / name, op, "O")
(n2 / name, op, "Paolo")
(n2 / name, op, "Sao")
(n2 / name, op, "de")
(p2 / problem, mod, j / juridical)
(r / raise-01, ARG0, m / measure)
(r / raise-01, ARG1, a / and)
(s / state-01, ARG0, n / newspaper)
(s / state-01, ARG1, r / raise-01)
(s / state-01, medium, e4 / editorial)
(s / state-01, time, w / week)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),benefits,benefit-01,false), Span(27,28,List(1),potential,potential,false), Span(26,27,List(2),any,any,false), Span(24,25,List(3),problems,problem,false), Span(21,22,List(4),ethical,ethics,false), Span(20,21,List(5),raises,raise-01,false), Span(19,20,List(6),measure,measure,false), Span(18,19,List(7),extreme,extreme,false), Span(11,12,List(8),editorial,editorial,false), Span(6,8,List(12, 11, 10, 9),Sao Paolo,(country :name (name :op "Sao" :op "Paolo")),false), Span(3,6,List(17, 16, 15, 14, 13),O Estado de,(country :name (name :op "O" :op "Estado" :op "de")),false), Span(2,3,List(18),newspaper,newspaper,false)),Map(2 -> any, 5 -> raise-01, 12 -> "Paolo", 15 -> "O", 8 -> editorial, 18 -> newspaper, 7 -> extreme, 17 -> "de", 1 -> potential, 4 -> ethics, 11 -> "Sao", 14 -> name, 6 -> measure, 0 -> benefit-01, 9 -> country, 16 -> "Estado", 3 -> problem, 10 -> name, 13 -> country),Map(e -> ethics, n -> name, b -> benefit-01, p2 -> problem, e2 -> extreme, m -> measure, p -> potential, n3 -> newspaper, a -> any, r -> raise-01, c -> country, e3 -> editorial, c2 -> country, n2 -> name))),[Ljava.lang.String;@30b19518,Annotation([Ljava.lang.String;@363042d7,[Ljava.lang.String;@366ac49b,[Ljava.lang.String;@6ad59d92),Annotation([Ljava.lang.String;@56f0cc85,[Ljava.lang.String;@62e20a76,[Ledu.cmu.lti.nlp.amr.Dependency;@2cc44ad),Annotation([Ljava.lang.String;@44b3606b,[Ljava.lang.String;@1477089c,[Ljava.lang.String;@663411de),Annotation([Ljava.lang.String;@63dd899,[Ljava.lang.String;@59d2400d,[Ledu.cmu.lti.nlp.amr.Entity;@75cd8043))
AMR:
(b / benefit-01, ARG0, e3 / editorial)
(b / benefit-01, ARG1, m / measure)
(b / benefit-01, mod, a / any)
(b / benefit-01, mod, p / potential)
(c / country, name, n / name)
(c2 / country, mod, a / any)
(c2 / country, mod, n3 / newspaper)
(c2 / country, name, n2 / name)
(m / measure, mod, e2 / extreme)
(m / measure, poss, c / country)
(n / name, op, "Paolo")
(n / name, op, "Sao")
(n2 / name, op, "Estado")
(n2 / name, op, "O")
(n2 / name, op, "de")
(p2 / problem, mod, e / ethics)
(r / raise-01, ARG0, m / measure)
(r / raise-01, ARG1, p2 / problem)

Decoded in 429,876 microseconds
Sentence: The penalty will be applied extrajudicially by administrative decision of the Commander of the Air Force.

NER Entity: (organization :name (name :op "Air" :op "Force"))
Spans:
Span 7-8:  administrative => administrate-01
Span 14-16:  Air Force => (military :name (name :op "Force" :op "Air"))
Span 11-12:  Commander => (have-org-role-91 :ARG2 commander)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  administrative => administrate-01
Oracle Span 14-16:  Air Force => (military :name (name :op "Force" :op "Air"))
Oracle Span 4-5:  applied => apply-02
Oracle Span 11-12:  Commander => (have-org-role-91 :ARG2 commander)
Oracle Span 8-9:  decision => (thing :ARG1-of decide-01)
Oracle Span 5-6:  extrajudicially => extrajudicial
Oracle Span 1-2:  penalty => penalize-01

Missing span: applied => apply-02
Missing span: decision => (thing :ARG1-of decide-01)
Missing span: extrajudicially => extrajudicial
Missing span: penalty => penalize-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	penalty	_	NN	NN	_	5	nsubjpass	_	_
3	will	_	MD	MD	_	5	aux	_	_
4	be	_	VB	VB	_	5	auxpass	_	_
5	applied	_	VBN	VBN	_	0	root	_	_
6	extrajudicially	_	RB	RB	_	5	advmod	_	_
7	by	_	IN	IN	_	5	prep	_	_
8	administrative	_	JJ	JJ	_	9	amod	_	_
9	decision	_	NN	NN	_	7	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	Commander	_	NNP	NNP	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	Air	_	NNP	NNP	_	16	nn	_	_
16	Force	_	NNP	NNP	_	13	pobj	_	_
17	.	_	.	.	_	5	punct	_	_

Oracle:
(a / apply-02, ARG1, p / penalize-01)
(a / apply-02, instrument, t / thing)
(a / apply-02, manner, e / extrajudicial)
(d / decide-01, ARG1, t / thing)
(d / decide-01, mod, a2 / administrate-01)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG2, c / commander)
(m / military, name, n / name)
(n / name, op, "Air")
(n / name, op, "Force")

Input(Some(Graph(null,ArrayBuffer(Span(14,16,List(3, 2, 1, 0),Air Force,(military :name (name :op "Force" :op "Air")),false), Span(11,12,List(5, 4),Commander,(have-org-role-91 :ARG2 commander),false), Span(7,8,List(6),administrative,administrate-01,false)),Map(2 -> "Force", 5 -> commander, 1 -> name, 4 -> have-org-role-91, 6 -> administrate-01, 0 -> military, 3 -> "Air"),Map(n -> name, h -> have-org-role-91, m -> military, a -> administrate-01, c -> commander))),[Ljava.lang.String;@33b1c5c5,Annotation([Ljava.lang.String;@5b202a3a,[Ljava.lang.String;@10b9db7b,[Ljava.lang.String;@9ef8eb7),Annotation([Ljava.lang.String;@34cdeda2,[Ljava.lang.String;@6ee660fb,[Ledu.cmu.lti.nlp.amr.Dependency;@305a0c5f),Annotation([Ljava.lang.String;@4535b6d5,[Ljava.lang.String;@1ecee32c,[Ljava.lang.String;@4372b9b6),Annotation([Ljava.lang.String;@232a7d73,[Ljava.lang.String;@4b41e4dd,[Ledu.cmu.lti.nlp.amr.Entity;@22ffa91a))
AMR:
(a / administrate-01, ARG0, m / military)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG2, c / commander)
(m / military, name, n / name)
(n / name, op, "Air")
(n / name, op, "Force")

Decoded in 46,425 microseconds
Sentence: This person will gain life and death power over crew members and passengers of irregular flights.

Spans:
Span 9-10:  crew => crew
Span 6-7:  death => die-01
Span 3-4:  gain => gain-02
Span 4-5:  life => life
Span 10-11:  members => (have-org-role-91 :ARG2 member)
Span 1-2:  person => person
Span 7-8:  power => power
Span 0-1:  This => this

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 5-6:  and => and
Oracle Span 9-10:  crew => crew
Oracle Span 6-7:  death => die-01
Oracle Span 3-4:  gain => gain-02
Oracle Span 10-11:  members => (have-org-role-91 :ARG2 member)
Oracle Span 8-9:  over => over
Oracle Span 12-13:  passengers => passenger
Oracle Span 1-2:  person => person
Oracle Span 7-8:  power => power
Oracle Span 0-1:  This => (person :mod this)

Extra span: life => life
Incorrect span: This => this
Missing span: over => over
Missing span: and => and
Missing span: passengers => passenger
Missing span: This => (person :mod this)
Dependencies:
1	This	_	DT	DT	_	2	det	_	_
2	person	_	NN	NN	_	4	nsubj	_	_
3	will	_	MD	MD	_	4	aux	_	_
4	gain	_	VB	VB	_	0	root	_	_
5	life	_	NN	NN	_	8	nn	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	death	_	NN	NN	_	5	conj	_	_
8	power	_	NN	NN	_	4	dobj	_	_
9	over	_	IN	IN	_	4	prep	_	_
10	crew	_	NN	NN	_	11	nn	_	_
11	members	_	NNS	NNS	_	9	pobj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	passengers	_	NNS	NNS	_	11	conj	_	_
14	of	_	IN	IN	_	11	prep	_	_
15	irregular	_	NN	NN	_	16	nn	_	_
16	flights	_	NNS	NNS	_	14	pobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / passenger)
(g / gain-02, ARG0, p / person)
(g / gain-02, ARG1, p5 / power)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, c / crew)
(h / have-org-role-91, ARG2, m / member)
(o / over, op, a2 / and)
(p / person, mod, t / this)
(p5 / power, mod, d2 / die-01)
(p5 / power, mod, o / over)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(1, 0),members,(have-org-role-91 :ARG2 member),false), Span(9,10,List(2),crew,crew,false), Span(7,8,List(3),power,power,false), Span(6,7,List(4),death,die-01,false), Span(4,5,List(5),life,life,false), Span(3,4,List(6),gain,gain-02,false), Span(1,2,List(7),person,person,false), Span(0,1,List(8),This,this,false)),Map(2 -> crew, 5 -> life, 8 -> this, 7 -> person, 1 -> member, 4 -> die-01, 6 -> gain-02, 0 -> have-org-role-91, 3 -> power),Map(h -> have-org-role-91, t -> this, p2 -> person, d -> die-01, m -> member, g -> gain-02, p -> power, l -> life, c -> crew))),[Ljava.lang.String;@74960bfa,Annotation([Ljava.lang.String;@42721fe,[Ljava.lang.String;@40844aab,[Ljava.lang.String;@1f6c9cd8),Annotation([Ljava.lang.String;@5b619d14,[Ljava.lang.String;@66746f57,[Ledu.cmu.lti.nlp.amr.Dependency;@447a020),Annotation([Ljava.lang.String;@7f36662c,[Ljava.lang.String;@28e8dde3,[Ljava.lang.String;@6d23017e),Annotation([Ljava.lang.String;@54dcfa5a,[Ljava.lang.String;@1817f1eb,[Ledu.cmu.lti.nlp.amr.Entity;@767e20cf))
AMR:
(d / die-01, ARG0, p / power)
(d / die-01, ARG1, l / life)
(g / gain-02, ARG0, p2 / person)
(g / gain-02, ARG1, p / power)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / crew)
(h / have-org-role-91, ARG2, m / member)
(p2 / person, mod, t / this)

Decoded in 245,277 microseconds
Sentence: In 2002 Brazil inaugurated the 1.4 billion dollar SIVAM radar system allowing the government to monitor air activity throughout the expansive Amazon region for the first time.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 5-6:  1.4 => 1.4
Span 1-2:  2002 => (date-entity :year 2002)
Span 17-18:  activity => activity
Span 11-12:  allowing => allow-01
Span 2-3:  Brazil => (country :name (name :op "Brazil"))
Span 7-8:  dollar => (monetary-quantity :unit dollar)
Span 15-16:  monitor => monitor-01
Span 9-10:  radar => radar
Span 22-23:  region => region
Span 10-11:  system => system

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 1-2:  2002 => (date-entity :year 2002)
Oracle Span 17-18:  activity => activity
Oracle Span 16-17:  air => air
Oracle Span 11-12:  allowing => allow-01
Oracle Span 21-22:  Amazon => (world-region :name (name :op "Amazon"))
Oracle Span 2-3:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 7-8:  dollar => (monetary-quantity :unit dollar)
Oracle Span 20-21:  expansive => expansive
Oracle Span 13-14:  government => (government-organization :ARG0-of govern-01)
Oracle Span 3-4:  inaugurated => inaugurate-02
Oracle Span 15-16:  monitor => monitor-01
Oracle Span 9-10:  radar => radar
Oracle Span 8-9:  SIVAM => (name :op "SIVAM")
Oracle Span 10-11:  system => system
Oracle Span 18-19:  throughout => throughout

Extra span: region => region
Extra span: 1.4 => 1.4
Missing span: SIVAM => (name :op "SIVAM")
Missing span: Amazon => (world-region :name (name :op "Amazon"))
Missing span: inaugurated => inaugurate-02
Missing span: expansive => expansive
Missing span: throughout => throughout
Missing span: air => air
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	In	_	IN	IN	_	4	prep	_	_
2	2002	_	CD	CD	_	1	pobj	_	_
3	Brazil	_	NNP	NNP	_	4	nsubj	_	_
4	inaugurated	_	VBZ	VBZ	_	0	root	_	_
5	the	_	DT	DT	_	11	det	_	_
6	1.4	_	CD	CD	_	7	number	_	_
7	billion	_	CD	CD	_	8	dep	_	_
8	dollar	_	NN	NN	_	11	dep	_	_
9	SIVAM	_	NNP	NNP	_	11	nn	_	_
10	radar	_	NN	NN	_	11	nn	_	_
11	system	_	NN	NN	_	4	dobj	_	_
12	allowing	_	VBG	VBG	_	11	vmod	_	_
13	the	_	DT	DT	_	14	det	_	_
14	government	_	NN	NN	_	12	dobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	monitor	_	VB	VB	_	14	vmod	_	_
17	air	_	NN	NN	_	18	nn	_	_
18	activity	_	NN	NN	_	16	dobj	_	_
19	throughout	_	IN	IN	_	16	prep	_	_
20	the	_	DT	DT	_	23	det	_	_
21	expansive	_	JJ	JJ	_	23	amod	_	_
22	Amazon	_	NNP	NNP	_	23	nn	_	_
23	region	_	NN	NN	_	19	pobj	_	_
24	for	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	27	det	_	_
26	first	_	JJ	JJ	_	27	amod	_	_
27	time	_	NN	NN	_	24	pobj	_	_
28	.	_	.	.	_	4	punct	_	_

Oracle:
(a / allow-01, ARG0, s / system)
(a / allow-01, ARG1, m2 / monitor-01)
(a2 / activity, mod, a3 / air)
(c / country, name, n / name)
(d / date-entity, year, 2002)
(g2 / govern-01, ARG0, g / government-organization)
(i / inaugurate-02, ARG0, c / country)
(i / inaugurate-02, ARG1, s / system)
(i / inaugurate-02, time, d / date-entity)
(m / monetary-quantity, unit, d2 / dollar)
(m2 / monitor-01, ARG0, g / government-organization)
(m2 / monitor-01, ARG1, a2 / activity)
(m2 / monitor-01, location, w / world-region)
(n / name, op, "Brazil")
(n2 / name, op, "SIVAM")
(n3 / name, op, "Amazon")
(s / system, mod, r / radar)
(s / system, name, n2 / name)
(w / world-region, extent, t / throughout)
(w / world-region, mod, e / expansive)
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),region,region,false), Span(17,18,List(1),activity,activity,false), Span(15,16,List(2),monitor,monitor-01,false), Span(11,12,List(3),allowing,allow-01,false), Span(10,11,List(4),system,system,false), Span(9,10,List(5),radar,radar,false), Span(7,8,List(7, 6),dollar,(monetary-quantity :unit dollar),false), Span(5,6,List(8),1.4,1.4,false), Span(2,3,List(11, 10, 9),Brazil,(country :name (name :op "Brazil")),false), Span(1,2,List(13, 12),2002,(date-entity :year 2002),false)),Map(2 -> monitor-01, 5 -> radar, 12 -> date-entity, 8 -> 1.4, 7 -> dollar, 1 -> activity, 4 -> system, 11 -> "Brazil", 6 -> monetary-quantity, 0 -> region, 9 -> country, 3 -> allow-01, 10 -> name, 13 -> 2002),Map(n -> name, 2 -> 2002, m2 -> monetary-quantity, s -> system, m -> monitor-01, d -> dollar, 1 -> 1.4, r2 -> radar, a -> activity, d2 -> date-entity, r -> region, a2 -> allow-01, c -> country))),[Ljava.lang.String;@3a3e78f,Annotation([Ljava.lang.String;@301ec38b,[Ljava.lang.String;@17a1e4ca,[Ljava.lang.String;@10ded6a9),Annotation([Ljava.lang.String;@c5dc4a2,[Ljava.lang.String;@4a194c39,[Ledu.cmu.lti.nlp.amr.Dependency;@52066604),Annotation([Ljava.lang.String;@340b9973,[Ljava.lang.String;@56113384,[Ljava.lang.String;@5669c5fb),Annotation([Ljava.lang.String;@373ebf74,[Ljava.lang.String;@5f9678e1,[Ledu.cmu.lti.nlp.amr.Entity;@c4ed84))
AMR:
(1 / 1.4, op, m / monitor-01)
(a2 / allow-01, ARG0, s / system)
(a2 / allow-01, ARG1, m / monitor-01)
(a2 / allow-01, location, c / country)
(c / country, name, n / name)
(d2 / date-entity, op, m / monitor-01)
(d2 / date-entity, year, 2 / 2002)
(m / monitor-01, ARG0, m2 / monetary-quantity)
(m / monitor-01, ARG1, a / activity)
(m / monitor-01, ARG2, r / region)
(m2 / monetary-quantity, unit, d / dollar)
(n / name, op, "Brazil")
(s / system, mod, r2 / radar)

Decoded in 418,251 microseconds
Sentence: The system uses American technology.

NER Entity: (thing :name (name :op "American"))
Spans:
Span 1-2:  system => system
Span 4-5:  technology => technology
Span 2-3:  uses => use-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  system => system
Oracle Span 4-5:  technology => technology
Oracle Span 2-3:  uses => use-01

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	system	_	NN	NN	_	3	nsubj	_	_
3	uses	_	VBZ	VBZ	_	0	root	_	_
4	American	_	JJ	JJ	_	5	amod	_	_
5	technology	_	NN	NN	_	3	dobj	_	_
6	.	_	.	.	_	3	punct	_	_

Oracle:
(u / use-01, ARG0, s / system)
(u / use-01, ARG1, t / technology)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),technology,technology,false), Span(2,3,List(1),uses,use-01,false), Span(1,2,List(2),system,system,false)),Map(2 -> system, 1 -> use-01, 0 -> technology),Map(t -> technology, s -> system, u -> use-01))),[Ljava.lang.String;@189aa67a,Annotation([Ljava.lang.String;@5a9d6f02,[Ljava.lang.String;@362045c0,[Ljava.lang.String;@112f364d),Annotation([Ljava.lang.String;@5ccbeb64,[Ljava.lang.String;@6d9f7a80,[Ledu.cmu.lti.nlp.amr.Dependency;@59252cb6),Annotation([Ljava.lang.String;@31d0e481,[Ljava.lang.String;@3243b914,[Ljava.lang.String;@241e8ea6),Annotation([Ljava.lang.String;@542e560f,[Ljava.lang.String;@626c44e7,[Ledu.cmu.lti.nlp.amr.Entity;@4dc8caa7))
AMR:
(u / use-01, ARG0, s / system)
(u / use-01, ARG1, t / technology)

Decoded in 11,124 microseconds
Sentence: Illegal Flights initially declined 30 percent due to trafficker's concerns about improved tracking capabilities but subsequently reaccelerated.

Spans:
Span 14-15:  capabilities => capable-41
Span 10-11:  concerns => concern-01
Span 0-1:  Illegal => law
Span 12-13:  improved => improve-01
Span 2-3:  initially => initial
Span 5-6:  percent => percentage-entity
Span 16-17:  subsequently => subsequent
Span 13-14:  tracking => track-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 4-5:  30 => 30
Oracle Span 15-16:  but => contrast-01
Oracle Span 14-15:  capabilities => capable-41
Oracle Span 10-11:  concerns => concern-01
Oracle Span 3-4:  declined => decline-01
Oracle Span 0-1:  Illegal => law
Oracle Span 12-13:  improved => improve-01
Oracle Span 2-3:  initially => initial
Oracle Span 5-6:  percent => percentage-entity
Oracle Span 17-18:  reaccelerated => reaccelerate-00
Oracle Span 16-17:  subsequently => subsequent
Oracle Span 13-14:  tracking => track-01
Oracle Span 8-9:  trafficker => (person :ARG0-of traffic-00)

Missing span: but => contrast-01
Missing span: reaccelerated => reaccelerate-00
Missing span: declined => decline-01
Missing span: 30 => 30
Missing span: trafficker => (person :ARG0-of traffic-00)
Dependencies:
1	Illegal	_	JJ	JJ	_	2	amod	_	_
2	Flights	_	NNS	NNS	_	4	nsubj	_	_
3	initially	_	RB	RB	_	4	advmod	_	_
4	declined	_	VBD	VBD	_	0	root	_	_
5	30	_	CD	CD	_	6	num	_	_
6	percent	_	NN	NN	_	4	dobj	_	_
7	due	_	JJ	JJ	_	6	amod	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	trafficker	_	NN	NN	_	11	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	concerns	_	NNS	NNS	_	8	pobj	_	_
12	about	_	IN	IN	_	4	prep	_	_
13	improved	_	VBN	VBN	_	15	amod	_	_
14	tracking	_	NN	NN	_	15	nn	_	_
15	capabilities	_	NNS	NNS	_	12	pobj	_	_
16	but	_	CC	CC	_	4	cc	_	_
17	subsequently	_	RB	RB	_	18	advmod	_	_
18	reaccelerated	_	VBD	VBD	_	4	conj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(c2 / contrast-01, ARG1, d / decline-01)
(c2 / contrast-01, ARG2, r / reaccelerate-00)
(c3 / concern-01, ARG0, c4 / capable-41)
(c3 / concern-01, ARG1, p2 / person)
(c4 / capable-41, ARG1, t2 / track-01)
(d / decline-01, ARG2, p / percentage-entity)
(d / decline-01, time, i2 / initial)
(i / improve-01, ARG1, c4 / capable-41)
(p / percentage-entity, value, 3 / 30)
(r / reaccelerate-00, time, s / subsequent)
(t / traffic-00, ARG0, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),subsequently,subsequent,false), Span(14,15,List(1),capabilities,capable-41,false), Span(13,14,List(2),tracking,track-01,false), Span(12,13,List(3),improved,improve-01,false), Span(10,11,List(4),concerns,concern-01,false), Span(5,6,List(5),percent,percentage-entity,false), Span(2,3,List(6),initially,initial,false), Span(0,1,List(7),Illegal,law,false)),Map(2 -> track-01, 5 -> percentage-entity, 7 -> law, 1 -> capable-41, 4 -> concern-01, 6 -> initial, 0 -> subsequent, 3 -> improve-01),Map(t -> track-01, s -> subsequent, p -> percentage-entity, i2 -> initial, i -> improve-01, l -> law, c -> capable-41, c2 -> concern-01))),[Ljava.lang.String;@1d730606,Annotation([Ljava.lang.String;@3bcbb589,[Ljava.lang.String;@3b00856b,[Ljava.lang.String;@3016fd5e),Annotation([Ljava.lang.String;@35d08e6c,[Ljava.lang.String;@53d102a2,[Ledu.cmu.lti.nlp.amr.Dependency;@6c45ee6e),Annotation([Ljava.lang.String;@6b3e12b5,[Ljava.lang.String;@5aac4250,[Ljava.lang.String;@1338fb5),Annotation([Ljava.lang.String;@42463763,[Ljava.lang.String;@59f63e24,[Ledu.cmu.lti.nlp.amr.Entity;@61f05988))
AMR:
(c / capable-41, ARG2, t / track-01)
(c2 / concern-01, ARG0, p / percentage-entity)
(c2 / concern-01, ARG1, i / improve-01)
(i / improve-01, ARG1, c / capable-41)
(i / improve-01, ARG2, s / subsequent)
(p / percentage-entity, mod, i2 / initial)
(t / track-01, ARG1, l / law)

Decoded in 124,122 microseconds
Sentence: Brazil recorded 4128 unauthorized flights in 2003.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 6-7:  2003 => (date-entity :year 2003)
Span 2-3:  4128 => (date-entity :year 4128)
Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Span 1-2:  recorded => record-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  2003 => (date-entity :year 2003)
Oracle Span 2-3:  4128 => 4128
Oracle Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 1-2:  recorded => record-01
Oracle Span 3-4:  unauthorized => (authorize-01 :polarity -)

Incorrect span: 4128 => (date-entity :year 4128)
Missing span: 4128 => 4128
Missing span: unauthorized => (authorize-01 :polarity -)
Dependencies:
1	Brazil	_	NNP	NNP	_	2	nsubj	_	_
2	recorded	_	VBD	VBD	_	0	root	_	_
3	4128	_	CD	CD	_	5	num	_	_
4	unauthorized	_	JJ	JJ	_	5	amod	_	_
5	flights	_	NNS	NNS	_	2	dobj	_	_
6	in	_	IN	IN	_	2	prep	_	_
7	2003	_	CD	CD	_	6	pobj	_	_
8	.	_	.	.	_	2	punct	_	_

Oracle:
(a / authorize-01, polarity, -)
(c / country, name, n / name)
(d2 / date-entity, year, 2003)
(n / name, op, "Brazil")
(r / record-01, ARG0, c / country)
(r / record-01, time, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(1, 0),2003,(date-entity :year 2003),false), Span(2,3,List(3, 2),4128,(date-entity :year 4128),false), Span(1,2,List(4),recorded,record-01,false), Span(0,1,List(7, 6, 5),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> date-entity, 5 -> country, 7 -> "Brazil", 1 -> 2003, 4 -> record-01, 6 -> name, 0 -> date-entity, 3 -> 4128),Map(n -> name, 2 -> 2003, d -> date-entity, 4 -> 4128, d2 -> date-entity, r -> record-01, c -> country))),[Ljava.lang.String;@7ca33c24,Annotation([Ljava.lang.String;@fade1fc,[Ljava.lang.String;@67c2e933,[Ljava.lang.String;@41dd05a),Annotation([Ljava.lang.String;@613a8ee1,[Ljava.lang.String;@178213b,[Ledu.cmu.lti.nlp.amr.Dependency;@7103cb56),Annotation([Ljava.lang.String;@1b765a2c,[Ljava.lang.String;@2e8e8225,[Ljava.lang.String;@6ebf0f36),Annotation([Ljava.lang.String;@18920cc,[Ljava.lang.String;@2807bdeb,[Ledu.cmu.lti.nlp.amr.Entity;@72c28d64))
AMR:
(c / country, name, n / name)
(d / date-entity, year, 2 / 2003)
(d2 / date-entity, year, 4 / 4128)
(n / name, op, "Brazil")
(r / record-01, ARG0, c / country)
(r / record-01, ARG1, d2 / date-entity)
(r / record-01, time, d / date-entity)

Decoded in 31,517 microseconds
Sentence: Some of these flights were innocent violations by ranchers in the Amazon flying between plantations.

NER Entity: (country :name (name :op "Amazon"))
Spans:
Span 12-13:  flying => fly-01
Span 6-7:  violations => violate-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 11-12:  Amazon => (world-region :name (name :op "Amazon"))
Oracle Span 13-14:  between => between
Oracle Span 12-13:  flying => fly-01
Oracle Span 5-6:  innocent => innocent-41
Oracle Span 1-2:  of => include-91
Oracle Span 14-15:  plantations => plantation
Oracle Span 8-9:  ranchers => (person :ARG0-of ranch-01)
Oracle Span 0-1:  Some => some
Oracle Span 6-7:  violations => violate-01

Missing span: Amazon => (world-region :name (name :op "Amazon"))
Missing span: ranchers => (person :ARG0-of ranch-01)
Missing span: between => between
Missing span: plantations => plantation
Missing span: innocent => innocent-41
Missing span: of => include-91
Missing span: Some => some
Dependencies:
1	Some	_	DT	DT	_	7	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	these	_	DT	DT	_	4	det	_	_
4	flights	_	NNS	NNS	_	2	pobj	_	_
5	were	_	VBD	VBD	_	7	cop	_	_
6	innocent	_	JJ	JJ	_	7	amod	_	_
7	violations	_	NNS	NNS	_	0	root	_	_
8	by	_	IN	IN	_	7	prep	_	_
9	ranchers	_	NNS	NNS	_	13	nsubj	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	Amazon	_	NNP	NNP	_	10	pobj	_	_
13	flying	_	VBG	VBG	_	8	pcomp	_	_
14	between	_	IN	IN	_	13	prep	_	_
15	plantations	_	NNS	NNS	_	14	pobj	_	_
16	.	_	.	.	_	7	punct	_	_

Oracle:
(b / between, op, p3 / plantation)
(f2 / fly-01, mod, s / some)
(i / innocent-41, ARG1, v2 / violate-01)
(i2 / include-91, ARG1, f2 / fly-01)
(n / name, op, "Amazon")
(p / person, location, w / world-region)
(r / ranch-01, ARG0, p / person)
(v2 / violate-01, ARG0, p / person)
(v2 / violate-01, ARG1, f2 / fly-01)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),flying,fly-01,false), Span(6,7,List(1),violations,violate-01,false)),Map(1 -> violate-01, 0 -> fly-01),Map(v -> violate-01, f -> fly-01))),[Ljava.lang.String;@6492fab5,Annotation([Ljava.lang.String;@2c5529ab,[Ljava.lang.String;@39a8312f,[Ljava.lang.String;@5f6722d3),Annotation([Ljava.lang.String;@2c532cd8,[Ljava.lang.String;@294e5088,[Ledu.cmu.lti.nlp.amr.Dependency;@51972dc7),Annotation([Ljava.lang.String;@3700ec9c,[Ljava.lang.String;@2002348,[Ljava.lang.String;@5911e990),Annotation([Ljava.lang.String;@31000e60,[Ljava.lang.String;@1d470d0,[Ledu.cmu.lti.nlp.amr.Entity;@24d09c1))
AMR:
(v / violate-01, ARG1, f / fly-01)

Decoded in 31,577 microseconds
Sentence: Viegas stated that there was a significant increase in deliberate violations of Brazilian airspace, apparently by drug smugglers realizing that the government was incapable of retaliation.

NER Entity: (person :name (name :op "Viegas"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 13-14:  airspace => airspace
Span 15-16:  apparently => apparent
Span 12-13:  Brazilian => (country :name (name :op "Brazil"))
Span 17-18:  drug => drug
Span 7-8:  increase => increase-01
Span 19-20:  realizing => realize-02
Span 26-27:  retaliation => retaliate-01
Span 6-7:  significant => significant
Span 18-19:  smugglers => (person :ARG0-of smuggle-01)
Span 10-11:  violations => violate-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 13-14:  airspace => airspace
Oracle Span 12-13:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 9-10:  deliberate => deliberate
Oracle Span 17-18:  drug => drug
Oracle Span 22-23:  government => (government-organization :ARG0-of govern-01)
Oracle Span 24-25:  incapable => (capable-41 :polarity -)
Oracle Span 7-8:  increase => increase-01
Oracle Span 19-20:  realizing => realize-01
Oracle Span 26-27:  retaliation => retaliate-01
Oracle Span 6-7:  significant => significant
Oracle Span 18-19:  smugglers => (person :ARG0-of smuggle-01)
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Viegas => (person :name (name :op "Viegas"))
Oracle Span 10-11:  violations => violate-01

Incorrect span: realizing => realize-02
Extra span: apparently => apparent
Missing span: Viegas => (person :name (name :op "Viegas"))
Missing span: stated => state-01
Missing span: realizing => realize-01
Missing span: incapable => (capable-41 :polarity -)
Missing span: deliberate => deliberate
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Viegas	_	NNS	NNS	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	there	_	EX	EX	_	5	expl	_	_
5	was	_	VBD	VBD	_	2	ccomp	_	_
6	a	_	DT	DT	_	8	det	_	_
7	significant	_	JJ	JJ	_	8	amod	_	_
8	increase	_	NN	NN	_	5	nsubj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	deliberate	_	JJ	JJ	_	11	amod	_	_
11	violations	_	NNS	NNS	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	Brazilian	_	JJ	JJ	_	14	amod	_	_
14	airspace	_	NN	NN	_	12	pobj	_	_
15	,	_	,	,	_	5	punct	_	_
16	apparently	_	RB	RB	_	17	advmod	_	_
17	by	_	IN	IN	_	5	prep	_	_
18	drug	_	NN	NN	_	19	nn	_	_
19	smugglers	_	NNS	NNS	_	20	nsubj	_	_
20	realizing	_	VBG	VBG	_	17	pcomp	_	_
21	that	_	IN	IN	_	25	mark	_	_
22	the	_	DT	DT	_	23	det	_	_
23	government	_	NN	NN	_	25	nsubj	_	_
24	was	_	VBD	VBD	_	25	cop	_	_
25	incapable	_	JJ	JJ	_	20	ccomp	_	_
26	of	_	IN	IN	_	17	prep	_	_
27	retaliation	_	NN	NN	_	26	pobj	_	_
28	.	_	.	.	_	2	punct	_	_

Oracle:
(a / airspace, mod, c / country)
(c / country, name, n2 / name)
(c2 / capable-41, ARG1, g / government-organization)
(c2 / capable-41, ARG2, r2 / retaliate-01)
(c2 / capable-41, polarity, -)
(g2 / govern-01, ARG0, g / government-organization)
(i / increase-01, ARG1, v / violate-01)
(i / increase-01, ARG2, s2 / significant)
(n / name, op, "Viegas")
(n2 / name, op, "Brazil")
(p / person, name, n / name)
(r / realize-01, ARG0, p2 / person)
(r / realize-01, ARG1, c2 / capable-41)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, i / increase-01)
(s3 / smuggle-01, ARG0, p2 / person)
(s3 / smuggle-01, ARG1, d2 / drug)
(v / violate-01, ARG0, p2 / person)
(v / violate-01, ARG1, a / airspace)
(v / violate-01, mod, d / deliberate)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),retaliation,retaliate-01,false), Span(19,20,List(1),realizing,realize-02,false), Span(18,19,List(3, 2),smugglers,(person :ARG0-of smuggle-01),false), Span(17,18,List(4),drug,drug,false), Span(15,16,List(5),apparently,apparent,false), Span(13,14,List(6),airspace,airspace,false), Span(12,13,List(9, 8, 7),Brazilian,(country :name (name :op "Brazil")),false), Span(10,11,List(10),violations,violate-01,false), Span(7,8,List(11),increase,increase-01,false), Span(6,7,List(12),significant,significant,false)),Map(2 -> person, 5 -> apparent, 12 -> significant, 8 -> name, 7 -> country, 1 -> realize-02, 4 -> drug, 11 -> increase-01, 6 -> airspace, 0 -> retaliate-01, 9 -> "Brazil", 3 -> smuggle-01, 10 -> violate-01),Map(n -> name, s2 -> significant, s -> smuggle-01, v -> violate-01, d -> drug, p -> person, r2 -> realize-02, a -> apparent, i -> increase-01, a2 -> airspace, r -> retaliate-01, c -> country))),[Ljava.lang.String;@54c62d71,Annotation([Ljava.lang.String;@65045a87,[Ljava.lang.String;@47f4e407,[Ljava.lang.String;@2d1dee39),Annotation([Ljava.lang.String;@48d5f34e,[Ljava.lang.String;@fc258b1,[Ledu.cmu.lti.nlp.amr.Dependency;@6ff65192),Annotation([Ljava.lang.String;@2dd80673,[Ljava.lang.String;@4af0df05,[Ljava.lang.String;@57ea113a),Annotation([Ljava.lang.String;@acdb094,[Ljava.lang.String;@674bd420,[Ledu.cmu.lti.nlp.amr.Entity;@2b0f373b))
AMR:
(a2 / airspace, mod, c / country)
(c / country, name, n / name)
(i / increase-01, ARG1, v / violate-01)
(i / increase-01, mod, s2 / significant)
(n / name, op, "Brazil")
(r / retaliate-01, ARG1, p / person)
(r2 / realize-02, ARG0, p / person)
(r2 / realize-02, ARG1, a / apparent)
(r2 / realize-02, ARG2, i / increase-01)
(s / smuggle-01, ARG0, p / person)
(s / smuggle-01, ARG1, d / drug)
(v / violate-01, ARG1, a2 / airspace)

Decoded in 332,361 microseconds
Sentence: 20010400 Rio de Janeiro's most notorious drug boss, Fernandinho Beira-Mar, was captured in Colombia in a guns-for drugs pipeline involving left-wing guerrillas.

mkDayMonthYear(20010400,00,04,2001)
NER Entity: (country :name (name :op "Rio" :op "de" :op "Janeiro"))
NER Entity: (person :name (name :op "Fernandinho" :op "Beira" :op "-" :op "Mar"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Colombia"))
mkDayMonthYear(20010400,00,04,2001)
Spans:
Span 0-1:  20010400 => (date-entity :day 0 :month 4 :year 2001)
Span 16-17:  captured => capture-01
Span 18-19:  Colombia => (country :name (name :op "Colombia"))
Span 7-8:  drug => drug
Span 10-12:  Fernandinho Beira => (person :name (name :op "Fernandinho" :op "Beira" :op "-" :op "Mar"))
Span 30-31:  guerrillas => guerrilla
Span 21-22:  guns => gun
Span 26-27:  involving => involve-01
Span 13-14:  Mar => (date-entity :month 3)
Span 6-7:  notorious => notorious-41
Span 1-4:  Rio de Janeiro => (name :op "Janeiro" :op "de" :op "Rio")
Span 29-30:  wing => wing

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 0-1:  20010400 => 2001
Oracle Span 8-9:  boss => (have-org-role-91 :ARG2 boss)
Oracle Span 16-17:  captured => capture-01
Oracle Span 18-19:  Colombia => (country :name (name :op "Colombia"))
Oracle Span 7-8:  drug => drug
Oracle Span 24-25:  drugs => drug
Oracle Span 10-14:  Fernandinho Beira - Mar => (person :name (name :op "Beira-Mar" :op "Fernandinho"))
Oracle Span 30-31:  guerrillas => guerrilla
Oracle Span 21-22:  guns => gun
Oracle Span 26-27:  involving => involve-01
Oracle Span 27-28:  left => left
Oracle Span 5-6:  most => most
Oracle Span 6-7:  notorious => notorious-41
Oracle Span 25-26:  pipeline => pipeline
Oracle Span 1-4:  Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Oracle Span 29-30:  wing => wing

Extra span: Mar => (date-entity :month 3)
Extra span: Fernandinho Beira => (person :name (name :op "Fernandinho" :op "Beira" :op "-" :op "Mar"))
Incorrect span: Rio de Janeiro => (name :op "Janeiro" :op "de" :op "Rio")
Incorrect span: 20010400 => (date-entity :day 0 :month 4 :year 2001)
Missing span: Fernandinho Beira - Mar => (person :name (name :op "Beira-Mar" :op "Fernandinho"))
Missing span: Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Missing span: pipeline => pipeline
Missing span: left => left
Missing span: most => most
Missing span: drugs => drug
Missing span: boss => (have-org-role-91 :ARG2 boss)
Missing span: 20010400 => 2001
Dependencies:
1	20010400	_	NNP	NNP	_	4	nn	_	_
2	Rio	_	NNP	NNP	_	4	nn	_	_
3	de	_	NNP	NNP	_	4	nn	_	_
4	Janeiro	_	NNP	NNP	_	9	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	most	_	JJS	JJS	_	9	amod	_	_
7	notorious	_	JJ	JJ	_	9	amod	_	_
8	drug	_	NN	NN	_	9	nn	_	_
9	boss	_	NN	NN	_	15	nsubjpass	_	_
10	,	_	,	,	_	9	punct	_	_
11	Fernandinho	_	NNP	NNP	_	12	nn	_	_
12	Beira-Mar	_	NNP	NNP	_	9	appos	_	_
13	,	_	,	,	_	9	punct	_	_
14	was	_	VBD	VBD	_	15	auxpass	_	_
15	captured	_	VBN	VBN	_	0	root	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	Colombia	_	NNP	NNP	_	16	pobj	_	_
18	in	_	IN	IN	_	15	prep	_	_
19	a	_	DT	DT	_	22	det	_	_
20	guns-for	_	JJ	JJ	_	22	amod	_	_
21	drugs	_	NNS	NNS	_	22	nn	_	_
22	pipeline	_	NN	NN	_	18	pobj	_	_
23	involving	_	VBG	VBG	_	22	vmod	_	_
24	left-wing	_	JJ	JJ	_	25	amod	_	_
25	guerrillas	_	NNS	NNS	_	23	dobj	_	_
26	.	_	.	.	_	15	punct	_	_

Oracle:
(c / capture-01, ARG1, p2 / person)
(c / capture-01, location, c3 / country)
(c / capture-01, location, p / pipeline)
(c2 / city, name, n3 / name)
(c3 / country, name, n4 / name)
(g / gun, prep-for, d3 / drug)
(g2 / guerrilla, mod, w / wing)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, b / boss)
(i / involve-01, ARG1, g2 / guerrilla)
(i / involve-01, ARG2, p / pipeline)
(n / name, op, "Beira-Mar")
(n / name, op, "Fernandinho")
(n2 / notorious-41, ARG1, p2 / person)
(n2 / notorious-41, degree, m / most)
(n3 / name, op, "Janeiro")
(n3 / name, op, "Rio")
(n3 / name, op, "de")
(n4 / name, op, "Colombia")
(p / pipeline, mod, g / gun)
(p2 / person, mod, c2 / city)
(p2 / person, name, n / name)
(w / wing, mod, l / left)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),guerrillas,guerrilla,false), Span(29,30,List(1),wing,wing,false), Span(26,27,List(2),involving,involve-01,false), Span(21,22,List(3),guns,gun,false), Span(18,19,List(6, 5, 4),Colombia,(country :name (name :op "Colombia")),false), Span(16,17,List(7),captured,capture-01,false), Span(13,14,List(9, 8),Mar,(date-entity :month 3),false), Span(10,12,List(15, 14, 13, 12, 11, 10),Fernandinho Beira,(person :name (name :op "Fernandinho" :op "Beira" :op "-" :op "Mar")),false), Span(7,8,List(16),drug,drug,false), Span(6,7,List(17),notorious,notorious-41,false), Span(1,4,List(21, 20, 19, 18),Rio de Janeiro,(name :op "Janeiro" :op "de" :op "Rio"),false), Span(0,1,List(25, 24, 23, 22),20010400,(date-entity :day 0 :month 4 :year 2001),false)),Map(2 -> involve-01, 5 -> name, 12 -> "Fernandinho", 8 -> date-entity, 15 -> "Mar", 21 -> "Rio", 18 -> name, 24 -> 4, 7 -> capture-01, 1 -> wing, 17 -> notorious-41, 23 -> 0, 4 -> country, 11 -> name, 14 -> "-", 20 -> "de", 6 -> "Colombia", 9 -> 3, 0 -> guerrilla, 22 -> date-entity, 16 -> drug, 19 -> "Janeiro", 10 -> person, 3 -> gun, 25 -> 2001, 13 -> "Beira"),Map(w -> wing, n -> name, 2 -> 2001, d3 -> date-entity, n4 -> name, d -> date-entity, g2 -> gun, g -> guerrilla, p -> person, 4 -> 4, n3 -> notorious-41, d2 -> drug, i -> involve-01, c -> country, 0 -> 0, 3 -> 3, c2 -> capture-01, n2 -> name))),[Ljava.lang.String;@2ceb80a1,Annotation([Ljava.lang.String;@4b45dcb8,[Ljava.lang.String;@7216fb24,[Ljava.lang.String;@2072acb2),Annotation([Ljava.lang.String;@50ecde95,[Ljava.lang.String;@35a9782c,[Ledu.cmu.lti.nlp.amr.Dependency;@70a36a66),Annotation([Ljava.lang.String;@45815ffc,[Ljava.lang.String;@732f29af,[Ljava.lang.String;@d3957fe),Annotation([Ljava.lang.String;@6622fc65,[Ljava.lang.String;@299321e2,[Ledu.cmu.lti.nlp.amr.Entity;@23fb172e))
AMR:
(4 / 4, name, n4 / name)
(c / country, name, n / name)
(c / country, name, n4 / name)
(c2 / capture-01, ARG1, p / person)
(c2 / capture-01, location, c / country)
(c2 / capture-01, purpose, i / involve-01)
(d / date-entity, mod, p / person)
(d / date-entity, month, 3 / 3)
(d3 / date-entity, day, 0 / 0)
(d3 / date-entity, month, 4 / 4)
(d3 / date-entity, year, 2 / 2001)
(g / guerrilla, mod, w / wing)
(i / involve-01, ARG1, g / guerrilla)
(n / name, op, "Colombia")
(n2 / name, op, "-")
(n2 / name, op, "Beira")
(n2 / name, op, "Fernandinho")
(n2 / name, op, "Mar")
(n3 / notorious-41, ARG0, g2 / gun)
(n3 / notorious-41, ARG1, d2 / drug)
(n3 / notorious-41, ARG2, i / involve-01)
(n4 / name, op, "Janeiro")
(n4 / name, op, "Rio")
(n4 / name, op, "de")
(p / person, name, n2 / name)

Decoded in 899,293 microseconds
Sentence: Brazil's northern Amazon corridor has become an increasingly busy and essential route in the global drug trade and is used for smuggling arms, gold and diamonds.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 6-7:  become => become-01
Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Span 9-10:  busy => busy
Span 16-17:  drug => drug
Span 11-12:  essential => essential
Span 15-16:  global => globe
Span 25-26:  gold => gold
Span 8-9:  increasingly => increase-01
Span 2-3:  northern => north
Span 12-13:  route => route
Span 22-23:  smuggling => smuggle-01
Span 17-18:  trade => trade-01
Span 20-21:  used => use-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 3-4:  Amazon => (world-region :name (name :op "Amazon"))
Oracle Span 10-11:  and => and
Oracle Span 18-19:  and => and
Oracle Span 23-24:  arms => arm
Oracle Span 6-7:  become => become-01
Oracle Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 9-10:  busy => busy
Oracle Span 4-5:  corridor => corridor
Oracle Span 27-28:  diamonds => diamond
Oracle Span 16-17:  drug => drug
Oracle Span 11-12:  essential => essential
Oracle Span 15-16:  global => globe
Oracle Span 25-26:  gold => gold
Oracle Span 8-9:  increasingly => increase-01
Oracle Span 2-3:  northern => north
Oracle Span 12-13:  route => route
Oracle Span 22-23:  smuggling => smuggle-01
Oracle Span 17-18:  trade => trade-01
Oracle Span 20-21:  used => use-01

Missing span: Amazon => (world-region :name (name :op "Amazon"))
Missing span: and => and
Missing span: and => and
Missing span: diamonds => diamond
Missing span: arms => arm
Missing span: corridor => corridor
Dependencies:
1	Brazil	_	NNP	NNP	_	5	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	northern	_	JJ	JJ	_	5	amod	_	_
4	Amazon	_	NNP	NNP	_	5	nn	_	_
5	corridor	_	NN	NN	_	7	nsubj	_	_
6	has	_	VBZ	VBZ	_	7	aux	_	_
7	become	_	VBN	VBN	_	0	root	_	_
8	an	_	DT	DT	_	13	det	_	_
9	increasingly	_	RB	RB	_	10	advmod	_	_
10	busy	_	JJ	JJ	_	13	amod	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	essential	_	JJ	JJ	_	10	conj	_	_
13	route	_	NN	NN	_	7	xcomp	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	18	det	_	_
16	global	_	JJ	JJ	_	18	amod	_	_
17	drug	_	NN	NN	_	18	nn	_	_
18	trade	_	NN	NN	_	14	pobj	_	_
19	and	_	CC	CC	_	7	cc	_	_
20	is	_	VBZ	VBZ	_	21	auxpass	_	_
21	used	_	VBN	VBN	_	7	conj	_	_
22	for	_	IN	IN	_	21	prep	_	_
23	smuggling	_	NN	NN	_	24	nn	_	_
24	arms	_	NNS	NNS	_	22	pobj	_	_
25	,	_	,	,	_	24	punct	_	_
26	gold	_	NN	NN	_	24	conj	_	_
27	and	_	CC	CC	_	24	cc	_	_
28	diamonds	_	NNS	NNS	_	24	conj	_	_
29	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, b / become-01)
(a / and, op, u / use-01)
(a2 / and, op, a3 / arm)
(a2 / and, op, d2 / diamond)
(a2 / and, op, g2 / gold)
(b / become-01, ARG1, c / corridor)
(b / become-01, ARG2, r2 / route)
(c / corridor, mod, n2 / north)
(c / corridor, mod, w / world-region)
(c2 / country, name, n3 / name)
(c2 / country, part, c / corridor)
(i / increase-01, ARG1, b2 / busy)
(i / increase-01, ARG1, e / essential)
(n / name, op, "Amazon")
(n3 / name, op, "Brazil")
(r2 / route, mod, b2 / busy)
(r2 / route, mod, e / essential)
(s / smuggle-01, ARG1, a2 / and)
(t / trade-01, ARG1, d / drug)
(t / trade-01, mod, g / globe)
(t / trade-01, path, r2 / route)
(u / use-01, ARG1, c / corridor)
(u / use-01, ARG2, s / smuggle-01)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),gold,gold,false), Span(22,23,List(1),smuggling,smuggle-01,false), Span(20,21,List(2),used,use-01,false), Span(17,18,List(3),trade,trade-01,false), Span(16,17,List(4),drug,drug,false), Span(15,16,List(5),global,globe,false), Span(12,13,List(6),route,route,false), Span(11,12,List(7),essential,essential,false), Span(9,10,List(8),busy,busy,false), Span(8,9,List(9),increasingly,increase-01,false), Span(6,7,List(10),become,become-01,false), Span(2,3,List(11),northern,north,false), Span(0,1,List(14, 13, 12),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> use-01, 5 -> globe, 12 -> country, 8 -> busy, 7 -> essential, 1 -> smuggle-01, 4 -> drug, 11 -> north, 14 -> "Brazil", 6 -> route, 0 -> gold, 9 -> increase-01, 3 -> trade-01, 10 -> become-01, 13 -> name),Map(e -> essential, n -> north, t -> trade-01, b -> busy, b2 -> become-01, s -> smuggle-01, d -> drug, g2 -> globe, g -> gold, r -> route, i -> increase-01, c -> country, u -> use-01, n2 -> name))),[Ljava.lang.String;@64ba3208,Annotation([Ljava.lang.String;@158a3b2e,[Ljava.lang.String;@25a6944c,[Ljava.lang.String;@5e1fa5b1),Annotation([Ljava.lang.String;@6b00f608,[Ljava.lang.String;@2f17e30d,[Ledu.cmu.lti.nlp.amr.Dependency;@3e821657),Annotation([Ljava.lang.String;@1d131e1b,[Ljava.lang.String;@71cf1b07,[Ljava.lang.String;@615091b8),Annotation([Ljava.lang.String;@4fce136b,[Ljava.lang.String;@4aa83f4f,[Ledu.cmu.lti.nlp.amr.Entity;@43b6123e))
AMR:
(b2 / become-01, ARG1, c / country)
(b2 / become-01, ARG2, r / route)
(c / country, name, n2 / name)
(i / increase-01, ARG0, e / essential)
(i / increase-01, ARG1, b / busy)
(n2 / name, op, "Brazil")
(r / route, mod, e / essential)
(s / smuggle-01, ARG1, n / north)
(t / trade-01, ARG0, g / gold)
(t / trade-01, ARG1, d / drug)
(t / trade-01, mod, g2 / globe)
(t / trade-01, part, r / route)
(u / use-01, ARG1, b2 / become-01)
(u / use-01, ARG2, s / smuggle-01)

Decoded in 293,074 microseconds
Sentence: Reportedly one of the most important drug- and gun-smuggling routes in supplying Europe with cocaine runs from Colombia across the northern tier of the Amazon to Suriname.

NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Suriname"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Europe"))
Spans:
Span 21-22:  across => across
Span 17-18:  cocaine => cocaine
Span 20-21:  Colombia => (country :name (name :op "Colombia"))
Span 6-7:  drug => drug
Span 9-10:  gun => gun
Span 5-6:  important => important
Span 23-24:  northern => north
Span 12-13:  routes => route
Span 18-19:  runs => run-01
Span 11-12:  smuggling => smuggle-01
Span 14-15:  supplying => supply-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 21-22:  across => across
Oracle Span 27-28:  Amazon => (world-region :name (name :op "Amazon"))
Oracle Span 8-9:  and => and
Oracle Span 17-18:  cocaine => cocaine
Oracle Span 20-21:  Colombia => (country :name (name :op "Colombia"))
Oracle Span 6-7:  drug => drug
Oracle Span 15-16:  Europe => (continent :name (name :op "Europe"))
Oracle Span 9-10:  gun => gun
Oracle Span 5-6:  important => important
Oracle Span 4-5:  most => most
Oracle Span 23-24:  northern => north
Oracle Span 2-3:  of => include-91
Oracle Span 0-1:  Reportedly => report-01
Oracle Span 12-13:  routes => route
Oracle Span 18-19:  runs => run-04
Oracle Span 11-12:  smuggling => smuggle-01
Oracle Span 14-15:  supplying => supply-01
Oracle Span 29-30:  Suriname => (country :name (name :op "Suriname"))
Oracle Span 24-25:  tier => tier

Incorrect span: runs => run-01
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: Suriname => (country :name (name :op "Suriname"))
Missing span: Amazon => (world-region :name (name :op "Amazon"))
Missing span: runs => run-04
Missing span: tier => tier
Missing span: of => include-91
Missing span: most => most
Missing span: and => and
Missing span: Reportedly => report-01
Dependencies:
1	Reportedly	_	NNP	NNP	_	17	nsubj	_	_
2	one	_	CD	CD	_	1	num	_	_
3	of	_	IN	IN	_	1	prep	_	_
4	the	_	DT	DT	_	7	det	_	_
5	most	_	RBS	RBS	_	6	advmod	_	_
6	important	_	JJ	JJ	_	7	amod	_	_
7	drug	_	NN	NN	_	3	pobj	_	_
8	-	_	:	:	_	1	punct	_	_
9	and	_	CC	CC	_	1	cc	_	_
10	gun-smuggling	_	JJ	JJ	_	11	amod	_	_
11	routes	_	NNS	NNS	_	1	conj	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	supplying	_	VBG	VBG	_	12	pcomp	_	_
14	Europe	_	NNP	NNP	_	13	dobj	_	_
15	with	_	IN	IN	_	14	prep	_	_
16	cocaine	_	NN	NN	_	15	pobj	_	_
17	runs	_	VBZ	VBZ	_	0	root	_	_
18	from	_	IN	IN	_	17	prep	_	_
19	Colombia	_	NNP	NNP	_	18	pobj	_	_
20	across	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	23	det	_	_
22	northern	_	JJ	JJ	_	23	amod	_	_
23	tier	_	NN	NN	_	20	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	Amazon	_	NNP	NNP	_	24	pobj	_	_
27	to	_	TO	TO	_	17	prep	_	_
28	Suriname	_	NNP	NNP	_	27	pobj	_	_
29	.	_	.	.	_	17	punct	_	_

Oracle:
(a / and, op, d / drug)
(a / and, op, g / gun)
(a2 / across, location, t / tier)
(c2 / continent, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(i / include-91, ARG1, r2 / route)
(i2 / important, degree, m / most)
(i2 / important, purpose, s2 / supply-01)
(n / name, op, "Europe")
(n2 / name, op, "Colombia")
(n3 / name, op, "Suriname")
(n5 / name, op, "Amazon")
(r / run-04, ARG1, r2 / route)
(r / run-04, ARG3, c3 / country)
(r / run-04, ARG4, c4 / country)
(r / run-04, path, a2 / across)
(r5 / report-01, ARG1, r / run-04)
(s / smuggle-01, ARG1, a / and)
(s2 / supply-01, ARG1, c / cocaine)
(s2 / supply-01, ARG2, c2 / continent)
(t / tier, mod, n4 / north)
(w / world-region, name, n5 / name)
(w / world-region, part, t / tier)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),northern,north,false), Span(21,22,List(1),across,across,false), Span(20,21,List(4, 3, 2),Colombia,(country :name (name :op "Colombia")),false), Span(18,19,List(5),runs,run-01,false), Span(17,18,List(6),cocaine,cocaine,false), Span(14,15,List(7),supplying,supply-01,false), Span(12,13,List(8),routes,route,false), Span(11,12,List(9),smuggling,smuggle-01,false), Span(9,10,List(10),gun,gun,false), Span(6,7,List(11),drug,drug,false), Span(5,6,List(12),important,important,false)),Map(2 -> country, 5 -> run-01, 12 -> important, 8 -> route, 7 -> supply-01, 1 -> across, 4 -> "Colombia", 11 -> drug, 6 -> cocaine, 0 -> north, 9 -> smuggle-01, 3 -> name, 10 -> gun),Map(n -> north, s2 -> smuggle-01, s -> supply-01, d -> drug, g -> gun, r2 -> route, a -> across, i -> important, r -> run-01, c -> country, c2 -> cocaine, n2 -> name))),[Ljava.lang.String;@260e86a1,Annotation([Ljava.lang.String;@19648c40,[Ljava.lang.String;@12bd8a64,[Ljava.lang.String;@61e94def),Annotation([Ljava.lang.String;@3300f4fd,[Ljava.lang.String;@ebb6851,[Ledu.cmu.lti.nlp.amr.Dependency;@70ab2d48),Annotation([Ljava.lang.String;@5b068087,[Ljava.lang.String;@6f152006,[Ljava.lang.String;@3a393455),Annotation([Ljava.lang.String;@13518f37,[Ljava.lang.String;@7cbc3762,[Ledu.cmu.lti.nlp.amr.Entity;@3a6f2de3))
AMR:
(c / country, location, n / north)
(c / country, name, n2 / name)
(d / drug, mod, i / important)
(n2 / name, op, "Colombia")
(r / run-01, ARG0, c / country)
(r / run-01, ARG1, r2 / route)
(r2 / route, mod, s / supply-01)
(r2 / route, mod, s2 / smuggle-01)
(s / supply-01, ARG1, c2 / cocaine)
(s2 / smuggle-01, ARG0, a / across)
(s2 / smuggle-01, ARG1, d / drug)
(s2 / smuggle-01, ARG2, g / gun)

Decoded in 259,709 microseconds
Sentence: Colombia is the only country that currently has a policy of targeting drug trafficking aircraft.

NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Colombia"))
Spans:
Span 14-15:  aircraft => aircraft
Span 0-1:  Colombia => (country :name (name :op "Colombia"))
Span 4-5:  country => country
Span 6-7:  currently => current
Span 12-13:  drug => drug
Span 3-4:  only => only
Span 9-10:  policy => policy
Span 11-12:  targeting => target-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 14-15:  aircraft => aircraft
Oracle Span 0-1:  Colombia => (country :name (name :op "Colombia"))
Oracle Span 4-5:  country => country
Oracle Span 6-7:  currently => current
Oracle Span 12-13:  drug => drug
Oracle Span 7-8:  has => have-03
Oracle Span 3-4:  only => only
Oracle Span 9-10:  policy => policy
Oracle Span 11-12:  targeting => target-01
Oracle Span 13-14:  trafficking => traffic-00

Missing span: has => have-03
Missing span: trafficking => traffic-00
Dependencies:
1	Colombia	_	NNP	NNP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	the	_	DT	DT	_	5	det	_	_
4	only	_	JJ	JJ	_	5	amod	_	_
5	country	_	NN	NN	_	0	root	_	_
6	that	_	WDT	WDT	_	8	nsubj	_	_
7	currently	_	RB	RB	_	8	advmod	_	_
8	has	_	VBZ	VBZ	_	5	rcmod	_	_
9	a	_	DT	DT	_	10	det	_	_
10	policy	_	NN	NN	_	8	dobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	targeting	_	VBG	VBG	_	15	amod	_	_
13	drug	_	NN	NN	_	15	nn	_	_
14	trafficking	_	NN	NN	_	15	nn	_	_
15	aircraft	_	NN	NN	_	11	pobj	_	_
16	.	_	.	.	_	5	punct	_	_

Oracle:
(c / country, domain, c2 / country)
(c / country, mod, o / only)
(c2 / country, name, n / name)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, p / policy)
(h / have-03, time, c3 / current)
(n / name, op, "Colombia")
(t / target-01, ARG1, a / aircraft)
(t / target-01, consist, p / policy)
(t2 / traffic-00, ARG0, a / aircraft)
(t2 / traffic-00, ARG1, d / drug)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),aircraft,aircraft,false), Span(12,13,List(1),drug,drug,false), Span(11,12,List(2),targeting,target-01,false), Span(9,10,List(3),policy,policy,false), Span(6,7,List(4),currently,current,false), Span(4,5,List(5),country,country,false), Span(3,4,List(6),only,only,false), Span(0,1,List(9, 8, 7),Colombia,(country :name (name :op "Colombia")),false)),Map(2 -> target-01, 5 -> country, 8 -> name, 7 -> country, 1 -> drug, 4 -> current, 6 -> only, 9 -> "Colombia", 0 -> aircraft, 3 -> policy),Map(n -> name, t -> target-01, d -> drug, p -> policy, c3 -> country, a -> aircraft, c -> current, o -> only, c2 -> country))),[Ljava.lang.String;@49872d67,Annotation([Ljava.lang.String;@56303b57,[Ljava.lang.String;@4b2a01d4,[Ljava.lang.String;@8692d67),Annotation([Ljava.lang.String;@78f5c518,[Ljava.lang.String;@2f48b3d2,[Ledu.cmu.lti.nlp.amr.Dependency;@34f7234e),Annotation([Ljava.lang.String;@753432a2,[Ljava.lang.String;@23bff419,[Ljava.lang.String;@4983159f),Annotation([Ljava.lang.String;@44e3a2b2,[Ljava.lang.String;@101639ae,[Ledu.cmu.lti.nlp.amr.Entity;@4c550889))
AMR:
(c2 / country, domain, c3 / country)
(c2 / country, mod, o / only)
(c3 / country, name, n / name)
(n / name, op, "Colombia")
(p / policy, mod, c / current)
(p / policy, poss, c2 / country)
(t / target-01, ARG0, p / policy)
(t / target-01, ARG1, a / aircraft)
(t / target-01, ARG2, d / drug)

Decoded in 196,543 microseconds
Sentence: Colombia is the source of much of the cocaine and heroin sold in the United States.

NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Colombia"))
Spans:
Span 8-9:  cocaine => cocaine
Span 0-1:  Colombia => (country :name (name :op "Colombia"))
Span 10-11:  heroin => heroin
Span 5-6:  much => much
Span 11-12:  sold => sell-01
Span 14-16:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 8-9:  cocaine => cocaine
Oracle Span 0-1:  Colombia => (country :name (name :op "Colombia"))
Oracle Span 10-11:  heroin => heroin
Oracle Span 5-6:  much => much
Oracle Span 4-5:  of => include-91
Oracle Span 11-12:  sold => sell-01
Oracle Span 3-4:  source => source-02
Oracle Span 14-16:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: source => source-02
Missing span: and => and
Missing span: of => include-91
Dependencies:
1	Colombia	_	NNP	NNP	_	4	nsubj	_	_
2	is	_	VBZ	VBZ	_	4	cop	_	_
3	the	_	DT	DT	_	4	det	_	_
4	source	_	NN	NN	_	0	root	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	much	_	RB	RB	_	5	pobj	_	_
7	of	_	IN	IN	_	4	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	cocaine	_	NN	NN	_	7	pobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	heroin	_	NN	NN	_	9	conj	_	_
12	sold	_	VBN	VBN	_	9	vmod	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	United	_	NNP	NNP	_	16	nn	_	_
16	States	_	NNPS	NNPS	_	13	pobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, quant, m / much)
(c3 / country, name, n / name)
(c4 / country, name, n2 / name)
(i / include-91, ARG1, a / and)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Colombia")
(s / source-02, ARG0, c4 / country)
(s / source-02, ARG1, a / and)
(s2 / sell-01, location, c3 / country)

Input(Some(Graph(null,ArrayBuffer(Span(14,16,List(3, 2, 1, 0),United States,(country :name (name :op "United" :op "States")),false), Span(11,12,List(4),sold,sell-01,false), Span(10,11,List(5),heroin,heroin,false), Span(8,9,List(6),cocaine,cocaine,false), Span(5,6,List(7),much,much,false), Span(0,1,List(10, 9, 8),Colombia,(country :name (name :op "Colombia")),false)),Map(2 -> "United", 5 -> heroin, 8 -> country, 7 -> much, 1 -> name, 4 -> sell-01, 6 -> cocaine, 9 -> name, 0 -> country, 10 -> "Colombia", 3 -> "States"),Map(n -> name, h -> heroin, s -> sell-01, m -> much, c3 -> country, c -> country, n2 -> name, c2 -> cocaine))),[Ljava.lang.String;@1d2bd371,Annotation([Ljava.lang.String;@44040454,[Ljava.lang.String;@65fe9e33,[Ljava.lang.String;@18bc345),Annotation([Ljava.lang.String;@42f8285e,[Ljava.lang.String;@26bab2f1,[Ledu.cmu.lti.nlp.amr.Dependency;@3724af13),Annotation([Ljava.lang.String;@68ead359,[Ljava.lang.String;@6b53bcc2,[Ljava.lang.String;@180da663),Annotation([Ljava.lang.String;@a43ce46,[Ljava.lang.String;@340da44c,[Ledu.cmu.lti.nlp.amr.Entity;@424ebba3))
AMR:
(c / country, name, c2 / cocaine)
(c / country, name, n / name)
(c3 / country, name, n2 / name)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Colombia")
(s / sell-01, ARG0, c3 / country)
(s / sell-01, ARG1, h / heroin)
(s / sell-01, ARG2, m / much)
(s / sell-01, location, c / country)

Decoded in 90,106 microseconds
Sentence: 2005-07-16

mkDayMonthYear(2005-07-16,16,07,2005)
mkDayMonthYear(2005-07-16,16,07,2005)
Spans:
Span 0-1:  2005-07-16 => (date-entity :day 16 :month 7 :year 2005)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2005-07-16 => (date-entity :day 16 :month 7 :year 2005)

Dependencies:
1	2005-07-16	_	NNP	NNP	_	0	root	_	_

Oracle:
(d2 / date-entity, day, 16)
(d2 / date-entity, month, 7)
(d2 / date-entity, year, 2005)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2005-07-16,(date-entity :day 16 :month 7 :year 2005),false)),Map(2 -> 7, 1 -> 16, 0 -> date-entity, 3 -> 2005),Map(2 -> 2005, 7 -> 7, d -> date-entity, 1 -> 16))),[Ljava.lang.String;@37052337,Annotation([Ljava.lang.String;@2320fa6f,[Ljava.lang.String;@7a560583,[Ljava.lang.String;@4d722ac9),Annotation([Ljava.lang.String;@53f0a4cb,[Ljava.lang.String;@77a7cf58,[Ledu.cmu.lti.nlp.amr.Dependency;@3d97a632),Annotation([Ljava.lang.String;@616fe72b,[Ljava.lang.String;@37efd131,[Ljava.lang.String;@7e7b159b),Annotation([Ljava.lang.String;@7e5d9a50,[Ljava.lang.String;@60957c0f,[Ledu.cmu.lti.nlp.amr.Entity;@293a5f75))
AMR:
(d / date-entity, day, 1 / 16)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2005)

Decoded in 9,214 microseconds
Sentence: Venezuela (VE)

NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 0-1:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Venezuela => (country :name (name :op "Venezuela"))

Dependencies:
1	Venezuela	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	VE	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Venezuela")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false)),Map(2 -> "Venezuela", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@fcb4004,Annotation([Ljava.lang.String;@1dd6d4b7,[Ljava.lang.String;@56e8b606,[Ljava.lang.String;@2dd29a59),Annotation([Ljava.lang.String;@784c3487,[Ljava.lang.String;@53142455,[Ledu.cmu.lti.nlp.amr.Dependency;@40dff0b7),Annotation([Ljava.lang.String;@7966baa7,[Ljava.lang.String;@60975100,[Ljava.lang.String;@1253e7cb),Annotation([Ljava.lang.String;@2d36e77e,[Ljava.lang.String;@61c9c3fd,[Ledu.cmu.lti.nlp.amr.Entity;@3b0c9195))
AMR:
(c / country, name, n / name)
(n / name, op, "Venezuela")

Decoded in 6,887 microseconds
Sentence: International; weapons; leader; military

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 0-1:  International => international
Oracle Span 4-5:  leader => (person :ARG0-of lead-02)
Oracle Span 6-7:  military => military
Oracle Span 2-3:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Missing span: military => military
Missing span: leader => (person :ARG0-of lead-02)
Missing span: weapons => weapon
Missing span: International => international
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	weapons	_	NNS	NNS	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	leader	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	military	_	NN	NN	_	5	dep	_	_

Oracle:
(a / and, op, i / international)
(a / and, op, m / military)
(a / and, op, p / person)
(a / and, op, w / weapon)
(l / lead-02, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),;,and,false), Span(3,4,List(1),;,and,false), Span(1,2,List(2),;,and,false)),Map(2 -> and, 1 -> and, 0 -> and),Map(a3 -> and, a -> and, a2 -> and))),[Ljava.lang.String;@366c4480,Annotation([Ljava.lang.String;@2c7b5824,[Ljava.lang.String;@302a07d,[Ljava.lang.String;@5cdd09b1),Annotation([Ljava.lang.String;@8c11eee,[Ljava.lang.String;@7e8dcdaa,[Ledu.cmu.lti.nlp.amr.Dependency;@681a8b4e),Annotation([Ljava.lang.String;@5cbe877d,[Ljava.lang.String;@5c08c46a,[Ljava.lang.String;@4cf8b2dc),Annotation([Ljava.lang.String;@708400f6,[Ljava.lang.String;@5829e4f4,[Ledu.cmu.lti.nlp.amr.Entity;@4218500f))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)

Decoded in 13,161 microseconds
Sentence: The Venezuelan president's weapons deals with Russia, curbs on military cooperation with the United States, and his plans to train as many as 2 million Venezuelan civilians to repel a possible invasion by superpowers have the US and his domestic critics worried.

NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 29-30:  civilians => civilian
Span 12-13:  cooperation => cooperate-01
Span 43-44:  critics => (person :ARG0-of criticize-01)
Span 42-43:  domestic => domestic
Span 34-35:  invasion => invade-01
Span 24-25:  many => many
Span 20-21:  plans => plan-01
Span 33-34:  possible => possible
Span 2-3:  president => (have-org-role-91 :ARG2 president)
Span 36-37:  superpowers => superpower
Span 15-17:  United States => (country :name (name :op "United" :op "States"))
Span 44-45:  worried => worry-02

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 18-19:  and => and
Oracle Span 40-41:  and => and
Oracle Span 29-30:  civilians => civilian
Oracle Span 12-13:  cooperation => cooperate-01
Oracle Span 43-44:  critics => (person :ARG0-of criticize-01)
Oracle Span 9-10:  curbs => curb-01
Oracle Span 5-6:  deals => deal-01
Oracle Span 42-43:  domestic => domestic
Oracle Span 37-38:  have => (person :ARG0-of have-org-role-91)
Oracle Span 34-35:  invasion => invade-01
Oracle Span 11-12:  military => military
Oracle Span 20-21:  plans => plan-01
Oracle Span 33-34:  possible => possible
Oracle Span 2-3:  president => president
Oracle Span 31-32:  repel => repel-01
Oracle Span 7-8:  Russia => (country :name (name :op "Russia"))
Oracle Span 36-37:  superpowers => superpower
Oracle Span 22-23:  train => train-01
Oracle Span 15-17:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 1-2:  Venezuelan => (country :name (name :op "Venezuela"))
Oracle Span 4-5:  weapons => weapon
Oracle Span 44-45:  worried => worry-01

Incorrect span: worried => worry-02
Extra span: many => many
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: president => (have-org-role-91 :ARG2 president)
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: worried => worry-01
Missing span: and => and
Missing span: and => and
Missing span: train => train-01
Missing span: repel => repel-01
Missing span: curbs => curb-01
Missing span: military => military
Missing span: deals => deal-01
Missing span: weapons => weapon
Missing span: president => president
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Venezuelan	_	JJ	JJ	_	3	amod	_	_
3	president	_	NN	NN	_	5	poss	_	_
4	's	_	POS	POS	_	3	possessive	_	_
5	weapons	_	NNS	NNS	_	6	nsubj	_	_
6	deals	_	VBZ	VBZ	_	0	root	_	_
7	with	_	IN	IN	_	6	prep	_	_
8	Russia	_	NNP	NNP	_	7	pobj	_	_
9	,	_	,	,	_	8	punct	_	_
10	curbs	_	NNS	NNS	_	8	conj	_	_
11	on	_	IN	IN	_	10	prep	_	_
12	military	_	JJ	JJ	_	13	amod	_	_
13	cooperation	_	NN	NN	_	11	pobj	_	_
14	with	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	United	_	NNP	NNP	_	17	nn	_	_
17	States	_	NNPS	NNPS	_	14	pobj	_	_
18	,	_	,	,	_	8	punct	_	_
19	and	_	CC	CC	_	8	cc	_	_
20	his	_	PRP$	PRP$	_	21	poss	_	_
21	plans	_	NNS	NNS	_	8	conj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	train	_	VB	VB	_	6	xcomp	_	_
24	as	_	RB	RB	_	26	advmod	_	_
25	many	_	JJ	JJ	_	26	advmod	_	_
26	as	_	IN	IN	_	28	quantmod	_	_
27	2	_	CD	CD	_	28	number	_	_
28	million	_	CD	CD	_	30	num	_	_
29	Venezuelan	_	JJ	JJ	_	30	amod	_	_
30	civilians	_	NNS	NNS	_	23	dobj	_	_
31	to	_	TO	TO	_	32	aux	_	_
32	repel	_	VB	VB	_	23	vmod	_	_
33	a	_	DT	DT	_	35	det	_	_
34	possible	_	JJ	JJ	_	35	amod	_	_
35	invasion	_	NN	NN	_	32	dobj	_	_
36	by	_	IN	IN	_	32	prep	_	_
37	superpowers	_	NNS	NNS	_	38	nsubj	_	_
38	have	_	VBP	VBP	_	36	pcomp	_	_
39	the	_	DT	DT	_	40	det	_	_
40	US	_	NNP	NNP	_	38	dobj	_	_
41	and	_	CC	CC	_	38	cc	_	_
42	his	_	PRP$	PRP$	_	44	poss	_	_
43	domestic	_	JJ	JJ	_	44	amod	_	_
44	critics	_	NNS	NNS	_	45	dep	_	_
45	worried	_	JJ	JJ	_	38	conj	_	_
46	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c3 / curb-01)
(a / and, op, d / deal-01)
(a / and, op, p2 / plan-01)
(a4 / and, op, c5 / country)
(a4 / and, op, p3 / person)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / curb-01, ARG1, c4 / cooperate-01)
(c4 / cooperate-01, ARG0, p / person)
(c4 / cooperate-01, ARG1, c5 / country)
(c4 / cooperate-01, mod, m / military)
(c5 / country, name, n3 / name)
(c6 / civilian, mod, c / country)
(c7 / criticize-01, ARG0, p3 / person)
(c7 / criticize-01, ARG1, p / person)
(d / deal-01, ARG1, w2 / weapon)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p5 / president)
(i / invade-01, ARG0, s / superpower)
(i / invade-01, mod, p4 / possible)
(n / name, op, "Venezuela")
(n2 / name, op, "Russia")
(n3 / name, op, "States")
(n3 / name, op, "United")
(p2 / plan-01, ARG0, p / person)
(p2 / plan-01, ARG1, t / train-01)
(p3 / person, mod, d2 / domestic)
(r / repel-01, ARG1, i / invade-01)
(t / train-01, ARG1, r / repel-01)
(t / train-01, ARG2, c6 / civilian)
(w / worry-01, ARG0, a / and)
(w / worry-01, ARG1, a4 / and)

Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),worried,worry-02,false), Span(43,44,List(2, 1),critics,(person :ARG0-of criticize-01),false), Span(42,43,List(3),domestic,domestic,false), Span(36,37,List(4),superpowers,superpower,false), Span(34,35,List(5),invasion,invade-01,false), Span(33,34,List(6),possible,possible,false), Span(29,30,List(7),civilians,civilian,false), Span(24,25,List(8),many,many,false), Span(20,21,List(9),plans,plan-01,false), Span(15,17,List(13, 12, 11, 10),United States,(country :name (name :op "United" :op "States")),false), Span(12,13,List(14),cooperation,cooperate-01,false), Span(2,3,List(16, 15),president,(have-org-role-91 :ARG2 president),false)),Map(2 -> criticize-01, 5 -> invade-01, 12 -> "United", 15 -> have-org-role-91, 8 -> many, 7 -> civilian, 1 -> person, 4 -> superpower, 11 -> name, 14 -> cooperate-01, 6 -> possible, 0 -> worry-02, 9 -> plan-01, 16 -> president, 3 -> domestic, 10 -> country, 13 -> "States"),Map(w -> worry-02, n -> name, h -> have-org-role-91, p2 -> possible, c4 -> cooperate-01, s -> superpower, d -> domestic, m -> many, p -> person, c3 -> country, p4 -> president, i -> invade-01, c -> criticize-01, p3 -> plan-01, c2 -> civilian))),[Ljava.lang.String;@4bff64c2,Annotation([Ljava.lang.String;@1b2c4efb,[Ljava.lang.String;@c35172e,[Ljava.lang.String;@c2db68f),Annotation([Ljava.lang.String;@3cc41abc,[Ljava.lang.String;@4566d049,[Ledu.cmu.lti.nlp.amr.Dependency;@61ce23ac),Annotation([Ljava.lang.String;@3668d4,[Ljava.lang.String;@1c3b9394,[Ljava.lang.String;@6f2cfcc2),Annotation([Ljava.lang.String;@7f6f61c8,[Ljava.lang.String;@4c2cc639,[Ledu.cmu.lti.nlp.amr.Entity;@ccb4b1b))
AMR:
(c / criticize-01, ARG0, p / person)
(c3 / country, name, n / name)
(c4 / cooperate-01, ARG0, c3 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, p4 / president)
(i / invade-01, ARG0, c2 / civilian)
(i / invade-01, ARG1, s / superpower)
(i / invade-01, mod, p2 / possible)
(m / many, domain, p3 / plan-01)
(n / name, op, "States")
(n / name, op, "United")
(p / person, mod, d / domestic)
(p3 / plan-01, ARG0, c3 / country)
(w / worry-02, ARG0, p / person)
(w / worry-02, ARG1, s / superpower)

Decoded in 430,353 microseconds
Sentence: Venezuelan president Hugo Chavez's weapons deals with Russia, curbs on military cooperation with the United States, and plans to train as many as 2 million Venezuelan civilians to repel a possible invasion by imperialist superpowers have the United States and Chavez's domestic critics worried about what the leftist former military officer is planning.

NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (person :name (name :op "Hugo" :op "Chavez"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 29-30:  civilians => civilian
Span 13-14:  cooperation => cooperate-01
Span 46-47:  critics => (person :ARG0-of criticize-01)
Span 45-46:  domestic => domestic
Span 52-53:  former => former
Span 2-4:  Hugo Chavez => (person :name (name :op "Hugo" :op "Chavez"))
Span 34-35:  invasion => invade-01
Span 24-25:  many => many
Span 56-57:  planning => plan-01
Span 20-21:  plans => plan-01
Span 33-34:  possible => possible
Span 1-2:  president => (have-org-role-91 :ARG2 president)
Span 37-38:  superpowers => superpower
Span 40-42:  United States => (country :name (name :op "United" :op "States"))
Span 16-18:  United States => (country :name (name :op "United" :op "States"))
Span 47-48:  worried => worry-02

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 19-20:  and => and
Oracle Span 42-43:  and => and
Oracle Span 43-44:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 29-30:  civilians => civilian
Oracle Span 13-14:  cooperation => cooperate-01
Oracle Span 46-47:  critics => (person :ARG0-of criticize-01)
Oracle Span 10-11:  curbs => curb-01
Oracle Span 6-7:  deals => deal-01
Oracle Span 45-46:  domestic => domestic
Oracle Span 52-53:  former => former
Oracle Span 38-39:  have => (person :ARG0-of have-org-role-91)
Oracle Span 2-4:  Hugo Chavez => (person :name (name :op "Chavez" :op "Hugo"))
Oracle Span 36-37:  imperialist => imperialism
Oracle Span 34-35:  invasion => invade-01
Oracle Span 51-52:  leftist => leftist
Oracle Span 12-13:  military => military
Oracle Span 53-54:  military => military
Oracle Span 54-55:  officer => officer
Oracle Span 56-57:  planning => plan-01
Oracle Span 20-21:  plans => (thing :ARG1-of plan-01)
Oracle Span 33-34:  possible => possible
Oracle Span 1-2:  president => (have-org-role-91 :ARG2 president)
Oracle Span 31-32:  repel => repel-01
Oracle Span 8-9:  Russia => (country :name (name :op "Russia"))
Oracle Span 37-38:  superpowers => superpower
Oracle Span 22-23:  train => train-01
Oracle Span 16-18:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 0-1:  Venezuelan => (country :name (name :op "Venezuela"))
Oracle Span 5-6:  weapons => weapon
Oracle Span 47-48:  worried => worry-01

Incorrect span: worried => worry-02
Extra span: United States => (country :name (name :op "United" :op "States"))
Extra span: many => many
Incorrect span: plans => plan-01
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: Hugo Chavez => (person :name (name :op "Hugo" :op "Chavez"))
Missing span: Hugo Chavez => (person :name (name :op "Chavez" :op "Hugo"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: worried => worry-01
Missing span: plans => (thing :ARG1-of plan-01)
Missing span: leftist => leftist
Missing span: military => military
Missing span: officer => officer
Missing span: and => and
Missing span: and => and
Missing span: train => train-01
Missing span: repel => repel-01
Missing span: curbs => curb-01
Missing span: military => military
Missing span: deals => deal-01
Missing span: weapons => weapon
Missing span: have => (person :ARG0-of have-org-role-91)
Missing span: imperialist => imperialism
Dependencies:
1	Venezuelan	_	JJ	JJ	_	2	amod	_	_
2	president	_	NN	NN	_	39	nsubj	_	_
3	Hugo	_	NNP	NNP	_	4	nn	_	_
4	Chavez	_	NNP	NNP	_	6	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	weapons	_	NNS	NNS	_	7	nsubj	_	_
7	deals	_	VBZ	VBZ	_	2	rcmod	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	Russia	_	NNP	NNP	_	8	pobj	_	_
10	,	_	,	,	_	9	punct	_	_
11	curbs	_	NNS	NNS	_	9	appos	_	_
12	on	_	IN	IN	_	11	prep	_	_
13	military	_	JJ	JJ	_	14	amod	_	_
14	cooperation	_	NN	NN	_	12	pobj	_	_
15	with	_	IN	IN	_	7	prep	_	_
16	the	_	DT	DT	_	18	det	_	_
17	United	_	NNP	NNP	_	18	nn	_	_
18	States	_	NNPS	NNPS	_	15	pobj	_	_
19	,	_	,	,	_	7	punct	_	_
20	and	_	CC	CC	_	7	cc	_	_
21	plans	_	VBZ	VBZ	_	7	conj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	train	_	VB	VB	_	21	xcomp	_	_
24	as	_	RB	RB	_	26	advmod	_	_
25	many	_	JJ	JJ	_	26	advmod	_	_
26	as	_	IN	IN	_	28	quantmod	_	_
27	2	_	CD	CD	_	28	number	_	_
28	million	_	CD	CD	_	30	num	_	_
29	Venezuelan	_	JJ	JJ	_	30	amod	_	_
30	civilians	_	NNS	NNS	_	23	dobj	_	_
31	to	_	TO	TO	_	32	aux	_	_
32	repel	_	VB	VB	_	23	vmod	_	_
33	a	_	DT	DT	_	35	det	_	_
34	possible	_	JJ	JJ	_	35	amod	_	_
35	invasion	_	NN	NN	_	32	dobj	_	_
36	by	_	IN	IN	_	32	prep	_	_
37	imperialist	_	JJ	JJ	_	38	amod	_	_
38	superpowers	_	NNS	NNS	_	36	pobj	_	_
39	have	_	VBP	VBP	_	0	root	_	_
40	the	_	DT	DT	_	42	det	_	_
41	United	_	NNP	NNP	_	42	nn	_	_
42	States	_	NNPS	NNPS	_	39	dobj	_	_
43	and	_	CC	CC	_	42	cc	_	_
44	Chavez	_	NNP	NNP	_	47	poss	_	_
45	's	_	POS	POS	_	44	possessive	_	_
46	domestic	_	JJ	JJ	_	47	amod	_	_
47	critics	_	NNS	NNS	_	42	conj	_	_
48	worried	_	VBN	VBN	_	47	vmod	_	_
49	about	_	IN	IN	_	48	prep	_	_
50	what	_	WP	WP	_	57	dobj	_	_
51	the	_	DT	DT	_	55	det	_	_
52	leftist	_	JJ	JJ	_	55	amod	_	_
53	former	_	JJ	JJ	_	55	amod	_	_
54	military	_	JJ	JJ	_	55	amod	_	_
55	officer	_	NN	NN	_	57	nsubj	_	_
56	is	_	VBZ	VBZ	_	57	aux	_	_
57	planning	_	VBG	VBG	_	49	pcomp	_	_
58	.	_	.	.	_	39	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, p2 / person)
(a2 / and, op, c5 / curb-01)
(a2 / and, op, d2 / deal-01)
(a2 / and, op, p6 / plan-01)
(c / country, name, n / name)
(c2 / criticize-01, ARG0, p2 / person)
(c2 / criticize-01, ARG1, p3 / person)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(c5 / curb-01, ARG0, p4 / person)
(c5 / curb-01, ARG1, c6 / cooperate-01)
(c6 / cooperate-01, ARG0, p4 / person)
(c6 / cooperate-01, ARG1, c / country)
(c6 / cooperate-01, mod, m2 / military)
(d2 / deal-01, ARG1, w2 / weapon)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, p5 / president)
(h2 / have-org-role-91, ARG0, p8 / person)
(h2 / have-org-role-91, ARG1, m / military)
(h2 / have-org-role-91, ARG2, o / officer)
(h2 / have-org-role-91, mod, f / former)
(i / invade-01, ARG0, s / superpower)
(i / invade-01, mod, p7 / possible)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Chavez")
(n3 / name, op, "Chavez")
(n3 / name, op, "Hugo")
(n4 / name, op, "Venezuela")
(n5 / name, op, "Russia")
(p / plan-01, ARG0, p8 / person)
(p / plan-01, ARG1, t / thing)
(p2 / person, mod, d / domestic)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(p6 / plan-01, ARG0, p4 / person)
(p6 / plan-01, ARG1, t2 / train-01)
(p8 / person, mod, l / leftist)
(r / repel-01, ARG0, c7 / civilian)
(r / repel-01, ARG1, i / invade-01)
(s / superpower, mod, i2 / imperialism)
(t2 / train-01, ARG1, r / repel-01)
(t2 / train-01, ARG2, c7 / civilian)
(w / worry-01, ARG0, a2 / and)
(w / worry-01, ARG1, a / and)
(w / worry-01, ARG2, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(56,57,List(0),planning,plan-01,false), Span(52,53,List(1),former,former,false), Span(47,48,List(2),worried,worry-02,false), Span(46,47,List(4, 3),critics,(person :ARG0-of criticize-01),false), Span(45,46,List(5),domestic,domestic,false), Span(40,42,List(9, 8, 7, 6),United States,(country :name (name :op "United" :op "States")),false), Span(37,38,List(10),superpowers,superpower,false), Span(34,35,List(11),invasion,invade-01,false), Span(33,34,List(12),possible,possible,false), Span(29,30,List(13),civilians,civilian,false), Span(24,25,List(14),many,many,false), Span(20,21,List(15),plans,plan-01,false), Span(16,18,List(19, 18, 17, 16),United States,(country :name (name :op "United" :op "States")),false), Span(13,14,List(20),cooperation,cooperate-01,false), Span(2,4,List(24, 23, 22, 21),Hugo Chavez,(person :name (name :op "Hugo" :op "Chavez")),false), Span(1,2,List(26, 25),president,(have-org-role-91 :ARG2 president),false)),Map(2 -> worry-02, 5 -> domestic, 12 -> possible, 8 -> "United", 15 -> plan-01, 21 -> person, 18 -> "United", 24 -> "Chavez", 7 -> name, 1 -> former, 17 -> name, 23 -> "Hugo", 26 -> president, 4 -> criticize-01, 11 -> invade-01, 14 -> many, 20 -> cooperate-01, 6 -> country, 9 -> "States", 0 -> plan-01, 22 -> name, 16 -> country, 19 -> "States", 10 -> superpower, 3 -> person, 25 -> have-org-role-91, 13 -> civilian),Map(w -> worry-02, n -> name, h -> have-org-role-91, p5 -> person, p2 -> person, c4 -> country, s -> superpower, d -> domestic, m -> many, p -> plan-01, n3 -> name, c3 -> civilian, p4 -> plan-01, i -> invade-01, c -> criticize-01, p6 -> president, f -> former, p3 -> possible, n2 -> name, c2 -> country, c5 -> cooperate-01))),[Ljava.lang.String;@4097cac,Annotation([Ljava.lang.String;@ec2cc4,[Ljava.lang.String;@2a5b3fee,[Ljava.lang.String;@7c1e2a2d),Annotation([Ljava.lang.String;@333dd51e,[Ljava.lang.String;@52d645b1,[Ledu.cmu.lti.nlp.amr.Dependency;@2101b44a),Annotation([Ljava.lang.String;@2cc3ad05,[Ljava.lang.String;@710b18a6,[Ljava.lang.String;@119020fb),Annotation([Ljava.lang.String;@3d9f6567,[Ljava.lang.String;@c055c54,[Ledu.cmu.lti.nlp.amr.Entity;@25e2ab5a))
AMR:
(c / criticize-01, ARG0, p2 / person)
(c2 / country, name, n / name)
(c4 / country, name, n2 / name)
(c5 / cooperate-01, ARG0, c4 / country)
(c5 / cooperate-01, ARG1, c2 / country)
(h / have-org-role-91, ARG0, p5 / person)
(h / have-org-role-91, ARG2, p6 / president)
(i / invade-01, ARG0, c3 / civilian)
(i / invade-01, location, s / superpower)
(i / invade-01, mod, p3 / possible)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "Chavez")
(n3 / name, op, "Hugo")
(p / plan-01, ARG0, c2 / country)
(p / plan-01, ARG1, i / invade-01)
(p2 / person, mod, d / domestic)
(p4 / plan-01, ARG0, c4 / country)
(p4 / plan-01, ARG1, h / have-org-role-91)
(p4 / plan-01, ARG2, m / many)
(p5 / person, name, n3 / name)
(w / worry-02, ARG0, p2 / person)
(w / worry-02, ARG1, f / former)
(w / worry-02, ARG2, p / plan-01)

Decoded in 1,461,825 microseconds
Sentence: Chavez insists that the moves are purely defensive and born of an overdue need to update obsolete military hardware and protect Venezuela from nations that might want to take control of Venezuela.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 9-10:  born => bear-02
Span 29-30:  control => control-01
Span 7-8:  defensive => defend-01
Span 18-19:  hardware => hardware
Span 1-2:  insists => insist-01
Span 23-24:  nations => nation
Span 13-14:  need => need-01
Span 16-17:  obsolete => obsolete
Span 20-21:  protect => protect-01
Span 15-16:  update => update-01
Span 31-32:  Venezuela => (country :name (name :op "Venezuela"))
Span 21-22:  Venezuela => (country :name (name :op "Venezuela"))
Span 26-27:  want => want-01

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 19-20:  and => and
Oracle Span 9-10:  born => bear-02
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 29-30:  control => control-01
Oracle Span 7-8:  defensive => defensive
Oracle Span 18-19:  hardware => hardware
Oracle Span 1-2:  insists => insist-01
Oracle Span 17-18:  military => military
Oracle Span 4-5:  moves => move-02
Oracle Span 23-24:  nations => nation
Oracle Span 13-14:  need => need-01
Oracle Span 16-17:  obsolete => obsolete
Oracle Span 12-13:  overdue => overdue
Oracle Span 20-21:  protect => protect-01
Oracle Span 6-7:  purely => pure
Oracle Span 15-16:  update => update-01
Oracle Span 21-22:  Venezuela => (country :name (name :op "Venezuela"))
Oracle Span 26-27:  want => want-01

Extra span: Venezuela => (country :name (name :op "Venezuela"))
Incorrect span: defensive => defend-01
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: and => and
Missing span: overdue => overdue
Missing span: and => and
Missing span: military => military
Missing span: defensive => defensive
Missing span: moves => move-02
Missing span: purely => pure
Dependencies:
1	Chavez	_	NNP	NNP	_	2	nsubj	_	_
2	insists	_	VBZ	VBZ	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	moves	_	NNS	NNS	_	8	nsubjpass	_	_
6	are	_	VBP	VBP	_	8	auxpass	_	_
7	purely	_	RB	RB	_	8	advmod	_	_
8	defensive	_	JJ	JJ	_	2	ccomp	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	born	_	VBN	VBN	_	8	conj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	an	_	DT	DT	_	14	det	_	_
13	overdue	_	JJ	JJ	_	14	amod	_	_
14	need	_	NN	NN	_	11	pobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	update	_	VB	VB	_	10	xcomp	_	_
17	obsolete	_	JJ	JJ	_	19	amod	_	_
18	military	_	JJ	JJ	_	19	amod	_	_
19	hardware	_	NN	NN	_	16	dobj	_	_
20	and	_	CC	CC	_	16	cc	_	_
21	protect	_	VB	VB	_	16	conj	_	_
22	Venezuela	_	NNP	NNP	_	21	dobj	_	_
23	from	_	IN	IN	_	21	prep	_	_
24	nations	_	NNS	NNS	_	23	pobj	_	_
25	that	_	WDT	WDT	_	27	nsubj	_	_
26	might	_	MD	MD	_	27	aux	_	_
27	want	_	VB	VB	_	24	rcmod	_	_
28	to	_	TO	TO	_	29	aux	_	_
29	take	_	VB	VB	_	27	xcomp	_	_
30	control	_	NN	NN	_	29	dobj	_	_
31	of	_	IN	IN	_	30	prep	_	_
32	Venezuela	_	NNP	NNP	_	31	pobj	_	_
33	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, b / bear-02)
(a / and, op, d / defensive)
(a2 / and, op, p3 / protect-01)
(a2 / and, op, u / update-01)
(b / bear-02, ARG0, n2 / need-01)
(b / bear-02, ARG1, m / move-02)
(c / country, name, n3 / name)
(c2 / control-01, ARG0, n4 / nation)
(c2 / control-01, ARG1, c / country)
(d / defensive, domain, m / move-02)
(d / defensive, mod, p2 / pure)
(h / hardware, mod, m2 / military)
(h / hardware, mod, o2 / obsolete)
(i / insist-01, ARG0, p / person)
(i / insist-01, ARG1, a / and)
(n / name, op, "Chavez")
(n2 / need-01, ARG1, a2 / and)
(n2 / need-01, mod, o / overdue)
(n3 / name, op, "Venezuela")
(p / person, name, n / name)
(p3 / protect-01, ARG1, c / country)
(p3 / protect-01, ARG2, n4 / nation)
(u / update-01, ARG1, h / hardware)
(w / want-01, ARG0, n4 / nation)
(w / want-01, ARG1, c2 / control-01)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false), Span(29,30,List(3),control,control-01,false), Span(26,27,List(4),want,want-01,false), Span(23,24,List(5),nations,nation,false), Span(21,22,List(8, 7, 6),Venezuela,(country :name (name :op "Venezuela")),false), Span(20,21,List(9),protect,protect-01,false), Span(18,19,List(10),hardware,hardware,false), Span(16,17,List(11),obsolete,obsolete,false), Span(15,16,List(12),update,update-01,false), Span(13,14,List(13),need,need-01,false), Span(9,10,List(14),born,bear-02,false), Span(7,8,List(15),defensive,defend-01,false), Span(1,2,List(16),insists,insist-01,false)),Map(2 -> "Venezuela", 5 -> nation, 12 -> update-01, 15 -> defend-01, 8 -> "Venezuela", 7 -> name, 1 -> name, 4 -> want-01, 11 -> obsolete, 14 -> bear-02, 6 -> country, 0 -> country, 9 -> protect-01, 16 -> insist-01, 3 -> control-01, 10 -> hardware, 13 -> need-01),Map(n -> name, w -> want-01, h -> hardware, b -> bear-02, n4 -> need-01, d -> defend-01, p -> protect-01, c3 -> country, n3 -> name, i -> insist-01, c -> country, u -> update-01, o -> obsolete, c2 -> control-01, n2 -> nation))),[Ljava.lang.String;@35e5d0e5,Annotation([Ljava.lang.String;@73173f63,[Ljava.lang.String;@55562aa9,[Ljava.lang.String;@655ef322),Annotation([Ljava.lang.String;@7e276594,[Ljava.lang.String;@3401a114,[Ledu.cmu.lti.nlp.amr.Dependency;@5066d65f),Annotation([Ljava.lang.String;@4233e892,[Ljava.lang.String;@77d2e85,[Ljava.lang.String;@3ecd267f),Annotation([Ljava.lang.String;@58ffcbd7,[Ljava.lang.String;@555cf22,[Ledu.cmu.lti.nlp.amr.Entity;@6bb2d00b))
AMR:
(b / bear-02, ARG0, n4 / need-01)
(c / country, name, n / name)
(c2 / control-01, ARG1, c / country)
(c3 / country, name, n3 / name)
(d / defend-01, ARG1, u / update-01)
(h / hardware, mod, o / obsolete)
(i / insist-01, ARG1, d / defend-01)
(n / name, op, "Venezuela")
(n3 / name, op, "Venezuela")
(n4 / need-01, ARG1, u / update-01)
(p / protect-01, ARG1, c3 / country)
(u / update-01, ARG1, h / hardware)
(u / update-01, concession, p / protect-01)
(w / want-01, ARG0, n2 / nation)
(w / want-01, ARG1, c3 / country)
(w / want-01, ARG2, c2 / control-01)

Decoded in 1,003,074 microseconds
Sentence: Venezuela is South America's largest petroleum-producing state.

NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "South" :op "America"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 8-9:  producing => produce-01
Span 2-4:  South America => (country :name (name :op "South" :op "America"))
Span 0-1:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  petroleum => petroleum
Oracle Span 8-9:  producing => produce-01
Oracle Span 2-4:  South America => (continent :name (name :op "America" :op "South"))
Oracle Span 9-10:  state => state
Oracle Span 0-1:  Venezuela => (country :name (name :op "Venezuela"))

Incorrect span: South America => (country :name (name :op "South" :op "America"))
Missing span: South America => (continent :name (name :op "America" :op "South"))
Missing span: state => state
Missing span: petroleum => petroleum
Dependencies:
1	Venezuela	_	NNP	NNP	_	8	nsubj	_	_
2	is	_	VBZ	VBZ	_	8	cop	_	_
3	South	_	NNP	NNP	_	4	nn	_	_
4	America	_	NNP	NNP	_	8	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	largest	_	JJS	JJS	_	8	amod	_	_
7	petroleum-producing	_	JJ	JJ	_	8	amod	_	_
8	state	_	NN	NN	_	0	root	_	_
9	.	_	.	.	_	8	punct	_	_

Oracle:
(c3 / continent, name, n3 / name)
(c4 / country, name, n4 / name)
(n3 / name, op, "America")
(n3 / name, op, "South")
(n4 / name, op, "Venezuela")
(p3 / produce-01, ARG0, s / state)
(p3 / produce-01, ARG1, p4 / petroleum)
(p3 / produce-01, compared-to, c3 / continent)
(s / state, domain, c4 / country)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),producing,produce-01,false), Span(2,4,List(4, 3, 2, 1),South America,(country :name (name :op "South" :op "America")),false), Span(0,1,List(7, 6, 5),Venezuela,(country :name (name :op "Venezuela")),false)),Map(2 -> name, 5 -> country, 7 -> "Venezuela", 1 -> country, 4 -> "America", 6 -> name, 0 -> produce-01, 3 -> "South"),Map(n -> name, p -> produce-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@3c9bfddc,Annotation([Ljava.lang.String;@1a9c38eb,[Ljava.lang.String;@319bc845,[Ljava.lang.String;@4c5474f5),Annotation([Ljava.lang.String;@2f4205be,[Ljava.lang.String;@54e22bdd,[Ledu.cmu.lti.nlp.amr.Dependency;@3bd418e4),Annotation([Ljava.lang.String;@544820b7,[Ljava.lang.String;@6b98a075,[Ljava.lang.String;@2e61d218),Annotation([Ljava.lang.String;@3569fc08,[Ljava.lang.String;@20b12f8a,[Ledu.cmu.lti.nlp.amr.Entity;@e84a8e1))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "America")
(n / name, op, "South")
(n2 / name, op, "Venezuela")
(p / produce-01, ARG0, c / country)
(p / produce-01, ARG1, c2 / country)

Decoded in 28,247 microseconds
Sentence: Chavez's domestic opponents scoff at the idea that the US would ever invade Venezuela and charge that Chavez's true intention is to arm a huge cadre of loyal reservists who would protect Chavez against any internal uprising and to pose as a militarized counterweight to US influence in Latin America.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 36-37:  any => any
Span 24-25:  arm => arm-01
Span 2-3:  domestic => domestic
Span 26-27:  huge => huge
Span 7-8:  idea => idea
Span 48-49:  influence => influence-01
Span 21-22:  intention => intend-01
Span 37-38:  internal => internal
Span 13-14:  invade => invade-01
Span 50-52:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Span 41-42:  pose => pose-02
Span 33-34:  protect => protect-01
Span 14-15:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 39-40:  and => and
Oracle Span 36-37:  any => any
Oracle Span 24-25:  arm => arm-01
Oracle Span 27-28:  cadre => cadre
Oracle Span 16-17:  charge => charge-06
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 45-46:  counterweight => counterweight
Oracle Span 2-3:  domestic => domestic
Oracle Span 12-13:  ever => ever
Oracle Span 26-27:  huge => huge
Oracle Span 7-8:  idea => idea
Oracle Span 48-49:  influence => influence-01
Oracle Span 21-22:  intention => intend-01
Oracle Span 37-38:  internal => internal
Oracle Span 13-14:  invade => invade-01
Oracle Span 50-52:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Oracle Span 29-30:  loyal => loyal-41
Oracle Span 44-45:  militarized => militarize-00
Oracle Span 3-4:  opponents => (person :ARG0-of oppose-01)
Oracle Span 41-42:  pose => pose-01
Oracle Span 33-34:  protect => protect-01
Oracle Span 30-31:  reservists => reservist
Oracle Span 4-5:  scoff => scoff-01
Oracle Span 20-21:  true => true
Oracle Span 38-39:  uprising => uprise-00
Oracle Span 10-11:  US => (country :name (name :op "US"))
Oracle Span 14-15:  Venezuela => (country :name (name :op "Venezuela"))

Incorrect span: pose => pose-02
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: US => (country :name (name :op "US"))
Missing span: and => and
Missing span: charge => charge-06
Missing span: and => and
Missing span: pose => pose-01
Missing span: counterweight => counterweight
Missing span: militarized => militarize-00
Missing span: cadre => cadre
Missing span: uprising => uprise-00
Missing span: reservists => reservist
Missing span: loyal => loyal-41
Missing span: true => true
Missing span: scoff => scoff-01
Missing span: ever => ever
Missing span: opponents => (person :ARG0-of oppose-01)
Dependencies:
1	Chavez	_	NNP	NNP	_	4	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	domestic	_	JJ	JJ	_	4	amod	_	_
4	opponents	_	NNS	NNS	_	5	nsubj	_	_
5	scoff	_	VBP	VBP	_	0	root	_	_
6	at	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	idea	_	NN	NN	_	6	pobj	_	_
9	that	_	IN	IN	_	14	mark	_	_
10	the	_	DT	DT	_	11	det	_	_
11	US	_	NNP	NNP	_	14	nsubj	_	_
12	would	_	MD	MD	_	14	aux	_	_
13	ever	_	RB	RB	_	14	advmod	_	_
14	invade	_	VB	VB	_	5	ccomp	_	_
15	Venezuela	_	NNP	NNP	_	14	dobj	_	_
16	and	_	CC	CC	_	14	cc	_	_
17	charge	_	VB	VB	_	14	conj	_	_
18	that	_	IN	IN	_	23	mark	_	_
19	Chavez	_	NNP	NNP	_	22	poss	_	_
20	's	_	POS	POS	_	19	possessive	_	_
21	true	_	JJ	JJ	_	22	amod	_	_
22	intention	_	NN	NN	_	23	nsubj	_	_
23	is	_	VBZ	VBZ	_	17	ccomp	_	_
24	to	_	TO	TO	_	25	aux	_	_
25	arm	_	VB	VB	_	23	ccomp	_	_
26	a	_	DT	DT	_	28	det	_	_
27	huge	_	JJ	JJ	_	28	amod	_	_
28	cadre	_	NN	NN	_	25	dobj	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	loyal	_	JJ	JJ	_	31	amod	_	_
31	reservists	_	NNS	NNS	_	29	pobj	_	_
32	who	_	WP	WP	_	34	nsubj	_	_
33	would	_	MD	MD	_	34	aux	_	_
34	protect	_	VB	VB	_	28	rcmod	_	_
35	Chavez	_	NNP	NNP	_	34	dobj	_	_
36	against	_	IN	IN	_	35	prep	_	_
37	any	_	DT	DT	_	39	det	_	_
38	internal	_	JJ	JJ	_	39	amod	_	_
39	uprising	_	NN	NN	_	36	pobj	_	_
40	and	_	CC	CC	_	25	cc	_	_
41	to	_	TO	TO	_	42	aux	_	_
42	pose	_	VB	VB	_	25	conj	_	_
43	as	_	IN	IN	_	42	prep	_	_
44	a	_	DT	DT	_	46	det	_	_
45	militarized	_	JJ	JJ	_	46	amod	_	_
46	counterweight	_	NN	NN	_	43	pobj	_	_
47	to	_	TO	TO	_	46	prep	_	_
48	US	_	NNP	NNP	_	49	nn	_	_
49	influence	_	NN	NN	_	47	pobj	_	_
50	in	_	IN	IN	_	42	prep	_	_
51	Latin	_	NNP	NNP	_	52	nn	_	_
52	America	_	NNP	NNP	_	50	pobj	_	_
53	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c / charge-06)
(a / and, op, s / scoff-01)
(a2 / and, op, a4 / arm-01)
(a2 / and, op, p4 / pose-01)
(a4 / arm-01, ARG0, p2 / person)
(a4 / arm-01, ARG1, c4 / cadre)
(c / charge-06, ARG0, p / person)
(c / charge-06, ARG1, i3 / intend-01)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / cadre, mod, h / huge)
(c5 / counterweight, prep-to, i5 / influence-01)
(i / idea, topic, i2 / invade-01)
(i2 / invade-01, ARG0, c2 / country)
(i2 / invade-01, ARG1, c3 / country)
(i2 / invade-01, time, e / ever)
(i3 / intend-01, ARG0, p2 / person)
(i3 / intend-01, ARG1, a2 / and)
(i3 / intend-01, mod, t / true)
(i5 / influence-01, ARG0, c2 / country)
(i5 / influence-01, location, w / world-region)
(l / loyal-41, ARG1, r / reservist)
(m / militarize-00, ARG1, c5 / counterweight)
(n / name, op, "US")
(n2 / name, op, "Venezuela")
(n3 / name, op, "Chavez")
(n4 / name, op, "America")
(n4 / name, op, "Latin")
(o / oppose-01, ARG0, p / person)
(o / oppose-01, ARG1, p2 / person)
(p / person, mod, d / domestic)
(p2 / person, name, n3 / name)
(p3 / protect-01, ARG0, c4 / cadre)
(p3 / protect-01, ARG1, p2 / person)
(p3 / protect-01, ARG2, u / uprise-00)
(p4 / pose-01, ARG0, p2 / person)
(p4 / pose-01, ARG1, c5 / counterweight)
(r / reservist, consist, c4 / cadre)
(s / scoff-01, ARG0, p / person)
(s / scoff-01, ARG1, i / idea)
(u / uprise-00, mod, a3 / any)
(u / uprise-00, mod, i4 / internal)
(w / world-region, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(50,52,List(3, 2, 1, 0),Latin America,(world-region :name (name :op "America" :op "Latin")),false), Span(48,49,List(4),influence,influence-01,false), Span(41,42,List(5),pose,pose-02,false), Span(37,38,List(6),internal,internal,false), Span(36,37,List(7),any,any,false), Span(33,34,List(8),protect,protect-01,false), Span(26,27,List(9),huge,huge,false), Span(24,25,List(10),arm,arm-01,false), Span(21,22,List(11),intention,intend-01,false), Span(14,15,List(14, 13, 12),Venezuela,(country :name (name :op "Venezuela")),false), Span(13,14,List(15),invade,invade-01,false), Span(7,8,List(16),idea,idea,false), Span(2,3,List(17),domestic,domestic,false)),Map(2 -> "America", 5 -> pose-02, 12 -> country, 15 -> invade-01, 8 -> protect-01, 7 -> any, 17 -> domestic, 1 -> name, 4 -> influence-01, 11 -> intend-01, 14 -> "Venezuela", 6 -> internal, 0 -> world-region, 9 -> huge, 16 -> idea, 3 -> "Latin", 10 -> arm-01, 13 -> name),Map(w -> world-region, n -> name, h -> huge, i4 -> invade-01, p2 -> protect-01, d -> domestic, i3 -> intend-01, p -> pose-02, a -> any, i2 -> internal, i5 -> idea, i -> influence-01, a2 -> arm-01, c -> country, n2 -> name))),[Ljava.lang.String;@2e554a3b,Annotation([Ljava.lang.String;@54a67a45,[Ljava.lang.String;@7d42c224,[Ljava.lang.String;@56aaaecd),Annotation([Ljava.lang.String;@522a32b1,[Ljava.lang.String;@35390ee3,[Ledu.cmu.lti.nlp.amr.Dependency;@5e01a982),Annotation([Ljava.lang.String;@5ddea849,[Ljava.lang.String;@5ee2b6f9,[Ljava.lang.String;@23d1e5d0),Annotation([Ljava.lang.String;@704f1591,[Ljava.lang.String;@58fb7731,[Ledu.cmu.lti.nlp.amr.Entity;@13e547a9))
AMR:
(a2 / arm-01, ARG0, i3 / intend-01)
(a2 / arm-01, ARG1, p2 / protect-01)
(c / country, name, n2 / name)
(d / domestic, op, a2 / arm-01)
(h / huge, op, i / influence-01)
(i / influence-01, ARG1, w / world-region)
(i2 / internal, op, i3 / intend-01)
(i3 / intend-01, ARG1, i4 / invade-01)
(i4 / invade-01, ARG0, i5 / idea)
(i4 / invade-01, ARG1, c / country)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "Venezuela")
(p / pose-02, ARG0, a / any)
(p / pose-02, ARG1, a2 / arm-01)
(p / pose-02, ARG2, i / influence-01)
(w / world-region, name, n / name)

Decoded in 657,887 microseconds
Sentence: Cuban leader Fidel Castro is Chavez's his major ally and Chavez is growing closer to Castro.

NER Entity: (thing :name (name :op "Cuban"))
NER Entity: (person :name (name :op "Fidel" :op "Castro"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Castro"))
NER Entity: (person :name (name :op "Castro"))
NER Entity: (thing :name (name :op "Cuban"))
Spans:
Span 9-10:  ally => ally-01
Span 16-17:  Castro => (person :name (name :op "Castro"))
Span 14-15:  closer => close
Span 0-1:  Cuban => (country :name (name :op "Cuba"))
Span 2-4:  Fidel Castro => (person :name (name :op "Castro" :op "Fidel"))
Span 8-9:  major => major

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 9-10:  ally => ally-01
Oracle Span 10-11:  and => and
Oracle Span 5-6:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 14-15:  closer => close-41
Oracle Span 0-1:  Cuban => (country :name (name :op "Cuba"))
Oracle Span 2-4:  Fidel Castro => (person :name (name :op "Castro" :op "Fidel"))
Oracle Span 13-14:  growing => grow-02
Oracle Span 1-2:  leader => lead-02
Oracle Span 8-9:  major => major

Extra span: Castro => (person :name (name :op "Castro"))
Incorrect span: closer => close
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: and => and
Missing span: growing => grow-02
Missing span: closer => close-41
Missing span: leader => lead-02
Dependencies:
1	Cuban	_	JJ	JJ	_	4	amod	_	_
2	leader	_	NN	NN	_	4	nn	_	_
3	Fidel	_	NNP	NNP	_	4	nn	_	_
4	Castro	_	NNP	NNP	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	Chavez	_	NNP	NNP	_	0	root	_	_
7	's	_	POS	POS	_	6	possessive	_	_
8	his	_	PRP$	PRP$	_	10	poss	_	_
9	major	_	JJ	JJ	_	10	amod	_	_
10	ally	_	NN	NN	_	6	dep	_	_
11	and	_	CC	CC	_	6	cc	_	_
12	Chavez	_	NNP	NNP	_	14	nsubj	_	_
13	is	_	VBZ	VBZ	_	14	aux	_	_
14	growing	_	VBG	VBG	_	6	conj	_	_
15	closer	_	RBR	RBR	_	14	advmod	_	_
16	to	_	TO	TO	_	14	prep	_	_
17	Castro	_	NNP	NNP	_	16	pobj	_	_
18	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, a2 / ally-01)
(a / and, op, g / grow-02)
(a2 / ally-01, ARG1, p / person)
(a2 / ally-01, ARG2, p2 / person)
(a2 / ally-01, mod, m / major)
(c / country, name, n2 / name)
(c2 / close-41, ARG1, p2 / person)
(c2 / close-41, ARG2, p / person)
(g / grow-02, ARG1, p2 / person)
(g / grow-02, ARG2, c2 / close-41)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, c / country)
(n / name, op, "Castro")
(n / name, op, "Fidel")
(n2 / name, op, "Cuba")
(n3 / name, op, "Chavez")
(p / person, name, n / name)
(p2 / person, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),Castro,(person :name (name :op "Castro")),false), Span(14,15,List(3),closer,close,false), Span(9,10,List(4),ally,ally-01,false), Span(8,9,List(5),major,major,false), Span(2,4,List(9, 8, 7, 6),Fidel Castro,(person :name (name :op "Castro" :op "Fidel")),false), Span(0,1,List(12, 11, 10),Cuban,(country :name (name :op "Cuba")),false)),Map(2 -> "Castro", 5 -> major, 12 -> "Cuba", 8 -> "Castro", 7 -> name, 1 -> name, 4 -> ally-01, 11 -> name, 6 -> person, 0 -> person, 9 -> "Fidel", 3 -> close, 10 -> country),Map(n -> name, p2 -> person, m -> major, p -> person, n3 -> name, a -> ally-01, c -> close, c2 -> country, n2 -> name))),[Ljava.lang.String;@3fb6cf60,Annotation([Ljava.lang.String;@37ddb69a,[Ljava.lang.String;@349c1daf,[Ljava.lang.String;@dfddc9a),Annotation([Ljava.lang.String;@4b9df8a,[Ljava.lang.String;@5e8ac0e1,[Ledu.cmu.lti.nlp.amr.Dependency;@aafcffa),Annotation([Ljava.lang.String;@6955cb39,[Ljava.lang.String;@235a0c16,[Ljava.lang.String;@2b5f4d54),Annotation([Ljava.lang.String;@5f7b97da,[Ljava.lang.String;@18b0930f,[Ledu.cmu.lti.nlp.amr.Entity;@6b7906b3))
AMR:
(a / ally-01, ARG0, c / close)
(a / ally-01, ARG2, c2 / country)
(a / ally-01, mod, m / major)
(c2 / country, name, n3 / name)
(n / name, op, "Castro")
(n2 / name, op, "Castro")
(n2 / name, op, "Fidel")
(n3 / name, op, "Cuba")
(p / person, mod, c2 / country)
(p / person, name, n / name)
(p2 / person, mod, c2 / country)
(p2 / person, name, n2 / name)

Decoded in 185,600 microseconds
Sentence: Chavez's detractors in the US government say that it is even more troubling that Chavez's arms purchases and indoctrination of civilian militias could be part of a strategy to restructure Venezuelan democracy in the image of Cuban-style militarized socialism and foment leftist revolutions throughout South America.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (thing :name (name :op "Cuban" :op "-" :op "style"))
NER Entity: (country :name (name :op "South" :op "America"))
NER Entity: (thing :name (name :op "Cuban" :op "-" :op "style"))
Spans:
Span 22-23:  civilian => civilian
Span 24-25:  could => possible
Span 38-39:  Cuban => (country :name (name :op "Cuba"))
Span 33-34:  democracy => democracy
Span 36-37:  image => image
Span 23-24:  militias => militia
Span 18-19:  purchases => purchase-01
Span 46-48:  revolutions throughout => (country :name (name :op "South" :op "America"))
Span 7-8:  say => say-01
Span 29-30:  strategy => strategy
Span 40-41:  style => style
Span 13-14:  troubling => trouble-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 19-20:  and => and
Oracle Span 17-18:  arms => arm
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 22-23:  civilian => civilian
Oracle Span 24-25:  could => possible
Oracle Span 38-39:  Cuban => (country :name (name :op "Cuba"))
Oracle Span 33-34:  democracy => democracy
Oracle Span 2-3:  detractors => (person :ARG0-of detract-01)
Oracle Span 11-12:  even => even
Oracle Span 44-45:  foment => foment-01
Oracle Span 6-7:  government => (government-organization :ARG0-of govern-01)
Oracle Span 36-37:  image => image
Oracle Span 20-21:  indoctrination => indoctrinate-01
Oracle Span 45-46:  leftist => leftist
Oracle Span 41-42:  militarized => militarize-00
Oracle Span 23-24:  militias => militia
Oracle Span 12-13:  more => more
Oracle Span 18-19:  purchases => purchase-01
Oracle Span 31-32:  restructure => restructure-01
Oracle Span 46-47:  revolutions => revolution
Oracle Span 7-8:  say => say-01
Oracle Span 42-43:  socialism => socialism
Oracle Span 48-50:  South America => (continent :name (name :op "America" :op "South"))
Oracle Span 29-30:  strategy => strategy
Oracle Span 40-41:  style => style
Oracle Span 47-48:  throughout => throughout
Oracle Span 13-14:  troubling => trouble-01
Oracle Span 5-6:  US => (country :name (name :op "US"))
Oracle Span 32-33:  Venezuelan => (country :name (name :op "Venezuela"))

Extra span: revolutions throughout => (country :name (name :op "South" :op "America"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: US => (country :name (name :op "US"))
Missing span: South America => (continent :name (name :op "America" :op "South"))
Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: more => more
Missing span: even => even
Missing span: foment => foment-01
Missing span: throughout => throughout
Missing span: revolutions => revolution
Missing span: leftist => leftist
Missing span: restructure => restructure-01
Missing span: socialism => socialism
Missing span: militarized => militarize-00
Missing span: and => and
Missing span: arms => arm
Missing span: indoctrination => indoctrinate-01
Missing span: detractors => (person :ARG0-of detract-01)
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Chavez	_	NNP	NNP	_	3	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	detractors	_	NNS	NNS	_	8	nsubj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	US	_	NNP	NNP	_	7	nn	_	_
7	government	_	NN	NN	_	4	pobj	_	_
8	say	_	VBP	VBP	_	0	root	_	_
9	that	_	IN	IN	_	14	mark	_	_
10	it	_	PRP	PRP	_	14	nsubj	_	_
11	is	_	VBZ	VBZ	_	14	cop	_	_
12	even	_	RB	RB	_	14	advmod	_	_
13	more	_	RBR	RBR	_	14	advmod	_	_
14	troubling	_	JJ	JJ	_	8	ccomp	_	_
15	that	_	IN	IN	_	27	mark	_	_
16	Chavez	_	NNP	NNP	_	19	poss	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	arms	_	NNS	NNS	_	19	nn	_	_
19	purchases	_	NNS	NNS	_	27	nsubj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	indoctrination	_	NN	NN	_	19	conj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	civilian	_	JJ	JJ	_	24	amod	_	_
24	militias	_	NNS	NNS	_	22	pobj	_	_
25	could	_	MD	MD	_	27	aux	_	_
26	be	_	VB	VB	_	27	cop	_	_
27	part	_	NN	NN	_	14	ccomp	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	a	_	DT	DT	_	30	det	_	_
30	strategy	_	NN	NN	_	28	pobj	_	_
31	to	_	TO	TO	_	32	aux	_	_
32	restructure	_	VB	VB	_	30	vmod	_	_
33	Venezuelan	_	JJ	JJ	_	34	amod	_	_
34	democracy	_	NN	NN	_	32	dobj	_	_
35	in	_	IN	IN	_	32	prep	_	_
36	the	_	DT	DT	_	37	det	_	_
37	image	_	NN	NN	_	35	pobj	_	_
38	of	_	IN	IN	_	37	prep	_	_
39	Cuban-style	_	JJ	JJ	_	41	amod	_	_
40	militarized	_	JJ	JJ	_	41	amod	_	_
41	socialism	_	NN	NN	_	38	pobj	_	_
42	and	_	CC	CC	_	32	cc	_	_
43	foment	_	VB	VB	_	32	conj	_	_
44	leftist	_	JJ	JJ	_	45	amod	_	_
45	revolutions	_	NNS	NNS	_	43	dobj	_	_
46	throughout	_	IN	IN	_	43	prep	_	_
47	South	_	NNP	NNP	_	48	nn	_	_
48	America	_	NNP	NNP	_	46	pobj	_	_
49	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, i / indoctrinate-01)
(a / and, op, p3 / purchase-01)
(c / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / continent, name, n6 / name)
(d / detract-01, ARG0, p / person)
(d / detract-01, ARG1, p2 / person)
(d2 / democracy, mod, c3 / country)
(f / foment-01, ARG0, s2 / strategy)
(f / foment-01, ARG1, r2 / revolution)
(f / foment-01, path, t2 / throughout)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / indoctrinate-01, ARG1, m / militia)
(i2 / image, mod, s3 / socialism)
(m / militia, mod, c2 / civilian)
(m2 / militarize-00, ARG1, s3 / socialism)
(m3 / more, mod, e / even)
(n / name, op, "Chavez")
(n2 / name, op, "US")
(n3 / name, op, "Venezuela")
(n4 / name, op, "Cuba")
(n6 / name, op, "America")
(n6 / name, op, "South")
(p / person, location, g / government-organization)
(p2 / person, name, n / name)
(p3 / purchase-01, ARG0, p2 / person)
(p3 / purchase-01, ARG1, a2 / arm)
(r / restructure-01, ARG0, s2 / strategy)
(r / restructure-01, ARG1, d2 / democracy)
(r / restructure-01, manner, i2 / image)
(r2 / revolution, mod, l / leftist)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, t / trouble-01)
(s3 / socialism, mod, s4 / style)
(s4 / style, mod, c4 / country)
(t / trouble-01, degree, m3 / more)
(t2 / throughout, location, c5 / continent)

Input(Some(Graph(null,ArrayBuffer(Span(46,48,List(3, 2, 1, 0),revolutions throughout,(country :name (name :op "South" :op "America")),false), Span(40,41,List(4),style,style,false), Span(38,39,List(7, 6, 5),Cuban,(country :name (name :op "Cuba")),false), Span(36,37,List(8),image,image,false), Span(33,34,List(9),democracy,democracy,false), Span(29,30,List(10),strategy,strategy,false), Span(24,25,List(11),could,possible,false), Span(23,24,List(12),militias,militia,false), Span(22,23,List(13),civilian,civilian,false), Span(18,19,List(14),purchases,purchase-01,false), Span(13,14,List(15),troubling,trouble-01,false), Span(7,8,List(16),say,say-01,false)),Map(2 -> "South", 5 -> country, 12 -> militia, 15 -> trouble-01, 8 -> image, 7 -> "Cuba", 1 -> name, 4 -> style, 11 -> possible, 14 -> purchase-01, 6 -> name, 0 -> country, 9 -> democracy, 16 -> say-01, 3 -> "America", 10 -> strategy, 13 -> civilian),Map(n -> name, s2 -> strategy, t -> trouble-01, p2 -> purchase-01, s -> style, d -> democracy, m -> militia, p -> possible, c3 -> civilian, i -> image, s3 -> say-01, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@3a1dd365,Annotation([Ljava.lang.String;@395b56bb,[Ljava.lang.String;@256f8274,[Ljava.lang.String;@68044f4),Annotation([Ljava.lang.String;@52d239ba,[Ljava.lang.String;@315f43d5,[Ledu.cmu.lti.nlp.amr.Dependency;@68fa0ba8),Annotation([Ljava.lang.String;@6c5945a7,[Ljava.lang.String;@2f05be7f,[Ljava.lang.String;@640f11a1),Annotation([Ljava.lang.String;@5c10f1c3,[Ljava.lang.String;@7ac2e39b,[Ledu.cmu.lti.nlp.amr.Entity;@78365cfa))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / democracy, location, i / image)
(d / democracy, op, t / trouble-01)
(m / militia, mod, c / country)
(m / militia, mod, c3 / civilian)
(n / name, op, "America")
(n / name, op, "South")
(n2 / name, op, "Cuba")
(p / possible, op, s2 / strategy)
(p2 / purchase-01, ARG0, c2 / country)
(p2 / purchase-01, ARG1, m / militia)
(s / style, mod, c2 / country)
(s3 / say-01, ARG0, s2 / strategy)
(s3 / say-01, ARG1, t / trouble-01)
(t / trouble-01, ARG1, p2 / purchase-01)

Decoded in 604,668 microseconds
Sentence: US military strategists say they are increasingly concerned that radical movements inspired by Chavez could foment such revolution.

NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 7-8:  concerned => concern-01
Span 14-15:  could => possible
Span 6-7:  increasingly => increase-01
Span 11-12:  inspired => inspire-01
Span 9-10:  radical => radical
Span 3-4:  say => say-01
Span 2-3:  strategists => strategize-01
Span 16-17:  such => such

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 13-14:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 7-8:  concerned => concern-01
Oracle Span 14-15:  could => possible
Oracle Span 15-16:  foment => foment-01
Oracle Span 6-7:  increasingly => increase-01
Oracle Span 11-12:  inspired => inspire-01
Oracle Span 1-2:  military => (have-org-role-91 :ARG1 military)
Oracle Span 10-11:  movements => move-02
Oracle Span 9-10:  radical => radical
Oracle Span 17-18:  revolution => revolution
Oracle Span 3-4:  say => say-01
Oracle Span 2-3:  strategists => strategize-01
Oracle Span 16-17:  such => such
Oracle Span 0-1:  US => (country :name (name :op "US"))

Missing span: US => (country :name (name :op "US"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: foment => foment-01
Missing span: revolution => revolution
Missing span: military => (have-org-role-91 :ARG1 military)
Missing span: movements => move-02
Dependencies:
1	US	_	NNP	NNP	_	3	nn	_	_
2	military	_	JJ	JJ	_	3	amod	_	_
3	strategists	_	NNS	NNS	_	4	nsubj	_	_
4	say	_	VBP	VBP	_	0	root	_	_
5	they	_	PRP	PRP	_	8	nsubj	_	_
6	are	_	VBP	VBP	_	8	cop	_	_
7	increasingly	_	RB	RB	_	8	advmod	_	_
8	concerned	_	JJ	JJ	_	4	ccomp	_	_
9	that	_	IN	IN	_	16	mark	_	_
10	radical	_	JJ	JJ	_	11	amod	_	_
11	movements	_	NNS	NNS	_	16	nsubj	_	_
12	inspired	_	VBN	VBN	_	11	vmod	_	_
13	by	_	IN	IN	_	12	prep	_	_
14	Chavez	_	NNP	NNP	_	13	pobj	_	_
15	could	_	MD	MD	_	16	aux	_	_
16	foment	_	VB	VB	_	8	ccomp	_	_
17	such	_	JJ	JJ	_	18	amod	_	_
18	revolution	_	NN	NN	_	16	dobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / concern-01, ARG0, f / foment-01)
(f / foment-01, ARG0, m2 / move-02)
(f / foment-01, ARG1, r2 / revolution)
(f / foment-01, mod, p3 / possible)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG3, s2 / strategize-01)
(i / inspire-01, ARG0, p2 / person)
(i / inspire-01, ARG2, m2 / move-02)
(i2 / increase-01, ARG1, c2 / concern-01)
(m / military, mod, c / country)
(m2 / move-02, mod, r / radical)
(n / name, op, "US")
(n2 / name, op, "Chavez")
(p2 / person, name, n2 / name)
(r2 / revolution, mod, s3 / such)
(s / say-01, ARG1, c2 / concern-01)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),such,such,false), Span(14,15,List(1),could,possible,false), Span(11,12,List(2),inspired,inspire-01,false), Span(9,10,List(3),radical,radical,false), Span(7,8,List(4),concerned,concern-01,false), Span(6,7,List(5),increasingly,increase-01,false), Span(3,4,List(6),say,say-01,false), Span(2,3,List(7),strategists,strategize-01,false)),Map(2 -> inspire-01, 5 -> increase-01, 7 -> strategize-01, 1 -> possible, 4 -> concern-01, 6 -> say-01, 0 -> such, 3 -> radical),Map(s2 -> say-01, s -> such, p -> possible, i2 -> increase-01, r -> radical, i -> inspire-01, s3 -> strategize-01, c -> concern-01))),[Ljava.lang.String;@64a8c844,Annotation([Ljava.lang.String;@3f6db3fb,[Ljava.lang.String;@52de51b6,[Ljava.lang.String;@18c5069b),Annotation([Ljava.lang.String;@3a0d172f,[Ljava.lang.String;@68ad99fe,[Ledu.cmu.lti.nlp.amr.Dependency;@485e36bc),Annotation([Ljava.lang.String;@781f10f2,[Ljava.lang.String;@2a79d4b1,[Ljava.lang.String;@2e9fda69),Annotation([Ljava.lang.String;@17cdf2d0,[Ljava.lang.String;@1755e85b,[Ledu.cmu.lti.nlp.amr.Entity;@736d6a5c))
AMR:
(c / concern-01, ARG0, p / possible)
(c / concern-01, ARG2, r / radical)
(i / inspire-01, ARG1, p / possible)
(i2 / increase-01, ARG0, s3 / strategize-01)
(s2 / say-01, ARG0, s3 / strategize-01)
(s2 / say-01, ARG1, c / concern-01)
(s3 / strategize-01, ARG1, s / such)

Decoded in 167,394 microseconds
Sentence: The political mainstream in Latin America has shifted leftward since the late 1990s.

NER Entity: (country :name (name :op "Latin" :op "America"))
Spans:
Span 12-13:  1990s => 1990
Span 11-12:  late => late
Span 4-6:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Span 9-10:  since => since

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  1990s => 1990
Oracle Span 11-12:  late => late
Oracle Span 4-6:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Oracle Span 8-9:  leftward => leftward
Oracle Span 2-3:  mainstream => mainstream
Oracle Span 1-2:  political => politics
Oracle Span 7-8:  shifted => shift-01
Oracle Span 9-10:  since => since

Missing span: shifted => shift-01
Missing span: leftward => leftward
Missing span: mainstream => mainstream
Missing span: political => politics
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	political	_	JJ	JJ	_	3	amod	_	_
3	mainstream	_	NN	NN	_	8	nsubj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Latin	_	NNP	NNP	_	6	nn	_	_
6	America	_	NNP	NNP	_	4	pobj	_	_
7	has	_	VBZ	VBZ	_	8	aux	_	_
8	shifted	_	VBN	VBN	_	0	root	_	_
9	leftward	_	VBN	VBN	_	8	dep	_	_
10	since	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	late	_	JJ	JJ	_	13	amod	_	_
13	1990s	_	NNS	NNS	_	10	pobj	_	_
14	.	_	.	.	_	8	punct	_	_

Oracle:
(m / mainstream, location, w / world-region)
(m / mainstream, mod, p / politics)
(n / name, op, "America")
(n / name, op, "Latin")
(s / shift-01, ARG1, m / mainstream)
(s / shift-01, ARG2, l2 / leftward)
(s / shift-01, time, s2 / since)
(s2 / since, op, l3 / late)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),1990s,1990,false), Span(11,12,List(1),late,late,false), Span(9,10,List(2),since,since,false), Span(4,6,List(6, 5, 4, 3),Latin America,(world-region :name (name :op "America" :op "Latin")),false)),Map(2 -> since, 5 -> "America", 1 -> late, 4 -> name, 6 -> "Latin", 0 -> 1990, 3 -> world-region),Map(n -> name, w -> world-region, s -> since, 1 -> 1990, l -> late))),[Ljava.lang.String;@2371aaca,Annotation([Ljava.lang.String;@5b529706,[Ljava.lang.String;@63fdab07,[Ljava.lang.String;@7b5a12ae),Annotation([Ljava.lang.String;@5553d0f5,[Ljava.lang.String;@1af687fe,[Ledu.cmu.lti.nlp.amr.Dependency;@14dda234),Annotation([Ljava.lang.String;@3f390d63,[Ljava.lang.String;@74a6a609,[Ljava.lang.String;@5a411614),Annotation([Ljava.lang.String;@2374d36a,[Ljava.lang.String;@54d18072,[Ledu.cmu.lti.nlp.amr.Entity;@1506f20f))
AMR:
(1 / 1990, op, w / world-region)
(1 / 1990, time, l / late)
(n / name, op, "America")
(n / name, op, "Latin")
(s / since, op, l / late)
(w / world-region, name, n / name)

Decoded in 36,248 microseconds
Sentence: This leftward shift is largely in reaction to the perceived failure of free-market economics.

Spans:
Span 10-11:  failure => fail-01
Span 4-5:  largely => large
Span 14-15:  market => market
Span 6-7:  reaction => react-01
Span 2-3:  shift => shift-01
Span 0-1:  This => this

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 15-16:  economics => economics
Oracle Span 10-11:  failure => fail-01
Oracle Span 12-13:  free => free
Oracle Span 4-5:  largely => large
Oracle Span 1-2:  leftward => leftward
Oracle Span 14-15:  market => market
Oracle Span 9-10:  perceived => perceive-01
Oracle Span 6-7:  reaction => react-01
Oracle Span 2-3:  shift => shift-01
Oracle Span 0-1:  This => this

Missing span: economics => economics
Missing span: free => free
Missing span: perceived => perceive-01
Missing span: leftward => leftward
Dependencies:
1	This	_	DT	DT	_	3	det	_	_
2	leftward	_	JJ	JJ	_	3	amod	_	_
3	shift	_	NN	NN	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	0	root	_	_
5	largely	_	RB	RB	_	4	advmod	_	_
6	in	_	IN	IN	_	4	prep	_	_
7	reaction	_	NN	NN	_	6	pobj	_	_
8	to	_	TO	TO	_	4	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	perceived	_	VBN	VBN	_	11	amod	_	_
11	failure	_	NN	NN	_	8	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	free-market	_	JJ	JJ	_	14	amod	_	_
14	economics	_	NNS	NNS	_	12	pobj	_	_
15	.	_	.	.	_	4	punct	_	_

Oracle:
(e / economics, mod, m / market)
(f / fail-01, ARG1, e / economics)
(m / market, mod, f2 / free)
(p / perceive-01, ARG1, f / fail-01)
(r / react-01, ARG1, f / fail-01)
(r / react-01, ARG2, s / shift-01)
(r / react-01, manner, l2 / large)
(s / shift-01, ARG2, l / leftward)
(s / shift-01, mod, t / this)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),market,market,false), Span(10,11,List(1),failure,fail-01,false), Span(6,7,List(2),reaction,react-01,false), Span(4,5,List(3),largely,large,false), Span(2,3,List(4),shift,shift-01,false), Span(0,1,List(5),This,this,false)),Map(2 -> react-01, 5 -> this, 1 -> fail-01, 4 -> shift-01, 0 -> market, 3 -> large),Map(t -> this, s -> shift-01, m -> market, r -> react-01, l -> large, f -> fail-01))),[Ljava.lang.String;@47a5b70d,Annotation([Ljava.lang.String;@424fd310,[Ljava.lang.String;@1a45193b,[Ljava.lang.String;@38f116f6),Annotation([Ljava.lang.String;@5286c33a,[Ljava.lang.String;@6e6d5d29,[Ledu.cmu.lti.nlp.amr.Dependency;@5c530d1e),Annotation([Ljava.lang.String;@6c25e6c4,[Ljava.lang.String;@85e6769,[Ljava.lang.String;@c5ee75e),Annotation([Ljava.lang.String;@48a12036,[Ljava.lang.String;@bf1ec20,[Ledu.cmu.lti.nlp.amr.Entity;@70efb718))
AMR:
(f / fail-01, ARG1, l / large)
(f / fail-01, ARG2, r / react-01)
(r / react-01, ARG1, s / shift-01)
(s / shift-01, ARG1, m / market)
(s / shift-01, mod, t / this)

Decoded in 86,023 microseconds
Sentence: Leftists have been elected to lead Brazil, Argentina, Chile, Uruguay, Ecuador and Venezuela.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Argentina"))
NER Entity: (country :name (name :op "Chile"))
NER Entity: (country :name (name :op "Uruguay"))
NER Entity: (country :name (name :op "Ecuador"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Ecuador"))
NER Entity: (country :name (name :op "Chile"))
NER Entity: (country :name (name :op "Argentina"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 8-9:  Argentina => (country :name (name :op "Argentina"))
Span 6-7:  Brazil => (country :name (name :op "Brazil"))
Span 10-11:  Chile => (country :name (name :op "Chile"))
Span 14-15:  Ecuador => (country :name (name :op "Ecuador"))
Span 3-4:  elected => elect-01
Span 16-17:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 8-9:  Argentina => (country :name (name :op "Argentina"))
Oracle Span 6-7:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 10-11:  Chile => (country :name (name :op "Chile"))
Oracle Span 14-15:  Ecuador => (country :name (name :op "Ecuador"))
Oracle Span 3-4:  elected => elect-01
Oracle Span 5-6:  lead => lead-02
Oracle Span 0-1:  Leftists => leftist
Oracle Span 12-13:  Uruguay => (country :name (name :op "Uruguay"))
Oracle Span 16-17:  Venezuela => (country :name (name :op "Venezuela"))

Missing span: Uruguay => (country :name (name :op "Uruguay"))
Missing span: lead => lead-02
Missing span: and => and
Missing span: Leftists => leftist
Dependencies:
1	Leftists	_	NNS	NNS	_	4	nsubjpass	_	_
2	have	_	VBP	VBP	_	4	aux	_	_
3	been	_	VBN	VBN	_	4	auxpass	_	_
4	elected	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	lead	_	JJ	JJ	_	7	amod	_	_
7	Brazil	_	NNP	NNP	_	5	pobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	Argentina	_	NNP	NNP	_	7	conj	_	_
10	,	_	,	,	_	7	punct	_	_
11	Chile	_	NNP	NNP	_	7	conj	_	_
12	,	_	,	,	_	7	punct	_	_
13	Uruguay	_	NNP	NNP	_	7	conj	_	_
14	,	_	,	,	_	7	punct	_	_
15	Ecuador	_	NNP	NNP	_	7	conj	_	_
16	and	_	CC	CC	_	7	cc	_	_
17	Venezuela	_	NNP	NNP	_	7	conj	_	_
18	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(a / and, op, c6 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(e / elect-01, ARG1, l / leftist)
(e / elect-01, ARG2, l2 / lead-02)
(l2 / lead-02, ARG0, l / leftist)
(l2 / lead-02, ARG1, a / and)
(n / name, op, "Brazil")
(n2 / name, op, "Argentina")
(n3 / name, op, "Chile")
(n4 / name, op, "Uruguay")
(n5 / name, op, "Ecuador")
(n6 / name, op, "Venezuela")

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false), Span(14,15,List(5, 4, 3),Ecuador,(country :name (name :op "Ecuador")),false), Span(10,11,List(8, 7, 6),Chile,(country :name (name :op "Chile")),false), Span(8,9,List(11, 10, 9),Argentina,(country :name (name :op "Argentina")),false), Span(6,7,List(14, 13, 12),Brazil,(country :name (name :op "Brazil")),false), Span(3,4,List(15),elected,elect-01,false)),Map(2 -> "Venezuela", 5 -> "Ecuador", 12 -> country, 15 -> elect-01, 8 -> "Chile", 7 -> name, 1 -> name, 4 -> name, 11 -> "Argentina", 14 -> "Brazil", 6 -> country, 0 -> country, 9 -> country, 3 -> country, 10 -> name, 13 -> name),Map(e -> elect-01, n -> name, n4 -> name, c4 -> country, n3 -> name, c3 -> country, c -> country, n2 -> name, c2 -> country, n5 -> name, c5 -> country))),[Ljava.lang.String;@b70da4c,Annotation([Ljava.lang.String;@4a11eb84,[Ljava.lang.String;@4e858e0a,[Ljava.lang.String;@435fb7b5),Annotation([Ljava.lang.String;@4e70a728,[Ljava.lang.String;@b7838a9,[Ledu.cmu.lti.nlp.amr.Dependency;@696f0212),Annotation([Ljava.lang.String;@5733f295,[Ljava.lang.String;@1c3146bc,[Ljava.lang.String;@56c698e3),Annotation([Ljava.lang.String;@47a86fbb,[Ljava.lang.String;@f478a81,[Ledu.cmu.lti.nlp.amr.Entity;@19553973))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(e / elect-01, ARG1, c4 / country)
(e / elect-01, ARG2, c5 / country)
(e / elect-01, location, c / country)
(e / elect-01, location, c2 / country)
(e / elect-01, location, c3 / country)
(n / name, op, "Venezuela")
(n2 / name, op, "Ecuador")
(n3 / name, op, "Chile")
(n4 / name, op, "Argentina")
(n5 / name, op, "Brazil")

Decoded in 122,573 microseconds
Sentence: Chavez's supporters at home counter that the United States has a century-long history of open as well as covert armed intervention in Latin America's domestic politics and say that it has no right to question Venezuela's defense preparations.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 22-23:  armed => arm-01
Span 21-22:  covert => covert
Span 28-29:  domestic => domestic
Span 15-16:  history => history
Span 4-5:  home => home
Span 23-25:  intervention in => (country :name (name :op "Latin" :op "America"))
Span 25-27:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Span 35-36:  no => -
Span 29-30:  politics => politics
Span 42-43:  preparations => prepare-02
Span 38-39:  question => question-01
Span 31-32:  say => say-01
Span 2-3:  supporters => (person :ARG0-of support-01)
Span 8-10:  United States => (country :name (name :op "United" :op "States"))
Span 39-40:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 30-31:  and => and
Oracle Span 22-23:  armed => arm-01
Oracle Span 12-13:  century => (temporal-quantity :unit century)
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 5-6:  counter => counter-01
Oracle Span 21-22:  covert => covert
Oracle Span 41-42:  defense => defend-01
Oracle Span 28-29:  domestic => domestic
Oracle Span 10-11:  has => have-03
Oracle Span 15-16:  history => history
Oracle Span 4-5:  home => home
Oracle Span 23-24:  intervention => intervene-01
Oracle Span 25-27:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Oracle Span 35-36:  no => -
Oracle Span 17-18:  open => open
Oracle Span 29-30:  politics => politics
Oracle Span 42-43:  preparations => prepare-02
Oracle Span 38-39:  question => question-01
Oracle Span 31-32:  say => say-01
Oracle Span 2-3:  supporters => (person :ARG0-of support-01)
Oracle Span 8-10:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 39-40:  Venezuela => (country :name (name :op "Venezuela"))

Extra span: intervention in => (country :name (name :op "Latin" :op "America"))
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: and => and
Missing span: counter => counter-01
Missing span: has => have-03
Missing span: century => (temporal-quantity :unit century)
Missing span: open => open
Missing span: defense => defend-01
Missing span: intervention => intervene-01
Dependencies:
1	Chavez	_	NNP	NNP	_	3	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	supporters	_	NNS	NNS	_	6	nsubj	_	_
4	at	_	IN	IN	_	6	advmod	_	_
5	home	_	NN	NN	_	4	dep	_	_
6	counter	_	VBP	VBP	_	0	root	_	_
7	that	_	IN	IN	_	11	mark	_	_
8	the	_	DT	DT	_	10	det	_	_
9	United	_	NNP	NNP	_	10	nn	_	_
10	States	_	NNPS	NNPS	_	11	nsubj	_	_
11	has	_	VBZ	VBZ	_	6	ccomp	_	_
12	a	_	DT	DT	_	14	det	_	_
13	century-long	_	JJ	JJ	_	14	amod	_	_
14	history	_	NN	NN	_	11	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	open	_	JJ	JJ	_	15	pobj	_	_
17	as	_	RB	RB	_	18	advmod	_	_
18	well	_	RB	RB	_	14	cc	_	_
19	as	_	IN	IN	_	18	mwe	_	_
20	covert	_	JJ	JJ	_	22	amod	_	_
21	armed	_	JJ	JJ	_	22	amod	_	_
22	intervention	_	NN	NN	_	14	conj	_	_
23	in	_	IN	IN	_	22	prep	_	_
24	Latin	_	NNP	NNP	_	25	nn	_	_
25	America	_	NNP	NNP	_	28	poss	_	_
26	's	_	POS	POS	_	25	possessive	_	_
27	domestic	_	JJ	JJ	_	28	amod	_	_
28	politics	_	NNS	NNS	_	23	pobj	_	_
29	and	_	CC	CC	_	11	cc	_	_
30	say	_	VBP	VBP	_	11	conj	_	_
31	that	_	IN	IN	_	33	mark	_	_
32	it	_	PRP	PRP	_	33	nsubj	_	_
33	has	_	VBZ	VBZ	_	30	ccomp	_	_
34	no	_	RB	RB	_	35	neg	_	_
35	right	_	RB	RB	_	33	advmod	_	_
36	to	_	TO	TO	_	37	aux	_	_
37	question	_	VB	VB	_	33	xcomp	_	_
38	Venezuela	_	NNP	NNP	_	41	poss	_	_
39	's	_	POS	POS	_	38	possessive	_	_
40	defense	_	NN	NN	_	41	nn	_	_
41	preparations	_	NNS	NNS	_	37	dobj	_	_
42	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c / counter-01)
(a / and, op, s / say-01)
(a3 / arm-01, ARG1, i / intervene-01)
(c / counter-01, ARG0, p / person)
(c / counter-01, ARG2, h2 / have-03)
(c2 / country, name, n2 / name)
(c4 / country, name, n4 / name)
(h2 / have-03, ARG0, c2 / country)
(h2 / have-03, ARG1, h3 / history)
(h3 / history, duration, t / temporal-quantity)
(i / intervene-01, ARG0, c2 / country)
(i / intervene-01, ARG1, p3 / politics)
(i / intervene-01, mod, o / open)
(n / name, op, "Chavez")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "America")
(n3 / name, op, "Latin")
(n4 / name, op, "Venezuela")
(p / person, location, h / home)
(p2 / person, name, n / name)
(p3 / politics, mod, d / domestic)
(p3 / politics, poss, w / world-region)
(p4 / prepare-02, ARG0, c4 / country)
(p4 / prepare-02, ARG2, d2 / defend-01)
(q / question-01, ARG0, c2 / country)
(q / question-01, ARG1, p4 / prepare-02)
(s / say-01, ARG0, p / person)
(s2 / support-01, ARG0, p / person)
(s2 / support-01, ARG1, p2 / person)
(t / temporal-quantity, unit, c5 / century)
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),preparations,prepare-02,false), Span(39,40,List(3, 2, 1),Venezuela,(country :name (name :op "Venezuela")),false), Span(38,39,List(4),question,question-01,false), Span(35,36,List(5),no,-,false), Span(31,32,List(6),say,say-01,false), Span(29,30,List(7),politics,politics,false), Span(28,29,List(8),domestic,domestic,false), Span(25,27,List(12, 11, 10, 9),Latin America,(world-region :name (name :op "America" :op "Latin")),false), Span(23,25,List(16, 15, 14, 13),intervention in,(country :name (name :op "Latin" :op "America")),false), Span(22,23,List(17),armed,arm-01,false), Span(21,22,List(18),covert,covert,false), Span(15,16,List(19),history,history,false), Span(8,10,List(23, 22, 21, 20),United States,(country :name (name :op "United" :op "States")),false), Span(4,5,List(24),home,home,false), Span(2,3,List(26, 25),supporters,(person :ARG0-of support-01),false)),Map(2 -> name, 5 -> -, 12 -> "Latin", 8 -> domestic, 15 -> "Latin", 21 -> name, 18 -> covert, 24 -> home, 7 -> politics, 1 -> country, 17 -> arm-01, 23 -> "States", 26 -> support-01, 4 -> question-01, 11 -> "America", 14 -> name, 20 -> country, 6 -> say-01, 9 -> world-region, 0 -> prepare-02, 22 -> "United", 16 -> "America", 19 -> history, 10 -> name, 3 -> "Venezuela", 25 -> person, 13 -> country),Map(n -> name, w -> world-region, h -> history, q -> question-01, s2 -> support-01, h2 -> home, p2 -> politics, n4 -> name, c4 -> country, s -> say-01, d -> domestic, p -> prepare-02, n3 -> name, a -> arm-01, c3 -> covert, - -> -, c -> country, p3 -> person, n2 -> name, c2 -> country))),[Ljava.lang.String;@7bb6ab3a,Annotation([Ljava.lang.String;@7fe7c640,[Ljava.lang.String;@4c4748bf,[Ljava.lang.String;@7ce97ee5),Annotation([Ljava.lang.String;@32c8e539,[Ljava.lang.String;@73dce0e6,[Ledu.cmu.lti.nlp.amr.Dependency;@5a85c92),Annotation([Ljava.lang.String;@32811494,[Ljava.lang.String;@4795ded0,[Ljava.lang.String;@53dacd14),Annotation([Ljava.lang.String;@14d14731,[Ljava.lang.String;@2eced48b,[Ledu.cmu.lti.nlp.amr.Entity;@47c4ecdc))
AMR:
(a / arm-01, ARG0, h / history)
(a / arm-01, ARG1, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / covert, op, p / prepare-02)
(c4 / country, name, n4 / name)
(h / history, location, c4 / country)
(n / name, op, "Venezuela")
(n2 / name, op, "America")
(n2 / name, op, "Latin")
(n3 / name, op, "America")
(n3 / name, op, "Latin")
(n4 / name, op, "States")
(n4 / name, op, "United")
(p / prepare-02, ARG0, c / country)
(p / prepare-02, ARG1, s / say-01)
(p2 / politics, mod, d / domestic)
(p2 / politics, poss, w / world-region)
(q / question-01, ARG0, - / -)
(q / question-01, ARG1, p / prepare-02)
(s / say-01, ARG0, c4 / country)
(s / say-01, ARG2, p3 / person)
(s2 / support-01, ARG0, p3 / person)
(s2 / support-01, ARG1, h2 / home)
(w / world-region, name, n2 / name)
(w / world-region, op, c4 / country)

Decoded in 1,344,623 microseconds
Sentence: Carlos Roque Espinoza Leon said that Venezuelans never ask what the US Marines are doing.

NER Entity: (person :name (name :op "Carlos" :op "Roque" :op "Espinoza" :op "Leon"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (organization :name (name :op "US" :op "Marines"))
Spans:
Span 8-9:  ask => ask-02
Span 0-4:  Carlos Roque Espinoza Leon => (person :name (name :op "Carlos" :op "Roque" :op "Espinoza" :op "Leon"))
Span 4-5:  said => say-01
Span 11-13:  US Marines => (organization :name (name :op "US" :op "Marines"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  ask => ask-01
Oracle Span 0-4:  Carlos Roque Espinoza Leon => (person :name (name :op "Leon" :op "Espinoza" :op "Roque" :op "Carlos"))
Oracle Span 14-15:  doing => (thing :ARG1-of do-02)
Oracle Span 12-13:  Marines => (have-org-role-91 :ARG2 marine)
Oracle Span 4-5:  said => say-01
Oracle Span 11-12:  US => (country :name (name :op "US"))
Oracle Span 6-7:  Venezuelans => (person :mod (country :name (name :op "Venezuela")))

Extra span: US Marines => (organization :name (name :op "US" :op "Marines"))
Incorrect span: ask => ask-02
Incorrect span: Carlos Roque Espinoza Leon => (person :name (name :op "Carlos" :op "Roque" :op "Espinoza" :op "Leon"))
Missing span: Carlos Roque Espinoza Leon => (person :name (name :op "Leon" :op "Espinoza" :op "Roque" :op "Carlos"))
Missing span: US => (country :name (name :op "US"))
Missing span: Venezuelans => (person :mod (country :name (name :op "Venezuela")))
Missing span: ask => ask-01
Missing span: doing => (thing :ARG1-of do-02)
Missing span: Marines => (have-org-role-91 :ARG2 marine)
Dependencies:
1	Carlos	_	NNP	NNP	_	4	nn	_	_
2	Roque	_	NNP	NNP	_	4	nn	_	_
3	Espinoza	_	NNP	NNP	_	4	nn	_	_
4	Leon	_	NNP	NNP	_	5	nsubj	_	_
5	said	_	VBD	VBD	_	0	root	_	_
6	that	_	IN	IN	_	9	mark	_	_
7	Venezuelans	_	NNP	NNP	_	9	nsubj	_	_
8	never	_	RB	RB	_	9	neg	_	_
9	ask	_	VBP	VBP	_	5	ccomp	_	_
10	what	_	WP	WP	_	15	dobj	_	_
11	the	_	DT	DT	_	13	det	_	_
12	US	_	NNP	NNP	_	13	nn	_	_
13	Marines	_	NNPS	NNPS	_	15	nsubj	_	_
14	are	_	VBP	VBP	_	15	aux	_	_
15	doing	_	VBG	VBG	_	9	ccomp	_	_
16	.	_	.	.	_	5	punct	_	_

Oracle:
(a / ask-01, ARG0, p2 / person)
(a / ask-01, ARG1, t / thing)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(d / do-02, ARG1, t / thing)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, m / marine)
(n / name, op, "Carlos")
(n / name, op, "Espinoza")
(n / name, op, "Leon")
(n / name, op, "Roque")
(n2 / name, op, "Venezuela")
(n3 / name, op, "US")
(p / person, name, n / name)
(p2 / person, mod, c / country)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / ask-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,13,List(3, 2, 1, 0),US Marines,(organization :name (name :op "US" :op "Marines")),false), Span(8,9,List(4),ask,ask-02,false), Span(4,5,List(5),said,say-01,false), Span(0,4,List(11, 10, 9, 8, 7, 6),Carlos Roque Espinoza Leon,(person :name (name :op "Carlos" :op "Roque" :op "Espinoza" :op "Leon")),false)),Map(2 -> "US", 5 -> say-01, 8 -> "Carlos", 7 -> name, 1 -> name, 11 -> "Leon", 4 -> ask-02, 6 -> person, 9 -> "Roque", 0 -> organization, 10 -> "Espinoza", 3 -> "Marines"),Map(n -> name, s -> say-01, p -> person, a -> ask-02, o -> organization, n2 -> name))),[Ljava.lang.String;@42f33b5d,Annotation([Ljava.lang.String;@5c8504fd,[Ljava.lang.String;@4b7e96a,[Ljava.lang.String;@6475472c),Annotation([Ljava.lang.String;@3f07b12c,[Ljava.lang.String;@4bd1f8dd,[Ledu.cmu.lti.nlp.amr.Dependency;@7096b474),Annotation([Ljava.lang.String;@3e14c16d,[Ljava.lang.String;@3c989952,[Ljava.lang.String;@784b990c),Annotation([Ljava.lang.String;@3d3ba765,[Ljava.lang.String;@25bc0606,[Ledu.cmu.lti.nlp.amr.Entity;@5d1659ea))
AMR:
(a / ask-02, ARG0, o / organization)
(n / name, op, "Marines")
(n / name, op, "US")
(n2 / name, op, "Carlos")
(n2 / name, op, "Espinoza")
(n2 / name, op, "Leon")
(n2 / name, op, "Roque")
(o / organization, name, n / name)
(p / person, name, n2 / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / ask-02)

Decoded in 50,581 microseconds
Sentence: Espinoza Leon is a pro-Chavez defense specialist who serves in Venezuela's National Assembly.

NER Entity: (person :name (name :op "Espinoza" :op "Leon"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (organization :name (name :op "National" :op "Assembly"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 0-2:  Espinoza Leon => (person :name (name :op "Espinoza" :op "Leon"))
Span 10-11:  serves => serve-01
Span 12-14:  Venezuela 's => (organization :name (name :op "National" :op "Assembly"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 7-8:  defense => defend-01
Oracle Span 0-2:  Espinoza Leon => (person :name (name :op "Leon" :op "Espinoza"))
Oracle Span 14-16:  National Assembly => (have-org-role-91 :ARG1 (government-organization :name (name :op "Assembly" :op "National")))
Oracle Span 10-11:  serves => serve-01
Oracle Span 8-9:  specialist => specialize-01
Oracle Span 12-13:  Venezuela => (country :name (name :op "Venezuela"))

Extra span: Venezuela 's => (organization :name (name :op "National" :op "Assembly"))
Incorrect span: Espinoza Leon => (person :name (name :op "Espinoza" :op "Leon"))
Missing span: Espinoza Leon => (person :name (name :op "Leon" :op "Espinoza"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: National Assembly => (have-org-role-91 :ARG1 (government-organization :name (name :op "Assembly" :op "National")))
Missing span: Venezuela => (country :name (name :op "Venezuela"))
Missing span: specialist => specialize-01
Missing span: defense => defend-01
Dependencies:
1	Espinoza	_	NNP	NNP	_	2	nn	_	_
2	Leon	_	NNP	NNP	_	7	nsubj	_	_
3	is	_	VBZ	VBZ	_	7	cop	_	_
4	a	_	DT	DT	_	7	det	_	_
5	pro-Chavez	_	JJ	JJ	_	7	amod	_	_
6	defense	_	NN	NN	_	7	nn	_	_
7	specialist	_	NN	NN	_	0	root	_	_
8	who	_	WP	WP	_	9	nsubj	_	_
9	serves	_	VBZ	VBZ	_	7	rcmod	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	Venezuela	_	NNP	NNP	_	14	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	National	_	NNP	NNP	_	14	nn	_	_
14	Assembly	_	NNP	NNP	_	10	pobj	_	_
15	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n4 / name)
(g / government-organization, name, n3 / name)
(g / government-organization, poss, c / country)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG3, s / specialize-01)
(n / name, op, "Chavez")
(n2 / name, op, "Espinoza")
(n2 / name, op, "Leon")
(n3 / name, op, "Assembly")
(n3 / name, op, "National")
(n4 / name, op, "Venezuela")
(p2 / person, name, n / name)
(p3 / person, name, n2 / name)
(s / specialize-01, ARG1, d / defend-01)
(s2 / serve-01, ARG2, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(12,14,List(3, 2, 1, 0),Venezuela 's,(organization :name (name :op "National" :op "Assembly")),false), Span(10,11,List(4),serves,serve-01,false), Span(0,2,List(8, 7, 6, 5),Espinoza Leon,(person :name (name :op "Espinoza" :op "Leon")),false)),Map(2 -> "National", 5 -> person, 8 -> "Leon", 7 -> "Espinoza", 1 -> name, 4 -> serve-01, 6 -> name, 0 -> organization, 3 -> "Assembly"),Map(n -> name, s -> serve-01, p -> person, o -> organization, n2 -> name))),[Ljava.lang.String;@793138bd,Annotation([Ljava.lang.String;@1951b871,[Ljava.lang.String;@5c18016b,[Ljava.lang.String;@33aeca0b),Annotation([Ljava.lang.String;@43aaf813,[Ljava.lang.String;@57ac5227,[Ledu.cmu.lti.nlp.amr.Dependency;@4ba302e0),Annotation([Ljava.lang.String;@e98770d,[Ljava.lang.String;@1ae67cad,[Ljava.lang.String;@2f6e28bc),Annotation([Ljava.lang.String;@7c098bb3,[Ljava.lang.String;@31e4bb20,[Ledu.cmu.lti.nlp.amr.Entity;@18cebaa5))
AMR:
(n / name, op, "Assembly")
(n / name, op, "National")
(n2 / name, op, "Espinoza")
(n2 / name, op, "Leon")
(o / organization, name, n / name)
(p / person, name, n2 / name)
(s / serve-01, ARG0, p / person)
(s / serve-01, ARG1, o / organization)

Decoded in 44,685 microseconds
Sentence: Espinoza said that Peru has 500000 rifles and no one says anything.

NER Entity: (person :name (name :op "Espinoza"))
NER Entity: (country :name (name :op "Peru"))
mkDayMonthYear(500000,00,00,50)
mkDayMonthYear(500000,00,00,50)
NER Entity: (country :name (name :op "Peru"))
Spans:
Span 5-6:  500000 => 500000
Span 11-12:  anything => anything
Span 8-9:  no => -
Span 3-4:  Peru => (country :name (name :op "Peru"))
Span 6-7:  rifles => rifle
Span 1-2:  said => say-01
Span 10-11:  says => say-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 5-6:  500000 => 500000
Oracle Span 7-8:  and => and
Oracle Span 11-12:  anything => anything
Oracle Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Oracle Span 4-5:  has => have-03
Oracle Span 3-4:  Peru => (country :name (name :op "Peru"))
Oracle Span 6-7:  rifles => rifle
Oracle Span 1-2:  said => say-01
Oracle Span 10-11:  says => say-01

Extra span: no => -
Missing span: Espinoza => (person :name (name :op "Espinoza"))
Missing span: and => and
Missing span: has => have-03
Dependencies:
1	Espinoza	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	Peru	_	NNP	NNP	_	5	nsubj	_	_
5	has	_	VBZ	VBZ	_	2	ccomp	_	_
6	500000	_	CD	CD	_	7	num	_	_
7	rifles	_	NNS	NNS	_	5	dobj	_	_
8	and	_	CC	CC	_	5	cc	_	_
9	no	_	RB	RB	_	11	advmod	_	_
10	one	_	CD	CD	_	9	pobj	_	_
11	says	_	VBZ	VBZ	_	5	conj	_	_
12	anything	_	NN	NN	_	11	dobj	_	_
13	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, h / have-03)
(a / and, op, s2 / say-01)
(c / country, name, n2 / name)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, r / rifle)
(n / name, op, "Espinoza")
(n2 / name, op, "Peru")
(p / person, name, n / name)
(r / rifle, quant, 5 / 500000)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / and)
(s2 / say-01, ARG1, a2 / anything)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),anything,anything,false), Span(10,11,List(1),says,say-01,false), Span(8,9,List(2),no,-,false), Span(6,7,List(3),rifles,rifle,false), Span(5,6,List(4),500000,500000,false), Span(3,4,List(7, 6, 5),Peru,(country :name (name :op "Peru")),false), Span(1,2,List(8),said,say-01,false)),Map(2 -> -, 5 -> country, 8 -> say-01, 7 -> "Peru", 1 -> say-01, 4 -> 500000, 6 -> name, 0 -> anything, 3 -> rifle),Map(n -> name, s2 -> say-01, 5 -> 500000, s -> say-01, a -> anything, r -> rifle, - -> -, c -> country))),[Ljava.lang.String;@463b4ac8,Annotation([Ljava.lang.String;@765f05af,[Ljava.lang.String;@62f68dff,[Ljava.lang.String;@f001896),Annotation([Ljava.lang.String;@13f17eb4,[Ljava.lang.String;@1d0d6318,[Ledu.cmu.lti.nlp.amr.Dependency;@4bc28c33),Annotation([Ljava.lang.String;@4409e975,[Ljava.lang.String;@5c153b9e,[Ljava.lang.String;@2a7686a7),Annotation([Ljava.lang.String;@758a34ce,[Ljava.lang.String;@7ec3394b,[Ledu.cmu.lti.nlp.amr.Entity;@bff34c6))
AMR:
(c / country, name, n / name)
(n / name, op, "Peru")
(r / rifle, quant, 5 / 500000)
(s / say-01, ARG0, c / country)
(s / say-01, ARG1, a / anything)
(s / say-01, time, - / -)
(s2 / say-01, ARG0, c / country)
(s2 / say-01, ARG1, r / rifle)

Decoded in 175,566 microseconds
Sentence: Espinoza said no one complains that Colombia is the most militarized country in Latin America.

NER Entity: (person :name (name :op "Espinoza"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "Colombia"))
Spans:
Span 6-7:  Colombia => (country :name (name :op "Colombia"))
Span 11-12:  country => country
Span 13-15:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Span 2-3:  no => -
Span 1-2:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  Colombia => (country :name (name :op "Colombia"))
Oracle Span 4-5:  complains => complain-01
Oracle Span 11-12:  country => country
Oracle Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Oracle Span 13-15:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Oracle Span 10-11:  militarized => militarize-00
Oracle Span 9-10:  most => most
Oracle Span 1-2:  said => say-01

Extra span: no => -
Missing span: Espinoza => (person :name (name :op "Espinoza"))
Missing span: complains => complain-01
Missing span: militarized => militarize-00
Missing span: most => most
Dependencies:
1	Espinoza	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	no	_	DT	DT	_	4	neg	_	_
4	one	_	NN	NN	_	5	nsubj	_	_
5	complains	_	VBZ	VBZ	_	2	ccomp	_	_
6	that	_	IN	IN	_	12	mark	_	_
7	Colombia	_	NNP	NNP	_	12	nsubj	_	_
8	is	_	VBZ	VBZ	_	12	cop	_	_
9	the	_	DT	DT	_	12	det	_	_
10	most	_	RBS	RBS	_	11	advmod	_	_
11	militarized	_	JJ	JJ	_	12	amod	_	_
12	country	_	NN	NN	_	5	ccomp	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	Latin	_	NNP	NNP	_	15	nn	_	_
15	America	_	NNP	NNP	_	13	pobj	_	_
16	.	_	.	.	_	2	punct	_	_

Oracle:
(c / complain-01, ARG1, c2 / country)
(c2 / country, domain, c3 / country)
(c2 / country, location, w / world-region)
(c3 / country, name, n4 / name)
(m / militarize-00, ARG1, c2 / country)
(m / militarize-00, degree, m2 / most)
(n / name, op, "Espinoza")
(n3 / name, op, "America")
(n3 / name, op, "Latin")
(n4 / name, op, "Colombia")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, c / complain-01)
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(13,15,List(3, 2, 1, 0),Latin America,(world-region :name (name :op "America" :op "Latin")),false), Span(11,12,List(4),country,country,false), Span(6,7,List(7, 6, 5),Colombia,(country :name (name :op "Colombia")),false), Span(2,3,List(8),no,-,false), Span(1,2,List(9),said,say-01,false)),Map(2 -> "America", 5 -> country, 8 -> -, 7 -> "Colombia", 1 -> name, 4 -> country, 6 -> name, 9 -> say-01, 0 -> world-region, 3 -> "Latin"),Map(n -> name, w -> world-region, s -> say-01, - -> -, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@1522d8a0,Annotation([Ljava.lang.String;@312ab28e,[Ljava.lang.String;@5644dc81,[Ljava.lang.String;@246f8b8b),Annotation([Ljava.lang.String;@278bb07e,[Ljava.lang.String;@4351c8c3,[Ledu.cmu.lti.nlp.amr.Dependency;@3381b4fc),Annotation([Ljava.lang.String;@6bea52d4,[Ljava.lang.String;@11981797,[Ljava.lang.String;@5c42d2b7),Annotation([Ljava.lang.String;@625abb97,[Ljava.lang.String;@5b1f29fa,[Ledu.cmu.lti.nlp.amr.Entity;@aeab9a1))
AMR:
(- / -, poss, w / world-region)
(c / country, domain, c2 / country)
(c2 / country, name, n2 / name)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "Colombia")
(s / say-01, ARG0, c / country)
(s / say-01, ARG1, w / world-region)
(w / world-region, name, n / name)

Decoded in 52,530 microseconds
Sentence: Espinoza said US history is full of aggression in Latin America.

NER Entity: (person :name (name :op "Espinoza"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Latin" :op "America"))
Spans:
Span 3-4:  history => history
Span 9-11:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Span 1-2:  said => say-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 7-8:  aggression => aggression
Oracle Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Oracle Span 3-4:  history => history
Oracle Span 9-11:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Oracle Span 1-2:  said => say-01
Oracle Span 2-3:  US => (country :name (name :op "US"))

Missing span: Espinoza => (person :name (name :op "Espinoza"))
Missing span: US => (country :name (name :op "US"))
Missing span: aggression => aggression
Dependencies:
1	Espinoza	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	US	_	NNP	NNP	_	4	nn	_	_
4	history	_	NN	NN	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	full	_	JJ	JJ	_	2	ccomp	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	aggression	_	NN	NN	_	7	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	Latin	_	NNP	NNP	_	11	nn	_	_
11	America	_	NNP	NNP	_	9	pobj	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(a / aggression, location, w / world-region)
(c / country, name, n2 / name)
(h / history, mod, c / country)
(n / name, op, "Espinoza")
(n2 / name, op, "US")
(n3 / name, op, "America")
(n3 / name, op, "Latin")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),Latin America,(world-region :name (name :op "America" :op "Latin")),false), Span(3,4,List(4),history,history,false), Span(1,2,List(5),said,say-01,false)),Map(2 -> "America", 5 -> say-01, 1 -> name, 4 -> history, 0 -> world-region, 3 -> "Latin"),Map(n -> name, w -> world-region, h -> history, s -> say-01))),[Ljava.lang.String;@40f70521,Annotation([Ljava.lang.String;@774698ab,[Ljava.lang.String;@55342f40,[Ljava.lang.String;@a4ca3f6),Annotation([Ljava.lang.String;@72ea6193,[Ljava.lang.String;@31aa3ca5,[Ledu.cmu.lti.nlp.amr.Dependency;@45905bff),Annotation([Ljava.lang.String;@2a2c13a8,[Ljava.lang.String;@b6b1987,[Ljava.lang.String;@6b44435b),Annotation([Ljava.lang.String;@2ccca26f,[Ljava.lang.String;@66b7550d,[Ledu.cmu.lti.nlp.amr.Entity;@3543df7d))
AMR:
(n / name, op, "America")
(n / name, op, "Latin")
(s / say-01, ARG0, w / world-region)
(s / say-01, ARG1, h / history)
(w / world-region, name, n / name)

Decoded in 39,234 microseconds
Sentence: Espinoza said Venezuelans have to do whatever is necessary to protect Venezuela.

NER Entity: (person :name (name :op "Espinoza"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 10-11:  protect => protect-01
Span 1-2:  said => say-01
Span 11-12:  Venezuela => (country :name (name :op "Venezuela"))
Span 6-7:  whatever => whatever

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 5-6:  do => do-02
Oracle Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Oracle Span 10-11:  protect => protect-01
Oracle Span 1-2:  said => say-01
Oracle Span 11-12:  Venezuela => (person :mod (country :name (name :op "Venezuela")))
Oracle Span 6-7:  whatever => whatever

Incorrect span: Venezuela => (country :name (name :op "Venezuela"))
Missing span: Espinoza => (person :name (name :op "Espinoza"))
Missing span: Venezuela => (person :mod (country :name (name :op "Venezuela")))
Missing span: do => do-02
Dependencies:
1	Espinoza	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	Venezuelans	_	NNP	NNP	_	4	nsubj	_	_
4	have	_	VBP	VBP	_	2	ccomp	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	do	_	VB	VB	_	4	xcomp	_	_
7	whatever	_	WDT	WDT	_	9	nsubj	_	_
8	is	_	VBZ	VBZ	_	9	cop	_	_
9	necessary	_	JJ	JJ	_	6	ccomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	protect	_	VB	VB	_	9	xcomp	_	_
12	Venezuela	_	NNP	NNP	_	11	dobj	_	_
13	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n2 / name)
(d / do-02, ARG0, p2 / person)
(d / do-02, ARG1, w / whatever)
(n / name, op, "Espinoza")
(n2 / name, op, "Venezuela")
(p / person, name, n / name)
(p2 / person, mod, c / country)
(p3 / protect-01, ARG1, c / country)
(s / say-01, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false), Span(10,11,List(3),protect,protect-01,false), Span(6,7,List(4),whatever,whatever,false), Span(1,2,List(5),said,say-01,false)),Map(2 -> "Venezuela", 5 -> say-01, 1 -> name, 4 -> whatever, 0 -> country, 3 -> protect-01),Map(w -> whatever, n -> name, s -> say-01, p -> protect-01, c -> country))),[Ljava.lang.String;@7c541c15,Annotation([Ljava.lang.String;@3542162a,[Ljava.lang.String;@698122b2,[Ljava.lang.String;@4212a0c8),Annotation([Ljava.lang.String;@1e7aa82b,[Ljava.lang.String;@3b2c0e88,[Ledu.cmu.lti.nlp.amr.Dependency;@5bd82fed),Annotation([Ljava.lang.String;@c1bd0be,[Ljava.lang.String;@476b0ae6,[Ljava.lang.String;@1c6804cd),Annotation([Ljava.lang.String;@655f7ea,[Ljava.lang.String;@549949be,[Ledu.cmu.lti.nlp.amr.Entity;@4b3a45f1))
AMR:
(c / country, name, n / name)
(n / name, op, "Venezuela")
(p / protect-01, ARG0, w / whatever)
(p / protect-01, ARG1, c / country)
(s / say-01, ARG0, c / country)

Decoded in 47,895 microseconds
Sentence: Chavez has famously said that the Venezuelan so-called Bolivarian revolution is peaceful but not unarmed.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (thing :name (name :op "Bolivarian"))
Spans:
Span 13-14:  peaceful => peaceful
Span 3-4:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-12:  Bolivarian revolution => (event :name (name :op "Revolution" :op "Bolivarian"))
Oracle Span 14-15:  but => contrast-01
Oracle Span 9-10:  called => call-01
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 2-3:  famously => famous
Oracle Span 13-14:  peaceful => peaceful
Oracle Span 3-4:  said => say-01
Oracle Span 7-8:  so => so
Oracle Span 6-7:  Venezuelan => (country :name (name :op "Venezuela"))

Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: Bolivarian revolution => (event :name (name :op "Revolution" :op "Bolivarian"))
Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: but => contrast-01
Missing span: called => call-01
Missing span: so => so
Missing span: famously => famous
Dependencies:
1	Chavez	_	NNP	NNP	_	4	nsubj	_	_
2	has	_	VBZ	VBZ	_	4	aux	_	_
3	famously	_	RB	RB	_	4	advmod	_	_
4	said	_	VBN	VBN	_	0	root	_	_
5	that	_	IN	IN	_	15	mark	_	_
6	the	_	DT	DT	_	10	det	_	_
7	Venezuelan	_	JJ	JJ	_	10	amod	_	_
8	so-called	_	JJ	JJ	_	10	amod	_	_
9	Bolivarian	_	NN	NN	_	10	nn	_	_
10	revolution	_	NN	NN	_	15	nsubj	_	_
11	is	_	VBZ	VBZ	_	15	cop	_	_
12	peaceful	_	JJ	JJ	_	15	dep	_	_
13	but	_	CC	CC	_	15	cc	_	_
14	not	_	RB	RB	_	15	conj	_	_
15	unarmed	_	JJ	JJ	_	4	ccomp	_	_
16	.	_	.	.	_	4	punct	_	_

Oracle:
(c / contrast-01, ARG1, p2 / peaceful)
(c2 / country, name, n2 / name)
(c3 / call-01, ARG1, e / event)
(c3 / call-01, ARG2, s2 / so)
(e / event, mod, c2 / country)
(e / event, name, n3 / name)
(n / name, op, "Chavez")
(n2 / name, op, "Venezuela")
(n3 / name, op, "Bolivarian")
(n3 / name, op, "Revolution")
(p / person, name, n / name)
(p2 / peaceful, domain, e / event)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, c / contrast-01)
(s / say-01, manner, f / famous)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),peaceful,peaceful,false), Span(3,4,List(1),said,say-01,false)),Map(1 -> say-01, 0 -> peaceful),Map(s -> say-01, p -> peaceful))),[Ljava.lang.String;@17a87e37,Annotation([Ljava.lang.String;@3eeb318f,[Ljava.lang.String;@20a14b55,[Ljava.lang.String;@39ad977d),Annotation([Ljava.lang.String;@6da00fb9,[Ljava.lang.String;@a202ccb,[Ledu.cmu.lti.nlp.amr.Dependency;@20f12539),Annotation([Ljava.lang.String;@75b25825,[Ljava.lang.String;@18025ced,[Ljava.lang.String;@13cf7d52),Annotation([Ljava.lang.String;@3a3e4aff,[Ljava.lang.String;@5d2a4eed,[Ledu.cmu.lti.nlp.amr.Entity;@57459491))
AMR:
(s / say-01, ARG1, p / peaceful)

Decoded in 37,720 microseconds
Sentence: Chavez was first elected in 980000 and has a popularity rating of 71 percent in an independent poll by polling firm Datanalisis.

NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(980000,00,00,98)
NER Entity: (organization :name (name :op "Datanalisis"))
mkDayMonthYear(980000,00,00,98)
Spans:
Span 12-13:  71 => 71
Span 5-6:  980000 => (date-entity :year 1998)
Span 3-4:  elected => elect-01
Span 20-21:  firm => firm
Span 13-14:  percent => percentage-entity
Span 17-18:  poll => poll-01
Span 9-10:  popularity => popularity
Span 10-11:  rating => rate-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 12-13:  71 => 71
Oracle Span 5-6:  980000 => (date-entity :year 1998)
Oracle Span 6-7:  and => and
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 21-22:  Datanalisis => (name :op "Datanalisis")
Oracle Span 3-4:  elected => elect-01
Oracle Span 20-21:  firm => firm
Oracle Span 2-3:  first => first
Oracle Span 16-17:  independent => (depend-01 :polarity -)
Oracle Span 13-14:  percent => percentage-entity
Oracle Span 17-18:  poll => poll-01
Oracle Span 9-10:  popularity => popularity
Oracle Span 10-11:  rating => rate-01

Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: Datanalisis => (name :op "Datanalisis")
Missing span: and => and
Missing span: first => first
Missing span: independent => (depend-01 :polarity -)
Dependencies:
1	Chavez	_	NNP	NNP	_	4	nsubjpass	_	_
2	was	_	VBD	VBD	_	4	auxpass	_	_
3	first	_	RB	RB	_	4	advmod	_	_
4	elected	_	VBN	VBN	_	0	root	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	980000	_	CD	CD	_	5	pobj	_	_
7	and	_	CC	CC	_	4	cc	_	_
8	has	_	VBZ	VBZ	_	4	conj	_	_
9	a	_	DT	DT	_	11	det	_	_
10	popularity	_	NN	NN	_	11	nn	_	_
11	rating	_	NN	NN	_	8	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	71	_	CD	CD	_	14	num	_	_
14	percent	_	NN	NN	_	12	pobj	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	an	_	DT	DT	_	18	det	_	_
17	independent	_	JJ	JJ	_	18	amod	_	_
18	poll	_	NN	NN	_	15	pobj	_	_
19	by	_	IN	IN	_	18	prep	_	_
20	polling	_	NN	NN	_	22	nn	_	_
21	firm	_	NN	NN	_	22	nn	_	_
22	Datanalisis	_	NNS	NNS	_	19	pobj	_	_
23	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, e / elect-01)
(a / and, op, r / rate-01)
(d2 / date-entity, year, 1998)
(d3 / depend-01, ARG0, p5 / poll-01)
(d3 / depend-01, polarity, -)
(e / elect-01, ARG1, p2 / person)
(e / elect-01, time, d2 / date-entity)
(e / elect-01, time, f / first)
(f2 / firm, name, n2 / name)
(n / name, op, "Chavez")
(n2 / name, op, "Datanalisis")
(p2 / person, name, n / name)
(p3 / popularity, poss, p2 / person)
(p4 / percentage-entity, value, 7 / 71)
(p5 / poll-01, ARG0, f2 / firm)
(r / rate-01, ARG0, p5 / poll-01)
(r / rate-01, ARG1, p3 / popularity)
(r / rate-01, ARG2, p4 / percentage-entity)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),firm,firm,false), Span(17,18,List(1),poll,poll-01,false), Span(13,14,List(2),percent,percentage-entity,false), Span(12,13,List(3),71,71,false), Span(10,11,List(4),rating,rate-01,false), Span(9,10,List(5),popularity,popularity,false), Span(5,6,List(7, 6),980000,(date-entity :year 1998),false), Span(3,4,List(8),elected,elect-01,false)),Map(2 -> percentage-entity, 5 -> popularity, 8 -> elect-01, 7 -> 1998, 1 -> poll-01, 4 -> rate-01, 6 -> date-entity, 0 -> firm, 3 -> 71),Map(e -> elect-01, p2 -> percentage-entity, d -> date-entity, 7 -> 71, 1 -> 1998, p -> poll-01, r -> rate-01, f -> firm, p3 -> popularity))),[Ljava.lang.String;@3f0846c6,Annotation([Ljava.lang.String;@77a98a6a,[Ljava.lang.String;@78fbff54,[Ljava.lang.String;@3e10dc6),Annotation([Ljava.lang.String;@7e22550a,[Ljava.lang.String;@45e37a7e,[Ledu.cmu.lti.nlp.amr.Dependency;@62452cc9),Annotation([Ljava.lang.String;@6941827a,[Ljava.lang.String;@5a7005d,[Ljava.lang.String;@5bc9ba1d),Annotation([Ljava.lang.String;@1021f6c9,[Ljava.lang.String;@7516e4e5,[Ledu.cmu.lti.nlp.amr.Entity;@488eb7f2))
AMR:
(d / date-entity, year, 1 / 1998)
(e / elect-01, ARG1, r / rate-01)
(e / elect-01, time, d / date-entity)
(p / poll-01, ARG1, f / firm)
(p / poll-01, mod, p2 / percentage-entity)
(p2 / percentage-entity, value, 7 / 71)
(r / rate-01, ARG0, p2 / percentage-entity)
(r / rate-01, ARG1, p3 / popularity)

Decoded in 150,089 microseconds
Sentence: Venezuelan military analyst Alberto Garrido said Chavez is looking for allies in Russia, China, and Iran in order to promote a multi-polar world which will counteract US dominance and encourage grassroots Movements in Latin America to throw off US governmental influence.

NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (person :name (name :op "Alberto" :op "Garrido"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 3-5:  Alberto Garrido => (person :name (name :op "Alberto" :op "Garrido"))
Span 2-3:  analyst => analyze-01
Span 29-30:  counteract => counteract-01
Span 33-34:  encourage => encourage-01
Span 43-44:  governmental => (government-organization :ARG0-of govern-01)
Span 34-35:  grassroots => grassroot
Span 44-45:  influence => influence-01
Span 37-39:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Span 8-9:  looking => look-01
Span 35-37:  Movements in => (country :name (name :op "Latin" :op "America"))
Span 21-22:  promote => promote-02
Span 5-6:  said => say-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 3-5:  Alberto Garrido => (person :name (name :op "Garrido" :op "Alberto"))
Oracle Span 10-11:  allies => (person :ARG1-of ally-01)
Oracle Span 2-3:  analyst => analyze-01
Oracle Span 16-17:  and => and
Oracle Span 6-7:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 14-15:  China => (country :name (name :op "China"))
Oracle Span 29-30:  counteract => counteract-01
Oracle Span 31-32:  dominance => dominate-01
Oracle Span 33-34:  encourage => encourage-01
Oracle Span 43-44:  governmental => (government-organization :ARG0-of govern-01)
Oracle Span 34-35:  grassroots => grassroot
Oracle Span 44-45:  influence => influence-01
Oracle Span 17-18:  Iran => (country :name (name :op "Iran"))
Oracle Span 37-39:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Oracle Span 8-9:  looking => look-01
Oracle Span 1-2:  military => military
Oracle Span 35-36:  Movements => move-02
Oracle Span 23-24:  multi => multiple
Oracle Span 25-26:  polar => polar
Oracle Span 21-22:  promote => promote-02
Oracle Span 12-13:  Russia => (country :name (name :op "Russia"))
Oracle Span 5-6:  said => say-01
Oracle Span 40-41:  throw => throw-01
Oracle Span 30-31:  US => (country :name (name :op "US"))
Oracle Span 0-1:  Venezuelan => (country :name (name :op "Venezuela"))
Oracle Span 26-27:  world => world

Extra span: Movements in => (country :name (name :op "Latin" :op "America"))
Incorrect span: Alberto Garrido => (person :name (name :op "Alberto" :op "Garrido"))
Missing span: Alberto Garrido => (person :name (name :op "Garrido" :op "Alberto"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: US => (country :name (name :op "US"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: China => (country :name (name :op "China"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: and => and
Missing span: world => world
Missing span: throw => throw-01
Missing span: polar => polar
Missing span: allies => (person :ARG1-of ally-01)
Missing span: military => military
Missing span: Movements => move-02
Missing span: dominance => dominate-01
Missing span: multi => multiple
Dependencies:
1	Venezuelan	_	JJ	JJ	_	5	amod	_	_
2	military	_	JJ	JJ	_	5	amod	_	_
3	analyst	_	NN	NN	_	5	nn	_	_
4	Alberto	_	NNP	NNP	_	5	nn	_	_
5	Garrido	_	NNP	NNP	_	6	nsubj	_	_
6	said	_	VBD	VBD	_	0	root	_	_
7	Chavez	_	NNP	NNP	_	9	nsubj	_	_
8	is	_	VBZ	VBZ	_	9	aux	_	_
9	looking	_	VBG	VBG	_	6	ccomp	_	_
10	for	_	IN	IN	_	9	prep	_	_
11	allies	_	NNS	NNS	_	10	pobj	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	Russia	_	NNP	NNP	_	12	pobj	_	_
14	,	_	,	,	_	13	punct	_	_
15	China	_	NNP	NNP	_	13	conj	_	_
16	,	_	,	,	_	13	punct	_	_
17	and	_	CC	CC	_	13	cc	_	_
18	Iran	_	NNP	NNP	_	13	conj	_	_
19	in	_	IN	IN	_	22	mark	_	_
20	order	_	NN	NN	_	22	dep	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	promote	_	VB	VB	_	9	advcl	_	_
23	a	_	DT	DT	_	25	det	_	_
24	multi-polar	_	JJ	JJ	_	25	amod	_	_
25	world	_	NN	NN	_	22	dobj	_	_
26	which	_	WDT	WDT	_	28	nsubj	_	_
27	will	_	MD	MD	_	28	aux	_	_
28	counteract	_	VB	VB	_	25	rcmod	_	_
29	US	_	NNP	NNP	_	30	nn	_	_
30	dominance	_	NN	NN	_	28	dobj	_	_
31	and	_	CC	CC	_	28	cc	_	_
32	encourage	_	VB	VB	_	28	conj	_	_
33	grassroots	_	NNP	NNP	_	34	nn	_	_
34	Movements	_	NNP	NNP	_	32	dobj	_	_
35	in	_	IN	IN	_	34	prep	_	_
36	Latin	_	NNP	NNP	_	37	nn	_	_
37	America	_	NNP	NNP	_	35	pobj	_	_
38	to	_	TO	TO	_	39	aux	_	_
39	throw	_	VB	VB	_	32	xcomp	_	_
40	off	_	RP	RP	_	39	prt	_	_
41	US	_	NNP	NNP	_	43	nn	_	_
42	governmental	_	JJ	JJ	_	43	amod	_	_
43	influence	_	NN	NN	_	39	dobj	_	_
44	.	_	.	.	_	6	punct	_	_

Oracle:
(a / analyze-01, ARG0, p / person)
(a / analyze-01, ARG1, m / military)
(a2 / ally-01, ARG1, p5 / person)
(a2 / ally-01, ARG2, p2 / person)
(a3 / and, op, c2 / country)
(a3 / and, op, c3 / country)
(a3 / and, op, c4 / country)
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(c3 / country, name, n5 / name)
(c4 / country, name, n6 / name)
(c5 / counteract-01, ARG0, w / world)
(c5 / counteract-01, ARG1, d / dominate-01)
(c6 / country, name, n7 / name)
(d / dominate-01, ARG0, c6 / country)
(e / encourage-01, ARG0, w / world)
(e / encourage-01, ARG1, m3 / move-02)
(e / encourage-01, ARG2, t / throw-01)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c6 / country)
(i / influence-01, ARG0, g2 / government-organization)
(l / look-01, ARG0, p2 / person)
(l / look-01, ARG1, p5 / person)
(l / look-01, location, a3 / and)
(l / look-01, purpose, p3 / promote-02)
(m3 / move-02, location, w2 / world-region)
(m3 / move-02, mod, g / grassroot)
(n / name, op, "Alberto")
(n / name, op, "Garrido")
(n2 / name, op, "Venezuela")
(n3 / name, op, "Chavez")
(n4 / name, op, "Russia")
(n5 / name, op, "China")
(n6 / name, op, "Iran")
(n7 / name, op, "US")
(n8 / name, op, "America")
(n8 / name, op, "Latin")
(p / person, mod, c / country)
(p / person, name, n / name)
(p2 / person, name, n3 / name)
(p3 / promote-02, ARG0, p / person)
(p3 / promote-02, ARG1, w / world)
(p4 / polar, mod, m2 / multiple)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, l / look-01)
(t / throw-01, ARG0, m3 / move-02)
(t / throw-01, ARG1, i / influence-01)
(w / world, mod, p4 / polar)
(w2 / world-region, name, n8 / name)

Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),influence,influence-01,false), Span(43,44,List(2, 1),governmental,(government-organization :ARG0-of govern-01),false), Span(37,39,List(6, 5, 4, 3),Latin America,(world-region :name (name :op "America" :op "Latin")),false), Span(35,37,List(10, 9, 8, 7),Movements in,(country :name (name :op "Latin" :op "America")),false), Span(34,35,List(11),grassroots,grassroot,false), Span(33,34,List(12),encourage,encourage-01,false), Span(29,30,List(13),counteract,counteract-01,false), Span(21,22,List(14),promote,promote-02,false), Span(8,9,List(15),looking,look-01,false), Span(5,6,List(16),said,say-01,false), Span(3,5,List(20, 19, 18, 17),Alberto Garrido,(person :name (name :op "Alberto" :op "Garrido")),false), Span(2,3,List(21),analyst,analyze-01,false)),Map(2 -> govern-01, 5 -> "America", 12 -> encourage-01, 15 -> look-01, 8 -> name, 21 -> analyze-01, 18 -> name, 7 -> country, 17 -> person, 1 -> government-organization, 4 -> name, 11 -> grassroot, 14 -> promote-02, 20 -> "Garrido", 6 -> "Latin", 0 -> influence-01, 9 -> "Latin", 16 -> say-01, 19 -> "Alberto", 3 -> world-region, 10 -> "America", 13 -> counteract-01),Map(e -> encourage-01, w -> world-region, n -> name, g3 -> grassroot, p2 -> person, s -> say-01, g2 -> govern-01, g -> government-organization, p -> promote-02, a -> analyze-01, n3 -> name, i -> influence-01, c -> country, l -> look-01, n2 -> name, c2 -> counteract-01))),[Ljava.lang.String;@5e81e5ac,Annotation([Ljava.lang.String;@4189d70b,[Ljava.lang.String;@3fa2213,[Ljava.lang.String;@3e7634b9),Annotation([Ljava.lang.String;@6f0b0a5e,[Ljava.lang.String;@6035b93b,[Ledu.cmu.lti.nlp.amr.Dependency;@320de594),Annotation([Ljava.lang.String;@3dd1dc90,[Ljava.lang.String;@abf688e,[Ljava.lang.String;@478ee483),Annotation([Ljava.lang.String;@1a7288a3,[Ljava.lang.String;@2974f221,[Ledu.cmu.lti.nlp.amr.Entity;@58fe0499))
AMR:
(a / analyze-01, ARG0, p2 / person)
(c / country, mod, g3 / grassroot)
(c / country, name, n2 / name)
(c2 / counteract-01, ARG1, c / country)
(e / encourage-01, ARG1, c / country)
(e / encourage-01, ARG2, w / world-region)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / influence-01, ARG0, c / country)
(l / look-01, ARG1, p / promote-02)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "America")
(n2 / name, op, "Latin")
(n3 / name, op, "Alberto")
(n3 / name, op, "Garrido")
(p / promote-02, ARG1, c2 / counteract-01)
(p2 / person, name, n3 / name)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, l / look-01)
(w / world-region, name, n / name)

Decoded in 753,749 microseconds
Sentence: Lorenzo Campos is a farmer in Anzoategui state in northern Venezuela and is training as a reservist.

NER Entity: (person :name (name :op "Lorenzo" :op "Campos"))
NER Entity: (country :name (name :op "Anzoategui"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 0-2:  Lorenzo Campos => (person :name (name :op "Lorenzo" :op "Campos"))
Span 9-10:  northern => north
Span 13-14:  training => train-01
Span 10-11:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 6-7:  Anzoategui => (name :op "Anzoategui")
Oracle Span 4-5:  farmer => farm-01
Oracle Span 0-2:  Lorenzo Campos => (person :name (name :op "Campos" :op "Lorenzo"))
Oracle Span 9-10:  northern => north
Oracle Span 16-17:  reservist => reservist
Oracle Span 7-8:  state => state
Oracle Span 13-14:  training => train-01
Oracle Span 10-11:  Venezuela => (country :name (name :op "Venezuela"))

Incorrect span: Lorenzo Campos => (person :name (name :op "Lorenzo" :op "Campos"))
Missing span: Lorenzo Campos => (person :name (name :op "Campos" :op "Lorenzo"))
Missing span: Anzoategui => (name :op "Anzoategui")
Missing span: and => and
Missing span: reservist => reservist
Missing span: farmer => farm-01
Missing span: state => state
Dependencies:
1	Lorenzo	_	NNP	NNP	_	2	nn	_	_
2	Campos	_	NNP	NNP	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	a	_	DT	DT	_	5	det	_	_
5	farmer	_	NN	NN	_	0	root	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	Anzoategui	_	NNP	NNP	_	8	nn	_	_
8	state	_	NN	NN	_	6	pobj	_	_
9	in	_	IN	IN	_	5	prep	_	_
10	northern	_	JJ	JJ	_	11	amod	_	_
11	Venezuela	_	NNP	NNP	_	9	pobj	_	_
12	and	_	CC	CC	_	5	cc	_	_
13	is	_	VBZ	VBZ	_	14	aux	_	_
14	training	_	VBG	VBG	_	5	conj	_	_
15	as	_	IN	IN	_	14	prep	_	_
16	a	_	DT	DT	_	17	det	_	_
17	reservist	_	NN	NN	_	15	pobj	_	_
18	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, p / person)
(a / and, op, t / train-01)
(c / country, name, n4 / name)
(c / country, part, n3 / north)
(f / farm-01, ARG0, p / person)
(n / name, op, "Campos")
(n / name, op, "Lorenzo")
(n2 / name, op, "Anzoategui")
(n4 / name, op, "Venezuela")
(p / person, location, s / state)
(p / person, name, n / name)
(s / state, location, n3 / north)
(s / state, name, n2 / name)
(t / train-01, ARG1, r / reservist)
(t / train-01, ARG2, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),training,train-01,false), Span(10,11,List(3, 2, 1),Venezuela,(country :name (name :op "Venezuela")),false), Span(9,10,List(4),northern,north,false), Span(0,2,List(8, 7, 6, 5),Lorenzo Campos,(person :name (name :op "Lorenzo" :op "Campos")),false)),Map(2 -> name, 5 -> person, 8 -> "Campos", 7 -> "Lorenzo", 1 -> country, 4 -> north, 6 -> name, 0 -> train-01, 3 -> "Venezuela"),Map(n -> name, t -> train-01, p -> person, n3 -> name, c -> country, n2 -> north))),[Ljava.lang.String;@686449f9,Annotation([Ljava.lang.String;@665df3c6,[Ljava.lang.String;@68b6f0d6,[Ljava.lang.String;@4044fb95),Annotation([Ljava.lang.String;@aa549e5,[Ljava.lang.String;@36f48b4,[Ledu.cmu.lti.nlp.amr.Dependency;@5c00384f),Annotation([Ljava.lang.String;@3b7ff809,[Ljava.lang.String;@1bb564e2,[Ljava.lang.String;@62e6b5c8),Annotation([Ljava.lang.String;@3f792b9b,[Ljava.lang.String;@7b8233cd,[Ledu.cmu.lti.nlp.amr.Entity;@4b20ca2b))
AMR:
(c / country, name, n / name)
(c / country, part, n2 / north)
(n / name, op, "Venezuela")
(n3 / name, op, "Campos")
(n3 / name, op, "Lorenzo")
(p / person, name, n3 / name)
(t / train-01, ARG0, p / person)
(t / train-01, ARG1, n2 / north)

Decoded in 62,118 microseconds
Sentence: Campos said Venezuelans want the world to know that Venezuelans are not preparing to attack anyone and that the mission is to protect Venezuela.

NER Entity: (person :name (name :op "Campos"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 15-16:  anyone => anyone
Span 14-15:  attack => attack-01
Span 7-8:  know => know-01
Span 19-20:  mission => mission
Span 12-13:  preparing => prepare-02
Span 22-23:  protect => protect-01
Span 1-2:  said => say-01
Span 23-24:  Venezuela => (country :name (name :op "Venezuela"))
Span 3-4:  want => want-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 15-16:  anyone => anyone
Oracle Span 14-15:  attack => attack-01
Oracle Span 0-1:  Campos => (person :name (name :op "Campos"))
Oracle Span 7-8:  know => know-01
Oracle Span 19-20:  mission => mission
Oracle Span 12-13:  preparing => prepare-01
Oracle Span 22-23:  protect => protect-01
Oracle Span 1-2:  said => say-01
Oracle Span 23-24:  Venezuela => (person :mod (country :name (name :op "Venezuela")))
Oracle Span 3-4:  want => want-01
Oracle Span 5-6:  world => world

Incorrect span: Venezuela => (country :name (name :op "Venezuela"))
Incorrect span: preparing => prepare-02
Missing span: Campos => (person :name (name :op "Campos"))
Missing span: Venezuela => (person :mod (country :name (name :op "Venezuela")))
Missing span: and => and
Missing span: preparing => prepare-01
Missing span: world => world
Dependencies:
1	Campos	_	NNS	NNS	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	Venezuelans	_	NNP	NNP	_	4	nsubj	_	_
4	want	_	VBP	VBP	_	2	ccomp	_	_
5	the	_	DT	DT	_	6	det	_	_
6	world	_	NN	NN	_	4	dobj	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	know	_	VB	VB	_	4	xcomp	_	_
9	that	_	IN	IN	_	13	mark	_	_
10	Venezuelans	_	NNP	NNP	_	13	nsubj	_	_
11	are	_	VBP	VBP	_	13	aux	_	_
12	not	_	RB	RB	_	13	neg	_	_
13	preparing	_	VBG	VBG	_	8	ccomp	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	attack	_	VB	VB	_	13	xcomp	_	_
16	anyone	_	NN	NN	_	15	dobj	_	_
17	and	_	CC	CC	_	13	cc	_	_
18	that	_	IN	IN	_	21	mark	_	_
19	the	_	DT	DT	_	20	det	_	_
20	mission	_	NN	NN	_	21	nsubj	_	_
21	is	_	VBZ	VBZ	_	13	conj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	protect	_	VB	VB	_	21	xcomp	_	_
24	Venezuela	_	NNP	NNP	_	23	dobj	_	_
25	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, p3 / prepare-01)
(a / and, op, p4 / protect-01)
(a2 / attack-01, ARG0, p2 / person)
(a2 / attack-01, ARG1, a3 / anyone)
(c / country, name, n2 / name)
(k / know-01, ARG0, w2 / world)
(k / know-01, ARG1, a / and)
(m / mission, purpose, p4 / protect-01)
(n / name, op, "Campos")
(n2 / name, op, "Venezuela")
(p / person, name, n / name)
(p2 / person, mod, c / country)
(p3 / prepare-01, ARG0, p2 / person)
(p3 / prepare-01, ARG1, a2 / attack-01)
(p4 / protect-01, ARG1, c / country)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, w / want-01)
(w / want-01, ARG0, p2 / person)
(w / want-01, ARG1, k / know-01)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false), Span(22,23,List(3),protect,protect-01,false), Span(19,20,List(4),mission,mission,false), Span(15,16,List(5),anyone,anyone,false), Span(14,15,List(6),attack,attack-01,false), Span(12,13,List(7),preparing,prepare-02,false), Span(7,8,List(8),know,know-01,false), Span(3,4,List(9),want,want-01,false), Span(1,2,List(10),said,say-01,false)),Map(2 -> "Venezuela", 5 -> anyone, 8 -> know-01, 7 -> prepare-02, 1 -> name, 4 -> mission, 6 -> attack-01, 9 -> want-01, 0 -> country, 10 -> say-01, 3 -> protect-01),Map(w -> want-01, n -> name, k -> know-01, p2 -> prepare-02, s -> say-01, m -> mission, p -> protect-01, a -> anyone, a2 -> attack-01, c -> country))),[Ljava.lang.String;@1cbf6e72,Annotation([Ljava.lang.String;@6aecbb8d,[Ljava.lang.String;@1af146,[Ljava.lang.String;@4da602fc),Annotation([Ljava.lang.String;@2a8d39c4,[Ljava.lang.String;@25b2cfcb,[Ledu.cmu.lti.nlp.amr.Dependency;@72758afa),Annotation([Ljava.lang.String;@fb9c7aa,[Ljava.lang.String;@4c398c80,[Ljava.lang.String;@7fc6de5b),Annotation([Ljava.lang.String;@21baa903,[Ljava.lang.String;@607fbe09,[Ledu.cmu.lti.nlp.amr.Entity;@60a2630a))
AMR:
(a2 / attack-01, ARG1, a / anyone)
(c / country, name, n / name)
(k / know-01, ARG1, p2 / prepare-02)
(n / name, op, "Venezuela")
(p / protect-01, ARG0, m / mission)
(p / protect-01, ARG1, c / country)
(p2 / prepare-02, ARG1, p / protect-01)
(p2 / prepare-02, ARG2, a2 / attack-01)
(s / say-01, ARG1, w / want-01)
(w / want-01, ARG1, k / know-01)

Decoded in 105,265 microseconds
Sentence: In May, Chavez's government announced details in 050500 of an $18.6 million deal with a Russian firm to purchase 100000 AK-103 assault rifles with 30 rounds of ammunition each and the technology transfer for Venezuela to manufacture the rifles.

NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(050500,00,05,05)
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "AK" :op "-" :op "103"))
mkDayMonthYear(100000,00,00,10)
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (thing :name (name :op "AK" :op "-" :op "103"))
mkDayMonthYear(100000,00,00,10)
mkDayMonthYear(050500,00,05,05)
Spans:
Span 9-10:  050500 => (date-entity :month 5 :year 2005)
Span 22-23:  100000 => (date-entity :day 0 :month 0 :year 10)
Span 23-24:  AK => (product :name (name :op "AK-47"))
Span 32-33:  ammunition => ammunition
Span 6-7:  announced => announce-01
Span 26-27:  assault => assault-01
Span 15-16:  deal => deal-01
Span 7-8:  details => detail-01
Span 33-34:  each => each
Span 19-20:  firm => firm
Span 41-42:  manufacture => manufacture-01
Span 1-2:  May => (date-entity :month 5)
Span 21-22:  purchase => purchase-01
Span 43-44:  rifles => rifle
Span 27-28:  rifles => rifle
Span 30-31:  rounds => round
Span 36-37:  technology => technology
Span 37-38:  transfer => transfer-01
Span 39-40:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 9-10:  050500 => (date-entity :month 5 :year 2005)
Oracle Span 22-23:  100000 => 100000
Oracle Span 29-30:  30 => 30
Oracle Span 23-24:  AK => (name :op "AK-103")
Oracle Span 32-33:  ammunition => ammunition
Oracle Span 34-35:  and => and
Oracle Span 6-7:  announced => announce-01
Oracle Span 26-27:  assault => assault-01
Oracle Span 3-4:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 15-16:  deal => deal-01
Oracle Span 7-8:  details => detail-01
Oracle Span 33-34:  each => each
Oracle Span 19-20:  firm => firm
Oracle Span 5-6:  government => (government-organization :ARG0-of govern-01)
Oracle Span 41-42:  manufacture => manufacture-01
Oracle Span 21-22:  purchase => purchase-01
Oracle Span 27-28:  rifles => rifle
Oracle Span 30-31:  rounds => round
Oracle Span 18-19:  Russian => (country :name (name :op "Russia"))
Oracle Span 36-37:  technology => technology
Oracle Span 37-38:  transfer => transfer-01
Oracle Span 39-40:  Venezuela => (country :name (name :op "Venezuela"))

Extra span: rifles => rifle
Incorrect span: AK => (product :name (name :op "AK-47"))
Incorrect span: 100000 => (date-entity :day 0 :month 0 :year 10)
Extra span: May => (date-entity :month 5)
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: AK => (name :op "AK-103")
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: and => and
Missing span: 30 => 30
Missing span: 100000 => 100000
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	In	_	IN	IN	_	7	prep	_	_
2	May	_	NNP	NNP	_	1	pobj	_	_
3	,	_	,	,	_	7	punct	_	_
4	Chavez	_	NNP	NNP	_	6	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	government	_	NN	NN	_	7	nsubj	_	_
7	announced	_	VBD	VBD	_	0	root	_	_
8	details	_	NNS	NNS	_	7	dobj	_	_
9	in	_	IN	IN	_	7	prep	_	_
10	050500	_	CD	CD	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	an	_	DT	DT	_	16	det	_	_
13	$	_	$	$	_	16	amod	_	_
14	18.6	_	CD	CD	_	15	number	_	_
15	million	_	CD	CD	_	13	num	_	_
16	deal	_	NN	NN	_	11	pobj	_	_
17	with	_	IN	IN	_	16	prep	_	_
18	a	_	DT	DT	_	20	det	_	_
19	Russian	_	JJ	JJ	_	20	amod	_	_
20	firm	_	NN	NN	_	17	pobj	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	purchase	_	VB	VB	_	7	vmod	_	_
23	100000	_	CD	CD	_	26	num	_	_
24	AK-103	_	NN	NN	_	26	nn	_	_
25	assault	_	NN	NN	_	26	nn	_	_
26	rifles	_	NNS	NNS	_	22	dobj	_	_
27	with	_	IN	IN	_	22	prep	_	_
28	30	_	CD	CD	_	29	num	_	_
29	rounds	_	NNS	NNS	_	27	pobj	_	_
30	of	_	IN	IN	_	29	prep	_	_
31	ammunition	_	NN	NN	_	30	pobj	_	_
32	each	_	DT	DT	_	31	dep	_	_
33	and	_	CC	CC	_	31	cc	_	_
34	the	_	DT	DT	_	36	det	_	_
35	technology	_	NN	NN	_	36	nn	_	_
36	transfer	_	NN	NN	_	31	conj	_	_
37	for	_	IN	IN	_	36	prep	_	_
38	Venezuela	_	NNP	NNP	_	37	pobj	_	_
39	to	_	TO	TO	_	40	aux	_	_
40	manufacture	_	VB	VB	_	22	vmod	_	_
41	the	_	DT	DT	_	42	det	_	_
42	rifles	_	NNS	NNS	_	40	dobj	_	_
43	.	_	.	.	_	7	punct	_	_

Oracle:
(a / announce-01, ARG0, g / government-organization)
(a / announce-01, ARG1, a2 / and)
(a / announce-01, time, d / date-entity)
(a2 / and, op, d5 / detail-01)
(a2 / and, op, t / transfer-01)
(a4 / assault-01, instrument, r / rifle)
(a5 / ammunition, consist, r2 / round)
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(d / date-entity, month, 5)
(d / date-entity, year, 2005)
(d5 / detail-01, ARG1, d6 / deal-01)
(d6 / deal-01, ARG1, p2 / purchase-01)
(f / firm, mod, c / country)
(g / government-organization, poss, p / person)
(g2 / govern-01, ARG0, g / government-organization)
(m3 / manufacture-01, ARG0, c2 / country)
(m3 / manufacture-01, ARG1, r / rifle)
(n / name, op, "Chavez")
(n2 / name, op, "Russia")
(n3 / name, op, "AK-103")
(n4 / name, op, "Venezuela")
(p / person, name, n / name)
(p2 / purchase-01, ARG0, g / government-organization)
(p2 / purchase-01, ARG1, r / rifle)
(r / rifle, accompanier, r2 / round)
(r / rifle, mod, e / each)
(r / rifle, name, n3 / name)
(r / rifle, quant, 1 / 100000)
(r2 / round, quant, 3 / 30)
(t / transfer-01, ARG1, t2 / technology)
(t / transfer-01, ARG2, c2 / country)
(t / transfer-01, purpose, m3 / manufacture-01)

Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),rifles,rifle,false), Span(41,42,List(1),manufacture,manufacture-01,false), Span(39,40,List(4, 3, 2),Venezuela,(country :name (name :op "Venezuela")),false), Span(37,38,List(5),transfer,transfer-01,false), Span(36,37,List(6),technology,technology,false), Span(33,34,List(7),each,each,false), Span(32,33,List(8),ammunition,ammunition,false), Span(30,31,List(9),rounds,round,false), Span(27,28,List(10),rifles,rifle,false), Span(26,27,List(11),assault,assault-01,false), Span(23,24,List(14, 13, 12),AK,(product :name (name :op "AK-47")),false), Span(22,23,List(18, 17, 16, 15),100000,(date-entity :day 0 :month 0 :year 10),false), Span(21,22,List(19),purchase,purchase-01,false), Span(19,20,List(20),firm,firm,false), Span(15,16,List(21),deal,deal-01,false), Span(9,10,List(24, 23, 22),050500,(date-entity :month 5 :year 2005),false), Span(7,8,List(25),details,detail-01,false), Span(6,7,List(26),announced,announce-01,false), Span(1,2,List(28, 27),May,(date-entity :month 5),false)),Map(2 -> country, 5 -> transfer-01, 27 -> date-entity, 12 -> product, 8 -> ammunition, 15 -> date-entity, 21 -> deal-01, 18 -> 10, 24 -> 2005, 7 -> each, 1 -> manufacture-01, 17 -> 0, 23 -> 5, 26 -> announce-01, 4 -> "Venezuela", 11 -> assault-01, 14 -> "AK-47", 20 -> firm, 28 -> 5, 6 -> technology, 9 -> round, 0 -> rifle, 22 -> date-entity, 16 -> 0, 19 -> purchase-01, 10 -> rifle, 3 -> name, 25 -> detail-01, 13 -> name),Map(e -> each, n -> name, r3 -> rifle, 2 -> 2005, 5 -> 5, t -> transfer-01, d3 -> date-entity, p2 -> purchase-01, a3 -> announce-01, m -> manufacture-01, d -> date-entity, 1 -> 10, r2 -> round, p -> product, a -> ammunition, d2 -> deal-01, d5 -> date-entity, 02 -> 0, t2 -> technology, 52 -> 5, a2 -> assault-01, r -> rifle, c -> country, 0 -> 0, d4 -> detail-01, f -> firm, n2 -> name))),[Ljava.lang.String;@29df4d43,Annotation([Ljava.lang.String;@5dd91bca,[Ljava.lang.String;@40cb698e,[Ljava.lang.String;@3382f8ae),Annotation([Ljava.lang.String;@60641ec8,[Ljava.lang.String;@75f65e45,[Ledu.cmu.lti.nlp.amr.Dependency;@6eeade6c),Annotation([Ljava.lang.String;@4a891c97,[Ljava.lang.String;@a5bd950,[Ljava.lang.String;@4d18aa28),Annotation([Ljava.lang.String;@75390459,[Ljava.lang.String;@7756c3cd,[Ledu.cmu.lti.nlp.amr.Entity;@2313052e))
AMR:
(a2 / assault-01, ARG0, p / product)
(a2 / assault-01, ARG1, r3 / rifle)
(a3 / announce-01, ARG1, d4 / detail-01)
(a3 / announce-01, purpose, p2 / purchase-01)
(a3 / announce-01, time, d3 / date-entity)
(a3 / announce-01, time, d5 / date-entity)
(c / country, name, n / name)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 1 / 10)
(d2 / deal-01, ARG1, f / firm)
(d2 / deal-01, purpose, p2 / purchase-01)
(d3 / date-entity, month, 5 / 5)
(d3 / date-entity, year, 2 / 2005)
(d5 / date-entity, month, 52 / 5)
(m / manufacture-01, ARG0, c / country)
(m / manufacture-01, ARG1, r / rifle)
(n / name, op, "Venezuela")
(n2 / name, op, "AK-47")
(p / product, name, n2 / name)
(p2 / purchase-01, ARG1, r3 / rifle)
(p2 / purchase-01, ARG2, r2 / round)
(p2 / purchase-01, purpose, m / manufacture-01)
(r2 / round, mod, a / ammunition)
(r3 / rifle, quant, d / date-entity)
(t / transfer-01, ARG0, e / each)
(t / transfer-01, ARG1, t2 / technology)
(t / transfer-01, location, c / country)

Decoded in 920,883 microseconds
Sentence: The deal works out to $186.22 per rifle.

Spans:
Span 1-2:  deal => deal-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  186.22 => 186.22
Oracle Span 1-2:  deal => deal-01
Oracle Span 8-9:  rifle => rifle
Oracle Span 2-3:  works => work-05

Missing span: works => work-05
Missing span: 186.22 => 186.22
Missing span: rifle => rifle
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	deal	_	NN	NN	_	3	nsubj	_	_
3	works	_	VBZ	VBZ	_	0	root	_	_
4	out	_	RP	RP	_	3	prt	_	_
5	to	_	TO	TO	_	3	prep	_	_
6	$	_	$	$	_	5	pobj	_	_
7	186.22	_	CD	CD	_	6	num	_	_
8	per	_	IN	IN	_	6	prep	_	_
9	rifle	_	NN	NN	_	8	pobj	_	_
10	.	_	.	.	_	3	punct	_	_

Oracle:
(w / work-05, ARG1, d2 / deal-01)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),deal,deal-01,false)),Map(0 -> deal-01),Map(d -> deal-01))),[Ljava.lang.String;@2bd2b28e,Annotation([Ljava.lang.String;@16746061,[Ljava.lang.String;@57fd91c9,[Ljava.lang.String;@6cfcd46d),Annotation([Ljava.lang.String;@52045dbe,[Ljava.lang.String;@674658f7,[Ledu.cmu.lti.nlp.amr.Dependency;@5c8eee0f),Annotation([Ljava.lang.String;@565b064f,[Ljava.lang.String;@26425897,[Ljava.lang.String;@73163d48),Annotation([Ljava.lang.String;@58c34bb3,[Ljava.lang.String;@56a4479a,[Ledu.cmu.lti.nlp.amr.Entity;@62163b39))
AMR:


Decoded in 10,628 microseconds
Sentence: This price is considerably less costly than the US mail-order price of $825 to $850 for the same weapon.

NER Entity: (country :name (name :op "US"))
Spans:
Span 3-4:  considerably => considerably
Span 5-6:  costly => costly
Span 21-22:  same => same-41
Span 0-1:  This => this
Span 22-23:  weapon => weapon

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 15-16:  825 => 825
Oracle Span 18-19:  850 => 850
Oracle Span 3-4:  considerably => considerable
Oracle Span 5-6:  costly => cost-01
Oracle Span 4-5:  less => less
Oracle Span 9-10:  mail => mail
Oracle Span 11-12:  order => order-02
Oracle Span 1-2:  price => (thing :ARG2-of price-01)
Oracle Span 12-13:  price => price-01
Oracle Span 21-22:  same => same-41
Oracle Span 0-1:  This => this
Oracle Span 8-9:  US => (country :name (name :op "US"))
Oracle Span 22-23:  weapon => weapon

Incorrect span: costly => costly
Incorrect span: considerably => considerably
Missing span: US => (country :name (name :op "US"))
Missing span: price => (thing :ARG2-of price-01)
Missing span: less => less
Missing span: 825 => 825
Missing span: 850 => 850
Missing span: price => price-01
Missing span: order => order-02
Missing span: mail => mail
Missing span: costly => cost-01
Missing span: considerably => considerable
Dependencies:
1	This	_	DT	DT	_	2	det	_	_
2	price	_	NN	NN	_	6	nsubj	_	_
3	is	_	VBZ	VBZ	_	6	cop	_	_
4	considerably	_	RB	RB	_	6	advmod	_	_
5	less	_	RBR	RBR	_	6	advmod	_	_
6	costly	_	JJ	JJ	_	0	root	_	_
7	than	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	11	det	_	_
9	US	_	NNP	NNP	_	11	nn	_	_
10	mail-order	_	NN	NN	_	11	nn	_	_
11	price	_	NN	NN	_	7	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	$	_	$	$	_	16	dep	_	_
14	825	_	CD	CD	_	16	number	_	_
15	to	_	TO	TO	_	16	dep	_	_
16	$	_	$	$	_	12	pobj	_	_
17	850	_	CD	CD	_	16	num	_	_
18	for	_	IN	IN	_	16	prep	_	_
19	the	_	DT	DT	_	21	det	_	_
20	same	_	JJ	JJ	_	21	amod	_	_
21	weapon	_	NN	NN	_	18	pobj	_	_
22	.	_	.	.	_	6	punct	_	_

Oracle:
(c / cost-01, ARG1, t / thing)
(c / cost-01, degree, l / less)
(c3 / country, name, n / name)
(l / less, manner, c2 / considerable)
(m3 / mail, mod, c3 / country)
(n / name, op, "US")
(o / order-02, ARG1, w / weapon)
(o / order-02, medium, m3 / mail)
(p / price-01, ARG2, t / thing)
(p2 / price-01, ARG1, w / weapon)
(s / same-41, ARG1, w / weapon)
(t / thing, mod, t2 / this)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),weapon,weapon,false), Span(21,22,List(1),same,same-41,false), Span(5,6,List(2),costly,costly,false), Span(3,4,List(3),considerably,considerably,false), Span(0,1,List(4),This,this,false)),Map(2 -> costly, 1 -> same-41, 4 -> this, 0 -> weapon, 3 -> considerably),Map(w -> weapon, t -> this, s -> same-41, c -> costly, c2 -> considerably))),[Ljava.lang.String;@20a8a64e,Annotation([Ljava.lang.String;@62f4ff3b,[Ljava.lang.String;@1698fc68,[Ljava.lang.String;@4504d271),Annotation([Ljava.lang.String;@207b8649,[Ljava.lang.String;@65b3a85a,[Ledu.cmu.lti.nlp.amr.Dependency;@34997338),Annotation([Ljava.lang.String;@57eda880,[Ljava.lang.String;@2b5825fa,[Ljava.lang.String;@53d1b9b3),Annotation([Ljava.lang.String;@2cae1042,[Ljava.lang.String;@163d04ff,[Ledu.cmu.lti.nlp.amr.Entity;@7c209437))
AMR:
(c / costly, mod, c2 / considerably)
(c / costly, op, s / same-41)
(s / same-41, ARG1, w / weapon)
(t / this, op, s / same-41)

Decoded in 72,942 microseconds
Sentence: The Government of Venezuela also intends to buy 10 Russian helicopters, 10 Spanish transport planes, and 6 Spanish naval craft.

NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Spanish"))
NER Entity: (thing :name (name :op "Spanish"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 7-8:  buy => buy-01
Span 10-11:  helicopters => helicopter
Span 5-6:  intends => intend-01
Span 15-16:  planes => plane
Span 14-15:  transport => transport-01
Span 3-4:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 8-9:  10 => 10
Oracle Span 12-13:  10 => 10
Oracle Span 18-19:  6 => 6
Oracle Span 4-5:  also => also
Oracle Span 17-18:  and => and
Oracle Span 7-8:  buy => buy-01
Oracle Span 21-22:  craft => craft
Oracle Span 1-2:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 10-11:  helicopters => helicopter
Oracle Span 5-6:  intends => intend-01
Oracle Span 15-16:  planes => plane
Oracle Span 9-10:  Russian => (country :name (name :op "Russia"))
Oracle Span 14-15:  transport => transport-01
Oracle Span 3-4:  Venezuela => (country :name (name :op "Venezuela"))

Missing span: Russian => (country :name (name :op "Russia"))
Missing span: also => also
Missing span: and => and
Missing span: craft => craft
Missing span: 6 => 6
Missing span: 10 => 10
Missing span: 10 => 10
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	Government	_	NN	NN	_	6	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	Venezuela	_	NNP	NNP	_	3	pobj	_	_
5	also	_	RB	RB	_	6	advmod	_	_
6	intends	_	VBZ	VBZ	_	0	root	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	buy	_	VB	VB	_	6	xcomp	_	_
9	10	_	CD	CD	_	11	num	_	_
10	Russian	_	JJ	JJ	_	11	amod	_	_
11	helicopters	_	NNS	NNS	_	8	dobj	_	_
12	,	_	,	,	_	11	punct	_	_
13	10	_	CD	CD	_	16	num	_	_
14	Spanish	_	JJ	JJ	_	16	amod	_	_
15	transport	_	NN	NN	_	16	nn	_	_
16	planes	_	NNS	NNS	_	11	conj	_	_
17	,	_	,	,	_	11	punct	_	_
18	and	_	CC	CC	_	11	cc	_	_
19	6	_	CD	CD	_	22	num	_	_
20	Spanish	_	JJ	JJ	_	22	amod	_	_
21	naval	_	JJ	JJ	_	22	amod	_	_
22	craft	_	NN	NN	_	11	conj	_	_
23	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c4 / craft)
(a / and, op, h / helicopter)
(a / and, op, p / plane)
(b / buy-01, ARG0, g / government-organization)
(b / buy-01, ARG1, a / and)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c4 / craft, quant, 6 / 6)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / helicopter, quant, 12 / 10)
(h / helicopter, source, c2 / country)
(i / intend-01, ARG0, g / government-organization)
(i / intend-01, ARG1, b / buy-01)
(i / intend-01, mod, a2 / also)
(n / name, op, "Venezuela")
(n2 / name, op, "Russia")
(p / plane, mod, t / transport-01)
(p / plane, quant, 1 / 10)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),planes,plane,false), Span(14,15,List(1),transport,transport-01,false), Span(10,11,List(2),helicopters,helicopter,false), Span(7,8,List(3),buy,buy-01,false), Span(5,6,List(4),intends,intend-01,false), Span(3,4,List(7, 6, 5),Venezuela,(country :name (name :op "Venezuela")),false)),Map(2 -> helicopter, 5 -> country, 7 -> "Venezuela", 1 -> transport-01, 4 -> intend-01, 6 -> name, 0 -> plane, 3 -> buy-01),Map(n -> name, h -> helicopter, b -> buy-01, t -> transport-01, p -> plane, i -> intend-01, c -> country))),[Ljava.lang.String;@2262b621,Annotation([Ljava.lang.String;@7e928e2f,[Ljava.lang.String;@f667fe,[Ljava.lang.String;@788fcafb),Annotation([Ljava.lang.String;@4febb875,[Ljava.lang.String;@25e2a451,[Ledu.cmu.lti.nlp.amr.Dependency;@1698ee84),Annotation([Ljava.lang.String;@10c626be,[Ljava.lang.String;@2fc0cc3,[Ljava.lang.String;@328cf0e1),Annotation([Ljava.lang.String;@63b1d4fa,[Ljava.lang.String;@42e3ede4,[Ledu.cmu.lti.nlp.amr.Entity;@201b6b6f))
AMR:
(b / buy-01, ARG0, c / country)
(b / buy-01, ARG1, h / helicopter)
(c / country, name, n / name)
(i / intend-01, ARG1, b / buy-01)
(n / name, op, "Venezuela")
(p / plane, purpose, t / transport-01)
(t / transport-01, ARG0, h / helicopter)

Decoded in 182,244 microseconds
Sentence: Venezuelan officials say the government is negotiating with Brazil to buy around 24 air support and training planes.

NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 11-12:  around => around
Span 8-9:  Brazil => (country :name (name :op "Brazil"))
Span 10-11:  buy => buy-01
Span 6-7:  negotiating => negotiate-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 17-18:  planes => plane
Span 2-3:  say => say-01
Span 14-15:  support => support-01
Span 16-17:  training => train-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 12-13:  24 => 24
Oracle Span 13-14:  air => air
Oracle Span 15-16:  and => and
Oracle Span 11-12:  around => around
Oracle Span 8-9:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 10-11:  buy => buy-01
Oracle Span 4-5:  government => (government-organization :ARG0-of govern-01)
Oracle Span 6-7:  negotiating => negotiate-01
Oracle Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 17-18:  planes => plane
Oracle Span 2-3:  say => say-01
Oracle Span 14-15:  support => support-01
Oracle Span 16-17:  training => train-01
Oracle Span 0-1:  Venezuelan => (country :name (name :op "Venezuela"))

Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: and => and
Missing span: 24 => 24
Missing span: air => air
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Venezuelan	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	3	nsubj	_	_
3	say	_	VBP	VBP	_	0	root	_	_
4	the	_	DT	DT	_	5	det	_	_
5	government	_	NN	NN	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	aux	_	_
7	negotiating	_	VBG	VBG	_	3	ccomp	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	Brazil	_	NNP	NNP	_	8	pobj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	buy	_	VB	VB	_	7	xcomp	_	_
12	around	_	RB	RB	_	13	quantmod	_	_
13	24	_	CD	CD	_	15	num	_	_
14	air	_	NN	NN	_	15	nn	_	_
15	support	_	NN	NN	_	11	dobj	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	training	_	NN	NN	_	18	nn	_	_
18	planes	_	NNS	NNS	_	15	conj	_	_
19	.	_	.	.	_	3	punct	_	_

Oracle:
(a / around, op, 2 / 24)
(a4 / and, op, p3 / plane)
(a4 / and, quant, a / around)
(b / buy-01, ARG0, g / government-organization)
(b / buy-01, ARG1, a4 / and)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(g2 / govern-01, ARG0, g / government-organization)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Venezuela")
(n2 / negotiate-01, ARG0, g / government-organization)
(n2 / negotiate-01, ARG1, c2 / country)
(n2 / negotiate-01, ARG2, b / buy-01)
(n3 / name, op, "Brazil")
(p3 / plane, purpose, t / train-01)
(s / say-01, ARG1, n2 / negotiate-01)
(s2 / support-01, ARG1, a3 / air)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),planes,plane,false), Span(16,17,List(1),training,train-01,false), Span(14,15,List(2),support,support-01,false), Span(11,12,List(3),around,around,false), Span(10,11,List(4),buy,buy-01,false), Span(8,9,List(7, 6, 5),Brazil,(country :name (name :op "Brazil")),false), Span(6,7,List(8),negotiating,negotiate-01,false), Span(2,3,List(9),say,say-01,false), Span(1,2,List(11, 10),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> support-01, 5 -> country, 8 -> negotiate-01, 7 -> "Brazil", 1 -> train-01, 11 -> official, 4 -> buy-01, 6 -> name, 9 -> say-01, 0 -> plane, 10 -> have-org-role-91, 3 -> around),Map(n -> name, h -> have-org-role-91, s2 -> say-01, b -> buy-01, t -> train-01, s -> support-01, p -> plane, a -> around, c -> country, o -> official, n2 -> negotiate-01))),[Ljava.lang.String;@75459c75,Annotation([Ljava.lang.String;@183e8023,[Ljava.lang.String;@45efc20d,[Ljava.lang.String;@3e5499cc),Annotation([Ljava.lang.String;@67ab1c47,[Ljava.lang.String;@b78a709,[Ledu.cmu.lti.nlp.amr.Dependency;@30bcf3c1),Annotation([Ljava.lang.String;@2a3c96e3,[Ljava.lang.String;@15cafec7,[Ljava.lang.String;@5b444398),Annotation([Ljava.lang.String;@cb191ca,[Ljava.lang.String;@42f48531,[Ledu.cmu.lti.nlp.amr.Entity;@a776e))
AMR:
(b / buy-01, ARG1, s / support-01)
(b / buy-01, purpose, h / have-org-role-91)
(c / country, name, n / name)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Brazil")
(n2 / negotiate-01, ARG1, b / buy-01)
(n2 / negotiate-01, ARG2, c / country)
(p / plane, purpose, t / train-01)
(s / support-01, ARG1, a / around)
(s2 / say-01, ARG1, n2 / negotiate-01)
(t / train-01, ARG1, a / around)

Decoded in 207,337 microseconds
Sentence: Chavez has insisted and even his staunchest retired military Critics here agree that the purchases are essential to update old weaponry such as the military's decades-old Belgian FAL rifles.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Belgian"))
NER Entity: (organization :name (name :op "FAL"))
Spans:
Span 11-12:  agree => agree-01
Span 26-27:  decades => (temporal-quantity :unit decade)
Span 16-17:  essential => essential
Span 2-3:  insisted => insist-01
Span 14-15:  purchases => purchase-01
Span 7-8:  retired => retire-01
Span 31-32:  rifles => rifle
Span 21-22:  such => such
Span 18-19:  update => update-01
Span 20-21:  weaponry => weaponry

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 11-12:  agree => agree-01
Oracle Span 3-4:  and => and
Oracle Span 29-30:  Belgian => (country :name (name :op "Belgium"))
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 9-10:  Critics => (person :ARG0-of criticize-01)
Oracle Span 26-27:  decades => (temporal-quantity :unit decade)
Oracle Span 16-17:  essential => essential
Oracle Span 4-5:  even => even
Oracle Span 30-31:  FAL => (name :op "FAL")
Oracle Span 10-11:  here => here
Oracle Span 2-3:  insisted => insist-01
Oracle Span 8-9:  military => military
Oracle Span 24-25:  military => military
Oracle Span 19-20:  old => old
Oracle Span 14-15:  purchases => purchase-01
Oracle Span 7-8:  retired => retire-01
Oracle Span 31-32:  rifles => rifle
Oracle Span 6-7:  staunchest => (staunch :degree most)
Oracle Span 18-19:  update => update-01
Oracle Span 20-21:  weaponry => weaponry

Extra span: such => such
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: FAL => (name :op "FAL")
Missing span: Belgian => (country :name (name :op "Belgium"))
Missing span: and => and
Missing span: military => military
Missing span: old => old
Missing span: military => military
Missing span: staunchest => (staunch :degree most)
Missing span: even => even
Missing span: here => here
Missing span: Critics => (person :ARG0-of criticize-01)
Dependencies:
1	Chavez	_	NNP	NNP	_	3	nsubj	_	_
2	has	_	VBZ	VBZ	_	3	aux	_	_
3	insisted	_	VBN	VBN	_	0	root	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	even	_	RB	RB	_	8	advmod	_	_
6	his	_	PRP$	PRP$	_	7	poss	_	_
7	staunchest	_	NN	NN	_	8	nsubj	_	_
8	retired	_	VBD	VBD	_	3	conj	_	_
9	military	_	JJ	JJ	_	10	amod	_	_
10	Critics	_	NNS	NNS	_	12	nsubj	_	_
11	here	_	RB	RB	_	12	advmod	_	_
12	agree	_	VBP	VBP	_	8	ccomp	_	_
13	that	_	IN	IN	_	17	mark	_	_
14	the	_	DT	DT	_	15	det	_	_
15	purchases	_	NNS	NNS	_	17	nsubj	_	_
16	are	_	VBP	VBP	_	17	cop	_	_
17	essential	_	JJ	JJ	_	12	ccomp	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	update	_	VB	VB	_	17	xcomp	_	_
20	old	_	JJ	JJ	_	21	amod	_	_
21	weaponry	_	NN	NN	_	19	dobj	_	_
22	such	_	JJ	JJ	_	23	mwe	_	_
23	as	_	IN	IN	_	21	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	military	_	NN	NN	_	30	poss	_	_
26	's	_	POS	POS	_	25	possessive	_	_
27	decades-old	_	JJ	JJ	_	30	amod	_	_
28	Belgian	_	JJ	JJ	_	30	amod	_	_
29	FAL	_	NN	NN	_	30	nn	_	_
30	rifles	_	NNS	NNS	_	23	pobj	_	_
31	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, a2 / agree-01)
(a / and, op, i / insist-01)
(a2 / agree-01, ARG0, p2 / person)
(a2 / agree-01, ARG1, e2 / essential)
(c / criticize-01, ARG0, p2 / person)
(c / criticize-01, ARG1, p / person)
(c2 / country, name, n3 / name)
(e2 / essential, domain, p3 / purchase-01)
(e2 / essential, purpose, u / update-01)
(i / insist-01, ARG0, p / person)
(n / name, op, "Chavez")
(n2 / name, op, "FAL")
(n3 / name, op, "Belgium")
(p / person, name, n / name)
(p2 / person, location, h / here)
(p2 / person, mod, e / even)
(p2 / person, mod, m / military)
(p2 / person, mod, s / staunch)
(r / retire-01, ARG0, p2 / person)
(r2 / rifle, name, n2 / name)
(r2 / rifle, poss, m4 / military)
(r2 / rifle, source, c2 / country)
(s / staunch, degree, m2 / most)
(t / temporal-quantity, unit, d / decade)
(u / update-01, ARG1, w / weaponry)
(w / weaponry, example, r2 / rifle)
(w / weaponry, mod, o / old)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),rifles,rifle,false), Span(26,27,List(2, 1),decades,(temporal-quantity :unit decade),false), Span(21,22,List(3),such,such,false), Span(20,21,List(4),weaponry,weaponry,false), Span(18,19,List(5),update,update-01,false), Span(16,17,List(6),essential,essential,false), Span(14,15,List(7),purchases,purchase-01,false), Span(11,12,List(8),agree,agree-01,false), Span(7,8,List(9),retired,retire-01,false), Span(2,3,List(10),insisted,insist-01,false)),Map(2 -> decade, 5 -> update-01, 8 -> agree-01, 7 -> purchase-01, 1 -> temporal-quantity, 4 -> weaponry, 6 -> essential, 9 -> retire-01, 0 -> rifle, 10 -> insist-01, 3 -> such),Map(e -> essential, w -> weaponry, t -> temporal-quantity, s -> such, d -> decade, r2 -> retire-01, p -> purchase-01, a -> agree-01, i -> insist-01, r -> rifle, u -> update-01))),[Ljava.lang.String;@792bbc74,Annotation([Ljava.lang.String;@79145d5a,[Ljava.lang.String;@1f2f9244,[Ljava.lang.String;@4c4d27c8),Annotation([Ljava.lang.String;@6821ea29,[Ljava.lang.String;@338494fa,[Ledu.cmu.lti.nlp.amr.Dependency;@505a9d7c),Annotation([Ljava.lang.String;@758c83d8,[Ljava.lang.String;@129b4fe2,[Ljava.lang.String;@5af3a0f),Annotation([Ljava.lang.String;@19ae6bb,[Ljava.lang.String;@10993713,[Ledu.cmu.lti.nlp.amr.Entity;@58359ebd))
AMR:
(a / agree-01, ARG0, r / rifle)
(a / agree-01, ARG1, e / essential)
(e / essential, domain, u / update-01)
(i / insist-01, ARG1, r2 / retire-01)
(p / purchase-01, ARG1, t / temporal-quantity)
(r2 / retire-01, ARG1, a / agree-01)
(s / such, mod, w / weaponry)
(t / temporal-quantity, unit, d / decade)
(u / update-01, ARG0, p / purchase-01)
(u / update-01, ARG1, w / weaponry)

Decoded in 340,246 microseconds
Sentence: Retired General Fernando OCHOA ANTICH said that it is an exaggeration to say Chavez is engaged in an arms buildup.

NER Entity: (person :name (name :op "Fernando" :op "OCHOA" :op "ANTICH"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 19-20:  buildup => build-05
Span 15-16:  engaged => engage-01
Span 2-5:  Fernando OCHOA ANTICH => (person :name (name :op "Fernando" :op "OCHOA" :op "ANTICH"))
Span 0-1:  Retired => retire-01
Span 5-6:  said => say-01
Span 12-13:  say => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 18-19:  arms => arm
Oracle Span 19-20:  buildup => build-05
Oracle Span 13-14:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 15-16:  engaged => engage-01
Oracle Span 10-11:  exaggeration => exaggerate-01
Oracle Span 2-5:  Fernando OCHOA ANTICH => (person :name (name :op "Antich" :op "Ochoa" :op "Fernando"))
Oracle Span 1-2:  General => (have-org-role-91 :ARG2 general)
Oracle Span 0-1:  Retired => retire-01
Oracle Span 5-6:  said => say-01
Oracle Span 12-13:  say => say-01

Incorrect span: Fernando OCHOA ANTICH => (person :name (name :op "Fernando" :op "OCHOA" :op "ANTICH"))
Missing span: Fernando OCHOA ANTICH => (person :name (name :op "Antich" :op "Ochoa" :op "Fernando"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: arms => arm
Missing span: General => (have-org-role-91 :ARG2 general)
Missing span: exaggeration => exaggerate-01
Dependencies:
1	Retired	_	NNP	NNP	_	5	nn	_	_
2	General	_	NNP	NNP	_	5	nn	_	_
3	Fernando	_	NNP	NNP	_	5	nn	_	_
4	OCHOA	_	NNP	NNP	_	5	nn	_	_
5	ANTICH	_	NNP	NNP	_	6	nsubj	_	_
6	said	_	VBD	VBD	_	0	root	_	_
7	that	_	IN	IN	_	11	mark	_	_
8	it	_	PRP	PRP	_	11	nsubj	_	_
9	is	_	VBZ	VBZ	_	11	cop	_	_
10	an	_	DT	DT	_	11	det	_	_
11	exaggeration	_	NN	NN	_	6	ccomp	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	say	_	VB	VB	_	11	vmod	_	_
14	Chavez	_	NNP	NNP	_	16	nsubjpass	_	_
15	is	_	VBZ	VBZ	_	16	auxpass	_	_
16	engaged	_	VBN	VBN	_	13	ccomp	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	an	_	DT	DT	_	20	det	_	_
19	arms	_	NNS	NNS	_	20	nn	_	_
20	buildup	_	NN	NN	_	17	pobj	_	_
21	.	_	.	.	_	6	punct	_	_

Oracle:
(b / build-05, ARG1, a / arm)
(e / exaggerate-01, ARG1, s2 / say-01)
(e2 / engage-01, ARG1, p / person)
(e2 / engage-01, ARG2, b / build-05)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, g / general)
(n / name, op, "Antich")
(n / name, op, "Fernando")
(n / name, op, "Ochoa")
(n2 / name, op, "Chavez")
(p / person, name, n2 / name)
(p2 / person, name, n / name)
(r / retire-01, ARG0, p2 / person)
(r / retire-01, ARG1, g / general)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, e / exaggerate-01)
(s2 / say-01, ARG1, e2 / engage-01)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),buildup,build-05,false), Span(15,16,List(1),engaged,engage-01,false), Span(12,13,List(2),say,say-01,false), Span(5,6,List(3),said,say-01,false), Span(2,5,List(8, 7, 6, 5, 4),Fernando OCHOA ANTICH,(person :name (name :op "Fernando" :op "OCHOA" :op "ANTICH")),false), Span(0,1,List(9),Retired,retire-01,false)),Map(2 -> say-01, 5 -> name, 8 -> "ANTICH", 7 -> "OCHOA", 1 -> engage-01, 4 -> person, 6 -> "Fernando", 9 -> retire-01, 0 -> build-05, 3 -> say-01),Map(n -> name, e -> engage-01, s2 -> say-01, b -> build-05, s -> say-01, p -> person, r -> retire-01))),[Ljava.lang.String;@24b6b8f6,Annotation([Ljava.lang.String;@72cf2de5,[Ljava.lang.String;@2bb7bd00,[Ljava.lang.String;@5f031ebd),Annotation([Ljava.lang.String;@4ee37ca3,[Ljava.lang.String;@45c8d09f,[Ledu.cmu.lti.nlp.amr.Dependency;@53812a9b),Annotation([Ljava.lang.String;@14b030a0,[Ljava.lang.String;@41e350f1,[Ljava.lang.String;@422c3c7a),Annotation([Ljava.lang.String;@18230356,[Ljava.lang.String;@d8305c2,[Ledu.cmu.lti.nlp.amr.Entity;@56bca85b))
AMR:
(e / engage-01, ARG1, p / person)
(e / engage-01, ARG2, b / build-05)
(n / name, op, "ANTICH")
(n / name, op, "Fernando")
(n / name, op, "OCHOA")
(p / person, name, n / name)
(r / retire-01, ARG0, p / person)
(s / say-01, ARG1, e / engage-01)
(s2 / say-01, ARG0, p / person)

Decoded in 68,944 microseconds
Sentence: Ochoa was defense minister in 920000 when then-Lieutenant Colonel Chavez launched a failed coup.

NER Entity: (person :name (name :op "Ochoa"))
mkDayMonthYear(920000,00,00,92)
NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(920000,00,00,92)
Spans:
Span 5-6:  920000 => (date-entity :day 0 :month 0 :year 92)
Span 10-11:  Colonel => (have-org-role-91 :ARG2 colonel)
Span 15-16:  coup => coup
Span 14-15:  failed => fail-01
Span 12-13:  launched => launch-01
Span 3-4:  minister => (have-org-role-91 :ARG2 minister)
Span 7-8:  then => then

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 5-6:  920000 => (date-entity :year 1992)
Oracle Span 11-12:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 10-11:  Colonel => (have-org-role-91 :ARG2 colonel)
Oracle Span 15-16:  coup => coup
Oracle Span 2-3:  defense => defense
Oracle Span 14-15:  failed => fail-01
Oracle Span 12-13:  launched => launch-01
Oracle Span 9-10:  Lieutenant => lieutenant
Oracle Span 3-4:  minister => (have-org-role-91 :ARG2 minister)
Oracle Span 0-1:  Ochoa => (person :name (name :op "Ochoa"))
Oracle Span 7-8:  then => then

Incorrect span: 920000 => (date-entity :day 0 :month 0 :year 92)
Missing span: Ochoa => (person :name (name :op "Ochoa"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: 920000 => (date-entity :year 1992)
Missing span: defense => defense
Missing span: Lieutenant => lieutenant
Dependencies:
1	Ochoa	_	NNP	NNP	_	4	nsubj	_	_
2	was	_	VBD	VBD	_	4	cop	_	_
3	defense	_	NN	NN	_	4	nn	_	_
4	minister	_	NN	NN	_	0	root	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	920000	_	CD	CD	_	5	pobj	_	_
7	when	_	WRB	WRB	_	11	advmod	_	_
8	then-Lieutenant	_	JJ	JJ	_	10	amod	_	_
9	Colonel	_	NNP	NNP	_	10	nn	_	_
10	Chavez	_	NNP	NNP	_	11	nsubj	_	_
11	launched	_	VBD	VBD	_	4	rcmod	_	_
12	a	_	DT	DT	_	14	det	_	_
13	failed	_	VBN	VBN	_	14	amod	_	_
14	coup	_	NN	NN	_	11	dobj	_	_
15	.	_	.	.	_	4	punct	_	_

Oracle:
(c / colonel, mod, l2 / lieutenant)
(d / date-entity, year, 1992)
(f / fail-01, ARG1, c2 / coup)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, m / minister)
(h / have-org-role-91, time, d / date-entity)
(h / have-org-role-91, time, l / launch-01)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG2, c / colonel)
(h2 / have-org-role-91, time, t / then)
(l / launch-01, ARG0, p2 / person)
(l / launch-01, ARG1, c2 / coup)
(m / minister, mod, d2 / defense)
(n / name, op, "Ochoa")
(n2 / name, op, "Chavez")
(p / person, name, n / name)
(p2 / person, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),coup,coup,false), Span(14,15,List(1),failed,fail-01,false), Span(12,13,List(2),launched,launch-01,false), Span(10,11,List(4, 3),Colonel,(have-org-role-91 :ARG2 colonel),false), Span(7,8,List(5),then,then,false), Span(5,6,List(9, 8, 7, 6),920000,(date-entity :day 0 :month 0 :year 92),false), Span(3,4,List(11, 10),minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> launch-01, 5 -> then, 8 -> 0, 7 -> 0, 1 -> fail-01, 11 -> minister, 4 -> colonel, 6 -> date-entity, 9 -> 92, 0 -> coup, 10 -> have-org-role-91, 3 -> have-org-role-91),Map(h -> have-org-role-91, h2 -> have-org-role-91, t -> then, m -> minister, d -> date-entity, 02 -> 0, l -> launch-01, c -> coup, 9 -> 92, 0 -> 0, f -> fail-01, c2 -> colonel))),[Ljava.lang.String;@75d0911a,Annotation([Ljava.lang.String;@75e91545,[Ljava.lang.String;@60d1a32f,[Ljava.lang.String;@531c311e),Annotation([Ljava.lang.String;@22b53226,[Ljava.lang.String;@1fcb4808,[Ledu.cmu.lti.nlp.amr.Dependency;@726e5805),Annotation([Ljava.lang.String;@40c80397,[Ljava.lang.String;@4b672daa,[Ljava.lang.String;@ea9b7c6),Annotation([Ljava.lang.String;@e077866,[Ljava.lang.String;@ed3068a,[Ledu.cmu.lti.nlp.amr.Entity;@7c2b6087))
AMR:
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 9 / 92)
(f / fail-01, ARG0, d / date-entity)
(f / fail-01, ARG1, c / coup)
(h / have-org-role-91, ARG1, l / launch-01)
(h / have-org-role-91, ARG2, c2 / colonel)
(h / have-org-role-91, time, t / then)
(h2 / have-org-role-91, ARG1, l / launch-01)
(h2 / have-org-role-91, ARG2, m / minister)
(l / launch-01, ARG1, c / coup)

Decoded in 123,807 microseconds
Sentence: Ochoa stated that Venezuela hasn't purchased arms in 25 years and said and Chavez is not aggressively buying weapons in a way that would threaten his neighbors.

NER Entity: (person :name (name :op "Ochoa"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 17-18:  aggressively => aggressive
Span 18-19:  buying => buy-01
Span 27-28:  neighbors => neighbor
Span 6-7:  purchased => purchase-01
Span 12-13:  said => say-01
Span 25-26:  threaten => threaten-01
Span 3-4:  Venezuela => (country :name (name :op "Venezuela"))
Span 22-23:  way => way
Span 10-11:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  25 => 25
Oracle Span 17-18:  aggressively => aggressive
Oracle Span 11-12:  and => and
Oracle Span 7-8:  arms => arm
Oracle Span 18-19:  buying => buy-01
Oracle Span 14-15:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 27-28:  neighbors => neighbor
Oracle Span 0-1:  Ochoa => (person :name (name :op "Ochoa"))
Oracle Span 6-7:  purchased => purchase-01
Oracle Span 12-13:  said => say-01
Oracle Span 1-2:  stated => state-01
Oracle Span 25-26:  threaten => threaten-01
Oracle Span 3-4:  Venezuela => (country :name (name :op "Venezuela"))
Oracle Span 19-20:  weapons => weapon
Oracle Span 10-11:  years => (temporal-quantity :unit year)

Extra span: way => way
Missing span: Ochoa => (person :name (name :op "Ochoa"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: and => and
Missing span: weapons => weapon
Missing span: stated => state-01
Missing span: 25 => 25
Missing span: arms => arm
Dependencies:
1	Ochoa	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	Venezuela	_	NNP	NNP	_	7	nsubj	_	_
5	has	_	VBZ	VBZ	_	7	aux	_	_
6	n't	_	RB	RB	_	7	neg	_	_
7	purchased	_	VBN	VBN	_	2	ccomp	_	_
8	arms	_	NNS	NNS	_	7	dobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	25	_	CD	CD	_	11	num	_	_
11	years	_	NNS	NNS	_	9	pobj	_	_
12	and	_	CC	CC	_	7	cc	_	_
13	said	_	VBD	VBD	_	7	conj	_	_
14	and	_	CC	CC	_	2	cc	_	_
15	Chavez	_	NNP	NNP	_	19	nsubj	_	_
16	is	_	VBZ	VBZ	_	19	aux	_	_
17	not	_	RB	RB	_	19	neg	_	_
18	aggressively	_	RB	RB	_	19	advmod	_	_
19	buying	_	VBG	VBG	_	2	conj	_	_
20	weapons	_	NNS	NNS	_	19	dobj	_	_
21	in	_	IN	IN	_	19	prep	_	_
22	a	_	DT	DT	_	23	det	_	_
23	way	_	NN	NN	_	21	pobj	_	_
24	that	_	WDT	WDT	_	26	nsubj	_	_
25	would	_	MD	MD	_	26	aux	_	_
26	threaten	_	VB	VB	_	23	rcmod	_	_
27	his	_	PRP$	PRP$	_	28	poss	_	_
28	neighbors	_	NNS	NNS	_	26	dobj	_	_
29	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, s / state-01)
(a / and, op, s2 / say-01)
(b / buy-01, ARG0, p3 / person)
(b / buy-01, ARG1, w / weapon)
(b / buy-01, manner, a3 / aggressive)
(b / buy-01, manner, t2 / threaten-01)
(c / country, name, n2 / name)
(n / name, op, "Ochoa")
(n2 / name, op, "Venezuela")
(n3 / name, op, "Chavez")
(n4 / neighbor, poss, p3 / person)
(p / person, name, n / name)
(p2 / purchase-01, ARG0, c / country)
(p2 / purchase-01, ARG1, a2 / arm)
(p3 / person, name, n3 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, p2 / purchase-01)
(s2 / say-01, ARG0, p / person)
(s2 / say-01, ARG1, b / buy-01)
(t / temporal-quantity, quant, 2 / 25)
(t / temporal-quantity, unit, y / year)
(t2 / threaten-01, ARG2, n4 / neighbor)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),neighbors,neighbor,false), Span(25,26,List(1),threaten,threaten-01,false), Span(22,23,List(2),way,way,false), Span(18,19,List(3),buying,buy-01,false), Span(17,18,List(4),aggressively,aggressive,false), Span(12,13,List(5),said,say-01,false), Span(10,11,List(7, 6),years,(temporal-quantity :unit year),false), Span(6,7,List(8),purchased,purchase-01,false), Span(3,4,List(11, 10, 9),Venezuela,(country :name (name :op "Venezuela")),false)),Map(2 -> way, 5 -> say-01, 8 -> purchase-01, 7 -> year, 1 -> threaten-01, 11 -> "Venezuela", 4 -> aggressive, 6 -> temporal-quantity, 9 -> country, 0 -> neighbor, 10 -> name, 3 -> buy-01),Map(w -> way, n -> neighbor, b -> buy-01, t -> threaten-01, s -> say-01, p -> purchase-01, y -> year, a -> aggressive, t2 -> temporal-quantity, c -> country, n2 -> name))),[Ljava.lang.String;@3fffff43,Annotation([Ljava.lang.String;@a8e6492,[Ljava.lang.String;@1c7fd41f,[Ljava.lang.String;@3b77a04f),Annotation([Ljava.lang.String;@7b324585,[Ljava.lang.String;@2e11485,[Ledu.cmu.lti.nlp.amr.Dependency;@60dce7ea),Annotation([Ljava.lang.String;@662f5666,[Ljava.lang.String;@fd8294b,[Ljava.lang.String;@5974109),Annotation([Ljava.lang.String;@27305e6,[Ljava.lang.String;@1ef3efa8,[Ledu.cmu.lti.nlp.amr.Entity;@502f1f4c))
AMR:
(b / buy-01, ARG0, c / country)
(b / buy-01, ARG2, w / way)
(b / buy-01, manner, a / aggressive)
(c / country, name, n2 / name)
(n2 / name, op, "Venezuela")
(p / purchase-01, ARG0, c / country)
(s / say-01, ARG0, c / country)
(s / say-01, ARG1, t2 / temporal-quantity)
(t / threaten-01, ARG0, w / way)
(t / threaten-01, ARG1, n / neighbor)
(t2 / temporal-quantity, unit, y / year)

Decoded in 130,124 microseconds
Sentence: Ochoa said Venezuela has never bought Russian arms before and suggested Chavez is doing it to become independent from the US.

NER Entity: (person :name (name :op "Ochoa"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 16-17:  become => become-01
Span 8-9:  before => before
Span 5-6:  bought => buy-01
Span 1-2:  said => say-01
Span 10-11:  suggested => suggest-01
Span 2-3:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 7-8:  arms => arm
Oracle Span 16-17:  become => become-01
Oracle Span 8-9:  before => before
Oracle Span 5-6:  bought => buy-01
Oracle Span 11-12:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 17-18:  independent => (depend-01 :polarity -)
Oracle Span 0-1:  Ochoa => (person :name (name :op "Ochoa"))
Oracle Span 6-7:  Russian => (country :name (name :op "Russia"))
Oracle Span 1-2:  said => say-01
Oracle Span 10-11:  suggested => suggest-01
Oracle Span 20-21:  US => (country :name (name :op "US"))
Oracle Span 2-3:  Venezuela => (country :name (name :op "Venezuela"))

Missing span: Ochoa => (person :name (name :op "Ochoa"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: US => (country :name (name :op "US"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: and => and
Missing span: arms => arm
Missing span: independent => (depend-01 :polarity -)
Dependencies:
1	Ochoa	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	Venezuela	_	NNP	NNP	_	6	nsubj	_	_
4	has	_	VBZ	VBZ	_	6	aux	_	_
5	never	_	RB	RB	_	6	neg	_	_
6	bought	_	VBN	VBN	_	2	ccomp	_	_
7	Russian	_	JJ	JJ	_	8	amod	_	_
8	arms	_	NNS	NNS	_	6	dobj	_	_
9	before	_	RB	RB	_	6	advmod	_	_
10	and	_	CC	CC	_	6	cc	_	_
11	suggested	_	VBD	VBD	_	6	conj	_	_
12	Chavez	_	NNP	NNP	_	14	nsubj	_	_
13	is	_	VBZ	VBZ	_	14	aux	_	_
14	doing	_	VBG	VBG	_	11	ccomp	_	_
15	it	_	PRP	PRP	_	14	dobj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	become	_	VB	VB	_	14	xcomp	_	_
18	independent	_	JJ	JJ	_	17	acomp	_	_
19	from	_	IN	IN	_	17	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	US	_	NNP	NNP	_	19	pobj	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, s / say-01)
(a / and, op, s2 / suggest-01)
(a2 / arm, source, c2 / country)
(b3 / become-01, ARG1, p2 / person)
(b3 / become-01, ARG2, d2 / depend-01)
(b4 / buy-01, ARG0, p2 / person)
(b4 / buy-01, ARG1, a2 / arm)
(b4 / buy-01, purpose, b3 / become-01)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(d2 / depend-01, ARG0, p2 / person)
(d2 / depend-01, ARG1, c3 / country)
(d2 / depend-01, polarity, -)
(n / name, op, "Ochoa")
(n2 / name, op, "Venezuela")
(n3 / name, op, "Russia")
(n4 / name, op, "Chavez")
(n5 / name, op, "US")
(p / person, name, n / name)
(p2 / person, name, n4 / name)
(s / say-01, ARG0, p / person)
(s2 / suggest-01, ARG0, p / person)
(s2 / suggest-01, ARG1, b4 / buy-01)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),become,become-01,false), Span(10,11,List(1),suggested,suggest-01,false), Span(8,9,List(2),before,before,false), Span(5,6,List(3),bought,buy-01,false), Span(2,3,List(6, 5, 4),Venezuela,(country :name (name :op "Venezuela")),false), Span(1,2,List(7),said,say-01,false)),Map(2 -> before, 5 -> name, 7 -> say-01, 1 -> suggest-01, 4 -> country, 6 -> "Venezuela", 0 -> become-01, 3 -> buy-01),Map(n -> name, b3 -> buy-01, s2 -> say-01, b -> become-01, b2 -> before, s -> suggest-01, c -> country))),[Ljava.lang.String;@6f8f9349,Annotation([Ljava.lang.String;@75c9e76b,[Ljava.lang.String;@7446d8d5,[Ljava.lang.String;@5c3b6c6e),Annotation([Ljava.lang.String;@4fbda97b,[Ljava.lang.String;@75f5fd58,[Ledu.cmu.lti.nlp.amr.Dependency;@37b70343),Annotation([Ljava.lang.String;@306851c7,[Ljava.lang.String;@12bcd0c0,[Ljava.lang.String;@4879f0f2),Annotation([Ljava.lang.String;@47db5fa5,[Ljava.lang.String;@354fc8f0,[Ledu.cmu.lti.nlp.amr.Entity;@41813449))
AMR:
(b / become-01, ARG1, c / country)
(b3 / buy-01, ARG0, c / country)
(b3 / buy-01, mod, b2 / before)
(c / country, name, n / name)
(n / name, op, "Venezuela")
(s / suggest-01, ARG0, c / country)
(s2 / say-01, ARG1, b3 / buy-01)

Decoded in 75,200 microseconds
Sentence: Ochoa asked why Chavez is buying a caliber of rifle which is popular among subversive forces in Latin America and stated that the political support Chavez gives to radical leftist movements makes Chavez a continental menace.

NER Entity: (person :name (name :op "Ochoa"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 5-6:  buying => buy-01
Span 26-27:  gives => give-01
Span 17-19:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Span 28-29:  radical => radical
Span 24-25:  support => support-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 19-20:  and => and
Oracle Span 1-2:  asked => ask-01
Oracle Span 5-6:  buying => buy-01
Oracle Span 7-8:  caliber => caliber
Oracle Span 3-4:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 34-35:  continental => continent
Oracle Span 15-16:  forces => force
Oracle Span 17-19:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Oracle Span 29-30:  leftist => leftist
Oracle Span 31-32:  makes => make-02
Oracle Span 35-36:  menace => menace-01
Oracle Span 30-31:  movements => move-02
Oracle Span 0-1:  Ochoa => (person :name (name :op "Ochoa"))
Oracle Span 23-24:  political => politics
Oracle Span 12-13:  popular => popular-41
Oracle Span 28-29:  radical => radical
Oracle Span 9-10:  rifle => rifle
Oracle Span 20-21:  stated => state-01
Oracle Span 14-15:  subversive => subvert-01
Oracle Span 24-25:  support => support-01

Extra span: gives => give-01
Missing span: Ochoa => (person :name (name :op "Ochoa"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: and => and
Missing span: stated => state-01
Missing span: makes => make-02
Missing span: menace => menace-01
Missing span: leftist => leftist
Missing span: asked => ask-01
Missing span: caliber => caliber
Missing span: popular => popular-41
Missing span: forces => force
Missing span: rifle => rifle
Missing span: continental => continent
Missing span: political => politics
Missing span: movements => move-02
Missing span: subversive => subvert-01
Dependencies:
1	Ochoa	_	NNP	NNP	_	2	nsubj	_	_
2	asked	_	VBD	VBD	_	32	dep	_	_
3	why	_	WRB	WRB	_	6	advmod	_	_
4	Chavez	_	NNP	NNP	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	aux	_	_
6	buying	_	VBG	VBG	_	2	ccomp	_	_
7	a	_	DT	DT	_	8	det	_	_
8	caliber	_	NN	NN	_	6	dobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	rifle	_	NN	NN	_	9	pobj	_	_
11	which	_	WDT	WDT	_	13	nsubj	_	_
12	is	_	VBZ	VBZ	_	13	cop	_	_
13	popular	_	JJ	JJ	_	8	rcmod	_	_
14	among	_	IN	IN	_	13	prep	_	_
15	subversive	_	JJ	JJ	_	16	amod	_	_
16	forces	_	NNS	NNS	_	14	pobj	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	Latin	_	NNP	NNP	_	19	nn	_	_
19	America	_	NNP	NNP	_	17	pobj	_	_
20	and	_	CC	CC	_	2	cc	_	_
21	stated	_	VBD	VBD	_	2	conj	_	_
22	that	_	IN	IN	_	27	mark	_	_
23	the	_	DT	DT	_	26	det	_	_
24	political	_	JJ	JJ	_	26	amod	_	_
25	support	_	NN	NN	_	26	nn	_	_
26	Chavez	_	NN	NN	_	27	nsubj	_	_
27	gives	_	VBZ	VBZ	_	21	ccomp	_	_
28	to	_	TO	TO	_	27	prep	_	_
29	radical	_	JJ	JJ	_	31	amod	_	_
30	leftist	_	JJ	JJ	_	31	amod	_	_
31	movements	_	NNS	NNS	_	28	pobj	_	_
32	makes	_	VBZ	VBZ	_	0	root	_	_
33	Chavez	_	NNP	NNP	_	32	dobj	_	_
34	a	_	DT	DT	_	36	det	_	_
35	continental	_	JJ	JJ	_	36	amod	_	_
36	menace	_	NN	NN	_	32	nsubj	_	_
37	.	_	.	.	_	32	punct	_	_

Oracle:
(a / and, op, a2 / ask-01)
(a / and, op, s / state-01)
(a2 / ask-01, ARG0, p / person)
(b / buy-01, ARG0, p2 / person)
(b / buy-01, ARG1, c2 / caliber)
(c2 / caliber, mod, r / rifle)
(f / force, location, w / world-region)
(m / move-02, mod, l / leftist)
(m / move-02, mod, r2 / radical)
(m2 / make-02, ARG0, s3 / support-01)
(m2 / make-02, ARG1, m3 / menace-01)
(m3 / menace-01, ARG0, p2 / person)
(m3 / menace-01, mod, c3 / continent)
(n / name, op, "Ochoa")
(n2 / name, op, "Chavez")
(n3 / name, op, "America")
(n3 / name, op, "Latin")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / popular-41, ARG1, c2 / caliber)
(p3 / popular-41, ARG2, f / force)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, m2 / make-02)
(s2 / subvert-01, ARG0, f / force)
(s3 / support-01, ARG0, p2 / person)
(s3 / support-01, ARG1, m / move-02)
(s3 / support-01, mod, p4 / politics)
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),radical,radical,false), Span(26,27,List(1),gives,give-01,false), Span(24,25,List(2),support,support-01,false), Span(17,19,List(6, 5, 4, 3),Latin America,(world-region :name (name :op "America" :op "Latin")),false), Span(5,6,List(7),buying,buy-01,false)),Map(2 -> support-01, 5 -> "America", 7 -> buy-01, 1 -> give-01, 4 -> name, 6 -> "Latin", 0 -> radical, 3 -> world-region),Map(n -> name, w -> world-region, b -> buy-01, s -> support-01, g -> give-01, r -> radical))),[Ljava.lang.String;@4678a2eb,Annotation([Ljava.lang.String;@5b43fbf6,[Ljava.lang.String;@1080b026,[Ljava.lang.String;@58ebfd03),Annotation([Ljava.lang.String;@5b07730f,[Ljava.lang.String;@1fdfafd2,[Ledu.cmu.lti.nlp.amr.Dependency;@a4b2d8f),Annotation([Ljava.lang.String;@dcfda20,[Ljava.lang.String;@6d304f9d,[Ljava.lang.String;@f73dcd6),Annotation([Ljava.lang.String;@5c87bfe2,[Ljava.lang.String;@2fea7088,[Ledu.cmu.lti.nlp.amr.Entity;@40499e4f))
AMR:
(b / buy-01, ARG1, g / give-01)
(g / give-01, ARG0, w / world-region)
(g / give-01, ARG1, r / radical)
(n / name, op, "America")
(n / name, op, "Latin")
(s / support-01, ARG1, g / give-01)
(w / world-region, name, n / name)

Decoded in 182,642 microseconds
Sentence: The US Pentagon has openly questioned what Chavez will do with the old FAL rifles and whether Chavez might share weapons or ammunition with guerrilla forces in Latin America.

NER Entity: (country :name (name :op "US" :op "Pentagon"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (organization :name (name :op "FAL"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Latin" :op "America"))
Spans:
Span 22-23:  ammunition => ammunition
Span 24-25:  guerrilla => guerrilla
Span 27-29:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Span 4-5:  openly => open
Span 21-22:  or => or
Span 5-6:  questioned => question-01
Span 14-15:  rifles => rifle
Span 19-20:  share => share-01
Span 1-3:  US Pentagon => (country :name (name :op "US" :op "Pentagon"))

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 22-23:  ammunition => ammunition
Oracle Span 15-16:  and => and
Oracle Span 7-8:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 9-10:  do => (thing :ARG1-of do-02)
Oracle Span 13-14:  FAL => (name :op "FAL")
Oracle Span 25-26:  forces => force
Oracle Span 24-25:  guerrilla => guerrilla
Oracle Span 27-29:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Oracle Span 12-13:  old => old
Oracle Span 4-5:  openly => open
Oracle Span 21-22:  or => or
Oracle Span 2-3:  Pentagon => (government-organization :name (name :op "Pentagon"))
Oracle Span 5-6:  questioned => question-01
Oracle Span 14-15:  rifles => rifle
Oracle Span 19-20:  share => share-01
Oracle Span 1-2:  US => (country :name (name :op "US"))
Oracle Span 20-21:  weapons => weapon

Extra span: US Pentagon => (country :name (name :op "US" :op "Pentagon"))
Missing span: Pentagon => (government-organization :name (name :op "Pentagon"))
Missing span: US => (country :name (name :op "US"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: FAL => (name :op "FAL")
Missing span: and => and
Missing span: forces => force
Missing span: weapons => weapon
Missing span: do => (thing :ARG1-of do-02)
Missing span: old => old
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	US	_	NNP	NNP	_	3	nn	_	_
3	Pentagon	_	NNP	NNP	_	6	nsubj	_	_
4	has	_	VBZ	VBZ	_	6	aux	_	_
5	openly	_	RB	RB	_	6	advmod	_	_
6	questioned	_	VBN	VBN	_	0	root	_	_
7	what	_	WP	WP	_	10	dobj	_	_
8	Chavez	_	NNP	NNP	_	10	nsubj	_	_
9	will	_	MD	MD	_	10	aux	_	_
10	do	_	VB	VB	_	6	ccomp	_	_
11	with	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	15	det	_	_
13	old	_	JJ	JJ	_	15	amod	_	_
14	FAL	_	NNP	NNP	_	15	nn	_	_
15	rifles	_	NNS	NNS	_	11	pobj	_	_
16	and	_	CC	CC	_	10	cc	_	_
17	whether	_	IN	IN	_	20	mark	_	_
18	Chavez	_	NNP	NNP	_	20	nsubj	_	_
19	might	_	MD	MD	_	20	aux	_	_
20	share	_	VB	VB	_	10	conj	_	_
21	weapons	_	NNS	NNS	_	20	dobj	_	_
22	or	_	CC	CC	_	21	cc	_	_
23	ammunition	_	NN	NN	_	21	conj	_	_
24	with	_	IN	IN	_	20	prep	_	_
25	guerrilla	_	NN	NN	_	26	nn	_	_
26	forces	_	NNS	NNS	_	24	pobj	_	_
27	in	_	IN	IN	_	26	prep	_	_
28	Latin	_	NNP	NNP	_	29	nn	_	_
29	America	_	NNP	NNP	_	27	pobj	_	_
30	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, s / share-01)
(a / and, op, t / thing)
(c / country, name, n2 / name)
(d / do-02, ARG0, p / person)
(d / do-02, ARG1, t / thing)
(d / do-02, ARG2, r / rifle)
(f / force, location, w2 / world-region)
(f / force, mod, g2 / guerrilla)
(g / government-organization, mod, c / country)
(g / government-organization, name, n / name)
(n / name, op, "Pentagon")
(n2 / name, op, "US")
(n3 / name, op, "Chavez")
(n4 / name, op, "FAL")
(n5 / name, op, "America")
(n5 / name, op, "Latin")
(o2 / or, op, a2 / ammunition)
(o2 / or, op, w / weapon)
(p / person, name, n3 / name)
(q / question-01, ARG0, g / government-organization)
(q / question-01, ARG1, a / and)
(q / question-01, manner, o3 / open)
(r / rifle, mod, o / old)
(r / rifle, name, n4 / name)
(s / share-01, ARG0, p / person)
(s / share-01, ARG1, o2 / or)
(s / share-01, ARG2, f / force)
(w2 / world-region, name, n5 / name)

Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(3, 2, 1, 0),Latin America,(world-region :name (name :op "America" :op "Latin")),false), Span(24,25,List(4),guerrilla,guerrilla,false), Span(22,23,List(5),ammunition,ammunition,false), Span(21,22,List(6),or,or,false), Span(19,20,List(7),share,share-01,false), Span(14,15,List(8),rifles,rifle,false), Span(5,6,List(9),questioned,question-01,false), Span(4,5,List(10),openly,open,false), Span(1,3,List(14, 13, 12, 11),US Pentagon,(country :name (name :op "US" :op "Pentagon")),false)),Map(2 -> "America", 5 -> ammunition, 12 -> name, 8 -> rifle, 7 -> share-01, 1 -> name, 4 -> guerrilla, 11 -> country, 14 -> "Pentagon", 6 -> or, 0 -> world-region, 9 -> question-01, 3 -> "Latin", 10 -> open, 13 -> "US"),Map(n -> name, w -> world-region, q -> question-01, s -> share-01, g -> guerrilla, a -> ammunition, o2 -> open, r -> rifle, c -> country, o -> or, n2 -> name))),[Ljava.lang.String;@51cd7ffc,Annotation([Ljava.lang.String;@30d4b288,[Ljava.lang.String;@4cc6fa2a,[Ljava.lang.String;@40f1be1b),Annotation([Ljava.lang.String;@7a791b66,[Ljava.lang.String;@6f2cb653,[Ledu.cmu.lti.nlp.amr.Dependency;@14c01636),Annotation([Ljava.lang.String;@590c73d3,[Ljava.lang.String;@6b9ce1bf,[Ljava.lang.String;@61884cb1),Annotation([Ljava.lang.String;@75ed9710,[Ljava.lang.String;@4fc5e095,[Ledu.cmu.lti.nlp.amr.Entity;@435871cb))
AMR:
(a / ammunition, location, g / guerrilla)
(a / ammunition, topic, w / world-region)
(c / country, name, n2 / name)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "Pentagon")
(n2 / name, op, "US")
(o / or, op, a / ammunition)
(q / question-01, ARG0, c / country)
(q / question-01, ARG1, r / rifle)
(q / question-01, manner, o2 / open)
(s / share-01, ARG0, c / country)
(s / share-01, ARG1, o / or)
(w / world-region, name, n / name)

Decoded in 163,625 microseconds
Sentence: The US government has provided no evidence of Chavez arming or funding leftist insurgencies.

NER Entity: (country :name (name :op "The" :op "US"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 9-10:  arming => arm-01
Span 6-7:  evidence => (thing :ARG0-of evidence-01)
Span 11-12:  funding => fund-01
Span 5-6:  no => -
Span 10-11:  or => or
Span 4-5:  provided => provide-01
Span 0-2:  The US => (country :name (name :op "The" :op "US"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 9-10:  arming => arm-01
Oracle Span 8-9:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 6-7:  evidence => (thing :ARG0-of evidence-01)
Oracle Span 11-12:  funding => fund-01
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 13-14:  insurgencies => insurgency
Oracle Span 12-13:  leftist => leftist
Oracle Span 5-6:  no => -
Oracle Span 10-11:  or => or
Oracle Span 4-5:  provided => provide-01
Oracle Span 1-2:  US => (country :name (name :op "US"))

Extra span: The US => (country :name (name :op "The" :op "US"))
Missing span: US => (country :name (name :op "US"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: insurgencies => insurgency
Missing span: leftist => leftist
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	US	_	NNP	NNP	_	3	nn	_	_
3	government	_	NN	NN	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	provided	_	VBN	VBN	_	0	root	_	_
6	no	_	DT	DT	_	7	neg	_	_
7	evidence	_	NN	NN	_	5	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	Chavez	_	NNP	NNP	_	8	pobj	_	_
10	arming	_	VBG	VBG	_	5	xcomp	_	_
11	or	_	CC	CC	_	10	cc	_	_
12	funding	_	VBG	VBG	_	10	conj	_	_
13	leftist	_	JJ	JJ	_	14	amod	_	_
14	insurgencies	_	NNS	NNS	_	10	dobj	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(a / arm-01, ARG0, p2 / person)
(a / arm-01, ARG1, i / insurgency)
(c / country, name, n / name)
(e / evidence-01, ARG0, t / thing)
(e / evidence-01, ARG1, o / or)
(f / fund-01, ARG0, p2 / person)
(f / fund-01, ARG1, i / insurgency)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / insurgency, mod, l / leftist)
(n / name, op, "US")
(n2 / name, op, "Chavez")
(o / or, op, a / arm-01)
(o / or, op, f / fund-01)
(p / provide-01, ARG0, g / government-organization)
(p / provide-01, ARG1, t / thing)
(p2 / person, name, n2 / name)
(t / thing, polarity, - / -)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),funding,fund-01,false), Span(10,11,List(1),or,or,false), Span(9,10,List(2),arming,arm-01,false), Span(6,7,List(4, 3),evidence,(thing :ARG0-of evidence-01),false), Span(5,6,List(5),no,-,false), Span(4,5,List(6),provided,provide-01,false), Span(0,2,List(10, 9, 8, 7),The US,(country :name (name :op "The" :op "US")),false)),Map(2 -> arm-01, 5 -> -, 8 -> name, 7 -> country, 1 -> or, 4 -> evidence-01, 6 -> provide-01, 9 -> "The", 0 -> fund-01, 10 -> "US", 3 -> thing),Map(n -> name, e -> evidence-01, t -> thing, p -> provide-01, a -> arm-01, - -> -, c -> country, o -> or, f -> fund-01))),[Ljava.lang.String;@609640d5,Annotation([Ljava.lang.String;@79da1ec0,[Ljava.lang.String;@19fb8826,[Ljava.lang.String;@192d74fb),Annotation([Ljava.lang.String;@4bef0fe3,[Ljava.lang.String;@62ea3440,[Ledu.cmu.lti.nlp.amr.Dependency;@27953a83),Annotation([Ljava.lang.String;@556d0826,[Ljava.lang.String;@66ce957f,[Ljava.lang.String;@55b5f5d2),Annotation([Ljava.lang.String;@5bfa8cc5,[Ljava.lang.String;@666b83a4,[Ledu.cmu.lti.nlp.amr.Entity;@749c877b))
AMR:
(c / country, name, n / name)
(e / evidence-01, ARG0, t / thing)
(f / fund-01, ARG0, c / country)
(n / name, op, "The")
(n / name, op, "US")
(o / or, op, a / arm-01)
(o / or, op, f / fund-01)
(p / provide-01, ARG0, o / or)
(p / provide-01, ARG1, t / thing)
(p / provide-01, polarity, - / -)

Decoded in 185,741 microseconds
Sentence: Military analysts and specialists on the Colombian FARC guerrillas say the rebels have plenty of money for weapons from drug trafficking and would not be interested in old Belgian rifles or in assistance from Chavez.

NER Entity: (thing :name (name :op "Colombian"))
NER Entity: (organization :name (name :op "FARC"))
NER Entity: (thing :name (name :op "Belgian"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 1-2:  analysts => (person :ARG0-of analyze-01)
Span 32-33:  assistance => assist-01
Span 19-20:  drug => drug
Span 8-9:  guerrillas => guerrilla
Span 25-26:  interested => interest-01
Span 0-1:  Military => military
Span 15-16:  money => money
Span 30-31:  or => or
Span 13-14:  plenty => plenty
Span 29-30:  rifles => rifle
Span 9-10:  say => say-01
Span 3-4:  specialists => (person :ARG0-of specialize-01)

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 1-2:  analysts => analyze-01
Oracle Span 2-3:  and => and
Oracle Span 21-22:  and => and
Oracle Span 32-33:  assistance => assist-01
Oracle Span 28-29:  Belgian => (country :name (name :op "Belgium"))
Oracle Span 34-35:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 6-7:  Colombian => (country :name (name :op "Colombia"))
Oracle Span 19-20:  drug => drug
Oracle Span 7-8:  FARC => (criminal-organization :name (name :op "FARC"))
Oracle Span 8-9:  guerrillas => (have-org-role-91 :ARG2 guerrilla)
Oracle Span 12-13:  have => have-03
Oracle Span 25-26:  interested => interest-01
Oracle Span 0-1:  Military => (have-org-role-91 :ARG1 military)
Oracle Span 15-16:  money => money
Oracle Span 27-28:  old => old
Oracle Span 30-31:  or => or
Oracle Span 13-14:  plenty => plenty
Oracle Span 11-12:  rebels => (person :ARG0-of rebel-01)
Oracle Span 29-30:  rifles => rifle
Oracle Span 9-10:  say => say-01
Oracle Span 3-4:  specialists => specialize-01
Oracle Span 20-21:  trafficking => traffic-00
Oracle Span 17-18:  weapons => weapon

Incorrect span: guerrillas => guerrilla
Incorrect span: specialists => (person :ARG0-of specialize-01)
Incorrect span: analysts => (person :ARG0-of analyze-01)
Incorrect span: Military => military
Missing span: FARC => (criminal-organization :name (name :op "FARC"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: Colombian => (country :name (name :op "Colombia"))
Missing span: Belgian => (country :name (name :op "Belgium"))
Missing span: and => and
Missing span: old => old
Missing span: have => have-03
Missing span: trafficking => traffic-00
Missing span: weapons => weapon
Missing span: rebels => (person :ARG0-of rebel-01)
Missing span: and => and
Missing span: Military => (have-org-role-91 :ARG1 military)
Missing span: guerrillas => (have-org-role-91 :ARG2 guerrilla)
Missing span: specialists => specialize-01
Missing span: analysts => analyze-01
Dependencies:
1	Military	_	JJ	JJ	_	2	amod	_	_
2	analysts	_	NNS	NNS	_	10	nsubj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	specialists	_	NNS	NNS	_	2	conj	_	_
5	on	_	IN	IN	_	2	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	Colombian	_	JJ	JJ	_	9	amod	_	_
8	FARC	_	CD	CD	_	9	num	_	_
9	guerrillas	_	NNS	NNS	_	5	pobj	_	_
10	say	_	VBP	VBP	_	0	root	_	_
11	the	_	DT	DT	_	12	det	_	_
12	rebels	_	NNS	NNS	_	13	nsubj	_	_
13	have	_	VBP	VBP	_	10	ccomp	_	_
14	plenty	_	RB	RB	_	13	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	money	_	NN	NN	_	15	pobj	_	_
17	for	_	IN	IN	_	13	prep	_	_
18	weapons	_	NNS	NNS	_	17	pobj	_	_
19	from	_	IN	IN	_	18	prep	_	_
20	drug	_	NN	NN	_	21	nn	_	_
21	trafficking	_	NN	NN	_	19	pobj	_	_
22	and	_	CC	CC	_	13	cc	_	_
23	would	_	MD	MD	_	26	aux	_	_
24	not	_	RB	RB	_	26	neg	_	_
25	be	_	VB	VB	_	26	auxpass	_	_
26	interested	_	VBN	VBN	_	13	conj	_	_
27	in	_	IN	IN	_	26	prep	_	_
28	old	_	JJ	JJ	_	30	amod	_	_
29	Belgian	_	JJ	JJ	_	30	amod	_	_
30	rifles	_	NNS	NNS	_	27	pobj	_	_
31	or	_	CC	CC	_	27	cc	_	_
32	in	_	IN	IN	_	27	conj	_	_
33	assistance	_	NN	NN	_	32	pobj	_	_
34	from	_	IN	IN	_	26	prep	_	_
35	Chavez	_	NNP	NNP	_	34	pobj	_	_
36	.	_	.	.	_	10	punct	_	_

Oracle:
(a3 / and, op, h / have-03)
(a3 / and, op, i / interest-01)
(a4 / assist-01, ARG0, p5 / person)
(a4 / assist-01, ARG1, p3 / person)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / criminal-organization, mod, c / country)
(c3 / criminal-organization, name, n / name)
(h / have-03, ARG0, p3 / person)
(h / have-03, ARG1, m2 / money)
(h2 / have-org-role-91, ARG1, m3 / military)
(h2 / have-org-role-91, ARG3, a2 / analyze-01)
(h4 / have-org-role-91, ARG1, c3 / criminal-organization)
(h4 / have-org-role-91, ARG2, g2 / guerrilla)
(i / interest-01, ARG0, p3 / person)
(i / interest-01, ARG1, o / or)
(m2 / money, purpose, w / weapon)
(m2 / money, quant, p4 / plenty)
(m2 / money, source, t / traffic-00)
(n / name, op, "FARC")
(n2 / name, op, "Colombia")
(n3 / name, op, "Belgium")
(n4 / name, op, "Chavez")
(o / or, op, a4 / assist-01)
(o / or, op, r2 / rifle)
(p5 / person, name, n4 / name)
(r / rebel-01, ARG0, p3 / person)
(r2 / rifle, mod, o2 / old)
(r2 / rifle, source, c2 / country)
(s / say-01, ARG0, a / and)
(s / say-01, ARG1, a3 / and)
(t / traffic-00, ARG1, d / drug)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),assistance,assist-01,false), Span(30,31,List(1),or,or,false), Span(29,30,List(2),rifles,rifle,false), Span(25,26,List(3),interested,interest-01,false), Span(19,20,List(4),drug,drug,false), Span(15,16,List(5),money,money,false), Span(13,14,List(6),plenty,plenty,false), Span(9,10,List(7),say,say-01,false), Span(8,9,List(8),guerrillas,guerrilla,false), Span(3,4,List(10, 9),specialists,(person :ARG0-of specialize-01),false), Span(1,2,List(12, 11),analysts,(person :ARG0-of analyze-01),false), Span(0,1,List(13),Military,military,false)),Map(2 -> rifle, 5 -> money, 12 -> analyze-01, 8 -> guerrilla, 7 -> say-01, 1 -> or, 4 -> drug, 11 -> person, 6 -> plenty, 0 -> assist-01, 9 -> person, 3 -> interest-01, 10 -> specialize-01, 13 -> military),Map(s2 -> specialize-01, m2 -> military, p2 -> person, s -> say-01, d -> drug, m -> money, p -> plenty, g -> guerrilla, a -> assist-01, r -> rifle, i -> interest-01, a2 -> analyze-01, o -> or, p3 -> person))),[Ljava.lang.String;@efde75f,Annotation([Ljava.lang.String;@16ecee1,[Ljava.lang.String;@3b220bcb,[Ljava.lang.String;@2b95e48b),Annotation([Ljava.lang.String;@4a3329b9,[Ljava.lang.String;@3dddefd8,[Ledu.cmu.lti.nlp.amr.Dependency;@160ac7fb),Annotation([Ljava.lang.String;@12bfd80d,[Ljava.lang.String;@41925502,[Ljava.lang.String;@13e3c1c7),Annotation([Ljava.lang.String;@5316e95f,[Ljava.lang.String;@3f053c80,[Ledu.cmu.lti.nlp.amr.Entity;@6c6c5427))
AMR:
(a / assist-01, ARG1, d / drug)
(a2 / analyze-01, ARG0, p3 / person)
(i / interest-01, ARG0, o / or)
(i / interest-01, ARG1, r / rifle)
(i / interest-01, ARG2, p3 / person)
(o / or, op, a / assist-01)
(p3 / person, mod, m2 / military)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, m / money)
(s / say-01, ARG2, p / plenty)
(s / say-01, mod, g / guerrilla)
(s2 / specialize-01, ARG0, p2 / person)
(s2 / specialize-01, ARG1, s / say-01)

Decoded in 418,141 microseconds
Sentence: A 030000 study published by the US Defense Intelligence Agency reported that more than half of the weapons seized from Colombian guerrillas from 980000 to 010000 that had markings of foreign militaries were of Venezuelan origin.

mkDayMonthYear(030000,00,00,03)
NER Entity: (organization :name (name :op "US" :op "Defense" :op "Intelligence" :op "Agency"))
NER Entity: (thing :name (name :op "Colombian"))
mkDayMonthYear(980000,00,00,98)
mkDayMonthYear(010000,00,00,01)
NER Entity: (thing :name (name :op "Venezuelan"))
mkDayMonthYear(010000,00,00,01)
mkDayMonthYear(980000,00,00,98)
mkDayMonthYear(030000,00,00,03)
Spans:
Span 25-26:  010000 => (date-entity :year 2001)
Span 1-2:  030000 => (date-entity :year 2003)
Span 23-24:  980000 => (date-entity :year 1998)
Span 21-22:  guerrillas => guerrilla
Span 35-36:  origin => originate-01
Span 3-4:  published => publish-01
Span 10-11:  reported => report-01
Span 6-10:  US Defense Intelligence Agency => (organization :name (name :op "US" :op "Defense" :op "Intelligence" :op "Agency"))

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 25-26:  010000 => (date-entity :year 2001)
Oracle Span 1-2:  030000 => (date-entity :year 2003)
Oracle Span 23-24:  980000 => (date-entity :year 1998)
Oracle Span 20-21:  Colombian => (country :name (name :op "Colombia"))
Oracle Span 7-10:  Defense Intelligence Agency => (government-organization :name (name :op "Agency" :op "Intelligence" :op "Defense"))
Oracle Span 30-31:  foreign => foreign
Oracle Span 21-22:  guerrillas => guerrilla
Oracle Span 28-29:  markings => mark-02
Oracle Span 31-32:  militaries => military
Oracle Span 12-13:  more => more-than
Oracle Span 15-16:  of => include-91
Oracle Span 35-36:  origin => originate-01
Oracle Span 3-4:  published => publish-01
Oracle Span 10-11:  reported => report-01
Oracle Span 18-19:  seized => seize-01
Oracle Span 2-3:  study => study
Oracle Span 6-7:  US => (country :name (name :op "US"))
Oracle Span 34-35:  Venezuelan => (country :name (name :op "Venezuela"))
Oracle Span 17-18:  weapons => weapon

Extra span: US Defense Intelligence Agency => (organization :name (name :op "US" :op "Defense" :op "Intelligence" :op "Agency"))
Missing span: Defense Intelligence Agency => (government-organization :name (name :op "Agency" :op "Intelligence" :op "Defense"))
Missing span: US => (country :name (name :op "US"))
Missing span: Colombian => (country :name (name :op "Colombia"))
Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: weapons => weapon
Missing span: of => include-91
Missing span: seized => seize-01
Missing span: militaries => military
Missing span: foreign => foreign
Missing span: study => study
Missing span: more => more-than
Missing span: markings => mark-02
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	030000	_	CD	CD	_	3	num	_	_
3	study	_	NN	NN	_	11	nsubj	_	_
4	published	_	VBN	VBN	_	3	vmod	_	_
5	by	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	10	det	_	_
7	US	_	NNP	NNP	_	10	nn	_	_
8	Defense	_	NNP	NNP	_	10	nn	_	_
9	Intelligence	_	NNP	NNP	_	10	nn	_	_
10	Agency	_	NNP	NNP	_	5	pobj	_	_
11	reported	_	VBD	VBD	_	0	root	_	_
12	that	_	IN	IN	_	33	mark	_	_
13	more	_	JJR	JJR	_	15	quantmod	_	_
14	than	_	IN	IN	_	15	quantmod	_	_
15	half	_	PDT	PDT	_	33	nsubj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	weapons	_	NNS	NNS	_	16	pobj	_	_
19	seized	_	VBN	VBN	_	18	vmod	_	_
20	from	_	IN	IN	_	19	prep	_	_
21	Colombian	_	JJ	JJ	_	22	amod	_	_
22	guerrillas	_	NNS	NNS	_	20	pobj	_	_
23	from	_	IN	IN	_	22	prep	_	_
24	980000	_	CD	CD	_	26	number	_	_
25	to	_	TO	TO	_	26	dep	_	_
26	010000	_	CD	CD	_	23	pobj	_	_
27	that	_	WDT	WDT	_	28	nsubj	_	_
28	had	_	VBD	VBD	_	22	rcmod	_	_
29	markings	_	NNS	NNS	_	28	dobj	_	_
30	of	_	IN	IN	_	29	prep	_	_
31	foreign	_	JJ	JJ	_	32	amod	_	_
32	militaries	_	NNS	NNS	_	30	pobj	_	_
33	were	_	VBD	VBD	_	11	ccomp	_	_
34	of	_	IN	IN	_	33	prep	_	_
35	Venezuelan	_	JJ	JJ	_	36	amod	_	_
36	origin	_	NN	NN	_	34	pobj	_	_
37	.	_	.	.	_	11	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(d / date-entity, year, 1998)
(d2 / date-entity, year, 2001)
(d4 / date-entity, year, 2003)
(g / government-organization, mod, c / country)
(g / government-organization, name, n / name)
(g2 / guerrilla, mod, c2 / country)
(i / include-91, ARG1, w / weapon)
(i / include-91, ARG3, m / more-than)
(m2 / mark-02, ARG0, m3 / military)
(m3 / military, mod, f / foreign)
(n / name, op, "Agency")
(n / name, op, "Defense")
(n / name, op, "Intelligence")
(n2 / name, op, "US")
(n3 / name, op, "Colombia")
(n4 / name, op, "Venezuela")
(o / originate-01, ARG1, w / weapon)
(o / originate-01, ARG2, c3 / country)
(p / publish-01, ARG0, g / government-organization)
(p / publish-01, ARG1, s / study)
(r / report-01, ARG0, s / study)
(r / report-01, ARG1, o / originate-01)
(s / study, time, d4 / date-entity)
(s2 / seize-01, ARG2, g2 / guerrilla)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),origin,originate-01,false), Span(25,26,List(2, 1),010000,(date-entity :year 2001),false), Span(23,24,List(4, 3),980000,(date-entity :year 1998),false), Span(21,22,List(5),guerrillas,guerrilla,false), Span(10,11,List(6),reported,report-01,false), Span(6,10,List(12, 11, 10, 9, 8, 7),US Defense Intelligence Agency,(organization :name (name :op "US" :op "Defense" :op "Intelligence" :op "Agency")),false), Span(3,4,List(13),published,publish-01,false), Span(1,2,List(15, 14),030000,(date-entity :year 2003),false)),Map(2 -> 2001, 5 -> guerrilla, 12 -> "Agency", 15 -> 2003, 8 -> name, 7 -> organization, 1 -> date-entity, 4 -> 1998, 11 -> "Intelligence", 14 -> date-entity, 6 -> report-01, 0 -> originate-01, 9 -> "US", 3 -> date-entity, 10 -> "Defense", 13 -> publish-01),Map(n -> name, 2 -> 2001, d3 -> date-entity, d -> date-entity, p -> publish-01, g -> guerrilla, 1 -> 1998, o2 -> organization, d2 -> date-entity, r -> report-01, 22 -> 2003, o -> originate-01))),[Ljava.lang.String;@618c5d94,Annotation([Ljava.lang.String;@5b40ceb,[Ljava.lang.String;@13c3c1e1,[Ljava.lang.String;@1d8062d2),Annotation([Ljava.lang.String;@1e63ec0b,[Ljava.lang.String;@3b956878,[Ledu.cmu.lti.nlp.amr.Dependency;@36546a22),Annotation([Ljava.lang.String;@285c08c8,[Ljava.lang.String;@295eaa7c,[Ljava.lang.String;@3918c187),Annotation([Ljava.lang.String;@2c88b9fc,[Ljava.lang.String;@64dafeed,[Ledu.cmu.lti.nlp.amr.Entity;@388ba540))
AMR:
(d / date-entity, year, 2 / 2001)
(d2 / date-entity, op, p / publish-01)
(d2 / date-entity, year, 1 / 1998)
(d3 / date-entity, year, 22 / 2003)
(g / guerrilla, op, o / originate-01)
(n / name, op, "Agency")
(n / name, op, "Defense")
(n / name, op, "Intelligence")
(n / name, op, "US")
(o / originate-01, ARG1, d / date-entity)
(o2 / organization, name, n / name)
(p / publish-01, ARG0, o2 / organization)
(p / publish-01, ARG1, d3 / date-entity)
(r / report-01, ARG0, o2 / organization)
(r / report-01, ARG1, o / originate-01)

Decoded in 316,971 microseconds
Sentence: The implication was that corrupt or sympathetic members of the Venezuelan military may be aiding guerrillas.

NER Entity: (thing :name (name :op "Venezuelan"))
Spans:
Span 14-15:  aiding => aid-01
Span 4-5:  corrupt => corrupt-01
Span 15-16:  guerrillas => guerrilla
Span 1-2:  implication => (thing :ARG1-of imply-01)
Span 12-13:  may => possible
Span 7-8:  members => (have-org-role-91 :ARG2 member)
Span 5-6:  or => or

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Oracle Span 14-15:  aiding => aid-01
Oracle Span 4-5:  corrupt => corrupt-01
Oracle Span 15-16:  guerrillas => guerrilla
Oracle Span 1-2:  implication => imply-01
Oracle Span 12-13:  may => possible
Oracle Span 7-8:  members => (have-org-role-91 :ARG2 member)
Oracle Span 11-12:  military => (have-org-role-91 :ARG1 military)
Oracle Span 5-6:  or => or
Oracle Span 6-7:  sympathetic => sympathize-01
Oracle Span 10-11:  Venezuelan => (country :name (name :op "Venezuela"))

Incorrect span: implication => (thing :ARG1-of imply-01)
Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: military => (have-org-role-91 :ARG1 military)
Missing span: implication => imply-01
Missing span: sympathetic => sympathize-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	implication	_	NN	NN	_	3	nsubj	_	_
3	was	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	15	mark	_	_
5	corrupt	_	JJ	JJ	_	8	amod	_	_
6	or	_	CC	CC	_	5	cc	_	_
7	sympathetic	_	JJ	JJ	_	5	conj	_	_
8	members	_	NNS	NNS	_	15	nsubj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	Venezuelan	_	JJ	JJ	_	12	amod	_	_
12	military	_	NN	NN	_	9	pobj	_	_
13	may	_	MD	MD	_	15	aux	_	_
14	be	_	VB	VB	_	15	aux	_	_
15	aiding	_	VBG	VBG	_	3	ccomp	_	_
16	guerrillas	_	NNS	NNS	_	15	dobj	_	_
17	.	_	.	.	_	3	punct	_	_

Oracle:
(a / aid-01, ARG0, o / or)
(a / aid-01, ARG2, g / guerrilla)
(c2 / country, name, n / name)
(h / have-org-role-91, ARG1, m3 / military)
(h2 / have-org-role-91, ARG1, m3 / military)
(h2 / have-org-role-91, ARG2, m2 / member)
(i / imply-01, ARG1, p / possible)
(m3 / military, mod, c2 / country)
(n / name, op, "Venezuela")
(p / possible, domain, a / aid-01)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),guerrillas,guerrilla,false), Span(14,15,List(1),aiding,aid-01,false), Span(12,13,List(2),may,possible,false), Span(7,8,List(4, 3),members,(have-org-role-91 :ARG2 member),false), Span(5,6,List(5),or,or,false), Span(4,5,List(6),corrupt,corrupt-01,false), Span(1,2,List(8, 7),implication,(thing :ARG1-of imply-01),false)),Map(2 -> possible, 5 -> or, 8 -> imply-01, 7 -> thing, 1 -> aid-01, 4 -> member, 6 -> corrupt-01, 0 -> guerrilla, 3 -> have-org-role-91),Map(h -> have-org-role-91, t -> thing, m -> member, p -> possible, g -> guerrilla, a -> aid-01, i -> imply-01, c -> corrupt-01, o -> or))),[Ljava.lang.String;@47605f2f,Annotation([Ljava.lang.String;@2ece4966,[Ljava.lang.String;@1dd0e7c4,[Ljava.lang.String;@7894f09b),Annotation([Ljava.lang.String;@3d484181,[Ljava.lang.String;@6111ba37,[Ledu.cmu.lti.nlp.amr.Dependency;@7be58f16),Annotation([Ljava.lang.String;@242aa8d9,[Ljava.lang.String;@5b11a194,[Ljava.lang.String;@37bd68c3),Annotation([Ljava.lang.String;@60f7cc1d,[Ljava.lang.String;@11eadcba,[Ledu.cmu.lti.nlp.amr.Entity;@4721d212))
AMR:
(a / aid-01, ARG0, t / thing)
(a / aid-01, ARG1, o / or)
(a / aid-01, ARG2, g / guerrilla)
(a / aid-01, mod, p / possible)
(h / have-org-role-91, ARG2, m / member)
(i / imply-01, ARG1, t / thing)
(o / or, op, c / corrupt-01)
(o / or, op, h / have-org-role-91)

Decoded in 395,644 microseconds
Sentence: Perhaps more distressing to Chavez's domestic opponents is the ideological training that critics say Chavez has in mind for the military and for new civilian reservists.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 25-26:  civilian => civilian
Span 13-14:  critics => (person :ARG0-of criticize-01)
Span 6-7:  domestic => domestic
Span 18-19:  mind => mind
Span 24-25:  new => new
Span 14-15:  say => say-01
Span 11-12:  training => train-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 22-23:  and => and
Oracle Span 4-5:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 25-26:  civilian => civilian
Oracle Span 13-14:  critics => (person :ARG0-of criticize-01)
Oracle Span 2-3:  distressing => distress-01
Oracle Span 6-7:  domestic => domestic
Oracle Span 16-17:  has => have-03
Oracle Span 10-11:  ideological => ideology
Oracle Span 21-22:  military => military
Oracle Span 18-19:  mind => mind
Oracle Span 1-2:  more => more
Oracle Span 24-25:  new => new
Oracle Span 7-8:  opponents => (person :ARG0-of oppose-01)
Oracle Span 26-27:  reservists => reservist
Oracle Span 14-15:  say => say-01
Oracle Span 11-12:  training => train-01

Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: distressing => distress-01
Missing span: more => more
Missing span: has => have-03
Missing span: and => and
Missing span: reservists => reservist
Missing span: military => military
Missing span: opponents => (person :ARG0-of oppose-01)
Missing span: ideological => ideology
Dependencies:
1	Perhaps	_	RB	RB	_	9	advmod	_	_
2	more	_	RBR	RBR	_	3	advmod	_	_
3	distressing	_	JJ	JJ	_	9	dep	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	Chavez	_	NNP	NNP	_	8	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	domestic	_	JJ	JJ	_	8	amod	_	_
8	opponents	_	NNS	NNS	_	4	pobj	_	_
9	is	_	VBZ	VBZ	_	0	root	_	_
10	the	_	DT	DT	_	12	det	_	_
11	ideological	_	JJ	JJ	_	12	amod	_	_
12	training	_	NN	NN	_	9	nsubj	_	_
13	that	_	IN	IN	_	15	mark	_	_
14	critics	_	NNS	NNS	_	15	nsubj	_	_
15	say	_	VBP	VBP	_	12	dep	_	_
16	Chavez	_	NNP	NNP	_	18	nsubj	_	_
17	has	_	VBZ	VBZ	_	18	aux	_	_
18	in	_	IN	IN	_	15	ccomp	_	_
19	mind	_	NN	NN	_	18	pobj	_	_
20	for	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	military	_	NN	NN	_	20	pobj	_	_
23	and	_	CC	CC	_	18	cc	_	_
24	for	_	IN	IN	_	18	conj	_	_
25	new	_	JJ	JJ	_	27	amod	_	_
26	civilian	_	JJ	JJ	_	27	amod	_	_
27	reservists	_	NNS	NNS	_	24	pobj	_	_
28	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, m2 / military)
(a / and, op, r / reservist)
(c2 / criticize-01, ARG0, p3 / person)
(d / distress-01, ARG0, t / train-01)
(d / distress-01, ARG1, p / person)
(d / distress-01, degree, m3 / more)
(h / have-03, ARG0, p2 / person)
(h / have-03, ARG1, t / train-01)
(h / have-03, prep-in, m / mind)
(n / name, op, "Chavez")
(o / oppose-01, ARG0, p / person)
(o / oppose-01, ARG1, p2 / person)
(p / person, mod, d2 / domestic)
(p2 / person, name, n / name)
(r / reservist, mod, c / civilian)
(r / reservist, mod, n2 / new)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, t / train-01)
(t / train-01, ARG2, a / and)
(t / train-01, mod, i / ideology)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),civilian,civilian,false), Span(24,25,List(1),new,new,false), Span(18,19,List(2),mind,mind,false), Span(14,15,List(3),say,say-01,false), Span(13,14,List(5, 4),critics,(person :ARG0-of criticize-01),false), Span(11,12,List(6),training,train-01,false), Span(6,7,List(7),domestic,domestic,false)),Map(2 -> mind, 5 -> criticize-01, 7 -> domestic, 1 -> new, 4 -> person, 6 -> train-01, 0 -> civilian, 3 -> say-01),Map(n -> new, t -> train-01, s -> say-01, d -> domestic, m -> mind, p -> person, c -> civilian, c2 -> criticize-01))),[Ljava.lang.String;@1b065145,Annotation([Ljava.lang.String;@45cff11c,[Ljava.lang.String;@207ea13,[Ljava.lang.String;@4bff1903),Annotation([Ljava.lang.String;@62dae540,[Ljava.lang.String;@5827af16,[Ledu.cmu.lti.nlp.amr.Dependency;@654d8173),Annotation([Ljava.lang.String;@56c9bbd8,[Ljava.lang.String;@630cb4a4,[Ljava.lang.String;@636e8cc),Annotation([Ljava.lang.String;@f79a760,[Ljava.lang.String;@14f5da2c,[Ledu.cmu.lti.nlp.amr.Entity;@12dae582))
AMR:
(c2 / criticize-01, ARG0, p / person)
(c2 / criticize-01, ARG1, n / new)
(d / domestic, op, s / say-01)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, m / mind)
(t / train-01, ARG1, p / person)
(t / train-01, ARG2, c / civilian)

Decoded in 168,528 microseconds
Sentence: Chavez called earlier in 050000 for so-called Revolutionary units to start preparing the public to resist a superpower aggressor and said the first step would be to train from 100000 to 2 million volunteers in the coming years to back up active-duty armed forces.

NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(050000,00,00,05)
mkDayMonthYear(100000,00,00,10)
mkDayMonthYear(100000,00,00,10)
mkDayMonthYear(050000,00,00,05)
Spans:
Span 4-5:  050000 => (date-entity :year 2005)
Span 31-32:  100000 => (date-entity :day 0 :month 0 :year 10)
Span 43-44:  active => active
Span 20-21:  aggressor => aggressor
Span 46-47:  armed => arm-01
Span 45-46:  duty => duty
Span 2-3:  earlier => early
Span 13-14:  preparing => prepare-02
Span 15-16:  public => public
Span 17-18:  resist => resist-01
Span 9-10:  Revolutionary => "Revolutionary"
Span 22-23:  said => say-01
Span 10-11:  units => unit
Span 35-36:  volunteers => (person :ARG0-of volunteer-01)
Span 39-40:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 4-5:  050000 => (date-entity :year 2005)
Oracle Span 31-32:  100000 => 100000
Oracle Span 43-44:  active => active
Oracle Span 20-21:  aggressor => aggressor
Oracle Span 21-22:  and => and
Oracle Span 46-47:  armed => arm-01
Oracle Span 41-42:  back => back-04
Oracle Span 1-2:  called => call-03
Oracle Span 8-9:  called => call-01
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 38-39:  coming => come-01
Oracle Span 45-46:  duty => duty
Oracle Span 2-3:  earlier => early
Oracle Span 47-48:  forces => force
Oracle Span 13-14:  preparing => prepare-02
Oracle Span 15-16:  public => public
Oracle Span 17-18:  resist => resist-01
Oracle Span 9-10:  Revolutionary => revolutionary
Oracle Span 22-23:  said => say-01
Oracle Span 6-7:  so => so
Oracle Span 12-13:  start => start-01
Oracle Span 25-26:  step => step-01
Oracle Span 19-20:  superpower => superpower
Oracle Span 29-30:  train => train-01
Oracle Span 10-11:  units => unit
Oracle Span 35-36:  volunteers => (person :ARG0-of volunteer-01)
Oracle Span 39-40:  years => year

Incorrect span: years => (temporal-quantity :unit year)
Incorrect span: 100000 => (date-entity :day 0 :month 0 :year 10)
Incorrect span: Revolutionary => "Revolutionary"
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: and => and
Missing span: step => step-01
Missing span: train => train-01
Missing span: years => year
Missing span: coming => come-01
Missing span: 100000 => 100000
Missing span: back => back-04
Missing span: forces => force
Missing span: called => call-03
Missing span: so => so
Missing span: start => start-01
Missing span: superpower => superpower
Missing span: called => call-01
Missing span: Revolutionary => revolutionary
Dependencies:
1	Chavez	_	NNP	NNP	_	2	nsubj	_	_
2	called	_	VBD	VBD	_	0	root	_	_
3	earlier	_	RBR	RBR	_	2	advmod	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	050000	_	CD	CD	_	4	pobj	_	_
6	for	_	IN	IN	_	5	prep	_	_
7	so-called	_	JJ	JJ	_	9	amod	_	_
8	Revolutionary	_	NNP	NNP	_	9	nn	_	_
9	units	_	NNS	NNS	_	6	pobj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	start	_	VB	VB	_	2	xcomp	_	_
12	preparing	_	VBG	VBG	_	11	xcomp	_	_
13	the	_	DT	DT	_	14	det	_	_
14	public	_	NN	NN	_	12	dobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	resist	_	VB	VB	_	14	vmod	_	_
17	a	_	DT	DT	_	19	det	_	_
18	superpower	_	NN	NN	_	19	nn	_	_
19	aggressor	_	NN	NN	_	16	dobj	_	_
20	and	_	CC	CC	_	2	cc	_	_
21	said	_	VBD	VBD	_	2	conj	_	_
22	the	_	DT	DT	_	24	det	_	_
23	first	_	JJ	JJ	_	24	amod	_	_
24	step	_	NN	NN	_	26	nsubj	_	_
25	would	_	MD	MD	_	26	aux	_	_
26	be	_	VB	VB	_	21	ccomp	_	_
27	to	_	TO	TO	_	28	aux	_	_
28	train	_	VB	VB	_	26	xcomp	_	_
29	from	_	IN	IN	_	28	prep	_	_
30	100000	_	CD	CD	_	33	number	_	_
31	to	_	TO	TO	_	33	dep	_	_
32	2	_	CD	CD	_	33	number	_	_
33	million	_	CD	CD	_	34	num	_	_
34	volunteers	_	NNS	NNS	_	29	pobj	_	_
35	in	_	IN	IN	_	34	prep	_	_
36	the	_	DT	DT	_	38	det	_	_
37	coming	_	JJ	JJ	_	38	amod	_	_
38	years	_	NNS	NNS	_	35	pobj	_	_
39	to	_	TO	TO	_	40	aux	_	_
40	back	_	VB	VB	_	28	xcomp	_	_
41	up	_	RP	RP	_	40	prt	_	_
42	active-duty	_	JJ	JJ	_	44	amod	_	_
43	armed	_	JJ	JJ	_	44	amod	_	_
44	forces	_	NNS	NNS	_	40	dobj	_	_
45	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c / call-03)
(a / and, op, s2 / say-01)
(a2 / aggressor, mod, s / superpower)
(a3 / arm-01, ARG1, f / force)
(b / back-04, ARG1, f / force)
(c / call-03, ARG0, p / person)
(c / call-03, ARG1, s4 / start-01)
(c / call-03, manner, s5 / so)
(c / call-03, time, e / early)
(c2 / call-01, ARG1, u / unit)
(c2 / call-01, ARG2, r / revolutionary)
(c3 / come-01, ARG1, y / year)
(d / duty, mod, a4 / active)
(d2 / date-entity, year, 2005)
(e / early, op, d2 / date-entity)
(f / force, mod, d / duty)
(n / name, op, "Chavez")
(p / person, name, n / name)
(p2 / prepare-02, ARG0, u / unit)
(p2 / prepare-02, ARG1, p3 / public)
(p2 / prepare-02, ARG2, r2 / resist-01)
(r2 / resist-01, ARG0, p3 / public)
(r2 / resist-01, ARG1, a2 / aggressor)
(s2 / say-01, ARG0, p / person)
(s2 / say-01, ARG1, s3 / step-01)
(s3 / step-01, ARG1, t / train-01)
(s4 / start-01, ARG0, u / unit)
(s4 / start-01, ARG1, p2 / prepare-02)
(t / train-01, ARG1, b / back-04)
(t / train-01, ARG2, p4 / person)
(t / train-01, time, y / year)
(v / volunteer-01, ARG0, p4 / person)

Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),armed,arm-01,false), Span(45,46,List(1),duty,duty,false), Span(43,44,List(2),active,active,false), Span(39,40,List(4, 3),years,(temporal-quantity :unit year),false), Span(35,36,List(6, 5),volunteers,(person :ARG0-of volunteer-01),false), Span(31,32,List(10, 9, 8, 7),100000,(date-entity :day 0 :month 0 :year 10),false), Span(22,23,List(11),said,say-01,false), Span(20,21,List(12),aggressor,aggressor,false), Span(17,18,List(13),resist,resist-01,false), Span(15,16,List(14),public,public,false), Span(13,14,List(15),preparing,prepare-02,false), Span(10,11,List(16),units,unit,false), Span(9,10,List(17),Revolutionary,"Revolutionary",false), Span(4,5,List(19, 18),050000,(date-entity :year 2005),false), Span(2,3,List(20),earlier,early,false)),Map(2 -> active, 5 -> person, 12 -> aggressor, 15 -> prepare-02, 8 -> 0, 18 -> date-entity, 7 -> date-entity, 17 -> "Revolutionary", 1 -> duty, 4 -> year, 11 -> say-01, 14 -> public, 20 -> early, 6 -> volunteer-01, 0 -> arm-01, 9 -> 0, 16 -> unit, 19 -> 2005, 3 -> temporal-quantity, 10 -> 10, 13 -> resist-01),Map(e -> early, 2 -> 2005, t -> temporal-quantity, d3 -> date-entity, p2 -> public, a3 -> aggressor, s -> say-01, v -> volunteer-01, R -> "Revolutionary", d -> duty, 1 -> 10, y -> year, p -> person, a -> arm-01, d2 -> date-entity, 02 -> 0, r -> resist-01, a2 -> active, u -> unit, 0 -> 0, p3 -> prepare-02))),[Ljava.lang.String;@239b0f9d,Annotation([Ljava.lang.String;@619bfe29,[Ljava.lang.String;@5b057c8c,[Ljava.lang.String;@1eb6749b),Annotation([Ljava.lang.String;@652a7737,[Ljava.lang.String;@5b7ea70d,[Ledu.cmu.lti.nlp.amr.Dependency;@2bef51f2),Annotation([Ljava.lang.String;@650eab8,[Ljava.lang.String;@30f5a68a,[Ljava.lang.String;@1e1d3956),Annotation([Ljava.lang.String;@4f2c9ba6,[Ljava.lang.String;@4e28bdd1,[Ledu.cmu.lti.nlp.amr.Entity;@53f48368))
AMR:
(a / arm-01, ARG1, s / say-01)
(a2 / active, op, s / say-01)
(d / duty, mod, a2 / active)
(d2 / date-entity, day, 0 / 0)
(d2 / date-entity, month, 02 / 0)
(d2 / date-entity, year, 1 / 10)
(d3 / date-entity, year, 2 / 2005)
(e / early, op, d3 / date-entity)
(p3 / prepare-02, ARG0, e / early)
(p3 / prepare-02, ARG1, p2 / public)
(p3 / prepare-02, ARG2, u / unit)
(r / resist-01, ARG0, p2 / public)
(r / resist-01, ARG1, a3 / aggressor)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, r / resist-01)
(t / temporal-quantity, unit, y / year)
(u / unit, mod, R / "Revolutionary")
(v / volunteer-01, ARG0, p / person)
(v / volunteer-01, ARG1, t / temporal-quantity)
(v / volunteer-01, time, d2 / date-entity)

Decoded in 1,060,302 microseconds
Sentence: Military analysts estimate Venezuela's active-duty armed forces number 83,000.

NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 5-6:  active => active
Span 1-2:  analysts => (person :ARG0-of analyze-01)
Span 8-9:  armed => arm-01
Span 7-8:  duty => duty
Span 2-3:  estimate => estimate-01
Span 0-1:  Military => military
Span 3-4:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  active => active
Oracle Span 1-2:  analysts => (person :ARG0-of analyze-01)
Oracle Span 8-9:  armed => arm-01
Oracle Span 7-8:  duty => duty
Oracle Span 2-3:  estimate => estimate-01
Oracle Span 9-10:  forces => force
Oracle Span 0-1:  Military => military
Oracle Span 10-11:  number => number-01
Oracle Span 3-4:  Venezuela => (country :name (name :op "Venezuela"))

Missing span: number => number-01
Missing span: forces => force
Dependencies:
1	Military	_	JJ	JJ	_	2	amod	_	_
2	analysts	_	NNS	NNS	_	3	nsubj	_	_
3	estimate	_	VBP	VBP	_	0	root	_	_
4	Venezuela	_	NNP	NNP	_	8	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	active-duty	_	JJ	JJ	_	8	amod	_	_
7	armed	_	JJ	JJ	_	8	amod	_	_
8	forces	_	NNS	NNS	_	3	dobj	_	_
9	number	_	NN	NN	_	8	dep	_	_
10	83,000	_	CD	CD	_	9	num	_	_
11	.	_	.	.	_	3	punct	_	_

Oracle:
(a / analyze-01, ARG0, p / person)
(a / analyze-01, ARG1, m / military)
(a2 / arm-01, ARG1, f / force)
(c / country, name, n2 / name)
(d / duty, mod, a3 / active)
(e / estimate-01, ARG0, p / person)
(e / estimate-01, ARG1, n / number-01)
(f / force, mod, d / duty)
(f / force, poss, c / country)
(n / number-01, ARG1, f / force)
(n2 / name, op, "Venezuela")

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),armed,arm-01,false), Span(7,8,List(1),duty,duty,false), Span(5,6,List(2),active,active,false), Span(3,4,List(5, 4, 3),Venezuela,(country :name (name :op "Venezuela")),false), Span(2,3,List(6),estimate,estimate-01,false), Span(1,2,List(8, 7),analysts,(person :ARG0-of analyze-01),false), Span(0,1,List(9),Military,military,false)),Map(2 -> active, 5 -> "Venezuela", 8 -> analyze-01, 7 -> person, 1 -> duty, 4 -> name, 6 -> estimate-01, 9 -> military, 0 -> arm-01, 3 -> country),Map(e -> estimate-01, n -> name, a3 -> analyze-01, m -> military, d -> duty, p -> person, a -> arm-01, a2 -> active, c -> country))),[Ljava.lang.String;@24d4d7c9,Annotation([Ljava.lang.String;@f0e995e,[Ljava.lang.String;@4c37b5b,[Ljava.lang.String;@73db4768),Annotation([Ljava.lang.String;@71b3bc45,[Ljava.lang.String;@a8c1f44,[Ledu.cmu.lti.nlp.amr.Dependency;@150ab4ed),Annotation([Ljava.lang.String;@3c435123,[Ljava.lang.String;@50fe837a,[Ljava.lang.String;@3a62c01e),Annotation([Ljava.lang.String;@7a8fa663,[Ljava.lang.String;@5ce33a58,[Ledu.cmu.lti.nlp.amr.Entity;@78a287ed))
AMR:
(a / arm-01, ARG1, e / estimate-01)
(a3 / analyze-01, ARG0, p / person)
(a3 / analyze-01, ARG1, c / country)
(c / country, name, n / name)
(d / duty, mod, a2 / active)
(e / estimate-01, ARG0, p / person)
(e / estimate-01, ARG1, a2 / active)
(n / name, op, "Venezuela")
(p / person, mod, m / military)

Decoded in 55,227 microseconds
Sentence: People's defense units would be created in neighborhoods, State companies, and the Free University established under Chavez and would report directly to the president.

NER Entity: (organization :name (name :op "Free" :op "University"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 11-12:  companies => company
Span 6-7:  created => create-01
Span 23-24:  directly => direct
Span 17-18:  established => establish-01
Span 15-17:  Free University => (organization :name (name :op "Free" :op "University"))
Span 26-27:  president => (have-org-role-91 :ARG2 president)
Span 3-4:  units => unit

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 20-21:  and => and
Oracle Span 19-20:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 11-12:  companies => company
Oracle Span 6-7:  created => create-01
Oracle Span 2-3:  defense => defend-01
Oracle Span 23-24:  directly => direct
Oracle Span 17-18:  established => establish-01
Oracle Span 15-17:  Free University => (university :name (name :op "University" :op "Free"))
Oracle Span 8-9:  neighborhoods => neighborhood
Oracle Span 26-27:  president => (have-org-role-91 :ARG2 president)
Oracle Span 22-23:  report => report-01
Oracle Span 10-11:  State => state
Oracle Span 3-4:  units => unit

Incorrect span: Free University => (organization :name (name :op "Free" :op "University"))
Missing span: Free University => (university :name (name :op "University" :op "Free"))
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: and => and
Missing span: report => report-01
Missing span: and => and
Missing span: State => state
Missing span: neighborhoods => neighborhood
Missing span: defense => defend-01
Dependencies:
1	People	_	NNS	NNS	_	4	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	defense	_	NN	NN	_	4	nn	_	_
4	units	_	NNS	NNS	_	7	nsubjpass	_	_
5	would	_	MD	MD	_	7	aux	_	_
6	be	_	VB	VB	_	7	auxpass	_	_
7	created	_	VBN	VBN	_	0	root	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	neighborhoods	_	NNS	NNS	_	8	pobj	_	_
10	,	_	,	,	_	9	punct	_	_
11	State	_	NNP	NNP	_	12	nn	_	_
12	companies	_	NNS	NNS	_	9	appos	_	_
13	,	_	,	,	_	7	punct	_	_
14	and	_	CC	CC	_	7	cc	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Free	_	NNP	NNP	_	17	nn	_	_
17	University	_	NNP	NNP	_	18	nsubj	_	_
18	established	_	VBD	VBD	_	7	conj	_	_
19	under	_	IN	IN	_	18	prep	_	_
20	Chavez	_	NNP	NNP	_	19	pobj	_	_
21	and	_	CC	CC	_	18	cc	_	_
22	would	_	MD	MD	_	23	aux	_	_
23	report	_	VB	VB	_	18	conj	_	_
24	directly	_	RB	RB	_	23	advmod	_	_
25	to	_	TO	TO	_	23	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	president	_	NN	NN	_	25	pobj	_	_
28	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, c / create-01)
(a / and, op, r / report-01)
(a2 / and, op, c2 / company)
(a2 / and, op, n / neighborhood)
(a2 / and, op, u2 / university)
(c / create-01, ARG1, u / unit)
(c / create-01, location, a2 / and)
(c2 / company, mod, s / state)
(d / defend-01, ARG0, u / unit)
(e / establish-01, ARG1, u2 / university)
(e / establish-01, prep-under, p2 / person)
(h / have-org-role-91, ARG2, p3 / president)
(n2 / name, op, "Free")
(n2 / name, op, "University")
(n3 / name, op, "Chavez")
(p2 / person, name, n3 / name)
(r / report-01, ARG0, u / unit)
(r / report-01, manner, d2 / direct)
(u2 / university, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(1, 0),president,(have-org-role-91 :ARG2 president),false), Span(23,24,List(2),directly,direct,false), Span(17,18,List(3),established,establish-01,false), Span(15,17,List(7, 6, 5, 4),Free University,(organization :name (name :op "Free" :op "University")),false), Span(11,12,List(8),companies,company,false), Span(6,7,List(9),created,create-01,false), Span(3,4,List(10),units,unit,false)),Map(2 -> direct, 5 -> name, 8 -> company, 7 -> "University", 1 -> president, 4 -> organization, 6 -> "Free", 9 -> create-01, 0 -> have-org-role-91, 10 -> unit, 3 -> establish-01),Map(n -> name, e -> establish-01, h -> have-org-role-91, d -> direct, p -> president, u -> unit, c -> company, o -> organization, c2 -> create-01))),[Ljava.lang.String;@546ccad7,Annotation([Ljava.lang.String;@5357c287,[Ljava.lang.String;@1623134f,[Ljava.lang.String;@7a527389),Annotation([Ljava.lang.String;@485a3466,[Ljava.lang.String;@25748410,[Ledu.cmu.lti.nlp.amr.Dependency;@2b43529a),Annotation([Ljava.lang.String;@4264b240,[Ljava.lang.String;@5b04476e,[Ljava.lang.String;@5ad10c1a),Annotation([Ljava.lang.String;@6bb75258,[Ljava.lang.String;@c260bdc,[Ledu.cmu.lti.nlp.amr.Entity;@75e01201))
AMR:
(c2 / create-01, ARG0, d / direct)
(c2 / create-01, ARG1, u / unit)
(e / establish-01, ARG0, o / organization)
(e / establish-01, ARG1, u / unit)
(h / have-org-role-91, ARG0, c / company)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p / president)
(n / name, op, "Free")
(n / name, op, "University")
(o / organization, name, n / name)

Decoded in 325,529 microseconds
Sentence: The government insists the reserves will support the armed forces and not act as a fifth column against a possible anti-Chavez coup.

Spans:
Span 8-9:  armed => arm-01
Span 23-24:  coup => coup
Span 2-3:  insists => insist-01
Span 19-20:  possible => possible
Span 4-5:  reserves => reserve-01
Span 6-7:  support => support-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 12-13:  act => act-01
Oracle Span 10-11:  and => and
Oracle Span 20-21:  anti => oppose-01
Oracle Span 8-9:  armed => arm-01
Oracle Span 22-23:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 16-17:  column => column
Oracle Span 23-24:  coup => coup
Oracle Span 9-10:  forces => force
Oracle Span 1-2:  government => (government-organization :ARG0-of govern-01)
Oracle Span 2-3:  insists => insist-01
Oracle Span 19-20:  possible => possible
Oracle Span 4-5:  reserves => reserve
Oracle Span 6-7:  support => support-01

Incorrect span: reserves => reserve-01
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: and => and
Missing span: act => act-01
Missing span: anti => oppose-01
Missing span: column => column
Missing span: forces => force
Missing span: reserves => reserve
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	government	_	NN	NN	_	3	nsubj	_	_
3	insists	_	VBZ	VBZ	_	0	root	_	_
4	the	_	DT	DT	_	5	det	_	_
5	reserves	_	NNS	NNS	_	7	nsubj	_	_
6	will	_	MD	MD	_	7	aux	_	_
7	support	_	VB	VB	_	3	ccomp	_	_
8	the	_	DT	DT	_	10	det	_	_
9	armed	_	VBN	VBN	_	10	amod	_	_
10	forces	_	NNS	NNS	_	7	dobj	_	_
11	and	_	CC	CC	_	7	cc	_	_
12	not	_	RB	RB	_	13	neg	_	_
13	act	_	VB	VB	_	7	conj	_	_
14	as	_	IN	IN	_	13	prep	_	_
15	a	_	DT	DT	_	17	det	_	_
16	fifth	_	JJ	JJ	_	17	amod	_	_
17	column	_	NN	NN	_	14	pobj	_	_
18	against	_	IN	IN	_	17	prep	_	_
19	a	_	DT	DT	_	22	det	_	_
20	possible	_	JJ	JJ	_	22	amod	_	_
21	anti-Chavez	_	JJ	JJ	_	22	amod	_	_
22	coup	_	NN	NN	_	18	pobj	_	_
23	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, a3 / act-01)
(a / and, op, s / support-01)
(a2 / arm-01, ARG1, f / force)
(a3 / act-01, ARG0, r / reserve)
(a3 / act-01, ARG1, c / column)
(a3 / act-01, prep-against, c2 / coup)
(c2 / coup, mod, p2 / possible)
(g2 / govern-01, ARG0, g / government-organization)
(i / insist-01, ARG0, g / government-organization)
(i / insist-01, ARG1, a / and)
(n / name, op, "Chavez")
(o2 / oppose-01, ARG0, c2 / coup)
(o2 / oppose-01, ARG1, p / person)
(p / person, name, n / name)
(s / support-01, ARG0, r / reserve)
(s / support-01, ARG1, f / force)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),coup,coup,false), Span(19,20,List(1),possible,possible,false), Span(8,9,List(2),armed,arm-01,false), Span(6,7,List(3),support,support-01,false), Span(4,5,List(4),reserves,reserve-01,false), Span(2,3,List(5),insists,insist-01,false)),Map(2 -> arm-01, 5 -> insist-01, 1 -> possible, 4 -> reserve-01, 0 -> coup, 3 -> support-01),Map(s -> support-01, p -> possible, a -> arm-01, i -> insist-01, r -> reserve-01, c -> coup))),[Ljava.lang.String;@2783717b,Annotation([Ljava.lang.String;@76f7d241,[Ljava.lang.String;@4a335fa8,[Ljava.lang.String;@3f363cf5),Annotation([Ljava.lang.String;@3829ac1,[Ljava.lang.String;@4baf352a,[Ledu.cmu.lti.nlp.amr.Dependency;@1bb1fde8),Annotation([Ljava.lang.String;@15eebbff,[Ljava.lang.String;@22d6f11,[Ljava.lang.String;@30990c1b),Annotation([Ljava.lang.String;@2453f95d,[Ljava.lang.String;@44828f6b,[Ledu.cmu.lti.nlp.amr.Entity;@2dbe250d))
AMR:
(a / arm-01, ARG1, r / reserve-01)
(c / coup, mod, p / possible)
(i / insist-01, ARG1, s / support-01)
(r / reserve-01, ARG1, c / coup)
(s / support-01, ARG1, r / reserve-01)

Decoded in 86,450 microseconds
Sentence: Espinoza said the reserves are not to be used as shock troops for any political party and that if there were a civil war, it would be up to each person to take their own side.

NER Entity: (person :name (name :op "Espinoza"))
Spans:
Span 13-14:  any => any
Span 22-23:  civil => civil
Span 30-31:  each => each
Span 31-32:  person => person
Span 3-4:  reserves => reserve-01
Span 1-2:  said => say-01
Span 36-37:  side => side
Span 8-9:  used => use-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 13-14:  any => any
Oracle Span 22-23:  civil => civil
Oracle Span 30-31:  each => each
Oracle Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Oracle Span 15-16:  party => party
Oracle Span 31-32:  person => person
Oracle Span 14-15:  political => politics
Oracle Span 3-4:  reserves => reserve
Oracle Span 1-2:  said => say-01
Oracle Span 10-11:  shock => shock-01
Oracle Span 36-37:  side => (thing :ARG1-of side-01)
Oracle Span 11-12:  troops => troop
Oracle Span 8-9:  used => use-01
Oracle Span 23-24:  war => war

Incorrect span: side => side
Incorrect span: reserves => reserve-01
Missing span: Espinoza => (person :name (name :op "Espinoza"))
Missing span: and => and
Missing span: side => (thing :ARG1-of side-01)
Missing span: war => war
Missing span: troops => troop
Missing span: shock => shock-01
Missing span: party => party
Missing span: reserves => reserve
Missing span: political => politics
Dependencies:
1	Espinoza	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	reserves	_	NNS	NNS	_	6	nsubj	_	_
5	are	_	VBP	VBP	_	6	aux	_	_
6	not	_	RB	RB	_	2	ccomp	_	_
7	to	_	TO	TO	_	9	aux	_	_
8	be	_	VB	VB	_	9	auxpass	_	_
9	used	_	VBN	VBN	_	6	xcomp	_	_
10	as	_	IN	IN	_	9	prep	_	_
11	shock	_	NN	NN	_	12	nn	_	_
12	troops	_	NNS	NNS	_	10	pobj	_	_
13	for	_	IN	IN	_	12	prep	_	_
14	any	_	DT	DT	_	16	det	_	_
15	political	_	JJ	JJ	_	16	amod	_	_
16	party	_	NN	NN	_	13	pobj	_	_
17	and	_	CC	CC	_	6	cc	_	_
18	that	_	IN	IN	_	28	mark	_	_
19	if	_	IN	IN	_	21	mark	_	_
20	there	_	EX	EX	_	21	expl	_	_
21	were	_	VBD	VBD	_	28	advcl	_	_
22	a	_	DT	DT	_	24	det	_	_
23	civil	_	JJ	JJ	_	24	amod	_	_
24	war	_	NN	NN	_	21	nsubj	_	_
25	,	_	,	,	_	28	punct	_	_
26	it	_	PRP	PRP	_	28	nsubj	_	_
27	would	_	MD	MD	_	28	aux	_	_
28	be	_	VB	VB	_	6	conj	_	_
29	up	_	RB	RB	_	28	advmod	_	_
30	to	_	TO	TO	_	29	prep	_	_
31	each	_	DT	DT	_	32	det	_	_
32	person	_	NN	NN	_	30	pobj	_	_
33	to	_	TO	TO	_	34	aux	_	_
34	take	_	VB	VB	_	32	vmod	_	_
35	their	_	PRP$	PRP$	_	37	poss	_	_
36	own	_	JJ	JJ	_	37	amod	_	_
37	side	_	NN	NN	_	34	dobj	_	_
38	.	_	.	.	_	2	punct	_	_

Oracle:
(n / name, op, "Espinoza")
(p / person, name, n / name)
(p2 / party, mod, a2 / any)
(p2 / party, mod, p3 / politics)
(p4 / person, mod, e / each)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / and)
(s2 / shock-01, ARG0, t / troop)
(s2 / shock-01, ARG1, p2 / party)
(s4 / side-01, ARG0, p4 / person)
(s4 / side-01, ARG1, t2 / thing)
(u / use-01, ARG1, r / reserve)
(u / use-01, ARG2, t / troop)
(w / war, mod, c / civil)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),side,side,false), Span(31,32,List(1),person,person,false), Span(30,31,List(2),each,each,false), Span(22,23,List(3),civil,civil,false), Span(13,14,List(4),any,any,false), Span(8,9,List(5),used,use-01,false), Span(3,4,List(6),reserves,reserve-01,false), Span(1,2,List(7),said,say-01,false)),Map(2 -> each, 5 -> use-01, 7 -> say-01, 1 -> person, 4 -> any, 6 -> reserve-01, 0 -> side, 3 -> civil),Map(e -> each, s2 -> say-01, s -> side, p -> person, a -> any, r -> reserve-01, u -> use-01, c -> civil))),[Ljava.lang.String;@553f1d75,Annotation([Ljava.lang.String;@6e1d8f9e,[Ljava.lang.String;@3e34ace1,[Ljava.lang.String;@62fe6067),Annotation([Ljava.lang.String;@4f071df8,[Ljava.lang.String;@4de41af9,[Ledu.cmu.lti.nlp.amr.Dependency;@56ace400),Annotation([Ljava.lang.String;@47404bea,[Ljava.lang.String;@305f7627,[Ljava.lang.String;@5d018107),Annotation([Ljava.lang.String;@6cbcf243,[Ljava.lang.String;@29e6eb25,[Ledu.cmu.lti.nlp.amr.Entity;@62435e70))
AMR:
(p / person, mod, e / each)
(r / reserve-01, ARG0, c / civil)
(r / reserve-01, ARG1, a / any)
(s / side, poss, p / person)
(s2 / say-01, ARG0, p / person)
(s2 / say-01, ARG1, r / reserve-01)
(u / use-01, ARG1, r / reserve-01)

Decoded in 191,342 microseconds
Sentence: General Julio Ramon Quintero viloria is commander of the reserves.

NER Entity: (person :name (name :op "Julio" :op "Ramon" :op "Quintero"))
Spans:
Span 6-7:  commander => (have-org-role-91 :ARG2 commander)
Span 1-4:  Julio Ramon Quintero => (person :name (name :op "Julio" :op "Ramon" :op "Quintero"))
Span 9-10:  reserves => reserve-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  commander => command-02
Oracle Span 0-1:  General => (have-org-role-91 :ARG2 general)
Oracle Span 1-5:  Julio Ramon Quintero viloria => (person :name (name :op "Viloria" :op "Quintero" :op "Ramon" :op "Julio"))
Oracle Span 9-10:  reserves => reserve

Incorrect span: reserves => reserve-01
Incorrect span: commander => (have-org-role-91 :ARG2 commander)
Extra span: Julio Ramon Quintero => (person :name (name :op "Julio" :op "Ramon" :op "Quintero"))
Missing span: Julio Ramon Quintero viloria => (person :name (name :op "Viloria" :op "Quintero" :op "Ramon" :op "Julio"))
Missing span: commander => command-02
Missing span: reserves => reserve
Missing span: General => (have-org-role-91 :ARG2 general)
Dependencies:
1	General	_	NNP	NNP	_	5	nn	_	_
2	Julio	_	NNP	NNP	_	5	nn	_	_
3	Ramon	_	NNP	NNP	_	5	nn	_	_
4	Quintero	_	NNP	NNP	_	5	nn	_	_
5	viloria	_	NNP	NNP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	commander	_	NN	NN	_	0	root	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	reserves	_	NNS	NNS	_	8	pobj	_	_
11	.	_	.	.	_	7	punct	_	_

Oracle:
(c2 / command-02, ARG0, p / person)
(c2 / command-02, ARG1, r / reserve)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG2, g / general)
(n / name, op, "Julio")
(n / name, op, "Quintero")
(n / name, op, "Ramon")
(n / name, op, "Viloria")
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),reserves,reserve-01,false), Span(6,7,List(2, 1),commander,(have-org-role-91 :ARG2 commander),false), Span(1,4,List(7, 6, 5, 4, 3),Julio Ramon Quintero,(person :name (name :op "Julio" :op "Ramon" :op "Quintero")),false)),Map(2 -> commander, 5 -> "Julio", 7 -> "Quintero", 1 -> have-org-role-91, 4 -> name, 6 -> "Ramon", 0 -> reserve-01, 3 -> person),Map(n -> name, h -> have-org-role-91, p -> person, r -> reserve-01, c -> commander))),[Ljava.lang.String;@339bf286,Annotation([Ljava.lang.String;@38be305c,[Ljava.lang.String;@269f4bad,[Ljava.lang.String;@5ed731d0),Annotation([Ljava.lang.String;@3234f74e,[Ljava.lang.String;@7bc10d84,[Ledu.cmu.lti.nlp.amr.Dependency;@275fe372),Annotation([Ljava.lang.String;@40e10ff8,[Ljava.lang.String;@557a1e2d,[Ljava.lang.String;@26a4842b),Annotation([Ljava.lang.String;@7e38a7fe,[Ljava.lang.String;@366ef90e,[Ledu.cmu.lti.nlp.amr.Entity;@33e01298))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, r / reserve-01)
(h / have-org-role-91, ARG2, c / commander)
(n / name, op, "Julio")
(n / name, op, "Quintero")
(n / name, op, "Ramon")
(p / person, name, n / name)

Decoded in 30,706 microseconds
Sentence: Quintero said in an interview that the armed forces hope to train 50000 civilians over 20 weekends in the second half of 050000 and could train 300000 more in 060000.

NER Entity: (person :name (name :op "Quintero"))
mkDayMonthYear(050000,00,00,05)
mkDayMonthYear(300000,00,00,30)
mkDayMonthYear(060000,00,00,06)
mkDayMonthYear(060000,00,00,06)
mkDayMonthYear(300000,00,00,30)
mkDayMonthYear(050000,00,00,05)
Spans:
Span 22-23:  050000 => (date-entity :year 2005)
Span 29-30:  060000 => (date-entity :year 2006)
Span 26-27:  300000 => 300000
Span 12-13:  50000 => 50000
Span 7-8:  armed => arm-01
Span 13-14:  civilians => civilian
Span 24-25:  could => possible
Span 9-10:  hope => hope-01
Span 4-5:  interview => interview-01
Span 1-2:  said => say-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 22-23:  050000 => (date-entity :year 2005)
Oracle Span 29-30:  060000 => (date-entity :year 2006)
Oracle Span 15-16:  20 => 20
Oracle Span 26-27:  300000 => 300000
Oracle Span 12-13:  50000 => 50000
Oracle Span 23-24:  and => and
Oracle Span 7-8:  armed => arm-01
Oracle Span 13-14:  civilians => civilian
Oracle Span 24-25:  could => possible
Oracle Span 8-9:  forces => force
Oracle Span 20-21:  half => half
Oracle Span 9-10:  hope => hope-01
Oracle Span 4-5:  interview => interview-01
Oracle Span 27-28:  more => more
Oracle Span 0-1:  Quintero => (person :name (name :op "Quintero"))
Oracle Span 1-2:  said => say-01
Oracle Span 11-12:  train => train-01
Oracle Span 25-26:  train => train-01
Oracle Span 16-17:  weekends => weekend

Missing span: Quintero => (person :name (name :op "Quintero"))
Missing span: and => and
Missing span: train => train-01
Missing span: more => more
Missing span: train => train-01
Missing span: half => half
Missing span: weekends => weekend
Missing span: 20 => 20
Missing span: forces => force
Dependencies:
1	Quintero	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	an	_	DT	DT	_	5	det	_	_
5	interview	_	NN	NN	_	3	pobj	_	_
6	that	_	IN	IN	_	10	mark	_	_
7	the	_	DT	DT	_	9	det	_	_
8	armed	_	JJ	JJ	_	9	amod	_	_
9	forces	_	NNS	NNS	_	10	nsubj	_	_
10	hope	_	VBP	VBP	_	2	ccomp	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	train	_	VB	VB	_	10	xcomp	_	_
13	50000	_	CD	CD	_	14	num	_	_
14	civilians	_	NNS	NNS	_	12	dobj	_	_
15	over	_	IN	IN	_	12	prep	_	_
16	20	_	CD	CD	_	17	num	_	_
17	weekends	_	NNS	NNS	_	15	pobj	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	21	det	_	_
20	second	_	JJ	JJ	_	21	amod	_	_
21	half	_	NN	NN	_	18	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	050000	_	CD	CD	_	22	pobj	_	_
24	and	_	CC	CC	_	10	cc	_	_
25	could	_	MD	MD	_	26	aux	_	_
26	train	_	VB	VB	_	10	conj	_	_
27	300000	_	CD	CD	_	28	npadvmod	_	_
28	more	_	RBR	RBR	_	29	advmod	_	_
29	in	_	IN	IN	_	26	prep	_	_
30	060000	_	CD	CD	_	29	pobj	_	_
31	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, h / hope-01)
(a / and, op, p2 / possible)
(a2 / arm-01, ARG1, f / force)
(c2 / civilian, mod, m / more)
(c2 / civilian, quant, 3 / 300000)
(d / date-entity, part, h2 / half)
(d / date-entity, year, 2005)
(d3 / date-entity, year, 2006)
(h / hope-01, ARG0, f / force)
(h / hope-01, ARG1, t / train-01)
(i / interview-01, ARG1, p / person)
(n / name, op, "Quintero")
(p / person, name, n / name)
(p2 / possible, domain, t2 / train-01)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / and)
(s / say-01, medium, i / interview-01)
(t / train-01, ARG0, f / force)
(t / train-01, duration, w / weekend)
(t / train-01, time, h2 / half)
(t2 / train-01, ARG0, f / force)
(t2 / train-01, ARG2, c2 / civilian)
(t2 / train-01, time, d3 / date-entity)
(w / weekend, quant, 2 / 20)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(1, 0),060000,(date-entity :year 2006),false), Span(26,27,List(2),300000,300000,false), Span(24,25,List(3),could,possible,false), Span(22,23,List(5, 4),050000,(date-entity :year 2005),false), Span(13,14,List(6),civilians,civilian,false), Span(12,13,List(7),50000,50000,false), Span(9,10,List(8),hope,hope-01,false), Span(7,8,List(9),armed,arm-01,false), Span(4,5,List(10),interview,interview-01,false), Span(1,2,List(11),said,say-01,false)),Map(2 -> 300000, 5 -> 2005, 8 -> hope-01, 7 -> 50000, 1 -> 2006, 11 -> say-01, 4 -> date-entity, 6 -> civilian, 9 -> arm-01, 0 -> date-entity, 10 -> interview-01, 3 -> possible),Map(h -> hope-01, 2 -> 2006, 5 -> 50000, s -> say-01, d -> date-entity, p -> possible, a -> arm-01, d2 -> date-entity, i -> interview-01, c -> civilian, 22 -> 2005, 3 -> 300000))),[Ljava.lang.String;@31e75d13,Annotation([Ljava.lang.String;@a5b0b86,[Ljava.lang.String;@4b3c354a,[Ljava.lang.String;@78fb9a67),Annotation([Ljava.lang.String;@73ff4fae,[Ljava.lang.String;@21aa6d6c,[Ledu.cmu.lti.nlp.amr.Dependency;@b968a76),Annotation([Ljava.lang.String;@2f9a01c1,[Ljava.lang.String;@2611b9a3,[Ljava.lang.String;@54227100),Annotation([Ljava.lang.String;@6b5894c8,[Ljava.lang.String;@1433046b,[Ledu.cmu.lti.nlp.amr.Entity;@3f446bef))
AMR:
(a / arm-01, ARG0, p / possible)
(a / arm-01, ARG1, c / civilian)
(d / date-entity, op, a / arm-01)
(d / date-entity, year, 2 / 2006)
(d2 / date-entity, year, 22 / 2005)
(h / hope-01, ARG0, 3 / 300000)
(h / hope-01, ARG1, p / possible)
(i / interview-01, ARG1, d2 / date-entity)
(s / say-01, ARG0, 5 / 50000)
(s / say-01, ARG1, h / hope-01)
(s / say-01, time, i / interview-01)

Decoded in 247,732 microseconds
Sentence: Quintero said that Venezuelans don't want to be the colony of any empire and have to be ready for any possibility.

NER Entity: (person :name (name :op "Quintero"))
NER Entity: (thing :name (name :op "Venezuelans"))
Spans:
Span 20-21:  any => any
Span 12-13:  any => any
Span 10-11:  colony => colony
Span 21-22:  possibility => possible
Span 18-19:  ready => ready-01
Span 1-2:  said => say-01
Span 6-7:  want => want-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 12-13:  any => any
Oracle Span 10-11:  colony => colony
Oracle Span 13-14:  empire => empire
Oracle Span 21-22:  possibility => possible
Oracle Span 0-1:  Quintero => (person :name (name :op "Quintero"))
Oracle Span 18-19:  ready => ready-01
Oracle Span 1-2:  said => say-01
Oracle Span 3-4:  Venezuelans => (person :mod (country :name (name :op "Venezuela")))
Oracle Span 6-7:  want => want-01

Extra span: any => any
Missing span: Quintero => (person :name (name :op "Quintero"))
Missing span: Venezuelans => (person :mod (country :name (name :op "Venezuela")))
Missing span: and => and
Missing span: empire => empire
Dependencies:
1	Quintero	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	Venezuelans	_	NNP	NNP	_	7	nsubj	_	_
5	do	_	VBP	VBP	_	7	aux	_	_
6	n't	_	RB	RB	_	7	neg	_	_
7	want	_	VB	VB	_	2	ccomp	_	_
8	to	_	TO	TO	_	11	aux	_	_
9	be	_	VB	VB	_	11	cop	_	_
10	the	_	DT	DT	_	11	det	_	_
11	colony	_	NN	NN	_	7	xcomp	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	any	_	DT	DT	_	14	det	_	_
14	empire	_	NN	NN	_	12	pobj	_	_
15	and	_	CC	CC	_	11	cc	_	_
16	have	_	VB	VB	_	11	conj	_	_
17	to	_	TO	TO	_	19	aux	_	_
18	be	_	VB	VB	_	19	cop	_	_
19	ready	_	JJ	JJ	_	16	xcomp	_	_
20	for	_	IN	IN	_	19	prep	_	_
21	any	_	DT	DT	_	22	det	_	_
22	possibility	_	NN	NN	_	20	pobj	_	_
23	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, w / want-01)
(c / country, name, n2 / name)
(c2 / colony, poss, e / empire)
(e / empire, mod, a2 / any)
(n / name, op, "Quintero")
(n2 / name, op, "Venezuela")
(p / person, name, n / name)
(p2 / person, mod, c / country)
(p3 / possible, mod, a2 / any)
(r / ready-01, ARG1, p2 / person)
(r / ready-01, ARG2, p3 / possible)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / and)
(w / want-01, ARG0, p2 / person)
(w / want-01, ARG1, c2 / colony)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),possibility,possible,false), Span(20,21,List(1),any,any,false), Span(18,19,List(2),ready,ready-01,false), Span(12,13,List(3),any,any,false), Span(10,11,List(4),colony,colony,false), Span(6,7,List(5),want,want-01,false), Span(1,2,List(6),said,say-01,false)),Map(2 -> ready-01, 5 -> want-01, 1 -> any, 4 -> colony, 6 -> say-01, 0 -> possible, 3 -> any),Map(w -> want-01, s -> say-01, p -> possible, a -> any, a2 -> any, r -> ready-01, c -> colony))),[Ljava.lang.String;@7829b776,Annotation([Ljava.lang.String;@5778826f,[Ljava.lang.String;@5b64c4b7,[Ljava.lang.String;@4763c727),Annotation([Ljava.lang.String;@72445aba,[Ljava.lang.String;@61bcd567,[Ledu.cmu.lti.nlp.amr.Dependency;@1c80e49b),Annotation([Ljava.lang.String;@458342d3,[Ljava.lang.String;@15c25153,[Ljava.lang.String;@1252b961),Annotation([Ljava.lang.String;@9ed238c,[Ljava.lang.String;@56276db8,[Ledu.cmu.lti.nlp.amr.Entity;@51e8e6e6))
AMR:
(p / possible, mod, a / any)
(r / ready-01, ARG1, c / colony)
(r / ready-01, ARG2, p / possible)
(s / say-01, ARG1, w / want-01)
(w / want-01, ARG0, a2 / any)
(w / want-01, ARG1, c / colony)

Decoded in 88,715 microseconds
Sentence: 100000 reservists in 050600 engaged with the Venezuelan navy in a massive war game to repel a stronger country that had invaded.

mkDayMonthYear(100000,00,00,10)
mkDayMonthYear(050600,00,06,05)
NER Entity: (thing :name (name :op "Venezuelan"))
mkDayMonthYear(050600,00,06,05)
mkDayMonthYear(100000,00,00,10)
Spans:
Span 3-4:  050600 => (date-entity :day 0 :month 6 :year 05)
Span 0-1:  100000 => (date-entity :day 0 :month 0 :year 10)
Span 18-19:  country => country
Span 4-5:  engaged => engage-01
Span 21-22:  invaded => invade-01
Span 11-12:  massive => massive
Span 8-9:  navy => navy
Span 17-18:  stronger => strong

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 3-4:  050600 => (date-entity :month 6 :year 2005)
Oracle Span 0-1:  100000 => 100000
Oracle Span 18-19:  country => country
Oracle Span 4-5:  engaged => engage-01
Oracle Span 13-14:  game => game
Oracle Span 21-22:  invaded => invade-01
Oracle Span 11-12:  massive => massive
Oracle Span 8-9:  navy => navy
Oracle Span 15-16:  repel => repel-01
Oracle Span 1-2:  reservists => reservist
Oracle Span 17-18:  stronger => strong
Oracle Span 7-8:  Venezuelan => (country :name (name :op "Venezuela"))
Oracle Span 12-13:  war => war

Incorrect span: 050600 => (date-entity :day 0 :month 6 :year 05)
Incorrect span: 100000 => (date-entity :day 0 :month 0 :year 10)
Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: 050600 => (date-entity :month 6 :year 2005)
Missing span: repel => repel-01
Missing span: game => game
Missing span: war => war
Missing span: reservists => reservist
Missing span: 100000 => 100000
Dependencies:
1	100000	_	CD	CD	_	2	num	_	_
2	reservists	_	NNS	NNS	_	5	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	050600	_	CD	CD	_	3	pobj	_	_
5	engaged	_	VBD	VBD	_	0	root	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	9	det	_	_
8	Venezuelan	_	JJ	JJ	_	9	amod	_	_
9	navy	_	NN	NN	_	6	pobj	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	14	det	_	_
12	massive	_	JJ	JJ	_	14	amod	_	_
13	war	_	NN	NN	_	14	nn	_	_
14	game	_	NN	NN	_	10	pobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	repel	_	VB	VB	_	5	xcomp	_	_
17	a	_	DT	DT	_	19	det	_	_
18	stronger	_	JJR	JJR	_	19	amod	_	_
19	country	_	NN	NN	_	16	dobj	_	_
20	that	_	WDT	WDT	_	22	nsubj	_	_
21	had	_	VBD	VBD	_	22	aux	_	_
22	invaded	_	VBN	VBN	_	19	rcmod	_	_
23	.	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, mod, s / strong)
(d / date-entity, month, 6)
(d / date-entity, year, 2005)
(e / engage-01, ARG2, g / game)
(e / engage-01, purpose, r2 / repel-01)
(e / engage-01, time, d / date-entity)
(g / game, mod, m / massive)
(g / game, mod, w / war)
(i / invade-01, ARG0, c2 / country)
(n / navy, mod, c / country)
(n2 / name, op, "Venezuela")
(r / reservist, quant, 1 / 100000)
(r2 / repel-01, ARG1, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),invaded,invade-01,false), Span(18,19,List(1),country,country,false), Span(17,18,List(2),stronger,strong,false), Span(11,12,List(3),massive,massive,false), Span(8,9,List(4),navy,navy,false), Span(4,5,List(5),engaged,engage-01,false), Span(3,4,List(9, 8, 7, 6),050600,(date-entity :day 0 :month 6 :year 05),false), Span(0,1,List(13, 12, 11, 10),100000,(date-entity :day 0 :month 0 :year 10),false)),Map(2 -> strong, 5 -> engage-01, 12 -> 0, 8 -> 6, 7 -> 0, 1 -> country, 4 -> navy, 11 -> 0, 6 -> date-entity, 0 -> invade-01, 9 -> 05, 3 -> massive, 10 -> date-entity, 13 -> 10),Map(e -> engage-01, n -> navy, 03 -> 0, s -> strong, m -> massive, d -> date-entity, 1 -> 10, d2 -> date-entity, 02 -> 05, i -> invade-01, c -> country, 6 -> 6, 0 -> 0, 04 -> 0))),[Ljava.lang.String;@56f6d40b,Annotation([Ljava.lang.String;@36676c1a,[Ljava.lang.String;@5b408dc3,[Ljava.lang.String;@4d098f9b),Annotation([Ljava.lang.String;@2dbf4cbd,[Ljava.lang.String;@20b5f2ac,[Ledu.cmu.lti.nlp.amr.Dependency;@7fc44dec),Annotation([Ljava.lang.String;@7e3060d8,[Ljava.lang.String;@293d0107,[Ljava.lang.String;@2692b61e),Annotation([Ljava.lang.String;@7b64240d,[Ljava.lang.String;@62fad19,[Ledu.cmu.lti.nlp.amr.Entity;@47dbb1e2))
AMR:
(c / country, mod, s / strong)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 02 / 05)
(d2 / date-entity, day, 03 / 0)
(d2 / date-entity, month, 04 / 0)
(d2 / date-entity, year, 1 / 10)
(e / engage-01, ARG0, m / massive)
(e / engage-01, ARG1, c / country)
(e / engage-01, ARG2, n / navy)
(e / engage-01, time, d / date-entity)
(i / invade-01, ARG0, d2 / date-entity)
(i / invade-01, ARG1, c / country)

Decoded in 275,354 microseconds
Sentence: 40 employees of the state oil company participated in a similar exercise with 1200 soldiers in 050600.

mkDayMonthYear(050600,00,06,05)
mkDayMonthYear(050600,00,06,05)
Spans:
Span 16-17:  050600 => (date-entity :day 0 :month 6 :year 05)
Span 13-14:  1200 => 1200
Span 0-1:  40 => 40
Span 6-7:  company => company
Span 1-2:  employees => (person :ARG1-of employ-01)
Span 5-6:  oil => oil
Span 7-8:  participated => participate-01
Span 14-15:  soldiers => soldier

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 16-17:  050600 => (date-entity :month 6 :year 2005)
Oracle Span 13-14:  1200 => 1200
Oracle Span 0-1:  40 => 40
Oracle Span 6-7:  company => company
Oracle Span 1-2:  employees => (person :ARG1-of employ-01)
Oracle Span 11-12:  exercise => exercise
Oracle Span 5-6:  oil => oil
Oracle Span 7-8:  participated => participate-01
Oracle Span 14-15:  soldiers => soldier
Oracle Span 4-5:  state => state

Incorrect span: 050600 => (date-entity :day 0 :month 6 :year 05)
Missing span: 050600 => (date-entity :month 6 :year 2005)
Missing span: exercise => exercise
Missing span: state => state
Dependencies:
1	40	_	CD	CD	_	2	num	_	_
2	employees	_	NNS	NNS	_	8	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	7	det	_	_
5	state	_	NN	NN	_	7	nn	_	_
6	oil	_	NN	NN	_	7	nn	_	_
7	company	_	NN	NN	_	3	pobj	_	_
8	participated	_	VBD	VBD	_	0	root	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	a	_	DT	DT	_	12	det	_	_
11	similar	_	JJ	JJ	_	12	amod	_	_
12	exercise	_	NN	NN	_	9	pobj	_	_
13	with	_	IN	IN	_	8	prep	_	_
14	1200	_	CD	CD	_	15	num	_	_
15	soldiers	_	NNS	NNS	_	13	pobj	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	050600	_	CD	CD	_	16	pobj	_	_
18	.	_	.	.	_	8	punct	_	_

Oracle:
(c / company, mod, o / oil)
(c / company, mod, s / state)
(d / date-entity, month, 6)
(d / date-entity, year, 2005)
(e / employ-01, ARG0, c / company)
(e / employ-01, ARG1, p2 / person)
(p / participate-01, ARG0, p2 / person)
(p / participate-01, ARG1, e2 / exercise)
(p / participate-01, time, d / date-entity)
(p2 / person, accompanier, s2 / soldier)
(p2 / person, quant, 4 / 40)
(s2 / soldier, quant, 1 / 1200)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(3, 2, 1, 0),050600,(date-entity :day 0 :month 6 :year 05),false), Span(14,15,List(4),soldiers,soldier,false), Span(13,14,List(5),1200,1200,false), Span(7,8,List(6),participated,participate-01,false), Span(6,7,List(7),company,company,false), Span(5,6,List(8),oil,oil,false), Span(1,2,List(10, 9),employees,(person :ARG1-of employ-01),false), Span(0,1,List(11),40,40,false)),Map(2 -> 6, 5 -> 1200, 8 -> oil, 7 -> company, 1 -> 0, 11 -> 40, 4 -> soldier, 6 -> participate-01, 9 -> person, 0 -> date-entity, 10 -> employ-01, 3 -> 05),Map(e -> employ-01, p2 -> person, s -> soldier, d -> date-entity, p -> participate-01, 1 -> 1200, 4 -> 40, 02 -> 05, c -> company, 6 -> 6, o -> oil, 0 -> 0))),[Ljava.lang.String;@74cadd41,Annotation([Ljava.lang.String;@2e54db99,[Ljava.lang.String;@55e8ec2f,[Ljava.lang.String;@4f2613d1),Annotation([Ljava.lang.String;@6d24ffa1,[Ljava.lang.String;@65a4798f,[Ledu.cmu.lti.nlp.amr.Dependency;@773f7880),Annotation([Ljava.lang.String;@878452d,[Ljava.lang.String;@426b6a74,[Ljava.lang.String;@4c51bb7),Annotation([Ljava.lang.String;@83298d7,[Ljava.lang.String;@42a9e5d1,[Ledu.cmu.lti.nlp.amr.Entity;@5b080f3a))
AMR:
(1 / 1200, poss, 4 / 40)
(c / company, mod, o / oil)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 02 / 05)
(e / employ-01, ARG1, p2 / person)
(e / employ-01, ARG2, c / company)
(p / participate-01, ARG0, p2 / person)
(p / participate-01, ARG1, s / soldier)
(p / participate-01, time, d / date-entity)
(p2 / person, quant, 4 / 40)

Decoded in 192,571 microseconds
Sentence: Pro-Chavez circles here warn of asymmetrical warfare.

Spans:
Span 3-4:  circles => circle
Span 8-9:  warfare => warfare
Span 5-6:  warn => warn-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 3-4:  circles => circle
Oracle Span 4-5:  here => here
Oracle Span 8-9:  warfare => warfare
Oracle Span 5-6:  warn => warn-01

Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: here => here
Dependencies:
1	Pro-Chavez	_	JJ	JJ	_	2	amod	_	_
2	circles	_	NNS	NNS	_	4	nsubj	_	_
3	here	_	RB	RB	_	4	advmod	_	_
4	warn	_	VBP	VBP	_	0	root	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	asymmetrical	_	JJ	JJ	_	7	amod	_	_
7	warfare	_	NN	NN	_	5	pobj	_	_
8	.	_	.	.	_	4	punct	_	_

Oracle:
(c / circle, location, h / here)
(n / name, op, "Chavez")
(p / person, name, n / name)
(w / warn-01, ARG0, c / circle)
(w / warn-01, ARG1, w2 / warfare)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),warfare,warfare,false), Span(5,6,List(1),warn,warn-01,false), Span(3,4,List(2),circles,circle,false)),Map(2 -> circle, 1 -> warn-01, 0 -> warfare),Map(w -> warfare, w2 -> warn-01, c -> circle))),[Ljava.lang.String;@773cbf4f,Annotation([Ljava.lang.String;@6b54655f,[Ljava.lang.String;@665e9289,[Ljava.lang.String;@7d3430a7),Annotation([Ljava.lang.String;@6f603e89,[Ljava.lang.String;@2756c0a7,[Ledu.cmu.lti.nlp.amr.Dependency;@350ec41e),Annotation([Ljava.lang.String;@69637b10,[Ljava.lang.String;@71984c3,[Ljava.lang.String;@165b2f7f),Annotation([Ljava.lang.String;@5536379e,[Ljava.lang.String;@277f7dd3,[Ledu.cmu.lti.nlp.amr.Entity;@6c8bca63))
AMR:
(w2 / warn-01, ARG0, c / circle)
(w2 / warn-01, ARG1, w / warfare)

Decoded in 16,613 microseconds
Sentence: Asymmetrical warfare is a term coined by US military strategists to describe a conflict between unequal combatants where the weaker side employs guerrilla tactics.

NER Entity: (country :name (name :op "US"))
Spans:
Span 13-14:  conflict => conflict-01
Span 21-22:  employs => employ-01
Span 22-23:  guerrilla => guerrilla
Span 20-21:  side => side
Span 9-10:  strategists => strategize-01
Span 23-24:  tactics => tactic
Span 1-2:  warfare => warfare
Span 19-20:  weaker => weak

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 5-6:  coined => coin-01
Oracle Span 16-17:  combatants => (person :ARG0-of combat-01)
Oracle Span 13-14:  conflict => conflict-01
Oracle Span 11-12:  describe => describe-01
Oracle Span 21-22:  employs => employ-02
Oracle Span 22-23:  guerrilla => guerrilla
Oracle Span 8-9:  military => (have-org-role-91 :ARG1 military)
Oracle Span 20-21:  side => side
Oracle Span 9-10:  strategists => strategize-01
Oracle Span 23-24:  tactics => tactic
Oracle Span 4-5:  term => term
Oracle Span 15-16:  unequal => equal
Oracle Span 7-8:  US => (country :name (name :op "US"))
Oracle Span 1-2:  warfare => warfare
Oracle Span 19-20:  weaker => weak

Incorrect span: employs => employ-01
Missing span: US => (country :name (name :op "US"))
Missing span: term => term
Missing span: describe => describe-01
Missing span: employs => employ-02
Missing span: unequal => equal
Missing span: coined => coin-01
Missing span: military => (have-org-role-91 :ARG1 military)
Missing span: combatants => (person :ARG0-of combat-01)
Dependencies:
1	Asymmetrical	_	JJ	JJ	_	2	amod	_	_
2	warfare	_	NN	NN	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	a	_	DT	DT	_	5	det	_	_
5	term	_	NN	NN	_	0	root	_	_
6	coined	_	VBN	VBN	_	5	vmod	_	_
7	by	_	IN	IN	_	6	prep	_	_
8	US	_	NNP	NNP	_	10	nn	_	_
9	military	_	JJ	JJ	_	10	amod	_	_
10	strategists	_	NNS	NNS	_	7	pobj	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	describe	_	VB	VB	_	6	xcomp	_	_
13	a	_	DT	DT	_	14	det	_	_
14	conflict	_	NN	NN	_	12	dobj	_	_
15	between	_	IN	IN	_	14	prep	_	_
16	unequal	_	JJ	JJ	_	17	amod	_	_
17	combatants	_	NNS	NNS	_	15	pobj	_	_
18	where	_	WRB	WRB	_	22	advmod	_	_
19	the	_	DT	DT	_	21	det	_	_
20	weaker	_	JJR	JJR	_	21	amod	_	_
21	side	_	NN	NN	_	22	nsubj	_	_
22	employs	_	VBZ	VBZ	_	12	advcl	_	_
23	guerrilla	_	NN	NN	_	24	nn	_	_
24	tactics	_	NNS	NNS	_	22	dobj	_	_
25	.	_	.	.	_	5	punct	_	_

Oracle:
(c / coin-01, ARG1, t / term)
(c2 / country, name, n / name)
(c3 / conflict-01, ARG0, p2 / person)
(c4 / combat-01, ARG0, p2 / person)
(d / describe-01, ARG0, t / term)
(d / describe-01, ARG1, c3 / conflict-01)
(e2 / employ-02, ARG0, s3 / side)
(e2 / employ-02, ARG1, t2 / tactic)
(e2 / employ-02, location, c3 / conflict-01)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG3, s / strategize-01)
(m / military, mod, c2 / country)
(n / name, op, "US")
(p2 / person, mod, e / equal)
(s3 / side, mod, w2 / weak)
(t / term, domain, w / warfare)
(t2 / tactic, mod, g / guerrilla)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),tactics,tactic,false), Span(22,23,List(1),guerrilla,guerrilla,false), Span(21,22,List(2),employs,employ-01,false), Span(20,21,List(3),side,side,false), Span(19,20,List(4),weaker,weak,false), Span(13,14,List(5),conflict,conflict-01,false), Span(9,10,List(6),strategists,strategize-01,false), Span(1,2,List(7),warfare,warfare,false)),Map(2 -> employ-01, 5 -> conflict-01, 7 -> warfare, 1 -> guerrilla, 4 -> weak, 6 -> strategize-01, 0 -> tactic, 3 -> side),Map(w -> weak, e -> employ-01, s2 -> strategize-01, t -> tactic, s -> side, g -> guerrilla, w2 -> warfare, c -> conflict-01))),[Ljava.lang.String;@2364305a,Annotation([Ljava.lang.String;@470a696f,[Ljava.lang.String;@1bc715b8,[Ljava.lang.String;@292d1c71),Annotation([Ljava.lang.String;@2b491fee,[Ljava.lang.String;@3f1c5af9,[Ledu.cmu.lti.nlp.amr.Dependency;@1c55f277),Annotation([Ljava.lang.String;@5ddabb18,[Ljava.lang.String;@3e8f7922,[Ljava.lang.String;@63192798),Annotation([Ljava.lang.String;@50eca7c6,[Ljava.lang.String;@58e6d4b8,[Ledu.cmu.lti.nlp.amr.Entity;@1de5f0ef))
AMR:
(c / conflict-01, ARG1, w2 / warfare)
(c / conflict-01, purpose, e / employ-01)
(e / employ-01, ARG0, s / side)
(e / employ-01, ARG1, t / tactic)
(s / side, mod, w / weak)
(s2 / strategize-01, ARG2, c / conflict-01)
(t / tactic, mod, g / guerrilla)

Decoded in 122,443 microseconds
Sentence: The US government has given $3.3 billion in mostly military aid to Colombia in the past 5 years.

NER Entity: (country :name (name :op "The" :op "US"))
NER Entity: (country :name (name :op "Colombia"))
Spans:
Span 11-12:  aid => aid-01
Span 13-14:  Colombia => (country :name (name :op "Colombia"))
Span 4-5:  given => give-01
Span 9-10:  mostly => most
Span 16-17:  past => past
Span 0-2:  The US => (country :name (name :op "The" :op "US"))
Span 18-19:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 17-18:  5 => 5
Oracle Span 11-12:  aid => aid-01
Oracle Span 13-14:  Colombia => (country :name (name :op "Colombia"))
Oracle Span 4-5:  given => give-01
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 10-11:  military => military
Oracle Span 9-10:  mostly => most
Oracle Span 16-17:  past => past
Oracle Span 1-2:  US => (country :name (name :op "US"))
Oracle Span 18-19:  years => (temporal-quantity :unit year)

Extra span: The US => (country :name (name :op "The" :op "US"))
Missing span: US => (country :name (name :op "US"))
Missing span: 5 => 5
Missing span: military => military
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	US	_	NNP	NNP	_	3	nn	_	_
3	government	_	NN	NN	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	given	_	VBN	VBN	_	0	root	_	_
6	$	_	$	$	_	5	dobj	_	_
7	3.3	_	CD	CD	_	8	number	_	_
8	billion	_	CD	CD	_	6	num	_	_
9	in	_	IN	IN	_	6	prep	_	_
10	mostly	_	RB	RB	_	12	advmod	_	_
11	military	_	JJ	JJ	_	12	amod	_	_
12	aid	_	NN	NN	_	9	pobj	_	_
13	to	_	TO	TO	_	5	prep	_	_
14	Colombia	_	NNP	NNP	_	13	pobj	_	_
15	in	_	IN	IN	_	5	prep	_	_
16	the	_	DT	DT	_	19	det	_	_
17	past	_	JJ	JJ	_	19	amod	_	_
18	5	_	CD	CD	_	19	num	_	_
19	years	_	NNS	NNS	_	15	pobj	_	_
20	.	_	.	.	_	5	punct	_	_

Oracle:
(a / aid-01, ARG0, g2 / government-organization)
(a / aid-01, ARG2, c2 / country)
(a / aid-01, degree, m3 / most)
(a / aid-01, mod, m2 / military)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(g / give-01, ARG0, g2 / government-organization)
(g / give-01, ARG2, c2 / country)
(g / give-01, time, p / past)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c / country)
(n / name, op, "US")
(n2 / name, op, "Colombia")
(p / past, op, t / temporal-quantity)
(t / temporal-quantity, quant, 5 / 5)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),years,(temporal-quantity :unit year),false), Span(16,17,List(2),past,past,false), Span(13,14,List(5, 4, 3),Colombia,(country :name (name :op "Colombia")),false), Span(11,12,List(6),aid,aid-01,false), Span(9,10,List(7),mostly,most,false), Span(4,5,List(8),given,give-01,false), Span(0,2,List(12, 11, 10, 9),The US,(country :name (name :op "The" :op "US")),false)),Map(2 -> past, 5 -> "Colombia", 12 -> "US", 8 -> give-01, 7 -> most, 1 -> year, 4 -> name, 11 -> "The", 6 -> aid-01, 0 -> temporal-quantity, 9 -> country, 3 -> country, 10 -> name),Map(n -> name, t -> temporal-quantity, m -> most, g -> give-01, p -> past, y -> year, a -> aid-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@376a312c,Annotation([Ljava.lang.String;@28d6290,[Ljava.lang.String;@6ca0256d,[Ljava.lang.String;@5ef0d29e),Annotation([Ljava.lang.String;@38f57b3d,[Ljava.lang.String;@51850751,[Ledu.cmu.lti.nlp.amr.Dependency;@3ce3db41),Annotation([Ljava.lang.String;@64df9a61,[Ljava.lang.String;@77602954,[Ljava.lang.String;@e260766),Annotation([Ljava.lang.String;@2c3dec30,[Ljava.lang.String;@34a97744,[Ledu.cmu.lti.nlp.amr.Entity;@4275c20c))
AMR:
(a / aid-01, ARG0, c2 / country)
(a / aid-01, ARG1, p / past)
(a / aid-01, ARG2, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(g / give-01, ARG1, m / most)
(g / give-01, ARG2, c / country)
(n / name, op, "Colombia")
(n2 / name, op, "The")
(n2 / name, op, "US")
(t / temporal-quantity, mod, p / past)
(t / temporal-quantity, unit, y / year)

Decoded in 153,670 microseconds
Sentence: Chavez loyalists fear that the US government could instigate a proxy war between Colombia and Venezuela as a way to oust Chavez and control Venezuelan oil.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Colombia"))
Spans:
Span 13-14:  Colombia => (country :name (name :op "Colombia"))
Span 23-24:  control => control-01
Span 7-8:  could => possible
Span 2-3:  fear => fear-01
Span 25-26:  oil => oil
Span 10-11:  proxy => proxy
Span 15-16:  Venezuela => (country :name (name :op "Venezuela"))
Span 18-19:  way => way

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 13-14:  Colombia => (country :name (name :op "Colombia"))
Oracle Span 23-24:  control => control-01
Oracle Span 7-8:  could => possible
Oracle Span 2-3:  fear => fear-01
Oracle Span 6-7:  government => (government-organization :ARG0-of govern-01)
Oracle Span 8-9:  instigate => instigate-01
Oracle Span 1-2:  loyalists => (person :ARG1-of loyal-41)
Oracle Span 25-26:  oil => oil
Oracle Span 20-21:  oust => oust-01
Oracle Span 10-11:  proxy => proxy
Oracle Span 5-6:  US => (country :name (name :op "US"))
Oracle Span 15-16:  Venezuela => (country :name (name :op "Venezuela"))
Oracle Span 11-12:  war => war-01

Extra span: way => way
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: US => (country :name (name :op "US"))
Missing span: instigate => instigate-01
Missing span: and => and
Missing span: oust => oust-01
Missing span: war => war-01
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: loyalists => (person :ARG1-of loyal-41)
Dependencies:
1	Chavez	_	JJ	JJ	_	2	amod	_	_
2	loyalists	_	NNS	NNS	_	3	nsubj	_	_
3	fear	_	VBP	VBP	_	0	root	_	_
4	that	_	IN	IN	_	9	mark	_	_
5	the	_	DT	DT	_	7	det	_	_
6	US	_	NNP	NNP	_	7	nn	_	_
7	government	_	NN	NN	_	9	nsubj	_	_
8	could	_	MD	MD	_	9	aux	_	_
9	instigate	_	VB	VB	_	3	ccomp	_	_
10	a	_	DT	DT	_	12	det	_	_
11	proxy	_	JJ	JJ	_	12	amod	_	_
12	war	_	NN	NN	_	9	dobj	_	_
13	between	_	IN	IN	_	12	prep	_	_
14	Colombia	_	NNP	NNP	_	13	pobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	Venezuela	_	NNP	NNP	_	14	conj	_	_
17	as	_	IN	IN	_	9	prep	_	_
18	a	_	DT	DT	_	19	det	_	_
19	way	_	NN	NN	_	17	pobj	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	oust	_	VB	VB	_	19	vmod	_	_
22	Chavez	_	NNP	NNP	_	26	nn	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	control	_	NN	NN	_	22	conj	_	_
25	Venezuelan	_	JJ	JJ	_	26	amod	_	_
26	oil	_	NN	NN	_	21	dobj	_	_
27	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, instrument, i / instigate-01)
(a / and, op, c4 / control-01)
(a / and, op, o / oust-01)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(c4 / control-01, ARG0, g / government-organization)
(c4 / control-01, ARG1, o2 / oil)
(f / fear-01, ARG0, p / person)
(f / fear-01, ARG1, i / instigate-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / instigate-01, ARG0, g / government-organization)
(i / instigate-01, ARG1, w / war-01)
(i / instigate-01, mod, p4 / possible)
(l / loyal-41, ARG1, p / person)
(l / loyal-41, ARG2, p2 / person)
(n / name, op, "Chavez")
(n2 / name, op, "US")
(n3 / name, op, "Colombia")
(n4 / name, op, "Venezuela")
(o / oust-01, ARG0, g / government-organization)
(o / oust-01, ARG1, p2 / person)
(o2 / oil, source, c3 / country)
(p2 / person, name, n / name)
(w / war-01, ARG0, c2 / country)
(w / war-01, ARG1, c3 / country)
(w / war-01, mod, p3 / proxy)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),oil,oil,false), Span(23,24,List(1),control,control-01,false), Span(18,19,List(2),way,way,false), Span(15,16,List(5, 4, 3),Venezuela,(country :name (name :op "Venezuela")),false), Span(13,14,List(8, 7, 6),Colombia,(country :name (name :op "Colombia")),false), Span(10,11,List(9),proxy,proxy,false), Span(7,8,List(10),could,possible,false), Span(2,3,List(11),fear,fear-01,false)),Map(2 -> way, 5 -> "Venezuela", 8 -> "Colombia", 7 -> name, 1 -> control-01, 11 -> fear-01, 4 -> name, 6 -> country, 9 -> proxy, 0 -> oil, 10 -> possible, 3 -> country),Map(n -> name, w -> way, p2 -> possible, p -> proxy, c3 -> country, c -> control-01, f -> fear-01, o -> oil, n2 -> name, c2 -> country))),[Ljava.lang.String;@7c56e013,Annotation([Ljava.lang.String;@3fc9dfc5,[Ljava.lang.String;@40258c2f,[Ljava.lang.String;@2cac4385),Annotation([Ljava.lang.String;@6731787b,[Ljava.lang.String;@16f7b4af,[Ledu.cmu.lti.nlp.amr.Dependency;@7adf16aa),Annotation([Ljava.lang.String;@34a1d21f,[Ljava.lang.String;@58bf8650,[Ljava.lang.String;@73c60324),Annotation([Ljava.lang.String;@71ae31b0,[Ljava.lang.String;@4ba534b0,[Ledu.cmu.lti.nlp.amr.Entity;@6f0ca692))
AMR:
(c / control-01, ARG0, c3 / country)
(c / control-01, ARG1, o / oil)
(c2 / country, location, w / way)
(c2 / country, name, n / name)
(c2 / country, op, c / control-01)
(c3 / country, name, n2 / name)
(f / fear-01, ARG1, p2 / possible)
(f / fear-01, location, c3 / country)
(n / name, op, "Venezuela")
(n2 / name, op, "Colombia")
(p / proxy, op, c / control-01)

Decoded in 160,204 microseconds
Sentence: A senior US official in an interview dismissed the notion that the United States Government wants to invade Venezuela as complete and utter nonsense.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 6-7:  interview => interview-01
Span 17-18:  invade => invade-01
Span 1-2:  senior => senior
Span 12-14:  United States => (country :name (name :op "United" :op "States"))
Span 18-19:  Venezuela => (country :name (name :op "Venezuela"))
Span 15-16:  wants => want-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 20-21:  complete => complete
Oracle Span 7-8:  dismissed => dismiss-02
Oracle Span 14-15:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 6-7:  interview => interview-01
Oracle Span 17-18:  invade => invade-01
Oracle Span 23-24:  nonsense => nonsense
Oracle Span 9-10:  notion => notion
Oracle Span 3-4:  official => (have-org-role-91 :ARG2 official)
Oracle Span 1-2:  senior => senior
Oracle Span 12-14:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 2-3:  US => (country :name (name :op "US"))
Oracle Span 22-23:  utter => utter
Oracle Span 18-19:  Venezuela => (country :name (name :op "Venezuela"))
Oracle Span 15-16:  wants => want-01

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: US => (country :name (name :op "US"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: dismissed => dismiss-02
Missing span: nonsense => nonsense
Missing span: utter => utter
Missing span: complete => complete
Missing span: notion => notion
Missing span: official => (have-org-role-91 :ARG2 official)
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	A	_	DT	DT	_	4	det	_	_
2	senior	_	JJ	JJ	_	4	amod	_	_
3	US	_	NNP	NNP	_	4	nn	_	_
4	official	_	NN	NN	_	8	nsubj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	an	_	DT	DT	_	7	det	_	_
7	interview	_	NN	NN	_	5	pobj	_	_
8	dismissed	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	10	det	_	_
10	notion	_	NN	NN	_	8	dobj	_	_
11	that	_	IN	IN	_	16	mark	_	_
12	the	_	DT	DT	_	15	det	_	_
13	United	_	NNP	NNP	_	15	nn	_	_
14	States	_	NNPS	NNPS	_	15	nn	_	_
15	Government	_	NNP	NNP	_	16	nsubj	_	_
16	wants	_	VBZ	VBZ	_	8	ccomp	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	invade	_	VB	VB	_	16	xcomp	_	_
19	Venezuela	_	NNP	NNP	_	18	dobj	_	_
20	as	_	IN	IN	_	19	prep	_	_
21	complete	_	JJ	JJ	_	24	amod	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	utter	_	JJ	JJ	_	21	conj	_	_
24	nonsense	_	NN	NN	_	20	pobj	_	_
25	.	_	.	.	_	8	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c4 / country, name, n5 / name)
(d / dismiss-02, ARG1, n2 / notion)
(d / dismiss-02, ARG2, n4 / nonsense)
(d / dismiss-02, medium, i2 / interview-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c4 / country)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(i / invade-01, ARG0, g / government-organization)
(i / invade-01, ARG1, c2 / country)
(i2 / interview-01, ARG1, o / official)
(n / name, op, "US")
(n2 / notion, topic, w / want-01)
(n3 / name, op, "Venezuela")
(n4 / nonsense, mod, c3 / complete)
(n4 / nonsense, mod, u / utter)
(n5 / name, op, "States")
(n5 / name, op, "United")
(o / official, mod, s / senior)
(w / want-01, ARG0, g / government-organization)
(w / want-01, ARG1, i / invade-01)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false), Span(17,18,List(3),invade,invade-01,false), Span(15,16,List(4),wants,want-01,false), Span(12,14,List(8, 7, 6, 5),United States,(country :name (name :op "United" :op "States")),false), Span(6,7,List(9),interview,interview-01,false), Span(1,2,List(10),senior,senior,false)),Map(2 -> "Venezuela", 5 -> country, 8 -> "States", 7 -> "United", 1 -> name, 4 -> want-01, 6 -> name, 9 -> interview-01, 0 -> country, 10 -> senior, 3 -> invade-01),Map(w -> want-01, n -> name, s -> senior, i2 -> interview-01, i -> invade-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@2c104774,Annotation([Ljava.lang.String;@2cb3d0f7,[Ljava.lang.String;@4e517165,[Ljava.lang.String;@44e3760b),Annotation([Ljava.lang.String;@6a66a204,[Ljava.lang.String;@5860f3d7,[Ledu.cmu.lti.nlp.amr.Dependency;@1d7f7be7),Annotation([Ljava.lang.String;@42f3156d,[Ljava.lang.String;@1ddae9b5,[Ljava.lang.String;@427b5f92),Annotation([Ljava.lang.String;@24bdb479,[Ljava.lang.String;@7e3f95fe,[Ledu.cmu.lti.nlp.amr.Entity;@34625ccd))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(i / invade-01, ARG1, c / country)
(i2 / interview-01, ARG1, w / want-01)
(n / name, op, "Venezuela")
(n2 / name, op, "States")
(n2 / name, op, "United")
(s / senior, op, i / invade-01)
(w / want-01, ARG0, c2 / country)
(w / want-01, ARG1, i / invade-01)

Decoded in 91,371 microseconds
Sentence: The official said the chavista side wishes to make the relationship negative because they've made a political calculation that Mr. Chavez reached power by constantly being in confrontation with the US.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 12-13:  because => cause-01
Span 28-29:  confrontation => confront-01
Span 11-12:  negative => negative
Span 23-24:  power => power
Span 22-23:  reached => reach-01
Span 10-11:  relationship => relationship
Span 2-3:  said => say-01
Span 5-6:  side => side
Span 6-7:  wishes => wish-01

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 12-13:  because => cause-01
Oracle Span 18-19:  calculation => calculate-01
Oracle Span 21-22:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 28-29:  confrontation => confront-01
Oracle Span 25-26:  constantly => constant
Oracle Span 8-9:  make => make-02
Oracle Span 20-21:  Mr. => "Mr."
Oracle Span 11-12:  negative => negative
Oracle Span 1-2:  official => (have-org-role-91 :ARG2 official)
Oracle Span 17-18:  political => politics
Oracle Span 23-24:  power => power
Oracle Span 22-23:  reached => reach-01
Oracle Span 10-11:  relationship => relationship
Oracle Span 2-3:  said => say-01
Oracle Span 5-6:  side => side
Oracle Span 31-32:  US => (country :name (name :op "US"))
Oracle Span 6-7:  wishes => wish-01

Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: US => (country :name (name :op "US"))
Missing span: Mr. => "Mr."
Missing span: make => make-02
Missing span: official => (have-org-role-91 :ARG2 official)
Missing span: calculation => calculate-01
Missing span: political => politics
Missing span: constantly => constant
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	official	_	NN	NN	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	chavista	_	NN	NN	_	6	nn	_	_
6	side	_	NN	NN	_	7	nsubj	_	_
7	wishes	_	VBZ	VBZ	_	3	ccomp	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	make	_	VB	VB	_	7	xcomp	_	_
10	the	_	DT	DT	_	11	det	_	_
11	relationship	_	NN	NN	_	16	nsubj	_	_
12	negative	_	JJ	JJ	_	16	dep	_	_
13	because	_	IN	IN	_	16	mark	_	_
14	they	_	PRP	PRP	_	16	nsubj	_	_
15	've	_	VBP	VBP	_	16	aux	_	_
16	made	_	VBN	VBN	_	9	xcomp	_	_
17	a	_	DT	DT	_	19	det	_	_
18	political	_	JJ	JJ	_	19	amod	_	_
19	calculation	_	NN	NN	_	16	dobj	_	_
20	that	_	IN	IN	_	23	mark	_	_
21	Mr.	_	NNP	NNP	_	22	nn	_	_
22	Chavez	_	NNP	NNP	_	23	nsubj	_	_
23	reached	_	VBD	VBD	_	16	ccomp	_	_
24	power	_	NN	NN	_	23	dobj	_	_
25	by	_	IN	IN	_	23	prep	_	_
26	constantly	_	RB	RB	_	27	advmod	_	_
27	being	_	VBG	VBG	_	25	pcomp	_	_
28	in	_	IN	IN	_	27	prep	_	_
29	confrontation	_	NN	NN	_	28	pobj	_	_
30	with	_	IN	IN	_	27	prep	_	_
31	the	_	DT	DT	_	32	det	_	_
32	US	_	NNP	NNP	_	30	pobj	_	_
33	.	_	.	.	_	3	punct	_	_

Oracle:
(c / cause-01, ARG0, c2 / calculate-01)
(c / cause-01, ARG1, w / wish-01)
(c2 / calculate-01, ARG0, s2 / side)
(c2 / calculate-01, ARG1, r2 / reach-01)
(c2 / calculate-01, mod, p4 / politics)
(c3 / confront-01, ARG1, c4 / country)
(c3 / confront-01, manner, c5 / constant)
(c4 / country, name, n4 / name)
(h / have-org-role-91, ARG2, o / official)
(m / make-02, ARG0, s2 / side)
(m / make-02, ARG1, r / relationship)
(n / name, op, "Chavez")
(n4 / name, op, "US")
(p / person, name, n / name)
(r / relationship, mod, n2 / negative)
(r2 / reach-01, ARG1, p3 / power)
(r2 / reach-01, instrument, c3 / confront-01)
(s / say-01, ARG1, w / wish-01)
(s2 / side, mod, p / person)
(w / wish-01, ARG0, s2 / side)
(w / wish-01, ARG1, m / make-02)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),confrontation,confront-01,false), Span(23,24,List(1),power,power,false), Span(22,23,List(2),reached,reach-01,false), Span(12,13,List(3),because,cause-01,false), Span(11,12,List(4),negative,negative,false), Span(10,11,List(5),relationship,relationship,false), Span(6,7,List(6),wishes,wish-01,false), Span(5,6,List(7),side,side,false), Span(2,3,List(8),said,say-01,false)),Map(2 -> reach-01, 5 -> relationship, 8 -> say-01, 7 -> side, 1 -> power, 4 -> negative, 6 -> wish-01, 0 -> confront-01, 3 -> cause-01),Map(w -> wish-01, n -> negative, s2 -> say-01, s -> side, r2 -> relationship, p -> power, r -> reach-01, c -> confront-01, c2 -> cause-01))),[Ljava.lang.String;@2c7d121c,Annotation([Ljava.lang.String;@65aa6596,[Ljava.lang.String;@67389cb8,[Ljava.lang.String;@419a20a6),Annotation([Ljava.lang.String;@533377b,[Ljava.lang.String;@3383649e,[Ledu.cmu.lti.nlp.amr.Dependency;@10fde30a),Annotation([Ljava.lang.String;@f27ea3,[Ljava.lang.String;@1ce61929,[Ljava.lang.String;@346939bf),Annotation([Ljava.lang.String;@4bf3798b,[Ljava.lang.String;@58670130,[Ledu.cmu.lti.nlp.amr.Entity;@74e47444))
AMR:
(c / confront-01, ARG1, r / reach-01)
(c2 / cause-01, ARG0, r2 / relationship)
(c2 / cause-01, ARG1, n / negative)
(r / reach-01, ARG0, n / negative)
(r / reach-01, ARG1, p / power)
(s2 / say-01, ARG1, w / wish-01)
(w / wish-01, ARG0, s / side)
(w / wish-01, ARG1, r2 / relationship)

Decoded in 429,343 microseconds
Sentence: Another development that has troubled the United States is Chavez's rollback of military cooperation and joint exercises.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 0-1:  Another => another
Span 14-15:  cooperation => cooperate-01
Span 1-2:  development => develop-02
Span 17-18:  exercises => exercise
Span 16-17:  joint => joint
Span 6-8:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 0-1:  Another => another
Oracle Span 9-10:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 14-15:  cooperation => cooperate-01
Oracle Span 1-2:  development => develop-01
Oracle Span 17-18:  exercises => exercise
Oracle Span 16-17:  joint => joint
Oracle Span 13-14:  military => military
Oracle Span 11-12:  rollback => roll-00
Oracle Span 4-5:  troubled => trouble-01
Oracle Span 6-8:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: development => develop-02
Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: and => and
Missing span: military => military
Missing span: troubled => trouble-01
Missing span: development => develop-01
Missing span: rollback => roll-00
Dependencies:
1	Another	_	DT	DT	_	2	det	_	_
2	development	_	NN	NN	_	12	nsubj	_	_
3	that	_	WDT	WDT	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	troubled	_	VBN	VBN	_	2	rcmod	_	_
6	the	_	DT	DT	_	8	det	_	_
7	United	_	NNP	NNP	_	8	nn	_	_
8	States	_	NNPS	NNPS	_	5	dobj	_	_
9	is	_	VBZ	VBZ	_	12	cop	_	_
10	Chavez	_	NNP	NNP	_	12	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	rollback	_	NN	NN	_	0	root	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	military	_	JJ	JJ	_	15	amod	_	_
15	cooperation	_	NN	NN	_	13	pobj	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	joint	_	JJ	JJ	_	18	amod	_	_
18	exercises	_	NNS	NNS	_	15	conj	_	_
19	.	_	.	.	_	12	punct	_	_

Oracle:
(a / and, op, c / cooperate-01)
(a / and, op, e / exercise)
(c / cooperate-01, mod, m / military)
(c2 / country, name, n2 / name)
(d / develop-01, ARG2, r / roll-00)
(d / develop-01, mod, a2 / another)
(e / exercise, mod, j / joint)
(n / name, op, "Chavez")
(n2 / name, op, "States")
(n2 / name, op, "United")
(p / person, name, n / name)
(r / roll-00, ARG0, p / person)
(r / roll-00, ARG1, a / and)
(t / trouble-01, ARG0, d / develop-01)
(t / trouble-01, ARG1, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),exercises,exercise,false), Span(16,17,List(1),joint,joint,false), Span(14,15,List(2),cooperation,cooperate-01,false), Span(6,8,List(6, 5, 4, 3),United States,(country :name (name :op "United" :op "States")),false), Span(1,2,List(7),development,develop-02,false), Span(0,1,List(8),Another,another,false)),Map(2 -> cooperate-01, 5 -> "United", 8 -> another, 7 -> develop-02, 1 -> joint, 4 -> name, 6 -> "States", 0 -> exercise, 3 -> country),Map(n -> name, e -> exercise, j -> joint, d -> develop-02, a -> another, c -> cooperate-01, c2 -> country))),[Ljava.lang.String;@9bd0fa6,Annotation([Ljava.lang.String;@59d2103b,[Ljava.lang.String;@39dcf4b0,[Ljava.lang.String;@6e4de19b),Annotation([Ljava.lang.String;@f6c03cb,[Ljava.lang.String;@46f699d5,[Ledu.cmu.lti.nlp.amr.Dependency;@18518ccf),Annotation([Ljava.lang.String;@1991f767,[Ljava.lang.String;@768ccdc5,[Ljava.lang.String;@4c6daf0),Annotation([Ljava.lang.String;@10650953,[Ljava.lang.String;@659eef7,[Ledu.cmu.lti.nlp.amr.Entity;@162be91c))
AMR:
(c / cooperate-01, ARG0, c2 / country)
(c / cooperate-01, ARG1, e / exercise)
(c2 / country, name, n / name)
(d / develop-02, ARG0, c2 / country)
(d / develop-02, mod, a / another)
(e / exercise, mod, j / joint)
(n / name, op, "States")
(n / name, op, "United")

Decoded in 70,098 microseconds
Sentence: The US military had a Cooperation Office for 50 years in a Venezuelan Fort.

NER Entity: (country :name (name :op "US"))
NER Entity: (organization :name (name :op "Cooperation" :op "Office"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (organization :name (name :op "Fort"))
Spans:
Span 8-9:  50 => 50
Span 5-7:  Cooperation Office => (organization :name (name :op "Cooperation" :op "Office"))
Span 9-10:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  50 => 50
Oracle Span 5-7:  Cooperation Office => (organization :name (name :op "Office" :op "Cooperation"))
Oracle Span 13-14:  Fort => fort
Oracle Span 3-4:  had => have-03
Oracle Span 2-3:  military => military
Oracle Span 1-2:  US => (country :name (name :op "US"))
Oracle Span 12-13:  Venezuelan => (country :name (name :op "Venezuela"))
Oracle Span 9-10:  years => (temporal-quantity :unit year)

Incorrect span: Cooperation Office => (organization :name (name :op "Cooperation" :op "Office"))
Missing span: US => (country :name (name :op "US"))
Missing span: Cooperation Office => (organization :name (name :op "Office" :op "Cooperation"))
Missing span: Venezuelan => (country :name (name :op "Venezuela"))
Missing span: had => have-03
Missing span: Fort => fort
Missing span: military => military
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	US	_	NNP	NNP	_	3	nn	_	_
3	military	_	NN	NN	_	4	nsubj	_	_
4	had	_	VBD	VBD	_	0	root	_	_
5	a	_	DT	DT	_	7	det	_	_
6	Cooperation	_	NNP	NNP	_	7	nn	_	_
7	Office	_	NNP	NNP	_	4	dobj	_	_
8	for	_	IN	IN	_	7	prep	_	_
9	50	_	CD	CD	_	10	num	_	_
10	years	_	NNS	NNS	_	8	pobj	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	a	_	DT	DT	_	14	det	_	_
13	Venezuelan	_	JJ	JJ	_	14	amod	_	_
14	Fort	_	NNP	NNP	_	11	pobj	_	_
15	.	_	.	.	_	4	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(f / fort, mod, c2 / country)
(h / have-03, ARG0, m / military)
(h / have-03, ARG1, o / organization)
(h / have-03, duration, t / temporal-quantity)
(h / have-03, location, f / fort)
(m / military, mod, c / country)
(n / name, op, "US")
(n2 / name, op, "Cooperation")
(n2 / name, op, "Office")
(n3 / name, op, "Venezuela")
(o / organization, name, n2 / name)
(t / temporal-quantity, quant, 5 / 50)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(1, 0),years,(temporal-quantity :unit year),false), Span(8,9,List(2),50,50,false), Span(5,7,List(6, 5, 4, 3),Cooperation Office,(organization :name (name :op "Cooperation" :op "Office")),false)),Map(2 -> 50, 5 -> "Cooperation", 1 -> year, 4 -> name, 6 -> "Office", 0 -> temporal-quantity, 3 -> organization),Map(n -> name, 5 -> 50, t -> temporal-quantity, y -> year, o -> organization))),[Ljava.lang.String;@2488b073,Annotation([Ljava.lang.String;@1c9f0a20,[Ljava.lang.String;@55787112,[Ljava.lang.String;@1cd201a8),Annotation([Ljava.lang.String;@7db82169,[Ljava.lang.String;@1992eaf4,[Ledu.cmu.lti.nlp.amr.Dependency;@f74e835),Annotation([Ljava.lang.String;@3276732,[Ljava.lang.String;@3f28bd56,[Ljava.lang.String;@31e3250d),Annotation([Ljava.lang.String;@19fe4644,[Ljava.lang.String;@21d8bcbe,[Ledu.cmu.lti.nlp.amr.Entity;@5be067de))
AMR:
(n / name, op, "Cooperation")
(n / name, op, "Office")
(o / organization, name, n / name)
(o / organization, prep-for, t / temporal-quantity)
(t / temporal-quantity, quant, 5 / 50)
(t / temporal-quantity, unit, y / year)

Decoded in 37,674 microseconds
Sentence: Chavez shut it down in 040000.

NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(040000,00,00,04)
mkDayMonthYear(040000,00,00,04)
Spans:
Span 5-6:  040000 => (date-entity :year 2004)
Span 1-2:  shut => shut-05

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  040000 => (date-entity :year 2004)
Oracle Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 2-3:  it => it
Oracle Span 1-2:  shut => shut-05

Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: it => it
Dependencies:
1	Chavez	_	NNP	NNP	_	2	nsubj	_	_
2	shut	_	VBD	VBD	_	0	root	_	_
3	it	_	PRP	PRP	_	2	dobj	_	_
4	down	_	RP	RP	_	2	prt	_	_
5	in	_	IN	IN	_	2	prep	_	_
6	040000	_	CD	CD	_	5	pobj	_	_
7	.	_	.	.	_	2	punct	_	_

Oracle:
(d / date-entity, year, 2004)
(n / name, op, "Chavez")
(p / person, name, n / name)
(s / shut-05, ARG0, p / person)
(s / shut-05, ARG1, i / it)
(s / shut-05, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(1, 0),040000,(date-entity :year 2004),false), Span(1,2,List(2),shut,shut-05,false)),Map(2 -> shut-05, 1 -> 2004, 0 -> date-entity),Map(2 -> 2004, s -> shut-05, d -> date-entity))),[Ljava.lang.String;@7383eae2,Annotation([Ljava.lang.String;@18245eb0,[Ljava.lang.String;@7c7d3c46,[Ljava.lang.String;@24fb6a80),Annotation([Ljava.lang.String;@48c35007,[Ljava.lang.String;@72a85671,[Ledu.cmu.lti.nlp.amr.Dependency;@6722db6e),Annotation([Ljava.lang.String;@18f20260,[Ljava.lang.String;@4ae33a11,[Ljava.lang.String;@7a48e6e2),Annotation([Ljava.lang.String;@b40bb6e,[Ljava.lang.String;@3a94964,[Ledu.cmu.lti.nlp.amr.Entity;@5049d8b2))
AMR:
(d / date-entity, year, 2 / 2004)
(s / shut-05, time, d / date-entity)

Decoded in 12,537 microseconds
Sentence: 5 US military trainers and students participating in an exchange program were ordered to leave the country in 050400.

NER Entity: (country :name (name :op "US"))
mkDayMonthYear(050400,00,04,05)
mkDayMonthYear(050400,00,04,05)
Spans:
Span 18-19:  050400 => (date-entity :month 4 :year 2005)
Span 16-17:  country => country
Span 9-10:  exchange => exchange-01
Span 12-13:  ordered => order-01
Span 6-7:  participating => participate-01
Span 10-11:  program => program
Span 5-6:  students => (person :ARG0-of study-01)
Span 3-4:  trainers => train-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 18-19:  050400 => (date-entity :month 4 :year 2005)
Oracle Span 0-1:  5 => 5
Oracle Span 4-5:  and => and
Oracle Span 16-17:  country => country
Oracle Span 9-10:  exchange => exchange-01
Oracle Span 14-15:  leave => leave-01
Oracle Span 2-3:  military => (have-org-role-91 :ARG1 military)
Oracle Span 12-13:  ordered => order-01
Oracle Span 6-7:  participating => participate-01
Oracle Span 10-11:  program => program
Oracle Span 5-6:  students => (person :ARG0-of study-01)
Oracle Span 3-4:  trainers => train-01
Oracle Span 1-2:  US => (country :name (name :op "US"))

Missing span: US => (country :name (name :op "US"))
Missing span: leave => leave-01
Missing span: and => and
Missing span: 5 => 5
Missing span: military => (have-org-role-91 :ARG1 military)
Dependencies:
1	5	_	CD	CD	_	4	num	_	_
2	US	_	NNP	NNP	_	4	nn	_	_
3	military	_	JJ	JJ	_	4	amod	_	_
4	trainers	_	NNS	NNS	_	13	nsubjpass	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	students	_	NNS	NNS	_	4	conj	_	_
7	participating	_	VBG	VBG	_	6	vmod	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	an	_	DT	DT	_	11	det	_	_
10	exchange	_	NN	NN	_	11	nn	_	_
11	program	_	NN	NN	_	8	pobj	_	_
12	were	_	VBD	VBD	_	13	auxpass	_	_
13	ordered	_	VBN	VBN	_	0	root	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	leave	_	VB	VB	_	13	xcomp	_	_
16	the	_	DT	DT	_	17	det	_	_
17	country	_	NN	NN	_	15	dobj	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	050400	_	CD	CD	_	18	pobj	_	_
20	.	_	.	.	_	13	punct	_	_

Oracle:
(a / and, op, p2 / person)
(c2 / country, name, n / name)
(d / date-entity, month, 4)
(d / date-entity, year, 2005)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG3, t / train-01)
(l / leave-01, ARG0, a / and)
(l / leave-01, ARG1, c / country)
(l / leave-01, time, d / date-entity)
(m / military, mod, c2 / country)
(n / name, op, "US")
(o / order-01, ARG1, a / and)
(o / order-01, ARG2, l / leave-01)
(p3 / participate-01, ARG0, p2 / person)
(p3 / participate-01, ARG1, p4 / program)
(p4 / program, topic, e / exchange-01)
(s / study-01, ARG0, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(2, 1, 0),050400,(date-entity :month 4 :year 2005),false), Span(16,17,List(3),country,country,false), Span(12,13,List(4),ordered,order-01,false), Span(10,11,List(5),program,program,false), Span(9,10,List(6),exchange,exchange-01,false), Span(6,7,List(7),participating,participate-01,false), Span(5,6,List(9, 8),students,(person :ARG0-of study-01),false), Span(3,4,List(10),trainers,train-01,false)),Map(2 -> 2005, 5 -> program, 8 -> person, 7 -> participate-01, 1 -> 4, 4 -> order-01, 6 -> exchange-01, 9 -> study-01, 0 -> date-entity, 10 -> train-01, 3 -> country),Map(e -> exchange-01, 2 -> 2005, t -> train-01, p2 -> participate-01, s -> study-01, d -> date-entity, p -> program, 4 -> 4, c -> country, o -> order-01, p3 -> person))),[Ljava.lang.String;@6d0b5baf,Annotation([Ljava.lang.String;@631e06ab,[Ljava.lang.String;@2a3591c5,[Ljava.lang.String;@34a75079),Annotation([Ljava.lang.String;@346a361,[Ljava.lang.String;@107ed6fc,[Ledu.cmu.lti.nlp.amr.Dependency;@1643d68f),Annotation([Ljava.lang.String;@186978a6,[Ljava.lang.String;@2e029d61,[Ljava.lang.String;@482d776b),Annotation([Ljava.lang.String;@4052274f,[Ljava.lang.String;@132ddbab,[Ledu.cmu.lti.nlp.amr.Entity;@297ea53a))
AMR:
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2005)
(e / exchange-01, ARG0, c / country)
(e / exchange-01, ARG1, d / date-entity)
(o / order-01, ARG1, c / country)
(o / order-01, ARG2, t / train-01)
(p / program, topic, e / exchange-01)
(p2 / participate-01, ARG0, p3 / person)
(p2 / participate-01, ARG1, p / program)
(s / study-01, ARG0, p3 / person)

Decoded in 368,511 microseconds
Sentence: Analysts say that it is likely Chavez is trying to indoctrinate his public and armed forces.

NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 0-1:  Analysts => (person :ARG0-of analyze-01)
Span 14-15:  armed => arm-01
Span 5-6:  likely => likely
Span 12-13:  public => public
Span 1-2:  say => say-01
Span 8-9:  trying => try-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 0-1:  Analysts => (person :ARG0-of analyze-01)
Oracle Span 13-14:  and => and
Oracle Span 14-15:  armed => arm-01
Oracle Span 6-7:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 15-16:  forces => force
Oracle Span 10-11:  indoctrinate => indoctrinate-01
Oracle Span 5-6:  likely => likely
Oracle Span 12-13:  public => public
Oracle Span 1-2:  say => say-01
Oracle Span 8-9:  trying => try-01

Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: indoctrinate => indoctrinate-01
Missing span: and => and
Missing span: forces => force
Dependencies:
1	Analysts	_	NNS	NNS	_	2	nsubj	_	_
2	say	_	VBP	VBP	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	it	_	PRP	PRP	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	likely	_	JJ	JJ	_	2	ccomp	_	_
7	Chavez	_	NNP	NNP	_	9	nsubj	_	_
8	is	_	VBZ	VBZ	_	9	aux	_	_
9	trying	_	VBG	VBG	_	6	ccomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	indoctrinate	_	VB	VB	_	9	xcomp	_	_
12	his	_	PRP$	PRP$	_	13	poss	_	_
13	public	_	JJ	JJ	_	11	dobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	armed	_	JJ	JJ	_	16	amod	_	_
16	forces	_	NNS	NNS	_	13	conj	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(a / analyze-01, ARG0, p / person)
(a2 / and, op, f / force)
(a2 / and, op, p3 / public)
(a3 / arm-01, ARG1, f / force)
(f / force, poss, p2 / person)
(i / indoctrinate-01, ARG0, p2 / person)
(i / indoctrinate-01, ARG1, a2 / and)
(l / likely, domain, t / try-01)
(n / name, op, "Chavez")
(p2 / person, name, n / name)
(p3 / public, poss, p2 / person)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, l / likely)
(t / try-01, ARG0, p2 / person)
(t / try-01, ARG1, i / indoctrinate-01)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),armed,arm-01,false), Span(12,13,List(1),public,public,false), Span(8,9,List(2),trying,try-01,false), Span(5,6,List(3),likely,likely,false), Span(1,2,List(4),say,say-01,false), Span(0,1,List(6, 5),Analysts,(person :ARG0-of analyze-01),false)),Map(2 -> try-01, 5 -> person, 1 -> public, 4 -> say-01, 6 -> analyze-01, 0 -> arm-01, 3 -> likely),Map(t -> try-01, p2 -> person, s -> say-01, p -> public, a -> arm-01, a2 -> analyze-01, l -> likely))),[Ljava.lang.String;@acb0951,Annotation([Ljava.lang.String;@5bf22f18,[Ljava.lang.String;@267f474e,[Ljava.lang.String;@7a7471ce),Annotation([Ljava.lang.String;@28276e50,[Ljava.lang.String;@62e70ea3,[Ledu.cmu.lti.nlp.amr.Dependency;@3efe7086),Annotation([Ljava.lang.String;@675d8c96,[Ljava.lang.String;@741b3bc3,[Ljava.lang.String;@2ed3b1f5),Annotation([Ljava.lang.String;@63648ee9,[Ljava.lang.String;@68d6972f,[Ledu.cmu.lti.nlp.amr.Entity;@45be7cd5))
AMR:
(a / arm-01, ARG1, t / try-01)
(a2 / analyze-01, ARG0, p2 / person)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, l / likely)
(t / try-01, ARG0, p / public)
(t / try-01, ARG1, s / say-01)

Decoded in 87,529 microseconds
Sentence: Analysts say that there is no proof that Chavez will use those forces to aid leftist revolutions elsewhere.

NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 14-15:  aid => aid-01
Span 0-1:  Analysts => (person :ARG0-of analyze-01)
Span 17-18:  elsewhere => elsewhere
Span 5-6:  no => -
Span 16-17:  revolutions => revolution
Span 1-2:  say => say-01
Span 10-11:  use => use-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 14-15:  aid => aid-01
Oracle Span 0-1:  Analysts => (person :ARG0-of analyze-01)
Oracle Span 8-9:  Chavez => (person :name (name :op "Chavez"))
Oracle Span 17-18:  elsewhere => elsewhere
Oracle Span 12-13:  forces => force
Oracle Span 15-16:  leftist => leftist
Oracle Span 5-6:  no => -
Oracle Span 16-17:  revolutions => revolution
Oracle Span 1-2:  say => say-01
Oracle Span 2-3:  that => that
Oracle Span 10-11:  use => use-01

Missing span: Chavez => (person :name (name :op "Chavez"))
Missing span: leftist => leftist
Missing span: forces => force
Missing span: that => that
Dependencies:
1	Analysts	_	NNS	NNS	_	2	nsubj	_	_
2	say	_	VBP	VBP	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	there	_	EX	EX	_	5	expl	_	_
5	is	_	VBZ	VBZ	_	2	ccomp	_	_
6	no	_	DT	DT	_	7	neg	_	_
7	proof	_	NN	NN	_	5	nsubj	_	_
8	that	_	IN	IN	_	11	mark	_	_
9	Chavez	_	NNP	NNP	_	11	nsubj	_	_
10	will	_	MD	MD	_	11	aux	_	_
11	use	_	VB	VB	_	5	ccomp	_	_
12	those	_	DT	DT	_	13	det	_	_
13	forces	_	NNS	NNS	_	11	dobj	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	aid	_	VB	VB	_	11	xcomp	_	_
16	leftist	_	JJ	JJ	_	17	amod	_	_
17	revolutions	_	NNS	NNS	_	15	dobj	_	_
18	elsewhere	_	RB	RB	_	15	advmod	_	_
19	.	_	.	.	_	2	punct	_	_

Oracle:
(a / analyze-01, ARG0, p / person)
(a2 / aid-01, ARG0, p3 / person)
(a2 / aid-01, ARG2, r / revolution)
(f / force, mod, t / that)
(n / name, op, "Chavez")
(p3 / person, name, n / name)
(r / revolution, location, e / elsewhere)
(r / revolution, mod, l / leftist)
(s / say-01, ARG0, p / person)
(u / use-01, ARG0, p3 / person)
(u / use-01, ARG1, f / force)
(u / use-01, ARG2, a2 / aid-01)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),elsewhere,elsewhere,false), Span(16,17,List(1),revolutions,revolution,false), Span(14,15,List(2),aid,aid-01,false), Span(10,11,List(3),use,use-01,false), Span(5,6,List(4),no,-,false), Span(1,2,List(5),say,say-01,false), Span(0,1,List(7, 6),Analysts,(person :ARG0-of analyze-01),false)),Map(2 -> aid-01, 5 -> say-01, 7 -> analyze-01, 1 -> revolution, 4 -> -, 6 -> person, 0 -> elsewhere, 3 -> use-01),Map(e -> elsewhere, s -> say-01, p -> person, a -> aid-01, a2 -> analyze-01, r -> revolution, - -> -, u -> use-01))),[Ljava.lang.String;@7651218e,Annotation([Ljava.lang.String;@3185fa6b,[Ljava.lang.String;@6d366c9b,[Ljava.lang.String;@5b58ed3c),Annotation([Ljava.lang.String;@24faea88,[Ljava.lang.String;@3a320ade,[Ledu.cmu.lti.nlp.amr.Dependency;@64beebb7),Annotation([Ljava.lang.String;@7813cb11,[Ljava.lang.String;@bcec031,[Ljava.lang.String;@21005f6c),Annotation([Ljava.lang.String;@32f0fba8,[Ljava.lang.String;@545de5a4,[Ledu.cmu.lti.nlp.amr.Entity;@29ef6856))
AMR:
(a / aid-01, ARG1, r / revolution)
(a / aid-01, mod, e / elsewhere)
(a2 / analyze-01, ARG0, p / person)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, u / use-01)
(u / use-01, ARG1, - / -)
(u / use-01, ARG2, a / aid-01)

Decoded in 63,876 microseconds
Sentence: 2007-06-18

mkDayMonthYear(2007-06-18,18,06,2007)
mkDayMonthYear(2007-06-18,18,06,2007)
Spans:
Span 0-1:  2007-06-18 => (date-entity :day 18 :month 6 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2007-06-18 => (date-entity :year 2007 :month 6 :day 18)

Incorrect span: 2007-06-18 => (date-entity :day 18 :month 6 :year 2007)
Missing span: 2007-06-18 => (date-entity :year 2007 :month 6 :day 18)
Dependencies:
1	2007-06-18	_	NNP	NNP	_	0	root	_	_

Oracle:
(d2 / date-entity, day, 18)
(d2 / date-entity, month, 6)
(d2 / date-entity, year, 2007)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-06-18,(date-entity :day 18 :month 6 :year 2007),false)),Map(2 -> 6, 1 -> 18, 0 -> date-entity, 3 -> 2007),Map(2 -> 2007, d -> date-entity, 1 -> 18, 6 -> 6))),[Ljava.lang.String;@ab7a938,Annotation([Ljava.lang.String;@3faf2e7d,[Ljava.lang.String;@4648ce9,[Ljava.lang.String;@569bf9eb),Annotation([Ljava.lang.String;@61526469,[Ljava.lang.String;@274872f8,[Ledu.cmu.lti.nlp.amr.Dependency;@76ba13c),Annotation([Ljava.lang.String;@eb6449b,[Ljava.lang.String;@7c351808,[Ljava.lang.String;@180e6ac4),Annotation([Ljava.lang.String;@42b64ab8,[Ljava.lang.String;@7e985ce9,[Ledu.cmu.lti.nlp.amr.Entity;@2a39fe6a))
AMR:
(d / date-entity, day, 1 / 18)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2007)

Decoded in 9,643 microseconds
Sentence: Korea, Democratic People's Republic of (KP)

NER Entity: (country :name (name :op "Korea"))
NER Entity: (thing :name (name :op "Democratic"))
NER Entity: (country :name (name :op "Republic"))
NER Entity: (organization :name (name :op "KP"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
WARNING ADDING ANOTHER SPAN TO NODE 0.0.2
ArrayBuffer(0) + 1
WARNING ADDING ANOTHER SPAN TO NODE 0.0.3
ArrayBuffer(0) + 2
WARNING ADDING ANOTHER SPAN TO NODE 0.0.4
ArrayBuffer(0) + 3
WARNING ADDING ANOTHER SPAN TO NODE 0.0.1
ArrayBuffer(0) + 4
Oracle Span 0-1:  Korea => "Korea"
Oracle Span 0-7:  Korea , Democratic People 's Republic of => (country :name (name :op "Korea" :op "of" :op "Republic" :op "People's" :op "Democratic"))
Oracle Span 6-7:  of => "of"
Oracle Span 3-4:  People => "People's"
Oracle Span 5-6:  Republic => "Republic"

Incorrect span:  => amr-empty
Missing span: Korea , Democratic People 's Republic of => (country :name (name :op "Korea" :op "of" :op "Republic" :op "People's" :op "Democratic"))
Missing span: Republic => "Republic"
Missing span: of => "of"
Missing span: Korea => "Korea"
Missing span: People => "People's"
Dependencies:
1	Korea	_	NNP	NNP	_	6	nsubj	_	_
2	,	_	,	,	_	1	punct	_	_
3	Democratic	_	JJ	JJ	_	4	amod	_	_
4	People	_	NNS	NNS	_	1	appos	_	_
5	's	_	VBZ	VBZ	_	6	cop	_	_
6	Republic	_	NNP	NNP	_	0	root	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	(	_	(	(	_	9	punct	_	_
9	KP	_	NNP	NNP	_	6	appos	_	_
10	)	_	)	)	_	9	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Democratic")
(n / name, op, K / "Korea")
(n / name, op, P / "People's")
(n / name, op, R / "Republic")
(n / name, op, o / "of")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@410ae9a3,Annotation([Ljava.lang.String;@319988b0,[Ljava.lang.String;@d5ae57e,[Ljava.lang.String;@68759011),Annotation([Ljava.lang.String;@7e242b4d,[Ljava.lang.String;@305f031,[Ledu.cmu.lti.nlp.amr.Dependency;@592e843a),Annotation([Ljava.lang.String;@1d1f7216,[Ljava.lang.String;@423e4cbb,[Ljava.lang.String;@6e16b8b5),Annotation([Ljava.lang.String;@43b4fe19,[Ljava.lang.String;@25ddbbbb,[Ledu.cmu.lti.nlp.amr.Entity;@1536602f))
AMR:


Decoded in 15,123 microseconds
Sentence: proliferation; international

Spans:
Span 1-2:  ; => and

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 2-3:  international => international
Oracle Span 0-1:  proliferation => proliferate-01

Missing span: international => international
Missing span: proliferation => proliferate-01
Dependencies:
1	proliferation	_	NN	NN	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	international	_	JJ	JJ	_	1	dep	_	_

Oracle:
(a / and, op, i / international)
(a / and, op, p / proliferate-01)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),;,and,false)),Map(0 -> and),Map(a -> and))),[Ljava.lang.String;@4ebea12c,Annotation([Ljava.lang.String;@2a1edad4,[Ljava.lang.String;@6256ac4f,[Ljava.lang.String;@44c79f32),Annotation([Ljava.lang.String;@7fcbe147,[Ljava.lang.String;@235f4c10,[Ledu.cmu.lti.nlp.amr.Dependency;@743cb8e0),Annotation([Ljava.lang.String;@c7a975a,[Ljava.lang.String;@2c1b9e4b,[Ljava.lang.String;@757d6814),Annotation([Ljava.lang.String;@649725e3,[Ljava.lang.String;@3c0fae6c,[Ledu.cmu.lti.nlp.amr.Entity;@4c168660))
AMR:


Decoded in 4,260 microseconds
Sentence: The North Korean government may be prepared to begin shutting down a plutonium producing reactor in June 2007 as the first step toward disabling the Unit by December 2007.

NER Entity: (thing :name (name :op "North" :op "Korean"))
Spans:
Span 8-9:  begin => begin-01
Span 27-29:  December 2007 => (date-entity :month 12 :year 2007)
Span 23-24:  disabling => disable-01
Span 16-18:  June 2007 => (date-entity :month 6 :year 2007)
Span 4-5:  may => possible
Span 1-3:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 12-13:  plutonium => plutonium
Span 13-14:  producing => produce-01
Span 14-15:  reactor => reactor
Span 9-10:  shutting => shut-05

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 8-9:  begin => begin-01
Oracle Span 26-27:  by => by
Oracle Span 27-29:  December 2007 => (date-entity :year 2007 :month 12)
Oracle Span 23-24:  disabling => disable-01
Oracle Span 3-4:  government => (government-organization :ARG0-of govern-01)
Oracle Span 16-18:  June 2007 => (date-entity :year 2007 :month 6)
Oracle Span 4-5:  may => possible
Oracle Span 1-3:  North Korean => (country :name (name :op "Korea" :op "North"))
Oracle Span 12-13:  plutonium => plutonium
Oracle Span 6-7:  prepared => prepare-02
Oracle Span 13-14:  producing => produce-01
Oracle Span 14-15:  reactor => reactor
Oracle Span 9-10:  shutting => shut-05
Oracle Span 21-22:  step => step-01

Incorrect span: December 2007 => (date-entity :month 12 :year 2007)
Incorrect span: June 2007 => (date-entity :month 6 :year 2007)
Incorrect span: North Korean => (thing :name (name :op "North" :op "Korean"))
Missing span: North Korean => (country :name (name :op "Korea" :op "North"))
Missing span: December 2007 => (date-entity :year 2007 :month 12)
Missing span: June 2007 => (date-entity :year 2007 :month 6)
Missing span: prepared => prepare-02
Missing span: step => step-01
Missing span: by => by
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	North	_	JJ	JJ	_	3	amod	_	_
3	Korean	_	JJ	JJ	_	4	amod	_	_
4	government	_	NN	NN	_	7	nsubjpass	_	_
5	may	_	MD	MD	_	7	aux	_	_
6	be	_	VB	VB	_	7	auxpass	_	_
7	prepared	_	VBN	VBN	_	0	root	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	begin	_	VB	VB	_	7	xcomp	_	_
10	shutting	_	VBG	VBG	_	9	xcomp	_	_
11	down	_	RP	RP	_	10	prt	_	_
12	a	_	DT	DT	_	15	det	_	_
13	plutonium	_	NN	NN	_	15	nn	_	_
14	producing	_	VBG	VBG	_	15	amod	_	_
15	reactor	_	NN	NN	_	10	dobj	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	June	_	NNP	NNP	_	16	pobj	_	_
18	2007	_	CD	CD	_	17	num	_	_
19	as	_	IN	IN	_	10	prep	_	_
20	the	_	DT	DT	_	22	det	_	_
21	first	_	JJ	JJ	_	22	amod	_	_
22	step	_	NN	NN	_	19	pobj	_	_
23	toward	_	IN	IN	_	22	prep	_	_
24	disabling	_	VBG	VBG	_	23	pcomp	_	_
25	the	_	DT	DT	_	26	det	_	_
26	Unit	_	NN	NN	_	24	dobj	_	_
27	by	_	IN	IN	_	24	prep	_	_
28	December	_	NNP	NNP	_	27	pobj	_	_
29	2007	_	CD	CD	_	28	num	_	_
30	.	_	.	.	_	7	punct	_	_

Oracle:
(b / begin-01, ARG0, g / government-organization)
(b / begin-01, ARG1, s / shut-05)
(b / begin-01, time, d2 / date-entity)
(b2 / by, op, d3 / date-entity)
(c / country, name, n / name)
(d / disable-01, ARG0, g / government-organization)
(d / disable-01, ARG1, r / reactor)
(d / disable-01, time, b2 / by)
(d2 / date-entity, month, 6)
(d2 / date-entity, year, 2007)
(d3 / date-entity, month, 12)
(d3 / date-entity, year, 2007)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "Korea")
(n / name, op, "North")
(p / possible, domain, p2 / prepare-02)
(p2 / prepare-02, ARG1, g / government-organization)
(p2 / prepare-02, ARG2, b / begin-01)
(p3 / produce-01, ARG0, r / reactor)
(p3 / produce-01, ARG1, p4 / plutonium)
(s / shut-05, ARG0, g / government-organization)
(s / shut-05, ARG1, r / reactor)
(s / shut-05, prep-as, s2 / step-01)
(s2 / step-01, ARG2, d / disable-01)

Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(2, 1, 0),December 2007,(date-entity :month 12 :year 2007),false), Span(23,24,List(3),disabling,disable-01,false), Span(16,18,List(6, 5, 4),June 2007,(date-entity :month 6 :year 2007),false), Span(14,15,List(7),reactor,reactor,false), Span(13,14,List(8),producing,produce-01,false), Span(12,13,List(9),plutonium,plutonium,false), Span(9,10,List(10),shutting,shut-05,false), Span(8,9,List(11),begin,begin-01,false), Span(4,5,List(12),may,possible,false), Span(1,3,List(16, 15, 14, 13),North Korean,(thing :name (name :op "North" :op "Korean")),false)),Map(2 -> 2007, 5 -> 6, 12 -> possible, 15 -> "North", 8 -> produce-01, 7 -> reactor, 1 -> 12, 4 -> date-entity, 11 -> begin-01, 14 -> name, 6 -> 2007, 0 -> date-entity, 9 -> plutonium, 16 -> "Korean", 3 -> disable-01, 10 -> shut-05, 13 -> thing),Map(n -> name, 2 -> 2007, t -> thing, b -> begin-01, d3 -> date-entity, p2 -> plutonium, s -> shut-05, d -> date-entity, 1 -> 12, p -> produce-01, d2 -> disable-01, r -> reactor, 6 -> 6, 22 -> 2007, p3 -> possible))),[Ljava.lang.String;@52b56a3e,Annotation([Ljava.lang.String;@fd0e5b6,[Ljava.lang.String;@4eed46ee,[Ljava.lang.String;@36b0fcd5),Annotation([Ljava.lang.String;@4fad94a7,[Ljava.lang.String;@475835b1,[Ledu.cmu.lti.nlp.amr.Dependency;@6326d182),Annotation([Ljava.lang.String;@5241cf67,[Ljava.lang.String;@716a7124,[Ljava.lang.String;@77192705),Annotation([Ljava.lang.String;@226642a5,[Ljava.lang.String;@7e809b79,[Ledu.cmu.lti.nlp.amr.Entity;@5cc126dc))
AMR:
(b / begin-01, ARG0, p3 / possible)
(b / begin-01, ARG1, s / shut-05)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 2 / 2007)
(d2 / disable-01, ARG1, p / produce-01)
(d2 / disable-01, time, d / date-entity)
(d3 / date-entity, month, 6 / 6)
(d3 / date-entity, year, 22 / 2007)
(n / name, op, "Korean")
(n / name, op, "North")
(p / produce-01, ARG0, r / reactor)
(p / produce-01, ARG1, p2 / plutonium)
(p / produce-01, time, d3 / date-entity)
(s / shut-05, ARG0, t / thing)
(s / shut-05, ARG1, r / reactor)
(t / thing, name, n / name)

Decoded in 308,934 microseconds
Sentence: Assistant Secretary of State Christopher Hill stated on 18 June 2007 that the North Korean government may be prepared to begin shutting down a plutonium producing reactor in June 2007 as the first step toward disabling the Unit by December 2007.

NER Entity: (person :name (name :op "Christopher" :op "Hill"))
mkDayMonthYear(18	June	2007,18,June,2007)
NER Entity: (thing :name (name :op "North" :op "Korean"))
Spans:
Span 8-11:  18 June 2007 => (date-entity :day 18 :month 6 :year 2007)
Span 20-21:  begin => begin-01
Span 4-6:  Christopher Hill => (person :name (name :op "Christopher" :op "Hill"))
Span 39-41:  December 2007 => (date-entity :month 12 :year 2007)
Span 35-36:  disabling => disable-01
Span 28-30:  June 2007 => (date-entity :month 6 :year 2007)
Span 16-17:  may => possible
Span 13-15:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 24-25:  plutonium => plutonium
Span 25-26:  producing => produce-01
Span 26-27:  reactor => reactor
Span 21-22:  shutting => shut-05

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 8-9:  18 => 18
Oracle Span 29-30:  2007 => 2007
Oracle Span 0-1:  Assistant => assist-01
Oracle Span 20-21:  begin => begin-01
Oracle Span 38-39:  by => by
Oracle Span 4-6:  Christopher Hill => (person :name (name :op "Hill" :op "Christopher"))
Oracle Span 39-41:  December 2007 => (date-entity :year 2007 :month 12)
Oracle Span 35-36:  disabling => disable-01
Oracle Span 15-16:  government => (government-organization :ARG0-of govern-01)
Oracle Span 28-29:  June => 6
Oracle Span 9-11:  June 2007 => (date-entity :year 2007 :month 6)
Oracle Span 16-17:  may => possible
Oracle Span 13-15:  North Korean => (country :name (name :op "Korea" :op "North"))
Oracle Span 24-25:  plutonium => plutonium
Oracle Span 18-19:  prepared => prepare-02
Oracle Span 25-26:  producing => produce-01
Oracle Span 26-27:  reactor => reactor
Oracle Span 1-2:  Secretary => (have-org-role-91 :ARG2 secretary)
Oracle Span 21-22:  shutting => shut-05
Oracle Span 3-4:  State => state-01
Oracle Span 6-7:  stated => state
Oracle Span 33-34:  step => step-01

Incorrect span: December 2007 => (date-entity :month 12 :year 2007)
Extra span: June 2007 => (date-entity :month 6 :year 2007)
Incorrect span: North Korean => (thing :name (name :op "North" :op "Korean"))
Extra span: 18 June 2007 => (date-entity :day 18 :month 6 :year 2007)
Incorrect span: Christopher Hill => (person :name (name :op "Christopher" :op "Hill"))
Missing span: Christopher Hill => (person :name (name :op "Hill" :op "Christopher"))
Missing span: North Korean => (country :name (name :op "Korea" :op "North"))
Missing span: December 2007 => (date-entity :year 2007 :month 12)
Missing span: June 2007 => (date-entity :year 2007 :month 6)
Missing span: State => state-01
Missing span: 2007 => 2007
Missing span: June => 6
Missing span: 18 => 18
Missing span: prepared => prepare-02
Missing span: step => step-01
Missing span: by => by
Missing span: Secretary => (have-org-role-91 :ARG2 secretary)
Missing span: stated => state
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: Assistant => assist-01
Dependencies:
1	Assistant	_	NNP	NNP	_	6	dep	_	_
2	Secretary	_	NNP	NNP	_	1	dep	_	_
3	of	_	IN	IN	_	1	prep	_	_
4	State	_	NNP	NNP	_	3	pobj	_	_
5	Christopher	_	NNP	NNP	_	6	nn	_	_
6	Hill	_	NNP	NNP	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	18	_	CD	CD	_	8	pobj	_	_
10	June	_	NNP	NNP	_	7	tmod	_	_
11	2007	_	CD	CD	_	10	num	_	_
12	that	_	IN	IN	_	19	mark	_	_
13	the	_	DT	DT	_	16	det	_	_
14	North	_	NNP	NNP	_	16	nn	_	_
15	Korean	_	JJ	JJ	_	16	amod	_	_
16	government	_	NN	NN	_	19	nsubjpass	_	_
17	may	_	MD	MD	_	19	aux	_	_
18	be	_	VB	VB	_	19	auxpass	_	_
19	prepared	_	VBN	VBN	_	7	ccomp	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	begin	_	VB	VB	_	19	xcomp	_	_
22	shutting	_	VBG	VBG	_	21	xcomp	_	_
23	down	_	RP	RP	_	22	prt	_	_
24	a	_	DT	DT	_	27	det	_	_
25	plutonium	_	NN	NN	_	27	nn	_	_
26	producing	_	VBG	VBG	_	27	amod	_	_
27	reactor	_	NN	NN	_	22	dobj	_	_
28	in	_	IN	IN	_	27	prep	_	_
29	June	_	NNP	NNP	_	28	pobj	_	_
30	2007	_	CD	CD	_	29	num	_	_
31	as	_	IN	IN	_	22	prep	_	_
32	the	_	DT	DT	_	34	det	_	_
33	first	_	JJ	JJ	_	34	amod	_	_
34	step	_	NN	NN	_	31	pobj	_	_
35	toward	_	IN	IN	_	34	prep	_	_
36	disabling	_	VBG	VBG	_	35	pcomp	_	_
37	the	_	DT	DT	_	38	det	_	_
38	Unit	_	NN	NN	_	36	dobj	_	_
39	by	_	IN	IN	_	36	prep	_	_
40	December	_	NNP	NNP	_	39	pobj	_	_
41	2007	_	CD	CD	_	40	num	_	_
42	.	_	.	.	_	7	punct	_	_

Oracle:
(a2 / assist-01, ARG0, p5 / person)
(b / begin-01, ARG0, g / government-organization)
(b / begin-01, ARG1, s / shut-05)
(b / begin-01, time, d2 / date-entity)
(b2 / by, op, d3 / date-entity)
(c / country, name, n / name)
(d / disable-01, ARG0, g / government-organization)
(d / disable-01, ARG1, r / reactor)
(d / disable-01, time, b2 / by)
(d2 / date-entity, month, 6)
(d2 / date-entity, year, 2007)
(d3 / date-entity, month, 12)
(d3 / date-entity, year, 2007)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p5 / person)
(h / have-org-role-91, ARG2, s4 / secretary)
(h / have-org-role-91, ARG3, a2 / assist-01)
(n / name, op, "Korea")
(n / name, op, "North")
(n2 / name, op, "Christopher")
(n2 / name, op, "Hill")
(p2 / prepare-02, ARG1, g / government-organization)
(p2 / prepare-02, ARG2, b / begin-01)
(p3 / produce-01, ARG0, r / reactor)
(p3 / produce-01, ARG1, p4 / plutonium)
(p5 / person, name, n2 / name)
(p6 / possible, domain, p2 / prepare-02)
(s / shut-05, ARG0, g / government-organization)
(s / shut-05, ARG1, r / reactor)
(s / shut-05, prep-as, s2 / step-01)
(s2 / step-01, ARG2, d / disable-01)
(s3 / state-01, ARG0, p5 / person)
(s3 / state-01, ARG1, p6 / possible)
(s4 / secretary, mod, s5 / state)

Input(Some(Graph(null,ArrayBuffer(Span(39,41,List(2, 1, 0),December 2007,(date-entity :month 12 :year 2007),false), Span(35,36,List(3),disabling,disable-01,false), Span(28,30,List(6, 5, 4),June 2007,(date-entity :month 6 :year 2007),false), Span(26,27,List(7),reactor,reactor,false), Span(25,26,List(8),producing,produce-01,false), Span(24,25,List(9),plutonium,plutonium,false), Span(21,22,List(10),shutting,shut-05,false), Span(20,21,List(11),begin,begin-01,false), Span(16,17,List(12),may,possible,false), Span(13,15,List(16, 15, 14, 13),North Korean,(thing :name (name :op "North" :op "Korean")),false), Span(8,11,List(20, 19, 18, 17),18 June 2007,(date-entity :day 18 :month 6 :year 2007),false), Span(4,6,List(24, 23, 22, 21),Christopher Hill,(person :name (name :op "Christopher" :op "Hill")),false)),Map(2 -> 2007, 5 -> 6, 12 -> possible, 8 -> produce-01, 15 -> "North", 21 -> person, 18 -> 18, 24 -> "Hill", 7 -> reactor, 1 -> 12, 17 -> date-entity, 23 -> "Christopher", 4 -> date-entity, 11 -> begin-01, 14 -> name, 20 -> 2007, 6 -> 2007, 9 -> plutonium, 0 -> date-entity, 22 -> name, 16 -> "Korean", 19 -> 6, 10 -> shut-05, 3 -> disable-01, 13 -> thing),Map(n -> name, 2 -> 2007, 12 -> 18, t -> thing, b -> begin-01, d3 -> date-entity, p2 -> plutonium, s -> shut-05, 62 -> 6, d -> date-entity, 1 -> 12, 23 -> 2007, p -> produce-01, p4 -> person, d2 -> disable-01, r -> reactor, 6 -> 6, d4 -> date-entity, 22 -> 2007, p3 -> possible, n2 -> name))),[Ljava.lang.String;@625e134e,Annotation([Ljava.lang.String;@72bd06ca,[Ljava.lang.String;@89c10b7,[Ljava.lang.String;@5dbe30be),Annotation([Ljava.lang.String;@4fe89c24,[Ljava.lang.String;@55795845,[Ledu.cmu.lti.nlp.amr.Dependency;@3d08f3f5),Annotation([Ljava.lang.String;@119f1f2a,[Ljava.lang.String;@1a1da881,[Ljava.lang.String;@5b970f7),Annotation([Ljava.lang.String;@7fd4acee,[Ljava.lang.String;@165b8a71,[Ledu.cmu.lti.nlp.amr.Entity;@6175619b))
AMR:
(b / begin-01, ARG0, p4 / person)
(b / begin-01, ARG1, s / shut-05)
(b / begin-01, ARG2, p3 / possible)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 2 / 2007)
(d2 / disable-01, ARG1, t / thing)
(d2 / disable-01, time, d / date-entity)
(d3 / date-entity, month, 6 / 6)
(d3 / date-entity, year, 22 / 2007)
(d4 / date-entity, day, 12 / 18)
(d4 / date-entity, month, 62 / 6)
(d4 / date-entity, year, 23 / 2007)
(n / name, op, "Korean")
(n / name, op, "North")
(n2 / name, op, "Christopher")
(n2 / name, op, "Hill")
(p / produce-01, ARG0, r / reactor)
(p / produce-01, ARG1, p2 / plutonium)
(p / produce-01, time, d3 / date-entity)
(p4 / person, name, n2 / name)
(s / shut-05, ARG0, d4 / date-entity)
(s / shut-05, ARG1, r / reactor)
(s / shut-05, ARG2, d2 / disable-01)
(t / thing, name, n / name)

Decoded in 934,667 microseconds
Sentence: Hill is the head American negotiator on North Korea's nuclear weapons program.

NER Entity: (person :name (name :op "Hill"))
NER Entity: (thing :name (name :op "American"))
NER Entity: (country :name (name :op "North" :op "Korea"))
Spans:
Span 5-6:  negotiator => negotiate-01
Span 7-9:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 10-11:  nuclear => nucleus
Span 12-13:  program => program

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  head => head
Oracle Span 0-1:  Hill => (person :name (name :op "Hill"))
Oracle Span 5-6:  negotiator => (person :ARG0-of negotiate-01)
Oracle Span 7-9:  North Korea => (country :name (name :op "Korea" :op "North"))
Oracle Span 10-11:  nuclear => nucleus
Oracle Span 12-13:  program => program
Oracle Span 11-12:  weapons => weapon

Incorrect span: North Korea => (country :name (name :op "North" :op "Korea"))
Incorrect span: negotiator => negotiate-01
Missing span: North Korea => (country :name (name :op "Korea" :op "North"))
Missing span: Hill => (person :name (name :op "Hill"))
Missing span: weapons => weapon
Missing span: head => head
Missing span: negotiator => (person :ARG0-of negotiate-01)
Dependencies:
1	Hill	_	NNP	NNP	_	6	nsubj	_	_
2	is	_	VBZ	VBZ	_	6	cop	_	_
3	the	_	DT	DT	_	6	det	_	_
4	head	_	NN	NN	_	6	nn	_	_
5	American	_	JJ	JJ	_	6	amod	_	_
6	negotiator	_	NN	NN	_	0	root	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	North	_	NNP	NNP	_	9	nn	_	_
9	Korea	_	NNP	NNP	_	13	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	nuclear	_	JJ	JJ	_	13	amod	_	_
12	weapons	_	NNS	NNS	_	13	nn	_	_
13	program	_	NN	NN	_	7	pobj	_	_
14	.	_	.	.	_	6	punct	_	_

Oracle:
(c2 / country, name, n5 / name)
(n / negotiate-01, ARG0, p2 / person)
(n / negotiate-01, ARG2, p / program)
(n2 / name, op, "Hill")
(n5 / name, op, "Korea")
(n5 / name, op, "North")
(p / program, poss, c2 / country)
(p / program, topic, w / weapon)
(p2 / person, domain, p3 / person)
(p2 / person, mod, h / head)
(p3 / person, name, n2 / name)
(w / weapon, mod, n4 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),program,program,false), Span(10,11,List(1),nuclear,nucleus,false), Span(7,9,List(5, 4, 3, 2),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(5,6,List(6),negotiator,negotiate-01,false)),Map(2 -> country, 5 -> "Korea", 1 -> nucleus, 4 -> "North", 6 -> negotiate-01, 0 -> program, 3 -> name),Map(n -> nucleus, p -> program, n3 -> negotiate-01, c -> country, n2 -> name))),[Ljava.lang.String;@2f058b8a,Annotation([Ljava.lang.String;@756cf158,[Ljava.lang.String;@3f2ef586,[Ljava.lang.String;@751d3241),Annotation([Ljava.lang.String;@76c7beb3,[Ljava.lang.String;@64337702,[Ledu.cmu.lti.nlp.amr.Dependency;@2cf92cc7),Annotation([Ljava.lang.String;@30ea8c23,[Ljava.lang.String;@7b139eab,[Ljava.lang.String;@4e76dac),Annotation([Ljava.lang.String;@611df6e3,[Ljava.lang.String;@5f2f577,[Ledu.cmu.lti.nlp.amr.Entity;@6273c5a4))
AMR:
(c / country, name, n2 / name)
(n2 / name, op, "Korea")
(n2 / name, op, "North")
(n3 / negotiate-01, ARG1, p / program)
(p / program, mod, n / nucleus)
(p / program, poss, c / country)

Decoded in 35,037 microseconds
Sentence: Hill stated stalled efforts to dismantle North Korea's nuclear weapons program could move ahead after the weekend of 16 June 2007 and 17 June 2007 when Pyongyang officials invited inspectors from the International Atomic Energy Agency to visit for talks on verifying and monitoring a shutdown.

NER Entity: (person :name (name :op "Hill"))
NER Entity: (country :name (name :op "North" :op "Korea"))
mkDayMonthYear(16	June	2007,16,June,2007)
mkDayMonthYear(17	June	2007,17,June,2007)
NER Entity: (country :name (name :op "Pyongyang"))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 19-22:  16 June 2007 => (date-entity :day 16 :month 6 :year 2007)
Span 23-26:  17 June 2007 => (date-entity :day 17 :month 6 :year 2007)
Span 15-16:  after => after
Span 14-15:  ahead => ahead
Span 12-13:  could => possible
Span 5-6:  dismantle => dismantle-01
Span 3-4:  efforts => effort
Span 33-37:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 29-30:  invited => (person :ARG1-of invite-01)
Span 44-45:  monitoring => monitor-01
Span 6-8:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 9-10:  nuclear => nucleus
Span 28-29:  officials => (have-org-role-91 :ARG2 official)
Span 11-12:  program => program
Span 46-47:  shutdown => shutdown
Span 2-3:  stalled => stall-01
Span 40-41:  talks => talk-01
Span 42-43:  verifying => verify-01
Span 38-39:  visit => visit-01
Span 17-18:  weekend => weekend

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 19-22:  16 June 2007 => (date-entity :year 2007 :month 6 :day 16)
Oracle Span 23-26:  17 June 2007 => (date-entity :year 2007 :month 6 :day 17)
Oracle Span 15-16:  after => after
Oracle Span 14-15:  ahead => ahead
Oracle Span 22-23:  and => and
Oracle Span 12-13:  could => possible
Oracle Span 5-6:  dismantle => dismantle-01
Oracle Span 3-4:  efforts => effort
Oracle Span 0-1:  Hill => (person :name (name :op "Hill"))
Oracle Span 30-31:  inspectors => inspect-01
Oracle Span 33-37:  International Atomic Energy Agency => (have-org-role-91 :ARG1 (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International")))
Oracle Span 29-30:  invited => invite-01
Oracle Span 44-45:  monitoring => monitor-01
Oracle Span 13-14:  move => move-01
Oracle Span 6-8:  North Korea => (country :name (name :op "Korea" :op "North"))
Oracle Span 9-10:  nuclear => nucleus
Oracle Span 28-29:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 11-12:  program => program
Oracle Span 27-28:  Pyongyang => (city :name (name :op "Pyongyang"))
Oracle Span 46-47:  shutdown => shut-05
Oracle Span 2-3:  stalled => stall-01
Oracle Span 1-2:  stated => state-01
Oracle Span 40-41:  talks => talk-01
Oracle Span 42-43:  verifying => verify-01
Oracle Span 38-39:  visit => visit-01
Oracle Span 10-11:  weapons => weapon
Oracle Span 17-18:  weekend => weekend

Incorrect span: shutdown => shutdown
Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Incorrect span: invited => (person :ARG1-of invite-01)
Incorrect span: 17 June 2007 => (date-entity :day 17 :month 6 :year 2007)
Incorrect span: 16 June 2007 => (date-entity :day 16 :month 6 :year 2007)
Incorrect span: North Korea => (country :name (name :op "North" :op "Korea"))
Missing span: Hill => (person :name (name :op "Hill"))
Missing span: North Korea => (country :name (name :op "Korea" :op "North"))
Missing span: International Atomic Energy Agency => (have-org-role-91 :ARG1 (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International")))
Missing span: Pyongyang => (city :name (name :op "Pyongyang"))
Missing span: 16 June 2007 => (date-entity :year 2007 :month 6 :day 16)
Missing span: 17 June 2007 => (date-entity :year 2007 :month 6 :day 17)
Missing span: stated => state-01
Missing span: move => move-01
Missing span: and => and
Missing span: invited => invite-01
Missing span: weapons => weapon
Missing span: shutdown => shut-05
Missing span: inspectors => inspect-01
Dependencies:
1	Hill	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	stalled	_	VBN	VBN	_	4	amod	_	_
4	efforts	_	NNS	NNS	_	14	nsubj	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	dismantle	_	VB	VB	_	4	vmod	_	_
7	North	_	NNP	NNP	_	8	nn	_	_
8	Korea	_	NNP	NNP	_	12	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	nuclear	_	JJ	JJ	_	12	amod	_	_
11	weapons	_	NNS	NNS	_	12	nn	_	_
12	program	_	NN	NN	_	6	dobj	_	_
13	could	_	MD	MD	_	14	aux	_	_
14	move	_	VB	VB	_	2	ccomp	_	_
15	ahead	_	RB	RB	_	14	advmod	_	_
16	after	_	IN	IN	_	14	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	weekend	_	NN	NN	_	16	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	16	_	CD	CD	_	19	pobj	_	_
21	June	_	NNP	NNP	_	14	tmod	_	_
22	2007	_	CD	CD	_	21	num	_	_
23	and	_	CC	CC	_	21	cc	_	_
24	17	_	CD	CD	_	21	conj	_	_
25	June	_	NNP	NNP	_	2	tmod	_	_
26	2007	_	CD	CD	_	25	num	_	_
27	when	_	WRB	WRB	_	30	advmod	_	_
28	Pyongyang	_	NNP	NNP	_	29	nn	_	_
29	officials	_	NNS	NNS	_	30	nsubj	_	_
30	invited	_	VBD	VBD	_	2	advcl	_	_
31	inspectors	_	NNS	NNS	_	30	dobj	_	_
32	from	_	IN	IN	_	30	prep	_	_
33	the	_	DT	DT	_	37	det	_	_
34	International	_	NNP	NNP	_	37	nn	_	_
35	Atomic	_	NNP	NNP	_	37	nn	_	_
36	Energy	_	NNP	NNP	_	37	nn	_	_
37	Agency	_	NNP	NNP	_	32	pobj	_	_
38	to	_	TO	TO	_	39	aux	_	_
39	visit	_	VB	VB	_	30	vmod	_	_
40	for	_	IN	IN	_	39	prep	_	_
41	talks	_	NNS	NNS	_	40	pobj	_	_
42	on	_	IN	IN	_	39	prep	_	_
43	verifying	_	VBG	VBG	_	42	pcomp	_	_
44	and	_	CC	CC	_	43	cc	_	_
45	monitoring	_	VBG	VBG	_	43	conj	_	_
46	a	_	DT	DT	_	47	det	_	_
47	shutdown	_	NN	NN	_	43	dobj	_	_
48	.	_	.	.	_	2	punct	_	_

Oracle:
(a2 / after, op, w2 / weekend)
(a3 / and, op, m2 / monitor-01)
(a3 / and, op, v2 / verify-01)
(c / country, name, n3 / name)
(c2 / city, name, n4 / name)
(d / date-entity, day, 16)
(d / date-entity, month, 6)
(d / date-entity, year, 2007)
(d2 / date-entity, day, 17)
(d2 / date-entity, month, 6)
(d2 / date-entity, year, 2007)
(d3 / dismantle-01, ARG1, p3 / program)
(e / effort, purpose, d3 / dismantle-01)
(h / have-org-role-91, ARG1, o3 / organization)
(h / have-org-role-91, ARG3, i2 / inspect-01)
(h2 / have-org-role-91, ARG1, c2 / city)
(h2 / have-org-role-91, ARG2, o / official)
(i / invite-01, ARG2, v / visit-01)
(m / move-01, ARG1, e / effort)
(m / move-01, ARG2, a / ahead)
(m / move-01, time, a2 / after)
(m2 / monitor-01, ARG1, s3 / shut-05)
(n / name, op, "Hill")
(n3 / name, op, "Korea")
(n3 / name, op, "North")
(n4 / name, op, "Pyongyang")
(n5 / name, op, "Agency")
(n5 / name, op, "Atomic")
(n5 / name, op, "Energy")
(n5 / name, op, "International")
(o3 / organization, name, n5 / name)
(p / person, name, n / name)
(p2 / possible, domain, m / move-01)
(p3 / program, poss, c / country)
(p3 / program, topic, w / weapon)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, p2 / possible)
(s2 / stall-01, ARG1, e / effort)
(t / talk-01, ARG1, a3 / and)
(v / visit-01, purpose, t / talk-01)
(v / visit-01, time, w2 / weekend)
(v2 / verify-01, ARG1, s3 / shut-05)
(w / weapon, mod, n2 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),shutdown,shutdown,false), Span(44,45,List(1),monitoring,monitor-01,false), Span(42,43,List(2),verifying,verify-01,false), Span(40,41,List(3),talks,talk-01,false), Span(38,39,List(4),visit,visit-01,false), Span(33,37,List(10, 9, 8, 7, 6, 5),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(29,30,List(12, 11),invited,(person :ARG1-of invite-01),false), Span(28,29,List(14, 13),officials,(have-org-role-91 :ARG2 official),false), Span(23,26,List(18, 17, 16, 15),17 June 2007,(date-entity :day 17 :month 6 :year 2007),false), Span(19,22,List(22, 21, 20, 19),16 June 2007,(date-entity :day 16 :month 6 :year 2007),false), Span(17,18,List(23),weekend,weekend,false), Span(15,16,List(24),after,after,false), Span(14,15,List(25),ahead,ahead,false), Span(12,13,List(26),could,possible,false), Span(11,12,List(27),program,program,false), Span(9,10,List(28),nuclear,nucleus,false), Span(6,8,List(32, 31, 30, 29),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(5,6,List(33),dismantle,dismantle-01,false), Span(3,4,List(34),efforts,effort,false), Span(2,3,List(35),stalled,stall-01,false)),Map(30 -> name, 2 -> verify-01, 5 -> organization, 33 -> dismantle-01, 27 -> program, 12 -> invite-01, 8 -> "Atomic", 15 -> date-entity, 21 -> 6, 18 -> 2007, 24 -> after, 35 -> stall-01, 7 -> "International", 1 -> monitor-01, 17 -> 6, 23 -> weekend, 26 -> possible, 4 -> visit-01, 11 -> person, 32 -> "Korea", 14 -> official, 29 -> country, 20 -> 16, 34 -> effort, 28 -> nucleus, 6 -> name, 9 -> "Energy", 0 -> shutdown, 22 -> 2007, 16 -> 17, 19 -> date-entity, 10 -> "Agency", 3 -> talk-01, 31 -> "North", 25 -> ahead, 13 -> have-org-role-91),Map(e -> effort, n -> name, w -> weekend, v2 -> visit-01, h -> have-org-role-91, 2 -> 2007, s2 -> stall-01, t -> talk-01, 12 -> 16, d3 -> dismantle-01, p2 -> possible, s -> shutdown, v -> verify-01, d -> date-entity, m -> monitor-01, 62 -> 6, 1 -> 17, p -> person, n3 -> name, a -> after, o2 -> official, d2 -> date-entity, i -> invite-01, a2 -> ahead, c -> country, 6 -> 6, 22 -> 2007, o -> organization, p3 -> program, n2 -> nucleus))),[Ljava.lang.String;@5d465e4b,Annotation([Ljava.lang.String;@53e211ee,[Ljava.lang.String;@41a90fa8,[Ljava.lang.String;@3d8bbcdc),Annotation([Ljava.lang.String;@52500920,[Ljava.lang.String;@117e0fe5,[Ledu.cmu.lti.nlp.amr.Dependency;@18a3962d),Annotation([Ljava.lang.String;@78aea4b9,[Ljava.lang.String;@2a65bb85,[Ljava.lang.String;@4b85880b),Annotation([Ljava.lang.String;@4f936da8,[Ljava.lang.String;@4215838f,[Ledu.cmu.lti.nlp.amr.Entity;@452ba1db))
AMR:
(a / after, mod, a2 / ahead)
(a / after, op, t / talk-01)
(a / after, op, w / weekend)
(c / country, name, n3 / name)
(d / date-entity, day, 1 / 17)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2007)
(d2 / date-entity, day, 12 / 16)
(d2 / date-entity, month, 62 / 6)
(d2 / date-entity, year, 22 / 2007)
(d3 / dismantle-01, ARG0, d2 / date-entity)
(d3 / dismantle-01, ARG1, p3 / program)
(e / effort, purpose, d3 / dismantle-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o2 / official)
(i / invite-01, ARG0, d / date-entity)
(i / invite-01, ARG1, p / person)
(i / invite-01, purpose, v2 / visit-01)
(m / monitor-01, ARG1, s / shutdown)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n3 / name, op, "Korea")
(n3 / name, op, "North")
(o / organization, name, n / name)
(p3 / program, mod, n2 / nucleus)
(p3 / program, poss, c / country)
(s2 / stall-01, ARG0, p2 / possible)
(s2 / stall-01, ARG1, e / effort)
(t / talk-01, ARG1, v / verify-01)
(v / verify-01, ARG1, s / shutdown)
(v2 / visit-01, ARG0, o / organization)
(v2 / visit-01, ARG1, t / talk-01)

Decoded in 1,124,694 microseconds
Sentence: Following talks with Chinese negotiator Wu Dawei Hill stated the shutdown has long been anticipated.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wu" :op "Dawei" :op "Hill"))
Spans:
Span 14-15:  anticipated => anticipate-01
Span 0-1:  Following => follow-01
Span 4-5:  negotiator => negotiate-01
Span 10-11:  shutdown => shutdown
Span 1-2:  talks => talk-01
Span 5-8:  Wu Dawei Hill => (person :name (name :op "Wu" :op "Dawei" :op "Hill"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 14-15:  anticipated => anticipate-01
Oracle Span 3-4:  Chinese => (country :name (name :op "China"))
Oracle Span 0-1:  Following => follow-01
Oracle Span 7-8:  Hill => (person :name (name :op "Hill"))
Oracle Span 12-13:  long => long
Oracle Span 4-5:  negotiator => negotiate-01
Oracle Span 10-11:  shutdown => shut-05
Oracle Span 8-9:  stated => state-01
Oracle Span 1-2:  talks => talk-01
Oracle Span 5-7:  Wu Dawei => (person :name (name :op "Dawei" :op "Wu"))

Incorrect span: shutdown => shutdown
Extra span: Wu Dawei Hill => (person :name (name :op "Wu" :op "Dawei" :op "Hill"))
Missing span: Hill => (person :name (name :op "Hill"))
Missing span: Wu Dawei => (person :name (name :op "Dawei" :op "Wu"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: long => long
Missing span: shutdown => shut-05
Dependencies:
1	Following	_	VBG	VBG	_	9	prep	_	_
2	talks	_	NNS	NNS	_	1	pobj	_	_
3	with	_	IN	IN	_	2	prep	_	_
4	Chinese	_	JJ	JJ	_	5	amod	_	_
5	negotiator	_	NN	NN	_	3	pobj	_	_
6	Wu	_	NNP	NNP	_	8	nn	_	_
7	Dawei	_	NNP	NNP	_	8	nn	_	_
8	Hill	_	NNP	NNP	_	9	nsubj	_	_
9	stated	_	VBD	VBD	_	0	root	_	_
10	the	_	DT	DT	_	11	det	_	_
11	shutdown	_	NN	NN	_	15	nsubjpass	_	_
12	has	_	VBZ	VBZ	_	15	aux	_	_
13	long	_	RB	RB	_	15	advmod	_	_
14	been	_	VBN	VBN	_	15	auxpass	_	_
15	anticipated	_	VBN	VBN	_	9	ccomp	_	_
16	.	_	.	.	_	9	punct	_	_

Oracle:
(a / anticipate-01, ARG1, s2 / shut-05)
(a / anticipate-01, duration, l / long)
(c / country, name, n3 / name)
(f / follow-01, ARG1, s / state-01)
(f / follow-01, ARG2, t / talk-01)
(n / name, op, "Hill")
(n2 / negotiate-01, ARG0, p2 / person)
(n3 / name, op, "China")
(n4 / name, op, "Dawei")
(n4 / name, op, "Wu")
(p / person, name, n / name)
(p2 / person, mod, c / country)
(p2 / person, name, n4 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / anticipate-01)
(t / talk-01, ARG0, p / person)
(t / talk-01, ARG2, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),anticipated,anticipate-01,false), Span(10,11,List(1),shutdown,shutdown,false), Span(5,8,List(6, 5, 4, 3, 2),Wu Dawei Hill,(person :name (name :op "Wu" :op "Dawei" :op "Hill")),false), Span(4,5,List(7),negotiator,negotiate-01,false), Span(1,2,List(8),talks,talk-01,false), Span(0,1,List(9),Following,follow-01,false)),Map(2 -> person, 5 -> "Dawei", 8 -> talk-01, 7 -> negotiate-01, 1 -> shutdown, 4 -> "Wu", 6 -> "Hill", 9 -> follow-01, 0 -> anticipate-01, 3 -> name),Map(n -> name, t -> talk-01, s -> shutdown, p -> person, a -> anticipate-01, f -> follow-01, n2 -> negotiate-01))),[Ljava.lang.String;@2289aca5,Annotation([Ljava.lang.String;@76a36b71,[Ljava.lang.String;@184497d1,[Ljava.lang.String;@f9d87b),Annotation([Ljava.lang.String;@6ffab045,[Ljava.lang.String;@26fb628,[Ledu.cmu.lti.nlp.amr.Dependency;@3e2943ab),Annotation([Ljava.lang.String;@70dd7e15,[Ljava.lang.String;@4a9f80d3,[Ljava.lang.String;@35beb15e),Annotation([Ljava.lang.String;@41fe9859,[Ljava.lang.String;@5ac86ba5,[Ledu.cmu.lti.nlp.amr.Entity;@6c67e137))
AMR:
(a / anticipate-01, ARG0, p / person)
(a / anticipate-01, ARG1, s / shutdown)
(f / follow-01, ARG2, t / talk-01)
(n / name, op, "Dawei")
(n / name, op, "Hill")
(n / name, op, "Wu")
(p / person, name, n / name)
(t / talk-01, ARG1, n2 / negotiate-01)
(t / talk-01, ARG2, p / person)

Decoded in 55,880 microseconds
Sentence: Hill stated the shutdown could occur in a matter of weeks not months.

NER Entity: (person :name (name :op "Hill"))
Spans:
Span 4-5:  could => possible
Span 8-9:  matter => matter
Span 12-13:  months => (temporal-quantity :unit month)
Span 3-4:  shutdown => shutdown

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  could => possible
Oracle Span 0-1:  Hill => (person :name (name :op "Hill"))
Oracle Span 12-13:  months => (temporal-quantity :unit month)
Oracle Span 3-4:  shutdown => shut-05
Oracle Span 1-2:  stated => state-01
Oracle Span 10-11:  weeks => (temporal-quantity :unit week)

Extra span: matter => matter
Incorrect span: shutdown => shutdown
Missing span: Hill => (person :name (name :op "Hill"))
Missing span: stated => state-01
Missing span: weeks => (temporal-quantity :unit week)
Missing span: shutdown => shut-05
Dependencies:
1	Hill	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	shutdown	_	NN	NN	_	6	nsubj	_	_
5	could	_	MD	MD	_	6	aux	_	_
6	occur	_	VB	VB	_	2	ccomp	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	a	_	DT	DT	_	9	det	_	_
9	matter	_	NN	NN	_	7	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	weeks	_	NNS	NNS	_	10	pobj	_	_
12	not	_	RB	RB	_	6	prep	_	_
13	months	_	NNS	NNS	_	12	dep	_	_
14	.	_	.	.	_	2	punct	_	_

Oracle:
(n / name, op, "Hill")
(p / person, name, n / name)
(p2 / possible, domain, s2 / shut-05)
(s / state-01, ARG0, p / person)
(t / temporal-quantity, unit, w / week)
(t2 / temporal-quantity, unit, m2 / month)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(1, 0),months,(temporal-quantity :unit month),false), Span(8,9,List(2),matter,matter,false), Span(4,5,List(3),could,possible,false), Span(3,4,List(4),shutdown,shutdown,false)),Map(2 -> matter, 1 -> month, 4 -> shutdown, 0 -> temporal-quantity, 3 -> possible),Map(t -> temporal-quantity, m2 -> matter, s -> shutdown, m -> month, p -> possible))),[Ljava.lang.String;@2c9399a4,Annotation([Ljava.lang.String;@191ae03f,[Ljava.lang.String;@9635fa,[Ljava.lang.String;@53ab0286),Annotation([Ljava.lang.String;@63c5efee,[Ljava.lang.String;@2d10e0b1,[Ledu.cmu.lti.nlp.amr.Dependency;@1c98290c),Annotation([Ljava.lang.String;@172ca72b,[Ljava.lang.String;@5bda80bf,[Ljava.lang.String;@71e5f61d),Annotation([Ljava.lang.String;@2ce86164,[Ljava.lang.String;@5e8f9e2d,[Ledu.cmu.lti.nlp.amr.Entity;@51df223b))
AMR:
(m2 / matter, poss, s / shutdown)
(p / possible, domain, s / shutdown)
(p / possible, op, t / temporal-quantity)
(t / temporal-quantity, unit, m / month)

Decoded in 31,590 microseconds
Sentence: The Associated Press reported from Vienna, Austria that the IAEA stated on 18 June 2007 that a team would visit Pyongyang the week of 24 June 2007 to discuss the manner in which inspectors will verify the shutdown.

NER Entity: (organization :name (name :op "Associated" :op "Press"))
NER Entity: (country :name (name :op "Vienna"))
NER Entity: (country :name (name :op "Austria"))
NER Entity: (organization :name (name :op "IAEA"))
mkDayMonthYear(18	June	2007,18,June,2007)
NER Entity: (country :name (name :op "Pyongyang"))
mkDayMonthYear(24	June	2007,24,June,2007)
NER Entity: (country :name (name :op "Austria"))
Spans:
Span 13-16:  18 June 2007 => (date-entity :day 18 :month 6 :year 2007)
Span 25-28:  24 June 2007 => (date-entity :day 24 :month 6 :year 2007)
Span 1-3:  Associated Press => (publication :name (name :op "Press" :op "Associated"))
Span 7-8:  Austria => (country :name (name :op "Austria"))
Span 29-30:  discuss => discuss-01
Span 31-32:  manner => manner
Span 3-4:  reported => report-01
Span 38-39:  shutdown => shutdown
Span 18-19:  team => team
Span 36-37:  verify => verify-01
Span 20-21:  visit => visit-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 13-16:  18 June 2007 => (date-entity :year 2007 :month 6 :day 18)
Oracle Span 25-28:  24 June 2007 => (date-entity :year 2007 :month 6 :day 24)
Oracle Span 1-3:  Associated Press => (publication :name (name :op "Press" :op "Associated"))
Oracle Span 7-8:  Austria => (country :name (name :op "Austria"))
Oracle Span 29-30:  discuss => discuss-01
Oracle Span 10-11:  IAEA => (organization :name (name :op "IAEA"))
Oracle Span 34-35:  inspectors => (person :ARG0-of inspect-01)
Oracle Span 31-32:  manner => manner
Oracle Span 21-22:  Pyongyang => (city :name (name :op "Pyongyang"))
Oracle Span 3-4:  reported => report-01
Oracle Span 38-39:  shutdown => shut-05
Oracle Span 11-12:  stated => state-01
Oracle Span 18-19:  team => team
Oracle Span 36-37:  verify => verify-01
Oracle Span 5-6:  Vienna => (city :name (name :op "Vienna"))
Oracle Span 20-21:  visit => visit-01
Oracle Span 23-24:  week => week

Incorrect span: shutdown => shutdown
Incorrect span: 24 June 2007 => (date-entity :day 24 :month 6 :year 2007)
Incorrect span: 18 June 2007 => (date-entity :day 18 :month 6 :year 2007)
Missing span: IAEA => (organization :name (name :op "IAEA"))
Missing span: Pyongyang => (city :name (name :op "Pyongyang"))
Missing span: Vienna => (city :name (name :op "Vienna"))
Missing span: 24 June 2007 => (date-entity :year 2007 :month 6 :day 24)
Missing span: 18 June 2007 => (date-entity :year 2007 :month 6 :day 18)
Missing span: stated => state-01
Missing span: week => week
Missing span: shutdown => shut-05
Missing span: inspectors => (person :ARG0-of inspect-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Associated	_	NNP	NNP	_	3	nn	_	_
3	Press	_	NNP	NNP	_	4	nsubj	_	_
4	reported	_	VBD	VBD	_	0	root	_	_
5	from	_	IN	IN	_	4	prep	_	_
6	Vienna	_	NNP	NNP	_	8	nn	_	_
7	,	_	,	,	_	8	punct	_	_
8	Austria	_	NNP	NNP	_	5	pobj	_	_
9	that	_	IN	IN	_	12	mark	_	_
10	the	_	DT	DT	_	11	det	_	_
11	IAEA	_	NNP	NNP	_	12	nsubj	_	_
12	stated	_	VBD	VBD	_	4	ccomp	_	_
13	on	_	IN	IN	_	12	prep	_	_
14	18	_	CD	CD	_	13	pobj	_	_
15	June	_	NNP	NNP	_	12	tmod	_	_
16	2007	_	CD	CD	_	15	num	_	_
17	that	_	IN	IN	_	21	mark	_	_
18	a	_	DT	DT	_	19	det	_	_
19	team	_	NN	NN	_	21	nsubj	_	_
20	would	_	MD	MD	_	21	aux	_	_
21	visit	_	VB	VB	_	12	ccomp	_	_
22	Pyongyang	_	VBG	VBG	_	21	xcomp	_	_
23	the	_	DT	DT	_	24	det	_	_
24	week	_	NN	NN	_	22	dobj	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	24	_	CD	CD	_	25	pobj	_	_
27	June	_	NNP	NNP	_	21	tmod	_	_
28	2007	_	CD	CD	_	27	num	_	_
29	to	_	TO	TO	_	30	aux	_	_
30	discuss	_	VB	VB	_	21	xcomp	_	_
31	the	_	DT	DT	_	32	det	_	_
32	manner	_	NN	NN	_	30	dobj	_	_
33	in	_	IN	IN	_	37	prep	_	_
34	which	_	WDT	WDT	_	33	pobj	_	_
35	inspectors	_	NNS	NNS	_	37	nsubj	_	_
36	will	_	MD	MD	_	37	aux	_	_
37	verify	_	VB	VB	_	32	rcmod	_	_
38	the	_	DT	DT	_	39	det	_	_
39	shutdown	_	NN	NN	_	37	dobj	_	_
40	.	_	.	.	_	4	punct	_	_

Oracle:
(c / city, location, c2 / country)
(c / city, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / city, name, n5 / name)
(d / date-entity, day, 18)
(d / date-entity, month, 6)
(d / date-entity, year, 2007)
(d3 / date-entity, day, 24)
(d3 / date-entity, month, 6)
(d3 / date-entity, year, 2007)
(d4 / discuss-01, ARG0, t / team)
(d4 / discuss-01, ARG1, m / manner)
(i / inspect-01, ARG0, p / person)
(m / manner, mod, v2 / verify-01)
(n / name, op, "Associated")
(n / name, op, "Press")
(n2 / name, op, "Vienna")
(n3 / name, op, "Austria")
(n4 / name, op, "IAEA")
(n5 / name, op, "Pyongyang")
(o2 / organization, name, n4 / name)
(p2 / publication, name, n / name)
(r / report-01, ARG0, p2 / publication)
(r / report-01, ARG1, s / state-01)
(r / report-01, location, c / city)
(s / state-01, ARG0, o2 / organization)
(s / state-01, ARG1, v / visit-01)
(s / state-01, time, d / date-entity)
(v / visit-01, ARG0, t / team)
(v / visit-01, ARG1, c3 / city)
(v / visit-01, purpose, d4 / discuss-01)
(v / visit-01, time, w / week)
(v2 / verify-01, ARG0, p / person)
(v2 / verify-01, ARG1, s2 / shut-05)
(w / week, mod, d3 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),shutdown,shutdown,false), Span(36,37,List(1),verify,verify-01,false), Span(31,32,List(2),manner,manner,false), Span(29,30,List(3),discuss,discuss-01,false), Span(25,28,List(7, 6, 5, 4),24 June 2007,(date-entity :day 24 :month 6 :year 2007),false), Span(20,21,List(8),visit,visit-01,false), Span(18,19,List(9),team,team,false), Span(13,16,List(13, 12, 11, 10),18 June 2007,(date-entity :day 18 :month 6 :year 2007),false), Span(7,8,List(16, 15, 14),Austria,(country :name (name :op "Austria")),false), Span(3,4,List(17),reported,report-01,false), Span(1,3,List(21, 20, 19, 18),Associated Press,(publication :name (name :op "Press" :op "Associated")),false)),Map(2 -> manner, 5 -> 24, 12 -> 6, 15 -> name, 8 -> visit-01, 21 -> "Associated", 18 -> publication, 7 -> 2007, 17 -> report-01, 1 -> verify-01, 4 -> date-entity, 11 -> 18, 14 -> country, 20 -> "Press", 6 -> 6, 0 -> shutdown, 9 -> team, 16 -> "Austria", 19 -> name, 3 -> discuss-01, 10 -> date-entity, 13 -> 2007),Map(n -> name, v2 -> visit-01, 2 -> 24, t -> team, d3 -> date-entity, s -> shutdown, v -> verify-01, m -> manner, d -> discuss-01, 62 -> 6, 1 -> 18, p -> publication, 23 -> 2007, d2 -> date-entity, r -> report-01, c -> country, 6 -> 6, 22 -> 2007, n2 -> name))),[Ljava.lang.String;@fd46303,Annotation([Ljava.lang.String;@60d8c0dc,[Ljava.lang.String;@4204541c,[Ljava.lang.String;@6a62689d),Annotation([Ljava.lang.String;@4602c2a9,[Ljava.lang.String;@60fa3495,[Ledu.cmu.lti.nlp.amr.Dependency;@3e2822),Annotation([Ljava.lang.String;@79e18e38,[Ljava.lang.String;@29a60c27,[Ljava.lang.String;@1849db1a),Annotation([Ljava.lang.String;@69c79f09,[Ljava.lang.String;@1ca25c47,[Ledu.cmu.lti.nlp.amr.Entity;@5fcacc0))
AMR:
(c / country, name, n / name)
(d / discuss-01, ARG1, m / manner)
(d2 / date-entity, day, 2 / 24)
(d2 / date-entity, month, 6 / 6)
(d2 / date-entity, year, 22 / 2007)
(d3 / date-entity, day, 1 / 18)
(d3 / date-entity, month, 62 / 6)
(d3 / date-entity, year, 23 / 2007)
(n / name, op, "Austria")
(n2 / name, op, "Associated")
(n2 / name, op, "Press")
(p / publication, name, n2 / name)
(r / report-01, ARG0, p / publication)
(r / report-01, ARG1, v2 / visit-01)
(v / verify-01, ARG0, m / manner)
(v / verify-01, ARG1, s / shutdown)
(v2 / visit-01, ARG0, t / team)
(v2 / visit-01, ARG1, c / country)
(v2 / visit-01, ARG2, d3 / date-entity)
(v2 / visit-01, purpose, d / discuss-01)
(v2 / visit-01, time, d2 / date-entity)

Decoded in 746,608 microseconds
Sentence: Hill stated IAEA inspectors will hold talks with Pyongyang officials on sealing the reactor which would include the installation of television monitors at the site.

NER Entity: (person :name (name :op "Hill"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (country :name (name :op "Pyongyang"))
Spans:
Span 5-6:  hold => hold-04
Span 18-19:  installation => install-01
Span 21-22:  monitors => monitor-01
Span 9-10:  officials => (have-org-role-91 :ARG2 official)
Span 13-14:  reactor => reactor
Span 24-25:  site => site
Span 6-7:  talks => talk-01
Span 20-21:  television => television

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 0-1:  Hill => (person :name (name :op "Hill"))
Oracle Span 5-6:  hold => hold-04
Oracle Span 2-3:  IAEA => (have-org-role-91 :ARG1 (organization :name (name :op "IAEA")))
Oracle Span 16-17:  include => include-01
Oracle Span 3-4:  inspectors => inspect-01
Oracle Span 18-19:  installation => install-01
Oracle Span 21-22:  monitors => monitor
Oracle Span 9-10:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 8-9:  Pyongyang => (city :name (name :op "Pyongyang"))
Oracle Span 13-14:  reactor => reactor
Oracle Span 11-12:  sealing => seal-01
Oracle Span 24-25:  site => site
Oracle Span 1-2:  stated => state-01
Oracle Span 6-7:  talks => talk-01
Oracle Span 20-21:  television => television

Incorrect span: monitors => monitor-01
Missing span: Hill => (person :name (name :op "Hill"))
Missing span: IAEA => (have-org-role-91 :ARG1 (organization :name (name :op "IAEA")))
Missing span: Pyongyang => (city :name (name :op "Pyongyang"))
Missing span: stated => state-01
Missing span: sealing => seal-01
Missing span: include => include-01
Missing span: monitors => monitor
Missing span: inspectors => inspect-01
Dependencies:
1	Hill	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	IAEA	_	NNP	NNP	_	4	nn	_	_
4	inspectors	_	NNS	NNS	_	6	nsubj	_	_
5	will	_	MD	MD	_	6	aux	_	_
6	hold	_	VB	VB	_	2	ccomp	_	_
7	talks	_	NNS	NNS	_	6	dobj	_	_
8	with	_	IN	IN	_	6	prep	_	_
9	Pyongyang	_	NNP	NNP	_	10	nn	_	_
10	officials	_	NNS	NNS	_	8	pobj	_	_
11	on	_	IN	IN	_	6	prep	_	_
12	sealing	_	VBG	VBG	_	11	pcomp	_	_
13	the	_	DT	DT	_	14	det	_	_
14	reactor	_	NN	NN	_	12	dobj	_	_
15	which	_	WDT	WDT	_	17	nsubj	_	_
16	would	_	MD	MD	_	17	aux	_	_
17	include	_	VB	VB	_	14	rcmod	_	_
18	the	_	DT	DT	_	19	det	_	_
19	installation	_	NN	NN	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	television	_	NN	NN	_	22	nn	_	_
22	monitors	_	NNS	NNS	_	20	pobj	_	_
23	at	_	IN	IN	_	17	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	site	_	NN	NN	_	23	pobj	_	_
26	.	_	.	.	_	2	punct	_	_

Oracle:
(c / city, name, n3 / name)
(h / hold-04, ARG1, t / talk-01)
(h2 / have-org-role-91, ARG1, c / city)
(h2 / have-org-role-91, ARG2, o2 / official)
(h3 / have-org-role-91, ARG1, o / organization)
(h3 / have-org-role-91, ARG3, i / inspect-01)
(i2 / include-01, ARG1, i3 / install-01)
(i2 / include-01, ARG2, s2 / seal-01)
(i3 / install-01, ARG1, m / monitor)
(i3 / install-01, ARG2, s3 / site)
(m / monitor, mod, t2 / television)
(n / name, op, "Hill")
(n2 / name, op, "IAEA")
(n3 / name, op, "Pyongyang")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, h / hold-04)
(s2 / seal-01, ARG1, r / reactor)
(t / talk-01, ARG1, s2 / seal-01)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),site,site,false), Span(21,22,List(1),monitors,monitor-01,false), Span(20,21,List(2),television,television,false), Span(18,19,List(3),installation,install-01,false), Span(13,14,List(4),reactor,reactor,false), Span(9,10,List(6, 5),officials,(have-org-role-91 :ARG2 official),false), Span(6,7,List(7),talks,talk-01,false), Span(5,6,List(8),hold,hold-04,false)),Map(2 -> television, 5 -> have-org-role-91, 8 -> hold-04, 7 -> talk-01, 1 -> monitor-01, 4 -> reactor, 6 -> official, 0 -> site, 3 -> install-01),Map(h -> have-org-role-91, h2 -> hold-04, t -> television, s -> site, m -> monitor-01, t2 -> talk-01, r -> reactor, i -> install-01, o -> official))),[Ljava.lang.String;@533b266e,Annotation([Ljava.lang.String;@6d1d4d7,[Ljava.lang.String;@89ff02e,[Ljava.lang.String;@6865c751),Annotation([Ljava.lang.String;@62679465,[Ljava.lang.String;@6a988392,[Ledu.cmu.lti.nlp.amr.Dependency;@1d71006f),Annotation([Ljava.lang.String;@5b6813df,[Ljava.lang.String;@5f2606b,[Ljava.lang.String;@2b58f754),Annotation([Ljava.lang.String;@3ebff828,[Ljava.lang.String;@2552f2cb,[Ledu.cmu.lti.nlp.amr.Entity;@33352f32))
AMR:
(h / have-org-role-91, ARG1, r / reactor)
(h / have-org-role-91, ARG2, o / official)
(h2 / hold-04, ARG1, t2 / talk-01)
(i / install-01, ARG0, r / reactor)
(i / install-01, ARG1, m / monitor-01)
(m / monitor-01, ARG0, s / site)
(m / monitor-01, ARG1, t / television)
(t2 / talk-01, ARG2, h / have-org-role-91)

Decoded in 179,101 microseconds
Sentence: North Korean officials refused to proceed with a February 2007 agreement to begin decommissioning the Yongbyon reactor until funds worth 25 million dollars in accounts linked to North Korea held in a Macao Bank were transferred to North Korea.

NER Entity: (thing :name (name :op "North" :op "Korean"))
NER Entity: (country :name (name :op "Yongbyon"))
NER Entity: (country :name (name :op "North" :op "Korea"))
NER Entity: (country :name (name :op "Macao"))
NER Entity: (country :name (name :op "North" :op "Korea"))
Spans:
Span 10-11:  agreement => agree-01
Span 12-13:  begin => begin-01
Span 22-23:  dollars => (monetary-quantity :unit dollar)
Span 8-10:  February 2007 => (date-entity :month 2 :year 2007)
Span 37-39:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 27-29:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 0-2:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 2-3:  officials => (have-org-role-91 :ARG2 official)
Span 16-17:  reactor => reactor
Span 3-4:  refused => refuse-01
Span 35-36:  transferred => transfer-01
Span 17-18:  until => until

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 24-25:  accounts => account
Oracle Span 10-11:  agreement => agree-01
Oracle Span 33-34:  Bank => bank
Oracle Span 12-13:  begin => begin-01
Oracle Span 13-14:  decommissioning => decommission-01
Oracle Span 22-23:  dollars => (monetary-quantity :unit dollar)
Oracle Span 8-10:  February 2007 => (date-entity :year 2007 :month 2)
Oracle Span 18-19:  funds => fund
Oracle Span 29-30:  held => hold-01
Oracle Span 25-26:  linked => link-01
Oracle Span 32-33:  Macao => (city :name (name :op "Macao"))
Oracle Span 27-29:  North Korea => (country :name (name :op "Korea" :op "North"))
Oracle Span 2-3:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 5-6:  proceed => proceed-01
Oracle Span 16-17:  reactor => reactor
Oracle Span 3-4:  refused => refuse-01
Oracle Span 35-36:  transferred => transfer-01
Oracle Span 17-18:  until => until
Oracle Span 15-16:  Yongbyon => (name :op "Yongbyon")

Extra span: North Korea => (country :name (name :op "North" :op "Korea"))
Incorrect span: North Korea => (country :name (name :op "North" :op "Korea"))
Incorrect span: February 2007 => (date-entity :month 2 :year 2007)
Extra span: North Korean => (thing :name (name :op "North" :op "Korean"))
Missing span: North Korea => (country :name (name :op "Korea" :op "North"))
Missing span: Yongbyon => (name :op "Yongbyon")
Missing span: Macao => (city :name (name :op "Macao"))
Missing span: February 2007 => (date-entity :year 2007 :month 2)
Missing span: funds => fund
Missing span: held => hold-01
Missing span: Bank => bank
Missing span: accounts => account
Missing span: linked => link-01
Missing span: proceed => proceed-01
Missing span: decommissioning => decommission-01
Dependencies:
1	North	_	JJ	JJ	_	2	amod	_	_
2	Korean	_	JJ	JJ	_	3	amod	_	_
3	officials	_	NNS	NNS	_	36	nsubjpass	_	_
4	refused	_	VBN	VBN	_	3	vmod	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	proceed	_	VB	VB	_	4	xcomp	_	_
7	with	_	IN	IN	_	6	prep	_	_
8	a	_	DT	DT	_	11	det	_	_
9	February	_	NNP	NNP	_	11	nn	_	_
10	2007	_	CD	CD	_	11	num	_	_
11	agreement	_	NN	NN	_	7	pobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	begin	_	VB	VB	_	6	xcomp	_	_
14	decommissioning	_	VBG	VBG	_	13	xcomp	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Yongbyon	_	NNP	NNP	_	17	nn	_	_
17	reactor	_	NN	NN	_	14	dobj	_	_
18	until	_	IN	IN	_	14	prep	_	_
19	funds	_	NNS	NNS	_	18	pobj	_	_
20	worth	_	IN	IN	_	14	prep	_	_
21	25	_	CD	CD	_	22	number	_	_
22	million	_	CD	CD	_	23	num	_	_
23	dollars	_	NNS	NNS	_	20	pobj	_	_
24	in	_	IN	IN	_	23	prep	_	_
25	accounts	_	NNS	NNS	_	24	pobj	_	_
26	linked	_	VBN	VBN	_	25	vmod	_	_
27	to	_	TO	TO	_	26	prep	_	_
28	North	_	NNP	NNP	_	29	nn	_	_
29	Korea	_	NNP	NNP	_	27	pobj	_	_
30	held	_	VBN	VBN	_	29	vmod	_	_
31	in	_	IN	IN	_	30	prep	_	_
32	a	_	DT	DT	_	34	det	_	_
33	Macao	_	NNP	NNP	_	34	nn	_	_
34	Bank	_	NNP	NNP	_	31	pobj	_	_
35	were	_	VBD	VBD	_	36	auxpass	_	_
36	transferred	_	VBN	VBN	_	0	root	_	_
37	to	_	TO	TO	_	36	prep	_	_
38	North	_	NNP	NNP	_	39	nn	_	_
39	Korea	_	NNP	NNP	_	37	pobj	_	_
40	.	_	.	.	_	36	punct	_	_

Oracle:
(a / agree-01, ARG1, b / begin-01)
(a / agree-01, time, d / date-entity)
(b / begin-01, ARG1, d3 / decommission-01)
(b2 / bank, mod, c2 / city)
(c / country, name, n / name)
(c2 / city, name, n3 / name)
(d / date-entity, month, 2)
(d / date-entity, year, 2007)
(d3 / decommission-01, ARG1, r3 / reactor)
(f2 / fund, location, a2 / account)
(h / hold-01, ARG1, f2 / fund)
(h / hold-01, location, b2 / bank)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, o / official)
(l / link-01, ARG1, a2 / account)
(l / link-01, ARG1, c / country)
(m / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Korea")
(n / name, op, "North")
(n3 / name, op, "Macao")
(n4 / name, op, "Yongbyon")
(p / proceed-01, ARG1, a / agree-01)
(r / refuse-01, ARG1, p / proceed-01)
(r / refuse-01, time, u / until)
(r3 / reactor, name, n4 / name)
(t / transfer-01, ARG1, f2 / fund)
(t / transfer-01, ARG2, c / country)
(u / until, op, t / transfer-01)

Input(Some(Graph(null,ArrayBuffer(Span(37,39,List(3, 2, 1, 0),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(35,36,List(4),transferred,transfer-01,false), Span(27,29,List(8, 7, 6, 5),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(22,23,List(10, 9),dollars,(monetary-quantity :unit dollar),false), Span(17,18,List(11),until,until,false), Span(16,17,List(12),reactor,reactor,false), Span(12,13,List(13),begin,begin-01,false), Span(10,11,List(14),agreement,agree-01,false), Span(8,10,List(17, 16, 15),February 2007,(date-entity :month 2 :year 2007),false), Span(3,4,List(18),refused,refuse-01,false), Span(2,3,List(20, 19),officials,(have-org-role-91 :ARG2 official),false), Span(0,2,List(24, 23, 22, 21),North Korean,(thing :name (name :op "North" :op "Korean")),false)),Map(2 -> "North", 5 -> country, 12 -> reactor, 8 -> "Korea", 15 -> date-entity, 21 -> thing, 18 -> refuse-01, 24 -> "Korean", 7 -> "North", 1 -> name, 17 -> 2007, 23 -> "North", 4 -> transfer-01, 11 -> until, 14 -> agree-01, 20 -> official, 6 -> name, 9 -> monetary-quantity, 0 -> country, 22 -> name, 16 -> 2, 19 -> have-org-role-91, 10 -> dollar, 3 -> "Korea", 13 -> begin-01),Map(n -> name, h -> have-org-role-91, 2 -> 2, t -> transfer-01, b -> begin-01, m -> monetary-quantity, d -> dollar, r2 -> refuse-01, n3 -> name, a -> agree-01, d2 -> date-entity, t2 -> thing, r -> reactor, c -> country, u -> until, 22 -> 2007, o -> official, c2 -> country, n2 -> name))),[Ljava.lang.String;@5f3b9c57,Annotation([Ljava.lang.String;@1e044120,[Ljava.lang.String;@2cf23c81,[Ljava.lang.String;@3624da92),Annotation([Ljava.lang.String;@35fe2125,[Ljava.lang.String;@94f6bfb,[Ledu.cmu.lti.nlp.amr.Dependency;@34645867),Annotation([Ljava.lang.String;@2484f433,[Ljava.lang.String;@60b71e8f,[Ljava.lang.String;@1255b1d1),Annotation([Ljava.lang.String;@464649c,[Ljava.lang.String;@7c22d4f,[Ledu.cmu.lti.nlp.amr.Entity;@5f59185e))
AMR:
(a / agree-01, ARG1, b / begin-01)
(a / agree-01, time, d2 / date-entity)
(b / begin-01, ARG0, t2 / thing)
(b / begin-01, ARG1, r2 / refuse-01)
(b / begin-01, time, u / until)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d2 / date-entity, month, 2 / 2)
(d2 / date-entity, year, 22 / 2007)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Korea")
(n / name, op, "North")
(n2 / name, op, "Korea")
(n2 / name, op, "North")
(n3 / name, op, "Korean")
(n3 / name, op, "North")
(r / reactor, time, u / until)
(r2 / refuse-01, ARG0, c / country)
(r2 / refuse-01, ARG1, h / have-org-role-91)
(t / transfer-01, ARG1, m / monetary-quantity)
(t / transfer-01, ARG2, c / country)
(t2 / thing, name, n3 / name)

Decoded in 661,856 microseconds
Sentence: The money was frozen when officials from the United States accused the Banco Delta Asia of complicity in financial crimes on behalf of North Korea.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "Banco" :op "Delta" :op "Asia"))
NER Entity: (country :name (name :op "North" :op "Korea"))
Spans:
Span 10-11:  accused => accuse-01
Span 12-15:  Banco Delta Asia => (organization :name (name :op "Banco" :op "Delta" :op "Asia"))
Span 16-17:  complicity => complicity
Span 19-20:  crimes => crime
Span 3-4:  frozen => freeze-02
Span 1-2:  money => money
Span 23-25:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 5-6:  officials => (have-org-role-91 :ARG2 official)
Span 8-10:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 10-11:  accused => accuse-01
Oracle Span 12-15:  Banco Delta Asia => (company :name (name :op "Asia" :op "Delta" :op "Banco"))
Oracle Span 16-17:  complicity => complicity
Oracle Span 19-20:  crimes => crime
Oracle Span 18-19:  financial => finance
Oracle Span 3-4:  frozen => freeze-02
Oracle Span 1-2:  money => money
Oracle Span 23-25:  North Korea => (country :name (name :op "Korea" :op "North"))
Oracle Span 5-6:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 8-10:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: North Korea => (country :name (name :op "North" :op "Korea"))
Incorrect span: Banco Delta Asia => (organization :name (name :op "Banco" :op "Delta" :op "Asia"))
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Banco Delta Asia => (company :name (name :op "Asia" :op "Delta" :op "Banco"))
Missing span: North Korea => (country :name (name :op "Korea" :op "North"))
Missing span: financial => finance
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	money	_	NN	NN	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	frozen	_	VBN	VBN	_	0	root	_	_
5	when	_	WRB	WRB	_	11	advmod	_	_
6	officials	_	NNS	NNS	_	11	nsubj	_	_
7	from	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	United	_	NNP	NNP	_	10	nn	_	_
10	States	_	NNPS	NNPS	_	7	pobj	_	_
11	accused	_	VBD	VBD	_	4	advcl	_	_
12	the	_	DT	DT	_	15	det	_	_
13	Banco	_	NNP	NNP	_	15	nn	_	_
14	Delta	_	NNP	NNP	_	15	nn	_	_
15	Asia	_	NNP	NNP	_	11	dobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	complicity	_	NN	NN	_	16	pobj	_	_
18	in	_	IN	IN	_	11	prep	_	_
19	financial	_	JJ	JJ	_	20	amod	_	_
20	crimes	_	NNS	NNS	_	18	pobj	_	_
21	on	_	IN	IN	_	11	prep	_	_
22	behalf	_	NN	NN	_	21	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	North	_	NNP	NNP	_	25	nn	_	_
25	Korea	_	NNP	NNP	_	23	pobj	_	_
26	.	_	.	.	_	4	punct	_	_

Oracle:
(a / accuse-01, ARG1, c2 / company)
(a / accuse-01, ARG2, c3 / complicity)
(c / country, name, n / name)
(c2 / company, name, n2 / name)
(c3 / complicity, topic, c4 / crime)
(c4 / crime, mod, f2 / finance)
(c5 / country, name, n3 / name)
(c5 / country, prep-on-behalf, c3 / complicity)
(f / freeze-02, ARG1, m / money)
(f / freeze-02, time, a / accuse-01)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Asia")
(n2 / name, op, "Banco")
(n2 / name, op, "Delta")
(n3 / name, op, "Korea")
(n3 / name, op, "North")

Input(Some(Graph(null,ArrayBuffer(Span(23,25,List(3, 2, 1, 0),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(19,20,List(4),crimes,crime,false), Span(16,17,List(5),complicity,complicity,false), Span(12,15,List(10, 9, 8, 7, 6),Banco Delta Asia,(organization :name (name :op "Banco" :op "Delta" :op "Asia")),false), Span(10,11,List(11),accused,accuse-01,false), Span(8,10,List(15, 14, 13, 12),United States,(country :name (name :op "United" :op "States")),false), Span(5,6,List(17, 16),officials,(have-org-role-91 :ARG2 official),false), Span(3,4,List(18),frozen,freeze-02,false), Span(1,2,List(19),money,money,false)),Map(2 -> "North", 5 -> complicity, 12 -> country, 15 -> "States", 8 -> "Banco", 18 -> freeze-02, 7 -> name, 17 -> official, 1 -> name, 4 -> crime, 11 -> accuse-01, 14 -> "United", 6 -> organization, 0 -> country, 9 -> "Delta", 16 -> have-org-role-91, 19 -> money, 3 -> "Korea", 10 -> "Asia", 13 -> name),Map(n -> name, h -> have-org-role-91, c4 -> country, m -> money, c3 -> complicity, a -> accuse-01, n3 -> name, o2 -> official, c -> country, f -> freeze-02, o -> organization, c2 -> crime, n2 -> name))),[Ljava.lang.String;@60bdf15d,Annotation([Ljava.lang.String;@47da3952,[Ljava.lang.String;@51e4ccb3,[Ljava.lang.String;@46e8a539),Annotation([Ljava.lang.String;@495083a0,[Ljava.lang.String;@5fd62371,[Ledu.cmu.lti.nlp.amr.Dependency;@28a0fd6c),Annotation([Ljava.lang.String;@2b62442c,[Ljava.lang.String;@66629f63,[Ljava.lang.String;@841e575),Annotation([Ljava.lang.String;@27a5328c,[Ljava.lang.String;@1e5f4170,[Ledu.cmu.lti.nlp.amr.Entity;@6c345c5f))
AMR:
(a / accuse-01, ARG0, c4 / country)
(a / accuse-01, ARG1, o / organization)
(a / accuse-01, ARG2, c3 / complicity)
(a / accuse-01, concession, c2 / crime)
(c / country, name, n / name)
(c4 / country, name, n3 / name)
(f / freeze-02, ARG0, c / country)
(f / freeze-02, ARG1, m / money)
(f / freeze-02, condition, a / accuse-01)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, o2 / official)
(n / name, op, "Korea")
(n / name, op, "North")
(n2 / name, op, "Asia")
(n2 / name, op, "Banco")
(n2 / name, op, "Delta")
(n3 / name, op, "States")
(n3 / name, op, "United")
(o / organization, name, n2 / name)

Decoded in 402,922 microseconds
Sentence: The funds were wired on 14 June 2007 to the New York Federal Reserve Bank after months of disagreement over the method of returning the funds.

mkDayMonthYear(14	June	2007,14,June,2007)
NER Entity: (country :name (name :op "New" :op "York"))
NER Entity: (organization :name (name :op "Federal" :op "Reserve" :op "Bank"))
Spans:
Span 5-8:  14 June 2007 => (date-entity :day 14 :month 6 :year 2007)
Span 15-16:  after => after
Span 18-19:  disagreement => disagree-01
Span 12-15:  Federal Reserve Bank => (organization :name (name :op "Federal" :op "Reserve" :op "Bank"))
Span 21-22:  method => method
Span 16-17:  months => (temporal-quantity :unit month)
Span 10-12:  New York => (country :name (name :op "New" :op "York"))

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 5-8:  14 June 2007 => (date-entity :year 2007 :month 6 :day 14)
Oracle Span 15-16:  after => after
Oracle Span 18-19:  disagreement => disagree-01
Oracle Span 1-2:  funds => fund
Oracle Span 21-22:  method => method
Oracle Span 16-17:  months => (temporal-quantity :unit month)
Oracle Span 10-15:  New York Federal Reserve Bank => (company :name (name :op "Bank" :op "Reserve" :op "Federal" :op "York" :op "New"))
Oracle Span 23-24:  returning => return-02
Oracle Span 3-4:  wired => wire-01

Extra span: Federal Reserve Bank => (organization :name (name :op "Federal" :op "Reserve" :op "Bank"))
Extra span: New York => (country :name (name :op "New" :op "York"))
Incorrect span: 14 June 2007 => (date-entity :day 14 :month 6 :year 2007)
Missing span: New York Federal Reserve Bank => (company :name (name :op "Bank" :op "Reserve" :op "Federal" :op "York" :op "New"))
Missing span: 14 June 2007 => (date-entity :year 2007 :month 6 :day 14)
Missing span: wired => wire-01
Missing span: returning => return-02
Missing span: funds => fund
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	funds	_	NNS	NNS	_	4	nsubjpass	_	_
3	were	_	VBD	VBD	_	4	auxpass	_	_
4	wired	_	VBN	VBN	_	0	root	_	_
5	on	_	IN	IN	_	4	prep	_	_
6	14	_	CD	CD	_	5	pobj	_	_
7	June	_	NNP	NNP	_	4	tmod	_	_
8	2007	_	CD	CD	_	7	num	_	_
9	to	_	TO	TO	_	4	prep	_	_
10	the	_	DT	DT	_	15	det	_	_
11	New	_	NNP	NNP	_	15	nn	_	_
12	York	_	NNP	NNP	_	15	nn	_	_
13	Federal	_	NNP	NNP	_	15	nn	_	_
14	Reserve	_	NNP	NNP	_	15	nn	_	_
15	Bank	_	NNP	NNP	_	9	pobj	_	_
16	after	_	IN	IN	_	15	prep	_	_
17	months	_	NNS	NNS	_	16	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	disagreement	_	NN	NN	_	18	pobj	_	_
20	over	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	method	_	NN	NN	_	20	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	returning	_	VBG	VBG	_	23	pcomp	_	_
25	the	_	DT	DT	_	26	det	_	_
26	funds	_	NNS	NNS	_	24	dobj	_	_
27	.	_	.	.	_	4	punct	_	_

Oracle:
(a / after, op, d2 / disagree-01)
(c / company, name, n / name)
(d / date-entity, day, 14)
(d / date-entity, month, 6)
(d / date-entity, year, 2007)
(d2 / disagree-01, ARG2, m3 / method)
(m3 / method, mod, r / return-02)
(n / name, op, "Bank")
(n / name, op, "Federal")
(n / name, op, "New")
(n / name, op, "Reserve")
(n / name, op, "York")
(r / return-02, ARG1, f / fund)
(t / temporal-quantity, unit, m2 / month)
(w / wire-01, ARG1, f / fund)
(w / wire-01, ARG2, c / company)
(w / wire-01, time, a / after)
(w / wire-01, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),method,method,false), Span(18,19,List(1),disagreement,disagree-01,false), Span(16,17,List(3, 2),months,(temporal-quantity :unit month),false), Span(15,16,List(4),after,after,false), Span(12,15,List(9, 8, 7, 6, 5),Federal Reserve Bank,(organization :name (name :op "Federal" :op "Reserve" :op "Bank")),false), Span(10,12,List(13, 12, 11, 10),New York,(country :name (name :op "New" :op "York")),false), Span(5,8,List(17, 16, 15, 14),14 June 2007,(date-entity :day 14 :month 6 :year 2007),false)),Map(2 -> temporal-quantity, 5 -> organization, 12 -> "New", 15 -> 14, 8 -> "Reserve", 7 -> "Federal", 17 -> 2007, 1 -> disagree-01, 4 -> after, 11 -> name, 14 -> date-entity, 6 -> name, 0 -> method, 9 -> "Bank", 16 -> 6, 3 -> month, 10 -> country, 13 -> "York"),Map(n -> name, 2 -> 2007, t -> temporal-quantity, m2 -> month, m -> method, d -> disagree-01, 1 -> 14, a -> after, d2 -> date-entity, c -> country, 6 -> 6, o -> organization, n2 -> name))),[Ljava.lang.String;@6b5966e1,Annotation([Ljava.lang.String;@65e61854,[Ljava.lang.String;@1568159,[Ljava.lang.String;@4fcee388),Annotation([Ljava.lang.String;@6f80fafe,[Ljava.lang.String;@3af17be2,[Ledu.cmu.lti.nlp.amr.Dependency;@f9879ac),Annotation([Ljava.lang.String;@37f21974,[Ljava.lang.String;@5f4d427e,[Ljava.lang.String;@6e521c1e),Annotation([Ljava.lang.String;@224b4d61,[Ljava.lang.String;@5d5d9e5,[Ledu.cmu.lti.nlp.amr.Entity;@303e3593))
AMR:
(a / after, op, d / disagree-01)
(c / country, name, n2 / name)
(d / disagree-01, ARG0, m / method)
(d / disagree-01, ARG1, c / country)
(d / disagree-01, ARG2, d2 / date-entity)
(d / disagree-01, duration, t / temporal-quantity)
(d2 / date-entity, day, 1 / 14)
(d2 / date-entity, month, 6 / 6)
(d2 / date-entity, year, 2 / 2007)
(n / name, op, "Bank")
(n / name, op, "Federal")
(n / name, op, "Reserve")
(n2 / name, op, "New")
(n2 / name, op, "York")
(o / organization, mod, c / country)
(o / organization, name, n / name)
(t / temporal-quantity, unit, m2 / month)

Decoded in 155,786 microseconds
Sentence: The funds were to be sent to Russia's Central Bank before a transfer to an account controlled by the North Korea government in a Russian commercial bank.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (organization :name (name :op "Central" :op "Bank"))
NER Entity: (country :name (name :op "North" :op "Korea"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 16-17:  account => account
Span 27-28:  bank => bank
Span 11-12:  before => before
Span 9-11:  Central Bank => (organization :name (name :op "Central" :op "Bank"))
Span 26-27:  commercial => commerce
Span 17-18:  controlled => control-01
Span 20-22:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 5-6:  sent => send-01
Span 13-14:  transfer => transfer-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 16-17:  account => account
Oracle Span 27-28:  bank => bank
Oracle Span 11-12:  before => before
Oracle Span 9-11:  Central Bank => (company :name (name :op "Bank" :op "Central"))
Oracle Span 26-27:  commercial => commerce
Oracle Span 17-18:  controlled => control-01
Oracle Span 1-2:  funds => fund
Oracle Span 22-23:  government => (government-organization :ARG0-of govern-01)
Oracle Span 20-22:  North Korea => (country :name (name :op "Korea" :op "North"))
Oracle Span 7-8:  Russia => (country :name (name :op "Russia"))
Oracle Span 5-6:  sent => send-01
Oracle Span 13-14:  transfer => transfer-01

Incorrect span: North Korea => (country :name (name :op "North" :op "Korea"))
Incorrect span: Central Bank => (organization :name (name :op "Central" :op "Bank"))
Missing span: Central Bank => (company :name (name :op "Bank" :op "Central"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: North Korea => (country :name (name :op "Korea" :op "North"))
Missing span: funds => fund
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	funds	_	NNS	NNS	_	3	nsubj	_	_
3	were	_	VBD	VBD	_	0	root	_	_
4	to	_	TO	TO	_	6	aux	_	_
5	be	_	VB	VB	_	6	auxpass	_	_
6	sent	_	VBN	VBN	_	3	xcomp	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	Russia	_	NNP	NNP	_	11	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	Central	_	NNP	NNP	_	11	nn	_	_
11	Bank	_	NNP	NNP	_	7	pobj	_	_
12	before	_	IN	IN	_	6	prep	_	_
13	a	_	DT	DT	_	14	det	_	_
14	transfer	_	NN	NN	_	12	pobj	_	_
15	to	_	TO	TO	_	14	prep	_	_
16	an	_	DT	DT	_	17	det	_	_
17	account	_	NN	NN	_	15	pobj	_	_
18	controlled	_	VBN	VBN	_	17	vmod	_	_
19	by	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	23	det	_	_
21	North	_	NNP	NNP	_	23	nn	_	_
22	Korea	_	NNP	NNP	_	23	nn	_	_
23	government	_	NN	NN	_	19	pobj	_	_
24	in	_	IN	IN	_	23	prep	_	_
25	a	_	DT	DT	_	28	det	_	_
26	Russian	_	JJ	JJ	_	28	amod	_	_
27	commercial	_	JJ	JJ	_	28	amod	_	_
28	bank	_	NN	NN	_	24	pobj	_	_
29	.	_	.	.	_	3	punct	_	_

Oracle:
(a / account, location, b2 / bank)
(b / before, op, t / transfer-01)
(b2 / bank, mod, c2 / country)
(b2 / bank, mod, c5 / commerce)
(c / company, name, n / name)
(c / company, poss, c2 / country)
(c2 / country, name, n2 / name)
(c3 / control-01, ARG0, g / government-organization)
(c3 / control-01, ARG1, a / account)
(c4 / country, name, n3 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c4 / country)
(n / name, op, "Bank")
(n / name, op, "Central")
(n2 / name, op, "Russia")
(n3 / name, op, "Korea")
(n3 / name, op, "North")
(s / send-01, ARG1, f / fund)
(s / send-01, ARG2, c / company)
(s / send-01, time, b / before)
(t / transfer-01, ARG2, a / account)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),bank,bank,false), Span(26,27,List(1),commercial,commerce,false), Span(20,22,List(5, 4, 3, 2),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(17,18,List(6),controlled,control-01,false), Span(16,17,List(7),account,account,false), Span(13,14,List(8),transfer,transfer-01,false), Span(11,12,List(9),before,before,false), Span(9,11,List(13, 12, 11, 10),Central Bank,(organization :name (name :op "Central" :op "Bank")),false), Span(5,6,List(14),sent,send-01,false)),Map(2 -> country, 5 -> "Korea", 12 -> "Central", 8 -> transfer-01, 7 -> account, 1 -> commerce, 4 -> "North", 11 -> name, 14 -> send-01, 6 -> control-01, 0 -> bank, 9 -> before, 3 -> name, 10 -> organization, 13 -> "Bank"),Map(n -> name, t -> transfer-01, b -> bank, b2 -> before, s -> send-01, a -> account, c3 -> control-01, c -> commerce, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@4ef27d66,Annotation([Ljava.lang.String;@362a019c,[Ljava.lang.String;@1d9bec4d,[Ljava.lang.String;@5c48c0c0),Annotation([Ljava.lang.String;@10c8f62,[Ljava.lang.String;@674c583e,[Ledu.cmu.lti.nlp.amr.Dependency;@25f7391e),Annotation([Ljava.lang.String;@3f23a3a0,[Ljava.lang.String;@5ab14cb9,[Ljava.lang.String;@5fb97279),Annotation([Ljava.lang.String;@439a8f59,[Ljava.lang.String;@61861a29,[Ledu.cmu.lti.nlp.amr.Entity;@31024624))
AMR:
(b / bank, mod, c / commerce)
(b2 / before, op, t / transfer-01)
(c2 / country, name, n / name)
(c3 / control-01, ARG1, a / account)
(n / name, op, "Korea")
(n / name, op, "North")
(n2 / name, op, "Bank")
(n2 / name, op, "Central")
(o / organization, name, n2 / name)
(s / send-01, ARG0, c / commerce)
(s / send-01, ARG1, t / transfer-01)
(s / send-01, ARG2, o / organization)
(t / transfer-01, ARG1, a / account)
(t / transfer-01, ARG2, c2 / country)

Decoded in 268,496 microseconds
Sentence: Hill stated talks will occur the week of 17 June 2007 with disarmament negotiators from Russia, South Korea and Japan on steps to recoup some of the time lost while the financial transfer was being organized.

NER Entity: (person :name (name :op "Hill"))
mkDayMonthYear(17	June	2007,17,June,2007)
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "South" :op "Korea"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 8-11:  17 June 2007 => (date-entity :day 17 :month 6 :year 2007)
Span 12-13:  disarmament => disarm-01
Span 29-30:  lost => lose-02
Span 13-14:  negotiators => (person :ARG0-of negotiate-01)
Span 36-37:  organized => organize-01
Span 25-26:  some => some
Span 17-19:  South Korea => (country :name (name :op "South" :op "Korea"))
Span 22-23:  steps => step-01
Span 2-3:  talks => talk-01
Span 33-34:  transfer => transfer-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 8-11:  17 June 2007 => (date-entity :year 2007 :month 6 :day 17)
Oracle Span 19-20:  and => and
Oracle Span 12-13:  disarmament => disarm-01
Oracle Span 32-33:  financial => finance
Oracle Span 0-1:  Hill => (person :name (name :op "Hill"))
Oracle Span 20-21:  Japan => (country :name (name :op "Japan"))
Oracle Span 29-30:  lost => lose-02
Oracle Span 13-14:  negotiators => (person :ARG0-of negotiate-01)
Oracle Span 7-8:  of => include-91
Oracle Span 36-37:  organized => organize-01
Oracle Span 24-25:  recoup => recoup-01
Oracle Span 15-16:  Russia => (country :name (name :op "Russia"))
Oracle Span 17-19:  South Korea => (country :name (name :op "Korea" :op "South"))
Oracle Span 1-2:  stated => state-01
Oracle Span 22-23:  steps => step
Oracle Span 2-3:  talks => talk-01
Oracle Span 28-29:  time => time
Oracle Span 33-34:  transfer => transfer-01
Oracle Span 6-7:  week => week

Extra span: some => some
Incorrect span: steps => step-01
Incorrect span: South Korea => (country :name (name :op "South" :op "Korea"))
Incorrect span: 17 June 2007 => (date-entity :day 17 :month 6 :year 2007)
Missing span: Hill => (person :name (name :op "Hill"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: South Korea => (country :name (name :op "Korea" :op "South"))
Missing span: Japan => (country :name (name :op "Japan"))
Missing span: 17 June 2007 => (date-entity :year 2007 :month 6 :day 17)
Missing span: stated => state-01
Missing span: week => week
Missing span: and => and
Missing span: steps => step
Missing span: recoup => recoup-01
Missing span: time => time
Missing span: of => include-91
Missing span: financial => finance
Dependencies:
1	Hill	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	talks	_	NNS	NNS	_	5	nsubj	_	_
4	will	_	MD	MD	_	5	aux	_	_
5	occur	_	VB	VB	_	2	ccomp	_	_
6	the	_	DT	DT	_	7	det	_	_
7	week	_	NN	NN	_	5	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	17	_	CD	CD	_	8	pobj	_	_
10	June	_	NNP	NNP	_	5	tmod	_	_
11	2007	_	CD	CD	_	10	num	_	_
12	with	_	IN	IN	_	5	prep	_	_
13	disarmament	_	NN	NN	_	14	nn	_	_
14	negotiators	_	NNS	NNS	_	12	pobj	_	_
15	from	_	IN	IN	_	14	prep	_	_
16	Russia	_	NNP	NNP	_	19	nn	_	_
17	,	_	,	,	_	19	punct	_	_
18	South	_	NNP	NNP	_	19	conj	_	_
19	Korea	_	NNP	NNP	_	15	pobj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	Japan	_	NNP	NNP	_	19	conj	_	_
22	on	_	IN	IN	_	19	prep	_	_
23	steps	_	NNS	NNS	_	22	pobj	_	_
24	to	_	TO	TO	_	25	aux	_	_
25	recoup	_	VB	VB	_	23	vmod	_	_
26	some	_	DT	DT	_	25	dobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	time	_	NN	NN	_	27	pobj	_	_
30	lost	_	VBN	VBN	_	29	vmod	_	_
31	while	_	IN	IN	_	37	mark	_	_
32	the	_	DT	DT	_	34	det	_	_
33	financial	_	JJ	JJ	_	34	amod	_	_
34	transfer	_	NN	NN	_	37	nsubjpass	_	_
35	was	_	VBD	VBD	_	37	aux	_	_
36	being	_	VBG	VBG	_	37	auxpass	_	_
37	organized	_	VBN	VBN	_	30	advcl	_	_
38	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, p4 / person)
(c / country, name, n3 / name)
(c2 / country, name, n5 / name)
(c3 / country, name, n7 / name)
(d / date-entity, day, 17)
(d / date-entity, month, 6)
(d / date-entity, year, 2007)
(i / include-91, ARG1, t2 / time)
(l / lose-02, time, o2 / organize-01)
(n / name, op, "Hill")
(n3 / name, op, "Russia")
(n5 / name, op, "Korea")
(n5 / name, op, "South")
(n6 / negotiate-01, ARG0, p4 / person)
(n6 / negotiate-01, ARG2, d4 / disarm-01)
(n7 / name, op, "Japan")
(o2 / organize-01, ARG1, t4 / transfer-01)
(p / person, name, n / name)
(p4 / person, source, c3 / country)
(r / recoup-01, ARG1, t2 / time)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, t / talk-01)
(s2 / step, purpose, r / recoup-01)
(t / talk-01, ARG1, s2 / step)
(t / talk-01, ARG2, a / and)
(t / talk-01, time, w / week)
(t4 / transfer-01, mod, f / finance)
(w / week, mod, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),organized,organize-01,false), Span(33,34,List(1),transfer,transfer-01,false), Span(29,30,List(2),lost,lose-02,false), Span(25,26,List(3),some,some,false), Span(22,23,List(4),steps,step-01,false), Span(17,19,List(8, 7, 6, 5),South Korea,(country :name (name :op "South" :op "Korea")),false), Span(13,14,List(10, 9),negotiators,(person :ARG0-of negotiate-01),false), Span(12,13,List(11),disarmament,disarm-01,false), Span(8,11,List(15, 14, 13, 12),17 June 2007,(date-entity :day 17 :month 6 :year 2007),false), Span(2,3,List(16),talks,talk-01,false)),Map(2 -> lose-02, 5 -> country, 12 -> date-entity, 15 -> 2007, 8 -> "Korea", 7 -> "South", 1 -> transfer-01, 4 -> step-01, 11 -> disarm-01, 14 -> 6, 6 -> name, 0 -> organize-01, 9 -> person, 16 -> talk-01, 3 -> some, 10 -> negotiate-01, 13 -> 17),Map(n -> name, 2 -> 2007, s2 -> step-01, t -> transfer-01, s -> some, d -> disarm-01, 1 -> 17, p -> person, d2 -> date-entity, t2 -> talk-01, c -> country, 6 -> 6, l -> lose-02, o -> organize-01, n2 -> negotiate-01))),[Ljava.lang.String;@25bcd0c7,Annotation([Ljava.lang.String;@32cb636e,[Ljava.lang.String;@63cd604c,[Ljava.lang.String;@40dd3977),Annotation([Ljava.lang.String;@3a4e343,[Ljava.lang.String;@6a1d204a,[Ledu.cmu.lti.nlp.amr.Dependency;@62dae245),Annotation([Ljava.lang.String;@4b6579e8,[Ljava.lang.String;@6fff253c,[Ljava.lang.String;@6c6357f9),Annotation([Ljava.lang.String;@591e58fa,[Ljava.lang.String;@3954d008,[Ledu.cmu.lti.nlp.amr.Entity;@2f94c4db))
AMR:
(c / country, name, n / name)
(c / country, op, t / transfer-01)
(d / disarm-01, ARG0, p / person)
(d / disarm-01, ARG1, s2 / step-01)
(d2 / date-entity, day, 1 / 17)
(d2 / date-entity, month, 6 / 6)
(d2 / date-entity, year, 2 / 2007)
(l / lose-02, ARG0, t / transfer-01)
(l / lose-02, ARG1, d2 / date-entity)
(n / name, op, "Korea")
(n / name, op, "South")
(n2 / negotiate-01, ARG0, p / person)
(n2 / negotiate-01, ARG1, c / country)
(n2 / negotiate-01, ARG2, t2 / talk-01)
(o / organize-01, ARG1, t / transfer-01)
(s2 / step-01, ARG1, s / some)

Decoded in 295,847 microseconds
Sentence: The discussions will also involve setting a timetable for resumption of 6-nation arms control talks.

Spans:
Span 15-16:  control => control-01
Span 1-2:  discussions => discuss-01
Span 4-5:  involve => involve-01
Span 13-14:  nation => nation
Span 9-10:  resumption => resume-01
Span 5-6:  setting => set-02
Span 16-17:  talks => talk-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 11-12:  6 => 6
Oracle Span 3-4:  also => also
Oracle Span 14-15:  arms => arm
Oracle Span 15-16:  control => control-01
Oracle Span 1-2:  discussions => discuss-01
Oracle Span 4-5:  involve => involve-01
Oracle Span 13-14:  nation => nation
Oracle Span 9-10:  resumption => resume-01
Oracle Span 5-6:  setting => set-02
Oracle Span 16-17:  talks => talk-01
Oracle Span 7-8:  timetable => timetable

Missing span: also => also
Missing span: timetable => timetable
Missing span: arms => arm
Missing span: 6 => 6
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	discussions	_	NNS	NNS	_	5	nsubj	_	_
3	will	_	MD	MD	_	5	aux	_	_
4	also	_	RB	RB	_	5	advmod	_	_
5	involve	_	VB	VB	_	0	root	_	_
6	setting	_	VBG	VBG	_	5	xcomp	_	_
7	a	_	DT	DT	_	8	det	_	_
8	timetable	_	NN	NN	_	6	dobj	_	_
9	for	_	IN	IN	_	6	prep	_	_
10	resumption	_	NN	NN	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	6-nation	_	JJ	JJ	_	15	amod	_	_
13	arms	_	NNS	NNS	_	15	nn	_	_
14	control	_	NN	NN	_	15	nn	_	_
15	talks	_	NNS	NNS	_	11	pobj	_	_
16	.	_	.	.	_	5	punct	_	_

Oracle:
(c / control-01, ARG1, a / arm)
(i / involve-01, ARG0, d / discuss-01)
(i / involve-01, ARG1, s / set-02)
(i / involve-01, mod, a2 / also)
(n / nation, quant, 6 / 6)
(r / resume-01, ARG1, t2 / talk-01)
(r / resume-01, ARG2, t / timetable)
(s / set-02, ARG1, t / timetable)
(t2 / talk-01, ARG0, n / nation)
(t2 / talk-01, ARG1, c / control-01)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),talks,talk-01,false), Span(15,16,List(1),control,control-01,false), Span(13,14,List(2),nation,nation,false), Span(9,10,List(3),resumption,resume-01,false), Span(5,6,List(4),setting,set-02,false), Span(4,5,List(5),involve,involve-01,false), Span(1,2,List(6),discussions,discuss-01,false)),Map(2 -> nation, 5 -> involve-01, 1 -> control-01, 4 -> set-02, 6 -> discuss-01, 0 -> talk-01, 3 -> resume-01),Map(n -> nation, t -> talk-01, s -> set-02, d -> discuss-01, i -> involve-01, r -> resume-01, c -> control-01))),[Ljava.lang.String;@593e824f,Annotation([Ljava.lang.String;@72ccd81a,[Ljava.lang.String;@6d8792db,[Ljava.lang.String;@64bc21ac),Annotation([Ljava.lang.String;@493dfb8e,[Ljava.lang.String;@5d25e6bb,[Ledu.cmu.lti.nlp.amr.Dependency;@ce5a68e),Annotation([Ljava.lang.String;@9d157ff,[Ljava.lang.String;@2f162cc0,[Ljava.lang.String;@5df417a7),Annotation([Ljava.lang.String;@7c041b41,[Ljava.lang.String;@7f69d591,[Ledu.cmu.lti.nlp.amr.Entity;@61078690))
AMR:
(i / involve-01, ARG0, d / discuss-01)
(i / involve-01, ARG1, s / set-02)
(i / involve-01, ARG2, r / resume-01)
(r / resume-01, ARG1, t / talk-01)
(t / talk-01, ARG0, n / nation)
(t / talk-01, ARG1, c / control-01)

Decoded in 116,716 microseconds
Sentence: Under the agreement reached in February 2007 North Korean officials pledged to shut down the Yongbyon reactor and allow inspectors to verify and monitor the shutdown in return for a 50000-ton shipment of fuel oil.

NER Entity: (thing :name (name :op "North" :op "Korean"))
NER Entity: (country :name (name :op "Yongbyon"))
Spans:
Span 30-31:  50000 => 50000
Span 2-3:  agreement => agree-01
Span 18-19:  allow => allow-01
Span 5-7:  February 2007 => (date-entity :month 2 :year 2007)
Span 35-36:  fuel => fuel
Span 23-24:  monitor => monitor-01
Span 7-9:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 9-10:  officials => (have-org-role-91 :ARG2 official)
Span 36-37:  oil => oil
Span 10-11:  pledged => pledge-01
Span 3-4:  reached => reach-01
Span 16-17:  reactor => reactor
Span 12-13:  shut => shut-05
Span 25-26:  shutdown => shutdown
Span 32-33:  ton => (mass-quantity :unit ton)
Span 21-22:  verify => verify-01

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Oracle Span 30-31:  50000 => 50000
Oracle Span 2-3:  agreement => agree-01
Oracle Span 18-19:  allow => allow-01
Oracle Span 17-18:  and => and
Oracle Span 22-23:  and => and
Oracle Span 5-7:  February 2007 => (date-entity :year 2007 :month 2)
Oracle Span 35-36:  fuel => fuel
Oracle Span 19-20:  inspectors => (person :ARG0-of inspect-01)
Oracle Span 23-24:  monitor => monitor-01
Oracle Span 7-9:  North Korean => (country :name (name :op "Korea" :op "North"))
Oracle Span 9-10:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 36-37:  oil => oil
Oracle Span 10-11:  pledged => pledge-01
Oracle Span 3-4:  reached => reach-01
Oracle Span 16-17:  reactor => reactor
Oracle Span 33-34:  shipment => ship-01
Oracle Span 12-13:  shut => shut-05
Oracle Span 32-33:  ton => (mass-quantity :unit ton)
Oracle Span 21-22:  verify => verify-01
Oracle Span 15-16:  Yongbyon => (name :op "Yongbyon")

Extra span: shutdown => shutdown
Incorrect span: North Korean => (thing :name (name :op "North" :op "Korean"))
Incorrect span: February 2007 => (date-entity :month 2 :year 2007)
Missing span: Yongbyon => (name :op "Yongbyon")
Missing span: North Korean => (country :name (name :op "Korea" :op "North"))
Missing span: February 2007 => (date-entity :year 2007 :month 2)
Missing span: and => and
Missing span: and => and
Missing span: shipment => ship-01
Missing span: inspectors => (person :ARG0-of inspect-01)
Dependencies:
1	Under	_	IN	IN	_	11	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	agreement	_	NN	NN	_	1	pobj	_	_
4	reached	_	VBN	VBN	_	3	vmod	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	February	_	NNP	NNP	_	5	pobj	_	_
7	2007	_	CD	CD	_	6	num	_	_
8	North	_	JJ	JJ	_	9	amod	_	_
9	Korean	_	JJ	JJ	_	10	amod	_	_
10	officials	_	NNS	NNS	_	11	nsubj	_	_
11	pledged	_	VBD	VBD	_	0	root	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	shut	_	VB	VB	_	11	xcomp	_	_
14	down	_	RP	RP	_	13	prt	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Yongbyon	_	NNP	NNP	_	17	nn	_	_
17	reactor	_	NN	NN	_	13	dobj	_	_
18	and	_	CC	CC	_	13	cc	_	_
19	allow	_	VB	VB	_	13	conj	_	_
20	inspectors	_	NNS	NNS	_	19	dobj	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	verify	_	VB	VB	_	19	xcomp	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	monitor	_	VB	VB	_	22	conj	_	_
25	the	_	DT	DT	_	26	det	_	_
26	shutdown	_	NN	NN	_	22	dobj	_	_
27	in	_	IN	IN	_	26	prep	_	_
28	return	_	NN	NN	_	27	pobj	_	_
29	for	_	IN	IN	_	22	prep	_	_
30	a	_	DT	DT	_	32	det	_	_
31	50000-ton	_	JJ	JJ	_	32	amod	_	_
32	shipment	_	NN	NN	_	29	pobj	_	_
33	of	_	IN	IN	_	32	prep	_	_
34	fuel	_	NN	NN	_	35	nn	_	_
35	oil	_	NN	NN	_	33	pobj	_	_
36	.	_	.	.	_	11	punct	_	_

Oracle:
(a / and, op, a3 / allow-01)
(a / and, op, s / shut-05)
(a3 / allow-01, ARG1, a4 / and)
(a4 / and, op, m / monitor-01)
(a4 / and, op, v / verify-01)
(c / country, name, n / name)
(d / date-entity, month, 2)
(d / date-entity, year, 2007)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(i / inspect-01, ARG0, p2 / person)
(m / monitor-01, ARG0, p2 / person)
(m / monitor-01, ARG1, s / shut-05)
(m2 / mass-quantity, quant, 5 / 50000)
(m2 / mass-quantity, unit, t / ton)
(n / name, op, "Korea")
(n / name, op, "North")
(n2 / name, op, "Yongbyon")
(o2 / oil, mod, f / fuel)
(o2 / oil, quant, m2 / mass-quantity)
(p / pledge-01, ARG2, a / and)
(p / pledge-01, prep-under, a2 / agree-01)
(r / reach-01, ARG1, a2 / agree-01)
(r / reach-01, time, d / date-entity)
(r2 / reactor, name, n2 / name)
(s / shut-05, ARG1, r2 / reactor)
(s3 / ship-01, ARG1, o2 / oil)
(v / verify-01, ARG0, p2 / person)
(v / verify-01, ARG1, s / shut-05)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),oil,oil,false), Span(35,36,List(1),fuel,fuel,false), Span(32,33,List(3, 2),ton,(mass-quantity :unit ton),false), Span(30,31,List(4),50000,50000,false), Span(25,26,List(5),shutdown,shutdown,false), Span(23,24,List(6),monitor,monitor-01,false), Span(21,22,List(7),verify,verify-01,false), Span(18,19,List(8),allow,allow-01,false), Span(16,17,List(9),reactor,reactor,false), Span(12,13,List(10),shut,shut-05,false), Span(10,11,List(11),pledged,pledge-01,false), Span(9,10,List(13, 12),officials,(have-org-role-91 :ARG2 official),false), Span(7,9,List(17, 16, 15, 14),North Korean,(thing :name (name :op "North" :op "Korean")),false), Span(5,7,List(20, 19, 18),February 2007,(date-entity :month 2 :year 2007),false), Span(3,4,List(21),reached,reach-01,false), Span(2,3,List(22),agreement,agree-01,false)),Map(2 -> mass-quantity, 5 -> shutdown, 12 -> have-org-role-91, 15 -> name, 8 -> allow-01, 21 -> reach-01, 18 -> date-entity, 7 -> verify-01, 17 -> "Korean", 1 -> fuel, 4 -> 50000, 11 -> pledge-01, 14 -> thing, 20 -> 2007, 6 -> monitor-01, 22 -> agree-01, 0 -> oil, 9 -> reactor, 16 -> "North", 19 -> 2, 3 -> ton, 10 -> shut-05, 13 -> official),Map(n -> name, h -> have-org-role-91, 2 -> 2, 5 -> 50000, s2 -> shut-05, t -> ton, m2 -> monitor-01, s -> shutdown, v -> verify-01, d -> date-entity, m -> mass-quantity, r2 -> reach-01, p -> pledge-01, a -> allow-01, o2 -> official, t2 -> thing, a2 -> agree-01, r -> reactor, 22 -> 2007, f -> fuel, o -> oil))),[Ljava.lang.String;@1cb3ec38,Annotation([Ljava.lang.String;@403132fc,[Ljava.lang.String;@71c5b236,[Ljava.lang.String;@2cab9998),Annotation([Ljava.lang.String;@2f7a7219,[Ljava.lang.String;@669513d8,[Ledu.cmu.lti.nlp.amr.Dependency;@3a1d593e),Annotation([Ljava.lang.String;@4a8a60bc,[Ljava.lang.String;@361c294e,[Ljava.lang.String;@7859e786),Annotation([Ljava.lang.String;@285d851a,[Ljava.lang.String;@314b8f2d,[Ledu.cmu.lti.nlp.amr.Entity;@664a9613))
AMR:
(a / allow-01, ARG1, v / verify-01)
(a2 / agree-01, ARG1, t2 / thing)
(a2 / agree-01, time, d / date-entity)
(d / date-entity, month, 2 / 2)
(d / date-entity, year, 22 / 2007)
(h / have-org-role-91, ARG0, 5 / 50000)
(h / have-org-role-91, ARG2, o2 / official)
(m / mass-quantity, mod, 5 / 50000)
(m / mass-quantity, unit, t / ton)
(m2 / monitor-01, ARG1, s / shutdown)
(n / name, op, "Korean")
(n / name, op, "North")
(o / oil, mod, f / fuel)
(o / oil, op, m2 / monitor-01)
(p / pledge-01, ARG1, a2 / agree-01)
(p / pledge-01, ARG2, s2 / shut-05)
(r2 / reach-01, ARG1, a2 / agree-01)
(s2 / shut-05, ARG0, o2 / official)
(s2 / shut-05, ARG1, r / reactor)
(t2 / thing, name, n / name)
(v / verify-01, ARG0, r / reactor)
(v / verify-01, ARG1, s / shutdown)

Decoded in 1,370,837 microseconds
Sentence: North Korean officials will declare all nuclear programs and disable all facilities in return for a further 950000 tons of fuel oil in the next phase of the Agreement.

NER Entity: (thing :name (name :op "North" :op "Korean"))
mkDayMonthYear(950000,00,00,95)
mkDayMonthYear(950000,00,00,95)
Spans:
Span 17-18:  950000 => (date-entity :year 1995)
Span 28-29:  Agreement => agreement
Span 10-11:  all => all
Span 5-6:  all => all
Span 9-10:  disable => disable-01
Span 11-12:  facilities => facility
Span 20-21:  fuel => fuel
Span 16-17:  further => further
Span 24-25:  next => next
Span 0-2:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 6-7:  nuclear => nucleus
Span 2-3:  officials => (have-org-role-91 :ARG2 official)
Span 21-22:  oil => oil
Span 25-26:  phase => phase
Span 7-8:  programs => program
Span 18-19:  tons => (mass-quantity :unit ton)

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Oracle Span 17-18:  950000 => 950000
Oracle Span 28-29:  Agreement => agreement
Oracle Span 5-6:  all => all
Oracle Span 10-11:  all => all
Oracle Span 8-9:  and => and
Oracle Span 4-5:  declare => declare-02
Oracle Span 9-10:  disable => disable-01
Oracle Span 11-12:  facilities => facility
Oracle Span 20-21:  fuel => fuel
Oracle Span 16-17:  further => further
Oracle Span 24-25:  next => next
Oracle Span 0-2:  North Korean => (country :name (name :op "Korea" :op "North"))
Oracle Span 6-7:  nuclear => nucleus
Oracle Span 2-3:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 21-22:  oil => oil
Oracle Span 25-26:  phase => phase
Oracle Span 7-8:  programs => program
Oracle Span 18-19:  tons => (mass-quantity :unit ton)

Incorrect span: 950000 => (date-entity :year 1995)
Incorrect span: North Korean => (thing :name (name :op "North" :op "Korean"))
Missing span: North Korean => (country :name (name :op "Korea" :op "North"))
Missing span: and => and
Missing span: 950000 => 950000
Missing span: declare => declare-02
Dependencies:
1	North	_	JJ	JJ	_	2	amod	_	_
2	Korean	_	JJ	JJ	_	3	amod	_	_
3	officials	_	NNS	NNS	_	5	nsubj	_	_
4	will	_	MD	MD	_	5	aux	_	_
5	declare	_	VB	VB	_	0	root	_	_
6	all	_	DT	DT	_	8	det	_	_
7	nuclear	_	JJ	JJ	_	8	amod	_	_
8	programs	_	NNS	NNS	_	5	dobj	_	_
9	and	_	CC	CC	_	5	cc	_	_
10	disable	_	VB	VB	_	5	conj	_	_
11	all	_	DT	DT	_	12	det	_	_
12	facilities	_	NNS	NNS	_	10	dobj	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	return	_	NN	NN	_	13	pobj	_	_
15	for	_	IN	IN	_	10	prep	_	_
16	a	_	DT	DT	_	19	det	_	_
17	further	_	JJ	JJ	_	19	amod	_	_
18	950000	_	CD	CD	_	19	num	_	_
19	tons	_	NNS	NNS	_	15	pobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	fuel	_	NN	NN	_	22	nn	_	_
22	oil	_	NN	NN	_	20	pobj	_	_
23	in	_	IN	IN	_	10	prep	_	_
24	the	_	DT	DT	_	26	det	_	_
25	next	_	JJ	JJ	_	26	amod	_	_
26	phase	_	NN	NN	_	23	pobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	Agreement	_	NN	NN	_	27	pobj	_	_
30	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, d / declare-02)
(a / and, op, d2 / disable-01)
(a / and, time, p2 / phase)
(a4 / agreement, part, p2 / phase)
(c / country, name, n / name)
(d / declare-02, ARG1, p / program)
(d2 / disable-01, ARG1, f / facility)
(f / facility, quant, a3 / all)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(m / mass-quantity, mod, f3 / further)
(m / mass-quantity, quant, 9 / 950000)
(m / mass-quantity, unit, t / ton)
(n / name, op, "Korea")
(n / name, op, "North")
(n2 / nucleus, quant, a2 / all)
(o2 / oil, mod, f2 / fuel)
(o2 / oil, quant, m / mass-quantity)
(p / program, mod, n2 / nucleus)
(p2 / phase, mod, n3 / next)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),Agreement,agreement,false), Span(25,26,List(1),phase,phase,false), Span(24,25,List(2),next,next,false), Span(21,22,List(3),oil,oil,false), Span(20,21,List(4),fuel,fuel,false), Span(18,19,List(6, 5),tons,(mass-quantity :unit ton),false), Span(17,18,List(8, 7),950000,(date-entity :year 1995),false), Span(16,17,List(9),further,further,false), Span(11,12,List(10),facilities,facility,false), Span(10,11,List(11),all,all,false), Span(9,10,List(12),disable,disable-01,false), Span(7,8,List(13),programs,program,false), Span(6,7,List(14),nuclear,nucleus,false), Span(5,6,List(15),all,all,false), Span(2,3,List(17, 16),officials,(have-org-role-91 :ARG2 official),false), Span(0,2,List(21, 20, 19, 18),North Korean,(thing :name (name :op "North" :op "Korean")),false)),Map(2 -> next, 5 -> mass-quantity, 12 -> disable-01, 15 -> all, 8 -> 1995, 21 -> "Korean", 18 -> thing, 7 -> date-entity, 17 -> official, 1 -> phase, 4 -> fuel, 11 -> all, 14 -> nucleus, 20 -> "North", 6 -> ton, 0 -> agreement, 9 -> further, 16 -> have-org-role-91, 19 -> name, 3 -> oil, 10 -> facility, 13 -> program),Map(n -> next, h -> have-org-role-91, t -> ton, p2 -> program, a3 -> all, m -> mass-quantity, d -> date-entity, 1 -> 1995, p -> phase, n3 -> name, a -> agreement, o2 -> official, d2 -> disable-01, f3 -> facility, t2 -> thing, a2 -> all, f2 -> further, f -> fuel, o -> oil, n2 -> nucleus))),[Ljava.lang.String;@5118388b,Annotation([Ljava.lang.String;@15a902e7,[Ljava.lang.String;@7876d598,[Ljava.lang.String;@4a3e3e8b),Annotation([Ljava.lang.String;@5af28b27,[Ljava.lang.String;@71104a4,[Ledu.cmu.lti.nlp.amr.Dependency;@4985cbcb),Annotation([Ljava.lang.String;@72f46e16,[Ljava.lang.String;@3c9168dc,[Ljava.lang.String;@332a7fce),Annotation([Ljava.lang.String;@549621f3,[Ljava.lang.String;@54361a9,[Ledu.cmu.lti.nlp.amr.Entity;@32232e55))
AMR:
(a / agreement, part, p / phase)
(d / date-entity, year, 1 / 1995)
(d2 / disable-01, ARG0, h / have-org-role-91)
(d2 / disable-01, ARG1, f3 / facility)
(d2 / disable-01, ARG2, p / phase)
(d2 / disable-01, ARG3, p2 / program)
(f3 / facility, mod, a2 / all)
(h / have-org-role-91, ARG1, t2 / thing)
(h / have-org-role-91, ARG2, o2 / official)
(m / mass-quantity, time, d / date-entity)
(m / mass-quantity, unit, t / ton)
(n3 / name, op, "Korean")
(n3 / name, op, "North")
(o / oil, mod, f / fuel)
(o / oil, quant, m / mass-quantity)
(p / phase, mod, n / next)
(p / phase, mod, o / oil)
(p2 / program, mod, a3 / all)
(p2 / program, mod, n2 / nucleus)
(t / ton, mod, f2 / further)
(t2 / thing, name, n3 / name)

Decoded in 1,398,915 microseconds
Sentence: Hill stated the technical possibility of concluding the next phase of the agreement by December 2007.

NER Entity: (person :name (name :op "Hill"))
Spans:
Span 12-13:  agreement => agree-01
Span 14-16:  December 2007 => (date-entity :month 12 :year 2007)
Span 8-9:  next => next
Span 9-10:  phase => phase
Span 4-5:  possibility => possible
Span 3-4:  technical => technical

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  agreement => agreement
Oracle Span 13-14:  by => by
Oracle Span 6-7:  concluding => conclude-02
Oracle Span 14-16:  December 2007 => (date-entity :year 2007 :month 12)
Oracle Span 0-1:  Hill => (person :name (name :op "Hill"))
Oracle Span 8-9:  next => next
Oracle Span 9-10:  phase => phase
Oracle Span 4-5:  possibility => possible
Oracle Span 1-2:  stated => state-01
Oracle Span 3-4:  technical => technical

Incorrect span: December 2007 => (date-entity :month 12 :year 2007)
Incorrect span: agreement => agree-01
Missing span: Hill => (person :name (name :op "Hill"))
Missing span: December 2007 => (date-entity :year 2007 :month 12)
Missing span: stated => state-01
Missing span: concluding => conclude-02
Missing span: by => by
Missing span: agreement => agreement
Dependencies:
1	Hill	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	5	det	_	_
4	technical	_	JJ	JJ	_	5	amod	_	_
5	possibility	_	NN	NN	_	2	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	concluding	_	VBG	VBG	_	6	pcomp	_	_
8	the	_	DT	DT	_	10	det	_	_
9	next	_	JJ	JJ	_	10	amod	_	_
10	phase	_	NN	NN	_	7	dobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	agreement	_	NN	NN	_	11	pobj	_	_
14	by	_	IN	IN	_	7	prep	_	_
15	December	_	NNP	NNP	_	14	pobj	_	_
16	2007	_	CD	CD	_	15	num	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(a / agreement, part, p3 / phase)
(b / by, op, d / date-entity)
(c / conclude-02, ARG1, p3 / phase)
(c / conclude-02, time, b / by)
(d / date-entity, month, 12)
(d / date-entity, year, 2007)
(n / name, op, "Hill")
(p / person, name, n / name)
(p2 / possible, domain, c / conclude-02)
(p2 / possible, mod, t / technical)
(p3 / phase, mod, n2 / next)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, p2 / possible)

Input(Some(Graph(null,ArrayBuffer(Span(14,16,List(2, 1, 0),December 2007,(date-entity :month 12 :year 2007),false), Span(12,13,List(3),agreement,agree-01,false), Span(9,10,List(4),phase,phase,false), Span(8,9,List(5),next,next,false), Span(4,5,List(6),possibility,possible,false), Span(3,4,List(7),technical,technical,false)),Map(2 -> 2007, 5 -> next, 7 -> technical, 1 -> 12, 4 -> phase, 6 -> possible, 0 -> date-entity, 3 -> agree-01),Map(n -> next, 2 -> 2007, t -> technical, p2 -> possible, d -> date-entity, p -> phase, 1 -> 12, a -> agree-01))),[Ljava.lang.String;@5217f3d0,Annotation([Ljava.lang.String;@37ebc9d8,[Ljava.lang.String;@293bb8a5,[Ljava.lang.String;@2416a51),Annotation([Ljava.lang.String;@6fa590ba,[Ljava.lang.String;@6e9319f,[Ledu.cmu.lti.nlp.amr.Dependency;@72e34f77),Annotation([Ljava.lang.String;@7bf9b098,[Ljava.lang.String;@389adf1d,[Ljava.lang.String;@77307458),Annotation([Ljava.lang.String;@1fc0053e,[Ljava.lang.String;@290b1b2e,[Ledu.cmu.lti.nlp.amr.Entity;@47874b25))
AMR:
(a / agree-01, ARG0, p2 / possible)
(a / agree-01, part, p / phase)
(a / agree-01, time, d / date-entity)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 2 / 2007)
(p / phase, mod, n / next)
(p2 / possible, mod, t / technical)

Decoded in 59,740 microseconds
Sentence: 2007-08-27

mkDayMonthYear(2007-08-27,27,08,2007)
mkDayMonthYear(2007-08-27,27,08,2007)
Spans:
Span 0-1:  2007-08-27 => (date-entity :day 27 :month 8 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2007-08-27 => (date-entity :day 27 :month 8 :year 2007)

Dependencies:
1	2007-08-27	_	NNP	NNP	_	0	root	_	_

Oracle:
(d2 / date-entity, day, 27)
(d2 / date-entity, month, 8)
(d2 / date-entity, year, 2007)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-08-27,(date-entity :day 27 :month 8 :year 2007),false)),Map(2 -> 8, 1 -> 27, 0 -> date-entity, 3 -> 2007),Map(2 -> 27, 8 -> 8, d -> date-entity, 22 -> 2007))),[Ljava.lang.String;@33617539,Annotation([Ljava.lang.String;@2c177f9e,[Ljava.lang.String;@5db4c359,[Ljava.lang.String;@209775a9),Annotation([Ljava.lang.String;@18e7143f,[Ljava.lang.String;@f9b7332,[Ledu.cmu.lti.nlp.amr.Dependency;@74cec793),Annotation([Ljava.lang.String;@6fefce9e,[Ljava.lang.String;@4f8969b0,[Ljava.lang.String;@1bdf8190),Annotation([Ljava.lang.String;@192f2f27,[Ljava.lang.String;@8a589a2,[Ledu.cmu.lti.nlp.amr.Entity;@c65a5ef))
AMR:
(d / date-entity, day, 2 / 27)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2007)

Decoded in 8,629 microseconds
Sentence: Iran, Islamic Republic of (IR)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic"))
NER Entity: (organization :name (name :op "IR"))
Spans:
Span 2-4:  Islamic Republic => (country :name (name :op "Islamic" :op "Republic"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
WARNING ADDING ANOTHER SPAN TO NODE 0.0.1
ArrayBuffer(0) + 1
WARNING ADDING ANOTHER SPAN TO NODE 0.0.2
ArrayBuffer(0) + 2
WARNING ADDING ANOTHER SPAN TO NODE 0.0.3
ArrayBuffer(0) + 3
Oracle Span 0-1:  Iran => "Iran"
Oracle Span 0-5:  Iran , Islamic Republic of => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))
Oracle Span 4-5:  of => "of"
Oracle Span 3-4:  Republic => "Republic"

Extra span: Islamic Republic => (country :name (name :op "Islamic" :op "Republic"))
Missing span: Iran , Islamic Republic of => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))
Missing span: Republic => "Republic"
Missing span: of => "of"
Missing span: Iran => "Iran"
Dependencies:
1	Iran	_	NNP	NNP	_	3	nn	_	_
2	,	_	,	,	_	3	punct	_	_
3	Islamic	_	NNP	NNP	_	0	root	_	_
4	Republic	_	NNP	NNP	_	3	dep	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	(	_	(	(	_	7	punct	_	_
7	IR	_	NNP	NNP	_	4	appos	_	_
8	)	_	)	)	_	7	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Islamic")
(n / name, op, I / "Iran")
(n / name, op, R / "Republic")
(n / name, op, o / "of")

Input(Some(Graph(null,ArrayBuffer(Span(2,4,List(3, 2, 1, 0),Islamic Republic,(country :name (name :op "Islamic" :op "Republic")),false)),Map(2 -> "Islamic", 1 -> name, 0 -> country, 3 -> "Republic"),Map(n -> name, c -> country))),[Ljava.lang.String;@6b5176f2,Annotation([Ljava.lang.String;@b672aa8,[Ljava.lang.String;@2fab4aff,[Ljava.lang.String;@ec0c838),Annotation([Ljava.lang.String;@6e46d9f4,[Ljava.lang.String;@5cc69cfe,[Ledu.cmu.lti.nlp.amr.Dependency;@29cfd92b),Annotation([Ljava.lang.String;@21c64522,[Ljava.lang.String;@7997b197,[Ljava.lang.String;@11dee337),Annotation([Ljava.lang.String;@460f76a6,[Ljava.lang.String;@55f3c410,[Ledu.cmu.lti.nlp.amr.Entity;@11acdc30))
AMR:
(c / country, name, n / name)
(n / name, op, "Islamic")
(n / name, op, "Republic")

Decoded in 12,745 microseconds
Sentence: International; weapons; proliferation; Government; energy

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 8-9:  energy => energy

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 8-9:  energy => energy
Oracle Span 6-7:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 4-5:  proliferation => proliferate-01
Oracle Span 2-3:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: weapons => weapon
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Missing span: proliferation => proliferate-01
Dependencies:
1	International	_	NNP	NNP	_	7	nn	_	_
2	;	_	:	:	_	3	punct	_	_
3	weapons	_	NNS	NNS	_	7	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	proliferation	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	3	punct	_	_
7	Government	_	NNP	NNP	_	0	root	_	_
8	;	_	:	:	_	7	punct	_	_
9	energy	_	NN	NN	_	7	dep	_	_

Oracle:
(a / and, op, e / energy)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, p / proliferate-01)
(a / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),energy,energy,false), Span(7,8,List(1),;,and,false), Span(5,6,List(2),;,and,false), Span(3,4,List(3),;,and,false), Span(1,2,List(4),;,and,false)),Map(2 -> and, 1 -> and, 4 -> and, 0 -> energy, 3 -> and),Map(e -> energy, a3 -> and, a -> and, a2 -> and, a4 -> and))),[Ljava.lang.String;@770d4269,Annotation([Ljava.lang.String;@4a8ab068,[Ljava.lang.String;@1922e6d,[Ljava.lang.String;@76a82f33),Annotation([Ljava.lang.String;@6bab2585,[Ljava.lang.String;@74bdc168,[Ledu.cmu.lti.nlp.amr.Dependency;@644c78d4),Annotation([Ljava.lang.String;@532a02d9,[Ljava.lang.String;@611f8234,[Ljava.lang.String;@7bb3a9fe),Annotation([Ljava.lang.String;@7cbee484,[Ljava.lang.String;@7f811d00,[Ledu.cmu.lti.nlp.amr.Entity;@62923ee6))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, e / energy)
(a3 / and, op, a2 / and)
(a4 / and, op, a3 / and)

Decoded in 22,920 microseconds
Sentence: Leading arms control experts criticize a new nuclear activities plan released by Iran and the U.N.'s International Atomic Energy Agency as ineffectual and dangerous.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 8-9:  activities => activity
Span 18-22:  Atomic Energy Agency as => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 2-3:  control => control-01
Span 6-7:  new => new
Span 7-8:  nuclear => nucleus
Span 10-11:  released => release-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 8-9:  activities => activity
Oracle Span 13-14:  and => and
Oracle Span 23-24:  and => and
Oracle Span 1-2:  arms => arm
Oracle Span 2-3:  control => control-01
Oracle Span 4-5:  criticize => criticize-01
Oracle Span 24-25:  dangerous => dangerous
Oracle Span 3-4:  experts => (person :ARG1-of expert-41)
Oracle Span 22-23:  ineffectual => (effectual :polarity -)
Oracle Span 17-21:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 12-13:  Iran => (country :name (name :op "Iran"))
Oracle Span 0-1:  Leading => lead-01
Oracle Span 6-7:  new => new
Oracle Span 7-8:  nuclear => nucleus
Oracle Span 9-10:  plan => plan-01
Oracle Span 10-11:  released => release-01
Oracle Span 15-16:  U.N. => (organization :name (name :op "U.N."))

Extra span: Atomic Energy Agency as => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: U.N. => (organization :name (name :op "U.N."))
Missing span: criticize => criticize-01
Missing span: and => and
Missing span: dangerous => dangerous
Missing span: ineffectual => (effectual :polarity -)
Missing span: plan => plan-01
Missing span: and => and
Missing span: experts => (person :ARG1-of expert-41)
Missing span: arms => arm
Missing span: Leading => lead-01
Dependencies:
1	Leading	_	VBG	VBG	_	2	amod	_	_
2	arms	_	NNS	NNS	_	3	nsubj	_	_
3	control	_	VBP	VBP	_	0	root	_	_
4	experts	_	NNS	NNS	_	5	nsubj	_	_
5	criticize	_	VBP	VBP	_	3	ccomp	_	_
6	a	_	DT	DT	_	10	det	_	_
7	new	_	JJ	JJ	_	10	amod	_	_
8	nuclear	_	JJ	JJ	_	10	amod	_	_
9	activities	_	NNS	NNS	_	10	nn	_	_
10	plan	_	NN	NN	_	5	dobj	_	_
11	released	_	VBN	VBN	_	10	vmod	_	_
12	by	_	IN	IN	_	11	prep	_	_
13	Iran	_	NNP	NNP	_	12	pobj	_	_
14	and	_	CC	CC	_	10	cc	_	_
15	the	_	DT	DT	_	16	det	_	_
16	U.N.	_	NNP	NNP	_	21	poss	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	International	_	NNP	NNP	_	21	nn	_	_
19	Atomic	_	NNP	NNP	_	21	nn	_	_
20	Energy	_	NNP	NNP	_	21	nn	_	_
21	Agency	_	NNP	NNP	_	10	conj	_	_
22	as	_	IN	IN	_	21	prep	_	_
23	ineffectual	_	JJ	JJ	_	22	pobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	dangerous	_	JJ	JJ	_	23	conj	_	_
26	.	_	.	.	_	3	punct	_	_

Oracle:
(a2 / activity, mod, n / nucleus)
(a3 / and, op, c3 / country)
(a3 / and, op, o / organization)
(a4 / and, op, d / dangerous)
(a4 / and, op, e2 / effectual)
(c / criticize-01, ARG0, p2 / person)
(c / criticize-01, ARG1, p / plan-01)
(c / criticize-01, ARG2, a4 / and)
(c2 / control-01, ARG1, a / arm)
(c3 / country, name, n3 / name)
(e2 / effectual, polarity, -)
(e3 / expert-41, ARG1, p2 / person)
(e3 / expert-41, ARG2, c2 / control-01)
(l / lead-01, ARG0, p2 / person)
(n3 / name, op, "Iran")
(n4 / name, op, "Agency")
(n4 / name, op, "Atomic")
(n4 / name, op, "Energy")
(n4 / name, op, "International")
(n5 / name, op, "U.N.")
(o / organization, name, n4 / name)
(o2 / organization, name, n5 / name)
(o2 / organization, part, o / organization)
(p / plan-01, ARG1, a2 / activity)
(p / plan-01, mod, n2 / new)
(r / release-01, ARG0, a3 / and)
(r / release-01, ARG1, p / plan-01)

Input(Some(Graph(null,ArrayBuffer(Span(18,22,List(5, 4, 3, 2, 1, 0),Atomic Energy Agency as,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(10,11,List(6),released,release-01,false), Span(8,9,List(7),activities,activity,false), Span(7,8,List(8),nuclear,nucleus,false), Span(6,7,List(9),new,new,false), Span(2,3,List(10),control,control-01,false)),Map(2 -> "International", 5 -> "Agency", 8 -> nucleus, 7 -> activity, 1 -> name, 4 -> "Energy", 6 -> release-01, 9 -> new, 0 -> organization, 10 -> control-01, 3 -> "Atomic"),Map(n -> name, n3 -> new, a -> activity, r -> release-01, c -> control-01, o -> organization, n2 -> nucleus))),[Ljava.lang.String;@4089713,Annotation([Ljava.lang.String;@f19c9d2,[Ljava.lang.String;@7807ac2c,[Ljava.lang.String;@b91d8c4),Annotation([Ljava.lang.String;@4b6166aa,[Ljava.lang.String;@a77614d,[Ledu.cmu.lti.nlp.amr.Dependency;@4fd4cae3),Annotation([Ljava.lang.String;@4a067c25,[Ljava.lang.String;@a1217f9,[Ljava.lang.String;@3bde62ff),Annotation([Ljava.lang.String;@523424b5,[Ljava.lang.String;@2baa8d82,[Ledu.cmu.lti.nlp.amr.Entity;@319dead1))
AMR:
(a / activity, mod, n2 / nucleus)
(c / control-01, ARG0, o / organization)
(c / control-01, ARG1, a / activity)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, mod, n3 / new)
(o / organization, name, n / name)
(r / release-01, ARG1, o / organization)

Decoded in 151,660 microseconds
Sentence: On 27 August 2007 Iran and the U.N.'s International Atomic Energy Agency released a plan for resolving issues by December 2007.

mkDayMonthYear(27	August	2007,27,August,2007)
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 1-4:  27 August 2007 => (date-entity :day 27 :month 8 :year 2007)
Span 10-14:  Atomic Energy Agency released => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 20-22:  December 2007 => (date-entity :month 12 :year 2007)
Span 18-19:  issues => issue
Span 17-18:  resolving => resolve-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-4:  27 August 2007 => (date-entity :year 2007 :month 8 :day 27)
Oracle Span 5-6:  and => and
Oracle Span 19-20:  by => by
Oracle Span 20-22:  December 2007 => (date-entity :year 2007 :month 12)
Oracle Span 9-13:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 4-5:  Iran => (country :name (name :op "Iran"))
Oracle Span 18-19:  issues => issue
Oracle Span 15-16:  plan => plan-01
Oracle Span 13-14:  released => release-01
Oracle Span 17-18:  resolving => resolve-01
Oracle Span 7-8:  U.N. => (organization :name (name :op "U.N."))

Incorrect span: December 2007 => (date-entity :month 12 :year 2007)
Extra span: Atomic Energy Agency released => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Incorrect span: 27 August 2007 => (date-entity :day 27 :month 8 :year 2007)
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: U.N. => (organization :name (name :op "U.N."))
Missing span: December 2007 => (date-entity :year 2007 :month 12)
Missing span: 27 August 2007 => (date-entity :year 2007 :month 8 :day 27)
Missing span: released => release-01
Missing span: plan => plan-01
Missing span: by => by
Missing span: and => and
Dependencies:
1	On	_	IN	IN	_	14	prep	_	_
2	27	_	CD	CD	_	1	pobj	_	_
3	August	_	NNP	NNP	_	14	tmod	_	_
4	2007	_	CD	CD	_	3	num	_	_
5	Iran	_	NNP	NNP	_	14	nsubj	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	the	_	DT	DT	_	8	det	_	_
8	U.N.	_	NNP	NNP	_	13	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	International	_	NNP	NNP	_	13	nn	_	_
11	Atomic	_	NNP	NNP	_	13	nn	_	_
12	Energy	_	NNP	NNP	_	13	nn	_	_
13	Agency	_	NNP	NNP	_	5	conj	_	_
14	released	_	VBD	VBD	_	0	root	_	_
15	a	_	DT	DT	_	16	det	_	_
16	plan	_	NN	NN	_	14	dobj	_	_
17	for	_	IN	IN	_	14	prep	_	_
18	resolving	_	VBG	VBG	_	17	pcomp	_	_
19	issues	_	NNS	NNS	_	18	dobj	_	_
20	by	_	IN	IN	_	18	prep	_	_
21	December	_	NNP	NNP	_	20	pobj	_	_
22	2007	_	CD	CD	_	21	num	_	_
23	.	_	.	.	_	14	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, o / organization)
(b / by, op, d2 / date-entity)
(c / country, name, n / name)
(d / date-entity, day, 27)
(d / date-entity, month, 8)
(d / date-entity, year, 2007)
(d2 / date-entity, month, 12)
(d2 / date-entity, year, 2007)
(n / name, op, "Iran")
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(n3 / name, op, "U.N.")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(o2 / organization, part, o / organization)
(p / plan-01, ARG0, a / and)
(p / plan-01, ARG1, r2 / resolve-01)
(r / release-01, ARG0, a / and)
(r / release-01, ARG1, p / plan-01)
(r / release-01, time, d / date-entity)
(r2 / resolve-01, ARG0, a / and)
(r2 / resolve-01, ARG1, i / issue)
(r2 / resolve-01, time, b / by)

Input(Some(Graph(null,ArrayBuffer(Span(20,22,List(2, 1, 0),December 2007,(date-entity :month 12 :year 2007),false), Span(18,19,List(3),issues,issue,false), Span(17,18,List(4),resolving,resolve-01,false), Span(10,14,List(10, 9, 8, 7, 6, 5),Atomic Energy Agency released,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(1,4,List(14, 13, 12, 11),27 August 2007,(date-entity :day 27 :month 8 :year 2007),false)),Map(2 -> 2007, 5 -> organization, 12 -> 27, 8 -> "Atomic", 7 -> "International", 1 -> 12, 4 -> resolve-01, 11 -> date-entity, 14 -> 2007, 6 -> name, 0 -> date-entity, 9 -> "Energy", 3 -> issue, 10 -> "Agency", 13 -> 8),Map(n -> name, 2 -> 2007, 8 -> 8, d -> date-entity, 23 -> 2007, 1 -> 12, d2 -> date-entity, r -> resolve-01, i -> issue, 22 -> 27, o -> organization))),[Ljava.lang.String;@791cbf87,Annotation([Ljava.lang.String;@a7e2d9d,[Ljava.lang.String;@754777cd,[Ljava.lang.String;@2b52c0d6),Annotation([Ljava.lang.String;@372ea2bc,[Ljava.lang.String;@4cc76301,[Ledu.cmu.lti.nlp.amr.Dependency;@2f08c4b),Annotation([Ljava.lang.String;@3f19b8b3,[Ljava.lang.String;@7de0c6ae,[Ljava.lang.String;@a486d78),Annotation([Ljava.lang.String;@cdc3aae,[Ljava.lang.String;@7ef2d7a6,[Ledu.cmu.lti.nlp.amr.Entity;@5dcbb60))
AMR:
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 2 / 2007)
(d2 / date-entity, day, 22 / 27)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 23 / 2007)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(o / organization, purpose, r / resolve-01)
(o / organization, time, d2 / date-entity)
(r / resolve-01, ARG1, i / issue)
(r / resolve-01, time, d / date-entity)

Decoded in 110,577 microseconds
Sentence: The issues have been unresolved for 4 years.

Spans:
Span 1-2:  issues => issue
Span 4-5:  unresolved => (resolve-01 :polarity -)
Span 7-8:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  4 => 4
Oracle Span 1-2:  issues => issue
Oracle Span 4-5:  unresolved => (resolve-01 :polarity -)
Oracle Span 7-8:  years => (temporal-quantity :unit year)

Missing span: 4 => 4
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	issues	_	NNS	NNS	_	5	nsubj	_	_
3	have	_	VBP	VBP	_	5	aux	_	_
4	been	_	VBN	VBN	_	5	cop	_	_
5	unresolved	_	JJ	JJ	_	0	root	_	_
6	for	_	IN	IN	_	5	prep	_	_
7	4	_	CD	CD	_	8	num	_	_
8	years	_	NNS	NNS	_	6	pobj	_	_
9	.	_	.	.	_	5	punct	_	_

Oracle:
(r / resolve-01, ARG1, i / issue)
(r / resolve-01, duration, t / temporal-quantity)
(r / resolve-01, polarity, -)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(1, 0),years,(temporal-quantity :unit year),false), Span(4,5,List(3, 2),unresolved,(resolve-01 :polarity -),false), Span(1,2,List(4),issues,issue,false)),Map(2 -> resolve-01, 1 -> year, 4 -> issue, 0 -> temporal-quantity, 3 -> -),Map(t -> temporal-quantity, y -> year, i -> issue, r -> resolve-01))),[Ljava.lang.String;@4c36250e,Annotation([Ljava.lang.String;@21526f6c,[Ljava.lang.String;@49f5c307,[Ljava.lang.String;@299266e2),Annotation([Ljava.lang.String;@5471388b,[Ljava.lang.String;@66ea1466,[Ledu.cmu.lti.nlp.amr.Dependency;@1601e47),Annotation([Ljava.lang.String;@3bffddff,[Ljava.lang.String;@66971f6b,[Ljava.lang.String;@50687efb),Annotation([Ljava.lang.String;@517bd097,[Ljava.lang.String;@142eef62,[Ledu.cmu.lti.nlp.amr.Entity;@4a9cc6cb))
AMR:
(r / resolve-01, ARG1, i / issue)
(r / resolve-01, duration, t / temporal-quantity)
(r / resolve-01, polarity, -)
(t / temporal-quantity, unit, y / year)

Decoded in 19,035 microseconds
Sentence: The plan is meant to allay suspicions about Iran's past nuclear activities.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 12-13:  activities => activity
Span 5-6:  allay => allay-01
Span 3-4:  meant => mean-01
Span 11-12:  nuclear => nucleus
Span 10-11:  past => past
Span 6-7:  suspicions => suspect-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  activities => activity
Oracle Span 5-6:  allay => allay-01
Oracle Span 8-9:  Iran => (country :name (name :op "Iran"))
Oracle Span 3-4:  meant => mean-01
Oracle Span 11-12:  nuclear => nucleus
Oracle Span 10-11:  past => past
Oracle Span 1-2:  plan => plan
Oracle Span 6-7:  suspicions => suspect-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: plan => plan
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	plan	_	NN	NN	_	4	nsubjpass	_	_
3	is	_	VBZ	VBZ	_	4	auxpass	_	_
4	meant	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	allay	_	VB	VB	_	4	xcomp	_	_
7	suspicions	_	NNS	NNS	_	6	dobj	_	_
8	about	_	IN	IN	_	6	prep	_	_
9	Iran	_	NNP	NNP	_	13	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	past	_	JJ	JJ	_	13	amod	_	_
12	nuclear	_	JJ	JJ	_	13	amod	_	_
13	activities	_	NNS	NNS	_	8	pobj	_	_
14	.	_	.	.	_	4	punct	_	_

Oracle:
(a / allay-01, ARG0, p / plan)
(a / allay-01, ARG1, s / suspect-01)
(a2 / activity, mod, n / nucleus)
(a2 / activity, poss, c / country)
(a2 / activity, time, p2 / past)
(c / country, name, n2 / name)
(m / mean-01, ARG0, p / plan)
(m / mean-01, ARG1, a / allay-01)
(n2 / name, op, "Iran")
(s / suspect-01, ARG1, a2 / activity)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),activities,activity,false), Span(11,12,List(1),nuclear,nucleus,false), Span(10,11,List(2),past,past,false), Span(6,7,List(3),suspicions,suspect-01,false), Span(5,6,List(4),allay,allay-01,false), Span(3,4,List(5),meant,mean-01,false)),Map(2 -> past, 5 -> mean-01, 1 -> nucleus, 4 -> allay-01, 0 -> activity, 3 -> suspect-01),Map(n -> nucleus, s -> suspect-01, m -> mean-01, p -> past, a -> activity, a2 -> allay-01))),[Ljava.lang.String;@5990e6c5,Annotation([Ljava.lang.String;@56e07a08,[Ljava.lang.String;@35d6ca49,[Ljava.lang.String;@1950e8a6),Annotation([Ljava.lang.String;@47289387,[Ljava.lang.String;@12cd9150,[Ledu.cmu.lti.nlp.amr.Dependency;@114a85c2),Annotation([Ljava.lang.String;@f415a95,[Ljava.lang.String;@cf65451,[Ljava.lang.String;@724f138e),Annotation([Ljava.lang.String;@37eeec90,[Ljava.lang.String;@32fe9d0a,[Ledu.cmu.lti.nlp.amr.Entity;@c9413d8))
AMR:
(a / activity, mod, n / nucleus)
(a / activity, mod, p / past)
(a2 / allay-01, ARG1, s / suspect-01)
(m / mean-01, ARG1, a2 / allay-01)
(s / suspect-01, ARG1, a / activity)

Decoded in 37,647 microseconds
Sentence: Agency officials stated that the plan is a breakthrough.

Spans:
Span 8-9:  breakthrough => breakthrough-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Agency => agency
Oracle Span 8-9:  breakthrough => breakthrough-01
Oracle Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 5-6:  plan => plan
Oracle Span 2-3:  stated => state-01

Missing span: stated => state-01
Missing span: plan => plan
Missing span: Agency => agency
Dependencies:
1	Agency	_	NNP	NNP	_	2	nn	_	_
2	officials	_	NNS	NNS	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	9	mark	_	_
5	the	_	DT	DT	_	6	det	_	_
6	plan	_	NN	NN	_	9	nsubj	_	_
7	is	_	VBZ	VBZ	_	9	cop	_	_
8	a	_	DT	DT	_	9	det	_	_
9	breakthrough	_	NN	NN	_	3	ccomp	_	_
10	.	_	.	.	_	3	punct	_	_

Oracle:
(b / breakthrough-01, ARG0, p / plan)
(h / have-org-role-91, ARG1, a / agency)
(h / have-org-role-91, ARG2, o / official)
(s / state-01, ARG1, b / breakthrough-01)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),breakthrough,breakthrough-01,false), Span(1,2,List(2, 1),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> official, 1 -> have-org-role-91, 0 -> breakthrough-01),Map(h -> have-org-role-91, b -> breakthrough-01, o -> official))),[Ljava.lang.String;@64da2a7,Annotation([Ljava.lang.String;@46074492,[Ljava.lang.String;@d78795,[Ljava.lang.String;@2c715e84),Annotation([Ljava.lang.String;@47428937,[Ljava.lang.String;@3b9d6699,[Ledu.cmu.lti.nlp.amr.Dependency;@7caa550),Annotation([Ljava.lang.String;@21694e53,[Ljava.lang.String;@72b16078,[Ljava.lang.String;@22c86919),Annotation([Ljava.lang.String;@70fab835,[Ljava.lang.String;@1b0a7baf,[Ledu.cmu.lti.nlp.amr.Entity;@62417a16))
AMR:
(b / breakthrough-01, ARG1, h / have-org-role-91)
(h / have-org-role-91, ARG2, o / official)

Decoded in 18,295 microseconds
Sentence: On 28 August 2007 at a news conference in Tehran Iranian President Mahmoud ahmadinejad stated that --

mkDayMonthYear(28	August	2007,28,August,2007)
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (person :name (name :op "Mahmoud" :op "ahmadinejad"))
NER Entity: (country :name (name :op "Tehran"))
Spans:
Span 1-4:  28 August 2007 => (date-entity :day 28 :month 8 :year 2007)
Span 7-8:  conference => conference
Span 12-14:  Mahmoud ahmadinejad => (person :name (name :op "Mahmoud" :op "ahmadinejad"))
Span 6-7:  news => news
Span 11-12:  President => (have-org-role-91 :ARG2 president)
Span 9-10:  Tehran => (city :name (name :op "Tehran"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-4:  28 August 2007 => (date-entity :year 2007 :month 8 :day 28)
Oracle Span 7-8:  conference => conference
Oracle Span 10-11:  Iranian => (country :name (name :op "Iran"))
Oracle Span 12-14:  Mahmoud ahmadinejad => (person :name (name :op "Ahmadinejad" :op "Mahmoud"))
Oracle Span 6-7:  news => news
Oracle Span 11-12:  President => (have-org-role-91 :ARG2 president)
Oracle Span 14-15:  stated => state-01
Oracle Span 9-10:  Tehran => (city :name (name :op "Tehran"))

Incorrect span: Mahmoud ahmadinejad => (person :name (name :op "Mahmoud" :op "ahmadinejad"))
Incorrect span: 28 August 2007 => (date-entity :day 28 :month 8 :year 2007)
Missing span: Mahmoud ahmadinejad => (person :name (name :op "Ahmadinejad" :op "Mahmoud"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: 28 August 2007 => (date-entity :year 2007 :month 8 :day 28)
Missing span: stated => state-01
Dependencies:
1	On	_	IN	IN	_	15	prep	_	_
2	28	_	CD	CD	_	1	pobj	_	_
3	August	_	NNP	NNP	_	2	tmod	_	_
4	2007	_	CD	CD	_	3	num	_	_
5	at	_	IN	IN	_	2	prep	_	_
6	a	_	DT	DT	_	8	det	_	_
7	news	_	NN	NN	_	8	nn	_	_
8	conference	_	NN	NN	_	5	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	Tehran	_	NNP	NNP	_	11	nn	_	_
11	Iranian	_	NNP	NNP	_	9	pobj	_	_
12	President	_	NNP	NNP	_	13	nn	_	_
13	Mahmoud	_	NNP	NNP	_	15	nsubj	_	_
14	ahmadinejad	_	RB	RB	_	15	advmod	_	_
15	stated	_	VBD	VBD	_	0	root	_	_
16	that	_	DT	DT	_	15	dobj	_	_
17	--	_	:	:	_	15	punct	_	_

Oracle:
(c / conference, location, c2 / city)
(c / conference, mod, n / news)
(c2 / city, name, n2 / name)
(c3 / country, name, n4 / name)
(d / date-entity, day, 28)
(d / date-entity, month, 8)
(d / date-entity, year, 2007)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, p2 / president)
(n2 / name, op, "Tehran")
(n3 / name, op, "Ahmadinejad")
(n3 / name, op, "Mahmoud")
(n4 / name, op, "Iran")
(p / person, name, n3 / name)
(s / state-01, ARG0, p / person)
(s / state-01, time, c / conference)
(s / state-01, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(12,14,List(3, 2, 1, 0),Mahmoud ahmadinejad,(person :name (name :op "Mahmoud" :op "ahmadinejad")),false), Span(11,12,List(5, 4),President,(have-org-role-91 :ARG2 president),false), Span(9,10,List(8, 7, 6),Tehran,(city :name (name :op "Tehran")),false), Span(7,8,List(9),conference,conference,false), Span(6,7,List(10),news,news,false), Span(1,4,List(14, 13, 12, 11),28 August 2007,(date-entity :day 28 :month 8 :year 2007),false)),Map(2 -> "Mahmoud", 5 -> president, 12 -> 28, 8 -> "Tehran", 7 -> name, 1 -> name, 4 -> have-org-role-91, 11 -> date-entity, 14 -> 2007, 6 -> city, 0 -> person, 9 -> conference, 3 -> "ahmadinejad", 10 -> news, 13 -> 8),Map(n -> name, 2 -> 28, h -> have-org-role-91, 8 -> 8, p2 -> president, d -> date-entity, p -> person, n3 -> news, c -> city, 22 -> 2007, c2 -> conference, n2 -> name))),[Ljava.lang.String;@32057e6,Annotation([Ljava.lang.String;@26be6ca7,[Ljava.lang.String;@6ea1bcdc,[Ljava.lang.String;@759fad4),Annotation([Ljava.lang.String;@64712be,[Ljava.lang.String;@53499d85,[Ledu.cmu.lti.nlp.amr.Dependency;@30ed9c6c),Annotation([Ljava.lang.String;@782a4fff,[Ljava.lang.String;@46c670a6,[Ljava.lang.String;@59fc684e),Annotation([Ljava.lang.String;@5ae81e1,[Ljava.lang.String;@2fd1731c,[Ledu.cmu.lti.nlp.amr.Entity;@5ae76500))
AMR:
(c / city, name, n2 / name)
(c2 / conference, location, c / city)
(c2 / conference, mod, n3 / news)
(c2 / conference, time, d / date-entity)
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2007)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / city)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Mahmoud")
(n / name, op, "ahmadinejad")
(n2 / name, op, "Tehran")
(p / person, name, n / name)

Decoded in 94,229 microseconds
Sentence: investigation into Iran's nuclear activities is now closed.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 5-6:  activities => activity
Span 8-9:  closed => close-01
Span 0-1:  investigation => investigate-01
Span 7-8:  now => now
Span 4-5:  nuclear => nucleus

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 5-6:  activities => activity
Oracle Span 8-9:  closed => close-01
Oracle Span 0-1:  investigation => investigate-01
Oracle Span 2-3:  Iran => (country :name (name :op "Iran"))
Oracle Span 7-8:  now => now
Oracle Span 4-5:  nuclear => nucleus

Missing span: Iran => (country :name (name :op "Iran"))
Dependencies:
1	investigation	_	NN	NN	_	9	nsubj	_	_
2	into	_	IN	IN	_	1	prep	_	_
3	Iran	_	NNP	NNP	_	6	poss	_	_
4	's	_	POS	POS	_	3	possessive	_	_
5	nuclear	_	JJ	JJ	_	6	amod	_	_
6	activities	_	NNS	NNS	_	2	pobj	_	_
7	is	_	VBZ	VBZ	_	9	cop	_	_
8	now	_	RB	RB	_	9	advmod	_	_
9	closed	_	JJ	JJ	_	0	root	_	_
10	.	_	.	.	_	9	punct	_	_

Oracle:
(a / activity, mod, n2 / nucleus)
(a / activity, poss, c2 / country)
(c / close-01, ARG1, i / investigate-01)
(c / close-01, time, n / now)
(c2 / country, name, n3 / name)
(i / investigate-01, ARG1, a / activity)
(n3 / name, op, "Iran")

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),closed,close-01,false), Span(7,8,List(1),now,now,false), Span(5,6,List(2),activities,activity,false), Span(4,5,List(3),nuclear,nucleus,false), Span(0,1,List(4),investigation,investigate-01,false)),Map(2 -> activity, 1 -> now, 4 -> investigate-01, 0 -> close-01, 3 -> nucleus),Map(n -> now, a -> activity, i -> investigate-01, c -> close-01, n2 -> nucleus))),[Ljava.lang.String;@6063d80a,Annotation([Ljava.lang.String;@1133ec6e,[Ljava.lang.String;@355e34c7,[Ljava.lang.String;@54709809),Annotation([Ljava.lang.String;@2a2da905,[Ljava.lang.String;@24f360b2,[Ledu.cmu.lti.nlp.amr.Dependency;@60cf80e7),Annotation([Ljava.lang.String;@302fec27,[Ljava.lang.String;@770d0ea6,[Ljava.lang.String;@48c40605),Annotation([Ljava.lang.String;@54107f42,[Ljava.lang.String;@1b11ef33,[Ledu.cmu.lti.nlp.amr.Entity;@476aac9))
AMR:
(a / activity, mod, n2 / nucleus)
(c / close-01, ARG0, n / now)
(c / close-01, ARG1, i / investigate-01)
(i / investigate-01, ARG1, a / activity)

Decoded in 31,194 microseconds
Sentence: No other member of the International Atomic Energy Agency has cooperated as well as Iran.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 5-9:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 2-3:  member => (have-org-role-91 :ARG2 member)
Span 1-2:  other => other

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  cooperated => cooperate-01
Oracle Span 9-10:  has => have-org-role-91
Oracle Span 5-9:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 14-15:  Iran => (country :name (name :op "Iran"))
Oracle Span 2-3:  member => member
Oracle Span 1-2:  other => other

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Incorrect span: member => (have-org-role-91 :ARG2 member)
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: cooperated => cooperate-01
Missing span: member => member
Missing span: has => have-org-role-91
Dependencies:
1	No	_	DT	DT	_	3	neg	_	_
2	other	_	JJ	JJ	_	3	amod	_	_
3	member	_	NN	NN	_	11	nsubj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	9	det	_	_
6	International	_	NNP	NNP	_	9	nn	_	_
7	Atomic	_	NNP	NNP	_	9	nn	_	_
8	Energy	_	NNP	NNP	_	9	nn	_	_
9	Agency	_	NNP	NNP	_	4	pobj	_	_
10	has	_	VBZ	VBZ	_	11	aux	_	_
11	cooperated	_	VBN	VBN	_	0	root	_	_
12	as	_	RB	RB	_	13	advmod	_	_
13	well	_	RB	RB	_	11	cc	_	_
14	as	_	IN	IN	_	13	mwe	_	_
15	Iran	_	VBN	VBN	_	11	conj	_	_
16	.	_	.	.	_	11	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Iran")
(o2 / organization, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(5,9,List(5, 4, 3, 2, 1, 0),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(2,3,List(7, 6),member,(have-org-role-91 :ARG2 member),false), Span(1,2,List(8),other,other,false)),Map(2 -> "International", 5 -> "Agency", 8 -> other, 7 -> member, 1 -> name, 4 -> "Energy", 6 -> have-org-role-91, 0 -> organization, 3 -> "Atomic"),Map(n -> name, h -> have-org-role-91, m -> member, o2 -> other, o -> organization))),[Ljava.lang.String;@6cea706c,Annotation([Ljava.lang.String;@3bd7f8dc,[Ljava.lang.String;@2f2bf0e2,[Ljava.lang.String;@1eba372c),Annotation([Ljava.lang.String;@21ec5d87,[Ljava.lang.String;@25f9407e,[Ledu.cmu.lti.nlp.amr.Dependency;@552518c3),Annotation([Ljava.lang.String;@1a69561c,[Ljava.lang.String;@59aa20b3,[Ljava.lang.String;@363f6148),Annotation([Ljava.lang.String;@4b21844c,[Ljava.lang.String;@1b28f282,[Ledu.cmu.lti.nlp.amr.Entity;@138fe6ec))
AMR:
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(m / member, mod, o2 / other)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)

Decoded in 42,289 microseconds
Sentence: Iran is a nuclear nation.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 4-5:  nation => nation
Span 3-4:  nuclear => nucleus

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 4-5:  nation => nation
Oracle Span 3-4:  nuclear => nucleus

Missing span: Iran => (country :name (name :op "Iran"))
Dependencies:
1	Iran	_	NNP	NNP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	a	_	DT	DT	_	5	det	_	_
4	nuclear	_	JJ	JJ	_	5	amod	_	_
5	nation	_	NN	NN	_	0	root	_	_
6	.	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n3 / name)
(n / nation, domain, c / country)
(n / nation, mod, n2 / nucleus)
(n3 / name, op, "Iran")

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),nation,nation,false), Span(3,4,List(1),nuclear,nucleus,false)),Map(1 -> nucleus, 0 -> nation),Map(n -> nation, n2 -> nucleus))),[Ljava.lang.String;@5e77f0f4,Annotation([Ljava.lang.String;@19b30c92,[Ljava.lang.String;@455351c4,[Ljava.lang.String;@29876704),Annotation([Ljava.lang.String;@4816c290,[Ljava.lang.String;@4940809c,[Ledu.cmu.lti.nlp.amr.Dependency;@16423501),Annotation([Ljava.lang.String;@4efcf8a,[Ljava.lang.String;@7a138fc5,[Ljava.lang.String;@379ab47b),Annotation([Ljava.lang.String;@307765b4,[Ljava.lang.String;@4a9e6faf,[Ledu.cmu.lti.nlp.amr.Entity;@2c95ac9e))
AMR:
(n / nation, mod, n2 / nucleus)

Decoded in 8,328 microseconds
Sentence: Iran has the nuclear fuel cycle.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 5-6:  cycle => cycle
Span 4-5:  fuel => fuel
Span 3-4:  nuclear => nucleus

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  cycle => cycle
Oracle Span 4-5:  fuel => fuel
Oracle Span 1-2:  has => have-03
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 3-4:  nuclear => nucleus

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: has => have-03
Dependencies:
1	Iran	_	NNP	NNP	_	2	nsubj	_	_
2	has	_	VBZ	VBZ	_	0	root	_	_
3	the	_	DT	DT	_	6	det	_	_
4	nuclear	_	JJ	JJ	_	6	amod	_	_
5	fuel	_	NN	NN	_	6	nn	_	_
6	cycle	_	NN	NN	_	2	dobj	_	_
7	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / cycle, mod, f / fuel)
(f / fuel, mod, n2 / nucleus)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, c2 / cycle)
(n / name, op, "Iran")

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),cycle,cycle,false), Span(4,5,List(1),fuel,fuel,false), Span(3,4,List(2),nuclear,nucleus,false)),Map(2 -> nucleus, 1 -> fuel, 0 -> cycle),Map(n -> nucleus, c -> cycle, f -> fuel))),[Ljava.lang.String;@4e4efc1b,Annotation([Ljava.lang.String;@459f7aa3,[Ljava.lang.String;@7cc586a8,[Ljava.lang.String;@7db534f2),Annotation([Ljava.lang.String;@44a2b17b,[Ljava.lang.String;@7a56812e,[Ledu.cmu.lti.nlp.amr.Dependency;@2a76b80a),Annotation([Ljava.lang.String;@7eb01b12,[Ljava.lang.String;@2f4854d6,[Ljava.lang.String;@61d9efe0),Annotation([Ljava.lang.String;@7e70bd39,[Ljava.lang.String;@e6516e,[Ledu.cmu.lti.nlp.amr.Entity;@6de54b40))
AMR:
(c / cycle, domain, f / fuel)
(f / fuel, mod, n / nucleus)

Decoded in 12,705 microseconds
Sentence: Iran will not succumb to international pressure to curb Iran's nuclear projects.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 8-9:  curb => curb-01
Span 11-12:  nuclear => nucleus
Span 6-7:  pressure => pressure-01
Span 12-13:  projects => project

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  curb => curb-01
Oracle Span 5-6:  international => international
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 11-12:  nuclear => nucleus
Oracle Span 6-7:  pressure => pressure-01
Oracle Span 12-13:  projects => project
Oracle Span 3-4:  succumb => succumb-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: succumb => succumb-01
Missing span: international => international
Dependencies:
1	Iran	_	NNP	NNP	_	4	nsubj	_	_
2	will	_	MD	MD	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	succumb	_	VB	VB	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	international	_	JJ	JJ	_	7	amod	_	_
7	pressure	_	NN	NN	_	5	pobj	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	curb	_	VB	VB	_	4	xcomp	_	_
10	Iran	_	NNP	NNP	_	13	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	nuclear	_	JJ	JJ	_	13	amod	_	_
13	projects	_	NNS	NNS	_	9	dobj	_	_
14	.	_	.	.	_	4	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / curb-01, ARG1, p2 / project)
(n / name, op, "Iran")
(p / pressure-01, ARG2, c2 / curb-01)
(p / pressure-01, mod, i / international)
(p2 / project, mod, n2 / nucleus)
(p2 / project, poss, c / country)
(s / succumb-01, ARG0, c / country)
(s / succumb-01, ARG1, p / pressure-01)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),projects,project,false), Span(11,12,List(1),nuclear,nucleus,false), Span(8,9,List(2),curb,curb-01,false), Span(6,7,List(3),pressure,pressure-01,false)),Map(2 -> curb-01, 1 -> nucleus, 0 -> project, 3 -> pressure-01),Map(n -> nucleus, p2 -> pressure-01, p -> project, c -> curb-01))),[Ljava.lang.String;@43ed0ff3,Annotation([Ljava.lang.String;@388ffbc2,[Ljava.lang.String;@a50b09c,[Ljava.lang.String;@4da855dd),Annotation([Ljava.lang.String;@6691490c,[Ljava.lang.String;@2187fff7,[Ledu.cmu.lti.nlp.amr.Dependency;@2e5c7f0b),Annotation([Ljava.lang.String;@21d5c1a0,[Ljava.lang.String;@4de025bf,[Ljava.lang.String;@538613b3),Annotation([Ljava.lang.String;@1eef9aef,[Ljava.lang.String;@11389053,[Ledu.cmu.lti.nlp.amr.Entity;@5db99216))
AMR:
(c / curb-01, ARG1, p / project)
(p / project, mod, n / nucleus)
(p2 / pressure-01, ARG2, c / curb-01)

Decoded in 30,435 microseconds
Sentence: Iran's nuclear projects are for peaceful purposes.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 2-3:  nuclear => nucleus
Span 6-7:  peaceful => peaceful
Span 3-4:  projects => project
Span 7-8:  purposes => purpose

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 2-3:  nuclear => nucleus
Oracle Span 6-7:  peaceful => peaceful
Oracle Span 3-4:  projects => project
Oracle Span 7-8:  purposes => purpose

Missing span: Iran => (country :name (name :op "Iran"))
Dependencies:
1	Iran	_	NNP	NNP	_	4	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	nuclear	_	JJ	JJ	_	4	amod	_	_
4	projects	_	NNS	NNS	_	5	nsubj	_	_
5	are	_	VBP	VBP	_	0	root	_	_
6	for	_	IN	IN	_	5	prep	_	_
7	peaceful	_	JJ	JJ	_	8	amod	_	_
8	purposes	_	NNS	NNS	_	6	pobj	_	_
9	.	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n2 / name)
(n2 / name, op, "Iran")
(p / project, mod, n / nucleus)
(p / project, poss, c / country)
(p3 / purpose, mod, p2 / peaceful)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),purposes,purpose,false), Span(6,7,List(1),peaceful,peaceful,false), Span(3,4,List(2),projects,project,false), Span(2,3,List(3),nuclear,nucleus,false)),Map(2 -> project, 1 -> peaceful, 0 -> purpose, 3 -> nucleus),Map(n -> nucleus, p2 -> peaceful, p -> purpose, p3 -> project))),[Ljava.lang.String;@3ec11999,Annotation([Ljava.lang.String;@5c1bd44c,[Ljava.lang.String;@9f46d94,[Ljava.lang.String;@18cc679e),Annotation([Ljava.lang.String;@2e77b8cf,[Ljava.lang.String;@2c4ca0f9,[Ledu.cmu.lti.nlp.amr.Dependency;@67ef029),Annotation([Ljava.lang.String;@7df587ef,[Ljava.lang.String;@6e57e95e,[Ljava.lang.String;@2755d705),Annotation([Ljava.lang.String;@56db847e,[Ljava.lang.String;@740abb5,[Ledu.cmu.lti.nlp.amr.Entity;@560cbf1a))
AMR:
(p / purpose, mod, p2 / peaceful)
(p / purpose, topic, p3 / project)
(p3 / project, mod, n / nucleus)

Decoded in 18,403 microseconds
Sentence: The United States and some European nations believe that Iran's nuclear projects are for the purpose of making nuclear weapons.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 7-8:  believe => believe-01
Span 6-7:  nations => nation
Span 19-20:  nuclear => nucleus
Span 11-12:  nuclear => nucleus
Span 12-13:  projects => project
Span 4-5:  some => some
Span 1-3:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 3-4:  and => and
Oracle Span 7-8:  believe => believe-01
Oracle Span 5-6:  European => (continent :name (name :op "Europe"))
Oracle Span 9-10:  Iran => (country :name (name :op "Iran"))
Oracle Span 18-19:  making => make-01
Oracle Span 6-7:  nations => nation
Oracle Span 11-12:  nuclear => nucleus
Oracle Span 12-13:  projects => project
Oracle Span 4-5:  some => some
Oracle Span 1-3:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 20-21:  weapons => weapon

Extra span: nuclear => nucleus
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: European => (continent :name (name :op "Europe"))
Missing span: making => make-01
Missing span: weapons => weapon
Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	United	_	NNP	NNP	_	3	nn	_	_
3	States	_	NNPS	NNPS	_	8	nsubj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	some	_	DT	DT	_	7	det	_	_
6	European	_	JJ	JJ	_	7	amod	_	_
7	nations	_	NNS	NNS	_	3	conj	_	_
8	believe	_	VBP	VBP	_	0	root	_	_
9	that	_	IN	IN	_	14	mark	_	_
10	Iran	_	NNP	NNP	_	13	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	nuclear	_	JJ	JJ	_	13	amod	_	_
13	projects	_	NNS	NNS	_	14	nsubj	_	_
14	are	_	VBP	VBP	_	8	ccomp	_	_
15	for	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	purpose	_	NN	NN	_	15	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	making	_	VBG	VBG	_	18	pcomp	_	_
20	nuclear	_	JJ	JJ	_	21	amod	_	_
21	weapons	_	NNS	NNS	_	19	dobj	_	_
22	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, n2 / nation)
(b / believe-01, ARG0, a / and)
(c / country, name, n / name)
(c2 / continent, name, n3 / name)
(c3 / country, name, n5 / name)
(m / make-01, ARG0, c3 / country)
(m / make-01, ARG1, w / weapon)
(n / name, op, "States")
(n / name, op, "United")
(n2 / nation, mod, c2 / continent)
(n2 / nation, quant, s / some)
(n3 / name, op, "Europe")
(n5 / name, op, "Iran")
(p / project, mod, n4 / nucleus)
(p / project, poss, c3 / country)
(w / weapon, mod, n4 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),nuclear,nucleus,false), Span(12,13,List(1),projects,project,false), Span(11,12,List(2),nuclear,nucleus,false), Span(7,8,List(3),believe,believe-01,false), Span(6,7,List(4),nations,nation,false), Span(4,5,List(5),some,some,false), Span(1,3,List(9, 8, 7, 6),United States,(country :name (name :op "United" :op "States")),false)),Map(2 -> nucleus, 5 -> some, 8 -> "United", 7 -> name, 1 -> project, 4 -> nation, 6 -> country, 9 -> "States", 0 -> nucleus, 3 -> believe-01),Map(n -> nucleus, b -> believe-01, n4 -> name, s -> some, p -> project, n3 -> nation, c -> country, n2 -> nucleus))),[Ljava.lang.String;@5fe8b721,Annotation([Ljava.lang.String;@551a20d6,[Ljava.lang.String;@578524c3,[Ljava.lang.String;@64c2b546),Annotation([Ljava.lang.String;@7e094740,[Ljava.lang.String;@7a11c4c7,[Ledu.cmu.lti.nlp.amr.Dependency;@4cc547a),Annotation([Ljava.lang.String;@7555b920,[Ljava.lang.String;@4152d38d,[Ljava.lang.String;@3591009c),Annotation([Ljava.lang.String;@5398edd0,[Ljava.lang.String;@b5cc23a,[Ledu.cmu.lti.nlp.amr.Entity;@5cc5b667))
AMR:
(b / believe-01, ARG0, c / country)
(b / believe-01, ARG1, n3 / nation)
(c / country, name, n4 / name)
(n3 / nation, mod, s / some)
(n3 / nation, poss, n / nucleus)
(n4 / name, op, "States")
(n4 / name, op, "United")
(p / project, mod, n2 / nucleus)
(p / project, poss, c / country)

Decoded in 121,145 microseconds
Sentence: Several Western Governments and leading arms control experts stated that Iran is attempting to avoid further punishment by the U.N. Security Council.

NER Entity: (country :name (name :op "Western" :op "Governments"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "U.N." :op "Security" :op "Council"))
Spans:
Span 12-13:  attempting => attempt-01
Span 14-15:  avoid => avoid-01
Span 6-7:  control => control-01
Span 15-16:  further => further
Span 16-17:  punishment => punish-01
Span 0-1:  Several => several
Span 19-22:  U.N. Security Council => (organization :name (name :op "Council" :op "Security" :op "U.N."))
Span 1-3:  Western Governments => (country :name (name :op "Western" :op "Governments"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  and => and
Oracle Span 5-6:  arms => arm
Oracle Span 12-13:  attempting => attempt-01
Oracle Span 14-15:  avoid => avoid-01
Oracle Span 6-7:  control => control-01
Oracle Span 7-8:  experts => (person :ARG1-of expert-41)
Oracle Span 15-16:  further => further
Oracle Span 2-3:  Governments => (government-organization :ARG0-of govern-01)
Oracle Span 10-11:  Iran => (country :name (name :op "Iran"))
Oracle Span 4-5:  leading => lead-01
Oracle Span 16-17:  punishment => punish-01
Oracle Span 0-1:  Several => several
Oracle Span 8-9:  stated => state-01
Oracle Span 19-22:  U.N. Security Council => (organization :name (name :op "Council" :op "Security" :op "U.N."))
Oracle Span 1-2:  Western => (world-region :name (name :op "West"))

Extra span: Western Governments => (country :name (name :op "Western" :op "Governments"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Western => (world-region :name (name :op "West"))
Missing span: stated => state-01
Missing span: and => and
Missing span: experts => (person :ARG1-of expert-41)
Missing span: arms => arm
Missing span: leading => lead-01
Missing span: Governments => (government-organization :ARG0-of govern-01)
Dependencies:
1	Several	_	JJ	JJ	_	3	amod	_	_
2	Western	_	JJ	JJ	_	3	amod	_	_
3	Governments	_	NNS	NNS	_	7	nsubj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	leading	_	VBG	VBG	_	6	amod	_	_
6	arms	_	NNS	NNS	_	3	conj	_	_
7	control	_	VBP	VBP	_	0	root	_	_
8	experts	_	NNS	NNS	_	9	nsubj	_	_
9	stated	_	VBD	VBD	_	7	ccomp	_	_
10	that	_	IN	IN	_	13	mark	_	_
11	Iran	_	NNP	NNP	_	13	nsubj	_	_
12	is	_	VBZ	VBZ	_	13	aux	_	_
13	attempting	_	VBG	VBG	_	9	ccomp	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	avoid	_	VB	VB	_	13	xcomp	_	_
16	further	_	JJ	JJ	_	17	amod	_	_
17	punishment	_	NN	NN	_	15	dobj	_	_
18	by	_	IN	IN	_	15	prep	_	_
19	the	_	DT	DT	_	22	det	_	_
20	U.N.	_	NNP	NNP	_	22	nn	_	_
21	Security	_	NNP	NNP	_	22	nn	_	_
22	Council	_	NNP	NNP	_	18	pobj	_	_
23	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, g / government-organization)
(a / and, op, p2 / person)
(a / and, quant, s2 / several)
(a3 / attempt-01, ARG0, c2 / country)
(a3 / attempt-01, ARG1, a4 / avoid-01)
(a4 / avoid-01, ARG0, c2 / country)
(a4 / avoid-01, ARG1, p / punish-01)
(c / control-01, ARG1, a2 / arm)
(c2 / country, name, n2 / name)
(e / expert-41, ARG1, p2 / person)
(e / expert-41, ARG2, c / control-01)
(g / government-organization, mod, w / world-region)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-01, ARG0, p2 / person)
(n / name, op, "West")
(n2 / name, op, "Iran")
(n3 / name, op, "Council")
(n3 / name, op, "Security")
(n3 / name, op, "U.N.")
(o / organization, name, n3 / name)
(p / punish-01, ARG0, o / organization)
(p / punish-01, ARG1, c2 / country)
(p / punish-01, degree, f / further)
(s / state-01, ARG0, a / and)
(s / state-01, ARG1, a3 / attempt-01)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(19,22,List(4, 3, 2, 1, 0),U.N. Security Council,(organization :name (name :op "Council" :op "Security" :op "U.N.")),false), Span(16,17,List(5),punishment,punish-01,false), Span(15,16,List(6),further,further,false), Span(14,15,List(7),avoid,avoid-01,false), Span(12,13,List(8),attempting,attempt-01,false), Span(6,7,List(9),control,control-01,false), Span(1,3,List(13, 12, 11, 10),Western Governments,(country :name (name :op "Western" :op "Governments")),false), Span(0,1,List(14),Several,several,false)),Map(2 -> "Council", 5 -> punish-01, 12 -> "Western", 8 -> attempt-01, 7 -> avoid-01, 1 -> name, 4 -> "U.N.", 11 -> name, 14 -> several, 6 -> further, 0 -> organization, 9 -> control-01, 3 -> "Security", 10 -> country, 13 -> "Governments"),Map(n -> name, s -> several, p -> punish-01, a -> avoid-01, a2 -> attempt-01, c -> control-01, f -> further, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@61edc883,Annotation([Ljava.lang.String;@758f4f03,[Ljava.lang.String;@182f1e9a,[Ljava.lang.String;@6928f576),Annotation([Ljava.lang.String;@660e9100,[Ljava.lang.String;@69f63d95,[Ledu.cmu.lti.nlp.amr.Dependency;@9cd25ff),Annotation([Ljava.lang.String;@27e0f2f5,[Ljava.lang.String;@3574e198,[Ljava.lang.String;@6db66836),Annotation([Ljava.lang.String;@db44aa2,[Ljava.lang.String;@2de366bb,[Ledu.cmu.lti.nlp.amr.Entity;@3f093abe))
AMR:
(a / avoid-01, ARG1, p / punish-01)
(a2 / attempt-01, ARG1, a / avoid-01)
(c / control-01, ARG0, c2 / country)
(c / control-01, ARG1, a2 / attempt-01)
(c2 / country, name, n2 / name)
(n / name, op, "Council")
(n / name, op, "Security")
(n / name, op, "U.N.")
(n2 / name, op, "Governments")
(n2 / name, op, "Western")
(o / organization, name, n / name)
(p / punish-01, ARG0, o / organization)
(p / punish-01, mod, f / further)
(s / several, name, c2 / country)

Decoded in 119,546 microseconds
Sentence: The Western Governments include the United States and France.

NER Entity: (country :name (name :op "Western" :op "Governments"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 5-7:  United States => (country :name (name :op "United" :op "States"))
Span 1-3:  Western Governments => (country :name (name :op "Western" :op "Governments"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 8-9:  France => (country :name (name :op "France"))
Oracle Span 2-3:  Governments => (government-organization :ARG0-of govern-01)
Oracle Span 3-4:  include => include-01
Oracle Span 5-7:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 1-2:  Western => (world-region :name (name :op "West"))

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Extra span: Western Governments => (country :name (name :op "Western" :op "Governments"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: France => (country :name (name :op "France"))
Missing span: Western => (world-region :name (name :op "West"))
Missing span: include => include-01
Missing span: and => and
Missing span: Governments => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Western	_	JJ	JJ	_	3	amod	_	_
3	Governments	_	NNS	NNS	_	4	nsubj	_	_
4	include	_	VBP	VBP	_	0	root	_	_
5	the	_	DT	DT	_	7	det	_	_
6	United	_	NNP	NNP	_	7	nn	_	_
7	States	_	NNPS	NNPS	_	4	dobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	France	_	NNP	NNP	_	7	conj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(g / government-organization, mod, w / world-region)
(g2 / govern-01, ARG0, g / government-organization)
(i / include-01, ARG1, a / and)
(i / include-01, ARG2, g / government-organization)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "France")
(n3 / name, op, "West")
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(5,7,List(3, 2, 1, 0),United States,(country :name (name :op "United" :op "States")),false), Span(1,3,List(7, 6, 5, 4),Western Governments,(country :name (name :op "Western" :op "Governments")),false)),Map(2 -> "United", 5 -> name, 7 -> "Governments", 1 -> name, 4 -> country, 6 -> "Western", 0 -> country, 3 -> "States"),Map(n -> name, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@61a002b1,Annotation([Ljava.lang.String;@4eeea57d,[Ljava.lang.String;@780ec4a5,[Ljava.lang.String;@e24ddd0),Annotation([Ljava.lang.String;@6f70f32f,[Ljava.lang.String;@548e76f1,[Ledu.cmu.lti.nlp.amr.Dependency;@5aabbb29),Annotation([Ljava.lang.String;@72c927f1,[Ljava.lang.String;@1ac85b0c,[Ljava.lang.String;@3dd69f5a),Annotation([Ljava.lang.String;@3aa3193a,[Ljava.lang.String;@1ee4730,[Ledu.cmu.lti.nlp.amr.Entity;@59a67c3a))
AMR:
(c / country, name, n / name)
(c / country, poss, c2 / country)
(c2 / country, name, n2 / name)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Governments")
(n2 / name, op, "Western")

Decoded in 26,789 microseconds
Sentence: The Governments and experts believe that Iran is attempting to --

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 8-9:  attempting => attempt-01
Span 4-5:  believe => believe-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  and => and
Oracle Span 8-9:  attempting => attempt-01
Oracle Span 4-5:  believe => believe-01
Oracle Span 3-4:  experts => (person :ARG1-of expert-41)
Oracle Span 1-2:  Governments => (government-organization :ARG0-of govern-01)
Oracle Span 6-7:  Iran => (country :name (name :op "Iran"))

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: and => and
Missing span: experts => (person :ARG1-of expert-41)
Missing span: Governments => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	Governments	_	NNS	NNS	_	5	nsubj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	experts	_	NNS	NNS	_	2	conj	_	_
5	believe	_	VBP	VBP	_	0	root	_	_
6	that	_	IN	IN	_	9	mark	_	_
7	Iran	_	NNP	NNP	_	9	nsubj	_	_
8	is	_	VBZ	VBZ	_	9	aux	_	_
9	attempting	_	VBG	VBG	_	5	ccomp	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	--	_	:	:	_	5	punct	_	_

Oracle:
(a / and, op, g / government-organization)
(a / and, op, p / person)
(a2 / attempt-01, ARG0, c / country)
(b / believe-01, ARG0, a / and)
(b / believe-01, ARG1, a2 / attempt-01)
(c / country, name, n / name)
(e / expert-41, ARG1, p / person)
(g2 / govern-01, ARG0, g / government-organization)
(n / name, op, "Iran")

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),attempting,attempt-01,false), Span(4,5,List(1),believe,believe-01,false)),Map(1 -> believe-01, 0 -> attempt-01),Map(b -> believe-01, a -> attempt-01))),[Ljava.lang.String;@5003041b,Annotation([Ljava.lang.String;@724bade8,[Ljava.lang.String;@16fb356,[Ljava.lang.String;@6bc248ed),Annotation([Ljava.lang.String;@23a9ba52,[Ljava.lang.String;@ca27722,[Ledu.cmu.lti.nlp.amr.Dependency;@70ab80e3),Annotation([Ljava.lang.String;@9573b3b,[Ljava.lang.String;@67427b69,[Ljava.lang.String;@78461bc4),Annotation([Ljava.lang.String;@544630b7,[Ljava.lang.String;@64f857e7,[Ledu.cmu.lti.nlp.amr.Entity;@1095f122))
AMR:
(b / believe-01, ARG1, a / attempt-01)

Decoded in 20,052 microseconds
Sentence: slow the arms control process.

Spans:
Span 3-4:  control => control-01
Span 4-5:  process => process
Span 0-1:  slow => slow

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  arms => arm
Oracle Span 3-4:  control => control-01
Oracle Span 4-5:  process => process
Oracle Span 0-1:  slow => slow-01

Incorrect span: slow => slow
Missing span: slow => slow-01
Missing span: arms => arm
Dependencies:
1	slow	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	5	det	_	_
3	arms	_	NNS	NNS	_	5	nn	_	_
4	control	_	NN	NN	_	5	nn	_	_
5	process	_	NN	NN	_	1	dobj	_	_
6	.	_	.	.	_	1	punct	_	_

Oracle:
(c / control-01, ARG1, a / arm)
(p / process, mod, c / control-01)
(s / slow-01, ARG1, p / process)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),process,process,false), Span(3,4,List(1),control,control-01,false), Span(0,1,List(2),slow,slow,false)),Map(2 -> slow, 1 -> control-01, 0 -> process),Map(s -> slow, p -> process, c -> control-01))),[Ljava.lang.String;@58c540cf,Annotation([Ljava.lang.String;@3d6300e8,[Ljava.lang.String;@1b822fcc,[Ljava.lang.String;@24a1c17f),Annotation([Ljava.lang.String;@56102e1c,[Ljava.lang.String;@73511076,[Ledu.cmu.lti.nlp.amr.Dependency;@7927bd9f),Annotation([Ljava.lang.String;@532721fd,[Ljava.lang.String;@410954b,[Ljava.lang.String;@7fb9f71f),Annotation([Ljava.lang.String;@3b366632,[Ljava.lang.String;@51f49060,[Ledu.cmu.lti.nlp.amr.Entity;@514eedd8))
AMR:
(p / process, mod, c / control-01)
(s / slow, degree, p / process)

Decoded in 10,563 microseconds
Sentence: avoid answering questions about Iran's past treaty violations.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 0-1:  avoid => avoid-01
Span 6-7:  past => past
Span 7-8:  treaty => treaty
Span 8-9:  violations => violate-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  answering => answer-01
Oracle Span 0-1:  avoid => avoid-01
Oracle Span 4-5:  Iran => (country :name (name :op "Iran"))
Oracle Span 6-7:  past => past
Oracle Span 2-3:  questions => question-01
Oracle Span 7-8:  treaty => treaty
Oracle Span 8-9:  violations => violate-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: answering => answer-01
Missing span: questions => question-01
Dependencies:
1	avoid	_	VB	VB	_	0	root	_	_
2	answering	_	NN	NN	_	3	nn	_	_
3	questions	_	NNS	NNS	_	1	dobj	_	_
4	about	_	IN	IN	_	1	prep	_	_
5	Iran	_	NNP	NNP	_	9	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	past	_	JJ	JJ	_	9	amod	_	_
8	treaty	_	NN	NN	_	9	nn	_	_
9	violations	_	NNS	NNS	_	4	pobj	_	_
10	.	_	.	.	_	1	punct	_	_

Oracle:
(a / avoid-01, ARG1, a2 / answer-01)
(a2 / answer-01, ARG1, q / question-01)
(c / country, name, n / name)
(n / name, op, "Iran")
(q / question-01, ARG1, v / violate-01)
(v / violate-01, ARG0, c / country)
(v / violate-01, ARG1, t / treaty)
(v / violate-01, time, p / past)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),violations,violate-01,false), Span(7,8,List(1),treaty,treaty,false), Span(6,7,List(2),past,past,false), Span(0,1,List(3),avoid,avoid-01,false)),Map(2 -> past, 1 -> treaty, 0 -> violate-01, 3 -> avoid-01),Map(t -> treaty, v -> violate-01, p -> past, a -> avoid-01))),[Ljava.lang.String;@617fe9e1,Annotation([Ljava.lang.String;@6970140a,[Ljava.lang.String;@1cf2fed4,[Ljava.lang.String;@3af4e0bf),Annotation([Ljava.lang.String;@245a26e1,[Ljava.lang.String;@4d63b624,[Ledu.cmu.lti.nlp.amr.Dependency;@466cf502),Annotation([Ljava.lang.String;@5b800468,[Ljava.lang.String;@2e185cd7,[Ljava.lang.String;@7e1a1da6),Annotation([Ljava.lang.String;@5f7f2382,[Ljava.lang.String;@407cf41,[Ledu.cmu.lti.nlp.amr.Entity;@6815c5f2))
AMR:
(a / avoid-01, ARG1, t / treaty)
(v / violate-01, ARG1, t / treaty)
(v / violate-01, time, p / past)

Decoded in 22,793 microseconds
Sentence: Physicist and President of the Institute for Science and International Security David Albright stated that --

NER Entity: (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
NER Entity: (person :name (name :op "David" :op "Albright"))
Spans:
Span 11-13:  David Albright => (person :name (name :op "David" :op "Albright"))
Span 5-11:  Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Span 2-3:  President => (have-org-role-91 :ARG2 president)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 11-13:  David Albright => (name :op "Albright" :op "David")
Oracle Span 5-11:  Institute for Science and International Security => (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute"))
Oracle Span 0-1:  Physicist => physicist
Oracle Span 2-3:  President => (have-org-role-91 :ARG2 president)
Oracle Span 13-14:  stated => state-01

Incorrect span: David Albright => (person :name (name :op "David" :op "Albright"))
Incorrect span: Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Missing span: David Albright => (name :op "Albright" :op "David")
Missing span: Institute for Science and International Security => (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute"))
Missing span: stated => state-01
Missing span: Physicist => physicist
Dependencies:
1	Physicist	_	NNP	NNP	_	0	root	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	President	_	NNP	NNP	_	1	conj	_	_
4	of	_	IN	IN	_	1	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	Institute	_	NNP	NNP	_	4	pobj	_	_
7	for	_	IN	IN	_	14	mark	_	_
8	Science	_	NNP	NNP	_	13	nn	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	International	_	NNP	NNP	_	8	conj	_	_
11	Security	_	NNP	NNP	_	13	nn	_	_
12	David	_	NNP	NNP	_	13	nn	_	_
13	Albright	_	NNP	NNP	_	14	nsubj	_	_
14	stated	_	VBD	VBD	_	1	dep	_	_
15	that	_	DT	DT	_	14	dobj	_	_
16	--	_	:	:	_	1	punct	_	_

Oracle:
(h / have-org-role-91, ARG0, p / physicist)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Albright")
(n / name, op, "David")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Science")
(n2 / name, op, "Security")
(n2 / name, op, "and")
(n2 / name, op, "for")
(o / organization, name, n2 / name)
(p / physicist, name, n / name)
(s / state-01, ARG0, p / physicist)

Input(Some(Graph(null,ArrayBuffer(Span(11,13,List(3, 2, 1, 0),David Albright,(person :name (name :op "David" :op "Albright")),false), Span(5,11,List(11, 10, 9, 8, 7, 6, 5, 4),Institute for Science and International Security,(organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false), Span(2,3,List(13, 12),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> "David", 5 -> name, 12 -> have-org-role-91, 8 -> "Science", 7 -> "for", 1 -> name, 4 -> organization, 11 -> "Security", 6 -> "Institute", 0 -> person, 9 -> "and", 3 -> "Albright", 10 -> "International", 13 -> president),Map(n -> name, h -> have-org-role-91, p2 -> president, p -> person, o -> organization, n2 -> name))),[Ljava.lang.String;@46cc127b,Annotation([Ljava.lang.String;@60094a13,[Ljava.lang.String;@5aceec94,[Ljava.lang.String;@1c32886a),Annotation([Ljava.lang.String;@3a4b0e5d,[Ljava.lang.String;@10b892d5,[Ledu.cmu.lti.nlp.amr.Dependency;@3d3f761a),Annotation([Ljava.lang.String;@3546d80f,[Ljava.lang.String;@579d011c,[Ljava.lang.String;@3670f00),Annotation([Ljava.lang.String;@452e26d0,[Ljava.lang.String;@46ab18da,[Ledu.cmu.lti.nlp.amr.Entity;@790174f2))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Albright")
(n / name, op, "David")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Science")
(n2 / name, op, "Security")
(n2 / name, op, "and")
(n2 / name, op, "for")
(o / organization, name, n2 / name)
(p / person, name, n / name)

Decoded in 54,090 microseconds
Sentence: There is no way to verify Iran's claims.

NER Entity: (country :name (name :op "Iran"))
Spans:
Span 8-9:  claims => claim-01
Span 2-3:  no => -
Span 5-6:  verify => verify-01
Span 3-4:  way => way

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 8-9:  claims => (thing :ARG1-of claim-01)
Oracle Span 6-7:  Iran => (country :name (name :op "Iran"))
Oracle Span 2-3:  no => -
Oracle Span 5-6:  verify => verify-01

Incorrect span: claims => claim-01
Extra span: way => way
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: claims => (thing :ARG1-of claim-01)
Dependencies:
1	There	_	EX	EX	_	2	expl	_	_
2	is	_	VBZ	VBZ	_	0	root	_	_
3	no	_	DT	DT	_	4	neg	_	_
4	way	_	NN	NN	_	2	nsubj	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	verify	_	VB	VB	_	4	vmod	_	_
7	Iran	_	NNP	NNP	_	9	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	claims	_	NNS	NNS	_	6	dobj	_	_
10	.	_	.	.	_	2	punct	_	_

Oracle:
(c / claim-01, ARG0, c2 / country)
(c / claim-01, ARG1, t / thing)
(c2 / country, name, n / name)
(n / name, op, "Iran")
(v / verify-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),claims,claim-01,false), Span(5,6,List(1),verify,verify-01,false), Span(3,4,List(2),way,way,false), Span(2,3,List(3),no,-,false)),Map(2 -> way, 1 -> verify-01, 0 -> claim-01, 3 -> -),Map(w -> way, v -> verify-01, - -> -, c -> claim-01))),[Ljava.lang.String;@42257bdd,Annotation([Ljava.lang.String;@7689ddef,[Ljava.lang.String;@687a762c,[Ljava.lang.String;@1a2e2935),Annotation([Ljava.lang.String;@733c423e,[Ljava.lang.String;@4b629f13,[Ledu.cmu.lti.nlp.amr.Dependency;@70925b45),Annotation([Ljava.lang.String;@1b9ea3e3,[Ljava.lang.String;@aa22f1c,[Ljava.lang.String;@55e7a35c),Annotation([Ljava.lang.String;@37cd92d6,[Ljava.lang.String;@5922ae77,[Ledu.cmu.lti.nlp.amr.Entity;@4263b080))
AMR:
(c / claim-01, ARG1, - / -)
(v / verify-01, ARG0, w / way)
(v / verify-01, ARG1, c / claim-01)

Decoded in 38,046 microseconds
Sentence: The International Atomic Energy Agency has no access to people, documents, sites.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 7-8:  access => access-01
Span 11-12:  documents => document
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 6-7:  no => -
Span 13-14:  sites => site

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  access => access-01
Oracle Span 11-12:  documents => document
Oracle Span 5-6:  has => have-03
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 6-7:  no => -
Oracle Span 13-14:  sites => site

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: has => have-03
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	International	_	NNP	NNP	_	5	nn	_	_
3	Atomic	_	NNP	NNP	_	5	nn	_	_
4	Energy	_	NNP	NNP	_	5	nn	_	_
5	Agency	_	NNP	NNP	_	6	nsubj	_	_
6	has	_	VBZ	VBZ	_	0	root	_	_
7	no	_	DT	DT	_	8	neg	_	_
8	access	_	NN	NN	_	6	dobj	_	_
9	to	_	TO	TO	_	6	prep	_	_
10	people	_	NNS	NNS	_	9	pobj	_	_
11	,	_	,	,	_	10	punct	_	_
12	documents	_	NNS	NNS	_	10	appos	_	_
13	,	_	,	,	_	12	punct	_	_
14	sites	_	NNS	NNS	_	12	appos	_	_
15	.	_	.	.	_	6	punct	_	_

Oracle:
(a / access-01, ARG0, o / organization)
(h / have-03, ARG0, o / organization)
(h / have-03, ARG1, a / access-01)
(h / have-03, polarity, - / -)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),sites,site,false), Span(11,12,List(1),documents,document,false), Span(7,8,List(2),access,access-01,false), Span(6,7,List(3),no,-,false), Span(1,5,List(9, 8, 7, 6, 5, 4),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> access-01, 5 -> name, 8 -> "Energy", 7 -> "Atomic", 1 -> document, 4 -> organization, 6 -> "International", 9 -> "Agency", 0 -> site, 3 -> -),Map(n -> name, s -> site, d -> document, a -> access-01, - -> -, o -> organization))),[Ljava.lang.String;@2af616d3,Annotation([Ljava.lang.String;@71f67a79,[Ljava.lang.String;@3deb2326,[Ljava.lang.String;@62d363ab),Annotation([Ljava.lang.String;@7889a1ac,[Ljava.lang.String;@3aee3976,[Ledu.cmu.lti.nlp.amr.Dependency;@5ef8df1e),Annotation([Ljava.lang.String;@27cf3151,[Ljava.lang.String;@127e70c5,[Ljava.lang.String;@5910de75),Annotation([Ljava.lang.String;@4108fa66,[Ljava.lang.String;@1f130eaf,[Ledu.cmu.lti.nlp.amr.Entity;@7e0aadd0))
AMR:
(a / access-01, ARG0, o / organization)
(a / access-01, ARG1, s / site)
(a / access-01, polarity, - / -)
(d / document, location, s / site)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)

Decoded in 43,883 microseconds
Sentence: The International Atomic Energy Agency loses the right to ask further questions in the future.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 9-10:  ask => ask-02
Span 10-11:  further => further
Span 14-15:  future => future
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  ask => ask-01
Oracle Span 10-11:  further => further
Oracle Span 14-15:  future => future
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 5-6:  loses => lose-02
Oracle Span 11-12:  questions => question-01

Incorrect span: ask => ask-02
Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: loses => lose-02
Missing span: ask => ask-01
Missing span: questions => question-01
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	International	_	NNP	NNP	_	5	nn	_	_
3	Atomic	_	NNP	NNP	_	5	nn	_	_
4	Energy	_	NNP	NNP	_	5	nn	_	_
5	Agency	_	NNP	NNP	_	6	nsubj	_	_
6	loses	_	VBZ	VBZ	_	0	root	_	_
7	the	_	DT	DT	_	8	det	_	_
8	right	_	NN	NN	_	6	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	ask	_	VB	VB	_	8	vmod	_	_
11	further	_	JJ	JJ	_	12	amod	_	_
12	questions	_	NNS	NNS	_	10	dobj	_	_
13	in	_	IN	IN	_	10	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	future	_	NN	NN	_	13	pobj	_	_
16	.	_	.	.	_	6	punct	_	_

Oracle:
(a / ask-01, ARG1, q / question-01)
(a / ask-01, time, f2 / future)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(q / question-01, ARG0, o / organization)
(q / question-01, mod, f / further)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),future,future,false), Span(10,11,List(1),further,further,false), Span(9,10,List(2),ask,ask-02,false), Span(1,5,List(8, 7, 6, 5, 4, 3),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> ask-02, 5 -> "International", 8 -> "Agency", 7 -> "Energy", 1 -> further, 4 -> name, 6 -> "Atomic", 0 -> future, 3 -> organization),Map(n -> name, a -> ask-02, f2 -> further, o -> organization, f -> future))),[Ljava.lang.String;@21362712,Annotation([Ljava.lang.String;@27eb3298,[Ljava.lang.String;@200a26bc,[Ljava.lang.String;@bc57b40),Annotation([Ljava.lang.String;@1b5bc39d,[Ljava.lang.String;@655a5d9c,[Ledu.cmu.lti.nlp.amr.Dependency;@1494b84d),Annotation([Ljava.lang.String;@34abdee4,[Ljava.lang.String;@71a9b4c7,[Ljava.lang.String;@4628b1d3),Annotation([Ljava.lang.String;@77cf3f8b,[Ljava.lang.String;@1df98368,[Ledu.cmu.lti.nlp.amr.Entity;@21ca139c))
AMR:
(a / ask-02, ARG0, o / organization)
(a / ask-02, ARG1, f / future)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, mod, f2 / further)
(o / organization, name, n / name)

Decoded in 43,441 microseconds
Sentence: The unusual development sets a bad precedent.

Spans:
Span 5-6:  bad => bad
Span 2-3:  development => develop-02
Span 6-7:  precedent => precedent
Span 1-2:  unusual => usual

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  bad => bad
Oracle Span 2-3:  development => develop-01
Oracle Span 6-7:  precedent => precedent
Oracle Span 3-4:  sets => set-02
Oracle Span 1-2:  unusual => (usual :polarity -)

Incorrect span: development => develop-02
Incorrect span: unusual => usual
Missing span: sets => set-02
Missing span: unusual => (usual :polarity -)
Missing span: development => develop-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	unusual	_	JJ	JJ	_	3	amod	_	_
3	development	_	NN	NN	_	4	nsubj	_	_
4	sets	_	VBZ	VBZ	_	0	root	_	_
5	a	_	DT	DT	_	7	det	_	_
6	bad	_	JJ	JJ	_	7	amod	_	_
7	precedent	_	NN	NN	_	4	dobj	_	_
8	.	_	.	.	_	4	punct	_	_

Oracle:
(d / develop-01, mod, u / usual)
(p / precedent, mod, b / bad)
(s / set-02, ARG0, d / develop-01)
(s / set-02, ARG1, p / precedent)
(u / usual, polarity, -)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),precedent,precedent,false), Span(5,6,List(1),bad,bad,false), Span(2,3,List(2),development,develop-02,false), Span(1,2,List(3),unusual,usual,false)),Map(2 -> develop-02, 1 -> bad, 0 -> precedent, 3 -> usual),Map(b -> bad, d -> develop-02, p -> precedent, u -> usual))),[Ljava.lang.String;@226f885f,Annotation([Ljava.lang.String;@2cd2c8fe,[Ljava.lang.String;@7d61eccf,[Ljava.lang.String;@cc6460c),Annotation([Ljava.lang.String;@52350abb,[Ljava.lang.String;@681aad3b,[Ledu.cmu.lti.nlp.amr.Dependency;@1a6f2363),Annotation([Ljava.lang.String;@2427e004,[Ljava.lang.String;@5ebd56e9,[Ljava.lang.String;@63f34b70),Annotation([Ljava.lang.String;@641856,[Ljava.lang.String;@1b58ff9e,[Ledu.cmu.lti.nlp.amr.Entity;@2f66e802))
AMR:
(d / develop-02, ARG1, p / precedent)
(d / develop-02, mod, u / usual)
(p / precedent, mod, b / bad)

Decoded in 18,908 microseconds
Sentence: The International Atomic Energy Agency may have been tricked because it was eager for a deal.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 9-10:  because => cause-01
Span 15-16:  deal => deal-01
Span 12-13:  eager => eager-41
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 5-6:  may => possible

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 9-10:  because => cause-01
Oracle Span 15-16:  deal => deal-01
Oracle Span 12-13:  eager => eager-41
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 5-6:  may => possible
Oracle Span 8-9:  tricked => trick-01

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: tricked => trick-01
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	International	_	NNP	NNP	_	5	nn	_	_
3	Atomic	_	NNP	NNP	_	5	nn	_	_
4	Energy	_	NNP	NNP	_	5	nn	_	_
5	Agency	_	NNP	NNP	_	9	nsubjpass	_	_
6	may	_	MD	MD	_	9	aux	_	_
7	have	_	VB	VB	_	9	aux	_	_
8	been	_	VBN	VBN	_	9	auxpass	_	_
9	tricked	_	VBN	VBN	_	0	root	_	_
10	because	_	IN	IN	_	13	mark	_	_
11	it	_	PRP	PRP	_	13	nsubj	_	_
12	was	_	VBD	VBD	_	13	cop	_	_
13	eager	_	JJ	JJ	_	9	advcl	_	_
14	for	_	IN	IN	_	13	prep	_	_
15	a	_	DT	DT	_	16	det	_	_
16	deal	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	9	punct	_	_

Oracle:
(c / cause-01, ARG0, e / eager-41)
(c / cause-01, ARG1, p / possible)
(e / eager-41, ARG0, o / organization)
(e / eager-41, ARG1, d2 / deal-01)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(p / possible, domain, t / trick-01)
(t / trick-01, ARG1, o / organization)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),deal,deal-01,false), Span(12,13,List(1),eager,eager-41,false), Span(9,10,List(2),because,cause-01,false), Span(5,6,List(3),may,possible,false), Span(1,5,List(9, 8, 7, 6, 5, 4),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> cause-01, 5 -> name, 8 -> "Energy", 7 -> "Atomic", 1 -> eager-41, 4 -> organization, 6 -> "International", 9 -> "Agency", 0 -> deal-01, 3 -> possible),Map(n -> name, e -> eager-41, d -> deal-01, p -> possible, c -> cause-01, o -> organization))),[Ljava.lang.String;@56b78e55,Annotation([Ljava.lang.String;@76318a7d,[Ljava.lang.String;@2a492f2a,[Ljava.lang.String;@3277e499),Annotation([Ljava.lang.String;@585811a4,[Ljava.lang.String;@22c01ab0,[Ledu.cmu.lti.nlp.amr.Dependency;@411341bd),Annotation([Ljava.lang.String;@4c4d362a,[Ljava.lang.String;@5400db36,[Ljava.lang.String;@76b74e9c),Annotation([Ljava.lang.String;@2d72f75e,[Ljava.lang.String;@8ab78bc,[Ledu.cmu.lti.nlp.amr.Entity;@5aa0dbf4))
AMR:
(c / cause-01, ARG0, e / eager-41)
(c / cause-01, ARG1, p / possible)
(e / eager-41, ARG1, o / organization)
(e / eager-41, ARG2, d / deal-01)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)

Decoded in 55,869 microseconds
Sentence: The International Atomic Energy Agency plan announced that --

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 6-7:  announced => announce-01
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  announced => announce-01
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 5-6:  plan => plan-01

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: plan => plan-01
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	International	_	NNP	NNP	_	6	nn	_	_
3	Atomic	_	JJ	JJ	_	6	amod	_	_
4	Energy	_	NNP	NNP	_	6	nn	_	_
5	Agency	_	NNP	NNP	_	6	nn	_	_
6	plan	_	NN	NN	_	7	nsubj	_	_
7	announced	_	VBD	VBD	_	0	root	_	_
8	that	_	DT	DT	_	7	dobj	_	_
9	--	_	:	:	_	7	punct	_	_

Oracle:
(a / announce-01, ARG0, p / plan-01)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(p / plan-01, ARG0, o / organization)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),announced,announce-01,false), Span(1,5,List(6, 5, 4, 3, 2, 1),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> name, 5 -> "Energy", 1 -> organization, 4 -> "Atomic", 6 -> "Agency", 0 -> announce-01, 3 -> "International"),Map(n -> name, a -> announce-01, o -> organization))),[Ljava.lang.String;@16afbd92,Annotation([Ljava.lang.String;@2c5d601e,[Ljava.lang.String;@7fe083b1,[Ljava.lang.String;@23c388c2),Annotation([Ljava.lang.String;@486be205,[Ljava.lang.String;@f713686,[Ledu.cmu.lti.nlp.amr.Dependency;@74f7d1d2),Annotation([Ljava.lang.String;@4b4dd216,[Ljava.lang.String;@5ca17ab0,[Ljava.lang.String;@5a62b2a4),Annotation([Ljava.lang.String;@1051817b,[Ljava.lang.String;@35293c05,[Ledu.cmu.lti.nlp.amr.Entity;@620aa4ea))
AMR:
(a / announce-01, ARG0, o / organization)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)

Decoded in 20,123 microseconds
Sentence: Iran resolved questions about Iran's past experiments with plutonium with no explanation how.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 7-8:  experiments => experiment-01
Span 11-12:  no => -
Span 6-7:  past => past
Span 9-10:  plutonium => plutonium
Span 1-2:  resolved => resolve-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 7-8:  experiments => experiment-01
Oracle Span 12-13:  explanation => explain-01
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 11-12:  no => -
Oracle Span 6-7:  past => past
Oracle Span 9-10:  plutonium => plutonium
Oracle Span 2-3:  questions => question-01
Oracle Span 1-2:  resolved => resolve-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: questions => question-01
Missing span: explanation => explain-01
Dependencies:
1	Iran	_	NNP	NNP	_	2	nsubj	_	_
2	resolved	_	VBD	VBD	_	0	root	_	_
3	questions	_	NNS	NNS	_	2	dobj	_	_
4	about	_	IN	IN	_	2	prep	_	_
5	Iran	_	NNP	NNP	_	8	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	past	_	JJ	JJ	_	8	amod	_	_
8	experiments	_	NNS	NNS	_	4	pobj	_	_
9	with	_	IN	IN	_	2	prep	_	_
10	plutonium	_	NN	NN	_	9	pobj	_	_
11	with	_	IN	IN	_	10	prep	_	_
12	no	_	DT	DT	_	13	neg	_	_
13	explanation	_	NN	NN	_	11	pobj	_	_
14	how	_	WRB	WRB	_	13	dep	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n / name)
(e / experiment-01, ARG0, c / country)
(e / experiment-01, ARG2, p2 / plutonium)
(e / experiment-01, mod, p / past)
(e2 / explain-01, polarity, - / -)
(n / name, op, "Iran")
(q / question-01, ARG1, e / experiment-01)
(r / resolve-01, ARG0, c / country)
(r / resolve-01, ARG1, q / question-01)
(r / resolve-01, manner, e2 / explain-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),no,-,false), Span(9,10,List(1),plutonium,plutonium,false), Span(7,8,List(2),experiments,experiment-01,false), Span(6,7,List(3),past,past,false), Span(1,2,List(4),resolved,resolve-01,false)),Map(2 -> experiment-01, 1 -> plutonium, 4 -> resolve-01, 0 -> -, 3 -> past),Map(e -> experiment-01, p2 -> past, p -> plutonium, r -> resolve-01, - -> -))),[Ljava.lang.String;@2db2dd9d,Annotation([Ljava.lang.String;@3174cb09,[Ljava.lang.String;@4d411036,[Ljava.lang.String;@7adbd080),Annotation([Ljava.lang.String;@41beb473,[Ljava.lang.String;@560513ce,[Ledu.cmu.lti.nlp.amr.Dependency;@13006998),Annotation([Ljava.lang.String;@37fbe4a8,[Ljava.lang.String;@352c308,[Ljava.lang.String;@7d373bcf),Annotation([Ljava.lang.String;@6d6bc158,[Ljava.lang.String;@5dda6f9,[Ledu.cmu.lti.nlp.amr.Entity;@10027fc9))
AMR:
(e / experiment-01, ARG1, p / plutonium)
(e / experiment-01, time, p2 / past)
(r / resolve-01, ARG0, - / -)
(r / resolve-01, ARG1, p / plutonium)

Decoded in 57,803 microseconds
Sentence: Senior Fellow at the International Institute for Strategic Studies mark Fitzpatrick stated that --

NER Entity: (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
NER Entity: (person :name (name :op "Fitzpatrick"))
NER Entity: (person :name (name :op "Fitzpatrick"))
Spans:
Span 4-9:  International Institute for Strategic Studies => (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
Span 9-11:  mark Fitzpatrick => (person :name (name :op "Fitzpatrick" :op "Mark"))
Span 0-1:  Senior => senior

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  Fellow => (have-org-role-91 :ARG2 fellow)
Oracle Span 4-9:  International Institute for Strategic Studies => (research-institute :name (name :op "Studies" :op "Strategic" :op "for" :op "Institute" :op "International"))
Oracle Span 9-11:  mark Fitzpatrick => (person :name (name :op "Fitzpatrick" :op "Mark"))
Oracle Span 0-1:  Senior => senior
Oracle Span 11-12:  stated => state-01

Incorrect span: International Institute for Strategic Studies => (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
Missing span: International Institute for Strategic Studies => (research-institute :name (name :op "Studies" :op "Strategic" :op "for" :op "Institute" :op "International"))
Missing span: stated => state-01
Missing span: Fellow => (have-org-role-91 :ARG2 fellow)
Dependencies:
1	Senior	_	NNP	NNP	_	2	nn	_	_
2	Fellow	_	NNP	NNP	_	0	root	_	_
3	at	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	International	_	NNP	NNP	_	6	nn	_	_
6	Institute	_	NNP	NNP	_	3	pobj	_	_
7	for	_	IN	IN	_	12	mark	_	_
8	Strategic	_	NNP	NNP	_	11	nn	_	_
9	Studies	_	NNPS	NNPS	_	11	nn	_	_
10	mark	_	NN	NN	_	11	nn	_	_
11	Fitzpatrick	_	NNP	NNP	_	12	nsubj	_	_
12	stated	_	VBD	VBD	_	2	dep	_	_
13	that	_	DT	DT	_	12	dobj	_	_
14	--	_	:	:	_	2	punct	_	_

Oracle:
(f / fellow, mod, s2 / senior)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, r / research-institute)
(h / have-org-role-91, ARG2, f / fellow)
(n / name, op, "Fitzpatrick")
(n / name, op, "Mark")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Strategic")
(n2 / name, op, "Studies")
(n2 / name, op, "for")
(p / person, name, n / name)
(r / research-institute, name, n2 / name)
(s / state-01, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),mark Fitzpatrick,(person :name (name :op "Fitzpatrick" :op "Mark")),false), Span(4,9,List(10, 9, 8, 7, 6, 5, 4),International Institute for Strategic Studies,(organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies")),false), Span(0,1,List(11),Senior,senior,false)),Map(2 -> "Fitzpatrick", 5 -> name, 8 -> "for", 7 -> "Institute", 1 -> name, 11 -> senior, 4 -> organization, 6 -> "International", 9 -> "Strategic", 0 -> person, 10 -> "Studies", 3 -> "Mark"),Map(n -> name, s -> senior, p -> person, o -> organization, n2 -> name))),[Ljava.lang.String;@54afd745,Annotation([Ljava.lang.String;@677dbd89,[Ljava.lang.String;@fff25f1,[Ljava.lang.String;@c00fff0),Annotation([Ljava.lang.String;@263f04ca,[Ljava.lang.String;@2ca47471,[Ledu.cmu.lti.nlp.amr.Dependency;@5a021cb9),Annotation([Ljava.lang.String;@51768776,[Ljava.lang.String;@f31c0c6,[Ljava.lang.String;@b93aad),Annotation([Ljava.lang.String;@4a9419d7,[Ljava.lang.String;@2f3c6ac4,[Ledu.cmu.lti.nlp.amr.Entity;@2e8ab815))
AMR:
(n / name, op, "Fitzpatrick")
(n / name, op, "Mark")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Strategic")
(n2 / name, op, "Studies")
(n2 / name, op, "for")
(o / organization, name, n / name)
(o / organization, name, n2 / name)
(p / person, name, n / name)
(s / senior, poss, o / organization)

Decoded in 43,065 microseconds
Sentence: The International Atomic Energy Agency plan is superficial.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 5-6:  plan => plan-01
Oracle Span 7-8:  superficial => superficial

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: superficial => superficial
Missing span: plan => plan-01
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	International	_	NNP	NNP	_	6	nn	_	_
3	Atomic	_	JJ	JJ	_	6	amod	_	_
4	Energy	_	NNP	NNP	_	6	nn	_	_
5	Agency	_	NNP	NNP	_	6	nn	_	_
6	plan	_	NN	NN	_	8	nsubj	_	_
7	is	_	VBZ	VBZ	_	8	cop	_	_
8	superficial	_	JJ	JJ	_	0	root	_	_
9	.	_	.	.	_	8	punct	_	_

Oracle:
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(p / plan-01, ARG0, o / organization)
(s / superficial, domain, p / plan-01)

Input(Some(Graph(null,ArrayBuffer(Span(1,5,List(5, 4, 3, 2, 1, 0),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> "International", 5 -> "Agency", 1 -> name, 4 -> "Energy", 0 -> organization, 3 -> "Atomic"),Map(n -> name, o -> organization))),[Ljava.lang.String;@67af833b,Annotation([Ljava.lang.String;@d1f74b8,[Ljava.lang.String;@41394595,[Ljava.lang.String;@3a0807b7),Annotation([Ljava.lang.String;@21a5fd96,[Ljava.lang.String;@5769e7ae,[Ledu.cmu.lti.nlp.amr.Dependency;@5c77053b),Annotation([Ljava.lang.String;@26b894bd,[Ljava.lang.String;@287f94b1,[Ljava.lang.String;@30b34287),Annotation([Ljava.lang.String;@5489c777,[Ljava.lang.String;@3676ac27,[Ledu.cmu.lti.nlp.amr.Entity;@62f87c44))
AMR:
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)

Decoded in 17,727 microseconds
Sentence: The International Atomic Energy Agency plan draws out negotiations for many months.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 10-11:  many => many
Span 11-12:  months => (temporal-quantity :unit month)
Span 8-9:  negotiations => negotiate-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 6-7:  draws => draw-00
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 10-11:  many => many
Oracle Span 11-12:  months => (temporal-quantity :unit month)
Oracle Span 8-9:  negotiations => negotiate-01
Oracle Span 5-6:  plan => plan-01

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: draws => draw-00
Missing span: plan => plan-01
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	International	_	NNP	NNP	_	6	nn	_	_
3	Atomic	_	JJ	JJ	_	6	amod	_	_
4	Energy	_	NNP	NNP	_	6	nn	_	_
5	Agency	_	NNP	NNP	_	6	nn	_	_
6	plan	_	NN	NN	_	7	nsubj	_	_
7	draws	_	VBZ	VBZ	_	0	root	_	_
8	out	_	RP	RP	_	7	prt	_	_
9	negotiations	_	NNS	NNS	_	7	dobj	_	_
10	for	_	IN	IN	_	9	prep	_	_
11	many	_	JJ	JJ	_	12	amod	_	_
12	months	_	NNS	NNS	_	10	pobj	_	_
13	.	_	.	.	_	7	punct	_	_

Oracle:
(d / draw-00, ARG0, p / plan-01)
(d / draw-00, ARG1, n2 / negotiate-01)
(d / draw-00, duration, m / many)
(m / many, op, t2 / temporal-quantity)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(p / plan-01, ARG0, o / organization)
(t2 / temporal-quantity, unit, m3 / month)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),months,(temporal-quantity :unit month),false), Span(10,11,List(2),many,many,false), Span(8,9,List(3),negotiations,negotiate-01,false), Span(1,5,List(9, 8, 7, 6, 5, 4),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> many, 5 -> name, 8 -> "Energy", 7 -> "Atomic", 1 -> month, 4 -> organization, 6 -> "International", 9 -> "Agency", 0 -> temporal-quantity, 3 -> negotiate-01),Map(n -> negotiate-01, t -> temporal-quantity, m2 -> many, m -> month, o -> organization, n2 -> name))),[Ljava.lang.String;@48f5bde6,Annotation([Ljava.lang.String;@525d79f0,[Ljava.lang.String;@5149f008,[Ljava.lang.String;@7072bc39),Annotation([Ljava.lang.String;@158d255c,[Ljava.lang.String;@2ca65ce4,[Ledu.cmu.lti.nlp.amr.Dependency;@327120c8),Annotation([Ljava.lang.String;@5707c1cb,[Ljava.lang.String;@2b5cb9b2,[Ljava.lang.String;@35038141),Annotation([Ljava.lang.String;@ecf9049,[Ljava.lang.String;@672f11c2,[Ledu.cmu.lti.nlp.amr.Entity;@2970a5bc))
AMR:
(m / month, quant, m2 / many)
(m2 / many, op, o / organization)
(n / negotiate-01, ARG1, m2 / many)
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(o / organization, name, n2 / name)
(t / temporal-quantity, unit, m / month)

Decoded in 71,368 microseconds
Sentence: The International Atomic Energy Agency plan could leave the International Atomic Energy Agency with incomplete and misleading answers from Iran.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 6-7:  could => possible
Span 14-15:  incomplete => (complete-01 :polarity -)
Span 9-13:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 17-18:  answers => answer-01
Oracle Span 6-7:  could => possible
Oracle Span 14-15:  incomplete => (complete-01 :polarity -)
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 19-20:  Iran => (country :name (name :op "Iran"))
Oracle Span 7-8:  leave => leave-02
Oracle Span 16-17:  misleading => mislead-01
Oracle Span 5-6:  plan => plan-01

Extra span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: leave => leave-02
Missing span: answers => answer-01
Missing span: misleading => mislead-01
Missing span: plan => plan-01
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	International	_	NNP	NNP	_	6	nn	_	_
3	Atomic	_	JJ	JJ	_	6	amod	_	_
4	Energy	_	NNP	NNP	_	6	nn	_	_
5	Agency	_	NNP	NNP	_	6	nn	_	_
6	plan	_	NN	NN	_	8	nsubj	_	_
7	could	_	MD	MD	_	8	aux	_	_
8	leave	_	VB	VB	_	0	root	_	_
9	the	_	DT	DT	_	13	det	_	_
10	International	_	NNP	NNP	_	13	nn	_	_
11	Atomic	_	NNP	NNP	_	13	nn	_	_
12	Energy	_	NNP	NNP	_	13	nn	_	_
13	Agency	_	NNP	NNP	_	8	dobj	_	_
14	with	_	IN	IN	_	13	prep	_	_
15	incomplete	_	JJ	JJ	_	18	amod	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	misleading	_	JJ	JJ	_	15	conj	_	_
18	answers	_	NNS	NNS	_	14	pobj	_	_
19	from	_	IN	IN	_	8	prep	_	_
20	Iran	_	NNP	NNP	_	19	pobj	_	_
21	.	_	.	.	_	8	punct	_	_

Oracle:
(a / answer-01, ARG0, c2 / country)
(c / complete-01, ARG1, a / answer-01)
(c / complete-01, polarity, -)
(c2 / country, name, n2 / name)
(l / leave-02, ARG0, p2 / plan-01)
(l / leave-02, ARG1, a / answer-01)
(l / leave-02, ARG2, o / organization)
(m / mislead-01, ARG0, a / answer-01)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Iran")
(o / organization, name, n / name)
(p / possible, domain, l / leave-02)
(p2 / plan-01, ARG0, o / organization)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(1, 0),incomplete,(complete-01 :polarity -),false), Span(9,13,List(7, 6, 5, 4, 3, 2),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(6,7,List(8),could,possible,false), Span(1,5,List(14, 13, 12, 11, 10, 9),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> organization, 5 -> "Atomic", 12 -> "Atomic", 8 -> possible, 7 -> "Agency", 1 -> -, 4 -> "International", 11 -> "International", 14 -> "Agency", 6 -> "Energy", 0 -> complete-01, 9 -> organization, 3 -> name, 10 -> name, 13 -> "Energy"),Map(n -> name, p -> possible, o2 -> organization, c -> complete-01, o -> organization, n2 -> name))),[Ljava.lang.String;@50305a,Annotation([Ljava.lang.String;@72efb5c1,[Ljava.lang.String;@6d511b5f,[Ljava.lang.String;@41200e0c),Annotation([Ljava.lang.String;@40f33492,[Ljava.lang.String;@4fbdc0f0,[Ledu.cmu.lti.nlp.amr.Dependency;@2ad3a1bb),Annotation([Ljava.lang.String;@6bc28a83,[Ljava.lang.String;@324c64cd,[Ljava.lang.String;@13579834),Annotation([Ljava.lang.String;@24be2d9c,[Ljava.lang.String;@5bd73d1a,[Ledu.cmu.lti.nlp.amr.Entity;@aec50a1))
AMR:
(c / complete-01, ARG0, o2 / organization)
(c / complete-01, ARG1, o / organization)
(c / complete-01, ARG2, p / possible)
(c / complete-01, polarity, -)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)

Decoded in 144,715 microseconds
Sentence: The International Institute for Strategic Studies is located in London.

NER Entity: (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
NER Entity: (country :name (name :op "London"))
NER Entity: (country :name (name :op "London"))
Spans:
Span 1-6:  International Institute for Strategic Studies => (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
Span 9-10:  London => (city :name (name :op "London"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-6:  International Institute for Strategic Studies => (research-institute :name (name :op "Studies" :op "Strategic" :op "for" :op "Institute" :op "International"))
Oracle Span 7-8:  located => locate-01
Oracle Span 9-10:  London => (city :name (name :op "London"))

Incorrect span: International Institute for Strategic Studies => (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
Missing span: International Institute for Strategic Studies => (research-institute :name (name :op "Studies" :op "Strategic" :op "for" :op "Institute" :op "International"))
Missing span: located => locate-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	International	_	NNP	NNP	_	3	nn	_	_
3	Institute	_	NNP	NNP	_	8	nsubjpass	_	_
4	for	_	IN	IN	_	3	prep	_	_
5	Strategic	_	NNP	NNP	_	6	nn	_	_
6	Studies	_	NNPS	NNPS	_	4	pobj	_	_
7	is	_	VBZ	VBZ	_	8	auxpass	_	_
8	located	_	VBN	VBN	_	0	root	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	London	_	NNP	NNP	_	9	pobj	_	_
11	.	_	.	.	_	8	punct	_	_

Oracle:
(c / city, name, n2 / name)
(l / locate-01, ARG1, r / research-institute)
(l / locate-01, location, c / city)
(n / name, op, "Institute")
(n / name, op, "International")
(n / name, op, "Strategic")
(n / name, op, "Studies")
(n / name, op, "for")
(n2 / name, op, "London")
(r / research-institute, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(2, 1, 0),London,(city :name (name :op "London")),false), Span(1,6,List(9, 8, 7, 6, 5, 4, 3),International Institute for Strategic Studies,(organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies")),false)),Map(2 -> "London", 5 -> "International", 8 -> "Strategic", 7 -> "for", 1 -> name, 4 -> name, 6 -> "Institute", 9 -> "Studies", 0 -> city, 3 -> organization),Map(n -> name, c -> city, o -> organization, n2 -> name))),[Ljava.lang.String;@2555fff0,Annotation([Ljava.lang.String;@70d2e40b,[Ljava.lang.String;@120f38e6,[Ljava.lang.String;@7a0e1b5e),Annotation([Ljava.lang.String;@702ed190,[Ljava.lang.String;@173b9122,[Ledu.cmu.lti.nlp.amr.Dependency;@7c18432b),Annotation([Ljava.lang.String;@7646731d,[Ljava.lang.String;@70e29e14,[Ljava.lang.String;@3b1bb3ab),Annotation([Ljava.lang.String;@5a4bef8,[Ljava.lang.String;@40bffbca,[Ledu.cmu.lti.nlp.amr.Entity;@2449cff7))
AMR:
(c / city, name, n / name)
(c / city, poss, o / organization)
(n / name, op, "London")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Strategic")
(n2 / name, op, "Studies")
(n2 / name, op, "for")
(o / organization, name, n2 / name)

Decoded in 29,090 microseconds
Sentence: Plutonium is a material that can be used to make nuclear weapons.

Spans:
Span 5-6:  can => possible
Span 3-4:  material => material
Span 10-11:  nuclear => nucleus
Span 0-1:  Plutonium => plutonium
Span 7-8:  used => use-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  can => possible
Oracle Span 9-10:  make => make-01
Oracle Span 3-4:  material => material
Oracle Span 10-11:  nuclear => nucleus
Oracle Span 0-1:  Plutonium => plutonium
Oracle Span 7-8:  used => use-01
Oracle Span 11-12:  weapons => weapon

Missing span: make => make-01
Missing span: weapons => weapon
Dependencies:
1	Plutonium	_	NNP	NNP	_	4	nsubj	_	_
2	is	_	VBZ	VBZ	_	4	cop	_	_
3	a	_	DT	DT	_	4	det	_	_
4	material	_	NN	NN	_	0	root	_	_
5	that	_	WDT	WDT	_	8	nsubjpass	_	_
6	can	_	MD	MD	_	8	aux	_	_
7	be	_	VB	VB	_	8	auxpass	_	_
8	used	_	VBN	VBN	_	4	rcmod	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	make	_	VB	VB	_	8	xcomp	_	_
11	nuclear	_	JJ	JJ	_	12	amod	_	_
12	weapons	_	NNS	NNS	_	10	dobj	_	_
13	.	_	.	.	_	4	punct	_	_

Oracle:
(m / material, domain, p2 / plutonium)
(m2 / make-01, ARG1, w / weapon)
(u / use-01, ARG1, m / material)
(u / use-01, ARG2, m2 / make-01)
(u / use-01, mod, p / possible)
(w / weapon, mod, n / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),nuclear,nucleus,false), Span(7,8,List(1),used,use-01,false), Span(5,6,List(2),can,possible,false), Span(3,4,List(3),material,material,false), Span(0,1,List(4),Plutonium,plutonium,false)),Map(2 -> possible, 1 -> use-01, 4 -> plutonium, 0 -> nucleus, 3 -> material),Map(n -> nucleus, p2 -> plutonium, m -> material, p -> possible, u -> use-01))),[Ljava.lang.String;@42a9a63e,Annotation([Ljava.lang.String;@62da83ed,[Ljava.lang.String;@5d8445d7,[Ljava.lang.String;@37d80fe7),Annotation([Ljava.lang.String;@384fc774,[Ljava.lang.String;@e3cee7b,[Ledu.cmu.lti.nlp.amr.Dependency;@71e9a896),Annotation([Ljava.lang.String;@6b9267b,[Ljava.lang.String;@408b35bf,[Ljava.lang.String;@29ad44e3),Annotation([Ljava.lang.String;@15bcf458,[Ljava.lang.String;@5af9926a,[Ledu.cmu.lti.nlp.amr.Entity;@43c67247))
AMR:
(m / material, domain, p2 / plutonium)
(m / material, mod, n / nucleus)
(p / possible, domain, u / use-01)
(u / use-01, ARG1, m / material)

Decoded in 29,018 microseconds
Sentence: The Institute for Science and International Security is a private research organization located in Washington.

NER Entity: (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
NER Entity: (country :name (name :op "Washington"))
Spans:
Span 1-7:  Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Span 11-12:  organization => organization
Span 9-10:  private => private
Span 10-11:  research => research-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-7:  Institute for Science and International Security => (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute"))
Oracle Span 12-13:  located => locate-01
Oracle Span 11-12:  organization => organization
Oracle Span 9-10:  private => private
Oracle Span 10-11:  research => research-01
Oracle Span 14-15:  Washington => (city :name (name :op "Washington"))

Incorrect span: Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Missing span: Institute for Science and International Security => (organization :name (name :op "Security" :op "International" :op "and" :op "Science" :op "for" :op "Institute"))
Missing span: Washington => (city :name (name :op "Washington"))
Missing span: located => locate-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	Institute	_	NNP	NNP	_	12	nsubj	_	_
3	for	_	IN	IN	_	2	prep	_	_
4	Science	_	NNP	NNP	_	7	nn	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	International	_	NNP	NNP	_	4	conj	_	_
7	Security	_	NNP	NNP	_	3	pobj	_	_
8	is	_	VBZ	VBZ	_	12	cop	_	_
9	a	_	DT	DT	_	12	det	_	_
10	private	_	JJ	JJ	_	12	amod	_	_
11	research	_	NN	NN	_	12	nn	_	_
12	organization	_	NN	NN	_	0	root	_	_
13	located	_	VBN	VBN	_	12	vmod	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	Washington	_	NNP	NNP	_	14	pobj	_	_
16	.	_	.	.	_	12	punct	_	_

Oracle:
(c / city, name, n2 / name)
(l / locate-01, ARG1, o / organization)
(l / locate-01, location, c / city)
(n / name, op, "Institute")
(n / name, op, "International")
(n / name, op, "Science")
(n / name, op, "Security")
(n / name, op, "and")
(n / name, op, "for")
(n2 / name, op, "Washington")
(o / organization, domain, o2 / organization)
(o / organization, mod, p / private)
(o / organization, mod, r / research-01)
(o2 / organization, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),organization,organization,false), Span(10,11,List(1),research,research-01,false), Span(9,10,List(2),private,private,false), Span(1,7,List(10, 9, 8, 7, 6, 5, 4, 3),Institute for Science and International Security,(organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false)),Map(2 -> private, 5 -> "Institute", 8 -> "and", 7 -> "Science", 1 -> research-01, 4 -> name, 6 -> "for", 9 -> "International", 0 -> organization, 10 -> "Security", 3 -> organization),Map(n -> name, p -> private, o2 -> organization, r -> research-01, o -> organization))),[Ljava.lang.String;@fac80,Annotation([Ljava.lang.String;@726386ed,[Ljava.lang.String;@649f2009,[Ljava.lang.String;@14bb2297),Annotation([Ljava.lang.String;@69adf72c,[Ljava.lang.String;@797501a,[Ledu.cmu.lti.nlp.amr.Dependency;@1a15b789),Annotation([Ljava.lang.String;@57f791c6,[Ljava.lang.String;@51650883,[Ljava.lang.String;@6c4f9535),Annotation([Ljava.lang.String;@5bd1ceca,[Ljava.lang.String;@30c31dd7,[Ledu.cmu.lti.nlp.amr.Entity;@499b2a5c))
AMR:
(n / name, op, "Institute")
(n / name, op, "International")
(n / name, op, "Science")
(n / name, op, "Security")
(n / name, op, "and")
(n / name, op, "for")
(o / organization, domain, o2 / organization)
(o / organization, mod, p / private)
(o / organization, mod, r / research-01)
(o2 / organization, name, n / name)

Decoded in 47,660 microseconds
Sentence: The International Atomic Energy Agency is based in Vienna.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Vienna"))
Spans:
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  based => base-01
Oracle Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Oracle Span 8-9:  Vienna => (city :name (name :op "Vienna"))

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Missing span: International Atomic Energy Agency => (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International"))
Missing span: Vienna => (city :name (name :op "Vienna"))
Missing span: based => base-01
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	International	_	NNP	NNP	_	5	nn	_	_
3	Atomic	_	NNP	NNP	_	5	nn	_	_
4	Energy	_	NNP	NNP	_	5	nn	_	_
5	Agency	_	NNP	NNP	_	7	nsubjpass	_	_
6	is	_	VBZ	VBZ	_	7	auxpass	_	_
7	based	_	VBN	VBN	_	0	root	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	Vienna	_	NNP	NNP	_	8	pobj	_	_
10	.	_	.	.	_	7	punct	_	_

Oracle:
(b / base-01, ARG1, o / organization)
(b / base-01, location, c / city)
(c / city, name, n2 / name)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Vienna")
(o / organization, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(1,5,List(5, 4, 3, 2, 1, 0),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> "International", 5 -> "Agency", 1 -> name, 4 -> "Energy", 0 -> organization, 3 -> "Atomic"),Map(n -> name, o -> organization))),[Ljava.lang.String;@596df867,Annotation([Ljava.lang.String;@c1fca1e,[Ljava.lang.String;@241a53ef,[Ljava.lang.String;@344344fa),Annotation([Ljava.lang.String;@2db2cd5,[Ljava.lang.String;@70e659aa,[Ledu.cmu.lti.nlp.amr.Dependency;@615f972),Annotation([Ljava.lang.String;@285f09de,[Ljava.lang.String;@73393584,[Ljava.lang.String;@31500940),Annotation([Ljava.lang.String;@1827a871,[Ljava.lang.String;@48e64352,[Ledu.cmu.lti.nlp.amr.Entity;@7249dadf))
AMR:
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)

Decoded in 19,684 microseconds
Sentence: 2007-11-15

mkDayMonthYear(2007-11-15,15,11,2007)
mkDayMonthYear(2007-11-15,15,11,2007)
Spans:
Span 0-1:  2007-11-15 => (date-entity :day 15 :month 11 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2007-11-15 => (date-entity :year 2007 :month 11 :day 15)

Incorrect span: 2007-11-15 => (date-entity :day 15 :month 11 :year 2007)
Missing span: 2007-11-15 => (date-entity :year 2007 :month 11 :day 15)
Dependencies:
1	2007-11-15	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 15)
(d / date-entity, month, 11)
(d / date-entity, year, 2007)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-11-15,(date-entity :day 15 :month 11 :year 2007),false)),Map(2 -> 11, 1 -> 15, 0 -> date-entity, 3 -> 2007),Map(2 -> 2007, 12 -> 11, d -> date-entity, 1 -> 15))),[Ljava.lang.String;@4362d7df,Annotation([Ljava.lang.String;@66238be2,[Ljava.lang.String;@1c25b8a7,[Ljava.lang.String;@200606de),Annotation([Ljava.lang.String;@750fe12e,[Ljava.lang.String;@f8908f6,[Ledu.cmu.lti.nlp.amr.Dependency;@3e587920),Annotation([Ljava.lang.String;@2ef8a8c3,[Ljava.lang.String;@24f43aa3,[Ljava.lang.String;@63fd4873),Annotation([Ljava.lang.String;@1e11bc55,[Ljava.lang.String;@7544a1e4,[Ledu.cmu.lti.nlp.amr.Entity;@70e0accd))
AMR:
(d / date-entity, day, 1 / 15)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 2 / 2007)

Decoded in 8,832 microseconds
Sentence: Iran (Islamic Republic of) (IR)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic" :op "of"))
NER Entity: (organization :name (name :op "IR"))
Spans:
Span 0-5:  Iran ( Islamic Republic of => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
WARNING ADDING ANOTHER SPAN TO NODE 0.0.1
ArrayBuffer(0) + 1
WARNING ADDING ANOTHER SPAN TO NODE 0.0.2
ArrayBuffer(0) + 2
WARNING ADDING ANOTHER SPAN TO NODE 0.0.3
ArrayBuffer(0) + 3
Oracle Span 0-1:  Iran => "Iran"
Oracle Span 0-5:  Iran ( Islamic Republic of => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))
Oracle Span 4-5:  of => "of"
Oracle Span 3-4:  Republic => "Republic"

Missing span: Republic => "Republic"
Missing span: of => "of"
Missing span: Iran => "Iran"
Dependencies:
1	Iran	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	4	punct	_	_
3	Islamic	_	NNP	NNP	_	4	nn	_	_
4	Republic	_	NNP	NNP	_	1	dep	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	)	_	)	)	_	4	punct	_	_
7	(	_	(	(	_	8	punct	_	_
8	IR	_	NNP	NNP	_	1	appos	_	_
9	)	_	)	)	_	8	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Islamic")
(n / name, op, I / "Iran")
(n / name, op, R / "Republic")
(n / name, op, o / "of")

Input(Some(Graph(null,ArrayBuffer(Span(0,5,List(5, 4, 3, 2, 1, 0),Iran ( Islamic Republic of,(country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic")),false)),Map(2 -> "Iran", 5 -> "Islamic", 1 -> name, 4 -> "Republic", 0 -> country, 3 -> "of"),Map(n -> name, c -> country))),[Ljava.lang.String;@7957dc72,Annotation([Ljava.lang.String;@6ab72419,[Ljava.lang.String;@3aacf32a,[Ljava.lang.String;@4fdfa676),Annotation([Ljava.lang.String;@82c57b3,[Ljava.lang.String;@5be82d43,[Ledu.cmu.lti.nlp.amr.Dependency;@600b0b7),Annotation([Ljava.lang.String;@345e5a17,[Ljava.lang.String;@5ea502e0,[Ljava.lang.String;@443dbe42),Annotation([Ljava.lang.String;@473b3b7a,[Ljava.lang.String;@1734f68,[Ledu.cmu.lti.nlp.amr.Entity;@77b7ffa4))
AMR:
(c / country, name, n / name)
(n / name, op, "Iran")
(n / name, op, "Islamic")
(n / name, op, "Republic")
(n / name, op, "of")

Decoded in 16,147 microseconds
Sentence: proliferation; international; business

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  business => business

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 4-5:  business => business
Oracle Span 2-3:  international => international
Oracle Span 0-1:  proliferation => proliferate-01

Extra span: ; => and
Missing span: international => international
Missing span: proliferation => proliferate-01
Dependencies:
1	proliferation	_	NN	NN	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	international	_	JJ	JJ	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	business	_	NN	NN	_	3	dep	_	_

Oracle:
(a / and, op, b / business)
(a / and, op, i / international)
(a / and, op, p / proliferate-01)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),business,business,false), Span(3,4,List(1),;,and,false), Span(1,2,List(2),;,and,false)),Map(2 -> and, 1 -> and, 0 -> business),Map(b -> business, a -> and, a2 -> and))),[Ljava.lang.String;@5ed190be,Annotation([Ljava.lang.String;@402f80f5,[Ljava.lang.String;@5bbc9f97,[Ljava.lang.String;@133e019b),Annotation([Ljava.lang.String;@41382722,[Ljava.lang.String;@7dac3fd8,[Ledu.cmu.lti.nlp.amr.Dependency;@425357dd),Annotation([Ljava.lang.String;@2102a4d5,[Ljava.lang.String;@210386e0,[Ljava.lang.String;@3d4d3fe7),Annotation([Ljava.lang.String;@65f87a2c,[Ljava.lang.String;@51684e4a,[Ledu.cmu.lti.nlp.amr.Entity;@6ce1f601))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, b / business)

Decoded in 18,334 microseconds
Sentence: A list from the Nuclear Suppliers Group shows that Iran has been denied purchases of nuclear-related materials approximately 75 times since 1998 because of suspicions the purchases could have been used for building bombs.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 23-24:  1998 => (date-entity :year 1998)
Span 20-21:  75 => 75
Span 24-25:  because => cause-01
Span 35-36:  bombs => bomb
Span 29-30:  could => possible
Span 12-13:  denied => deny-01
Span 18-19:  materials => material
Span 15-16:  nuclear => nucleus
Span 4-7:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 28-29:  purchases => purchase-01
Span 13-14:  purchases => purchase-01
Span 17-18:  related => relate-01
Span 22-23:  since => since
Span 26-27:  suspicions => suspect-01
Span 32-33:  used => use-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 23-24:  1998 => (date-entity :year 1998)
Oracle Span 20-21:  75 => 75
Oracle Span 19-20:  approximately => approximately
Oracle Span 24-25:  because => cause-01
Oracle Span 35-36:  bombs => bomb
Oracle Span 34-35:  building => build-01
Oracle Span 29-30:  could => possible
Oracle Span 12-13:  denied => deny-01
Oracle Span 9-10:  Iran => (country :name (name :op "Iran"))
Oracle Span 1-2:  list => list
Oracle Span 18-19:  materials => material
Oracle Span 15-16:  nuclear => nucleus
Oracle Span 4-7:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 13-14:  purchases => purchase-01
Oracle Span 17-18:  related => relate-01
Oracle Span 7-8:  shows => show-01
Oracle Span 22-23:  since => since
Oracle Span 26-27:  suspicions => suspect-01
Oracle Span 32-33:  used => use-01

Extra span: purchases => purchase-01
Incorrect span: Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: shows => show-01
Missing span: approximately => approximately
Missing span: building => build-01
Missing span: list => list
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	list	_	NN	NN	_	8	nsubj	_	_
3	from	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	7	det	_	_
5	Nuclear	_	NNP	NNP	_	7	nn	_	_
6	Suppliers	_	NNP	NNP	_	7	nn	_	_
7	Group	_	NNP	NNP	_	3	pobj	_	_
8	shows	_	VBZ	VBZ	_	0	root	_	_
9	that	_	IN	IN	_	13	mark	_	_
10	Iran	_	NNP	NNP	_	13	nsubjpass	_	_
11	has	_	VBZ	VBZ	_	13	aux	_	_
12	been	_	VBN	VBN	_	13	auxpass	_	_
13	denied	_	VBN	VBN	_	8	ccomp	_	_
14	purchases	_	NNS	NNS	_	13	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	nuclear-related	_	JJ	JJ	_	17	amod	_	_
17	materials	_	NNS	NNS	_	15	pobj	_	_
18	approximately	_	RB	RB	_	19	quantmod	_	_
19	75	_	CD	CD	_	20	num	_	_
20	times	_	NNS	NNS	_	21	npadvmod	_	_
21	since	_	IN	IN	_	13	prep	_	_
22	1998	_	CD	CD	_	21	pobj	_	_
23	because	_	IN	IN	_	31	mark	_	_
24	of	_	IN	IN	_	31	prep	_	_
25	suspicions	_	NNS	NNS	_	24	pobj	_	_
26	the	_	DT	DT	_	27	det	_	_
27	purchases	_	NNS	NNS	_	31	nsubjpass	_	_
28	could	_	MD	MD	_	31	aux	_	_
29	have	_	VB	VB	_	31	aux	_	_
30	been	_	VBN	VBN	_	31	auxpass	_	_
31	used	_	VBN	VBN	_	13	advcl	_	_
32	for	_	IN	IN	_	31	prep	_	_
33	building	_	NN	NN	_	34	nn	_	_
34	bombs	_	NNS	NNS	_	32	pobj	_	_
35	.	_	.	.	_	8	punct	_	_

Oracle:
(a / approximately, op, 7 / 75)
(b / build-01, ARG1, b2 / bomb)
(c / country, name, n2 / name)
(c2 / cause-01, ARG0, s3 / suspect-01)
(c2 / cause-01, ARG1, d / deny-01)
(d / deny-01, ARG1, p / purchase-01)
(d / deny-01, ARG2, c / country)
(d / deny-01, frequency, a / approximately)
(d / deny-01, time, s2 / since)
(d2 / date-entity, year, 1998)
(l / list, source, o / organization)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(n2 / name, op, "Iran")
(o / organization, name, n / name)
(p / purchase-01, ARG0, c / country)
(p / purchase-01, ARG1, m / material)
(p2 / possible, domain, u / use-01)
(r / relate-01, ARG1, m / material)
(r / relate-01, ARG2, n3 / nucleus)
(s / show-01, ARG0, l / list)
(s / show-01, ARG1, d / deny-01)
(s2 / since, op, d2 / date-entity)
(s3 / suspect-01, ARG1, p2 / possible)
(u / use-01, ARG1, p / purchase-01)
(u / use-01, ARG2, b / build-01)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),bombs,bomb,false), Span(32,33,List(1),used,use-01,false), Span(29,30,List(2),could,possible,false), Span(28,29,List(3),purchases,purchase-01,false), Span(26,27,List(4),suspicions,suspect-01,false), Span(24,25,List(5),because,cause-01,false), Span(23,24,List(7, 6),1998,(date-entity :year 1998),false), Span(22,23,List(8),since,since,false), Span(20,21,List(9),75,75,false), Span(18,19,List(10),materials,material,false), Span(17,18,List(11),related,relate-01,false), Span(15,16,List(12),nuclear,nucleus,false), Span(13,14,List(13),purchases,purchase-01,false), Span(12,13,List(14),denied,deny-01,false), Span(4,7,List(19, 18, 17, 16, 15),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> possible, 5 -> cause-01, 12 -> nucleus, 15 -> organization, 8 -> since, 18 -> "Suppliers", 7 -> 1998, 17 -> "Nuclear", 1 -> use-01, 4 -> suspect-01, 11 -> relate-01, 14 -> deny-01, 6 -> date-entity, 0 -> bomb, 9 -> 75, 16 -> name, 19 -> "Group", 3 -> purchase-01, 10 -> material, 13 -> purchase-01),Map(n -> nucleus, s2 -> since, b -> bomb, p2 -> purchase-01, s -> suspect-01, d -> date-entity, 7 -> 75, m -> material, 1 -> 1998, p -> possible, d2 -> deny-01, r -> relate-01, c -> cause-01, u -> use-01, o -> organization, p3 -> purchase-01, n2 -> name))),[Ljava.lang.String;@38875e7d,Annotation([Ljava.lang.String;@1e886a5b,[Ljava.lang.String;@d816dde,[Ljava.lang.String;@6e33c391),Annotation([Ljava.lang.String;@6c451c9c,[Ljava.lang.String;@31c269fd,[Ledu.cmu.lti.nlp.amr.Dependency;@372b0d86),Annotation([Ljava.lang.String;@47747fb9,[Ljava.lang.String;@3113a37,[Ljava.lang.String;@213e3629),Annotation([Ljava.lang.String;@4e9658b5,[Ljava.lang.String;@2a7b6f69,[Ledu.cmu.lti.nlp.amr.Entity;@20312893))
AMR:
(c / cause-01, ARG0, p / possible)
(c / cause-01, ARG1, d2 / deny-01)
(d / date-entity, year, 1 / 1998)
(d2 / deny-01, ARG0, o / organization)
(d2 / deny-01, ARG1, p3 / purchase-01)
(d2 / deny-01, time, s2 / since)
(n2 / name, op, "Group")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Suppliers")
(o / organization, name, n2 / name)
(p / possible, condition, s / suspect-01)
(p2 / purchase-01, ARG1, 7 / 75)
(p3 / purchase-01, ARG1, m / material)
(r / relate-01, ARG1, m / material)
(r / relate-01, ARG2, n / nucleus)
(s2 / since, op, d / date-entity)
(u / use-01, ARG1, p2 / purchase-01)
(u / use-01, ARG2, b / bomb)
(u / use-01, mod, p / possible)

Decoded in 1,068,709 microseconds
Sentence: A list from the Nuclear Suppliers Group shows that Iran has been denied purchases of nuclear-related materials approximately 75 times since 1998 because of suspicions the purchases could have been used for building bombs.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 23-24:  1998 => (date-entity :year 1998)
Span 20-21:  75 => 75
Span 24-25:  because => cause-01
Span 35-36:  bombs => bomb
Span 29-30:  could => possible
Span 12-13:  denied => deny-01
Span 18-19:  materials => material
Span 15-16:  nuclear => nucleus
Span 4-7:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 28-29:  purchases => purchase-01
Span 13-14:  purchases => purchase-01
Span 17-18:  related => relate-01
Span 22-23:  since => since
Span 26-27:  suspicions => suspect-01
Span 32-33:  used => use-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 23-24:  1998 => (date-entity :year 1998)
Oracle Span 20-21:  75 => 75
Oracle Span 19-20:  approximately => approximately
Oracle Span 24-25:  because => cause-01
Oracle Span 35-36:  bombs => bomb
Oracle Span 34-35:  building => build-01
Oracle Span 29-30:  could => possible
Oracle Span 12-13:  denied => deny-01
Oracle Span 9-10:  Iran => (country :name (name :op "Iran"))
Oracle Span 1-2:  list => list
Oracle Span 18-19:  materials => material
Oracle Span 15-16:  nuclear => nucleus
Oracle Span 4-7:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 13-14:  purchases => purchase-01
Oracle Span 17-18:  related => relate-01
Oracle Span 7-8:  shows => show-01
Oracle Span 22-23:  since => since
Oracle Span 26-27:  suspicions => suspect-01
Oracle Span 32-33:  used => use-01

Extra span: purchases => purchase-01
Incorrect span: Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: shows => show-01
Missing span: approximately => approximately
Missing span: building => build-01
Missing span: list => list
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	list	_	NN	NN	_	8	nsubj	_	_
3	from	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	7	det	_	_
5	Nuclear	_	NNP	NNP	_	7	nn	_	_
6	Suppliers	_	NNP	NNP	_	7	nn	_	_
7	Group	_	NNP	NNP	_	3	pobj	_	_
8	shows	_	VBZ	VBZ	_	0	root	_	_
9	that	_	IN	IN	_	13	mark	_	_
10	Iran	_	NNP	NNP	_	13	nsubjpass	_	_
11	has	_	VBZ	VBZ	_	13	aux	_	_
12	been	_	VBN	VBN	_	13	auxpass	_	_
13	denied	_	VBN	VBN	_	8	ccomp	_	_
14	purchases	_	NNS	NNS	_	13	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	nuclear-related	_	JJ	JJ	_	17	amod	_	_
17	materials	_	NNS	NNS	_	15	pobj	_	_
18	approximately	_	RB	RB	_	19	quantmod	_	_
19	75	_	CD	CD	_	20	num	_	_
20	times	_	NNS	NNS	_	21	npadvmod	_	_
21	since	_	IN	IN	_	13	prep	_	_
22	1998	_	CD	CD	_	21	pobj	_	_
23	because	_	IN	IN	_	31	mark	_	_
24	of	_	IN	IN	_	31	prep	_	_
25	suspicions	_	NNS	NNS	_	24	pobj	_	_
26	the	_	DT	DT	_	27	det	_	_
27	purchases	_	NNS	NNS	_	31	nsubjpass	_	_
28	could	_	MD	MD	_	31	aux	_	_
29	have	_	VB	VB	_	31	aux	_	_
30	been	_	VBN	VBN	_	31	auxpass	_	_
31	used	_	VBN	VBN	_	13	advcl	_	_
32	for	_	IN	IN	_	31	prep	_	_
33	building	_	NN	NN	_	34	nn	_	_
34	bombs	_	NNS	NNS	_	32	pobj	_	_
35	.	_	.	.	_	8	punct	_	_

Oracle:
(a / approximately, op, 7 / 75)
(b / build-01, ARG1, b2 / bomb)
(c / country, name, n2 / name)
(c2 / cause-01, ARG0, s3 / suspect-01)
(c2 / cause-01, ARG1, d / deny-01)
(d / deny-01, ARG1, p / purchase-01)
(d / deny-01, ARG2, c / country)
(d / deny-01, frequency, a / approximately)
(d / deny-01, time, s2 / since)
(d2 / date-entity, year, 1998)
(l / list, source, o / organization)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(n2 / name, op, "Iran")
(o / organization, name, n / name)
(p / purchase-01, ARG0, c / country)
(p / purchase-01, ARG1, m / material)
(p2 / possible, domain, u / use-01)
(r / relate-01, ARG1, m / material)
(r / relate-01, ARG2, n3 / nucleus)
(s / show-01, ARG0, l / list)
(s / show-01, ARG1, d / deny-01)
(s2 / since, op, d2 / date-entity)
(s3 / suspect-01, ARG1, p2 / possible)
(u / use-01, ARG1, p / purchase-01)
(u / use-01, ARG2, b / build-01)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),bombs,bomb,false), Span(32,33,List(1),used,use-01,false), Span(29,30,List(2),could,possible,false), Span(28,29,List(3),purchases,purchase-01,false), Span(26,27,List(4),suspicions,suspect-01,false), Span(24,25,List(5),because,cause-01,false), Span(23,24,List(7, 6),1998,(date-entity :year 1998),false), Span(22,23,List(8),since,since,false), Span(20,21,List(9),75,75,false), Span(18,19,List(10),materials,material,false), Span(17,18,List(11),related,relate-01,false), Span(15,16,List(12),nuclear,nucleus,false), Span(13,14,List(13),purchases,purchase-01,false), Span(12,13,List(14),denied,deny-01,false), Span(4,7,List(19, 18, 17, 16, 15),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> possible, 5 -> cause-01, 12 -> nucleus, 15 -> organization, 8 -> since, 18 -> "Suppliers", 7 -> 1998, 17 -> "Nuclear", 1 -> use-01, 4 -> suspect-01, 11 -> relate-01, 14 -> deny-01, 6 -> date-entity, 0 -> bomb, 9 -> 75, 16 -> name, 19 -> "Group", 3 -> purchase-01, 10 -> material, 13 -> purchase-01),Map(n -> nucleus, s2 -> since, b -> bomb, p2 -> purchase-01, s -> suspect-01, d -> date-entity, 7 -> 75, m -> material, 1 -> 1998, p -> possible, d2 -> deny-01, r -> relate-01, c -> cause-01, u -> use-01, o -> organization, p3 -> purchase-01, n2 -> name))),[Ljava.lang.String;@70eecdc2,Annotation([Ljava.lang.String;@c41709a,[Ljava.lang.String;@7db0565c,[Ljava.lang.String;@54ec8cc9),Annotation([Ljava.lang.String;@52eacb4b,[Ljava.lang.String;@5528a42c,[Ledu.cmu.lti.nlp.amr.Dependency;@2a551a63),Annotation([Ljava.lang.String;@1a6f5124,[Ljava.lang.String;@1edb61b1,[Ljava.lang.String;@ec2bf82),Annotation([Ljava.lang.String;@cc62a3b,[Ljava.lang.String;@6cc0bcf6,[Ledu.cmu.lti.nlp.amr.Entity;@29539e36))
AMR:
(c / cause-01, ARG0, p / possible)
(c / cause-01, ARG1, d2 / deny-01)
(d / date-entity, year, 1 / 1998)
(d2 / deny-01, ARG0, o / organization)
(d2 / deny-01, ARG1, p3 / purchase-01)
(d2 / deny-01, time, s2 / since)
(n2 / name, op, "Group")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Suppliers")
(o / organization, name, n2 / name)
(p / possible, condition, s / suspect-01)
(p2 / purchase-01, ARG1, 7 / 75)
(p3 / purchase-01, ARG1, m / material)
(r / relate-01, ARG1, m / material)
(r / relate-01, ARG2, n / nucleus)
(s2 / since, op, d / date-entity)
(u / use-01, ARG1, p2 / purchase-01)
(u / use-01, ARG2, b / bomb)
(u / use-01, mod, p / possible)

Decoded in 1,069,589 microseconds
Sentence: The 45-nation Nuclear Suppliers Group is an offshoot of the Nuclear Nonproliferation Treaty and is charged with monitoring international trade to ensure that nuclear technology transferred for peaceful purposes is not directed to military use.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
Spans:
Span 2-5:  - nation Nuclear => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 1-2:  45 => 45
Span 17-18:  charged => charge-05
Span 33-34:  directed => direct-01
Span 23-24:  ensure => ensure-01
Span 19-20:  monitoring => monitor-01
Span 13-15:  Nonproliferation Treaty => (treaty :name (name :op "Treaty" :op "Nonproliferation"))
Span 25-26:  nuclear => nucleus
Span 10-13:  of the Nuclear => (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
Span 29-30:  peaceful => peaceful
Span 30-31:  purposes => purpose
Span 26-27:  technology => technology
Span 21-22:  trade => trade-01
Span 27-28:  transferred => transfer-01
Span 36-37:  use => use-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 1-2:  45 => 45
Oracle Span 15-16:  and => and
Oracle Span 17-18:  charged => charge-05
Oracle Span 33-34:  directed => direct-01
Oracle Span 23-24:  ensure => ensure-01
Oracle Span 20-21:  international => international
Oracle Span 35-36:  military => military
Oracle Span 19-20:  monitoring => monitor-01
Oracle Span 3-4:  nation => nation
Oracle Span 25-26:  nuclear => nucleus
Oracle Span 12-15:  Nuclear Nonproliferation Treaty => (treaty :name (name :op "Treaty" :op "Nonproliferation" :op "Nuclear"))
Oracle Span 4-7:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 9-10:  offshoot => offshoot
Oracle Span 29-30:  peaceful => peaceful
Oracle Span 30-31:  purposes => purpose
Oracle Span 26-27:  technology => technology
Oracle Span 21-22:  trade => trade-01
Oracle Span 27-28:  transferred => transfer-01
Oracle Span 36-37:  use => use-01

Extra span: Nonproliferation Treaty => (treaty :name (name :op "Treaty" :op "Nonproliferation"))
Extra span: of the Nuclear => (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
Extra span: - nation Nuclear => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: Nuclear Nonproliferation Treaty => (treaty :name (name :op "Treaty" :op "Nonproliferation" :op "Nuclear"))
Missing span: and => and
Missing span: military => military
Missing span: international => international
Missing span: offshoot => offshoot
Missing span: nation => nation
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	45-nation	_	JJ	JJ	_	5	amod	_	_
3	Nuclear	_	NNP	NNP	_	5	nn	_	_
4	Suppliers	_	NNP	NNP	_	5	nn	_	_
5	Group	_	NNP	NNP	_	8	nsubj	_	_
6	is	_	VBZ	VBZ	_	8	cop	_	_
7	an	_	DT	DT	_	8	det	_	_
8	offshoot	_	NN	NN	_	0	root	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	13	det	_	_
11	Nuclear	_	NNP	NNP	_	13	nn	_	_
12	Nonproliferation	_	NNP	NNP	_	13	nn	_	_
13	Treaty	_	NNP	NNP	_	9	pobj	_	_
14	and	_	CC	CC	_	8	cc	_	_
15	is	_	VBZ	VBZ	_	16	auxpass	_	_
16	charged	_	VBN	VBN	_	8	conj	_	_
17	with	_	IN	IN	_	16	prep	_	_
18	monitoring	_	VBG	VBG	_	17	pcomp	_	_
19	international	_	JJ	JJ	_	20	amod	_	_
20	trade	_	NN	NN	_	18	dobj	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	ensure	_	VB	VB	_	18	vmod	_	_
23	that	_	IN	IN	_	32	mark	_	_
24	nuclear	_	JJ	JJ	_	25	amod	_	_
25	technology	_	NN	NN	_	32	nsubjpass	_	_
26	transferred	_	VBN	VBN	_	25	vmod	_	_
27	for	_	IN	IN	_	26	prep	_	_
28	peaceful	_	JJ	JJ	_	29	amod	_	_
29	purposes	_	NNS	NNS	_	27	pobj	_	_
30	is	_	VBZ	VBZ	_	32	auxpass	_	_
31	not	_	RB	RB	_	32	neg	_	_
32	directed	_	VBN	VBN	_	22	ccomp	_	_
33	to	_	TO	TO	_	32	prep	_	_
34	military	_	JJ	JJ	_	35	amod	_	_
35	use	_	NN	NN	_	33	pobj	_	_
36	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, c / charge-05)
(a / and, op, o / offshoot)
(c / charge-05, ARG1, o2 / organization)
(c / charge-05, ARG2, m / monitor-01)
(d / direct-01, ARG1, t3 / technology)
(d / direct-01, ARG2, u / use-01)
(e / ensure-01, ARG0, o2 / organization)
(e / ensure-01, ARG1, d / direct-01)
(m / monitor-01, ARG0, o2 / organization)
(m / monitor-01, ARG1, t2 / trade-01)
(m / monitor-01, purpose, e / ensure-01)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(n2 / nation, quant, 4 / 45)
(n3 / name, op, "Nonproliferation")
(n3 / name, op, "Nuclear")
(n3 / name, op, "Treaty")
(o / offshoot, domain, o2 / organization)
(o2 / organization, name, n / name)
(p / purpose, mod, p2 / peaceful)
(t / treaty, name, n3 / name)
(t / treaty, part, o / offshoot)
(t2 / trade-01, mod, i / international)
(t3 / technology, mod, n4 / nucleus)
(t4 / transfer-01, ARG1, t3 / technology)
(t4 / transfer-01, purpose, p / purpose)
(u / use-01, mod, m2 / military)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),use,use-01,false), Span(33,34,List(1),directed,direct-01,false), Span(30,31,List(2),purposes,purpose,false), Span(29,30,List(3),peaceful,peaceful,false), Span(27,28,List(4),transferred,transfer-01,false), Span(26,27,List(5),technology,technology,false), Span(25,26,List(6),nuclear,nucleus,false), Span(23,24,List(7),ensure,ensure-01,false), Span(21,22,List(8),trade,trade-01,false), Span(19,20,List(9),monitoring,monitor-01,false), Span(17,18,List(10),charged,charge-05,false), Span(13,15,List(14, 13, 12, 11),Nonproliferation Treaty,(treaty :name (name :op "Treaty" :op "Nonproliferation")),false), Span(10,13,List(19, 18, 17, 16, 15),of the Nuclear,(organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty")),false), Span(2,5,List(24, 23, 22, 21, 20),- nation Nuclear,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(1,2,List(25),45,45,false)),Map(2 -> purpose, 5 -> technology, 12 -> name, 8 -> trade-01, 15 -> organization, 21 -> name, 18 -> "Nonproliferation", 24 -> "Group", 7 -> ensure-01, 1 -> direct-01, 17 -> "Nuclear", 23 -> "Suppliers", 4 -> transfer-01, 11 -> treaty, 14 -> "Nonproliferation", 20 -> organization, 6 -> nucleus, 9 -> monitor-01, 0 -> use-01, 22 -> "Nuclear", 16 -> name, 19 -> "Treaty", 10 -> charge-05, 3 -> peaceful, 25 -> 45, 13 -> "Treaty"),Map(e -> ensure-01, n -> nucleus, t4 -> treaty, t -> transfer-01, p2 -> peaceful, n4 -> name, d -> direct-01, m -> monitor-01, t3 -> trade-01, p -> purpose, 4 -> 45, n3 -> name, o2 -> organization, t2 -> technology, c -> charge-05, u -> use-01, o -> organization, n2 -> name))),[Ljava.lang.String;@32f61a31,Annotation([Ljava.lang.String;@f5c79a6,[Ljava.lang.String;@669253b7,[Ljava.lang.String;@5305c37d),Annotation([Ljava.lang.String;@51a06cbe,[Ljava.lang.String;@3dddbe65,[Ledu.cmu.lti.nlp.amr.Dependency;@49a64d82),Annotation([Ljava.lang.String;@344561e0,[Ljava.lang.String;@66d23e4a,[Ljava.lang.String;@36ac8a63),Annotation([Ljava.lang.String;@4d9d1b69,[Ljava.lang.String;@52c8295b,[Ledu.cmu.lti.nlp.amr.Entity;@251f7d26))
AMR:
(4 / 45, op, o2 / organization)
(c / charge-05, ARG1, o / organization)
(c / charge-05, ARG2, m / monitor-01)
(d / direct-01, ARG1, t2 / technology)
(d / direct-01, ARG2, u / use-01)
(e / ensure-01, ARG0, o2 / organization)
(e / ensure-01, ARG1, d / direct-01)
(m / monitor-01, ARG1, e / ensure-01)
(n2 / name, op, "Nonproliferation")
(n2 / name, op, "Treaty")
(n3 / name, op, "Nonproliferation")
(n3 / name, op, "Nuclear")
(n3 / name, op, "Treaty")
(n4 / name, op, "Group")
(n4 / name, op, "Nuclear")
(n4 / name, op, "Suppliers")
(o / organization, name, n3 / name)
(o2 / organization, name, n4 / name)
(p / purpose, mod, p2 / peaceful)
(t / transfer-01, ARG1, t2 / technology)
(t2 / technology, mod, n / nucleus)
(t3 / trade-01, ARG1, e / ensure-01)
(t4 / treaty, name, n2 / name)
(t4 / treaty, name, n3 / name)
(u / use-01, ARG1, p / purpose)

Decoded in 497,115 microseconds
Sentence: The Nuclear Suppliers Group is composed of technologically advanced countries.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 5-6:  composed => compose-01
Span 9-10:  countries => country
Span 1-4:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 7-8:  technologically => technology

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 8-9:  advanced => advance-01
Oracle Span 5-6:  composed => compose-01
Oracle Span 9-10:  countries => country
Oracle Span 1-4:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 7-8:  technologically => technology

Incorrect span: Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: advanced => advance-01
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Nuclear	_	NNP	NNP	_	4	nn	_	_
3	Suppliers	_	NNP	NNP	_	4	nn	_	_
4	Group	_	NNP	NNP	_	6	nsubjpass	_	_
5	is	_	VBZ	VBZ	_	6	auxpass	_	_
6	composed	_	VBN	VBN	_	0	root	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	technologically	_	RB	RB	_	9	advmod	_	_
9	advanced	_	VBN	VBN	_	10	amod	_	_
10	countries	_	NNS	NNS	_	7	pobj	_	_
11	.	_	.	.	_	6	punct	_	_

Oracle:
(a / advance-01, ARG1, c2 / country)
(a / advance-01, manner, t / technology)
(c / compose-01, ARG1, o / organization)
(c / compose-01, ARG2, c2 / country)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),countries,country,false), Span(7,8,List(1),technologically,technology,false), Span(5,6,List(2),composed,compose-01,false), Span(1,4,List(7, 6, 5, 4, 3),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> compose-01, 5 -> "Nuclear", 7 -> "Group", 1 -> technology, 4 -> name, 6 -> "Suppliers", 0 -> country, 3 -> organization),Map(n -> name, t -> technology, c -> country, o -> organization, c2 -> compose-01))),[Ljava.lang.String;@77b21474,Annotation([Ljava.lang.String;@52d10fb8,[Ljava.lang.String;@41c07648,[Ljava.lang.String;@1fe8d51b),Annotation([Ljava.lang.String;@781e7326,[Ljava.lang.String;@22680f52,[Ledu.cmu.lti.nlp.amr.Dependency;@60d84f61),Annotation([Ljava.lang.String;@39c11e6c,[Ljava.lang.String;@324dcd31,[Ljava.lang.String;@503d56b5),Annotation([Ljava.lang.String;@72bca894,[Ljava.lang.String;@433ffad1,[Ledu.cmu.lti.nlp.amr.Entity;@1fc793c2))
AMR:
(c2 / compose-01, ARG0, c / country)
(c2 / compose-01, ARG1, o / organization)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(t / technology, poss, c / country)

Decoded in 103,767 microseconds
Sentence: According to the Nuclear Suppliers Group's mission statement countries act on an individual basis to block trades that violate export controls devised to maintain international cooperation on peaceful uses of nuclear energy.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 16-17:  block => block-01
Span 21-22:  controls => control-01
Span 26-27:  cooperation => cooperate-01
Span 9-10:  countries => country
Span 22-23:  devised => devise-01
Span 32-33:  energy => energy
Span 20-21:  export => export-01
Span 13-14:  individual => individual
Span 24-25:  maintain => maintain-01
Span 7-8:  mission => mission
Span 31-32:  nuclear => nucleus
Span 3-6:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 28-29:  peaceful => peaceful
Span 29-30:  uses => use-01
Span 19-20:  violate => violate-01

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Oracle Span 10-11:  act => act-02
Oracle Span 14-15:  basis => basis
Oracle Span 16-17:  block => block-01
Oracle Span 21-22:  controls => control-01
Oracle Span 26-27:  cooperation => cooperate-01
Oracle Span 9-10:  countries => country
Oracle Span 22-23:  devised => devise-01
Oracle Span 32-33:  energy => energy
Oracle Span 20-21:  export => export-01
Oracle Span 13-14:  individual => individual
Oracle Span 25-26:  international => international
Oracle Span 24-25:  maintain => maintain-01
Oracle Span 7-8:  mission => mission
Oracle Span 31-32:  nuclear => nucleus
Oracle Span 3-6:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 28-29:  peaceful => peaceful
Oracle Span 8-9:  statement => statement
Oracle Span 17-18:  trades => trade-01
Oracle Span 29-30:  uses => use-01
Oracle Span 19-20:  violate => violate-01

Incorrect span: Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: statement => statement
Missing span: act => act-02
Missing span: trades => trade-01
Missing span: international => international
Missing span: basis => basis
Dependencies:
1	According	_	VBG	VBG	_	11	prep	_	_
2	to	_	TO	TO	_	1	pcomp	_	_
3	the	_	DT	DT	_	5	det	_	_
4	Nuclear	_	JJ	JJ	_	5	amod	_	_
5	Suppliers	_	NNS	NNS	_	2	pobj	_	_
6	Group	_	NNP	NNP	_	10	poss	_	_
7	's	_	POS	POS	_	6	possessive	_	_
8	mission	_	NN	NN	_	10	nn	_	_
9	statement	_	NN	NN	_	10	nn	_	_
10	countries	_	NNS	NNS	_	11	nsubj	_	_
11	act	_	VBP	VBP	_	0	root	_	_
12	on	_	IN	IN	_	11	prep	_	_
13	an	_	DT	DT	_	15	det	_	_
14	individual	_	JJ	JJ	_	15	amod	_	_
15	basis	_	NN	NN	_	12	pobj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	block	_	VB	VB	_	11	xcomp	_	_
18	trades	_	NNS	NNS	_	17	dobj	_	_
19	that	_	WDT	WDT	_	20	nsubj	_	_
20	violate	_	VBP	VBP	_	18	rcmod	_	_
21	export	_	NN	NN	_	22	nn	_	_
22	controls	_	NNS	NNS	_	20	dobj	_	_
23	devised	_	VBN	VBN	_	22	vmod	_	_
24	to	_	TO	TO	_	25	aux	_	_
25	maintain	_	VB	VB	_	23	xcomp	_	_
26	international	_	JJ	JJ	_	27	amod	_	_
27	cooperation	_	NN	NN	_	25	dobj	_	_
28	on	_	IN	IN	_	25	prep	_	_
29	peaceful	_	JJ	JJ	_	30	amod	_	_
30	uses	_	NNS	NNS	_	28	pobj	_	_
31	of	_	IN	IN	_	30	prep	_	_
32	nuclear	_	JJ	JJ	_	33	amod	_	_
33	energy	_	NN	NN	_	31	pobj	_	_
34	.	_	.	.	_	11	punct	_	_

Oracle:
(a / act-02, ARG0, c / country)
(a / act-02, manner, b / basis)
(a / act-02, purpose, b2 / block-01)
(b / basis, mod, i / individual)
(b2 / block-01, ARG0, c / country)
(b2 / block-01, ARG1, t / trade-01)
(c2 / control-01, ARG1, e / export-01)
(c3 / cooperate-01, ARG2, u / use-01)
(c3 / cooperate-01, mod, i2 / international)
(d / devise-01, ARG1, c2 / control-01)
(d / devise-01, ARG2, m2 / maintain-01)
(e2 / energy, mod, n2 / nucleus)
(m2 / maintain-01, ARG0, c2 / control-01)
(m2 / maintain-01, ARG1, c3 / cooperate-01)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(s2 / statement, mod, m / mission)
(s2 / statement, poss, o / organization)
(u / use-01, ARG1, e2 / energy)
(u / use-01, mod, p / peaceful)
(v / violate-01, ARG0, t / trade-01)
(v / violate-01, ARG1, c2 / control-01)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),energy,energy,false), Span(31,32,List(1),nuclear,nucleus,false), Span(29,30,List(2),uses,use-01,false), Span(28,29,List(3),peaceful,peaceful,false), Span(26,27,List(4),cooperation,cooperate-01,false), Span(24,25,List(5),maintain,maintain-01,false), Span(22,23,List(6),devised,devise-01,false), Span(21,22,List(7),controls,control-01,false), Span(20,21,List(8),export,export-01,false), Span(19,20,List(9),violate,violate-01,false), Span(16,17,List(10),block,block-01,false), Span(13,14,List(11),individual,individual,false), Span(9,10,List(12),countries,country,false), Span(7,8,List(13),mission,mission,false), Span(3,6,List(18, 17, 16, 15, 14),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> use-01, 5 -> maintain-01, 12 -> country, 15 -> name, 8 -> export-01, 18 -> "Group", 7 -> control-01, 17 -> "Suppliers", 1 -> nucleus, 4 -> cooperate-01, 11 -> individual, 14 -> organization, 6 -> devise-01, 0 -> energy, 9 -> violate-01, 16 -> "Nuclear", 3 -> peaceful, 10 -> block-01, 13 -> mission),Map(e -> energy, n -> nucleus, b -> block-01, m2 -> mission, e2 -> export-01, v -> violate-01, m -> maintain-01, d -> devise-01, p -> peaceful, c3 -> country, i -> individual, c -> cooperate-01, u -> use-01, o -> organization, n2 -> name, c2 -> control-01))),[Ljava.lang.String;@2575f671,Annotation([Ljava.lang.String;@329a1243,[Ljava.lang.String;@ecf9fb3,[Ljava.lang.String;@2d35442b),Annotation([Ljava.lang.String;@27f9e982,[Ljava.lang.String;@4593ff34,[Ledu.cmu.lti.nlp.amr.Dependency;@37d3d232),Annotation([Ljava.lang.String;@30c0ccff,[Ljava.lang.String;@581d969c,[Ljava.lang.String;@22db8f4),Annotation([Ljava.lang.String;@2b46a8c1,[Ljava.lang.String;@1d572e62,[Ledu.cmu.lti.nlp.amr.Entity;@29caf222))
AMR:
(b / block-01, ARG0, c3 / country)
(b / block-01, ARG1, v / violate-01)
(c / cooperate-01, ARG1, u / use-01)
(c / cooperate-01, mod, i / individual)
(c2 / control-01, ARG1, e2 / export-01)
(c3 / country, poss, o / organization)
(d / devise-01, ARG1, c2 / control-01)
(d / devise-01, ARG2, m / maintain-01)
(e / energy, mod, n / nucleus)
(m / maintain-01, ARG1, c / cooperate-01)
(m2 / mission, poss, o / organization)
(n2 / name, op, "Group")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Suppliers")
(o / organization, name, n2 / name)
(u / use-01, ARG1, e / energy)
(u / use-01, manner, p / peaceful)
(v / violate-01, ARG1, c2 / control-01)

Decoded in 1,164,541 microseconds
Sentence: The Nuclear Suppliers Group has no enforcement power beyond notifying companies of violating the group's guidelines.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 8-9:  beyond => beyond
Span 10-11:  companies => company
Span 6-7:  enforcement => enforce-01
Span 16-17:  guidelines => guideline
Span 5-6:  no => -
Span 9-10:  notifying => notify-01
Span 1-4:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 7-8:  power => power
Span 12-13:  violating => violate-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 8-9:  beyond => beyond
Oracle Span 10-11:  companies => company
Oracle Span 6-7:  enforcement => enforce-01
Oracle Span 16-17:  guidelines => guideline
Oracle Span 4-5:  has => have-03
Oracle Span 5-6:  no => -
Oracle Span 9-10:  notifying => notify-01
Oracle Span 1-4:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 7-8:  power => power
Oracle Span 12-13:  violating => violate-01

Incorrect span: Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: has => have-03
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Nuclear	_	NNP	NNP	_	4	nn	_	_
3	Suppliers	_	NNP	NNP	_	4	nn	_	_
4	Group	_	NNP	NNP	_	5	nsubj	_	_
5	has	_	VBZ	VBZ	_	0	root	_	_
6	no	_	DT	DT	_	8	neg	_	_
7	enforcement	_	NN	NN	_	8	nn	_	_
8	power	_	NN	NN	_	5	dobj	_	_
9	beyond	_	IN	IN	_	8	prep	_	_
10	notifying	_	VBG	VBG	_	9	pcomp	_	_
11	companies	_	NNS	NNS	_	10	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	violating	_	VBG	VBG	_	12	pcomp	_	_
14	the	_	DT	DT	_	15	det	_	_
15	group	_	NN	NN	_	17	poss	_	_
16	's	_	POS	POS	_	15	possessive	_	_
17	guidelines	_	NNS	NNS	_	13	dobj	_	_
18	.	_	.	.	_	5	punct	_	_

Oracle:
(b / beyond, op, n2 / notify-01)
(g / guideline, poss, o / organization)
(h / have-03, ARG0, o / organization)
(h / have-03, ARG1, p / power)
(h / have-03, polarity, - / -)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(n2 / notify-01, ARG0, o / organization)
(n2 / notify-01, ARG1, c / company)
(n2 / notify-01, ARG2, v / violate-01)
(o / organization, name, n / name)
(p / power, mod, b / beyond)
(p / power, mod, e / enforce-01)
(v / violate-01, ARG0, c / company)
(v / violate-01, ARG1, g / guideline)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),guidelines,guideline,false), Span(12,13,List(1),violating,violate-01,false), Span(10,11,List(2),companies,company,false), Span(9,10,List(3),notifying,notify-01,false), Span(8,9,List(4),beyond,beyond,false), Span(7,8,List(5),power,power,false), Span(6,7,List(6),enforcement,enforce-01,false), Span(5,6,List(7),no,-,false), Span(1,4,List(12, 11, 10, 9, 8),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> company, 5 -> power, 12 -> "Group", 8 -> organization, 7 -> -, 1 -> violate-01, 4 -> beyond, 11 -> "Suppliers", 6 -> enforce-01, 0 -> guideline, 9 -> name, 3 -> notify-01, 10 -> "Nuclear"),Map(e -> enforce-01, n -> notify-01, b -> beyond, v -> violate-01, p -> power, g -> guideline, - -> -, c -> company, o -> organization, n2 -> name))),[Ljava.lang.String;@46cf05f7,Annotation([Ljava.lang.String;@5851bd4f,[Ljava.lang.String;@7cd1ac19,[Ljava.lang.String;@2f40a43),Annotation([Ljava.lang.String;@3caa4757,[Ljava.lang.String;@69c43e48,[Ledu.cmu.lti.nlp.amr.Dependency;@1804f60d),Annotation([Ljava.lang.String;@3a80515c,[Ljava.lang.String;@547e29a4,[Ljava.lang.String;@1c807b1d),Annotation([Ljava.lang.String;@238b521e,[Ljava.lang.String;@1b39fd82,[Ledu.cmu.lti.nlp.amr.Entity;@3e2fc448))
AMR:
(b / beyond, op, n / notify-01)
(n / notify-01, ARG0, o / organization)
(n / notify-01, ARG1, c / company)
(n2 / name, op, "Group")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Suppliers")
(o / organization, name, n2 / name)
(p / power, mod, e / enforce-01)
(p / power, mod, n / notify-01)
(p / power, polarity, - / -)
(v / violate-01, ARG0, c / company)
(v / violate-01, ARG1, g / guideline)

Decoded in 157,515 microseconds
Sentence: The Nuclear Suppliers Group keeps data private and meets largely in secret.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 5-6:  data => data
Span 9-10:  largely => large
Span 1-4:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 6-7:  private => private
Span 11-12:  secret => secret

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 5-6:  data => data
Oracle Span 4-5:  keeps => keep-02
Oracle Span 9-10:  largely => large
Oracle Span 8-9:  meets => meet-03
Oracle Span 1-4:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 6-7:  private => private
Oracle Span 11-12:  secret => secret

Incorrect span: Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: and => and
Missing span: meets => meet-03
Missing span: keeps => keep-02
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Nuclear	_	NNP	NNP	_	4	nn	_	_
3	Suppliers	_	NNP	NNP	_	4	nn	_	_
4	Group	_	NNP	NNP	_	5	nsubj	_	_
5	keeps	_	VBZ	VBZ	_	0	root	_	_
6	data	_	NNS	NNS	_	7	nsubj	_	_
7	private	_	JJ	JJ	_	5	xcomp	_	_
8	and	_	CC	CC	_	5	cc	_	_
9	meets	_	VBZ	VBZ	_	5	conj	_	_
10	largely	_	RB	RB	_	9	advmod	_	_
11	in	_	IN	IN	_	9	prep	_	_
12	secret	_	NN	NN	_	11	pobj	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, k / keep-02)
(a / and, op, m / meet-03)
(k / keep-02, ARG0, o / organization)
(k / keep-02, ARG1, p / private)
(m / meet-03, ARG0, o / organization)
(m / meet-03, degree, l / large)
(m / meet-03, manner, s / secret)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(p / private, domain, d / data)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),secret,secret,false), Span(9,10,List(1),largely,large,false), Span(6,7,List(2),private,private,false), Span(5,6,List(3),data,data,false), Span(1,4,List(8, 7, 6, 5, 4),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> private, 5 -> name, 8 -> "Group", 7 -> "Suppliers", 1 -> large, 4 -> organization, 6 -> "Nuclear", 0 -> secret, 3 -> data),Map(n -> name, s -> secret, d -> data, p -> private, l -> large, o -> organization))),[Ljava.lang.String;@21680803,Annotation([Ljava.lang.String;@588ab592,[Ljava.lang.String;@c8b96ec,[Ljava.lang.String;@4cc61eb1),Annotation([Ljava.lang.String;@2d8f2f3a,[Ljava.lang.String;@2024293c,[Ledu.cmu.lti.nlp.amr.Dependency;@7048f722),Annotation([Ljava.lang.String;@c074c0c,[Ljava.lang.String;@58a55449,[Ljava.lang.String;@5949eba8),Annotation([Ljava.lang.String;@6e0ff644,[Ljava.lang.String;@58dea0a5,[Ledu.cmu.lti.nlp.amr.Entity;@2a2bb0eb))
AMR:
(d / data, mod, p / private)
(l / large, domain, o / organization)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(o / organization, poss, d / data)
(s / secret, location, o / organization)

Decoded in 38,293 microseconds
Sentence: Most of the denials of purchase have occurred since 2002 and have resulted from interventions by members of the Nuclear Suppliers Group.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 9-10:  2002 => (date-entity :year 2002)
Span 16-17:  members => (have-org-role-91 :ARG2 member)
Span 0-1:  Most => most
Span 19-22:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 5-6:  purchase => purchase-01
Span 12-13:  resulted => result-01
Span 8-9:  since => since

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 9-10:  2002 => (date-entity :year 2002)
Oracle Span 10-11:  and => and
Oracle Span 6-7:  have => have-org-role-91
Oracle Span 14-15:  interventions => intervene-01
Oracle Span 16-17:  members => member
Oracle Span 0-1:  Most => most
Oracle Span 19-22:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 1-2:  of => include-91
Oracle Span 5-6:  purchase => purchase-01
Oracle Span 12-13:  resulted => result-01
Oracle Span 8-9:  since => since

Incorrect span: Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Incorrect span: members => (have-org-role-91 :ARG2 member)
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: and => and
Missing span: members => member
Missing span: of => include-91
Missing span: interventions => intervene-01
Missing span: have => have-org-role-91
Dependencies:
1	Most	_	JJS	JJS	_	8	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	4	det	_	_
4	denials	_	NNS	NNS	_	2	pobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	purchase	_	NN	NN	_	5	pobj	_	_
7	have	_	VBP	VBP	_	8	aux	_	_
8	occurred	_	VBN	VBN	_	0	root	_	_
9	since	_	IN	IN	_	8	prep	_	_
10	2002	_	CD	CD	_	9	pobj	_	_
11	and	_	CC	CC	_	8	cc	_	_
12	have	_	VBP	VBP	_	13	aux	_	_
13	resulted	_	VBN	VBN	_	8	conj	_	_
14	from	_	IN	IN	_	13	prep	_	_
15	interventions	_	NNS	NNS	_	14	pobj	_	_
16	by	_	IN	IN	_	13	prep	_	_
17	members	_	NNS	NNS	_	16	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	22	det	_	_
20	Nuclear	_	NNP	NNP	_	22	nn	_	_
21	Suppliers	_	NNP	NNP	_	22	nn	_	_
22	Group	_	NNP	NNP	_	18	pobj	_	_
23	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, r / result-01)
(d3 / date-entity, year, 2002)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m2 / member)
(n2 / name, op, "Group")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Suppliers")
(o2 / organization, name, n2 / name)
(r / result-01, ARG1, i2 / intervene-01)
(s / since, op, d3 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(19,22,List(4, 3, 2, 1, 0),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(16,17,List(6, 5),members,(have-org-role-91 :ARG2 member),false), Span(12,13,List(7),resulted,result-01,false), Span(9,10,List(9, 8),2002,(date-entity :year 2002),false), Span(8,9,List(10),since,since,false), Span(5,6,List(11),purchase,purchase-01,false), Span(0,1,List(12),Most,most,false)),Map(2 -> "Nuclear", 5 -> have-org-role-91, 12 -> most, 8 -> date-entity, 7 -> result-01, 1 -> name, 4 -> "Group", 11 -> purchase-01, 6 -> member, 0 -> organization, 9 -> 2002, 3 -> "Suppliers", 10 -> since),Map(n -> name, 2 -> 2002, h -> have-org-role-91, m2 -> most, s -> since, d -> date-entity, m -> member, p -> purchase-01, r -> result-01, o -> organization))),[Ljava.lang.String;@3c291aad,Annotation([Ljava.lang.String;@2d0566ba,[Ljava.lang.String;@733037,[Ljava.lang.String;@7728643a),Annotation([Ljava.lang.String;@320e400,[Ljava.lang.String;@5167268,[Ledu.cmu.lti.nlp.amr.Dependency;@1cfd1875),Annotation([Ljava.lang.String;@28c0b664,[Ljava.lang.String;@2c444798,[Ljava.lang.String;@1af7f54a),Annotation([Ljava.lang.String;@6ebd78d1,[Ljava.lang.String;@436390f4,[Ledu.cmu.lti.nlp.amr.Entity;@4d157787))
AMR:
(d / date-entity, year, 2 / 2002)
(h / have-org-role-91, ARG0, s / since)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(p / purchase-01, ARG1, m2 / most)
(r / result-01, ARG0, s / since)
(r / result-01, ARG1, p / purchase-01)
(s / since, op, d / date-entity)

Decoded in 150,725 microseconds
Sentence: The list of trade denials was made available by a diplomat from a country interested in exposing the extent of Iranian efforts to acquire so-called dual-use items that can be converted to weapons production.

NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 23-24:  acquire => acquire-01
Span 7-8:  available => available
Span 32-33:  can => possible
Span 34-35:  converted => convert-01
Span 13-14:  country => country
Span 27-28:  dual => dual
Span 21-22:  efforts => effort
Span 18-19:  extent => extent
Span 14-15:  interested => interest-01
Span 30-31:  items => item
Span 37-38:  production => produce-01
Span 3-4:  trade => trade-01
Span 29-30:  use => use-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 23-24:  acquire => acquire-01
Oracle Span 7-8:  available => available
Oracle Span 26-27:  called => call-01
Oracle Span 32-33:  can => possible
Oracle Span 34-35:  converted => convert-01
Oracle Span 13-14:  country => country
Oracle Span 10-11:  diplomat => (have-org-role-91 :ARG2 diplomat)
Oracle Span 27-28:  dual => dual
Oracle Span 21-22:  efforts => effort
Oracle Span 16-17:  exposing => expose-01
Oracle Span 18-19:  extent => extent
Oracle Span 14-15:  interested => interest-01
Oracle Span 20-21:  Iranian => (country :name (name :op "Iran"))
Oracle Span 30-31:  items => item
Oracle Span 1-2:  list => list
Oracle Span 6-7:  made => make-02
Oracle Span 37-38:  production => produce-01
Oracle Span 24-25:  so => so
Oracle Span 3-4:  trade => trade-01
Oracle Span 29-30:  use => use-01
Oracle Span 36-37:  weapons => weapon

Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: made => make-02
Missing span: list => list
Missing span: exposing => expose-01
Missing span: weapons => weapon
Missing span: called => call-01
Missing span: so => so
Missing span: diplomat => (have-org-role-91 :ARG2 diplomat)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	list	_	NN	NN	_	7	nsubjpass	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	trade	_	NN	NN	_	5	nn	_	_
5	denials	_	NNS	NNS	_	3	pobj	_	_
6	was	_	VBD	VBD	_	7	auxpass	_	_
7	made	_	VBN	VBN	_	0	root	_	_
8	available	_	JJ	JJ	_	7	acomp	_	_
9	by	_	IN	IN	_	8	prep	_	_
10	a	_	DT	DT	_	11	det	_	_
11	diplomat	_	NN	NN	_	9	pobj	_	_
12	from	_	IN	IN	_	7	prep	_	_
13	a	_	DT	DT	_	14	det	_	_
14	country	_	NN	NN	_	12	pobj	_	_
15	interested	_	JJ	JJ	_	14	amod	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	exposing	_	VBG	VBG	_	16	pcomp	_	_
18	the	_	DT	DT	_	19	det	_	_
19	extent	_	NN	NN	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	Iranian	_	JJ	JJ	_	22	amod	_	_
22	efforts	_	NNS	NNS	_	20	pobj	_	_
23	to	_	TO	TO	_	24	aux	_	_
24	acquire	_	VB	VB	_	17	vmod	_	_
25	so-called	_	JJ	JJ	_	27	amod	_	_
26	dual-use	_	JJ	JJ	_	27	amod	_	_
27	items	_	NNS	NNS	_	24	dobj	_	_
28	that	_	WDT	WDT	_	31	nsubjpass	_	_
29	can	_	MD	MD	_	31	aux	_	_
30	be	_	VB	VB	_	31	auxpass	_	_
31	converted	_	VBN	VBN	_	27	rcmod	_	_
32	to	_	TO	TO	_	31	prep	_	_
33	weapons	_	NNS	NNS	_	34	nn	_	_
34	production	_	NN	NN	_	32	pobj	_	_
35	.	_	.	.	_	7	punct	_	_

Oracle:
(a / available, domain, l / list)
(a2 / acquire-01, ARG0, c2 / country)
(a2 / acquire-01, ARG1, i2 / item)
(c2 / country, name, n / name)
(c3 / convert-01, ARG1, i2 / item)
(c3 / convert-01, ARG2, p / produce-01)
(c3 / convert-01, mod, p2 / possible)
(c4 / call-01, ARG1, i2 / item)
(c4 / call-01, mod, s / so)
(e / expose-01, ARG0, c / country)
(e / expose-01, ARG1, e2 / extent)
(e2 / extent, poss, e3 / effort)
(e3 / effort, mod, c2 / country)
(e3 / effort, purpose, a2 / acquire-01)
(h / have-org-role-91, ARG2, d2 / diplomat)
(i / interest-01, ARG1, c / country)
(i / interest-01, ARG2, e / expose-01)
(m / make-02, ARG1, a / available)
(n / name, op, "Iran")
(p / produce-01, ARG1, w / weapon)
(u / use-01, ARG1, i2 / item)
(u / use-01, manner, d3 / dual)

Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),production,produce-01,false), Span(34,35,List(1),converted,convert-01,false), Span(32,33,List(2),can,possible,false), Span(30,31,List(3),items,item,false), Span(29,30,List(4),use,use-01,false), Span(27,28,List(5),dual,dual,false), Span(23,24,List(6),acquire,acquire-01,false), Span(21,22,List(7),efforts,effort,false), Span(18,19,List(8),extent,extent,false), Span(14,15,List(9),interested,interest-01,false), Span(13,14,List(10),country,country,false), Span(7,8,List(11),available,available,false), Span(3,4,List(12),trade,trade-01,false)),Map(2 -> possible, 5 -> dual, 12 -> trade-01, 8 -> extent, 7 -> effort, 1 -> convert-01, 4 -> use-01, 11 -> available, 6 -> acquire-01, 0 -> produce-01, 9 -> interest-01, 3 -> item, 10 -> country),Map(e -> effort, t -> trade-01, p2 -> possible, e2 -> extent, d -> dual, p -> produce-01, a -> acquire-01, i2 -> interest-01, i -> item, a2 -> available, c -> convert-01, u -> use-01, c2 -> country))),[Ljava.lang.String;@68ed96ca,Annotation([Ljava.lang.String;@6d1310f6,[Ljava.lang.String;@3228d990,[Ljava.lang.String;@54e7391d),Annotation([Ljava.lang.String;@50b8ae8d,[Ljava.lang.String;@255990cc,[Ledu.cmu.lti.nlp.amr.Dependency;@51c929ae),Annotation([Ljava.lang.String;@3c8bdd5b,[Ljava.lang.String;@29d2d081,[Ljava.lang.String;@40e4ea87),Annotation([Ljava.lang.String;@58783f6c,[Ljava.lang.String;@3a7b503d,[Ledu.cmu.lti.nlp.amr.Entity;@512d92b))
AMR:
(a / acquire-01, ARG0, e2 / extent)
(a / acquire-01, ARG1, i / item)
(a2 / available, poss, c2 / country)
(c / convert-01, ARG1, i / item)
(c / convert-01, ARG2, p / produce-01)
(c / convert-01, location, c2 / country)
(e / effort, purpose, a / acquire-01)
(i2 / interest-01, ARG1, c2 / country)
(p2 / possible, domain, c / convert-01)
(t / trade-01, ARG1, i2 / interest-01)
(u / use-01, ARG1, i / item)
(u / use-01, mod, d / dual)

Decoded in 287,980 microseconds
Sentence: The list was made available on condition that neither the diplomat nor the diplomat's country be identified.

Spans:
Span 4-5:  available => available
Span 15-16:  country => country
Span 17-18:  identified => identify-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 4-5:  available => available
Oracle Span 6-7:  condition => condition-01
Oracle Span 15-16:  country => country
Oracle Span 10-11:  diplomat => (have-org-role-91 :ARG2 diplomat)
Oracle Span 17-18:  identified => identify-01
Oracle Span 1-2:  list => list
Oracle Span 3-4:  made => make-02

Missing span: made => make-02
Missing span: condition => condition-01
Missing span: diplomat => (have-org-role-91 :ARG2 diplomat)
Missing span: list => list
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	list	_	NN	NN	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	made	_	VBN	VBN	_	0	root	_	_
5	available	_	JJ	JJ	_	4	acomp	_	_
6	on	_	IN	IN	_	5	prep	_	_
7	condition	_	NN	NN	_	6	pobj	_	_
8	that	_	IN	IN	_	18	mark	_	_
9	neither	_	CC	CC	_	11	preconj	_	_
10	the	_	DT	DT	_	11	det	_	_
11	diplomat	_	NN	NN	_	18	nsubjpass	_	_
12	nor	_	CC	CC	_	11	cc	_	_
13	the	_	DT	DT	_	14	det	_	_
14	diplomat	_	NN	NN	_	16	poss	_	_
15	's	_	POS	POS	_	14	possessive	_	_
16	country	_	NN	NN	_	11	conj	_	_
17	be	_	VB	VB	_	18	auxpass	_	_
18	identified	_	VBN	VBN	_	4	ccomp	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(a / available, domain, l / list)
(c / condition-01, ARG1, m / make-02)
(c / condition-01, ARG2, i / identify-01)
(h / have-org-role-91, ARG2, d / diplomat)
(m / make-02, ARG1, a / available)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),identified,identify-01,false), Span(15,16,List(1),country,country,false), Span(4,5,List(2),available,available,false)),Map(2 -> available, 1 -> country, 0 -> identify-01),Map(a -> available, i -> identify-01, c -> country))),[Ljava.lang.String;@62c5bbdc,Annotation([Ljava.lang.String;@7bdf6bb7,[Ljava.lang.String;@1bc53649,[Ljava.lang.String;@88d6f9b),Annotation([Ljava.lang.String;@47d93e0d,[Ljava.lang.String;@475b7792,[Ledu.cmu.lti.nlp.amr.Dependency;@751e664e),Annotation([Ljava.lang.String;@160c3ec1,[Ljava.lang.String;@182b435b,[Ljava.lang.String;@4d0402b),Annotation([Ljava.lang.String;@2fa7ae9,[Ljava.lang.String;@7577b641,[Ledu.cmu.lti.nlp.amr.Entity;@3704122f))
AMR:
(i / identify-01, ARG0, a / available)
(i / identify-01, ARG1, c / country)

Decoded in 45,054 microseconds
Sentence: The list names companies from Australia, Finland, Sweden, the United Arab Emirates and Iran that were prevented from carrying out deals because the items being sold were suspected of being militarily useful.

NER Entity: (country :name (name :op "Australia"))
NER Entity: (country :name (name :op "Finland"))
NER Entity: (country :name (name :op "Sweden"))
NER Entity: (country :name (name :op "United" :op "Arab" :op "Emirates"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Sweden"))
Spans:
Span 24-25:  because => cause-01
Span 21-22:  carrying => carry-01
Span 3-4:  companies => company
Span 26-27:  items => item
Span 19-20:  prevented => prevent-01
Span 28-29:  sold => sell-01
Span 30-31:  suspected => suspect-01
Span 9-10:  Sweden => (country :name (name :op "Sweden"))
Span 12-15:  United Arab Emirates => (country :name (name :op "United" :op "Arab" :op "Emirates"))
Span 34-35:  useful => useful

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 5-6:  Australia => (country :name (name :op "Australia"))
Oracle Span 24-25:  because => cause-01
Oracle Span 21-22:  carrying => carry-03
Oracle Span 3-4:  companies => company
Oracle Span 23-24:  deals => deal-01
Oracle Span 7-8:  Finland => (country :name (name :op "Finland"))
Oracle Span 16-17:  Iran => (country :name (name :op "Iran"))
Oracle Span 26-27:  items => item
Oracle Span 1-2:  list => list
Oracle Span 33-34:  militarily => military
Oracle Span 2-3:  names => name-01
Oracle Span 19-20:  prevented => prevent-01
Oracle Span 28-29:  sold => sell-01
Oracle Span 30-31:  suspected => suspect-01
Oracle Span 9-10:  Sweden => (country :name (name :op "Sweden"))
Oracle Span 12-15:  United Arab Emirates => (country :name (name :op "Emirates" :op "Arab" :op "United"))
Oracle Span 34-35:  useful => useful

Incorrect span: carrying => carry-01
Incorrect span: United Arab Emirates => (country :name (name :op "United" :op "Arab" :op "Emirates"))
Missing span: Australia => (country :name (name :op "Australia"))
Missing span: Finland => (country :name (name :op "Finland"))
Missing span: United Arab Emirates => (country :name (name :op "Emirates" :op "Arab" :op "United"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: names => name-01
Missing span: and => and
Missing span: carrying => carry-03
Missing span: deals => deal-01
Missing span: list => list
Missing span: militarily => military
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	list	_	NN	NN	_	4	nn	_	_
3	names	_	NNS	NNS	_	4	nn	_	_
4	companies	_	NNS	NNS	_	31	nsubjpass	_	_
5	from	_	IN	IN	_	4	prep	_	_
6	Australia	_	NNP	NNP	_	5	pobj	_	_
7	,	_	,	,	_	6	punct	_	_
8	Finland	_	NNP	NNP	_	6	conj	_	_
9	,	_	,	,	_	6	punct	_	_
10	Sweden	_	NNP	NNP	_	6	conj	_	_
11	,	_	,	,	_	6	punct	_	_
12	the	_	DT	DT	_	15	det	_	_
13	United	_	NNP	NNP	_	15	nn	_	_
14	Arab	_	NNP	NNP	_	15	nn	_	_
15	Emirates	_	NNPS	NNPS	_	6	conj	_	_
16	and	_	CC	CC	_	6	cc	_	_
17	Iran	_	NNP	NNP	_	6	conj	_	_
18	that	_	WDT	WDT	_	20	nsubjpass	_	_
19	were	_	VBD	VBD	_	20	auxpass	_	_
20	prevented	_	VBN	VBN	_	4	rcmod	_	_
21	from	_	IN	IN	_	20	prep	_	_
22	carrying	_	VBG	VBG	_	21	pcomp	_	_
23	out	_	RP	RP	_	22	prt	_	_
24	deals	_	NNS	NNS	_	22	dobj	_	_
25	because	_	IN	IN	_	22	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	items	_	NNS	NNS	_	25	pobj	_	_
28	being	_	VBG	VBG	_	29	auxpass	_	_
29	sold	_	VBN	VBN	_	27	vmod	_	_
30	were	_	VBD	VBD	_	31	auxpass	_	_
31	suspected	_	VBN	VBN	_	0	root	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	being	_	VBG	VBG	_	35	cop	_	_
34	militarily	_	RB	RB	_	35	advmod	_	_
35	useful	_	JJ	JJ	_	32	pcomp	_	_
36	.	_	.	.	_	31	punct	_	_

Oracle:
(a2 / and, op, c12 / company)
(c12 / company, source, c5 / country)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / carry-03, ARG0, a2 / and)
(c6 / carry-03, ARG1, d / deal-01)
(c7 / cause-01, ARG0, s / suspect-01)
(c7 / cause-01, ARG1, p / prevent-01)
(c8 / country, name, n6 / name)
(i / item, mod, s2 / sell-01)
(n / name-01, ARG0, l / list)
(n / name-01, ARG1, a2 / and)
(n2 / name, op, "Australia")
(n3 / name, op, "Finland")
(n4 / name, op, "Arab")
(n4 / name, op, "Emirates")
(n4 / name, op, "United")
(n5 / name, op, "Iran")
(n6 / name, op, "Sweden")
(p / prevent-01, ARG1, a2 / and)
(p / prevent-01, ARG2, c6 / carry-03)
(s / suspect-01, ARG1, u / useful)
(s / suspect-01, ARG2, i / item)
(u / useful, domain, i / item)
(u / useful, manner, m / military)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),useful,useful,false), Span(30,31,List(1),suspected,suspect-01,false), Span(28,29,List(2),sold,sell-01,false), Span(26,27,List(3),items,item,false), Span(24,25,List(4),because,cause-01,false), Span(21,22,List(5),carrying,carry-01,false), Span(19,20,List(6),prevented,prevent-01,false), Span(12,15,List(11, 10, 9, 8, 7),United Arab Emirates,(country :name (name :op "United" :op "Arab" :op "Emirates")),false), Span(9,10,List(14, 13, 12),Sweden,(country :name (name :op "Sweden")),false), Span(3,4,List(15),companies,company,false)),Map(2 -> sell-01, 5 -> carry-01, 12 -> country, 15 -> company, 8 -> name, 7 -> country, 1 -> suspect-01, 4 -> cause-01, 11 -> "Emirates", 14 -> "Sweden", 6 -> prevent-01, 0 -> useful, 9 -> "United", 3 -> item, 10 -> "Arab", 13 -> name),Map(n -> name, s2 -> sell-01, c4 -> country, s -> suspect-01, p -> prevent-01, c3 -> country, i -> item, c -> cause-01, u -> useful, n2 -> name, c2 -> carry-01, c5 -> company))),[Ljava.lang.String;@3153ddfc,Annotation([Ljava.lang.String;@60afd40d,[Ljava.lang.String;@28a2a3e7,[Ljava.lang.String;@3f2049b6),Annotation([Ljava.lang.String;@10b3df93,[Ljava.lang.String;@ea27e34,[Ledu.cmu.lti.nlp.amr.Dependency;@33a2499c),Annotation([Ljava.lang.String;@e72dba7,[Ljava.lang.String;@33c2bd,[Ljava.lang.String;@1dfd5f51),Annotation([Ljava.lang.String;@3c321bdb,[Ljava.lang.String;@24855019,[Ledu.cmu.lti.nlp.amr.Entity;@3abd581e))
AMR:
(c / cause-01, ARG1, i / item)
(c2 / carry-01, time, c / cause-01)
(c3 / country, name, n / name)
(c4 / country, name, n2 / name)
(n / name, op, "Arab")
(n / name, op, "Emirates")
(n / name, op, "United")
(n2 / name, op, "Sweden")
(p / prevent-01, ARG0, c5 / company)
(p / prevent-01, ARG1, c2 / carry-01)
(s / suspect-01, ARG0, u / useful)
(s / suspect-01, ARG1, c5 / company)
(s2 / sell-01, ARG0, c4 / country)
(s2 / sell-01, ARG1, i / item)
(s2 / sell-01, location, c3 / country)

Decoded in 354,442 microseconds
Sentence: The listed items being offered for sale in the blocked deals included Nickel powder, petrochemical plant components, compressors, furnaces, steel flanges and fittings, electron microscopes, radiometric ore-sorting machines, valves and tubing, lasers, a rotary drilling rig, a mass spectrometer and a nitrogen production plant.

Spans:
Span 9-10:  blocked => block-01
Span 45-46:  drilling => drill-01
Span 2-3:  items => item
Span 1-2:  listed => list-01
Span 35-36:  machines => machine
Span 49-50:  mass => mass
Span 4-5:  offered => offer-01
Span 15-16:  petrochemical => petrochemical
Span 55-56:  plant => plant
Span 16-17:  plant => plant
Span 13-14:  powder => powder-01
Span 54-55:  production => produce-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 25-26:  and => and
Oracle Span 38-39:  and => and
Oracle Span 51-52:  and => and
Oracle Span 9-10:  blocked => block-01
Oracle Span 17-18:  components => component
Oracle Span 19-20:  compressors => compressor
Oracle Span 10-11:  deals => deal-01
Oracle Span 45-46:  drilling => drill-01
Oracle Span 28-29:  electron => electron
Oracle Span 26-27:  fittings => fitting
Oracle Span 24-25:  flanges => flange
Oracle Span 21-22:  furnaces => furnace
Oracle Span 11-12:  included => include-01
Oracle Span 2-3:  items => item
Oracle Span 41-42:  lasers => laser
Oracle Span 1-2:  listed => list-01
Oracle Span 35-36:  machines => machine
Oracle Span 49-50:  mass => mass
Oracle Span 29-30:  microscopes => microscope
Oracle Span 12-13:  Nickel => nickel
Oracle Span 53-54:  nitrogen => nitrogen
Oracle Span 4-5:  offered => offer-01
Oracle Span 32-33:  ore => ore
Oracle Span 15-16:  petrochemical => petrochemical
Oracle Span 16-17:  plant => plant
Oracle Span 55-56:  plant => plant
Oracle Span 13-14:  powder => powder
Oracle Span 54-55:  production => produce-01
Oracle Span 31-32:  radiometric => radiometric
Oracle Span 46-47:  rig => rig
Oracle Span 44-45:  rotary => rotary
Oracle Span 34-35:  sorting => sort-01
Oracle Span 50-51:  spectrometer => spectrometer
Oracle Span 23-24:  steel => steel
Oracle Span 39-40:  tubing => tubing
Oracle Span 37-38:  valves => valve

Incorrect span: powder => powder-01
Missing span: included => include-01
Missing span: deals => deal-01
Missing span: and => and
Missing span: nitrogen => nitrogen
Missing span: spectrometer => spectrometer
Missing span: rig => rig
Missing span: rotary => rotary
Missing span: lasers => laser
Missing span: and => and
Missing span: tubing => tubing
Missing span: valves => valve
Missing span: radiometric => radiometric
Missing span: sorting => sort-01
Missing span: ore => ore
Missing span: microscopes => microscope
Missing span: electron => electron
Missing span: and => and
Missing span: fittings => fitting
Missing span: flanges => flange
Missing span: steel => steel
Missing span: furnaces => furnace
Missing span: compressors => compressor
Missing span: components => component
Missing span: powder => powder
Missing span: Nickel => nickel
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	listed	_	VBN	VBN	_	3	amod	_	_
3	items	_	NNS	NNS	_	12	nsubj	_	_
4	being	_	VBG	VBG	_	5	auxpass	_	_
5	offered	_	VBN	VBN	_	3	vmod	_	_
6	for	_	IN	IN	_	5	prep	_	_
7	sale	_	NN	NN	_	6	pobj	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	blocked	_	VBN	VBN	_	11	amod	_	_
11	deals	_	NNS	NNS	_	8	pobj	_	_
12	included	_	VBD	VBD	_	0	root	_	_
13	Nickel	_	NNP	NNP	_	14	nn	_	_
14	powder	_	NNP	NNP	_	12	dobj	_	_
15	,	_	,	,	_	14	punct	_	_
16	petrochemical	_	NN	NN	_	18	nn	_	_
17	plant	_	NN	NN	_	18	nn	_	_
18	components	_	NNS	NNS	_	14	conj	_	_
19	,	_	,	,	_	14	punct	_	_
20	compressors	_	NNS	NNS	_	14	conj	_	_
21	,	_	,	,	_	14	punct	_	_
22	furnaces	_	NNS	NNS	_	14	conj	_	_
23	,	_	,	,	_	14	punct	_	_
24	steel	_	NN	NN	_	25	nn	_	_
25	flanges	_	NNS	NNS	_	14	conj	_	_
26	and	_	CC	CC	_	25	cc	_	_
27	fittings	_	NNS	NNS	_	25	conj	_	_
28	,	_	,	,	_	14	punct	_	_
29	electron	_	NN	NN	_	30	nn	_	_
30	microscopes	_	NNS	NNS	_	14	conj	_	_
31	,	_	,	,	_	14	punct	_	_
32	radiometric	_	JJ	JJ	_	34	amod	_	_
33	ore-sorting	_	JJ	JJ	_	34	amod	_	_
34	machines	_	NNS	NNS	_	14	conj	_	_
35	,	_	,	,	_	14	punct	_	_
36	valves	_	NNS	NNS	_	14	conj	_	_
37	and	_	CC	CC	_	36	cc	_	_
38	tubing	_	NN	NN	_	36	conj	_	_
39	,	_	,	,	_	14	punct	_	_
40	lasers	_	NNS	NNS	_	14	conj	_	_
41	,	_	,	,	_	14	punct	_	_
42	a	_	DT	DT	_	45	det	_	_
43	rotary	_	JJ	JJ	_	45	amod	_	_
44	drilling	_	NN	NN	_	45	nn	_	_
45	rig	_	NN	NN	_	14	conj	_	_
46	,	_	,	,	_	14	punct	_	_
47	a	_	DT	DT	_	49	det	_	_
48	mass	_	JJ	JJ	_	49	amod	_	_
49	spectrometer	_	NN	NN	_	14	conj	_	_
50	and	_	CC	CC	_	14	cc	_	_
51	a	_	DT	DT	_	54	det	_	_
52	nitrogen	_	NN	NN	_	54	nn	_	_
53	production	_	NN	NN	_	54	nn	_	_
54	plant	_	NN	NN	_	14	conj	_	_
55	.	_	.	.	_	12	punct	_	_

Oracle:
(a / and, op, a2 / and)
(a / and, op, a3 / and)
(a / and, op, c / component)
(a / and, op, c2 / compressor)
(a / and, op, f / furnace)
(a / and, op, l2 / laser)
(a / and, op, m / microscope)
(a / and, op, m2 / machine)
(a / and, op, p / powder)
(a / and, op, p4 / plant)
(a / and, op, r2 / rig)
(a / and, op, s4 / spectrometer)
(a2 / and, op, f2 / flange)
(a2 / and, op, f3 / fitting)
(a3 / and, op, t / tubing)
(a3 / and, op, v / valve)
(b / block-01, ARG1, d / deal-01)
(c / component, mod, p2 / plant)
(d2 / drill-01, ARG0, r2 / rig)
(i / include-01, ARG1, a / and)
(i / include-01, ARG2, i2 / item)
(l / list-01, ARG1, i2 / item)
(m / microscope, mod, e / electron)
(m2 / machine, mod, r / radiometric)
(n2 / nickel, consist, p / powder)
(o / offer-01, ARG1, i2 / item)
(p2 / plant, mod, p3 / petrochemical)
(p5 / produce-01, ARG0, p4 / plant)
(p5 / produce-01, ARG1, n / nitrogen)
(r2 / rig, mod, r3 / rotary)
(s2 / steel, consist, f2 / flange)
(s2 / steel, consist, f3 / fitting)
(s3 / sort-01, ARG0, m2 / machine)
(s3 / sort-01, ARG1, o2 / ore)
(s4 / spectrometer, mod, m3 / mass)

Input(Some(Graph(null,ArrayBuffer(Span(55,56,List(0),plant,plant,false), Span(54,55,List(1),production,produce-01,false), Span(49,50,List(2),mass,mass,false), Span(45,46,List(3),drilling,drill-01,false), Span(35,36,List(4),machines,machine,false), Span(16,17,List(5),plant,plant,false), Span(15,16,List(6),petrochemical,petrochemical,false), Span(13,14,List(7),powder,powder-01,false), Span(9,10,List(8),blocked,block-01,false), Span(4,5,List(9),offered,offer-01,false), Span(2,3,List(10),items,item,false), Span(1,2,List(11),listed,list-01,false)),Map(2 -> mass, 5 -> plant, 8 -> block-01, 7 -> powder-01, 1 -> produce-01, 11 -> list-01, 4 -> machine, 6 -> petrochemical, 9 -> offer-01, 0 -> plant, 10 -> item, 3 -> drill-01),Map(b -> block-01, p5 -> powder-01, m2 -> machine, p2 -> produce-01, d -> drill-01, m -> mass, p -> plant, p4 -> petrochemical, i -> item, l -> list-01, o -> offer-01, p3 -> plant))),[Ljava.lang.String;@4d4d8fcf,Annotation([Ljava.lang.String;@610db97e,[Ljava.lang.String;@6f0628de,[Ljava.lang.String;@3fabf088),Annotation([Ljava.lang.String;@1e392345,[Ljava.lang.String;@12f3afb5,[Ledu.cmu.lti.nlp.amr.Dependency;@4ced35ed),Annotation([Ljava.lang.String;@2c22a348,[Ljava.lang.String;@7bd69e82,[Ljava.lang.String;@74d7184a),Annotation([Ljava.lang.String;@51b01960,[Ljava.lang.String;@6831d8fd,[Ledu.cmu.lti.nlp.amr.Entity;@27dc79f7))
AMR:
(b / block-01, ARG1, p5 / powder-01)
(d / drill-01, ARG0, i / item)
(d / drill-01, ARG1, m / mass)
(l / list-01, ARG0, p3 / plant)
(l / list-01, ARG1, i / item)
(o / offer-01, ARG0, m2 / machine)
(o / offer-01, ARG1, i / item)
(p2 / produce-01, ARG0, p / plant)
(p2 / produce-01, ARG1, d / drill-01)
(p3 / plant, mod, p4 / petrochemical)
(p5 / powder-01, ARG1, i / item)

Decoded in 459,677 microseconds
Sentence: The Iranian end users included the Government of Iran and Iran's Atomic Energy Organization, power companies, engineering, petrochemical and oil-refining and gas companies, aircraft industries, schools, universities, engine manufacturers, mineral research centers, a helicopter support company and a plasma physics center.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "Atomic" :op "Energy" :op "Organization"))
Spans:
Span 30-31:  aircraft => aircraft
Span 12-15:  Atomic Energy Organization => (organization :name (name :op "Atomic" :op "Energy" :op "Organization"))
Span 52-53:  center => center
Span 42-43:  centers => center
Span 28-29:  companies => company
Span 17-18:  companies => company
Span 47-48:  company => company
Span 37-38:  engine => engine
Span 19-20:  engineering => engineer-01
Span 27-28:  gas => gas
Span 45-46:  helicopter => helicopter
Span 31-32:  industries => industry
Span 38-39:  manufacturers => (person :ARG0-of manufacture-01)
Span 40-41:  mineral => mineral
Span 23-24:  oil => oil
Span 21-22:  petrochemical => petrochemical
Span 51-52:  physics => physics
Span 16-17:  power => power
Span 25-26:  refining => refine-01
Span 41-42:  research => research-01
Span 33-34:  schools => school
Span 46-47:  support => support-01
Span 35-36:  universities => university

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 30-31:  aircraft => aircraft
Oracle Span 9-10:  and => and
Oracle Span 22-23:  and => and
Oracle Span 12-15:  Atomic Energy Organization => (organization :name (name :op "Organization" :op "Energy" :op "Atomic"))
Oracle Span 52-53:  center => center
Oracle Span 42-43:  centers => center
Oracle Span 17-18:  companies => company
Oracle Span 28-29:  companies => company
Oracle Span 47-48:  company => company
Oracle Span 2-3:  end => end
Oracle Span 37-38:  engine => engine
Oracle Span 19-20:  engineering => engineer-01
Oracle Span 27-28:  gas => gas
Oracle Span 6-7:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 45-46:  helicopter => helicopter
Oracle Span 4-5:  included => include-01
Oracle Span 31-32:  industries => industry
Oracle Span 8-9:  Iran => (country :name (name :op "Iran"))
Oracle Span 38-39:  manufacturers => manufacture-01
Oracle Span 40-41:  mineral => mineral
Oracle Span 23-24:  oil => oil
Oracle Span 21-22:  petrochemical => petrochemical
Oracle Span 51-52:  physics => physics
Oracle Span 50-51:  plasma => plasma
Oracle Span 16-17:  power => power
Oracle Span 25-26:  refining => refine-01
Oracle Span 41-42:  research => research-01
Oracle Span 33-34:  schools => school
Oracle Span 46-47:  support => support-01
Oracle Span 35-36:  universities => university

Incorrect span: manufacturers => (person :ARG0-of manufacture-01)
Incorrect span: Atomic Energy Organization => (organization :name (name :op "Atomic" :op "Energy" :op "Organization"))
Missing span: Atomic Energy Organization => (organization :name (name :op "Organization" :op "Energy" :op "Atomic"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: included => include-01
Missing span: end => end
Missing span: and => and
Missing span: plasma => plasma
Missing span: and => and
Missing span: manufacturers => manufacture-01
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Iranian	_	JJ	JJ	_	4	amod	_	_
3	end	_	NN	NN	_	4	nn	_	_
4	users	_	NNS	NNS	_	5	nsubj	_	_
5	included	_	VBD	VBD	_	0	root	_	_
6	the	_	DT	DT	_	7	det	_	_
7	Government	_	NN	NN	_	15	nsubj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	Iran	_	NNP	NNP	_	8	pobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	Iran	_	NNP	NNP	_	9	conj	_	_
12	's	_	VBZ	VBZ	_	15	cop	_	_
13	Atomic	_	NNP	NNP	_	15	nn	_	_
14	Energy	_	NNP	NNP	_	15	nn	_	_
15	Organization	_	NNP	NNP	_	5	ccomp	_	_
16	,	_	,	,	_	15	punct	_	_
17	power	_	NN	NN	_	18	nn	_	_
18	companies	_	NNS	NNS	_	15	conj	_	_
19	,	_	,	,	_	15	punct	_	_
20	engineering	_	NN	NN	_	15	conj	_	_
21	,	_	,	,	_	20	punct	_	_
22	petrochemical	_	NN	NN	_	20	conj	_	_
23	and	_	CC	CC	_	20	cc	_	_
24	oil-refining	_	NN	NN	_	20	conj	_	_
25	and	_	CC	CC	_	15	cc	_	_
26	gas	_	NN	NN	_	27	nn	_	_
27	companies	_	NNS	NNS	_	15	conj	_	_
28	,	_	,	,	_	27	punct	_	_
29	aircraft	_	NN	NN	_	30	nn	_	_
30	industries	_	NNS	NNS	_	27	conj	_	_
31	,	_	,	,	_	27	punct	_	_
32	schools	_	NNS	NNS	_	27	conj	_	_
33	,	_	,	,	_	27	punct	_	_
34	universities	_	NNS	NNS	_	27	conj	_	_
35	,	_	,	,	_	27	punct	_	_
36	engine	_	NN	NN	_	37	nn	_	_
37	manufacturers	_	NNS	NNS	_	27	conj	_	_
38	,	_	,	,	_	27	punct	_	_
39	mineral	_	NN	NN	_	41	nn	_	_
40	research	_	NN	NN	_	41	nn	_	_
41	centers	_	NNS	NNS	_	27	conj	_	_
42	,	_	,	,	_	27	punct	_	_
43	a	_	DT	DT	_	46	det	_	_
44	helicopter	_	NN	NN	_	46	nn	_	_
45	support	_	NN	NN	_	46	nn	_	_
46	company	_	NN	NN	_	27	conj	_	_
47	and	_	CC	CC	_	27	cc	_	_
48	a	_	DT	DT	_	51	det	_	_
49	plasma	_	NN	NN	_	51	nn	_	_
50	physics	_	NN	NN	_	51	nn	_	_
51	center	_	NN	NN	_	27	conj	_	_
52	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, a2 / and)
(a / and, op, c5 / center)
(a / and, op, c6 / company)
(a / and, op, c7 / center)
(a / and, op, c8 / company)
(a / and, op, c9 / company)
(a / and, op, i2 / industry)
(a / and, op, s / school)
(a / and, op, u2 / university)
(a2 / and, op, g / government-organization)
(a2 / and, op, o / organization)
(c2 / country, name, n / name)
(c5 / center, mod, r2 / research-01)
(c7 / center, mod, p3 / physics)
(c8 / company, mod, g3 / gas)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(i / include-01, ARG1, a / and)
(i2 / industry, mod, a4 / aircraft)
(m / manufacture-01, ARG0, c9 / company)
(m / manufacture-01, ARG1, e3 / engine)
(n / name, op, "Iran")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "Organization")
(o / organization, name, n2 / name)
(o / organization, poss, c2 / country)
(p3 / physics, mod, p4 / plasma)
(r / refine-01, ARG1, o2 / oil)
(r2 / research-01, ARG1, m2 / mineral)
(s2 / support-01, ARG0, c6 / company)
(s2 / support-01, topic, h / helicopter)

Input(Some(Graph(null,ArrayBuffer(Span(52,53,List(0),center,center,false), Span(51,52,List(1),physics,physics,false), Span(47,48,List(2),company,company,false), Span(46,47,List(3),support,support-01,false), Span(45,46,List(4),helicopter,helicopter,false), Span(42,43,List(5),centers,center,false), Span(41,42,List(6),research,research-01,false), Span(40,41,List(7),mineral,mineral,false), Span(38,39,List(9, 8),manufacturers,(person :ARG0-of manufacture-01),false), Span(37,38,List(10),engine,engine,false), Span(35,36,List(11),universities,university,false), Span(33,34,List(12),schools,school,false), Span(31,32,List(13),industries,industry,false), Span(30,31,List(14),aircraft,aircraft,false), Span(28,29,List(15),companies,company,false), Span(27,28,List(16),gas,gas,false), Span(25,26,List(17),refining,refine-01,false), Span(23,24,List(18),oil,oil,false), Span(21,22,List(19),petrochemical,petrochemical,false), Span(19,20,List(20),engineering,engineer-01,false), Span(17,18,List(21),companies,company,false), Span(16,17,List(22),power,power,false), Span(12,15,List(27, 26, 25, 24, 23),Atomic Energy Organization,(organization :name (name :op "Atomic" :op "Energy" :op "Organization")),false)),Map(2 -> company, 5 -> center, 27 -> "Organization", 12 -> school, 8 -> person, 15 -> company, 21 -> company, 18 -> oil, 24 -> name, 7 -> mineral, 1 -> physics, 17 -> refine-01, 23 -> organization, 26 -> "Energy", 4 -> helicopter, 11 -> university, 14 -> aircraft, 20 -> engineer-01, 6 -> research-01, 9 -> manufacture-01, 0 -> center, 22 -> power, 16 -> gas, 19 -> petrochemical, 10 -> engine, 3 -> support-01, 25 -> "Atomic", 13 -> industry),Map(e -> engine, n -> name, h -> helicopter, s2 -> school, m2 -> manufacture-01, p2 -> person, e2 -> engineer-01, c4 -> company, s -> support-01, m -> mineral, r2 -> refine-01, p -> physics, g -> gas, c3 -> center, a -> aircraft, p4 -> power, o2 -> organization, r -> research-01, i -> industry, c -> center, u -> university, o -> oil, p3 -> petrochemical, c2 -> company, c5 -> company))),[Ljava.lang.String;@6b85300e,Annotation([Ljava.lang.String;@3aaf4f07,[Ljava.lang.String;@5cbf9e9f,[Ljava.lang.String;@18e8473e),Annotation([Ljava.lang.String;@5a2f016d,[Ljava.lang.String;@1a38ba58,[Ledu.cmu.lti.nlp.amr.Dependency;@3ad394e6),Annotation([Ljava.lang.String;@6058e535,[Ljava.lang.String;@42deb43a,[Ljava.lang.String;@1deb2c43),Annotation([Ljava.lang.String;@3bb9efbc,[Ljava.lang.String;@1cefc4b3,[Ledu.cmu.lti.nlp.amr.Entity;@2b27cc70))
AMR:
(c / center, mod, p / physics)
(c2 / company, mod, s / support-01)
(c3 / center, mod, r / research-01)
(c4 / company, mod, g / gas)
(c4 / company, mod, o2 / organization)
(c5 / company, mod, p4 / power)
(e2 / engineer-01, ARG1, o2 / organization)
(i / industry, mod, a / aircraft)
(i / industry, op, r2 / refine-01)
(m2 / manufacture-01, ARG0, p2 / person)
(m2 / manufacture-01, ARG1, e / engine)
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "Organization")
(o2 / organization, name, n / name)
(p4 / power, op, s / support-01)
(r / research-01, ARG0, p / physics)
(r / research-01, ARG1, m / mineral)
(r / research-01, ARG2, r2 / refine-01)
(r2 / refine-01, ARG0, p3 / petrochemical)
(r2 / refine-01, ARG1, o / oil)
(s / support-01, ARG0, p2 / person)
(s / support-01, ARG1, h / helicopter)
(s / support-01, ARG2, r / research-01)
(s / support-01, ARG3, e2 / engineer-01)
(s2 / school, op, r2 / refine-01)
(u / university, op, r2 / refine-01)

Decoded in 1,330,486 microseconds
Sentence: The diplomat stated the 75 denials represented actions by only 7 of the 45 member States.

NER Entity: (organization :name (name :op "States"))
Spans:
Span 13-14:  45 => 45
Span 4-5:  75 => 75
Span 7-8:  actions => action
Span 14-15:  member => (have-org-role-91 :ARG2 member)
Span 9-10:  only => only
Span 6-7:  represented => represent-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 13-14:  45 => 45
Oracle Span 10-11:  7 => 7
Oracle Span 4-5:  75 => 75
Oracle Span 1-2:  diplomat => (have-org-role-91 :ARG2 diplomat)
Oracle Span 14-15:  member => (have-org-role-91 :ARG2 member)
Oracle Span 11-12:  of => include-91
Oracle Span 9-10:  only => only
Oracle Span 6-7:  represented => represent-01
Oracle Span 2-3:  stated => state-01
Oracle Span 15-16:  States => state

Extra span: actions => action
Missing span: stated => state-01
Missing span: States => state
Missing span: of => include-91
Missing span: 7 => 7
Missing span: diplomat => (have-org-role-91 :ARG2 diplomat)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	diplomat	_	NN	NN	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	75	_	CD	CD	_	6	num	_	_
6	denials	_	NNS	NNS	_	7	nsubj	_	_
7	represented	_	VBD	VBD	_	3	ccomp	_	_
8	actions	_	NNS	NNS	_	7	dobj	_	_
9	by	_	IN	IN	_	7	prep	_	_
10	only	_	RB	RB	_	11	quantmod	_	_
11	7	_	CD	CD	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	16	det	_	_
14	45	_	CD	CD	_	16	num	_	_
15	member	_	NN	NN	_	16	nn	_	_
16	States	_	NNS	NNS	_	12	pobj	_	_
17	.	_	.	.	_	3	punct	_	_

Oracle:
(h / have-org-role-91, ARG2, d / diplomat)
(h2 / have-org-role-91, ARG2, m / member)
(i / include-91, ARG1, s2 / state)
(r / represent-01, mod, o / only)
(s / state-01, ARG1, r / represent-01)
(s2 / state, quant, 7 / 7)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(1, 0),member,(have-org-role-91 :ARG2 member),false), Span(13,14,List(2),45,45,false), Span(9,10,List(3),only,only,false), Span(7,8,List(4),actions,action,false), Span(6,7,List(5),represented,represent-01,false), Span(4,5,List(6),75,75,false)),Map(2 -> 45, 5 -> represent-01, 1 -> member, 4 -> action, 6 -> 75, 0 -> have-org-role-91, 3 -> only),Map(h -> have-org-role-91, 7 -> 75, m -> member, a -> action, 4 -> 45, r -> represent-01, o -> only))),[Ljava.lang.String;@6f6a7463,Annotation([Ljava.lang.String;@1bdaa23d,[Ljava.lang.String;@79f227a9,[Ljava.lang.String;@6ca320ab),Annotation([Ljava.lang.String;@50d68830,[Ljava.lang.String;@1e53135d,[Ledu.cmu.lti.nlp.amr.Dependency;@7674a051),Annotation([Ljava.lang.String;@3a7704c,[Ljava.lang.String;@6754ef00,[Ljava.lang.String;@619bd14c),Annotation([Ljava.lang.String;@323e8306,[Ljava.lang.String;@a23a01d,[Ledu.cmu.lti.nlp.amr.Entity;@4acf72b6))
AMR:
(h / have-org-role-91, ARG1, 7 / 75)
(h / have-org-role-91, ARG2, m / member)
(h / have-org-role-91, instrument, r / represent-01)
(o / only, op, h / have-org-role-91)
(r / represent-01, ARG0, 4 / 45)
(r / represent-01, ARG1, a / action)

Decoded in 66,319 microseconds
Sentence: The diplomat stated the actual number of denials of sales of dual-use products to Iran is probably much higher than 75.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 22-23:  75 => 75
Span 4-5:  actual => actual
Span 11-12:  dual => dual
Span 20-21:  higher => high
Span 19-20:  much => much
Span 18-19:  probably => probable
Span 14-15:  products => product
Span 13-14:  use => use-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 22-23:  75 => 75
Oracle Span 4-5:  actual => actual
Oracle Span 1-2:  diplomat => (have-org-role-91 :ARG2 diplomat)
Oracle Span 11-12:  dual => dual
Oracle Span 20-21:  higher => high
Oracle Span 16-17:  Iran => (country :name (name :op "Iran"))
Oracle Span 19-20:  much => much
Oracle Span 5-6:  number => number
Oracle Span 18-19:  probably => probable
Oracle Span 14-15:  products => product
Oracle Span 2-3:  stated => state-01
Oracle Span 13-14:  use => use-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: number => number
Missing span: diplomat => (have-org-role-91 :ARG2 diplomat)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	diplomat	_	NN	NN	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	actual	_	JJ	JJ	_	6	amod	_	_
6	number	_	NN	NN	_	19	nsubj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	denials	_	NNS	NNS	_	7	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	sales	_	NNS	NNS	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	dual-use	_	JJ	JJ	_	13	amod	_	_
13	products	_	NNS	NNS	_	11	pobj	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	Iran	_	NNP	NNP	_	14	pobj	_	_
16	is	_	VBZ	VBZ	_	19	cop	_	_
17	probably	_	RB	RB	_	19	advmod	_	_
18	much	_	RB	RB	_	19	advmod	_	_
19	higher	_	JJR	JJR	_	3	ccomp	_	_
20	than	_	IN	IN	_	19	prep	_	_
21	75	_	CD	CD	_	20	pobj	_	_
22	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n2 / name)
(h / high, compared-to, 7 / 75)
(h / high, domain, n / number)
(h2 / have-org-role-91, ARG2, d / diplomat)
(n / number, mod, a / actual)
(n2 / name, op, "Iran")
(p / probable, domain, h / high)
(s / state-01, ARG1, p / probable)
(u / use-01, ARG1, p2 / product)
(u / use-01, manner, d4 / dual)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),75,75,false), Span(20,21,List(1),higher,high,false), Span(19,20,List(2),much,much,false), Span(18,19,List(3),probably,probable,false), Span(14,15,List(4),products,product,false), Span(13,14,List(5),use,use-01,false), Span(11,12,List(6),dual,dual,false), Span(4,5,List(7),actual,actual,false)),Map(2 -> much, 5 -> use-01, 7 -> actual, 1 -> high, 4 -> product, 6 -> dual, 0 -> 75, 3 -> probable),Map(h -> high, p2 -> product, d -> dual, m -> much, 7 -> 75, p -> probable, a -> actual, u -> use-01))),[Ljava.lang.String;@7561db12,Annotation([Ljava.lang.String;@3301500b,[Ljava.lang.String;@24b52d3e,[Ljava.lang.String;@15deb1dc),Annotation([Ljava.lang.String;@6e9c413e,[Ljava.lang.String;@57a4d5ee,[Ledu.cmu.lti.nlp.amr.Dependency;@5af5def9),Annotation([Ljava.lang.String;@3a45c42a,[Ljava.lang.String;@36dce7ed,[Ljava.lang.String;@47a64f7d),Annotation([Ljava.lang.String;@33d05366,[Ljava.lang.String;@27a0a5a2,[Ledu.cmu.lti.nlp.amr.Entity;@7692cd34))
AMR:
(h / high, mod, m / much)
(h / high, op, 7 / 75)
(m / much, degree, p / probable)
(m / much, poss, a / actual)
(u / use-01, ARG0, p / probable)
(u / use-01, ARG1, p2 / product)
(u / use-01, mod, d / dual)

Decoded in 100,668 microseconds
Sentence: Western diplomats stated that the government in Tehran uses front companies to receive and convert technology to weapons production without being detected as the standoff with Iran over Iran's nuclear program has continued.

NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 10-11:  companies => company
Span 33-34:  continued => continue-01
Span 14-15:  convert => convert-01
Span 1-2:  diplomats => (have-org-role-91 :ARG2 diplomat)
Span 9-10:  front => front
Span 30-31:  nuclear => nucleus
Span 18-19:  production => produce-01
Span 31-32:  program => program
Span 24-25:  standoff => standoff
Span 15-16:  technology => technology
Span 7-8:  Tehran => (city :name (name :op "Tehran"))
Span 8-9:  uses => use-01
Span 0-1:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 10-11:  companies => company
Oracle Span 33-34:  continued => continue-01
Oracle Span 14-15:  convert => convert-01
Oracle Span 21-22:  detected => detect-01
Oracle Span 1-2:  diplomats => diplomat
Oracle Span 9-10:  front => front
Oracle Span 5-6:  government => (government-organization :ARG0-of govern-01)
Oracle Span 32-33:  has => (person :ARG0-of have-org-role-91)
Oracle Span 26-27:  Iran => (country :name (name :op "Iran"))
Oracle Span 30-31:  nuclear => nucleus
Oracle Span 18-19:  production => produce-01
Oracle Span 31-32:  program => program
Oracle Span 12-13:  receive => receive-01
Oracle Span 24-25:  standoff => standoff
Oracle Span 2-3:  stated => state-01
Oracle Span 15-16:  technology => technology
Oracle Span 7-8:  Tehran => (city :name (name :op "Tehran"))
Oracle Span 8-9:  uses => use-01
Oracle Span 17-18:  weapons => weapon
Oracle Span 0-1:  Western => (world-region :name (name :op "West"))

Incorrect span: diplomats => (have-org-role-91 :ARG2 diplomat)
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: detected => detect-01
Missing span: and => and
Missing span: weapons => weapon
Missing span: receive => receive-01
Missing span: diplomats => diplomat
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: has => (person :ARG0-of have-org-role-91)
Dependencies:
1	Western	_	JJ	JJ	_	2	amod	_	_
2	diplomats	_	NNS	NNS	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	9	mark	_	_
5	the	_	DT	DT	_	6	det	_	_
6	government	_	NN	NN	_	9	nsubj	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	Tehran	_	NNP	NNP	_	7	pobj	_	_
9	uses	_	VBZ	VBZ	_	3	ccomp	_	_
10	front	_	JJ	JJ	_	11	amod	_	_
11	companies	_	NNS	NNS	_	9	dobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	receive	_	VB	VB	_	9	vmod	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	convert	_	VB	VB	_	13	conj	_	_
16	technology	_	NN	NN	_	13	dobj	_	_
17	to	_	TO	TO	_	13	prep	_	_
18	weapons	_	NNS	NNS	_	19	nn	_	_
19	production	_	NN	NN	_	17	pobj	_	_
20	without	_	IN	IN	_	13	prep	_	_
21	being	_	VBG	VBG	_	22	auxpass	_	_
22	detected	_	VBN	VBN	_	20	pcomp	_	_
23	as	_	IN	IN	_	34	mark	_	_
24	the	_	DT	DT	_	25	det	_	_
25	standoff	_	NN	NN	_	34	nsubj	_	_
26	with	_	IN	IN	_	25	prep	_	_
27	Iran	_	NNP	NNP	_	26	pobj	_	_
28	over	_	IN	IN	_	27	prep	_	_
29	Iran	_	NNP	NNP	_	32	poss	_	_
30	's	_	POS	POS	_	29	possessive	_	_
31	nuclear	_	JJ	JJ	_	32	amod	_	_
32	program	_	NN	NN	_	28	pobj	_	_
33	has	_	VBZ	VBZ	_	34	aux	_	_
34	continued	_	VBN	VBN	_	22	advcl	_	_
35	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, c3 / convert-01)
(a / and, op, r / receive-01)
(c / city, name, n2 / name)
(c2 / company, mod, f / front)
(c3 / convert-01, ARG0, g / government-organization)
(c3 / convert-01, ARG1, t / technology)
(c3 / convert-01, ARG2, p / produce-01)
(c5 / continue-01, ARG1, s2 / standoff)
(c5 / continue-01, topic, p2 / program)
(c6 / country, name, n3 / name)
(g / government-organization, location, c / city)
(g2 / govern-01, ARG0, g / government-organization)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG2, d / diplomat)
(n / name, op, "West")
(n2 / name, op, "Tehran")
(n3 / name, op, "Iran")
(p / produce-01, ARG1, w2 / weapon)
(p2 / program, mod, n4 / nucleus)
(p2 / program, poss, c6 / country)
(p3 / person, mod, w / world-region)
(r / receive-01, ARG0, g / government-organization)
(r / receive-01, ARG1, t / technology)
(s / state-01, ARG0, p3 / person)
(s / state-01, ARG1, u / use-01)
(s2 / standoff, prep-with, c6 / country)
(u / use-01, ARG0, g / government-organization)
(u / use-01, ARG1, c2 / company)
(u / use-01, manner, d2 / detect-01)
(u / use-01, purpose, a / and)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),continued,continue-01,false), Span(31,32,List(1),program,program,false), Span(30,31,List(2),nuclear,nucleus,false), Span(24,25,List(3),standoff,standoff,false), Span(18,19,List(4),production,produce-01,false), Span(15,16,List(5),technology,technology,false), Span(14,15,List(6),convert,convert-01,false), Span(10,11,List(7),companies,company,false), Span(9,10,List(8),front,front,false), Span(8,9,List(9),uses,use-01,false), Span(7,8,List(12, 11, 10),Tehran,(city :name (name :op "Tehran")),false), Span(1,2,List(14, 13),diplomats,(have-org-role-91 :ARG2 diplomat),false), Span(0,1,List(17, 16, 15),Western,(world-region :name (name :op "West")),false)),Map(2 -> nucleus, 5 -> technology, 12 -> "Tehran", 15 -> world-region, 8 -> front, 7 -> company, 17 -> "West", 1 -> program, 4 -> produce-01, 11 -> name, 14 -> diplomat, 6 -> convert-01, 0 -> continue-01, 9 -> use-01, 16 -> name, 3 -> standoff, 10 -> city, 13 -> have-org-role-91),Map(w -> world-region, n -> nucleus, h -> have-org-role-91, t -> technology, p2 -> produce-01, c4 -> city, s -> standoff, d -> diplomat, p -> program, n3 -> name, c3 -> company, c -> continue-01, u -> use-01, f -> front, c2 -> convert-01, n2 -> name))),[Ljava.lang.String;@33aa93c,Annotation([Ljava.lang.String;@32c0915e,[Ljava.lang.String;@106faf11,[Ljava.lang.String;@70f43b45),Annotation([Ljava.lang.String;@26d10f2e,[Ljava.lang.String;@10ad20cb,[Ledu.cmu.lti.nlp.amr.Dependency;@7dd712e8),Annotation([Ljava.lang.String;@2c282004,[Ljava.lang.String;@22ee2d0,[Ljava.lang.String;@7bfc3126),Annotation([Ljava.lang.String;@3e792ce3,[Ljava.lang.String;@53bc1328,[Ledu.cmu.lti.nlp.amr.Entity;@26f143ed))
AMR:
(c / continue-01, ARG0, s / standoff)
(c / continue-01, ARG1, p / program)
(c2 / convert-01, ARG0, c3 / company)
(c2 / convert-01, ARG1, t / technology)
(c3 / company, mod, f / front)
(c4 / city, name, n2 / name)
(h / have-org-role-91, ARG1, c2 / convert-01)
(h / have-org-role-91, ARG2, d / diplomat)
(n2 / name, op, "Tehran")
(n3 / name, op, "West")
(p / program, mod, n / nucleus)
(p2 / produce-01, ARG0, t / technology)
(t / technology, mod, n / nucleus)
(u / use-01, ARG0, c4 / city)
(u / use-01, ARG1, c3 / company)
(w / world-region, name, n3 / name)
(w / world-region, op, c2 / convert-01)

Decoded in 485,593 microseconds
Sentence: Iran is a signatory to the Nuclear Nonproliferation Treaty but not a member of the Nuclear Suppliers Group.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 12-13:  member => (have-org-role-91 :ARG2 member)
Span 6-9:  Nuclear Nonproliferation Treaty => (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
Span 15-18:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 3-4:  signatory => sign-02

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 9-10:  but => contrast-01
Oracle Span 0-1:  Iran => (country :name (name :op "Iran"))
Oracle Span 12-13:  member => (have-org-role-91 :ARG2 member)
Oracle Span 6-9:  Nuclear Nonproliferation Treaty => (treaty :name (name :op "Treaty" :op "Nonproliferation" :op "Nuclear"))
Oracle Span 15-18:  Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Oracle Span 3-4:  signatory => sign-02

Incorrect span: Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Incorrect span: Nuclear Nonproliferation Treaty => (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Nuclear Nonproliferation Treaty => (treaty :name (name :op "Treaty" :op "Nonproliferation" :op "Nuclear"))
Missing span: Nuclear Suppliers Group => (organization :name (name :op "Group" :op "Suppliers" :op "Nuclear"))
Missing span: but => contrast-01
Dependencies:
1	Iran	_	NNP	NNP	_	4	nsubj	_	_
2	is	_	VBZ	VBZ	_	4	cop	_	_
3	a	_	DT	DT	_	4	det	_	_
4	signatory	_	NN	NN	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	Nuclear	_	NNP	NNP	_	9	nn	_	_
8	Nonproliferation	_	NNP	NNP	_	9	nn	_	_
9	Treaty	_	NNP	NNP	_	5	pobj	_	_
10	but	_	CC	CC	_	11	cc	_	_
11	not	_	RB	RB	_	4	cc	_	_
12	a	_	DT	DT	_	13	det	_	_
13	member	_	NN	NN	_	4	conj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	18	det	_	_
16	Nuclear	_	NNP	NNP	_	18	nn	_	_
17	Suppliers	_	NNP	NNP	_	18	nn	_	_
18	Group	_	NNP	NNP	_	14	pobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(c / contrast-01, ARG1, s / sign-02)
(c / contrast-01, ARG2, h / have-org-role-91)
(c2 / country, name, n / name)
(h / have-org-role-91, ARG0, c2 / country)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Iran")
(n2 / name, op, "Nonproliferation")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Treaty")
(n3 / name, op, "Group")
(n3 / name, op, "Nuclear")
(n3 / name, op, "Suppliers")
(o / organization, name, n3 / name)
(s / sign-02, ARG0, c2 / country)
(s / sign-02, ARG1, t / treaty)
(t / treaty, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(15,18,List(4, 3, 2, 1, 0),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(12,13,List(6, 5),member,(have-org-role-91 :ARG2 member),false), Span(6,9,List(11, 10, 9, 8, 7),Nuclear Nonproliferation Treaty,(organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty")),false), Span(3,4,List(12),signatory,sign-02,false)),Map(2 -> "Nuclear", 5 -> have-org-role-91, 12 -> sign-02, 8 -> name, 7 -> organization, 1 -> name, 4 -> "Group", 11 -> "Treaty", 6 -> member, 0 -> organization, 9 -> "Nuclear", 3 -> "Suppliers", 10 -> "Nonproliferation"),Map(n -> name, h -> have-org-role-91, s -> sign-02, m -> member, o2 -> organization, o -> organization, n2 -> name))),[Ljava.lang.String;@3c1e3314,Annotation([Ljava.lang.String;@4b770e40,[Ljava.lang.String;@78e16155,[Ljava.lang.String;@54a3ab8f),Annotation([Ljava.lang.String;@1968a49c,[Ljava.lang.String;@6a1ebcff,[Ledu.cmu.lti.nlp.amr.Dependency;@19868320),Annotation([Ljava.lang.String;@50b0bc4c,[Ljava.lang.String;@c20be82,[Ljava.lang.String;@13c612bd),Annotation([Ljava.lang.String;@3ef41c66,[Ljava.lang.String;@6b739528,[Ledu.cmu.lti.nlp.amr.Entity;@622ef26a))
AMR:
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(n2 / name, op, "Nonproliferation")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Treaty")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(s / sign-02, ARG0, o2 / organization)
(s / sign-02, ARG1, h / have-org-role-91)

Decoded in 245,834 microseconds
Sentence: 2008-08-08

mkDayMonthYear(2008-08-08,08,08,2008)
mkDayMonthYear(2008-08-08,08,08,2008)
Spans:
Span 0-1:  2008-08-08 => (date-entity :day 8 :month 8 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2008-08-08 => (date-entity :year 2008 :month 8 :day 8)

Incorrect span: 2008-08-08 => (date-entity :day 8 :month 8 :year 2008)
Missing span: 2008-08-08 => (date-entity :year 2008 :month 8 :day 8)
Dependencies:
1	2008-08-08	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 8)
(d / date-entity, month, 8)
(d / date-entity, year, 2008)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-08-08,(date-entity :day 8 :month 8 :year 2008),false)),Map(2 -> 8, 1 -> 8, 0 -> date-entity, 3 -> 2008),Map(2 -> 2008, 8 -> 8, d -> date-entity, 82 -> 8))),[Ljava.lang.String;@41de5768,Annotation([Ljava.lang.String;@5f577419,[Ljava.lang.String;@28fa700e,[Ljava.lang.String;@3d526ad9),Annotation([Ljava.lang.String;@e041f0c,[Ljava.lang.String;@6a175569,[Ledu.cmu.lti.nlp.amr.Dependency;@11963225),Annotation([Ljava.lang.String;@3f3c966c,[Ljava.lang.String;@11ee02f8,[Ljava.lang.String;@4102b1b1),Annotation([Ljava.lang.String;@61a5b4ae,[Ljava.lang.String;@3a71c100,[Ledu.cmu.lti.nlp.amr.Entity;@5b69fd74))
AMR:
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)

Decoded in 8,579 microseconds
Sentence: Georgia (GE); Russian Federation (RU)

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Russian" :op "Federation"))
NER Entity: (thing :name (name :op "RU"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 4-5:  ; => and
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 5-7:  Russian Federation => (country :name (name :op "Russian" :op "Federation"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  ; => and
Oracle Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 5-7:  Russian Federation => (country :name (name :op "Federation" :op "Russian"))

Incorrect span: Russian Federation => (country :name (name :op "Russian" :op "Federation"))
Missing span: Russian Federation => (country :name (name :op "Federation" :op "Russian"))
Dependencies:
1	Georgia	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	GE	_	NNP	NNP	_	1	dep	_	_
4	)	_	)	)	_	3	punct	_	_
5	;	_	:	:	_	3	punct	_	_
6	Russian	_	NNP	NNP	_	7	nn	_	_
7	Federation	_	NNP	NNP	_	3	dep	_	_
8	(	_	(	(	_	9	punct	_	_
9	RU	_	NNP	NNP	_	7	appos	_	_
10	)	_	)	)	_	9	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Georgia")
(n2 / name, op, "Federation")
(n2 / name, op, "Russian")

Input(Some(Graph(null,ArrayBuffer(Span(5,7,List(3, 2, 1, 0),Russian Federation,(country :name (name :op "Russian" :op "Federation")),false), Span(4,5,List(4),;,and,false), Span(0,1,List(7, 6, 5),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> "Russian", 5 -> country, 7 -> "Georgia", 1 -> name, 4 -> and, 6 -> name, 0 -> country, 3 -> "Federation"),Map(n -> name, a -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@f325091,Annotation([Ljava.lang.String;@437e951d,[Ljava.lang.String;@77b325b3,[Ljava.lang.String;@63a5e46c),Annotation([Ljava.lang.String;@7e8e8651,[Ljava.lang.String;@49ef32e0,[Ledu.cmu.lti.nlp.amr.Dependency;@271f18d3),Annotation([Ljava.lang.String;@6bd51ed8,[Ljava.lang.String;@61e3a1fd,[Ljava.lang.String;@51abf713),Annotation([Ljava.lang.String;@eadb475,[Ljava.lang.String;@4d4d48a6,[Ledu.cmu.lti.nlp.amr.Entity;@315df4bb))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Federation")
(n / name, op, "Russian")
(n2 / name, op, "Georgia")

Decoded in 26,061 microseconds
Sentence: International; Government; dissent; war and conflict; weapons; politics

Spans:
Span 11-12:  ; => and
Span 9-10:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 8-9:  conflict => conflict-01
Span 4-5:  dissent => dissent-01
Span 12-13:  politics => politics

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 3-4:  ; => and
Oracle Span 8-9:  conflict => conflict
Oracle Span 4-5:  dissent => dissent-01
Oracle Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 12-13:  politics => politics
Oracle Span 6-7:  war => war
Oracle Span 10-11:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Incorrect span: conflict => conflict-01
Extra span: ; => and
Missing span: weapons => weapon
Missing span: conflict => conflict
Missing span: war => war
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	Government	_	NNP	NNP	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	dissent	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	3	punct	_	_
7	war	_	NN	NN	_	3	dep	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	conflict	_	NN	NN	_	7	conj	_	_
10	;	_	:	:	_	3	punct	_	_
11	weapons	_	NNS	NNS	_	3	dep	_	_
12	;	_	:	:	_	11	punct	_	_
13	politics	_	NNS	NNS	_	11	dep	_	_

Oracle:
(a / and, op, a2 / and)
(a / and, op, d / dissent-01)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, p / politics)
(a / and, op, w2 / weapon)
(a2 / and, op, c / conflict)
(a2 / and, op, w / war)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),politics,politics,false), Span(11,12,List(1),;,and,false), Span(9,10,List(2),;,and,false), Span(8,9,List(3),conflict,conflict-01,false), Span(5,6,List(4),;,and,false), Span(4,5,List(5),dissent,dissent-01,false), Span(3,4,List(6),;,and,false), Span(1,2,List(7),;,and,false)),Map(2 -> and, 5 -> dissent-01, 7 -> and, 1 -> and, 4 -> and, 6 -> and, 0 -> politics, 3 -> conflict-01),Map(a3 -> and, d -> dissent-01, p -> politics, a -> and, a5 -> and, a2 -> and, c -> conflict-01, a4 -> and))),[Ljava.lang.String;@3fc08eec,Annotation([Ljava.lang.String;@5cad8b7d,[Ljava.lang.String;@7b02e036,[Ljava.lang.String;@25243bc1),Annotation([Ljava.lang.String;@1e287667,[Ljava.lang.String;@2e6ee0bc,[Ledu.cmu.lti.nlp.amr.Dependency;@4201a617),Annotation([Ljava.lang.String;@467f77a5,[Ljava.lang.String;@1bb9aa43,[Ljava.lang.String;@420bc288),Annotation([Ljava.lang.String;@df5f5c0,[Ljava.lang.String;@308a6984,[Ledu.cmu.lti.nlp.amr.Entity;@66b72664))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, a4 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, c / conflict-01)
(a5 / and, op, a4 / and)
(a5 / and, op, d / dissent-01)
(a5 / and, op, p / politics)

Decoded in 46,158 microseconds
Sentence: On 8 August 2008 Russia conducted airstrikes on Georgian targets.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Georgian"))
Spans:
Span 1-4:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 5-6:  conducted => conduct-01
Span 8-9:  Georgian => (country :name (name :op "Georgia"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-4:  8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Oracle Span 6-7:  airstrikes => airstrike
Oracle Span 5-6:  conducted => conduct-01
Oracle Span 8-9:  Georgian => (country :name (name :op "Georgia"))
Oracle Span 4-5:  Russia => (country :name (name :op "Russia"))
Oracle Span 9-10:  targets => target-01

Incorrect span: 8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: 8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Missing span: airstrikes => airstrike
Missing span: targets => target-01
Dependencies:
1	On	_	IN	IN	_	6	prep	_	_
2	8	_	CD	CD	_	1	pobj	_	_
3	August	_	NNP	NNP	_	5	nn	_	_
4	2008	_	CD	CD	_	5	num	_	_
5	Russia	_	NNP	NNP	_	6	nsubj	_	_
6	conducted	_	VBD	VBD	_	0	root	_	_
7	airstrikes	_	NNS	NNS	_	6	dobj	_	_
8	on	_	IN	IN	_	6	prep	_	_
9	Georgian	_	JJ	JJ	_	10	amod	_	_
10	targets	_	NNS	NNS	_	8	pobj	_	_
11	.	_	.	.	_	6	punct	_	_

Oracle:
(c / conduct-01, ARG0, c2 / country)
(c / conduct-01, ARG1, a2 / airstrike)
(c / conduct-01, time, d / date-entity)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(d / date-entity, day, 8)
(d / date-entity, month, 8)
(d / date-entity, year, 2008)
(n / name, op, "Russia")
(n2 / name, op, "Georgia")
(t2 / target-01, ARG0, a2 / airstrike)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(2, 1, 0),Georgian,(country :name (name :op "Georgia")),false), Span(5,6,List(3),conducted,conduct-01,false), Span(1,4,List(7, 6, 5, 4),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false)),Map(2 -> "Georgia", 5 -> 8, 7 -> 2008, 1 -> name, 4 -> date-entity, 6 -> 8, 0 -> country, 3 -> conduct-01),Map(n -> name, 2 -> 2008, 8 -> 8, d -> date-entity, 82 -> 8, c -> country, c2 -> conduct-01))),[Ljava.lang.String;@7a34b7b8,Annotation([Ljava.lang.String;@58cd06cb,[Ljava.lang.String;@3be8821f,[Ljava.lang.String;@64b31700),Annotation([Ljava.lang.String;@3b65e559,[Ljava.lang.String;@bae47a0,[Ledu.cmu.lti.nlp.amr.Dependency;@74a9c4b0),Annotation([Ljava.lang.String;@85ec632,[Ljava.lang.String;@1c05a54d,[Ljava.lang.String;@65ef722a),Annotation([Ljava.lang.String;@5fd9b663,[Ljava.lang.String;@214894fc,[Ledu.cmu.lti.nlp.amr.Entity;@10567255))
AMR:
(c / country, consist, d / date-entity)
(c / country, name, n / name)
(c2 / conduct-01, time, d / date-entity)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Georgia")

Decoded in 37,406 microseconds
Sentence: The airstrikes escalated conflict in a separatist area of Georgia.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 7-8:  area => area
Span 3-4:  conflict => conflict-01
Span 2-3:  escalated => escalate-01
Span 9-10:  Georgia => (country :name (name :op "Georgia"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  airstrikes => airstrike
Oracle Span 7-8:  area => area
Oracle Span 3-4:  conflict => conflict-01
Oracle Span 2-3:  escalated => escalate-01
Oracle Span 9-10:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 6-7:  separatist => separatist

Missing span: separatist => separatist
Missing span: airstrikes => airstrike
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	airstrikes	_	NNS	NNS	_	3	nsubj	_	_
3	escalated	_	VBD	VBD	_	0	root	_	_
4	conflict	_	NN	NN	_	3	dobj	_	_
5	in	_	IN	IN	_	3	prep	_	_
6	a	_	DT	DT	_	8	det	_	_
7	separatist	_	JJ	JJ	_	8	amod	_	_
8	area	_	NN	NN	_	5	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	Georgia	_	NNP	NNP	_	9	pobj	_	_
11	.	_	.	.	_	3	punct	_	_

Oracle:
(a2 / area, mod, s / separatist)
(c / conflict-01, location, a2 / area)
(c2 / country, name, n / name)
(c2 / country, part, a2 / area)
(e / escalate-01, ARG0, a3 / airstrike)
(e / escalate-01, ARG1, c / conflict-01)
(n / name, op, "Georgia")

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(7,8,List(3),area,area,false), Span(3,4,List(4),conflict,conflict-01,false), Span(2,3,List(5),escalated,escalate-01,false)),Map(2 -> "Georgia", 5 -> escalate-01, 1 -> name, 4 -> conflict-01, 0 -> country, 3 -> area),Map(e -> escalate-01, n -> name, a -> area, c -> country, c2 -> conflict-01))),[Ljava.lang.String;@e362c57,Annotation([Ljava.lang.String;@1c4ee95c,[Ljava.lang.String;@79c4715d,[Ljava.lang.String;@5aa360ea),Annotation([Ljava.lang.String;@6548bb7d,[Ljava.lang.String;@e27ba81,[Ledu.cmu.lti.nlp.amr.Dependency;@54336c81),Annotation([Ljava.lang.String;@1556f2dd,[Ljava.lang.String;@35e52059,[Ljava.lang.String;@62577d6),Annotation([Ljava.lang.String;@49bd54f7,[Ljava.lang.String;@6b5f8707,[Ledu.cmu.lti.nlp.amr.Entity;@772485dd))
AMR:
(a / area, location, c / country)
(c / country, name, n / name)
(e / escalate-01, ARG1, c2 / conflict-01)
(e / escalate-01, ARG2, a / area)
(n / name, op, "Georgia")

Decoded in 28,084 microseconds
Sentence: On 8 August 2008 Russia conducted airstrikes on Georgian targets.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Georgian"))
Spans:
Span 1-4:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 5-6:  conducted => conduct-01
Span 8-9:  Georgian => (country :name (name :op "Georgia"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-4:  8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Oracle Span 6-7:  airstrikes => airstrike
Oracle Span 5-6:  conducted => conduct-01
Oracle Span 8-9:  Georgian => (country :name (name :op "Georgia"))
Oracle Span 4-5:  Russia => (country :name (name :op "Russia"))
Oracle Span 9-10:  targets => target-01

Incorrect span: 8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: 8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Missing span: airstrikes => airstrike
Missing span: targets => target-01
Dependencies:
1	On	_	IN	IN	_	6	prep	_	_
2	8	_	CD	CD	_	1	pobj	_	_
3	August	_	NNP	NNP	_	5	nn	_	_
4	2008	_	CD	CD	_	5	num	_	_
5	Russia	_	NNP	NNP	_	6	nsubj	_	_
6	conducted	_	VBD	VBD	_	0	root	_	_
7	airstrikes	_	NNS	NNS	_	6	dobj	_	_
8	on	_	IN	IN	_	6	prep	_	_
9	Georgian	_	JJ	JJ	_	10	amod	_	_
10	targets	_	NNS	NNS	_	8	pobj	_	_
11	.	_	.	.	_	6	punct	_	_

Oracle:
(c / conduct-01, ARG0, c2 / country)
(c / conduct-01, ARG1, a / airstrike)
(c / conduct-01, time, d / date-entity)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(d / date-entity, day, 8)
(d / date-entity, month, 8)
(d / date-entity, year, 2008)
(n / name, op, "Russia")
(n2 / name, op, "Georgia")
(t3 / target-01, ARG0, a / airstrike)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(2, 1, 0),Georgian,(country :name (name :op "Georgia")),false), Span(5,6,List(3),conducted,conduct-01,false), Span(1,4,List(7, 6, 5, 4),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false)),Map(2 -> "Georgia", 5 -> 8, 7 -> 2008, 1 -> name, 4 -> date-entity, 6 -> 8, 0 -> country, 3 -> conduct-01),Map(n -> name, 2 -> 2008, 8 -> 8, d -> date-entity, 82 -> 8, c -> country, c2 -> conduct-01))),[Ljava.lang.String;@5a12c728,Annotation([Ljava.lang.String;@79ab3a71,[Ljava.lang.String;@6e5bfdfc,[Ljava.lang.String;@3d829787),Annotation([Ljava.lang.String;@71652c98,[Ljava.lang.String;@51bde877,[Ledu.cmu.lti.nlp.amr.Dependency;@60b85ba1),Annotation([Ljava.lang.String;@492fc69e,[Ljava.lang.String;@117632cf,[Ljava.lang.String;@2fb68ec6),Annotation([Ljava.lang.String;@d71adc2,[Ljava.lang.String;@3add81c4,[Ledu.cmu.lti.nlp.amr.Entity;@1a1d3c1a))
AMR:
(c / country, consist, d / date-entity)
(c / country, name, n / name)
(c2 / conduct-01, time, d / date-entity)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Georgia")

Decoded in 37,343 microseconds
Sentence: The airstrikes escalated conflict in a separatist area of Georgia.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 7-8:  area => area
Span 3-4:  conflict => conflict-01
Span 2-3:  escalated => escalate-01
Span 9-10:  Georgia => (country :name (name :op "Georgia"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  airstrikes => airstrike
Oracle Span 7-8:  area => area
Oracle Span 3-4:  conflict => conflict-01
Oracle Span 2-3:  escalated => escalate-01
Oracle Span 9-10:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 6-7:  separatist => separatist

Missing span: separatist => separatist
Missing span: airstrikes => airstrike
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	airstrikes	_	NNS	NNS	_	3	nsubj	_	_
3	escalated	_	VBD	VBD	_	0	root	_	_
4	conflict	_	NN	NN	_	3	dobj	_	_
5	in	_	IN	IN	_	3	prep	_	_
6	a	_	DT	DT	_	8	det	_	_
7	separatist	_	JJ	JJ	_	8	amod	_	_
8	area	_	NN	NN	_	5	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	Georgia	_	NNP	NNP	_	9	pobj	_	_
11	.	_	.	.	_	3	punct	_	_

Oracle:
(a2 / area, mod, s / separatist)
(c2 / country, name, n / name)
(c2 / country, part, a2 / area)
(e / escalate-01, ARG0, a / airstrike)
(e / escalate-01, ARG1, c / conflict-01)
(e / escalate-01, location, a2 / area)
(n / name, op, "Georgia")

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(7,8,List(3),area,area,false), Span(3,4,List(4),conflict,conflict-01,false), Span(2,3,List(5),escalated,escalate-01,false)),Map(2 -> "Georgia", 5 -> escalate-01, 1 -> name, 4 -> conflict-01, 0 -> country, 3 -> area),Map(e -> escalate-01, n -> name, a -> area, c -> country, c2 -> conflict-01))),[Ljava.lang.String;@1c65121,Annotation([Ljava.lang.String;@159e366,[Ljava.lang.String;@57dc9128,[Ljava.lang.String;@24528a25),Annotation([Ljava.lang.String;@17ae98d7,[Ljava.lang.String;@59221b97,[Ledu.cmu.lti.nlp.amr.Dependency;@6ac4944a),Annotation([Ljava.lang.String;@5a772895,[Ljava.lang.String;@39fc6b2c,[Ljava.lang.String;@704b2127),Annotation([Ljava.lang.String;@3ee39da0,[Ljava.lang.String;@5d332969,[Ledu.cmu.lti.nlp.amr.Entity;@7cc9ce8))
AMR:
(a / area, location, c / country)
(c / country, name, n / name)
(e / escalate-01, ARG1, c2 / conflict-01)
(e / escalate-01, ARG2, a / area)
(n / name, op, "Georgia")

Decoded in 27,924 microseconds
Sentence: The conflict is a test of Russia's power and military reach.

NER Entity: (country :name (name :op "Russia"))
Spans:
Span 1-2:  conflict => conflict-01
Span 8-9:  power => power
Span 11-12:  reach => reach-01
Span 4-5:  test => test-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 1-2:  conflict => conflict-01
Oracle Span 10-11:  military => military
Oracle Span 8-9:  power => power
Oracle Span 11-12:  reach => reach
Oracle Span 6-7:  Russia => (country :name (name :op "Russia"))
Oracle Span 4-5:  test => test-01

Incorrect span: reach => reach-01
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: and => and
Missing span: reach => reach
Missing span: military => military
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	conflict	_	NN	NN	_	5	nsubj	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	a	_	DT	DT	_	5	det	_	_
5	test	_	NN	NN	_	0	root	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	Russia	_	NNP	NNP	_	9	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	power	_	NN	NN	_	6	pobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	military	_	JJ	JJ	_	12	amod	_	_
12	reach	_	NN	NN	_	9	conj	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, p / power)
(a / and, op, r / reach)
(c2 / country, name, n / name)
(n / name, op, "Russia")
(p / power, poss, c2 / country)
(r / reach, mod, m / military)
(r / reach, poss, c2 / country)
(t / test-01, ARG1, a / and)
(t / test-01, instrument, c / conflict-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),reach,reach-01,false), Span(8,9,List(1),power,power,false), Span(4,5,List(2),test,test-01,false), Span(1,2,List(3),conflict,conflict-01,false)),Map(2 -> test-01, 1 -> power, 0 -> reach-01, 3 -> conflict-01),Map(t -> test-01, p -> power, r -> reach-01, c -> conflict-01))),[Ljava.lang.String;@2e27d72f,Annotation([Ljava.lang.String;@c0b41d6,[Ljava.lang.String;@4837595f,[Ljava.lang.String;@2bffa76d),Annotation([Ljava.lang.String;@3b718392,[Ljava.lang.String;@6d2260db,[Ledu.cmu.lti.nlp.amr.Dependency;@1f2d2181),Annotation([Ljava.lang.String;@49bf29c6,[Ljava.lang.String;@7ee55e70,[Ljava.lang.String;@3fcdcf),Annotation([Ljava.lang.String;@7668d560,[Ljava.lang.String;@46292372,[Ledu.cmu.lti.nlp.amr.Entity;@126be319))
AMR:
(t / test-01, ARG0, c / conflict-01)
(t / test-01, ARG1, p / power)
(t / test-01, ARG2, r / reach-01)

Decoded in 33,213 microseconds
Sentence: Earlier on 8 August 2008 Russian troops and armored vehicles entered South Ossetia.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "South" :op "Ossetia"))
Spans:
Span 2-5:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 8-9:  armored => armor-01
Span 0-1:  Earlier => early
Span 10-11:  entered => enter-01
Span 11-13:  South Ossetia => (country-region :name (name :op "Ossetia" :op "South"))
Span 9-10:  vehicles => vehicle

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-5:  8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Oracle Span 7-8:  and => and
Oracle Span 8-9:  armored => armor-01
Oracle Span 0-1:  Earlier => early
Oracle Span 10-11:  entered => enter-01
Oracle Span 5-6:  Russian => (country :name (name :op "Russia"))
Oracle Span 11-13:  South Ossetia => (country-region :name (name :op "Ossetia" :op "South"))
Oracle Span 6-7:  troops => troop
Oracle Span 9-10:  vehicles => vehicle

Incorrect span: 8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: 8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Missing span: and => and
Missing span: troops => troop
Dependencies:
1	Earlier	_	RBR	RBR	_	11	advmod	_	_
2	on	_	IN	IN	_	1	prep	_	_
3	8	_	CD	CD	_	2	pobj	_	_
4	August	_	NNP	NNP	_	2	tmod	_	_
5	2008	_	CD	CD	_	4	num	_	_
6	Russian	_	JJ	JJ	_	7	amod	_	_
7	troops	_	NNS	NNS	_	11	nsubj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	armored	_	JJ	JJ	_	10	amod	_	_
10	vehicles	_	NNS	NNS	_	7	conj	_	_
11	entered	_	VBD	VBD	_	0	root	_	_
12	South	_	NNP	NNP	_	13	nn	_	_
13	Ossetia	_	NNP	NNP	_	11	dobj	_	_
14	.	_	.	.	_	11	punct	_	_

Oracle:
(a / and, op, t / troop)
(a / and, op, v / vehicle)
(a2 / armor-01, ARG1, v / vehicle)
(c / country, name, n / name)
(c2 / country-region, name, n2 / name)
(d / date-entity, day, 8)
(d / date-entity, month, 8)
(d / date-entity, year, 2008)
(e / enter-01, ARG0, a / and)
(e / enter-01, ARG1, c2 / country-region)
(e / enter-01, time, e2 / early)
(e2 / early, op, d / date-entity)
(n / name, op, "Russia")
(n2 / name, op, "Ossetia")
(n2 / name, op, "South")
(t / troop, mod, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(11,13,List(3, 2, 1, 0),South Ossetia,(country-region :name (name :op "Ossetia" :op "South")),false), Span(10,11,List(4),entered,enter-01,false), Span(9,10,List(5),vehicles,vehicle,false), Span(8,9,List(6),armored,armor-01,false), Span(2,5,List(10, 9, 8, 7),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false), Span(0,1,List(11),Earlier,early,false)),Map(2 -> "Ossetia", 5 -> vehicle, 8 -> 8, 7 -> date-entity, 1 -> name, 11 -> early, 4 -> enter-01, 6 -> armor-01, 9 -> 8, 0 -> country-region, 10 -> 2008, 3 -> "South"),Map(e -> enter-01, n -> name, 2 -> 2008, 8 -> 8, e2 -> early, d -> date-entity, v -> vehicle, a -> armor-01, 82 -> 8, c -> country-region))),[Ljava.lang.String;@6c44052e,Annotation([Ljava.lang.String;@5c371e13,[Ljava.lang.String;@530a8454,[Ljava.lang.String;@1e34c607),Annotation([Ljava.lang.String;@5215cd9a,[Ljava.lang.String;@36b6964d,[Ledu.cmu.lti.nlp.amr.Dependency;@31198ceb),Annotation([Ljava.lang.String;@9257031,[Ljava.lang.String;@75201592,[Ljava.lang.String;@7726e185),Annotation([Ljava.lang.String;@aa5455e,[Ljava.lang.String;@282308c3,[Ledu.cmu.lti.nlp.amr.Entity;@5dda14d0))
AMR:
(a / armor-01, ARG1, c / country-region)
(c / country-region, name, n / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(e / enter-01, ARG0, v / vehicle)
(e / enter-01, ARG1, c / country-region)
(e / enter-01, time, e2 / early)
(e2 / early, op, d / date-entity)
(n / name, op, "Ossetia")
(n / name, op, "South")

Decoded in 75,668 microseconds
Sentence: Presence of Russian troops supported the separatist area in its bitter conflict with Georgia.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 7-8:  area => area
Span 11-12:  conflict => conflict-01
Span 13-14:  Georgia => (country :name (name :op "Georgia"))
Span 4-5:  supported => support-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  area => area
Oracle Span 10-11:  bitter => bitter
Oracle Span 11-12:  conflict => conflict-01
Oracle Span 13-14:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 0-1:  Presence => presence
Oracle Span 2-3:  Russian => (country :name (name :op "Russia"))
Oracle Span 6-7:  separatist => separatist
Oracle Span 4-5:  supported => support-01
Oracle Span 3-4:  troops => troop

Missing span: Russian => (country :name (name :op "Russia"))
Missing span: bitter => bitter
Missing span: separatist => separatist
Missing span: Presence => presence
Missing span: troops => troop
Dependencies:
1	Presence	_	NNP	NNP	_	5	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	Russian	_	JJ	JJ	_	4	amod	_	_
4	troops	_	NNS	NNS	_	2	pobj	_	_
5	supported	_	VBD	VBD	_	0	root	_	_
6	the	_	DT	DT	_	8	det	_	_
7	separatist	_	JJ	JJ	_	8	amod	_	_
8	area	_	NN	NN	_	5	dobj	_	_
9	in	_	IN	IN	_	5	prep	_	_
10	its	_	PRP$	PRP$	_	12	poss	_	_
11	bitter	_	JJ	JJ	_	12	amod	_	_
12	conflict	_	NN	NN	_	9	pobj	_	_
13	with	_	IN	IN	_	5	prep	_	_
14	Georgia	_	NNP	NNP	_	13	pobj	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(a2 / area, mod, s2 / separatist)
(c / country, name, n / name)
(c2 / conflict-01, ARG0, a2 / area)
(c2 / conflict-01, ARG1, c3 / country)
(c2 / conflict-01, manner, b / bitter)
(c3 / country, name, n2 / name)
(n / name, op, "Russia")
(n2 / name, op, "Georgia")
(p / presence, poss, t / troop)
(s / support-01, ARG0, p / presence)
(s / support-01, ARG1, c2 / conflict-01)
(t / troop, mod, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(11,12,List(3),conflict,conflict-01,false), Span(7,8,List(4),area,area,false), Span(4,5,List(5),supported,support-01,false)),Map(2 -> "Georgia", 5 -> support-01, 1 -> name, 4 -> area, 0 -> country, 3 -> conflict-01),Map(n -> name, s -> support-01, a -> area, c -> country, c2 -> conflict-01))),[Ljava.lang.String;@1db0ec27,Annotation([Ljava.lang.String;@3d9fc57a,[Ljava.lang.String;@d4ab71a,[Ljava.lang.String;@3b4ef7),Annotation([Ljava.lang.String;@1af05b03,[Ljava.lang.String;@5987e932,[Ledu.cmu.lti.nlp.amr.Dependency;@1ad777f),Annotation([Ljava.lang.String;@5bbbdd4b,[Ljava.lang.String;@438bad7c,[Ljava.lang.String;@25230246),Annotation([Ljava.lang.String;@4fdf8f12,[Ljava.lang.String;@4a8b5227,[Ledu.cmu.lti.nlp.amr.Entity;@54f5f647))
AMR:
(a / area, location, c / country)
(c / country, name, n / name)
(c2 / conflict-01, ARG0, a / area)
(n / name, op, "Georgia")
(s / support-01, ARG1, a / area)

Decoded in 39,458 microseconds
Sentence: The U.S., other Western nations and NATO condemned the violence.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (organization :name (name :op "NATO"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 8-9:  condemned => condemn-01
Span 5-6:  nations => nation
Span 3-4:  other => other
Span 10-11:  violence => violence
Span 4-5:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 8-9:  condemned => condemn-01
Oracle Span 5-6:  nations => nation
Oracle Span 7-8:  NATO => (military :name (name :op "NATO"))
Oracle Span 3-4:  other => other
Oracle Span 1-2:  U.S. => (country :name (name :op "U.S."))
Oracle Span 10-11:  violence => violence
Oracle Span 4-5:  Western => (world-region :name (name :op "West"))

Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: NATO => (military :name (name :op "NATO"))
Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	U.S.	_	NNP	NNP	_	9	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	other	_	JJ	JJ	_	6	amod	_	_
5	Western	_	JJ	JJ	_	6	amod	_	_
6	nations	_	NNS	NNS	_	2	conj	_	_
7	and	_	CC	CC	_	2	cc	_	_
8	NATO	_	NNP	NNP	_	2	conj	_	_
9	condemned	_	VBD	VBD	_	0	root	_	_
10	the	_	DT	DT	_	11	det	_	_
11	violence	_	NN	NN	_	9	dobj	_	_
12	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, c2 / country)
(a / and, op, m / military)
(a / and, op, n2 / nation)
(c / condemn-01, ARG0, a / and)
(c / condemn-01, ARG1, v / violence)
(c2 / country, name, n / name)
(m / military, name, n4 / name)
(n / name, op, "U.S.")
(n2 / nation, location, w / world-region)
(n2 / nation, mod, o / other)
(n3 / name, op, "West")
(n4 / name, op, "NATO")
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),violence,violence,false), Span(8,9,List(1),condemned,condemn-01,false), Span(5,6,List(2),nations,nation,false), Span(4,5,List(5, 4, 3),Western,(world-region :name (name :op "West")),false), Span(3,4,List(6),other,other,false)),Map(2 -> nation, 5 -> "West", 1 -> condemn-01, 4 -> name, 6 -> other, 0 -> violence, 3 -> world-region),Map(w -> world-region, n -> nation, v -> violence, c -> condemn-01, o -> other, n2 -> name))),[Ljava.lang.String;@6979efad,Annotation([Ljava.lang.String;@5a6d5a8f,[Ljava.lang.String;@4a67318f,[Ljava.lang.String;@315ba14a),Annotation([Ljava.lang.String;@17f9344b,[Ljava.lang.String;@27f0ad19,[Ledu.cmu.lti.nlp.amr.Dependency;@54e81b21),Annotation([Ljava.lang.String;@38d5b107,[Ljava.lang.String;@6650813a,[Ljava.lang.String;@44ea608c),Annotation([Ljava.lang.String;@50cf5a23,[Ljava.lang.String;@450794b4,[Ledu.cmu.lti.nlp.amr.Entity;@273c947f))
AMR:
(c / condemn-01, ARG1, v / violence)
(c / condemn-01, ARG2, o / other)
(n / nation, location, w / world-region)
(n / nation, mod, o / other)
(n2 / name, op, "West")
(w / world-region, name, n2 / name)

Decoded in 76,984 microseconds
Sentence: The U.S., other Western nations and NATO demanded a cease-fire.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (organization :name (name :op "NATO"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 10-11:  cease => cease-01
Span 8-9:  demanded => demand-01
Span 5-6:  nations => nation
Span 3-4:  other => other
Span 4-5:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 10-11:  cease => cease-01
Oracle Span 8-9:  demanded => demand-01
Oracle Span 12-13:  fire => fire-01
Oracle Span 5-6:  nations => nation
Oracle Span 7-8:  NATO => (military :name (name :op "NATO"))
Oracle Span 3-4:  other => other
Oracle Span 1-2:  U.S. => (country :name (name :op "U.S."))
Oracle Span 4-5:  Western => (world-region :name (name :op "West"))

Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: NATO => (military :name (name :op "NATO"))
Missing span: fire => fire-01
Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	U.S.	_	NNP	NNP	_	9	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	other	_	JJ	JJ	_	6	amod	_	_
5	Western	_	JJ	JJ	_	6	amod	_	_
6	nations	_	NNS	NNS	_	2	conj	_	_
7	and	_	CC	CC	_	2	cc	_	_
8	NATO	_	NNP	NNP	_	2	conj	_	_
9	demanded	_	VBD	VBD	_	0	root	_	_
10	a	_	DT	DT	_	11	det	_	_
11	cease-fire	_	NN	NN	_	9	dobj	_	_
12	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, m / military)
(a / and, op, n2 / nation)
(c / country, name, n / name)
(c2 / cease-01, ARG1, f / fire-01)
(d / demand-01, ARG0, a / and)
(d / demand-01, ARG1, c2 / cease-01)
(m / military, name, n4 / name)
(n / name, op, "U.S.")
(n2 / nation, location, w / world-region)
(n2 / nation, mod, o / other)
(n3 / name, op, "West")
(n4 / name, op, "NATO")
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),cease,cease-01,false), Span(8,9,List(1),demanded,demand-01,false), Span(5,6,List(2),nations,nation,false), Span(4,5,List(5, 4, 3),Western,(world-region :name (name :op "West")),false), Span(3,4,List(6),other,other,false)),Map(2 -> nation, 5 -> "West", 1 -> demand-01, 4 -> name, 6 -> other, 0 -> cease-01, 3 -> world-region),Map(w -> world-region, n -> nation, d -> demand-01, c -> cease-01, o -> other, n2 -> name))),[Ljava.lang.String;@30457e14,Annotation([Ljava.lang.String;@1af1347d,[Ljava.lang.String;@632aa1a3,[Ljava.lang.String;@20765ed5),Annotation([Ljava.lang.String;@3b582111,[Ljava.lang.String;@2899a8db,[Ledu.cmu.lti.nlp.amr.Dependency;@1e8823d2),Annotation([Ljava.lang.String;@c1a4620,[Ljava.lang.String;@76b0ae1b,[Ljava.lang.String;@130a0f66),Annotation([Ljava.lang.String;@4c432866,[Ljava.lang.String;@12365c88,[Ledu.cmu.lti.nlp.amr.Entity;@6105f8a3))
AMR:
(d / demand-01, ARG1, c / cease-01)
(n / nation, location, w / world-region)
(n / nation, mod, o / other)
(n2 / name, op, "West")
(w / world-region, name, n2 / name)
(w / world-region, op, c / cease-01)

Decoded in 54,445 microseconds
Sentence: U.S. Secretary of State Condoleezza Rice demanded Russia withdraw its forces.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (person :name (name :op "Condoleezza" :op "Rice"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 4-6:  Condoleezza Rice => (person :name (name :op "Rice" :op "Condoleezza"))
Span 6-7:  demanded => demand-01
Span 8-9:  withdraw => withdraw-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-6:  Condoleezza Rice => (person :name (name :op "Rice" :op "Condoleezza"))
Oracle Span 6-7:  demanded => demand-01
Oracle Span 10-11:  forces => force
Oracle Span 7-8:  Russia => (country :name (name :op "Russia"))
Oracle Span 1-2:  Secretary => (have-org-role-91 :ARG2 secretary)
Oracle Span 3-4:  State => state
Oracle Span 0-1:  U.S. => (country :name (name :op "U.S."))
Oracle Span 8-9:  withdraw => withdraw-01

Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: forces => force
Missing span: Secretary => (have-org-role-91 :ARG2 secretary)
Missing span: State => state
Dependencies:
1	U.S.	_	NNP	NNP	_	2	nn	_	_
2	Secretary	_	NNP	NNP	_	7	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	State	_	NNP	NNP	_	6	nn	_	_
5	Condoleezza	_	NNP	NNP	_	6	nn	_	_
6	Rice	_	NNP	NNP	_	3	pobj	_	_
7	demanded	_	VBD	VBD	_	0	root	_	_
8	Russia	_	NNP	NNP	_	9	nsubj	_	_
9	withdraw	_	VB	VB	_	7	ccomp	_	_
10	its	_	PRP$	PRP$	_	11	poss	_	_
11	forces	_	NNS	NNS	_	9	dobj	_	_
12	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(d / demand-01, ARG0, p / person)
(d / demand-01, ARG1, w / withdraw-01)
(f / force, poss, c2 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, s / secretary)
(n / name, op, "Condoleezza")
(n / name, op, "Rice")
(n2 / name, op, "U.S.")
(n4 / name, op, "Russia")
(p / person, name, n / name)
(s / secretary, mod, s2 / state)
(w / withdraw-01, ARG0, c2 / country)
(w / withdraw-01, ARG1, f / force)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),withdraw,withdraw-01,false), Span(6,7,List(1),demanded,demand-01,false), Span(4,6,List(5, 4, 3, 2),Condoleezza Rice,(person :name (name :op "Rice" :op "Condoleezza")),false)),Map(2 -> person, 5 -> "Condoleezza", 1 -> demand-01, 4 -> "Rice", 0 -> withdraw-01, 3 -> name),Map(n -> name, w -> withdraw-01, d -> demand-01, p -> person))),[Ljava.lang.String;@2237bada,Annotation([Ljava.lang.String;@77e2a6e2,[Ljava.lang.String;@5710768a,[Ljava.lang.String;@199e4c2b),Annotation([Ljava.lang.String;@6e0d4a8,[Ljava.lang.String;@64d7b720,[Ledu.cmu.lti.nlp.amr.Dependency;@30272916),Annotation([Ljava.lang.String;@5bb3d42d,[Ljava.lang.String;@5bf61e67,[Ljava.lang.String;@2c1dc8e),Annotation([Ljava.lang.String;@b273a59,[Ljava.lang.String;@4e7095ac,[Ledu.cmu.lti.nlp.amr.Entity;@251ebf23))
AMR:
(d / demand-01, ARG0, p / person)
(d / demand-01, ARG1, w / withdraw-01)
(n / name, op, "Condoleezza")
(n / name, op, "Rice")
(p / person, name, n / name)

Decoded in 30,543 microseconds
Sentence: Russian soldiers remained in Georgia.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 4-5:  Georgia => (country :name (name :op "Georgia"))
Span 2-3:  remained => remain-01
Span 1-2:  soldiers => soldier

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 2-3:  remained => remain-01
Oracle Span 0-1:  Russian => (country :name (name :op "Russia"))
Oracle Span 1-2:  soldiers => soldier

Missing span: Russian => (country :name (name :op "Russia"))
Dependencies:
1	Russian	_	JJ	JJ	_	2	amod	_	_
2	soldiers	_	NNS	NNS	_	3	nsubj	_	_
3	remained	_	VBD	VBD	_	0	root	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Georgia	_	NNP	NNP	_	4	pobj	_	_
6	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Russia")
(n2 / name, op, "Georgia")
(r / remain-01, ARG1, s / soldier)
(r / remain-01, location, c2 / country)
(s / soldier, mod, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(2,3,List(3),remained,remain-01,false), Span(1,2,List(4),soldiers,soldier,false)),Map(2 -> "Georgia", 1 -> name, 4 -> soldier, 0 -> country, 3 -> remain-01),Map(n -> name, s -> soldier, r -> remain-01, c -> country))),[Ljava.lang.String;@29b732a2,Annotation([Ljava.lang.String;@1b70203f,[Ljava.lang.String;@51671b08,[Ljava.lang.String;@15051a0),Annotation([Ljava.lang.String;@1162410a,[Ljava.lang.String;@b09fac1,[Ledu.cmu.lti.nlp.amr.Dependency;@62df0ff3),Annotation([Ljava.lang.String;@61019f59,[Ljava.lang.String;@62e8f862,[Ljava.lang.String;@26f3d90c),Annotation([Ljava.lang.String;@3c49fab6,[Ljava.lang.String;@515f4131,[Ledu.cmu.lti.nlp.amr.Entity;@74518890))
AMR:
(c / country, name, n / name)
(n / name, op, "Georgia")
(r / remain-01, ARG1, s / soldier)
(r / remain-01, location, c / country)

Decoded in 15,666 microseconds
Sentence: Georgian officials report there was at least 1 airstrike on the Black Sea port of Poti late on 8 August 2008.

NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (country :name (name :op "Black" :op "Sea"))
NER Entity: (country :name (name :op "Poti"))
mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (thing :name (name :op "Georgian"))
Spans:
Span 18-21:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 11-13:  Black Sea => (country :name (name :op "Black" :op "Sea"))
Span 0-1:  Georgian => (country :name (name :op "Georgia"))
Span 16-17:  late => late
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 13-14:  port => port

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 7-8:  1 => 1
Oracle Span 18-21:  8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Oracle Span 8-9:  airstrike => airstrike
Oracle Span 11-13:  Black Sea => (sea :name (name :op "Sea" :op "Black"))
Oracle Span 0-1:  Georgian => (country :name (name :op "Georgia"))
Oracle Span 16-17:  late => late
Oracle Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 13-14:  port => port
Oracle Span 15-16:  Poti => (name :op "Poti")
Oracle Span 2-3:  report => report-01

Incorrect span: 8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Incorrect span: Black Sea => (country :name (name :op "Black" :op "Sea"))
Missing span: Poti => (name :op "Poti")
Missing span: Black Sea => (sea :name (name :op "Sea" :op "Black"))
Missing span: 8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Missing span: report => report-01
Missing span: airstrike => airstrike
Missing span: 1 => 1
Dependencies:
1	Georgian	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	3	nsubj	_	_
3	report	_	VBP	VBP	_	0	root	_	_
4	there	_	EX	EX	_	5	expl	_	_
5	was	_	VBD	VBD	_	3	ccomp	_	_
6	at	_	IN	IN	_	8	quantmod	_	_
7	least	_	JJS	JJS	_	6	mwe	_	_
8	1	_	CD	CD	_	5	nsubj	_	_
9	airstrike	_	JJ	JJ	_	8	amod	_	_
10	on	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	14	det	_	_
12	Black	_	NNP	NNP	_	14	nn	_	_
13	Sea	_	NNP	NNP	_	14	nn	_	_
14	port	_	NN	NN	_	10	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	Poti	_	NNP	NNP	_	15	pobj	_	_
17	late	_	RB	RB	_	5	advmod	_	_
18	on	_	IN	IN	_	17	prep	_	_
19	8	_	CD	CD	_	18	pobj	_	_
20	August	_	NNP	NNP	_	18	tmod	_	_
21	2008	_	CD	CD	_	20	num	_	_
22	.	_	.	.	_	3	punct	_	_

Oracle:
(a3 / airstrike, location, p / port)
(a3 / airstrike, time, l2 / late)
(c / country, name, n / name)
(d / date-entity, day, 8)
(d / date-entity, month, 8)
(d / date-entity, year, 2008)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(l2 / late, op, d / date-entity)
(n / name, op, "Georgia")
(n2 / name, op, "Poti")
(n3 / name, op, "Black")
(n3 / name, op, "Sea")
(p / port, location, s / sea)
(p / port, name, n2 / name)
(r / report-01, ARG1, a3 / airstrike)
(s / sea, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(18,21,List(3, 2, 1, 0),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false), Span(16,17,List(4),late,late,false), Span(13,14,List(5),port,port,false), Span(11,13,List(9, 8, 7, 6),Black Sea,(country :name (name :op "Black" :op "Sea")),false), Span(1,2,List(11, 10),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(14, 13, 12),Georgian,(country :name (name :op "Georgia")),false)),Map(2 -> 8, 5 -> port, 12 -> country, 8 -> "Black", 7 -> name, 1 -> 8, 4 -> late, 11 -> official, 14 -> "Georgia", 6 -> country, 0 -> date-entity, 9 -> "Sea", 3 -> 2008, 10 -> have-org-role-91, 13 -> name),Map(n -> name, h -> have-org-role-91, 2 -> 2008, 8 -> 8, d -> date-entity, p -> port, 82 -> 8, c -> country, l -> late, o -> official, n2 -> name, c2 -> country))),[Ljava.lang.String;@4c5204af,Annotation([Ljava.lang.String;@3f3ddbd9,[Ljava.lang.String;@14c053c6,[Ljava.lang.String;@6c2d4cc6),Annotation([Ljava.lang.String;@30865a90,[Ljava.lang.String;@6134ac4a,[Ledu.cmu.lti.nlp.amr.Dependency;@777c9dc9),Annotation([Ljava.lang.String;@71b1a49c,[Ljava.lang.String;@73e132e0,[Ljava.lang.String;@3773862a),Annotation([Ljava.lang.String;@2472c7d8,[Ljava.lang.String;@589b028e,[Ledu.cmu.lti.nlp.amr.Entity;@22175d4f))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, domain, h / have-org-role-91)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(l / late, op, d / date-entity)
(n / name, op, "Black")
(n / name, op, "Sea")
(n2 / name, op, "Georgia")
(p / port, mod, c / country)
(p / port, poss, c2 / country)

Decoded in 414,984 microseconds
Sentence: Russia and Georgia showed no indication of relenting.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 2-3:  Georgia => (country :name (name :op "Georgia"))
Span 5-6:  indication => indicate-01
Span 4-5:  no => -
Span 3-4:  showed => show-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 2-3:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 5-6:  indication => indicate-01
Oracle Span 4-5:  no => -
Oracle Span 7-8:  relenting => relent-01
Oracle Span 0-1:  Russia => (country :name (name :op "Russia"))
Oracle Span 3-4:  showed => show-01

Missing span: Russia => (country :name (name :op "Russia"))
Missing span: and => and
Missing span: relenting => relent-01
Dependencies:
1	Russia	_	NNP	NNP	_	4	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Georgia	_	NNP	NNP	_	1	conj	_	_
4	showed	_	VBD	VBD	_	0	root	_	_
5	no	_	DT	DT	_	6	neg	_	_
6	indication	_	NN	NN	_	4	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	relenting	_	VBG	VBG	_	7	pcomp	_	_
9	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(i / indicate-01, ARG1, r / relent-01)
(i / indicate-01, polarity, - / -)
(n / name, op, "Russia")
(n2 / name, op, "Georgia")
(r / relent-01, ARG0, a / and)
(s / show-01, ARG0, a / and)
(s / show-01, ARG1, i / indicate-01)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),indication,indicate-01,false), Span(4,5,List(1),no,-,false), Span(3,4,List(2),showed,show-01,false), Span(2,3,List(5, 4, 3),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> show-01, 5 -> "Georgia", 1 -> -, 4 -> name, 0 -> indicate-01, 3 -> country),Map(n -> name, s -> show-01, i -> indicate-01, - -> -, c -> country))),[Ljava.lang.String;@9fecdf1,Annotation([Ljava.lang.String;@3b809711,[Ljava.lang.String;@3b0f7d9d,[Ljava.lang.String;@236ab296),Annotation([Ljava.lang.String;@5c84624f,[Ljava.lang.String;@63034ed1,[Ledu.cmu.lti.nlp.amr.Dependency;@232024b9),Annotation([Ljava.lang.String;@55a8dc49,[Ljava.lang.String;@2a415aa9,[Ljava.lang.String;@53cdecf6),Annotation([Ljava.lang.String;@71ea1fda,[Ljava.lang.String;@62b3df3a,[Ledu.cmu.lti.nlp.amr.Entity;@420745d7))
AMR:
(c / country, name, n / name)
(i / indicate-01, polarity, - / -)
(n / name, op, "Georgia")
(s / show-01, ARG0, c / country)
(s / show-01, ARG1, i / indicate-01)

Decoded in 55,794 microseconds
Sentence: Russian Prime Minister Vladimir V. Putin stated that war has started.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Vladimir" :op "V." :op "Putin"))
Spans:
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 1-2:  Prime => prime
Span 10-11:  started => start-01
Span 3-6:  Vladimir V. Putin => (person :name (name :op "Vladimir" :op "V." :op "Putin"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  has => have-org-role-91
Oracle Span 2-3:  Minister => minister
Oracle Span 1-2:  Prime => prime
Oracle Span 0-1:  Russian => (country :name (name :op "Russia"))
Oracle Span 10-11:  started => start-01
Oracle Span 6-7:  stated => state-01
Oracle Span 3-6:  Vladimir V. Putin => (person :name (name :op "Putin" :op "V." :op "Vladimir"))
Oracle Span 8-9:  war => war

Incorrect span: Vladimir V. Putin => (person :name (name :op "Vladimir" :op "V." :op "Putin"))
Incorrect span: Minister => (have-org-role-91 :ARG2 minister)
Missing span: Vladimir V. Putin => (person :name (name :op "Putin" :op "V." :op "Vladimir"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: stated => state-01
Missing span: war => war
Missing span: Minister => minister
Missing span: has => have-org-role-91
Dependencies:
1	Russian	_	NNP	NNP	_	6	nn	_	_
2	Prime	_	NNP	NNP	_	6	nn	_	_
3	Minister	_	NNP	NNP	_	6	nn	_	_
4	Vladimir	_	NNP	NNP	_	6	nn	_	_
5	V.	_	NNP	NNP	_	6	nn	_	_
6	Putin	_	NNP	NNP	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	11	mark	_	_
9	war	_	NN	NN	_	11	nsubj	_	_
10	has	_	VBZ	VBZ	_	11	aux	_	_
11	started	_	VBN	VBN	_	7	ccomp	_	_
12	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p2 / prime)
(n / name, op, "Putin")
(n / name, op, "V.")
(n / name, op, "Vladimir")
(n2 / name, op, "Russia")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, s2 / start-01)
(s2 / start-01, ARG1, w / war)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),started,start-01,false), Span(3,6,List(5, 4, 3, 2, 1),Vladimir V. Putin,(person :name (name :op "Vladimir" :op "V." :op "Putin")),false), Span(2,3,List(7, 6),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(8),Prime,prime,false)),Map(2 -> name, 5 -> "Putin", 8 -> prime, 7 -> minister, 1 -> person, 4 -> "V.", 6 -> have-org-role-91, 0 -> start-01, 3 -> "Vladimir"),Map(n -> name, h -> have-org-role-91, p2 -> prime, s -> start-01, m -> minister, p -> person))),[Ljava.lang.String;@7e11ab3d,Annotation([Ljava.lang.String;@5fa47fea,[Ljava.lang.String;@2392212b,[Ljava.lang.String;@5b43e173),Annotation([Ljava.lang.String;@28f8e165,[Ljava.lang.String;@545f80bf,[Ledu.cmu.lti.nlp.amr.Dependency;@66f66866),Annotation([Ljava.lang.String;@22fa55b2,[Ljava.lang.String;@4d666b41,[Ljava.lang.String;@6594402a),Annotation([Ljava.lang.String;@30f4b1a6,[Ljava.lang.String;@405325cf,[Ledu.cmu.lti.nlp.amr.Entity;@3e1162e7))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p2 / prime)
(n / name, op, "Putin")
(n / name, op, "V.")
(n / name, op, "Vladimir")
(p / person, name, n / name)
(s / start-01, ARG0, p / person)

Decoded in 37,445 microseconds
Sentence: Georgian President Mikheil Saakashvili accused Russia of a well-planned invasion.

NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (person :name (name :op "Mikheil" :op "Saakashvili"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Georgian"))
Spans:
Span 4-5:  accused => accuse-01
Span 0-1:  Georgian => (country :name (name :op "Georgia"))
Span 11-12:  invasion => invade-01
Span 2-4:  Mikheil Saakashvili => (person :name (name :op "Mikheil" :op "Saakashvili"))
Span 10-11:  planned => plan-01
Span 1-2:  President => (have-org-role-91 :ARG2 president)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  accused => accuse-01
Oracle Span 0-1:  Georgian => (country :name (name :op "Georgia"))
Oracle Span 11-12:  invasion => invade-01
Oracle Span 2-4:  Mikheil Saakashvili => (person :name (name :op "Saakashvili" :op "Mikheil"))
Oracle Span 10-11:  planned => plan-01
Oracle Span 1-2:  President => (have-org-role-91 :ARG2 president)
Oracle Span 5-6:  Russia => (country :name (name :op "Russia"))

Incorrect span: Mikheil Saakashvili => (person :name (name :op "Mikheil" :op "Saakashvili"))
Missing span: Mikheil Saakashvili => (person :name (name :op "Saakashvili" :op "Mikheil"))
Missing span: Russia => (country :name (name :op "Russia"))
Dependencies:
1	Georgian	_	JJ	JJ	_	4	amod	_	_
2	President	_	NNP	NNP	_	4	nn	_	_
3	Mikheil	_	NNP	NNP	_	4	nn	_	_
4	Saakashvili	_	NNP	NNP	_	5	nsubj	_	_
5	accused	_	VBD	VBD	_	0	root	_	_
6	Russia	_	NNP	NNP	_	5	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	a	_	DT	DT	_	10	det	_	_
9	well-planned	_	JJ	JJ	_	10	amod	_	_
10	invasion	_	NN	NN	_	7	pobj	_	_
11	.	_	.	.	_	5	punct	_	_

Oracle:
(a / accuse-01, ARG0, p / person)
(a / accuse-01, ARG1, c2 / country)
(a / accuse-01, ARG2, i / invade-01)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(i / invade-01, ARG0, c2 / country)
(n / name, op, "Mikheil")
(n / name, op, "Saakashvili")
(n2 / name, op, "Georgia")
(n3 / name, op, "Russia")
(p / person, name, n / name)
(p3 / plan-01, ARG0, c2 / country)
(p3 / plan-01, ARG1, i / invade-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),invasion,invade-01,false), Span(10,11,List(1),planned,plan-01,false), Span(4,5,List(2),accused,accuse-01,false), Span(2,4,List(6, 5, 4, 3),Mikheil Saakashvili,(person :name (name :op "Mikheil" :op "Saakashvili")),false), Span(1,2,List(8, 7),President,(have-org-role-91 :ARG2 president),false), Span(0,1,List(11, 10, 9),Georgian,(country :name (name :op "Georgia")),false)),Map(2 -> accuse-01, 5 -> "Mikheil", 8 -> president, 7 -> have-org-role-91, 1 -> plan-01, 11 -> "Georgia", 4 -> name, 6 -> "Saakashvili", 9 -> country, 0 -> invade-01, 10 -> name, 3 -> person),Map(n -> name, h -> have-org-role-91, p2 -> person, p -> plan-01, a -> accuse-01, i -> invade-01, c -> country, n2 -> name, p3 -> president))),[Ljava.lang.String;@79c3f01f,Annotation([Ljava.lang.String;@6c2f1700,[Ljava.lang.String;@350b3a17,[Ljava.lang.String;@38600b),Annotation([Ljava.lang.String;@669d2b1b,[Ljava.lang.String;@721eb7df,[Ledu.cmu.lti.nlp.amr.Dependency;@1ea9f009),Annotation([Ljava.lang.String;@5d52e3ef,[Ljava.lang.String;@5298dead,[Ljava.lang.String;@553f3b6e),Annotation([Ljava.lang.String;@4c7a078,[Ljava.lang.String;@4e406694,[Ledu.cmu.lti.nlp.amr.Entity;@5ab9b447))
AMR:
(a / accuse-01, ARG0, p2 / person)
(a / accuse-01, ARG2, i / invade-01)
(c / country, name, n2 / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p3 / president)
(n / name, op, "Mikheil")
(n / name, op, "Saakashvili")
(n2 / name, op, "Georgia")
(p / plan-01, ARG1, i / invade-01)
(p2 / person, name, n / name)

Decoded in 58,062 microseconds
Sentence: Georgia mobilized military reserves.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 1-2:  mobilized => mobilize-01
Span 3-4:  reserves => reserve-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 2-3:  military => military
Oracle Span 1-2:  mobilized => mobilize-01
Oracle Span 3-4:  reserves => reserve

Incorrect span: reserves => reserve-01
Missing span: reserves => reserve
Missing span: military => military
Dependencies:
1	Georgia	_	NNP	NNP	_	2	nsubj	_	_
2	mobilized	_	VBD	VBD	_	0	root	_	_
3	military	_	JJ	JJ	_	4	amod	_	_
4	reserves	_	NNS	NNS	_	2	dobj	_	_
5	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n / name)
(m / mobilize-01, ARG0, c / country)
(m / mobilize-01, ARG1, r / reserve)
(n / name, op, "Georgia")
(r / reserve, mod, m2 / military)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),reserves,reserve-01,false), Span(1,2,List(1),mobilized,mobilize-01,false), Span(0,1,List(4, 3, 2),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> country, 1 -> mobilize-01, 4 -> "Georgia", 0 -> reserve-01, 3 -> name),Map(n -> name, m -> mobilize-01, r -> reserve-01, c -> country))),[Ljava.lang.String;@76f10035,Annotation([Ljava.lang.String;@4f8caaf3,[Ljava.lang.String;@2b50150,[Ljava.lang.String;@15b986cd),Annotation([Ljava.lang.String;@6bb7cce7,[Ljava.lang.String;@41c62850,[Ledu.cmu.lti.nlp.amr.Dependency;@6b530eb9),Annotation([Ljava.lang.String;@328572f0,[Ljava.lang.String;@678040b3,[Ljava.lang.String;@17f460bb),Annotation([Ljava.lang.String;@64a1923a,[Ljava.lang.String;@7d2a6eac,[Ledu.cmu.lti.nlp.amr.Entity;@18ca3c62))
AMR:
(c / country, name, n / name)
(m / mobilize-01, ARG0, c / country)
(n / name, op, "Georgia")
(r / reserve-01, ARG0, c / country)

Decoded in 20,244 microseconds
Sentence: On 8 August 2008 Georgian government web sites crashed intermittently.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Georgian"))
Spans:
Span 1-4:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 4-5:  Georgian => (country :name (name :op "Georgia"))
Span 7-8:  sites => site
Span 6-7:  web => web

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-4:  8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Oracle Span 8-9:  crashed => crash-01
Oracle Span 4-5:  Georgian => (country :name (name :op "Georgia"))
Oracle Span 5-6:  government => (government-organization :ARG0-of govern-01)
Oracle Span 9-10:  intermittently => intermittent
Oracle Span 7-8:  sites => site
Oracle Span 6-7:  web => web

Incorrect span: 8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Missing span: 8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Missing span: crashed => crash-01
Missing span: intermittently => intermittent
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	On	_	IN	IN	_	9	prep	_	_
2	8	_	CD	CD	_	1	pobj	_	_
3	August	_	NNP	NNP	_	2	tmod	_	_
4	2008	_	CD	CD	_	3	num	_	_
5	Georgian	_	JJ	JJ	_	8	amod	_	_
6	government	_	NN	NN	_	8	nn	_	_
7	web	_	NN	NN	_	8	nn	_	_
8	sites	_	NNS	NNS	_	9	nsubj	_	_
9	crashed	_	VBD	VBD	_	0	root	_	_
10	intermittently	_	RB	RB	_	9	advmod	_	_
11	.	_	.	.	_	9	punct	_	_

Oracle:
(c / crash-01, ARG0, s / site)
(c / crash-01, manner, i / intermittent)
(c / crash-01, time, d / date-entity)
(c2 / country, name, n / name)
(d / date-entity, day, 8)
(d / date-entity, month, 8)
(d / date-entity, year, 2008)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(n / name, op, "Georgia")
(s / site, mod, w / web)
(s / site, poss, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),sites,site,false), Span(6,7,List(1),web,web,false), Span(4,5,List(4, 3, 2),Georgian,(country :name (name :op "Georgia")),false), Span(1,4,List(8, 7, 6, 5),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false)),Map(2 -> country, 5 -> date-entity, 8 -> 2008, 7 -> 8, 1 -> web, 4 -> "Georgia", 6 -> 8, 0 -> site, 3 -> name),Map(n -> name, w -> web, 2 -> 2008, 8 -> 8, s -> site, d -> date-entity, 82 -> 8, c -> country))),[Ljava.lang.String;@2c0f7678,Annotation([Ljava.lang.String;@44d70181,[Ljava.lang.String;@6aa648b9,[Ljava.lang.String;@23c650a3),Annotation([Ljava.lang.String;@742d4e15,[Ljava.lang.String;@88a8218,[Ledu.cmu.lti.nlp.amr.Dependency;@50b1f030),Annotation([Ljava.lang.String;@4163f1cd,[Ljava.lang.String;@5fa05212,[Ljava.lang.String;@3e681bc),Annotation([Ljava.lang.String;@5c09d180,[Ljava.lang.String;@23aae55,[Ledu.cmu.lti.nlp.amr.Entity;@5f574cc2))
AMR:
(2 / 2008, mod, c / country)
(c / country, name, n / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Georgia")
(s / site, mod, c / country)
(s / site, poss, w / web)

Decoded in 47,319 microseconds
Sentence: The crashes are signs of a cyber-warfare campaign against Georgia.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 9-10:  campaign => campaign-01
Span 6-7:  cyber => cyber
Span 11-12:  Georgia => (country :name (name :op "Georgia"))
Span 8-9:  warfare => warfare

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 9-10:  campaign => campaign-01
Oracle Span 1-2:  crashes => crash-01
Oracle Span 6-7:  cyber => cyber
Oracle Span 11-12:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 3-4:  signs => signal-01
Oracle Span 8-9:  warfare => warfare

Missing span: crashes => crash-01
Missing span: signs => signal-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	crashes	_	NNS	NNS	_	4	nsubj	_	_
3	are	_	VBP	VBP	_	4	cop	_	_
4	signs	_	NNS	NNS	_	0	root	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	a	_	DT	DT	_	8	det	_	_
7	cyber-warfare	_	JJ	JJ	_	8	amod	_	_
8	campaign	_	NN	NN	_	5	pobj	_	_
9	against	_	IN	IN	_	8	prep	_	_
10	Georgia	_	NNP	NNP	_	9	pobj	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(c2 / campaign-01, ARG1, w / warfare)
(c4 / country, name, n / name)
(n / name, op, "Georgia")
(s / signal-01, ARG0, c / crash-01)
(s / signal-01, ARG1, c2 / campaign-01)
(w / warfare, mod, c3 / cyber)
(w / warfare, prep-against, c4 / country)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(9,10,List(3),campaign,campaign-01,false), Span(8,9,List(4),warfare,warfare,false), Span(6,7,List(5),cyber,cyber,false)),Map(2 -> "Georgia", 5 -> cyber, 1 -> name, 4 -> warfare, 0 -> country, 3 -> campaign-01),Map(w -> warfare, n -> name, c3 -> cyber, c -> country, c2 -> campaign-01))),[Ljava.lang.String;@680bddf5,Annotation([Ljava.lang.String;@7a9c84a5,[Ljava.lang.String;@2d83c5a5,[Ljava.lang.String;@48d7ad8b),Annotation([Ljava.lang.String;@7e053511,[Ljava.lang.String;@60222fd8,[Ledu.cmu.lti.nlp.amr.Dependency;@53bf7094),Annotation([Ljava.lang.String;@26f1249d,[Ljava.lang.String;@710b30ef,[Ljava.lang.String;@a68df9),Annotation([Ljava.lang.String;@28b576a9,[Ljava.lang.String;@7cf7aee,[Ledu.cmu.lti.nlp.amr.Entity;@2f6bbeb0))
AMR:
(c / country, name, n / name)
(c2 / campaign-01, ARG1, c / country)
(c2 / campaign-01, mod, w / warfare)
(n / name, op, "Georgia")
(w / warfare, mod, c3 / cyber)

Decoded in 39,763 microseconds
Sentence: The dispute could renew a sustained conflict in the Caucasus region.

NER Entity: (country :name (name :op "Caucasus"))
Spans:
Span 6-7:  conflict => conflict-01
Span 2-3:  could => possible
Span 1-2:  dispute => dispute-01
Span 10-11:  region => region
Span 3-4:  renew => renew-01
Span 5-6:  sustained => sustain-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 9-10:  Caucasus => (world-region :name (name :op "Caucasus"))
Oracle Span 6-7:  conflict => conflict-01
Oracle Span 2-3:  could => possible
Oracle Span 1-2:  dispute => dispute-01
Oracle Span 3-4:  renew => renew-01
Oracle Span 5-6:  sustained => sustain-01

Extra span: region => region
Missing span: Caucasus => (world-region :name (name :op "Caucasus"))
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	dispute	_	NN	NN	_	4	nsubj	_	_
3	could	_	MD	MD	_	4	aux	_	_
4	renew	_	VB	VB	_	0	root	_	_
5	a	_	DT	DT	_	7	det	_	_
6	sustained	_	JJ	JJ	_	7	amod	_	_
7	conflict	_	NN	NN	_	4	dobj	_	_
8	in	_	IN	IN	_	4	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	Caucasus	_	NNP	NNP	_	11	nn	_	_
11	region	_	NN	NN	_	8	pobj	_	_
12	.	_	.	.	_	4	punct	_	_

Oracle:
(n / name, op, "Caucasus")
(p / possible, domain, r / renew-01)
(r / renew-01, ARG0, d / dispute-01)
(r / renew-01, ARG1, c / conflict-01)
(r / renew-01, location, w / world-region)
(s / sustain-01, ARG1, c / conflict-01)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),region,region,false), Span(6,7,List(1),conflict,conflict-01,false), Span(5,6,List(2),sustained,sustain-01,false), Span(3,4,List(3),renew,renew-01,false), Span(2,3,List(4),could,possible,false), Span(1,2,List(5),dispute,dispute-01,false)),Map(2 -> sustain-01, 5 -> dispute-01, 1 -> conflict-01, 4 -> possible, 0 -> region, 3 -> renew-01),Map(s -> sustain-01, d -> dispute-01, p -> possible, r2 -> renew-01, r -> region, c -> conflict-01))),[Ljava.lang.String;@1b1637e1,Annotation([Ljava.lang.String;@18151a14,[Ljava.lang.String;@64711bf2,[Ljava.lang.String;@169da7f2),Annotation([Ljava.lang.String;@3c1e23ff,[Ljava.lang.String;@ceb4bd2,[Ledu.cmu.lti.nlp.amr.Dependency;@60297f36),Annotation([Ljava.lang.String;@1bf0f6f6,[Ljava.lang.String;@56bc3fac,[Ljava.lang.String;@df4b72),Annotation([Ljava.lang.String;@2ba45490,[Ljava.lang.String;@37ff4054,[Ledu.cmu.lti.nlp.amr.Entity;@894858))
AMR:
(p / possible, domain, r2 / renew-01)
(r2 / renew-01, ARG0, d / dispute-01)
(r2 / renew-01, ARG1, c / conflict-01)
(r2 / renew-01, location, r / region)
(s / sustain-01, ARG1, c / conflict-01)

Decoded in 56,499 microseconds
Sentence: The Caucus region is an important conduit for the flow of oil from the Caspian Sea to world markets.

NER Entity: (country :name (name :op "Caspian" :op "Sea"))
Spans:
Span 14-16:  Caspian Sea => (sea :name (name :op "Sea" :op "Caspian"))
Span 6-7:  conduit => conduit
Span 9-10:  flow => flow-01
Span 5-6:  important => important
Span 18-19:  markets => market
Span 11-12:  oil => oil
Span 2-3:  region => region

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 14-16:  Caspian Sea => (sea :name (name :op "Sea" :op "Caspian"))
Oracle Span 1-2:  Caucus => (world-region :name (name :op "Caucasus"))
Oracle Span 6-7:  conduit => conduit
Oracle Span 9-10:  flow => flow-01
Oracle Span 5-6:  important => importance
Oracle Span 18-19:  markets => market
Oracle Span 11-12:  oil => oil
Oracle Span 17-18:  world => world

Incorrect span: important => important
Extra span: region => region
Missing span: Caucus => (world-region :name (name :op "Caucasus"))
Missing span: world => world
Missing span: important => importance
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Caucus	_	NNP	NNP	_	3	nn	_	_
3	region	_	NN	NN	_	7	nsubj	_	_
4	is	_	VBZ	VBZ	_	7	cop	_	_
5	an	_	DT	DT	_	7	det	_	_
6	important	_	JJ	JJ	_	7	amod	_	_
7	conduit	_	NN	NN	_	0	root	_	_
8	for	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	flow	_	NN	NN	_	8	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	oil	_	NN	NN	_	11	pobj	_	_
13	from	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	Caspian	_	NNP	NNP	_	16	nn	_	_
16	Sea	_	NNP	NNP	_	13	pobj	_	_
17	to	_	TO	TO	_	16	prep	_	_
18	world	_	NN	NN	_	19	nn	_	_
19	markets	_	NNS	NNS	_	17	pobj	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(c / conduit, domain, w / world-region)
(c / conduit, mod, i / importance)
(c / conduit, purpose, f / flow-01)
(f / flow-01, ARG1, o / oil)
(f / flow-01, destination, m / market)
(f / flow-01, source, s / sea)
(m / market, mod, w2 / world)
(n / name, op, "Caucasus")
(n2 / name, op, "Caspian")
(n2 / name, op, "Sea")
(s / sea, name, n2 / name)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),markets,market,false), Span(14,16,List(4, 3, 2, 1),Caspian Sea,(sea :name (name :op "Sea" :op "Caspian")),false), Span(11,12,List(5),oil,oil,false), Span(9,10,List(6),flow,flow-01,false), Span(6,7,List(7),conduit,conduit,false), Span(5,6,List(8),important,important,false), Span(2,3,List(9),region,region,false)),Map(2 -> name, 5 -> oil, 8 -> important, 7 -> conduit, 1 -> sea, 4 -> "Caspian", 6 -> flow-01, 9 -> region, 0 -> market, 3 -> "Sea"),Map(n -> name, s -> sea, m -> market, r -> region, i -> important, c -> conduit, f -> flow-01, o -> oil))),[Ljava.lang.String;@7af707e0,Annotation([Ljava.lang.String;@737edcfa,[Ljava.lang.String;@3ecedf21,[Ljava.lang.String;@74cf8b28),Annotation([Ljava.lang.String;@36c54a56,[Ljava.lang.String;@3359c978,[Ledu.cmu.lti.nlp.amr.Dependency;@7ba63fe5),Annotation([Ljava.lang.String;@73386d72,[Ljava.lang.String;@6f330eb9,[Ljava.lang.String;@125c082e),Annotation([Ljava.lang.String;@584f5497,[Ljava.lang.String;@68ace111,[Ledu.cmu.lti.nlp.amr.Entity;@1f9d6c7b))
AMR:
(c / conduit, domain, r / region)
(c / conduit, mod, f / flow-01)
(c / conduit, mod, i / important)
(f / flow-01, ARG0, m / market)
(f / flow-01, ARG1, o / oil)
(n / name, op, "Caspian")
(n / name, op, "Sea")
(o / oil, location, s / sea)
(s / sea, name, n / name)

Decoded in 82,331 microseconds
Sentence: Conflict in the caucus region has lasted for years along Russia's borders.

NER Entity: (country :name (name :op "Russia"))
Spans:
Span 9-10:  along => along
Span 6-7:  lasted => last-01
Span 4-5:  region => region
Span 8-9:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  along => along
Oracle Span 12-13:  borders => border-01
Oracle Span 3-4:  caucus => (world-region :name (name :op "Caucasus"))
Oracle Span 0-1:  Conflict => conflict-01
Oracle Span 6-7:  lasted => last-01
Oracle Span 10-11:  Russia => (country :name (name :op "Russia"))
Oracle Span 8-9:  years => (temporal-quantity :unit year)

Extra span: region => region
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: caucus => (world-region :name (name :op "Caucasus"))
Missing span: borders => border-01
Missing span: Conflict => conflict-01
Dependencies:
1	Conflict	_	NNP	NNP	_	7	nsubj	_	_
2	in	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	5	det	_	_
4	caucus	_	JJ	JJ	_	5	amod	_	_
5	region	_	NN	NN	_	2	pobj	_	_
6	has	_	VBZ	VBZ	_	7	aux	_	_
7	lasted	_	VBN	VBN	_	0	root	_	_
8	for	_	IN	IN	_	7	prep	_	_
9	years	_	NNS	NNS	_	8	pobj	_	_
10	along	_	IN	IN	_	9	prep	_	_
11	Russia	_	NNP	NNP	_	13	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	borders	_	NNS	NNS	_	10	pobj	_	_
14	.	_	.	.	_	7	punct	_	_

Oracle:
(a / along, op, b / border-01)
(b / border-01, ARG1, c2 / country)
(c / conflict-01, location, w / world-region)
(c2 / country, name, n2 / name)
(l / last-01, ARG1, c / conflict-01)
(l / last-01, location, a / along)
(n / name, op, "Caucasus")
(n2 / name, op, "Russia")
(t / temporal-quantity, unit, y / year)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),along,along,false), Span(8,9,List(2, 1),years,(temporal-quantity :unit year),false), Span(6,7,List(3),lasted,last-01,false), Span(4,5,List(4),region,region,false)),Map(2 -> year, 1 -> temporal-quantity, 4 -> region, 0 -> along, 3 -> last-01),Map(t -> temporal-quantity, y -> year, a -> along, r -> region, l -> last-01))),[Ljava.lang.String;@6df20ade,Annotation([Ljava.lang.String;@4fbb001b,[Ljava.lang.String;@4010d494,[Ljava.lang.String;@341a8659),Annotation([Ljava.lang.String;@4943defe,[Ljava.lang.String;@5eefa415,[Ledu.cmu.lti.nlp.amr.Dependency;@181d7f28),Annotation([Ljava.lang.String;@78d50a3c,[Ljava.lang.String;@2fb69ff6,[Ljava.lang.String;@cda4919),Annotation([Ljava.lang.String;@7f4d9395,[Ljava.lang.String;@2f19f2aa,[Ledu.cmu.lti.nlp.amr.Entity;@344b8190))
AMR:
(l / last-01, ARG1, r / region)
(l / last-01, ARG2, t / temporal-quantity)
(t / temporal-quantity, location, a / along)
(t / temporal-quantity, unit, y / year)

Decoded in 33,047 microseconds
Sentence: The conflict has taken place most recently in Chechnya.

NER Entity: (country :name (name :op "Chechnya"))
Spans:
Span 1-2:  conflict => conflict-01
Span 6-7:  recently => recent

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  Chechnya => (country :name (name :op "Chechnya"))
Oracle Span 1-2:  conflict => conflict-01
Oracle Span 5-6:  most => most
Oracle Span 6-7:  recently => recent
Oracle Span 3-4:  taken => take-14

Missing span: Chechnya => (country :name (name :op "Chechnya"))
Missing span: taken => take-14
Missing span: most => most
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	conflict	_	NN	NN	_	4	nsubj	_	_
3	has	_	VBZ	VBZ	_	4	aux	_	_
4	taken	_	VBN	VBN	_	0	root	_	_
5	place	_	NN	NN	_	4	dobj	_	_
6	most	_	RBS	RBS	_	7	advmod	_	_
7	recently	_	RB	RB	_	4	advmod	_	_
8	in	_	IN	IN	_	4	prep	_	_
9	Chechnya	_	NNP	NNP	_	8	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(c / conflict-01, location, c2 / country)
(c / conflict-01, time, r / recent)
(c2 / country, name, n / name)
(n / name, op, "Chechnya")
(r / recent, degree, m / most)
(t / take-14, ARG1, c / conflict-01)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),recently,recent,false), Span(1,2,List(1),conflict,conflict-01,false)),Map(1 -> conflict-01, 0 -> recent),Map(r -> recent, c -> conflict-01))),[Ljava.lang.String;@6a078481,Annotation([Ljava.lang.String;@79c5636f,[Ljava.lang.String;@1929425f,[Ljava.lang.String;@718607eb),Annotation([Ljava.lang.String;@27f3b6d6,[Ljava.lang.String;@757f675c,[Ledu.cmu.lti.nlp.amr.Dependency;@2617f816),Annotation([Ljava.lang.String;@676f0a60,[Ljava.lang.String;@5d10455d,[Ljava.lang.String;@535b8c24),Annotation([Ljava.lang.String;@4a951911,[Ljava.lang.String;@55b62629,[Ledu.cmu.lti.nlp.amr.Entity;@a53bb6f))
AMR:
(c / conflict-01, ARG1, r / recent)

Decoded in 15,409 microseconds
Sentence: Russia's military incursion into Georgia indicates Russia's confidence and resolve.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 5-6:  Georgia => (country :name (name :op "Georgia"))
Span 6-7:  indicates => indicate-01
Span 11-12:  resolve => resolve-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  and => and
Oracle Span 9-10:  confidence => confidence
Oracle Span 5-6:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 3-4:  incursion => incursion
Oracle Span 6-7:  indicates => indicate-01
Oracle Span 2-3:  military => military
Oracle Span 11-12:  resolve => resolve
Oracle Span 0-1:  Russia => (country :name (name :op "Russia"))

Incorrect span: resolve => resolve-01
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: and => and
Missing span: resolve => resolve
Missing span: confidence => confidence
Missing span: incursion => incursion
Missing span: military => military
Dependencies:
1	Russia	_	NNP	NNP	_	4	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	military	_	JJ	JJ	_	4	amod	_	_
4	incursion	_	NN	NN	_	7	nsubj	_	_
5	into	_	IN	IN	_	4	prep	_	_
6	Georgia	_	NNP	NNP	_	5	pobj	_	_
7	indicates	_	VBZ	VBZ	_	0	root	_	_
8	Russia	_	NNP	NNP	_	10	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	confidence	_	NN	NN	_	7	dobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	resolve	_	NN	NN	_	10	conj	_	_
13	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, c3 / confidence)
(a / and, op, r / resolve)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / confidence, poss, c / country)
(i / indicate-01, ARG0, i2 / incursion)
(i / indicate-01, ARG1, a / and)
(i2 / incursion, destination, c2 / country)
(i2 / incursion, mod, m / military)
(i2 / incursion, poss, c / country)
(n / name, op, "Russia")
(n2 / name, op, "Georgia")
(r / resolve, poss, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),resolve,resolve-01,false), Span(6,7,List(1),indicates,indicate-01,false), Span(5,6,List(4, 3, 2),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> country, 1 -> indicate-01, 4 -> "Georgia", 0 -> resolve-01, 3 -> name),Map(n -> name, i -> indicate-01, r -> resolve-01, c -> country))),[Ljava.lang.String;@5e63cad,Annotation([Ljava.lang.String;@6759f091,[Ljava.lang.String;@33a053d,[Ljava.lang.String;@14a54ef6),Annotation([Ljava.lang.String;@20921b9b,[Ljava.lang.String;@867ba60,[Ledu.cmu.lti.nlp.amr.Dependency;@5ba745bc),Annotation([Ljava.lang.String;@654b72c0,[Ljava.lang.String;@55b5e331,[Ljava.lang.String;@6034e75d),Annotation([Ljava.lang.String;@15fc442,[Ljava.lang.String;@3f3c7bdb,[Ledu.cmu.lti.nlp.amr.Entity;@456abb66))
AMR:
(c / country, name, n / name)
(i / indicate-01, ARG1, c / country)
(n / name, op, "Georgia")
(r / resolve-01, ARG0, c / country)

Decoded in 31,447 microseconds
Sentence: Russia's military incursion provided a test of the capacities of the Russian military.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 4-5:  provided => provide-01
Span 6-7:  test => test-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  capacities => capacity
Oracle Span 3-4:  incursion => incursion
Oracle Span 2-3:  military => military
Oracle Span 13-14:  military => military
Oracle Span 4-5:  provided => provide-01
Oracle Span 0-1:  Russia => (country :name (name :op "Russia"))
Oracle Span 6-7:  test => test-01

Missing span: Russia => (country :name (name :op "Russia"))
Missing span: capacities => capacity
Missing span: military => military
Missing span: incursion => incursion
Missing span: military => military
Dependencies:
1	Russia	_	NNP	NNP	_	4	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	military	_	JJ	JJ	_	4	amod	_	_
4	incursion	_	NN	NN	_	5	nsubj	_	_
5	provided	_	VBD	VBD	_	0	root	_	_
6	a	_	DT	DT	_	7	det	_	_
7	test	_	NN	NN	_	5	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	capacities	_	NNS	NNS	_	8	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	Russian	_	JJ	JJ	_	14	amod	_	_
14	military	_	NN	NN	_	11	pobj	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / capacity, poss, m2 / military)
(i / incursion, mod, m / military)
(i / incursion, poss, c / country)
(m2 / military, mod, c / country)
(n / name, op, "Russia")
(p / provide-01, ARG0, i / incursion)
(p / provide-01, ARG1, t / test-01)
(t / test-01, ARG1, c2 / capacity)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),test,test-01,false), Span(4,5,List(1),provided,provide-01,false)),Map(1 -> provide-01, 0 -> test-01),Map(t -> test-01, p -> provide-01))),[Ljava.lang.String;@2a3a299,Annotation([Ljava.lang.String;@7da10b5b,[Ljava.lang.String;@219f4597,[Ljava.lang.String;@31be6b49),Annotation([Ljava.lang.String;@2e16b08d,[Ljava.lang.String;@5b989dc7,[Ledu.cmu.lti.nlp.amr.Dependency;@70d8de),Annotation([Ljava.lang.String;@42561fba,[Ljava.lang.String;@595f4da5,[Ljava.lang.String;@46b695ec),Annotation([Ljava.lang.String;@408613cc,[Ljava.lang.String;@325f7fa9,[Ledu.cmu.lti.nlp.amr.Entity;@11ce2e22))
AMR:
(p / provide-01, ARG1, t / test-01)

Decoded in 27,642 microseconds
Sentence: Putin attempted to modernize and re-equip the Russian military during his 2 presidential terms.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 1-2:  attempted => attempt-01
Span 7-8:  equip => equip-01
Span 3-4:  modernize => modernize-01
Span 14-15:  presidential => (have-org-role-91 :ARG2 president)
Span 0-1:  Putin => (person :name (name :op "Putin"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 13-14:  2 => 2
Oracle Span 4-5:  and => and
Oracle Span 1-2:  attempted => attempt-01
Oracle Span 10-11:  military => military
Oracle Span 3-4:  modernize => modernize-01
Oracle Span 14-15:  presidential => (have-org-role-91 :ARG2 president)
Oracle Span 0-1:  Putin => (person :name (name :op "Putin"))
Oracle Span 9-10:  Russian => (country :name (name :op "Russia"))
Oracle Span 15-16:  terms => term

Extra span: equip => equip-01
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: terms => term
Missing span: 2 => 2
Missing span: and => and
Missing span: military => military
Dependencies:
1	Putin	_	NNP	NNP	_	2	nsubj	_	_
2	attempted	_	VBD	VBD	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	modernize	_	VB	VB	_	2	xcomp	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	re-equip	_	VB	VB	_	4	conj	_	_
7	the	_	DT	DT	_	9	det	_	_
8	Russian	_	JJ	JJ	_	9	amod	_	_
9	military	_	NN	NN	_	4	dobj	_	_
10	during	_	IN	IN	_	4	prep	_	_
11	his	_	PRP$	PRP$	_	14	poss	_	_
12	2	_	CD	CD	_	14	num	_	_
13	presidential	_	JJ	JJ	_	14	amod	_	_
14	terms	_	NNS	NNS	_	10	pobj	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(a / attempt-01, ARG0, p / person)
(a / attempt-01, ARG1, a2 / and)
(a / attempt-01, time, t / term)
(a2 / and, op, m / modernize-01)
(c / country, name, n2 / name)
(h / have-org-role-91, ARG2, p3 / president)
(m / modernize-01, ARG0, p / person)
(m / modernize-01, ARG1, m2 / military)
(m2 / military, mod, c / country)
(n / name, op, "Putin")
(n2 / name, op, "Russia")
(p / person, name, n / name)
(t / term, poss, p / person)
(t / term, quant, 2 / 2)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(1, 0),presidential,(have-org-role-91 :ARG2 president),false), Span(7,8,List(2),equip,equip-01,false), Span(3,4,List(3),modernize,modernize-01,false), Span(1,2,List(4),attempted,attempt-01,false), Span(0,1,List(7, 6, 5),Putin,(person :name (name :op "Putin")),false)),Map(2 -> equip-01, 5 -> person, 7 -> "Putin", 1 -> president, 4 -> attempt-01, 6 -> name, 0 -> have-org-role-91, 3 -> modernize-01),Map(n -> name, e -> equip-01, h -> have-org-role-91, p2 -> person, m -> modernize-01, p -> president, a -> attempt-01))),[Ljava.lang.String;@5aa6202e,Annotation([Ljava.lang.String;@3af9aa66,[Ljava.lang.String;@771158fb,[Ljava.lang.String;@91c4a3f),Annotation([Ljava.lang.String;@62d0ac62,[Ljava.lang.String;@150d80c4,[Ledu.cmu.lti.nlp.amr.Dependency;@6826c41e),Annotation([Ljava.lang.String;@3003697,[Ljava.lang.String;@64d43929,[Ljava.lang.String;@1d269ed7),Annotation([Ljava.lang.String;@437ebf59,[Ljava.lang.String;@41c89d2f,[Ledu.cmu.lti.nlp.amr.Entity;@410e94e))
AMR:
(a / attempt-01, ARG0, p2 / person)
(a / attempt-01, ARG1, m / modernize-01)
(e / equip-01, ARG0, p2 / person)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, p / president)
(m / modernize-01, ARG0, p2 / person)
(n / name, op, "Putin")
(p2 / person, name, n / name)

Decoded in 53,214 microseconds
Sentence: Earlier in 2008 Russia announced it was broadly expanding support for the separatist regions.

NER Entity: (country :name (name :op "Russia"))
Spans:
Span 2-3:  2008 => (date-entity :year 2008)
Span 4-5:  announced => announce-01
Span 7-8:  broadly => broad
Span 0-1:  Earlier => early
Span 8-9:  expanding => expand-01
Span 13-14:  regions => region
Span 9-10:  support => support-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  2008 => (date-entity :year 2008)
Oracle Span 4-5:  announced => announce-01
Oracle Span 7-8:  broadly => broad
Oracle Span 0-1:  Earlier => early
Oracle Span 8-9:  expanding => expand-01
Oracle Span 13-14:  regions => region
Oracle Span 3-4:  Russia => (country :name (name :op "Russia"))
Oracle Span 12-13:  separatist => separatist
Oracle Span 9-10:  support => support-01

Missing span: Russia => (country :name (name :op "Russia"))
Missing span: separatist => separatist
Dependencies:
1	Earlier	_	RBR	RBR	_	5	advmod	_	_
2	in	_	IN	IN	_	1	prep	_	_
3	2008	_	CD	CD	_	2	pobj	_	_
4	Russia	_	NNP	NNP	_	5	nsubj	_	_
5	announced	_	VBD	VBD	_	0	root	_	_
6	it	_	PRP	PRP	_	9	nsubj	_	_
7	was	_	VBD	VBD	_	9	aux	_	_
8	broadly	_	RB	RB	_	9	advmod	_	_
9	expanding	_	VBG	VBG	_	5	ccomp	_	_
10	support	_	NN	NN	_	9	dobj	_	_
11	for	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	separatist	_	JJ	JJ	_	14	amod	_	_
14	regions	_	NNS	NNS	_	11	pobj	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(a / announce-01, ARG0, c / country)
(a / announce-01, ARG1, e2 / expand-01)
(a / announce-01, time, e / early)
(c / country, name, n / name)
(d / date-entity, year, 2008)
(e / early, op, d / date-entity)
(e2 / expand-01, ARG0, c / country)
(e2 / expand-01, ARG1, s / support-01)
(e2 / expand-01, manner, b / broad)
(n / name, op, "Russia")
(r / region, mod, s2 / separatist)
(s / support-01, ARG1, r / region)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),regions,region,false), Span(9,10,List(1),support,support-01,false), Span(8,9,List(2),expanding,expand-01,false), Span(7,8,List(3),broadly,broad,false), Span(4,5,List(4),announced,announce-01,false), Span(2,3,List(6, 5),2008,(date-entity :year 2008),false), Span(0,1,List(7),Earlier,early,false)),Map(2 -> expand-01, 5 -> date-entity, 7 -> early, 1 -> support-01, 4 -> announce-01, 6 -> 2008, 0 -> region, 3 -> broad),Map(e -> expand-01, 2 -> 2008, b -> broad, e2 -> early, s -> support-01, d -> date-entity, a -> announce-01, r -> region))),[Ljava.lang.String;@2d691f3d,Annotation([Ljava.lang.String;@1bdbf9be,[Ljava.lang.String;@1e7f2e0f,[Ljava.lang.String;@1da6ee17),Annotation([Ljava.lang.String;@78d39a69,[Ljava.lang.String;@3c818ac4,[Ledu.cmu.lti.nlp.amr.Dependency;@5b69d40d),Annotation([Ljava.lang.String;@71154f21,[Ljava.lang.String;@15f193b8,[Ljava.lang.String;@2516fc68),Annotation([Ljava.lang.String;@304a9d7b,[Ljava.lang.String;@6bfdb014,[Ledu.cmu.lti.nlp.amr.Entity;@72889280))
AMR:
(a / announce-01, ARG0, b / broad)
(a / announce-01, ARG1, e / expand-01)
(a / announce-01, time, e2 / early)
(d / date-entity, year, 2 / 2008)
(e / expand-01, ARG1, s / support-01)
(e2 / early, op, d / date-entity)
(s / support-01, ARG1, r / region)

Decoded in 52,963 microseconds
Sentence: Georgia labeled Russia's support an act of annexation.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 4-5:  support => support-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  act => act-02
Oracle Span 8-9:  annexation => annex-01
Oracle Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 1-2:  labeled => label-01
Oracle Span 2-3:  Russia => (country :name (name :op "Russia"))
Oracle Span 4-5:  support => support-01

Missing span: Russia => (country :name (name :op "Russia"))
Missing span: labeled => label-01
Missing span: act => act-02
Missing span: annexation => annex-01
Dependencies:
1	Georgia	_	NNP	NNP	_	2	nsubj	_	_
2	labeled	_	VBD	VBD	_	0	root	_	_
3	Russia	_	NNP	NNP	_	5	nsubj	_	_
4	's	_	POS	POS	_	3	possessive	_	_
5	support	_	VB	VB	_	2	ccomp	_	_
6	an	_	DT	DT	_	7	det	_	_
7	act	_	NN	NN	_	5	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	annexation	_	NN	NN	_	8	pobj	_	_
10	.	_	.	.	_	2	punct	_	_

Oracle:
(a / act-02, mod, a2 / annex-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(l / label-01, ARG0, c / country)
(l / label-01, ARG1, s / support-01)
(l / label-01, ARG2, a / act-02)
(n / name, op, "Georgia")
(n2 / name, op, "Russia")
(s / support-01, ARG0, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),support,support-01,false), Span(0,1,List(3, 2, 1),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> name, 1 -> country, 0 -> support-01, 3 -> "Georgia"),Map(n -> name, s -> support-01, c -> country))),[Ljava.lang.String;@606fc505,Annotation([Ljava.lang.String;@4aa3d36,[Ljava.lang.String;@2d140a7,[Ljava.lang.String;@347bdeef),Annotation([Ljava.lang.String;@2aa27288,[Ljava.lang.String;@7f34a967,[Ledu.cmu.lti.nlp.amr.Dependency;@77e80a5e),Annotation([Ljava.lang.String;@1d8e2eea,[Ljava.lang.String;@240139e1,[Ljava.lang.String;@7ea4d397),Annotation([Ljava.lang.String;@49298ce7,[Ljava.lang.String;@253c1256,[Ledu.cmu.lti.nlp.amr.Entity;@8dfe921))
AMR:
(c / country, name, n / name)
(n / name, op, "Georgia")
(s / support-01, ARG0, c / country)

Decoded in 19,363 microseconds
Sentence: Throughout 8 August 2008 reports conflicted about whether Georgian or Russian forces had won control of Tskhinvali.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Tskhinvali"))
NER Entity: (thing :name (name :op "Georgian"))
Spans:
Span 1-4:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 14-15:  control => control-01
Span 8-9:  Georgian => (country :name (name :op "Georgia"))
Span 9-10:  or => or
Span 0-1:  Throughout => throughout
Span 13-14:  won => win-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 1-4:  8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Oracle Span 5-6:  conflicted => conflict-01
Oracle Span 14-15:  control => control-01
Oracle Span 11-12:  forces => force
Oracle Span 8-9:  Georgian => (country :name (name :op "Georgia"))
Oracle Span 9-10:  or => or
Oracle Span 4-5:  reports => report-01
Oracle Span 10-11:  Russian => (country :name (name :op "Russia"))
Oracle Span 16-17:  Tskhinvali => (city :name (name :op "Tskhinvali"))
Oracle Span 13-14:  won => win-01

Incorrect span: 8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Extra span: Throughout => throughout
Missing span: Tskhinvali => (city :name (name :op "Tskhinvali"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: 8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Missing span: conflicted => conflict-01
Missing span: reports => report-01
Missing span: forces => force
Dependencies:
1	Throughout	_	IN	IN	_	6	prep	_	_
2	8	_	CD	CD	_	1	pobj	_	_
3	August	_	NNP	NNP	_	5	nn	_	_
4	2008	_	CD	CD	_	5	num	_	_
5	reports	_	NNS	NNS	_	6	nsubj	_	_
6	conflicted	_	VBD	VBD	_	0	root	_	_
7	about	_	RP	RP	_	6	prt	_	_
8	whether	_	IN	IN	_	14	mark	_	_
9	Georgian	_	JJ	JJ	_	12	amod	_	_
10	or	_	CC	CC	_	9	cc	_	_
11	Russian	_	JJ	JJ	_	9	conj	_	_
12	forces	_	NNS	NNS	_	14	nsubj	_	_
13	had	_	VBD	VBD	_	14	aux	_	_
14	won	_	VBN	VBN	_	6	ccomp	_	_
15	control	_	NN	NN	_	14	dobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	Tskhinvali	_	NNP	NNP	_	16	pobj	_	_
18	.	_	.	.	_	6	punct	_	_

Oracle:
(c / conflict-01, ARG1, r / report-01)
(c / conflict-01, time, d / date-entity)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / control-01, ARG0, o2 / or)
(c4 / control-01, ARG1, c5 / city)
(c5 / city, name, n3 / name)
(d / date-entity, day, 8)
(d / date-entity, month, 8)
(d / date-entity, year, 2008)
(f2 / force, mod, c3 / country)
(n / name, op, "Georgia")
(n2 / name, op, "Russia")
(n3 / name, op, "Tskhinvali")
(o2 / or, op, f2 / force)
(r / report-01, ARG1, w / win-01)
(w / win-01, ARG0, o2 / or)
(w / win-01, ARG1, c4 / control-01)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),control,control-01,false), Span(13,14,List(1),won,win-01,false), Span(9,10,List(2),or,or,false), Span(8,9,List(5, 4, 3),Georgian,(country :name (name :op "Georgia")),false), Span(1,4,List(9, 8, 7, 6),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false), Span(0,1,List(10),Throughout,throughout,false)),Map(2 -> or, 5 -> "Georgia", 8 -> 8, 7 -> 8, 1 -> win-01, 4 -> name, 6 -> date-entity, 9 -> 2008, 0 -> control-01, 10 -> throughout, 3 -> country),Map(n -> name, w -> win-01, 2 -> 2008, t -> throughout, 8 -> 8, d -> date-entity, 82 -> 8, c -> control-01, o -> or, c2 -> country))),[Ljava.lang.String;@503fbbc6,Annotation([Ljava.lang.String;@55f45b92,[Ljava.lang.String;@109f5dd8,[Ljava.lang.String;@67fe380b),Annotation([Ljava.lang.String;@4a325eb9,[Ljava.lang.String;@3dedb4a6,[Ledu.cmu.lti.nlp.amr.Dependency;@57f64f5e),Annotation([Ljava.lang.String;@415e0bcb,[Ljava.lang.String;@194152cf,[Ljava.lang.String;@49d98dc5),Annotation([Ljava.lang.String;@2c30b71f,[Ljava.lang.String;@1d81e101,[Ledu.cmu.lti.nlp.amr.Entity;@ec50f54))
AMR:
(c / control-01, ARG0, c2 / country)
(c / control-01, ARG1, d / date-entity)
(c2 / country, name, n / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Georgia")
(t / throughout, op, d / date-entity)
(w / win-01, ARG0, o / or)
(w / win-01, ARG1, c / control-01)

Decoded in 455,730 microseconds
Sentence: Late on 8 August 2008 it was unclear whether ground combat had taken place between Russian and Georgian soldiers or had been limited to fighting between separatists and Georgian forces.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Georgian"))
Spans:
Span 2-5:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 10-11:  combat => combat-01
Span 24-25:  fighting => fight-01
Span 28-29:  Georgian => (country :name (name :op "Georgia"))
Span 17-18:  Georgian => (country :name (name :op "Georgia"))
Span 9-10:  ground => ground
Span 0-1:  Late => late
Span 22-23:  limited => limit-01
Span 19-20:  or => or
Span 26-27:  separatists => separatist
Span 18-19:  soldiers => soldier
Span 7-8:  unclear => (clear-01 :polarity -)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-5:  8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Oracle Span 16-17:  and => and
Oracle Span 14-15:  between => between
Oracle Span 10-11:  combat => combat-01
Oracle Span 24-25:  fighting => fight-01
Oracle Span 29-30:  forces => force
Oracle Span 17-18:  Georgian => (country :name (name :op "Georgia"))
Oracle Span 9-10:  ground => ground
Oracle Span 0-1:  Late => late
Oracle Span 22-23:  limited => limit-01
Oracle Span 19-20:  or => or
Oracle Span 15-16:  Russian => (country :name (name :op "Russia"))
Oracle Span 26-27:  separatists => separatist
Oracle Span 18-19:  soldiers => soldier
Oracle Span 12-13:  taken => take-14
Oracle Span 7-8:  unclear => (clear :polarity -)

Extra span: Georgian => (country :name (name :op "Georgia"))
Incorrect span: unclear => (clear-01 :polarity -)
Incorrect span: 8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: 8 August 2008 => (date-entity :year 2008 :month 8 :day 8)
Missing span: unclear => (clear :polarity -)
Missing span: between => between
Missing span: forces => force
Missing span: and => and
Missing span: taken => take-14
Dependencies:
1	Late	_	RB	RB	_	8	advmod	_	_
2	on	_	IN	IN	_	1	prep	_	_
3	8	_	CD	CD	_	2	pobj	_	_
4	August	_	NNP	NNP	_	2	tmod	_	_
5	2008	_	CD	CD	_	4	num	_	_
6	it	_	PRP	PRP	_	8	nsubj	_	_
7	was	_	VBD	VBD	_	8	cop	_	_
8	unclear	_	JJ	JJ	_	0	root	_	_
9	whether	_	IN	IN	_	13	mark	_	_
10	ground	_	NN	NN	_	11	nn	_	_
11	combat	_	NN	NN	_	13	nsubj	_	_
12	had	_	VBD	VBD	_	13	aux	_	_
13	taken	_	VBN	VBN	_	8	ccomp	_	_
14	place	_	NN	NN	_	13	dobj	_	_
15	between	_	IN	IN	_	14	prep	_	_
16	Russian	_	JJ	JJ	_	19	amod	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	Georgian	_	JJ	JJ	_	16	conj	_	_
19	soldiers	_	NNS	NNS	_	15	pobj	_	_
20	or	_	CC	CC	_	8	cc	_	_
21	had	_	VBD	VBD	_	23	aux	_	_
22	been	_	VBN	VBN	_	23	auxpass	_	_
23	limited	_	VBN	VBN	_	8	conj	_	_
24	to	_	TO	TO	_	23	prep	_	_
25	fighting	_	VBG	VBG	_	24	pcomp	_	_
26	between	_	IN	IN	_	25	prep	_	_
27	separatists	_	NNS	NNS	_	26	pobj	_	_
28	and	_	CC	CC	_	27	cc	_	_
29	Georgian	_	JJ	JJ	_	30	amod	_	_
30	forces	_	NNS	NNS	_	27	conj	_	_
31	.	_	.	.	_	8	punct	_	_

Oracle:
(a3 / and, op, s3 / soldier)
(b / between, op, f2 / force)
(b / between, op, s2 / separatist)
(c / clear, domain, o / or)
(c / clear, polarity, -)
(c / clear, time, l / late)
(c3 / country, name, n / name)
(c4 / country, name, n2 / name)
(d / date-entity, day, 8)
(d / date-entity, month, 8)
(d / date-entity, year, 2008)
(f / fight-01, ARG0, b / between)
(f2 / force, mod, c4 / country)
(l / late, op, d / date-entity)
(l2 / limit-01, ARG1, c5 / combat-01)
(l2 / limit-01, ARG2, f / fight-01)
(n / name, op, "Russia")
(n2 / name, op, "Georgia")
(o / or, op, l2 / limit-01)
(s3 / soldier, mod, c4 / country)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(2, 1, 0),Georgian,(country :name (name :op "Georgia")),false), Span(26,27,List(3),separatists,separatist,false), Span(24,25,List(4),fighting,fight-01,false), Span(22,23,List(5),limited,limit-01,false), Span(19,20,List(6),or,or,false), Span(18,19,List(7),soldiers,soldier,false), Span(17,18,List(10, 9, 8),Georgian,(country :name (name :op "Georgia")),false), Span(10,11,List(11),combat,combat-01,false), Span(9,10,List(12),ground,ground,false), Span(7,8,List(14, 13),unclear,(clear-01 :polarity -),false), Span(2,5,List(18, 17, 16, 15),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false), Span(0,1,List(19),Late,late,false)),Map(2 -> "Georgia", 5 -> limit-01, 12 -> ground, 15 -> date-entity, 8 -> country, 18 -> 2008, 7 -> soldier, 17 -> 8, 1 -> name, 4 -> fight-01, 11 -> combat-01, 14 -> -, 6 -> or, 0 -> country, 9 -> name, 16 -> 8, 19 -> late, 3 -> separatist, 10 -> "Georgia", 13 -> clear-01),Map(n -> name, 2 -> 2008, s2 -> soldier, 8 -> 8, c4 -> clear-01, s -> separatist, d -> date-entity, g -> ground, c3 -> combat-01, 82 -> 8, l2 -> late, c -> country, l -> limit-01, f -> fight-01, o -> or, c2 -> country, n2 -> name))),[Ljava.lang.String;@bf71cec,Annotation([Ljava.lang.String;@22d6cac2,[Ljava.lang.String;@30cdae70,[Ljava.lang.String;@1654a892),Annotation([Ljava.lang.String;@2577d6c8,[Ljava.lang.String;@3163987e,[Ledu.cmu.lti.nlp.amr.Dependency;@6c000e0c),Annotation([Ljava.lang.String;@5f233b26,[Ljava.lang.String;@44f9779c,[Ljava.lang.String;@6974a715),Annotation([Ljava.lang.String;@5e8a459,[Ljava.lang.String;@43d455c9,[Ledu.cmu.lti.nlp.amr.Entity;@4c9e9fb8))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / combat-01, ARG0, c / country)
(c3 / combat-01, ARG1, g / ground)
(c4 / clear-01, polarity, -)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(f / fight-01, ARG1, s / separatist)
(l / limit-01, ARG1, g / ground)
(l / limit-01, ARG2, f / fight-01)
(l2 / late, op, c4 / clear-01)
(l2 / late, op, d / date-entity)
(n / name, op, "Georgia")
(n2 / name, op, "Georgia")
(o / or, op, c4 / clear-01)
(o / or, op, l / limit-01)
(o / or, op, s2 / soldier)
(s2 / soldier, mod, c2 / country)

Decoded in 211,350 microseconds
Sentence: Tskhinvali is the capital of Georgia.

NER Entity: (country :name (name :op "Tskhinvali"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 3-4:  capital => capital
Span 5-6:  Georgia => (country :name (name :op "Georgia"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  capital => capital
Oracle Span 5-6:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 0-1:  Tskhinvali => (city :name (name :op "Tskhinvali"))

Missing span: Tskhinvali => (city :name (name :op "Tskhinvali"))
Dependencies:
1	Tskhinvali	_	NNP	NNP	_	4	nsubj	_	_
2	is	_	VBZ	VBZ	_	4	cop	_	_
3	the	_	DT	DT	_	4	det	_	_
4	capital	_	NN	NN	_	0	root	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	Georgia	_	NNP	NNP	_	5	pobj	_	_
7	.	_	.	.	_	4	punct	_	_

Oracle:
(c / capital, domain, c2 / city)
(c / capital, poss, c3 / country)
(c2 / city, name, n / name)
(c3 / country, name, n2 / name)
(n / name, op, "Tskhinvali")
(n2 / name, op, "Georgia")

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(3,4,List(3),capital,capital,false)),Map(2 -> "Georgia", 1 -> name, 0 -> country, 3 -> capital),Map(n -> name, c -> country, c2 -> capital))),[Ljava.lang.String;@9ec531,Annotation([Ljava.lang.String;@40147317,[Ljava.lang.String;@210f0cc1,[Ljava.lang.String;@19542407),Annotation([Ljava.lang.String;@6f95cd51,[Ljava.lang.String;@c7a977f,[Ledu.cmu.lti.nlp.amr.Dependency;@55caeb35),Annotation([Ljava.lang.String;@6d868997,[Ljava.lang.String;@2c383e33,[Ljava.lang.String;@74a195a4),Annotation([Ljava.lang.String;@76304b46,[Ljava.lang.String;@2fa3be26,[Ledu.cmu.lti.nlp.amr.Entity;@4287d447))
AMR:
(c / country, name, n / name)
(c2 / capital, poss, c / country)
(n / name, op, "Georgia")

Decoded in 17,703 microseconds
Sentence: Georgia is mountainous.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 2-3:  mountainous => mountain

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 2-3:  mountainous => mountainous

Incorrect span: mountainous => mountain
Missing span: mountainous => mountainous
Dependencies:
1	Georgia	_	NNP	NNP	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	cop	_	_
3	mountainous	_	JJ	JJ	_	0	root	_	_
4	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(m / mountainous, domain, c / country)
(n / name, op, "Georgia")

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),mountainous,mountain,false), Span(0,1,List(3, 2, 1),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> name, 1 -> country, 0 -> mountain, 3 -> "Georgia"),Map(n -> name, m -> mountain, c -> country))),[Ljava.lang.String;@3af37506,Annotation([Ljava.lang.String;@4e6d7365,[Ljava.lang.String;@7c0da600,[Ljava.lang.String;@d4602a),Annotation([Ljava.lang.String;@21ae6e73,[Ljava.lang.String;@47dd778,[Ledu.cmu.lti.nlp.amr.Dependency;@15515c51),Annotation([Ljava.lang.String;@36a7abe1,[Ljava.lang.String;@64a896b0,[Ljava.lang.String;@e044b4a),Annotation([Ljava.lang.String;@11a82d0f,[Ljava.lang.String;@1adb7478,[Ledu.cmu.lti.nlp.amr.Entity;@3ae66c85))
AMR:
(c / country, name, n / name)
(m / mountain, domain, c / country)
(n / name, op, "Georgia")

Decoded in 9,358 microseconds
Sentence: Georgia is a rebel province.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 4-5:  province => province

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Oracle Span 4-5:  province => province
Oracle Span 3-4:  rebel => rebel-01

Missing span: rebel => rebel-01
Dependencies:
1	Georgia	_	NNP	NNP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	a	_	DT	DT	_	5	det	_	_
4	rebel	_	JJ	JJ	_	5	amod	_	_
5	province	_	NN	NN	_	0	root	_	_
6	.	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Georgia")
(p / province, domain, c / country)
(r / rebel-01, ARG0, p / province)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),province,province,false), Span(0,1,List(3, 2, 1),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> name, 1 -> country, 0 -> province, 3 -> "Georgia"),Map(n -> name, p -> province, c -> country))),[Ljava.lang.String;@16943e88,Annotation([Ljava.lang.String;@4604b900,[Ljava.lang.String;@73d6d0c,[Ljava.lang.String;@e36bb2a),Annotation([Ljava.lang.String;@3961a41a,[Ljava.lang.String;@5a4ed68f,[Ledu.cmu.lti.nlp.amr.Dependency;@367795c7),Annotation([Ljava.lang.String;@d2387c8,[Ljava.lang.String;@3956b302,[Ljava.lang.String;@1500e009),Annotation([Ljava.lang.String;@1fd386c3,[Ljava.lang.String;@edf4f36,[Ledu.cmu.lti.nlp.amr.Entity;@29d334c))
AMR:
(c / country, name, n / name)
(n / name, op, "Georgia")
(p / province, domain, c / country)

Decoded in 10,688 microseconds
Sentence: 2008-09-19

mkDayMonthYear(2008-09-19,19,09,2008)
mkDayMonthYear(2008-09-19,19,09,2008)
Spans:
Span 0-1:  2008-09-19 => (date-entity :day 19 :month 9 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2008-09-19 => (date-entity :day 19 :month 9 :year 2008)

Dependencies:
1	2008-09-19	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 19)
(d / date-entity, month, 9)
(d / date-entity, year, 2008)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-09-19,(date-entity :day 19 :month 9 :year 2008),false)),Map(2 -> 9, 1 -> 19, 0 -> date-entity, 3 -> 2008),Map(2 -> 2008, d -> date-entity, 1 -> 19, 9 -> 9))),[Ljava.lang.String;@100f9bbe,Annotation([Ljava.lang.String;@13e9f2e2,[Ljava.lang.String;@673bb956,[Ljava.lang.String;@cd7f1ae),Annotation([Ljava.lang.String;@60e949e1,[Ljava.lang.String;@3c4bc9fc,[Ledu.cmu.lti.nlp.amr.Dependency;@680362a),Annotation([Ljava.lang.String;@3569edd5,[Ljava.lang.String;@1f651cd8,[Ljava.lang.String;@7d0332e1),Annotation([Ljava.lang.String;@7a356a0d,[Ljava.lang.String;@c827db,[Ledu.cmu.lti.nlp.amr.Entity;@377c68c6))
AMR:
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)

Decoded in 8,332 microseconds
Sentence: Iraq (IQ)

NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Iraq => (country :name (name :op "Iraq"))

Incorrect span:  => amr-empty
Missing span: Iraq => (country :name (name :op "Iraq"))
Dependencies:
1	Iraq	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	IQ	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Iraq")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@538cd0f2,Annotation([Ljava.lang.String;@238ad8c,[Ljava.lang.String;@430fa4ef,[Ljava.lang.String;@1761de10),Annotation([Ljava.lang.String;@22df874e,[Ljava.lang.String;@654c1a54,[Ledu.cmu.lti.nlp.amr.Dependency;@5bdaf2ce),Annotation([Ljava.lang.String;@42d236fb,[Ljava.lang.String;@1ce93c18,[Ljava.lang.String;@19f21b6b),Annotation([Ljava.lang.String;@1532c619,[Ljava.lang.String;@46044faa,[Ledu.cmu.lti.nlp.amr.Entity;@1358b28e))
AMR:


Decoded in 4,086 microseconds
Sentence: International; Telecom; technology; crime; leader; media; dissent

Spans:
Span 11-12:  ; => and
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 6-7:  crime => crime
Span 12-13:  dissent => dissent-01
Span 10-11:  media => media
Span 4-5:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 6-7:  crime => crime
Oracle Span 12-13:  dissent => dissent-01
Oracle Span 0-1:  International => international
Oracle Span 8-9:  leader => (person :ARG0-of lead-02)
Oracle Span 10-11:  media => media
Oracle Span 4-5:  technology => technology
Oracle Span 2-3:  Telecom => telecom

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: leader => (person :ARG0-of lead-02)
Missing span: Telecom => telecom
Missing span: International => international
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	Telecom	_	NNP	NNP	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	technology	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	3	punct	_	_
7	crime	_	NN	NN	_	3	dep	_	_
8	;	_	:	:	_	7	punct	_	_
9	leader	_	NN	NN	_	7	dep	_	_
10	;	_	:	:	_	3	punct	_	_
11	media	_	NNS	NNS	_	3	dep	_	_
12	;	_	:	:	_	11	punct	_	_
13	dissent	_	NN	NN	_	11	dep	_	_

Oracle:
(a / and, op, c / crime)
(a / and, op, d / dissent-01)
(a / and, op, i / international)
(a / and, op, m / media)
(a / and, op, p / person)
(a / and, op, t / telecom)
(a / and, op, t2 / technology)
(l / lead-02, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),dissent,dissent-01,false), Span(11,12,List(1),;,and,false), Span(10,11,List(2),media,media,false), Span(9,10,List(3),;,and,false), Span(7,8,List(4),;,and,false), Span(6,7,List(5),crime,crime,false), Span(5,6,List(6),;,and,false), Span(4,5,List(7),technology,technology,false), Span(3,4,List(8),;,and,false), Span(1,2,List(9),;,and,false)),Map(2 -> media, 5 -> crime, 8 -> and, 7 -> technology, 1 -> and, 4 -> and, 6 -> and, 9 -> and, 0 -> dissent-01, 3 -> and),Map(t -> technology, a3 -> and, a6 -> and, m -> media, d -> dissent-01, a -> and, a5 -> and, a2 -> and, c -> crime, a4 -> and))),[Ljava.lang.String;@1a78dacd,Annotation([Ljava.lang.String;@19f9d595,[Ljava.lang.String;@7de4a01f,[Ljava.lang.String;@2bfeb1ef),Annotation([Ljava.lang.String;@778ca8ef,[Ljava.lang.String;@208e9ef6,[Ledu.cmu.lti.nlp.amr.Dependency;@78b236a0),Annotation([Ljava.lang.String;@261d8190,[Ljava.lang.String;@34448e6c,[Ljava.lang.String;@60e9df3c),Annotation([Ljava.lang.String;@907f2b7,[Ljava.lang.String;@435ce306,[Ledu.cmu.lti.nlp.amr.Entity;@537b32ef))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, a5 / and)
(a2 / and, op, d / dissent-01)
(a4 / and, op, a3 / and)
(a5 / and, op, a4 / and)
(a5 / and, op, t / technology)
(a6 / and, op, a5 / and)
(a6 / and, op, c / crime)
(a6 / and, op, m / media)

Decoded in 57,962 microseconds
Sentence: Iranian News Agency Fars stated that hackers known as group XP defaced or blocked 100s of Shiite-related websites.

NER Entity: (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
NER Entity: (organization :name (name :op "XP"))
Spans:
Span 14-15:  100s => 100
Span 13-14:  blocked => block-01
Span 6-7:  hackers => (person :ARG0-of hack-04)
Span 0-4:  Iranian News Agency Fars => (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
Span 7-8:  known => know-01
Span 12-13:  or => or
Span 18-19:  related => relate-01
Span 19-20:  websites => website

Langrangian relaxation converged after 41 iterations. Delta = 0.0
WARNING ADDING ANOTHER SPAN TO NODE 0.0.0.1
ArrayBuffer(13) + 14
WARNING ADDING ANOTHER SPAN TO NODE 0.0.0.2
ArrayBuffer(13) + 15
Oracle Span 14-15:  100s => 100
Oracle Span 2-3:  Agency => "Agency"
Oracle Span 13-14:  blocked => block-01
Oracle Span 11-12:  defaced => deface-01
Oracle Span 9-10:  group => group
Oracle Span 6-7:  hackers => (person :ARG0-of hack-04)
Oracle Span 0-1:  Iranian => (country :name (name :op "Iran"))
Oracle Span 7-8:  known => know-01
Oracle Span 1-2:  News => "News"
Oracle Span 1-4:  News Agency Fars => (publication :name (name :op "Agency" :op "News" :op "Fars"))
Oracle Span 12-13:  or => or
Oracle Span 18-19:  related => relate-01
Oracle Span 16-17:  Shiite => (religious-group :name (name :op "Shiite"))
Oracle Span 4-5:  stated => state-01
Oracle Span 19-20:  websites => website
Oracle Span 10-11:  XP => (name :op "XP")

Extra span: Iranian News Agency Fars => (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
Missing span: XP => (name :op "XP")
Missing span: Shiite => (religious-group :name (name :op "Shiite"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: defaced => deface-01
Missing span: group => group
Missing span: News Agency Fars => (publication :name (name :op "Agency" :op "News" :op "Fars"))
Missing span: News => "News"
Missing span: Agency => "Agency"
Dependencies:
1	Iranian	_	NNP	NNP	_	4	nn	_	_
2	News	_	NNP	NNP	_	4	nn	_	_
3	Agency	_	NNP	NNP	_	4	nn	_	_
4	Fars	_	NNP	NNP	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	that	_	IN	IN	_	12	mark	_	_
7	hackers	_	NNS	NNS	_	12	nsubj	_	_
8	known	_	VBN	VBN	_	7	vmod	_	_
9	as	_	IN	IN	_	8	prep	_	_
10	group	_	NN	NN	_	11	nn	_	_
11	XP	_	NN	NN	_	9	pobj	_	_
12	defaced	_	VBD	VBD	_	5	ccomp	_	_
13	or	_	CC	CC	_	12	cc	_	_
14	blocked	_	VBD	VBD	_	12	conj	_	_
15	100s	_	NNS	NNS	_	14	dobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	Shiite-related	_	JJ	JJ	_	18	amod	_	_
18	websites	_	NNS	NNS	_	16	pobj	_	_
19	.	_	.	.	_	5	punct	_	_

Oracle:
(b / block-01, ARG0, p2 / person)
(b / block-01, ARG1, w / website)
(c / country, name, n2 / name)
(d / deface-01, ARG0, p2 / person)
(d / deface-01, ARG1, w / website)
(g / group, name, n3 / name)
(h / hack-04, ARG0, p2 / person)
(k / know-01, ARG1, p2 / person)
(k / know-01, ARG2, g / group)
(n / name, op, "Fars")
(n / name, op, A / "Agency")
(n / name, op, N / "News")
(n2 / name, op, "Iran")
(n3 / name, op, "XP")
(n4 / name, op, "Shiite")
(o / or, op, b / block-01)
(o / or, op, d / deface-01)
(p / publication, mod, c / country)
(p / publication, name, n / name)
(r / relate-01, ARG1, w / website)
(r / relate-01, ARG2, r2 / religious-group)
(r2 / religious-group, name, n4 / name)
(s / state-01, ARG0, p / publication)
(s / state-01, ARG1, o / or)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),websites,website,false), Span(18,19,List(1),related,relate-01,false), Span(14,15,List(2),100s,100,false), Span(13,14,List(3),blocked,block-01,false), Span(12,13,List(4),or,or,false), Span(7,8,List(5),known,know-01,false), Span(6,7,List(7, 6),hackers,(person :ARG0-of hack-04),false), Span(0,4,List(13, 12, 11, 10, 9, 8),Iranian News Agency Fars,(organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars")),false)),Map(2 -> 100, 5 -> know-01, 12 -> "Agency", 8 -> organization, 7 -> hack-04, 1 -> relate-01, 4 -> or, 11 -> "News", 6 -> person, 0 -> website, 9 -> name, 3 -> block-01, 10 -> "Iranian", 13 -> "Fars"),Map(n -> name, w -> website, h -> hack-04, k -> know-01, b -> block-01, p -> person, 1 -> 100, o2 -> organization, r -> relate-01, o -> or))),[Ljava.lang.String;@7dc51783,Annotation([Ljava.lang.String;@4b61d0c6,[Ljava.lang.String;@6f815e7f,[Ljava.lang.String;@65e7f52a),Annotation([Ljava.lang.String;@304b9f1a,[Ljava.lang.String;@75699e35,[Ledu.cmu.lti.nlp.amr.Dependency;@107e5441),Annotation([Ljava.lang.String;@4aeaadc1,[Ljava.lang.String;@263558c9,[Ljava.lang.String;@1f14f20c),Annotation([Ljava.lang.String;@7daa61f3,[Ljava.lang.String;@62315f22,[Ledu.cmu.lti.nlp.amr.Entity;@6e4ea0bd))
AMR:
(b / block-01, ARG0, p / person)
(b / block-01, time, w / website)
(h / hack-04, ARG0, p / person)
(k / know-01, ARG0, o2 / organization)
(k / know-01, ARG1, p / person)
(n / name, op, "Agency")
(n / name, op, "Fars")
(n / name, op, "Iranian")
(n / name, op, "News")
(o / or, op, 1 / 100)
(o / or, op, b / block-01)
(o2 / organization, name, n / name)
(r / relate-01, ARG1, w / website)

Decoded in 470,381 microseconds
Sentence: The official website of Iraq's Shiite leader the Grand Ayatollah Ali al-Sistani was among the websites defaced and blocked.

NER Entity: (country :name (name :op "Iraq"))
NER Entity: (thing :name (name :op "Shiite"))
NER Entity: (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
Spans:
Span 19-20:  blocked => block-01
Span 9-13:  Grand Ayatollah Ali al-Sistani => (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
Span 2-3:  website => website
Span 16-17:  websites => website

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 19-20:  blocked => block-01
Oracle Span 17-18:  defaced => deface-01
Oracle Span 9-13:  Grand Ayatollah Ali al-Sistani => (person :name (name :op "al-Sistani" :op "Ali" :op "Ayatollah" :op "Grand"))
Oracle Span 4-5:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 7-8:  leader => lead-02
Oracle Span 3-4:  of => include-91
Oracle Span 1-2:  official => official
Oracle Span 6-7:  Shiite => (religious-group :name (name :op "Shiite"))
Oracle Span 2-3:  website => website
Oracle Span 16-17:  websites => website

Incorrect span: Grand Ayatollah Ali al-Sistani => (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
Missing span: Grand Ayatollah Ali al-Sistani => (person :name (name :op "al-Sistani" :op "Ali" :op "Ayatollah" :op "Grand"))
Missing span: Shiite => (religious-group :name (name :op "Shiite"))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: of => include-91
Missing span: defaced => deface-01
Missing span: leader => lead-02
Missing span: official => official
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	official	_	JJ	JJ	_	3	amod	_	_
3	website	_	NN	NN	_	18	nsubj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	Iraq	_	NNP	NNP	_	8	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	Shiite	_	JJ	JJ	_	8	amod	_	_
8	leader	_	NN	NN	_	4	pobj	_	_
9	the	_	DT	DT	_	13	det	_	_
10	Grand	_	NNP	NNP	_	13	nn	_	_
11	Ayatollah	_	NNP	NNP	_	13	nn	_	_
12	Ali	_	NNP	NNP	_	13	nn	_	_
13	al-Sistani	_	NNP	NNP	_	14	nsubj	_	_
14	was	_	VBD	VBD	_	8	rcmod	_	_
15	among	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	websites	_	NNS	NNS	_	15	pobj	_	_
18	defaced	_	VBD	VBD	_	0	root	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	blocked	_	VBD	VBD	_	18	conj	_	_
21	.	_	.	.	_	18	punct	_	_

Oracle:
(b / block-01, ARG1, w2 / website)
(c / country, name, n3 / name)
(d / deface-01, ARG1, w2 / website)
(i / include-91, ARG1, w / website)
(i / include-91, ARG2, w2 / website)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, r / religious-group)
(n / name, op, "Ali")
(n / name, op, "Ayatollah")
(n / name, op, "Grand")
(n / name, op, "al-Sistani")
(n2 / name, op, "Shiite")
(n3 / name, op, "Iraq")
(p / person, name, n / name)
(p / person, poss, c / country)
(r / religious-group, name, n2 / name)
(w / website, mod, o / official)
(w / website, poss, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),blocked,block-01,false), Span(16,17,List(1),websites,website,false), Span(9,13,List(7, 6, 5, 4, 3, 2),Grand Ayatollah Ali al-Sistani,(person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani")),false), Span(2,3,List(8),website,website,false)),Map(2 -> person, 5 -> "Ayatollah", 8 -> website, 7 -> "al-Sistani", 1 -> website, 4 -> "Grand", 6 -> "Ali", 0 -> block-01, 3 -> name),Map(n -> name, w -> website, b -> block-01, p -> person, w2 -> website))),[Ljava.lang.String;@56f2bbea,Annotation([Ljava.lang.String;@78f9ed3e,[Ljava.lang.String;@1059754c,[Ljava.lang.String;@b0964b2),Annotation([Ljava.lang.String;@48e7b3d2,[Ljava.lang.String;@7f4037ed,[Ledu.cmu.lti.nlp.amr.Dependency;@24e8de5c),Annotation([Ljava.lang.String;@64040287,[Ljava.lang.String;@110844f6,[Ljava.lang.String;@6f89f665),Annotation([Ljava.lang.String;@df1cff6,[Ljava.lang.String;@4925f4f5,[Ledu.cmu.lti.nlp.amr.Entity;@1ad926d3))
AMR:
(b / block-01, ARG0, w2 / website)
(b / block-01, ARG1, w / website)
(b / block-01, ARG2, p / person)
(n / name, op, "Ali")
(n / name, op, "Ayatollah")
(n / name, op, "Grand")
(n / name, op, "al-Sistani")
(p / person, name, n / name)

Decoded in 96,986 microseconds
Sentence: Group XP stated on the defaced website that any website that contained material contrary to Sunni teachings would be hacked.

NER Entity: (organization :name (name :op "XP"))
NER Entity: (thing :name (name :op "Sunni"))
Spans:
Span 8-9:  any => any
Span 11-12:  contained => contain-01
Span 13-14:  contrary => contrary-41
Span 19-20:  hacked => hack-04
Span 12-13:  material => material
Span 9-10:  website => website
Span 6-7:  website => website

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 8-9:  any => any
Oracle Span 11-12:  contained => contain-01
Oracle Span 13-14:  contrary => contrary-41
Oracle Span 5-6:  defaced => deface-01
Oracle Span 0-1:  Group => group
Oracle Span 19-20:  hacked => hack-04
Oracle Span 12-13:  material => material
Oracle Span 2-3:  stated => state-01
Oracle Span 15-16:  Sunni => (religious-group :name (name :op "Sunni"))
Oracle Span 16-17:  teachings => teach-01
Oracle Span 6-7:  website => website
Oracle Span 9-10:  website => website
Oracle Span 1-2:  XP => (name :op "XP")

Missing span: XP => (name :op "XP")
Missing span: Sunni => (religious-group :name (name :op "Sunni"))
Missing span: stated => state-01
Missing span: defaced => deface-01
Missing span: Group => group
Missing span: teachings => teach-01
Dependencies:
1	Group	_	NNP	NNP	_	2	nn	_	_
2	XP	_	NNP	NNP	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	on	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	defaced	_	JJ	JJ	_	7	amod	_	_
7	website	_	NN	NN	_	4	pobj	_	_
8	that	_	IN	IN	_	20	mark	_	_
9	any	_	DT	DT	_	10	det	_	_
10	website	_	NN	NN	_	20	nsubjpass	_	_
11	that	_	WDT	WDT	_	12	nsubj	_	_
12	contained	_	VBD	VBD	_	10	rcmod	_	_
13	material	_	NN	NN	_	14	nn	_	_
14	contrary	_	NN	NN	_	12	dobj	_	_
15	to	_	TO	TO	_	12	prep	_	_
16	Sunni	_	NNP	NNP	_	17	nn	_	_
17	teachings	_	NNS	NNS	_	15	pobj	_	_
18	would	_	MD	MD	_	20	aux	_	_
19	be	_	VB	VB	_	20	auxpass	_	_
20	hacked	_	VBN	VBN	_	3	ccomp	_	_
21	.	_	.	.	_	3	punct	_	_

Oracle:
(c / contain-01, ARG0, w / website)
(c / contain-01, ARG1, m / material)
(c2 / contrary-41, ARG1, m / material)
(c2 / contrary-41, ARG2, t / teach-01)
(d / deface-01, ARG1, w2 / website)
(g / group, name, n / name)
(h / hack-04, ARG1, w / website)
(n / name, op, "XP")
(n2 / name, op, "Sunni")
(r / religious-group, name, n2 / name)
(s / state-01, ARG0, g / group)
(s / state-01, ARG1, h / hack-04)
(s / state-01, medium, w2 / website)
(t / teach-01, mod, r / religious-group)
(w / website, mod, a / any)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),hacked,hack-04,false), Span(13,14,List(1),contrary,contrary-41,false), Span(12,13,List(2),material,material,false), Span(11,12,List(3),contained,contain-01,false), Span(9,10,List(4),website,website,false), Span(8,9,List(5),any,any,false), Span(6,7,List(6),website,website,false)),Map(2 -> material, 5 -> any, 1 -> contrary-41, 4 -> website, 6 -> website, 0 -> hack-04, 3 -> contain-01),Map(w -> website, h -> hack-04, m -> material, a -> any, w2 -> website, c -> contrary-41, c2 -> contain-01))),[Ljava.lang.String;@3a43d133,Annotation([Ljava.lang.String;@39ce27f2,[Ljava.lang.String;@5f2afe62,[Ljava.lang.String;@c96a4ea),Annotation([Ljava.lang.String;@28782602,[Ljava.lang.String;@60c16548,[Ledu.cmu.lti.nlp.amr.Dependency;@68105edc),Annotation([Ljava.lang.String;@511816c0,[Ljava.lang.String;@38b972d7,[Ljava.lang.String;@5339bbad),Annotation([Ljava.lang.String;@3935e9a8,[Ljava.lang.String;@288a4658,[Ledu.cmu.lti.nlp.amr.Entity;@5b56b654))
AMR:
(c / contrary-41, ARG0, m / material)
(c / contrary-41, ARG1, w2 / website)
(c2 / contain-01, ARG0, w / website)
(c2 / contain-01, ARG1, c / contrary-41)
(h / hack-04, ARG1, w / website)
(w / website, mod, a / any)

Decoded in 130,589 microseconds
Sentence: The official website of Iraq's Shiite religious leader the Grand Ayatollah Ali al-Sistani was defaced and blocked in a sectarian-motivated cyber attack on Shiite-related sites.

NER Entity: (country :name (name :op "Iraq"))
NER Entity: (thing :name (name :op "Shiite"))
NER Entity: (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
Spans:
Span 24-25:  attack => attack-01
Span 17-18:  blocked => block-01
Span 23-24:  cyber => cyber
Span 10-14:  Grand Ayatollah Ali al-Sistani => (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
Span 22-23:  motivated => motivate-02
Span 28-29:  related => relate-01
Span 20-21:  sectarian => sectarian
Span 29-30:  sites => site
Span 2-3:  website => website

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 24-25:  attack => attack-01
Oracle Span 17-18:  blocked => block-01
Oracle Span 23-24:  cyber => cyber
Oracle Span 15-16:  defaced => deface-01
Oracle Span 10-14:  Grand Ayatollah Ali al-Sistani => (person :name (name :op "al-Sistani" :op "Ali" :op "Ayatollah" :op "Grand"))
Oracle Span 4-5:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 8-9:  leader => lead-02
Oracle Span 22-23:  motivated => motivate-01
Oracle Span 1-2:  official => official
Oracle Span 28-29:  related => relate-01
Oracle Span 7-8:  religious => religious-group
Oracle Span 20-21:  sectarian => sectarian
Oracle Span 6-7:  Shiite => (name :op "Shiite")
Oracle Span 29-30:  sites => site
Oracle Span 2-3:  website => website

Incorrect span: motivated => motivate-02
Incorrect span: Grand Ayatollah Ali al-Sistani => (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
Missing span: Grand Ayatollah Ali al-Sistani => (person :name (name :op "al-Sistani" :op "Ali" :op "Ayatollah" :op "Grand"))
Missing span: Shiite => (name :op "Shiite")
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: and => and
Missing span: defaced => deface-01
Missing span: motivated => motivate-01
Missing span: official => official
Missing span: leader => lead-02
Missing span: religious => religious-group
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	official	_	JJ	JJ	_	3	amod	_	_
3	website	_	NN	NN	_	16	nsubjpass	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	Iraq	_	NNP	NNP	_	9	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	Shiite	_	JJ	JJ	_	9	amod	_	_
8	religious	_	JJ	JJ	_	9	amod	_	_
9	leader	_	NN	NN	_	4	pobj	_	_
10	the	_	DT	DT	_	14	det	_	_
11	Grand	_	NNP	NNP	_	14	nn	_	_
12	Ayatollah	_	NNP	NNP	_	14	nn	_	_
13	Ali	_	NNP	NNP	_	14	nn	_	_
14	al-Sistani	_	NN	NN	_	9	dep	_	_
15	was	_	VBD	VBD	_	16	auxpass	_	_
16	defaced	_	VBN	VBN	_	0	root	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	blocked	_	VBN	VBN	_	16	conj	_	_
19	in	_	IN	IN	_	16	prep	_	_
20	a	_	DT	DT	_	23	det	_	_
21	sectarian-motivated	_	JJ	JJ	_	23	amod	_	_
22	cyber	_	NN	NN	_	23	nn	_	_
23	attack	_	NN	NN	_	19	pobj	_	_
24	on	_	IN	IN	_	23	prep	_	_
25	Shiite-related	_	JJ	JJ	_	26	amod	_	_
26	sites	_	NNS	NNS	_	24	pobj	_	_
27	.	_	.	.	_	16	punct	_	_

Oracle:
(a / and, op, b / block-01)
(a / and, op, d / deface-01)
(a2 / attack-01, ARG1, s2 / site)
(a2 / attack-01, mod, c2 / cyber)
(b / block-01, ARG1, w / website)
(b / block-01, ARG2, a2 / attack-01)
(c / country, name, n3 / name)
(d / deface-01, ARG1, w / website)
(d / deface-01, ARG2, a2 / attack-01)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, r / religious-group)
(m / motivate-01, ARG0, s / sectarian)
(m / motivate-01, ARG2, a2 / attack-01)
(n / name, op, "Ali")
(n / name, op, "Ayatollah")
(n / name, op, "Grand")
(n / name, op, "al-Sistani")
(n2 / name, op, "Shiite")
(n3 / name, op, "Iraq")
(p / person, name, n / name)
(p / person, poss, c / country)
(r / religious-group, name, n2 / name)
(r3 / relate-01, ARG1, s2 / site)
(r3 / relate-01, ARG2, r / religious-group)
(w / website, mod, o / official)
(w / website, poss, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),sites,site,false), Span(28,29,List(1),related,relate-01,false), Span(24,25,List(2),attack,attack-01,false), Span(23,24,List(3),cyber,cyber,false), Span(22,23,List(4),motivated,motivate-02,false), Span(20,21,List(5),sectarian,sectarian,false), Span(17,18,List(6),blocked,block-01,false), Span(10,14,List(12, 11, 10, 9, 8, 7),Grand Ayatollah Ali al-Sistani,(person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani")),false), Span(2,3,List(13),website,website,false)),Map(2 -> attack-01, 5 -> sectarian, 12 -> "al-Sistani", 8 -> name, 7 -> person, 1 -> relate-01, 4 -> motivate-02, 11 -> "Ali", 6 -> block-01, 0 -> site, 9 -> "Grand", 3 -> cyber, 10 -> "Ayatollah", 13 -> website),Map(w -> website, n -> name, b -> block-01, s2 -> sectarian, s -> site, m -> motivate-02, p -> person, a -> attack-01, r -> relate-01, c -> cyber))),[Ljava.lang.String;@452c8a40,Annotation([Ljava.lang.String;@534243e4,[Ljava.lang.String;@29006752,[Ljava.lang.String;@470a9030),Annotation([Ljava.lang.String;@66d57c1b,[Ljava.lang.String;@27494e46,[Ledu.cmu.lti.nlp.amr.Dependency;@d59970a),Annotation([Ljava.lang.String;@1e411d81,[Ljava.lang.String;@53b98ff6,[Ljava.lang.String;@3e6fd0b9),Annotation([Ljava.lang.String;@7fcff1b9,[Ljava.lang.String;@697446d4,[Ledu.cmu.lti.nlp.amr.Entity;@76adb233))
AMR:
(a / attack-01, ARG1, s / site)
(a / attack-01, mod, c / cyber)
(b / block-01, ARG0, p / person)
(b / block-01, ARG1, w / website)
(b / block-01, ARG4, a / attack-01)
(m / motivate-02, ARG1, a / attack-01)
(m / motivate-02, ARG2, s2 / sectarian)
(n / name, op, "Ali")
(n / name, op, "Ayatollah")
(n / name, op, "Grand")
(n / name, op, "al-Sistani")
(p / person, name, n / name)
(r / relate-01, ARG1, s / site)

Decoded in 252,551 microseconds
Sentence: It was not clear whether the attack began on 18 September 2008 or the morning of 19 September 2008.

mkDayMonthYear(18	September	2008,18,September,2008)
mkDayMonthYear(19	September	2008,19,September,2008)
Spans:
Span 9-12:  18 September 2008 => (date-entity :day 18 :month 9 :year 2008)
Span 16-19:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Span 6-7:  attack => attack-01
Span 7-8:  began => begin-01
Span 0-1:  It => it
Span 14-15:  morning => morning
Span 12-13:  or => or

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-12:  18 September 2008 => (date-entity :day 18 :month 9 :year 2008)
Oracle Span 16-19:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Oracle Span 6-7:  attack => attack-01
Oracle Span 7-8:  began => begin-01
Oracle Span 3-4:  clear => clear
Oracle Span 14-15:  morning => morning
Oracle Span 12-13:  or => or

Extra span: It => it
Missing span: clear => clear
Dependencies:
1	It	_	PRP	PRP	_	4	nsubj	_	_
2	was	_	VBD	VBD	_	4	cop	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	clear	_	JJ	JJ	_	0	root	_	_
5	whether	_	IN	IN	_	8	mark	_	_
6	the	_	DT	DT	_	7	det	_	_
7	attack	_	NN	NN	_	8	nsubj	_	_
8	began	_	VBD	VBD	_	4	ccomp	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	18	_	CD	CD	_	11	num	_	_
11	September	_	NNP	NNP	_	9	pobj	_	_
12	2008	_	CD	CD	_	11	num	_	_
13	or	_	CC	CC	_	11	cc	_	_
14	the	_	DT	DT	_	15	det	_	_
15	morning	_	NN	NN	_	11	conj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	19	_	CD	CD	_	16	pobj	_	_
18	September	_	NNP	NNP	_	8	tmod	_	_
19	2008	_	CD	CD	_	18	num	_	_
20	.	_	.	.	_	4	punct	_	_

Oracle:
(b / begin-01, ARG1, a / attack-01)
(b / begin-01, time, o / or)
(c / clear, domain, b / begin-01)
(d / date-entity, day, 18)
(d / date-entity, month, 9)
(d / date-entity, year, 2008)
(d2 / date-entity, day, 19)
(d2 / date-entity, dayperiod, m / morning)
(d2 / date-entity, month, 9)
(d2 / date-entity, year, 2008)
(o / or, op, d / date-entity)
(o / or, op, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(16,19,List(3, 2, 1, 0),19 September 2008,(date-entity :day 19 :month 9 :year 2008),false), Span(14,15,List(4),morning,morning,false), Span(12,13,List(5),or,or,false), Span(9,12,List(9, 8, 7, 6),18 September 2008,(date-entity :day 18 :month 9 :year 2008),false), Span(7,8,List(10),began,begin-01,false), Span(6,7,List(11),attack,attack-01,false), Span(0,1,List(12),It,it,false)),Map(2 -> 9, 5 -> or, 12 -> it, 8 -> 9, 7 -> 18, 1 -> 19, 4 -> morning, 11 -> attack-01, 6 -> date-entity, 0 -> date-entity, 9 -> 2008, 3 -> 2008, 10 -> begin-01),Map(2 -> 2008, 12 -> 18, b -> begin-01, 92 -> 9, d -> date-entity, m -> morning, 1 -> 19, a -> attack-01, d2 -> date-entity, i -> it, 9 -> 9, 22 -> 2008, o -> or))),[Ljava.lang.String;@36074e47,Annotation([Ljava.lang.String;@36453307,[Ljava.lang.String;@7dcc91fd,[Ljava.lang.String;@66eb985d),Annotation([Ljava.lang.String;@6a9287b1,[Ljava.lang.String;@75504cef,[Ledu.cmu.lti.nlp.amr.Dependency;@6c8a68c1),Annotation([Ljava.lang.String;@56193c7d,[Ljava.lang.String;@28c88600,[Ljava.lang.String;@5f8890c2),Annotation([Ljava.lang.String;@607b2792,[Ljava.lang.String;@7f9e1534,[Ledu.cmu.lti.nlp.amr.Entity;@138a7441))
AMR:
(b / begin-01, ARG0, a / attack-01)
(b / begin-01, ARG1, i / it)
(b / begin-01, time, d2 / date-entity)
(d / date-entity, day, 1 / 19)
(d / date-entity, dayperiod, m / morning)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)
(d2 / date-entity, day, 12 / 18)
(d2 / date-entity, month, 92 / 9)
(d2 / date-entity, year, 22 / 2008)
(o / or, op, b / begin-01)
(o / or, op, m / morning)

Decoded in 106,635 microseconds
Sentence: By the evening of 19 September 2008 Al-Sistani's website was offline.

mkDayMonthYear(19	September	2008,19,September,2008)
NER Entity: (person :name (name :op "Al-Sistani"))
Spans:
Span 4-7:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Span 0-1:  By => by
Span 2-3:  evening => evening
Span 9-10:  website => website

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-7:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Oracle Span 7-8:  Al-Sistani => (person :name (name :op "Al-Sistani"))
Oracle Span 2-3:  evening => evening
Oracle Span 11-12:  offline => offline
Oracle Span 9-10:  website => website

Extra span: By => by
Missing span: Al-Sistani => (person :name (name :op "Al-Sistani"))
Missing span: offline => offline
Dependencies:
1	By	_	IN	IN	_	12	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	evening	_	NN	NN	_	1	pobj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	19	_	CD	CD	_	4	pobj	_	_
6	September	_	NNP	NNP	_	3	tmod	_	_
7	2008	_	CD	CD	_	6	num	_	_
8	Al-Sistani	_	NNP	NNP	_	10	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	website	_	NN	NN	_	12	nsubj	_	_
11	was	_	VBD	VBD	_	12	cop	_	_
12	offline	_	JJ	JJ	_	0	root	_	_
13	.	_	.	.	_	12	punct	_	_

Oracle:
(d / date-entity, day, 19)
(d / date-entity, dayperiod, e / evening)
(d / date-entity, month, 9)
(d / date-entity, year, 2008)
(n / name, op, "Al-Sistani")
(o / offline, domain, w / website)
(o / offline, time, d / date-entity)
(p / person, name, n / name)
(w / website, poss, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),website,website,false), Span(4,7,List(4, 3, 2, 1),19 September 2008,(date-entity :day 19 :month 9 :year 2008),false), Span(2,3,List(5),evening,evening,false), Span(0,1,List(6),By,by,false)),Map(2 -> 19, 5 -> evening, 1 -> date-entity, 4 -> 2008, 6 -> by, 0 -> website, 3 -> 9),Map(e -> evening, w -> website, 2 -> 2008, b -> by, d -> date-entity, 1 -> 19, 9 -> 9))),[Ljava.lang.String;@81ff872,Annotation([Ljava.lang.String;@31611954,[Ljava.lang.String;@3e598df9,[Ljava.lang.String;@7e31ce0f),Annotation([Ljava.lang.String;@99a65d3,[Ljava.lang.String;@3088660d,[Ledu.cmu.lti.nlp.amr.Dependency;@42cc13a0),Annotation([Ljava.lang.String;@32fdec40,[Ljava.lang.String;@6813a331,[Ljava.lang.String;@1bd81830),Annotation([Ljava.lang.String;@39ab59f8,[Ljava.lang.String;@64e92d61,[Ledu.cmu.lti.nlp.amr.Entity;@111610e6))
AMR:
(b / by, op, e / evening)
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)
(e / evening, poss, w / website)
(e / evening, time, d / date-entity)

Decoded in 39,681 microseconds
Sentence: Another website related to 1 of Al-Sistani's religious organizations, www.al-shia.com, was also affected.

NER Entity: (person :name (name :op "Al-Sistani"))
Spans:
Span 15-16:  affected => affect-01
Span 0-1:  Another => another
Span 9-10:  organizations => organization
Span 2-3:  related => relate-01
Span 1-2:  website => website

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 4-5:  1 => 1
Oracle Span 15-16:  affected => affect-01
Oracle Span 6-7:  Al-Sistani => (person :name (name :op "Al-Sistani"))
Oracle Span 14-15:  also => also
Oracle Span 0-1:  Another => another
Oracle Span 5-6:  of => include-91
Oracle Span 9-10:  organizations => organization
Oracle Span 2-3:  related => relate-01
Oracle Span 8-9:  religious => religion
Oracle Span 1-2:  website => website
Oracle Span 11-12:  www.al-shia.com => "www.al-shia.com"

Missing span: Al-Sistani => (person :name (name :op "Al-Sistani"))
Missing span: also => also
Missing span: www.al-shia.com => "www.al-shia.com"
Missing span: of => include-91
Missing span: 1 => 1
Missing span: religious => religion
Dependencies:
1	Another	_	DT	DT	_	2	det	_	_
2	website	_	NN	NN	_	16	nsubjpass	_	_
3	related	_	VBN	VBN	_	2	vmod	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	1	_	CD	CD	_	4	pobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	Al-Sistani	_	NNP	NNP	_	10	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	religious	_	JJ	JJ	_	10	amod	_	_
10	organizations	_	NNS	NNS	_	6	pobj	_	_
11	,	_	,	,	_	2	punct	_	_
12	www.al-shia.com	_	NN	NN	_	2	appos	_	_
13	,	_	,	,	_	2	punct	_	_
14	was	_	VBD	VBD	_	16	auxpass	_	_
15	also	_	RB	RB	_	16	advmod	_	_
16	affected	_	VBN	VBN	_	0	root	_	_
17	.	_	.	.	_	16	punct	_	_

Oracle:
(a / affect-01, ARG1, w / website)
(a / affect-01, mod, a3 / also)
(i / include-91, ARG1, o / organization)
(n / name, op, "Al-Sistani")
(o / organization, mod, r2 / religion)
(o / organization, quant, 1 / 1)
(p / person, name, n / name)
(r / relate-01, ARG1, w / website)
(r / relate-01, ARG2, o / organization)
(w / website, mod, a2 / another)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),affected,affect-01,false), Span(9,10,List(1),organizations,organization,false), Span(2,3,List(2),related,relate-01,false), Span(1,2,List(3),website,website,false), Span(0,1,List(4),Another,another,false)),Map(2 -> relate-01, 1 -> organization, 4 -> another, 0 -> affect-01, 3 -> website),Map(w -> website, a -> affect-01, a2 -> another, r -> relate-01, o -> organization))),[Ljava.lang.String;@4ad4936c,Annotation([Ljava.lang.String;@29d37757,[Ljava.lang.String;@4fcc529,[Ljava.lang.String;@25cc7470),Annotation([Ljava.lang.String;@4beddc56,[Ljava.lang.String;@79b663b3,[Ledu.cmu.lti.nlp.amr.Dependency;@1b812421),Annotation([Ljava.lang.String;@5d28bcd5,[Ljava.lang.String;@7882c44a,[Ljava.lang.String;@32639b12),Annotation([Ljava.lang.String;@20d11153,[Ljava.lang.String;@3887cf88,[Ledu.cmu.lti.nlp.amr.Entity;@5649ec46))
AMR:
(a / affect-01, ARG1, w / website)
(r / relate-01, ARG0, o / organization)
(r / relate-01, ARG1, w / website)
(w / website, mod, a2 / another)

Decoded in 59,786 microseconds
Sentence: An alternative address, www.sistani.com, was still operational.

Spans:
Span 1-2:  alternative => alternative
Span 8-9:  operational => operate-01
Span 7-8:  still => still

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  address => address
Oracle Span 1-2:  alternative => alternative
Oracle Span 8-9:  operational => operate-01
Oracle Span 7-8:  still => still
Oracle Span 4-5:  www.sistani.com => "www.sistani.com"

Missing span: address => address
Missing span: www.sistani.com => "www.sistani.com"
Dependencies:
1	An	_	DT	DT	_	3	det	_	_
2	alternative	_	JJ	JJ	_	3	amod	_	_
3	address	_	NN	NN	_	9	nsubj	_	_
4	,	_	,	,	_	3	punct	_	_
5	www.sistani.com	_	NN	NN	_	3	appos	_	_
6	,	_	,	,	_	3	punct	_	_
7	was	_	VBD	VBD	_	9	cop	_	_
8	still	_	RB	RB	_	9	advmod	_	_
9	operational	_	JJ	JJ	_	0	root	_	_
10	.	_	.	.	_	9	punct	_	_

Oracle:
(a / address, mod, a2 / alternative)
(o / operate-01, ARG1, a / address)
(o / operate-01, mod, s / still)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),operational,operate-01,false), Span(7,8,List(1),still,still,false), Span(1,2,List(2),alternative,alternative,false)),Map(2 -> alternative, 1 -> still, 0 -> operate-01),Map(s -> still, a -> alternative, o -> operate-01))),[Ljava.lang.String;@78dc4696,Annotation([Ljava.lang.String;@502f8b57,[Ljava.lang.String;@5652f555,[Ljava.lang.String;@4fe01805),Annotation([Ljava.lang.String;@55120f99,[Ljava.lang.String;@794b435f,[Ledu.cmu.lti.nlp.amr.Dependency;@38f2e97e),Annotation([Ljava.lang.String;@779dfe55,[Ljava.lang.String;@323659f8,[Ljava.lang.String;@1144a55a),Annotation([Ljava.lang.String;@3e521715,[Ljava.lang.String;@26a529dc,[Ledu.cmu.lti.nlp.amr.Entity;@265c5d69))
AMR:
(a / alternative, op, s / still)
(o / operate-01, mod, s / still)

Decoded in 17,470 microseconds
Sentence: Iranian News Agency Fars stated that group XP had blocked access to approximately 300 Shiite-related sites on 18 September 2008 and 19 September 2008.

NER Entity: (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
NER Entity: (organization :name (name :op "XP"))
mkDayMonthYear(18	September	2008,18,September,2008)
mkDayMonthYear(19	September	2008,19,September,2008)
Spans:
Span 19-22:  18 September 2008 => (date-entity :day 18 :month 9 :year 2008)
Span 23-26:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Span 13-14:  300 => 300
Span 10-11:  access => access-01
Span 9-10:  blocked => block-01
Span 0-4:  Iranian News Agency Fars => (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
Span 16-17:  related => relate-01
Span 17-18:  sites => site

Langrangian relaxation converged after 11 iterations. Delta = 0.0
WARNING ADDING ANOTHER SPAN TO NODE 0.0.0.1
ArrayBuffer(14) + 15
WARNING ADDING ANOTHER SPAN TO NODE 0.0.0.2
ArrayBuffer(14) + 16
Oracle Span 19-22:  18 September 2008 => (date-entity :day 18 :month 9 :year 2008)
Oracle Span 23-26:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Oracle Span 13-14:  300 => 300
Oracle Span 10-11:  access => access-01
Oracle Span 2-3:  Agency => "Agency"
Oracle Span 22-23:  and => and
Oracle Span 12-13:  approximately => approximately
Oracle Span 9-10:  blocked => block-01
Oracle Span 6-7:  group => group
Oracle Span 0-1:  Iranian => (country :name (name :op "Iran"))
Oracle Span 1-2:  News => "News"
Oracle Span 1-4:  News Agency Fars => (publication :name (name :op "Agency" :op "News" :op "Fars"))
Oracle Span 16-17:  related => relate-01
Oracle Span 14-15:  Shiite => (religious-group :name (name :op "Shiite"))
Oracle Span 17-18:  sites => site
Oracle Span 4-5:  stated => state-01
Oracle Span 7-8:  XP => (name :op "XP")

Extra span: Iranian News Agency Fars => (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
Missing span: XP => (name :op "XP")
Missing span: Shiite => (religious-group :name (name :op "Shiite"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: stated => state-01
Missing span: and => and
Missing span: approximately => approximately
Missing span: group => group
Missing span: News Agency Fars => (publication :name (name :op "Agency" :op "News" :op "Fars"))
Missing span: News => "News"
Missing span: Agency => "Agency"
Dependencies:
1	Iranian	_	NNP	NNP	_	4	nn	_	_
2	News	_	NNP	NNP	_	4	nn	_	_
3	Agency	_	NNP	NNP	_	4	nn	_	_
4	Fars	_	NNP	NNP	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	that	_	IN	IN	_	10	mark	_	_
7	group	_	NN	NN	_	8	nn	_	_
8	XP	_	NN	NN	_	10	nsubj	_	_
9	had	_	VBD	VBD	_	10	aux	_	_
10	blocked	_	VBN	VBN	_	5	ccomp	_	_
11	access	_	NN	NN	_	10	dobj	_	_
12	to	_	TO	TO	_	10	prep	_	_
13	approximately	_	RB	RB	_	14	quantmod	_	_
14	300	_	CD	CD	_	16	num	_	_
15	Shiite-related	_	JJ	JJ	_	16	amod	_	_
16	sites	_	NNS	NNS	_	12	pobj	_	_
17	on	_	IN	IN	_	16	prep	_	_
18	18	_	CD	CD	_	19	num	_	_
19	September	_	NNP	NNP	_	17	pobj	_	_
20	2008	_	CD	CD	_	19	num	_	_
21	and	_	CC	CC	_	19	cc	_	_
22	19	_	CD	CD	_	23	num	_	_
23	September	_	NNP	NNP	_	19	conj	_	_
24	2008	_	CD	CD	_	23	num	_	_
25	.	_	.	.	_	5	punct	_	_

Oracle:
(a / access-01, ARG1, s2 / site)
(a2 / approximately, op, 3 / 300)
(a3 / and, op, d / date-entity)
(a3 / and, op, d2 / date-entity)
(b / block-01, ARG0, g / group)
(b / block-01, ARG1, a / access-01)
(b / block-01, time, a3 / and)
(c / country, name, n4 / name)
(d / date-entity, day, 18)
(d / date-entity, month, 9)
(d / date-entity, year, 2008)
(d2 / date-entity, day, 19)
(d2 / date-entity, month, 9)
(d2 / date-entity, year, 2008)
(g / group, name, n2 / name)
(n / name, op, "Fars")
(n / name, op, A / "Agency")
(n / name, op, N / "News")
(n2 / name, op, "XP")
(n3 / name, op, "Shiite")
(n4 / name, op, "Iran")
(p / publication, mod, c / country)
(p / publication, name, n / name)
(r / relate-01, ARG1, s2 / site)
(r / relate-01, ARG2, r2 / religious-group)
(r2 / religious-group, name, n3 / name)
(s / state-01, ARG0, p / publication)
(s / state-01, ARG1, b / block-01)
(s2 / site, quant, a2 / approximately)

Input(Some(Graph(null,ArrayBuffer(Span(23,26,List(3, 2, 1, 0),19 September 2008,(date-entity :day 19 :month 9 :year 2008),false), Span(19,22,List(7, 6, 5, 4),18 September 2008,(date-entity :day 18 :month 9 :year 2008),false), Span(17,18,List(8),sites,site,false), Span(16,17,List(9),related,relate-01,false), Span(13,14,List(10),300,300,false), Span(10,11,List(11),access,access-01,false), Span(9,10,List(12),blocked,block-01,false), Span(0,4,List(18, 17, 16, 15, 14, 13),Iranian News Agency Fars,(organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars")),false)),Map(2 -> 9, 5 -> 18, 12 -> block-01, 15 -> "Iranian", 8 -> site, 18 -> "Fars", 7 -> 2008, 17 -> "Agency", 1 -> 19, 4 -> date-entity, 11 -> access-01, 14 -> name, 6 -> 9, 0 -> date-entity, 9 -> relate-01, 16 -> "News", 3 -> 2008, 10 -> 300, 13 -> organization),Map(n -> name, 2 -> 2008, 12 -> 18, b -> block-01, 92 -> 9, s -> site, d -> date-entity, 1 -> 19, a -> access-01, d2 -> date-entity, r -> relate-01, 9 -> 9, 22 -> 2008, o -> organization, 3 -> 300))),[Ljava.lang.String;@1286528d,Annotation([Ljava.lang.String;@3cc20577,[Ljava.lang.String;@33a630fa,[Ljava.lang.String;@775594f2),Annotation([Ljava.lang.String;@5767b2af,[Ljava.lang.String;@7b22ec89,[Ledu.cmu.lti.nlp.amr.Dependency;@790132f7),Annotation([Ljava.lang.String;@2228db21,[Ljava.lang.String;@48b0e701,[Ljava.lang.String;@241a0c3a),Annotation([Ljava.lang.String;@547c04c4,[Ljava.lang.String;@30e92cb9,[Ledu.cmu.lti.nlp.amr.Entity;@7fae4d4a))
AMR:
(a / access-01, ARG0, d / date-entity)
(a / access-01, ARG1, s / site)
(b / block-01, ARG0, o / organization)
(b / block-01, ARG1, a / access-01)
(b / block-01, ARG2, 3 / 300)
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)
(d2 / date-entity, day, 12 / 18)
(d2 / date-entity, month, 92 / 9)
(d2 / date-entity, part, s / site)
(d2 / date-entity, year, 22 / 2008)
(n / name, op, "Agency")
(n / name, op, "Fars")
(n / name, op, "Iranian")
(n / name, op, "News")
(o / organization, name, n / name)
(r / relate-01, ARG1, s / site)

Decoded in 354,418 microseconds
Sentence: Neither the hacking claim nor an Iranian assertion that group XP was based in the United Arab Emirates could be verified independently.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "XP"))
NER Entity: (country :name (name :op "United" :op "Arab" :op "Emirates"))
Spans:
Span 7-8:  assertion => assert-03
Span 3-4:  claim => claim-01
Span 18-19:  could => possible
Span 2-3:  hacking => hack-04
Span 15-18:  United Arab Emirates => (country :name (name :op "United" :op "Arab" :op "Emirates"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 7-8:  assertion => assert-03
Oracle Span 12-13:  based => base-01
Oracle Span 3-4:  claim => claim-01
Oracle Span 18-19:  could => possible
Oracle Span 9-10:  group => group
Oracle Span 2-3:  hacking => hack-04
Oracle Span 21-22:  independently => independent
Oracle Span 6-7:  Iranian => (country :name (name :op "Iran"))
Oracle Span 15-18:  United Arab Emirates => (country :name (name :op "Emirates" :op "Arab" :op "United"))
Oracle Span 20-21:  verified => verify-01
Oracle Span 10-11:  XP => (name :op "XP")

Incorrect span: United Arab Emirates => (country :name (name :op "United" :op "Arab" :op "Emirates"))
Missing span: XP => (name :op "XP")
Missing span: United Arab Emirates => (country :name (name :op "Emirates" :op "Arab" :op "United"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: verified => verify-01
Missing span: based => base-01
Missing span: group => group
Missing span: independently => independent
Dependencies:
1	Neither	_	CC	CC	_	4	preconj	_	_
2	the	_	DT	DT	_	4	det	_	_
3	hacking	_	NN	NN	_	4	nn	_	_
4	claim	_	NN	NN	_	21	nsubjpass	_	_
5	nor	_	CC	CC	_	4	cc	_	_
6	an	_	DT	DT	_	8	det	_	_
7	Iranian	_	JJ	JJ	_	8	amod	_	_
8	assertion	_	NN	NN	_	4	conj	_	_
9	that	_	IN	IN	_	13	mark	_	_
10	group	_	NN	NN	_	11	nn	_	_
11	XP	_	NN	NN	_	13	nsubjpass	_	_
12	was	_	VBD	VBD	_	13	auxpass	_	_
13	based	_	VBN	VBN	_	21	dep	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	18	det	_	_
16	United	_	NNP	NNP	_	18	nn	_	_
17	Arab	_	NNP	NNP	_	18	nn	_	_
18	Emirates	_	NNPS	NNPS	_	14	pobj	_	_
19	could	_	MD	MD	_	21	aux	_	_
20	be	_	VB	VB	_	21	auxpass	_	_
21	verified	_	VBN	VBN	_	0	root	_	_
22	independently	_	RB	RB	_	21	advmod	_	_
23	.	_	.	.	_	21	punct	_	_

Oracle:
(a2 / assert-03, ARG0, c2 / country)
(a2 / assert-03, ARG1, b / base-01)
(b / base-01, ARG1, g / group)
(b / base-01, location, c3 / country)
(c / claim-01, ARG1, h / hack-04)
(c2 / country, name, n / name)
(c3 / country, name, n3 / name)
(g / group, name, n2 / name)
(n / name, op, "Iran")
(n2 / name, op, "XP")
(n3 / name, op, "Arab")
(n3 / name, op, "Emirates")
(n3 / name, op, "United")
(p / possible, domain, v / verify-01)
(v / verify-01, manner, i / independent)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),could,possible,false), Span(15,18,List(5, 4, 3, 2, 1),United Arab Emirates,(country :name (name :op "United" :op "Arab" :op "Emirates")),false), Span(7,8,List(6),assertion,assert-03,false), Span(3,4,List(7),claim,claim-01,false), Span(2,3,List(8),hacking,hack-04,false)),Map(2 -> name, 5 -> "Emirates", 8 -> hack-04, 7 -> claim-01, 1 -> country, 4 -> "Arab", 6 -> assert-03, 0 -> possible, 3 -> "United"),Map(n -> name, h -> hack-04, p -> possible, a -> assert-03, c -> country, c2 -> claim-01))),[Ljava.lang.String;@ba1f559,Annotation([Ljava.lang.String;@3f4f9acd,[Ljava.lang.String;@46baf579,[Ljava.lang.String;@4bf324f9),Annotation([Ljava.lang.String;@4f7c0be3,[Ljava.lang.String;@ca66933,[Ledu.cmu.lti.nlp.amr.Dependency;@1d2644e3),Annotation([Ljava.lang.String;@4fa06f52,[Ljava.lang.String;@602c4656,[Ljava.lang.String;@5ffc5491),Annotation([Ljava.lang.String;@705202d1,[Ljava.lang.String;@3c443976,[Ledu.cmu.lti.nlp.amr.Entity;@3e58d65e))
AMR:
(a / assert-03, ARG1, p / possible)
(c / country, name, n / name)
(c2 / claim-01, ARG0, c / country)
(c2 / claim-01, ARG1, h / hack-04)
(h / hack-04, ARG1, p / possible)
(n / name, op, "Arab")
(n / name, op, "Emirates")
(n / name, op, "United")

Decoded in 119,519 microseconds
Sentence: Several Iranian news sites stated on 19 September 2008 that many of the Shiite and Iran-related web sites that had been attacked were running normally again.

NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(19	September	2008,19,September,2008)
NER Entity: (thing :name (name :op "Shiite"))
NER Entity: (thing :name (name :op "Iran" :op "-" :op "related"))
Spans:
Span 6-9:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Span 27-28:  again => again
Span 23-24:  attacked => attack-01
Span 10-11:  many => many
Span 2-3:  news => news
Span 17-18:  related => relate-01
Span 0-1:  Several => several
Span 19-20:  sites => site
Span 3-4:  sites => site
Span 18-19:  web => web

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 6-9:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Oracle Span 27-28:  again => again
Oracle Span 14-15:  and => and
Oracle Span 23-24:  attacked => attack-01
Oracle Span 15-16:  Iran => (country :name (name :op "Iran"))
Oracle Span 10-11:  many => many
Oracle Span 2-3:  news => news
Oracle Span 26-27:  normally => normal
Oracle Span 17-18:  related => relate-01
Oracle Span 25-26:  running => run-01
Oracle Span 0-1:  Several => several
Oracle Span 13-14:  Shiite => (religious-group :name (name :op "Shiite"))
Oracle Span 3-4:  sites => site
Oracle Span 19-20:  sites => site
Oracle Span 4-5:  stated => state-01
Oracle Span 18-19:  web => web

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Shiite => (religious-group :name (name :op "Shiite"))
Missing span: stated => state-01
Missing span: running => run-01
Missing span: and => and
Missing span: normally => normal
Dependencies:
1	Several	_	JJ	JJ	_	4	amod	_	_
2	Iranian	_	JJ	JJ	_	4	amod	_	_
3	news	_	NN	NN	_	4	nn	_	_
4	sites	_	NNS	NNS	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	on	_	IN	IN	_	5	prep	_	_
7	19	_	CD	CD	_	6	pobj	_	_
8	September	_	NNP	NNP	_	5	tmod	_	_
9	2008	_	CD	CD	_	8	num	_	_
10	that	_	IN	IN	_	24	mark	_	_
11	many	_	JJ	JJ	_	24	nsubj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	Shiite	_	JJ	JJ	_	12	pobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	Iran-related	_	JJ	JJ	_	18	amod	_	_
17	web	_	NN	NN	_	18	nn	_	_
18	sites	_	NNS	NNS	_	14	conj	_	_
19	that	_	WDT	WDT	_	22	nsubjpass	_	_
20	had	_	VBD	VBD	_	22	aux	_	_
21	been	_	VBN	VBN	_	22	auxpass	_	_
22	attacked	_	VBN	VBN	_	11	rcmod	_	_
23	were	_	VBD	VBD	_	24	aux	_	_
24	running	_	VBG	VBG	_	5	ccomp	_	_
25	normally	_	RB	RB	_	24	advmod	_	_
26	again	_	RB	RB	_	24	advmod	_	_
27	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, r3 / religious-group)
(a2 / attack-01, ARG1, s4 / site)
(c / country, name, n2 / name)
(d / date-entity, day, 19)
(d / date-entity, month, 9)
(d / date-entity, year, 2008)
(n2 / name, op, "Iran")
(n3 / name, op, "Shiite")
(r / run-01, ARG1, s4 / site)
(r / run-01, manner, n5 / normal)
(r / run-01, mod, a3 / again)
(r2 / relate-01, ARG1, s4 / site)
(r2 / relate-01, ARG2, a / and)
(r3 / religious-group, name, n3 / name)
(s / state-01, ARG0, s2 / site)
(s / state-01, ARG1, r / run-01)
(s / state-01, time, d / date-entity)
(s2 / site, mod, c / country)
(s2 / site, mod, n / news)
(s2 / site, quant, s3 / several)
(s4 / site, mod, w / web)
(s4 / site, quant, m / many)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),again,again,false), Span(23,24,List(1),attacked,attack-01,false), Span(19,20,List(2),sites,site,false), Span(18,19,List(3),web,web,false), Span(17,18,List(4),related,relate-01,false), Span(10,11,List(5),many,many,false), Span(6,9,List(9, 8, 7, 6),19 September 2008,(date-entity :day 19 :month 9 :year 2008),false), Span(3,4,List(10),sites,site,false), Span(2,3,List(11),news,news,false), Span(0,1,List(12),Several,several,false)),Map(2 -> site, 5 -> many, 12 -> several, 8 -> 9, 7 -> 19, 1 -> attack-01, 4 -> relate-01, 11 -> news, 6 -> date-entity, 0 -> again, 9 -> 2008, 3 -> web, 10 -> site),Map(w -> web, n -> news, 2 -> 2008, s2 -> site, s -> site, m -> many, d -> date-entity, 1 -> 19, a -> again, a2 -> attack-01, r -> relate-01, s3 -> several, 9 -> 9))),[Ljava.lang.String;@3bd55d8,Annotation([Ljava.lang.String;@63998bf4,[Ljava.lang.String;@7e0b9178,[Ljava.lang.String;@61942c1),Annotation([Ljava.lang.String;@6f63c44f,[Ljava.lang.String;@408a247c,[Ledu.cmu.lti.nlp.amr.Dependency;@62a8fd44),Annotation([Ljava.lang.String;@2e6ba49a,[Ljava.lang.String;@5f5b5ca4,[Ljava.lang.String;@4ee33af7),Annotation([Ljava.lang.String;@6b04acb2,[Ljava.lang.String;@18388a3c,[Ledu.cmu.lti.nlp.amr.Entity;@1d035be3))
AMR:
(a2 / attack-01, ARG0, s2 / site)
(a2 / attack-01, ARG1, s / site)
(a2 / attack-01, ARG2, a / again)
(a2 / attack-01, time, d / date-entity)
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)
(r / relate-01, ARG0, m / many)
(r / relate-01, ARG1, s / site)
(s / site, poss, w / web)
(s2 / site, mod, n / news)
(s2 / site, quant, s3 / several)

Decoded in 289,241 microseconds
Sentence: A statement signed group XP was posted on the home page of Al-Sistani's web site and stated that the attack was on behalf of Sunni Muslims.

NER Entity: (organization :name (name :op "XP"))
NER Entity: (person :name (name :op "Al-Sistani"))
NER Entity: (thing :name (name :op "Sunni"))
Spans:
Span 20-21:  attack => attack-01
Span 9-10:  home => home
Span 10-11:  page => page
Span 6-7:  posted => post-01
Span 15-16:  site => site
Span 14-15:  web => web

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  Al-Sistani => (person :name (name :op "Al-Sistani"))
Oracle Span 16-17:  and => and
Oracle Span 20-21:  attack => attack-01
Oracle Span 3-4:  group => group
Oracle Span 9-10:  home => home
Oracle Span 26-27:  Muslims => (religious-group :name (name :op "Muslim"))
Oracle Span 10-11:  page => page
Oracle Span 6-7:  posted => post-01
Oracle Span 2-3:  signed => sign-01
Oracle Span 15-16:  site => site
Oracle Span 17-18:  stated => state-01
Oracle Span 1-2:  statement => state-01
Oracle Span 25-26:  Sunni => (religious-group :name (name :op "Sunni"))
Oracle Span 14-15:  web => web
Oracle Span 4-5:  XP => (name :op "XP")

Missing span: XP => (name :op "XP")
Missing span: Al-Sistani => (person :name (name :op "Al-Sistani"))
Missing span: Sunni => (religious-group :name (name :op "Sunni"))
Missing span: Muslims => (religious-group :name (name :op "Muslim"))
Missing span: and => and
Missing span: statement => state-01
Missing span: stated => state-01
Missing span: signed => sign-01
Missing span: group => group
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	statement	_	NN	NN	_	3	nsubj	_	_
3	signed	_	VBD	VBD	_	0	root	_	_
4	group	_	NN	NN	_	5	nn	_	_
5	XP	_	NN	NN	_	7	nsubjpass	_	_
6	was	_	VBD	VBD	_	7	auxpass	_	_
7	posted	_	VBN	VBN	_	3	ccomp	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	home	_	NN	NN	_	11	nn	_	_
11	page	_	NN	NN	_	8	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	Al-Sistani	_	NNP	NNP	_	16	poss	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	web	_	NN	NN	_	16	nn	_	_
16	site	_	NN	NN	_	12	pobj	_	_
17	and	_	CC	CC	_	7	cc	_	_
18	stated	_	VBN	VBN	_	7	conj	_	_
19	that	_	IN	IN	_	22	mark	_	_
20	the	_	DT	DT	_	21	det	_	_
21	attack	_	NN	NN	_	22	nsubj	_	_
22	was	_	VBD	VBD	_	18	ccomp	_	_
23	on	_	IN	IN	_	22	prep	_	_
24	behalf	_	NN	NN	_	23	pobj	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	Sunni	_	NNP	NNP	_	27	nn	_	_
27	Muslims	_	NNPS	NNPS	_	25	pobj	_	_
28	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, p / post-01)
(a / and, op, s4 / state-01)
(g / group, name, n / name)
(n / name, op, "XP")
(n2 / name, op, "Al-Sistani")
(n3 / name, op, "Muslim")
(n4 / name, op, "Sunni")
(p / post-01, ARG1, s / state-01)
(p / post-01, medium, p2 / page)
(p2 / page, mod, h / home)
(p2 / page, poss, s3 / site)
(p3 / person, name, n2 / name)
(r / religious-group, mod, r2 / religious-group)
(r / religious-group, name, n3 / name)
(r / religious-group, prep-on-behalf, a2 / attack-01)
(r2 / religious-group, name, n4 / name)
(s2 / sign-01, ARG0, g / group)
(s2 / sign-01, ARG1, s / state-01)
(s3 / site, mod, w / web)
(s3 / site, poss, p3 / person)
(s4 / state-01, ARG0, s / state-01)
(s4 / state-01, ARG1, a2 / attack-01)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),attack,attack-01,false), Span(15,16,List(1),site,site,false), Span(14,15,List(2),web,web,false), Span(10,11,List(3),page,page,false), Span(9,10,List(4),home,home,false), Span(6,7,List(5),posted,post-01,false)),Map(2 -> web, 5 -> post-01, 1 -> site, 4 -> home, 0 -> attack-01, 3 -> page),Map(w -> web, h -> home, p2 -> post-01, s -> site, p -> page, a -> attack-01))),[Ljava.lang.String;@4a60ee36,Annotation([Ljava.lang.String;@4cfbaf4,[Ljava.lang.String;@58faa93b,[Ljava.lang.String;@5f212d84),Annotation([Ljava.lang.String;@127d7908,[Ljava.lang.String;@6b9c69a9,[Ledu.cmu.lti.nlp.amr.Dependency;@6622a690),Annotation([Ljava.lang.String;@30b9eadd,[Ljava.lang.String;@497570fb,[Ljava.lang.String;@412c995d),Annotation([Ljava.lang.String;@3249a1ce,[Ljava.lang.String;@4dd94a58,[Ledu.cmu.lti.nlp.amr.Entity;@2f4919b0))
AMR:
(p / page, mod, h / home)
(p2 / post-01, ARG1, a / attack-01)
(p2 / post-01, ARG2, p / page)
(s / site, mod, w / web)
(s / site, quant, p / page)

Decoded in 82,226 microseconds
Sentence: The statement said --

Spans:
Span 2-3:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  said => say-01
Oracle Span 1-2:  statement => (thing :ARG1-of state-01)

Missing span: statement => (thing :ARG1-of state-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	statement	_	NN	NN	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	--	_	:	:	_	3	punct	_	_

Oracle:
(s / say-01, ARG0, t / thing)
(s2 / state-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),said,say-01,false)),Map(0 -> say-01),Map(s -> say-01))),[Ljava.lang.String;@a8a8b75,Annotation([Ljava.lang.String;@75b21c3b,[Ljava.lang.String;@72be135f,[Ljava.lang.String;@155d1021),Annotation([Ljava.lang.String;@4bd2f0dc,[Ljava.lang.String;@2e647e59,[Ledu.cmu.lti.nlp.amr.Dependency;@2c42b421),Annotation([Ljava.lang.String;@51e37590,[Ljava.lang.String;@deb3b60,[Ljava.lang.String;@701a32),Annotation([Ljava.lang.String;@39aa45a1,[Ljava.lang.String;@73aff8f1,[Ledu.cmu.lti.nlp.amr.Entity;@27cbfddf))
AMR:


Decoded in 4,496 microseconds
Sentence: Group XP had carried out similar attacks on other Shiite sites in the Persian Gulf and Iraq.

NER Entity: (organization :name (name :op "XP"))
NER Entity: (thing :name (name :op "Shiite"))
NER Entity: (country :name (name :op "Persian" :op "Gulf"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 6-7:  attacks => attack-01
Span 8-9:  other => other
Span 13-15:  Persian Gulf => (country :name (name :op "Persian" :op "Gulf"))
Span 10-11:  sites => site

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 6-7:  attacks => attack-01
Oracle Span 3-4:  carried => carry-03
Oracle Span 0-1:  Group => group
Oracle Span 16-17:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 8-9:  other => other
Oracle Span 13-15:  Persian Gulf => (gulf :name (name :op "Gulf" :op "Persian"))
Oracle Span 9-10:  Shiite => (religious-group :name (name :op "Shiite"))
Oracle Span 10-11:  sites => site
Oracle Span 1-2:  XP => (name :op "XP")

Incorrect span: Persian Gulf => (country :name (name :op "Persian" :op "Gulf"))
Missing span: XP => (name :op "XP")
Missing span: Shiite => (religious-group :name (name :op "Shiite"))
Missing span: Persian Gulf => (gulf :name (name :op "Gulf" :op "Persian"))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: carried => carry-03
Missing span: and => and
Missing span: Group => group
Dependencies:
1	Group	_	NNP	NNP	_	2	nn	_	_
2	XP	_	NNP	NNP	_	4	nsubj	_	_
3	had	_	VBD	VBD	_	4	aux	_	_
4	carried	_	VBN	VBN	_	0	root	_	_
5	out	_	RP	RP	_	4	prt	_	_
6	similar	_	JJ	JJ	_	7	amod	_	_
7	attacks	_	NNS	NNS	_	4	dobj	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	other	_	JJ	JJ	_	11	amod	_	_
10	Shiite	_	JJ	JJ	_	11	amod	_	_
11	sites	_	NNS	NNS	_	8	pobj	_	_
12	in	_	IN	IN	_	4	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	Persian	_	NNP	NNP	_	15	nn	_	_
15	Gulf	_	NNP	NNP	_	12	pobj	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	Iraq	_	NNP	NNP	_	15	conj	_	_
18	.	_	.	.	_	4	punct	_	_

Oracle:
(a / attack-01, ARG0, g / group)
(a / attack-01, ARG1, s / site)
(a2 / and, op, c2 / country)
(a2 / and, op, g2 / gulf)
(c / carry-03, ARG0, g / group)
(c / carry-03, ARG1, a / attack-01)
(c2 / country, name, n4 / name)
(g / group, name, n / name)
(g2 / gulf, name, n3 / name)
(n / name, op, "XP")
(n2 / name, op, "Shiite")
(n3 / name, op, "Gulf")
(n3 / name, op, "Persian")
(n4 / name, op, "Iraq")
(r / religious-group, name, n2 / name)
(s / site, location, a2 / and)
(s / site, mod, o / other)
(s / site, mod, r / religious-group)

Input(Some(Graph(null,ArrayBuffer(Span(13,15,List(3, 2, 1, 0),Persian Gulf,(country :name (name :op "Persian" :op "Gulf")),false), Span(10,11,List(4),sites,site,false), Span(8,9,List(5),other,other,false), Span(6,7,List(6),attacks,attack-01,false)),Map(2 -> "Persian", 5 -> other, 1 -> name, 4 -> site, 6 -> attack-01, 0 -> country, 3 -> "Gulf"),Map(n -> name, s -> site, a -> attack-01, c -> country, o -> other))),[Ljava.lang.String;@27ead29e,Annotation([Ljava.lang.String;@4c060c8f,[Ljava.lang.String;@40620d8e,[Ljava.lang.String;@383f3558),Annotation([Ljava.lang.String;@49b07ee3,[Ljava.lang.String;@352e612e,[Ledu.cmu.lti.nlp.amr.Dependency;@65f00478),Annotation([Ljava.lang.String;@2424686b,[Ljava.lang.String;@6ea94d6a,[Ljava.lang.String;@28486680),Annotation([Ljava.lang.String;@4d7e7435,[Ljava.lang.String;@4a1e3ac1,[Ledu.cmu.lti.nlp.amr.Entity;@6e78fcf5))
AMR:
(a / attack-01, ARG1, s / site)
(a / attack-01, location, c / country)
(c / country, name, n / name)
(n / name, op, "Gulf")
(n / name, op, "Persian")
(s / site, mod, o / other)

Decoded in 46,037 microseconds
Sentence: Group XP erased the site as group XP has done with other Rafidha sites.

NER Entity: (organization :name (name :op "XP"))
NER Entity: (organization :name (name :op "XP"))
Spans:
Span 9-10:  done => do-02
Span 11-12:  other => other
Span 4-5:  site => site
Span 13-14:  sites => site

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 9-10:  done => do-02
Oracle Span 2-3:  erased => erase-01
Oracle Span 0-1:  Group => group
Oracle Span 11-12:  other => other
Oracle Span 12-13:  Rafidha => (religious-group :name (name :op "Rafidha"))
Oracle Span 4-5:  site => site
Oracle Span 13-14:  sites => site
Oracle Span 1-2:  XP => (name :op "XP")

Missing span: XP => (name :op "XP")
Missing span: Rafidha => (religious-group :name (name :op "Rafidha"))
Missing span: erased => erase-01
Missing span: Group => group
Dependencies:
1	Group	_	NNP	NNP	_	2	nn	_	_
2	XP	_	NNP	NNP	_	3	nsubj	_	_
3	erased	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	5	det	_	_
5	site	_	NN	NN	_	3	dobj	_	_
6	as	_	IN	IN	_	10	mark	_	_
7	group	_	NN	NN	_	8	nn	_	_
8	XP	_	NN	NN	_	10	nsubj	_	_
9	has	_	VBZ	VBZ	_	10	aux	_	_
10	done	_	VBN	VBN	_	3	advcl	_	_
11	with	_	IN	IN	_	10	prep	_	_
12	other	_	JJ	JJ	_	14	amod	_	_
13	Rafidha	_	NNP	NNP	_	14	nn	_	_
14	sites	_	NNS	NNS	_	11	pobj	_	_
15	.	_	.	.	_	3	punct	_	_

Oracle:
(d / do-02, ARG0, g / group)
(d / do-02, ARG2, s2 / site)
(e / erase-01, ARG0, g / group)
(e / erase-01, ARG1, s / site)
(e / erase-01, manner, d / do-02)
(g / group, name, n / name)
(n / name, op, "XP")
(n2 / name, op, "Rafidha")
(r / religious-group, name, n2 / name)
(s2 / site, mod, o / other)
(s2 / site, mod, r / religious-group)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),sites,site,false), Span(11,12,List(1),other,other,false), Span(9,10,List(2),done,do-02,false), Span(4,5,List(3),site,site,false)),Map(2 -> do-02, 1 -> other, 0 -> site, 3 -> site),Map(s2 -> site, s -> site, d -> do-02, o -> other))),[Ljava.lang.String;@56febdc,Annotation([Ljava.lang.String;@3b8ee898,[Ljava.lang.String;@7d151a,[Ljava.lang.String;@294bdeb4),Annotation([Ljava.lang.String;@5300f14a,[Ljava.lang.String;@1f86099a,[Ledu.cmu.lti.nlp.amr.Dependency;@77bb0ab5),Annotation([Ljava.lang.String;@f2c488,[Ljava.lang.String;@54acff7d,[Ljava.lang.String;@7bc9e6ab),Annotation([Ljava.lang.String;@5488b5c5,[Ljava.lang.String;@4248ed58,[Ledu.cmu.lti.nlp.amr.Entity;@712ca57b))
AMR:
(d / do-02, ARG0, s2 / site)
(d / do-02, ARG1, s / site)
(s / site, mod, o / other)

Decoded in 61,529 microseconds
Sentence: Rafidha means rejecters and is an insult used by Sunni extremists to describe Shiites.

NER Entity: (thing :name (name :op "Sunni"))
NER Entity: (thing :name (name :op "Shiites"))
Spans:
Span 10-11:  extremists => extremist
Span 7-8:  used => use-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  and => and
Oracle Span 12-13:  describe => describe-01
Oracle Span 10-11:  extremists => extremist
Oracle Span 6-7:  insult => insult-01
Oracle Span 1-2:  means => mean-01
Oracle Span 0-1:  Rafidha => (religious-group :name (name :op "Rafidha"))
Oracle Span 2-3:  rejecters => (person :ARG0-of reject-01)
Oracle Span 13-14:  Shiites => (religious-group :name (name :op "Shiite"))
Oracle Span 9-10:  Sunni => (religious-group :name (name :op "Sunni"))
Oracle Span 7-8:  used => use-01

Missing span: Rafidha => (religious-group :name (name :op "Rafidha"))
Missing span: Sunni => (religious-group :name (name :op "Sunni"))
Missing span: Shiites => (religious-group :name (name :op "Shiite"))
Missing span: and => and
Missing span: insult => insult-01
Missing span: describe => describe-01
Missing span: means => mean-01
Missing span: rejecters => (person :ARG0-of reject-01)
Dependencies:
1	Rafidha	_	NNP	NNP	_	2	nsubj	_	_
2	means	_	VBZ	VBZ	_	0	root	_	_
3	rejecters	_	NNS	NNS	_	2	dobj	_	_
4	and	_	CC	CC	_	2	cc	_	_
5	is	_	VBZ	VBZ	_	7	cop	_	_
6	an	_	DT	DT	_	7	det	_	_
7	insult	_	NN	NN	_	2	conj	_	_
8	used	_	VBN	VBN	_	7	vmod	_	_
9	by	_	IN	IN	_	8	prep	_	_
10	Sunni	_	NNP	NNP	_	11	nn	_	_
11	extremists	_	NNS	NNS	_	9	pobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	describe	_	VB	VB	_	8	xcomp	_	_
14	Shiites	_	NNS	NNS	_	13	dobj	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, i / insult-01)
(a / and, op, m / mean-01)
(d / describe-01, ARG0, e / extremist)
(d / describe-01, ARG1, r4 / religious-group)
(e / extremist, mod, r3 / religious-group)
(m / mean-01, ARG0, r / religious-group)
(m / mean-01, ARG1, p / person)
(n / name, op, "Rafidha")
(n2 / name, op, "Sunni")
(n3 / name, op, "Shiite")
(r / religious-group, name, n / name)
(r2 / reject-01, ARG0, p / person)
(r3 / religious-group, name, n2 / name)
(r4 / religious-group, name, n3 / name)
(u / use-01, ARG0, e / extremist)
(u / use-01, ARG1, i / insult-01)
(u / use-01, ARG2, d / describe-01)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),extremists,extremist,false), Span(7,8,List(1),used,use-01,false)),Map(1 -> use-01, 0 -> extremist),Map(e -> extremist, u -> use-01))),[Ljava.lang.String;@4564e94b,Annotation([Ljava.lang.String;@54534abf,[Ljava.lang.String;@51745f40,[Ljava.lang.String;@45673f68),Annotation([Ljava.lang.String;@27abb83e,[Ljava.lang.String;@69e308c6,[Ledu.cmu.lti.nlp.amr.Dependency;@1a1ed4e5),Annotation([Ljava.lang.String;@667e34b1,[Ljava.lang.String;@1c6e0a08,[Ljava.lang.String;@6dba847b),Annotation([Ljava.lang.String;@1efdcd5,[Ljava.lang.String;@1623bbe5,[Ledu.cmu.lti.nlp.amr.Entity;@7af1cd63))
AMR:
(u / use-01, ARG0, e / extremist)

Decoded in 29,924 microseconds
Sentence: Al-Sistani promoted sexual deviance and an Iranian agenda in Iraq as Al-Sistani was born in Iran.

NER Entity: (person :name (name :op "Al-Sistani"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (person :name (name :op "Al-Sistani"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 7-8:  agenda => agenda
Span 13-14:  born => bear-02
Span 1-2:  promoted => promote-02
Span 2-3:  sexual => sexual

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  agenda => agenda
Oracle Span 0-1:  Al-Sistani => (person :name (name :op "Al-Sistani"))
Oracle Span 4-5:  and => and
Oracle Span 13-14:  born => bear-02
Oracle Span 3-4:  deviance => deviance
Oracle Span 15-16:  Iran => (country :name (name :op "Iran"))
Oracle Span 9-10:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 1-2:  promoted => promote-02

Extra span: sexual => sexual
Missing span: Al-Sistani => (person :name (name :op "Al-Sistani"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: and => and
Missing span: deviance => deviance
Dependencies:
1	Al-Sistani	_	NNP	NNP	_	2	nsubj	_	_
2	promoted	_	VBD	VBD	_	0	root	_	_
3	sexual	_	JJ	JJ	_	4	amod	_	_
4	deviance	_	NN	NN	_	2	dobj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	an	_	DT	DT	_	8	det	_	_
7	Iranian	_	JJ	JJ	_	8	amod	_	_
8	agenda	_	NN	NN	_	4	conj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	Iraq	_	NNP	NNP	_	9	pobj	_	_
11	as	_	IN	IN	_	14	mark	_	_
12	Al-Sistani	_	NNP	NNP	_	14	nsubjpass	_	_
13	was	_	VBD	VBD	_	14	auxpass	_	_
14	born	_	VBN	VBN	_	2	advcl	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	Iran	_	NNP	NNP	_	15	pobj	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a2 / agenda)
(a / and, op, d / deviance)
(a2 / agenda, mod, c / country)
(b / bear-02, ARG1, p2 / person)
(b / bear-02, location, c / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(n / name, op, "Al-Sistani")
(n2 / name, op, "Iran")
(n3 / name, op, "Iraq")
(p / promote-02, ARG0, p2 / person)
(p / promote-02, ARG1, a / and)
(p / promote-02, location, c2 / country)
(p / promote-02, prep-as, b / bear-02)
(p2 / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),born,bear-02,false), Span(7,8,List(1),agenda,agenda,false), Span(2,3,List(2),sexual,sexual,false), Span(1,2,List(3),promoted,promote-02,false)),Map(2 -> sexual, 1 -> agenda, 0 -> bear-02, 3 -> promote-02),Map(b -> bear-02, s -> sexual, p -> promote-02, a -> agenda))),[Ljava.lang.String;@4351171a,Annotation([Ljava.lang.String;@3c2772d1,[Ljava.lang.String;@37d00a23,[Ljava.lang.String;@433e536f),Annotation([Ljava.lang.String;@89c65d5,[Ljava.lang.String;@faa3fed,[Ledu.cmu.lti.nlp.amr.Dependency;@381cad29),Annotation([Ljava.lang.String;@988246e,[Ljava.lang.String;@62515a47,[Ljava.lang.String;@3c5a54b7),Annotation([Ljava.lang.String;@61f2c3f0,[Ljava.lang.String;@291120f4,[Ledu.cmu.lti.nlp.amr.Entity;@417ad4f3))
AMR:
(b / bear-02, ARG1, a / agenda)
(p / promote-02, ARG1, s / sexual)
(p / promote-02, purpose, b / bear-02)

Decoded in 41,671 microseconds
Sentence: Any website with material that was contrary to Sunni teachings would be punished.

NER Entity: (thing :name (name :op "Sunni"))
Spans:
Span 0-1:  Any => any
Span 6-7:  contrary => contrary-41
Span 3-4:  material => material
Span 1-2:  website => website

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Any => any
Oracle Span 6-7:  contrary => contrary-41
Oracle Span 3-4:  material => material
Oracle Span 12-13:  punished => punish-01
Oracle Span 8-9:  Sunni => (religious-group :name (name :op "Sunni"))
Oracle Span 9-10:  teachings => teach-01
Oracle Span 1-2:  website => website

Missing span: Sunni => (religious-group :name (name :op "Sunni"))
Missing span: punished => punish-01
Missing span: teachings => teach-01
Dependencies:
1	Any	_	DT	DT	_	2	det	_	_
2	website	_	NN	NN	_	13	nsubjpass	_	_
3	with	_	IN	IN	_	2	prep	_	_
4	material	_	NN	NN	_	3	pobj	_	_
5	that	_	WDT	WDT	_	7	nsubj	_	_
6	was	_	VBD	VBD	_	7	cop	_	_
7	contrary	_	JJ	JJ	_	4	rcmod	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	Sunni	_	NNP	NNP	_	10	nn	_	_
10	teachings	_	NNS	NNS	_	8	pobj	_	_
11	would	_	MD	MD	_	13	aux	_	_
12	be	_	VB	VB	_	13	auxpass	_	_
13	punished	_	VBN	VBN	_	0	root	_	_
14	.	_	.	.	_	13	punct	_	_

Oracle:
(c / contrary-41, ARG1, m / material)
(c / contrary-41, ARG2, t / teach-01)
(n / name, op, "Sunni")
(p / punish-01, ARG1, w / website)
(r / religious-group, name, n / name)
(t / teach-01, mod, r / religious-group)
(w / website, mod, a / any)
(w / website, prep-with, m / material)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),contrary,contrary-41,false), Span(3,4,List(1),material,material,false), Span(1,2,List(2),website,website,false), Span(0,1,List(3),Any,any,false)),Map(2 -> website, 1 -> material, 0 -> contrary-41, 3 -> any),Map(w -> website, m -> material, a -> any, c -> contrary-41))),[Ljava.lang.String;@2f6bcf87,Annotation([Ljava.lang.String;@58f174d9,[Ljava.lang.String;@78c7f9b3,[Ljava.lang.String;@6f8d7714),Annotation([Ljava.lang.String;@1e6b9a95,[Ljava.lang.String;@4d6f623d,[Ledu.cmu.lti.nlp.amr.Dependency;@aa21042),Annotation([Ljava.lang.String;@e93f3d5,[Ljava.lang.String;@4cee7fa0,[Ljava.lang.String;@7a26928a),Annotation([Ljava.lang.String;@601cbd8c,[Ljava.lang.String;@7180e701,[Ledu.cmu.lti.nlp.amr.Entity;@4e2c95ee))
AMR:
(c / contrary-41, ARG1, m / material)
(w / website, mod, a / any)
(w / website, poss, m / material)

Decoded in 29,396 microseconds
Sentence: The statement also consisted of a youtube video clip of American comedian bill Maher ridiculing a fatwa by Al-Sistani on whether certain positions of sexual intercourse were permitted for married couples.

NER Entity: (thing :name (name :op "American"))
NER Entity: (person :name (name :op "bill" :op "Maher"))
NER Entity: (person :name (name :op "Al-Sistani"))
Spans:
Span 12-14:  bill Maher => (person :name (name :op "bill" :op "Maher"))
Span 21-22:  certain => certain
Span 3-4:  consisted => consist-01
Span 30-31:  couples => couple
Span 27-28:  permitted => permit-01
Span 22-23:  positions => position
Span 24-25:  sexual => sexual
Span 7-8:  video => video

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 18-19:  Al-Sistani => (person :name (name :op "Al-Sistani"))
Oracle Span 2-3:  also => also
Oracle Span 12-14:  bill Maher => (name :op "Maher" :op "Bill")
Oracle Span 21-22:  certain => certain
Oracle Span 8-9:  clip => clip
Oracle Span 11-12:  comedian => comedian
Oracle Span 3-4:  consisted => consist-01
Oracle Span 30-31:  couples => couple
Oracle Span 16-17:  fatwa => fatwa
Oracle Span 25-26:  intercourse => intercourse
Oracle Span 29-30:  married => marry-01
Oracle Span 27-28:  permitted => permit-01
Oracle Span 22-23:  positions => position
Oracle Span 14-15:  ridiculing => ridicule-01
Oracle Span 1-2:  statement => (thing :ARG1-of state-01)
Oracle Span 7-8:  video => video
Oracle Span 6-7:  youtube => (publication :name (name :op "YouTube"))

Extra span: sexual => sexual
Incorrect span: bill Maher => (person :name (name :op "bill" :op "Maher"))
Missing span: youtube => (publication :name (name :op "YouTube"))
Missing span: bill Maher => (name :op "Maher" :op "Bill")
Missing span: Al-Sistani => (person :name (name :op "Al-Sistani"))
Missing span: also => also
Missing span: clip => clip
Missing span: ridiculing => ridicule-01
Missing span: fatwa => fatwa
Missing span: married => marry-01
Missing span: intercourse => intercourse
Missing span: comedian => comedian
Missing span: statement => (thing :ARG1-of state-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	statement	_	NN	NN	_	4	nsubj	_	_
3	also	_	RB	RB	_	4	advmod	_	_
4	consisted	_	VBD	VBD	_	0	root	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	a	_	DT	DT	_	9	det	_	_
7	youtube	_	JJ	JJ	_	9	amod	_	_
8	video	_	NN	NN	_	9	nn	_	_
9	clip	_	NN	NN	_	5	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	American	_	NNP	NNP	_	14	nn	_	_
12	comedian	_	NN	NN	_	14	nn	_	_
13	bill	_	NN	NN	_	14	nn	_	_
14	Maher	_	NNP	NNP	_	10	pobj	_	_
15	ridiculing	_	VBG	VBG	_	4	xcomp	_	_
16	a	_	DT	DT	_	17	det	_	_
17	fatwa	_	NN	NN	_	15	dobj	_	_
18	by	_	IN	IN	_	15	prep	_	_
19	Al-Sistani	_	NNP	NNP	_	18	pobj	_	_
20	on	_	IN	IN	_	15	prep	_	_
21	whether	_	IN	IN	_	28	mark	_	_
22	certain	_	JJ	JJ	_	23	amod	_	_
23	positions	_	NNS	NNS	_	28	nsubjpass	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	sexual	_	JJ	JJ	_	26	amod	_	_
26	intercourse	_	NN	NN	_	24	pobj	_	_
27	were	_	VBD	VBD	_	28	auxpass	_	_
28	permitted	_	VBN	VBN	_	20	pcomp	_	_
29	for	_	IN	IN	_	28	prep	_	_
30	married	_	JJ	JJ	_	31	amod	_	_
31	couples	_	NNS	NNS	_	29	pobj	_	_
32	.	_	.	.	_	4	punct	_	_

Oracle:
(c / consist-01, ARG1, t / thing)
(c / consist-01, ARG2, c2 / clip)
(c / consist-01, mod, a / also)
(c2 / clip, mod, p / publication)
(c2 / clip, mod, v / video)
(c2 / clip, poss, c3 / comedian)
(c3 / comedian, name, n2 / name)
(f / fatwa, source, p2 / person)
(f / fatwa, topic, p3 / permit-01)
(m / marry-01, ARG1, c6 / couple)
(n / name, op, "YouTube")
(n2 / name, op, "Bill")
(n2 / name, op, "Maher")
(n4 / name, op, "Al-Sistani")
(p / publication, name, n / name)
(p2 / person, name, n4 / name)
(p3 / permit-01, ARG1, p4 / position)
(p3 / permit-01, ARG2, c6 / couple)
(p4 / position, mod, c5 / certain)
(p4 / position, mod, i / intercourse)
(r / ridicule-01, ARG0, c2 / clip)
(r / ridicule-01, ARG1, f / fatwa)
(s / state-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),couples,couple,false), Span(27,28,List(1),permitted,permit-01,false), Span(24,25,List(2),sexual,sexual,false), Span(22,23,List(3),positions,position,false), Span(21,22,List(4),certain,certain,false), Span(12,14,List(8, 7, 6, 5),bill Maher,(person :name (name :op "bill" :op "Maher")),false), Span(7,8,List(9),video,video,false), Span(3,4,List(10),consisted,consist-01,false)),Map(2 -> sexual, 5 -> person, 8 -> "Maher", 7 -> "bill", 1 -> permit-01, 4 -> certain, 6 -> name, 9 -> video, 0 -> couple, 10 -> consist-01, 3 -> position),Map(n -> name, p2 -> position, s -> sexual, v -> video, p -> permit-01, c3 -> consist-01, c -> couple, p3 -> person, c2 -> certain))),[Ljava.lang.String;@d0ec63,Annotation([Ljava.lang.String;@5a5c128,[Ljava.lang.String;@73eb8672,[Ljava.lang.String;@5942ee04),Annotation([Ljava.lang.String;@5e76a2bb,[Ljava.lang.String;@757194dc,[Ledu.cmu.lti.nlp.amr.Dependency;@5a865416),Annotation([Ljava.lang.String;@14faa38c,[Ljava.lang.String;@7ff2b8d2,[Ljava.lang.String;@6dc1484),Annotation([Ljava.lang.String;@6e92c6ad,[Ljava.lang.String;@2fb5fe30,[Ledu.cmu.lti.nlp.amr.Entity;@456be73c))
AMR:
(c / couple, mod, c2 / certain)
(c3 / consist-01, ARG1, p3 / person)
(c3 / consist-01, instrument, p / permit-01)
(n / name, op, "Maher")
(n / name, op, "bill")
(p / permit-01, ARG0, v / video)
(p / permit-01, ARG2, c / couple)
(p2 / position, mod, c2 / certain)
(p3 / person, name, n / name)
(s / sexual, op, c3 / consist-01)

Decoded in 278,702 microseconds
Sentence: The ayatollah's office in Najaf declined to comment on the cyber attack.

NER Entity: (country :name (name :op "Najaf"))
Spans:
Span 12-13:  attack => attack-01
Span 8-9:  comment => comment-01
Span 11-12:  cyber => cyber

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  attack => attack-01
Oracle Span 1-2:  ayatollah => ayatollah
Oracle Span 8-9:  comment => comment-01
Oracle Span 11-12:  cyber => cyber
Oracle Span 6-7:  declined => decline-02
Oracle Span 5-6:  Najaf => (city :name (name :op "Najaf"))
Oracle Span 3-4:  office => office

Missing span: Najaf => (city :name (name :op "Najaf"))
Missing span: declined => decline-02
Missing span: office => office
Missing span: ayatollah => ayatollah
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	ayatollah	_	NN	NN	_	4	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	office	_	NN	NN	_	7	nsubj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	Najaf	_	NNP	NNP	_	5	pobj	_	_
7	declined	_	VBD	VBD	_	0	root	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	comment	_	VB	VB	_	7	xcomp	_	_
10	on	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	cyber	_	NN	NN	_	13	nn	_	_
13	attack	_	NN	NN	_	10	pobj	_	_
14	.	_	.	.	_	7	punct	_	_

Oracle:
(a2 / attack-01, mod, c2 / cyber)
(c / comment-01, ARG0, o / office)
(c / comment-01, ARG1, a2 / attack-01)
(c3 / city, name, n / name)
(d / decline-02, ARG0, o / office)
(d / decline-02, ARG1, c / comment-01)
(n / name, op, "Najaf")
(o / office, location, c3 / city)
(o / office, poss, a / ayatollah)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),attack,attack-01,false), Span(11,12,List(1),cyber,cyber,false), Span(8,9,List(2),comment,comment-01,false)),Map(2 -> comment-01, 1 -> cyber, 0 -> attack-01),Map(a -> attack-01, c -> cyber, c2 -> comment-01))),[Ljava.lang.String;@2375b321,Annotation([Ljava.lang.String;@5baaae4c,[Ljava.lang.String;@5b6e8f77,[Ljava.lang.String;@41a6d121),Annotation([Ljava.lang.String;@4f449e8f,[Ljava.lang.String;@411291e5,[Ledu.cmu.lti.nlp.amr.Dependency;@6e28bb87),Annotation([Ljava.lang.String;@19f040ba,[Ljava.lang.String;@72ab05ed,[Ljava.lang.String;@27e32fe4),Annotation([Ljava.lang.String;@c3c4c1c,[Ljava.lang.String;@17d238b1,[Ledu.cmu.lti.nlp.amr.Entity;@3d7cc3cb))
AMR:
(a / attack-01, mod, c / cyber)
(c2 / comment-01, ARG1, a / attack-01)

Decoded in 25,861 microseconds
Sentence: Fars reported that a counterattack had been carried out against 2 major Wahhabi web sites which belong to puritanical strain of Sunni Islam that is dominant in Saudi Arabia.

NER Entity: (organization :name (name :op "Fars"))
NER Entity: (thing :name (name :op "Wahhabi"))
NER Entity: (thing :name (name :op "Sunni"))
NER Entity: (organization :name (name :op "Islam"))
NER Entity: (country :name (name :op "Saudi" :op "Arabia"))
Spans:
Span 16-17:  belong => belong-01
Span 11-12:  major => major
Span 1-2:  reported => report-01
Span 27-29:  Saudi Arabia => (country :name (name :op "Saudi" :op "Arabia"))
Span 14-15:  sites => site
Span 19-20:  strain => strain
Span 13-14:  web => web

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 10-11:  2 => 2
Oracle Span 16-17:  belong => belong-01
Oracle Span 7-8:  carried => carry-03
Oracle Span 4-5:  counterattack => counterattack-01
Oracle Span 25-26:  dominant => dominate-01
Oracle Span 0-1:  Fars => (publication :name (name :op "Fars"))
Oracle Span 11-12:  major => major
Oracle Span 18-19:  puritanical => puritan
Oracle Span 1-2:  reported => report-01
Oracle Span 27-29:  Saudi Arabia => (country :name (name :op "Arabia" :op "Saudi"))
Oracle Span 14-15:  sites => site
Oracle Span 19-20:  strain => strain-02
Oracle Span 21-23:  Sunni Islam => (religious-group :name (name :op "Islam" :op "Sunni"))
Oracle Span 12-13:  Wahhabi => (religious-group :name (name :op "Wahhabi"))
Oracle Span 13-14:  web => web

Incorrect span: Saudi Arabia => (country :name (name :op "Saudi" :op "Arabia"))
Incorrect span: strain => strain
Missing span: Fars => (publication :name (name :op "Fars"))
Missing span: Wahhabi => (religious-group :name (name :op "Wahhabi"))
Missing span: Sunni Islam => (religious-group :name (name :op "Islam" :op "Sunni"))
Missing span: Saudi Arabia => (country :name (name :op "Arabia" :op "Saudi"))
Missing span: carried => carry-03
Missing span: counterattack => counterattack-01
Missing span: strain => strain-02
Missing span: 2 => 2
Missing span: dominant => dominate-01
Missing span: puritanical => puritan
Dependencies:
1	Fars	_	NNS	NNS	_	2	nsubj	_	_
2	reported	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	a	_	DT	DT	_	5	det	_	_
5	counterattack	_	NN	NN	_	8	nsubjpass	_	_
6	had	_	VBD	VBD	_	8	aux	_	_
7	been	_	VBN	VBN	_	8	auxpass	_	_
8	carried	_	VBN	VBN	_	2	ccomp	_	_
9	out	_	RP	RP	_	8	prt	_	_
10	against	_	IN	IN	_	8	prep	_	_
11	2	_	CD	CD	_	15	num	_	_
12	major	_	JJ	JJ	_	15	amod	_	_
13	Wahhabi	_	NNP	NNP	_	15	nn	_	_
14	web	_	NN	NN	_	15	nn	_	_
15	sites	_	NNS	NNS	_	10	pobj	_	_
16	which	_	WDT	WDT	_	17	nsubj	_	_
17	belong	_	VBP	VBP	_	15	rcmod	_	_
18	to	_	TO	TO	_	17	prep	_	_
19	puritanical	_	JJ	JJ	_	20	amod	_	_
20	strain	_	NN	NN	_	18	pobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	Sunni	_	NNP	NNP	_	23	nn	_	_
23	Islam	_	NNP	NNP	_	21	pobj	_	_
24	that	_	WDT	WDT	_	26	nsubj	_	_
25	is	_	VBZ	VBZ	_	26	cop	_	_
26	dominant	_	JJ	JJ	_	23	rcmod	_	_
27	in	_	IN	IN	_	26	prep	_	_
28	Saudi	_	NNP	NNP	_	29	nn	_	_
29	Arabia	_	NNP	NNP	_	27	pobj	_	_
30	.	_	.	.	_	2	punct	_	_

Oracle:
(b / belong-01, ARG0, s / site)
(b / belong-01, ARG1, s2 / strain-02)
(c / counterattack-01, ARG1, s / site)
(c2 / carry-03, ARG1, c / counterattack-01)
(c3 / country, name, n4 / name)
(d / dominate-01, ARG0, s2 / strain-02)
(d / dominate-01, location, c3 / country)
(n / name, op, "Fars")
(n2 / name, op, "Wahhabi")
(n3 / name, op, "Islam")
(n3 / name, op, "Sunni")
(n4 / name, op, "Arabia")
(n4 / name, op, "Saudi")
(p / publication, name, n / name)
(r / report-01, ARG0, p / publication)
(r / report-01, ARG1, c2 / carry-03)
(r2 / religious-group, name, n2 / name)
(r3 / religious-group, name, n3 / name)
(s / site, mod, m / major)
(s / site, mod, r2 / religious-group)
(s / site, mod, w / web)
(s / site, quant, 2 / 2)
(s2 / strain-02, ARG2, r3 / religious-group)
(s2 / strain-02, mod, p2 / puritan)

Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(3, 2, 1, 0),Saudi Arabia,(country :name (name :op "Saudi" :op "Arabia")),false), Span(19,20,List(4),strain,strain,false), Span(16,17,List(5),belong,belong-01,false), Span(14,15,List(6),sites,site,false), Span(13,14,List(7),web,web,false), Span(11,12,List(8),major,major,false), Span(1,2,List(9),reported,report-01,false)),Map(2 -> "Saudi", 5 -> belong-01, 8 -> major, 7 -> web, 1 -> name, 4 -> strain, 6 -> site, 9 -> report-01, 0 -> country, 3 -> "Arabia"),Map(w -> web, n -> name, s2 -> site, b -> belong-01, s -> strain, m -> major, r -> report-01, c -> country))),[Ljava.lang.String;@35e478f,Annotation([Ljava.lang.String;@6d6cb754,[Ljava.lang.String;@6b7d1df8,[Ljava.lang.String;@3044e9c7),Annotation([Ljava.lang.String;@41d7b27f,[Ljava.lang.String;@49096b06,[Ledu.cmu.lti.nlp.amr.Dependency;@4a183d02),Annotation([Ljava.lang.String;@5d05ef57,[Ljava.lang.String;@213deac2,[Ljava.lang.String;@23eee4b8),Annotation([Ljava.lang.String;@28952dea,[Ljava.lang.String;@5a9800f8,[Ledu.cmu.lti.nlp.amr.Entity;@143d9a93))
AMR:
(b / belong-01, ARG0, s2 / site)
(b / belong-01, ARG1, s / strain)
(c / country, name, n / name)
(n / name, op, "Arabia")
(n / name, op, "Saudi")
(r / report-01, ARG1, s2 / site)
(s2 / site, mod, m / major)
(s2 / site, poss, c / country)
(s2 / site, poss, w / web)

Decoded in 229,910 microseconds
Sentence: 2008-10-08

mkDayMonthYear(2008-10-08,08,10,2008)
mkDayMonthYear(2008-10-08,08,10,2008)
Spans:
Span 0-1:  2008-10-08 => (date-entity :day 8 :month 10 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2008-10-08 => (date-entity :day 8 :month 10 :year 2008)

Dependencies:
1	2008-10-08	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 8)
(d / date-entity, month, 10)
(d / date-entity, year, 2008)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-10-08,(date-entity :day 8 :month 10 :year 2008),false)),Map(2 -> 10, 1 -> 8, 0 -> date-entity, 3 -> 2008),Map(2 -> 2008, 8 -> 8, d -> date-entity, 1 -> 10))),[Ljava.lang.String;@40226788,Annotation([Ljava.lang.String;@4159e81b,[Ljava.lang.String;@5b5caf08,[Ljava.lang.String;@23cd4ff2),Annotation([Ljava.lang.String;@70807224,[Ljava.lang.String;@7e97551f,[Ledu.cmu.lti.nlp.amr.Dependency;@400d912a),Annotation([Ljava.lang.String;@9f6e406,[Ljava.lang.String;@7a94b64e,[Ljava.lang.String;@3e6f3bae),Annotation([Ljava.lang.String;@12477988,[Ljava.lang.String;@2caf6912,[Ledu.cmu.lti.nlp.amr.Entity;@73d69c0f))
AMR:
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2008)

Decoded in 8,578 microseconds
Sentence: Somalia (SO); Ukraine (UA); Kenya (KE)

NER Entity: (country :name (name :op "Somalia"))
NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (country :name (name :op "Somalia"))
Spans:
Span 9-10:  ; => and
Span 4-5:  ; => and
Span 10-11:  Kenya => (country :name (name :op "Kenya"))
Span 0-1:  Somalia => (country :name (name :op "Somalia"))
Span 5-6:  Ukraine => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  ; => and
Oracle Span 10-11:  Kenya => (country :name (name :op "Kenya"))
Oracle Span 0-1:  Somalia => (country :name (name :op "Somalia"))
Oracle Span 5-6:  Ukraine => (country :name (name :op "Ukraine"))

Extra span: ; => and
Dependencies:
1	Somalia	_	NNP	NNP	_	3	nn	_	_
2	(	_	(	(	_	3	punct	_	_
3	SO	_	NN	NN	_	0	root	_	_
4	)	_	)	)	_	3	punct	_	_
5	;	_	:	:	_	3	punct	_	_
6	Ukraine	_	NNP	NNP	_	3	dep	_	_
7	(	_	(	(	_	8	punct	_	_
8	UA	_	NNP	NNP	_	6	appos	_	_
9	)	_	)	)	_	8	punct	_	_
10	;	_	:	:	_	6	punct	_	_
11	Kenya	_	NNP	NNP	_	6	dep	_	_
12	(	_	(	(	_	13	punct	_	_
13	KE	_	NNP	NNP	_	11	appos	_	_
14	)	_	)	)	_	13	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(n / name, op, "Somalia")
(n2 / name, op, "Ukraine")
(n3 / name, op, "Kenya")

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(2, 1, 0),Kenya,(country :name (name :op "Kenya")),false), Span(9,10,List(3),;,and,false), Span(5,6,List(6, 5, 4),Ukraine,(country :name (name :op "Ukraine")),false), Span(4,5,List(7),;,and,false), Span(0,1,List(10, 9, 8),Somalia,(country :name (name :op "Somalia")),false)),Map(2 -> "Kenya", 5 -> name, 8 -> country, 7 -> and, 1 -> name, 4 -> country, 6 -> "Ukraine", 9 -> name, 0 -> country, 10 -> "Somalia", 3 -> and),Map(n -> name, n3 -> name, c3 -> country, a -> and, a2 -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@34237b90,Annotation([Ljava.lang.String;@1d01dfa5,[Ljava.lang.String;@4a31c2ee,[Ljava.lang.String;@d400943),Annotation([Ljava.lang.String;@22101c80,[Ljava.lang.String;@31ff1390,[Ledu.cmu.lti.nlp.amr.Dependency;@759d81f3),Annotation([Ljava.lang.String;@781a9412,[Ljava.lang.String;@5a4c638d,[Ljava.lang.String;@13e698c7),Annotation([Ljava.lang.String;@aed0151,[Ljava.lang.String;@267bbe1a,[Ledu.cmu.lti.nlp.amr.Entity;@1f12e153))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, c / country)
(a2 / and, op, c2 / country)
(a2 / and, op, c3 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(n / name, op, "Kenya")
(n2 / name, op, "Ukraine")
(n3 / name, op, "Somalia")

Decoded in 48,382 microseconds
Sentence: Crime; weapons; international; money

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 0-1:  Crime => crime
Span 6-7:  money => money

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 0-1:  Crime => crime
Oracle Span 4-5:  international => international
Oracle Span 6-7:  money => money
Oracle Span 2-3:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Missing span: international => international
Missing span: weapons => weapon
Dependencies:
1	Crime	_	NN	NN	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	weapons	_	NNS	NNS	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	international	_	JJ	JJ	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	money	_	NN	NN	_	5	dep	_	_

Oracle:
(a / and, op, c / crime)
(a / and, op, i / international)
(a / and, op, m / money)
(a / and, op, w / weapon)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),money,money,false), Span(5,6,List(1),;,and,false), Span(3,4,List(2),;,and,false), Span(1,2,List(3),;,and,false), Span(0,1,List(4),Crime,crime,false)),Map(2 -> and, 1 -> and, 4 -> crime, 0 -> money, 3 -> and),Map(a3 -> and, m -> money, a -> and, a2 -> and, c -> crime))),[Ljava.lang.String;@389562d6,Annotation([Ljava.lang.String;@5a101b1c,[Ljava.lang.String;@2160e52a,[Ljava.lang.String;@29f0802c),Annotation([Ljava.lang.String;@3a60c416,[Ljava.lang.String;@60f2e0bd,[Ledu.cmu.lti.nlp.amr.Dependency;@469d003c),Annotation([Ljava.lang.String;@6b410923,[Ljava.lang.String;@57bd2029,[Ljava.lang.String;@203dd56b),Annotation([Ljava.lang.String;@e8fadb0,[Ljava.lang.String;@6d64b553,[Ledu.cmu.lti.nlp.amr.Entity;@53667cbe))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a3 / and, op, c / crime)
(a3 / and, op, m / money)

Decoded in 17,499 microseconds
Sentence: Somali pirates who hijacked a Ukrainian freighter carrying a large cargo of arms are approaching a deal for the ship's release.

NER Entity: (thing :name (name :op "Somali"))
NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 14-15:  approaching => approach-01
Span 10-11:  cargo => cargo
Span 7-8:  carrying => carry-01
Span 16-17:  deal => deal-01
Span 3-4:  hijacked => hijack-01
Span 9-10:  large => large
Span 1-2:  pirates => pirate
Span 21-22:  release => release-01
Span 5-6:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 14-15:  approaching => approach-02
Oracle Span 12-13:  arms => arm
Oracle Span 10-11:  cargo => cargo
Oracle Span 7-8:  carrying => carry-01
Oracle Span 16-17:  deal => deal-01
Oracle Span 6-7:  freighter => freighter
Oracle Span 3-4:  hijacked => hijack-01
Oracle Span 9-10:  large => large
Oracle Span 1-2:  pirates => pirate
Oracle Span 21-22:  release => release-01
Oracle Span 19-20:  ship => ship
Oracle Span 0-1:  Somali => (country :name (name :op "Somalia"))
Oracle Span 5-6:  Ukrainian => (country :name (name :op "Ukraine"))

Incorrect span: approaching => approach-01
Missing span: Somali => (country :name (name :op "Somalia"))
Missing span: approaching => approach-02
Missing span: ship => ship
Missing span: freighter => freighter
Missing span: arms => arm
Dependencies:
1	Somali	_	JJ	JJ	_	2	amod	_	_
2	pirates	_	NNS	NNS	_	15	nsubj	_	_
3	who	_	WP	WP	_	4	nsubj	_	_
4	hijacked	_	VBN	VBN	_	2	rcmod	_	_
5	a	_	DT	DT	_	7	det	_	_
6	Ukrainian	_	JJ	JJ	_	7	amod	_	_
7	freighter	_	NN	NN	_	4	dobj	_	_
8	carrying	_	VBG	VBG	_	7	vmod	_	_
9	a	_	DT	DT	_	11	det	_	_
10	large	_	JJ	JJ	_	11	amod	_	_
11	cargo	_	NN	NN	_	8	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	arms	_	NNS	NNS	_	12	pobj	_	_
14	are	_	VBP	VBP	_	15	aux	_	_
15	approaching	_	VBG	VBG	_	0	root	_	_
16	a	_	DT	DT	_	17	det	_	_
17	deal	_	NN	NN	_	15	dobj	_	_
18	for	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	ship	_	NN	NN	_	22	poss	_	_
21	's	_	POS	POS	_	20	possessive	_	_
22	release	_	NN	NN	_	18	pobj	_	_
23	.	_	.	.	_	15	punct	_	_

Oracle:
(a / approach-02, ARG0, p / pirate)
(a / approach-02, ARG1, d / deal-01)
(a2 / arm, consist, c4 / cargo)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / carry-01, ARG0, f / freighter)
(c3 / carry-01, ARG1, c4 / cargo)
(c4 / cargo, mod, l / large)
(d / deal-01, purpose, r / release-01)
(f / freighter, mod, c2 / country)
(h / hijack-01, ARG0, p / pirate)
(h / hijack-01, ARG1, f / freighter)
(n / name, op, "Somalia")
(n2 / name, op, "Ukraine")
(p / pirate, mod, c / country)
(r / release-01, ARG1, s / ship)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),release,release-01,false), Span(16,17,List(1),deal,deal-01,false), Span(14,15,List(2),approaching,approach-01,false), Span(10,11,List(3),cargo,cargo,false), Span(9,10,List(4),large,large,false), Span(7,8,List(5),carrying,carry-01,false), Span(5,6,List(8, 7, 6),Ukrainian,(country :name (name :op "Ukraine")),false), Span(3,4,List(9),hijacked,hijack-01,false), Span(1,2,List(10),pirates,pirate,false)),Map(2 -> approach-01, 5 -> carry-01, 8 -> "Ukraine", 7 -> name, 1 -> deal-01, 4 -> large, 6 -> country, 9 -> hijack-01, 0 -> release-01, 10 -> pirate, 3 -> cargo),Map(n -> name, h -> hijack-01, d -> deal-01, p -> pirate, c3 -> country, a -> approach-01, r -> release-01, l -> large, c -> cargo, c2 -> carry-01))),[Ljava.lang.String;@1d3e6d34,Annotation([Ljava.lang.String;@6eafb10e,[Ljava.lang.String;@26a94fa5,[Ljava.lang.String;@464a4442),Annotation([Ljava.lang.String;@2873d672,[Ljava.lang.String;@3bc735b3,[Ledu.cmu.lti.nlp.amr.Dependency;@577f9109),Annotation([Ljava.lang.String;@4303b7f0,[Ljava.lang.String;@757529a4,[Ljava.lang.String;@779de014),Annotation([Ljava.lang.String;@5c41d037,[Ljava.lang.String;@2234078,[Ledu.cmu.lti.nlp.amr.Entity;@5ec77191))
AMR:
(a / approach-01, ARG0, p / pirate)
(a / approach-01, ARG1, d / deal-01)
(c / cargo, mod, l / large)
(c2 / carry-01, ARG1, c / cargo)
(c3 / country, name, n / name)
(d / deal-01, ARG1, r / release-01)
(h / hijack-01, ARG0, p / pirate)
(h / hijack-01, ARG1, c2 / carry-01)
(n / name, op, "Ukraine")
(r / release-01, location, c3 / country)

Decoded in 214,342 microseconds
Sentence: Questions have emerged regarding the shipment of arms en route to Kenya and of a possible clandestine arms deal between Kenya and South Sudan.

NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "South" :op "Sudan"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
Spans:
Span 16-17:  clandestine => clandestine
Span 18-19:  deal => deal-01
Span 2-3:  emerged => emerge-02
Span 20-21:  Kenya => (country :name (name :op "Kenya"))
Span 11-12:  Kenya => (country :name (name :op "Kenya"))
Span 15-16:  possible => possible
Span 9-10:  route => route
Span 22-24:  South Sudan => (country :name (name :op "South" :op "Sudan"))

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 12-13:  and => and
Oracle Span 21-22:  and => and
Oracle Span 7-8:  arms => arm
Oracle Span 16-17:  clandestine => clandestine
Oracle Span 18-19:  deal => deal-01
Oracle Span 2-3:  emerged => emerge-01
Oracle Span 11-12:  Kenya => (country :name (name :op "Kenya"))
Oracle Span 15-16:  possible => possible
Oracle Span 0-1:  Questions => question-01
Oracle Span 3-4:  regarding => regard-01
Oracle Span 9-10:  route => route
Oracle Span 5-6:  shipment => ship-01
Oracle Span 22-24:  South Sudan => (country :name (name :op "Sudan" :op "South"))

Incorrect span: South Sudan => (country :name (name :op "South" :op "Sudan"))
Extra span: Kenya => (country :name (name :op "Kenya"))
Incorrect span: emerged => emerge-02
Missing span: South Sudan => (country :name (name :op "Sudan" :op "South"))
Missing span: emerged => emerge-01
Missing span: Questions => question-01
Missing span: regarding => regard-01
Missing span: and => and
Missing span: and => and
Missing span: arms => arm
Missing span: shipment => ship-01
Dependencies:
1	Questions	_	NNS	NNS	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	emerged	_	VBN	VBN	_	0	root	_	_
4	regarding	_	VBG	VBG	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	shipment	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	arms	_	NNS	NNS	_	7	pobj	_	_
9	en	_	IN	IN	_	3	advmod	_	_
10	route	_	NN	NN	_	9	dep	_	_
11	to	_	TO	TO	_	3	prep	_	_
12	Kenya	_	NNP	NNP	_	11	pobj	_	_
13	and	_	CC	CC	_	11	cc	_	_
14	of	_	IN	IN	_	11	conj	_	_
15	a	_	DT	DT	_	19	det	_	_
16	possible	_	JJ	JJ	_	19	amod	_	_
17	clandestine	_	JJ	JJ	_	19	amod	_	_
18	arms	_	NNS	NNS	_	19	nn	_	_
19	deal	_	NN	NN	_	14	pobj	_	_
20	between	_	IN	IN	_	19	prep	_	_
21	Kenya	_	NNP	NNP	_	24	nn	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	South	_	NNP	NNP	_	21	conj	_	_
24	Sudan	_	NNP	NNP	_	20	pobj	_	_
25	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, d / deal-01)
(a / and, op, s / ship-01)
(a3 / and, op, c / country)
(a3 / and, op, c4 / country)
(c / country, name, n / name)
(c4 / country, name, n3 / name)
(d / deal-01, ARG0, a3 / and)
(d / deal-01, ARG1, a2 / arm)
(d / deal-01, mod, c2 / clandestine)
(d / deal-01, mod, p / possible)
(e / emerge-01, ARG0, q / question-01)
(n / name, op, "Kenya")
(n3 / name, op, "South")
(n3 / name, op, "Sudan")
(r / regard-01, ARG0, q / question-01)
(r / regard-01, ARG1, a / and)
(r2 / route, direction, c / country)
(s / ship-01, ARG1, a2 / arm)
(s / ship-01, path, r2 / route)

Input(Some(Graph(null,ArrayBuffer(Span(22,24,List(3, 2, 1, 0),South Sudan,(country :name (name :op "South" :op "Sudan")),false), Span(20,21,List(6, 5, 4),Kenya,(country :name (name :op "Kenya")),false), Span(18,19,List(7),deal,deal-01,false), Span(16,17,List(8),clandestine,clandestine,false), Span(15,16,List(9),possible,possible,false), Span(11,12,List(12, 11, 10),Kenya,(country :name (name :op "Kenya")),false), Span(9,10,List(13),route,route,false), Span(2,3,List(14),emerged,emerge-02,false)),Map(2 -> "South", 5 -> name, 12 -> "Kenya", 8 -> clandestine, 7 -> deal-01, 1 -> name, 4 -> country, 11 -> name, 14 -> emerge-02, 6 -> "Kenya", 0 -> country, 9 -> possible, 3 -> "Sudan", 10 -> country, 13 -> route),Map(e -> emerge-02, n -> name, c4 -> country, d -> deal-01, p -> possible, n3 -> name, c3 -> clandestine, r -> route, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@4642b71d,Annotation([Ljava.lang.String;@1450078a,[Ljava.lang.String;@c68a5f8,[Ljava.lang.String;@69c6161d),Annotation([Ljava.lang.String;@3aefae67,[Ljava.lang.String;@2e1792e7,[Ledu.cmu.lti.nlp.amr.Dependency;@6719a5b8),Annotation([Ljava.lang.String;@3eb631b8,[Ljava.lang.String;@796d3c9f,[Ljava.lang.String;@6bff19ff),Annotation([Ljava.lang.String;@41e1455d,[Ljava.lang.String;@4e558728,[Ledu.cmu.lti.nlp.amr.Entity;@5eccd3b9))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(d / deal-01, ARG1, c / country)
(d / deal-01, location, c2 / country)
(d / deal-01, mod, c3 / clandestine)
(d / deal-01, mod, p / possible)
(e / emerge-02, ARG0, r / route)
(e / emerge-02, ARG1, d / deal-01)
(e / emerge-02, ARG2, c4 / country)
(n / name, op, "South")
(n / name, op, "Sudan")
(n2 / name, op, "Kenya")
(n3 / name, op, "Kenya")

Decoded in 235,727 microseconds
Sentence: On 08 October 2008 Maritime officials and associates of the Somali pirates who on 25 September 2008 hijacked a Ukrainian freighter carrying a large cargo of arms stated that the pirates may soon be collecting their ransom.

mkDayMonthYear(08	October	2008,08,October,2008)
NER Entity: (thing :name (name :op "Somali"))
mkDayMonthYear(25	September	2008,25,September,2008)
NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 1-4:  08 October 2008 => (date-entity :day 8 :month 10 :year 2008)
Span 14-17:  25 September 2008 => (date-entity :day 25 :month 9 :year 2008)
Span 24-25:  cargo => cargo
Span 21-22:  carrying => carry-01
Span 34-35:  collecting => collect-01
Span 17-18:  hijacked => hijack-01
Span 23-24:  large => large
Span 31-32:  may => possible
Span 5-6:  officials => (have-org-role-91 :ARG2 official)
Span 30-31:  pirates => pirate
Span 11-12:  pirates => pirate
Span 36-37:  ransom => ransom
Span 32-33:  soon => soon
Span 19-20:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 1-4:  08 October 2008 => (date-entity :day 8 :month 10 :year 2008)
Oracle Span 14-17:  25 September 2008 => (date-entity :day 25 :month 9 :year 2008)
Oracle Span 6-7:  and => and
Oracle Span 26-27:  arms => arm
Oracle Span 7-8:  associates => (person :ARG1-of associate-01)
Oracle Span 24-25:  cargo => cargo
Oracle Span 21-22:  carrying => carry-01
Oracle Span 34-35:  collecting => collect-01
Oracle Span 20-21:  freighter => freighter
Oracle Span 17-18:  hijacked => hijack-01
Oracle Span 23-24:  large => large
Oracle Span 4-5:  Maritime => maritime
Oracle Span 31-32:  may => possible
Oracle Span 5-6:  officials => official
Oracle Span 11-12:  pirates => pirate
Oracle Span 30-31:  pirates => pirate
Oracle Span 36-37:  ransom => ransom
Oracle Span 10-11:  Somali => (country :name (name :op "Somalia"))
Oracle Span 32-33:  soon => soon
Oracle Span 27-28:  stated => state-01
Oracle Span 19-20:  Ukrainian => (country :name (name :op "Ukraine"))

Incorrect span: officials => (have-org-role-91 :ARG2 official)
Missing span: Somali => (country :name (name :op "Somalia"))
Missing span: stated => state-01
Missing span: and => and
Missing span: associates => (person :ARG1-of associate-01)
Missing span: freighter => freighter
Missing span: arms => arm
Missing span: officials => official
Missing span: Maritime => maritime
Dependencies:
1	On	_	IN	IN	_	28	prep	_	_
2	08	_	CD	CD	_	6	num	_	_
3	October	_	NNP	NNP	_	6	nn	_	_
4	2008	_	CD	CD	_	6	num	_	_
5	Maritime	_	NNP	NNP	_	6	nn	_	_
6	officials	_	NNS	NNS	_	1	pobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	associates	_	NNS	NNS	_	6	conj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	Somali	_	JJ	JJ	_	12	amod	_	_
12	pirates	_	NNS	NNS	_	9	pobj	_	_
13	who	_	WP	WP	_	18	nsubj	_	_
14	on	_	IN	IN	_	13	prep	_	_
15	25	_	CD	CD	_	14	pobj	_	_
16	September	_	NNP	NNP	_	15	tmod	_	_
17	2008	_	CD	CD	_	16	num	_	_
18	hijacked	_	VBN	VBN	_	8	rcmod	_	_
19	a	_	DT	DT	_	21	det	_	_
20	Ukrainian	_	JJ	JJ	_	21	amod	_	_
21	freighter	_	NN	NN	_	28	nsubj	_	_
22	carrying	_	VBG	VBG	_	21	vmod	_	_
23	a	_	DT	DT	_	25	det	_	_
24	large	_	JJ	JJ	_	25	amod	_	_
25	cargo	_	NN	NN	_	22	dobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	arms	_	NNS	NNS	_	26	pobj	_	_
28	stated	_	VBD	VBD	_	0	root	_	_
29	that	_	IN	IN	_	35	mark	_	_
30	the	_	DT	DT	_	31	det	_	_
31	pirates	_	NNS	NNS	_	35	nsubj	_	_
32	may	_	MD	MD	_	35	aux	_	_
33	soon	_	RB	RB	_	35	advmod	_	_
34	be	_	VB	VB	_	35	aux	_	_
35	collecting	_	VBG	VBG	_	28	ccomp	_	_
36	their	_	PRP$	PRP$	_	37	poss	_	_
37	ransom	_	NN	NN	_	35	dobj	_	_
38	.	_	.	.	_	28	punct	_	_

Oracle:
(a / and, op, o / official)
(a / and, op, p / person)
(a2 / associate-01, ARG1, p / person)
(a2 / associate-01, ARG2, p2 / pirate)
(a3 / arm, consist, c4 / cargo)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / carry-01, ARG0, f / freighter)
(c3 / carry-01, ARG1, c4 / cargo)
(c4 / cargo, mod, l / large)
(c5 / collect-01, ARG0, p3 / pirate)
(c5 / collect-01, ARG1, r / ransom)
(c5 / collect-01, mod, p4 / possible)
(c5 / collect-01, time, s3 / soon)
(d / date-entity, day, 25)
(d / date-entity, month, 9)
(d / date-entity, year, 2008)
(d2 / date-entity, day, 8)
(d2 / date-entity, month, 10)
(d2 / date-entity, year, 2008)
(f / freighter, mod, c2 / country)
(h / hijack-01, ARG0, p2 / pirate)
(h / hijack-01, ARG1, f / freighter)
(h / hijack-01, time, d / date-entity)
(n / name, op, "Somalia")
(n2 / name, op, "Ukraine")
(o / official, mod, m / maritime)
(p2 / pirate, mod, c / country)
(r / ransom, poss, p3 / pirate)
(s / state-01, ARG0, a / and)
(s / state-01, ARG1, c5 / collect-01)
(s / state-01, time, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),ransom,ransom,false), Span(34,35,List(1),collecting,collect-01,false), Span(32,33,List(2),soon,soon,false), Span(31,32,List(3),may,possible,false), Span(30,31,List(4),pirates,pirate,false), Span(24,25,List(5),cargo,cargo,false), Span(23,24,List(6),large,large,false), Span(21,22,List(7),carrying,carry-01,false), Span(19,20,List(10, 9, 8),Ukrainian,(country :name (name :op "Ukraine")),false), Span(17,18,List(11),hijacked,hijack-01,false), Span(14,17,List(15, 14, 13, 12),25 September 2008,(date-entity :day 25 :month 9 :year 2008),false), Span(11,12,List(16),pirates,pirate,false), Span(5,6,List(18, 17),officials,(have-org-role-91 :ARG2 official),false), Span(1,4,List(22, 21, 20, 19),08 October 2008,(date-entity :day 8 :month 10 :year 2008),false)),Map(2 -> soon, 5 -> cargo, 12 -> date-entity, 15 -> 2008, 8 -> country, 21 -> 10, 18 -> official, 7 -> carry-01, 17 -> have-org-role-91, 1 -> collect-01, 4 -> pirate, 11 -> hijack-01, 14 -> 9, 20 -> 8, 6 -> large, 22 -> 2008, 0 -> ransom, 9 -> name, 16 -> pirate, 19 -> date-entity, 3 -> possible, 10 -> "Ukraine", 13 -> 25),Map(n -> name, h -> hijack-01, 2 -> 25, h2 -> have-org-role-91, 8 -> 8, p2 -> pirate, c4 -> country, s -> soon, d -> date-entity, 1 -> 10, 23 -> 2008, p -> possible, c3 -> carry-01, d2 -> date-entity, r -> ransom, c -> collect-01, l -> large, 22 -> 2008, 9 -> 9, o -> official, p3 -> pirate, c2 -> cargo))),[Ljava.lang.String;@4d6f197e,Annotation([Ljava.lang.String;@6ef7623,[Ljava.lang.String;@64e1dd11,[Ljava.lang.String;@5c089b2f),Annotation([Ljava.lang.String;@6999cd39,[Ljava.lang.String;@14bae047,[Ledu.cmu.lti.nlp.amr.Dependency;@7ed9ae94),Annotation([Ljava.lang.String;@66908383,[Ljava.lang.String;@41477a6d,[Ljava.lang.String;@2bc12da),Annotation([Ljava.lang.String;@3122b117,[Ljava.lang.String;@534ca02b,[Ledu.cmu.lti.nlp.amr.Entity;@29a23c3d))
AMR:
(c / collect-01, ARG0, p2 / pirate)
(c / collect-01, ARG1, r / ransom)
(c / collect-01, time, s / soon)
(c2 / cargo, mod, l / large)
(c3 / carry-01, ARG0, p2 / pirate)
(c3 / carry-01, ARG1, c2 / cargo)
(c3 / carry-01, time, d / date-entity)
(c4 / country, name, n / name)
(d / date-entity, day, 2 / 25)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 22 / 2008)
(d2 / date-entity, day, 8 / 8)
(d2 / date-entity, month, 1 / 10)
(d2 / date-entity, year, 23 / 2008)
(h / hijack-01, ARG0, p3 / pirate)
(h / hijack-01, ARG1, c3 / carry-01)
(h / hijack-01, time, d2 / date-entity)
(h2 / have-org-role-91, ARG0, p3 / pirate)
(h2 / have-org-role-91, ARG1, c4 / country)
(h2 / have-org-role-91, ARG2, o / official)
(n / name, op, "Ukraine")
(p / possible, domain, c / collect-01)

Decoded in 1,368,023 microseconds
Sentence: After difficult negotiations likened by several people involved to bazaar-style haggling the parties are close to reaching a deal in which the pirates would be paid millions of dollars and the ship freed.

Spans:
Span 0-1:  After => after
Span 20-21:  deal => deal-01
Span 1-2:  difficult => difficult
Span 30-31:  dollars => (monetary-quantity :unit dollar)
Span 34-35:  freed => free-01
Span 7-8:  involved => involve-01
Span 2-3:  negotiations => negotiate-01
Span 27-28:  paid => pay-01
Span 14-15:  parties => party
Span 24-25:  pirates => pirate
Span 18-19:  reaching => reach-01
Span 5-6:  several => several
Span 11-12:  style => style

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 0-1:  After => after
Oracle Span 31-32:  and => and
Oracle Span 9-10:  bazaar => bazaar
Oracle Span 16-17:  close => close-06
Oracle Span 20-21:  deal => deal-01
Oracle Span 1-2:  difficult => difficult
Oracle Span 30-31:  dollars => (monetary-quantity :unit dollar)
Oracle Span 34-35:  freed => free-01
Oracle Span 12-13:  haggling => haggle-01
Oracle Span 7-8:  involved => involve-01
Oracle Span 3-4:  likened => liken-01
Oracle Span 2-3:  negotiations => negotiate-01
Oracle Span 27-28:  paid => pay-01
Oracle Span 14-15:  parties => party
Oracle Span 6-7:  people => people
Oracle Span 24-25:  pirates => pirate
Oracle Span 18-19:  reaching => reach-01
Oracle Span 5-6:  several => several
Oracle Span 33-34:  ship => ship
Oracle Span 11-12:  style => style

Missing span: close => close-06
Missing span: likened => liken-01
Missing span: people => people
Missing span: haggling => haggle-01
Missing span: bazaar => bazaar
Missing span: and => and
Missing span: ship => ship
Dependencies:
1	After	_	IN	IN	_	15	prep	_	_
2	difficult	_	JJ	JJ	_	3	amod	_	_
3	negotiations	_	NNS	NNS	_	1	pobj	_	_
4	likened	_	VBN	VBN	_	3	vmod	_	_
5	by	_	IN	IN	_	4	prep	_	_
6	several	_	JJ	JJ	_	7	amod	_	_
7	people	_	NNS	NNS	_	5	pobj	_	_
8	involved	_	VBN	VBN	_	7	vmod	_	_
9	to	_	TO	TO	_	8	prep	_	_
10	bazaar-style	_	JJ	JJ	_	11	amod	_	_
11	haggling	_	NNS	NNS	_	9	pobj	_	_
12	the	_	DT	DT	_	13	det	_	_
13	parties	_	NNS	NNS	_	15	nsubj	_	_
14	are	_	VBP	VBP	_	15	cop	_	_
15	close	_	JJ	JJ	_	0	root	_	_
16	to	_	TO	TO	_	15	prep	_	_
17	reaching	_	VBG	VBG	_	16	pcomp	_	_
18	a	_	DT	DT	_	19	det	_	_
19	deal	_	NN	NN	_	17	dobj	_	_
20	in	_	IN	IN	_	26	prep	_	_
21	which	_	WDT	WDT	_	20	pobj	_	_
22	the	_	DT	DT	_	23	det	_	_
23	pirates	_	NNS	NNS	_	26	nsubjpass	_	_
24	would	_	MD	MD	_	26	aux	_	_
25	be	_	VB	VB	_	26	auxpass	_	_
26	paid	_	VBN	VBN	_	19	rcmod	_	_
27	millions	_	NNS	NNS	_	26	dobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	dollars	_	NNS	NNS	_	28	pobj	_	_
30	and	_	CC	CC	_	26	cc	_	_
31	the	_	DT	DT	_	32	det	_	_
32	ship	_	NN	NN	_	33	nsubj	_	_
33	freed	_	VBD	VBD	_	26	conj	_	_
34	.	_	.	.	_	15	punct	_	_

Oracle:
(a / and, op, f / free-01)
(a / and, op, p2 / pay-01)
(a2 / after, op, n / negotiate-01)
(c / close-06, ARG1, p / party)
(c / close-06, ARG2, r / reach-01)
(c / close-06, time, a2 / after)
(d2 / deal-01, ARG1, a / and)
(f / free-01, ARG1, s / ship)
(h / haggle-01, mod, s3 / style)
(i / involve-01, ARG1, p4 / people)
(i / involve-01, ARG2, h / haggle-01)
(l / liken-01, ARG0, p4 / people)
(l / liken-01, ARG1, n / negotiate-01)
(m2 / monetary-quantity, unit, d / dollar)
(n / negotiate-01, mod, d3 / difficult)
(p2 / pay-01, ARG2, p3 / pirate)
(p4 / people, quant, s2 / several)
(r / reach-01, ARG1, d2 / deal-01)
(s3 / style, mod, b / bazaar)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),freed,free-01,false), Span(30,31,List(2, 1),dollars,(monetary-quantity :unit dollar),false), Span(27,28,List(3),paid,pay-01,false), Span(24,25,List(4),pirates,pirate,false), Span(20,21,List(5),deal,deal-01,false), Span(18,19,List(6),reaching,reach-01,false), Span(14,15,List(7),parties,party,false), Span(11,12,List(8),style,style,false), Span(7,8,List(9),involved,involve-01,false), Span(5,6,List(10),several,several,false), Span(2,3,List(11),negotiations,negotiate-01,false), Span(1,2,List(12),difficult,difficult,false), Span(0,1,List(13),After,after,false)),Map(2 -> dollar, 5 -> deal-01, 12 -> difficult, 8 -> style, 7 -> party, 1 -> monetary-quantity, 4 -> pirate, 11 -> negotiate-01, 6 -> reach-01, 0 -> free-01, 9 -> involve-01, 3 -> pay-01, 10 -> several, 13 -> after),Map(n -> negotiate-01, s2 -> several, d3 -> difficult, p2 -> pirate, s -> style, m -> monetary-quantity, d -> dollar, p -> pay-01, a -> after, d2 -> deal-01, r -> reach-01, i -> involve-01, f -> free-01, p3 -> party))),[Ljava.lang.String;@4b6ac111,Annotation([Ljava.lang.String;@6fe46b62,[Ljava.lang.String;@591fd34d,[Ljava.lang.String;@61e45f87),Annotation([Ljava.lang.String;@7c9b78e3,[Ljava.lang.String;@3068b369,[Ledu.cmu.lti.nlp.amr.Dependency;@17ca8b92),Annotation([Ljava.lang.String;@5491f68b,[Ljava.lang.String;@736ac09a,[Ljava.lang.String;@6ecd665),Annotation([Ljava.lang.String;@45394b31,[Ljava.lang.String;@1ec7d8b3,[Ledu.cmu.lti.nlp.amr.Entity;@3b0ca5e1))
AMR:
(a / after, op, n / negotiate-01)
(d2 / deal-01, ARG0, p3 / party)
(d2 / deal-01, ARG1, s2 / several)
(f / free-01, ARG0, p2 / pirate)
(f / free-01, ARG1, d2 / deal-01)
(f / free-01, ARG2, m / monetary-quantity)
(i / involve-01, ARG0, n / negotiate-01)
(i / involve-01, ARG1, s / style)
(m / monetary-quantity, unit, d / dollar)
(n / negotiate-01, ARG2, d2 / deal-01)
(n / negotiate-01, mod, d3 / difficult)
(p / pay-01, ARG1, p2 / pirate)
(r / reach-01, ARG1, d2 / deal-01)

Decoded in 510,363 microseconds
Sentence: A businessman in xarardheere, Somalia named Ahmed Omar stated that the pirates and the ship owners have agreed on a ransom of approximately 8 million U.S. dollars and the ship may be freed on 08 October 2008 or 09 October 2008.

NER Entity: (country :name (name :op "Somalia"))
NER Entity: (person :name (name :op "Ahmed" :op "Omar"))
NER Entity: (country :name (name :op "U.S."))
mkDayMonthYear(08	October	2008,08,October,2008)
mkDayMonthYear(09	October	2008,09,October,2008)
NER Entity: (country :name (name :op "Somalia"))
Spans:
Span 35-38:  08 October 2008 => (date-entity :day 8 :month 10 :year 2008)
Span 39-42:  09 October 2008 => (date-entity :day 9 :month 10 :year 2008)
Span 7-9:  Ahmed Omar => (person :name (name :op "Ahmed" :op "Omar"))
Span 1-2:  businessman => businessman
Span 27-28:  dollars => (monetary-quantity :unit dollar)
Span 33-34:  freed => free-01
Span 31-32:  may => possible
Span 38-39:  or => or
Span 16-17:  owners => (person :ARG0-of own-01)
Span 12-13:  pirates => pirate
Span 21-22:  ransom => ransom
Span 5-6:  Somalia => (country :name (name :op "Somalia"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 35-38:  08 October 2008 => (date-entity :day 8 :month 10 :year 2008)
Oracle Span 39-42:  09 October 2008 => (date-entity :day 9 :month 10 :year 2008)
Oracle Span 18-19:  agreed => agree-01
Oracle Span 7-9:  Ahmed Omar => (name :op "Omar" :op "Ahmed")
Oracle Span 13-14:  and => and
Oracle Span 23-24:  approximately => approximately
Oracle Span 1-2:  businessman => businessman
Oracle Span 27-28:  dollars => (monetary-quantity :unit dollar)
Oracle Span 33-34:  freed => free-01
Oracle Span 31-32:  may => possible
Oracle Span 38-39:  or => or
Oracle Span 16-17:  owners => (person :ARG0-of own-01)
Oracle Span 12-13:  pirates => pirate
Oracle Span 21-22:  ransom => ransom
Oracle Span 15-16:  ship => ship
Oracle Span 5-6:  Somalia => (country :name (name :op "Somalia"))
Oracle Span 9-10:  stated => state-01
Oracle Span 26-27:  U.S. => (country :name (name :op "U.S."))
Oracle Span 3-4:  xarardheere => (city :name (name :op "Xarardheere"))

Incorrect span: Ahmed Omar => (person :name (name :op "Ahmed" :op "Omar"))
Missing span: Ahmed Omar => (name :op "Omar" :op "Ahmed")
Missing span: xarardheere => (city :name (name :op "Xarardheere"))
Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: stated => state-01
Missing span: and => and
Missing span: agreed => agree-01
Missing span: ship => ship
Missing span: approximately => approximately
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	businessman	_	NN	NN	_	7	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	xarardheere	_	NN	NN	_	3	pobj	_	_
5	,	_	,	,	_	4	punct	_	_
6	Somalia	_	NNP	NNP	_	4	appos	_	_
7	named	_	VBD	VBD	_	0	root	_	_
8	Ahmed	_	NNP	NNP	_	9	nn	_	_
9	Omar	_	NNP	NNP	_	10	nsubj	_	_
10	stated	_	VBD	VBD	_	7	ccomp	_	_
11	that	_	IN	IN	_	19	mark	_	_
12	the	_	DT	DT	_	13	det	_	_
13	pirates	_	NNS	NNS	_	19	nsubj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	the	_	DT	DT	_	17	det	_	_
16	ship	_	NN	NN	_	17	nn	_	_
17	owners	_	NNS	NNS	_	13	conj	_	_
18	have	_	VBP	VBP	_	19	aux	_	_
19	agreed	_	VBN	VBN	_	10	ccomp	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	a	_	DT	DT	_	22	det	_	_
22	ransom	_	NN	NN	_	20	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	approximately	_	RB	RB	_	26	quantmod	_	_
25	8	_	CD	CD	_	26	number	_	_
26	million	_	CD	CD	_	28	num	_	_
27	U.S.	_	NNP	NNP	_	28	nn	_	_
28	dollars	_	NNS	NNS	_	23	pobj	_	_
29	and	_	CC	CC	_	19	cc	_	_
30	the	_	DT	DT	_	31	det	_	_
31	ship	_	NN	NN	_	34	nsubjpass	_	_
32	may	_	MD	MD	_	34	aux	_	_
33	be	_	VB	VB	_	34	auxpass	_	_
34	freed	_	VBN	VBN	_	19	conj	_	_
35	on	_	IN	IN	_	34	prep	_	_
36	08	_	CD	CD	_	35	pobj	_	_
37	October	_	NNP	NNP	_	34	tmod	_	_
38	2008	_	CD	CD	_	37	num	_	_
39	or	_	CC	CC	_	37	cc	_	_
40	09	_	CD	CD	_	37	conj	_	_
41	October	_	NNP	NNP	_	10	tmod	_	_
42	2008	_	CD	CD	_	41	num	_	_
43	.	_	.	.	_	7	punct	_	_

Oracle:
(a / approximately, op, m / monetary-quantity)
(a2 / and, op, a3 / agree-01)
(a2 / and, op, f / free-01)
(a3 / agree-01, ARG0, p / pirate)
(a3 / agree-01, ARG1, r / ransom)
(a3 / agree-01, ARG2, p2 / person)
(b / businessman, location, c2 / city)
(b / businessman, name, n2 / name)
(c / country, name, n / name)
(c2 / city, location, c3 / country)
(c2 / city, name, n3 / name)
(c3 / country, name, n4 / name)
(d / dollar, mod, c / country)
(d2 / date-entity, day, 8)
(d2 / date-entity, month, 10)
(d2 / date-entity, year, 2008)
(d3 / date-entity, day, 9)
(d3 / date-entity, month, 10)
(d3 / date-entity, year, 2008)
(f / free-01, ARG1, s2 / ship)
(f / free-01, mod, p3 / possible)
(f / free-01, time, o2 / or)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "U.S.")
(n2 / name, op, "Ahmed")
(n2 / name, op, "Omar")
(n3 / name, op, "Xarardheere")
(n4 / name, op, "Somalia")
(o / own-01, ARG0, p2 / person)
(o / own-01, ARG1, s2 / ship)
(o2 / or, op, d2 / date-entity)
(o2 / or, op, d3 / date-entity)
(r / ransom, quant, a / approximately)
(s / state-01, ARG0, b / businessman)
(s / state-01, ARG1, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(39,42,List(3, 2, 1, 0),09 October 2008,(date-entity :day 9 :month 10 :year 2008),false), Span(38,39,List(4),or,or,false), Span(35,38,List(8, 7, 6, 5),08 October 2008,(date-entity :day 8 :month 10 :year 2008),false), Span(33,34,List(9),freed,free-01,false), Span(31,32,List(10),may,possible,false), Span(27,28,List(12, 11),dollars,(monetary-quantity :unit dollar),false), Span(21,22,List(13),ransom,ransom,false), Span(16,17,List(15, 14),owners,(person :ARG0-of own-01),false), Span(12,13,List(16),pirates,pirate,false), Span(7,9,List(20, 19, 18, 17),Ahmed Omar,(person :name (name :op "Ahmed" :op "Omar")),false), Span(5,6,List(23, 22, 21),Somalia,(country :name (name :op "Somalia")),false), Span(1,2,List(24),businessman,businessman,false)),Map(2 -> 10, 5 -> date-entity, 12 -> dollar, 8 -> 2008, 15 -> own-01, 21 -> country, 18 -> name, 24 -> businessman, 7 -> 10, 1 -> 9, 17 -> person, 23 -> "Somalia", 4 -> or, 11 -> monetary-quantity, 14 -> person, 20 -> "Omar", 6 -> 8, 9 -> free-01, 0 -> date-entity, 22 -> name, 16 -> pirate, 19 -> "Ahmed", 10 -> possible, 3 -> 2008, 13 -> ransom),Map(n -> name, 2 -> 2008, b -> businessman, 12 -> 10, 8 -> 8, d3 -> dollar, p2 -> person, d -> date-entity, m -> monetary-quantity, 1 -> 10, p -> possible, p4 -> person, o2 -> own-01, d2 -> date-entity, r -> ransom, c -> country, 9 -> 9, 22 -> 2008, f -> free-01, o -> or, p3 -> pirate, n2 -> name))),[Ljava.lang.String;@5bb3131b,Annotation([Ljava.lang.String;@54dcbb9f,[Ljava.lang.String;@74fef3f7,[Ljava.lang.String;@2a037324),Annotation([Ljava.lang.String;@69eb86b4,[Ljava.lang.String;@585ac855,[Ledu.cmu.lti.nlp.amr.Dependency;@5bb8f9e2),Annotation([Ljava.lang.String;@6a933be2,[Ljava.lang.String;@5f78de22,[Ljava.lang.String;@516ebdf8),Annotation([Ljava.lang.String;@4d8539de,[Ljava.lang.String;@3eba57a7,[Ledu.cmu.lti.nlp.amr.Entity;@272a179c))
AMR:
(b / businessman, poss, p4 / person)
(c / country, name, n2 / name)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2008)
(d2 / date-entity, day, 8 / 8)
(d2 / date-entity, month, 12 / 10)
(d2 / date-entity, year, 22 / 2008)
(f / free-01, ARG0, p2 / person)
(f / free-01, ARG1, p3 / pirate)
(f / free-01, ARG2, p4 / person)
(f / free-01, time, d2 / date-entity)
(m / monetary-quantity, op, f / free-01)
(m / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Ahmed")
(n / name, op, "Omar")
(n2 / name, op, "Somalia")
(o / or, op, d / date-entity)
(o / or, op, d2 / date-entity)
(o2 / own-01, ARG0, p2 / person)
(p / possible, domain, f / free-01)
(p4 / person, mod, c / country)
(p4 / person, name, n / name)
(r / ransom, quant, m / monetary-quantity)

Decoded in 809,026 microseconds
Sentence: Xarardheere is a notorious pirate base on the coast of Somalia.

NER Entity: (country :name (name :op "Somalia"))
NER Entity: (country :name (name :op "Somalia"))
Spans:
Span 8-9:  coast => coast
Span 3-4:  notorious => notorious-41
Span 10-11:  Somalia => (country :name (name :op "Somalia"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  base => base
Oracle Span 8-9:  coast => coast
Oracle Span 3-4:  notorious => notorious-41
Oracle Span 4-5:  pirate => pirate
Oracle Span 10-11:  Somalia => (country :name (name :op "Somalia"))
Oracle Span 0-1:  Xarardheere => (city :name (name :op "Xarardheere"))

Missing span: Xarardheere => (city :name (name :op "Xarardheere"))
Missing span: base => base
Missing span: pirate => pirate
Dependencies:
1	Xarardheere	_	NNP	NNP	_	6	nsubj	_	_
2	is	_	VBZ	VBZ	_	6	cop	_	_
3	a	_	DT	DT	_	6	det	_	_
4	notorious	_	JJ	JJ	_	6	amod	_	_
5	pirate	_	NN	NN	_	6	nn	_	_
6	base	_	NN	NN	_	0	root	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	coast	_	NN	NN	_	7	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	Somalia	_	NNP	NNP	_	10	pobj	_	_
12	.	_	.	.	_	6	punct	_	_

Oracle:
(b / base, domain, c / city)
(b / base, location, c2 / coast)
(b / base, mod, p / pirate)
(c / city, name, n2 / name)
(c2 / coast, poss, c3 / country)
(c3 / country, name, n3 / name)
(n / notorious-41, ARG1, b / base)
(n2 / name, op, "Xarardheere")
(n3 / name, op, "Somalia")

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(2, 1, 0),Somalia,(country :name (name :op "Somalia")),false), Span(8,9,List(3),coast,coast,false), Span(3,4,List(4),notorious,notorious-41,false)),Map(2 -> "Somalia", 1 -> name, 4 -> notorious-41, 0 -> country, 3 -> coast),Map(n -> name, c -> country, n2 -> notorious-41, c2 -> coast))),[Ljava.lang.String;@30feffc,Annotation([Ljava.lang.String;@67207d8a,[Ljava.lang.String;@bcb09a6,[Ljava.lang.String;@7c2a69b4),Annotation([Ljava.lang.String;@a619c2,[Ljava.lang.String;@648ee871,[Ledu.cmu.lti.nlp.amr.Dependency;@375b5b7f),Annotation([Ljava.lang.String;@1813f3e9,[Ljava.lang.String;@28cb9120,[Ljava.lang.String;@3b152928),Annotation([Ljava.lang.String;@56781d96,[Ljava.lang.String;@5173200b,[Ledu.cmu.lti.nlp.amr.Entity;@25c5e994))
AMR:
(c / country, name, n / name)
(c2 / coast, location, c / country)
(n / name, op, "Somalia")
(n2 / notorious-41, ARG0, c / country)

Decoded in 25,529 microseconds
Sentence: Maritime officials in Kenya stated that critical details have yet to be agreed upon.

NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
Spans:
Span 6-7:  critical => critical
Span 7-8:  details => detail-01
Span 3-4:  Kenya => (country :name (name :op "Kenya"))
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 9-10:  yet => yet

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 12-13:  agreed => agree-01
Oracle Span 6-7:  critical => critical
Oracle Span 7-8:  details => detail-01
Oracle Span 3-4:  Kenya => (country :name (name :op "Kenya"))
Oracle Span 0-1:  Maritime => maritime
Oracle Span 1-2:  officials => official
Oracle Span 4-5:  stated => state-01
Oracle Span 9-10:  yet => yet

Incorrect span: officials => (have-org-role-91 :ARG2 official)
Missing span: stated => state-01
Missing span: agreed => agree-01
Missing span: officials => official
Missing span: Maritime => maritime
Dependencies:
1	Maritime	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	5	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	Kenya	_	NNP	NNP	_	3	pobj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	that	_	IN	IN	_	9	mark	_	_
7	critical	_	JJ	JJ	_	8	amod	_	_
8	details	_	NNS	NNS	_	9	nsubj	_	_
9	have	_	VBP	VBP	_	5	ccomp	_	_
10	yet	_	RB	RB	_	9	advmod	_	_
11	to	_	TO	TO	_	13	aux	_	_
12	be	_	VB	VB	_	13	auxpass	_	_
13	agreed	_	VBN	VBN	_	9	xcomp	_	_
14	upon	_	RB	RB	_	13	prep	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(a / agree-01, ARG1, d / detail-01)
(a / agree-01, time, y / yet)
(c / country, name, n / name)
(d / detail-01, mod, c2 / critical)
(n / name, op, "Kenya")
(o / official, location, c / country)
(o / official, mod, m / maritime)
(s / state-01, ARG0, o / official)
(s / state-01, ARG1, a / agree-01)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),yet,yet,false), Span(7,8,List(1),details,detail-01,false), Span(6,7,List(2),critical,critical,false), Span(3,4,List(5, 4, 3),Kenya,(country :name (name :op "Kenya")),false), Span(1,2,List(7, 6),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> critical, 5 -> "Kenya", 7 -> official, 1 -> detail-01, 4 -> name, 6 -> have-org-role-91, 0 -> yet, 3 -> country),Map(n -> name, h -> have-org-role-91, d -> detail-01, y -> yet, c -> critical, o -> official, c2 -> country))),[Ljava.lang.String;@378bd86d,Annotation([Ljava.lang.String;@2189e7a7,[Ljava.lang.String;@69b2f8e5,[Ljava.lang.String;@6331250e),Annotation([Ljava.lang.String;@a10c1b5,[Ljava.lang.String;@644abb8f,[Ledu.cmu.lti.nlp.amr.Dependency;@1a411233),Annotation([Ljava.lang.String;@70325d20,[Ljava.lang.String;@7c2327fa,[Ljava.lang.String;@4d847d32),Annotation([Ljava.lang.String;@5f462e3b,[Ljava.lang.String;@3d7fa3ae,[Ledu.cmu.lti.nlp.amr.Entity;@58065f0c))
AMR:
(c2 / country, name, n / name)
(d / detail-01, ARG0, c2 / country)
(d / detail-01, mod, c / critical)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Kenya")
(y / yet, op, c2 / country)

Decoded in 61,414 microseconds
Sentence: One such detail involves the pirates' request for a guarantee that they would not be arrested or attacked by the armada of American warships currently encircling them.

NER Entity: (thing :name (name :op "American"))
Spans:
Span 16-17:  arrested => arrest-01
Span 18-19:  attacked => attack-01
Span 25-26:  currently => current
Span 2-3:  detail => detail-01
Span 10-11:  guarantee => guarantee-01
Span 3-4:  involves => involve-01
Span 0-1:  One => 1
Span 17-18:  or => or
Span 5-6:  pirates => pirate
Span 7-8:  request => request-01
Span 1-2:  such => such
Span 24-25:  warships => warship

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 21-22:  armada => armada
Oracle Span 16-17:  arrested => arrest-01
Oracle Span 18-19:  attacked => attack-01
Oracle Span 25-26:  currently => current
Oracle Span 2-3:  detail => detail-01
Oracle Span 26-27:  encircling => encircle-01
Oracle Span 10-11:  guarantee => guarantee-01
Oracle Span 3-4:  involves => involve-01
Oracle Span 0-1:  One => 1
Oracle Span 17-18:  or => or
Oracle Span 5-6:  pirates => pirate
Oracle Span 7-8:  request => request-01
Oracle Span 1-2:  such => such
Oracle Span 24-25:  warships => warship

Missing span: armada => armada
Missing span: encircling => encircle-01
Dependencies:
1	One	_	CD	CD	_	3	num	_	_
2	such	_	JJ	JJ	_	3	amod	_	_
3	detail	_	NN	NN	_	4	nsubj	_	_
4	involves	_	VBZ	VBZ	_	0	root	_	_
5	the	_	DT	DT	_	6	det	_	_
6	pirates	_	NNS	NNS	_	8	poss	_	_
7	'	_	POS	POS	_	6	possessive	_	_
8	request	_	NN	NN	_	4	dobj	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	a	_	DT	DT	_	11	det	_	_
11	guarantee	_	NN	NN	_	9	pobj	_	_
12	that	_	IN	IN	_	17	mark	_	_
13	they	_	PRP	PRP	_	17	nsubjpass	_	_
14	would	_	MD	MD	_	17	aux	_	_
15	not	_	RB	RB	_	17	neg	_	_
16	be	_	VB	VB	_	17	auxpass	_	_
17	arrested	_	VBN	VBN	_	4	ccomp	_	_
18	or	_	CC	CC	_	17	cc	_	_
19	attacked	_	VBN	VBN	_	17	conj	_	_
20	by	_	IN	IN	_	17	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	armada	_	NN	NN	_	27	nsubj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	American	_	JJ	JJ	_	25	amod	_	_
25	warships	_	NNS	NNS	_	23	pobj	_	_
26	currently	_	RB	RB	_	27	advmod	_	_
27	encircling	_	VBG	VBG	_	20	pcomp	_	_
28	them	_	PRP	PRP	_	27	dobj	_	_
29	.	_	.	.	_	4	punct	_	_

Oracle:
(a2 / arrest-01, ARG0, a3 / armada)
(a2 / arrest-01, ARG1, p / pirate)
(a4 / attack-01, ARG0, a3 / armada)
(a4 / attack-01, ARG1, p / pirate)
(d / detail-01, mod, s / such)
(d / detail-01, quant, 1 / 1)
(e / encircle-01, ARG1, a3 / armada)
(e / encircle-01, ARG2, p / pirate)
(e / encircle-01, time, c2 / current)
(g / guarantee-01, ARG1, o / or)
(i / involve-01, ARG1, r / request-01)
(i / involve-01, ARG2, d / detail-01)
(o / or, op, a2 / arrest-01)
(o / or, op, a4 / attack-01)
(r / request-01, ARG0, p / pirate)
(r / request-01, ARG1, g / guarantee-01)
(w / warship, consist, a3 / armada)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),currently,current,false), Span(24,25,List(1),warships,warship,false), Span(18,19,List(2),attacked,attack-01,false), Span(17,18,List(3),or,or,false), Span(16,17,List(4),arrested,arrest-01,false), Span(10,11,List(5),guarantee,guarantee-01,false), Span(7,8,List(6),request,request-01,false), Span(5,6,List(7),pirates,pirate,false), Span(3,4,List(8),involves,involve-01,false), Span(2,3,List(9),detail,detail-01,false), Span(1,2,List(10),such,such,false), Span(0,1,List(11),One,1,false)),Map(2 -> attack-01, 5 -> guarantee-01, 8 -> involve-01, 7 -> pirate, 1 -> warship, 11 -> 1, 4 -> arrest-01, 6 -> request-01, 9 -> detail-01, 0 -> current, 10 -> such, 3 -> or),Map(w -> warship, s -> such, d -> detail-01, 1 -> 1, p -> pirate, g -> guarantee-01, a -> attack-01, i -> involve-01, r -> request-01, a2 -> arrest-01, c -> current, o -> or))),[Ljava.lang.String;@3605c4d3,Annotation([Ljava.lang.String;@585c13de,[Ljava.lang.String;@187eb9a8,[Ljava.lang.String;@726a6b94),Annotation([Ljava.lang.String;@6ad11a56,[Ljava.lang.String;@522b2631,[Ledu.cmu.lti.nlp.amr.Dependency;@3ff57625),Annotation([Ljava.lang.String;@1ee29c84,[Ljava.lang.String;@7c8326a4,[Ljava.lang.String;@77128dab),Annotation([Ljava.lang.String;@63429932,[Ljava.lang.String;@69ce2f62,[Ledu.cmu.lti.nlp.amr.Entity;@c9d82f9))
AMR:
(a / attack-01, ARG1, c / current)
(a2 / arrest-01, ARG0, 1 / 1)
(a2 / arrest-01, ARG1, w / warship)
(d / detail-01, mod, s / such)
(i / involve-01, ARG1, r / request-01)
(i / involve-01, ARG2, d / detail-01)
(o / or, op, a / attack-01)
(o / or, op, a2 / arrest-01)
(r / request-01, ARG0, p / pirate)
(r / request-01, ARG1, a2 / arrest-01)
(r / request-01, ARG2, g / guarantee-01)

Decoded in 257,998 microseconds
Sentence: A Kenyan maritime official stated anonymously that such negotiations are complex and involve more than the financial aspect.

NER Entity: (thing :name (name :op "Kenyan"))
NER Entity: (thing :name (name :op "Kenyan"))
Spans:
Span 5-6:  anonymously => anonymous
Span 17-18:  aspect => aspect
Span 10-11:  complex => complex
Span 12-13:  involve => involve-01
Span 1-2:  Kenyan => (country :name (name :op "Kenya"))
Span 2-3:  maritime => maritime
Span 8-9:  negotiations => negotiate-01
Span 7-8:  such => such

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 5-6:  anonymously => anonymous
Oracle Span 17-18:  aspect => aspect
Oracle Span 10-11:  complex => complex
Oracle Span 16-17:  financial => finance
Oracle Span 12-13:  involve => involve-01
Oracle Span 1-2:  Kenyan => (country :name (name :op "Kenya"))
Oracle Span 2-3:  maritime => maritime
Oracle Span 13-14:  more => more-than
Oracle Span 8-9:  negotiations => negotiate-01
Oracle Span 3-4:  official => official
Oracle Span 4-5:  stated => state-01
Oracle Span 7-8:  such => such

Missing span: stated => state-01
Missing span: and => and
Missing span: official => official
Missing span: more => more-than
Missing span: financial => finance
Dependencies:
1	A	_	DT	DT	_	4	det	_	_
2	Kenyan	_	JJ	JJ	_	4	amod	_	_
3	maritime	_	NN	NN	_	4	nn	_	_
4	official	_	NN	NN	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	anonymously	_	RB	RB	_	5	advmod	_	_
7	that	_	IN	IN	_	11	mark	_	_
8	such	_	JJ	JJ	_	9	amod	_	_
9	negotiations	_	NNS	NNS	_	11	nsubj	_	_
10	are	_	VBP	VBP	_	11	cop	_	_
11	complex	_	JJ	JJ	_	5	ccomp	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	involve	_	VBP	VBP	_	11	conj	_	_
14	more	_	RBR	RBR	_	13	advmod	_	_
15	than	_	IN	IN	_	13	prep	_	_
16	the	_	DT	DT	_	18	det	_	_
17	financial	_	JJ	JJ	_	18	amod	_	_
18	aspect	_	NN	NN	_	15	pobj	_	_
19	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c2 / complex)
(a / and, op, i / involve-01)
(a2 / aspect, mod, f / finance)
(c / country, name, n / name)
(c2 / complex, domain, n2 / negotiate-01)
(i / involve-01, ARG1, n2 / negotiate-01)
(i / involve-01, ARG2, m / more-than)
(m / more-than, op, a2 / aspect)
(n / name, op, "Kenya")
(n2 / negotiate-01, mod, s3 / such)
(o / official, mod, c / country)
(o / official, mod, m2 / maritime)
(s / state-01, ARG0, o / official)
(s / state-01, ARG1, a / and)
(s / state-01, manner, a3 / anonymous)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),aspect,aspect,false), Span(12,13,List(1),involve,involve-01,false), Span(10,11,List(2),complex,complex,false), Span(8,9,List(3),negotiations,negotiate-01,false), Span(7,8,List(4),such,such,false), Span(5,6,List(5),anonymously,anonymous,false), Span(2,3,List(6),maritime,maritime,false), Span(1,2,List(9, 8, 7),Kenyan,(country :name (name :op "Kenya")),false)),Map(2 -> complex, 5 -> anonymous, 8 -> name, 7 -> country, 1 -> involve-01, 4 -> such, 6 -> maritime, 9 -> "Kenya", 0 -> aspect, 3 -> negotiate-01),Map(n -> negotiate-01, s -> such, m -> maritime, a -> aspect, a2 -> anonymous, i -> involve-01, c -> complex, n2 -> name, c2 -> country))),[Ljava.lang.String;@6f012914,Annotation([Ljava.lang.String;@18fdb6cf,[Ljava.lang.String;@d02f8d,[Ljava.lang.String;@60baef24),Annotation([Ljava.lang.String;@61533ae,[Ljava.lang.String;@732bb66d,[Ledu.cmu.lti.nlp.amr.Dependency;@720653c2),Annotation([Ljava.lang.String;@45f24169,[Ljava.lang.String;@6ad5923a,[Ljava.lang.String;@4463d9d3),Annotation([Ljava.lang.String;@43b0ade,[Ljava.lang.String;@5395ea39,[Ledu.cmu.lti.nlp.amr.Entity;@1517f633))
AMR:
(c / complex, domain, n / negotiate-01)
(c2 / country, name, n2 / name)
(i / involve-01, ARG1, n / negotiate-01)
(i / involve-01, ARG2, a / aspect)
(m / maritime, mod, c2 / country)
(n / negotiate-01, ARG0, a2 / anonymous)
(n / negotiate-01, ARG1, m / maritime)
(n / negotiate-01, mod, s / such)
(n2 / name, op, "Kenya")

Decoded in 163,875 microseconds
Sentence: On 08 October 2008 the official stated that progress is being made and the parties are approaching an agreement.

mkDayMonthYear(08	October	2008,08,October,2008)
Spans:
Span 1-4:  08 October 2008 => (date-entity :day 8 :month 10 :year 2008)
Span 18-19:  agreement => agree-01
Span 16-17:  approaching => approach-01
Span 14-15:  parties => party
Span 8-9:  progress => progress-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 1-4:  08 October 2008 => (date-entity :day 8 :month 10 :year 2008)
Oracle Span 18-19:  agreement => agree-01
Oracle Span 12-13:  and => and
Oracle Span 16-17:  approaching => approach-02
Oracle Span 5-6:  official => official
Oracle Span 14-15:  parties => party
Oracle Span 8-9:  progress => progress-01
Oracle Span 6-7:  stated => state-01

Incorrect span: approaching => approach-01
Missing span: stated => state-01
Missing span: and => and
Missing span: approaching => approach-02
Missing span: official => official
Dependencies:
1	On	_	IN	IN	_	7	prep	_	_
2	08	_	CD	CD	_	1	pobj	_	_
3	October	_	NNP	NNP	_	2	tmod	_	_
4	2008	_	CD	CD	_	3	num	_	_
5	the	_	DT	DT	_	6	det	_	_
6	official	_	NN	NN	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	12	mark	_	_
9	progress	_	NN	NN	_	12	nsubjpass	_	_
10	is	_	VBZ	VBZ	_	12	aux	_	_
11	being	_	VBG	VBG	_	12	auxpass	_	_
12	made	_	VBN	VBN	_	7	ccomp	_	_
13	and	_	CC	CC	_	7	cc	_	_
14	the	_	DT	DT	_	15	det	_	_
15	parties	_	NNS	NNS	_	17	nsubj	_	_
16	are	_	VBP	VBP	_	17	aux	_	_
17	approaching	_	VBG	VBG	_	7	conj	_	_
18	an	_	DT	DT	_	19	det	_	_
19	agreement	_	NN	NN	_	17	dobj	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, a2 / approach-02)
(a / and, op, p / progress-01)
(a2 / approach-02, ARG0, p2 / party)
(a2 / approach-02, ARG1, a3 / agree-01)
(d / date-entity, day, 8)
(d / date-entity, month, 10)
(d / date-entity, year, 2008)
(s / state-01, ARG0, o / official)
(s / state-01, ARG1, a / and)
(s / state-01, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),agreement,agree-01,false), Span(16,17,List(1),approaching,approach-01,false), Span(14,15,List(2),parties,party,false), Span(8,9,List(3),progress,progress-01,false), Span(1,4,List(7, 6, 5, 4),08 October 2008,(date-entity :day 8 :month 10 :year 2008),false)),Map(2 -> party, 5 -> 8, 7 -> 2008, 1 -> approach-01, 4 -> date-entity, 6 -> 10, 0 -> agree-01, 3 -> progress-01),Map(2 -> 2008, 8 -> 8, p2 -> progress-01, d -> date-entity, 1 -> 10, p -> party, a -> agree-01, a2 -> approach-01))),[Ljava.lang.String;@4fe01803,Annotation([Ljava.lang.String;@13d186db,[Ljava.lang.String;@6f6962ba,[Ljava.lang.String;@4565a70a),Annotation([Ljava.lang.String;@a0a9fa5,[Ljava.lang.String;@15723761,[Ledu.cmu.lti.nlp.amr.Dependency;@312afbc7),Annotation([Ljava.lang.String;@599f571f,[Ljava.lang.String;@7b60c3e,[Ljava.lang.String;@3fbfa96),Annotation([Ljava.lang.String;@6569dded,[Ljava.lang.String;@466d49f0,[Ledu.cmu.lti.nlp.amr.Entity;@710d7aff))
AMR:
(a / agree-01, ARG1, d / date-entity)
(a2 / approach-01, ARG0, p / party)
(a2 / approach-01, ARG1, a / agree-01)
(a2 / approach-01, ARG2, p2 / progress-01)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2008)

Decoded in 159,922 microseconds
Sentence: The pirates initially requested 35 million U.S. dollars and then reduced their request to 20 million U.S. dollars.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 17-18:  dollars => (monetary-quantity :unit dollar)
Span 7-8:  dollars => (monetary-quantity :unit dollar)
Span 2-3:  initially => initial
Span 1-2:  pirates => pirate
Span 10-11:  reduced => reduce-01
Span 12-13:  request => request-01
Span 3-4:  requested => request-01
Span 9-10:  then => then

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 7-8:  dollars => (monetary-quantity :unit dollar)
Oracle Span 17-18:  dollars => (monetary-quantity :unit dollar)
Oracle Span 2-3:  initially => initial
Oracle Span 1-2:  pirates => pirate
Oracle Span 10-11:  reduced => reduce-01
Oracle Span 3-4:  requested => request-01
Oracle Span 9-10:  then => then
Oracle Span 6-7:  U.S. => (country :name (name :op "U.S."))

Extra span: request => request-01
Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	pirates	_	NNS	NNS	_	4	nsubj	_	_
3	initially	_	RB	RB	_	4	advmod	_	_
4	requested	_	VBD	VBD	_	0	root	_	_
5	35	_	CD	CD	_	6	number	_	_
6	million	_	CD	CD	_	8	num	_	_
7	U.S.	_	NNP	NNP	_	8	nn	_	_
8	dollars	_	NNS	NNS	_	4	dobj	_	_
9	and	_	CC	CC	_	4	cc	_	_
10	then	_	RB	RB	_	11	advmod	_	_
11	reduced	_	VBD	VBD	_	4	conj	_	_
12	their	_	PRP$	PRP$	_	13	poss	_	_
13	request	_	NN	NN	_	11	dobj	_	_
14	to	_	TO	TO	_	11	prep	_	_
15	20	_	CD	CD	_	16	number	_	_
16	million	_	CD	CD	_	18	num	_	_
17	U.S.	_	NNP	NNP	_	18	nn	_	_
18	dollars	_	NNS	NNS	_	14	pobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, r / request-01)
(a / and, op, r2 / reduce-01)
(c / country, name, n / name)
(d / dollar, mod, c / country)
(d2 / dollar, mod, c / country)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "U.S.")
(r / request-01, ARG0, p / pirate)
(r / request-01, ARG1, m / monetary-quantity)
(r / request-01, time, i / initial)
(r2 / reduce-01, ARG0, p / pirate)
(r2 / reduce-01, ARG1, r / request-01)
(r2 / reduce-01, ARG4, m2 / monetary-quantity)
(r2 / reduce-01, time, t / then)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(12,13,List(2),request,request-01,false), Span(10,11,List(3),reduced,reduce-01,false), Span(9,10,List(4),then,then,false), Span(7,8,List(6, 5),dollars,(monetary-quantity :unit dollar),false), Span(3,4,List(7),requested,request-01,false), Span(2,3,List(8),initially,initial,false), Span(1,2,List(9),pirates,pirate,false)),Map(2 -> request-01, 5 -> monetary-quantity, 8 -> initial, 7 -> request-01, 1 -> dollar, 4 -> then, 6 -> dollar, 9 -> pirate, 0 -> monetary-quantity, 3 -> reduce-01),Map(r3 -> request-01, t -> then, m2 -> monetary-quantity, d -> dollar, m -> monetary-quantity, p -> pirate, r2 -> reduce-01, d2 -> dollar, i -> initial, r -> request-01))),[Ljava.lang.String;@2d7e1102,Annotation([Ljava.lang.String;@65327f5,[Ljava.lang.String;@2adddc06,[Ljava.lang.String;@301d8120),Annotation([Ljava.lang.String;@6d367020,[Ljava.lang.String;@72458efc,[Ledu.cmu.lti.nlp.amr.Dependency;@36bc415e),Annotation([Ljava.lang.String;@6a74d228,[Ljava.lang.String;@349d0836,[Ljava.lang.String;@6a714237),Annotation([Ljava.lang.String;@3e134896,[Ljava.lang.String;@72ba28ee,[Ledu.cmu.lti.nlp.amr.Entity;@2e3a5237))
AMR:
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, unit, d2 / dollar)
(r / request-01, ARG1, m / monetary-quantity)
(r2 / reduce-01, ARG0, p / pirate)
(r2 / reduce-01, ARG1, r / request-01)
(r2 / reduce-01, time, t / then)
(r3 / request-01, ARG0, p / pirate)
(r3 / request-01, ARG1, m2 / monetary-quantity)
(r3 / request-01, time, i / initial)

Decoded in 81,383 microseconds
Sentence: The pirates have consistently expressed willingness to negotiate the financial figures.

Spans:
Span 3-4:  consistently => consistent
Span 4-5:  expressed => express-01
Span 10-11:  figures => figure
Span 7-8:  negotiate => negotiate-01
Span 1-2:  pirates => pirate
Span 5-6:  willingness => will-02

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 3-4:  consistently => consistent
Oracle Span 4-5:  expressed => express-01
Oracle Span 10-11:  figures => figure
Oracle Span 9-10:  financial => finance
Oracle Span 7-8:  negotiate => negotiate-01
Oracle Span 1-2:  pirates => pirate
Oracle Span 5-6:  willingness => will-02

Missing span: financial => finance
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	pirates	_	NNS	NNS	_	5	nsubj	_	_
3	have	_	VBP	VBP	_	5	aux	_	_
4	consistently	_	RB	RB	_	5	advmod	_	_
5	expressed	_	VBN	VBN	_	0	root	_	_
6	willingness	_	NN	NN	_	5	dobj	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	negotiate	_	VB	VB	_	5	vmod	_	_
9	the	_	DT	DT	_	11	det	_	_
10	financial	_	JJ	JJ	_	11	amod	_	_
11	figures	_	NNS	NNS	_	8	dobj	_	_
12	.	_	.	.	_	5	punct	_	_

Oracle:
(e / express-01, ARG0, p / pirate)
(e / express-01, ARG1, w / will-02)
(e / express-01, manner, c / consistent)
(f / figure, mod, f2 / finance)
(n / negotiate-01, ARG0, p / pirate)
(n / negotiate-01, ARG2, f / figure)
(w / will-02, ARG0, p / pirate)
(w / will-02, ARG1, n / negotiate-01)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),figures,figure,false), Span(7,8,List(1),negotiate,negotiate-01,false), Span(5,6,List(2),willingness,will-02,false), Span(4,5,List(3),expressed,express-01,false), Span(3,4,List(4),consistently,consistent,false), Span(1,2,List(5),pirates,pirate,false)),Map(2 -> will-02, 5 -> pirate, 1 -> negotiate-01, 4 -> consistent, 0 -> figure, 3 -> express-01),Map(e -> express-01, w -> will-02, n -> negotiate-01, p -> pirate, c -> consistent, f -> figure))),[Ljava.lang.String;@4ebadd3d,Annotation([Ljava.lang.String;@6ac97b84,[Ljava.lang.String;@4917d36b,[Ljava.lang.String;@35c09b94),Annotation([Ljava.lang.String;@2d0bfb24,[Ljava.lang.String;@c3fa05a,[Ledu.cmu.lti.nlp.amr.Dependency;@7b44b63d),Annotation([Ljava.lang.String;@4a699efa,[Ljava.lang.String;@38499e48,[Ljava.lang.String;@4905c46b),Annotation([Ljava.lang.String;@17ae7628,[Ljava.lang.String;@1136b469,[Ledu.cmu.lti.nlp.amr.Entity;@6579c3d9))
AMR:
(e / express-01, ARG0, p / pirate)
(e / express-01, ARG1, w / will-02)
(e / express-01, manner, c / consistent)
(n / negotiate-01, ARG1, f / figure)
(w / will-02, ARG1, n / negotiate-01)

Decoded in 47,562 microseconds
Sentence: More than 25 ships have been hijacked in 2008 off the Somalia coast with a typical ransom of between 1 and 2 million U.S. dollars.

NER Entity: (country :name (name :op "Somalia"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "Somalia"))
Spans:
Span 8-9:  2008 => (date-entity :year 2008)
Span 12-13:  coast => coast
Span 24-25:  dollars => (monetary-quantity :unit dollar)
Span 6-7:  hijacked => hijack-01
Span 0-1:  More => more-than
Span 16-17:  ransom => ransom
Span 3-4:  ships => ship
Span 11-12:  Somalia => (country :name (name :op "Somalia"))

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 19-20:  1 => 1
Oracle Span 8-9:  2008 => (date-entity :year 2008)
Oracle Span 2-3:  25 => 25
Oracle Span 18-19:  between => between
Oracle Span 12-13:  coast => coast
Oracle Span 24-25:  dollars => (monetary-quantity :unit dollar)
Oracle Span 6-7:  hijacked => hijack-01
Oracle Span 0-1:  More => more-than
Oracle Span 9-10:  off => off
Oracle Span 16-17:  ransom => ransom-00
Oracle Span 3-4:  ships => ship
Oracle Span 11-12:  Somalia => (country :name (name :op "Somalia"))
Oracle Span 15-16:  typical => typical
Oracle Span 23-24:  U.S. => (country :name (name :op "U.S."))

Incorrect span: ransom => ransom
Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: ransom => ransom-00
Missing span: typical => typical
Missing span: between => between
Missing span: 1 => 1
Missing span: off => off
Missing span: 25 => 25
Dependencies:
1	More	_	JJR	JJR	_	2	mwe	_	_
2	than	_	IN	IN	_	3	quantmod	_	_
3	25	_	CD	CD	_	4	num	_	_
4	ships	_	NNS	NNS	_	7	nsubjpass	_	_
5	have	_	VBP	VBP	_	7	aux	_	_
6	been	_	VBN	VBN	_	7	auxpass	_	_
7	hijacked	_	VBN	VBN	_	0	root	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	2008	_	CD	CD	_	8	pobj	_	_
10	off	_	IN	IN	_	7	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	Somalia	_	NNP	NNP	_	13	nn	_	_
13	coast	_	NN	NN	_	10	pobj	_	_
14	with	_	IN	IN	_	7	prep	_	_
15	a	_	DT	DT	_	17	det	_	_
16	typical	_	JJ	JJ	_	17	amod	_	_
17	ransom	_	NN	NN	_	14	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	between	_	IN	IN	_	20	amod	_	_
20	1	_	CD	CD	_	25	num	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	2	_	CD	CD	_	23	num	_	_
23	million	_	CD	CD	_	20	conj	_	_
24	U.S.	_	NNP	NNP	_	25	nn	_	_
25	dollars	_	NNS	NNS	_	18	pobj	_	_
26	.	_	.	.	_	7	punct	_	_

Oracle:
(b / between, op, m3 / monetary-quantity)
(c / country, name, n / name)
(c3 / coast, mod, c4 / country)
(c4 / country, name, n3 / name)
(d / date-entity, year, 2008)
(d3 / dollar, mod, c / country)
(h / hijack-01, ARG1, s / ship)
(h / hijack-01, location, o / off)
(h / hijack-01, time, d / date-entity)
(m3 / monetary-quantity, unit, d3 / dollar)
(m4 / more-than, op, 2 / 25)
(n / name, op, "U.S.")
(n3 / name, op, "Somalia")
(o / off, op, c3 / coast)
(r / ransom-00, ARG1, b / between)
(r / ransom-00, ARG2, h / hijack-01)
(r / ransom-00, ARG3, s / ship)
(r / ransom-00, mod, t / typical)
(s / ship, quant, m4 / more-than)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(16,17,List(2),ransom,ransom,false), Span(12,13,List(3),coast,coast,false), Span(11,12,List(6, 5, 4),Somalia,(country :name (name :op "Somalia")),false), Span(8,9,List(8, 7),2008,(date-entity :year 2008),false), Span(6,7,List(9),hijacked,hijack-01,false), Span(3,4,List(10),ships,ship,false), Span(0,1,List(11),More,more-than,false)),Map(2 -> ransom, 5 -> name, 8 -> 2008, 7 -> date-entity, 1 -> dollar, 11 -> more-than, 4 -> country, 6 -> "Somalia", 9 -> hijack-01, 0 -> monetary-quantity, 10 -> ship, 3 -> coast),Map(n -> name, h -> hijack-01, 2 -> 2008, m2 -> more-than, s -> ship, d -> dollar, m -> monetary-quantity, d2 -> date-entity, r -> ransom, c -> coast, c2 -> country))),[Ljava.lang.String;@2b87581,Annotation([Ljava.lang.String;@66434cc8,[Ljava.lang.String;@42f22995,[Ljava.lang.String;@693e4d19),Annotation([Ljava.lang.String;@286b39c2,[Ljava.lang.String;@5432050b,[Ledu.cmu.lti.nlp.amr.Dependency;@75f2099),Annotation([Ljava.lang.String;@1c12f3ee,[Ljava.lang.String;@6d467c87,[Ljava.lang.String;@29182679),Annotation([Ljava.lang.String;@57bd802b,[Ljava.lang.String;@5cbb84b1,[Ledu.cmu.lti.nlp.amr.Entity;@2c779e5))
AMR:
(c / coast, location, c2 / country)
(c2 / country, name, n / name)
(d2 / date-entity, year, 2 / 2008)
(h / hijack-01, ARG0, c / coast)
(h / hijack-01, ARG1, s / ship)
(h / hijack-01, ARG2, m / monetary-quantity)
(h / hijack-01, ARG3, r / ransom)
(h / hijack-01, time, d2 / date-entity)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Somalia")
(s / ship, quant, m2 / more-than)

Decoded in 159,240 microseconds
Sentence: The pirates aboard the Ukrainian ship have stated that upon receipt of payment in American dollars and preferably in 100 dollar bills the ship, its cargo and the 20 sailors on board will be released.

NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 19-20:  100 => 100
Span 26-27:  cargo => cargo
Span 20-21:  dollar => (monetary-quantity :unit dollar)
Span 15-16:  dollars => (monetary-quantity :unit dollar)
Span 1-2:  pirates => pirate
Span 35-36:  released => release-01
Span 30-31:  sailors => (person :ARG0-of sail-01)
Span 4-5:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 19-20:  100 => 100
Oracle Span 29-30:  20 => 20
Oracle Span 16-17:  and => and
Oracle Span 27-28:  and => and
Oracle Span 21-22:  bills => bill
Oracle Span 32-33:  board => board-01
Oracle Span 26-27:  cargo => cargo
Oracle Span 20-21:  dollar => dollar
Oracle Span 15-16:  dollars => (monetary-quantity :unit dollar)
Oracle Span 1-2:  pirates => pirate
Oracle Span 17-18:  preferably => prefer-01
Oracle Span 10-11:  receipt => receive-01
Oracle Span 35-36:  released => release-01
Oracle Span 30-31:  sailors => (person :ARG0-of sail-01)
Oracle Span 5-6:  ship => ship
Oracle Span 23-24:  ship => ship
Oracle Span 7-8:  stated => state-01
Oracle Span 4-5:  Ukrainian => (country :name (name :op "Ukraine"))

Incorrect span: dollar => (monetary-quantity :unit dollar)
Missing span: stated => state-01
Missing span: and => and
Missing span: bills => bill
Missing span: dollar => dollar
Missing span: and => and
Missing span: 20 => 20
Missing span: board => board-01
Missing span: ship => ship
Missing span: ship => ship
Missing span: receipt => receive-01
Missing span: preferably => prefer-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	pirates	_	NNS	NNS	_	8	nsubj	_	_
3	aboard	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Ukrainian	_	JJ	JJ	_	6	amod	_	_
6	ship	_	NN	NN	_	3	pobj	_	_
7	have	_	VBP	VBP	_	8	aux	_	_
8	stated	_	VBN	VBN	_	0	root	_	_
9	that	_	IN	IN	_	36	mark	_	_
10	upon	_	IN	IN	_	36	prep	_	_
11	receipt	_	NN	NN	_	10	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	payment	_	NN	NN	_	12	pobj	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	American	_	JJ	JJ	_	16	amod	_	_
16	dollars	_	NNS	NNS	_	14	pobj	_	_
17	and	_	CC	CC	_	10	cc	_	_
18	preferably	_	RB	RB	_	19	advmod	_	_
19	in	_	IN	IN	_	10	conj	_	_
20	100	_	CD	CD	_	22	num	_	_
21	dollar	_	NN	NN	_	22	nn	_	_
22	bills	_	NNS	NNS	_	19	pobj	_	_
23	the	_	DT	DT	_	24	det	_	_
24	ship	_	NN	NN	_	36	nsubjpass	_	_
25	,	_	,	,	_	24	punct	_	_
26	its	_	PRP$	PRP$	_	27	poss	_	_
27	cargo	_	NN	NN	_	24	conj	_	_
28	and	_	CC	CC	_	24	cc	_	_
29	the	_	DT	DT	_	31	det	_	_
30	20	_	CD	CD	_	31	num	_	_
31	sailors	_	NNS	NNS	_	24	conj	_	_
32	on	_	IN	IN	_	31	prep	_	_
33	board	_	NN	NN	_	32	pobj	_	_
34	will	_	MD	MD	_	36	aux	_	_
35	be	_	VB	VB	_	36	auxpass	_	_
36	released	_	VBN	VBN	_	8	ccomp	_	_
37	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, c2 / cargo)
(a / and, op, p2 / person)
(a / and, op, s4 / ship)
(a2 / and, op, d2 / dollar)
(a2 / and, op, p5 / prefer-01)
(b2 / board-01, ARG0, c2 / cargo)
(b2 / board-01, ARG0, p2 / person)
(b2 / board-01, ARG1, s4 / ship)
(b3 / bill, mod, m2 / monetary-quantity)
(c / country, name, n / name)
(c2 / cargo, poss, s4 / ship)
(m2 / monetary-quantity, quant, 1 / 100)
(m2 / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Ukraine")
(p2 / person, quant, 2 / 20)
(p5 / prefer-01, ARG0, p / pirate)
(p5 / prefer-01, ARG1, b3 / bill)
(r / release-01, ARG1, a / and)
(r / release-01, time, r2 / receive-01)
(s / state-01, ARG0, p / pirate)
(s / state-01, ARG1, r / release-01)
(s2 / ship, mod, c / country)
(s3 / sail-01, ARG0, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),released,release-01,false), Span(30,31,List(2, 1),sailors,(person :ARG0-of sail-01),false), Span(26,27,List(3),cargo,cargo,false), Span(20,21,List(5, 4),dollar,(monetary-quantity :unit dollar),false), Span(19,20,List(6),100,100,false), Span(15,16,List(8, 7),dollars,(monetary-quantity :unit dollar),false), Span(4,5,List(11, 10, 9),Ukrainian,(country :name (name :op "Ukraine")),false), Span(1,2,List(12),pirates,pirate,false)),Map(2 -> sail-01, 5 -> dollar, 12 -> pirate, 8 -> dollar, 7 -> monetary-quantity, 1 -> person, 4 -> monetary-quantity, 11 -> "Ukraine", 6 -> 100, 0 -> release-01, 9 -> country, 3 -> cargo, 10 -> name),Map(n -> name, m2 -> monetary-quantity, p2 -> pirate, s -> sail-01, d -> dollar, m -> monetary-quantity, 1 -> 100, p -> person, d2 -> dollar, r -> release-01, c -> cargo, c2 -> country))),[Ljava.lang.String;@6a84bc2a,Annotation([Ljava.lang.String;@5183d589,[Ljava.lang.String;@511d5d04,[Ljava.lang.String;@682c1e93),Annotation([Ljava.lang.String;@27068a50,[Ljava.lang.String;@68e62ca4,[Ledu.cmu.lti.nlp.amr.Dependency;@5328a9c1),Annotation([Ljava.lang.String;@5b78fdb1,[Ljava.lang.String;@48bfb884,[Ljava.lang.String;@11653e3b),Annotation([Ljava.lang.String;@715fb77,[Ljava.lang.String;@1b9c1b51,[Ledu.cmu.lti.nlp.amr.Entity;@2e52fb3e))
AMR:
(c2 / country, mod, c / cargo)
(c2 / country, name, n / name)
(m / monetary-quantity, quant, 1 / 100)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, op, r / release-01)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Ukraine")
(p2 / pirate, poss, m2 / monetary-quantity)
(r / release-01, ARG0, 1 / 100)
(r / release-01, ARG1, p / person)
(r / release-01, location, c2 / country)
(s / sail-01, ARG0, p / person)

Decoded in 291,964 microseconds
Sentence: The original country of destination for the arms shipment aboard the Ukrainian ship is being questioned.

NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 2-3:  country => country
Span 4-5:  destination => destination
Span 1-2:  original => original
Span 15-16:  questioned => question-01
Span 11-12:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 7-8:  arms => arm
Oracle Span 2-3:  country => country
Oracle Span 4-5:  destination => destination
Oracle Span 1-2:  original => original
Oracle Span 15-16:  questioned => question-01
Oracle Span 12-13:  ship => ship-01
Oracle Span 8-9:  shipment => ship
Oracle Span 11-12:  Ukrainian => (country :name (name :op "Ukraine"))

Missing span: ship => ship-01
Missing span: arms => arm
Missing span: shipment => ship
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	original	_	JJ	JJ	_	3	amod	_	_
3	country	_	NN	NN	_	16	nsubjpass	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	destination	_	NN	NN	_	4	pobj	_	_
6	for	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	9	det	_	_
8	arms	_	NNS	NNS	_	9	nn	_	_
9	shipment	_	NN	NN	_	6	pobj	_	_
10	aboard	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	Ukrainian	_	JJ	JJ	_	13	amod	_	_
13	ship	_	NN	NN	_	10	pobj	_	_
14	is	_	VBZ	VBZ	_	16	aux	_	_
15	being	_	VBG	VBG	_	16	auxpass	_	_
16	questioned	_	VBN	VBN	_	0	root	_	_
17	.	_	.	.	_	16	punct	_	_

Oracle:
(c / country, mod, d / destination)
(c / country, mod, o / original)
(c2 / country, name, n / name)
(n / name, op, "Ukraine")
(q / question-01, ARG1, c / country)
(s / ship-01, ARG1, a / arm)
(s / ship-01, ARG2, c / country)
(s2 / ship, mod, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),questioned,question-01,false), Span(11,12,List(3, 2, 1),Ukrainian,(country :name (name :op "Ukraine")),false), Span(4,5,List(4),destination,destination,false), Span(2,3,List(5),country,country,false), Span(1,2,List(6),original,original,false)),Map(2 -> name, 5 -> country, 1 -> country, 4 -> destination, 6 -> original, 0 -> question-01, 3 -> "Ukraine"),Map(n -> name, q -> question-01, d -> destination, c -> country, o -> original, c2 -> country))),[Ljava.lang.String;@16fe9c29,Annotation([Ljava.lang.String;@3e9803c2,[Ljava.lang.String;@4525d1d3,[Ljava.lang.String;@7c974942),Annotation([Ljava.lang.String;@1eea9d2d,[Ljava.lang.String;@60921b21,[Ledu.cmu.lti.nlp.amr.Dependency;@bd2f5a9),Annotation([Ljava.lang.String;@4d4960c8,[Ljava.lang.String;@7808fb9,[Ljava.lang.String;@773bd77b),Annotation([Ljava.lang.String;@6b580b88,[Ljava.lang.String;@6d91790b,[Ledu.cmu.lti.nlp.amr.Entity;@6e6fce47))
AMR:
(c / country, name, n / name)
(c2 / country, mod, o / original)
(d / destination, consist, c2 / country)
(n / name, op, "Ukraine")
(q / question-01, ARG1, c / country)
(q / question-01, ARG2, c2 / country)

Decoded in 73,597 microseconds
Sentence: Shortly after the freighter was hijacked on 25 September 2008 the Kenyan government claimed that the weapons on board were being shipped for Kenya's military.

mkDayMonthYear(25	September	2008,25,September,2008)
NER Entity: (thing :name (name :op "Kenyan"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (thing :name (name :op "Kenyan"))
Spans:
Span 7-10:  25 September 2008 => (date-entity :day 25 :month 9 :year 2008)
Span 1-2:  after => after
Span 13-14:  claimed => claim-01
Span 5-6:  hijacked => hijack-01
Span 23-24:  Kenya => (country :name (name :op "Kenya"))
Span 11-12:  Kenyan => (country :name (name :op "Kenya"))
Span 21-22:  shipped => ship-01
Span 0-1:  Shortly => shortly

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 7-10:  25 September 2008 => (date-entity :day 25 :month 9 :year 2008)
Oracle Span 1-2:  after => after
Oracle Span 18-19:  board => board-01
Oracle Span 13-14:  claimed => claim-01
Oracle Span 3-4:  freighter => freighter
Oracle Span 12-13:  government => (government-organization :ARG0-of govern-01)
Oracle Span 5-6:  hijacked => hijack-01
Oracle Span 23-24:  Kenya => (country :name (name :op "Kenya"))
Oracle Span 25-26:  military => military
Oracle Span 21-22:  shipped => ship-01
Oracle Span 0-1:  Shortly => short
Oracle Span 16-17:  weapons => weapon

Extra span: Kenyan => (country :name (name :op "Kenya"))
Incorrect span: Shortly => shortly
Missing span: freighter => freighter
Missing span: military => military
Missing span: weapons => weapon
Missing span: board => board-01
Missing span: Shortly => short
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Shortly	_	RB	RB	_	14	advmod	_	_
2	after	_	IN	IN	_	6	mark	_	_
3	the	_	DT	DT	_	4	det	_	_
4	freighter	_	NN	NN	_	6	nsubjpass	_	_
5	was	_	VBD	VBD	_	6	auxpass	_	_
6	hijacked	_	VBN	VBN	_	1	dep	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	25	_	CD	CD	_	7	pobj	_	_
9	September	_	NNP	NNP	_	6	tmod	_	_
10	2008	_	CD	CD	_	9	num	_	_
11	the	_	DT	DT	_	13	det	_	_
12	Kenyan	_	JJ	JJ	_	13	amod	_	_
13	government	_	NN	NN	_	14	nsubj	_	_
14	claimed	_	VBD	VBD	_	0	root	_	_
15	that	_	IN	IN	_	22	mark	_	_
16	the	_	DT	DT	_	17	det	_	_
17	weapons	_	NNS	NNS	_	22	nsubjpass	_	_
18	on	_	IN	IN	_	17	prep	_	_
19	board	_	NN	NN	_	18	pobj	_	_
20	were	_	VBD	VBD	_	22	aux	_	_
21	being	_	VBG	VBG	_	22	auxpass	_	_
22	shipped	_	VBN	VBN	_	14	ccomp	_	_
23	for	_	IN	IN	_	22	prep	_	_
24	Kenya	_	NNP	NNP	_	26	poss	_	_
25	's	_	POS	POS	_	24	possessive	_	_
26	military	_	NN	NN	_	23	pobj	_	_
27	.	_	.	.	_	14	punct	_	_

Oracle:
(a / after, mod, s2 / short)
(a / after, op, h / hijack-01)
(b / board-01, ARG0, w / weapon)
(c / claim-01, ARG0, g / government-organization)
(c / claim-01, ARG1, s / ship-01)
(c / claim-01, time, a / after)
(c2 / country, name, n / name)
(d / date-entity, day, 25)
(d / date-entity, month, 9)
(d / date-entity, year, 2008)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(h / hijack-01, ARG1, f / freighter)
(h / hijack-01, time, d / date-entity)
(m / military, poss, c2 / country)
(n / name, op, "Kenya")
(s / ship-01, ARG1, w / weapon)
(s / ship-01, ARG2, m / military)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(2, 1, 0),Kenya,(country :name (name :op "Kenya")),false), Span(21,22,List(3),shipped,ship-01,false), Span(13,14,List(4),claimed,claim-01,false), Span(11,12,List(7, 6, 5),Kenyan,(country :name (name :op "Kenya")),false), Span(7,10,List(11, 10, 9, 8),25 September 2008,(date-entity :day 25 :month 9 :year 2008),false), Span(5,6,List(12),hijacked,hijack-01,false), Span(1,2,List(13),after,after,false), Span(0,1,List(14),Shortly,shortly,false)),Map(2 -> "Kenya", 5 -> country, 12 -> hijack-01, 8 -> date-entity, 7 -> "Kenya", 1 -> name, 4 -> claim-01, 11 -> 2008, 14 -> shortly, 6 -> name, 0 -> country, 9 -> 25, 3 -> ship-01, 10 -> 9, 13 -> after),Map(n -> name, h -> hijack-01, 2 -> 25, s2 -> shortly, s -> ship-01, d -> date-entity, c3 -> country, a -> after, c -> country, 9 -> 9, 22 -> 2008, c2 -> claim-01, n2 -> name))),[Ljava.lang.String;@47c64cfe,Annotation([Ljava.lang.String;@6ce90bc5,[Ljava.lang.String;@a567e72,[Ljava.lang.String;@1a5b8489),Annotation([Ljava.lang.String;@6f8f8a80,[Ljava.lang.String;@4b1c0397,[Ledu.cmu.lti.nlp.amr.Dependency;@72805168),Annotation([Ljava.lang.String;@34b9fc7d,[Ljava.lang.String;@27f1bbe0,[Ljava.lang.String;@cda0432),Annotation([Ljava.lang.String;@7c211fd0,[Ljava.lang.String;@7004e3d,[Ledu.cmu.lti.nlp.amr.Entity;@2d84cb86))
AMR:
(a / after, op, h / hijack-01)
(c / country, name, n / name)
(c2 / claim-01, ARG1, s / ship-01)
(c2 / claim-01, purpose, h / hijack-01)
(c3 / country, name, n2 / name)
(d / date-entity, day, 2 / 25)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 22 / 2008)
(h / hijack-01, ARG1, s2 / shortly)
(h / hijack-01, time, d / date-entity)
(n / name, op, "Kenya")
(n2 / name, op, "Kenya")
(s / ship-01, ARG0, c / country)
(s / ship-01, ARG1, c3 / country)

Decoded in 282,698 microseconds
Sentence: The ship was en route to Kenya's main port of Mombasa.

NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Mombasa"))
NER Entity: (country :name (name :op "Kenya"))
Spans:
Span 6-7:  Kenya => (country :name (name :op "Kenya"))
Span 8-9:  main => main
Span 9-10:  port => port
Span 4-5:  route => route

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  Kenya => (country :name (name :op "Kenya"))
Oracle Span 8-9:  main => main
Oracle Span 11-12:  Mombasa => (name :op "Mombasa")
Oracle Span 9-10:  port => port
Oracle Span 4-5:  route => route
Oracle Span 1-2:  ship => ship

Missing span: Mombasa => (name :op "Mombasa")
Missing span: ship => ship
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	ship	_	NN	NN	_	3	nsubj	_	_
3	was	_	VBD	VBD	_	0	root	_	_
4	en	_	IN	IN	_	3	advmod	_	_
5	route	_	NN	NN	_	4	dep	_	_
6	to	_	TO	TO	_	3	prep	_	_
7	Kenya	_	NNP	NNP	_	10	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	main	_	JJ	JJ	_	10	amod	_	_
10	port	_	NN	NN	_	6	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	Mombasa	_	NNP	NNP	_	11	pobj	_	_
13	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n2 / name)
(n / name, op, "Mombasa")
(n2 / name, op, "Kenya")
(p / port, mod, m / main)
(p / port, name, n / name)
(p / port, poss, c / country)
(r / route, direction, p / port)
(s2 / ship, path, r / route)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),port,port,false), Span(8,9,List(1),main,main,false), Span(6,7,List(4, 3, 2),Kenya,(country :name (name :op "Kenya")),false), Span(4,5,List(5),route,route,false)),Map(2 -> country, 5 -> route, 1 -> main, 4 -> "Kenya", 0 -> port, 3 -> name),Map(n -> name, m -> main, p -> port, r -> route, c -> country))),[Ljava.lang.String;@71a3a190,Annotation([Ljava.lang.String;@588ffeb,[Ljava.lang.String;@7c28c1,[Ljava.lang.String;@baf1bb3),Annotation([Ljava.lang.String;@67ec8477,[Ljava.lang.String;@25d958c6,[Ledu.cmu.lti.nlp.amr.Dependency;@4482469c),Annotation([Ljava.lang.String;@3703bf3c,[Ljava.lang.String;@34cf5a97,[Ljava.lang.String;@5b3f3ba0),Annotation([Ljava.lang.String;@ddf20fd,[Ljava.lang.String;@278f8425,[Ledu.cmu.lti.nlp.amr.Entity;@695a69a1))
AMR:
(c / country, name, n / name)
(n / name, op, "Kenya")
(p / port, mod, m / main)
(p / port, poss, c / country)
(r / route, op, p / port)

Decoded in 27,609 microseconds
Sentence: The weapons on board the ship included 33 T-72 tanks, 150 grenade launchers, 6 anti-aircraft guns and a large quantity of ammunition.

Spans:
Span 13-14:  150 => 150
Span 7-8:  33 => 33
Span 20-21:  aircraft => aircraft
Span 27-28:  ammunition => ammunition
Span 21-22:  guns => gun
Span 24-25:  large => large
Span 15-16:  launchers => launch-01
Span 25-26:  quantity => quantity
Span 11-12:  tanks => tank

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 13-14:  150 => 150
Oracle Span 7-8:  33 => 33
Oracle Span 17-18:  6 => 6
Oracle Span 20-21:  aircraft => aircraft
Oracle Span 27-28:  ammunition => ammunition
Oracle Span 22-23:  and => and
Oracle Span 18-19:  anti => counter-01
Oracle Span 3-4:  board => board-01
Oracle Span 14-15:  grenade => grenade
Oracle Span 21-22:  guns => gun
Oracle Span 6-7:  included => include-01
Oracle Span 24-25:  large => large
Oracle Span 15-16:  launchers => launch-01
Oracle Span 25-26:  quantity => quantity
Oracle Span 5-6:  ship => ship
Oracle Span 8-9:  T => (name :op "T-72")
Oracle Span 11-12:  tanks => tank
Oracle Span 1-2:  weapons => weapon

Missing span: T => (name :op "T-72")
Missing span: included => include-01
Missing span: weapons => weapon
Missing span: board => board-01
Missing span: ship => ship
Missing span: and => and
Missing span: anti => counter-01
Missing span: 6 => 6
Missing span: grenade => grenade
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	weapons	_	NNS	NNS	_	7	nsubj	_	_
3	on	_	IN	IN	_	2	prep	_	_
4	board	_	NN	NN	_	3	pobj	_	_
5	the	_	DT	DT	_	6	det	_	_
6	ship	_	NN	NN	_	4	dep	_	_
7	included	_	VBD	VBD	_	0	root	_	_
8	33	_	CD	CD	_	10	num	_	_
9	T-72	_	NN	NN	_	10	nn	_	_
10	tanks	_	NNS	NNS	_	7	dobj	_	_
11	,	_	,	,	_	10	punct	_	_
12	150	_	CD	CD	_	14	num	_	_
13	grenade	_	JJ	JJ	_	14	amod	_	_
14	launchers	_	NNS	NNS	_	10	conj	_	_
15	,	_	,	,	_	10	punct	_	_
16	6	_	CD	CD	_	18	num	_	_
17	anti-aircraft	_	JJ	JJ	_	18	amod	_	_
18	guns	_	NNS	NNS	_	10	conj	_	_
19	and	_	CC	CC	_	10	cc	_	_
20	a	_	DT	DT	_	22	det	_	_
21	large	_	JJ	JJ	_	22	amod	_	_
22	quantity	_	NN	NN	_	10	conj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	ammunition	_	NN	NN	_	23	pobj	_	_
25	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, a3 / ammunition)
(a / and, op, g2 / gun)
(a / and, op, t / tank)
(a3 / ammunition, quant, q / quantity)
(b / board-01, ARG0, w / weapon)
(b / board-01, ARG1, s / ship)
(c / counter-01, ARG0, g2 / gun)
(c / counter-01, ARG1, a2 / aircraft)
(g2 / gun, quant, 6 / 6)
(i / include-01, ARG1, a / and)
(i / include-01, ARG2, w / weapon)
(l / launch-01, ARG1, g / grenade)
(n / name, op, "T-72")
(q / quantity, mod, l2 / large)
(t / tank, name, n / name)
(t / tank, quant, 3 / 33)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),ammunition,ammunition,false), Span(25,26,List(1),quantity,quantity,false), Span(24,25,List(2),large,large,false), Span(21,22,List(3),guns,gun,false), Span(20,21,List(4),aircraft,aircraft,false), Span(15,16,List(5),launchers,launch-01,false), Span(13,14,List(6),150,150,false), Span(11,12,List(7),tanks,tank,false), Span(7,8,List(8),33,33,false)),Map(2 -> large, 5 -> launch-01, 8 -> 33, 7 -> tank, 1 -> quantity, 4 -> aircraft, 6 -> 150, 0 -> ammunition, 3 -> gun),Map(q -> quantity, t -> tank, 1 -> 150, g -> gun, a -> ammunition, l2 -> launch-01, a2 -> aircraft, l -> large, 3 -> 33))),[Ljava.lang.String;@4b1abd11,Annotation([Ljava.lang.String;@3f36b447,[Ljava.lang.String;@6443b128,[Ljava.lang.String;@5eeedb60),Annotation([Ljava.lang.String;@40021799,[Ljava.lang.String;@4a1c0752,[Ledu.cmu.lti.nlp.amr.Dependency;@332f25c8),Annotation([Ljava.lang.String;@1b32cd16,[Ljava.lang.String;@4bdcaf36,[Ljava.lang.String;@61d01788),Annotation([Ljava.lang.String;@2b9b7f1f,[Ljava.lang.String;@264c5d07,[Ledu.cmu.lti.nlp.amr.Entity;@847f3e7))
AMR:
(a / ammunition, quant, q / quantity)
(a2 / aircraft, op, a / ammunition)
(g / gun, mod, a2 / aircraft)
(l2 / launch-01, ARG0, g / gun)
(l2 / launch-01, ARG1, t / tank)
(l2 / launch-01, quant, 1 / 150)
(q / quantity, mod, l / large)
(t / tank, quant, 3 / 33)

Decoded in 123,659 microseconds
Sentence: Evidence has subsequently emerged that the weapons were part of a clandestine arms deal between Kenya and the separatist region of southern Sudan.

NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Sudan"))
NER Entity: (country :name (name :op "Sudan"))
NER Entity: (country :name (name :op "Kenya"))
Spans:
Span 11-12:  clandestine => clandestine
Span 13-14:  deal => deal-01
Span 3-4:  emerged => emerge-02
Span 15-16:  Kenya => (country :name (name :op "Kenya"))
Span 19-20:  region => region
Span 21-22:  southern => south
Span 2-3:  subsequently => subsequent
Span 22-23:  Sudan => (country :name (name :op "Sudan"))

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 12-13:  arms => arm
Oracle Span 14-15:  between => between
Oracle Span 11-12:  clandestine => clandestine
Oracle Span 13-14:  deal => deal-01
Oracle Span 3-4:  emerged => emerge-01
Oracle Span 0-1:  Evidence => (thing :ARG0-of evidence-01)
Oracle Span 1-2:  has => have-part-91
Oracle Span 15-16:  Kenya => (country :name (name :op "Kenya"))
Oracle Span 19-20:  region => region
Oracle Span 18-19:  separatist => separatism
Oracle Span 21-23:  southern Sudan => (country :name (name :op "Sudan" :op "Southern"))
Oracle Span 2-3:  subsequently => subsequent
Oracle Span 6-7:  weapons => weapon

Extra span: Sudan => (country :name (name :op "Sudan"))
Extra span: southern => south
Incorrect span: emerged => emerge-02
Missing span: southern Sudan => (country :name (name :op "Sudan" :op "Southern"))
Missing span: emerged => emerge-01
Missing span: Evidence => (thing :ARG0-of evidence-01)
Missing span: weapons => weapon
Missing span: arms => arm
Missing span: between => between
Missing span: has => have-part-91
Missing span: separatist => separatism
Dependencies:
1	Evidence	_	NN	NN	_	4	nsubj	_	_
2	has	_	VBZ	VBZ	_	4	aux	_	_
3	subsequently	_	RB	RB	_	4	advmod	_	_
4	emerged	_	VBN	VBN	_	0	root	_	_
5	that	_	IN	IN	_	9	mark	_	_
6	the	_	DT	DT	_	7	det	_	_
7	weapons	_	NNS	NNS	_	9	nsubj	_	_
8	were	_	VBD	VBD	_	9	cop	_	_
9	part	_	NN	NN	_	4	ccomp	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	14	det	_	_
12	clandestine	_	JJ	JJ	_	14	amod	_	_
13	arms	_	NNS	NNS	_	14	nn	_	_
14	deal	_	NN	NN	_	10	pobj	_	_
15	between	_	IN	IN	_	14	prep	_	_
16	Kenya	_	NNP	NNP	_	15	pobj	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	the	_	DT	DT	_	20	det	_	_
19	separatist	_	JJ	JJ	_	20	amod	_	_
20	region	_	NN	NN	_	14	conj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	southern	_	JJ	JJ	_	23	amod	_	_
23	Sudan	_	NNP	NNP	_	21	pobj	_	_
24	.	_	.	.	_	4	punct	_	_

Oracle:
(b / between, op, c / country)
(b / between, op, r / region)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / deal-01, ARG0, b / between)
(d / deal-01, ARG1, a2 / arm)
(d / deal-01, mod, c3 / clandestine)
(e / emerge-01, ARG0, t / thing)
(e / emerge-01, mod, s3 / subsequent)
(e2 / evidence-01, ARG0, t / thing)
(e2 / evidence-01, ARG1, w / weapon)
(h / have-part-91, ARG1, d / deal-01)
(h / have-part-91, ARG2, w / weapon)
(n / name, op, "Kenya")
(n2 / name, op, "Southern")
(n2 / name, op, "Sudan")
(r / region, location, c2 / country)
(r / region, mod, s2 / separatism)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(2, 1, 0),Sudan,(country :name (name :op "Sudan")),false), Span(21,22,List(3),southern,south,false), Span(19,20,List(4),region,region,false), Span(15,16,List(7, 6, 5),Kenya,(country :name (name :op "Kenya")),false), Span(13,14,List(8),deal,deal-01,false), Span(11,12,List(9),clandestine,clandestine,false), Span(3,4,List(10),emerged,emerge-02,false), Span(2,3,List(11),subsequently,subsequent,false)),Map(2 -> "Sudan", 5 -> country, 8 -> deal-01, 7 -> "Kenya", 1 -> name, 11 -> subsequent, 4 -> region, 6 -> name, 9 -> clandestine, 0 -> country, 10 -> emerge-02, 3 -> south),Map(e -> emerge-02, n -> name, s2 -> subsequent, s -> south, d -> deal-01, c3 -> clandestine, r -> region, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@69cac930,Annotation([Ljava.lang.String;@19593091,[Ljava.lang.String;@5d39f2d8,[Ljava.lang.String;@6ad6fa53),Annotation([Ljava.lang.String;@55ea2d70,[Ljava.lang.String;@5e742e4,[Ledu.cmu.lti.nlp.amr.Dependency;@175acfb2),Annotation([Ljava.lang.String;@4a03bb68,[Ljava.lang.String;@4e868ef5,[Ljava.lang.String;@71c905a3),Annotation([Ljava.lang.String;@30af7377,[Ljava.lang.String;@67a056f1,[Ledu.cmu.lti.nlp.amr.Entity;@1dab9dd6))
AMR:
(c / country, name, n / name)
(c / country, part, s / south)
(c2 / country, name, n2 / name)
(d / deal-01, ARG1, c2 / country)
(d / deal-01, mod, c3 / clandestine)
(e / emerge-02, ARG1, r / region)
(e / emerge-02, time, s2 / subsequent)
(n / name, op, "Sudan")
(n2 / name, op, "Kenya")
(r / region, mod, d / deal-01)
(r / region, poss, c / country)

Decoded in 120,792 microseconds
Sentence: The deal would most likely have remained secret had the pirates not hijacked the ship and begun speaking to the media by satellite phone.

Spans:
Span 16-17:  begun => begin-01
Span 1-2:  deal => deal-01
Span 12-13:  hijacked => hijack-01
Span 4-5:  likely => likely
Span 20-21:  media => media
Span 23-24:  phone => phone
Span 10-11:  pirates => pirate
Span 6-7:  remained => remain-01
Span 22-23:  satellite => satellite
Span 7-8:  secret => secret
Span 17-18:  speaking => speak-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 16-17:  begun => begin-01
Oracle Span 1-2:  deal => deal-01
Oracle Span 12-13:  hijacked => hijack-01
Oracle Span 4-5:  likely => likely
Oracle Span 20-21:  media => media
Oracle Span 3-4:  most => most
Oracle Span 23-24:  phone => phone
Oracle Span 10-11:  pirates => pirate
Oracle Span 6-7:  remained => remain-01
Oracle Span 22-23:  satellite => satellite
Oracle Span 7-8:  secret => secret
Oracle Span 14-15:  ship => ship
Oracle Span 17-18:  speaking => speak-01

Missing span: and => and
Missing span: ship => ship
Missing span: most => most
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	deal	_	NN	NN	_	7	nsubj	_	_
3	would	_	MD	MD	_	7	aux	_	_
4	most	_	RBS	RBS	_	5	advmod	_	_
5	likely	_	RB	RB	_	7	advmod	_	_
6	have	_	VB	VB	_	7	aux	_	_
7	remained	_	VBN	VBN	_	0	root	_	_
8	secret	_	JJ	JJ	_	13	dep	_	_
9	had	_	VBD	VBD	_	13	aux	_	_
10	the	_	DT	DT	_	11	det	_	_
11	pirates	_	NNS	NNS	_	13	nsubj	_	_
12	not	_	RB	RB	_	13	dep	_	_
13	hijacked	_	VBN	VBN	_	7	acomp	_	_
14	the	_	DT	DT	_	15	det	_	_
15	ship	_	NN	NN	_	13	dobj	_	_
16	and	_	CC	CC	_	13	cc	_	_
17	begun	_	VBN	VBN	_	13	conj	_	_
18	speaking	_	VBG	VBG	_	17	xcomp	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	media	_	NNS	NNS	_	19	pobj	_	_
22	by	_	IN	IN	_	18	prep	_	_
23	satellite	_	NN	NN	_	24	nn	_	_
24	phone	_	NN	NN	_	22	pobj	_	_
25	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, b / begin-01)
(a / and, op, h / hijack-01)
(b / begin-01, ARG0, p / pirate)
(b / begin-01, ARG1, s3 / speak-01)
(h / hijack-01, ARG0, p / pirate)
(h / hijack-01, ARG1, s2 / ship)
(l / likely, condition, a / and)
(l / likely, degree, m / most)
(l / likely, domain, r / remain-01)
(p2 / phone, mod, s4 / satellite)
(r / remain-01, ARG1, d / deal-01)
(r / remain-01, ARG3, s / secret)
(s3 / speak-01, ARG0, p / pirate)
(s3 / speak-01, ARG2, m2 / media)
(s3 / speak-01, medium, p2 / phone)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),phone,phone,false), Span(22,23,List(1),satellite,satellite,false), Span(20,21,List(2),media,media,false), Span(17,18,List(3),speaking,speak-01,false), Span(16,17,List(4),begun,begin-01,false), Span(12,13,List(5),hijacked,hijack-01,false), Span(10,11,List(6),pirates,pirate,false), Span(7,8,List(7),secret,secret,false), Span(6,7,List(8),remained,remain-01,false), Span(4,5,List(9),likely,likely,false), Span(1,2,List(10),deal,deal-01,false)),Map(2 -> media, 5 -> hijack-01, 8 -> remain-01, 7 -> secret, 1 -> satellite, 4 -> begin-01, 6 -> pirate, 9 -> likely, 0 -> phone, 10 -> deal-01, 3 -> speak-01),Map(h -> hijack-01, b -> begin-01, s2 -> speak-01, p2 -> pirate, s -> satellite, d -> deal-01, m -> media, p -> phone, r -> remain-01, l -> likely, s3 -> secret))),[Ljava.lang.String;@247667dd,Annotation([Ljava.lang.String;@6f099cef,[Ljava.lang.String;@afb5821,[Ljava.lang.String;@4bff2185),Annotation([Ljava.lang.String;@5c20ffa8,[Ljava.lang.String;@7fedfe27,[Ledu.cmu.lti.nlp.amr.Dependency;@2f879bab),Annotation([Ljava.lang.String;@1d4664d7,[Ljava.lang.String;@46c00568,[Ljava.lang.String;@56ccd751),Annotation([Ljava.lang.String;@458544e0,[Ljava.lang.String;@6bcbf05b,[Ledu.cmu.lti.nlp.amr.Entity;@2d66530f))
AMR:
(b / begin-01, ARG0, p2 / pirate)
(b / begin-01, ARG1, s2 / speak-01)
(d / deal-01, ARG1, l / likely)
(h / hijack-01, ARG0, p2 / pirate)
(h / hijack-01, ARG1, d / deal-01)
(p / phone, mod, s / satellite)
(r / remain-01, ARG1, d / deal-01)
(r / remain-01, ARG2, s3 / secret)
(s2 / speak-01, ARG2, m / media)
(s2 / speak-01, time, p / phone)

Decoded in 296,388 microseconds
Sentence: Ukrainian officials have been adamant in denying any wrongdoing.

NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 7-8:  any => any
Span 6-7:  denying => deny-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 0-1:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 4-5:  adamant => adamance
Oracle Span 7-8:  any => any
Oracle Span 6-7:  denying => deny-01
Oracle Span 1-2:  officials => official
Oracle Span 0-1:  Ukrainian => (country :name (name :op "Ukraine"))
Oracle Span 8-9:  wrongdoing => wrongdoing

Incorrect span: officials => (have-org-role-91 :ARG2 official)
Missing span: officials => official
Missing span: wrongdoing => wrongdoing
Missing span: adamant => adamance
Dependencies:
1	Ukrainian	_	JJ	JJ	_	2	amod	_	_
2	officials	_	NNS	NNS	_	5	nsubj	_	_
3	have	_	VBP	VBP	_	5	aux	_	_
4	been	_	VBN	VBN	_	5	cop	_	_
5	adamant	_	JJ	JJ	_	0	root	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	denying	_	VBG	VBG	_	6	pcomp	_	_
8	any	_	DT	DT	_	9	det	_	_
9	wrongdoing	_	NN	NN	_	7	dobj	_	_
10	.	_	.	.	_	5	punct	_	_

Oracle:
(a / adamance, domain, o / official)
(a / adamance, prep-in, d / deny-01)
(c / country, name, n / name)
(d / deny-01, ARG0, o / official)
(d / deny-01, ARG1, w / wrongdoing)
(n / name, op, "Ukraine")
(o / official, mod, c / country)
(w / wrongdoing, mod, a2 / any)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),any,any,false), Span(6,7,List(1),denying,deny-01,false), Span(1,2,List(3, 2),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(6, 5, 4),Ukrainian,(country :name (name :op "Ukraine")),false)),Map(2 -> have-org-role-91, 5 -> name, 1 -> deny-01, 4 -> country, 6 -> "Ukraine", 0 -> any, 3 -> official),Map(n -> name, h -> have-org-role-91, d -> deny-01, a -> any, c -> country, o -> official))),[Ljava.lang.String;@1d207fad,Annotation([Ljava.lang.String;@72ed9aad,[Ljava.lang.String;@4690f583,[Ljava.lang.String;@59712875),Annotation([Ljava.lang.String;@47b2e9e1,[Ljava.lang.String;@59942b48,[Ledu.cmu.lti.nlp.amr.Dependency;@1869f114),Annotation([Ljava.lang.String;@488b50ec,[Ljava.lang.String;@18a645fd,[Ljava.lang.String;@6090f3ca),Annotation([Ljava.lang.String;@37a64f9d,[Ljava.lang.String;@25b865b5,[Ledu.cmu.lti.nlp.amr.Entity;@f9b5552))
AMR:
(a / any, op, h / have-org-role-91)
(c / country, name, n / name)
(d / deny-01, ARG0, h / have-org-role-91)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Ukraine")

Decoded in 53,676 microseconds
Sentence: Ukrainian diplomat in Kenya oleh belokolos stated --

NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 3-4:  Kenya => (country :name (name :op "Kenya"))
Span 0-1:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  diplomat => (have-org-role-91 :ARG2 diplomat)
Oracle Span 3-4:  Kenya => (country :name (name :op "Kenya"))
Oracle Span 4-6:  oleh belokolos => (person :name (name :op "Belokolos" :op "Oleh"))
Oracle Span 6-7:  stated => state-01
Oracle Span 0-1:  Ukrainian => (country :name (name :op "Ukraine"))

Missing span: oleh belokolos => (person :name (name :op "Belokolos" :op "Oleh"))
Missing span: stated => state-01
Missing span: diplomat => (have-org-role-91 :ARG2 diplomat)
Dependencies:
1	Ukrainian	_	JJ	JJ	_	2	amod	_	_
2	diplomat	_	NN	NN	_	7	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	Kenya	_	NNP	NNP	_	6	nn	_	_
5	oleh	_	NN	NN	_	6	nn	_	_
6	belokolos	_	NNS	NNS	_	3	pobj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	--	_	:	:	_	7	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, d / diplomat)
(n / name, op, "Belokolos")
(n / name, op, "Oleh")
(n2 / name, op, "Ukraine")
(n3 / name, op, "Kenya")
(p / person, location, c2 / country)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(2, 1, 0),Kenya,(country :name (name :op "Kenya")),false), Span(0,1,List(5, 4, 3),Ukrainian,(country :name (name :op "Ukraine")),false)),Map(2 -> "Kenya", 5 -> "Ukraine", 1 -> name, 4 -> name, 0 -> country, 3 -> country),Map(n -> name, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@6872f9c8,Annotation([Ljava.lang.String;@6d2d99fc,[Ljava.lang.String;@bdecc21,[Ljava.lang.String;@5e3a39cd),Annotation([Ljava.lang.String;@21f9277b,[Ljava.lang.String;@201aa8c1,[Ledu.cmu.lti.nlp.amr.Dependency;@5d58c727),Annotation([Ljava.lang.String;@52a36910,[Ljava.lang.String;@3a095ec0,[Ljava.lang.String;@4f20a5e0),Annotation([Ljava.lang.String;@54da32dc,[Ljava.lang.String;@1d782abe,[Ledu.cmu.lti.nlp.amr.Entity;@6df7988f))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c2 / country, time, c / country)
(n / name, op, "Kenya")
(n2 / name, op, "Ukraine")

Decoded in 20,941 microseconds
Sentence: Ukraine does not supply or have plans to supply any armaments to the Government of South Sudan.

NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (country :name (name :op "South" :op "Sudan"))
NER Entity: (country :name (name :op "Ukraine"))
Spans:
Span 9-10:  any => any
Span 10-11:  armaments => armament
Span 4-5:  or => or
Span 6-7:  plans => plan-01
Span 15-17:  South Sudan => (country :name (name :op "South" :op "Sudan"))
Span 8-9:  supply => supply-01
Span 3-4:  supply => supply-01
Span 0-1:  Ukraine => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  any => any
Oracle Span 10-11:  armaments => armament
Oracle Span 13-14:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 5-6:  have => have-03
Oracle Span 4-5:  or => or
Oracle Span 6-7:  plans => plan-01
Oracle Span 15-17:  South Sudan => (country :name (name :op "Sudan" :op "South"))
Oracle Span 3-4:  supply => supply-01
Oracle Span 8-9:  supply => supply-01
Oracle Span 0-1:  Ukraine => (country :name (name :op "Ukraine"))

Incorrect span: South Sudan => (country :name (name :op "South" :op "Sudan"))
Missing span: South Sudan => (country :name (name :op "Sudan" :op "South"))
Missing span: have => have-03
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Ukraine	_	NNP	NNP	_	4	nsubj	_	_
2	does	_	VBZ	VBZ	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	supply	_	VB	VB	_	0	root	_	_
5	or	_	CC	CC	_	4	cc	_	_
6	have	_	VB	VB	_	4	conj	_	_
7	plans	_	NNS	NNS	_	6	dobj	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	supply	_	VB	VB	_	6	ccomp	_	_
10	any	_	DT	DT	_	11	det	_	_
11	armaments	_	NNS	NNS	_	9	dobj	_	_
12	to	_	TO	TO	_	9	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	Government	_	NN	NN	_	12	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	South	_	NNP	NNP	_	17	nn	_	_
17	Sudan	_	NNP	NNP	_	15	pobj	_	_
18	.	_	.	.	_	4	punct	_	_

Oracle:
(a / armament, mod, a2 / any)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, p / plan-01)
(n / name, op, "Ukraine")
(n2 / name, op, "South")
(n2 / name, op, "Sudan")
(o / or, op, h / have-03)
(o / or, op, s / supply-01)
(p / plan-01, ARG0, c / country)
(p / plan-01, ARG1, s2 / supply-01)
(s / supply-01, ARG0, c / country)
(s / supply-01, ARG1, a / armament)
(s / supply-01, ARG2, g / government-organization)
(s2 / supply-01, ARG0, c / country)
(s2 / supply-01, ARG1, a / armament)
(s2 / supply-01, ARG2, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(15,17,List(3, 2, 1, 0),South Sudan,(country :name (name :op "South" :op "Sudan")),false), Span(10,11,List(4),armaments,armament,false), Span(9,10,List(5),any,any,false), Span(8,9,List(6),supply,supply-01,false), Span(6,7,List(7),plans,plan-01,false), Span(4,5,List(8),or,or,false), Span(3,4,List(9),supply,supply-01,false), Span(0,1,List(12, 11, 10),Ukraine,(country :name (name :op "Ukraine")),false)),Map(2 -> "South", 5 -> any, 12 -> "Ukraine", 8 -> or, 7 -> plan-01, 1 -> name, 4 -> armament, 11 -> name, 6 -> supply-01, 0 -> country, 9 -> supply-01, 3 -> "Sudan", 10 -> country),Map(n -> name, s2 -> supply-01, s -> supply-01, p -> plan-01, a -> armament, a2 -> any, c -> country, o -> or, n2 -> name, c2 -> country))),[Ljava.lang.String;@27b22f74,Annotation([Ljava.lang.String;@22fba58c,[Ljava.lang.String;@7e8a46b7,[Ljava.lang.String;@2fe88a09),Annotation([Ljava.lang.String;@1917d90f,[Ljava.lang.String;@66bfd864,[Ledu.cmu.lti.nlp.amr.Dependency;@4aac85fa),Annotation([Ljava.lang.String;@21fff664,[Ljava.lang.String;@6079cf5,[Ljava.lang.String;@1e6308a9),Annotation([Ljava.lang.String;@30cecdca,[Ljava.lang.String;@6edc4161,[Ledu.cmu.lti.nlp.amr.Entity;@5486887b))
AMR:
(a / armament, mod, a2 / any)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "South")
(n / name, op, "Sudan")
(n2 / name, op, "Ukraine")
(o / or, op, s2 / supply-01)
(p / plan-01, ARG0, c / country)
(p / plan-01, ARG2, s / supply-01)
(s / supply-01, ARG1, a / armament)
(s2 / supply-01, ARG0, c2 / country)
(s2 / supply-01, ARG1, p / plan-01)

Decoded in 77,479 microseconds
Sentence: All the appropriate paperwork has been validated.

Spans:
Span 2-3:  appropriate => appropriate

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  All => all
Oracle Span 2-3:  appropriate => appropriate
Oracle Span 3-4:  paperwork => paperwork
Oracle Span 6-7:  validated => validate-01

Missing span: validated => validate-01
Missing span: paperwork => paperwork
Missing span: All => all
Dependencies:
1	All	_	PDT	PDT	_	4	predet	_	_
2	the	_	DT	DT	_	4	det	_	_
3	appropriate	_	JJ	JJ	_	4	amod	_	_
4	paperwork	_	NN	NN	_	7	nsubjpass	_	_
5	has	_	VBZ	VBZ	_	7	aux	_	_
6	been	_	VBN	VBN	_	7	auxpass	_	_
7	validated	_	VBN	VBN	_	0	root	_	_
8	.	_	.	.	_	7	punct	_	_

Oracle:
(p / paperwork, mod, a / appropriate)
(p / paperwork, mod, a2 / all)
(v / validate-01, ARG1, p / paperwork)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),appropriate,appropriate,false)),Map(0 -> appropriate),Map(a -> appropriate))),[Ljava.lang.String;@5226e402,Annotation([Ljava.lang.String;@1440c311,[Ljava.lang.String;@189b5fb1,[Ljava.lang.String;@783ec989),Annotation([Ljava.lang.String;@1ddd3478,[Ljava.lang.String;@f973499,[Ledu.cmu.lti.nlp.amr.Dependency;@4d33940d),Annotation([Ljava.lang.String;@43cf6ea3,[Ljava.lang.String;@37c5fc56,[Ljava.lang.String;@1c025cb),Annotation([Ljava.lang.String;@50825a02,[Ljava.lang.String;@68809cc7,[Ledu.cmu.lti.nlp.amr.Entity;@703feacd))
AMR:


Decoded in 10,133 microseconds
Sentence: Ukraine abides by all United Nations rules and arms control agreements.

NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Ukraine"))
Spans:
Span 1-2:  abides => abide-01
Span 10-11:  agreements => agree-01
Span 3-4:  all => all
Span 9-10:  control => control-01
Span 6-7:  rules => rule
Span 0-1:  Ukraine => (country :name (name :op "Ukraine"))
Span 4-6:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  abides => abide-01
Oracle Span 10-11:  agreements => agree-01
Oracle Span 3-4:  all => all
Oracle Span 7-8:  and => and
Oracle Span 8-9:  arms => arm
Oracle Span 9-10:  control => control-01
Oracle Span 6-7:  rules => rule
Oracle Span 0-1:  Ukraine => (country :name (name :op "Ukraine"))
Oracle Span 4-6:  United Nations => (organization :name (name :op "Nations" :op "United"))

Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: United Nations => (organization :name (name :op "Nations" :op "United"))
Missing span: and => and
Missing span: arms => arm
Dependencies:
1	Ukraine	_	NNP	NNP	_	2	nsubj	_	_
2	abides	_	VBZ	VBZ	_	0	root	_	_
3	by	_	IN	IN	_	2	prep	_	_
4	all	_	DT	DT	_	7	det	_	_
5	United	_	NNP	NNP	_	7	nn	_	_
6	Nations	_	NNP	NNP	_	7	nn	_	_
7	rules	_	NNS	NNS	_	3	pobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	arms	_	NNS	NNS	_	11	nn	_	_
10	control	_	NN	NN	_	11	nn	_	_
11	agreements	_	NNS	NNS	_	7	conj	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(a / abide-01, ARG0, c / country)
(a / abide-01, ARG1, a2 / and)
(a2 / and, op, a4 / agree-01)
(a2 / and, op, r / rule)
(a4 / agree-01, ARG1, c2 / control-01)
(c / country, name, n / name)
(c2 / control-01, ARG1, a5 / arm)
(n / name, op, "Ukraine")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(o / organization, name, n2 / name)
(r / rule, mod, o / organization)
(r / rule, quant, a3 / all)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),agreements,agree-01,false), Span(9,10,List(1),control,control-01,false), Span(6,7,List(2),rules,rule,false), Span(4,6,List(6, 5, 4, 3),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(3,4,List(7),all,all,false), Span(1,2,List(8),abides,abide-01,false), Span(0,1,List(11, 10, 9),Ukraine,(country :name (name :op "Ukraine")),false)),Map(2 -> rule, 5 -> "United", 8 -> abide-01, 7 -> all, 1 -> control-01, 11 -> "Ukraine", 4 -> name, 6 -> "Nations", 9 -> country, 0 -> agree-01, 10 -> name, 3 -> organization),Map(n -> name, a3 -> abide-01, a -> agree-01, a2 -> all, r -> rule, c -> control-01, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@7051777c,Annotation([Ljava.lang.String;@3241713e,[Ljava.lang.String;@5ecba515,[Ljava.lang.String;@512d4583),Annotation([Ljava.lang.String;@2abc224d,[Ljava.lang.String;@13cd7ea5,[Ledu.cmu.lti.nlp.amr.Dependency;@102d92c4),Annotation([Ljava.lang.String;@2b97cc1f,[Ljava.lang.String;@60723d6a,[Ljava.lang.String;@18324f97),Annotation([Ljava.lang.String;@64f555e7,[Ljava.lang.String;@71178a52,[Ledu.cmu.lti.nlp.amr.Entity;@ff6077))
AMR:
(a / agree-01, ARG1, c / control-01)
(a3 / abide-01, ARG0, c2 / country)
(a3 / abide-01, ARG1, r / rule)
(c / control-01, ARG0, o / organization)
(c2 / country, name, n2 / name)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Ukraine")
(o / organization, name, n / name)
(r / rule, poss, o / organization)
(r / rule, quant, a2 / all)

Decoded in 53,232 microseconds
Sentence: Ukraine inherited enormous stockpiles of weaponry after the collapse of the Soviet Union and is now a major arms dealer.

NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (country :name (name :op "Soviet" :op "Union"))
NER Entity: (country :name (name :op "Ukraine"))
Spans:
Span 6-7:  after => after
Span 8-9:  collapse => collapse-01
Span 2-3:  enormous => enormous
Span 17-18:  major => major
Span 15-16:  now => now
Span 11-13:  Soviet Union => (country :name (name :op "Union" :op "Soviet"))
Span 0-1:  Ukraine => (country :name (name :op "Ukraine"))
Span 5-6:  weaponry => weaponry

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 6-7:  after => after
Oracle Span 13-14:  and => and
Oracle Span 18-19:  arms => arm
Oracle Span 8-9:  collapse => collapse-01
Oracle Span 19-20:  dealer => deal-01
Oracle Span 2-3:  enormous => enormous
Oracle Span 1-2:  inherited => inherit-01
Oracle Span 17-18:  major => major
Oracle Span 15-16:  now => now
Oracle Span 11-13:  Soviet Union => (country :name (name :op "Union" :op "Soviet"))
Oracle Span 3-4:  stockpiles => stockpile-01
Oracle Span 0-1:  Ukraine => (country :name (name :op "Ukraine"))
Oracle Span 5-6:  weaponry => weaponry

Missing span: and => and
Missing span: dealer => deal-01
Missing span: arms => arm
Missing span: inherited => inherit-01
Missing span: stockpiles => stockpile-01
Dependencies:
1	Ukraine	_	NNP	NNP	_	2	nsubj	_	_
2	inherited	_	VBD	VBD	_	0	root	_	_
3	enormous	_	JJ	JJ	_	4	amod	_	_
4	stockpiles	_	NNS	NNS	_	2	dobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	weaponry	_	NN	NN	_	5	pobj	_	_
7	after	_	IN	IN	_	2	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	collapse	_	NN	NN	_	7	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	Soviet	_	NNP	NNP	_	13	nn	_	_
13	Union	_	NNP	NNP	_	10	pobj	_	_
14	and	_	CC	CC	_	2	cc	_	_
15	is	_	VBZ	VBZ	_	20	cop	_	_
16	now	_	RB	RB	_	20	advmod	_	_
17	a	_	DT	DT	_	20	det	_	_
18	major	_	JJ	JJ	_	20	amod	_	_
19	arms	_	NNS	NNS	_	20	nn	_	_
20	dealer	_	NN	NN	_	2	conj	_	_
21	.	_	.	.	_	2	punct	_	_

Oracle:
(a / after, op, c2 / collapse-01)
(a2 / and, op, d / deal-01)
(a2 / and, op, i / inherit-01)
(c / country, name, n / name)
(c2 / collapse-01, ARG1, c3 / country)
(c3 / country, name, n2 / name)
(d / deal-01, ARG0, c / country)
(d / deal-01, ARG1, a3 / arm)
(d / deal-01, mod, m / major)
(d / deal-01, time, n3 / now)
(i / inherit-01, ARG0, c / country)
(i / inherit-01, ARG1, s / stockpile-01)
(i / inherit-01, time, a / after)
(n / name, op, "Ukraine")
(n2 / name, op, "Soviet")
(n2 / name, op, "Union")
(s / stockpile-01, ARG0, c / country)
(s / stockpile-01, ARG1, w / weaponry)
(s / stockpile-01, mod, e / enormous)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),major,major,false), Span(15,16,List(1),now,now,false), Span(11,13,List(5, 4, 3, 2),Soviet Union,(country :name (name :op "Union" :op "Soviet")),false), Span(8,9,List(6),collapse,collapse-01,false), Span(6,7,List(7),after,after,false), Span(5,6,List(8),weaponry,weaponry,false), Span(2,3,List(9),enormous,enormous,false), Span(0,1,List(12, 11, 10),Ukraine,(country :name (name :op "Ukraine")),false)),Map(2 -> country, 5 -> "Soviet", 12 -> "Ukraine", 8 -> weaponry, 7 -> after, 1 -> now, 4 -> "Union", 11 -> name, 6 -> collapse-01, 0 -> major, 9 -> enormous, 3 -> name, 10 -> country),Map(e -> enormous, w -> weaponry, n -> now, m -> major, n3 -> name, c3 -> country, a -> after, c -> country, c2 -> collapse-01, n2 -> name))),[Ljava.lang.String;@abbc908,Annotation([Ljava.lang.String;@44afefd5,[Ljava.lang.String;@9a7a808,[Ljava.lang.String;@72209d93),Annotation([Ljava.lang.String;@2687f956,[Ljava.lang.String;@1ded7b14,[Ledu.cmu.lti.nlp.amr.Dependency;@29be7749),Annotation([Ljava.lang.String;@5f84abe8,[Ljava.lang.String;@4650a407,[Ljava.lang.String;@30135202),Annotation([Ljava.lang.String;@6a4d7f76,[Ljava.lang.String;@10ec523c,[Ledu.cmu.lti.nlp.amr.Entity;@53dfacba))
AMR:
(a / after, op, c2 / collapse-01)
(c / country, name, n2 / name)
(c2 / collapse-01, ARG0, m / major)
(c2 / collapse-01, ARG1, c / country)
(c2 / collapse-01, ARG2, n / now)
(c3 / country, name, n3 / name)
(e / enormous, op, c2 / collapse-01)
(n2 / name, op, "Soviet")
(n2 / name, op, "Union")
(n3 / name, op, "Ukraine")
(w / weaponry, poss, c3 / country)
(w / weaponry, topic, c2 / collapse-01)

Decoded in 181,958 microseconds
Sentence: The deal with Ukraine is considered suspicious given that Kenya has mostly relied on the United Kingdom and other western countries for its supply of heavy weapons.

NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "United" :op "Kingdom"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Ukraine"))
Spans:
Span 5-6:  considered => consider-01
Span 20-21:  countries => country
Span 1-2:  deal => deal-01
Span 7-8:  given => give-01
Span 25-26:  heavy => heavy
Span 9-10:  Kenya => (country :name (name :op "Kenya"))
Span 11-12:  mostly => most
Span 18-19:  other => other
Span 12-13:  relied => rely-01
Span 23-24:  supply => supply-01
Span 6-7:  suspicious => suspicious
Span 3-4:  Ukraine => (country :name (name :op "Ukraine"))
Span 15-17:  United Kingdom => (country :name (name :op "United" :op "Kingdom"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 17-18:  and => and
Oracle Span 5-6:  considered => consider-01
Oracle Span 20-21:  countries => country
Oracle Span 1-2:  deal => deal-01
Oracle Span 25-26:  heavy => heavy
Oracle Span 9-10:  Kenya => (country :name (name :op "Kenya"))
Oracle Span 11-12:  mostly => most
Oracle Span 18-19:  other => other
Oracle Span 12-13:  relied => rely-01
Oracle Span 23-24:  supply => supply-01
Oracle Span 6-7:  suspicious => suspicious
Oracle Span 3-4:  Ukraine => (country :name (name :op "Ukraine"))
Oracle Span 15-17:  United Kingdom => (country :name (name :op "Kingdom" :op "United"))
Oracle Span 26-27:  weapons => weapon
Oracle Span 19-20:  western => (world-region :name (name :op "West"))

Incorrect span: United Kingdom => (country :name (name :op "United" :op "Kingdom"))
Extra span: given => give-01
Missing span: United Kingdom => (country :name (name :op "Kingdom" :op "United"))
Missing span: western => (world-region :name (name :op "West"))
Missing span: weapons => weapon
Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	deal	_	NN	NN	_	6	nsubjpass	_	_
3	with	_	IN	IN	_	2	prep	_	_
4	Ukraine	_	NNP	NNP	_	3	pobj	_	_
5	is	_	VBZ	VBZ	_	6	auxpass	_	_
6	considered	_	VBN	VBN	_	0	root	_	_
7	suspicious	_	JJ	JJ	_	6	acomp	_	_
8	given	_	VBN	VBN	_	6	prep	_	_
9	that	_	IN	IN	_	13	mark	_	_
10	Kenya	_	NNP	NNP	_	13	nsubj	_	_
11	has	_	VBZ	VBZ	_	13	aux	_	_
12	mostly	_	RB	RB	_	13	advmod	_	_
13	relied	_	VBN	VBN	_	8	pcomp	_	_
14	on	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	United	_	NNP	NNP	_	17	nn	_	_
17	Kingdom	_	NNP	NNP	_	14	pobj	_	_
18	and	_	CC	CC	_	17	cc	_	_
19	other	_	JJ	JJ	_	21	amod	_	_
20	western	_	JJ	JJ	_	21	amod	_	_
21	countries	_	NNS	NNS	_	17	conj	_	_
22	for	_	IN	IN	_	13	prep	_	_
23	its	_	PRP$	PRP$	_	24	poss	_	_
24	supply	_	NN	NN	_	22	pobj	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	heavy	_	JJ	JJ	_	27	amod	_	_
27	weapons	_	NNS	NNS	_	25	pobj	_	_
28	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c5 / country)
(a / and, op, c6 / country)
(c / consider-01, ARG1, s / suspicious)
(c2 / country, name, n / name)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(c6 / country, location, w / world-region)
(c6 / country, mod, o / other)
(d / deal-01, ARG0, c2 / country)
(n / name, op, "Ukraine")
(n2 / name, op, "Kenya")
(n3 / name, op, "Kingdom")
(n3 / name, op, "United")
(n4 / name, op, "West")
(r / rely-01, ARG0, c4 / country)
(r / rely-01, ARG1, a / and)
(r / rely-01, ARG2, s2 / supply-01)
(r / rely-01, degree, m / most)
(s / suspicious, domain, d / deal-01)
(s2 / supply-01, ARG1, w2 / weapon)
(s2 / supply-01, ARG2, c4 / country)
(w / world-region, name, n4 / name)
(w2 / weapon, mod, h / heavy)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),heavy,heavy,false), Span(23,24,List(1),supply,supply-01,false), Span(20,21,List(2),countries,country,false), Span(18,19,List(3),other,other,false), Span(15,17,List(7, 6, 5, 4),United Kingdom,(country :name (name :op "United" :op "Kingdom")),false), Span(12,13,List(8),relied,rely-01,false), Span(11,12,List(9),mostly,most,false), Span(9,10,List(12, 11, 10),Kenya,(country :name (name :op "Kenya")),false), Span(7,8,List(13),given,give-01,false), Span(6,7,List(14),suspicious,suspicious,false), Span(5,6,List(15),considered,consider-01,false), Span(3,4,List(18, 17, 16),Ukraine,(country :name (name :op "Ukraine")),false), Span(1,2,List(19),deal,deal-01,false)),Map(2 -> country, 5 -> name, 12 -> "Kenya", 15 -> consider-01, 8 -> rely-01, 18 -> "Ukraine", 7 -> "Kingdom", 17 -> name, 1 -> supply-01, 4 -> country, 11 -> name, 14 -> suspicious, 6 -> "United", 0 -> heavy, 9 -> most, 16 -> country, 19 -> deal-01, 3 -> other, 10 -> country, 13 -> give-01),Map(n -> name, h -> heavy, s2 -> suspicious, c4 -> consider-01, s -> supply-01, d -> deal-01, m -> most, g -> give-01, n3 -> name, c3 -> country, r -> rely-01, c -> country, o -> other, c2 -> country, n2 -> name, c5 -> country))),[Ljava.lang.String;@79767781,Annotation([Ljava.lang.String;@78411116,[Ljava.lang.String;@aced190,[Ljava.lang.String;@245a060f),Annotation([Ljava.lang.String;@6edaa77a,[Ljava.lang.String;@1e63d216,[Ledu.cmu.lti.nlp.amr.Dependency;@62ddd21b),Annotation([Ljava.lang.String;@16c3ca31,[Ljava.lang.String;@2d195ee4,[Ljava.lang.String;@2d6aca33),Annotation([Ljava.lang.String;@21ab988f,[Ljava.lang.String;@29314cc9,[Ledu.cmu.lti.nlp.amr.Entity;@4e38d975))
AMR:
(c / country, mod, o / other)
(c / country, topic, s / supply-01)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / consider-01, ARG0, h / heavy)
(c4 / consider-01, ARG1, s2 / suspicious)
(c5 / country, name, n3 / name)
(d / deal-01, ARG1, c5 / country)
(g / give-01, ARG1, s2 / suspicious)
(g / give-01, ARG2, r / rely-01)
(n / name, op, "Kingdom")
(n / name, op, "United")
(n2 / name, op, "Kenya")
(n3 / name, op, "Ukraine")
(r / rely-01, ARG0, c3 / country)
(r / rely-01, ARG1, c2 / country)
(r / rely-01, manner, m / most)
(s / supply-01, ARG0, c3 / country)
(s2 / suspicious, domain, d / deal-01)

Decoded in 327,243 microseconds
Sentence: Kenyan politicians were demanding answers and have called for several commissions to examine the situation.

NER Entity: (thing :name (name :op "Kenyan"))
NER Entity: (thing :name (name :op "Kenyan"))
Spans:
Span 3-4:  demanding => demand-01
Span 12-13:  examine => examine-01
Span 0-1:  Kenyan => (country :name (name :op "Kenya"))
Span 1-2:  politicians => politician
Span 9-10:  several => several
Span 14-15:  situation => situation

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 5-6:  and => and
Oracle Span 4-5:  answers => answer-01
Oracle Span 7-8:  called => call-03
Oracle Span 10-11:  commissions => commission
Oracle Span 3-4:  demanding => demand-01
Oracle Span 12-13:  examine => examine-01
Oracle Span 0-1:  Kenyan => (country :name (name :op "Kenya"))
Oracle Span 1-2:  politicians => politician
Oracle Span 9-10:  several => several
Oracle Span 14-15:  situation => situation

Missing span: and => and
Missing span: called => call-03
Missing span: commissions => commission
Missing span: answers => answer-01
Dependencies:
1	Kenyan	_	JJ	JJ	_	2	amod	_	_
2	politicians	_	NNS	NNS	_	4	nsubj	_	_
3	were	_	VBD	VBD	_	4	aux	_	_
4	demanding	_	VBG	VBG	_	0	root	_	_
5	answers	_	NNS	NNS	_	4	dobj	_	_
6	and	_	CC	CC	_	4	cc	_	_
7	have	_	VBP	VBP	_	8	aux	_	_
8	called	_	VBN	VBN	_	4	conj	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	several	_	JJ	JJ	_	11	amod	_	_
11	commissions	_	NNS	NNS	_	9	pobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	examine	_	VB	VB	_	8	xcomp	_	_
14	the	_	DT	DT	_	15	det	_	_
15	situation	_	NN	NN	_	13	dobj	_	_
16	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c2 / call-03)
(a / and, op, d / demand-01)
(c / country, name, n / name)
(c2 / call-03, ARG0, p / politician)
(c2 / call-03, ARG1, e / examine-01)
(c2 / call-03, ARG2, c3 / commission)
(c3 / commission, quant, s2 / several)
(d / demand-01, ARG0, p / politician)
(d / demand-01, ARG1, a2 / answer-01)
(e / examine-01, ARG0, c3 / commission)
(e / examine-01, ARG1, s / situation)
(n / name, op, "Kenya")
(p / politician, mod, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),situation,situation,false), Span(12,13,List(1),examine,examine-01,false), Span(9,10,List(2),several,several,false), Span(3,4,List(3),demanding,demand-01,false), Span(1,2,List(4),politicians,politician,false), Span(0,1,List(7, 6, 5),Kenyan,(country :name (name :op "Kenya")),false)),Map(2 -> several, 5 -> country, 7 -> "Kenya", 1 -> examine-01, 4 -> politician, 6 -> name, 0 -> situation, 3 -> demand-01),Map(n -> name, e -> examine-01, s2 -> several, s -> situation, d -> demand-01, p -> politician, c -> country))),[Ljava.lang.String;@35f8a9d3,Annotation([Ljava.lang.String;@48ea2003,[Ljava.lang.String;@6b1e7ad3,[Ljava.lang.String;@63e5e5b4),Annotation([Ljava.lang.String;@13a37e2a,[Ljava.lang.String;@a50ae65,[Ledu.cmu.lti.nlp.amr.Dependency;@1280851e),Annotation([Ljava.lang.String;@5e840abf,[Ljava.lang.String;@56de6d6b,[Ljava.lang.String;@5972d253),Annotation([Ljava.lang.String;@4fcc0416,[Ljava.lang.String;@31e32ea2,[Ledu.cmu.lti.nlp.amr.Entity;@1473b8c0))
AMR:
(c / country, name, n / name)
(d / demand-01, ARG0, p / politician)
(e / examine-01, ARG0, p / politician)
(e / examine-01, ARG1, s / situation)
(n / name, op, "Kenya")
(p / politician, mod, c / country)
(s2 / several, op, d / demand-01)

Decoded in 76,294 microseconds
Sentence: Southern Sudan is an autonomous region that is currently increasing its military and that uses Soviet-designed tanks.

NER Entity: (country :name (name :op "Southern" :op "Sudan"))
Spans:
Span 8-9:  currently => current
Span 17-18:  designed => design-01
Span 9-10:  increasing => increase-01
Span 5-6:  region => region
Span 0-2:  Southern Sudan => (country :name (name :op "Southern" :op "Sudan"))
Span 18-19:  tanks => tank
Span 14-15:  uses => use-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 4-5:  autonomous => autonomy
Oracle Span 8-9:  currently => current
Oracle Span 17-18:  designed => design-01
Oracle Span 9-10:  increasing => increase-01
Oracle Span 11-12:  military => military
Oracle Span 5-6:  region => region
Oracle Span 0-2:  Southern Sudan => (country :name (name :op "Sudan" :op "Southern"))
Oracle Span 15-16:  Soviet => "Soviet"
Oracle Span 18-19:  tanks => tank
Oracle Span 14-15:  uses => use-01

Incorrect span: Southern Sudan => (country :name (name :op "Southern" :op "Sudan"))
Missing span: Southern Sudan => (country :name (name :op "Sudan" :op "Southern"))
Missing span: military => military
Missing span: Soviet => "Soviet"
Missing span: autonomous => autonomy
Dependencies:
1	Southern	_	NNP	NNP	_	2	nn	_	_
2	Sudan	_	NNP	NNP	_	6	nsubj	_	_
3	is	_	VBZ	VBZ	_	6	cop	_	_
4	an	_	DT	DT	_	6	det	_	_
5	autonomous	_	JJ	JJ	_	6	amod	_	_
6	region	_	NN	NN	_	0	root	_	_
7	that	_	WDT	WDT	_	10	nsubj	_	_
8	is	_	VBZ	VBZ	_	10	aux	_	_
9	currently	_	RB	RB	_	10	advmod	_	_
10	increasing	_	VBG	VBG	_	6	rcmod	_	_
11	its	_	PRP$	PRP$	_	12	poss	_	_
12	military	_	NN	NN	_	10	dobj	_	_
13	and	_	CC	CC	_	6	cc	_	_
14	that	_	DT	DT	_	15	nsubj	_	_
15	uses	_	VBZ	VBZ	_	6	conj	_	_
16	Soviet-designed	_	JJ	JJ	_	17	amod	_	_
17	tanks	_	NNS	NNS	_	15	dobj	_	_
18	.	_	.	.	_	6	punct	_	_

Oracle:
(c4 / country, name, n3 / name)
(d / design-01, ARG1, t / tank)
(i / increase-01, ARG0, c4 / country)
(i / increase-01, ARG1, m / military)
(i / increase-01, time, c3 / current)
(m / military, poss, c4 / country)
(n3 / name, op, "Southern")
(n3 / name, op, "Sudan")
(r / region, domain, c4 / country)
(r / region, mod, a / autonomy)
(u / use-01, ARG0, c4 / country)
(u / use-01, ARG1, t / tank)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),tanks,tank,false), Span(17,18,List(1),designed,design-01,false), Span(14,15,List(2),uses,use-01,false), Span(9,10,List(3),increasing,increase-01,false), Span(8,9,List(4),currently,current,false), Span(5,6,List(5),region,region,false), Span(0,2,List(9, 8, 7, 6),Southern Sudan,(country :name (name :op "Southern" :op "Sudan")),false)),Map(2 -> use-01, 5 -> region, 8 -> "Southern", 7 -> name, 1 -> design-01, 4 -> current, 6 -> country, 9 -> "Sudan", 0 -> tank, 3 -> increase-01),Map(n -> name, t -> tank, d -> design-01, r -> region, i -> increase-01, c -> current, u -> use-01, c2 -> country))),[Ljava.lang.String;@5b5c0057,Annotation([Ljava.lang.String;@749f539e,[Ljava.lang.String;@5ca1f591,[Ljava.lang.String;@551de37d),Annotation([Ljava.lang.String;@6ef81f31,[Ljava.lang.String;@6075b2d3,[Ledu.cmu.lti.nlp.amr.Dependency;@33abde31),Annotation([Ljava.lang.String;@997d532,[Ljava.lang.String;@273842a6,[Ljava.lang.String;@6a969fb8),Annotation([Ljava.lang.String;@7a18e8d,[Ljava.lang.String;@3028e50e,[Ledu.cmu.lti.nlp.amr.Entity;@5560bcdf))
AMR:
(c2 / country, name, n / name)
(d / design-01, ARG1, t / tank)
(i / increase-01, ARG1, c2 / country)
(i / increase-01, time, c / current)
(n / name, op, "Southern")
(n / name, op, "Sudan")
(r / region, domain, c2 / country)
(u / use-01, ARG0, c2 / country)
(u / use-01, ARG1, t / tank)

Decoded in 120,982 microseconds
Sentence: The American military stated that its priority is to ensure that the weapons were not unloaded from the ship and sold to Islamist insurgents in Somalia.

NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "Islamist"))
NER Entity: (country :name (name :op "Somalia"))
NER Entity: (country :name (name :op "Somalia"))
NER Entity: (thing :name (name :op "Islamist"))
Spans:
Span 9-10:  ensure => ensure-01
Span 23-24:  insurgents => insurgent
Span 22-23:  Islamist => (religious-group :name (name :op "Islamism"))
Span 20-21:  sold => sell-01
Span 25-26:  Somalia => (country :name (name :op "Somalia"))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 19-20:  and => and
Oracle Span 9-10:  ensure => ensure-01
Oracle Span 23-24:  insurgents => insurgent
Oracle Span 22-23:  Islamist => (religious-group :name (name :op "Islamism"))
Oracle Span 2-3:  military => military
Oracle Span 6-7:  priority => prioritize-01
Oracle Span 18-19:  ship => ship
Oracle Span 20-21:  sold => sell-01
Oracle Span 25-26:  Somalia => (country :name (name :op "Somalia"))
Oracle Span 3-4:  stated => state-01
Oracle Span 15-16:  unloaded => unload-02
Oracle Span 12-13:  weapons => weapon

Missing span: stated => state-01
Missing span: and => and
Missing span: unloaded => unload-02
Missing span: weapons => weapon
Missing span: ship => ship
Missing span: military => military
Missing span: priority => prioritize-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	American	_	JJ	JJ	_	3	amod	_	_
3	military	_	NN	NN	_	4	nsubj	_	_
4	stated	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	8	mark	_	_
6	its	_	PRP$	PRP$	_	7	poss	_	_
7	priority	_	NN	NN	_	8	nsubj	_	_
8	is	_	VBZ	VBZ	_	4	ccomp	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	ensure	_	VB	VB	_	8	xcomp	_	_
11	that	_	IN	IN	_	16	mark	_	_
12	the	_	DT	DT	_	13	det	_	_
13	weapons	_	NNS	NNS	_	16	nsubjpass	_	_
14	were	_	VBD	VBD	_	16	auxpass	_	_
15	not	_	RB	RB	_	16	neg	_	_
16	unloaded	_	JJ	JJ	_	10	ccomp	_	_
17	from	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	ship	_	NN	NN	_	17	pobj	_	_
20	and	_	CC	CC	_	16	cc	_	_
21	sold	_	VBN	VBN	_	16	conj	_	_
22	to	_	TO	TO	_	21	prep	_	_
23	Islamist	_	JJ	JJ	_	24	amod	_	_
24	insurgents	_	NNS	NNS	_	22	pobj	_	_
25	in	_	IN	IN	_	24	prep	_	_
26	Somalia	_	NNP	NNP	_	25	pobj	_	_
27	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, s3 / sell-01)
(a / and, op, u / unload-02)
(c2 / country, name, n3 / name)
(e / ensure-01, ARG0, m / military)
(e / ensure-01, ARG1, a / and)
(i / insurgent, location, c2 / country)
(i / insurgent, mod, r / religious-group)
(n2 / name, op, "Islamism")
(n3 / name, op, "Somalia")
(p / prioritize-01, ARG0, m / military)
(p / prioritize-01, ARG1, e / ensure-01)
(r / religious-group, name, n2 / name)
(s / state-01, ARG0, m / military)
(s / state-01, ARG1, p / prioritize-01)
(s3 / sell-01, ARG1, w / weapon)
(s3 / sell-01, ARG2, i / insurgent)
(u / unload-02, ARG1, s2 / ship)
(u / unload-02, ARG2, w / weapon)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(2, 1, 0),Somalia,(country :name (name :op "Somalia")),false), Span(23,24,List(3),insurgents,insurgent,false), Span(22,23,List(6, 5, 4),Islamist,(religious-group :name (name :op "Islamism")),false), Span(20,21,List(7),sold,sell-01,false), Span(9,10,List(8),ensure,ensure-01,false)),Map(2 -> "Somalia", 5 -> name, 8 -> ensure-01, 7 -> sell-01, 1 -> name, 4 -> religious-group, 6 -> "Islamism", 0 -> country, 3 -> insurgent),Map(e -> ensure-01, n -> name, s -> sell-01, r -> religious-group, i -> insurgent, c -> country, n2 -> name))),[Ljava.lang.String;@b558294,Annotation([Ljava.lang.String;@bb095,[Ljava.lang.String;@777c350f,[Ljava.lang.String;@27aae97b),Annotation([Ljava.lang.String;@4c9e38,[Ljava.lang.String;@5d1e09bc,[Ledu.cmu.lti.nlp.amr.Dependency;@4bdc8b5d),Annotation([Ljava.lang.String;@3bcd426c,[Ljava.lang.String;@5f14a673,[Ljava.lang.String;@726a17c4),Annotation([Ljava.lang.String;@5dc3fcb7,[Ljava.lang.String;@c4c0b41,[Ledu.cmu.lti.nlp.amr.Entity;@76911385))
AMR:
(c / country, name, n / name)
(e / ensure-01, ARG1, i / insurgent)
(i / insurgent, mod, r / religious-group)
(n / name, op, "Somalia")
(n2 / name, op, "Islamism")
(r / religious-group, name, n2 / name)
(s / sell-01, ARG1, i / insurgent)
(s / sell-01, location, c / country)

Decoded in 124,140 microseconds
Sentence: The pirates have denied interest in the weapons and claimed to have been unaware that the cargo included tanks when they hijacked the ship.

Spans:
Span 16-17:  cargo => cargo
Span 9-10:  claimed => claim-01
Span 3-4:  denied => deny-01
Span 21-22:  hijacked => hijack-01
Span 4-5:  interest => interest-01
Span 1-2:  pirates => pirate
Span 18-19:  tanks => tank

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 16-17:  cargo => cargo
Oracle Span 9-10:  claimed => claim-01
Oracle Span 3-4:  denied => deny-01
Oracle Span 21-22:  hijacked => hijack-01
Oracle Span 17-18:  included => include-01
Oracle Span 4-5:  interest => interest-01
Oracle Span 1-2:  pirates => pirate
Oracle Span 23-24:  ship => ship
Oracle Span 18-19:  tanks => tank
Oracle Span 7-8:  weapons => weapon

Missing span: and => and
Missing span: included => include-01
Missing span: ship => ship
Missing span: weapons => weapon
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	pirates	_	NNS	NNS	_	4	nsubj	_	_
3	have	_	VBP	VBP	_	4	aux	_	_
4	denied	_	VBN	VBN	_	0	root	_	_
5	interest	_	NN	NN	_	4	dobj	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	weapons	_	NNS	NNS	_	6	pobj	_	_
9	and	_	CC	CC	_	4	cc	_	_
10	claimed	_	VBN	VBN	_	4	conj	_	_
11	to	_	TO	TO	_	14	aux	_	_
12	have	_	VB	VB	_	14	aux	_	_
13	been	_	VBN	VBN	_	14	cop	_	_
14	unaware	_	JJ	JJ	_	10	xcomp	_	_
15	that	_	IN	IN	_	18	mark	_	_
16	the	_	DT	DT	_	17	det	_	_
17	cargo	_	NN	NN	_	18	nsubj	_	_
18	included	_	VBD	VBD	_	14	ccomp	_	_
19	tanks	_	NNS	NNS	_	18	dobj	_	_
20	when	_	WRB	WRB	_	22	advmod	_	_
21	they	_	PRP	PRP	_	22	nsubj	_	_
22	hijacked	_	VBZ	VBZ	_	18	advcl	_	_
23	the	_	DT	DT	_	24	det	_	_
24	ship	_	NN	NN	_	22	dobj	_	_
25	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / claim-01)
(a / and, op, d / deny-01)
(c / claim-01, ARG0, p / pirate)
(d / deny-01, ARG0, p / pirate)
(d / deny-01, ARG1, i / interest-01)
(h / hijack-01, ARG0, p / pirate)
(h / hijack-01, ARG1, s / ship)
(i / interest-01, ARG1, p / pirate)
(i / interest-01, ARG2, w / weapon)
(i2 / include-01, ARG1, t / tank)
(i2 / include-01, ARG2, c2 / cargo)
(i2 / include-01, time, h / hijack-01)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),hijacked,hijack-01,false), Span(18,19,List(1),tanks,tank,false), Span(16,17,List(2),cargo,cargo,false), Span(9,10,List(3),claimed,claim-01,false), Span(4,5,List(4),interest,interest-01,false), Span(3,4,List(5),denied,deny-01,false), Span(1,2,List(6),pirates,pirate,false)),Map(2 -> cargo, 5 -> deny-01, 1 -> tank, 4 -> interest-01, 6 -> pirate, 0 -> hijack-01, 3 -> claim-01),Map(h -> hijack-01, t -> tank, d -> deny-01, p -> pirate, i -> interest-01, c -> cargo, c2 -> claim-01))),[Ljava.lang.String;@5467eea4,Annotation([Ljava.lang.String;@160396db,[Ljava.lang.String;@7a799159,[Ljava.lang.String;@40ab8a8),Annotation([Ljava.lang.String;@6ff37443,[Ljava.lang.String;@65cc8228,[Ledu.cmu.lti.nlp.amr.Dependency;@53093491),Annotation([Ljava.lang.String;@21719a0,[Ljava.lang.String;@76b224cd,[Ljava.lang.String;@77ee25f1),Annotation([Ljava.lang.String;@6dd93a21,[Ljava.lang.String;@57b9e423,[Ledu.cmu.lti.nlp.amr.Entity;@304a3655))
AMR:
(c2 / claim-01, ARG0, p / pirate)
(d / deny-01, ARG0, p / pirate)
(d / deny-01, ARG1, i / interest-01)
(h / hijack-01, ARG0, c / cargo)
(t / tank, location, c / cargo)
(t / tank, op, i / interest-01)

Decoded in 77,955 microseconds
Sentence: Pirate spokesman sugule Ali stated in an interview last week that the pirates' sole interest in the deal is money.

NER Entity: (person :name (name :op "Ali"))
Spans:
Span 18-19:  deal => deal-01
Span 15-16:  interest => interest-01
Span 7-8:  interview => interview-01
Span 8-9:  last => last
Span 20-21:  money => money
Span 12-13:  pirates => pirate
Span 1-2:  spokesman => (have-org-role-91 :ARG2 spokesman)

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 18-19:  deal => deal-01
Oracle Span 15-16:  interest => interest-01
Oracle Span 7-8:  interview => interview-01
Oracle Span 8-9:  last => last
Oracle Span 20-21:  money => money
Oracle Span 0-1:  Pirate => pirate
Oracle Span 14-15:  sole => sole
Oracle Span 1-2:  spokesman => (have-org-role-91 :ARG2 spokesman)
Oracle Span 4-5:  stated => state-01
Oracle Span 2-4:  sugule Ali => (person :name (name :op "Ali" :op "Sugule"))
Oracle Span 9-10:  week => week

Extra span: pirates => pirate
Missing span: sugule Ali => (person :name (name :op "Ali" :op "Sugule"))
Missing span: stated => state-01
Missing span: week => week
Missing span: sole => sole
Missing span: Pirate => pirate
Dependencies:
1	Pirate	_	NNP	NNP	_	4	nn	_	_
2	spokesman	_	NN	NN	_	4	nn	_	_
3	sugule	_	NNP	NNP	_	4	nn	_	_
4	Ali	_	NNP	NNP	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	an	_	DT	DT	_	8	det	_	_
8	interview	_	NN	NN	_	6	pobj	_	_
9	last	_	JJ	JJ	_	10	amod	_	_
10	week	_	NN	NN	_	5	tmod	_	_
11	that	_	IN	IN	_	21	mark	_	_
12	the	_	DT	DT	_	13	det	_	_
13	pirates	_	NNS	NNS	_	16	poss	_	_
14	'	_	POS	POS	_	13	possessive	_	_
15	sole	_	JJ	JJ	_	16	amod	_	_
16	interest	_	NN	NN	_	21	nsubj	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	deal	_	NN	NN	_	17	pobj	_	_
20	is	_	VBZ	VBZ	_	21	cop	_	_
21	money	_	NN	NN	_	5	ccomp	_	_
22	.	_	.	.	_	5	punct	_	_

Oracle:
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, p / pirate)
(h / have-org-role-91, ARG2, s2 / spokesman)
(i / interest-01, ARG0, m / money)
(i / interest-01, ARG1, p / pirate)
(i / interest-01, ARG2, d / deal-01)
(i / interest-01, mod, s3 / sole)
(n / name, op, "Ali")
(n / name, op, "Sugule")
(p2 / person, name, n / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, i / interest-01)
(s / state-01, medium, i2 / interview-01)
(s / state-01, time, w / week)
(w / week, mod, l / last)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),money,money,false), Span(18,19,List(1),deal,deal-01,false), Span(15,16,List(2),interest,interest-01,false), Span(12,13,List(3),pirates,pirate,false), Span(8,9,List(4),last,last,false), Span(7,8,List(5),interview,interview-01,false), Span(1,2,List(7, 6),spokesman,(have-org-role-91 :ARG2 spokesman),false)),Map(2 -> interest-01, 5 -> interview-01, 7 -> spokesman, 1 -> deal-01, 4 -> last, 6 -> have-org-role-91, 0 -> money, 3 -> pirate),Map(h -> have-org-role-91, s -> spokesman, d -> deal-01, m -> money, p -> pirate, i2 -> interview-01, i -> interest-01, l -> last))),[Ljava.lang.String;@368d5c00,Annotation([Ljava.lang.String;@12a160c2,[Ljava.lang.String;@aa10649,[Ljava.lang.String;@6b3871d6),Annotation([Ljava.lang.String;@37095ded,[Ljava.lang.String;@2eb79cbe,[Ledu.cmu.lti.nlp.amr.Dependency;@2ca6546f),Annotation([Ljava.lang.String;@43826ec,[Ljava.lang.String;@7923f5b3,[Ljava.lang.String;@6b63d445),Annotation([Ljava.lang.String;@7578e06a,[Ljava.lang.String;@30b2b76f,[Ledu.cmu.lti.nlp.amr.Entity;@56da52a7))
AMR:
(d / deal-01, ARG1, l / last)
(h / have-org-role-91, ARG1, i / interest-01)
(h / have-org-role-91, ARG2, s / spokesman)
(i / interest-01, ARG0, p / pirate)
(i / interest-01, ARG1, d / deal-01)
(i2 / interview-01, ARG1, p / pirate)
(m / money, domain, i / interest-01)

Decoded in 138,000 microseconds
Sentence: 2008-11-28

mkDayMonthYear(2008-11-28,28,11,2008)
mkDayMonthYear(2008-11-28,28,11,2008)
Spans:
Span 0-1:  2008-11-28 => (date-entity :day 28 :month 11 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2008-11-28 => (date-entity :year 2008 :month 11 :day 28)

Incorrect span: 2008-11-28 => (date-entity :day 28 :month 11 :year 2008)
Missing span: 2008-11-28 => (date-entity :year 2008 :month 11 :day 28)
Dependencies:
1	2008-11-28	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 28)
(d / date-entity, month, 11)
(d / date-entity, year, 2008)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-11-28,(date-entity :day 28 :month 11 :year 2008),false)),Map(2 -> 11, 1 -> 28, 0 -> date-entity, 3 -> 2008),Map(2 -> 28, d -> date-entity, 1 -> 11, 22 -> 2008))),[Ljava.lang.String;@23ee75c5,Annotation([Ljava.lang.String;@11a7ba62,[Ljava.lang.String;@340b7ef6,[Ljava.lang.String;@30404dba),Annotation([Ljava.lang.String;@6050462a,[Ljava.lang.String;@4c0884e8,[Ledu.cmu.lti.nlp.amr.Dependency;@231baf51),Annotation([Ljava.lang.String;@11841b15,[Ljava.lang.String;@73877e19,[Ljava.lang.String;@7b208b45),Annotation([Ljava.lang.String;@5bfc257,[Ljava.lang.String;@34523d46,[Ledu.cmu.lti.nlp.amr.Entity;@7cedfa63))
AMR:
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2008)

Decoded in 8,630 microseconds
Sentence: Afghanistan (AF)

NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Afghanistan => (country :name (name :op "Afghanistan"))

Incorrect span:  => amr-empty
Missing span: Afghanistan => (country :name (name :op "Afghanistan"))
Dependencies:
1	Afghanistan	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	AF	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Afghanistan")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@3e83c18,Annotation([Ljava.lang.String;@783efb48,[Ljava.lang.String;@5d235104,[Ljava.lang.String;@4e8e8621),Annotation([Ljava.lang.String;@c446b14,[Ljava.lang.String;@3af356f,[Ledu.cmu.lti.nlp.amr.Dependency;@4443ef6f),Annotation([Ljava.lang.String;@7e46d648,[Ljava.lang.String;@51751e5f,[Ljava.lang.String;@2b0b4d53),Annotation([Ljava.lang.String;@7068f7ca,[Ljava.lang.String;@38548b19,[Ledu.cmu.lti.nlp.amr.Entity;@41aaedaa))
AMR:


Decoded in 4,751 microseconds
Sentence: Narcotics

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Narcotics => narcotic

Incorrect span:  => amr-empty
Missing span: Narcotics => narcotic
Dependencies:
1	Narcotics	_	NNP	NNP	_	0	root	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@303a5119,Annotation([Ljava.lang.String;@75b3673,[Ljava.lang.String;@1bcb79c2,[Ljava.lang.String;@d1a10ac),Annotation([Ljava.lang.String;@6fca2a8f,[Ljava.lang.String;@31fc71ab,[Ledu.cmu.lti.nlp.amr.Dependency;@71391b3f),Annotation([Ljava.lang.String;@2cfbeac4,[Ljava.lang.String;@12db3386,[Ljava.lang.String;@4078695f),Annotation([Ljava.lang.String;@79a1728c,[Ljava.lang.String;@a7f0ab6,[Ledu.cmu.lti.nlp.amr.Entity;@41f35f7c))
AMR:


Decoded in 1,434 microseconds
Sentence: Head of the U.N. drug office Antonio Maria Costa said that Afghanistan has produced so much opium in recent years that the Taliban are cutting back poppy cultivation and stockpiling raw opium in an effort to support prices and preserve a major source of financing for the insurgency.

NER Entity: (organization :name (name :op "U.N."))
NER Entity: (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (organization :name (name :op "Taliban"))
Spans:
Span 6-9:  Antonio Maria Costa => (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
Span 27-28:  cultivation => cultivate-01
Span 4-5:  drug => drug
Span 34-35:  effort => effort
Span 44-45:  financing => finance-01
Span 47-48:  insurgency => insurgency
Span 41-42:  major => major
Span 15-16:  much => much
Span 31-32:  opium => opium
Span 16-17:  opium => opium
Span 26-27:  poppy => poppy
Span 39-40:  preserve => preserve-01
Span 13-14:  produced => produce-01
Span 30-31:  raw => raw
Span 18-19:  recent => recent
Span 9-10:  said => say-01
Span 29-30:  stockpiling => stockpile-01
Span 36-37:  support => support-01
Span 19-20:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 11-12:  Afghanistan => (country :name (name :op "Afghanistan"))
Oracle Span 28-29:  and => and
Oracle Span 38-39:  and => and
Oracle Span 6-9:  Antonio Maria Costa => (person :name (name :op "Costa" :op "Maria" :op "Antonio"))
Oracle Span 27-28:  cultivation => cultivate-01
Oracle Span 24-25:  cutting => cut-05
Oracle Span 34-35:  effort => effort
Oracle Span 44-45:  financing => finance-01
Oracle Span 0-1:  Head => head-01
Oracle Span 47-48:  insurgency => insurgency
Oracle Span 41-42:  major => major
Oracle Span 15-16:  much => much
Oracle Span 16-17:  opium => opium
Oracle Span 31-32:  opium => opium
Oracle Span 26-27:  poppy => poppy
Oracle Span 39-40:  preserve => preserve-01
Oracle Span 37-38:  prices => (thing :ARG2-of price-01)
Oracle Span 13-14:  produced => produce-01
Oracle Span 30-31:  raw => raw
Oracle Span 18-19:  recent => recent
Oracle Span 9-10:  said => say-01
Oracle Span 14-15:  so => so
Oracle Span 42-43:  source => source-02
Oracle Span 29-30:  stockpiling => stockpile-01
Oracle Span 36-37:  support => support-01
Oracle Span 22-23:  Taliban => (criminal-organization :name (name :op "Taliban"))
Oracle Span 3-6:  U.N. drug office => (organization :name (name :op "Office" :op "Drug" :op "U.N."))
Oracle Span 19-20:  years => year

Incorrect span: years => (temporal-quantity :unit year)
Incorrect span: Antonio Maria Costa => (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
Extra span: drug => drug
Missing span: Antonio Maria Costa => (person :name (name :op "Costa" :op "Maria" :op "Antonio"))
Missing span: U.N. drug office => (organization :name (name :op "Office" :op "Drug" :op "U.N."))
Missing span: Afghanistan => (country :name (name :op "Afghanistan"))
Missing span: Taliban => (criminal-organization :name (name :op "Taliban"))
Missing span: and => and
Missing span: and => and
Missing span: source => source-02
Missing span: prices => (thing :ARG2-of price-01)
Missing span: cutting => cut-05
Missing span: years => year
Missing span: so => so
Missing span: Head => head-01
Dependencies:
1	Head	_	NNP	NNP	_	10	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	9	det	_	_
4	U.N.	_	NNP	NNP	_	9	nn	_	_
5	drug	_	NN	NN	_	9	nn	_	_
6	office	_	NN	NN	_	9	nn	_	_
7	Antonio	_	NNP	NNP	_	9	nn	_	_
8	Maria	_	NNP	NNP	_	9	nn	_	_
9	Costa	_	NNP	NNP	_	2	pobj	_	_
10	said	_	VBD	VBD	_	0	root	_	_
11	that	_	IN	IN	_	14	mark	_	_
12	Afghanistan	_	NNP	NNP	_	14	nsubj	_	_
13	has	_	VBZ	VBZ	_	14	aux	_	_
14	produced	_	VBN	VBN	_	10	ccomp	_	_
15	so	_	RB	RB	_	16	advmod	_	_
16	much	_	JJ	JJ	_	17	amod	_	_
17	opium	_	NN	NN	_	14	dobj	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	recent	_	JJ	JJ	_	20	amod	_	_
20	years	_	NNS	NNS	_	18	pobj	_	_
21	that	_	IN	IN	_	25	mark	_	_
22	the	_	DT	DT	_	23	det	_	_
23	Taliban	_	NNP	NNP	_	25	nsubj	_	_
24	are	_	VBP	VBP	_	25	aux	_	_
25	cutting	_	VBG	VBG	_	14	ccomp	_	_
26	back	_	RP	RP	_	25	prt	_	_
27	poppy	_	JJ	JJ	_	28	amod	_	_
28	cultivation	_	NN	NN	_	25	dobj	_	_
29	and	_	CC	CC	_	28	cc	_	_
30	stockpiling	_	NN	NN	_	32	nn	_	_
31	raw	_	JJ	JJ	_	32	amod	_	_
32	opium	_	NN	NN	_	28	conj	_	_
33	in	_	IN	IN	_	28	prep	_	_
34	an	_	DT	DT	_	35	det	_	_
35	effort	_	NN	NN	_	33	pobj	_	_
36	to	_	TO	TO	_	37	aux	_	_
37	support	_	VB	VB	_	35	vmod	_	_
38	prices	_	NNS	NNS	_	37	dobj	_	_
39	and	_	CC	CC	_	37	cc	_	_
40	preserve	_	VB	VB	_	37	conj	_	_
41	a	_	DT	DT	_	43	det	_	_
42	major	_	JJ	JJ	_	43	amod	_	_
43	source	_	NN	NN	_	40	dobj	_	_
44	of	_	IN	IN	_	43	prep	_	_
45	financing	_	NN	NN	_	44	pobj	_	_
46	for	_	IN	IN	_	40	prep	_	_
47	the	_	DT	DT	_	48	det	_	_
48	insurgency	_	NN	NN	_	46	pobj	_	_
49	.	_	.	.	_	10	punct	_	_

Oracle:
(a / and, op, c3 / cut-05)
(a / and, op, s3 / stockpile-01)
(a / and, purpose, e / effort)
(a2 / and, op, p6 / preserve-01)
(a2 / and, op, s4 / support-01)
(c / country, name, n3 / name)
(c3 / cut-05, ARG0, c4 / criminal-organization)
(c3 / cut-05, ARG1, c5 / cultivate-01)
(c4 / criminal-organization, name, n4 / name)
(c5 / cultivate-01, ARG1, p4 / poppy)
(e / effort, purpose, a2 / and)
(f / finance-01, ARG1, i / insurgency)
(h2 / head-01, ARG0, p / person)
(h2 / head-01, ARG1, o / organization)
(m / much, mod, s2 / so)
(n / name, op, "Antonio")
(n / name, op, "Costa")
(n / name, op, "Maria")
(n2 / name, op, "Drug")
(n2 / name, op, "Office")
(n2 / name, op, "U.N.")
(n3 / name, op, "Afghanistan")
(n4 / name, op, "Taliban")
(o / organization, name, n2 / name)
(o2 / opium, quant, m / much)
(o3 / opium, mod, r2 / raw)
(p / person, name, n / name)
(p3 / produce-01, ARG0, c / country)
(p3 / produce-01, ARG1, o2 / opium)
(p3 / produce-01, time, y / year)
(p5 / price-01, ARG2, t / thing)
(p6 / preserve-01, ARG0, c4 / criminal-organization)
(p6 / preserve-01, ARG1, s5 / source-02)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, p3 / produce-01)
(s3 / stockpile-01, ARG0, c4 / criminal-organization)
(s3 / stockpile-01, ARG1, o3 / opium)
(s4 / support-01, ARG0, c4 / criminal-organization)
(s4 / support-01, ARG1, t / thing)
(s5 / source-02, ARG1, f / finance-01)
(s5 / source-02, mod, m2 / major)
(y / year, mod, r / recent)

Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),insurgency,insurgency,false), Span(44,45,List(1),financing,finance-01,false), Span(41,42,List(2),major,major,false), Span(39,40,List(3),preserve,preserve-01,false), Span(36,37,List(4),support,support-01,false), Span(34,35,List(5),effort,effort,false), Span(31,32,List(6),opium,opium,false), Span(30,31,List(7),raw,raw,false), Span(29,30,List(8),stockpiling,stockpile-01,false), Span(27,28,List(9),cultivation,cultivate-01,false), Span(26,27,List(10),poppy,poppy,false), Span(19,20,List(12, 11),years,(temporal-quantity :unit year),false), Span(18,19,List(13),recent,recent,false), Span(16,17,List(14),opium,opium,false), Span(15,16,List(15),much,much,false), Span(13,14,List(16),produced,produce-01,false), Span(9,10,List(17),said,say-01,false), Span(6,9,List(22, 21, 20, 19, 18),Antonio Maria Costa,(person :name (name :op "Antonio" :op "Maria" :op "Costa")),false), Span(4,5,List(23),drug,drug,false)),Map(2 -> major, 5 -> effort, 12 -> year, 15 -> much, 8 -> stockpile-01, 21 -> "Maria", 18 -> person, 7 -> raw, 17 -> say-01, 1 -> finance-01, 23 -> drug, 4 -> support-01, 11 -> temporal-quantity, 14 -> opium, 20 -> "Antonio", 6 -> opium, 22 -> "Costa", 0 -> insurgency, 9 -> cultivate-01, 16 -> produce-01, 19 -> name, 3 -> preserve-01, 10 -> poppy, 13 -> recent),Map(e -> effort, n -> name, s2 -> stockpile-01, t -> temporal-quantity, m2 -> much, p2 -> poppy, s -> support-01, d -> drug, m -> major, r2 -> recent, p -> preserve-01, y -> year, p4 -> person, o2 -> opium, i -> insurgency, r -> raw, s3 -> say-01, c -> cultivate-01, f -> finance-01, o -> opium, p3 -> produce-01))),[Ljava.lang.String;@42c2f48c,Annotation([Ljava.lang.String;@3005db4a,[Ljava.lang.String;@425d5d46,[Ljava.lang.String;@198ef2ce),Annotation([Ljava.lang.String;@4cbd03e7,[Ljava.lang.String;@52fc5eb1,[Ledu.cmu.lti.nlp.amr.Dependency;@7a639ec5),Annotation([Ljava.lang.String;@14151bc5,[Ljava.lang.String;@3013909b,[Ljava.lang.String;@2a49fe),Annotation([Ljava.lang.String;@66596a88,[Ljava.lang.String;@5aae8eb5,[Ledu.cmu.lti.nlp.amr.Entity;@76954a33))
AMR:
(c / cultivate-01, ARG0, e / effort)
(c / cultivate-01, ARG1, o / opium)
(c / cultivate-01, manner, p2 / poppy)
(e / effort, purpose, s / support-01)
(f / finance-01, ARG1, i / insurgency)
(n / name, op, "Antonio")
(n / name, op, "Costa")
(n / name, op, "Maria")
(o / opium, mod, r / raw)
(o2 / opium, quant, m2 / much)
(p / preserve-01, ARG1, s / support-01)
(p / preserve-01, ARG2, f / finance-01)
(p3 / produce-01, ARG1, o2 / opium)
(p3 / produce-01, ARG2, d / drug)
(p4 / person, name, n / name)
(s / support-01, ARG0, p4 / person)
(s2 / stockpile-01, ARG0, m / major)
(s2 / stockpile-01, ARG1, o / opium)
(s3 / say-01, ARG0, p4 / person)
(s3 / say-01, ARG1, p3 / produce-01)
(t / temporal-quantity, mod, p2 / poppy)
(t / temporal-quantity, time, r2 / recent)
(t / temporal-quantity, unit, y / year)

Decoded in 1,690,559 microseconds
Sentence: Head of the U.N. drug office Antonio Maria Costa said that Afghanistan has produced so much opium in recent years that the Taliban are cutting back poppy cultivation and stockpiling raw opium in an effort to support prices and preserve a major source of financing for the insurgency.

NER Entity: (organization :name (name :op "U.N."))
NER Entity: (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (organization :name (name :op "Taliban"))
Spans:
Span 6-9:  Antonio Maria Costa => (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
Span 27-28:  cultivation => cultivate-01
Span 4-5:  drug => drug
Span 34-35:  effort => effort
Span 44-45:  financing => finance-01
Span 47-48:  insurgency => insurgency
Span 41-42:  major => major
Span 15-16:  much => much
Span 31-32:  opium => opium
Span 16-17:  opium => opium
Span 26-27:  poppy => poppy
Span 39-40:  preserve => preserve-01
Span 13-14:  produced => produce-01
Span 30-31:  raw => raw
Span 18-19:  recent => recent
Span 9-10:  said => say-01
Span 29-30:  stockpiling => stockpile-01
Span 36-37:  support => support-01
Span 19-20:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 11-12:  Afghanistan => (country :name (name :op "Afghanistan"))
Oracle Span 28-29:  and => and
Oracle Span 38-39:  and => and
Oracle Span 6-9:  Antonio Maria Costa => (person :name (name :op "Costa" :op "Maria" :op "Antonio"))
Oracle Span 27-28:  cultivation => cultivate-01
Oracle Span 24-25:  cutting => cut-05
Oracle Span 34-35:  effort => effort
Oracle Span 44-45:  financing => finance-01
Oracle Span 0-1:  Head => head-01
Oracle Span 47-48:  insurgency => insurgency
Oracle Span 41-42:  major => major
Oracle Span 15-16:  much => much
Oracle Span 16-17:  opium => opium
Oracle Span 31-32:  opium => opium
Oracle Span 26-27:  poppy => poppy
Oracle Span 39-40:  preserve => preserve-01
Oracle Span 37-38:  prices => (thing :ARG2-of price-01)
Oracle Span 13-14:  produced => produce-01
Oracle Span 30-31:  raw => raw
Oracle Span 18-19:  recent => recent
Oracle Span 9-10:  said => say-01
Oracle Span 14-15:  so => so
Oracle Span 42-43:  source => source-02
Oracle Span 29-30:  stockpiling => stockpile-01
Oracle Span 36-37:  support => support-01
Oracle Span 22-23:  Taliban => (criminal-organization :name (name :op "Taliban"))
Oracle Span 3-6:  U.N. drug office => (organization :name (name :op "Office" :op "Drug" :op "U.N."))
Oracle Span 19-20:  years => year

Incorrect span: years => (temporal-quantity :unit year)
Incorrect span: Antonio Maria Costa => (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
Extra span: drug => drug
Missing span: Antonio Maria Costa => (person :name (name :op "Costa" :op "Maria" :op "Antonio"))
Missing span: U.N. drug office => (organization :name (name :op "Office" :op "Drug" :op "U.N."))
Missing span: Afghanistan => (country :name (name :op "Afghanistan"))
Missing span: Taliban => (criminal-organization :name (name :op "Taliban"))
Missing span: and => and
Missing span: and => and
Missing span: source => source-02
Missing span: prices => (thing :ARG2-of price-01)
Missing span: cutting => cut-05
Missing span: years => year
Missing span: so => so
Missing span: Head => head-01
Dependencies:
1	Head	_	NNP	NNP	_	10	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	9	det	_	_
4	U.N.	_	NNP	NNP	_	9	nn	_	_
5	drug	_	NN	NN	_	9	nn	_	_
6	office	_	NN	NN	_	9	nn	_	_
7	Antonio	_	NNP	NNP	_	9	nn	_	_
8	Maria	_	NNP	NNP	_	9	nn	_	_
9	Costa	_	NNP	NNP	_	2	pobj	_	_
10	said	_	VBD	VBD	_	0	root	_	_
11	that	_	IN	IN	_	14	mark	_	_
12	Afghanistan	_	NNP	NNP	_	14	nsubj	_	_
13	has	_	VBZ	VBZ	_	14	aux	_	_
14	produced	_	VBN	VBN	_	10	ccomp	_	_
15	so	_	RB	RB	_	16	advmod	_	_
16	much	_	JJ	JJ	_	17	amod	_	_
17	opium	_	NN	NN	_	14	dobj	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	recent	_	JJ	JJ	_	20	amod	_	_
20	years	_	NNS	NNS	_	18	pobj	_	_
21	that	_	IN	IN	_	25	mark	_	_
22	the	_	DT	DT	_	23	det	_	_
23	Taliban	_	NNP	NNP	_	25	nsubj	_	_
24	are	_	VBP	VBP	_	25	aux	_	_
25	cutting	_	VBG	VBG	_	14	ccomp	_	_
26	back	_	RP	RP	_	25	prt	_	_
27	poppy	_	JJ	JJ	_	28	amod	_	_
28	cultivation	_	NN	NN	_	25	dobj	_	_
29	and	_	CC	CC	_	28	cc	_	_
30	stockpiling	_	NN	NN	_	32	nn	_	_
31	raw	_	JJ	JJ	_	32	amod	_	_
32	opium	_	NN	NN	_	28	conj	_	_
33	in	_	IN	IN	_	28	prep	_	_
34	an	_	DT	DT	_	35	det	_	_
35	effort	_	NN	NN	_	33	pobj	_	_
36	to	_	TO	TO	_	37	aux	_	_
37	support	_	VB	VB	_	35	vmod	_	_
38	prices	_	NNS	NNS	_	37	dobj	_	_
39	and	_	CC	CC	_	37	cc	_	_
40	preserve	_	VB	VB	_	37	conj	_	_
41	a	_	DT	DT	_	43	det	_	_
42	major	_	JJ	JJ	_	43	amod	_	_
43	source	_	NN	NN	_	40	dobj	_	_
44	of	_	IN	IN	_	43	prep	_	_
45	financing	_	NN	NN	_	44	pobj	_	_
46	for	_	IN	IN	_	40	prep	_	_
47	the	_	DT	DT	_	48	det	_	_
48	insurgency	_	NN	NN	_	46	pobj	_	_
49	.	_	.	.	_	10	punct	_	_

Oracle:
(a / and, op, c3 / cut-05)
(a / and, op, s3 / stockpile-01)
(a / and, purpose, e / effort)
(a2 / and, op, p6 / preserve-01)
(a2 / and, op, s4 / support-01)
(c / country, name, n3 / name)
(c3 / cut-05, ARG0, c4 / criminal-organization)
(c3 / cut-05, ARG1, c5 / cultivate-01)
(c4 / criminal-organization, name, n4 / name)
(c5 / cultivate-01, ARG1, p4 / poppy)
(e / effort, purpose, a2 / and)
(f / finance-01, beneficiary, i / insurgency)
(h2 / head-01, ARG0, p / person)
(h2 / head-01, ARG1, o / organization)
(m / much, mod, s2 / so)
(n / name, op, "Antonio")
(n / name, op, "Costa")
(n / name, op, "Maria")
(n2 / name, op, "Drug")
(n2 / name, op, "Office")
(n2 / name, op, "U.N.")
(n3 / name, op, "Afghanistan")
(n4 / name, op, "Taliban")
(o / organization, name, n2 / name)
(o2 / opium, quant, m / much)
(o3 / opium, mod, r2 / raw)
(p / person, name, n / name)
(p3 / produce-01, ARG0, c / country)
(p3 / produce-01, ARG1, o2 / opium)
(p3 / produce-01, time, y / year)
(p5 / price-01, ARG2, t / thing)
(p6 / preserve-01, ARG0, c4 / criminal-organization)
(p6 / preserve-01, ARG1, s5 / source-02)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, p3 / produce-01)
(s3 / stockpile-01, ARG0, c4 / criminal-organization)
(s3 / stockpile-01, ARG1, o3 / opium)
(s4 / support-01, ARG0, c4 / criminal-organization)
(s4 / support-01, ARG1, t / thing)
(s5 / source-02, ARG1, f / finance-01)
(s5 / source-02, mod, m2 / major)
(y / year, mod, r / recent)

Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),insurgency,insurgency,false), Span(44,45,List(1),financing,finance-01,false), Span(41,42,List(2),major,major,false), Span(39,40,List(3),preserve,preserve-01,false), Span(36,37,List(4),support,support-01,false), Span(34,35,List(5),effort,effort,false), Span(31,32,List(6),opium,opium,false), Span(30,31,List(7),raw,raw,false), Span(29,30,List(8),stockpiling,stockpile-01,false), Span(27,28,List(9),cultivation,cultivate-01,false), Span(26,27,List(10),poppy,poppy,false), Span(19,20,List(12, 11),years,(temporal-quantity :unit year),false), Span(18,19,List(13),recent,recent,false), Span(16,17,List(14),opium,opium,false), Span(15,16,List(15),much,much,false), Span(13,14,List(16),produced,produce-01,false), Span(9,10,List(17),said,say-01,false), Span(6,9,List(22, 21, 20, 19, 18),Antonio Maria Costa,(person :name (name :op "Antonio" :op "Maria" :op "Costa")),false), Span(4,5,List(23),drug,drug,false)),Map(2 -> major, 5 -> effort, 12 -> year, 15 -> much, 8 -> stockpile-01, 21 -> "Maria", 18 -> person, 7 -> raw, 17 -> say-01, 1 -> finance-01, 23 -> drug, 4 -> support-01, 11 -> temporal-quantity, 14 -> opium, 20 -> "Antonio", 6 -> opium, 22 -> "Costa", 0 -> insurgency, 9 -> cultivate-01, 16 -> produce-01, 19 -> name, 3 -> preserve-01, 10 -> poppy, 13 -> recent),Map(e -> effort, n -> name, s2 -> stockpile-01, t -> temporal-quantity, m2 -> much, p2 -> poppy, s -> support-01, d -> drug, m -> major, r2 -> recent, p -> preserve-01, y -> year, p4 -> person, o2 -> opium, i -> insurgency, r -> raw, s3 -> say-01, c -> cultivate-01, f -> finance-01, o -> opium, p3 -> produce-01))),[Ljava.lang.String;@24a298a6,Annotation([Ljava.lang.String;@982bb90,[Ljava.lang.String;@27f74733,[Ljava.lang.String;@7bef452c),Annotation([Ljava.lang.String;@4bb8855f,[Ljava.lang.String;@57fae983,[Ledu.cmu.lti.nlp.amr.Dependency;@4a29f290),Annotation([Ljava.lang.String;@4bee18dc,[Ljava.lang.String;@44f3fe83,[Ljava.lang.String;@44c5a16f),Annotation([Ljava.lang.String;@417d6615,[Ljava.lang.String;@7a6ebe1e,[Ledu.cmu.lti.nlp.amr.Entity;@21325036))
AMR:
(c / cultivate-01, ARG0, e / effort)
(c / cultivate-01, ARG1, o / opium)
(c / cultivate-01, manner, p2 / poppy)
(e / effort, purpose, s / support-01)
(f / finance-01, ARG1, i / insurgency)
(n / name, op, "Antonio")
(n / name, op, "Costa")
(n / name, op, "Maria")
(o / opium, mod, r / raw)
(o2 / opium, quant, m2 / much)
(p / preserve-01, ARG1, s / support-01)
(p / preserve-01, ARG2, f / finance-01)
(p3 / produce-01, ARG1, o2 / opium)
(p3 / produce-01, ARG2, d / drug)
(p4 / person, name, n / name)
(s / support-01, ARG0, p4 / person)
(s2 / stockpile-01, ARG0, m / major)
(s2 / stockpile-01, ARG1, o / opium)
(s3 / say-01, ARG0, p4 / person)
(s3 / say-01, ARG1, p3 / produce-01)
(t / temporal-quantity, mod, p2 / poppy)
(t / temporal-quantity, time, r2 / recent)
(t / temporal-quantity, unit, y / year)

Decoded in 1,690,363 microseconds
Sentence: Costa said this to reporters last week as the U.N. Drug Office Office prepared to release its latest survey of Afghanistan's opium crop.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 23-24:  crop => crop
Span 10-11:  Drug => drug
Span 5-6:  last => last
Span 17-18:  latest => (late :degree most)
Span 22-23:  opium => opium
Span 15-16:  release => release-01
Span 4-5:  reporters => (person :ARG0-of report-01)
Span 1-2:  said => say-01
Span 18-19:  survey => survey-01
Span 2-3:  this => this

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 20-21:  Afghanistan => (country :name (name :op "Afghanistan"))
Oracle Span 0-1:  Costa => (person :name (name :op "Costa"))
Oracle Span 23-24:  crop => crop
Oracle Span 5-6:  last => last
Oracle Span 17-18:  latest => (late :degree most)
Oracle Span 22-23:  opium => opium
Oracle Span 13-14:  prepared => prepare-01
Oracle Span 15-16:  release => release-01
Oracle Span 4-5:  reporters => (person :ARG0-of report-01)
Oracle Span 1-2:  said => say-01
Oracle Span 18-19:  survey => survey-01
Oracle Span 2-3:  this => this
Oracle Span 9-12:  U.N. Drug Office => (organization :name (name :op "Office" :op "Drug" :op "U.N."))
Oracle Span 6-7:  week => week

Extra span: Drug => drug
Missing span: Costa => (person :name (name :op "Costa"))
Missing span: U.N. Drug Office => (organization :name (name :op "Office" :op "Drug" :op "U.N."))
Missing span: Afghanistan => (country :name (name :op "Afghanistan"))
Missing span: prepared => prepare-01
Missing span: week => week
Dependencies:
1	Costa	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	this	_	DT	DT	_	2	dobj	_	_
4	to	_	TO	TO	_	2	prep	_	_
5	reporters	_	NNS	NNS	_	4	pobj	_	_
6	last	_	JJ	JJ	_	7	amod	_	_
7	week	_	NN	NN	_	2	tmod	_	_
8	as	_	IN	IN	_	2	prep	_	_
9	the	_	DT	DT	_	13	det	_	_
10	U.N.	_	NNP	NNP	_	13	nn	_	_
11	Drug	_	NNP	NNP	_	13	nn	_	_
12	Office	_	NNP	NNP	_	13	nn	_	_
13	Office	_	NNP	NNP	_	8	pobj	_	_
14	prepared	_	VBN	VBN	_	13	vmod	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	release	_	VB	VB	_	14	xcomp	_	_
17	its	_	PRP$	PRP$	_	19	poss	_	_
18	latest	_	JJS	JJS	_	19	amod	_	_
19	survey	_	NN	NN	_	16	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	Afghanistan	_	NNP	NNP	_	24	poss	_	_
22	's	_	POS	POS	_	21	possessive	_	_
23	opium	_	NN	NN	_	24	nn	_	_
24	crop	_	NN	NN	_	20	pobj	_	_
25	.	_	.	.	_	2	punct	_	_

Oracle:
(c / crop, mod, o / opium)
(c / crop, poss, c2 / country)
(c2 / country, name, n2 / name)
(l2 / late, degree, m / most)
(n / name, op, "Costa")
(n2 / name, op, "Afghanistan")
(n3 / name, op, "Drug")
(n3 / name, op, "Office")
(n3 / name, op, "U.N.")
(o2 / organization, name, n3 / name)
(p / person, name, n / name)
(p3 / prepare-01, ARG0, o2 / organization)
(p3 / prepare-01, ARG3, r2 / release-01)
(r / report-01, ARG0, p2 / person)
(r2 / release-01, ARG1, s2 / survey-01)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, t / this)
(s / say-01, ARG2, p2 / person)
(s / say-01, time, p3 / prepare-01)
(s / say-01, time, w / week)
(s2 / survey-01, ARG0, o2 / organization)
(s2 / survey-01, ARG2, c / crop)
(s2 / survey-01, mod, l2 / late)
(w / week, mod, l / last)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),crop,crop,false), Span(22,23,List(1),opium,opium,false), Span(18,19,List(2),survey,survey-01,false), Span(17,18,List(4, 3),latest,(late :degree most),false), Span(15,16,List(5),release,release-01,false), Span(10,11,List(6),Drug,drug,false), Span(5,6,List(7),last,last,false), Span(4,5,List(9, 8),reporters,(person :ARG0-of report-01),false), Span(2,3,List(10),this,this,false), Span(1,2,List(11),said,say-01,false)),Map(2 -> survey-01, 5 -> release-01, 8 -> person, 7 -> last, 1 -> opium, 11 -> say-01, 4 -> most, 6 -> drug, 9 -> report-01, 0 -> crop, 10 -> this, 3 -> late),Map(s2 -> say-01, t -> this, s -> survey-01, d -> drug, m -> most, r2 -> report-01, p -> person, l2 -> last, r -> release-01, l -> late, c -> crop, o -> opium))),[Ljava.lang.String;@489543a6,Annotation([Ljava.lang.String;@6272c96f,[Ljava.lang.String;@6de30571,[Ljava.lang.String;@5ee34b1b),Annotation([Ljava.lang.String;@3c89bb12,[Ljava.lang.String;@48c4245d,[Ledu.cmu.lti.nlp.amr.Dependency;@3df978b9),Annotation([Ljava.lang.String;@7906578e,[Ljava.lang.String;@8a62297,[Ljava.lang.String;@61a91912),Annotation([Ljava.lang.String;@1763992e,[Ljava.lang.String;@5c92166b,[Ledu.cmu.lti.nlp.amr.Entity;@659925f4))
AMR:
(l / late, degree, m / most)
(l2 / last, op, s / survey-01)
(r / release-01, ARG1, s / survey-01)
(r2 / report-01, ARG0, p / person)
(r2 / report-01, ARG1, d / drug)
(s / survey-01, ARG0, o / opium)
(s / survey-01, ARG1, c / crop)
(s / survey-01, time, l / late)
(s2 / say-01, ARG1, t / this)
(s2 / say-01, ARG2, p / person)
(s2 / say-01, purpose, r / release-01)

Decoded in 358,252 microseconds
Sentence: The survey showed that poppy cultivation had retreated in much of Afghanistan and was overwhelmingly concentrated in 7 of 34 provinces where the insurgency remains strong, most of those in the south.

NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 19-20:  34 => 34
Span 15-16:  concentrated => concentrate-02
Span 5-6:  cultivation => cultivate-01
Span 23-24:  insurgency => insurgency
Span 9-10:  much => much
Span 14-15:  overwhelmingly => overwhelm-01
Span 4-5:  poppy => poppy
Span 20-21:  provinces => province
Span 24-25:  remains => remain-01
Span 2-3:  showed => show-01
Span 32-33:  south => south
Span 25-26:  strong => strong
Span 1-2:  survey => survey-01

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 19-20:  34 => 34
Oracle Span 17-18:  7 => 7
Oracle Span 11-12:  Afghanistan => (country :name (name :op "Afghanistan"))
Oracle Span 12-13:  and => and
Oracle Span 15-16:  concentrated => concentrate-01
Oracle Span 5-6:  cultivation => cultivate-01
Oracle Span 23-24:  insurgency => insurgency
Oracle Span 27-28:  most => most
Oracle Span 9-10:  much => much
Oracle Span 10-11:  of => include-91
Oracle Span 18-19:  of => include-91
Oracle Span 14-15:  overwhelmingly => overwhelming
Oracle Span 4-5:  poppy => poppy
Oracle Span 20-21:  provinces => province
Oracle Span 24-25:  remains => remain-01
Oracle Span 7-8:  retreated => retreat-02
Oracle Span 2-3:  showed => show-01
Oracle Span 32-33:  south => south
Oracle Span 25-26:  strong => strong
Oracle Span 1-2:  survey => survey

Incorrect span: concentrated => concentrate-02
Incorrect span: overwhelmingly => overwhelm-01
Incorrect span: survey => survey-01
Missing span: Afghanistan => (country :name (name :op "Afghanistan"))
Missing span: and => and
Missing span: concentrated => concentrate-01
Missing span: of => include-91
Missing span: 7 => 7
Missing span: of => include-91
Missing span: most => most
Missing span: retreated => retreat-02
Missing span: survey => survey
Missing span: overwhelmingly => overwhelming
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	survey	_	NN	NN	_	3	nsubj	_	_
3	showed	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	8	mark	_	_
5	poppy	_	JJ	JJ	_	6	amod	_	_
6	cultivation	_	NN	NN	_	8	nsubj	_	_
7	had	_	VBD	VBD	_	8	aux	_	_
8	retreated	_	VBN	VBN	_	3	ccomp	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	much	_	RB	RB	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	Afghanistan	_	NNP	NNP	_	11	pobj	_	_
13	and	_	CC	CC	_	3	cc	_	_
14	was	_	VBD	VBD	_	16	cop	_	_
15	overwhelmingly	_	RB	RB	_	16	advmod	_	_
16	concentrated	_	JJ	JJ	_	3	conj	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	7	_	CD	CD	_	17	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	34	_	CD	CD	_	21	num	_	_
21	provinces	_	NNS	NNS	_	19	pobj	_	_
22	where	_	WRB	WRB	_	25	advmod	_	_
23	the	_	DT	DT	_	24	det	_	_
24	insurgency	_	NN	NN	_	25	nsubj	_	_
25	remains	_	VBZ	VBZ	_	21	rcmod	_	_
26	strong	_	JJ	JJ	_	25	acomp	_	_
27	,	_	,	,	_	21	punct	_	_
28	most	_	JJS	JJS	_	21	appos	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	those	_	DT	DT	_	29	pobj	_	_
31	in	_	IN	IN	_	30	prep	_	_
32	the	_	DT	DT	_	33	det	_	_
33	south	_	NN	NN	_	31	pobj	_	_
34	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, c3 / concentrate-01)
(a / and, op, r / retreat-02)
(c / cultivate-01, ARG1, p / poppy)
(c2 / country, name, n / name)
(c2 / country, quant, m / much)
(c3 / concentrate-01, ARG1, c / cultivate-01)
(c3 / concentrate-01, location, i / include-91)
(c3 / concentrate-01, mod, o / overwhelming)
(i / include-91, ARG2, p3 / province)
(i3 / include-91, ARG3, m2 / most)
(n / name, op, "Afghanistan")
(p3 / province, quant, 3 / 34)
(r / retreat-02, ARG1, c / cultivate-01)
(r / retreat-02, location, c2 / country)
(r2 / remain-01, ARG1, i2 / insurgency)
(r2 / remain-01, ARG3, s3 / strong)
(s / show-01, ARG0, s2 / survey)
(s / show-01, ARG1, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),south,south,false), Span(25,26,List(1),strong,strong,false), Span(24,25,List(2),remains,remain-01,false), Span(23,24,List(3),insurgency,insurgency,false), Span(20,21,List(4),provinces,province,false), Span(19,20,List(5),34,34,false), Span(15,16,List(6),concentrated,concentrate-02,false), Span(14,15,List(7),overwhelmingly,overwhelm-01,false), Span(9,10,List(8),much,much,false), Span(5,6,List(9),cultivation,cultivate-01,false), Span(4,5,List(10),poppy,poppy,false), Span(2,3,List(11),showed,show-01,false), Span(1,2,List(12),survey,survey-01,false)),Map(2 -> remain-01, 5 -> 34, 12 -> survey-01, 8 -> much, 7 -> overwhelm-01, 1 -> strong, 4 -> province, 11 -> show-01, 6 -> concentrate-02, 0 -> south, 9 -> cultivate-01, 3 -> insurgency, 10 -> poppy),Map(s2 -> strong, p2 -> poppy, s -> south, s4 -> survey-01, m -> much, p -> province, r -> remain-01, i -> insurgency, c -> concentrate-02, s3 -> show-01, o -> overwhelm-01, 3 -> 34, c2 -> cultivate-01))),[Ljava.lang.String;@4cd1c1dc,Annotation([Ljava.lang.String;@47f08b81,[Ljava.lang.String;@b9dfc5a,[Ljava.lang.String;@2787de58),Annotation([Ljava.lang.String;@659a2455,[Ljava.lang.String;@267517e4,[Ledu.cmu.lti.nlp.amr.Dependency;@426e505c),Annotation([Ljava.lang.String;@5b022357,[Ljava.lang.String;@6f8e0cee,[Ljava.lang.String;@614aeccc),Annotation([Ljava.lang.String;@5116ac09,[Ljava.lang.String;@1bc425e7,[Ledu.cmu.lti.nlp.amr.Entity;@4b2a30d))
AMR:
(c / concentrate-02, ARG1, s4 / survey-01)
(c / concentrate-02, manner, o / overwhelm-01)
(c2 / cultivate-01, ARG1, p2 / poppy)
(o / overwhelm-01, ARG1, r / remain-01)
(p / province, quant, 3 / 34)
(p / province, time, r / remain-01)
(r / remain-01, ARG0, s / south)
(r / remain-01, ARG1, i / insurgency)
(r / remain-01, ARG3, s2 / strong)
(s3 / show-01, ARG0, s4 / survey-01)
(s3 / show-01, ARG1, m / much)
(s4 / survey-01, ARG1, c2 / cultivate-01)

Decoded in 352,712 microseconds
Sentence: The survey was issued November 27, 2008.

mkDayMonthYear(November	27	,	2008,27,November,2008)
Spans:
Span 3-4:  issued => issue-01
Span 4-8:  November 27 , 2008 => (date-entity :day 27 :month 11 :year 2008)
Span 1-2:  survey => survey-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  issued => issue-01
Oracle Span 4-8:  November 27 , 2008 => (date-entity :year 2008 :month 11 :day 27)
Oracle Span 1-2:  survey => survey

Incorrect span: November 27 , 2008 => (date-entity :day 27 :month 11 :year 2008)
Incorrect span: survey => survey-01
Missing span: November 27 , 2008 => (date-entity :year 2008 :month 11 :day 27)
Missing span: survey => survey
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	survey	_	NN	NN	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	issued	_	VBN	VBN	_	0	root	_	_
5	November	_	NNP	NNP	_	4	tmod	_	_
6	27	_	CD	CD	_	5	num	_	_
7	,	_	,	,	_	5	punct	_	_
8	2008	_	CD	CD	_	5	num	_	_
9	.	_	.	.	_	4	punct	_	_

Oracle:
(d2 / date-entity, day, 27)
(d2 / date-entity, month, 11)
(d2 / date-entity, year, 2008)
(i / issue-01, ARG1, s / survey)
(i / issue-01, time, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(4,8,List(3, 2, 1, 0),November 27 , 2008,(date-entity :day 27 :month 11 :year 2008),false), Span(3,4,List(4),issued,issue-01,false), Span(1,2,List(5),survey,survey-01,false)),Map(2 -> 11, 5 -> survey-01, 1 -> 27, 4 -> issue-01, 0 -> date-entity, 3 -> 2008),Map(2 -> 27, s -> survey-01, d -> date-entity, 1 -> 11, i -> issue-01, 22 -> 2008))),[Ljava.lang.String;@322803db,Annotation([Ljava.lang.String;@56ba8773,[Ljava.lang.String;@6ceb7b5e,[Ljava.lang.String;@7dd00705),Annotation([Ljava.lang.String;@f14e5bf,[Ljava.lang.String;@d176a31,[Ledu.cmu.lti.nlp.amr.Dependency;@3a91d146),Annotation([Ljava.lang.String;@4784013e,[Ljava.lang.String;@6f952d6c,[Ljava.lang.String;@5965844d),Annotation([Ljava.lang.String;@6d4a65c6,[Ljava.lang.String;@aa004a0,[Ledu.cmu.lti.nlp.amr.Entity;@4c98a6d5))
AMR:
(d / date-entity, day, 2 / 27)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2008)
(i / issue-01, ARG1, s / survey-01)
(i / issue-01, time, d / date-entity)

Decoded in 26,358 microseconds
Sentence: The United Nations found that the result was a 19 percent reduction in the amount of land devoted to opium in Afghanistan even though the total tonnage of opium produced dropped by just 6 percent.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 32-33:  just => just
Span 16-17:  land => land
Span 28-29:  opium => opium
Span 19-20:  opium => opium
Span 34-35:  percent => percentage-entity
Span 10-11:  percent => percentage-entity
Span 29-30:  produced => produce-01
Span 11-12:  reduction => reduce-01
Span 6-7:  result => result-01
Span 1-3:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 9-10:  19 => 19
Oracle Span 33-34:  6 => 6
Oracle Span 21-22:  Afghanistan => (country :name (name :op "Afghanistan"))
Oracle Span 14-15:  amount => amount
Oracle Span 17-18:  devoted => devote-01
Oracle Span 30-31:  dropped => drop-01
Oracle Span 3-4:  found => find-01
Oracle Span 32-33:  just => just
Oracle Span 16-17:  land => land
Oracle Span 19-20:  opium => opium
Oracle Span 28-29:  opium => opium
Oracle Span 10-11:  percent => percentage-entity
Oracle Span 34-35:  percent => percentage-entity
Oracle Span 29-30:  produced => produce-01
Oracle Span 11-12:  reduction => reduce-01
Oracle Span 6-7:  result => result-01
Oracle Span 26-27:  tonnage => tonnage
Oracle Span 25-26:  total => total
Oracle Span 1-3:  United Nations => (organization :name (name :op "Nations" :op "United"))

Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: United Nations => (organization :name (name :op "Nations" :op "United"))
Missing span: Afghanistan => (country :name (name :op "Afghanistan"))
Missing span: found => find-01
Missing span: amount => amount
Missing span: devoted => devote-01
Missing span: 19 => 19
Missing span: dropped => drop-01
Missing span: 6 => 6
Missing span: tonnage => tonnage
Missing span: total => total
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	United	_	NNP	NNP	_	3	nn	_	_
3	Nations	_	NNPS	NNPS	_	4	nsubj	_	_
4	found	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	12	mark	_	_
6	the	_	DT	DT	_	7	det	_	_
7	result	_	NN	NN	_	12	nsubj	_	_
8	was	_	VBD	VBD	_	12	cop	_	_
9	a	_	DT	DT	_	12	det	_	_
10	19	_	CD	CD	_	12	num	_	_
11	percent	_	NN	NN	_	12	nn	_	_
12	reduction	_	NN	NN	_	4	ccomp	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	amount	_	NN	NN	_	13	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	land	_	NN	NN	_	16	pobj	_	_
18	devoted	_	VBN	VBN	_	17	vmod	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	opium	_	NN	NN	_	19	pobj	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	Afghanistan	_	NNP	NNP	_	21	pobj	_	_
23	even	_	RB	RB	_	30	advmod	_	_
24	though	_	IN	IN	_	30	mark	_	_
25	the	_	DT	DT	_	27	det	_	_
26	total	_	JJ	JJ	_	27	amod	_	_
27	tonnage	_	NN	NN	_	30	nsubj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	opium	_	NN	NN	_	28	pobj	_	_
30	produced	_	VBD	VBD	_	18	advcl	_	_
31	dropped	_	VBN	VBN	_	30	dep	_	_
32	by	_	IN	IN	_	31	prep	_	_
33	just	_	RB	RB	_	34	quantmod	_	_
34	6	_	CD	CD	_	35	num	_	_
35	percent	_	NN	NN	_	32	pobj	_	_
36	.	_	.	.	_	4	punct	_	_

Oracle:
(c / country, name, n2 / name)
(d / devote-01, ARG1, l / land)
(d / devote-01, ARG2, o2 / opium)
(d / devote-01, location, c / country)
(d2 / drop-01, ARG1, t / tonnage)
(d2 / drop-01, ARG2, p4 / percentage-entity)
(f / find-01, ARG0, o / organization)
(f / find-01, ARG1, r2 / result-01)
(l / land, quant, a2 / amount)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Afghanistan")
(o / organization, name, n / name)
(o3 / opium, quant, t / tonnage)
(p3 / percentage-entity, value, 1 / 19)
(p4 / percentage-entity, mod, j / just)
(p4 / percentage-entity, value, 6 / 6)
(p5 / produce-01, ARG1, o3 / opium)
(r / reduce-01, ARG1, a2 / amount)
(r / reduce-01, ARG2, p3 / percentage-entity)
(r / reduce-01, concession, d2 / drop-01)
(r2 / result-01, ARG1, r / reduce-01)
(t / tonnage, mod, t2 / total)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),percent,percentage-entity,false), Span(32,33,List(1),just,just,false), Span(29,30,List(2),produced,produce-01,false), Span(28,29,List(3),opium,opium,false), Span(19,20,List(4),opium,opium,false), Span(16,17,List(5),land,land,false), Span(11,12,List(6),reduction,reduce-01,false), Span(10,11,List(7),percent,percentage-entity,false), Span(6,7,List(8),result,result-01,false), Span(1,3,List(12, 11, 10, 9),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> produce-01, 5 -> land, 12 -> "Nations", 8 -> result-01, 7 -> percentage-entity, 1 -> just, 4 -> opium, 11 -> "United", 6 -> reduce-01, 0 -> percentage-entity, 9 -> organization, 3 -> opium, 10 -> name),Map(n -> name, o3 -> organization, p2 -> produce-01, j -> just, r2 -> result-01, p -> percentage-entity, o2 -> opium, r -> reduce-01, l -> land, o -> opium, p3 -> percentage-entity))),[Ljava.lang.String;@392a04e7,Annotation([Ljava.lang.String;@7f02251,[Ljava.lang.String;@dffa30b,[Ljava.lang.String;@4d8126f),Annotation([Ljava.lang.String;@6d3c232f,[Ljava.lang.String;@6b587673,[Ledu.cmu.lti.nlp.amr.Dependency;@1bcf67e8),Annotation([Ljava.lang.String;@5f404594,[Ljava.lang.String;@53692008,[Ljava.lang.String;@7b2a3ff8),Annotation([Ljava.lang.String;@1bbae752,[Ljava.lang.String;@460b6d54,[Ledu.cmu.lti.nlp.amr.Entity;@5cf87cfd))
AMR:
(j / just, op, p / percentage-entity)
(l / land, op, r2 / result-01)
(n / name, op, "Nations")
(n / name, op, "United")
(o3 / organization, name, n / name)
(p2 / produce-01, ARG0, o / opium)
(p2 / produce-01, ARG2, r / reduce-01)
(p2 / produce-01, location, o2 / opium)
(p2 / produce-01, location, p / percentage-entity)
(r / reduce-01, ARG1, p3 / percentage-entity)
(r / reduce-01, ARG2, r2 / result-01)
(r2 / result-01, part, o3 / organization)

Decoded in 376,543 microseconds
Sentence: The study stated that the high output per acre was attributed to a good growing season in the south.

Spans:
Span 10-11:  attributed => attribute-01
Span 6-7:  output => output
Span 15-16:  season => season
Span 18-19:  south => south

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 8-9:  acre => (area-quantity :unit acre)
Oracle Span 10-11:  attributed => attribute-01
Oracle Span 13-14:  good => good
Oracle Span 14-15:  growing => grow-03
Oracle Span 5-6:  high => high
Oracle Span 6-7:  output => output
Oracle Span 15-16:  season => season
Oracle Span 18-19:  south => south
Oracle Span 2-3:  stated => state-01
Oracle Span 1-2:  study => study

Missing span: stated => state-01
Missing span: growing => grow-03
Missing span: good => good
Missing span: high => high
Missing span: acre => (area-quantity :unit acre)
Missing span: study => study
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	study	_	NN	NN	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	11	mark	_	_
5	the	_	DT	DT	_	7	det	_	_
6	high	_	JJ	JJ	_	7	amod	_	_
7	output	_	NN	NN	_	11	nsubjpass	_	_
8	per	_	IN	IN	_	7	prep	_	_
9	acre	_	NN	NN	_	8	pobj	_	_
10	was	_	VBD	VBD	_	11	auxpass	_	_
11	attributed	_	VBN	VBN	_	3	ccomp	_	_
12	to	_	TO	TO	_	11	prep	_	_
13	a	_	DT	DT	_	16	det	_	_
14	good	_	JJ	JJ	_	16	amod	_	_
15	growing	_	VBG	VBG	_	16	amod	_	_
16	season	_	NN	NN	_	12	pobj	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	south	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	3	punct	_	_

Oracle:
(a / attribute-01, ARG2, s3 / season)
(a3 / area-quantity, unit, a2 / acre)
(g2 / grow-03, mod, g / good)
(o / output, mod, h / high)
(s / state-01, ARG0, s2 / study)
(s / state-01, ARG1, a / attribute-01)
(s3 / season, location, s4 / south)
(s3 / season, mod, g2 / grow-03)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),south,south,false), Span(15,16,List(1),season,season,false), Span(10,11,List(2),attributed,attribute-01,false), Span(6,7,List(3),output,output,false)),Map(2 -> attribute-01, 1 -> season, 0 -> south, 3 -> output),Map(s2 -> season, s -> south, a -> attribute-01, o -> output))),[Ljava.lang.String;@76075d65,Annotation([Ljava.lang.String;@3a4ba480,[Ljava.lang.String;@27b71f50,[Ljava.lang.String;@383790cf),Annotation([Ljava.lang.String;@74971ed9,[Ljava.lang.String;@131fcb6f,[Ledu.cmu.lti.nlp.amr.Dependency;@ccd1bc3),Annotation([Ljava.lang.String;@878537d,[Ljava.lang.String;@4455f57d,[Ljava.lang.String;@29fc1a2b),Annotation([Ljava.lang.String;@4d0b0fd4,[Ljava.lang.String;@7a24eb3,[Ledu.cmu.lti.nlp.amr.Entity;@6c37bd27))
AMR:
(a / attribute-01, ARG0, s / south)
(a / attribute-01, ARG1, o / output)
(a / attribute-01, ARG2, s2 / season)

Decoded in 50,184 microseconds
Sentence: The southern region is a heavily irrigated area where the Taliban maintained a strong presence in 5 provinces and have systematically encouraged opium cultivation as a way to finance their insurgency for several years.

NER Entity: (organization :name (name :op "Taliban"))
Spans:
Span 7-8:  area => area
Span 23-24:  cultivation => cultivate-01
Span 21-22:  encouraged => encourage-01
Span 28-29:  finance => finance-01
Span 30-31:  insurgency => insurgency
Span 11-12:  maintained => maintain-01
Span 22-23:  opium => opium
Span 17-18:  provinces => province
Span 2-3:  region => region
Span 32-33:  several => several
Span 1-2:  southern => south
Span 13-14:  strong => strong
Span 20-21:  systematically => systematical
Span 26-27:  way => way
Span 33-34:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 16-17:  5 => 5
Oracle Span 18-19:  and => and
Oracle Span 7-8:  area => area
Oracle Span 23-24:  cultivation => cultivate-01
Oracle Span 21-22:  encouraged => encourage-01
Oracle Span 28-29:  finance => finance-01
Oracle Span 5-6:  heavily => heavy
Oracle Span 30-31:  insurgency => insurgency
Oracle Span 6-7:  irrigated => irrigate-01
Oracle Span 11-12:  maintained => maintain-01
Oracle Span 22-23:  opium => opium
Oracle Span 14-15:  presence => presence
Oracle Span 17-18:  provinces => province
Oracle Span 2-3:  region => region
Oracle Span 32-33:  several => several
Oracle Span 1-2:  southern => south
Oracle Span 13-14:  strong => strong
Oracle Span 20-21:  systematically => systematic
Oracle Span 10-11:  Taliban => (criminal-organization :name (name :op "Taliban"))
Oracle Span 33-34:  years => (temporal-quantity :unit year)

Extra span: way => way
Incorrect span: systematically => systematical
Missing span: Taliban => (criminal-organization :name (name :op "Taliban"))
Missing span: irrigated => irrigate-01
Missing span: and => and
Missing span: 5 => 5
Missing span: presence => presence
Missing span: heavily => heavy
Missing span: systematically => systematic
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	southern	_	JJ	JJ	_	3	amod	_	_
3	region	_	NN	NN	_	8	nsubj	_	_
4	is	_	VBZ	VBZ	_	8	cop	_	_
5	a	_	DT	DT	_	8	det	_	_
6	heavily	_	RB	RB	_	7	advmod	_	_
7	irrigated	_	JJ	JJ	_	8	amod	_	_
8	area	_	NN	NN	_	0	root	_	_
9	where	_	WRB	WRB	_	12	advmod	_	_
10	the	_	DT	DT	_	11	det	_	_
11	Taliban	_	NNP	NNP	_	12	nsubj	_	_
12	maintained	_	VBD	VBD	_	8	rcmod	_	_
13	a	_	DT	DT	_	15	det	_	_
14	strong	_	JJ	JJ	_	15	amod	_	_
15	presence	_	NN	NN	_	12	dobj	_	_
16	in	_	IN	IN	_	12	prep	_	_
17	5	_	CD	CD	_	18	num	_	_
18	provinces	_	NNS	NNS	_	16	pobj	_	_
19	and	_	CC	CC	_	12	cc	_	_
20	have	_	VBP	VBP	_	22	aux	_	_
21	systematically	_	RB	RB	_	22	advmod	_	_
22	encouraged	_	VBN	VBN	_	12	conj	_	_
23	opium	_	NN	NN	_	24	nn	_	_
24	cultivation	_	NN	NN	_	22	dobj	_	_
25	as	_	IN	IN	_	22	prep	_	_
26	a	_	DT	DT	_	27	det	_	_
27	way	_	NN	NN	_	25	pobj	_	_
28	to	_	TO	TO	_	29	aux	_	_
29	finance	_	VB	VB	_	27	vmod	_	_
30	their	_	PRP$	PRP$	_	31	poss	_	_
31	insurgency	_	NN	NN	_	29	dobj	_	_
32	for	_	IN	IN	_	29	prep	_	_
33	several	_	JJ	JJ	_	34	amod	_	_
34	years	_	NNS	NNS	_	32	pobj	_	_
35	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, location, a2 / area)
(a / and, op, e / encourage-01)
(a / and, op, m / maintain-01)
(a2 / area, domain, r / region)
(c / criminal-organization, name, n / name)
(c2 / cultivate-01, ARG1, o / opium)
(e / encourage-01, ARG0, c / criminal-organization)
(e / encourage-01, ARG2, c2 / cultivate-01)
(e / encourage-01, mod, s4 / systematic)
(e / encourage-01, purpose, f / finance-01)
(f / finance-01, ARG0, c / criminal-organization)
(f / finance-01, ARG1, i2 / insurgency)
(f / finance-01, duration, s / several)
(i2 / insurgency, poss, c / criminal-organization)
(i3 / irrigate-01, ARG1, a2 / area)
(i3 / irrigate-01, manner, h / heavy)
(m / maintain-01, ARG0, c / criminal-organization)
(m / maintain-01, ARG1, p / presence)
(m / maintain-01, location, p2 / province)
(n / name, op, "Taliban")
(p / presence, mod, s3 / strong)
(p2 / province, quant, 5 / 5)
(r / region, mod, s2 / south)
(s / several, op, t / temporal-quantity)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(1, 0),years,(temporal-quantity :unit year),false), Span(32,33,List(2),several,several,false), Span(30,31,List(3),insurgency,insurgency,false), Span(28,29,List(4),finance,finance-01,false), Span(26,27,List(5),way,way,false), Span(23,24,List(6),cultivation,cultivate-01,false), Span(22,23,List(7),opium,opium,false), Span(21,22,List(8),encouraged,encourage-01,false), Span(20,21,List(9),systematically,systematical,false), Span(17,18,List(10),provinces,province,false), Span(13,14,List(11),strong,strong,false), Span(11,12,List(12),maintained,maintain-01,false), Span(7,8,List(13),area,area,false), Span(2,3,List(14),region,region,false), Span(1,2,List(15),southern,south,false)),Map(2 -> several, 5 -> way, 12 -> maintain-01, 15 -> south, 8 -> encourage-01, 7 -> opium, 1 -> year, 4 -> finance-01, 11 -> strong, 14 -> region, 6 -> cultivate-01, 0 -> temporal-quantity, 9 -> systematical, 3 -> insurgency, 10 -> province, 13 -> area),Map(e -> encourage-01, w -> way, s2 -> systematical, t -> temporal-quantity, s -> several, s4 -> south, m -> maintain-01, y -> year, p -> province, a -> area, r -> region, i -> insurgency, c -> cultivate-01, s3 -> strong, f -> finance-01, o -> opium))),[Ljava.lang.String;@25d3cfc8,Annotation([Ljava.lang.String;@30331109,[Ljava.lang.String;@2571066a,[Ljava.lang.String;@74fe5966),Annotation([Ljava.lang.String;@4fe875be,[Ljava.lang.String;@677b8e13,[Ledu.cmu.lti.nlp.amr.Dependency;@4a9486c0),Annotation([Ljava.lang.String;@4c27d39d,[Ljava.lang.String;@40ee0a22,[Ljava.lang.String;@7bde1f3a),Annotation([Ljava.lang.String;@15923407,[Ljava.lang.String;@67dba613,[Ledu.cmu.lti.nlp.amr.Entity;@57540fd0))
AMR:
(a / area, time, m / maintain-01)
(c / cultivate-01, ARG0, s3 / strong)
(c / cultivate-01, ARG1, o / opium)
(c / cultivate-01, ARG2, f / finance-01)
(c / cultivate-01, location, p / province)
(e / encourage-01, ARG0, a / area)
(e / encourage-01, ARG1, c / cultivate-01)
(e / encourage-01, manner, s2 / systematical)
(f / finance-01, ARG0, w / way)
(f / finance-01, ARG1, i / insurgency)
(f / finance-01, duration, s / several)
(m / maintain-01, ARG1, r / region)
(r / region, mod, s4 / south)
(s / several, op, t / temporal-quantity)
(t / temporal-quantity, unit, y / year)

Decoded in 514,485 microseconds
Sentence: The U.N. estimates the insurgents made as much as 300 million dollars from the opium trade last year.

NER Entity: (organization :name (name :op "U.N."))
Spans:
Span 9-10:  300 => 300
Span 11-12:  dollars => (monetary-quantity :unit dollar)
Span 2-3:  estimates => estimate-01
Span 4-5:  insurgents => insurgent
Span 16-17:  last => last
Span 7-8:  much => much
Span 14-15:  opium => opium
Span 15-16:  trade => trade-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 11-12:  dollars => (monetary-quantity :unit dollar)
Oracle Span 2-3:  estimates => estimate-01
Oracle Span 4-5:  insurgents => insurgent
Oracle Span 16-17:  last => last
Oracle Span 5-6:  made => make-05
Oracle Span 7-8:  much => much
Oracle Span 14-15:  opium => opium
Oracle Span 15-16:  trade => trade-01
Oracle Span 1-2:  U.N. => (organization :name (name :op "U.N."))
Oracle Span 17-18:  year => year

Extra span: 300 => 300
Missing span: U.N. => (organization :name (name :op "U.N."))
Missing span: made => make-05
Missing span: year => year
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	U.N.	_	NNP	NNP	_	3	nsubj	_	_
3	estimates	_	VBZ	VBZ	_	0	root	_	_
4	the	_	DT	DT	_	5	det	_	_
5	insurgents	_	NNS	NNS	_	6	nsubj	_	_
6	made	_	VBD	VBD	_	3	ccomp	_	_
7	as	_	RB	RB	_	9	advmod	_	_
8	much	_	JJ	JJ	_	9	advmod	_	_
9	as	_	IN	IN	_	11	quantmod	_	_
10	300	_	CD	CD	_	11	number	_	_
11	million	_	CD	CD	_	12	num	_	_
12	dollars	_	NNS	NNS	_	6	dobj	_	_
13	from	_	IN	IN	_	6	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	opium	_	NN	NN	_	16	nn	_	_
16	trade	_	NN	NN	_	13	pobj	_	_
17	last	_	JJ	JJ	_	18	amod	_	_
18	year	_	NN	NN	_	6	tmod	_	_
19	.	_	.	.	_	3	punct	_	_

Oracle:
(e / estimate-01, ARG0, o / organization)
(e / estimate-01, ARG1, m2 / make-05)
(m2 / make-05, ARG0, i / insurgent)
(m2 / make-05, ARG1, m3 / monetary-quantity)
(m2 / make-05, ARG2, t / trade-01)
(m2 / make-05, time, y / year)
(m3 / monetary-quantity, mod, m / much)
(m3 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "U.N.")
(o / organization, name, n / name)
(t / trade-01, ARG1, o2 / opium)
(y / year, mod, l / last)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),last,last,false), Span(15,16,List(1),trade,trade-01,false), Span(14,15,List(2),opium,opium,false), Span(11,12,List(4, 3),dollars,(monetary-quantity :unit dollar),false), Span(9,10,List(5),300,300,false), Span(7,8,List(6),much,much,false), Span(4,5,List(7),insurgents,insurgent,false), Span(2,3,List(8),estimates,estimate-01,false)),Map(2 -> opium, 5 -> 300, 8 -> estimate-01, 7 -> insurgent, 1 -> trade-01, 4 -> dollar, 6 -> much, 0 -> last, 3 -> monetary-quantity),Map(e -> estimate-01, t -> trade-01, m2 -> much, d -> dollar, m -> monetary-quantity, i -> insurgent, l -> last, o -> opium, 3 -> 300))),[Ljava.lang.String;@5cf8edcf,Annotation([Ljava.lang.String;@58cec85b,[Ljava.lang.String;@629f066f,[Ljava.lang.String;@1542af63),Annotation([Ljava.lang.String;@ecfbe91,[Ljava.lang.String;@20ed3303,[Ledu.cmu.lti.nlp.amr.Dependency;@3adbe50f),Annotation([Ljava.lang.String;@3a627c80,[Ljava.lang.String;@49aa766b,[Ljava.lang.String;@963176),Annotation([Ljava.lang.String;@65004ff6,[Ljava.lang.String;@4cafa9aa,[Ledu.cmu.lti.nlp.amr.Entity;@562c877a))
AMR:
(e / estimate-01, ARG0, l / last)
(e / estimate-01, ARG1, i / insurgent)
(e / estimate-01, ARG2, m2 / much)
(m / monetary-quantity, purpose, t / trade-01)
(m / monetary-quantity, unit, d / dollar)
(t / trade-01, ARG0, i / insurgent)
(t / trade-01, ARG1, o / opium)
(t / trade-01, ARG2, 3 / 300)

Decoded in 187,369 microseconds
Sentence: Costa said a lot of war effort can be funded with 2 to 300 million dollars.

NER Entity: (person :name (name :op "Costa"))
Spans:
Span 13-14:  300 => 300
Span 7-8:  can => possible
Span 15-16:  dollars => (monetary-quantity :unit dollar)
Span 6-7:  effort => effort
Span 9-10:  funded => fund-01
Span 3-4:  lot => lot
Span 1-2:  said => say-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 7-8:  can => possible
Oracle Span 0-1:  Costa => (person :name (name :op "Costa"))
Oracle Span 15-16:  dollars => (monetary-quantity :unit dollar)
Oracle Span 6-7:  effort => effort
Oracle Span 9-10:  funded => fund-01
Oracle Span 3-4:  lot => lot
Oracle Span 1-2:  said => say-01
Oracle Span 12-13:  to => to
Oracle Span 5-6:  war => war

Extra span: 300 => 300
Missing span: Costa => (person :name (name :op "Costa"))
Missing span: to => to
Missing span: war => war
Dependencies:
1	Costa	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	lot	_	NN	NN	_	10	nsubjpass	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	war	_	NN	NN	_	7	nn	_	_
7	effort	_	NN	NN	_	5	pobj	_	_
8	can	_	MD	MD	_	10	aux	_	_
9	be	_	VB	VB	_	10	auxpass	_	_
10	funded	_	VBN	VBN	_	2	ccomp	_	_
11	with	_	IN	IN	_	10	prep	_	_
12	2	_	CD	CD	_	15	number	_	_
13	to	_	TO	TO	_	15	dep	_	_
14	300	_	CD	CD	_	15	number	_	_
15	million	_	CD	CD	_	16	num	_	_
16	dollars	_	NNS	NNS	_	11	pobj	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(e / effort, mod, w / war)
(e / effort, quant, l / lot)
(f / fund-01, ARG1, e / effort)
(f / fund-01, ARG2, m3 / monetary-quantity)
(m3 / monetary-quantity, quant, t / to)
(m3 / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Costa")
(p / person, name, n / name)
(p2 / possible, domain, f / fund-01)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, p2 / possible)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(13,14,List(2),300,300,false), Span(9,10,List(3),funded,fund-01,false), Span(7,8,List(4),can,possible,false), Span(6,7,List(5),effort,effort,false), Span(3,4,List(6),lot,lot,false), Span(1,2,List(7),said,say-01,false)),Map(2 -> 300, 5 -> effort, 7 -> say-01, 1 -> dollar, 4 -> possible, 6 -> lot, 0 -> monetary-quantity, 3 -> fund-01),Map(e -> effort, s -> say-01, d -> dollar, m -> monetary-quantity, p -> possible, l -> lot, f -> fund-01, 3 -> 300))),[Ljava.lang.String;@67001148,Annotation([Ljava.lang.String;@989da1,[Ljava.lang.String;@31cb96e1,[Ljava.lang.String;@3eed0f5),Annotation([Ljava.lang.String;@64030b91,[Ljava.lang.String;@2032e725,[Ledu.cmu.lti.nlp.amr.Dependency;@4d23015c),Annotation([Ljava.lang.String;@383f1975,[Ljava.lang.String;@441cc260,[Ljava.lang.String;@73a00e09),Annotation([Ljava.lang.String;@26dcd8c0,[Ljava.lang.String;@66e889df,[Ledu.cmu.lti.nlp.amr.Entity;@444548a0))
AMR:
(e / effort, quant, l / lot)
(f / fund-01, ARG1, l / lot)
(f / fund-01, time, m / monetary-quantity)
(m / monetary-quantity, unit, d / dollar)
(p / possible, domain, f / fund-01)
(s / say-01, ARG0, 3 / 300)
(s / say-01, ARG1, p / possible)

Decoded in 181,922 microseconds
Sentence: The Taliban have producing an amount of opium that far exceeds world demand due to 3 successive years of bumper crops.

NER Entity: (organization :name (name :op "Taliban"))
Spans:
Span 20-21:  crops => crop
Span 12-13:  demand => demand-01
Span 10-11:  exceeds => exceed-01
Span 7-8:  opium => opium
Span 3-4:  producing => produce-01
Span 16-17:  successive => succeed-03
Span 17-18:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 15-16:  3 => 3
Oracle Span 5-6:  amount => amount
Oracle Span 19-20:  bumper => bumper
Oracle Span 20-21:  crops => crop
Oracle Span 12-13:  demand => demand-01
Oracle Span 10-11:  exceeds => exceed-01
Oracle Span 9-10:  far => far
Oracle Span 7-8:  opium => opium
Oracle Span 3-4:  producing => produce-01
Oracle Span 16-17:  successive => successive
Oracle Span 1-2:  Taliban => (criminal-organization :name (name :op "Taliban"))
Oracle Span 11-12:  world => world
Oracle Span 17-18:  years => (temporal-quantity :unit year)

Incorrect span: successive => succeed-03
Missing span: Taliban => (criminal-organization :name (name :op "Taliban"))
Missing span: amount => amount
Missing span: 3 => 3
Missing span: bumper => bumper
Missing span: successive => successive
Missing span: far => far
Missing span: world => world
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	Taliban	_	NNP	NNP	_	3	nsubj	_	_
3	have	_	VBP	VBP	_	0	root	_	_
4	producing	_	VBG	VBG	_	3	xcomp	_	_
5	an	_	DT	DT	_	6	det	_	_
6	amount	_	NN	NN	_	4	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	opium	_	NN	NN	_	7	pobj	_	_
9	that	_	WDT	WDT	_	11	nsubj	_	_
10	far	_	RB	RB	_	11	advmod	_	_
11	exceeds	_	VBZ	VBZ	_	6	rcmod	_	_
12	world	_	NN	NN	_	13	nn	_	_
13	demand	_	NN	NN	_	14	nsubj	_	_
14	due	_	JJ	JJ	_	11	xcomp	_	_
15	to	_	TO	TO	_	14	prep	_	_
16	3	_	CD	CD	_	18	num	_	_
17	successive	_	JJ	JJ	_	18	amod	_	_
18	years	_	NNS	NNS	_	15	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	bumper	_	NN	NN	_	21	nn	_	_
21	crops	_	NNS	NNS	_	19	pobj	_	_
22	.	_	.	.	_	3	punct	_	_

Oracle:
(c / criminal-organization, name, n / name)
(c3 / crop, mod, b / bumper)
(d / demand-01, ARG0, w / world)
(e / exceed-01, ARG0, a / amount)
(e / exceed-01, ARG1, d / demand-01)
(e / exceed-01, mod, f / far)
(n / name, op, "Taliban")
(o / opium, quant, a / amount)
(p / produce-01, ARG0, c / criminal-organization)
(p / produce-01, ARG1, a / amount)
(t / temporal-quantity, mod, c3 / crop)
(t / temporal-quantity, mod, s / successive)
(t / temporal-quantity, quant, 3 / 3)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),crops,crop,false), Span(17,18,List(2, 1),years,(temporal-quantity :unit year),false), Span(16,17,List(3),successive,succeed-03,false), Span(12,13,List(4),demand,demand-01,false), Span(10,11,List(5),exceeds,exceed-01,false), Span(7,8,List(6),opium,opium,false), Span(3,4,List(7),producing,produce-01,false)),Map(2 -> year, 5 -> exceed-01, 7 -> produce-01, 1 -> temporal-quantity, 4 -> demand-01, 6 -> opium, 0 -> crop, 3 -> succeed-03),Map(e -> exceed-01, t -> temporal-quantity, s -> succeed-03, d -> demand-01, p -> produce-01, y -> year, c -> crop, o -> opium))),[Ljava.lang.String;@3766c667,Annotation([Ljava.lang.String;@773c0293,[Ljava.lang.String;@55b8dbda,[Ljava.lang.String;@3b569985),Annotation([Ljava.lang.String;@3a022576,[Ljava.lang.String;@2dbd803f,[Ledu.cmu.lti.nlp.amr.Dependency;@3e48e859),Annotation([Ljava.lang.String;@31ddd4a4,[Ljava.lang.String;@1a5f7e7c,[Ljava.lang.String;@5b22b970),Annotation([Ljava.lang.String;@22d1886d,[Ljava.lang.String;@7df60067,[Ledu.cmu.lti.nlp.amr.Entity;@1cbb3d3b))
AMR:
(c / crop, duration, t / temporal-quantity)
(d / demand-01, ARG1, s / succeed-03)
(e / exceed-01, ARG0, o / opium)
(e / exceed-01, ARG1, d / demand-01)
(p / produce-01, ARG1, o / opium)
(s / succeed-03, ARG1, t / temporal-quantity)
(t / temporal-quantity, unit, y / year)

Decoded in 106,406 microseconds
Sentence: Costa said the result was a glut that was depressing the price, which dropped by approximately 20 percent.

NER Entity: (person :name (name :op "Costa"))
Spans:
Span 18-19:  percent => percentage-entity
Span 3-4:  result => result-01
Span 1-2:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 17-18:  20 => 20
Oracle Span 16-17:  approximately => approximately
Oracle Span 0-1:  Costa => (person :name (name :op "Costa"))
Oracle Span 9-10:  depressing => depress-02
Oracle Span 14-15:  dropped => drop-01
Oracle Span 6-7:  glut => glut
Oracle Span 18-19:  percent => percentage-entity
Oracle Span 11-12:  price => (thing :ARG2-of price-01)
Oracle Span 3-4:  result => result
Oracle Span 1-2:  said => say-01

Incorrect span: result => result-01
Missing span: Costa => (person :name (name :op "Costa"))
Missing span: glut => glut
Missing span: depressing => depress-02
Missing span: price => (thing :ARG2-of price-01)
Missing span: dropped => drop-01
Missing span: approximately => approximately
Missing span: 20 => 20
Missing span: result => result
Dependencies:
1	Costa	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	result	_	NN	NN	_	7	nsubj	_	_
5	was	_	VBD	VBD	_	7	cop	_	_
6	a	_	DT	DT	_	7	det	_	_
7	glut	_	NN	NN	_	2	ccomp	_	_
8	that	_	WDT	WDT	_	10	nsubj	_	_
9	was	_	VBD	VBD	_	10	aux	_	_
10	depressing	_	VBG	VBG	_	7	rcmod	_	_
11	the	_	DT	DT	_	12	det	_	_
12	price	_	NN	NN	_	10	dobj	_	_
13	,	_	,	,	_	12	punct	_	_
14	which	_	WDT	WDT	_	15	nsubj	_	_
15	dropped	_	VBD	VBD	_	12	rcmod	_	_
16	by	_	IN	IN	_	15	prep	_	_
17	approximately	_	RB	RB	_	18	quantmod	_	_
18	20	_	CD	CD	_	19	num	_	_
19	percent	_	NN	NN	_	16	pobj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(a / approximately, op, p4 / percentage-entity)
(d / depress-02, ARG0, g / glut)
(d / depress-02, ARG1, t / thing)
(d2 / drop-01, ARG1, p / price-01)
(d2 / drop-01, ARG2, a / approximately)
(g / glut, domain, r / result)
(n / name, op, "Costa")
(p / price-01, ARG2, t / thing)
(p2 / person, name, n / name)
(p4 / percentage-entity, value, 2 / 20)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, g / glut)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),percent,percentage-entity,false), Span(3,4,List(1),result,result-01,false), Span(1,2,List(2),said,say-01,false)),Map(2 -> say-01, 1 -> result-01, 0 -> percentage-entity),Map(s -> say-01, p -> percentage-entity, r -> result-01))),[Ljava.lang.String;@529cfee5,Annotation([Ljava.lang.String;@7ca0863b,[Ljava.lang.String;@319854f0,[Ljava.lang.String;@748fe51d),Annotation([Ljava.lang.String;@415156bf,[Ljava.lang.String;@393881f0,[Ledu.cmu.lti.nlp.amr.Dependency;@4af46df3),Annotation([Ljava.lang.String;@4158debd,[Ljava.lang.String;@af78c87,[Ljava.lang.String;@773dab28),Annotation([Ljava.lang.String;@1ecfcbc9,[Ljava.lang.String;@1965539b,[Ledu.cmu.lti.nlp.amr.Entity;@2fc07784))
AMR:
(r / result-01, ARG1, p / percentage-entity)
(s / say-01, ARG1, r / result-01)

Decoded in 41,548 microseconds
Sentence: Costa said that the fact that prices had not collapsed already was evidence that the Taliban, drug lords and even some farmers have stockpiled the opium.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (organization :name (name :op "Taliban"))
Spans:
Span 10-11:  already => already
Span 9-10:  collapsed => collapse-01
Span 17-18:  drug => drug
Span 12-13:  evidence => (thing :ARG0-of evidence-01)
Span 22-23:  farmers => (person :ARG0-of farm-01)
Span 18-19:  lords => lord
Span 26-27:  opium => opium
Span 1-2:  said => say-01
Span 21-22:  some => some
Span 24-25:  stockpiled => stockpile-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 10-11:  already => already
Oracle Span 19-20:  and => and
Oracle Span 9-10:  collapsed => collapse-01
Oracle Span 0-1:  Costa => (person :name (name :op "Costa"))
Oracle Span 17-18:  drug => drug
Oracle Span 20-21:  even => even
Oracle Span 12-13:  evidence => evidence-01
Oracle Span 22-23:  farmers => (person :ARG0-of farm-01)
Oracle Span 18-19:  lords => lord
Oracle Span 26-27:  opium => opium
Oracle Span 6-7:  prices => (thing :ARG2-of price-01)
Oracle Span 1-2:  said => say-01
Oracle Span 21-22:  some => some
Oracle Span 24-25:  stockpiled => stockpile-01
Oracle Span 15-16:  Taliban => (criminal-organization :name (name :op "Taliban"))

Incorrect span: evidence => (thing :ARG0-of evidence-01)
Missing span: Costa => (person :name (name :op "Costa"))
Missing span: Taliban => (criminal-organization :name (name :op "Taliban"))
Missing span: evidence => evidence-01
Missing span: and => and
Missing span: even => even
Missing span: prices => (thing :ARG2-of price-01)
Dependencies:
1	Costa	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	13	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	fact	_	NN	NN	_	13	nsubj	_	_
6	that	_	IN	IN	_	10	mark	_	_
7	prices	_	NNS	NNS	_	10	nsubj	_	_
8	had	_	VBD	VBD	_	10	aux	_	_
9	not	_	RB	RB	_	10	neg	_	_
10	collapsed	_	VBN	VBN	_	5	dep	_	_
11	already	_	RB	RB	_	10	advmod	_	_
12	was	_	VBD	VBD	_	13	cop	_	_
13	evidence	_	NN	NN	_	2	ccomp	_	_
14	that	_	IN	IN	_	25	mark	_	_
15	the	_	DT	DT	_	16	det	_	_
16	Taliban	_	NNP	NNP	_	25	nsubj	_	_
17	,	_	,	,	_	16	punct	_	_
18	drug	_	NN	NN	_	19	nn	_	_
19	lords	_	NNS	NNS	_	16	conj	_	_
20	and	_	CC	CC	_	16	cc	_	_
21	even	_	RB	RB	_	23	advmod	_	_
22	some	_	DT	DT	_	23	det	_	_
23	farmers	_	NNS	NNS	_	16	conj	_	_
24	have	_	VBP	VBP	_	25	aux	_	_
25	stockpiled	_	VBN	VBN	_	13	ccomp	_	_
26	the	_	DT	DT	_	27	det	_	_
27	opium	_	NN	NN	_	25	dobj	_	_
28	.	_	.	.	_	2	punct	_	_

Oracle:
(a2 / and, op, c2 / criminal-organization)
(a2 / and, op, l / lord)
(a2 / and, op, p3 / person)
(c / collapse-01, ARG1, t / thing)
(c / collapse-01, time, a / already)
(c2 / criminal-organization, name, n2 / name)
(e / evidence-01, ARG0, c / collapse-01)
(e / evidence-01, ARG1, s2 / stockpile-01)
(f / farm-01, ARG0, p3 / person)
(l / lord, mod, d / drug)
(n / name, op, "Costa")
(n2 / name, op, "Taliban")
(p / person, name, n / name)
(p2 / price-01, ARG2, t / thing)
(p3 / person, mod, e2 / even)
(p3 / person, quant, s3 / some)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, e / evidence-01)
(s2 / stockpile-01, ARG0, a2 / and)
(s2 / stockpile-01, ARG1, o / opium)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),opium,opium,false), Span(24,25,List(1),stockpiled,stockpile-01,false), Span(22,23,List(3, 2),farmers,(person :ARG0-of farm-01),false), Span(21,22,List(4),some,some,false), Span(18,19,List(5),lords,lord,false), Span(17,18,List(6),drug,drug,false), Span(12,13,List(8, 7),evidence,(thing :ARG0-of evidence-01),false), Span(10,11,List(9),already,already,false), Span(9,10,List(10),collapsed,collapse-01,false), Span(1,2,List(11),said,say-01,false)),Map(2 -> person, 5 -> lord, 8 -> evidence-01, 7 -> thing, 1 -> stockpile-01, 11 -> say-01, 4 -> some, 6 -> drug, 9 -> already, 0 -> opium, 10 -> collapse-01, 3 -> farm-01),Map(e -> evidence-01, t -> thing, s2 -> some, s -> stockpile-01, d -> drug, p -> person, a -> already, s3 -> say-01, c -> collapse-01, l -> lord, f -> farm-01, o -> opium))),[Ljava.lang.String;@353efdbf,Annotation([Ljava.lang.String;@55cff952,[Ljava.lang.String;@660591fb,[Ljava.lang.String;@4a55a6e8),Annotation([Ljava.lang.String;@8c46918,[Ljava.lang.String;@226b143b,[Ledu.cmu.lti.nlp.amr.Dependency;@682bd3c4),Annotation([Ljava.lang.String;@f2e4acf,[Ljava.lang.String;@24097e9b,[Ljava.lang.String;@5eb97ced),Annotation([Ljava.lang.String;@68ba310d,[Ljava.lang.String;@153f66e7,[Ledu.cmu.lti.nlp.amr.Entity;@7aad3f7d))
AMR:
(c / collapse-01, ARG0, d / drug)
(c / collapse-01, ARG1, t / thing)
(c / collapse-01, time, a / already)
(e / evidence-01, ARG0, t / thing)
(e / evidence-01, ARG1, s / stockpile-01)
(f / farm-01, ARG0, p / person)
(p / person, quant, s2 / some)
(s / stockpile-01, ARG0, l / lord)
(s / stockpile-01, ARG1, o / opium)
(s3 / say-01, ARG0, p / person)
(s3 / say-01, ARG1, t / thing)

Decoded in 315,574 microseconds
Sentence: An increasing amount is also being processed in Afghanistan.

NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 1-2:  increasing => increase-01
Span 6-7:  processed => process-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  Afghanistan => (country :name (name :op "Afghanistan"))
Oracle Span 4-5:  also => also
Oracle Span 2-3:  amount => amount
Oracle Span 1-2:  increasing => increase-01
Oracle Span 6-7:  processed => process-01

Missing span: Afghanistan => (country :name (name :op "Afghanistan"))
Missing span: also => also
Missing span: amount => amount
Dependencies:
1	An	_	DT	DT	_	3	det	_	_
2	increasing	_	VBG	VBG	_	3	amod	_	_
3	amount	_	NN	NN	_	7	nsubjpass	_	_
4	is	_	VBZ	VBZ	_	7	aux	_	_
5	also	_	RB	RB	_	7	advmod	_	_
6	being	_	VBG	VBG	_	7	auxpass	_	_
7	processed	_	VBN	VBN	_	0	root	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	Afghanistan	_	NNP	NNP	_	8	pobj	_	_
10	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n / name)
(i / increase-01, ARG1, a / amount)
(n / name, op, "Afghanistan")
(p / process-01, ARG1, a / amount)
(p / process-01, location, c / country)
(p / process-01, mod, a2 / also)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),processed,process-01,false), Span(1,2,List(1),increasing,increase-01,false)),Map(1 -> increase-01, 0 -> process-01),Map(p -> process-01, i -> increase-01))),[Ljava.lang.String;@6f667ad1,Annotation([Ljava.lang.String;@566d0c69,[Ljava.lang.String;@388b401d,[Ljava.lang.String;@2bcec6a6),Annotation([Ljava.lang.String;@77a281fc,[Ljava.lang.String;@4912d525,[Ledu.cmu.lti.nlp.amr.Dependency;@2bfbffb2),Annotation([Ljava.lang.String;@765df79d,[Ljava.lang.String;@151335cb,[Ljava.lang.String;@4a7761b1),Annotation([Ljava.lang.String;@3e850122,[Ljava.lang.String;@27fde870,[Ledu.cmu.lti.nlp.amr.Entity;@2b4c3c29))
AMR:
(p / process-01, ARG1, i / increase-01)

Decoded in 15,667 microseconds
Sentence: Costa added that insurgents have been holding significant amounts of opium.

NER Entity: (person :name (name :op "Costa"))
Spans:
Span 1-2:  added => add-01
Span 8-9:  amounts => amount
Span 6-7:  holding => hold-01
Span 3-4:  insurgents => insurgent
Span 10-11:  opium => opium
Span 7-8:  significant => significant

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  added => add-01
Oracle Span 8-9:  amounts => amount
Oracle Span 0-1:  Costa => (person :name (name :op "Costa"))
Oracle Span 4-5:  have => have-quant-91
Oracle Span 6-7:  holding => hold-01
Oracle Span 3-4:  insurgents => insurgent
Oracle Span 10-11:  opium => opium
Oracle Span 7-8:  significant => significant

Missing span: Costa => (person :name (name :op "Costa"))
Missing span: have => have-quant-91
Dependencies:
1	Costa	_	NNP	NNP	_	2	nsubj	_	_
2	added	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	insurgents	_	NNS	NNS	_	7	nsubj	_	_
5	have	_	VBP	VBP	_	7	aux	_	_
6	been	_	VBN	VBN	_	7	aux	_	_
7	holding	_	VBG	VBG	_	2	ccomp	_	_
8	significant	_	JJ	JJ	_	9	amod	_	_
9	amounts	_	NNS	NNS	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	opium	_	NN	NN	_	10	pobj	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(a / add-01, ARG0, p / person)
(a / add-01, ARG1, h / hold-01)
(a2 / amount, mod, s / significant)
(h / hold-01, ARG0, i / insurgent)
(h / hold-01, ARG1, o / opium)
(h3 / have-quant-91, ARG1, o / opium)
(h3 / have-quant-91, ARG2, a2 / amount)
(n / name, op, "Costa")
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),opium,opium,false), Span(8,9,List(1),amounts,amount,false), Span(7,8,List(2),significant,significant,false), Span(6,7,List(3),holding,hold-01,false), Span(3,4,List(4),insurgents,insurgent,false), Span(1,2,List(5),added,add-01,false)),Map(2 -> significant, 5 -> add-01, 1 -> amount, 4 -> insurgent, 0 -> opium, 3 -> hold-01),Map(h -> hold-01, s -> significant, a -> amount, a2 -> add-01, i -> insurgent, o -> opium))),[Ljava.lang.String;@5ac7aa18,Annotation([Ljava.lang.String;@4cdd2c73,[Ljava.lang.String;@4abf3f0,[Ljava.lang.String;@4e4c3a38),Annotation([Ljava.lang.String;@293cde83,[Ljava.lang.String;@c27d163,[Ledu.cmu.lti.nlp.amr.Dependency;@57c88764),Annotation([Ljava.lang.String;@78faea5f,[Ljava.lang.String;@37fdfb05,[Ljava.lang.String;@5e39850),Annotation([Ljava.lang.String;@1603dc2f,[Ljava.lang.String;@398474a2,[Ledu.cmu.lti.nlp.amr.Entity;@61799544))
AMR:
(a / amount, mod, s / significant)
(a2 / add-01, ARG1, h / hold-01)
(h / hold-01, ARG0, i / insurgent)
(h / hold-01, ARG1, a / amount)
(o / opium, quant, a / amount)

Decoded in 34,414 microseconds
Sentence: Costa said the surplus is as much as 11000 tons, or more than twice world demand in the last 3 years and threatened to devalue their stockpiles.

NER Entity: (person :name (name :op "Costa"))
Spans:
Span 8-9:  11000 => 11000
Span 16-17:  demand => demand-01
Span 19-20:  last => last
Span 6-7:  much => much
Span 11-12:  or => or
Span 1-2:  said => say-01
Span 23-24:  threatened => threaten-01
Span 9-10:  tons => (mass-quantity :unit ton)
Span 21-22:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 8-9:  11000 => 11000
Oracle Span 20-21:  3 => 3
Oracle Span 22-23:  and => and
Oracle Span 0-1:  Costa => (person :name (name :op "Costa"))
Oracle Span 16-17:  demand => demand-01
Oracle Span 25-26:  devalue => devalue-01
Oracle Span 19-20:  last => last
Oracle Span 12-13:  more => more-than
Oracle Span 6-7:  much => much
Oracle Span 1-2:  said => say-01
Oracle Span 27-28:  stockpiles => stockpile
Oracle Span 3-4:  surplus => surplus
Oracle Span 23-24:  threatened => threaten-01
Oracle Span 9-10:  tons => (mass-quantity :unit ton)
Oracle Span 15-16:  world => world
Oracle Span 21-22:  years => (temporal-quantity :unit year)

Extra span: or => or
Missing span: Costa => (person :name (name :op "Costa"))
Missing span: and => and
Missing span: devalue => devalue-01
Missing span: stockpiles => stockpile
Missing span: surplus => surplus
Missing span: 3 => 3
Missing span: world => world
Missing span: more => more-than
Dependencies:
1	Costa	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	surplus	_	NN	NN	_	10	nsubj	_	_
5	is	_	VBZ	VBZ	_	10	cop	_	_
6	as	_	RB	RB	_	8	advmod	_	_
7	much	_	JJ	JJ	_	8	advmod	_	_
8	as	_	IN	IN	_	9	quantmod	_	_
9	11000	_	CD	CD	_	10	num	_	_
10	tons	_	NNS	NNS	_	2	ccomp	_	_
11	,	_	,	,	_	10	punct	_	_
12	or	_	CC	CC	_	10	cc	_	_
13	more	_	JJR	JJR	_	14	quantmod	_	_
14	than	_	IN	IN	_	17	num	_	_
15	twice	_	RB	RB	_	14	quantmod	_	_
16	world	_	NN	NN	_	17	nn	_	_
17	demand	_	NN	NN	_	10	conj	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	22	det	_	_
20	last	_	JJ	JJ	_	22	amod	_	_
21	3	_	CD	CD	_	22	num	_	_
22	years	_	NNS	NNS	_	18	pobj	_	_
23	and	_	CC	CC	_	2	cc	_	_
24	threatened	_	VBD	VBD	_	2	conj	_	_
25	to	_	TO	TO	_	26	aux	_	_
26	devalue	_	VB	VB	_	24	xcomp	_	_
27	their	_	PRP$	PRP$	_	28	poss	_	_
28	stockpiles	_	NNS	NNS	_	26	dobj	_	_
29	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, s / say-01)
(a / and, op, t3 / threaten-01)
(d / devalue-01, ARG1, s2 / stockpile)
(d2 / demand-01, ARG0, w / world)
(d2 / demand-01, duration, t2 / temporal-quantity)
(m / mass-quantity, mod, m2 / much)
(m / mass-quantity, quant, 1 / 11000)
(m / mass-quantity, unit, t / ton)
(n / name, op, "Costa")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, s3 / surplus)
(t2 / temporal-quantity, mod, l / last)
(t2 / temporal-quantity, quant, 3 / 3)
(t2 / temporal-quantity, unit, y / year)
(t3 / threaten-01, ARG0, p / person)
(t3 / threaten-01, ARG1, d / devalue-01)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),threatened,threaten-01,false), Span(21,22,List(2, 1),years,(temporal-quantity :unit year),false), Span(19,20,List(3),last,last,false), Span(16,17,List(4),demand,demand-01,false), Span(11,12,List(5),or,or,false), Span(9,10,List(7, 6),tons,(mass-quantity :unit ton),false), Span(8,9,List(8),11000,11000,false), Span(6,7,List(9),much,much,false), Span(1,2,List(10),said,say-01,false)),Map(2 -> year, 5 -> or, 8 -> 11000, 7 -> ton, 1 -> temporal-quantity, 4 -> demand-01, 6 -> mass-quantity, 9 -> much, 0 -> threaten-01, 10 -> say-01, 3 -> last),Map(t -> threaten-01, m2 -> much, s -> say-01, m -> mass-quantity, d -> demand-01, 1 -> 11000, t3 -> ton, y -> year, t2 -> temporal-quantity, l -> last, o -> or))),[Ljava.lang.String;@78c1a023,Annotation([Ljava.lang.String;@70abf9b0,[Ljava.lang.String;@6a10b263,[Ljava.lang.String;@476ec9d0),Annotation([Ljava.lang.String;@325bb9a6,[Ljava.lang.String;@1d12b024,[Ledu.cmu.lti.nlp.amr.Dependency;@72fe8a4f),Annotation([Ljava.lang.String;@43effd89,[Ljava.lang.String;@2c16fadb,[Ljava.lang.String;@248deced),Annotation([Ljava.lang.String;@2227a6c1,[Ljava.lang.String;@1e9804b9,[Ledu.cmu.lti.nlp.amr.Entity;@543e593))
AMR:
(m / mass-quantity, quant, 1 / 11000)
(m / mass-quantity, unit, t3 / ton)
(o / or, op, d / demand-01)
(o / or, op, m / mass-quantity)
(o / or, op, t2 / temporal-quantity)
(s / say-01, ARG0, m2 / much)
(s / say-01, ARG1, o / or)
(t / threaten-01, ARG1, m / mass-quantity)
(t / threaten-01, ARG2, l / last)
(t2 / temporal-quantity, unit, y / year)

Decoded in 277,240 microseconds
Sentence: The United Nations found that Afghanistan produced 8500 tons of opium in 2008.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 12-13:  2008 => (date-entity :year 2008)
Span 7-8:  8500 => (date-entity :year 8500)
Span 10-11:  opium => opium
Span 6-7:  produced => produce-01
Span 8-9:  tons => (mass-quantity :unit ton)
Span 1-3:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  2008 => (date-entity :year 2008)
Oracle Span 7-8:  8500 => 8500
Oracle Span 5-6:  Afghanistan => (country :name (name :op "Afghanistan"))
Oracle Span 3-4:  found => find-01
Oracle Span 10-11:  opium => opium
Oracle Span 6-7:  produced => produce-01
Oracle Span 8-9:  tons => (mass-quantity :unit ton)
Oracle Span 1-3:  United Nations => (organization :name (name :op "Nations" :op "United"))

Incorrect span: 8500 => (date-entity :year 8500)
Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: United Nations => (organization :name (name :op "Nations" :op "United"))
Missing span: Afghanistan => (country :name (name :op "Afghanistan"))
Missing span: found => find-01
Missing span: 8500 => 8500
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	United	_	NNP	NNP	_	3	nn	_	_
3	Nations	_	NNPS	NNPS	_	4	nsubj	_	_
4	found	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	7	mark	_	_
6	Afghanistan	_	NNP	NNP	_	7	nsubj	_	_
7	produced	_	VBD	VBD	_	4	ccomp	_	_
8	8500	_	CD	CD	_	9	num	_	_
9	tons	_	NNS	NNS	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	opium	_	NN	NN	_	10	pobj	_	_
12	in	_	IN	IN	_	7	prep	_	_
13	2008	_	CD	CD	_	12	pobj	_	_
14	.	_	.	.	_	4	punct	_	_

Oracle:
(c / country, name, n2 / name)
(d2 / date-entity, year, 2008)
(f / find-01, ARG0, o / organization)
(f / find-01, ARG1, p / produce-01)
(m / mass-quantity, quant, 8 / 8500)
(m / mass-quantity, unit, t2 / ton)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Afghanistan")
(o / organization, name, n / name)
(o2 / opium, quant, m / mass-quantity)
(p / produce-01, ARG0, c / country)
(p / produce-01, ARG1, m / mass-quantity)
(p / produce-01, time, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(1, 0),2008,(date-entity :year 2008),false), Span(10,11,List(2),opium,opium,false), Span(8,9,List(4, 3),tons,(mass-quantity :unit ton),false), Span(7,8,List(6, 5),8500,(date-entity :year 8500),false), Span(6,7,List(7),produced,produce-01,false), Span(1,3,List(11, 10, 9, 8),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> opium, 5 -> date-entity, 8 -> organization, 7 -> produce-01, 1 -> 2008, 11 -> "Nations", 4 -> ton, 6 -> 8500, 9 -> name, 0 -> date-entity, 10 -> "United", 3 -> mass-quantity),Map(n -> name, 2 -> 2008, t -> ton, 8 -> 8500, m -> mass-quantity, d -> date-entity, p -> produce-01, o2 -> organization, d2 -> date-entity, o -> opium))),[Ljava.lang.String;@4e628b52,Annotation([Ljava.lang.String;@51ec2df1,[Ljava.lang.String;@f8f56b9,[Ljava.lang.String;@15fa55a6),Annotation([Ljava.lang.String;@4f186450,[Ljava.lang.String;@7fab4be7,[Ledu.cmu.lti.nlp.amr.Dependency;@a64e035),Annotation([Ljava.lang.String;@4d74c3ba,[Ljava.lang.String;@41c204a0,[Ljava.lang.String;@64138b0c),Annotation([Ljava.lang.String;@49dbaaf3,[Ljava.lang.String;@22d9c961,[Ledu.cmu.lti.nlp.amr.Entity;@736f3e9e))
AMR:
(d / date-entity, year, 2 / 2008)
(d2 / date-entity, year, 8 / 8500)
(m / mass-quantity, time, d2 / date-entity)
(m / mass-quantity, unit, t / ton)
(n / name, op, "Nations")
(n / name, op, "United")
(o / opium, quant, m / mass-quantity)
(o2 / organization, name, n / name)
(p / produce-01, ARG0, o2 / organization)
(p / produce-01, ARG1, o / opium)
(p / produce-01, time, d / date-entity)

Decoded in 65,995 microseconds
Sentence: World demand was estimated at about 4400 tons per year.

Spans:
Span 6-7:  4400 => (date-entity :year 4400)
Span 1-2:  demand => demand-01
Span 3-4:  estimated => estimate-01
Span 7-8:  tons => (mass-quantity :unit ton)

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 6-7:  4400 => 4400
Oracle Span 5-6:  about => about
Oracle Span 1-2:  demand => demand-01
Oracle Span 3-4:  estimated => estimate-01
Oracle Span 7-8:  tons => (mass-quantity :unit ton)
Oracle Span 0-1:  World => world
Oracle Span 9-10:  year => (temporal-quantity :unit year)

Incorrect span: 4400 => (date-entity :year 4400)
Missing span: about => about
Missing span: 4400 => 4400
Missing span: year => (temporal-quantity :unit year)
Missing span: World => world
Dependencies:
1	World	_	NNP	NNP	_	2	nn	_	_
2	demand	_	NN	NN	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	estimated	_	VBN	VBN	_	0	root	_	_
5	at	_	IN	IN	_	4	prep	_	_
6	about	_	RB	RB	_	8	advmod	_	_
7	4400	_	CD	CD	_	8	num	_	_
8	tons	_	NNS	NNS	_	5	pobj	_	_
9	per	_	IN	IN	_	8	prep	_	_
10	year	_	NN	NN	_	9	pobj	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(a2 / about, op, m / mass-quantity)
(d / demand-01, ARG0, w2 / world)
(e / estimate-01, ARG1, d / demand-01)
(m / mass-quantity, quant, 4 / 4400)
(m / mass-quantity, unit, t2 / ton)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(1, 0),tons,(mass-quantity :unit ton),false), Span(6,7,List(3, 2),4400,(date-entity :year 4400),false), Span(3,4,List(4),estimated,estimate-01,false), Span(1,2,List(5),demand,demand-01,false)),Map(2 -> date-entity, 5 -> demand-01, 1 -> ton, 4 -> estimate-01, 0 -> mass-quantity, 3 -> 4400),Map(e -> estimate-01, t -> ton, d -> date-entity, m -> mass-quantity, 4 -> 4400, d2 -> demand-01))),[Ljava.lang.String;@bdc8014,Annotation([Ljava.lang.String;@1f443fae,[Ljava.lang.String;@73ba6fe6,[Ljava.lang.String;@79ab34c1),Annotation([Ljava.lang.String;@1698d7c0,[Ljava.lang.String;@281f23f2,[Ledu.cmu.lti.nlp.amr.Dependency;@87abc48),Annotation([Ljava.lang.String;@28d79cba,[Ljava.lang.String;@782168b7,[Ljava.lang.String;@29f0c4f2),Annotation([Ljava.lang.String;@7435a578,[Ljava.lang.String;@6093d508,[Ledu.cmu.lti.nlp.amr.Entity;@13047d7d))
AMR:
(d / date-entity, year, 4 / 4400)
(e / estimate-01, ARG0, m / mass-quantity)
(e / estimate-01, ARG1, d2 / demand-01)
(m / mass-quantity, time, d / date-entity)
(m / mass-quantity, unit, t / ton)

Decoded in 114,944 microseconds
Sentence: The Taliban this year are taking a passive stance toward cultivation and putting less pressure on Afghan farmers to plant opium poppy.

NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (thing :name (name :op "Afghan"))
Spans:
Span 10-11:  cultivation => cultivate-01
Span 17-18:  farmers => (person :ARG0-of farm-01)
Span 20-21:  opium => opium
Span 7-8:  passive => passive
Span 19-20:  plant => plant
Span 21-22:  poppy => poppy
Span 14-15:  pressure => pressure-01
Span 12-13:  putting => put-01
Span 8-9:  stance => stance
Span 2-3:  this => this

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 16-17:  Afghan => (country :name (name :op "Afghanistan"))
Oracle Span 11-12:  and => and
Oracle Span 10-11:  cultivation => cultivate-01
Oracle Span 17-18:  farmers => (person :ARG0-of farm-01)
Oracle Span 13-14:  less => less
Oracle Span 20-21:  opium => opium
Oracle Span 7-8:  passive => passive
Oracle Span 19-20:  plant => plant-01
Oracle Span 21-22:  poppy => poppy
Oracle Span 14-15:  pressure => pressure-01
Oracle Span 12-13:  putting => put-01
Oracle Span 8-9:  stance => stance
Oracle Span 5-6:  taking => take-01
Oracle Span 1-2:  Taliban => (criminal-organization :name (name :op "Taliban"))
Oracle Span 2-3:  this => this
Oracle Span 3-4:  year => year

Incorrect span: plant => plant
Missing span: Taliban => (criminal-organization :name (name :op "Taliban"))
Missing span: Afghan => (country :name (name :op "Afghanistan"))
Missing span: and => and
Missing span: less => less
Missing span: plant => plant-01
Missing span: taking => take-01
Missing span: year => year
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	Taliban	_	NNP	NNP	_	6	nsubj	_	_
3	this	_	DT	DT	_	4	det	_	_
4	year	_	NN	NN	_	6	tmod	_	_
5	are	_	VBP	VBP	_	6	aux	_	_
6	taking	_	VBG	VBG	_	0	root	_	_
7	a	_	DT	DT	_	9	det	_	_
8	passive	_	JJ	JJ	_	9	amod	_	_
9	stance	_	NN	NN	_	6	dobj	_	_
10	toward	_	IN	IN	_	9	prep	_	_
11	cultivation	_	NN	NN	_	10	pobj	_	_
12	and	_	CC	CC	_	6	cc	_	_
13	putting	_	VBG	VBG	_	6	conj	_	_
14	less	_	JJR	JJR	_	15	amod	_	_
15	pressure	_	NN	NN	_	13	dobj	_	_
16	on	_	IN	IN	_	13	prep	_	_
17	Afghan	_	JJ	JJ	_	18	amod	_	_
18	farmers	_	NNS	NNS	_	16	pobj	_	_
19	to	_	TO	TO	_	20	aux	_	_
20	plant	_	VB	VB	_	13	vmod	_	_
21	opium	_	NN	NN	_	20	dobj	_	_
22	poppy	_	RB	RB	_	20	advmod	_	_
23	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, p6 / put-01)
(a / and, op, t / take-01)
(c / criminal-organization, name, n / name)
(c3 / country, name, n2 / name)
(f / farm-01, ARG0, p5 / person)
(n / name, op, "Taliban")
(n2 / name, op, "Afghanistan")
(p2 / pressure-01, ARG0, c / criminal-organization)
(p2 / pressure-01, ARG1, p5 / person)
(p2 / pressure-01, ARG2, p3 / plant-01)
(p2 / pressure-01, mod, l / less)
(p3 / plant-01, ARG1, p4 / poppy)
(p4 / poppy, mod, o / opium)
(p5 / person, mod, c3 / country)
(p6 / put-01, ARG1, p2 / pressure-01)
(s / stance, mod, p / passive)
(s / stance, prep-toward, c2 / cultivate-01)
(t / take-01, ARG0, c / criminal-organization)
(t / take-01, ARG1, s / stance)
(t / take-01, time, y / year)
(y / year, mod, t2 / this)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),poppy,poppy,false), Span(20,21,List(1),opium,opium,false), Span(19,20,List(2),plant,plant,false), Span(17,18,List(4, 3),farmers,(person :ARG0-of farm-01),false), Span(14,15,List(5),pressure,pressure-01,false), Span(12,13,List(6),putting,put-01,false), Span(10,11,List(7),cultivation,cultivate-01,false), Span(8,9,List(8),stance,stance,false), Span(7,8,List(9),passive,passive,false), Span(2,3,List(10),this,this,false)),Map(2 -> plant, 5 -> pressure-01, 8 -> stance, 7 -> cultivate-01, 1 -> opium, 4 -> farm-01, 6 -> put-01, 9 -> passive, 0 -> poppy, 10 -> this, 3 -> person),Map(t -> this, p5 -> put-01, p2 -> plant, s -> stance, p -> poppy, p4 -> pressure-01, p6 -> passive, c -> cultivate-01, f -> farm-01, o -> opium, p3 -> person))),[Ljava.lang.String;@3c7cfcbb,Annotation([Ljava.lang.String;@65bb9029,[Ljava.lang.String;@1bfe3203,[Ljava.lang.String;@2b214b94),Annotation([Ljava.lang.String;@70e3f36f,[Ljava.lang.String;@49601f82,[Ledu.cmu.lti.nlp.amr.Dependency;@23e44287),Annotation([Ljava.lang.String;@2b8d084,[Ljava.lang.String;@6daf2337,[Ljava.lang.String;@24fabd0f),Annotation([Ljava.lang.String;@250b236d,[Ljava.lang.String;@61f3fbb8,[Ledu.cmu.lti.nlp.amr.Entity;@7551da2a))
AMR:
(c / cultivate-01, ARG1, t / this)
(f / farm-01, ARG0, p3 / person)
(f / farm-01, ARG1, p2 / plant)
(p2 / plant, mod, p / poppy)
(p4 / pressure-01, ARG1, o / opium)
(p5 / put-01, ARG0, s / stance)
(p5 / put-01, ARG1, p4 / pressure-01)
(p5 / put-01, purpose, p2 / plant)
(s / stance, mod, p6 / passive)
(s / stance, topic, c / cultivate-01)

Decoded in 193,555 microseconds
Sentence: This then supports the current price.

Spans:
Span 4-5:  current => current
Span 2-3:  supports => support-01
Span 1-2:  then => then
Span 0-1:  This => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  current => current
Oracle Span 5-6:  price => (thing :ARG2-of price-01)
Oracle Span 2-3:  supports => support-01
Oracle Span 1-2:  then => then
Oracle Span 0-1:  This => this

Missing span: price => (thing :ARG2-of price-01)
Dependencies:
1	This	_	DT	DT	_	3	nsubj	_	_
2	then	_	RB	RB	_	3	advmod	_	_
3	supports	_	VBZ	VBZ	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	current	_	JJ	JJ	_	6	amod	_	_
6	price	_	NN	NN	_	3	dobj	_	_
7	.	_	.	.	_	3	punct	_	_

Oracle:
(p / price-01, ARG2, t3 / thing)
(s / support-01, ARG0, t / this)
(s / support-01, ARG1, t3 / thing)
(s / support-01, mod, t2 / then)
(t3 / thing, mod, c / current)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),current,current,false), Span(2,3,List(1),supports,support-01,false), Span(1,2,List(2),then,then,false), Span(0,1,List(3),This,this,false)),Map(2 -> then, 1 -> support-01, 0 -> current, 3 -> this),Map(t -> then, s -> support-01, t2 -> this, c -> current))),[Ljava.lang.String;@432034a,Annotation([Ljava.lang.String;@78de58ea,[Ljava.lang.String;@60e5272,[Ljava.lang.String;@7d755813),Annotation([Ljava.lang.String;@69c93ca4,[Ljava.lang.String;@63da207f,[Ledu.cmu.lti.nlp.amr.Dependency;@173373b4),Annotation([Ljava.lang.String;@40d10481,[Ljava.lang.String;@60dd3c23,[Ljava.lang.String;@52b6319f),Annotation([Ljava.lang.String;@5e9456ae,[Ljava.lang.String;@16a9a4f1,[Ledu.cmu.lti.nlp.amr.Entity;@1f1cae23))
AMR:
(s / support-01, ARG1, t2 / this)
(s / support-01, mod, t / then)
(s / support-01, time, c / current)

Decoded in 14,925 microseconds
Sentence: Costa is an Italian diplomat who has served at the U.N. Office on Drugs and Crime for 6 years.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (thing :name (name :op "Italian"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (thing :name (name :op "Italian"))
Spans:
Span 15-16:  Crime => crime
Span 3-4:  Italian => (country :name (name :op "Italy"))
Span 7-8:  served => serve-01
Span 18-19:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 17-18:  6 => 6
Oracle Span 0-1:  Costa => (person :name (name :op "Costa"))
Oracle Span 4-5:  diplomat => diplomat
Oracle Span 6-7:  has => have-org-role-91
Oracle Span 3-4:  Italian => (country :name (name :op "Italy"))
Oracle Span 7-8:  served => serve-01
Oracle Span 10-16:  U.N. Office on Drugs and Crime => (organization :name (name :op "Crime" :op "and" :op "Drugs" :op "on" :op "Office" :op "U.N."))
Oracle Span 18-19:  years => (temporal-quantity :unit year)

Extra span: Crime => crime
Missing span: Costa => (person :name (name :op "Costa"))
Missing span: U.N. Office on Drugs and Crime => (organization :name (name :op "Crime" :op "and" :op "Drugs" :op "on" :op "Office" :op "U.N."))
Missing span: 6 => 6
Missing span: diplomat => diplomat
Missing span: has => have-org-role-91
Dependencies:
1	Costa	_	NNP	NNP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	an	_	DT	DT	_	5	det	_	_
4	Italian	_	JJ	JJ	_	5	amod	_	_
5	diplomat	_	NN	NN	_	0	root	_	_
6	who	_	WP	WP	_	8	nsubj	_	_
7	has	_	VBZ	VBZ	_	8	aux	_	_
8	served	_	VBN	VBN	_	5	rcmod	_	_
9	at	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	U.N.	_	NNP	NNP	_	12	nn	_	_
12	Office	_	NNP	NNP	_	9	pobj	_	_
13	on	_	IN	IN	_	12	prep	_	_
14	Drugs	_	NNP	NNP	_	13	pobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	Crime	_	NNP	NNP	_	14	conj	_	_
17	for	_	IN	IN	_	8	prep	_	_
18	6	_	CD	CD	_	19	num	_	_
19	years	_	NNS	NNS	_	17	pobj	_	_
20	.	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, d / diplomat)
(n / name, op, "Italy")
(n2 / name, op, "Costa")
(n3 / name, op, "Crime")
(n3 / name, op, "Drugs")
(n3 / name, op, "Office")
(n3 / name, op, "U.N.")
(n3 / name, op, "and")
(n3 / name, op, "on")
(o / organization, name, n3 / name)
(p / person, name, n2 / name)
(s / serve-01, ARG0, p / person)
(s / serve-01, ARG2, o / organization)
(s / serve-01, duration, t2 / temporal-quantity)
(t2 / temporal-quantity, quant, 6 / 6)
(t2 / temporal-quantity, unit, y2 / year)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),years,(temporal-quantity :unit year),false), Span(15,16,List(2),Crime,crime,false), Span(7,8,List(3),served,serve-01,false), Span(3,4,List(6, 5, 4),Italian,(country :name (name :op "Italy")),false)),Map(2 -> crime, 5 -> name, 1 -> year, 4 -> country, 6 -> "Italy", 0 -> temporal-quantity, 3 -> serve-01),Map(n -> name, t -> temporal-quantity, s -> serve-01, y -> year, c -> crime, c2 -> country))),[Ljava.lang.String;@7c455e96,Annotation([Ljava.lang.String;@985696,[Ljava.lang.String;@5bcde458,[Ljava.lang.String;@215a34b4),Annotation([Ljava.lang.String;@77bd7fe7,[Ljava.lang.String;@35d3ab60,[Ledu.cmu.lti.nlp.amr.Dependency;@10876a6),Annotation([Ljava.lang.String;@71870da7,[Ljava.lang.String;@6dd91637,[Ljava.lang.String;@45792847),Annotation([Ljava.lang.String;@706cb08,[Ljava.lang.String;@4e25147a,[Ledu.cmu.lti.nlp.amr.Entity;@6b68cb27))
AMR:
(c / crime, location, t / temporal-quantity)
(c2 / country, name, n / name)
(n / name, op, "Italy")
(s / serve-01, ARG1, t / temporal-quantity)
(s / serve-01, mod, c2 / country)
(t / temporal-quantity, unit, y / year)

Decoded in 55,515 microseconds
Sentence: 2001-10-05

mkDayMonthYear(2001-10-05,05,10,2001)
mkDayMonthYear(2001-10-05,05,10,2001)
Spans:
Span 0-1:  2001-10-05 => (date-entity :day 5 :month 10 :year 2001)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2001-10-05 => (date-entity :year 2001 :month 10 :day 5)

Incorrect span: 2001-10-05 => (date-entity :day 5 :month 10 :year 2001)
Missing span: 2001-10-05 => (date-entity :year 2001 :month 10 :day 5)
Dependencies:
1	2001-10-05	_	NNP	NNP	_	0	root	_	_

Oracle:
(d2 / date-entity, day, 5)
(d2 / date-entity, month, 10)
(d2 / date-entity, year, 2001)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2001-10-05,(date-entity :day 5 :month 10 :year 2001),false)),Map(2 -> 10, 1 -> 5, 0 -> date-entity, 3 -> 2001),Map(2 -> 2001, 5 -> 5, d -> date-entity, 1 -> 10))),[Ljava.lang.String;@675ffd1d,Annotation([Ljava.lang.String;@56303475,[Ljava.lang.String;@30506c0d,[Ljava.lang.String;@1dcca8d3),Annotation([Ljava.lang.String;@5631962,[Ljava.lang.String;@52a70627,[Ledu.cmu.lti.nlp.amr.Dependency;@6124287a),Annotation([Ljava.lang.String;@19569ebd,[Ljava.lang.String;@4632cfc,[Ljava.lang.String;@6e1f8469),Annotation([Ljava.lang.String;@2e380628,[Ljava.lang.String;@3b6c624,[Ledu.cmu.lti.nlp.amr.Entity;@1eaf1e62))
AMR:
(d / date-entity, day, 5 / 5)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2001)

Decoded in 8,555 microseconds
Sentence: South Africa (ZA)

NER Entity: (country :name (name :op "South" :op "Africa"))
Spans:
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-2:  South Africa => (country :name (name :op "Africa" :op "South"))

Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Dependencies:
1	South	_	NNP	NNP	_	2	nn	_	_
2	Africa	_	NNP	NNP	_	0	root	_	_
3	(	_	(	(	_	4	punct	_	_
4	ZA	_	NNP	NNP	_	2	appos	_	_
5	)	_	)	)	_	4	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Africa")
(n / name, op, "South")

Input(Some(Graph(null,ArrayBuffer(Span(0,2,List(3, 2, 1, 0),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(2 -> "South", 1 -> name, 0 -> country, 3 -> "Africa"),Map(n -> name, c -> country))),[Ljava.lang.String;@c81fd12,Annotation([Ljava.lang.String;@62e6a3ec,[Ljava.lang.String;@5754de72,[Ljava.lang.String;@31ee96f4),Annotation([Ljava.lang.String;@320494b6,[Ljava.lang.String;@652ab8d9,[Ledu.cmu.lti.nlp.amr.Dependency;@14fc5d40),Annotation([Ljava.lang.String;@51e0301d,[Ljava.lang.String;@47d7bfb3,[Ljava.lang.String;@770b3be0),Annotation([Ljava.lang.String;@1eb6e1c,[Ljava.lang.String;@51dbd6e4,[Ledu.cmu.lti.nlp.amr.Entity;@2b8bd14b))
AMR:
(c / country, name, n / name)
(n / name, op, "Africa")
(n / name, op, "South")

Decoded in 7,930 microseconds
Sentence: International; terrorism; Government; money

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 6-7:  money => money
Span 2-3:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 4-5:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 6-7:  money => money
Oracle Span 2-3:  terrorism => terrorism

Extra span: ; => and
Extra span: ; => and
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	terrorism	_	NN	NN	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	Government	_	NNP	NNP	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	money	_	NN	NN	_	5	dep	_	_

Oracle:
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, m / money)
(a / and, op, t / terrorism)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),money,money,false), Span(5,6,List(1),;,and,false), Span(3,4,List(2),;,and,false), Span(2,3,List(3),terrorism,terrorism,false), Span(1,2,List(4),;,and,false)),Map(2 -> and, 1 -> and, 4 -> and, 0 -> money, 3 -> terrorism),Map(t -> terrorism, a3 -> and, m -> money, a -> and, a2 -> and))),[Ljava.lang.String;@5f13be1,Annotation([Ljava.lang.String;@5f303ecd,[Ljava.lang.String;@50d3bf39,[Ljava.lang.String;@25a73de1),Annotation([Ljava.lang.String;@29852487,[Ljava.lang.String;@771db12c,[Ledu.cmu.lti.nlp.amr.Dependency;@3afae281),Annotation([Ljava.lang.String;@26ae880a,[Ljava.lang.String;@260f2144,[Ljava.lang.String;@3c017078),Annotation([Ljava.lang.String;@51827393,[Ljava.lang.String;@3be4f71,[Ledu.cmu.lti.nlp.amr.Entity;@5c645b43))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, t / terrorism)
(a3 / and, op, a2 / and)
(a3 / and, op, m / money)

Decoded in 19,091 microseconds
Sentence: The South African government imposed a ban that prohibits the recruitment of people inside or outside of South Africa for mercenary or foreign military assistance.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "South" :op "Africa"))
Spans:
Span 24-25:  assistance => assist-01
Span 6-7:  ban => ban-01
Span 4-5:  imposed => impose-01
Span 13-14:  inside => inside
Span 21-22:  or => or
Span 14-15:  or => or
Span 15-16:  outside => outside
Span 8-9:  prohibits => prohibit-01
Span 10-11:  recruitment => recruit-01
Span 17-19:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 24-25:  assistance => assist-01
Oracle Span 6-7:  ban => ban
Oracle Span 22-23:  foreign => foreign
Oracle Span 3-4:  government => (government-organization :ARG0-of govern-01)
Oracle Span 4-5:  imposed => impose-01
Oracle Span 13-14:  inside => inside
Oracle Span 20-21:  mercenary => mercenary
Oracle Span 23-24:  military => military
Oracle Span 14-15:  or => (person :location-of or)
Oracle Span 21-22:  or => or
Oracle Span 15-16:  outside => outside
Oracle Span 8-9:  prohibits => prohibit-01
Oracle Span 10-11:  recruitment => recruit-01
Oracle Span 17-19:  South Africa => (country :name (name :op "Africa" :op "South"))

Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Incorrect span: or => or
Incorrect span: ban => ban-01
Extra span: South African => (thing :name (name :op "South" :op "African"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: ban => ban
Missing span: or => (person :location-of or)
Missing span: military => military
Missing span: foreign => foreign
Missing span: mercenary => mercenary
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	South	_	NNP	NNP	_	3	amod	_	_
3	African	_	JJ	JJ	_	4	amod	_	_
4	government	_	NN	NN	_	5	nsubj	_	_
5	imposed	_	VBD	VBD	_	0	root	_	_
6	a	_	DT	DT	_	7	det	_	_
7	ban	_	NN	NN	_	5	dobj	_	_
8	that	_	WDT	WDT	_	9	nsubj	_	_
9	prohibits	_	VBZ	VBZ	_	7	rcmod	_	_
10	the	_	DT	DT	_	11	det	_	_
11	recruitment	_	NN	NN	_	9	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	people	_	NNS	NNS	_	12	pobj	_	_
14	inside	_	RB	RB	_	13	advmod	_	_
15	or	_	CC	CC	_	14	cc	_	_
16	outside	_	RB	RB	_	14	conj	_	_
17	of	_	IN	IN	_	11	prep	_	_
18	South	_	NNP	NNP	_	19	nn	_	_
19	Africa	_	NNP	NNP	_	17	pobj	_	_
20	for	_	IN	IN	_	19	prep	_	_
21	mercenary	_	JJ	JJ	_	20	pobj	_	_
22	or	_	CC	CC	_	21	cc	_	_
23	foreign	_	JJ	JJ	_	25	amod	_	_
24	military	_	JJ	JJ	_	25	amod	_	_
25	assistance	_	NN	NN	_	21	conj	_	_
26	.	_	.	.	_	5	punct	_	_

Oracle:
(a / assist-01, ARG1, m2 / military)
(c / country, name, n / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / impose-01, ARG0, g / government-organization)
(i / impose-01, ARG1, b / ban)
(i2 / inside, op, c / country)
(m2 / military, mod, f / foreign)
(n / name, op, "Africa")
(n / name, op, "South")
(o / or, op, a / assist-01)
(o / or, op, m / mercenary)
(o2 / or, location, p2 / person)
(o2 / or, op, i2 / inside)
(o2 / or, op, o3 / outside)
(o3 / outside, op, c / country)
(p / prohibit-01, ARG0, b / ban)
(p / prohibit-01, ARG1, r / recruit-01)
(r / recruit-01, ARG1, p2 / person)
(r / recruit-01, ARG2, o / or)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),assistance,assist-01,false), Span(21,22,List(1),or,or,false), Span(17,19,List(5, 4, 3, 2),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(15,16,List(6),outside,outside,false), Span(14,15,List(7),or,or,false), Span(13,14,List(8),inside,inside,false), Span(10,11,List(9),recruitment,recruit-01,false), Span(8,9,List(10),prohibits,prohibit-01,false), Span(6,7,List(11),ban,ban-01,false), Span(4,5,List(12),imposed,impose-01,false), Span(1,3,List(16, 15, 14, 13),South African,(thing :name (name :op "South" :op "African")),false)),Map(2 -> country, 5 -> "Africa", 12 -> impose-01, 15 -> "South", 8 -> inside, 7 -> or, 1 -> or, 4 -> "South", 11 -> ban-01, 14 -> name, 6 -> outside, 0 -> assist-01, 9 -> recruit-01, 16 -> "African", 3 -> name, 10 -> prohibit-01, 13 -> thing),Map(n -> name, b -> ban-01, t -> thing, o3 -> or, p -> prohibit-01, a -> assist-01, o2 -> outside, i2 -> impose-01, i -> inside, r -> recruit-01, c -> country, o -> or, n2 -> name))),[Ljava.lang.String;@6bd16207,Annotation([Ljava.lang.String;@298d9a05,[Ljava.lang.String;@58399d82,[Ljava.lang.String;@26f96b85),Annotation([Ljava.lang.String;@46d8f407,[Ljava.lang.String;@3c0036b,[Ledu.cmu.lti.nlp.amr.Dependency;@17814b1c),Annotation([Ljava.lang.String;@7ac9af2a,[Ljava.lang.String;@7bb004b8,[Ljava.lang.String;@78e89bfe),Annotation([Ljava.lang.String;@652ce654,[Ljava.lang.String;@522ba524,[Ledu.cmu.lti.nlp.amr.Entity;@29c5ee1d))
AMR:
(a / assist-01, ARG1, c / country)
(b / ban-01, ARG1, o3 / or)
(c / country, name, n / name)
(i2 / impose-01, ARG1, b / ban-01)
(n / name, op, "Africa")
(n / name, op, "South")
(n2 / name, op, "African")
(n2 / name, op, "South")
(o / or, op, a / assist-01)
(o3 / or, op, i / inside)
(o3 / or, op, o2 / outside)
(p / prohibit-01, ARG0, b / ban-01)
(p / prohibit-01, ARG1, r / recruit-01)
(r / recruit-01, ARG0, t / thing)
(r / recruit-01, ARG1, c / country)
(t / thing, name, n2 / name)

Decoded in 380,927 microseconds
Sentence: On 011006 The Citizen newspaper stated that it is illegal for South Africans to be involved in mercenary activity or to render foreign military assistance inside or outside of South Africa.

mkDayMonthYear(011006,06,10,2001)
mkDayMonthYear(011006,06,10,01)
NER Entity: (thing :name (name :op "South" :op "Africans"))
NER Entity: (country :name (name :op "South" :op "Africa"))
mkDayMonthYear(011006,06,10,2001)
mkDayMonthYear(011006,06,10,01)
Spans:
Span 1-2:  011006 => (date-entity :day 6 :month 10 :year 01)
Span 18-19:  activity => activity
Span 24-25:  assistance => assist-01
Span 25-26:  inside => inside
Span 15-16:  involved => involve-01
Span 4-5:  newspaper => newspaper
Span 26-27:  or => or
Span 19-20:  or => or
Span 27-28:  outside => outside
Span 21-22:  render => render-01
Span 29-31:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 11-13:  South Africans => (thing :name (name :op "South" :op "Africans"))

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 1-2:  011006 => (date-entity :year 2001 :month 10 :day 6)
Oracle Span 18-19:  activity => activity
Oracle Span 24-25:  assistance => assist-01
Oracle Span 22-23:  foreign => foreign
Oracle Span 9-10:  illegal => (law :polarity -)
Oracle Span 25-26:  inside => inside
Oracle Span 15-16:  involved => involve-01
Oracle Span 17-18:  mercenary => mercenary
Oracle Span 23-24:  military => military
Oracle Span 4-5:  newspaper => newspaper
Oracle Span 19-20:  or => or
Oracle Span 26-27:  or => or
Oracle Span 27-28:  outside => outside
Oracle Span 21-22:  render => render-01
Oracle Span 29-31:  South Africa => (person :mod (country :name (name :op "Africa" :op "South")))
Oracle Span 5-6:  stated => state-01
Oracle Span 2-4:  The Citizen => (name :op "Citizen" :op "The")

Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Extra span: South Africans => (thing :name (name :op "South" :op "Africans"))
Incorrect span: 011006 => (date-entity :day 6 :month 10 :year 01)
Missing span: The Citizen => (name :op "Citizen" :op "The")
Missing span: South Africa => (person :mod (country :name (name :op "Africa" :op "South")))
Missing span: 011006 => (date-entity :year 2001 :month 10 :day 6)
Missing span: stated => state-01
Missing span: illegal => (law :polarity -)
Missing span: military => military
Missing span: foreign => foreign
Missing span: mercenary => mercenary
Dependencies:
1	On	_	IN	IN	_	6	prep	_	_
2	011006	_	CD	CD	_	1	pobj	_	_
3	The	_	DT	DT	_	5	det	_	_
4	Citizen	_	NNP	NNP	_	5	nn	_	_
5	newspaper	_	NN	NN	_	6	nsubj	_	_
6	stated	_	VBD	VBD	_	0	root	_	_
7	that	_	IN	IN	_	10	mark	_	_
8	it	_	PRP	PRP	_	10	nsubj	_	_
9	is	_	VBZ	VBZ	_	10	cop	_	_
10	illegal	_	JJ	JJ	_	6	ccomp	_	_
11	for	_	IN	IN	_	10	prep	_	_
12	South	_	NNP	NNP	_	13	nn	_	_
13	Africans	_	NNPS	NNPS	_	11	pobj	_	_
14	to	_	TO	TO	_	16	aux	_	_
15	be	_	VB	VB	_	16	auxpass	_	_
16	involved	_	VBN	VBN	_	10	ccomp	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	mercenary	_	JJ	JJ	_	19	amod	_	_
19	activity	_	NN	NN	_	17	pobj	_	_
20	or	_	CC	CC	_	16	cc	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	render	_	VB	VB	_	16	conj	_	_
23	foreign	_	JJ	JJ	_	25	amod	_	_
24	military	_	JJ	JJ	_	25	amod	_	_
25	assistance	_	NN	NN	_	22	dobj	_	_
26	inside	_	RB	RB	_	22	advmod	_	_
27	or	_	CC	CC	_	26	cc	_	_
28	outside	_	RB	RB	_	26	conj	_	_
29	of	_	IN	IN	_	22	prep	_	_
30	South	_	NNP	NNP	_	31	nn	_	_
31	Africa	_	NNP	NNP	_	29	pobj	_	_
32	.	_	.	.	_	6	punct	_	_

Oracle:
(a / activity, mod, m / mercenary)
(a2 / assist-01, ARG1, m2 / military)
(c / country, name, n3 / name)
(d / date-entity, day, 6)
(d / date-entity, month, 10)
(d / date-entity, year, 2001)
(i / involve-01, ARG1, p / person)
(i / involve-01, ARG2, a / activity)
(i2 / inside, op, c / country)
(l / law, domain, o / or)
(l / law, polarity, -)
(m2 / military, mod, f / foreign)
(n / newspaper, name, n2 / name)
(n2 / name, op, "Citizen")
(n2 / name, op, "The")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(o / or, location, o2 / or)
(o / or, op, i / involve-01)
(o / or, op, r / render-01)
(o2 / or, op, i2 / inside)
(o2 / or, op, o3 / outside)
(o3 / outside, op, c / country)
(p / person, mod, c / country)
(r / render-01, ARG0, p / person)
(r / render-01, ARG1, a2 / assist-01)
(s / state-01, ARG0, n / newspaper)
(s / state-01, ARG1, l / law)
(s / state-01, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(29,31,List(3, 2, 1, 0),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(27,28,List(4),outside,outside,false), Span(26,27,List(5),or,or,false), Span(25,26,List(6),inside,inside,false), Span(24,25,List(7),assistance,assist-01,false), Span(21,22,List(8),render,render-01,false), Span(19,20,List(9),or,or,false), Span(18,19,List(10),activity,activity,false), Span(15,16,List(11),involved,involve-01,false), Span(11,13,List(15, 14, 13, 12),South Africans,(thing :name (name :op "South" :op "Africans")),false), Span(4,5,List(16),newspaper,newspaper,false), Span(1,2,List(20, 19, 18, 17),011006,(date-entity :day 6 :month 10 :year 01),false)),Map(2 -> "South", 5 -> or, 12 -> thing, 15 -> "Africans", 8 -> render-01, 18 -> 6, 7 -> assist-01, 17 -> date-entity, 1 -> name, 4 -> outside, 11 -> involve-01, 14 -> "South", 20 -> 01, 6 -> inside, 0 -> country, 9 -> or, 16 -> newspaper, 19 -> 10, 3 -> "Africa", 10 -> activity, 13 -> name),Map(n -> name, t -> thing, o3 -> or, d -> date-entity, 1 -> 10, a -> assist-01, n3 -> newspaper, o2 -> or, i2 -> involve-01, i -> inside, r -> render-01, a2 -> activity, 6 -> 6, c -> country, 0 -> 01, o -> outside, n2 -> name))),[Ljava.lang.String;@15cea7b0,Annotation([Ljava.lang.String;@17d2ed1b,[Ljava.lang.String;@185f7840,[Ljava.lang.String;@1e6cc850),Annotation([Ljava.lang.String;@7e7f0f0a,[Ljava.lang.String;@7ec58feb,[Ledu.cmu.lti.nlp.amr.Dependency;@1dbb650b),Annotation([Ljava.lang.String;@656d10a4,[Ljava.lang.String;@63ec445c,[Ljava.lang.String;@3104351d),Annotation([Ljava.lang.String;@77d18d0b,[Ljava.lang.String;@7a344b65,[Ledu.cmu.lti.nlp.amr.Entity;@7b7b3edb))
AMR:
(a / assist-01, ARG1, n3 / newspaper)
(c / country, name, n / name)
(d / date-entity, day, 6 / 6)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 0 / 01)
(i2 / involve-01, ARG0, d / date-entity)
(i2 / involve-01, ARG1, t / thing)
(i2 / involve-01, ARG2, a2 / activity)
(n / name, op, "Africa")
(n / name, op, "South")
(n2 / name, op, "Africans")
(n2 / name, op, "South")
(o2 / or, op, i / inside)
(o2 / or, op, o / outside)
(o3 / or, location, c / country)
(o3 / or, op, i2 / involve-01)
(o3 / or, op, r / render-01)
(r / render-01, ARG1, a / assist-01)
(r / render-01, manner, o2 / or)
(t / thing, name, n2 / name)

Decoded in 310,197 microseconds
Sentence: The Citizen newspaper stated that the South African Foreign Ministry announced on 011005 that the South African government imposed the mercenary activity ban following reports that 1000 Muslims with military training have enlisted to leave South Africa for Afghanistan to fight for the Taliban against the United States.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (organization :name (name :op "Foreign" :op "Ministry"))
mkDayMonthYear(011005,05,10,2001)
mkDayMonthYear(011005,05,10,01)
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (country :name (name :op "United" :op "States"))
mkDayMonthYear(011005,05,10,2001)
mkDayMonthYear(011005,05,10,01)
Spans:
Span 12-13:  011005 => (date-entity :day 5 :month 10 :year 01)
Span 26-27:  1000 => (date-entity :year 1000)
Span 21-22:  activity => activity
Span 10-11:  announced => announce-01
Span 22-23:  ban => ban-01
Span 40-41:  fight => fight-01
Span 8-10:  Foreign Ministry => (organization :name (name :op "Foreign" :op "Ministry"))
Span 18-19:  imposed => impose-01
Span 2-3:  newspaper => newspaper
Span 35-37:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 15-17:  South African => (thing :name (name :op "South" :op "African"))
Span 6-8:  South African => (thing :name (name :op "South" :op "African"))
Span 30-31:  training => train-01
Span 46-48:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 12-13:  011005 => (date-entity :year 2001 :month 10 :day 5)
Oracle Span 26-27:  1000 => 1000
Oracle Span 21-22:  activity => activity
Oracle Span 38-39:  Afghanistan => (country :name (name :op "Afghanistan"))
Oracle Span 10-11:  announced => announce-01
Oracle Span 22-23:  ban => ban-01
Oracle Span 32-33:  enlisted => enlist-01
Oracle Span 40-41:  fight => fight-01
Oracle Span 23-24:  following => follow-01
Oracle Span 8-10:  Foreign Ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Oracle Span 17-18:  government => (government-organization :ARG0-of govern-01)
Oracle Span 31-32:  have => (person :ARG1-of have-quant-91)
Oracle Span 18-19:  imposed => impose-01
Oracle Span 34-35:  leave => leave-04
Oracle Span 20-21:  mercenary => mercenary
Oracle Span 29-30:  military => military
Oracle Span 27-28:  Muslims => (religious-group :name (name :op "Muslim"))
Oracle Span 2-3:  newspaper => newspaper
Oracle Span 24-25:  reports => report-01
Oracle Span 35-37:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 3-4:  stated => state-01
Oracle Span 43-44:  Taliban => (criminal-organization :name (name :op "Taliban"))
Oracle Span 0-2:  The Citizen => (name :op "Citizen" :op "The")
Oracle Span 30-31:  training => train-01
Oracle Span 46-48:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Incorrect span: 1000 => (date-entity :year 1000)
Extra span: South African => (thing :name (name :op "South" :op "African"))
Incorrect span: 011005 => (date-entity :day 5 :month 10 :year 01)
Incorrect span: Foreign Ministry => (organization :name (name :op "Foreign" :op "Ministry"))
Extra span: South African => (thing :name (name :op "South" :op "African"))
Missing span: The Citizen => (name :op "Citizen" :op "The")
Missing span: Foreign Ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: Afghanistan => (country :name (name :op "Afghanistan"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Taliban => (criminal-organization :name (name :op "Taliban"))
Missing span: Muslims => (religious-group :name (name :op "Muslim"))
Missing span: 011005 => (date-entity :year 2001 :month 10 :day 5)
Missing span: stated => state-01
Missing span: following => follow-01
Missing span: reports => report-01
Missing span: enlisted => enlist-01
Missing span: leave => leave-04
Missing span: 1000 => 1000
Missing span: military => military
Missing span: mercenary => mercenary
Missing span: have => (person :ARG1-of have-quant-91)
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Citizen	_	NNP	NNP	_	3	nn	_	_
3	newspaper	_	NN	NN	_	4	nsubj	_	_
4	stated	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	11	mark	_	_
6	the	_	DT	DT	_	10	det	_	_
7	South	_	NNP	NNP	_	10	nn	_	_
8	African	_	NNP	NNP	_	10	nn	_	_
9	Foreign	_	NNP	NNP	_	10	nn	_	_
10	Ministry	_	NNP	NNP	_	11	nsubj	_	_
11	announced	_	VBD	VBD	_	4	ccomp	_	_
12	on	_	IN	IN	_	11	prep	_	_
13	011005	_	CD	CD	_	12	pobj	_	_
14	that	_	IN	IN	_	19	mark	_	_
15	the	_	DT	DT	_	18	det	_	_
16	South	_	NNP	NNP	_	18	nn	_	_
17	African	_	NNP	NNP	_	18	nn	_	_
18	government	_	NN	NN	_	19	nsubj	_	_
19	imposed	_	VBD	VBD	_	11	ccomp	_	_
20	the	_	DT	DT	_	23	det	_	_
21	mercenary	_	JJ	JJ	_	23	amod	_	_
22	activity	_	NN	NN	_	23	nn	_	_
23	ban	_	NN	NN	_	19	dobj	_	_
24	following	_	VBG	VBG	_	23	prep	_	_
25	reports	_	NNS	NNS	_	24	pobj	_	_
26	that	_	IN	IN	_	33	mark	_	_
27	1000	_	CD	CD	_	28	num	_	_
28	Muslims	_	NNPS	NNPS	_	33	nsubj	_	_
29	with	_	IN	IN	_	28	prep	_	_
30	military	_	JJ	JJ	_	31	amod	_	_
31	training	_	NN	NN	_	29	pobj	_	_
32	have	_	VBP	VBP	_	33	aux	_	_
33	enlisted	_	VBD	VBD	_	25	dep	_	_
34	to	_	TO	TO	_	35	aux	_	_
35	leave	_	VB	VB	_	33	xcomp	_	_
36	South	_	NNP	NNP	_	37	nn	_	_
37	Africa	_	NNP	NNP	_	35	dobj	_	_
38	for	_	IN	IN	_	37	prep	_	_
39	Afghanistan	_	NNP	NNP	_	38	pobj	_	_
40	to	_	TO	TO	_	41	aux	_	_
41	fight	_	VB	VB	_	35	vmod	_	_
42	for	_	IN	IN	_	41	prep	_	_
43	the	_	DT	DT	_	44	det	_	_
44	Taliban	_	NNP	NNP	_	42	pobj	_	_
45	against	_	IN	IN	_	44	prep	_	_
46	the	_	DT	DT	_	48	det	_	_
47	United	_	NNP	NNP	_	48	nn	_	_
48	States	_	NNPS	NNPS	_	45	pobj	_	_
49	.	_	.	.	_	4	punct	_	_

Oracle:
(a / announce-01, ARG0, g / government-organization)
(a / announce-01, ARG1, i / impose-01)
(a / announce-01, time, d2 / date-entity)
(a2 / activity, mod, m / mercenary)
(b / ban-01, ARG1, a2 / activity)
(c / country, name, n4 / name)
(c2 / country, name, n6 / name)
(c3 / criminal-organization, name, n7 / name)
(c4 / country, name, n8 / name)
(d2 / date-entity, day, 5)
(d2 / date-entity, month, 10)
(d2 / date-entity, year, 2001)
(e / enlist-01, ARG0, p / person)
(e / enlist-01, ARG2, l / leave-04)
(f / follow-01, ARG2, r / report-01)
(f2 / fight-01, ARG0, p / person)
(f2 / fight-01, ARG1, c4 / country)
(f2 / fight-01, beneficiary, c3 / criminal-organization)
(g / government-organization, mod, c / country)
(g / government-organization, name, n3 / name)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c / country)
(h / have-quant-91, ARG1, p / person)
(h / have-quant-91, ARG2, 1 / 1000)
(i / impose-01, ARG0, g2 / government-organization)
(i / impose-01, ARG1, b / ban-01)
(i / impose-01, time, f / follow-01)
(l / leave-04, ARG1, c / country)
(l / leave-04, ARG2, c2 / country)
(l / leave-04, purpose, f2 / fight-01)
(n / newspaper, name, n2 / name)
(n2 / name, op, "Citizen")
(n2 / name, op, "The")
(n3 / name, op, "Foreign")
(n3 / name, op, "Ministry")
(n4 / name, op, "Africa")
(n4 / name, op, "South")
(n5 / name, op, "Muslim")
(n6 / name, op, "Afghanistan")
(n7 / name, op, "Taliban")
(n8 / name, op, "States")
(n8 / name, op, "United")
(p / person, mod, r2 / religious-group)
(r / report-01, ARG1, e / enlist-01)
(r2 / religious-group, name, n5 / name)
(s / state-01, ARG0, n / newspaper)
(s / state-01, ARG1, a / announce-01)
(t / train-01, ARG1, m2 / military)
(t / train-01, ARG2, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(46,48,List(3, 2, 1, 0),United States,(country :name (name :op "United" :op "States")),false), Span(40,41,List(4),fight,fight-01,false), Span(35,37,List(8, 7, 6, 5),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(30,31,List(9),training,train-01,false), Span(26,27,List(11, 10),1000,(date-entity :year 1000),false), Span(22,23,List(12),ban,ban-01,false), Span(21,22,List(13),activity,activity,false), Span(18,19,List(14),imposed,impose-01,false), Span(15,17,List(18, 17, 16, 15),South African,(thing :name (name :op "South" :op "African")),false), Span(12,13,List(22, 21, 20, 19),011005,(date-entity :day 5 :month 10 :year 01),false), Span(10,11,List(23),announced,announce-01,false), Span(8,10,List(27, 26, 25, 24),Foreign Ministry,(organization :name (name :op "Foreign" :op "Ministry")),false), Span(6,8,List(31, 30, 29, 28),South African,(thing :name (name :op "South" :op "African")),false), Span(2,3,List(32),newspaper,newspaper,false)),Map(30 -> "South", 2 -> "United", 5 -> country, 27 -> "Ministry", 12 -> ban-01, 8 -> "Africa", 15 -> thing, 21 -> 10, 18 -> "African", 24 -> organization, 7 -> "South", 1 -> name, 17 -> "South", 23 -> announce-01, 26 -> "Foreign", 4 -> fight-01, 11 -> 1000, 32 -> newspaper, 14 -> impose-01, 29 -> name, 20 -> 5, 28 -> thing, 6 -> name, 9 -> train-01, 0 -> country, 22 -> 01, 16 -> name, 19 -> date-entity, 10 -> date-entity, 3 -> "States", 31 -> "African", 25 -> name, 13 -> activity),Map(n -> name, 5 -> 5, 12 -> 10, t -> train-01, b -> ban-01, n4 -> name, d -> date-entity, t3 -> thing, 1 -> 1000, a -> activity, n3 -> name, n6 -> newspaper, d2 -> date-entity, t2 -> thing, a2 -> announce-01, i -> impose-01, c -> country, 0 -> 01, f -> fight-01, o -> organization, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@6b474074,Annotation([Ljava.lang.String;@108531c2,[Ljava.lang.String;@48b22fd4,[Ljava.lang.String;@6a9d5dff),Annotation([Ljava.lang.String;@3b08f438,[Ljava.lang.String;@2bac9ba,[Ledu.cmu.lti.nlp.amr.Dependency;@5b2f8ab6),Annotation([Ljava.lang.String;@5bdd5689,[Ljava.lang.String;@2788d0fe,[Ljava.lang.String;@73ab3aac),Annotation([Ljava.lang.String;@54f66455,[Ljava.lang.String;@65ae095c,[Ledu.cmu.lti.nlp.amr.Entity;@4c03a37))
AMR:
(a2 / announce-01, ARG0, o / organization)
(a2 / announce-01, ARG1, i / impose-01)
(a2 / announce-01, time, d / date-entity)
(a2 / announce-01, time, d2 / date-entity)
(a2 / announce-01, time, t2 / thing)
(b / ban-01, ARG1, a / activity)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c2 / country, purpose, f / fight-01)
(d / date-entity, year, 1 / 1000)
(d2 / date-entity, day, 5 / 5)
(d2 / date-entity, month, 12 / 10)
(d2 / date-entity, year, 0 / 01)
(f / fight-01, ARG1, t / train-01)
(i / impose-01, ARG0, n6 / newspaper)
(i / impose-01, ARG1, b / ban-01)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "African")
(n3 / name, op, "South")
(n4 / name, op, "Foreign")
(n4 / name, op, "Ministry")
(n5 / name, op, "African")
(n5 / name, op, "South")
(o / organization, mod, t3 / thing)
(o / organization, name, n4 / name)
(t / train-01, ARG0, c / country)
(t / train-01, ARG2, t3 / thing)
(t2 / thing, name, n3 / name)
(t3 / thing, name, n5 / name)

Decoded in 1,249,514 microseconds
Sentence: A report claims that Muslims Against Illegitimate Leaders has claimed that the 1000 Muslim men with military training have volunteered their services and have received the backing of local businessmen.

NER Entity: (thing :name (name :op "Muslim"))
Spans:
Span 12-13:  1000 => (date-entity :year 1000)
Span 26-27:  backing => back-01
Span 29-30:  businessmen => businessman
Span 9-10:  claimed => claim-01
Span 2-3:  claims => claim-01
Span 7-8:  Leaders => (person :ARG0-of lead-02)
Span 28-29:  local => local
Span 14-15:  men => man
Span 24-25:  received => receive-01
Span 21-22:  services => service
Span 17-18:  training => train-01

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 12-13:  1000 => 1000
Oracle Span 22-23:  and => and
Oracle Span 26-27:  backing => back-01
Oracle Span 29-30:  businessmen => businessman
Oracle Span 9-10:  claimed => claim-01
Oracle Span 2-3:  claims => claim-01
Oracle Span 8-9:  has => have-quant-91
Oracle Span 28-29:  local => local
Oracle Span 14-15:  men => man
Oracle Span 16-17:  military => military
Oracle Span 13-14:  Muslim => (religious-group :name (name :op "Muslim"))
Oracle Span 4-8:  Muslims Against Illegitimate Leaders => (organization :name (name :op "Leaders" :op "Illegitimate" :op "Against" :op "Muslims"))
Oracle Span 24-25:  received => receive-01
Oracle Span 1-2:  report => report
Oracle Span 21-22:  services => service
Oracle Span 17-18:  training => train-01
Oracle Span 19-20:  volunteered => volunteer-01

Incorrect span: 1000 => (date-entity :year 1000)
Extra span: Leaders => (person :ARG0-of lead-02)
Missing span: Muslims Against Illegitimate Leaders => (organization :name (name :op "Leaders" :op "Illegitimate" :op "Against" :op "Muslims"))
Missing span: Muslim => (religious-group :name (name :op "Muslim"))
Missing span: and => and
Missing span: volunteered => volunteer-01
Missing span: military => military
Missing span: 1000 => 1000
Missing span: report => report
Missing span: has => have-quant-91
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	report	_	NN	NN	_	3	nsubj	_	_
3	claims	_	VBZ	VBZ	_	0	root	_	_
4	that	_	IN	IN	_	10	mark	_	_
5	Muslims	_	NNPS	NNPS	_	10	nsubj	_	_
6	Against	_	IN	IN	_	10	prep	_	_
7	Illegitimate	_	NNP	NNP	_	8	nn	_	_
8	Leaders	_	NNPS	NNPS	_	6	pobj	_	_
9	has	_	VBZ	VBZ	_	10	aux	_	_
10	claimed	_	VBN	VBN	_	3	ccomp	_	_
11	that	_	IN	IN	_	20	mark	_	_
12	the	_	DT	DT	_	15	det	_	_
13	1000	_	CD	CD	_	15	num	_	_
14	Muslim	_	JJ	JJ	_	15	amod	_	_
15	men	_	NNS	NNS	_	20	nsubj	_	_
16	with	_	IN	IN	_	15	prep	_	_
17	military	_	JJ	JJ	_	18	amod	_	_
18	training	_	NN	NN	_	16	pobj	_	_
19	have	_	VBP	VBP	_	20	aux	_	_
20	volunteered	_	VBD	VBD	_	10	ccomp	_	_
21	their	_	PRP$	PRP$	_	22	poss	_	_
22	services	_	NNS	NNS	_	20	dobj	_	_
23	and	_	CC	CC	_	10	cc	_	_
24	have	_	VBP	VBP	_	25	aux	_	_
25	received	_	VBN	VBN	_	10	conj	_	_
26	the	_	DT	DT	_	27	det	_	_
27	backing	_	NN	NN	_	25	dobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	local	_	JJ	JJ	_	30	amod	_	_
30	businessmen	_	NNS	NNS	_	28	pobj	_	_
31	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, r3 / receive-01)
(a / and, op, v / volunteer-01)
(b / back-01, ARG0, b2 / businessman)
(b2 / businessman, mod, l / local)
(c / claim-01, ARG0, r / report)
(c / claim-01, ARG1, c2 / claim-01)
(c2 / claim-01, ARG0, o / organization)
(c2 / claim-01, ARG1, a / and)
(h / have-quant-91, ARG1, m / man)
(h / have-quant-91, ARG2, 1 / 1000)
(m / man, mod, r2 / religious-group)
(n / name, op, "Against")
(n / name, op, "Illegitimate")
(n / name, op, "Leaders")
(n / name, op, "Muslims")
(n2 / name, op, "Muslim")
(o / organization, name, n / name)
(r2 / religious-group, name, n2 / name)
(r3 / receive-01, ARG0, m / man)
(r3 / receive-01, ARG1, b / back-01)
(s / service, poss, m / man)
(t / train-01, ARG1, m2 / military)
(t / train-01, ARG2, m / man)
(v / volunteer-01, ARG0, m / man)
(v / volunteer-01, ARG1, s / service)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),businessmen,businessman,false), Span(28,29,List(1),local,local,false), Span(26,27,List(2),backing,back-01,false), Span(24,25,List(3),received,receive-01,false), Span(21,22,List(4),services,service,false), Span(17,18,List(5),training,train-01,false), Span(14,15,List(6),men,man,false), Span(12,13,List(8, 7),1000,(date-entity :year 1000),false), Span(9,10,List(9),claimed,claim-01,false), Span(7,8,List(11, 10),Leaders,(person :ARG0-of lead-02),false), Span(2,3,List(12),claims,claim-01,false)),Map(2 -> back-01, 5 -> train-01, 12 -> claim-01, 8 -> 1000, 7 -> date-entity, 1 -> local, 4 -> service, 11 -> lead-02, 6 -> man, 0 -> businessman, 9 -> claim-01, 3 -> receive-01, 10 -> person),Map(b -> businessman, t -> train-01, b2 -> back-01, s -> service, m -> man, d -> date-entity, 1 -> 1000, p -> person, l2 -> lead-02, r -> receive-01, c -> claim-01, l -> local, c2 -> claim-01))),[Ljava.lang.String;@2e140e59,Annotation([Ljava.lang.String;@49a71302,[Ljava.lang.String;@5cd61783,[Ljava.lang.String;@59429fac),Annotation([Ljava.lang.String;@57aa341b,[Ljava.lang.String;@26e412ef,[Ledu.cmu.lti.nlp.amr.Dependency;@4ae263bf),Annotation([Ljava.lang.String;@7103ab0,[Ljava.lang.String;@19ccca5,[Ljava.lang.String;@769d513),Annotation([Ljava.lang.String;@5e4fa1da,[Ljava.lang.String;@588cd519,[Ledu.cmu.lti.nlp.amr.Entity;@3f92c349))
AMR:
(b / businessman, mod, l / local)
(b2 / back-01, ARG1, b / businessman)
(c / claim-01, ARG0, p / person)
(c / claim-01, ARG1, s / service)
(c2 / claim-01, ARG1, c / claim-01)
(d / date-entity, year, 1 / 1000)
(l2 / lead-02, ARG0, p / person)
(m / man, quant, d / date-entity)
(r / receive-01, ARG0, m / man)
(r / receive-01, ARG1, b2 / back-01)
(r / receive-01, concession, c / claim-01)
(t / train-01, ARG1, m / man)

Decoded in 555,942 microseconds
Sentence: Reports claim that all of the 1000 Muslim men with military training are over the age of 18.

NER Entity: (thing :name (name :op "Muslim"))
Spans:
Span 6-7:  1000 => (date-entity :year 1000)
Span 3-4:  all => all
Span 1-2:  claim => claim-01
Span 8-9:  men => man
Span 0-1:  Reports => report-01
Span 11-12:  training => train-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 6-7:  1000 => 1000
Oracle Span 17-18:  18 => 18
Oracle Span 3-4:  all => all
Oracle Span 1-2:  claim => claim-01
Oracle Span 8-9:  men => man
Oracle Span 10-11:  military => military
Oracle Span 7-8:  Muslim => (religious-group :name (name :op "Muslim"))
Oracle Span 13-14:  over => over
Oracle Span 0-1:  Reports => report
Oracle Span 11-12:  training => train-01

Incorrect span: 1000 => (date-entity :year 1000)
Incorrect span: Reports => report-01
Missing span: Muslim => (religious-group :name (name :op "Muslim"))
Missing span: over => over
Missing span: 18 => 18
Missing span: military => military
Missing span: 1000 => 1000
Missing span: Reports => report
Dependencies:
1	Reports	_	NNS	NNS	_	2	nsubj	_	_
2	claim	_	VBP	VBP	_	0	root	_	_
3	that	_	IN	IN	_	13	mark	_	_
4	all	_	DT	DT	_	13	nsubj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	1000	_	CD	CD	_	9	num	_	_
8	Muslim	_	JJ	JJ	_	9	amod	_	_
9	men	_	NNS	NNS	_	5	pobj	_	_
10	with	_	IN	IN	_	9	prep	_	_
11	military	_	JJ	JJ	_	12	amod	_	_
12	training	_	NN	NN	_	10	pobj	_	_
13	are	_	VBP	VBP	_	2	ccomp	_	_
14	over	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	age	_	NN	NN	_	14	pobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	18	_	CD	CD	_	17	pobj	_	_
19	.	_	.	.	_	2	punct	_	_

Oracle:
(c / claim-01, ARG0, r / report)
(c / claim-01, ARG1, m / man)
(m / man, age, o / over)
(m / man, mod, r2 / religious-group)
(m / man, quant, a / all)
(n / name, op, "Muslim")
(r2 / religious-group, name, n / name)
(t / train-01, ARG1, m2 / military)
(t / train-01, ARG2, m / man)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),training,train-01,false), Span(8,9,List(1),men,man,false), Span(6,7,List(3, 2),1000,(date-entity :year 1000),false), Span(3,4,List(4),all,all,false), Span(1,2,List(5),claim,claim-01,false), Span(0,1,List(6),Reports,report-01,false)),Map(2 -> date-entity, 5 -> claim-01, 1 -> man, 4 -> all, 6 -> report-01, 0 -> train-01, 3 -> 1000),Map(t -> train-01, d -> date-entity, m -> man, 1 -> 1000, a -> all, r -> report-01, c -> claim-01))),[Ljava.lang.String;@769a58e5,Annotation([Ljava.lang.String;@55f8669d,[Ljava.lang.String;@6be25526,[Ljava.lang.String;@42435b98),Annotation([Ljava.lang.String;@66ba7e45,[Ljava.lang.String;@70e02081,[Ledu.cmu.lti.nlp.amr.Dependency;@9d200de),Annotation([Ljava.lang.String;@511505e7,[Ljava.lang.String;@646811d6,[Ljava.lang.String;@15fdd1f2),Annotation([Ljava.lang.String;@cb0f763,[Ljava.lang.String;@7573e12f,[Ledu.cmu.lti.nlp.amr.Entity;@51b1a8f6))
AMR:
(c / claim-01, ARG0, r / report-01)
(c / claim-01, ARG1, m / man)
(d / date-entity, year, 1 / 1000)
(m / man, quant, a / all)
(m / man, quant, d / date-entity)
(t / train-01, ARG1, m / man)

Decoded in 75,325 microseconds
Sentence: Muslims Against Illegitimate Leaders is a Cape Town-based group.

NER Entity: (country :name (name :op "Cape" :op "Town" :op "-" :op "based"))
Spans:
Span 6-8:  Cape Town => (country :name (name :op "Cape" :op "Town" :op "-" :op "based"))
Span 3-4:  Leaders => (person :ARG0-of lead-02)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  based => base-01
Oracle Span 6-8:  Cape Town => (city :name (name :op "Town" :op "Cape"))
Oracle Span 10-11:  group => group
Oracle Span 0-4:  Muslims Against Illegitimate Leaders => (organization :name (name :op "Leaders" :op "Illegitimate" :op "Against" :op "Muslims"))

Incorrect span: Cape Town => (country :name (name :op "Cape" :op "Town" :op "-" :op "based"))
Extra span: Leaders => (person :ARG0-of lead-02)
Missing span: Cape Town => (city :name (name :op "Town" :op "Cape"))
Missing span: Muslims Against Illegitimate Leaders => (organization :name (name :op "Leaders" :op "Illegitimate" :op "Against" :op "Muslims"))
Missing span: group => group
Missing span: based => base-01
Dependencies:
1	Muslims	_	NNPS	NNPS	_	9	nsubj	_	_
2	Against	_	IN	IN	_	9	prep	_	_
3	Illegitimate	_	NNP	NNP	_	4	nn	_	_
4	Leaders	_	NNPS	NNPS	_	2	pobj	_	_
5	is	_	VBZ	VBZ	_	9	cop	_	_
6	a	_	DT	DT	_	9	det	_	_
7	Cape	_	NNP	NNP	_	9	nn	_	_
8	Town-based	_	JJ	JJ	_	9	amod	_	_
9	group	_	NN	NN	_	0	root	_	_
10	.	_	.	.	_	9	punct	_	_

Oracle:
(b / base-01, ARG1, g / group)
(b / base-01, location, c / city)
(c / city, name, n / name)
(g / group, domain, o / organization)
(n / name, op, "Cape")
(n / name, op, "Town")
(n2 / name, op, "Against")
(n2 / name, op, "Illegitimate")
(n2 / name, op, "Leaders")
(n2 / name, op, "Muslims")
(o / organization, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(6,8,List(5, 4, 3, 2, 1, 0),Cape Town,(country :name (name :op "Cape" :op "Town" :op "-" :op "based")),false), Span(3,4,List(7, 6),Leaders,(person :ARG0-of lead-02),false)),Map(2 -> "Cape", 5 -> "based", 7 -> lead-02, 1 -> name, 4 -> "-", 6 -> person, 0 -> country, 3 -> "Town"),Map(n -> name, p -> person, l -> lead-02, c -> country))),[Ljava.lang.String;@2a389173,Annotation([Ljava.lang.String;@213860b8,[Ljava.lang.String;@4ba89729,[Ljava.lang.String;@178270b2),Annotation([Ljava.lang.String;@795fd838,[Ljava.lang.String;@1b005a0b,[Ledu.cmu.lti.nlp.amr.Dependency;@141e879d),Annotation([Ljava.lang.String;@109d724c,[Ljava.lang.String;@1704f67f,[Ljava.lang.String;@e4d2696),Annotation([Ljava.lang.String;@6e0f7aad,[Ljava.lang.String;@15fb7a32,[Ledu.cmu.lti.nlp.amr.Entity;@257cc1fc))
AMR:
(c / country, name, n / name)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, c / country)
(n / name, op, "-")
(n / name, op, "Cape")
(n / name, op, "Town")
(n / name, op, "based")

Decoded in 27,150 microseconds
Sentence: The report was refuted by the Muslim Judicial Council.

NER Entity: (organization :name (name :op "Muslim" :op "Judicial" :op "Council"))
Spans:
Span 6-9:  Muslim Judicial Council => (organization :name (name :op "Muslim" :op "Judicial" :op "Council"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-9:  Muslim Judicial Council => (organization :name (name :op "Council" :op "Judicial" :op "Muslim"))
Oracle Span 3-4:  refuted => refute-01
Oracle Span 1-2:  report => report

Incorrect span: Muslim Judicial Council => (organization :name (name :op "Muslim" :op "Judicial" :op "Council"))
Missing span: Muslim Judicial Council => (organization :name (name :op "Council" :op "Judicial" :op "Muslim"))
Missing span: refuted => refute-01
Missing span: report => report
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	report	_	NN	NN	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	refuted	_	VBN	VBN	_	0	root	_	_
5	by	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	Muslim	_	JJ	JJ	_	9	amod	_	_
8	Judicial	_	NNP	NNP	_	9	nn	_	_
9	Council	_	NNP	NNP	_	5	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(n / name, op, "Council")
(n / name, op, "Judicial")
(n / name, op, "Muslim")
(o / organization, name, n / name)
(r / refute-01, ARG0, o / organization)
(r / refute-01, ARG1, r2 / report)

Input(Some(Graph(null,ArrayBuffer(Span(6,9,List(4, 3, 2, 1, 0),Muslim Judicial Council,(organization :name (name :op "Muslim" :op "Judicial" :op "Council")),false)),Map(2 -> "Muslim", 1 -> name, 4 -> "Council", 0 -> organization, 3 -> "Judicial"),Map(n -> name, o -> organization))),[Ljava.lang.String;@42e22a53,Annotation([Ljava.lang.String;@57adfab0,[Ljava.lang.String;@1949309d,[Ljava.lang.String;@5af97169),Annotation([Ljava.lang.String;@99a78d7,[Ljava.lang.String;@31da6b2e,[Ledu.cmu.lti.nlp.amr.Dependency;@61c76850),Annotation([Ljava.lang.String;@70242f38,[Ljava.lang.String;@2a22ad2b,[Ljava.lang.String;@48c3205a),Annotation([Ljava.lang.String;@121c54fa,[Ljava.lang.String;@4390f46e,[Ledu.cmu.lti.nlp.amr.Entity;@7c6442c2))
AMR:
(n / name, op, "Council")
(n / name, op, "Judicial")
(n / name, op, "Muslim")
(o / organization, name, n / name)

Decoded in 15,937 microseconds
Sentence: South Africa's Foreign Ministry stated that South Africa's Foreign Military Assistance Act prohibits the recruitment of people inside or outside of South Africa for mercenary or foreign military assistance.

NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Ministry"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
NER Entity: (country :name (name :op "South" :op "Africa"))
Spans:
Span 30-31:  assistance => assist-01
Span 10-14:  Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Span 3-5:  Foreign Ministry => (organization :name (name :op "Foreign" :op "Ministry"))
Span 19-20:  inside => inside
Span 27-28:  or => or
Span 20-21:  or => or
Span 21-22:  outside => outside
Span 14-15:  prohibits => prohibit-01
Span 16-17:  recruitment => recruit-01
Span 23-25:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 7-9:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 30-31:  assistance => assist-01
Oracle Span 28-29:  foreign => foreign
Oracle Span 10-14:  Foreign Military Assistance Act => (law :name (name :op "Act" :op "Assistance" :op "Military" :op "Foreign"))
Oracle Span 3-5:  Foreign Ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Oracle Span 19-20:  inside => inside
Oracle Span 26-27:  mercenary => mercenary
Oracle Span 29-30:  military => military
Oracle Span 20-21:  or => (person :location-of or)
Oracle Span 27-28:  or => or
Oracle Span 21-22:  outside => outside
Oracle Span 14-15:  prohibits => prohibit-01
Oracle Span 16-17:  recruitment => recruit-01
Oracle Span 0-2:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 5-6:  stated => state-01

Extra span: South Africa => (country :name (name :op "South" :op "Africa"))
Incorrect span: or => or
Incorrect span: Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Extra span: South Africa => (country :name (name :op "South" :op "Africa"))
Incorrect span: Foreign Ministry => (organization :name (name :op "Foreign" :op "Ministry"))
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Missing span: Foreign Ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: Foreign Military Assistance Act => (law :name (name :op "Act" :op "Assistance" :op "Military" :op "Foreign"))
Missing span: stated => state-01
Missing span: or => (person :location-of or)
Missing span: military => military
Missing span: foreign => foreign
Missing span: mercenary => mercenary
Dependencies:
1	South	_	NNP	NNP	_	2	nn	_	_
2	Africa	_	NNP	NNP	_	5	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Foreign	_	NNP	NNP	_	5	nn	_	_
5	Ministry	_	NNP	NNP	_	6	nsubj	_	_
6	stated	_	VBD	VBD	_	0	root	_	_
7	that	_	IN	IN	_	15	mark	_	_
8	South	_	NNP	NNP	_	9	nn	_	_
9	Africa	_	NNP	NNP	_	14	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	Foreign	_	NNP	NNP	_	14	nn	_	_
12	Military	_	NNP	NNP	_	14	nn	_	_
13	Assistance	_	NNP	NNP	_	14	nn	_	_
14	Act	_	NNP	NNP	_	15	nsubj	_	_
15	prohibits	_	VBZ	VBZ	_	6	ccomp	_	_
16	the	_	DT	DT	_	17	det	_	_
17	recruitment	_	NN	NN	_	15	dobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	people	_	NNS	NNS	_	18	pobj	_	_
20	inside	_	RB	RB	_	19	advmod	_	_
21	or	_	CC	CC	_	20	cc	_	_
22	outside	_	RB	RB	_	20	conj	_	_
23	of	_	IN	IN	_	17	prep	_	_
24	South	_	NNP	NNP	_	25	nn	_	_
25	Africa	_	NNP	NNP	_	23	pobj	_	_
26	for	_	IN	IN	_	25	prep	_	_
27	mercenary	_	JJ	JJ	_	26	pobj	_	_
28	or	_	CC	CC	_	27	cc	_	_
29	foreign	_	JJ	JJ	_	31	amod	_	_
30	military	_	JJ	JJ	_	31	amod	_	_
31	assistance	_	NN	NN	_	27	conj	_	_
32	.	_	.	.	_	6	punct	_	_

Oracle:
(a / assist-01, ARG1, m2 / military)
(c / country, name, n2 / name)
(g / government-organization, name, n / name)
(g / government-organization, poss, c / country)
(i / inside, op, c / country)
(l / law, name, n3 / name)
(l / law, poss, c / country)
(m2 / military, mod, f / foreign)
(n / name, op, "Foreign")
(n / name, op, "Ministry")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Act")
(n3 / name, op, "Assistance")
(n3 / name, op, "Foreign")
(n3 / name, op, "Military")
(o / or, location, p2 / person)
(o / or, op, i / inside)
(o / or, op, o2 / outside)
(o2 / outside, op, c / country)
(o3 / or, op, a / assist-01)
(o3 / or, op, m / mercenary)
(p / prohibit-01, ARG0, l / law)
(p / prohibit-01, ARG1, r / recruit-01)
(r / recruit-01, ARG1, p2 / person)
(r / recruit-01, ARG2, o3 / or)
(s / state-01, ARG0, g / government-organization)
(s / state-01, ARG1, p / prohibit-01)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),assistance,assist-01,false), Span(27,28,List(1),or,or,false), Span(23,25,List(5, 4, 3, 2),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(21,22,List(6),outside,outside,false), Span(20,21,List(7),or,or,false), Span(19,20,List(8),inside,inside,false), Span(16,17,List(9),recruitment,recruit-01,false), Span(14,15,List(10),prohibits,prohibit-01,false), Span(10,14,List(16, 15, 14, 13, 12, 11),Foreign Military Assistance Act,(organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act")),false), Span(7,9,List(20, 19, 18, 17),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(3,5,List(24, 23, 22, 21),Foreign Ministry,(organization :name (name :op "Foreign" :op "Ministry")),false), Span(0,2,List(28, 27, 26, 25),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(2 -> country, 5 -> "Africa", 27 -> "South", 12 -> name, 8 -> inside, 15 -> "Assistance", 21 -> organization, 18 -> name, 24 -> "Ministry", 7 -> or, 1 -> or, 17 -> country, 23 -> "Foreign", 26 -> name, 4 -> "South", 11 -> organization, 14 -> "Military", 20 -> "Africa", 28 -> "Africa", 6 -> outside, 9 -> recruit-01, 0 -> assist-01, 22 -> name, 16 -> "Act", 19 -> "South", 10 -> prohibit-01, 3 -> name, 25 -> country, 13 -> "Foreign"),Map(n -> name, o3 -> or, n4 -> name, o5 -> organization, p -> prohibit-01, c3 -> country, a -> assist-01, n3 -> name, o2 -> outside, i -> inside, r -> recruit-01, c -> country, o -> or, o4 -> organization, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@2d746ce4,Annotation([Ljava.lang.String;@5dbf5634,[Ljava.lang.String;@1948ea69,[Ljava.lang.String;@47e4d9d0),Annotation([Ljava.lang.String;@49798e84,[Ljava.lang.String;@6ed06f69,[Ledu.cmu.lti.nlp.amr.Dependency;@3015db78),Annotation([Ljava.lang.String;@515ebef3,[Ljava.lang.String;@545607f2,[Ljava.lang.String;@39109136),Annotation([Ljava.lang.String;@27c04377,[Ljava.lang.String;@34dc85a,[Ledu.cmu.lti.nlp.amr.Entity;@67403656))
AMR:
(a / assist-01, ARG1, c / country)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(n / name, op, "Africa")
(n / name, op, "South")
(n2 / name, op, "Act")
(n2 / name, op, "Assistance")
(n2 / name, op, "Foreign")
(n2 / name, op, "Military")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Foreign")
(n4 / name, op, "Ministry")
(n5 / name, op, "Africa")
(n5 / name, op, "South")
(o / or, op, a / assist-01)
(o3 / or, op, i / inside)
(o3 / or, op, o2 / outside)
(o4 / organization, mod, c2 / country)
(o4 / organization, name, n2 / name)
(o5 / organization, mod, c3 / country)
(o5 / organization, name, n4 / name)
(p / prohibit-01, ARG0, o4 / organization)
(p / prohibit-01, ARG1, r / recruit-01)
(p / prohibit-01, location, c3 / country)
(r / recruit-01, ARG0, o2 / outside)
(r / recruit-01, ARG1, c / country)

Decoded in 791,525 microseconds
Sentence: South Africa's Foreign Military Assistance Act means that no person is allowed to offer military assistance to any State, organ of State, group or other country, unless permission is granted by the National Conventional Arms Control Committee.

NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
NER Entity: (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Spans:
Span 12-13:  allowed => allow-01
Span 18-19:  any => any
Span 16-17:  assistance => assist-01
Span 28-29:  country => country
Span 3-7:  Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Span 33-34:  granted => grant-01
Span 36-41:  National Conventional Arms Control Committee => (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Span 9-10:  no => -
Span 26-27:  or => or
Span 21-22:  organ => organ
Span 27-28:  other => other
Span 31-32:  permission => permit-01
Span 10-11:  person => person
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 12-13:  allowed => allow-01
Oracle Span 18-19:  any => any
Oracle Span 16-17:  assistance => assist-01
Oracle Span 28-29:  country => country
Oracle Span 3-7:  Foreign Military Assistance Act => (law :name (name :op "Act" :op "Assistance" :op "Military" :op "Foreign"))
Oracle Span 33-34:  granted => grant-01
Oracle Span 25-26:  group => group
Oracle Span 7-8:  means => mean-01
Oracle Span 15-16:  military => military
Oracle Span 36-41:  National Conventional Arms Control Committee => (government-organization :name (name :op "Committee" :op "Control" :op "Arms" :op "Conventional" :op "National"))
Oracle Span 9-10:  no => -
Oracle Span 14-15:  offer => offer-01
Oracle Span 26-27:  or => or
Oracle Span 21-22:  organ => organ
Oracle Span 27-28:  other => other
Oracle Span 31-32:  permission => permit-01
Oracle Span 10-11:  person => person
Oracle Span 0-2:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 19-20:  State => state

Incorrect span: National Conventional Arms Control Committee => (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Incorrect span: Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Missing span: Foreign Military Assistance Act => (law :name (name :op "Act" :op "Assistance" :op "Military" :op "Foreign"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: National Conventional Arms Control Committee => (government-organization :name (name :op "Committee" :op "Control" :op "Arms" :op "Conventional" :op "National"))
Missing span: means => mean-01
Missing span: offer => offer-01
Missing span: group => group
Missing span: State => state
Missing span: military => military
Dependencies:
1	South	_	NNP	NNP	_	2	nn	_	_
2	Africa	_	NNP	NNP	_	7	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Foreign	_	NNP	NNP	_	7	nn	_	_
5	Military	_	NNP	NNP	_	7	nn	_	_
6	Assistance	_	NNP	NNP	_	7	nn	_	_
7	Act	_	NNP	NNP	_	8	nsubj	_	_
8	means	_	VBZ	VBZ	_	0	root	_	_
9	that	_	IN	IN	_	13	mark	_	_
10	no	_	DT	DT	_	11	neg	_	_
11	person	_	NN	NN	_	13	nsubjpass	_	_
12	is	_	VBZ	VBZ	_	13	auxpass	_	_
13	allowed	_	VBN	VBN	_	8	ccomp	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	offer	_	VB	VB	_	13	xcomp	_	_
16	military	_	JJ	JJ	_	17	amod	_	_
17	assistance	_	NN	NN	_	15	dobj	_	_
18	to	_	TO	TO	_	15	prep	_	_
19	any	_	DT	DT	_	20	det	_	_
20	State	_	NN	NN	_	18	pobj	_	_
21	,	_	,	,	_	20	punct	_	_
22	organ	_	NN	NN	_	20	appos	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	State	_	NNP	NNP	_	23	pobj	_	_
25	,	_	,	,	_	24	punct	_	_
26	group	_	NN	NN	_	24	conj	_	_
27	or	_	CC	CC	_	24	cc	_	_
28	other	_	JJ	JJ	_	29	amod	_	_
29	country	_	NN	NN	_	24	conj	_	_
30	,	_	,	,	_	20	punct	_	_
31	unless	_	IN	IN	_	34	mark	_	_
32	permission	_	NN	NN	_	34	nsubjpass	_	_
33	is	_	VBZ	VBZ	_	34	auxpass	_	_
34	granted	_	VBN	VBN	_	15	advcl	_	_
35	by	_	IN	IN	_	34	prep	_	_
36	the	_	DT	DT	_	41	det	_	_
37	National	_	NNP	NNP	_	41	nn	_	_
38	Conventional	_	NNP	NNP	_	41	nn	_	_
39	Arms	_	NNP	NNP	_	41	nn	_	_
40	Control	_	NNP	NNP	_	41	nn	_	_
41	Committee	_	NNP	NNP	_	35	pobj	_	_
42	.	_	.	.	_	8	punct	_	_

Oracle:
(a / allow-01, ARG1, o / offer-01)
(a / allow-01, condition, g2 / grant-01)
(a / allow-01, polarity, - / -)
(a2 / assist-01, mod, m2 / military)
(c / country, name, n2 / name)
(c2 / country, mod, o4 / other)
(g2 / grant-01, ARG0, g3 / government-organization)
(g2 / grant-01, ARG1, p2 / permit-01)
(g3 / government-organization, name, n3 / name)
(l / law, name, n / name)
(l / law, poss, c / country)
(m / mean-01, ARG0, l / law)
(m / mean-01, ARG1, a / allow-01)
(n / name, op, "Act")
(n / name, op, "Assistance")
(n / name, op, "Foreign")
(n / name, op, "Military")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Arms")
(n3 / name, op, "Committee")
(n3 / name, op, "Control")
(n3 / name, op, "Conventional")
(n3 / name, op, "National")
(o / offer-01, ARG0, p / person)
(o / offer-01, ARG1, a2 / assist-01)
(o / offer-01, ARG3, o3 / or)
(o3 / or, mod, a3 / any)
(o3 / or, op, c2 / country)
(o3 / or, op, g / group)
(o3 / or, op, o2 / organ)
(o3 / or, op, s / state)
(p2 / permit-01, ARG1, o / offer-01)
(s / state, part, o2 / organ)

Input(Some(Graph(null,ArrayBuffer(Span(36,41,List(6, 5, 4, 3, 2, 1, 0),National Conventional Arms Control Committee,(organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee")),false), Span(33,34,List(7),granted,grant-01,false), Span(31,32,List(8),permission,permit-01,false), Span(28,29,List(9),country,country,false), Span(27,28,List(10),other,other,false), Span(26,27,List(11),or,or,false), Span(21,22,List(12),organ,organ,false), Span(18,19,List(13),any,any,false), Span(16,17,List(14),assistance,assist-01,false), Span(12,13,List(15),allowed,allow-01,false), Span(10,11,List(16),person,person,false), Span(9,10,List(17),no,-,false), Span(3,7,List(23, 22, 21, 20, 19, 18),Foreign Military Assistance Act,(organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act")),false), Span(0,2,List(27, 26, 25, 24),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(2 -> "National", 5 -> "Control", 27 -> "Africa", 12 -> organ, 8 -> permit-01, 15 -> allow-01, 21 -> "Military", 18 -> organization, 24 -> country, 7 -> grant-01, 1 -> name, 17 -> -, 23 -> "Act", 26 -> "South", 4 -> "Arms", 11 -> or, 14 -> assist-01, 20 -> "Foreign", 6 -> "Committee", 9 -> country, 0 -> organization, 22 -> "Assistance", 16 -> person, 19 -> name, 10 -> other, 3 -> "Conventional", 25 -> name, 13 -> any),Map(n -> name, o3 -> or, p2 -> person, a3 -> allow-01, g -> grant-01, p -> permit-01, o5 -> organization, n3 -> name, a -> any, o2 -> other, a2 -> assist-01, - -> -, c -> country, o -> organization, o4 -> organ, c2 -> country, n2 -> name))),[Ljava.lang.String;@5a6482a9,Annotation([Ljava.lang.String;@7f9ab969,[Ljava.lang.String;@12f8b1d8,[Ljava.lang.String;@746cd757),Annotation([Ljava.lang.String;@ae372b9,[Ljava.lang.String;@2098d37d,[Ledu.cmu.lti.nlp.amr.Dependency;@77b9d0c7),Annotation([Ljava.lang.String;@65fd6708,[Ljava.lang.String;@749ab7b4,[Ljava.lang.String;@127f9161),Annotation([Ljava.lang.String;@2bf94401,[Ljava.lang.String;@2532b351,[Ledu.cmu.lti.nlp.amr.Entity;@4349754))
AMR:
(a2 / assist-01, ARG0, p2 / person)
(a2 / assist-01, ARG1, o4 / organ)
(a2 / assist-01, mod, a / any)
(a3 / allow-01, ARG0, o5 / organization)
(a3 / allow-01, ARG1, p2 / person)
(c / country, mod, o2 / other)
(c2 / country, name, n3 / name)
(g / grant-01, ARG1, p / permit-01)
(g / grant-01, ARG2, o / organization)
(n / name, op, "Arms")
(n / name, op, "Committee")
(n / name, op, "Control")
(n / name, op, "Conventional")
(n / name, op, "National")
(n2 / name, op, "Act")
(n2 / name, op, "Assistance")
(n2 / name, op, "Foreign")
(n2 / name, op, "Military")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(o / organization, name, n / name)
(o3 / or, op, c / country)
(o4 / organ, accompanier, o3 / or)
(o5 / organization, mod, c2 / country)
(o5 / organization, name, n2 / name)
(p / permit-01, ARG1, a2 / assist-01)
(p2 / person, polarity, - / -)

Decoded in 886,339 microseconds
Sentence: South Africa's Foreign Military Assistance Act means that foreign military assistance could be rendered only in accordance with an agreement approved by the National Conventional Arms Control Committee.

NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
NER Entity: (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Spans:
Span 20-21:  agreement => agree-01
Span 21-22:  approved => approve-01
Span 11-12:  assistance => assist-01
Span 12-13:  could => possible
Span 3-7:  Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Span 24-29:  National Conventional Arms Control Committee => (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Span 15-16:  only => only
Span 14-15:  rendered => render-02
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 20-21:  agreement => agree-01
Oracle Span 21-22:  approved => approve-01
Oracle Span 11-12:  assistance => assist-01
Oracle Span 12-13:  could => possible
Oracle Span 9-10:  foreign => foreign
Oracle Span 3-7:  Foreign Military Assistance Act => (law :name (name :op "Act" :op "Assistance" :op "Military" :op "Foreign"))
Oracle Span 7-8:  means => mean-01
Oracle Span 10-11:  military => military
Oracle Span 24-29:  National Conventional Arms Control Committee => (government-organization :name (name :op "Committee" :op "Control" :op "Arms" :op "Conventional" :op "National"))
Oracle Span 15-16:  only => only
Oracle Span 14-15:  rendered => render-02
Oracle Span 0-2:  South Africa => (country :name (name :op "Africa" :op "South"))

Incorrect span: National Conventional Arms Control Committee => (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Incorrect span: Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Missing span: Foreign Military Assistance Act => (law :name (name :op "Act" :op "Assistance" :op "Military" :op "Foreign"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: National Conventional Arms Control Committee => (government-organization :name (name :op "Committee" :op "Control" :op "Arms" :op "Conventional" :op "National"))
Missing span: means => mean-01
Missing span: military => military
Missing span: foreign => foreign
Dependencies:
1	South	_	NNP	NNP	_	2	nn	_	_
2	Africa	_	NNP	NNP	_	7	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Foreign	_	NNP	NNP	_	7	nn	_	_
5	Military	_	NNP	NNP	_	7	nn	_	_
6	Assistance	_	NNP	NNP	_	7	nn	_	_
7	Act	_	NNP	NNP	_	8	nsubj	_	_
8	means	_	VBZ	VBZ	_	0	root	_	_
9	that	_	IN	IN	_	15	mark	_	_
10	foreign	_	JJ	JJ	_	12	amod	_	_
11	military	_	JJ	JJ	_	12	amod	_	_
12	assistance	_	NN	NN	_	15	nsubjpass	_	_
13	could	_	MD	MD	_	15	aux	_	_
14	be	_	VB	VB	_	15	auxpass	_	_
15	rendered	_	VBN	VBN	_	8	ccomp	_	_
16	only	_	RB	RB	_	15	advmod	_	_
17	in	_	IN	IN	_	15	prep	_	_
18	accordance	_	NN	NN	_	17	pobj	_	_
19	with	_	IN	IN	_	15	prep	_	_
20	an	_	DT	DT	_	21	det	_	_
21	agreement	_	NN	NN	_	19	pobj	_	_
22	approved	_	VBN	VBN	_	21	vmod	_	_
23	by	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	29	det	_	_
25	National	_	NNP	NNP	_	29	nn	_	_
26	Conventional	_	NNP	NNP	_	29	nn	_	_
27	Arms	_	NNP	NNP	_	29	nn	_	_
28	Control	_	NNP	NNP	_	29	nn	_	_
29	Committee	_	NNP	NNP	_	23	pobj	_	_
30	.	_	.	.	_	8	punct	_	_

Oracle:
(a / assist-01, mod, m2 / military)
(a3 / approve-01, ARG0, g / government-organization)
(a3 / approve-01, ARG1, a2 / agree-01)
(c / country, name, n2 / name)
(g / government-organization, name, n3 / name)
(l / law, name, n / name)
(l / law, poss, c / country)
(m / mean-01, ARG0, l / law)
(m / mean-01, ARG1, p / possible)
(m2 / military, mod, f / foreign)
(n / name, op, "Act")
(n / name, op, "Assistance")
(n / name, op, "Foreign")
(n / name, op, "Military")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Arms")
(n3 / name, op, "Committee")
(n3 / name, op, "Control")
(n3 / name, op, "Conventional")
(n3 / name, op, "National")
(p / possible, domain, r / render-02)
(r / render-02, ARG1, a / assist-01)

Input(Some(Graph(null,ArrayBuffer(Span(24,29,List(6, 5, 4, 3, 2, 1, 0),National Conventional Arms Control Committee,(organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee")),false), Span(21,22,List(7),approved,approve-01,false), Span(20,21,List(8),agreement,agree-01,false), Span(15,16,List(9),only,only,false), Span(14,15,List(10),rendered,render-02,false), Span(12,13,List(11),could,possible,false), Span(11,12,List(12),assistance,assist-01,false), Span(3,7,List(18, 17, 16, 15, 14, 13),Foreign Military Assistance Act,(organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act")),false), Span(0,2,List(22, 21, 20, 19),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(2 -> "National", 5 -> "Control", 12 -> assist-01, 15 -> "Foreign", 8 -> agree-01, 21 -> "South", 18 -> "Act", 7 -> approve-01, 17 -> "Assistance", 1 -> name, 4 -> "Arms", 11 -> possible, 14 -> name, 20 -> name, 6 -> "Committee", 22 -> "Africa", 0 -> organization, 9 -> only, 16 -> "Military", 19 -> country, 3 -> "Conventional", 10 -> render-02, 13 -> organization),Map(n -> name, o3 -> organization, a3 -> assist-01, p -> possible, n3 -> name, a -> approve-01, o2 -> only, r -> render-02, a2 -> agree-01, c -> country, o -> organization, n2 -> name))),[Ljava.lang.String;@6a2eea2a,Annotation([Ljava.lang.String;@b967222,[Ljava.lang.String;@3b0ee03a,[Ljava.lang.String;@1ba05e38),Annotation([Ljava.lang.String;@6c298dc,[Ljava.lang.String;@3e7dfd44,[Ledu.cmu.lti.nlp.amr.Dependency;@723ed581),Annotation([Ljava.lang.String;@6b760460,[Ljava.lang.String;@796065aa,[Ljava.lang.String;@28a6301f),Annotation([Ljava.lang.String;@2c306a57,[Ljava.lang.String;@773e2eb5,[Ledu.cmu.lti.nlp.amr.Entity;@d8948cd))
AMR:
(a / approve-01, ARG0, o / organization)
(a / approve-01, ARG1, a2 / agree-01)
(a3 / assist-01, ARG0, o3 / organization)
(c / country, name, n3 / name)
(n / name, op, "Arms")
(n / name, op, "Committee")
(n / name, op, "Control")
(n / name, op, "Conventional")
(n / name, op, "National")
(n2 / name, op, "Act")
(n2 / name, op, "Assistance")
(n2 / name, op, "Foreign")
(n2 / name, op, "Military")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(o / organization, name, n / name)
(o3 / organization, mod, c / country)
(o3 / organization, name, n2 / name)
(p / possible, domain, r / render-02)
(r / render-02, ARG1, a3 / assist-01)
(r / render-02, manner, a2 / agree-01)
(r / render-02, mod, o2 / only)

Decoded in 250,628 microseconds
Sentence: The South African Foreign Ministry stated that any person found in violation of South Africa's Foreign Military Assistance Act or any person that fails to receive permission to participate in foreign military activities could be prosecuted and sentenced to a fine, imprisonment or both.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (organization :name (name :op "Foreign" :op "Ministry"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Spans:
Span 33-34:  activities => activity
Span 21-22:  any => any
Span 7-8:  any => any
Span 45-46:  both => both
Span 34-35:  could => possible
Span 24-25:  fails => fail-01
Span 16-20:  Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Span 3-5:  Foreign Ministry => (organization :name (name :op "Foreign" :op "Ministry"))
Span 43-44:  imprisonment => imprison-01
Span 44-45:  or => or
Span 20-21:  or => or
Span 29-30:  participate => participate-01
Span 27-28:  permission => permit-01
Span 22-23:  person => person
Span 8-9:  person => person
Span 36-37:  prosecuted => prosecute-01
Span 38-39:  sentenced => sentence-01
Span 13-15:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))
Span 11-12:  violation => violate-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 33-34:  activities => activity
Oracle Span 37-38:  and => and
Oracle Span 7-8:  any => any
Oracle Span 21-22:  any => any
Oracle Span 34-35:  could => possible
Oracle Span 24-25:  fails => fail-01
Oracle Span 41-42:  fine => fine-01
Oracle Span 31-32:  foreign => foreign
Oracle Span 16-20:  Foreign Military Assistance Act => (law :name (name :op "Act" :op "Assistance" :op "Military" :op "Foreign"))
Oracle Span 3-5:  Foreign Ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Oracle Span 9-10:  found => find-01
Oracle Span 43-44:  imprisonment => imprison-01
Oracle Span 32-33:  military => military
Oracle Span 20-21:  or => or
Oracle Span 44-45:  or => or
Oracle Span 29-30:  participate => participate-01
Oracle Span 27-28:  permission => permit-01
Oracle Span 8-9:  person => person
Oracle Span 22-23:  person => person
Oracle Span 36-37:  prosecuted => prosecute-01
Oracle Span 26-27:  receive => receive-01
Oracle Span 38-39:  sentenced => sentence-01
Oracle Span 13-15:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 5-6:  stated => state-01
Oracle Span 11-12:  violation => violate-01

Extra span: both => both
Incorrect span: Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Incorrect span: Foreign Ministry => (organization :name (name :op "Foreign" :op "Ministry"))
Extra span: South African => (thing :name (name :op "South" :op "African"))
Missing span: Foreign Ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: Foreign Military Assistance Act => (law :name (name :op "Act" :op "Assistance" :op "Military" :op "Foreign"))
Missing span: stated => state-01
Missing span: and => and
Missing span: fine => fine-01
Missing span: receive => receive-01
Missing span: military => military
Missing span: foreign => foreign
Missing span: found => find-01
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	South	_	NNP	NNP	_	5	nn	_	_
3	African	_	NNP	NNP	_	5	nn	_	_
4	Foreign	_	NNP	NNP	_	5	nn	_	_
5	Ministry	_	NNP	NNP	_	6	nsubj	_	_
6	stated	_	VBD	VBD	_	0	root	_	_
7	that	_	IN	IN	_	37	mark	_	_
8	any	_	DT	DT	_	9	det	_	_
9	person	_	NN	NN	_	37	nsubjpass	_	_
10	found	_	VBN	VBN	_	9	vmod	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	violation	_	NN	NN	_	11	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	South	_	NNP	NNP	_	15	nn	_	_
15	Africa	_	NNP	NNP	_	20	poss	_	_
16	's	_	POS	POS	_	15	possessive	_	_
17	Foreign	_	NNP	NNP	_	20	nn	_	_
18	Military	_	NNP	NNP	_	20	nn	_	_
19	Assistance	_	NNP	NNP	_	20	nn	_	_
20	Act	_	NNP	NNP	_	13	pobj	_	_
21	or	_	CC	CC	_	12	cc	_	_
22	any	_	DT	DT	_	23	det	_	_
23	person	_	NN	NN	_	12	conj	_	_
24	that	_	WDT	WDT	_	25	nsubj	_	_
25	fails	_	VBZ	VBZ	_	23	rcmod	_	_
26	to	_	TO	TO	_	27	aux	_	_
27	receive	_	VB	VB	_	25	xcomp	_	_
28	permission	_	NN	NN	_	27	dobj	_	_
29	to	_	TO	TO	_	30	aux	_	_
30	participate	_	VB	VB	_	27	vmod	_	_
31	in	_	IN	IN	_	30	prep	_	_
32	foreign	_	JJ	JJ	_	34	amod	_	_
33	military	_	JJ	JJ	_	34	amod	_	_
34	activities	_	NNS	NNS	_	31	pobj	_	_
35	could	_	MD	MD	_	37	aux	_	_
36	be	_	VB	VB	_	37	auxpass	_	_
37	prosecuted	_	VBN	VBN	_	6	ccomp	_	_
38	and	_	CC	CC	_	37	cc	_	_
39	sentenced	_	VBN	VBN	_	37	conj	_	_
40	to	_	TO	TO	_	37	prep	_	_
41	a	_	DT	DT	_	42	det	_	_
42	fine	_	NN	NN	_	40	pobj	_	_
43	,	_	,	,	_	42	punct	_	_
44	imprisonment	_	NN	NN	_	42	conj	_	_
45	or	_	CC	CC	_	42	cc	_	_
46	both	_	DT	DT	_	42	conj	_	_
47	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, p2 / prosecute-01)
(a / and, op, s2 / sentence-01)
(a4 / activity, mod, m / military)
(c / country, name, n2 / name)
(f3 / fail-01, ARG1, p4 / person)
(f3 / fail-01, ARG2, r / receive-01)
(f4 / find-01, ARG0, p3 / person)
(f4 / find-01, ARG1, v / violate-01)
(g / government-organization, mod, c / country)
(g / government-organization, name, n / name)
(l / law, name, n3 / name)
(l / law, poss, c / country)
(m / military, mod, f / foreign)
(n / name, op, "Foreign")
(n / name, op, "Ministry")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Act")
(n3 / name, op, "Assistance")
(n3 / name, op, "Foreign")
(n3 / name, op, "Military")
(o / or, op, p3 / person)
(o / or, op, p4 / person)
(o2 / or, op, f2 / fine-01)
(o2 / or, op, i / imprison-01)
(p / possible, domain, a / and)
(p2 / prosecute-01, ARG1, o / or)
(p3 / person, mod, a2 / any)
(p4 / person, mod, a3 / any)
(p5 / permit-01, ARG1, p6 / participate-01)
(p6 / participate-01, ARG1, a4 / activity)
(r / receive-01, ARG1, p5 / permit-01)
(s / state-01, ARG0, g / government-organization)
(s / state-01, ARG1, p / possible)
(s2 / sentence-01, ARG1, o / or)
(s2 / sentence-01, ARG2, o2 / or)
(v / violate-01, ARG0, p3 / person)
(v / violate-01, ARG1, l / law)

Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),both,both,false), Span(44,45,List(1),or,or,false), Span(43,44,List(2),imprisonment,imprison-01,false), Span(38,39,List(3),sentenced,sentence-01,false), Span(36,37,List(4),prosecuted,prosecute-01,false), Span(34,35,List(5),could,possible,false), Span(33,34,List(6),activities,activity,false), Span(29,30,List(7),participate,participate-01,false), Span(27,28,List(8),permission,permit-01,false), Span(24,25,List(9),fails,fail-01,false), Span(22,23,List(10),person,person,false), Span(21,22,List(11),any,any,false), Span(20,21,List(12),or,or,false), Span(16,20,List(18, 17, 16, 15, 14, 13),Foreign Military Assistance Act,(organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act")),false), Span(13,15,List(22, 21, 20, 19),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(11,12,List(23),violation,violate-01,false), Span(8,9,List(24),person,person,false), Span(7,8,List(25),any,any,false), Span(3,5,List(29, 28, 27, 26),Foreign Ministry,(organization :name (name :op "Foreign" :op "Ministry")),false), Span(1,3,List(33, 32, 31, 30),South African,(thing :name (name :op "South" :op "African")),false)),Map(30 -> thing, 2 -> imprison-01, 5 -> possible, 33 -> "African", 27 -> name, 12 -> or, 8 -> permit-01, 15 -> "Foreign", 21 -> "South", 18 -> "Act", 24 -> person, 7 -> participate-01, 1 -> or, 17 -> "Assistance", 23 -> violate-01, 26 -> organization, 4 -> prosecute-01, 11 -> any, 32 -> "South", 14 -> name, 29 -> "Ministry", 20 -> name, 28 -> "Foreign", 6 -> activity, 9 -> fail-01, 0 -> both, 22 -> "Africa", 16 -> "Military", 19 -> country, 10 -> person, 3 -> sentence-01, 31 -> name, 25 -> any, 13 -> organization),Map(n -> name, p5 -> person, t -> thing, b -> both, o3 -> organization, p2 -> possible, n4 -> name, a3 -> any, s -> sentence-01, v -> violate-01, p -> prosecute-01, n3 -> name, a -> activity, p4 -> permit-01, o2 -> or, i -> imprison-01, a2 -> any, c -> country, p6 -> person, f -> fail-01, o4 -> organization, o -> or, p3 -> participate-01, n2 -> name))),[Ljava.lang.String;@1436a7ab,Annotation([Ljava.lang.String;@3b7b05a8,[Ljava.lang.String;@3d36dff4,[Ljava.lang.String;@7abe27bf),Annotation([Ljava.lang.String;@5b94ccbc,[Ljava.lang.String;@38a1c423,[Ledu.cmu.lti.nlp.amr.Dependency;@336365bc),Annotation([Ljava.lang.String;@38eb2fb0,[Ljava.lang.String;@4567e53d,[Ljava.lang.String;@7351a16e),Annotation([Ljava.lang.String;@5bb7643d,[Ljava.lang.String;@3ac04654,[Ledu.cmu.lti.nlp.amr.Entity;@4074023c))
AMR:
(c / country, name, n2 / name)
(f / fail-01, ARG0, p5 / person)
(f / fail-01, ARG1, p4 / permit-01)
(i / imprison-01, ARG0, b / both)
(n / name, op, "Act")
(n / name, op, "Assistance")
(n / name, op, "Foreign")
(n / name, op, "Military")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Foreign")
(n3 / name, op, "Ministry")
(n4 / name, op, "African")
(n4 / name, op, "South")
(o / or, op, i / imprison-01)
(o2 / or, op, p5 / person)
(o2 / or, op, v / violate-01)
(o3 / organization, mod, c / country)
(o3 / organization, name, n / name)
(o4 / organization, mod, t / thing)
(o4 / organization, name, n3 / name)
(p / prosecute-01, ARG1, p6 / person)
(p / prosecute-01, ARG2, o / or)
(p2 / possible, domain, p / prosecute-01)
(p3 / participate-01, ARG1, a / activity)
(p4 / permit-01, ARG1, p3 / participate-01)
(p5 / person, mod, a2 / any)
(p6 / person, mod, a3 / any)
(s / sentence-01, ARG0, o4 / organization)
(s / sentence-01, ARG1, p6 / person)
(t / thing, name, n4 / name)
(v / violate-01, ARG0, p6 / person)
(v / violate-01, ARG1, o3 / organization)

Decoded in 704,373 microseconds
Sentence: 2002-07-01

mkDayMonthYear(2002-07-01,01,07,2002)
mkDayMonthYear(2002-07-01,01,07,2002)
Spans:
Span 0-1:  2002-07-01 => (date-entity :day 1 :month 7 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2002-07-01 => (date-entity :year 2002 :month 7 :day 1)

Incorrect span: 2002-07-01 => (date-entity :day 1 :month 7 :year 2002)
Missing span: 2002-07-01 => (date-entity :year 2002 :month 7 :day 1)
Dependencies:
1	2002-07-01	_	NNP	NNP	_	0	root	_	_

Oracle:
(d2 / date-entity, day, 1)
(d2 / date-entity, month, 7)
(d2 / date-entity, year, 2002)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-07-01,(date-entity :day 1 :month 7 :year 2002),false)),Map(2 -> 7, 1 -> 1, 0 -> date-entity, 3 -> 2002),Map(2 -> 2002, 7 -> 7, d -> date-entity, 1 -> 1))),[Ljava.lang.String;@3ed0918d,Annotation([Ljava.lang.String;@5e268ce6,[Ljava.lang.String;@66ec9390,[Ljava.lang.String;@6e91893),Annotation([Ljava.lang.String;@3c0fbd3a,[Ljava.lang.String;@562457e1,[Ledu.cmu.lti.nlp.amr.Dependency;@54562ea6),Annotation([Ljava.lang.String;@1a35993f,[Ljava.lang.String;@5b12012e,[Ljava.lang.String;@2f7dcef2),Annotation([Ljava.lang.String;@4a3be6a5,[Ljava.lang.String;@7cf162bc,[Ledu.cmu.lti.nlp.amr.Entity;@3721177d))
AMR:
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2002)

Decoded in 8,565 microseconds
Sentence: Peru (PE)

NER Entity: (country :name (name :op "Peru"))
NER Entity: (country :name (name :op "PE"))
NER Entity: (country :name (name :op "Peru"))
Spans:
Span 0-1:  Peru => (country :name (name :op "Peru"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Peru => (country :name (name :op "Peru"))

Dependencies:
1	Peru	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	PE	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Peru")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Peru,(country :name (name :op "Peru")),false)),Map(2 -> "Peru", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@766a4535,Annotation([Ljava.lang.String;@63718b93,[Ljava.lang.String;@14e2e1c3,[Ljava.lang.String;@2b4786dd),Annotation([Ljava.lang.String;@f202d6d,[Ljava.lang.String;@60e21209,[Ledu.cmu.lti.nlp.amr.Dependency;@630d1b2f),Annotation([Ljava.lang.String;@746b18fd,[Ljava.lang.String;@7a2e0858,[Ljava.lang.String;@aac3f4e),Annotation([Ljava.lang.String;@1f38957,[Ljava.lang.String;@2df3c564,[Ledu.cmu.lti.nlp.amr.Entity;@2715644a))
AMR:
(c / country, name, n / name)
(n / name, op, "Peru")

Decoded in 6,203 microseconds
Sentence: International; money; crime; human rights; Government; narcotics; politics; leader

Spans:
Span 14-15:  ; => and
Span 12-13:  ; => and
Span 10-11:  ; => and
Span 8-9:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  crime => crime
Span 6-7:  human => human
Span 2-3:  money => money
Span 11-12:  narcotics => narcotic
Span 13-14:  politics => politics

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 4-5:  crime => crime
Oracle Span 9-10:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 6-7:  human => human
Oracle Span 0-1:  International => international
Oracle Span 15-16:  leader => (person :ARG0-of lead-02)
Oracle Span 2-3:  money => money
Oracle Span 11-12:  narcotics => narcotic
Oracle Span 13-14:  politics => politics
Oracle Span 7-8:  rights => right

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: leader => (person :ARG0-of lead-02)
Missing span: rights => right
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	money	_	NN	NN	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	crime	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	human	_	JJ	JJ	_	8	amod	_	_
8	rights	_	NNS	NNS	_	5	dep	_	_
9	;	_	:	:	_	5	punct	_	_
10	Government	_	NNP	NNP	_	5	dep	_	_
11	;	_	:	:	_	10	punct	_	_
12	narcotics	_	NNS	NNS	_	10	dep	_	_
13	;	_	:	:	_	5	punct	_	_
14	politics	_	NNS	NNS	_	5	dep	_	_
15	;	_	:	:	_	14	punct	_	_
16	leader	_	NN	NN	_	14	dep	_	_

Oracle:
(a / and, op, c / crime)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, m / money)
(a / and, op, n / narcotic)
(a / and, op, p / politics)
(a / and, op, p2 / person)
(a / and, op, r / right)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p2 / person)
(r / right, mod, h / human)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),;,and,false), Span(13,14,List(1),politics,politics,false), Span(12,13,List(2),;,and,false), Span(11,12,List(3),narcotics,narcotic,false), Span(10,11,List(4),;,and,false), Span(8,9,List(5),;,and,false), Span(6,7,List(6),human,human,false), Span(5,6,List(7),;,and,false), Span(4,5,List(8),crime,crime,false), Span(3,4,List(9),;,and,false), Span(2,3,List(10),money,money,false), Span(1,2,List(11),;,and,false)),Map(2 -> and, 5 -> and, 8 -> crime, 7 -> and, 1 -> politics, 11 -> and, 4 -> and, 6 -> human, 9 -> and, 0 -> and, 10 -> money, 3 -> narcotic),Map(a7 -> and, n -> narcotic, h -> human, a3 -> and, m -> money, a6 -> and, p -> politics, a -> and, a5 -> and, a2 -> and, c -> crime, a4 -> and))),[Ljava.lang.String;@4c2869a9,Annotation([Ljava.lang.String;@518cf84a,[Ljava.lang.String;@62e7dffa,[Ljava.lang.String;@6edcd0d8),Annotation([Ljava.lang.String;@6136998b,[Ljava.lang.String;@57ce634f,[Ledu.cmu.lti.nlp.amr.Dependency;@b8a7e43),Annotation([Ljava.lang.String;@35835fa,[Ljava.lang.String;@56f71edb,[Ljava.lang.String;@7207cb51),Annotation([Ljava.lang.String;@2a27cb34,[Ljava.lang.String;@6892cc6f,[Ledu.cmu.lti.nlp.amr.Entity;@6fd1660))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, a5 / and)
(a4 / and, op, a3 / and)
(a5 / and, op, a4 / and)
(a6 / and, op, a5 / and)
(a6 / and, op, h / human)
(a6 / and, op, n / narcotic)
(a7 / and, op, a6 / and)
(a7 / and, op, c / crime)
(a7 / and, op, m / money)
(a7 / and, op, p / politics)

Decoded in 83,501 microseconds
Sentence: Former Peruvian spy chief Vladimiro Montesinos convicted of illegally taking control of the National Intelligence Service during ex-President Fujimori's tenure.

NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (person :name (name :op "Vladimiro" :op "Montesinos"))
NER Entity: (organization :name (name :op "National" :op "Intelligence" :op "Service"))
NER Entity: (person :name (name :op "Fujimori"))
Spans:
Span 3-4:  chief => (have-org-role-91 :ARG2 chief)
Span 10-11:  control => control-01
Span 6-7:  convicted => convict-01
Span 0-1:  Former => former
Span 13-16:  National Intelligence Service => (organization :name (name :op "National" :op "Intelligence" :op "Service"))
Span 19-20:  President => (have-org-role-91 :ARG2 president)
Span 2-3:  spy => spy-01
Span 4-6:  Vladimiro Montesinos => (person :name (name :op "Vladimiro" :op "Montesinos"))

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 3-4:  chief => (have-org-role-91 :ARG2 chief)
Oracle Span 10-11:  control => control-01
Oracle Span 6-7:  convicted => convict-01
Oracle Span 17-18:  ex => ex
Oracle Span 0-1:  Former => former
Oracle Span 20-21:  Fujimori => (person :name (name :op "Fujimori"))
Oracle Span 13-16:  National Intelligence Service => (government-organization :name (name :op "Service" :op "Intelligence" :op "National"))
Oracle Span 1-2:  Peruvian => (country :name (name :op "Peru"))
Oracle Span 19-20:  President => (have-org-role-91 :ARG2 president)
Oracle Span 2-3:  spy => spy-01
Oracle Span 9-10:  taking => take-01
Oracle Span 22-23:  tenure => tenure
Oracle Span 4-6:  Vladimiro Montesinos => (person :name (name :op "Montesinos" :op "Vladimiro"))

Incorrect span: National Intelligence Service => (organization :name (name :op "National" :op "Intelligence" :op "Service"))
Incorrect span: Vladimiro Montesinos => (person :name (name :op "Vladimiro" :op "Montesinos"))
Missing span: Vladimiro Montesinos => (person :name (name :op "Montesinos" :op "Vladimiro"))
Missing span: National Intelligence Service => (government-organization :name (name :op "Service" :op "Intelligence" :op "National"))
Missing span: Fujimori => (person :name (name :op "Fujimori"))
Missing span: Peruvian => (country :name (name :op "Peru"))
Missing span: taking => take-01
Missing span: tenure => tenure
Missing span: ex => ex
Dependencies:
1	Former	_	JJ	JJ	_	6	amod	_	_
2	Peruvian	_	JJ	JJ	_	6	amod	_	_
3	spy	_	NN	NN	_	6	nn	_	_
4	chief	_	NN	NN	_	6	nn	_	_
5	Vladimiro	_	NNP	NNP	_	6	nn	_	_
6	Montesinos	_	NNP	NNP	_	7	nsubj	_	_
7	convicted	_	VBD	VBD	_	0	root	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	illegally	_	RB	RB	_	10	advmod	_	_
10	taking	_	VBG	VBG	_	8	pcomp	_	_
11	control	_	NN	NN	_	10	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	16	det	_	_
14	National	_	NNP	NNP	_	16	nn	_	_
15	Intelligence	_	NNP	NNP	_	16	nn	_	_
16	Service	_	NNP	NNP	_	12	pobj	_	_
17	during	_	IN	IN	_	10	prep	_	_
18	ex-President	_	NNP	NNP	_	19	nn	_	_
19	Fujimori	_	NNP	NNP	_	21	poss	_	_
20	's	_	POS	POS	_	19	possessive	_	_
21	tenure	_	NN	NN	_	17	pobj	_	_
22	.	_	.	.	_	7	punct	_	_

Oracle:
(c / convict-01, ARG1, p / person)
(c / convict-01, ARG2, t2 / take-01)
(c2 / chief, mod, f / former)
(c2 / chief, mod, s / spy-01)
(c3 / country, name, n2 / name)
(c4 / control-01, ARG0, p / person)
(c4 / control-01, ARG1, g / government-organization)
(c4 / control-01, time, t / tenure)
(g / government-organization, name, n3 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, c2 / chief)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG2, p3 / president)
(n / name, op, "Montesinos")
(n / name, op, "Vladimiro")
(n2 / name, op, "Peru")
(n3 / name, op, "Intelligence")
(n3 / name, op, "National")
(n3 / name, op, "Service")
(n4 / name, op, "Fujimori")
(p / person, name, n / name)
(p2 / person, name, n4 / name)
(p3 / president, mod, e / ex)
(t / tenure, poss, p2 / person)
(t2 / take-01, ARG1, c4 / control-01)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),President,(have-org-role-91 :ARG2 president),false), Span(13,16,List(6, 5, 4, 3, 2),National Intelligence Service,(organization :name (name :op "National" :op "Intelligence" :op "Service")),false), Span(10,11,List(7),control,control-01,false), Span(6,7,List(8),convicted,convict-01,false), Span(4,6,List(12, 11, 10, 9),Vladimiro Montesinos,(person :name (name :op "Vladimiro" :op "Montesinos")),false), Span(3,4,List(14, 13),chief,(have-org-role-91 :ARG2 chief),false), Span(2,3,List(15),spy,spy-01,false), Span(0,1,List(16),Former,former,false)),Map(2 -> organization, 5 -> "Intelligence", 12 -> "Montesinos", 15 -> spy-01, 8 -> convict-01, 7 -> control-01, 1 -> president, 4 -> "National", 11 -> "Vladimiro", 14 -> chief, 6 -> "Service", 0 -> have-org-role-91, 9 -> person, 16 -> former, 3 -> name, 10 -> name, 13 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, h2 -> have-org-role-91, p2 -> person, s -> spy-01, p -> president, c3 -> chief, c -> control-01, f -> former, o -> organization, n2 -> name, c2 -> convict-01))),[Ljava.lang.String;@4a6c18ad,Annotation([Ljava.lang.String;@5e8604bf,[Ljava.lang.String;@20095ab4,[Ljava.lang.String;@4e2916c3),Annotation([Ljava.lang.String;@64aad6db,[Ljava.lang.String;@ae7950d,[Ledu.cmu.lti.nlp.amr.Dependency;@60d1b21f),Annotation([Ljava.lang.String;@66c83fc8,[Ljava.lang.String;@546621c4,[Ljava.lang.String;@621f89b8),Annotation([Ljava.lang.String;@f339eae,[Ljava.lang.String;@2822c6ff,[Ledu.cmu.lti.nlp.amr.Entity;@4dafba3e))
AMR:
(c / control-01, ARG0, o / organization)
(c2 / convict-01, ARG1, p2 / person)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p / president)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG1, s / spy-01)
(h2 / have-org-role-91, ARG2, c3 / chief)
(h2 / have-org-role-91, time, f / former)
(n / name, op, "Intelligence")
(n / name, op, "National")
(n / name, op, "Service")
(n2 / name, op, "Montesinos")
(n2 / name, op, "Vladimiro")
(o / organization, name, n / name)
(p2 / person, name, n2 / name)

Decoded in 231,431 microseconds
Sentence: Montesinos has been sentenced to 9 years and 4 months for the conviction.

NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 12-13:  conviction => convict-01
Span 9-10:  months => (temporal-quantity :unit month)
Span 3-4:  sentenced => sentence-01
Span 6-7:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 8-9:  4 => 4
Oracle Span 5-6:  9 => 9
Oracle Span 7-8:  and => and
Oracle Span 12-13:  conviction => convict-01
Oracle Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 9-10:  months => (temporal-quantity :unit month)
Oracle Span 3-4:  sentenced => sentence-01
Oracle Span 6-7:  years => (temporal-quantity :unit year)

Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: and => and
Missing span: 4 => 4
Missing span: 9 => 9
Dependencies:
1	Montesinos	_	NNS	NNS	_	4	nsubjpass	_	_
2	has	_	VBZ	VBZ	_	4	aux	_	_
3	been	_	VBN	VBN	_	4	auxpass	_	_
4	sentenced	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	9	_	CD	CD	_	7	num	_	_
7	years	_	NNS	NNS	_	5	pobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	4	_	CD	CD	_	10	num	_	_
10	months	_	NNS	NNS	_	7	conj	_	_
11	for	_	IN	IN	_	4	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	conviction	_	NN	NN	_	11	pobj	_	_
14	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, t / temporal-quantity)
(a / and, op, t2 / temporal-quantity)
(n / name, op, "Montesinos")
(p / person, name, n / name)
(s / sentence-01, ARG1, p / person)
(s / sentence-01, ARG2, a / and)
(s / sentence-01, ARG3, c / convict-01)
(t / temporal-quantity, quant, 9 / 9)
(t / temporal-quantity, unit, y / year)
(t2 / temporal-quantity, quant, 4 / 4)
(t2 / temporal-quantity, unit, m / month)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),conviction,convict-01,false), Span(9,10,List(2, 1),months,(temporal-quantity :unit month),false), Span(6,7,List(4, 3),years,(temporal-quantity :unit year),false), Span(3,4,List(5),sentenced,sentence-01,false)),Map(2 -> month, 5 -> sentence-01, 1 -> temporal-quantity, 4 -> year, 0 -> convict-01, 3 -> temporal-quantity),Map(t -> temporal-quantity, s -> sentence-01, m -> month, y -> year, t2 -> temporal-quantity, c -> convict-01))),[Ljava.lang.String;@53e3a87a,Annotation([Ljava.lang.String;@40368a46,[Ljava.lang.String;@7e9da981,[Ljava.lang.String;@4ed38226),Annotation([Ljava.lang.String;@3d43fe,[Ljava.lang.String;@74ad8d05,[Ledu.cmu.lti.nlp.amr.Dependency;@676ff3b0),Annotation([Ljava.lang.String;@35ff8fc9,[Ljava.lang.String;@5fb7183b,[Ljava.lang.String;@476a736d),Annotation([Ljava.lang.String;@5f80fa43,[Ljava.lang.String;@16c8b7bd,[Ledu.cmu.lti.nlp.amr.Entity;@7159139f))
AMR:
(s / sentence-01, ARG0, t / temporal-quantity)
(s / sentence-01, ARG1, c / convict-01)
(s / sentence-01, ARG2, t2 / temporal-quantity)
(t / temporal-quantity, unit, m / month)
(t2 / temporal-quantity, unit, y / year)

Decoded in 63,197 microseconds
Sentence: Montesinos plans to appeal the sentence.

NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 3-4:  appeal => appeal-02
Span 1-2:  plans => plan-01
Span 5-6:  sentence => sentence-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  appeal => appeal-01
Oracle Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 1-2:  plans => plan-01
Oracle Span 5-6:  sentence => sentence-01

Incorrect span: appeal => appeal-02
Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: appeal => appeal-01
Dependencies:
1	Montesinos	_	NNS	NNS	_	2	nsubj	_	_
2	plans	_	VBZ	VBZ	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	appeal	_	VB	VB	_	2	xcomp	_	_
5	the	_	DT	DT	_	6	det	_	_
6	sentence	_	NN	NN	_	4	dobj	_	_
7	.	_	.	.	_	2	punct	_	_

Oracle:
(a / appeal-01, ARG1, s / sentence-01)
(n / name, op, "Montesinos")
(p / plan-01, ARG0, p2 / person)
(p / plan-01, ARG1, a / appeal-01)
(p2 / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),sentence,sentence-01,false), Span(3,4,List(1),appeal,appeal-02,false), Span(1,2,List(2),plans,plan-01,false)),Map(2 -> plan-01, 1 -> appeal-02, 0 -> sentence-01),Map(s -> sentence-01, p -> plan-01, a -> appeal-02))),[Ljava.lang.String;@65bcf7c2,Annotation([Ljava.lang.String;@3db64bd4,[Ljava.lang.String;@6e106680,[Ljava.lang.String;@576c5536),Annotation([Ljava.lang.String;@55ecbafe,[Ljava.lang.String;@5a8ba37c,[Ledu.cmu.lti.nlp.amr.Dependency;@37c2eacb),Annotation([Ljava.lang.String;@232cce0,[Ljava.lang.String;@32b9bd12,[Ljava.lang.String;@352e787a),Annotation([Ljava.lang.String;@159a48a6,[Ljava.lang.String;@15bc339,[Ledu.cmu.lti.nlp.amr.Entity;@7e75bf2d))
AMR:
(a / appeal-02, ARG1, s / sentence-01)
(p / plan-01, ARG1, a / appeal-02)

Decoded in 12,769 microseconds
Sentence: On 1 July 2002 former Peruvian spy chief during the government of ex-president Alberto Fujimori, Vladimiro Montesinos, was convicted of illegally taking control of the National Intelligence Service when Montesinos was supposed to be only an adviser to the spy agency.

mkDayMonthYear(1	July	2002,1,July,2002)
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (person :name (name :op "Alberto" :op "Fujimori"))
NER Entity: (person :name (name :op "Vladimiro" :op "Montesinos"))
NER Entity: (organization :name (name :op "National" :op "Intelligence" :op "Service"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 13-15:  - president => (person :name (name :op "Alberto" :op "Fujimori"))
Span 1-4:  1 July 2002 => (date-entity :day 1 :month 7 :year 2002)
Span 44-45:  agency => agency
Span 7-8:  chief => (have-org-role-91 :ARG2 chief)
Span 26-27:  control => control-01
Span 22-23:  convicted => convict-01
Span 4-5:  former => former
Span 16-18:  Fujimori , => (person :name (name :op "Vladimiro" :op "Montesinos"))
Span 30-31:  Intelligence => intelligence
Span 27-30:  of the National => (organization :name (name :op "National" :op "Intelligence" :op "Service"))
Span 38-39:  only => only
Span 43-44:  spy => spy-01
Span 6-7:  spy => spy-01

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Oracle Span 1-4:  1 July 2002 => (date-entity :year 2002 :month 7 :day 1)
Oracle Span 40-41:  adviser => advise-01
Oracle Span 44-45:  agency => agency
Oracle Span 15-17:  Alberto Fujimori => (person :name (name :op "Fujimori" :op "Alberto"))
Oracle Span 7-8:  chief => (have-org-role-91 :ARG2 chief)
Oracle Span 26-27:  control => control-01
Oracle Span 22-23:  convicted => convict-01
Oracle Span 12-13:  ex => ex
Oracle Span 4-5:  former => former
Oracle Span 10-11:  government => government-organization
Oracle Span 29-32:  National Intelligence Service => (name :op "Service" :op "Intelligence" :op "National")
Oracle Span 38-39:  only => only
Oracle Span 5-6:  Peruvian => (country :name (name :op "Peru"))
Oracle Span 14-15:  president => (have-org-role-91 :ARG2 president)
Oracle Span 6-7:  spy => spy-01
Oracle Span 43-44:  spy => spy-01
Oracle Span 35-36:  supposed => suppose-02
Oracle Span 25-26:  taking => take-01
Oracle Span 18-20:  Vladimiro Montesinos => (person :name (name :op "Montesinos" :op "Vladimiro"))

Extra span: Intelligence => intelligence
Extra span: of the National => (organization :name (name :op "National" :op "Intelligence" :op "Service"))
Extra span: Fujimori , => (person :name (name :op "Vladimiro" :op "Montesinos"))
Extra span: - president => (person :name (name :op "Alberto" :op "Fujimori"))
Incorrect span: 1 July 2002 => (date-entity :day 1 :month 7 :year 2002)
Missing span: Vladimiro Montesinos => (person :name (name :op "Montesinos" :op "Vladimiro"))
Missing span: Alberto Fujimori => (person :name (name :op "Fujimori" :op "Alberto"))
Missing span: National Intelligence Service => (name :op "Service" :op "Intelligence" :op "National")
Missing span: Peruvian => (country :name (name :op "Peru"))
Missing span: 1 July 2002 => (date-entity :year 2002 :month 7 :day 1)
Missing span: taking => take-01
Missing span: supposed => suppose-02
Missing span: adviser => advise-01
Missing span: president => (have-org-role-91 :ARG2 president)
Missing span: ex => ex
Missing span: government => government-organization
Dependencies:
1	On	_	IN	IN	_	21	prep	_	_
2	1	_	CD	CD	_	1	pobj	_	_
3	July	_	NNP	NNP	_	21	tmod	_	_
4	2002	_	CD	CD	_	8	num	_	_
5	former	_	JJ	JJ	_	8	amod	_	_
6	Peruvian	_	JJ	JJ	_	8	amod	_	_
7	spy	_	NN	NN	_	8	nn	_	_
8	chief	_	NN	NN	_	21	nsubjpass	_	_
9	during	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	government	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	ex-president	_	NNP	NNP	_	15	nn	_	_
14	Alberto	_	NNP	NNP	_	15	nn	_	_
15	Fujimori	_	NNP	NNP	_	12	pobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	Vladimiro	_	NNP	NNP	_	18	nn	_	_
18	Montesinos	_	NNP	NNP	_	15	appos	_	_
19	,	_	,	,	_	15	punct	_	_
20	was	_	VBD	VBD	_	21	auxpass	_	_
21	convicted	_	VBN	VBN	_	0	root	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	illegally	_	RB	RB	_	24	advmod	_	_
24	taking	_	VBG	VBG	_	22	pcomp	_	_
25	control	_	NN	NN	_	24	dobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	the	_	DT	DT	_	30	det	_	_
28	National	_	NNP	NNP	_	30	nn	_	_
29	Intelligence	_	NNP	NNP	_	30	nn	_	_
30	Service	_	NNP	NNP	_	26	pobj	_	_
31	when	_	WRB	WRB	_	34	advmod	_	_
32	Montesinos	_	NNP	NNP	_	34	nsubjpass	_	_
33	was	_	VBD	VBD	_	34	auxpass	_	_
34	supposed	_	VBN	VBN	_	25	rcmod	_	_
35	to	_	TO	TO	_	39	aux	_	_
36	be	_	VB	VB	_	39	cop	_	_
37	only	_	RB	RB	_	39	advmod	_	_
38	an	_	DT	DT	_	39	det	_	_
39	adviser	_	NN	NN	_	34	xcomp	_	_
40	to	_	TO	TO	_	39	prep	_	_
41	the	_	DT	DT	_	43	det	_	_
42	spy	_	NN	NN	_	43	nn	_	_
43	agency	_	NN	NN	_	40	pobj	_	_
44	.	_	.	.	_	21	punct	_	_

Oracle:
(a / advise-01, ARG0, p / person)
(a / advise-01, ARG1, a2 / agency)
(a2 / agency, mod, s3 / spy-01)
(c / convict-01, ARG1, p / person)
(c / convict-01, ARG2, t / take-01)
(c / convict-01, time, d / date-entity)
(c2 / country, name, n2 / name)
(c3 / chief, mod, f / former)
(c3 / chief, mod, s / spy-01)
(c4 / control-01, ARG1, g3 / government-organization)
(c4 / control-01, time, s2 / suppose-02)
(d / date-entity, day, 1)
(d / date-entity, month, 7)
(d / date-entity, year, 2002)
(g3 / government-organization, name, n4 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, c3 / chief)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG2, p3 / president)
(n / name, op, "Montesinos")
(n / name, op, "Vladimiro")
(n2 / name, op, "Peru")
(n3 / name, op, "Alberto")
(n3 / name, op, "Fujimori")
(n4 / name, op, "Intelligence")
(n4 / name, op, "National")
(n4 / name, op, "Service")
(p / person, name, n / name)
(p2 / person, name, n3 / name)
(p3 / president, mod, e / ex)
(s2 / suppose-02, ARG1, p / person)
(s2 / suppose-02, ARG2, a / advise-01)
(s2 / suppose-02, mod, o / only)
(t / take-01, ARG1, c4 / control-01)

Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),agency,agency,false), Span(43,44,List(1),spy,spy-01,false), Span(38,39,List(2),only,only,false), Span(30,31,List(3),Intelligence,intelligence,false), Span(27,30,List(8, 7, 6, 5, 4),of the National,(organization :name (name :op "National" :op "Intelligence" :op "Service")),false), Span(26,27,List(9),control,control-01,false), Span(22,23,List(10),convicted,convict-01,false), Span(16,18,List(14, 13, 12, 11),Fujimori ,,(person :name (name :op "Vladimiro" :op "Montesinos")),false), Span(13,15,List(18, 17, 16, 15),- president,(person :name (name :op "Alberto" :op "Fujimori")),false), Span(7,8,List(20, 19),chief,(have-org-role-91 :ARG2 chief),false), Span(6,7,List(21),spy,spy-01,false), Span(4,5,List(22),former,former,false), Span(1,4,List(26, 25, 24, 23),1 July 2002,(date-entity :day 1 :month 7 :year 2002),false)),Map(2 -> only, 5 -> name, 12 -> name, 8 -> "Service", 15 -> person, 21 -> spy-01, 18 -> "Fujimori", 24 -> 1, 7 -> "Intelligence", 1 -> spy-01, 17 -> "Alberto", 23 -> date-entity, 26 -> 2002, 4 -> organization, 11 -> person, 14 -> "Montesinos", 20 -> chief, 6 -> "National", 9 -> control-01, 0 -> agency, 22 -> former, 16 -> name, 19 -> have-org-role-91, 10 -> convict-01, 3 -> intelligence, 25 -> 7, 13 -> "Vladimiro"),Map(n -> name, h -> have-org-role-91, 2 -> 2002, s2 -> spy-01, p2 -> person, s -> spy-01, 7 -> 7, d -> date-entity, 1 -> 1, p -> person, c3 -> chief, a -> agency, n3 -> name, o2 -> organization, i -> intelligence, c -> control-01, f -> former, o -> only, c2 -> convict-01, n2 -> name))),[Ljava.lang.String;@385ef531,Annotation([Ljava.lang.String;@7fc645e4,[Ljava.lang.String;@205b132e,[Ljava.lang.String;@73044cdf),Annotation([Ljava.lang.String;@3cbcd8f3,[Ljava.lang.String;@719843e5,[Ledu.cmu.lti.nlp.amr.Dependency;@9a2ec9b),Annotation([Ljava.lang.String;@58112bc4,[Ljava.lang.String;@2301b75,[Ljava.lang.String;@3104f7bd),Annotation([Ljava.lang.String;@2f5c1332,[Ljava.lang.String;@7ec25216,[Ledu.cmu.lti.nlp.amr.Entity;@7cab1508))
AMR:
(a / agency, mod, s / spy-01)
(c / control-01, ARG0, o2 / organization)
(c / control-01, ARG1, i / intelligence)
(c2 / convict-01, ARG1, p2 / person)
(c2 / convict-01, ARG2, s / spy-01)
(c2 / convict-01, purpose, c / control-01)
(c2 / convict-01, time, d / date-entity)
(c3 / chief, mod, f / former)
(c3 / chief, mod, s2 / spy-01)
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2002)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, c3 / chief)
(n / name, op, "Intelligence")
(n / name, op, "National")
(n / name, op, "Service")
(n2 / name, op, "Montesinos")
(n2 / name, op, "Vladimiro")
(n3 / name, op, "Alberto")
(n3 / name, op, "Fujimori")
(o2 / organization, name, n / name)
(p / person, name, n2 / name)
(p2 / person, name, n3 / name)
(s / spy-01, ARG1, o / only)

Decoded in 2,060,854 microseconds
Sentence: Montesinos was sentenced to 9 years and 4 months in prison for abuse of authority.

NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 12-13:  abuse => abuse-01
Span 14-15:  authority => authority
Span 8-9:  months => (temporal-quantity :unit month)
Span 10-11:  prison => prison
Span 2-3:  sentenced => sentence-01
Span 5-6:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 7-8:  4 => 4
Oracle Span 4-5:  9 => 9
Oracle Span 12-13:  abuse => abuse-01
Oracle Span 6-7:  and => and
Oracle Span 14-15:  authority => authority
Oracle Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 8-9:  months => (temporal-quantity :unit month)
Oracle Span 10-11:  prison => prison
Oracle Span 2-3:  sentenced => sentence-01
Oracle Span 5-6:  years => (temporal-quantity :unit year)

Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: and => and
Missing span: 4 => 4
Missing span: 9 => 9
Dependencies:
1	Montesinos	_	NNS	NNS	_	3	nsubjpass	_	_
2	was	_	VBD	VBD	_	3	auxpass	_	_
3	sentenced	_	VBN	VBN	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	9	_	CD	CD	_	6	num	_	_
6	years	_	NNS	NNS	_	4	pobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	4	_	CD	CD	_	9	num	_	_
9	months	_	NNS	NNS	_	6	conj	_	_
10	in	_	IN	IN	_	3	prep	_	_
11	prison	_	NN	NN	_	10	pobj	_	_
12	for	_	IN	IN	_	11	prep	_	_
13	abuse	_	NN	NN	_	12	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	authority	_	NN	NN	_	14	pobj	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(a / abuse-01, ARG1, a2 / authority)
(a3 / and, location, p2 / prison)
(a3 / and, op, t / temporal-quantity)
(a3 / and, op, t2 / temporal-quantity)
(n / name, op, "Montesinos")
(p / person, name, n / name)
(s / sentence-01, ARG1, p / person)
(s / sentence-01, ARG2, a3 / and)
(s / sentence-01, ARG3, a / abuse-01)
(t / temporal-quantity, quant, 9 / 9)
(t / temporal-quantity, unit, y / year)
(t2 / temporal-quantity, quant, 4 / 4)
(t2 / temporal-quantity, unit, m / month)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),authority,authority,false), Span(12,13,List(1),abuse,abuse-01,false), Span(10,11,List(2),prison,prison,false), Span(8,9,List(4, 3),months,(temporal-quantity :unit month),false), Span(5,6,List(6, 5),years,(temporal-quantity :unit year),false), Span(2,3,List(7),sentenced,sentence-01,false)),Map(2 -> prison, 5 -> temporal-quantity, 7 -> sentence-01, 1 -> abuse-01, 4 -> month, 6 -> year, 0 -> authority, 3 -> temporal-quantity),Map(t -> temporal-quantity, s -> sentence-01, m -> month, y -> year, p -> prison, a -> authority, t2 -> temporal-quantity, a2 -> abuse-01))),[Ljava.lang.String;@6a84bc3f,Annotation([Ljava.lang.String;@258ee7de,[Ljava.lang.String;@4930539b,[Ljava.lang.String;@6d171ce0),Annotation([Ljava.lang.String;@22bd2039,[Ljava.lang.String;@705f83a7,[Ledu.cmu.lti.nlp.amr.Dependency;@3bb8aabc),Annotation([Ljava.lang.String;@6e1d4137,[Ljava.lang.String;@256a1825,[Ljava.lang.String;@29a4f594),Annotation([Ljava.lang.String;@57b75756,[Ljava.lang.String;@5327a06e,[Ledu.cmu.lti.nlp.amr.Entity;@2679311f))
AMR:
(a2 / abuse-01, ARG1, a / authority)
(p / prison, topic, a2 / abuse-01)
(s / sentence-01, ARG2, t2 / temporal-quantity)
(t / temporal-quantity, location, p / prison)
(t / temporal-quantity, unit, m / month)
(t2 / temporal-quantity, location, p / prison)
(t2 / temporal-quantity, unit, y / year)

Decoded in 69,890 microseconds
Sentence: The sentence also ordered Montesinos pay a fine of 3 million dollars as compensation to the State.

NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 13-14:  compensation => compensate-01
Span 11-12:  dollars => (monetary-quantity :unit dollar)
Span 3-4:  ordered => order-01
Span 5-6:  pay => pay-01
Span 1-2:  sentence => sentence-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  also => also
Oracle Span 13-14:  compensation => compensate-01
Oracle Span 11-12:  dollars => (monetary-quantity :unit dollar)
Oracle Span 7-8:  fine => fine-01
Oracle Span 4-5:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 3-4:  ordered => order-01
Oracle Span 5-6:  pay => pay-01
Oracle Span 1-2:  sentence => sentence-01
Oracle Span 16-17:  State => state

Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: also => also
Missing span: State => state
Missing span: fine => fine-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	sentence	_	NN	NN	_	4	nsubj	_	_
3	also	_	RB	RB	_	4	advmod	_	_
4	ordered	_	VBD	VBD	_	0	root	_	_
5	Montesinos	_	NNP	NNP	_	6	nsubj	_	_
6	pay	_	VBP	VBP	_	4	ccomp	_	_
7	a	_	DT	DT	_	8	det	_	_
8	fine	_	NN	NN	_	6	dobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	3	_	CD	CD	_	11	number	_	_
11	million	_	CD	CD	_	12	num	_	_
12	dollars	_	NNS	NNS	_	9	pobj	_	_
13	as	_	IN	IN	_	12	prep	_	_
14	compensation	_	NN	NN	_	13	pobj	_	_
15	to	_	TO	TO	_	6	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	State	_	NNP	NNP	_	15	pobj	_	_
18	.	_	.	.	_	4	punct	_	_

Oracle:
(c / compensate-01, ARG2, s2 / state)
(f / fine-01, ARG1, m2 / monetary-quantity)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Montesinos")
(o / order-01, ARG0, s / sentence-01)
(o / order-01, ARG2, p2 / pay-01)
(o / order-01, mod, a / also)
(p / person, name, n / name)
(p2 / pay-01, ARG1, f / fine-01)
(p2 / pay-01, ARG2, p / person)
(p2 / pay-01, ARG3, c / compensate-01)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),compensation,compensate-01,false), Span(11,12,List(2, 1),dollars,(monetary-quantity :unit dollar),false), Span(5,6,List(3),pay,pay-01,false), Span(3,4,List(4),ordered,order-01,false), Span(1,2,List(5),sentence,sentence-01,false)),Map(2 -> dollar, 5 -> sentence-01, 1 -> monetary-quantity, 4 -> order-01, 0 -> compensate-01, 3 -> pay-01),Map(s -> sentence-01, d -> dollar, m -> monetary-quantity, p -> pay-01, c -> compensate-01, o -> order-01))),[Ljava.lang.String;@287f7811,Annotation([Ljava.lang.String;@451f87af,[Ljava.lang.String;@2b556bb2,[Ljava.lang.String;@44cb460e),Annotation([Ljava.lang.String;@17271176,[Ljava.lang.String;@2e3cdec2,[Ledu.cmu.lti.nlp.amr.Dependency;@2e34384c),Annotation([Ljava.lang.String;@3051e0b2,[Ljava.lang.String;@1f52eb6f,[Ljava.lang.String;@57d0fc89),Annotation([Ljava.lang.String;@58294867,[Ljava.lang.String;@67c277a0,[Ledu.cmu.lti.nlp.amr.Entity;@6fc3e1a4))
AMR:
(c / compensate-01, ARG3, m / monetary-quantity)
(m / monetary-quantity, unit, d / dollar)
(o / order-01, ARG0, s / sentence-01)
(o / order-01, ARG1, p / pay-01)
(p / pay-01, ARG1, c / compensate-01)

Decoded in 48,495 microseconds
Sentence: Anti-corruption judge Saul Pena stated Montesinos has admitted to the abuse of authority charge.

NER Entity: (person :name (name :op "Saul" :op "Pena"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 12-13:  abuse => abuse-01
Span 9-10:  admitted => admit-01
Span 14-15:  authority => authority
Span 2-4:  corruption judge => (person :name (name :op "Saul" :op "Pena"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  abuse => abuse-01
Oracle Span 9-10:  admitted => admit-01
Oracle Span 0-1:  Anti => oppose-01
Oracle Span 14-15:  authority => authority
Oracle Span 15-16:  charge => charge-05
Oracle Span 2-3:  corruption => corrupt-01
Oracle Span 8-9:  has => have-org-role-91
Oracle Span 3-4:  judge => judge-01
Oracle Span 7-8:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 4-6:  Saul Pena => (person :name (name :op "Pena" :op "Saul"))
Oracle Span 6-7:  stated => state-01

Extra span: corruption judge => (person :name (name :op "Saul" :op "Pena"))
Missing span: Saul Pena => (person :name (name :op "Pena" :op "Saul"))
Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: stated => state-01
Missing span: charge => charge-05
Missing span: judge => judge-01
Missing span: Anti => oppose-01
Missing span: has => have-org-role-91
Missing span: corruption => corrupt-01
Dependencies:
1	Anti-corruption	_	JJ	JJ	_	4	amod	_	_
2	judge	_	NN	NN	_	4	nn	_	_
3	Saul	_	NNP	NNP	_	4	nn	_	_
4	Pena	_	NNP	NNP	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	Montesinos	_	NNP	NNP	_	8	nsubj	_	_
7	has	_	VBZ	VBZ	_	8	aux	_	_
8	admitted	_	VBN	VBN	_	5	ccomp	_	_
9	to	_	TO	TO	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	abuse	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	authority	_	NN	NN	_	14	nn	_	_
14	charge	_	NN	NN	_	12	pobj	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(a / admit-01, ARG0, p3 / person)
(a / admit-01, ARG1, c2 / charge-05)
(a2 / abuse-01, ARG1, a3 / authority)
(c2 / charge-05, ARG1, a2 / abuse-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG3, j2 / judge-01)
(n / name, op, "Pena")
(n / name, op, "Saul")
(n2 / name, op, "Montesinos")
(o / oppose-01, ARG0, p / person)
(o / oppose-01, ARG1, c / corrupt-01)
(p / person, name, n / name)
(p3 / person, name, n2 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / admit-01)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),authority,authority,false), Span(12,13,List(1),abuse,abuse-01,false), Span(9,10,List(2),admitted,admit-01,false), Span(2,4,List(6, 5, 4, 3),corruption judge,(person :name (name :op "Saul" :op "Pena")),false)),Map(2 -> admit-01, 5 -> "Saul", 1 -> abuse-01, 4 -> name, 6 -> "Pena", 0 -> authority, 3 -> person),Map(n -> name, a3 -> admit-01, p -> person, a -> authority, a2 -> abuse-01))),[Ljava.lang.String;@3fa76c61,Annotation([Ljava.lang.String;@2d5f7182,[Ljava.lang.String;@59546cfe,[Ljava.lang.String;@29ea78b1),Annotation([Ljava.lang.String;@2d2acd89,[Ljava.lang.String;@7baf6acf,[Ledu.cmu.lti.nlp.amr.Dependency;@1e6dad8),Annotation([Ljava.lang.String;@7b3315a5,[Ljava.lang.String;@8ed9cf,[Ljava.lang.String;@f72203),Annotation([Ljava.lang.String;@377008df,[Ljava.lang.String;@540dbda9,[Ledu.cmu.lti.nlp.amr.Entity;@22bb5646))
AMR:
(a2 / abuse-01, ARG1, p / person)
(a3 / admit-01, ARG1, a2 / abuse-01)
(a3 / admit-01, ARG2, a / authority)
(n / name, op, "Pena")
(n / name, op, "Saul")
(p / person, name, n / name)

Decoded in 43,525 microseconds
Sentence: This is the first ruling of more than 50 charges against Montesinos which include corruption, drug trafficking, illegal arms deals and human rights violations.

NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 8-9:  50 => 50
Span 14-15:  corruption => corrupt-01
Span 16-17:  drug => drug
Span 23-24:  human => human
Span 0-1:  This => this
Span 25-26:  violations => violate-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 8-9:  50 => 50
Oracle Span 22-23:  and => and
Oracle Span 20-21:  arms => arm
Oracle Span 9-10:  charges => charge-05
Oracle Span 14-15:  corruption => corrupt-01
Oracle Span 21-22:  deals => deal-01
Oracle Span 16-17:  drug => drug
Oracle Span 23-24:  human => human
Oracle Span 19-20:  illegal => (law :polarity -)
Oracle Span 11-12:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 6-7:  more => more-than
Oracle Span 5-6:  of => include-91
Oracle Span 24-25:  rights => right
Oracle Span 4-5:  ruling => ruling
Oracle Span 0-1:  This => this
Oracle Span 17-18:  trafficking => traffic-00
Oracle Span 25-26:  violations => violate-01

Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: ruling => ruling
Missing span: charges => charge-05
Missing span: of => include-91
Missing span: and => and
Missing span: rights => right
Missing span: deals => deal-01
Missing span: arms => arm
Missing span: illegal => (law :polarity -)
Missing span: trafficking => traffic-00
Missing span: more => more-than
Dependencies:
1	This	_	DT	DT	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	the	_	DT	DT	_	5	det	_	_
4	first	_	JJ	JJ	_	5	amod	_	_
5	ruling	_	NN	NN	_	0	root	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	more	_	JJR	JJR	_	8	mwe	_	_
8	than	_	IN	IN	_	9	quantmod	_	_
9	50	_	CD	CD	_	10	num	_	_
10	charges	_	NNS	NNS	_	6	pobj	_	_
11	against	_	IN	IN	_	10	prep	_	_
12	Montesinos	_	NNP	NNP	_	11	pobj	_	_
13	which	_	WDT	WDT	_	14	nsubj	_	_
14	include	_	VBP	VBP	_	5	rcmod	_	_
15	corruption	_	NN	NN	_	14	dobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	drug	_	NN	NN	_	18	nn	_	_
18	trafficking	_	NN	NN	_	15	conj	_	_
19	,	_	,	,	_	15	punct	_	_
20	illegal	_	JJ	JJ	_	22	amod	_	_
21	arms	_	NNS	NNS	_	22	nn	_	_
22	deals	_	NNS	NNS	_	15	conj	_	_
23	and	_	CC	CC	_	15	cc	_	_
24	human	_	JJ	JJ	_	26	amod	_	_
25	rights	_	NNS	NNS	_	26	nn	_	_
26	violations	_	NNS	NNS	_	15	conj	_	_
27	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c2 / corrupt-01)
(a / and, op, d2 / deal-01)
(a / and, op, t / traffic-00)
(a / and, op, v / violate-01)
(a2 / arm, mod, l / law)
(c / charge-05, ARG1, p / person)
(c / charge-05, quant, 5 / 50)
(d2 / deal-01, ARG1, a2 / arm)
(i / include-91, ARG1, a / and)
(i / include-91, ARG2, c / charge-05)
(l / law, polarity, -)
(m2 / more-than, op, c / charge-05)
(n / name, op, "Montesinos")
(p / person, name, n / name)
(r / ruling, domain, t2 / this)
(r2 / right, mod, h / human)
(t / traffic-00, ARG1, d / drug)
(v / violate-01, ARG1, r2 / right)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),violations,violate-01,false), Span(23,24,List(1),human,human,false), Span(16,17,List(2),drug,drug,false), Span(14,15,List(3),corruption,corrupt-01,false), Span(8,9,List(4),50,50,false), Span(0,1,List(5),This,this,false)),Map(2 -> drug, 5 -> this, 1 -> human, 4 -> 50, 0 -> violate-01, 3 -> corrupt-01),Map(h -> human, t -> this, 5 -> 50, d -> drug, v -> violate-01, c -> corrupt-01))),[Ljava.lang.String;@1be59f28,Annotation([Ljava.lang.String;@2ce45a7b,[Ljava.lang.String;@153d4abb,[Ljava.lang.String;@6d4c273c),Annotation([Ljava.lang.String;@5a67e962,[Ljava.lang.String;@545e57d7,[Ledu.cmu.lti.nlp.amr.Dependency;@2bc9a775),Annotation([Ljava.lang.String;@27b000f7,[Ljava.lang.String;@42f9c19a,[Ljava.lang.String;@64bfd6fd),Annotation([Ljava.lang.String;@2ab2710,[Ljava.lang.String;@253b380a,[Ledu.cmu.lti.nlp.amr.Entity;@29c2c826))
AMR:
(c / corrupt-01, ARG0, t / this)
(c / corrupt-01, ARG1, 5 / 50)
(v / violate-01, ARG0, t / this)
(v / violate-01, ARG1, d / drug)
(v / violate-01, mod, h / human)

Decoded in 95,978 microseconds
Sentence: Montesinos is alleged to run a network of bribes.

NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 2-3:  alleged => allege-01
Span 8-9:  bribes => bribe-01
Span 6-7:  network => network

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  alleged => allege-01
Oracle Span 8-9:  bribes => bribe-01
Oracle Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 6-7:  network => network-01
Oracle Span 4-5:  run => run-01

Incorrect span: network => network
Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: run => run-01
Missing span: network => network-01
Dependencies:
1	Montesinos	_	NNS	NNS	_	3	nsubjpass	_	_
2	is	_	VBZ	VBZ	_	3	auxpass	_	_
3	alleged	_	VBN	VBN	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	run	_	VB	VB	_	3	xcomp	_	_
6	a	_	DT	DT	_	7	det	_	_
7	network	_	NN	NN	_	5	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	bribes	_	NNS	NNS	_	8	pobj	_	_
10	.	_	.	.	_	3	punct	_	_

Oracle:
(a / allege-01, ARG1, r / run-01)
(n / name, op, "Montesinos")
(n2 / network-01, ARG1, b / bribe-01)
(p / person, name, n / name)
(r / run-01, ARG0, p / person)
(r / run-01, ARG1, n2 / network-01)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),bribes,bribe-01,false), Span(6,7,List(1),network,network,false), Span(2,3,List(2),alleged,allege-01,false)),Map(2 -> allege-01, 1 -> network, 0 -> bribe-01),Map(n -> network, b -> bribe-01, a -> allege-01))),[Ljava.lang.String;@3350ebdd,Annotation([Ljava.lang.String;@6818d900,[Ljava.lang.String;@149f5761,[Ljava.lang.String;@2ba33e2c),Annotation([Ljava.lang.String;@1f193686,[Ljava.lang.String;@31e72cbc,[Ledu.cmu.lti.nlp.amr.Dependency;@5fad41be),Annotation([Ljava.lang.String;@6dcd5639,[Ljava.lang.String;@3b36e000,[Ljava.lang.String;@333cb916),Annotation([Ljava.lang.String;@629ae7e,[Ljava.lang.String;@1d25c1c,[Ledu.cmu.lti.nlp.amr.Entity;@de88ac6))
AMR:
(a / allege-01, ARG1, n / network)
(b / bribe-01, consist, n / network)

Decoded in 17,046 microseconds
Sentence: A leaked videotape showed Montesinos bribing a congressman to switch to the government party and triggered events that culminated in Fujimori's resignation in November 2000.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Fujimori"))
Spans:
Span 16-17:  events => event
Span 1-2:  leaked => leak-01
Span 24-26:  November 2000 => (date-entity :month 11 :year 2000)
Span 3-4:  showed => show-01
Span 9-10:  switch => switch-01
Span 15-16:  triggered => trigger-01
Span 2-3:  videotape => videotape

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 5-6:  bribing => bribe-01
Oracle Span 7-8:  congressman => congressman
Oracle Span 18-19:  culminated => culminate-01
Oracle Span 16-17:  events => event
Oracle Span 20-21:  Fujimori => (person :name (name :op "Fujimori"))
Oracle Span 12-13:  government => (government-organization :ARG0-of govern-01)
Oracle Span 1-2:  leaked => leak-01
Oracle Span 4-5:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 24-26:  November 2000 => (date-entity :year 2000 :month 11)
Oracle Span 13-14:  party => party
Oracle Span 22-23:  resignation => resign-01
Oracle Span 3-4:  showed => show-01
Oracle Span 9-10:  switch => switch-01
Oracle Span 15-16:  triggered => trigger-01
Oracle Span 2-3:  videotape => videotape

Incorrect span: November 2000 => (date-entity :month 11 :year 2000)
Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: Fujimori => (person :name (name :op "Fujimori"))
Missing span: November 2000 => (date-entity :year 2000 :month 11)
Missing span: and => and
Missing span: culminated => culminate-01
Missing span: bribing => bribe-01
Missing span: party => party
Missing span: congressman => congressman
Missing span: resignation => resign-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	leaked	_	VBN	VBN	_	3	amod	_	_
3	videotape	_	NN	NN	_	4	nsubj	_	_
4	showed	_	VBD	VBD	_	0	root	_	_
5	Montesinos	_	NNP	NNP	_	6	nsubj	_	_
6	bribing	_	VBG	VBG	_	4	dep	_	_
7	a	_	DT	DT	_	8	det	_	_
8	congressman	_	NN	NN	_	6	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	switch	_	VB	VB	_	8	vmod	_	_
11	to	_	TO	TO	_	10	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	government	_	NN	NN	_	14	nn	_	_
14	party	_	NN	NN	_	11	pobj	_	_
15	and	_	CC	CC	_	4	cc	_	_
16	triggered	_	VBD	VBD	_	4	conj	_	_
17	events	_	NNS	NNS	_	16	dobj	_	_
18	that	_	WDT	WDT	_	19	nsubj	_	_
19	culminated	_	VBN	VBN	_	17	rcmod	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	Fujimori	_	NNP	NNP	_	23	poss	_	_
22	's	_	POS	POS	_	21	possessive	_	_
23	resignation	_	NN	NN	_	20	pobj	_	_
24	in	_	IN	IN	_	23	prep	_	_
25	November	_	NNP	NNP	_	24	pobj	_	_
26	2000	_	CD	CD	_	25	num	_	_
27	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, s / show-01)
(a / and, op, t / trigger-01)
(b / bribe-01, ARG0, p / person)
(b / bribe-01, ARG1, c / congressman)
(b / bribe-01, ARG2, s2 / switch-01)
(c2 / culminate-01, ARG1, e / event)
(c2 / culminate-01, ARG2, r / resign-01)
(d2 / date-entity, month, 11)
(d2 / date-entity, year, 2000)
(g2 / govern-01, ARG0, g / government-organization)
(l / leak-01, ARG1, v / videotape)
(n / name, op, "Montesinos")
(n2 / name, op, "Fujimori")
(p / person, name, n / name)
(p2 / party, mod, g / government-organization)
(p3 / person, name, n2 / name)
(r / resign-01, ARG0, p3 / person)
(r / resign-01, time, d2 / date-entity)
(s / show-01, ARG0, v / videotape)
(s / show-01, ARG1, b / bribe-01)
(s2 / switch-01, ARG1, c / congressman)
(s2 / switch-01, ARG2, p2 / party)
(t / trigger-01, ARG0, v / videotape)
(t / trigger-01, ARG1, e / event)

Input(Some(Graph(null,ArrayBuffer(Span(24,26,List(2, 1, 0),November 2000,(date-entity :month 11 :year 2000),false), Span(16,17,List(3),events,event,false), Span(15,16,List(4),triggered,trigger-01,false), Span(9,10,List(5),switch,switch-01,false), Span(3,4,List(6),showed,show-01,false), Span(2,3,List(7),videotape,videotape,false), Span(1,2,List(8),leaked,leak-01,false)),Map(2 -> 2000, 5 -> switch-01, 8 -> leak-01, 7 -> videotape, 1 -> 11, 4 -> trigger-01, 6 -> show-01, 0 -> date-entity, 3 -> event),Map(e -> event, 2 -> 2000, s2 -> show-01, t -> trigger-01, s -> switch-01, v -> videotape, d -> date-entity, 1 -> 11, l -> leak-01))),[Ljava.lang.String;@5bca7664,Annotation([Ljava.lang.String;@105b693d,[Ljava.lang.String;@3fae596,[Ljava.lang.String;@4a0df195),Annotation([Ljava.lang.String;@42fcc7e6,[Ljava.lang.String;@9255c05,[Ledu.cmu.lti.nlp.amr.Dependency;@5da7cee2),Annotation([Ljava.lang.String;@78830d9a,[Ljava.lang.String;@5ce4369b,[Ljava.lang.String;@7f829c76),Annotation([Ljava.lang.String;@1cb19dba,[Ljava.lang.String;@7c3ebc6b,[Ledu.cmu.lti.nlp.amr.Entity;@1931d99))
AMR:
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2000)
(l / leak-01, ARG1, v / videotape)
(s / switch-01, ARG1, t / trigger-01)
(s2 / show-01, ARG0, v / videotape)
(s2 / show-01, ARG1, d / date-entity)
(t / trigger-01, ARG0, v / videotape)
(t / trigger-01, ARG1, e / event)

Decoded in 118,767 microseconds
Sentence: Fujimori is accused of dereliction of duty and embezzlement and has been in self-imposed exile in Japan since resigning to avoid the legal action from the Peruvian authorities under the protection of dual nationality.

NER Entity: (person :name (name :op "Fujimori"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 2-3:  accused => accuse-01
Span 25-26:  action => action
Span 29-30:  authorities => authority
Span 22-23:  avoid => avoid-01
Span 34-35:  dual => dual
Span 6-7:  duty => duty
Span 16-17:  exile => exile-01
Span 15-16:  imposed => impose-01
Span 35-36:  nationality => national
Span 32-33:  protection => protect-01
Span 13-14:  self => self
Span 19-20:  since => since

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 2-3:  accused => accuse-01
Oracle Span 7-8:  and => and
Oracle Span 9-10:  and => and
Oracle Span 29-30:  authorities => authority
Oracle Span 22-23:  avoid => avoid-01
Oracle Span 4-5:  dereliction => dereliction
Oracle Span 34-35:  dual => dual
Oracle Span 6-7:  duty => duty
Oracle Span 8-9:  embezzlement => embezzle-01
Oracle Span 16-17:  exile => exile-01
Oracle Span 0-1:  Fujimori => (person :name (name :op "Fujimori"))
Oracle Span 15-16:  imposed => impose-01
Oracle Span 18-19:  Japan => (country :name (name :op "Japan"))
Oracle Span 35-36:  nationality => nationality
Oracle Span 28-29:  Peruvian => (country :name (name :op "Peru"))
Oracle Span 32-33:  protection => protect-01
Oracle Span 20-21:  resigning => resign-01
Oracle Span 19-20:  since => since

Incorrect span: nationality => national
Extra span: action => action
Extra span: self => self
Missing span: Fujimori => (person :name (name :op "Fujimori"))
Missing span: Japan => (country :name (name :op "Japan"))
Missing span: Peruvian => (country :name (name :op "Peru"))
Missing span: and => and
Missing span: nationality => nationality
Missing span: resigning => resign-01
Missing span: and => and
Missing span: dereliction => dereliction
Missing span: embezzlement => embezzle-01
Dependencies:
1	Fujimori	_	NNP	NNP	_	3	nsubjpass	_	_
2	is	_	VBZ	VBZ	_	3	auxpass	_	_
3	accused	_	VBN	VBN	_	0	root	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	dereliction	_	NN	NN	_	4	pobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	duty	_	NN	NN	_	6	pobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	embezzlement	_	NN	NN	_	7	conj	_	_
10	and	_	CC	CC	_	3	cc	_	_
11	has	_	VBZ	VBZ	_	12	aux	_	_
12	been	_	VBN	VBN	_	3	conj	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	self-imposed	_	JJ	JJ	_	15	amod	_	_
15	exile	_	NN	NN	_	13	pobj	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	Japan	_	NNP	NNP	_	16	pobj	_	_
18	since	_	IN	IN	_	12	prep	_	_
19	resigning	_	VBG	VBG	_	18	pcomp	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	avoid	_	VB	VB	_	19	xcomp	_	_
22	the	_	DT	DT	_	24	det	_	_
23	legal	_	JJ	JJ	_	24	amod	_	_
24	action	_	NN	NN	_	21	dobj	_	_
25	from	_	IN	IN	_	21	prep	_	_
26	the	_	DT	DT	_	28	det	_	_
27	Peruvian	_	JJ	JJ	_	28	amod	_	_
28	authorities	_	NNS	NNS	_	25	pobj	_	_
29	under	_	IN	IN	_	21	prep	_	_
30	the	_	DT	DT	_	31	det	_	_
31	protection	_	NN	NN	_	29	pobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	dual	_	JJ	JJ	_	34	amod	_	_
34	nationality	_	NN	NN	_	32	pobj	_	_
35	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, a2 / accuse-01)
(a / and, op, e2 / exile-01)
(a2 / accuse-01, ARG1, p / person)
(a2 / accuse-01, ARG2, a3 / and)
(a3 / and, op, d / dereliction)
(a3 / and, op, e / embezzle-01)
(a4 / avoid-01, prep-under, p2 / protect-01)
(a6 / authority, mod, c2 / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(d / dereliction, mod, d2 / duty)
(e2 / exile-01, ARG1, p / person)
(e2 / exile-01, location, c / country)
(e2 / exile-01, purpose, a4 / avoid-01)
(e2 / exile-01, time, s / since)
(i / impose-01, ARG0, p / person)
(i / impose-01, ARG1, e2 / exile-01)
(n / name, op, "Fujimori")
(n2 / name, op, "Japan")
(n3 / name, op, "Peru")
(n4 / nationality, mod, d3 / dual)
(p / person, name, n / name)
(p2 / protect-01, ARG0, n4 / nationality)
(r / resign-01, ARG0, p / person)
(s / since, op, r / resign-01)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),nationality,national,false), Span(34,35,List(1),dual,dual,false), Span(32,33,List(2),protection,protect-01,false), Span(29,30,List(3),authorities,authority,false), Span(25,26,List(4),action,action,false), Span(22,23,List(5),avoid,avoid-01,false), Span(19,20,List(6),since,since,false), Span(16,17,List(7),exile,exile-01,false), Span(15,16,List(8),imposed,impose-01,false), Span(13,14,List(9),self,self,false), Span(6,7,List(10),duty,duty,false), Span(2,3,List(11),accused,accuse-01,false)),Map(2 -> protect-01, 5 -> avoid-01, 8 -> impose-01, 7 -> exile-01, 1 -> dual, 11 -> accuse-01, 4 -> action, 6 -> since, 9 -> self, 0 -> national, 10 -> duty, 3 -> authority),Map(e -> exile-01, n -> national, s2 -> self, s -> since, a3 -> avoid-01, d -> dual, p -> protect-01, a -> authority, d2 -> duty, i -> impose-01, a2 -> action, a4 -> accuse-01))),[Ljava.lang.String;@6a9950f1,Annotation([Ljava.lang.String;@7ad54c55,[Ljava.lang.String;@73017a80,[Ljava.lang.String;@6ae7deac),Annotation([Ljava.lang.String;@4a5905d9,[Ljava.lang.String;@1a3e5f23,[Ledu.cmu.lti.nlp.amr.Dependency;@6293e39e),Annotation([Ljava.lang.String;@365553de,[Ljava.lang.String;@34a0ef00,[Ljava.lang.String;@5c0f79f0),Annotation([Ljava.lang.String;@21fdfefc,[Ljava.lang.String;@3daa82be,[Ledu.cmu.lti.nlp.amr.Entity;@ec1b2e4))
AMR:
(a3 / avoid-01, ARG1, a2 / action)
(a3 / avoid-01, manner, p / protect-01)
(a4 / accuse-01, ARG1, s / since)
(d2 / duty, op, a3 / avoid-01)
(e / exile-01, ARG1, p / protect-01)
(e / exile-01, time, s / since)
(i / impose-01, ARG0, s2 / self)
(i / impose-01, ARG1, e / exile-01)
(n / national, mod, d / dual)
(p / protect-01, ARG0, a / authority)
(p / protect-01, ARG2, n / national)

Decoded in 326,555 microseconds
Sentence: Montesinos fled Peru in October 2000 but was captured in Venezuela on 23 June 2001.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (country :name (name :op "Peru"))
NER Entity: (country :name (name :op "Venezuela"))
mkDayMonthYear(23	June	2001,23,June,2001)
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Peru"))
Spans:
Span 12-15:  23 June 2001 => (date-entity :day 23 :month 6 :year 2001)
Span 8-9:  captured => capture-01
Span 1-2:  fled => flee-01
Span 4-6:  October 2000 => (date-entity :month 10 :year 2000)
Span 2-3:  Peru => (country :name (name :op "Peru"))
Span 10-11:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-15:  23 June 2001 => (date-entity :year 2001 :month 6 :day 23)
Oracle Span 6-7:  but => contrast-01
Oracle Span 8-9:  captured => capture-01
Oracle Span 1-2:  fled => flee-01
Oracle Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 4-6:  October 2000 => (date-entity :year 2000 :month 10)
Oracle Span 2-3:  Peru => (country :name (name :op "Peru"))
Oracle Span 10-11:  Venezuela => (country :name (name :op "Venezuela"))

Incorrect span: 23 June 2001 => (date-entity :day 23 :month 6 :year 2001)
Incorrect span: October 2000 => (date-entity :month 10 :year 2000)
Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: October 2000 => (date-entity :year 2000 :month 10)
Missing span: 23 June 2001 => (date-entity :year 2001 :month 6 :day 23)
Missing span: but => contrast-01
Dependencies:
1	Montesinos	_	NNS	NNS	_	2	nsubj	_	_
2	fled	_	VBD	VBD	_	0	root	_	_
3	Peru	_	NNP	NNP	_	2	dobj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	October	_	NNP	NNP	_	4	pobj	_	_
6	2000	_	CD	CD	_	5	num	_	_
7	but	_	CC	CC	_	2	cc	_	_
8	was	_	VBD	VBD	_	9	auxpass	_	_
9	captured	_	VBN	VBN	_	2	conj	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	Venezuela	_	NNP	NNP	_	10	pobj	_	_
12	on	_	IN	IN	_	11	prep	_	_
13	23	_	CD	CD	_	12	pobj	_	_
14	June	_	NNP	NNP	_	9	tmod	_	_
15	2001	_	CD	CD	_	14	num	_	_
16	.	_	.	.	_	2	punct	_	_

Oracle:
(c / contrast-01, ARG1, f / flee-01)
(c / contrast-01, ARG2, c3 / capture-01)
(c2 / country, name, n2 / name)
(c3 / capture-01, ARG1, p / person)
(c3 / capture-01, location, c4 / country)
(c3 / capture-01, time, d4 / date-entity)
(c4 / country, name, n3 / name)
(d3 / date-entity, month, 10)
(d3 / date-entity, year, 2000)
(d4 / date-entity, day, 23)
(d4 / date-entity, month, 6)
(d4 / date-entity, year, 2001)
(f / flee-01, ARG0, p / person)
(f / flee-01, ARG1, c2 / country)
(f / flee-01, time, d3 / date-entity)
(n / name, op, "Montesinos")
(n2 / name, op, "Peru")
(n3 / name, op, "Venezuela")
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(12,15,List(3, 2, 1, 0),23 June 2001,(date-entity :day 23 :month 6 :year 2001),false), Span(10,11,List(6, 5, 4),Venezuela,(country :name (name :op "Venezuela")),false), Span(8,9,List(7),captured,capture-01,false), Span(4,6,List(10, 9, 8),October 2000,(date-entity :month 10 :year 2000),false), Span(2,3,List(13, 12, 11),Peru,(country :name (name :op "Peru")),false), Span(1,2,List(14),fled,flee-01,false)),Map(2 -> 6, 5 -> name, 12 -> name, 8 -> date-entity, 7 -> capture-01, 1 -> 23, 4 -> country, 11 -> country, 14 -> flee-01, 6 -> "Venezuela", 0 -> date-entity, 9 -> 10, 3 -> 2001, 10 -> 2000, 13 -> "Peru"),Map(n -> name, 2 -> 23, d -> date-entity, 1 -> 10, 23 -> 2000, c3 -> country, d2 -> date-entity, 6 -> 6, c -> country, 22 -> 2001, f -> flee-01, c2 -> capture-01, n2 -> name))),[Ljava.lang.String;@29a69a35,Annotation([Ljava.lang.String;@67e28be3,[Ljava.lang.String;@e344ad3,[Ljava.lang.String;@de18f63),Annotation([Ljava.lang.String;@108bdbd8,[Ljava.lang.String;@6345e7b9,[Ledu.cmu.lti.nlp.amr.Dependency;@4f8b4bd0),Annotation([Ljava.lang.String;@4e904fd5,[Ljava.lang.String;@b18c4,[Ljava.lang.String;@4cbf4f53),Annotation([Ljava.lang.String;@597f48df,[Ljava.lang.String;@15dd5ac2,[Ledu.cmu.lti.nlp.amr.Entity;@4d48bd85))
AMR:
(c / country, name, n / name)
(c2 / capture-01, ARG1, c3 / country)
(c2 / capture-01, location, c / country)
(c2 / capture-01, time, d / date-entity)
(c3 / country, name, n2 / name)
(d / date-entity, day, 2 / 23)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 22 / 2001)
(d2 / date-entity, month, 1 / 10)
(d2 / date-entity, year, 23 / 2000)
(f / flee-01, ARG1, c3 / country)
(f / flee-01, time, d2 / date-entity)
(n / name, op, "Venezuela")
(n2 / name, op, "Peru")

Decoded in 107,032 microseconds
Sentence: Montesinos heard the sentence at the Callao Naval Base where Montesinos has been imprisoned since 2001.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (organization :name (name :op "Callao" :op "Naval" :op "Base"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 15-16:  2001 => (date-entity :year 2001)
Span 6-9:  Callao Naval Base => (organization :name (name :op "Callao" :op "Naval" :op "Base"))
Span 1-2:  heard => hear-01
Span 13-14:  imprisoned => imprison-01
Span 3-4:  sentence => sentence-01
Span 14-15:  since => since

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 15-16:  2001 => (date-entity :year 2001)
Oracle Span 6-9:  Callao Naval Base => (port :name (name :op "Base" :op "Naval" :op "Callao"))
Oracle Span 1-2:  heard => hear-01
Oracle Span 13-14:  imprisoned => imprison-01
Oracle Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 3-4:  sentence => (thing :ARG2-of sentence-01)
Oracle Span 14-15:  since => since

Incorrect span: Callao Naval Base => (organization :name (name :op "Callao" :op "Naval" :op "Base"))
Incorrect span: sentence => sentence-01
Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: Callao Naval Base => (port :name (name :op "Base" :op "Naval" :op "Callao"))
Missing span: sentence => (thing :ARG2-of sentence-01)
Dependencies:
1	Montesinos	_	NNS	NNS	_	2	nsubj	_	_
2	heard	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	sentence	_	NN	NN	_	2	dobj	_	_
5	at	_	IN	IN	_	2	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	Callao	_	NNP	NNP	_	9	nn	_	_
8	Naval	_	NNP	NNP	_	9	nn	_	_
9	Base	_	NNP	NNP	_	5	pobj	_	_
10	where	_	WRB	WRB	_	14	advmod	_	_
11	Montesinos	_	NNP	NNP	_	14	nsubjpass	_	_
12	has	_	VBZ	VBZ	_	14	aux	_	_
13	been	_	VBN	VBN	_	14	auxpass	_	_
14	imprisoned	_	VBN	VBN	_	2	advcl	_	_
15	since	_	IN	IN	_	14	prep	_	_
16	2001	_	CD	CD	_	15	pobj	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(d2 / date-entity, year, 2001)
(h / hear-01, ARG0, p / person)
(h / hear-01, ARG1, t / thing)
(h / hear-01, location, p2 / port)
(i / imprison-01, ARG1, p / person)
(i / imprison-01, location, p2 / port)
(i / imprison-01, time, s2 / since)
(n / name, op, "Montesinos")
(n2 / name, op, "Base")
(n2 / name, op, "Callao")
(n2 / name, op, "Naval")
(p / person, name, n / name)
(p2 / port, name, n2 / name)
(s / sentence-01, ARG2, t / thing)
(s2 / since, op, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),2001,(date-entity :year 2001),false), Span(14,15,List(2),since,since,false), Span(13,14,List(3),imprisoned,imprison-01,false), Span(6,9,List(8, 7, 6, 5, 4),Callao Naval Base,(organization :name (name :op "Callao" :op "Naval" :op "Base")),false), Span(3,4,List(9),sentence,sentence-01,false), Span(1,2,List(10),heard,hear-01,false)),Map(2 -> since, 5 -> name, 8 -> "Base", 7 -> "Naval", 1 -> 2001, 4 -> organization, 6 -> "Callao", 9 -> sentence-01, 0 -> date-entity, 10 -> hear-01, 3 -> imprison-01),Map(n -> name, h -> hear-01, 2 -> 2001, s2 -> sentence-01, s -> since, d -> date-entity, i -> imprison-01, o -> organization))),[Ljava.lang.String;@7bbbb6a8,Annotation([Ljava.lang.String;@58a120b0,[Ljava.lang.String;@27d57a2c,[Ljava.lang.String;@2ff95fc6),Annotation([Ljava.lang.String;@9d1a267,[Ljava.lang.String;@58a4a74d,[Ledu.cmu.lti.nlp.amr.Dependency;@54aca26f),Annotation([Ljava.lang.String;@314ed053,[Ljava.lang.String;@35088e87,[Ljava.lang.String;@486bc9a4),Annotation([Ljava.lang.String;@7965a51c,[Ljava.lang.String;@3eee3e2b,[Ledu.cmu.lti.nlp.amr.Entity;@4f63e3c7))
AMR:
(d / date-entity, year, 2 / 2001)
(h / hear-01, ARG1, s2 / sentence-01)
(h / hear-01, purpose, i / imprison-01)
(i / imprison-01, time, s / since)
(n / name, op, "Base")
(n / name, op, "Callao")
(n / name, op, "Naval")
(o / organization, name, n / name)
(s / since, op, d / date-entity)
(s2 / sentence-01, ARG1, o / organization)

Decoded in 74,967 microseconds
Sentence: Montesinos stated Montesinos would consult with a defense lawyer to appeal.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 10-11:  appeal => appeal-02
Span 4-5:  consult => consult-01
Span 8-9:  lawyer => lawyer

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  appeal => appeal-01
Oracle Span 4-5:  consult => consult-01
Oracle Span 7-8:  defense => defend-01
Oracle Span 8-9:  lawyer => lawyer
Oracle Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 1-2:  stated => state-01

Incorrect span: appeal => appeal-02
Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: stated => state-01
Missing span: appeal => appeal-01
Missing span: defense => defend-01
Dependencies:
1	Montesinos	_	NNS	NNS	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	Montesinos	_	NNP	NNP	_	5	nsubj	_	_
4	would	_	MD	MD	_	5	aux	_	_
5	consult	_	VB	VB	_	2	ccomp	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	a	_	DT	DT	_	9	det	_	_
8	defense	_	NN	NN	_	9	nn	_	_
9	lawyer	_	NN	NN	_	6	pobj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	appeal	_	VB	VB	_	5	xcomp	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(a / appeal-01, ARG0, p / person)
(c / consult-01, ARG0, p / person)
(c / consult-01, ARG1, l / lawyer)
(c / consult-01, ARG2, a / appeal-01)
(d / defend-01, ARG0, l / lawyer)
(n / name, op, "Montesinos")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / consult-01)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),appeal,appeal-02,false), Span(8,9,List(1),lawyer,lawyer,false), Span(4,5,List(2),consult,consult-01,false)),Map(2 -> consult-01, 1 -> lawyer, 0 -> appeal-02),Map(a -> appeal-02, c -> consult-01, l -> lawyer))),[Ljava.lang.String;@59532566,Annotation([Ljava.lang.String;@dca2615,[Ljava.lang.String;@421a4ee1,[Ljava.lang.String;@1237e0be),Annotation([Ljava.lang.String;@528f8f8b,[Ljava.lang.String;@ea9e141,[Ledu.cmu.lti.nlp.amr.Dependency;@1e54cb33),Annotation([Ljava.lang.String;@33cbfa57,[Ljava.lang.String;@1d96d872,[Ljava.lang.String;@5c748168),Annotation([Ljava.lang.String;@6441c486,[Ljava.lang.String;@834831b,[Ledu.cmu.lti.nlp.amr.Entity;@234a8f27))
AMR:
(c / consult-01, ARG0, l / lawyer)
(c / consult-01, purpose, a / appeal-02)

Decoded in 24,761 microseconds
Sentence: 2002-07-25

mkDayMonthYear(2002-07-25,25,07,2002)
mkDayMonthYear(2002-07-25,25,07,2002)
Spans:
Span 0-1:  2002-07-25 => (date-entity :day 25 :month 7 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2002-07-25 => (date-entity :day 25 :month 7 :year 2002)

Dependencies:
1	2002-07-25	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 25)
(d / date-entity, month, 7)
(d / date-entity, year, 2002)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-07-25,(date-entity :day 25 :month 7 :year 2002),false)),Map(2 -> 7, 1 -> 25, 0 -> date-entity, 3 -> 2002),Map(2 -> 25, 7 -> 7, d -> date-entity, 22 -> 2002))),[Ljava.lang.String;@5b4d25e7,Annotation([Ljava.lang.String;@31c2affc,[Ljava.lang.String;@1dc2de84,[Ljava.lang.String;@6a0659ac),Annotation([Ljava.lang.String;@58d63b16,[Ljava.lang.String;@7c4fc2bf,[Ledu.cmu.lti.nlp.amr.Dependency;@7772054c),Annotation([Ljava.lang.String;@2f61f937,[Ljava.lang.String;@46866946,[Ljava.lang.String;@44de0113),Annotation([Ljava.lang.String;@236134a1,[Ljava.lang.String;@369c9bb,[Ledu.cmu.lti.nlp.amr.Entity;@76d05cc9))
AMR:
(d / date-entity, day, 2 / 25)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2002)

Decoded in 8,427 microseconds
Sentence: Hong Kong (HK)

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "HK"))
Spans:
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))

Dependencies:
1	Hong	_	NNP	NNP	_	2	nn	_	_
2	Kong	_	NNP	NNP	_	0	root	_	_
3	(	_	(	(	_	4	punct	_	_
4	HK	_	NNP	NNP	_	2	appos	_	_
5	)	_	)	)	_	4	punct	_	_

Oracle:
(c / city, name, n / name)
(n / name, op, "Hong")
(n / name, op, "Kong")

Input(Some(Graph(null,ArrayBuffer(Span(0,2,List(3, 2, 1, 0),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> "Kong", 1 -> name, 0 -> city, 3 -> "Hong"),Map(n -> name, c -> city))),[Ljava.lang.String;@42b21d99,Annotation([Ljava.lang.String;@68dcfd52,[Ljava.lang.String;@25b5c5e3,[Ljava.lang.String;@5177e388),Annotation([Ljava.lang.String;@37b72ea,[Ljava.lang.String;@cc239ba,[Ledu.cmu.lti.nlp.amr.Dependency;@7d37f1c),Annotation([Ljava.lang.String;@69d6a7cd,[Ljava.lang.String;@3162743f,[Ljava.lang.String;@2c708440),Annotation([Ljava.lang.String;@3047254d,[Ljava.lang.String;@6cf31447,[Ledu.cmu.lti.nlp.amr.Entity;@4e92466a))
AMR:
(c / city, name, n / name)
(n / name, op, "Hong")
(n / name, op, "Kong")

Decoded in 7,563 microseconds
Sentence: International; Government; crime; weapons; narcotics

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  crime => crime
Span 8-9:  narcotics => narcotic

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 4-5:  crime => crime
Oracle Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 8-9:  narcotics => narcotic
Oracle Span 6-7:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: weapons => weapon
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	Government	_	NNP	NNP	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	crime	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	3	punct	_	_
7	weapons	_	NNS	NNS	_	3	dep	_	_
8	;	_	:	:	_	7	punct	_	_
9	narcotics	_	NNS	NNS	_	7	dep	_	_

Oracle:
(a / and, op, c / crime)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, n / narcotic)
(a / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),narcotics,narcotic,false), Span(7,8,List(1),;,and,false), Span(5,6,List(2),;,and,false), Span(4,5,List(3),crime,crime,false), Span(3,4,List(4),;,and,false), Span(1,2,List(5),;,and,false)),Map(2 -> and, 5 -> and, 1 -> and, 4 -> and, 0 -> narcotic, 3 -> crime),Map(n -> narcotic, a3 -> and, a -> and, a2 -> and, c -> crime, a4 -> and))),[Ljava.lang.String;@66e8997c,Annotation([Ljava.lang.String;@6f0cb5a1,[Ljava.lang.String;@1b29d52b,[Ljava.lang.String;@47547132),Annotation([Ljava.lang.String;@655523dd,[Ljava.lang.String;@6f7e336b,[Ledu.cmu.lti.nlp.amr.Dependency;@3a2b2322),Annotation([Ljava.lang.String;@5e1218b4,[Ljava.lang.String;@12958360,[Ljava.lang.String;@c6e0f32),Annotation([Ljava.lang.String;@6f3f0fae,[Ljava.lang.String;@21a66d45,[Ledu.cmu.lti.nlp.amr.Entity;@1f966492))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, c / crime)
(a4 / and, op, n / narcotic)

Decoded in 26,057 microseconds
Sentence: Hong Kong police making efforts to prevent triads or transnational criminal syndicates to engage in criminal activities

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 16-17:  activities => activity
Span 4-5:  efforts => effort
Span 13-14:  engage => engage-01
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 8-9:  or => or
Span 6-7:  prevent => prevent-01
Span 11-12:  syndicates => syndicate
Span 9-10:  transnational => transnational

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 16-17:  activities => activity
Oracle Span 10-11:  criminal => crime
Oracle Span 15-16:  criminal => crime
Oracle Span 13-14:  engage => engage-01
Oracle Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 8-9:  or => or
Oracle Span 2-3:  police => police
Oracle Span 6-7:  prevent => prevent-01
Oracle Span 11-12:  syndicates => syndicate
Oracle Span 9-10:  transnational => transnational
Oracle Span 7-8:  triads => (criminal-organization :name (name :op "Triad"))

Extra span: efforts => effort
Missing span: triads => (criminal-organization :name (name :op "Triad"))
Missing span: police => police
Missing span: criminal => crime
Missing span: criminal => crime
Dependencies:
1	Hong	_	NNP	NNP	_	5	nn	_	_
2	Kong	_	NNP	NNP	_	5	nn	_	_
3	police	_	NN	NN	_	5	nn	_	_
4	making	_	NN	NN	_	5	nn	_	_
5	efforts	_	NNS	NNS	_	7	nsubj	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	prevent	_	VB	VB	_	0	root	_	_
8	triads	_	NNS	NNS	_	7	dobj	_	_
9	or	_	CC	CC	_	8	cc	_	_
10	transnational	_	JJ	JJ	_	12	amod	_	_
11	criminal	_	JJ	JJ	_	12	amod	_	_
12	syndicates	_	NNS	NNS	_	8	conj	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	engage	_	VB	VB	_	7	xcomp	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	criminal	_	JJ	JJ	_	17	amod	_	_
17	activities	_	NNS	NNS	_	15	pobj	_	_

Oracle:
(a / activity, mod, c4 / crime)
(c / city, name, n / name)
(c2 / criminal-organization, name, n2 / name)
(e / engage-01, ARG0, o / or)
(e / engage-01, ARG2, a / activity)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Triad")
(o / or, op, c2 / criminal-organization)
(o / or, op, s / syndicate)
(p / police, mod, c / city)
(p2 / prevent-01, ARG0, p / police)
(p2 / prevent-01, ARG1, e / engage-01)
(s / syndicate, mod, c3 / crime)
(s / syndicate, mod, t / transnational)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),activities,activity,false), Span(13,14,List(1),engage,engage-01,false), Span(11,12,List(2),syndicates,syndicate,false), Span(9,10,List(3),transnational,transnational,false), Span(8,9,List(4),or,or,false), Span(6,7,List(5),prevent,prevent-01,false), Span(4,5,List(6),efforts,effort,false), Span(0,2,List(10, 9, 8, 7),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> syndicate, 5 -> prevent-01, 8 -> name, 7 -> city, 1 -> engage-01, 4 -> or, 6 -> effort, 9 -> "Kong", 0 -> activity, 10 -> "Hong", 3 -> transnational),Map(n -> name, e -> engage-01, t -> transnational, e2 -> effort, s -> syndicate, p -> prevent-01, a -> activity, c -> city, o -> or))),[Ljava.lang.String;@63fdffcd,Annotation([Ljava.lang.String;@7428de63,[Ljava.lang.String;@66f659e6,[Ljava.lang.String;@4a68135e),Annotation([Ljava.lang.String;@46678e49,[Ljava.lang.String;@748e9b20,[Ledu.cmu.lti.nlp.amr.Dependency;@2063c53e),Annotation([Ljava.lang.String;@2a9bc08f,[Ljava.lang.String;@50f40653,[Ljava.lang.String;@50a3d0f6),Annotation([Ljava.lang.String;@6e57b5e9,[Ljava.lang.String;@1abc9f14,[Ledu.cmu.lti.nlp.amr.Entity;@6a0ac48e))
AMR:
(c / city, name, n / name)
(e / engage-01, ARG1, e2 / effort)
(e / engage-01, ARG2, a / activity)
(e2 / effort, location, c / city)
(n / name, op, "Hong")
(n / name, op, "Kong")
(o / or, op, s / syndicate)
(p / prevent-01, ARG1, o / or)
(p / prevent-01, ARG2, e / engage-01)
(s / syndicate, mod, t / transnational)

Decoded in 103,972 microseconds
Sentence: Recently, the Hong Kong police have smashed a transnational theft syndicate, a cross-boundary criminal syndicate and a local triad gang specializing in exploiting youngsters to commit various crimes.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 29-30:  commit => commit-02
Span 31-32:  crimes => crime
Span 14-15:  cross => cross-02
Span 26-27:  exploiting => exploit-01
Span 23-24:  gang => gang
Span 3-5:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 21-22:  local => local
Span 0-1:  Recently => recent
Span 24-25:  specializing => specialize-01
Span 18-19:  syndicate => syndicate
Span 11-12:  syndicate => syndicate
Span 9-10:  transnational => transnational
Span 30-31:  various => various
Span 27-28:  youngsters => youngster

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 19-20:  and => and
Oracle Span 16-17:  boundary => boundary
Oracle Span 29-30:  commit => commit-02
Oracle Span 31-32:  crimes => crime
Oracle Span 17-18:  criminal => criminal-organization
Oracle Span 14-15:  cross => cross-02
Oracle Span 26-27:  exploiting => exploit-01
Oracle Span 23-24:  gang => gang
Oracle Span 3-5:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 21-22:  local => local
Oracle Span 5-6:  police => police
Oracle Span 0-1:  Recently => recent
Oracle Span 7-8:  smashed => smash-01
Oracle Span 24-25:  specializing => specialize-01
Oracle Span 11-12:  syndicate => syndicate
Oracle Span 18-19:  syndicate => syndicate
Oracle Span 9-10:  transnational => transnational
Oracle Span 22-23:  triad => (name :op "Triad")
Oracle Span 30-31:  various => various
Oracle Span 27-28:  youngsters => youngster

Missing span: triad => (name :op "Triad")
Missing span: smashed => smash-01
Missing span: and => and
Missing span: boundary => boundary
Missing span: police => police
Missing span: criminal => criminal-organization
Dependencies:
1	Recently	_	RB	RB	_	8	advmod	_	_
2	,	_	,	,	_	8	punct	_	_
3	the	_	DT	DT	_	6	det	_	_
4	Hong	_	NNP	NNP	_	6	nn	_	_
5	Kong	_	NNP	NNP	_	6	nn	_	_
6	police	_	NN	NN	_	8	nsubj	_	_
7	have	_	VBP	VBP	_	8	aux	_	_
8	smashed	_	VBN	VBN	_	0	root	_	_
9	a	_	DT	DT	_	12	det	_	_
10	transnational	_	JJ	JJ	_	12	amod	_	_
11	theft	_	NN	NN	_	12	nn	_	_
12	syndicate	_	NN	NN	_	8	dobj	_	_
13	,	_	,	,	_	12	punct	_	_
14	a	_	DT	DT	_	17	det	_	_
15	cross-boundary	_	JJ	JJ	_	17	amod	_	_
16	criminal	_	JJ	JJ	_	17	amod	_	_
17	syndicate	_	NN	NN	_	12	conj	_	_
18	and	_	CC	CC	_	12	cc	_	_
19	a	_	DT	DT	_	22	det	_	_
20	local	_	JJ	JJ	_	22	amod	_	_
21	triad	_	JJ	JJ	_	22	amod	_	_
22	gang	_	NN	NN	_	12	conj	_	_
23	specializing	_	VBG	VBG	_	22	vmod	_	_
24	in	_	IN	IN	_	23	prep	_	_
25	exploiting	_	VBG	VBG	_	24	pcomp	_	_
26	youngsters	_	NNS	NNS	_	25	dobj	_	_
27	to	_	TO	TO	_	28	aux	_	_
28	commit	_	VB	VB	_	25	vmod	_	_
29	various	_	JJ	JJ	_	30	amod	_	_
30	crimes	_	NNS	NNS	_	28	dobj	_	_
31	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, g / gang)
(a / and, op, s2 / syndicate)
(a / and, op, s3 / syndicate)
(c / city, name, n / name)
(c3 / cross-02, ARG0, s3 / syndicate)
(c3 / cross-02, ARG1, b / boundary)
(c4 / criminal-organization, name, n2 / name)
(c5 / commit-02, ARG0, y / youngster)
(e / exploit-01, ARG1, y / youngster)
(e / exploit-01, ARG2, c5 / commit-02)
(g / gang, mod, l / local)
(g / gang, poss, c4 / criminal-organization)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Triad")
(p / police, mod, c / city)
(s / smash-01, ARG0, p / police)
(s / smash-01, ARG1, a / and)
(s / smash-01, time, r / recent)
(s3 / syndicate, mod, c2 / crime)
(s4 / specialize-01, ARG0, g / gang)
(s4 / specialize-01, ARG0, s2 / syndicate)
(s4 / specialize-01, ARG0, s3 / syndicate)
(s4 / specialize-01, ARG1, e / exploit-01)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),crimes,crime,false), Span(30,31,List(1),various,various,false), Span(29,30,List(2),commit,commit-02,false), Span(27,28,List(3),youngsters,youngster,false), Span(26,27,List(4),exploiting,exploit-01,false), Span(24,25,List(5),specializing,specialize-01,false), Span(23,24,List(6),gang,gang,false), Span(21,22,List(7),local,local,false), Span(18,19,List(8),syndicate,syndicate,false), Span(14,15,List(9),cross,cross-02,false), Span(11,12,List(10),syndicate,syndicate,false), Span(9,10,List(11),transnational,transnational,false), Span(3,5,List(15, 14, 13, 12),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(0,1,List(16),Recently,recent,false)),Map(2 -> commit-02, 5 -> specialize-01, 12 -> city, 15 -> "Hong", 8 -> syndicate, 7 -> local, 1 -> various, 4 -> exploit-01, 11 -> transnational, 14 -> "Kong", 6 -> gang, 0 -> crime, 9 -> cross-02, 16 -> recent, 3 -> youngster, 10 -> syndicate, 13 -> name),Map(e -> exploit-01, n -> name, s2 -> syndicate, t -> transnational, c4 -> city, s -> specialize-01, v -> various, y -> youngster, g -> gang, c3 -> cross-02, r -> recent, c -> crime, s3 -> syndicate, l -> local, c2 -> commit-02))),[Ljava.lang.String;@24e08d59,Annotation([Ljava.lang.String;@77cb9cd1,[Ljava.lang.String;@971e903,[Ljava.lang.String;@35636217),Annotation([Ljava.lang.String;@1549bba7,[Ljava.lang.String;@3e4f80cb,[Ledu.cmu.lti.nlp.amr.Dependency;@38704ff0),Annotation([Ljava.lang.String;@16ade133,[Ljava.lang.String;@4e61e4c2,[Ljava.lang.String;@c6a6c1d),Annotation([Ljava.lang.String;@36dfbdaf,[Ljava.lang.String;@4f82663e,[Ledu.cmu.lti.nlp.amr.Entity;@e04ccf8))
AMR:
(c / crime, quant, v / various)
(c2 / commit-02, ARG1, c / crime)
(c3 / cross-02, ARG0, s2 / syndicate)
(c3 / cross-02, ARG1, s / specialize-01)
(c4 / city, name, n / name)
(c4 / city, op, e / exploit-01)
(e / exploit-01, ARG1, y / youngster)
(e / exploit-01, purpose, c2 / commit-02)
(g / gang, mod, l / local)
(n / name, op, "Hong")
(n / name, op, "Kong")
(s / specialize-01, ARG0, r / recent)
(s / specialize-01, ARG1, g / gang)
(s / specialize-01, ARG2, e / exploit-01)
(s2 / syndicate, poss, s3 / syndicate)
(s3 / syndicate, mod, t / transnational)

Decoded in 419,503 microseconds
Sentence: The Oriental Daily News opined that the recent Hong Kong police efforts to cut down 5 of the so-called Triad branch leaders or district team leaders within a short 3-week period demonstrates the police's determination to eradicate criminal activities.

NER Entity: (organization :name (name :op "Oriental" :op "Daily" :op "News"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "Triad"))
Spans:
Span 43-44:  activities => activity
Span 22-23:  branch => branch
Span 35-36:  demonstrates => demonstrate-01
Span 39-40:  determination => determine-01
Span 25-26:  district => district
Span 11-12:  efforts => effort
Span 41-42:  eradicate => eradicate-01
Span 8-10:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 27-28:  leaders => (person :ARG0-of lead-02)
Span 23-24:  leaders => (person :ARG0-of lead-02)
Span 24-25:  or => or
Span 1-4:  Oriental Daily News => (organization :name (name :op "Oriental" :op "Daily" :op "News"))
Span 34-35:  period => period
Span 7-8:  recent => recent
Span 26-27:  team => team
Span 28-29:  within => within

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 31-32:  3 => 3
Oracle Span 15-16:  5 => 5
Oracle Span 43-44:  activities => activity
Oracle Span 22-23:  branch => branch
Oracle Span 20-21:  called => (person :ARG1-of call-01)
Oracle Span 42-43:  criminal => crime
Oracle Span 13-14:  cut => cut-03
Oracle Span 35-36:  demonstrates => demonstrate-01
Oracle Span 39-40:  determination => determine-01
Oracle Span 25-26:  district => district
Oracle Span 11-12:  efforts => effort
Oracle Span 41-42:  eradicate => eradicate-01
Oracle Span 8-10:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 23-24:  leaders => (person :ARG0-of lead-02)
Oracle Span 27-28:  leaders => (person :ARG0-of lead-02)
Oracle Span 16-17:  of => (person :ARG1-of include-91)
Oracle Span 4-5:  opined => opine-01
Oracle Span 24-25:  or => or
Oracle Span 1-4:  Oriental Daily News => (newspaper :name (name :op "News" :op "Daily" :op "Oriental"))
Oracle Span 34-35:  period => period
Oracle Span 10-11:  police => police
Oracle Span 7-8:  recent => recent
Oracle Span 30-31:  short => short
Oracle Span 18-19:  so => so
Oracle Span 26-27:  team => team
Oracle Span 21-22:  Triad => (criminal-organization :name (name :op "Triad"))
Oracle Span 33-34:  week => (temporal-quantity :unit week)
Oracle Span 28-29:  within => within

Incorrect span: Oriental Daily News => (organization :name (name :op "Oriental" :op "Daily" :op "News"))
Missing span: Oriental Daily News => (newspaper :name (name :op "News" :op "Daily" :op "Oriental"))
Missing span: Triad => (criminal-organization :name (name :op "Triad"))
Missing span: opined => opine-01
Missing span: cut => cut-03
Missing span: 3 => 3
Missing span: week => (temporal-quantity :unit week)
Missing span: short => short
Missing span: 5 => 5
Missing span: of => (person :ARG1-of include-91)
Missing span: called => (person :ARG1-of call-01)
Missing span: so => so
Missing span: police => police
Missing span: criminal => crime
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Oriental	_	NNP	NNP	_	4	nn	_	_
3	Daily	_	NNP	NNP	_	4	nn	_	_
4	News	_	NNP	NNP	_	5	nsubj	_	_
5	opined	_	VBD	VBD	_	0	root	_	_
6	that	_	IN	IN	_	32	mark	_	_
7	the	_	DT	DT	_	12	det	_	_
8	recent	_	JJ	JJ	_	12	amod	_	_
9	Hong	_	NNP	NNP	_	12	nn	_	_
10	Kong	_	NNP	NNP	_	12	nn	_	_
11	police	_	NN	NN	_	12	nn	_	_
12	efforts	_	NNS	NNS	_	32	nsubj	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	cut	_	VB	VB	_	12	vmod	_	_
15	down	_	RP	RP	_	14	prt	_	_
16	5	_	CD	CD	_	14	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	22	det	_	_
19	so-called	_	JJ	JJ	_	22	amod	_	_
20	Triad	_	NNP	NNP	_	22	nn	_	_
21	branch	_	NN	NN	_	22	nn	_	_
22	leaders	_	NNS	NNS	_	17	pobj	_	_
23	or	_	CC	CC	_	22	cc	_	_
24	district	_	NN	NN	_	26	nn	_	_
25	team	_	NN	NN	_	26	nn	_	_
26	leaders	_	NNS	NNS	_	22	conj	_	_
27	within	_	IN	IN	_	14	prep	_	_
28	a	_	DT	DT	_	31	det	_	_
29	short	_	JJ	JJ	_	31	amod	_	_
30	3-week	_	JJ	JJ	_	31	amod	_	_
31	period	_	NN	NN	_	27	pobj	_	_
32	demonstrates	_	VBZ	VBZ	_	5	ccomp	_	_
33	the	_	DT	DT	_	34	det	_	_
34	police	_	NN	NN	_	36	poss	_	_
35	's	_	POS	POS	_	34	possessive	_	_
36	determination	_	NN	NN	_	32	dobj	_	_
37	to	_	TO	TO	_	38	aux	_	_
38	eradicate	_	VB	VB	_	36	vmod	_	_
39	criminal	_	JJ	JJ	_	40	amod	_	_
40	activities	_	NNS	NNS	_	38	dobj	_	_
41	.	_	.	.	_	5	punct	_	_

Oracle:
(a / activity, mod, c5 / crime)
(b / branch, poss, c3 / criminal-organization)
(c / city, name, n3 / name)
(c2 / cut-03, ARG0, p / police)
(c2 / cut-03, ARG1, p2 / person)
(c2 / cut-03, time, w / within)
(c3 / criminal-organization, name, n4 / name)
(c6 / call-01, ARG1, p6 / person)
(c6 / call-01, ARG2, p7 / person)
(c6 / call-01, mod, s3 / so)
(d / demonstrate-01, ARG0, e / effort)
(d / demonstrate-01, ARG1, d3 / determine-01)
(d3 / determine-01, ARG0, p / police)
(d3 / determine-01, ARG1, e2 / eradicate-01)
(e / effort, poss, p / police)
(e / effort, purpose, c2 / cut-03)
(e / effort, time, r / recent)
(e2 / eradicate-01, ARG0, p / police)
(e2 / eradicate-01, ARG1, a / activity)
(i / include-91, ARG1, p2 / person)
(i / include-91, ARG2, o3 / or)
(l / lead-02, ARG0, p5 / person)
(l / lead-02, ARG1, b / branch)
(l2 / lead-02, ARG0, p7 / person)
(l2 / lead-02, ARG1, t / team)
(n / newspaper, name, n2 / name)
(n2 / name, op, "Daily")
(n2 / name, op, "News")
(n2 / name, op, "Oriental")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(n4 / name, op, "Triad")
(o / opine-01, ARG0, n / newspaper)
(o / opine-01, ARG1, d / demonstrate-01)
(o3 / or, op, p6 / person)
(p / police, mod, c / city)
(p2 / person, quant, 5 / 5)
(p4 / period, duration, t2 / temporal-quantity)
(p4 / period, mod, s2 / short)
(t / team, mod, d2 / district)
(t2 / temporal-quantity, quant, 3 / 3)
(t2 / temporal-quantity, unit, w2 / week)
(w / within, op, p4 / period)

Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),activities,activity,false), Span(41,42,List(1),eradicate,eradicate-01,false), Span(39,40,List(2),determination,determine-01,false), Span(35,36,List(3),demonstrates,demonstrate-01,false), Span(34,35,List(4),period,period,false), Span(28,29,List(5),within,within,false), Span(27,28,List(7, 6),leaders,(person :ARG0-of lead-02),false), Span(26,27,List(8),team,team,false), Span(25,26,List(9),district,district,false), Span(24,25,List(10),or,or,false), Span(23,24,List(12, 11),leaders,(person :ARG0-of lead-02),false), Span(22,23,List(13),branch,branch,false), Span(11,12,List(14),efforts,effort,false), Span(8,10,List(18, 17, 16, 15),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(7,8,List(19),recent,recent,false), Span(1,4,List(24, 23, 22, 21, 20),Oriental Daily News,(organization :name (name :op "Oriental" :op "Daily" :op "News")),false)),Map(2 -> determine-01, 5 -> within, 12 -> lead-02, 8 -> team, 15 -> city, 21 -> name, 18 -> "Hong", 24 -> "News", 7 -> lead-02, 1 -> eradicate-01, 17 -> "Kong", 23 -> "Daily", 4 -> period, 11 -> person, 14 -> effort, 20 -> organization, 6 -> person, 9 -> district, 0 -> activity, 22 -> "Oriental", 16 -> name, 19 -> recent, 10 -> or, 3 -> demonstrate-01, 13 -> branch),Map(e -> eradicate-01, n -> name, w -> within, b -> branch, t -> team, d3 -> district, e2 -> effort, p2 -> person, d -> determine-01, p -> period, a -> activity, o2 -> organization, d2 -> demonstrate-01, l2 -> lead-02, r -> recent, c -> city, l -> lead-02, o -> or, p3 -> person, n2 -> name))),[Ljava.lang.String;@51d143a1,Annotation([Ljava.lang.String;@1a28aef1,[Ljava.lang.String;@4647881c,[Ljava.lang.String;@6e0cff20),Annotation([Ljava.lang.String;@359b650b,[Ljava.lang.String;@6a9b0a6f,[Ledu.cmu.lti.nlp.amr.Dependency;@10667848),Annotation([Ljava.lang.String;@191a709b,[Ljava.lang.String;@77c7ed8e,[Ljava.lang.String;@453d496b),Annotation([Ljava.lang.String;@66bacdbc,[Ljava.lang.String;@2c6ee758,[Ledu.cmu.lti.nlp.amr.Entity;@640dc4c6))
AMR:
(c / city, name, n / name)
(d / determine-01, ARG0, o2 / organization)
(d / determine-01, ARG1, e / eradicate-01)
(d2 / demonstrate-01, ARG0, e2 / effort)
(d2 / demonstrate-01, ARG1, d / determine-01)
(e / eradicate-01, ARG1, a / activity)
(e2 / effort, poss, c / city)
(e2 / effort, time, r / recent)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, t / team)
(l / lead-02, time, w / within)
(l2 / lead-02, ARG0, p3 / person)
(l2 / lead-02, ARG1, b / branch)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Daily")
(n2 / name, op, "News")
(n2 / name, op, "Oriental")
(o / or, op, p2 / person)
(o / or, op, p3 / person)
(o2 / organization, name, n2 / name)
(t / team, mod, d3 / district)
(w / within, op, d2 / demonstrate-01)
(w / within, op, p / period)

Decoded in 1,145,274 microseconds
Sentence: The Hong Kong police recently has been working closely with the Guangdong Public Security Bureau for exchange of intelligence and has carried out a series of raids and operations.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "Guangdong" :op "Public" :op "Security" :op "Bureau"))
Spans:
Span 8-9:  closely => close
Span 16-17:  exchange => exchange-01
Span 11-15:  Guangdong Public Security Bureau => (organization :name (name :op "Guangdong" :op "Public" :op "Security" :op "Bureau"))
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 18-19:  intelligence => intelligence
Span 26-27:  raids => raid-01
Span 4-5:  recently => recent
Span 24-25:  series => series

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 19-20:  and => and
Oracle Span 27-28:  and => and
Oracle Span 21-22:  carried => carry-03
Oracle Span 8-9:  closely => close
Oracle Span 16-17:  exchange => exchange-01
Oracle Span 11-12:  Guangdong => (province :name (name :op "Guangdong"))
Oracle Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 18-19:  intelligence => intelligence
Oracle Span 28-29:  operations => operation
Oracle Span 3-4:  police => police
Oracle Span 12-15:  Public Security Bureau => (organization :name (name :op "Bureau" :op "Security" :op "Public"))
Oracle Span 26-27:  raids => raid
Oracle Span 4-5:  recently => recent
Oracle Span 24-25:  series => series
Oracle Span 7-8:  working => work-01

Incorrect span: raids => raid-01
Extra span: Guangdong Public Security Bureau => (organization :name (name :op "Guangdong" :op "Public" :op "Security" :op "Bureau"))
Missing span: Public Security Bureau => (organization :name (name :op "Bureau" :op "Security" :op "Public"))
Missing span: Guangdong => (province :name (name :op "Guangdong"))
Missing span: and => and
Missing span: carried => carry-03
Missing span: and => and
Missing span: operations => operation
Missing span: raids => raid
Missing span: working => work-01
Missing span: police => police
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Hong	_	NNP	NNP	_	4	nn	_	_
3	Kong	_	NNP	NNP	_	4	nn	_	_
4	police	_	NN	NN	_	8	nsubj	_	_
5	recently	_	RB	RB	_	8	advmod	_	_
6	has	_	VBZ	VBZ	_	8	aux	_	_
7	been	_	VBN	VBN	_	8	aux	_	_
8	working	_	VBG	VBG	_	0	root	_	_
9	closely	_	RB	RB	_	8	advmod	_	_
10	with	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	15	det	_	_
12	Guangdong	_	NNP	NNP	_	15	nn	_	_
13	Public	_	NNP	NNP	_	15	nn	_	_
14	Security	_	NNP	NNP	_	15	nn	_	_
15	Bureau	_	NNP	NNP	_	10	pobj	_	_
16	for	_	IN	IN	_	8	prep	_	_
17	exchange	_	NN	NN	_	16	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	intelligence	_	NN	NN	_	18	pobj	_	_
20	and	_	CC	CC	_	8	cc	_	_
21	has	_	VBZ	VBZ	_	22	aux	_	_
22	carried	_	VBN	VBN	_	8	conj	_	_
23	out	_	IN	IN	_	22	prep	_	_
24	a	_	DT	DT	_	25	det	_	_
25	series	_	NN	NN	_	23	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	raids	_	NNS	NNS	_	26	pobj	_	_
28	and	_	CC	CC	_	27	cc	_	_
29	operations	_	NNS	NNS	_	27	conj	_	_
30	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, c / carry-03)
(a / and, op, w / work-01)
(a2 / and, op, o2 / operation)
(a2 / and, op, r2 / raid)
(c / carry-03, ARG0, p / police)
(c / carry-03, ARG1, a2 / and)
(c2 / city, name, n / name)
(e / exchange-01, ARG1, i / intelligence)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Bureau")
(n2 / name, op, "Public")
(n2 / name, op, "Security")
(n3 / name, op, "Guangdong")
(o / organization, location, p2 / province)
(o / organization, name, n2 / name)
(o / organization, purpose, e / exchange-01)
(p / police, mod, c2 / city)
(p2 / province, name, n3 / name)
(s / series, part, o2 / operation)
(s / series, part, r2 / raid)
(w / work-01, ARG0, p / police)
(w / work-01, ARG3, o / organization)
(w / work-01, manner, c3 / close)
(w / work-01, time, r / recent)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),raids,raid-01,false), Span(24,25,List(1),series,series,false), Span(18,19,List(2),intelligence,intelligence,false), Span(16,17,List(3),exchange,exchange-01,false), Span(11,15,List(9, 8, 7, 6, 5, 4),Guangdong Public Security Bureau,(organization :name (name :op "Guangdong" :op "Public" :op "Security" :op "Bureau")),false), Span(8,9,List(10),closely,close,false), Span(4,5,List(11),recently,recent,false), Span(1,3,List(15, 14, 13, 12),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> intelligence, 5 -> name, 12 -> city, 15 -> "Hong", 8 -> "Security", 7 -> "Public", 1 -> series, 4 -> organization, 11 -> recent, 14 -> "Kong", 6 -> "Guangdong", 0 -> raid-01, 9 -> "Bureau", 3 -> exchange-01, 10 -> close, 13 -> name),Map(n -> name, e -> exchange-01, s -> series, r2 -> recent, i -> intelligence, r -> raid-01, c -> close, o -> organization, n2 -> name, c2 -> city))),[Ljava.lang.String;@4b54af3d,Annotation([Ljava.lang.String;@7bb35cc6,[Ljava.lang.String;@203c20cf,[Ljava.lang.String;@2a1debfa),Annotation([Ljava.lang.String;@44de94c3,[Ljava.lang.String;@256aa5f2,[Ledu.cmu.lti.nlp.amr.Dependency;@6411d3c8),Annotation([Ljava.lang.String;@2116b68b,[Ljava.lang.String;@11de56e6,[Ljava.lang.String;@616b241a),Annotation([Ljava.lang.String;@b8e246c,[Ljava.lang.String;@1f387978,[Ledu.cmu.lti.nlp.amr.Entity;@7cb2651f))
AMR:
(c2 / city, name, n2 / name)
(e / exchange-01, ARG0, s / series)
(e / exchange-01, ARG1, i / intelligence)
(n / name, op, "Bureau")
(n / name, op, "Guangdong")
(n / name, op, "Public")
(n / name, op, "Security")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(o / organization, name, n / name)
(o / organization, topic, e / exchange-01)
(r / raid-01, ARG0, c / close)
(r / raid-01, ARG1, r2 / recent)
(r / raid-01, location, c2 / city)
(r / raid-01, quant, s / series)

Decoded in 158,068 microseconds
Sentence: During 020718-020724 the Hong Kong police cracked down on triad activities, including drug trafficking, illegal arms possession, theft, burglary and robbery, the selling of pirated and obscene recordings, dutiable cigarettes and trafficking in dangerous drugs.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 10-11:  activities => activity
Span 13-14:  drug => drug
Span 3-5:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 18-19:  possession => possess-01
Span 27-28:  selling => sell-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 10-11:  activities => activity
Oracle Span 23-24:  and => and
Oracle Span 30-31:  and => and
Oracle Span 36-37:  and => and
Oracle Span 17-18:  arms => arm
Oracle Span 22-23:  burglary => burgle-01
Oracle Span 35-36:  cigarettes => cigarette
Oracle Span 6-7:  cracked => crack-06
Oracle Span 39-40:  dangerous => dangerous
Oracle Span 13-14:  drug => drug
Oracle Span 40-41:  drugs => drug
Oracle Span 3-5:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 12-13:  including => include-91
Oracle Span 31-32:  obscene => obscene
Oracle Span 29-30:  pirated => pirate-01
Oracle Span 5-6:  police => police
Oracle Span 18-19:  possession => possess-01
Oracle Span 32-33:  recordings => (thing :ARG1-of record-01)
Oracle Span 27-28:  selling => sell-01
Oracle Span 14-15:  trafficking => traffic-00
Oracle Span 37-38:  trafficking => traffic-00
Oracle Span 9-10:  triad => (criminal-organization :name (name :op "Triad"))

Missing span: triad => (criminal-organization :name (name :op "Triad"))
Missing span: cracked => crack-06
Missing span: including => include-91
Missing span: and => and
Missing span: trafficking => traffic-00
Missing span: dangerous => dangerous
Missing span: and => and
Missing span: cigarettes => cigarette
Missing span: and => and
Missing span: obscene => obscene
Missing span: pirated => pirate-01
Missing span: arms => arm
Missing span: trafficking => traffic-00
Missing span: drugs => drug
Missing span: police => police
Missing span: recordings => (thing :ARG1-of record-01)
Missing span: burglary => burgle-01
Dependencies:
1	During	_	IN	IN	_	7	prep	_	_
2	020718-020724	_	CD	CD	_	1	pobj	_	_
3	the	_	DT	DT	_	6	det	_	_
4	Hong	_	NNP	NNP	_	6	nn	_	_
5	Kong	_	NNP	NNP	_	6	nn	_	_
6	police	_	NN	NN	_	7	nsubj	_	_
7	cracked	_	VBD	VBD	_	0	root	_	_
8	down	_	RP	RP	_	7	prt	_	_
9	on	_	IN	IN	_	7	prep	_	_
10	triad	_	JJ	JJ	_	11	amod	_	_
11	activities	_	NNS	NNS	_	9	pobj	_	_
12	,	_	,	,	_	7	punct	_	_
13	including	_	VBG	VBG	_	7	prep	_	_
14	drug	_	NN	NN	_	15	nn	_	_
15	trafficking	_	NN	NN	_	13	pobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	illegal	_	JJ	JJ	_	19	amod	_	_
18	arms	_	NNS	NNS	_	19	nn	_	_
19	possession	_	NN	NN	_	15	appos	_	_
20	,	_	,	,	_	15	punct	_	_
21	theft	_	NN	NN	_	15	appos	_	_
22	,	_	,	,	_	21	punct	_	_
23	burglary	_	NN	NN	_	21	conj	_	_
24	and	_	CC	CC	_	21	cc	_	_
25	robbery	_	NN	NN	_	21	conj	_	_
26	,	_	,	,	_	15	punct	_	_
27	the	_	DT	DT	_	28	det	_	_
28	selling	_	NN	NN	_	15	appos	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	pirated	_	JJ	JJ	_	33	amod	_	_
31	and	_	CC	CC	_	30	cc	_	_
32	obscene	_	JJ	JJ	_	30	conj	_	_
33	recordings	_	NNS	NNS	_	29	pobj	_	_
34	,	_	,	,	_	15	punct	_	_
35	dutiable	_	JJ	JJ	_	36	amod	_	_
36	cigarettes	_	NNS	NNS	_	15	appos	_	_
37	and	_	CC	CC	_	15	cc	_	_
38	trafficking	_	NN	NN	_	15	conj	_	_
39	in	_	IN	IN	_	38	prep	_	_
40	dangerous	_	JJ	JJ	_	41	amod	_	_
41	drugs	_	NNS	NNS	_	39	pobj	_	_
42	.	_	.	.	_	7	punct	_	_

Oracle:
(a / activity, poss, c3 / criminal-organization)
(a2 / and, op, b / burgle-01)
(a2 / and, op, p2 / possess-01)
(a2 / and, op, s / sell-01)
(a2 / and, op, t / traffic-00)
(a2 / and, op, t4 / traffic-00)
(a4 / and, op, a6 / and)
(a4 / and, op, c4 / cigarette)
(a6 / and, op, t5 / thing)
(c / crack-06, ARG0, p / police)
(c / crack-06, ARG1, a / activity)
(c2 / city, name, n / name)
(c3 / criminal-organization, name, n2 / name)
(d5 / drug, mod, d6 / dangerous)
(i / include-91, ARG1, a2 / and)
(i / include-91, ARG2, a / activity)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Triad")
(p / police, mod, c2 / city)
(p2 / possess-01, ARG1, a3 / arm)
(r3 / record-01, ARG1, t5 / thing)
(r3 / record-01, mod, o / obscene)
(s / sell-01, ARG1, a4 / and)
(t / traffic-00, ARG1, d4 / drug)
(t4 / traffic-00, ARG1, d5 / drug)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),selling,sell-01,false), Span(18,19,List(1),possession,possess-01,false), Span(13,14,List(2),drug,drug,false), Span(10,11,List(3),activities,activity,false), Span(3,5,List(7, 6, 5, 4),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> drug, 5 -> name, 7 -> "Hong", 1 -> possess-01, 4 -> city, 6 -> "Kong", 0 -> sell-01, 3 -> activity),Map(n -> name, s -> sell-01, d -> drug, p -> possess-01, a -> activity, c -> city))),[Ljava.lang.String;@4441d567,Annotation([Ljava.lang.String;@3e1624c7,[Ljava.lang.String;@62b969c4,[Ljava.lang.String;@dcc6211),Annotation([Ljava.lang.String;@47ec7422,[Ljava.lang.String;@48535004,[Ledu.cmu.lti.nlp.amr.Dependency;@610df783),Annotation([Ljava.lang.String;@f3fcd59,[Ljava.lang.String;@2b56f5f8,[Ljava.lang.String;@79d743e6),Annotation([Ljava.lang.String;@776802b0,[Ljava.lang.String;@64c4c01,[Ledu.cmu.lti.nlp.amr.Entity;@1aa99005))
AMR:
(c / city, name, n / name)
(n / name, op, "Hong")
(n / name, op, "Kong")
(p / possess-01, ARG0, d / drug)
(p / possess-01, ARG1, a / activity)
(s / sell-01, ARG0, c / city)
(s / sell-01, ARG1, d / drug)

Decoded in 208,890 microseconds
Sentence: On 020724 the police dispatched over 100 staff reportedly stormed a propitiation dance and wine party organized to settle some disputes by 2 triad groups at a disco nightclub in mongkok, Kowloon.

mkDayMonthYear(020724,24,07,2002)
mkDayMonthYear(020724,24,07,02)
NER Entity: (country :name (name :op "Kowloon"))
mkDayMonthYear(020724,24,07,2002)
mkDayMonthYear(020724,24,07,02)
Spans:
Span 1-2:  020724 => (date-entity :day 24 :month 7 :year 02)
Span 6-7:  100 => 100
Span 12-13:  dance => dance-01
Span 4-5:  dispatched => dispatch-01
Span 20-21:  disputes => dispute-01
Span 28-29:  nightclub => night
Span 16-17:  organized => organize-01
Span 8-9:  reportedly => report-01
Span 18-19:  settle => settle-02
Span 19-20:  some => some
Span 7-8:  staff => staff
Span 9-10:  stormed => storm-02

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 1-2:  020724 => (date-entity :day 24 :month 7 :year 2002)
Oracle Span 6-7:  100 => 100
Oracle Span 22-23:  2 => 2
Oracle Span 13-14:  and => and
Oracle Span 12-13:  dance => dance
Oracle Span 27-28:  disco => disco
Oracle Span 4-5:  dispatched => dispatch-01
Oracle Span 20-21:  disputes => dispute-01
Oracle Span 24-25:  groups => group
Oracle Span 32-33:  Kowloon => (city-district :name (name :op "Kowloon"))
Oracle Span 30-31:  mongkok => (city-district :name (name :op "Mongkok"))
Oracle Span 28-29:  nightclub => nightclub
Oracle Span 16-17:  organized => organize-01
Oracle Span 5-6:  over => over
Oracle Span 15-16:  party => party
Oracle Span 3-4:  police => police
Oracle Span 11-12:  propitiation => propitiate-00
Oracle Span 8-9:  reportedly => report-01
Oracle Span 18-19:  settle => settle-02
Oracle Span 19-20:  some => some
Oracle Span 7-8:  staff => staff
Oracle Span 9-10:  stormed => storm-02
Oracle Span 23-24:  triad => (criminal-organization :name (name :op "Triad"))
Oracle Span 14-15:  wine => wine

Incorrect span: nightclub => night
Incorrect span: dance => dance-01
Incorrect span: 020724 => (date-entity :day 24 :month 7 :year 02)
Missing span: triad => (criminal-organization :name (name :op "Triad"))
Missing span: mongkok => (city-district :name (name :op "Mongkok"))
Missing span: Kowloon => (city-district :name (name :op "Kowloon"))
Missing span: 020724 => (date-entity :day 24 :month 7 :year 2002)
Missing span: and => and
Missing span: nightclub => nightclub
Missing span: disco => disco
Missing span: groups => group
Missing span: 2 => 2
Missing span: party => party
Missing span: wine => wine
Missing span: dance => dance
Missing span: over => over
Missing span: police => police
Missing span: propitiation => propitiate-00
Dependencies:
1	On	_	IN	IN	_	5	prep	_	_
2	020724	_	CD	CD	_	1	pobj	_	_
3	the	_	DT	DT	_	4	det	_	_
4	police	_	NN	NN	_	5	nsubj	_	_
5	dispatched	_	VBD	VBD	_	0	root	_	_
6	over	_	RP	RP	_	5	prt	_	_
7	100	_	CD	CD	_	8	num	_	_
8	staff	_	NN	NN	_	10	nsubj	_	_
9	reportedly	_	RB	RB	_	10	advmod	_	_
10	stormed	_	VBD	VBD	_	5	ccomp	_	_
11	a	_	DT	DT	_	13	det	_	_
12	propitiation	_	NN	NN	_	13	nn	_	_
13	dance	_	NN	NN	_	10	dobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	wine	_	NN	NN	_	16	nn	_	_
16	party	_	NN	NN	_	13	conj	_	_
17	organized	_	VBN	VBN	_	13	vmod	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	settle	_	VB	VB	_	17	xcomp	_	_
20	some	_	DT	DT	_	21	det	_	_
21	disputes	_	NNS	NNS	_	19	dobj	_	_
22	by	_	IN	IN	_	19	prep	_	_
23	2	_	CD	CD	_	25	num	_	_
24	triad	_	JJ	JJ	_	25	amod	_	_
25	groups	_	NNS	NNS	_	22	pobj	_	_
26	at	_	IN	IN	_	25	prep	_	_
27	a	_	DT	DT	_	29	det	_	_
28	disco	_	NN	NN	_	29	nn	_	_
29	nightclub	_	NN	NN	_	26	pobj	_	_
30	in	_	IN	IN	_	29	prep	_	_
31	mongkok	_	NN	NN	_	30	pobj	_	_
32	,	_	,	,	_	31	punct	_	_
33	Kowloon	_	NNP	NNP	_	31	appos	_	_
34	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, d3 / dance)
(a / and, op, p2 / party)
(c / criminal-organization, name, n / name)
(c2 / city-district, location, c3 / city-district)
(c2 / city-district, name, n3 / name)
(c3 / city-district, name, n4 / name)
(d / dispatch-01, ARG0, p / police)
(d / dispatch-01, ARG1, s / staff)
(d / dispatch-01, purpose, s2 / storm-02)
(d / dispatch-01, time, d2 / date-entity)
(d2 / date-entity, day, 24)
(d2 / date-entity, month, 7)
(d2 / date-entity, year, 2002)
(d4 / dispute-01, ARG0, g / group)
(d4 / dispute-01, quant, s4 / some)
(g / group, poss, c / criminal-organization)
(g / group, quant, 2 / 2)
(n / name, op, "Triad")
(n2 / nightclub, location, c2 / city-district)
(n2 / nightclub, mod, d5 / disco)
(n3 / name, op, "Mongkok")
(n4 / name, op, "Kowloon")
(o / over, op, 1 / 100)
(o2 / organize-01, ARG1, a / and)
(o2 / organize-01, location, n2 / nightclub)
(o2 / organize-01, purpose, s3 / settle-02)
(p2 / party, mod, w / wine)
(p3 / propitiate-00, ARG0, d3 / dance)
(r / report-01, ARG1, d / dispatch-01)
(s / staff, quant, o / over)
(s2 / storm-02, ARG0, s / staff)
(s2 / storm-02, ARG1, a / and)
(s3 / settle-02, ARG1, d4 / dispute-01)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),nightclub,night,false), Span(20,21,List(1),disputes,dispute-01,false), Span(19,20,List(2),some,some,false), Span(18,19,List(3),settle,settle-02,false), Span(16,17,List(4),organized,organize-01,false), Span(12,13,List(5),dance,dance-01,false), Span(9,10,List(6),stormed,storm-02,false), Span(8,9,List(7),reportedly,report-01,false), Span(7,8,List(8),staff,staff,false), Span(6,7,List(9),100,100,false), Span(4,5,List(10),dispatched,dispatch-01,false), Span(1,2,List(14, 13, 12, 11),020724,(date-entity :day 24 :month 7 :year 02),false)),Map(2 -> some, 5 -> dance-01, 12 -> 24, 8 -> staff, 7 -> report-01, 1 -> dispute-01, 4 -> organize-01, 11 -> date-entity, 14 -> 02, 6 -> storm-02, 0 -> night, 9 -> 100, 3 -> settle-02, 10 -> dispatch-01, 13 -> 7),Map(n -> night, 2 -> 24, s2 -> settle-02, d3 -> dispatch-01, s -> some, s4 -> staff, 7 -> 7, d -> dispute-01, 1 -> 100, d2 -> dance-01, r -> report-01, s3 -> storm-02, 0 -> 02, d4 -> date-entity, o -> organize-01))),[Ljava.lang.String;@592238c5,Annotation([Ljava.lang.String;@6ee8dcd3,[Ljava.lang.String;@a20b94b,[Ljava.lang.String;@5cdf39b2),Annotation([Ljava.lang.String;@14f3c6fc,[Ljava.lang.String;@3cd59ef5,[Ledu.cmu.lti.nlp.amr.Dependency;@33b082c5),Annotation([Ljava.lang.String;@16073fa8,[Ljava.lang.String;@1cc9cfb2,[Ljava.lang.String;@cfbc8e8),Annotation([Ljava.lang.String;@3bead518,[Ljava.lang.String;@14bf57b2,[Ledu.cmu.lti.nlp.amr.Entity;@46d9aec8))
AMR:
(d / dispute-01, ARG1, 1 / 100)
(d / dispute-01, ARG2, n / night)
(d / dispute-01, mod, s / some)
(d3 / dispatch-01, ARG1, s3 / storm-02)
(d3 / dispatch-01, time, d4 / date-entity)
(d4 / date-entity, day, 2 / 24)
(d4 / date-entity, month, 7 / 7)
(d4 / date-entity, year, 0 / 02)
(o / organize-01, ARG1, s2 / settle-02)
(r / report-01, ARG1, s3 / storm-02)
(s2 / settle-02, ARG1, d / dispute-01)
(s3 / storm-02, ARG0, s4 / staff)
(s3 / storm-02, ARG1, d2 / dance-01)
(s3 / storm-02, ARG2, o / organize-01)

Decoded in 284,891 microseconds
Sentence: The police eventually arrested 3 branch leaders and 14 core Triad members.

NER Entity: (organization :name (name :op "Triad"))
Spans:
Span 3-4:  arrested => arrest-01
Span 5-6:  branch => branch
Span 9-10:  core => core
Span 2-3:  eventually => eventual
Span 6-7:  leaders => (person :ARG0-of lead-02)
Span 11-12:  members => (have-org-role-91 :ARG2 member)

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 8-9:  14 => 14
Oracle Span 4-5:  3 => 3
Oracle Span 7-8:  and => and
Oracle Span 3-4:  arrested => arrest-01
Oracle Span 5-6:  branch => branch
Oracle Span 9-10:  core => core
Oracle Span 2-3:  eventually => eventual
Oracle Span 6-7:  leaders => (person :ARG0-of lead-02)
Oracle Span 11-12:  members => (have-org-role-91 :ARG2 member)
Oracle Span 1-2:  police => police
Oracle Span 10-11:  Triad => (criminal-organization :name (name :op "Triad"))

Missing span: Triad => (criminal-organization :name (name :op "Triad"))
Missing span: and => and
Missing span: 14 => 14
Missing span: 3 => 3
Missing span: police => police
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	police	_	NN	NN	_	4	nsubj	_	_
3	eventually	_	RB	RB	_	4	advmod	_	_
4	arrested	_	VBN	VBN	_	0	root	_	_
5	3	_	CD	CD	_	7	num	_	_
6	branch	_	NN	NN	_	7	nn	_	_
7	leaders	_	NNS	NNS	_	4	dobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	14	_	CD	CD	_	12	num	_	_
10	core	_	JJ	JJ	_	12	amod	_	_
11	Triad	_	NNP	NNP	_	12	nn	_	_
12	members	_	NNS	NNS	_	7	conj	_	_
13	.	_	.	.	_	4	punct	_	_

Oracle:
(a / arrest-01, ARG0, p / police)
(a / arrest-01, ARG1, a2 / and)
(a / arrest-01, manner, e / eventual)
(a2 / and, op, p2 / person)
(c / criminal-organization, name, n / name)
(h2 / have-org-role-91, ARG1, c / criminal-organization)
(h2 / have-org-role-91, ARG2, m / member)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, b / branch)
(m / member, mod, c2 / core)
(n / name, op, "Triad")
(p2 / person, quant, 3 / 3)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),members,(have-org-role-91 :ARG2 member),false), Span(9,10,List(2),core,core,false), Span(6,7,List(4, 3),leaders,(person :ARG0-of lead-02),false), Span(5,6,List(5),branch,branch,false), Span(3,4,List(6),arrested,arrest-01,false), Span(2,3,List(7),eventually,eventual,false)),Map(2 -> core, 5 -> branch, 7 -> eventual, 1 -> member, 4 -> lead-02, 6 -> arrest-01, 0 -> have-org-role-91, 3 -> person),Map(e -> eventual, h -> have-org-role-91, b -> branch, m -> member, p -> person, a -> arrest-01, l -> lead-02, c -> core))),[Ljava.lang.String;@14379273,Annotation([Ljava.lang.String;@7918c7f8,[Ljava.lang.String;@17740dae,[Ljava.lang.String;@1c504e66),Annotation([Ljava.lang.String;@345cf395,[Ljava.lang.String;@bc4d5e1,[Ledu.cmu.lti.nlp.amr.Dependency;@3c6aa04a),Annotation([Ljava.lang.String;@2257fadf,[Ljava.lang.String;@7144655b,[Ljava.lang.String;@5c82cd4f),Annotation([Ljava.lang.String;@35835e65,[Ljava.lang.String;@289fdb08,[Ledu.cmu.lti.nlp.amr.Entity;@7a231dfd))
AMR:
(a / arrest-01, ARG0, c / core)
(a / arrest-01, ARG1, p / person)
(a / arrest-01, time, e / eventual)
(h / have-org-role-91, ARG1, e / eventual)
(h / have-org-role-91, ARG2, m / member)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, b / branch)

Decoded in 91,834 microseconds
Sentence: Police sources confirmed to the Xinhua New Agency on 020725 that all 17 arrested are still being detailed for questioning.

NER Entity: (organization :name (name :op "Xinhua" :op "New" :op "Agency"))
mkDayMonthYear(020725,25,07,2002)
mkDayMonthYear(020725,25,07,02)
mkDayMonthYear(020725,25,07,2002)
mkDayMonthYear(020725,25,07,02)
Spans:
Span 9-10:  020725 => (date-entity :day 25 :month 7 :year 02)
Span 11-12:  all => all
Span 13-14:  arrested => arrest-01
Span 2-3:  confirmed => confirm-01
Span 17-18:  detailed => detail-01
Span 1-2:  sources => source
Span 15-16:  still => still
Span 5-8:  Xinhua New Agency => (organization :name (name :op "Xinhua" :op "New" :op "Agency"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 9-10:  020725 => (date-entity :day 25 :month 7 :year 2002)
Oracle Span 12-13:  17 => 17
Oracle Span 7-8:  Agency => "Agency"
Oracle Span 11-12:  all => all
Oracle Span 13-14:  arrested => (person :ARG1-of arrest-01)
Oracle Span 2-3:  confirmed => confirm-01
Oracle Span 17-18:  detailed => detain-01
Oracle Span 0-1:  Police => police
Oracle Span 19-20:  questioning => question-01
Oracle Span 1-2:  sources => source
Oracle Span 15-16:  still => still
Oracle Span 5-6:  Xinhua => "Xinhua"

Incorrect span: detailed => detail-01
Incorrect span: arrested => arrest-01
Incorrect span: 020725 => (date-entity :day 25 :month 7 :year 02)
Extra span: Xinhua New Agency => (organization :name (name :op "Xinhua" :op "New" :op "Agency"))
Missing span: 020725 => (date-entity :day 25 :month 7 :year 2002)
Missing span: Xinhua => "Xinhua"
Missing span: Agency => "Agency"
Missing span: 17 => 17
Missing span: arrested => (person :ARG1-of arrest-01)
Missing span: questioning => question-01
Missing span: Police => police
Missing span: detailed => detain-01
Dependencies:
1	Police	_	NNP	NNP	_	2	nn	_	_
2	sources	_	NNS	NNS	_	3	nsubj	_	_
3	confirmed	_	VBD	VBD	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	the	_	DT	DT	_	8	det	_	_
6	Xinhua	_	NNP	NNP	_	8	nn	_	_
7	New	_	NNP	NNP	_	8	nn	_	_
8	Agency	_	NNP	NNP	_	4	pobj	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	020725	_	CD	CD	_	9	pobj	_	_
11	that	_	IN	IN	_	18	mark	_	_
12	all	_	DT	DT	_	14	det	_	_
13	17	_	CD	CD	_	14	num	_	_
14	arrested	_	NNS	NNS	_	18	nsubjpass	_	_
15	are	_	VBP	VBP	_	18	aux	_	_
16	still	_	RB	RB	_	18	advmod	_	_
17	being	_	VBG	VBG	_	18	auxpass	_	_
18	detailed	_	VBN	VBN	_	3	ccomp	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	questioning	_	VBG	VBG	_	19	pcomp	_	_
21	.	_	.	.	_	3	punct	_	_

Oracle:
(a2 / arrest-01, ARG1, p2 / person)
(c / confirm-01, ARG0, s / source)
(c / confirm-01, ARG1, d2 / detain-01)
(c / confirm-01, time, d / date-entity)
(d / date-entity, day, 25)
(d / date-entity, month, 7)
(d / date-entity, year, 2002)
(d2 / detain-01, ARG1, p2 / person)
(d2 / detain-01, ARG2, q / question-01)
(d2 / detain-01, time, s2 / still)
(p2 / person, mod, a / all)
(p2 / person, quant, 1 / 17)
(s / source, mod, p / police)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),detailed,detail-01,false), Span(15,16,List(1),still,still,false), Span(13,14,List(2),arrested,arrest-01,false), Span(11,12,List(3),all,all,false), Span(9,10,List(7, 6, 5, 4),020725,(date-entity :day 25 :month 7 :year 02),false), Span(5,8,List(12, 11, 10, 9, 8),Xinhua New Agency,(organization :name (name :op "Xinhua" :op "New" :op "Agency")),false), Span(2,3,List(13),confirmed,confirm-01,false), Span(1,2,List(14),sources,source,false)),Map(2 -> arrest-01, 5 -> 25, 12 -> "Agency", 8 -> organization, 7 -> 02, 1 -> still, 4 -> date-entity, 11 -> "New", 14 -> source, 6 -> 7, 0 -> detail-01, 9 -> name, 3 -> all, 10 -> "Xinhua", 13 -> confirm-01),Map(n -> name, 2 -> 25, s2 -> source, s -> still, 7 -> 7, d -> detail-01, a -> arrest-01, d2 -> date-entity, a2 -> all, c -> confirm-01, o -> organization, 0 -> 02))),[Ljava.lang.String;@30814f43,Annotation([Ljava.lang.String;@1fde4f40,[Ljava.lang.String;@49cf9028,[Ljava.lang.String;@2b61a019),Annotation([Ljava.lang.String;@11a00961,[Ljava.lang.String;@7ce9e05a,[Ledu.cmu.lti.nlp.amr.Dependency;@4992613f),Annotation([Ljava.lang.String;@6fd5717c,[Ljava.lang.String;@7e2f86e6,[Ljava.lang.String;@4d774249),Annotation([Ljava.lang.String;@17b64941,[Ljava.lang.String;@53ac845a,[Ledu.cmu.lti.nlp.amr.Entity;@5136207f))
AMR:
(a / arrest-01, ARG1, a2 / all)
(c / confirm-01, ARG0, s2 / source)
(c / confirm-01, ARG1, d / detail-01)
(c / confirm-01, ARG2, o / organization)
(c / confirm-01, time, d2 / date-entity)
(d / detail-01, ARG1, a / arrest-01)
(d / detail-01, mod, s / still)
(d2 / date-entity, day, 2 / 25)
(d2 / date-entity, month, 7 / 7)
(d2 / date-entity, year, 0 / 02)
(n / name, op, "Agency")
(n / name, op, "New")
(n / name, op, "Xinhua")
(o / organization, name, n / name)

Decoded in 195,656 microseconds
Sentence: Hong Kong police sources were quoted as saying that the success of the operation in netting all 17 was the result of the police's effort to infiltrate into the relevant gangs here.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 16-17:  all => all
Span 25-26:  effort => effort
Span 31-32:  gangs => gang
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 27-28:  infiltrate => infiltrate-01
Span 13-14:  operation => operation
Span 5-6:  quoted => quote-01
Span 30-31:  relevant => relevant-41
Span 20-21:  result => result-01
Span 7-8:  saying => say-01
Span 3-4:  sources => source
Span 10-11:  success => succeed-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 17-18:  17 => 17
Oracle Span 16-17:  all => all
Oracle Span 25-26:  effort => effort
Oracle Span 31-32:  gangs => gang
Oracle Span 32-33:  here => here
Oracle Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 27-28:  infiltrate => infiltrate-01
Oracle Span 15-16:  netting => net-03
Oracle Span 13-14:  operation => operation
Oracle Span 2-3:  police => police
Oracle Span 5-6:  quoted => quote-01
Oracle Span 30-31:  relevant => relevance
Oracle Span 20-21:  result => result-01
Oracle Span 7-8:  saying => say-01
Oracle Span 3-4:  sources => source
Oracle Span 10-11:  success => succeed-01

Incorrect span: relevant => relevant-41
Missing span: netting => net-03
Missing span: 17 => 17
Missing span: here => here
Missing span: police => police
Missing span: relevant => relevance
Dependencies:
1	Hong	_	NNP	NNP	_	4	nn	_	_
2	Kong	_	NNP	NNP	_	4	nn	_	_
3	police	_	NN	NN	_	4	nn	_	_
4	sources	_	NNS	NNS	_	6	nsubjpass	_	_
5	were	_	VBD	VBD	_	6	auxpass	_	_
6	quoted	_	VBN	VBN	_	0	root	_	_
7	as	_	IN	IN	_	6	prep	_	_
8	saying	_	VBG	VBG	_	7	pcomp	_	_
9	that	_	IN	IN	_	21	mark	_	_
10	the	_	DT	DT	_	11	det	_	_
11	success	_	NN	NN	_	21	nsubj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	operation	_	NN	NN	_	12	pobj	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	netting	_	VBG	VBG	_	15	pcomp	_	_
17	all	_	DT	DT	_	18	det	_	_
18	17	_	CD	CD	_	16	dobj	_	_
19	was	_	VBD	VBD	_	21	cop	_	_
20	the	_	DT	DT	_	21	det	_	_
21	result	_	NN	NN	_	8	ccomp	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	24	det	_	_
24	police	_	NN	NN	_	26	poss	_	_
25	's	_	POS	POS	_	24	possessive	_	_
26	effort	_	NN	NN	_	22	pobj	_	_
27	to	_	TO	TO	_	28	aux	_	_
28	infiltrate	_	VB	VB	_	26	vmod	_	_
29	into	_	IN	IN	_	28	prep	_	_
30	the	_	DT	DT	_	32	det	_	_
31	relevant	_	JJ	JJ	_	32	amod	_	_
32	gangs	_	NNS	NNS	_	29	pobj	_	_
33	here	_	RB	RB	_	28	advmod	_	_
34	.	_	.	.	_	6	punct	_	_

Oracle:
(c / city, name, n / name)
(e / effort, poss, p / police)
(e / effort, purpose, i / infiltrate-01)
(g / gang, location, h / here)
(g / gang, mod, r2 / relevance)
(i / infiltrate-01, ARG1, g / gang)
(n / name, op, "Hong")
(n / name, op, "Kong")
(p / police, mod, c / city)
(q / quote-01, ARG1, s / source)
(q / quote-01, ARG2, s2 / say-01)
(r / result-01, ARG1, e / effort)
(r / result-01, ARG2, s3 / succeed-01)
(s / source, mod, p / police)
(s2 / say-01, ARG1, s3 / succeed-01)
(s3 / succeed-01, ARG0, o / operation)
(s3 / succeed-01, ARG1, n2 / net-03)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),gangs,gang,false), Span(30,31,List(1),relevant,relevant-41,false), Span(27,28,List(2),infiltrate,infiltrate-01,false), Span(25,26,List(3),effort,effort,false), Span(20,21,List(4),result,result-01,false), Span(16,17,List(5),all,all,false), Span(13,14,List(6),operation,operation,false), Span(10,11,List(7),success,succeed-01,false), Span(7,8,List(8),saying,say-01,false), Span(5,6,List(9),quoted,quote-01,false), Span(3,4,List(10),sources,source,false), Span(0,2,List(14, 13, 12, 11),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> infiltrate-01, 5 -> all, 12 -> name, 8 -> say-01, 7 -> succeed-01, 1 -> relevant-41, 4 -> result-01, 11 -> city, 14 -> "Hong", 6 -> operation, 0 -> gang, 9 -> quote-01, 3 -> effort, 10 -> source, 13 -> "Kong"),Map(e -> effort, n -> name, q -> quote-01, s2 -> say-01, s -> succeed-01, g -> gang, r2 -> result-01, a -> all, r -> relevant-41, i -> infiltrate-01, s3 -> source, c -> city, o -> operation))),[Ljava.lang.String;@26a4551a,Annotation([Ljava.lang.String;@3fdecce,[Ljava.lang.String;@344426bf,[Ljava.lang.String;@5411dd90),Annotation([Ljava.lang.String;@50194e8d,[Ljava.lang.String;@3cee53dc,[Ledu.cmu.lti.nlp.amr.Dependency;@290aeb20),Annotation([Ljava.lang.String;@73ad4ecc,[Ljava.lang.String;@69da0b12,[Ljava.lang.String;@2764c546),Annotation([Ljava.lang.String;@59496961,[Ljava.lang.String;@408b87aa,[Ledu.cmu.lti.nlp.amr.Entity;@79b08632))
AMR:
(c / city, name, n / name)
(e / effort, purpose, i / infiltrate-01)
(i / infiltrate-01, ARG0, g / gang)
(i / infiltrate-01, ARG1, a / all)
(n / name, op, "Hong")
(n / name, op, "Kong")
(q / quote-01, ARG1, s3 / source)
(q / quote-01, ARG2, s2 / say-01)
(r / relevant-41, ARG1, g / gang)
(r2 / result-01, ARG1, e / effort)
(s / succeed-01, ARG1, o / operation)
(s / succeed-01, ARG2, r2 / result-01)
(s2 / say-01, ARG1, r2 / result-01)
(s3 / source, mod, c / city)

Decoded in 493,111 microseconds
Sentence: Police sources also intimated that more crackdowns by the Hong Kong Police on other Triad gangs will follow.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "Triad"))
Spans:
Span 6-7:  crackdowns => crack-06
Span 15-16:  gangs => gang
Span 9-11:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 3-4:  intimated => intimate-01
Span 13-14:  other => other
Span 1-2:  sources => source

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  also => also
Oracle Span 6-7:  crackdowns => crack-06
Oracle Span 17-18:  follow => follow-01
Oracle Span 15-16:  gangs => gang
Oracle Span 9-11:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 3-4:  intimated => intimate-01
Oracle Span 5-6:  more => more
Oracle Span 13-14:  other => other
Oracle Span 0-1:  Police => police
Oracle Span 11-12:  Police => police
Oracle Span 1-2:  sources => source
Oracle Span 14-15:  Triad => (criminal-organization :name (name :op "Triad"))

Missing span: Triad => (criminal-organization :name (name :op "Triad"))
Missing span: also => also
Missing span: follow => follow-01
Missing span: Police => police
Missing span: more => more
Missing span: Police => police
Dependencies:
1	Police	_	NNP	NNP	_	2	nn	_	_
2	sources	_	NNS	NNS	_	4	nsubj	_	_
3	also	_	RB	RB	_	4	advmod	_	_
4	intimated	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	18	mark	_	_
6	more	_	JJR	JJR	_	7	amod	_	_
7	crackdowns	_	NNS	NNS	_	18	nsubj	_	_
8	by	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	12	det	_	_
10	Hong	_	NNP	NNP	_	12	nn	_	_
11	Kong	_	NNP	NNP	_	12	nn	_	_
12	Police	_	NNP	NNP	_	8	pobj	_	_
13	on	_	IN	IN	_	12	prep	_	_
14	other	_	JJ	JJ	_	16	amod	_	_
15	Triad	_	NNP	NNP	_	16	nn	_	_
16	gangs	_	NNS	NNS	_	13	pobj	_	_
17	will	_	MD	MD	_	18	aux	_	_
18	follow	_	VB	VB	_	4	ccomp	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(c / crack-06, ARG0, p2 / police)
(c / crack-06, ARG1, g / gang)
(c / crack-06, degree, m / more)
(c2 / city, name, n / name)
(c3 / criminal-organization, name, n2 / name)
(f / follow-01, ARG1, c / crack-06)
(g / gang, mod, o / other)
(g / gang, poss, c3 / criminal-organization)
(i / intimate-01, ARG0, s / source)
(i / intimate-01, ARG1, f / follow-01)
(i / intimate-01, mod, a / also)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Triad")
(p2 / police, mod, c2 / city)
(s / source, mod, p / police)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),gangs,gang,false), Span(13,14,List(1),other,other,false), Span(9,11,List(5, 4, 3, 2),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(6,7,List(6),crackdowns,crack-06,false), Span(3,4,List(7),intimated,intimate-01,false), Span(1,2,List(8),sources,source,false)),Map(2 -> city, 5 -> "Hong", 8 -> source, 7 -> intimate-01, 1 -> other, 4 -> "Kong", 6 -> crack-06, 0 -> gang, 3 -> name),Map(n -> name, s -> source, g -> gang, i -> intimate-01, c -> city, o -> other, c2 -> crack-06))),[Ljava.lang.String;@787f32b7,Annotation([Ljava.lang.String;@6aef4eb8,[Ljava.lang.String;@76c52298,[Ljava.lang.String;@bb9ab64),Annotation([Ljava.lang.String;@a52ca2e,[Ljava.lang.String;@1ad8df52,[Ledu.cmu.lti.nlp.amr.Dependency;@45d6ef73),Annotation([Ljava.lang.String;@3f29e26,[Ljava.lang.String;@1f6d27cc,[Ljava.lang.String;@4393593c),Annotation([Ljava.lang.String;@314c8b4a,[Ljava.lang.String;@26d820eb,[Ledu.cmu.lti.nlp.amr.Entity;@507d20bb))
AMR:
(c / city, name, n / name)
(c2 / crack-06, location, c / city)
(g / gang, mod, o / other)
(i / intimate-01, ARG0, s / source)
(i / intimate-01, ARG1, o / other)
(i / intimate-01, ARG2, c2 / crack-06)
(n / name, op, "Hong")
(n / name, op, "Kong")

Decoded in 61,087 microseconds
Sentence: The Hong Kong police's effort in fighting organized criminals involves actively cooperating with police on the Chinese mainland and in other regions.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 11-12:  actively => active
Span 12-13:  cooperating => cooperate-01
Span 9-10:  criminals => criminal
Span 5-6:  effort => effort
Span 7-8:  fighting => fight-01
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 10-11:  involves => involve-01
Span 18-19:  mainland => mainland
Span 8-9:  organized => organize-01
Span 21-22:  other => other
Span 22-23:  regions => region

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 11-12:  actively => active
Oracle Span 19-20:  and => and
Oracle Span 17-18:  Chinese => (country :name (name :op "China"))
Oracle Span 12-13:  cooperating => cooperate-01
Oracle Span 9-10:  criminals => criminal
Oracle Span 5-6:  effort => effort
Oracle Span 7-8:  fighting => fight-02
Oracle Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 10-11:  involves => involve-01
Oracle Span 18-19:  mainland => mainland
Oracle Span 8-9:  organized => organize-01
Oracle Span 21-22:  other => other
Oracle Span 3-4:  police => police
Oracle Span 14-15:  police => police
Oracle Span 22-23:  regions => region

Incorrect span: fighting => fight-01
Missing span: Chinese => (country :name (name :op "China"))
Missing span: fighting => fight-02
Missing span: police => police
Missing span: and => and
Missing span: police => police
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Hong	_	NNP	NNP	_	4	nn	_	_
3	Kong	_	NNP	NNP	_	4	nn	_	_
4	police	_	NN	NN	_	6	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	effort	_	NN	NN	_	11	nsubj	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	fighting	_	VBG	VBG	_	7	pcomp	_	_
9	organized	_	VBN	VBN	_	10	amod	_	_
10	criminals	_	NNS	NNS	_	8	dobj	_	_
11	involves	_	VBZ	VBZ	_	0	root	_	_
12	actively	_	RB	RB	_	13	advmod	_	_
13	cooperating	_	VBG	VBG	_	11	xcomp	_	_
14	with	_	IN	IN	_	13	prep	_	_
15	police	_	NNS	NNS	_	14	pobj	_	_
16	on	_	IN	IN	_	15	prep	_	_
17	the	_	DT	DT	_	19	det	_	_
18	Chinese	_	JJ	JJ	_	19	amod	_	_
19	mainland	_	NN	NN	_	16	pobj	_	_
20	and	_	CC	CC	_	14	cc	_	_
21	in	_	IN	IN	_	14	conj	_	_
22	other	_	JJ	JJ	_	23	amod	_	_
23	regions	_	NNS	NNS	_	21	pobj	_	_
24	.	_	.	.	_	11	punct	_	_

Oracle:
(a / and, op, p3 / police)
(c / city, name, n / name)
(c3 / cooperate-01, ARG0, p / police)
(c3 / cooperate-01, ARG1, a / and)
(c3 / cooperate-01, manner, a2 / active)
(c4 / country, name, n2 / name)
(e / effort, poss, p / police)
(e / effort, purpose, f / fight-02)
(f / fight-02, ARG0, p / police)
(f / fight-02, ARG1, c2 / criminal)
(i / involve-01, ARG1, c3 / cooperate-01)
(i / involve-01, ARG2, e / effort)
(m / mainland, mod, c4 / country)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "China")
(o / organize-01, ARG1, c2 / criminal)
(p / police, mod, c / city)
(p3 / police, location, r / region)
(r / region, mod, o2 / other)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),regions,region,false), Span(21,22,List(1),other,other,false), Span(18,19,List(2),mainland,mainland,false), Span(12,13,List(3),cooperating,cooperate-01,false), Span(11,12,List(4),actively,active,false), Span(10,11,List(5),involves,involve-01,false), Span(9,10,List(6),criminals,criminal,false), Span(8,9,List(7),organized,organize-01,false), Span(7,8,List(8),fighting,fight-01,false), Span(5,6,List(9),effort,effort,false), Span(1,3,List(13, 12, 11, 10),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> mainland, 5 -> involve-01, 12 -> "Kong", 8 -> fight-01, 7 -> organize-01, 1 -> other, 4 -> active, 11 -> name, 6 -> criminal, 0 -> region, 9 -> effort, 3 -> cooperate-01, 10 -> city, 13 -> "Hong"),Map(n -> name, e -> effort, m -> mainland, c3 -> city, a -> active, o2 -> organize-01, i -> involve-01, r -> region, c -> cooperate-01, f -> fight-01, o -> other, c2 -> criminal))),[Ljava.lang.String;@9fec931,Annotation([Ljava.lang.String;@5cbd159f,[Ljava.lang.String;@3b05a99b,[Ljava.lang.String;@2c43eb8),Annotation([Ljava.lang.String;@7d0cc890,[Ljava.lang.String;@49293b43,[Ledu.cmu.lti.nlp.amr.Dependency;@5ff60a8c),Annotation([Ljava.lang.String;@7ce4de34,[Ljava.lang.String;@67b7c170,[Ljava.lang.String;@67440de6),Annotation([Ljava.lang.String;@889d9e8,[Ljava.lang.String;@5246a3b3,[Ledu.cmu.lti.nlp.amr.Entity;@ba354ca))
AMR:
(c / cooperate-01, ARG0, e / effort)
(c / cooperate-01, ARG1, c3 / city)
(c / cooperate-01, mod, a / active)
(c3 / city, name, n / name)
(f / fight-01, ARG0, e / effort)
(f / fight-01, ARG1, c2 / criminal)
(i / involve-01, ARG0, r / region)
(i / involve-01, ARG1, c / cooperate-01)
(n / name, op, "Hong")
(n / name, op, "Kong")
(o2 / organize-01, ARG0, m / mainland)
(o2 / organize-01, ARG1, c2 / criminal)
(r / region, mod, o / other)

Decoded in 275,743 microseconds
Sentence: The first so-called targeting Conference of the International Drug Enforcement Conference (IDEC) far east region was held in Hong Kong earlier in 020700.

NER Entity: (thing :name (name :op "Conference" :op "of" :op "the"))
NER Entity: (organization :name (name :op "International" :op "Drug" :op "Enforcement" :op "Conference"))
NER Entity: (organization :name (name :op "IDEC"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
mkDayMonthYear(020700,00,07,02)
mkDayMonthYear(020700,00,07,02)
Spans:
Span 26-27:  020700 => (date-entity :day 0 :month 7 :year 02)
Span 4-7:  called targeting Conference => (thing :name (name :op "Conference" :op "of" :op "the"))
Span 24-25:  earlier => early
Span 20-22:  held in => (country :name (name :op "Hong" :op "Kong"))
Span 22-24:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 7-11:  of the International Drug => (organization :name (name :op "International" :op "Drug" :op "Enforcement" :op "Conference"))
Span 18-19:  region => region

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 26-27:  020700 => (date-entity :month 7 :year 2002)
Oracle Span 4-5:  called => call-01
Oracle Span 6-7:  Conference => conference
Oracle Span 24-25:  earlier => early
Oracle Span 16-18:  far east => (world-region :name (name :op "East" :op "Far"))
Oracle Span 20-21:  held => hold-04
Oracle Span 22-24:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 9-13:  International Drug Enforcement Conference => (conference :name (name :op "Conference" :op "Enforcement" :op "Drug" :op "International"))
Oracle Span 2-3:  so => so
Oracle Span 5-6:  targeting => target-01

Incorrect span: 020700 => (date-entity :day 0 :month 7 :year 02)
Extra span: held in => (country :name (name :op "Hong" :op "Kong"))
Extra span: region => region
Extra span: of the International Drug => (organization :name (name :op "International" :op "Drug" :op "Enforcement" :op "Conference"))
Extra span: called targeting Conference => (thing :name (name :op "Conference" :op "of" :op "the"))
Missing span: International Drug Enforcement Conference => (conference :name (name :op "Conference" :op "Enforcement" :op "Drug" :op "International"))
Missing span: far east => (world-region :name (name :op "East" :op "Far"))
Missing span: 020700 => (date-entity :month 7 :year 2002)
Missing span: held => hold-04
Missing span: Conference => conference
Missing span: called => call-01
Missing span: so => so
Missing span: targeting => target-01
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	first	_	JJ	JJ	_	5	amod	_	_
3	so-called	_	JJ	JJ	_	5	amod	_	_
4	targeting	_	VBG	VBG	_	5	amod	_	_
5	Conference	_	NN	NN	_	19	nsubjpass	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	11	det	_	_
8	International	_	NNP	NNP	_	11	nn	_	_
9	Drug	_	NNP	NNP	_	11	nn	_	_
10	Enforcement	_	NNP	NNP	_	11	nn	_	_
11	Conference	_	NNP	NNP	_	6	pobj	_	_
12	(	_	(	(	_	13	punct	_	_
13	IDEC	_	NNP	NNP	_	19	dep	_	_
14	)	_	)	)	_	13	punct	_	_
15	far	_	RB	RB	_	16	advmod	_	_
16	east	_	JJ	JJ	_	17	amod	_	_
17	region	_	NN	NN	_	19	nsubjpass	_	_
18	was	_	VBD	VBD	_	19	auxpass	_	_
19	held	_	VBN	VBN	_	0	root	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	Hong	_	NNP	NNP	_	22	nn	_	_
22	Kong	_	NNP	NNP	_	20	pobj	_	_
23	earlier	_	RB	RB	_	22	advmod	_	_
24	in	_	IN	IN	_	23	prep	_	_
25	020700	_	CD	CD	_	24	pobj	_	_
26	.	_	.	.	_	19	punct	_	_

Oracle:
(c / conference, poss, c3 / conference)
(c2 / call-01, ARG1, c / conference)
(c2 / call-01, ARG2, t / target-01)
(c2 / call-01, manner, s / so)
(c3 / conference, location, w / world-region)
(c3 / conference, name, n / name)
(c4 / city, name, n2 / name)
(d / date-entity, month, 7)
(d / date-entity, year, 2002)
(e2 / early, op, d / date-entity)
(h / hold-04, ARG1, c / conference)
(h / hold-04, location, c4 / city)
(h / hold-04, time, e2 / early)
(n / name, op, "Conference")
(n / name, op, "Drug")
(n / name, op, "Enforcement")
(n / name, op, "International")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "East")
(n3 / name, op, "Far")
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(3, 2, 1, 0),020700,(date-entity :day 0 :month 7 :year 02),false), Span(24,25,List(4),earlier,early,false), Span(22,24,List(8, 7, 6, 5),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(20,22,List(12, 11, 10, 9),held in,(country :name (name :op "Hong" :op "Kong")),false), Span(18,19,List(13),region,region,false), Span(7,11,List(19, 18, 17, 16, 15, 14),of the International Drug,(organization :name (name :op "International" :op "Drug" :op "Enforcement" :op "Conference")),false), Span(4,7,List(24, 23, 22, 21, 20),called targeting Conference,(thing :name (name :op "Conference" :op "of" :op "the")),false)),Map(2 -> 7, 5 -> city, 12 -> "Kong", 8 -> "Hong", 15 -> name, 21 -> name, 18 -> "Enforcement", 24 -> "the", 7 -> "Kong", 1 -> 0, 17 -> "Drug", 23 -> "of", 4 -> early, 11 -> "Hong", 14 -> organization, 20 -> thing, 6 -> name, 9 -> country, 0 -> date-entity, 22 -> "Conference", 16 -> "International", 19 -> "Conference", 10 -> name, 3 -> 02, 13 -> region),Map(e -> early, n -> name, t -> thing, n4 -> name, d -> date-entity, 7 -> 7, n3 -> name, 02 -> 02, r -> region, c -> city, 0 -> 0, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@4c4f4365,Annotation([Ljava.lang.String;@acf859d,[Ljava.lang.String;@6df3e44c,[Ljava.lang.String;@7ce7e83c),Annotation([Ljava.lang.String;@4a05d8ae,[Ljava.lang.String;@3c904f1e,[Ledu.cmu.lti.nlp.amr.Dependency;@4eb30d44),Annotation([Ljava.lang.String;@d56aaa6,[Ljava.lang.String;@6972c30a,[Ljava.lang.String;@57a48985),Annotation([Ljava.lang.String;@1ab6718,[Ljava.lang.String;@3910fe11,[Ledu.cmu.lti.nlp.amr.Entity;@460510aa))
AMR:
(c / city, name, n / name)
(c2 / country, domain, t / thing)
(c2 / country, name, n2 / name)
(c2 / country, op, c / city)
(c2 / country, poss, r / region)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 02 / 02)
(e / early, op, c2 / country)
(e / early, op, d / date-entity)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "Conference")
(n3 / name, op, "Drug")
(n3 / name, op, "Enforcement")
(n3 / name, op, "International")
(n4 / name, op, "Conference")
(n4 / name, op, "of")
(n4 / name, op, "the")
(o / organization, name, n3 / name)
(o / organization, op, e / early)
(t / thing, name, n4 / name)

Decoded in 180,582 microseconds
Sentence: Hong Kong was chosen to host the event following the decision of the IDEC meeting held in Bolivia in 020200.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "IDEC"))
NER Entity: (country :name (name :op "Bolivia"))
mkDayMonthYear(020200,00,02,02)
mkDayMonthYear(020200,00,02,02)
Spans:
Span 19-20:  020200 => (date-entity :day 0 :month 2 :year 02)
Span 3-4:  chosen => choose-01
Span 7-8:  event => event
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 5-6:  host => host-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 19-20:  020200 => (date-entity :month 2 :year 2002)
Oracle Span 17-18:  Bolivia => (country :name (name :op "Bolivia"))
Oracle Span 3-4:  chosen => choose-01
Oracle Span 10-11:  decision => decide-01
Oracle Span 7-8:  event => event
Oracle Span 8-9:  following => follow-01
Oracle Span 15-16:  held => hold-04
Oracle Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 5-6:  host => host-01
Oracle Span 13-14:  IDEC => (conference :name (name :op "IDEC"))
Oracle Span 14-15:  meeting => meet-03

Incorrect span: 020200 => (date-entity :day 0 :month 2 :year 02)
Missing span: IDEC => (conference :name (name :op "IDEC"))
Missing span: Bolivia => (country :name (name :op "Bolivia"))
Missing span: 020200 => (date-entity :month 2 :year 2002)
Missing span: following => follow-01
Missing span: meeting => meet-03
Missing span: held => hold-04
Missing span: decision => decide-01
Dependencies:
1	Hong	_	NNP	NNP	_	2	nn	_	_
2	Kong	_	NNP	NNP	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	chosen	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	host	_	VB	VB	_	4	xcomp	_	_
7	the	_	DT	DT	_	8	det	_	_
8	event	_	NN	NN	_	6	dobj	_	_
9	following	_	VBG	VBG	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	decision	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	IDEC	_	NNP	NNP	_	15	nn	_	_
15	meeting	_	NN	NN	_	12	pobj	_	_
16	held	_	VBN	VBN	_	15	vmod	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	Bolivia	_	NNP	NNP	_	17	pobj	_	_
19	in	_	IN	IN	_	16	prep	_	_
20	020200	_	CD	CD	_	19	pobj	_	_
21	.	_	.	.	_	4	punct	_	_

Oracle:
(c / choose-01, ARG1, c2 / city)
(c / choose-01, ARG4, h / host-01)
(c2 / city, name, n / name)
(c3 / country, name, n3 / name)
(c4 / conference, name, n2 / name)
(d / decide-01, ARG0, c4 / conference)
(d / decide-01, time, m / meet-03)
(d2 / date-entity, month, 2)
(d2 / date-entity, year, 2002)
(f / follow-01, ARG1, c / choose-01)
(f / follow-01, ARG2, d / decide-01)
(h / host-01, ARG0, c2 / city)
(h / host-01, ARG1, e / event)
(h2 / hold-04, ARG1, m / meet-03)
(h2 / hold-04, location, c3 / country)
(h2 / hold-04, time, d2 / date-entity)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "IDEC")
(n3 / name, op, "Bolivia")

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(3, 2, 1, 0),020200,(date-entity :day 0 :month 2 :year 02),false), Span(7,8,List(4),event,event,false), Span(5,6,List(5),host,host-01,false), Span(3,4,List(6),chosen,choose-01,false), Span(0,2,List(10, 9, 8, 7),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> 2, 5 -> host-01, 8 -> name, 7 -> city, 1 -> 0, 4 -> event, 6 -> choose-01, 9 -> "Kong", 0 -> date-entity, 10 -> "Hong", 3 -> 02),Map(n -> name, e -> event, h -> host-01, 2 -> 2, d -> date-entity, 02 -> 02, c -> choose-01, 0 -> 0, c2 -> city))),[Ljava.lang.String;@351e414e,Annotation([Ljava.lang.String;@6fd77352,[Ljava.lang.String;@5109e8cf,[Ljava.lang.String;@3f672204),Annotation([Ljava.lang.String;@78b41097,[Ljava.lang.String;@2c2db130,[Ledu.cmu.lti.nlp.amr.Dependency;@327c7bea),Annotation([Ljava.lang.String;@348d18a3,[Ljava.lang.String;@6c65860d,[Ljava.lang.String;@2d000e80),Annotation([Ljava.lang.String;@7cf283e1,[Ljava.lang.String;@20e6c4dc,[Ledu.cmu.lti.nlp.amr.Entity;@60737b23))
AMR:
(c / choose-01, ARG1, h / host-01)
(c2 / city, name, n / name)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 2 / 2)
(d / date-entity, op, h / host-01)
(d / date-entity, year, 02 / 02)
(h / host-01, ARG0, c2 / city)
(h / host-01, ARG1, e / event)
(n / name, op, "Hong")
(n / name, op, "Kong")

Decoded in 134,756 microseconds
Sentence: Some 42 senior anti-narcotics officers from the Chinese mainland, Hong Kong, Australia, Indonesia, Japan, South Korea, Myanmar, the Philippines, Singapore, Thailand and the United States met.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "Australia"))
NER Entity: (country :name (name :op "Indonesia"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "South" :op "Korea"))
NER Entity: (country :name (name :op "Myanmar"))
NER Entity: (country :name (name :op "Philippines"))
NER Entity: (country :name (name :op "Singapore"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Australia"))
Spans:
Span 32-34:  and the => (country :name (name :op "United" :op "States"))
Span 12-14:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 17-18:  Indonesia => (country :name (name :op "Indonesia"))
Span 19-21:  Japan , => (country :name (name :op "South" :op "Korea"))
Span 10-12:  mainland , => (country :name (name :op "Hong" :op "Kong"))
Span 36-37:  met => meet-03
Span 5-6:  narcotics => narcotic
Span 2-3:  senior => senior
Span 29-30:  Singapore => (country :name (name :op "Singapore"))
Span 31-32:  Thailand => (country :name (name :op "Thailand"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  42 => 42
Oracle Span 32-33:  and => and
Oracle Span 3-4:  anti => (person :ARG0-of counter-01)
Oracle Span 15-16:  Australia => (country :name (name :op "Australia"))
Oracle Span 9-10:  Chinese => (country :name (name :op "China"))
Oracle Span 12-14:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 17-18:  Indonesia => (country :name (name :op "Indonesia"))
Oracle Span 19-20:  Japan => (country :name (name :op "Japan"))
Oracle Span 10-11:  mainland => mainland
Oracle Span 36-37:  met => meet-03
Oracle Span 24-25:  Myanmar => (country :name (name :op "Myanmar"))
Oracle Span 5-6:  narcotics => narcotic
Oracle Span 6-7:  officers => (have-org-role-91 :ARG2 officer)
Oracle Span 27-28:  Philippines => (country :name (name :op "Philippines"))
Oracle Span 2-3:  senior => senior
Oracle Span 29-30:  Singapore => (country :name (name :op "Singapore"))
Oracle Span 0-1:  Some => some
Oracle Span 21-23:  South Korea => (country :name (name :op "Korea" :op "South"))
Oracle Span 31-32:  Thailand => (country :name (name :op "Thailand"))
Oracle Span 34-36:  United States => (country :name (name :op "States" :op "United"))

Extra span: and the => (country :name (name :op "United" :op "States"))
Extra span: Japan , => (country :name (name :op "South" :op "Korea"))
Extra span: mainland , => (country :name (name :op "Hong" :op "Kong"))
Missing span: Australia => (country :name (name :op "Australia"))
Missing span: Japan => (country :name (name :op "Japan"))
Missing span: South Korea => (country :name (name :op "Korea" :op "South"))
Missing span: Myanmar => (country :name (name :op "Myanmar"))
Missing span: Philippines => (country :name (name :op "Philippines"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: anti => (person :ARG0-of counter-01)
Missing span: Some => some
Missing span: 42 => 42
Missing span: and => and
Missing span: mainland => mainland
Missing span: officers => (have-org-role-91 :ARG2 officer)
Dependencies:
1	Some	_	DT	DT	_	5	det	_	_
2	42	_	CD	CD	_	5	num	_	_
3	senior	_	JJ	JJ	_	5	amod	_	_
4	anti-narcotics	_	JJ	JJ	_	5	amod	_	_
5	officers	_	NNS	NNS	_	35	nsubj	_	_
6	from	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	9	det	_	_
8	Chinese	_	JJ	JJ	_	9	amod	_	_
9	mainland	_	NN	NN	_	6	pobj	_	_
10	,	_	,	,	_	9	punct	_	_
11	Hong	_	NNP	NNP	_	21	nn	_	_
12	Kong	_	NNP	NNP	_	21	nn	_	_
13	,	_	,	,	_	21	punct	_	_
14	Australia	_	NNP	NNP	_	21	appos	_	_
15	,	_	,	,	_	21	punct	_	_
16	Indonesia	_	NNP	NNP	_	21	appos	_	_
17	,	_	,	,	_	21	punct	_	_
18	Japan	_	NNP	NNP	_	21	appos	_	_
19	,	_	,	,	_	21	punct	_	_
20	South	_	NNP	NNP	_	21	appos	_	_
21	Korea	_	NNP	NNP	_	9	conj	_	_
22	,	_	,	,	_	9	punct	_	_
23	Myanmar	_	NNP	NNP	_	9	conj	_	_
24	,	_	,	,	_	9	punct	_	_
25	the	_	DT	DT	_	26	det	_	_
26	Philippines	_	NNPS	NNPS	_	9	conj	_	_
27	,	_	,	,	_	9	punct	_	_
28	Singapore	_	NNP	NNP	_	9	conj	_	_
29	,	_	,	,	_	9	punct	_	_
30	Thailand	_	NNP	NNP	_	9	conj	_	_
31	and	_	CC	CC	_	9	cc	_	_
32	the	_	DT	DT	_	34	det	_	_
33	United	_	NNP	NNP	_	34	nn	_	_
34	States	_	NNPS	NNPS	_	9	conj	_	_
35	met	_	VBD	VBD	_	0	root	_	_
36	.	_	.	.	_	35	punct	_	_

Oracle:
(a / and, op, c10 / country)
(a / and, op, c11 / country)
(a / and, op, c12 / country)
(a / and, op, c3 / city)
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(a / and, op, c6 / country)
(a / and, op, c7 / country)
(a / and, op, c8 / country)
(a / and, op, c9 / country)
(a / and, op, m2 / mainland)
(c / counter-01, ARG0, p / person)
(c / counter-01, ARG1, n / narcotic)
(c10 / country, name, n10 / name)
(c11 / country, name, n11 / name)
(c12 / country, name, n12 / name)
(c2 / country, name, n2 / name)
(c3 / city, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(c7 / country, name, n7 / name)
(c8 / country, name, n8 / name)
(c9 / country, name, n9 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, o / officer)
(m / meet-03, ARG0, p / person)
(m2 / mainland, mod, c2 / country)
(n10 / name, op, "Singapore")
(n11 / name, op, "Thailand")
(n12 / name, op, "States")
(n12 / name, op, "United")
(n2 / name, op, "China")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(n4 / name, op, "Australia")
(n5 / name, op, "Indonesia")
(n6 / name, op, "Japan")
(n7 / name, op, "Korea")
(n7 / name, op, "South")
(n8 / name, op, "Myanmar")
(n9 / name, op, "Philippines")
(o / officer, mod, s2 / senior)
(p / person, quant, s / some)
(p / person, source, a / and)
(s / some, op, 4 / 42)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),met,meet-03,false), Span(32,34,List(4, 3, 2, 1),and the,(country :name (name :op "United" :op "States")),false), Span(31,32,List(7, 6, 5),Thailand,(country :name (name :op "Thailand")),false), Span(29,30,List(10, 9, 8),Singapore,(country :name (name :op "Singapore")),false), Span(19,21,List(14, 13, 12, 11),Japan ,,(country :name (name :op "South" :op "Korea")),false), Span(17,18,List(17, 16, 15),Indonesia,(country :name (name :op "Indonesia")),false), Span(12,14,List(21, 20, 19, 18),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(10,12,List(25, 24, 23, 22),mainland ,,(country :name (name :op "Hong" :op "Kong")),false), Span(5,6,List(26),narcotics,narcotic,false), Span(2,3,List(27),senior,senior,false)),Map(2 -> name, 5 -> country, 27 -> senior, 12 -> name, 8 -> country, 15 -> country, 21 -> "Hong", 18 -> city, 24 -> "Hong", 7 -> "Thailand", 1 -> country, 17 -> "Indonesia", 23 -> name, 26 -> narcotic, 4 -> "States", 11 -> country, 14 -> "Korea", 20 -> "Kong", 6 -> name, 9 -> name, 0 -> meet-03, 22 -> country, 16 -> name, 19 -> name, 10 -> "Singapore", 3 -> "United", 25 -> "Kong", 13 -> "South"),Map(n -> name, n7 -> name, c7 -> country, c4 -> country, n4 -> name, s -> senior, m -> meet-03, c3 -> country, n3 -> name, n6 -> name, c6 -> city, c -> country, n8 -> narcotic, c2 -> country, n2 -> name, c5 -> country, n5 -> name))),[Ljava.lang.String;@4d2a1da3,Annotation([Ljava.lang.String;@252f626c,[Ljava.lang.String;@33f98231,[Ljava.lang.String;@48284d0e),Annotation([Ljava.lang.String;@557286ad,[Ljava.lang.String;@b10a26d,[Ledu.cmu.lti.nlp.amr.Dependency;@74075134),Annotation([Ljava.lang.String;@7e4d2287,[Ljava.lang.String;@3f4b840d,[Ljava.lang.String;@31464a43),Annotation([Ljava.lang.String;@7f8633ae,[Ljava.lang.String;@68c87fc3,[Ledu.cmu.lti.nlp.amr.Entity;@bc0f53b))
AMR:
(c / country, degree, c2 / country)
(c / country, name, n / name)
(c / country, op, c3 / country)
(c / country, op, c7 / country)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c5 / country, poss, s / senior)
(c6 / city, name, n6 / name)
(c7 / country, name, n7 / name)
(m / meet-03, ARG0, c / country)
(m / meet-03, location, c4 / country)
(m / meet-03, location, c5 / country)
(m / meet-03, location, c6 / city)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Thailand")
(n3 / name, op, "Singapore")
(n4 / name, op, "Korea")
(n4 / name, op, "South")
(n5 / name, op, "Indonesia")
(n6 / name, op, "Hong")
(n6 / name, op, "Kong")
(n7 / name, op, "Hong")
(n7 / name, op, "Kong")
(n8 / narcotic, op, c4 / country)

Decoded in 261,426 microseconds
Sentence: The Hong Kong police's internal news letter recently reported that the conference aimed to provide a flexible and forward-thinking environment for sharing information and taking positive action against the organized criminals of transnational drug trafficking.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 29-30:  action => action
Span 13-14:  aimed => aim-02
Span 12-13:  conference => conference
Span 33-34:  criminals => criminal
Span 36-37:  drug => drug
Span 22-23:  environment => environment
Span 17-18:  flexible => flexible
Span 19-20:  forward => forward
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 25-26:  information => information
Span 5-6:  internal => internal
Span 7-8:  letter => letter
Span 6-7:  news => news
Span 32-33:  organized => organize-01
Span 28-29:  positive => positive
Span 15-16:  provide => provide-01
Span 8-9:  recently => recent
Span 9-10:  reported => report-01
Span 24-25:  sharing => share-01
Span 35-36:  transnational => transnational

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 13-14:  aimed => aim-01
Oracle Span 18-19:  and => and
Oracle Span 12-13:  conference => conference
Oracle Span 33-34:  criminals => criminal
Oracle Span 36-37:  drug => drug
Oracle Span 22-23:  environment => environment
Oracle Span 17-18:  flexible => flexible
Oracle Span 19-20:  forward => forward
Oracle Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 25-26:  information => information
Oracle Span 5-6:  internal => internal
Oracle Span 7-8:  letter => letter
Oracle Span 6-7:  news => news
Oracle Span 32-33:  organized => organize-01
Oracle Span 3-4:  police => police
Oracle Span 28-29:  positive => positive
Oracle Span 15-16:  provide => provide-01
Oracle Span 8-9:  recently => recent
Oracle Span 9-10:  reported => report-01
Oracle Span 24-25:  sharing => share-01
Oracle Span 21-22:  thinking => think-01
Oracle Span 37-38:  trafficking => traffic-00
Oracle Span 35-36:  transnational => transnational

Extra span: action => action
Incorrect span: aimed => aim-02
Missing span: aimed => aim-01
Missing span: thinking => think-01
Missing span: and => and
Missing span: trafficking => traffic-00
Missing span: police => police
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Hong	_	NNP	NNP	_	4	nn	_	_
3	Kong	_	NNP	NNP	_	4	nn	_	_
4	police	_	NN	NN	_	8	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	internal	_	JJ	JJ	_	8	amod	_	_
7	news	_	NN	NN	_	8	nn	_	_
8	letter	_	NN	NN	_	10	nsubj	_	_
9	recently	_	RB	RB	_	10	advmod	_	_
10	reported	_	VBD	VBD	_	0	root	_	_
11	that	_	IN	IN	_	14	mark	_	_
12	the	_	DT	DT	_	13	det	_	_
13	conference	_	NN	NN	_	14	nsubj	_	_
14	aimed	_	VBD	VBD	_	10	ccomp	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	provide	_	VB	VB	_	14	xcomp	_	_
17	a	_	DT	DT	_	21	det	_	_
18	flexible	_	JJ	JJ	_	21	amod	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	forward-thinking	_	JJ	JJ	_	18	conj	_	_
21	environment	_	NN	NN	_	16	dobj	_	_
22	for	_	IN	IN	_	16	prep	_	_
23	sharing	_	VBG	VBG	_	22	pcomp	_	_
24	information	_	NN	NN	_	23	dobj	_	_
25	and	_	CC	CC	_	23	cc	_	_
26	taking	_	VBG	VBG	_	23	conj	_	_
27	positive	_	JJ	JJ	_	28	amod	_	_
28	action	_	NN	NN	_	26	dobj	_	_
29	against	_	IN	IN	_	26	prep	_	_
30	the	_	DT	DT	_	32	det	_	_
31	organized	_	VBN	VBN	_	32	amod	_	_
32	criminals	_	NNS	NNS	_	29	pobj	_	_
33	of	_	IN	IN	_	32	prep	_	_
34	transnational	_	JJ	JJ	_	36	amod	_	_
35	drug	_	NN	NN	_	36	nn	_	_
36	trafficking	_	NN	NN	_	33	pobj	_	_
37	.	_	.	.	_	10	punct	_	_

Oracle:
(a / aim-01, ARG0, c2 / conference)
(a / aim-01, ARG1, p2 / provide-01)
(a3 / and, op, s / share-01)
(c / city, name, n2 / name)
(c4 / criminal, mod, o / organize-01)
(e / environment, mod, f / flexible)
(e / environment, mod, t / think-01)
(e / environment, purpose, a3 / and)
(l / letter, mod, n / news)
(l / letter, poss, p / police)
(n / news, mod, i / internal)
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p / police, mod, c / city)
(p2 / provide-01, ARG0, c2 / conference)
(p2 / provide-01, ARG1, e / environment)
(r / report-01, ARG0, l / letter)
(r / report-01, ARG1, a / aim-01)
(r / report-01, time, r2 / recent)
(s / share-01, ARG1, i2 / information)
(t / think-01, manner, f2 / forward)
(t2 / traffic-00, ARG0, c4 / criminal)
(t2 / traffic-00, ARG1, d / drug)
(t2 / traffic-00, mod, t3 / transnational)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),drug,drug,false), Span(35,36,List(1),transnational,transnational,false), Span(33,34,List(2),criminals,criminal,false), Span(32,33,List(3),organized,organize-01,false), Span(29,30,List(4),action,action,false), Span(28,29,List(5),positive,positive,false), Span(25,26,List(6),information,information,false), Span(24,25,List(7),sharing,share-01,false), Span(22,23,List(8),environment,environment,false), Span(19,20,List(9),forward,forward,false), Span(17,18,List(10),flexible,flexible,false), Span(15,16,List(11),provide,provide-01,false), Span(13,14,List(12),aimed,aim-02,false), Span(12,13,List(13),conference,conference,false), Span(9,10,List(14),reported,report-01,false), Span(8,9,List(15),recently,recent,false), Span(7,8,List(16),letter,letter,false), Span(6,7,List(17),news,news,false), Span(5,6,List(18),internal,internal,false), Span(1,3,List(22, 21, 20, 19),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> criminal, 5 -> positive, 12 -> aim-02, 15 -> recent, 8 -> environment, 21 -> "Kong", 18 -> internal, 7 -> share-01, 17 -> news, 1 -> transnational, 4 -> action, 11 -> provide-01, 14 -> report-01, 20 -> name, 6 -> information, 22 -> "Hong", 0 -> drug, 9 -> forward, 16 -> letter, 19 -> city, 3 -> organize-01, 10 -> flexible, 13 -> conference),Map(e -> environment, n -> news, t -> transnational, p2 -> provide-01, s -> share-01, d -> drug, r2 -> recent, p -> positive, c3 -> city, a -> action, i2 -> internal, r -> report-01, i -> information, a2 -> aim-02, c -> criminal, l -> letter, f2 -> flexible, f -> forward, o -> organize-01, n2 -> name, c2 -> conference))),[Ljava.lang.String;@8d7b252,Annotation([Ljava.lang.String;@4682eba5,[Ljava.lang.String;@6d9fb2d1,[Ljava.lang.String;@61fafb74),Annotation([Ljava.lang.String;@540a903b,[Ljava.lang.String;@58496dc,[Ledu.cmu.lti.nlp.amr.Dependency;@151db587),Annotation([Ljava.lang.String;@238acd0b,[Ljava.lang.String;@23811a09,[Ljava.lang.String;@2125ad3),Annotation([Ljava.lang.String;@7a5b769b,[Ljava.lang.String;@f4c0e4e,[Ledu.cmu.lti.nlp.amr.Entity;@24361cfc))
AMR:
(a / action, mod, p / positive)
(a2 / aim-02, ARG0, t / transnational)
(a2 / aim-02, ARG1, p2 / provide-01)
(c / criminal, part, a / action)
(c2 / conference, location, c3 / city)
(c3 / city, name, n2 / name)
(d / drug, location, i / information)
(e / environment, mod, f / forward)
(l / letter, mod, i2 / internal)
(l / letter, mod, n / news)
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(o / organize-01, ARG1, c / criminal)
(p2 / provide-01, ARG0, c2 / conference)
(p2 / provide-01, ARG1, e / environment)
(p2 / provide-01, manner, s / share-01)
(r / report-01, ARG0, l / letter)
(r / report-01, ARG1, a2 / aim-02)
(r / report-01, mod, r2 / recent)
(s / share-01, ARG0, f2 / flexible)
(s / share-01, ARG1, i / information)
(s / share-01, ARG2, o / organize-01)

Decoded in 1,611,279 microseconds
Sentence: The Hong Kong police's exchange of intelligence with the police on the Chinese mainland has been particularly intense.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 5-6:  exchange => exchange-01
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 7-8:  intelligence => intelligence
Span 18-19:  intense => intense
Span 14-15:  mainland => mainland
Span 17-18:  particularly => particular

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 13-14:  Chinese => (country :name (name :op "China"))
Oracle Span 5-6:  exchange => exchange-01
Oracle Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 7-8:  intelligence => intelligence
Oracle Span 18-19:  intense => intense
Oracle Span 14-15:  mainland => mainland
Oracle Span 17-18:  particularly => particular
Oracle Span 3-4:  police => police
Oracle Span 10-11:  police => police

Missing span: Chinese => (country :name (name :op "China"))
Missing span: police => police
Missing span: police => police
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Hong	_	NNP	NNP	_	4	nn	_	_
3	Kong	_	NNP	NNP	_	4	nn	_	_
4	police	_	NN	NN	_	6	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	exchange	_	NN	NN	_	19	nsubj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	intelligence	_	NN	NN	_	7	pobj	_	_
9	with	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	police	_	NN	NN	_	9	pobj	_	_
12	on	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	Chinese	_	JJ	JJ	_	15	amod	_	_
15	mainland	_	NN	NN	_	12	pobj	_	_
16	has	_	VBZ	VBZ	_	19	aux	_	_
17	been	_	VBN	VBN	_	19	cop	_	_
18	particularly	_	RB	RB	_	19	advmod	_	_
19	intense	_	JJ	JJ	_	0	root	_	_
20	.	_	.	.	_	19	punct	_	_

Oracle:
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(e / exchange-01, ARG0, p2 / police)
(e / exchange-01, ARG1, i2 / intelligence)
(e / exchange-01, ARG2, p3 / police)
(i / intense, domain, e / exchange-01)
(i / intense, mod, p / particular)
(m / mainland, mod, c2 / country)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "China")
(p2 / police, mod, c / city)
(p3 / police, location, m / mainland)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),intense,intense,false), Span(17,18,List(1),particularly,particular,false), Span(14,15,List(2),mainland,mainland,false), Span(7,8,List(3),intelligence,intelligence,false), Span(5,6,List(4),exchange,exchange-01,false), Span(1,3,List(8, 7, 6, 5),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> mainland, 5 -> city, 8 -> "Hong", 7 -> "Kong", 1 -> particular, 4 -> exchange-01, 6 -> name, 0 -> intense, 3 -> intelligence),Map(n -> name, e -> exchange-01, m -> mainland, p -> particular, i2 -> intelligence, i -> intense, c -> city))),[Ljava.lang.String;@34e20e6b,Annotation([Ljava.lang.String;@15ac59c2,[Ljava.lang.String;@7a7d1b47,[Ljava.lang.String;@6eb82908),Annotation([Ljava.lang.String;@4a8df3e2,[Ljava.lang.String;@3d98d138,[Ledu.cmu.lti.nlp.amr.Dependency;@2f2d52ef),Annotation([Ljava.lang.String;@f2ce6b,[Ljava.lang.String;@25c53f74,[Ljava.lang.String;@5e2f3be5),Annotation([Ljava.lang.String;@1bd0b0e5,[Ljava.lang.String;@dc7b462,[Ledu.cmu.lti.nlp.amr.Entity;@1f51431))
AMR:
(c / city, name, n / name)
(e / exchange-01, ARG1, i2 / intelligence)
(e / exchange-01, location, m / mainland)
(i / intense, domain, e / exchange-01)
(i / intense, mod, p / particular)
(m / mainland, mod, c / city)
(n / name, op, "Hong")
(n / name, op, "Kong")

Decoded in 107,309 microseconds
Sentence: An 11-member delegation from mainland China's National Narcotics Control Commission visited Hong Kong recently to study how the police here enforce their anti-narcotics laws.

NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 7-11:  China 's National Narcotics => (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))
Span 12-14:  Commission visited => (country :name (name :op "Hong" :op "Kong"))
Span 4-5:  delegation => delegation
Span 23-24:  enforce => enforce-01
Span 14-16:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 28-29:  laws => law
Span 6-7:  mainland => mainland
Span 3-4:  member => (have-org-role-91 :ARG2 member)
Span 27-28:  narcotics => narcotic
Span 16-17:  recently => recent

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  11 => 11
Oracle Span 25-26:  anti => counter-01
Oracle Span 7-8:  China => (country :name (name :op "China"))
Oracle Span 4-5:  delegation => delegation
Oracle Span 23-24:  enforce => enforce-01
Oracle Span 22-23:  here => here
Oracle Span 14-16:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 28-29:  laws => law
Oracle Span 6-7:  mainland => mainland
Oracle Span 3-4:  member => (have-org-role-91 :ARG2 member)
Oracle Span 27-28:  narcotics => narcotic
Oracle Span 9-13:  National Narcotics Control Commission => (organization :name (name :op "Commission" :op "Control" :op "Narcotics" :op "National"))
Oracle Span 21-22:  police => police
Oracle Span 16-17:  recently => recent
Oracle Span 18-19:  study => study-01
Oracle Span 13-14:  visited => visit-01

Extra span: Commission visited => (country :name (name :op "Hong" :op "Kong"))
Extra span: China 's National Narcotics => (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))
Missing span: National Narcotics Control Commission => (organization :name (name :op "Commission" :op "Control" :op "Narcotics" :op "National"))
Missing span: China => (country :name (name :op "China"))
Missing span: visited => visit-01
Missing span: study => study-01
Missing span: anti => counter-01
Missing span: police => police
Missing span: here => here
Missing span: 11 => 11
Dependencies:
1	An	_	DT	DT	_	3	det	_	_
2	11-member	_	JJ	JJ	_	3	amod	_	_
3	delegation	_	NN	NN	_	12	nsubj	_	_
4	from	_	IN	IN	_	3	prep	_	_
5	mainland	_	NNP	NNP	_	6	nn	_	_
6	China	_	NNP	NNP	_	11	poss	_	_
7	's	_	POS	POS	_	6	possessive	_	_
8	National	_	NNP	NNP	_	11	nn	_	_
9	Narcotics	_	NNP	NNP	_	11	nn	_	_
10	Control	_	NNP	NNP	_	11	nn	_	_
11	Commission	_	NNP	NNP	_	4	pobj	_	_
12	visited	_	VBD	VBD	_	0	root	_	_
13	Hong	_	NNP	NNP	_	14	nn	_	_
14	Kong	_	NNP	NNP	_	12	dobj	_	_
15	recently	_	RB	RB	_	17	advmod	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	study	_	VB	VB	_	12	xcomp	_	_
18	how	_	WRB	WRB	_	22	advmod	_	_
19	the	_	DT	DT	_	20	det	_	_
20	police	_	NN	NN	_	22	nsubj	_	_
21	here	_	RB	RB	_	22	advmod	_	_
22	enforce	_	VB	VB	_	17	ccomp	_	_
23	their	_	PRP$	PRP$	_	25	poss	_	_
24	anti-narcotics	_	JJ	JJ	_	25	amod	_	_
25	laws	_	NNS	NNS	_	22	dobj	_	_
26	.	_	.	.	_	12	punct	_	_

Oracle:
(c / country, mod, m2 / mainland)
(c / country, name, n2 / name)
(c2 / city, name, n3 / name)
(c3 / counter-01, ARG0, l / law)
(c3 / counter-01, ARG1, n4 / narcotic)
(e / enforce-01, ARG0, p / police)
(e / enforce-01, ARG1, l / law)
(h2 / have-org-role-91, ARG1, o / organization)
(h2 / have-org-role-91, ARG2, m / member)
(n / name, op, "Commission")
(n / name, op, "Control")
(n / name, op, "Narcotics")
(n / name, op, "National")
(n2 / name, op, "China")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(o / organization, name, n / name)
(o / organization, poss, c / country)
(p / police, location, h / here)
(s / study-01, ARG0, d / delegation)
(s / study-01, ARG1, e / enforce-01)
(v / visit-01, ARG0, d / delegation)
(v / visit-01, ARG1, c2 / city)
(v / visit-01, purpose, s / study-01)
(v / visit-01, time, r / recent)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),laws,law,false), Span(27,28,List(1),narcotics,narcotic,false), Span(23,24,List(2),enforce,enforce-01,false), Span(16,17,List(3),recently,recent,false), Span(14,16,List(7, 6, 5, 4),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(12,14,List(11, 10, 9, 8),Commission visited,(country :name (name :op "Hong" :op "Kong")),false), Span(7,11,List(17, 16, 15, 14, 13, 12),China 's National Narcotics,(organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission")),false), Span(6,7,List(18),mainland,mainland,false), Span(4,5,List(19),delegation,delegation,false), Span(3,4,List(21, 20),member,(have-org-role-91 :ARG2 member),false)),Map(2 -> enforce-01, 5 -> name, 12 -> organization, 15 -> "Narcotics", 8 -> country, 21 -> member, 18 -> mainland, 7 -> "Hong", 17 -> "Commission", 1 -> narcotic, 4 -> city, 11 -> "Kong", 14 -> "National", 20 -> have-org-role-91, 6 -> "Kong", 0 -> law, 9 -> name, 16 -> "Control", 19 -> delegation, 3 -> recent, 10 -> "Hong", 13 -> name),Map(e -> enforce-01, n -> narcotic, h -> have-org-role-91, m2 -> member, n4 -> name, m -> mainland, d -> delegation, n3 -> name, r -> recent, c -> city, l -> law, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@26a2f7f9,Annotation([Ljava.lang.String;@38eb2c50,[Ljava.lang.String;@8bffb8b,[Ljava.lang.String;@21422231),Annotation([Ljava.lang.String;@10ee04df,[Ljava.lang.String;@7186333e,[Ledu.cmu.lti.nlp.amr.Dependency;@692fd26),Annotation([Ljava.lang.String;@36f1046f,[Ljava.lang.String;@56d93692,[Ljava.lang.String;@1686f0b4),Annotation([Ljava.lang.String;@76c548f,[Ljava.lang.String;@3900fa71,[Ledu.cmu.lti.nlp.amr.Entity;@26722665))
AMR:
(c / city, name, n2 / name)
(c / city, purpose, c2 / country)
(c2 / country, name, n3 / name)
(c2 / country, poss, o / organization)
(e / enforce-01, ARG0, d / delegation)
(e / enforce-01, ARG1, l / law)
(e / enforce-01, ARG4, r / recent)
(h / have-org-role-91, ARG0, d / delegation)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m2 / member)
(l / law, mod, n / narcotic)
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(n4 / name, op, "Commission")
(n4 / name, op, "Control")
(n4 / name, op, "Narcotics")
(n4 / name, op, "National")
(o / organization, mod, m / mainland)
(o / organization, name, n4 / name)

Decoded in 181,611 microseconds
Sentence: The 11-person team was chaired by the Deputy Director of Bureau of narcotics control of the Chinese Ministry of Public Security Chen cunyi and was briefed by the Hong Kong Police as led by Hong Kong's head of narcotics bureau Ip Lau Chuen on enforced actions carried out in Hong Kong.

NER Entity: (organization :name (name :op "Bureau" :op "of" :op "narcotics"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (organization :name (name :op "Ministry" :op "of" :op "Public" :op "Security" :op "Chen"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (person :name (name :op "Ip" :op "Lau"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 48-49:  actions => action
Span 27-28:  briefed => brief-01
Span 28-30:  by the => (country :name (name :op "Hong" :op "Kong"))
Span 6-7:  chaired => chair-01
Span 15-16:  control => control-01
Span 9-10:  Deputy => deputy
Span 10-13:  Director of Bureau => (organization :name (name :op "Bureau" :op "of" :op "narcotics"))
Span 47-48:  enforced => enforce-01
Span 52-54:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 36-38:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 30-32:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 34-36:  led by => (country :name (name :op "Hong" :op "Kong"))
Span 14-15:  narcotics => narcotic
Span 41-43:  narcotics bureau => (person :name (name :op "Ip" :op "Lau"))
Span 50-52:  out in => (country :name (name :op "Hong" :op "Kong"))
Span 3-4:  person => person
Span 4-5:  team => team
Span 17-22:  the Chinese Ministry of Public => (organization :name (name :op "Ministry" :op "of" :op "Public" :op "Security" :op "Chen"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 1-2:  11 => (person :quant 11)
Oracle Span 48-49:  actions => action
Oracle Span 25-26:  and => and
Oracle Span 27-28:  briefed => brief-01
Oracle Span 12-16:  Bureau of narcotics control => (government-organization :name (name :op "Control" :op "Narcotics" :op "of" :op "Bureau"))
Oracle Span 49-50:  carried => carry-03
Oracle Span 6-7:  chaired => chair-01
Oracle Span 23-25:  Chen cunyi => (person :name (name :op "Cunyi" :op "Chen"))
Oracle Span 18-19:  Chinese => (country :name (name :op "China"))
Oracle Span 9-10:  Deputy => deputy
Oracle Span 10-11:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 47-48:  enforced => enforce-01
Oracle Span 39-40:  head => head-01
Oracle Span 30-32:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 43-46:  Ip Lau Chuen => (name :op "Chuen" :op "Lau" :op "Ip")
Oracle Span 34-35:  led => lead-02
Oracle Span 19-23:  Ministry of Public Security => (government-organization :name (name :op "Security" :op "Public" :op "of" :op "Ministry"))
Oracle Span 41-43:  narcotics bureau => (government-organization :name (name :op "Bureau" :op "Narcotics"))
Oracle Span 11-12:  of => include-91
Oracle Span 3-4:  person => person
Oracle Span 32-33:  Police => police
Oracle Span 4-5:  team => team

Extra span: Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Extra span: out in => (country :name (name :op "Hong" :op "Kong"))
Incorrect span: narcotics bureau => (person :name (name :op "Ip" :op "Lau"))
Extra span: Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Extra span: led by => (country :name (name :op "Hong" :op "Kong"))
Extra span: by the => (country :name (name :op "Hong" :op "Kong"))
Extra span: the Chinese Ministry of Public => (organization :name (name :op "Ministry" :op "of" :op "Public" :op "Security" :op "Chen"))
Extra span: control => control-01
Extra span: narcotics => narcotic
Extra span: Director of Bureau => (organization :name (name :op "Bureau" :op "of" :op "narcotics"))
Missing span: Chen cunyi => (person :name (name :op "Cunyi" :op "Chen"))
Missing span: Bureau of narcotics control => (government-organization :name (name :op "Control" :op "Narcotics" :op "of" :op "Bureau"))
Missing span: Ministry of Public Security => (government-organization :name (name :op "Security" :op "Public" :op "of" :op "Ministry"))
Missing span: Ip Lau Chuen => (name :op "Chuen" :op "Lau" :op "Ip")
Missing span: narcotics bureau => (government-organization :name (name :op "Bureau" :op "Narcotics"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: and => and
Missing span: led => lead-02
Missing span: head => head-01
Missing span: carried => carry-03
Missing span: Police => police
Missing span: of => include-91
Missing span: 11 => (person :quant 11)
Missing span: Director => (have-org-role-91 :ARG2 director)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	11-person	_	JJ	JJ	_	3	amod	_	_
3	team	_	NN	NN	_	5	nsubjpass	_	_
4	was	_	VBD	VBD	_	5	auxpass	_	_
5	chaired	_	VBN	VBN	_	0	root	_	_
6	by	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	9	det	_	_
8	Deputy	_	NNP	NNP	_	9	nn	_	_
9	Director	_	NNP	NNP	_	6	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	Bureau	_	NNP	NNP	_	10	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	narcotics	_	NNS	NNS	_	14	nn	_	_
14	control	_	NN	NN	_	12	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	18	det	_	_
17	Chinese	_	NNP	NNP	_	18	nn	_	_
18	Ministry	_	NNP	NNP	_	15	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	Public	_	NNP	NNP	_	23	nn	_	_
21	Security	_	NNP	NNP	_	23	nn	_	_
22	Chen	_	NNP	NNP	_	23	nn	_	_
23	cunyi	_	NNS	NNS	_	19	pobj	_	_
24	and	_	CC	CC	_	5	cc	_	_
25	was	_	VBD	VBD	_	26	auxpass	_	_
26	briefed	_	VBN	VBN	_	5	conj	_	_
27	by	_	IN	IN	_	26	prep	_	_
28	the	_	DT	DT	_	31	det	_	_
29	Hong	_	NNP	NNP	_	31	nn	_	_
30	Kong	_	NNP	NNP	_	31	nn	_	_
31	Police	_	NNP	NNP	_	27	pobj	_	_
32	as	_	IN	IN	_	48	mark	_	_
33	led	_	VBN	VBN	_	48	csubj	_	_
34	by	_	IN	IN	_	33	prep	_	_
35	Hong	_	NNP	NNP	_	36	nn	_	_
36	Kong	_	NNP	NNP	_	38	poss	_	_
37	's	_	POS	POS	_	36	possessive	_	_
38	head	_	NN	NN	_	34	pobj	_	_
39	of	_	IN	IN	_	38	prep	_	_
40	narcotics	_	NNS	NNS	_	44	nn	_	_
41	bureau	_	NN	NN	_	44	nn	_	_
42	Ip	_	NNP	NNP	_	44	nn	_	_
43	Lau	_	NNP	NNP	_	44	nn	_	_
44	Chuen	_	NNP	NNP	_	39	pobj	_	_
45	on	_	IN	IN	_	44	prep	_	_
46	enforced	_	JJ	JJ	_	47	amod	_	_
47	actions	_	NNS	NNS	_	45	pobj	_	_
48	carried	_	VBD	VBD	_	26	advcl	_	_
49	out	_	RP	RP	_	48	prt	_	_
50	in	_	IN	IN	_	48	prep	_	_
51	Hong	_	NNP	NNP	_	52	nn	_	_
52	Kong	_	NNP	NNP	_	50	pobj	_	_
53	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, b / brief-01)
(a / and, op, c / chair-01)
(a / and, op, l / lead-02)
(b / brief-01, ARG0, p3 / police)
(b / brief-01, ARG1, t / team)
(b / brief-01, ARG2, a2 / action)
(c / chair-01, ARG0, p / person)
(c / chair-01, ARG1, t / team)
(c2 / country, name, n4 / name)
(c3 / city, name, n5 / name)
(c4 / carry-03, ARG1, a2 / action)
(c4 / carry-03, location, c3 / city)
(d / director, mod, d2 / deputy)
(e / enforce-01, ARG1, a2 / action)
(g / government-organization, mod, c2 / country)
(g / government-organization, name, n3 / name)
(g / government-organization, part, g2 / government-organization)
(g2 / government-organization, name, n2 / name)
(g3 / government-organization, name, n7 / name)
(g3 / government-organization, poss, c3 / city)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, g2 / government-organization)
(h / have-org-role-91, ARG2, d / director)
(h3 / head-01, ARG0, p4 / person)
(h3 / head-01, ARG1, g3 / government-organization)
(i / include-91, ARG1, p2 / person)
(i / include-91, ARG2, t / team)
(l / lead-02, ARG0, p4 / person)
(l / lead-02, ARG1, t / team)
(n / name, op, "Chen")
(n / name, op, "Cunyi")
(n2 / name, op, "Bureau")
(n2 / name, op, "Control")
(n2 / name, op, "Narcotics")
(n2 / name, op, "of")
(n3 / name, op, "Ministry")
(n3 / name, op, "Public")
(n3 / name, op, "Security")
(n3 / name, op, "of")
(n4 / name, op, "China")
(n5 / name, op, "Hong")
(n5 / name, op, "Kong")
(n6 / name, op, "Chuen")
(n6 / name, op, "Ip")
(n6 / name, op, "Lau")
(n7 / name, op, "Bureau")
(n7 / name, op, "Narcotics")
(p / person, name, n / name)
(p2 / person, quant, 11)
(p3 / police, mod, c3 / city)
(p4 / person, name, n6 / name)

Input(Some(Graph(null,ArrayBuffer(Span(52,54,List(3, 2, 1, 0),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(50,52,List(7, 6, 5, 4),out in,(country :name (name :op "Hong" :op "Kong")),false), Span(48,49,List(8),actions,action,false), Span(47,48,List(9),enforced,enforce-01,false), Span(41,43,List(13, 12, 11, 10),narcotics bureau,(person :name (name :op "Ip" :op "Lau")),false), Span(36,38,List(17, 16, 15, 14),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(34,36,List(21, 20, 19, 18),led by,(country :name (name :op "Hong" :op "Kong")),false), Span(30,32,List(25, 24, 23, 22),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(28,30,List(29, 28, 27, 26),by the,(country :name (name :op "Hong" :op "Kong")),false), Span(27,28,List(30),briefed,brief-01,false), Span(17,22,List(37, 36, 35, 34, 33, 32, 31),the Chinese Ministry of Public,(organization :name (name :op "Ministry" :op "of" :op "Public" :op "Security" :op "Chen")),false), Span(15,16,List(38),control,control-01,false), Span(14,15,List(39),narcotics,narcotic,false), Span(10,13,List(44, 43, 42, 41, 40),Director of Bureau,(organization :name (name :op "Bureau" :op "of" :op "narcotics")),false), Span(9,10,List(45),Deputy,deputy,false), Span(6,7,List(46),chaired,chair-01,false), Span(4,5,List(47),team,team,false), Span(3,4,List(48),person,person,false)),Map(30 -> brief-01, 39 -> narcotic, 45 -> deputy, 2 -> "Kong", 5 -> name, 48 -> person, 33 -> "Ministry", 27 -> name, 12 -> "Ip", 8 -> action, 15 -> name, 42 -> "Bureau", 36 -> "Security", 21 -> "Kong", 18 -> country, 24 -> "Kong", 35 -> "Public", 41 -> name, 7 -> "Kong", 17 -> "Hong", 1 -> name, 44 -> "narcotics", 23 -> name, 38 -> control-01, 47 -> team, 4 -> country, 26 -> country, 11 -> name, 32 -> name, 14 -> city, 20 -> "Hong", 29 -> "Kong", 46 -> chair-01, 34 -> "of", 6 -> "Hong", 28 -> "Hong", 40 -> organization, 0 -> city, 9 -> enforce-01, 43 -> "of", 22 -> city, 16 -> "Kong", 37 -> "Chen", 19 -> name, 3 -> "Hong", 10 -> person, 25 -> "Hong", 31 -> organization, 13 -> "Lau"),Map(e -> enforce-01, n -> name, c8 -> chair-01, t -> team, b -> brief-01, n7 -> name, c7 -> control-01, p2 -> person, c4 -> country, n4 -> name, d -> deputy, p -> person, c3 -> city, n3 -> name, a -> action, n6 -> name, o2 -> organization, n10 -> name, c6 -> country, n9 -> narcotic, c -> city, n8 -> name, o -> organization, n2 -> name, c2 -> country, c5 -> city, n5 -> name))),[Ljava.lang.String;@7d0614f,Annotation([Ljava.lang.String;@627d8516,[Ljava.lang.String;@5c10285a,[Ljava.lang.String;@6b667cb3),Annotation([Ljava.lang.String;@6f38a289,[Ljava.lang.String;@61e3cf4d,[Ledu.cmu.lti.nlp.amr.Dependency;@3cec79d3),Annotation([Ljava.lang.String;@64b70919,[Ljava.lang.String;@4e31c3ec,[Ljava.lang.String;@3157e4c0),Annotation([Ljava.lang.String;@6eaa21d8,[Ljava.lang.String;@328902d5,[Ledu.cmu.lti.nlp.amr.Entity;@72e789cb))
AMR:
(a / action, poss, c5 / city)
(b / brief-01, ARG0, c4 / country)
(b / brief-01, ARG1, t / team)
(b / brief-01, location, c / city)
(b / brief-01, location, c5 / city)
(b / brief-01, time, c6 / country)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(c2 / country, op, c / city)
(c3 / city, name, n4 / name)
(c4 / country, name, n5 / name)
(c5 / city, name, n6 / name)
(c5 / city, op, c7 / control-01)
(c6 / country, name, n7 / name)
(c7 / control-01, ARG0, o / organization)
(c7 / control-01, ARG1, n9 / narcotic)
(c7 / control-01, location, c3 / city)
(c8 / chair-01, ARG0, o2 / organization)
(c8 / chair-01, ARG1, t / team)
(e / enforce-01, ARG1, a / action)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n10 / name, op, "Bureau")
(n10 / name, op, "narcotics")
(n10 / name, op, "of")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "Ip")
(n3 / name, op, "Lau")
(n4 / name, op, "Hong")
(n4 / name, op, "Kong")
(n5 / name, op, "Hong")
(n5 / name, op, "Kong")
(n6 / name, op, "Hong")
(n6 / name, op, "Kong")
(n7 / name, op, "Hong")
(n7 / name, op, "Kong")
(n8 / name, op, "Chen")
(n8 / name, op, "Ministry")
(n8 / name, op, "Public")
(n8 / name, op, "Security")
(n8 / name, op, "of")
(o / organization, name, n8 / name)
(o2 / organization, mod, d / deputy)
(o2 / organization, name, n10 / name)
(p / person, name, n3 / name)
(p / person, op, c7 / control-01)
(t / team, poss, p2 / person)

Decoded in 1,241,092 microseconds
Sentence: The Hong Kong police and China's National Narcotics Control Commission also exchanged mutual concerns and discussed a number of issues which included investigations to counter drug trafficking and money laundering activities.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))
Spans:
Span 31-32:  activities => activity
Span 14-15:  concerns => concern-01
Span 16-17:  discussed => discuss-01
Span 26-27:  drug => drug
Span 12-13:  exchanged => exchange-01
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 23-24:  investigations => investigate-01
Span 20-21:  issues => issue
Span 30-31:  laundering => launder-01
Span 29-30:  money => money
Span 13-14:  mutual => mutual
Span 7-11:  National Narcotics Control Commission => (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 31-32:  activities => activity
Oracle Span 11-12:  also => include-91
Oracle Span 4-5:  and => and
Oracle Span 15-16:  and => and
Oracle Span 5-6:  China => (country :name (name :op "China"))
Oracle Span 14-15:  concerns => concern
Oracle Span 25-26:  counter => counter-01
Oracle Span 16-17:  discussed => discuss-01
Oracle Span 26-27:  drug => drug
Oracle Span 12-13:  exchanged => exchange-01
Oracle Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 23-24:  investigations => investigate-01
Oracle Span 20-21:  issues => issue
Oracle Span 30-31:  laundering => launder-01
Oracle Span 29-30:  money => money
Oracle Span 13-14:  mutual => mutual
Oracle Span 7-11:  National Narcotics Control Commission => (organization :name (name :op "Commission" :op "Control" :op "Narcotics" :op "National"))
Oracle Span 18-19:  number => number
Oracle Span 3-4:  police => police
Oracle Span 27-28:  trafficking => traffic-00

Incorrect span: concerns => concern-01
Incorrect span: National Narcotics Control Commission => (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))
Missing span: National Narcotics Control Commission => (organization :name (name :op "Commission" :op "Control" :op "Narcotics" :op "National"))
Missing span: China => (country :name (name :op "China"))
Missing span: and => and
Missing span: also => include-91
Missing span: counter => counter-01
Missing span: and => and
Missing span: trafficking => traffic-00
Missing span: number => number
Missing span: concerns => concern
Missing span: police => police
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Hong	_	NNP	NNP	_	4	nn	_	_
3	Kong	_	NNP	NNP	_	4	nn	_	_
4	police	_	NN	NN	_	13	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	China	_	NNP	NNP	_	11	poss	_	_
7	's	_	POS	POS	_	6	possessive	_	_
8	National	_	NNP	NNP	_	11	nn	_	_
9	Narcotics	_	NNP	NNP	_	11	nn	_	_
10	Control	_	NNP	NNP	_	11	nn	_	_
11	Commission	_	NNP	NNP	_	4	conj	_	_
12	also	_	RB	RB	_	13	advmod	_	_
13	exchanged	_	VBD	VBD	_	0	root	_	_
14	mutual	_	JJ	JJ	_	15	amod	_	_
15	concerns	_	NNS	NNS	_	13	dobj	_	_
16	and	_	CC	CC	_	13	cc	_	_
17	discussed	_	VBD	VBD	_	13	conj	_	_
18	a	_	DT	DT	_	19	det	_	_
19	number	_	NN	NN	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	issues	_	NNS	NNS	_	20	pobj	_	_
22	which	_	WDT	WDT	_	23	nsubj	_	_
23	included	_	VBD	VBD	_	21	rcmod	_	_
24	investigations	_	NNS	NNS	_	23	dobj	_	_
25	to	_	TO	TO	_	26	aux	_	_
26	counter	_	VB	VB	_	23	vmod	_	_
27	drug	_	NN	NN	_	28	nn	_	_
28	trafficking	_	NN	NN	_	26	dobj	_	_
29	and	_	CC	CC	_	28	cc	_	_
30	money	_	NN	NN	_	32	nn	_	_
31	laundering	_	NN	NN	_	32	nn	_	_
32	activities	_	NNS	NNS	_	28	conj	_	_
33	.	_	.	.	_	13	punct	_	_

Oracle:
(a / and, op, d / discuss-01)
(a / and, op, e / exchange-01)
(a2 / and, op, a3 / activity)
(a2 / and, op, t / traffic-00)
(a3 / activity, mod, l / launder-01)
(c / city, name, n / name)
(c2 / country, name, n3 / name)
(c3 / concern, mod, m / mutual)
(c4 / counter-01, ARG1, a2 / and)
(d / discuss-01, ARG0, p / police)
(d / discuss-01, ARG1, i / issue)
(d / discuss-01, ARG2, o / organization)
(e / exchange-01, ARG0, p / police)
(e / exchange-01, ARG1, c3 / concern)
(e / exchange-01, ARG2, o / organization)
(i / issue, quant, n4 / number)
(i2 / include-91, ARG1, i3 / investigate-01)
(i2 / include-91, ARG2, i / issue)
(i3 / investigate-01, purpose, c4 / counter-01)
(l / launder-01, ARG1, m2 / money)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Commission")
(n2 / name, op, "Control")
(n2 / name, op, "Narcotics")
(n2 / name, op, "National")
(n3 / name, op, "China")
(o / organization, name, n2 / name)
(o / organization, poss, c2 / country)
(p / police, mod, c / city)
(t / traffic-00, ARG1, d2 / drug)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),activities,activity,false), Span(30,31,List(1),laundering,launder-01,false), Span(29,30,List(2),money,money,false), Span(26,27,List(3),drug,drug,false), Span(23,24,List(4),investigations,investigate-01,false), Span(20,21,List(5),issues,issue,false), Span(16,17,List(6),discussed,discuss-01,false), Span(14,15,List(7),concerns,concern-01,false), Span(13,14,List(8),mutual,mutual,false), Span(12,13,List(9),exchanged,exchange-01,false), Span(7,11,List(15, 14, 13, 12, 11, 10),National Narcotics Control Commission,(organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission")),false), Span(1,3,List(19, 18, 17, 16),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> money, 5 -> issue, 12 -> "National", 15 -> "Commission", 8 -> mutual, 18 -> "Kong", 7 -> concern-01, 17 -> name, 1 -> launder-01, 4 -> investigate-01, 11 -> name, 14 -> "Control", 6 -> discuss-01, 0 -> activity, 9 -> exchange-01, 16 -> city, 19 -> "Hong", 3 -> drug, 10 -> organization, 13 -> "Narcotics"),Map(e -> exchange-01, n -> name, m2 -> mutual, m -> money, d -> drug, a -> activity, d2 -> discuss-01, i2 -> issue, i -> investigate-01, c -> concern-01, l -> launder-01, o -> organization, n2 -> name, c2 -> city))),[Ljava.lang.String;@7c1812b3,Annotation([Ljava.lang.String;@43034809,[Ljava.lang.String;@39e67516,[Ljava.lang.String;@77010a30),Annotation([Ljava.lang.String;@4bb003e9,[Ljava.lang.String;@12aa4996,[Ledu.cmu.lti.nlp.amr.Dependency;@18eec010),Annotation([Ljava.lang.String;@67c119b7,[Ljava.lang.String;@2ca5f1ed,[Ljava.lang.String;@6c03fb16),Annotation([Ljava.lang.String;@28348c6,[Ljava.lang.String;@6de0f580,[Ledu.cmu.lti.nlp.amr.Entity;@6e495b48))
AMR:
(a / activity, mod, l / launder-01)
(c / concern-01, ARG0, c2 / city)
(c / concern-01, ARG1, i2 / issue)
(c / concern-01, mod, m2 / mutual)
(c2 / city, name, n2 / name)
(d2 / discuss-01, ARG1, c / concern-01)
(e / exchange-01, ARG0, o / organization)
(e / exchange-01, ARG1, c / concern-01)
(i / investigate-01, ARG0, i2 / issue)
(i / investigate-01, ARG1, a / activity)
(l / launder-01, ARG0, d / drug)
(l / launder-01, ARG1, m / money)
(n / name, op, "Commission")
(n / name, op, "Control")
(n / name, op, "Narcotics")
(n / name, op, "National")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(o / organization, name, n / name)

Decoded in 368,179 microseconds
Sentence: The mainland party closed their visit after meeting with Hong Kong's deputy assistant commissioner for crime Yam TAT wing and held discussions on a proposal to further cooperate in combating cross-boundary drug trafficking activities.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (person :name (name :op "Yam"))
Spans:
Span 36-37:  activities => activity
Span 6-7:  after => after
Span 3-4:  closed => close-01
Span 30-31:  combating => combat-01
Span 28-29:  cooperate => cooperate-01
Span 16-17:  crime => crime
Span 31-32:  cross => cross-02
Span 12-13:  deputy => deputy
Span 22-23:  discussions => discuss-01
Span 34-35:  drug => drug
Span 27-28:  further => further
Span 9-11:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 1-2:  mainland => mainland
Span 25-26:  proposal => propose-01
Span 5-6:  visit => visit-01
Span 19-20:  wing => wing

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 36-37:  activities => activity
Oracle Span 6-7:  after => after
Oracle Span 20-21:  and => and
Oracle Span 13-14:  assistant => assist-01
Oracle Span 33-34:  boundary => boundary
Oracle Span 3-4:  closed => close-01
Oracle Span 30-31:  combating => combat-01
Oracle Span 14-15:  commissioner => (have-org-role-91 :ARG2 commissioner)
Oracle Span 28-29:  cooperate => cooperate-01
Oracle Span 16-17:  crime => crime
Oracle Span 31-32:  cross => cross-02
Oracle Span 12-13:  deputy => deputy
Oracle Span 22-23:  discussions => discuss-01
Oracle Span 34-35:  drug => drug
Oracle Span 27-28:  further => further
Oracle Span 9-11:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 1-2:  mainland => mainland
Oracle Span 7-8:  meeting => meet-03
Oracle Span 2-3:  party => party
Oracle Span 25-26:  proposal => propose-01
Oracle Span 35-36:  trafficking => traffic-00
Oracle Span 5-6:  visit => visit
Oracle Span 17-20:  Yam TAT wing => (person :name (name :op "Wing" :op "Tat" :op "Yam"))

Extra span: wing => wing
Incorrect span: visit => visit-01
Missing span: Yam TAT wing => (person :name (name :op "Wing" :op "Tat" :op "Yam"))
Missing span: and => and
Missing span: boundary => boundary
Missing span: trafficking => traffic-00
Missing span: meeting => meet-03
Missing span: commissioner => (have-org-role-91 :ARG2 commissioner)
Missing span: visit => visit
Missing span: party => party
Missing span: assistant => assist-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	mainland	_	JJ	JJ	_	3	amod	_	_
3	party	_	NN	NN	_	4	nsubj	_	_
4	closed	_	VBD	VBD	_	0	root	_	_
5	their	_	PRP$	PRP$	_	6	poss	_	_
6	visit	_	NN	NN	_	4	dobj	_	_
7	after	_	IN	IN	_	4	prep	_	_
8	meeting	_	NN	NN	_	7	pobj	_	_
9	with	_	IN	IN	_	4	prep	_	_
10	Hong	_	NNP	NNP	_	11	nn	_	_
11	Kong	_	NNP	NNP	_	15	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	deputy	_	JJ	JJ	_	15	amod	_	_
14	assistant	_	JJ	JJ	_	15	amod	_	_
15	commissioner	_	NN	NN	_	9	pobj	_	_
16	for	_	IN	IN	_	15	prep	_	_
17	crime	_	NN	NN	_	20	nn	_	_
18	Yam	_	NNP	NNP	_	20	nn	_	_
19	TAT	_	NNP	NNP	_	20	nn	_	_
20	wing	_	NNP	NNP	_	16	pobj	_	_
21	and	_	CC	CC	_	4	cc	_	_
22	held	_	VBD	VBD	_	4	conj	_	_
23	discussions	_	NNS	NNS	_	22	dobj	_	_
24	on	_	IN	IN	_	22	prep	_	_
25	a	_	DT	DT	_	26	det	_	_
26	proposal	_	NN	NN	_	24	pobj	_	_
27	to	_	TO	TO	_	29	aux	_	_
28	further	_	RBR	RBR	_	29	advmod	_	_
29	cooperate	_	VB	VB	_	26	vmod	_	_
30	in	_	IN	IN	_	29	prep	_	_
31	combating	_	VBG	VBG	_	30	pcomp	_	_
32	cross-boundary	_	JJ	JJ	_	35	amod	_	_
33	drug	_	NN	NN	_	35	nn	_	_
34	trafficking	_	NN	NN	_	35	nn	_	_
35	activities	_	NNS	NNS	_	31	dobj	_	_
36	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / close-01)
(a / and, op, d2 / discuss-01)
(a2 / after, op, m2 / meet-03)
(a3 / assist-01, ARG0, c3 / commissioner)
(a3 / assist-01, ARG2, c4 / crime)
(a4 / activity, mod, t2 / traffic-00)
(c / close-01, ARG0, p / party)
(c / close-01, ARG1, v / visit)
(c / close-01, time, a2 / after)
(c2 / city, name, n2 / name)
(c3 / commissioner, mod, d / deputy)
(c5 / cooperate-01, ARG2, c6 / combat-01)
(c5 / cooperate-01, mod, f / further)
(c6 / combat-01, ARG2, a4 / activity)
(c7 / cross-02, ARG0, a4 / activity)
(c7 / cross-02, ARG1, b / boundary)
(d2 / discuss-01, ARG0, p / party)
(d2 / discuss-01, ARG1, p3 / propose-01)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c2 / city)
(h / have-org-role-91, ARG2, c3 / commissioner)
(m2 / meet-03, ARG0, p / party)
(m2 / meet-03, ARG1, p2 / person)
(n / name, op, "Tat")
(n / name, op, "Wing")
(n / name, op, "Yam")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p / party, mod, m / mainland)
(p2 / person, name, n / name)
(p3 / propose-01, ARG1, c5 / cooperate-01)
(t2 / traffic-00, ARG1, d3 / drug)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),activities,activity,false), Span(34,35,List(1),drug,drug,false), Span(31,32,List(2),cross,cross-02,false), Span(30,31,List(3),combating,combat-01,false), Span(28,29,List(4),cooperate,cooperate-01,false), Span(27,28,List(5),further,further,false), Span(25,26,List(6),proposal,propose-01,false), Span(22,23,List(7),discussions,discuss-01,false), Span(19,20,List(8),wing,wing,false), Span(16,17,List(9),crime,crime,false), Span(12,13,List(10),deputy,deputy,false), Span(9,11,List(14, 13, 12, 11),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(6,7,List(15),after,after,false), Span(5,6,List(16),visit,visit-01,false), Span(3,4,List(17),closed,close-01,false), Span(1,2,List(18),mainland,mainland,false)),Map(2 -> cross-02, 5 -> further, 12 -> name, 15 -> after, 8 -> wing, 18 -> mainland, 7 -> discuss-01, 17 -> close-01, 1 -> drug, 4 -> cooperate-01, 11 -> city, 14 -> "Hong", 6 -> propose-01, 0 -> activity, 9 -> crime, 16 -> visit-01, 3 -> combat-01, 10 -> deputy, 13 -> "Kong"),Map(w -> wing, n -> name, d3 -> deputy, c4 -> crime, v -> visit-01, m -> mainland, d -> drug, p -> propose-01, a -> activity, c3 -> cooperate-01, d2 -> discuss-01, c6 -> close-01, a2 -> after, c -> cross-02, f -> further, c2 -> combat-01, c5 -> city))),[Ljava.lang.String;@1d61c6dc,Annotation([Ljava.lang.String;@53c68ce,[Ljava.lang.String;@6f9ad11c,[Ljava.lang.String;@4b2d44bc),Annotation([Ljava.lang.String;@58e92c23,[Ljava.lang.String;@3e7545e8,[Ledu.cmu.lti.nlp.amr.Dependency;@75e710b),Annotation([Ljava.lang.String;@26f7cdf8,[Ljava.lang.String;@376e7531,[Ljava.lang.String;@23202c31),Annotation([Ljava.lang.String;@5782d777,[Ljava.lang.String;@4f824872,[Ledu.cmu.lti.nlp.amr.Entity;@b016b4e))
AMR:
(c / cross-02, ARG0, d3 / deputy)
(c / cross-02, ARG1, a / activity)
(c2 / combat-01, ARG1, a / activity)
(c3 / cooperate-01, ARG1, d / drug)
(c3 / cooperate-01, degree, f / further)
(c3 / cooperate-01, manner, c2 / combat-01)
(c5 / city, name, n / name)
(c6 / close-01, ARG0, c5 / city)
(c6 / close-01, ARG1, v / visit-01)
(c6 / close-01, time, a2 / after)
(d2 / discuss-01, ARG1, p / propose-01)
(d2 / discuss-01, ARG2, v / visit-01)
(n / name, op, "Hong")
(n / name, op, "Kong")
(p / propose-01, ARG0, m / mainland)
(p / propose-01, ARG1, c3 / cooperate-01)
(v / visit-01, ARG0, c4 / crime)
(w / wing, mod, c4 / crime)

Decoded in 1,020,350 microseconds
Sentence: 2002-07-25

mkDayMonthYear(2002-07-25,25,07,2002)
mkDayMonthYear(2002-07-25,25,07,2002)
Spans:
Span 0-1:  2002-07-25 => (date-entity :day 25 :month 7 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2002-07-25 => (date-entity :day 25 :month 7 :year 2002)

Dependencies:
1	2002-07-25	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 25)
(d / date-entity, month, 7)
(d / date-entity, year, 2002)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-07-25,(date-entity :day 25 :month 7 :year 2002),false)),Map(2 -> 7, 1 -> 25, 0 -> date-entity, 3 -> 2002),Map(2 -> 25, 7 -> 7, d -> date-entity, 22 -> 2002))),[Ljava.lang.String;@29629fbb,Annotation([Ljava.lang.String;@681adc8f,[Ljava.lang.String;@3506d826,[Ljava.lang.String;@35dd9ed3),Annotation([Ljava.lang.String;@8ff5094,[Ljava.lang.String;@363f0ba0,[Ledu.cmu.lti.nlp.amr.Dependency;@35fb22a9),Annotation([Ljava.lang.String;@6c8909c3,[Ljava.lang.String;@1e008f36,[Ljava.lang.String;@50acf55d),Annotation([Ljava.lang.String;@3cae7b8b,[Ljava.lang.String;@184dbacc,[Ledu.cmu.lti.nlp.amr.Entity;@2aeefcc))
AMR:
(d / date-entity, day, 2 / 25)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2002)

Decoded in 8,534 microseconds
Sentence: Peru (PE)

NER Entity: (country :name (name :op "Peru"))
NER Entity: (country :name (name :op "PE"))
NER Entity: (country :name (name :op "Peru"))
Spans:
Span 0-1:  Peru => (country :name (name :op "Peru"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Peru => (country :name (name :op "Peru"))

Dependencies:
1	Peru	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	PE	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Peru")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Peru,(country :name (name :op "Peru")),false)),Map(2 -> "Peru", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@359ff4d9,Annotation([Ljava.lang.String;@7a22a3c2,[Ljava.lang.String;@f4cfd90,[Ljava.lang.String;@7ae9a33a),Annotation([Ljava.lang.String;@301aa982,[Ljava.lang.String;@5fc930f0,[Ledu.cmu.lti.nlp.amr.Dependency;@3701e6e4),Annotation([Ljava.lang.String;@c6634d,[Ljava.lang.String;@65f58c6e,[Ljava.lang.String;@73ad7e90),Annotation([Ljava.lang.String;@4ba380c7,[Ljava.lang.String;@784c5ef5,[Ledu.cmu.lti.nlp.amr.Entity;@31133b6e))
AMR:
(c / country, name, n / name)
(n / name, op, "Peru")

Decoded in 6,222 microseconds
Sentence: Narcotics; crime; military; government

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 2-3:  crime => crime

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 2-3:  crime => crime
Oracle Span 6-7:  government => (government-organization :ARG0-of govern-01)
Oracle Span 4-5:  military => military
Oracle Span 0-1:  Narcotics => narcotic

Extra span: ; => and
Extra span: ; => and
Missing span: military => military
Missing span: Narcotics => narcotic
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Narcotics	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	crime	_	NN	NN	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	military	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	government	_	NN	NN	_	5	dep	_	_

Oracle:
(a / and, op, c / crime)
(a / and, op, g / government-organization)
(a / and, op, m / military)
(a / and, op, n / narcotic)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),;,and,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),crime,crime,false), Span(1,2,List(3),;,and,false)),Map(2 -> crime, 1 -> and, 0 -> and, 3 -> and),Map(a3 -> and, a -> and, a2 -> and, c -> crime))),[Ljava.lang.String;@29528a22,Annotation([Ljava.lang.String;@7ea08277,[Ljava.lang.String;@6401d0a0,[Ljava.lang.String;@4ce14f05),Annotation([Ljava.lang.String;@71dfcf21,[Ljava.lang.String;@b965857,[Ledu.cmu.lti.nlp.amr.Dependency;@61f80d55),Annotation([Ljava.lang.String;@27a7ef08,[Ljava.lang.String;@280e8a1a,[Ljava.lang.String;@11e33bac),Annotation([Ljava.lang.String;@30501e60,[Ljava.lang.String;@289778cd,[Ledu.cmu.lti.nlp.amr.Entity;@7495699f))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a3 / and, op, c / crime)

Decoded in 14,808 microseconds
Sentence: Peruvian military document discloses former intelligence head Montesinos' links with drug trafficking

NER Entity: (thing :name (name :op "Peruvian"))
Spans:
Span 2-3:  document => document
Span 11-12:  drug => drug
Span 4-5:  former => former
Span 5-6:  intelligence => intelligence

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  discloses => disclose-01
Oracle Span 2-3:  document => document
Oracle Span 11-12:  drug => drug
Oracle Span 4-5:  former => former
Oracle Span 6-7:  head => head-01
Oracle Span 5-6:  intelligence => intelligence
Oracle Span 9-10:  links => link-01
Oracle Span 1-2:  military => military
Oracle Span 7-8:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 0-1:  Peruvian => (country :name (name :op "Peru"))
Oracle Span 12-13:  trafficking => traffic-00

Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: Peruvian => (country :name (name :op "Peru"))
Missing span: discloses => disclose-01
Missing span: links => link-01
Missing span: trafficking => traffic-00
Missing span: head => head-01
Missing span: military => military
Dependencies:
1	Peruvian	_	JJ	JJ	_	3	amod	_	_
2	military	_	JJ	JJ	_	3	amod	_	_
3	document	_	NN	NN	_	4	nsubj	_	_
4	discloses	_	VBZ	VBZ	_	0	root	_	_
5	former	_	JJ	JJ	_	6	amod	_	_
6	intelligence	_	NN	NN	_	7	nsubj	_	_
7	head	_	VB	VB	_	4	ccomp	_	_
8	Montesinos	_	NNP	NNP	_	10	poss	_	_
9	'	_	POS	POS	_	8	possessive	_	_
10	links	_	NNS	NNS	_	7	dobj	_	_
11	with	_	IN	IN	_	7	prep	_	_
12	drug	_	NN	NN	_	13	nn	_	_
13	trafficking	_	NN	NN	_	11	pobj	_	_

Oracle:
(c / country, name, n / name)
(d / disclose-01, ARG0, d2 / document)
(d / disclose-01, ARG1, l / link-01)
(d2 / document, mod, m / military)
(h / head-01, ARG0, p / person)
(h / head-01, ARG1, i / intelligence)
(h / head-01, mod, f / former)
(l / link-01, ARG1, p / person)
(l / link-01, ARG1, t / traffic-00)
(m / military, mod, c / country)
(n / name, op, "Peru")
(n2 / name, op, "Montesinos")
(p / person, name, n2 / name)
(t / traffic-00, ARG1, d3 / drug)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),drug,drug,false), Span(5,6,List(1),intelligence,intelligence,false), Span(4,5,List(2),former,former,false), Span(2,3,List(3),document,document,false)),Map(2 -> former, 1 -> intelligence, 0 -> drug, 3 -> document),Map(d -> drug, d2 -> document, i -> intelligence, f -> former))),[Ljava.lang.String;@7c2312fa,Annotation([Ljava.lang.String;@4cb0a000,[Ljava.lang.String;@5ff2e84b,[Ljava.lang.String;@74abbb),Annotation([Ljava.lang.String;@64a4dd8d,[Ljava.lang.String;@2dddc1b9,[Ledu.cmu.lti.nlp.amr.Dependency;@65a5d4f9),Annotation([Ljava.lang.String;@40298285,[Ljava.lang.String;@22367b8,[Ljava.lang.String;@41b0ae4c),Annotation([Ljava.lang.String;@af9a89f,[Ljava.lang.String;@6482eef,[Ledu.cmu.lti.nlp.amr.Entity;@1fcf9739))
AMR:
(d / drug, op, d2 / document)
(i / intelligence, mod, d2 / document)
(i / intelligence, mod, f / former)

Decoded in 34,378 microseconds
Sentence: A document signed by a former high-ranking officer of the Peruvian army and disclosed on 020725 mentions links with drug trafficking and could further compromise the situation of the former head of the National Intelligence Service of Peru Vladimiro Montesinos.

NER Entity: (thing :name (name :op "Peruvian"))
mkDayMonthYear(020725,25,07,2002)
mkDayMonthYear(020725,25,07,02)
NER Entity: (organization :name (name :op "National" :op "Intelligence" :op "Service"))
NER Entity: (country :name (name :op "Peru"))
NER Entity: (person :name (name :op "Vladimiro" :op "Montesinos"))
mkDayMonthYear(020725,25,07,2002)
mkDayMonthYear(020725,25,07,02)
Spans:
Span 17-18:  020725 => (date-entity :day 25 :month 7 :year 02)
Span 13-14:  army => army
Span 26-27:  compromise => compromise-01
Span 24-25:  could => possible
Span 15-16:  disclosed => disclose-01
Span 1-2:  document => document
Span 21-22:  drug => drug
Span 31-32:  former => former
Span 5-6:  former => former
Span 25-26:  further => further
Span 36-37:  Intelligence => intelligence
Span 38-40:  of Peru => (person :name (name :op "Vladimiro" :op "Montesinos"))
Span 33-36:  of the National => (organization :name (name :op "National" :op "Intelligence" :op "Service"))
Span 8-9:  ranking => rank-01
Span 28-29:  situation => situation

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 17-18:  020725 => (date-entity :day 25 :month 7 :year 2002)
Oracle Span 14-15:  and => and
Oracle Span 13-14:  army => army
Oracle Span 26-27:  compromise => compromise-02
Oracle Span 24-25:  could => possible
Oracle Span 15-16:  disclosed => disclose-01
Oracle Span 1-2:  document => document
Oracle Span 21-22:  drug => drug
Oracle Span 5-6:  former => former
Oracle Span 31-32:  former => former
Oracle Span 25-26:  further => further
Oracle Span 32-33:  head => head-01
Oracle Span 6-7:  high => high
Oracle Span 19-20:  links => link-01
Oracle Span 18-19:  mentions => mention-01
Oracle Span 35-38:  National Intelligence Service => (government-organization :name (name :op "Service" :op "Intelligence" :op "National"))
Oracle Span 9-10:  officer => (have-org-role-91 :ARG2 officer)
Oracle Span 39-40:  Peru => (country :name (name :op "Peru"))
Oracle Span 8-9:  ranking => rank-01
Oracle Span 2-3:  signed => sign-01
Oracle Span 28-29:  situation => situation
Oracle Span 22-23:  trafficking => traffic-00
Oracle Span 40-42:  Vladimiro Montesinos => (person :name (name :op "Montesinos" :op "Vladimiro"))

Extra span: of Peru => (person :name (name :op "Vladimiro" :op "Montesinos"))
Extra span: Intelligence => intelligence
Extra span: of the National => (organization :name (name :op "National" :op "Intelligence" :op "Service"))
Incorrect span: compromise => compromise-01
Incorrect span: 020725 => (date-entity :day 25 :month 7 :year 02)
Missing span: Peru => (country :name (name :op "Peru"))
Missing span: Vladimiro Montesinos => (person :name (name :op "Montesinos" :op "Vladimiro"))
Missing span: National Intelligence Service => (government-organization :name (name :op "Service" :op "Intelligence" :op "National"))
Missing span: 020725 => (date-entity :day 25 :month 7 :year 2002)
Missing span: and => and
Missing span: compromise => compromise-02
Missing span: head => head-01
Missing span: mentions => mention-01
Missing span: links => link-01
Missing span: trafficking => traffic-00
Missing span: signed => sign-01
Missing span: officer => (have-org-role-91 :ARG2 officer)
Missing span: high => high
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	document	_	NN	NN	_	17	nsubj	_	_
3	signed	_	VBN	VBN	_	2	dep	_	_
4	by	_	IN	IN	_	3	prep	_	_
5	a	_	DT	DT	_	8	det	_	_
6	former	_	JJ	JJ	_	8	amod	_	_
7	high-ranking	_	JJ	JJ	_	8	amod	_	_
8	officer	_	NN	NN	_	4	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	Peruvian	_	JJ	JJ	_	12	amod	_	_
12	army	_	NN	NN	_	9	pobj	_	_
13	and	_	CC	CC	_	3	cc	_	_
14	disclosed	_	VBN	VBN	_	3	conj	_	_
15	on	_	IN	IN	_	14	prep	_	_
16	020725	_	CD	CD	_	15	pobj	_	_
17	mentions	_	VBZ	VBZ	_	0	root	_	_
18	links	_	NNS	NNS	_	17	dobj	_	_
19	with	_	IN	IN	_	17	prep	_	_
20	drug	_	NN	NN	_	21	nn	_	_
21	trafficking	_	NN	NN	_	19	pobj	_	_
22	and	_	CC	CC	_	17	cc	_	_
23	could	_	MD	MD	_	25	aux	_	_
24	further	_	RBR	RBR	_	25	advmod	_	_
25	compromise	_	VB	VB	_	17	conj	_	_
26	the	_	DT	DT	_	27	det	_	_
27	situation	_	NN	NN	_	25	dobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	31	det	_	_
30	former	_	JJ	JJ	_	31	amod	_	_
31	head	_	NN	NN	_	28	pobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	the	_	DT	DT	_	36	det	_	_
34	National	_	NNP	NNP	_	36	nn	_	_
35	Intelligence	_	NNP	NNP	_	36	nn	_	_
36	Service	_	NNP	NNP	_	32	pobj	_	_
37	of	_	IN	IN	_	36	prep	_	_
38	Peru	_	NNP	NNP	_	40	nn	_	_
39	Vladimiro	_	NNP	NNP	_	40	nn	_	_
40	Montesinos	_	NNP	NNP	_	37	pobj	_	_
41	.	_	.	.	_	17	punct	_	_

Oracle:
(a / and, op, m / mention-01)
(a / and, op, p / possible)
(a2 / army, mod, c / country)
(c / country, name, n / name)
(c2 / compromise-02, ARG0, d / document)
(c2 / compromise-02, ARG1, s2 / situation)
(c2 / compromise-02, degree, f2 / further)
(d2 / disclose-01, ARG1, d / document)
(d2 / disclose-01, time, d3 / date-entity)
(d3 / date-entity, day, 25)
(d3 / date-entity, month, 7)
(d3 / date-entity, year, 2002)
(g / government-organization, name, n3 / name)
(g / government-organization, poss, c / country)
(h / have-org-role-91, ARG1, a2 / army)
(h / have-org-role-91, ARG2, o / officer)
(h4 / head-01, ARG0, p2 / person)
(h4 / head-01, ARG1, g / government-organization)
(h4 / head-01, mod, f3 / former)
(l / link-01, ARG1, t / traffic-00)
(m / mention-01, ARG0, d / document)
(m / mention-01, ARG1, l / link-01)
(n / name, op, "Peru")
(n2 / name, op, "Montesinos")
(n2 / name, op, "Vladimiro")
(n3 / name, op, "Intelligence")
(n3 / name, op, "National")
(n3 / name, op, "Service")
(p / possible, domain, c2 / compromise-02)
(p2 / person, name, n2 / name)
(r / rank-01, ARG2, h2 / high)
(s / sign-01, ARG1, d / document)
(s2 / situation, poss, p2 / person)
(t / traffic-00, ARG1, d4 / drug)

Input(Some(Graph(null,ArrayBuffer(Span(38,40,List(3, 2, 1, 0),of Peru,(person :name (name :op "Vladimiro" :op "Montesinos")),false), Span(36,37,List(4),Intelligence,intelligence,false), Span(33,36,List(9, 8, 7, 6, 5),of the National,(organization :name (name :op "National" :op "Intelligence" :op "Service")),false), Span(31,32,List(10),former,former,false), Span(28,29,List(11),situation,situation,false), Span(26,27,List(12),compromise,compromise-01,false), Span(25,26,List(13),further,further,false), Span(24,25,List(14),could,possible,false), Span(21,22,List(15),drug,drug,false), Span(17,18,List(19, 18, 17, 16),020725,(date-entity :day 25 :month 7 :year 02),false), Span(15,16,List(20),disclosed,disclose-01,false), Span(13,14,List(21),army,army,false), Span(8,9,List(22),ranking,rank-01,false), Span(5,6,List(23),former,former,false), Span(1,2,List(24),document,document,false)),Map(2 -> "Vladimiro", 5 -> organization, 12 -> compromise-01, 8 -> "Intelligence", 15 -> drug, 21 -> army, 18 -> 7, 24 -> document, 7 -> "National", 1 -> name, 17 -> 25, 23 -> former, 4 -> intelligence, 11 -> situation, 14 -> possible, 20 -> disclose-01, 6 -> name, 9 -> "Service", 0 -> person, 22 -> rank-01, 16 -> date-entity, 19 -> 02, 10 -> former, 3 -> "Montesinos", 13 -> further),Map(n -> name, 2 -> 25, d3 -> disclose-01, p2 -> possible, s -> situation, 7 -> 7, d -> drug, p -> person, a -> army, d2 -> date-entity, f3 -> former, r -> rank-01, i -> intelligence, c -> compromise-01, f2 -> further, d4 -> document, 0 -> 02, f -> former, o -> organization, n2 -> name))),[Ljava.lang.String;@5b498842,Annotation([Ljava.lang.String;@1cb37ee4,[Ljava.lang.String;@5bcb04cb,[Ljava.lang.String;@385e36d4),Annotation([Ljava.lang.String;@2fc2a205,[Ljava.lang.String;@2881ad47,[Ledu.cmu.lti.nlp.amr.Dependency;@2bef09c0),Annotation([Ljava.lang.String;@62ce72ff,[Ljava.lang.String;@58a63629,[Ljava.lang.String;@7de843ef),Annotation([Ljava.lang.String;@2e1af49b,[Ljava.lang.String;@3fd2322d,[Ledu.cmu.lti.nlp.amr.Entity;@56ac5c80))
AMR:
(a / army, op, c / compromise-01)
(c / compromise-01, ARG0, d4 / document)
(c / compromise-01, ARG1, s / situation)
(c / compromise-01, degree, f2 / further)
(c / compromise-01, mod, p2 / possible)
(c / compromise-01, time, o / organization)
(d2 / date-entity, day, 2 / 25)
(d2 / date-entity, month, 7 / 7)
(d2 / date-entity, year, 0 / 02)
(d3 / disclose-01, ARG0, p / person)
(d3 / disclose-01, ARG1, d4 / document)
(d3 / disclose-01, ARG2, d / drug)
(d3 / disclose-01, time, d2 / date-entity)
(f3 / former, op, c / compromise-01)
(i / intelligence, name, o / organization)
(n / name, op, "Montesinos")
(n / name, op, "Vladimiro")
(n2 / name, op, "Intelligence")
(n2 / name, op, "National")
(n2 / name, op, "Service")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(r / rank-01, ARG0, f / former)
(r / rank-01, ARG1, d3 / disclose-01)

Decoded in 701,566 microseconds
Sentence: A front-page story in Peru's national daily El Comercio said Montesinos could have authorized the military leadership at Alto Huallaga to deal in drugs so as to find the leaders of the rebel group shinning path and the Tupac Amaru Revolutionary Movement.

NER Entity: (country :name (name :op "Peru"))
NER Entity: (organization :name (name :op "El" :op "Comercio"))
NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (organization :name (name :op "Alto" :op "Huallaga"))
NER Entity: (organization :name (name :op "Tupac" :op "Amaru" :op "Revolutionary" :op "Movement"))
Spans:
Span 39-43:  and the Tupac Amaru => (organization :name (name :op "Tupac" :op "Amaru" :op "Revolutionary" :op "Movement"))
Span 16-17:  authorized => authorize-01
Span 14-15:  could => possible
Span 24-25:  deal => deal-01
Span 1-2:  front => front
Span 32-33:  leaders => (person :ARG0-of lead-02)
Span 19-21:  leadership at => (organization :name (name :op "Alto" :op "Huallaga"))
Span 8-10:  national daily => (organization :name (name :op "El" :op "Comercio"))
Span 3-4:  page => page
Span 38-39:  path => path
Span 6-7:  Peru => (country :name (name :op "Peru"))
Span 43-44:  Revolutionary => "Revolutionary"
Span 12-13:  said => say-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 21-23:  Alto Huallaga => (country-region :name (name :op "Huallaga" :op "Alto"))
Oracle Span 39-40:  and => and
Oracle Span 16-17:  authorized => authorize-01
Oracle Span 14-15:  could => possible
Oracle Span 24-25:  deal => deal-01
Oracle Span 26-27:  drugs => drug
Oracle Span 10-12:  El Comercio => (newspaper :name (name :op "Comercio" :op "El"))
Oracle Span 30-31:  find => find-01
Oracle Span 1-2:  front => front
Oracle Span 36-37:  group => group
Oracle Span 32-33:  leaders => (person :ARG0-of lead-02)
Oracle Span 19-20:  leadership => (person :ARG0-of lead-02)
Oracle Span 18-19:  military => military
Oracle Span 13-14:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 8-9:  national => nation
Oracle Span 3-4:  page => page
Oracle Span 6-7:  Peru => (country :name (name :op "Peru"))
Oracle Span 35-36:  rebel => rebel-01
Oracle Span 12-13:  said => say-01
Oracle Span 37-39:  shinning path => (name :op "Path" :op "Shinning")
Oracle Span 4-5:  story => story
Oracle Span 41-45:  Tupac Amaru Revolutionary Movement => (criminal-organization :name (name :op "Movement" :op "Revolutionary" :op "Amaru" :op "Tupac"))

Extra span: Revolutionary => "Revolutionary"
Extra span: and the Tupac Amaru => (organization :name (name :op "Tupac" :op "Amaru" :op "Revolutionary" :op "Movement"))
Extra span: path => path
Extra span: leadership at => (organization :name (name :op "Alto" :op "Huallaga"))
Extra span: national daily => (organization :name (name :op "El" :op "Comercio"))
Missing span: El Comercio => (newspaper :name (name :op "Comercio" :op "El"))
Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: Alto Huallaga => (country-region :name (name :op "Huallaga" :op "Alto"))
Missing span: shinning path => (name :op "Path" :op "Shinning")
Missing span: Tupac Amaru Revolutionary Movement => (criminal-organization :name (name :op "Movement" :op "Revolutionary" :op "Amaru" :op "Tupac"))
Missing span: find => find-01
Missing span: and => and
Missing span: group => group
Missing span: rebel => rebel-01
Missing span: drugs => drug
Missing span: military => military
Missing span: story => story
Missing span: leadership => (person :ARG0-of lead-02)
Missing span: national => nation
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	front-page	_	JJ	JJ	_	3	amod	_	_
3	story	_	NN	NN	_	11	nsubj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Peru	_	NNP	NNP	_	8	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	national	_	JJ	JJ	_	8	amod	_	_
8	daily	_	NN	NN	_	4	pobj	_	_
9	El	_	NNP	NNP	_	10	nn	_	_
10	Comercio	_	NNP	NNP	_	11	nsubj	_	_
11	said	_	VBD	VBD	_	0	root	_	_
12	Montesinos	_	NNP	NNP	_	15	nsubj	_	_
13	could	_	MD	MD	_	15	aux	_	_
14	have	_	VB	VB	_	15	aux	_	_
15	authorized	_	VBN	VBN	_	11	ccomp	_	_
16	the	_	DT	DT	_	18	det	_	_
17	military	_	JJ	JJ	_	18	amod	_	_
18	leadership	_	NN	NN	_	15	dobj	_	_
19	at	_	IN	IN	_	15	prep	_	_
20	Alto	_	NNP	NNP	_	21	nn	_	_
21	Huallaga	_	NNP	NNP	_	19	pobj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	deal	_	VB	VB	_	15	vmod	_	_
24	in	_	RP	RP	_	23	prt	_	_
25	drugs	_	NNS	NNS	_	23	dobj	_	_
26	so	_	RB	RB	_	27	advmod	_	_
27	as	_	RB	RB	_	23	advmod	_	_
28	to	_	TO	TO	_	29	aux	_	_
29	find	_	VB	VB	_	27	dep	_	_
30	the	_	DT	DT	_	31	det	_	_
31	leaders	_	NNS	NNS	_	29	dobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	the	_	DT	DT	_	35	det	_	_
34	rebel	_	JJ	JJ	_	35	amod	_	_
35	group	_	NN	NN	_	32	pobj	_	_
36	shinning	_	VBG	VBG	_	23	xcomp	_	_
37	path	_	NN	NN	_	36	dobj	_	_
38	and	_	CC	CC	_	37	cc	_	_
39	the	_	DT	DT	_	43	det	_	_
40	Tupac	_	NNP	NNP	_	43	nn	_	_
41	Amaru	_	NNP	NNP	_	43	nn	_	_
42	Revolutionary	_	NNP	NNP	_	43	nn	_	_
43	Movement	_	NNP	NNP	_	37	conj	_	_
44	.	_	.	.	_	11	punct	_	_

Oracle:
(a / authorize-01, ARG0, p3 / person)
(a / authorize-01, ARG1, d2 / deal-01)
(a / authorize-01, purpose, f2 / find-01)
(a2 / and, op, p5 / person)
(a2 / and, op, p6 / person)
(c / country, name, n4 / name)
(c2 / country-region, name, n6 / name)
(c4 / criminal-organization, name, n8 / name)
(d2 / deal-01, ARG1, d3 / drug)
(f2 / find-01, ARG1, a2 / and)
(g2 / group, name, n7 / name)
(l2 / lead-02, ARG0, p5 / person)
(l2 / lead-02, ARG1, g2 / group)
(l3 / lead-02, ARG0, p6 / person)
(l3 / lead-02, ARG1, c4 / criminal-organization)
(m / military, location, c2 / country-region)
(n / newspaper, mod, n3 / nation)
(n / newspaper, name, n2 / name)
(n / newspaper, part, s2 / story)
(n / newspaper, poss, c / country)
(n2 / name, op, "Comercio")
(n2 / name, op, "El")
(n4 / name, op, "Peru")
(n5 / name, op, "Montesinos")
(n6 / name, op, "Alto")
(n6 / name, op, "Huallaga")
(n7 / name, op, "Path")
(n7 / name, op, "Shinning")
(n8 / name, op, "Amaru")
(n8 / name, op, "Movement")
(n8 / name, op, "Revolutionary")
(n8 / name, op, "Tupac")
(p / page, mod, f / front)
(p2 / possible, domain, a / authorize-01)
(p3 / person, name, n5 / name)
(r / rebel-01, ARG0, g2 / group)
(s / say-01, ARG0, s2 / story)
(s / say-01, ARG1, p2 / possible)
(s2 / story, mod, p / page)

Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),Revolutionary,"Revolutionary",false), Span(39,43,List(6, 5, 4, 3, 2, 1),and the Tupac Amaru,(organization :name (name :op "Tupac" :op "Amaru" :op "Revolutionary" :op "Movement")),false), Span(38,39,List(7),path,path,false), Span(32,33,List(9, 8),leaders,(person :ARG0-of lead-02),false), Span(24,25,List(10),deal,deal-01,false), Span(19,21,List(14, 13, 12, 11),leadership at,(organization :name (name :op "Alto" :op "Huallaga")),false), Span(16,17,List(15),authorized,authorize-01,false), Span(14,15,List(16),could,possible,false), Span(12,13,List(17),said,say-01,false), Span(8,10,List(21, 20, 19, 18),national daily,(organization :name (name :op "El" :op "Comercio")),false), Span(6,7,List(24, 23, 22),Peru,(country :name (name :op "Peru")),false), Span(3,4,List(25),page,page,false), Span(1,2,List(26),front,front,false)),Map(2 -> name, 5 -> "Revolutionary", 12 -> name, 8 -> person, 15 -> authorize-01, 21 -> "Comercio", 18 -> organization, 24 -> "Peru", 7 -> path, 1 -> organization, 17 -> say-01, 23 -> name, 26 -> front, 4 -> "Amaru", 11 -> organization, 14 -> "Huallaga", 20 -> "El", 6 -> "Movement", 9 -> lead-02, 0 -> "Revolutionary", 22 -> country, 16 -> possible, 19 -> name, 10 -> deal-01, 3 -> "Tupac", 25 -> page, 13 -> "Alto"),Map(n -> name, o3 -> organization, p2 -> person, n4 -> name, s -> say-01, R -> "Revolutionary", d -> deal-01, p -> path, a -> authorize-01, n3 -> name, p4 -> page, o2 -> organization, c -> country, l -> lead-02, f -> front, o -> organization, p3 -> possible, n2 -> name))),[Ljava.lang.String;@69e49a81,Annotation([Ljava.lang.String;@1023150a,[Ljava.lang.String;@3ece1e79,[Ljava.lang.String;@ab20d7c),Annotation([Ljava.lang.String;@474fae39,[Ljava.lang.String;@4f4c789f,[Ledu.cmu.lti.nlp.amr.Dependency;@13f9ad9),Annotation([Ljava.lang.String;@1b7cae6f,[Ljava.lang.String;@21f8e55f,[Ljava.lang.String;@d5ce97f),Annotation([Ljava.lang.String;@7048535f,[Ljava.lang.String;@e3994ef,[Ledu.cmu.lti.nlp.amr.Entity;@680d4a6a))
AMR:
(R / "Revolutionary", op, o / organization)
(a / authorize-01, ARG0, o / organization)
(a / authorize-01, ARG1, o2 / organization)
(c / country, name, n4 / name)
(d / deal-01, ARG0, o2 / organization)
(d / deal-01, ARG1, p4 / page)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, o3 / organization)
(n / name, op, "Amaru")
(n / name, op, "Movement")
(n / name, op, "Revolutionary")
(n / name, op, "Tupac")
(n2 / name, op, "Alto")
(n2 / name, op, "Huallaga")
(n3 / name, op, "Comercio")
(n3 / name, op, "El")
(n4 / name, op, "Peru")
(o / organization, name, n / name)
(o / organization, op, p / path)
(o2 / organization, name, n2 / name)
(o3 / organization, name, n3 / name)
(o3 / organization, poss, c / country)
(p3 / possible, domain, a / authorize-01)
(p4 / page, mod, f / front)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, p3 / possible)

Decoded in 918,106 microseconds
Sentence: Alto Huallaga is located northeast of the capital Lima.

NER Entity: (organization :name (name :op "Alto" :op "Huallaga"))
NER Entity: (country :name (name :op "Lima"))
Spans:
Span 0-2:  Alto Huallaga => (organization :name (name :op "Alto" :op "Huallaga"))
Span 7-8:  capital => capital
Span 4-5:  northeast => northeast

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-2:  Alto Huallaga => (country-region :name (name :op "Huallaga" :op "Alto"))
Oracle Span 7-8:  capital => capital
Oracle Span 8-9:  Lima => (name :op "Lima")
Oracle Span 3-4:  located => locate-01
Oracle Span 4-5:  northeast => northeast

Incorrect span: Alto Huallaga => (organization :name (name :op "Alto" :op "Huallaga"))
Missing span: Alto Huallaga => (country-region :name (name :op "Huallaga" :op "Alto"))
Missing span: Lima => (name :op "Lima")
Missing span: located => locate-01
Dependencies:
1	Alto	_	NNP	NNP	_	2	nn	_	_
2	Huallaga	_	NNP	NNP	_	4	nsubjpass	_	_
3	is	_	VBZ	VBZ	_	4	auxpass	_	_
4	located	_	VBN	VBN	_	0	root	_	_
5	northeast	_	RB	RB	_	4	advmod	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	9	det	_	_
8	capital	_	NN	NN	_	9	nn	_	_
9	Lima	_	NN	NN	_	6	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(c / country-region, name, n / name)
(c2 / capital, name, n2 / name)
(l / locate-01, ARG1, c / country-region)
(n / name, op, "Alto")
(n / name, op, "Huallaga")
(n2 / name, op, "Lima")

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),capital,capital,false), Span(4,5,List(1),northeast,northeast,false), Span(0,2,List(5, 4, 3, 2),Alto Huallaga,(organization :name (name :op "Alto" :op "Huallaga")),false)),Map(2 -> organization, 5 -> "Huallaga", 1 -> northeast, 4 -> "Alto", 0 -> capital, 3 -> name),Map(n -> northeast, c -> capital, o -> organization, n2 -> name))),[Ljava.lang.String;@2f04105,Annotation([Ljava.lang.String;@309028af,[Ljava.lang.String;@724c5cbe,[Ljava.lang.String;@70101687),Annotation([Ljava.lang.String;@70e889e9,[Ljava.lang.String;@418c020b,[Ledu.cmu.lti.nlp.amr.Dependency;@51351f28),Annotation([Ljava.lang.String;@21618fa7,[Ljava.lang.String;@15f2eda3,[Ljava.lang.String;@34cf294c),Annotation([Ljava.lang.String;@4d7aaca2,[Ljava.lang.String;@604b1e1d,[Ledu.cmu.lti.nlp.amr.Entity;@62566842))
AMR:
(c / capital, mod, n / northeast)
(n / northeast, location, o / organization)
(n2 / name, op, "Alto")
(n2 / name, op, "Huallaga")
(o / organization, name, n2 / name)

Decoded in 21,256 microseconds
Sentence: The story is based on the final report of the Attorney General' s office.

NER Entity: (thing :name (name :op "General" :op "'s"))
Spans:
Span 10-11:  Attorney => (have-org-role-91 :ARG2 attorney)
Span 6-7:  final => final
Span 11-13:  General 's => (thing :name (name :op "General" :op "'s"))

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 10-14:  Attorney General 's office => (organization :name (name :op "Office" :op "General's" :op "Attorney"))
Oracle Span 3-4:  based => base-02
Oracle Span 6-7:  final => final
Oracle Span 7-8:  report => report-01
Oracle Span 1-2:  story => story

Extra span: General 's => (thing :name (name :op "General" :op "'s"))
Extra span: Attorney => (have-org-role-91 :ARG2 attorney)
Missing span: Attorney General 's office => (organization :name (name :op "Office" :op "General's" :op "Attorney"))
Missing span: based => base-02
Missing span: report => report-01
Missing span: story => story
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	story	_	NN	NN	_	4	nsubjpass	_	_
3	is	_	VBZ	VBZ	_	4	auxpass	_	_
4	based	_	VBN	VBN	_	0	root	_	_
5	on	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	final	_	JJ	JJ	_	8	amod	_	_
8	report	_	NN	NN	_	5	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	Attorney	_	NNP	NNP	_	12	nn	_	_
12	General	_	NNP	NNP	_	15	poss	_	_
13	'	_	POS	POS	_	12	possessive	_	_
14	s	_	JJ	JJ	_	15	amod	_	_
15	office	_	NN	NN	_	9	pobj	_	_
16	.	_	.	.	_	4	punct	_	_

Oracle:
(b / base-02, ARG1, s / story)
(b / base-02, ARG2, r / report-01)
(n / name, op, "Attorney")
(n / name, op, "General's")
(n / name, op, "Office")
(o / organization, name, n / name)
(r / report-01, ARG0, o / organization)
(r / report-01, mod, f / final)

Input(Some(Graph(null,ArrayBuffer(Span(11,13,List(3, 2, 1, 0),General 's,(thing :name (name :op "General" :op "'s")),false), Span(10,11,List(5, 4),Attorney,(have-org-role-91 :ARG2 attorney),false), Span(6,7,List(6),final,final,false)),Map(2 -> "General", 5 -> attorney, 1 -> name, 4 -> have-org-role-91, 6 -> final, 0 -> thing, 3 -> "'s"),Map(n -> name, h -> have-org-role-91, t -> thing, a -> attorney, f -> final))),[Ljava.lang.String;@2f1ea80d,Annotation([Ljava.lang.String;@37191ef0,[Ljava.lang.String;@f1a45f8,[Ljava.lang.String;@5edf2821),Annotation([Ljava.lang.String;@4dbad37,[Ljava.lang.String;@7b4acdc2,[Ledu.cmu.lti.nlp.amr.Dependency;@26a262d6),Annotation([Ljava.lang.String;@11bd803,[Ljava.lang.String;@58f07f02,[Ljava.lang.String;@75798d03),Annotation([Ljava.lang.String;@40f8f5a8,[Ljava.lang.String;@1ffcf674,[Ledu.cmu.lti.nlp.amr.Entity;@442f92e6))
AMR:
(f / final, op, h / have-org-role-91)
(h / have-org-role-91, ARG0, t / thing)
(h / have-org-role-91, ARG2, a / attorney)
(n / name, op, "'s")
(n / name, op, "General")
(t / thing, name, n / name)

Decoded in 37,830 microseconds
Sentence: The Attorney General' s Office report collected an accusatory document handed over by an unnamed Peruvian army general.

NER Entity: (thing :name (name :op "General" :op "'s"))
NER Entity: (thing :name (name :op "Peruvian"))
Spans:
Span 16-17:  army => army
Span 1-2:  Attorney => (have-org-role-91 :ARG2 attorney)
Span 6-7:  collected => collect-01
Span 9-10:  document => document
Span 17-18:  general => general
Span 2-4:  General 's => (thing :name (name :op "General" :op "'s"))
Span 10-11:  handed => hand-02

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 8-9:  accusatory => accuse-01
Oracle Span 16-17:  army => army
Oracle Span 1-5:  Attorney General 's Office => (organization :name (name :op "Office" :op "General's" :op "Attorney"))
Oracle Span 6-7:  collected => collect-01
Oracle Span 9-10:  document => document
Oracle Span 17-18:  general => (have-org-role-91 :ARG2 general)
Oracle Span 10-11:  handed => hand-02
Oracle Span 15-16:  Peruvian => (country :name (name :op "Peru"))
Oracle Span 5-6:  report => (thing :ARG1-of report-01)
Oracle Span 14-15:  unnamed => (name-01 :polarity -)

Incorrect span: general => general
Extra span: General 's => (thing :name (name :op "General" :op "'s"))
Extra span: Attorney => (have-org-role-91 :ARG2 attorney)
Missing span: Attorney General 's Office => (organization :name (name :op "Office" :op "General's" :op "Attorney"))
Missing span: Peruvian => (country :name (name :op "Peru"))
Missing span: general => (have-org-role-91 :ARG2 general)
Missing span: report => (thing :ARG1-of report-01)
Missing span: unnamed => (name-01 :polarity -)
Missing span: accusatory => accuse-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Attorney	_	NNP	NNP	_	3	nn	_	_
3	General	_	NNP	NNP	_	7	poss	_	_
4	'	_	POS	POS	_	3	possessive	_	_
5	s	_	NNP	NNP	_	7	nn	_	_
6	Office	_	NNP	NNP	_	7	nn	_	_
7	report	_	NN	NN	_	8	nsubj	_	_
8	collected	_	VBD	VBD	_	0	root	_	_
9	an	_	DT	DT	_	11	det	_	_
10	accusatory	_	JJ	JJ	_	11	amod	_	_
11	document	_	NN	NN	_	8	dobj	_	_
12	handed	_	VBN	VBN	_	11	vmod	_	_
13	over	_	RP	RP	_	12	prt	_	_
14	by	_	IN	IN	_	12	prep	_	_
15	an	_	DT	DT	_	19	det	_	_
16	unnamed	_	JJ	JJ	_	19	amod	_	_
17	Peruvian	_	JJ	JJ	_	19	amod	_	_
18	army	_	NN	NN	_	19	nn	_	_
19	general	_	NN	NN	_	14	pobj	_	_
20	.	_	.	.	_	8	punct	_	_

Oracle:
(a2 / army, mod, c2 / country)
(c / collect-01, ARG0, t / thing)
(c / collect-01, ARG1, d / document)
(c2 / country, name, n2 / name)
(d / document, mod, a / accuse-01)
(h / hand-02, ARG1, d / document)
(h2 / have-org-role-91, ARG1, a2 / army)
(h2 / have-org-role-91, ARG2, g / general)
(n / name, op, "Attorney")
(n / name, op, "General's")
(n / name, op, "Office")
(n2 / name, op, "Peru")
(n3 / name-01, polarity, -)
(o / organization, name, n / name)
(r / report-01, ARG0, o / organization)
(r / report-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),general,general,false), Span(16,17,List(1),army,army,false), Span(10,11,List(2),handed,hand-02,false), Span(9,10,List(3),document,document,false), Span(6,7,List(4),collected,collect-01,false), Span(2,4,List(8, 7, 6, 5),General 's,(thing :name (name :op "General" :op "'s")),false), Span(1,2,List(10, 9),Attorney,(have-org-role-91 :ARG2 attorney),false)),Map(2 -> hand-02, 5 -> thing, 8 -> "'s", 7 -> "General", 1 -> army, 4 -> collect-01, 6 -> name, 9 -> have-org-role-91, 0 -> general, 10 -> attorney, 3 -> document),Map(n -> name, h -> hand-02, h2 -> have-org-role-91, t -> thing, d -> document, g -> general, a -> army, a2 -> attorney, c -> collect-01))),[Ljava.lang.String;@7d070ef5,Annotation([Ljava.lang.String;@7a55f148,[Ljava.lang.String;@2e2f720,[Ljava.lang.String;@3ae2ed38),Annotation([Ljava.lang.String;@7f572c37,[Ljava.lang.String;@2add4d24,[Ledu.cmu.lti.nlp.amr.Dependency;@3f93e4a8),Annotation([Ljava.lang.String;@12b5454f,[Ljava.lang.String;@5445f5ba,[Ljava.lang.String;@1431267b),Annotation([Ljava.lang.String;@342726f1,[Ljava.lang.String;@c808207,[Ledu.cmu.lti.nlp.amr.Entity;@77134e08))
AMR:
(c / collect-01, ARG1, d / document)
(g / general, mod, a / army)
(h / hand-02, ARG1, d / document)
(h / hand-02, ARG2, g / general)
(h2 / have-org-role-91, ARG0, t / thing)
(h2 / have-org-role-91, ARG1, a / army)
(h2 / have-org-role-91, ARG2, a2 / attorney)
(n / name, op, "'s")
(n / name, op, "General")
(t / thing, name, n / name)

Decoded in 164,996 microseconds
Sentence: El Comercio said that in 920000 the government of then-president Alberto Fujimori put into effect the intelligence operation Scorpion to fight terrorism and drug trafficking in the Amazon region.

NER Entity: (organization :name (name :op "El" :op "Comercio"))
mkDayMonthYear(920000,00,00,92)
NER Entity: (person :name (name :op "Alberto" :op "Fujimori"))
NER Entity: (organization :name (name :op "Scorpion"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (organization :name (name :op "Scorpion"))
mkDayMonthYear(920000,00,00,92)
Spans:
Span 10-12:  - president => (person :name (name :op "Alberto" :op "Fujimori"))
Span 5-6:  920000 => (date-entity :day 0 :month 0 :year 92)
Span 25-26:  drug => drug
Span 0-2:  El Comercio => (organization :name (name :op "El" :op "Comercio"))
Span 22-23:  fight => fight-01
Span 18-19:  intelligence => intelligence
Span 19-20:  operation => operation
Span 30-31:  region => region
Span 2-3:  said => say-01
Span 23-24:  terrorism => terrorism
Span 9-10:  then => then

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 5-6:  920000 => (date-entity :year 1992)
Oracle Span 12-14:  Alberto Fujimori => (person :name (name :op "Fujimori" :op "Alberto"))
Oracle Span 29-30:  Amazon => (country-region :name (name :op "Amazon"))
Oracle Span 24-25:  and => and
Oracle Span 25-26:  drug => drug
Oracle Span 16-17:  effect => effect
Oracle Span 0-2:  El Comercio => (newspaper :name (name :op "Comercio" :op "El"))
Oracle Span 22-23:  fight => fight-02
Oracle Span 7-8:  government => (government-organization :ARG1-of have-org-role-91)
Oracle Span 18-19:  intelligence => intelligence
Oracle Span 19-20:  operation => operation
Oracle Span 11-12:  president => president
Oracle Span 14-15:  put => put-03
Oracle Span 2-3:  said => say-01
Oracle Span 20-21:  Scorpion => (name :op "Scorpion")
Oracle Span 23-24:  terrorism => terrorism
Oracle Span 9-10:  then => then
Oracle Span 26-27:  trafficking => traffic-00

Extra span: region => region
Incorrect span: fight => fight-01
Extra span: - president => (person :name (name :op "Alberto" :op "Fujimori"))
Incorrect span: 920000 => (date-entity :day 0 :month 0 :year 92)
Incorrect span: El Comercio => (organization :name (name :op "El" :op "Comercio"))
Missing span: El Comercio => (newspaper :name (name :op "Comercio" :op "El"))
Missing span: Alberto Fujimori => (person :name (name :op "Fujimori" :op "Alberto"))
Missing span: Scorpion => (name :op "Scorpion")
Missing span: Amazon => (country-region :name (name :op "Amazon"))
Missing span: 920000 => (date-entity :year 1992)
Missing span: put => put-03
Missing span: fight => fight-02
Missing span: and => and
Missing span: trafficking => traffic-00
Missing span: effect => effect
Missing span: president => president
Missing span: government => (government-organization :ARG1-of have-org-role-91)
Dependencies:
1	El	_	NNP	NNP	_	2	nn	_	_
2	Comercio	_	NNP	NNP	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	13	mark	_	_
5	in	_	IN	IN	_	13	prep	_	_
6	920000	_	CD	CD	_	5	pobj	_	_
7	the	_	DT	DT	_	8	det	_	_
8	government	_	NN	NN	_	13	nsubj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	then-president	_	JJ	JJ	_	12	amod	_	_
11	Alberto	_	NNP	NNP	_	12	nn	_	_
12	Fujimori	_	NNP	NNP	_	9	pobj	_	_
13	put	_	VBD	VBD	_	3	ccomp	_	_
14	into	_	IN	IN	_	13	prep	_	_
15	effect	_	NN	NN	_	14	pobj	_	_
16	the	_	DT	DT	_	18	det	_	_
17	intelligence	_	NN	NN	_	18	nn	_	_
18	operation	_	NN	NN	_	13	dobj	_	_
19	Scorpion	_	VBG	VBG	_	18	vmod	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	fight	_	VB	VB	_	19	xcomp	_	_
22	terrorism	_	NN	NN	_	25	nn	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	drug	_	NN	NN	_	22	conj	_	_
25	trafficking	_	NN	NN	_	21	dobj	_	_
26	in	_	IN	IN	_	21	prep	_	_
27	the	_	DT	DT	_	29	det	_	_
28	Amazon	_	NNP	NNP	_	29	nn	_	_
29	region	_	NN	NN	_	26	pobj	_	_
30	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, t2 / terrorism)
(a / and, op, t3 / traffic-00)
(c / country-region, name, n4 / name)
(d2 / date-entity, year, 1992)
(f / fight-02, ARG1, a / and)
(f / fight-02, location, c / country-region)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, p3 / president)
(n / newspaper, name, n2 / name)
(n2 / name, op, "Comercio")
(n2 / name, op, "El")
(n3 / name, op, "Alberto")
(n3 / name, op, "Fujimori")
(n4 / name, op, "Amazon")
(n5 / name, op, "Scorpion")
(o / operation, mod, i / intelligence)
(o / operation, name, n5 / name)
(p / put-03, ARG0, g / government-organization)
(p / put-03, ARG1, o / operation)
(p / put-03, ARG2, e / effect)
(p / put-03, purpose, f / fight-02)
(p / put-03, time, d2 / date-entity)
(p2 / person, name, n3 / name)
(p3 / president, time, t / then)
(s / say-01, ARG0, n / newspaper)
(s / say-01, ARG1, p / put-03)
(t3 / traffic-00, ARG1, d / drug)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),region,region,false), Span(25,26,List(1),drug,drug,false), Span(23,24,List(2),terrorism,terrorism,false), Span(22,23,List(3),fight,fight-01,false), Span(19,20,List(4),operation,operation,false), Span(18,19,List(5),intelligence,intelligence,false), Span(10,12,List(9, 8, 7, 6),- president,(person :name (name :op "Alberto" :op "Fujimori")),false), Span(9,10,List(10),then,then,false), Span(5,6,List(14, 13, 12, 11),920000,(date-entity :day 0 :month 0 :year 92),false), Span(2,3,List(15),said,say-01,false), Span(0,2,List(19, 18, 17, 16),El Comercio,(organization :name (name :op "El" :op "Comercio")),false)),Map(2 -> terrorism, 5 -> intelligence, 12 -> 0, 15 -> say-01, 8 -> "Alberto", 18 -> "El", 7 -> name, 17 -> name, 1 -> drug, 4 -> operation, 11 -> date-entity, 14 -> 92, 6 -> person, 0 -> region, 9 -> "Fujimori", 16 -> organization, 19 -> "Comercio", 3 -> fight-01, 10 -> then, 13 -> 0),Map(n -> name, t -> terrorism, s -> say-01, d -> drug, p -> person, o2 -> organization, d2 -> date-entity, 02 -> 0, t2 -> then, r -> region, i -> intelligence, f -> fight-01, 0 -> 0, 9 -> 92, o -> operation, n2 -> name))),[Ljava.lang.String;@6a0cbc6f,Annotation([Ljava.lang.String;@67110f71,[Ljava.lang.String;@6f89292e,[Ljava.lang.String;@20749d9),Annotation([Ljava.lang.String;@de77232,[Ljava.lang.String;@62628e78,[Ledu.cmu.lti.nlp.amr.Dependency;@44841b43),Annotation([Ljava.lang.String;@7c75db8b,[Ljava.lang.String;@4ab550d5,[Ljava.lang.String;@3cd206b5),Annotation([Ljava.lang.String;@58e85c6f,[Ljava.lang.String;@a137d7a,[Ledu.cmu.lti.nlp.amr.Entity;@6ac0b715))
AMR:
(d2 / date-entity, day, 0 / 0)
(d2 / date-entity, month, 02 / 0)
(d2 / date-entity, op, f / fight-01)
(d2 / date-entity, year, 9 / 92)
(f / fight-01, ARG0, o / operation)
(f / fight-01, ARG1, t / terrorism)
(f / fight-01, ARG2, r / region)
(n / name, op, "Alberto")
(n / name, op, "Fujimori")
(n2 / name, op, "Comercio")
(n2 / name, op, "El")
(o / operation, mod, i / intelligence)
(o2 / organization, name, n2 / name)
(p / person, mod, t2 / then)
(p / person, name, n / name)
(r / region, topic, d / drug)
(s / say-01, ARG0, o2 / organization)
(s / say-01, ARG1, o / operation)
(t2 / then, op, f / fight-01)

Decoded in 641,477 microseconds
Sentence: As part of the SCORPION plan several agents infiltrated into the groups to gather information on the main rebel and drug-trafficking commanders.

NER Entity: (country :name (name :op "SCORPION"))
Spans:
Span 23-24:  commanders => (person :ARG0-of command-02)
Span 20-21:  drug => drug
Span 8-9:  infiltrated => infiltrate-01
Span 14-15:  information => information
Span 17-18:  main => main
Span 6-7:  several => several

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 7-8:  agents => (have-org-role-91 :ARG2 agent)
Oracle Span 19-20:  and => and
Oracle Span 23-24:  commanders => (person :ARG0-of command-02)
Oracle Span 20-21:  drug => drug
Oracle Span 13-14:  gather => gather-01
Oracle Span 11-12:  groups => group
Oracle Span 8-9:  infiltrated => infiltrate-01
Oracle Span 14-15:  information => information
Oracle Span 17-18:  main => main
Oracle Span 2-3:  of => include-91
Oracle Span 5-6:  plan => plan-01
Oracle Span 18-19:  rebel => rebel
Oracle Span 4-5:  SCORPION => (event :name (name :op "Scorpion"))
Oracle Span 6-7:  several => several
Oracle Span 22-23:  trafficking => traffic-00

Missing span: SCORPION => (event :name (name :op "Scorpion"))
Missing span: gather => gather-01
Missing span: and => and
Missing span: trafficking => traffic-00
Missing span: rebel => rebel
Missing span: of => include-91
Missing span: plan => plan-01
Missing span: groups => group
Missing span: agents => (have-org-role-91 :ARG2 agent)
Dependencies:
1	As	_	IN	IN	_	9	prep	_	_
2	part	_	NN	NN	_	1	pobj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	SCORPION	_	NNP	NNP	_	6	nn	_	_
6	plan	_	NN	NN	_	3	pobj	_	_
7	several	_	JJ	JJ	_	8	amod	_	_
8	agents	_	NNS	NNS	_	9	nsubj	_	_
9	infiltrated	_	VBD	VBD	_	0	root	_	_
10	into	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	groups	_	NNS	NNS	_	10	pobj	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	gather	_	VB	VB	_	9	xcomp	_	_
15	information	_	NN	NN	_	14	dobj	_	_
16	on	_	IN	IN	_	14	prep	_	_
17	the	_	DT	DT	_	19	det	_	_
18	main	_	JJ	JJ	_	19	amod	_	_
19	rebel	_	NN	NN	_	16	pobj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	drug-trafficking	_	JJ	JJ	_	22	amod	_	_
22	commanders	_	NNS	NNS	_	19	conj	_	_
23	.	_	.	.	_	9	punct	_	_

Oracle:
(a2 / and, op, r / rebel)
(a2 / and, op, t / traffic-00)
(c / command-02, ARG0, p2 / person)
(c / command-02, ARG1, a2 / and)
(e / event, name, n / name)
(g2 / gather-01, ARG1, i3 / information)
(h / have-org-role-91, ARG2, a / agent)
(i / infiltrate-01, ARG1, g / group)
(i / infiltrate-01, purpose, g2 / gather-01)
(i2 / include-91, ARG1, i / infiltrate-01)
(i2 / include-91, ARG2, e / event)
(i3 / information, topic, p2 / person)
(n / name, op, "Scorpion")
(p / plan-01, ARG1, e / event)
(r / rebel, mod, m / main)
(t / traffic-00, ARG1, d / drug)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(1, 0),commanders,(person :ARG0-of command-02),false), Span(20,21,List(2),drug,drug,false), Span(17,18,List(3),main,main,false), Span(14,15,List(4),information,information,false), Span(8,9,List(5),infiltrated,infiltrate-01,false), Span(6,7,List(6),several,several,false)),Map(2 -> drug, 5 -> infiltrate-01, 1 -> command-02, 4 -> information, 6 -> several, 0 -> person, 3 -> main),Map(s -> several, m -> main, d -> drug, p -> person, i2 -> infiltrate-01, i -> information, c -> command-02))),[Ljava.lang.String;@468be356,Annotation([Ljava.lang.String;@5c9ac4cc,[Ljava.lang.String;@4df39a88,[Ljava.lang.String;@2264e43c),Annotation([Ljava.lang.String;@3bec2275,[Ljava.lang.String;@31da3d60,[Ledu.cmu.lti.nlp.amr.Dependency;@60acd609),Annotation([Ljava.lang.String;@65ec8b24,[Ljava.lang.String;@3f49e266,[Ljava.lang.String;@5f18f9d2),Annotation([Ljava.lang.String;@598260a6,[Ljava.lang.String;@58b67519,[Ledu.cmu.lti.nlp.amr.Entity;@281ce6bb))
AMR:
(c / command-02, ARG0, p / person)
(c / command-02, ARG1, i2 / infiltrate-01)
(i2 / infiltrate-01, ARG0, d / drug)
(i2 / infiltrate-01, ARG1, i / information)
(i2 / infiltrate-01, ARG2, m / main)
(p / person, quant, s / several)

Decoded in 143,849 microseconds
Sentence: There also were additional orders for transporting cocaine as a cover for the agents.

Spans:
Span 3-4:  additional => additional
Span 7-8:  cocaine => cocaine
Span 10-11:  cover => cover-04
Span 4-5:  orders => order-01
Span 6-7:  transporting => transport-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  additional => additional
Oracle Span 13-14:  agents => (have-org-role-91 :ARG2 agent)
Oracle Span 1-2:  also => also
Oracle Span 7-8:  cocaine => cocaine
Oracle Span 10-11:  cover => cover-04
Oracle Span 4-5:  orders => order-01
Oracle Span 6-7:  transporting => transport-01

Missing span: also => also
Missing span: agents => (have-org-role-91 :ARG2 agent)
Dependencies:
1	There	_	EX	EX	_	3	expl	_	_
2	also	_	RB	RB	_	3	advmod	_	_
3	were	_	VBD	VBD	_	0	root	_	_
4	additional	_	JJ	JJ	_	5	amod	_	_
5	orders	_	NNS	NNS	_	3	nsubj	_	_
6	for	_	IN	IN	_	5	prep	_	_
7	transporting	_	VBG	VBG	_	6	pcomp	_	_
8	cocaine	_	NN	NN	_	7	dobj	_	_
9	as	_	IN	IN	_	7	prep	_	_
10	a	_	DT	DT	_	11	det	_	_
11	cover	_	NN	NN	_	9	pobj	_	_
12	for	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	agents	_	NNS	NNS	_	12	pobj	_	_
15	.	_	.	.	_	3	punct	_	_

Oracle:
(c2 / cover-04, ARG0, t / transport-01)
(h / have-org-role-91, ARG2, a2 / agent)
(o / order-01, ARG1, t / transport-01)
(o / order-01, mod, a / also)
(o / order-01, mod, a3 / additional)
(t / transport-01, ARG1, c / cocaine)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),cover,cover-04,false), Span(7,8,List(1),cocaine,cocaine,false), Span(6,7,List(2),transporting,transport-01,false), Span(4,5,List(3),orders,order-01,false), Span(3,4,List(4),additional,additional,false)),Map(2 -> transport-01, 1 -> cocaine, 4 -> additional, 0 -> cover-04, 3 -> order-01),Map(t -> transport-01, a -> additional, c -> cover-04, o -> order-01, c2 -> cocaine))),[Ljava.lang.String;@30d25c03,Annotation([Ljava.lang.String;@7a1f8def,[Ljava.lang.String;@116a2108,[Ljava.lang.String;@5e8c34a0),Annotation([Ljava.lang.String;@7c1c5936,[Ljava.lang.String;@7aead3af,[Ledu.cmu.lti.nlp.amr.Dependency;@3ac8cf9b),Annotation([Ljava.lang.String;@55ec556,[Ljava.lang.String;@1b15f922,[Ljava.lang.String;@37ce3644),Annotation([Ljava.lang.String;@4b869331,[Ljava.lang.String;@38018b62,[Ledu.cmu.lti.nlp.amr.Entity;@ce9b9a9))
AMR:
(o / order-01, ARG1, t / transport-01)
(o / order-01, mod, a / additional)
(t / transport-01, ARG1, c2 / cocaine)
(t / transport-01, ARG2, c / cover-04)

Decoded in 35,574 microseconds
Sentence: Montesinos was a close adviser to former Peruvian President Alberto Fujimori.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (person :name (name :op "Alberto" :op "Fujimori"))
Spans:
Span 9-11:  Alberto Fujimori => (person :name (name :op "Alberto" :op "Fujimori"))
Span 6-7:  former => former
Span 8-9:  President => (have-org-role-91 :ARG2 president)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  adviser => (person :ARG0-of advise-01)
Oracle Span 9-11:  Alberto Fujimori => (person :name (name :op "Fujimori" :op "Alberto"))
Oracle Span 3-4:  close => close
Oracle Span 6-7:  former => former
Oracle Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Oracle Span 7-8:  Peruvian => (country :name (name :op "Peru"))
Oracle Span 8-9:  President => (have-org-role-91 :ARG2 president)

Incorrect span: Alberto Fujimori => (person :name (name :op "Alberto" :op "Fujimori"))
Missing span: Alberto Fujimori => (person :name (name :op "Fujimori" :op "Alberto"))
Missing span: Montesinos => (person :name (name :op "Montesinos"))
Missing span: Peruvian => (country :name (name :op "Peru"))
Missing span: adviser => (person :ARG0-of advise-01)
Missing span: close => close
Dependencies:
1	Montesinos	_	NNS	NNS	_	5	nsubj	_	_
2	was	_	VBD	VBD	_	5	cop	_	_
3	a	_	DT	DT	_	5	det	_	_
4	close	_	JJ	JJ	_	5	amod	_	_
5	adviser	_	NN	NN	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	former	_	JJ	JJ	_	11	amod	_	_
8	Peruvian	_	JJ	JJ	_	11	amod	_	_
9	President	_	NNP	NNP	_	11	nn	_	_
10	Alberto	_	NNP	NNP	_	11	nn	_	_
11	Fujimori	_	NNP	NNP	_	6	pobj	_	_
12	.	_	.	.	_	5	punct	_	_

Oracle:
(a / advise-01, ARG0, p / person)
(a / advise-01, ARG1, p3 / person)
(a / advise-01, mod, c2 / close)
(c / country, name, n / name)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Peru")
(n2 / name, op, "Alberto")
(n2 / name, op, "Fujimori")
(n3 / name, op, "Montesinos")
(p / person, domain, p4 / person)
(p2 / president, mod, f / former)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),Alberto Fujimori,(person :name (name :op "Alberto" :op "Fujimori")),false), Span(8,9,List(5, 4),President,(have-org-role-91 :ARG2 president),false), Span(6,7,List(6),former,former,false)),Map(2 -> "Alberto", 5 -> president, 1 -> name, 4 -> have-org-role-91, 6 -> former, 0 -> person, 3 -> "Fujimori"),Map(n -> name, h -> have-org-role-91, p2 -> president, p -> person, f -> former))),[Ljava.lang.String;@4ad3d266,Annotation([Ljava.lang.String;@3533df16,[Ljava.lang.String;@15d0849,[Ljava.lang.String;@4038cd3a),Annotation([Ljava.lang.String;@14ac77b9,[Ljava.lang.String;@3f4cd155,[Ledu.cmu.lti.nlp.amr.Dependency;@563a89b5),Annotation([Ljava.lang.String;@506dcf55,[Ljava.lang.String;@270b6b5e,[Ljava.lang.String;@7e94d093),Annotation([Ljava.lang.String;@7c6189d5,[Ljava.lang.String;@4248e66b,[Ledu.cmu.lti.nlp.amr.Entity;@3e6534e7))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Alberto")
(n / name, op, "Fujimori")
(p / person, mod, f / former)
(p / person, name, n / name)

Decoded in 32,913 microseconds
Sentence: Fujimori resigned in 001100 over a bribery scandal and is now imprisoned in Lima for alleged connection with the scandal.

NER Entity: (person :name (name :op "Fujimori"))
mkDayMonthYear(001100,00,11,00)
NER Entity: (country :name (name :op "Lima"))
mkDayMonthYear(001100,00,11,00)
Spans:
Span 3-4:  001100 => (date-entity :day 0 :month 11 :year 00)
Span 15-16:  alleged => allege-01
Span 16-17:  connection => connect-01
Span 11-12:  imprisoned => imprison-01
Span 10-11:  now => now
Span 1-2:  resigned => resign-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  001100 => (date-entity :month 11)
Oracle Span 15-16:  alleged => allege-01
Oracle Span 8-9:  and => and
Oracle Span 6-7:  bribery => bribe-01
Oracle Span 16-17:  connection => connect-01
Oracle Span 0-1:  Fujimori => (person :name (name :op "Fujimori"))
Oracle Span 11-12:  imprisoned => imprison-01
Oracle Span 13-14:  Lima => (city :name (name :op "Lima"))
Oracle Span 10-11:  now => now
Oracle Span 1-2:  resigned => resign-01
Oracle Span 7-8:  scandal => scandal

Incorrect span: 001100 => (date-entity :day 0 :month 11 :year 00)
Missing span: Fujimori => (person :name (name :op "Fujimori"))
Missing span: Lima => (city :name (name :op "Lima"))
Missing span: 001100 => (date-entity :month 11)
Missing span: and => and
Missing span: scandal => scandal
Missing span: bribery => bribe-01
Dependencies:
1	Fujimori	_	NNP	NNP	_	2	nsubj	_	_
2	resigned	_	VBD	VBD	_	0	root	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	001100	_	CD	CD	_	3	pobj	_	_
5	over	_	IN	IN	_	2	prep	_	_
6	a	_	DT	DT	_	8	det	_	_
7	bribery	_	NN	NN	_	8	nn	_	_
8	scandal	_	NN	NN	_	5	pobj	_	_
9	and	_	CC	CC	_	2	cc	_	_
10	is	_	VBZ	VBZ	_	12	auxpass	_	_
11	now	_	RB	RB	_	12	advmod	_	_
12	imprisoned	_	VBN	VBN	_	2	conj	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	Lima	_	NNP	NNP	_	13	pobj	_	_
15	for	_	IN	IN	_	12	prep	_	_
16	alleged	_	VBN	VBN	_	17	amod	_	_
17	connection	_	NN	NN	_	15	pobj	_	_
18	with	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	scandal	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, i / imprison-01)
(a / and, op, r / resign-01)
(c2 / city, name, n2 / name)
(c4 / connect-01, ARG1, p / person)
(c4 / connect-01, ARG1, s / scandal)
(c4 / connect-01, mod, a2 / allege-01)
(d / date-entity, month, 11)
(i / imprison-01, ARG1, p / person)
(i / imprison-01, location, c2 / city)
(i / imprison-01, time, n3 / now)
(n / name, op, "Fujimori")
(n2 / name, op, "Lima")
(p / person, name, n / name)
(r / resign-01, ARG0, p / person)
(r / resign-01, time, d / date-entity)
(s / scandal, mod, b / bribe-01)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),connection,connect-01,false), Span(15,16,List(1),alleged,allege-01,false), Span(11,12,List(2),imprisoned,imprison-01,false), Span(10,11,List(3),now,now,false), Span(3,4,List(7, 6, 5, 4),001100,(date-entity :day 0 :month 11 :year 00),false), Span(1,2,List(8),resigned,resign-01,false)),Map(2 -> imprison-01, 5 -> 0, 8 -> resign-01, 7 -> 00, 1 -> allege-01, 4 -> date-entity, 6 -> 11, 0 -> connect-01, 3 -> now),Map(n -> now, d -> date-entity, 1 -> 11, a -> allege-01, 02 -> 00, r -> resign-01, i -> imprison-01, c -> connect-01, 0 -> 0))),[Ljava.lang.String;@66ad7bf0,Annotation([Ljava.lang.String;@167279d1,[Ljava.lang.String;@138caeca,[Ljava.lang.String;@4d96250),Annotation([Ljava.lang.String;@9a6fbc0,[Ljava.lang.String;@c1fa7d4,[Ledu.cmu.lti.nlp.amr.Dependency;@7a93b263),Annotation([Ljava.lang.String;@35178483,[Ljava.lang.String;@bd1111a,[Ljava.lang.String;@7a8136b3),Annotation([Ljava.lang.String;@1de6932a,[Ljava.lang.String;@14dc3f89,[Ledu.cmu.lti.nlp.amr.Entity;@1706a5c9))
AMR:
(a / allege-01, ARG1, c / connect-01)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 02 / 00)
(i / imprison-01, ARG1, r / resign-01)
(i / imprison-01, ARG2, c / connect-01)
(i / imprison-01, time, n / now)
(r / resign-01, time, d / date-entity)

Decoded in 79,217 microseconds
Sentence: 2002-08-29

mkDayMonthYear(2002-08-29,29,08,2002)
mkDayMonthYear(2002-08-29,29,08,2002)
Spans:
Span 0-1:  2002-08-29 => (date-entity :day 29 :month 8 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2002-08-29 => (date-entity :day 29 :month 8 :year 2002)

Dependencies:
1	2002-08-29	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 29)
(d / date-entity, month, 8)
(d / date-entity, year, 2002)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-08-29,(date-entity :day 29 :month 8 :year 2002),false)),Map(2 -> 8, 1 -> 29, 0 -> date-entity, 3 -> 2002),Map(2 -> 29, 8 -> 8, d -> date-entity, 22 -> 2002))),[Ljava.lang.String;@64412d34,Annotation([Ljava.lang.String;@4d178d55,[Ljava.lang.String;@38c2c309,[Ljava.lang.String;@1a480135),Annotation([Ljava.lang.String;@778db7c5,[Ljava.lang.String;@681e144,[Ledu.cmu.lti.nlp.amr.Dependency;@2875b016),Annotation([Ljava.lang.String;@72ee5d84,[Ljava.lang.String;@68c7ef83,[Ljava.lang.String;@6145b81e),Annotation([Ljava.lang.String;@64355120,[Ljava.lang.String;@64b7225f,[Ledu.cmu.lti.nlp.amr.Entity;@33db72bd))
AMR:
(d / date-entity, day, 2 / 29)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2002)

Decoded in 8,459 microseconds
Sentence: Nepal (NP)

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (organization :name (name :op "NP"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 0-1:  Nepal => (country :name (name :op "Nepal"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Nepal => (country :name (name :op "Nepal"))

Dependencies:
1	Nepal	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	NP	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Nepal")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Nepal,(country :name (name :op "Nepal")),false)),Map(2 -> "Nepal", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@7f92b990,Annotation([Ljava.lang.String;@31e04b13,[Ljava.lang.String;@6c1832aa,[Ljava.lang.String;@4beeb0e),Annotation([Ljava.lang.String;@6e8a9c30,[Ljava.lang.String;@5d01ea21,[Ledu.cmu.lti.nlp.amr.Dependency;@70211e49),Annotation([Ljava.lang.String;@3b46dd8,[Ljava.lang.String;@39651a82,[Ljava.lang.String;@6be7bf6d),Annotation([Ljava.lang.String;@134c370e,[Ljava.lang.String;@33364212,[Ledu.cmu.lti.nlp.amr.Entity;@2216effc))
AMR:
(c / country, name, n / name)
(n / name, op, "Nepal")

Decoded in 6,088 microseconds
Sentence: terrorism; dissent; military

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 2-3:  dissent => dissent-01
Span 0-1:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 2-3:  dissent => dissent
Oracle Span 4-5:  military => military
Oracle Span 0-1:  terrorism => terrorism

Extra span: ; => and
Incorrect span: dissent => dissent-01
Missing span: military => military
Missing span: dissent => dissent
Dependencies:
1	terrorism	_	NN	NN	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	dissent	_	JJ	JJ	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	military	_	JJ	JJ	_	3	dep	_	_

Oracle:
(a / and, op, d / dissent)
(a / and, op, m / military)
(a / and, op, t / terrorism)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),;,and,false), Span(2,3,List(1),dissent,dissent-01,false), Span(1,2,List(2),;,and,false), Span(0,1,List(3),terrorism,terrorism,false)),Map(2 -> and, 1 -> dissent-01, 0 -> and, 3 -> terrorism),Map(t -> terrorism, d -> dissent-01, a -> and, a2 -> and))),[Ljava.lang.String;@745c2004,Annotation([Ljava.lang.String;@6da9dc6,[Ljava.lang.String;@7fd69dd,[Ljava.lang.String;@12010fd1),Annotation([Ljava.lang.String;@7c84195,[Ljava.lang.String;@552ed807,[Ledu.cmu.lti.nlp.amr.Dependency;@3971f0fe),Annotation([Ljava.lang.String;@23940f86,[Ljava.lang.String;@66153688,[Ljava.lang.String;@455824ad),Annotation([Ljava.lang.String;@7318daf8,[Ljava.lang.String;@70f31322,[Ledu.cmu.lti.nlp.amr.Entity;@3f1ddac2))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, d / dissent-01)
(a2 / and, op, t / terrorism)

Decoded in 11,554 microseconds
Sentence: Soldier injured during bomb defusion in Kathmandu after state of emergency expires.

NER Entity: (country :name (name :op "Kathmandu"))
Spans:
Span 7-8:  after => after
Span 3-4:  bomb => bomb
Span 10-11:  emergency => emergency
Span 1-2:  injured => injure-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  after => after
Oracle Span 3-4:  bomb => bomb
Oracle Span 4-5:  defusion => defuse-01
Oracle Span 10-11:  emergency => emergency
Oracle Span 11-12:  expires => expire-01
Oracle Span 1-2:  injured => injure-01
Oracle Span 6-7:  Kathmandu => (city :name (name :op "Kathmandu"))
Oracle Span 0-1:  Soldier => soldier
Oracle Span 8-9:  state => state

Missing span: Kathmandu => (city :name (name :op "Kathmandu"))
Missing span: expires => expire-01
Missing span: state => state
Missing span: Soldier => soldier
Missing span: defusion => defuse-01
Dependencies:
1	Soldier	_	NNP	NNP	_	12	nsubj	_	_
2	injured	_	VBN	VBN	_	1	vmod	_	_
3	during	_	IN	IN	_	2	prep	_	_
4	bomb	_	NN	NN	_	5	nn	_	_
5	defusion	_	NN	NN	_	3	pobj	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	Kathmandu	_	NNP	NNP	_	6	pobj	_	_
8	after	_	IN	IN	_	2	prep	_	_
9	state	_	NN	NN	_	8	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	emergency	_	NN	NN	_	10	pobj	_	_
12	expires	_	VBZ	VBZ	_	0	root	_	_
13	.	_	.	.	_	12	punct	_	_

Oracle:
(a / after, op, e / expire-01)
(c / city, name, n / name)
(d / defuse-01, ARG1, b / bomb)
(d / defuse-01, location, c / city)
(e / expire-01, ARG1, s2 / state)
(i / injure-01, ARG0, d / defuse-01)
(i / injure-01, ARG1, s / soldier)
(i / injure-01, time, a / after)
(n / name, op, "Kathmandu")
(s2 / state, mod, e2 / emergency)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),emergency,emergency,false), Span(7,8,List(1),after,after,false), Span(3,4,List(2),bomb,bomb,false), Span(1,2,List(3),injured,injure-01,false)),Map(2 -> bomb, 1 -> after, 0 -> emergency, 3 -> injure-01),Map(e -> emergency, b -> bomb, a -> after, i -> injure-01))),[Ljava.lang.String;@3be4fcc0,Annotation([Ljava.lang.String;@e1e2e5e,[Ljava.lang.String;@661c46bc,[Ljava.lang.String;@37864b77),Annotation([Ljava.lang.String;@2b98b3bb,[Ljava.lang.String;@540b0448,[Ledu.cmu.lti.nlp.amr.Dependency;@50a691d3),Annotation([Ljava.lang.String;@557eb543,[Ljava.lang.String;@3b95d13c,[Ljava.lang.String;@3730ab42),Annotation([Ljava.lang.String;@537c8c7e,[Ljava.lang.String;@7308ffff,[Ledu.cmu.lti.nlp.amr.Entity;@6601cc93))
AMR:
(a / after, op, e / emergency)
(b / bomb, location, a / after)
(i / injure-01, time, a / after)

Decoded in 29,332 microseconds
Sentence: A Kathmandu police officer reports --

NER Entity: (country :name (name :op "Kathmandu"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  Kathmandu => (city :name (name :op "Kathmandu"))
Oracle Span 3-4:  officer => (have-org-role-91 :ARG2 officer)
Oracle Span 2-3:  police => police
Oracle Span 4-5:  reports => report-01

Extra span:  => amr-empty
Missing span: Kathmandu => (city :name (name :op "Kathmandu"))
Missing span: reports => report-01
Missing span: police => police
Missing span: officer => (have-org-role-91 :ARG2 officer)
Dependencies:
1	A	_	DT	DT	_	4	det	_	_
2	Kathmandu	_	NNP	NNP	_	4	nn	_	_
3	police	_	NN	NN	_	4	nn	_	_
4	officer	_	NN	NN	_	0	root	_	_
5	reports	_	VBZ	VBZ	_	4	dep	_	_
6	--	_	:	:	_	4	punct	_	_

Oracle:
(c / city, name, n / name)
(h / have-org-role-91, ARG1, p / police)
(h / have-org-role-91, ARG2, o / officer)
(n / name, op, "Kathmandu")
(p / police, mod, c / city)

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@54d901aa,Annotation([Ljava.lang.String;@63716833,[Ljava.lang.String;@573284a5,[Ljava.lang.String;@3fbfbf84),Annotation([Ljava.lang.String;@23f72d88,[Ljava.lang.String;@4bafe935,[Ledu.cmu.lti.nlp.amr.Dependency;@87b5b49),Annotation([Ljava.lang.String;@4a7a965d,[Ljava.lang.String;@507b79f7,[Ljava.lang.String;@64a9d48c),Annotation([Ljava.lang.String;@365a6a43,[Ljava.lang.String;@288cdaab,[Ledu.cmu.lti.nlp.amr.Entity;@23b3aa8c))
AMR:


Decoded in 7,712 microseconds
Sentence: 1 soldier of the Royal Nepal Army was seriously injured on 29 August 2002 when a bomb disposal team attempted to defuse the bomb left at an electricity pole in okubahal near Sundhara in Lalitpur district in Kathmandu.

NER Entity: (organization :name (name :op "Royal"))
NER Entity: (country :name (name :op "Nepal"))
mkDayMonthYear(29	August	2002,29,August,2002)
NER Entity: (country :name (name :op "Sundhara"))
NER Entity: (country :name (name :op "Lalitpur"))
NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 11-14:  29 August 2002 => (date-entity :day 29 :month 8 :year 2002)
Span 19-20:  attempted => attempt-01
Span 23-24:  bomb => bomb
Span 16-17:  bomb => bomb
Span 21-22:  defuse => defuse-01
Span 35-36:  district => district
Span 27-28:  electricity => electricity
Span 9-10:  injured => injure-01
Span 31-32:  near => near
Span 5-6:  Nepal => (country :name (name :op "Nepal"))
Span 8-9:  seriously => serious
Span 1-2:  soldier => soldier
Span 18-19:  team => team

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 0-1:  1 => 1
Oracle Span 11-14:  29 August 2002 => (date-entity :day 29 :month 8 :year 2002)
Oracle Span 19-20:  attempted => attempt-01
Oracle Span 16-17:  bomb => bomb
Oracle Span 23-24:  bomb => bomb
Oracle Span 21-22:  defuse => defuse-01
Oracle Span 17-18:  disposal => dispose-01
Oracle Span 35-36:  district => district
Oracle Span 27-28:  electricity => electricity
Oracle Span 9-10:  injured => injure-01
Oracle Span 37-38:  Kathmandu => (city :name (name :op "Kathmandu"))
Oracle Span 34-35:  Lalitpur => (name :op "Lalitpur")
Oracle Span 24-25:  left => leave-02
Oracle Span 31-32:  near => near
Oracle Span 30-31:  okubahal => (city :name (name :op "Okubahal"))
Oracle Span 28-29:  pole => pole
Oracle Span 4-7:  Royal Nepal Army => (have-org-role-91 :ARG1 (military :name (name :op "Army" :op "Nepal" :op "Royal")))
Oracle Span 8-9:  seriously => serious
Oracle Span 1-2:  soldier => soldier
Oracle Span 32-33:  Sundhara => (city :name (name :op "Sundhara"))
Oracle Span 18-19:  team => team

Extra span: Nepal => (country :name (name :op "Nepal"))
Missing span: Royal Nepal Army => (have-org-role-91 :ARG1 (military :name (name :op "Army" :op "Nepal" :op "Royal")))
Missing span: okubahal => (city :name (name :op "Okubahal"))
Missing span: Sundhara => (city :name (name :op "Sundhara"))
Missing span: Lalitpur => (name :op "Lalitpur")
Missing span: Kathmandu => (city :name (name :op "Kathmandu"))
Missing span: left => leave-02
Missing span: pole => pole
Missing span: 1 => 1
Missing span: disposal => dispose-01
Dependencies:
1	1	_	CD	CD	_	2	num	_	_
2	soldier	_	NN	NN	_	10	nsubjpass	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	7	det	_	_
5	Royal	_	NNP	NNP	_	7	nn	_	_
6	Nepal	_	NNP	NNP	_	7	nn	_	_
7	Army	_	NNP	NNP	_	3	pobj	_	_
8	was	_	VBD	VBD	_	10	auxpass	_	_
9	seriously	_	RB	RB	_	10	advmod	_	_
10	injured	_	VBN	VBN	_	0	root	_	_
11	on	_	IN	IN	_	10	prep	_	_
12	29	_	CD	CD	_	11	pobj	_	_
13	August	_	NNP	NNP	_	10	tmod	_	_
14	2002	_	CD	CD	_	13	num	_	_
15	when	_	WRB	WRB	_	20	advmod	_	_
16	a	_	DT	DT	_	19	det	_	_
17	bomb	_	NN	NN	_	19	nn	_	_
18	disposal	_	NN	NN	_	19	nn	_	_
19	team	_	NN	NN	_	20	nsubj	_	_
20	attempted	_	VBD	VBD	_	10	advcl	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	defuse	_	VB	VB	_	20	xcomp	_	_
23	the	_	DT	DT	_	24	det	_	_
24	bomb	_	NN	NN	_	22	dobj	_	_
25	left	_	VBN	VBN	_	24	vmod	_	_
26	at	_	IN	IN	_	25	prep	_	_
27	an	_	DT	DT	_	29	det	_	_
28	electricity	_	NN	NN	_	29	nn	_	_
29	pole	_	NN	NN	_	26	pobj	_	_
30	in	_	IN	IN	_	29	prep	_	_
31	okubahal	_	NN	NN	_	30	pobj	_	_
32	near	_	IN	IN	_	31	prep	_	_
33	Sundhara	_	NNP	NNP	_	32	pobj	_	_
34	in	_	IN	IN	_	25	prep	_	_
35	Lalitpur	_	NNP	NNP	_	36	nn	_	_
36	district	_	NN	NN	_	34	pobj	_	_
37	in	_	IN	IN	_	25	prep	_	_
38	Kathmandu	_	NNP	NNP	_	37	pobj	_	_
39	.	_	.	.	_	10	punct	_	_

Oracle:
(a / attempt-01, ARG0, t / team)
(a / attempt-01, ARG1, d3 / defuse-01)
(c2 / city, location, n3 / near)
(c2 / city, name, n2 / name)
(c3 / city, location, d4 / district)
(c3 / city, name, n4 / name)
(c5 / city, name, n6 / name)
(d / date-entity, day, 29)
(d / date-entity, month, 8)
(d / date-entity, year, 2002)
(d2 / dispose-01, ARG1, b / bomb)
(d3 / defuse-01, ARG0, t / team)
(d3 / defuse-01, ARG1, b2 / bomb)
(d4 / district, location, c5 / city)
(d4 / district, name, n5 / name)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG2, s / soldier)
(i / injure-01, ARG1, s / soldier)
(i / injure-01, manner, s2 / serious)
(i / injure-01, time, d / date-entity)
(l / leave-02, ARG1, b2 / bomb)
(l / leave-02, location, p / pole)
(m / military, name, n / name)
(n / name, op, "Army")
(n / name, op, "Nepal")
(n / name, op, "Royal")
(n2 / name, op, "Okubahal")
(n3 / near, op, c3 / city)
(n4 / name, op, "Sundhara")
(n5 / name, op, "Lalitpur")
(n6 / name, op, "Kathmandu")
(p / pole, location, c2 / city)
(p / pole, mod, e / electricity)
(s / soldier, quant, 1 / 1)
(t / team, mod, d2 / dispose-01)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),district,district,false), Span(31,32,List(1),near,near,false), Span(27,28,List(2),electricity,electricity,false), Span(23,24,List(3),bomb,bomb,false), Span(21,22,List(4),defuse,defuse-01,false), Span(19,20,List(5),attempted,attempt-01,false), Span(18,19,List(6),team,team,false), Span(16,17,List(7),bomb,bomb,false), Span(11,14,List(11, 10, 9, 8),29 August 2002,(date-entity :day 29 :month 8 :year 2002),false), Span(9,10,List(12),injured,injure-01,false), Span(8,9,List(13),seriously,serious,false), Span(5,6,List(16, 15, 14),Nepal,(country :name (name :op "Nepal")),false), Span(1,2,List(17),soldier,soldier,false)),Map(2 -> electricity, 5 -> attempt-01, 12 -> injure-01, 15 -> name, 8 -> date-entity, 7 -> bomb, 17 -> soldier, 1 -> near, 4 -> defuse-01, 11 -> 2002, 14 -> country, 6 -> team, 0 -> district, 9 -> 29, 16 -> "Nepal", 3 -> bomb, 10 -> 8, 13 -> serious),Map(e -> electricity, n -> near, 2 -> 29, s2 -> soldier, b -> bomb, t -> team, b2 -> bomb, d3 -> date-entity, 8 -> 8, s -> serious, d -> district, a -> attempt-01, d2 -> defuse-01, i -> injure-01, c -> country, 22 -> 2002, n2 -> name))),[Ljava.lang.String;@99407c2,Annotation([Ljava.lang.String;@6c796cc1,[Ljava.lang.String;@226eba67,[Ljava.lang.String;@1cb7936c),Annotation([Ljava.lang.String;@35342d2f,[Ljava.lang.String;@128c502c,[Ledu.cmu.lti.nlp.amr.Dependency;@45667d98),Annotation([Ljava.lang.String;@65eabaab,[Ljava.lang.String;@7123be6c,[Ljava.lang.String;@1de9d54),Annotation([Ljava.lang.String;@77a2aa4a,[Ljava.lang.String;@47ad69f7,[Ledu.cmu.lti.nlp.amr.Entity;@2b917fb0))
AMR:
(a / attempt-01, ARG0, t / team)
(a / attempt-01, ARG1, d2 / defuse-01)
(c / country, name, n2 / name)
(d / district, op, d2 / defuse-01)
(d2 / defuse-01, ARG0, n / near)
(d2 / defuse-01, ARG1, b / bomb)
(d3 / date-entity, day, 2 / 29)
(d3 / date-entity, month, 8 / 8)
(d3 / date-entity, year, 22 / 2002)
(e / electricity, location, n / near)
(i / injure-01, ARG1, s2 / soldier)
(i / injure-01, condition, a / attempt-01)
(i / injure-01, mod, s / serious)
(i / injure-01, time, d3 / date-entity)
(n2 / name, op, "Nepal")
(s2 / soldier, location, c / country)
(t / team, mod, b2 / bomb)

Decoded in 702,730 microseconds
Sentence: Anti-government insurgents are believed to have planted the bomb.

Spans:
Span 5-6:  believed => believe-01
Span 10-11:  bomb => bomb
Span 3-4:  insurgents => insurgent
Span 8-9:  planted => plant-01

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Oracle Span 0-1:  Anti => oppose-01
Oracle Span 5-6:  believed => believe-01
Oracle Span 10-11:  bomb => bomb
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 3-4:  insurgents => insurgent
Oracle Span 8-9:  planted => plant-01

Missing span: Anti => oppose-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Anti-government	_	JJ	JJ	_	2	amod	_	_
2	insurgents	_	NNS	NNS	_	4	nsubjpass	_	_
3	are	_	VBP	VBP	_	4	auxpass	_	_
4	believed	_	VBN	VBN	_	0	root	_	_
5	to	_	TO	TO	_	7	aux	_	_
6	have	_	VB	VB	_	7	aux	_	_
7	planted	_	VBN	VBN	_	4	xcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	bomb	_	NN	NN	_	7	dobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(b / believe-01, ARG1, p / plant-01)
(g2 / govern-01, ARG0, g / government-organization)
(o / oppose-01, ARG0, i / insurgent)
(o / oppose-01, ARG1, g / government-organization)
(p / plant-01, ARG0, i / insurgent)
(p / plant-01, ARG1, b2 / bomb)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),bomb,bomb,false), Span(8,9,List(1),planted,plant-01,false), Span(5,6,List(2),believed,believe-01,false), Span(3,4,List(3),insurgents,insurgent,false)),Map(2 -> believe-01, 1 -> plant-01, 0 -> bomb, 3 -> insurgent),Map(b -> bomb, b2 -> believe-01, p -> plant-01, i -> insurgent))),[Ljava.lang.String;@5e5073ab,Annotation([Ljava.lang.String;@3c4262d1,[Ljava.lang.String;@100c567f,[Ljava.lang.String;@30c0d731),Annotation([Ljava.lang.String;@6d5037a9,[Ljava.lang.String;@422b8438,[Ledu.cmu.lti.nlp.amr.Dependency;@30669dac),Annotation([Ljava.lang.String;@629adce,[Ljava.lang.String;@6a282fdd,[Ljava.lang.String;@743c6ce4),Annotation([Ljava.lang.String;@70331432,[Ljava.lang.String;@3bbf9027,[Ledu.cmu.lti.nlp.amr.Entity;@10c2064a))
AMR:
(b2 / believe-01, ARG1, p / plant-01)
(p / plant-01, ARG0, i / insurgent)
(p / plant-01, ARG1, b / bomb)

Decoded in 94,977 microseconds
Sentence: The injured soldier has been admitted to the army hospital in Kathmandu.

NER Entity: (country :name (name :op "Kathmandu"))
Spans:
Span 5-6:  admitted => admit-01
Span 8-9:  army => army
Span 9-10:  hospital => hospital
Span 1-2:  injured => injure-01
Span 2-3:  soldier => soldier

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 5-6:  admitted => admit-02
Oracle Span 8-9:  army => army
Oracle Span 9-10:  hospital => hospital
Oracle Span 1-2:  injured => injure-01
Oracle Span 11-12:  Kathmandu => (city :name (name :op "Kathmandu"))
Oracle Span 2-3:  soldier => soldier

Incorrect span: admitted => admit-01
Missing span: Kathmandu => (city :name (name :op "Kathmandu"))
Missing span: admitted => admit-02
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	injured	_	JJ	JJ	_	3	amod	_	_
3	soldier	_	NN	NN	_	6	nsubjpass	_	_
4	has	_	VBZ	VBZ	_	6	aux	_	_
5	been	_	VBN	VBN	_	6	auxpass	_	_
6	admitted	_	VBN	VBN	_	0	root	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	army	_	NN	NN	_	10	nn	_	_
10	hospital	_	NN	NN	_	7	pobj	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	Kathmandu	_	NNP	NNP	_	11	pobj	_	_
13	.	_	.	.	_	6	punct	_	_

Oracle:
(a / admit-02, ARG1, s / soldier)
(a / admit-02, ARG2, h / hospital)
(c / city, name, n / name)
(h / hospital, location, c / city)
(h / hospital, poss, a2 / army)
(i / injure-01, ARG1, s / soldier)
(n / name, op, "Kathmandu")

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),hospital,hospital,false), Span(8,9,List(1),army,army,false), Span(5,6,List(2),admitted,admit-01,false), Span(2,3,List(3),soldier,soldier,false), Span(1,2,List(4),injured,injure-01,false)),Map(2 -> admit-01, 1 -> army, 4 -> injure-01, 0 -> hospital, 3 -> soldier),Map(h -> hospital, s -> soldier, a -> army, i -> injure-01, a2 -> admit-01))),[Ljava.lang.String;@70e13fa,Annotation([Ljava.lang.String;@6ff415ad,[Ljava.lang.String;@280d9edc,[Ljava.lang.String;@28fd3dc1),Annotation([Ljava.lang.String;@5f9b6ae7,[Ljava.lang.String;@108d55c4,[Ledu.cmu.lti.nlp.amr.Dependency;@5432c277),Annotation([Ljava.lang.String;@15e0fe05,[Ljava.lang.String;@1128620c,[Ljava.lang.String;@6bf13698),Annotation([Ljava.lang.String;@299270eb,[Ljava.lang.String;@3b90a30a,[Ledu.cmu.lti.nlp.amr.Entity;@69fa8e76))
AMR:
(a2 / admit-01, ARG1, h / hospital)
(a2 / admit-01, ARG2, s / soldier)
(h / hospital, mod, a / army)
(i / injure-01, ARG1, s / soldier)

Decoded in 115,690 microseconds
Sentence: There is no report of any other damage or casualty in the incident.

Spans:
Span 5-6:  any => any
Span 9-10:  casualty => casualty
Span 7-8:  damage => damage-01
Span 12-13:  incident => incident
Span 2-3:  no => -
Span 8-9:  or => or
Span 6-7:  other => other

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  any => any
Oracle Span 9-10:  casualty => casualty
Oracle Span 7-8:  damage => damage
Oracle Span 12-13:  incident => incident
Oracle Span 2-3:  no => -
Oracle Span 8-9:  or => or
Oracle Span 6-7:  other => other
Oracle Span 3-4:  report => report-01

Incorrect span: damage => damage-01
Missing span: report => report-01
Missing span: damage => damage
Dependencies:
1	There	_	EX	EX	_	2	expl	_	_
2	is	_	VBZ	VBZ	_	0	root	_	_
3	no	_	DT	DT	_	4	neg	_	_
4	report	_	NN	NN	_	2	nsubj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	any	_	DT	DT	_	8	det	_	_
7	other	_	JJ	JJ	_	8	amod	_	_
8	damage	_	NN	NN	_	5	pobj	_	_
9	or	_	CC	CC	_	8	cc	_	_
10	casualty	_	NN	NN	_	8	conj	_	_
11	in	_	IN	IN	_	8	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	incident	_	NN	NN	_	11	pobj	_	_
14	.	_	.	.	_	2	punct	_	_

Oracle:
(d / damage, mod, o2 / other)
(o / or, op, c / casualty)
(o / or, op, d / damage)
(o2 / other, mod, a / any)
(r / report-01, ARG1, o / or)
(r / report-01, polarity, - / -)
(r / report-01, prep-in, i / incident)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),incident,incident,false), Span(9,10,List(1),casualty,casualty,false), Span(8,9,List(2),or,or,false), Span(7,8,List(3),damage,damage-01,false), Span(6,7,List(4),other,other,false), Span(5,6,List(5),any,any,false), Span(2,3,List(6),no,-,false)),Map(2 -> or, 5 -> any, 1 -> casualty, 4 -> other, 6 -> -, 0 -> incident, 3 -> damage-01),Map(d -> damage-01, a -> any, o2 -> other, i -> incident, - -> -, c -> casualty, o -> or))),[Ljava.lang.String;@bdd2027,Annotation([Ljava.lang.String;@31f20c9f,[Ljava.lang.String;@f446158,[Ljava.lang.String;@32f0c7f8),Annotation([Ljava.lang.String;@504e1599,[Ljava.lang.String;@71f96dfb,[Ledu.cmu.lti.nlp.amr.Dependency;@5d1b9c3d),Annotation([Ljava.lang.String;@69e05f61,[Ljava.lang.String;@49a26d19,[Ljava.lang.String;@730e5763),Annotation([Ljava.lang.String;@7275c74b,[Ljava.lang.String;@19058533,[Ledu.cmu.lti.nlp.amr.Entity;@4315e9af))
AMR:
(d / damage-01, ARG0, i / incident)
(d / damage-01, ARG1, - / -)
(d / damage-01, mod, a / any)
(d / damage-01, mod, o2 / other)
(o / or, op, c / casualty)
(o / or, op, d / damage-01)

Decoded in 38,456 microseconds
Sentence: This is the second bomb explosion in Kathmandu since the morning of 28 August 2002 when a bomb exploded at bishalbazar supermarket in the heart of the city.

NER Entity: (country :name (name :op "Kathmandu"))
mkDayMonthYear(28	August	2002,28,August,2002)
Spans:
Span 12-15:  28 August 2002 => (date-entity :day 28 :month 8 :year 2002)
Span 17-18:  bomb => bomb
Span 4-5:  bomb => bomb
Span 27-28:  city => city
Span 18-19:  exploded => explode-01
Span 5-6:  explosion => explode-01
Span 24-25:  heart => heart
Span 10-11:  morning => morning
Span 8-9:  since => since
Span 21-22:  supermarket => supermarket
Span 0-1:  This => this

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 12-15:  28 August 2002 => (date-entity :day 28 :month 8 :year 2002)
Oracle Span 20-21:  bishalbazar => (name :op "Bishalbazar")
Oracle Span 4-5:  bomb => bomb
Oracle Span 17-18:  bomb => bomb
Oracle Span 27-28:  city => city
Oracle Span 18-19:  exploded => explode-01
Oracle Span 24-25:  heart => heart
Oracle Span 7-8:  Kathmandu => (city :name (name :op "Kathmandu"))
Oracle Span 10-11:  morning => morning
Oracle Span 8-9:  since => since
Oracle Span 21-22:  supermarket => supermarket
Oracle Span 0-1:  This => this

Extra span: explosion => explode-01
Missing span: Kathmandu => (city :name (name :op "Kathmandu"))
Missing span: bishalbazar => (name :op "Bishalbazar")
Dependencies:
1	This	_	DT	DT	_	6	nsubj	_	_
2	is	_	VBZ	VBZ	_	6	cop	_	_
3	the	_	DT	DT	_	6	det	_	_
4	second	_	JJ	JJ	_	6	amod	_	_
5	bomb	_	NN	NN	_	6	nn	_	_
6	explosion	_	NN	NN	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	Kathmandu	_	NNP	NNP	_	7	pobj	_	_
9	since	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	morning	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	28	_	CD	CD	_	12	pobj	_	_
14	August	_	NNP	NNP	_	8	tmod	_	_
15	2002	_	CD	CD	_	14	num	_	_
16	when	_	WRB	WRB	_	19	advmod	_	_
17	a	_	DT	DT	_	18	det	_	_
18	bomb	_	NN	NN	_	19	nsubj	_	_
19	exploded	_	VBD	VBD	_	8	rcmod	_	_
20	at	_	IN	IN	_	19	prep	_	_
21	bishalbazar	_	NN	NN	_	22	nn	_	_
22	supermarket	_	NN	NN	_	20	pobj	_	_
23	in	_	IN	IN	_	19	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	heart	_	NN	NN	_	23	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	city	_	NN	NN	_	26	pobj	_	_
29	.	_	.	.	_	6	punct	_	_

Oracle:
(b / bomb, mod, t / this)
(c / city, name, n / name)
(c2 / city, part, h / heart)
(d / date-entity, day, 28)
(d / date-entity, dayperiod, m / morning)
(d / date-entity, month, 8)
(d / date-entity, year, 2002)
(e / explode-01, ARG1, b / bomb)
(e / explode-01, location, c / city)
(e / explode-01, time, s / since)
(n / name, op, "Kathmandu")
(n2 / name, op, "Bishalbazar")
(s2 / supermarket, location, h / heart)
(s2 / supermarket, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),city,city,false), Span(24,25,List(1),heart,heart,false), Span(21,22,List(2),supermarket,supermarket,false), Span(18,19,List(3),exploded,explode-01,false), Span(17,18,List(4),bomb,bomb,false), Span(12,15,List(8, 7, 6, 5),28 August 2002,(date-entity :day 28 :month 8 :year 2002),false), Span(10,11,List(9),morning,morning,false), Span(8,9,List(10),since,since,false), Span(5,6,List(11),explosion,explode-01,false), Span(4,5,List(12),bomb,bomb,false), Span(0,1,List(13),This,this,false)),Map(2 -> supermarket, 5 -> date-entity, 12 -> bomb, 8 -> 2002, 7 -> 8, 1 -> heart, 4 -> bomb, 11 -> explode-01, 6 -> 28, 0 -> city, 9 -> morning, 3 -> explode-01, 10 -> since, 13 -> this),Map(e -> explode-01, h -> heart, 2 -> 28, s2 -> since, t -> this, b -> bomb, 8 -> 8, b2 -> bomb, e2 -> explode-01, s -> supermarket, d -> date-entity, m -> morning, c -> city, 22 -> 2002))),[Ljava.lang.String;@42210be1,Annotation([Ljava.lang.String;@1eb2d371,[Ljava.lang.String;@2babf189,[Ljava.lang.String;@479f2dc2),Annotation([Ljava.lang.String;@dab48d3,[Ljava.lang.String;@58a2b4c,[Ledu.cmu.lti.nlp.amr.Dependency;@7159a5cd),Annotation([Ljava.lang.String;@4f966719,[Ljava.lang.String;@18ac53e8,[Ljava.lang.String;@4ca8dbfa),Annotation([Ljava.lang.String;@7063686f,[Ljava.lang.String;@c3177d5,[Ledu.cmu.lti.nlp.amr.Entity;@76f856a8))
AMR:
(c / city, part, h / heart)
(d / date-entity, day, 2 / 28)
(d / date-entity, dayperiod, m / morning)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2002)
(e / explode-01, ARG0, s / supermarket)
(e / explode-01, ARG1, b / bomb)
(e / explode-01, time, h / heart)
(e2 / explode-01, ARG1, b2 / bomb)
(e2 / explode-01, domain, t / this)
(e2 / explode-01, location, c / city)
(e2 / explode-01, time, s2 / since)
(s2 / since, op, m / morning)

Decoded in 640,578 microseconds
Sentence: The explosion damaged the windowpanes of approximately a dozen shops and injured 2 customers.

Spans:
Span 13-14:  customers => customer
Span 2-3:  damaged => damage-01
Span 1-2:  explosion => explode-01
Span 11-12:  injured => injure-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  2 => 2
Oracle Span 10-11:  and => and
Oracle Span 6-7:  approximately => approximately
Oracle Span 13-14:  customers => customer
Oracle Span 2-3:  damaged => damage-01
Oracle Span 8-9:  dozen => dozen
Oracle Span 1-2:  explosion => explode-01
Oracle Span 11-12:  injured => injure-01
Oracle Span 9-10:  shops => shop
Oracle Span 4-5:  windowpanes => windowpane

Missing span: and => and
Missing span: 2 => 2
Missing span: windowpanes => windowpane
Missing span: shops => shop
Missing span: approximately => approximately
Missing span: dozen => dozen
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	explosion	_	NN	NN	_	3	nsubj	_	_
3	damaged	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	5	det	_	_
5	windowpanes	_	NNS	NNS	_	3	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	approximately	_	RB	RB	_	9	quantmod	_	_
8	a	_	DT	DT	_	9	quantmod	_	_
9	dozen	_	NN	NN	_	10	num	_	_
10	shops	_	NNS	NNS	_	6	pobj	_	_
11	and	_	CC	CC	_	3	cc	_	_
12	injured	_	VBD	VBD	_	3	conj	_	_
13	2	_	CD	CD	_	14	num	_	_
14	customers	_	NNS	NNS	_	12	dobj	_	_
15	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, d / damage-01)
(a / and, op, i / injure-01)
(a2 / approximately, op, d2 / dozen)
(c / customer, quant, 2 / 2)
(d / damage-01, ARG0, e / explode-01)
(d / damage-01, ARG1, w / windowpane)
(i / injure-01, ARG0, e / explode-01)
(i / injure-01, ARG1, c / customer)
(s / shop, mod, a2 / approximately)
(w / windowpane, poss, s / shop)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),customers,customer,false), Span(11,12,List(1),injured,injure-01,false), Span(2,3,List(2),damaged,damage-01,false), Span(1,2,List(3),explosion,explode-01,false)),Map(2 -> damage-01, 1 -> injure-01, 0 -> customer, 3 -> explode-01),Map(e -> explode-01, d -> damage-01, i -> injure-01, c -> customer))),[Ljava.lang.String;@7c853486,Annotation([Ljava.lang.String;@174e1b69,[Ljava.lang.String;@1046498a,[Ljava.lang.String;@243f003c),Annotation([Ljava.lang.String;@71cb3139,[Ljava.lang.String;@1639f93a,[Ledu.cmu.lti.nlp.amr.Dependency;@3491e86e),Annotation([Ljava.lang.String;@68f32020,[Ljava.lang.String;@409986fe,[Ljava.lang.String;@19b047fe),Annotation([Ljava.lang.String;@22590e3e,[Ljava.lang.String;@53dad875,[Ledu.cmu.lti.nlp.amr.Entity;@5f780a86))
AMR:
(d / damage-01, ARG1, e / explode-01)
(i / injure-01, ARG0, e / explode-01)
(i / injure-01, ARG1, c / customer)

Decoded in 37,517 microseconds
Sentence: A state of emergency expired the evening of 28 August 2002 and the Nepali government has not yet decided to re-impose it.

mkDayMonthYear(28	August	2002,28,August,2002)
NER Entity: (thing :name (name :op "Nepali"))
Spans:
Span 8-11:  28 August 2002 => (date-entity :day 28 :month 8 :year 2002)
Span 18-19:  decided => decide-01
Span 3-4:  emergency => emergency
Span 6-7:  evening => evening
Span 22-23:  impose => impose-01
Span 17-18:  yet => yet

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 8-11:  28 August 2002 => (date-entity :day 28 :month 8 :year 2002)
Oracle Span 11-12:  and => and
Oracle Span 18-19:  decided => decide-01
Oracle Span 3-4:  emergency => emergency
Oracle Span 6-7:  evening => evening
Oracle Span 4-5:  expired => expire-01
Oracle Span 14-15:  government => (government-organization :ARG0-of govern-01)
Oracle Span 13-14:  Nepali => (country :name (name :op "Nepal"))
Oracle Span 1-2:  state => state
Oracle Span 17-18:  yet => yet

Extra span: impose => impose-01
Missing span: Nepali => (country :name (name :op "Nepal"))
Missing span: and => and
Missing span: expired => expire-01
Missing span: state => state
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	state	_	NN	NN	_	5	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	emergency	_	NN	NN	_	3	pobj	_	_
5	expired	_	VBD	VBD	_	0	root	_	_
6	the	_	DT	DT	_	7	det	_	_
7	evening	_	NN	NN	_	5	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	28	_	CD	CD	_	8	pobj	_	_
10	August	_	NNP	NNP	_	5	tmod	_	_
11	2002	_	CD	CD	_	10	num	_	_
12	and	_	CC	CC	_	5	cc	_	_
13	the	_	DT	DT	_	15	det	_	_
14	Nepali	_	NNP	NNP	_	15	nn	_	_
15	government	_	NN	NN	_	19	nsubj	_	_
16	has	_	VBZ	VBZ	_	19	aux	_	_
17	not	_	RB	RB	_	19	neg	_	_
18	yet	_	RB	RB	_	19	advmod	_	_
19	decided	_	VBN	VBN	_	5	conj	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	re-impose	_	VB	VB	_	19	xcomp	_	_
22	it	_	PRP	PRP	_	21	dobj	_	_
23	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, d / decide-01)
(a / and, op, e / expire-01)
(c / country, name, n / name)
(d / decide-01, ARG0, g / government-organization)
(d / decide-01, time, y / yet)
(d2 / date-entity, day, 28)
(d2 / date-entity, dayperiod, e3 / evening)
(d2 / date-entity, month, 8)
(d2 / date-entity, year, 2002)
(e / expire-01, ARG1, s / state)
(e / expire-01, time, d2 / date-entity)
(g / government-organization, mod, c / country)
(g2 / govern-01, ARG0, g / government-organization)
(n / name, op, "Nepal")
(s / state, mod, e2 / emergency)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),impose,impose-01,false), Span(18,19,List(1),decided,decide-01,false), Span(17,18,List(2),yet,yet,false), Span(8,11,List(6, 5, 4, 3),28 August 2002,(date-entity :day 28 :month 8 :year 2002),false), Span(6,7,List(7),evening,evening,false), Span(3,4,List(8),emergency,emergency,false)),Map(2 -> yet, 5 -> 8, 8 -> emergency, 7 -> evening, 1 -> decide-01, 4 -> 28, 6 -> 2002, 0 -> impose-01, 3 -> date-entity),Map(e -> evening, 2 -> 28, 8 -> 8, e2 -> emergency, d -> decide-01, y -> yet, d2 -> date-entity, i -> impose-01, 22 -> 2002))),[Ljava.lang.String;@446c3920,Annotation([Ljava.lang.String;@2eaef76d,[Ljava.lang.String;@2b329bbd,[Ljava.lang.String;@34819867),Annotation([Ljava.lang.String;@118102ee,[Ljava.lang.String;@48cd9a2c,[Ledu.cmu.lti.nlp.amr.Dependency;@771d1ffb),Annotation([Ljava.lang.String;@4f67e3df,[Ljava.lang.String;@56681eaf,[Ljava.lang.String;@72d0f2b4),Annotation([Ljava.lang.String;@6d2dc9d2,[Ljava.lang.String;@1da4b6b3,[Ledu.cmu.lti.nlp.amr.Entity;@b2f4ece))
AMR:
(d / decide-01, ARG1, i / impose-01)
(d / decide-01, time, y / yet)
(d2 / date-entity, day, 2 / 28)
(d2 / date-entity, dayperiod, e / evening)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 22 / 2002)
(i / impose-01, ARG0, e2 / emergency)
(i / impose-01, ARG1, e / evening)

Decoded in 214,751 microseconds
Sentence: 2002-09-05

mkDayMonthYear(2002-09-05,05,09,2002)
mkDayMonthYear(2002-09-05,05,09,2002)
Spans:
Span 0-1:  2002-09-05 => (date-entity :day 5 :month 9 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2002-09-05 => (date-entity :day 5 :month 9 :year 2002)

Dependencies:
1	2002-09-05	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 5)
(d / date-entity, month, 9)
(d / date-entity, year, 2002)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-09-05,(date-entity :day 5 :month 9 :year 2002),false)),Map(2 -> 9, 1 -> 5, 0 -> date-entity, 3 -> 2002),Map(2 -> 2002, 5 -> 5, d -> date-entity, 9 -> 9))),[Ljava.lang.String;@7e1f584d,Annotation([Ljava.lang.String;@7dff6d05,[Ljava.lang.String;@45d64d27,[Ljava.lang.String;@34fe326d),Annotation([Ljava.lang.String;@30a7c98f,[Ljava.lang.String;@36361ddb,[Ledu.cmu.lti.nlp.amr.Dependency;@41fed14f),Annotation([Ljava.lang.String;@4d6ee47,[Ljava.lang.String;@a33b4e3,[Ljava.lang.String;@c6da8bb),Annotation([Ljava.lang.String;@3bae64d0,[Ljava.lang.String;@8b91134,[Ledu.cmu.lti.nlp.amr.Entity;@1fba386c))
AMR:
(d / date-entity, day, 5 / 5)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2002)

Decoded in 8,508 microseconds
Sentence: Nepal (NP)

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (organization :name (name :op "NP"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 0-1:  Nepal => (country :name (name :op "Nepal"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Nepal => (country :name (name :op "Nepal"))

Dependencies:
1	Nepal	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	NP	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Nepal")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Nepal,(country :name (name :op "Nepal")),false)),Map(2 -> "Nepal", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@7e736350,Annotation([Ljava.lang.String;@36b310aa,[Ljava.lang.String;@76c387f9,[Ljava.lang.String;@3874b815),Annotation([Ljava.lang.String;@5d7835a8,[Ljava.lang.String;@736048ed,[Ledu.cmu.lti.nlp.amr.Dependency;@1976f537),Annotation([Ljava.lang.String;@45f421c,[Ljava.lang.String;@1816e24a,[Ljava.lang.String;@6940f685),Annotation([Ljava.lang.String;@47b179d7,[Ljava.lang.String;@39008c9f,[Ledu.cmu.lti.nlp.amr.Entity;@162b3d47))
AMR:
(c / country, name, n / name)
(n / name, op, "Nepal")

Decoded in 6,114 microseconds
Sentence: terrorism; politics; dissent

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  dissent => dissent-01
Span 2-3:  politics => politics
Span 0-1:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 4-5:  dissent => dissent-01
Oracle Span 2-3:  politics => politics
Oracle Span 0-1:  terrorism => terrorism

Extra span: ; => and
Dependencies:
1	terrorism	_	NN	NN	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	politics	_	NNS	NNS	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	dissent	_	NN	NN	_	3	dep	_	_

Oracle:
(a / and, op, d / dissent-01)
(a / and, op, p / politics)
(a / and, op, t / terrorism)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),dissent,dissent-01,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),politics,politics,false), Span(1,2,List(3),;,and,false), Span(0,1,List(4),terrorism,terrorism,false)),Map(2 -> politics, 1 -> and, 4 -> terrorism, 0 -> dissent-01, 3 -> and),Map(t -> terrorism, d -> dissent-01, p -> politics, a -> and, a2 -> and))),[Ljava.lang.String;@783115d9,Annotation([Ljava.lang.String;@3402b4c9,[Ljava.lang.String;@95bb2a2,[Ljava.lang.String;@46d567cb),Annotation([Ljava.lang.String;@363a3d15,[Ljava.lang.String;@173f73e7,[Ledu.cmu.lti.nlp.amr.Dependency;@43a51d00),Annotation([Ljava.lang.String;@2e23c180,[Ljava.lang.String;@499683c4,[Ljava.lang.String;@25da615a),Annotation([Ljava.lang.String;@4efc25fc,[Ljava.lang.String;@7ee3d262,[Ledu.cmu.lti.nlp.amr.Entity;@396e6d9))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, d / dissent-01)
(a2 / and, op, p / politics)
(a2 / and, op, t / terrorism)

Decoded in 14,925 microseconds
Sentence: Anti-government insurgents in Nepal escalate bombings and murders following end of state of emergency.

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 7-8:  bombings => bomb-01
Span 15-16:  emergency => emergency
Span 6-7:  escalate => escalate-01
Span 3-4:  insurgents => insurgent
Span 9-10:  murders => murder-01
Span 5-6:  Nepal => (country :name (name :op "Nepal"))

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 0-1:  Anti => oppose-01
Oracle Span 7-8:  bombings => bomb-01
Oracle Span 15-16:  emergency => emergency
Oracle Span 11-12:  end => end-02
Oracle Span 6-7:  escalate => escalate-01
Oracle Span 10-11:  following => follow-01
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 3-4:  insurgents => insurgent
Oracle Span 9-10:  murders => murder-01
Oracle Span 5-6:  Nepal => (country :name (name :op "Nepal"))
Oracle Span 13-14:  state => state

Missing span: following => follow-01
Missing span: end => end-02
Missing span: state => state
Missing span: and => and
Missing span: Anti => oppose-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Anti-government	_	JJ	JJ	_	2	amod	_	_
2	insurgents	_	NNS	NNS	_	5	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	Nepal	_	NNP	NNP	_	3	pobj	_	_
5	escalate	_	VB	VB	_	0	root	_	_
6	bombings	_	NNS	NNS	_	5	dobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	murders	_	NNS	NNS	_	6	conj	_	_
9	following	_	VBG	VBG	_	6	prep	_	_
10	end	_	NN	NN	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	state	_	NN	NN	_	11	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	emergency	_	NN	NN	_	13	pobj	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, b / bomb-01)
(a / and, op, m / murder-01)
(c / country, name, n / name)
(e / escalate-01, ARG0, i / insurgent)
(e / escalate-01, ARG1, a / and)
(e2 / end-02, ARG1, s / state)
(f / follow-01, ARG1, e / escalate-01)
(f / follow-01, ARG2, e2 / end-02)
(g2 / govern-01, ARG0, g / government-organization)
(i / insurgent, location, c / country)
(n / name, op, "Nepal")
(o / oppose-01, ARG0, i / insurgent)
(o / oppose-01, ARG1, g / government-organization)
(s / state, mod, e3 / emergency)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),emergency,emergency,false), Span(9,10,List(1),murders,murder-01,false), Span(7,8,List(2),bombings,bomb-01,false), Span(6,7,List(3),escalate,escalate-01,false), Span(5,6,List(6, 5, 4),Nepal,(country :name (name :op "Nepal")),false), Span(3,4,List(7),insurgents,insurgent,false)),Map(2 -> bomb-01, 5 -> name, 7 -> insurgent, 1 -> murder-01, 4 -> country, 6 -> "Nepal", 0 -> emergency, 3 -> escalate-01),Map(n -> name, e -> emergency, b -> bomb-01, e2 -> escalate-01, m -> murder-01, i -> insurgent, c -> country))),[Ljava.lang.String;@75308740,Annotation([Ljava.lang.String;@5acc9fdf,[Ljava.lang.String;@3a5c2626,[Ljava.lang.String;@e48bf9a),Annotation([Ljava.lang.String;@7fb33394,[Ljava.lang.String;@41bf79da,[Ledu.cmu.lti.nlp.amr.Dependency;@1a891add),Annotation([Ljava.lang.String;@5176d279,[Ljava.lang.String;@373f7450,[Ljava.lang.String;@d74bac4),Annotation([Ljava.lang.String;@5ff90645,[Ljava.lang.String;@387bf2d9,[Ledu.cmu.lti.nlp.amr.Entity;@74aa9c72))
AMR:
(b / bomb-01, ARG1, c / country)
(c / country, name, n / name)
(e2 / escalate-01, ARG0, i / insurgent)
(e2 / escalate-01, ARG1, b / bomb-01)
(i / insurgent, mod, e / emergency)
(m / murder-01, ARG0, c / country)
(n / name, op, "Nepal")

Decoded in 68,273 microseconds
Sentence: Insurgents plan attacks during mid-term parliamentary elections.

Spans:
Span 2-3:  attacks => attack-01
Span 8-9:  elections => elect-01
Span 4-5:  mid => mid

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  attacks => attack-01
Oracle Span 8-9:  elections => elect-01
Oracle Span 0-1:  Insurgents => insurgent
Oracle Span 7-8:  parliamentary => (government-organization :name (name :op "Parliament"))
Oracle Span 1-2:  plan => plan-01

Extra span: mid => mid
Missing span: parliamentary => (government-organization :name (name :op "Parliament"))
Missing span: plan => plan-01
Missing span: Insurgents => insurgent
Dependencies:
1	Insurgents	_	NNS	NNS	_	2	nsubj	_	_
2	plan	_	VBP	VBP	_	0	root	_	_
3	attacks	_	NNS	NNS	_	2	dobj	_	_
4	during	_	IN	IN	_	2	prep	_	_
5	mid-term	_	JJ	JJ	_	7	amod	_	_
6	parliamentary	_	JJ	JJ	_	7	amod	_	_
7	elections	_	NNS	NNS	_	4	pobj	_	_
8	.	_	.	.	_	2	punct	_	_

Oracle:
(e / elect-01, ARG2, g / government-organization)
(g / government-organization, name, n / name)
(n / name, op, "Parliament")
(p / plan-01, ARG0, i / insurgent)
(p / plan-01, ARG1, a / attack-01)
(p / plan-01, time, e / elect-01)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),elections,elect-01,false), Span(4,5,List(1),mid,mid,false), Span(2,3,List(2),attacks,attack-01,false)),Map(2 -> attack-01, 1 -> mid, 0 -> elect-01),Map(e -> elect-01, m -> mid, a -> attack-01))),[Ljava.lang.String;@5c20aab9,Annotation([Ljava.lang.String;@4b7c4456,[Ljava.lang.String;@2c768ada,[Ljava.lang.String;@c1fca2a),Annotation([Ljava.lang.String;@5533dc72,[Ljava.lang.String;@7c447c76,[Ledu.cmu.lti.nlp.amr.Dependency;@64fc097e),Annotation([Ljava.lang.String;@1640c151,[Ljava.lang.String;@5d5b5fa7,[Ljava.lang.String;@2a32fb6),Annotation([Ljava.lang.String;@6107165,[Ljava.lang.String;@164a62bf,[Ledu.cmu.lti.nlp.amr.Entity;@11ebb1b6))
AMR:
(a / attack-01, ARG2, e / elect-01)
(e / elect-01, mod, m / mid)

Decoded in 17,855 microseconds
Sentence: 20020828 a nine month long nationwide state of emergency in Nepal expired.

mkDayMonthYear(20020828,28,08,2002)
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
mkDayMonthYear(20020828,28,08,2002)
Spans:
Span 0-1:  20020828 => (date-entity :day 28 :month 8 :year 2002)
Span 8-9:  emergency => emergency
Span 5-6:  nationwide => nationwide
Span 10-11:  Nepal => (country :name (name :op "Nepal"))
Span 2-3:  nine => 9

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  20020828 => (date-entity :day 28 :month 8 :year 2002)
Oracle Span 8-9:  emergency => emergency
Oracle Span 11-12:  expired => expire-01
Oracle Span 3-4:  month => (temporal-quantity :unit month)
Oracle Span 5-6:  nationwide => nationwide
Oracle Span 10-11:  Nepal => (country :name (name :op "Nepal"))
Oracle Span 2-3:  nine => 9
Oracle Span 6-7:  state => state

Missing span: expired => expire-01
Missing span: state => state
Missing span: month => (temporal-quantity :unit month)
Dependencies:
1	20020828	_	CD	CD	_	12	nsubj	_	_
2	a	_	DT	DT	_	4	det	_	_
3	nine	_	CD	CD	_	4	num	_	_
4	month	_	NN	NN	_	1	dep	_	_
5	long	_	JJ	JJ	_	7	amod	_	_
6	nationwide	_	JJ	JJ	_	7	amod	_	_
7	state	_	NN	NN	_	1	dep	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	emergency	_	NN	NN	_	8	pobj	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	Nepal	_	NNP	NNP	_	10	pobj	_	_
12	expired	_	VBD	VBD	_	0	root	_	_
13	.	_	.	.	_	12	punct	_	_

Oracle:
(c / country, name, n2 / name)
(d / date-entity, day, 28)
(d / date-entity, month, 8)
(d / date-entity, year, 2002)
(e / expire-01, ARG1, s / state)
(e / expire-01, time, d / date-entity)
(n2 / name, op, "Nepal")
(s / state, duration, t / temporal-quantity)
(s / state, extent, n / nationwide)
(s / state, location, c / country)
(s / state, mod, e2 / emergency)
(t / temporal-quantity, quant, 9 / 9)
(t / temporal-quantity, unit, m / month)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(2, 1, 0),Nepal,(country :name (name :op "Nepal")),false), Span(8,9,List(3),emergency,emergency,false), Span(5,6,List(4),nationwide,nationwide,false), Span(2,3,List(5),nine,9,false), Span(0,1,List(9, 8, 7, 6),20020828,(date-entity :day 28 :month 8 :year 2002),false)),Map(2 -> "Nepal", 5 -> 9, 8 -> 8, 7 -> 28, 1 -> name, 4 -> nationwide, 6 -> date-entity, 9 -> 2002, 0 -> country, 3 -> emergency),Map(e -> emergency, n -> name, 2 -> 28, 8 -> 8, d -> date-entity, c -> country, 22 -> 2002, 9 -> 9, n2 -> nationwide))),[Ljava.lang.String;@aaee2a2,Annotation([Ljava.lang.String;@f3021cb,[Ljava.lang.String;@4aaae508,[Ljava.lang.String;@6009bea),Annotation([Ljava.lang.String;@7bc6d27a,[Ljava.lang.String;@75769ab0,[Ledu.cmu.lti.nlp.amr.Dependency;@6869a3b3),Annotation([Ljava.lang.String;@6ab4ba9f,[Ljava.lang.String;@27ace0b1,[Ljava.lang.String;@664e5dee),Annotation([Ljava.lang.String;@431f1eaf,[Ljava.lang.String;@cb03411,[Ledu.cmu.lti.nlp.amr.Entity;@4c59e45e))
AMR:
(9 / 9, op, e / emergency)
(c / country, name, n / name)
(d / date-entity, day, 2 / 28)
(d / date-entity, mod, 9 / 9)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2002)
(e / emergency, location, c / country)
(n / name, op, "Nepal")
(n2 / nationwide, location, c / country)

Decoded in 54,014 microseconds
Sentence: Violence by anti-government insurgents across Nepal has escalated and bomb threats and explosions have occurred throughout the country.

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 6-7:  across => across
Span 11-12:  bomb => bomb
Span 19-20:  country => country
Span 9-10:  escalated => escalate-01
Span 14-15:  explosions => explode-01
Span 5-6:  insurgents => insurgent
Span 7-8:  Nepal => (country :name (name :op "Nepal"))
Span 0-1:  Violence => violence

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 6-7:  across => across
Oracle Span 10-11:  and => and
Oracle Span 13-14:  and => and
Oracle Span 2-3:  anti => oppose-01
Oracle Span 11-12:  bomb => bomb
Oracle Span 19-20:  country => country
Oracle Span 9-10:  escalated => escalate-01
Oracle Span 14-15:  explosions => explode-01
Oracle Span 4-5:  government => (government-organization :ARG0-of govern-01)
Oracle Span 5-6:  insurgents => insurgent
Oracle Span 7-8:  Nepal => (name :op "Nepal")
Oracle Span 12-13:  threats => threaten-01
Oracle Span 17-18:  throughout => throughout
Oracle Span 0-1:  Violence => violence

Incorrect span: Nepal => (country :name (name :op "Nepal"))
Missing span: Nepal => (name :op "Nepal")
Missing span: and => and
Missing span: and => and
Missing span: throughout => throughout
Missing span: anti => oppose-01
Missing span: threats => threaten-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Violence	_	NNP	NNP	_	8	nsubj	_	_
2	by	_	IN	IN	_	1	prep	_	_
3	anti-government	_	JJ	JJ	_	4	amod	_	_
4	insurgents	_	NNS	NNS	_	2	pobj	_	_
5	across	_	IN	IN	_	4	prep	_	_
6	Nepal	_	NNP	NNP	_	5	pobj	_	_
7	has	_	VBZ	VBZ	_	8	aux	_	_
8	escalated	_	VBN	VBN	_	0	root	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	bomb	_	NN	NN	_	11	nn	_	_
11	threats	_	NNS	NNS	_	15	nsubj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	explosions	_	NNS	NNS	_	11	conj	_	_
14	have	_	VBP	VBP	_	15	aux	_	_
15	occurred	_	VBN	VBN	_	8	conj	_	_
16	throughout	_	IN	IN	_	15	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	country	_	NN	NN	_	16	pobj	_	_
19	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, a3 / and)
(a / and, op, e / escalate-01)
(a2 / across, op, c / country)
(a3 / and, location, t2 / throughout)
(a3 / and, op, e2 / explode-01)
(a3 / and, op, t / threaten-01)
(c / country, name, n / name)
(e / escalate-01, ARG1, v / violence)
(g2 / govern-01, ARG0, g / government-organization)
(n / name, op, "Nepal")
(o / oppose-01, ARG0, i / insurgent)
(o / oppose-01, ARG1, g / government-organization)
(t / threaten-01, ARG1, b / bomb)
(t2 / throughout, op, c / country)
(v / violence, location, a2 / across)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),country,country,false), Span(14,15,List(1),explosions,explode-01,false), Span(11,12,List(2),bomb,bomb,false), Span(9,10,List(3),escalated,escalate-01,false), Span(7,8,List(6, 5, 4),Nepal,(country :name (name :op "Nepal")),false), Span(6,7,List(7),across,across,false), Span(5,6,List(8),insurgents,insurgent,false), Span(0,1,List(9),Violence,violence,false)),Map(2 -> bomb, 5 -> name, 8 -> insurgent, 7 -> across, 1 -> explode-01, 4 -> country, 6 -> "Nepal", 9 -> violence, 0 -> country, 3 -> escalate-01),Map(n -> name, e -> explode-01, b -> bomb, e2 -> escalate-01, v -> violence, a -> across, i -> insurgent, c -> country, c2 -> country))),[Ljava.lang.String;@58ec7116,Annotation([Ljava.lang.String;@63bde6c2,[Ljava.lang.String;@6ea04618,[Ljava.lang.String;@6dd82486),Annotation([Ljava.lang.String;@56078cea,[Ljava.lang.String;@5a00eb1e,[Ledu.cmu.lti.nlp.amr.Dependency;@36fcf6c0),Annotation([Ljava.lang.String;@1aac188d,[Ljava.lang.String;@7026b7ee,[Ljava.lang.String;@2d23faef),Annotation([Ljava.lang.String;@7cb8437d,[Ljava.lang.String;@62a4417,[Ledu.cmu.lti.nlp.amr.Entity;@43f61afb))
AMR:
(a / across, op, c2 / country)
(c2 / country, name, n / name)
(e / explode-01, ARG0, v / violence)
(e / explode-01, ARG1, b / bomb)
(e2 / escalate-01, ARG0, c2 / country)
(e2 / escalate-01, ARG1, v / violence)
(e2 / escalate-01, location, c / country)
(i / insurgent, location, c2 / country)
(n / name, op, "Nepal")

Decoded in 148,124 microseconds
Sentence: At least 5 major bomb incidents occurred in the Kathmandu Valley 20020828-20020904.

NER Entity: (country :name (name :op "Kathmandu" :op "Valley"))
Spans:
Span 4-5:  bomb => bomb
Span 5-6:  incidents => incident
Span 9-11:  Kathmandu Valley => (country :name (name :op "Kathmandu" :op "Valley"))
Span 3-4:  major => major

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 11-12:  20020828-20020904 => 2002
Oracle Span 2-3:  5 => 5
Oracle Span 4-5:  bomb => bomb
Oracle Span 5-6:  incidents => incident
Oracle Span 9-11:  Kathmandu Valley => (valley :name (name :op "Valley" :op "Kathmandu"))
Oracle Span 3-4:  major => major

Incorrect span: Kathmandu Valley => (country :name (name :op "Kathmandu" :op "Valley"))
Missing span: Kathmandu Valley => (valley :name (name :op "Valley" :op "Kathmandu"))
Missing span: 5 => 5
Missing span: 20020828-20020904 => 2002
Dependencies:
1	At	_	IN	IN	_	3	quantmod	_	_
2	least	_	JJS	JJS	_	1	mwe	_	_
3	5	_	CD	CD	_	6	num	_	_
4	major	_	JJ	JJ	_	6	amod	_	_
5	bomb	_	NN	NN	_	6	nn	_	_
6	incidents	_	NNS	NNS	_	7	nsubj	_	_
7	occurred	_	VBD	VBD	_	0	root	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	12	det	_	_
10	Kathmandu	_	NNP	NNP	_	12	nn	_	_
11	Valley	_	NNP	NNP	_	12	nn	_	_
12	20020828-20020904	_	NNP	NNP	_	8	pobj	_	_
13	.	_	.	.	_	7	punct	_	_

Oracle:
(i / incident, location, v / valley)
(i / incident, mod, b / bomb)
(i / incident, mod, m / major)
(n / name, op, "Kathmandu")
(n / name, op, "Valley")
(v / valley, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),Kathmandu Valley,(country :name (name :op "Kathmandu" :op "Valley")),false), Span(5,6,List(4),incidents,incident,false), Span(4,5,List(5),bomb,bomb,false), Span(3,4,List(6),major,major,false)),Map(2 -> "Kathmandu", 5 -> bomb, 1 -> name, 4 -> incident, 6 -> major, 0 -> country, 3 -> "Valley"),Map(n -> name, b -> bomb, m -> major, i -> incident, c -> country))),[Ljava.lang.String;@713064e8,Annotation([Ljava.lang.String;@4fad6218,[Ljava.lang.String;@1bf39d06,[Ljava.lang.String;@68217d41),Annotation([Ljava.lang.String;@1ac45389,[Ljava.lang.String;@3e5d4f6b,[Ledu.cmu.lti.nlp.amr.Dependency;@39c1fe0b),Annotation([Ljava.lang.String;@5ae95707,[Ljava.lang.String;@62891fc8,[Ljava.lang.String;@367b22e5),Annotation([Ljava.lang.String;@fca387,[Ljava.lang.String;@10bd9df0,[Ledu.cmu.lti.nlp.amr.Entity;@3ae0b770))
AMR:
(c / country, name, n / name)
(c / country, part, i / incident)
(i / incident, mod, b / bomb)
(i / incident, mod, m / major)
(n / name, op, "Kathmandu")
(n / name, op, "Valley")

Decoded in 39,154 microseconds
Sentence: 20020828 a bomb exploded at a supermarket in the center of Kathmandu city, injuring 2.

mkDayMonthYear(20020828,28,08,2002)
NER Entity: (country :name (name :op "Kathmandu"))
mkDayMonthYear(20020828,28,08,2002)
Spans:
Span 0-1:  20020828 => (date-entity :day 28 :month 8 :year 2002)
Span 2-3:  bomb => bomb
Span 9-10:  center => center
Span 12-13:  city => city
Span 3-4:  exploded => explode-01
Span 6-7:  supermarket => supermarket

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 15-16:  2 => (person :quant 2)
Oracle Span 0-1:  20020828 => (date-entity :day 28 :month 8 :year 2002)
Oracle Span 2-3:  bomb => bomb
Oracle Span 9-10:  center => center
Oracle Span 12-13:  city => city
Oracle Span 3-4:  exploded => explode-01
Oracle Span 14-15:  injuring => injure-01
Oracle Span 11-12:  Kathmandu => (name :op "Kathmandu")
Oracle Span 6-7:  supermarket => supermarket

Missing span: Kathmandu => (name :op "Kathmandu")
Missing span: injuring => injure-01
Missing span: 2 => (person :quant 2)
Dependencies:
1	20020828	_	CD	CD	_	4	nsubj	_	_
2	a	_	DT	DT	_	3	det	_	_
3	bomb	_	NN	NN	_	1	dep	_	_
4	exploded	_	VBD	VBD	_	0	root	_	_
5	at	_	IN	IN	_	4	prep	_	_
6	a	_	DT	DT	_	7	det	_	_
7	supermarket	_	NN	NN	_	5	pobj	_	_
8	in	_	IN	IN	_	4	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	center	_	NN	NN	_	8	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	Kathmandu	_	NNP	NNP	_	13	nn	_	_
13	city	_	NN	NN	_	11	pobj	_	_
14	,	_	,	,	_	4	punct	_	_
15	injuring	_	VBG	VBG	_	4	xcomp	_	_
16	2	_	CD	CD	_	15	dobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(c3 / city, name, n / name)
(c3 / city, part, c / center)
(d / date-entity, day, 28)
(d / date-entity, month, 8)
(d / date-entity, year, 2002)
(e / explode-01, ARG1, b / bomb)
(e / explode-01, location, s / supermarket)
(e / explode-01, time, d / date-entity)
(i / injure-01, ARG0, e / explode-01)
(i / injure-01, ARG1, p / person)
(n / name, op, "Kathmandu")
(p / person, quant, 2)
(s / supermarket, location, c / center)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),city,city,false), Span(9,10,List(1),center,center,false), Span(6,7,List(2),supermarket,supermarket,false), Span(3,4,List(3),exploded,explode-01,false), Span(2,3,List(4),bomb,bomb,false), Span(0,1,List(8, 7, 6, 5),20020828,(date-entity :day 28 :month 8 :year 2002),false)),Map(2 -> supermarket, 5 -> date-entity, 8 -> 2002, 7 -> 8, 1 -> center, 4 -> bomb, 6 -> 28, 0 -> city, 3 -> explode-01),Map(e -> explode-01, 2 -> 28, b -> bomb, 8 -> 8, s -> supermarket, d -> date-entity, c -> city, 22 -> 2002, c2 -> center))),[Ljava.lang.String;@55e3d6c3,Annotation([Ljava.lang.String;@30e6a763,[Ljava.lang.String;@4c48fe92,[Ljava.lang.String;@732c9b5c),Annotation([Ljava.lang.String;@38320e34,[Ljava.lang.String;@3d6a6bee,[Ledu.cmu.lti.nlp.amr.Dependency;@36ddaebf),Annotation([Ljava.lang.String;@213c3543,[Ljava.lang.String;@9d7ccfe,[Ljava.lang.String;@670ce331),Annotation([Ljava.lang.String;@3cff0139,[Ljava.lang.String;@7c29adc8,[Ledu.cmu.lti.nlp.amr.Entity;@4b2e3e8f))
AMR:
(c / city, part, c2 / center)
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2002)
(e / explode-01, ARG0, b / bomb)
(e / explode-01, ARG1, s / supermarket)
(e / explode-01, ARG2, c2 / center)
(e / explode-01, duration, d / date-entity)

Decoded in 62,752 microseconds
Sentence: 20020829 in Lalitpur district, Kathmandu valley 1 soldier was killed by a bomb.

mkDayMonthYear(20020829,29,08,2002)
NER Entity: (country :name (name :op "Lalitpur"))
NER Entity: (country :name (name :op "Kathmandu"))
mkDayMonthYear(20020829,29,08,2002)
Spans:
Span 0-1:  20020829 => (date-entity :day 29 :month 8 :year 2002)
Span 13-14:  bomb => bomb
Span 3-4:  district => district
Span 10-11:  killed => kill-01
Span 8-9:  soldier => soldier

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 7-8:  1 => 1
Oracle Span 0-1:  20020829 => (date-entity :day 29 :month 8 :year 2002)
Oracle Span 13-14:  bomb => bomb
Oracle Span 3-4:  district => district
Oracle Span 5-7:  Kathmandu valley => (valley :name (name :op "Valley" :op "Kathmandu"))
Oracle Span 10-11:  killed => kill-01
Oracle Span 2-3:  Lalitpur => (name :op "Lalitpur")
Oracle Span 8-9:  soldier => soldier

Missing span: Lalitpur => (name :op "Lalitpur")
Missing span: Kathmandu valley => (valley :name (name :op "Valley" :op "Kathmandu"))
Missing span: 1 => 1
Dependencies:
1	20020829	_	CD	CD	_	11	nsubjpass	_	_
2	in	_	IN	IN	_	1	prep	_	_
3	Lalitpur	_	NNP	NNP	_	4	nn	_	_
4	district	_	NN	NN	_	2	pobj	_	_
5	,	_	,	,	_	4	punct	_	_
6	Kathmandu	_	NNP	NNP	_	7	nn	_	_
7	valley	_	NNP	NNP	_	4	appos	_	_
8	1	_	CD	CD	_	9	num	_	_
9	soldier	_	NN	NN	_	7	dep	_	_
10	was	_	VBD	VBD	_	11	auxpass	_	_
11	killed	_	VBN	VBN	_	0	root	_	_
12	by	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	14	det	_	_
14	bomb	_	NN	NN	_	12	pobj	_	_
15	.	_	.	.	_	11	punct	_	_

Oracle:
(d / date-entity, day, 29)
(d / date-entity, month, 8)
(d / date-entity, year, 2002)
(d2 / district, location, v / valley)
(d2 / district, name, n / name)
(k / kill-01, ARG1, s / soldier)
(k / kill-01, ARG2, b / bomb)
(k / kill-01, location, d2 / district)
(k / kill-01, time, d / date-entity)
(n / name, op, "Lalitpur")
(n2 / name, op, "Kathmandu")
(n2 / name, op, "Valley")
(s / soldier, quant, 1 / 1)
(v / valley, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),bomb,bomb,false), Span(10,11,List(1),killed,kill-01,false), Span(8,9,List(2),soldier,soldier,false), Span(3,4,List(3),district,district,false), Span(0,1,List(7, 6, 5, 4),20020829,(date-entity :day 29 :month 8 :year 2002),false)),Map(2 -> soldier, 5 -> 29, 7 -> 2002, 1 -> kill-01, 4 -> date-entity, 6 -> 8, 0 -> bomb, 3 -> district),Map(2 -> 29, k -> kill-01, b -> bomb, 8 -> 8, s -> soldier, d -> district, d2 -> date-entity, 22 -> 2002))),[Ljava.lang.String;@4bbb49b0,Annotation([Ljava.lang.String;@f096f37,[Ljava.lang.String;@3effd4f3,[Ljava.lang.String;@41f4fe5),Annotation([Ljava.lang.String;@15f8701f,[Ljava.lang.String;@514cd540,[Ledu.cmu.lti.nlp.amr.Dependency;@11d4dbd6),Annotation([Ljava.lang.String;@6f4ade6e,[Ljava.lang.String;@39e43310,[Ljava.lang.String;@eb507b9),Annotation([Ljava.lang.String;@390877d2,[Ljava.lang.String;@86733,[Ledu.cmu.lti.nlp.amr.Entity;@186cb891))
AMR:
(d2 / date-entity, day, 2 / 29)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 22 / 2002)
(k / kill-01, ARG0, d / district)
(k / kill-01, ARG1, s / soldier)
(k / kill-01, location, b / bomb)
(k / kill-01, time, d2 / date-entity)

Decoded in 148,714 microseconds
Sentence: After 20020829 2 separate bomb incidents occurred at the municipality in Lalitpur district and a shop in Kathmandu city.

mkDayMonthYear(20020829,29,08,2002)
NER Entity: (country :name (name :op "Lalitpur"))
NER Entity: (country :name (name :op "Kathmandu"))
mkDayMonthYear(20020829,29,08,2002)
Spans:
Span 1-2:  20020829 => (date-entity :day 29 :month 8 :year 2002)
Span 0-1:  After => after
Span 4-5:  bomb => bomb
Span 18-19:  city => city
Span 12-13:  district => district
Span 5-6:  incidents => incident
Span 3-4:  separate => separate

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  2 => 2
Oracle Span 1-2:  20020829 => (date-entity :day 29 :month 8 :year 2002)
Oracle Span 0-1:  After => after
Oracle Span 13-14:  and => and
Oracle Span 4-5:  bomb => bomb
Oracle Span 18-19:  city => city
Oracle Span 12-13:  district => district
Oracle Span 5-6:  incidents => incident
Oracle Span 17-18:  Kathmandu => (name :op "Kathmandu")
Oracle Span 11-12:  Lalitpur => (name :op "Lalitpur")
Oracle Span 9-10:  municipality => municipality
Oracle Span 3-4:  separate => separate
Oracle Span 15-16:  shop => shop

Missing span: Lalitpur => (name :op "Lalitpur")
Missing span: Kathmandu => (name :op "Kathmandu")
Missing span: and => and
Missing span: shop => shop
Missing span: municipality => municipality
Missing span: 2 => 2
Dependencies:
1	After	_	IN	IN	_	7	prep	_	_
2	20020829	_	CD	CD	_	3	num	_	_
3	2	_	CD	CD	_	1	pobj	_	_
4	separate	_	JJ	JJ	_	6	amod	_	_
5	bomb	_	NN	NN	_	6	nn	_	_
6	incidents	_	NNS	NNS	_	7	nsubj	_	_
7	occurred	_	VBD	VBD	_	0	root	_	_
8	at	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	municipality	_	NN	NN	_	8	pobj	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	Lalitpur	_	NNP	NNP	_	13	nn	_	_
13	district	_	NN	NN	_	11	pobj	_	_
14	and	_	CC	CC	_	10	cc	_	_
15	a	_	DT	DT	_	16	det	_	_
16	shop	_	NN	NN	_	10	conj	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	Kathmandu	_	NNP	NNP	_	19	nn	_	_
19	city	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(a / after, op, d / date-entity)
(a2 / and, op, m / municipality)
(a2 / and, op, s2 / shop)
(c / city, name, n2 / name)
(d / date-entity, day, 29)
(d / date-entity, month, 8)
(d / date-entity, year, 2002)
(d2 / district, name, n / name)
(i / incident, location, a2 / and)
(i / incident, mod, b / bomb)
(i / incident, mod, s / separate)
(i / incident, quant, 2 / 2)
(i / incident, time, a / after)
(m / municipality, location, d2 / district)
(n / name, op, "Lalitpur")
(n2 / name, op, "Kathmandu")
(s2 / shop, location, c / city)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),city,city,false), Span(12,13,List(1),district,district,false), Span(5,6,List(2),incidents,incident,false), Span(4,5,List(3),bomb,bomb,false), Span(3,4,List(4),separate,separate,false), Span(1,2,List(8, 7, 6, 5),20020829,(date-entity :day 29 :month 8 :year 2002),false), Span(0,1,List(9),After,after,false)),Map(2 -> incident, 5 -> date-entity, 8 -> 2002, 7 -> 8, 1 -> district, 4 -> separate, 6 -> 29, 9 -> after, 0 -> city, 3 -> bomb),Map(2 -> 29, b -> bomb, 8 -> 8, s -> separate, d -> district, a -> after, d2 -> date-entity, i -> incident, c -> city, 22 -> 2002))),[Ljava.lang.String;@3ec2ecea,Annotation([Ljava.lang.String;@440eaa07,[Ljava.lang.String;@7fc7c4a,[Ljava.lang.String;@7aa9e414),Annotation([Ljava.lang.String;@53a5e217,[Ljava.lang.String;@624a24f6,[Ledu.cmu.lti.nlp.amr.Dependency;@6b00ad9),Annotation([Ljava.lang.String;@338cc75f,[Ljava.lang.String;@4f453e63,[Ljava.lang.String;@7c9bdee9),Annotation([Ljava.lang.String;@7afbf561,[Ljava.lang.String;@2f98635e,[Ledu.cmu.lti.nlp.amr.Entity;@49c8f6e8))
AMR:
(a / after, op, d2 / date-entity)
(a / after, poss, c / city)
(b / bomb, location, d / district)
(d2 / date-entity, day, 2 / 29)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 22 / 2002)
(i / incident, mod, b / bomb)
(i / incident, mod, c / city)
(i / incident, mod, s / separate)

Decoded in 85,144 microseconds
Sentence: 20020904 a bomb exploded at the Kathmandu metropolitan office.

mkDayMonthYear(20020904,04,09,2002)
NER Entity: (country :name (name :op "Kathmandu"))
mkDayMonthYear(20020904,04,09,2002)
Spans:
Span 0-1:  20020904 => (date-entity :day 4 :month 9 :year 2002)
Span 2-3:  bomb => bomb
Span 3-4:  exploded => explode-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  20020904 => (date-entity :day 4 :month 9 :year 2002)
Oracle Span 2-3:  bomb => bomb
Oracle Span 3-4:  exploded => explode-01
Oracle Span 6-7:  Kathmandu => (city :name (name :op "Kathmandu"))
Oracle Span 7-8:  metropolitan => metropolis
Oracle Span 8-9:  office => office

Missing span: Kathmandu => (city :name (name :op "Kathmandu"))
Missing span: office => office
Missing span: metropolitan => metropolis
Dependencies:
1	20020904	_	CD	CD	_	4	nsubj	_	_
2	a	_	DT	DT	_	3	det	_	_
3	bomb	_	NN	NN	_	1	dep	_	_
4	exploded	_	VBD	VBD	_	0	root	_	_
5	at	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	Kathmandu	_	NNP	NNP	_	9	nn	_	_
8	metropolitan	_	JJ	JJ	_	9	amod	_	_
9	office	_	NN	NN	_	5	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(c / city, name, n / name)
(d / date-entity, day, 4)
(d / date-entity, month, 9)
(d / date-entity, year, 2002)
(e / explode-01, ARG1, b / bomb)
(e / explode-01, location, o / office)
(e / explode-01, time, d / date-entity)
(n / name, op, "Kathmandu")
(o / office, mod, c / city)
(o / office, mod, m / metropolis)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),exploded,explode-01,false), Span(2,3,List(1),bomb,bomb,false), Span(0,1,List(5, 4, 3, 2),20020904,(date-entity :day 4 :month 9 :year 2002),false)),Map(2 -> date-entity, 5 -> 2002, 1 -> bomb, 4 -> 9, 0 -> explode-01, 3 -> 4),Map(e -> explode-01, 2 -> 2002, b -> bomb, d -> date-entity, 4 -> 4, 9 -> 9))),[Ljava.lang.String;@6b0615ae,Annotation([Ljava.lang.String;@4e73b552,[Ljava.lang.String;@221dad51,[Ljava.lang.String;@2cec704c),Annotation([Ljava.lang.String;@771cbb1a,[Ljava.lang.String;@2416498e,[Ledu.cmu.lti.nlp.amr.Dependency;@6b2e0f78),Annotation([Ljava.lang.String;@240f6c41,[Ljava.lang.String;@3659d7b1,[Ljava.lang.String;@2015b2cd),Annotation([Ljava.lang.String;@3bdb2c78,[Ljava.lang.String;@64693226,[Ledu.cmu.lti.nlp.amr.Entity;@1c758545))
AMR:
(d / date-entity, day, 4 / 4)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2002)
(e / explode-01, ARG0, b / bomb)
(e / explode-01, duration, d / date-entity)

Decoded in 29,582 microseconds
Sentence: Outside the Kathmandu Valley anti-government guerrillas have murdered many activists from the ruling Nepali Congress party and others and burned or bombed several buildings.

NER Entity: (country :name (name :op "Kathmandu" :op "Valley"))
NER Entity: (organization :name (name :op "Nepali" :op "Congress"))
Spans:
Span 11-12:  activists => activist
Span 25-26:  buildings => building
Span 21-22:  burned => burn-01
Span 7-8:  guerrillas => guerrilla
Span 2-4:  Kathmandu Valley => (country :name (name :op "Kathmandu" :op "Valley"))
Span 10-11:  many => many
Span 22-23:  or => or
Span 19-20:  others => other
Span 24-25:  several => several
Span 13-15:  the ruling => (organization :name (name :op "Nepali" :op "Congress"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 11-12:  activists => activist
Oracle Span 18-19:  and => and
Oracle Span 20-21:  and => and
Oracle Span 4-5:  anti => oppose-01
Oracle Span 23-24:  bombed => bomb-01
Oracle Span 25-26:  buildings => building
Oracle Span 21-22:  burned => burn-01
Oracle Span 6-7:  government => (government-organization :ARG0-of govern-01)
Oracle Span 7-8:  guerrillas => guerrilla
Oracle Span 8-9:  have => (person :ARG0-of have-org-role-91)
Oracle Span 2-4:  Kathmandu Valley => (valley :name (name :op "Valley" :op "Kathmandu"))
Oracle Span 10-11:  many => many
Oracle Span 9-10:  murdered => murder-01
Oracle Span 15-17:  Nepali Congress => (have-org-role-91 :ARG1 (political-party :name (name :op "Congress" :op "Nepali")))
Oracle Span 22-23:  or => or
Oracle Span 19-20:  others => other
Oracle Span 0-1:  Outside => outside
Oracle Span 17-18:  party => party
Oracle Span 14-15:  ruling => rule-03
Oracle Span 24-25:  several => several

Extra span: the ruling => (organization :name (name :op "Nepali" :op "Congress"))
Incorrect span: Kathmandu Valley => (country :name (name :op "Kathmandu" :op "Valley"))
Missing span: Nepali Congress => (have-org-role-91 :ARG1 (political-party :name (name :op "Congress" :op "Nepali")))
Missing span: Kathmandu Valley => (valley :name (name :op "Valley" :op "Kathmandu"))
Missing span: and => and
Missing span: Outside => outside
Missing span: bombed => bomb-01
Missing span: murdered => murder-01
Missing span: and => and
Missing span: party => party
Missing span: ruling => rule-03
Missing span: anti => oppose-01
Missing span: have => (person :ARG0-of have-org-role-91)
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Outside	_	IN	IN	_	8	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	Kathmandu	_	NNP	NNP	_	4	nn	_	_
4	Valley	_	NNP	NNP	_	1	pobj	_	_
5	anti-government	_	JJ	JJ	_	6	amod	_	_
6	guerrillas	_	NNS	NNS	_	8	nsubj	_	_
7	have	_	VBP	VBP	_	8	aux	_	_
8	murdered	_	VBN	VBN	_	0	root	_	_
9	many	_	JJ	JJ	_	10	amod	_	_
10	activists	_	NNS	NNS	_	8	dobj	_	_
11	from	_	IN	IN	_	8	prep	_	_
12	the	_	DT	DT	_	16	det	_	_
13	ruling	_	JJ	JJ	_	16	amod	_	_
14	Nepali	_	NNP	NNP	_	16	nn	_	_
15	Congress	_	NNP	NNP	_	16	nn	_	_
16	party	_	NN	NN	_	11	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	others	_	NNS	NNS	_	16	conj	_	_
19	and	_	CC	CC	_	8	cc	_	_
20	burned	_	JJ	JJ	_	8	conj	_	_
21	or	_	CC	CC	_	8	cc	_	_
22	bombed	_	VBN	VBN	_	8	conj	_	_
23	several	_	JJ	JJ	_	24	amod	_	_
24	buildings	_	NNS	NNS	_	22	dobj	_	_
25	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, location, o / outside)
(a / and, op, m / murder-01)
(a / and, op, o3 / or)
(a4 / and, op, p3 / person)
(a4 / and, quant, m2 / many)
(b / burn-01, ARG0, g / guerrilla)
(b / burn-01, ARG1, b3 / building)
(b2 / bomb-01, ARG0, g / guerrilla)
(b2 / bomb-01, ARG1, b3 / building)
(b3 / building, quant, s / several)
(g3 / govern-01, ARG0, g2 / government-organization)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, p4 / party)
(h / have-org-role-91, ARG2, a3 / activist)
(h2 / have-org-role-91, ARG1, p2 / political-party)
(m / murder-01, ARG0, g / guerrilla)
(m / murder-01, ARG1, a4 / and)
(n / name, op, "Kathmandu")
(n / name, op, "Valley")
(n2 / name, op, "Congress")
(n2 / name, op, "Nepali")
(o / outside, op, v / valley)
(o3 / or, op, b / burn-01)
(o3 / or, op, b2 / bomb-01)
(o4 / oppose-01, ARG0, g / guerrilla)
(o4 / oppose-01, ARG1, g2 / government-organization)
(p2 / political-party, name, n2 / name)
(p4 / party, mod, o2 / other)
(r / rule-03, ARG0, p2 / political-party)
(v / valley, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),buildings,building,false), Span(24,25,List(1),several,several,false), Span(22,23,List(2),or,or,false), Span(21,22,List(3),burned,burn-01,false), Span(19,20,List(4),others,other,false), Span(13,15,List(8, 7, 6, 5),the ruling,(organization :name (name :op "Nepali" :op "Congress")),false), Span(11,12,List(9),activists,activist,false), Span(10,11,List(10),many,many,false), Span(7,8,List(11),guerrillas,guerrilla,false), Span(2,4,List(15, 14, 13, 12),Kathmandu Valley,(country :name (name :op "Kathmandu" :op "Valley")),false)),Map(2 -> or, 5 -> organization, 12 -> country, 15 -> "Valley", 8 -> "Congress", 7 -> "Nepali", 1 -> several, 4 -> other, 11 -> guerrilla, 14 -> "Kathmandu", 6 -> name, 0 -> building, 9 -> activist, 3 -> burn-01, 10 -> many, 13 -> name),Map(n -> name, b -> building, o3 -> organization, b2 -> burn-01, s -> several, m -> many, g -> guerrilla, a -> activist, o2 -> other, c -> country, o -> or, n2 -> name))),[Ljava.lang.String;@117bcfdc,Annotation([Ljava.lang.String;@73a19967,[Ljava.lang.String;@5e746d37,[Ljava.lang.String;@6e1b9411),Annotation([Ljava.lang.String;@21d1b321,[Ljava.lang.String;@5ec46cdd,[Ledu.cmu.lti.nlp.amr.Dependency;@2324bfe7),Annotation([Ljava.lang.String;@112d1c8e,[Ljava.lang.String;@3d49fd31,[Ljava.lang.String;@4016ccc1),Annotation([Ljava.lang.String;@46cb98a3,[Ljava.lang.String;@3ffb3598,[Ledu.cmu.lti.nlp.amr.Entity;@4da9f723))
AMR:
(b / building, mod, c / country)
(b / building, quant, s / several)
(b2 / burn-01, ARG0, m / many)
(b2 / burn-01, ARG1, g / guerrilla)
(b2 / burn-01, ARG2, o3 / organization)
(b2 / burn-01, domain, a / activist)
(c / country, name, n2 / name)
(n / name, op, "Congress")
(n / name, op, "Nepali")
(n2 / name, op, "Kathmandu")
(n2 / name, op, "Valley")
(o / or, op, b / building)
(o / or, op, b2 / burn-01)
(o2 / other, poss, g / guerrilla)
(o3 / organization, name, n / name)

Decoded in 274,196 microseconds
Sentence: An underground insurgent leader stated in an interview with the English language daily newspaper The Kathmandu Post that insurgents would comprehensively and violently disrupt mid-term parliamentary elections on 20021113.

NER Entity: (thing :name (name :op "English"))
NER Entity: (organization :name (name :op "The" :op "Kathmandu" :op "Post"))
mkDayMonthYear(20021113,13,11,2002)
mkDayMonthYear(20021113,13,11,2002)
NER Entity: (thing :name (name :op "English"))
Spans:
Span 30-31:  20021113 => (date-entity :day 13 :month 11 :year 2002)
Span 23-24:  disrupt => disrupt-01
Span 28-29:  elections => elect-01
Span 10-11:  English => (name :op "English")
Span 2-3:  insurgent => insurgent
Span 18-19:  insurgents => insurgent
Span 7-8:  interview => interview-01
Span 11-12:  language => language
Span 24-25:  mid => mid
Span 13-14:  newspaper => newspaper
Span 14-17:  The Kathmandu Post => (organization :name (name :op "The" :op "Kathmandu" :op "Post"))
Span 1-2:  underground => underground
Span 22-23:  violently => violent

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 30-31:  20021113 => (date-entity :day 13 :month 11 :year 2002)
Oracle Span 21-22:  and => and
Oracle Span 20-21:  comprehensively => comprehensive
Oracle Span 23-24:  disrupt => disrupt-01
Oracle Span 28-29:  elections => elect-01
Oracle Span 10-11:  English => (name :op "English")
Oracle Span 2-3:  insurgent => insurgent
Oracle Span 18-19:  insurgents => insurgent
Oracle Span 7-8:  interview => interview-01
Oracle Span 11-12:  language => language
Oracle Span 3-4:  leader => (person :ARG0-of lead-02)
Oracle Span 13-14:  newspaper => newspaper
Oracle Span 27-28:  parliamentary => parliament
Oracle Span 4-5:  stated => state-01
Oracle Span 14-17:  The Kathmandu Post => (name :op "Post" :op "Kathmandu" :op "The")
Oracle Span 1-2:  underground => underground
Oracle Span 22-23:  violently => violent

Extra span: mid => mid
Incorrect span: The Kathmandu Post => (organization :name (name :op "The" :op "Kathmandu" :op "Post"))
Missing span: The Kathmandu Post => (name :op "Post" :op "Kathmandu" :op "The")
Missing span: stated => state-01
Missing span: and => and
Missing span: leader => (person :ARG0-of lead-02)
Missing span: comprehensively => comprehensive
Missing span: parliamentary => parliament
Dependencies:
1	An	_	DT	DT	_	4	det	_	_
2	underground	_	JJ	JJ	_	4	amod	_	_
3	insurgent	_	NN	NN	_	4	nn	_	_
4	leader	_	NN	NN	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	an	_	DT	DT	_	8	det	_	_
8	interview	_	NN	NN	_	6	pobj	_	_
9	with	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	14	det	_	_
11	English	_	JJ	JJ	_	14	amod	_	_
12	language	_	NN	NN	_	14	nn	_	_
13	daily	_	JJ	JJ	_	14	amod	_	_
14	newspaper	_	NN	NN	_	9	pobj	_	_
15	The	_	DT	DT	_	17	det	_	_
16	Kathmandu	_	NNP	NNP	_	17	nn	_	_
17	Post	_	NNP	NNP	_	5	dobj	_	_
18	that	_	IN	IN	_	24	mark	_	_
19	insurgents	_	NNS	NNS	_	24	nsubj	_	_
20	would	_	MD	MD	_	24	aux	_	_
21	comprehensively	_	RB	RB	_	24	advmod	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	violently	_	RB	RB	_	21	conj	_	_
24	disrupt	_	VB	VB	_	17	dep	_	_
25	mid-term	_	JJ	JJ	_	27	amod	_	_
26	parliamentary	_	JJ	JJ	_	27	amod	_	_
27	elections	_	NNS	NNS	_	24	dobj	_	_
28	on	_	IN	IN	_	24	prep	_	_
29	20021113	_	CD	CD	_	28	pobj	_	_
30	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c2 / comprehensive)
(a / and, op, v / violent)
(d2 / disrupt-01, ARG0, i3 / insurgent)
(d2 / disrupt-01, ARG1, e / elect-01)
(d2 / disrupt-01, manner, a / and)
(d2 / disrupt-01, time, d3 / date-entity)
(d3 / date-entity, day, 13)
(d3 / date-entity, month, 11)
(d3 / date-entity, year, 2002)
(e / elect-01, ARG2, p / parliament)
(i2 / interview-01, ARG0, n / newspaper)
(l / language, name, n4 / name)
(l3 / lead-02, ARG0, p2 / person)
(l3 / lead-02, ARG1, i / insurgent)
(n / newspaper, mod, l / language)
(n / newspaper, name, n2 / name)
(n2 / name, op, "Kathmandu")
(n2 / name, op, "Post")
(n2 / name, op, "The")
(n4 / name, op, "English")
(p2 / person, mod, u / underground)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, d2 / disrupt-01)
(s / state-01, medium, i2 / interview-01)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(3, 2, 1, 0),20021113,(date-entity :day 13 :month 11 :year 2002),false), Span(28,29,List(4),elections,elect-01,false), Span(24,25,List(5),mid,mid,false), Span(23,24,List(6),disrupt,disrupt-01,false), Span(22,23,List(7),violently,violent,false), Span(18,19,List(8),insurgents,insurgent,false), Span(14,17,List(13, 12, 11, 10, 9),The Kathmandu Post,(organization :name (name :op "The" :op "Kathmandu" :op "Post")),false), Span(13,14,List(14),newspaper,newspaper,false), Span(11,12,List(15),language,language,false), Span(10,11,List(17, 16),English,(name :op "English"),false), Span(7,8,List(18),interview,interview-01,false), Span(2,3,List(19),insurgent,insurgent,false), Span(1,2,List(20),underground,underground,false)),Map(2 -> 11, 5 -> mid, 12 -> "Kathmandu", 15 -> language, 8 -> insurgent, 18 -> interview-01, 7 -> violent, 17 -> "English", 1 -> 13, 4 -> elect-01, 11 -> "The", 14 -> newspaper, 20 -> underground, 6 -> disrupt-01, 0 -> date-entity, 9 -> organization, 16 -> name, 19 -> insurgent, 3 -> 2002, 10 -> name, 13 -> "Post"),Map(e -> elect-01, n -> name, 2 -> 2002, 12 -> 11, v -> violent, d -> date-entity, m -> mid, i3 -> insurgent, 1 -> 13, n3 -> name, d2 -> disrupt-01, i2 -> interview-01, i -> insurgent, u -> underground, l -> language, o -> organization, n2 -> newspaper))),[Ljava.lang.String;@3b2f4a93,Annotation([Ljava.lang.String;@213bd3d5,[Ljava.lang.String;@470a659f,[Ljava.lang.String;@451882b2),Annotation([Ljava.lang.String;@4a23350,[Ljava.lang.String;@7b78ed6a,[Ledu.cmu.lti.nlp.amr.Dependency;@6fca5907),Annotation([Ljava.lang.String;@6ec65b5e,[Ljava.lang.String;@7bebcd65,[Ljava.lang.String;@47447ccf),Annotation([Ljava.lang.String;@7afb1741,[Ljava.lang.String;@263bbfeb,[Ledu.cmu.lti.nlp.amr.Entity;@31edeac))
AMR:
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 2 / 2002)
(d2 / disrupt-01, ARG0, i / insurgent)
(d2 / disrupt-01, ARG1, e / elect-01)
(d2 / disrupt-01, manner, v / violent)
(d2 / disrupt-01, time, d / date-entity)
(e / elect-01, mod, m / mid)
(i2 / interview-01, ARG1, n2 / newspaper)
(i2 / interview-01, ARG2, i3 / insurgent)
(i3 / insurgent, mod, u / underground)
(l / language, name, n3 / name)
(n / name, op, "Kathmandu")
(n / name, op, "Post")
(n / name, op, "The")
(n2 / newspaper, location, i / insurgent)
(n2 / newspaper, mod, l / language)
(n2 / newspaper, name, o / organization)
(n3 / name, op, "English")
(o / organization, name, n / name)

Decoded in 297,931 microseconds
Sentence: 20020829 the British Embassy to Nepal warned British nationals of increasing anti-government offensives and advised them to avoid areas cordoned off by Nepali security personnel.

mkDayMonthYear(20020829,29,08,2002)
NER Entity: (thing :name (name :op "British"))
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (thing :name (name :op "British"))
NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (country :name (name :op "Nepal"))
mkDayMonthYear(20020829,29,08,2002)
Spans:
Span 0-1:  20020829 => (date-entity :day 29 :month 8 :year 2002)
Span 20-21:  areas => area
Span 19-20:  avoid => avoid-01
Span 21-22:  cordoned => cordon-01
Span 10-11:  increasing => increase-01
Span 8-9:  nationals => national
Span 5-6:  Nepal => (country :name (name :op "Nepal"))
Span 6-7:  warned => warn-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 0-1:  20020829 => (date-entity :day 29 :month 8 :year 2002)
Oracle Span 16-17:  advised => advise-01
Oracle Span 15-16:  and => and
Oracle Span 11-12:  anti => oppose-01
Oracle Span 20-21:  areas => area
Oracle Span 19-20:  avoid => avoid-01
Oracle Span 2-3:  British => (country :name (name :op "Britain"))
Oracle Span 21-22:  cordoned => cordon-01
Oracle Span 3-4:  Embassy => embassy
Oracle Span 13-14:  government => (government-organization :ARG0-of govern-01)
Oracle Span 10-11:  increasing => increase-01
Oracle Span 8-9:  nationals => national
Oracle Span 5-6:  Nepal => (country :name (name :op "Nepal"))
Oracle Span 22-23:  off => off
Oracle Span 14-15:  offensives => offensive
Oracle Span 26-27:  personnel => (have-org-role-91 :ARG2 personnel)
Oracle Span 25-26:  security => security
Oracle Span 6-7:  warned => warn-01

Missing span: British => (country :name (name :op "Britain"))
Missing span: and => and
Missing span: advised => advise-01
Missing span: off => off
Missing span: security => security
Missing span: personnel => (have-org-role-91 :ARG2 personnel)
Missing span: offensives => offensive
Missing span: anti => oppose-01
Missing span: Embassy => embassy
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	20020829	_	CD	CD	_	20	nsubj	_	_
2	the	_	DT	DT	_	4	det	_	_
3	British	_	NNP	NNP	_	4	nn	_	_
4	Embassy	_	NNP	NNP	_	7	nsubj	_	_
5	to	_	TO	TO	_	7	prep	_	_
6	Nepal	_	NNP	NNP	_	5	pobj	_	_
7	warned	_	VBD	VBD	_	1	rcmod	_	_
8	British	_	JJ	JJ	_	9	amod	_	_
9	nationals	_	NNS	NNS	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	increasing	_	VBG	VBG	_	13	amod	_	_
12	anti-government	_	JJ	JJ	_	13	amod	_	_
13	offensives	_	NNS	NNS	_	10	pobj	_	_
14	and	_	CC	CC	_	7	cc	_	_
15	advised	_	VBD	VBD	_	7	conj	_	_
16	them	_	PRP	PRP	_	15	dobj	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	avoid	_	VB	VB	_	15	xcomp	_	_
19	areas	_	NNS	NNS	_	18	dobj	_	_
20	cordoned	_	VBD	VBD	_	0	root	_	_
21	off	_	RP	RP	_	20	prt	_	_
22	by	_	IN	IN	_	20	prep	_	_
23	Nepali	_	NNP	NNP	_	25	nn	_	_
24	security	_	NN	NN	_	25	nn	_	_
25	personnel	_	NNS	NNS	_	22	pobj	_	_
26	.	_	.	.	_	20	punct	_	_

Oracle:
(a / and, op, a2 / advise-01)
(a / and, op, w / warn-01)
(a / and, time, d / date-entity)
(a2 / advise-01, ARG0, e / embassy)
(a2 / advise-01, ARG1, n3 / national)
(a2 / advise-01, ARG2, a3 / avoid-01)
(a3 / avoid-01, ARG0, n3 / national)
(a3 / avoid-01, ARG1, a4 / area)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / cordon-01, ARG1, a4 / area)
(c3 / cordon-01, manner, o3 / off)
(d / date-entity, day, 29)
(d / date-entity, month, 8)
(d / date-entity, year, 2002)
(e / embassy, location, c2 / country)
(e / embassy, mod, c / country)
(g2 / govern-01, ARG0, g / government-organization)
(h / have-org-role-91, ARG1, s / security)
(h / have-org-role-91, ARG2, p2 / personnel)
(i / increase-01, ARG1, o / offensive)
(n / name, op, "Britain")
(n2 / name, op, "Nepal")
(n3 / national, mod, c / country)
(o2 / oppose-01, ARG0, o / offensive)
(o2 / oppose-01, ARG1, g / government-organization)
(s / security, mod, c2 / country)
(w / warn-01, ARG0, e / embassy)
(w / warn-01, ARG1, o / offensive)
(w / warn-01, ARG2, n3 / national)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),cordoned,cordon-01,false), Span(20,21,List(1),areas,area,false), Span(19,20,List(2),avoid,avoid-01,false), Span(10,11,List(3),increasing,increase-01,false), Span(8,9,List(4),nationals,national,false), Span(6,7,List(5),warned,warn-01,false), Span(5,6,List(8, 7, 6),Nepal,(country :name (name :op "Nepal")),false), Span(0,1,List(12, 11, 10, 9),20020829,(date-entity :day 29 :month 8 :year 2002),false)),Map(2 -> avoid-01, 5 -> warn-01, 12 -> 2002, 8 -> "Nepal", 7 -> name, 1 -> area, 4 -> national, 11 -> 8, 6 -> country, 0 -> cordon-01, 9 -> date-entity, 3 -> increase-01, 10 -> 29),Map(w -> warn-01, n -> national, 2 -> 29, 8 -> 8, d -> date-entity, a -> area, i -> increase-01, a2 -> avoid-01, c -> cordon-01, 22 -> 2002, n2 -> name, c2 -> country))),[Ljava.lang.String;@67d86804,Annotation([Ljava.lang.String;@45bb2aa1,[Ljava.lang.String;@3e84111a,[Ljava.lang.String;@4b1a43d8),Annotation([Ljava.lang.String;@6fa69af7,[Ljava.lang.String;@73545b80,[Ledu.cmu.lti.nlp.amr.Dependency;@6d469831),Annotation([Ljava.lang.String;@74db12c2,[Ljava.lang.String;@2ff15f8c,[Ljava.lang.String;@7ea899a9),Annotation([Ljava.lang.String;@2776015d,[Ljava.lang.String;@b174a73,[Ledu.cmu.lti.nlp.amr.Entity;@2e3f79a2))
AMR:
(a2 / avoid-01, ARG0, c / cordon-01)
(a2 / avoid-01, ARG1, a / area)
(c2 / country, name, n2 / name)
(d / date-entity, day, 2 / 29)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2002)
(i / increase-01, ARG0, c2 / country)
(i / increase-01, time, d / date-entity)
(n2 / name, op, "Nepal")
(w / warn-01, ARG0, c2 / country)
(w / warn-01, ARG1, a2 / avoid-01)
(w / warn-01, ARG2, n / national)

Decoded in 298,203 microseconds
Sentence: The embassy stated that intelligence assessments suggest that anti-government guerrillas may be preparing an urban campaign to complement their rural activities.

Spans:
Span 22-23:  activities => activity
Span 17-18:  campaign => campaign-01
Span 1-2:  embassy => embassy
Span 11-12:  guerrillas => guerrilla
Span 4-5:  intelligence => intelligence
Span 12-13:  may => possible
Span 14-15:  preparing => prepare-02
Span 21-22:  rural => rural
Span 6-7:  suggest => suggest-01
Span 16-17:  urban => urban

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 22-23:  activities => activity
Oracle Span 8-9:  anti => oppose-01
Oracle Span 5-6:  assessments => assess-01
Oracle Span 17-18:  campaign => campaign-01
Oracle Span 19-20:  complement => complement-01
Oracle Span 1-2:  embassy => embassy
Oracle Span 10-11:  government => (government-organization :ARG0-of govern-01)
Oracle Span 11-12:  guerrillas => guerrilla
Oracle Span 4-5:  intelligence => intelligence
Oracle Span 12-13:  may => possible
Oracle Span 14-15:  preparing => prepare-01
Oracle Span 2-3:  stated => state-01
Oracle Span 6-7:  suggest => suggest-01

Extra span: rural => rural
Extra span: urban => urban
Incorrect span: preparing => prepare-02
Missing span: stated => state-01
Missing span: preparing => prepare-01
Missing span: complement => complement-01
Missing span: anti => oppose-01
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: assessments => assess-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	embassy	_	NN	NN	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	7	mark	_	_
5	intelligence	_	NN	NN	_	6	nn	_	_
6	assessments	_	NNS	NNS	_	7	nsubj	_	_
7	suggest	_	VBP	VBP	_	3	ccomp	_	_
8	that	_	IN	IN	_	13	mark	_	_
9	anti-government	_	JJ	JJ	_	10	amod	_	_
10	guerrillas	_	NNS	NNS	_	13	nsubj	_	_
11	may	_	MD	MD	_	13	aux	_	_
12	be	_	VB	VB	_	13	aux	_	_
13	preparing	_	VBG	VBG	_	7	ccomp	_	_
14	an	_	DT	DT	_	16	det	_	_
15	urban	_	JJ	JJ	_	16	amod	_	_
16	campaign	_	NN	NN	_	13	dobj	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	complement	_	VB	VB	_	13	vmod	_	_
19	their	_	PRP$	PRP$	_	21	poss	_	_
20	rural	_	JJ	JJ	_	21	amod	_	_
21	activities	_	NNS	NNS	_	18	dobj	_	_
22	.	_	.	.	_	3	punct	_	_

Oracle:
(a / assess-01, ARG1, i / intelligence)
(a2 / activity, poss, g / guerrilla)
(c3 / complement-01, ARG1, c / campaign-01)
(c3 / complement-01, ARG2, a2 / activity)
(g3 / govern-01, ARG0, g2 / government-organization)
(o / oppose-01, ARG0, g / guerrilla)
(o / oppose-01, ARG1, g2 / government-organization)
(p / possible, domain, p2 / prepare-01)
(p2 / prepare-01, ARG0, g / guerrilla)
(p2 / prepare-01, ARG1, c / campaign-01)
(s / state-01, ARG0, e / embassy)
(s / state-01, ARG1, s2 / suggest-01)
(s2 / suggest-01, ARG0, a / assess-01)
(s2 / suggest-01, ARG1, p / possible)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),activities,activity,false), Span(21,22,List(1),rural,rural,false), Span(17,18,List(2),campaign,campaign-01,false), Span(16,17,List(3),urban,urban,false), Span(14,15,List(4),preparing,prepare-02,false), Span(12,13,List(5),may,possible,false), Span(11,12,List(6),guerrillas,guerrilla,false), Span(6,7,List(7),suggest,suggest-01,false), Span(4,5,List(8),intelligence,intelligence,false), Span(1,2,List(9),embassy,embassy,false)),Map(2 -> campaign-01, 5 -> possible, 8 -> intelligence, 7 -> suggest-01, 1 -> rural, 4 -> prepare-02, 6 -> guerrilla, 9 -> embassy, 0 -> activity, 3 -> urban),Map(e -> embassy, p2 -> possible, s -> suggest-01, g -> guerrilla, p -> prepare-02, a -> activity, i -> intelligence, r -> rural, u -> urban, c -> campaign-01))),[Ljava.lang.String;@1460c81d,Annotation([Ljava.lang.String;@38b5f25,[Ljava.lang.String;@327ed9f5,[Ljava.lang.String;@67594471),Annotation([Ljava.lang.String;@756b58a7,[Ljava.lang.String;@2cc04358,[Ledu.cmu.lti.nlp.amr.Dependency;@68b58644),Annotation([Ljava.lang.String;@45e22def,[Ljava.lang.String;@6ae3fb94,[Ljava.lang.String;@4417af13),Annotation([Ljava.lang.String;@d48673,[Ljava.lang.String;@548d5ed3,[Ledu.cmu.lti.nlp.amr.Entity;@21c7208d))
AMR:
(a / activity, mod, r / rural)
(a / activity, poss, c / campaign-01)
(c / campaign-01, ARG1, i / intelligence)
(c / campaign-01, mod, u / urban)
(p / prepare-02, ARG0, g / guerrilla)
(p / prepare-02, ARG1, c / campaign-01)
(p2 / possible, domain, p / prepare-02)
(s / suggest-01, ARG0, e / embassy)
(s / suggest-01, ARG1, p2 / possible)

Decoded in 197,497 microseconds
Sentence: The US State Department stated that after recent bombings US citizens and interests are at heightened risk from anti-government insurgents in Nepal, particularly outside the Kathmandu Valley.

NER Entity: (organization :name (name :op "US" :op "State" :op "Department"))
NER Entity: (organization :name (name :op "US" :op "citizens"))
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Kathmandu" :op "Valley"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 6-7:  after => after
Span 8-9:  bombings => bomb-01
Span 15-16:  heightened => heighten-01
Span 21-22:  insurgents => insurgent
Span 23-24:  Nepal => (country :name (name :op "Nepal"))
Span 26-28:  outside the => (country :name (name :op "Kathmandu" :op "Valley"))
Span 25-26:  particularly => particular
Span 7-8:  recent => recent
Span 16-17:  risk => risk-01
Span 9-11:  US citizens => (organization :name (name :op "US" :op "citizens"))
Span 1-4:  US State Department => (organization :name (name :op "US" :op "State" :op "Department"))

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 6-7:  after => after
Oracle Span 11-12:  and => and
Oracle Span 18-19:  anti => oppose-01
Oracle Span 8-9:  bombings => bomb-01
Oracle Span 10-11:  citizens => citizen
Oracle Span 20-21:  government => (government-organization :ARG0-of govern-01)
Oracle Span 15-16:  heightened => heighten-01
Oracle Span 21-22:  insurgents => insurgent
Oracle Span 12-13:  interests => interest
Oracle Span 28-30:  Kathmandu Valley => (valley :name (name :op "Valley" :op "Kathmandu"))
Oracle Span 23-24:  Nepal => (country :name (name :op "Nepal"))
Oracle Span 26-27:  outside => outside
Oracle Span 25-26:  particularly => particular
Oracle Span 7-8:  recent => recent
Oracle Span 16-17:  risk => risk-01
Oracle Span 4-5:  stated => state-01
Oracle Span 9-10:  US => (country :name (name :op "US"))
Oracle Span 1-4:  US State Department => (government-organization :name (name :op "Department" :op "State" :op "US"))

Extra span: outside the => (country :name (name :op "Kathmandu" :op "Valley"))
Extra span: US citizens => (organization :name (name :op "US" :op "citizens"))
Incorrect span: US State Department => (organization :name (name :op "US" :op "State" :op "Department"))
Missing span: US State Department => (government-organization :name (name :op "Department" :op "State" :op "US"))
Missing span: US => (country :name (name :op "US"))
Missing span: Kathmandu Valley => (valley :name (name :op "Valley" :op "Kathmandu"))
Missing span: stated => state-01
Missing span: outside => outside
Missing span: anti => oppose-01
Missing span: and => and
Missing span: interests => interest
Missing span: citizens => citizen
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	US	_	NNP	NNP	_	4	nn	_	_
3	State	_	NNP	NNP	_	4	nn	_	_
4	Department	_	NNP	NNP	_	5	nsubj	_	_
5	stated	_	VBD	VBD	_	0	root	_	_
6	that	_	IN	IN	_	14	mark	_	_
7	after	_	IN	IN	_	14	prep	_	_
8	recent	_	JJ	JJ	_	9	amod	_	_
9	bombings	_	NNS	NNS	_	7	pobj	_	_
10	US	_	NNP	NNP	_	11	dep	_	_
11	citizens	_	NNS	NNS	_	14	nsubj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	interests	_	NNS	NNS	_	11	conj	_	_
14	are	_	VBP	VBP	_	5	ccomp	_	_
15	at	_	IN	IN	_	14	prep	_	_
16	heightened	_	JJ	JJ	_	17	amod	_	_
17	risk	_	NN	NN	_	15	pobj	_	_
18	from	_	IN	IN	_	14	prep	_	_
19	anti-government	_	JJ	JJ	_	20	amod	_	_
20	insurgents	_	NNS	NNS	_	18	pobj	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	Nepal	_	NNP	NNP	_	21	pobj	_	_
23	,	_	,	,	_	14	punct	_	_
24	particularly	_	RB	RB	_	25	advmod	_	_
25	outside	_	IN	IN	_	14	prep	_	_
26	the	_	DT	DT	_	28	det	_	_
27	Kathmandu	_	NNP	NNP	_	28	nn	_	_
28	Valley	_	NNP	NNP	_	25	pobj	_	_
29	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c / citizen)
(a / and, op, i / interest)
(a2 / after, op, b / bomb-01)
(b / bomb-01, time, r2 / recent)
(c / citizen, mod, c2 / country)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(g / government-organization, name, n / name)
(g3 / govern-01, ARG0, g2 / government-organization)
(h / heighten-01, ARG1, r / risk-01)
(h / heighten-01, location, o / outside)
(h / heighten-01, time, a2 / after)
(i / interest, mod, c2 / country)
(i2 / insurgent, location, c3 / country)
(n / name, op, "Department")
(n / name, op, "State")
(n / name, op, "US")
(n2 / name, op, "US")
(n3 / name, op, "Nepal")
(n4 / name, op, "Kathmandu")
(n4 / name, op, "Valley")
(o / outside, mod, p / particular)
(o / outside, op, v / valley)
(o2 / oppose-01, ARG0, i2 / insurgent)
(o2 / oppose-01, ARG1, g2 / government-organization)
(r / risk-01, ARG0, a / and)
(s / state-01, ARG0, g / government-organization)
(s / state-01, ARG1, h / heighten-01)
(v / valley, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(26,28,List(3, 2, 1, 0),outside the,(country :name (name :op "Kathmandu" :op "Valley")),false), Span(25,26,List(4),particularly,particular,false), Span(23,24,List(7, 6, 5),Nepal,(country :name (name :op "Nepal")),false), Span(21,22,List(8),insurgents,insurgent,false), Span(16,17,List(9),risk,risk-01,false), Span(15,16,List(10),heightened,heighten-01,false), Span(9,11,List(14, 13, 12, 11),US citizens,(organization :name (name :op "US" :op "citizens")),false), Span(8,9,List(15),bombings,bomb-01,false), Span(7,8,List(16),recent,recent,false), Span(6,7,List(17),after,after,false), Span(1,4,List(22, 21, 20, 19, 18),US State Department,(organization :name (name :op "US" :op "State" :op "Department")),false)),Map(2 -> "Kathmandu", 5 -> country, 12 -> name, 15 -> bomb-01, 8 -> insurgent, 21 -> "State", 18 -> organization, 7 -> "Nepal", 17 -> after, 1 -> name, 4 -> particular, 11 -> organization, 14 -> "citizens", 20 -> "US", 6 -> name, 22 -> "Department", 0 -> country, 9 -> risk-01, 16 -> recent, 19 -> name, 3 -> "Valley", 10 -> heighten-01, 13 -> "US"),Map(n -> name, h -> heighten-01, b -> bomb-01, n4 -> name, p -> particular, r2 -> recent, n3 -> name, a -> after, o2 -> organization, i -> insurgent, r -> risk-01, c -> country, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@58516c91,Annotation([Ljava.lang.String;@7c129ef6,[Ljava.lang.String;@42d73c61,[Ljava.lang.String;@5a8cbffe),Annotation([Ljava.lang.String;@96a75da,[Ljava.lang.String;@61e7bf2f,[Ledu.cmu.lti.nlp.amr.Dependency;@1a28b346),Annotation([Ljava.lang.String;@25e49cb2,[Ljava.lang.String;@7f7af971,[Ljava.lang.String;@23382f76),Annotation([Ljava.lang.String;@7c551ad4,[Ljava.lang.String;@7d5508e0,[Ledu.cmu.lti.nlp.amr.Entity;@554cd74a))
AMR:
(a / after, op, b / bomb-01)
(b / bomb-01, ARG0, o / organization)
(b / bomb-01, location, i / insurgent)
(b / bomb-01, time, r2 / recent)
(c / country, mod, p / particular)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(h / heighten-01, ARG0, o2 / organization)
(h / heighten-01, ARG1, r / risk-01)
(h / heighten-01, time, c / country)
(i / insurgent, location, c2 / country)
(n / name, op, "Kathmandu")
(n / name, op, "Valley")
(n2 / name, op, "Nepal")
(n3 / name, op, "US")
(n3 / name, op, "citizens")
(n4 / name, op, "Department")
(n4 / name, op, "State")
(n4 / name, op, "US")
(o / organization, name, n3 / name)
(o2 / organization, name, n4 / name)
(r / risk-01, ARG0, i / insurgent)

Decoded in 756,525 microseconds
Sentence: 20020903 the US State Department publicly stated that anti-government insurgents plan new violence before the general strike declared for 20020916.

mkDayMonthYear(20020903,03,09,2002)
NER Entity: (organization :name (name :op "US" :op "State" :op "Department"))
mkDayMonthYear(20020916,16,09,2002)
mkDayMonthYear(20020916,16,09,2002)
mkDayMonthYear(20020903,03,09,2002)
Spans:
Span 0-1:  20020903 => (date-entity :day 3 :month 9 :year 2002)
Span 21-22:  20020916 => (date-entity :day 16 :month 9 :year 2002)
Span 15-16:  before => before
Span 19-20:  declared => declare-01
Span 17-18:  general => general
Span 11-12:  insurgents => insurgent
Span 13-14:  new => new
Span 5-6:  publicly => public
Span 2-5:  US State Department => (organization :name (name :op "US" :op "State" :op "Department"))
Span 14-15:  violence => violence

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 0-1:  20020903 => (date-entity :day 3 :month 9 :year 2002)
Oracle Span 21-22:  20020916 => (date-entity :day 16 :month 9 :year 2002)
Oracle Span 8-9:  anti => oppose-01
Oracle Span 15-16:  before => before
Oracle Span 19-20:  declared => declare-02
Oracle Span 17-18:  general => general
Oracle Span 10-11:  government => (government-organization :ARG0-of govern-01)
Oracle Span 11-12:  insurgents => insurgent
Oracle Span 13-14:  new => new
Oracle Span 12-13:  plan => plan-01
Oracle Span 5-6:  publicly => public
Oracle Span 6-7:  stated => state-01
Oracle Span 18-19:  strike => strike-02
Oracle Span 2-5:  US State Department => (government-organization :name (name :op "Department" :op "State" :op "US"))
Oracle Span 14-15:  violence => violence

Incorrect span: declared => declare-01
Incorrect span: US State Department => (organization :name (name :op "US" :op "State" :op "Department"))
Missing span: US State Department => (government-organization :name (name :op "Department" :op "State" :op "US"))
Missing span: stated => state-01
Missing span: plan => plan-01
Missing span: strike => strike-02
Missing span: declared => declare-02
Missing span: anti => oppose-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	20020903	_	CD	CD	_	18	nsubj	_	_
2	the	_	DT	DT	_	5	det	_	_
3	US	_	NNP	NNP	_	5	nn	_	_
4	State	_	NNP	NNP	_	5	nn	_	_
5	Department	_	NNP	NNP	_	7	nsubj	_	_
6	publicly	_	RB	RB	_	7	advmod	_	_
7	stated	_	VBD	VBD	_	1	rcmod	_	_
8	that	_	IN	IN	_	11	mark	_	_
9	anti-government	_	JJ	JJ	_	10	amod	_	_
10	insurgents	_	NNS	NNS	_	11	nsubj	_	_
11	plan	_	VBP	VBP	_	7	ccomp	_	_
12	new	_	JJ	JJ	_	13	amod	_	_
13	violence	_	NN	NN	_	11	dobj	_	_
14	before	_	IN	IN	_	11	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	general	_	JJ	JJ	_	17	amod	_	_
17	strike	_	NN	NN	_	14	pobj	_	_
18	declared	_	VBD	VBD	_	0	root	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	20020916	_	CD	CD	_	19	pobj	_	_
21	.	_	.	.	_	18	punct	_	_

Oracle:
(b / before, op, s2 / strike-02)
(d / date-entity, day, 3)
(d / date-entity, month, 9)
(d / date-entity, year, 2002)
(d2 / declare-02, ARG1, s2 / strike-02)
(d2 / declare-02, prep-for, d3 / date-entity)
(d3 / date-entity, day, 16)
(d3 / date-entity, month, 9)
(d3 / date-entity, year, 2002)
(g / government-organization, name, n / name)
(g3 / govern-01, ARG0, g2 / government-organization)
(n / name, op, "Department")
(n / name, op, "State")
(n / name, op, "US")
(o / oppose-01, ARG0, i / insurgent)
(o / oppose-01, ARG1, g2 / government-organization)
(p2 / plan-01, ARG0, i / insurgent)
(p2 / plan-01, ARG1, v / violence)
(p2 / plan-01, time, b / before)
(s / state-01, ARG0, g / government-organization)
(s / state-01, ARG1, p2 / plan-01)
(s / state-01, manner, p / public)
(s / state-01, time, d / date-entity)
(s2 / strike-02, mod, g4 / general)
(v / violence, mod, n2 / new)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(3, 2, 1, 0),20020916,(date-entity :day 16 :month 9 :year 2002),false), Span(19,20,List(4),declared,declare-01,false), Span(17,18,List(5),general,general,false), Span(15,16,List(6),before,before,false), Span(14,15,List(7),violence,violence,false), Span(13,14,List(8),new,new,false), Span(11,12,List(9),insurgents,insurgent,false), Span(5,6,List(10),publicly,public,false), Span(2,5,List(15, 14, 13, 12, 11),US State Department,(organization :name (name :op "US" :op "State" :op "Department")),false), Span(0,1,List(19, 18, 17, 16),20020903,(date-entity :day 3 :month 9 :year 2002),false)),Map(2 -> 9, 5 -> general, 12 -> name, 15 -> "Department", 8 -> new, 18 -> 9, 7 -> violence, 17 -> 3, 1 -> 16, 4 -> declare-01, 11 -> organization, 14 -> "State", 6 -> before, 0 -> date-entity, 9 -> insurgent, 16 -> date-entity, 19 -> 2002, 3 -> 2002, 10 -> public, 13 -> "US"),Map(n -> new, 2 -> 2002, b -> before, d3 -> date-entity, 92 -> 9, v -> violence, d -> date-entity, 1 -> 16, g -> general, p -> public, d2 -> declare-01, i -> insurgent, 22 -> 2002, 9 -> 9, o -> organization, 3 -> 3, n2 -> name))),[Ljava.lang.String;@37ed010a,Annotation([Ljava.lang.String;@633a2e99,[Ljava.lang.String;@367d2816,[Ljava.lang.String;@5b84f14),Annotation([Ljava.lang.String;@5a82ebf8,[Ljava.lang.String;@68fe48d7,[Ledu.cmu.lti.nlp.amr.Dependency;@379ce046),Annotation([Ljava.lang.String;@701bc94e,[Ljava.lang.String;@3d8b319e,[Ljava.lang.String;@27a97e08),Annotation([Ljava.lang.String;@77e7246b,[Ljava.lang.String;@5918c260,[Ledu.cmu.lti.nlp.amr.Entity;@3d7b1f1c))
AMR:
(b / before, op, d / date-entity)
(b / before, op, d3 / date-entity)
(d / date-entity, day, 1 / 16)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2002)
(d2 / declare-01, ARG0, i / insurgent)
(d2 / declare-01, ARG1, v / violence)
(d3 / date-entity, day, 3 / 3)
(d3 / date-entity, month, 92 / 9)
(d3 / date-entity, year, 22 / 2002)
(n2 / name, op, "Department")
(n2 / name, op, "State")
(n2 / name, op, "US")
(o / organization, name, n2 / name)
(p / public, mod, g / general)
(p / public, season, o / organization)
(v / violence, mod, n / new)
(v / violence, poss, o / organization)
(v / violence, time, b / before)

Decoded in 278,374 microseconds
Sentence: The Nepali government is considering re-imposition of the state of emergency to maintain law and order.

NER Entity: (thing :name (name :op "Nepali"))
Spans:
Span 4-5:  considering => consider-02
Span 12-13:  emergency => emergency
Span 15-16:  law => law
Span 14-15:  maintain => maintain-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 4-5:  considering => consider-02
Oracle Span 12-13:  emergency => emergency
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 15-16:  law => law
Oracle Span 14-15:  maintain => maintain-01
Oracle Span 1-2:  Nepali => (country :name (name :op "Nepal"))
Oracle Span 17-18:  order => order
Oracle Span 10-11:  state => state

Missing span: Nepali => (country :name (name :op "Nepal"))
Missing span: state => state
Missing span: and => and
Missing span: order => order
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Nepali	_	NNP	NNP	_	3	nn	_	_
3	government	_	NN	NN	_	5	nsubj	_	_
4	is	_	VBZ	VBZ	_	5	aux	_	_
5	considering	_	VBG	VBG	_	0	root	_	_
6	re-imposition	_	NN	NN	_	5	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	state	_	NN	NN	_	7	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	emergency	_	NN	NN	_	10	pobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	maintain	_	VB	VB	_	5	vmod	_	_
14	law	_	NN	NN	_	13	dobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	order	_	NN	NN	_	14	conj	_	_
17	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, l / law)
(a / and, op, o / order)
(c / consider-02, ARG0, g / government-organization)
(c2 / country, name, n / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(m / maintain-01, ARG1, a / and)
(n / name, op, "Nepal")
(s / state, mod, e / emergency)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),law,law,false), Span(14,15,List(1),maintain,maintain-01,false), Span(12,13,List(2),emergency,emergency,false), Span(4,5,List(3),considering,consider-02,false)),Map(2 -> emergency, 1 -> maintain-01, 0 -> law, 3 -> consider-02),Map(e -> emergency, m -> maintain-01, c -> consider-02, l -> law))),[Ljava.lang.String;@51ce6f85,Annotation([Ljava.lang.String;@1f44ddab,[Ljava.lang.String;@5017e1,[Ljava.lang.String;@65b66b08),Annotation([Ljava.lang.String;@4726927c,[Ljava.lang.String;@7eb6b6b6,[Ledu.cmu.lti.nlp.amr.Dependency;@7ed9499e),Annotation([Ljava.lang.String;@28e19366,[Ljava.lang.String;@5b275174,[Ljava.lang.String;@10ef5fa0),Annotation([Ljava.lang.String;@244e619a,[Ljava.lang.String;@10acd6,[Ledu.cmu.lti.nlp.amr.Entity;@61dde151))
AMR:
(c / consider-02, ARG1, m / maintain-01)
(m / maintain-01, ARG0, e / emergency)
(m / maintain-01, ARG1, l / law)

Decoded in 43,769 microseconds
Sentence: Prime Minister Sher Bahadur Deuba stated that Deuba would consult with concerned persons and political parties on the possible extension of the state of emergency.

NER Entity: (person :name (name :op "Sher" :op "Bahadur" :op "Deuba"))
NER Entity: (person :name (name :op "Deuba"))
Spans:
Span 11-12:  concerned => concern-01
Span 9-10:  consult => consult-01
Span 24-25:  emergency => emergency
Span 1-2:  Minister => (have-org-role-91 :ARG2 minister)
Span 15-16:  parties => party
Span 12-13:  persons => person
Span 18-19:  possible => possible
Span 0-1:  Prime => prime
Span 2-5:  Sher Bahadur Deuba => (person :name (name :op "Sher" :op "Bahadur" :op "Deuba"))

Langrangian relaxation converged after 83 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 11-12:  concerned => concern-02
Oracle Span 9-10:  consult => consult-01
Oracle Span 24-25:  emergency => emergency
Oracle Span 19-20:  extension => extend-01
Oracle Span 1-2:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 15-16:  parties => party
Oracle Span 12-13:  persons => person
Oracle Span 14-15:  political => politics
Oracle Span 18-19:  possible => possible
Oracle Span 0-1:  Prime => prime
Oracle Span 2-5:  Sher Bahadur Deuba => (person :name (name :op "Deuba" :op "Bahadur" :op "Sher"))
Oracle Span 22-23:  state => state
Oracle Span 5-6:  stated => state-01

Incorrect span: concerned => concern-01
Incorrect span: Sher Bahadur Deuba => (person :name (name :op "Sher" :op "Bahadur" :op "Deuba"))
Missing span: Sher Bahadur Deuba => (person :name (name :op "Deuba" :op "Bahadur" :op "Sher"))
Missing span: stated => state-01
Missing span: state => state
Missing span: and => and
Missing span: concerned => concern-02
Missing span: extension => extend-01
Missing span: political => politics
Dependencies:
1	Prime	_	NNP	NNP	_	5	nn	_	_
2	Minister	_	NNP	NNP	_	5	nn	_	_
3	Sher	_	NNP	NNP	_	5	nn	_	_
4	Bahadur	_	NNP	NNP	_	5	nn	_	_
5	Deuba	_	NNP	NNP	_	6	nsubj	_	_
6	stated	_	VBD	VBD	_	0	root	_	_
7	that	_	IN	IN	_	10	mark	_	_
8	Deuba	_	NNP	NNP	_	10	nsubj	_	_
9	would	_	MD	MD	_	10	aux	_	_
10	consult	_	VB	VB	_	6	ccomp	_	_
11	with	_	IN	IN	_	10	prep	_	_
12	concerned	_	JJ	JJ	_	13	amod	_	_
13	persons	_	NNS	NNS	_	11	pobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	political	_	JJ	JJ	_	16	amod	_	_
16	parties	_	NNS	NNS	_	13	conj	_	_
17	on	_	IN	IN	_	10	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	possible	_	JJ	JJ	_	20	amod	_	_
20	extension	_	NN	NN	_	17	pobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	state	_	NN	NN	_	21	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	emergency	_	NN	NN	_	24	pobj	_	_
26	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, p2 / person)
(a / and, op, p3 / party)
(c / consult-01, ARG0, p6 / person)
(c / consult-01, ARG1, a / and)
(c / consult-01, ARG2, p5 / possible)
(c2 / concern-02, ARG0, p2 / person)
(e / extend-01, ARG1, s2 / state)
(h / have-org-role-91, ARG0, p6 / person)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p / prime)
(n / name, op, "Bahadur")
(n / name, op, "Deuba")
(n / name, op, "Sher")
(p3 / party, mod, p4 / politics)
(p5 / possible, domain, e / extend-01)
(p6 / person, name, n / name)
(s / state-01, ARG0, p6 / person)
(s / state-01, ARG1, c / consult-01)
(s2 / state, mod, e2 / emergency)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),emergency,emergency,false), Span(18,19,List(1),possible,possible,false), Span(15,16,List(2),parties,party,false), Span(12,13,List(3),persons,person,false), Span(11,12,List(4),concerned,concern-01,false), Span(9,10,List(5),consult,consult-01,false), Span(2,5,List(10, 9, 8, 7, 6),Sher Bahadur Deuba,(person :name (name :op "Sher" :op "Bahadur" :op "Deuba")),false), Span(1,2,List(12, 11),Minister,(have-org-role-91 :ARG2 minister),false), Span(0,1,List(13),Prime,prime,false)),Map(2 -> party, 5 -> consult-01, 12 -> minister, 8 -> "Sher", 7 -> name, 1 -> possible, 4 -> concern-01, 11 -> have-org-role-91, 6 -> person, 0 -> emergency, 9 -> "Bahadur", 3 -> person, 10 -> "Deuba", 13 -> prime),Map(n -> name, e -> emergency, h -> have-org-role-91, p5 -> prime, p2 -> party, m -> minister, p -> possible, p4 -> person, c -> concern-01, c2 -> consult-01, p3 -> person))),[Ljava.lang.String;@b25b095,Annotation([Ljava.lang.String;@5cb042da,[Ljava.lang.String;@59c33386,[Ljava.lang.String;@571a9686),Annotation([Ljava.lang.String;@719d35e8,[Ljava.lang.String;@2f651f93,[Ledu.cmu.lti.nlp.amr.Dependency;@6ffa56fa),Annotation([Ljava.lang.String;@6c575325,[Ljava.lang.String;@747d1932,[Ljava.lang.String;@736309a9),Annotation([Ljava.lang.String;@4e93dcb9,[Ljava.lang.String;@188b6035,[Ledu.cmu.lti.nlp.amr.Entity;@4a34e9f))
AMR:
(c / concern-01, ARG0, p / possible)
(c / concern-01, ARG1, p3 / person)
(c2 / consult-01, ARG1, p3 / person)
(c2 / consult-01, ARG2, p4 / person)
(c2 / consult-01, time, e / emergency)
(e / emergency, location, p2 / party)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p5 / prime)
(n / name, op, "Bahadur")
(n / name, op, "Deuba")
(n / name, op, "Sher")
(p4 / person, name, n / name)

Decoded in 979,982 microseconds
Sentence: Due to the tension Deuba aborted a planned trip to Johannesburg for the World Summit on Sustainable Development and returned immediately to Nepal after a nine-day visit to Europe.

NER Entity: (person :name (name :op "Deuba"))
NER Entity: (country :name (name :op "Johannesburg"))
NER Entity: (organization :name (name :op "World" :op "Summit"))
NER Entity: (organization :name (name :op "Sustainable" :op "Development"))
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 23-24:  after => after
Span 27-28:  day => (temporal-quantity :unit day)
Span 20-21:  immediately => immediate
Span 22-23:  Nepal => (country :name (name :op "Nepal"))
Span 25-26:  nine => 9
Span 7-8:  planned => plan-01
Span 19-20:  returned => return-01
Span 16-18:  Sustainable Development => (organization :name (name :op "Sustainable" :op "Development"))
Span 3-4:  tension => tension
Span 8-9:  trip => trip-01
Span 28-29:  visit => visit-01
Span 13-15:  World Summit => (organization :name (name :op "World" :op "Summit"))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 5-6:  aborted => abort-01
Oracle Span 23-24:  after => after
Oracle Span 18-19:  and => and
Oracle Span 27-28:  day => (temporal-quantity :unit day)
Oracle Span 4-5:  Deuba => (person :name (name :op "Deuba"))
Oracle Span 30-31:  Europe => (continent :name (name :op "Europe"))
Oracle Span 20-21:  immediately => immediate
Oracle Span 10-11:  Johannesburg => (city :name (name :op "Johannesburg"))
Oracle Span 22-23:  Nepal => (country :name (name :op "Nepal"))
Oracle Span 25-26:  nine => 9
Oracle Span 7-8:  planned => plan-01
Oracle Span 19-20:  returned => return-01
Oracle Span 3-4:  tension => tension
Oracle Span 8-9:  trip => trip
Oracle Span 28-29:  visit => visit-01
Oracle Span 13-18:  World Summit on Sustainable Development => (event :name (name :op "Development" :op "Sustainable" :op "on" :op "Summit" :op "World"))

Extra span: Sustainable Development => (organization :name (name :op "Sustainable" :op "Development"))
Extra span: World Summit => (organization :name (name :op "World" :op "Summit"))
Incorrect span: trip => trip-01
Missing span: Deuba => (person :name (name :op "Deuba"))
Missing span: Johannesburg => (city :name (name :op "Johannesburg"))
Missing span: World Summit on Sustainable Development => (event :name (name :op "Development" :op "Sustainable" :op "on" :op "Summit" :op "World"))
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: and => and
Missing span: aborted => abort-01
Missing span: trip => trip
Dependencies:
1	Due	_	JJ	JJ	_	2	mwe	_	_
2	to	_	TO	TO	_	6	prep	_	_
3	the	_	DT	DT	_	4	det	_	_
4	tension	_	NN	NN	_	2	pobj	_	_
5	Deuba	_	NNP	NNP	_	6	nsubj	_	_
6	aborted	_	VBD	VBD	_	0	root	_	_
7	a	_	DT	DT	_	9	det	_	_
8	planned	_	JJ	JJ	_	9	amod	_	_
9	trip	_	NN	NN	_	6	dobj	_	_
10	to	_	TO	TO	_	6	prep	_	_
11	Johannesburg	_	NNP	NNP	_	10	pobj	_	_
12	for	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	World	_	NNP	NNP	_	15	nn	_	_
15	Summit	_	NNP	NNP	_	12	pobj	_	_
16	on	_	IN	IN	_	6	prep	_	_
17	Sustainable	_	NNP	NNP	_	18	nn	_	_
18	Development	_	NNP	NNP	_	16	pobj	_	_
19	and	_	CC	CC	_	6	cc	_	_
20	returned	_	VBD	VBD	_	6	conj	_	_
21	immediately	_	RB	RB	_	20	advmod	_	_
22	to	_	TO	TO	_	20	prep	_	_
23	Nepal	_	NNP	NNP	_	22	pobj	_	_
24	after	_	IN	IN	_	20	prep	_	_
25	a	_	DT	DT	_	27	det	_	_
26	nine-day	_	JJ	JJ	_	27	amod	_	_
27	visit	_	NN	NN	_	24	pobj	_	_
28	to	_	TO	TO	_	27	prep	_	_
29	Europe	_	NNP	NNP	_	28	pobj	_	_
30	.	_	.	.	_	6	punct	_	_

Oracle:
(a / abort-01, ARG0, p / person)
(a / abort-01, ARG1, t / trip)
(a2 / and, op, a / abort-01)
(a2 / and, op, r / return-01)
(a3 / after, op, v / visit-01)
(c / city, name, n2 / name)
(c3 / country, name, n4 / name)
(c4 / continent, name, n5 / name)
(e / event, name, n3 / name)
(i / immediate, time, a3 / after)
(n / name, op, "Deuba")
(n2 / name, op, "Johannesburg")
(n3 / name, op, "Development")
(n3 / name, op, "Summit")
(n3 / name, op, "Sustainable")
(n3 / name, op, "World")
(n3 / name, op, "on")
(n4 / name, op, "Nepal")
(n5 / name, op, "Europe")
(p / person, name, n / name)
(p2 / plan-01, ARG1, t / trip)
(r / return-01, ARG1, p / person)
(r / return-01, ARG4, c3 / country)
(r / return-01, mod, i / immediate)
(t / trip, destination, c / city)
(t / trip, purpose, e / event)
(t3 / temporal-quantity, quant, 9 / 9)
(t3 / temporal-quantity, unit, d / day)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, c4 / continent)
(v / visit-01, duration, t3 / temporal-quantity)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),visit,visit-01,false), Span(27,28,List(2, 1),day,(temporal-quantity :unit day),false), Span(25,26,List(3),nine,9,false), Span(23,24,List(4),after,after,false), Span(22,23,List(7, 6, 5),Nepal,(country :name (name :op "Nepal")),false), Span(20,21,List(8),immediately,immediate,false), Span(19,20,List(9),returned,return-01,false), Span(16,18,List(13, 12, 11, 10),Sustainable Development,(organization :name (name :op "Sustainable" :op "Development")),false), Span(13,15,List(17, 16, 15, 14),World Summit,(organization :name (name :op "World" :op "Summit")),false), Span(8,9,List(18),trip,trip-01,false), Span(7,8,List(19),planned,plan-01,false), Span(3,4,List(20),tension,tension,false)),Map(2 -> day, 5 -> country, 12 -> "Sustainable", 15 -> name, 8 -> immediate, 18 -> trip-01, 7 -> "Nepal", 17 -> "Summit", 1 -> temporal-quantity, 4 -> after, 11 -> name, 14 -> organization, 20 -> tension, 6 -> name, 0 -> visit-01, 9 -> return-01, 16 -> "World", 19 -> plan-01, 3 -> 9, 10 -> organization, 13 -> "Development"),Map(n -> name, t -> temporal-quantity, v -> visit-01, d -> day, t3 -> tension, p -> plan-01, a -> after, n3 -> name, o2 -> organization, t2 -> trip-01, i -> immediate, r -> return-01, c -> country, 9 -> 9, o -> organization, n2 -> name))),[Ljava.lang.String;@6f6621e3,Annotation([Ljava.lang.String;@3fc05ea2,[Ljava.lang.String;@7c891ba7,[Ljava.lang.String;@6240651f),Annotation([Ljava.lang.String;@3cf7298d,[Ljava.lang.String;@1ff55ff,[Ledu.cmu.lti.nlp.amr.Dependency;@351f2244),Annotation([Ljava.lang.String;@5496c165,[Ljava.lang.String;@51a8313b,[Ljava.lang.String;@2a03d65c),Annotation([Ljava.lang.String;@6642dc5a,[Ljava.lang.String;@43da41e,[Ledu.cmu.lti.nlp.amr.Entity;@148c7c4b))
AMR:
(a / after, mod, i / immediate)
(c / country, name, n / name)
(n / name, op, "Nepal")
(n2 / name, op, "Development")
(n2 / name, op, "Sustainable")
(n3 / name, op, "Summit")
(n3 / name, op, "World")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(p / plan-01, ARG0, o2 / organization)
(p / plan-01, ARG1, t2 / trip-01)
(r / return-01, ARG0, t3 / tension)
(r / return-01, ARG1, t2 / trip-01)
(r / return-01, ARG4, c / country)
(r / return-01, time, a / after)
(r / return-01, time, v / visit-01)
(t / temporal-quantity, quant, 9 / 9)
(t / temporal-quantity, unit, d / day)
(t2 / trip-01, ARG1, o / organization)
(v / visit-01, duration, t / temporal-quantity)

Decoded in 333,391 microseconds
Sentence: 20011126 the Nepali government imposed a stated of emergency when anti-government guerrillas unilaterally defied 4 month long cease-fire negotiations with the Government and attacked army barracks and police posts.

mkDayMonthYear(20011126,26,11,2001)
NER Entity: (thing :name (name :op "Nepali"))
mkDayMonthYear(20011126,26,11,2001)
Spans:
Span 0-1:  20011126 => (date-entity :day 26 :month 11 :year 2001)
Span 28-29:  army => army
Span 27-28:  attacked => attack-01
Span 19-20:  cease => cease-01
Span 15-16:  defied => defy-01
Span 8-9:  emergency => emergency
Span 13-14:  guerrillas => guerrilla
Span 4-5:  imposed => impose-01
Span 22-23:  negotiations => negotiate-01
Span 32-33:  posts => post
Span 14-15:  unilaterally => unilateral

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 0-1:  20011126 => (date-entity :day 26 :month 11 :year 2001)
Oracle Span 16-17:  4 => 4
Oracle Span 26-27:  and => and
Oracle Span 30-31:  and => and
Oracle Span 10-11:  anti => oppose-01
Oracle Span 28-29:  army => army
Oracle Span 27-28:  attacked => attack-01
Oracle Span 29-30:  barracks => barrack
Oracle Span 19-20:  cease => cease-01
Oracle Span 15-16:  defied => defy-01
Oracle Span 8-9:  emergency => emergency
Oracle Span 21-22:  fire => fire-01
Oracle Span 3-4:  government => government-organization
Oracle Span 12-13:  government => govern-01
Oracle Span 25-26:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 13-14:  guerrillas => guerrilla
Oracle Span 4-5:  imposed => impose-01
Oracle Span 17-18:  month => (temporal-quantity :unit month)
Oracle Span 22-23:  negotiations => negotiate-01
Oracle Span 2-3:  Nepali => (country :name (name :op "Nepal"))
Oracle Span 31-32:  police => police
Oracle Span 32-33:  posts => post
Oracle Span 6-7:  stated => state
Oracle Span 14-15:  unilaterally => unilateral

Missing span: Nepali => (country :name (name :op "Nepal"))
Missing span: and => and
Missing span: and => and
Missing span: police => police
Missing span: barracks => barrack
Missing span: fire => fire-01
Missing span: 4 => 4
Missing span: month => (temporal-quantity :unit month)
Missing span: anti => oppose-01
Missing span: stated => state
Missing span: government => government-organization
Missing span: government => govern-01
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	20011126	_	CD	CD	_	5	nsubj	_	_
2	the	_	DT	DT	_	4	det	_	_
3	Nepali	_	NNP	NNP	_	4	nn	_	_
4	government	_	NN	NN	_	1	dep	_	_
5	imposed	_	VBD	VBD	_	0	root	_	_
6	a	_	DT	DT	_	7	det	_	_
7	stated	_	JJ	JJ	_	5	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	emergency	_	NN	NN	_	8	pobj	_	_
10	when	_	WRB	WRB	_	14	advmod	_	_
11	anti-government	_	JJ	JJ	_	12	amod	_	_
12	guerrillas	_	NNS	NNS	_	14	nsubj	_	_
13	unilaterally	_	RB	RB	_	14	advmod	_	_
14	defied	_	VBD	VBD	_	5	advcl	_	_
15	4	_	CD	CD	_	16	num	_	_
16	month	_	NN	NN	_	17	npadvmod	_	_
17	long	_	RB	RB	_	14	advmod	_	_
18	cease-fire	_	NN	NN	_	19	nn	_	_
19	negotiations	_	NNS	NNS	_	14	tmod	_	_
20	with	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	Government	_	NN	NN	_	20	pobj	_	_
23	and	_	CC	CC	_	14	cc	_	_
24	attacked	_	VBD	VBD	_	14	conj	_	_
25	army	_	NN	NN	_	26	nn	_	_
26	barracks	_	NNS	NNS	_	24	dobj	_	_
27	and	_	CC	CC	_	26	cc	_	_
28	police	_	NN	NN	_	29	nn	_	_
29	posts	_	NNS	NNS	_	26	conj	_	_
30	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, a2 / attack-01)
(a / and, op, d2 / defy-01)
(a2 / attack-01, ARG0, g3 / guerrilla)
(a2 / attack-01, ARG1, a3 / and)
(a3 / and, op, b / barrack)
(a3 / and, op, p / post)
(b / barrack, mod, a4 / army)
(c / country, name, n / name)
(c2 / cease-01, ARG1, f / fire-01)
(d / date-entity, day, 26)
(d / date-entity, month, 11)
(d / date-entity, year, 2001)
(d2 / defy-01, ARG0, g3 / guerrilla)
(d2 / defy-01, ARG1, n2 / negotiate-01)
(d2 / defy-01, mod, u / unilateral)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(g5 / govern-01, ARG0, g4 / government-organization)
(i / impose-01, ARG0, g / government-organization)
(i / impose-01, ARG1, s / state)
(i / impose-01, time, a / and)
(i / impose-01, time, d / date-entity)
(n / name, op, "Nepal")
(n2 / negotiate-01, ARG0, g3 / guerrilla)
(n2 / negotiate-01, ARG1, g / government-organization)
(n2 / negotiate-01, ARG2, c2 / cease-01)
(n2 / negotiate-01, duration, t / temporal-quantity)
(o / oppose-01, ARG0, g3 / guerrilla)
(o / oppose-01, ARG1, g4 / government-organization)
(p / post, mod, p2 / police)
(s / state, mod, e / emergency)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, m / month)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),posts,post,false), Span(28,29,List(1),army,army,false), Span(27,28,List(2),attacked,attack-01,false), Span(22,23,List(3),negotiations,negotiate-01,false), Span(19,20,List(4),cease,cease-01,false), Span(15,16,List(5),defied,defy-01,false), Span(14,15,List(6),unilaterally,unilateral,false), Span(13,14,List(7),guerrillas,guerrilla,false), Span(8,9,List(8),emergency,emergency,false), Span(4,5,List(9),imposed,impose-01,false), Span(0,1,List(13, 12, 11, 10),20011126,(date-entity :day 26 :month 11 :year 2001),false)),Map(2 -> attack-01, 5 -> defy-01, 12 -> 11, 8 -> emergency, 7 -> guerrilla, 1 -> army, 4 -> cease-01, 11 -> 26, 6 -> unilateral, 0 -> post, 9 -> impose-01, 3 -> negotiate-01, 10 -> date-entity, 13 -> 2001),Map(e -> emergency, n -> negotiate-01, 2 -> 26, d -> defy-01, 1 -> 11, p -> post, g -> guerrilla, a -> army, d2 -> date-entity, a2 -> attack-01, i -> impose-01, c -> cease-01, u -> unilateral, 22 -> 2001))),[Ljava.lang.String;@2009f9b0,Annotation([Ljava.lang.String;@50d951e7,[Ljava.lang.String;@39ad12b6,[Ljava.lang.String;@4eb45fec),Annotation([Ljava.lang.String;@211febf3,[Ljava.lang.String;@3bd3d05e,[Ledu.cmu.lti.nlp.amr.Dependency;@6aba5d30),Annotation([Ljava.lang.String;@61d34b4,[Ljava.lang.String;@588307f7,[Ljava.lang.String;@7df76d99),Annotation([Ljava.lang.String;@459cfcca,[Ljava.lang.String;@2acbc859,[Ledu.cmu.lti.nlp.amr.Entity;@6ab7ce48))
AMR:
(a2 / attack-01, ARG0, g / guerrilla)
(a2 / attack-01, ARG1, a / army)
(c / cease-01, ARG1, d / defy-01)
(d / defy-01, ARG0, g / guerrilla)
(d / defy-01, ARG1, n / negotiate-01)
(d / defy-01, manner, u / unilateral)
(d2 / date-entity, day, 2 / 26)
(d2 / date-entity, month, 1 / 11)
(d2 / date-entity, year, 22 / 2001)
(i / impose-01, ARG1, e / emergency)
(i / impose-01, purpose, d / defy-01)
(i / impose-01, time, d2 / date-entity)
(n / negotiate-01, ARG1, p / post)

Decoded in 543,057 microseconds
Sentence: 2002-10-19

mkDayMonthYear(2002-10-19,19,10,2002)
mkDayMonthYear(2002-10-19,19,10,2002)
Spans:
Span 0-1:  2002-10-19 => (date-entity :day 19 :month 10 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2002-10-19 => (date-entity :day 19 :month 10 :year 2002)

Dependencies:
1	2002-10-19	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 19)
(d / date-entity, month, 10)
(d / date-entity, year, 2002)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-10-19,(date-entity :day 19 :month 10 :year 2002),false)),Map(2 -> 10, 1 -> 19, 0 -> date-entity, 3 -> 2002),Map(2 -> 2002, 12 -> 10, d -> date-entity, 1 -> 19))),[Ljava.lang.String;@2c6aed22,Annotation([Ljava.lang.String;@e322ec9,[Ljava.lang.String;@7acfb656,[Ljava.lang.String;@2e5ee2c9),Annotation([Ljava.lang.String;@55a609dd,[Ljava.lang.String;@4afd21c6,[Ledu.cmu.lti.nlp.amr.Dependency;@4d0753c9),Annotation([Ljava.lang.String;@1416a80a,[Ljava.lang.String;@719bb3b4,[Ljava.lang.String;@52cb4f50),Annotation([Ljava.lang.String;@25a5c7db,[Ljava.lang.String;@4d27d9d,[Ledu.cmu.lti.nlp.amr.Entity;@28f878a0))
AMR:
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 12 / 10)
(d / date-entity, year, 2 / 2002)

Decoded in 8,816 microseconds
Sentence: Nepal (NP)

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (organization :name (name :op "NP"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 0-1:  Nepal => (country :name (name :op "Nepal"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Nepal => (country :name (name :op "Nepal"))

Dependencies:
1	Nepal	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	NP	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Nepal")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Nepal,(country :name (name :op "Nepal")),false)),Map(2 -> "Nepal", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@20411320,Annotation([Ljava.lang.String;@2b5183ec,[Ljava.lang.String;@3c782d8e,[Ljava.lang.String;@572e6fd9),Annotation([Ljava.lang.String;@7f5eae0f,[Ljava.lang.String;@58b71ceb,[Ledu.cmu.lti.nlp.amr.Dependency;@255e5e2e),Annotation([Ljava.lang.String;@12abdfb,[Ljava.lang.String;@b0e5507,[Ljava.lang.String;@6bbe50c9),Annotation([Ljava.lang.String;@3c46dcbe,[Ljava.lang.String;@68577ba8,[Ledu.cmu.lti.nlp.amr.Entity;@1108adc8))
AMR:
(c / country, name, n / name)
(n / name, op, "Nepal")

Decoded in 6,191 microseconds
Sentence: terrorism; dissent

Spans:
Span 1-2:  ; => and
Span 2-3:  dissent => dissent-01
Span 0-1:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 2-3:  dissent => dissent-01
Oracle Span 0-1:  terrorism => terrorism

Dependencies:
1	terrorism	_	NN	NN	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	dissent	_	NN	NN	_	1	dep	_	_

Oracle:
(a / and, op, d / dissent-01)
(a / and, op, t / terrorism)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),dissent,dissent-01,false), Span(1,2,List(1),;,and,false), Span(0,1,List(2),terrorism,terrorism,false)),Map(2 -> terrorism, 1 -> and, 0 -> dissent-01),Map(t -> terrorism, d -> dissent-01, a -> and))),[Ljava.lang.String;@8a98f38,Annotation([Ljava.lang.String;@20011bf,[Ljava.lang.String;@51d9b06c,[Ljava.lang.String;@5eb2172),Annotation([Ljava.lang.String;@41ffaeb8,[Ljava.lang.String;@43f0c2d1,[Ledu.cmu.lti.nlp.amr.Dependency;@5fb65013),Annotation([Ljava.lang.String;@38a1a26,[Ljava.lang.String;@3fbcfe81,[Ljava.lang.String;@7a1f45ed),Annotation([Ljava.lang.String;@1744a475,[Ljava.lang.String;@444cc791,[Ledu.cmu.lti.nlp.amr.Entity;@1c5c616f))
AMR:
(a / and, op, d / dissent-01)
(a / and, op, t / terrorism)

Decoded in 6,888 microseconds
Sentence: Several policemen killed and wounded by guerrillas in Nepal following a breakdown in peace talks between guerrillas and the Nepali government.

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 11-12:  breakdown => break-12
Span 16-17:  guerrillas => guerrilla
Span 6-7:  guerrillas => guerrilla
Span 2-3:  killed => kill-01
Span 8-9:  Nepal => (country :name (name :op "Nepal"))
Span 13-14:  peace => peace
Span 1-2:  policemen => policeman
Span 0-1:  Several => several
Span 14-15:  talks => talk-01
Span 4-5:  wounded => wound-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 3-4:  and => and
Oracle Span 11-12:  breakdown => break-12
Oracle Span 9-10:  following => follow-01
Oracle Span 20-21:  government => (government-organization :ARG0-of govern-01)
Oracle Span 6-7:  guerrillas => guerrilla
Oracle Span 2-3:  killed => kill-01
Oracle Span 8-9:  Nepal => (country :name (name :op "Nepal"))
Oracle Span 13-14:  peace => peace
Oracle Span 1-2:  policemen => policeman
Oracle Span 0-1:  Several => several
Oracle Span 14-15:  talks => talk-01
Oracle Span 4-5:  wounded => wound-01

Extra span: guerrillas => guerrilla
Missing span: and => and
Missing span: following => follow-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Several	_	JJ	JJ	_	2	amod	_	_
2	policemen	_	NN	NN	_	3	nsubj	_	_
3	killed	_	VBN	VBN	_	0	root	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	wounded	_	VBN	VBN	_	3	conj	_	_
6	by	_	IN	IN	_	3	prep	_	_
7	guerrillas	_	NNS	NNS	_	6	pobj	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	Nepal	_	NNP	NNP	_	8	pobj	_	_
10	following	_	VBG	VBG	_	9	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	breakdown	_	NN	NN	_	10	pobj	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	peace	_	NN	NN	_	15	nn	_	_
15	talks	_	NNS	NNS	_	13	pobj	_	_
16	between	_	IN	IN	_	15	prep	_	_
17	guerrillas	_	NNS	NNS	_	16	pobj	_	_
18	and	_	CC	CC	_	17	cc	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Nepali	_	NNP	NNP	_	21	nn	_	_
21	government	_	NN	NN	_	17	conj	_	_
22	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, location, c / country)
(a / and, op, k / kill-01)
(a / and, op, w / wound-01)
(b / break-12, ARG1, t / talk-01)
(c / country, name, n / name)
(f / follow-01, ARG1, a / and)
(f / follow-01, ARG2, b / break-12)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c / country)
(k / kill-01, ARG0, g / guerrilla)
(k / kill-01, ARG1, p / policeman)
(n / name, op, "Nepal")
(p / policeman, quant, s / several)
(t / talk-01, ARG0, g / guerrilla)
(t / talk-01, ARG1, p2 / peace)
(t / talk-01, ARG2, g2 / government-organization)
(w / wound-01, ARG0, g / guerrilla)
(w / wound-01, ARG1, p / policeman)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),guerrillas,guerrilla,false), Span(14,15,List(1),talks,talk-01,false), Span(13,14,List(2),peace,peace,false), Span(11,12,List(3),breakdown,break-12,false), Span(8,9,List(6, 5, 4),Nepal,(country :name (name :op "Nepal")),false), Span(6,7,List(7),guerrillas,guerrilla,false), Span(4,5,List(8),wounded,wound-01,false), Span(2,3,List(9),killed,kill-01,false), Span(1,2,List(10),policemen,policeman,false), Span(0,1,List(11),Several,several,false)),Map(2 -> peace, 5 -> name, 8 -> wound-01, 7 -> guerrilla, 1 -> talk-01, 11 -> several, 4 -> country, 6 -> "Nepal", 9 -> kill-01, 0 -> guerrilla, 10 -> policeman, 3 -> break-12),Map(w -> wound-01, n -> name, k -> kill-01, b -> break-12, t -> talk-01, p2 -> policeman, s -> several, g2 -> guerrilla, p -> peace, g -> guerrilla, c -> country))),[Ljava.lang.String;@1c6c6f24,Annotation([Ljava.lang.String;@2eb917d0,[Ljava.lang.String;@c6b2dd9,[Ljava.lang.String;@73437222),Annotation([Ljava.lang.String;@ca93621,[Ljava.lang.String;@6a48a7f3,[Ledu.cmu.lti.nlp.amr.Dependency;@3f985a86),Annotation([Ljava.lang.String;@57a2ed35,[Ljava.lang.String;@12ffd1de,[Ljava.lang.String;@3d278b4d),Annotation([Ljava.lang.String;@4096aa05,[Ljava.lang.String;@9d3c67,[Ledu.cmu.lti.nlp.amr.Entity;@6c806c8b))
AMR:
(b / break-12, ARG0, g2 / guerrilla)
(b / break-12, ARG1, t / talk-01)
(c / country, name, n / name)
(g2 / guerrilla, location, c / country)
(k / kill-01, ARG1, p2 / policeman)
(k / kill-01, location, g2 / guerrilla)
(n / name, op, "Nepal")
(t / talk-01, ARG1, s / several)
(t / talk-01, ARG2, g / guerrilla)
(t / talk-01, topic, p / peace)
(w / wound-01, ARG0, p2 / policeman)

Decoded in 126,100 microseconds
Sentence: State-run Radio Nepal reported on 20 October 2002 that at least 3 policemen were killed and 19 others wounded the evening of 19 October 2002 when their vehicle was ambushed by anti-government guerrillas in western Nepal.

NER Entity: (country :name (name :op "Nepal"))
mkDayMonthYear(20	October	2002,20,October,2002)
mkDayMonthYear(19	October	2002,19,October,2002)
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 24-27:  19 October 2002 => (date-entity :day 19 :month 10 :year 2002)
Span 7-10:  20 October 2002 => (date-entity :day 20 :month 10 :year 2002)
Span 22-23:  evening => evening
Span 36-37:  guerrillas => guerrilla
Span 16-17:  killed => kill-01
Span 39-40:  Nepal => (country :name (name :op "Nepal"))
Span 4-5:  Nepal => (country :name (name :op "Nepal"))
Span 19-20:  others => other
Span 14-15:  policemen => policeman
Span 5-6:  reported => report-01
Span 29-30:  vehicle => vehicle
Span 20-21:  wounded => wound-01

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Oracle Span 18-19:  19 => 19
Oracle Span 24-27:  19 October 2002 => (date-entity :day 19 :month 10 :year 2002)
Oracle Span 7-10:  20 October 2002 => (date-entity :day 20 :month 10 :year 2002)
Oracle Span 13-14:  3 => 3
Oracle Span 31-32:  ambushed => ambush-01
Oracle Span 17-18:  and => and
Oracle Span 33-34:  anti => oppose-01
Oracle Span 22-23:  evening => evening
Oracle Span 35-36:  government => (government-organization :ARG0-of govern-01)
Oracle Span 36-37:  guerrillas => guerrilla
Oracle Span 16-17:  killed => kill-01
Oracle Span 39-40:  Nepal => (country :name (name :op "Nepal"))
Oracle Span 19-20:  others => other
Oracle Span 14-15:  policemen => policeman
Oracle Span 3-5:  Radio Nepal => (publication :name (name :op "Nepal" :op "Radio"))
Oracle Span 5-6:  reported => report-01
Oracle Span 2-3:  run => run-01
Oracle Span 0-1:  State => state
Oracle Span 29-30:  vehicle => vehicle
Oracle Span 38-39:  western => west
Oracle Span 20-21:  wounded => wound-01

Extra span: Nepal => (country :name (name :op "Nepal"))
Missing span: Radio Nepal => (publication :name (name :op "Nepal" :op "Radio"))
Missing span: and => and
Missing span: ambushed => ambush-01
Missing span: anti => oppose-01
Missing span: 19 => 19
Missing span: 3 => 3
Missing span: run => run-01
Missing span: State => state
Missing span: western => west
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	State-run	_	NNP	NNP	_	3	nn	_	_
2	Radio	_	NNP	NNP	_	3	nn	_	_
3	Nepal	_	NNP	NNP	_	4	nsubj	_	_
4	reported	_	VBD	VBD	_	0	root	_	_
5	on	_	IN	IN	_	4	prep	_	_
6	20	_	CD	CD	_	5	pobj	_	_
7	October	_	NNP	NNP	_	4	tmod	_	_
8	2002	_	CD	CD	_	7	num	_	_
9	that	_	IN	IN	_	15	mark	_	_
10	at	_	IN	IN	_	12	quantmod	_	_
11	least	_	JJS	JJS	_	10	mwe	_	_
12	3	_	CD	CD	_	13	num	_	_
13	policemen	_	NNS	NNS	_	15	nsubjpass	_	_
14	were	_	VBD	VBD	_	15	auxpass	_	_
15	killed	_	VBN	VBN	_	4	ccomp	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	19	_	CD	CD	_	18	num	_	_
18	others	_	NNS	NNS	_	19	nsubj	_	_
19	wounded	_	VBN	VBN	_	15	conj	_	_
20	the	_	DT	DT	_	21	det	_	_
21	evening	_	NN	NN	_	19	dobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	19	_	CD	CD	_	22	pobj	_	_
24	October	_	NNP	NNP	_	19	tmod	_	_
25	2002	_	CD	CD	_	24	num	_	_
26	when	_	WRB	WRB	_	30	advmod	_	_
27	their	_	PRP$	PRP$	_	28	poss	_	_
28	vehicle	_	NN	NN	_	30	nsubjpass	_	_
29	was	_	VBD	VBD	_	30	auxpass	_	_
30	ambushed	_	VBN	VBN	_	19	advcl	_	_
31	by	_	IN	IN	_	30	prep	_	_
32	anti-government	_	JJ	JJ	_	33	amod	_	_
33	guerrillas	_	NNS	NNS	_	31	pobj	_	_
34	in	_	IN	IN	_	33	prep	_	_
35	western	_	JJ	JJ	_	36	amod	_	_
36	Nepal	_	NNP	NNP	_	34	pobj	_	_
37	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, k / kill-01)
(a / and, op, w / wound-01)
(a / and, time, a3 / ambush-01)
(a / and, time, d2 / date-entity)
(a3 / ambush-01, ARG0, g / guerrilla)
(a3 / ambush-01, ARG1, v / vehicle)
(a3 / ambush-01, location, w3 / west)
(c / country, name, n2 / name)
(c / country, part, w3 / west)
(d / date-entity, day, 20)
(d / date-entity, month, 10)
(d / date-entity, year, 2002)
(d2 / date-entity, day, 19)
(d2 / date-entity, dayperiod, e / evening)
(d2 / date-entity, month, 10)
(d2 / date-entity, year, 2002)
(g3 / govern-01, ARG0, g2 / government-organization)
(n / name, op, "Nepal")
(n / name, op, "Radio")
(n2 / name, op, "Nepal")
(o3 / oppose-01, ARG0, g / guerrilla)
(o3 / oppose-01, ARG1, g2 / government-organization)
(p2 / policeman, mod, o2 / other)
(p2 / policeman, quant, 1 / 19)
(p3 / publication, name, n / name)
(r / report-01, ARG0, p3 / publication)
(r / report-01, ARG1, a / and)
(r / report-01, time, d / date-entity)
(r2 / run-01, ARG0, s / state)
(r2 / run-01, ARG1, p3 / publication)
(w / wound-01, ARG1, p2 / policeman)

Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(2, 1, 0),Nepal,(country :name (name :op "Nepal")),false), Span(36,37,List(3),guerrillas,guerrilla,false), Span(29,30,List(4),vehicle,vehicle,false), Span(24,27,List(8, 7, 6, 5),19 October 2002,(date-entity :day 19 :month 10 :year 2002),false), Span(22,23,List(9),evening,evening,false), Span(20,21,List(10),wounded,wound-01,false), Span(19,20,List(11),others,other,false), Span(16,17,List(12),killed,kill-01,false), Span(14,15,List(13),policemen,policeman,false), Span(7,10,List(17, 16, 15, 14),20 October 2002,(date-entity :day 20 :month 10 :year 2002),false), Span(5,6,List(18),reported,report-01,false), Span(4,5,List(21, 20, 19),Nepal,(country :name (name :op "Nepal")),false)),Map(2 -> "Nepal", 5 -> date-entity, 12 -> kill-01, 15 -> 20, 8 -> 2002, 21 -> "Nepal", 18 -> report-01, 7 -> 10, 17 -> 2002, 1 -> name, 4 -> vehicle, 11 -> other, 14 -> date-entity, 20 -> name, 6 -> 19, 0 -> country, 9 -> evening, 16 -> 10, 19 -> country, 3 -> guerrilla, 10 -> wound-01, 13 -> policeman),Map(e -> evening, n -> name, w -> wound-01, 2 -> 2002, 12 -> 10, k -> kill-01, v -> vehicle, d -> date-entity, 1 -> 19, 23 -> 2002, g -> guerrilla, p -> policeman, d2 -> date-entity, r -> report-01, c -> country, 22 -> 20, o -> other, n2 -> name, c2 -> country, 13 -> 10))),[Ljava.lang.String;@6dfcffb5,Annotation([Ljava.lang.String;@184fb68d,[Ljava.lang.String;@71d8cfe7,[Ljava.lang.String;@1e530163),Annotation([Ljava.lang.String;@14d8444b,[Ljava.lang.String;@71466383,[Ledu.cmu.lti.nlp.amr.Dependency;@46d63dbb),Annotation([Ljava.lang.String;@4088741b,[Ljava.lang.String;@16a49a5d,[Ljava.lang.String;@54bca971),Annotation([Ljava.lang.String;@23706db8,[Ljava.lang.String;@205bed61,[Ledu.cmu.lti.nlp.amr.Entity;@129fed45))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / date-entity, day, 1 / 19)
(d / date-entity, dayperiod, e / evening)
(d / date-entity, month, 12 / 10)
(d / date-entity, year, 2 / 2002)
(d2 / date-entity, day, 22 / 20)
(d2 / date-entity, month, 13 / 10)
(d2 / date-entity, year, 23 / 2002)
(g / guerrilla, poss, c / country)
(k / kill-01, ARG0, c2 / country)
(k / kill-01, ARG1, e / evening)
(n / name, op, "Nepal")
(n2 / name, op, "Nepal")
(r / report-01, ARG0, c2 / country)
(r / report-01, ARG1, v / vehicle)
(r / report-01, time, d2 / date-entity)
(w / wound-01, ARG0, c2 / country)
(w / wound-01, ARG1, o / other)
(w / wound-01, ARG2, p / policeman)
(w / wound-01, time, g / guerrilla)

Decoded in 1,752,483 microseconds
Sentence: Radio Nepal quoted a security official as stating --

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 1-2:  Nepal => (country :name (name :op "Nepal"))
Span 2-3:  quoted => quote-01
Span 7-8:  stating => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  official => (have-org-role-91 :ARG2 official)
Oracle Span 2-3:  quoted => quote-01
Oracle Span 0-2:  Radio Nepal => (publication :name (name :op "Nepal" :op "Radio"))
Oracle Span 4-5:  security => security
Oracle Span 7-8:  stating => state-01

Extra span: Nepal => (country :name (name :op "Nepal"))
Missing span: Radio Nepal => (publication :name (name :op "Nepal" :op "Radio"))
Missing span: security => security
Missing span: official => (have-org-role-91 :ARG2 official)
Dependencies:
1	Radio	_	NNP	NNP	_	2	nn	_	_
2	Nepal	_	NNP	NNP	_	0	root	_	_
3	quoted	_	VBN	VBN	_	2	vmod	_	_
4	a	_	DT	DT	_	6	det	_	_
5	security	_	NN	NN	_	6	nn	_	_
6	official	_	NN	NN	_	3	dobj	_	_
7	as	_	IN	IN	_	3	prep	_	_
8	stating	_	VBG	VBG	_	7	pcomp	_	_
9	--	_	:	:	_	2	punct	_	_

Oracle:
(h / have-org-role-91, ARG1, s / security)
(h / have-org-role-91, ARG2, o2 / official)
(n / name, op, "Nepal")
(n / name, op, "Radio")
(p2 / publication, name, n / name)
(q / quote-01, ARG0, p2 / publication)
(q / quote-01, ARG2, s2 / state-01)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),stating,state-01,false), Span(2,3,List(1),quoted,quote-01,false), Span(1,2,List(4, 3, 2),Nepal,(country :name (name :op "Nepal")),false)),Map(2 -> country, 1 -> quote-01, 4 -> "Nepal", 0 -> state-01, 3 -> name),Map(n -> name, q -> quote-01, s -> state-01, c -> country))),[Ljava.lang.String;@23592946,Annotation([Ljava.lang.String;@3e48d38,[Ljava.lang.String;@7c2b58c0,[Ljava.lang.String;@11b377c5),Annotation([Ljava.lang.String;@7bca6fac,[Ljava.lang.String;@5c60b0a0,[Ledu.cmu.lti.nlp.amr.Dependency;@7a2b1eb4),Annotation([Ljava.lang.String;@702c436b,[Ljava.lang.String;@5833f5cd,[Ljava.lang.String;@10fbbdb),Annotation([Ljava.lang.String;@23f3dbf0,[Ljava.lang.String;@31d6f3fe,[Ledu.cmu.lti.nlp.amr.Entity;@760cf594))
AMR:
(c / country, name, n / name)
(n / name, op, "Nepal")
(q / quote-01, ARG1, c / country)
(q / quote-01, ARG2, s / state-01)

Decoded in 20,313 microseconds
Sentence: 3 police personnel including an inspector and a sub-inspector were killed when 2 police vehicles were moving towards Tikapur area in Kailali district in search of the guerrillas.

NER Entity: (country :name (name :op "Tikapur"))
NER Entity: (country :name (name :op "Kailali"))
NER Entity: (country :name (name :op "Kailali"))
NER Entity: (country :name (name :op "Tikapur"))
Spans:
Span 21-22:  area => area
Span 24-25:  district => district
Span 29-30:  guerrillas => guerrilla
Span 12-13:  killed => kill-01
Span 18-19:  moving => move-02
Span 26-27:  search => search-01
Span 8-9:  sub => sub
Span 16-17:  vehicles => vehicle

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 14-15:  2 => 2
Oracle Span 0-1:  3 => 3
Oracle Span 6-7:  and => and
Oracle Span 21-22:  area => area
Oracle Span 24-25:  district => district
Oracle Span 29-30:  guerrillas => guerrilla
Oracle Span 3-4:  including => (person :ARG2-of include-01)
Oracle Span 5-6:  inspector => inspect-01
Oracle Span 23-24:  Kailali => (name :op "Kailali")
Oracle Span 12-13:  killed => kill-01
Oracle Span 18-19:  moving => move-01
Oracle Span 2-3:  personnel => (have-org-role-91 :ARG2 personnel)
Oracle Span 1-2:  police => police
Oracle Span 26-27:  search => search-01
Oracle Span 20-21:  Tikapur => (name :op "Tikapur")
Oracle Span 16-17:  vehicles => vehicle

Incorrect span: moving => move-02
Extra span: sub => sub
Missing span: Tikapur => (name :op "Tikapur")
Missing span: Kailali => (name :op "Kailali")
Missing span: moving => move-01
Missing span: 2 => 2
Missing span: 3 => 3
Missing span: including => (person :ARG2-of include-01)
Missing span: and => and
Missing span: police => police
Missing span: personnel => (have-org-role-91 :ARG2 personnel)
Missing span: inspector => inspect-01
Dependencies:
1	3	_	CD	CD	_	3	num	_	_
2	police	_	NN	NN	_	3	nn	_	_
3	personnel	_	NNS	NNS	_	11	nsubjpass	_	_
4	including	_	VBG	VBG	_	3	prep	_	_
5	an	_	DT	DT	_	6	det	_	_
6	inspector	_	NN	NN	_	4	pobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	a	_	DT	DT	_	9	det	_	_
9	sub-inspector	_	NN	NN	_	6	conj	_	_
10	were	_	VBD	VBD	_	11	auxpass	_	_
11	killed	_	VBN	VBN	_	0	root	_	_
12	when	_	WRB	WRB	_	17	advmod	_	_
13	2	_	CD	CD	_	15	num	_	_
14	police	_	NN	NN	_	15	nn	_	_
15	vehicles	_	NNS	NNS	_	17	nsubj	_	_
16	were	_	VBD	VBD	_	17	aux	_	_
17	moving	_	VBG	VBG	_	11	advcl	_	_
18	towards	_	IN	IN	_	17	prep	_	_
19	Tikapur	_	NNP	NNP	_	20	nn	_	_
20	area	_	NN	NN	_	18	pobj	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	Kailali	_	NNP	NNP	_	23	nn	_	_
23	district	_	NN	NN	_	21	pobj	_	_
24	in	_	IN	IN	_	17	prep	_	_
25	search	_	NN	NN	_	24	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	guerrillas	_	NNS	NNS	_	26	pobj	_	_
29	.	_	.	.	_	11	punct	_	_

Oracle:
(a2 / area, location, d / district)
(a2 / area, name, n / name)
(d / district, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, p2 / police)
(h / have-org-role-91, ARG2, p5 / personnel)
(i / include-01, ARG1, a / and)
(i / include-01, ARG2, p / person)
(k / kill-01, ARG1, p / person)
(k / kill-01, time, m / move-01)
(m / move-01, ARG1, v / vehicle)
(m / move-01, ARG2, a2 / area)
(m / move-01, purpose, s2 / search-01)
(n / name, op, "Tikapur")
(n2 / name, op, "Kailali")
(p / person, quant, 3 / 3)
(s2 / search-01, ARG2, g / guerrilla)
(v / vehicle, mod, p2 / police)
(v / vehicle, quant, 2 / 2)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),guerrillas,guerrilla,false), Span(26,27,List(1),search,search-01,false), Span(24,25,List(2),district,district,false), Span(21,22,List(3),area,area,false), Span(18,19,List(4),moving,move-02,false), Span(16,17,List(5),vehicles,vehicle,false), Span(12,13,List(6),killed,kill-01,false), Span(8,9,List(7),sub,sub,false)),Map(2 -> district, 5 -> vehicle, 7 -> sub, 1 -> search-01, 4 -> move-02, 6 -> kill-01, 0 -> guerrilla, 3 -> area),Map(s2 -> sub, k -> kill-01, s -> search-01, v -> vehicle, m -> move-02, d -> district, g -> guerrilla, a -> area))),[Ljava.lang.String;@aa149ed,Annotation([Ljava.lang.String;@37303f12,[Ljava.lang.String;@31ff6309,[Ljava.lang.String;@204e90f7),Annotation([Ljava.lang.String;@20a05b32,[Ljava.lang.String;@165e389b,[Ledu.cmu.lti.nlp.amr.Dependency;@5c73f672),Annotation([Ljava.lang.String;@8ee0c23,[Ljava.lang.String;@2ab5afc7,[Ljava.lang.String;@4dc8c0ea),Annotation([Ljava.lang.String;@e4b6f47,[Ljava.lang.String;@763cf5b9,[Ledu.cmu.lti.nlp.amr.Entity;@71f0b72e))
AMR:
(a / area, location, d / district)
(a / area, topic, s / search-01)
(k / kill-01, ARG0, s2 / sub)
(k / kill-01, ARG1, v / vehicle)
(m / move-02, ARG0, a / area)
(m / move-02, ARG1, v / vehicle)
(s / search-01, ARG1, g / guerrilla)

Decoded in 174,400 microseconds
Sentence: The policemen killed and wounded were all in the first vehicle.

Spans:
Span 6-7:  all => all
Span 2-3:  killed => kill-01
Span 1-2:  policemen => policeman
Span 10-11:  vehicle => vehicle
Span 4-5:  wounded => wound-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 6-7:  all => all
Oracle Span 3-4:  and => and
Oracle Span 2-3:  killed => kill-01
Oracle Span 1-2:  policemen => policeman
Oracle Span 10-11:  vehicle => vehicle
Oracle Span 4-5:  wounded => wound-01

Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	policemen	_	NN	NN	_	7	nsubj	_	_
3	killed	_	VBN	VBN	_	2	vmod	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	wounded	_	VBN	VBN	_	3	conj	_	_
6	were	_	VBD	VBD	_	7	cop	_	_
7	all	_	DT	DT	_	0	root	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	first	_	JJ	JJ	_	11	amod	_	_
11	vehicle	_	NN	NN	_	8	pobj	_	_
12	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, p2 / policeman)
(a / and, quant, a2 / all)
(w / wound-01, ARG1, p2 / policeman)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),vehicle,vehicle,false), Span(6,7,List(1),all,all,false), Span(4,5,List(2),wounded,wound-01,false), Span(2,3,List(3),killed,kill-01,false), Span(1,2,List(4),policemen,policeman,false)),Map(2 -> wound-01, 1 -> all, 4 -> policeman, 0 -> vehicle, 3 -> kill-01),Map(w -> wound-01, k -> kill-01, v -> vehicle, p -> policeman, a -> all))),[Ljava.lang.String;@7a34f66a,Annotation([Ljava.lang.String;@2f508f3c,[Ljava.lang.String;@3ed03652,[Ljava.lang.String;@4aedaf61),Annotation([Ljava.lang.String;@173797f0,[Ljava.lang.String;@3c35c345,[Ledu.cmu.lti.nlp.amr.Dependency;@3681037),Annotation([Ljava.lang.String;@2459319c,[Ljava.lang.String;@ffaaaf0,[Ljava.lang.String;@1dc76fa1),Annotation([Ljava.lang.String;@5eed2d86,[Ljava.lang.String;@33d53216,[Ledu.cmu.lti.nlp.amr.Entity;@69a2b3b6))
AMR:
(k / kill-01, ARG0, a / all)
(k / kill-01, ARG1, p / policeman)
(v / vehicle, quant, a / all)
(w / wound-01, ARG0, p / policeman)

Decoded in 40,890 microseconds
Sentence: The driver of the vehicle was also killed in the ambush.

Spans:
Span 10-11:  ambush => ambush-01
Span 1-2:  driver => (person :ARG0-of drive-01)
Span 7-8:  killed => kill-01
Span 4-5:  vehicle => vehicle

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  also => also
Oracle Span 10-11:  ambush => ambush-01
Oracle Span 1-2:  driver => (person :ARG0-of drive-01)
Oracle Span 7-8:  killed => kill-01
Oracle Span 4-5:  vehicle => vehicle

Missing span: also => also
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	driver	_	NN	NN	_	8	nsubjpass	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	vehicle	_	NN	NN	_	3	pobj	_	_
6	was	_	VBD	VBD	_	8	auxpass	_	_
7	also	_	RB	RB	_	8	advmod	_	_
8	killed	_	VBN	VBN	_	0	root	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	ambush	_	NN	NN	_	9	pobj	_	_
12	.	_	.	.	_	8	punct	_	_

Oracle:
(d / drive-01, ARG0, p / person)
(d / drive-01, ARG1, v / vehicle)
(k / kill-01, ARG1, p / person)
(k / kill-01, ARG2, a2 / ambush-01)
(k / kill-01, mod, a / also)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),ambush,ambush-01,false), Span(7,8,List(1),killed,kill-01,false), Span(4,5,List(2),vehicle,vehicle,false), Span(1,2,List(4, 3),driver,(person :ARG0-of drive-01),false)),Map(2 -> vehicle, 1 -> kill-01, 4 -> drive-01, 0 -> ambush-01, 3 -> person),Map(k -> kill-01, d -> drive-01, v -> vehicle, p -> person, a -> ambush-01))),[Ljava.lang.String;@4f3e7344,Annotation([Ljava.lang.String;@7808f638,[Ljava.lang.String;@62d73ead,[Ljava.lang.String;@1e141e42),Annotation([Ljava.lang.String;@228cea97,[Ljava.lang.String;@1d0a61c8,[Ledu.cmu.lti.nlp.amr.Dependency;@46731692),Annotation([Ljava.lang.String;@782bf610,[Ljava.lang.String;@3db663d0,[Ljava.lang.String;@73fc518f),Annotation([Ljava.lang.String;@2de50ee4,[Ljava.lang.String;@ad9e63e,[Ledu.cmu.lti.nlp.amr.Entity;@47fbc56))
AMR:
(a / ambush-01, ARG1, p / person)
(d / drive-01, ARG0, p / person)
(d / drive-01, ARG1, v / vehicle)
(k / kill-01, ARG1, p / person)

Decoded in 25,759 microseconds
Sentence: 5 police personnel are still missing.

Spans:
Span 5-6:  missing => miss-01
Span 4-5:  still => still

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  5 => 5
Oracle Span 5-6:  missing => miss-01
Oracle Span 2-3:  personnel => (have-org-role-91 :ARG2 personnel)
Oracle Span 1-2:  police => police
Oracle Span 4-5:  still => still

Missing span: 5 => 5
Missing span: police => police
Missing span: personnel => (have-org-role-91 :ARG2 personnel)
Dependencies:
1	5	_	CD	CD	_	3	num	_	_
2	police	_	NN	NN	_	3	nn	_	_
3	personnel	_	NNS	NNS	_	6	nsubj	_	_
4	are	_	VBP	VBP	_	6	cop	_	_
5	still	_	RB	RB	_	6	advmod	_	_
6	missing	_	VBG	VBG	_	0	root	_	_
7	.	_	.	.	_	6	punct	_	_

Oracle:
(h / have-org-role-91, ARG1, p2 / police)
(h / have-org-role-91, ARG2, p3 / personnel)
(m / miss-01, mod, s / still)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),missing,miss-01,false), Span(4,5,List(1),still,still,false)),Map(1 -> still, 0 -> miss-01),Map(s -> still, m -> miss-01))),[Ljava.lang.String;@151ef57f,Annotation([Ljava.lang.String;@10895b16,[Ljava.lang.String;@5524b72f,[Ljava.lang.String;@2cc03cd1),Annotation([Ljava.lang.String;@4e17913b,[Ljava.lang.String;@149c3204,[Ledu.cmu.lti.nlp.amr.Dependency;@64f16277),Annotation([Ljava.lang.String;@497aec8c,[Ljava.lang.String;@3b9632d1,[Ljava.lang.String;@4e6f2bb5),Annotation([Ljava.lang.String;@21e20ad5,[Ljava.lang.String;@3f628ce9,[Ledu.cmu.lti.nlp.amr.Entity;@35e8316e))
AMR:
(m / miss-01, mod, s / still)

Decoded in 15,070 microseconds
Sentence: The wounded police personnel were brought to Kathmandu and Nepalgunj for treatment and additional security personnel were mobilized in the area to defend against the guerrillas.

NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Nepalgunj"))
Spans:
Span 13-14:  additional => additional
Span 20-21:  area => area
Span 5-6:  brought => bring-01
Span 22-23:  defend => defend-01
Span 25-26:  guerrillas => guerrilla
Span 17-18:  mobilized => mobilize-01
Span 11-12:  treatment => treat-03
Span 1-2:  wounded => wound-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 13-14:  additional => additional
Oracle Span 8-9:  and => and
Oracle Span 12-13:  and => and
Oracle Span 20-21:  area => area
Oracle Span 5-6:  brought => bring-01
Oracle Span 22-23:  defend => defend-01
Oracle Span 25-26:  guerrillas => guerrilla
Oracle Span 7-8:  Kathmandu => (city :name (name :op "Kathmandu"))
Oracle Span 17-18:  mobilized => mobilize-01
Oracle Span 9-10:  Nepalgunj => (city :name (name :op "Nepalgunj"))
Oracle Span 3-4:  personnel => (have-org-role-91 :ARG2 personnel)
Oracle Span 15-16:  personnel => (have-org-role-91 :ARG2 personnel)
Oracle Span 2-3:  police => police
Oracle Span 14-15:  security => security
Oracle Span 11-12:  treatment => treat-03
Oracle Span 1-2:  wounded => (person :ARG1-of wound-01)

Incorrect span: wounded => wound-01
Missing span: Kathmandu => (city :name (name :op "Kathmandu"))
Missing span: Nepalgunj => (city :name (name :op "Nepalgunj"))
Missing span: and => and
Missing span: security => security
Missing span: personnel => (have-org-role-91 :ARG2 personnel)
Missing span: and => and
Missing span: wounded => (person :ARG1-of wound-01)
Missing span: police => police
Missing span: personnel => (have-org-role-91 :ARG2 personnel)
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	wounded	_	VBN	VBN	_	4	amod	_	_
3	police	_	NN	NN	_	4	nn	_	_
4	personnel	_	NNS	NNS	_	6	nsubjpass	_	_
5	were	_	VBD	VBD	_	6	auxpass	_	_
6	brought	_	VBN	VBN	_	0	root	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	Kathmandu	_	NNP	NNP	_	7	pobj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	Nepalgunj	_	NNP	NNP	_	8	conj	_	_
11	for	_	IN	IN	_	6	prep	_	_
12	treatment	_	NN	NN	_	11	pobj	_	_
13	and	_	CC	CC	_	6	cc	_	_
14	additional	_	JJ	JJ	_	16	amod	_	_
15	security	_	NN	NN	_	16	nn	_	_
16	personnel	_	NNS	NNS	_	18	nsubjpass	_	_
17	were	_	VBD	VBD	_	18	auxpass	_	_
18	mobilized	_	VBN	VBN	_	6	conj	_	_
19	in	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	area	_	NN	NN	_	19	pobj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	defend	_	VB	VB	_	18	xcomp	_	_
24	against	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	guerrillas	_	NNS	NNS	_	24	pobj	_	_
27	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, b / bring-01)
(a / and, op, m / mobilize-01)
(a2 / and, op, c / city)
(a2 / and, op, c2 / city)
(b / bring-01, ARG1, p / person)
(b / bring-01, ARG2, a2 / and)
(b / bring-01, purpose, t / treat-03)
(c / city, name, n / name)
(c2 / city, name, n2 / name)
(d / defend-01, prep-against, g / guerrilla)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, p2 / police)
(h / have-org-role-91, ARG2, p4 / personnel)
(h2 / have-org-role-91, ARG1, s / security)
(h2 / have-org-role-91, ARG2, p5 / personnel)
(m / mobilize-01, location, a4 / area)
(m / mobilize-01, purpose, d / defend-01)
(n / name, op, "Kathmandu")
(n2 / name, op, "Nepalgunj")
(p5 / personnel, mod, a3 / additional)
(w / wound-01, ARG1, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),guerrillas,guerrilla,false), Span(22,23,List(1),defend,defend-01,false), Span(20,21,List(2),area,area,false), Span(17,18,List(3),mobilized,mobilize-01,false), Span(13,14,List(4),additional,additional,false), Span(11,12,List(5),treatment,treat-03,false), Span(5,6,List(6),brought,bring-01,false), Span(1,2,List(7),wounded,wound-01,false)),Map(2 -> area, 5 -> treat-03, 7 -> wound-01, 1 -> defend-01, 4 -> additional, 6 -> bring-01, 0 -> guerrilla, 3 -> mobilize-01),Map(w -> wound-01, b -> bring-01, t -> treat-03, m -> mobilize-01, d -> defend-01, g -> guerrilla, a -> area, a2 -> additional))),[Ljava.lang.String;@26d96e5,Annotation([Ljava.lang.String;@336880df,[Ljava.lang.String;@1846579f,[Ljava.lang.String;@6cd166b8),Annotation([Ljava.lang.String;@2650f79,[Ljava.lang.String;@75fc1992,[Ledu.cmu.lti.nlp.amr.Dependency;@5fac521d),Annotation([Ljava.lang.String;@38af1bf6,[Ljava.lang.String;@129bd55d,[Ljava.lang.String;@7be7e15),Annotation([Ljava.lang.String;@3abfe845,[Ljava.lang.String;@7a0f244f,[Ledu.cmu.lti.nlp.amr.Entity;@3672276e))
AMR:
(b / bring-01, ARG0, a2 / additional)
(b / bring-01, ARG1, w / wound-01)
(b / bring-01, ARG4, t / treat-03)
(d / defend-01, ARG1, g / guerrilla)
(m / mobilize-01, ARG1, b / bring-01)
(m / mobilize-01, ARG2, d / defend-01)
(m / mobilize-01, location, a / area)

Decoded in 165,462 microseconds
Sentence: Anti-government insurgents have increased their violent activities across the Himalayan kingdom since the 9-month-long nationwide state of emergency expired at the end of August 2002.

NER Entity: (thing :name (name :op "Himalayan"))
NER Entity: (thing :name (name :op "Himalayan"))
Spans:
Span 9-10:  across => across
Span 8-9:  activities => activity
Span 29-31:  August 2002 => (date-entity :month 8 :year 2002)
Span 23-24:  emergency => emergency
Span 11-12:  Himalayan => (world-region :name (name :op "Himalayas"))
Span 5-6:  increased => increase-01
Span 3-4:  insurgents => insurgent
Span 12-13:  kingdom => kingdom
Span 20-21:  nationwide => nationwide
Span 13-14:  since => since

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 15-16:  9 => 9
Oracle Span 9-10:  across => across
Oracle Span 8-9:  activities => activity
Oracle Span 0-1:  Anti => oppose-01
Oracle Span 29-31:  August 2002 => (date-entity :month 8 :year 2002)
Oracle Span 23-24:  emergency => emergency
Oracle Span 27-28:  end => end-02
Oracle Span 24-25:  expired => expire-01
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 11-12:  Himalayan => (world-region :name (name :op "Himalayas"))
Oracle Span 5-6:  increased => increase-01
Oracle Span 3-4:  insurgents => insurgent
Oracle Span 12-13:  kingdom => kingdom
Oracle Span 17-18:  month => (temporal-quantity :unit month)
Oracle Span 20-21:  nationwide => nationwide
Oracle Span 13-14:  since => since
Oracle Span 21-22:  state => state
Oracle Span 7-8:  violent => violent

Missing span: expired => expire-01
Missing span: end => end-02
Missing span: state => state
Missing span: 9 => 9
Missing span: month => (temporal-quantity :unit month)
Missing span: violent => violent
Missing span: Anti => oppose-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Anti-government	_	JJ	JJ	_	2	amod	_	_
2	insurgents	_	NNS	NNS	_	4	nsubj	_	_
3	have	_	VBP	VBP	_	4	aux	_	_
4	increased	_	VBN	VBN	_	0	root	_	_
5	their	_	PRP$	PRP$	_	7	poss	_	_
6	violent	_	JJ	JJ	_	7	amod	_	_
7	activities	_	NNS	NNS	_	4	dobj	_	_
8	across	_	IN	IN	_	4	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	Himalayan	_	NNP	NNP	_	11	nn	_	_
11	kingdom	_	NN	NN	_	8	pobj	_	_
12	since	_	IN	IN	_	19	mark	_	_
13	the	_	DT	DT	_	16	det	_	_
14	9-month-long	_	JJ	JJ	_	16	amod	_	_
15	nationwide	_	JJ	JJ	_	16	amod	_	_
16	state	_	NN	NN	_	19	nsubj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	emergency	_	NN	NN	_	17	pobj	_	_
19	expired	_	VBD	VBD	_	4	advcl	_	_
20	at	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	end	_	NN	NN	_	20	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	August	_	NNP	NNP	_	23	pobj	_	_
25	2002	_	CD	CD	_	24	num	_	_
26	.	_	.	.	_	4	punct	_	_

Oracle:
(a / activity, mod, v / violent)
(a / activity, poss, i2 / insurgent)
(a2 / across, op, k / kingdom)
(d / date-entity, month, 8)
(d / date-entity, year, 2002)
(e / end-02, ARG1, d / date-entity)
(e2 / expire-01, ARG1, s2 / state)
(e2 / expire-01, time, e / end-02)
(g2 / govern-01, ARG0, g / government-organization)
(i / increase-01, ARG0, i2 / insurgent)
(i / increase-01, ARG1, a / activity)
(i / increase-01, location, a2 / across)
(i / increase-01, time, s / since)
(k / kingdom, mod, w / world-region)
(n / name, op, "Himalayas")
(o / oppose-01, ARG0, i2 / insurgent)
(o / oppose-01, ARG1, g / government-organization)
(s / since, op, e2 / expire-01)
(s2 / state, duration, t2 / temporal-quantity)
(s2 / state, extent, n2 / nationwide)
(s2 / state, mod, e3 / emergency)
(t2 / temporal-quantity, quant, 9 / 9)
(t2 / temporal-quantity, unit, m2 / month)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(29,31,List(2, 1, 0),August 2002,(date-entity :month 8 :year 2002),false), Span(23,24,List(3),emergency,emergency,false), Span(20,21,List(4),nationwide,nationwide,false), Span(13,14,List(5),since,since,false), Span(12,13,List(6),kingdom,kingdom,false), Span(11,12,List(9, 8, 7),Himalayan,(world-region :name (name :op "Himalayas")),false), Span(9,10,List(10),across,across,false), Span(8,9,List(11),activities,activity,false), Span(5,6,List(12),increased,increase-01,false), Span(3,4,List(13),insurgents,insurgent,false)),Map(2 -> 2002, 5 -> since, 12 -> increase-01, 8 -> name, 7 -> world-region, 1 -> 8, 4 -> nationwide, 11 -> activity, 6 -> kingdom, 0 -> date-entity, 9 -> "Himalayas", 3 -> emergency, 10 -> across, 13 -> insurgent),Map(e -> emergency, n -> nationwide, w -> world-region, 2 -> 2002, k -> kingdom, 8 -> 8, s -> since, d -> date-entity, a -> across, i2 -> insurgent, a2 -> activity, i -> increase-01, n2 -> name))),[Ljava.lang.String;@4248b963,Annotation([Ljava.lang.String;@7f08caf,[Ljava.lang.String;@4defd42,[Ljava.lang.String;@2330e3e0),Annotation([Ljava.lang.String;@24b4d544,[Ljava.lang.String;@27a2a089,[Ledu.cmu.lti.nlp.amr.Dependency;@54657dd2),Annotation([Ljava.lang.String;@706eab5d,[Ljava.lang.String;@72725ee1,[Ljava.lang.String;@40e60ece),Annotation([Ljava.lang.String;@3f9270ed,[Ljava.lang.String;@3a230001,[Ledu.cmu.lti.nlp.amr.Entity;@5ac6c4f2))
AMR:
(a / across, op, w / world-region)
(a2 / activity, poss, i2 / insurgent)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 2 / 2002)
(e / emergency, location, k / kingdom)
(i / increase-01, ARG0, n / nationwide)
(i / increase-01, ARG1, a2 / activity)
(i / increase-01, time, a / across)
(i / increase-01, time, d / date-entity)
(i / increase-01, time, s / since)
(k / kingdom, mod, w / world-region)
(n2 / name, op, "Himalayas")
(w / world-region, name, n2 / name)

Decoded in 195,086 microseconds
Sentence: The Nepali government initiated peace talks with the guerrillas in August 2001 in order to find a peaceful solution to the guerrilla insurgency that has killed more than 5000 people including policemen, guerrilla members and civilians since it began in the Himalayan kingdom in 1996.

NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (thing :name (name :op "Himalayan"))
NER Entity: (thing :name (name :op "Himalayan"))
Spans:
Span 45-46:  1996 => (date-entity :year 1996)
Span 28-29:  5000 => 5000
Span 10-12:  August 2001 => (date-entity :month 8 :year 2001)
Span 39-40:  began => begin-01
Span 36-37:  civilians => civilian
Span 33-34:  guerrilla => guerrilla
Span 21-22:  guerrilla => guerrilla
Span 8-9:  guerrillas => guerrilla
Span 42-43:  Himalayan => (world-region :name (name :op "Himalayas"))
Span 3-4:  initiated => initiate-01
Span 22-23:  insurgency => insurgency
Span 25-26:  killed => kill-01
Span 43-44:  kingdom => kingdom
Span 34-35:  members => (have-org-role-91 :ARG2 member)
Span 4-5:  peace => peace
Span 17-18:  peaceful => peaceful
Span 31-32:  policemen => policeman
Span 37-38:  since => since
Span 18-19:  solution => solution
Span 5-6:  talks => talk-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 45-46:  1996 => (date-entity :year 1996)
Oracle Span 28-29:  5000 => 5000
Oracle Span 35-36:  and => and
Oracle Span 10-12:  August 2001 => (date-entity :year 2001 :month 8)
Oracle Span 39-40:  began => begin-01
Oracle Span 36-37:  civilians => civilian
Oracle Span 15-16:  find => find-01
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 21-22:  guerrilla => guerrilla
Oracle Span 8-9:  guerrillas => guerrilla
Oracle Span 24-25:  has => (person :ARG0-of have-org-role-91)
Oracle Span 42-43:  Himalayan => (world-region :name (name :op "Himalayas"))
Oracle Span 30-31:  including => (person :ARG2-of include-01)
Oracle Span 3-4:  initiated => initiate-01
Oracle Span 22-23:  insurgency => insurgency
Oracle Span 25-26:  killed => kill-01
Oracle Span 43-44:  kingdom => kingdom
Oracle Span 34-35:  members => member
Oracle Span 26-27:  more => more-than
Oracle Span 1-2:  Nepali => (country :name (name :op "Nepal"))
Oracle Span 4-5:  peace => peace
Oracle Span 17-18:  peaceful => peaceful
Oracle Span 31-32:  policemen => policeman
Oracle Span 37-38:  since => since
Oracle Span 5-6:  talks => talk-01

Incorrect span: members => (have-org-role-91 :ARG2 member)
Extra span: guerrilla => guerrilla
Extra span: solution => solution
Incorrect span: August 2001 => (date-entity :month 8 :year 2001)
Missing span: Nepali => (country :name (name :op "Nepal"))
Missing span: August 2001 => (date-entity :year 2001 :month 8)
Missing span: find => find-01
Missing span: including => (person :ARG2-of include-01)
Missing span: and => and
Missing span: members => member
Missing span: more => more-than
Missing span: has => (person :ARG0-of have-org-role-91)
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Nepali	_	NNP	NNP	_	3	nn	_	_
3	government	_	NN	NN	_	4	nsubj	_	_
4	initiated	_	VBD	VBD	_	0	root	_	_
5	peace	_	NN	NN	_	6	nn	_	_
6	talks	_	NNS	NNS	_	4	dobj	_	_
7	with	_	IN	IN	_	4	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	guerrillas	_	NNS	NNS	_	7	pobj	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	August	_	NNP	NNP	_	10	pobj	_	_
12	2001	_	CD	CD	_	11	num	_	_
13	in	_	IN	IN	_	16	mark	_	_
14	order	_	NN	NN	_	16	dep	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	find	_	VB	VB	_	4	advcl	_	_
17	a	_	DT	DT	_	19	det	_	_
18	peaceful	_	JJ	JJ	_	19	amod	_	_
19	solution	_	NN	NN	_	16	dobj	_	_
20	to	_	TO	TO	_	16	prep	_	_
21	the	_	DT	DT	_	23	det	_	_
22	guerrilla	_	NN	NN	_	23	nn	_	_
23	insurgency	_	NN	NN	_	20	pobj	_	_
24	that	_	WDT	WDT	_	26	nsubj	_	_
25	has	_	VBZ	VBZ	_	26	aux	_	_
26	killed	_	VBN	VBN	_	23	rcmod	_	_
27	more	_	JJR	JJR	_	28	mwe	_	_
28	than	_	IN	IN	_	29	quantmod	_	_
29	5000	_	CD	CD	_	30	num	_	_
30	people	_	NNS	NNS	_	26	dobj	_	_
31	including	_	VBG	VBG	_	30	prep	_	_
32	policemen	_	NN	NN	_	31	pobj	_	_
33	,	_	,	,	_	32	punct	_	_
34	guerrilla	_	NN	NN	_	35	nn	_	_
35	members	_	NNS	NNS	_	32	conj	_	_
36	and	_	CC	CC	_	32	cc	_	_
37	civilians	_	NNS	NNS	_	32	conj	_	_
38	since	_	IN	IN	_	40	mark	_	_
39	it	_	PRP	PRP	_	40	nsubj	_	_
40	began	_	VBD	VBD	_	16	advcl	_	_
41	in	_	IN	IN	_	40	prep	_	_
42	the	_	DT	DT	_	44	det	_	_
43	Himalayan	_	NNP	NNP	_	44	nn	_	_
44	kingdom	_	NN	NN	_	41	pobj	_	_
45	in	_	IN	IN	_	40	prep	_	_
46	1996	_	CD	CD	_	45	pobj	_	_
47	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c2 / civilian)
(a / and, op, p4 / policeman)
(a / and, op, p5 / person)
(b / begin-01, ARG1, i2 / insurgency)
(b / begin-01, location, k3 / kingdom)
(b / begin-01, time, d3 / date-entity)
(c / country, name, n / name)
(d / date-entity, month, 8)
(d / date-entity, year, 2001)
(d3 / date-entity, year, 1996)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p5 / person)
(h / have-org-role-91, ARG1, g3 / guerrilla)
(h / have-org-role-91, ARG2, m / member)
(i / initiate-01, ARG0, g / government-organization)
(i / initiate-01, ARG1, t / talk-01)
(i / initiate-01, purpose, f / find-01)
(i / initiate-01, time, d / date-entity)
(i2 / insurgency, mod, g4 / guerrilla)
(i3 / include-01, ARG1, a / and)
(i3 / include-01, ARG2, p3 / person)
(k / kill-01, ARG0, i2 / insurgency)
(k / kill-01, ARG1, p3 / person)
(k / kill-01, time, s2 / since)
(k3 / kingdom, mod, w / world-region)
(m2 / more-than, op, 5 / 5000)
(n / name, op, "Nepal")
(n2 / name, op, "Himalayas")
(p3 / person, quant, m2 / more-than)
(s2 / since, op, b / begin-01)
(t / talk-01, ARG0, g / government-organization)
(t / talk-01, ARG1, p / peace)
(t / talk-01, ARG2, g3 / guerrilla)
(w / world-region, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(1, 0),1996,(date-entity :year 1996),false), Span(43,44,List(2),kingdom,kingdom,false), Span(42,43,List(5, 4, 3),Himalayan,(world-region :name (name :op "Himalayas")),false), Span(39,40,List(6),began,begin-01,false), Span(37,38,List(7),since,since,false), Span(36,37,List(8),civilians,civilian,false), Span(34,35,List(10, 9),members,(have-org-role-91 :ARG2 member),false), Span(33,34,List(11),guerrilla,guerrilla,false), Span(31,32,List(12),policemen,policeman,false), Span(28,29,List(13),5000,5000,false), Span(25,26,List(14),killed,kill-01,false), Span(22,23,List(15),insurgency,insurgency,false), Span(21,22,List(16),guerrilla,guerrilla,false), Span(18,19,List(17),solution,solution,false), Span(17,18,List(18),peaceful,peaceful,false), Span(10,12,List(21, 20, 19),August 2001,(date-entity :month 8 :year 2001),false), Span(8,9,List(22),guerrillas,guerrilla,false), Span(5,6,List(23),talks,talk-01,false), Span(4,5,List(24),peace,peace,false), Span(3,4,List(25),initiated,initiate-01,false)),Map(2 -> kingdom, 5 -> "Himalayas", 12 -> policeman, 8 -> civilian, 15 -> insurgency, 21 -> 2001, 18 -> peaceful, 24 -> peace, 7 -> since, 1 -> 1996, 17 -> solution, 23 -> talk-01, 4 -> name, 11 -> guerrilla, 14 -> kill-01, 20 -> 8, 6 -> begin-01, 9 -> have-org-role-91, 0 -> date-entity, 22 -> guerrilla, 16 -> guerrilla, 19 -> date-entity, 10 -> member, 3 -> world-region, 25 -> initiate-01, 13 -> 5000),Map(n -> name, w -> world-region, k2 -> kill-01, h -> have-org-role-91, g3 -> guerrilla, 2 -> 2001, 5 -> 5000, s2 -> solution, t -> talk-01, b -> begin-01, k -> kingdom, 8 -> 8, p2 -> peaceful, s -> since, m -> member, d -> date-entity, 1 -> 1996, g2 -> guerrilla, p -> policeman, g -> guerrilla, d2 -> date-entity, i2 -> initiate-01, i -> insurgency, c -> civilian, p3 -> peace))),[Ljava.lang.String;@2aa6311a,Annotation([Ljava.lang.String;@61f39bb,[Ljava.lang.String;@249e0271,[Ljava.lang.String;@4893b344),Annotation([Ljava.lang.String;@53a665ad,[Ljava.lang.String;@2c0b4c83,[Ledu.cmu.lti.nlp.amr.Dependency;@78525ef9),Annotation([Ljava.lang.String;@2d0ecb24,[Ljava.lang.String;@4d654825,[Ljava.lang.String;@3bfc6a5e),Annotation([Ljava.lang.String;@51b35e4e,[Ljava.lang.String;@abff8b7,[Ledu.cmu.lti.nlp.amr.Entity;@6d7cada5))
AMR:
(b / begin-01, ARG0, i / insurgency)
(b / begin-01, ARG1, h / have-org-role-91)
(b / begin-01, location, k / kingdom)
(b / begin-01, time, d / date-entity)
(c / civilian, op, w / world-region)
(d / date-entity, year, 1 / 1996)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 2 / 2001)
(h / have-org-role-91, ARG0, 5 / 5000)
(h / have-org-role-91, ARG1, g / guerrilla)
(h / have-org-role-91, ARG2, m / member)
(i / insurgency, mod, g2 / guerrilla)
(i2 / initiate-01, ARG0, g2 / guerrilla)
(i2 / initiate-01, ARG1, t / talk-01)
(i2 / initiate-01, time, d2 / date-entity)
(k / kingdom, mod, w / world-region)
(k2 / kill-01, ARG0, i / insurgency)
(k2 / kill-01, ARG1, p / policeman)
(n / name, op, "Himalayas")
(s / since, op, b / begin-01)
(s2 / solution, location, i / insurgency)
(s2 / solution, mod, p2 / peaceful)
(t / talk-01, ARG1, g3 / guerrilla)
(t / talk-01, topic, p3 / peace)
(w / world-region, name, n / name)

Decoded in 1,516,730 microseconds
Sentence: The 3 rounds of talks held were inconclusive as the guerrillas demanded the establishment of a republican State, an interim government and a new constitution, which the Nepali government rejected.

NER Entity: (thing :name (name :op "Nepali"))
Spans:
Span 25-26:  constitution => constitution
Span 11-12:  demanded => demand-01
Span 13-14:  establishment => establish-01
Span 10-11:  guerrillas => guerrilla
Span 20-21:  interim => interim
Span 24-25:  new => new
Span 31-32:  rejected => reject-01
Span 2-3:  rounds => round
Span 4-5:  talks => talk-01

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 1-2:  3 => 3
Oracle Span 22-23:  and => and
Oracle Span 25-26:  constitution => constitution
Oracle Span 11-12:  demanded => demand-01
Oracle Span 13-14:  establishment => establish-01
Oracle Span 21-22:  government => government-organization
Oracle Span 30-31:  government => govern-01
Oracle Span 10-11:  guerrillas => guerrilla
Oracle Span 5-6:  held => hold-04
Oracle Span 7-8:  inconclusive => (conclude-01 :polarity -)
Oracle Span 20-21:  interim => interim
Oracle Span 29-30:  Nepali => (country :name (name :op "Nepal"))
Oracle Span 24-25:  new => new
Oracle Span 31-32:  rejected => reject-01
Oracle Span 16-17:  republican => republic
Oracle Span 2-3:  rounds => round
Oracle Span 17-18:  State => state
Oracle Span 4-5:  talks => talk-01

Missing span: Nepali => (country :name (name :op "Nepal"))
Missing span: held => hold-04
Missing span: and => and
Missing span: State => state
Missing span: 3 => 3
Missing span: inconclusive => (conclude-01 :polarity -)
Missing span: government => government-organization
Missing span: government => govern-01
Missing span: republican => republic
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	3	_	CD	CD	_	3	num	_	_
3	rounds	_	NNS	NNS	_	8	nsubjpass	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	talks	_	NNS	NNS	_	4	pobj	_	_
6	held	_	VBN	VBN	_	5	vmod	_	_
7	were	_	VBD	VBD	_	8	auxpass	_	_
8	inconclusive	_	VBN	VBN	_	0	root	_	_
9	as	_	IN	IN	_	12	mark	_	_
10	the	_	DT	DT	_	11	det	_	_
11	guerrillas	_	NNS	NNS	_	12	nsubj	_	_
12	demanded	_	VBD	VBD	_	8	advcl	_	_
13	the	_	DT	DT	_	14	det	_	_
14	establishment	_	NN	NN	_	12	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	a	_	DT	DT	_	18	det	_	_
17	republican	_	NN	NN	_	18	nn	_	_
18	State	_	NN	NN	_	15	pobj	_	_
19	,	_	,	,	_	18	punct	_	_
20	an	_	DT	DT	_	22	det	_	_
21	interim	_	JJ	JJ	_	22	amod	_	_
22	government	_	NN	NN	_	18	conj	_	_
23	and	_	CC	CC	_	18	cc	_	_
24	a	_	DT	DT	_	26	det	_	_
25	new	_	JJ	JJ	_	26	amod	_	_
26	constitution	_	NN	NN	_	18	conj	_	_
27	,	_	,	,	_	14	punct	_	_
28	which	_	WDT	WDT	_	32	dobj	_	_
29	the	_	DT	DT	_	31	det	_	_
30	Nepali	_	NNP	NNP	_	31	nn	_	_
31	government	_	NN	NN	_	32	nsubj	_	_
32	rejected	_	VBD	VBD	_	14	rcmod	_	_
33	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, c2 / constitution)
(a / and, op, e / establish-01)
(c2 / constitution, mod, n / new)
(c3 / country, name, n2 / name)
(c4 / conclude-01, ARG0, t / talk-01)
(c4 / conclude-01, polarity, -)
(d / demand-01, ARG0, g / guerrilla)
(d / demand-01, ARG1, a / and)
(e / establish-01, ARG1, s / state)
(g5 / govern-01, ARG0, g4 / government-organization)
(g5 / govern-01, ARG1, c3 / country)
(h / hold-04, ARG1, t / talk-01)
(n2 / name, op, "Nepal")
(r / round, quant, 3 / 3)
(r3 / reject-01, ARG0, g4 / government-organization)
(r3 / reject-01, ARG1, d / demand-01)
(s / state, mod, r2 / republic)
(t / talk-01, quant, r / round)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),rejected,reject-01,false), Span(25,26,List(1),constitution,constitution,false), Span(24,25,List(2),new,new,false), Span(20,21,List(3),interim,interim,false), Span(13,14,List(4),establishment,establish-01,false), Span(11,12,List(5),demanded,demand-01,false), Span(10,11,List(6),guerrillas,guerrilla,false), Span(4,5,List(7),talks,talk-01,false), Span(2,3,List(8),rounds,round,false)),Map(2 -> new, 5 -> demand-01, 8 -> round, 7 -> talk-01, 1 -> constitution, 4 -> establish-01, 6 -> guerrilla, 0 -> reject-01, 3 -> interim),Map(e -> establish-01, n -> new, t -> talk-01, d -> demand-01, r2 -> round, g -> guerrilla, i -> interim, r -> reject-01, c -> constitution))),[Ljava.lang.String;@350a94ce,Annotation([Ljava.lang.String;@7e00ed0f,[Ljava.lang.String;@b0fc838,[Ljava.lang.String;@3964d79),Annotation([Ljava.lang.String;@62db0521,[Ljava.lang.String;@1b4ae4e0,[Ledu.cmu.lti.nlp.amr.Dependency;@6ef1a1b9),Annotation([Ljava.lang.String;@5fbdc49b,[Ljava.lang.String;@65753040,[Ljava.lang.String;@2954b5ea),Annotation([Ljava.lang.String;@4acb2510,[Ljava.lang.String;@7be3a9ce,[Ledu.cmu.lti.nlp.amr.Entity;@37d871c2))
AMR:
(c / constitution, mod, n / new)
(d / demand-01, ARG0, g / guerrilla)
(d / demand-01, ARG1, e / establish-01)
(d / demand-01, ARG2, t / talk-01)
(e / establish-01, ARG1, c / constitution)
(r / reject-01, ARG1, e / establish-01)
(r2 / round, poss, t / talk-01)
(t / talk-01, ARG1, i / interim)

Decoded in 414,807 microseconds
Sentence: More than 3700 guerrillas and hundreds of security personnel have been killed since the Nepali government imposed the state of emergency on 26 November 2001 following a series of attacks by the guerrillas on government security forces after the guerrillas broke 4-month-long cease-fire talks with the government on 23 November 2001.

NER Entity: (thing :name (name :op "Nepali"))
mkDayMonthYear(26	November	2001,26,November,2001)
mkDayMonthYear(23	November	2001,23,November,2001)
Spans:
Span 54-57:  23 November 2001 => (date-entity :day 23 :month 11 :year 2001)
Span 22-25:  26 November 2001 => (date-entity :day 26 :month 11 :year 2001)
Span 2-3:  3700 => (date-entity :year 3700)
Span 37-38:  after => after
Span 29-30:  attacks => attack-01
Span 46-47:  cease => cease-01
Span 20-21:  emergency => emergency
Span 39-40:  guerrillas => guerrilla
Span 32-33:  guerrillas => guerrilla
Span 3-4:  guerrillas => guerrilla
Span 16-17:  imposed => impose-01
Span 11-12:  killed => kill-01
Span 0-1:  More => more-than
Span 27-28:  series => series
Span 12-13:  since => since
Span 49-50:  talks => talk-01

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 54-57:  23 November 2001 => (date-entity :year 2001 :month 11 :day 23)
Oracle Span 22-25:  26 November 2001 => (date-entity :year 2001 :month 11 :day 26)
Oracle Span 2-3:  3700 => 3700
Oracle Span 41-42:  4 => 4
Oracle Span 37-38:  after => after
Oracle Span 4-5:  and => and
Oracle Span 29-30:  attacks => attack-01
Oracle Span 40-41:  broke => break-01
Oracle Span 46-47:  cease => cease-01
Oracle Span 20-21:  emergency => emergency
Oracle Span 48-49:  fire => fire-01
Oracle Span 25-26:  following => follow-01
Oracle Span 36-37:  forces => force
Oracle Span 15-16:  government => government-organization
Oracle Span 34-35:  government => govern-01
Oracle Span 3-4:  guerrillas => guerrilla
Oracle Span 9-10:  have => (person :ARG0-of have-org-role-91)
Oracle Span 16-17:  imposed => impose-01
Oracle Span 11-12:  killed => kill-01
Oracle Span 43-44:  month => (temporal-quantity :unit month)
Oracle Span 0-1:  More => more-than
Oracle Span 14-15:  Nepali => (country :name (name :op "Nepal"))
Oracle Span 8-9:  personnel => personnel
Oracle Span 7-8:  security => security
Oracle Span 35-36:  security => security
Oracle Span 27-28:  series => series
Oracle Span 12-13:  since => since
Oracle Span 18-19:  state => state
Oracle Span 49-50:  talks => talk-01

Incorrect span: 23 November 2001 => (date-entity :day 23 :month 11 :year 2001)
Extra span: guerrillas => guerrilla
Extra span: guerrillas => guerrilla
Incorrect span: 26 November 2001 => (date-entity :day 26 :month 11 :year 2001)
Incorrect span: 3700 => (date-entity :year 3700)
Missing span: Nepali => (country :name (name :op "Nepal"))
Missing span: 26 November 2001 => (date-entity :year 2001 :month 11 :day 26)
Missing span: 23 November 2001 => (date-entity :year 2001 :month 11 :day 23)
Missing span: following => follow-01
Missing span: broke => break-01
Missing span: 4 => 4
Missing span: month => (temporal-quantity :unit month)
Missing span: fire => fire-01
Missing span: forces => force
Missing span: security => security
Missing span: state => state
Missing span: and => and
Missing span: security => security
Missing span: personnel => personnel
Missing span: 3700 => 3700
Missing span: government => government-organization
Missing span: government => govern-01
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	More	_	JJR	JJR	_	2	mwe	_	_
2	than	_	IN	IN	_	3	quantmod	_	_
3	3700	_	CD	CD	_	4	num	_	_
4	guerrillas	_	NNS	NNS	_	12	nsubjpass	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	hundreds	_	NNS	NNS	_	4	conj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	security	_	NN	NN	_	9	nn	_	_
9	personnel	_	NNS	NNS	_	7	pobj	_	_
10	have	_	VBP	VBP	_	12	aux	_	_
11	been	_	VBN	VBN	_	12	auxpass	_	_
12	killed	_	VBN	VBN	_	0	root	_	_
13	since	_	IN	IN	_	17	mark	_	_
14	the	_	DT	DT	_	16	det	_	_
15	Nepali	_	NNP	NNP	_	16	nn	_	_
16	government	_	NN	NN	_	17	nsubj	_	_
17	imposed	_	VBD	VBD	_	12	advcl	_	_
18	the	_	DT	DT	_	19	det	_	_
19	state	_	NN	NN	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	emergency	_	NN	NN	_	20	pobj	_	_
22	on	_	IN	IN	_	21	prep	_	_
23	26	_	CD	CD	_	22	pobj	_	_
24	November	_	NNP	NNP	_	21	tmod	_	_
25	2001	_	CD	CD	_	24	num	_	_
26	following	_	VBG	VBG	_	19	prep	_	_
27	a	_	DT	DT	_	28	det	_	_
28	series	_	NN	NN	_	26	pobj	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	attacks	_	NNS	NNS	_	29	pobj	_	_
31	by	_	IN	IN	_	17	prep	_	_
32	the	_	DT	DT	_	33	det	_	_
33	guerrillas	_	NNS	NNS	_	31	pobj	_	_
34	on	_	IN	IN	_	17	prep	_	_
35	government	_	NN	NN	_	37	nn	_	_
36	security	_	NN	NN	_	37	nn	_	_
37	forces	_	NNS	NNS	_	34	pobj	_	_
38	after	_	IN	IN	_	41	mark	_	_
39	the	_	DT	DT	_	40	det	_	_
40	guerrillas	_	NNS	NNS	_	41	nsubj	_	_
41	broke	_	VBD	VBD	_	17	advcl	_	_
42	4-month-long	_	JJ	JJ	_	44	amod	_	_
43	cease-fire	_	NN	NN	_	44	nn	_	_
44	talks	_	NNS	NNS	_	41	dobj	_	_
45	with	_	IN	IN	_	41	prep	_	_
46	the	_	DT	DT	_	47	det	_	_
47	government	_	NN	NN	_	45	pobj	_	_
48	on	_	IN	IN	_	41	prep	_	_
49	23	_	CD	CD	_	48	pobj	_	_
50	November	_	NNP	NNP	_	41	tmod	_	_
51	2001	_	CD	CD	_	50	num	_	_
52	.	_	.	.	_	12	punct	_	_

Oracle:
(a / and, op, g / guerrilla)
(a / and, op, p / person)
(a2 / attack-01, ARG0, g / guerrilla)
(a2 / attack-01, ARG1, f2 / force)
(a2 / attack-01, quant, s4 / series)
(a2 / attack-01, time, a3 / after)
(a3 / after, op, b / break-01)
(b / break-01, ARG0, g / guerrilla)
(b / break-01, ARG1, t2 / talk-01)
(b / break-01, time, d2 / date-entity)
(c / country, name, n / name)
(c2 / cease-01, ARG1, f3 / fire-01)
(d / date-entity, day, 26)
(d / date-entity, month, 11)
(d / date-entity, year, 2001)
(d2 / date-entity, day, 23)
(d2 / date-entity, month, 11)
(d2 / date-entity, year, 2001)
(f / follow-01, ARG1, i / impose-01)
(f / follow-01, ARG2, a2 / attack-01)
(f2 / force, mod, g2 / government-organization)
(f2 / force, mod, s5 / security)
(g / guerrilla, quant, m / more-than)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, s / security)
(h / have-org-role-91, ARG2, p2 / personnel)
(i / impose-01, ARG0, g2 / government-organization)
(i / impose-01, ARG1, s3 / state)
(i / impose-01, time, d / date-entity)
(k / kill-01, ARG1, a / and)
(k / kill-01, time, s2 / since)
(m / more-than, op, 3 / 3700)
(n / name, op, "Nepal")
(s2 / since, op, i / impose-01)
(s3 / state, mod, e / emergency)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, m3 / month)
(t2 / talk-01, ARG0, g / guerrilla)
(t2 / talk-01, ARG1, c2 / cease-01)
(t2 / talk-01, ARG2, g2 / government-organization)
(t2 / talk-01, duration, t / temporal-quantity)

Input(Some(Graph(null,ArrayBuffer(Span(54,57,List(3, 2, 1, 0),23 November 2001,(date-entity :day 23 :month 11 :year 2001),false), Span(49,50,List(4),talks,talk-01,false), Span(46,47,List(5),cease,cease-01,false), Span(39,40,List(6),guerrillas,guerrilla,false), Span(37,38,List(7),after,after,false), Span(32,33,List(8),guerrillas,guerrilla,false), Span(29,30,List(9),attacks,attack-01,false), Span(27,28,List(10),series,series,false), Span(22,25,List(14, 13, 12, 11),26 November 2001,(date-entity :day 26 :month 11 :year 2001),false), Span(20,21,List(15),emergency,emergency,false), Span(16,17,List(16),imposed,impose-01,false), Span(12,13,List(17),since,since,false), Span(11,12,List(18),killed,kill-01,false), Span(3,4,List(19),guerrillas,guerrilla,false), Span(2,3,List(21, 20),3700,(date-entity :year 3700),false), Span(0,1,List(22),More,more-than,false)),Map(2 -> 11, 5 -> cease-01, 12 -> 26, 15 -> emergency, 8 -> guerrilla, 21 -> 3700, 18 -> kill-01, 7 -> after, 17 -> since, 1 -> 23, 4 -> talk-01, 11 -> date-entity, 14 -> 2001, 20 -> date-entity, 6 -> guerrilla, 22 -> more-than, 0 -> date-entity, 9 -> attack-01, 16 -> impose-01, 19 -> guerrilla, 3 -> 2001, 10 -> series, 13 -> 11),Map(e -> emergency, g3 -> guerrilla, 2 -> 23, s2 -> since, k -> kill-01, 12 -> 11, t -> talk-01, d3 -> date-entity, 24 -> 2001, s -> series, m -> more-than, d -> date-entity, 1 -> 11, g2 -> guerrilla, g -> guerrilla, 23 -> 26, a -> after, d2 -> date-entity, i -> impose-01, a2 -> attack-01, c -> cease-01, 22 -> 2001, 3 -> 3700))),[Ljava.lang.String;@3baf6936,Annotation([Ljava.lang.String;@285f38f6,[Ljava.lang.String;@4e1459ea,[Ljava.lang.String;@3ab6678b),Annotation([Ljava.lang.String;@7a904f32,[Ljava.lang.String;@2b59501e,[Ledu.cmu.lti.nlp.amr.Dependency;@476e8796),Annotation([Ljava.lang.String;@4eed2acf,[Ljava.lang.String;@36fc05ff,[Ljava.lang.String;@57c47a9e),Annotation([Ljava.lang.String;@642505c7,[Ljava.lang.String;@4339e0de,[Ledu.cmu.lti.nlp.amr.Entity;@153cd6bb))
AMR:
(a / after, op, t / talk-01)
(a2 / attack-01, ARG0, g2 / guerrilla)
(a2 / attack-01, ARG1, d / date-entity)
(a2 / attack-01, quant, s / series)
(d / date-entity, day, 2 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2001)
(d2 / date-entity, day, 23 / 26)
(d2 / date-entity, month, 12 / 11)
(d2 / date-entity, year, 24 / 2001)
(d3 / date-entity, year, 3 / 3700)
(e / emergency, time, d2 / date-entity)
(g3 / guerrilla, quant, m / more-than)
(i / impose-01, ARG0, g3 / guerrilla)
(i / impose-01, ARG2, g2 / guerrilla)
(i / impose-01, purpose, e / emergency)
(i / impose-01, time, a / after)
(k / kill-01, time, s2 / since)
(m / more-than, op, d3 / date-entity)
(s2 / since, op, i / impose-01)
(t / talk-01, ARG0, g / guerrilla)
(t / talk-01, topic, c / cease-01)

Decoded in 1,755,171 microseconds
Sentence: 2002-11-23

mkDayMonthYear(2002-11-23,23,11,2002)
mkDayMonthYear(2002-11-23,23,11,2002)
Spans:
Span 0-1:  2002-11-23 => (date-entity :day 23 :month 11 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2002-11-23 => (date-entity :year 2002 :month 11 :day 23)

Incorrect span: 2002-11-23 => (date-entity :day 23 :month 11 :year 2002)
Missing span: 2002-11-23 => (date-entity :year 2002 :month 11 :day 23)
Dependencies:
1	2002-11-23	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 23)
(d / date-entity, month, 11)
(d / date-entity, year, 2002)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-11-23,(date-entity :day 23 :month 11 :year 2002),false)),Map(2 -> 11, 1 -> 23, 0 -> date-entity, 3 -> 2002),Map(2 -> 23, d -> date-entity, 1 -> 11, 22 -> 2002))),[Ljava.lang.String;@61d84e08,Annotation([Ljava.lang.String;@2d9f64c9,[Ljava.lang.String;@21ac5eb4,[Ljava.lang.String;@52d6cd34),Annotation([Ljava.lang.String;@715d6168,[Ljava.lang.String;@27b2faa6,[Ledu.cmu.lti.nlp.amr.Dependency;@6428591a),Annotation([Ljava.lang.String;@7397c6,[Ljava.lang.String;@1abfe081,[Ljava.lang.String;@2a685eba),Annotation([Ljava.lang.String;@c2e3264,[Ljava.lang.String;@107f4980,[Ledu.cmu.lti.nlp.amr.Entity;@75a118e6))
AMR:
(d / date-entity, day, 2 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2002)

Decoded in 8,876 microseconds
Sentence: China (CN); Russian Federation (RU); Kazakhstan (KZ); Kyrgyzstan (KG); Tajikistan (TJ); Uzbekistan (UZ)

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Russian" :op "Federation"))
NER Entity: (country :name (name :op "Kazakhstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Tajikistan"))
NER Entity: (country :name (name :op "Uzbekistan"))
NER Entity: (country :name (name :op "UZ"))
NER Entity: (country :name (name :op "Uzbekistan"))
NER Entity: (country :name (name :op "Tajikistan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kazakhstan"))
Spans:
Span 25-26:  ; => and
Span 20-21:  ; => and
Span 15-16:  ; => and
Span 10-11:  ; => and
Span 4-5:  ; => and
Span 11-12:  Kazakhstan => (country :name (name :op "Kazakhstan"))
Span 16-17:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 5-7:  Russian Federation => (country :name (name :op "Russian" :op "Federation"))
Span 21-22:  Tajikistan => (country :name (name :op "Tajikistan"))
Span 26-27:  Uzbekistan => (country :name (name :op "Uzbekistan"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  ; => and
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 11-12:  Kazakhstan => (country :name (name :op "Kazakhstan"))
Oracle Span 16-17:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 5-7:  Russian Federation => (country :name (name :op "Federation" :op "Russian"))
Oracle Span 21-22:  Tajikistan => (country :name (name :op "Tajikistan"))
Oracle Span 26-27:  Uzbekistan => (country :name (name :op "Uzbekistan"))

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Incorrect span: Russian Federation => (country :name (name :op "Russian" :op "Federation"))
Missing span: China => (country :name (name :op "China"))
Missing span: Russian Federation => (country :name (name :op "Federation" :op "Russian"))
Dependencies:
1	China	_	NNP	NNP	_	3	nn	_	_
2	(	_	(	(	_	3	punct	_	_
3	CN	_	NN	NN	_	0	root	_	_
4	)	_	)	)	_	3	punct	_	_
5	;	_	:	:	_	3	punct	_	_
6	Russian	_	NNP	NNP	_	7	nn	_	_
7	Federation	_	NNP	NNP	_	3	dep	_	_
8	(	_	(	(	_	9	punct	_	_
9	RU	_	NNP	NNP	_	7	appos	_	_
10	)	_	)	)	_	9	punct	_	_
11	;	_	:	:	_	7	punct	_	_
12	Kazakhstan	_	NNP	NNP	_	7	dep	_	_
13	(	_	(	(	_	14	punct	_	_
14	KZ	_	NNP	NNP	_	12	appos	_	_
15	)	_	)	)	_	14	punct	_	_
16	;	_	:	:	_	7	punct	_	_
17	Kyrgyzstan	_	NNP	NNP	_	7	dep	_	_
18	(	_	(	(	_	19	punct	_	_
19	KG	_	NNP	NNP	_	17	appos	_	_
20	)	_	)	)	_	19	punct	_	_
21	;	_	:	:	_	7	punct	_	_
22	Tajikistan	_	NNP	NNP	_	7	dep	_	_
23	(	_	(	(	_	24	punct	_	_
24	TJ	_	NNP	NNP	_	22	appos	_	_
25	)	_	)	)	_	24	punct	_	_
26	;	_	:	:	_	7	punct	_	_
27	Uzbekistan	_	NNP	NNP	_	7	dep	_	_
28	(	_	(	(	_	29	punct	_	_
29	UZ	_	NNP	NNP	_	27	appos	_	_
30	)	_	)	)	_	29	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(a / and, op, c6 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(n / name, op, "China")
(n2 / name, op, "Federation")
(n2 / name, op, "Russian")
(n3 / name, op, "Kazakhstan")
(n4 / name, op, "Kyrgyzstan")
(n5 / name, op, "Tajikistan")
(n6 / name, op, "Uzbekistan")

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(2, 1, 0),Uzbekistan,(country :name (name :op "Uzbekistan")),false), Span(25,26,List(3),;,and,false), Span(21,22,List(6, 5, 4),Tajikistan,(country :name (name :op "Tajikistan")),false), Span(20,21,List(7),;,and,false), Span(16,17,List(10, 9, 8),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(15,16,List(11),;,and,false), Span(11,12,List(14, 13, 12),Kazakhstan,(country :name (name :op "Kazakhstan")),false), Span(10,11,List(15),;,and,false), Span(5,7,List(19, 18, 17, 16),Russian Federation,(country :name (name :op "Russian" :op "Federation")),false), Span(4,5,List(20),;,and,false)),Map(2 -> "Uzbekistan", 5 -> name, 12 -> country, 15 -> and, 8 -> country, 18 -> "Russian", 7 -> and, 17 -> name, 1 -> name, 4 -> country, 11 -> and, 14 -> "Kazakhstan", 20 -> and, 6 -> "Tajikistan", 0 -> country, 9 -> name, 16 -> country, 19 -> "Federation", 3 -> and, 10 -> "Kyrgyzstan", 13 -> name),Map(n -> name, a3 -> and, c4 -> country, n4 -> name, a -> and, c3 -> country, n3 -> name, a5 -> and, a2 -> and, c -> country, c2 -> country, n2 -> name, a4 -> and, n5 -> name, c5 -> country))),[Ljava.lang.String;@1d540566,Annotation([Ljava.lang.String;@6014a9ba,[Ljava.lang.String;@acdcf71,[Ljava.lang.String;@77d680e6),Annotation([Ljava.lang.String;@4a14c44f,[Ljava.lang.String;@f08fdce,[Ledu.cmu.lti.nlp.amr.Dependency;@6bda1d19),Annotation([Ljava.lang.String;@28c86134,[Ljava.lang.String;@4492eede,[Ljava.lang.String;@cbc8d0f),Annotation([Ljava.lang.String;@37b57b54,[Ljava.lang.String;@5c1f6d57,[Ledu.cmu.lti.nlp.amr.Entity;@f288c14))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, c2 / country)
(a3 / and, op, a2 / and)
(a3 / and, op, c3 / country)
(a4 / and, op, a3 / and)
(a4 / and, op, c4 / country)
(a5 / and, op, a4 / and)
(a5 / and, op, c / country)
(a5 / and, op, c5 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(n / name, op, "Uzbekistan")
(n2 / name, op, "Tajikistan")
(n3 / name, op, "Kyrgyzstan")
(n4 / name, op, "Kazakhstan")
(n5 / name, op, "Federation")
(n5 / name, op, "Russian")

Decoded in 184,832 microseconds
Sentence: International; terrorism; politics

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  politics => politics
Span 2-3:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 0-1:  International => international
Oracle Span 4-5:  politics => politics
Oracle Span 2-3:  terrorism => terrorism

Extra span: ; => and
Missing span: International => international
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	terrorism	_	NN	NN	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	politics	_	NNS	NNS	_	3	dep	_	_

Oracle:
(a / and, op, i / international)
(a / and, op, p / politics)
(a / and, op, t / terrorism)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),politics,politics,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),terrorism,terrorism,false), Span(1,2,List(3),;,and,false)),Map(2 -> terrorism, 1 -> and, 0 -> politics, 3 -> and),Map(t -> terrorism, p -> politics, a -> and, a2 -> and))),[Ljava.lang.String;@6794ac0b,Annotation([Ljava.lang.String;@7be71476,[Ljava.lang.String;@5cb5bb88,[Ljava.lang.String;@17b6d426),Annotation([Ljava.lang.String;@5580d62f,[Ljava.lang.String;@16872c4d,[Ledu.cmu.lti.nlp.amr.Dependency;@671facee),Annotation([Ljava.lang.String;@46a953cf,[Ljava.lang.String;@154bd49b,[Ljava.lang.String;@3a01773b),Annotation([Ljava.lang.String;@20e3c449,[Ljava.lang.String;@2c58dcb1,[Ledu.cmu.lti.nlp.amr.Entity;@67fc2aad))
AMR:
(a / and, op, t / terrorism)
(a2 / and, op, a / and)
(a2 / and, op, p / politics)

Decoded in 12,599 microseconds
Sentence: Chinese Foreign Minister Tang Jiaxuan reports that the member countries of the Shanghai Cooperation Organization will proceed with the construction of the SCO and begin anti-terrorism discussions at a meeting in Moscow on 23 November 2002.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Tang" :op "Jiaxuan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Moscow"))
mkDayMonthYear(23	November	2002,23,November,2002)
Spans:
Span 35-38:  23 November 2002 => (date-entity :day 23 :month 11 :year 2002)
Span 24-25:  begin => begin-01
Span 19-20:  construction => construct-01
Span 9-10:  countries => country
Span 28-29:  discussions => discuss-01
Span 8-9:  member => (have-org-role-91 :ARG2 member)
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 33-34:  Moscow => (city :name (name :op "Moscow"))
Span 12-15:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 3-5:  Tang Jiaxuan => (person :name (name :op "Tang" :op "Jiaxuan"))
Span 27-28:  terrorism => terrorism

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 35-38:  23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Oracle Span 23-24:  and => and
Oracle Span 25-26:  anti => oppose-01
Oracle Span 24-25:  begin => begin-01
Oracle Span 0-1:  Chinese => (country :name (name :op "China"))
Oracle Span 19-20:  construction => construct-01
Oracle Span 9-10:  countries => country
Oracle Span 28-29:  discussions => discuss-01
Oracle Span 1-2:  Foreign => foreign
Oracle Span 31-32:  meeting => meet-03
Oracle Span 8-9:  member => (have-org-role-91 :ARG2 member)
Oracle Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 33-34:  Moscow => (city :name (name :op "Moscow"))
Oracle Span 16-17:  proceed => proceed-01
Oracle Span 5-6:  reports => report-01
Oracle Span 12-15:  Shanghai Cooperation Organization => (organization :name (name :op "Organization" :op "Cooperation" :op "Shanghai"))
Oracle Span 3-5:  Tang Jiaxuan => (person :name (name :op "Jiaxuan" :op "Tang"))
Oracle Span 27-28:  terrorism => terrorism

Incorrect span: 23 November 2002 => (date-entity :day 23 :month 11 :year 2002)
Incorrect span: Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Incorrect span: Tang Jiaxuan => (person :name (name :op "Tang" :op "Jiaxuan"))
Missing span: Tang Jiaxuan => (person :name (name :op "Jiaxuan" :op "Tang"))
Missing span: Shanghai Cooperation Organization => (organization :name (name :op "Organization" :op "Cooperation" :op "Shanghai"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: 23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Missing span: reports => report-01
Missing span: and => and
Missing span: meeting => meet-03
Missing span: anti => oppose-01
Missing span: proceed => proceed-01
Missing span: Foreign => foreign
Dependencies:
1	Chinese	_	NNP	NNP	_	5	nn	_	_
2	Foreign	_	NNP	NNP	_	5	nn	_	_
3	Minister	_	NNP	NNP	_	5	nn	_	_
4	Tang	_	NNP	NNP	_	5	nn	_	_
5	Jiaxuan	_	NNP	NNP	_	6	nsubj	_	_
6	reports	_	VBZ	VBZ	_	0	root	_	_
7	that	_	IN	IN	_	17	mark	_	_
8	the	_	DT	DT	_	10	det	_	_
9	member	_	NN	NN	_	10	nn	_	_
10	countries	_	NNS	NNS	_	17	nsubj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	15	det	_	_
13	Shanghai	_	NNP	NNP	_	15	nn	_	_
14	Cooperation	_	NNP	NNP	_	15	nn	_	_
15	Organization	_	NNP	NNP	_	11	pobj	_	_
16	will	_	MD	MD	_	17	aux	_	_
17	proceed	_	VB	VB	_	6	ccomp	_	_
18	with	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	construction	_	NN	NN	_	18	pobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	SCO	_	NNP	NNP	_	21	pobj	_	_
24	and	_	CC	CC	_	17	cc	_	_
25	begin	_	VB	VB	_	17	conj	_	_
26	anti-terrorism	_	JJ	JJ	_	27	amod	_	_
27	discussions	_	NNS	NNS	_	25	dobj	_	_
28	at	_	IN	IN	_	25	prep	_	_
29	a	_	DT	DT	_	30	det	_	_
30	meeting	_	NN	NN	_	28	pobj	_	_
31	in	_	IN	IN	_	30	prep	_	_
32	Moscow	_	NNP	NNP	_	31	pobj	_	_
33	on	_	IN	IN	_	25	prep	_	_
34	23	_	CD	CD	_	33	pobj	_	_
35	November	_	NNP	NNP	_	25	tmod	_	_
36	2002	_	CD	CD	_	35	num	_	_
37	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, b / begin-01)
(a / and, op, p / proceed-01)
(b / begin-01, ARG0, c3 / country)
(b / begin-01, ARG1, d2 / discuss-01)
(b / begin-01, time, m2 / meet-03)
(c / country, name, n2 / name)
(c2 / construct-01, ARG1, o / organization)
(c4 / city, name, n5 / name)
(d / date-entity, day, 23)
(d / date-entity, month, 11)
(d / date-entity, year, 2002)
(d2 / discuss-01, ARG0, c3 / country)
(d2 / discuss-01, ARG1, o3 / oppose-01)
(h / have-org-role-91, ARG0, c3 / country)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m3 / member)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, m / minister)
(m / minister, mod, f / foreign)
(m2 / meet-03, location, c4 / city)
(m2 / meet-03, time, d / date-entity)
(n / name, op, "Jiaxuan")
(n / name, op, "Tang")
(n2 / name, op, "China")
(n3 / name, op, "Cooperation")
(n3 / name, op, "Organization")
(n3 / name, op, "Shanghai")
(n5 / name, op, "Moscow")
(o / organization, name, n3 / name)
(o3 / oppose-01, ARG1, t / terrorism)
(p / proceed-01, ARG0, c3 / country)
(p / proceed-01, ARG1, c2 / construct-01)
(p2 / person, name, n / name)
(r / report-01, ARG0, p2 / person)
(r / report-01, ARG1, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(35,38,List(3, 2, 1, 0),23 November 2002,(date-entity :day 23 :month 11 :year 2002),false), Span(33,34,List(6, 5, 4),Moscow,(city :name (name :op "Moscow")),false), Span(28,29,List(7),discussions,discuss-01,false), Span(27,28,List(8),terrorism,terrorism,false), Span(24,25,List(9),begin,begin-01,false), Span(19,20,List(10),construction,construct-01,false), Span(12,15,List(15, 14, 13, 12, 11),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(9,10,List(16),countries,country,false), Span(8,9,List(18, 17),member,(have-org-role-91 :ARG2 member),false), Span(3,5,List(22, 21, 20, 19),Tang Jiaxuan,(person :name (name :op "Tang" :op "Jiaxuan")),false), Span(2,3,List(24, 23),Minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> 11, 5 -> name, 12 -> name, 8 -> terrorism, 15 -> "Organization", 21 -> "Tang", 18 -> member, 24 -> minister, 7 -> discuss-01, 1 -> 23, 17 -> have-org-role-91, 23 -> have-org-role-91, 4 -> city, 11 -> organization, 14 -> "Cooperation", 20 -> name, 6 -> "Moscow", 9 -> begin-01, 0 -> date-entity, 22 -> "Jiaxuan", 16 -> country, 19 -> person, 10 -> construct-01, 3 -> 2002, 13 -> "Shanghai"),Map(n -> name, h -> have-org-role-91, 2 -> 23, h2 -> have-org-role-91, t -> terrorism, b -> begin-01, m2 -> minister, m -> member, d -> date-entity, 1 -> 11, p -> person, n3 -> name, c3 -> country, d2 -> discuss-01, c -> city, 22 -> 2002, o -> organization, c2 -> construct-01, n2 -> name))),[Ljava.lang.String;@56f521c6,Annotation([Ljava.lang.String;@680a66dd,[Ljava.lang.String;@2dd8239,[Ljava.lang.String;@472698d),Annotation([Ljava.lang.String;@7b7683d4,[Ljava.lang.String;@40712ee9,[Ledu.cmu.lti.nlp.amr.Dependency;@2e53b094),Annotation([Ljava.lang.String;@39fa8ad2,[Ljava.lang.String;@76ddd61a,[Ljava.lang.String;@3f92a84e),Annotation([Ljava.lang.String;@cf67838,[Ljava.lang.String;@6137cf6e,[Ledu.cmu.lti.nlp.amr.Entity;@7942a854))
AMR:
(b / begin-01, ARG0, c3 / country)
(b / begin-01, ARG1, d2 / discuss-01)
(c / city, name, n / name)
(c2 / construct-01, ARG0, c3 / country)
(c2 / construct-01, ARG1, d / date-entity)
(d / date-entity, day, 2 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2002)
(d2 / discuss-01, ARG1, c / city)
(d2 / discuss-01, mod, t / terrorism)
(h / have-org-role-91, ARG0, c3 / country)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, c3 / country)
(h2 / have-org-role-91, ARG2, m2 / minister)
(n / name, op, "Moscow")
(n2 / name, op, "Cooperation")
(n2 / name, op, "Organization")
(n2 / name, op, "Shanghai")
(n3 / name, op, "Jiaxuan")
(n3 / name, op, "Tang")
(o / organization, name, n2 / name)
(p / person, name, n3 / name)

Decoded in 885,573 microseconds
Sentence: Chinese Foreign Minister Tang Jiaxuan stated on 23 November 2002 that the member States of the Shanghai Cooperation Organization (SCO) have progressed in the construction of the Organization and the cooperation among member nations.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Tang" :op "Jiaxuan"))
mkDayMonthYear(23	November	2002,23,November,2002)
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "Organization"))
Spans:
Span 7-10:  23 November 2002 => (date-entity :day 23 :month 11 :year 2002)
Span 26-27:  construction => construct-01
Span 32-33:  cooperation => cooperate-01
Span 34-35:  member => (have-org-role-91 :ARG2 member)
Span 12-13:  member => (have-org-role-91 :ARG2 member)
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 35-36:  nations => nation
Span 23-24:  progressed => (thing :ARG4-of progress-01)
Span 16-19:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 3-5:  Tang Jiaxuan => (person :name (name :op "Tang" :op "Jiaxuan"))

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 7-10:  23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Oracle Span 30-31:  and => and
Oracle Span 0-1:  Chinese => (country :name (name :op "China"))
Oracle Span 26-27:  construction => construct-01
Oracle Span 32-33:  cooperation => cooperate-01
Oracle Span 1-2:  Foreign => foreign
Oracle Span 22-23:  have => have-org-role-91
Oracle Span 12-13:  member => member
Oracle Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 35-36:  nations => nation
Oracle Span 29-30:  Organization => organization
Oracle Span 23-24:  progressed => progress-01
Oracle Span 16-19:  Shanghai Cooperation Organization => (name :op "Organization" :op "Cooperation" :op "Shanghai")
Oracle Span 5-6:  stated => state-01
Oracle Span 13-14:  States => state
Oracle Span 3-5:  Tang Jiaxuan => (person :name (name :op "Jiaxuan" :op "Tang"))

Extra span: member => (have-org-role-91 :ARG2 member)
Incorrect span: progressed => (thing :ARG4-of progress-01)
Incorrect span: Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Incorrect span: member => (have-org-role-91 :ARG2 member)
Incorrect span: 23 November 2002 => (date-entity :day 23 :month 11 :year 2002)
Incorrect span: Tang Jiaxuan => (person :name (name :op "Tang" :op "Jiaxuan"))
Missing span: Tang Jiaxuan => (person :name (name :op "Jiaxuan" :op "Tang"))
Missing span: Shanghai Cooperation Organization => (name :op "Organization" :op "Cooperation" :op "Shanghai")
Missing span: Chinese => (country :name (name :op "China"))
Missing span: 23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Missing span: stated => state-01
Missing span: progressed => progress-01
Missing span: and => and
Missing span: States => state
Missing span: Organization => organization
Missing span: member => member
Missing span: Foreign => foreign
Missing span: have => have-org-role-91
Dependencies:
1	Chinese	_	NNP	NNP	_	5	nn	_	_
2	Foreign	_	NNP	NNP	_	5	nn	_	_
3	Minister	_	NNP	NNP	_	5	nn	_	_
4	Tang	_	NNP	NNP	_	5	nn	_	_
5	Jiaxuan	_	NNP	NNP	_	6	nsubj	_	_
6	stated	_	VBD	VBD	_	0	root	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	23	_	CD	CD	_	7	pobj	_	_
9	November	_	NNP	NNP	_	6	tmod	_	_
10	2002	_	CD	CD	_	9	num	_	_
11	that	_	IN	IN	_	24	mark	_	_
12	the	_	DT	DT	_	14	det	_	_
13	member	_	NN	NN	_	14	nn	_	_
14	States	_	NNPS	NNPS	_	24	nsubj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	19	det	_	_
17	Shanghai	_	NNP	NNP	_	19	nn	_	_
18	Cooperation	_	NNP	NNP	_	19	nn	_	_
19	Organization	_	NNP	NNP	_	15	pobj	_	_
20	(	_	(	(	_	21	punct	_	_
21	SCO	_	NNP	NNP	_	19	appos	_	_
22	)	_	)	)	_	21	punct	_	_
23	have	_	VBP	VBP	_	24	aux	_	_
24	progressed	_	VBN	VBN	_	6	ccomp	_	_
25	in	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	construction	_	NN	NN	_	25	pobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	30	det	_	_
30	Organization	_	NNP	NNP	_	28	pobj	_	_
31	and	_	CC	CC	_	27	cc	_	_
32	the	_	DT	DT	_	33	det	_	_
33	cooperation	_	NN	NN	_	27	conj	_	_
34	among	_	IN	IN	_	33	prep	_	_
35	member	_	NN	NN	_	36	nn	_	_
36	nations	_	NNS	NNS	_	34	pobj	_	_
37	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, c2 / construct-01)
(a / and, op, c3 / cooperate-01)
(c / country, name, n2 / name)
(c2 / construct-01, ARG0, s2 / state)
(c2 / construct-01, ARG1, o / organization)
(c3 / cooperate-01, ARG0, n4 / nation)
(d3 / date-entity, day, 23)
(d3 / date-entity, month, 11)
(d3 / date-entity, year, 2002)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(h2 / have-org-role-91, ARG0, n4 / nation)
(h2 / have-org-role-91, ARG0, s2 / state)
(h2 / have-org-role-91, ARG1, o / organization)
(h2 / have-org-role-91, ARG2, m2 / member)
(m / minister, mod, f / foreign)
(n2 / name, op, "China")
(n3 / name, op, "Cooperation")
(n3 / name, op, "Organization")
(n3 / name, op, "Shanghai")
(n5 / name, op, "Jiaxuan")
(n5 / name, op, "Tang")
(o / organization, name, n3 / name)
(p / progress-01, ARG1, s2 / state)
(p / progress-01, topic, a / and)
(p2 / person, name, n5 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, p / progress-01)
(s / state-01, time, d3 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),nations,nation,false), Span(34,35,List(2, 1),member,(have-org-role-91 :ARG2 member),false), Span(32,33,List(3),cooperation,cooperate-01,false), Span(26,27,List(4),construction,construct-01,false), Span(23,24,List(6, 5),progressed,(thing :ARG4-of progress-01),false), Span(16,19,List(11, 10, 9, 8, 7),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(12,13,List(13, 12),member,(have-org-role-91 :ARG2 member),false), Span(7,10,List(17, 16, 15, 14),23 November 2002,(date-entity :day 23 :month 11 :year 2002),false), Span(3,5,List(21, 20, 19, 18),Tang Jiaxuan,(person :name (name :op "Tang" :op "Jiaxuan")),false), Span(2,3,List(23, 22),Minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> member, 5 -> thing, 12 -> have-org-role-91, 15 -> 23, 8 -> name, 21 -> "Jiaxuan", 18 -> person, 7 -> organization, 17 -> 2002, 1 -> have-org-role-91, 23 -> minister, 4 -> construct-01, 11 -> "Organization", 14 -> date-entity, 20 -> "Tang", 6 -> progress-01, 22 -> have-org-role-91, 0 -> nation, 9 -> "Shanghai", 16 -> 11, 19 -> name, 3 -> cooperate-01, 10 -> "Cooperation", 13 -> member),Map(m3 -> minister, n -> nation, h -> have-org-role-91, 2 -> 23, h2 -> have-org-role-91, t -> thing, m2 -> member, p2 -> person, m -> member, d -> date-entity, 1 -> 11, p -> progress-01, n3 -> name, h3 -> have-org-role-91, c -> cooperate-01, 22 -> 2002, o -> organization, c2 -> construct-01, n2 -> name))),[Ljava.lang.String;@53b8afea,Annotation([Ljava.lang.String;@6c302a1d,[Ljava.lang.String;@33a3c44a,[Ljava.lang.String;@5fcfca62),Annotation([Ljava.lang.String;@499ef98e,[Ljava.lang.String;@24934262,[Ledu.cmu.lti.nlp.amr.Dependency;@93f432e),Annotation([Ljava.lang.String;@288214b1,[Ljava.lang.String;@16eedaa6,[Ljava.lang.String;@28501a4b),Annotation([Ljava.lang.String;@5b051a5c,[Ljava.lang.String;@639aba11,[Ledu.cmu.lti.nlp.amr.Entity;@341672e))
AMR:
(c / cooperate-01, ARG0, n / nation)
(c2 / construct-01, ARG0, d / date-entity)
(c2 / construct-01, ARG1, c / cooperate-01)
(d / date-entity, day, 2 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2002)
(h / have-org-role-91, ARG0, n / nation)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(h2 / have-org-role-91, ARG1, o / organization)
(h2 / have-org-role-91, ARG2, m2 / member)
(h3 / have-org-role-91, ARG0, p2 / person)
(h3 / have-org-role-91, ARG1, o / organization)
(h3 / have-org-role-91, ARG2, m3 / minister)
(n2 / name, op, "Cooperation")
(n2 / name, op, "Organization")
(n2 / name, op, "Shanghai")
(n3 / name, op, "Jiaxuan")
(n3 / name, op, "Tang")
(o / organization, name, n2 / name)
(p / progress-01, ARG1, c2 / construct-01)
(p / progress-01, ARG4, t / thing)
(p2 / person, name, n3 / name)

Decoded in 420,107 microseconds
Sentence: Tang and 5 foreign ministers from Russia, Kazakhstan, Kyrgyzstan, Tajikistan and Uzbekistan will meet in Moscow on 23 November 2002 for discussions of the SCO's construction and a series of international and regional issues.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Kazakhstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Tajikistan"))
NER Entity: (country :name (name :op "Uzbekistan"))
NER Entity: (country :name (name :op "Moscow"))
mkDayMonthYear(23	November	2002,23,November,2002)
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Uzbekistan"))
NER Entity: (country :name (name :op "Tajikistan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kazakhstan"))
Spans:
Span 20-23:  23 November 2002 => (date-entity :day 23 :month 11 :year 2002)
Span 29-30:  construction => construct-01
Span 24-25:  discussions => discuss-01
Span 37-38:  issues => issue
Span 8-9:  Kazakhstan => (country :name (name :op "Kazakhstan"))
Span 10-11:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 18-19:  Moscow => (city :name (name :op "Moscow"))
Span 36-37:  regional => region
Span 32-33:  series => series
Span 12-13:  Tajikistan => (country :name (name :op "Tajikistan"))
Span 14-15:  Uzbekistan => (country :name (name :op "Uzbekistan"))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 20-23:  23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Oracle Span 2-3:  5 => 5
Oracle Span 1-2:  and => and
Oracle Span 13-14:  and => and
Oracle Span 29-30:  construction => construct-01
Oracle Span 24-25:  discussions => discuss-01
Oracle Span 3-4:  foreign => foreign
Oracle Span 34-35:  international => international
Oracle Span 37-38:  issues => issue
Oracle Span 8-9:  Kazakhstan => (have-org-role-91 :ARG1 (country :name (name :op "Kazakhstan")))
Oracle Span 10-11:  Kyrgyzstan => (have-org-role-91 :ARG1 (country :name (name :op "Kyrgyzstan")))
Oracle Span 16-17:  meet => meet-03
Oracle Span 4-5:  ministers => (have-org-role-91 :ARG2 minister)
Oracle Span 18-19:  Moscow => (city :name (name :op "Moscow"))
Oracle Span 36-37:  regional => region
Oracle Span 6-7:  Russia => (country :name (name :op "Russia"))
Oracle Span 27-28:  SCO => (organization :name (name :op "SCO"))
Oracle Span 32-33:  series => series
Oracle Span 12-13:  Tajikistan => (have-org-role-91 :ARG1 (country :name (name :op "Tajikistan")))
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 14-15:  Uzbekistan => (have-org-role-91 :ARG1 (country :name (name :op "Uzbekistan")))

Incorrect span: 23 November 2002 => (date-entity :day 23 :month 11 :year 2002)
Incorrect span: Uzbekistan => (country :name (name :op "Uzbekistan"))
Incorrect span: Tajikistan => (country :name (name :op "Tajikistan"))
Incorrect span: Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Incorrect span: Kazakhstan => (country :name (name :op "Kazakhstan"))
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: Kazakhstan => (have-org-role-91 :ARG1 (country :name (name :op "Kazakhstan")))
Missing span: Kyrgyzstan => (have-org-role-91 :ARG1 (country :name (name :op "Kyrgyzstan")))
Missing span: Tajikistan => (have-org-role-91 :ARG1 (country :name (name :op "Tajikistan")))
Missing span: Uzbekistan => (have-org-role-91 :ARG1 (country :name (name :op "Uzbekistan")))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: 23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Missing span: meet => meet-03
Missing span: and => and
Missing span: international => international
Missing span: and => and
Missing span: 5 => 5
Missing span: ministers => (have-org-role-91 :ARG2 minister)
Missing span: foreign => foreign
Dependencies:
1	Tang	_	VBG	VBG	_	17	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	5	_	CD	CD	_	5	num	_	_
4	foreign	_	JJ	JJ	_	5	amod	_	_
5	ministers	_	NNS	NNS	_	1	conj	_	_
6	from	_	IN	IN	_	5	prep	_	_
7	Russia	_	NNP	NNP	_	6	pobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	Kazakhstan	_	NNP	NNP	_	7	conj	_	_
10	,	_	,	,	_	7	punct	_	_
11	Kyrgyzstan	_	NNP	NNP	_	7	conj	_	_
12	,	_	,	,	_	7	punct	_	_
13	Tajikistan	_	NNP	NNP	_	7	conj	_	_
14	and	_	CC	CC	_	7	cc	_	_
15	Uzbekistan	_	NNP	NNP	_	7	conj	_	_
16	will	_	MD	MD	_	17	aux	_	_
17	meet	_	VB	VB	_	0	root	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	Moscow	_	NNP	NNP	_	18	pobj	_	_
20	on	_	IN	IN	_	17	prep	_	_
21	23	_	CD	CD	_	20	pobj	_	_
22	November	_	NNP	NNP	_	17	tmod	_	_
23	2002	_	CD	CD	_	22	num	_	_
24	for	_	IN	IN	_	17	prep	_	_
25	discussions	_	NNS	NNS	_	24	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	SCO	_	NNP	NNP	_	30	poss	_	_
29	's	_	POS	POS	_	28	possessive	_	_
30	construction	_	NN	NN	_	26	pobj	_	_
31	and	_	CC	CC	_	25	cc	_	_
32	a	_	DT	DT	_	33	det	_	_
33	series	_	NN	NN	_	25	conj	_	_
34	of	_	IN	IN	_	33	prep	_	_
35	international	_	JJ	JJ	_	38	amod	_	_
36	and	_	CC	CC	_	35	cc	_	_
37	regional	_	JJ	JJ	_	35	conj	_	_
38	issues	_	NNS	NNS	_	34	pobj	_	_
39	.	_	.	.	_	17	punct	_	_

Oracle:
(a / and, quant, 5 / 5)
(a2 / and, op, c7 / construct-01)
(a2 / and, op, i3 / issue)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(c5 / country, name, n6 / name)
(c6 / city, name, n7 / name)
(c7 / construct-01, ARG1, o / organization)
(d / date-entity, day, 23)
(d / date-entity, month, 11)
(d / date-entity, year, 2002)
(d2 / discuss-01, ARG1, a2 / and)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m2 / minister)
(h2 / have-org-role-91, ARG1, c3 / country)
(h2 / have-org-role-91, ARG2, m2 / minister)
(h3 / have-org-role-91, ARG1, c2 / country)
(h3 / have-org-role-91, ARG2, m2 / minister)
(h4 / have-org-role-91, ARG1, c4 / country)
(h4 / have-org-role-91, ARG2, m2 / minister)
(h5 / have-org-role-91, ARG1, c5 / country)
(h5 / have-org-role-91, ARG2, m2 / minister)
(i3 / issue, mod, r / region)
(i3 / issue, quant, s / series)
(m / meet-03, ARG0, p / person)
(m / meet-03, ARG1, a / and)
(m / meet-03, location, c6 / city)
(m / meet-03, purpose, d2 / discuss-01)
(m / meet-03, time, d / date-entity)
(m2 / minister, mod, f / foreign)
(n / name, op, "Tang")
(n2 / name, op, "Russia")
(n3 / name, op, "Kazakhstan")
(n4 / name, op, "Kyrgyzstan")
(n5 / name, op, "Tajikistan")
(n6 / name, op, "Uzbekistan")
(n7 / name, op, "Moscow")
(n8 / name, op, "SCO")
(o / organization, name, n8 / name)
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),issues,issue,false), Span(36,37,List(1),regional,region,false), Span(32,33,List(2),series,series,false), Span(29,30,List(3),construction,construct-01,false), Span(24,25,List(4),discussions,discuss-01,false), Span(20,23,List(8, 7, 6, 5),23 November 2002,(date-entity :day 23 :month 11 :year 2002),false), Span(18,19,List(11, 10, 9),Moscow,(city :name (name :op "Moscow")),false), Span(14,15,List(14, 13, 12),Uzbekistan,(country :name (name :op "Uzbekistan")),false), Span(12,13,List(17, 16, 15),Tajikistan,(country :name (name :op "Tajikistan")),false), Span(10,11,List(20, 19, 18),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(8,9,List(23, 22, 21),Kazakhstan,(country :name (name :op "Kazakhstan")),false)),Map(2 -> series, 5 -> date-entity, 12 -> country, 15 -> country, 8 -> 2002, 21 -> country, 18 -> country, 7 -> 11, 17 -> "Tajikistan", 1 -> region, 23 -> "Kazakhstan", 4 -> discuss-01, 11 -> "Moscow", 14 -> "Uzbekistan", 20 -> "Kyrgyzstan", 6 -> 23, 22 -> name, 0 -> issue, 9 -> city, 16 -> name, 19 -> name, 3 -> construct-01, 10 -> name, 13 -> name),Map(n -> name, 2 -> 23, n4 -> name, c4 -> country, s -> series, d -> discuss-01, 1 -> 11, n3 -> name, c3 -> country, d2 -> date-entity, c6 -> country, i -> issue, r -> region, c -> construct-01, 22 -> 2002, c2 -> city, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@2bebb74f,Annotation([Ljava.lang.String;@58cf8f94,[Ljava.lang.String;@6e33fcae,[Ljava.lang.String;@66c38e51),Annotation([Ljava.lang.String;@10641c09,[Ljava.lang.String;@34f392be,[Ledu.cmu.lti.nlp.amr.Dependency;@4554de02),Annotation([Ljava.lang.String;@3f9f71ff,[Ljava.lang.String;@fabb651,[Ljava.lang.String;@27e5b378),Annotation([Ljava.lang.String;@4422dd48,[Ljava.lang.String;@764cba,[Ledu.cmu.lti.nlp.amr.Entity;@523d6bdb))
AMR:
(c / construct-01, ARG0, d2 / date-entity)
(c / construct-01, ARG1, c2 / city)
(c / construct-01, location, c3 / country)
(c / construct-01, location, c5 / country)
(c / construct-01, location, c6 / country)
(c2 / city, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(c5 / country, name, n4 / name)
(c6 / country, name, n5 / name)
(d / discuss-01, ARG1, c / construct-01)
(d / discuss-01, ARG2, c4 / country)
(d2 / date-entity, day, 2 / 23)
(d2 / date-entity, month, 1 / 11)
(d2 / date-entity, year, 22 / 2002)
(i / issue, mod, r / region)
(i / issue, quant, s / series)
(n / name, op, "Moscow")
(n2 / name, op, "Uzbekistan")
(n3 / name, op, "Tajikistan")
(n4 / name, op, "Kyrgyzstan")
(n5 / name, op, "Kazakhstan")
(r / region, poss, c3 / country)

Decoded in 473,445 microseconds
Sentence: Tang stated that mechanism construction is the current focus for SCO and that preparation work for creating a secretariat had entered a key stage under the joint efforts of coordinators and experts from the 6 countries.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
Spans:
Span 4-5:  construction => construct-01
Span 35-36:  countries => country
Span 16-17:  creating => create-01
Span 7-8:  current => current
Span 27-28:  efforts => effort
Span 20-21:  entered => enter-01
Span 8-9:  focus => focus-01
Span 26-27:  joint => joint
Span 22-23:  key => key
Span 3-4:  mechanism => mechanism
Span 18-19:  secretariat => secretariat
Span 23-24:  stage => stage

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 34-35:  6 => 6
Oracle Span 11-12:  and => and
Oracle Span 30-31:  and => and
Oracle Span 4-5:  construction => construct-01
Oracle Span 29-30:  coordinators => (person :ARG0-of coordinate-01)
Oracle Span 35-36:  countries => country
Oracle Span 16-17:  creating => create-01
Oracle Span 7-8:  current => current
Oracle Span 27-28:  efforts => effort
Oracle Span 20-21:  entered => enter-01
Oracle Span 31-32:  experts => (person :ARG1-of expert-41)
Oracle Span 8-9:  focus => focus-01
Oracle Span 26-27:  joint => joint
Oracle Span 22-23:  key => key
Oracle Span 3-4:  mechanism => mechanism
Oracle Span 13-14:  preparation => prepare-02
Oracle Span 10-11:  SCO => (organization :name (name :op "SCO"))
Oracle Span 18-19:  secretariat => secretariat
Oracle Span 23-24:  stage => stage
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 14-15:  work => work-01

Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: stated => state-01
Missing span: and => and
Missing span: and => and
Missing span: 6 => 6
Missing span: experts => (person :ARG1-of expert-41)
Missing span: work => work-01
Missing span: coordinators => (person :ARG0-of coordinate-01)
Missing span: preparation => prepare-02
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	9	mark	_	_
4	mechanism	_	NN	NN	_	5	nn	_	_
5	construction	_	NN	NN	_	9	nsubj	_	_
6	is	_	VBZ	VBZ	_	9	cop	_	_
7	the	_	DT	DT	_	9	det	_	_
8	current	_	JJ	JJ	_	9	amod	_	_
9	focus	_	NN	NN	_	2	ccomp	_	_
10	for	_	IN	IN	_	9	prep	_	_
11	SCO	_	NNP	NNP	_	10	pobj	_	_
12	and	_	CC	CC	_	9	cc	_	_
13	that	_	IN	IN	_	21	mark	_	_
14	preparation	_	NN	NN	_	15	nn	_	_
15	work	_	NN	NN	_	21	nsubj	_	_
16	for	_	IN	IN	_	15	prep	_	_
17	creating	_	VBG	VBG	_	16	pcomp	_	_
18	a	_	DT	DT	_	19	det	_	_
19	secretariat	_	NN	NN	_	17	dobj	_	_
20	had	_	VBD	VBD	_	21	aux	_	_
21	entered	_	VBN	VBN	_	9	conj	_	_
22	a	_	DT	DT	_	24	det	_	_
23	key	_	JJ	JJ	_	24	amod	_	_
24	stage	_	NN	NN	_	21	dobj	_	_
25	under	_	IN	IN	_	21	prep	_	_
26	the	_	DT	DT	_	28	det	_	_
27	joint	_	JJ	JJ	_	28	amod	_	_
28	efforts	_	NNS	NNS	_	25	pobj	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	coordinators	_	NNS	NNS	_	29	pobj	_	_
31	and	_	CC	CC	_	30	cc	_	_
32	experts	_	NNS	NNS	_	30	conj	_	_
33	from	_	IN	IN	_	21	prep	_	_
34	the	_	DT	DT	_	36	det	_	_
35	6	_	CD	CD	_	36	num	_	_
36	countries	_	NNS	NNS	_	33	pobj	_	_
37	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, e / enter-01)
(a / and, op, f / focus-01)
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / person)
(a2 / and, source, c5 / country)
(c / construct-01, ARG1, m / mechanism)
(c3 / create-01, ARG1, s2 / secretariat)
(c5 / country, quant, 6 / 6)
(c6 / coordinate-01, ARG0, p4 / person)
(e / enter-01, ARG0, w / work-01)
(e / enter-01, ARG1, s3 / stage)
(e / enter-01, prep-under, e2 / effort)
(e2 / effort, mod, j / joint)
(e2 / effort, poss, a2 / and)
(e3 / expert-41, ARG1, p3 / person)
(f / focus-01, ARG0, o / organization)
(f / focus-01, ARG1, c / construct-01)
(f / focus-01, time, c2 / current)
(n / name, op, "Tang")
(n2 / name, op, "SCO")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(p2 / prepare-02, ARG2, c3 / create-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s3 / stage, mod, k / key)
(w / work-01, ARG1, p2 / prepare-02)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),countries,country,false), Span(27,28,List(1),efforts,effort,false), Span(26,27,List(2),joint,joint,false), Span(23,24,List(3),stage,stage,false), Span(22,23,List(4),key,key,false), Span(20,21,List(5),entered,enter-01,false), Span(18,19,List(6),secretariat,secretariat,false), Span(16,17,List(7),creating,create-01,false), Span(8,9,List(8),focus,focus-01,false), Span(7,8,List(9),current,current,false), Span(4,5,List(10),construction,construct-01,false), Span(3,4,List(11),mechanism,mechanism,false)),Map(2 -> joint, 5 -> enter-01, 8 -> focus-01, 7 -> create-01, 1 -> effort, 11 -> mechanism, 4 -> key, 6 -> secretariat, 9 -> current, 0 -> country, 10 -> construct-01, 3 -> stage),Map(e -> effort, s2 -> secretariat, k -> key, e2 -> enter-01, c4 -> construct-01, s -> stage, j -> joint, m -> mechanism, c3 -> current, c -> country, f -> focus-01, c2 -> create-01))),[Ljava.lang.String;@58496c97,Annotation([Ljava.lang.String;@ad3324b,[Ljava.lang.String;@3872bc37,[Ljava.lang.String;@1a87b51),Annotation([Ljava.lang.String;@12968227,[Ljava.lang.String;@144ab54,[Ledu.cmu.lti.nlp.amr.Dependency;@2cfa2c4f),Annotation([Ljava.lang.String;@6ecab872,[Ljava.lang.String;@48eb9836,[Ljava.lang.String;@6c518474),Annotation([Ljava.lang.String;@11b455e5,[Ljava.lang.String;@2a066689,[Ledu.cmu.lti.nlp.amr.Entity;@3e3861d7))
AMR:
(c2 / create-01, ARG1, s2 / secretariat)
(c4 / construct-01, ARG1, m / mechanism)
(e / effort, mod, j / joint)
(e2 / enter-01, ARG0, c4 / construct-01)
(e2 / enter-01, ARG1, s / stage)
(e2 / enter-01, ARG2, e / effort)
(e2 / enter-01, source, c / country)
(f / focus-01, ARG0, c4 / construct-01)
(f / focus-01, ARG1, s2 / secretariat)
(f / focus-01, time, c3 / current)
(s / stage, mod, k / key)

Decoded in 512,398 microseconds
Sentence: Tang also stated the Chinese government seeks to complete the drafting of relevant documents before next year's SCO summit and to attempt to officially open the secretariat after the summit.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (organization :name (name :op "SCO"))
Spans:
Span 28-29:  after => after
Span 22-23:  attempt => attempt-01
Span 14-15:  before => before
Span 13-14:  documents => document
Span 15-16:  next => next
Span 24-25:  officially => official
Span 12-13:  relevant => relevant-41
Span 27-28:  secretariat => secretariat
Span 6-7:  seeks => seek-01
Span 30-31:  summit => summit
Span 19-20:  summit => summit

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 28-29:  after => after
Oracle Span 1-2:  also => also
Oracle Span 20-21:  and => and
Oracle Span 22-23:  attempt => attempt-01
Oracle Span 14-15:  before => before
Oracle Span 4-5:  Chinese => (country :name (name :op "China"))
Oracle Span 8-9:  complete => complete-01
Oracle Span 13-14:  documents => document
Oracle Span 10-11:  drafting => draft-01
Oracle Span 5-6:  government => (government-organization :ARG0-of govern-01)
Oracle Span 15-16:  next => next
Oracle Span 24-25:  officially => official
Oracle Span 25-26:  open => open-01
Oracle Span 12-13:  relevant => relevant-41
Oracle Span 18-19:  SCO => (organization :name (name :op "SCO"))
Oracle Span 27-28:  secretariat => secretariat
Oracle Span 6-7:  seeks => seek-01
Oracle Span 2-3:  stated => state-01
Oracle Span 19-20:  summit => summit
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 16-17:  year => year

Extra span: summit => summit
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: also => also
Missing span: and => and
Missing span: open => open-01
Missing span: complete => complete-01
Missing span: year => year
Missing span: drafting => draft-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Tang	_	NNP	NNP	_	3	nsubj	_	_
2	also	_	RB	RB	_	3	advmod	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Chinese	_	JJ	JJ	_	6	amod	_	_
6	government	_	NN	NN	_	7	nsubj	_	_
7	seeks	_	VBZ	VBZ	_	3	ccomp	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	complete	_	VB	VB	_	7	ccomp	_	_
10	the	_	DT	DT	_	11	det	_	_
11	drafting	_	NN	NN	_	9	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	relevant	_	JJ	JJ	_	14	amod	_	_
14	documents	_	NNS	NNS	_	12	pobj	_	_
15	before	_	IN	IN	_	9	prep	_	_
16	next	_	JJ	JJ	_	17	amod	_	_
17	year	_	NN	NN	_	20	poss	_	_
18	's	_	POS	POS	_	17	possessive	_	_
19	SCO	_	NNP	NNP	_	20	nn	_	_
20	summit	_	NN	NN	_	15	pobj	_	_
21	and	_	CC	CC	_	9	cc	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	attempt	_	VB	VB	_	9	conj	_	_
24	to	_	TO	TO	_	26	aux	_	_
25	officially	_	RB	RB	_	26	advmod	_	_
26	open	_	VB	VB	_	23	xcomp	_	_
27	the	_	DT	DT	_	28	det	_	_
28	secretariat	_	NN	NN	_	26	dobj	_	_
29	after	_	IN	IN	_	26	prep	_	_
30	the	_	DT	DT	_	31	det	_	_
31	summit	_	NN	NN	_	29	pobj	_	_
32	.	_	.	.	_	3	punct	_	_

Oracle:
(a2 / and, op, a3 / attempt-01)
(a2 / and, op, c2 / complete-01)
(a3 / attempt-01, ARG0, g / government-organization)
(a3 / attempt-01, ARG1, o / open-01)
(a3 / attempt-01, time, a4 / after)
(a4 / after, op, s3 / summit)
(b / before, op, s3 / summit)
(c / country, name, n2 / name)
(c2 / complete-01, ARG0, g / government-organization)
(c2 / complete-01, ARG1, d / draft-01)
(c2 / complete-01, time, b / before)
(d / draft-01, ARG0, g / government-organization)
(d / draft-01, ARG1, d2 / document)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "Tang")
(n2 / name, op, "China")
(n4 / name, op, "SCO")
(o / open-01, ARG0, g / government-organization)
(o / open-01, ARG1, s4 / secretariat)
(o / open-01, mod, o3 / official)
(o2 / organization, name, n4 / name)
(p / person, name, n / name)
(r / relevant-41, ARG1, d2 / document)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, s2 / seek-01)
(s / state-01, mod, a / also)
(s2 / seek-01, ARG0, g / government-organization)
(s2 / seek-01, ARG1, a2 / and)
(s3 / summit, mod, o2 / organization)
(s3 / summit, time, y / year)
(y / year, mod, n3 / next)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),summit,summit,false), Span(28,29,List(1),after,after,false), Span(27,28,List(2),secretariat,secretariat,false), Span(24,25,List(3),officially,official,false), Span(22,23,List(4),attempt,attempt-01,false), Span(19,20,List(5),summit,summit,false), Span(15,16,List(6),next,next,false), Span(14,15,List(7),before,before,false), Span(13,14,List(8),documents,document,false), Span(12,13,List(9),relevant,relevant-41,false), Span(6,7,List(10),seeks,seek-01,false)),Map(2 -> secretariat, 5 -> summit, 8 -> document, 7 -> before, 1 -> after, 4 -> attempt-01, 6 -> next, 9 -> relevant-41, 0 -> summit, 10 -> seek-01, 3 -> official),Map(n -> next, b -> before, s2 -> secretariat, s -> summit, s4 -> seek-01, d -> document, a -> after, r -> relevant-41, a2 -> attempt-01, s3 -> summit, o -> official))),[Ljava.lang.String;@5e2a3040,Annotation([Ljava.lang.String;@6d025d1d,[Ljava.lang.String;@74294c1a,[Ljava.lang.String;@9e2ad91),Annotation([Ljava.lang.String;@64524dd,[Ljava.lang.String;@79d06bbd,[Ledu.cmu.lti.nlp.amr.Dependency;@47a7a101),Annotation([Ljava.lang.String;@5bb51241,[Ljava.lang.String;@7479b626,[Ljava.lang.String;@e8ea697),Annotation([Ljava.lang.String;@74dbb1ee,[Ljava.lang.String;@70f822e,[Ledu.cmu.lti.nlp.amr.Entity;@3efedc6f))
AMR:
(a / after, mod, o / official)
(a / after, op, s / summit)
(a2 / attempt-01, ARG0, n / next)
(a2 / attempt-01, ARG1, d / document)
(a2 / attempt-01, time, a / after)
(b / before, op, s3 / summit)
(d / document, time, b / before)
(r / relevant-41, ARG1, d / document)
(s2 / secretariat, time, a / after)
(s4 / seek-01, ARG1, b / before)

Decoded in 188,221 microseconds
Sentence: Tang stated the SCO still faces a very stern anti-terrorism fight and cited the October 2002 hostage crisis in Moscow.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
Spans:
Span 14-15:  cited => cite-01
Span 19-20:  crisis => crisis
Span 5-6:  faces => face-01
Span 12-13:  fight => fight-01
Span 18-19:  hostage => hostage
Span 21-22:  Moscow => (city :name (name :op "Moscow"))
Span 16-18:  October 2002 => (date-entity :month 10 :year 2002)
Span 8-9:  stern => stern
Span 4-5:  still => still
Span 11-12:  terrorism => terrorism
Span 7-8:  very => very

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 14-15:  cited => cite-01
Oracle Span 19-20:  crisis => crisis
Oracle Span 5-6:  faces => face-01
Oracle Span 12-13:  fight => fight-01
Oracle Span 18-19:  hostage => hostage
Oracle Span 21-22:  Moscow => (city :name (name :op "Moscow"))
Oracle Span 16-18:  October 2002 => (date-entity :year 2002 :month 10)
Oracle Span 3-4:  SCO => (organization :name (name :op "SCO"))
Oracle Span 1-2:  stated => state-01
Oracle Span 8-9:  stern => stern
Oracle Span 4-5:  still => still
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 11-12:  terrorism => terrorism
Oracle Span 7-8:  very => very

Incorrect span: October 2002 => (date-entity :month 10 :year 2002)
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: October 2002 => (date-entity :year 2002 :month 10)
Missing span: and => and
Missing span: stated => state-01
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	SCO	_	NNP	NNP	_	6	nsubj	_	_
5	still	_	RB	RB	_	6	advmod	_	_
6	faces	_	VBZ	VBZ	_	2	ccomp	_	_
7	a	_	DT	DT	_	11	det	_	_
8	very	_	RB	RB	_	9	advmod	_	_
9	stern	_	JJ	JJ	_	11	amod	_	_
10	anti-terrorism	_	JJ	JJ	_	11	amod	_	_
11	fight	_	NN	NN	_	6	dobj	_	_
12	and	_	CC	CC	_	6	cc	_	_
13	cited	_	VBD	VBD	_	6	conj	_	_
14	the	_	DT	DT	_	18	det	_	_
15	October	_	NNP	NNP	_	18	nn	_	_
16	2002	_	CD	CD	_	18	num	_	_
17	hostage	_	NN	NN	_	18	nn	_	_
18	crisis	_	NN	NN	_	13	dobj	_	_
19	in	_	IN	IN	_	18	prep	_	_
20	Moscow	_	NNP	NNP	_	19	pobj	_	_
21	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c2 / cite-01)
(a / and, op, s / state-01)
(c2 / cite-01, ARG0, p / person)
(c2 / cite-01, ARG1, c3 / crisis)
(c3 / crisis, location, c4 / city)
(c3 / crisis, mod, h / hostage)
(c3 / crisis, time, d / date-entity)
(c4 / city, name, n3 / name)
(d / date-entity, month, 10)
(d / date-entity, year, 2002)
(f / face-01, ARG0, o / organization)
(f / face-01, ARG1, f2 / fight-01)
(f / face-01, time, s2 / still)
(f2 / fight-01, ARG1, t / terrorism)
(f2 / fight-01, mod, s3 / stern)
(n / name, op, "Tang")
(n2 / name, op, "SCO")
(n3 / name, op, "Moscow")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, f / face-01)
(s3 / stern, degree, v / very)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(2, 1, 0),Moscow,(city :name (name :op "Moscow")),false), Span(19,20,List(3),crisis,crisis,false), Span(18,19,List(4),hostage,hostage,false), Span(16,18,List(7, 6, 5),October 2002,(date-entity :month 10 :year 2002),false), Span(14,15,List(8),cited,cite-01,false), Span(12,13,List(9),fight,fight-01,false), Span(11,12,List(10),terrorism,terrorism,false), Span(8,9,List(11),stern,stern,false), Span(7,8,List(12),very,very,false), Span(5,6,List(13),faces,face-01,false), Span(4,5,List(14),still,still,false)),Map(2 -> "Moscow", 5 -> date-entity, 12 -> very, 8 -> cite-01, 7 -> 2002, 1 -> name, 4 -> hostage, 11 -> stern, 14 -> still, 6 -> 10, 0 -> city, 9 -> fight-01, 3 -> crisis, 10 -> terrorism, 13 -> face-01),Map(n -> name, h -> hostage, 2 -> 2002, s2 -> still, t -> terrorism, s -> stern, v -> very, d -> date-entity, 1 -> 10, c3 -> cite-01, c -> city, f2 -> face-01, f -> fight-01, c2 -> crisis))),[Ljava.lang.String;@45bf6f39,Annotation([Ljava.lang.String;@6c42f2a1,[Ljava.lang.String;@17a703f5,[Ljava.lang.String;@5ff2b8ca),Annotation([Ljava.lang.String;@618ad2aa,[Ljava.lang.String;@1aa6e3c0,[Ledu.cmu.lti.nlp.amr.Dependency;@3531f3ca),Annotation([Ljava.lang.String;@7fcf294e,[Ljava.lang.String;@4867ab9f,[Ljava.lang.String;@65f2f9b0),Annotation([Ljava.lang.String;@5fe7f967,[Ljava.lang.String;@59e43e8c,[Ledu.cmu.lti.nlp.amr.Entity;@2caa5d7c))
AMR:
(c / city, name, n / name)
(c2 / crisis, location, c / city)
(c2 / crisis, mod, h / hostage)
(c2 / crisis, name, d / date-entity)
(c3 / cite-01, ARG1, c2 / crisis)
(c3 / cite-01, ARG3, f / fight-01)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2002)
(f / fight-01, ARG0, t / terrorism)
(f / fight-01, mod, s / stern)
(f2 / face-01, ARG1, f / fight-01)
(f2 / face-01, mod, s2 / still)
(n / name, op, "Moscow")
(s / stern, degree, v / very)

Decoded in 703,276 microseconds
Sentence: Tang stated the fact that the terrorist attack in Moscow was masterminded by national separatists and regional extremists demonstrated the necessity and correctness of efforts in reducing the 3-forces of terrorism, separatism and extremism.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
Spans:
Span 7-8:  attack => attack-01
Span 18-19:  demonstrated => demonstrate-01
Span 24-25:  efforts => effort
Span 36-37:  extremism => extremism
Span 17-18:  extremists => extremist
Span 11-12:  masterminded => mastermind-01
Span 9-10:  Moscow => (city :name (name :op "Moscow"))
Span 26-27:  reducing => reduce-01
Span 16-17:  regional => region
Span 14-15:  separatists => separatist
Span 32-33:  terrorism => terrorism

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 28-29:  3 => 3
Oracle Span 15-16:  and => and
Oracle Span 21-22:  and => and
Oracle Span 35-36:  and => and
Oracle Span 7-8:  attack => attack-01
Oracle Span 22-23:  correctness => correct
Oracle Span 18-19:  demonstrated => demonstrate-01
Oracle Span 24-25:  efforts => effort
Oracle Span 36-37:  extremism => extremism
Oracle Span 17-18:  extremists => extremist
Oracle Span 30-31:  forces => force
Oracle Span 11-12:  masterminded => mastermind-01
Oracle Span 9-10:  Moscow => (city :name (name :op "Moscow"))
Oracle Span 13-14:  national => nation
Oracle Span 26-27:  reducing => reduce-01
Oracle Span 16-17:  regional => region
Oracle Span 34-35:  separatism => separatism
Oracle Span 14-15:  separatists => separatist
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 32-33:  terrorism => terrorism
Oracle Span 6-7:  terrorist => terrorist

Missing span: Tang => (person :name (name :op "Tang"))
Missing span: stated => state-01
Missing span: and => and
Missing span: and => and
Missing span: forces => force
Missing span: separatism => separatism
Missing span: 3 => 3
Missing span: terrorist => terrorist
Missing span: and => and
Missing span: correctness => correct
Missing span: national => nation
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	fact	_	NN	NN	_	2	dobj	_	_
5	that	_	IN	IN	_	12	mark	_	_
6	the	_	DT	DT	_	8	det	_	_
7	terrorist	_	JJ	JJ	_	8	amod	_	_
8	attack	_	NN	NN	_	12	nsubjpass	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	Moscow	_	NNP	NNP	_	9	pobj	_	_
11	was	_	VBD	VBD	_	12	auxpass	_	_
12	masterminded	_	VBN	VBN	_	2	ccomp	_	_
13	by	_	IN	IN	_	12	prep	_	_
14	national	_	JJ	JJ	_	15	amod	_	_
15	separatists	_	NNS	NNS	_	13	pobj	_	_
16	and	_	CC	CC	_	12	cc	_	_
17	regional	_	JJ	JJ	_	18	amod	_	_
18	extremists	_	NNS	NNS	_	19	nsubj	_	_
19	demonstrated	_	VBD	VBD	_	12	conj	_	_
20	the	_	DT	DT	_	21	det	_	_
21	necessity	_	NN	NN	_	19	dobj	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	correctness	_	NNS	NNS	_	21	conj	_	_
24	of	_	IN	IN	_	21	prep	_	_
25	efforts	_	NNS	NNS	_	24	pobj	_	_
26	in	_	IN	IN	_	19	prep	_	_
27	reducing	_	VBG	VBG	_	26	pcomp	_	_
28	the	_	DT	DT	_	29	det	_	_
29	3-forces	_	NN	NN	_	27	dobj	_	_
30	of	_	IN	IN	_	29	prep	_	_
31	terrorism	_	NN	NN	_	30	pobj	_	_
32	,	_	,	,	_	31	punct	_	_
33	separatism	_	NN	NN	_	31	conj	_	_
34	and	_	CC	CC	_	31	cc	_	_
35	extremism	_	NN	NN	_	31	conj	_	_
36	.	_	.	.	_	2	punct	_	_

Oracle:
(a / attack-01, ARG0, t / terrorist)
(a / attack-01, location, c / city)
(a2 / and, op, e / extremist)
(a2 / and, op, s2 / separatist)
(a3 / and, op, c2 / correct)
(a4 / and, op, f4 / force)
(a4 / and, quant, 3 / 3)
(c / city, name, n2 / name)
(c2 / correct, domain, e2 / effort)
(d / demonstrate-01, ARG0, m / mastermind-01)
(d / demonstrate-01, ARG1, a3 / and)
(e / extremist, mod, r / region)
(e2 / effort, purpose, r2 / reduce-01)
(f4 / force, mod, e3 / extremism)
(m / mastermind-01, ARG0, a2 / and)
(m / mastermind-01, ARG1, a / attack-01)
(n / name, op, "Tang")
(n2 / name, op, "Moscow")
(p / person, name, n / name)
(r2 / reduce-01, ARG1, a4 / and)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, d / demonstrate-01)
(s2 / separatist, mod, n3 / nation)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),extremism,extremism,false), Span(32,33,List(1),terrorism,terrorism,false), Span(26,27,List(2),reducing,reduce-01,false), Span(24,25,List(3),efforts,effort,false), Span(18,19,List(4),demonstrated,demonstrate-01,false), Span(17,18,List(5),extremists,extremist,false), Span(16,17,List(6),regional,region,false), Span(14,15,List(7),separatists,separatist,false), Span(11,12,List(8),masterminded,mastermind-01,false), Span(9,10,List(11, 10, 9),Moscow,(city :name (name :op "Moscow")),false), Span(7,8,List(12),attack,attack-01,false)),Map(2 -> reduce-01, 5 -> extremist, 12 -> attack-01, 8 -> mastermind-01, 7 -> separatist, 1 -> terrorism, 4 -> demonstrate-01, 11 -> "Moscow", 6 -> region, 0 -> extremism, 9 -> city, 3 -> effort, 10 -> name),Map(n -> name, e -> extremism, t -> terrorism, e2 -> effort, s -> separatist, m -> mastermind-01, d -> demonstrate-01, r2 -> region, a -> attack-01, r -> reduce-01, c -> city, e3 -> extremist))),[Ljava.lang.String;@5e671e20,Annotation([Ljava.lang.String;@3eabe84a,[Ljava.lang.String;@46c3a14d,[Ljava.lang.String;@38fc5554),Annotation([Ljava.lang.String;@5e8cda75,[Ljava.lang.String;@3f049056,[Ledu.cmu.lti.nlp.amr.Dependency;@64968732),Annotation([Ljava.lang.String;@3e1a3801,[Ljava.lang.String;@6fd12c5,[Ljava.lang.String;@1de0a46c),Annotation([Ljava.lang.String;@4d1f1ff5,[Ljava.lang.String;@222afc67,[Ledu.cmu.lti.nlp.amr.Entity;@4c2fb9dd))
AMR:
(a / attack-01, ARG1, c / city)
(c / city, name, n / name)
(d / demonstrate-01, ARG0, e3 / extremist)
(d / demonstrate-01, ARG1, a / attack-01)
(e2 / effort, name, t / terrorism)
(e2 / effort, purpose, r / reduce-01)
(e3 / extremist, mod, r2 / region)
(m / mastermind-01, ARG1, a / attack-01)
(m / mastermind-01, ARG2, s / separatist)
(n / name, op, "Moscow")
(r / reduce-01, ARG0, e3 / extremist)
(r / reduce-01, ARG1, e / extremism)

Decoded in 389,791 microseconds
Sentence: Tang stated that all SCO members should deepen and expand security cooperation by adopting deals on jointly fighting against the 3-forces and terrorist organizations and by creating a regional anti-terrorist organization in Kyrgyz capital Bishkek as soon as possible.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (thing :name (name :op "Kyrgyz"))
NER Entity: (country :name (name :op "Bishkek"))
NER Entity: (country :name (name :op "Bishkek"))
Spans:
Span 3-4:  all => all
Span 37-38:  capital => capital
Span 11-12:  cooperation => cooperate-01
Span 28-29:  creating => create-01
Span 9-10:  expand => expand-01
Span 17-18:  fighting => fight-01
Span 16-17:  jointly => joint
Span 5-6:  members => (have-org-role-91 :ARG2 member)
Span 34-35:  organization => organization
Span 25-26:  organizations => organization
Span 42-43:  possible => possible
Span 30-31:  regional => region
Span 6-7:  should => recommend-01
Span 40-41:  soon => soon

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 20-21:  3 => 3
Oracle Span 13-14:  adopting => adopt-01
Oracle Span 3-4:  all => all
Oracle Span 8-9:  and => and
Oracle Span 23-24:  and => and
Oracle Span 26-27:  and => and
Oracle Span 31-32:  anti => counter-01
Oracle Span 38-39:  Bishkek => (name :op "Bishkek")
Oracle Span 37-38:  capital => capital
Oracle Span 11-12:  cooperation => cooperate-01
Oracle Span 28-29:  creating => create-01
Oracle Span 14-15:  deals => deal-01
Oracle Span 7-8:  deepen => deepen-01
Oracle Span 9-10:  expand => expand-01
Oracle Span 17-18:  fighting => fight-01
Oracle Span 22-23:  forces => force
Oracle Span 16-17:  jointly => joint
Oracle Span 36-37:  Kyrgyz => (country :name (name :op "Kyrgyzstan"))
Oracle Span 5-6:  members => (have-org-role-91 :ARG2 member)
Oracle Span 34-35:  organization => organization
Oracle Span 25-26:  organizations => organization
Oracle Span 42-43:  possible => possible
Oracle Span 30-31:  regional => region
Oracle Span 4-5:  SCO => (organization :name (name :op "SCO"))
Oracle Span 10-11:  security => security
Oracle Span 6-7:  should => recommend-01
Oracle Span 40-41:  soon => soon
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 24-25:  terrorist => terrorist
Oracle Span 33-34:  terrorist => terrorism

Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: Bishkek => (name :op "Bishkek")
Missing span: Kyrgyz => (country :name (name :op "Kyrgyzstan"))
Missing span: stated => state-01
Missing span: and => and
Missing span: and => and
Missing span: anti => counter-01
Missing span: adopting => adopt-01
Missing span: deals => deal-01
Missing span: and => and
Missing span: terrorist => terrorist
Missing span: forces => force
Missing span: 3 => 3
Missing span: deepen => deepen-01
Missing span: security => security
Missing span: terrorist => terrorism
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	all	_	DT	DT	_	6	det	_	_
5	SCO	_	NNP	NNP	_	6	nn	_	_
6	members	_	NNS	NNS	_	8	nsubj	_	_
7	should	_	MD	MD	_	8	aux	_	_
8	deepen	_	VB	VB	_	2	ccomp	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	expand	_	VB	VB	_	8	conj	_	_
11	security	_	NN	NN	_	12	nn	_	_
12	cooperation	_	NN	NN	_	8	dobj	_	_
13	by	_	IN	IN	_	8	prep	_	_
14	adopting	_	VBG	VBG	_	13	pcomp	_	_
15	deals	_	NNS	NNS	_	14	dobj	_	_
16	on	_	IN	IN	_	14	prep	_	_
17	jointly	_	RB	RB	_	18	advmod	_	_
18	fighting	_	VBG	VBG	_	16	pcomp	_	_
19	against	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	24	det	_	_
21	3-forces	_	JJ	JJ	_	24	amod	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	terrorist	_	JJ	JJ	_	21	conj	_	_
24	organizations	_	NNS	NNS	_	19	pobj	_	_
25	and	_	CC	CC	_	13	cc	_	_
26	by	_	IN	IN	_	13	conj	_	_
27	creating	_	VBG	VBG	_	26	pcomp	_	_
28	a	_	DT	DT	_	31	det	_	_
29	regional	_	JJ	JJ	_	31	amod	_	_
30	anti-terrorist	_	JJ	JJ	_	31	amod	_	_
31	organization	_	NN	NN	_	27	dobj	_	_
32	in	_	IN	IN	_	27	prep	_	_
33	Kyrgyz	_	NNP	NNP	_	35	nn	_	_
34	capital	_	NN	NN	_	35	nn	_	_
35	Bishkek	_	NNP	NNP	_	32	pobj	_	_
36	as	_	RB	RB	_	37	advmod	_	_
37	soon	_	RB	RB	_	35	advmod	_	_
38	as	_	IN	IN	_	37	prep	_	_
39	possible	_	JJ	JJ	_	38	pobj	_	_
40	.	_	.	.	_	2	punct	_	_

Oracle:
(a2 / and, instrument, a5 / and)
(a2 / and, op, d / deepen-01)
(a2 / and, op, e / expand-01)
(a3 / adopt-01, ARG1, d2 / deal-01)
(a4 / and, op, f2 / force)
(a4 / and, op, o2 / organization)
(a5 / and, op, a3 / adopt-01)
(a5 / and, op, c2 / create-01)
(c / cooperate-01, ARG2, s2 / security)
(c2 / create-01, ARG1, o3 / organization)
(c2 / create-01, location, c4 / capital)
(c2 / create-01, time, s3 / soon)
(c3 / counter-01, ARG0, o3 / organization)
(c3 / counter-01, ARG1, t2 / terrorism)
(c4 / capital, location, c5 / country)
(c4 / capital, name, n3 / name)
(c5 / country, name, n4 / name)
(d / deepen-01, ARG1, c / cooperate-01)
(d2 / deal-01, ARG1, f / fight-01)
(e / expand-01, ARG1, c / cooperate-01)
(f / fight-01, ARG1, a4 / and)
(f / fight-01, manner, j / joint)
(f2 / force, quant, 3 / 3)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Tang")
(n2 / name, op, "SCO")
(n3 / name, op, "Bishkek")
(n4 / name, op, "Kyrgyzstan")
(o / organization, name, n2 / name)
(o2 / organization, mod, t / terrorist)
(o3 / organization, mod, r2 / region)
(p / person, name, n / name)
(r / recommend-01, ARG0, p / person)
(r / recommend-01, ARG1, a2 / and)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, r / recommend-01)
(s3 / soon, degree, p2 / possible)

Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),possible,possible,false), Span(40,41,List(1),soon,soon,false), Span(37,38,List(2),capital,capital,false), Span(34,35,List(3),organization,organization,false), Span(30,31,List(4),regional,region,false), Span(28,29,List(5),creating,create-01,false), Span(25,26,List(6),organizations,organization,false), Span(17,18,List(7),fighting,fight-01,false), Span(16,17,List(8),jointly,joint,false), Span(11,12,List(9),cooperation,cooperate-01,false), Span(9,10,List(10),expand,expand-01,false), Span(6,7,List(11),should,recommend-01,false), Span(5,6,List(13, 12),members,(have-org-role-91 :ARG2 member),false), Span(3,4,List(14),all,all,false)),Map(2 -> capital, 5 -> create-01, 12 -> have-org-role-91, 8 -> joint, 7 -> fight-01, 1 -> soon, 4 -> region, 11 -> recommend-01, 14 -> all, 6 -> organization, 0 -> possible, 9 -> cooperate-01, 3 -> organization, 10 -> expand-01, 13 -> member),Map(e -> expand-01, h -> have-org-role-91, j -> joint, s -> soon, m -> member, p -> possible, r2 -> recommend-01, a -> all, c3 -> cooperate-01, o2 -> organization, r -> region, c -> capital, f -> fight-01, o -> organization, c2 -> create-01))),[Ljava.lang.String;@54f4a7f0,Annotation([Ljava.lang.String;@61a1ea2c,[Ljava.lang.String;@149debbb,[Ljava.lang.String;@25cd49a4),Annotation([Ljava.lang.String;@5477a1ca,[Ljava.lang.String;@3ae9d1e2,[Ledu.cmu.lti.nlp.amr.Dependency;@41522537),Annotation([Ljava.lang.String;@e9dc4d0,[Ljava.lang.String;@670d4d38,[Ljava.lang.String;@131ff6fa),Annotation([Ljava.lang.String;@43b40233,[Ljava.lang.String;@23eff5d1,[Ledu.cmu.lti.nlp.amr.Entity;@2e060819))
AMR:
(c2 / create-01, ARG0, s / soon)
(c2 / create-01, ARG1, o / organization)
(c3 / cooperate-01, ARG0, a / all)
(c3 / cooperate-01, ARG1, o / organization)
(e / expand-01, ARG1, c3 / cooperate-01)
(f / fight-01, ARG0, c / capital)
(f / fight-01, ARG1, o2 / organization)
(f / fight-01, manner, j / joint)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m / member)
(o / organization, mod, r / region)
(r2 / recommend-01, ARG1, e / expand-01)
(r2 / recommend-01, ARG2, h / have-org-role-91)
(s / soon, op, p / possible)

Decoded in 460,205 microseconds
Sentence: Tang stated that the Chinese government appreciated and supported some Central Asian countries' proposals on enhancing anti-drug cooperation.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Central" :op "Asian"))
Spans:
Span 10-12:  Central Asian => (thing :name (name :op "Central" :op "Asian"))
Span 20-21:  cooperation => cooperate-01
Span 12-13:  countries => country
Span 19-20:  drug => drug
Span 16-17:  enhancing => enhance-01
Span 14-15:  proposals => (thing :ARG1-of propose-01)
Span 9-10:  some => some
Span 8-9:  supported => support-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 17-18:  anti => counter-01
Oracle Span 6-7:  appreciated => appreciate-02
Oracle Span 10-12:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Oracle Span 4-5:  Chinese => (name :op "China")
Oracle Span 20-21:  cooperation => cooperate-01
Oracle Span 12-13:  countries => country
Oracle Span 19-20:  drug => drug
Oracle Span 16-17:  enhancing => enhance-01
Oracle Span 5-6:  government => government-organization
Oracle Span 14-15:  proposals => propose-01
Oracle Span 9-10:  some => some
Oracle Span 1-2:  stated => state-01
Oracle Span 8-9:  supported => support-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))

Incorrect span: proposals => (thing :ARG1-of propose-01)
Incorrect span: Central Asian => (thing :name (name :op "Central" :op "Asian"))
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: Chinese => (name :op "China")
Missing span: Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Missing span: stated => state-01
Missing span: and => and
Missing span: appreciated => appreciate-02
Missing span: anti => counter-01
Missing span: government => government-organization
Missing span: proposals => propose-01
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Chinese	_	JJ	JJ	_	6	amod	_	_
6	government	_	NN	NN	_	7	nsubj	_	_
7	appreciated	_	VBD	VBD	_	2	ccomp	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	supported	_	VBD	VBD	_	7	conj	_	_
10	some	_	DT	DT	_	13	det	_	_
11	Central	_	NNP	NNP	_	13	nn	_	_
12	Asian	_	NNP	NNP	_	13	nn	_	_
13	countries	_	NNS	NNS	_	15	poss	_	_
14	'	_	POS	POS	_	13	possessive	_	_
15	proposals	_	NNS	NNS	_	7	dobj	_	_
16	on	_	IN	IN	_	15	prep	_	_
17	enhancing	_	VBG	VBG	_	16	pcomp	_	_
18	anti-drug	_	JJ	JJ	_	19	amod	_	_
19	cooperation	_	NN	NN	_	17	dobj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(a / appreciate-02, ARG0, g / government-organization)
(a / appreciate-02, ARG1, p2 / propose-01)
(a2 / and, op, g / government-organization)
(a2 / and, op, s3 / support-01)
(c / country, name, n2 / name)
(c3 / cooperate-01, ARG1, c4 / counter-01)
(c4 / counter-01, ARG1, d / drug)
(e / enhance-01, ARG1, c3 / cooperate-01)
(n / name, op, "Tang")
(n2 / name, op, "China")
(n3 / name, op, "Asia")
(n3 / name, op, "Central")
(p / person, name, n / name)
(p2 / propose-01, ARG1, e / enhance-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a2 / and)
(s3 / support-01, ARG0, g / government-organization)
(s3 / support-01, ARG1, p2 / propose-01)
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),cooperation,cooperate-01,false), Span(19,20,List(1),drug,drug,false), Span(16,17,List(2),enhancing,enhance-01,false), Span(14,15,List(4, 3),proposals,(thing :ARG1-of propose-01),false), Span(12,13,List(5),countries,country,false), Span(10,12,List(9, 8, 7, 6),Central Asian,(thing :name (name :op "Central" :op "Asian")),false), Span(9,10,List(10),some,some,false), Span(8,9,List(11),supported,support-01,false)),Map(2 -> enhance-01, 5 -> country, 8 -> "Central", 7 -> name, 1 -> drug, 11 -> support-01, 4 -> propose-01, 6 -> thing, 9 -> "Asian", 0 -> cooperate-01, 10 -> some, 3 -> thing),Map(n -> name, e -> enhance-01, s2 -> support-01, t -> thing, s -> some, d -> drug, p -> propose-01, t2 -> thing, c -> cooperate-01, c2 -> country))),[Ljava.lang.String;@42c28305,Annotation([Ljava.lang.String;@2184b4f4,[Ljava.lang.String;@7d199c68,[Ljava.lang.String;@63411512),Annotation([Ljava.lang.String;@35cd68d4,[Ljava.lang.String;@316a598d,[Ledu.cmu.lti.nlp.amr.Dependency;@216914),Annotation([Ljava.lang.String;@6ba30587,[Ljava.lang.String;@35764bef,[Ljava.lang.String;@5633dafd),Annotation([Ljava.lang.String;@5d5160e6,[Ljava.lang.String;@2eadc9f6,[Ledu.cmu.lti.nlp.amr.Entity;@2903c6ff))
AMR:
(c / cooperate-01, degree, d / drug)
(c2 / country, mod, t2 / thing)
(c2 / country, quant, s / some)
(e / enhance-01, ARG1, c / cooperate-01)
(n / name, op, "Asian")
(n / name, op, "Central")
(p / propose-01, ARG0, c2 / country)
(p / propose-01, ARG1, t / thing)
(p / propose-01, ARG2, e / enhance-01)
(s2 / support-01, ARG1, t / thing)
(t2 / thing, name, n / name)

Decoded in 276,317 microseconds
Sentence: Tang stated that the Chinese Government signed multilateral anti-drug cooperation pact.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 11-12:  cooperation => cooperate-01
Span 10-11:  drug => drug
Span 7-8:  multilateral => multilateral
Span 12-13:  pact => pact

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  anti => counter-01
Oracle Span 4-5:  Chinese => (country :name (name :op "China"))
Oracle Span 11-12:  cooperation => cooperate-01
Oracle Span 10-11:  drug => drug
Oracle Span 5-6:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 7-8:  multilateral => multilateral
Oracle Span 12-13:  pact => pact
Oracle Span 6-7:  signed => sign-02
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))

Missing span: Tang => (person :name (name :op "Tang"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: signed => sign-02
Missing span: anti => counter-01
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Chinese	_	JJ	JJ	_	6	amod	_	_
6	Government	_	NN	NN	_	7	nsubj	_	_
7	signed	_	VBD	VBD	_	2	ccomp	_	_
8	multilateral	_	JJ	JJ	_	11	amod	_	_
9	anti-drug	_	JJ	JJ	_	11	amod	_	_
10	cooperation	_	NN	NN	_	11	nn	_	_
11	pact	_	NN	NN	_	7	dobj	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / cooperate-01, ARG2, c3 / counter-01)
(c3 / counter-01, ARG1, d / drug)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "Tang")
(n2 / name, op, "China")
(p / person, name, n / name)
(p2 / pact, mod, m / multilateral)
(p2 / pact, topic, c2 / cooperate-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, s2 / sign-02)
(s2 / sign-02, ARG0, g / government-organization)
(s2 / sign-02, ARG1, p2 / pact)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),pact,pact,false), Span(11,12,List(1),cooperation,cooperate-01,false), Span(10,11,List(2),drug,drug,false), Span(7,8,List(3),multilateral,multilateral,false)),Map(2 -> drug, 1 -> cooperate-01, 0 -> pact, 3 -> multilateral),Map(m -> multilateral, d -> drug, p -> pact, c -> cooperate-01))),[Ljava.lang.String;@61af1510,Annotation([Ljava.lang.String;@37af1f93,[Ljava.lang.String;@778d82e9,[Ljava.lang.String;@408e96d9),Annotation([Ljava.lang.String;@59901c4d,[Ljava.lang.String;@168cd36b,[Ledu.cmu.lti.nlp.amr.Dependency;@d8d9199),Annotation([Ljava.lang.String;@3901f6af,[Ljava.lang.String;@602ae7b6,[Ljava.lang.String;@10cd6753),Annotation([Ljava.lang.String;@71ad3d8a,[Ljava.lang.String;@47af099e,[Ledu.cmu.lti.nlp.amr.Entity;@700f518a))
AMR:
(c / cooperate-01, ARG0, d / drug)
(p / pact, mod, m / multilateral)
(p / pact, topic, c / cooperate-01)

Decoded in 31,865 microseconds
Sentence: Tang stated anti-drug measures as one of the top tasks of regional anti-terrorist organizations.

NER Entity: (person :name (name :op "Tang"))
Spans:
Span 4-5:  drug => drug
Span 5-6:  measures => measure
Span 17-18:  organizations => organization
Span 13-14:  regional => region
Span 11-12:  tasks => task
Span 10-11:  top => top

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  anti => counter-01
Oracle Span 14-15:  anti => counter-01
Oracle Span 4-5:  drug => drug
Oracle Span 5-6:  measures => measure
Oracle Span 8-9:  of => include-91
Oracle Span 17-18:  organizations => organization
Oracle Span 13-14:  regional => region
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 11-12:  tasks => (thing :ARG1-of task-01)
Oracle Span 16-17:  terrorist => terrorist
Oracle Span 10-11:  top => top

Incorrect span: tasks => task
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: stated => state-01
Missing span: tasks => (thing :ARG1-of task-01)
Missing span: of => include-91
Missing span: anti => counter-01
Missing span: terrorist => terrorist
Missing span: anti => counter-01
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	anti-drug	_	JJ	JJ	_	4	amod	_	_
4	measures	_	NNS	NNS	_	2	dobj	_	_
5	as	_	IN	IN	_	2	prep	_	_
6	one	_	CD	CD	_	5	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	top	_	JJ	JJ	_	10	amod	_	_
10	tasks	_	NNS	NNS	_	7	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	regional	_	JJ	JJ	_	14	amod	_	_
13	anti-terrorist	_	JJ	JJ	_	14	amod	_	_
14	organizations	_	NNS	NNS	_	11	pobj	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(c / counter-01, ARG0, o / organization)
(c / counter-01, ARG1, t3 / terrorist)
(c2 / counter-01, ARG0, m / measure)
(c2 / counter-01, ARG1, d / drug)
(i / include-91, ARG1, t5 / task-01)
(n / name, op, "Tang")
(o / organization, mod, r / region)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, m / measure)
(s / state-01, ARG3, t4 / thing)
(t5 / task-01, ARG1, t4 / thing)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),organizations,organization,false), Span(13,14,List(1),regional,region,false), Span(11,12,List(2),tasks,task,false), Span(10,11,List(3),top,top,false), Span(5,6,List(4),measures,measure,false), Span(4,5,List(5),drug,drug,false)),Map(2 -> task, 5 -> drug, 1 -> region, 4 -> measure, 0 -> organization, 3 -> top),Map(t -> task, d -> drug, m -> measure, t2 -> top, r -> region, o -> organization))),[Ljava.lang.String;@b835727,Annotation([Ljava.lang.String;@13da7ab0,[Ljava.lang.String;@2c8662ac,[Ljava.lang.String;@260ff5b7),Annotation([Ljava.lang.String;@3724b43e,[Ljava.lang.String;@77eb5790,[Ledu.cmu.lti.nlp.amr.Dependency;@68e7c8c3),Annotation([Ljava.lang.String;@319c3a25,[Ljava.lang.String;@238bfd6c,[Ljava.lang.String;@ef1695a),Annotation([Ljava.lang.String;@58860997,[Ljava.lang.String;@81b5db0,[Ledu.cmu.lti.nlp.amr.Entity;@7487b142))
AMR:
(d / drug, instrument, m / measure)
(m / measure, poss, o / organization)
(o / organization, mod, r / region)
(t / task, mod, t2 / top)
(t / task, poss, o / organization)

Decoded in 45,769 microseconds
Sentence: Tang stated that economic cooperation is a key area for cooperation between the SCO members, stating --

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
Spans:
Span 8-9:  area => area
Span 10-11:  cooperation => cooperate-01
Span 4-5:  cooperation => cooperate-01
Span 3-4:  economic => economy
Span 7-8:  key => key
Span 14-15:  members => (have-org-role-91 :ARG2 member)
Span 16-17:  stating => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  area => area
Oracle Span 4-5:  cooperation => cooperate-01
Oracle Span 10-11:  cooperation => cooperate-01
Oracle Span 3-4:  economic => economy
Oracle Span 7-8:  key => key
Oracle Span 14-15:  members => (have-org-role-91 :ARG2 member)
Oracle Span 13-14:  SCO => (organization :name (name :op "SCO"))
Oracle Span 1-2:  stated => state-01
Oracle Span 16-17:  stating => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))

Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: stated => state-01
Dependencies:
1	Tang	_	VBG	VBG	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	9	mark	_	_
4	economic	_	JJ	JJ	_	5	amod	_	_
5	cooperation	_	NN	NN	_	9	nsubj	_	_
6	is	_	VBZ	VBZ	_	9	cop	_	_
7	a	_	DT	DT	_	9	det	_	_
8	key	_	JJ	JJ	_	9	amod	_	_
9	area	_	NN	NN	_	2	ccomp	_	_
10	for	_	IN	IN	_	9	prep	_	_
11	cooperation	_	NN	NN	_	10	pobj	_	_
12	between	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	SCO	_	NNP	NNP	_	15	nn	_	_
15	members	_	NNS	NNS	_	12	pobj	_	_
16	,	_	,	,	_	9	punct	_	_
17	stating	_	VBG	VBG	_	9	vmod	_	_
18	--	_	:	:	_	2	punct	_	_

Oracle:
(a / area, mod, k / key)
(a / area, prep-for, c2 / cooperate-01)
(c / cooperate-01, ARG2, e / economy)
(c / cooperate-01, mod, a / area)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Tang")
(n2 / name, op, "SCO")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / cooperate-01)
(s / state-01, instrument, s2 / state-01)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),stating,state-01,false), Span(14,15,List(2, 1),members,(have-org-role-91 :ARG2 member),false), Span(10,11,List(3),cooperation,cooperate-01,false), Span(8,9,List(4),area,area,false), Span(7,8,List(5),key,key,false), Span(4,5,List(6),cooperation,cooperate-01,false), Span(3,4,List(7),economic,economy,false)),Map(2 -> member, 5 -> key, 7 -> economy, 1 -> have-org-role-91, 4 -> area, 6 -> cooperate-01, 0 -> state-01, 3 -> cooperate-01),Map(e -> economy, h -> have-org-role-91, k -> key, s -> state-01, m -> member, a -> area, c -> cooperate-01, c2 -> cooperate-01))),[Ljava.lang.String;@7139bd31,Annotation([Ljava.lang.String;@199bc830,[Ljava.lang.String;@4b3fe06e,[Ljava.lang.String;@27b45ea),Annotation([Ljava.lang.String;@3e17a0a1,[Ljava.lang.String;@790a251b,[Ledu.cmu.lti.nlp.amr.Dependency;@4d8286c4),Annotation([Ljava.lang.String;@150ede8b,[Ljava.lang.String;@161f6623,[Ljava.lang.String;@3e15bb06),Annotation([Ljava.lang.String;@6778aea6,[Ljava.lang.String;@4e1ce44,[Ledu.cmu.lti.nlp.amr.Entity;@69228e85))
AMR:
(a / area, domain, c2 / cooperate-01)
(a / area, mod, k / key)
(c / cooperate-01, ARG0, c2 / cooperate-01)
(c / cooperate-01, ARG1, s / state-01)
(c / cooperate-01, ARG2, h / have-org-role-91)
(c2 / cooperate-01, ARG1, e / economy)
(h / have-org-role-91, ARG2, m / member)

Decoded in 60,991 microseconds
Sentence: To gain substantial benefits from economic and trade cooperation, all Member States should strengthen political common sense over economic and trade cooperation and regard economic and trade cooperation as a strategic problem that could affect regional security and the SCO's development.

NER Entity: (organization :name (name :op "SCO"))
Spans:
Span 35-36:  affect => affect-01
Span 10-11:  all => all
Span 3-4:  benefits => benefit-01
Span 16-17:  common => common
Span 28-29:  cooperation => cooperate-01
Span 22-23:  cooperation => cooperate-01
Span 8-9:  cooperation => cooperate-01
Span 34-35:  could => possible
Span 42-43:  development => develop-02
Span 25-26:  economic => economy
Span 19-20:  economic => economy
Span 5-6:  economic => economy
Span 1-2:  gain => gain-02
Span 11-12:  Member => (have-org-role-91 :ARG2 member)
Span 32-33:  problem => problem
Span 36-37:  regional => region
Span 17-18:  sense => sense
Span 13-14:  should => recommend-01
Span 14-15:  strengthen => strengthen-01
Span 2-3:  substantial => substantial
Span 27-28:  trade => trade-01
Span 21-22:  trade => trade-01
Span 7-8:  trade => trade-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 35-36:  affect => affect-01
Oracle Span 10-11:  all => all
Oracle Span 6-7:  and => and
Oracle Span 20-21:  and => and
Oracle Span 23-24:  and => and
Oracle Span 3-4:  benefits => benefit
Oracle Span 16-17:  common => common
Oracle Span 8-9:  cooperation => cooperate-01
Oracle Span 34-35:  could => possible
Oracle Span 42-43:  development => develop-02
Oracle Span 5-6:  economic => economy
Oracle Span 1-2:  gain => gain-02
Oracle Span 11-12:  Member => (have-org-role-91 :ARG2 member)
Oracle Span 15-16:  political => politics
Oracle Span 32-33:  problem => problem
Oracle Span 24-25:  regard => regard-01
Oracle Span 36-37:  regional => region
Oracle Span 40-41:  SCO => (organization :name (name :op "SCO"))
Oracle Span 37-38:  security => security
Oracle Span 17-18:  sense => sense
Oracle Span 13-14:  should => recommend-01
Oracle Span 12-13:  States => state
Oracle Span 31-32:  strategic => strategy
Oracle Span 14-15:  strengthen => strengthen-01
Oracle Span 2-3:  substantial => substantial
Oracle Span 7-8:  trade => trade-01

Extra span: cooperation => cooperate-01
Extra span: trade => trade-01
Extra span: economic => economy
Extra span: cooperation => cooperate-01
Extra span: trade => trade-01
Extra span: economic => economy
Incorrect span: benefits => benefit-01
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: and => and
Missing span: benefits => benefit
Missing span: States => state
Missing span: and => and
Missing span: regard => regard-01
Missing span: and => and
Missing span: security => security
Missing span: strategic => strategy
Missing span: political => politics
Dependencies:
1	To	_	TO	TO	_	2	aux	_	_
2	gain	_	VB	VB	_	15	advcl	_	_
3	substantial	_	JJ	JJ	_	4	amod	_	_
4	benefits	_	NNS	NNS	_	2	dobj	_	_
5	from	_	IN	IN	_	2	prep	_	_
6	economic	_	JJ	JJ	_	5	pobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	trade	_	NN	NN	_	9	nn	_	_
9	cooperation	_	NN	NN	_	6	conj	_	_
10	,	_	,	,	_	15	punct	_	_
11	all	_	DT	DT	_	13	det	_	_
12	Member	_	NNP	NNP	_	13	nn	_	_
13	States	_	NNPS	NNPS	_	15	nsubj	_	_
14	should	_	MD	MD	_	15	aux	_	_
15	strengthen	_	VB	VB	_	0	root	_	_
16	political	_	JJ	JJ	_	18	amod	_	_
17	common	_	JJ	JJ	_	18	amod	_	_
18	sense	_	NN	NN	_	15	dobj	_	_
19	over	_	IN	IN	_	18	prep	_	_
20	economic	_	JJ	JJ	_	19	pobj	_	_
21	and	_	CC	CC	_	18	cc	_	_
22	trade	_	NN	NN	_	23	nn	_	_
23	cooperation	_	NN	NN	_	18	conj	_	_
24	and	_	CC	CC	_	15	cc	_	_
25	regard	_	VB	VB	_	15	conj	_	_
26	economic	_	JJ	JJ	_	29	amod	_	_
27	and	_	CC	CC	_	26	cc	_	_
28	trade	_	NN	NN	_	26	conj	_	_
29	cooperation	_	NN	NN	_	25	dobj	_	_
30	as	_	IN	IN	_	25	prep	_	_
31	a	_	DT	DT	_	33	det	_	_
32	strategic	_	JJ	JJ	_	33	amod	_	_
33	problem	_	NN	NN	_	30	pobj	_	_
34	that	_	WDT	WDT	_	36	nsubj	_	_
35	could	_	MD	MD	_	36	aux	_	_
36	affect	_	VB	VB	_	33	rcmod	_	_
37	regional	_	JJ	JJ	_	38	amod	_	_
38	security	_	NN	NN	_	36	dobj	_	_
39	and	_	CC	CC	_	38	cc	_	_
40	the	_	DT	DT	_	41	det	_	_
41	SCO	_	NNP	NNP	_	43	poss	_	_
42	's	_	POS	POS	_	41	possessive	_	_
43	development	_	NN	NN	_	38	conj	_	_
44	.	_	.	.	_	15	punct	_	_

Oracle:
(a / and, op, r2 / regard-01)
(a / and, op, s3 / strengthen-01)
(a3 / affect-01, ARG1, a4 / and)
(a3 / affect-01, ARG2, p2 / problem)
(a3 / affect-01, mod, p3 / possible)
(a4 / and, op, d / develop-02)
(a4 / and, op, s6 / security)
(a5 / and, op, e / economy)
(a5 / and, op, t / trade-01)
(b / benefit, mod, s / substantial)
(c / cooperate-01, ARG2, a5 / and)
(d / develop-02, ARG1, o2 / organization)
(g / gain-02, ARG1, b / benefit)
(g / gain-02, ARG2, c / cooperate-01)
(h / have-org-role-91, ARG0, s2 / state)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "SCO")
(o2 / organization, name, n / name)
(p2 / problem, mod, s5 / strategy)
(r / recommend-01, ARG1, a / and)
(r / recommend-01, ARG2, s2 / state)
(r / recommend-01, purpose, g / gain-02)
(r2 / regard-01, ARG0, s2 / state)
(r2 / regard-01, ARG1, c / cooperate-01)
(r2 / regard-01, ARG2, p2 / problem)
(s2 / state, mod, a2 / all)
(s3 / strengthen-01, ARG0, s2 / state)
(s3 / strengthen-01, ARG1, s4 / sense)
(s3 / strengthen-01, topic, c / cooperate-01)
(s4 / sense, mod, c2 / common)
(s4 / sense, mod, p / politics)
(s6 / security, mod, r3 / region)

Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),development,develop-02,false), Span(36,37,List(1),regional,region,false), Span(35,36,List(2),affect,affect-01,false), Span(34,35,List(3),could,possible,false), Span(32,33,List(4),problem,problem,false), Span(28,29,List(5),cooperation,cooperate-01,false), Span(27,28,List(6),trade,trade-01,false), Span(25,26,List(7),economic,economy,false), Span(22,23,List(8),cooperation,cooperate-01,false), Span(21,22,List(9),trade,trade-01,false), Span(19,20,List(10),economic,economy,false), Span(17,18,List(11),sense,sense,false), Span(16,17,List(12),common,common,false), Span(14,15,List(13),strengthen,strengthen-01,false), Span(13,14,List(14),should,recommend-01,false), Span(11,12,List(16, 15),Member,(have-org-role-91 :ARG2 member),false), Span(10,11,List(17),all,all,false), Span(8,9,List(18),cooperation,cooperate-01,false), Span(7,8,List(19),trade,trade-01,false), Span(5,6,List(20),economic,economy,false), Span(3,4,List(21),benefits,benefit-01,false), Span(2,3,List(22),substantial,substantial,false), Span(1,2,List(23),gain,gain-02,false)),Map(2 -> affect-01, 5 -> cooperate-01, 12 -> common, 15 -> have-org-role-91, 8 -> cooperate-01, 21 -> benefit-01, 18 -> cooperate-01, 7 -> economy, 17 -> all, 1 -> region, 23 -> gain-02, 4 -> problem, 11 -> sense, 14 -> recommend-01, 20 -> economy, 6 -> trade-01, 22 -> substantial, 0 -> develop-02, 9 -> trade-01, 16 -> member, 19 -> trade-01, 3 -> possible, 10 -> economy, 13 -> strengthen-01),Map(e -> economy, h -> have-org-role-91, s2 -> strengthen-01, b -> benefit-01, t -> trade-01, p2 -> problem, e2 -> economy, c4 -> cooperate-01, s -> sense, m -> member, d -> develop-02, t3 -> trade-01, g -> gain-02, r2 -> recommend-01, p -> possible, a -> affect-01, c3 -> common, t2 -> trade-01, a2 -> all, r -> region, s3 -> substantial, c -> cooperate-01, e3 -> economy, c2 -> cooperate-01))),[Ljava.lang.String;@7a7cc52c,Annotation([Ljava.lang.String;@5853495b,[Ljava.lang.String;@524a2ffb,[Ljava.lang.String;@2f61d591),Annotation([Ljava.lang.String;@332820f4,[Ljava.lang.String;@7173ae5b,[Ledu.cmu.lti.nlp.amr.Dependency;@72456279),Annotation([Ljava.lang.String;@53a9fcfd,[Ljava.lang.String;@21f459fc,[Ljava.lang.String;@4d192aef),Annotation([Ljava.lang.String;@1416cf9f,[Ljava.lang.String;@84487f4,[Ledu.cmu.lti.nlp.amr.Entity;@bfc14b9))
AMR:
(a / affect-01, ARG0, p2 / problem)
(a / affect-01, ARG1, c / cooperate-01)
(b / benefit-01, mod, s3 / substantial)
(c / cooperate-01, ARG0, r / region)
(c / cooperate-01, ARG1, e / economy)
(c / cooperate-01, ARG2, t2 / trade-01)
(c2 / cooperate-01, ARG2, t2 / trade-01)
(c4 / cooperate-01, ARG1, a2 / all)
(c4 / cooperate-01, ARG2, t3 / trade-01)
(d / develop-02, ARG1, p2 / problem)
(g / gain-02, ARG0, e3 / economy)
(g / gain-02, ARG1, b / benefit-01)
(h / have-org-role-91, ARG1, s2 / strengthen-01)
(h / have-org-role-91, ARG2, m / member)
(p / possible, domain, a / affect-01)
(r2 / recommend-01, ARG1, s2 / strengthen-01)
(s / sense, mod, c3 / common)
(s2 / strengthen-01, ARG1, s / sense)
(s2 / strengthen-01, time, e2 / economy)
(s2 / strengthen-01, time, g / gain-02)
(t / trade-01, ARG2, t2 / trade-01)
(t2 / trade-01, ARG0, s / sense)
(t3 / trade-01, ARG1, e3 / economy)

Decoded in 1,422,062 microseconds
Sentence: Tang also referenced a volatile world situation and stated that the common and pressing task of all SCO members is to manage threats from untraditional security spheres including terrorism, drug trafficking, weapons smuggle, transnational monetary crimes.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
Spans:
Span 16-17:  all => all
Span 11-12:  common => common
Span 38-39:  crimes => crime
Span 30-31:  drug => drug
Span 21-22:  manage => manage-01
Span 18-19:  members => (have-org-role-91 :ARG2 member)
Span 13-14:  pressing => press-01
Span 6-7:  situation => situation
Span 34-35:  smuggle => smuggle-01
Span 26-27:  spheres => sphere
Span 14-15:  task => task
Span 28-29:  terrorism => terrorism
Span 36-37:  transnational => transnational
Span 4-5:  volatile => volatile

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 16-17:  all => all
Oracle Span 1-2:  also => include-01
Oracle Span 7-8:  and => and
Oracle Span 12-13:  and => and
Oracle Span 11-12:  common => common
Oracle Span 38-39:  crimes => crime
Oracle Span 30-31:  drug => drug
Oracle Span 21-22:  manage => manage-01
Oracle Span 18-19:  members => (have-org-role-91 :ARG2 member)
Oracle Span 37-38:  monetary => money
Oracle Span 13-14:  pressing => press-01
Oracle Span 2-3:  referenced => reference-01
Oracle Span 17-18:  SCO => (organization :name (name :op "SCO"))
Oracle Span 25-26:  security => security
Oracle Span 6-7:  situation => situation
Oracle Span 34-35:  smuggle => smuggle-01
Oracle Span 26-27:  spheres => sphere
Oracle Span 8-9:  stated => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 14-15:  task => task-01
Oracle Span 28-29:  terrorism => terrorism
Oracle Span 22-23:  threats => (thing :ARG1-of threaten-01)
Oracle Span 31-32:  trafficking => traffic-00
Oracle Span 36-37:  transnational => transnational
Oracle Span 24-25:  untraditional => (traditional :polarity -)
Oracle Span 4-5:  volatile => volatile
Oracle Span 33-34:  weapons => weapon
Oracle Span 5-6:  world => world

Incorrect span: task => task
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: and => and
Missing span: stated => state-01
Missing span: task => task-01
Missing span: also => include-01
Missing span: and => and
Missing span: weapons => weapon
Missing span: trafficking => traffic-00
Missing span: untraditional => (traditional :polarity -)
Missing span: security => security
Missing span: referenced => reference-01
Missing span: world => world
Missing span: threats => (thing :ARG1-of threaten-01)
Missing span: monetary => money
Dependencies:
1	Tang	_	NNP	NNP	_	3	nsubj	_	_
2	also	_	RB	RB	_	3	advmod	_	_
3	referenced	_	VBD	VBD	_	0	root	_	_
4	a	_	DT	DT	_	7	det	_	_
5	volatile	_	JJ	JJ	_	7	amod	_	_
6	world	_	NN	NN	_	7	nn	_	_
7	situation	_	NN	NN	_	3	dobj	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	stated	_	VBD	VBD	_	3	conj	_	_
10	that	_	IN	IN	_	20	mark	_	_
11	the	_	DT	DT	_	15	det	_	_
12	common	_	JJ	JJ	_	15	amod	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	pressing	_	JJ	JJ	_	12	conj	_	_
15	task	_	NN	NN	_	20	nsubj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	all	_	DT	DT	_	19	det	_	_
18	SCO	_	NNP	NNP	_	19	nn	_	_
19	members	_	NNS	NNS	_	16	pobj	_	_
20	is	_	VBZ	VBZ	_	9	ccomp	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	manage	_	VB	VB	_	20	xcomp	_	_
23	threats	_	NNS	NNS	_	22	dobj	_	_
24	from	_	IN	IN	_	22	prep	_	_
25	untraditional	_	JJ	JJ	_	27	amod	_	_
26	security	_	NN	NN	_	27	nn	_	_
27	spheres	_	NNS	NNS	_	24	pobj	_	_
28	including	_	VBG	VBG	_	27	prep	_	_
29	terrorism	_	NN	NN	_	28	pobj	_	_
30	,	_	,	,	_	29	punct	_	_
31	drug	_	NN	NN	_	32	nn	_	_
32	trafficking	_	NN	NN	_	29	appos	_	_
33	,	_	,	,	_	29	punct	_	_
34	weapons	_	NNS	NNS	_	35	nn	_	_
35	smuggle	_	NNS	NNS	_	29	appos	_	_
36	,	_	,	,	_	29	punct	_	_
37	transnational	_	JJ	JJ	_	39	amod	_	_
38	monetary	_	JJ	JJ	_	39	amod	_	_
39	crimes	_	NNS	NNS	_	29	appos	_	_
40	.	_	.	.	_	3	punct	_	_

Oracle:
(a2 / and, op, r / reference-01)
(a2 / and, op, s2 / state-01)
(a4 / and, op, c2 / crime)
(a4 / and, op, s5 / smuggle-01)
(a4 / and, op, t4 / terrorism)
(a4 / and, op, t5 / traffic-00)
(c2 / crime, mod, m3 / money)
(c2 / crime, mod, t6 / transnational)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(i / include-01, ARG1, a4 / and)
(i / include-01, ARG2, s3 / sphere)
(m2 / manage-01, ARG1, t7 / thing)
(n / name, op, "Tang")
(n2 / name, op, "SCO")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(p2 / press-01, ARG0, t / task-01)
(r / reference-01, ARG0, p / person)
(r / reference-01, ARG1, s / situation)
(s / situation, location, w / world)
(s / situation, mod, v / volatile)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, t / task-01)
(s3 / sphere, mod, s4 / security)
(s3 / sphere, mod, t3 / traditional)
(s5 / smuggle-01, ARG1, w2 / weapon)
(t / task-01, ARG1, m2 / manage-01)
(t / task-01, mod, c / common)
(t2 / threaten-01, ARG0, s3 / sphere)
(t2 / threaten-01, ARG1, t7 / thing)
(t3 / traditional, polarity, -)
(t5 / traffic-00, ARG1, d / drug)

Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),crimes,crime,false), Span(36,37,List(1),transnational,transnational,false), Span(34,35,List(2),smuggle,smuggle-01,false), Span(30,31,List(3),drug,drug,false), Span(28,29,List(4),terrorism,terrorism,false), Span(26,27,List(5),spheres,sphere,false), Span(21,22,List(6),manage,manage-01,false), Span(18,19,List(8, 7),members,(have-org-role-91 :ARG2 member),false), Span(16,17,List(9),all,all,false), Span(14,15,List(10),task,task,false), Span(13,14,List(11),pressing,press-01,false), Span(11,12,List(12),common,common,false), Span(6,7,List(13),situation,situation,false), Span(4,5,List(14),volatile,volatile,false)),Map(2 -> smuggle-01, 5 -> sphere, 12 -> common, 8 -> member, 7 -> have-org-role-91, 1 -> transnational, 4 -> terrorism, 11 -> press-01, 14 -> volatile, 6 -> manage-01, 0 -> crime, 9 -> all, 3 -> drug, 10 -> task, 13 -> situation),Map(h -> have-org-role-91, s2 -> sphere, t -> transnational, m2 -> member, s -> smuggle-01, v -> volatile, d -> drug, m -> manage-01, t3 -> task, p -> press-01, a -> all, t2 -> terrorism, s3 -> situation, c -> crime, c2 -> common))),[Ljava.lang.String;@fb6097b,Annotation([Ljava.lang.String;@2dfe5525,[Ljava.lang.String;@1290c49,[Ljava.lang.String;@6a9b9909),Annotation([Ljava.lang.String;@55d9b8f0,[Ljava.lang.String;@a518813,[Ledu.cmu.lti.nlp.amr.Dependency;@43d38654),Annotation([Ljava.lang.String;@75361cf6,[Ljava.lang.String;@6d303498,[Ljava.lang.String;@6ba7383d),Annotation([Ljava.lang.String;@3419e23b,[Ljava.lang.String;@710d89e2,[Ledu.cmu.lti.nlp.amr.Entity;@1d75e7af))
AMR:
(c / crime, mod, t / transnational)
(h / have-org-role-91, ARG0, c / crime)
(h / have-org-role-91, ARG1, v / volatile)
(h / have-org-role-91, ARG2, m2 / member)
(m / manage-01, ARG0, t3 / task)
(m / manage-01, ARG1, h / have-org-role-91)
(m / manage-01, ARG2, s2 / sphere)
(p / press-01, ARG0, d / drug)
(p / press-01, ARG1, t3 / task)
(s / smuggle-01, ARG0, a / all)
(s / smuggle-01, ARG1, p / press-01)
(s3 / situation, mod, v / volatile)
(t2 / terrorism, op, h / have-org-role-91)
(t3 / task, mod, c2 / common)

Decoded in 403,271 microseconds
Sentence: Tang stated that peace and development still dominate the current age as the general situation of the world is stable and the economy is developing forward in waves.

NER Entity: (person :name (name :op "Tang"))
Spans:
Span 9-10:  current => current
Span 5-6:  development => develop-02
Span 7-8:  dominate => dominate-01
Span 25-26:  forward => forward
Span 13-14:  general => general
Span 3-4:  peace => peace
Span 14-15:  situation => situation
Span 19-20:  stable => stable
Span 6-7:  still => still

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 10-11:  age => age
Oracle Span 4-5:  and => and
Oracle Span 20-21:  and => and
Oracle Span 9-10:  current => current
Oracle Span 24-25:  developing => develop-02
Oracle Span 5-6:  development => develop-01
Oracle Span 7-8:  dominate => dominate-01
Oracle Span 22-23:  economy => economy
Oracle Span 25-26:  forward => forward
Oracle Span 13-14:  general => general
Oracle Span 3-4:  peace => peace
Oracle Span 14-15:  situation => situation
Oracle Span 19-20:  stable => stable
Oracle Span 1-2:  stated => state-01
Oracle Span 6-7:  still => still
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 27-28:  waves => wave
Oracle Span 17-18:  world => world

Incorrect span: development => develop-02
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: stated => state-01
Missing span: and => and
Missing span: developing => develop-02
Missing span: waves => wave
Missing span: economy => economy
Missing span: world => world
Missing span: age => age
Missing span: and => and
Missing span: development => develop-01
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	peace	_	NN	NN	_	8	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	development	_	NN	NN	_	4	conj	_	_
7	still	_	RB	RB	_	8	advmod	_	_
8	dominate	_	VBP	VBP	_	2	ccomp	_	_
9	the	_	DT	DT	_	11	det	_	_
10	current	_	JJ	JJ	_	11	amod	_	_
11	age	_	NN	NN	_	8	dobj	_	_
12	as	_	IN	IN	_	20	mark	_	_
13	the	_	DT	DT	_	15	det	_	_
14	general	_	JJ	JJ	_	15	amod	_	_
15	situation	_	NN	NN	_	20	nsubj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	world	_	NN	NN	_	16	pobj	_	_
19	is	_	VBZ	VBZ	_	20	cop	_	_
20	stable	_	JJ	JJ	_	8	advcl	_	_
21	and	_	CC	CC	_	8	cc	_	_
22	the	_	DT	DT	_	23	det	_	_
23	economy	_	NN	NN	_	25	nsubj	_	_
24	is	_	VBZ	VBZ	_	25	aux	_	_
25	developing	_	VBG	VBG	_	8	conj	_	_
26	forward	_	RB	RB	_	25	advmod	_	_
27	in	_	IN	IN	_	25	prep	_	_
28	waves	_	NNS	NNS	_	27	pobj	_	_
29	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, d2 / develop-01)
(a / and, op, p2 / peace)
(a2 / age, time, c / current)
(a3 / and, op, d3 / develop-02)
(a3 / and, op, s2 / situation)
(d / dominate-01, ARG0, a / and)
(d / dominate-01, ARG1, a2 / age)
(d / dominate-01, mod, s4 / still)
(d3 / develop-02, ARG1, e / economy)
(d3 / develop-02, direction, f / forward)
(d3 / develop-02, manner, w2 / wave)
(n / name, op, "Tang")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, d / dominate-01)
(s2 / situation, location, w / world)
(s2 / situation, mod, g / general)
(s2 / situation, mod, s3 / stable)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),forward,forward,false), Span(19,20,List(1),stable,stable,false), Span(14,15,List(2),situation,situation,false), Span(13,14,List(3),general,general,false), Span(9,10,List(4),current,current,false), Span(7,8,List(5),dominate,dominate-01,false), Span(6,7,List(6),still,still,false), Span(5,6,List(7),development,develop-02,false), Span(3,4,List(8),peace,peace,false)),Map(2 -> situation, 5 -> dominate-01, 8 -> peace, 7 -> develop-02, 1 -> stable, 4 -> current, 6 -> still, 0 -> forward, 3 -> general),Map(s2 -> situation, s -> stable, d -> dominate-01, p -> peace, g -> general, d2 -> develop-02, s3 -> still, c -> current, f -> forward))),[Ljava.lang.String;@4fc142ec,Annotation([Ljava.lang.String;@34b27915,[Ljava.lang.String;@29eda4f8,[Ljava.lang.String;@1b9776f5),Annotation([Ljava.lang.String;@5e048149,[Ljava.lang.String;@79d9214d,[Ledu.cmu.lti.nlp.amr.Dependency;@3d5790ea),Annotation([Ljava.lang.String;@1dd7796b,[Ljava.lang.String;@67a3bd51,[Ljava.lang.String;@57402ba1),Annotation([Ljava.lang.String;@56913163,[Ljava.lang.String;@702b06fb,[Ledu.cmu.lti.nlp.amr.Entity;@a18649a))
AMR:
(d / dominate-01, ARG0, d2 / develop-02)
(d / dominate-01, ARG1, p / peace)
(d / dominate-01, mod, s3 / still)
(d / dominate-01, time, c / current)
(d2 / develop-02, ARG1, f / forward)
(s / stable, domain, s2 / situation)
(s2 / situation, mod, g / general)
(s2 / situation, poss, p / peace)

Decoded in 176,131 microseconds
Sentence: Tang stated that the international community was watching the organization closely as more countries and international organizations were willing to conduct dialogues and cooperation with the SCO.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
Spans:
Span 10-11:  closely => close
Span 5-6:  community => community
Span 20-21:  conduct => conduct-01
Span 23-24:  cooperation => cooperate-01
Span 13-14:  countries => country
Span 9-10:  organization => organization
Span 16-17:  organizations => organization
Span 18-19:  willing => will-02

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 22-23:  and => and
Oracle Span 10-11:  closely => close
Oracle Span 5-6:  community => community
Oracle Span 20-21:  conduct => conduct-01
Oracle Span 23-24:  cooperation => cooperate-01
Oracle Span 13-14:  countries => country
Oracle Span 21-22:  dialogues => dialogue-00
Oracle Span 4-5:  international => international
Oracle Span 15-16:  international => international
Oracle Span 12-13:  more => more
Oracle Span 9-10:  organization => organization
Oracle Span 16-17:  organizations => organization
Oracle Span 26-27:  SCO => (name :op "SCO")
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 7-8:  watching => watch-01
Oracle Span 18-19:  willing => will-02

Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (name :op "SCO")
Missing span: stated => state-01
Missing span: watching => watch-01
Missing span: and => and
Missing span: dialogues => dialogue-00
Missing span: and => and
Missing span: international => international
Missing span: more => more
Missing span: international => international
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	international	_	JJ	JJ	_	6	amod	_	_
6	community	_	NN	NN	_	8	nsubj	_	_
7	was	_	VBD	VBD	_	8	aux	_	_
8	watching	_	VBG	VBG	_	2	ccomp	_	_
9	the	_	DT	DT	_	10	det	_	_
10	organization	_	NN	NN	_	8	dobj	_	_
11	closely	_	RB	RB	_	8	advmod	_	_
12	as	_	IN	IN	_	8	prep	_	_
13	more	_	JJR	JJR	_	14	amod	_	_
14	countries	_	NNS	NNS	_	12	pobj	_	_
15	and	_	CC	CC	_	2	cc	_	_
16	international	_	JJ	JJ	_	17	amod	_	_
17	organizations	_	NNS	NNS	_	19	nsubj	_	_
18	were	_	VBD	VBD	_	19	cop	_	_
19	willing	_	JJ	JJ	_	2	conj	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	conduct	_	VB	VB	_	19	xcomp	_	_
22	dialogues	_	NNS	NNS	_	21	dobj	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	cooperation	_	NN	NN	_	22	conj	_	_
25	with	_	IN	IN	_	21	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	SCO	_	NNP	NNP	_	25	pobj	_	_
28	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c6 / cooperate-01)
(a / and, op, d / dialogue-00)
(a2 / and, op, c4 / country)
(a2 / and, op, o2 / organization)
(c / community, mod, i / international)
(c4 / country, quant, m / more)
(c5 / conduct-01, ARG1, a / and)
(c6 / cooperate-01, ARG0, a2 / and)
(c6 / cooperate-01, ARG1, o3 / organization)
(d / dialogue-00, ARG0, a2 / and)
(d / dialogue-00, ARG2, o3 / organization)
(n / name, op, "Tang")
(n2 / name, op, "SCO")
(o2 / organization, mod, i2 / international)
(o3 / organization, name, n2 / name)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, w / watch-01)
(w / watch-01, ARG0, c / community)
(w / watch-01, ARG1, o3 / organization)
(w / watch-01, manner, c2 / close)
(w2 / will-02, ARG0, a2 / and)
(w2 / will-02, ARG1, c5 / conduct-01)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),cooperation,cooperate-01,false), Span(20,21,List(1),conduct,conduct-01,false), Span(18,19,List(2),willing,will-02,false), Span(16,17,List(3),organizations,organization,false), Span(13,14,List(4),countries,country,false), Span(10,11,List(5),closely,close,false), Span(9,10,List(6),organization,organization,false), Span(5,6,List(7),community,community,false)),Map(2 -> will-02, 5 -> close, 7 -> community, 1 -> conduct-01, 4 -> country, 6 -> organization, 0 -> cooperate-01, 3 -> organization),Map(w -> will-02, c4 -> close, c3 -> country, o2 -> organization, c -> cooperate-01, o -> organization, c2 -> conduct-01, c5 -> community))),[Ljava.lang.String;@5c534b5b,Annotation([Ljava.lang.String;@396639b,[Ljava.lang.String;@2b22a1cc,[Ljava.lang.String;@62573c86),Annotation([Ljava.lang.String;@2418ba04,[Ljava.lang.String;@14229fa7,[Ledu.cmu.lti.nlp.amr.Dependency;@2ab0702e),Annotation([Ljava.lang.String;@7158daf2,[Ljava.lang.String;@10f19647,[Ljava.lang.String;@102efc59),Annotation([Ljava.lang.String;@3936df72,[Ljava.lang.String;@e8e0dec,[Ledu.cmu.lti.nlp.amr.Entity;@12d1f1d4))
AMR:
(c / cooperate-01, ARG0, c3 / country)
(c / cooperate-01, ARG1, o / organization)
(c2 / conduct-01, ARG0, o2 / organization)
(c2 / conduct-01, ARG1, c5 / community)
(c4 / close, ARG1, c5 / community)
(w / will-02, ARG0, o / organization)
(w / will-02, ARG1, c2 / conduct-01)

Decoded in 187,188 microseconds
Sentence: Tang stated that the SCO should further enhance the exchange and cooperation with other parties through wider visibility and a more positive post, which may not only strengthen SCO's international influence but also reflect SCO's principles of no-alignment, not-against-a-third-party and opening-up.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
Spans:
Span 11-12:  cooperation => cooperate-01
Span 7-8:  enhance => enhance-01
Span 9-10:  exchange => exchange-01
Span 6-7:  further => further
Span 32-33:  influence => influence-01
Span 25-26:  may => possible
Span 40-41:  no => -
Span 27-28:  only => only
Span 13-14:  other => other
Span 14-15:  parties => party
Span 21-22:  positive => positive
Span 22-23:  post => post
Span 38-39:  principles => principle
Span 35-36:  reflect => reflect-01
Span 5-6:  should => recommend-01
Span 28-29:  strengthen => strengthen-01
Span 16-17:  wider => wide

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Oracle Span 42-43:  alignment => align-01
Oracle Span 34-35:  also => also
Oracle Span 10-11:  and => and
Oracle Span 18-19:  and => and
Oracle Span 53-54:  and => and
Oracle Span 11-12:  cooperation => cooperate-01
Oracle Span 7-8:  enhance => enhance-01
Oracle Span 9-10:  exchange => exchange-01
Oracle Span 6-7:  further => further
Oracle Span 32-33:  influence => influence-01
Oracle Span 31-32:  international => international
Oracle Span 25-26:  may => possible
Oracle Span 20-21:  more => more
Oracle Span 54-55:  opening => open-03
Oracle Span 13-14:  other => other
Oracle Span 14-15:  parties => party
Oracle Span 52-53:  party => party
Oracle Span 21-22:  positive => positive
Oracle Span 22-23:  post => post
Oracle Span 38-39:  principles => principle
Oracle Span 35-36:  reflect => reflect-01
Oracle Span 4-5:  SCO => (organization :name (name :op "SCO"))
Oracle Span 5-6:  should => recommend-01
Oracle Span 1-2:  stated => state-01
Oracle Span 28-29:  strengthen => strengthen-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 17-18:  visibility => visibility
Oracle Span 16-17:  wider => wide

Extra span: no => -
Extra span: only => only
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: stated => state-01
Missing span: also => also
Missing span: and => and
Missing span: opening => open-03
Missing span: international => international
Missing span: and => and
Missing span: more => more
Missing span: visibility => visibility
Missing span: and => and
Missing span: party => party
Missing span: alignment => align-01
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	SCO	_	NNP	NNP	_	8	nsubj	_	_
6	should	_	MD	MD	_	8	aux	_	_
7	further	_	RBR	RBR	_	8	advmod	_	_
8	enhance	_	VB	VB	_	2	ccomp	_	_
9	the	_	DT	DT	_	10	det	_	_
10	exchange	_	NN	NN	_	8	dobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	cooperation	_	NN	NN	_	10	conj	_	_
13	with	_	IN	IN	_	10	prep	_	_
14	other	_	JJ	JJ	_	15	amod	_	_
15	parties	_	NNS	NNS	_	13	pobj	_	_
16	through	_	IN	IN	_	8	prep	_	_
17	wider	_	JJR	JJR	_	18	amod	_	_
18	visibility	_	NN	NN	_	16	pobj	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	a	_	DT	DT	_	23	det	_	_
21	more	_	RBR	RBR	_	22	advmod	_	_
22	positive	_	JJ	JJ	_	23	amod	_	_
23	post	_	NN	NN	_	18	conj	_	_
24	,	_	,	,	_	23	punct	_	_
25	which	_	WDT	WDT	_	29	nsubj	_	_
26	may	_	MD	MD	_	29	aux	_	_
27	not	_	RB	RB	_	29	neg	_	_
28	only	_	RB	RB	_	29	advmod	_	_
29	strengthen	_	VB	VB	_	23	rcmod	_	_
30	SCO	_	NNP	NNP	_	33	poss	_	_
31	's	_	POS	POS	_	30	possessive	_	_
32	international	_	JJ	JJ	_	33	amod	_	_
33	influence	_	NN	NN	_	29	dobj	_	_
34	but	_	CC	CC	_	2	cc	_	_
35	also	_	RB	RB	_	36	advmod	_	_
36	reflect	_	VBP	VBP	_	2	conj	_	_
37	SCO	_	NNP	NNP	_	39	poss	_	_
38	's	_	POS	POS	_	37	possessive	_	_
39	principles	_	NNS	NNS	_	36	dobj	_	_
40	of	_	IN	IN	_	39	prep	_	_
41	no-alignment	_	NN	NN	_	40	pobj	_	_
42	,	_	,	,	_	41	punct	_	_
43	not-against-a-third-party	_	NN	NN	_	41	conj	_	_
44	and	_	CC	CC	_	41	cc	_	_
45	opening-up	_	NN	NN	_	41	conj	_	_
46	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c / cooperate-01)
(a / and, op, e2 / exchange-01)
(a2 / and, op, p3 / post)
(a3 / and, op, p10 / principle)
(a4 / align-01, ARG1, o / organization)
(c / cooperate-01, ARG0, o / organization)
(c / cooperate-01, ARG1, p2 / party)
(e / enhance-01, ARG0, o / organization)
(e / enhance-01, ARG1, a / and)
(e / enhance-01, ARG2, o / organization)
(e / enhance-01, instrument, a2 / and)
(e / enhance-01, mod, f / further)
(e2 / exchange-01, ARG0, o / organization)
(e2 / exchange-01, ARG2, p2 / party)
(i / influence-01, ARG0, o / organization)
(i / influence-01, mod, i2 / international)
(n / name, op, "Tang")
(n2 / name, op, "SCO")
(o / organization, name, n2 / name)
(o3 / open-03, ARG1, o / organization)
(p / person, name, n / name)
(p10 / principle, mod, o3 / open-03)
(p2 / party, mod, o2 / other)
(p3 / post, mod, p4 / positive)
(p4 / positive, degree, m2 / more)
(r / recommend-01, ARG0, p / person)
(r / recommend-01, ARG1, e / enhance-01)
(r2 / reflect-01, ARG1, a3 / and)
(r2 / reflect-01, ARG2, e / enhance-01)
(r2 / reflect-01, mod, a5 / also)
(r2 / reflect-01, mod, p8 / possible)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, r / recommend-01)
(s2 / strengthen-01, ARG0, e / enhance-01)
(s2 / strengthen-01, ARG1, i / influence-01)
(v / visibility, manner, w / wide)

Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),no,-,false), Span(38,39,List(1),principles,principle,false), Span(35,36,List(2),reflect,reflect-01,false), Span(32,33,List(3),influence,influence-01,false), Span(28,29,List(4),strengthen,strengthen-01,false), Span(27,28,List(5),only,only,false), Span(25,26,List(6),may,possible,false), Span(22,23,List(7),post,post,false), Span(21,22,List(8),positive,positive,false), Span(16,17,List(9),wider,wide,false), Span(14,15,List(10),parties,party,false), Span(13,14,List(11),other,other,false), Span(11,12,List(12),cooperation,cooperate-01,false), Span(9,10,List(13),exchange,exchange-01,false), Span(7,8,List(14),enhance,enhance-01,false), Span(6,7,List(15),further,further,false), Span(5,6,List(16),should,recommend-01,false)),Map(2 -> reflect-01, 5 -> only, 12 -> cooperate-01, 15 -> further, 8 -> positive, 7 -> post, 1 -> principle, 4 -> strengthen-01, 11 -> other, 14 -> enhance-01, 6 -> possible, 0 -> -, 9 -> wide, 16 -> recommend-01, 3 -> influence-01, 10 -> party, 13 -> exchange-01),Map(e -> exchange-01, w -> wide, p5 -> party, e2 -> enhance-01, p2 -> possible, s -> strengthen-01, r2 -> recommend-01, p -> principle, p4 -> positive, o2 -> other, r -> reflect-01, i -> influence-01, - -> -, c -> cooperate-01, f -> further, o -> only, p3 -> post))),[Ljava.lang.String;@75fa1be3,Annotation([Ljava.lang.String;@7a389761,[Ljava.lang.String;@42714a7,[Ljava.lang.String;@19650aa6),Annotation([Ljava.lang.String;@3ce53f6a,[Ljava.lang.String;@2d82408,[Ledu.cmu.lti.nlp.amr.Dependency;@3ee69ad8),Annotation([Ljava.lang.String;@f679798,[Ljava.lang.String;@1a6cf771,[Ljava.lang.String;@59d77850),Annotation([Ljava.lang.String;@53ed09e8,[Ljava.lang.String;@60859f5a,[Ledu.cmu.lti.nlp.amr.Entity;@1daf3b44))
AMR:
(c / cooperate-01, ARG1, p5 / party)
(c / cooperate-01, ARG2, s / strengthen-01)
(e / exchange-01, ARG1, p5 / party)
(e2 / enhance-01, ARG1, e / exchange-01)
(e2 / enhance-01, degree, f / further)
(i / influence-01, ARG1, w / wide)
(p / principle, poss, - / -)
(p3 / post, mod, p4 / positive)
(p5 / party, mod, o2 / other)
(r / reflect-01, ARG1, p / principle)
(r2 / recommend-01, ARG1, e2 / enhance-01)
(r2 / recommend-01, ARG3, r / reflect-01)
(s / strengthen-01, ARG0, p3 / post)
(s / strengthen-01, ARG1, i / influence-01)
(s / strengthen-01, mod, o / only)
(s / strengthen-01, mod, p2 / possible)

Decoded in 1,066,777 microseconds
Sentence: Tang stated that the SCO will pass a temporary pact on SCO's foreign policies at the meeting on 23 November 2002.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
mkDayMonthYear(23	November	2002,23,November,2002)
Spans:
Span 19-22:  23 November 2002 => (date-entity :day 23 :month 11 :year 2002)
Span 9-10:  pact => pact
Span 14-15:  policies => policy
Span 8-9:  temporary => temporary

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 19-22:  23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Oracle Span 13-14:  foreign => foreign
Oracle Span 17-18:  meeting => meet-03
Oracle Span 9-10:  pact => pact
Oracle Span 6-7:  pass => pass-01
Oracle Span 14-15:  policies => policy
Oracle Span 4-5:  SCO => (organization :name (name :op "SCO"))
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 8-9:  temporary => temporary

Incorrect span: 23 November 2002 => (date-entity :day 23 :month 11 :year 2002)
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: 23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Missing span: stated => state-01
Missing span: pass => pass-01
Missing span: meeting => meet-03
Missing span: foreign => foreign
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	SCO	_	NNP	NNP	_	7	nsubj	_	_
6	will	_	MD	MD	_	7	aux	_	_
7	pass	_	VB	VB	_	2	ccomp	_	_
8	a	_	DT	DT	_	10	det	_	_
9	temporary	_	JJ	JJ	_	10	amod	_	_
10	pact	_	NN	NN	_	7	dobj	_	_
11	on	_	IN	IN	_	10	prep	_	_
12	SCO	_	NNP	NNP	_	15	poss	_	_
13	's	_	POS	POS	_	12	possessive	_	_
14	foreign	_	JJ	JJ	_	15	amod	_	_
15	policies	_	NNS	NNS	_	11	pobj	_	_
16	at	_	IN	IN	_	7	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	meeting	_	NN	NN	_	16	pobj	_	_
19	on	_	IN	IN	_	7	prep	_	_
20	23	_	CD	CD	_	19	pobj	_	_
21	November	_	NNP	NNP	_	7	tmod	_	_
22	2002	_	CD	CD	_	21	num	_	_
23	.	_	.	.	_	2	punct	_	_

Oracle:
(d / date-entity, day, 23)
(d / date-entity, month, 11)
(d / date-entity, year, 2002)
(m / meet-03, time, d / date-entity)
(n / name, op, "Tang")
(n3 / name, op, "SCO")
(o2 / organization, name, n3 / name)
(p / person, name, n / name)
(p2 / pass-01, ARG0, o2 / organization)
(p2 / pass-01, ARG1, p3 / pact)
(p2 / pass-01, time, m / meet-03)
(p3 / pact, mod, t / temporary)
(p3 / pact, topic, p4 / policy)
(p4 / policy, mod, f / foreign)
(p4 / policy, poss, o2 / organization)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, p2 / pass-01)

Input(Some(Graph(null,ArrayBuffer(Span(19,22,List(3, 2, 1, 0),23 November 2002,(date-entity :day 23 :month 11 :year 2002),false), Span(14,15,List(4),policies,policy,false), Span(9,10,List(5),pact,pact,false), Span(8,9,List(6),temporary,temporary,false)),Map(2 -> 11, 5 -> pact, 1 -> 23, 4 -> policy, 6 -> temporary, 0 -> date-entity, 3 -> 2002),Map(2 -> 23, t -> temporary, p2 -> pact, d -> date-entity, p -> policy, 1 -> 11, 22 -> 2002))),[Ljava.lang.String;@7fd8c559,Annotation([Ljava.lang.String;@44c13103,[Ljava.lang.String;@8f2098e,[Ljava.lang.String;@6c6366cf),Annotation([Ljava.lang.String;@55a88417,[Ljava.lang.String;@18acfe88,[Ledu.cmu.lti.nlp.amr.Dependency;@8a2a6a),Annotation([Ljava.lang.String;@772861aa,[Ljava.lang.String;@6631cb64,[Ljava.lang.String;@19962194),Annotation([Ljava.lang.String;@481e91b6,[Ljava.lang.String;@7c8f9c2e,[Ledu.cmu.lti.nlp.amr.Entity;@140d1230))
AMR:
(d / date-entity, day, 2 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2002)
(p2 / pact, mod, p / policy)
(p2 / pact, mod, t / temporary)
(t / temporary, poss, d / date-entity)

Decoded in 68,541 microseconds
Sentence: Tang stated that the pact will officially start the SCO's exchange activities with other organizations and promote the Shanghai-spirit of mutual trust and benefit, equality, cooperation, multicultural respect and the search for common development.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "Shanghai" :op "-" :op "spirit" :op "of" :op "mutual"))
Spans:
Span 12-13:  activities => activity
Span 26-27:  benefit => benefit-01
Span 38-39:  common => common
Span 30-31:  cooperation => cooperate-01
Span 39-40:  development => develop-02
Span 28-29:  equality => equality
Span 11-12:  exchange => exchange-01
Span 23-24:  mutual => mutual
Span 6-7:  officially => official
Span 15-16:  organizations => organization
Span 14-15:  other => other
Span 4-5:  pact => pact
Span 17-18:  promote => promote-02
Span 33-34:  respect => respect-01
Span 36-37:  search => search-01
Span 19-22:  Shanghai - spirit => (organization :name (name :op "Shanghai" :op "-" :op "spirit" :op "of" :op "mutual"))

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 12-13:  activities => activity
Oracle Span 16-17:  and => and
Oracle Span 26-27:  benefit => benefit-01
Oracle Span 38-39:  common => common
Oracle Span 30-31:  cooperation => cooperate-01
Oracle Span 39-40:  development => develop-02
Oracle Span 28-29:  equality => equal-01
Oracle Span 11-12:  exchange => exchange-01
Oracle Span 32-33:  multicultural => multicultural
Oracle Span 23-24:  mutual => mutual
Oracle Span 6-7:  officially => official
Oracle Span 15-16:  organizations => organization
Oracle Span 14-15:  other => other
Oracle Span 4-5:  pact => pact
Oracle Span 17-18:  promote => promote-02
Oracle Span 33-34:  respect => respect-01
Oracle Span 9-10:  SCO => (organization :name (name :op "SCO"))
Oracle Span 36-37:  search => search-01
Oracle Span 19-20:  Shanghai => (city :name (name :op "Shanghai"))
Oracle Span 21-22:  spirit => spirit
Oracle Span 7-8:  start => start-01
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Tang => (person :name (name :op "Tang"))
Oracle Span 24-25:  trust => trust-01

Incorrect span: equality => equality
Extra span: Shanghai - spirit => (organization :name (name :op "Shanghai" :op "-" :op "spirit" :op "of" :op "mutual"))
Missing span: Tang => (person :name (name :op "Tang"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: Shanghai => (city :name (name :op "Shanghai"))
Missing span: stated => state-01
Missing span: and => and
Missing span: spirit => spirit
Missing span: trust => trust-01
Missing span: multicultural => multicultural
Missing span: start => start-01
Missing span: equality => equal-01
Dependencies:
1	Tang	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	pact	_	NN	NN	_	8	nsubj	_	_
6	will	_	MD	MD	_	8	aux	_	_
7	officially	_	RB	RB	_	8	advmod	_	_
8	start	_	VB	VB	_	2	ccomp	_	_
9	the	_	DT	DT	_	10	det	_	_
10	SCO	_	NNP	NNP	_	13	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	exchange	_	NN	NN	_	13	nn	_	_
13	activities	_	NNS	NNS	_	8	dobj	_	_
14	with	_	IN	IN	_	8	prep	_	_
15	other	_	JJ	JJ	_	16	amod	_	_
16	organizations	_	NNS	NNS	_	14	pobj	_	_
17	and	_	CC	CC	_	8	cc	_	_
18	promote	_	VB	VB	_	8	conj	_	_
19	the	_	DT	DT	_	20	det	_	_
20	Shanghai-spirit	_	NN	NN	_	18	dobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	mutual	_	JJ	JJ	_	23	amod	_	_
23	trust	_	NN	NN	_	21	pobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	benefit	_	NN	NN	_	32	nn	_	_
26	,	_	,	,	_	32	punct	_	_
27	equality	_	NN	NN	_	32	dep	_	_
28	,	_	,	,	_	32	punct	_	_
29	cooperation	_	NN	NN	_	32	dep	_	_
30	,	_	,	,	_	32	punct	_	_
31	multicultural	_	JJ	JJ	_	32	amod	_	_
32	respect	_	NN	NN	_	23	conj	_	_
33	and	_	CC	CC	_	20	cc	_	_
34	the	_	DT	DT	_	35	det	_	_
35	search	_	NN	NN	_	20	conj	_	_
36	for	_	IN	IN	_	35	prep	_	_
37	common	_	JJ	JJ	_	38	amod	_	_
38	development	_	NN	NN	_	36	pobj	_	_
39	.	_	.	.	_	2	punct	_	_

Oracle:
(a / activity, mod, e / exchange-01)
(a2 / and, op, p3 / promote-02)
(a2 / and, op, s2 / start-01)
(b / benefit-01, mod, m / mutual)
(c / city, name, n3 / name)
(d / develop-02, mod, c3 / common)
(e / exchange-01, ARG0, o2 / organization)
(e / exchange-01, ARG2, o3 / organization)
(n / name, op, "Tang")
(n2 / name, op, "SCO")
(n3 / name, op, "Shanghai")
(o2 / organization, name, n2 / name)
(o3 / organization, mod, o4 / other)
(p / person, name, n / name)
(p3 / promote-02, ARG0, p2 / pact)
(p3 / promote-02, ARG1, s3 / spirit)
(r / respect-01, ARG1, m2 / multicultural)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a2 / and)
(s2 / start-01, ARG0, p2 / pact)
(s2 / start-01, ARG1, a / activity)
(s2 / start-01, mod, o / official)
(s3 / spirit, mod, b / benefit-01)
(s3 / spirit, mod, c / city)
(s3 / spirit, mod, c2 / cooperate-01)
(s3 / spirit, mod, e2 / equal-01)
(s3 / spirit, mod, r / respect-01)
(s3 / spirit, mod, s4 / search-01)
(s3 / spirit, mod, t / trust-01)
(s4 / search-01, ARG1, d / develop-02)
(t / trust-01, mod, m / mutual)

Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),development,develop-02,false), Span(38,39,List(1),common,common,false), Span(36,37,List(2),search,search-01,false), Span(33,34,List(3),respect,respect-01,false), Span(30,31,List(4),cooperation,cooperate-01,false), Span(28,29,List(5),equality,equality,false), Span(26,27,List(6),benefit,benefit-01,false), Span(23,24,List(7),mutual,mutual,false), Span(19,22,List(14, 13, 12, 11, 10, 9, 8),Shanghai - spirit,(organization :name (name :op "Shanghai" :op "-" :op "spirit" :op "of" :op "mutual")),false), Span(17,18,List(15),promote,promote-02,false), Span(15,16,List(16),organizations,organization,false), Span(14,15,List(17),other,other,false), Span(12,13,List(18),activities,activity,false), Span(11,12,List(19),exchange,exchange-01,false), Span(6,7,List(20),officially,official,false), Span(4,5,List(21),pact,pact,false)),Map(2 -> search-01, 5 -> equality, 12 -> "spirit", 15 -> promote-02, 8 -> organization, 21 -> pact, 18 -> activity, 7 -> mutual, 17 -> other, 1 -> common, 4 -> cooperate-01, 11 -> "-", 14 -> "mutual", 20 -> official, 6 -> benefit-01, 0 -> develop-02, 9 -> name, 16 -> organization, 19 -> exchange-01, 3 -> respect-01, 10 -> "Shanghai", 13 -> "of"),Map(e -> equality, n -> name, b -> benefit-01, o3 -> other, p2 -> pact, e2 -> exchange-01, s -> search-01, d -> develop-02, m -> mutual, p -> promote-02, a -> activity, o2 -> organization, r -> respect-01, c -> common, o4 -> official, o -> organization, c2 -> cooperate-01))),[Ljava.lang.String;@3cbf1ba4,Annotation([Ljava.lang.String;@10bea4,[Ljava.lang.String;@7e2c64,[Ljava.lang.String;@7c1e32c9),Annotation([Ljava.lang.String;@383864d5,[Ljava.lang.String;@3dd818e8,[Ledu.cmu.lti.nlp.amr.Dependency;@4cb40e3b),Annotation([Ljava.lang.String;@41b1f51e,[Ljava.lang.String;@3a543f31,[Ljava.lang.String;@47b67fcb),Annotation([Ljava.lang.String;@2b9f74d0,[Ljava.lang.String;@65c86db8,[Ledu.cmu.lti.nlp.amr.Entity;@7efe7b87))
AMR:
(a / activity, accompanier, o2 / organization)
(a / activity, topic, e2 / exchange-01)
(b / benefit-01, ARG0, o4 / official)
(b / benefit-01, ARG1, r / respect-01)
(c2 / cooperate-01, ARG0, o / organization)
(d / develop-02, ARG1, p / promote-02)
(d / develop-02, mod, c / common)
(e2 / exchange-01, ARG1, m / mutual)
(n / name, op, "-")
(n / name, op, "Shanghai")
(n / name, op, "mutual")
(n / name, op, "of")
(n / name, op, "spirit")
(o / organization, name, n / name)
(o2 / organization, mod, o3 / other)
(p / promote-02, ARG0, p2 / pact)
(p / promote-02, ARG1, o / organization)
(p / promote-02, ARG2, a / activity)
(p / promote-02, purpose, b / benefit-01)
(s / search-01, ARG1, e / equality)
(s / search-01, purpose, d / develop-02)

Decoded in 943,091 microseconds
Sentence: 2002-12-28

mkDayMonthYear(2002-12-28,28,12,2002)
mkDayMonthYear(2002-12-28,28,12,2002)
Spans:
Span 0-1:  2002-12-28 => (date-entity :year 2002 :month 12 :day 28)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2002-12-28 => (date-entity :year 2002 :day 28 :month 12)

Incorrect span: 2002-12-28 => (date-entity :year 2002 :month 12 :day 28)
Missing span: 2002-12-28 => (date-entity :year 2002 :day 28 :month 12)
Dependencies:
1	2002-12-28	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 28)
(d / date-entity, month, 12)
(d / date-entity, year, 2002)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-12-28,(date-entity :year 2002 :month 12 :day 28),false)),Map(2 -> 12, 1 -> 2002, 0 -> date-entity, 3 -> 28),Map(2 -> 2002, d -> date-entity, 1 -> 12, 22 -> 28))),[Ljava.lang.String;@ac20bb4,Annotation([Ljava.lang.String;@5a2bd7c8,[Ljava.lang.String;@7ca8d498,[Ljava.lang.String;@7187bac9),Annotation([Ljava.lang.String;@6b8280e6,[Ljava.lang.String;@6f139fc9,[Ledu.cmu.lti.nlp.amr.Dependency;@55259aa7),Annotation([Ljava.lang.String;@19382338,[Ljava.lang.String;@66420549,[Ljava.lang.String;@15dc339f),Annotation([Ljava.lang.String;@6cd56321,[Ljava.lang.String;@34acbc60,[Ledu.cmu.lti.nlp.amr.Entity;@42b28ff1))
AMR:
(d / date-entity, day, 22 / 28)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 2 / 2002)

Decoded in 8,487 microseconds
Sentence: Iraq (IQ)

NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Iraq => (country :name (name :op "Iraq"))

Incorrect span:  => amr-empty
Missing span: Iraq => (country :name (name :op "Iraq"))
Dependencies:
1	Iraq	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	IQ	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Iraq")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@36061cf3,Annotation([Ljava.lang.String;@718dbd79,[Ljava.lang.String;@20134094,[Ljava.lang.String;@76889e60),Annotation([Ljava.lang.String;@706fe5c6,[Ljava.lang.String;@6c15e8c7,[Ledu.cmu.lti.nlp.amr.Dependency;@56380231),Annotation([Ljava.lang.String;@64f1fd08,[Ljava.lang.String;@6b3f6585,[Ljava.lang.String;@282ffbf5),Annotation([Ljava.lang.String;@3e104d4b,[Ljava.lang.String;@55e2fe3c,[Ledu.cmu.lti.nlp.amr.Entity;@45e1aa48))
AMR:


Decoded in 3,920 microseconds
Sentence: International; proliferation; weapons

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 0-1:  International => international
Oracle Span 2-3:  proliferation => proliferate-01
Oracle Span 4-5:  weapons => weapon

Extra span: ; => and
Missing span: weapons => weapon
Missing span: International => international
Missing span: proliferation => proliferate-01
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	proliferation	_	JJ	JJ	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	weapons	_	NNS	NNS	_	3	dep	_	_

Oracle:
(a / and, op, i / international)
(a / and, op, p / proliferate-01)
(a / and, op, w / weapon)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),;,and,false), Span(1,2,List(1),;,and,false)),Map(1 -> and, 0 -> and),Map(a -> and, a2 -> and))),[Ljava.lang.String;@12c60152,Annotation([Ljava.lang.String;@2e807c54,[Ljava.lang.String;@6cd164a6,[Ljava.lang.String;@242a209e),Annotation([Ljava.lang.String;@64469d8,[Ljava.lang.String;@2b8bd798,[Ledu.cmu.lti.nlp.amr.Dependency;@4c18621b),Annotation([Ljava.lang.String;@39c385d6,[Ljava.lang.String;@1cec219f,[Ljava.lang.String;@692e028d),Annotation([Ljava.lang.String;@6629ad09,[Ljava.lang.String;@43e1692f,[Ledu.cmu.lti.nlp.amr.Entity;@3e7c4815))
AMR:
(a2 / and, op, a / and)

Decoded in 7,782 microseconds
Sentence: On December 28, 2002 United Nations inspectors searched 7 Iraqi sites for banned weapons.

mkDayMonthYear(December	28	,	2002,28,December,2002)
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (thing :name (name :op "Iraqi"))
NER Entity: (thing :name (name :op "Iraqi"))
Spans:
Span 13-14:  banned => ban-01
Span 1-5:  December 28 , 2002 => (date-entity :day 28 :month 12 :year 2002)
Span 10-11:  Iraqi => (country :name (name :op "Iraq"))
Span 8-9:  searched => search-01
Span 11-12:  sites => site
Span 5-7:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 9-10:  7 => 7
Oracle Span 13-14:  banned => ban-01
Oracle Span 1-5:  December 28 , 2002 => (date-entity :year 2002 :day 28 :month 12)
Oracle Span 7-8:  inspectors => inspect-01
Oracle Span 10-11:  Iraqi => (country :name (name :op "Iraq"))
Oracle Span 8-9:  searched => search-01
Oracle Span 11-12:  sites => site
Oracle Span 5-7:  United Nations => (have-org-role-91 :ARG1 (organization :name (name :op "Nations" :op "United")))
Oracle Span 14-15:  weapons => weapon

Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Incorrect span: December 28 , 2002 => (date-entity :day 28 :month 12 :year 2002)
Missing span: United Nations => (have-org-role-91 :ARG1 (organization :name (name :op "Nations" :op "United")))
Missing span: December 28 , 2002 => (date-entity :year 2002 :day 28 :month 12)
Missing span: weapons => weapon
Missing span: 7 => 7
Missing span: inspectors => inspect-01
Dependencies:
1	On	_	IN	IN	_	9	prep	_	_
2	December	_	NNP	NNP	_	1	pobj	_	_
3	28	_	CD	CD	_	2	num	_	_
4	,	_	,	,	_	9	punct	_	_
5	2002	_	CD	CD	_	8	num	_	_
6	United	_	NNP	NNP	_	8	nn	_	_
7	Nations	_	NNPS	NNPS	_	8	nn	_	_
8	inspectors	_	NNS	NNS	_	9	nsubj	_	_
9	searched	_	VBD	VBD	_	0	root	_	_
10	7	_	CD	CD	_	12	num	_	_
11	Iraqi	_	JJ	JJ	_	12	amod	_	_
12	sites	_	NNS	NNS	_	9	dobj	_	_
13	for	_	IN	IN	_	12	prep	_	_
14	banned	_	VBN	VBN	_	15	amod	_	_
15	weapons	_	NNS	NNS	_	13	pobj	_	_
16	.	_	.	.	_	9	punct	_	_

Oracle:
(b / ban-01, ARG1, w / weapon)
(c / country, name, n2 / name)
(d / date-entity, day, 28)
(d / date-entity, month, 12)
(d / date-entity, year, 2002)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG3, i / inspect-01)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Iraq")
(o / organization, name, n / name)
(s / search-01, ARG1, s2 / site)
(s / search-01, ARG2, w / weapon)
(s / search-01, time, d / date-entity)
(s2 / site, mod, c / country)
(s2 / site, quant, 7 / 7)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),banned,ban-01,false), Span(11,12,List(1),sites,site,false), Span(10,11,List(4, 3, 2),Iraqi,(country :name (name :op "Iraq")),false), Span(8,9,List(5),searched,search-01,false), Span(5,7,List(9, 8, 7, 6),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(1,5,List(13, 12, 11, 10),December 28 , 2002,(date-entity :day 28 :month 12 :year 2002),false)),Map(2 -> country, 5 -> search-01, 12 -> 12, 8 -> "United", 7 -> name, 1 -> site, 4 -> "Iraq", 11 -> 28, 6 -> organization, 0 -> ban-01, 9 -> "Nations", 3 -> name, 10 -> date-entity, 13 -> 2002),Map(n -> name, 2 -> 28, s2 -> search-01, b -> ban-01, s -> site, d -> date-entity, 1 -> 12, c -> country, 22 -> 2002, o -> organization, n2 -> name))),[Ljava.lang.String;@27df0f3d,Annotation([Ljava.lang.String;@c35af2a,[Ljava.lang.String;@44550792,[Ljava.lang.String;@1835d3ed),Annotation([Ljava.lang.String;@474c9131,[Ljava.lang.String;@66213a0d,[Ledu.cmu.lti.nlp.amr.Dependency;@aa4d8cc),Annotation([Ljava.lang.String;@3cb8c8ce,[Ljava.lang.String;@1fde0371,[Ljava.lang.String;@70c0a3d5),Annotation([Ljava.lang.String;@5c8e67b9,[Ljava.lang.String;@260a3a5e,[Ledu.cmu.lti.nlp.amr.Entity;@49206065))
AMR:
(b / ban-01, ARG1, s / site)
(b / ban-01, ARG2, o / organization)
(c / country, name, n / name)
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 22 / 2002)
(n / name, op, "Iraq")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(o / organization, name, n2 / name)
(s / site, location, c / country)
(s2 / search-01, ARG0, d / date-entity)
(s2 / search-01, ARG1, s / site)

Decoded in 145,325 microseconds
Sentence: United Nations arms inspectors on December 28, 2002 visited 7 sites in Iraq in order to search for prohibited weapons of mass destruction according to spokesman Hiro Ueki.

NER Entity: (organization :name (name :op "United" :op "Nations"))
mkDayMonthYear(December	28	,	2002,28,December,2002)
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (person :name (name :op "Hiro" :op "Ueki"))
Spans:
Span 5-9:  December 28 , 2002 => (date-entity :day 28 :month 12 :year 2002)
Span 23-24:  destruction => destroy-01
Span 27-29:  Hiro Ueki => (person :name (name :op "Hiro" :op "Ueki"))
Span 22-23:  mass => mass
Span 19-20:  prohibited => prohibit-01
Span 17-18:  search => search-01
Span 11-12:  sites => site
Span 26-27:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 0-2:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 9-10:  visited => visit-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  7 => 7
Oracle Span 2-3:  arms => arm
Oracle Span 5-9:  December 28 , 2002 => (date-entity :year 2002 :day 28 :month 12)
Oracle Span 23-24:  destruction => destroy-01
Oracle Span 27-29:  Hiro Ueki => (person :name (name :op "Ueki" :op "Hiro"))
Oracle Span 3-4:  inspectors => inspect-01
Oracle Span 13-14:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 22-23:  mass => mass
Oracle Span 19-20:  prohibited => prohibit-01
Oracle Span 17-18:  search => search-01
Oracle Span 11-12:  sites => site
Oracle Span 26-27:  spokesman => (have-org-role-91 :ARG2 spokesman)
Oracle Span 0-2:  United Nations => (have-org-role-91 :ARG1 (organization :name (name :op "Nations" :op "United")))
Oracle Span 9-10:  visited => visit-01
Oracle Span 20-21:  weapons => weapon

Incorrect span: Hiro Ueki => (person :name (name :op "Hiro" :op "Ueki"))
Incorrect span: December 28 , 2002 => (date-entity :day 28 :month 12 :year 2002)
Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: Hiro Ueki => (person :name (name :op "Ueki" :op "Hiro"))
Missing span: United Nations => (have-org-role-91 :ARG1 (organization :name (name :op "Nations" :op "United")))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: December 28 , 2002 => (date-entity :year 2002 :day 28 :month 12)
Missing span: weapons => weapon
Missing span: 7 => 7
Missing span: arms => arm
Missing span: inspectors => inspect-01
Dependencies:
1	United	_	NNP	NNP	_	4	nn	_	_
2	Nations	_	NNPS	NNPS	_	4	nn	_	_
3	arms	_	NNP	NNP	_	4	nn	_	_
4	inspectors	_	NNS	NNS	_	10	nsubj	_	_
5	on	_	IN	IN	_	4	prep	_	_
6	December	_	NNP	NNP	_	5	pobj	_	_
7	28	_	CD	CD	_	6	num	_	_
8	,	_	,	,	_	6	punct	_	_
9	2002	_	CD	CD	_	6	num	_	_
10	visited	_	VBD	VBD	_	0	root	_	_
11	7	_	CD	CD	_	12	num	_	_
12	sites	_	NNS	NNS	_	10	dobj	_	_
13	in	_	IN	IN	_	10	prep	_	_
14	Iraq	_	NNP	NNP	_	13	pobj	_	_
15	in	_	IN	IN	_	18	mark	_	_
16	order	_	NN	NN	_	18	dep	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	search	_	VB	VB	_	10	advcl	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	prohibited	_	JJ	JJ	_	21	amod	_	_
21	weapons	_	NNS	NNS	_	19	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	mass	_	JJ	JJ	_	24	amod	_	_
24	destruction	_	NN	NN	_	22	pobj	_	_
25	according	_	VBG	VBG	_	18	prep	_	_
26	to	_	TO	TO	_	25	pcomp	_	_
27	spokesman	_	NN	NN	_	29	nn	_	_
28	Hiro	_	NNP	NNP	_	29	nn	_	_
29	Ueki	_	NNP	NNP	_	26	pobj	_	_
30	.	_	.	.	_	10	punct	_	_

Oracle:
(c / country, name, n3 / name)
(d / date-entity, day, 28)
(d / date-entity, month, 12)
(d / date-entity, year, 2002)
(d2 / destroy-01, ARG0, w / weapon)
(d2 / destroy-01, degree, m / mass)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG3, i / inspect-01)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG2, s2 / spokesman)
(i / inspect-01, ARG1, a / arm)
(n / name, op, "Hiro")
(n / name, op, "Ueki")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(n3 / name, op, "Iraq")
(o / organization, name, n2 / name)
(p2 / prohibit-01, ARG1, w / weapon)
(p3 / person, name, n / name)
(s3 / site, location, c / country)
(s3 / site, quant, 7 / 7)
(s4 / search-01, ARG2, w / weapon)
(v / visit-01, ARG1, s3 / site)
(v / visit-01, purpose, s4 / search-01)
(v / visit-01, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(3, 2, 1, 0),Hiro Ueki,(person :name (name :op "Hiro" :op "Ueki")),false), Span(26,27,List(5, 4),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(23,24,List(6),destruction,destroy-01,false), Span(22,23,List(7),mass,mass,false), Span(19,20,List(8),prohibited,prohibit-01,false), Span(17,18,List(9),search,search-01,false), Span(11,12,List(10),sites,site,false), Span(9,10,List(11),visited,visit-01,false), Span(5,9,List(15, 14, 13, 12),December 28 , 2002,(date-entity :day 28 :month 12 :year 2002),false), Span(0,2,List(19, 18, 17, 16),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> "Hiro", 5 -> spokesman, 12 -> date-entity, 15 -> 2002, 8 -> prohibit-01, 18 -> "United", 7 -> mass, 17 -> name, 1 -> name, 4 -> have-org-role-91, 11 -> visit-01, 14 -> 12, 6 -> destroy-01, 0 -> person, 9 -> search-01, 16 -> organization, 19 -> "Nations", 3 -> "Ueki", 10 -> site, 13 -> 28),Map(n -> name, h -> have-org-role-91, 2 -> 28, s2 -> search-01, p2 -> prohibit-01, s -> spokesman, v -> visit-01, d -> destroy-01, m -> mass, 1 -> 12, p -> person, d2 -> date-entity, s3 -> site, 22 -> 2002, o -> organization, n2 -> name))),[Ljava.lang.String;@3c0bbc9f,Annotation([Ljava.lang.String;@1317b708,[Ljava.lang.String;@6438a7fe,[Ljava.lang.String;@2e51d054),Annotation([Ljava.lang.String;@4f5f6e45,[Ljava.lang.String;@615e3f51,[Ledu.cmu.lti.nlp.amr.Dependency;@407873d3),Annotation([Ljava.lang.String;@608bc8f8,[Ljava.lang.String;@5412bfea,[Ljava.lang.String;@44a6a68e),Annotation([Ljava.lang.String;@4743a322,[Ljava.lang.String;@79316f3a,[Ledu.cmu.lti.nlp.amr.Entity;@381d7219))
AMR:
(d / destroy-01, ARG1, p / person)
(d / destroy-01, degree, m / mass)
(d2 / date-entity, day, 2 / 28)
(d2 / date-entity, month, 1 / 12)
(d2 / date-entity, year, 22 / 2002)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, s / spokesman)
(n / name, op, "Hiro")
(n / name, op, "Ueki")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(p2 / prohibit-01, ARG1, v / visit-01)
(s2 / search-01, ARG0, s3 / site)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, s3 / site)
(v / visit-01, time, d2 / date-entity)

Decoded in 195,836 microseconds
Sentence: A team of biological experts from the United Nations Monitoring, Verification and Inspection Commission visited the Yaffa juice plant of the National Food Industries Co. in Baghdad's zafaraniyah industrial area.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "Inspection" :op "Commission"))
NER Entity: (thing :name (name :op "Yaffa"))
NER Entity: (organization :name (name :op "National" :op "Food" :op "Industries" :op "Co."))
NER Entity: (country :name (name :op "Baghdad"))
NER Entity: (country :name (name :op "Baghdad"))
Spans:
Span 31-32:  area => area
Span 27-28:  Baghdad => (city :name (name :op "Baghdad"))
Span 3-4:  biological => biology
Span 13-15:  Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Span 22-26:  National Food Industries Co. => (organization :name (name :op "National" :op "Food" :op "Industries" :op "Co."))
Span 19-20:  plant => plant
Span 1-2:  team => team
Span 7-9:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 15-16:  visited => visit-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 31-32:  area => area
Oracle Span 27-28:  Baghdad => (city :name (name :op "Baghdad"))
Oracle Span 3-4:  biological => biology
Oracle Span 4-5:  experts => expert-41
Oracle Span 18-19:  juice => juice
Oracle Span 22-26:  National Food Industries Co. => (company :name (name :op "Co." :op "Industries" :op "Food" :op "National"))
Oracle Span 19-20:  plant => plant
Oracle Span 1-2:  team => team
Oracle Span 7-15:  United Nations Monitoring , Verification and Inspection Commission => (have-org-role-91 :ARG1 (organization :name (name :op "Commission" :op "Inspection" :op "and" :op "Verification" :op "Monitoring" :op "Nations" :op "United")))
Oracle Span 15-16:  visited => visit-01
Oracle Span 17-18:  Yaffa => (name :op "Yaffa")
Oracle Span 29-30:  zafaraniyah => (city-district :name (name :op "Zafaraniyah"))

Incorrect span: National Food Industries Co. => (organization :name (name :op "National" :op "Food" :op "Industries" :op "Co."))
Extra span: Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Extra span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: United Nations Monitoring , Verification and Inspection Commission => (have-org-role-91 :ARG1 (organization :name (name :op "Commission" :op "Inspection" :op "and" :op "Verification" :op "Monitoring" :op "Nations" :op "United")))
Missing span: Yaffa => (name :op "Yaffa")
Missing span: National Food Industries Co. => (company :name (name :op "Co." :op "Industries" :op "Food" :op "National"))
Missing span: zafaraniyah => (city-district :name (name :op "Zafaraniyah"))
Missing span: juice => juice
Missing span: experts => expert-41
Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	team	_	NN	NN	_	16	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	biological	_	JJ	JJ	_	5	amod	_	_
5	experts	_	NNS	NNS	_	3	pobj	_	_
6	from	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	10	det	_	_
8	United	_	NNP	NNP	_	10	nn	_	_
9	Nations	_	NNPS	NNPS	_	10	nn	_	_
10	Monitoring	_	NN	NN	_	6	pobj	_	_
11	,	_	,	,	_	10	punct	_	_
12	Verification	_	NNP	NNP	_	10	conj	_	_
13	and	_	CC	CC	_	10	cc	_	_
14	Inspection	_	NNP	NNP	_	15	nn	_	_
15	Commission	_	NNP	NNP	_	10	conj	_	_
16	visited	_	VBD	VBD	_	0	root	_	_
17	the	_	DT	DT	_	20	det	_	_
18	Yaffa	_	NNP	NNP	_	20	nn	_	_
19	juice	_	NN	NN	_	20	nn	_	_
20	plant	_	NN	NN	_	16	dobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	26	det	_	_
23	National	_	NNP	NNP	_	26	nn	_	_
24	Food	_	NNP	NNP	_	26	nn	_	_
25	Industries	_	NNPS	NNPS	_	26	nn	_	_
26	Co.	_	NNP	NNP	_	21	pobj	_	_
27	in	_	IN	IN	_	16	prep	_	_
28	Baghdad	_	NNP	NNP	_	32	poss	_	_
29	's	_	POS	POS	_	28	possessive	_	_
30	zafaraniyah	_	JJ	JJ	_	32	amod	_	_
31	industrial	_	JJ	JJ	_	32	amod	_	_
32	area	_	NN	NN	_	27	pobj	_	_
33	.	_	.	.	_	16	punct	_	_

Oracle:
(c / city, name, n5 / name)
(c2 / city-district, location, c / city)
(c2 / city-district, mod, a / area)
(c2 / city-district, name, n6 / name)
(c3 / company, location, c2 / city-district)
(c3 / company, name, n4 / name)
(e / expert-41, ARG2, b / biology)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG3, e / expert-41)
(j / juice, name, n3 / name)
(j / juice, poss, c3 / company)
(n / name, op, "Commission")
(n / name, op, "Inspection")
(n / name, op, "Monitoring")
(n / name, op, "Nations")
(n / name, op, "United")
(n / name, op, "Verification")
(n / name, op, "and")
(n3 / name, op, "Yaffa")
(n4 / name, op, "Co.")
(n4 / name, op, "Food")
(n4 / name, op, "Industries")
(n4 / name, op, "National")
(n5 / name, op, "Baghdad")
(n6 / name, op, "Zafaraniyah")
(o / organization, name, n / name)
(p2 / plant, mod, j / juice)
(v / visit-01, ARG0, t / team)
(v / visit-01, ARG1, p2 / plant)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),area,area,false), Span(27,28,List(3, 2, 1),Baghdad,(city :name (name :op "Baghdad")),false), Span(22,26,List(9, 8, 7, 6, 5, 4),National Food Industries Co.,(organization :name (name :op "National" :op "Food" :op "Industries" :op "Co.")),false), Span(19,20,List(10),plant,plant,false), Span(15,16,List(11),visited,visit-01,false), Span(13,15,List(15, 14, 13, 12),Inspection Commission,(organization :name (name :op "Inspection" :op "Commission")),false), Span(7,9,List(19, 18, 17, 16),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(3,4,List(20),biological,biology,false), Span(1,2,List(21),team,team,false)),Map(2 -> name, 5 -> name, 12 -> organization, 15 -> "Commission", 8 -> "Industries", 21 -> team, 18 -> "United", 7 -> "Food", 17 -> name, 1 -> city, 4 -> organization, 11 -> visit-01, 14 -> "Inspection", 20 -> biology, 6 -> "National", 0 -> area, 9 -> "Co.", 16 -> organization, 19 -> "Nations", 3 -> "Baghdad", 10 -> plant, 13 -> name),Map(n -> name, b -> biology, t -> team, o3 -> organization, n4 -> name, v -> visit-01, p -> plant, a -> area, n3 -> name, o2 -> organization, c -> city, o -> organization, n2 -> name))),[Ljava.lang.String;@49fe3142,Annotation([Ljava.lang.String;@13fed1ec,[Ljava.lang.String;@61c42416,[Ljava.lang.String;@329a1f8d),Annotation([Ljava.lang.String;@a565cbd,[Ljava.lang.String;@6fc29daa,[Ledu.cmu.lti.nlp.amr.Dependency;@2f66f0d0),Annotation([Ljava.lang.String;@4d62f4c6,[Ljava.lang.String;@7569ea63,[Ljava.lang.String;@ebd06a9),Annotation([Ljava.lang.String;@16c587de,[Ljava.lang.String;@4cdb8504,[Ledu.cmu.lti.nlp.amr.Entity;@76db540e))
AMR:
(b / biology, op, v / visit-01)
(c / city, name, n / name)
(n / name, op, "Baghdad")
(n2 / name, op, "Co.")
(n2 / name, op, "Food")
(n2 / name, op, "Industries")
(n2 / name, op, "National")
(n3 / name, op, "Commission")
(n3 / name, op, "Inspection")
(n4 / name, op, "Nations")
(n4 / name, op, "United")
(o / organization, location, c / city)
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(o3 / organization, name, n4 / name)
(p / plant, location, a / area)
(p / plant, poss, o / organization)
(t / team, prep-as, o3 / organization)
(v / visit-01, ARG0, t / team)
(v / visit-01, ARG1, p / plant)
(v / visit-01, mod, o2 / organization)

Decoded in 730,162 microseconds
Sentence: The Yaffa juice plant is self-financed, has a mixed ownership and is a previously declared and monitored site due to the presence of some dual-use equipment.

NER Entity: (thing :name (name :op "Yaffa"))
Spans:
Span 17-18:  declared => declare-01
Span 27-28:  dual => dual
Span 30-31:  equipment => equipment
Span 7-8:  financed => (thing :manner-of finance-01)
Span 11-12:  mixed => mix-01
Span 19-20:  monitored => monitor-01
Span 3-4:  plant => plant
Span 16-17:  previously => previous
Span 5-6:  self => self
Span 20-21:  site => site
Span 26-27:  some => some
Span 29-30:  use => use-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 17-18:  declared => declare-02
Oracle Span 27-28:  dual => dual
Oracle Span 30-31:  equipment => equipment
Oracle Span 7-8:  financed => finance-01
Oracle Span 9-10:  has => have-03
Oracle Span 2-3:  juice => juice
Oracle Span 11-12:  mixed => mix-01
Oracle Span 19-20:  monitored => monitor-01
Oracle Span 3-4:  plant => plant
Oracle Span 16-17:  previously => previous
Oracle Span 20-21:  site => site
Oracle Span 26-27:  some => some
Oracle Span 29-30:  use => use-01
Oracle Span 1-2:  Yaffa => (name :op "Yaffa")

Incorrect span: declared => declare-01
Incorrect span: financed => (thing :manner-of finance-01)
Extra span: self => self
Missing span: Yaffa => (name :op "Yaffa")
Missing span: and => and
Missing span: declared => declare-02
Missing span: has => have-03
Missing span: financed => finance-01
Missing span: juice => juice
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Yaffa	_	NNP	NNP	_	4	nn	_	_
3	juice	_	NN	NN	_	4	nn	_	_
4	plant	_	NN	NN	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	self-financed	_	JJ	JJ	_	0	root	_	_
7	,	_	,	,	_	6	punct	_	_
8	has	_	VBZ	VBZ	_	6	conj	_	_
9	a	_	DT	DT	_	11	det	_	_
10	mixed	_	VBN	VBN	_	11	amod	_	_
11	ownership	_	NN	NN	_	8	dobj	_	_
12	and	_	CC	CC	_	6	cc	_	_
13	is	_	VBZ	VBZ	_	19	cop	_	_
14	a	_	DT	DT	_	19	det	_	_
15	previously	_	RB	RB	_	16	advmod	_	_
16	declared	_	VBN	VBN	_	19	amod	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	monitored	_	VBN	VBN	_	16	conj	_	_
19	site	_	NN	NN	_	6	conj	_	_
20	due	_	JJ	JJ	_	21	mwe	_	_
21	to	_	TO	TO	_	19	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	presence	_	NN	NN	_	21	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	some	_	DT	DT	_	27	det	_	_
26	dual-use	_	JJ	JJ	_	27	amod	_	_
27	equipment	_	NN	NN	_	24	pobj	_	_
28	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, f / finance-01)
(a / and, op, h / have-03)
(a / and, op, s3 / site)
(d / declare-02, ARG1, s3 / site)
(d / declare-02, time, p3 / previous)
(e / equipment, mod, s2 / some)
(f / finance-01, ARG0, p2 / plant)
(f / finance-01, ARG1, p2 / plant)
(h / have-03, ARG0, p2 / plant)
(j / juice, name, n / name)
(m / monitor-01, ARG1, s3 / site)
(m / monitor-01, time, p3 / previous)
(n / name, op, "Yaffa")
(p2 / plant, mod, j / juice)
(s3 / site, domain, p2 / plant)
(u / use-01, ARG1, e / equipment)
(u / use-01, ARG2, d2 / dual)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),equipment,equipment,false), Span(29,30,List(1),use,use-01,false), Span(27,28,List(2),dual,dual,false), Span(26,27,List(3),some,some,false), Span(20,21,List(4),site,site,false), Span(19,20,List(5),monitored,monitor-01,false), Span(17,18,List(6),declared,declare-01,false), Span(16,17,List(7),previously,previous,false), Span(11,12,List(8),mixed,mix-01,false), Span(7,8,List(10, 9),financed,(thing :manner-of finance-01),false), Span(5,6,List(11),self,self,false), Span(3,4,List(12),plant,plant,false)),Map(2 -> dual, 5 -> monitor-01, 12 -> plant, 8 -> mix-01, 7 -> previous, 1 -> use-01, 4 -> site, 11 -> self, 6 -> declare-01, 0 -> equipment, 9 -> thing, 3 -> some, 10 -> finance-01),Map(e -> equipment, s2 -> site, t -> thing, m2 -> mix-01, p2 -> plant, s -> some, d -> dual, m -> monitor-01, p -> previous, d2 -> declare-01, s3 -> self, u -> use-01, f -> finance-01))),[Ljava.lang.String;@10358c32,Annotation([Ljava.lang.String;@2af4129d,[Ljava.lang.String;@3a175162,[Ljava.lang.String;@1640190a),Annotation([Ljava.lang.String;@2a2843ec,[Ljava.lang.String;@2042ccce,[Ledu.cmu.lti.nlp.amr.Dependency;@20de05e5),Annotation([Ljava.lang.String;@36c0d0bd,[Ljava.lang.String;@5e1fc2aa,[Ljava.lang.String;@688d411b),Annotation([Ljava.lang.String;@382c90c2,[Ljava.lang.String;@859ea42,[Ledu.cmu.lti.nlp.amr.Entity;@28737371))
AMR:
(d2 / declare-01, ARG1, s2 / site)
(d2 / declare-01, time, p / previous)
(e / equipment, mod, s / some)
(f / finance-01, ARG1, p2 / plant)
(f / finance-01, manner, t / thing)
(m / monitor-01, ARG1, s2 / site)
(m2 / mix-01, ARG1, p2 / plant)
(s2 / site, domain, p2 / plant)
(s3 / self, domain, p2 / plant)
(u / use-01, ARG1, e / equipment)
(u / use-01, ARG2, m2 / mix-01)
(u / use-01, mod, d / dual)

Decoded in 323,896 microseconds
Sentence: A biological team returned to the Al Kindi veterinary vaccines site as a follow-up to the previous inspection carried out on December 22, 2002.

NER Entity: (person :name (name :op "Al" :op "Kindi"))
mkDayMonthYear(December	22	,	2002,22,December,2002)
Spans:
Span 6-8:  Al Kindi => (person :name (name :op "Al" :op "Kindi"))
Span 1-2:  biological => biology
Span 23-27:  December 22 , 2002 => (date-entity :day 22 :month 12 :year 2002)
Span 19-20:  inspection => inspect-01
Span 18-19:  previous => previous
Span 3-4:  returned => return-01
Span 10-11:  site => site
Span 2-3:  team => team
Span 9-10:  vaccines => vaccine
Span 8-9:  veterinary => veterinary

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 6-8:  Al Kindi => (name :op "Kindi" :op "Al")
Oracle Span 1-2:  biological => biology
Oracle Span 20-21:  carried => carry-03
Oracle Span 23-27:  December 22 , 2002 => (date-entity :year 2002 :day 22 :month 12)
Oracle Span 13-14:  follow => follow-03
Oracle Span 19-20:  inspection => inspect-01
Oracle Span 18-19:  previous => previous
Oracle Span 3-4:  returned => return-01
Oracle Span 10-11:  site => site
Oracle Span 2-3:  team => team
Oracle Span 9-10:  vaccines => vaccine
Oracle Span 8-9:  veterinary => veterinary

Incorrect span: December 22 , 2002 => (date-entity :day 22 :month 12 :year 2002)
Incorrect span: Al Kindi => (person :name (name :op "Al" :op "Kindi"))
Missing span: Al Kindi => (name :op "Kindi" :op "Al")
Missing span: December 22 , 2002 => (date-entity :year 2002 :day 22 :month 12)
Missing span: follow => follow-03
Missing span: carried => carry-03
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	biological	_	JJ	JJ	_	3	amod	_	_
3	team	_	NN	NN	_	4	nsubj	_	_
4	returned	_	VBD	VBD	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	the	_	DT	DT	_	11	det	_	_
7	Al	_	NNP	NNP	_	11	nn	_	_
8	Kindi	_	NNP	NNP	_	11	nn	_	_
9	veterinary	_	JJ	JJ	_	11	amod	_	_
10	vaccines	_	NNS	NNS	_	11	nn	_	_
11	site	_	NN	NN	_	5	pobj	_	_
12	as	_	IN	IN	_	19	mark	_	_
13	a	_	DT	DT	_	14	det	_	_
14	follow-up	_	NN	NN	_	19	nsubj	_	_
15	to	_	TO	TO	_	14	prep	_	_
16	the	_	DT	DT	_	18	det	_	_
17	previous	_	JJ	JJ	_	18	amod	_	_
18	inspection	_	NN	NN	_	15	pobj	_	_
19	carried	_	VBD	VBD	_	4	advcl	_	_
20	out	_	RP	RP	_	19	prt	_	_
21	on	_	IN	IN	_	19	prep	_	_
22	December	_	NNP	NNP	_	21	pobj	_	_
23	22	_	CD	CD	_	22	num	_	_
24	,	_	,	,	_	22	punct	_	_
25	2002	_	CD	CD	_	22	num	_	_
26	.	_	.	.	_	4	punct	_	_

Oracle:
(c / carry-03, ARG1, i / inspect-01)
(c / carry-03, time, d / date-entity)
(d / date-entity, day, 22)
(d / date-entity, month, 12)
(d / date-entity, year, 2002)
(f / follow-03, ARG0, r / return-01)
(f / follow-03, ARG1, i / inspect-01)
(i / inspect-01, time, p / previous)
(n / name, op, "Al")
(n / name, op, "Kindi")
(r / return-01, ARG1, t / team)
(r / return-01, ARG3, s / site)
(s / site, mod, v / vaccine)
(s / site, name, n / name)
(t / team, mod, b / biology)
(v / vaccine, mod, v2 / veterinary)

Input(Some(Graph(null,ArrayBuffer(Span(23,27,List(3, 2, 1, 0),December 22 , 2002,(date-entity :day 22 :month 12 :year 2002),false), Span(19,20,List(4),inspection,inspect-01,false), Span(18,19,List(5),previous,previous,false), Span(10,11,List(6),site,site,false), Span(9,10,List(7),vaccines,vaccine,false), Span(8,9,List(8),veterinary,veterinary,false), Span(6,8,List(12, 11, 10, 9),Al Kindi,(person :name (name :op "Al" :op "Kindi")),false), Span(3,4,List(13),returned,return-01,false), Span(2,3,List(14),team,team,false), Span(1,2,List(15),biological,biology,false)),Map(2 -> 12, 5 -> previous, 12 -> "Kindi", 15 -> biology, 8 -> veterinary, 7 -> vaccine, 1 -> 22, 4 -> inspect-01, 11 -> "Al", 14 -> team, 6 -> site, 0 -> date-entity, 9 -> person, 3 -> 2002, 10 -> name, 13 -> return-01),Map(v2 -> veterinary, n -> name, 2 -> 22, b -> biology, t -> team, p2 -> person, s -> site, v -> vaccine, d -> date-entity, 1 -> 12, p -> previous, i -> inspect-01, r -> return-01, 22 -> 2002))),[Ljava.lang.String;@2af46afd,Annotation([Ljava.lang.String;@760245e1,[Ljava.lang.String;@31ceba99,[Ljava.lang.String;@295bf2a),Annotation([Ljava.lang.String;@bbf9e07,[Ljava.lang.String;@6ff6efdc,[Ledu.cmu.lti.nlp.amr.Dependency;@2b289ac9),Annotation([Ljava.lang.String;@4eb1c69,[Ljava.lang.String;@73d3e555,[Ljava.lang.String;@2b037cfc),Annotation([Ljava.lang.String;@44924587,[Ljava.lang.String;@18460128,[Ledu.cmu.lti.nlp.amr.Entity;@74d3b638))
AMR:
(d / date-entity, day, 2 / 22)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 22 / 2002)
(i / inspect-01, ARG0, d / date-entity)
(i / inspect-01, ARG1, b / biology)
(i / inspect-01, time, p / previous)
(n / name, op, "Al")
(n / name, op, "Kindi")
(p2 / person, name, n / name)
(r / return-01, ARG1, t / team)
(r / return-01, ARG4, s / site)
(s / site, mod, p2 / person)
(s / site, mod, v / vaccine)
(s / site, mod, v2 / veterinary)
(t / team, mod, b / biology)

Decoded in 616,916 microseconds
Sentence: Some United Nations Monitoring, Verification and Inspection Commission missile experts conducted an unannounced visit to the Al qaib warhead-filling factory in the Al Qa Qaa complex which undertakes filling of warheads of Al Samoud and Al Fatah missiles.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "Inspection" :op "Commission"))
NER Entity: (country :name (name :op "Al"))
NER Entity: (person :name (name :op "Al" :op "Qa"))
NER Entity: (person :name (name :op "Al" :op "Samoud"))
NER Entity: (person :name (name :op "Al" :op "Fatah"))
Spans:
Span 28-29:  complex => complex
Span 11-12:  conducted => conduct-01
Span 22-23:  factory => factory
Span 23-25:  in the => (person :name (name :op "Al" :op "Qa"))
Span 7-9:  Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Span 9-10:  missile => missile
Span 40-41:  missiles => missile
Span 36-38:  Samoud and => (person :name (name :op "Al" :op "Fatah"))
Span 1-3:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 14-15:  visit => visit-01
Span 19-20:  warhead => warhead
Span 33-35:  warheads of => (person :name (name :op "Al" :op "Samoud"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 38-40:  Al Fatah => (name :op "Fatah" :op "Al")
Oracle Span 25-28:  Al Qa Qaa => (name :op "Qaa" :op "Qa" :op "Al")
Oracle Span 17-19:  Al qaib => (name :op "Qaib" :op "Al")
Oracle Span 35-37:  Al Samoud => (name :op "Samoud" :op "Al")
Oracle Span 37-38:  and => and
Oracle Span 28-29:  complex => complex
Oracle Span 11-12:  conducted => conduct-01
Oracle Span 10-11:  experts => expert-41
Oracle Span 22-23:  factory => factory
Oracle Span 21-22:  filling => fill-01
Oracle Span 31-32:  filling => fill-01
Oracle Span 9-10:  missile => missile
Oracle Span 40-41:  missiles => missile
Oracle Span 0-1:  Some => some
Oracle Span 13-14:  unannounced => (announce-01 :polarity -)
Oracle Span 30-31:  undertakes => undertake-01
Oracle Span 1-9:  United Nations Monitoring , Verification and Inspection Commission => (have-org-role-91 :ARG1 (organization :name (name :op "Commission" :op "Inspection" :op "and" :op "Verification" :op "Monitoring" :op "Nations" :op "United")))
Oracle Span 14-15:  visit => visit-01
Oracle Span 19-20:  warhead => warhead
Oracle Span 33-34:  warheads => warhead

Extra span: Samoud and => (person :name (name :op "Al" :op "Fatah"))
Extra span: warheads of => (person :name (name :op "Al" :op "Samoud"))
Extra span: in the => (person :name (name :op "Al" :op "Qa"))
Extra span: Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Extra span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: United Nations Monitoring , Verification and Inspection Commission => (have-org-role-91 :ARG1 (organization :name (name :op "Commission" :op "Inspection" :op "and" :op "Verification" :op "Monitoring" :op "Nations" :op "United")))
Missing span: Al qaib => (name :op "Qaib" :op "Al")
Missing span: Al Qa Qaa => (name :op "Qaa" :op "Qa" :op "Al")
Missing span: Al Samoud => (name :op "Samoud" :op "Al")
Missing span: Al Fatah => (name :op "Fatah" :op "Al")
Missing span: undertakes => undertake-01
Missing span: filling => fill-01
Missing span: and => and
Missing span: filling => fill-01
Missing span: warheads => warhead
Missing span: Some => some
Missing span: experts => expert-41
Missing span: unannounced => (announce-01 :polarity -)
Dependencies:
1	Some	_	DT	DT	_	11	det	_	_
2	United	_	NNP	NNP	_	11	nn	_	_
3	Nations	_	NNP	NNP	_	11	nn	_	_
4	Monitoring	_	NNP	NNP	_	11	nn	_	_
5	,	_	,	,	_	4	punct	_	_
6	Verification	_	NNP	NNP	_	4	conj	_	_
7	and	_	CC	CC	_	4	cc	_	_
8	Inspection	_	NNP	NNP	_	4	conj	_	_
9	Commission	_	NNP	NNP	_	11	nn	_	_
10	missile	_	NN	NN	_	11	nn	_	_
11	experts	_	NNS	NNS	_	12	nsubj	_	_
12	conducted	_	VBD	VBD	_	0	root	_	_
13	an	_	DT	DT	_	15	det	_	_
14	unannounced	_	JJ	JJ	_	15	amod	_	_
15	visit	_	NN	NN	_	12	dobj	_	_
16	to	_	TO	TO	_	12	prep	_	_
17	the	_	DT	DT	_	21	det	_	_
18	Al	_	NNP	NNP	_	21	nn	_	_
19	qaib	_	NNP	NNP	_	21	nn	_	_
20	warhead-filling	_	JJ	JJ	_	21	amod	_	_
21	factory	_	NN	NN	_	16	pobj	_	_
22	in	_	IN	IN	_	12	prep	_	_
23	the	_	DT	DT	_	27	det	_	_
24	Al	_	NNP	NNP	_	27	nn	_	_
25	Qa	_	NNP	NNP	_	27	nn	_	_
26	Qaa	_	NNP	NNP	_	27	nn	_	_
27	complex	_	NN	NN	_	22	pobj	_	_
28	which	_	WDT	WDT	_	29	nsubj	_	_
29	undertakes	_	VBZ	VBZ	_	27	rcmod	_	_
30	filling	_	VBG	VBG	_	29	xcomp	_	_
31	of	_	IN	IN	_	30	prep	_	_
32	warheads	_	NNS	NNS	_	31	pobj	_	_
33	of	_	IN	IN	_	32	prep	_	_
34	Al	_	NNP	NNP	_	35	nn	_	_
35	Samoud	_	NNP	NNP	_	33	pobj	_	_
36	and	_	CC	CC	_	35	cc	_	_
37	Al	_	NNP	NNP	_	39	nn	_	_
38	Fatah	_	NNP	NNP	_	39	nn	_	_
39	missiles	_	NNS	NNS	_	35	conj	_	_
40	.	_	.	.	_	12	punct	_	_

Oracle:
(a / announce-01, ARG1, v / visit-01)
(a / announce-01, polarity, -)
(a2 / and, op, m / missile)
(a2 / and, op, m2 / missile)
(c / complex, name, n2 / name)
(c2 / conduct-01, ARG1, v / visit-01)
(f / factory, location, c / complex)
(f / factory, name, n / name)
(f2 / fill-01, ARG0, f / factory)
(f2 / fill-01, ARG1, w / warhead)
(f3 / fill-01, ARG0, c / complex)
(f3 / fill-01, ARG1, w2 / warhead)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG3, e / expert-41)
(m / missile, name, n3 / name)
(m2 / missile, name, n4 / name)
(n / name, op, "Al")
(n / name, op, "Qaib")
(n2 / name, op, "Al")
(n2 / name, op, "Qa")
(n2 / name, op, "Qaa")
(n3 / name, op, "Al")
(n3 / name, op, "Samoud")
(n4 / name, op, "Al")
(n4 / name, op, "Fatah")
(n5 / name, op, "Commission")
(n5 / name, op, "Inspection")
(n5 / name, op, "Monitoring")
(n5 / name, op, "Nations")
(n5 / name, op, "United")
(n5 / name, op, "Verification")
(n5 / name, op, "and")
(o / organization, name, n5 / name)
(u / undertake-01, ARG0, c / complex)
(u / undertake-01, ARG1, f3 / fill-01)
(v / visit-01, ARG1, f / factory)
(w2 / warhead, poss, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),missiles,missile,false), Span(36,38,List(4, 3, 2, 1),Samoud and,(person :name (name :op "Al" :op "Fatah")),false), Span(33,35,List(8, 7, 6, 5),warheads of,(person :name (name :op "Al" :op "Samoud")),false), Span(28,29,List(9),complex,complex,false), Span(23,25,List(13, 12, 11, 10),in the,(person :name (name :op "Al" :op "Qa")),false), Span(22,23,List(14),factory,factory,false), Span(19,20,List(15),warhead,warhead,false), Span(14,15,List(16),visit,visit-01,false), Span(11,12,List(17),conducted,conduct-01,false), Span(9,10,List(18),missile,missile,false), Span(7,9,List(22, 21, 20, 19),Inspection Commission,(organization :name (name :op "Inspection" :op "Commission")),false), Span(1,3,List(26, 25, 24, 23),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> name, 5 -> person, 12 -> "Al", 8 -> "Samoud", 15 -> warhead, 21 -> "Inspection", 18 -> missile, 24 -> name, 7 -> "Al", 1 -> person, 17 -> conduct-01, 23 -> organization, 26 -> "Nations", 4 -> "Fatah", 11 -> name, 14 -> factory, 20 -> name, 6 -> name, 9 -> complex, 0 -> missile, 22 -> "Commission", 16 -> visit-01, 19 -> organization, 10 -> person, 3 -> "Al", 25 -> "United", 13 -> "Qa"),Map(n -> name, w -> warhead, m2 -> missile, p2 -> person, n4 -> name, v -> visit-01, m -> missile, p -> person, n3 -> name, o2 -> organization, c -> complex, f -> factory, o -> organization, p3 -> person, n2 -> name, c2 -> conduct-01, n5 -> name))),[Ljava.lang.String;@4487c0c2,Annotation([Ljava.lang.String;@126f1ba8,[Ljava.lang.String;@3a08078c,[Ljava.lang.String;@53830483),Annotation([Ljava.lang.String;@29f85fe1,[Ljava.lang.String;@43a0a32d,[Ledu.cmu.lti.nlp.amr.Dependency;@396ef8b2),Annotation([Ljava.lang.String;@72825400,[Ljava.lang.String;@19ee1ae6,[Ljava.lang.String;@5f117b3d),Annotation([Ljava.lang.String;@1174a305,[Ljava.lang.String;@71b6d77f,[Ledu.cmu.lti.nlp.amr.Entity;@1866da85))
AMR:
(c / complex, name, f / factory)
(c / complex, name, m / missile)
(c2 / conduct-01, ARG0, m2 / missile)
(c2 / conduct-01, ARG1, v / visit-01)
(c2 / conduct-01, time, p3 / person)
(m2 / missile, mod, o / organization)
(n / name, op, "Al")
(n / name, op, "Fatah")
(n2 / name, op, "Al")
(n2 / name, op, "Samoud")
(n3 / name, op, "Al")
(n3 / name, op, "Qa")
(n4 / name, op, "Commission")
(n4 / name, op, "Inspection")
(n5 / name, op, "Nations")
(n5 / name, op, "United")
(o / organization, name, n4 / name)
(o2 / organization, name, n5 / name)
(p / person, name, n / name)
(p / person, op, v / visit-01)
(p2 / person, name, n2 / name)
(p2 / person, op, c2 / conduct-01)
(p3 / person, name, n3 / name)
(p3 / person, poss, o2 / organization)
(v / visit-01, ARG1, f / factory)
(v / visit-01, time, w / warhead)

Decoded in 866,022 microseconds
Sentence: A United Nations Monitoring, Verification and Inspection Commission chemical team with support from the missile and biological teams inspected the Ibn Younis center, which was a mechanical design establishment in Baghdad.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "Inspection" :op "Commission"))
NER Entity: (country :name (name :op "Baghdad"))
NER Entity: (country :name (name :op "Baghdad"))
Spans:
Span 32-33:  Baghdad => (city :name (name :op "Baghdad"))
Span 17-18:  biological => biology
Span 23-24:  center => center
Span 9-10:  chemical => chemical
Span 29-30:  design => design-01
Span 30-31:  establishment => establish-01
Span 19-20:  inspected => inspect-01
Span 7-9:  Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Span 28-29:  mechanical => mechanics
Span 15-16:  missile => missile
Span 12-13:  support => support-01
Span 10-11:  team => team
Span 18-19:  teams => team
Span 1-3:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 32-33:  Baghdad => (city :name (name :op "Baghdad"))
Oracle Span 17-18:  biological => biology
Oracle Span 9-10:  chemical => chemical
Oracle Span 29-30:  design => design-01
Oracle Span 30-31:  establishment => establishment
Oracle Span 21-24:  Ibn Younis center => (research-institute :name (name :op "Center" :op "Younis" :op "Ibn"))
Oracle Span 19-20:  inspected => inspect-01
Oracle Span 28-29:  mechanical => mechanics
Oracle Span 15-16:  missile => missile
Oracle Span 12-13:  support => support-01
Oracle Span 10-11:  team => team
Oracle Span 18-19:  teams => team
Oracle Span 1-9:  United Nations Monitoring , Verification and Inspection Commission => (have-org-role-91 :ARG1 (organization :name (name :op "Commission" :op "Inspection" :op "and" :op "Verification" :op "Monitoring" :op "Nations" :op "United")))

Incorrect span: establishment => establish-01
Extra span: center => center
Extra span: Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Extra span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: United Nations Monitoring , Verification and Inspection Commission => (have-org-role-91 :ARG1 (organization :name (name :op "Commission" :op "Inspection" :op "and" :op "Verification" :op "Monitoring" :op "Nations" :op "United")))
Missing span: Ibn Younis center => (research-institute :name (name :op "Center" :op "Younis" :op "Ibn"))
Missing span: establishment => establishment
Missing span: and => and
Dependencies:
1	A	_	DT	DT	_	4	det	_	_
2	United	_	NNP	NNP	_	4	nn	_	_
3	Nations	_	NNPS	NNPS	_	4	nn	_	_
4	Monitoring	_	NN	NN	_	20	nsubj	_	_
5	,	_	,	,	_	4	punct	_	_
6	Verification	_	NNP	NNP	_	11	nn	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	Inspection	_	NNP	NNP	_	6	conj	_	_
9	Commission	_	NNP	NNP	_	11	nn	_	_
10	chemical	_	NN	NN	_	11	nn	_	_
11	team	_	NN	NN	_	4	appos	_	_
12	with	_	IN	IN	_	11	prep	_	_
13	support	_	NN	NN	_	12	pobj	_	_
14	from	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	missile	_	NN	NN	_	14	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	biological	_	JJ	JJ	_	19	amod	_	_
19	teams	_	NNS	NNS	_	16	conj	_	_
20	inspected	_	VBD	VBD	_	0	root	_	_
21	the	_	DT	DT	_	24	det	_	_
22	Ibn	_	NNP	NNP	_	24	nn	_	_
23	Younis	_	NNP	NNP	_	24	nn	_	_
24	center	_	NN	NN	_	20	dobj	_	_
25	,	_	,	,	_	24	punct	_	_
26	which	_	WDT	WDT	_	31	nsubj	_	_
27	was	_	VBD	VBD	_	31	cop	_	_
28	a	_	DT	DT	_	31	det	_	_
29	mechanical	_	JJ	JJ	_	31	amod	_	_
30	design	_	NN	NN	_	31	nn	_	_
31	establishment	_	NN	NN	_	24	rcmod	_	_
32	in	_	IN	IN	_	31	prep	_	_
33	Baghdad	_	NNP	NNP	_	32	pobj	_	_
34	.	_	.	.	_	20	punct	_	_

Oracle:
(a / and, op, t4 / team)
(c2 / city, name, n2 / name)
(d / design-01, location, e / establishment)
(d / design-01, mod, m / mechanics)
(e / establishment, location, c2 / city)
(h / have-org-role-91, ARG0, t2 / team)
(h / have-org-role-91, ARG1, o / organization)
(i / inspect-01, ARG0, t2 / team)
(i / inspect-01, ARG1, r2 / research-institute)
(n / name, op, "Commission")
(n / name, op, "Inspection")
(n / name, op, "Monitoring")
(n / name, op, "Nations")
(n / name, op, "United")
(n / name, op, "Verification")
(n / name, op, "and")
(n2 / name, op, "Baghdad")
(n4 / name, op, "Center")
(n4 / name, op, "Ibn")
(n4 / name, op, "Younis")
(o / organization, name, n / name)
(r2 / research-institute, mod, e / establishment)
(r2 / research-institute, name, n4 / name)
(s / support-01, ARG0, a / and)
(s / support-01, ARG1, t2 / team)
(t2 / team, mod, c / chemical)
(t4 / team, mod, b / biology)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(2, 1, 0),Baghdad,(city :name (name :op "Baghdad")),false), Span(30,31,List(3),establishment,establish-01,false), Span(29,30,List(4),design,design-01,false), Span(28,29,List(5),mechanical,mechanics,false), Span(23,24,List(6),center,center,false), Span(19,20,List(7),inspected,inspect-01,false), Span(18,19,List(8),teams,team,false), Span(17,18,List(9),biological,biology,false), Span(15,16,List(10),missile,missile,false), Span(12,13,List(11),support,support-01,false), Span(10,11,List(12),team,team,false), Span(9,10,List(13),chemical,chemical,false), Span(7,9,List(17, 16, 15, 14),Inspection Commission,(organization :name (name :op "Inspection" :op "Commission")),false), Span(1,3,List(21, 20, 19, 18),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> "Baghdad", 5 -> mechanics, 12 -> team, 15 -> name, 8 -> team, 21 -> "Nations", 18 -> organization, 7 -> inspect-01, 17 -> "Commission", 1 -> name, 4 -> design-01, 11 -> support-01, 14 -> organization, 20 -> "United", 6 -> center, 0 -> city, 9 -> biology, 16 -> "Inspection", 19 -> name, 3 -> establish-01, 10 -> missile, 13 -> chemical),Map(e -> establish-01, n -> name, t -> team, b -> biology, m2 -> missile, s -> support-01, d -> design-01, m -> mechanics, n3 -> name, c3 -> chemical, o2 -> organization, t2 -> team, i -> inspect-01, c -> city, o -> organization, n2 -> name, c2 -> center))),[Ljava.lang.String;@4cfa8227,Annotation([Ljava.lang.String;@78226c36,[Ljava.lang.String;@3f685162,[Ljava.lang.String;@11f406f8),Annotation([Ljava.lang.String;@987455b,[Ljava.lang.String;@622fdb81,[Ledu.cmu.lti.nlp.amr.Dependency;@1f3165e7),Annotation([Ljava.lang.String;@2ec3633f,[Ljava.lang.String;@1d5d5621,[Ljava.lang.String;@13275d8),Annotation([Ljava.lang.String;@15b82644,[Ljava.lang.String;@20576557,[Ledu.cmu.lti.nlp.amr.Entity;@574cd322))
AMR:
(c / city, name, n / name)
(d / design-01, ARG1, m / mechanics)
(e / establish-01, ARG0, c2 / center)
(e / establish-01, ARG1, c / city)
(e / establish-01, ARG2, d / design-01)
(i / inspect-01, ARG0, t2 / team)
(i / inspect-01, ARG1, c2 / center)
(i / inspect-01, ARG2, t / team)
(i / inspect-01, condition, s / support-01)
(n / name, op, "Baghdad")
(n2 / name, op, "Commission")
(n2 / name, op, "Inspection")
(n3 / name, op, "Nations")
(n3 / name, op, "United")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(s / support-01, ARG0, o2 / organization)
(s / support-01, ARG1, m2 / missile)
(t / team, mod, b / biology)
(t2 / team, mod, c3 / chemical)
(t2 / team, mod, o / organization)

Decoded in 1,120,493 microseconds
Sentence: The site was located within a large compound occupied by other companies and institutions including a regional office of the ruling bath Party and the whole compound was inspected by the United Nations arms experts according to Hiro Ueki.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (person :name (name :op "Hiro" :op "Ueki"))
Spans:
Span 11-12:  companies => company
Span 26-27:  compound => compound-01
Span 7-8:  compound => compound-01
Span 37-39:  Hiro Ueki => (person :name (name :op "Hiro" :op "Ueki"))
Span 28-29:  inspected => inspect-01
Span 13-14:  institutions => institution
Span 6-7:  large => large
Span 8-9:  occupied => occupy-01
Span 10-11:  other => other
Span 16-17:  regional => region
Span 1-2:  site => site
Span 31-33:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 25-26:  whole => whole
Span 4-5:  within => within

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 12-13:  and => and
Oracle Span 23-24:  and => and
Oracle Span 33-34:  arms => arm
Oracle Span 21-23:  bath Party => (political-party :name (name :op "Party" :op "Bath"))
Oracle Span 11-12:  companies => company
Oracle Span 7-8:  compound => compound
Oracle Span 26-27:  compound => compound
Oracle Span 34-35:  experts => expert-41
Oracle Span 37-39:  Hiro Ueki => (person :name (name :op "Ueki" :op "Hiro"))
Oracle Span 14-15:  including => include-01
Oracle Span 28-29:  inspected => inspect-01
Oracle Span 13-14:  institutions => institution
Oracle Span 6-7:  large => large
Oracle Span 3-4:  located => locate-01
Oracle Span 8-9:  occupied => occupy-01
Oracle Span 17-18:  office => office
Oracle Span 10-11:  other => other
Oracle Span 16-17:  regional => region
Oracle Span 20-21:  ruling => rule-03
Oracle Span 1-2:  site => site
Oracle Span 31-33:  United Nations => (have-org-role-91 :ARG1 (organization :name (name :op "Nations" :op "United")))
Oracle Span 25-26:  whole => whole

Incorrect span: Hiro Ueki => (person :name (name :op "Hiro" :op "Ueki"))
Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Incorrect span: compound => compound-01
Incorrect span: compound => compound-01
Extra span: within => within
Missing span: Hiro Ueki => (person :name (name :op "Ueki" :op "Hiro"))
Missing span: bath Party => (political-party :name (name :op "Party" :op "Bath"))
Missing span: United Nations => (have-org-role-91 :ARG1 (organization :name (name :op "Nations" :op "United")))
Missing span: and => and
Missing span: compound => compound
Missing span: experts => expert-41
Missing span: arms => arm
Missing span: located => locate-01
Missing span: compound => compound
Missing span: and => and
Missing span: including => include-01
Missing span: office => office
Missing span: ruling => rule-03
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	site	_	NN	NN	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	located	_	VBN	VBN	_	0	root	_	_
5	within	_	IN	IN	_	4	prep	_	_
6	a	_	DT	DT	_	8	det	_	_
7	large	_	JJ	JJ	_	8	amod	_	_
8	compound	_	NN	NN	_	5	pobj	_	_
9	occupied	_	VBN	VBN	_	8	amod	_	_
10	by	_	IN	IN	_	9	prep	_	_
11	other	_	JJ	JJ	_	12	amod	_	_
12	companies	_	NNS	NNS	_	10	pobj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	institutions	_	NNS	NNS	_	12	conj	_	_
15	including	_	VBG	VBG	_	12	prep	_	_
16	a	_	DT	DT	_	18	det	_	_
17	regional	_	JJ	JJ	_	18	amod	_	_
18	office	_	NN	NN	_	15	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	23	det	_	_
21	ruling	_	VBG	VBG	_	23	amod	_	_
22	bath	_	NN	NN	_	23	nn	_	_
23	Party	_	NN	NN	_	19	pobj	_	_
24	and	_	CC	CC	_	4	cc	_	_
25	the	_	DT	DT	_	27	det	_	_
26	whole	_	JJ	JJ	_	27	amod	_	_
27	compound	_	NN	NN	_	29	nsubjpass	_	_
28	was	_	VBD	VBD	_	29	auxpass	_	_
29	inspected	_	VBN	VBN	_	4	conj	_	_
30	by	_	IN	IN	_	29	prep	_	_
31	the	_	DT	DT	_	35	det	_	_
32	United	_	NNP	NNP	_	35	nn	_	_
33	Nations	_	NNPS	NNPS	_	35	nn	_	_
34	arms	_	NNS	NNS	_	35	nn	_	_
35	experts	_	NNS	NNS	_	30	pobj	_	_
36	according	_	VBG	VBG	_	29	prep	_	_
37	to	_	TO	TO	_	36	pcomp	_	_
38	Hiro	_	NNP	NNP	_	39	nn	_	_
39	Ueki	_	NNP	NNP	_	37	pobj	_	_
40	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, i / inspect-01)
(a / and, op, l / locate-01)
(a2 / and, op, c2 / company)
(a2 / and, op, i2 / institution)
(c / compound, mod, l2 / large)
(c2 / company, mod, o2 / other)
(c3 / compound, mod, w / whole)
(e / expert-41, ARG2, a3 / arm)
(h2 / have-org-role-91, ARG1, o4 / organization)
(h2 / have-org-role-91, ARG3, e / expert-41)
(i / inspect-01, ARG1, c3 / compound)
(i2 / institution, mod, o2 / other)
(i3 / include-01, ARG1, o3 / office)
(i3 / include-01, ARG2, a2 / and)
(l / locate-01, ARG1, s2 / site)
(l / locate-01, location, c / compound)
(n / name, op, "Hiro")
(n / name, op, "Ueki")
(n2 / name, op, "Bath")
(n2 / name, op, "Party")
(n3 / name, op, "Nations")
(n3 / name, op, "United")
(o / occupy-01, ARG0, a2 / and)
(o / occupy-01, ARG1, c / compound)
(o3 / office, mod, r / region)
(o3 / office, poss, p2 / political-party)
(o4 / organization, name, n3 / name)
(p / person, name, n / name)
(p2 / political-party, name, n2 / name)
(r2 / rule-03, ARG0, p2 / political-party)

Input(Some(Graph(null,ArrayBuffer(Span(37,39,List(3, 2, 1, 0),Hiro Ueki,(person :name (name :op "Hiro" :op "Ueki")),false), Span(31,33,List(7, 6, 5, 4),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(28,29,List(8),inspected,inspect-01,false), Span(26,27,List(9),compound,compound-01,false), Span(25,26,List(10),whole,whole,false), Span(16,17,List(11),regional,region,false), Span(13,14,List(12),institutions,institution,false), Span(11,12,List(13),companies,company,false), Span(10,11,List(14),other,other,false), Span(8,9,List(15),occupied,occupy-01,false), Span(7,8,List(16),compound,compound-01,false), Span(6,7,List(17),large,large,false), Span(4,5,List(18),within,within,false), Span(1,2,List(19),site,site,false)),Map(2 -> "Hiro", 5 -> name, 12 -> institution, 15 -> occupy-01, 8 -> inspect-01, 18 -> within, 7 -> "Nations", 17 -> large, 1 -> name, 4 -> organization, 11 -> region, 14 -> other, 6 -> "United", 0 -> person, 9 -> compound-01, 16 -> compound-01, 19 -> site, 3 -> "Ueki", 10 -> whole, 13 -> company),Map(n -> name, w -> whole, o3 -> occupy-01, s -> site, p -> person, c3 -> compound-01, o2 -> other, i2 -> institution, w2 -> within, i -> inspect-01, r -> region, c -> compound-01, l -> large, o -> organization, n2 -> name, c2 -> company))),[Ljava.lang.String;@45c2e0a6,Annotation([Ljava.lang.String;@119c745c,[Ljava.lang.String;@a7ad6e5,[Ljava.lang.String;@3b1ed14b),Annotation([Ljava.lang.String;@690bc15e,[Ljava.lang.String;@1bc776b7,[Ledu.cmu.lti.nlp.amr.Dependency;@475646d4),Annotation([Ljava.lang.String;@a0f53fc,[Ljava.lang.String;@3db972d2,[Ljava.lang.String;@1debc91c),Annotation([Ljava.lang.String;@687e4c93,[Ljava.lang.String;@181e72d3,[Ledu.cmu.lti.nlp.amr.Entity;@6ec7bce0))
AMR:
(c / compound-01, ARG1, r / region)
(c / compound-01, mod, w / whole)
(c2 / company, mod, o / organization)
(c2 / company, mod, o2 / other)
(c3 / compound-01, ARG0, s / site)
(c3 / compound-01, ARG1, i2 / institution)
(c3 / compound-01, ARG2, l / large)
(i / inspect-01, ARG0, s / site)
(i / inspect-01, ARG2, c / compound-01)
(n / name, op, "Hiro")
(n / name, op, "Ueki")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(o / organization, name, n2 / name)
(o3 / occupy-01, ARG0, c2 / company)
(o3 / occupy-01, ARG1, c3 / compound-01)
(p / person, name, n / name)
(p / person, poss, c2 / company)
(w2 / within, op, c3 / compound-01)

Decoded in 856,966 microseconds
Sentence: On December 28, 2002 other inspectors carried out field operations separately in the Hadre Air Force munitions test site near Mosul which is about 400 kilometers north of Baghdad and two private trading companies.

mkDayMonthYear(December	28	,	2002,28,December,2002)
NER Entity: (organization :name (name :op "Hadre" :op "Air" :op "Force"))
NER Entity: (country :name (name :op "Mosul"))
NER Entity: (country :name (name :op "Baghdad"))
NER Entity: (country :name (name :op "Baghdad"))
Spans:
Span 25-26:  400 => 400
Span 29-30:  Baghdad => (city :name (name :op "Baghdad"))
Span 34-35:  companies => company
Span 1-5:  December 28 , 2002 => (date-entity :day 28 :month 12 :year 2002)
Span 9-10:  field => field
Span 14-17:  Hadre Air Force => (organization :name (name :op "Hadre" :op "Air" :op "Force"))
Span 26-27:  kilometers => (distance-quantity :unit kilometer)
Span 17-18:  munitions => munition
Span 20-21:  near => near
Span 27-28:  north => north
Span 5-6:  other => other
Span 32-33:  private => private
Span 19-20:  site => site
Span 18-19:  test => test-01
Span 33-34:  trading => trade-01
Span 31-32:  two => 2

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 25-26:  400 => 400
Oracle Span 30-31:  and => and
Oracle Span 29-30:  Baghdad => (city :name (name :op "Baghdad"))
Oracle Span 7-8:  carried => carry-03
Oracle Span 34-35:  companies => company
Oracle Span 1-5:  December 28 , 2002 => (date-entity :year 2002 :day 28 :month 12)
Oracle Span 9-10:  field => field
Oracle Span 14-17:  Hadre Air Force => (name :op "Force" :op "Air" :op "Hadre")
Oracle Span 6-7:  inspectors => (person :ARG0-of inspect-01)
Oracle Span 26-27:  kilometers => (distance-quantity :unit kilometer)
Oracle Span 21-22:  Mosul => (city :name (name :op "Mosul"))
Oracle Span 17-18:  munitions => munition
Oracle Span 20-21:  near => near
Oracle Span 27-28:  north => north
Oracle Span 10-11:  operations => operation
Oracle Span 5-6:  other => other
Oracle Span 32-33:  private => private
Oracle Span 11-12:  separately => separate
Oracle Span 19-20:  site => site
Oracle Span 18-19:  test => test-01
Oracle Span 33-34:  trading => trade-01
Oracle Span 31-32:  two => 2

Incorrect span: Hadre Air Force => (organization :name (name :op "Hadre" :op "Air" :op "Force"))
Incorrect span: December 28 , 2002 => (date-entity :day 28 :month 12 :year 2002)
Missing span: Hadre Air Force => (name :op "Force" :op "Air" :op "Hadre")
Missing span: Mosul => (city :name (name :op "Mosul"))
Missing span: December 28 , 2002 => (date-entity :year 2002 :day 28 :month 12)
Missing span: carried => carry-03
Missing span: and => and
Missing span: operations => operation
Missing span: separately => separate
Missing span: inspectors => (person :ARG0-of inspect-01)
Dependencies:
1	On	_	IN	IN	_	8	prep	_	_
2	December	_	NNP	NNP	_	1	pobj	_	_
3	28	_	CD	CD	_	2	num	_	_
4	,	_	,	,	_	8	punct	_	_
5	2002	_	CD	CD	_	7	num	_	_
6	other	_	JJ	JJ	_	7	amod	_	_
7	inspectors	_	NNS	NNS	_	8	nsubj	_	_
8	carried	_	VBD	VBD	_	0	root	_	_
9	out	_	RP	RP	_	8	prt	_	_
10	field	_	NN	NN	_	11	nn	_	_
11	operations	_	NNS	NNS	_	8	dobj	_	_
12	separately	_	RB	RB	_	13	advmod	_	_
13	in	_	IN	IN	_	8	prep	_	_
14	the	_	DT	DT	_	20	det	_	_
15	Hadre	_	NNP	NNP	_	20	nn	_	_
16	Air	_	NNP	NNP	_	20	nn	_	_
17	Force	_	NNP	NNP	_	20	nn	_	_
18	munitions	_	NNS	NNS	_	20	nn	_	_
19	test	_	NN	NN	_	20	nn	_	_
20	site	_	NN	NN	_	13	pobj	_	_
21	near	_	IN	IN	_	8	prep	_	_
22	Mosul	_	NNP	NNP	_	21	pobj	_	_
23	which	_	WDT	WDT	_	24	nsubj	_	_
24	is	_	VBZ	VBZ	_	22	rcmod	_	_
25	about	_	RB	RB	_	26	quantmod	_	_
26	400	_	CD	CD	_	27	num	_	_
27	kilometers	_	NNS	NNS	_	28	npadvmod	_	_
28	north	_	RB	RB	_	24	advmod	_	_
29	of	_	IN	IN	_	24	prep	_	_
30	Baghdad	_	NNP	NNP	_	29	pobj	_	_
31	and	_	CC	CC	_	30	cc	_	_
32	two	_	CD	CD	_	35	num	_	_
33	private	_	JJ	JJ	_	35	amod	_	_
34	trading	_	NN	NN	_	35	nn	_	_
35	companies	_	NNS	NNS	_	30	conj	_	_
36	.	_	.	.	_	8	punct	_	_

Oracle:
(a3 / and, op, c4 / company)
(a3 / and, op, s2 / site)
(c / carry-03, ARG0, p / person)
(c / carry-03, ARG1, o2 / operation)
(c / carry-03, location, a3 / and)
(c / carry-03, manner, s / separate)
(c / carry-03, time, d / date-entity)
(c2 / city, name, n3 / name)
(c3 / city, name, n5 / name)
(c4 / company, mod, p2 / private)
(c4 / company, quant, 2 / 2)
(d / date-entity, day, 28)
(d / date-entity, month, 12)
(d / date-entity, year, 2002)
(d2 / distance-quantity, quant, 4 / 400)
(d2 / distance-quantity, unit, k / kilometer)
(i / inspect-01, ARG0, p / person)
(n / name, op, "Air")
(n / name, op, "Force")
(n / name, op, "Hadre")
(n2 / near, op, c2 / city)
(n3 / name, op, "Mosul")
(n5 / name, op, "Baghdad")
(o2 / operation, mod, f / field)
(p / person, mod, o / other)
(s2 / site, location, n2 / near)
(s2 / site, name, n / name)
(t / test-01, ARG1, m / munition)
(t / test-01, location, s2 / site)
(t2 / trade-01, ARG0, c4 / company)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),companies,company,false), Span(33,34,List(1),trading,trade-01,false), Span(32,33,List(2),private,private,false), Span(31,32,List(3),two,2,false), Span(29,30,List(6, 5, 4),Baghdad,(city :name (name :op "Baghdad")),false), Span(27,28,List(7),north,north,false), Span(26,27,List(9, 8),kilometers,(distance-quantity :unit kilometer),false), Span(25,26,List(10),400,400,false), Span(20,21,List(11),near,near,false), Span(19,20,List(12),site,site,false), Span(18,19,List(13),test,test-01,false), Span(17,18,List(14),munitions,munition,false), Span(14,17,List(19, 18, 17, 16, 15),Hadre Air Force,(organization :name (name :op "Hadre" :op "Air" :op "Force")),false), Span(9,10,List(20),field,field,false), Span(5,6,List(21),other,other,false), Span(1,5,List(25, 24, 23, 22),December 28 , 2002,(date-entity :day 28 :month 12 :year 2002),false)),Map(2 -> private, 5 -> name, 12 -> site, 8 -> distance-quantity, 15 -> organization, 21 -> other, 18 -> "Air", 24 -> 12, 7 -> north, 1 -> trade-01, 17 -> "Hadre", 23 -> 28, 4 -> city, 11 -> near, 14 -> munition, 20 -> field, 6 -> "Baghdad", 9 -> kilometer, 0 -> company, 22 -> date-entity, 16 -> name, 19 -> "Force", 10 -> 400, 3 -> 2, 25 -> 2002, 13 -> test-01),Map(n -> name, 2 -> 2, t -> trade-01, k -> kilometer, n4 -> name, s -> site, m -> munition, d -> distance-quantity, 1 -> 12, 23 -> 2002, p -> private, 4 -> 400, n3 -> near, d2 -> date-entity, o2 -> other, t2 -> test-01, c -> company, 22 -> 28, f -> field, o -> organization, c2 -> city, n2 -> north))),[Ljava.lang.String;@2d272b0d,Annotation([Ljava.lang.String;@3727f0ee,[Ljava.lang.String;@5c448433,[Ljava.lang.String;@fb713e7),Annotation([Ljava.lang.String;@1b5c3e5f,[Ljava.lang.String;@13741d5a,[Ledu.cmu.lti.nlp.amr.Dependency;@6b69761b),Annotation([Ljava.lang.String;@5c7668ba,[Ljava.lang.String;@26221bad,[Ljava.lang.String;@158f4cfe),Annotation([Ljava.lang.String;@35f639fa,[Ljava.lang.String;@5aaaa446,[Ledu.cmu.lti.nlp.amr.Entity;@6c6333cd))
AMR:
(c / company, mod, c2 / city)
(c / company, quant, 2 / 2)
(c2 / city, name, n / name)
(d / distance-quantity, quant, 4 / 400)
(d / distance-quantity, unit, k / kilometer)
(d2 / date-entity, day, 22 / 28)
(d2 / date-entity, month, 1 / 12)
(d2 / date-entity, year, 23 / 2002)
(n / name, op, "Baghdad")
(n4 / name, op, "Air")
(n4 / name, op, "Force")
(n4 / name, op, "Hadre")
(o / organization, name, n4 / name)
(s / site, location, c2 / city)
(s / site, mod, m / munition)
(s / site, mod, o / organization)
(s / site, mod, t2 / test-01)
(t / trade-01, ARG0, c / company)
(t / trade-01, ARG1, 4 / 400)
(t / trade-01, ARG2, n2 / north)
(t / trade-01, mod, p / private)
(t2 / test-01, ARG0, f / field)
(t2 / test-01, ARG1, o2 / other)
(t2 / test-01, location, n3 / near)
(t2 / test-01, time, d2 / date-entity)

Decoded in 474,279 microseconds
Sentence: Currently there are 105 inspectors in Iraq, 99 of whom are from the United Nations Monitoring, Verification and Inspection Commission and six from the International Atomic Energy Agency.

NER Entity: (country :name (name :op "Iraq"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "Inspection" :op "Commission"))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 3-4:  105 => 105
Span 0-1:  Currently => current
Span 20-22:  Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Span 26-30:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 23-24:  six => 6
Span 14-16:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  105 => 105
Oracle Span 8-9:  99 => 99
Oracle Span 22-23:  and => and
Oracle Span 0-1:  Currently => current
Oracle Span 4-5:  inspectors => (person :ARG0-of inspect-01)
Oracle Span 26-30:  International Atomic Energy Agency => (have-org-role-91 :ARG1 (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International")))
Oracle Span 6-7:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 9-10:  of => include-91
Oracle Span 23-24:  six => 6
Oracle Span 14-22:  United Nations Monitoring , Verification and Inspection Commission => (have-org-role-91 :ARG1 (organization :name (name :op "Commission" :op "Inspection" :op "and" :op "Verification" :op "Monitoring" :op "Nations" :op "United")))

Incorrect span: International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Extra span: Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Extra span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: United Nations Monitoring , Verification and Inspection Commission => (have-org-role-91 :ARG1 (organization :name (name :op "Commission" :op "Inspection" :op "and" :op "Verification" :op "Monitoring" :op "Nations" :op "United")))
Missing span: International Atomic Energy Agency => (have-org-role-91 :ARG1 (organization :name (name :op "Agency" :op "Energy" :op "Atomic" :op "International")))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: of => include-91
Missing span: and => and
Missing span: 99 => 99
Missing span: inspectors => (person :ARG0-of inspect-01)
Dependencies:
1	Currently	_	RB	RB	_	3	advmod	_	_
2	there	_	EX	EX	_	3	expl	_	_
3	are	_	VBP	VBP	_	0	root	_	_
4	105	_	CD	CD	_	5	num	_	_
5	inspectors	_	NNS	NNS	_	3	nsubj	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	Iraq	_	NNP	NNP	_	6	pobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	99	_	CD	CD	_	12	nsubj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	whom	_	WP	WP	_	10	pobj	_	_
12	are	_	VBP	VBP	_	7	rcmod	_	_
13	from	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	22	det	_	_
15	United	_	NNP	NNP	_	22	nn	_	_
16	Nations	_	NNPS	NNPS	_	22	nn	_	_
17	Monitoring	_	NNP	NNP	_	22	nn	_	_
18	,	_	,	,	_	17	punct	_	_
19	Verification	_	NNP	NNP	_	17	conj	_	_
20	and	_	CC	CC	_	17	cc	_	_
21	Inspection	_	NNP	NNP	_	17	conj	_	_
22	Commission	_	NNP	NNP	_	13	pobj	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	six	_	CD	CD	_	22	conj	_	_
25	from	_	IN	IN	_	12	prep	_	_
26	the	_	DT	DT	_	30	det	_	_
27	International	_	NNP	NNP	_	30	nn	_	_
28	Atomic	_	NNP	NNP	_	30	nn	_	_
29	Energy	_	NNP	NNP	_	30	nn	_	_
30	Agency	_	NNP	NNP	_	25	pobj	_	_
31	.	_	.	.	_	3	punct	_	_

Oracle:
(c2 / country, name, n / name)
(h / have-org-role-91, ARG1, o / organization)
(h2 / have-org-role-91, ARG1, o2 / organization)
(i / include-91, ARG1, a2 / and)
(i / include-91, ARG2, p / person)
(i2 / inspect-01, ARG0, p / person)
(n / name, op, "Iraq")
(n2 / name, op, "Commission")
(n2 / name, op, "Inspection")
(n2 / name, op, "Monitoring")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(n2 / name, op, "Verification")
(n2 / name, op, "and")
(n4 / name, op, "Agency")
(n4 / name, op, "Atomic")
(n4 / name, op, "Energy")
(n4 / name, op, "International")
(o / organization, name, n2 / name)
(o2 / organization, name, n4 / name)
(p / person, quant, 1 / 105)

Input(Some(Graph(null,ArrayBuffer(Span(26,30,List(5, 4, 3, 2, 1, 0),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(23,24,List(6),six,6,false), Span(20,22,List(10, 9, 8, 7),Inspection Commission,(organization :name (name :op "Inspection" :op "Commission")),false), Span(14,16,List(14, 13, 12, 11),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(3,4,List(15),105,105,false), Span(0,1,List(16),Currently,current,false)),Map(2 -> "International", 5 -> "Agency", 12 -> name, 15 -> 105, 8 -> name, 7 -> organization, 1 -> name, 4 -> "Energy", 11 -> organization, 14 -> "Nations", 6 -> 6, 0 -> organization, 9 -> "Inspection", 16 -> current, 3 -> "Atomic", 10 -> "Commission", 13 -> "United"),Map(n -> name, o3 -> organization, 1 -> 105, n3 -> name, o2 -> organization, c -> current, 6 -> 6, o -> organization, n2 -> name))),[Ljava.lang.String;@3e47a03,Annotation([Ljava.lang.String;@7d9ba6c,[Ljava.lang.String;@8deb645,[Ljava.lang.String;@7dd611c8),Annotation([Ljava.lang.String;@5d425813,[Ljava.lang.String;@1702830d,[Ledu.cmu.lti.nlp.amr.Dependency;@6a937336),Annotation([Ljava.lang.String;@278667fd,[Ljava.lang.String;@684b31de,[Ljava.lang.String;@6b52dd31),Annotation([Ljava.lang.String;@1a2909ae,[Ljava.lang.String;@e042c99,[Ledu.cmu.lti.nlp.amr.Entity;@3f702946))
AMR:
(6 / 6, mod, 1 / 105)
(c / current, mod, 6 / 6)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Commission")
(n2 / name, op, "Inspection")
(n3 / name, op, "Nations")
(n3 / name, op, "United")
(o / organization, mod, 1 / 105)
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(o2 / organization, poss, o3 / organization)
(o3 / organization, name, n3 / name)
(o3 / organization, part, o / organization)

Decoded in 127,995 microseconds
Sentence: The inspectors must give a first report to the United Nations Security Council about Iraq's weapons programs by January 27, 2003.

NER Entity: (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
NER Entity: (country :name (name :op "Iraq"))
mkDayMonthYear(January	27	,	2003,27,January,2003)
Spans:
Span 19-23:  January 27 , 2003 => (date-entity :day 27 :month 1 :year 2003)
Span 17-18:  programs => program
Span 9-13:  United Nations Security Council => (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 18-19:  by => by
Oracle Span 3-4:  give => give-01
Oracle Span 1-2:  inspectors => (person :ARG0-of inspect-01)
Oracle Span 14-15:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 19-23:  January 27 , 2003 => (date-entity :year 2003 :day 27 :month 1)
Oracle Span 17-18:  programs => program
Oracle Span 6-7:  report => report-01
Oracle Span 9-13:  United Nations Security Council => (organization :name (name :op "Council" :op "Security" :op "Nations" :op "United"))
Oracle Span 16-17:  weapons => weapon

Incorrect span: January 27 , 2003 => (date-entity :day 27 :month 1 :year 2003)
Incorrect span: United Nations Security Council => (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
Missing span: United Nations Security Council => (organization :name (name :op "Council" :op "Security" :op "Nations" :op "United"))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: January 27 , 2003 => (date-entity :year 2003 :day 27 :month 1)
Missing span: give => give-01
Missing span: report => report-01
Missing span: by => by
Missing span: weapons => weapon
Missing span: inspectors => (person :ARG0-of inspect-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	inspectors	_	NNS	NNS	_	4	nsubj	_	_
3	must	_	MD	MD	_	4	aux	_	_
4	give	_	VB	VB	_	0	root	_	_
5	a	_	DT	DT	_	7	det	_	_
6	first	_	JJ	JJ	_	7	amod	_	_
7	report	_	NN	NN	_	4	dobj	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	the	_	DT	DT	_	13	det	_	_
10	United	_	NNP	NNP	_	13	nn	_	_
11	Nations	_	NNPS	NNPS	_	13	nn	_	_
12	Security	_	NNP	NNP	_	13	nn	_	_
13	Council	_	NNP	NNP	_	8	pobj	_	_
14	about	_	IN	IN	_	4	prep	_	_
15	Iraq	_	NNP	NNP	_	18	poss	_	_
16	's	_	POS	POS	_	15	possessive	_	_
17	weapons	_	NNS	NNS	_	18	nn	_	_
18	programs	_	NNS	NNS	_	14	pobj	_	_
19	by	_	IN	IN	_	4	prep	_	_
20	January	_	NNP	NNP	_	19	pobj	_	_
21	27	_	CD	CD	_	20	num	_	_
22	,	_	,	,	_	20	punct	_	_
23	2003	_	CD	CD	_	20	num	_	_
24	.	_	.	.	_	4	punct	_	_

Oracle:
(b / by, op, d2 / date-entity)
(c / country, name, n2 / name)
(d2 / date-entity, day, 27)
(d2 / date-entity, month, 1)
(d2 / date-entity, year, 2003)
(g / give-01, ARG1, r / report-01)
(i / inspect-01, ARG0, p / person)
(n / name, op, "Council")
(n / name, op, "Nations")
(n / name, op, "Security")
(n / name, op, "United")
(n2 / name, op, "Iraq")
(o2 / organization, name, n / name)
(p2 / program, mod, w / weapon)
(p2 / program, poss, c / country)
(r / report-01, ARG0, p / person)
(r / report-01, ARG2, o2 / organization)
(r / report-01, time, b / by)
(r / report-01, topic, p2 / program)

Input(Some(Graph(null,ArrayBuffer(Span(19,23,List(3, 2, 1, 0),January 27 , 2003,(date-entity :day 27 :month 1 :year 2003),false), Span(17,18,List(4),programs,program,false), Span(9,13,List(10, 9, 8, 7, 6, 5),United Nations Security Council,(organization :name (name :op "United" :op "Nations" :op "Security" :op "Council")),false)),Map(2 -> 1, 5 -> organization, 8 -> "Nations", 7 -> "United", 1 -> 27, 4 -> program, 6 -> name, 9 -> "Security", 0 -> date-entity, 10 -> "Council", 3 -> 2003),Map(n -> name, 2 -> 27, d -> date-entity, p -> program, 1 -> 1, o -> organization, 22 -> 2003))),[Ljava.lang.String;@42b6d0cc,Annotation([Ljava.lang.String;@1000d54d,[Ljava.lang.String;@3f4f5330,[Ljava.lang.String;@14b7786),Annotation([Ljava.lang.String;@750ff7d3,[Ljava.lang.String;@63b3ee82,[Ledu.cmu.lti.nlp.amr.Dependency;@2620e717),Annotation([Ljava.lang.String;@7c8d5312,[Ljava.lang.String;@7636823f,[Ljava.lang.String;@a0db585),Annotation([Ljava.lang.String;@2b34e38c,[Ljava.lang.String;@3d37203b,[Ledu.cmu.lti.nlp.amr.Entity;@7fd26ad8))
AMR:
(d / date-entity, day, 2 / 27)
(d / date-entity, month, 1 / 1)
(d / date-entity, year, 22 / 2003)
(n / name, op, "Council")
(n / name, op, "Nations")
(n / name, op, "Security")
(n / name, op, "United")
(o / organization, name, n / name)
(o / organization, topic, p / program)
(p / program, time, d / date-entity)

Decoded in 79,286 microseconds
Sentence: 2003-04-28

mkDayMonthYear(2003-04-28,28,04,2003)
mkDayMonthYear(2003-04-28,28,04,2003)
Spans:
Span 0-1:  2003-04-28 => (date-entity :year 2003 :month 4 :day 28)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2003-04-28 => (date-entity :year 2003 :day 28 :month 4)

Incorrect span: 2003-04-28 => (date-entity :year 2003 :month 4 :day 28)
Missing span: 2003-04-28 => (date-entity :year 2003 :day 28 :month 4)
Dependencies:
1	2003-04-28	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 28)
(d / date-entity, month, 4)
(d / date-entity, year, 2003)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2003-04-28,(date-entity :year 2003 :month 4 :day 28),false)),Map(2 -> 4, 1 -> 2003, 0 -> date-entity, 3 -> 28),Map(2 -> 2003, d -> date-entity, 4 -> 4, 22 -> 28))),[Ljava.lang.String;@1894593a,Annotation([Ljava.lang.String;@14b0e127,[Ljava.lang.String;@10823d72,[Ljava.lang.String;@7cea0110),Annotation([Ljava.lang.String;@468dda3e,[Ljava.lang.String;@5527b211,[Ledu.cmu.lti.nlp.amr.Dependency;@54cf7c6a),Annotation([Ljava.lang.String;@78010562,[Ljava.lang.String;@50756c76,[Ljava.lang.String;@38aafb53),Annotation([Ljava.lang.String;@1729ec00,[Ljava.lang.String;@67f3d192,[Ledu.cmu.lti.nlp.amr.Entity;@1c9e07c6))
AMR:
(d / date-entity, day, 22 / 28)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2003)

Decoded in 8,477 microseconds
Sentence: France (FR); India (IN)

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "IN"))
Spans:
Span 4-5:  ; => and

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  ; => and
Oracle Span 0-1:  France => (country :name (name :op "France"))
Oracle Span 5-6:  India => (country :name (name :op "India"))

Missing span: France => (country :name (name :op "France"))
Missing span: India => (country :name (name :op "India"))
Dependencies:
1	France	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	FR	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_
5	;	_	:	:	_	1	punct	_	_
6	India	_	NNP	NNP	_	8	nn	_	_
7	(	_	(	(	_	8	punct	_	_
8	IN	_	NN	NN	_	1	dep	_	_
9	)	_	)	)	_	8	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "France")
(n2 / name, op, "India")

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),;,and,false)),Map(0 -> and),Map(a -> and))),[Ljava.lang.String;@73010765,Annotation([Ljava.lang.String;@2b10ace9,[Ljava.lang.String;@52169758,[Ljava.lang.String;@3eda0aeb),Annotation([Ljava.lang.String;@459b187a,[Ljava.lang.String;@6b4283c4,[Ledu.cmu.lti.nlp.amr.Dependency;@d0865a3),Annotation([Ljava.lang.String;@636bbbbb,[Ljava.lang.String;@7eae3764,[Ljava.lang.String;@10dc7d6),Annotation([Ljava.lang.String;@4f668f29,[Ljava.lang.String;@716e431d,[Ledu.cmu.lti.nlp.amr.Entity;@7e744f43))
AMR:


Decoded in 11,463 microseconds
Sentence: International; weapons; military; money; Government; technology

Spans:
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 6-7:  money => money
Span 10-11:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 8-9:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 4-5:  military => military
Oracle Span 6-7:  money => money
Oracle Span 10-11:  technology => technology
Oracle Span 2-3:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: military => military
Missing span: weapons => weapon
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	weapons	_	NNS	NNS	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	military	_	JJ	JJ	_	11	amod	_	_
6	;	_	:	:	_	7	punct	_	_
7	money	_	NN	NN	_	11	dep	_	_
8	;	_	:	:	_	7	punct	_	_
9	Government	_	NNP	NNP	_	7	dep	_	_
10	;	_	:	:	_	7	punct	_	_
11	technology	_	NN	NN	_	3	dep	_	_

Oracle:
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, m / military)
(a / and, op, m2 / money)
(a / and, op, t / technology)
(a / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),technology,technology,false), Span(9,10,List(1),;,and,false), Span(7,8,List(2),;,and,false), Span(6,7,List(3),money,money,false), Span(5,6,List(4),;,and,false), Span(3,4,List(5),;,and,false), Span(1,2,List(6),;,and,false)),Map(2 -> and, 5 -> and, 1 -> and, 4 -> and, 6 -> and, 0 -> technology, 3 -> money),Map(t -> technology, a3 -> and, m -> money, a -> and, a5 -> and, a2 -> and, a4 -> and))),[Ljava.lang.String;@11a8042c,Annotation([Ljava.lang.String;@6a4ccef7,[Ljava.lang.String;@69391e08,[Ljava.lang.String;@35eb4a3b),Annotation([Ljava.lang.String;@64b3b1ce,[Ljava.lang.String;@6884f0d9,[Ledu.cmu.lti.nlp.amr.Dependency;@49ec6a9f),Annotation([Ljava.lang.String;@26b95b0b,[Ljava.lang.String;@5f7da3d3,[Ljava.lang.String;@103082dd),Annotation([Ljava.lang.String;@3a22bad6,[Ljava.lang.String;@56afdf9a,[Ledu.cmu.lti.nlp.amr.Entity;@64fe9da7))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a3 / and, op, t / technology)
(a4 / and, op, a3 / and)
(a5 / and, op, a4 / and)
(a5 / and, op, m / money)

Decoded in 34,804 microseconds
Sentence: France and India will sign an estimated 2 billion US dollar deal for manufacture in India under licensed production of 6 advanced diesel-propelled Scorpene submarines.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 11-12:  deal => deal-01
Span 10-11:  dollar => (monetary-quantity :unit dollar)
Span 6-7:  estimated => estimate-01
Span 17-18:  licensed => license-01
Span 13-14:  manufacture => manufacture-01
Span 18-19:  production => produce-01
Span 24-25:  propelled => propel-01
Span 25-26:  Scorpene => (name :op "Scorpene")
Span 26-27:  submarines => submarine

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 20-21:  6 => 6
Oracle Span 21-22:  advanced => advance-01
Oracle Span 1-2:  and => and
Oracle Span 11-12:  deal => deal-01
Oracle Span 22-23:  diesel => diesel
Oracle Span 10-11:  dollar => (monetary-quantity :unit dollar)
Oracle Span 6-7:  estimated => estimate-01
Oracle Span 0-1:  France => (country :name (name :op "France"))
Oracle Span 2-3:  India => (country :name (name :op "India"))
Oracle Span 17-18:  licensed => license-01
Oracle Span 13-14:  manufacture => manufacture-01
Oracle Span 18-19:  production => produce-01
Oracle Span 24-25:  propelled => propel-01
Oracle Span 25-26:  Scorpene => (name :op "Scorpene")
Oracle Span 4-5:  sign => sign-01
Oracle Span 26-27:  submarines => submarine
Oracle Span 9-10:  US => (country :name (name :op "US"))

Missing span: France => (country :name (name :op "France"))
Missing span: India => (country :name (name :op "India"))
Missing span: US => (country :name (name :op "US"))
Missing span: sign => sign-01
Missing span: advanced => advance-01
Missing span: diesel => diesel
Missing span: 6 => 6
Missing span: and => and
Dependencies:
1	France	_	NNP	NNP	_	5	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	India	_	NNP	NNP	_	1	conj	_	_
4	will	_	MD	MD	_	5	aux	_	_
5	sign	_	VB	VB	_	0	root	_	_
6	an	_	DT	DT	_	12	det	_	_
7	estimated	_	JJ	JJ	_	12	amod	_	_
8	2	_	CD	CD	_	9	number	_	_
9	billion	_	CD	CD	_	12	num	_	_
10	US	_	NNP	NNP	_	12	nn	_	_
11	dollar	_	NN	NN	_	12	nn	_	_
12	deal	_	NN	NN	_	5	dobj	_	_
13	for	_	IN	IN	_	5	prep	_	_
14	manufacture	_	NN	NN	_	13	pobj	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	India	_	NNP	NNP	_	15	pobj	_	_
17	under	_	IN	IN	_	5	prep	_	_
18	licensed	_	JJ	JJ	_	19	amod	_	_
19	production	_	NN	NN	_	17	pobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	6	_	CD	CD	_	25	num	_	_
22	advanced	_	JJ	JJ	_	25	amod	_	_
23	diesel-propelled	_	JJ	JJ	_	25	amod	_	_
24	Scorpene	_	NNP	NNP	_	25	nn	_	_
25	submarines	_	NNS	NNS	_	20	pobj	_	_
26	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a2 / advance-01, ARG1, s3 / submarine)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(d / deal-01, ARG1, m2 / manufacture-01)
(d2 / dollar, mod, c3 / country)
(e / estimate-01, ARG1, d / deal-01)
(e / estimate-01, ARG2, m / monetary-quantity)
(l / license-01, ARG1, p3 / produce-01)
(m / monetary-quantity, unit, d2 / dollar)
(m2 / manufacture-01, ARG1, s3 / submarine)
(m2 / manufacture-01, location, c2 / country)
(m2 / manufacture-01, prep-under, p3 / produce-01)
(n / name, op, "France")
(n2 / name, op, "India")
(n3 / name, op, "US")
(n4 / name, op, "Scorpene")
(p2 / propel-01, ARG0, d3 / diesel)
(p2 / propel-01, ARG1, s3 / submarine)
(s / sign-01, ARG0, a / and)
(s / sign-01, ARG1, d / deal-01)
(s3 / submarine, name, n4 / name)
(s3 / submarine, quant, 6 / 6)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),submarines,submarine,false), Span(25,26,List(2, 1),Scorpene,(name :op "Scorpene"),false), Span(24,25,List(3),propelled,propel-01,false), Span(18,19,List(4),production,produce-01,false), Span(17,18,List(5),licensed,license-01,false), Span(13,14,List(6),manufacture,manufacture-01,false), Span(11,12,List(7),deal,deal-01,false), Span(10,11,List(9, 8),dollar,(monetary-quantity :unit dollar),false), Span(6,7,List(10),estimated,estimate-01,false)),Map(2 -> "Scorpene", 5 -> license-01, 8 -> monetary-quantity, 7 -> deal-01, 1 -> name, 4 -> produce-01, 6 -> manufacture-01, 9 -> dollar, 0 -> submarine, 10 -> estimate-01, 3 -> propel-01),Map(e -> estimate-01, n -> name, m2 -> monetary-quantity, p2 -> produce-01, s -> submarine, d -> deal-01, m -> manufacture-01, p -> propel-01, d2 -> dollar, l -> license-01))),[Ljava.lang.String;@70cccd8f,Annotation([Ljava.lang.String;@5f172d4a,[Ljava.lang.String;@77ec6a3d,[Ljava.lang.String;@67efd2c2),Annotation([Ljava.lang.String;@71d9cb05,[Ljava.lang.String;@17c2d509,[Ledu.cmu.lti.nlp.amr.Dependency;@36bf84e),Annotation([Ljava.lang.String;@1a0b5323,[Ljava.lang.String;@25b52284,[Ljava.lang.String;@245ec1a6),Annotation([Ljava.lang.String;@782be4eb,[Ljava.lang.String;@38792286,[Ledu.cmu.lti.nlp.amr.Entity;@34d4860f))
AMR:
(d / deal-01, ARG1, m / manufacture-01)
(d / deal-01, purpose, p2 / produce-01)
(e / estimate-01, ARG1, m / manufacture-01)
(l / license-01, ARG1, p2 / produce-01)
(m / manufacture-01, ARG2, m2 / monetary-quantity)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Scorpene")
(p / propel-01, ARG1, s / submarine)
(p2 / produce-01, ARG1, s / submarine)
(s / submarine, name, n / name)

Decoded in 132,118 microseconds
Sentence: French Defense Minister Michele Alliot-Marie conducted security dialogue with Indian leaders about the deal.

NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Michele" :op "Alliot" :op "-" :op "Marie"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "Indian"))
Spans:
Span 7-8:  conducted => conduct-01
Span 15-16:  deal => deal-01
Span 9-10:  dialogue => dialogue
Span 12-13:  leaders => (person :ARG0-of lead-02)
Span 3-7:  Michele Alliot - Marie => (person :name (name :op "Alliot-Marie" :op "Michele"))
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 7-8:  conducted => conduct-01
Oracle Span 15-16:  deal => deal-01
Oracle Span 1-2:  Defense => defense
Oracle Span 9-10:  dialogue => dialogue-00
Oracle Span 0-1:  French => (country :name (name :op "France"))
Oracle Span 11-12:  Indian => (country :name (name :op "India"))
Oracle Span 12-13:  leaders => (person :ARG0-of lead-02)
Oracle Span 3-7:  Michele Alliot - Marie => (person :name (name :op "Alliot-Marie" :op "Michele"))
Oracle Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 8-9:  security => security

Incorrect span: dialogue => dialogue
Missing span: Indian => (country :name (name :op "India"))
Missing span: dialogue => dialogue-00
Missing span: security => security
Missing span: French => (country :name (name :op "France"))
Missing span: Defense => defense
Dependencies:
1	French	_	NNP	NNP	_	5	nn	_	_
2	Defense	_	NNP	NNP	_	5	nn	_	_
3	Minister	_	NNP	NNP	_	5	nn	_	_
4	Michele	_	NNP	NNP	_	5	nn	_	_
5	Alliot-Marie	_	NNP	NNP	_	6	nsubj	_	_
6	conducted	_	VBD	VBD	_	0	root	_	_
7	security	_	NN	NN	_	8	nn	_	_
8	dialogue	_	NN	NN	_	6	dobj	_	_
9	with	_	IN	IN	_	6	prep	_	_
10	Indian	_	JJ	JJ	_	11	amod	_	_
11	leaders	_	NNS	NNS	_	9	pobj	_	_
12	about	_	IN	IN	_	6	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	deal	_	NN	NN	_	12	pobj	_	_
15	.	_	.	.	_	6	punct	_	_

Oracle:
(c / conduct-01, ARG0, p2 / person)
(c / conduct-01, ARG1, d / dialogue-00)
(c2 / country, name, n / name)
(c3 / country, name, n3 / name)
(d / dialogue-00, ARG0, p2 / person)
(d / dialogue-00, ARG1, d2 / deal-01)
(d / dialogue-00, ARG2, p / person)
(d / dialogue-00, mod, s / security)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, m / minister)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, c2 / country)
(m / minister, mod, d3 / defense)
(n / name, op, "India")
(n2 / name, op, "Alliot-Marie")
(n2 / name, op, "Michele")
(n3 / name, op, "France")
(p2 / person, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),deal,deal-01,false), Span(12,13,List(2, 1),leaders,(person :ARG0-of lead-02),false), Span(9,10,List(3),dialogue,dialogue,false), Span(7,8,List(4),conducted,conduct-01,false), Span(3,7,List(8, 7, 6, 5),Michele Alliot - Marie,(person :name (name :op "Alliot-Marie" :op "Michele")),false), Span(2,3,List(10, 9),Minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> lead-02, 5 -> person, 8 -> "Michele", 7 -> "Alliot-Marie", 1 -> person, 4 -> conduct-01, 6 -> name, 9 -> have-org-role-91, 0 -> deal-01, 10 -> minister, 3 -> dialogue),Map(n -> name, h -> have-org-role-91, p2 -> person, m -> minister, d -> deal-01, p -> person, d2 -> dialogue, c -> conduct-01, l -> lead-02))),[Ljava.lang.String;@665522c2,Annotation([Ljava.lang.String;@41fe8e5f,[Ljava.lang.String;@3062f9f4,[Ljava.lang.String;@2016f509),Annotation([Ljava.lang.String;@6f1a80fb,[Ljava.lang.String;@5a237731,[Ledu.cmu.lti.nlp.amr.Dependency;@7d2998d8),Annotation([Ljava.lang.String;@6a0094c9,[Ljava.lang.String;@51a6cc2a,[Ljava.lang.String;@10fda3d0),Annotation([Ljava.lang.String;@2123064f,[Ljava.lang.String;@4f6b687e,[Ledu.cmu.lti.nlp.amr.Entity;@28cb3a25))
AMR:
(c / conduct-01, ARG0, p2 / person)
(c / conduct-01, ARG1, d2 / dialogue)
(c / conduct-01, ARG2, p / person)
(d / deal-01, ARG0, p2 / person)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, m / minister)
(l / lead-02, ARG0, p / person)
(n / name, op, "Alliot-Marie")
(n / name, op, "Michele")
(p2 / person, name, n / name)

Decoded in 316,468 microseconds
Sentence: On 28 April 2003 France offered India long-term military cooperation on joint development, technology transfer and sale of high-tech weapons systems.

mkDayMonthYear(28	April	2003,28,April,2003)
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 1-4:  28 April 2003 => (date-entity :day 28 :month 4 :year 2003)
Span 11-12:  cooperation => cooperate-01
Span 14-15:  development => develop-02
Span 13-14:  joint => joint
Span 5-6:  offered => offer-01
Span 25-26:  systems => system
Span 23-24:  tech => tech
Span 16-17:  technology => technology
Span 17-18:  transfer => transfer-01

Langrangian relaxation converged after 69 iterations. Delta = 0.0
Oracle Span 1-4:  28 April 2003 => (date-entity :year 2003 :day 28 :month 4)
Oracle Span 18-19:  and => and
Oracle Span 11-12:  cooperation => cooperate-01
Oracle Span 14-15:  development => develop-02
Oracle Span 4-5:  France => (country :name (name :op "France"))
Oracle Span 21-22:  high => high
Oracle Span 6-7:  India => (country :name (name :op "India"))
Oracle Span 13-14:  joint => joint
Oracle Span 7-8:  long => long
Oracle Span 10-11:  military => military
Oracle Span 5-6:  offered => offer-01
Oracle Span 25-26:  systems => system
Oracle Span 23-24:  tech => tech
Oracle Span 16-17:  technology => technology
Oracle Span 17-18:  transfer => transfer-01
Oracle Span 24-25:  weapons => weapon

Incorrect span: 28 April 2003 => (date-entity :day 28 :month 4 :year 2003)
Missing span: France => (country :name (name :op "France"))
Missing span: India => (country :name (name :op "India"))
Missing span: 28 April 2003 => (date-entity :year 2003 :day 28 :month 4)
Missing span: and => and
Missing span: high => high
Missing span: weapons => weapon
Missing span: long => long
Missing span: military => military
Dependencies:
1	On	_	IN	IN	_	6	prep	_	_
2	28	_	CD	CD	_	1	pobj	_	_
3	April	_	NNP	NNP	_	2	tmod	_	_
4	2003	_	CD	CD	_	3	num	_	_
5	France	_	NNP	NNP	_	6	nsubj	_	_
6	offered	_	VBD	VBD	_	0	root	_	_
7	India	_	NNP	NNP	_	6	iobj	_	_
8	long-term	_	JJ	JJ	_	10	amod	_	_
9	military	_	JJ	JJ	_	10	amod	_	_
10	cooperation	_	NN	NN	_	6	dobj	_	_
11	on	_	IN	IN	_	6	prep	_	_
12	joint	_	JJ	JJ	_	13	amod	_	_
13	development	_	NN	NN	_	11	pobj	_	_
14	,	_	,	,	_	6	punct	_	_
15	technology	_	NN	NN	_	16	nn	_	_
16	transfer	_	NN	NN	_	6	dobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	sale	_	NN	NN	_	16	conj	_	_
19	of	_	IN	IN	_	16	prep	_	_
20	high-tech	_	JJ	JJ	_	22	amod	_	_
21	weapons	_	NNS	NNS	_	22	nn	_	_
22	systems	_	NNS	NNS	_	19	pobj	_	_
23	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, d2 / develop-02)
(a / and, op, t2 / transfer-01)
(c / cooperate-01, ARG0, c2 / country)
(c / cooperate-01, ARG1, c3 / country)
(c / cooperate-01, ARG2, a / and)
(c / cooperate-01, duration, l2 / long)
(c / cooperate-01, mod, m / military)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(d / date-entity, day, 28)
(d / date-entity, month, 4)
(d / date-entity, year, 2003)
(d2 / develop-02, mod, j / joint)
(n / name, op, "France")
(n2 / name, op, "India")
(o / offer-01, ARG0, c2 / country)
(o / offer-01, ARG1, c / cooperate-01)
(o / offer-01, ARG3, c3 / country)
(o / offer-01, time, d / date-entity)
(s2 / system, mod, t / tech)
(s2 / system, mod, w / weapon)
(t / tech, mod, h / high)
(t2 / transfer-01, ARG1, t4 / technology)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),systems,system,false), Span(23,24,List(1),tech,tech,false), Span(17,18,List(2),transfer,transfer-01,false), Span(16,17,List(3),technology,technology,false), Span(14,15,List(4),development,develop-02,false), Span(13,14,List(5),joint,joint,false), Span(11,12,List(6),cooperation,cooperate-01,false), Span(5,6,List(7),offered,offer-01,false), Span(1,4,List(11, 10, 9, 8),28 April 2003,(date-entity :day 28 :month 4 :year 2003),false)),Map(2 -> transfer-01, 5 -> joint, 8 -> date-entity, 7 -> offer-01, 1 -> tech, 11 -> 2003, 4 -> develop-02, 6 -> cooperate-01, 9 -> 28, 0 -> system, 10 -> 4, 3 -> technology),Map(2 -> 28, t -> tech, j -> joint, s -> system, d -> develop-02, t3 -> technology, 4 -> 4, d2 -> date-entity, t2 -> transfer-01, c -> cooperate-01, 22 -> 2003, o -> offer-01))),[Ljava.lang.String;@5555ffcf,Annotation([Ljava.lang.String;@6cfd9a54,[Ljava.lang.String;@78c1372d,[Ljava.lang.String;@9aa2002),Annotation([Ljava.lang.String;@73fb1d7f,[Ljava.lang.String;@73d4066e,[Ledu.cmu.lti.nlp.amr.Dependency;@25d2f66),Annotation([Ljava.lang.String;@5a2fa51f,[Ljava.lang.String;@71945bc0,[Ljava.lang.String;@22a0d4ea),Annotation([Ljava.lang.String;@49ede9c7,[Ljava.lang.String;@6ecdbab8,[Ledu.cmu.lti.nlp.amr.Entity;@3dd4a6fa))
AMR:
(c / cooperate-01, ARG1, d / develop-02)
(d / develop-02, ARG1, s / system)
(d / develop-02, mod, j / joint)
(d2 / date-entity, day, 2 / 28)
(d2 / date-entity, month, 4 / 4)
(d2 / date-entity, year, 22 / 2003)
(o / offer-01, ARG1, t2 / transfer-01)
(o / offer-01, ARG3, c / cooperate-01)
(o / offer-01, time, d2 / date-entity)
(s / system, mod, t / tech)
(t2 / transfer-01, ARG1, t3 / technology)

Decoded in 879,818 microseconds
Sentence: France and India will sign an estimated 2 billion US dollar deal for manufacture in India under licensed production of 6 advanced diesel-propelled Scorpene submarines.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 11-12:  deal => deal-01
Span 10-11:  dollar => (monetary-quantity :unit dollar)
Span 6-7:  estimated => estimate-01
Span 17-18:  licensed => license-01
Span 13-14:  manufacture => manufacture-01
Span 18-19:  production => produce-01
Span 24-25:  propelled => propel-01
Span 25-26:  Scorpene => (name :op "Scorpene")
Span 26-27:  submarines => submarine

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 20-21:  6 => 6
Oracle Span 21-22:  advanced => advance-01
Oracle Span 1-2:  and => and
Oracle Span 11-12:  deal => deal-01
Oracle Span 22-23:  diesel => diesel
Oracle Span 10-11:  dollar => (monetary-quantity :unit dollar)
Oracle Span 6-7:  estimated => estimate-01
Oracle Span 0-1:  France => (country :name (name :op "France"))
Oracle Span 2-3:  India => (country :name (name :op "India"))
Oracle Span 17-18:  licensed => license-01
Oracle Span 13-14:  manufacture => manufacture-01
Oracle Span 18-19:  production => produce-01
Oracle Span 24-25:  propelled => propel-01
Oracle Span 25-26:  Scorpene => (name :op "Scorpene")
Oracle Span 4-5:  sign => sign-01
Oracle Span 26-27:  submarines => submarine
Oracle Span 9-10:  US => (country :name (name :op "US"))

Missing span: France => (country :name (name :op "France"))
Missing span: India => (country :name (name :op "India"))
Missing span: US => (country :name (name :op "US"))
Missing span: sign => sign-01
Missing span: advanced => advance-01
Missing span: diesel => diesel
Missing span: 6 => 6
Missing span: and => and
Dependencies:
1	France	_	NNP	NNP	_	5	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	India	_	NNP	NNP	_	1	conj	_	_
4	will	_	MD	MD	_	5	aux	_	_
5	sign	_	VB	VB	_	0	root	_	_
6	an	_	DT	DT	_	12	det	_	_
7	estimated	_	JJ	JJ	_	12	amod	_	_
8	2	_	CD	CD	_	9	number	_	_
9	billion	_	CD	CD	_	12	num	_	_
10	US	_	NNP	NNP	_	12	nn	_	_
11	dollar	_	NN	NN	_	12	nn	_	_
12	deal	_	NN	NN	_	5	dobj	_	_
13	for	_	IN	IN	_	5	prep	_	_
14	manufacture	_	NN	NN	_	13	pobj	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	India	_	NNP	NNP	_	15	pobj	_	_
17	under	_	IN	IN	_	5	prep	_	_
18	licensed	_	JJ	JJ	_	19	amod	_	_
19	production	_	NN	NN	_	17	pobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	6	_	CD	CD	_	25	num	_	_
22	advanced	_	JJ	JJ	_	25	amod	_	_
23	diesel-propelled	_	JJ	JJ	_	25	amod	_	_
24	Scorpene	_	NNP	NNP	_	25	nn	_	_
25	submarines	_	NNS	NNS	_	20	pobj	_	_
26	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a2 / advance-01, ARG1, s3 / submarine)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(d / deal-01, ARG1, m2 / manufacture-01)
(d2 / dollar, mod, c3 / country)
(e / estimate-01, ARG1, d / deal-01)
(e / estimate-01, ARG2, m / monetary-quantity)
(l / license-01, ARG1, p3 / produce-01)
(m / monetary-quantity, unit, d2 / dollar)
(m2 / manufacture-01, ARG1, s3 / submarine)
(m2 / manufacture-01, location, c2 / country)
(m2 / manufacture-01, prep-under, p3 / produce-01)
(n / name, op, "France")
(n2 / name, op, "India")
(n3 / name, op, "US")
(n4 / name, op, "Scorpene")
(p2 / propel-01, ARG0, d3 / diesel)
(p2 / propel-01, ARG1, s3 / submarine)
(s / sign-01, ARG0, a / and)
(s / sign-01, ARG1, d / deal-01)
(s3 / submarine, name, n4 / name)
(s3 / submarine, quant, 6 / 6)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),submarines,submarine,false), Span(25,26,List(2, 1),Scorpene,(name :op "Scorpene"),false), Span(24,25,List(3),propelled,propel-01,false), Span(18,19,List(4),production,produce-01,false), Span(17,18,List(5),licensed,license-01,false), Span(13,14,List(6),manufacture,manufacture-01,false), Span(11,12,List(7),deal,deal-01,false), Span(10,11,List(9, 8),dollar,(monetary-quantity :unit dollar),false), Span(6,7,List(10),estimated,estimate-01,false)),Map(2 -> "Scorpene", 5 -> license-01, 8 -> monetary-quantity, 7 -> deal-01, 1 -> name, 4 -> produce-01, 6 -> manufacture-01, 9 -> dollar, 0 -> submarine, 10 -> estimate-01, 3 -> propel-01),Map(e -> estimate-01, n -> name, m2 -> monetary-quantity, p2 -> produce-01, s -> submarine, d -> deal-01, m -> manufacture-01, p -> propel-01, d2 -> dollar, l -> license-01))),[Ljava.lang.String;@19f7222e,Annotation([Ljava.lang.String;@3f725306,[Ljava.lang.String;@3c69362a,[Ljava.lang.String;@2412a42b),Annotation([Ljava.lang.String;@45404d5,[Ljava.lang.String;@29138d3a,[Ledu.cmu.lti.nlp.amr.Dependency;@5cbe2654),Annotation([Ljava.lang.String;@6dbcf214,[Ljava.lang.String;@496a31da,[Ljava.lang.String;@7c251f90),Annotation([Ljava.lang.String;@51841ac6,[Ljava.lang.String;@5ba26eb0,[Ledu.cmu.lti.nlp.amr.Entity;@435e60ff))
AMR:
(d / deal-01, ARG1, m / manufacture-01)
(d / deal-01, purpose, p2 / produce-01)
(e / estimate-01, ARG1, m / manufacture-01)
(l / license-01, ARG1, p2 / produce-01)
(m / manufacture-01, ARG2, m2 / monetary-quantity)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Scorpene")
(p / propel-01, ARG1, s / submarine)
(p2 / produce-01, ARG1, s / submarine)
(s / submarine, name, n / name)

Decoded in 131,115 microseconds
Sentence: French Defense Minister Michele Alliot-Marie conducted security dialogue with Indian leaders.

NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Michele" :op "Alliot" :op "-" :op "Marie"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "Indian"))
Spans:
Span 7-8:  conducted => conduct-01
Span 9-10:  dialogue => dialogue
Span 12-13:  leaders => (person :ARG0-of lead-02)
Span 3-7:  Michele Alliot - Marie => (person :name (name :op "Alliot-Marie" :op "Michele"))
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 7-8:  conducted => conduct-01
Oracle Span 1-2:  Defense => defense
Oracle Span 9-10:  dialogue => dialogue-00
Oracle Span 0-1:  French => (country :name (name :op "France"))
Oracle Span 11-12:  Indian => (country :name (name :op "India"))
Oracle Span 12-13:  leaders => (person :ARG0-of lead-02)
Oracle Span 3-7:  Michele Alliot - Marie => (person :name (name :op "Alliot-Marie" :op "Michele"))
Oracle Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 8-9:  security => security

Incorrect span: dialogue => dialogue
Missing span: Indian => (country :name (name :op "India"))
Missing span: dialogue => dialogue-00
Missing span: security => security
Missing span: French => (country :name (name :op "France"))
Missing span: Defense => defense
Dependencies:
1	French	_	NNP	NNP	_	5	nn	_	_
2	Defense	_	NNP	NNP	_	5	nn	_	_
3	Minister	_	NNP	NNP	_	5	nn	_	_
4	Michele	_	NNP	NNP	_	5	nn	_	_
5	Alliot-Marie	_	NNP	NNP	_	6	nsubj	_	_
6	conducted	_	VBD	VBD	_	0	root	_	_
7	security	_	NN	NN	_	8	nn	_	_
8	dialogue	_	NN	NN	_	6	dobj	_	_
9	with	_	IN	IN	_	6	prep	_	_
10	Indian	_	JJ	JJ	_	11	amod	_	_
11	leaders	_	NNS	NNS	_	9	pobj	_	_
12	.	_	.	.	_	6	punct	_	_

Oracle:
(c / conduct-01, ARG0, p2 / person)
(c / conduct-01, ARG1, d / dialogue-00)
(c2 / country, name, n / name)
(c3 / country, name, n3 / name)
(d / dialogue-00, ARG0, p2 / person)
(d / dialogue-00, ARG2, p / person)
(d / dialogue-00, mod, s / security)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, m / minister)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, c2 / country)
(m / minister, mod, d3 / defense)
(n / name, op, "India")
(n2 / name, op, "Alliot-Marie")
(n2 / name, op, "Michele")
(n3 / name, op, "France")
(p2 / person, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(1, 0),leaders,(person :ARG0-of lead-02),false), Span(9,10,List(2),dialogue,dialogue,false), Span(7,8,List(3),conducted,conduct-01,false), Span(3,7,List(7, 6, 5, 4),Michele Alliot - Marie,(person :name (name :op "Alliot-Marie" :op "Michele")),false), Span(2,3,List(9, 8),Minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> dialogue, 5 -> name, 8 -> have-org-role-91, 7 -> "Michele", 1 -> lead-02, 4 -> person, 6 -> "Alliot-Marie", 9 -> minister, 0 -> person, 3 -> conduct-01),Map(n -> name, h -> have-org-role-91, p2 -> person, m -> minister, d -> dialogue, p -> person, c -> conduct-01, l -> lead-02))),[Ljava.lang.String;@17d32e9b,Annotation([Ljava.lang.String;@66f0548d,[Ljava.lang.String;@2e6f610d,[Ljava.lang.String;@1e86a5a7),Annotation([Ljava.lang.String;@10afe71a,[Ljava.lang.String;@741f8dbe,[Ledu.cmu.lti.nlp.amr.Dependency;@212dfd39),Annotation([Ljava.lang.String;@a2ddf26,[Ljava.lang.String;@65d57e4e,[Ljava.lang.String;@6daf7d37),Annotation([Ljava.lang.String;@23a5818e,[Ljava.lang.String;@4715ae33,[Ledu.cmu.lti.nlp.amr.Entity;@9fc9f91))
AMR:
(c / conduct-01, ARG0, p2 / person)
(c / conduct-01, ARG1, d / dialogue)
(c / conduct-01, ARG2, p / person)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, m / minister)
(l / lead-02, ARG0, p / person)
(n / name, op, "Alliot-Marie")
(n / name, op, "Michele")
(p2 / person, name, n / name)

Decoded in 311,874 microseconds
Sentence: Alliot-Marie stated that --

NER Entity: (person :name (name :op "Alliot" :op "-" :op "Marie"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-3:  Alliot - Marie => (person :name (name :op "Alliot-Marie"))
Oracle Span 3-4:  stated => state-01

Extra span:  => amr-empty
Missing span: Alliot - Marie => (person :name (name :op "Alliot-Marie"))
Missing span: stated => state-01
Dependencies:
1	Alliot-Marie	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	DT	DT	_	2	dobj	_	_
4	--	_	:	:	_	2	punct	_	_

Oracle:
(n / name, op, "Alliot-Marie")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@1fac1d5c,Annotation([Ljava.lang.String;@108a46d6,[Ljava.lang.String;@7a8406c2,[Ljava.lang.String;@17690e14),Annotation([Ljava.lang.String;@6850b758,[Ljava.lang.String;@2a2ef072,[Ledu.cmu.lti.nlp.amr.Dependency;@704641e3),Annotation([Ljava.lang.String;@2f00f851,[Ljava.lang.String;@4207609e,[Ljava.lang.String;@1f77b5cc),Annotation([Ljava.lang.String;@5d7ca698,[Ljava.lang.String;@75961f16,[Ledu.cmu.lti.nlp.amr.Entity;@c6c82aa))
AMR:


Decoded in 5,955 microseconds
Sentence: International cooperation is necessary especially after the recent war in Iraq.

NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 5-6:  after => after
Span 1-2:  cooperation => cooperate-01
Span 4-5:  especially => especially
Span 7-8:  recent => recent

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 5-6:  after => after
Oracle Span 1-2:  cooperation => cooperate-01
Oracle Span 4-5:  especially => especially
Oracle Span 0-1:  International => international
Oracle Span 10-11:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 7-8:  recent => recency
Oracle Span 8-9:  war => war

Incorrect span: recent => recent
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: International => international
Missing span: war => war
Missing span: recent => recency
Dependencies:
1	International	_	NNP	NNP	_	2	nn	_	_
2	cooperation	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	necessary	_	JJ	JJ	_	0	root	_	_
5	especially	_	RB	RB	_	4	advmod	_	_
6	after	_	IN	IN	_	4	prep	_	_
7	the	_	DT	DT	_	9	det	_	_
8	recent	_	JJ	JJ	_	9	amod	_	_
9	war	_	NN	NN	_	6	pobj	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	Iraq	_	NNP	NNP	_	10	pobj	_	_
12	.	_	.	.	_	4	punct	_	_

Oracle:
(a / after, mod, e / especially)
(a / after, op, w / war)
(c / cooperate-01, mod, i / international)
(c2 / country, name, n2 / name)
(n2 / name, op, "Iraq")
(w / war, location, c2 / country)
(w / war, time, r / recency)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),recent,recent,false), Span(5,6,List(1),after,after,false), Span(4,5,List(2),especially,especially,false), Span(1,2,List(3),cooperation,cooperate-01,false)),Map(2 -> especially, 1 -> after, 0 -> recent, 3 -> cooperate-01),Map(e -> especially, a -> after, r -> recent, c -> cooperate-01))),[Ljava.lang.String;@2e179f3e,Annotation([Ljava.lang.String;@16e7b402,[Ljava.lang.String;@534c6767,[Ljava.lang.String;@3bddc676),Annotation([Ljava.lang.String;@29a1505c,[Ljava.lang.String;@24db6ce,[Ledu.cmu.lti.nlp.amr.Dependency;@320a8ebf),Annotation([Ljava.lang.String;@67b100fe,[Ljava.lang.String;@44b18fe4,[Ljava.lang.String;@2ba5aa7a),Annotation([Ljava.lang.String;@4d3ca6c7,[Ljava.lang.String;@22e5f96e,[Ledu.cmu.lti.nlp.amr.Entity;@6a638c79))
AMR:
(a / after, mod, e / especially)
(c / cooperate-01, ARG1, r / recent)
(c / cooperate-01, time, a / after)

Decoded in 32,960 microseconds
Sentence: France wants to deepen the intensity of its defense relations with India.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 1-2:  wants => want-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  deepen => deepen-01
Oracle Span 8-9:  defense => defense
Oracle Span 0-1:  France => (country :name (name :op "France"))
Oracle Span 11-12:  India => (country :name (name :op "India"))
Oracle Span 5-6:  intensity => intensify-01
Oracle Span 9-10:  relations => relation
Oracle Span 1-2:  wants => want-01

Missing span: France => (country :name (name :op "France"))
Missing span: India => (country :name (name :op "India"))
Missing span: deepen => deepen-01
Missing span: relations => relation
Missing span: defense => defense
Missing span: intensity => intensify-01
Dependencies:
1	France	_	NNP	NNP	_	2	nsubj	_	_
2	wants	_	VBZ	VBZ	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	deepen	_	VB	VB	_	2	xcomp	_	_
5	the	_	DT	DT	_	6	det	_	_
6	intensity	_	NN	NN	_	4	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	its	_	PRP$	PRP$	_	10	poss	_	_
9	defense	_	NN	NN	_	10	nn	_	_
10	relations	_	NNS	NNS	_	7	pobj	_	_
11	with	_	IN	IN	_	4	prep	_	_
12	India	_	NNP	NNP	_	11	pobj	_	_
13	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / deepen-01, ARG1, i2 / intensify-01)
(i2 / intensify-01, ARG0, c / country)
(i2 / intensify-01, ARG1, r / relation)
(n / name, op, "France")
(n2 / name, op, "India")
(r / relation, mod, d2 / defense)
(r / relation, poss, c / country)
(r / relation, prep-with, c2 / country)
(w / want-01, ARG0, c / country)
(w / want-01, ARG1, d / deepen-01)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),wants,want-01,false)),Map(0 -> want-01),Map(w -> want-01))),[Ljava.lang.String;@6c931d35,Annotation([Ljava.lang.String;@44b194fe,[Ljava.lang.String;@49122b8f,[Ljava.lang.String;@3fe46690),Annotation([Ljava.lang.String;@4beabeec,[Ljava.lang.String;@3b4d50b,[Ledu.cmu.lti.nlp.amr.Dependency;@5b22d8a1),Annotation([Ljava.lang.String;@476ee5b3,[Ljava.lang.String;@59ed3e6c,[Ljava.lang.String;@7cd4a4d7),Annotation([Ljava.lang.String;@317e9c3c,[Ljava.lang.String;@18da4dd,[Ledu.cmu.lti.nlp.amr.Entity;@31a3f4de))
AMR:


Decoded in 21,803 microseconds
Sentence: France will upgrade the weapon systems that France sold to India and maintain them at optimal operational use.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 12-13:  maintain => maintain-01
Span 16-17:  operational => operate-01
Span 8-9:  sold => sell-01
Span 5-6:  systems => system
Span 2-3:  upgrade => upgrade-02
Span 17-18:  use => use-01
Span 4-5:  weapon => weapon

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 0-1:  France => (country :name (name :op "France"))
Oracle Span 10-11:  India => (country :name (name :op "India"))
Oracle Span 12-13:  maintain => maintain-01
Oracle Span 16-17:  operational => operate-01
Oracle Span 15-16:  optimal => optimum
Oracle Span 8-9:  sold => sell-01
Oracle Span 5-6:  systems => system
Oracle Span 2-3:  upgrade => upgrade-02
Oracle Span 17-18:  use => use-01
Oracle Span 4-5:  weapon => weapon

Missing span: France => (country :name (name :op "France"))
Missing span: India => (country :name (name :op "India"))
Missing span: and => and
Missing span: optimal => optimum
Dependencies:
1	France	_	NNP	NNP	_	3	nsubj	_	_
2	will	_	MD	MD	_	3	aux	_	_
3	upgrade	_	VB	VB	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	weapon	_	NN	NN	_	6	nn	_	_
6	systems	_	NNS	NNS	_	3	dobj	_	_
7	that	_	IN	IN	_	9	mark	_	_
8	France	_	NNP	NNP	_	9	nsubj	_	_
9	sold	_	VBD	VBD	_	3	ccomp	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	India	_	NNP	NNP	_	10	pobj	_	_
12	and	_	CC	CC	_	3	cc	_	_
13	maintain	_	VB	VB	_	3	conj	_	_
14	them	_	PRP	PRP	_	13	dobj	_	_
15	at	_	IN	IN	_	13	prep	_	_
16	optimal	_	JJ	JJ	_	18	amod	_	_
17	operational	_	JJ	JJ	_	18	amod	_	_
18	use	_	NN	NN	_	15	pobj	_	_
19	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, m / maintain-01)
(a / and, op, u / upgrade-02)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(m / maintain-01, ARG0, c / country)
(m / maintain-01, ARG1, u2 / use-01)
(m / maintain-01, ARG2, s / system)
(n / name, op, "France")
(n2 / name, op, "India")
(s / system, mod, w / weapon)
(s2 / sell-01, ARG0, c / country)
(s2 / sell-01, ARG1, s / system)
(s2 / sell-01, ARG2, c2 / country)
(u / upgrade-02, ARG0, c / country)
(u / upgrade-02, ARG1, s / system)
(u2 / use-01, mod, o / operate-01)
(u2 / use-01, mod, o2 / optimum)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),use,use-01,false), Span(16,17,List(1),operational,operate-01,false), Span(12,13,List(2),maintain,maintain-01,false), Span(8,9,List(3),sold,sell-01,false), Span(5,6,List(4),systems,system,false), Span(4,5,List(5),weapon,weapon,false), Span(2,3,List(6),upgrade,upgrade-02,false)),Map(2 -> maintain-01, 5 -> weapon, 1 -> operate-01, 4 -> system, 6 -> upgrade-02, 0 -> use-01, 3 -> sell-01),Map(w -> weapon, s2 -> system, u2 -> upgrade-02, s -> sell-01, m -> maintain-01, u -> use-01, o -> operate-01))),[Ljava.lang.String;@68880c21,Annotation([Ljava.lang.String;@2dd2e270,[Ljava.lang.String;@4195105b,[Ljava.lang.String;@6f3e19b3),Annotation([Ljava.lang.String;@47ffe971,[Ljava.lang.String;@7d04529c,[Ledu.cmu.lti.nlp.amr.Dependency;@14fa92af),Annotation([Ljava.lang.String;@b16e202,[Ljava.lang.String;@339a3670,[Ljava.lang.String;@6cd5122d),Annotation([Ljava.lang.String;@2c7a8af2,[Ljava.lang.String;@10c07b8d,[Ledu.cmu.lti.nlp.amr.Entity;@720bf653))
AMR:
(m / maintain-01, ARG1, s2 / system)
(m / maintain-01, ARG2, u / use-01)
(o / operate-01, ARG1, u / use-01)
(s / sell-01, ARG1, m / maintain-01)
(s2 / system, mod, w / weapon)
(u2 / upgrade-02, ARG1, s2 / system)

Decoded in 128,333 microseconds
Sentence: France offered the sale of its upgraded Mirage 2002-5 to India along with technology transfer and thermal imagers for India's Russia-made T-72 and T-90 tanks and angular determination system for artillery.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (organization :name (name :op "Russia" :op "-" :op "made" :op "T" :op "-" :op "72"))
NER Entity: (organization :name (name :op "T" :op "-" :op "90"))
Spans:
Span 30-31:  90 => 90
Span 11-12:  along => along
Span 37-38:  artillery => artillery
Span 34-35:  determination => determine-01
Span 1-2:  offered => offer-01
Span 21-23:  Russia - => (organization :name (name :op "Russia" :op "-" :op "made" :op "T" :op "-" :op "72"))
Span 35-36:  system => system
Span 31-32:  tanks => tank
Span 13-14:  technology => technology
Span 14-15:  transfer => transfer-01
Span 6-7:  upgraded => upgrade-02

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 27-28:  and => and
Oracle Span 32-33:  and => and
Oracle Span 37-38:  artillery => artillery
Oracle Span 34-35:  determination => determine-01
Oracle Span 0-1:  France => (country :name (name :op "France"))
Oracle Span 17-18:  imagers => imager
Oracle Span 10-11:  India => (country :name (name :op "India"))
Oracle Span 23-24:  made => make-01
Oracle Span 7-9:  Mirage 2002-5 => (product :name (name :op "2002-5" :op "Mirage"))
Oracle Span 1-2:  offered => offer-01
Oracle Span 21-22:  Russia => (country :name (name :op "Russia"))
Oracle Span 35-36:  system => system
Oracle Span 24-25:  T => (tank :name (name :op "T-72"))
Oracle Span 28-29:  T => (name :op "T-90")
Oracle Span 31-32:  tanks => tank
Oracle Span 13-14:  technology => technology
Oracle Span 16-17:  thermal => thermal
Oracle Span 14-15:  transfer => transfer-01
Oracle Span 6-7:  upgraded => upgrade-01

Extra span: 90 => 90
Extra span: Russia - => (organization :name (name :op "Russia" :op "-" :op "made" :op "T" :op "-" :op "72"))
Extra span: along => along
Incorrect span: upgraded => upgrade-02
Missing span: France => (country :name (name :op "France"))
Missing span: T => (tank :name (name :op "T-72"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: India => (country :name (name :op "India"))
Missing span: T => (name :op "T-90")
Missing span: Mirage 2002-5 => (product :name (name :op "2002-5" :op "Mirage"))
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: made => make-01
Missing span: imagers => imager
Missing span: thermal => thermal
Missing span: upgraded => upgrade-01
Dependencies:
1	France	_	NNP	NNP	_	2	nsubj	_	_
2	offered	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	sale	_	NN	NN	_	2	dobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	its	_	PRP$	PRP$	_	9	poss	_	_
7	upgraded	_	VBN	VBN	_	9	amod	_	_
8	Mirage	_	NNP	NNP	_	9	nn	_	_
9	2002-5	_	NN	NN	_	5	pobj	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	India	_	NNP	NNP	_	10	pobj	_	_
12	along	_	IN	IN	_	9	advmod	_	_
13	with	_	IN	IN	_	12	prep	_	_
14	technology	_	NN	NN	_	15	nn	_	_
15	transfer	_	NN	NN	_	13	pobj	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	thermal	_	JJ	JJ	_	18	amod	_	_
18	imagers	_	NNS	NNS	_	15	conj	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	India	_	NNP	NNP	_	23	poss	_	_
21	's	_	POS	POS	_	20	possessive	_	_
22	Russia-made	_	JJ	JJ	_	23	amod	_	_
23	T-72	_	NN	NN	_	19	pobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	T-90	_	NN	NN	_	26	nn	_	_
26	tanks	_	NNS	NNS	_	23	conj	_	_
27	and	_	CC	CC	_	18	cc	_	_
28	angular	_	NN	NN	_	30	nn	_	_
29	determination	_	NN	NN	_	30	nn	_	_
30	system	_	NN	NN	_	18	conj	_	_
31	for	_	IN	IN	_	30	prep	_	_
32	artillery	_	NN	NN	_	31	pobj	_	_
33	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a2 / and)
(a / and, op, p / product)
(a / and, op, s2 / system)
(a2 / and, beneficiary, a5 / and)
(a2 / and, op, i2 / imager)
(a2 / and, op, t / transfer-01)
(a5 / and, op, t4 / tank)
(a5 / and, op, t5 / tank)
(c / country, name, n / name)
(c3 / country, name, n6 / name)
(c4 / country, name, n7 / name)
(d2 / determine-01, ARG0, s2 / system)
(i2 / imager, mod, t6 / thermal)
(m / make-01, ARG0, c3 / country)
(m / make-01, ARG1, t4 / tank)
(m / make-01, ARG1, t5 / tank)
(n / name, op, "France")
(n2 / name, op, "2002-5")
(n2 / name, op, "Mirage")
(n4 / name, op, "T-72")
(n5 / name, op, "T-90")
(n6 / name, op, "Russia")
(n7 / name, op, "India")
(o / offer-01, ARG0, c / country)
(p / product, name, n2 / name)
(s2 / system, beneficiary, a4 / artillery)
(t / transfer-01, ARG1, t3 / technology)
(t4 / tank, name, n4 / name)
(t4 / tank, poss, c4 / country)
(t5 / tank, name, n5 / name)
(t5 / tank, poss, c4 / country)
(u / upgrade-01, ARG1, p / product)

Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),artillery,artillery,false), Span(35,36,List(1),system,system,false), Span(34,35,List(2),determination,determine-01,false), Span(31,32,List(3),tanks,tank,false), Span(30,31,List(4),90,90,false), Span(21,23,List(12, 11, 10, 9, 8, 7, 6, 5),Russia -,(organization :name (name :op "Russia" :op "-" :op "made" :op "T" :op "-" :op "72")),false), Span(14,15,List(13),transfer,transfer-01,false), Span(13,14,List(14),technology,technology,false), Span(11,12,List(15),along,along,false), Span(6,7,List(16),upgraded,upgrade-02,false), Span(1,2,List(17),offered,offer-01,false)),Map(2 -> determine-01, 5 -> organization, 12 -> "72", 15 -> along, 8 -> "-", 7 -> "Russia", 17 -> offer-01, 1 -> system, 4 -> 90, 11 -> "-", 14 -> technology, 6 -> name, 0 -> artillery, 9 -> "made", 16 -> upgrade-02, 3 -> tank, 10 -> "T", 13 -> transfer-01),Map(n -> name, t -> tank, s -> system, d -> determine-01, t3 -> technology, a -> artillery, o2 -> offer-01, t2 -> transfer-01, a2 -> along, u -> upgrade-02, o -> organization, 9 -> 90))),[Ljava.lang.String;@360bc645,Annotation([Ljava.lang.String;@4edef76c,[Ljava.lang.String;@5d51e129,[Ljava.lang.String;@70c53dbe),Annotation([Ljava.lang.String;@1894e40d,[Ljava.lang.String;@21c815e4,[Ledu.cmu.lti.nlp.amr.Dependency;@7342e05d),Annotation([Ljava.lang.String;@2a331b46,[Ljava.lang.String;@15383681,[Ljava.lang.String;@743e66f7),Annotation([Ljava.lang.String;@109a2025,[Ljava.lang.String;@2241f05b,[Ledu.cmu.lti.nlp.amr.Entity;@761956ac))
AMR:
(a2 / along, op, t3 / technology)
(d / determine-01, ARG0, s / system)
(d / determine-01, ARG1, 9 / 90)
(n / name, op, "-")
(n / name, op, "-")
(n / name, op, "72")
(n / name, op, "Russia")
(n / name, op, "T")
(n / name, op, "made")
(o / organization, name, n / name)
(s / system, mod, a / artillery)
(t / tank, mod, 9 / 90)
(t / tank, mod, o / organization)
(t2 / transfer-01, ARG1, t3 / technology)
(t2 / transfer-01, ARG2, d / determine-01)
(u / upgrade-02, ARG0, a2 / along)
(u / upgrade-02, ARG1, o2 / offer-01)

Decoded in 316,354 microseconds
Sentence: France agreed to --

NER Entity: (country :name (name :op "France"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  agreed => agree-01
Oracle Span 0-1:  France => (country :name (name :op "France"))

Incorrect span:  => amr-empty
Missing span: France => (country :name (name :op "France"))
Missing span: agreed => agree-01
Dependencies:
1	France	_	NNP	NNP	_	0	root	_	_
2	agreed	_	VBN	VBN	_	1	vmod	_	_
3	to	_	TO	TO	_	2	xcomp	_	_
4	--	_	:	:	_	1	punct	_	_

Oracle:
(a / agree-01, ARG0, c / country)
(c / country, name, n / name)
(n / name, op, "France")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@71978f46,Annotation([Ljava.lang.String;@304d0259,[Ljava.lang.String;@1d23ff23,[Ljava.lang.String;@2133661d),Annotation([Ljava.lang.String;@6c9320c2,[Ljava.lang.String;@3414a8c3,[Ledu.cmu.lti.nlp.amr.Dependency;@36cc9385),Annotation([Ljava.lang.String;@cf518cf,[Ljava.lang.String;@7915bca3,[Ljava.lang.String;@68d651f2),Annotation([Ljava.lang.String;@3ad4a7d6,[Ljava.lang.String;@1e43e323,[Ledu.cmu.lti.nlp.amr.Entity;@4a67b4ec))
AMR:


Decoded in 4,565 microseconds
Sentence: string high-intensity mines on the line of control in Kashmir.

NER Entity: (country :name (name :op "Kashmir"))
NER Entity: (country :name (name :op "Kashmir"))
Spans:
Span 9-10:  control => control-01
Span 11-12:  Kashmir => (world-region :name (name :op "Kashmir"))
Span 4-5:  mines => mine
Span 0-1:  string => string

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  control => control-01
Oracle Span 1-2:  high => high
Oracle Span 3-4:  intensity => intensity
Oracle Span 11-12:  Kashmir => (world-region :name (name :op "Kashmir"))
Oracle Span 7-8:  line => line
Oracle Span 4-5:  mines => mine
Oracle Span 0-1:  string => string-01

Incorrect span: string => string
Missing span: string => string-01
Missing span: line => line
Missing span: intensity => intensity
Missing span: high => high
Dependencies:
1	string	_	VB	VB	_	0	root	_	_
2	high-intensity	_	JJ	JJ	_	3	amod	_	_
3	mines	_	NNS	NNS	_	1	dobj	_	_
4	on	_	IN	IN	_	1	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	line	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	control	_	NN	NN	_	7	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	Kashmir	_	NNP	NNP	_	9	pobj	_	_
11	.	_	.	.	_	1	punct	_	_

Oracle:
(i / intensity, mod, h / high)
(l / line, mod, c / control-01)
(m / mine, mod, i / intensity)
(n / name, op, "Kashmir")
(s / string-01, ARG1, m / mine)
(s / string-01, location, l / line)
(s / string-01, location, w / world-region)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Kashmir,(world-region :name (name :op "Kashmir")),false), Span(9,10,List(3),control,control-01,false), Span(4,5,List(4),mines,mine,false), Span(0,1,List(5),string,string,false)),Map(2 -> "Kashmir", 5 -> string, 1 -> name, 4 -> mine, 0 -> world-region, 3 -> control-01),Map(n -> name, w -> world-region, s -> string, m -> mine, c -> control-01))),[Ljava.lang.String;@10643593,Annotation([Ljava.lang.String;@f91da5e,[Ljava.lang.String;@eca6a74,[Ljava.lang.String;@79fd6f95),Annotation([Ljava.lang.String;@48840594,[Ljava.lang.String;@49c675f0,[Ledu.cmu.lti.nlp.amr.Dependency;@14823f76),Annotation([Ljava.lang.String;@6917bb4,[Ljava.lang.String;@6ed16657,[Ljava.lang.String;@1442f788),Annotation([Ljava.lang.String;@113e13f9,[Ljava.lang.String;@1c7f96b1,[Ledu.cmu.lti.nlp.amr.Entity;@7979b8b7))
AMR:
(c / control-01, ARG0, s / string)
(c / control-01, ARG1, w / world-region)
(n / name, op, "Kashmir")
(s / string, ARG1, m / mine)
(w / world-region, name, n / name)

Decoded in 28,573 microseconds
Sentence: check cross-border terrorism.

Spans:
Span 0-1:  check => check-01
Span 1-2:  cross => cross-02
Span 4-5:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  border => border
Oracle Span 0-1:  check => check-07
Oracle Span 1-2:  cross => cross-02
Oracle Span 4-5:  terrorism => terrorism

Incorrect span: check => check-01
Missing span: check => check-07
Missing span: border => border
Dependencies:
1	check	_	VB	VB	_	0	root	_	_
2	cross-border	_	JJ	JJ	_	3	amod	_	_
3	terrorism	_	NN	NN	_	1	dobj	_	_
4	.	_	.	.	_	1	punct	_	_

Oracle:
(c / check-07, ARG1, t / terrorism)
(c2 / cross-02, ARG0, t / terrorism)
(c2 / cross-02, ARG1, b / border)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),terrorism,terrorism,false), Span(1,2,List(1),cross,cross-02,false), Span(0,1,List(2),check,check-01,false)),Map(2 -> check-01, 1 -> cross-02, 0 -> terrorism),Map(t -> terrorism, c -> cross-02, c2 -> check-01))),[Ljava.lang.String;@7a04fea7,Annotation([Ljava.lang.String;@1bc49bc5,[Ljava.lang.String;@7b6e5c12,[Ljava.lang.String;@4f66ffc8),Annotation([Ljava.lang.String;@124ac145,[Ljava.lang.String;@2def7a7a,[Ledu.cmu.lti.nlp.amr.Dependency;@24e83d19),Annotation([Ljava.lang.String;@5c080ef3,[Ljava.lang.String;@188cbcde,[Ljava.lang.String;@4ee6291f),Annotation([Ljava.lang.String;@2b03d52f,[Ljava.lang.String;@37e0292a,[Ledu.cmu.lti.nlp.amr.Entity;@4af70944))
AMR:
(c / cross-02, ARG0, t / terrorism)
(c2 / check-01, ARG1, t / terrorism)

Decoded in 9,454 microseconds
Sentence: upgrade fire control systems of Indian tanks.

NER Entity: (thing :name (name :op "Indian"))
Spans:
Span 2-3:  control => control-01
Span 3-4:  systems => system
Span 6-7:  tanks => tank
Span 0-1:  upgrade => upgrade-02

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 2-3:  control => control-01
Oracle Span 1-2:  fire => fire-01
Oracle Span 5-6:  Indian => (country :name (name :op "India"))
Oracle Span 3-4:  systems => system
Oracle Span 6-7:  tanks => tank
Oracle Span 0-1:  upgrade => upgrade-02

Missing span: Indian => (country :name (name :op "India"))
Missing span: fire => fire-01
Dependencies:
1	upgrade	_	VB	VB	_	0	root	_	_
2	fire	_	NN	NN	_	4	nn	_	_
3	control	_	NN	NN	_	4	nn	_	_
4	systems	_	NNS	NNS	_	1	dobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	Indian	_	JJ	JJ	_	7	amod	_	_
7	tanks	_	NNS	NNS	_	5	pobj	_	_
8	.	_	.	.	_	1	punct	_	_

Oracle:
(c / control-01, ARG0, s / system)
(c / control-01, ARG1, f / fire-01)
(c2 / country, name, n / name)
(n / name, op, "India")
(s / system, poss, t / tank)
(t / tank, mod, c2 / country)
(u / upgrade-02, ARG1, s / system)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),tanks,tank,false), Span(3,4,List(1),systems,system,false), Span(2,3,List(2),control,control-01,false), Span(0,1,List(3),upgrade,upgrade-02,false)),Map(2 -> control-01, 1 -> system, 0 -> tank, 3 -> upgrade-02),Map(t -> tank, s -> system, u -> upgrade-02, c -> control-01))),[Ljava.lang.String;@35267fd4,Annotation([Ljava.lang.String;@397ef2,[Ljava.lang.String;@36a6bea6,[Ljava.lang.String;@44e93c1f),Annotation([Ljava.lang.String;@42373389,[Ljava.lang.String;@9b21bd3,[Ledu.cmu.lti.nlp.amr.Dependency;@a62c7cd),Annotation([Ljava.lang.String;@7661b5a,[Ljava.lang.String;@7c36db44,[Ljava.lang.String;@65c33b92),Annotation([Ljava.lang.String;@7903d448,[Ljava.lang.String;@4e08acf9,[Ledu.cmu.lti.nlp.amr.Entity;@42ea287))
AMR:
(c / control-01, instrument, s / system)
(s / system, mod, t / tank)
(u / upgrade-02, ARG1, s / system)

Decoded in 29,080 microseconds
Sentence: Before delegation-level talks on 28 April 2003 Alliot-Marie had a 1-to-1 meeting with Indian Defense Minister George Fernandes.

mkDayMonthYear(28	April	2003,28,April,2003)
NER Entity: (person :name (name :op "Alliot" :op "-" :op "Marie"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (person :name (name :op "George" :op "Fernandes"))
Spans:
Span 6-9:  28 April 2003 => (date-entity :day 28 :month 4 :year 2003)
Span 0-1:  Before => before
Span 1-2:  delegation => delegation
Span 3-4:  level => level
Span 23-24:  Minister => (have-org-role-91 :ARG2 minister)
Span 4-5:  talks => talk-01
Span 16-18:  to - => (person :name (name :op "George" :op "Fernandes"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-9:  28 April 2003 => (date-entity :year 2003 :day 28 :month 4)
Oracle Span 9-12:  Alliot - Marie => (person :name (name :op "Alliot-Marie"))
Oracle Span 0-1:  Before => before
Oracle Span 22-23:  Defense => defense
Oracle Span 1-2:  delegation => delegation
Oracle Span 24-26:  George Fernandes => (person :name (name :op "Fernandes" :op "George"))
Oracle Span 12-13:  had => have-org-role-91
Oracle Span 21-22:  Indian => (country :name (name :op "India"))
Oracle Span 3-4:  level => level
Oracle Span 19-20:  meeting => meet-03
Oracle Span 23-24:  Minister => minister
Oracle Span 4-5:  talks => talk-01

Incorrect span: Minister => (have-org-role-91 :ARG2 minister)
Extra span: to - => (person :name (name :op "George" :op "Fernandes"))
Incorrect span: 28 April 2003 => (date-entity :day 28 :month 4 :year 2003)
Missing span: Alliot - Marie => (person :name (name :op "Alliot-Marie"))
Missing span: George Fernandes => (person :name (name :op "Fernandes" :op "George"))
Missing span: Indian => (country :name (name :op "India"))
Missing span: 28 April 2003 => (date-entity :year 2003 :day 28 :month 4)
Missing span: meeting => meet-03
Missing span: Minister => minister
Missing span: Defense => defense
Missing span: had => have-org-role-91
Dependencies:
1	Before	_	IN	IN	_	9	prep	_	_
2	delegation-level	_	JJ	JJ	_	3	amod	_	_
3	talks	_	NNS	NNS	_	1	pobj	_	_
4	on	_	IN	IN	_	3	prep	_	_
5	28	_	CD	CD	_	4	pobj	_	_
6	April	_	NNP	NNP	_	3	tmod	_	_
7	2003	_	CD	CD	_	6	num	_	_
8	Alliot-Marie	_	NNP	NNP	_	9	nsubj	_	_
9	had	_	VBD	VBD	_	0	root	_	_
10	a	_	DT	DT	_	12	det	_	_
11	1-to-1	_	JJ	JJ	_	12	amod	_	_
12	meeting	_	NN	NN	_	9	dobj	_	_
13	with	_	IN	IN	_	12	prep	_	_
14	Indian	_	NNP	NNP	_	18	nn	_	_
15	Defense	_	NNP	NNP	_	18	nn	_	_
16	Minister	_	NNP	NNP	_	18	nn	_	_
17	George	_	NNP	NNP	_	18	nn	_	_
18	Fernandes	_	NNP	NNP	_	13	pobj	_	_
19	.	_	.	.	_	9	punct	_	_

Oracle:
(b / before, op, t / talk-01)
(c / country, name, n3 / name)
(d2 / delegation, mod, l / level)
(d3 / date-entity, day, 28)
(d3 / date-entity, month, 4)
(d3 / date-entity, year, 2003)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m2 / minister)
(m / meet-03, ARG0, p / person)
(m / meet-03, ARG1, p2 / person)
(m / meet-03, time, b / before)
(m2 / minister, mod, d / defense)
(n / name, op, "Alliot-Marie")
(n2 / name, op, "Fernandes")
(n2 / name, op, "George")
(n3 / name, op, "India")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(t / talk-01, ARG1, d2 / delegation)
(t / talk-01, time, d3 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(1, 0),Minister,(have-org-role-91 :ARG2 minister),false), Span(16,18,List(5, 4, 3, 2),to -,(person :name (name :op "George" :op "Fernandes")),false), Span(6,9,List(9, 8, 7, 6),28 April 2003,(date-entity :day 28 :month 4 :year 2003),false), Span(4,5,List(10),talks,talk-01,false), Span(3,4,List(11),level,level,false), Span(1,2,List(12),delegation,delegation,false), Span(0,1,List(13),Before,before,false)),Map(2 -> person, 5 -> "Fernandes", 12 -> delegation, 8 -> 4, 7 -> 28, 1 -> minister, 4 -> "George", 11 -> level, 6 -> date-entity, 0 -> have-org-role-91, 9 -> 2003, 3 -> name, 10 -> talk-01, 13 -> before),Map(n -> name, 2 -> 28, h -> have-org-role-91, b -> before, t -> talk-01, d -> date-entity, m -> minister, p -> person, 4 -> 4, d2 -> delegation, l -> level, 22 -> 2003))),[Ljava.lang.String;@78cd163b,Annotation([Ljava.lang.String;@1f0b3cfe,[Ljava.lang.String;@14ef2482,[Ljava.lang.String;@65a48602),Annotation([Ljava.lang.String;@75483843,[Ljava.lang.String;@336206d8,[Ledu.cmu.lti.nlp.amr.Dependency;@5ec4ff02),Annotation([Ljava.lang.String;@1f11f64e,[Ljava.lang.String;@2b2f5fcf,[Ljava.lang.String;@858d8b4),Annotation([Ljava.lang.String;@711d1a52,[Ljava.lang.String;@612e21b9,[Ledu.cmu.lti.nlp.amr.Entity;@302edb74))
AMR:
(b / before, op, t / talk-01)
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 22 / 2003)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, d2 / delegation)
(h / have-org-role-91, ARG2, m / minister)
(l / level, mod, d2 / delegation)
(n / name, op, "Fernandes")
(n / name, op, "George")
(p / person, name, n / name)
(t / talk-01, mod, l / level)
(t / talk-01, time, d / date-entity)

Decoded in 114,153 microseconds
Sentence: Alliot-Marie arrived on Sunday.

NER Entity: (person :name (name :op "Alliot" :op "-" :op "Marie"))
Spans:
Span 3-4:  arrived => arrive-01
Span 5-6:  Sunday => sunday

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-3:  Alliot - Marie => (person :name (name :op "Alliot-Marie"))
Oracle Span 3-4:  arrived => arrive-01
Oracle Span 5-6:  Sunday => sunday

Missing span: Alliot - Marie => (person :name (name :op "Alliot-Marie"))
Dependencies:
1	Alliot-Marie	_	NNP	NNP	_	2	nsubj	_	_
2	arrived	_	VBD	VBD	_	0	root	_	_
3	on	_	IN	IN	_	2	prep	_	_
4	Sunday	_	NNP	NNP	_	3	pobj	_	_
5	.	_	.	.	_	2	punct	_	_

Oracle:
(a / arrive-01, ARG1, p / person)
(n / name, op, "Alliot-Marie")
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),Sunday,sunday,false), Span(3,4,List(1),arrived,arrive-01,false)),Map(1 -> arrive-01, 0 -> sunday),Map(s -> sunday, a -> arrive-01))),[Ljava.lang.String;@7efd28bd,Annotation([Ljava.lang.String;@672b72ba,[Ljava.lang.String;@7718a40f,[Ljava.lang.String;@312b34e3),Annotation([Ljava.lang.String;@26844abb,[Ljava.lang.String;@1a865273,[Ledu.cmu.lti.nlp.amr.Dependency;@288ca5f0),Annotation([Ljava.lang.String;@4068102e,[Ljava.lang.String;@44bd4b0a,[Ljava.lang.String;@6c008c24),Annotation([Ljava.lang.String;@216e0771,[Ljava.lang.String;@21079a12,[Ledu.cmu.lti.nlp.amr.Entity;@fcc6023))
AMR:
(a / arrive-01, ARG1, s / sunday)

Decoded in 8,687 microseconds
Sentence: 2003-06-24

mkDayMonthYear(2003-06-24,24,06,2003)
mkDayMonthYear(2003-06-24,24,06,2003)
Spans:
Span 0-1:  2003-06-24 => (date-entity :day 24 :month 6 :year 2003)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2003-06-24 => (date-entity :year 2003 :day 24 :month 6)

Incorrect span: 2003-06-24 => (date-entity :day 24 :month 6 :year 2003)
Missing span: 2003-06-24 => (date-entity :year 2003 :day 24 :month 6)
Dependencies:
1	2003-06-24	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 24)
(d / date-entity, month, 6)
(d / date-entity, year, 2003)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2003-06-24,(date-entity :day 24 :month 6 :year 2003),false)),Map(2 -> 6, 1 -> 24, 0 -> date-entity, 3 -> 2003),Map(2 -> 24, d -> date-entity, 6 -> 6, 22 -> 2003))),[Ljava.lang.String;@67c5ac52,Annotation([Ljava.lang.String;@36417a54,[Ljava.lang.String;@2b8bb184,[Ljava.lang.String;@472a11ae),Annotation([Ljava.lang.String;@dc79225,[Ljava.lang.String;@30e9ca13,[Ledu.cmu.lti.nlp.amr.Dependency;@46185a1b),Annotation([Ljava.lang.String;@51288417,[Ljava.lang.String;@60cf62ad,[Ljava.lang.String;@1e0895f5),Annotation([Ljava.lang.String;@1ac4ccad,[Ljava.lang.String;@fd9ebde,[Ledu.cmu.lti.nlp.amr.Entity;@14982a82))
AMR:
(d / date-entity, day, 2 / 24)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 22 / 2003)

Decoded in 8,286 microseconds
Sentence: France (FR)

NER Entity: (country :name (name :op "France"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  France => (country :name (name :op "France"))

Incorrect span:  => amr-empty
Missing span: France => (country :name (name :op "France"))
Dependencies:
1	France	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	FR	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "France")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@4ee5b2d9,Annotation([Ljava.lang.String;@72f8ae0c,[Ljava.lang.String;@323f3c96,[Ljava.lang.String;@6726cc69),Annotation([Ljava.lang.String;@4b6d92e,[Ljava.lang.String;@33899f7a,[Ledu.cmu.lti.nlp.amr.Dependency;@7899de11),Annotation([Ljava.lang.String;@290d10ef,[Ljava.lang.String;@1bc0d349,[Ljava.lang.String;@644ded04),Annotation([Ljava.lang.String;@5292ceca,[Ljava.lang.String;@13d9261f,[Ledu.cmu.lti.nlp.amr.Entity;@e9ef5b6))
AMR:


Decoded in 4,117 microseconds
Sentence: International; Government; dissent; crime; terrorism; leader

Spans:
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 6-7:  crime => crime
Span 4-5:  dissent => dissent-01
Span 8-9:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 6-7:  crime => crime
Oracle Span 4-5:  dissent => dissent-01
Oracle Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 10-11:  leader => (person :ARG0-of lead-02)
Oracle Span 8-9:  terrorism => terrorism

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: leader => (person :ARG0-of lead-02)
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	Government	_	NNP	NNP	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	dissent	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	crime	_	NN	NN	_	5	dep	_	_
8	;	_	:	:	_	5	punct	_	_
9	terrorism	_	NN	NN	_	5	dep	_	_
10	;	_	:	:	_	9	punct	_	_
11	leader	_	NN	NN	_	9	dep	_	_

Oracle:
(a / and, op, c / crime)
(a / and, op, d / dissent-01)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, p / person)
(a / and, op, t / terrorism)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),;,and,false), Span(8,9,List(1),terrorism,terrorism,false), Span(7,8,List(2),;,and,false), Span(6,7,List(3),crime,crime,false), Span(5,6,List(4),;,and,false), Span(4,5,List(5),dissent,dissent-01,false), Span(3,4,List(6),;,and,false), Span(1,2,List(7),;,and,false)),Map(2 -> and, 5 -> dissent-01, 7 -> and, 1 -> terrorism, 4 -> and, 6 -> and, 0 -> and, 3 -> crime),Map(t -> terrorism, a3 -> and, d -> dissent-01, a -> and, a5 -> and, a2 -> and, c -> crime, a4 -> and))),[Ljava.lang.String;@5300cac,Annotation([Ljava.lang.String;@4110765e,[Ljava.lang.String;@1ba359bd,[Ljava.lang.String;@62e93c3a),Annotation([Ljava.lang.String;@673919a7,[Ljava.lang.String;@25d93198,[Ledu.cmu.lti.nlp.amr.Dependency;@2436ea2f),Annotation([Ljava.lang.String;@f951a7f,[Ljava.lang.String;@20cece0b,[Ljava.lang.String;@4c777e7b),Annotation([Ljava.lang.String;@5f038248,[Ljava.lang.String;@78e22d35,[Ledu.cmu.lti.nlp.amr.Entity;@2e8a1ab4))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, c / crime)
(a5 / and, op, a4 / and)
(a5 / and, op, d / dissent-01)
(a5 / and, op, t / terrorism)

Decoded in 40,611 microseconds
Sentence: The French foreign minister characterizes recent raids on People's Mujahedeen in Paris as part of fight on terrorism.

NER Entity: (thing :name (name :op "French"))
NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "Paris"))
Spans:
Span 16-17:  fight => fight-01
Span 3-4:  minister => (have-org-role-91 :ARG2 minister)
Span 12-13:  Paris => (city :name (name :op "Paris"))
Span 8-11:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 6-7:  raids => raid-01
Span 5-6:  recent => recent
Span 18-19:  terrorism => terrorism

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 4-5:  characterizes => characterize-01
Oracle Span 16-17:  fight => fight-02
Oracle Span 2-3:  foreign => foreign
Oracle Span 1-2:  French => (country :name (name :op "France"))
Oracle Span 3-4:  minister => (have-org-role-91 :ARG2 minister)
Oracle Span 12-13:  Paris => (city :name (name :op "Paris"))
Oracle Span 14-15:  part => part
Oracle Span 8-11:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Oracle Span 6-7:  raids => raid-01
Oracle Span 5-6:  recent => recency
Oracle Span 18-19:  terrorism => terrorism

Incorrect span: fight => fight-01
Incorrect span: recent => recent
Missing span: characterizes => characterize-01
Missing span: part => part
Missing span: fight => fight-02
Missing span: French => (country :name (name :op "France"))
Missing span: foreign => foreign
Missing span: recent => recency
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	French	_	JJ	JJ	_	4	amod	_	_
3	foreign	_	JJ	JJ	_	4	amod	_	_
4	minister	_	NN	NN	_	5	nsubj	_	_
5	characterizes	_	VBZ	VBZ	_	0	root	_	_
6	recent	_	JJ	JJ	_	7	amod	_	_
7	raids	_	NNS	NNS	_	5	dobj	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	People	_	NNS	NNS	_	11	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	Mujahedeen	_	NNP	NNP	_	8	pobj	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	Paris	_	NNP	NNP	_	12	pobj	_	_
14	as	_	IN	IN	_	5	prep	_	_
15	part	_	NN	NN	_	14	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	fight	_	NN	NN	_	16	pobj	_	_
18	on	_	IN	IN	_	17	prep	_	_
19	terrorism	_	NN	NN	_	18	pobj	_	_
20	.	_	.	.	_	5	punct	_	_

Oracle:
(c / characterize-01, ARG1, r / raid-01)
(c / characterize-01, ARG2, p / part)
(c2 / country, name, n / name)
(c3 / city, name, n3 / name)
(f2 / fight-02, ARG1, t / terrorism)
(f2 / fight-02, part, p / part)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, f / foreign)
(n / name, op, "France")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People's")
(n3 / name, op, "Paris")
(o / organization, location, c3 / city)
(o / organization, name, n2 / name)
(r / raid-01, ARG1, o / organization)
(r / raid-01, time, r2 / recency)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),terrorism,terrorism,false), Span(16,17,List(1),fight,fight-01,false), Span(12,13,List(4, 3, 2),Paris,(city :name (name :op "Paris")),false), Span(8,11,List(8, 7, 6, 5),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false), Span(6,7,List(9),raids,raid-01,false), Span(5,6,List(10),recent,recent,false), Span(3,4,List(12, 11),minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> city, 5 -> organization, 12 -> minister, 8 -> "People's", 7 -> "Mujahedeen", 1 -> fight-01, 4 -> "Paris", 11 -> have-org-role-91, 6 -> name, 0 -> terrorism, 9 -> raid-01, 3 -> name, 10 -> recent),Map(n -> name, h -> have-org-role-91, t -> terrorism, m -> minister, r2 -> recent, r -> raid-01, c -> city, o -> organization, f -> fight-01, n2 -> name))),[Ljava.lang.String;@59f93db8,Annotation([Ljava.lang.String;@1aabf50d,[Ljava.lang.String;@73c9e8e8,[Ljava.lang.String;@de8039f),Annotation([Ljava.lang.String;@1deceb67,[Ljava.lang.String;@582a764a,[Ledu.cmu.lti.nlp.amr.Dependency;@64984b0f),Annotation([Ljava.lang.String;@292158f8,[Ljava.lang.String;@53ec2968,[Ljava.lang.String;@58ff8d79),Annotation([Ljava.lang.String;@7e19755a,[Ljava.lang.String;@5d5c04f9,[Ledu.cmu.lti.nlp.amr.Entity;@6f49d153))
AMR:
(c / city, name, n / name)
(f / fight-01, ARG0, c / city)
(f / fight-01, ARG1, t / terrorism)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / minister)
(n / name, op, "Paris")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People's")
(o / organization, name, n2 / name)
(r / raid-01, ARG1, o / organization)
(r / raid-01, time, r2 / recent)
(r / raid-01, topic, f / fight-01)

Decoded in 151,648 microseconds
Sentence: French Foreign Minister Dominique de Villepin said on 030624 that the French Government considers the crackdown of the Iranian armed opposition group the People's Mujahedeen as part of the operations against terrorism.

NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Dominique" :op "de" :op "Villepin"))
mkDayMonthYear(030624,24,06,2003)
mkDayMonthYear(030624,24,06,03)
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
mkDayMonthYear(030624,24,06,2003)
mkDayMonthYear(030624,24,06,03)
Spans:
Span 8-9:  030624 => (date-entity :day 24 :month 6 :year 03)
Span 19-20:  armed => arm-01
Span 13-14:  considers => consider-01
Span 15-16:  crackdown => crack-06
Span 3-6:  Dominique de Villepin => (person :name (name :op "Dominique" :op "de" :op "Villepin"))
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 23-26:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 6-7:  said => say-01
Span 32-33:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 19-20:  armed => arm-01
Oracle Span 13-14:  considers => consider-02
Oracle Span 15-16:  crackdown => crack-06
Oracle Span 3-6:  Dominique de Villepin => (person :name (name :op "Villepin" :op "de" :op "Dominique"))
Oracle Span 1-2:  Foreign => foreign
Oracle Span 0-1:  French => (country :name (name :op "France"))
Oracle Span 12-13:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 21-22:  group => group
Oracle Span 18-19:  Iranian => (country :name (name :op "Iran"))
Oracle Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 30-31:  operations => operation
Oracle Span 20-21:  opposition => oppose-01
Oracle Span 27-28:  part => part
Oracle Span 23-26:  People 's Mujahedeen => (name :op "Mujahedeen" :op "People's")
Oracle Span 6-7:  said => say-01
Oracle Span 32-33:  terrorism => terrorism

Incorrect span: People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Incorrect span: considers => consider-01
Extra span: 030624 => (date-entity :day 24 :month 6 :year 03)
Incorrect span: Dominique de Villepin => (person :name (name :op "Dominique" :op "de" :op "Villepin"))
Missing span: Dominique de Villepin => (person :name (name :op "Villepin" :op "de" :op "Dominique"))
Missing span: People 's Mujahedeen => (name :op "Mujahedeen" :op "People's")
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: considers => consider-02
Missing span: part => part
Missing span: operations => operation
Missing span: group => group
Missing span: French => (country :name (name :op "France"))
Missing span: Foreign => foreign
Missing span: opposition => oppose-01
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	French	_	NNP	NNP	_	6	nn	_	_
2	Foreign	_	NNP	NNP	_	6	nn	_	_
3	Minister	_	NNP	NNP	_	6	nn	_	_
4	Dominique	_	NNP	NNP	_	6	nn	_	_
5	de	_	FW	FW	_	6	nn	_	_
6	Villepin	_	NNP	NNP	_	7	nsubj	_	_
7	said	_	VBD	VBD	_	0	root	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	030624	_	CD	CD	_	8	pobj	_	_
10	that	_	IN	IN	_	14	mark	_	_
11	the	_	DT	DT	_	13	det	_	_
12	French	_	JJ	JJ	_	13	amod	_	_
13	Government	_	NN	NN	_	14	nsubj	_	_
14	considers	_	VBZ	VBZ	_	7	ccomp	_	_
15	the	_	DT	DT	_	16	det	_	_
16	crackdown	_	NN	NN	_	14	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	22	det	_	_
19	Iranian	_	JJ	JJ	_	22	amod	_	_
20	armed	_	JJ	JJ	_	22	amod	_	_
21	opposition	_	NN	NN	_	22	nn	_	_
22	group	_	NN	NN	_	17	pobj	_	_
23	the	_	DT	DT	_	24	det	_	_
24	People	_	NNS	NNS	_	26	nsubj	_	_
25	's	_	VBZ	VBZ	_	26	cop	_	_
26	Mujahedeen	_	NNP	NNP	_	22	rcmod	_	_
27	as	_	IN	IN	_	26	prep	_	_
28	part	_	NN	NN	_	27	pobj	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	the	_	DT	DT	_	31	det	_	_
31	operations	_	NNS	NNS	_	29	pobj	_	_
32	against	_	IN	IN	_	31	prep	_	_
33	terrorism	_	NN	NN	_	32	pobj	_	_
34	.	_	.	.	_	7	punct	_	_

Oracle:
(a / arm-01, ARG1, g4 / group)
(c / consider-02, ARG0, g / government-organization)
(c / consider-02, ARG1, c3 / crack-06)
(c / consider-02, ARG2, p / part)
(c2 / country, name, n / name)
(c3 / crack-06, ARG1, g4 / group)
(c4 / country, name, n4 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(g4 / group, mod, c4 / country)
(g4 / group, name, n2 / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, f / foreign)
(n / name, op, "France")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People's")
(n3 / name, op, "Dominique")
(n3 / name, op, "Villepin")
(n3 / name, op, "de")
(n4 / name, op, "Iran")
(o2 / operation, part, p / part)
(o2 / operation, prep-against, t2 / terrorism)
(o3 / oppose-01, ARG0, g4 / group)
(p2 / person, name, n3 / name)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, c / consider-02)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),terrorism,terrorism,false), Span(23,26,List(4, 3, 2, 1),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false), Span(19,20,List(5),armed,arm-01,false), Span(15,16,List(6),crackdown,crack-06,false), Span(13,14,List(7),considers,consider-01,false), Span(8,9,List(11, 10, 9, 8),030624,(date-entity :day 24 :month 6 :year 03),false), Span(6,7,List(12),said,say-01,false), Span(3,6,List(17, 16, 15, 14, 13),Dominique de Villepin,(person :name (name :op "Dominique" :op "de" :op "Villepin")),false), Span(2,3,List(19, 18),Minister,(have-org-role-91 :ARG2 minister),false)),Map(2 -> name, 5 -> arm-01, 12 -> say-01, 15 -> "Dominique", 8 -> date-entity, 18 -> have-org-role-91, 7 -> consider-01, 17 -> "Villepin", 1 -> organization, 4 -> "People's", 11 -> 03, 14 -> name, 6 -> crack-06, 0 -> terrorism, 9 -> 24, 16 -> "de", 19 -> minister, 3 -> "Mujahedeen", 10 -> 6, 13 -> person),Map(n -> name, h -> have-org-role-91, 2 -> 24, t -> terrorism, s -> say-01, m -> minister, d -> date-entity, p -> person, a -> arm-01, c -> crack-06, 6 -> 6, 0 -> 03, o -> organization, c2 -> consider-01, n2 -> name))),[Ljava.lang.String;@4b790d86,Annotation([Ljava.lang.String;@7e7f0216,[Ljava.lang.String;@4339baec,[Ljava.lang.String;@62db3891),Annotation([Ljava.lang.String;@61cd1c71,[Ljava.lang.String;@6724cdec,[Ledu.cmu.lti.nlp.amr.Dependency;@6944e53e),Annotation([Ljava.lang.String;@52e04737,[Ljava.lang.String;@5bc7e78e,[Ljava.lang.String;@1a4d1ab7),Annotation([Ljava.lang.String;@546e61d5,[Ljava.lang.String;@4674d90,[Ledu.cmu.lti.nlp.amr.Entity;@60783105))
AMR:
(a / arm-01, ARG1, o / organization)
(c / crack-06, ARG1, t / terrorism)
(c2 / consider-01, ARG1, c / crack-06)
(d / date-entity, day, 2 / 24)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 0 / 03)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / minister)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(n2 / name, op, "Dominique")
(n2 / name, op, "Villepin")
(n2 / name, op, "de")
(o / organization, name, n / name)
(p / person, name, n2 / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, c2 / consider-01)
(s / say-01, time, d / date-entity)

Decoded in 218,507 microseconds
Sentence: At French radio France Info de Villepin said that the People's Mujahedeen Organization has claimed responsibility for numerous attacks in Iran and said that this dimension of terrorism can not be hidden.

NER Entity: (thing :name (name :op "French"))
NER Entity: (country :name (name :op "France"))
NER Entity: (organization :name (name :op "Info"))
NER Entity: (person :name (name :op "de" :op "Villepin"))
NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen" :op "Organization"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 19-20:  attacks => attack-01
Span 29-30:  can => possible
Span 15-16:  claimed => claim-01
Span 5-7:  de Villepin => (person :name (name :op "de" :op "Villepin"))
Span 32-33:  hidden => hide-01
Span 18-19:  numerous => numerous
Span 10-13:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 2-3:  radio => radio
Span 16-17:  responsibility => responsible-41
Span 23-24:  said => say-01
Span 7-8:  said => say-01
Span 28-29:  terrorism => terrorism
Span 25-26:  this => this

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 22-23:  and => and
Oracle Span 19-20:  attacks => attack-01
Oracle Span 29-30:  can => possible
Oracle Span 15-16:  claimed => claim-01
Oracle Span 5-7:  de Villepin => (person :name (name :op "Villepin" :op "de"))
Oracle Span 26-27:  dimension => dimension
Oracle Span 3-5:  France Info => (name :op "Info" :op "France")
Oracle Span 1-2:  French => (country :name (name :op "France"))
Oracle Span 32-33:  hidden => hide-01
Oracle Span 21-22:  Iran => (country :name (name :op "Iran"))
Oracle Span 18-19:  numerous => numerous
Oracle Span 13-14:  Organization => organization
Oracle Span 10-13:  People 's Mujahedeen => (name :op "Mujahedeen" :op "People's")
Oracle Span 2-3:  radio => radio
Oracle Span 16-17:  responsibility => responsible-41
Oracle Span 7-8:  said => say-01
Oracle Span 28-29:  terrorism => terrorism
Oracle Span 25-26:  this => this

Extra span: said => say-01
Incorrect span: People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Incorrect span: de Villepin => (person :name (name :op "de" :op "Villepin"))
Missing span: de Villepin => (person :name (name :op "Villepin" :op "de"))
Missing span: People 's Mujahedeen => (name :op "Mujahedeen" :op "People's")
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: France Info => (name :op "Info" :op "France")
Missing span: French => (country :name (name :op "France"))
Missing span: and => and
Missing span: dimension => dimension
Missing span: Organization => organization
Dependencies:
1	At	_	IN	IN	_	8	prep	_	_
2	French	_	JJ	JJ	_	3	amod	_	_
3	radio	_	NN	NN	_	1	pobj	_	_
4	France	_	NNP	NNP	_	7	nn	_	_
5	Info	_	NNP	NNP	_	7	nn	_	_
6	de	_	FW	FW	_	7	nn	_	_
7	Villepin	_	NNP	NNP	_	8	nsubj	_	_
8	said	_	VBD	VBD	_	0	root	_	_
9	that	_	IN	IN	_	16	mark	_	_
10	the	_	DT	DT	_	11	det	_	_
11	People	_	NNS	NNS	_	14	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	Mujahedeen	_	NNP	NNP	_	14	nn	_	_
14	Organization	_	NNP	NNP	_	16	nsubj	_	_
15	has	_	VBZ	VBZ	_	16	aux	_	_
16	claimed	_	VBN	VBN	_	8	ccomp	_	_
17	responsibility	_	NN	NN	_	16	dobj	_	_
18	for	_	IN	IN	_	17	prep	_	_
19	numerous	_	JJ	JJ	_	20	amod	_	_
20	attacks	_	NNS	NNS	_	18	pobj	_	_
21	in	_	IN	IN	_	16	prep	_	_
22	Iran	_	NNP	NNP	_	21	pobj	_	_
23	and	_	CC	CC	_	8	cc	_	_
24	said	_	VBD	VBD	_	8	conj	_	_
25	that	_	IN	IN	_	33	mark	_	_
26	this	_	DT	DT	_	27	det	_	_
27	dimension	_	NN	NN	_	33	nsubjpass	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	terrorism	_	NN	NN	_	28	pobj	_	_
30	can	_	MD	MD	_	33	aux	_	_
31	not	_	RB	RB	_	33	neg	_	_
32	be	_	VB	VB	_	33	auxpass	_	_
33	hidden	_	VBN	VBN	_	24	ccomp	_	_
34	.	_	.	.	_	8	punct	_	_

Oracle:
(a / attack-01, location, c2 / country)
(a / attack-01, quant, n2 / numerous)
(a2 / and, op, c / claim-01)
(a2 / and, op, p / possible)
(c / claim-01, ARG0, o / organization)
(c / claim-01, ARG1, r / responsible-41)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(d / dimension, mod, t / terrorism)
(d / dimension, mod, t2 / this)
(h / hide-01, ARG1, d / dimension)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(n3 / name, op, "Iran")
(n4 / name, op, "France")
(n4 / name, op, "Info")
(n5 / name, op, "France")
(n6 / name, op, "Villepin")
(n6 / name, op, "de")
(o / organization, name, n / name)
(p / possible, domain, h / hide-01)
(p2 / person, name, n6 / name)
(r / responsible-41, ARG1, o / organization)
(r / responsible-41, ARG2, a / attack-01)
(r2 / radio, mod, c3 / country)
(r2 / radio, name, n4 / name)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, a2 / and)
(s / say-01, medium, r2 / radio)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),hidden,hide-01,false), Span(29,30,List(1),can,possible,false), Span(28,29,List(2),terrorism,terrorism,false), Span(25,26,List(3),this,this,false), Span(23,24,List(4),said,say-01,false), Span(19,20,List(5),attacks,attack-01,false), Span(18,19,List(6),numerous,numerous,false), Span(16,17,List(7),responsibility,responsible-41,false), Span(15,16,List(8),claimed,claim-01,false), Span(10,13,List(12, 11, 10, 9),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false), Span(7,8,List(13),said,say-01,false), Span(5,7,List(17, 16, 15, 14),de Villepin,(person :name (name :op "de" :op "Villepin")),false), Span(2,3,List(18),radio,radio,false)),Map(2 -> terrorism, 5 -> attack-01, 12 -> "People's", 15 -> name, 8 -> claim-01, 18 -> radio, 7 -> responsible-41, 17 -> "Villepin", 1 -> possible, 4 -> say-01, 11 -> "Mujahedeen", 14 -> person, 6 -> numerous, 0 -> hide-01, 9 -> organization, 16 -> "de", 3 -> this, 10 -> name, 13 -> say-01),Map(n -> numerous, h -> hide-01, s2 -> say-01, t -> terrorism, p2 -> person, s -> say-01, r2 -> radio, p -> possible, n3 -> name, a -> attack-01, t2 -> this, r -> responsible-41, c -> claim-01, o -> organization, n2 -> name))),[Ljava.lang.String;@1292071f,Annotation([Ljava.lang.String;@35d5ac51,[Ljava.lang.String;@b606cb6,[Ljava.lang.String;@2a3194c6),Annotation([Ljava.lang.String;@2819c460,[Ljava.lang.String;@30364216,[Ledu.cmu.lti.nlp.amr.Dependency;@38bb9d7a),Annotation([Ljava.lang.String;@1e8ab90f,[Ljava.lang.String;@78d6447a,[Ljava.lang.String;@7a729f84),Annotation([Ljava.lang.String;@1e469dfd,[Ljava.lang.String;@554f0dfb,[Ledu.cmu.lti.nlp.amr.Entity;@1f7076bc))
AMR:
(a / attack-01, ARG0, t / terrorism)
(a / attack-01, quant, n / numerous)
(c / claim-01, ARG0, o / organization)
(c / claim-01, ARG1, r / responsible-41)
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People's")
(n3 / name, op, "Villepin")
(n3 / name, op, "de")
(o / organization, name, n2 / name)
(p / possible, domain, h / hide-01)
(p2 / person, name, n3 / name)
(r / responsible-41, ARG2, a / attack-01)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, p / possible)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, c / claim-01)
(s2 / say-01, time, r2 / radio)
(t / terrorism, mod, t2 / this)

Decoded in 446,106 microseconds
Sentence: De Villepin said that the arrests were a decision of justice and that there is no diplomatic factor in this affair.

NER Entity: (person :name (name :op "De" :op "Villepin"))
Spans:
Span 5-6:  arrests => arrest-01
Span 0-2:  De Villepin => (person :name (name :op "De" :op "Villepin"))
Span 16-17:  diplomatic => diplomacy
Span 17-18:  factor => factor
Span 10-11:  justice => justice
Span 15-16:  no => -
Span 2-3:  said => say-01
Span 19-20:  this => this

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 20-21:  affair => affair
Oracle Span 11-12:  and => and
Oracle Span 5-6:  arrests => arrest-01
Oracle Span 0-2:  De Villepin => (person :name (name :op "Villepin" :op "De"))
Oracle Span 8-9:  decision => decide-01
Oracle Span 16-17:  diplomatic => diplomacy
Oracle Span 17-18:  factor => factor
Oracle Span 10-11:  justice => justice
Oracle Span 15-16:  no => -
Oracle Span 2-3:  said => say-01
Oracle Span 19-20:  this => this

Incorrect span: De Villepin => (person :name (name :op "De" :op "Villepin"))
Missing span: De Villepin => (person :name (name :op "Villepin" :op "De"))
Missing span: and => and
Missing span: affair => affair
Missing span: decision => decide-01
Dependencies:
1	De	_	NNP	NNP	_	2	nn	_	_
2	Villepin	_	NNP	NNP	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	9	mark	_	_
5	the	_	DT	DT	_	6	det	_	_
6	arrests	_	NNS	NNS	_	9	nsubj	_	_
7	were	_	VBD	VBD	_	9	cop	_	_
8	a	_	DT	DT	_	9	det	_	_
9	decision	_	NN	NN	_	3	ccomp	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	justice	_	NN	NN	_	10	pobj	_	_
12	and	_	CC	CC	_	9	cc	_	_
13	that	_	IN	IN	_	15	mark	_	_
14	there	_	EX	EX	_	15	expl	_	_
15	is	_	VBZ	VBZ	_	9	conj	_	_
16	no	_	DT	DT	_	18	neg	_	_
17	diplomatic	_	JJ	JJ	_	18	amod	_	_
18	factor	_	NN	NN	_	15	nsubj	_	_
19	in	_	IN	IN	_	18	prep	_	_
20	this	_	DT	DT	_	21	det	_	_
21	affair	_	NN	NN	_	19	pobj	_	_
22	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, d / decide-01)
(a / and, op, f / factor)
(a3 / affair, mod, t / this)
(d / decide-01, ARG0, j / justice)
(d / decide-01, ARG1, a2 / arrest-01)
(f / factor, mod, d2 / diplomacy)
(f / factor, polarity, - / -)
(f / factor, topic, a3 / affair)
(n / name, op, "De")
(n / name, op, "Villepin")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),this,this,false), Span(17,18,List(1),factor,factor,false), Span(16,17,List(2),diplomatic,diplomacy,false), Span(15,16,List(3),no,-,false), Span(10,11,List(4),justice,justice,false), Span(5,6,List(5),arrests,arrest-01,false), Span(2,3,List(6),said,say-01,false), Span(0,2,List(10, 9, 8, 7),De Villepin,(person :name (name :op "De" :op "Villepin")),false)),Map(2 -> diplomacy, 5 -> arrest-01, 8 -> name, 7 -> person, 1 -> factor, 4 -> justice, 6 -> say-01, 9 -> "De", 0 -> this, 10 -> "Villepin", 3 -> -),Map(n -> name, t -> this, s -> say-01, j -> justice, d -> diplomacy, p -> person, a -> arrest-01, - -> -, f -> factor))),[Ljava.lang.String;@71904469,Annotation([Ljava.lang.String;@5b9396d3,[Ljava.lang.String;@761e788f,[Ljava.lang.String;@6a472566),Annotation([Ljava.lang.String;@1907874b,[Ljava.lang.String;@5e65afb6,[Ledu.cmu.lti.nlp.amr.Dependency;@5b3a7ef5),Annotation([Ljava.lang.String;@8851ce1,[Ljava.lang.String;@2d9dff65,[Ljava.lang.String;@5ef6fd7f),Annotation([Ljava.lang.String;@5633ed82,[Ljava.lang.String;@767191b1,[Ledu.cmu.lti.nlp.amr.Entity;@34d52ecd))
AMR:
(a / arrest-01, ARG0, t / this)
(a / arrest-01, ARG1, p / person)
(f / factor, mod, d / diplomacy)
(f / factor, op, a / arrest-01)
(f / factor, polarity, - / -)
(n / name, op, "De")
(n / name, op, "Villepin")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, j / justice)

Decoded in 213,468 microseconds
Sentence: De Villepin said the French had acted strictly on the basis of justice and with the determination to make all efforts to fight terrorism.

NER Entity: (person :name (name :op "De" :op "Villepin"))
NER Entity: (thing :name (name :op "French"))
Spans:
Span 19-20:  all => all
Span 0-2:  De Villepin => (person :name (name :op "De" :op "Villepin"))
Span 16-17:  determination => determine-01
Span 20-21:  efforts => effort
Span 22-23:  fight => fight-01
Span 12-13:  justice => justice
Span 2-3:  said => say-01
Span 7-8:  strictly => strict
Span 23-24:  terrorism => terrorism

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 6-7:  acted => act-02
Oracle Span 19-20:  all => all
Oracle Span 0-2:  De Villepin => (person :name (name :op "Villepin" :op "De"))
Oracle Span 16-17:  determination => determine-01
Oracle Span 22-23:  fight => fight-01
Oracle Span 4-5:  French => (person :mod (country :name (name :op "France")))
Oracle Span 12-13:  justice => justice
Oracle Span 2-3:  said => say-01
Oracle Span 7-8:  strictly => strict
Oracle Span 23-24:  terrorism => terrorism

Extra span: efforts => effort
Incorrect span: De Villepin => (person :name (name :op "De" :op "Villepin"))
Missing span: De Villepin => (person :name (name :op "Villepin" :op "De"))
Missing span: acted => act-02
Missing span: French => (person :mod (country :name (name :op "France")))
Dependencies:
1	De	_	NNP	NNP	_	2	nn	_	_
2	Villepin	_	NNP	NNP	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	5	det	_	_
5	French	_	NNP	NNP	_	7	nsubj	_	_
6	had	_	VBD	VBD	_	7	aux	_	_
7	acted	_	VBN	VBN	_	3	ccomp	_	_
8	strictly	_	RB	RB	_	7	advmod	_	_
9	on	_	IN	IN	_	7	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	basis	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	justice	_	NN	NN	_	12	pobj	_	_
14	and	_	CC	CC	_	9	cc	_	_
15	with	_	IN	IN	_	9	conj	_	_
16	the	_	DT	DT	_	17	det	_	_
17	determination	_	NN	NN	_	15	pobj	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	make	_	VB	VB	_	17	vmod	_	_
20	all	_	DT	DT	_	21	det	_	_
21	efforts	_	NNS	NNS	_	19	dobj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	fight	_	VB	VB	_	19	xcomp	_	_
24	terrorism	_	NN	NN	_	23	dobj	_	_
25	.	_	.	.	_	3	punct	_	_

Oracle:
(a / act-02, ARG0, p2 / person)
(a / act-02, manner, d / determine-01)
(c / country, name, n2 / name)
(d / determine-01, ARG0, p2 / person)
(f / fight-01, ARG0, p2 / person)
(f / fight-01, ARG1, t / terrorism)
(n / name, op, "De")
(n / name, op, "Villepin")
(n2 / name, op, "France")
(p / person, name, n / name)
(p2 / person, mod, c / country)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / act-02)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),terrorism,terrorism,false), Span(22,23,List(1),fight,fight-01,false), Span(20,21,List(2),efforts,effort,false), Span(19,20,List(3),all,all,false), Span(16,17,List(4),determination,determine-01,false), Span(12,13,List(5),justice,justice,false), Span(7,8,List(6),strictly,strict,false), Span(2,3,List(7),said,say-01,false), Span(0,2,List(11, 10, 9, 8),De Villepin,(person :name (name :op "De" :op "Villepin")),false)),Map(2 -> effort, 5 -> justice, 8 -> person, 7 -> say-01, 1 -> fight-01, 11 -> "Villepin", 4 -> determine-01, 6 -> strict, 9 -> name, 0 -> terrorism, 10 -> "De", 3 -> all),Map(n -> name, e -> effort, s2 -> say-01, t -> terrorism, s -> strict, j -> justice, d -> determine-01, p -> person, a -> all, f -> fight-01))),[Ljava.lang.String;@5d21202d,Annotation([Ljava.lang.String;@14b789f6,[Ljava.lang.String;@6eb17ec8,[Ljava.lang.String;@730f9695),Annotation([Ljava.lang.String;@277bf091,[Ljava.lang.String;@fab35b1,[Ledu.cmu.lti.nlp.amr.Dependency;@6a094db2),Annotation([Ljava.lang.String;@65bdd558,[Ljava.lang.String;@1dba4e06,[Ljava.lang.String;@4beaf6bd),Annotation([Ljava.lang.String;@6b2e46af,[Ljava.lang.String;@60325987,[Ledu.cmu.lti.nlp.amr.Entity;@2f37f1f9))
AMR:
(d / determine-01, ARG0, s / strict)
(d / determine-01, ARG1, j / justice)
(d / determine-01, ARG2, f / fight-01)
(e / effort, mod, a / all)
(e / effort, purpose, f / fight-01)
(f / fight-01, ARG1, t / terrorism)
(n / name, op, "De")
(n / name, op, "Villepin")
(p / person, name, n / name)
(s2 / say-01, ARG0, p / person)
(s2 / say-01, ARG1, j / justice)

Decoded in 176,439 microseconds
Sentence: The headquarters of the People's Mujahedeen in northwest Paris was raided by the French police 030622.

NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "Paris"))
NER Entity: (thing :name (name :op "French"))
mkDayMonthYear(030622,22,06,2003)
mkDayMonthYear(030622,22,06,03)
mkDayMonthYear(030622,22,06,2003)
mkDayMonthYear(030622,22,06,03)
NER Entity: (country :name (name :op "Paris"))
Spans:
Span 16-17:  030622 => (date-entity :day 22 :month 6 :year 03)
Span 8-9:  northwest => northwest
Span 9-10:  Paris => (city :name (name :op "Paris"))
Span 4-7:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 11-12:  raided => raid-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 16-17:  030622 => (date-entity :year 2003 :day 22 :month 6)
Oracle Span 14-15:  French => (country :name (name :op "France"))
Oracle Span 1-2:  headquarters => headquarters
Oracle Span 8-9:  northwest => northwest
Oracle Span 9-10:  Paris => (city :name (name :op "Paris"))
Oracle Span 4-7:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Oracle Span 15-16:  police => police
Oracle Span 11-12:  raided => raid-01

Incorrect span: 030622 => (date-entity :day 22 :month 6 :year 03)
Missing span: 030622 => (date-entity :year 2003 :day 22 :month 6)
Missing span: headquarters => headquarters
Missing span: police => police
Missing span: French => (country :name (name :op "France"))
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	headquarters	_	NN	NN	_	12	nsubjpass	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	People	_	NNS	NNS	_	7	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	Mujahedeen	_	NNP	NNP	_	3	pobj	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	northwest	_	NNP	NNP	_	10	nn	_	_
10	Paris	_	NNP	NNP	_	8	pobj	_	_
11	was	_	VBD	VBD	_	12	auxpass	_	_
12	raided	_	VBN	VBN	_	0	root	_	_
13	by	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	17	det	_	_
15	French	_	JJ	JJ	_	17	amod	_	_
16	police	_	NN	NN	_	17	nn	_	_
17	030622	_	NNS	NNS	_	13	pobj	_	_
18	.	_	.	.	_	12	punct	_	_

Oracle:
(c / city, name, n2 / name)
(c / city, part, n3 / northwest)
(c2 / country, name, n4 / name)
(d / date-entity, day, 22)
(d / date-entity, month, 6)
(d / date-entity, year, 2003)
(h / headquarters, location, n3 / northwest)
(h / headquarters, poss, o / organization)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(n2 / name, op, "Paris")
(n4 / name, op, "France")
(o / organization, name, n / name)
(p / police, mod, c2 / country)
(r / raid-01, ARG0, p / police)
(r / raid-01, ARG1, h / headquarters)
(r / raid-01, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(3, 2, 1, 0),030622,(date-entity :day 22 :month 6 :year 03),false), Span(11,12,List(4),raided,raid-01,false), Span(9,10,List(7, 6, 5),Paris,(city :name (name :op "Paris")),false), Span(8,9,List(8),northwest,northwest,false), Span(4,7,List(12, 11, 10, 9),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false)),Map(2 -> 6, 5 -> city, 12 -> "People's", 8 -> northwest, 7 -> "Paris", 1 -> 22, 4 -> raid-01, 11 -> "Mujahedeen", 6 -> name, 0 -> date-entity, 9 -> organization, 3 -> 03, 10 -> name),Map(n -> name, 2 -> 22, d -> date-entity, n3 -> name, r -> raid-01, c -> city, 6 -> 6, o -> organization, 0 -> 03, n2 -> northwest))),[Ljava.lang.String;@3374b5bc,Annotation([Ljava.lang.String;@2af69643,[Ljava.lang.String;@587a1cfb,[Ljava.lang.String;@48528634),Annotation([Ljava.lang.String;@5e1d03d7,[Ljava.lang.String;@4047d2d9,[Ledu.cmu.lti.nlp.amr.Dependency;@48d293ee),Annotation([Ljava.lang.String;@146dcfe6,[Ljava.lang.String;@22587507,[Ljava.lang.String;@5c77ba8f),Annotation([Ljava.lang.String;@660f0c,[Ljava.lang.String;@7a0ef219,[Ledu.cmu.lti.nlp.amr.Entity;@1b1f5012))
AMR:
(c / city, mod, n2 / northwest)
(c / city, name, n / name)
(d / date-entity, day, 2 / 22)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 0 / 03)
(n / name, op, "Paris")
(n3 / name, op, "Mujahedeen")
(n3 / name, op, "People's")
(o / organization, name, n3 / name)
(r / raid-01, ARG0, o / organization)
(r / raid-01, ARG1, c / city)
(r / raid-01, time, d / date-entity)

Decoded in 78,287 microseconds
Sentence: The People's Mujahedeen accused the French authorities of carrying out the operation as part of a deal with the Iranian government.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 4-5:  accused => accuse-01
Span 7-8:  authorities => authority
Span 9-10:  carrying => carry-01
Span 17-18:  deal => deal-01
Span 12-13:  operation => operation
Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  accused => accuse-01
Oracle Span 7-8:  authorities => authority
Oracle Span 9-10:  carrying => carry-03
Oracle Span 17-18:  deal => deal-01
Oracle Span 6-7:  French => (country :name (name :op "France"))
Oracle Span 21-22:  government => (government-organization :ARG0-of govern-01)
Oracle Span 20-21:  Iranian => (country :name (name :op "Iran"))
Oracle Span 12-13:  operation => operation
Oracle Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))

Incorrect span: carrying => carry-01
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: carrying => carry-03
Missing span: French => (country :name (name :op "France"))
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	People	_	NNS	NNS	_	4	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Mujahedeen	_	NNP	NNP	_	5	nsubj	_	_
5	accused	_	VBD	VBD	_	0	root	_	_
6	the	_	DT	DT	_	8	det	_	_
7	French	_	JJ	JJ	_	8	amod	_	_
8	authorities	_	NNS	NNS	_	5	dobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	carrying	_	VBG	VBG	_	9	pcomp	_	_
11	out	_	RP	RP	_	10	prt	_	_
12	the	_	DT	DT	_	13	det	_	_
13	operation	_	NN	NN	_	10	dobj	_	_
14	as	_	IN	IN	_	10	prep	_	_
15	part	_	NN	NN	_	14	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	a	_	DT	DT	_	18	det	_	_
18	deal	_	NN	NN	_	16	pobj	_	_
19	with	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	22	det	_	_
21	Iranian	_	JJ	JJ	_	22	amod	_	_
22	government	_	NN	NN	_	19	pobj	_	_
23	.	_	.	.	_	5	punct	_	_

Oracle:
(a / accuse-01, ARG0, o / organization)
(a / accuse-01, ARG1, a2 / authority)
(a2 / authority, mod, c / country)
(c / country, name, n2 / name)
(c2 / carry-03, ARG0, a2 / authority)
(c2 / carry-03, ARG1, o2 / operation)
(c3 / country, name, n3 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(n2 / name, op, "France")
(n3 / name, op, "Iran")
(o / organization, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),deal,deal-01,false), Span(12,13,List(1),operation,operation,false), Span(9,10,List(2),carrying,carry-01,false), Span(7,8,List(3),authorities,authority,false), Span(4,5,List(4),accused,accuse-01,false), Span(1,4,List(8, 7, 6, 5),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false)),Map(2 -> carry-01, 5 -> organization, 8 -> "People's", 7 -> "Mujahedeen", 1 -> operation, 4 -> accuse-01, 6 -> name, 0 -> deal-01, 3 -> authority),Map(n -> name, d -> deal-01, a -> authority, o2 -> organization, a2 -> accuse-01, c -> carry-01, o -> operation))),[Ljava.lang.String;@7add323c,Annotation([Ljava.lang.String;@4a734c04,[Ljava.lang.String;@4760f169,[Ljava.lang.String;@261ea657),Annotation([Ljava.lang.String;@35c12c7a,[Ljava.lang.String;@658255aa,[Ledu.cmu.lti.nlp.amr.Dependency;@25290bca),Annotation([Ljava.lang.String;@76563d26,[Ljava.lang.String;@4ac86d6a,[Ljava.lang.String;@3d904e9c),Annotation([Ljava.lang.String;@508a65bf,[Ljava.lang.String;@17f2dd85,[Ledu.cmu.lti.nlp.amr.Entity;@1e58512c))
AMR:
(a2 / accuse-01, ARG0, o2 / organization)
(a2 / accuse-01, ARG1, a / authority)
(a2 / accuse-01, ARG2, c / carry-01)
(c / carry-01, ARG1, o / operation)
(d / deal-01, part, o / operation)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(o2 / organization, name, n / name)

Decoded in 73,613 microseconds
Sentence: This claim the Iranian government has denied.

NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 1-2:  claim => claim-01
Span 6-7:  denied => deny-01
Span 0-1:  This => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  claim => (thing :ARG1-of claim-01)
Oracle Span 6-7:  denied => deny-01
Oracle Span 4-5:  government => (government-organization :ARG0-of govern-01)
Oracle Span 3-4:  Iranian => (country :name (name :op "Iran"))
Oracle Span 0-1:  This => this

Incorrect span: claim => claim-01
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: claim => (thing :ARG1-of claim-01)
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	This	_	DT	DT	_	2	nsubj	_	_
2	claim	_	VBP	VBP	_	0	root	_	_
3	the	_	DT	DT	_	5	det	_	_
4	Iranian	_	JJ	JJ	_	5	amod	_	_
5	government	_	NN	NN	_	7	nsubj	_	_
6	has	_	VBZ	VBZ	_	7	aux	_	_
7	denied	_	VBN	VBN	_	2	ccomp	_	_
8	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / claim-01, ARG1, t2 / thing)
(d / deny-01, ARG0, g / government-organization)
(d / deny-01, ARG1, t2 / thing)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "Iran")
(t2 / thing, mod, t / this)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),denied,deny-01,false), Span(1,2,List(1),claim,claim-01,false), Span(0,1,List(2),This,this,false)),Map(2 -> this, 1 -> claim-01, 0 -> deny-01),Map(t -> this, d -> deny-01, c -> claim-01))),[Ljava.lang.String;@210308d5,Annotation([Ljava.lang.String;@22a736d7,[Ljava.lang.String;@23b8d9f3,[Ljava.lang.String;@7f353d99),Annotation([Ljava.lang.String;@4649d70a,[Ljava.lang.String;@5d43409a,[Ledu.cmu.lti.nlp.amr.Dependency;@38d17d80),Annotation([Ljava.lang.String;@6ede46f6,[Ljava.lang.String;@66273da0,[Ljava.lang.String;@2127e66e),Annotation([Ljava.lang.String;@1229a2b7,[Ljava.lang.String;@e5cbff2,[Ledu.cmu.lti.nlp.amr.Entity;@51c959a4))
AMR:
(c / claim-01, ARG0, t / this)
(c / claim-01, ARG1, d / deny-01)

Decoded in 14,871 microseconds
Sentence: 17 Mujahedeen members are now under judicial investigation for alleged links to a terrorist organization and for funding terrorist activities.

NER Entity: (organization :name (name :op "Mujahedeen"))
Spans:
Span 19-20:  activities => activity
Span 9-10:  alleged => allege-01
Span 17-18:  funding => fund-01
Span 7-8:  investigation => investigate-01
Span 6-7:  judicial => judicial
Span 2-3:  members => (have-org-role-91 :ARG2 member)
Span 4-5:  now => now
Span 14-15:  organization => organization

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 0-1:  17 => 17
Oracle Span 19-20:  activities => activity
Oracle Span 9-10:  alleged => allege-01
Oracle Span 15-16:  and => and
Oracle Span 17-18:  funding => fund-01
Oracle Span 7-8:  investigation => investigate-01
Oracle Span 10-11:  links => link-01
Oracle Span 2-3:  members => (have-org-role-91 :ARG2 member)
Oracle Span 1-2:  Mujahedeen => (name :op "Mujahedeen")
Oracle Span 4-5:  now => now
Oracle Span 14-15:  organization => organization
Oracle Span 13-14:  terrorist => terrorism

Extra span: judicial => judicial
Missing span: Mujahedeen => (name :op "Mujahedeen")
Missing span: 17 => 17
Missing span: and => and
Missing span: links => link-01
Missing span: terrorist => terrorism
Dependencies:
1	17	_	CD	CD	_	3	num	_	_
2	Mujahedeen	_	NNP	NNP	_	3	nn	_	_
3	members	_	NNS	NNS	_	4	nsubj	_	_
4	are	_	VBP	VBP	_	0	root	_	_
5	now	_	RB	RB	_	4	advmod	_	_
6	under	_	IN	IN	_	4	prep	_	_
7	judicial	_	JJ	JJ	_	8	amod	_	_
8	investigation	_	NN	NN	_	6	pobj	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	alleged	_	VBN	VBN	_	11	amod	_	_
11	links	_	NNS	NNS	_	9	pobj	_	_
12	to	_	TO	TO	_	11	prep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	terrorist	_	JJ	JJ	_	15	amod	_	_
15	organization	_	NN	NN	_	12	pobj	_	_
16	and	_	CC	CC	_	6	cc	_	_
17	for	_	IN	IN	_	6	conj	_	_
18	funding	_	VBG	VBG	_	17	pcomp	_	_
19	terrorist	_	JJ	JJ	_	20	amod	_	_
20	activities	_	NNS	NNS	_	18	dobj	_	_
21	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, f / fund-01)
(a / and, op, l / link-01)
(a2 / allege-01, ARG1, l / link-01)
(a3 / activity, mod, t / terrorism)
(f / fund-01, ARG1, a3 / activity)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(i / investigate-01, ARG2, a / and)
(i / investigate-01, time, n2 / now)
(n / name, op, "Mujahedeen")
(o / organization, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),activities,activity,false), Span(17,18,List(1),funding,fund-01,false), Span(14,15,List(2),organization,organization,false), Span(9,10,List(3),alleged,allege-01,false), Span(7,8,List(4),investigation,investigate-01,false), Span(6,7,List(5),judicial,judicial,false), Span(4,5,List(6),now,now,false), Span(2,3,List(8, 7),members,(have-org-role-91 :ARG2 member),false)),Map(2 -> organization, 5 -> judicial, 8 -> member, 7 -> have-org-role-91, 1 -> fund-01, 4 -> investigate-01, 6 -> now, 0 -> activity, 3 -> allege-01),Map(n -> now, h -> have-org-role-91, j -> judicial, m -> member, a -> activity, i -> investigate-01, a2 -> allege-01, o -> organization, f -> fund-01))),[Ljava.lang.String;@4fc3c165,Annotation([Ljava.lang.String;@10a0fe30,[Ljava.lang.String;@7b6860f9,[Ljava.lang.String;@60f70249),Annotation([Ljava.lang.String;@31ee2fdb,[Ljava.lang.String;@262816a8,[Ledu.cmu.lti.nlp.amr.Dependency;@1effd53c),Annotation([Ljava.lang.String;@46c269e0,[Ljava.lang.String;@6920614,[Ljava.lang.String;@6069dd38),Annotation([Ljava.lang.String;@5fa23c,[Ljava.lang.String;@558756be,[Ledu.cmu.lti.nlp.amr.Entity;@433348bc))
AMR:
(a2 / allege-01, ARG1, h / have-org-role-91)
(f / fund-01, ARG0, o / organization)
(f / fund-01, ARG1, a / activity)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(i / investigate-01, ARG1, a2 / allege-01)
(i / investigate-01, mod, j / judicial)
(i / investigate-01, time, n / now)

Decoded in 137,604 microseconds
Sentence: Some 160 people were initially detained in the police crackdown of over 10 of the People's Mujahedeen's locations in France.

NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 1-2:  160 => 160
Span 9-10:  crackdown => crack-06
Span 5-6:  detained => detain-01
Span 4-5:  initially => initial
Span 19-20:  locations => location
Span 15-18:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 12-13:  10 => 10
Oracle Span 1-2:  160 => 160
Oracle Span 9-10:  crackdown => crack-06
Oracle Span 5-6:  detained => detain-01
Oracle Span 21-22:  France => (country :name (name :op "France"))
Oracle Span 4-5:  initially => initial
Oracle Span 19-20:  locations => location
Oracle Span 10-11:  of => include-91
Oracle Span 11-12:  over => over
Oracle Span 15-18:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Oracle Span 8-9:  police => police
Oracle Span 0-1:  Some => (person :quant some)

Missing span: France => (country :name (name :op "France"))
Missing span: police => police
Missing span: of => include-91
Missing span: over => over
Missing span: 10 => 10
Missing span: Some => (person :quant some)
Dependencies:
1	Some	_	DT	DT	_	2	quantmod	_	_
2	160	_	CD	CD	_	3	num	_	_
3	people	_	NNS	NNS	_	6	nsubjpass	_	_
4	were	_	VBD	VBD	_	6	auxpass	_	_
5	initially	_	RB	RB	_	6	advmod	_	_
6	detained	_	VBN	VBN	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	police	_	NN	NN	_	10	nn	_	_
10	crackdown	_	NN	NN	_	7	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	over	_	IN	IN	_	13	quantmod	_	_
13	10	_	CD	CD	_	11	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	People	_	NNS	NNS	_	14	pobj	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	Mujahedeen	_	NNP	NNP	_	20	poss	_	_
19	's	_	POS	POS	_	18	possessive	_	_
20	locations	_	NNS	NNS	_	16	dep	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	France	_	NNP	NNP	_	21	pobj	_	_
23	.	_	.	.	_	6	punct	_	_

Oracle:
(c / crack-06, ARG0, p2 / police)
(c / crack-06, ARG1, l / location)
(c2 / country, name, n2 / name)
(d / detain-01, ARG1, p / person)
(d / detain-01, time, c / crack-06)
(d / detain-01, time, i / initial)
(i2 / include-91, ARG1, l / location)
(l / location, quant, o / over)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(n2 / name, op, "France")
(o / over, op, 1 / 10)
(o2 / organization, name, n / name)
(p / person, quant, s / some)
(s / some, op, 12 / 160)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),locations,location,false), Span(15,18,List(4, 3, 2, 1),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false), Span(9,10,List(5),crackdown,crack-06,false), Span(5,6,List(6),detained,detain-01,false), Span(4,5,List(7),initially,initial,false), Span(1,2,List(8),160,160,false)),Map(2 -> name, 5 -> crack-06, 8 -> 160, 7 -> initial, 1 -> organization, 4 -> "People's", 6 -> detain-01, 0 -> location, 3 -> "Mujahedeen"),Map(n -> name, d -> detain-01, 1 -> 160, i -> initial, c -> crack-06, l -> location, o -> organization))),[Ljava.lang.String;@6d1dcdff,Annotation([Ljava.lang.String;@102ecc22,[Ljava.lang.String;@7ff35a3f,[Ljava.lang.String;@26dc9bd5),Annotation([Ljava.lang.String;@252dc8c4,[Ljava.lang.String;@43045f9f,[Ledu.cmu.lti.nlp.amr.Dependency;@2643d762),Annotation([Ljava.lang.String;@6403e24c,[Ljava.lang.String;@2f236de0,[Ljava.lang.String;@4eba373c),Annotation([Ljava.lang.String;@767a014e,[Ljava.lang.String;@d109c4f,[Ledu.cmu.lti.nlp.amr.Entity;@3968bc60))
AMR:
(c / crack-06, ARG0, 1 / 160)
(c / crack-06, ARG1, o / organization)
(d / detain-01, ARG0, l / location)
(d / detain-01, location, c / crack-06)
(d / detain-01, time, i / initial)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(o / organization, name, n / name)

Decoded in 123,601 microseconds
Sentence: A Paris map with streets related to the United States Embassy marked out, bulletproof jackets, transmission equipment, more than 200 computers and about 9 million US dollars in cash were seized during the police raids.

NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Paris"))
Spans:
Span 22-23:  200 => 200
Span 31-32:  cash => cash
Span 23-24:  computers => computer
Span 29-30:  dollars => (monetary-quantity :unit dollar)
Span 18-19:  equipment => equipment
Span 2-3:  map => map-01
Span 1-2:  Paris => (city :name (name :op "Paris"))
Span 37-38:  raids => raid-01
Span 5-6:  related => relate-01
Span 4-5:  streets => street
Span 8-10:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 22-23:  200 => 200
Oracle Span 25-26:  about => about
Oracle Span 24-25:  and => and
Oracle Span 14-15:  bulletproof => bulletproof
Oracle Span 31-32:  cash => cash
Oracle Span 23-24:  computers => computer
Oracle Span 29-30:  dollars => (monetary-quantity :unit dollar)
Oracle Span 10-11:  Embassy => embassy
Oracle Span 18-19:  equipment => equipment
Oracle Span 15-16:  jackets => jacket
Oracle Span 2-3:  map => map
Oracle Span 11-12:  marked => mark-02
Oracle Span 20-21:  more => more-than
Oracle Span 12-13:  out => out
Oracle Span 1-2:  Paris => (city :name (name :op "Paris"))
Oracle Span 36-37:  police => police
Oracle Span 37-38:  raids => raid-01
Oracle Span 5-6:  related => relate-01
Oracle Span 33-34:  seized => seize-01
Oracle Span 4-5:  streets => street
Oracle Span 17-18:  transmission => transmit-01
Oracle Span 8-10:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: map => map-01
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: seized => seize-01
Missing span: police => police
Missing span: and => and
Missing span: about => about
Missing span: jackets => jacket
Missing span: bulletproof => bulletproof
Missing span: map => map
Missing span: marked => mark-02
Missing span: out => out
Missing span: Embassy => embassy
Missing span: more => more-than
Missing span: transmission => transmit-01
Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	Paris	_	NNP	NNP	_	3	nn	_	_
3	map	_	NN	NN	_	12	nsubj	_	_
4	with	_	IN	IN	_	3	prep	_	_
5	streets	_	NNS	NNS	_	4	pobj	_	_
6	related	_	VBN	VBN	_	5	vmod	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	the	_	DT	DT	_	11	det	_	_
9	United	_	NNP	NNP	_	11	nn	_	_
10	States	_	NNPS	NNPS	_	11	nn	_	_
11	Embassy	_	NNP	NNP	_	7	pobj	_	_
12	marked	_	VBD	VBD	_	34	ccomp	_	_
13	out	_	RP	RP	_	12	prt	_	_
14	,	_	,	,	_	34	punct	_	_
15	bulletproof	_	JJ	JJ	_	16	amod	_	_
16	jackets	_	NNS	NNS	_	34	nsubjpass	_	_
17	,	_	,	,	_	16	punct	_	_
18	transmission	_	NN	NN	_	19	nn	_	_
19	equipment	_	NN	NN	_	16	conj	_	_
20	,	_	,	,	_	16	punct	_	_
21	more	_	JJR	JJR	_	22	mwe	_	_
22	than	_	IN	IN	_	23	quantmod	_	_
23	200	_	CD	CD	_	24	num	_	_
24	computers	_	NNS	NNS	_	16	conj	_	_
25	and	_	CC	CC	_	16	cc	_	_
26	about	_	RB	RB	_	28	quantmod	_	_
27	9	_	CD	CD	_	28	number	_	_
28	million	_	CD	CD	_	30	num	_	_
29	US	_	NNP	NNP	_	30	nn	_	_
30	dollars	_	NNS	NNS	_	16	conj	_	_
31	in	_	IN	IN	_	30	prep	_	_
32	cash	_	NN	NN	_	31	pobj	_	_
33	were	_	VBD	VBD	_	34	auxpass	_	_
34	seized	_	VBN	VBN	_	0	root	_	_
35	during	_	IN	IN	_	34	prep	_	_
36	the	_	DT	DT	_	38	det	_	_
37	police	_	NN	NN	_	38	nn	_	_
38	raids	_	NNS	NNS	_	35	pobj	_	_
39	.	_	.	.	_	34	punct	_	_

Oracle:
(a / about, op, m4 / monetary-quantity)
(a2 / and, op, a / about)
(a2 / and, op, c2 / computer)
(a2 / and, op, e / equipment)
(a2 / and, op, j / jacket)
(a2 / and, op, m3 / map)
(c / city, name, n / name)
(c2 / computer, quant, m / more-than)
(c5 / country, name, n2 / name)
(d / dollar, mod, c4 / cash)
(d / dollar, mod, c5 / country)
(e3 / embassy, poss, c5 / country)
(j / jacket, mod, b2 / bulletproof)
(m / more-than, op, 2 / 200)
(m3 / map, mod, c / city)
(m4 / monetary-quantity, unit, d / dollar)
(m5 / mark-02, ARG1, s2 / street)
(m5 / mark-02, manner, o / out)
(n / name, op, "Paris")
(n2 / name, op, "States")
(n2 / name, op, "United")
(r / relate-01, ARG1, s2 / street)
(r / relate-01, ARG2, e3 / embassy)
(r2 / raid-01, ARG0, p2 / police)
(s2 / street, consist, m3 / map)
(s3 / seize-01, ARG1, a2 / and)
(s3 / seize-01, time, r2 / raid-01)
(t2 / transmit-01, instrument, e / equipment)

Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),raids,raid-01,false), Span(31,32,List(1),cash,cash,false), Span(29,30,List(3, 2),dollars,(monetary-quantity :unit dollar),false), Span(23,24,List(4),computers,computer,false), Span(22,23,List(5),200,200,false), Span(18,19,List(6),equipment,equipment,false), Span(8,10,List(10, 9, 8, 7),United States,(country :name (name :op "United" :op "States")),false), Span(5,6,List(11),related,relate-01,false), Span(4,5,List(12),streets,street,false), Span(2,3,List(13),map,map-01,false), Span(1,2,List(16, 15, 14),Paris,(city :name (name :op "Paris")),false)),Map(2 -> monetary-quantity, 5 -> 200, 12 -> street, 15 -> name, 8 -> name, 7 -> country, 1 -> cash, 4 -> computer, 11 -> relate-01, 14 -> city, 6 -> equipment, 0 -> raid-01, 9 -> "United", 16 -> "Paris", 3 -> dollar, 10 -> "States", 13 -> map-01),Map(e -> equipment, n -> name, 2 -> 200, m2 -> map-01, c4 -> city, s -> street, m -> monetary-quantity, d -> dollar, r2 -> relate-01, c3 -> country, r -> raid-01, c -> cash, n2 -> name, c2 -> computer))),[Ljava.lang.String;@26f46fa6,Annotation([Ljava.lang.String;@227a47,[Ljava.lang.String;@9596ce8,[Ljava.lang.String;@75ae4a1f),Annotation([Ljava.lang.String;@70228253,[Ljava.lang.String;@63c12e52,[Ledu.cmu.lti.nlp.amr.Dependency;@21bd20ee),Annotation([Ljava.lang.String;@26c47874,[Ljava.lang.String;@421056e5,[Ljava.lang.String;@2849434b),Annotation([Ljava.lang.String;@60bbacfc,[Ljava.lang.String;@65b97f47,[Ledu.cmu.lti.nlp.amr.Entity;@255eaa6b))
AMR:
(c / cash, quant, m / monetary-quantity)
(c2 / computer, quant, 2 / 200)
(c3 / country, name, n / name)
(c4 / city, location, c3 / country)
(c4 / city, name, n2 / name)
(m / monetary-quantity, unit, d / dollar)
(m2 / map-01, ARG0, e / equipment)
(m2 / map-01, ARG1, s / street)
(m2 / map-01, location, c4 / city)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Paris")
(r / raid-01, ARG0, 2 / 200)
(r / raid-01, ARG1, c3 / country)
(r2 / relate-01, ARG0, m / monetary-quantity)
(r2 / relate-01, ARG1, s / street)

Decoded in 434,170 microseconds
Sentence: The People's Mujahedeen has been classified by the United States, the European Union and Iran as a terrorist organization.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "European" :op "Union"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 6-7:  classified => classify-02
Span 13-15:  European Union => (organization :name (name :op "Union" :op "European"))
Span 20-21:  organization => organization
Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 9-11:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 6-7:  classified => classify-01
Oracle Span 13-15:  European Union => (organization :name (name :op "Union" :op "European"))
Oracle Span 16-17:  Iran => (country :name (name :op "Iran"))
Oracle Span 20-21:  organization => organization
Oracle Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Oracle Span 19-20:  terrorist => terrorism
Oracle Span 9-11:  United States => (country :name (name :op "States" :op "United"))

Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: classified => classify-02
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Iran => (country :name (name :op "Iran"))
Missing span: classified => classify-01
Missing span: and => and
Missing span: terrorist => terrorism
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	People	_	NNS	NNS	_	4	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Mujahedeen	_	NNP	NNP	_	7	nsubjpass	_	_
5	has	_	VBZ	VBZ	_	7	aux	_	_
6	been	_	VBN	VBN	_	7	auxpass	_	_
7	classified	_	VBN	VBN	_	0	root	_	_
8	by	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	United	_	NNP	NNP	_	11	nn	_	_
11	States	_	NNPS	NNPS	_	8	pobj	_	_
12	,	_	,	,	_	11	punct	_	_
13	the	_	DT	DT	_	15	det	_	_
14	European	_	NNP	NNP	_	15	nn	_	_
15	Union	_	NNP	NNP	_	11	conj	_	_
16	and	_	CC	CC	_	11	cc	_	_
17	Iran	_	NNP	NNP	_	11	conj	_	_
18	as	_	IN	IN	_	7	prep	_	_
19	a	_	DT	DT	_	21	det	_	_
20	terrorist	_	JJ	JJ	_	21	amod	_	_
21	organization	_	NN	NN	_	18	pobj	_	_
22	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a / and, op, o2 / organization)
(c / classify-01, ARG0, a / and)
(c / classify-01, ARG1, o / organization)
(c / classify-01, ARG2, o3 / organization)
(c2 / country, name, n2 / name)
(c3 / country, name, n4 / name)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "European")
(n3 / name, op, "Union")
(n4 / name, op, "Iran")
(o / organization, name, n / name)
(o2 / organization, name, n3 / name)
(o3 / organization, mod, t / terrorism)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),organization,organization,false), Span(13,15,List(4, 3, 2, 1),European Union,(organization :name (name :op "Union" :op "European")),false), Span(9,11,List(8, 7, 6, 5),United States,(country :name (name :op "United" :op "States")),false), Span(6,7,List(9),classified,classify-02,false), Span(1,4,List(13, 12, 11, 10),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false)),Map(2 -> name, 5 -> country, 12 -> "Mujahedeen", 8 -> "States", 7 -> "United", 1 -> organization, 4 -> "European", 11 -> name, 6 -> name, 0 -> organization, 9 -> classify-02, 3 -> "Union", 10 -> organization, 13 -> "People's"),Map(n -> name, o3 -> organization, n3 -> name, o2 -> organization, c -> country, o -> organization, c2 -> classify-02, n2 -> name))),[Ljava.lang.String;@476fe690,Annotation([Ljava.lang.String;@7a0e7ecd,[Ljava.lang.String;@54e3658c,[Ljava.lang.String;@43e9089),Annotation([Ljava.lang.String;@3c5dbdf8,[Ljava.lang.String;@352c44a8,[Ledu.cmu.lti.nlp.amr.Dependency;@7aac8884),Annotation([Ljava.lang.String;@a66e580,[Ljava.lang.String;@5b852b49,[Ljava.lang.String;@cdb2d95),Annotation([Ljava.lang.String;@122d6c22,[Ljava.lang.String;@2f5ac102,[Ledu.cmu.lti.nlp.amr.Entity;@5df778c3))
AMR:
(c / country, name, n2 / name)
(c2 / classify-02, ARG0, c / country)
(c2 / classify-02, ARG1, o3 / organization)
(c2 / classify-02, ARG2, o / organization)
(n / name, op, "European")
(n / name, op, "Union")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "Mujahedeen")
(n3 / name, op, "People's")
(o2 / organization, name, n / name)
(o2 / organization, part, o / organization)
(o3 / organization, name, n3 / name)

Decoded in 167,562 microseconds
Sentence: The People's Mujahedeen was formed in the 1960s by college-educated young Iranians and was described as an Islamic leftist Organization.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (thing :name (name :op "Iranians"))
NER Entity: (thing :name (name :op "Islamic"))
NER Entity: (organization :name (name :op "Organization"))
NER Entity: (organization :name (name :op "Organization"))
Spans:
Span 8-9:  1960s => 1960
Span 17-18:  described => describe-01
Span 5-6:  formed => form-01
Span 14-15:  Iranians => (person :mod (country :name (name :op "Iran")))
Span 20-21:  Islamic => (religious-group :name (name :op "Islam"))
Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 13-14:  young => young

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 8-9:  1960s => 1960
Oracle Span 15-16:  and => and
Oracle Span 10-11:  college => college
Oracle Span 17-18:  described => describe-01
Oracle Span 12-13:  educated => (person :ARG1-of educate-01)
Oracle Span 5-6:  formed => form-01
Oracle Span 14-15:  Iranians => (country :name (name :op "Iran"))
Oracle Span 20-21:  Islamic => (religious-group :name (name :op "Islamism"))
Oracle Span 21-22:  leftist => leftism
Oracle Span 22-23:  Organization => organization
Oracle Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Oracle Span 13-14:  young => young

Incorrect span: Islamic => (religious-group :name (name :op "Islam"))
Incorrect span: Iranians => (person :mod (country :name (name :op "Iran")))
Missing span: Iranians => (country :name (name :op "Iran"))
Missing span: Islamic => (religious-group :name (name :op "Islamism"))
Missing span: and => and
Missing span: Organization => organization
Missing span: educated => (person :ARG1-of educate-01)
Missing span: college => college
Missing span: leftist => leftism
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	People	_	NNS	NNS	_	4	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Mujahedeen	_	NNP	NNP	_	6	nsubjpass	_	_
5	was	_	VBD	VBD	_	6	auxpass	_	_
6	formed	_	VBN	VBN	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	1960s	_	NNS	NNS	_	7	pobj	_	_
10	by	_	IN	IN	_	6	prep	_	_
11	college-educated	_	JJ	JJ	_	13	amod	_	_
12	young	_	JJ	JJ	_	13	amod	_	_
13	Iranians	_	NNPS	NNPS	_	10	pobj	_	_
14	and	_	CC	CC	_	6	cc	_	_
15	was	_	VBD	VBD	_	16	auxpass	_	_
16	described	_	VBN	VBN	_	6	conj	_	_
17	as	_	IN	IN	_	16	prep	_	_
18	an	_	DT	DT	_	21	det	_	_
19	Islamic	_	JJ	JJ	_	21	amod	_	_
20	leftist	_	JJ	JJ	_	21	amod	_	_
21	Organization	_	NNP	NNP	_	17	pobj	_	_
22	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, d2 / describe-01)
(a / and, op, f / form-01)
(c / country, name, n2 / name)
(d2 / describe-01, ARG1, o / organization)
(d2 / describe-01, ARG2, o2 / organization)
(e / educate-01, ARG1, p / person)
(e / educate-01, location, c2 / college)
(f / form-01, ARG0, p / person)
(f / form-01, ARG1, o / organization)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(n2 / name, op, "Iran")
(n3 / name, op, "Islamism")
(o / organization, name, n / name)
(o2 / organization, mod, l / leftism)
(o2 / organization, mod, r / religious-group)
(p / person, mod, c / country)
(p / person, mod, y / young)
(r / religious-group, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(2, 1, 0),Islamic,(religious-group :name (name :op "Islam")),false), Span(17,18,List(3),described,describe-01,false), Span(14,15,List(7, 6, 5, 4),Iranians,(person :mod (country :name (name :op "Iran"))),false), Span(13,14,List(8),young,young,false), Span(8,9,List(9),1960s,1960,false), Span(5,6,List(10),formed,form-01,false), Span(1,4,List(14, 13, 12, 11),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false)),Map(2 -> "Islam", 5 -> country, 12 -> name, 8 -> young, 7 -> "Iran", 1 -> name, 4 -> person, 11 -> organization, 14 -> "People's", 6 -> name, 0 -> religious-group, 9 -> 1960, 3 -> describe-01, 10 -> form-01, 13 -> "Mujahedeen"),Map(n -> name, d -> describe-01, 1 -> 1960, y -> young, p -> person, n3 -> name, r -> religious-group, c -> country, o -> organization, f -> form-01, n2 -> name))),[Ljava.lang.String;@895416d,Annotation([Ljava.lang.String;@71a06021,[Ljava.lang.String;@80bfdc6,[Ljava.lang.String;@6edcad64),Annotation([Ljava.lang.String;@4c6007fb,[Ljava.lang.String;@3e33d73e,[Ledu.cmu.lti.nlp.amr.Dependency;@6981f8f3),Annotation([Ljava.lang.String;@623dcf2a,[Ljava.lang.String;@2eae4349,[Ljava.lang.String;@e84fb85),Annotation([Ljava.lang.String;@68a4dcc6,[Ljava.lang.String;@646c0a67,[Ledu.cmu.lti.nlp.amr.Entity;@3804a9a8))
AMR:
(c / country, name, n2 / name)
(d / describe-01, ARG1, o / organization)
(f / form-01, ARG0, 1 / 1960)
(f / form-01, ARG1, o / organization)
(f / form-01, ARG2, p / person)
(n / name, op, "Islam")
(n2 / name, op, "Iran")
(n3 / name, op, "Mujahedeen")
(n3 / name, op, "People's")
(o / organization, name, n3 / name)
(p / person, mod, c / country)
(p / person, mod, y / young)
(r / religious-group, name, n / name)
(y / young, mod, r / religious-group)

Decoded in 359,659 microseconds
Sentence: The People's Mujahedeen staged terrorist attacks inside Iran in the 1970s and killed several US military personnel and civilians working on defense projects in Teheran.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Teheran"))
NER Entity: (country :name (name :op "Teheran"))
Spans:
Span 11-12:  1970s => 1970
Span 6-7:  attacks => attack-01
Span 19-20:  civilians => civilian
Span 7-8:  inside => inside
Span 13-14:  killed => kill-01
Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 23-24:  projects => project
Span 14-15:  several => several
Span 4-5:  staged => stage-01
Span 25-26:  Teheran => (city :name (name :op "Teheran"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 11-12:  1970s => 1970
Oracle Span 12-13:  and => and
Oracle Span 18-19:  and => and
Oracle Span 6-7:  attacks => attack-01
Oracle Span 19-20:  civilians => civilian
Oracle Span 22-23:  defense => defense
Oracle Span 7-8:  inside => inside
Oracle Span 8-9:  Iran => (country :name (name :op "Iran"))
Oracle Span 13-14:  killed => kill-01
Oracle Span 16-17:  military => military
Oracle Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Oracle Span 17-18:  personnel => (have-org-role-91 :ARG2 personnel)
Oracle Span 23-24:  projects => project
Oracle Span 14-15:  several => several
Oracle Span 4-5:  staged => stage-01
Oracle Span 25-26:  Teheran => (city :name (name :op "Teheran"))
Oracle Span 5-6:  terrorist => terrorism
Oracle Span 15-16:  US => (country :name (name :op "US"))
Oracle Span 20-21:  working => work-01

Missing span: Iran => (country :name (name :op "Iran"))
Missing span: US => (country :name (name :op "US"))
Missing span: and => and
Missing span: and => and
Missing span: working => work-01
Missing span: defense => defense
Missing span: military => military
Missing span: personnel => (have-org-role-91 :ARG2 personnel)
Missing span: terrorist => terrorism
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	People	_	NNS	NNS	_	4	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Mujahedeen	_	NNP	NNP	_	5	nsubj	_	_
5	staged	_	VBD	VBD	_	0	root	_	_
6	terrorist	_	JJ	JJ	_	7	amod	_	_
7	attacks	_	NNS	NNS	_	5	dobj	_	_
8	inside	_	IN	IN	_	5	prep	_	_
9	Iran	_	NNP	NNP	_	8	pobj	_	_
10	in	_	IN	IN	_	5	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	1970s	_	NNS	NNS	_	10	pobj	_	_
13	and	_	CC	CC	_	5	cc	_	_
14	killed	_	VBD	VBD	_	5	conj	_	_
15	several	_	JJ	JJ	_	18	amod	_	_
16	US	_	NNP	NNP	_	18	nn	_	_
17	military	_	NN	NN	_	18	nn	_	_
18	personnel	_	NNS	NNS	_	14	dobj	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	civilians	_	NNS	NNS	_	18	conj	_	_
21	working	_	VBG	VBG	_	14	xcomp	_	_
22	on	_	IN	IN	_	21	prep	_	_
23	defense	_	NN	NN	_	24	nn	_	_
24	projects	_	NNS	NNS	_	22	pobj	_	_
25	in	_	IN	IN	_	24	prep	_	_
26	Teheran	_	NNP	NNP	_	25	pobj	_	_
27	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, k / kill-01)
(a / and, op, s / stage-01)
(a2 / attack-01, location, i / inside)
(a2 / attack-01, mod, t / terrorism)
(a3 / and, op, c2 / civilian)
(c / country, name, n2 / name)
(c3 / city, name, n3 / name)
(c4 / country, name, n4 / name)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG2, p3 / personnel)
(i / inside, op, c / country)
(k / kill-01, ARG0, o / organization)
(k / kill-01, ARG1, a3 / and)
(m / military, mod, c4 / country)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(n2 / name, op, "Iran")
(n3 / name, op, "Teheran")
(n4 / name, op, "US")
(o / organization, name, n / name)
(p2 / project, mod, d2 / defense)
(s / stage-01, ARG0, o / organization)
(s / stage-01, ARG1, a2 / attack-01)
(w / work-01, ARG0, a3 / and)
(w / work-01, ARG1, p2 / project)
(w / work-01, location, c3 / city)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(2, 1, 0),Teheran,(city :name (name :op "Teheran")),false), Span(23,24,List(3),projects,project,false), Span(19,20,List(4),civilians,civilian,false), Span(14,15,List(5),several,several,false), Span(13,14,List(6),killed,kill-01,false), Span(11,12,List(7),1970s,1970,false), Span(7,8,List(8),inside,inside,false), Span(6,7,List(9),attacks,attack-01,false), Span(4,5,List(10),staged,stage-01,false), Span(1,4,List(14, 13, 12, 11),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false)),Map(2 -> "Teheran", 5 -> several, 12 -> name, 8 -> inside, 7 -> 1970, 1 -> name, 4 -> civilian, 11 -> organization, 14 -> "People's", 6 -> kill-01, 0 -> city, 9 -> attack-01, 3 -> project, 10 -> stage-01, 13 -> "Mujahedeen"),Map(n -> name, s2 -> stage-01, k -> kill-01, s -> several, 1 -> 1970, p -> project, a -> attack-01, i -> inside, c -> city, o -> organization, n2 -> name, c2 -> civilian))),[Ljava.lang.String;@117525fe,Annotation([Ljava.lang.String;@5f7989fa,[Ljava.lang.String;@5bc28f40,[Ljava.lang.String;@46963479),Annotation([Ljava.lang.String;@7e74a380,[Ljava.lang.String;@6dd1c3ed,[Ledu.cmu.lti.nlp.amr.Dependency;@22a6e998),Annotation([Ljava.lang.String;@55e42449,[Ljava.lang.String;@e57e5d6,[Ljava.lang.String;@6dfa915a),Annotation([Ljava.lang.String;@78054f54,[Ljava.lang.String;@cb7fa71,[Ledu.cmu.lti.nlp.amr.Entity;@3dffc764))
AMR:
(a / attack-01, ARG0, s / several)
(a / attack-01, ARG1, c2 / civilian)
(c / city, name, n / name)
(k / kill-01, ARG0, o / organization)
(k / kill-01, ARG1, p / project)
(n / name, op, "Teheran")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People's")
(o / organization, name, n2 / name)
(p / project, location, c / city)
(s2 / stage-01, ARG0, o / organization)
(s2 / stage-01, ARG1, a / attack-01)
(s2 / stage-01, location, 1 / 1970)
(s2 / stage-01, time, i / inside)

Decoded in 236,717 microseconds
Sentence: The People's Mujahedeen was part of the broad coalition that initially supported the Iranian Revolution and participated in the takeover in 790000 of the US embassy in Teheran.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(790000,00,00,79)
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Teheran"))
NER Entity: (country :name (name :op "Teheran"))
mkDayMonthYear(790000,00,00,79)
Spans:
Span 22-23:  790000 => (date-entity :day 0 :month 0 :year 79)
Span 8-9:  broad => broad
Span 9-10:  coalition => coalition
Span 26-27:  embassy => embassy
Span 11-12:  initially => initial
Span 17-18:  participated => participate-01
Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 15-16:  Revolution => revolution
Span 12-13:  supported => support-01
Span 20-21:  takeover => take-12
Span 28-29:  Teheran => (city :name (name :op "Teheran"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 22-23:  790000 => (date-entity :year 1979)
Oracle Span 8-9:  broad => broad
Oracle Span 9-10:  coalition => coalition
Oracle Span 26-27:  embassy => embassy
Oracle Span 11-12:  initially => initial
Oracle Span 14-16:  Iranian Revolution => (war :name (name :op "Revolution" :op "Iranian"))
Oracle Span 17-18:  participated => participate-01
Oracle Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Oracle Span 12-13:  supported => support-01
Oracle Span 20-21:  takeover => take-12
Oracle Span 28-29:  Teheran => (city :name (name :op "Teheran"))
Oracle Span 25-26:  US => (country :name (name :op "US"))

Incorrect span: 790000 => (date-entity :day 0 :month 0 :year 79)
Extra span: Revolution => revolution
Missing span: Iranian Revolution => (war :name (name :op "Revolution" :op "Iranian"))
Missing span: US => (country :name (name :op "US"))
Missing span: 790000 => (date-entity :year 1979)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	People	_	NNS	NNS	_	4	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Mujahedeen	_	NNP	NNP	_	6	nsubj	_	_
5	was	_	VBD	VBD	_	6	cop	_	_
6	part	_	NN	NN	_	0	root	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	broad	_	JJ	JJ	_	10	amod	_	_
10	coalition	_	NN	NN	_	7	pobj	_	_
11	that	_	WDT	WDT	_	13	nsubj	_	_
12	initially	_	RB	RB	_	13	advmod	_	_
13	supported	_	VBD	VBD	_	10	rcmod	_	_
14	the	_	DT	DT	_	16	det	_	_
15	Iranian	_	JJ	JJ	_	16	amod	_	_
16	Revolution	_	NN	NN	_	13	dobj	_	_
17	and	_	CC	CC	_	13	cc	_	_
18	participated	_	VBD	VBD	_	13	conj	_	_
19	in	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	takeover	_	NN	NN	_	19	pobj	_	_
22	in	_	IN	IN	_	21	prep	_	_
23	790000	_	CD	CD	_	22	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	27	det	_	_
26	US	_	NNP	NNP	_	27	nn	_	_
27	embassy	_	NN	NN	_	24	pobj	_	_
28	in	_	IN	IN	_	18	prep	_	_
29	Teheran	_	NNP	NNP	_	28	pobj	_	_
30	.	_	.	.	_	6	punct	_	_

Oracle:
(c / coalition, mod, b / broad)
(c4 / city, name, n5 / name)
(c5 / country, name, n / name)
(d / date-entity, year, 1979)
(e / embassy, location, c4 / city)
(e / embassy, mod, c5 / country)
(n / name, op, "US")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People's")
(n4 / name, op, "Iranian")
(n4 / name, op, "Revolution")
(n5 / name, op, "Teheran")
(o / organization, name, n2 / name)
(p / participate-01, ARG0, c / coalition)
(p / participate-01, ARG1, t / take-12)
(s / support-01, ARG0, c / coalition)
(s / support-01, ARG1, w / war)
(s / support-01, time, i / initial)
(t / take-12, ARG1, e / embassy)
(t / take-12, time, d / date-entity)
(w / war, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(2, 1, 0),Teheran,(city :name (name :op "Teheran")),false), Span(26,27,List(3),embassy,embassy,false), Span(22,23,List(7, 6, 5, 4),790000,(date-entity :day 0 :month 0 :year 79),false), Span(20,21,List(8),takeover,take-12,false), Span(17,18,List(9),participated,participate-01,false), Span(15,16,List(10),Revolution,revolution,false), Span(12,13,List(11),supported,support-01,false), Span(11,12,List(12),initially,initial,false), Span(9,10,List(13),coalition,coalition,false), Span(8,9,List(14),broad,broad,false), Span(1,4,List(18, 17, 16, 15),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false)),Map(2 -> "Teheran", 5 -> 0, 12 -> initial, 15 -> organization, 8 -> take-12, 18 -> "People's", 7 -> 79, 17 -> "Mujahedeen", 1 -> name, 4 -> date-entity, 11 -> support-01, 14 -> broad, 6 -> 0, 0 -> city, 9 -> participate-01, 16 -> name, 3 -> embassy, 10 -> revolution, 13 -> coalition),Map(e -> embassy, n -> name, b -> broad, t -> take-12, s -> support-01, d -> date-entity, 7 -> 79, p -> participate-01, 02 -> 0, r -> revolution, i -> initial, c -> city, 0 -> 0, o -> organization, n2 -> name, c2 -> coalition))),[Ljava.lang.String;@4b6e1c0,Annotation([Ljava.lang.String;@561b61ed,[Ljava.lang.String;@654c7d2d,[Ljava.lang.String;@26cb5207),Annotation([Ljava.lang.String;@15400fff,[Ljava.lang.String;@18d910b3,[Ledu.cmu.lti.nlp.amr.Dependency;@1e7ab390),Annotation([Ljava.lang.String;@625d9132,[Ljava.lang.String;@77774571,[Ljava.lang.String;@277b8fa4),Annotation([Ljava.lang.String;@6cd64ee8,[Ljava.lang.String;@620c8641,[Ledu.cmu.lti.nlp.amr.Entity;@2f1d0bbc))
AMR:
(c / city, name, n / name)
(c2 / coalition, mod, b / broad)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 7 / 79)
(e / embassy, location, c / city)
(n / name, op, "Teheran")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People's")
(o / organization, name, n2 / name)
(p / participate-01, ARG0, c2 / coalition)
(p / participate-01, ARG1, t / take-12)
(p / participate-01, location, c / city)
(s / support-01, ARG0, c2 / coalition)
(s / support-01, ARG1, r / revolution)
(s / support-01, time, i / initial)
(t / take-12, ARG1, o / organization)
(t / take-12, time, d / date-entity)

Decoded in 534,919 microseconds
Sentence: The People's Mujahedeen fell out with the Government and has built military bases in Iraq and political bases in Europe since the 1980s.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Europe"))
Spans:
Span 23-24:  1980s => 1980
Span 18-19:  bases => base
Span 13-14:  bases => base
Span 11-12:  built => build-01
Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 21-22:  since => since

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 23-24:  1980s => 1980
Oracle Span 9-10:  and => and
Oracle Span 16-17:  and => and
Oracle Span 13-14:  bases => base
Oracle Span 18-19:  bases => base
Oracle Span 11-12:  built => build-01
Oracle Span 20-21:  Europe => (continent :name (name :op "Europe"))
Oracle Span 4-5:  fell => fall-03
Oracle Span 8-9:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 15-16:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 12-13:  military => military
Oracle Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Oracle Span 17-18:  political => politics
Oracle Span 21-22:  since => since

Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: and => and
Missing span: and => and
Missing span: military => military
Missing span: fell => fall-03
Missing span: political => politics
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	People	_	NNS	NNS	_	4	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Mujahedeen	_	NNP	NNP	_	5	nsubj	_	_
5	fell	_	VBD	VBD	_	0	root	_	_
6	out	_	RP	RP	_	5	prt	_	_
7	with	_	IN	IN	_	5	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	Government	_	NN	NN	_	7	pobj	_	_
10	and	_	CC	CC	_	5	cc	_	_
11	has	_	VBZ	VBZ	_	12	aux	_	_
12	built	_	VBN	VBN	_	5	conj	_	_
13	military	_	JJ	JJ	_	14	amod	_	_
14	bases	_	NNS	NNS	_	12	dobj	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	Iraq	_	NNP	NNP	_	15	pobj	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	political	_	JJ	JJ	_	19	amod	_	_
19	bases	_	NNS	NNS	_	14	conj	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	Europe	_	NNP	NNP	_	20	pobj	_	_
22	since	_	IN	IN	_	12	prep	_	_
23	the	_	DT	DT	_	24	det	_	_
24	1980s	_	NNS	NNS	_	22	pobj	_	_
25	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, a2 / and)
(a / and, op, f / fall-03)
(a2 / and, duration, s / since)
(a2 / and, op, b2 / build-01)
(b2 / build-01, ARG0, o / organization)
(b2 / build-01, ARG1, b4 / base)
(b2 / build-01, location, c2 / continent)
(b3 / base, mod, m / military)
(b4 / base, mod, p / politics)
(c / country, name, n2 / name)
(c2 / continent, name, n3 / name)
(g2 / govern-01, ARG0, g / government-organization)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(n2 / name, op, "Iraq")
(n3 / name, op, "Europe")
(o / organization, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),1980s,1980,false), Span(21,22,List(1),since,since,false), Span(18,19,List(2),bases,base,false), Span(13,14,List(3),bases,base,false), Span(11,12,List(4),built,build-01,false), Span(1,4,List(8, 7, 6, 5),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false)),Map(2 -> base, 5 -> organization, 8 -> "People's", 7 -> "Mujahedeen", 1 -> since, 4 -> build-01, 6 -> name, 0 -> 1980, 3 -> base),Map(n -> name, b3 -> build-01, b -> base, b2 -> base, s -> since, 1 -> 1980, o -> organization))),[Ljava.lang.String;@5460b754,Annotation([Ljava.lang.String;@a9f023e,[Ljava.lang.String;@c27a3a2,[Ljava.lang.String;@4b200971),Annotation([Ljava.lang.String;@1a2bcd56,[Ljava.lang.String;@68d7a2df,[Ledu.cmu.lti.nlp.amr.Dependency;@59dc36d4),Annotation([Ljava.lang.String;@12fcc71f,[Ljava.lang.String;@5679e96b,[Ljava.lang.String;@3ed7821),Annotation([Ljava.lang.String;@3bbf841e,[Ljava.lang.String;@4f0f7849,[Ledu.cmu.lti.nlp.amr.Entity;@56a4f272))
AMR:
(b / base, time, s / since)
(b2 / base, location, 1 / 1980)
(b3 / build-01, ARG0, o / organization)
(b3 / build-01, ARG1, b2 / base)
(b3 / build-01, time, s / since)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(o / organization, name, n / name)

Decoded in 118,705 microseconds
Sentence: The People's Mujahedeen in recent years claimed responsibility for the assassination of several persons in the Iranian regime.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 11-12:  assassination => assassinate-01
Span 7-8:  claimed => claim-01
Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Span 14-15:  persons => person
Span 5-6:  recent => recent
Span 18-19:  regime => regime
Span 8-9:  responsibility => responsible-41
Span 13-14:  several => several
Span 6-7:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 11-12:  assassination => assassinate-01
Oracle Span 7-8:  claimed => claim-01
Oracle Span 17-18:  Iranian => (country :name (name :op "Iran"))
Oracle Span 1-4:  People 's Mujahedeen => (organization :name (name :op "Mujahedeen" :op "People's"))
Oracle Span 14-15:  persons => person
Oracle Span 5-6:  recent => recent
Oracle Span 18-19:  regime => regime
Oracle Span 8-9:  responsibility => responsible-41
Oracle Span 13-14:  several => several
Oracle Span 6-7:  years => year

Incorrect span: years => (temporal-quantity :unit year)
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: years => year
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	People	_	NNS	NNS	_	4	poss	_	_
3	's	_	POS	POS	_	2	possessive	_	_
4	Mujahedeen	_	NNP	NNP	_	8	nsubj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	recent	_	JJ	JJ	_	7	amod	_	_
7	years	_	NNS	NNS	_	5	pobj	_	_
8	claimed	_	VBD	VBD	_	0	root	_	_
9	responsibility	_	NN	NN	_	8	dobj	_	_
10	for	_	IN	IN	_	8	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	assassination	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	several	_	JJ	JJ	_	15	amod	_	_
15	persons	_	NNS	NNS	_	13	pobj	_	_
16	in	_	IN	IN	_	8	prep	_	_
17	the	_	DT	DT	_	19	det	_	_
18	Iranian	_	JJ	JJ	_	19	amod	_	_
19	regime	_	NN	NN	_	16	pobj	_	_
20	.	_	.	.	_	8	punct	_	_

Oracle:
(a / assassinate-01, ARG0, o / organization)
(a / assassinate-01, ARG1, p / person)
(c / claim-01, ARG0, o / organization)
(c / claim-01, ARG1, r / responsible-41)
(c / claim-01, time, y / year)
(c2 / country, name, n / name)
(n / name, op, "Iran")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People's")
(o / organization, name, n2 / name)
(p / person, mod, s / several)
(p / person, poss, r2 / regime)
(r / responsible-41, ARG1, o / organization)
(r / responsible-41, ARG2, a / assassinate-01)
(r2 / regime, mod, c2 / country)
(y / year, mod, r3 / recent)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),regime,regime,false), Span(14,15,List(1),persons,person,false), Span(13,14,List(2),several,several,false), Span(11,12,List(3),assassination,assassinate-01,false), Span(8,9,List(4),responsibility,responsible-41,false), Span(7,8,List(5),claimed,claim-01,false), Span(6,7,List(7, 6),years,(temporal-quantity :unit year),false), Span(5,6,List(8),recent,recent,false), Span(1,4,List(12, 11, 10, 9),People 's Mujahedeen,(organization :name (name :op "Mujahedeen" :op "People's")),false)),Map(2 -> several, 5 -> claim-01, 12 -> "People's", 8 -> recent, 7 -> year, 1 -> person, 4 -> responsible-41, 11 -> "Mujahedeen", 6 -> temporal-quantity, 0 -> regime, 9 -> organization, 3 -> assassinate-01, 10 -> name),Map(n -> name, r3 -> recent, t -> temporal-quantity, s -> several, y -> year, r2 -> responsible-41, p -> person, a -> assassinate-01, r -> regime, c -> claim-01, o -> organization))),[Ljava.lang.String;@3ee0b4f7,Annotation([Ljava.lang.String;@79b84841,[Ljava.lang.String;@4d41ba0f,[Ljava.lang.String;@3c87e6b7),Annotation([Ljava.lang.String;@77bbadc,[Ljava.lang.String;@3c3a0032,[Ledu.cmu.lti.nlp.amr.Dependency;@7ceb4478),Annotation([Ljava.lang.String;@7fdab70c,[Ljava.lang.String;@25ad4f71,[Ljava.lang.String;@49faf066),Annotation([Ljava.lang.String;@6f94a5a5,[Ljava.lang.String;@455c1d8c,[Ledu.cmu.lti.nlp.amr.Entity;@a451491))
AMR:
(a / assassinate-01, ARG0, r / regime)
(a / assassinate-01, ARG1, p / person)
(c / claim-01, ARG0, o / organization)
(c / claim-01, ARG1, r2 / responsible-41)
(n / name, op, "Mujahedeen")
(n / name, op, "People's")
(o / organization, name, n / name)
(p / person, quant, s / several)
(r2 / responsible-41, ARG1, t / temporal-quantity)
(r2 / responsible-41, ARG2, a / assassinate-01)
(t / temporal-quantity, time, r3 / recent)
(t / temporal-quantity, unit, y / year)

Decoded in 147,416 microseconds
Sentence: These assassinations include that of the Teheran Evin prison's former director assodalah Ladjevardi in August 980800 and of former Commandant in chief of the Iranian army General Ali Sayad Chirazi in 990400.

NER Entity: (country :name (name :op "Teheran"))
NER Entity: (thing :name (name :op "Evin"))
NER Entity: (person :name (name :op "assodalah" :op "Ladjevardi"))
mkDayMonthYear(980800,00,08,98)
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (person :name (name :op "Ali" :op "Sayad" :op "Chirazi"))
mkDayMonthYear(990400,00,04,99)
mkDayMonthYear(990400,00,04,99)
mkDayMonthYear(980800,00,08,98)
NER Entity: (country :name (name :op "Teheran"))
Spans:
Span 16-17:  980800 => (date-entity :day 0 :month 8 :year 98)
Span 32-33:  990400 => (date-entity :day 0 :month 4 :year 99)
Span 28-31:  Ali Sayad Chirazi => (person :name (name :op "Ali" :op "Sayad" :op "Chirazi"))
Span 26-27:  army => army
Span 12-14:  assodalah Ladjevardi => (person :name (name :op "assodalah" :op "Ladjevardi"))
Span 15-16:  August => (date-entity :month 8)
Span 22-23:  chief => (have-org-role-91 :ARG2 chief)
Span 11-12:  director => (have-org-role-91 :ARG2 director)
Span 19-20:  former => former
Span 10-11:  former => former
Span 8-9:  prison => prison
Span 6-7:  Teheran => (city :name (name :op "Teheran"))

Langrangian relaxation converged after 69 iterations. Delta = 0.0
Oracle Span 16-17:  980800 => (date-entity :year 1998 :month 8)
Oracle Span 32-33:  990400 => (date-entity :year 1999 :month 4)
Oracle Span 28-31:  Ali Sayad Chirazi => (person :name (name :op "Chirazi" :op "Sayad" :op "Ali"))
Oracle Span 17-18:  and => and
Oracle Span 26-27:  army => army
Oracle Span 1-2:  assassinations => assassinate-01
Oracle Span 12-14:  assodalah Ladjevardi => (person :name (name :op "Ladjevardi" :op "Assodalah"))
Oracle Span 22-23:  chief => chief
Oracle Span 20-21:  Commandant => (have-org-role-91 :ARG2 commandant)
Oracle Span 11-12:  director => (have-org-role-91 :ARG2 director)
Oracle Span 7-9:  Evin prison => (facility :name (name :op "Prison" :op "Evin"))
Oracle Span 10-11:  former => former
Oracle Span 27-28:  General => (have-org-role-91 :ARG2 general)
Oracle Span 2-3:  include => include-91
Oracle Span 25-26:  Iranian => (country :name (name :op "Iran"))
Oracle Span 6-7:  Teheran => (city :name (name :op "Teheran"))

Incorrect span: 990400 => (date-entity :day 0 :month 4 :year 99)
Incorrect span: Ali Sayad Chirazi => (person :name (name :op "Ali" :op "Sayad" :op "Chirazi"))
Incorrect span: chief => (have-org-role-91 :ARG2 chief)
Extra span: former => former
Incorrect span: 980800 => (date-entity :day 0 :month 8 :year 98)
Extra span: August => (date-entity :month 8)
Incorrect span: assodalah Ladjevardi => (person :name (name :op "assodalah" :op "Ladjevardi"))
Extra span: prison => prison
Missing span: assodalah Ladjevardi => (person :name (name :op "Ladjevardi" :op "Assodalah"))
Missing span: Evin prison => (facility :name (name :op "Prison" :op "Evin"))
Missing span: Ali Sayad Chirazi => (person :name (name :op "Chirazi" :op "Sayad" :op "Ali"))
Missing span: Iranian => (country :name (name :op "Iran"))
Missing span: 980800 => (date-entity :year 1998 :month 8)
Missing span: 990400 => (date-entity :year 1999 :month 4)
Missing span: include => include-91
Missing span: and => and
Missing span: Commandant => (have-org-role-91 :ARG2 commandant)
Missing span: chief => chief
Missing span: General => (have-org-role-91 :ARG2 general)
Missing span: assassinations => assassinate-01
Dependencies:
1	These	_	DT	DT	_	2	det	_	_
2	assassinations	_	NNS	NNS	_	3	nsubj	_	_
3	include	_	VBP	VBP	_	0	root	_	_
4	that	_	DT	DT	_	3	iobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	Teheran	_	NNP	NNP	_	9	nn	_	_
8	Evin	_	NNP	NNP	_	9	nn	_	_
9	prison	_	NN	NN	_	13	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	former	_	JJ	JJ	_	13	amod	_	_
12	director	_	NN	NN	_	13	nn	_	_
13	assodalah	_	NN	NN	_	5	pobj	_	_
14	Ladjevardi	_	NNP	NNP	_	3	dobj	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	August	_	NNP	NNP	_	15	pobj	_	_
17	980800	_	CD	CD	_	16	num	_	_
18	and	_	CC	CC	_	14	cc	_	_
19	of	_	IN	IN	_	22	prep	_	_
20	former	_	JJ	JJ	_	21	amod	_	_
21	Commandant	_	NNP	NNP	_	19	pobj	_	_
22	in	_	IN	IN	_	14	conj	_	_
23	chief	_	NN	NN	_	31	dep	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	27	det	_	_
26	Iranian	_	JJ	JJ	_	27	amod	_	_
27	army	_	NN	NN	_	24	pobj	_	_
28	General	_	NNP	NNP	_	31	nn	_	_
29	Ali	_	NNP	NNP	_	31	nn	_	_
30	Sayad	_	NNP	NNP	_	31	nn	_	_
31	Chirazi	_	NNP	NNP	_	22	pobj	_	_
32	in	_	IN	IN	_	31	prep	_	_
33	990400	_	CD	CD	_	32	pobj	_	_
34	.	_	.	.	_	3	punct	_	_

Oracle:
(a5 / army, mod, c4 / country)
(c / city, name, n3 / name)
(c2 / commandant, mod, c3 / chief)
(c4 / country, name, n5 / name)
(d2 / date-entity, month, 8)
(d2 / date-entity, year, 1998)
(d3 / date-entity, month, 4)
(d3 / date-entity, year, 1999)
(f2 / facility, location, c / city)
(f2 / facility, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, f2 / facility)
(h / have-org-role-91, ARG2, d4 / director)
(h / have-org-role-91, mod, f / former)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, a5 / army)
(h2 / have-org-role-91, ARG2, c2 / commandant)
(h3 / have-org-role-91, ARG0, p3 / person)
(h3 / have-org-role-91, ARG2, g / general)
(i / include-91, ARG1, a2 / and)
(i / include-91, ARG2, a / assassinate-01)
(n / name, op, "Assodalah")
(n / name, op, "Ladjevardi")
(n2 / name, op, "Evin")
(n2 / name, op, "Prison")
(n3 / name, op, "Teheran")
(n4 / name, op, "Ali")
(n4 / name, op, "Chirazi")
(n4 / name, op, "Sayad")
(n5 / name, op, "Iran")
(p / person, name, n / name)
(p3 / person, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(3, 2, 1, 0),990400,(date-entity :day 0 :month 4 :year 99),false), Span(28,31,List(8, 7, 6, 5, 4),Ali Sayad Chirazi,(person :name (name :op "Ali" :op "Sayad" :op "Chirazi")),false), Span(26,27,List(9),army,army,false), Span(22,23,List(11, 10),chief,(have-org-role-91 :ARG2 chief),false), Span(19,20,List(12),former,former,false), Span(16,17,List(16, 15, 14, 13),980800,(date-entity :day 0 :month 8 :year 98),false), Span(15,16,List(18, 17),August,(date-entity :month 8),false), Span(12,14,List(22, 21, 20, 19),assodalah Ladjevardi,(person :name (name :op "assodalah" :op "Ladjevardi")),false), Span(11,12,List(24, 23),director,(have-org-role-91 :ARG2 director),false), Span(10,11,List(25),former,former,false), Span(8,9,List(26),prison,prison,false), Span(6,7,List(29, 28, 27),Teheran,(city :name (name :op "Teheran")),false)),Map(2 -> 4, 5 -> name, 27 -> city, 12 -> former, 8 -> "Chirazi", 15 -> 8, 21 -> "assodalah", 18 -> 8, 24 -> director, 7 -> "Sayad", 1 -> 0, 17 -> date-entity, 23 -> have-org-role-91, 26 -> prison, 4 -> person, 11 -> chief, 14 -> 0, 29 -> "Teheran", 20 -> name, 28 -> name, 6 -> "Ali", 9 -> army, 0 -> date-entity, 22 -> "Ladjevardi", 16 -> 98, 19 -> person, 10 -> have-org-role-91, 3 -> 99, 25 -> former, 13 -> date-entity),Map(n -> name, h -> have-org-role-91, h2 -> have-org-role-91, d3 -> date-entity, 8 -> 8, p2 -> person, 92 -> 98, d -> date-entity, p -> person, n3 -> name, 4 -> 4, a -> army, 82 -> 8, d2 -> date-entity, 02 -> 0, c -> chief, f2 -> former, d4 -> director, 0 -> 0, 9 -> 99, f -> former, p3 -> prison, c2 -> city, n2 -> name))),[Ljava.lang.String;@1422ac7f,Annotation([Ljava.lang.String;@5e519ad3,[Ljava.lang.String;@7bc44ce8,[Ljava.lang.String;@59072e9d),Annotation([Ljava.lang.String;@58472096,[Ljava.lang.String;@a92be4f,[Ledu.cmu.lti.nlp.amr.Dependency;@53e800f9),Annotation([Ljava.lang.String;@337bbfdf,[Ljava.lang.String;@52d97ab6,[Ljava.lang.String;@4da6d664),Annotation([Ljava.lang.String;@5e5af8e1,[Ljava.lang.String;@30b131b2,[Ledu.cmu.lti.nlp.amr.Entity;@2924f1d8))
AMR:
(a / army, op, h2 / have-org-role-91)
(c2 / city, name, n3 / name)
(d / date-entity, day, 0 / 0)
(d / date-entity, domain, h2 / have-org-role-91)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 9 / 99)
(d2 / date-entity, day, 02 / 0)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 92 / 98)
(d3 / date-entity, mod, d2 / date-entity)
(d3 / date-entity, month, 82 / 8)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, a / army)
(h / have-org-role-91, ARG2, c / chief)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG1, p3 / prison)
(h2 / have-org-role-91, ARG2, d4 / director)
(h2 / have-org-role-91, location, d3 / date-entity)
(h2 / have-org-role-91, mod, f2 / former)
(h2 / have-org-role-91, time, f / former)
(n / name, op, "Ali")
(n / name, op, "Chirazi")
(n / name, op, "Sayad")
(n2 / name, op, "Ladjevardi")
(n2 / name, op, "assodalah")
(n3 / name, op, "Teheran")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / prison, location, c2 / city)

Decoded in 3,119,551 microseconds
Sentence: 2003-07-09

mkDayMonthYear(2003-07-09,09,07,2003)
mkDayMonthYear(2003-07-09,09,07,2003)
Spans:
Span 0-1:  2003-07-09 => (date-entity :day 9 :month 7 :year 2003)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2003-07-09 => (date-entity :day 9 :month 7 :year 2003)

Dependencies:
1	2003-07-09	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 9)
(d / date-entity, month, 7)
(d / date-entity, year, 2003)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2003-07-09,(date-entity :day 9 :month 7 :year 2003),false)),Map(2 -> 7, 1 -> 9, 0 -> date-entity, 3 -> 2003),Map(2 -> 2003, 7 -> 7, d -> date-entity, 9 -> 9))),[Ljava.lang.String;@524a076e,Annotation([Ljava.lang.String;@5b5e7036,[Ljava.lang.String;@62dbe64e,[Ljava.lang.String;@6cff61fc),Annotation([Ljava.lang.String;@6e0c6a7a,[Ljava.lang.String;@467b684d,[Ledu.cmu.lti.nlp.amr.Dependency;@7baf1f5a),Annotation([Ljava.lang.String;@6cc86152,[Ljava.lang.String;@611a990b,[Ljava.lang.String;@7cbeac65),Annotation([Ljava.lang.String;@7fe82967,[Ljava.lang.String;@50850539,[Ledu.cmu.lti.nlp.amr.Entity;@65e21ce3))
AMR:
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2003)

Decoded in 8,427 microseconds
Sentence: Australia (AU)

NER Entity: (country :name (name :op "Australia"))
NER Entity: (country :name (name :op "AU"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Australia => (country :name (name :op "Australia"))

Incorrect span:  => amr-empty
Missing span: Australia => (country :name (name :op "Australia"))
Dependencies:
1	Australia	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	AU	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Australia")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@6c3659be,Annotation([Ljava.lang.String;@522bf64e,[Ljava.lang.String;@2aff9dff,[Ljava.lang.String;@5f0f9947),Annotation([Ljava.lang.String;@1aad0b1,[Ljava.lang.String;@c3edf4c,[Ledu.cmu.lti.nlp.amr.Dependency;@5af8bb51),Annotation([Ljava.lang.String;@799ed4e8,[Ljava.lang.String;@2e66bc32,[Ljava.lang.String;@54d8c20d),Annotation([Ljava.lang.String;@4b65d9f4,[Ljava.lang.String;@44536de4,[Ledu.cmu.lti.nlp.amr.Entity;@5fcfde70))
AMR:


Decoded in 4,413 microseconds
Sentence: International; weapons; Government; leader

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 4-5:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 6-7:  leader => (person :ARG0-of lead-02)
Oracle Span 2-3:  weapons => weapon

Extra span: ; => and
Extra span: ; => and
Missing span: leader => (person :ARG0-of lead-02)
Missing span: weapons => weapon
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	weapons	_	NNS	NNS	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	Government	_	NNP	NNP	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	leader	_	NN	NN	_	5	dep	_	_

Oracle:
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, p / person)
(a / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),;,and,false), Span(3,4,List(1),;,and,false), Span(1,2,List(2),;,and,false)),Map(2 -> and, 1 -> and, 0 -> and),Map(a3 -> and, a -> and, a2 -> and))),[Ljava.lang.String;@4d95a72e,Annotation([Ljava.lang.String;@28da7d11,[Ljava.lang.String;@77b919a3,[Ljava.lang.String;@5624657a),Annotation([Ljava.lang.String;@36681447,[Ljava.lang.String;@4d21c56e,[Ledu.cmu.lti.nlp.amr.Dependency;@726aa968),Annotation([Ljava.lang.String;@7100dea,[Ljava.lang.String;@712cfb63,[Ljava.lang.String;@32e54a9d),Annotation([Ljava.lang.String;@15639440,[Ljava.lang.String;@121bb45b,[Ledu.cmu.lti.nlp.amr.Entity;@4faa298))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)

Decoded in 12,953 microseconds
Sentence: Despite pressure from the United States and the creation of the Proliferation Security Initiative, Australian Prime Minister John Howard is hesitant to use military force to intercept suspected drug- or weapon-smuggling vessels belonging to the Democratic People's Republic of Korea.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "Proliferation" :op "Security" :op "Initiative"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (person :name (name :op "John" :op "Howard"))
NER Entity: (organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea"))
Spans:
Span 36-41:  belonging to the Democratic People => (organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea"))
Span 8-9:  creation => create-01
Span 29-30:  drug => drug
Span 27-28:  intercept => intercept-01
Span 18-20:  John Howard => (person :name (name :op "John" :op "Howard"))
Span 17-18:  Minister => (have-org-role-91 :ARG2 minister)
Span 31-32:  or => or
Span 1-2:  pressure => pressure-01
Span 16-17:  Prime => prime
Span 11-14:  Proliferation Security Initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Span 42-45:  Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic"))
Span 34-35:  smuggling => smuggle-01
Span 28-29:  suspected => suspect-01
Span 4-6:  United States => (country :name (name :op "United" :op "States"))
Span 23-24:  use => use-01
Span 35-36:  vessels => vessel
Span 32-33:  weapon => weapon

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 15-16:  Australian => (country :name (name :op "Australia"))
Oracle Span 36-37:  belonging => belong-01
Oracle Span 8-9:  creation => create-01
Oracle Span 39-45:  Democratic People 's Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic" :op "People's" :op "Democratic"))
Oracle Span 29-30:  drug => drug
Oracle Span 25-26:  force => force
Oracle Span 21-22:  hesitant => hesitate-01
Oracle Span 27-28:  intercept => intercept-01
Oracle Span 18-20:  John Howard => (person :name (name :op "Howard" :op "John"))
Oracle Span 24-25:  military => military
Oracle Span 17-18:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 31-32:  or => or
Oracle Span 1-2:  pressure => pressure-01
Oracle Span 16-17:  Prime => prime
Oracle Span 11-14:  Proliferation Security Initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Oracle Span 34-35:  smuggling => smuggle-01
Oracle Span 28-29:  suspected => suspect-01
Oracle Span 4-6:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 23-24:  use => use-01
Oracle Span 35-36:  vessels => vessel
Oracle Span 32-33:  weapon => weapon

Extra span: Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic"))
Extra span: belonging to the Democratic People => (organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea"))
Incorrect span: John Howard => (person :name (name :op "John" :op "Howard"))
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Missing span: John Howard => (person :name (name :op "Howard" :op "John"))
Missing span: Democratic People 's Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic" :op "People's" :op "Democratic"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: Australian => (country :name (name :op "Australia"))
Missing span: belonging => belong-01
Missing span: force => force
Missing span: military => military
Missing span: and => and
Missing span: hesitant => hesitate-01
Dependencies:
1	Despite	_	IN	IN	_	22	prep	_	_
2	pressure	_	NN	NN	_	1	pobj	_	_
3	from	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	United	_	NNP	NNP	_	6	nn	_	_
6	States	_	NNPS	NNPS	_	3	pobj	_	_
7	and	_	CC	CC	_	2	cc	_	_
8	the	_	DT	DT	_	9	det	_	_
9	creation	_	NN	NN	_	2	conj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	14	det	_	_
12	Proliferation	_	NNP	NNP	_	14	nn	_	_
13	Security	_	NNP	NNP	_	14	nn	_	_
14	Initiative	_	NNP	NNP	_	10	pobj	_	_
15	,	_	,	,	_	22	punct	_	_
16	Australian	_	JJ	JJ	_	20	amod	_	_
17	Prime	_	NNP	NNP	_	20	nn	_	_
18	Minister	_	NNP	NNP	_	20	nn	_	_
19	John	_	NNP	NNP	_	20	nn	_	_
20	Howard	_	NNP	NNP	_	22	nsubj	_	_
21	is	_	VBZ	VBZ	_	22	cop	_	_
22	hesitant	_	JJ	JJ	_	0	root	_	_
23	to	_	TO	TO	_	24	aux	_	_
24	use	_	VB	VB	_	22	xcomp	_	_
25	military	_	JJ	JJ	_	26	amod	_	_
26	force	_	NN	NN	_	24	dobj	_	_
27	to	_	TO	TO	_	28	aux	_	_
28	intercept	_	VB	VB	_	26	vmod	_	_
29	suspected	_	VBN	VBN	_	30	amod	_	_
30	drug	_	NN	NN	_	28	dobj	_	_
31	-	_	:	:	_	26	punct	_	_
32	or	_	CC	CC	_	26	cc	_	_
33	weapon-smuggling	_	JJ	JJ	_	34	amod	_	_
34	vessels	_	NNS	NNS	_	26	conj	_	_
35	belonging	_	VBG	VBG	_	34	vmod	_	_
36	to	_	TO	TO	_	35	prep	_	_
37	the	_	DT	DT	_	39	det	_	_
38	Democratic	_	JJ	JJ	_	39	amod	_	_
39	People	_	NNS	NNS	_	41	poss	_	_
40	's	_	POS	POS	_	39	possessive	_	_
41	Republic	_	NNP	NNP	_	36	pobj	_	_
42	of	_	IN	IN	_	41	prep	_	_
43	Korea	_	NNP	NNP	_	42	pobj	_	_
44	.	_	.	.	_	22	punct	_	_

Oracle:
(a / and, op, c3 / country)
(a / and, op, c4 / create-01)
(b / belong-01, ARG0, v / vessel)
(b / belong-01, ARG1, c2 / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(c4 / create-01, ARG1, o2 / organization)
(f / force, mod, m2 / military)
(h / hesitate-01, ARG0, p / person)
(h / hesitate-01, ARG1, u / use-01)
(h / hesitate-01, concession, p3 / pressure-01)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, m / minister)
(i / intercept-01, ARG0, p / person)
(i / intercept-01, ARG1, v / vessel)
(m / minister, mod, p2 / prime)
(n / name, op, "Howard")
(n / name, op, "John")
(n2 / name, op, "Australia")
(n3 / name, op, "Democratic")
(n3 / name, op, "Korea")
(n3 / name, op, "People's")
(n3 / name, op, "Republic")
(n3 / name, op, "of")
(n4 / name, op, "States")
(n4 / name, op, "United")
(n5 / name, op, "Initiative")
(n5 / name, op, "Proliferation")
(n5 / name, op, "Security")
(o / or, op, d / drug)
(o / or, op, w / weapon)
(o2 / organization, name, n5 / name)
(p / person, name, n / name)
(p3 / pressure-01, ARG0, a / and)
(s / smuggle-01, ARG0, v / vessel)
(s / smuggle-01, ARG1, o / or)
(s2 / suspect-01, ARG2, v / vessel)
(u / use-01, ARG0, p / person)
(u / use-01, ARG1, f / force)
(u / use-01, purpose, i / intercept-01)

Input(Some(Graph(null,ArrayBuffer(Span(42,45,List(4, 3, 2, 1, 0),Republic of Korea,(country :name (name :op "Korea" :op "of" :op "Republic")),false), Span(36,41,List(12, 11, 10, 9, 8, 7, 6, 5),belonging to the Democratic People,(organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea")),false), Span(35,36,List(13),vessels,vessel,false), Span(34,35,List(14),smuggling,smuggle-01,false), Span(32,33,List(15),weapon,weapon,false), Span(31,32,List(16),or,or,false), Span(29,30,List(17),drug,drug,false), Span(28,29,List(18),suspected,suspect-01,false), Span(27,28,List(19),intercept,intercept-01,false), Span(23,24,List(20),use,use-01,false), Span(18,20,List(24, 23, 22, 21),John Howard,(person :name (name :op "John" :op "Howard")),false), Span(17,18,List(26, 25),Minister,(have-org-role-91 :ARG2 minister),false), Span(16,17,List(27),Prime,prime,false), Span(11,14,List(32, 31, 30, 29, 28),Proliferation Security Initiative,(organization :name (name :op "Initiative" :op "Security" :op "Proliferation")),false), Span(8,9,List(33),creation,create-01,false), Span(4,6,List(37, 36, 35, 34),United States,(country :name (name :op "United" :op "States")),false), Span(1,2,List(38),pressure,pressure-01,false)),Map(30 -> "Initiative", 2 -> "Korea", 5 -> organization, 33 -> create-01, 27 -> prime, 12 -> "Korea", 8 -> "People", 15 -> weapon, 36 -> "United", 21 -> person, 18 -> suspect-01, 24 -> "Howard", 35 -> name, 7 -> "Democratic", 1 -> name, 17 -> drug, 23 -> "John", 38 -> pressure-01, 26 -> minister, 4 -> "Republic", 11 -> "of", 32 -> "Proliferation", 14 -> smuggle-01, 29 -> name, 20 -> use-01, 34 -> country, 28 -> organization, 6 -> name, 9 -> "'s", 0 -> country, 22 -> name, 16 -> or, 37 -> "States", 19 -> intercept-01, 10 -> "Republic", 3 -> "of", 31 -> "Security", 25 -> have-org-role-91, 13 -> vessel),Map(n -> name, w -> weapon, h -> have-org-role-91, s2 -> suspect-01, o3 -> organization, p2 -> prime, n4 -> name, s -> smuggle-01, v -> vessel, m -> minister, d -> drug, p -> person, c3 -> country, n3 -> name, o2 -> or, i -> intercept-01, c -> country, u -> use-01, o -> organization, p3 -> pressure-01, c2 -> create-01, n2 -> name, n5 -> name))),[Ljava.lang.String;@1cd3b138,Annotation([Ljava.lang.String;@151bf776,[Ljava.lang.String;@5a6d30e2,[Ljava.lang.String;@b52b755),Annotation([Ljava.lang.String;@a098d76,[Ljava.lang.String;@40e37b06,[Ledu.cmu.lti.nlp.amr.Dependency;@733aa9d8),Annotation([Ljava.lang.String;@6dcc40f5,[Ljava.lang.String;@2b680207,[Ljava.lang.String;@70887727),Annotation([Ljava.lang.String;@56da7487,[Ljava.lang.String;@599e4d41,[Ledu.cmu.lti.nlp.amr.Entity;@328d044f))
AMR:
(c / country, name, n / name)
(c2 / create-01, ARG1, o3 / organization)
(c3 / country, name, n5 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(i / intercept-01, ARG1, d / drug)
(m / minister, mod, p2 / prime)
(n / name, op, "Korea")
(n / name, op, "Republic")
(n / name, op, "of")
(n2 / name, op, "'s")
(n2 / name, op, "Democratic")
(n2 / name, op, "Korea")
(n2 / name, op, "People")
(n2 / name, op, "Republic")
(n2 / name, op, "of")
(n3 / name, op, "Howard")
(n3 / name, op, "John")
(n4 / name, op, "Initiative")
(n4 / name, op, "Proliferation")
(n4 / name, op, "Security")
(n5 / name, op, "States")
(n5 / name, op, "United")
(o / organization, mod, v / vessel)
(o / organization, name, n2 / name)
(o2 / or, op, u / use-01)
(o2 / or, op, v / vessel)
(o3 / organization, name, n4 / name)
(p / person, name, n3 / name)
(p3 / pressure-01, ARG1, c3 / country)
(s / smuggle-01, ARG1, o3 / organization)
(s / smuggle-01, ARG2, w / weapon)
(s2 / suspect-01, ARG1, d / drug)
(u / use-01, ARG0, p / person)
(u / use-01, ARG1, p3 / pressure-01)
(u / use-01, ARG2, i / intercept-01)
(v / vessel, mod, s / smuggle-01)

Decoded in 2,115,146 microseconds
Sentence: Australian Government is hesitating at using Australian military to intercept the Democratic People's Republic of Korea (DPRK)' s vessels suspected of trafficking weapons or drugs.

NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea"))
NER Entity: (organization :name (name :op "DPRK"))
NER Entity: (organization :name (name :op "DPRK"))
Spans:
Span 18-19:  DPRK => (country :name (name :op "DPRK"))
Span 9-10:  intercept => intercept-01
Span 26-27:  or => or
Span 14-17:  Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic"))
Span 22-23:  suspected => suspect-01
Span 5-6:  using => use-01
Span 21-22:  vessels => vessel

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 0-1:  Australian => (country :name (name :op "Australia"))
Oracle Span 11-17:  Democratic People 's Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic" :op "People's" :op "Democratic"))
Oracle Span 27-28:  drugs => drug
Oracle Span 1-2:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 3-4:  hesitating => hesitate-01
Oracle Span 9-10:  intercept => intercept-01
Oracle Span 7-8:  military => military
Oracle Span 26-27:  or => or
Oracle Span 22-23:  suspected => suspect-01
Oracle Span 24-25:  trafficking => traffic-00
Oracle Span 5-6:  using => use-01
Oracle Span 21-22:  vessels => vessel
Oracle Span 25-26:  weapons => weapon

Extra span: DPRK => (country :name (name :op "DPRK"))
Extra span: Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic"))
Missing span: Democratic People 's Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic" :op "People's" :op "Democratic"))
Missing span: Australian => (country :name (name :op "Australia"))
Missing span: hesitating => hesitate-01
Missing span: trafficking => traffic-00
Missing span: drugs => drug
Missing span: weapons => weapon
Missing span: military => military
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Australian	_	NNP	NNP	_	2	nn	_	_
2	Government	_	NNP	NNP	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	aux	_	_
4	hesitating	_	VBG	VBG	_	0	root	_	_
5	at	_	IN	IN	_	4	prep	_	_
6	using	_	VBG	VBG	_	5	pcomp	_	_
7	Australian	_	JJ	JJ	_	8	amod	_	_
8	military	_	NN	NN	_	6	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	intercept	_	VB	VB	_	6	vmod	_	_
11	the	_	DT	DT	_	13	det	_	_
12	Democratic	_	JJ	JJ	_	13	amod	_	_
13	People	_	NNS	NNS	_	15	poss	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	Republic	_	NNP	NNP	_	23	poss	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	Korea	_	NNP	NNP	_	16	pobj	_	_
18	(	_	(	(	_	19	punct	_	_
19	DPRK	_	NNP	NNP	_	17	appos	_	_
20	)	_	)	)	_	19	punct	_	_
21	'	_	POS	POS	_	15	possessive	_	_
22	s	_	NN	NN	_	23	nn	_	_
23	vessels	_	NNS	NNS	_	10	dobj	_	_
24	suspected	_	VBN	VBN	_	23	vmod	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	trafficking	_	NN	NN	_	27	nn	_	_
27	weapons	_	NNS	NNS	_	25	pobj	_	_
28	or	_	CC	CC	_	27	cc	_	_
29	drugs	_	NNS	NNS	_	27	conj	_	_
30	.	_	.	.	_	4	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / hesitate-01, ARG0, g / government-organization)
(h / hesitate-01, ARG1, u / use-01)
(i / intercept-01, ARG0, g / government-organization)
(i / intercept-01, ARG1, v / vessel)
(m / military, mod, c / country)
(n / name, op, "Australia")
(n2 / name, op, "Democratic")
(n2 / name, op, "Korea")
(n2 / name, op, "People's")
(n2 / name, op, "Republic")
(n2 / name, op, "of")
(o / or, op, d / drug)
(o / or, op, w / weapon)
(s / suspect-01, ARG1, t / traffic-00)
(s / suspect-01, ARG2, v / vessel)
(t / traffic-00, ARG1, o / or)
(u / use-01, ARG0, g / government-organization)
(u / use-01, ARG1, m / military)
(u / use-01, ARG2, i / intercept-01)
(v / vessel, mod, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),or,or,false), Span(22,23,List(1),suspected,suspect-01,false), Span(21,22,List(2),vessels,vessel,false), Span(18,19,List(5, 4, 3),DPRK,(country :name (name :op "DPRK")),false), Span(14,17,List(10, 9, 8, 7, 6),Republic of Korea,(country :name (name :op "Korea" :op "of" :op "Republic")),false), Span(9,10,List(11),intercept,intercept-01,false), Span(5,6,List(12),using,use-01,false)),Map(2 -> vessel, 5 -> "DPRK", 12 -> use-01, 8 -> "Korea", 7 -> name, 1 -> suspect-01, 4 -> name, 11 -> intercept-01, 6 -> country, 0 -> or, 9 -> "of", 3 -> country, 10 -> "Republic"),Map(n -> name, s -> suspect-01, v -> vessel, i -> intercept-01, u -> use-01, c -> country, o -> or, n2 -> name, c2 -> country))),[Ljava.lang.String;@10f7c76,Annotation([Ljava.lang.String;@4745e9c,[Ljava.lang.String;@2f2bff16,[Ljava.lang.String;@75de29c0),Annotation([Ljava.lang.String;@fc807c1,[Ljava.lang.String;@296e281a,[Ledu.cmu.lti.nlp.amr.Dependency;@59cda16e),Annotation([Ljava.lang.String;@5dd903be,[Ljava.lang.String;@12e0f1cb,[Ljava.lang.String;@4a163575),Annotation([Ljava.lang.String;@7e642b88,[Ljava.lang.String;@6b350309,[Ledu.cmu.lti.nlp.amr.Entity;@7ecec90d))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(i / intercept-01, ARG1, v / vessel)
(n / name, op, "DPRK")
(n2 / name, op, "Korea")
(n2 / name, op, "Republic")
(n2 / name, op, "of")
(s / suspect-01, ARG1, v / vessel)
(s / suspect-01, ARG2, o / or)
(u / use-01, ARG0, c / country)
(u / use-01, ARG2, i / intercept-01)
(v / vessel, poss, c2 / country)

Decoded in 184,810 microseconds
Sentence: Australian Prime Minister John Howard was quoted on 9 July 2003 by the Australian Associated Press as stating that the Australian government is not at this stage considering military contributions.

NER Entity: (thing :name (name :op "Australian"))
NER Entity: (person :name (name :op "John" :op "Howard"))
mkDayMonthYear(9	July	2003,9,July,2003)
NER Entity: (organization :name (name :op "Australian" :op "Associated" :op "Press"))
NER Entity: (thing :name (name :op "Australian"))
Spans:
Span 8-11:  9 July 2003 => (date-entity :day 9 :month 7 :year 2003)
Span 13-16:  Australian Associated Press => (organization :name (name :op "Australian" :op "Associated" :op "Press"))
Span 27-28:  considering => consider-02
Span 3-5:  John Howard => (person :name (name :op "John" :op "Howard"))
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 1-2:  Prime => prime
Span 6-7:  quoted => quote-01
Span 26-27:  stage => stage
Span 17-18:  stating => state-01
Span 25-26:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  2003 => 2003
Oracle Span 8-9:  9 => 9
Oracle Span 14-16:  Associated Press => (publication :name (name :op "Press" :op "Associated"))
Oracle Span 0-1:  Australian => (country :name (name :op "Australia"))
Oracle Span 27-28:  considering => consider-01
Oracle Span 29-30:  contributions => contribute-01
Oracle Span 21-22:  government => (government-organization :ARG0-of govern-01)
Oracle Span 3-5:  John Howard => (person :name (name :op "Howard" :op "John"))
Oracle Span 28-29:  military => military
Oracle Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 1-2:  Prime => prime
Oracle Span 6-7:  quoted => quote-01
Oracle Span 26-27:  stage => stage
Oracle Span 17-18:  stating => state-01
Oracle Span 25-26:  this => this

Incorrect span: considering => consider-02
Extra span: Australian Associated Press => (organization :name (name :op "Australian" :op "Associated" :op "Press"))
Extra span: 9 July 2003 => (date-entity :day 9 :month 7 :year 2003)
Incorrect span: John Howard => (person :name (name :op "John" :op "Howard"))
Missing span: Associated Press => (publication :name (name :op "Press" :op "Associated"))
Missing span: John Howard => (person :name (name :op "Howard" :op "John"))
Missing span: Australian => (country :name (name :op "Australia"))
Missing span: 2003 => 2003
Missing span: 9 => 9
Missing span: considering => consider-01
Missing span: military => military
Missing span: contributions => contribute-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Australian	_	JJ	JJ	_	5	amod	_	_
2	Prime	_	NNP	NNP	_	5	nn	_	_
3	Minister	_	NNP	NNP	_	5	nn	_	_
4	John	_	NNP	NNP	_	5	nn	_	_
5	Howard	_	NNP	NNP	_	7	nsubjpass	_	_
6	was	_	VBD	VBD	_	7	auxpass	_	_
7	quoted	_	VBN	VBN	_	0	root	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	9	_	CD	CD	_	8	pobj	_	_
10	July	_	NNP	NNP	_	7	tmod	_	_
11	2003	_	CD	CD	_	10	num	_	_
12	by	_	IN	IN	_	7	prep	_	_
13	the	_	DT	DT	_	16	det	_	_
14	Australian	_	JJ	JJ	_	16	amod	_	_
15	Associated	_	NNP	NNP	_	16	nn	_	_
16	Press	_	NNP	NNP	_	12	pobj	_	_
17	as	_	IN	IN	_	16	prep	_	_
18	stating	_	VBG	VBG	_	17	pcomp	_	_
19	that	_	IN	IN	_	23	mark	_	_
20	the	_	DT	DT	_	22	det	_	_
21	Australian	_	JJ	JJ	_	22	amod	_	_
22	government	_	NN	NN	_	23	nsubj	_	_
23	is	_	VBZ	VBZ	_	18	ccomp	_	_
24	not	_	RB	RB	_	23	neg	_	_
25	at	_	IN	IN	_	23	prep	_	_
26	this	_	DT	DT	_	27	det	_	_
27	stage	_	NN	NN	_	25	pobj	_	_
28	considering	_	VBG	VBG	_	27	vmod	_	_
29	military	_	JJ	JJ	_	30	amod	_	_
30	contributions	_	NNS	NNS	_	28	dobj	_	_
31	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / consider-01, ARG0, g / government-organization)
(c2 / consider-01, ARG1, c3 / contribute-01)
(c2 / consider-01, time, s2 / stage)
(c3 / contribute-01, ARG0, g / government-organization)
(c3 / contribute-01, ARG1, m2 / military)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p2 / prime)
(n / name, op, "Howard")
(n / name, op, "John")
(n2 / name, op, "Australia")
(n3 / name, op, "Associated")
(n3 / name, op, "Press")
(p / person, name, n / name)
(p3 / publication, mod, c / country)
(p3 / publication, name, n3 / name)
(q / quote-01, ARG0, p3 / publication)
(q / quote-01, ARG1, p / person)
(q / quote-01, ARG2, s / state-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c2 / consider-01)
(s2 / stage, mod, t / this)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),considering,consider-02,false), Span(26,27,List(1),stage,stage,false), Span(25,26,List(2),this,this,false), Span(17,18,List(3),stating,state-01,false), Span(13,16,List(8, 7, 6, 5, 4),Australian Associated Press,(organization :name (name :op "Australian" :op "Associated" :op "Press")),false), Span(8,11,List(12, 11, 10, 9),9 July 2003,(date-entity :day 9 :month 7 :year 2003),false), Span(6,7,List(13),quoted,quote-01,false), Span(3,5,List(17, 16, 15, 14),John Howard,(person :name (name :op "John" :op "Howard")),false), Span(2,3,List(19, 18),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(20),Prime,prime,false)),Map(2 -> this, 5 -> name, 12 -> 2003, 15 -> name, 8 -> "Press", 18 -> have-org-role-91, 7 -> "Associated", 17 -> "Howard", 1 -> stage, 4 -> organization, 11 -> 7, 14 -> person, 20 -> prime, 6 -> "Australian", 0 -> consider-02, 9 -> date-entity, 16 -> "John", 19 -> minister, 3 -> state-01, 10 -> 9, 13 -> quote-01),Map(n -> name, h -> have-org-role-91, 2 -> 2003, q -> quote-01, s2 -> state-01, t -> this, p2 -> prime, s -> stage, m -> minister, d -> date-entity, 7 -> 7, p -> person, c -> consider-02, 9 -> 9, o -> organization, n2 -> name))),[Ljava.lang.String;@588f63c,Annotation([Ljava.lang.String;@5a6fa56e,[Ljava.lang.String;@1981d861,[Ljava.lang.String;@118ffcfd),Annotation([Ljava.lang.String;@53f4c1e6,[Ljava.lang.String;@74174a23,[Ledu.cmu.lti.nlp.amr.Dependency;@6342d610),Annotation([Ljava.lang.String;@dc4a691,[Ljava.lang.String;@784abd3e,[Ljava.lang.String;@36c2b646),Annotation([Ljava.lang.String;@434514d8,[Ljava.lang.String;@6b1dc20f,[Ledu.cmu.lti.nlp.amr.Entity;@4613311f))
AMR:
(c / consider-02, ARG1, s / stage)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2003)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p2 / prime)
(n / name, op, "Associated")
(n / name, op, "Australian")
(n / name, op, "Press")
(n2 / name, op, "Howard")
(n2 / name, op, "John")
(o / organization, name, n / name)
(p / person, name, n2 / name)
(q / quote-01, ARG0, o / organization)
(q / quote-01, ARG1, p / person)
(q / quote-01, time, d / date-entity)
(s / stage, mod, t / this)
(s2 / state-01, ARG0, o / organization)
(s2 / state-01, ARG1, c / consider-02)

Decoded in 218,934 microseconds
Sentence: Howard stated the Australian government is considering ways and means of dealing with a very big problem and the Australian Government must choose descriptors and words sensibly because the Australian government is dealing with a volatile issue and a country that is not operating according to Convention.

NER Entity: (person :name (name :op "Howard"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
Spans:
Span 27-28:  because => cause-01
Span 15-16:  big => big
Span 22-23:  choose => choose-01
Span 6-7:  considering => consider-02
Span 39-40:  country => country
Span 32-33:  dealing => deal-01
Span 11-12:  dealing => deal-01
Span 36-37:  issue => issue
Span 43-44:  operating => operate-01
Span 16-17:  problem => problem
Span 14-15:  very => very
Span 35-36:  volatile => volatile
Span 7-8:  ways => way
Span 25-26:  words => word-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 17-18:  and => and
Oracle Span 24-25:  and => and
Oracle Span 37-38:  and => and
Oracle Span 3-4:  Australian => (country :name (name :op "Australia"))
Oracle Span 27-28:  because => cause-01
Oracle Span 15-16:  big => big
Oracle Span 22-23:  choose => choose-01
Oracle Span 6-7:  considering => consider-01
Oracle Span 46-47:  Convention => (treaty :name (name :op "Convention"))
Oracle Span 39-40:  country => country
Oracle Span 11-12:  dealing => deal-01
Oracle Span 32-33:  dealing => deal-01
Oracle Span 23-24:  descriptors => descriptor
Oracle Span 4-5:  government => government-organization
Oracle Span 20-21:  Government => govern-01
Oracle Span 0-1:  Howard => (person :name (name :op "Howard"))
Oracle Span 36-37:  issue => issue
Oracle Span 9-10:  means => mean-01
Oracle Span 43-44:  operating => operate-01
Oracle Span 16-17:  problem => problem
Oracle Span 26-27:  sensibly => sensible
Oracle Span 1-2:  stated => state-01
Oracle Span 14-15:  very => very
Oracle Span 35-36:  volatile => volatile
Oracle Span 7-8:  ways => way
Oracle Span 25-26:  words => word

Incorrect span: words => word-01
Incorrect span: considering => consider-02
Missing span: Howard => (person :name (name :op "Howard"))
Missing span: Convention => (treaty :name (name :op "Convention"))
Missing span: Australian => (country :name (name :op "Australia"))
Missing span: stated => state-01
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: words => word
Missing span: descriptors => descriptor
Missing span: considering => consider-01
Missing span: and => and
Missing span: means => mean-01
Missing span: sensibly => sensible
Missing span: government => government-organization
Missing span: Government => govern-01
Dependencies:
1	Howard	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	the	_	DT	DT	_	5	det	_	_
4	Australian	_	JJ	JJ	_	5	amod	_	_
5	government	_	NN	NN	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	aux	_	_
7	considering	_	VBG	VBG	_	2	ccomp	_	_
8	ways	_	NNS	NNS	_	7	dobj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	means	_	NNS	NNS	_	8	conj	_	_
11	of	_	IN	IN	_	8	prep	_	_
12	dealing	_	VBG	VBG	_	11	pcomp	_	_
13	with	_	IN	IN	_	12	prep	_	_
14	a	_	DT	DT	_	17	det	_	_
15	very	_	RB	RB	_	16	advmod	_	_
16	big	_	JJ	JJ	_	17	amod	_	_
17	problem	_	NN	NN	_	13	pobj	_	_
18	and	_	CC	CC	_	2	cc	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Australian	_	JJ	JJ	_	21	amod	_	_
21	Government	_	NN	NN	_	23	nsubj	_	_
22	must	_	MD	MD	_	23	aux	_	_
23	choose	_	VB	VB	_	2	conj	_	_
24	descriptors	_	NNS	NNS	_	23	dobj	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	words	_	NNS	NNS	_	24	conj	_	_
27	sensibly	_	RB	RB	_	23	advmod	_	_
28	because	_	IN	IN	_	33	mark	_	_
29	the	_	DT	DT	_	31	det	_	_
30	Australian	_	JJ	JJ	_	31	amod	_	_
31	government	_	NN	NN	_	33	nsubj	_	_
32	is	_	VBZ	VBZ	_	33	aux	_	_
33	dealing	_	VBG	VBG	_	23	advcl	_	_
34	with	_	IN	IN	_	33	prep	_	_
35	a	_	DT	DT	_	37	det	_	_
36	volatile	_	JJ	JJ	_	37	amod	_	_
37	issue	_	NN	NN	_	34	pobj	_	_
38	and	_	CC	CC	_	37	cc	_	_
39	a	_	DT	DT	_	40	det	_	_
40	country	_	NN	NN	_	37	conj	_	_
41	that	_	WDT	WDT	_	44	nsubj	_	_
42	is	_	VBZ	VBZ	_	44	aux	_	_
43	not	_	RB	RB	_	44	neg	_	_
44	operating	_	VBG	VBG	_	40	rcmod	_	_
45	according	_	VBG	VBG	_	44	prep	_	_
46	to	_	TO	TO	_	45	pcomp	_	_
47	Convention	_	NNP	NNP	_	46	pobj	_	_
48	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c / consider-01)
(a2 / and, op, m / mean-01)
(a2 / and, op, w / way)
(a3 / and, op, d2 / descriptor)
(a3 / and, op, w2 / word)
(a4 / and, op, c5 / country)
(a4 / and, op, i / issue)
(b / big, degree, v / very)
(c / consider-01, ARG0, g / government-organization)
(c / consider-01, ARG1, a2 / and)
(c2 / country, name, n2 / name)
(c3 / choose-01, ARG0, g / government-organization)
(c3 / choose-01, ARG1, a3 / and)
(c3 / choose-01, manner, s2 / sensible)
(c4 / cause-01, ARG0, d3 / deal-01)
(c4 / cause-01, ARG1, s2 / sensible)
(d / deal-01, ARG0, g / government-organization)
(d / deal-01, ARG1, p2 / problem)
(d3 / deal-01, ARG0, g / government-organization)
(d3 / deal-01, ARG1, a4 / and)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(i / issue, mod, v2 / volatile)
(m / mean-01, ARG1, d / deal-01)
(n / name, op, "Howard")
(n2 / name, op, "Australia")
(n3 / name, op, "Convention")
(o2 / operate-01, ARG0, c5 / country)
(p / person, name, n / name)
(p2 / problem, mod, b / big)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(t / treaty, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),operating,operate-01,false), Span(39,40,List(1),country,country,false), Span(36,37,List(2),issue,issue,false), Span(35,36,List(3),volatile,volatile,false), Span(32,33,List(4),dealing,deal-01,false), Span(27,28,List(5),because,cause-01,false), Span(25,26,List(6),words,word-01,false), Span(22,23,List(7),choose,choose-01,false), Span(16,17,List(8),problem,problem,false), Span(15,16,List(9),big,big,false), Span(14,15,List(10),very,very,false), Span(11,12,List(11),dealing,deal-01,false), Span(7,8,List(12),ways,way,false), Span(6,7,List(13),considering,consider-02,false)),Map(2 -> issue, 5 -> cause-01, 12 -> way, 8 -> problem, 7 -> choose-01, 1 -> country, 4 -> deal-01, 11 -> deal-01, 6 -> word-01, 0 -> operate-01, 9 -> big, 3 -> volatile, 10 -> very, 13 -> consider-02),Map(w -> word-01, v2 -> very, b -> big, c4 -> consider-02, v -> volatile, d -> deal-01, p -> problem, c3 -> choose-01, d2 -> deal-01, w2 -> way, i -> issue, c -> country, o -> operate-01, c2 -> cause-01))),[Ljava.lang.String;@6540cf1d,Annotation([Ljava.lang.String;@ec8f4b9,[Ljava.lang.String;@bc042d5,[Ljava.lang.String;@5484117b),Annotation([Ljava.lang.String;@37df14d1,[Ljava.lang.String;@7efb53af,[Ledu.cmu.lti.nlp.amr.Dependency;@7724704f),Annotation([Ljava.lang.String;@3dfa819,[Ljava.lang.String;@4ce94d2f,[Ljava.lang.String;@68ab0936),Annotation([Ljava.lang.String;@3cd9aa64,[Ljava.lang.String;@42b84286,[Ledu.cmu.lti.nlp.amr.Entity;@443effcb))
AMR:
(b / big, degree, v2 / very)
(c2 / cause-01, ARG0, d / deal-01)
(c2 / cause-01, ARG1, c3 / choose-01)
(c3 / choose-01, ARG1, c4 / consider-02)
(c4 / consider-02, ARG1, w2 / way)
(c4 / consider-02, ARG2, d2 / deal-01)
(d / deal-01, ARG1, i / issue)
(d2 / deal-01, prep-with, p / problem)
(i / issue, mod, v / volatile)
(o / operate-01, ARG0, i / issue)
(o / operate-01, ARG2, c / country)
(p / problem, mod, b / big)
(w / word-01, ARG1, c2 / cause-01)

Decoded in 302,706 microseconds
Sentence: Howard referenced future talks with Japanese Prime Minister Junichiro Koizumi and South Korean President Roh Woo-hyun on the issue when Howard visits the region during the week of 14 July 2003.

NER Entity: (person :name (name :op "Howard"))
NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (person :name (name :op "Junichiro" :op "Koizumi"))
NER Entity: (thing :name (name :op "South" :op "Korean"))
NER Entity: (person :name (name :op "Roh" :op "Woo" :op "-" :op "hyun"))
NER Entity: (person :name (name :op "Howard"))
mkDayMonthYear(14	July	2003,14,July,2003)
NER Entity: (person :name (name :op "Howard"))
Spans:
Span 30-33:  14 July 2003 => (date-entity :day 14 :month 7 :year 2003)
Span 2-3:  future => future
Span 20-21:  issue => issue
Span 8-10:  Junichiro Koizumi => (person :name (name :op "Koizumi" :op "Junichiro"))
Span 7-8:  Minister => (have-org-role-91 :ARG2 minister)
Span 13-14:  President => (have-org-role-91 :ARG2 president)
Span 6-7:  Prime => prime
Span 25-26:  region => region
Span 14-16:  Roh Woo => (person :name (name :op "Roh" :op "Woo" :op "-" :op "hyun"))
Span 11-13:  South Korean => (thing :name (name :op "South" :op "Korean"))
Span 3-4:  talks => talk-01
Span 23-24:  visits => visit-01

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Oracle Span 30-33:  14 July 2003 => (date-entity :day 14 :month 7 :year 2003)
Oracle Span 10-11:  and => and
Oracle Span 2-3:  future => future
Oracle Span 0-1:  Howard => (person :name (name :op "Howard"))
Oracle Span 20-21:  issue => issue
Oracle Span 5-6:  Japanese => (country :name (name :op "Japan"))
Oracle Span 8-10:  Junichiro Koizumi => (person :name (name :op "Koizumi" :op "Junichiro"))
Oracle Span 7-8:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 13-14:  President => (have-org-role-91 :ARG2 president)
Oracle Span 6-7:  Prime => prime
Oracle Span 1-2:  referenced => reference-01
Oracle Span 25-26:  region => region
Oracle Span 14-18:  Roh Woo - hyun => (person :name (name :op "Woo-hyun" :op "Roh"))
Oracle Span 11-13:  South Korean => (country :name (name :op "Korea" :op "South"))
Oracle Span 3-4:  talks => talk-01
Oracle Span 23-24:  visits => visit-01
Oracle Span 28-29:  week => week

Extra span: Roh Woo => (person :name (name :op "Roh" :op "Woo" :op "-" :op "hyun"))
Incorrect span: South Korean => (thing :name (name :op "South" :op "Korean"))
Missing span: Howard => (person :name (name :op "Howard"))
Missing span: Roh Woo - hyun => (person :name (name :op "Woo-hyun" :op "Roh"))
Missing span: Japanese => (country :name (name :op "Japan"))
Missing span: South Korean => (country :name (name :op "Korea" :op "South"))
Missing span: referenced => reference-01
Missing span: week => week
Missing span: and => and
Dependencies:
1	Howard	_	NNP	NNP	_	2	nsubj	_	_
2	referenced	_	VBD	VBD	_	0	root	_	_
3	future	_	JJ	JJ	_	4	amod	_	_
4	talks	_	NNS	NNS	_	2	dobj	_	_
5	with	_	IN	IN	_	2	prep	_	_
6	Japanese	_	JJ	JJ	_	10	amod	_	_
7	Prime	_	NNP	NNP	_	10	nn	_	_
8	Minister	_	NNP	NNP	_	10	nn	_	_
9	Junichiro	_	NNP	NNP	_	10	nn	_	_
10	Koizumi	_	NNP	NNP	_	5	pobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	South	_	NNP	NNP	_	16	nn	_	_
13	Korean	_	NNP	NNP	_	16	nn	_	_
14	President	_	NNP	NNP	_	16	nn	_	_
15	Roh	_	NNP	NNP	_	16	nn	_	_
16	Woo-hyun	_	NNP	NNP	_	10	conj	_	_
17	on	_	IN	IN	_	2	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	issue	_	NN	NN	_	17	pobj	_	_
20	when	_	WRB	WRB	_	22	advmod	_	_
21	Howard	_	NNP	NNP	_	22	nsubj	_	_
22	visits	_	VBZ	VBZ	_	19	rcmod	_	_
23	the	_	DT	DT	_	24	det	_	_
24	region	_	NN	NN	_	22	dobj	_	_
25	during	_	IN	IN	_	22	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	week	_	NN	NN	_	25	pobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	14	_	CD	CD	_	28	pobj	_	_
30	July	_	NNP	NNP	_	27	tmod	_	_
31	2003	_	CD	CD	_	30	num	_	_
32	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, h / have-org-role-91)
(a / and, op, h2 / have-org-role-91)
(c / country, name, n3 / name)
(c2 / country, name, n5 / name)
(d2 / date-entity, day, 14)
(d2 / date-entity, month, 7)
(d2 / date-entity, year, 2003)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, p5 / president)
(m / minister, mod, p3 / prime)
(n / name, op, "Howard")
(n2 / name, op, "Junichiro")
(n2 / name, op, "Koizumi")
(n3 / name, op, "Japan")
(n4 / name, op, "Roh")
(n4 / name, op, "Woo-hyun")
(n5 / name, op, "Korea")
(n5 / name, op, "South")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p4 / person, name, n4 / name)
(r / reference-01, ARG0, p / person)
(r / reference-01, ARG1, t / talk-01)
(r / reference-01, time, v / visit-01)
(t / talk-01, ARG0, p / person)
(t / talk-01, ARG1, i / issue)
(t / talk-01, ARG2, a / and)
(t / talk-01, time, f / future)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, r2 / region)
(v / visit-01, time, w / week)
(w / week, mod, d2 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(30,33,List(3, 2, 1, 0),14 July 2003,(date-entity :day 14 :month 7 :year 2003),false), Span(25,26,List(4),region,region,false), Span(23,24,List(5),visits,visit-01,false), Span(20,21,List(6),issue,issue,false), Span(14,16,List(12, 11, 10, 9, 8, 7),Roh Woo,(person :name (name :op "Roh" :op "Woo" :op "-" :op "hyun")),false), Span(13,14,List(14, 13),President,(have-org-role-91 :ARG2 president),false), Span(11,13,List(18, 17, 16, 15),South Korean,(thing :name (name :op "South" :op "Korean")),false), Span(8,10,List(22, 21, 20, 19),Junichiro Koizumi,(person :name (name :op "Koizumi" :op "Junichiro")),false), Span(7,8,List(24, 23),Minister,(have-org-role-91 :ARG2 minister),false), Span(6,7,List(25),Prime,prime,false), Span(3,4,List(26),talks,talk-01,false), Span(2,3,List(27),future,future,false)),Map(2 -> 7, 5 -> visit-01, 27 -> future, 12 -> "hyun", 8 -> name, 15 -> thing, 21 -> "Koizumi", 18 -> "Korean", 24 -> minister, 7 -> person, 1 -> 14, 17 -> "South", 23 -> have-org-role-91, 26 -> talk-01, 4 -> region, 11 -> "-", 14 -> president, 20 -> name, 6 -> issue, 9 -> "Roh", 0 -> date-entity, 22 -> "Junichiro", 16 -> name, 19 -> person, 10 -> "Woo", 3 -> 2003, 25 -> prime, 13 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, 2 -> 2003, h2 -> have-org-role-91, t -> thing, p2 -> president, v -> visit-01, m -> minister, d -> date-entity, 7 -> 7, 1 -> 14, p -> person, n3 -> name, p4 -> prime, t2 -> talk-01, r -> region, i -> issue, f -> future, p3 -> person, n2 -> name))),[Ljava.lang.String;@74ecacc3,Annotation([Ljava.lang.String;@517a2b0,[Ljava.lang.String;@53b7ce6,[Ljava.lang.String;@36480b2d),Annotation([Ljava.lang.String;@27d33393,[Ljava.lang.String;@1f6917fb,[Ledu.cmu.lti.nlp.amr.Dependency;@41eb94bc),Annotation([Ljava.lang.String;@378cfecf,[Ljava.lang.String;@97d0c06,[Ljava.lang.String;@5e7c141d),Annotation([Ljava.lang.String;@43af351a,[Ljava.lang.String;@1305c126,[Ledu.cmu.lti.nlp.amr.Entity;@72f9f27c))
AMR:
(d / date-entity, day, 1 / 14)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2003)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, t / thing)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p4 / prime)
(m / minister, mod, t / thing)
(n / name, op, "-")
(n / name, op, "Roh")
(n / name, op, "Woo")
(n / name, op, "hyun")
(n2 / name, op, "Korean")
(n2 / name, op, "South")
(n3 / name, op, "Junichiro")
(n3 / name, op, "Koizumi")
(p / person, name, n / name)
(p3 / person, name, n3 / name)
(t / thing, name, n2 / name)
(t2 / talk-01, ARG2, p3 / person)
(t2 / talk-01, time, f / future)
(v / visit-01, ARG0, t2 / talk-01)
(v / visit-01, ARG1, r / region)
(v / visit-01, location, i / issue)
(v / visit-01, time, d / date-entity)

Decoded in 1,905,029 microseconds
Sentence: American government has recently formed a proliferation security initiative that consists of 11 members.

NER Entity: (thing :name (name :op "American"))
Spans:
Span 10-11:  consists => consist-01
Span 4-5:  formed => form-01
Span 13-14:  members => (have-org-role-91 :ARG2 member)
Span 6-9:  proliferation security initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Span 3-4:  recently => recent

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  11 => 11
Oracle Span 4-5:  formed => form-01
Oracle Span 1-2:  government => (government-organization :ARG0-of govern-01)
Oracle Span 2-3:  has => (person :ARG0-of have-org-role-91)
Oracle Span 13-14:  members => member
Oracle Span 6-9:  proliferation security initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Oracle Span 3-4:  recently => recent

Incorrect span: members => (have-org-role-91 :ARG2 member)
Extra span: consists => consist-01
Missing span: 11 => 11
Missing span: members => member
Missing span: has => (person :ARG0-of have-org-role-91)
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	American	_	JJ	JJ	_	2	amod	_	_
2	government	_	NN	NN	_	5	nsubj	_	_
3	has	_	VBZ	VBZ	_	5	aux	_	_
4	recently	_	RB	RB	_	5	advmod	_	_
5	formed	_	VBN	VBN	_	0	root	_	_
6	a	_	DT	DT	_	9	det	_	_
7	proliferation	_	NN	NN	_	9	nn	_	_
8	security	_	NN	NN	_	9	nn	_	_
9	initiative	_	NN	NN	_	5	dobj	_	_
10	that	_	WDT	WDT	_	11	nsubj	_	_
11	consists	_	VBZ	VBZ	_	9	rcmod	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	11	_	CD	CD	_	14	num	_	_
14	members	_	NNS	NNS	_	12	pobj	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(f / form-01, ARG0, g / government-organization)
(f / form-01, ARG1, o / organization)
(f / form-01, time, r / recent)
(g2 / govern-01, ARG0, g / government-organization)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n2 / name, op, "Initiative")
(n2 / name, op, "Proliferation")
(n2 / name, op, "Security")
(o / organization, name, n2 / name)
(p / person, consist, o / organization)
(p / person, quant, 1 / 11)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(1, 0),members,(have-org-role-91 :ARG2 member),false), Span(10,11,List(2),consists,consist-01,false), Span(6,9,List(7, 6, 5, 4, 3),proliferation security initiative,(organization :name (name :op "Initiative" :op "Security" :op "Proliferation")),false), Span(4,5,List(8),formed,form-01,false), Span(3,4,List(9),recently,recent,false)),Map(2 -> consist-01, 5 -> "Initiative", 8 -> form-01, 7 -> "Proliferation", 1 -> member, 4 -> name, 6 -> "Security", 9 -> recent, 0 -> have-org-role-91, 3 -> organization),Map(n -> name, h -> have-org-role-91, m -> member, r -> recent, c -> consist-01, f -> form-01, o -> organization))),[Ljava.lang.String;@4c1bdcc2,Annotation([Ljava.lang.String;@762637be,[Ljava.lang.String;@4b97c4ad,[Ljava.lang.String;@7640a5b1),Annotation([Ljava.lang.String;@642f9a77,[Ljava.lang.String;@23f3da8b,[Ledu.cmu.lti.nlp.amr.Dependency;@5634d0f4),Annotation([Ljava.lang.String;@252a8aae,[Ljava.lang.String;@3d4e405e,[Ljava.lang.String;@54e2fe),Annotation([Ljava.lang.String;@70972170,[Ljava.lang.String;@119aa36,[Ledu.cmu.lti.nlp.amr.Entity;@4e1a46fb))
AMR:
(c / consist-01, ARG1, o / organization)
(f / form-01, ARG1, o / organization)
(f / form-01, time, r / recent)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Initiative")
(n / name, op, "Proliferation")
(n / name, op, "Security")
(o / organization, name, n / name)

Decoded in 53,000 microseconds
Sentence: The Proliferation Security Initiative started a meeting 9 July 2003 in Brisbane.

NER Entity: (organization :name (name :op "Proliferation" :op "Security" :op "Initiative"))
mkDayMonthYear(9	July	2003,9,July,2003)
NER Entity: (country :name (name :op "Brisbane"))
Spans:
Span 7-10:  9 July 2003 => (date-entity :day 9 :month 7 :year 2003)
Span 1-4:  Proliferation Security Initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Span 4-5:  started => start-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-10:  9 July 2003 => (date-entity :day 9 :month 7 :year 2003)
Oracle Span 11-12:  Brisbane => (city :name (name :op "Brisbane"))
Oracle Span 6-7:  meeting => meet-03
Oracle Span 1-4:  Proliferation Security Initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Oracle Span 4-5:  started => start-01

Missing span: Brisbane => (city :name (name :op "Brisbane"))
Missing span: meeting => meet-03
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Proliferation	_	NNP	NNP	_	4	nn	_	_
3	Security	_	NNP	NNP	_	4	nn	_	_
4	Initiative	_	NNP	NNP	_	5	nsubj	_	_
5	started	_	VBD	VBD	_	0	root	_	_
6	a	_	DT	DT	_	7	det	_	_
7	meeting	_	NN	NN	_	5	dobj	_	_
8	9	_	CD	CD	_	7	num	_	_
9	July	_	NNP	NNP	_	5	tmod	_	_
10	2003	_	CD	CD	_	9	num	_	_
11	in	_	IN	IN	_	5	prep	_	_
12	Brisbane	_	NNP	NNP	_	11	pobj	_	_
13	.	_	.	.	_	5	punct	_	_

Oracle:
(c / city, name, n2 / name)
(d / date-entity, day, 9)
(d / date-entity, month, 7)
(d / date-entity, year, 2003)
(m / meet-03, ARG0, o / organization)
(m / meet-03, location, c / city)
(n / name, op, "Initiative")
(n / name, op, "Proliferation")
(n / name, op, "Security")
(n2 / name, op, "Brisbane")
(o / organization, name, n / name)
(s / start-01, ARG0, o / organization)
(s / start-01, ARG1, m / meet-03)
(s / start-01, time, d / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(7,10,List(3, 2, 1, 0),9 July 2003,(date-entity :day 9 :month 7 :year 2003),false), Span(4,5,List(4),started,start-01,false), Span(1,4,List(9, 8, 7, 6, 5),Proliferation Security Initiative,(organization :name (name :op "Initiative" :op "Security" :op "Proliferation")),false)),Map(2 -> 7, 5 -> organization, 8 -> "Security", 7 -> "Initiative", 1 -> 9, 4 -> start-01, 6 -> name, 9 -> "Proliferation", 0 -> date-entity, 3 -> 2003),Map(n -> name, 2 -> 2003, s -> start-01, 7 -> 7, d -> date-entity, o -> organization, 9 -> 9))),[Ljava.lang.String;@69fe0ed4,Annotation([Ljava.lang.String;@20ab3e3a,[Ljava.lang.String;@6caf7803,[Ljava.lang.String;@709ed6f3),Annotation([Ljava.lang.String;@698fee9a,[Ljava.lang.String;@102c577f,[Ledu.cmu.lti.nlp.amr.Dependency;@7d44a19),Annotation([Ljava.lang.String;@1fb2d5e,[Ljava.lang.String;@1716e8c5,[Ljava.lang.String;@6573d2f7),Annotation([Ljava.lang.String;@4052c8c2,[Ljava.lang.String;@181b8c4b,[Ledu.cmu.lti.nlp.amr.Entity;@38eb0f4d))
AMR:
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2003)
(n / name, op, "Initiative")
(n / name, op, "Proliferation")
(n / name, op, "Security")
(o / organization, name, n / name)
(s / start-01, ARG1, o / organization)
(s / start-01, time, d / date-entity)

Decoded in 46,385 microseconds
Sentence: Members of the Proliferation Security Initiative are considering ways of intercepting ships or aircraft suspected of carrying weapons of mass destruction.

NER Entity: (organization :name (name :op "Proliferation" :op "Security" :op "Initiative"))
Spans:
Span 13-14:  aircraft => aircraft
Span 16-17:  carrying => carry-01
Span 7-8:  considering => consider-02
Span 20-21:  destruction => destroy-01
Span 10-11:  intercepting => intercept-01
Span 19-20:  mass => mass
Span 12-13:  or => or
Span 3-6:  Proliferation Security Initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Span 11-12:  ships => ship
Span 14-15:  suspected => suspect-01
Span 8-9:  ways => way

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 13-14:  aircraft => aircraft
Oracle Span 16-17:  carrying => carry-01
Oracle Span 7-8:  considering => consider-01
Oracle Span 20-21:  destruction => destroy-01
Oracle Span 10-11:  intercepting => intercept-01
Oracle Span 19-20:  mass => mass
Oracle Span 0-1:  Members => (have-org-role-91 :ARG2 member)
Oracle Span 12-13:  or => or
Oracle Span 3-6:  Proliferation Security Initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Oracle Span 11-12:  ships => ship
Oracle Span 14-15:  suspected => suspect-01
Oracle Span 8-9:  ways => way
Oracle Span 17-18:  weapons => weapon

Incorrect span: considering => consider-02
Missing span: considering => consider-01
Missing span: weapons => weapon
Missing span: Members => (have-org-role-91 :ARG2 member)
Dependencies:
1	Members	_	NNS	NNS	_	8	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	6	det	_	_
4	Proliferation	_	NNP	NNP	_	6	nn	_	_
5	Security	_	NNP	NNP	_	6	nn	_	_
6	Initiative	_	NNP	NNP	_	2	pobj	_	_
7	are	_	VBP	VBP	_	8	aux	_	_
8	considering	_	VBG	VBG	_	0	root	_	_
9	ways	_	NNS	NNS	_	8	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	intercepting	_	VBG	VBG	_	12	amod	_	_
12	ships	_	NNS	NNS	_	10	pobj	_	_
13	or	_	CC	CC	_	12	cc	_	_
14	aircraft	_	NN	NN	_	12	conj	_	_
15	suspected	_	VBN	VBN	_	14	vmod	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	carrying	_	VBG	VBG	_	18	amod	_	_
18	weapons	_	NNS	NNS	_	16	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	mass	_	JJ	JJ	_	21	amod	_	_
21	destruction	_	NN	NN	_	19	pobj	_	_
22	.	_	.	.	_	8	punct	_	_

Oracle:
(c / consider-01, ARG1, w / way)
(c2 / carry-01, ARG0, o2 / or)
(c2 / carry-01, ARG1, w2 / weapon)
(d / destroy-01, ARG2, w2 / weapon)
(d / destroy-01, degree, m2 / mass)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(i / intercept-01, ARG0, m / member)
(i / intercept-01, ARG1, o2 / or)
(n / name, op, "Initiative")
(n / name, op, "Proliferation")
(n / name, op, "Security")
(o / organization, name, n / name)
(o2 / or, op, a / aircraft)
(o2 / or, op, s / ship)
(s2 / suspect-01, ARG1, c2 / carry-01)
(s2 / suspect-01, ARG2, o2 / or)
(w / way, mod, i / intercept-01)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),destruction,destroy-01,false), Span(19,20,List(1),mass,mass,false), Span(16,17,List(2),carrying,carry-01,false), Span(14,15,List(3),suspected,suspect-01,false), Span(13,14,List(4),aircraft,aircraft,false), Span(12,13,List(5),or,or,false), Span(11,12,List(6),ships,ship,false), Span(10,11,List(7),intercepting,intercept-01,false), Span(8,9,List(8),ways,way,false), Span(7,8,List(9),considering,consider-02,false), Span(3,6,List(14, 13, 12, 11, 10),Proliferation Security Initiative,(organization :name (name :op "Initiative" :op "Security" :op "Proliferation")),false)),Map(2 -> carry-01, 5 -> or, 12 -> "Initiative", 8 -> way, 7 -> intercept-01, 1 -> mass, 4 -> aircraft, 11 -> name, 14 -> "Proliferation", 6 -> ship, 0 -> destroy-01, 9 -> consider-02, 3 -> suspect-01, 10 -> organization, 13 -> "Security"),Map(n -> name, w -> way, s2 -> ship, s -> suspect-01, m -> mass, d -> destroy-01, a -> aircraft, o2 -> organization, i -> intercept-01, c -> carry-01, o -> or, c2 -> consider-02))),[Ljava.lang.String;@437486cd,Annotation([Ljava.lang.String;@15b642b9,[Ljava.lang.String;@518bfd90,[Ljava.lang.String;@317a118b),Annotation([Ljava.lang.String;@56dfab87,[Ljava.lang.String;@715b886f,[Ledu.cmu.lti.nlp.amr.Dependency;@7fb29ca9),Annotation([Ljava.lang.String;@1e253c9d,[Ljava.lang.String;@350d3f4d,[Ljava.lang.String;@18b8d173),Annotation([Ljava.lang.String;@73844119,[Ljava.lang.String;@44f24a20,[Ledu.cmu.lti.nlp.amr.Entity;@1859e2a4))
AMR:
(c / carry-01, ARG1, d / destroy-01)
(c2 / consider-02, ARG1, w / way)
(d / destroy-01, ARG1, o2 / organization)
(d / destroy-01, degree, m / mass)
(i / intercept-01, ARG1, s2 / ship)
(i / intercept-01, instrument, w / way)
(n / name, op, "Initiative")
(n / name, op, "Proliferation")
(n / name, op, "Security")
(o / or, op, a / aircraft)
(o / or, op, s2 / ship)
(o2 / organization, name, n / name)
(s / suspect-01, ARG1, c / carry-01)
(s / suspect-01, ARG2, a / aircraft)

Decoded in 220,163 microseconds
Sentence: The American government has reportedly suggested the Australian military could be involved in stopping nations from transporting weapons both on the high seas and through Australian territorial waters.

NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
Spans:
Span 18-19:  both => both
Span 9-10:  could => possible
Span 11-12:  involved => involve-01
Span 14-15:  nations => nation
Span 4-5:  reportedly => report-01
Span 13-14:  stopping => stop-01
Span 5-6:  suggested => suggest-01
Span 26-27:  territorial => territory
Span 16-17:  transporting => transport-01
Span 27-28:  waters => water

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 23-24:  and => and
Oracle Span 7-8:  Australian => (country :name (name :op "Australia"))
Oracle Span 18-19:  both => both
Oracle Span 9-10:  could => possible
Oracle Span 2-3:  government => (government-organization :ARG0-of govern-01)
Oracle Span 21-22:  high => high
Oracle Span 11-12:  involved => involve-01
Oracle Span 8-9:  military => military
Oracle Span 14-15:  nations => nation
Oracle Span 4-5:  reportedly => report-01
Oracle Span 22-23:  seas => sea
Oracle Span 13-14:  stopping => stop-03
Oracle Span 5-6:  suggested => suggest-01
Oracle Span 26-27:  territorial => territory
Oracle Span 24-25:  through => through
Oracle Span 16-17:  transporting => transport-01
Oracle Span 27-28:  waters => water
Oracle Span 17-18:  weapons => weapon

Incorrect span: stopping => stop-01
Missing span: Australian => (country :name (name :op "Australia"))
Missing span: stopping => stop-03
Missing span: and => and
Missing span: through => through
Missing span: seas => sea
Missing span: high => high
Missing span: weapons => weapon
Missing span: military => military
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	American	_	JJ	JJ	_	3	amod	_	_
3	government	_	NN	NN	_	6	nsubj	_	_
4	has	_	VBZ	VBZ	_	6	aux	_	_
5	reportedly	_	RB	RB	_	6	advmod	_	_
6	suggested	_	VBN	VBN	_	0	root	_	_
7	the	_	DT	DT	_	9	det	_	_
8	Australian	_	JJ	JJ	_	9	amod	_	_
9	military	_	NN	NN	_	12	nsubjpass	_	_
10	could	_	MD	MD	_	12	aux	_	_
11	be	_	VB	VB	_	12	auxpass	_	_
12	involved	_	VBN	VBN	_	6	ccomp	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	stopping	_	VBG	VBG	_	13	pcomp	_	_
15	nations	_	NNS	NNS	_	14	dobj	_	_
16	from	_	IN	IN	_	14	prep	_	_
17	transporting	_	VBG	VBG	_	16	pcomp	_	_
18	weapons	_	NNS	NNS	_	17	dobj	_	_
19	both	_	DT	DT	_	20	preconj	_	_
20	on	_	IN	IN	_	17	prep	_	_
21	the	_	DT	DT	_	23	det	_	_
22	high	_	JJ	JJ	_	23	amod	_	_
23	seas	_	NNS	NNS	_	20	pobj	_	_
24	and	_	CC	CC	_	20	cc	_	_
25	through	_	IN	IN	_	20	conj	_	_
26	Australian	_	JJ	JJ	_	28	amod	_	_
27	territorial	_	JJ	JJ	_	28	amod	_	_
28	waters	_	NNS	NNS	_	25	pobj	_	_
29	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, mod, b / both)
(a / and, op, s3 / sea)
(a / and, op, t2 / through)
(c2 / country, name, n2 / name)
(g2 / govern-01, ARG0, g / government-organization)
(i / involve-01, ARG1, m / military)
(i / involve-01, ARG2, s2 / stop-03)
(m / military, mod, c2 / country)
(n2 / name, op, "Australia")
(p / possible, domain, i / involve-01)
(s / suggest-01, ARG0, g / government-organization)
(s / suggest-01, ARG1, p / possible)
(s / suggest-01, manner, r / report-01)
(s2 / stop-03, ARG0, m / military)
(s2 / stop-03, ARG1, n3 / nation)
(s2 / stop-03, ARG2, t / transport-01)
(s3 / sea, mod, h / high)
(t / transport-01, ARG0, n3 / nation)
(t / transport-01, ARG1, w / weapon)
(t / transport-01, ARG2, a / and)
(t2 / through, path, w2 / water)
(t3 / territory, mod, c2 / country)
(w2 / water, mod, t3 / territory)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),waters,water,false), Span(26,27,List(1),territorial,territory,false), Span(18,19,List(2),both,both,false), Span(16,17,List(3),transporting,transport-01,false), Span(14,15,List(4),nations,nation,false), Span(13,14,List(5),stopping,stop-01,false), Span(11,12,List(6),involved,involve-01,false), Span(9,10,List(7),could,possible,false), Span(5,6,List(8),suggested,suggest-01,false), Span(4,5,List(9),reportedly,report-01,false)),Map(2 -> both, 5 -> stop-01, 8 -> suggest-01, 7 -> possible, 1 -> territory, 4 -> nation, 6 -> involve-01, 9 -> report-01, 0 -> water, 3 -> transport-01),Map(n -> nation, w -> water, s2 -> suggest-01, b -> both, t -> territory, s -> stop-01, p -> possible, t2 -> transport-01, r -> report-01, i -> involve-01))),[Ljava.lang.String;@46349b95,Annotation([Ljava.lang.String;@176996c3,[Ljava.lang.String;@411c6d44,[Ljava.lang.String;@1687eb01),Annotation([Ljava.lang.String;@748d2277,[Ljava.lang.String;@2f897dab,[Ledu.cmu.lti.nlp.amr.Dependency;@d5d5353),Annotation([Ljava.lang.String;@242b6e1a,[Ljava.lang.String;@39a87e72,[Ljava.lang.String;@5d2828c9),Annotation([Ljava.lang.String;@3a082ff4,[Ljava.lang.String;@45acdd11,[Ledu.cmu.lti.nlp.amr.Entity;@3f0d6038))
AMR:
(i / involve-01, ARG2, s / stop-01)
(n / nation, mod, t / territory)
(p / possible, domain, i / involve-01)
(r / report-01, ARG1, s2 / suggest-01)
(s / stop-01, ARG1, n / nation)
(s / stop-01, manner, t2 / transport-01)
(s2 / suggest-01, ARG1, p / possible)
(t2 / transport-01, ARG1, b / both)
(w / water, mod, t / territory)

Decoded in 419,483 microseconds
Sentence: 2003-11-07

mkDayMonthYear(2003-11-07,07,11,2003)
mkDayMonthYear(2003-11-07,07,11,2003)
Spans:
Span 0-1:  2003-11-07 => (date-entity :day 7 :month 11 :year 2003)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2003-11-07 => (date-entity :day 7 :month 11 :year 2003)

Dependencies:
1	2003-11-07	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 7)
(d / date-entity, month, 11)
(d / date-entity, year, 2003)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2003-11-07,(date-entity :day 7 :month 11 :year 2003),false)),Map(2 -> 11, 1 -> 7, 0 -> date-entity, 3 -> 2003),Map(2 -> 2003, 7 -> 7, d -> date-entity, 1 -> 11))),[Ljava.lang.String;@237f7970,Annotation([Ljava.lang.String;@58f39564,[Ljava.lang.String;@7b948f3e,[Ljava.lang.String;@2f4c2cd4),Annotation([Ljava.lang.String;@77a074b4,[Ljava.lang.String;@333c8791,[Ledu.cmu.lti.nlp.amr.Dependency;@6c0e13b7),Annotation([Ljava.lang.String;@22eaa86e,[Ljava.lang.String;@561b7d53,[Ljava.lang.String;@1cc680e),Annotation([Ljava.lang.String;@1dc3502b,[Ljava.lang.String;@6a1d3225,[Ledu.cmu.lti.nlp.amr.Entity;@67e13bd0))
AMR:
(d / date-entity, day, 7 / 7)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2003)

Decoded in 8,424 microseconds
Sentence: South Africa (ZA); Brazil (BR); India (IN)

NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (organization :name (name :op "BR"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "IN"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 10-11:  ; => and
Span 5-6:  ; => and
Span 6-7:  Brazil => (country :name (name :op "Brazil"))
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  ; => and
Oracle Span 6-7:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 11-12:  India => (country :name (name :op "India"))
Oracle Span 0-2:  South Africa => (country :name (name :op "Africa" :op "South"))

Extra span: ; => and
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: India => (country :name (name :op "India"))
Dependencies:
1	South	_	NNP	NNP	_	2	nn	_	_
2	Africa	_	NNP	NNP	_	0	root	_	_
3	(	_	(	(	_	4	punct	_	_
4	ZA	_	NNP	NNP	_	2	appos	_	_
5	)	_	)	)	_	4	punct	_	_
6	;	_	:	:	_	2	punct	_	_
7	Brazil	_	NNP	NNP	_	2	dep	_	_
8	(	_	(	(	_	9	punct	_	_
9	BR	_	NNP	NNP	_	7	appos	_	_
10	)	_	)	)	_	9	punct	_	_
11	;	_	:	:	_	7	punct	_	_
12	India	_	NNP	NNP	_	7	dep	_	_
13	(	_	(	(	_	14	punct	_	_
14	IN	_	IN	IN	_	12	prep	_	_
15	)	_	)	)	_	14	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(n / name, op, "Africa")
(n / name, op, "South")
(n2 / name, op, "Brazil")
(n3 / name, op, "India")

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),;,and,false), Span(6,7,List(3, 2, 1),Brazil,(country :name (name :op "Brazil")),false), Span(5,6,List(4),;,and,false), Span(0,2,List(8, 7, 6, 5),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(2 -> name, 5 -> country, 8 -> "Africa", 7 -> "South", 1 -> country, 4 -> and, 6 -> name, 0 -> and, 3 -> "Brazil"),Map(n -> name, a -> and, a2 -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@50fb33a,Annotation([Ljava.lang.String;@2cae9b8,[Ljava.lang.String;@1457fde,[Ljava.lang.String;@6f94fb9d),Annotation([Ljava.lang.String;@17fa1336,[Ljava.lang.String;@4228bf58,[Ledu.cmu.lti.nlp.amr.Dependency;@68b9834c),Annotation([Ljava.lang.String;@20b9d5d5,[Ljava.lang.String;@671d1157,[Ljava.lang.String;@60c8a093),Annotation([Ljava.lang.String;@44cffc25,[Ljava.lang.String;@2a369e14,[Ledu.cmu.lti.nlp.amr.Entity;@25aeb5ac))
AMR:
(a / and, op, c2 / country)
(a2 / and, op, a / and)
(a2 / and, op, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Brazil")
(n2 / name, op, "Africa")
(n2 / name, op, "South")

Decoded in 40,159 microseconds
Sentence: International; politics

Spans:
Span 1-2:  ; => and
Span 2-3:  politics => politics

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 0-1:  International => international
Oracle Span 2-3:  politics => politics

Missing span: International => international
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	politics	_	NNS	NNS	_	1	dep	_	_

Oracle:
(a / and, op, i / international)
(a / and, op, p / politics)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),politics,politics,false), Span(1,2,List(1),;,and,false)),Map(1 -> and, 0 -> politics),Map(p -> politics, a -> and))),[Ljava.lang.String;@c755b2,Annotation([Ljava.lang.String;@3bd2af5b,[Ljava.lang.String;@250a500b,[Ljava.lang.String;@75d982d3),Annotation([Ljava.lang.String;@4f89331f,[Ljava.lang.String;@618ff5c2,[Ledu.cmu.lti.nlp.amr.Dependency;@16727bf0),Annotation([Ljava.lang.String;@2f84acf7,[Ljava.lang.String;@291373d3,[Ljava.lang.String;@372ca2d6),Annotation([Ljava.lang.String;@3204e238,[Ljava.lang.String;@38ed139b,[Ledu.cmu.lti.nlp.amr.Entity;@a5272be))
AMR:
(a / and, op, p / politics)

Decoded in 5,216 microseconds
Sentence: Brazilian President Lula da Silva arrived in Pretoria, South Africa on 031107 for bilateral political and economic discussions with South African President Thabo Mbeki scheduled for 031108.

NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (country :name (name :op "Pretoria"))
NER Entity: (country :name (name :op "South" :op "Africa"))
mkDayMonthYear(031107,07,11,2003)
mkDayMonthYear(031107,07,11,03)
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (person :name (name :op "Thabo" :op "Mbeki"))
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
mkDayMonthYear(031107,07,11,2003)
mkDayMonthYear(031107,07,11,03)
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 12-13:  031107 => (date-entity :day 7 :month 11 :year 03)
Span 27-28:  031108 => (date-entity :day 8 :month 11 :year 03)
Span 5-6:  arrived => arrive-01
Span 14-15:  bilateral => bilateral
Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Span 18-19:  discussions => discuss-01
Span 17-18:  economic => economy
Span 2-5:  Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Span 22-23:  President => (have-org-role-91 :ARG2 president)
Span 1-2:  President => (have-org-role-91 :ARG2 president)
Span 25-26:  scheduled => schedule-01
Span 9-11:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 20-22:  South African => (thing :name (name :op "South" :op "African"))
Span 23-25:  Thabo Mbeki => (person :name (name :op "Mbeki" :op "Thabo"))

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 12-13:  031107 => (date-entity :day 7 :month 11 :year 2003)
Oracle Span 27-28:  031108 => (date-entity :day 8 :month 11 :year 2003)
Oracle Span 16-17:  and => and
Oracle Span 5-6:  arrived => arrive-01
Oracle Span 14-15:  bilateral => bilateral
Oracle Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 18-19:  discussions => discuss-01
Oracle Span 17-18:  economic => economy
Oracle Span 2-5:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Oracle Span 15-16:  political => politics
Oracle Span 1-2:  President => (have-org-role-91 :ARG2 president)
Oracle Span 22-23:  President => (have-org-role-91 :ARG2 president)
Oracle Span 7-8:  Pretoria => (city :name (name :op "Pretoria"))
Oracle Span 25-26:  scheduled => schedule-01
Oracle Span 9-11:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 23-25:  Thabo Mbeki => (person :name (name :op "Mbeki" :op "Thabo"))

Incorrect span: 031108 => (date-entity :day 8 :month 11 :year 03)
Extra span: South African => (thing :name (name :op "South" :op "African"))
Incorrect span: 031107 => (date-entity :day 7 :month 11 :year 03)
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Incorrect span: Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Missing span: Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Missing span: Pretoria => (city :name (name :op "Pretoria"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: 031107 => (date-entity :day 7 :month 11 :year 2003)
Missing span: 031108 => (date-entity :day 8 :month 11 :year 2003)
Missing span: and => and
Missing span: political => politics
Dependencies:
1	Brazilian	_	JJ	JJ	_	5	amod	_	_
2	President	_	NNP	NNP	_	5	nn	_	_
3	Lula	_	NNP	NNP	_	5	nn	_	_
4	da	_	NNP	NNP	_	5	nn	_	_
5	Silva	_	NNP	NNP	_	6	nsubj	_	_
6	arrived	_	VBD	VBD	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	Pretoria	_	NNP	NNP	_	7	pobj	_	_
9	,	_	,	,	_	8	punct	_	_
10	South	_	NNP	NNP	_	11	nn	_	_
11	Africa	_	NNP	NNP	_	8	appos	_	_
12	on	_	IN	IN	_	11	prep	_	_
13	031107	_	CD	CD	_	12	pobj	_	_
14	for	_	IN	IN	_	6	prep	_	_
15	bilateral	_	JJ	JJ	_	16	amod	_	_
16	political	_	JJ	JJ	_	14	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	economic	_	JJ	JJ	_	19	amod	_	_
19	discussions	_	NNS	NNS	_	16	conj	_	_
20	with	_	IN	IN	_	6	prep	_	_
21	South	_	NNP	NNP	_	25	nn	_	_
22	African	_	NNP	NNP	_	25	nn	_	_
23	President	_	NNP	NNP	_	25	nn	_	_
24	Thabo	_	NNP	NNP	_	25	nn	_	_
25	Mbeki	_	NNP	NNP	_	20	pobj	_	_
26	scheduled	_	VBN	VBN	_	25	vmod	_	_
27	for	_	IN	IN	_	26	prep	_	_
28	031108	_	CD	CD	_	27	pobj	_	_
29	.	_	.	.	_	6	punct	_	_

Oracle:
(a / arrive-01, ARG1, p / person)
(a / arrive-01, ARG4, c2 / city)
(a / arrive-01, purpose, d2 / discuss-01)
(a / arrive-01, time, d / date-entity)
(a2 / and, mod, b / bilateral)
(a2 / and, op, e / economy)
(a2 / and, op, p5 / politics)
(c / country, name, n2 / name)
(c2 / city, location, c3 / country)
(c2 / city, name, n3 / name)
(c3 / country, name, n4 / name)
(d / date-entity, day, 7)
(d / date-entity, month, 11)
(d / date-entity, year, 2003)
(d2 / discuss-01, ARG0, p / person)
(d2 / discuss-01, ARG1, a2 / and)
(d2 / discuss-01, ARG2, p3 / person)
(d3 / date-entity, day, 8)
(d3 / date-entity, month, 11)
(d3 / date-entity, year, 2003)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, c3 / country)
(h2 / have-org-role-91, ARG2, p4 / president)
(n / name, op, "Lula")
(n / name, op, "Silva")
(n / name, op, "da")
(n2 / name, op, "Brazil")
(n3 / name, op, "Pretoria")
(n4 / name, op, "Africa")
(n4 / name, op, "South")
(n5 / name, op, "Mbeki")
(n5 / name, op, "Thabo")
(p / person, name, n / name)
(p3 / person, name, n5 / name)
(s / schedule-01, ARG1, d2 / discuss-01)
(s / schedule-01, ARG3, d3 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(3, 2, 1, 0),031108,(date-entity :day 8 :month 11 :year 03),false), Span(25,26,List(4),scheduled,schedule-01,false), Span(23,25,List(8, 7, 6, 5),Thabo Mbeki,(person :name (name :op "Mbeki" :op "Thabo")),false), Span(22,23,List(10, 9),President,(have-org-role-91 :ARG2 president),false), Span(20,22,List(14, 13, 12, 11),South African,(thing :name (name :op "South" :op "African")),false), Span(18,19,List(15),discussions,discuss-01,false), Span(17,18,List(16),economic,economy,false), Span(14,15,List(17),bilateral,bilateral,false), Span(12,13,List(21, 20, 19, 18),031107,(date-entity :day 7 :month 11 :year 03),false), Span(9,11,List(25, 24, 23, 22),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(5,6,List(26),arrived,arrive-01,false), Span(2,5,List(31, 30, 29, 28, 27),Lula da Silva,(person :name (name :op "Lula" :op "da" :op "Silva")),false), Span(1,2,List(33, 32),President,(have-org-role-91 :ARG2 president),false), Span(0,1,List(36, 35, 34),Brazilian,(country :name (name :op "Brazil")),false)),Map(30 -> "da", 2 -> 11, 5 -> person, 33 -> president, 27 -> person, 12 -> name, 8 -> "Thabo", 15 -> discuss-01, 36 -> "Brazil", 21 -> 03, 18 -> date-entity, 24 -> "South", 35 -> name, 7 -> "Mbeki", 1 -> 8, 17 -> bilateral, 23 -> name, 26 -> arrive-01, 4 -> schedule-01, 11 -> thing, 32 -> have-org-role-91, 14 -> "African", 29 -> "Lula", 20 -> 11, 34 -> country, 28 -> name, 6 -> name, 9 -> have-org-role-91, 0 -> date-entity, 22 -> country, 16 -> economy, 19 -> 7, 10 -> president, 3 -> 03, 31 -> "Silva", 25 -> "Africa", 13 -> "South"),Map(e -> economy, n -> name, h -> have-org-role-91, h2 -> have-org-role-91, t -> thing, 12 -> 11, b -> bilateral, 8 -> 8, d3 -> date-entity, p2 -> president, n4 -> name, s -> schedule-01, d -> date-entity, 7 -> 7, 1 -> 11, p -> person, n3 -> name, a -> arrive-01, p4 -> president, d2 -> discuss-01, 02 -> 03, c -> country, 0 -> 03, p3 -> person, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@58ba5b30,Annotation([Ljava.lang.String;@4dba773d,[Ljava.lang.String;@1d9bd4da,[Ljava.lang.String;@4c58255),Annotation([Ljava.lang.String;@eac3a26,[Ljava.lang.String;@10b1a751,[Ledu.cmu.lti.nlp.amr.Dependency;@53cf9c99),Annotation([Ljava.lang.String;@7b306b9f,[Ljava.lang.String;@142213d5,[Ljava.lang.String;@934b52f),Annotation([Ljava.lang.String;@2630dbc4,[Ljava.lang.String;@5ea4300e,[Ledu.cmu.lti.nlp.amr.Entity;@5a1c3cb4))
AMR:
(a / arrive-01, ARG0, d3 / date-entity)
(a / arrive-01, ARG1, p3 / person)
(a / arrive-01, ARG2, p / person)
(c / country, name, n3 / name)
(c2 / country, name, n5 / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 0 / 03)
(d2 / discuss-01, ARG0, c / country)
(d2 / discuss-01, ARG1, b / bilateral)
(d2 / discuss-01, ARG2, p / person)
(d2 / discuss-01, mod, e / economy)
(d3 / date-entity, day, 7 / 7)
(d3 / date-entity, month, 12 / 11)
(d3 / date-entity, year, 02 / 03)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, t / thing)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, p4 / president)
(n / name, op, "Mbeki")
(n / name, op, "Thabo")
(n2 / name, op, "African")
(n2 / name, op, "South")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Lula")
(n4 / name, op, "Silva")
(n4 / name, op, "da")
(n5 / name, op, "Brazil")
(p / person, name, n / name)
(p3 / person, name, n4 / name)
(s / schedule-01, ARG1, p / person)
(s / schedule-01, ARG3, d / date-entity)
(t / thing, name, n2 / name)

Decoded in 1,910,620 microseconds
Sentence: The South African Press Association reported on 031108 that the Brazilian President Lula da Silva arrived in Pretoria, South Africa on the evening of 031107 for bilateral political and economic discussions scheduled for the morning of 031108 with South African President Thabo Mbeki.

NER Entity: (thing :name (name :op "South"))
NER Entity: (organization :name (name :op "African" :op "Press" :op "Association"))
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (country :name (name :op "Pretoria"))
NER Entity: (country :name (name :op "South" :op "Africa"))
mkDayMonthYear(031107,07,11,2003)
mkDayMonthYear(031107,07,11,03)
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (person :name (name :op "Thabo" :op "Mbeki"))
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
mkDayMonthYear(031107,07,11,2003)
mkDayMonthYear(031107,07,11,03)
NER Entity: (thing :name (name :op "Brazilian"))
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
Spans:
Span 25-26:  031107 => (date-entity :day 7 :month 11 :year 03)
Span 37-38:  031108 => (date-entity :day 8 :month 11 :year 03)
Span 7-8:  031108 => (date-entity :day 8 :month 11 :year 03)
Span 2-5:  African Press Association => (organization :name (name :op "African" :op "Press" :op "Association"))
Span 15-16:  arrived => arrive-01
Span 27-28:  bilateral => bilateral
Span 10-11:  Brazilian => (country :name (name :op "Brazil"))
Span 31-32:  discussions => discuss-01
Span 30-31:  economic => economy
Span 23-24:  evening => evening
Span 12-15:  Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Span 35-36:  morning => morning
Span 41-42:  President => (have-org-role-91 :ARG2 president)
Span 11-12:  President => (have-org-role-91 :ARG2 president)
Span 5-6:  reported => report-01
Span 32-33:  scheduled => schedule-01
Span 19-21:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 39-41:  South African => (thing :name (name :op "South" :op "African"))
Span 42-44:  Thabo Mbeki => (person :name (name :op "Mbeki" :op "Thabo"))

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 7-8:  031108 => (date-entity :day 8 :month 11 :year 2003)
Oracle Span 37-38:  031108 => (date-entity :day 7 :month 11 :day 8 :month 11 :year 2003)
Oracle Span 29-30:  and => and
Oracle Span 15-16:  arrived => arrive-01
Oracle Span 27-28:  bilateral => bilateral
Oracle Span 10-11:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 31-32:  discussions => discuss-01
Oracle Span 30-31:  economic => economy
Oracle Span 23-24:  evening => evening
Oracle Span 12-15:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Oracle Span 35-36:  morning => morning
Oracle Span 28-29:  political => politics
Oracle Span 11-12:  President => (have-org-role-91 :ARG2 president)
Oracle Span 41-42:  President => (have-org-role-91 :ARG2 president)
Oracle Span 17-18:  Pretoria => (city :name (name :op "Pretoria"))
Oracle Span 5-6:  reported => report-01
Oracle Span 32-33:  scheduled => schedule-01
Oracle Span 19-21:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 1-5:  South African Press Association => (organization :name (name :op "Association" :op "Press" :op "African" :op "South"))
Oracle Span 42-44:  Thabo Mbeki => (person :name (name :op "Mbeki" :op "Thabo"))

Extra span: South African => (thing :name (name :op "South" :op "African"))
Incorrect span: 031108 => (date-entity :day 8 :month 11 :year 03)
Extra span: 031107 => (date-entity :day 7 :month 11 :year 03)
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Incorrect span: Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Incorrect span: 031108 => (date-entity :day 8 :month 11 :year 03)
Extra span: African Press Association => (organization :name (name :op "African" :op "Press" :op "Association"))
Missing span: South African Press Association => (organization :name (name :op "Association" :op "Press" :op "African" :op "South"))
Missing span: Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Missing span: Pretoria => (city :name (name :op "Pretoria"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: 031108 => (date-entity :day 8 :month 11 :year 2003)
Missing span: 031108 => (date-entity :day 7 :month 11 :day 8 :month 11 :year 2003)
Missing span: and => and
Missing span: political => politics
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	South	_	NNP	NNP	_	5	nn	_	_
3	African	_	NNP	NNP	_	5	nn	_	_
4	Press	_	NNP	NNP	_	5	nn	_	_
5	Association	_	NNP	NNP	_	6	nsubj	_	_
6	reported	_	VBD	VBD	_	0	root	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	031108	_	CD	CD	_	7	pobj	_	_
9	that	_	IN	IN	_	16	mark	_	_
10	the	_	DT	DT	_	15	det	_	_
11	Brazilian	_	JJ	JJ	_	15	amod	_	_
12	President	_	NNP	NNP	_	15	nn	_	_
13	Lula	_	NNP	NNP	_	15	nn	_	_
14	da	_	NNP	NNP	_	15	nn	_	_
15	Silva	_	NNP	NNP	_	16	nsubj	_	_
16	arrived	_	VBD	VBD	_	6	ccomp	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	Pretoria	_	NNP	NNP	_	17	pobj	_	_
19	,	_	,	,	_	18	punct	_	_
20	South	_	NNP	NNP	_	21	nn	_	_
21	Africa	_	NNP	NNP	_	18	appos	_	_
22	on	_	IN	IN	_	16	prep	_	_
23	the	_	DT	DT	_	24	det	_	_
24	evening	_	NN	NN	_	22	pobj	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	031107	_	CD	CD	_	25	pobj	_	_
27	for	_	IN	IN	_	16	prep	_	_
28	bilateral	_	JJ	JJ	_	29	amod	_	_
29	political	_	JJ	JJ	_	27	pobj	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	economic	_	JJ	JJ	_	32	amod	_	_
32	discussions	_	NNS	NNS	_	29	conj	_	_
33	scheduled	_	VBN	VBN	_	29	vmod	_	_
34	for	_	IN	IN	_	33	prep	_	_
35	the	_	DT	DT	_	36	det	_	_
36	morning	_	NN	NN	_	34	pobj	_	_
37	of	_	IN	IN	_	36	prep	_	_
38	031108	_	CD	CD	_	37	pobj	_	_
39	with	_	IN	IN	_	33	prep	_	_
40	South	_	NNP	NNP	_	44	nn	_	_
41	African	_	NNP	NNP	_	44	nn	_	_
42	President	_	NNP	NNP	_	44	nn	_	_
43	Thabo	_	NNP	NNP	_	44	nn	_	_
44	Mbeki	_	NNP	NNP	_	39	pobj	_	_
45	.	_	.	.	_	6	punct	_	_

Oracle:
(a / arrive-01, ARG1, p / person)
(a / arrive-01, ARG4, c2 / city)
(a / arrive-01, purpose, d3 / discuss-01)
(a2 / and, mod, b / bilateral)
(a2 / and, op, e2 / economy)
(a2 / and, op, p5 / politics)
(c / country, name, n3 / name)
(c2 / city, location, c3 / country)
(c2 / city, name, n4 / name)
(c3 / country, name, n5 / name)
(d / date-entity, day, 7)
(d / date-entity, day, 8)
(d / date-entity, month, 11)
(d / date-entity, month, 11)
(d / date-entity, year, 2003)
(d3 / discuss-01, ARG0, p / person)
(d3 / discuss-01, ARG1, a2 / and)
(d3 / discuss-01, ARG2, p3 / person)
(d4 / date-entity, day, 8)
(d4 / date-entity, dayperiod, m / morning)
(d4 / date-entity, month, 11)
(d4 / date-entity, year, 2003)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, c3 / country)
(h2 / have-org-role-91, ARG2, p4 / president)
(n / name, op, "African")
(n / name, op, "Association")
(n / name, op, "Press")
(n / name, op, "South")
(n2 / name, op, "Lula")
(n2 / name, op, "Silva")
(n2 / name, op, "da")
(n3 / name, op, "Brazil")
(n4 / name, op, "Pretoria")
(n5 / name, op, "Africa")
(n5 / name, op, "South")
(n6 / name, op, "Mbeki")
(n6 / name, op, "Thabo")
(o / organization, name, n / name)
(p / person, name, n2 / name)
(p3 / person, name, n6 / name)
(r / report-01, ARG0, o / organization)
(r / report-01, ARG1, a / arrive-01)
(r / report-01, time, d / date-entity)
(s / schedule-01, ARG1, d3 / discuss-01)
(s / schedule-01, ARG2, d4 / date-entity)

Input(Some(Graph(null,ArrayBuffer(Span(42,44,List(3, 2, 1, 0),Thabo Mbeki,(person :name (name :op "Mbeki" :op "Thabo")),false), Span(41,42,List(5, 4),President,(have-org-role-91 :ARG2 president),false), Span(39,41,List(9, 8, 7, 6),South African,(thing :name (name :op "South" :op "African")),false), Span(37,38,List(13, 12, 11, 10),031108,(date-entity :day 8 :month 11 :year 03),false), Span(35,36,List(14),morning,morning,false), Span(32,33,List(15),scheduled,schedule-01,false), Span(31,32,List(16),discussions,discuss-01,false), Span(30,31,List(17),economic,economy,false), Span(27,28,List(18),bilateral,bilateral,false), Span(25,26,List(22, 21, 20, 19),031107,(date-entity :day 7 :month 11 :year 03),false), Span(23,24,List(23),evening,evening,false), Span(19,21,List(27, 26, 25, 24),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(15,16,List(28),arrived,arrive-01,false), Span(12,15,List(33, 32, 31, 30, 29),Lula da Silva,(person :name (name :op "Lula" :op "da" :op "Silva")),false), Span(11,12,List(35, 34),President,(have-org-role-91 :ARG2 president),false), Span(10,11,List(38, 37, 36),Brazilian,(country :name (name :op "Brazil")),false), Span(7,8,List(42, 41, 40, 39),031108,(date-entity :day 8 :month 11 :year 03),false), Span(5,6,List(43),reported,report-01,false), Span(2,5,List(48, 47, 46, 45, 44),African Press Association,(organization :name (name :op "African" :op "Press" :op "Association")),false)),Map(30 -> name, 39 -> date-entity, 45 -> name, 2 -> "Mbeki", 5 -> president, 48 -> "Association", 33 -> "Silva", 27 -> "Africa", 12 -> 11, 8 -> "South", 15 -> schedule-01, 42 -> 03, 36 -> country, 21 -> 11, 18 -> bilateral, 24 -> country, 35 -> president, 41 -> 11, 7 -> name, 17 -> economy, 1 -> name, 44 -> organization, 23 -> evening, 38 -> "Brazil", 47 -> "Press", 4 -> have-org-role-91, 26 -> "South", 11 -> 8, 32 -> "da", 14 -> morning, 20 -> 7, 29 -> person, 46 -> "African", 34 -> have-org-role-91, 6 -> thing, 28 -> arrive-01, 40 -> 8, 0 -> person, 9 -> "African", 43 -> report-01, 22 -> 03, 16 -> discuss-01, 37 -> name, 19 -> date-entity, 3 -> "Thabo", 10 -> date-entity, 25 -> name, 31 -> "Lula", 13 -> 03),Map(e -> economy, n -> name, h -> have-org-role-91, h2 -> have-org-role-91, t -> thing, 12 -> 11, b -> bilateral, 8 -> 8, d3 -> date-entity, 03 -> 03, p2 -> president, e2 -> evening, n4 -> name, s -> schedule-01, m -> morning, d -> date-entity, 7 -> 7, 1 -> 11, p -> person, n3 -> name, a -> arrive-01, p4 -> president, n6 -> name, d2 -> discuss-01, 82 -> 8, 02 -> 03, r -> report-01, c -> country, d4 -> date-entity, 0 -> 03, o -> organization, p3 -> person, c2 -> country, n2 -> name, 13 -> 11, n5 -> name))),[Ljava.lang.String;@76ad6715,Annotation([Ljava.lang.String;@56637cff,[Ljava.lang.String;@2938127d,[Ljava.lang.String;@127a7272),Annotation([Ljava.lang.String;@ff23ae7,[Ljava.lang.String;@423b2b62,[Ledu.cmu.lti.nlp.amr.Dependency;@2b7962a2),Annotation([Ljava.lang.String;@6ad16c5d,[Ljava.lang.String;@74ea46e2,[Ljava.lang.String;@6f911326),Annotation([Ljava.lang.String;@f1d0004,[Ljava.lang.String;@6e4f263e,[Ledu.cmu.lti.nlp.amr.Entity;@48b4a043))
AMR:
(a / arrive-01, ARG0, e2 / evening)
(a / arrive-01, ARG1, p3 / person)
(c / country, name, n3 / name)
(c2 / country, name, n5 / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, dayperiod, m / morning)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 0 / 03)
(d2 / discuss-01, ARG0, c / country)
(d2 / discuss-01, ARG1, b / bilateral)
(d2 / discuss-01, ARG2, p3 / person)
(d2 / discuss-01, mod, e / economy)
(d3 / date-entity, day, 7 / 7)
(d3 / date-entity, month, 12 / 11)
(d3 / date-entity, year, 02 / 03)
(d4 / date-entity, day, 82 / 8)
(d4 / date-entity, month, 13 / 11)
(d4 / date-entity, year, 03 / 03)
(e2 / evening, time, d3 / date-entity)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, t / thing)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, p4 / president)
(n / name, op, "Mbeki")
(n / name, op, "Thabo")
(n2 / name, op, "African")
(n2 / name, op, "South")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Lula")
(n4 / name, op, "Silva")
(n4 / name, op, "da")
(n5 / name, op, "Brazil")
(n6 / name, op, "African")
(n6 / name, op, "Association")
(n6 / name, op, "Press")
(o / organization, name, n6 / name)
(p / person, name, n / name)
(p3 / person, name, n4 / name)
(r / report-01, ARG0, o / organization)
(r / report-01, ARG1, a / arrive-01)
(r / report-01, time, d4 / date-entity)
(s / schedule-01, ARG0, m / morning)
(s / schedule-01, ARG1, d2 / discuss-01)
(s / schedule-01, ARG3, p / person)
(t / thing, name, n2 / name)

Decoded in 3,093,944 microseconds
Sentence: The discussions will be held in Pretoria, South Africa.

NER Entity: (country :name (name :op "Pretoria"))
NER Entity: (country :name (name :op "South" :op "Africa"))
Spans:
Span 1-2:  discussions => discuss-01
Span 8-10:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  discussions => discuss-01
Oracle Span 4-5:  held => hold-04
Oracle Span 6-7:  Pretoria => (city :name (name :op "Pretoria"))
Oracle Span 8-10:  South Africa => (country :name (name :op "Africa" :op "South"))

Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Missing span: Pretoria => (city :name (name :op "Pretoria"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: held => hold-04
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	discussions	_	NNS	NNS	_	5	nsubjpass	_	_
3	will	_	MD	MD	_	5	aux	_	_
4	be	_	VB	VB	_	5	auxpass	_	_
5	held	_	VBN	VBN	_	0	root	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	Pretoria	_	NNP	NNP	_	6	pobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	South	_	NNP	NNP	_	10	nn	_	_
10	Africa	_	NNP	NNP	_	7	appos	_	_
11	.	_	.	.	_	5	punct	_	_

Oracle:
(c / city, location, c2 / country)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(h / hold-04, ARG1, d / discuss-01)
(h / hold-04, location, c / city)
(n / name, op, "Pretoria")
(n2 / name, op, "Africa")
(n2 / name, op, "South")

Input(Some(Graph(null,ArrayBuffer(Span(8,10,List(3, 2, 1, 0),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(1,2,List(4),discussions,discuss-01,false)),Map(2 -> "South", 1 -> name, 4 -> discuss-01, 0 -> country, 3 -> "Africa"),Map(n -> name, d -> discuss-01, c -> country))),[Ljava.lang.String;@2f5b8250,Annotation([Ljava.lang.String;@4821aa9f,[Ljava.lang.String;@5f481b73,[Ljava.lang.String;@32130e61),Annotation([Ljava.lang.String;@41294371,[Ljava.lang.String;@4996c99,[Ledu.cmu.lti.nlp.amr.Dependency;@1b956cfa),Annotation([Ljava.lang.String;@315f09ef,[Ljava.lang.String;@3a66e67e,[Ljava.lang.String;@75d4a80f),Annotation([Ljava.lang.String;@4596f8f3,[Ljava.lang.String;@ccf91df,[Ledu.cmu.lti.nlp.amr.Entity;@117d32e))
AMR:
(c / country, name, n / name)
(d / discuss-01, ARG0, c / country)
(n / name, op, "Africa")
(n / name, op, "South")

Decoded in 20,197 microseconds
Sentence: South African foreign affairs spokeswoman manusha Pillay stated that Lula da Silva's aircraft landed at Waterkloof Air Force base shortly after 1730 Greenwich Mean Time.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (person :name (name :op "Pillay"))
NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (thing :name (name :op "Waterkloof"))
NER Entity: (organization :name (name :op "Air" :op "Force"))
NER Entity: (organization :name (name :op "Greenwich" :op "Mean" :op "Time"))
Spans:
Span 22-23:  1730 => (date-entity :year 1730)
Span 3-4:  affairs => affair
Span 21-22:  after => after
Span 17-19:  Air Force => (military :name (name :op "Force" :op "Air"))
Span 13-14:  aircraft => aircraft
Span 23-26:  Greenwich Mean Time => (organization :name (name :op "Greenwich" :op "Mean" :op "Time"))
Span 9-12:  Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Span 0-2:  South African => (thing :name (name :op "South" :op "African"))
Span 4-5:  spokeswoman => (have-org-role-91 :ARG2 spokeswoman)

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 3-4:  affairs => affair
Oracle Span 21-22:  after => after
Oracle Span 13-14:  aircraft => aircraft
Oracle Span 19-20:  base => base
Oracle Span 2-3:  foreign => foreign
Oracle Span 14-15:  landed => land-01
Oracle Span 9-12:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Oracle Span 5-7:  manusha Pillay => (person :name (name :op "Pillay" :op "Manusha"))
Oracle Span 20-21:  shortly => short
Oracle Span 0-2:  South African => (country :name (name :op "Africa" :op "South"))
Oracle Span 4-5:  spokeswoman => (have-org-role-91 :ARG2 spokeswoman)
Oracle Span 7-8:  stated => state-01
Oracle Span 16-19:  Waterkloof Air Force => (airport :name (name :op "Force" :op "Air" :op "Waterkloof"))

Extra span: Greenwich Mean Time => (organization :name (name :op "Greenwich" :op "Mean" :op "Time"))
Extra span: 1730 => (date-entity :year 1730)
Extra span: Air Force => (military :name (name :op "Force" :op "Air"))
Incorrect span: Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Incorrect span: South African => (thing :name (name :op "South" :op "African"))
Missing span: manusha Pillay => (person :name (name :op "Pillay" :op "Manusha"))
Missing span: Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Missing span: Waterkloof Air Force => (airport :name (name :op "Force" :op "Air" :op "Waterkloof"))
Missing span: South African => (country :name (name :op "Africa" :op "South"))
Missing span: stated => state-01
Missing span: landed => land-01
Missing span: base => base
Missing span: foreign => foreign
Missing span: shortly => short
Dependencies:
1	South	_	NNP	NNP	_	2	amod	_	_
2	African	_	JJ	JJ	_	7	amod	_	_
3	foreign	_	JJ	JJ	_	7	amod	_	_
4	affairs	_	NNS	NNS	_	7	nn	_	_
5	spokeswoman	_	NN	NN	_	7	nn	_	_
6	manusha	_	JJ	JJ	_	7	amod	_	_
7	Pillay	_	NN	NN	_	8	nsubj	_	_
8	stated	_	VBD	VBD	_	0	root	_	_
9	that	_	IN	IN	_	15	mark	_	_
10	Lula	_	NNP	NNP	_	12	nn	_	_
11	da	_	NNP	NNP	_	12	nn	_	_
12	Silva	_	NNP	NNP	_	14	poss	_	_
13	's	_	POS	POS	_	12	possessive	_	_
14	aircraft	_	NN	NN	_	15	nsubj	_	_
15	landed	_	VBD	VBD	_	8	ccomp	_	_
16	at	_	IN	IN	_	15	prep	_	_
17	Waterkloof	_	NNP	NNP	_	20	nn	_	_
18	Air	_	NNP	NNP	_	20	nn	_	_
19	Force	_	NNP	NNP	_	20	nn	_	_
20	base	_	NN	NN	_	16	pobj	_	_
21	shortly	_	RB	RB	_	22	advmod	_	_
22	after	_	IN	IN	_	15	prep	_	_
23	1730	_	CD	CD	_	26	num	_	_
24	Greenwich	_	NNP	NNP	_	26	nn	_	_
25	Mean	_	NNP	NNP	_	26	nn	_	_
26	Time	_	NNP	NNP	_	22	pobj	_	_
27	.	_	.	.	_	8	punct	_	_

Oracle:
(a / aircraft, beneficiary, p2 / person)
(a2 / airport, name, n5 / name)
(a3 / after, mod, s3 / short)
(a4 / affair, mod, c / country)
(a4 / affair, mod, f / foreign)
(b / base, mod, a2 / airport)
(c / country, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, a4 / affair)
(h / have-org-role-91, ARG2, s2 / spokeswoman)
(l / land-01, ARG1, a / aircraft)
(l / land-01, location, b / base)
(l / land-01, time, a3 / after)
(n / name, op, "Manusha")
(n / name, op, "Pillay")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n4 / name, op, "Lula")
(n4 / name, op, "Silva")
(n4 / name, op, "da")
(n5 / name, op, "Air")
(n5 / name, op, "Force")
(n5 / name, op, "Waterkloof")
(p / person, name, n / name)
(p2 / person, name, n4 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, l / land-01)

Input(Some(Graph(null,ArrayBuffer(Span(23,26,List(4, 3, 2, 1, 0),Greenwich Mean Time,(organization :name (name :op "Greenwich" :op "Mean" :op "Time")),false), Span(22,23,List(6, 5),1730,(date-entity :year 1730),false), Span(21,22,List(7),after,after,false), Span(17,19,List(11, 10, 9, 8),Air Force,(military :name (name :op "Force" :op "Air")),false), Span(13,14,List(12),aircraft,aircraft,false), Span(9,12,List(17, 16, 15, 14, 13),Lula da Silva,(person :name (name :op "Lula" :op "da" :op "Silva")),false), Span(4,5,List(19, 18),spokeswoman,(have-org-role-91 :ARG2 spokeswoman),false), Span(3,4,List(20),affairs,affair,false), Span(0,2,List(24, 23, 22, 21),South African,(thing :name (name :op "South" :op "African")),false)),Map(2 -> "Greenwich", 5 -> date-entity, 12 -> aircraft, 8 -> military, 15 -> "Lula", 21 -> thing, 18 -> have-org-role-91, 24 -> "African", 7 -> after, 1 -> name, 17 -> "Silva", 23 -> "South", 4 -> "Time", 11 -> "Air", 14 -> name, 20 -> affair, 6 -> 1730, 9 -> name, 0 -> organization, 22 -> name, 16 -> "da", 19 -> spokeswoman, 10 -> "Force", 3 -> "Mean", 13 -> person),Map(n -> name, h -> have-org-role-91, t -> thing, n4 -> name, a3 -> affair, s -> spokeswoman, d -> date-entity, m -> military, 1 -> 1730, p -> person, a -> after, n3 -> name, a2 -> aircraft, o -> organization, n2 -> name))),[Ljava.lang.String;@51d387d3,Annotation([Ljava.lang.String;@2370ac7a,[Ljava.lang.String;@534180a2,[Ljava.lang.String;@6cf0a747),Annotation([Ljava.lang.String;@21505815,[Ljava.lang.String;@7e53339,[Ledu.cmu.lti.nlp.amr.Dependency;@58fef7f7),Annotation([Ljava.lang.String;@31ddb930,[Ljava.lang.String;@12eedfee,[Ljava.lang.String;@3c3c4a71),Annotation([Ljava.lang.String;@1352434e,[Ljava.lang.String;@4f9a6c2d,[Ledu.cmu.lti.nlp.amr.Entity;@2b6fcb9f))
AMR:
(a / after, op, d / date-entity)
(a / after, op, o / organization)
(a2 / aircraft, poss, p / person)
(d / date-entity, year, 1 / 1730)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, s / spokeswoman)
(h / have-org-role-91, ARG3, t / thing)
(m / military, name, n2 / name)
(m / military, op, h / have-org-role-91)
(n / name, op, "Greenwich")
(n / name, op, "Mean")
(n / name, op, "Time")
(n2 / name, op, "Air")
(n2 / name, op, "Force")
(n3 / name, op, "Lula")
(n3 / name, op, "Silva")
(n3 / name, op, "da")
(n4 / name, op, "African")
(n4 / name, op, "South")
(o / organization, name, n / name)
(p / person, name, n3 / name)
(s / spokeswoman, mod, a3 / affair)
(t / thing, name, n4 / name)

Decoded in 424,033 microseconds
Sentence: Lula da Silva's visit to South Africa follows the second meeting of the South Africa-Brazil Joint Commission held in Pretoria in 030500.

NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (thing :name (name :op "South" :op "Africa" :op "-" :op "Brazil"))
NER Entity: (organization :name (name :op "Joint" :op "Commission"))
NER Entity: (country :name (name :op "Pretoria"))
mkDayMonthYear(030500,00,05,03)
mkDayMonthYear(030500,00,05,03)
Spans:
Span 16-18:  - Brazil => (organization :name (name :op "Joint" :op "Commission"))
Span 24-25:  030500 => (date-entity :month 5 :year 2003)
Span 8-9:  follows => follow-01
Span 18-19:  Joint => joint
Span 0-3:  Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Span 14-16:  South Africa => (thing :name (name :op "South" :op "Africa" :op "-" :op "Brazil"))
Span 6-8:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 4-5:  visit => visit-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 24-25:  030500 => (date-entity :month 5 :year 2003)
Oracle Span 17-18:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 8-9:  follows => follow-01
Oracle Span 20-21:  held => hold-04
Oracle Span 18-20:  Joint Commission => (organization :name (name :op "Commission" :op "Joint"))
Oracle Span 0-3:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Oracle Span 11-12:  meeting => meet-03
Oracle Span 22-23:  Pretoria => (city :name (name :op "Pretoria"))
Oracle Span 6-8:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 4-5:  visit => visit-01

Extra span: Joint => joint
Extra span: - Brazil => (organization :name (name :op "Joint" :op "Commission"))
Extra span: South Africa => (thing :name (name :op "South" :op "Africa" :op "-" :op "Brazil"))
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Incorrect span: Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Missing span: Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: Joint Commission => (organization :name (name :op "Commission" :op "Joint"))
Missing span: Brazil => (country :name (name :op "Brazil"))
Missing span: Pretoria => (city :name (name :op "Pretoria"))
Missing span: held => hold-04
Missing span: meeting => meet-03
Dependencies:
1	Lula	_	NNP	NNP	_	3	nn	_	_
2	da	_	NNP	NNP	_	3	nn	_	_
3	Silva	_	NNP	NNP	_	5	poss	_	_
4	's	_	POS	POS	_	3	possessive	_	_
5	visit	_	NN	NN	_	9	nsubj	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	South	_	NNP	NNP	_	8	nn	_	_
8	Africa	_	NNP	NNP	_	6	pobj	_	_
9	follows	_	VBZ	VBZ	_	0	root	_	_
10	the	_	DT	DT	_	12	det	_	_
11	second	_	JJ	JJ	_	12	amod	_	_
12	meeting	_	NN	NN	_	9	dobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	18	det	_	_
15	South	_	NNP	NNP	_	18	nn	_	_
16	Africa-Brazil	_	NNP	NNP	_	18	nn	_	_
17	Joint	_	NNP	NNP	_	18	nn	_	_
18	Commission	_	NNP	NNP	_	13	pobj	_	_
19	held	_	VBN	VBN	_	18	vmod	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	Pretoria	_	NNP	NNP	_	20	pobj	_	_
22	in	_	IN	IN	_	19	prep	_	_
23	030500	_	CD	CD	_	22	pobj	_	_
24	.	_	.	.	_	9	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(c4 / city, name, n7 / name)
(d / date-entity, month, 5)
(d / date-entity, year, 2003)
(f / follow-01, ARG1, v / visit-01)
(f / follow-01, ARG2, h / hold-04)
(h / hold-04, ARG1, m / meet-03)
(m / meet-03, ARG0, o2 / organization)
(m / meet-03, location, c4 / city)
(m / meet-03, time, d / date-entity)
(n / name, op, "Lula")
(n / name, op, "Silva")
(n / name, op, "da")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Commission")
(n3 / name, op, "Joint")
(n4 / name, op, "Brazil")
(n7 / name, op, "Pretoria")
(o2 / organization, mod, c / country)
(o2 / organization, mod, c2 / country)
(o2 / organization, name, n3 / name)
(p / person, name, n / name)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(2, 1, 0),030500,(date-entity :month 5 :year 2003),false), Span(18,19,List(3),Joint,joint,false), Span(16,18,List(7, 6, 5, 4),- Brazil,(organization :name (name :op "Joint" :op "Commission")),false), Span(14,16,List(13, 12, 11, 10, 9, 8),South Africa,(thing :name (name :op "South" :op "Africa" :op "-" :op "Brazil")),false), Span(8,9,List(14),follows,follow-01,false), Span(6,8,List(18, 17, 16, 15),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(4,5,List(19),visit,visit-01,false), Span(0,3,List(24, 23, 22, 21, 20),Lula da Silva,(person :name (name :op "Lula" :op "da" :op "Silva")),false)),Map(2 -> 2003, 5 -> name, 12 -> "-", 8 -> thing, 15 -> country, 21 -> name, 18 -> "Africa", 24 -> "Silva", 7 -> "Commission", 1 -> 5, 17 -> "South", 23 -> "da", 4 -> organization, 11 -> "Africa", 14 -> follow-01, 20 -> person, 6 -> "Joint", 9 -> name, 0 -> date-entity, 22 -> "Lula", 16 -> name, 19 -> visit-01, 10 -> "South", 3 -> joint, 13 -> "Brazil"),Map(n -> name, 2 -> 2003, 5 -> 5, t -> thing, n4 -> name, j -> joint, v -> visit-01, d -> date-entity, p -> person, n3 -> name, c -> country, f -> follow-01, o -> organization, n2 -> name))),[Ljava.lang.String;@75de6341,Annotation([Ljava.lang.String;@74170687,[Ljava.lang.String;@68f0f72c,[Ljava.lang.String;@3d96fa9e),Annotation([Ljava.lang.String;@3b545206,[Ljava.lang.String;@77bb48d5,[Ledu.cmu.lti.nlp.amr.Dependency;@181d8899),Annotation([Ljava.lang.String;@12d5c30e,[Ljava.lang.String;@b887730,[Ljava.lang.String;@26586b74),Annotation([Ljava.lang.String;@52f57666,[Ljava.lang.String;@6e041285,[Ledu.cmu.lti.nlp.amr.Entity;@267dc982))
AMR:
(c / country, name, n3 / name)
(d / date-entity, month, 5 / 5)
(d / date-entity, op, f / follow-01)
(d / date-entity, year, 2 / 2003)
(f / follow-01, ARG1, v / visit-01)
(j / joint, mod, o / organization)
(n / name, op, "Commission")
(n / name, op, "Joint")
(n2 / name, op, "-")
(n2 / name, op, "Africa")
(n2 / name, op, "Brazil")
(n2 / name, op, "South")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Lula")
(n4 / name, op, "Silva")
(n4 / name, op, "da")
(o / organization, mod, t / thing)
(o / organization, name, n / name)
(p / person, name, n4 / name)
(t / thing, name, n2 / name)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, c / country)
(v / visit-01, ARG2, t / thing)

Decoded in 678,722 microseconds
Sentence: The Joint Commission was jointly chaired by South African Foreign Minister Dlamini-Zuma and Brazilian Foreign Minister Celso Amorim.

NER Entity: (organization :name (name :op "Joint" :op "Commission"))
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (person :name (name :op "Dlamini" :op "-" :op "Zuma"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (person :name (name :op "Celso" :op "Amorim"))
Spans:
Span 15-16:  Brazilian => (country :name (name :op "Brazil"))
Span 5-6:  chaired => chair-01
Span 16-18:  Foreign Minister => (person :name (name :op "Celso" :op "Amorim"))
Span 1-3:  Joint Commission => (organization :name (name :op "Joint" :op "Commission"))
Span 4-5:  jointly => joint
Span 10-11:  Minister => (have-org-role-91 :ARG2 minister)
Span 7-9:  South African => (thing :name (name :op "South" :op "African"))

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 15-16:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 18-20:  Celso Amorim => (person :name (name :op "Amorim" :op "Celso"))
Oracle Span 5-6:  chaired => chair-01
Oracle Span 11-14:  Dlamini - Zuma => (person :name (name :op "Dlamini-Zuma"))
Oracle Span 9-10:  Foreign => foreign
Oracle Span 16-17:  Foreign => foreign
Oracle Span 1-3:  Joint Commission => (organization :name (name :op "Commission" :op "Joint"))
Oracle Span 4-5:  jointly => joint
Oracle Span 10-11:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 17-18:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 7-9:  South African => (country :name (name :op "Africa" :op "South"))

Extra span: Foreign Minister => (person :name (name :op "Celso" :op "Amorim"))
Incorrect span: South African => (thing :name (name :op "South" :op "African"))
Incorrect span: Joint Commission => (organization :name (name :op "Joint" :op "Commission"))
Missing span: Dlamini - Zuma => (person :name (name :op "Dlamini-Zuma"))
Missing span: Celso Amorim => (person :name (name :op "Amorim" :op "Celso"))
Missing span: Joint Commission => (organization :name (name :op "Commission" :op "Joint"))
Missing span: South African => (country :name (name :op "Africa" :op "South"))
Missing span: and => and
Missing span: Foreign => foreign
Missing span: Minister => (have-org-role-91 :ARG2 minister)
Missing span: Foreign => foreign
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Joint	_	NNP	NNP	_	3	nn	_	_
3	Commission	_	NNP	NNP	_	6	nsubjpass	_	_
4	was	_	VBD	VBD	_	6	auxpass	_	_
5	jointly	_	RB	RB	_	6	advmod	_	_
6	chaired	_	VBN	VBN	_	0	root	_	_
7	by	_	IN	IN	_	6	prep	_	_
8	South	_	NNP	NNP	_	12	nn	_	_
9	African	_	NNP	NNP	_	12	nn	_	_
10	Foreign	_	NNP	NNP	_	12	nn	_	_
11	Minister	_	NNP	NNP	_	12	nn	_	_
12	Dlamini-Zuma	_	NNP	NNP	_	7	pobj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	Brazilian	_	JJ	JJ	_	18	amod	_	_
15	Foreign	_	NNP	NNP	_	18	nn	_	_
16	Minister	_	NNP	NNP	_	18	nn	_	_
17	Celso	_	NNP	NNP	_	18	nn	_	_
18	Amorim	_	NNP	NNP	_	12	conj	_	_
19	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, p / person)
(a / and, op, p2 / person)
(c / chair-01, ARG0, a / and)
(c / chair-01, ARG1, o / organization)
(c / chair-01, manner, j / joint)
(c2 / country, name, n2 / name)
(c3 / country, name, n4 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, m / minister)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG1, c3 / country)
(h2 / have-org-role-91, ARG2, m2 / minister)
(m / minister, mod, f / foreign)
(m2 / minister, mod, f2 / foreign)
(n / name, op, "Dlamini-Zuma")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Amorim")
(n3 / name, op, "Celso")
(n4 / name, op, "Brazil")
(n5 / name, op, "Commission")
(n5 / name, op, "Joint")
(o / organization, name, n5 / name)
(p / person, name, n / name)
(p2 / person, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(16,18,List(3, 2, 1, 0),Foreign Minister,(person :name (name :op "Celso" :op "Amorim")),false), Span(15,16,List(6, 5, 4),Brazilian,(country :name (name :op "Brazil")),false), Span(10,11,List(8, 7),Minister,(have-org-role-91 :ARG2 minister),false), Span(7,9,List(12, 11, 10, 9),South African,(thing :name (name :op "South" :op "African")),false), Span(5,6,List(13),chaired,chair-01,false), Span(4,5,List(14),jointly,joint,false), Span(1,3,List(18, 17, 16, 15),Joint Commission,(organization :name (name :op "Joint" :op "Commission")),false)),Map(2 -> "Celso", 5 -> name, 12 -> "African", 15 -> organization, 8 -> minister, 18 -> "Commission", 7 -> have-org-role-91, 17 -> "Joint", 1 -> name, 4 -> country, 11 -> "South", 14 -> joint, 6 -> "Brazil", 0 -> person, 9 -> thing, 16 -> name, 3 -> "Amorim", 10 -> name, 13 -> chair-01),Map(n -> name, h -> have-org-role-91, t -> thing, n4 -> name, j -> joint, m -> minister, p -> person, n3 -> name, c -> country, o -> organization, c2 -> chair-01, n2 -> name))),[Ljava.lang.String;@439b15f2,Annotation([Ljava.lang.String;@3aa41da1,[Ljava.lang.String;@74fab04a,[Ljava.lang.String;@3c83468e),Annotation([Ljava.lang.String;@272ce069,[Ljava.lang.String;@3d7fb838,[Ledu.cmu.lti.nlp.amr.Dependency;@1c26273d),Annotation([Ljava.lang.String;@3a37a501,[Ljava.lang.String;@7a583586,[Ljava.lang.String;@3a26ec8d),Annotation([Ljava.lang.String;@17143b3b,[Ljava.lang.String;@100c8b75,[Ledu.cmu.lti.nlp.amr.Entity;@2bc378f7))
AMR:
(c / country, name, n2 / name)
(c2 / chair-01, ARG1, o / organization)
(c2 / chair-01, ARG2, t / thing)
(c2 / chair-01, manner, j / joint)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(h / have-org-role-91, ARG3, t / thing)
(n / name, op, "Amorim")
(n / name, op, "Celso")
(n2 / name, op, "Brazil")
(n3 / name, op, "African")
(n3 / name, op, "South")
(n4 / name, op, "Commission")
(n4 / name, op, "Joint")
(o / organization, name, n4 / name)
(p / person, name, n / name)
(t / thing, name, n3 / name)

Decoded in 330,559 microseconds
Sentence: Dlamini-Zuma participated in the Brazil-Africa Forum in Fortaleza, Brazil, in 030600.

NER Entity: (person :name (name :op "Dlamini" :op "-" :op "Zuma"))
NER Entity: (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))
NER Entity: (country :name (name :op "Fortaleza"))
NER Entity: (country :name (name :op "Brazil"))
mkDayMonthYear(030600,00,06,03)
mkDayMonthYear(030600,00,06,03)
Spans:
Span 16-17:  030600 => (date-entity :month 6 :year 2003)
Span 13-14:  Brazil => (country :name (name :op "Brazil"))
Span 6-7:  Brazil => (country :name (name :op "Brazil"))
Span 4-6:  in the => (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))
Span 3-4:  participated => participate-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 16-17:  030600 => (date-entity :month 6 :year 2003)
Oracle Span 13-14:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 6-10:  Brazil - Africa Forum => (organization :name (name :op "Forum" :op "Brazil-Africa"))
Oracle Span 0-3:  Dlamini - Zuma => (person :name (name :op "Dlamini-Zuma"))
Oracle Span 11-12:  Fortaleza => (city :name (name :op "Fortaleza"))
Oracle Span 3-4:  participated => participate-01

Extra span: Brazil => (country :name (name :op "Brazil"))
Extra span: in the => (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))
Missing span: Dlamini - Zuma => (person :name (name :op "Dlamini-Zuma"))
Missing span: Brazil - Africa Forum => (organization :name (name :op "Forum" :op "Brazil-Africa"))
Missing span: Fortaleza => (city :name (name :op "Fortaleza"))
Dependencies:
1	Dlamini-Zuma	_	NNP	NNP	_	2	nsubj	_	_
2	participated	_	VBD	VBD	_	0	root	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Brazil-Africa	_	NNP	NNP	_	6	nn	_	_
6	Forum	_	NNP	NNP	_	3	pobj	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	Fortaleza	_	NNP	NNP	_	10	nn	_	_
9	,	_	,	,	_	10	punct	_	_
10	Brazil	_	NNP	NNP	_	7	pobj	_	_
11	,	_	,	,	_	10	punct	_	_
12	in	_	IN	IN	_	2	prep	_	_
13	030600	_	CD	CD	_	12	pobj	_	_
14	.	_	.	.	_	2	punct	_	_

Oracle:
(c / city, location, c2 / country)
(c / city, name, n3 / name)
(c2 / country, name, n4 / name)
(d / date-entity, month, 6)
(d / date-entity, year, 2003)
(n / name, op, "Dlamini-Zuma")
(n2 / name, op, "Brazil-Africa")
(n2 / name, op, "Forum")
(n3 / name, op, "Fortaleza")
(n4 / name, op, "Brazil")
(o / organization, name, n2 / name)
(p / participate-01, ARG0, p2 / person)
(p / participate-01, ARG1, o / organization)
(p / participate-01, location, c / city)
(p / participate-01, time, d / date-entity)
(p2 / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),030600,(date-entity :month 6 :year 2003),false), Span(13,14,List(5, 4, 3),Brazil,(country :name (name :op "Brazil")),false), Span(6,7,List(8, 7, 6),Brazil,(country :name (name :op "Brazil")),false), Span(4,6,List(14, 13, 12, 11, 10, 9),in the,(organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum")),false), Span(3,4,List(15),participated,participate-01,false)),Map(2 -> 2003, 5 -> "Brazil", 12 -> "-", 15 -> participate-01, 8 -> "Brazil", 7 -> name, 1 -> 6, 4 -> name, 11 -> "Brazil", 14 -> "Forum", 6 -> country, 0 -> date-entity, 9 -> organization, 3 -> country, 10 -> name, 13 -> "Africa"),Map(n -> name, 2 -> 2003, d -> date-entity, p -> participate-01, n3 -> name, c -> country, 6 -> 6, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@268cbb86,Annotation([Ljava.lang.String;@10f7918f,[Ljava.lang.String;@64d4f7c7,[Ljava.lang.String;@54e02f6a),Annotation([Ljava.lang.String;@17f3eefb,[Ljava.lang.String;@3ba46e63,[Ledu.cmu.lti.nlp.amr.Dependency;@788ddc1f),Annotation([Ljava.lang.String;@2dc3271b,[Ljava.lang.String;@254f906e,[Ljava.lang.String;@3d0035d2),Annotation([Ljava.lang.String;@2bfb6b49,[Ljava.lang.String;@1f346ad2,[Ledu.cmu.lti.nlp.amr.Entity;@46a145ba))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2003)
(n / name, op, "Brazil")
(n2 / name, op, "Brazil")
(n3 / name, op, "-")
(n3 / name, op, "Africa")
(n3 / name, op, "Brazil")
(n3 / name, op, "Forum")
(o / organization, name, n3 / name)
(p / participate-01, ARG0, c / country)
(p / participate-01, ARG1, o / organization)
(p / participate-01, location, c2 / country)
(p / participate-01, time, d / date-entity)

Decoded in 175,882 microseconds
Sentence: The South African Foreign Affairs Department stated that The historic and strategic India-Brazil-South Africa agreement which resulted from the Brazil-Africa Forum had outlined plans for trilateral political and economic cooperation between India, Brazil and South Africa.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "India" :op "-" :op "Brazil" :op "-" :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 18-19:  agreement => agree-01
Span 39-40:  Brazil => (country :name (name :op "Brazil"))
Span 23-24:  Brazil => (country :name (name :op "Brazil"))
Span 14-15:  Brazil => (country :name (name :op "Brazil"))
Span 35-37:  cooperation between => (country :name (name :op "South" :op "Africa"))
Span 34-35:  economic => economy
Span 9-10:  historic => history
Span 12-14:  India - => (country :name (name :op "India" :op "-" :op "Brazil" :op "-" :op "South" :op "Africa"))
Span 28-29:  outlined => outline-01
Span 29-30:  plans => plan-01
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))
Span 31-32:  trilateral => trilateral
Span 19-21:  which resulted => (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 18-19:  agreement => agree-01
Oracle Span 10-11:  and => and
Oracle Span 33-34:  and => and
Oracle Span 14-15:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 23-27:  Brazil - Africa Forum => (organization :name (name :op "Forum" :op "Brazil-Africa"))
Oracle Span 35-36:  cooperation => cooperate-01
Oracle Span 34-35:  economic => economy
Oracle Span 3-6:  Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Oracle Span 9-10:  historic => historic
Oracle Span 12-13:  India => (country :name (name :op "India"))
Oracle Span 28-29:  outlined => outline-01
Oracle Span 29-30:  plans => plan-01
Oracle Span 32-33:  political => politics
Oracle Span 20-21:  resulted => result-01
Oracle Span 16-18:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 6-7:  stated => state-01
Oracle Span 11-12:  strategic => strategy
Oracle Span 31-32:  trilateral => trilateral

Extra span: Brazil => (country :name (name :op "Brazil"))
Extra span: cooperation between => (country :name (name :op "South" :op "Africa"))
Extra span: Brazil => (country :name (name :op "Brazil"))
Extra span: which resulted => (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))
Extra span: India - => (country :name (name :op "India" :op "-" :op "Brazil" :op "-" :op "South" :op "Africa"))
Incorrect span: historic => history
Extra span: South African => (thing :name (name :op "South" :op "African"))
Missing span: Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: India => (country :name (name :op "India"))
Missing span: Brazil - Africa Forum => (organization :name (name :op "Forum" :op "Brazil-Africa"))
Missing span: stated => state-01
Missing span: and => and
Missing span: and => and
Missing span: historic => historic
Missing span: resulted => result-01
Missing span: cooperation => cooperate-01
Missing span: political => politics
Missing span: strategic => strategy
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	South	_	NNP	NNP	_	6	nn	_	_
3	African	_	NNP	NNP	_	6	nn	_	_
4	Foreign	_	NNP	NNP	_	6	nn	_	_
5	Affairs	_	NNP	NNP	_	6	nn	_	_
6	Department	_	NNP	NNP	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	23	mark	_	_
9	The	_	DT	DT	_	15	det	_	_
10	historic	_	JJ	JJ	_	15	amod	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	strategic	_	JJ	JJ	_	10	conj	_	_
13	India-Brazil-South	_	NNP	NNP	_	15	nn	_	_
14	Africa	_	NNP	NNP	_	15	nn	_	_
15	agreement	_	NN	NN	_	23	nsubj	_	_
16	which	_	WDT	WDT	_	17	nsubj	_	_
17	resulted	_	VBD	VBD	_	15	rcmod	_	_
18	from	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Brazil-Africa	_	NNP	NNP	_	21	nn	_	_
21	Forum	_	NNP	NNP	_	18	pobj	_	_
22	had	_	VBD	VBD	_	23	aux	_	_
23	outlined	_	VBN	VBN	_	7	ccomp	_	_
24	plans	_	NNS	NNS	_	23	dobj	_	_
25	for	_	IN	IN	_	23	prep	_	_
26	trilateral	_	NN	NN	_	27	npadvmod	_	_
27	political	_	JJ	JJ	_	25	pobj	_	_
28	and	_	CC	CC	_	27	cc	_	_
29	economic	_	JJ	JJ	_	30	amod	_	_
30	cooperation	_	NN	NN	_	27	conj	_	_
31	between	_	IN	IN	_	27	prep	_	_
32	India	_	NNP	NNP	_	37	nn	_	_
33	,	_	,	,	_	32	punct	_	_
34	Brazil	_	NNP	NNP	_	32	conj	_	_
35	and	_	CC	CC	_	32	cc	_	_
36	South	_	NNP	NNP	_	32	conj	_	_
37	Africa	_	NNP	NNP	_	31	pobj	_	_
38	.	_	.	.	_	7	punct	_	_

Oracle:
(a / agree-01, ARG0, a2 / and)
(a2 / and, mod, h / historic)
(a2 / and, mod, s2 / strategy)
(a2 / and, op, c / country)
(a2 / and, op, c2 / country)
(a2 / and, op, c5 / country)
(a4 / and, op, e / economy)
(a4 / and, op, p2 / politics)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c4 / cooperate-01, ARG0, a2 / and)
(c4 / cooperate-01, ARG2, a4 / and)
(c4 / cooperate-01, mod, t / trilateral)
(c5 / country, name, n6 / name)
(g / government-organization, mod, c5 / country)
(g / government-organization, name, n / name)
(n / name, op, "Affairs")
(n / name, op, "Department")
(n / name, op, "Foreign")
(n2 / name, op, "India")
(n3 / name, op, "Brazil")
(n5 / name, op, "Brazil-Africa")
(n5 / name, op, "Forum")
(n6 / name, op, "Africa")
(n6 / name, op, "South")
(o / outline-01, ARG0, a / agree-01)
(o / outline-01, ARG1, p / plan-01)
(o2 / organization, name, n5 / name)
(p / plan-01, ARG0, a / agree-01)
(p / plan-01, purpose, c4 / cooperate-01)
(r / result-01, ARG1, o2 / organization)
(r / result-01, ARG2, a / agree-01)
(s / state-01, ARG0, g / government-organization)
(s / state-01, ARG1, o / outline-01)

Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(2, 1, 0),Brazil,(country :name (name :op "Brazil")),false), Span(35,37,List(6, 5, 4, 3),cooperation between,(country :name (name :op "South" :op "Africa")),false), Span(34,35,List(7),economic,economy,false), Span(31,32,List(8),trilateral,trilateral,false), Span(29,30,List(9),plans,plan-01,false), Span(28,29,List(10),outlined,outline-01,false), Span(23,24,List(13, 12, 11),Brazil,(country :name (name :op "Brazil")),false), Span(19,21,List(19, 18, 17, 16, 15, 14),which resulted,(organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum")),false), Span(18,19,List(20),agreement,agree-01,false), Span(14,15,List(23, 22, 21),Brazil,(country :name (name :op "Brazil")),false), Span(12,14,List(31, 30, 29, 28, 27, 26, 25, 24),India -,(country :name (name :op "India" :op "-" :op "Brazil" :op "-" :op "South" :op "Africa")),false), Span(9,10,List(32),historic,history,false), Span(1,3,List(36, 35, 34, 33),South African,(thing :name (name :op "South" :op "African")),false)),Map(30 -> "South", 2 -> "Brazil", 5 -> "South", 33 -> thing, 27 -> "-", 12 -> name, 8 -> trilateral, 15 -> name, 36 -> "African", 21 -> country, 18 -> "Africa", 24 -> country, 35 -> "South", 7 -> economy, 1 -> name, 17 -> "-", 23 -> "Brazil", 26 -> "India", 4 -> name, 11 -> country, 32 -> history, 14 -> organization, 29 -> "-", 20 -> agree-01, 34 -> name, 28 -> "Brazil", 6 -> "Africa", 9 -> plan-01, 0 -> country, 22 -> name, 16 -> "Brazil", 19 -> "Forum", 10 -> outline-01, 3 -> country, 31 -> "Africa", 25 -> name, 13 -> "Brazil"),Map(e -> economy, n -> name, h -> history, t -> trilateral, n7 -> name, c4 -> country, n4 -> name, p -> plan-01, c3 -> country, n3 -> name, a -> agree-01, n6 -> name, o2 -> organization, t2 -> thing, c -> country, o -> outline-01, c2 -> country, n2 -> name, c5 -> country, n5 -> name))),[Ljava.lang.String;@7ab34619,Annotation([Ljava.lang.String;@ae2db25,[Ljava.lang.String;@363c4251,[Ljava.lang.String;@7afc4db9),Annotation([Ljava.lang.String;@1a1f5f71,[Ljava.lang.String;@63884e4,[Ledu.cmu.lti.nlp.amr.Dependency;@524270b8),Annotation([Ljava.lang.String;@4acb7ecc,[Ljava.lang.String;@2a4f5433,[Ljava.lang.String;@6812fa3a),Annotation([Ljava.lang.String;@29149030,[Ljava.lang.String;@38b8b6c0,[Ledu.cmu.lti.nlp.amr.Entity;@68868328))
AMR:
(a / agree-01, ARG0, c3 / country)
(a / agree-01, ARG1, t2 / thing)
(a / agree-01, ARG2, c / country)
(a / agree-01, mod, c4 / country)
(a / agree-01, mod, h / history)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n5 / name)
(c5 / country, name, n6 / name)
(e / economy, poss, c2 / country)
(e / economy, poss, c5 / country)
(n / name, op, "Brazil")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Brazil")
(n4 / name, op, "-")
(n4 / name, op, "Africa")
(n4 / name, op, "Brazil")
(n4 / name, op, "Forum")
(n5 / name, op, "Brazil")
(n6 / name, op, "-")
(n6 / name, op, "-")
(n6 / name, op, "Africa")
(n6 / name, op, "Brazil")
(n6 / name, op, "India")
(n6 / name, op, "South")
(n7 / name, op, "African")
(n7 / name, op, "South")
(o / outline-01, ARG1, p / plan-01)
(o / outline-01, ARG3, a / agree-01)
(o2 / organization, name, n4 / name)
(o2 / organization, op, a / agree-01)
(p / plan-01, ARG0, c2 / country)
(p / plan-01, ARG1, t / trilateral)
(t2 / thing, name, n7 / name)

Decoded in 1,653,224 microseconds
Sentence: India, Brazil and South Africa formed part of a group at recent World Trade Organization negotiations, which advocated support for the development agenda of under-developed countries.

NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "World" :op "Trade" :op "Organization"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 19-20:  advocated => advocate-01
Span 24-25:  agenda => agenda
Span 2-3:  Brazil => (country :name (name :op "Brazil"))
Span 29-30:  countries => country
Span 28-29:  developed => develop-02
Span 23-24:  development => develop-02
Span 6-7:  formed => form-01
Span 16-17:  negotiations => negotiate-01
Span 12-13:  recent => recent
Span 4-6:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 20-21:  support => support-01
Span 13-16:  World Trade Organization => (organization :name (name :op "World" :op "Trade" :op "Organization"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 19-20:  advocated => advocate-01
Oracle Span 24-25:  agenda => agenda
Oracle Span 3-4:  and => and
Oracle Span 2-3:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 29-30:  countries => country
Oracle Span 28-29:  developed => develop-02
Oracle Span 10-11:  group => group
Oracle Span 0-1:  India => (country :name (name :op "India"))
Oracle Span 16-17:  negotiations => negotiate-01
Oracle Span 8-9:  of => include-91
Oracle Span 12-13:  recent => recent
Oracle Span 4-6:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 20-21:  support => support-01
Oracle Span 26-27:  under => under-develop
Oracle Span 13-16:  World Trade Organization => (organization :name (name :op "Organization" :op "Trade" :op "World"))

Extra span: development => develop-02
Incorrect span: World Trade Organization => (organization :name (name :op "World" :op "Trade" :op "Organization"))
Extra span: formed => form-01
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Missing span: India => (country :name (name :op "India"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: World Trade Organization => (organization :name (name :op "Organization" :op "Trade" :op "World"))
Missing span: of => include-91
Missing span: group => group
Missing span: and => and
Missing span: under => under-develop
Dependencies:
1	India	_	NNP	NNP	_	7	nsubj	_	_
2	,	_	,	,	_	1	punct	_	_
3	Brazil	_	NNP	NNP	_	1	conj	_	_
4	and	_	CC	CC	_	1	cc	_	_
5	South	_	NNP	NNP	_	6	nn	_	_
6	Africa	_	NNP	NNP	_	1	conj	_	_
7	formed	_	VBD	VBD	_	0	root	_	_
8	part	_	NN	NN	_	7	dobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	a	_	DT	DT	_	11	det	_	_
11	group	_	NN	NN	_	9	pobj	_	_
12	at	_	IN	IN	_	11	prep	_	_
13	recent	_	JJ	JJ	_	17	amod	_	_
14	World	_	NNP	NNP	_	17	nn	_	_
15	Trade	_	NNP	NNP	_	17	nn	_	_
16	Organization	_	NNP	NNP	_	17	nn	_	_
17	negotiations	_	NNS	NNS	_	12	pobj	_	_
18	,	_	,	,	_	11	punct	_	_
19	which	_	WDT	WDT	_	20	nsubj	_	_
20	advocated	_	VBD	VBD	_	11	rcmod	_	_
21	support	_	NN	NN	_	20	dobj	_	_
22	for	_	IN	IN	_	20	prep	_	_
23	the	_	DT	DT	_	25	det	_	_
24	development	_	NN	NN	_	25	nn	_	_
25	agenda	_	NN	NN	_	22	pobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	under-developed	_	JJ	JJ	_	28	amod	_	_
28	countries	_	NNS	NNS	_	26	pobj	_	_
29	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a2 / advocate-01, ARG0, o / organization)
(a2 / advocate-01, ARG1, s / support-01)
(a2 / advocate-01, ARG2, a3 / agenda)
(a3 / agenda, mod, d / develop-02)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, mod, u / under-develop)
(d / develop-02, ARG1, c4 / country)
(i / include-91, ARG1, a / and)
(i / include-91, ARG2, g / group)
(i / include-91, time, n4 / negotiate-01)
(n / name, op, "India")
(n2 / name, op, "Brazil")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / negotiate-01, ARG0, o / organization)
(n5 / name, op, "Organization")
(n5 / name, op, "Trade")
(n5 / name, op, "World")
(o / organization, name, n5 / name)
(o / organization, time, r / recent)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),countries,country,false), Span(28,29,List(1),developed,develop-02,false), Span(24,25,List(2),agenda,agenda,false), Span(23,24,List(3),development,develop-02,false), Span(20,21,List(4),support,support-01,false), Span(19,20,List(5),advocated,advocate-01,false), Span(16,17,List(6),negotiations,negotiate-01,false), Span(13,16,List(11, 10, 9, 8, 7),World Trade Organization,(organization :name (name :op "World" :op "Trade" :op "Organization")),false), Span(12,13,List(12),recent,recent,false), Span(6,7,List(13),formed,form-01,false), Span(4,6,List(17, 16, 15, 14),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(2,3,List(20, 19, 18),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> agenda, 5 -> advocate-01, 12 -> recent, 15 -> name, 8 -> name, 18 -> country, 7 -> organization, 17 -> "Africa", 1 -> develop-02, 4 -> support-01, 11 -> "Organization", 14 -> country, 20 -> "Brazil", 6 -> negotiate-01, 0 -> country, 9 -> "World", 16 -> "South", 19 -> name, 3 -> develop-02, 10 -> "Trade", 13 -> form-01),Map(n -> negotiate-01, n4 -> name, s -> support-01, d -> develop-02, c3 -> country, a -> agenda, n3 -> name, d2 -> develop-02, a2 -> advocate-01, r -> recent, c -> country, f -> form-01, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@173a6728,Annotation([Ljava.lang.String;@1a22e0ef,[Ljava.lang.String;@67514bdd,[Ljava.lang.String;@3b920bdc),Annotation([Ljava.lang.String;@7f5538a1,[Ljava.lang.String;@72fd8a3c,[Ledu.cmu.lti.nlp.amr.Dependency;@1f9f381d),Annotation([Ljava.lang.String;@34780cd9,[Ljava.lang.String;@623ebac7,[Ljava.lang.String;@7c8c70d6),Annotation([Ljava.lang.String;@1ab5f08a,[Ljava.lang.String;@6edf29c1,[Ledu.cmu.lti.nlp.amr.Entity;@79a04e5f))
AMR:
(a / agenda, poss, c / country)
(a2 / advocate-01, ARG0, o / organization)
(a2 / advocate-01, ARG1, s / support-01)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(d / develop-02, ARG0, c / country)
(d2 / develop-02, ARG0, c3 / country)
(d2 / develop-02, ARG1, a / agenda)
(f / form-01, ARG1, c2 / country)
(f / form-01, ARG2, a2 / advocate-01)
(n / negotiate-01, ARG0, o / organization)
(n / negotiate-01, time, r / recent)
(n2 / name, op, "Organization")
(n2 / name, op, "Trade")
(n2 / name, op, "World")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Brazil")
(o / organization, name, n2 / name)
(s / support-01, ARG1, a / agenda)

Decoded in 411,487 microseconds
Sentence: The South African Foreign Affairs Department stated that relations between South Africa and Brazil were strategic in the sense that Brazil had the largest population of people of African origin outside the continent of Africa.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (thing :name (name :op "African"))
NER Entity: (country :name (name :op "Africa"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 20-21:  Brazil => (country :name (name :op "Brazil"))
Span 13-14:  Brazil => (country :name (name :op "Brazil"))
Span 32-33:  continent => continent
Span 29-30:  origin => originate-01
Span 30-31:  outside => outside
Span 24-25:  population => population
Span 18-19:  sense => sense
Span 10-12:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 34-35:  Africa => (name :op "Africa")
Oracle Span 13-14:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 32-33:  continent => continent
Oracle Span 3-6:  Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Oracle Span 21-22:  had => have-03
Oracle Span 23-24:  largest => (large :degree most)
Oracle Span 29-30:  origin => origin
Oracle Span 30-31:  outside => outside
Oracle Span 24-25:  population => population
Oracle Span 8-9:  relations => relate-01
Oracle Span 10-12:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 6-7:  stated => state-01
Oracle Span 15-16:  strategic => strategic

Incorrect span: origin => originate-01
Extra span: Brazil => (country :name (name :op "Brazil"))
Extra span: sense => sense
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Extra span: South African => (thing :name (name :op "South" :op "African"))
Missing span: Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: Africa => (name :op "Africa")
Missing span: stated => state-01
Missing span: strategic => strategic
Missing span: had => have-03
Missing span: largest => (large :degree most)
Missing span: origin => origin
Missing span: relations => relate-01
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	South	_	NNP	NNP	_	6	nn	_	_
3	African	_	NNP	NNP	_	6	nn	_	_
4	Foreign	_	NNP	NNP	_	6	nn	_	_
5	Affairs	_	NNP	NNP	_	6	nn	_	_
6	Department	_	NNP	NNP	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	16	mark	_	_
9	relations	_	NNS	NNS	_	16	nsubj	_	_
10	between	_	IN	IN	_	9	prep	_	_
11	South	_	NNP	NNP	_	12	nn	_	_
12	Africa	_	NNP	NNP	_	10	pobj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	Brazil	_	NNP	NNP	_	12	conj	_	_
15	were	_	VBD	VBD	_	16	cop	_	_
16	strategic	_	JJ	JJ	_	7	ccomp	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	sense	_	NN	NN	_	17	pobj	_	_
20	that	_	IN	IN	_	22	mark	_	_
21	Brazil	_	NNP	NNP	_	22	nsubj	_	_
22	had	_	VBD	VBD	_	16	ccomp	_	_
23	the	_	DT	DT	_	25	det	_	_
24	largest	_	JJS	JJS	_	25	amod	_	_
25	population	_	NN	NN	_	22	dobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	people	_	NNS	NNS	_	26	pobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	African	_	JJ	JJ	_	30	amod	_	_
30	origin	_	NN	NN	_	28	pobj	_	_
31	outside	_	IN	IN	_	22	prep	_	_
32	the	_	DT	DT	_	33	det	_	_
33	continent	_	NN	NN	_	31	pobj	_	_
34	of	_	IN	IN	_	33	prep	_	_
35	Africa	_	NNP	NNP	_	34	pobj	_	_
36	.	_	.	.	_	7	punct	_	_

Oracle:
(c2 / country, name, n3 / name)
(c4 / continent, name, n4 / name)
(c5 / country, name, n5 / name)
(g / government-organization, mod, c5 / country)
(g / government-organization, name, n / name)
(h / have-03, ARG0, c2 / country)
(h / have-03, ARG1, p / population)
(l / large, degree, m / most)
(n / name, op, "Affairs")
(n / name, op, "Department")
(n / name, op, "Foreign")
(n3 / name, op, "Brazil")
(n4 / name, op, "Africa")
(n5 / name, op, "Africa")
(n5 / name, op, "South")
(o2 / origin, mod, c4 / continent)
(o3 / outside, op, c4 / continent)
(p / population, mod, l / large)
(r / relate-01, ARG1, c5 / country)
(r / relate-01, ARG2, c2 / country)
(s / state-01, ARG0, g / government-organization)
(s / state-01, ARG1, s2 / strategic)
(s2 / strategic, domain, r / relate-01)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),continent,continent,false), Span(30,31,List(1),outside,outside,false), Span(29,30,List(2),origin,originate-01,false), Span(24,25,List(3),population,population,false), Span(20,21,List(6, 5, 4),Brazil,(country :name (name :op "Brazil")),false), Span(18,19,List(7),sense,sense,false), Span(13,14,List(10, 9, 8),Brazil,(country :name (name :op "Brazil")),false), Span(10,12,List(14, 13, 12, 11),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(1,3,List(18, 17, 16, 15),South African,(thing :name (name :op "South" :op "African")),false)),Map(2 -> originate-01, 5 -> name, 12 -> name, 15 -> thing, 8 -> country, 18 -> "African", 7 -> sense, 17 -> "South", 1 -> outside, 4 -> country, 11 -> country, 14 -> "Africa", 6 -> "Brazil", 0 -> continent, 9 -> name, 16 -> name, 3 -> population, 10 -> "Brazil", 13 -> "South"),Map(n -> name, t -> thing, c4 -> country, n4 -> name, s -> sense, p -> population, c3 -> country, n3 -> name, o2 -> originate-01, c -> continent, o -> outside, c2 -> country, n2 -> name))),[Ljava.lang.String;@66b59b7d,Annotation([Ljava.lang.String;@53311681,[Ljava.lang.String;@4437ac07,[Ljava.lang.String;@3f1ed068),Annotation([Ljava.lang.String;@753aca85,[Ljava.lang.String;@2e645fbd,[Ledu.cmu.lti.nlp.amr.Dependency;@574a89e2),Annotation([Ljava.lang.String;@1e1e9ef3,[Ljava.lang.String;@3dd31157,[Ljava.lang.String;@31c628e7),Annotation([Ljava.lang.String;@3240b2a4,[Ljava.lang.String;@58434b19,[Ledu.cmu.lti.nlp.amr.Entity;@7d3fb0ef))
AMR:
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(n / name, op, "Brazil")
(n2 / name, op, "Brazil")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "African")
(n4 / name, op, "South")
(o / outside, op, c / continent)
(o2 / originate-01, ARG1, t / thing)
(o2 / originate-01, time, o / outside)
(p / population, location, o / outside)
(p / population, poss, c2 / country)
(p / population, poss, c3 / country)
(p / population, poss, c4 / country)
(s / sense, location, c2 / country)
(t / thing, name, n4 / name)

Decoded in 359,683 microseconds
Sentence: The South African Foreign Affairs Department stated that South Africa and Brazil shared opinions on a variety of global issues including the importance of multi-lateralism and the expansion of the United Nations Security Council.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 11-12:  Brazil => (country :name (name :op "Brazil"))
Span 29-30:  expansion => expand-01
Span 18-19:  global => globe
Span 22-23:  importance => important
Span 19-20:  issues => issue
Span 30-34:  of the United Nations => (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
Span 13-14:  opinions => (thing :ARG1-of opine-01)
Span 34-36:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 12-13:  shared => share-01
Span 8-10:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 10-11:  and => and
Oracle Span 27-28:  and => and
Oracle Span 11-12:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 29-30:  expansion => expand-01
Oracle Span 3-6:  Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Oracle Span 18-19:  global => globe
Oracle Span 22-23:  importance => importance
Oracle Span 19-20:  issues => issue
Oracle Span 24-25:  multi => multi-lateralism
Oracle Span 17-18:  of => include-01
Oracle Span 13-14:  opinions => opine-01
Oracle Span 12-13:  shared => share-01
Oracle Span 8-10:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 6-7:  stated => state-01
Oracle Span 32-36:  United Nations Security Council => (organization :name (name :op "Council" :op "Security" :op "Nations" :op "United"))
Oracle Span 16-17:  variety => variety

Extra span: Security Council => (organization :name (name :op "Council" :op "Security"))
Extra span: of the United Nations => (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
Incorrect span: importance => important
Incorrect span: opinions => (thing :ARG1-of opine-01)
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Extra span: South African => (thing :name (name :op "South" :op "African"))
Missing span: Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: United Nations Security Council => (organization :name (name :op "Council" :op "Security" :op "Nations" :op "United"))
Missing span: stated => state-01
Missing span: and => and
Missing span: variety => variety
Missing span: of => include-01
Missing span: and => and
Missing span: importance => importance
Missing span: opinions => opine-01
Missing span: multi => multi-lateralism
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	South	_	NNP	NNP	_	6	nn	_	_
3	African	_	NNP	NNP	_	6	nn	_	_
4	Foreign	_	NNP	NNP	_	6	nn	_	_
5	Affairs	_	NNP	NNP	_	6	nn	_	_
6	Department	_	NNP	NNP	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	13	mark	_	_
9	South	_	NNP	NNP	_	10	nn	_	_
10	Africa	_	NNP	NNP	_	13	nsubj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	Brazil	_	NNP	NNP	_	10	conj	_	_
13	shared	_	VBD	VBD	_	7	ccomp	_	_
14	opinions	_	NNS	NNS	_	13	dobj	_	_
15	on	_	IN	IN	_	13	prep	_	_
16	a	_	DT	DT	_	17	det	_	_
17	variety	_	NN	NN	_	15	pobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	global	_	JJ	JJ	_	20	amod	_	_
20	issues	_	NNS	NNS	_	18	pobj	_	_
21	including	_	VBG	VBG	_	13	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	importance	_	NN	NN	_	21	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	multi-lateralism	_	NN	NN	_	24	pobj	_	_
26	and	_	CC	CC	_	23	cc	_	_
27	the	_	DT	DT	_	28	det	_	_
28	expansion	_	NN	NN	_	23	conj	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	the	_	DT	DT	_	34	det	_	_
31	United	_	NNP	NNP	_	34	nn	_	_
32	Nations	_	NNPS	NNPS	_	34	nn	_	_
33	Security	_	NNP	NNP	_	34	nn	_	_
34	Council	_	NNP	NNP	_	29	pobj	_	_
35	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a2 / and, op, e / expand-01)
(a2 / and, op, i3 / importance)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(e / expand-01, ARG1, o3 / organization)
(g2 / government-organization, mod, c3 / country)
(g2 / government-organization, name, n / name)
(i / issue, mod, g / globe)
(i / issue, mod, v / variety)
(i2 / include-01, ARG1, a2 / and)
(i2 / include-01, ARG2, i / issue)
(i3 / importance, mod, m / multi-lateralism)
(n / name, op, "Affairs")
(n / name, op, "Department")
(n / name, op, "Foreign")
(n3 / name, op, "Brazil")
(n4 / name, op, "Council")
(n4 / name, op, "Nations")
(n4 / name, op, "Security")
(n4 / name, op, "United")
(n5 / name, op, "Africa")
(n5 / name, op, "South")
(o / opine-01, ARG0, a / and)
(o / opine-01, ARG1, i / issue)
(o3 / organization, name, n4 / name)
(s / state-01, ARG0, g2 / government-organization)
(s / state-01, ARG1, s2 / share-01)
(s2 / share-01, ARG0, c3 / country)
(s2 / share-01, ARG1, o / opine-01)
(s2 / share-01, ARG2, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(34,36,List(3, 2, 1, 0),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(30,34,List(9, 8, 7, 6, 5, 4),of the United Nations,(organization :name (name :op "United" :op "Nations" :op "Security" :op "Council")),false), Span(29,30,List(10),expansion,expand-01,false), Span(22,23,List(11),importance,important,false), Span(19,20,List(12),issues,issue,false), Span(18,19,List(13),global,globe,false), Span(13,14,List(15, 14),opinions,(thing :ARG1-of opine-01),false), Span(12,13,List(16),shared,share-01,false), Span(11,12,List(19, 18, 17),Brazil,(country :name (name :op "Brazil")),false), Span(8,10,List(23, 22, 21, 20),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(1,3,List(27, 26, 25, 24),South African,(thing :name (name :op "South" :op "African")),false)),Map(2 -> "Council", 5 -> name, 27 -> "African", 12 -> issue, 8 -> "Security", 15 -> opine-01, 21 -> name, 18 -> name, 24 -> thing, 7 -> "Nations", 1 -> name, 17 -> country, 23 -> "Africa", 26 -> "South", 4 -> organization, 11 -> important, 14 -> thing, 20 -> country, 6 -> "United", 9 -> "Council", 0 -> organization, 22 -> "South", 16 -> share-01, 19 -> "Brazil", 10 -> expand-01, 3 -> "Security", 25 -> name, 13 -> globe),Map(e -> expand-01, n -> name, t -> thing, o3 -> opine-01, n4 -> name, s -> share-01, g -> globe, n3 -> name, o2 -> organization, t2 -> thing, i2 -> issue, i -> important, c -> country, o -> organization, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@7dbe2ebf,Annotation([Ljava.lang.String;@4adc663e,[Ljava.lang.String;@885e7ff,[Ljava.lang.String;@8bd86c8),Annotation([Ljava.lang.String;@4fa9ab6,[Ljava.lang.String;@2d3ef181,[Ledu.cmu.lti.nlp.amr.Dependency;@a2341c6),Annotation([Ljava.lang.String;@6e4c0d8c,[Ljava.lang.String;@3e3315d9,[Ljava.lang.String;@64db4967),Annotation([Ljava.lang.String;@74e6094b,[Ljava.lang.String;@7a485a36,[Ledu.cmu.lti.nlp.amr.Entity;@5cf3157b))
AMR:
(c / country, name, n3 / name)
(c2 / country, name, n4 / name)
(e / expand-01, ARG0, c / country)
(e / expand-01, ARG1, i / important)
(e / expand-01, ARG2, o / organization)
(i2 / issue, mod, g / globe)
(n / name, op, "Council")
(n / name, op, "Security")
(n2 / name, op, "Council")
(n2 / name, op, "Nations")
(n2 / name, op, "Security")
(n2 / name, op, "United")
(n3 / name, op, "Brazil")
(n4 / name, op, "Africa")
(n4 / name, op, "South")
(n5 / name, op, "African")
(n5 / name, op, "South")
(o / organization, name, n / name)
(o / organization, name, n2 / name)
(o2 / organization, name, n2 / name)
(o3 / opine-01, ARG1, t / thing)
(s / share-01, ARG0, c2 / country)
(s / share-01, ARG1, t / thing)
(s / share-01, ARG2, c / country)
(t / thing, mod, i2 / issue)
(t2 / thing, mod, c2 / country)
(t2 / thing, name, n5 / name)

Decoded in 577,505 microseconds
Sentence: Discussions between Lula da Silva and Thabo Mbeki would also address new threats to international security such as terrorism, drugs, illegal weapons trafficking and AIDS.

NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (person :name (name :op "Thabo" :op "Mbeki"))
NER Entity: (thing :name (name :op "AIDS"))
NER Entity: (thing :name (name :op "AIDS"))
Spans:
Span 26-27:  AIDS => (disease :name (name :op "AIDS"))
Span 2-5:  Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Span 11-12:  new => new
Span 16-17:  such => such
Span 18-19:  terrorism => terrorism
Span 6-8:  Thabo Mbeki => (person :name (name :op "Mbeki" :op "Thabo"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  address => address-01
Oracle Span 26-27:  AIDS => (disease :name (name :op "AIDS"))
Oracle Span 9-10:  also => also
Oracle Span 5-6:  and => and
Oracle Span 0-1:  Discussions => discuss-01
Oracle Span 20-21:  drugs => drug
Oracle Span 22-23:  illegal => (law :polarity -)
Oracle Span 14-15:  international => international
Oracle Span 2-5:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Oracle Span 11-12:  new => new
Oracle Span 15-16:  security => security
Oracle Span 18-19:  terrorism => terrorism
Oracle Span 6-8:  Thabo Mbeki => (person :name (name :op "Mbeki" :op "Thabo"))
Oracle Span 12-13:  threats => threat
Oracle Span 24-25:  trafficking => traffic-00
Oracle Span 23-24:  weapons => weapon

Extra span: such => such
Incorrect span: Lula da Silva => (person :name (name :op "Lula" :op "da" :op "Silva"))
Missing span: Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Missing span: address => address-01
Missing span: also => also
Missing span: security => security
Missing span: international => international
Missing span: threats => threat
Missing span: and => and
Missing span: trafficking => traffic-00
Missing span: illegal => (law :polarity -)
Missing span: weapons => weapon
Missing span: drugs => drug
Missing span: Discussions => discuss-01
Dependencies:
1	Discussions	_	NNS	NNS	_	11	nsubj	_	_
2	between	_	IN	IN	_	1	prep	_	_
3	Lula	_	NNP	NNP	_	5	nn	_	_
4	da	_	NNP	NNP	_	5	nn	_	_
5	Silva	_	NNP	NNP	_	2	pobj	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	Thabo	_	NNP	NNP	_	8	nn	_	_
8	Mbeki	_	NNP	NNP	_	5	conj	_	_
9	would	_	MD	MD	_	11	aux	_	_
10	also	_	RB	RB	_	11	advmod	_	_
11	address	_	VB	VB	_	0	root	_	_
12	new	_	JJ	JJ	_	13	amod	_	_
13	threats	_	NNS	NNS	_	11	dobj	_	_
14	to	_	TO	TO	_	11	prep	_	_
15	international	_	JJ	JJ	_	16	amod	_	_
16	security	_	NN	NN	_	14	pobj	_	_
17	such	_	JJ	JJ	_	18	mwe	_	_
18	as	_	IN	IN	_	16	prep	_	_
19	terrorism	_	NN	NN	_	18	pobj	_	_
20	,	_	,	,	_	19	punct	_	_
21	drugs	_	NNS	NNS	_	19	conj	_	_
22	,	_	,	,	_	19	punct	_	_
23	illegal	_	JJ	JJ	_	25	amod	_	_
24	weapons	_	NNS	NNS	_	25	nn	_	_
25	trafficking	_	NN	NN	_	19	conj	_	_
26	and	_	CC	CC	_	19	cc	_	_
27	AIDS	_	NNP	NNP	_	19	conj	_	_
28	.	_	.	.	_	11	punct	_	_

Oracle:
(a / address-01, ARG0, d2 / discuss-01)
(a / address-01, ARG1, t / threat)
(a / address-01, ARG2, s / security)
(a / address-01, mod, a2 / also)
(a3 / and, op, d / disease)
(a3 / and, op, d3 / drug)
(a3 / and, op, t2 / terrorism)
(a3 / and, op, t3 / traffic-00)
(d / disease, name, n4 / name)
(d2 / discuss-01, ARG0, p / person)
(d2 / discuss-01, ARG2, p2 / person)
(l / law, polarity, -)
(n / name, op, "Lula")
(n / name, op, "Silva")
(n / name, op, "da")
(n2 / name, op, "Mbeki")
(n2 / name, op, "Thabo")
(n4 / name, op, "AIDS")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(s / security, mod, i / international)
(t / threat, example, a3 / and)
(t / threat, mod, n3 / new)
(t3 / traffic-00, ARG1, w / weapon)
(t3 / traffic-00, mod, l / law)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(2, 1, 0),AIDS,(disease :name (name :op "AIDS")),false), Span(18,19,List(3),terrorism,terrorism,false), Span(16,17,List(4),such,such,false), Span(11,12,List(5),new,new,false), Span(6,8,List(9, 8, 7, 6),Thabo Mbeki,(person :name (name :op "Mbeki" :op "Thabo")),false), Span(2,5,List(14, 13, 12, 11, 10),Lula da Silva,(person :name (name :op "Lula" :op "da" :op "Silva")),false)),Map(2 -> "AIDS", 5 -> new, 12 -> "Lula", 8 -> "Mbeki", 7 -> name, 1 -> name, 4 -> such, 11 -> name, 14 -> "Silva", 6 -> person, 0 -> disease, 9 -> "Thabo", 3 -> terrorism, 10 -> person, 13 -> "da"),Map(n -> name, t -> terrorism, p2 -> person, n4 -> name, s -> such, d -> disease, p -> person, n3 -> name, n2 -> new))),[Ljava.lang.String;@625dfff3,Annotation([Ljava.lang.String;@26350ea2,[Ljava.lang.String;@1e9469b8,[Ljava.lang.String;@5a08efdc),Annotation([Ljava.lang.String;@57272109,[Ljava.lang.String;@59696551,[Ledu.cmu.lti.nlp.amr.Dependency;@648d0e6d),Annotation([Ljava.lang.String;@79e66b2f,[Ljava.lang.String;@17273273,[Ljava.lang.String;@5f69e2b),Annotation([Ljava.lang.String;@984169e,[Ljava.lang.String;@43f1bb92,[Ledu.cmu.lti.nlp.amr.Entity;@6d6bbd35))
AMR:
(d / disease, mod, p2 / person)
(d / disease, name, n / name)
(n / name, op, "AIDS")
(n2 / new, op, p / person)
(n2 / new, poss, d / disease)
(n3 / name, op, "Mbeki")
(n3 / name, op, "Thabo")
(n4 / name, op, "Lula")
(n4 / name, op, "Silva")
(n4 / name, op, "da")
(p / person, name, n3 / name)
(p2 / person, name, n4 / name)
(s / such, op, t / terrorism)
(t / terrorism, op, p2 / person)

Decoded in 116,519 microseconds
Sentence: The South African Foreign Affairs Department stated that Brazil is South Africa's largest trading partner in Latin America.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 8-9:  Brazil => (country :name (name :op "Brazil"))
Span 17-19:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Span 15-16:  partner => partner-01
Span 10-12:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))
Span 14-15:  trading => trade-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 8-9:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 3-6:  Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Oracle Span 13-14:  largest => (large :degree most)
Oracle Span 17-19:  Latin America => (world-region :name (name :op "America" :op "Latin"))
Oracle Span 15-16:  partner => partner
Oracle Span 10-12:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 6-7:  stated => state-01
Oracle Span 14-15:  trading => trade-01

Incorrect span: partner => partner-01
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Extra span: South African => (thing :name (name :op "South" :op "African"))
Missing span: Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: stated => state-01
Missing span: partner => partner
Missing span: largest => (large :degree most)
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	South	_	NNP	NNP	_	6	nn	_	_
3	African	_	NNP	NNP	_	6	nn	_	_
4	Foreign	_	NNP	NNP	_	6	nn	_	_
5	Affairs	_	NNP	NNP	_	6	nn	_	_
6	Department	_	NNP	NNP	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	16	mark	_	_
9	Brazil	_	NNP	NNP	_	16	nsubj	_	_
10	is	_	VBZ	VBZ	_	16	cop	_	_
11	South	_	NNP	NNP	_	12	nn	_	_
12	Africa	_	NNP	NNP	_	16	poss	_	_
13	's	_	POS	POS	_	12	possessive	_	_
14	largest	_	JJS	JJS	_	16	amod	_	_
15	trading	_	NN	NN	_	16	nn	_	_
16	partner	_	NN	NN	_	7	ccomp	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	Latin	_	NNP	NNP	_	19	nn	_	_
19	America	_	NNP	NNP	_	17	pobj	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c4 / country, name, n5 / name)
(g / government-organization, mod, c4 / country)
(g / government-organization, name, n / name)
(l / large, degree, m / most)
(n / name, op, "Affairs")
(n / name, op, "Department")
(n / name, op, "Foreign")
(n2 / name, op, "Brazil")
(n4 / name, op, "America")
(n4 / name, op, "Latin")
(n5 / name, op, "Africa")
(n5 / name, op, "South")
(p / partner, domain, c / country)
(p / partner, location, w / world-region)
(p / partner, mod, l / large)
(s / state-01, ARG0, g / government-organization)
(s / state-01, ARG1, p / partner)
(t / trade-01, ARG0, p / partner)
(t / trade-01, ARG2, c4 / country)
(w / world-region, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(17,19,List(3, 2, 1, 0),Latin America,(world-region :name (name :op "America" :op "Latin")),false), Span(15,16,List(4),partner,partner-01,false), Span(14,15,List(5),trading,trade-01,false), Span(10,12,List(9, 8, 7, 6),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(8,9,List(12, 11, 10),Brazil,(country :name (name :op "Brazil")),false), Span(1,3,List(16, 15, 14, 13),South African,(thing :name (name :op "South" :op "African")),false)),Map(2 -> "America", 5 -> trade-01, 12 -> "Brazil", 15 -> "South", 8 -> "South", 7 -> name, 1 -> name, 4 -> partner-01, 11 -> name, 14 -> name, 6 -> country, 0 -> world-region, 9 -> "Africa", 16 -> "African", 3 -> "Latin", 10 -> country, 13 -> thing),Map(n -> name, w -> world-region, t -> trade-01, n4 -> name, p -> partner-01, n3 -> name, t2 -> thing, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@5c5d6175,Annotation([Ljava.lang.String;@7544ac86,[Ljava.lang.String;@3b27b497,[Ljava.lang.String;@b1534d3),Annotation([Ljava.lang.String;@3c74aa0d,[Ljava.lang.String;@6c841199,[Ledu.cmu.lti.nlp.amr.Dependency;@6a818392),Annotation([Ljava.lang.String;@489091bd,[Ljava.lang.String;@512d6e60,[Ljava.lang.String;@1de9b505),Annotation([Ljava.lang.String;@7b122839,[Ljava.lang.String;@3743539f,[Ledu.cmu.lti.nlp.amr.Entity;@d277579))
AMR:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Brazil")
(n4 / name, op, "African")
(n4 / name, op, "South")
(p / partner-01, ARG0, c2 / country)
(p / partner-01, ARG1, c / country)
(p / partner-01, ARG2, w / world-region)
(p / partner-01, mod, t / trade-01)
(t / trade-01, ARG1, t2 / thing)
(t2 / thing, name, n4 / name)
(w / world-region, name, n / name)

Decoded in 310,308 microseconds
Sentence: Trade between Brazil and South Africa totaled 696 million United States dollars in 020000 and 296 million United States dollars more in the trade balance going to Brazil.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "United" :op "States"))
mkDayMonthYear(020000,00,00,02)
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
mkDayMonthYear(020000,00,00,02)
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 13-14:  020000 => (date-entity :year 2002)
Span 24-25:  balance => balance-01
Span 27-28:  Brazil => (country :name (name :op "Brazil"))
Span 2-3:  Brazil => (country :name (name :op "Brazil"))
Span 19-20:  dollars => (monetary-quantity :unit dollar)
Span 11-12:  dollars => (monetary-quantity :unit dollar)
Span 4-6:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 23-24:  trade => trade-01
Span 0-1:  Trade => trade
Span 17-19:  United States => (country :name (name :op "United" :op "States"))
Span 9-11:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 13-14:  020000 => (date-entity :year 2002)
Oracle Span 3-4:  and => and
Oracle Span 24-25:  balance => balance-01
Oracle Span 2-3:  Brazil => (country :name (name :op "Brazil"))
Oracle Span 11-12:  dollars => (monetary-quantity :unit dollar)
Oracle Span 25-26:  going => go-01
Oracle Span 20-21:  more => more
Oracle Span 4-6:  South Africa => (country :name (name :op "Africa" :op "South"))
Oracle Span 6-7:  totaled => total-01
Oracle Span 0-1:  Trade => trade-01
Oracle Span 23-24:  trade => trade-01
Oracle Span 9-11:  United States => (country :name (name :op "States" :op "United"))

Extra span: Brazil => (country :name (name :op "Brazil"))
Extra span: dollars => (monetary-quantity :unit dollar)
Extra span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: United States => (country :name (name :op "United" :op "States"))
Incorrect span: South Africa => (country :name (name :op "South" :op "Africa"))
Incorrect span: Trade => trade
Missing span: South Africa => (country :name (name :op "Africa" :op "South"))
Missing span: United States => (country :name (name :op "States" :op "United"))
Missing span: totaled => total-01
Missing span: and => and
Missing span: more => more
Missing span: going => go-01
Missing span: Trade => trade-01
Dependencies:
1	Trade	_	NNP	NNP	_	7	nsubj	_	_
2	between	_	IN	IN	_	1	prep	_	_
3	Brazil	_	NNP	NNP	_	6	nn	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	South	_	NNP	NNP	_	3	conj	_	_
6	Africa	_	NNP	NNP	_	2	pobj	_	_
7	totaled	_	VBD	VBD	_	0	root	_	_
8	696	_	CD	CD	_	9	number	_	_
9	million	_	CD	CD	_	12	num	_	_
10	United	_	NNP	NNP	_	12	nn	_	_
11	States	_	NNPS	NNPS	_	12	nn	_	_
12	dollars	_	NNS	NNS	_	7	dobj	_	_
13	in	_	IN	IN	_	7	prep	_	_
14	020000	_	CD	CD	_	20	num	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	296	_	CD	CD	_	17	num	_	_
17	million	_	CD	CD	_	14	conj	_	_
18	United	_	NNP	NNP	_	20	nn	_	_
19	States	_	NNPS	NNPS	_	20	nn	_	_
20	dollars	_	NNS	NNS	_	13	pobj	_	_
21	more	_	JJR	JJR	_	22	dep	_	_
22	in	_	IN	IN	_	7	prep	_	_
23	the	_	DT	DT	_	25	det	_	_
24	trade	_	NN	NN	_	25	nn	_	_
25	balance	_	NN	NN	_	22	pobj	_	_
26	going	_	VBG	VBG	_	25	vmod	_	_
27	to	_	TO	TO	_	26	prep	_	_
28	Brazil	_	NNP	NNP	_	27	pobj	_	_
29	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, m / monetary-quantity)
(b / balance-01, ARG1, t3 / trade-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(d / dollar, mod, c3 / country)
(d2 / date-entity, year, 2002)
(g / go-01, ARG1, b / balance-01)
(g / go-01, ARG4, c / country)
(m / monetary-quantity, time, d2 / date-entity)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Brazil")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "States")
(n3 / name, op, "United")
(t / total-01, ARG1, t2 / trade-01)
(t / total-01, ARG2, a / and)
(t2 / trade-01, ARG0, c / country)
(t2 / trade-01, ARG2, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(2, 1, 0),Brazil,(country :name (name :op "Brazil")),false), Span(24,25,List(3),balance,balance-01,false), Span(23,24,List(4),trade,trade-01,false), Span(19,20,List(6, 5),dollars,(monetary-quantity :unit dollar),false), Span(17,19,List(10, 9, 8, 7),United States,(country :name (name :op "United" :op "States")),false), Span(13,14,List(12, 11),020000,(date-entity :year 2002),false), Span(11,12,List(14, 13),dollars,(monetary-quantity :unit dollar),false), Span(9,11,List(18, 17, 16, 15),United States,(country :name (name :op "United" :op "States")),false), Span(4,6,List(22, 21, 20, 19),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(2,3,List(25, 24, 23),Brazil,(country :name (name :op "Brazil")),false), Span(0,1,List(26),Trade,trade,false)),Map(2 -> "Brazil", 5 -> monetary-quantity, 12 -> 2002, 8 -> name, 15 -> country, 21 -> "South", 18 -> "States", 24 -> name, 7 -> country, 1 -> name, 17 -> "United", 23 -> country, 26 -> trade, 4 -> trade-01, 11 -> date-entity, 14 -> dollar, 20 -> name, 6 -> dollar, 9 -> "United", 0 -> country, 22 -> "Africa", 16 -> name, 19 -> country, 10 -> "States", 3 -> balance-01, 25 -> "Brazil", 13 -> monetary-quantity),Map(n -> name, 2 -> 2002, b -> balance-01, t -> trade-01, m2 -> monetary-quantity, d3 -> dollar, n4 -> name, c4 -> country, m -> monetary-quantity, d -> dollar, n3 -> name, c3 -> country, d2 -> date-entity, t2 -> trade, c -> country, c2 -> country, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@5db6b845,Annotation([Ljava.lang.String;@378f002a,[Ljava.lang.String;@1afd72ef,[Ljava.lang.String;@2cc75074),Annotation([Ljava.lang.String;@445bb139,[Ljava.lang.String;@b9a77c8,[Ledu.cmu.lti.nlp.amr.Dependency;@7a81065e),Annotation([Ljava.lang.String;@6cd3ad8a,[Ljava.lang.String;@75181b50,[Ljava.lang.String;@2d64160c),Annotation([Ljava.lang.String;@5f254608,[Ljava.lang.String;@2eeb0f9b,[Ledu.cmu.lti.nlp.amr.Entity;@1b1c538d))
AMR:
(b / balance-01, ARG0, t2 / trade)
(b / balance-01, ARG1, t / trade-01)
(b / balance-01, ARG3, m2 / monetary-quantity)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(d / dollar, mod, c2 / country)
(d2 / date-entity, year, 2 / 2002)
(d3 / dollar, mod, c / country)
(d3 / dollar, mod, c3 / country)
(m / monetary-quantity, quant, d2 / date-entity)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Brazil")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / name, op, "Africa")
(n4 / name, op, "South")
(n5 / name, op, "Brazil")
(t / trade-01, ARG1, d2 / date-entity)
(t / trade-01, ARG2, c4 / country)
(t2 / trade, location, c5 / country)

Decoded in 374,832 microseconds
Sentence: The South African Foreign Affairs Department stated that the South African delegation is to brief the Brazilians on progress with the African Union and the New Partnership for Africa' s development.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (thing :name (name :op "Brazilians"))
NER Entity: (organization :name (name :op "African" :op "Union"))
NER Entity: (organization :name (name :op "New" :op "Partnership"))
NER Entity: (thing :name (name :op "Africa" :op "'s"))
Spans:
Span 28-30:  Africa 's => (thing :name (name :op "Africa" :op "'s"))
Span 21-23:  African Union => (organization :name (name :op "Union" :op "African"))
Span 14-15:  brief => brief
Span 11-12:  delegation => delegation
Span 30-31:  development => develop-02
Span 25-27:  New Partnership => (organization :name (name :op "New" :op "Partnership"))
Span 18-19:  progress => progress-01
Span 9-11:  South African => (thing :name (name :op "South" :op "African"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 28-29:  Africa => (continent :name (name :op "Africa"))
Oracle Span 21-23:  African Union => (organization :name (name :op "Union" :op "Africa"))
Oracle Span 23-24:  and => and
Oracle Span 16-17:  Brazilians => (person :mod (country :name (name :op "Brazil")))
Oracle Span 14-15:  brief => brief-01
Oracle Span 11-12:  delegation => delegation
Oracle Span 30-31:  development => develop-02
Oracle Span 3-6:  Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Oracle Span 25-27:  New Partnership => (organization :name (name :op "Partnership" :op "New"))
Oracle Span 18-19:  progress => progress-01
Oracle Span 1-3:  South African => (country :name (name :op "Africa" :op "South"))
Oracle Span 6-7:  stated => state-01

Extra span: Africa 's => (thing :name (name :op "Africa" :op "'s"))
Incorrect span: New Partnership => (organization :name (name :op "New" :op "Partnership"))
Incorrect span: African Union => (organization :name (name :op "Union" :op "African"))
Incorrect span: brief => brief
Extra span: South African => (thing :name (name :op "South" :op "African"))
Incorrect span: South African => (thing :name (name :op "South" :op "African"))
Missing span: Foreign Affairs Department => (government-organization :name (name :op "Department" :op "Affairs" :op "Foreign"))
Missing span: New Partnership => (organization :name (name :op "Partnership" :op "New"))
Missing span: Africa => (continent :name (name :op "Africa"))
Missing span: South African => (country :name (name :op "Africa" :op "South"))
Missing span: Brazilians => (person :mod (country :name (name :op "Brazil")))
Missing span: African Union => (organization :name (name :op "Union" :op "Africa"))
Missing span: stated => state-01
Missing span: brief => brief-01
Missing span: and => and
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	South	_	NNP	NNP	_	6	nn	_	_
3	African	_	NNP	NNP	_	6	nn	_	_
4	Foreign	_	NNP	NNP	_	6	nn	_	_
5	Affairs	_	NNP	NNP	_	6	nn	_	_
6	Department	_	NNP	NNP	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	13	mark	_	_
9	the	_	DT	DT	_	12	det	_	_
10	South	_	NNP	NNP	_	12	nn	_	_
11	African	_	NNP	NNP	_	12	nn	_	_
12	delegation	_	NN	NN	_	13	nsubj	_	_
13	is	_	VBZ	VBZ	_	7	ccomp	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	brief	_	VB	VB	_	13	xcomp	_	_
16	the	_	DT	DT	_	17	det	_	_
17	Brazilians	_	NNS	NNS	_	15	dobj	_	_
18	on	_	IN	IN	_	15	prep	_	_
19	progress	_	NN	NN	_	18	pobj	_	_
20	with	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	23	det	_	_
22	African	_	NNP	NNP	_	23	nn	_	_
23	Union	_	NNP	NNP	_	20	pobj	_	_
24	and	_	CC	CC	_	19	cc	_	_
25	the	_	DT	DT	_	27	det	_	_
26	New	_	NNP	NNP	_	27	nn	_	_
27	Partnership	_	NNP	NNP	_	19	conj	_	_
28	for	_	IN	IN	_	27	prep	_	_
29	Africa	_	NNP	NNP	_	32	poss	_	_
30	'	_	POS	POS	_	29	possessive	_	_
31	s	_	JJ	JJ	_	32	amod	_	_
32	development	_	NN	NN	_	28	pobj	_	_
33	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, o / organization)
(a / and, op, o2 / organization)
(b / brief-01, ARG0, d3 / delegation)
(b / brief-01, ARG1, p2 / person)
(b / brief-01, ARG2, p3 / progress-01)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / continent, name, n6 / name)
(d / develop-02, ARG1, c3 / continent)
(d3 / delegation, mod, c / country)
(g / government-organization, mod, c / country)
(g / government-organization, name, n / name)
(n / name, op, "Affairs")
(n / name, op, "Department")
(n / name, op, "Foreign")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Brazil")
(n4 / name, op, "Africa")
(n4 / name, op, "Union")
(n5 / name, op, "New")
(n5 / name, op, "Partnership")
(n6 / name, op, "Africa")
(o / organization, name, n4 / name)
(o2 / organization, beneficiary, d / develop-02)
(o2 / organization, name, n5 / name)
(p2 / person, mod, c2 / country)
(p3 / progress-01, ARG1, a / and)
(s / state-01, ARG0, g / government-organization)
(s / state-01, ARG1, b / brief-01)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),development,develop-02,false), Span(28,30,List(4, 3, 2, 1),Africa 's,(thing :name (name :op "Africa" :op "'s")),false), Span(25,27,List(8, 7, 6, 5),New Partnership,(organization :name (name :op "New" :op "Partnership")),false), Span(21,23,List(12, 11, 10, 9),African Union,(organization :name (name :op "Union" :op "African")),false), Span(18,19,List(13),progress,progress-01,false), Span(14,15,List(14),brief,brief,false), Span(11,12,List(15),delegation,delegation,false), Span(9,11,List(19, 18, 17, 16),South African,(thing :name (name :op "South" :op "African")),false), Span(1,3,List(23, 22, 21, 20),South African,(thing :name (name :op "South" :op "African")),false)),Map(2 -> name, 5 -> organization, 12 -> "African", 15 -> delegation, 8 -> "Partnership", 21 -> name, 18 -> "South", 7 -> "New", 17 -> name, 1 -> thing, 23 -> "African", 4 -> "'s", 11 -> "Union", 14 -> brief, 20 -> thing, 6 -> name, 22 -> "South", 0 -> develop-02, 9 -> organization, 16 -> thing, 19 -> "African", 3 -> "Africa", 10 -> name, 13 -> progress-01),Map(n -> name, t -> thing, b -> brief, n4 -> name, d -> develop-02, t3 -> thing, p -> progress-01, n3 -> name, o2 -> organization, d2 -> delegation, t2 -> thing, o -> organization, n2 -> name, n5 -> name))),[Ljava.lang.String;@1645f294,Annotation([Ljava.lang.String;@6325f352,[Ljava.lang.String;@15c4af7a,[Ljava.lang.String;@6cbd0674),Annotation([Ljava.lang.String;@55d58825,[Ljava.lang.String;@19a64eae,[Ledu.cmu.lti.nlp.amr.Dependency;@29a98d9f),Annotation([Ljava.lang.String;@2da3b078,[Ljava.lang.String;@544e8149,[Ljava.lang.String;@7fb66650),Annotation([Ljava.lang.String;@1a96d94c,[Ljava.lang.String;@2a869a16,[Ledu.cmu.lti.nlp.amr.Entity;@ae202c6))
AMR:
(b / brief, accompanier, p / progress-01)
(b / brief, domain, d2 / delegation)
(d / develop-02, ARG1, t / thing)
(d2 / delegation, mod, t2 / thing)
(n / name, op, "'s")
(n / name, op, "Africa")
(n2 / name, op, "New")
(n2 / name, op, "Partnership")
(n3 / name, op, "African")
(n3 / name, op, "Union")
(n4 / name, op, "African")
(n4 / name, op, "South")
(n5 / name, op, "African")
(n5 / name, op, "South")
(o / organization, name, n2 / name)
(o / organization, poss, t3 / thing)
(o / organization, topic, d / develop-02)
(o2 / organization, name, n3 / name)
(p / progress-01, ARG1, o2 / organization)
(p / progress-01, ARG2, d / develop-02)
(t / thing, name, n / name)
(t2 / thing, name, n4 / name)
(t3 / thing, name, n5 / name)

Decoded in 195,066 microseconds
Sentence: 2004-04-03

mkDayMonthYear(2004-04-03,03,04,2004)
mkDayMonthYear(2004-04-03,03,04,2004)
Spans:
Span 0-1:  2004-04-03 => (date-entity :day 3 :month 4 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2004-04-03 => (date-entity :day 3 :month 4 :year 2004)

Dependencies:
1	2004-04-03	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 3)
(d / date-entity, month, 4)
(d / date-entity, year, 2004)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-04-03,(date-entity :day 3 :month 4 :year 2004),false)),Map(2 -> 4, 1 -> 3, 0 -> date-entity, 3 -> 2004),Map(2 -> 2004, d -> date-entity, 4 -> 4, 3 -> 3))),[Ljava.lang.String;@46aa712c,Annotation([Ljava.lang.String;@6ada9c0c,[Ljava.lang.String;@7412ed6b,[Ljava.lang.String;@6e7c351d),Annotation([Ljava.lang.String;@7b4a0aef,[Ljava.lang.String;@45cec376,[Ledu.cmu.lti.nlp.amr.Dependency;@26d41711),Annotation([Ljava.lang.String;@298f0a0b,[Ljava.lang.String;@2b960a7,[Ljava.lang.String;@31dfc6f5),Annotation([Ljava.lang.String;@37b52340,[Ljava.lang.String;@663bb8ef,[Ledu.cmu.lti.nlp.amr.Entity;@2f4e40d7))
AMR:
(d / date-entity, day, 3 / 3)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)

Decoded in 8,404 microseconds
Sentence: Russia (RU)

NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "RU"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Russia => (country :name (name :op "Russia"))

Incorrect span:  => amr-empty
Missing span: Russia => (country :name (name :op "Russia"))
Dependencies:
1	Russia	_	NNP	NNP	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	RU	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Russia")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@60e9c3a5,Annotation([Ljava.lang.String;@7e5843db,[Ljava.lang.String;@459f703f,[Ljava.lang.String;@188ac8a3),Annotation([Ljava.lang.String;@3650d4fc,[Ljava.lang.String;@aaa0f76,[Ledu.cmu.lti.nlp.amr.Dependency;@340a8894),Annotation([Ljava.lang.String;@7a8b9166,[Ljava.lang.String;@4acc5dff,[Ljava.lang.String;@10c72a6f),Annotation([Ljava.lang.String;@70e94ecb,[Ljava.lang.String;@56cfe111,[Ledu.cmu.lti.nlp.amr.Entity;@7e446d92))
AMR:


Decoded in 4,185 microseconds
Sentence: International; Government; technology; military; space; leader

Spans:
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 10-11:  leader => (person :ARG0-of lead-02)
Oracle Span 6-7:  military => military
Oracle Span 8-9:  space => space
Oracle Span 4-5:  technology => technology

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: leader => (person :ARG0-of lead-02)
Missing span: space => space
Missing span: military => military
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	Government	_	NNP	NNP	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	technology	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	5	punct	_	_
7	military	_	NN	NN	_	5	dep	_	_
8	;	_	:	:	_	5	punct	_	_
9	space	_	NN	NN	_	5	dep	_	_
10	;	_	:	:	_	9	punct	_	_
11	leader	_	NN	NN	_	9	dep	_	_

Oracle:
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, m / military)
(a / and, op, p / person)
(a / and, op, s / space)
(a / and, op, t / technology)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),;,and,false), Span(7,8,List(1),;,and,false), Span(5,6,List(2),;,and,false), Span(4,5,List(3),technology,technology,false), Span(3,4,List(4),;,and,false), Span(1,2,List(5),;,and,false)),Map(2 -> and, 5 -> and, 1 -> and, 4 -> and, 0 -> and, 3 -> technology),Map(t -> technology, a3 -> and, a -> and, a5 -> and, a2 -> and, a4 -> and))),[Ljava.lang.String;@57f9b467,Annotation([Ljava.lang.String;@6d5c2745,[Ljava.lang.String;@44b29496,[Ljava.lang.String;@1947596f),Annotation([Ljava.lang.String;@3078cac,[Ljava.lang.String;@f6de586,[Ledu.cmu.lti.nlp.amr.Dependency;@5f2bd6d9),Annotation([Ljava.lang.String;@7c847072,[Ljava.lang.String;@43d9f1a2,[Ljava.lang.String;@23f86d8a),Annotation([Ljava.lang.String;@2264ea32,[Ljava.lang.String;@7d3c09ec,[Ledu.cmu.lti.nlp.amr.Entity;@71e4b308))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, t / technology)
(a5 / and, op, a4 / and)

Decoded in 30,828 microseconds
Sentence: French President Jacques Chirac became the first Western leader to visit the top-secret Russian Titov test and control space center in Krasnoznamernsk

NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Jacques" :op "Chirac"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 4-5:  became => become-01
Span 21-22:  center => center
Span 19-20:  control => control-01
Span 2-4:  Jacques Chirac => (person :name (name :op "Chirac" :op "Jacques"))
Span 1-2:  President => (have-org-role-91 :ARG2 president)
Span 14-15:  secret => secret
Span 17-18:  test => test-01
Span 12-13:  top => top
Span 10-11:  visit => visit-01
Span 7-8:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  became => become-01
Oracle Span 21-22:  center => center
Oracle Span 19-20:  control => control-01
Oracle Span 0-1:  French => (country :name (name :op "France"))
Oracle Span 2-4:  Jacques Chirac => (person :name (name :op "Chirac" :op "Jacques"))
Oracle Span 23-24:  Krasnoznamernsk => (city :name (name :op "Krasnoznamernsk"))
Oracle Span 8-9:  leader => (person :ARG0-of lead-02)
Oracle Span 1-2:  President => (have-org-role-91 :ARG2 president)
Oracle Span 15-16:  Russian => (country :name (name :op "Russia"))
Oracle Span 14-15:  secret => secret
Oracle Span 20-21:  space => space
Oracle Span 17-18:  test => test-01
Oracle Span 16-17:  Titov => (name :op "Titov")
Oracle Span 12-13:  top => top
Oracle Span 10-11:  visit => visit-01
Oracle Span 7-8:  Western => (world-region :name (name :op "West"))

Missing span: Titov => (name :op "Titov")
Missing span: Krasnoznamernsk => (city :name (name :op "Krasnoznamernsk"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: leader => (person :ARG0-of lead-02)
Missing span: space => space
Missing span: French => (country :name (name :op "France"))
Dependencies:
1	French	_	NNP	NNP	_	4	nn	_	_
2	President	_	NNP	NNP	_	4	nn	_	_
3	Jacques	_	NNP	NNP	_	4	nn	_	_
4	Chirac	_	NNP	NNP	_	5	nsubj	_	_
5	became	_	VBD	VBD	_	0	root	_	_
6	the	_	DT	DT	_	9	det	_	_
7	first	_	JJ	JJ	_	9	amod	_	_
8	Western	_	JJ	JJ	_	9	amod	_	_
9	leader	_	NN	NN	_	5	xcomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	visit	_	VB	VB	_	5	vmod	_	_
12	the	_	DT	DT	_	16	det	_	_
13	top-secret	_	JJ	JJ	_	16	amod	_	_
14	Russian	_	NNP	NNP	_	16	nn	_	_
15	Titov	_	NNP	NNP	_	16	nn	_	_
16	test	_	NN	NN	_	11	dobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	control	_	NN	NN	_	20	nn	_	_
19	space	_	NN	NN	_	20	nn	_	_
20	center	_	NN	NN	_	16	conj	_	_
21	in	_	IN	IN	_	11	prep	_	_
22	Krasnoznamernsk	_	NNP	NNP	_	21	pobj	_	_

Oracle:
(b / become-01, ARG1, p2 / person)
(b / become-01, ARG2, p / person)
(c / country, name, n3 / name)
(c2 / center, location, c5 / city)
(c2 / center, mod, c3 / control-01)
(c2 / center, mod, c4 / country)
(c2 / center, mod, s / space)
(c2 / center, mod, s2 / secret)
(c2 / center, mod, t / test-01)
(c2 / center, name, n4 / name)
(c4 / country, name, n5 / name)
(c5 / city, name, n6 / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p3 / president)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, w / world-region)
(n / name, op, "West")
(n2 / name, op, "Chirac")
(n2 / name, op, "Jacques")
(n3 / name, op, "France")
(n4 / name, op, "Titov")
(n5 / name, op, "Russia")
(n6 / name, op, "Krasnoznamernsk")
(p2 / person, name, n2 / name)
(s2 / secret, degree, t2 / top)
(v / visit-01, ARG0, l / lead-02)
(v / visit-01, ARG1, c2 / center)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),center,center,false), Span(19,20,List(1),control,control-01,false), Span(17,18,List(2),test,test-01,false), Span(14,15,List(3),secret,secret,false), Span(12,13,List(4),top,top,false), Span(10,11,List(5),visit,visit-01,false), Span(7,8,List(8, 7, 6),Western,(world-region :name (name :op "West")),false), Span(4,5,List(9),became,become-01,false), Span(2,4,List(13, 12, 11, 10),Jacques Chirac,(person :name (name :op "Chirac" :op "Jacques")),false), Span(1,2,List(15, 14),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> test-01, 5 -> visit-01, 12 -> "Chirac", 15 -> president, 8 -> "West", 7 -> name, 1 -> control-01, 4 -> top, 11 -> name, 14 -> have-org-role-91, 6 -> world-region, 0 -> center, 9 -> become-01, 3 -> secret, 10 -> person, 13 -> "Jacques"),Map(w -> world-region, n -> name, h -> have-org-role-91, t -> test-01, b -> become-01, p2 -> president, s -> secret, v -> visit-01, p -> person, t2 -> top, c -> center, c2 -> control-01, n2 -> name))),[Ljava.lang.String;@11900483,Annotation([Ljava.lang.String;@14a049f9,[Ljava.lang.String;@94e51e8,[Ljava.lang.String;@5de6cf3a),Annotation([Ljava.lang.String;@4cc36c19,[Ljava.lang.String;@5a3a1bf9,[Ledu.cmu.lti.nlp.amr.Dependency;@2100d047),Annotation([Ljava.lang.String;@4af45442,[Ljava.lang.String;@1d805aa1,[Ljava.lang.String;@176f7f3b),Annotation([Ljava.lang.String;@30ca0779,[Ljava.lang.String;@58740366,[Ledu.cmu.lti.nlp.amr.Entity;@47be0f9b))
AMR:
(b / become-01, ARG1, p / person)
(c2 / control-01, ARG0, c / center)
(c2 / control-01, ARG1, w / world-region)
(c2 / control-01, ARG3, t / test-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "West")
(n2 / name, op, "Chirac")
(n2 / name, op, "Jacques")
(p / person, name, n2 / name)
(t / test-01, mod, s / secret)
(t / test-01, mod, t2 / top)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, t / test-01)
(w / world-region, name, n / name)

Decoded in 146,412 microseconds
Sentence: On 040403 visiting French President Jacques Chirac became the first Western leader to visit the top-secret Russian Titov test and control space center.

mkDayMonthYear(040403,03,04,2004)
mkDayMonthYear(040403,03,04,04)
NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Jacques" :op "Chirac"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Western"))
mkDayMonthYear(040403,03,04,2004)
mkDayMonthYear(040403,03,04,04)
Spans:
Span 1-2:  040403 => (date-entity :day 3 :month 4 :year 04)
Span 7-8:  became => become-01
Span 24-25:  center => center
Span 22-23:  control => control-01
Span 5-7:  Jacques Chirac => (person :name (name :op "Chirac" :op "Jacques"))
Span 4-5:  President => (have-org-role-91 :ARG2 president)
Span 17-18:  secret => secret
Span 20-21:  test => test-01
Span 15-16:  top => top
Span 13-14:  visit => visit-01
Span 2-3:  visiting => visit-01
Span 10-11:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  040403 => (date-entity :day 3 :month 4 :year 2004)
Oracle Span 7-8:  became => become-01
Oracle Span 24-25:  center => center
Oracle Span 22-23:  control => control-01
Oracle Span 3-4:  French => (country :name (name :op "France"))
Oracle Span 5-7:  Jacques Chirac => (person :name (name :op "Chirac" :op "Jacques"))
Oracle Span 11-12:  leader => (person :ARG0-of lead-02)
Oracle Span 4-5:  President => (have-org-role-91 :ARG2 president)
Oracle Span 18-19:  Russian => (country :name (name :op "Russia"))
Oracle Span 23-24:  space => space
Oracle Span 20-21:  test => test-01
Oracle Span 19-20:  Titov => (name :op "Titov")
Oracle Span 13-14:  visit => visit-01
Oracle Span 2-3:  visiting => visit-01
Oracle Span 10-11:  Western => (world-region :name (name :op "West"))

Extra span: secret => secret
Extra span: top => top
Incorrect span: 040403 => (date-entity :day 3 :month 4 :year 04)
Missing span: Titov => (name :op "Titov")
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: 040403 => (date-entity :day 3 :month 4 :year 2004)
Missing span: leader => (person :ARG0-of lead-02)
Missing span: space => space
Missing span: French => (country :name (name :op "France"))
Dependencies:
1	On	_	IN	IN	_	8	prep	_	_
2	040403	_	CD	CD	_	1	pobj	_	_
3	visiting	_	NNP	NNP	_	7	nn	_	_
4	French	_	NNP	NNP	_	7	nn	_	_
5	President	_	NNP	NNP	_	7	nn	_	_
6	Jacques	_	NNP	NNP	_	7	nn	_	_
7	Chirac	_	NNP	NNP	_	8	nsubj	_	_
8	became	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	12	det	_	_
10	first	_	JJ	JJ	_	12	amod	_	_
11	Western	_	JJ	JJ	_	12	amod	_	_
12	leader	_	NN	NN	_	8	xcomp	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	visit	_	VB	VB	_	8	vmod	_	_
15	the	_	DT	DT	_	19	det	_	_
16	top-secret	_	JJ	JJ	_	19	amod	_	_
17	Russian	_	NNP	NNP	_	19	nn	_	_
18	Titov	_	NNP	NNP	_	19	nn	_	_
19	test	_	NN	NN	_	14	dobj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	control	_	NN	NN	_	23	nn	_	_
22	space	_	NN	NN	_	23	nn	_	_
23	center	_	NN	NN	_	19	conj	_	_
24	.	_	.	.	_	8	punct	_	_

Oracle:
(b / become-01, ARG1, p2 / person)
(b / become-01, ARG2, p / person)
(c / country, name, n3 / name)
(c2 / center, mod, c3 / control-01)
(c2 / center, mod, c4 / country)
(c2 / center, mod, s / space)
(c2 / center, mod, t / test-01)
(c2 / center, name, n4 / name)
(c4 / country, name, n5 / name)
(d2 / date-entity, day, 3)
(d2 / date-entity, month, 4)
(d2 / date-entity, year, 2004)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p3 / president)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, w / world-region)
(n / name, op, "West")
(n2 / name, op, "Chirac")
(n2 / name, op, "Jacques")
(n3 / name, op, "France")
(n4 / name, op, "Titov")
(n5 / name, op, "Russia")
(p / person, time, d2 / date-entity)
(p2 / person, name, n2 / name)
(v / visit-01, ARG0, p2 / person)
(v2 / visit-01, ARG0, p / person)
(v2 / visit-01, ARG1, c2 / center)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),center,center,false), Span(22,23,List(1),control,control-01,false), Span(20,21,List(2),test,test-01,false), Span(17,18,List(3),secret,secret,false), Span(15,16,List(4),top,top,false), Span(13,14,List(5),visit,visit-01,false), Span(10,11,List(8, 7, 6),Western,(world-region :name (name :op "West")),false), Span(7,8,List(9),became,become-01,false), Span(5,7,List(13, 12, 11, 10),Jacques Chirac,(person :name (name :op "Chirac" :op "Jacques")),false), Span(4,5,List(15, 14),President,(have-org-role-91 :ARG2 president),false), Span(2,3,List(16),visiting,visit-01,false), Span(1,2,List(20, 19, 18, 17),040403,(date-entity :day 3 :month 4 :year 04),false)),Map(2 -> test-01, 5 -> visit-01, 12 -> "Chirac", 15 -> president, 8 -> "West", 18 -> 3, 7 -> name, 17 -> date-entity, 1 -> control-01, 4 -> top, 11 -> name, 14 -> have-org-role-91, 20 -> 04, 6 -> world-region, 0 -> center, 9 -> become-01, 16 -> visit-01, 19 -> 4, 3 -> secret, 10 -> person, 13 -> "Jacques"),Map(v2 -> visit-01, w -> world-region, n -> name, h -> have-org-role-91, t -> test-01, b -> become-01, p2 -> president, s -> secret, v -> visit-01, d -> date-entity, p -> person, 4 -> 4, t2 -> top, c -> center, 0 -> 04, 3 -> 3, c2 -> control-01, n2 -> name))),[Ljava.lang.String;@2bc426f0,Annotation([Ljava.lang.String;@4bd51d3e,[Ljava.lang.String;@33425811,[Ljava.lang.String;@4b74b35),Annotation([Ljava.lang.String;@e4e1ef5,[Ljava.lang.String;@6d11ceef,[Ledu.cmu.lti.nlp.amr.Dependency;@4cb2918c),Annotation([Ljava.lang.String;@72e295cc,[Ljava.lang.String;@c2584d3,[Ljava.lang.String;@6fa0450e),Annotation([Ljava.lang.String;@37468787,[Ljava.lang.String;@51ec2856,[Ledu.cmu.lti.nlp.amr.Entity;@714f3da4))
AMR:
(b / become-01, ARG1, p / person)
(b / become-01, time, d / date-entity)
(c2 / control-01, ARG0, c / center)
(c2 / control-01, ARG1, w / world-region)
(c2 / control-01, ARG3, t / test-01)
(d / date-entity, day, 3 / 3)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 0 / 04)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "West")
(n2 / name, op, "Chirac")
(n2 / name, op, "Jacques")
(p / person, name, n2 / name)
(t / test-01, mod, s / secret)
(t / test-01, mod, t2 / top)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, t / test-01)
(v2 / visit-01, ARG0, p / person)
(w / world-region, name, n / name)

Decoded in 203,848 microseconds
Sentence: Chirac flew into Krasnoznamernsk for a meeting with Russian President Vladimir Putin at the space center.

NER Entity: (person :name (name :op "Chirac"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Vladimir" :op "Putin"))
NER Entity: (person :name (name :op "Chirac"))
Spans:
Span 15-16:  center => center
Span 0-1:  Chirac => (person :name (name :op "Chirac"))
Span 1-2:  flew => fly-01
Span 9-10:  President => (have-org-role-91 :ARG2 president)
Span 10-12:  Vladimir Putin => (person :name (name :op "Vladimir" :op "Putin"))

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 15-16:  center => center
Oracle Span 0-1:  Chirac => (person :name (name :op "Chirac"))
Oracle Span 1-2:  flew => fly-01
Oracle Span 3-4:  Krasnoznamernsk => (city :name (name :op "Krasnoznamernsk"))
Oracle Span 6-7:  meeting => meet-03
Oracle Span 9-10:  President => (have-org-role-91 :ARG2 president)
Oracle Span 8-9:  Russian => (country :name (name :op "Russia"))
Oracle Span 14-15:  space => space
Oracle Span 10-12:  Vladimir Putin => (person :name (name :op "Putin" :op "Vladimir"))

Incorrect span: Vladimir Putin => (person :name (name :op "Vladimir" :op "Putin"))
Missing span: Krasnoznamernsk => (city :name (name :op "Krasnoznamernsk"))
Missing span: Vladimir Putin => (person :name (name :op "Putin" :op "Vladimir"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: meeting => meet-03
Missing span: space => space
Dependencies:
1	Chirac	_	NNP	NNP	_	2	nsubj	_	_
2	flew	_	VBD	VBD	_	0	root	_	_
3	into	_	IN	IN	_	2	prep	_	_
4	Krasnoznamernsk	_	NNP	NNP	_	3	pobj	_	_
5	for	_	IN	IN	_	2	prep	_	_
6	a	_	DT	DT	_	7	det	_	_
7	meeting	_	NN	NN	_	5	pobj	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	Russian	_	NNP	NNP	_	12	nn	_	_
10	President	_	NNP	NNP	_	12	nn	_	_
11	Vladimir	_	NNP	NNP	_	12	nn	_	_
12	Putin	_	NNP	NNP	_	8	pobj	_	_
13	at	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	space	_	NN	NN	_	16	nn	_	_
16	center	_	NN	NN	_	13	pobj	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(c / city, name, n2 / name)
(c2 / country, name, n4 / name)
(c3 / center, mod, s / space)
(f / fly-01, ARG0, p / person)
(f / fly-01, destination, c / city)
(f / fly-01, purpose, m / meet-03)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, p3 / president)
(m / meet-03, ARG0, p / person)
(m / meet-03, ARG1, p2 / person)
(m / meet-03, location, c3 / center)
(n / name, op, "Chirac")
(n2 / name, op, "Krasnoznamernsk")
(n3 / name, op, "Putin")
(n3 / name, op, "Vladimir")
(n4 / name, op, "Russia")
(p / person, name, n / name)
(p2 / person, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),center,center,false), Span(10,12,List(4, 3, 2, 1),Vladimir Putin,(person :name (name :op "Vladimir" :op "Putin")),false), Span(9,10,List(6, 5),President,(have-org-role-91 :ARG2 president),false), Span(1,2,List(7),flew,fly-01,false), Span(0,1,List(10, 9, 8),Chirac,(person :name (name :op "Chirac")),false)),Map(2 -> name, 5 -> have-org-role-91, 8 -> person, 7 -> fly-01, 1 -> person, 4 -> "Putin", 6 -> president, 9 -> name, 0 -> center, 10 -> "Chirac", 3 -> "Vladimir"),Map(n -> name, h -> have-org-role-91, p2 -> president, p -> person, c -> center, f -> fly-01, n2 -> name, p3 -> person))),[Ljava.lang.String;@1caa9eb6,Annotation([Ljava.lang.String;@1f53481b,[Ljava.lang.String;@2fcd7d3f,[Ljava.lang.String;@27e7c77f),Annotation([Ljava.lang.String;@6f70a21b,[Ljava.lang.String;@6ae62c7e,[Ledu.cmu.lti.nlp.amr.Dependency;@2e869098),Annotation([Ljava.lang.String;@37c36608,[Ljava.lang.String;@5d497a91,[Ljava.lang.String;@617389a),Annotation([Ljava.lang.String;@1c8f6a90,[Ljava.lang.String;@3050ac2f,[Ledu.cmu.lti.nlp.amr.Entity;@265bd546))
AMR:
(f / fly-01, ARG0, p3 / person)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, p3 / person)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Putin")
(n / name, op, "Vladimir")
(n2 / name, op, "Chirac")
(p / person, name, n / name)
(p / person, poss, c / center)
(p3 / person, name, n2 / name)

Decoded in 126,022 microseconds
Sentence: Putin and Russian Defense Minister Sergei Ivanov greeted Chirac at the space center some 40 km southwest of Moscow in Krasnoznamernsk.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Sergei" :op "Ivanov"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 14-15:  40 => 40
Span 12-13:  center => center
Span 8-9:  Chirac => (person :name (name :op "Chirac"))
Span 4-5:  Minister => (have-org-role-91 :ARG2 minister)
Span 18-19:  Moscow => (city :name (name :op "Moscow"))
Span 0-1:  Putin => (person :name (name :op "Putin"))
Span 5-7:  Sergei Ivanov => (person :name (name :op "Sergei" :op "Ivanov"))
Span 13-14:  some => some
Span 16-17:  southwest => southwest

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Oracle Span 14-15:  40 => 40
Oracle Span 1-2:  and => and
Oracle Span 12-13:  center => center
Oracle Span 8-9:  Chirac => (person :name (name :op "Chirac"))
Oracle Span 3-4:  Defense => defense
Oracle Span 7-8:  greeted => greet-01
Oracle Span 20-21:  Krasnoznamernsk => (city :name (name :op "Krasnoznamernsk"))
Oracle Span 4-5:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 18-19:  Moscow => (city :name (name :op "Moscow"))
Oracle Span 0-1:  Putin => (person :name (name :op "Putin"))
Oracle Span 2-3:  Russian => (country :name (name :op "Russia"))
Oracle Span 5-7:  Sergei Ivanov => (person :name (name :op "Ivanov" :op "Sergei"))
Oracle Span 13-14:  some => some
Oracle Span 16-17:  southwest => southwest
Oracle Span 11-12:  space => space

Incorrect span: Sergei Ivanov => (person :name (name :op "Sergei" :op "Ivanov"))
Missing span: Sergei Ivanov => (person :name (name :op "Ivanov" :op "Sergei"))
Missing span: Krasnoznamernsk => (city :name (name :op "Krasnoznamernsk"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: greeted => greet-01
Missing span: space => space
Missing span: and => and
Missing span: Defense => defense
Dependencies:
1	Putin	_	NNP	NNP	_	7	nn	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Russian	_	NNP	NNP	_	1	conj	_	_
4	Defense	_	NNP	NNP	_	7	nn	_	_
5	Minister	_	NNP	NNP	_	7	nn	_	_
6	Sergei	_	NNP	NNP	_	7	nn	_	_
7	Ivanov	_	NNP	NNP	_	8	nsubj	_	_
8	greeted	_	VBD	VBD	_	0	root	_	_
9	Chirac	_	NNP	NNP	_	8	dobj	_	_
10	at	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	space	_	NN	NN	_	13	nn	_	_
13	center	_	NN	NN	_	10	pobj	_	_
14	some	_	DT	DT	_	17	det	_	_
15	40	_	CD	CD	_	17	num	_	_
16	km	_	NN	NN	_	17	nn	_	_
17	southwest	_	NN	NN	_	8	tmod	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	Moscow	_	NNP	NNP	_	18	pobj	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	Krasnoznamernsk	_	NNP	NNP	_	20	pobj	_	_
22	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, p / person)
(a / and, op, p2 / person)
(c / country, name, n3 / name)
(c2 / center, location, c4 / city)
(c2 / center, mod, s2 / space)
(c3 / city, name, n5 / name)
(c4 / city, name, n6 / name)
(g / greet-01, ARG0, a / and)
(g / greet-01, ARG1, p3 / person)
(g / greet-01, location, c2 / center)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, d2 / defense)
(n / name, op, "Putin")
(n2 / name, op, "Ivanov")
(n2 / name, op, "Sergei")
(n3 / name, op, "Russia")
(n4 / name, op, "Chirac")
(n5 / name, op, "Moscow")
(n6 / name, op, "Krasnoznamernsk")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / person, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(2, 1, 0),Moscow,(city :name (name :op "Moscow")),false), Span(16,17,List(3),southwest,southwest,false), Span(14,15,List(4),40,40,false), Span(13,14,List(5),some,some,false), Span(12,13,List(6),center,center,false), Span(8,9,List(9, 8, 7),Chirac,(person :name (name :op "Chirac")),false), Span(5,7,List(13, 12, 11, 10),Sergei Ivanov,(person :name (name :op "Sergei" :op "Ivanov")),false), Span(4,5,List(15, 14),Minister,(have-org-role-91 :ARG2 minister),false), Span(0,1,List(18, 17, 16),Putin,(person :name (name :op "Putin")),false)),Map(2 -> "Moscow", 5 -> some, 12 -> "Sergei", 15 -> minister, 8 -> name, 18 -> "Putin", 7 -> person, 17 -> name, 1 -> name, 4 -> 40, 11 -> name, 14 -> have-org-role-91, 6 -> center, 0 -> city, 9 -> "Chirac", 16 -> person, 3 -> southwest, 10 -> person, 13 -> "Ivanov"),Map(n -> name, h -> have-org-role-91, s2 -> some, p2 -> person, n4 -> name, s -> southwest, m -> minister, p -> person, 4 -> 40, n3 -> name, c -> city, p3 -> person, c2 -> center, n2 -> name))),[Ljava.lang.String;@1937eaff,Annotation([Ljava.lang.String;@7e0bc8a3,[Ljava.lang.String;@4b0f2299,[Ljava.lang.String;@33063f5b),Annotation([Ljava.lang.String;@15405bd6,[Ljava.lang.String;@352ed70d,[Ledu.cmu.lti.nlp.amr.Dependency;@70730db),Annotation([Ljava.lang.String;@5793b87,[Ljava.lang.String;@12704e15,[Ljava.lang.String;@512575e9),Annotation([Ljava.lang.String;@6f1a16fe,[Ljava.lang.String;@2373ad99,[Ledu.cmu.lti.nlp.amr.Entity;@33634f04))
AMR:
(c / city, location, c2 / center)
(c / city, name, n / name)
(c2 / center, name, p3 / person)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, 4 / 40)
(h / have-org-role-91, ARG2, m / minister)
(n / name, op, "Moscow")
(n2 / name, op, "Chirac")
(n3 / name, op, "Ivanov")
(n3 / name, op, "Sergei")
(n4 / name, op, "Putin")
(p / person, consist, p2 / person)
(p / person, name, n2 / name)
(p / person, poss, c2 / center)
(p2 / person, name, n3 / name)
(p3 / person, name, n4 / name)
(s / southwest, location, c / city)
(s / southwest, mod, s2 / some)

Decoded in 932,673 microseconds
Sentence: The closed Soviet-era military facility was founded in 570000 and collects and analyzes all information gathered from Russia's military spy satellites.

NER Entity: (thing :name (name :op "Soviet" :op "-" :op "era"))
mkDayMonthYear(570000,00,00,57)
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
mkDayMonthYear(570000,00,00,57)
Spans:
Span 10-11:  570000 => (date-entity :day 0 :month 0 :year 57)
Span 15-16:  all => all
Span 1-2:  closed => close-01
Span 4-5:  era => era
Span 6-7:  facility => facility
Span 8-9:  founded => found-01
Span 17-18:  gathered => gather-01
Span 16-17:  information => information
Span 23-24:  satellites => satellite
Span 22-23:  spy => spy-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 15-16:  all => all
Oracle Span 14-15:  analyzes => analyze-01
Oracle Span 11-12:  and => and
Oracle Span 1-2:  closed => close
Oracle Span 12-13:  collects => collect-01
Oracle Span 4-5:  era => era
Oracle Span 6-7:  facility => facility
Oracle Span 8-9:  founded => found-01
Oracle Span 17-18:  gathered => gather-01
Oracle Span 16-17:  information => information
Oracle Span 5-6:  military => military
Oracle Span 21-22:  military => military
Oracle Span 19-20:  Russia => (country :name (name :op "Russia"))
Oracle Span 23-24:  satellites => satellite
Oracle Span 2-3:  Soviet => "Soviet"
Oracle Span 22-23:  spy => spy-01

Extra span: 570000 => (date-entity :day 0 :month 0 :year 57)
Incorrect span: closed => close-01
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: and => and
Missing span: analyzes => analyze-01
Missing span: military => military
Missing span: collects => collect-01
Missing span: closed => close
Missing span: Soviet => "Soviet"
Missing span: military => military
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	closed	_	JJ	JJ	_	5	amod	_	_
3	Soviet-era	_	JJ	JJ	_	5	amod	_	_
4	military	_	JJ	JJ	_	5	amod	_	_
5	facility	_	NN	NN	_	7	nsubjpass	_	_
6	was	_	VBD	VBD	_	7	auxpass	_	_
7	founded	_	VBN	VBN	_	0	root	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	570000	_	CD	CD	_	8	pobj	_	_
10	and	_	CC	CC	_	7	cc	_	_
11	collects	_	VBZ	VBZ	_	7	conj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	analyzes	_	VBZ	VBZ	_	11	conj	_	_
14	all	_	DT	DT	_	15	det	_	_
15	information	_	NN	NN	_	11	dobj	_	_
16	gathered	_	VBN	VBN	_	15	vmod	_	_
17	from	_	IN	IN	_	16	prep	_	_
18	Russia	_	NNP	NNP	_	22	poss	_	_
19	's	_	POS	POS	_	18	possessive	_	_
20	military	_	JJ	JJ	_	22	amod	_	_
21	spy	_	NN	NN	_	22	nn	_	_
22	satellites	_	NNS	NNS	_	17	pobj	_	_
23	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, a2 / analyze-01)
(a / and, op, c3 / collect-01)
(a / and, op, f / found-01)
(a2 / analyze-01, ARG0, f2 / facility)
(a2 / analyze-01, ARG1, i / information)
(c3 / collect-01, ARG0, f2 / facility)
(c3 / collect-01, ARG1, i / information)
(c4 / country, name, n2 / name)
(f / found-01, ARG1, f2 / facility)
(f2 / facility, mod, c2 / close)
(f2 / facility, mod, m / military)
(f2 / facility, time, e / era)
(g / gather-01, ARG1, i / information)
(g / gather-01, source, s / satellite)
(i / information, quant, a3 / all)
(n2 / name, op, "Russia")
(s / satellite, mod, c4 / country)
(s / satellite, mod, m2 / military)
(s / satellite, mod, s2 / spy-01)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),satellites,satellite,false), Span(22,23,List(1),spy,spy-01,false), Span(17,18,List(2),gathered,gather-01,false), Span(16,17,List(3),information,information,false), Span(15,16,List(4),all,all,false), Span(10,11,List(8, 7, 6, 5),570000,(date-entity :day 0 :month 0 :year 57),false), Span(8,9,List(9),founded,found-01,false), Span(6,7,List(10),facility,facility,false), Span(4,5,List(11),era,era,false), Span(1,2,List(12),closed,close-01,false)),Map(2 -> gather-01, 5 -> date-entity, 12 -> close-01, 8 -> 57, 7 -> 0, 1 -> spy-01, 4 -> all, 11 -> era, 6 -> 0, 0 -> satellite, 9 -> found-01, 3 -> information, 10 -> facility),Map(e -> era, s2 -> spy-01, 5 -> 57, s -> satellite, d -> date-entity, g -> gather-01, a -> all, 02 -> 0, i -> information, c -> close-01, f2 -> facility, 0 -> 0, f -> found-01))),[Ljava.lang.String;@4993febc,Annotation([Ljava.lang.String;@7601bc96,[Ljava.lang.String;@48a0c8aa,[Ljava.lang.String;@6192a5d5),Annotation([Ljava.lang.String;@3722c145,[Ljava.lang.String;@4cbc2e3b,[Ledu.cmu.lti.nlp.amr.Dependency;@2975a9e),Annotation([Ljava.lang.String;@765ffb14,[Ljava.lang.String;@57562473,[Ljava.lang.String;@7a360554),Annotation([Ljava.lang.String;@424de326,[Ljava.lang.String;@4bc33720,[Ledu.cmu.lti.nlp.amr.Entity;@2dd0f797))
AMR:
(c / close-01, ARG1, f2 / facility)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 5 / 57)
(f / found-01, ARG0, i / information)
(f / found-01, ARG1, f2 / facility)
(f / found-01, time, d / date-entity)
(f2 / facility, mod, e / era)
(g / gather-01, ARG0, s / satellite)
(g / gather-01, ARG1, i / information)
(i / information, mod, a / all)
(s / satellite, mod, s2 / spy-01)

Decoded in 340,983 microseconds
Sentence: The space center is also involved in launches of intercontinental ballistic missiles and is working on a plan to develop defensive early warning systems.

Spans:
Span 2-3:  center => center
Span 20-21:  defensive => defend-01
Span 19-20:  develop => develop-02
Span 21-22:  early => early
Span 9-10:  intercontinental => intercontinental
Span 5-6:  involved => involve-01
Span 7-8:  launches => launch-01
Span 11-12:  missiles => missile
Span 23-24:  systems => system
Span 22-23:  warning => warn-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 4-5:  also => also
Oracle Span 12-13:  and => and
Oracle Span 10-11:  ballistic => ballistics
Oracle Span 2-3:  center => center
Oracle Span 20-21:  defensive => defend-01
Oracle Span 19-20:  develop => develop-02
Oracle Span 21-22:  early => early
Oracle Span 9-10:  intercontinental => intercontinental
Oracle Span 5-6:  involved => involve-01
Oracle Span 7-8:  launches => launch-01
Oracle Span 11-12:  missiles => missile
Oracle Span 17-18:  plan => plan
Oracle Span 1-2:  space => space
Oracle Span 23-24:  systems => system
Oracle Span 22-23:  warning => warn-01
Oracle Span 14-15:  working => work-01

Missing span: and => and
Missing span: working => work-01
Missing span: plan => plan
Missing span: also => also
Missing span: space => space
Missing span: ballistic => ballistics
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	space	_	NN	NN	_	3	nn	_	_
3	center	_	NN	NN	_	6	nsubjpass	_	_
4	is	_	VBZ	VBZ	_	6	auxpass	_	_
5	also	_	RB	RB	_	6	advmod	_	_
6	involved	_	VBN	VBN	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	launches	_	NNS	NNS	_	7	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	intercontinental	_	JJ	JJ	_	12	amod	_	_
11	ballistic	_	JJ	JJ	_	12	amod	_	_
12	missiles	_	NNS	NNS	_	9	pobj	_	_
13	and	_	CC	CC	_	6	cc	_	_
14	is	_	VBZ	VBZ	_	15	aux	_	_
15	working	_	VBG	VBG	_	6	conj	_	_
16	on	_	IN	IN	_	15	prep	_	_
17	a	_	DT	DT	_	18	det	_	_
18	plan	_	NN	NN	_	16	pobj	_	_
19	to	_	TO	TO	_	20	aux	_	_
20	develop	_	VB	VB	_	15	xcomp	_	_
21	defensive	_	JJ	JJ	_	24	amod	_	_
22	early	_	JJ	JJ	_	24	amod	_	_
23	warning	_	NN	NN	_	24	nn	_	_
24	systems	_	NNS	NNS	_	20	dobj	_	_
25	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, i / involve-01)
(a / and, op, w / work-01)
(c / center, mod, s / space)
(d / develop-02, ARG0, c / center)
(d / develop-02, ARG1, s2 / system)
(d2 / defend-01, ARG0, s2 / system)
(i / involve-01, ARG1, c / center)
(i / involve-01, ARG2, l / launch-01)
(i / involve-01, mod, a2 / also)
(l / launch-01, ARG1, m / missile)
(m / missile, mod, b / ballistics)
(m / missile, mod, i2 / intercontinental)
(w / work-01, ARG0, c / center)
(w / work-01, ARG1, p / plan)
(w / work-01, purpose, d / develop-02)
(w2 / warn-01, ARG0, s2 / system)
(w2 / warn-01, time, e / early)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),systems,system,false), Span(22,23,List(1),warning,warn-01,false), Span(21,22,List(2),early,early,false), Span(20,21,List(3),defensive,defend-01,false), Span(19,20,List(4),develop,develop-02,false), Span(11,12,List(5),missiles,missile,false), Span(9,10,List(6),intercontinental,intercontinental,false), Span(7,8,List(7),launches,launch-01,false), Span(5,6,List(8),involved,involve-01,false), Span(2,3,List(9),center,center,false)),Map(2 -> early, 5 -> missile, 8 -> involve-01, 7 -> launch-01, 1 -> warn-01, 4 -> develop-02, 6 -> intercontinental, 9 -> center, 0 -> system, 3 -> defend-01),Map(e -> early, w -> warn-01, s -> system, m -> missile, d -> defend-01, d2 -> develop-02, i2 -> involve-01, i -> intercontinental, c -> center, l -> launch-01))),[Ljava.lang.String;@67064bdc,Annotation([Ljava.lang.String;@4a7fd0c9,[Ljava.lang.String;@18578491,[Ljava.lang.String;@3291b443),Annotation([Ljava.lang.String;@671c4166,[Ljava.lang.String;@53d13cd4,[Ledu.cmu.lti.nlp.amr.Dependency;@77865933),Annotation([Ljava.lang.String;@480ad82c,[Ljava.lang.String;@4d18b73a,[Ljava.lang.String;@177515d1),Annotation([Ljava.lang.String;@52ff99cd,[Ljava.lang.String;@4c2af006,[Ledu.cmu.lti.nlp.amr.Entity;@44032fde))
AMR:
(d / defend-01, ARG0, s / system)
(d2 / develop-02, ARG0, c / center)
(d2 / develop-02, ARG1, s / system)
(i2 / involve-01, ARG1, c / center)
(i2 / involve-01, ARG2, l / launch-01)
(l / launch-01, ARG1, m / missile)
(m / missile, mod, i / intercontinental)
(w / warn-01, ARG0, s / system)
(w / warn-01, time, e / early)

Decoded in 200,164 microseconds
Sentence: Putin held two-hour meeting with Chirac.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 7-8:  Chirac => (person :name (name :op "Chirac"))
Span 4-5:  hour => (temporal-quantity :unit hour)
Span 0-1:  Putin => (person :name (name :op "Putin"))
Span 2-3:  two => 2

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  Chirac => (person :name (name :op "Chirac"))
Oracle Span 1-2:  held => hold-03
Oracle Span 4-5:  hour => (temporal-quantity :unit hour)
Oracle Span 5-6:  meeting => meet-03
Oracle Span 0-1:  Putin => (person :name (name :op "Putin"))
Oracle Span 2-3:  two => 2

Missing span: held => hold-03
Missing span: meeting => meet-03
Dependencies:
1	Putin	_	NNP	NNP	_	2	nsubj	_	_
2	held	_	VBD	VBD	_	0	root	_	_
3	two-hour	_	JJ	JJ	_	4	amod	_	_
4	meeting	_	NN	NN	_	2	dobj	_	_
5	with	_	IN	IN	_	2	prep	_	_
6	Chirac	_	NNP	NNP	_	5	pobj	_	_
7	.	_	.	.	_	2	punct	_	_

Oracle:
(h3 / hold-03, ARG1, m / meet-03)
(h3 / hold-03, duration, t2 / temporal-quantity)
(m / meet-03, ARG0, p / person)
(m / meet-03, ARG1, p2 / person)
(n / name, op, "Putin")
(n2 / name, op, "Chirac")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(t2 / temporal-quantity, quant, 2 / 2)
(t2 / temporal-quantity, unit, h2 / hour)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(2, 1, 0),Chirac,(person :name (name :op "Chirac")),false), Span(4,5,List(4, 3),hour,(temporal-quantity :unit hour),false), Span(2,3,List(5),two,2,false), Span(0,1,List(8, 7, 6),Putin,(person :name (name :op "Putin")),false)),Map(2 -> "Chirac", 5 -> 2, 8 -> "Putin", 7 -> name, 1 -> name, 4 -> hour, 6 -> person, 0 -> person, 3 -> temporal-quantity),Map(n -> name, 2 -> 2, h -> hour, t -> temporal-quantity, p2 -> person, p -> person, n2 -> name))),[Ljava.lang.String;@7b676112,Annotation([Ljava.lang.String;@5578be42,[Ljava.lang.String;@4e49ce2b,[Ljava.lang.String;@136965e3),Annotation([Ljava.lang.String;@53c6f96d,[Ljava.lang.String;@435cc7f9,[Ledu.cmu.lti.nlp.amr.Dependency;@4364712f),Annotation([Ljava.lang.String;@1b7a52dd,[Ljava.lang.String;@7f93dd4e,[Ljava.lang.String;@5ad5be4a),Annotation([Ljava.lang.String;@3ad85136,[Ljava.lang.String;@737d100a,[Ledu.cmu.lti.nlp.amr.Entity;@12e5da86))
AMR:
(n / name, op, "Chirac")
(n2 / name, op, "Putin")
(p / person, condition, p2 / person)
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(t / temporal-quantity, location, p / person)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, h / hour)

Decoded in 30,743 microseconds
Sentence: Russian Space Forces Commander Lt. Gen. Vladimir Popovkin reported to Chirac and Putin and said it is one of Russia's priorities to expand space cooperation with France.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Gen."))
NER Entity: (person :name (name :op "Vladimir" :op "Popovkin"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (person :name (name :op "Putin"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "France"))
NER Entity: (person :name (name :op "Putin"))
NER Entity: (person :name (name :op "Chirac"))
Spans:
Span 10-11:  Chirac => (person :name (name :op "Chirac"))
Span 3-4:  Commander => (have-org-role-91 :ARG2 commander)
Span 25-26:  cooperation => cooperate-01
Span 23-24:  expand => expand-01
Span 21-22:  priorities => priority
Span 12-13:  Putin => (person :name (name :op "Putin"))
Span 8-9:  reported => report-01
Span 0-3:  Russian Space Forces => (name :op "Forces" :op "Space" :op "Russian")
Span 14-15:  said => say-01
Span 6-8:  Vladimir Popovkin => (person :name (name :op "Vladimir" :op "Popovkin"))

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 13-14:  and => and
Oracle Span 10-11:  Chirac => (person :name (name :op "Chirac"))
Oracle Span 3-4:  Commander => (have-org-role-91 :ARG2 commander)
Oracle Span 25-26:  cooperation => cooperate-01
Oracle Span 23-24:  expand => expand-01
Oracle Span 27-28:  France => (country :name (name :op "France"))
Oracle Span 18-19:  of => include-91
Oracle Span 21-22:  priorities => priority
Oracle Span 12-13:  Putin => (person :name (name :op "Putin"))
Oracle Span 8-9:  reported => report-01
Oracle Span 19-20:  Russia => (country :name (name :op "Russia"))
Oracle Span 0-3:  Russian Space Forces => (military :name (name :op "Forces" :op "Space" :op "Russian"))
Oracle Span 14-15:  said => say-01
Oracle Span 24-25:  space => space
Oracle Span 6-8:  Vladimir Popovkin => (person :name (name :op "Popovkin" :op "Vladimir"))

Incorrect span: Vladimir Popovkin => (person :name (name :op "Vladimir" :op "Popovkin"))
Incorrect span: Russian Space Forces => (name :op "Forces" :op "Space" :op "Russian")
Missing span: Vladimir Popovkin => (person :name (name :op "Popovkin" :op "Vladimir"))
Missing span: Russian Space Forces => (military :name (name :op "Forces" :op "Space" :op "Russian"))
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: France => (country :name (name :op "France"))
Missing span: and => and
Missing span: of => include-91
Missing span: space => space
Missing span: and => and
Dependencies:
1	Russian	_	NNP	NNP	_	8	nn	_	_
2	Space	_	NNP	NNP	_	8	nn	_	_
3	Forces	_	NNP	NNP	_	8	nn	_	_
4	Commander	_	NNP	NNP	_	8	nn	_	_
5	Lt.	_	NNP	NNP	_	8	nn	_	_
6	Gen.	_	NNP	NNP	_	8	nn	_	_
7	Vladimir	_	NNP	NNP	_	8	nn	_	_
8	Popovkin	_	NNP	NNP	_	9	nsubj	_	_
9	reported	_	VBD	VBD	_	0	root	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	Chirac	_	NNP	NNP	_	10	pobj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	Putin	_	NNP	NNP	_	11	conj	_	_
14	and	_	CC	CC	_	9	cc	_	_
15	said	_	VBD	VBD	_	9	conj	_	_
16	it	_	PRP	PRP	_	18	nsubj	_	_
17	is	_	VBZ	VBZ	_	18	cop	_	_
18	one	_	CD	CD	_	15	ccomp	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	Russia	_	NNP	NNP	_	22	poss	_	_
21	's	_	POS	POS	_	20	possessive	_	_
22	priorities	_	NNS	NNS	_	19	pobj	_	_
23	to	_	TO	TO	_	24	aux	_	_
24	expand	_	VB	VB	_	22	vmod	_	_
25	space	_	NN	NN	_	26	nn	_	_
26	cooperation	_	NN	NN	_	24	dobj	_	_
27	with	_	IN	IN	_	24	prep	_	_
28	France	_	NNP	NNP	_	27	pobj	_	_
29	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, r / report-01)
(a / and, op, s / say-01)
(a2 / and, op, p2 / person)
(a2 / and, op, p3 / person)
(c2 / cooperate-01, ARG0, c3 / country)
(c2 / cooperate-01, ARG1, c4 / country)
(c2 / cooperate-01, ARG2, s2 / space)
(c3 / country, name, n5 / name)
(c4 / country, name, n6 / name)
(e / expand-01, ARG1, c2 / cooperate-01)
(h / have-org-role-91, ARG0, p5 / person)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG2, c / commander)
(i / include-91, ARG1, e / expand-01)
(i / include-91, ARG2, p4 / priority)
(m / military, name, n2 / name)
(n / name, op, "Popovkin")
(n / name, op, "Vladimir")
(n2 / name, op, "Forces")
(n2 / name, op, "Russian")
(n2 / name, op, "Space")
(n3 / name, op, "Chirac")
(n4 / name, op, "Putin")
(n5 / name, op, "Russia")
(n6 / name, op, "France")
(p2 / person, name, n3 / name)
(p3 / person, name, n4 / name)
(p4 / priority, poss, c3 / country)
(p5 / person, name, n / name)
(r / report-01, ARG0, p5 / person)
(r / report-01, ARG2, a2 / and)
(s / say-01, ARG0, p5 / person)
(s / say-01, ARG1, i / include-91)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),cooperation,cooperate-01,false), Span(23,24,List(1),expand,expand-01,false), Span(21,22,List(2),priorities,priority,false), Span(14,15,List(3),said,say-01,false), Span(12,13,List(6, 5, 4),Putin,(person :name (name :op "Putin")),false), Span(10,11,List(9, 8, 7),Chirac,(person :name (name :op "Chirac")),false), Span(8,9,List(10),reported,report-01,false), Span(6,8,List(14, 13, 12, 11),Vladimir Popovkin,(person :name (name :op "Vladimir" :op "Popovkin")),false), Span(3,4,List(16, 15),Commander,(have-org-role-91 :ARG2 commander),false), Span(0,3,List(20, 19, 18, 17),Russian Space Forces,(name :op "Forces" :op "Space" :op "Russian"),false)),Map(2 -> priority, 5 -> name, 12 -> name, 15 -> have-org-role-91, 8 -> name, 18 -> "Forces", 7 -> person, 17 -> name, 1 -> expand-01, 4 -> person, 11 -> person, 14 -> "Popovkin", 20 -> "Russian", 6 -> "Putin", 0 -> cooperate-01, 9 -> "Chirac", 16 -> commander, 19 -> "Space", 3 -> say-01, 10 -> report-01, 13 -> "Vladimir"),Map(e -> expand-01, n -> name, h -> have-org-role-91, p2 -> person, n4 -> name, s -> say-01, p -> priority, n3 -> name, p4 -> person, r -> report-01, c -> cooperate-01, p3 -> person, n2 -> name, c2 -> commander))),[Ljava.lang.String;@6535117e,Annotation([Ljava.lang.String;@1d1cbd0f,[Ljava.lang.String;@6fa13e6,[Ljava.lang.String;@3af7d855),Annotation([Ljava.lang.String;@77049094,[Ljava.lang.String;@f88bfbe,[Ledu.cmu.lti.nlp.amr.Dependency;@59bbe88a),Annotation([Ljava.lang.String;@5d8ab698,[Ljava.lang.String;@ed91d8d,[Ljava.lang.String;@446626a7),Annotation([Ljava.lang.String;@429f7919,[Ljava.lang.String;@4a2929a4,[Ledu.cmu.lti.nlp.amr.Entity;@cda6019))
AMR:
(c / cooperate-01, ARG0, n4 / name)
(e / expand-01, ARG0, p / priority)
(e / expand-01, ARG1, c / cooperate-01)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG2, c2 / commander)
(n / name, op, "Putin")
(n2 / name, op, "Chirac")
(n3 / name, op, "Popovkin")
(n3 / name, op, "Vladimir")
(n4 / name, op, "Forces")
(n4 / name, op, "Russian")
(n4 / name, op, "Space")
(p2 / person, name, n / name)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(r / report-01, ARG0, p4 / person)
(r / report-01, ARG1, p2 / person)
(r / report-01, ARG2, p3 / person)
(s / say-01, ARG0, p4 / person)
(s / say-01, ARG1, p / priority)

Decoded in 492,145 microseconds
Sentence: France is a leader in the European Space Agency.

NER Entity: (country :name (name :op "France"))
NER Entity: (organization :name (name :op "European" :op "Space" :op "Agency"))
Spans:
Span 6-9:  European Space Agency => (organization :name (name :op "European" :op "Space" :op "Agency"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-9:  European Space Agency => (organization :name (name :op "Agency" :op "Space" :op "European"))
Oracle Span 0-1:  France => (country :name (name :op "France"))
Oracle Span 3-4:  leader => lead-02

Incorrect span: European Space Agency => (organization :name (name :op "European" :op "Space" :op "Agency"))
Missing span: European Space Agency => (organization :name (name :op "Agency" :op "Space" :op "European"))
Missing span: France => (country :name (name :op "France"))
Missing span: leader => lead-02
Dependencies:
1	France	_	NNP	NNP	_	4	nsubj	_	_
2	is	_	VBZ	VBZ	_	4	cop	_	_
3	a	_	DT	DT	_	4	det	_	_
4	leader	_	NN	NN	_	0	root	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	European	_	NNP	NNP	_	9	nn	_	_
8	Space	_	NNP	NNP	_	9	nn	_	_
9	Agency	_	NNP	NNP	_	5	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(l / lead-02, ARG1, o / organization)
(n / name, op, "Agency")
(n / name, op, "European")
(n / name, op, "Space")
(n2 / name, op, "France")
(o / organization, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(6,9,List(4, 3, 2, 1, 0),European Space Agency,(organization :name (name :op "European" :op "Space" :op "Agency")),false)),Map(2 -> "European", 1 -> name, 4 -> "Agency", 0 -> organization, 3 -> "Space"),Map(n -> name, o -> organization))),[Ljava.lang.String;@797c3c3b,Annotation([Ljava.lang.String;@4012d5bc,[Ljava.lang.String;@4375b013,[Ljava.lang.String;@1cf0cacc),Annotation([Ljava.lang.String;@4f5b08d,[Ljava.lang.String;@529c2a9a,[Ledu.cmu.lti.nlp.amr.Dependency;@3c87fdf2),Annotation([Ljava.lang.String;@26bbe604,[Ljava.lang.String;@fe34b86,[Ljava.lang.String;@3c98781a),Annotation([Ljava.lang.String;@3f736a16,[Ljava.lang.String;@4601203a,[Ledu.cmu.lti.nlp.amr.Entity;@53abfc07))
AMR:
(n / name, op, "Agency")
(n / name, op, "European")
(n / name, op, "Space")
(o / organization, name, n / name)

Decoded in 15,743 microseconds
Sentence: Chirac's visit has come while the Russian Government has displayed uneasiness about NATO's latest expansion to the Russian borders and the European Union's imminent enlargement within the former Soviet sphere of influence in Eastern Europe.

NER Entity: (person :name (name :op "Chirac"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (organization :name (name :op "NATO"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (organization :name (name :op "European" :op "Union"))
NER Entity: (thing :name (name :op "Soviet"))
NER Entity: (country :name (name :op "Eastern" :op "Europe"))
NER Entity: (person :name (name :op "Chirac"))
Spans:
Span 0-1:  Chirac => (person :name (name :op "Chirac"))
Span 36-38:  Eastern Europe => (world-region :name (name :op "Europe" :op "Eastern"))
Span 23-25:  European Union => (organization :name (name :op "Union" :op "European"))
Span 16-17:  expansion => expand-01
Span 30-31:  former => former
Span 26-27:  imminent => imminent
Span 34-35:  influence => influence-01
Span 15-16:  latest => (late :degree most)
Span 32-33:  sphere => sphere
Span 2-3:  visit => visit-01
Span 28-29:  within => within

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 21-22:  and => and
Oracle Span 20-21:  borders => border-01
Oracle Span 0-1:  Chirac => (person :name (name :op "Chirac"))
Oracle Span 10-11:  displayed => display-01
Oracle Span 36-38:  Eastern Europe => (world-region :name (name :op "Europe" :op "Eastern"))
Oracle Span 27-28:  enlargement => enlarge-01
Oracle Span 23-25:  European Union => (organization :name (name :op "Union" :op "European"))
Oracle Span 16-17:  expansion => expand-01
Oracle Span 30-31:  former => former
Oracle Span 8-9:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 26-27:  imminent => imminent
Oracle Span 34-35:  influence => influence-01
Oracle Span 15-16:  latest => (late :degree most)
Oracle Span 13-14:  NATO => (military :name (name :op "NATO"))
Oracle Span 7-8:  Russian => (country :name (name :op "Russia"))
Oracle Span 31-32:  Soviet => "Soviet"
Oracle Span 32-33:  sphere => sphere
Oracle Span 11-12:  uneasiness => uneasy-41
Oracle Span 2-3:  visit => visit-01
Oracle Span 28-29:  within => within

Missing span: NATO => (military :name (name :op "NATO"))
Missing span: Russian => (country :name (name :op "Russia"))
Missing span: displayed => display-01
Missing span: and => and
Missing span: Soviet => "Soviet"
Missing span: borders => border-01
Missing span: uneasiness => uneasy-41
Missing span: enlargement => enlarge-01
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Chirac	_	NNP	NNP	_	3	poss	_	_
2	's	_	POS	POS	_	1	possessive	_	_
3	visit	_	NN	NN	_	5	nsubj	_	_
4	has	_	VBZ	VBZ	_	5	aux	_	_
5	come	_	VBN	VBN	_	0	root	_	_
6	while	_	IN	IN	_	11	mark	_	_
7	the	_	DT	DT	_	9	det	_	_
8	Russian	_	JJ	JJ	_	9	amod	_	_
9	Government	_	NN	NN	_	11	nsubj	_	_
10	has	_	VBZ	VBZ	_	11	aux	_	_
11	displayed	_	VBN	VBN	_	5	advcl	_	_
12	uneasiness	_	NN	NN	_	11	dobj	_	_
13	about	_	IN	IN	_	12	prep	_	_
14	NATO	_	NNP	NNP	_	17	poss	_	_
15	's	_	POS	POS	_	14	possessive	_	_
16	latest	_	JJS	JJS	_	17	amod	_	_
17	expansion	_	NN	NN	_	13	pobj	_	_
18	to	_	TO	TO	_	11	prep	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Russian	_	JJ	JJ	_	21	amod	_	_
21	borders	_	NNS	NNS	_	18	pobj	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	the	_	DT	DT	_	25	det	_	_
24	European	_	NNP	NNP	_	25	nn	_	_
25	Union	_	NNP	NNP	_	28	poss	_	_
26	's	_	POS	POS	_	25	possessive	_	_
27	imminent	_	JJ	JJ	_	28	amod	_	_
28	enlargement	_	NN	NN	_	21	conj	_	_
29	within	_	IN	IN	_	11	prep	_	_
30	the	_	DT	DT	_	33	det	_	_
31	former	_	JJ	JJ	_	33	amod	_	_
32	Soviet	_	JJ	JJ	_	33	amod	_	_
33	sphere	_	NN	NN	_	29	pobj	_	_
34	of	_	IN	IN	_	33	prep	_	_
35	influence	_	NN	NN	_	34	pobj	_	_
36	in	_	IN	IN	_	35	prep	_	_
37	Eastern	_	NNP	NNP	_	38	nn	_	_
38	Europe	_	NNP	NNP	_	36	pobj	_	_
39	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, e / expand-01)
(a / and, op, e2 / enlarge-01)
(b / border-01, ARG1, c2 / country)
(c2 / country, name, n2 / name)
(d / display-01, ARG0, g / government-organization)
(d / display-01, ARG1, u / uneasy-41)
(e / expand-01, ARG1, m / military)
(e / expand-01, ARG4, b / border-01)
(e / expand-01, time, l / late)
(e2 / enlarge-01, ARG1, o2 / organization)
(e2 / enlarge-01, ARG2, w / within)
(e2 / enlarge-01, mod, i2 / imminent)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(i / influence-01, ARG1, s / sphere)
(l / late, degree, m2 / most)
(m / military, name, n3 / name)
(n / name, op, "Chirac")
(n2 / name, op, "Russia")
(n3 / name, op, "NATO")
(n4 / name, op, "European")
(n4 / name, op, "Union")
(n6 / name, op, "Eastern")
(n6 / name, op, "Europe")
(o2 / organization, name, n4 / name)
(p / person, name, n / name)
(s / sphere, location, w2 / world-region)
(u / uneasy-41, ARG1, g / government-organization)
(u / uneasy-41, ARG2, a / and)
(v2 / visit-01, ARG0, p / person)
(v2 / visit-01, time, d / display-01)
(w / within, op, s / sphere)
(w2 / world-region, name, n6 / name)

Input(Some(Graph(null,ArrayBuffer(Span(36,38,List(3, 2, 1, 0),Eastern Europe,(world-region :name (name :op "Europe" :op "Eastern")),false), Span(34,35,List(4),influence,influence-01,false), Span(32,33,List(5),sphere,sphere,false), Span(30,31,List(6),former,former,false), Span(28,29,List(7),within,within,false), Span(26,27,List(8),imminent,imminent,false), Span(23,25,List(12, 11, 10, 9),European Union,(organization :name (name :op "Union" :op "European")),false), Span(16,17,List(13),expansion,expand-01,false), Span(15,16,List(15, 14),latest,(late :degree most),false), Span(2,3,List(16),visit,visit-01,false), Span(0,1,List(19, 18, 17),Chirac,(person :name (name :op "Chirac")),false)),Map(2 -> "Europe", 5 -> sphere, 12 -> "European", 15 -> most, 8 -> imminent, 18 -> name, 7 -> within, 17 -> person, 1 -> name, 4 -> influence-01, 11 -> "Union", 14 -> late, 6 -> former, 0 -> world-region, 9 -> organization, 16 -> visit-01, 19 -> "Chirac", 3 -> "Eastern", 10 -> name, 13 -> expand-01),Map(e -> expand-01, w -> world-region, n -> name, s -> sphere, v -> visit-01, m -> most, p -> person, n3 -> name, i2 -> imminent, w2 -> within, i -> influence-01, l -> late, f -> former, o -> organization, n2 -> name))),[Ljava.lang.String;@2c8c16c0,Annotation([Ljava.lang.String;@80bfa9d,[Ljava.lang.String;@47c40b56,[Ljava.lang.String;@4b039c6d),Annotation([Ljava.lang.String;@7f5b9db,[Ljava.lang.String;@507d64aa,[Ledu.cmu.lti.nlp.amr.Dependency;@37045b48),Annotation([Ljava.lang.String;@60b34931,[Ljava.lang.String;@4aa21f9d,[Ljava.lang.String;@71c17a57),Annotation([Ljava.lang.String;@640ab13c,[Ljava.lang.String;@1e0a864d,[Ledu.cmu.lti.nlp.amr.Entity;@440e3ce6))
AMR:
(e / expand-01, ARG1, i2 / imminent)
(e / expand-01, time, l / late)
(i / influence-01, ARG0, o / organization)
(i / influence-01, ARG1, p / person)
(l / late, degree, m / most)
(n / name, op, "Eastern")
(n / name, op, "Europe")
(n2 / name, op, "European")
(n2 / name, op, "Union")
(n3 / name, op, "Chirac")
(o / organization, name, n2 / name)
(p / person, name, n3 / name)
(s / sphere, location, w / world-region)
(s / sphere, mod, f / former)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, e / expand-01)
(w / world-region, name, n / name)
(w2 / within, op, i / influence-01)
(w2 / within, op, s / sphere)

Decoded in 245,195 microseconds
Sentence: At the press conference following the meeting Putin said that Russia's activities in defending national security are non-aggressive and not targeted against anyone.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 12-13:  activities => activity
Span 20-21:  aggressive => aggressive
Span 25-26:  anyone => anyone
Span 3-4:  conference => conference
Span 14-15:  defending => defend-01
Span 2-3:  press => press
Span 7-8:  Putin => (person :name (name :op "Putin"))
Span 8-9:  said => say-01
Span 23-24:  targeted => target-01

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Oracle Span 12-13:  activities => activity
Oracle Span 20-21:  aggressive => aggressive
Oracle Span 21-22:  and => and
Oracle Span 25-26:  anyone => anyone
Oracle Span 3-4:  conference => conference
Oracle Span 14-15:  defending => defend-01
Oracle Span 4-5:  following => follow-01
Oracle Span 6-7:  meeting => meet-03
Oracle Span 15-16:  national => nation
Oracle Span 2-3:  press => press
Oracle Span 7-8:  Putin => (person :name (name :op "Putin"))
Oracle Span 10-11:  Russia => (country :name (name :op "Russia"))
Oracle Span 8-9:  said => say-01
Oracle Span 16-17:  security => security
Oracle Span 23-24:  targeted => target-01

Missing span: Russia => (country :name (name :op "Russia"))
Missing span: following => follow-01
Missing span: meeting => meet-03
Missing span: and => and
Missing span: security => security
Missing span: national => nation
Dependencies:
1	At	_	IN	IN	_	9	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	press	_	NN	NN	_	4	nn	_	_
4	conference	_	NN	NN	_	1	pobj	_	_
5	following	_	VBG	VBG	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	meeting	_	NN	NN	_	5	pobj	_	_
8	Putin	_	NNP	NNP	_	9	nsubj	_	_
9	said	_	VBD	VBD	_	0	root	_	_
10	that	_	IN	IN	_	19	mark	_	_
11	Russia	_	NNP	NNP	_	13	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	activities	_	NNS	NNS	_	19	nsubjpass	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	defending	_	VBG	VBG	_	14	pcomp	_	_
16	national	_	JJ	JJ	_	17	amod	_	_
17	security	_	NN	NN	_	15	dobj	_	_
18	are	_	VBP	VBP	_	19	auxpass	_	_
19	non-aggressive	_	JJ	JJ	_	9	ccomp	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	not	_	RB	RB	_	22	neg	_	_
22	targeted	_	VBN	VBN	_	19	conj	_	_
23	against	_	IN	IN	_	22	prep	_	_
24	anyone	_	NN	NN	_	23	pobj	_	_
25	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, domain, a4 / activity)
(a / and, op, a2 / aggressive)
(a / and, op, t / target-01)
(a4 / activity, poss, c2 / country)
(a4 / activity, purpose, d / defend-01)
(c / conference, mod, p2 / press)
(c2 / country, name, n2 / name)
(d / defend-01, ARG1, s2 / security)
(f / follow-01, ARG1, c / conference)
(f / follow-01, ARG2, m / meet-03)
(n / name, op, "Putin")
(n2 / name, op, "Russia")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / and)
(s / say-01, time, c / conference)
(s2 / security, mod, n3 / nation)
(t / target-01, prep-against, a3 / anyone)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),anyone,anyone,false), Span(23,24,List(1),targeted,target-01,false), Span(20,21,List(2),aggressive,aggressive,false), Span(14,15,List(3),defending,defend-01,false), Span(12,13,List(4),activities,activity,false), Span(8,9,List(5),said,say-01,false), Span(7,8,List(8, 7, 6),Putin,(person :name (name :op "Putin")),false), Span(3,4,List(9),conference,conference,false), Span(2,3,List(10),press,press,false)),Map(2 -> aggressive, 5 -> say-01, 8 -> "Putin", 7 -> name, 1 -> target-01, 4 -> activity, 6 -> person, 9 -> conference, 0 -> anyone, 10 -> press, 3 -> defend-01),Map(n -> name, t -> target-01, p2 -> press, s -> say-01, a3 -> activity, d -> defend-01, p -> person, a -> anyone, a2 -> aggressive, c -> conference))),[Ljava.lang.String;@3e67f5f2,Annotation([Ljava.lang.String;@fd53053,[Ljava.lang.String;@4527f70a,[Ljava.lang.String;@707b1a44),Annotation([Ljava.lang.String;@7132a9dc,[Ljava.lang.String;@57435801,[Ledu.cmu.lti.nlp.amr.Dependency;@2da66a44),Annotation([Ljava.lang.String;@527fc8e,[Ljava.lang.String;@61bfc9bf,[Ljava.lang.String;@2c7106d9),Annotation([Ljava.lang.String;@329bad59,[Ljava.lang.String;@862f408,[Ledu.cmu.lti.nlp.amr.Entity;@178f268a))
AMR:
(c / conference, mod, p2 / press)
(d / defend-01, ARG0, a3 / activity)
(n / name, op, "Putin")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a2 / aggressive)
(s / say-01, ARG2, c / conference)
(t / target-01, ARG0, p / person)
(t / target-01, ARG2, a3 / activity)
(t / target-01, time, a / anyone)

Decoded in 554,117 microseconds
Sentence: The Titov space center is a military facility and is run by Russian space forces and operates under tight security.

NER Entity: (person :name (name :op "Titov"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 3-4:  center => center
Span 7-8:  facility => facility
Span 16-17:  operates => operate-01
Span 13-15:  space forces => (military :name (name :op "Forces" :op "Space"))
Span 18-19:  tight => tight

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 3-4:  center => center
Oracle Span 7-8:  facility => facility
Oracle Span 6-7:  military => military
Oracle Span 16-17:  operates => operate-01
Oracle Span 10-11:  run => run-01
Oracle Span 12-15:  Russian space forces => (name :op "Forces" :op "Space" :op "Russian")
Oracle Span 19-20:  security => security
Oracle Span 2-3:  space => space
Oracle Span 18-19:  tight => tight
Oracle Span 1-2:  Titov => (name :op "Titov")

Extra span: space forces => (military :name (name :op "Forces" :op "Space"))
Missing span: Titov => (name :op "Titov")
Missing span: Russian space forces => (name :op "Forces" :op "Space" :op "Russian")
Missing span: and => and
Missing span: security => security
Missing span: run => run-01
Missing span: military => military
Missing span: space => space
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Titov	_	NNP	NNP	_	4	nn	_	_
3	space	_	NN	NN	_	4	nn	_	_
4	center	_	NN	NN	_	8	nsubj	_	_
5	is	_	VBZ	VBZ	_	8	cop	_	_
6	a	_	DT	DT	_	8	det	_	_
7	military	_	JJ	JJ	_	8	amod	_	_
8	facility	_	NN	NN	_	0	root	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	is	_	VBZ	VBZ	_	11	auxpass	_	_
11	run	_	VBN	VBN	_	8	conj	_	_
12	by	_	IN	IN	_	11	prep	_	_
13	Russian	_	JJ	JJ	_	15	amod	_	_
14	space	_	NN	NN	_	15	nn	_	_
15	forces	_	NNS	NNS	_	12	pobj	_	_
16	and	_	CC	CC	_	11	cc	_	_
17	operates	_	VBZ	VBZ	_	11	conj	_	_
18	under	_	IN	IN	_	17	prep	_	_
19	tight	_	JJ	JJ	_	20	amod	_	_
20	security	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, f / facility)
(a / and, op, o2 / operate-01)
(a / and, op, r / run-01)
(c / center, mod, s / space)
(c / center, name, n / name)
(f / facility, domain, c / center)
(m2 / military, name, n2 / name)
(n / name, op, "Titov")
(n2 / name, op, "Forces")
(n2 / name, op, "Russian")
(n2 / name, op, "Space")
(o2 / operate-01, ARG1, c / center)
(o2 / operate-01, manner, s2 / security)
(r / run-01, ARG0, m2 / military)
(r / run-01, ARG1, c / center)
(s2 / security, mod, t / tight)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),tight,tight,false), Span(16,17,List(1),operates,operate-01,false), Span(13,15,List(5, 4, 3, 2),space forces,(military :name (name :op "Forces" :op "Space")),false), Span(7,8,List(6),facility,facility,false), Span(3,4,List(7),center,center,false)),Map(2 -> military, 5 -> "Space", 7 -> center, 1 -> operate-01, 4 -> "Forces", 6 -> facility, 0 -> tight, 3 -> name),Map(n -> name, t -> tight, m -> military, c -> center, f -> facility, o -> operate-01))),[Ljava.lang.String;@33ecbd6c,Annotation([Ljava.lang.String;@5c723f2d,[Ljava.lang.String;@432f521f,[Ljava.lang.String;@2d7a9786),Annotation([Ljava.lang.String;@7bab5898,[Ljava.lang.String;@366d8b97,[Ledu.cmu.lti.nlp.amr.Dependency;@feb98ef),Annotation([Ljava.lang.String;@7654f833,[Ljava.lang.String;@571a01f9,[Ljava.lang.String;@d7109be),Annotation([Ljava.lang.String;@5e0ec41f,[Ljava.lang.String;@f4a3a8d,[Ledu.cmu.lti.nlp.amr.Entity;@8d8f754))
AMR:
(f / facility, domain, c / center)
(m / military, name, n / name)
(n / name, op, "Forces")
(n / name, op, "Space")
(o / operate-01, ARG0, f / facility)
(o / operate-01, ARG1, m / military)
(o / operate-01, location, t / tight)

Decoded in 109,099 microseconds
Sentence: Putin said Chirac's visit there indicated that Russia is developing the most advanced systems of weapons but finds it possible to acquaint its French partners with these projects.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 2-3:  Chirac => (person :name (name :op "Chirac"))
Span 18-19:  finds => find-01
Span 6-7:  indicated => indicate-01
Span 25-26:  partners => partner-01
Span 20-21:  possible => possible
Span 28-29:  projects => project
Span 0-1:  Putin => (person :name (name :op "Putin"))
Span 1-2:  said => say-01
Span 14-15:  systems => system
Span 4-5:  visit => visit-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 22-23:  acquaint => acquaint-01
Oracle Span 13-14:  advanced => advance-01
Oracle Span 17-18:  but => contrast-01
Oracle Span 2-3:  Chirac => (person :name (name :op "Chirac"))
Oracle Span 10-11:  developing => develop-02
Oracle Span 18-19:  finds => find-02
Oracle Span 24-25:  French => (country :name (name :op "France"))
Oracle Span 6-7:  indicated => indicate-01
Oracle Span 12-13:  most => most
Oracle Span 25-26:  partners => partner
Oracle Span 20-21:  possible => possible
Oracle Span 28-29:  projects => project
Oracle Span 0-1:  Putin => (person :name (name :op "Putin"))
Oracle Span 8-9:  Russia => (country :name (name :op "Russia"))
Oracle Span 1-2:  said => say-01
Oracle Span 14-15:  systems => system
Oracle Span 5-6:  there => there
Oracle Span 4-5:  visit => visit-01
Oracle Span 16-17:  weapons => weapon

Incorrect span: partners => partner-01
Incorrect span: finds => find-01
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: but => contrast-01
Missing span: finds => find-02
Missing span: acquaint => acquaint-01
Missing span: partners => partner
Missing span: French => (country :name (name :op "France"))
Missing span: developing => develop-02
Missing span: weapons => weapon
Missing span: advanced => advance-01
Missing span: most => most
Missing span: there => there
Dependencies:
1	Putin	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	Chirac	_	NNP	NNP	_	5	poss	_	_
4	's	_	POS	POS	_	3	possessive	_	_
5	visit	_	NN	NN	_	7	nsubj	_	_
6	there	_	RB	RB	_	7	advmod	_	_
7	indicated	_	VBD	VBD	_	2	ccomp	_	_
8	that	_	IN	IN	_	11	mark	_	_
9	Russia	_	NNP	NNP	_	11	nsubj	_	_
10	is	_	VBZ	VBZ	_	11	aux	_	_
11	developing	_	VBG	VBG	_	7	ccomp	_	_
12	the	_	DT	DT	_	15	det	_	_
13	most	_	RBS	RBS	_	14	advmod	_	_
14	advanced	_	JJ	JJ	_	15	amod	_	_
15	systems	_	NNS	NNS	_	11	dobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	weapons	_	NNS	NNS	_	16	pobj	_	_
18	but	_	CC	CC	_	7	cc	_	_
19	finds	_	VBZ	VBZ	_	7	conj	_	_
20	it	_	PRP	PRP	_	21	nsubj	_	_
21	possible	_	JJ	JJ	_	19	xcomp	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	acquaint	_	VB	VB	_	21	xcomp	_	_
24	its	_	PRP$	PRP$	_	26	poss	_	_
25	French	_	JJ	JJ	_	26	amod	_	_
26	partners	_	NNS	NNS	_	23	dobj	_	_
27	with	_	IN	IN	_	23	prep	_	_
28	these	_	DT	DT	_	29	det	_	_
29	projects	_	NNS	NNS	_	27	pobj	_	_
30	.	_	.	.	_	2	punct	_	_

Oracle:
(a / advance-01, ARG1, w / weapon)
(a / advance-01, degree, m / most)
(a2 / acquaint-01, ARG0, c2 / country)
(a2 / acquaint-01, ARG1, p3 / partner)
(a2 / acquaint-01, ARG2, p4 / project)
(c / contrast-01, ARG1, d / develop-02)
(c / contrast-01, ARG2, f / find-02)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(d / develop-02, ARG0, c2 / country)
(d / develop-02, ARG1, s2 / system)
(f / find-02, ARG0, c2 / country)
(f / find-02, ARG1, p5 / possible)
(i / indicate-01, ARG0, v / visit-01)
(i / indicate-01, ARG1, c / contrast-01)
(n / name, op, "Putin")
(n2 / name, op, "Chirac")
(n3 / name, op, "Russia")
(n4 / name, op, "France")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / partner, mod, c3 / country)
(p3 / partner, poss, c2 / country)
(p5 / possible, domain, a2 / acquaint-01)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, v / visit-01)
(s2 / system, mod, w / weapon)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, location, t / there)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),projects,project,false), Span(25,26,List(1),partners,partner-01,false), Span(20,21,List(2),possible,possible,false), Span(18,19,List(3),finds,find-01,false), Span(14,15,List(4),systems,system,false), Span(6,7,List(5),indicated,indicate-01,false), Span(4,5,List(6),visit,visit-01,false), Span(2,3,List(9, 8, 7),Chirac,(person :name (name :op "Chirac")),false), Span(1,2,List(10),said,say-01,false), Span(0,1,List(13, 12, 11),Putin,(person :name (name :op "Putin")),false)),Map(2 -> possible, 5 -> indicate-01, 12 -> name, 8 -> name, 7 -> person, 1 -> partner-01, 4 -> system, 11 -> person, 6 -> visit-01, 0 -> project, 9 -> "Chirac", 3 -> find-01, 10 -> say-01, 13 -> "Putin"),Map(n -> name, p5 -> person, s2 -> say-01, p2 -> partner-01, s -> system, v -> visit-01, p -> project, p4 -> person, i -> indicate-01, f -> find-01, n2 -> name, p3 -> possible))),[Ljava.lang.String;@d613308,Annotation([Ljava.lang.String;@25673087,[Ljava.lang.String;@7b27e8f4,[Ljava.lang.String;@348ad293),Annotation([Ljava.lang.String;@30f74e79,[Ljava.lang.String;@2c88a3e8,[Ledu.cmu.lti.nlp.amr.Dependency;@68ac9ec5),Annotation([Ljava.lang.String;@a50d709,[Ljava.lang.String;@5ed4bc,[Ljava.lang.String;@6920b0bc),Annotation([Ljava.lang.String;@65f651eb,[Ljava.lang.String;@69923ac3,[Ledu.cmu.lti.nlp.amr.Entity;@1f1ff879))
AMR:
(f / find-01, ARG0, v / visit-01)
(f / find-01, ARG1, p3 / possible)
(i / indicate-01, ARG0, v / visit-01)
(n / name, op, "Chirac")
(n2 / name, op, "Putin")
(p2 / partner-01, ARG0, p4 / person)
(p2 / partner-01, ARG1, p / project)
(p4 / person, name, n / name)
(p5 / person, name, n2 / name)
(s / system, poss, v / visit-01)
(s2 / say-01, ARG0, p5 / person)
(s2 / say-01, ARG1, i / indicate-01)
(v / visit-01, ARG0, p4 / person)

Decoded in 220,146 microseconds
Sentence: Putin stressed that this points to Russia's transparency and openness in security matters.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 13-14:  matters => matter
Span 10-11:  openness => openness
Span 4-5:  points => point
Span 0-1:  Putin => (person :name (name :op "Putin"))
Span 1-2:  stressed => stress-01
Span 3-4:  this => this
Span 8-9:  transparency => transparency

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 13-14:  matters => matter
Oracle Span 10-11:  openness => open-01
Oracle Span 4-5:  points => point-02
Oracle Span 0-1:  Putin => (person :name (name :op "Putin"))
Oracle Span 6-7:  Russia => (country :name (name :op "Russia"))
Oracle Span 12-13:  security => security
Oracle Span 1-2:  stressed => stress-01
Oracle Span 3-4:  this => this
Oracle Span 8-9:  transparency => transparency

Incorrect span: openness => openness
Incorrect span: points => point
Missing span: Russia => (country :name (name :op "Russia"))
Missing span: points => point-02
Missing span: and => and
Missing span: security => security
Missing span: openness => open-01
Dependencies:
1	Putin	_	NNP	NNP	_	2	nsubj	_	_
2	stressed	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	this	_	DT	DT	_	5	nsubj	_	_
5	points	_	VBZ	VBZ	_	2	ccomp	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	Russia	_	NNP	NNP	_	9	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	transparency	_	NN	NN	_	6	pobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	openness	_	NN	NN	_	9	conj	_	_
12	in	_	IN	IN	_	5	prep	_	_
13	security	_	NN	NN	_	14	nn	_	_
14	matters	_	NNS	NNS	_	12	pobj	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, o / open-01)
(a / and, op, t2 / transparency)
(c / country, name, n2 / name)
(m / matter, mod, s2 / security)
(n / name, op, "Putin")
(n2 / name, op, "Russia")
(o / open-01, ARG3, m / matter)
(p / person, name, n / name)
(p2 / point-02, ARG0, t / this)
(p2 / point-02, ARG1, a / and)
(s / stress-01, ARG0, p / person)
(s / stress-01, ARG1, p2 / point-02)
(t2 / transparency, mod, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),matters,matter,false), Span(10,11,List(1),openness,openness,false), Span(8,9,List(2),transparency,transparency,false), Span(4,5,List(3),points,point,false), Span(3,4,List(4),this,this,false), Span(1,2,List(5),stressed,stress-01,false), Span(0,1,List(8, 7, 6),Putin,(person :name (name :op "Putin")),false)),Map(2 -> transparency, 5 -> stress-01, 8 -> "Putin", 7 -> name, 1 -> openness, 4 -> this, 6 -> person, 0 -> matter, 3 -> point),Map(n -> name, t -> transparency, p2 -> person, s -> stress-01, m -> matter, p -> point, t2 -> this, o -> openness))),[Ljava.lang.String;@73d60e76,Annotation([Ljava.lang.String;@24f870ee,[Ljava.lang.String;@5c441290,[Ljava.lang.String;@3c78e551),Annotation([Ljava.lang.String;@7f1ef916,[Ljava.lang.String;@1886991b,[Ledu.cmu.lti.nlp.amr.Dependency;@64aad809),Annotation([Ljava.lang.String;@1f03fba0,[Ljava.lang.String;@17dd671f,[Ljava.lang.String;@3bbf6abe),Annotation([Ljava.lang.String;@9679750,[Ljava.lang.String;@9b9a327,[Ledu.cmu.lti.nlp.amr.Entity;@75a0c890))
AMR:
(n / name, op, "Putin")
(o / openness, location, m / matter)
(p / point, concession, m / matter)
(p / point, mod, t2 / this)
(p2 / person, name, n / name)
(s / stress-01, ARG0, p2 / person)
(s / stress-01, ARG1, p / point)
(t / transparency, part, m / matter)

Decoded in 91,331 microseconds
Sentence: 2004-04-07

mkDayMonthYear(2004-04-07,07,04,2004)
mkDayMonthYear(2004-04-07,07,04,2004)
Spans:
Span 0-1:  2004-04-07 => (date-entity :day 7 :month 4 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2004-04-07 => (date-entity :day 7 :month 4 :year 2004)

Dependencies:
1	2004-04-07	_	NNP	NNP	_	0	root	_	_

Oracle:
(d2 / date-entity, day, 7)
(d2 / date-entity, month, 4)
(d2 / date-entity, year, 2004)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-04-07,(date-entity :day 7 :month 4 :year 2004),false)),Map(2 -> 4, 1 -> 7, 0 -> date-entity, 3 -> 2004),Map(2 -> 2004, 7 -> 7, d -> date-entity, 4 -> 4))),[Ljava.lang.String;@358ab600,Annotation([Ljava.lang.String;@e26af6,[Ljava.lang.String;@44065156,[Ljava.lang.String;@3791f50e),Annotation([Ljava.lang.String;@574b7f4a,[Ljava.lang.String;@44ed0a8f,[Ledu.cmu.lti.nlp.amr.Dependency;@32177fa5),Annotation([Ljava.lang.String;@a96d56c,[Ljava.lang.String;@6ab4a5b,[Ljava.lang.String;@2abe9173),Annotation([Ljava.lang.String;@235d29d6,[Ljava.lang.String;@1fdca564,[Ledu.cmu.lti.nlp.amr.Entity;@43f9dd56))
AMR:
(d / date-entity, day, 7 / 7)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)

Decoded in 8,348 microseconds
Sentence: Philippines (PH)

NER Entity: (country :name (name :op "Philippines"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Philippines => (country :name (name :op "Philippines"))

Incorrect span:  => amr-empty
Missing span: Philippines => (country :name (name :op "Philippines"))
Dependencies:
1	Philippines	_	NNPS	NNPS	_	0	root	_	_
2	(	_	(	(	_	3	punct	_	_
3	PH	_	NNP	NNP	_	1	appos	_	_
4	)	_	)	)	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Philippines")

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@1d12e953,Annotation([Ljava.lang.String;@57cb70be,[Ljava.lang.String;@2d4608a6,[Ljava.lang.String;@20d87335),Annotation([Ljava.lang.String;@2a8a4e0c,[Ljava.lang.String;@26c89563,[Ledu.cmu.lti.nlp.amr.Dependency;@3bd6ba24),Annotation([Ljava.lang.String;@58f437b0,[Ljava.lang.String;@20f6f88c,[Ljava.lang.String;@4277127c),Annotation([Ljava.lang.String;@4c7e978c,[Ljava.lang.String;@354e7004,[Ledu.cmu.lti.nlp.amr.Entity;@22ebccb9))
AMR:


Decoded in 4,573 microseconds
Sentence: International; terrorism; media

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  media => media
Span 2-3:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 0-1:  International => international
Oracle Span 4-5:  media => media
Oracle Span 2-3:  terrorism => terrorism

Extra span: ; => and
Missing span: International => international
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	terrorism	_	NN	NN	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	media	_	NNS	NNS	_	3	dep	_	_

Oracle:
(a / and, op, i / international)
(a / and, op, m / media)
(a / and, op, t / terrorism)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),media,media,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),terrorism,terrorism,false), Span(1,2,List(3),;,and,false)),Map(2 -> terrorism, 1 -> and, 0 -> media, 3 -> and),Map(t -> terrorism, m -> media, a -> and, a2 -> and))),[Ljava.lang.String;@5875de6a,Annotation([Ljava.lang.String;@608fe01f,[Ljava.lang.String;@2687725a,[Ljava.lang.String;@5a75ec37),Annotation([Ljava.lang.String;@2c05ff9d,[Ljava.lang.String;@33956d1a,[Ledu.cmu.lti.nlp.amr.Dependency;@2e1ddc90),Annotation([Ljava.lang.String;@5b7c8930,[Ljava.lang.String;@58867cd5,[Ljava.lang.String;@40e32762),Annotation([Ljava.lang.String;@5a8ab2,[Ljava.lang.String;@3f50b680,[Ledu.cmu.lti.nlp.amr.Entity;@54db056b))
AMR:
(a / and, op, t / terrorism)
(a2 / and, op, a / and)
(a2 / and, op, m / media)

Decoded in 11,938 microseconds
Sentence: Philippine Immigrations Bureau's record showed that two high-profiled terrorist suspects had most likely been staying in the Philippines.

NER Entity: (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
NER Entity: (country :name (name :op "Philippines"))
Spans:
Span 15-16:  likely => likely
Span 0-3:  Philippine Immigrations Bureau => (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
Span 4-5:  record => record
Span 5-6:  showed => show-01
Span 17-18:  staying => stay-01
Span 7-8:  two => 2

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  high => high
Oracle Span 1-3:  Immigrations Bureau => (government-organization :name (name :op "Bureau" :op "Immigrations"))
Oracle Span 15-16:  likely => likely
Oracle Span 14-15:  most => most
Oracle Span 20-21:  Philippines => (country :name (name :op "Philippines"))
Oracle Span 10-11:  profiled => profile
Oracle Span 4-5:  record => record
Oracle Span 5-6:  showed => show-01
Oracle Span 17-18:  staying => stay-01
Oracle Span 12-13:  suspects => (person :ARG2-of suspect-01)
Oracle Span 11-12:  terrorist => terrorist
Oracle Span 7-8:  two => 2

Extra span: Philippine Immigrations Bureau => (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
Missing span: Immigrations Bureau => (government-organization :name (name :op "Bureau" :op "Immigrations"))
Missing span: Philippines => (country :name (name :op "Philippines"))
Missing span: most => most
Missing span: suspects => (person :ARG2-of suspect-01)
Missing span: terrorist => terrorist
Missing span: profiled => profile
Missing span: high => high
Dependencies:
1	Philippine	_	NNP	NNP	_	3	nn	_	_
2	Immigrations	_	NNPS	NNPS	_	3	nn	_	_
3	Bureau	_	NNP	NNP	_	5	poss	_	_
4	's	_	POS	POS	_	3	possessive	_	_
5	record	_	NN	NN	_	6	nsubj	_	_
6	showed	_	VBD	VBD	_	0	root	_	_
7	that	_	IN	IN	_	16	mark	_	_
8	two	_	CD	CD	_	11	num	_	_
9	high-profiled	_	JJ	JJ	_	11	amod	_	_
10	terrorist	_	JJ	JJ	_	11	amod	_	_
11	suspects	_	NNS	NNS	_	16	nsubj	_	_
12	had	_	VBD	VBD	_	16	aux	_	_
13	most	_	RBS	RBS	_	14	advmod	_	_
14	likely	_	RB	RB	_	16	advmod	_	_
15	been	_	VBN	VBN	_	16	aux	_	_
16	staying	_	VBG	VBG	_	6	ccomp	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	Philippines	_	NNPS	NNPS	_	17	pobj	_	_
20	.	_	.	.	_	6	punct	_	_

Oracle:
(c / country, name, n2 / name)
(g / government-organization, mod, c / country)
(g / government-organization, name, n / name)
(l / likely, degree, m / most)
(l / likely, domain, s2 / stay-01)
(n / name, op, "Bureau")
(n / name, op, "Immigrations")
(n2 / name, op, "Philippines")
(p / profile, mod, h / high)
(p2 / person, quant, 2 / 2)
(r / record, source, g / government-organization)
(s / show-01, ARG0, r / record)
(s / show-01, ARG1, l / likely)
(s2 / stay-01, ARG1, p2 / person)
(s2 / stay-01, location, c / country)
(s3 / suspect-01, ARG1, t / terrorist)
(s3 / suspect-01, ARG2, p2 / person)
(t / terrorist, mod, p / profile)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),staying,stay-01,false), Span(15,16,List(1),likely,likely,false), Span(7,8,List(2),two,2,false), Span(5,6,List(3),showed,show-01,false), Span(4,5,List(4),record,record,false), Span(0,3,List(9, 8, 7, 6, 5),Philippine Immigrations Bureau,(organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau")),false)),Map(2 -> 2, 5 -> organization, 8 -> "Immigrations", 7 -> "Philippine", 1 -> likely, 4 -> record, 6 -> name, 9 -> "Bureau", 0 -> stay-01, 3 -> show-01),Map(n -> name, 2 -> 2, s2 -> show-01, s -> stay-01, r -> record, l -> likely, o -> organization))),[Ljava.lang.String;@d5af0a5,Annotation([Ljava.lang.String;@5981f4a6,[Ljava.lang.String;@63dfada0,[Ljava.lang.String;@6f231ced),Annotation([Ljava.lang.String;@35a60674,[Ljava.lang.String;@63d4f0a2,[Ledu.cmu.lti.nlp.amr.Dependency;@7d78f3d5),Annotation([Ljava.lang.String;@a4b5ce3,[Ljava.lang.String;@f5b6e78,[Ljava.lang.String;@4b4eced1),Annotation([Ljava.lang.String;@71926a36,[Ljava.lang.String;@216e9ca3,[Ledu.cmu.lti.nlp.amr.Entity;@75120e58))
AMR:
(2 / 2, op, l / likely)
(l / likely, domain, s / stay-01)
(n / name, op, "Bureau")
(n / name, op, "Immigrations")
(n / name, op, "Philippine")
(o / organization, name, n / name)
(r / record, poss, o / organization)
(s2 / show-01, ARG0, r / record)
(s2 / show-01, ARG1, s / stay-01)

Decoded in 74,914 microseconds
Sentence: ABS-CBN news channel reported on April 7, 2004 that the Philippine Immigrations Bureau's record showed that at least 2 high-profiled terrorist suspects had most likely been staying in the country.

NER Entity: (organization :name (name :op "ABS" :op "-" :op "CBN"))
mkDayMonthYear(April	7	,	2004,7,April,2004)
NER Entity: (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
Spans:
Span 7-11:  April 7 , 2004 => (date-entity :day 7 :month 4 :year 2004)
Span 4-5:  channel => channel
Span 35-36:  country => country
Span 30-31:  likely => likely
Span 3-4:  news => news
Span 17-18:  record => record
Span 5-6:  reported => report-01
Span 18-19:  showed => show-01
Span 32-33:  staying => stay-01
Span 11-14:  that the Philippine => (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 22-23:  2 => 2
Oracle Span 0-3:  ABS - CBN => (name :op "ABS-CBN")
Oracle Span 7-11:  April 7 , 2004 => (date-entity :day 7 :month 4 :year 2004)
Oracle Span 4-5:  channel => channel
Oracle Span 35-36:  country => country
Oracle Span 23-24:  high => high
Oracle Span 14-16:  Immigrations Bureau => (government-organization :name (name :op "Bureau" :op "Immigrations"))
Oracle Span 30-31:  likely => likely
Oracle Span 29-30:  most => most
Oracle Span 3-4:  news => news
Oracle Span 13-14:  Philippine => (country :name (name :op "Philippines"))
Oracle Span 25-26:  profiled => profile
Oracle Span 17-18:  record => record
Oracle Span 5-6:  reported => report-01
Oracle Span 18-19:  showed => show-01
Oracle Span 32-33:  staying => stay-01
Oracle Span 27-28:  suspects => (person :ARG2-of suspect-01)
Oracle Span 26-27:  terrorist => terrorist

Extra span: that the Philippine => (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
Missing span: ABS - CBN => (name :op "ABS-CBN")
Missing span: Immigrations Bureau => (government-organization :name (name :op "Bureau" :op "Immigrations"))
Missing span: Philippine => (country :name (name :op "Philippines"))
Missing span: most => most
Missing span: suspects => (person :ARG2-of suspect-01)
Missing span: 2 => 2
Missing span: profiled => profile
Missing span: high => high
Missing span: terrorist => terrorist
Dependencies:
1	ABS-CBN	_	NNP	NNP	_	3	nn	_	_
2	news	_	NN	NN	_	3	nn	_	_
3	channel	_	NN	NN	_	4	nsubj	_	_
4	reported	_	VBD	VBD	_	0	root	_	_
5	on	_	IN	IN	_	4	prep	_	_
6	April	_	NNP	NNP	_	5	pobj	_	_
7	7	_	CD	CD	_	6	num	_	_
8	,	_	,	,	_	6	punct	_	_
9	2004	_	CD	CD	_	6	num	_	_
10	that	_	IN	IN	_	17	mark	_	_
11	the	_	DT	DT	_	14	det	_	_
12	Philippine	_	NNP	NNP	_	14	nn	_	_
13	Immigrations	_	NNP	NNP	_	14	nn	_	_
14	Bureau	_	NNP	NNP	_	16	poss	_	_
15	's	_	POS	POS	_	14	possessive	_	_
16	record	_	NN	NN	_	17	nsubj	_	_
17	showed	_	VBD	VBD	_	4	ccomp	_	_
18	that	_	IN	IN	_	29	mark	_	_
19	at	_	IN	IN	_	21	quantmod	_	_
20	least	_	JJS	JJS	_	19	mwe	_	_
21	2	_	CD	CD	_	24	num	_	_
22	high-profiled	_	JJ	JJ	_	24	amod	_	_
23	terrorist	_	NN	NN	_	24	nn	_	_
24	suspects	_	NNS	NNS	_	29	nsubj	_	_
25	had	_	VBD	VBD	_	29	aux	_	_
26	most	_	RBS	RBS	_	27	advmod	_	_
27	likely	_	RB	RB	_	29	advmod	_	_
28	been	_	VBN	VBN	_	29	aux	_	_
29	staying	_	VBG	VBG	_	17	ccomp	_	_
30	in	_	IN	IN	_	29	prep	_	_
31	the	_	DT	DT	_	32	det	_	_
32	country	_	NN	NN	_	30	pobj	_	_
33	.	_	.	.	_	4	punct	_	_

Oracle:
(c / channel, mod, n2 / news)
(c / channel, name, n / name)
(c2 / country, name, n4 / name)
(d2 / date-entity, day, 7)
(d2 / date-entity, month, 4)
(d2 / date-entity, year, 2004)
(g / government-organization, mod, c2 / country)
(g / government-organization, name, n3 / name)
(l / likely, degree, m / most)
(l / likely, domain, s2 / stay-01)
(n / name, op, "ABS-CBN")
(n3 / name, op, "Bureau")
(n3 / name, op, "Immigrations")
(n4 / name, op, "Philippines")
(p / profile, mod, h / high)
(r / report-01, ARG0, c / channel)
(r / report-01, ARG1, s / show-01)
(r / report-01, time, d2 / date-entity)
(r2 / record, source, g / government-organization)
(s / show-01, ARG0, r2 / record)
(s / show-01, ARG1, l / likely)
(s2 / stay-01, ARG1, p2 / person)
(s2 / stay-01, location, c3 / country)
(s3 / suspect-01, ARG1, t / terrorist)
(s3 / suspect-01, ARG2, p2 / person)
(s3 / suspect-01, mod, p / profile)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),country,country,false), Span(32,33,List(1),staying,stay-01,false), Span(30,31,List(2),likely,likely,false), Span(18,19,List(3),showed,show-01,false), Span(17,18,List(4),record,record,false), Span(11,14,List(9, 8, 7, 6, 5),that the Philippine,(organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau")),false), Span(7,11,List(13, 12, 11, 10),April 7 , 2004,(date-entity :day 7 :month 4 :year 2004),false), Span(5,6,List(14),reported,report-01,false), Span(4,5,List(15),channel,channel,false), Span(3,4,List(16),news,news,false)),Map(2 -> likely, 5 -> organization, 12 -> 4, 15 -> channel, 8 -> "Immigrations", 7 -> "Philippine", 1 -> stay-01, 4 -> record, 11 -> 7, 14 -> report-01, 6 -> name, 0 -> country, 9 -> "Bureau", 16 -> news, 3 -> show-01, 10 -> date-entity, 13 -> 2004),Map(n -> name, 2 -> 2004, s2 -> show-01, s -> stay-01, d -> date-entity, 7 -> 7, r2 -> report-01, 4 -> 4, r -> record, c -> country, l -> likely, o -> organization, n2 -> news, c2 -> channel))),[Ljava.lang.String;@48976e6d,Annotation([Ljava.lang.String;@2a367e93,[Ljava.lang.String;@7f6874f2,[Ljava.lang.String;@1a6dc589),Annotation([Ljava.lang.String;@697a34af,[Ljava.lang.String;@70211df5,[Ledu.cmu.lti.nlp.amr.Dependency;@4c5228e7),Annotation([Ljava.lang.String;@38e7ed69,[Ljava.lang.String;@806996,[Ljava.lang.String;@78b612c6),Annotation([Ljava.lang.String;@257e0827,[Ljava.lang.String;@22752544,[Ledu.cmu.lti.nlp.amr.Entity;@21ba2445))
AMR:
(c2 / channel, mod, n2 / news)
(d / date-entity, day, 7 / 7)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)
(l / likely, domain, s / stay-01)
(n / name, op, "Bureau")
(n / name, op, "Immigrations")
(n / name, op, "Philippine")
(o / organization, name, n / name)
(o / organization, op, s2 / show-01)
(r2 / report-01, ARG0, c2 / channel)
(r2 / report-01, ARG1, s2 / show-01)
(r2 / report-01, time, d / date-entity)
(s / stay-01, ARG1, c / country)
(s2 / show-01, ARG0, r / record)
(s2 / show-01, ARG1, s / stay-01)

Decoded in 198,704 microseconds
Sentence: ABS-CBN News Channel stated that one of the two suspects was identified as Isamudin Raduan Hambali.

NER Entity: (organization :name (name :op "ABS" :op "-" :op "CBN" :op "News" :op "Channel"))
NER Entity: (person :name (name :op "Isamudin" :op "Raduan" :op "Hambali"))
Spans:
Span 0-3:  ABS - CBN => (organization :name (name :op "ABS" :op "-" :op "CBN" :op "News" :op "Channel"))
Span 13-16:  identified as Isamudin => (person :name (name :op "Isamudin" :op "Raduan" :op "Hambali"))
Span 10-11:  two => 2

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-4:  ABS - CBN News => (name :op "News" :op "ABS-CBN")
Oracle Span 4-5:  Channel => channel
Oracle Span 13-14:  identified => identify-01
Oracle Span 15-18:  Isamudin Raduan Hambali => (person :name (name :op "Hambali" :op "Raduan" :op "Isamudin"))
Oracle Span 8-9:  of => include-91
Oracle Span 7-8:  one => 1
Oracle Span 5-6:  stated => state-01
Oracle Span 11-12:  suspects => suspect-01
Oracle Span 10-11:  two => 2

Extra span: identified as Isamudin => (person :name (name :op "Isamudin" :op "Raduan" :op "Hambali"))
Extra span: ABS - CBN => (organization :name (name :op "ABS" :op "-" :op "CBN" :op "News" :op "Channel"))
Missing span: ABS - CBN News => (name :op "News" :op "ABS-CBN")
Missing span: Isamudin Raduan Hambali => (person :name (name :op "Hambali" :op "Raduan" :op "Isamudin"))
Missing span: stated => state-01
Missing span: identified => identify-01
Missing span: one => 1
Missing span: suspects => suspect-01
Missing span: of => include-91
Missing span: Channel => channel
Dependencies:
1	ABS-CBN	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Channel	_	NNP	NNP	_	4	nsubj	_	_
4	stated	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	12	mark	_	_
6	one	_	CD	CD	_	12	nsubjpass	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	two	_	CD	CD	_	10	num	_	_
10	suspects	_	NNS	NNS	_	7	pobj	_	_
11	was	_	VBD	VBD	_	12	auxpass	_	_
12	identified	_	VBN	VBN	_	4	ccomp	_	_
13	as	_	IN	IN	_	12	prep	_	_
14	Isamudin	_	NNP	NNP	_	16	nn	_	_
15	Raduan	_	NNP	NNP	_	16	nn	_	_
16	Hambali	_	NNP	NNP	_	13	pobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(c / channel, name, n / name)
(i / identify-01, ARG1, p / person)
(i2 / include-91, ARG1, s2 / suspect-01)
(n / name, op, "ABS-CBN")
(n / name, op, "News")
(n2 / name, op, "Hambali")
(n2 / name, op, "Isamudin")
(n2 / name, op, "Raduan")
(p / person, name, n2 / name)
(p / person, quant, 1 / 1)
(s / state-01, ARG0, c / channel)
(s / state-01, ARG1, i / identify-01)
(s2 / suspect-01, ARG2, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(13,16,List(4, 3, 2, 1, 0),identified as Isamudin,(person :name (name :op "Isamudin" :op "Raduan" :op "Hambali")),false), Span(10,11,List(5),two,2,false), Span(0,3,List(12, 11, 10, 9, 8, 7, 6),ABS - CBN,(organization :name (name :op "ABS" :op "-" :op "CBN" :op "News" :op "Channel")),false)),Map(2 -> "Isamudin", 5 -> 2, 12 -> "Channel", 8 -> "ABS", 7 -> name, 1 -> name, 4 -> "Hambali", 11 -> "News", 6 -> organization, 0 -> person, 9 -> "-", 3 -> "Raduan", 10 -> "CBN"),Map(n -> name, 2 -> 2, p -> person, o -> organization, n2 -> name))),[Ljava.lang.String;@69d23296,Annotation([Ljava.lang.String;@3c3820bb,[Ljava.lang.String;@376c7d7d,[Ljava.lang.String;@4784efd9),Annotation([Ljava.lang.String;@3fba233d,[Ljava.lang.String;@427ae189,[Ledu.cmu.lti.nlp.amr.Dependency;@16a9eb2e),Annotation([Ljava.lang.String;@76332405,[Ljava.lang.String;@187e5235,[Ljava.lang.String;@d1d8e1a),Annotation([Ljava.lang.String;@5434e40c,[Ljava.lang.String;@3b48e183,[Ledu.cmu.lti.nlp.amr.Entity;@514de325))
AMR:
(2 / 2, op, o / organization)
(n / name, op, "Hambali")
(n / name, op, "Isamudin")
(n / name, op, "Raduan")
(n2 / name, op, "-")
(n2 / name, op, "ABS")
(n2 / name, op, "CBN")
(n2 / name, op, "Channel")
(n2 / name, op, "News")
(o / organization, name, n2 / name)
(o / organization, poss, p / person)
(p / person, name, n / name)

Decoded in 46,889 microseconds
Sentence: Hambali was allegedly the mastermind of the Bali bombings in 2002.

NER Entity: (person :name (name :op "Hambali"))
NER Entity: (country :name (name :op "Bali"))
Spans:
Span 10-11:  2002 => (date-entity :year 2002)
Span 2-3:  allegedly => allege-01
Span 8-9:  bombings => bomb-01
Span 4-5:  mastermind => mastermind-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  2002 => (date-entity :year 2002)
Oracle Span 2-3:  allegedly => allege-01
Oracle Span 7-8:  Bali => (island :name (name :op "Bali"))
Oracle Span 8-9:  bombings => bomb-01
Oracle Span 0-1:  Hambali => (person :name (name :op "Hambali"))
Oracle Span 4-5:  mastermind => mastermind-01

Missing span: Hambali => (person :name (name :op "Hambali"))
Missing span: Bali => (island :name (name :op "Bali"))
Dependencies:
1	Hambali	_	NNP	NNP	_	5	nsubj	_	_
2	was	_	VBD	VBD	_	5	cop	_	_
3	allegedly	_	RB	RB	_	5	advmod	_	_
4	the	_	DT	DT	_	5	det	_	_
5	mastermind	_	NN	NN	_	0	root	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	9	det	_	_
8	Bali	_	NNP	NNP	_	9	nn	_	_
9	bombings	_	NNS	NNS	_	6	pobj	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	2002	_	CD	CD	_	10	pobj	_	_
12	.	_	.	.	_	5	punct	_	_

Oracle:
(a / allege-01, ARG1, m / mastermind-01)
(b / bomb-01, ARG1, i / island)
(b / bomb-01, time, d2 / date-entity)
(d2 / date-entity, year, 2002)
(i / island, name, n2 / name)
(m / mastermind-01, ARG0, p / person)
(m / mastermind-01, ARG1, b / bomb-01)
(n / name, op, "Hambali")
(n2 / name, op, "Bali")
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(1, 0),2002,(date-entity :year 2002),false), Span(8,9,List(2),bombings,bomb-01,false), Span(4,5,List(3),mastermind,mastermind-01,false), Span(2,3,List(4),allegedly,allege-01,false)),Map(2 -> bomb-01, 1 -> 2002, 4 -> allege-01, 0 -> date-entity, 3 -> mastermind-01),Map(2 -> 2002, b -> bomb-01, m -> mastermind-01, d -> date-entity, a -> allege-01))),[Ljava.lang.String;@30c1da48,Annotation([Ljava.lang.String;@43a65cd8,[Ljava.lang.String;@3f1ef9d6,[Ljava.lang.String;@17461db),Annotation([Ljava.lang.String;@3fd9e827,[Ljava.lang.String;@4e682398,[Ledu.cmu.lti.nlp.amr.Dependency;@670b3ca),Annotation([Ljava.lang.String;@24a86066,[Ljava.lang.String;@54402c04,[Ljava.lang.String;@5b3bb1f7),Annotation([Ljava.lang.String;@58d6b7b9,[Ljava.lang.String;@3f1a4795,[Ledu.cmu.lti.nlp.amr.Entity;@6a6f6c7e))
AMR:
(a / allege-01, ARG2, m / mastermind-01)
(b / bomb-01, time, d / date-entity)
(d / date-entity, year, 2 / 2002)
(m / mastermind-01, ARG1, b / bomb-01)

Decoded in 29,413 microseconds
Sentence: The Philippine Immigrations Bureau record showed Hambali was allowed to enter and leave the Philippines in 2001.

NER Entity: (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
NER Entity: (person :name (name :op "Hambali"))
NER Entity: (country :name (name :op "Philippines"))
Spans:
Span 16-17:  2001 => (date-entity :year 2001)
Span 8-9:  allowed => allow-01
Span 10-11:  enter => enter-01
Span 1-4:  Philippine Immigrations Bureau => (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
Span 4-5:  record => record
Span 5-6:  showed => show-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 16-17:  2001 => (date-entity :year 2001)
Oracle Span 8-9:  allowed => allow-01
Oracle Span 11-12:  and => and
Oracle Span 10-11:  enter => enter-01
Oracle Span 6-7:  Hambali => (person :name (name :op "Hambali"))
Oracle Span 2-4:  Immigrations Bureau => (government-organization :name (name :op "Bureau" :op "Immigrations"))
Oracle Span 12-13:  leave => leave-01
Oracle Span 14-15:  Philippines => (country :name (name :op "Philippines"))
Oracle Span 4-5:  record => record
Oracle Span 5-6:  showed => show-01

Extra span: Philippine Immigrations Bureau => (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
Missing span: Immigrations Bureau => (government-organization :name (name :op "Bureau" :op "Immigrations"))
Missing span: Philippines => (country :name (name :op "Philippines"))
Missing span: Hambali => (person :name (name :op "Hambali"))
Missing span: and => and
Missing span: leave => leave-01
Dependencies:
1	The	_	DT	DT	_	5	det	_	_
2	Philippine	_	JJ	JJ	_	5	amod	_	_
3	Immigrations	_	NNP	NNP	_	5	nn	_	_
4	Bureau	_	NNP	NNP	_	5	nn	_	_
5	record	_	NN	NN	_	6	nsubj	_	_
6	showed	_	VBD	VBD	_	0	root	_	_
7	Hambali	_	NNP	NNP	_	9	nsubjpass	_	_
8	was	_	VBD	VBD	_	9	auxpass	_	_
9	allowed	_	VBN	VBN	_	6	ccomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	enter	_	VB	VB	_	9	xcomp	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	leave	_	VB	VB	_	11	conj	_	_
14	the	_	DT	DT	_	15	det	_	_
15	Philippines	_	NNPS	NNPS	_	11	dobj	_	_
16	in	_	IN	IN	_	11	prep	_	_
17	2001	_	CD	CD	_	16	pobj	_	_
18	.	_	.	.	_	6	punct	_	_

Oracle:
(a / allow-01, ARG1, a2 / and)
(a2 / and, op, e / enter-01)
(a2 / and, op, l / leave-01)
(a2 / and, time, d2 / date-entity)
(c / country, name, n2 / name)
(d2 / date-entity, year, 2001)
(e / enter-01, ARG0, p / person)
(e / enter-01, ARG1, c / country)
(g / government-organization, mod, c / country)
(g / government-organization, name, n / name)
(l / leave-01, ARG0, p / person)
(l / leave-01, ARG1, c / country)
(n / name, op, "Bureau")
(n / name, op, "Immigrations")
(n2 / name, op, "Philippines")
(n3 / name, op, "Hambali")
(p / person, name, n3 / name)
(r / record, mod, g / government-organization)
(s / show-01, ARG0, r / record)
(s / show-01, ARG1, a / allow-01)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),2001,(date-entity :year 2001),false), Span(10,11,List(2),enter,enter-01,false), Span(8,9,List(3),allowed,allow-01,false), Span(5,6,List(4),showed,show-01,false), Span(4,5,List(5),record,record,false), Span(1,4,List(10, 9, 8, 7, 6),Philippine Immigrations Bureau,(organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau")),false)),Map(2 -> enter-01, 5 -> record, 8 -> "Philippine", 7 -> name, 1 -> 2001, 4 -> show-01, 6 -> organization, 9 -> "Immigrations", 0 -> date-entity, 10 -> "Bureau", 3 -> allow-01),Map(n -> name, e -> enter-01, 2 -> 2001, s -> show-01, d -> date-entity, a -> allow-01, r -> record, o -> organization))),[Ljava.lang.String;@6c5ddccd,Annotation([Ljava.lang.String;@1dbd580,[Ljava.lang.String;@6c101cc1,[Ljava.lang.String;@7d0d91a1),Annotation([Ljava.lang.String;@7fb48179,[Ljava.lang.String;@201c3cda,[Ledu.cmu.lti.nlp.amr.Dependency;@4c86da0c),Annotation([Ljava.lang.String;@5d97caa4,[Ljava.lang.String;@6732726,[Ljava.lang.String;@474821de),Annotation([Ljava.lang.String;@3d64c581,[Ljava.lang.String;@5ec5ea63,[Ledu.cmu.lti.nlp.amr.Entity;@4190bc8a))
AMR:
(a / allow-01, ARG1, e / enter-01)
(d / date-entity, year, 2 / 2001)
(e / enter-01, time, d / date-entity)
(n / name, op, "Bureau")
(n / name, op, "Immigrations")
(n / name, op, "Philippine")
(o / organization, name, n / name)
(r / record, mod, o / organization)
(s / show-01, ARG0, r / record)
(s / show-01, ARG1, a / allow-01)

Decoded in 78,208 microseconds
Sentence: Hambali was blacklisted as the most wanted terrorist in Asia.

NER Entity: (person :name (name :op "Hambali"))
NER Entity: (country :name (name :op "Asia"))
Spans:
Span 2-3:  blacklisted => blacklist-01
Span 6-7:  wanted => want-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  Asia => (continent :name (name :op "Asia"))
Oracle Span 2-3:  blacklisted => blacklist-01
Oracle Span 0-1:  Hambali => (person :name (name :op "Hambali"))
Oracle Span 5-6:  most => most
Oracle Span 7-8:  terrorist => terrorist
Oracle Span 6-7:  wanted => want-01

Missing span: Hambali => (person :name (name :op "Hambali"))
Missing span: Asia => (continent :name (name :op "Asia"))
Missing span: terrorist => terrorist
Missing span: most => most
Dependencies:
1	Hambali	_	NNP	NNP	_	3	nsubjpass	_	_
2	was	_	VBD	VBD	_	3	auxpass	_	_
3	blacklisted	_	VBN	VBN	_	0	root	_	_
4	as	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	8	det	_	_
6	most	_	RBS	RBS	_	8	advmod	_	_
7	wanted	_	JJ	JJ	_	8	amod	_	_
8	terrorist	_	NN	NN	_	4	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	Asia	_	NNP	NNP	_	9	pobj	_	_
11	.	_	.	.	_	3	punct	_	_

Oracle:
(b / blacklist-01, ARG1, p / person)
(b / blacklist-01, prep-as, t / terrorist)
(c / continent, name, n2 / name)
(n / name, op, "Hambali")
(n2 / name, op, "Asia")
(p / person, name, n / name)
(w / want-01, ARG1, t / terrorist)
(w / want-01, ARG4, c / continent)
(w / want-01, degree, m / most)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),wanted,want-01,false), Span(2,3,List(1),blacklisted,blacklist-01,false)),Map(1 -> blacklist-01, 0 -> want-01),Map(w -> want-01, b -> blacklist-01))),[Ljava.lang.String;@47d023b7,Annotation([Ljava.lang.String;@5c83ae01,[Ljava.lang.String;@2d64c100,[Ljava.lang.String;@69d45cca),Annotation([Ljava.lang.String;@2fdf17dc,[Ljava.lang.String;@6e6d4780,[Ledu.cmu.lti.nlp.amr.Dependency;@650ae78c),Annotation([Ljava.lang.String;@2e73d5eb,[Ljava.lang.String;@79c5460e,[Ljava.lang.String;@7d904ff1),Annotation([Ljava.lang.String;@4f94e148,[Ljava.lang.String;@7ff8a9dc,[Ledu.cmu.lti.nlp.amr.Entity;@2cde651b))
AMR:
(w / want-01, ARG1, b / blacklist-01)

Decoded in 18,369 microseconds
Sentence: Hambali was arrested in Thailand in February 2004 and in 2007.

NER Entity: (person :name (name :op "Hambali"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "Thailand"))
Spans:
Span 10-11:  2007 => (date-entity :year 2007)
Span 2-3:  arrested => arrest-01
Span 6-8:  February 2004 => (date-entity :month 2 :year 2004)
Span 4-5:  Thailand => (country :name (name :op "Thailand"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  2007 => (date-entity :year 2007)
Oracle Span 8-9:  and => and
Oracle Span 2-3:  arrested => arrest-01
Oracle Span 6-8:  February 2004 => (date-entity :month 2 :year 2004)
Oracle Span 0-1:  Hambali => (person :name (name :op "Hambali"))
Oracle Span 4-5:  Thailand => (country :name (name :op "Thailand"))

Missing span: Hambali => (person :name (name :op "Hambali"))
Missing span: and => and
Dependencies:
1	Hambali	_	NNP	NNP	_	3	nsubjpass	_	_
2	was	_	VBD	VBD	_	3	auxpass	_	_
3	arrested	_	VBN	VBN	_	0	root	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	Thailand	_	NNP	NNP	_	4	pobj	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	February	_	NNP	NNP	_	6	pobj	_	_
8	2004	_	CD	CD	_	7	num	_	_
9	and	_	CC	CC	_	4	cc	_	_
10	in	_	IN	IN	_	4	conj	_	_
11	2007	_	CD	CD	_	10	pobj	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(a / arrest-01, ARG1, p / person)
(a / arrest-01, location, c / country)
(a / arrest-01, time, a2 / and)
(a2 / and, op, d3 / date-entity)
(a2 / and, op, d4 / date-entity)
(c / country, name, n2 / name)
(d3 / date-entity, month, 2)
(d3 / date-entity, year, 2004)
(d4 / date-entity, year, 2007)
(n / name, op, "Hambali")
(n2 / name, op, "Thailand")
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(1, 0),2007,(date-entity :year 2007),false), Span(6,8,List(4, 3, 2),February 2004,(date-entity :month 2 :year 2004),false), Span(4,5,List(7, 6, 5),Thailand,(country :name (name :op "Thailand")),false), Span(2,3,List(8),arrested,arrest-01,false)),Map(2 -> date-entity, 5 -> country, 8 -> arrest-01, 7 -> "Thailand", 1 -> 2007, 4 -> 2004, 6 -> name, 0 -> date-entity, 3 -> 2),Map(n -> name, 2 -> 2007, d -> date-entity, 23 -> 2004, a -> arrest-01, d2 -> date-entity, c -> country, 22 -> 2))),[Ljava.lang.String;@534e58b6,Annotation([Ljava.lang.String;@3bb87d36,[Ljava.lang.String;@1b495d4,[Ljava.lang.String;@5e1dde44),Annotation([Ljava.lang.String;@7f37b6d9,[Ljava.lang.String;@71e35c4,[Ledu.cmu.lti.nlp.amr.Dependency;@22a10ac6),Annotation([Ljava.lang.String;@12fe1f28,[Ljava.lang.String;@503df2d0,[Ljava.lang.String;@26fb4d06),Annotation([Ljava.lang.String;@c269425,[Ljava.lang.String;@6e43ddd6,[Ledu.cmu.lti.nlp.amr.Entity;@51d719bc))
AMR:
(a / arrest-01, ARG0, d / date-entity)
(a / arrest-01, location, c / country)
(a / arrest-01, time, d2 / date-entity)
(c / country, name, n / name)
(d / date-entity, year, 2 / 2007)
(d2 / date-entity, month, 22 / 2)
(d2 / date-entity, year, 23 / 2004)
(n / name, op, "Thailand")

Decoded in 44,878 microseconds
Sentence: The Immigrations Bureau stated that they only recently received intelligence reports on Hambali's record in the country.

NER Entity: (organization :name (name :op "Immigrations" :op "Bureau"))
NER Entity: (person :name (name :op "Hambali"))
Spans:
Span 17-18:  country => country
Span 1-3:  Immigrations Bureau => (organization :name (name :op "Immigrations" :op "Bureau"))
Span 9-10:  intelligence => intelligence
Span 6-7:  only => only
Span 8-9:  received => receive-01
Span 7-8:  recently => recent
Span 14-15:  record => record

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 17-18:  country => country
Oracle Span 12-13:  Hambali => (person :name (name :op "Hambali"))
Oracle Span 1-3:  Immigrations Bureau => (government-organization :name (name :op "Bureau" :op "Immigrations"))
Oracle Span 9-10:  intelligence => intelligence
Oracle Span 6-7:  only => only
Oracle Span 8-9:  received => receive-01
Oracle Span 7-8:  recently => recent
Oracle Span 14-15:  record => record-01
Oracle Span 10-11:  reports => report-01
Oracle Span 3-4:  stated => state-01

Incorrect span: record => record
Incorrect span: Immigrations Bureau => (organization :name (name :op "Immigrations" :op "Bureau"))
Missing span: Immigrations Bureau => (government-organization :name (name :op "Bureau" :op "Immigrations"))
Missing span: Hambali => (person :name (name :op "Hambali"))
Missing span: stated => state-01
Missing span: reports => report-01
Missing span: record => record-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Immigrations	_	NNP	NNP	_	3	nn	_	_
3	Bureau	_	NNP	NNP	_	4	nsubj	_	_
4	stated	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	9	mark	_	_
6	they	_	PRP	PRP	_	9	nsubj	_	_
7	only	_	RB	RB	_	8	advmod	_	_
8	recently	_	RB	RB	_	9	advmod	_	_
9	received	_	VBD	VBD	_	4	ccomp	_	_
10	intelligence	_	NN	NN	_	11	nn	_	_
11	reports	_	NNS	NNS	_	9	dobj	_	_
12	on	_	IN	IN	_	9	prep	_	_
13	Hambali	_	NNP	NNP	_	15	poss	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	record	_	NN	NN	_	12	pobj	_	_
16	in	_	IN	IN	_	9	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	country	_	NN	NN	_	16	pobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(g / government-organization, name, n / name)
(n / name, op, "Bureau")
(n / name, op, "Immigrations")
(n2 / name, op, "Hambali")
(p / person, name, n2 / name)
(r / receive-01, ARG0, g / government-organization)
(r / receive-01, ARG1, r2 / report-01)
(r / receive-01, time, r4 / recent)
(r2 / report-01, ARG0, i / intelligence)
(r2 / report-01, ARG1, r3 / record-01)
(r2 / report-01, ARG2, g / government-organization)
(r3 / record-01, ARG0, p / person)
(r3 / record-01, location, c / country)
(r4 / recent, mod, o2 / only)
(s / state-01, ARG0, g / government-organization)
(s / state-01, ARG1, r / receive-01)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),country,country,false), Span(14,15,List(1),record,record,false), Span(9,10,List(2),intelligence,intelligence,false), Span(8,9,List(3),received,receive-01,false), Span(7,8,List(4),recently,recent,false), Span(6,7,List(5),only,only,false), Span(1,3,List(9, 8, 7, 6),Immigrations Bureau,(organization :name (name :op "Immigrations" :op "Bureau")),false)),Map(2 -> intelligence, 5 -> only, 8 -> "Immigrations", 7 -> name, 1 -> record, 4 -> recent, 6 -> organization, 9 -> "Bureau", 0 -> country, 3 -> receive-01),Map(n -> name, r3 -> recent, r2 -> receive-01, o2 -> organization, i -> intelligence, r -> record, c -> country, o -> only))),[Ljava.lang.String;@2d38edfd,Annotation([Ljava.lang.String;@1507c3c3,[Ljava.lang.String;@655a01d8,[Ljava.lang.String;@c29fe36),Annotation([Ljava.lang.String;@6614bd4b,[Ljava.lang.String;@4d266391,[Ledu.cmu.lti.nlp.amr.Dependency;@7847ef2c),Annotation([Ljava.lang.String;@3b5c665c,[Ljava.lang.String;@78e17a99,[Ljava.lang.String;@625a4ff),Annotation([Ljava.lang.String;@41dc0598,[Ljava.lang.String;@196ae579,[Ledu.cmu.lti.nlp.amr.Entity;@6a2c717f))
AMR:
(c / country, op, i / intelligence)
(n / name, op, "Bureau")
(n / name, op, "Immigrations")
(o2 / organization, name, n / name)
(r2 / receive-01, ARG0, o2 / organization)
(r2 / receive-01, ARG1, c / country)
(r2 / receive-01, ARG2, r / record)
(r2 / receive-01, time, o / only)
(r2 / receive-01, time, r3 / recent)

Decoded in 106,358 microseconds
Sentence: According to the records Osama bin Laden's brother Sheik Mohammed Khalid has been able to travel in and out of the country a number of times.

NER Entity: (person :name (name :op "Osama" :op "bin" :op "Laden"))
NER Entity: (person :name (name :op "Mohammed" :op "Khalid"))
Spans:
Span 14-15:  able => possible
Span 8-9:  brother => brother
Span 22-23:  country => country
Span 10-12:  Mohammed Khalid => (person :name (name :op "Mohammed" :op "Khalid"))
Span 4-7:  Osama bin Laden => (person :name (name :op "Laden" :op "Bin" :op "Osama"))
Span 16-17:  travel => travel-01

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 14-15:  able => possible
Oracle Span 18-19:  and => and
Oracle Span 8-9:  brother => brother
Oracle Span 22-23:  country => country
Oracle Span 24-25:  number => number
Oracle Span 4-7:  Osama bin Laden => (person :name (name :op "Laden" :op "bin" :op "Osama"))
Oracle Span 3-4:  records => (thing :ARG1-of record-01)
Oracle Span 9-12:  Sheik Mohammed Khalid => (name :op "Khalid" :op "Mohammed" :op "Sheik")
Oracle Span 16-17:  travel => travel-01

Extra span: Mohammed Khalid => (person :name (name :op "Mohammed" :op "Khalid"))
Incorrect span: Osama bin Laden => (person :name (name :op "Laden" :op "Bin" :op "Osama"))
Missing span: Sheik Mohammed Khalid => (name :op "Khalid" :op "Mohammed" :op "Sheik")
Missing span: Osama bin Laden => (person :name (name :op "Laden" :op "bin" :op "Osama"))
Missing span: records => (thing :ARG1-of record-01)
Missing span: and => and
Missing span: number => number
Dependencies:
1	According	_	VBG	VBG	_	10	prep	_	_
2	to	_	TO	TO	_	1	pcomp	_	_
3	the	_	DT	DT	_	4	det	_	_
4	records	_	NNS	NNS	_	2	pobj	_	_
5	Osama	_	NNP	NNP	_	7	nn	_	_
6	bin	_	NNP	NNP	_	7	nn	_	_
7	Laden	_	NNP	NNP	_	9	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	brother	_	NN	NN	_	10	nsubj	_	_
10	Sheik	_	VBD	VBD	_	0	root	_	_
11	Mohammed	_	NNP	NNP	_	12	nn	_	_
12	Khalid	_	NNP	NNP	_	15	nsubj	_	_
13	has	_	VBZ	VBZ	_	15	aux	_	_
14	been	_	VBN	VBN	_	15	cop	_	_
15	able	_	JJ	JJ	_	10	ccomp	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	travel	_	VB	VB	_	15	xcomp	_	_
18	in	_	RP	RP	_	17	prt	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	out	_	RP	RP	_	18	dep	_	_
21	of	_	IN	IN	_	17	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	country	_	NN	NN	_	21	pobj	_	_
24	a	_	DT	DT	_	25	det	_	_
25	number	_	NN	NN	_	17	dobj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	times	_	NNS	NNS	_	26	pobj	_	_
28	.	_	.	.	_	10	punct	_	_

Oracle:
(a2 / and, frequency, n3 / number)
(a2 / and, op, t2 / travel-01)
(b2 / brother, name, n / name)
(b2 / brother, poss, p3 / person)
(n / name, op, "Khalid")
(n / name, op, "Mohammed")
(n / name, op, "Sheik")
(n2 / name, op, "Laden")
(n2 / name, op, "Osama")
(n2 / name, op, "bin")
(p / possible, domain, a2 / and)
(p3 / person, name, n2 / name)
(r / record-01, ARG1, t3 / thing)
(t2 / travel-01, ARG0, b2 / brother)
(t2 / travel-01, source, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),country,country,false), Span(16,17,List(1),travel,travel-01,false), Span(14,15,List(2),able,possible,false), Span(10,12,List(6, 5, 4, 3),Mohammed Khalid,(person :name (name :op "Mohammed" :op "Khalid")),false), Span(8,9,List(7),brother,brother,false), Span(4,7,List(12, 11, 10, 9, 8),Osama bin Laden,(person :name (name :op "Laden" :op "Bin" :op "Osama")),false)),Map(2 -> possible, 5 -> "Mohammed", 12 -> "Osama", 8 -> person, 7 -> brother, 1 -> travel-01, 4 -> name, 11 -> "Bin", 6 -> "Khalid", 0 -> country, 9 -> name, 3 -> person, 10 -> "Laden"),Map(n -> name, b -> brother, t -> travel-01, p2 -> person, p -> possible, c -> country, n2 -> name, p3 -> person))),[Ljava.lang.String;@41853299,Annotation([Ljava.lang.String;@60d40ff4,[Ljava.lang.String;@2e5b7fba,[Ljava.lang.String;@27755487),Annotation([Ljava.lang.String;@4f0cab0a,[Ljava.lang.String;@fe7b6b0,[Ledu.cmu.lti.nlp.amr.Dependency;@7ab4ae59),Annotation([Ljava.lang.String;@77681ce4,[Ljava.lang.String;@5d96bdf8,[Ljava.lang.String;@6f76c2cc),Annotation([Ljava.lang.String;@306f6f1d,[Ljava.lang.String;@7d7cac8,[Ledu.cmu.lti.nlp.amr.Entity;@6fc6deb7))
AMR:
(b / brother, mod, c / country)
(b / brother, poss, p3 / person)
(n / name, op, "Khalid")
(n / name, op, "Mohammed")
(n2 / name, op, "Bin")
(n2 / name, op, "Laden")
(n2 / name, op, "Osama")
(p / possible, domain, t / travel-01)
(p2 / person, name, n / name)
(p3 / person, name, n2 / name)
(t / travel-01, ARG0, p2 / person)
(t / travel-01, ARG1, c / country)

Decoded in 363,303 microseconds
Sentence: Sheik Mohammed Khalid is allegedly funding terrorist networks in the Philippines.

NER Entity: (person :name (name :op "Mohammed" :op "Khalid"))
NER Entity: (country :name (name :op "Philippines"))
Spans:
Span 4-5:  allegedly => allege-01
Span 5-6:  funding => fund-01
Span 1-3:  Mohammed Khalid => (person :name (name :op "Mohammed" :op "Khalid"))
Span 7-8:  networks => network

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  allegedly => allege-01
Oracle Span 5-6:  funding => fund-01
Oracle Span 7-8:  networks => network
Oracle Span 10-11:  Philippines => (country :name (name :op "Philippines"))
Oracle Span 0-3:  Sheik Mohammed Khalid => (person :name (name :op "Khalid" :op "Mohammed" :op "Sheik"))
Oracle Span 6-7:  terrorist => terrorist

Extra span: Mohammed Khalid => (person :name (name :op "Mohammed" :op "Khalid"))
Missing span: Sheik Mohammed Khalid => (person :name (name :op "Khalid" :op "Mohammed" :op "Sheik"))
Missing span: Philippines => (country :name (name :op "Philippines"))
Missing span: terrorist => terrorist
Dependencies:
1	Sheik	_	NNP	NNP	_	3	nn	_	_
2	Mohammed	_	NNP	NNP	_	3	nn	_	_
3	Khalid	_	NNP	NNP	_	6	nsubj	_	_
4	is	_	VBZ	VBZ	_	6	aux	_	_
5	allegedly	_	RB	RB	_	6	advmod	_	_
6	funding	_	VBG	VBG	_	0	root	_	_
7	terrorist	_	JJ	JJ	_	8	amod	_	_
8	networks	_	NNS	NNS	_	6	dobj	_	_
9	in	_	IN	IN	_	6	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	Philippines	_	NNPS	NNPS	_	9	pobj	_	_
12	.	_	.	.	_	6	punct	_	_

Oracle:
(a / allege-01, ARG1, f / fund-01)
(c / country, name, n3 / name)
(f / fund-01, ARG0, p / person)
(f / fund-01, ARG1, n2 / network)
(n / name, op, "Khalid")
(n / name, op, "Mohammed")
(n / name, op, "Sheik")
(n2 / network, location, c / country)
(n2 / network, mod, t / terrorist)
(n3 / name, op, "Philippines")
(p / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),networks,network,false), Span(5,6,List(1),funding,fund-01,false), Span(4,5,List(2),allegedly,allege-01,false), Span(1,3,List(6, 5, 4, 3),Mohammed Khalid,(person :name (name :op "Mohammed" :op "Khalid")),false)),Map(2 -> allege-01, 5 -> "Mohammed", 1 -> fund-01, 4 -> name, 6 -> "Khalid", 0 -> network, 3 -> person),Map(n -> network, p -> person, a -> allege-01, f -> fund-01, n2 -> name))),[Ljava.lang.String;@367f0121,Annotation([Ljava.lang.String;@7da39774,[Ljava.lang.String;@441b8382,[Ljava.lang.String;@1df1ced0),Annotation([Ljava.lang.String;@5349b246,[Ljava.lang.String;@32b0876c,[Ledu.cmu.lti.nlp.amr.Dependency;@2aaf152b),Annotation([Ljava.lang.String;@39bbd9e0,[Ljava.lang.String;@27fe9713,[Ljava.lang.String;@11c3ff67),Annotation([Ljava.lang.String;@4397a639,[Ljava.lang.String;@24841372,[Ledu.cmu.lti.nlp.amr.Entity;@77114efe))
AMR:
(a / allege-01, ARG1, f / fund-01)
(f / fund-01, ARG0, p / person)
(f / fund-01, ARG1, n / network)
(n2 / name, op, "Khalid")
(n2 / name, op, "Mohammed")
(p / person, name, n2 / name)

Decoded in 32,213 microseconds
Sentence: The military and police have been placed on high alert for the holy week starting April 5, 2004.

mkDayMonthYear(April	5	,	2004,5,April,2004)
Spans:
Span 9-10:  alert => alert-01
Span 15-19:  April 5 , 2004 => (date-entity :day 5 :month 4 :year 2004)
Span 12-13:  holy => holy
Span 6-7:  placed => place-01
Span 14-15:  starting => start-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 9-10:  alert => alert-01
Oracle Span 2-3:  and => and
Oracle Span 15-19:  April 5 , 2004 => (date-entity :day 5 :month 4 :year 2004)
Oracle Span 8-9:  high => high
Oracle Span 12-13:  holy => holy
Oracle Span 1-2:  military => military
Oracle Span 6-7:  placed => place-01
Oracle Span 3-4:  police => police
Oracle Span 14-15:  starting => start-01
Oracle Span 13-14:  week => week

Missing span: high => high
Missing span: week => week
Missing span: and => and
Missing span: police => police
Missing span: military => military
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	military	_	NN	NN	_	7	nsubjpass	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	police	_	NNS	NNS	_	2	conj	_	_
5	have	_	VBP	VBP	_	7	aux	_	_
6	been	_	VBN	VBN	_	7	auxpass	_	_
7	placed	_	VBN	VBN	_	0	root	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	high	_	JJ	JJ	_	10	amod	_	_
10	alert	_	NN	NN	_	8	pobj	_	_
11	for	_	IN	IN	_	7	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	holy	_	JJ	JJ	_	14	amod	_	_
14	week	_	NN	NN	_	11	pobj	_	_
15	starting	_	VBG	VBG	_	14	vmod	_	_
16	April	_	NNP	NNP	_	15	tmod	_	_
17	5	_	CD	CD	_	16	num	_	_
18	,	_	,	,	_	16	punct	_	_
19	2004	_	CD	CD	_	16	num	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(a / alert-01, ARG1, a2 / and)
(a / alert-01, degree, h / high)
(a / alert-01, time, w / week)
(a2 / and, op, m / military)
(a2 / and, op, p / police)
(d2 / date-entity, day, 5)
(d2 / date-entity, month, 4)
(d2 / date-entity, year, 2004)
(p2 / place-01, ARG1, a / alert-01)
(s / start-01, ARG1, w / week)
(s / start-01, time, d2 / date-entity)
(w / week, mod, h2 / holy)

Input(Some(Graph(null,ArrayBuffer(Span(15,19,List(3, 2, 1, 0),April 5 , 2004,(date-entity :day 5 :month 4 :year 2004),false), Span(14,15,List(4),starting,start-01,false), Span(12,13,List(5),holy,holy,false), Span(9,10,List(6),alert,alert-01,false), Span(6,7,List(7),placed,place-01,false)),Map(2 -> 4, 5 -> holy, 7 -> place-01, 1 -> 5, 4 -> start-01, 6 -> alert-01, 0 -> date-entity, 3 -> 2004),Map(h -> holy, 2 -> 2004, 5 -> 5, s -> start-01, d -> date-entity, p -> place-01, a -> alert-01, 4 -> 4))),[Ljava.lang.String;@79a7bfbc,Annotation([Ljava.lang.String;@77f68df,[Ljava.lang.String;@3e4e4c1,[Ljava.lang.String;@7e7f3cfd),Annotation([Ljava.lang.String;@3ae126d1,[Ljava.lang.String;@46a488c2,[Ledu.cmu.lti.nlp.amr.Dependency;@6242ae3b),Annotation([Ljava.lang.String;@65ddee5a,[Ljava.lang.String;@56399b9e,[Ljava.lang.String;@34b9eb03),Annotation([Ljava.lang.String;@43fda8d9,[Ljava.lang.String;@49d831c2,[Ledu.cmu.lti.nlp.amr.Entity;@53a7a60c))
AMR:
(d / date-entity, day, 5 / 5)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)
(p / place-01, ARG1, s / start-01)
(p / place-01, ARG2, a / alert-01)
(s / start-01, ARG1, h / holy)
(s / start-01, time, d / date-entity)

Decoded in 70,194 microseconds
Sentence: 6 Abu Sayyaf suspects were captured last week in separate raids in Metro Manila.

NER Entity: (organization :name (name :op "Abu" :op "Sayyaf"))
NER Entity: (country :name (name :op "Metro" :op "Manila"))
Spans:
Span 1-3:  Abu Sayyaf => (criminal-organization :name (name :op "Sayyaf" :op "Abu"))
Span 5-6:  captured => capture-01
Span 6-7:  last => last
Span 12-14:  Metro Manila => (country :name (name :op "Metro" :op "Manila"))
Span 10-11:  raids => raid-01
Span 9-10:  separate => separate

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 0-1:  6 => 6
Oracle Span 1-3:  Abu Sayyaf => (criminal-organization :name (name :op "Sayyaf" :op "Abu"))
Oracle Span 5-6:  captured => capture-01
Oracle Span 6-7:  last => last
Oracle Span 12-14:  Metro Manila => (country-region :name (name :op "Manila" :op "Metro"))
Oracle Span 10-11:  raids => raid-01
Oracle Span 9-10:  separate => separate
Oracle Span 3-4:  suspects => suspect
Oracle Span 7-8:  week => week

Incorrect span: Metro Manila => (country :name (name :op "Metro" :op "Manila"))
Missing span: Metro Manila => (country-region :name (name :op "Manila" :op "Metro"))
Missing span: week => week
Missing span: suspects => suspect
Missing span: 6 => 6
Dependencies:
1	6	_	CD	CD	_	4	num	_	_
2	Abu	_	NNP	NNP	_	4	nn	_	_
3	Sayyaf	_	NN	NN	_	4	nn	_	_
4	suspects	_	NNS	NNS	_	6	nsubjpass	_	_
5	were	_	VBD	VBD	_	6	auxpass	_	_
6	captured	_	VBN	VBN	_	0	root	_	_
7	last	_	JJ	JJ	_	8	amod	_	_
8	week	_	NN	NN	_	6	tmod	_	_
9	in	_	IN	IN	_	6	prep	_	_
10	separate	_	JJ	JJ	_	11	amod	_	_
11	raids	_	NNS	NNS	_	9	pobj	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	Metro	_	NNP	NNP	_	14	nn	_	_
14	Manila	_	NNP	NNP	_	12	pobj	_	_
15	.	_	.	.	_	6	punct	_	_

Oracle:
(c / capture-01, ARG1, s / suspect)
(c / capture-01, location, c2 / country-region)
(c / capture-01, time, r / raid-01)
(c / capture-01, time, w / week)
(c2 / country-region, name, n2 / name)
(c3 / criminal-organization, name, n / name)
(n / name, op, "Abu")
(n / name, op, "Sayyaf")
(n2 / name, op, "Manila")
(n2 / name, op, "Metro")
(r / raid-01, ARG1, s / suspect)
(r / raid-01, mod, s2 / separate)
(s / suspect, mod, c3 / criminal-organization)
(s / suspect, quant, 6 / 6)
(w / week, mod, l / last)

Input(Some(Graph(null,ArrayBuffer(Span(12,14,List(3, 2, 1, 0),Metro Manila,(country :name (name :op "Metro" :op "Manila")),false), Span(10,11,List(4),raids,raid-01,false), Span(9,10,List(5),separate,separate,false), Span(6,7,List(6),last,last,false), Span(5,6,List(7),captured,capture-01,false), Span(1,3,List(11, 10, 9, 8),Abu Sayyaf,(criminal-organization :name (name :op "Sayyaf" :op "Abu")),false)),Map(2 -> "Metro", 5 -> separate, 8 -> criminal-organization, 7 -> capture-01, 1 -> name, 11 -> "Abu", 4 -> raid-01, 6 -> last, 9 -> name, 0 -> country, 10 -> "Sayyaf", 3 -> "Manila"),Map(n -> name, s -> separate, c3 -> criminal-organization, r -> raid-01, l -> last, c -> country, n2 -> name, c2 -> capture-01))),[Ljava.lang.String;@28bdbe88,Annotation([Ljava.lang.String;@6a87026,[Ljava.lang.String;@ef60710,[Ljava.lang.String;@600f5704),Annotation([Ljava.lang.String;@2503ec73,[Ljava.lang.String;@606f81b5,[Ledu.cmu.lti.nlp.amr.Dependency;@5e1fc42f),Annotation([Ljava.lang.String;@44b21f9f,[Ljava.lang.String;@7ee8130e,[Ljava.lang.String;@6296474f),Annotation([Ljava.lang.String;@4288d98e,[Ljava.lang.String;@169268a7,[Ledu.cmu.lti.nlp.amr.Entity;@285c6918))
AMR:
(c / country, name, n / name)
(c2 / capture-01, ARG1, l / last)
(c2 / capture-01, location, r / raid-01)
(c3 / criminal-organization, mod, c / country)
(c3 / criminal-organization, name, n2 / name)
(n / name, op, "Manila")
(n / name, op, "Metro")
(n2 / name, op, "Abu")
(n2 / name, op, "Sayyaf")
(r / raid-01, ARG1, c / country)
(r / raid-01, mod, s / separate)

Decoded in 115,562 microseconds
Sentence: The suspects' plot to launch terrorist attacks allegedly as devastating as the Madrid bombings in Spain was foiled.

NER Entity: (country :name (name :op "Madrid"))
NER Entity: (country :name (name :op "Spain"))
Spans:
Span 8-9:  allegedly => allege-01
Span 7-8:  attacks => attack-01
Span 14-15:  bombings => bomb-01
Span 10-11:  devastating => devastate-01
Span 18-19:  foiled => foil-01
Span 5-6:  launch => launch-01
Span 13-14:  Madrid => (city :name (name :op "Madrid"))
Span 3-4:  plot => plot-01
Span 16-17:  Spain => (country :name (name :op "Spain"))

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 8-9:  allegedly => allege-01
Oracle Span 7-8:  attacks => attack-01
Oracle Span 14-15:  bombings => bomb-01
Oracle Span 10-11:  devastating => devastate-01
Oracle Span 18-19:  foiled => foil-01
Oracle Span 5-6:  launch => launch-01
Oracle Span 13-14:  Madrid => (city :name (name :op "Madrid"))
Oracle Span 3-4:  plot => plot-01
Oracle Span 16-17:  Spain => (country :name (name :op "Spain"))
Oracle Span 1-2:  suspects => suspect
Oracle Span 6-7:  terrorist => terrorist

Missing span: terrorist => terrorist
Missing span: suspects => suspect
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	suspects	_	NNS	NNS	_	4	poss	_	_
3	'	_	POS	POS	_	2	possessive	_	_
4	plot	_	NN	NN	_	19	nsubj	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	launch	_	VB	VB	_	4	vmod	_	_
7	terrorist	_	JJ	JJ	_	8	amod	_	_
8	attacks	_	NNS	NNS	_	11	nsubj	_	_
9	allegedly	_	RB	RB	_	11	advmod	_	_
10	as	_	RB	RB	_	11	advmod	_	_
11	devastating	_	JJ	JJ	_	6	xcomp	_	_
12	as	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	Madrid	_	NNP	NNP	_	15	nn	_	_
15	bombings	_	NNS	NNS	_	12	pobj	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	Spain	_	NNP	NNP	_	16	pobj	_	_
18	was	_	VBD	VBD	_	19	aux	_	_
19	foiled	_	JJ	JJ	_	0	root	_	_
20	.	_	.	.	_	19	punct	_	_

Oracle:
(a / attack-01, ARG0, t / terrorist)
(a / attack-01, prep-as, d / devastate-01)
(b / bomb-01, ARG1, c / city)
(c / city, location, c2 / country)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(d / devastate-01, ARG1, a2 / allege-01)
(d / devastate-01, compared-to, b / bomb-01)
(f / foil-01, ARG2, p / plot-01)
(l / launch-01, ARG0, s / suspect)
(l / launch-01, ARG1, a / attack-01)
(n / name, op, "Madrid")
(n2 / name, op, "Spain")
(p / plot-01, ARG0, s / suspect)
(p / plot-01, ARG1, l / launch-01)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),foiled,foil-01,false), Span(16,17,List(3, 2, 1),Spain,(country :name (name :op "Spain")),false), Span(14,15,List(4),bombings,bomb-01,false), Span(13,14,List(7, 6, 5),Madrid,(city :name (name :op "Madrid")),false), Span(10,11,List(8),devastating,devastate-01,false), Span(8,9,List(9),allegedly,allege-01,false), Span(7,8,List(10),attacks,attack-01,false), Span(5,6,List(11),launch,launch-01,false), Span(3,4,List(12),plot,plot-01,false)),Map(2 -> name, 5 -> city, 12 -> plot-01, 8 -> devastate-01, 7 -> "Madrid", 1 -> country, 4 -> bomb-01, 11 -> launch-01, 6 -> name, 0 -> foil-01, 9 -> allege-01, 3 -> "Spain", 10 -> attack-01),Map(n -> name, b -> bomb-01, d -> devastate-01, p -> plot-01, a -> allege-01, a2 -> attack-01, l -> launch-01, c -> country, f -> foil-01, n2 -> name, c2 -> city))),[Ljava.lang.String;@78a0ff63,Annotation([Ljava.lang.String;@7c601d50,[Ljava.lang.String;@79b2852b,[Ljava.lang.String;@326d27ac),Annotation([Ljava.lang.String;@4d499d65,[Ljava.lang.String;@313f8301,[Ledu.cmu.lti.nlp.amr.Dependency;@5cc9d3d0),Annotation([Ljava.lang.String;@7c2dfa2,[Ljava.lang.String;@661d88a,[Ljava.lang.String;@4b0b64cc),Annotation([Ljava.lang.String;@59ce792e,[Ljava.lang.String;@4860827a,[Ledu.cmu.lti.nlp.amr.Entity;@404db674))
AMR:
(a / allege-01, ARG1, a2 / attack-01)
(b / bomb-01, location, c / country)
(b / bomb-01, location, c2 / city)
(c / country, name, n / name)
(c2 / city, name, n2 / name)
(d / devastate-01, ARG1, b / bomb-01)
(d / devastate-01, ARG2, a2 / attack-01)
(f / foil-01, ARG1, p / plot-01)
(l / launch-01, ARG1, a2 / attack-01)
(n / name, op, "Spain")
(n2 / name, op, "Madrid")
(p / plot-01, ARG1, l / launch-01)

Decoded in 250,565 microseconds
Sentence: President Gloria Macapagal-Arroyo said in a statement on April 7, 2004 that the government is closely watching foreigners in the country who may have taught the local rebels and terrorists to make bombs or have laundered money from the al-Qaeda terrorist group.

NER Entity: (person :name (name :op "Gloria" :op "Macapagal" :op "-" :op "Arroyo"))
mkDayMonthYear(April	7	,	2004,7,April,2004)
NER Entity: (organization :name (name :op "al-Qaeda"))
Spans:
Span 10-14:  April 7 , 2004 => (date-entity :day 7 :month 4 :year 2004)
Span 35-36:  bombs => bomb
Span 18-19:  closely => close
Span 23-24:  country => country
Span 20-21:  foreigners => foreigner
Span 1-3:  Gloria Macapagal => (person :name (name :op "Gloria" :op "Macapagal" :op "-" :op "Arroyo"))
Span 29-30:  local => local
Span 25-26:  may => possible
Span 39-40:  money => money
Span 36-37:  or => or
Span 0-1:  President => (have-org-role-91 :ARG2 president)
Span 5-6:  said => say-01
Span 32-33:  terrorists => terrorist

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 42-43:  al-Qaeda => (name :op "al-Qaeda")
Oracle Span 31-32:  and => and
Oracle Span 10-14:  April 7 , 2004 => (date-entity :day 7 :month 4 :year 2004)
Oracle Span 35-36:  bombs => bomb
Oracle Span 18-19:  closely => close
Oracle Span 23-24:  country => country
Oracle Span 20-21:  foreigners => foreigner
Oracle Span 1-5:  Gloria Macapagal - Arroyo => (person :name (name :op "Macapagal-Arroyo" :op "Gloria"))
Oracle Span 16-17:  government => (government-organization :ARG0-of govern-01)
Oracle Span 44-45:  group => group
Oracle Span 26-27:  have => have-org-role-91
Oracle Span 38-39:  laundered => launder-01
Oracle Span 29-30:  local => local
Oracle Span 34-35:  make => make-01
Oracle Span 25-26:  may => possible
Oracle Span 39-40:  money => money
Oracle Span 0-1:  President => president
Oracle Span 30-31:  rebels => (person :ARG0-of rebel-01)
Oracle Span 5-6:  said => say-01
Oracle Span 8-9:  statement => statement
Oracle Span 27-28:  taught => teach-01
Oracle Span 43-44:  terrorist => terrorist
Oracle Span 32-33:  terrorists => terrorist
Oracle Span 19-20:  watching => watch-01

Extra span: or => or
Extra span: Gloria Macapagal => (person :name (name :op "Gloria" :op "Macapagal" :op "-" :op "Arroyo"))
Incorrect span: President => (have-org-role-91 :ARG2 president)
Missing span: Gloria Macapagal - Arroyo => (person :name (name :op "Macapagal-Arroyo" :op "Gloria"))
Missing span: al-Qaeda => (name :op "al-Qaeda")
Missing span: statement => statement
Missing span: watching => watch-01
Missing span: laundered => launder-01
Missing span: group => group
Missing span: taught => teach-01
Missing span: and => and
Missing span: terrorist => terrorist
Missing span: rebels => (person :ARG0-of rebel-01)
Missing span: make => make-01
Missing span: President => president
Missing span: government => (government-organization :ARG0-of govern-01)
Missing span: have => have-org-role-91
Dependencies:
1	President	_	NNP	NNP	_	3	nn	_	_
2	Gloria	_	NNP	NNP	_	3	nn	_	_
3	Macapagal-Arroyo	_	NNP	NNP	_	4	nsubj	_	_
4	said	_	VBD	VBD	_	0	root	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	a	_	DT	DT	_	7	det	_	_
7	statement	_	NN	NN	_	5	pobj	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	April	_	NNP	NNP	_	8	pobj	_	_
10	7	_	CD	CD	_	9	num	_	_
11	,	_	,	,	_	9	punct	_	_
12	2004	_	CD	CD	_	9	num	_	_
13	that	_	IN	IN	_	18	mark	_	_
14	the	_	DT	DT	_	15	det	_	_
15	government	_	NN	NN	_	18	nsubj	_	_
16	is	_	VBZ	VBZ	_	18	aux	_	_
17	closely	_	RB	RB	_	18	advmod	_	_
18	watching	_	VBG	VBG	_	4	ccomp	_	_
19	foreigners	_	NNS	NNS	_	18	dobj	_	_
20	in	_	IN	IN	_	18	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	country	_	NN	NN	_	20	pobj	_	_
23	who	_	WP	WP	_	26	nsubj	_	_
24	may	_	MD	MD	_	26	aux	_	_
25	have	_	VB	VB	_	26	aux	_	_
26	taught	_	VBN	VBN	_	22	rcmod	_	_
27	the	_	DT	DT	_	29	det	_	_
28	local	_	JJ	JJ	_	29	amod	_	_
29	rebels	_	NNS	NNS	_	26	dobj	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	terrorists	_	NNS	NNS	_	29	conj	_	_
32	to	_	TO	TO	_	33	aux	_	_
33	make	_	VB	VB	_	26	vmod	_	_
34	bombs	_	NNS	NNS	_	33	dobj	_	_
35	or	_	CC	CC	_	18	cc	_	_
36	have	_	VBP	VBP	_	18	conj	_	_
37	laundered	_	VBN	VBN	_	38	amod	_	_
38	money	_	NN	NN	_	36	dobj	_	_
39	from	_	IN	IN	_	36	prep	_	_
40	the	_	DT	DT	_	43	det	_	_
41	al-Qaeda	_	NNP	NNP	_	43	nn	_	_
42	terrorist	_	JJ	JJ	_	43	amod	_	_
43	group	_	NN	NN	_	39	pobj	_	_
44	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, p4 / person)
(a / and, op, t2 / terrorist)
(d / date-entity, day, 7)
(d / date-entity, month, 4)
(d / date-entity, year, 2004)
(f / foreigner, location, c2 / country)
(g2 / govern-01, ARG0, g / government-organization)
(g3 / group, mod, t3 / terrorist)
(g3 / group, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / president)
(l / launder-01, ARG0, f / foreigner)
(l / launder-01, ARG1, m2 / money)
(l / launder-01, source, g3 / group)
(m / make-01, ARG0, a / and)
(m / make-01, ARG1, b / bomb)
(n / name, op, "Gloria")
(n / name, op, "Macapagal-Arroyo")
(n2 / name, op, "al-Qaeda")
(p / person, name, n / name)
(p4 / person, mod, l2 / local)
(r / rebel-01, ARG0, p4 / person)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, w / watch-01)
(s / say-01, time, d / date-entity)
(s / say-01, time, s2 / statement)
(t / teach-01, ARG0, f / foreigner)
(t / teach-01, ARG1, m / make-01)
(t / teach-01, ARG2, a / and)
(t / teach-01, mod, p3 / possible)
(w / watch-01, ARG0, g / government-organization)
(w / watch-01, ARG1, f / foreigner)
(w / watch-01, manner, c / close)

Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),money,money,false), Span(36,37,List(1),or,or,false), Span(35,36,List(2),bombs,bomb,false), Span(32,33,List(3),terrorists,terrorist,false), Span(29,30,List(4),local,local,false), Span(25,26,List(5),may,possible,false), Span(23,24,List(6),country,country,false), Span(20,21,List(7),foreigners,foreigner,false), Span(18,19,List(8),closely,close,false), Span(10,14,List(12, 11, 10, 9),April 7 , 2004,(date-entity :day 7 :month 4 :year 2004),false), Span(5,6,List(13),said,say-01,false), Span(1,3,List(19, 18, 17, 16, 15, 14),Gloria Macapagal,(person :name (name :op "Gloria" :op "Macapagal" :op "-" :op "Arroyo")),false), Span(0,1,List(21, 20),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> bomb, 5 -> possible, 12 -> 2004, 15 -> name, 8 -> close, 21 -> president, 18 -> "-", 7 -> foreigner, 17 -> "Macapagal", 1 -> or, 4 -> local, 11 -> 4, 14 -> person, 20 -> have-org-role-91, 6 -> country, 0 -> money, 9 -> date-entity, 16 -> "Gloria", 19 -> "Arroyo", 3 -> terrorist, 10 -> 7, 13 -> say-01),Map(n -> name, h -> have-org-role-91, 2 -> 2004, b -> bomb, t -> terrorist, p2 -> person, s -> say-01, m -> money, d -> date-entity, 7 -> 7, p -> possible, 4 -> 4, c -> country, l -> local, f -> foreigner, o -> or, p3 -> president, c2 -> close))),[Ljava.lang.String;@50f097b5,Annotation([Ljava.lang.String;@7add838c,[Ljava.lang.String;@3662bdff,[Ljava.lang.String;@1bb15351),Annotation([Ljava.lang.String;@4fa822ad,[Ljava.lang.String;@597f0937,[Ledu.cmu.lti.nlp.amr.Dependency;@7ad1caa2),Annotation([Ljava.lang.String;@6b6b3572,[Ljava.lang.String;@65d8dff8,[Ljava.lang.String;@444f44c5),Annotation([Ljava.lang.String;@303f1234,[Ljava.lang.String;@24d61e4,[Ledu.cmu.lti.nlp.amr.Entity;@2149594a))
AMR:
(d / date-entity, day, 7 / 7)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)
(f / foreigner, location, c / country)
(f / foreigner, mod, c2 / close)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p3 / president)
(l / local, op, s / say-01)
(n / name, op, "-")
(n / name, op, "Arroyo")
(n / name, op, "Gloria")
(n / name, op, "Macapagal")
(o / or, op, b / bomb)
(o / or, op, m / money)
(p / possible, op, s / say-01)
(p2 / person, name, n / name)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, o / or)
(s / say-01, time, d / date-entity)
(t / terrorist, op, o / or)

Decoded in 451,245 microseconds
Sentence: ABS-CBN news channel is a local television station in Manila.

NER Entity: (organization :name (name :op "ABS" :op "-" :op "CBN"))
NER Entity: (country :name (name :op "Manila"))
NER Entity: (country :name (name :op "Manila"))
Spans:
Span 4-5:  channel => channel
Span 7-8:  local => local
Span 11-12:  Manila => (city :name (name :op "Manila"))
Span 3-4:  news => news
Span 9-10:  station => station
Span 8-9:  television => television

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-3:  ABS - CBN => (name :op "ABS-CBN")
Oracle Span 4-5:  channel => channel
Oracle Span 7-8:  local => local
Oracle Span 11-12:  Manila => (city :name (name :op "Manila"))
Oracle Span 3-4:  news => news
Oracle Span 9-10:  station => station
Oracle Span 8-9:  television => television

Missing span: ABS - CBN => (name :op "ABS-CBN")
Dependencies:
1	ABS-CBN	_	NNP	NNP	_	3	nn	_	_
2	news	_	NN	NN	_	3	nn	_	_
3	channel	_	NN	NN	_	8	nsubj	_	_
4	is	_	VBZ	VBZ	_	8	cop	_	_
5	a	_	DT	DT	_	8	det	_	_
6	local	_	JJ	JJ	_	8	amod	_	_
7	television	_	NN	NN	_	8	nn	_	_
8	station	_	NN	NN	_	0	root	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	Manila	_	NNP	NNP	_	9	pobj	_	_
11	.	_	.	.	_	8	punct	_	_

Oracle:
(c / channel, mod, n / news)
(c / channel, name, n2 / name)
(c2 / city, name, n3 / name)
(n2 / name, op, "ABS-CBN")
(n3 / name, op, "Manila")
(s / station, domain, c / channel)
(s / station, location, c2 / city)
(s / station, mod, t / television)
(t / television, mod, l / local)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Manila,(city :name (name :op "Manila")),false), Span(9,10,List(3),station,station,false), Span(8,9,List(4),television,television,false), Span(7,8,List(5),local,local,false), Span(4,5,List(6),channel,channel,false), Span(3,4,List(7),news,news,false)),Map(2 -> "Manila", 5 -> local, 7 -> news, 1 -> name, 4 -> television, 6 -> channel, 0 -> city, 3 -> station),Map(n -> name, t -> television, s -> station, l -> local, c -> city, n2 -> news, c2 -> channel))),[Ljava.lang.String;@1f1e58ca,Annotation([Ljava.lang.String;@57f847af,[Ljava.lang.String;@3ed34ef5,[Ljava.lang.String;@553bc36c),Annotation([Ljava.lang.String;@380e1909,[Ljava.lang.String;@2d5ef498,[Ledu.cmu.lti.nlp.amr.Dependency;@95eb320),Annotation([Ljava.lang.String;@2f521c4,[Ljava.lang.String;@4afbb6c2,[Ljava.lang.String;@10db6131),Annotation([Ljava.lang.String;@6c6017b9,[Ljava.lang.String;@4730e0f0,[Ledu.cmu.lti.nlp.amr.Entity;@506a1372))
AMR:
(c / city, name, n / name)
(c2 / channel, mod, n2 / news)
(n / name, op, "Manila")
(s / station, domain, c2 / channel)
(s / station, location, c / city)
(s / station, mod, l / local)
(s / station, mod, t / television)

Decoded in 37,015 microseconds
Sentence: 2004-04-29

mkDayMonthYear(2004-04-29,29,04,2004)
mkDayMonthYear(2004-04-29,29,04,2004)
Spans:
Span 0-1:  2004-04-29 => (date-entity :day 29 :month 4 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2004-04-29 => (date-entity :year 2004 :month 4 :day 29)

Incorrect span: 2004-04-29 => (date-entity :day 29 :month 4 :year 2004)
Missing span: 2004-04-29 => (date-entity :year 2004 :month 4 :day 29)
Dependencies:
1	2004-04-29	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 29)
(d / date-entity, month, 4)
(d / date-entity, year, 2004)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-04-29,(date-entity :day 29 :month 4 :year 2004),false)),Map(2 -> 4, 1 -> 29, 0 -> date-entity, 3 -> 2004),Map(2 -> 29, d -> date-entity, 4 -> 4, 22 -> 2004))),[Ljava.lang.String;@1b7332a7,Annotation([Ljava.lang.String;@77c233af,[Ljava.lang.String;@37b56ac7,[Ljava.lang.String;@37c41ec0),Annotation([Ljava.lang.String;@35a0e495,[Ljava.lang.String;@5399f6c5,[Ledu.cmu.lti.nlp.amr.Dependency;@4fe64d23),Annotation([Ljava.lang.String;@58437801,[Ljava.lang.String;@6af5bbd0,[Ljava.lang.String;@76464795),Annotation([Ljava.lang.String;@b34832b,[Ljava.lang.String;@48f4713c,[Ledu.cmu.lti.nlp.amr.Entity;@f1868c9))
AMR:
(d / date-entity, day, 2 / 29)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 22 / 2004)

Decoded in 8,364 microseconds
Sentence: China (CN); Germany (DE)

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "DE"))
Spans:
Span 4-5:  ; => and

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  ; => and
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 5-6:  Germany => (country :name (name :op "Germany"))

Missing span: China => (country :name (name :op "China"))
Missing span: Germany => (country :name (name :op "Germany"))
Dependencies:
1	China	_	NNP	NNP	_	3	nn	_	_
2	(	_	(	(	_	3	punct	_	_
3	CN	_	NN	NN	_	0	root	_	_
4	)	_	)	)	_	3	punct	_	_
5	;	_	:	:	_	3	punct	_	_
6	Germany	_	NNP	NNP	_	3	dep	_	_
7	(	_	(	(	_	8	punct	_	_
8	DE	_	NNP	NNP	_	6	appos	_	_
9	)	_	)	)	_	8	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Germany")

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),;,and,false)),Map(0 -> and),Map(a -> and))),[Ljava.lang.String;@4ba6ec50,Annotation([Ljava.lang.String;@642413d4,[Ljava.lang.String;@fb2e3fd,[Ljava.lang.String;@43a09ce2),Annotation([Ljava.lang.String;@3f183caa,[Ljava.lang.String;@7b66322e,[Ledu.cmu.lti.nlp.amr.Dependency;@63538bb4),Annotation([Ljava.lang.String;@24534cb0,[Ljava.lang.String;@5a50d9fc,[Ljava.lang.String;@106d77da),Annotation([Ljava.lang.String;@6f9c5048,[Ljava.lang.String;@5114b7c7,[Ledu.cmu.lti.nlp.amr.Entity;@dd71b20))
AMR:


Decoded in 11,431 microseconds
Sentence: International; Government; technology; politics; economy

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 6-7:  politics => politics
Span 4-5:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 8-9:  economy => economy
Oracle Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 6-7:  politics => politics
Oracle Span 4-5:  technology => technology

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: economy => economy
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	Government	_	NNP	NNP	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	technology	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	3	punct	_	_
7	politics	_	NNS	NNS	_	3	dep	_	_
8	;	_	:	:	_	7	punct	_	_
9	economy	_	NN	NN	_	7	dep	_	_

Oracle:
(a / and, op, e / economy)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, p / politics)
(a / and, op, t / technology)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),;,and,false), Span(6,7,List(1),politics,politics,false), Span(5,6,List(2),;,and,false), Span(4,5,List(3),technology,technology,false), Span(3,4,List(4),;,and,false), Span(1,2,List(5),;,and,false)),Map(2 -> and, 5 -> and, 1 -> politics, 4 -> and, 0 -> and, 3 -> technology),Map(t -> technology, a3 -> and, p -> politics, a -> and, a2 -> and, a4 -> and))),[Ljava.lang.String;@767f6ee7,Annotation([Ljava.lang.String;@7b6c6e70,[Ljava.lang.String;@f324455,[Ljava.lang.String;@3a894088),Annotation([Ljava.lang.String;@370c1968,[Ljava.lang.String;@2f0bfe17,[Ledu.cmu.lti.nlp.amr.Dependency;@3206174f),Annotation([Ljava.lang.String;@42fb8c87,[Ljava.lang.String;@15eb0ae9,[Ljava.lang.String;@65e0b505),Annotation([Ljava.lang.String;@67de7a99,[Ljava.lang.String;@795f5d51,[Ledu.cmu.lti.nlp.amr.Entity;@34aeacd1))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a3 / and, op, p / politics)
(a3 / and, op, t / technology)
(a4 / and, op, a3 / and)

Decoded in 26,607 microseconds
Sentence: Chinese premier discusses plans for broad cooperation with important trade partner Germany ahead of European visit.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "European"))
Spans:
Span 12-13:  ahead => ahead
Span 5-6:  broad => broad
Span 6-7:  cooperation => cooperate-01
Span 8-9:  important => important
Span 10-11:  partner => partner-01
Span 3-4:  plans => plan-01
Span 1-2:  premier => premier
Span 9-10:  trade => trade-01
Span 15-16:  visit => visit-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 12-13:  ahead => ahead
Oracle Span 5-6:  broad => broad
Oracle Span 0-1:  Chinese => (country :name (name :op "China"))
Oracle Span 6-7:  cooperation => cooperate-01
Oracle Span 2-3:  discusses => discuss-01
Oracle Span 14-15:  European => (continent :name (name :op "Europe"))
Oracle Span 11-12:  Germany => (country :name (name :op "Germany"))
Oracle Span 8-9:  important => important
Oracle Span 10-11:  partner => partner-01
Oracle Span 3-4:  plans => plan-01
Oracle Span 1-2:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 9-10:  trade => trade-01
Oracle Span 15-16:  visit => visit-01

Incorrect span: premier => premier
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: European => (continent :name (name :op "Europe"))
Missing span: discusses => discuss-01
Missing span: premier => (have-org-role-91 :ARG2 premier)
Dependencies:
1	Chinese	_	JJ	JJ	_	3	amod	_	_
2	premier	_	NN	NN	_	3	nn	_	_
3	discusses	_	NNS	NNS	_	4	nsubj	_	_
4	plans	_	VBZ	VBZ	_	0	root	_	_
5	for	_	IN	IN	_	4	prep	_	_
6	broad	_	JJ	JJ	_	7	amod	_	_
7	cooperation	_	NN	NN	_	5	pobj	_	_
8	with	_	IN	IN	_	4	prep	_	_
9	important	_	JJ	JJ	_	12	amod	_	_
10	trade	_	NN	NN	_	12	nn	_	_
11	partner	_	NN	NN	_	12	nn	_	_
12	Germany	_	NNP	NNP	_	8	pobj	_	_
13	ahead	_	RB	RB	_	14	advmod	_	_
14	of	_	IN	IN	_	12	prep	_	_
15	European	_	JJ	JJ	_	16	amod	_	_
16	visit	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(a / ahead, op, v / visit-01)
(c / country, name, n / name)
(c2 / cooperate-01, ARG0, c3 / country)
(c2 / cooperate-01, mod, b / broad)
(c3 / country, mod, p3 / partner-01)
(c3 / country, name, n2 / name)
(c4 / continent, name, n3 / name)
(d / discuss-01, ARG1, p2 / plan-01)
(d / discuss-01, time, a / ahead)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p / premier)
(n / name, op, "China")
(n2 / name, op, "Germany")
(n3 / name, op, "Europe")
(p2 / plan-01, ARG1, c2 / cooperate-01)
(p3 / partner-01, mod, i / important)
(p3 / partner-01, mod, t / trade-01)
(v / visit-01, location, c4 / continent)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),visit,visit-01,false), Span(12,13,List(1),ahead,ahead,false), Span(10,11,List(2),partner,partner-01,false), Span(9,10,List(3),trade,trade-01,false), Span(8,9,List(4),important,important,false), Span(6,7,List(5),cooperation,cooperate-01,false), Span(5,6,List(6),broad,broad,false), Span(3,4,List(7),plans,plan-01,false), Span(1,2,List(8),premier,premier,false)),Map(2 -> partner-01, 5 -> cooperate-01, 8 -> premier, 7 -> plan-01, 1 -> ahead, 4 -> important, 6 -> broad, 0 -> visit-01, 3 -> trade-01),Map(b -> broad, t -> trade-01, p2 -> plan-01, v -> visit-01, p -> partner-01, a -> ahead, i -> important, c -> cooperate-01, p3 -> premier))),[Ljava.lang.String;@54067fdc,Annotation([Ljava.lang.String;@4098dd77,[Ljava.lang.String;@43aeb5e0,[Ljava.lang.String;@2274160),Annotation([Ljava.lang.String;@65383667,[Ljava.lang.String;@63cd2cd2,[Ledu.cmu.lti.nlp.amr.Dependency;@557a84fe),Annotation([Ljava.lang.String;@6deee370,[Ljava.lang.String;@49c17ba4,[Ljava.lang.String;@43e065f2),Annotation([Ljava.lang.String;@423c5404,[Ljava.lang.String;@5853ca50,[Ledu.cmu.lti.nlp.amr.Entity;@1a0d96a5))
AMR:
(a / ahead, op, v / visit-01)
(c / cooperate-01, ARG1, i / important)
(c / cooperate-01, ARG2, p / partner-01)
(c / cooperate-01, mod, b / broad)
(p / partner-01, ARG1, a / ahead)
(p / partner-01, mod, t / trade-01)
(p2 / plan-01, ARG0, p3 / premier)
(p2 / plan-01, ARG1, c / cooperate-01)

Decoded in 106,224 microseconds
Sentence: Wen states that the main purpose of the Germany visit is to advance trade, economic and technological exchanges.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 12-13:  advance => advance-01
Span 15-16:  economic => economy
Span 18-19:  exchanges => exchange-01
Span 4-5:  main => main
Span 17-18:  technological => technology
Span 13-14:  trade => trade-01
Span 9-10:  visit => visit-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 12-13:  advance => advance-01
Oracle Span 16-17:  and => and
Oracle Span 15-16:  economic => economy
Oracle Span 18-19:  exchanges => exchange-01
Oracle Span 8-9:  Germany => (country :name (name :op "Germany"))
Oracle Span 4-5:  main => main
Oracle Span 5-6:  purpose => purpose-01
Oracle Span 1-2:  states => state-01
Oracle Span 17-18:  technological => technology
Oracle Span 13-14:  trade => trade-01
Oracle Span 9-10:  visit => visit-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: states => state-01
Missing span: purpose => purpose-01
Missing span: and => and
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	states	_	VBZ	VBZ	_	0	root	_	_
3	that	_	IN	IN	_	11	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	main	_	JJ	JJ	_	6	amod	_	_
6	purpose	_	NN	NN	_	11	nsubj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	Germany	_	NNP	NNP	_	10	nn	_	_
10	visit	_	NN	NN	_	7	pobj	_	_
11	is	_	VBZ	VBZ	_	2	ccomp	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	advance	_	VB	VB	_	11	xcomp	_	_
14	trade	_	NN	NN	_	19	amod	_	_
15	,	_	,	,	_	14	punct	_	_
16	economic	_	JJ	JJ	_	14	conj	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	technological	_	JJ	JJ	_	14	conj	_	_
19	exchanges	_	NNS	NNS	_	13	dobj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(a / advance-01, ARG0, v / visit-01)
(a / advance-01, ARG1, a3 / and)
(a3 / and, op, e4 / exchange-01)
(c / country, name, n2 / name)
(e4 / exchange-01, mod, t2 / technology)
(n / name, op, "Wen")
(n2 / name, op, "Germany")
(p / person, name, n / name)
(p2 / purpose-01, ARG0, v / visit-01)
(p2 / purpose-01, ARG1, a / advance-01)
(p2 / purpose-01, mod, m / main)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, p2 / purpose-01)
(v / visit-01, destination, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),exchanges,exchange-01,false), Span(17,18,List(1),technological,technology,false), Span(15,16,List(2),economic,economy,false), Span(13,14,List(3),trade,trade-01,false), Span(12,13,List(4),advance,advance-01,false), Span(9,10,List(5),visit,visit-01,false), Span(4,5,List(6),main,main,false)),Map(2 -> economy, 5 -> visit-01, 1 -> technology, 4 -> advance-01, 6 -> main, 0 -> exchange-01, 3 -> trade-01),Map(e -> exchange-01, t -> technology, e2 -> economy, m -> main, v -> visit-01, a -> advance-01, t2 -> trade-01))),[Ljava.lang.String;@5a02bfe3,Annotation([Ljava.lang.String;@7a3e5cd3,[Ljava.lang.String;@3c79088e,[Ljava.lang.String;@4a37191a),Annotation([Ljava.lang.String;@5854a18,[Ljava.lang.String;@d5556bf,[Ledu.cmu.lti.nlp.amr.Dependency;@791c12e3),Annotation([Ljava.lang.String;@b112b13,[Ljava.lang.String;@24eb65e3,[Ljava.lang.String;@3ac3f6f),Annotation([Ljava.lang.String;@1abebef3,[Ljava.lang.String;@18f55704,[Ledu.cmu.lti.nlp.amr.Entity;@67cefd84))
AMR:
(a / advance-01, ARG0, v / visit-01)
(a / advance-01, ARG1, e / exchange-01)
(e / exchange-01, ARG0, m / main)
(e / exchange-01, ARG1, t / technology)
(t2 / trade-01, ARG1, e / exchange-01)
(v / visit-01, ARG1, e2 / economy)

Decoded in 136,423 microseconds
Sentence: In an interview with Dieter stolte on 29 April 2004 Chinese Premier Wen Jiabao stated that the governments of China and Germany should establish solid cooperation, enhance consultations on major international issues and further strengthen trade and technological exchanges.

NER Entity: (person :name (name :op "Dieter"))
mkDayMonthYear(29	April	2004,29,April,2004)
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen" :op "Jiabao"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 7-10:  29 April 2004 => (date-entity :day 29 :month 4 :year 2004)
Span 28-29:  consultations => consult-01
Span 25-26:  cooperation => cooperate-01
Span 27-28:  enhance => enhance-01
Span 23-24:  establish => establish-01
Span 39-40:  exchanges => exchange-01
Span 34-35:  further => further
Span 2-3:  interview => interview-01
Span 32-33:  issues => issue
Span 30-31:  major => major
Span 11-12:  Premier => (have-org-role-91 :ARG2 premier)
Span 22-23:  should => recommend-01
Span 24-25:  solid => solid
Span 35-36:  strengthen => strengthen-01
Span 38-39:  technological => technology
Span 36-37:  trade => trade-01
Span 12-14:  Wen Jiabao => (person :name (name :op "Wen" :op "Jiabao"))

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Oracle Span 7-10:  29 April 2004 => (date-entity :year 2004 :month 4 :day 29)
Oracle Span 20-21:  and => and
Oracle Span 33-34:  and => and
Oracle Span 37-38:  and => and
Oracle Span 19-20:  China => (country :name (name :op "China"))
Oracle Span 28-29:  consultations => consult-01
Oracle Span 25-26:  cooperation => cooperate-01
Oracle Span 4-6:  Dieter stolte => (person :name (name :op "Stolte" :op "Dieter"))
Oracle Span 27-28:  enhance => enhance-01
Oracle Span 23-24:  establish => establish-01
Oracle Span 39-40:  exchanges => exchange-01
Oracle Span 34-35:  further => further-01
Oracle Span 21-22:  Germany => (country :name (name :op "Germany"))
Oracle Span 17-18:  governments => (government-organization :ARG0-of govern-01)
Oracle Span 31-32:  international => international
Oracle Span 2-3:  interview => interview-01
Oracle Span 32-33:  issues => issue
Oracle Span 30-31:  major => major
Oracle Span 11-12:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 22-23:  should => recommend-01
Oracle Span 24-25:  solid => solid
Oracle Span 14-15:  stated => state-01
Oracle Span 35-36:  strengthen => strengthen-01
Oracle Span 38-39:  technological => technology
Oracle Span 36-37:  trade => trade-01
Oracle Span 12-14:  Wen Jiabao => (person :name (name :op "Jiabao" :op "Wen"))

Incorrect span: further => further
Incorrect span: Wen Jiabao => (person :name (name :op "Wen" :op "Jiabao"))
Incorrect span: 29 April 2004 => (date-entity :day 29 :month 4 :year 2004)
Missing span: Wen Jiabao => (person :name (name :op "Jiabao" :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: Dieter stolte => (person :name (name :op "Stolte" :op "Dieter"))
Missing span: 29 April 2004 => (date-entity :year 2004 :month 4 :day 29)
Missing span: stated => state-01
Missing span: and => and
Missing span: further => further-01
Missing span: and => and
Missing span: international => international
Missing span: and => and
Missing span: governments => (government-organization :ARG0-of govern-01)
Dependencies:
1	In	_	IN	IN	_	15	prep	_	_
2	an	_	DT	DT	_	3	det	_	_
3	interview	_	NN	NN	_	1	pobj	_	_
4	with	_	IN	IN	_	3	prep	_	_
5	Dieter	_	NNP	NNP	_	6	nn	_	_
6	stolte	_	NNP	NNP	_	4	pobj	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	29	_	CD	CD	_	7	pobj	_	_
9	April	_	NNP	NNP	_	6	tmod	_	_
10	2004	_	CD	CD	_	9	num	_	_
11	Chinese	_	NNP	NNP	_	14	nn	_	_
12	Premier	_	NNP	NNP	_	14	nn	_	_
13	Wen	_	NNP	NNP	_	14	nn	_	_
14	Jiabao	_	NNP	NNP	_	15	nsubj	_	_
15	stated	_	VBD	VBD	_	0	root	_	_
16	that	_	IN	IN	_	24	mark	_	_
17	the	_	DT	DT	_	18	det	_	_
18	governments	_	NNS	NNS	_	24	nsubj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	China	_	NNP	NNP	_	19	pobj	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	Germany	_	NNP	NNP	_	20	conj	_	_
23	should	_	MD	MD	_	24	aux	_	_
24	establish	_	VB	VB	_	15	ccomp	_	_
25	solid	_	JJ	JJ	_	26	amod	_	_
26	cooperation	_	NN	NN	_	24	dobj	_	_
27	,	_	,	,	_	24	punct	_	_
28	enhance	_	VB	VB	_	24	conj	_	_
29	consultations	_	NNS	NNS	_	28	dobj	_	_
30	on	_	IN	IN	_	28	prep	_	_
31	major	_	JJ	JJ	_	33	amod	_	_
32	international	_	JJ	JJ	_	33	amod	_	_
33	issues	_	NNS	NNS	_	30	pobj	_	_
34	and	_	CC	CC	_	24	cc	_	_
35	further	_	RBR	RBR	_	24	advmod	_	_
36	strengthen	_	VB	VB	_	24	conj	_	_
37	trade	_	NN	NN	_	40	nn	_	_
38	and	_	CC	CC	_	37	cc	_	_
39	technological	_	JJ	JJ	_	37	conj	_	_
40	exchanges	_	NNS	NNS	_	36	dobj	_	_
41	.	_	.	.	_	15	punct	_	_

Oracle:
(a / and, op, e / establish-01)
(a / and, op, e2 / enhance-01)
(a / and, op, s3 / strengthen-01)
(a2 / and, op, g3 / government-organization)
(a3 / and, op, t / trade-01)
(a3 / and, op, t2 / technology)
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(c3 / cooperate-01, mod, s2 / solid)
(c4 / consult-01, ARG2, i2 / issue)
(d / date-entity, day, 29)
(d / date-entity, month, 4)
(d / date-entity, year, 2004)
(e / establish-01, ARG0, a2 / and)
(e / establish-01, ARG1, c3 / cooperate-01)
(e2 / enhance-01, ARG0, a2 / and)
(e2 / enhance-01, ARG1, c4 / consult-01)
(e3 / exchange-01, ARG1, a3 / and)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c2 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / premier)
(i / interview-01, ARG0, p3 / person)
(i / interview-01, ARG1, p / person)
(i2 / issue, mod, i3 / international)
(i2 / issue, mod, m / major)
(n / name, op, "Jiabao")
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Dieter")
(n3 / name, op, "Stolte")
(n4 / name, op, "Germany")
(p / person, name, n / name)
(p3 / person, name, n3 / name)
(r / recommend-01, ARG1, a / and)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, r / recommend-01)
(s / state-01, medium, i / interview-01)
(s / state-01, time, d / date-entity)
(s3 / strengthen-01, ARG0, a2 / and)
(s3 / strengthen-01, ARG1, e3 / exchange-01)
(s3 / strengthen-01, manner, f / further-01)

Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),exchanges,exchange-01,false), Span(38,39,List(1),technological,technology,false), Span(36,37,List(2),trade,trade-01,false), Span(35,36,List(3),strengthen,strengthen-01,false), Span(34,35,List(4),further,further,false), Span(32,33,List(5),issues,issue,false), Span(30,31,List(6),major,major,false), Span(28,29,List(7),consultations,consult-01,false), Span(27,28,List(8),enhance,enhance-01,false), Span(25,26,List(9),cooperation,cooperate-01,false), Span(24,25,List(10),solid,solid,false), Span(23,24,List(11),establish,establish-01,false), Span(22,23,List(12),should,recommend-01,false), Span(12,14,List(16, 15, 14, 13),Wen Jiabao,(person :name (name :op "Wen" :op "Jiabao")),false), Span(11,12,List(18, 17),Premier,(have-org-role-91 :ARG2 premier),false), Span(7,10,List(22, 21, 20, 19),29 April 2004,(date-entity :day 29 :month 4 :year 2004),false), Span(2,3,List(23),interview,interview-01,false)),Map(2 -> trade-01, 5 -> issue, 12 -> recommend-01, 15 -> "Wen", 8 -> enhance-01, 21 -> 4, 18 -> premier, 7 -> consult-01, 17 -> have-org-role-91, 1 -> technology, 23 -> interview-01, 4 -> further, 11 -> establish-01, 14 -> name, 20 -> 29, 6 -> major, 22 -> 2004, 0 -> exchange-01, 9 -> cooperate-01, 16 -> "Jiabao", 19 -> date-entity, 3 -> strengthen-01, 10 -> solid, 13 -> person),Map(e -> exchange-01, n -> name, h -> have-org-role-91, 2 -> 29, s2 -> solid, t -> technology, p2 -> premier, e2 -> enhance-01, s -> strengthen-01, d -> date-entity, m -> major, p -> person, 4 -> 4, i2 -> interview-01, t2 -> trade-01, i -> issue, r -> recommend-01, c -> consult-01, 22 -> 2004, f -> further, e3 -> establish-01, c2 -> cooperate-01))),[Ljava.lang.String;@5fbe155,Annotation([Ljava.lang.String;@6add8e3f,[Ljava.lang.String;@58a2b917,[Ljava.lang.String;@48904d5a),Annotation([Ljava.lang.String;@12bbfc54,[Ljava.lang.String;@1491344a,[Ledu.cmu.lti.nlp.amr.Dependency;@59b65dce),Annotation([Ljava.lang.String;@1386313f,[Ljava.lang.String;@5e922647,[Ljava.lang.String;@433c6abb),Annotation([Ljava.lang.String;@288f173f,[Ljava.lang.String;@a22c4d8,[Ledu.cmu.lti.nlp.amr.Entity;@45cd7bc5))
AMR:
(c / consult-01, ARG2, i / issue)
(c2 / cooperate-01, degree, s2 / solid)
(d / date-entity, day, 2 / 29)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 22 / 2004)
(e / exchange-01, mod, t / technology)
(e2 / enhance-01, ARG0, p / person)
(e2 / enhance-01, ARG1, c / consult-01)
(e3 / establish-01, ARG1, c2 / cooperate-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / premier)
(i / issue, mod, m / major)
(i2 / interview-01, ARG0, d / date-entity)
(i2 / interview-01, ARG1, p / person)
(n / name, op, "Jiabao")
(n / name, op, "Wen")
(p / person, name, n / name)
(r / recommend-01, ARG0, p / person)
(r / recommend-01, ARG1, e3 / establish-01)
(s / strengthen-01, ARG0, p / person)
(s / strengthen-01, ARG1, e / exchange-01)
(s / strengthen-01, ARG2, f / further)
(t2 / trade-01, ARG1, c2 / cooperate-01)

Decoded in 1,970,289 microseconds
Sentence: Wen was interviewed before his imminent visit to Europe by the publisher of Die Welt.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (organization :name (name :op "Die" :op "Welt"))
Spans:
Span 3-4:  before => before
Span 13-15:  Die Welt => (organization :name (name :op "Die" :op "Welt"))
Span 5-6:  imminent => imminent
Span 6-7:  visit => visit-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  before => before
Oracle Span 13-15:  Die Welt => (publication :name (name :op "Welt" :op "Die"))
Oracle Span 8-9:  Europe => (continent :name (name :op "Europe"))
Oracle Span 5-6:  imminent => imminent
Oracle Span 2-3:  interviewed => interview-01
Oracle Span 11-12:  publisher => publish-01
Oracle Span 6-7:  visit => visit-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: Die Welt => (organization :name (name :op "Die" :op "Welt"))
Missing span: Die Welt => (publication :name (name :op "Welt" :op "Die"))
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: interviewed => interview-01
Missing span: publisher => publish-01
Dependencies:
1	Wen	_	NNP	NNP	_	3	nsubjpass	_	_
2	was	_	VBD	VBD	_	3	auxpass	_	_
3	interviewed	_	VBN	VBN	_	0	root	_	_
4	before	_	IN	IN	_	3	prep	_	_
5	his	_	PRP$	PRP$	_	7	poss	_	_
6	imminent	_	JJ	JJ	_	7	amod	_	_
7	visit	_	NN	NN	_	4	pobj	_	_
8	to	_	TO	TO	_	3	prep	_	_
9	Europe	_	NNP	NNP	_	8	pobj	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	publisher	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	Die	_	NNP	NNP	_	15	nn	_	_
15	Welt	_	NNP	NNP	_	13	pobj	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(b / before, op, v / visit-01)
(c / continent, name, n4 / name)
(i / interview-01, ARG0, p / publish-01)
(i / interview-01, ARG1, p2 / person)
(i / interview-01, time, b / before)
(n2 / name, op, "Die")
(n2 / name, op, "Welt")
(n3 / name, op, "Wen")
(n4 / name, op, "Europe")
(p / publish-01, ARG1, p3 / publication)
(p2 / person, name, n3 / name)
(p3 / publication, name, n2 / name)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, destination, c / continent)
(v / visit-01, mod, i2 / imminent)

Input(Some(Graph(null,ArrayBuffer(Span(13,15,List(3, 2, 1, 0),Die Welt,(organization :name (name :op "Die" :op "Welt")),false), Span(6,7,List(4),visit,visit-01,false), Span(5,6,List(5),imminent,imminent,false), Span(3,4,List(6),before,before,false)),Map(2 -> "Die", 5 -> imminent, 1 -> name, 4 -> visit-01, 6 -> before, 0 -> organization, 3 -> "Welt"),Map(n -> name, b -> before, v -> visit-01, i -> imminent, o -> organization))),[Ljava.lang.String;@6504a875,Annotation([Ljava.lang.String;@35e26d05,[Ljava.lang.String;@29fa6b65,[Ljava.lang.String;@7c72ecc),Annotation([Ljava.lang.String;@47406941,[Ljava.lang.String;@61ecbee9,[Ledu.cmu.lti.nlp.amr.Dependency;@1bb740f2),Annotation([Ljava.lang.String;@2538bc06,[Ljava.lang.String;@61f6d381,[Ljava.lang.String;@656922a0),Annotation([Ljava.lang.String;@44784e2f,[Ljava.lang.String;@2440022a,[Ledu.cmu.lti.nlp.amr.Entity;@737db7f8))
AMR:
(b / before, op, v / visit-01)
(n / name, op, "Die")
(n / name, op, "Welt")
(o / organization, name, n / name)
(v / visit-01, ARG0, o / organization)
(v / visit-01, mod, i / imminent)

Decoded in 40,669 microseconds
Sentence: Wen is scheduled to visit 5 European nations including Germany starting 2 May 2004.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Germany"))
mkDayMonthYear(2	May	2004,2,May,2004)
Spans:
Span 11-14:  2 May 2004 => (date-entity :day 2 :month 5 :year 2004)
Span 7-8:  nations => nation
Span 2-3:  scheduled => schedule-01
Span 10-11:  starting => start-01
Span 4-5:  visit => visit-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 11-14:  2 May 2004 => (date-entity :year 2004 :month 5 :day 2)
Oracle Span 5-6:  5 => 5
Oracle Span 6-7:  European => (continent :name (name :op "Europe"))
Oracle Span 9-10:  Germany => (country :name (name :op "Germany"))
Oracle Span 8-9:  including => include-91
Oracle Span 7-8:  nations => nation
Oracle Span 2-3:  scheduled => schedule-01
Oracle Span 10-11:  starting => start-01
Oracle Span 4-5:  visit => visit-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: 2 May 2004 => (date-entity :day 2 :month 5 :year 2004)
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: European => (continent :name (name :op "Europe"))
Missing span: 2 May 2004 => (date-entity :year 2004 :month 5 :day 2)
Missing span: including => include-91
Missing span: 5 => 5
Dependencies:
1	Wen	_	NNP	NNP	_	3	nsubjpass	_	_
2	is	_	VBZ	VBZ	_	3	auxpass	_	_
3	scheduled	_	VBN	VBN	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	visit	_	VB	VB	_	3	xcomp	_	_
6	5	_	CD	CD	_	8	num	_	_
7	European	_	JJ	JJ	_	8	amod	_	_
8	nations	_	NNS	NNS	_	5	dobj	_	_
9	including	_	VBG	VBG	_	8	prep	_	_
10	Germany	_	NNP	NNP	_	9	pobj	_	_
11	starting	_	VBG	VBG	_	10	vmod	_	_
12	2	_	CD	CD	_	11	dobj	_	_
13	May	_	NNP	NNP	_	11	tmod	_	_
14	2004	_	CD	CD	_	13	num	_	_
15	.	_	.	.	_	3	punct	_	_

Oracle:
(c / continent, name, n3 / name)
(c2 / country, name, n4 / name)
(d / date-entity, day, 2)
(d / date-entity, month, 5)
(d / date-entity, year, 2004)
(i / include-91, ARG1, c2 / country)
(i / include-91, ARG2, n2 / nation)
(n / name, op, "Wen")
(n2 / nation, mod, c / continent)
(n2 / nation, quant, 5 / 5)
(n3 / name, op, "Europe")
(n4 / name, op, "Germany")
(p / person, name, n / name)
(s / schedule-01, ARG0, p / person)
(s / schedule-01, ARG1, v / visit-01)
(s2 / start-01, ARG1, s / schedule-01)
(s2 / start-01, time, d / date-entity)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, n2 / nation)

Input(Some(Graph(null,ArrayBuffer(Span(11,14,List(3, 2, 1, 0),2 May 2004,(date-entity :day 2 :month 5 :year 2004),false), Span(10,11,List(4),starting,start-01,false), Span(7,8,List(5),nations,nation,false), Span(4,5,List(6),visit,visit-01,false), Span(2,3,List(7),scheduled,schedule-01,false)),Map(2 -> 5, 5 -> nation, 7 -> schedule-01, 1 -> 2, 4 -> start-01, 6 -> visit-01, 0 -> date-entity, 3 -> 2004),Map(n -> nation, 2 -> 2, s2 -> schedule-01, 5 -> 5, s -> start-01, v -> visit-01, d -> date-entity, 22 -> 2004))),[Ljava.lang.String;@5f2de715,Annotation([Ljava.lang.String;@5922d3e9,[Ljava.lang.String;@7d57dbb5,[Ljava.lang.String;@630b6190),Annotation([Ljava.lang.String;@532e27ab,[Ljava.lang.String;@1cdc1bbc,[Ledu.cmu.lti.nlp.amr.Dependency;@5f95f1e1),Annotation([Ljava.lang.String;@672a1c62,[Ljava.lang.String;@459b6c53,[Ljava.lang.String;@39e69ea7),Annotation([Ljava.lang.String;@490c7a83,[Ljava.lang.String;@7e72a6cc,[Ledu.cmu.lti.nlp.amr.Entity;@6015a4a5))
AMR:
(d / date-entity, day, 2 / 2)
(d / date-entity, month, 5 / 5)
(d / date-entity, year, 22 / 2004)
(s / start-01, ARG1, n / nation)
(s / start-01, time, d / date-entity)
(s2 / schedule-01, ARG1, v / visit-01)
(v / visit-01, ARG1, n / nation)

Decoded in 54,460 microseconds
Sentence: Wen stated that the Chinese people are familiar with Germany particularly due to the profound influence of Karl Marx on China's revolution and economic construction.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (person :name (name :op "Karl" :op "Marx"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 25-26:  construction => construct-01
Span 24-25:  economic => economy
Span 7-8:  familiar => familiarize-01
Span 15-16:  influence => influence-01
Span 17-19:  Karl Marx => (person :name (name :op "Karl" :op "Marx"))
Span 10-11:  particularly => particular
Span 14-15:  profound => profound

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 23-24:  and => and
Oracle Span 20-21:  China => (country :name (name :op "China"))
Oracle Span 25-26:  construction => construct-01
Oracle Span 24-25:  economic => economy
Oracle Span 7-8:  familiar => familiarize-01
Oracle Span 9-10:  Germany => (country :name (name :op "Germany"))
Oracle Span 15-16:  influence => influence-01
Oracle Span 17-19:  Karl Marx => (person :name (name :op "Marx" :op "Karl"))
Oracle Span 10-11:  particularly => particular
Oracle Span 5-6:  people => people
Oracle Span 14-15:  profound => profound
Oracle Span 22-23:  revolution => revolution
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: Karl Marx => (person :name (name :op "Karl" :op "Marx"))
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: Karl Marx => (person :name (name :op "Marx" :op "Karl"))
Missing span: stated => state-01
Missing span: people => people
Missing span: and => and
Missing span: revolution => revolution
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Chinese	_	JJ	JJ	_	6	amod	_	_
6	people	_	NNS	NNS	_	8	nsubj	_	_
7	are	_	VBP	VBP	_	8	cop	_	_
8	familiar	_	JJ	JJ	_	2	ccomp	_	_
9	with	_	IN	IN	_	8	prep	_	_
10	Germany	_	NNP	NNP	_	9	pobj	_	_
11	particularly	_	RB	RB	_	12	advmod	_	_
12	due	_	JJ	JJ	_	10	amod	_	_
13	to	_	TO	TO	_	12	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	profound	_	JJ	JJ	_	16	amod	_	_
16	influence	_	NN	NN	_	13	pobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	Karl	_	NNP	NNP	_	19	nn	_	_
19	Marx	_	NNP	NNP	_	17	pobj	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	China	_	NNP	NNP	_	23	poss	_	_
22	's	_	POS	POS	_	21	possessive	_	_
23	revolution	_	NN	NN	_	20	pobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	economic	_	JJ	JJ	_	26	amod	_	_
26	construction	_	NN	NN	_	23	conj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c4 / construct-01)
(a / and, op, r / revolution)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c4 / construct-01, ARG0, c / country)
(c4 / construct-01, ARG1, e / economy)
(f / familiarize-01, ARG1, p2 / people)
(f / familiarize-01, ARG2, c2 / country)
(i / influence-01, ARG0, p5 / person)
(i / influence-01, ARG1, a / and)
(i / influence-01, mod, p4 / profound)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(n4 / name, op, "Karl")
(n4 / name, op, "Marx")
(p / person, name, n / name)
(p2 / people, mod, c / country)
(p5 / person, name, n4 / name)
(r / revolution, poss, c / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, f / familiarize-01)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),construction,construct-01,false), Span(24,25,List(1),economic,economy,false), Span(17,19,List(5, 4, 3, 2),Karl Marx,(person :name (name :op "Karl" :op "Marx")),false), Span(15,16,List(6),influence,influence-01,false), Span(14,15,List(7),profound,profound,false), Span(10,11,List(8),particularly,particular,false), Span(7,8,List(9),familiar,familiarize-01,false)),Map(2 -> person, 5 -> "Marx", 8 -> particular, 7 -> profound, 1 -> economy, 4 -> "Karl", 6 -> influence-01, 9 -> familiarize-01, 0 -> construct-01, 3 -> name),Map(n -> name, e -> economy, p2 -> profound, p -> person, i -> influence-01, c -> construct-01, f -> familiarize-01, p3 -> particular))),[Ljava.lang.String;@6d0b0da6,Annotation([Ljava.lang.String;@4779aae6,[Ljava.lang.String;@2cd62003,[Ljava.lang.String;@61ab89b0),Annotation([Ljava.lang.String;@5478ce1e,[Ljava.lang.String;@5edc70ed,[Ledu.cmu.lti.nlp.amr.Dependency;@4317850d),Annotation([Ljava.lang.String;@7e4c72d6,[Ljava.lang.String;@6cd64b3f,[Ljava.lang.String;@51b01550),Annotation([Ljava.lang.String;@2ef0dd86,[Ljava.lang.String;@3337d04c,[Ledu.cmu.lti.nlp.amr.Entity;@6de6faa6))
AMR:
(c / construct-01, ARG1, e / economy)
(f / familiarize-01, ARG0, p3 / particular)
(f / familiarize-01, ARG2, i / influence-01)
(i / influence-01, ARG0, p2 / profound)
(i / influence-01, ARG1, p / person)
(i / influence-01, ARG2, c / construct-01)
(n / name, op, "Karl")
(n / name, op, "Marx")
(p / person, name, n / name)

Decoded in 172,100 microseconds
Sentence: Wen stated that many world-renowned thinkers, writers, philosophers and artists are German.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 15-16:  German => (country :name (name :op "Germany"))
Span 3-4:  many => many
Span 6-7:  renowned => renowned
Span 9-10:  writers => (person :ARG0-of write-01)

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 12-13:  and => and
Oracle Span 13-14:  artists => artist
Oracle Span 15-16:  German => (country :name (name :op "Germany"))
Oracle Span 3-4:  many => many
Oracle Span 11-12:  philosophers => philosopher
Oracle Span 6-7:  renowned => renowned
Oracle Span 1-2:  stated => state-01
Oracle Span 7-8:  thinkers => thinker
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))
Oracle Span 4-5:  world => world
Oracle Span 9-10:  writers => (person :ARG0-of write-01)

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: stated => state-01
Missing span: and => and
Missing span: artists => artist
Missing span: philosophers => philosopher
Missing span: thinkers => thinker
Missing span: world => world
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	14	mark	_	_
4	many	_	JJ	JJ	_	6	amod	_	_
5	world-renowned	_	JJ	JJ	_	6	amod	_	_
6	thinkers	_	NNS	NNS	_	14	nsubj	_	_
7	,	_	,	,	_	6	punct	_	_
8	writers	_	NNS	NNS	_	6	conj	_	_
9	,	_	,	,	_	6	punct	_	_
10	philosophers	_	NNS	NNS	_	6	conj	_	_
11	and	_	CC	CC	_	6	cc	_	_
12	artists	_	NNS	NNS	_	6	conj	_	_
13	are	_	VBP	VBP	_	14	cop	_	_
14	German	_	JJ	JJ	_	2	ccomp	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a2 / artist)
(a / and, op, p2 / philosopher)
(a / and, op, p3 / person)
(a / and, op, t / thinker)
(c / country, domain, a / and)
(c / country, name, n2 / name)
(n / name, op, "Wen")
(n2 / name, op, "Germany")
(p / person, name, n / name)
(r / renowned, location, w / world)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / country)
(t / thinker, mod, r / renowned)
(t / thinker, quant, m / many)
(w2 / write-01, ARG0, p3 / person)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(2, 1, 0),German,(country :name (name :op "Germany")),false), Span(9,10,List(4, 3),writers,(person :ARG0-of write-01),false), Span(6,7,List(5),renowned,renowned,false), Span(3,4,List(6),many,many,false)),Map(2 -> "Germany", 5 -> renowned, 1 -> name, 4 -> write-01, 6 -> many, 0 -> country, 3 -> person),Map(w -> write-01, n -> name, m -> many, p -> person, r -> renowned, c -> country))),[Ljava.lang.String;@3cad68df,Annotation([Ljava.lang.String;@14998e21,[Ljava.lang.String;@1921994e,[Ljava.lang.String;@43c87306),Annotation([Ljava.lang.String;@14f40030,[Ljava.lang.String;@4c447c09,[Ledu.cmu.lti.nlp.amr.Dependency;@593a6726),Annotation([Ljava.lang.String;@596a7f44,[Ljava.lang.String;@6dab01d9,[Ljava.lang.String;@2e09c51),Annotation([Ljava.lang.String;@869d87c,[Ljava.lang.String;@2f3166a,[Ledu.cmu.lti.nlp.amr.Entity;@37637a24))
AMR:
(c / country, name, n / name)
(n / name, op, "Germany")
(w / write-01, ARG0, p / person)
(w / write-01, ARG1, c / country)
(w / write-01, ARG2, m / many)
(w / write-01, medium, r / renowned)

Decoded in 97,714 microseconds
Sentence: Wen stated that forerunner of German classic philosophy Gottfried leibnitz called China's Confucian thought an influence on the Enlightenment movement in 18th century Germany.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Gottfried" :op "leibnitz"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "Confucian"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 6-7:  classic => classic
Span 5-6:  German => (country :name (name :op "Germany"))
Span 8-10:  Gottfried leibnitz => (person :name (name :op "Gottfried" :op "leibnitz"))
Span 16-17:  influence => influence-01
Span 14-15:  thought => think-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  called => call-01
Oracle Span 11-12:  China => (country :name (name :op "China"))
Oracle Span 6-7:  classic => classic
Oracle Span 13-14:  Confucian => confucian
Oracle Span 19-20:  Enlightenment => enlighten-01
Oracle Span 3-4:  forerunner => forerun-00
Oracle Span 24-25:  Germany => (country :name (name :op "Germany"))
Oracle Span 8-10:  Gottfried leibnitz => (person :name (name :op "Leibnitz" :op "Gottfried"))
Oracle Span 16-17:  influence => influence-01
Oracle Span 20-21:  movement => movement
Oracle Span 7-8:  philosophy => philosophy
Oracle Span 1-2:  stated => state-01
Oracle Span 14-15:  thought => think-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: Gottfried leibnitz => (person :name (name :op "Gottfried" :op "leibnitz"))
Extra span: German => (country :name (name :op "Germany"))
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Gottfried leibnitz => (person :name (name :op "Leibnitz" :op "Gottfried"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: China => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: called => call-01
Missing span: movement => movement
Missing span: Confucian => confucian
Missing span: philosophy => philosophy
Missing span: Enlightenment => enlighten-01
Missing span: forerunner => forerun-00
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	11	mark	_	_
4	forerunner	_	NN	NN	_	11	nsubj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	German	_	JJ	JJ	_	10	amod	_	_
7	classic	_	JJ	JJ	_	10	amod	_	_
8	philosophy	_	NN	NN	_	10	nn	_	_
9	Gottfried	_	NNP	NNP	_	10	nn	_	_
10	leibnitz	_	NNP	NNP	_	5	pobj	_	_
11	called	_	VBD	VBD	_	2	ccomp	_	_
12	China	_	NNP	NNP	_	14	poss	_	_
13	's	_	POS	POS	_	12	possessive	_	_
14	Confucian	_	NNP	NNP	_	15	nsubj	_	_
15	thought	_	VBD	VBD	_	11	ccomp	_	_
16	an	_	DT	DT	_	17	det	_	_
17	influence	_	NN	NN	_	15	dobj	_	_
18	on	_	IN	IN	_	15	prep	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Enlightenment	_	NNP	NNP	_	21	nn	_	_
21	movement	_	NN	NN	_	18	pobj	_	_
22	in	_	IN	IN	_	15	prep	_	_
23	18th	_	JJ	JJ	_	25	amod	_	_
24	century	_	NN	NN	_	25	nn	_	_
25	Germany	_	NNP	NNP	_	22	pobj	_	_
26	.	_	.	.	_	2	punct	_	_

Oracle:
(c / call-01, ARG0, f / forerun-00)
(c / call-01, ARG1, t / think-01)
(c / call-01, ARG2, i / influence-01)
(c3 / country, name, n3 / name)
(c5 / country, name, n4 / name)
(f / forerun-00, ARG0, p2 / person)
(f / forerun-00, ARG1, p3 / philosophy)
(i / influence-01, ARG0, t / think-01)
(i / influence-01, ARG1, m / movement)
(i / influence-01, location, c3 / country)
(m / movement, topic, e / enlighten-01)
(n / name, op, "Wen")
(n2 / name, op, "Gottfried")
(n2 / name, op, "Leibnitz")
(n3 / name, op, "Germany")
(n4 / name, op, "China")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / philosophy, mod, c2 / classic)
(p3 / philosophy, mod, c3 / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / call-01)
(t / think-01, mod, c4 / confucian)
(t / think-01, mod, c5 / country)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),influence,influence-01,false), Span(14,15,List(1),thought,think-01,false), Span(8,10,List(5, 4, 3, 2),Gottfried leibnitz,(person :name (name :op "Gottfried" :op "leibnitz")),false), Span(6,7,List(6),classic,classic,false), Span(5,6,List(9, 8, 7),German,(country :name (name :op "Germany")),false)),Map(2 -> person, 5 -> "leibnitz", 8 -> name, 7 -> country, 1 -> think-01, 4 -> "Gottfried", 6 -> classic, 9 -> "Germany", 0 -> influence-01, 3 -> name),Map(n -> name, t -> think-01, p -> person, i -> influence-01, c -> classic, n2 -> name, c2 -> country))),[Ljava.lang.String;@31e76a8d,Annotation([Ljava.lang.String;@770beef5,[Ljava.lang.String;@6dd1f638,[Ljava.lang.String;@414f13fc),Annotation([Ljava.lang.String;@4b76aa5a,[Ljava.lang.String;@63a28987,[Ledu.cmu.lti.nlp.amr.Dependency;@120d3fd),Annotation([Ljava.lang.String;@38c9e0d6,[Ljava.lang.String;@4693a9ef,[Ljava.lang.String;@310aee0b),Annotation([Ljava.lang.String;@36327cec,[Ljava.lang.String;@410ae5ac,[Ledu.cmu.lti.nlp.amr.Entity;@1a8df0b3))
AMR:
(c2 / country, name, n2 / name)
(n / name, op, "Gottfried")
(n / name, op, "leibnitz")
(n2 / name, op, "Germany")
(p / person, mod, c / classic)
(p / person, mod, c2 / country)
(p / person, name, n / name)
(t / think-01, ARG0, p / person)
(t / think-01, ARG1, i / influence-01)

Decoded in 98,054 microseconds
Sentence: Wen stated that the purpose of his visit to Germany is to advance trade, economic and technological exchanges.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 12-13:  advance => advance-01
Span 15-16:  economic => economy
Span 18-19:  exchanges => exchange-01
Span 17-18:  technological => technology
Span 13-14:  trade => trade-01
Span 7-8:  visit => visit-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 12-13:  advance => advance-01
Oracle Span 16-17:  and => and
Oracle Span 15-16:  economic => economy
Oracle Span 18-19:  exchanges => exchange-01
Oracle Span 9-10:  Germany => (country :name (name :op "Germany"))
Oracle Span 1-2:  stated => state-01
Oracle Span 17-18:  technological => technology
Oracle Span 13-14:  trade => trade-01
Oracle Span 7-8:  visit => visit-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: stated => state-01
Missing span: and => and
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	11	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	purpose	_	NN	NN	_	11	nsubj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	his	_	PRP$	PRP$	_	8	poss	_	_
8	visit	_	NN	NN	_	6	pobj	_	_
9	to	_	TO	TO	_	8	prep	_	_
10	Germany	_	NNP	NNP	_	9	pobj	_	_
11	is	_	VBZ	VBZ	_	2	ccomp	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	advance	_	VB	VB	_	11	xcomp	_	_
14	trade	_	NN	NN	_	19	amod	_	_
15	,	_	,	,	_	14	punct	_	_
16	economic	_	JJ	JJ	_	14	conj	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	technological	_	JJ	JJ	_	14	conj	_	_
19	exchanges	_	NNS	NNS	_	13	dobj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(a / advance-01, ARG1, a3 / and)
(a3 / and, op, e4 / exchange-01)
(c / country, name, n2 / name)
(e4 / exchange-01, mod, t2 / technology)
(n / name, op, "Wen")
(n2 / name, op, "Germany")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, v / visit-01)
(v / visit-01, ARG0, p / person)
(v / visit-01, destination, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),exchanges,exchange-01,false), Span(17,18,List(1),technological,technology,false), Span(15,16,List(2),economic,economy,false), Span(13,14,List(3),trade,trade-01,false), Span(12,13,List(4),advance,advance-01,false), Span(7,8,List(5),visit,visit-01,false)),Map(2 -> economy, 5 -> visit-01, 1 -> technology, 4 -> advance-01, 0 -> exchange-01, 3 -> trade-01),Map(e -> exchange-01, t -> technology, e2 -> economy, v -> visit-01, a -> advance-01, t2 -> trade-01))),[Ljava.lang.String;@7c112f5f,Annotation([Ljava.lang.String;@5961e92d,[Ljava.lang.String;@4fd05028,[Ljava.lang.String;@3a2d3909),Annotation([Ljava.lang.String;@4fb392c4,[Ljava.lang.String;@194d329e,[Ledu.cmu.lti.nlp.amr.Dependency;@54d1608f),Annotation([Ljava.lang.String;@7e7fe6d,[Ljava.lang.String;@541179e7,[Ljava.lang.String;@24386839),Annotation([Ljava.lang.String;@7b32b129,[Ljava.lang.String;@439e3cb4,[Ledu.cmu.lti.nlp.amr.Entity;@1c9fbb61))
AMR:
(a / advance-01, ARG1, e / exchange-01)
(a / advance-01, ARG2, v / visit-01)
(e / exchange-01, ARG1, t / technology)
(t2 / trade-01, ARG1, e / exchange-01)
(v / visit-01, ARG1, e2 / economy)

Decoded in 51,618 microseconds
Sentence: The governments of China and Germany are expected to further increase cooperation in this regard.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 11-12:  cooperation => cooperate-01
Span 7-8:  expected => expect-01
Span 9-10:  further => further
Span 10-11:  increase => increase-01
Span 13-14:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 11-12:  cooperation => cooperate-01
Oracle Span 7-8:  expected => expect-01
Oracle Span 9-10:  further => further-01
Oracle Span 5-6:  Germany => (country :name (name :op "Germany"))
Oracle Span 1-2:  governments => (government-organization :ARG0-of govern-01)
Oracle Span 10-11:  increase => increase-01
Oracle Span 14-15:  regard => regard
Oracle Span 13-14:  this => this

Incorrect span: further => further
Missing span: China => (country :name (name :op "China"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: further => further-01
Missing span: regard => regard
Missing span: and => and
Missing span: governments => (government-organization :ARG0-of govern-01)
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	governments	_	NNS	NNS	_	8	nsubjpass	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	China	_	NNP	NNP	_	3	pobj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	Germany	_	NNP	NNP	_	4	conj	_	_
7	are	_	VBP	VBP	_	8	auxpass	_	_
8	expected	_	VBN	VBN	_	0	root	_	_
9	to	_	TO	TO	_	8	prep	_	_
10	further	_	JJ	JJ	_	12	amod	_	_
11	increase	_	NN	NN	_	12	nn	_	_
12	cooperation	_	NN	NN	_	9	pobj	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	this	_	DT	DT	_	15	det	_	_
15	regard	_	NN	NN	_	13	pobj	_	_
16	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, g3 / government-organization)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / cooperate-01, ARG2, r / regard)
(e / expect-01, ARG1, i / increase-01)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c2 / country)
(i / increase-01, ARG0, a / and)
(i / increase-01, ARG1, c3 / cooperate-01)
(i / increase-01, manner, f / further-01)
(n / name, op, "China")
(n2 / name, op, "Germany")
(r / regard, mod, t / this)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),this,this,false), Span(11,12,List(1),cooperation,cooperate-01,false), Span(10,11,List(2),increase,increase-01,false), Span(9,10,List(3),further,further,false), Span(7,8,List(4),expected,expect-01,false)),Map(2 -> increase-01, 1 -> cooperate-01, 4 -> expect-01, 0 -> this, 3 -> further),Map(e -> expect-01, t -> this, i -> increase-01, c -> cooperate-01, f -> further))),[Ljava.lang.String;@7b81616b,Annotation([Ljava.lang.String;@15d42ccb,[Ljava.lang.String;@279dd959,[Ljava.lang.String;@46383a78),Annotation([Ljava.lang.String;@36c281ed,[Ljava.lang.String;@244418a,[Ledu.cmu.lti.nlp.amr.Dependency;@4b5a078a),Annotation([Ljava.lang.String;@4c361f63,[Ljava.lang.String;@6ed922e1,[Ljava.lang.String;@4eb166a1),Annotation([Ljava.lang.String;@554c4eaa,[Ljava.lang.String;@29fd8e67,[Ledu.cmu.lti.nlp.amr.Entity;@e146f93))
AMR:
(c / cooperate-01, ARG2, i / increase-01)
(c / cooperate-01, degree, f / further)
(e / expect-01, ARG1, f / further)
(i / increase-01, ARG1, t / this)

Decoded in 40,691 microseconds
Sentence: Wen spoke of his brief visit to Frankfurt during a tour of Nordic nations in 1988 and stated that the friendship between China and Germany is sincere, active and fruitful.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Frankfurt"))
NER Entity: (thing :name (name :op "Nordic"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 15-16:  1988 => (date-entity :year 1988)
Span 28-29:  active => active
Span 4-5:  brief => brief
Span 20-21:  friendship => friendship
Span 30-31:  fruitful => fruitful
Span 13-14:  nations => nation
Span 1-2:  spoke => speak-01
Span 10-11:  tour => tour-01
Span 5-6:  visit => visit-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 15-16:  1988 => (date-entity :year 1988)
Oracle Span 28-29:  active => active
Oracle Span 16-17:  and => and
Oracle Span 23-24:  and => and
Oracle Span 21-22:  between => between
Oracle Span 4-5:  brief => brief
Oracle Span 22-23:  China => (country :name (name :op "China"))
Oracle Span 7-8:  Frankfurt => (city :name (name :op "Frankfurt"))
Oracle Span 20-21:  friendship => friendship
Oracle Span 30-31:  fruitful => fruitful
Oracle Span 24-25:  Germany => (country :name (name :op "Germany"))
Oracle Span 13-14:  nations => nation
Oracle Span 26-27:  sincere => sincere
Oracle Span 1-2:  spoke => speak-01
Oracle Span 17-18:  stated => state-01
Oracle Span 10-11:  tour => tour-01
Oracle Span 5-6:  visit => visit-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Frankfurt => (city :name (name :op "Frankfurt"))
Missing span: China => (country :name (name :op "China"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: and => and
Missing span: stated => state-01
Missing span: and => and
Missing span: between => between
Missing span: sincere => sincere
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	spoke	_	VBD	VBD	_	0	root	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	his	_	PRP$	PRP$	_	6	poss	_	_
5	brief	_	JJ	JJ	_	6	amod	_	_
6	visit	_	NN	NN	_	3	pobj	_	_
7	to	_	TO	TO	_	2	prep	_	_
8	Frankfurt	_	NNP	NNP	_	7	pobj	_	_
9	during	_	IN	IN	_	2	prep	_	_
10	a	_	DT	DT	_	11	det	_	_
11	tour	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	Nordic	_	JJ	JJ	_	14	amod	_	_
14	nations	_	NNS	NNS	_	12	pobj	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	1988	_	CD	CD	_	15	pobj	_	_
17	and	_	CC	CC	_	2	cc	_	_
18	stated	_	VBD	VBD	_	2	conj	_	_
19	that	_	IN	IN	_	27	mark	_	_
20	the	_	DT	DT	_	21	det	_	_
21	friendship	_	NN	NN	_	27	nsubj	_	_
22	between	_	IN	IN	_	21	prep	_	_
23	China	_	NNP	NNP	_	22	pobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	Germany	_	NNP	NNP	_	23	conj	_	_
26	is	_	VBZ	VBZ	_	27	cop	_	_
27	sincere	_	JJ	JJ	_	18	ccomp	_	_
28	,	_	,	,	_	27	punct	_	_
29	active	_	JJ	JJ	_	27	conj	_	_
30	and	_	CC	CC	_	27	cc	_	_
31	fruitful	_	JJ	JJ	_	27	conj	_	_
32	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, s / speak-01)
(a / and, op, s2 / state-01)
(a2 / and, domain, f2 / friendship)
(a2 / and, op, a3 / active)
(a2 / and, op, f / fruitful)
(a2 / and, op, s3 / sincere)
(b2 / between, op, c2 / country)
(b2 / between, op, c3 / country)
(c / city, name, n2 / name)
(c2 / country, name, n5 / name)
(c3 / country, name, n6 / name)
(d / date-entity, year, 1988)
(f2 / friendship, mod, b2 / between)
(n / name, op, "Wen")
(n2 / name, op, "Frankfurt")
(n5 / name, op, "China")
(n6 / name, op, "Germany")
(p / person, name, n / name)
(s / speak-01, ARG0, p / person)
(s / speak-01, ARG1, v / visit-01)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, a2 / and)
(t / tour-01, ARG0, p / person)
(t / tour-01, ARG1, n3 / nation)
(t / tour-01, time, d / date-entity)
(v / visit-01, ARG0, p / person)
(v / visit-01, destination, c / city)
(v / visit-01, mod, b / brief)
(v / visit-01, time, t / tour-01)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),fruitful,fruitful,false), Span(28,29,List(1),active,active,false), Span(20,21,List(2),friendship,friendship,false), Span(15,16,List(4, 3),1988,(date-entity :year 1988),false), Span(13,14,List(5),nations,nation,false), Span(10,11,List(6),tour,tour-01,false), Span(5,6,List(7),visit,visit-01,false), Span(4,5,List(8),brief,brief,false), Span(1,2,List(9),spoke,speak-01,false)),Map(2 -> friendship, 5 -> nation, 8 -> brief, 7 -> visit-01, 1 -> active, 4 -> 1988, 6 -> tour-01, 9 -> speak-01, 0 -> fruitful, 3 -> date-entity),Map(n -> nation, b -> brief, t -> tour-01, s -> speak-01, v -> visit-01, d -> date-entity, 1 -> 1988, a -> active, f2 -> friendship, f -> fruitful))),[Ljava.lang.String;@4bd5849e,Annotation([Ljava.lang.String;@7cdbaa50,[Ljava.lang.String;@39909d1a,[Ljava.lang.String;@1455154c),Annotation([Ljava.lang.String;@7343922c,[Ljava.lang.String;@526b2f3e,[Ledu.cmu.lti.nlp.amr.Dependency;@6f2e1024),Annotation([Ljava.lang.String;@536d97f8,[Ljava.lang.String;@3c50ad4b,[Ljava.lang.String;@37496720),Annotation([Ljava.lang.String;@28f9fedd,[Ljava.lang.String;@17947e6d,[Ledu.cmu.lti.nlp.amr.Entity;@2e17a321))
AMR:
(d / date-entity, year, 1 / 1988)
(f2 / friendship, op, t / tour-01)
(s / speak-01, ARG1, a / active)
(s / speak-01, time, t / tour-01)
(s / speak-01, time, v / visit-01)
(t / tour-01, ARG0, f / fruitful)
(t / tour-01, ARG1, n / nation)
(v / visit-01, ARG1, d / date-entity)
(v / visit-01, duration, b / brief)

Decoded in 162,158 microseconds
Sentence: Wen pledged to establish a development goal for Sino-German relations stating that mutual trust constitutes the foundation of bilateral relations.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (organization :name (name :op "Sino" :op "-" :op "German"))
Spans:
Span 20-21:  bilateral => bilateral
Span 16-17:  constitutes => constitute-01
Span 5-6:  development => develop-02
Span 3-4:  establish => establish-01
Span 10-11:  German => (country :name (name :op "Germany"))
Span 6-7:  goal => goal
Span 14-15:  mutual => mutual
Span 1-2:  pledged => pledge-01
Span 12-13:  stating => state-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 20-21:  bilateral => bilateral
Oracle Span 16-17:  constitutes => constitute-01
Oracle Span 5-6:  development => develop-02
Oracle Span 3-4:  establish => establish-01
Oracle Span 18-19:  foundation => found-01
Oracle Span 10-11:  German => (country :name (name :op "Germany"))
Oracle Span 6-7:  goal => goal
Oracle Span 14-15:  mutual => mutual
Oracle Span 1-2:  pledged => pledge-01
Oracle Span 11-12:  relations => relation
Oracle Span 21-22:  relations => relation
Oracle Span 12-13:  stating => state-01
Oracle Span 15-16:  trust => trust-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: relations => relation
Missing span: relations => relation
Missing span: trust => trust-01
Missing span: foundation => found-01
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	pledged	_	VBD	VBD	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	establish	_	VB	VB	_	2	xcomp	_	_
5	a	_	DT	DT	_	7	det	_	_
6	development	_	NN	NN	_	7	nn	_	_
7	goal	_	NN	NN	_	4	dobj	_	_
8	for	_	IN	IN	_	4	prep	_	_
9	Sino-German	_	JJ	JJ	_	10	amod	_	_
10	relations	_	NNS	NNS	_	8	pobj	_	_
11	stating	_	VBG	VBG	_	10	vmod	_	_
12	that	_	IN	IN	_	15	mark	_	_
13	mutual	_	JJ	JJ	_	14	amod	_	_
14	trust	_	NN	NN	_	15	nsubj	_	_
15	constitutes	_	VBZ	VBZ	_	11	ccomp	_	_
16	the	_	DT	DT	_	17	det	_	_
17	foundation	_	NN	NN	_	15	dobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	bilateral	_	JJ	JJ	_	20	amod	_	_
20	relations	_	NNS	NNS	_	18	pobj	_	_
21	.	_	.	.	_	2	punct	_	_

Oracle:
(c2 / country, name, n3 / name)
(c3 / constitute-01, ARG0, t / trust-01)
(c3 / constitute-01, ARG1, f / found-01)
(e / establish-01, ARG0, p2 / person)
(e / establish-01, ARG1, g / goal)
(f / found-01, ARG1, r2 / relation)
(g / goal, beneficiary, r / relation)
(g / goal, topic, d / develop-02)
(n / name, op, "Wen")
(n3 / name, op, "Germany")
(p / pledge-01, ARG0, p2 / person)
(p / pledge-01, ARG2, e / establish-01)
(p2 / person, name, n / name)
(r / relation, mod, c2 / country)
(r2 / relation, mod, b / bilateral)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, c3 / constitute-01)
(t / trust-01, mod, m / mutual)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),bilateral,bilateral,false), Span(16,17,List(1),constitutes,constitute-01,false), Span(14,15,List(2),mutual,mutual,false), Span(12,13,List(3),stating,state-01,false), Span(10,11,List(6, 5, 4),German,(country :name (name :op "Germany")),false), Span(6,7,List(7),goal,goal,false), Span(5,6,List(8),development,develop-02,false), Span(3,4,List(9),establish,establish-01,false), Span(1,2,List(10),pledged,pledge-01,false)),Map(2 -> mutual, 5 -> name, 8 -> develop-02, 7 -> goal, 1 -> constitute-01, 4 -> country, 6 -> "Germany", 9 -> establish-01, 0 -> bilateral, 10 -> pledge-01, 3 -> state-01),Map(e -> establish-01, n -> name, b -> bilateral, s -> state-01, d -> develop-02, m -> mutual, p -> pledge-01, g -> goal, c -> constitute-01, c2 -> country))),[Ljava.lang.String;@521bb1a4,Annotation([Ljava.lang.String;@35f3a22c,[Ljava.lang.String;@1a0c5e9,[Ljava.lang.String;@123d7057),Annotation([Ljava.lang.String;@1d247525,[Ljava.lang.String;@35ee466f,[Ledu.cmu.lti.nlp.amr.Dependency;@32e652b6),Annotation([Ljava.lang.String;@4ba02375,[Ljava.lang.String;@7593ea79,[Ljava.lang.String;@3289079a),Annotation([Ljava.lang.String;@32fa809f,[Ljava.lang.String;@788ba63e,[Ledu.cmu.lti.nlp.amr.Entity;@12a14b74))
AMR:
(b / bilateral, op, e / establish-01)
(c2 / country, name, n / name)
(d / develop-02, ARG0, c2 / country)
(d / develop-02, ARG1, g / goal)
(e / establish-01, ARG1, g / goal)
(m / mutual, op, e / establish-01)
(n / name, op, "Germany")
(p / pledge-01, ARG1, e / establish-01)
(s / state-01, ARG0, g / goal)
(s / state-01, ARG1, c / constitute-01)

Decoded in 245,744 microseconds
Sentence: Wen stated that trade between China and Germany has amounted to 41.8 billion U.S. dollars totaling one-third of China-Europe trade volume.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "China" :op "-" :op "Europe"))
Spans:
Span 9-10:  amounted => amount-02
Span 14-15:  dollars => (monetary-quantity :unit dollar)
Span 23-24:  trade => trade-01
Span 3-4:  trade => trade-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 9-10:  amounted => amount-01
Oracle Span 6-7:  and => and
Oracle Span 5-6:  China => (country :name (name :op "China"))
Oracle Span 14-15:  dollars => (monetary-quantity :unit dollar)
Oracle Span 22-23:  Europe => (continent :name (name :op "Europe"))
Oracle Span 7-8:  Germany => (country :name (name :op "Germany"))
Oracle Span 19-20:  of => include-91
Oracle Span 1-2:  stated => state-01
Oracle Span 15-16:  totaling => total-01
Oracle Span 3-4:  trade => trade-01
Oracle Span 23-24:  trade => trade-01
Oracle Span 13-14:  U.S. => (country :name (name :op "U.S."))
Oracle Span 24-25:  volume => volume
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: amounted => amount-02
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: stated => state-01
Missing span: and => and
Missing span: totaling => total-01
Missing span: volume => volume
Missing span: of => include-91
Missing span: amounted => amount-01
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	10	mark	_	_
4	trade	_	NN	NN	_	10	nsubj	_	_
5	between	_	IN	IN	_	4	prep	_	_
6	China	_	NNP	NNP	_	5	pobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	Germany	_	NNP	NNP	_	6	conj	_	_
9	has	_	VBZ	VBZ	_	10	aux	_	_
10	amounted	_	VBN	VBN	_	2	ccomp	_	_
11	to	_	TO	TO	_	10	prep	_	_
12	41.8	_	CD	CD	_	13	number	_	_
13	billion	_	CD	CD	_	15	num	_	_
14	U.S.	_	NNP	NNP	_	15	nn	_	_
15	dollars	_	NNS	NNS	_	11	pobj	_	_
16	totaling	_	VBG	VBG	_	10	xcomp	_	_
17	one-third	_	NN	NN	_	16	dobj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	China-Europe	_	JJ	JJ	_	21	amod	_	_
20	trade	_	NN	NN	_	21	nn	_	_
21	volume	_	NN	NN	_	18	pobj	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a2 / amount-01)
(a / and, op, t2 / total-01)
(a2 / amount-01, ARG1, t / trade-01)
(a2 / amount-01, ARG2, m / monetary-quantity)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(c4 / continent, name, n5 / name)
(d / dollar, mod, c3 / country)
(i / include-91, ARG1, v2 / volume)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(n4 / name, op, "U.S.")
(n5 / name, op, "Europe")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(t / trade-01, ARG0, c / country)
(t / trade-01, ARG2, c2 / country)
(t2 / total-01, ARG1, t / trade-01)
(t2 / total-01, ARG2, v2 / volume)
(t3 / trade-01, ARG0, c / country)
(t3 / trade-01, ARG2, c4 / continent)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),trade,trade-01,false), Span(14,15,List(2, 1),dollars,(monetary-quantity :unit dollar),false), Span(9,10,List(3),amounted,amount-02,false), Span(3,4,List(4),trade,trade-01,false)),Map(2 -> dollar, 1 -> monetary-quantity, 4 -> trade-01, 0 -> trade-01, 3 -> amount-02),Map(t -> trade-01, d -> dollar, m -> monetary-quantity, a -> amount-02, t2 -> trade-01))),[Ljava.lang.String;@68ee3b6d,Annotation([Ljava.lang.String;@e76b097,[Ljava.lang.String;@2be95d31,[Ljava.lang.String;@338b49d3),Annotation([Ljava.lang.String;@2aa7399c,[Ljava.lang.String;@11eed657,[Ledu.cmu.lti.nlp.amr.Dependency;@708f018e),Annotation([Ljava.lang.String;@19a31b9d,[Ljava.lang.String;@a5bbaec,[Ljava.lang.String;@6d60899e),Annotation([Ljava.lang.String;@65eb76cd,[Ljava.lang.String;@6415f61e,[Ledu.cmu.lti.nlp.amr.Entity;@334ebcaa))
AMR:
(a / amount-02, ARG1, t2 / trade-01)
(a / amount-02, ARG2, m / monetary-quantity)
(m / monetary-quantity, unit, d / dollar)
(t / trade-01, ARG0, m / monetary-quantity)

Decoded in 77,765 microseconds
Sentence: Wen stated that both China-German and China-Europe trade are expected to double by 2010.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "China" :op "-" :op "Europe"))
NER Entity: (thing :name (name :op "China" :op "-" :op "Europe"))
Spans:
Span 17-18:  2010 => (date-entity :year 2010)
Span 3-4:  both => both
Span 13-14:  expected => expect-01
Span 6-7:  German => (country :name (name :op "Germany"))
Span 11-12:  trade => trade-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 17-18:  2010 => (date-entity :year 2010)
Oracle Span 7-8:  and => and
Oracle Span 4-5:  China => (country :name (name :op "China"))
Oracle Span 15-16:  double => double-01
Oracle Span 10-11:  Europe => (continent :name (name :op "Europe"))
Oracle Span 13-14:  expected => expect-01
Oracle Span 6-7:  German => (country :name (name :op "Germany"))
Oracle Span 1-2:  stated => state-01
Oracle Span 11-12:  trade => trade-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Extra span: both => both
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: stated => state-01
Missing span: double => double-01
Missing span: and => and
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	10	mark	_	_
4	both	_	DT	DT	_	8	det	_	_
5	China-German	_	JJ	JJ	_	8	amod	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	China-Europe	_	JJ	JJ	_	5	conj	_	_
8	trade	_	NN	NN	_	10	nsubjpass	_	_
9	are	_	VBP	VBP	_	10	auxpass	_	_
10	expected	_	VBN	VBN	_	2	ccomp	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	double	_	VB	VB	_	10	xcomp	_	_
13	by	_	IN	IN	_	12	prep	_	_
14	2010	_	CD	CD	_	13	pobj	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(a2 / and, op, c / country)
(a2 / and, op, c3 / continent)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / continent, name, n4 / name)
(d / double-01, ARG1, t / trade-01)
(d / double-01, time, d2 / date-entity)
(d2 / date-entity, year, 2010)
(e / expect-01, ARG1, d / double-01)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(n4 / name, op, "Europe")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, e / expect-01)
(t / trade-01, ARG2, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(1, 0),2010,(date-entity :year 2010),false), Span(13,14,List(2),expected,expect-01,false), Span(11,12,List(3),trade,trade-01,false), Span(6,7,List(6, 5, 4),German,(country :name (name :op "Germany")),false), Span(3,4,List(7),both,both,false)),Map(2 -> expect-01, 5 -> name, 7 -> both, 1 -> 2010, 4 -> country, 6 -> "Germany", 0 -> date-entity, 3 -> trade-01),Map(n -> name, e -> expect-01, 2 -> 2010, b -> both, t -> trade-01, d -> date-entity, c -> country))),[Ljava.lang.String;@5a0bef24,Annotation([Ljava.lang.String;@6468a7b6,[Ljava.lang.String;@2f860823,[Ljava.lang.String;@696b4a95),Annotation([Ljava.lang.String;@6c1cfa53,[Ljava.lang.String;@4d68b571,[Ledu.cmu.lti.nlp.amr.Dependency;@52b06bef),Annotation([Ljava.lang.String;@61bcbcce,[Ljava.lang.String;@6af91cc8,[Ljava.lang.String;@6232ffdb),Annotation([Ljava.lang.String;@330c1f61,[Ljava.lang.String;@37d28f02,[Ledu.cmu.lti.nlp.amr.Entity;@15efda6c))
AMR:
(c / country, name, n / name)
(d / date-entity, year, 2 / 2010)
(e / expect-01, ARG1, t / trade-01)
(n / name, op, "Germany")
(t / trade-01, ARG1, d / date-entity)
(t / trade-01, medium, c / country)
(t / trade-01, mod, b / both)

Decoded in 53,227 microseconds
Sentence: Wen stated that the governments of China and Germany plan close cooperation in high-tech research and development and among medium and small-sized enterprises.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 11-12:  cooperation => cooperate-01
Span 18-19:  development => develop-02
Span 26-27:  enterprises => enterprise
Span 21-22:  medium => medium
Span 16-17:  research => research-01
Span 25-26:  sized => size-01
Span 23-24:  small => small
Span 15-16:  tech => tech

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 17-18:  and => and
Oracle Span 19-20:  and => and
Oracle Span 22-23:  and => and
Oracle Span 6-7:  China => (country :name (name :op "China"))
Oracle Span 10-11:  close => close
Oracle Span 11-12:  cooperation => cooperate-01
Oracle Span 18-19:  development => develop-02
Oracle Span 26-27:  enterprises => enterprise
Oracle Span 8-9:  Germany => (country :name (name :op "Germany"))
Oracle Span 4-5:  governments => (government-organization :ARG0-of govern-01)
Oracle Span 13-14:  high => high
Oracle Span 21-22:  medium => medium
Oracle Span 9-10:  plan => plan-01
Oracle Span 16-17:  research => research-01
Oracle Span 25-26:  sized => size-01
Oracle Span 23-24:  small => small
Oracle Span 1-2:  stated => state-01
Oracle Span 15-16:  tech => tech
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: stated => state-01
Missing span: plan => plan-01
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: high => high
Missing span: close => close
Missing span: and => and
Missing span: governments => (government-organization :ARG0-of govern-01)
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	10	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	governments	_	NNS	NNS	_	10	nsubj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	China	_	NNP	NNP	_	6	pobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	Germany	_	NNP	NNP	_	7	conj	_	_
10	plan	_	VBP	VBP	_	2	ccomp	_	_
11	close	_	JJ	JJ	_	12	amod	_	_
12	cooperation	_	NN	NN	_	10	dobj	_	_
13	in	_	IN	IN	_	10	prep	_	_
14	high-tech	_	JJ	JJ	_	15	amod	_	_
15	research	_	NN	NN	_	13	pobj	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	development	_	NN	NN	_	15	conj	_	_
18	and	_	CC	CC	_	13	cc	_	_
19	among	_	IN	IN	_	13	conj	_	_
20	medium	_	NN	NN	_	23	amod	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	small-sized	_	JJ	JJ	_	20	conj	_	_
23	enterprises	_	NNS	NNS	_	19	pobj	_	_
24	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, g3 / government-organization)
(a2 / and, op, a3 / and)
(a2 / and, op, a4 / and)
(a3 / and, op, d / develop-02)
(a3 / and, op, r / research-01)
(a4 / and, op, e2 / enterprise)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / cooperate-01, ARG1, g3 / government-organization)
(c3 / cooperate-01, ARG2, a2 / and)
(c3 / cooperate-01, mod, c4 / close)
(d / develop-02, ARG1, t / tech)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c2 / country)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(p / person, name, n / name)
(p2 / plan-01, ARG0, a / and)
(p2 / plan-01, ARG1, c3 / cooperate-01)
(r / research-01, ARG1, t / tech)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, p2 / plan-01)
(s4 / size-01, ARG1, e2 / enterprise)
(s4 / size-01, ARG2, s3 / small)
(t / tech, mod, h / high)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),enterprises,enterprise,false), Span(25,26,List(1),sized,size-01,false), Span(23,24,List(2),small,small,false), Span(21,22,List(3),medium,medium,false), Span(18,19,List(4),development,develop-02,false), Span(16,17,List(5),research,research-01,false), Span(15,16,List(6),tech,tech,false), Span(11,12,List(7),cooperation,cooperate-01,false)),Map(2 -> small, 5 -> research-01, 7 -> cooperate-01, 1 -> size-01, 4 -> develop-02, 6 -> tech, 0 -> enterprise, 3 -> medium),Map(e -> enterprise, t -> tech, s2 -> small, s -> size-01, d -> develop-02, m -> medium, r -> research-01, c -> cooperate-01))),[Ljava.lang.String;@6056232d,Annotation([Ljava.lang.String;@33f2df51,[Ljava.lang.String;@107bfcb2,[Ljava.lang.String;@7bac686b),Annotation([Ljava.lang.String;@2ab26378,[Ljava.lang.String;@f9f3928,[Ledu.cmu.lti.nlp.amr.Dependency;@404eca05),Annotation([Ljava.lang.String;@58b91d57,[Ljava.lang.String;@61a91c9b,[Ljava.lang.String;@17092fff),Annotation([Ljava.lang.String;@2121d1f9,[Ljava.lang.String;@31e2232f,[Ledu.cmu.lti.nlp.amr.Entity;@1806bc4c))
AMR:
(c / cooperate-01, ARG1, r / research-01)
(d / develop-02, ARG0, m / medium)
(r / research-01, ARG0, e / enterprise)
(r / research-01, ARG1, m / medium)
(r / research-01, mod, t / tech)
(s / size-01, ARG0, e / enterprise)
(s / size-01, ARG1, s2 / small)

Decoded in 118,416 microseconds
Sentence: Wen stated that it is important to create channels for settling trade disputes between the 2 countries and that China and Germany should address each other's concerns.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 27-28:  concerns => concern-01
Span 16-17:  countries => country
Span 7-8:  create => create-01
Span 12-13:  disputes => dispute-01
Span 24-25:  each => each
Span 5-6:  important => important
Span 25-26:  other => other
Span 22-23:  should => recommend-01
Span 11-12:  trade => trade-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 23-24:  address => address-02
Oracle Span 17-18:  and => and
Oracle Span 20-21:  and => and
Oracle Span 8-9:  channels => channel
Oracle Span 19-20:  China => (name :op "China")
Oracle Span 27-28:  concerns => concern-02
Oracle Span 16-17:  countries => country
Oracle Span 7-8:  create => create-01
Oracle Span 12-13:  disputes => dispute-01
Oracle Span 21-22:  Germany => (country :name (name :op "Germany"))
Oracle Span 5-6:  important => importance
Oracle Span 10-11:  settling => settle-02
Oracle Span 22-23:  should => recommend-01
Oracle Span 1-2:  stated => state-01
Oracle Span 11-12:  trade => trade-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: concerns => concern-01
Extra span: other => other
Extra span: each => each
Incorrect span: important => important
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (name :op "China")
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: stated => state-01
Missing span: and => and
Missing span: address => address-02
Missing span: concerns => concern-02
Missing span: and => and
Missing span: settling => settle-02
Missing span: channels => channel
Missing span: important => importance
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	it	_	PRP	PRP	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	important	_	JJ	JJ	_	2	ccomp	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	create	_	VB	VB	_	6	xcomp	_	_
9	channels	_	NNS	NNS	_	8	dobj	_	_
10	for	_	IN	IN	_	8	prep	_	_
11	settling	_	VBG	VBG	_	10	pcomp	_	_
12	trade	_	NN	NN	_	13	nn	_	_
13	disputes	_	NNS	NNS	_	11	dobj	_	_
14	between	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	2	_	CD	CD	_	17	num	_	_
17	countries	_	NNS	NNS	_	14	pobj	_	_
18	and	_	CC	CC	_	6	cc	_	_
19	that	_	IN	IN	_	24	mark	_	_
20	China	_	NNP	NNP	_	24	nsubj	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	Germany	_	NNP	NNP	_	20	conj	_	_
23	should	_	MD	MD	_	24	aux	_	_
24	address	_	VB	VB	_	6	conj	_	_
25	each	_	DT	DT	_	26	det	_	_
26	other	_	JJ	JJ	_	28	poss	_	_
27	's	_	POS	POS	_	26	possessive	_	_
28	concerns	_	NNS	NNS	_	24	dobj	_	_
29	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, i / importance)
(a / and, op, r / recommend-01)
(a2 / address-02, ARG1, c6 / concern-02)
(a4 / and, op, c4 / country)
(a4 / and, op, c5 / country)
(c / create-01, ARG1, c2 / channel)
(c / create-01, purpose, s2 / settle-02)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(c6 / concern-02, ARG0, a4 / and)
(d / dispute-01, ARG0, c4 / country)
(d / dispute-01, ARG1, c5 / country)
(d / dispute-01, mod, t / trade-01)
(i / importance, domain, c / create-01)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(p / person, name, n / name)
(r / recommend-01, ARG1, a2 / address-02)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s2 / settle-02, ARG1, d / dispute-01)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),concerns,concern-01,false), Span(25,26,List(1),other,other,false), Span(24,25,List(2),each,each,false), Span(22,23,List(3),should,recommend-01,false), Span(16,17,List(4),countries,country,false), Span(12,13,List(5),disputes,dispute-01,false), Span(11,12,List(6),trade,trade-01,false), Span(7,8,List(7),create,create-01,false), Span(5,6,List(8),important,important,false)),Map(2 -> each, 5 -> dispute-01, 8 -> important, 7 -> create-01, 1 -> other, 4 -> country, 6 -> trade-01, 0 -> concern-01, 3 -> recommend-01),Map(e -> each, t -> trade-01, d -> dispute-01, c3 -> create-01, i -> important, r -> recommend-01, c -> concern-01, o -> other, c2 -> country))),[Ljava.lang.String;@462e1e64,Annotation([Ljava.lang.String;@69afa141,[Ljava.lang.String;@49f40c00,[Ljava.lang.String;@643d2dae),Annotation([Ljava.lang.String;@52d6d273,[Ljava.lang.String;@4667c4c1,[Ledu.cmu.lti.nlp.amr.Dependency;@2f9a4401),Annotation([Ljava.lang.String;@22c75c01,[Ljava.lang.String;@46e64760,[Ljava.lang.String;@3e5fd2b1),Annotation([Ljava.lang.String;@43982337,[Ljava.lang.String;@5b275811,[Ledu.cmu.lti.nlp.amr.Entity;@2f0ed952))
AMR:
(c / concern-01, ARG0, e / each)
(c / concern-01, ARG2, o / other)
(c3 / create-01, ARG1, d / dispute-01)
(d / dispute-01, ARG1, t / trade-01)
(d / dispute-01, ARG2, c2 / country)
(i / important, domain, c3 / create-01)
(r / recommend-01, ARG1, e / each)
(r / recommend-01, ARG2, c3 / create-01)

Decoded in 225,936 microseconds
Sentence: China considers Germany the most important trade partner of Europe.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Europe"))
Spans:
Span 1-2:  considers => consider-01
Span 5-6:  important => important
Span 7-8:  partner => partner-01
Span 6-7:  trade => trade-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 1-2:  considers => consider-01
Oracle Span 9-10:  Europe => (continent :name (name :op "Europe"))
Oracle Span 2-3:  Germany => (country :name (name :op "Germany"))
Oracle Span 5-6:  important => important
Oracle Span 4-5:  most => most
Oracle Span 7-8:  partner => partner-01
Oracle Span 6-7:  trade => trade-01

Missing span: China => (country :name (name :op "China"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: most => most
Dependencies:
1	China	_	NNP	NNP	_	2	nsubj	_	_
2	considers	_	VBZ	VBZ	_	0	root	_	_
3	Germany	_	NNP	NNP	_	8	nsubj	_	_
4	the	_	DT	DT	_	8	det	_	_
5	most	_	RBS	RBS	_	6	advmod	_	_
6	important	_	JJ	JJ	_	8	amod	_	_
7	trade	_	NN	NN	_	8	nn	_	_
8	partner	_	NN	NN	_	2	xcomp	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	Europe	_	NNP	NNP	_	9	pobj	_	_
11	.	_	.	.	_	2	punct	_	_

Oracle:
(c / consider-01, ARG0, c2 / country)
(c / consider-01, ARG1, p / partner-01)
(c2 / country, name, n / name)
(c3 / continent, name, n2 / name)
(c4 / country, name, n3 / name)
(i / important, degree, m / most)
(n / name, op, "China")
(n2 / name, op, "Europe")
(n3 / name, op, "Germany")
(p / partner-01, ARG1, c4 / country)
(p / partner-01, location, c3 / continent)
(p / partner-01, mod, i / important)
(p / partner-01, mod, t / trade-01)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),partner,partner-01,false), Span(6,7,List(1),trade,trade-01,false), Span(5,6,List(2),important,important,false), Span(1,2,List(3),considers,consider-01,false)),Map(2 -> important, 1 -> trade-01, 0 -> partner-01, 3 -> consider-01),Map(t -> trade-01, p -> partner-01, i -> important, c -> consider-01))),[Ljava.lang.String;@6f044c58,Annotation([Ljava.lang.String;@6d074b14,[Ljava.lang.String;@c017175,[Ljava.lang.String;@559cedee),Annotation([Ljava.lang.String;@18371d89,[Ljava.lang.String;@4f3faa70,[Ledu.cmu.lti.nlp.amr.Dependency;@4832f03b),Annotation([Ljava.lang.String;@7af3874e,[Ljava.lang.String;@5a8816cc,[Ljava.lang.String;@68565bc7),Annotation([Ljava.lang.String;@37baddde,[Ljava.lang.String;@5115f590,[Ledu.cmu.lti.nlp.amr.Entity;@4b31a708))
AMR:
(c / consider-01, ARG1, p / partner-01)
(p / partner-01, ARG1, t / trade-01)
(p / partner-01, mod, i / important)

Decoded in 25,845 microseconds
Sentence: To support this statement Wen cited that 600 of the 7000 Chinese enterprises that invest internationally are in Germany.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 7-8:  600 => 600
Span 10-11:  7000 => 7000
Span 5-6:  cited => cite-01
Span 12-13:  enterprises => enterprise
Span 15-16:  internationally => international
Span 14-15:  invest => invest-01
Span 1-2:  support => support-01
Span 2-3:  this => this

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 7-8:  600 => 600
Oracle Span 10-11:  7000 => 7000
Oracle Span 11-12:  Chinese => (country :name (name :op "China"))
Oracle Span 5-6:  cited => cite-01
Oracle Span 12-13:  enterprises => enterprise
Oracle Span 18-19:  Germany => (country :name (name :op "Germany"))
Oracle Span 15-16:  internationally => international
Oracle Span 14-15:  invest => invest-01
Oracle Span 8-9:  of => include-91
Oracle Span 3-4:  statement => state-01
Oracle Span 1-2:  support => support-01
Oracle Span 2-3:  this => this
Oracle Span 4-5:  Wen => (person :name (name :op "Wen"))

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: of => include-91
Missing span: statement => state-01
Dependencies:
1	To	_	TO	TO	_	2	aux	_	_
2	support	_	VB	VB	_	6	csubj	_	_
3	this	_	DT	DT	_	5	det	_	_
4	statement	_	NN	NN	_	5	nn	_	_
5	Wen	_	NN	NN	_	2	dobj	_	_
6	cited	_	VBD	VBD	_	0	root	_	_
7	that	_	IN	IN	_	17	mark	_	_
8	600	_	CD	CD	_	17	nsubj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	13	det	_	_
11	7000	_	CD	CD	_	13	num	_	_
12	Chinese	_	JJ	JJ	_	13	amod	_	_
13	enterprises	_	NNS	NNS	_	9	pobj	_	_
14	that	_	WDT	WDT	_	15	nsubj	_	_
15	invest	_	VBP	VBP	_	13	rcmod	_	_
16	internationally	_	RB	RB	_	15	advmod	_	_
17	are	_	VBP	VBP	_	6	ccomp	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	Germany	_	NNP	NNP	_	18	pobj	_	_
20	.	_	.	.	_	6	punct	_	_

Oracle:
(c / cite-01, ARG0, p / person)
(c / cite-01, location, c2 / country)
(c / cite-01, purpose, s / support-01)
(c2 / country, domain, e / enterprise)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(e / enterprise, quant, 6 / 600)
(i / include-91, ARG1, e / enterprise)
(i2 / invest-01, manner, i3 / international)
(n / name, op, "Wen")
(n2 / name, op, "Germany")
(n3 / name, op, "China")
(p / person, name, n / name)
(s / support-01, ARG0, p / person)
(s / support-01, ARG1, s2 / state-01)
(s2 / state-01, mod, t / this)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),internationally,international,false), Span(14,15,List(1),invest,invest-01,false), Span(12,13,List(2),enterprises,enterprise,false), Span(10,11,List(3),7000,7000,false), Span(7,8,List(4),600,600,false), Span(5,6,List(5),cited,cite-01,false), Span(2,3,List(6),this,this,false), Span(1,2,List(7),support,support-01,false)),Map(2 -> enterprise, 5 -> cite-01, 7 -> support-01, 1 -> invest-01, 4 -> 600, 6 -> this, 0 -> international, 3 -> 7000),Map(e -> enterprise, t -> this, s -> support-01, 7 -> 7000, i2 -> invest-01, i -> international, c -> cite-01, 6 -> 600))),[Ljava.lang.String;@11e355ca,Annotation([Ljava.lang.String;@70d63e05,[Ljava.lang.String;@e11ecfa,[Ljava.lang.String;@485e13d7),Annotation([Ljava.lang.String;@43984213,[Ljava.lang.String;@2ff7a73,[Ledu.cmu.lti.nlp.amr.Dependency;@38830ea),Annotation([Ljava.lang.String;@3b705be7,[Ljava.lang.String;@3a790e40,[Ljava.lang.String;@43acd79e),Annotation([Ljava.lang.String;@1e1b061,[Ljava.lang.String;@38f77cd9,[Ledu.cmu.lti.nlp.amr.Entity;@4a8e6e89))
AMR:
(c / cite-01, ARG0, t / this)
(c / cite-01, ARG1, s / support-01)
(c / cite-01, ARG2, e / enterprise)
(e / enterprise, quant, 6 / 600)
(i2 / invest-01, ARG1, e / enterprise)
(i2 / invest-01, manner, i / international)
(s / support-01, ARG1, 7 / 7000)

Decoded in 125,624 microseconds
Sentence: Wen stated that the Government of China will support enterprises which invest in Germany with loans, insurance, foreign exchange, finance and investment.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 9-10:  enterprises => enterprise
Span 20-21:  exchange => exchange-01
Span 22-23:  finance => finance-01
Span 17-18:  insurance => insurance
Span 11-12:  invest => invest-01
Span 24-25:  investment => invest-01
Span 15-16:  loans => loan-01
Span 8-9:  support => support-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 23-24:  and => and
Oracle Span 6-7:  China => (country :name (name :op "China"))
Oracle Span 9-10:  enterprises => enterprise
Oracle Span 20-21:  exchange => exchange-01
Oracle Span 22-23:  finance => finance-01
Oracle Span 19-20:  foreign => foreign
Oracle Span 13-14:  Germany => (country :name (name :op "Germany"))
Oracle Span 4-5:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 17-18:  insurance => insure-01
Oracle Span 11-12:  invest => invest-01
Oracle Span 24-25:  investment => invest-01
Oracle Span 15-16:  loans => loan-01
Oracle Span 1-2:  stated => state-01
Oracle Span 8-9:  support => support-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: insurance => insurance
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: stated => state-01
Missing span: and => and
Missing span: foreign => foreign
Missing span: insurance => insure-01
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	9	mark	_	_
4	the	_	DT	DT	_	5	det	_	_
5	Government	_	NN	NN	_	9	nsubj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	China	_	NNP	NNP	_	6	pobj	_	_
8	will	_	MD	MD	_	9	aux	_	_
9	support	_	VB	VB	_	2	ccomp	_	_
10	enterprises	_	NNS	NNS	_	9	dobj	_	_
11	which	_	WDT	WDT	_	12	nsubj	_	_
12	invest	_	VBP	VBP	_	10	rcmod	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	Germany	_	NNP	NNP	_	13	pobj	_	_
15	with	_	IN	IN	_	12	prep	_	_
16	loans	_	NNS	NNS	_	15	pobj	_	_
17	,	_	,	,	_	16	punct	_	_
18	insurance	_	NN	NN	_	16	conj	_	_
19	,	_	,	,	_	16	punct	_	_
20	foreign	_	JJ	JJ	_	21	amod	_	_
21	exchange	_	NN	NN	_	16	conj	_	_
22	,	_	,	,	_	16	punct	_	_
23	finance	_	NN	NN	_	16	conj	_	_
24	and	_	CC	CC	_	16	cc	_	_
25	investment	_	NN	NN	_	16	conj	_	_
26	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, e2 / exchange-01)
(a / and, op, f2 / finance-01)
(a / and, op, i2 / insure-01)
(a / and, op, i3 / invest-01)
(a / and, op, l / loan-01)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(e2 / exchange-01, mod, f / foreign)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / invest-01, ARG0, e / enterprise)
(i / invest-01, ARG2, c2 / country)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, s2 / support-01)
(s2 / support-01, ARG0, g / government-organization)
(s2 / support-01, ARG1, e / enterprise)
(s2 / support-01, instrument, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),investment,invest-01,false), Span(22,23,List(1),finance,finance-01,false), Span(20,21,List(2),exchange,exchange-01,false), Span(17,18,List(3),insurance,insurance,false), Span(15,16,List(4),loans,loan-01,false), Span(11,12,List(5),invest,invest-01,false), Span(9,10,List(6),enterprises,enterprise,false), Span(8,9,List(7),support,support-01,false)),Map(2 -> exchange-01, 5 -> invest-01, 7 -> support-01, 1 -> finance-01, 4 -> loan-01, 6 -> enterprise, 0 -> invest-01, 3 -> insurance),Map(e -> exchange-01, e2 -> enterprise, s -> support-01, i3 -> invest-01, i2 -> insurance, i -> invest-01, l -> loan-01, f -> finance-01))),[Ljava.lang.String;@6fbb4061,Annotation([Ljava.lang.String;@63d5874f,[Ljava.lang.String;@60c73e58,[Ljava.lang.String;@5984feef),Annotation([Ljava.lang.String;@6c0905f6,[Ljava.lang.String;@23a918c7,[Ledu.cmu.lti.nlp.amr.Dependency;@7a45d714),Annotation([Ljava.lang.String;@4483d35,[Ljava.lang.String;@204abeff,[Ljava.lang.String;@4b4ee511),Annotation([Ljava.lang.String;@1f67761b,[Ljava.lang.String;@5a034157,[Ledu.cmu.lti.nlp.amr.Entity;@2f4ba1ae))
AMR:
(e / exchange-01, ARG0, e2 / enterprise)
(f / finance-01, ARG0, e2 / enterprise)
(i / invest-01, ARG0, e2 / enterprise)
(i3 / invest-01, ARG0, e2 / enterprise)
(i3 / invest-01, ARG1, l / loan-01)
(s / support-01, ARG0, i2 / insurance)
(s / support-01, ARG1, e2 / enterprise)

Decoded in 119,610 microseconds
Sentence: Chinese investment in Germany is much less than German investment in China since China has only recently started investing in this respect.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 8-9:  German => (country :name (name :op "Germany"))
Span 18-19:  investing => invest-01
Span 9-10:  investment => invest-01
Span 1-2:  investment => invest-01
Span 5-6:  much => much
Span 15-16:  only => only
Span 16-17:  recently => recent
Span 21-22:  respect => respect-01
Span 12-13:  since => since
Span 17-18:  started => start-01
Span 20-21:  this => this

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 11-12:  China => (country :name (name :op "China"))
Oracle Span 3-4:  Germany => (country :name (name :op "Germany"))
Oracle Span 18-19:  investing => invest-01
Oracle Span 1-2:  investment => invest-01
Oracle Span 9-10:  investment => invest-01
Oracle Span 6-7:  less => less
Oracle Span 5-6:  much => much
Oracle Span 15-16:  only => only
Oracle Span 16-17:  recently => recent
Oracle Span 17-18:  started => start-01

Extra span: respect => respect-01
Extra span: this => this
Extra span: since => since
Extra span: German => (country :name (name :op "Germany"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: China => (country :name (name :op "China"))
Missing span: less => less
Dependencies:
1	Chinese	_	JJ	JJ	_	2	amod	_	_
2	investment	_	NN	NN	_	7	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	Germany	_	NNP	NNP	_	3	pobj	_	_
5	is	_	VBZ	VBZ	_	7	cop	_	_
6	much	_	RB	RB	_	7	advmod	_	_
7	less	_	JJR	JJR	_	0	root	_	_
8	than	_	IN	IN	_	7	prep	_	_
9	German	_	JJ	JJ	_	10	amod	_	_
10	investment	_	NN	NN	_	8	pobj	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	China	_	NNP	NNP	_	11	pobj	_	_
13	since	_	IN	IN	_	18	mark	_	_
14	China	_	NNP	NNP	_	18	nsubj	_	_
15	has	_	VBZ	VBZ	_	18	aux	_	_
16	only	_	RB	RB	_	17	advmod	_	_
17	recently	_	RB	RB	_	18	advmod	_	_
18	started	_	VBN	VBN	_	7	advcl	_	_
19	investing	_	VBG	VBG	_	18	xcomp	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	this	_	DT	DT	_	22	det	_	_
22	respect	_	NN	NN	_	20	pobj	_	_
23	.	_	.	.	_	7	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(i / invest-01, ARG0, c / country)
(i / invest-01, ARG2, c2 / country)
(i2 / invest-01, ARG0, c2 / country)
(i2 / invest-01, ARG2, c / country)
(i2 / invest-01, mod, l / less)
(i3 / invest-01, ARG2, c / country)
(l / less, compared-to, i / invest-01)
(l / less, degree, m / much)
(n / name, op, "Germany")
(n2 / name, op, "China")
(s / start-01, ARG0, c2 / country)
(s / start-01, ARG1, i3 / invest-01)
(s / start-01, mod, o / only)
(s / start-01, time, r / recent)

Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),respect,respect-01,false), Span(20,21,List(1),this,this,false), Span(18,19,List(2),investing,invest-01,false), Span(17,18,List(3),started,start-01,false), Span(16,17,List(4),recently,recent,false), Span(15,16,List(5),only,only,false), Span(12,13,List(6),since,since,false), Span(9,10,List(7),investment,invest-01,false), Span(8,9,List(10, 9, 8),German,(country :name (name :op "Germany")),false), Span(5,6,List(11),much,much,false), Span(1,2,List(12),investment,invest-01,false)),Map(2 -> invest-01, 5 -> only, 12 -> invest-01, 8 -> country, 7 -> invest-01, 1 -> this, 4 -> recent, 11 -> much, 6 -> since, 0 -> respect-01, 9 -> name, 3 -> start-01, 10 -> "Germany"),Map(n -> name, s2 -> since, t -> this, s -> start-01, m -> much, i3 -> invest-01, r2 -> recent, i2 -> invest-01, i -> invest-01, r -> respect-01, c -> country, o -> only))),[Ljava.lang.String;@1391af3b,Annotation([Ljava.lang.String;@3762c4fc,[Ljava.lang.String;@77ab22be,[Ljava.lang.String;@59fbb34),Annotation([Ljava.lang.String;@1b6924cb,[Ljava.lang.String;@3a8d467e,[Ledu.cmu.lti.nlp.amr.Dependency;@141d3d43),Annotation([Ljava.lang.String;@6ca372ef,[Ljava.lang.String;@3ebe4ccc,[Ljava.lang.String;@6ed043d3),Annotation([Ljava.lang.String;@135a8c6f,[Ljava.lang.String;@6419a0e1,[Ledu.cmu.lti.nlp.amr.Entity;@280d4882))
AMR:
(c / country, name, n / name)
(i / invest-01, ARG1, r / respect-01)
(i2 / invest-01, ARG0, c / country)
(i2 / invest-01, ARG1, s / start-01)
(i3 / invest-01, ARG1, m / much)
(i3 / invest-01, ARG2, c / country)
(n / name, op, "Germany")
(r / respect-01, mod, t / this)
(s / start-01, ARG1, i / invest-01)
(s / start-01, time, o / only)
(s / start-01, time, r2 / recent)
(s2 / since, op, s / start-01)

Decoded in 335,404 microseconds
Sentence: Wen stated that German investment projects in China have exceeded 3500 with total investment near 10 billion U.S. dollars.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 10-11:  3500 => 3500
Span 18-19:  dollars => (monetary-quantity :unit dollar)
Span 3-4:  German => (country :name (name :op "Germany"))
Span 13-14:  investment => invest-01
Span 4-5:  investment => invest-01
Span 14-15:  near => near
Span 5-6:  projects => project

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 10-11:  3500 => 3500
Oracle Span 7-8:  China => (country :name (name :op "China"))
Oracle Span 18-19:  dollars => (monetary-quantity :unit dollar)
Oracle Span 9-10:  exceeded => exceed-01
Oracle Span 3-4:  German => (country :name (name :op "Germany"))
Oracle Span 4-5:  investment => invest-01
Oracle Span 13-14:  investment => invest-01
Oracle Span 14-15:  near => near-01
Oracle Span 5-6:  projects => project
Oracle Span 1-2:  stated => state-01
Oracle Span 12-13:  total => total-01
Oracle Span 17-18:  U.S. => (country :name (name :op "U.S."))
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: near => near
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: U.S. => (country :name (name :op "U.S."))
Missing span: stated => state-01
Missing span: exceeded => exceed-01
Missing span: near => near-01
Missing span: total => total-01
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	10	mark	_	_
4	German	_	JJ	JJ	_	6	amod	_	_
5	investment	_	NN	NN	_	6	nn	_	_
6	projects	_	NNS	NNS	_	10	nsubj	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	China	_	NNP	NNP	_	7	pobj	_	_
9	have	_	VBP	VBP	_	10	aux	_	_
10	exceeded	_	VBN	VBN	_	2	ccomp	_	_
11	3500	_	CD	CD	_	10	dobj	_	_
12	with	_	IN	IN	_	10	prep	_	_
13	total	_	JJ	JJ	_	14	amod	_	_
14	investment	_	NN	NN	_	12	pobj	_	_
15	near	_	IN	IN	_	14	prep	_	_
16	10	_	CD	CD	_	17	number	_	_
17	billion	_	CD	CD	_	19	num	_	_
18	U.S.	_	NNP	NNP	_	19	nn	_	_
19	dollars	_	NNS	NNS	_	15	pobj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(d / dollar, mod, c3 / country)
(e / exceed-01, ARG0, p2 / project)
(e / exceed-01, ARG2, 3 / 3500)
(i / invest-01, ARG0, c / country)
(i / invest-01, location, c2 / country)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Wen")
(n2 / name, op, "Germany")
(n3 / name, op, "China")
(n4 / near-01, ARG1, i2 / invest-01)
(n4 / near-01, ARG2, m / monetary-quantity)
(n5 / name, op, "U.S.")
(p / person, name, n / name)
(p2 / project, mod, i / invest-01)
(s / state-01, ARG0, p / person)
(t / total-01, ARG1, i2 / invest-01)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(14,15,List(2),near,near,false), Span(13,14,List(3),investment,invest-01,false), Span(10,11,List(4),3500,3500,false), Span(5,6,List(5),projects,project,false), Span(4,5,List(6),investment,invest-01,false), Span(3,4,List(9, 8, 7),German,(country :name (name :op "Germany")),false)),Map(2 -> near, 5 -> project, 8 -> name, 7 -> country, 1 -> dollar, 4 -> 3500, 6 -> invest-01, 9 -> "Germany", 0 -> monetary-quantity, 3 -> invest-01),Map(n -> near, d -> dollar, m -> monetary-quantity, p -> project, i2 -> invest-01, i -> invest-01, c -> country, n2 -> name, 3 -> 3500))),[Ljava.lang.String;@44af588b,Annotation([Ljava.lang.String;@3d19d85,[Ljava.lang.String;@2ae62bb6,[Ljava.lang.String;@68ed3f30),Annotation([Ljava.lang.String;@56b859a6,[Ljava.lang.String;@590adb41,[Ledu.cmu.lti.nlp.amr.Dependency;@42aae04d),Annotation([Ljava.lang.String;@43bf5397,[Ljava.lang.String;@575e572f,[Ljava.lang.String;@58015e56),Annotation([Ljava.lang.String;@4d3c6593,[Ljava.lang.String;@7426a448,[Ledu.cmu.lti.nlp.amr.Entity;@516462cc))
AMR:
(c / country, name, n2 / name)
(i / invest-01, ARG1, p / project)
(i / invest-01, ARG2, m / monetary-quantity)
(i2 / invest-01, ARG1, 3 / 3500)
(m / monetary-quantity, unit, d / dollar)
(n / near, op, m / monetary-quantity)
(n2 / name, op, "Germany")
(p / project, mod, c / country)
(p / project, mod, i2 / invest-01)

Decoded in 86,238 microseconds
Sentence: Some German firms such as Volkswagen, Siemens and Daimler-Chrysler have a reputation for high quality and efficiency.

NER Entity: (thing :name (name :op "German"))
NER Entity: (organization :name (name :op "Volkswagen"))
NER Entity: (organization :name (name :op "Siemens"))
NER Entity: (organization :name (name :op "Daimler" :op "-" :op "Chrysler"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 19-20:  efficiency => efficiency
Span 2-3:  firms => firm
Span 1-2:  German => (country :name (name :op "Germany"))
Span 17-18:  quality => quality
Span 3-4:  such => such

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 18-19:  and => and
Oracle Span 9-12:  Daimler - Chrysler => (company :name (name :op "Daimler-Chrysler"))
Oracle Span 19-20:  efficiency => efficiency
Oracle Span 2-3:  firms => firm
Oracle Span 1-2:  German => (country :name (name :op "Germany"))
Oracle Span 16-17:  high => high
Oracle Span 17-18:  quality => quality
Oracle Span 14-15:  reputation => repute-01
Oracle Span 7-8:  Siemens => (company :name (name :op "Siemens"))
Oracle Span 0-1:  Some => some
Oracle Span 5-6:  Volkswagen => (company :name (name :op "Volkswagen"))

Extra span: such => such
Missing span: Volkswagen => (company :name (name :op "Volkswagen"))
Missing span: Siemens => (company :name (name :op "Siemens"))
Missing span: Daimler - Chrysler => (company :name (name :op "Daimler-Chrysler"))
Missing span: and => and
Missing span: Some => some
Missing span: and => and
Missing span: high => high
Missing span: reputation => repute-01
Dependencies:
1	Some	_	DT	DT	_	3	det	_	_
2	German	_	JJ	JJ	_	3	amod	_	_
3	firms	_	NNS	NNS	_	11	nsubj	_	_
4	such	_	JJ	JJ	_	5	mwe	_	_
5	as	_	IN	IN	_	3	prep	_	_
6	Volkswagen	_	NNP	NNP	_	5	pobj	_	_
7	,	_	,	,	_	6	punct	_	_
8	Siemens	_	NNP	NNP	_	6	conj	_	_
9	and	_	CC	CC	_	6	cc	_	_
10	Daimler-Chrysler	_	NNP	NNP	_	6	conj	_	_
11	have	_	VBP	VBP	_	0	root	_	_
12	a	_	DT	DT	_	13	det	_	_
13	reputation	_	NN	NN	_	11	dobj	_	_
14	for	_	IN	IN	_	13	prep	_	_
15	high	_	JJ	JJ	_	16	amod	_	_
16	quality	_	NN	NN	_	14	pobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	efficiency	_	NN	NN	_	16	conj	_	_
19	.	_	.	.	_	11	punct	_	_

Oracle:
(a / and, op, c2 / company)
(a / and, op, c3 / company)
(a / and, op, c4 / company)
(a2 / and, op, e / efficiency)
(a2 / and, op, q / quality)
(c / country, name, n / name)
(c2 / company, name, n2 / name)
(c3 / company, name, n3 / name)
(c4 / company, name, n4 / name)
(f / firm, example, a / and)
(f / firm, mod, c / country)
(f / firm, mod, s / some)
(n / name, op, "Germany")
(n2 / name, op, "Volkswagen")
(n3 / name, op, "Siemens")
(n4 / name, op, "Daimler-Chrysler")
(q / quality, mod, h / high)
(r2 / repute-01, ARG1, f / firm)
(r2 / repute-01, topic, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),efficiency,efficiency,false), Span(17,18,List(1),quality,quality,false), Span(3,4,List(2),such,such,false), Span(2,3,List(3),firms,firm,false), Span(1,2,List(6, 5, 4),German,(country :name (name :op "Germany")),false)),Map(2 -> such, 5 -> name, 1 -> quality, 4 -> country, 6 -> "Germany", 0 -> efficiency, 3 -> firm),Map(n -> name, e -> efficiency, q -> quality, s -> such, c -> country, f -> firm))),[Ljava.lang.String;@3456558,Annotation([Ljava.lang.String;@2dfb885e,[Ljava.lang.String;@6cbe7d4d,[Ljava.lang.String;@1e3e1014),Annotation([Ljava.lang.String;@3679d92e,[Ljava.lang.String;@47b11ec7,[Ledu.cmu.lti.nlp.amr.Dependency;@58fa5769),Annotation([Ljava.lang.String;@36aa52d2,[Ljava.lang.String;@4ee25d80,[Ljava.lang.String;@16a35bd),Annotation([Ljava.lang.String;@ba17be6,[Ljava.lang.String;@6f798482,[Ledu.cmu.lti.nlp.amr.Entity;@332bcab0))
AMR:
(c / country, name, n / name)
(c / country, poss, e / efficiency)
(f / firm, mod, c / country)
(n / name, op, "Germany")
(q / quality, poss, f / firm)
(s / such, mod, f / firm)

Decoded in 68,519 microseconds
Sentence: Wen stated that Chinese enterprises can make progress and learn modern management by cooperating with German partners.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 5-6:  can => possible
Span 13-14:  cooperating => cooperate-01
Span 4-5:  enterprises => enterprise
Span 15-16:  German => (country :name (name :op "Germany"))
Span 9-10:  learn => learn-01
Span 11-12:  management => manage-01
Span 10-11:  modern => modern
Span 16-17:  partners => partner-01
Span 7-8:  progress => progress-01

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 5-6:  can => possible
Oracle Span 3-4:  Chinese => (country :name (name :op "China"))
Oracle Span 13-14:  cooperating => cooperate-01
Oracle Span 4-5:  enterprises => enterprise
Oracle Span 15-16:  German => (country :name (name :op "Germany"))
Oracle Span 9-10:  learn => learn-01
Oracle Span 11-12:  management => manage-01
Oracle Span 10-11:  modern => modern
Oracle Span 16-17:  partners => partner-01
Oracle Span 7-8:  progress => progress-01
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: and => and
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	Chinese	_	JJ	JJ	_	5	amod	_	_
5	enterprises	_	NNS	NNS	_	7	nsubj	_	_
6	can	_	MD	MD	_	7	aux	_	_
7	make	_	VB	VB	_	2	ccomp	_	_
8	progress	_	NN	NN	_	7	dobj	_	_
9	and	_	CC	CC	_	7	cc	_	_
10	learn	_	VB	VB	_	7	conj	_	_
11	modern	_	JJ	JJ	_	12	amod	_	_
12	management	_	NN	NN	_	10	dobj	_	_
13	by	_	IN	IN	_	10	prep	_	_
14	cooperating	_	VBG	VBG	_	13	pcomp	_	_
15	with	_	IN	IN	_	14	prep	_	_
16	German	_	JJ	JJ	_	17	amod	_	_
17	partners	_	NNS	NNS	_	15	pobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, l / learn-01)
(a / and, op, p3 / progress-01)
(c / country, name, n2 / name)
(c2 / cooperate-01, ARG0, e / enterprise)
(c2 / cooperate-01, ARG1, p4 / partner-01)
(c3 / country, name, n3 / name)
(e / enterprise, mod, c / country)
(l / learn-01, ARG0, e / enterprise)
(l / learn-01, ARG1, m / manage-01)
(l / learn-01, manner, c2 / cooperate-01)
(m / manage-01, mod, m2 / modern)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(p / person, name, n / name)
(p2 / possible, domain, a / and)
(p3 / progress-01, ARG1, e / enterprise)
(p4 / partner-01, mod, c3 / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, p2 / possible)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),partners,partner-01,false), Span(15,16,List(3, 2, 1),German,(country :name (name :op "Germany")),false), Span(13,14,List(4),cooperating,cooperate-01,false), Span(11,12,List(5),management,manage-01,false), Span(10,11,List(6),modern,modern,false), Span(9,10,List(7),learn,learn-01,false), Span(7,8,List(8),progress,progress-01,false), Span(5,6,List(9),can,possible,false), Span(4,5,List(10),enterprises,enterprise,false)),Map(2 -> name, 5 -> manage-01, 8 -> progress-01, 7 -> learn-01, 1 -> country, 4 -> cooperate-01, 6 -> modern, 9 -> possible, 0 -> partner-01, 10 -> enterprise, 3 -> "Germany"),Map(e -> enterprise, n -> name, m2 -> modern, p2 -> progress-01, m -> manage-01, p -> partner-01, l -> learn-01, c -> country, p3 -> possible, c2 -> cooperate-01))),[Ljava.lang.String;@633cc6b5,Annotation([Ljava.lang.String;@6342ff7f,[Ljava.lang.String;@403c3a01,[Ljava.lang.String;@2daf06fc),Annotation([Ljava.lang.String;@28237492,[Ljava.lang.String;@5ceecfee,[Ledu.cmu.lti.nlp.amr.Dependency;@7da31a40),Annotation([Ljava.lang.String;@28ee7bee,[Ljava.lang.String;@1b5a1d85,[Ljava.lang.String;@31e130bf),Annotation([Ljava.lang.String;@54755dd9,[Ljava.lang.String;@f1f7db2,[Ledu.cmu.lti.nlp.amr.Entity;@4462efe1))
AMR:
(c / country, name, n / name)
(c2 / cooperate-01, ARG1, p / partner-01)
(l / learn-01, ARG0, e / enterprise)
(l / learn-01, ARG1, m / manage-01)
(l / learn-01, instrument, c2 / cooperate-01)
(m / manage-01, ARG1, m2 / modern)
(n / name, op, "Germany")
(p / partner-01, ARG0, c / country)
(p2 / progress-01, ARG0, e / enterprise)
(p2 / progress-01, ARG1, p3 / possible)

Decoded in 189,683 microseconds
Sentence: Wen stated that Germany is China's closest European partner in technology transfer.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "European"))
Spans:
Span 7-8:  closest => (close :degree most)
Span 9-10:  partner => partner-01
Span 11-12:  technology => technology
Span 12-13:  transfer => transfer-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 5-6:  China => (country :name (name :op "China"))
Oracle Span 7-8:  closest => (close :degree most)
Oracle Span 8-9:  European => (continent :name (name :op "Europe"))
Oracle Span 3-4:  Germany => (country :name (name :op "Germany"))
Oracle Span 9-10:  partner => partner-01
Oracle Span 1-2:  stated => state-01
Oracle Span 11-12:  technology => technology
Oracle Span 12-13:  transfer => transfer-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: China => (country :name (name :op "China"))
Missing span: European => (continent :name (name :op "Europe"))
Missing span: stated => state-01
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	10	mark	_	_
4	Germany	_	NNP	NNP	_	10	nsubj	_	_
5	is	_	VBZ	VBZ	_	10	cop	_	_
6	China	_	NNP	NNP	_	10	poss	_	_
7	's	_	POS	POS	_	6	possessive	_	_
8	closest	_	JJS	JJS	_	10	amod	_	_
9	European	_	JJ	JJ	_	10	amod	_	_
10	partner	_	NN	NN	_	2	ccomp	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	technology	_	NN	NN	_	13	nn	_	_
13	transfer	_	NN	NN	_	11	pobj	_	_
14	.	_	.	.	_	2	punct	_	_

Oracle:
(c / continent, name, n2 / name)
(c2 / close, degree, m / most)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(n / name, op, "Wen")
(n2 / name, op, "Europe")
(n3 / name, op, "China")
(n4 / name, op, "Germany")
(p / person, name, n / name)
(p2 / partner-01, ARG0, c4 / country)
(p2 / partner-01, ARG1, c3 / country)
(p2 / partner-01, location, c / continent)
(p2 / partner-01, mod, c2 / close)
(p2 / partner-01, mod, t / transfer-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, p2 / partner-01)
(t / transfer-01, topic, t2 / technology)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),transfer,transfer-01,false), Span(11,12,List(1),technology,technology,false), Span(9,10,List(2),partner,partner-01,false), Span(7,8,List(4, 3),closest,(close :degree most),false)),Map(2 -> partner-01, 1 -> technology, 4 -> most, 0 -> transfer-01, 3 -> close),Map(t -> transfer-01, m -> most, p -> partner-01, t2 -> technology, c -> close))),[Ljava.lang.String;@7c3e4b1a,Annotation([Ljava.lang.String;@2db4ad1,[Ljava.lang.String;@765d55d5,[Ljava.lang.String;@2513a118),Annotation([Ljava.lang.String;@2bfb583b,[Ljava.lang.String;@73ae0257,[Ledu.cmu.lti.nlp.amr.Dependency;@6fc1020a),Annotation([Ljava.lang.String;@5762658b,[Ljava.lang.String;@2629d5dc,[Ljava.lang.String;@2596d7f4),Annotation([Ljava.lang.String;@42a0501e,[Ljava.lang.String;@6aa3bfc,[Ledu.cmu.lti.nlp.amr.Entity;@6e4599c0))
AMR:
(c / close, degree, m / most)
(p / partner-01, ARG1, t / transfer-01)
(p / partner-01, mod, c / close)
(t / transfer-01, ARG1, t2 / technology)

Decoded in 38,445 microseconds
Sentence: Wen stated that China considers Sino-EU relations a crucial part of China's diplomatic strategy and that China and Europe developed a comprehensive strategic partnership in 2003.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "Sino" :op "-" :op "EU"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Europe"))
Spans:
Span 28-29:  2003 => (date-entity :year 2003)
Span 24-25:  comprehensive => comprehensive
Span 4-5:  considers => consider-01
Span 10-11:  crucial => crucial
Span 22-23:  developed => develop-02
Span 15-16:  diplomatic => diplomacy
Span 26-27:  partnership => partner-01
Span 16-17:  strategy => strategy

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 28-29:  2003 => (date-entity :year 2003)
Oracle Span 17-18:  and => and
Oracle Span 20-21:  and => and
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 24-25:  comprehensive => comprehensive
Oracle Span 4-5:  considers => consider-02
Oracle Span 10-11:  crucial => crucial
Oracle Span 22-23:  developed => develop-02
Oracle Span 15-16:  diplomatic => diplomacy
Oracle Span 7-8:  EU => (organization :name (name :op "EU"))
Oracle Span 21-22:  Europe => (continent :name (name :op "Europe"))
Oracle Span 11-12:  part => part
Oracle Span 26-27:  partnership => partnership
Oracle Span 8-9:  relations => relation
Oracle Span 1-2:  stated => state-01
Oracle Span 16-17:  strategy => strategy
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: partnership => partner-01
Incorrect span: considers => consider-01
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: EU => (organization :name (name :op "EU"))
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: stated => state-01
Missing span: and => and
Missing span: partnership => partnership
Missing span: and => and
Missing span: considers => consider-02
Missing span: part => part
Missing span: relations => relation
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	China	_	NNP	NNP	_	5	nsubj	_	_
5	considers	_	VBZ	VBZ	_	2	ccomp	_	_
6	Sino-EU	_	NNP	NNP	_	7	nn	_	_
7	relations	_	NNS	NNS	_	10	nsubj	_	_
8	a	_	DT	DT	_	10	det	_	_
9	crucial	_	JJ	JJ	_	10	amod	_	_
10	part	_	NN	NN	_	5	xcomp	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	China	_	NNP	NNP	_	15	poss	_	_
13	's	_	POS	POS	_	12	possessive	_	_
14	diplomatic	_	JJ	JJ	_	15	amod	_	_
15	strategy	_	NN	NN	_	11	pobj	_	_
16	and	_	CC	CC	_	5	cc	_	_
17	that	_	IN	IN	_	21	mark	_	_
18	China	_	NNP	NNP	_	21	nsubj	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	Europe	_	NNP	NNP	_	18	conj	_	_
21	developed	_	VBD	VBD	_	5	conj	_	_
22	a	_	DT	DT	_	25	det	_	_
23	comprehensive	_	JJ	JJ	_	25	amod	_	_
24	strategic	_	JJ	JJ	_	25	amod	_	_
25	partnership	_	NN	NN	_	21	dobj	_	_
26	in	_	IN	IN	_	21	prep	_	_
27	2003	_	CD	CD	_	26	pobj	_	_
28	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c5 / consider-02)
(a / and, op, d2 / develop-02)
(a2 / and, op, c2 / country)
(a2 / and, op, c3 / continent)
(c2 / country, name, n2 / name)
(c3 / continent, name, n4 / name)
(c5 / consider-02, ARG0, c2 / country)
(c5 / consider-02, ARG1, r / relation)
(c5 / consider-02, ARG2, p2 / part)
(d2 / develop-02, ARG0, a2 / and)
(d2 / develop-02, ARG1, p3 / partnership)
(d2 / develop-02, time, d3 / date-entity)
(d3 / date-entity, year, 2003)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "EU")
(n4 / name, op, "Europe")
(o / organization, name, n3 / name)
(p / person, name, n / name)
(p2 / part, mod, c / crucial)
(p2 / part, poss, s3 / strategy)
(p3 / partnership, mod, c4 / comprehensive)
(r / relation, mod, c2 / country)
(r / relation, mod, o / organization)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s3 / strategy, mod, d / diplomacy)
(s3 / strategy, poss, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(1, 0),2003,(date-entity :year 2003),false), Span(26,27,List(2),partnership,partner-01,false), Span(24,25,List(3),comprehensive,comprehensive,false), Span(22,23,List(4),developed,develop-02,false), Span(16,17,List(5),strategy,strategy,false), Span(15,16,List(6),diplomatic,diplomacy,false), Span(10,11,List(7),crucial,crucial,false), Span(4,5,List(8),considers,consider-01,false)),Map(2 -> partner-01, 5 -> strategy, 8 -> consider-01, 7 -> crucial, 1 -> 2003, 4 -> develop-02, 6 -> diplomacy, 0 -> date-entity, 3 -> comprehensive),Map(2 -> 2003, d3 -> diplomacy, s -> strategy, d -> date-entity, p -> partner-01, c3 -> consider-01, d2 -> develop-02, c -> comprehensive, c2 -> crucial))),[Ljava.lang.String;@7dffda8b,Annotation([Ljava.lang.String;@3d1f558a,[Ljava.lang.String;@6abdec0e,[Ljava.lang.String;@28f4f300),Annotation([Ljava.lang.String;@2b5c4f17,[Ljava.lang.String;@6ca8fcf3,[Ledu.cmu.lti.nlp.amr.Dependency;@69f0b0f4),Annotation([Ljava.lang.String;@66933239,[Ljava.lang.String;@2f7efd0b,[Ljava.lang.String;@41ad373),Annotation([Ljava.lang.String;@6801b414,[Ljava.lang.String;@177c41d7,[Ledu.cmu.lti.nlp.amr.Entity;@4f327096))
AMR:
(c3 / consider-01, ARG1, s / strategy)
(d / date-entity, year, 2 / 2003)
(d2 / develop-02, ARG1, p / partner-01)
(d2 / develop-02, concession, c3 / consider-01)
(d2 / develop-02, time, d / date-entity)
(p / partner-01, ARG1, c2 / crucial)
(p / partner-01, mod, c / comprehensive)
(s / strategy, mod, d3 / diplomacy)

Decoded in 217,691 microseconds
Sentence: Wen stated that he was optimistic that the EU would lift the arms embargo on China soon and would give China market economy status.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (organization :name (name :op "EU"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 13-14:  embargo => embargo-01
Span 10-11:  lift => lift-01
Span 21-22:  market => market
Span 5-6:  optimistic => optimistic
Span 16-17:  soon => soon
Span 23-24:  status => status

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Oracle Span 17-18:  and => and
Oracle Span 12-13:  arms => arm
Oracle Span 15-16:  China => (country :name (name :op "China"))
Oracle Span 22-23:  economy => economy
Oracle Span 13-14:  embargo => embargo-01
Oracle Span 8-9:  EU => (organization :name (name :op "EU"))
Oracle Span 19-20:  give => give-01
Oracle Span 10-11:  lift => lift-02
Oracle Span 21-22:  market => market-01
Oracle Span 5-6:  optimistic => optimistic
Oracle Span 16-17:  soon => soon
Oracle Span 1-2:  stated => state-01
Oracle Span 23-24:  status => status
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: market => market
Incorrect span: lift => lift-01
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: EU => (organization :name (name :op "EU"))
Missing span: China => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: and => and
Missing span: give => give-01
Missing span: market => market-01
Missing span: economy => economy
Missing span: lift => lift-02
Missing span: arms => arm
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	he	_	PRP	PRP	_	6	nsubj	_	_
5	was	_	VBD	VBD	_	6	cop	_	_
6	optimistic	_	JJ	JJ	_	2	ccomp	_	_
7	that	_	IN	IN	_	11	mark	_	_
8	the	_	DT	DT	_	9	det	_	_
9	EU	_	NNP	NNP	_	11	nsubj	_	_
10	would	_	MD	MD	_	11	aux	_	_
11	lift	_	VB	VB	_	6	ccomp	_	_
12	the	_	DT	DT	_	14	det	_	_
13	arms	_	NNS	NNS	_	14	nn	_	_
14	embargo	_	NN	NN	_	11	dobj	_	_
15	on	_	IN	IN	_	11	prep	_	_
16	China	_	NNP	NNP	_	15	pobj	_	_
17	soon	_	RB	RB	_	11	advmod	_	_
18	and	_	CC	CC	_	2	cc	_	_
19	would	_	MD	MD	_	20	aux	_	_
20	give	_	VB	VB	_	2	conj	_	_
21	China	_	NNP	NNP	_	22	nn	_	_
22	market	_	NN	NN	_	20	iobj	_	_
23	economy	_	NN	NN	_	24	nn	_	_
24	status	_	NN	NN	_	20	dobj	_	_
25	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, g / give-01)
(a / and, op, l / lift-02)
(c / country, name, n3 / name)
(e / embargo-01, ARG1, c / country)
(e / embargo-01, mod, a2 / arm)
(g / give-01, ARG0, o2 / organization)
(g / give-01, ARG1, s3 / status)
(g / give-01, ARG2, c / country)
(l / lift-02, ARG0, o2 / organization)
(l / lift-02, ARG1, e / embargo-01)
(l / lift-02, time, s2 / soon)
(n / name, op, "Wen")
(n2 / name, op, "EU")
(n3 / name, op, "China")
(o / optimistic, domain, p / person)
(o / optimistic, topic, a / and)
(o2 / organization, name, n2 / name)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, o / optimistic)
(s3 / status, mod, e2 / economy)
(s3 / status, mod, m / market-01)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),status,status,false), Span(21,22,List(1),market,market,false), Span(16,17,List(2),soon,soon,false), Span(13,14,List(3),embargo,embargo-01,false), Span(10,11,List(4),lift,lift-01,false), Span(5,6,List(5),optimistic,optimistic,false)),Map(2 -> soon, 5 -> optimistic, 1 -> market, 4 -> lift-01, 0 -> status, 3 -> embargo-01),Map(e -> embargo-01, s2 -> soon, s -> status, m -> market, l -> lift-01, o -> optimistic))),[Ljava.lang.String;@1d61a348,Annotation([Ljava.lang.String;@78a515e4,[Ljava.lang.String;@d2291de,[Ljava.lang.String;@51c8f62c),Annotation([Ljava.lang.String;@41a374be,[Ljava.lang.String;@11f9535b,[Ledu.cmu.lti.nlp.amr.Dependency;@8cc8cdb),Annotation([Ljava.lang.String;@1e236278,[Ljava.lang.String;@44fff386,[Ljava.lang.String;@1fc713c9),Annotation([Ljava.lang.String;@7301eebe,[Ljava.lang.String;@76b47204,[Ledu.cmu.lti.nlp.amr.Entity;@4d6ccc97))
AMR:
(e / embargo-01, ARG1, m / market)
(l / lift-01, ARG1, e / embargo-01)
(l / lift-01, time, s2 / soon)
(o / optimistic, domain, l / lift-01)
(s / status, mod, m / market)

Decoded in 78,117 microseconds
Sentence: Wen stated that the arms embargo is an outdated result of the cold war.

NER Entity: (person :name (name :op "Wen"))
Spans:
Span 12-14:  cold war => (war :name (name :op "War" :op "Cold"))
Span 5-6:  embargo => embargo-01
Span 9-10:  result => result-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  arms => arm
Oracle Span 12-13:  cold => cold
Oracle Span 5-6:  embargo => embargo-01
Oracle Span 8-9:  outdated => outdated
Oracle Span 9-10:  result => result-01
Oracle Span 1-2:  stated => state-01
Oracle Span 13-14:  war => war
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Extra span: cold war => (war :name (name :op "War" :op "Cold"))
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: stated => state-01
Missing span: outdated => outdated
Missing span: arms => arm
Missing span: war => war
Missing span: cold => cold
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	10	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	arms	_	NNS	NNS	_	6	nn	_	_
6	embargo	_	NN	NN	_	10	nsubj	_	_
7	is	_	VBZ	VBZ	_	10	cop	_	_
8	an	_	DT	DT	_	10	det	_	_
9	outdated	_	JJ	JJ	_	10	amod	_	_
10	result	_	NN	NN	_	2	ccomp	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	cold	_	JJ	JJ	_	14	amod	_	_
14	war	_	NN	NN	_	11	pobj	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(e / embargo-01, ARG1, a / arm)
(n / name, op, "Wen")
(p / person, name, n / name)
(r / result-01, ARG1, w / war)
(r / result-01, ARG2, e / embargo-01)
(r / result-01, mod, o / outdated)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, r / result-01)
(w / war, mod, c / cold)

Input(Some(Graph(null,ArrayBuffer(Span(12,14,List(3, 2, 1, 0),cold war,(war :name (name :op "War" :op "Cold")),false), Span(9,10,List(4),result,result-01,false), Span(5,6,List(5),embargo,embargo-01,false)),Map(2 -> "War", 5 -> embargo-01, 1 -> name, 4 -> result-01, 0 -> war, 3 -> "Cold"),Map(e -> embargo-01, n -> name, w -> war, r -> result-01))),[Ljava.lang.String;@6a12c7a8,Annotation([Ljava.lang.String;@161aa04a,[Ljava.lang.String;@436bd4df,[Ljava.lang.String;@6848a051),Annotation([Ljava.lang.String;@149b0577,[Ljava.lang.String;@5740ff5e,[Ledu.cmu.lti.nlp.amr.Dependency;@4a901445),Annotation([Ljava.lang.String;@67f77f6e,[Ljava.lang.String;@2b0b7e5a,[Ljava.lang.String;@7be1ce6a),Annotation([Ljava.lang.String;@3119cf6f,[Ljava.lang.String;@6dc9da2d,[Ledu.cmu.lti.nlp.amr.Entity;@1d408060))
AMR:
(n / name, op, "Cold")
(n / name, op, "War")
(r / result-01, ARG0, e / embargo-01)
(r / result-01, ARG1, w / war)
(w / war, name, n / name)

Decoded in 30,388 microseconds
Sentence: Wen stated that China is deeply concerned with the current situation in Iraq and is sympathetic to the Iraqi people.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (thing :name (name :op "Iraqi"))
NER Entity: (thing :name (name :op "Iraqi"))
Spans:
Span 6-7:  concerned => concern-01
Span 9-10:  current => current
Span 5-6:  deeply => deep
Span 18-19:  Iraqi => (country :name (name :op "Iraq"))
Span 10-11:  situation => situation

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 6-7:  concerned => concern-01
Oracle Span 9-10:  current => current
Oracle Span 5-6:  deeply => deep
Oracle Span 12-13:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 19-20:  people => people
Oracle Span 10-11:  situation => situation
Oracle Span 1-2:  stated => state-01
Oracle Span 15-16:  sympathetic => sympathize-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Extra span: Iraqi => (country :name (name :op "Iraq"))
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: China => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: and => and
Missing span: people => people
Missing span: sympathetic => sympathize-01
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	China	_	NNP	NNP	_	7	nsubjpass	_	_
5	is	_	VBZ	VBZ	_	7	auxpass	_	_
6	deeply	_	RB	RB	_	7	advmod	_	_
7	concerned	_	VBN	VBN	_	2	ccomp	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	current	_	JJ	JJ	_	11	amod	_	_
11	situation	_	NN	NN	_	8	pobj	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	Iraq	_	NNP	NNP	_	12	pobj	_	_
14	and	_	CC	CC	_	2	cc	_	_
15	is	_	VBZ	VBZ	_	16	cop	_	_
16	sympathetic	_	JJ	JJ	_	2	conj	_	_
17	to	_	TO	TO	_	16	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	Iraqi	_	JJ	JJ	_	20	amod	_	_
20	people	_	NNS	NNS	_	17	pobj	_	_
21	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c / concern-01)
(a / and, op, s3 / sympathize-01)
(c / concern-01, ARG0, s2 / situation)
(c / concern-01, ARG1, c2 / country)
(c / concern-01, manner, d / deep)
(c2 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Iraq")
(p / person, name, n / name)
(p2 / people, mod, c4 / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s2 / situation, location, c4 / country)
(s2 / situation, mod, c3 / current)
(s3 / sympathize-01, ARG0, c2 / country)
(s3 / sympathize-01, ARG1, p2 / people)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(2, 1, 0),Iraqi,(country :name (name :op "Iraq")),false), Span(10,11,List(3),situation,situation,false), Span(9,10,List(4),current,current,false), Span(6,7,List(5),concerned,concern-01,false), Span(5,6,List(6),deeply,deep,false)),Map(2 -> "Iraq", 5 -> concern-01, 1 -> name, 4 -> current, 6 -> deep, 0 -> country, 3 -> situation),Map(n -> name, s -> situation, d -> deep, c3 -> concern-01, c -> country, c2 -> current))),[Ljava.lang.String;@68a78f3c,Annotation([Ljava.lang.String;@17ba57f0,[Ljava.lang.String;@3481ff98,[Ljava.lang.String;@2ddb3ae8),Annotation([Ljava.lang.String;@79518e00,[Ljava.lang.String;@3c91530d,[Ledu.cmu.lti.nlp.amr.Dependency;@7d70638),Annotation([Ljava.lang.String;@732f6050,[Ljava.lang.String;@6fbc1bb,[Ljava.lang.String;@30c4e352),Annotation([Ljava.lang.String;@f1dd5b4,[Ljava.lang.String;@73809e7,[Ledu.cmu.lti.nlp.amr.Entity;@5f96f6a2))
AMR:
(c / country, name, n / name)
(c3 / concern-01, ARG0, s / situation)
(c3 / concern-01, manner, d / deep)
(n / name, op, "Iraq")
(s / situation, location, c / country)
(s / situation, time, c2 / current)

Decoded in 69,125 microseconds
Sentence: Wen stated that China and Europe have similar positions on the issue of Iraq's reconstruction.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 11-12:  issue => issue
Span 8-9:  positions => position
Span 15-16:  reconstruction => reconstruct-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 5-6:  Europe => (continent :name (name :op "Europe"))
Oracle Span 6-7:  have => have-03
Oracle Span 13-14:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 11-12:  issue => issue-01
Oracle Span 8-9:  positions => position
Oracle Span 15-16:  reconstruction => reconstruct-01
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: issue => issue
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: Europe => (continent :name (name :op "Europe"))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: stated => state-01
Missing span: have => have-03
Missing span: issue => issue-01
Missing span: and => and
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	China	_	NNP	NNP	_	7	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	Europe	_	NNP	NNP	_	4	conj	_	_
7	have	_	VBP	VBP	_	2	ccomp	_	_
8	similar	_	JJ	JJ	_	9	amod	_	_
9	positions	_	NNS	NNS	_	7	dobj	_	_
10	on	_	IN	IN	_	7	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	issue	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	Iraq	_	NNP	NNP	_	16	poss	_	_
15	's	_	POS	POS	_	14	possessive	_	_
16	reconstruction	_	NN	NN	_	13	pobj	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / continent)
(c / country, name, n2 / name)
(c2 / continent, name, n3 / name)
(c3 / country, name, n4 / name)
(h / have-03, ARG0, a / and)
(h / have-03, ARG1, p2 / position)
(i / issue-01, ARG1, r2 / reconstruct-01)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Europe")
(n4 / name, op, "Iraq")
(p / person, name, n / name)
(r2 / reconstruct-01, ARG1, c3 / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, h / have-03)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),reconstruction,reconstruct-01,false), Span(11,12,List(1),issue,issue,false), Span(8,9,List(2),positions,position,false)),Map(2 -> position, 1 -> issue, 0 -> reconstruct-01),Map(p -> position, i -> issue, r -> reconstruct-01))),[Ljava.lang.String;@48df4071,Annotation([Ljava.lang.String;@290e8cab,[Ljava.lang.String;@6e3ecf5c,[Ljava.lang.String;@67507df),Annotation([Ljava.lang.String;@341b13a8,[Ljava.lang.String;@692dba54,[Ledu.cmu.lti.nlp.amr.Dependency;@71f1cc02),Annotation([Ljava.lang.String;@5f14761c,[Ljava.lang.String;@33feb805,[Ljava.lang.String;@37854b34),Annotation([Ljava.lang.String;@48eb001a,[Ljava.lang.String;@34332b8d,[Ledu.cmu.lti.nlp.amr.Entity;@724b939e))
AMR:
(i / issue, location, r / reconstruct-01)
(p / position, topic, i / issue)

Decoded in 35,909 microseconds
Sentence: Wen stated that the United Nations should play a dominant role in the process of Iraq's reconstruction and that every country should participate.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 21-22:  country => country
Span 20-21:  every => every
Span 23-24:  participate => participate-01
Span 13-14:  process => process
Span 17-18:  reconstruction => reconstruct-01
Span 10-11:  role => role
Span 22-23:  should => recommend-01
Span 6-7:  should => recommend-01
Span 4-6:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 18-19:  and => and
Oracle Span 21-22:  country => country
Oracle Span 9-10:  dominant => dominate-01
Oracle Span 20-21:  every => every
Oracle Span 15-16:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 23-24:  participate => participate-01
Oracle Span 7-8:  play => play-08
Oracle Span 13-14:  process => process
Oracle Span 17-18:  reconstruction => reconstruct-01
Oracle Span 6-7:  should => recommend-01
Oracle Span 22-23:  should => recommend-01
Oracle Span 1-2:  stated => state-01
Oracle Span 4-6:  United Nations => (organization :name (name :op "Nations" :op "United"))
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Extra span: role => role
Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: United Nations => (organization :name (name :op "Nations" :op "United"))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: stated => state-01
Missing span: and => and
Missing span: play => play-08
Missing span: dominant => dominate-01
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	United	_	NNP	NNP	_	6	nn	_	_
6	Nations	_	NNPS	NNPS	_	8	nsubj	_	_
7	should	_	MD	MD	_	8	aux	_	_
8	play	_	VB	VB	_	2	ccomp	_	_
9	a	_	DT	DT	_	11	det	_	_
10	dominant	_	JJ	JJ	_	11	amod	_	_
11	role	_	NN	NN	_	8	dobj	_	_
12	in	_	IN	IN	_	8	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	process	_	NN	NN	_	12	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	Iraq	_	NNP	NNP	_	18	poss	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	reconstruction	_	NN	NN	_	15	pobj	_	_
19	and	_	CC	CC	_	8	cc	_	_
20	that	_	IN	IN	_	24	mark	_	_
21	every	_	DT	DT	_	22	det	_	_
22	country	_	NN	NN	_	24	nsubj	_	_
23	should	_	MD	MD	_	24	aux	_	_
24	participate	_	VB	VB	_	8	conj	_	_
25	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, r / recommend-01)
(a / and, op, r3 / recommend-01)
(c / country, name, n3 / name)
(c2 / country, mod, e / every)
(n / name, op, "Wen")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(n3 / name, op, "Iraq")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(p2 / play-08, ARG0, o / organization)
(p2 / play-08, ARG1, p4 / process)
(p2 / play-08, mod, d / dominate-01)
(p3 / participate-01, ARG0, c2 / country)
(p4 / process, mod, r2 / reconstruct-01)
(r / recommend-01, ARG1, p2 / play-08)
(r2 / reconstruct-01, ARG1, c / country)
(r3 / recommend-01, ARG1, p3 / participate-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),participate,participate-01,false), Span(22,23,List(1),should,recommend-01,false), Span(21,22,List(2),country,country,false), Span(20,21,List(3),every,every,false), Span(17,18,List(4),reconstruction,reconstruct-01,false), Span(13,14,List(5),process,process,false), Span(10,11,List(6),role,role,false), Span(6,7,List(7),should,recommend-01,false), Span(4,6,List(11, 10, 9, 8),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> country, 5 -> process, 8 -> organization, 7 -> recommend-01, 1 -> recommend-01, 11 -> "Nations", 4 -> reconstruct-01, 6 -> role, 9 -> name, 0 -> participate-01, 10 -> "United", 3 -> every),Map(n -> name, e -> every, r3 -> role, p2 -> process, r2 -> reconstruct-01, p -> participate-01, r4 -> recommend-01, r -> recommend-01, c -> country, o -> organization))),[Ljava.lang.String;@6f8aba08,Annotation([Ljava.lang.String;@7ff19c33,[Ljava.lang.String;@52b3bf03,[Ljava.lang.String;@7cca01a8),Annotation([Ljava.lang.String;@462abec3,[Ljava.lang.String;@35c9a231,[Ledu.cmu.lti.nlp.amr.Dependency;@7a4d582c),Annotation([Ljava.lang.String;@5626d18c,[Ljava.lang.String;@45e9b12d,[Ljava.lang.String;@3dc95b8b),Annotation([Ljava.lang.String;@2d55e826,[Ljava.lang.String;@4d1ff6b1,[Ledu.cmu.lti.nlp.amr.Entity;@45f756e6))
AMR:
(c / country, mod, e / every)
(n / name, op, "Nations")
(n / name, op, "United")
(o / organization, name, n / name)
(p / participate-01, ARG0, c / country)
(p / participate-01, ARG1, o / organization)
(p2 / process, purpose, r2 / reconstruct-01)
(r / recommend-01, ARG1, p / participate-01)
(r2 / reconstruct-01, ARG1, o / organization)
(r3 / role, ARG0, o / organization)
(r4 / recommend-01, ARG1, p / participate-01)

Decoded in 499,087 microseconds
Sentence: Wen stated that China is willing to participate in Iraq's reconstruction process.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 7-8:  participate => participate-01
Span 12-13:  process => process
Span 11-12:  reconstruction => reconstruct-01
Span 5-6:  willing => will-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 9-10:  Iraq => (country :name (name :op "Iraq"))
Oracle Span 7-8:  participate => participate-01
Oracle Span 12-13:  process => process
Oracle Span 11-12:  reconstruction => reconstruct-01
Oracle Span 1-2:  stated => state-01
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))
Oracle Span 5-6:  willing => will-02

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: Iraq => (country :name (name :op "Iraq"))
Missing span: stated => state-01
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	China	_	NNP	NNP	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	willing	_	JJ	JJ	_	2	ccomp	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	participate	_	VB	VB	_	6	xcomp	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	Iraq	_	NNP	NNP	_	13	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	reconstruction	_	NN	NN	_	13	nn	_	_
13	process	_	NN	NN	_	9	pobj	_	_
14	.	_	.	.	_	2	punct	_	_

Oracle:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "Iraq")
(p / person, name, n / name)
(p2 / participate-01, ARG0, c / country)
(p2 / participate-01, ARG1, p3 / process)
(p3 / process, mod, r / reconstruct-01)
(r / reconstruct-01, ARG1, c2 / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, w / will-02)
(w / will-02, ARG0, c / country)
(w / will-02, ARG1, p2 / participate-01)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),process,process,false), Span(11,12,List(1),reconstruction,reconstruct-01,false), Span(7,8,List(2),participate,participate-01,false), Span(5,6,List(3),willing,will-02,false)),Map(2 -> participate-01, 1 -> reconstruct-01, 0 -> process, 3 -> will-02),Map(w -> will-02, p2 -> participate-01, p -> process, r -> reconstruct-01))),[Ljava.lang.String;@329548d0,Annotation([Ljava.lang.String;@3003827c,[Ljava.lang.String;@29b40b3,[Ljava.lang.String;@7d247660),Annotation([Ljava.lang.String;@656f62dc,[Ljava.lang.String;@49d30c6f,[Ledu.cmu.lti.nlp.amr.Dependency;@1115433e),Annotation([Ljava.lang.String;@4fdca00a,[Ljava.lang.String;@513b52af,[Ljava.lang.String;@5a8c93),Annotation([Ljava.lang.String;@3bed3315,[Ljava.lang.String;@119b0892,[Ledu.cmu.lti.nlp.amr.Entity;@1a3e8e24))
AMR:
(p / process, mod, r / reconstruct-01)
(p2 / participate-01, ARG1, p / process)
(w / will-02, ARG1, p2 / participate-01)

Decoded in 30,670 microseconds
Sentence: Wen stated that it is easy to win a war but much more difficult to win peace.

NER Entity: (person :name (name :op "Wen"))
Spans:
Span 13-14:  difficult => difficult
Span 5-6:  easy => easy
Span 11-12:  much => much
Span 16-17:  peace => peace

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 10-11:  but => contrast
Oracle Span 13-14:  difficult => difficult
Oracle Span 5-6:  easy => easy
Oracle Span 12-13:  more => more
Oracle Span 11-12:  much => much
Oracle Span 16-17:  peace => peace
Oracle Span 1-2:  stated => state-01
Oracle Span 9-10:  war => war
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))
Oracle Span 7-8:  win => win-01
Oracle Span 15-16:  win => win-01

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: stated => state-01
Missing span: but => contrast
Missing span: win => win-01
Missing span: war => war
Missing span: win => win-01
Missing span: more => more
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	it	_	PRP	PRP	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	easy	_	JJ	JJ	_	2	ccomp	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	win	_	VB	VB	_	6	xcomp	_	_
9	a	_	DT	DT	_	10	det	_	_
10	war	_	NN	NN	_	8	dobj	_	_
11	but	_	CC	CC	_	14	cc	_	_
12	much	_	RB	RB	_	14	advmod	_	_
13	more	_	RBR	RBR	_	14	advmod	_	_
14	difficult	_	JJ	JJ	_	8	acomp	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	win	_	VB	VB	_	14	xcomp	_	_
17	peace	_	NN	NN	_	16	dobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(c / contrast, op, w / win-01)
(c / contrast, op, w2 / win-01)
(d / difficult, degree, m / more)
(m / more, degree, m2 / much)
(n / name, op, "Wen")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / contrast)
(w / win-01, ARG1, p2 / peace)
(w / win-01, manner, d / difficult)
(w2 / win-01, ARG1, w3 / war)
(w2 / win-01, manner, e / easy)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),peace,peace,false), Span(13,14,List(1),difficult,difficult,false), Span(11,12,List(2),much,much,false), Span(5,6,List(3),easy,easy,false)),Map(2 -> much, 1 -> difficult, 0 -> peace, 3 -> easy),Map(e -> easy, m -> much, d -> difficult, p -> peace))),[Ljava.lang.String;@4ed4a7e4,Annotation([Ljava.lang.String;@1c7350b0,[Ljava.lang.String;@55651434,[Ljava.lang.String;@3bc4ef12),Annotation([Ljava.lang.String;@50448409,[Ljava.lang.String;@5634a861,[Ledu.cmu.lti.nlp.amr.Dependency;@2b0dc227),Annotation([Ljava.lang.String;@37ad042b,[Ljava.lang.String;@43bdaa1b,[Ljava.lang.String;@30b975ad),Annotation([Ljava.lang.String;@75e09567,[Ljava.lang.String;@2a334bac,[Ledu.cmu.lti.nlp.amr.Entity;@470d183))
AMR:
(d / difficult, domain, p / peace)
(d / difficult, extent, m / much)
(e / easy, op, d / difficult)

Decoded in 34,504 microseconds
Sentence: Wen stated that he is deeply worried about the increasing tension between Palestine and Israel and that the Chinese government hopes the disputes between the 2 countries can be resolved through political negotiation so that the countries can peacefully share land.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Palestine"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Palestine"))
Spans:
Span 37-38:  can => possible
Span 27-28:  can => possible
Span 36-37:  countries => country
Span 26-27:  countries => country
Span 5-6:  deeply => deep
Span 22-23:  disputes => dispute-01
Span 20-21:  hopes => hope-01
Span 9-10:  increasing => increase-01
Span 14-15:  Israel => (country :name (name :op "Israel"))
Span 40-41:  land => land
Span 32-33:  negotiation => negotiate-01
Span 12-13:  Palestine => (country :name (name :op "Palestine"))
Span 29-30:  resolved => resolve-01
Span 39-40:  share => share-01
Span 10-11:  tension => tension
Span 6-7:  worried => worry-02

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 11-12:  between => between
Oracle Span 27-28:  can => possible
Oracle Span 37-38:  can => possible
Oracle Span 18-19:  Chinese => (name :op "China")
Oracle Span 26-27:  countries => country
Oracle Span 36-37:  countries => country
Oracle Span 5-6:  deeply => deep
Oracle Span 22-23:  disputes => dispute-01
Oracle Span 19-20:  government => (government-organization :ARG0-of govern-01)
Oracle Span 20-21:  hopes => hope-01
Oracle Span 9-10:  increasing => increase-01
Oracle Span 14-15:  Israel => (name :op "Israel")
Oracle Span 40-41:  land => land
Oracle Span 32-33:  negotiation => negotiate-01
Oracle Span 12-13:  Palestine => (country :name (name :op "Palestine"))
Oracle Span 38-39:  peacefully => peace
Oracle Span 31-32:  political => politics
Oracle Span 29-30:  resolved => resolve-01
Oracle Span 39-40:  share => share-01
Oracle Span 1-2:  stated => state-01
Oracle Span 10-11:  tension => tension
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))
Oracle Span 6-7:  worried => worry-02

Incorrect span: Israel => (country :name (name :op "Israel"))
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Israel => (name :op "Israel")
Missing span: Chinese => (name :op "China")
Missing span: stated => state-01
Missing span: and => and
Missing span: between => between
Missing span: peacefully => peace
Missing span: political => politics
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	he	_	PRP	PRP	_	7	nsubj	_	_
5	is	_	VBZ	VBZ	_	7	cop	_	_
6	deeply	_	RB	RB	_	7	advmod	_	_
7	worried	_	JJ	JJ	_	2	ccomp	_	_
8	about	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	increasing	_	VBG	VBG	_	11	amod	_	_
11	tension	_	NN	NN	_	8	pobj	_	_
12	between	_	IN	IN	_	11	prep	_	_
13	Palestine	_	NNP	NNP	_	12	pobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	Israel	_	NNP	NNP	_	13	conj	_	_
16	and	_	CC	CC	_	7	cc	_	_
17	that	_	IN	IN	_	21	mark	_	_
18	the	_	DT	DT	_	20	det	_	_
19	Chinese	_	JJ	JJ	_	20	amod	_	_
20	government	_	NN	NN	_	21	nsubj	_	_
21	hopes	_	VBZ	VBZ	_	7	conj	_	_
22	the	_	DT	DT	_	23	det	_	_
23	disputes	_	NNS	NNS	_	30	nsubjpass	_	_
24	between	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	27	det	_	_
26	2	_	CD	CD	_	27	num	_	_
27	countries	_	NNS	NNS	_	24	pobj	_	_
28	can	_	MD	MD	_	30	aux	_	_
29	be	_	VB	VB	_	30	auxpass	_	_
30	resolved	_	VBN	VBN	_	21	ccomp	_	_
31	through	_	IN	IN	_	30	prep	_	_
32	political	_	JJ	JJ	_	33	amod	_	_
33	negotiation	_	NN	NN	_	31	pobj	_	_
34	so	_	RB	RB	_	40	advmod	_	_
35	that	_	IN	IN	_	40	mark	_	_
36	the	_	DT	DT	_	37	det	_	_
37	countries	_	NNS	NNS	_	40	nsubj	_	_
38	can	_	MD	MD	_	40	aux	_	_
39	peacefully	_	RB	RB	_	40	advmod	_	_
40	share	_	VB	VB	_	30	advcl	_	_
41	land	_	NN	NN	_	40	dobj	_	_
42	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, h / hope-01)
(a / and, op, w / worry-02)
(b / between, op, c / country)
(b / between, op, c2 / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(d2 / dispute-01, ARG0, c / country)
(d2 / dispute-01, ARG1, c2 / country)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(h / hope-01, ARG0, g / government-organization)
(h / hope-01, ARG1, p2 / possible)
(i / increase-01, ARG0, b / between)
(i / increase-01, ARG1, t / tension)
(n / name, op, "Wen")
(n2 / name, op, "Palestine")
(n3 / name, op, "Israel")
(n4 / name, op, "China")
(n5 / negotiate-01, mod, p3 / politics)
(p / person, name, n / name)
(p2 / possible, domain, r / resolve-01)
(p4 / possible, domain, s2 / share-01)
(r / resolve-01, ARG1, d2 / dispute-01)
(r / resolve-01, instrument, n5 / negotiate-01)
(r / resolve-01, purpose, p4 / possible)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s2 / share-01, ARG0, b / between)
(s2 / share-01, ARG1, l / land)
(s2 / share-01, manner, p5 / peace)
(w / worry-02, ARG0, p / person)
(w / worry-02, ARG1, t / tension)
(w / worry-02, manner, d / deep)

Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),land,land,false), Span(39,40,List(1),share,share-01,false), Span(37,38,List(2),can,possible,false), Span(36,37,List(3),countries,country,false), Span(32,33,List(4),negotiation,negotiate-01,false), Span(29,30,List(5),resolved,resolve-01,false), Span(27,28,List(6),can,possible,false), Span(26,27,List(7),countries,country,false), Span(22,23,List(8),disputes,dispute-01,false), Span(20,21,List(9),hopes,hope-01,false), Span(14,15,List(12, 11, 10),Israel,(country :name (name :op "Israel")),false), Span(12,13,List(15, 14, 13),Palestine,(country :name (name :op "Palestine")),false), Span(10,11,List(16),tension,tension,false), Span(9,10,List(17),increasing,increase-01,false), Span(6,7,List(18),worried,worry-02,false), Span(5,6,List(19),deeply,deep,false)),Map(2 -> possible, 5 -> resolve-01, 12 -> "Israel", 15 -> "Palestine", 8 -> dispute-01, 18 -> worry-02, 7 -> country, 17 -> increase-01, 1 -> share-01, 4 -> negotiate-01, 11 -> name, 14 -> name, 6 -> possible, 0 -> land, 9 -> hope-01, 16 -> tension, 19 -> deep, 3 -> country, 10 -> country, 13 -> country),Map(w -> worry-02, n -> negotiate-01, h -> hope-01, t -> tension, p2 -> possible, c4 -> country, s -> share-01, d -> dispute-01, p -> possible, n3 -> name, c3 -> country, d2 -> deep, i -> increase-01, r -> resolve-01, c -> country, l -> land, c2 -> country, n2 -> name))),[Ljava.lang.String;@7f9fc8bd,Annotation([Ljava.lang.String;@ea52184,[Ljava.lang.String;@3e7b65d7,[Ljava.lang.String;@3c854752),Annotation([Ljava.lang.String;@3ddeaa5f,[Ljava.lang.String;@1a500561,[Ledu.cmu.lti.nlp.amr.Dependency;@7f608e21),Annotation([Ljava.lang.String;@6949e948,[Ljava.lang.String;@210d2a6c,[Ljava.lang.String;@3bec5821),Annotation([Ljava.lang.String;@4086d8fb,[Ljava.lang.String;@66236a0a,[Ledu.cmu.lti.nlp.amr.Entity;@2e3572e8))
AMR:
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(d / dispute-01, ARG1, c2 / country)
(h / hope-01, ARG0, c4 / country)
(h / hope-01, ARG1, p2 / possible)
(i / increase-01, ARG1, t / tension)
(n2 / name, op, "Israel")
(n3 / name, op, "Palestine")
(p / possible, domain, s / share-01)
(p2 / possible, domain, r / resolve-01)
(r / resolve-01, ARG0, t / tension)
(r / resolve-01, ARG1, d / dispute-01)
(r / resolve-01, ARG2, n / negotiate-01)
(r / resolve-01, purpose, p / possible)
(s / share-01, ARG0, c / country)
(s / share-01, ARG1, l / land)
(w / worry-02, ARG0, c3 / country)
(w / worry-02, ARG1, i / increase-01)
(w / worry-02, mod, d2 / deep)

Decoded in 722,751 microseconds
Sentence: With regard to the situation in Palestine and Israel Wen stated that relevant UN resolutions must be implemented.

NER Entity: (country :name (name :op "Palestine"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (person :name (name :op "Wen"))
NER Entity: (organization :name (name :op "UN"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Palestine"))
Spans:
Span 17-18:  implemented => implement-01
Span 8-9:  Israel => (country :name (name :op "Israel"))
Span 6-7:  Palestine => (country :name (name :op "Palestine"))
Span 12-13:  relevant => relevant-41
Span 14-15:  resolutions => resolution
Span 4-5:  situation => situation

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 17-18:  implemented => implement-01
Oracle Span 8-9:  Israel => (country :name (name :op "Israel"))
Oracle Span 6-7:  Palestine => (country :name (name :op "Palestine"))
Oracle Span 1-2:  regard => regard-01
Oracle Span 12-13:  relevant => relevance
Oracle Span 14-15:  resolutions => resolution
Oracle Span 4-5:  situation => situation
Oracle Span 10-11:  stated => state-01
Oracle Span 13-14:  UN => (organization :name (name :op "UN"))
Oracle Span 9-10:  Wen => (person :name (name :op "Wen"))

Incorrect span: relevant => relevant-41
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: UN => (organization :name (name :op "UN"))
Missing span: stated => state-01
Missing span: regard => regard-01
Missing span: and => and
Missing span: relevant => relevance
Dependencies:
1	With	_	IN	IN	_	11	prep	_	_
2	regard	_	NN	NN	_	1	pcomp	_	_
3	to	_	TO	TO	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	situation	_	NN	NN	_	3	pobj	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	Palestine	_	NNP	NNP	_	6	pobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	Israel	_	NNP	NNP	_	7	conj	_	_
10	Wen	_	NNP	NNP	_	11	nsubj	_	_
11	stated	_	VBD	VBD	_	0	root	_	_
12	that	_	IN	IN	_	18	mark	_	_
13	relevant	_	JJ	JJ	_	15	amod	_	_
14	UN	_	NNP	NNP	_	15	nn	_	_
15	resolutions	_	NNS	NNS	_	18	nsubjpass	_	_
16	must	_	MD	MD	_	18	aux	_	_
17	be	_	VB	VB	_	18	auxpass	_	_
18	implemented	_	VBN	VBN	_	11	ccomp	_	_
19	.	_	.	.	_	11	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(i / implement-01, ARG1, r / resolution)
(n / name, op, "Wen")
(n2 / name, op, "Palestine")
(n3 / name, op, "Israel")
(n4 / name, op, "UN")
(o2 / organization, name, n4 / name)
(p / person, name, n / name)
(r / resolution, mod, o2 / organization)
(r / resolution, mod, r2 / relevance)
(r3 / regard-01, ARG0, p / person)
(r3 / regard-01, ARG1, s2 / situation)
(s / state-01, ARG0, p / person)
(s / state-01, manner, r3 / regard-01)
(s2 / situation, location, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),implemented,implement-01,false), Span(14,15,List(1),resolutions,resolution,false), Span(12,13,List(2),relevant,relevant-41,false), Span(8,9,List(5, 4, 3),Israel,(country :name (name :op "Israel")),false), Span(6,7,List(8, 7, 6),Palestine,(country :name (name :op "Palestine")),false), Span(4,5,List(9),situation,situation,false)),Map(2 -> relevant-41, 5 -> "Israel", 8 -> "Palestine", 7 -> name, 1 -> resolution, 4 -> name, 6 -> country, 9 -> situation, 0 -> implement-01, 3 -> country),Map(n -> name, s -> situation, r2 -> relevant-41, r -> resolution, i -> implement-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@77c10a5f,Annotation([Ljava.lang.String;@176555c,[Ljava.lang.String;@7c781c42,[Ljava.lang.String;@795f8317),Annotation([Ljava.lang.String;@633fd91,[Ljava.lang.String;@355c94be,[Ledu.cmu.lti.nlp.amr.Dependency;@97a145b),Annotation([Ljava.lang.String;@c386958,[Ljava.lang.String;@157ec23b,[Ljava.lang.String;@44d64d4e),Annotation([Ljava.lang.String;@1dd74143,[Ljava.lang.String;@526a9908,[Ledu.cmu.lti.nlp.amr.Entity;@3166f664))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c2 / country, op, r2 / relevant-41)
(i / implement-01, ARG1, r / resolution)
(n / name, op, "Israel")
(n2 / name, op, "Palestine")
(r2 / relevant-41, ARG1, r / resolution)
(s / situation, location, c / country)
(s / situation, location, c2 / country)

Decoded in 127,964 microseconds
Sentence: Wen stated that the Chinese government supports plans for peace in the Middle East and remains firmly opposed to violent retaliation.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Middle" :op "East"))
Spans:
Span 16-17:  firmly => firm
Span 12-14:  Middle East => (world-region :name (name :op "East" :op "Middle"))
Span 17-18:  opposed => oppose-01
Span 9-10:  peace => peace
Span 7-8:  plans => plan-01
Span 15-16:  remains => remain-01
Span 20-21:  retaliation => retaliate-01
Span 6-7:  supports => support-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 4-5:  Chinese => (country :name (name :op "China"))
Oracle Span 16-17:  firmly => firm
Oracle Span 5-6:  government => (government-organization :ARG0-of govern-01)
Oracle Span 12-14:  Middle East => (world-region :name (name :op "East" :op "Middle"))
Oracle Span 17-18:  opposed => oppose-01
Oracle Span 9-10:  peace => peace
Oracle Span 7-8:  plans => plan-01
Oracle Span 15-16:  remains => remain-01
Oracle Span 20-21:  retaliation => retaliate-01
Oracle Span 1-2:  stated => state-01
Oracle Span 6-7:  supports => support-01
Oracle Span 19-20:  violent => violence
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: and => and
Missing span: violent => violence
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Chinese	_	JJ	JJ	_	6	amod	_	_
6	government	_	NN	NN	_	7	nsubj	_	_
7	supports	_	VBZ	VBZ	_	2	ccomp	_	_
8	plans	_	NNS	NNS	_	7	dobj	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	peace	_	NN	NN	_	9	pobj	_	_
11	in	_	IN	IN	_	7	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	Middle	_	NNP	NNP	_	14	nn	_	_
14	East	_	NNP	NNP	_	11	pobj	_	_
15	and	_	CC	CC	_	7	cc	_	_
16	remains	_	VBZ	VBZ	_	7	conj	_	_
17	firmly	_	RB	RB	_	18	advmod	_	_
18	opposed	_	VBN	VBN	_	16	acomp	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	violent	_	JJ	JJ	_	21	amod	_	_
21	retaliation	_	NN	NN	_	19	pobj	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, r / remain-01)
(a / and, op, s2 / support-01)
(c / country, name, n2 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "Wen")
(n2 / name, op, "China")
(n3 / name, op, "East")
(n3 / name, op, "Middle")
(o / oppose-01, ARG0, g / government-organization)
(o / oppose-01, ARG1, r2 / retaliate-01)
(o / oppose-01, manner, f / firm)
(p / person, name, n / name)
(p2 / plan-01, ARG1, p3 / peace)
(p3 / peace, location, w / world-region)
(r / remain-01, ARG1, g / government-organization)
(r / remain-01, ARG3, o / oppose-01)
(r2 / retaliate-01, mod, v / violence)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s2 / support-01, ARG0, g / government-organization)
(s2 / support-01, ARG1, p2 / plan-01)
(w / world-region, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),retaliation,retaliate-01,false), Span(17,18,List(1),opposed,oppose-01,false), Span(16,17,List(2),firmly,firm,false), Span(15,16,List(3),remains,remain-01,false), Span(12,14,List(7, 6, 5, 4),Middle East,(world-region :name (name :op "East" :op "Middle")),false), Span(9,10,List(8),peace,peace,false), Span(7,8,List(9),plans,plan-01,false), Span(6,7,List(10),supports,support-01,false)),Map(2 -> firm, 5 -> name, 8 -> peace, 7 -> "Middle", 1 -> oppose-01, 4 -> world-region, 6 -> "East", 9 -> plan-01, 0 -> retaliate-01, 10 -> support-01, 3 -> remain-01),Map(n -> name, w -> world-region, p2 -> plan-01, s -> support-01, p -> peace, r2 -> remain-01, r -> retaliate-01, f -> firm, o -> oppose-01))),[Ljava.lang.String;@47ac613b,Annotation([Ljava.lang.String;@60d6fdd4,[Ljava.lang.String;@66f28a1f,[Ljava.lang.String;@60a19573),Annotation([Ljava.lang.String;@44a085e5,[Ljava.lang.String;@134ff8f8,[Ledu.cmu.lti.nlp.amr.Dependency;@619f2afc),Annotation([Ljava.lang.String;@df921b1,[Ljava.lang.String;@4db60246,[Ljava.lang.String;@2152ab30),Annotation([Ljava.lang.String;@3902bd2c,[Ljava.lang.String;@7d32e714,[Ledu.cmu.lti.nlp.amr.Entity;@eb6ec6))
AMR:
(n / name, op, "East")
(n / name, op, "Middle")
(o / oppose-01, ARG1, r / retaliate-01)
(o / oppose-01, manner, f / firm)
(p2 / plan-01, ARG1, p / peace)
(p2 / plan-01, location, w / world-region)
(r2 / remain-01, ARG1, s / support-01)
(r2 / remain-01, ARG2, o / oppose-01)
(s / support-01, ARG1, p2 / plan-01)
(w / world-region, name, n / name)

Decoded in 99,613 microseconds
Sentence: When asked to comment on how to temper China's rapidly growing economy and how to realize balanced growth Wen stated that the Chinese economy is very healthy in general with fast growth, increasing corporate profits, improving agricultural production, expanding foreign trade volume and rapidly growing fiscal revenue and individual incomes.

NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 39-40:  agricultural => agriculture
Span 3-4:  comment => comment-01
Span 42-43:  expanding => expand-01
Span 31-32:  fast => fast
Span 49-50:  fiscal => fiscal
Span 29-30:  general => general
Span 32-33:  growth => grow-01
Span 18-19:  growth => grow-01
Span 38-39:  improving => improve-01
Span 34-35:  increasing => increase-01
Span 52-53:  individual => individual
Span 40-41:  production => produce-01
Span 36-37:  profits => profit-01
Span 47-48:  rapidly => rapid
Span 10-11:  rapidly => rapid
Span 16-17:  realize => realize-02
Span 44-45:  trade => trade-01
Span 26-27:  very => very

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 46-47:  and => and
Oracle Span 51-52:  and => and
Oracle Span 1-2:  asked => ask-02
Oracle Span 17-18:  balanced => balance-01
Oracle Span 8-9:  China => (country :name (name :op "China"))
Oracle Span 3-4:  comment => comment-01
Oracle Span 35-36:  corporate => corporate
Oracle Span 12-13:  economy => economy
Oracle Span 24-25:  economy => economy
Oracle Span 42-43:  expanding => expand-01
Oracle Span 31-32:  fast => fast
Oracle Span 43-44:  foreign => foreign
Oracle Span 29-30:  general => general
Oracle Span 11-12:  growing => grow-01
Oracle Span 48-49:  growing => grow-01
Oracle Span 18-19:  growth => grow-01
Oracle Span 32-33:  growth => grow-01
Oracle Span 27-28:  healthy => healthy
Oracle Span 38-39:  improving => improve-01
Oracle Span 53-54:  incomes => income
Oracle Span 34-35:  increasing => increase-01
Oracle Span 52-53:  individual => individual
Oracle Span 40-41:  production => produce-01
Oracle Span 36-37:  profits => profit-01
Oracle Span 10-11:  rapidly => rapid
Oracle Span 47-48:  rapidly => rapid
Oracle Span 16-17:  realize => realize-02
Oracle Span 50-51:  revenue => revenue
Oracle Span 20-21:  stated => state-01
Oracle Span 7-8:  temper => temper-01
Oracle Span 44-45:  trade => trade-01
Oracle Span 26-27:  very => very
Oracle Span 45-46:  volume => volume
Oracle Span 19-20:  Wen => (person :name (name :op "Wen"))

Extra span: fiscal => fiscal
Extra span: agricultural => agriculture
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: asked => ask-02
Missing span: and => and
Missing span: growing => grow-01
Missing span: balanced => balance-01
Missing span: temper => temper-01
Missing span: economy => economy
Missing span: growing => grow-01
Missing span: and => and
Missing span: and => and
Missing span: incomes => income
Missing span: revenue => revenue
Missing span: volume => volume
Missing span: foreign => foreign
Missing span: corporate => corporate
Missing span: healthy => healthy
Missing span: economy => economy
Dependencies:
1	When	_	WRB	WRB	_	2	advmod	_	_
2	asked	_	VBD	VBD	_	21	advcl	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	comment	_	VB	VB	_	2	xcomp	_	_
5	on	_	RP	RP	_	4	prt	_	_
6	how	_	WRB	WRB	_	8	advmod	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	temper	_	VB	VB	_	4	dep	_	_
9	China	_	NNP	NNP	_	13	poss	_	_
10	's	_	POS	POS	_	9	possessive	_	_
11	rapidly	_	RB	RB	_	12	advmod	_	_
12	growing	_	JJ	JJ	_	13	amod	_	_
13	economy	_	NN	NN	_	8	dobj	_	_
14	and	_	CC	CC	_	8	cc	_	_
15	how	_	WRB	WRB	_	17	advmod	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	realize	_	VB	VB	_	8	conj	_	_
18	balanced	_	JJ	JJ	_	19	amod	_	_
19	growth	_	NN	NN	_	17	dobj	_	_
20	Wen	_	NNP	NNP	_	21	nsubj	_	_
21	stated	_	VBD	VBD	_	0	root	_	_
22	that	_	IN	IN	_	28	mark	_	_
23	the	_	DT	DT	_	25	det	_	_
24	Chinese	_	JJ	JJ	_	25	amod	_	_
25	economy	_	NN	NN	_	28	nsubj	_	_
26	is	_	VBZ	VBZ	_	28	cop	_	_
27	very	_	RB	RB	_	28	advmod	_	_
28	healthy	_	JJ	JJ	_	21	ccomp	_	_
29	in	_	IN	IN	_	28	prep	_	_
30	general	_	JJ	JJ	_	29	pobj	_	_
31	with	_	IN	IN	_	28	prep	_	_
32	fast	_	JJ	JJ	_	33	amod	_	_
33	growth	_	NN	NN	_	31	pobj	_	_
34	,	_	,	,	_	28	punct	_	_
35	increasing	_	VBG	VBG	_	28	ccomp	_	_
36	corporate	_	JJ	JJ	_	37	amod	_	_
37	profits	_	NNS	NNS	_	35	dobj	_	_
38	,	_	,	,	_	35	punct	_	_
39	improving	_	VBG	VBG	_	35	conj	_	_
40	agricultural	_	JJ	JJ	_	41	amod	_	_
41	production	_	NN	NN	_	39	dobj	_	_
42	,	_	,	,	_	35	punct	_	_
43	expanding	_	VBG	VBG	_	35	conj	_	_
44	foreign	_	JJ	JJ	_	46	amod	_	_
45	trade	_	NN	NN	_	46	nn	_	_
46	volume	_	NN	NN	_	43	dobj	_	_
47	and	_	CC	CC	_	35	cc	_	_
48	rapidly	_	RB	RB	_	49	advmod	_	_
49	growing	_	VBG	VBG	_	35	conj	_	_
50	fiscal	_	JJ	JJ	_	51	amod	_	_
51	revenue	_	NN	NN	_	49	dobj	_	_
52	and	_	CC	CC	_	51	cc	_	_
53	individual	_	NN	NN	_	54	nn	_	_
54	incomes	_	NNS	NNS	_	51	conj	_	_
55	.	_	.	.	_	21	punct	_	_

Oracle:
(a / ask-02, ARG1, c / comment-01)
(a / ask-02, ARG2, p / person)
(a2 / and, op, r2 / realize-02)
(a2 / and, op, t / temper-01)
(a5 / and, op, e3 / expand-01)
(a5 / and, op, g4 / grow-01)
(a5 / and, op, g5 / grow-01)
(a5 / and, op, h / healthy)
(a5 / and, op, i / increase-01)
(a5 / and, op, i2 / improve-01)
(a6 / and, op, i3 / income)
(a6 / and, op, r4 / revenue)
(c / comment-01, ARG0, p / person)
(c / comment-01, ARG1, a2 / and)
(c2 / country, name, n2 / name)
(e / economy, mod, g / grow-01)
(e / economy, poss, c2 / country)
(e2 / economy, mod, c2 / country)
(e3 / expand-01, ARG1, v2 / volume)
(g / grow-01, manner, r / rapid)
(g2 / grow-01, mod, b / balance-01)
(g4 / grow-01, ARG1, e2 / economy)
(g4 / grow-01, manner, f / fast)
(g5 / grow-01, ARG1, a6 / and)
(g5 / grow-01, manner, r3 / rapid)
(h / healthy, degree, v / very)
(h / healthy, domain, e2 / economy)
(h / healthy, manner, g3 / general)
(i / increase-01, ARG1, p2 / profit-01)
(i2 / improve-01, ARG1, p3 / produce-01)
(i3 / income, mod, i4 / individual)
(n / name, op, "Wen")
(n2 / name, op, "China")
(p / person, name, n / name)
(p2 / profit-01, mod, c3 / corporate)
(r2 / realize-02, ARG1, g2 / grow-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a5 / and)
(s / state-01, time, a / ask-02)
(t / temper-01, ARG1, e / economy)
(t2 / trade-01, mod, f3 / foreign)
(v2 / volume, mod, t2 / trade-01)

Input(Some(Graph(null,ArrayBuffer(Span(52,53,List(0),individual,individual,false), Span(49,50,List(1),fiscal,fiscal,false), Span(47,48,List(2),rapidly,rapid,false), Span(44,45,List(3),trade,trade-01,false), Span(42,43,List(4),expanding,expand-01,false), Span(40,41,List(5),production,produce-01,false), Span(39,40,List(6),agricultural,agriculture,false), Span(38,39,List(7),improving,improve-01,false), Span(36,37,List(8),profits,profit-01,false), Span(34,35,List(9),increasing,increase-01,false), Span(32,33,List(10),growth,grow-01,false), Span(31,32,List(11),fast,fast,false), Span(29,30,List(12),general,general,false), Span(26,27,List(13),very,very,false), Span(18,19,List(14),growth,grow-01,false), Span(16,17,List(15),realize,realize-02,false), Span(10,11,List(16),rapidly,rapid,false), Span(3,4,List(17),comment,comment-01,false)),Map(2 -> rapid, 5 -> produce-01, 12 -> general, 15 -> realize-02, 8 -> profit-01, 7 -> improve-01, 17 -> comment-01, 1 -> fiscal, 4 -> expand-01, 11 -> fast, 14 -> grow-01, 6 -> agriculture, 0 -> individual, 9 -> increase-01, 16 -> rapid, 3 -> trade-01, 10 -> grow-01, 13 -> very),Map(e -> expand-01, r3 -> rapid, g3 -> grow-01, t -> trade-01, p2 -> profit-01, v -> very, i3 -> increase-01, g2 -> general, r2 -> realize-02, p -> produce-01, g -> grow-01, a -> agriculture, i2 -> improve-01, i -> individual, r -> rapid, c -> comment-01, f2 -> fast, f -> fiscal))),[Ljava.lang.String;@34d45ec0,Annotation([Ljava.lang.String;@18137eab,[Ljava.lang.String;@727320fa,[Ljava.lang.String;@2935fd2c),Annotation([Ljava.lang.String;@3f018494,[Ljava.lang.String;@3ce443f9,[Ledu.cmu.lti.nlp.amr.Dependency;@57fbc06f),Annotation([Ljava.lang.String;@51a18b21,[Ljava.lang.String;@62b790a5,[Ljava.lang.String;@7c52fc81),Annotation([Ljava.lang.String;@7523a3dc,[Ljava.lang.String;@2806d6da,[Ledu.cmu.lti.nlp.amr.Entity;@766a49c7))
AMR:
(c / comment-01, ARG1, r3 / rapid)
(e / expand-01, ARG1, p2 / profit-01)
(g / grow-01, ARG1, g2 / general)
(g / grow-01, manner, f2 / fast)
(g3 / grow-01, ARG1, p / produce-01)
(i2 / improve-01, ARG0, f / fiscal)
(i2 / improve-01, ARG1, p / produce-01)
(i2 / improve-01, ARG2, g / grow-01)
(i2 / improve-01, concession, i3 / increase-01)
(i3 / increase-01, ARG0, v / very)
(i3 / increase-01, ARG1, p2 / profit-01)
(p / produce-01, ARG0, r / rapid)
(p / produce-01, ARG1, a / agriculture)
(r2 / realize-02, ARG1, g3 / grow-01)
(r2 / realize-02, purpose, c / comment-01)
(t / trade-01, ARG0, i / individual)
(t / trade-01, ARG1, p2 / profit-01)

Decoded in 794,586 microseconds
Sentence: In order to restrict the excessive fixed asset construction that caused a rise in capital good prices and strained the supply of coal, electricity, oil and transportation, the Chinese government will increase its macro economic control and employ all necessary administrative methods.

NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 43-44:  administrative => administrate-01
Span 41-42:  all => all
Span 7-8:  asset => asset
Span 14-15:  capital => capital
Span 10-11:  caused => cause-01
Span 8-9:  construction => construct-01
Span 38-39:  control => control-01
Span 37-38:  economic => economy
Span 24-25:  electricity => electricity
Span 5-6:  excessive => excessive
Span 34-35:  increase => increase-01
Span 36-37:  macro => macro
Span 44-45:  methods => method
Span 26-27:  oil => oil
Span 3-4:  restrict => restrict-01
Span 12-13:  rise => rise-01
Span 18-19:  strained => strain-01
Span 20-21:  supply => supply-01
Span 28-29:  transportation => transportation

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 43-44:  administrative => administrate-01
Oracle Span 41-42:  all => all
Oracle Span 17-18:  and => and
Oracle Span 27-28:  and => and
Oracle Span 7-8:  asset => asset
Oracle Span 14-15:  capital => capital
Oracle Span 10-11:  caused => cause-01
Oracle Span 31-32:  Chinese => (country :name (name :op "China"))
Oracle Span 22-23:  coal => coal
Oracle Span 8-9:  construction => construct-01
Oracle Span 38-39:  control => control-01
Oracle Span 37-38:  economic => economy
Oracle Span 24-25:  electricity => electricity
Oracle Span 40-41:  employ => employ-02
Oracle Span 5-6:  excessive => excessive
Oracle Span 6-7:  fixed => fix-03
Oracle Span 15-16:  good => good
Oracle Span 32-33:  government => (government-organization :ARG0-of govern-01)
Oracle Span 34-35:  increase => increase-01
Oracle Span 36-37:  macro => macro
Oracle Span 44-45:  methods => method
Oracle Span 26-27:  oil => oil
Oracle Span 16-17:  prices => price
Oracle Span 3-4:  restrict => restrict-01
Oracle Span 12-13:  rise => rise-01
Oracle Span 18-19:  strained => strain-01
Oracle Span 20-21:  supply => supply-01
Oracle Span 28-29:  transportation => transport-01

Incorrect span: transportation => transportation
Missing span: Chinese => (country :name (name :op "China"))
Missing span: and => and
Missing span: fixed => fix-03
Missing span: prices => price
Missing span: good => good
Missing span: and => and
Missing span: coal => coal
Missing span: employ => employ-02
Missing span: transportation => transport-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	In	_	IN	IN	_	4	mark	_	_
2	order	_	NN	NN	_	4	dep	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	restrict	_	VB	VB	_	35	advcl	_	_
5	the	_	DT	DT	_	9	det	_	_
6	excessive	_	JJ	JJ	_	9	amod	_	_
7	fixed	_	JJ	JJ	_	9	amod	_	_
8	asset	_	NN	NN	_	9	nn	_	_
9	construction	_	NN	NN	_	4	dobj	_	_
10	that	_	WDT	WDT	_	11	nsubj	_	_
11	caused	_	VBD	VBD	_	9	rcmod	_	_
12	a	_	DT	DT	_	13	det	_	_
13	rise	_	NN	NN	_	11	dobj	_	_
14	in	_	IN	IN	_	11	prep	_	_
15	capital	_	JJ	JJ	_	17	amod	_	_
16	good	_	JJ	JJ	_	17	amod	_	_
17	prices	_	NNS	NNS	_	14	pobj	_	_
18	and	_	CC	CC	_	11	cc	_	_
19	strained	_	VBN	VBN	_	11	conj	_	_
20	the	_	DT	DT	_	21	det	_	_
21	supply	_	NN	NN	_	19	dobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	coal	_	NN	NN	_	22	pobj	_	_
24	,	_	,	,	_	23	punct	_	_
25	electricity	_	NN	NN	_	23	conj	_	_
26	,	_	,	,	_	23	punct	_	_
27	oil	_	NN	NN	_	23	conj	_	_
28	and	_	CC	CC	_	23	cc	_	_
29	transportation	_	NN	NN	_	23	conj	_	_
30	,	_	,	,	_	35	punct	_	_
31	the	_	DT	DT	_	33	det	_	_
32	Chinese	_	JJ	JJ	_	33	amod	_	_
33	government	_	NN	NN	_	35	nsubj	_	_
34	will	_	MD	MD	_	35	aux	_	_
35	increase	_	VB	VB	_	0	root	_	_
36	its	_	PRP$	PRP$	_	39	poss	_	_
37	macro	_	JJ	JJ	_	39	amod	_	_
38	economic	_	JJ	JJ	_	39	amod	_	_
39	control	_	NN	NN	_	35	dobj	_	_
40	and	_	CC	CC	_	35	cc	_	_
41	employ	_	VB	VB	_	35	conj	_	_
42	all	_	RB	RB	_	43	advmod	_	_
43	necessary	_	JJ	JJ	_	45	amod	_	_
44	administrative	_	JJ	JJ	_	45	amod	_	_
45	methods	_	NNS	NNS	_	41	dobj	_	_
46	.	_	.	.	_	35	punct	_	_

Oracle:
(a / and, op, e2 / employ-02)
(a / and, op, i / increase-01)
(a / and, purpose, r / restrict-01)
(a6 / and, op, c6 / coal)
(a6 / and, op, e4 / electricity)
(a6 / and, op, o / oil)
(a6 / and, op, t / transport-01)
(c / country, name, n / name)
(c2 / control-01, ARG0, g / government-organization)
(c2 / control-01, ARG2, e / economy)
(c2 / control-01, mod, m / macro)
(c3 / construct-01, ARG1, a4 / asset)
(c3 / construct-01, mod, e3 / excessive)
(c4 / cause-01, ARG0, c3 / construct-01)
(c4 / cause-01, ARG1, r2 / rise-01)
(e2 / employ-02, ARG0, g / government-organization)
(e2 / employ-02, ARG1, m2 / method)
(f / fix-03, ARG1, a4 / asset)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / increase-01, ARG0, g / government-organization)
(i / increase-01, ARG1, c2 / control-01)
(m2 / method, mod, a2 / administrate-01)
(m2 / method, mod, a3 / all)
(n / name, op, "China")
(p / price, mod, c5 / capital)
(p / price, mod, g3 / good)
(r / restrict-01, ARG0, g / government-organization)
(r / restrict-01, ARG1, c3 / construct-01)
(r2 / rise-01, ARG1, p / price)
(s / strain-01, ARG0, c3 / construct-01)
(s / strain-01, ARG1, s2 / supply-01)
(s2 / supply-01, ARG1, a6 / and)

Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),methods,method,false), Span(43,44,List(1),administrative,administrate-01,false), Span(41,42,List(2),all,all,false), Span(38,39,List(3),control,control-01,false), Span(37,38,List(4),economic,economy,false), Span(36,37,List(5),macro,macro,false), Span(34,35,List(6),increase,increase-01,false), Span(28,29,List(7),transportation,transportation,false), Span(26,27,List(8),oil,oil,false), Span(24,25,List(9),electricity,electricity,false), Span(20,21,List(10),supply,supply-01,false), Span(18,19,List(11),strained,strain-01,false), Span(14,15,List(12),capital,capital,false), Span(12,13,List(13),rise,rise-01,false), Span(10,11,List(14),caused,cause-01,false), Span(8,9,List(15),construction,construct-01,false), Span(7,8,List(16),asset,asset,false), Span(5,6,List(17),excessive,excessive,false), Span(3,4,List(18),restrict,restrict-01,false)),Map(2 -> all, 5 -> macro, 12 -> capital, 15 -> construct-01, 8 -> oil, 18 -> restrict-01, 7 -> transportation, 17 -> excessive, 1 -> administrate-01, 4 -> economy, 11 -> strain-01, 14 -> cause-01, 6 -> increase-01, 0 -> method, 9 -> electricity, 16 -> asset, 3 -> control-01, 10 -> supply-01, 13 -> rise-01),Map(e -> economy, s2 -> strain-01, t -> transportation, m2 -> macro, e2 -> electricity, a3 -> asset, c4 -> construct-01, s -> supply-01, m -> method, r2 -> restrict-01, c3 -> cause-01, a -> administrate-01, r -> rise-01, a2 -> all, i -> increase-01, c -> control-01, o -> oil, e3 -> excessive, c2 -> capital))),[Ljava.lang.String;@1db7157f,Annotation([Ljava.lang.String;@75e27856,[Ljava.lang.String;@6bccd036,[Ljava.lang.String;@4f4c88f9),Annotation([Ljava.lang.String;@6a756082,[Ljava.lang.String;@cb39552,[Ledu.cmu.lti.nlp.amr.Dependency;@1f3b992),Annotation([Ljava.lang.String;@2a53f215,[Ljava.lang.String;@6b63e6ad,[Ljava.lang.String;@7beae796),Annotation([Ljava.lang.String;@6749fe50,[Ljava.lang.String;@52bf7bf6,[Ledu.cmu.lti.nlp.amr.Entity;@261db982))
AMR:
(a / administrate-01, ARG1, a2 / all)
(c / control-01, ARG1, m / method)
(c / control-01, manner, e / economy)
(c / control-01, mod, m2 / macro)
(c3 / cause-01, ARG0, o / oil)
(c3 / cause-01, ARG1, r / rise-01)
(c4 / construct-01, ARG1, a3 / asset)
(i / increase-01, ARG0, c2 / capital)
(i / increase-01, ARG1, c / control-01)
(i / increase-01, purpose, r2 / restrict-01)
(m / method, mod, a / administrate-01)
(r / rise-01, ARG1, c4 / construct-01)
(r2 / restrict-01, ARG0, e2 / electricity)
(r2 / restrict-01, ARG1, c4 / construct-01)
(s / supply-01, ARG1, t / transportation)
(s2 / strain-01, ARG0, c4 / construct-01)
(s2 / strain-01, ARG1, s / supply-01)
(s2 / strain-01, time, e3 / excessive)

Decoded in 977,740 microseconds
Sentence: Wen stated that the Chinese government will control the loan and land supply and will advance reform in the structural and systematic causes of current economic problems.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 15-16:  advance => advance-01
Span 22-23:  causes => cause-01
Span 7-8:  control => control-01
Span 24-25:  current => current
Span 25-26:  economic => economy
Span 11-12:  land => land
Span 9-10:  loan => loan
Span 26-27:  problems => problem
Span 16-17:  reform => reform-01
Span 19-20:  structural => structure
Span 12-13:  supply => supply-01
Span 21-22:  systematic => systematic

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 15-16:  advance => advance-01
Oracle Span 10-11:  and => and
Oracle Span 13-14:  and => and
Oracle Span 22-23:  causes => cause-01
Oracle Span 4-5:  Chinese => (country :name (name :op "China"))
Oracle Span 7-8:  control => control-01
Oracle Span 24-25:  current => current
Oracle Span 25-26:  economic => economy
Oracle Span 5-6:  government => (government-organization :ARG0-of govern-01)
Oracle Span 11-12:  land => land
Oracle Span 9-10:  loan => loan-01
Oracle Span 26-27:  problems => problem
Oracle Span 16-17:  reform => reform-01
Oracle Span 1-2:  stated => state-01
Oracle Span 19-20:  structural => structure
Oracle Span 12-13:  supply => supply-01
Oracle Span 21-22:  systematic => systematic
Oracle Span 0-1:  Wen => (person :name (name :op "Wen"))

Incorrect span: loan => loan
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Chinese => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: and => and
Missing span: and => and
Missing span: loan => loan-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Wen	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	8	mark	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Chinese	_	JJ	JJ	_	6	amod	_	_
6	government	_	NN	NN	_	8	nsubj	_	_
7	will	_	MD	MD	_	8	aux	_	_
8	control	_	VB	VB	_	2	ccomp	_	_
9	the	_	DT	DT	_	13	det	_	_
10	loan	_	NN	NN	_	13	nn	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	land	_	NN	NN	_	10	conj	_	_
13	supply	_	NN	NN	_	8	dobj	_	_
14	and	_	CC	CC	_	2	cc	_	_
15	will	_	MD	MD	_	16	aux	_	_
16	advance	_	VB	VB	_	2	conj	_	_
17	reform	_	NN	NN	_	16	dobj	_	_
18	in	_	IN	IN	_	16	prep	_	_
19	the	_	DT	DT	_	23	det	_	_
20	structural	_	JJ	JJ	_	23	amod	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	systematic	_	JJ	JJ	_	20	conj	_	_
23	causes	_	NNS	NNS	_	18	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	current	_	JJ	JJ	_	27	amod	_	_
26	economic	_	JJ	JJ	_	27	amod	_	_
27	problems	_	NNS	NNS	_	24	pobj	_	_
28	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a4 / advance-01)
(a / and, op, c / control-01)
(a2 / and, op, l / loan-01)
(a2 / and, op, s2 / supply-01)
(a4 / advance-01, ARG0, g / government-organization)
(a4 / advance-01, ARG1, r / reform-01)
(c / control-01, ARG0, g / government-organization)
(c / control-01, ARG1, a2 / and)
(c2 / country, name, n2 / name)
(c3 / cause-01, ARG1, p2 / problem)
(c3 / cause-01, mod, s3 / structure)
(c3 / cause-01, mod, s4 / systematic)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(n / name, op, "Wen")
(n2 / name, op, "China")
(p / person, name, n / name)
(p2 / problem, mod, c4 / current)
(p2 / problem, topic, e / economy)
(r / reform-01, ARG1, c3 / cause-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s2 / supply-01, ARG1, l2 / land)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),problems,problem,false), Span(25,26,List(1),economic,economy,false), Span(24,25,List(2),current,current,false), Span(22,23,List(3),causes,cause-01,false), Span(21,22,List(4),systematic,systematic,false), Span(19,20,List(5),structural,structure,false), Span(16,17,List(6),reform,reform-01,false), Span(15,16,List(7),advance,advance-01,false), Span(12,13,List(8),supply,supply-01,false), Span(11,12,List(9),land,land,false), Span(9,10,List(10),loan,loan,false), Span(7,8,List(11),control,control-01,false)),Map(2 -> current, 5 -> structure, 8 -> supply-01, 7 -> advance-01, 1 -> economy, 11 -> control-01, 4 -> systematic, 6 -> reform-01, 9 -> land, 0 -> problem, 10 -> loan, 3 -> cause-01),Map(e -> economy, s2 -> structure, s -> systematic, p -> problem, c3 -> control-01, a -> advance-01, l2 -> loan, r -> reform-01, l -> land, s3 -> supply-01, c -> current, c2 -> cause-01))),[Ljava.lang.String;@ae73c80,Annotation([Ljava.lang.String;@22f4f8f2,[Ljava.lang.String;@bbd4791,[Ljava.lang.String;@40a72ecd),Annotation([Ljava.lang.String;@73971965,[Ljava.lang.String;@76a14c8d,[Ledu.cmu.lti.nlp.amr.Dependency;@17410c07),Annotation([Ljava.lang.String;@6ee99964,[Ljava.lang.String;@257ef9ed,[Ljava.lang.String;@59c70ceb),Annotation([Ljava.lang.String;@46f902e0,[Ljava.lang.String;@64f981e2,[Ledu.cmu.lti.nlp.amr.Entity;@361abd01))
AMR:
(a / advance-01, ARG0, c3 / control-01)
(a / advance-01, ARG1, r / reform-01)
(a / advance-01, ARG3, c2 / cause-01)
(c2 / cause-01, ARG1, p / problem)
(c2 / cause-01, mod, s / systematic)
(c3 / control-01, ARG0, s2 / structure)
(c3 / control-01, ARG1, l2 / loan)
(p / problem, mod, e / economy)
(p / problem, time, c / current)
(s3 / supply-01, ARG1, l / land)
(s3 / supply-01, topic, c3 / control-01)

Decoded in 316,488 microseconds
Sentence: With regard to the issue of social balance Wen stated that China's new leadership has begun to resolve problems of coordination between urban and rural development and between different regions and has focused on balancing economic growth with social progress, domestic construction with external works, and development with respect for nature.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 7-8:  balance => balance-01
Span 35-36:  balancing => balance-01
Span 16-17:  begun => begin-01
Span 43-44:  construction => construct-01
Span 21-22:  coordination => coordinate-01
Span 49-50:  development => develop-02
Span 26-27:  development => develop-02
Span 29-30:  different => differ-02
Span 42-43:  domestic => domestic
Span 36-37:  economic => economy
Span 33-34:  focused => focus-01
Span 37-38:  growth => grow-01
Span 4-5:  issue => issue
Span 53-54:  nature => nature
Span 13-14:  new => new
Span 19-20:  problems => problem
Span 40-41:  progress => progress-01
Span 30-31:  regions => region
Span 18-19:  resolve => resolve-01
Span 51-52:  respect => respect-01
Span 25-26:  rural => rural
Span 23-24:  urban => urban

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 24-25:  and => and
Oracle Span 27-28:  and => and
Oracle Span 31-32:  and => and
Oracle Span 48-49:  and => and
Oracle Span 7-8:  balance => balance-01
Oracle Span 35-36:  balancing => balance-01
Oracle Span 16-17:  begun => begin-01
Oracle Span 22-23:  between => between
Oracle Span 28-29:  between => between
Oracle Span 11-12:  China => (country :name (name :op "China"))
Oracle Span 43-44:  construction => construct-01
Oracle Span 21-22:  coordination => coordinate-01
Oracle Span 26-27:  development => develop-02
Oracle Span 49-50:  development => develop-02
Oracle Span 29-30:  different => differ-02
Oracle Span 42-43:  domestic => domestic
Oracle Span 36-37:  economic => economy
Oracle Span 45-46:  external => external
Oracle Span 33-34:  focused => focus-01
Oracle Span 37-38:  growth => grow-01
Oracle Span 4-5:  issue => issue-01
Oracle Span 14-15:  leadership => lead-01
Oracle Span 53-54:  nature => nature
Oracle Span 13-14:  new => new
Oracle Span 19-20:  problems => problem
Oracle Span 40-41:  progress => progress-01
Oracle Span 1-2:  regard => regard-01
Oracle Span 30-31:  regions => region
Oracle Span 18-19:  resolve => resolve-01
Oracle Span 51-52:  respect => respect-01
Oracle Span 6-7:  social => society
Oracle Span 39-40:  social => society
Oracle Span 9-10:  stated => state-01
Oracle Span 8-9:  Wen => (person :name (name :op "Wen"))
Oracle Span 46-47:  works => work-01

Extra span: rural => rural
Extra span: urban => urban
Incorrect span: issue => issue
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: China => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: regard => regard-01
Missing span: issue => issue-01
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: works => work-01
Missing span: external => external
Missing span: between => between
Missing span: between => between
Missing span: social => society
Missing span: social => society
Missing span: leadership => lead-01
Dependencies:
1	With	_	IN	IN	_	10	prep	_	_
2	regard	_	NN	NN	_	1	pcomp	_	_
3	to	_	TO	TO	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	issue	_	NN	NN	_	3	pobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	social	_	JJ	JJ	_	8	amod	_	_
8	balance	_	NN	NN	_	6	pobj	_	_
9	Wen	_	NNP	NNP	_	10	nsubj	_	_
10	stated	_	VBD	VBD	_	0	root	_	_
11	that	_	IN	IN	_	17	mark	_	_
12	China	_	NNP	NNP	_	15	poss	_	_
13	's	_	POS	POS	_	12	possessive	_	_
14	new	_	JJ	JJ	_	15	amod	_	_
15	leadership	_	NN	NN	_	17	nsubj	_	_
16	has	_	VBZ	VBZ	_	17	aux	_	_
17	begun	_	VBN	VBN	_	10	ccomp	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	resolve	_	VB	VB	_	17	xcomp	_	_
20	problems	_	NNS	NNS	_	19	dobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	coordination	_	NN	NN	_	21	pobj	_	_
23	between	_	IN	IN	_	19	prep	_	_
24	urban	_	JJ	JJ	_	27	amod	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	rural	_	JJ	JJ	_	24	conj	_	_
27	development	_	NN	NN	_	23	pobj	_	_
28	and	_	CC	CC	_	23	cc	_	_
29	between	_	IN	IN	_	23	conj	_	_
30	different	_	JJ	JJ	_	31	amod	_	_
31	regions	_	NNS	NNS	_	29	pobj	_	_
32	and	_	CC	CC	_	10	cc	_	_
33	has	_	VBZ	VBZ	_	34	aux	_	_
34	focused	_	VBN	VBN	_	10	conj	_	_
35	on	_	IN	IN	_	34	prep	_	_
36	balancing	_	VBG	VBG	_	35	pcomp	_	_
37	economic	_	JJ	JJ	_	38	amod	_	_
38	growth	_	NN	NN	_	36	dobj	_	_
39	with	_	IN	IN	_	38	prep	_	_
40	social	_	JJ	JJ	_	41	amod	_	_
41	progress	_	NN	NN	_	39	pobj	_	_
42	,	_	,	,	_	38	punct	_	_
43	domestic	_	JJ	JJ	_	44	amod	_	_
44	construction	_	NN	NN	_	38	conj	_	_
45	with	_	IN	IN	_	44	prep	_	_
46	external	_	JJ	JJ	_	47	amod	_	_
47	works	_	NNS	NNS	_	45	pobj	_	_
48	,	_	,	,	_	38	punct	_	_
49	and	_	CC	CC	_	38	cc	_	_
50	development	_	NN	NN	_	38	conj	_	_
51	with	_	IN	IN	_	50	prep	_	_
52	respect	_	NN	NN	_	51	pobj	_	_
53	for	_	IN	IN	_	36	prep	_	_
54	nature	_	NN	NN	_	53	pobj	_	_
55	.	_	.	.	_	10	punct	_	_

Oracle:
(a / and, op, b2 / begin-01)
(a / and, op, f / focus-01)
(a4 / and, op, a6 / and)
(a4 / and, op, a7 / and)
(a6 / and, op, c5 / construct-01)
(a6 / and, op, w / work-01)
(a7 / and, op, d3 / develop-02)
(a7 / and, op, r3 / respect-01)
(b / balance-01, mod, s3 / society)
(b2 / begin-01, ARG0, l / lead-01)
(b2 / begin-01, ARG1, r / resolve-01)
(b3 / balance-01, ARG1, a4 / and)
(b5 / between, op, d / develop-02)
(b5 / between, op, r2 / region)
(c / country, name, n3 / name)
(c2 / coordinate-01, ARG1, b5 / between)
(c5 / construct-01, mod, d2 / domestic)
(d / develop-02, mod, b4 / between)
(d4 / differ-02, ARG1, r2 / region)
(f / focus-01, ARG0, l / lead-01)
(f / focus-01, ARG1, b3 / balance-01)
(g / grow-01, ARG1, e / economy)
(i / issue-01, ARG1, b / balance-01)
(l / lead-01, ARG1, c / country)
(l / lead-01, mod, n2 / new)
(n / name, op, "Wen")
(n3 / name, op, "China")
(p / person, name, n / name)
(p2 / problem, mod, c2 / coordinate-01)
(p3 / progress-01, ARG1, s2 / society)
(r / resolve-01, ARG0, l / lead-01)
(r / resolve-01, ARG1, p2 / problem)
(r3 / respect-01, ARG1, n4 / nature)
(r4 / regard-01, ARG0, p / person)
(r4 / regard-01, ARG1, i / issue-01)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s / state-01, manner, r4 / regard-01)
(w / work-01, mod, e2 / external)

Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(0),nature,nature,false), Span(51,52,List(1),respect,respect-01,false), Span(49,50,List(2),development,develop-02,false), Span(43,44,List(3),construction,construct-01,false), Span(42,43,List(4),domestic,domestic,false), Span(40,41,List(5),progress,progress-01,false), Span(37,38,List(6),growth,grow-01,false), Span(36,37,List(7),economic,economy,false), Span(35,36,List(8),balancing,balance-01,false), Span(33,34,List(9),focused,focus-01,false), Span(30,31,List(10),regions,region,false), Span(29,30,List(11),different,differ-02,false), Span(26,27,List(12),development,develop-02,false), Span(25,26,List(13),rural,rural,false), Span(23,24,List(14),urban,urban,false), Span(21,22,List(15),coordination,coordinate-01,false), Span(19,20,List(16),problems,problem,false), Span(18,19,List(17),resolve,resolve-01,false), Span(16,17,List(18),begun,begin-01,false), Span(13,14,List(19),new,new,false), Span(7,8,List(20),balance,balance-01,false), Span(4,5,List(21),issue,issue,false)),Map(2 -> develop-02, 5 -> progress-01, 12 -> develop-02, 15 -> coordinate-01, 8 -> balance-01, 21 -> issue, 18 -> begin-01, 7 -> economy, 17 -> resolve-01, 1 -> respect-01, 4 -> domestic, 11 -> differ-02, 14 -> urban, 20 -> balance-01, 6 -> grow-01, 0 -> nature, 9 -> focus-01, 16 -> problem, 19 -> new, 3 -> construct-01, 10 -> region, 13 -> rural),Map(e -> economy, b3 -> balance-01, n -> nature, r3 -> rural, b -> balance-01, b2 -> begin-01, d3 -> differ-02, p2 -> problem, d -> develop-02, p -> progress-01, g -> grow-01, r2 -> region, d2 -> domestic, i -> issue, r4 -> resolve-01, r -> respect-01, c -> construct-01, u -> urban, f -> focus-01, d4 -> develop-02, n2 -> new, c2 -> coordinate-01))),[Ljava.lang.String;@575b5f7d,Annotation([Ljava.lang.String;@59bbb974,[Ljava.lang.String;@7165d530,[Ljava.lang.String;@12f49ca8),Annotation([Ljava.lang.String;@1fd9893c,[Ljava.lang.String;@1b2df3aa,[Ledu.cmu.lti.nlp.amr.Dependency;@44be69aa),Annotation([Ljava.lang.String;@7219ac49,[Ljava.lang.String;@21da4b5f,[Ljava.lang.String;@551e4c6d),Annotation([Ljava.lang.String;@625a9c5d,[Ljava.lang.String;@5d1e0fbb,[Ledu.cmu.lti.nlp.amr.Entity;@2eed37f4))
AMR:
(b / balance-01, ARG1, g / grow-01)
(b / balance-01, ARG2, n / nature)
(b2 / begin-01, ARG1, r4 / resolve-01)
(b3 / balance-01, ARG1, b2 / begin-01)
(c / construct-01, ARG1, e / economy)
(c / construct-01, mod, d2 / domestic)
(c2 / coordinate-01, ARG1, n2 / new)
(d / develop-02, ARG1, r / respect-01)
(d3 / differ-02, ARG1, r2 / region)
(d4 / develop-02, ARG1, r3 / rural)
(d4 / develop-02, degree, u / urban)
(f / focus-01, ARG1, b2 / begin-01)
(f / focus-01, ARG2, b / balance-01)
(g / grow-01, ARG1, p / progress-01)
(g / grow-01, mod, e / economy)
(i / issue, topic, b3 / balance-01)
(p / progress-01, ARG1, d3 / differ-02)
(p2 / problem, accompanier, c2 / coordinate-01)
(p2 / problem, time, d4 / develop-02)
(r / respect-01, ARG1, n / nature)
(r4 / resolve-01, ARG1, p2 / problem)

Decoded in 737,855 microseconds
Sentence: When asked to comment on German Federal Chancellor Gerhard Schroeder's promise to support sale of nuclear fuel from Hanau to China Wen stated that cooperation between China and Germany in this field is exclusively for peaceful utilization of nuclear energy with equality and mutual benefits.

NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Gerhard" :op "Schroeder"))
NER Entity: (country :name (name :op "Hanau"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Hanau"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 45-46:  benefits => benefit-01
Span 7-8:  Chancellor => (have-org-role-91 :ARG2 chancellor)
Span 3-4:  comment => comment-01
Span 25-26:  cooperation => cooperate-01
Span 40-41:  energy => energy
Span 42-43:  equality => equality
Span 34-35:  exclusively => exclusive
Span 32-33:  field => field
Span 17-18:  fuel => fuel
Span 8-10:  Gerhard Schroeder => (person :name (name :op "Schroeder" :op "Gerhard"))
Span 5-6:  German => (country :name (name :op "Germany"))
Span 19-20:  Hanau => (city :name (name :op "Hanau"))
Span 44-45:  mutual => mutual
Span 39-40:  nuclear => nucleus
Span 16-17:  nuclear => nucleus
Span 36-37:  peaceful => peaceful
Span 11-12:  promise => promise-01
Span 13-14:  support => support-01
Span 31-32:  this => this

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 28-29:  and => and
Oracle Span 1-2:  asked => ask-02
Oracle Span 45-46:  benefits => benefit-01
Oracle Span 7-8:  Chancellor => (have-org-role-91 :ARG2 chancellor)
Oracle Span 21-22:  China => (country :name (name :op "China"))
Oracle Span 3-4:  comment => comment-01
Oracle Span 25-26:  cooperation => cooperate-01
Oracle Span 40-41:  energy => energy
Oracle Span 42-43:  equality => equality
Oracle Span 34-35:  exclusively => exclusive
Oracle Span 6-7:  Federal => federal
Oracle Span 32-33:  field => field
Oracle Span 17-18:  fuel => fuel
Oracle Span 8-10:  Gerhard Schroeder => (person :name (name :op "Schroeder" :op "Gerhard"))
Oracle Span 29-30:  Germany => (country :name (name :op "Germany"))
Oracle Span 19-20:  Hanau => (city :name (name :op "Hanau"))
Oracle Span 44-45:  mutual => mutual
Oracle Span 16-17:  nuclear => nucleus
Oracle Span 39-40:  nuclear => nucleus
Oracle Span 36-37:  peaceful => peace
Oracle Span 11-12:  promise => promise-01
Oracle Span 23-24:  stated => state-01
Oracle Span 13-14:  support => support-01
Oracle Span 31-32:  this => this
Oracle Span 37-38:  utilization => utilize-01
Oracle Span 22-23:  Wen => (person :name (name :op "Wen"))

Incorrect span: peaceful => peaceful
Extra span: German => (country :name (name :op "Germany"))
Missing span: Wen => (person :name (name :op "Wen"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: China => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: asked => ask-02
Missing span: Federal => federal
Missing span: and => and
Missing span: utilization => utilize-01
Missing span: peaceful => peace
Dependencies:
1	When	_	WRB	WRB	_	2	advmod	_	_
2	asked	_	VBD	VBD	_	24	advcl	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	comment	_	VB	VB	_	2	xcomp	_	_
5	on	_	IN	IN	_	4	prep	_	_
6	German	_	NNP	NNP	_	10	nn	_	_
7	Federal	_	NNP	NNP	_	10	nn	_	_
8	Chancellor	_	NNP	NNP	_	10	nn	_	_
9	Gerhard	_	NNP	NNP	_	10	nn	_	_
10	Schroeder	_	NNP	NNP	_	12	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	promise	_	NN	NN	_	5	pobj	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	support	_	VB	VB	_	12	vmod	_	_
15	sale	_	NN	NN	_	14	dobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	nuclear	_	JJ	JJ	_	18	amod	_	_
18	fuel	_	NN	NN	_	16	pobj	_	_
19	from	_	IN	IN	_	14	prep	_	_
20	Hanau	_	NNP	NNP	_	19	pobj	_	_
21	to	_	TO	TO	_	14	prep	_	_
22	China	_	NNP	NNP	_	23	nn	_	_
23	Wen	_	NNP	NNP	_	21	pobj	_	_
24	stated	_	VBD	VBD	_	0	root	_	_
25	that	_	IN	IN	_	34	mark	_	_
26	cooperation	_	NN	NN	_	34	nsubj	_	_
27	between	_	IN	IN	_	26	prep	_	_
28	China	_	NNP	NNP	_	27	pobj	_	_
29	and	_	CC	CC	_	28	cc	_	_
30	Germany	_	NNP	NNP	_	28	conj	_	_
31	in	_	IN	IN	_	26	prep	_	_
32	this	_	DT	DT	_	33	det	_	_
33	field	_	NN	NN	_	31	pobj	_	_
34	is	_	VBZ	VBZ	_	24	ccomp	_	_
35	exclusively	_	RB	RB	_	34	advmod	_	_
36	for	_	IN	IN	_	34	prep	_	_
37	peaceful	_	JJ	JJ	_	38	amod	_	_
38	utilization	_	NN	NN	_	36	pobj	_	_
39	of	_	IN	IN	_	38	prep	_	_
40	nuclear	_	JJ	JJ	_	41	amod	_	_
41	energy	_	NN	NN	_	39	pobj	_	_
42	with	_	IN	IN	_	41	prep	_	_
43	equality	_	NN	NN	_	46	nn	_	_
44	and	_	CC	CC	_	43	cc	_	_
45	mutual	_	JJ	JJ	_	43	conj	_	_
46	benefits	_	NNS	NNS	_	42	pobj	_	_
47	.	_	.	.	_	24	punct	_	_

Oracle:
(a / ask-02, ARG1, c / comment-01)
(a / ask-02, ARG2, p / person)
(a2 / and, op, b / benefit-01)
(a2 / and, op, e3 / equality)
(b / benefit-01, mod, m / mutual)
(c / comment-01, ARG0, p / person)
(c / comment-01, ARG1, p2 / promise-01)
(c2 / country, name, n3 / name)
(c3 / chancellor, mod, f / federal)
(c4 / city, name, n5 / name)
(c5 / country, name, n6 / name)
(c6 / cooperate-01, ARG0, c5 / country)
(c6 / cooperate-01, ARG1, c2 / country)
(c6 / cooperate-01, purpose, u / utilize-01)
(c6 / cooperate-01, topic, f3 / field)
(e2 / energy, mod, n7 / nucleus)
(f2 / fuel, mod, n4 / nucleus)
(f3 / field, mod, t / this)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, c3 / chancellor)
(n / name, op, "Wen")
(n2 / name, op, "Gerhard")
(n2 / name, op, "Schroeder")
(n3 / name, op, "Germany")
(n5 / name, op, "Hanau")
(n6 / name, op, "China")
(p / person, name, n / name)
(p2 / promise-01, ARG0, p4 / person)
(p2 / promise-01, ARG2, s2 / support-01)
(p4 / person, name, n2 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c6 / cooperate-01)
(s / state-01, time, a / ask-02)
(s2 / support-01, ARG0, p4 / person)
(u / utilize-01, ARG1, e2 / energy)
(u / utilize-01, manner, e / exclusive)
(u / utilize-01, mod, p3 / peace)
(u / utilize-01, prep-with, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),benefits,benefit-01,false), Span(44,45,List(1),mutual,mutual,false), Span(42,43,List(2),equality,equality,false), Span(40,41,List(3),energy,energy,false), Span(39,40,List(4),nuclear,nucleus,false), Span(36,37,List(5),peaceful,peaceful,false), Span(34,35,List(6),exclusively,exclusive,false), Span(32,33,List(7),field,field,false), Span(31,32,List(8),this,this,false), Span(25,26,List(9),cooperation,cooperate-01,false), Span(19,20,List(12, 11, 10),Hanau,(city :name (name :op "Hanau")),false), Span(17,18,List(13),fuel,fuel,false), Span(16,17,List(14),nuclear,nucleus,false), Span(13,14,List(15),support,support-01,false), Span(11,12,List(16),promise,promise-01,false), Span(8,10,List(20, 19, 18, 17),Gerhard Schroeder,(person :name (name :op "Schroeder" :op "Gerhard")),false), Span(7,8,List(22, 21),Chancellor,(have-org-role-91 :ARG2 chancellor),false), Span(5,6,List(25, 24, 23),German,(country :name (name :op "Germany")),false), Span(3,4,List(26),comment,comment-01,false)),Map(2 -> equality, 5 -> peaceful, 12 -> "Hanau", 8 -> this, 15 -> support-01, 21 -> have-org-role-91, 18 -> name, 24 -> name, 7 -> field, 1 -> mutual, 17 -> person, 23 -> country, 26 -> comment-01, 4 -> nucleus, 11 -> name, 14 -> nucleus, 20 -> "Gerhard", 6 -> exclusive, 9 -> cooperate-01, 0 -> benefit-01, 22 -> chancellor, 16 -> promise-01, 19 -> "Schroeder", 10 -> city, 3 -> energy, 25 -> "Germany", 13 -> fuel),Map(e -> equality, n -> nucleus, h -> have-org-role-91, b -> benefit-01, t -> this, p2 -> promise-01, e2 -> energy, c4 -> country, n4 -> name, s -> support-01, m -> mutual, p -> peaceful, c3 -> chancellor, n3 -> nucleus, c -> cooperate-01, f2 -> fuel, f -> field, p3 -> person, e3 -> exclusive, c2 -> city, n2 -> name, c5 -> comment-01, n5 -> name))),[Ljava.lang.String;@9b76b60,Annotation([Ljava.lang.String;@3fb9a67f,[Ljava.lang.String;@127705e4,[Ljava.lang.String;@5562c2c9),Annotation([Ljava.lang.String;@673c4f6e,[Ljava.lang.String;@15c487a8,[Ledu.cmu.lti.nlp.amr.Dependency;@3f36e8d1),Annotation([Ljava.lang.String;@7c011174,[Ljava.lang.String;@794366a5,[Ljava.lang.String;@480b57e2),Annotation([Ljava.lang.String;@40f35e52,[Ljava.lang.String;@340d6d89,[Ledu.cmu.lti.nlp.amr.Entity;@561953e3))
AMR:
(b / benefit-01, ARG0, e3 / exclusive)
(b / benefit-01, ARG1, f / field)
(b / benefit-01, mod, m / mutual)
(b / benefit-01, purpose, p / peaceful)
(c / cooperate-01, ARG0, c4 / country)
(c / cooperate-01, ARG1, e / equality)
(c / cooperate-01, ARG2, f / field)
(c2 / city, name, n2 / name)
(c4 / country, name, n5 / name)
(c5 / comment-01, ARG1, p2 / promise-01)
(e2 / energy, mod, n / nucleus)
(f / field, mod, t / this)
(f2 / fuel, location, c2 / city)
(f2 / fuel, mod, n / nucleus)
(f2 / fuel, mod, n3 / nucleus)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, c3 / chancellor)
(n2 / name, op, "Hanau")
(n4 / name, op, "Gerhard")
(n4 / name, op, "Schroeder")
(n5 / name, op, "Germany")
(p2 / promise-01, ARG1, s / support-01)
(p3 / person, name, n4 / name)
(s / support-01, ARG0, p3 / person)
(s / support-01, ARG1, f2 / fuel)

Decoded in 924,697 microseconds
Sentence: 2004-09-22

mkDayMonthYear(2004-09-22,22,09,2004)
mkDayMonthYear(2004-09-22,22,09,2004)
Spans:
Span 0-1:  2004-09-22 => (date-entity :day 22 :month 9 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2004-09-22 => (date-entity :day 22 :month 9 :year 2004)

Dependencies:
1	2004-09-22	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 22)
(d / date-entity, month, 9)
(d / date-entity, year, 2004)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-09-22,(date-entity :day 22 :month 9 :year 2004),false)),Map(2 -> 9, 1 -> 22, 0 -> date-entity, 3 -> 2004),Map(2 -> 22, d -> date-entity, 22 -> 2004, 9 -> 9))),[Ljava.lang.String;@443faa85,Annotation([Ljava.lang.String;@1ee47d9e,[Ljava.lang.String;@41da3aee,[Ljava.lang.String;@5dc0ff7d),Annotation([Ljava.lang.String;@64920dc2,[Ljava.lang.String;@59a79443,[Ledu.cmu.lti.nlp.amr.Dependency;@493ac8d3),Annotation([Ljava.lang.String;@13dbed9e,[Ljava.lang.String;@67531e3a,[Ljava.lang.String;@2b38b1f),Annotation([Ljava.lang.String;@1d50a7ca,[Ljava.lang.String;@51ab1ee3,[Ledu.cmu.lti.nlp.amr.Entity;@2e766822))
AMR:
(d / date-entity, day, 2 / 22)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 22 / 2004)

Decoded in 8,384 microseconds
Sentence: China (CN); Kyrgyzstan (KG)

NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "CN"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 4-5:  ; => and
Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  ; => and
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))

Missing span: China => (country :name (name :op "China"))
Dependencies:
1	China	_	NNP	NNP	_	3	nn	_	_
2	(	_	(	(	_	3	punct	_	_
3	CN	_	NN	NN	_	0	root	_	_
4	)	_	)	)	_	3	punct	_	_
5	;	_	:	:	_	3	punct	_	_
6	Kyrgyzstan	_	NNP	NNP	_	3	dep	_	_
7	(	_	(	(	_	8	punct	_	_
8	KG	_	NNP	NNP	_	6	appos	_	_
9	)	_	)	)	_	8	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(2, 1, 0),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(4,5,List(3),;,and,false)),Map(2 -> "Kyrgyzstan", 1 -> name, 0 -> country, 3 -> and),Map(n -> name, a -> and, c -> country))),[Ljava.lang.String;@3003e580,Annotation([Ljava.lang.String;@28757abd,[Ljava.lang.String;@21a02556,[Ljava.lang.String;@3c8a7e38),Annotation([Ljava.lang.String;@138aa3cc,[Ljava.lang.String;@10a98392,[Ledu.cmu.lti.nlp.amr.Dependency;@30839e44),Annotation([Ljava.lang.String;@5f174dd2,[Ljava.lang.String;@1945113f,[Ljava.lang.String;@45aca496),Annotation([Ljava.lang.String;@697173d9,[Ljava.lang.String;@ceddaf8,[Ledu.cmu.lti.nlp.amr.Entity;@3d90eeb3))
AMR:
(a / and, op, c / country)
(c / country, name, n / name)
(n / name, op, "Kyrgyzstan")

Decoded in 15,731 microseconds
Sentence: International; Government; crime; dissent; terrorism

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  crime => crime
Span 6-7:  dissent => dissent-01
Span 8-9:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 4-5:  crime => crime
Oracle Span 6-7:  dissent => dissent-01
Oracle Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 8-9:  terrorism => terrorism

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	Government	_	NNP	NNP	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	crime	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	3	punct	_	_
7	dissent	_	NN	NN	_	3	dep	_	_
8	;	_	:	:	_	7	punct	_	_
9	terrorism	_	NN	NN	_	7	dep	_	_

Oracle:
(a / and, op, c / crime)
(a / and, op, d / dissent-01)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, t / terrorism)
(g2 / govern-01, ARG0, g / government-organization)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),terrorism,terrorism,false), Span(7,8,List(1),;,and,false), Span(6,7,List(2),dissent,dissent-01,false), Span(5,6,List(3),;,and,false), Span(4,5,List(4),crime,crime,false), Span(3,4,List(5),;,and,false), Span(1,2,List(6),;,and,false)),Map(2 -> dissent-01, 5 -> and, 1 -> and, 4 -> crime, 6 -> and, 0 -> terrorism, 3 -> and),Map(t -> terrorism, a3 -> and, d -> dissent-01, a -> and, a2 -> and, c -> crime, a4 -> and))),[Ljava.lang.String;@1db87583,Annotation([Ljava.lang.String;@7fb53256,[Ljava.lang.String;@1d6d1d42,[Ljava.lang.String;@27329d2a),Annotation([Ljava.lang.String;@7978e022,[Ljava.lang.String;@2f894ad9,[Ledu.cmu.lti.nlp.amr.Dependency;@5afbd567),Annotation([Ljava.lang.String;@6993c8df,[Ljava.lang.String;@57545c3f,[Ljava.lang.String;@326e0b8e),Annotation([Ljava.lang.String;@36baa049,[Ljava.lang.String;@41184371,[Ledu.cmu.lti.nlp.amr.Entity;@34585ac9))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, c / crime)
(a4 / and, op, d / dissent-01)
(a4 / and, op, t / terrorism)

Decoded in 30,674 microseconds
Sentence: China and Kyrgyzstan pledge to make joint efforts to crack down on terrorism and other threats to regional and global security.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 9-10:  crack => crack-06
Span 7-8:  efforts => effort
Span 19-20:  global => globe
Span 6-7:  joint => joint
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 14-15:  other => other
Span 3-4:  pledge => pledge-01
Span 17-18:  regional => region
Span 12-13:  terrorism => terrorism

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 13-14:  and => and
Oracle Span 18-19:  and => and
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 9-10:  crack => crack-06
Oracle Span 19-20:  global => globe
Oracle Span 6-7:  joint => joint
Oracle Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 14-15:  other => other
Oracle Span 3-4:  pledge => pledge-01
Oracle Span 17-18:  regional => region
Oracle Span 20-21:  security => security
Oracle Span 12-13:  terrorism => terrorism
Oracle Span 15-16:  threats => (thing :ARG1-of threaten-01)

Extra span: efforts => effort
Missing span: China => (country :name (name :op "China"))
Missing span: and => and
Missing span: and => and
Missing span: security => security
Missing span: and => and
Missing span: threats => (thing :ARG1-of threaten-01)
Dependencies:
1	China	_	NNP	NNP	_	4	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Kyrgyzstan	_	NNP	NNP	_	1	conj	_	_
4	pledge	_	VBZ	VBZ	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	make	_	VB	VB	_	4	xcomp	_	_
7	joint	_	JJ	JJ	_	8	amod	_	_
8	efforts	_	NNS	NNS	_	6	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	crack	_	VB	VB	_	6	vmod	_	_
11	down	_	RP	RP	_	10	prt	_	_
12	on	_	IN	IN	_	10	prep	_	_
13	terrorism	_	NN	NN	_	16	nn	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	other	_	JJ	JJ	_	13	conj	_	_
16	threats	_	NNS	NNS	_	12	pobj	_	_
17	to	_	TO	TO	_	10	prep	_	_
18	regional	_	JJ	JJ	_	21	amod	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	global	_	JJ	JJ	_	18	conj	_	_
21	security	_	NN	NN	_	17	pobj	_	_
22	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a2 / and, op, t2 / terrorism)
(a2 / and, op, t3 / thing)
(a4 / and, op, s2 / security)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / crack-06, ARG1, a2 / and)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(p / pledge-01, ARG0, a / and)
(s2 / security, mod, g / globe)
(t3 / thing, mod, o / other)
(t4 / threaten-01, ARG1, t3 / thing)
(t4 / threaten-01, ARG2, a4 / and)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),global,globe,false), Span(17,18,List(1),regional,region,false), Span(14,15,List(2),other,other,false), Span(12,13,List(3),terrorism,terrorism,false), Span(9,10,List(4),crack,crack-06,false), Span(7,8,List(5),efforts,effort,false), Span(6,7,List(6),joint,joint,false), Span(3,4,List(7),pledge,pledge-01,false), Span(2,3,List(10, 9, 8),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false)),Map(2 -> other, 5 -> effort, 8 -> country, 7 -> pledge-01, 1 -> region, 4 -> crack-06, 6 -> joint, 9 -> name, 0 -> globe, 10 -> "Kyrgyzstan", 3 -> terrorism),Map(n -> name, e -> effort, t -> terrorism, j -> joint, p -> pledge-01, g -> globe, r -> region, c -> crack-06, o -> other, c2 -> country))),[Ljava.lang.String;@76a805b7,Annotation([Ljava.lang.String;@15f35bc3,[Ljava.lang.String;@167381c7,[Ljava.lang.String;@608b1fd2),Annotation([Ljava.lang.String;@56382bc9,[Ljava.lang.String;@591a4f8e,[Ledu.cmu.lti.nlp.amr.Dependency;@53ed80d3),Annotation([Ljava.lang.String;@6ba060f3,[Ljava.lang.String;@7c51782d,[Ljava.lang.String;@77bc2e16),Annotation([Ljava.lang.String;@48e8c32a,[Ljava.lang.String;@20a7953c,[Ledu.cmu.lti.nlp.amr.Entity;@57c00115))
AMR:
(c / crack-06, ARG0, c2 / country)
(c / crack-06, ARG1, t / terrorism)
(c2 / country, name, n / name)
(e / effort, mod, j / joint)
(e / effort, purpose, c / crack-06)
(g / globe, op, p / pledge-01)
(n / name, op, "Kyrgyzstan")
(p / pledge-01, ARG0, o / other)
(p / pledge-01, ARG1, e / effort)
(r / region, poss, c2 / country)

Decoded in 198,960 microseconds
Sentence: China and Kyrgyzstan agreed in a joint communique that terrorism, separatism and extremism still pose major threats to regional security and stability.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 13-14:  extremism => extremism
Span 6-7:  joint => joint
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 16-17:  major => major
Span 15-16:  pose => pose-02
Span 19-20:  regional => region
Span 22-23:  stability => stability
Span 14-15:  still => still
Span 9-10:  terrorism => terrorism

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 3-4:  agreed => agree-01
Oracle Span 1-2:  and => and
Oracle Span 12-13:  and => and
Oracle Span 21-22:  and => and
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 7-8:  communique => communique
Oracle Span 13-14:  extremism => extremism
Oracle Span 6-7:  joint => joint
Oracle Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 16-17:  major => major
Oracle Span 19-20:  regional => region
Oracle Span 20-21:  security => security
Oracle Span 11-12:  separatism => separatism
Oracle Span 22-23:  stability => stability
Oracle Span 14-15:  still => still
Oracle Span 9-10:  terrorism => terrorism
Oracle Span 17-18:  threats => threaten-01

Extra span: pose => pose-02
Missing span: China => (country :name (name :op "China"))
Missing span: agreed => agree-01
Missing span: communique => communique
Missing span: and => and
Missing span: separatism => separatism
Missing span: and => and
Missing span: security => security
Missing span: and => and
Missing span: threats => threaten-01
Dependencies:
1	China	_	NNP	NNP	_	4	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Kyrgyzstan	_	NNP	NNP	_	1	conj	_	_
4	agreed	_	VBD	VBD	_	0	root	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	a	_	DT	DT	_	8	det	_	_
7	joint	_	JJ	JJ	_	8	amod	_	_
8	communique	_	NN	NN	_	5	pobj	_	_
9	that	_	IN	IN	_	16	mark	_	_
10	terrorism	_	NN	NN	_	16	nsubj	_	_
11	,	_	,	,	_	10	punct	_	_
12	separatism	_	NN	NN	_	10	conj	_	_
13	and	_	CC	CC	_	10	cc	_	_
14	extremism	_	NN	NN	_	10	conj	_	_
15	still	_	RB	RB	_	16	advmod	_	_
16	pose	_	VB	VB	_	4	ccomp	_	_
17	major	_	JJ	JJ	_	18	amod	_	_
18	threats	_	NNS	NNS	_	16	dobj	_	_
19	to	_	TO	TO	_	16	prep	_	_
20	regional	_	JJ	JJ	_	21	amod	_	_
21	security	_	NN	NN	_	19	pobj	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	stability	_	NN	NN	_	21	conj	_	_
24	.	_	.	.	_	4	punct	_	_

Oracle:
(a / agree-01, ARG0, a2 / and)
(a / agree-01, ARG1, t / threaten-01)
(a / agree-01, instrument, c3 / communique)
(a2 / and, op, c / country)
(a2 / and, op, c2 / country)
(a3 / and, op, e / extremism)
(a3 / and, op, s / separatism)
(a3 / and, op, t2 / terrorism)
(a4 / and, op, s3 / security)
(a4 / and, op, s4 / stability)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / communique, mod, j / joint)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(s3 / security, mod, r / region)
(s4 / stability, mod, r / region)
(t / threaten-01, ARG0, a3 / and)
(t / threaten-01, ARG2, a4 / and)
(t / threaten-01, degree, m / major)
(t / threaten-01, time, s2 / still)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),stability,stability,false), Span(19,20,List(1),regional,region,false), Span(16,17,List(2),major,major,false), Span(15,16,List(3),pose,pose-02,false), Span(14,15,List(4),still,still,false), Span(13,14,List(5),extremism,extremism,false), Span(9,10,List(6),terrorism,terrorism,false), Span(6,7,List(7),joint,joint,false), Span(2,3,List(10, 9, 8),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false)),Map(2 -> major, 5 -> extremism, 8 -> country, 7 -> joint, 1 -> region, 4 -> still, 6 -> terrorism, 9 -> name, 0 -> stability, 10 -> "Kyrgyzstan", 3 -> pose-02),Map(n -> name, e -> extremism, t -> terrorism, s2 -> still, j -> joint, s -> stability, m -> major, p -> pose-02, r -> region, c -> country))),[Ljava.lang.String;@411a5965,Annotation([Ljava.lang.String;@4fe533ff,[Ljava.lang.String;@5377414a,[Ljava.lang.String;@4e83a98),Annotation([Ljava.lang.String;@17aa8a11,[Ljava.lang.String;@71b639d0,[Ledu.cmu.lti.nlp.amr.Dependency;@18a25bbd),Annotation([Ljava.lang.String;@5d5b9ecb,[Ljava.lang.String;@1ee27d73,[Ljava.lang.String;@5e5aafc6),Annotation([Ljava.lang.String;@542f6803,[Ljava.lang.String;@5583098b,[Ledu.cmu.lti.nlp.amr.Entity;@5807efad))
AMR:
(c / country, name, n / name)
(c / country, op, p / pose-02)
(j / joint, op, p / pose-02)
(m / major, mod, s2 / still)
(n / name, op, "Kyrgyzstan")
(p / pose-02, ARG0, e / extremism)
(p / pose-02, ARG1, t / terrorism)
(p / pose-02, ARG2, s / stability)
(p / pose-02, mod, s2 / still)
(r / region, poss, c / country)

Decoded in 345,357 microseconds
Sentence: The communique was signed by visiting Chinese Premier Wen Jiabao and his Kyrgyz counterpart Nikolai Tanayev on 040922.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen" :op "Jiabao"))
NER Entity: (thing :name (name :op "Kyrgyz"))
NER Entity: (person :name (name :op "Nikolai" :op "Tanayev"))
mkDayMonthYear(040922,22,09,2004)
mkDayMonthYear(040922,22,09,04)
mkDayMonthYear(040922,22,09,2004)
mkDayMonthYear(040922,22,09,04)
Spans:
Span 17-18:  040922 => (date-entity :day 22 :month 9 :year 04)
Span 14-16:  Nikolai Tanayev => (person :name (name :op "Nikolai" :op "Tanayev"))
Span 7-8:  Premier => (have-org-role-91 :ARG2 premier)
Span 5-6:  visiting => visit-01
Span 8-10:  Wen Jiabao => (person :name (name :op "Wen" :op "Jiabao"))

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 17-18:  040922 => (date-entity :day 22 :month 9 :year 2004)
Oracle Span 10-11:  and => and
Oracle Span 6-7:  Chinese => (have-org-role-91 :ARG1 (country :name (name :op "China")))
Oracle Span 1-2:  communique => communique
Oracle Span 13-14:  counterpart => country
Oracle Span 12-13:  Kyrgyz => (name :op "Kyrgyzstan")
Oracle Span 14-16:  Nikolai Tanayev => (person :name (name :op "Tanayev" :op "Nikolai"))
Oracle Span 7-8:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 3-4:  signed => sign-01
Oracle Span 5-6:  visiting => visit-01
Oracle Span 8-10:  Wen Jiabao => (person :name (name :op "Jiabao" :op "Wen"))

Incorrect span: 040922 => (date-entity :day 22 :month 9 :year 04)
Incorrect span: Nikolai Tanayev => (person :name (name :op "Nikolai" :op "Tanayev"))
Incorrect span: Wen Jiabao => (person :name (name :op "Wen" :op "Jiabao"))
Missing span: Wen Jiabao => (person :name (name :op "Jiabao" :op "Wen"))
Missing span: Nikolai Tanayev => (person :name (name :op "Tanayev" :op "Nikolai"))
Missing span: Chinese => (have-org-role-91 :ARG1 (country :name (name :op "China")))
Missing span: Kyrgyz => (name :op "Kyrgyzstan")
Missing span: 040922 => (date-entity :day 22 :month 9 :year 2004)
Missing span: signed => sign-01
Missing span: communique => communique
Missing span: and => and
Missing span: counterpart => country
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	communique	_	NN	NN	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	signed	_	VBN	VBN	_	0	root	_	_
5	by	_	IN	IN	_	4	prep	_	_
6	visiting	_	VBG	VBG	_	5	pcomp	_	_
7	Chinese	_	NNP	NNP	_	10	nn	_	_
8	Premier	_	NNP	NNP	_	10	nn	_	_
9	Wen	_	NNP	NNP	_	10	nn	_	_
10	Jiabao	_	NNP	NNP	_	6	dobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	his	_	PRP$	PRP$	_	16	poss	_	_
13	Kyrgyz	_	NNP	NNP	_	16	nn	_	_
14	counterpart	_	NN	NN	_	16	nn	_	_
15	Nikolai	_	NNP	NNP	_	16	nn	_	_
16	Tanayev	_	NNP	NNP	_	10	conj	_	_
17	on	_	IN	IN	_	6	prep	_	_
18	040922	_	CD	CD	_	17	pobj	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, p / person)
(a / and, op, p2 / person)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(d / date-entity, day, 22)
(d / date-entity, month, 9)
(d / date-entity, year, 2004)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG1, c3 / country)
(h2 / have-org-role-91, ARG2, p4 / premier)
(n / name, op, "Jiabao")
(n / name, op, "Wen")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Tanayev")
(n3 / name, op, "China")
(n4 / name, op, "Kyrgyzstan")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(s / sign-01, ARG0, a / and)
(s / sign-01, ARG1, c / communique)
(s / sign-01, time, d / date-entity)
(v / visit-01, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(3, 2, 1, 0),040922,(date-entity :day 22 :month 9 :year 04),false), Span(14,16,List(7, 6, 5, 4),Nikolai Tanayev,(person :name (name :op "Nikolai" :op "Tanayev")),false), Span(8,10,List(11, 10, 9, 8),Wen Jiabao,(person :name (name :op "Wen" :op "Jiabao")),false), Span(7,8,List(13, 12),Premier,(have-org-role-91 :ARG2 premier),false), Span(5,6,List(14),visiting,visit-01,false)),Map(2 -> 9, 5 -> name, 12 -> have-org-role-91, 8 -> person, 7 -> "Tanayev", 1 -> 22, 4 -> person, 11 -> "Jiabao", 14 -> visit-01, 6 -> "Nikolai", 0 -> date-entity, 9 -> name, 3 -> 04, 10 -> "Wen", 13 -> premier),Map(n -> name, h -> have-org-role-91, 2 -> 22, p2 -> person, v -> visit-01, d -> date-entity, p -> person, 0 -> 04, 9 -> 9, p3 -> premier, n2 -> name))),[Ljava.lang.String;@53a84ff4,Annotation([Ljava.lang.String;@7ce85af2,[Ljava.lang.String;@316acbb5,[Ljava.lang.String;@56f730b2),Annotation([Ljava.lang.String;@47311277,[Ljava.lang.String;@7930ffa9,[Ledu.cmu.lti.nlp.amr.Dependency;@1e60b459),Annotation([Ljava.lang.String;@717d7587,[Ljava.lang.String;@3e906375,[Ljava.lang.String;@40230eb9),Annotation([Ljava.lang.String;@5b7aa898,[Ljava.lang.String;@41b13f3d,[Ledu.cmu.lti.nlp.amr.Entity;@7c0777b5))
AMR:
(d / date-entity, day, 2 / 22)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 0 / 04)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, p3 / premier)
(n / name, op, "Nikolai")
(n / name, op, "Tanayev")
(n2 / name, op, "Jiabao")
(n2 / name, op, "Wen")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, p2 / person)
(v / visit-01, time, d / date-entity)

Decoded in 188,032 microseconds
Sentence: The communique said China and Kyrgyzstan will strengthen coordination and cooperation among the relevant authorities in accordance with the Shanghai Convention on Combating Terrorism, separatism and extremism and the China-Kyrgyzstan Agreement on cooperation in combating terrorism, separatism and extremism.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Convention"))
NER Entity: (organization :name (name :op "Combating" :op "Terrorism"))
NER Entity: (organization :name (name :op "China" :op "-" :op "Kyrgyzstan" :op "Agreement"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 33-34:  Agreement => agreement
Span 14-15:  authorities => authority
Span 30-32:  China - => (organization :name (name :op "China" :op "-" :op "Kyrgyzstan" :op "Agreement"))
Span 37-38:  combating => combat-01
Span 22-24:  Combating Terrorism => (organization :name (name :op "Combating" :op "Terrorism"))
Span 35-36:  cooperation => cooperate-01
Span 10-11:  cooperation => cooperate-01
Span 8-9:  coordination => coordinate-01
Span 42-43:  extremism => extremism
Span 27-28:  extremism => extremism
Span 32-33:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 13-14:  relevant => relevant-41
Span 2-3:  said => say-01
Span 19-21:  Shanghai Convention => (organization :name (name :op "Shanghai" :op "Convention"))
Span 7-8:  strengthen => strengthen-01
Span 38-39:  terrorism => terrorism

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 9-10:  and => and
Oracle Span 28-29:  and => and
Oracle Span 41-42:  and => and
Oracle Span 14-15:  authorities => authority
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 30-34:  China - Kyrgyzstan Agreement => (treaty :name (name :op "Agreement" :op "China-Kyrgyzstan"))
Oracle Span 37-38:  combating => combat-01
Oracle Span 1-2:  communique => communique
Oracle Span 10-11:  cooperation => cooperate-01
Oracle Span 35-36:  cooperation => cooperate-01
Oracle Span 8-9:  coordination => coordinate-01
Oracle Span 42-43:  extremism => extremism
Oracle Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 13-14:  relevant => relevance
Oracle Span 2-3:  said => say-01
Oracle Span 40-41:  separatism => separatism
Oracle Span 19-28:  Shanghai Convention on Combating Terrorism , separatism and extremism => (treaty :name (name :op "Extremism" :op "and" :op "Separatism" :op "Terrorism," :op "Combating" :op "on" :op "Convention" :op "Shanghai"))
Oracle Span 7-8:  strengthen => strengthen-01
Oracle Span 38-39:  terrorism => terrorism

Extra span: Agreement => agreement
Extra span: Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Extra span: China - => (organization :name (name :op "China" :op "-" :op "Kyrgyzstan" :op "Agreement"))
Extra span: extremism => extremism
Extra span: Combating Terrorism => (organization :name (name :op "Combating" :op "Terrorism"))
Extra span: Shanghai Convention => (organization :name (name :op "Shanghai" :op "Convention"))
Incorrect span: relevant => relevant-41
Missing span: China => (country :name (name :op "China"))
Missing span: Shanghai Convention on Combating Terrorism , separatism and extremism => (treaty :name (name :op "Extremism" :op "and" :op "Separatism" :op "Terrorism," :op "Combating" :op "on" :op "Convention" :op "Shanghai"))
Missing span: China - Kyrgyzstan Agreement => (treaty :name (name :op "Agreement" :op "China-Kyrgyzstan"))
Missing span: and => and
Missing span: and => and
Missing span: separatism => separatism
Missing span: and => and
Missing span: and => and
Missing span: communique => communique
Missing span: relevant => relevance
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	communique	_	NN	NN	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	China	_	NNP	NNP	_	8	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	Kyrgyzstan	_	NNP	NNP	_	4	conj	_	_
7	will	_	MD	MD	_	8	aux	_	_
8	strengthen	_	VB	VB	_	3	ccomp	_	_
9	coordination	_	NN	NN	_	8	dobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	cooperation	_	NN	NN	_	9	conj	_	_
12	among	_	IN	IN	_	9	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	relevant	_	JJ	JJ	_	15	amod	_	_
15	authorities	_	NNS	NNS	_	12	pobj	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	accordance	_	NN	NN	_	16	pobj	_	_
18	with	_	IN	IN	_	8	prep	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Shanghai	_	NNP	NNP	_	21	nn	_	_
21	Convention	_	NNP	NNP	_	18	pobj	_	_
22	on	_	IN	IN	_	21	prep	_	_
23	Combating	_	NNP	NNP	_	24	nn	_	_
24	Terrorism	_	NNP	NNP	_	22	pobj	_	_
25	,	_	,	,	_	24	punct	_	_
26	separatism	_	NN	NN	_	24	conj	_	_
27	and	_	CC	CC	_	26	cc	_	_
28	extremism	_	NN	NN	_	26	conj	_	_
29	and	_	CC	CC	_	24	cc	_	_
30	the	_	DT	DT	_	32	det	_	_
31	China-Kyrgyzstan	_	JJ	JJ	_	32	amod	_	_
32	Agreement	_	NN	NN	_	24	conj	_	_
33	on	_	IN	IN	_	8	prep	_	_
34	cooperation	_	NN	NN	_	33	pobj	_	_
35	in	_	IN	IN	_	8	prep	_	_
36	combating	_	VBG	VBG	_	35	pcomp	_	_
37	terrorism	_	NN	NN	_	36	dobj	_	_
38	,	_	,	,	_	37	punct	_	_
39	separatism	_	NN	NN	_	37	conj	_	_
40	and	_	CC	CC	_	37	cc	_	_
41	extremism	_	NN	NN	_	37	conj	_	_
42	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a2 / and, op, c4 / coordinate-01)
(a2 / and, op, c5 / cooperate-01)
(a3 / authority, mod, r / relevance)
(a4 / and, op, t / treaty)
(a4 / and, op, t2 / treaty)
(a5 / and, op, e / extremism)
(a5 / and, op, s4 / separatism)
(a5 / and, op, t3 / terrorism)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / coordinate-01, ARG0, a3 / authority)
(c5 / cooperate-01, ARG0, a3 / authority)
(c6 / cooperate-01, ARG0, a / and)
(c6 / cooperate-01, ARG2, c7 / combat-01)
(c7 / combat-01, ARG1, a5 / and)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Combating")
(n3 / name, op, "Convention")
(n3 / name, op, "Extremism")
(n3 / name, op, "Separatism")
(n3 / name, op, "Shanghai")
(n3 / name, op, "Terrorism,")
(n3 / name, op, "and")
(n3 / name, op, "on")
(n4 / name, op, "Agreement")
(n4 / name, op, "China-Kyrgyzstan")
(s / say-01, ARG0, c / communique)
(s / say-01, ARG1, s2 / strengthen-01)
(s2 / strengthen-01, ARG0, a / and)
(s2 / strengthen-01, ARG1, a2 / and)
(t / treaty, name, n3 / name)
(t2 / treaty, name, n4 / name)
(t2 / treaty, topic, c6 / cooperate-01)

Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),extremism,extremism,false), Span(38,39,List(1),terrorism,terrorism,false), Span(37,38,List(2),combating,combat-01,false), Span(35,36,List(3),cooperation,cooperate-01,false), Span(33,34,List(4),Agreement,agreement,false), Span(32,33,List(7, 6, 5),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(30,32,List(13, 12, 11, 10, 9, 8),China -,(organization :name (name :op "China" :op "-" :op "Kyrgyzstan" :op "Agreement")),false), Span(27,28,List(14),extremism,extremism,false), Span(22,24,List(18, 17, 16, 15),Combating Terrorism,(organization :name (name :op "Combating" :op "Terrorism")),false), Span(19,21,List(22, 21, 20, 19),Shanghai Convention,(organization :name (name :op "Shanghai" :op "Convention")),false), Span(14,15,List(23),authorities,authority,false), Span(13,14,List(24),relevant,relevant-41,false), Span(10,11,List(25),cooperation,cooperate-01,false), Span(8,9,List(26),coordination,coordinate-01,false), Span(7,8,List(27),strengthen,strengthen-01,false), Span(5,6,List(30, 29, 28),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(2,3,List(31),said,say-01,false)),Map(30 -> "Kyrgyzstan", 2 -> combat-01, 5 -> country, 27 -> strengthen-01, 12 -> "Kyrgyzstan", 8 -> organization, 15 -> organization, 21 -> "Shanghai", 18 -> "Terrorism", 24 -> relevant-41, 7 -> "Kyrgyzstan", 1 -> terrorism, 17 -> "Combating", 23 -> authority, 26 -> coordinate-01, 4 -> agreement, 11 -> "-", 14 -> extremism, 29 -> name, 20 -> name, 28 -> country, 6 -> name, 9 -> name, 0 -> extremism, 22 -> "Convention", 16 -> name, 19 -> organization, 10 -> "China", 3 -> cooperate-01, 31 -> say-01, 25 -> cooperate-01, 13 -> "Agreement"),Map(e -> extremism, n -> name, s2 -> say-01, t -> terrorism, o3 -> organization, e2 -> extremism, c4 -> cooperate-01, n4 -> name, s -> strengthen-01, a -> agreement, c3 -> country, n3 -> name, o2 -> organization, c6 -> country, r -> relevant-41, a2 -> authority, c -> combat-01, o -> organization, c2 -> cooperate-01, n2 -> name, n5 -> name, c5 -> coordinate-01))),[Ljava.lang.String;@2489e84a,Annotation([Ljava.lang.String;@2a39aa2b,[Ljava.lang.String;@62b93086,[Ljava.lang.String;@254449bb),Annotation([Ljava.lang.String;@4e642ee1,[Ljava.lang.String;@29ebbdf4,[Ledu.cmu.lti.nlp.amr.Dependency;@2fd954f),Annotation([Ljava.lang.String;@5731d3a,[Ljava.lang.String;@6a0f2853,[Ljava.lang.String;@1eff3cfb),Annotation([Ljava.lang.String;@70c69586,[Ljava.lang.String;@6dc1dc69,[Ledu.cmu.lti.nlp.amr.Entity;@7e9f2c32))
AMR:
(a / agreement, mod, c3 / country)
(a / agreement, mod, o / organization)
(a / agreement, name, e2 / extremism)
(c / combat-01, ARG0, o3 / organization)
(c / combat-01, ARG1, t / terrorism)
(c2 / cooperate-01, ARG0, e / extremism)
(c2 / cooperate-01, ARG1, c / combat-01)
(c3 / country, name, n / name)
(c4 / cooperate-01, ARG0, c3 / country)
(c4 / cooperate-01, ARG1, o3 / organization)
(c4 / cooperate-01, ARG2, a2 / authority)
(c5 / coordinate-01, ARG0, o3 / organization)
(c6 / country, name, n5 / name)
(n / name, op, "Kyrgyzstan")
(n2 / name, op, "-")
(n2 / name, op, "Agreement")
(n2 / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Combating")
(n3 / name, op, "Terrorism")
(n4 / name, op, "Convention")
(n4 / name, op, "Shanghai")
(n5 / name, op, "Kyrgyzstan")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(o3 / organization, name, n4 / name)
(o3 / organization, source, o2 / organization)
(r / relevant-41, ARG1, a2 / authority)
(s / strengthen-01, ARG1, c5 / coordinate-01)
(s / strengthen-01, ARG2, c6 / country)
(s2 / say-01, ARG1, s / strengthen-01)

Decoded in 1,974,979 microseconds
Sentence: The communique added that China and Kyrgyzstan will continue to adopt strong measures within the framework of the Shanghai Cooperation Organization (SCO) in jointly fighting all forms of terrorism in order to maintain peace and tranquillity in China and Kyrgyzstan and in the region as a whole.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 2-3:  added => add-01
Span 10-11:  adopt => adopt-01
Span 27-28:  all => all
Span 8-9:  continue => continue-01
Span 26-27:  fighting => fight-01
Span 28-29:  forms => form
Span 15-16:  framework => framework
Span 25-26:  jointly => joint
Span 41-42:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 6-7:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 34-35:  maintain => maintain-01
Span 12-13:  measures => measure
Span 35-36:  peace => peace
Span 45-46:  region => region
Span 18-21:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 11-12:  strong => strong
Span 30-31:  terrorism => terrorism
Span 48-49:  whole => whole
Span 13-14:  within => within

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 2-3:  added => add-01
Oracle Span 10-11:  adopt => adopt-01
Oracle Span 27-28:  all => all
Oracle Span 5-6:  and => and
Oracle Span 36-37:  and => and
Oracle Span 40-41:  and => and
Oracle Span 4-5:  China => (country :name (name :op "China"))
Oracle Span 1-2:  communique => communique
Oracle Span 8-9:  continue => continue-01
Oracle Span 26-27:  fighting => fight-01
Oracle Span 28-29:  forms => form
Oracle Span 15-16:  framework => framework
Oracle Span 25-26:  jointly => joint
Oracle Span 6-7:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 34-35:  maintain => maintain-01
Oracle Span 12-13:  measures => measure
Oracle Span 35-36:  peace => peace
Oracle Span 45-46:  region => region
Oracle Span 18-21:  Shanghai Cooperation Organization => (organization :name (name :op "Organization" :op "Cooperation" :op "Shanghai"))
Oracle Span 11-12:  strong => strong
Oracle Span 30-31:  terrorism => terrorism
Oracle Span 37-38:  tranquillity => tranquillity
Oracle Span 48-49:  whole => whole

Extra span: Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Incorrect span: Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Extra span: within => within
Missing span: China => (country :name (name :op "China"))
Missing span: Shanghai Cooperation Organization => (organization :name (name :op "Organization" :op "Cooperation" :op "Shanghai"))
Missing span: and => and
Missing span: and => and
Missing span: tranquillity => tranquillity
Missing span: and => and
Missing span: communique => communique
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	communique	_	NN	NN	_	3	nsubj	_	_
3	added	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	9	mark	_	_
5	China	_	NNP	NNP	_	9	nsubj	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	Kyrgyzstan	_	NNP	NNP	_	5	conj	_	_
8	will	_	MD	MD	_	9	aux	_	_
9	continue	_	VB	VB	_	3	ccomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	adopt	_	VB	VB	_	9	xcomp	_	_
12	strong	_	JJ	JJ	_	13	amod	_	_
13	measures	_	NNS	NNS	_	11	dobj	_	_
14	within	_	IN	IN	_	11	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	framework	_	NN	NN	_	14	pobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	21	det	_	_
19	Shanghai	_	NNP	NNP	_	21	nn	_	_
20	Cooperation	_	NNP	NNP	_	21	nn	_	_
21	Organization	_	NNP	NNP	_	17	pobj	_	_
22	(	_	(	(	_	23	punct	_	_
23	SCO	_	NNP	NNP	_	21	appos	_	_
24	)	_	)	)	_	23	punct	_	_
25	in	_	IN	IN	_	11	prep	_	_
26	jointly	_	RB	RB	_	27	advmod	_	_
27	fighting	_	VBG	VBG	_	25	pcomp	_	_
28	all	_	DT	DT	_	29	det	_	_
29	forms	_	NNS	NNS	_	27	dobj	_	_
30	of	_	IN	IN	_	29	prep	_	_
31	terrorism	_	NN	NN	_	30	pobj	_	_
32	in	_	IN	IN	_	35	mark	_	_
33	order	_	NN	NN	_	35	dep	_	_
34	to	_	TO	TO	_	35	aux	_	_
35	maintain	_	VB	VB	_	9	advcl	_	_
36	peace	_	NN	NN	_	35	dobj	_	_
37	and	_	CC	CC	_	36	cc	_	_
38	tranquillity	_	NN	NN	_	36	conj	_	_
39	in	_	IN	IN	_	35	prep	_	_
40	China	_	NNP	NNP	_	39	pobj	_	_
41	and	_	CC	CC	_	40	cc	_	_
42	Kyrgyzstan	_	NNP	NNP	_	40	conj	_	_
43	and	_	CC	CC	_	39	cc	_	_
44	in	_	IN	IN	_	39	conj	_	_
45	the	_	DT	DT	_	46	det	_	_
46	region	_	NN	NN	_	44	pobj	_	_
47	as	_	IN	IN	_	46	prep	_	_
48	a	_	DT	DT	_	49	det	_	_
49	whole	_	NN	NN	_	47	pobj	_	_
50	.	_	.	.	_	3	punct	_	_

Oracle:
(a / add-01, ARG0, c / communique)
(a / add-01, ARG1, c2 / continue-01)
(a2 / and, op, c3 / country)
(a2 / and, op, c4 / country)
(a3 / adopt-01, ARG0, a2 / and)
(a3 / adopt-01, ARG1, m / measure)
(a3 / adopt-01, ARG2, f2 / fight-01)
(a3 / adopt-01, prep-within, f / framework)
(a5 / and, op, p / peace)
(a5 / and, op, t2 / tranquillity)
(a6 / and, op, c3 / country)
(a6 / and, op, c4 / country)
(a6 / and, op, r / region)
(c2 / continue-01, ARG0, a2 / and)
(c2 / continue-01, ARG1, a3 / adopt-01)
(c3 / country, name, n / name)
(c4 / country, name, n2 / name)
(f / framework, poss, o / organization)
(f2 / fight-01, ARG1, f3 / form)
(f2 / fight-01, manner, j / joint)
(f3 / form, mod, a4 / all)
(f3 / form, mod, t / terrorism)
(f3 / form, purpose, m2 / maintain-01)
(m / measure, mod, s / strong)
(m2 / maintain-01, ARG1, a5 / and)
(m2 / maintain-01, ARG2, a6 / and)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Cooperation")
(n3 / name, op, "Organization")
(n3 / name, op, "Shanghai")
(o / organization, name, n3 / name)
(r / region, mod, w / whole)

Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),whole,whole,false), Span(45,46,List(1),region,region,false), Span(41,42,List(4, 3, 2),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(35,36,List(5),peace,peace,false), Span(34,35,List(6),maintain,maintain-01,false), Span(30,31,List(7),terrorism,terrorism,false), Span(28,29,List(8),forms,form,false), Span(27,28,List(9),all,all,false), Span(26,27,List(10),fighting,fight-01,false), Span(25,26,List(11),jointly,joint,false), Span(18,21,List(16, 15, 14, 13, 12),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(15,16,List(17),framework,framework,false), Span(13,14,List(18),within,within,false), Span(12,13,List(19),measures,measure,false), Span(11,12,List(20),strong,strong,false), Span(10,11,List(21),adopt,adopt-01,false), Span(8,9,List(22),continue,continue-01,false), Span(6,7,List(25, 24, 23),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(2,3,List(26),added,add-01,false)),Map(2 -> country, 5 -> peace, 12 -> organization, 8 -> form, 15 -> "Cooperation", 21 -> adopt-01, 18 -> within, 24 -> name, 7 -> terrorism, 1 -> region, 17 -> framework, 23 -> country, 26 -> add-01, 4 -> "Kyrgyzstan", 11 -> joint, 14 -> "Shanghai", 20 -> strong, 6 -> maintain-01, 9 -> all, 0 -> whole, 22 -> continue-01, 16 -> "Organization", 19 -> measure, 10 -> fight-01, 3 -> name, 25 -> "Kyrgyzstan", 13 -> name),Map(w -> whole, n -> name, t -> terrorism, m2 -> measure, a3 -> add-01, j -> joint, s -> strong, m -> maintain-01, p -> peace, n3 -> name, c3 -> country, a -> all, f3 -> framework, w2 -> within, a2 -> adopt-01, r -> region, c -> country, f2 -> fight-01, f -> form, o -> organization, c2 -> continue-01, n2 -> name))),[Ljava.lang.String;@19e0dffe,Annotation([Ljava.lang.String;@5d4e13e1,[Ljava.lang.String;@3e0fbeb5,[Ljava.lang.String;@3976ebfa),Annotation([Ljava.lang.String;@2676dc05,[Ljava.lang.String;@b0a1231,[Ledu.cmu.lti.nlp.amr.Dependency;@4833eff3),Annotation([Ljava.lang.String;@4694f434,[Ljava.lang.String;@56928e17,[Ljava.lang.String;@dd2856e),Annotation([Ljava.lang.String;@5a49af50,[Ljava.lang.String;@3b1dc579,[Ledu.cmu.lti.nlp.amr.Entity;@793d163b))
AMR:
(a2 / adopt-01, ARG0, c3 / country)
(a2 / adopt-01, ARG1, m2 / measure)
(a2 / adopt-01, time, w2 / within)
(a3 / add-01, ARG1, c2 / continue-01)
(c / country, location, w / whole)
(c / country, name, n / name)
(c2 / continue-01, ARG0, c / country)
(c2 / continue-01, ARG1, a2 / adopt-01)
(c3 / country, name, n3 / name)
(f / form, mod, a / all)
(f2 / fight-01, ARG0, m2 / measure)
(f2 / fight-01, ARG1, f / form)
(f2 / fight-01, location, t / terrorism)
(f2 / fight-01, manner, j / joint)
(f2 / fight-01, purpose, m / maintain-01)
(f3 / framework, poss, o / organization)
(m / maintain-01, ARG1, p / peace)
(m2 / measure, mod, s / strong)
(n / name, op, "Kyrgyzstan")
(n2 / name, op, "Cooperation")
(n2 / name, op, "Organization")
(n2 / name, op, "Shanghai")
(n3 / name, op, "Kyrgyzstan")
(o / organization, name, n2 / name)
(r / region, poss, w / whole)
(w2 / within, op, f3 / framework)

Decoded in 635,187 microseconds
Sentence: China and Kyrgyzstan agree that the crackdown on the terrorist force of Eastern Turkistan is a major part of the international anti-terrorism campaign.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Eastern" :op "Turkistan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 3-4:  agree => agree-01
Span 24-25:  campaign => campaign-01
Span 6-7:  crackdown => crack-06
Span 12-14:  Eastern Turkistan => (organization :name (name :op "Eastern" :op "Turkistan"))
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 16-17:  major => major
Span 23-24:  terrorism => terrorism

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 3-4:  agree => agree-01
Oracle Span 1-2:  and => and
Oracle Span 21-22:  anti => counter-01
Oracle Span 24-25:  campaign => campaign
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 6-7:  crackdown => crack-06
Oracle Span 12-14:  Eastern Turkistan => (country-region :name (name :op "Turkistan" :op "Eastern"))
Oracle Span 10-11:  force => force
Oracle Span 20-21:  international => international
Oracle Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 16-17:  major => major
Oracle Span 23-24:  terrorism => terrorism
Oracle Span 9-10:  terrorist => terrorist

Incorrect span: campaign => campaign-01
Incorrect span: Eastern Turkistan => (organization :name (name :op "Eastern" :op "Turkistan"))
Missing span: China => (country :name (name :op "China"))
Missing span: Eastern Turkistan => (country-region :name (name :op "Turkistan" :op "Eastern"))
Missing span: campaign => campaign
Missing span: anti => counter-01
Missing span: international => international
Missing span: force => force
Missing span: terrorist => terrorist
Missing span: and => and
Dependencies:
1	China	_	NNP	NNP	_	4	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Kyrgyzstan	_	NNP	NNP	_	1	conj	_	_
4	agree	_	VBP	VBP	_	0	root	_	_
5	that	_	IN	IN	_	18	mark	_	_
6	the	_	DT	DT	_	7	det	_	_
7	crackdown	_	NN	NN	_	18	nsubj	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	terrorist	_	JJ	JJ	_	11	amod	_	_
11	force	_	NN	NN	_	8	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	Eastern	_	NNP	NNP	_	14	nn	_	_
14	Turkistan	_	NNP	NNP	_	12	pobj	_	_
15	is	_	VBZ	VBZ	_	18	cop	_	_
16	a	_	DT	DT	_	18	det	_	_
17	major	_	JJ	JJ	_	18	amod	_	_
18	part	_	NN	NN	_	4	ccomp	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	23	det	_	_
21	international	_	JJ	JJ	_	23	amod	_	_
22	anti-terrorism	_	JJ	JJ	_	23	amod	_	_
23	campaign	_	NN	NN	_	19	pobj	_	_
24	.	_	.	.	_	4	punct	_	_

Oracle:
(a / agree-01, ARG0, a2 / and)
(a2 / and, op, c / country)
(a2 / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / campaign, mod, i / international)
(c4 / counter-01, ARG0, c3 / campaign)
(c4 / counter-01, ARG1, t / terrorism)
(c5 / crack-06, ARG1, f / force)
(c6 / country-region, name, n3 / name)
(f / force, mod, c6 / country-region)
(f / force, mod, t2 / terrorist)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Eastern")
(n3 / name, op, "Turkistan")

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),campaign,campaign-01,false), Span(23,24,List(1),terrorism,terrorism,false), Span(16,17,List(2),major,major,false), Span(12,14,List(6, 5, 4, 3),Eastern Turkistan,(organization :name (name :op "Eastern" :op "Turkistan")),false), Span(6,7,List(7),crackdown,crack-06,false), Span(3,4,List(8),agree,agree-01,false), Span(2,3,List(11, 10, 9),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false)),Map(2 -> major, 5 -> "Eastern", 8 -> agree-01, 7 -> crack-06, 1 -> terrorism, 11 -> "Kyrgyzstan", 4 -> name, 6 -> "Turkistan", 9 -> country, 0 -> campaign-01, 10 -> name, 3 -> organization),Map(n -> name, t -> terrorism, m -> major, c3 -> country, a -> agree-01, c -> campaign-01, o -> organization, n2 -> name, c2 -> crack-06))),[Ljava.lang.String;@60dd0587,Annotation([Ljava.lang.String;@77f905e3,[Ljava.lang.String;@221a2068,[Ljava.lang.String;@338766de),Annotation([Ljava.lang.String;@3b7eac14,[Ljava.lang.String;@4976085,[Ledu.cmu.lti.nlp.amr.Dependency;@777d191f),Annotation([Ljava.lang.String;@7fc420b8,[Ljava.lang.String;@31142d58,[Ljava.lang.String;@e38f0b7),Annotation([Ljava.lang.String;@1192b58e,[Ljava.lang.String;@4f8d86e4,[Ledu.cmu.lti.nlp.amr.Entity;@5f631ca0))
AMR:
(a / agree-01, ARG1, c2 / crack-06)
(a / agree-01, ARG2, c3 / country)
(a / agree-01, location, o / organization)
(c / campaign-01, ARG0, o / organization)
(c / campaign-01, ARG1, t / terrorism)
(c2 / crack-06, ARG1, m / major)
(c3 / country, name, n2 / name)
(n / name, op, "Eastern")
(n / name, op, "Turkistan")
(n2 / name, op, "Kyrgyzstan")
(o / organization, name, n / name)

Decoded in 168,046 microseconds
Sentence: The so-called Eastern Turkistan terrorist group comprises a number of secession-minded terrorist cells.

NER Entity: (organization :name (name :op "Eastern" :op "Turkistan"))
Spans:
Span 2-4:  - called => (organization :name (name :op "Eastern" :op "Turkistan"))
Span 16-17:  cells => cell
Span 8-9:  comprises => comprise-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  called => call-01
Oracle Span 16-17:  cells => cell
Oracle Span 8-9:  comprises => comprise-01
Oracle Span 4-6:  Eastern Turkistan => (country-region :name (name :op "Turkistan" :op "Eastern"))
Oracle Span 7-8:  group => group
Oracle Span 14-15:  minded => mind-02
Oracle Span 10-11:  number => number
Oracle Span 12-13:  secession => secede-01
Oracle Span 1-2:  so => so
Oracle Span 6-7:  terrorist => terrorist
Oracle Span 15-16:  terrorist => terrorist

Extra span: - called => (organization :name (name :op "Eastern" :op "Turkistan"))
Missing span: Eastern Turkistan => (country-region :name (name :op "Turkistan" :op "Eastern"))
Missing span: minded => mind-02
Missing span: terrorist => terrorist
Missing span: number => number
Missing span: group => group
Missing span: called => call-01
Missing span: so => so
Missing span: terrorist => terrorist
Missing span: secession => secede-01
Dependencies:
1	The	_	DT	DT	_	6	det	_	_
2	so-called	_	JJ	JJ	_	6	amod	_	_
3	Eastern	_	NNP	NNP	_	6	nn	_	_
4	Turkistan	_	NNP	NNP	_	6	nn	_	_
5	terrorist	_	JJ	JJ	_	6	amod	_	_
6	group	_	NN	NN	_	7	nsubj	_	_
7	comprises	_	VBZ	VBZ	_	0	root	_	_
8	a	_	DT	DT	_	9	det	_	_
9	number	_	NN	NN	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	secession-minded	_	JJ	JJ	_	13	amod	_	_
12	terrorist	_	JJ	JJ	_	13	amod	_	_
13	cells	_	NNS	NNS	_	10	pobj	_	_
14	.	_	.	.	_	7	punct	_	_

Oracle:
(c / comprise-01, ARG1, g / group)
(c / comprise-01, ARG2, c2 / cell)
(c2 / cell, mod, t2 / terrorist)
(c2 / cell, quant, n2 / number)
(c3 / call-01, ARG1, g / group)
(c3 / call-01, manner, s2 / so)
(c4 / country-region, name, n / name)
(g / group, mod, c4 / country-region)
(g / group, mod, t / terrorist)
(m / mind-02, ARG0, c2 / cell)
(m / mind-02, ARG1, s / secede-01)
(n / name, op, "Eastern")
(n / name, op, "Turkistan")

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),cells,cell,false), Span(8,9,List(1),comprises,comprise-01,false), Span(2,4,List(5, 4, 3, 2),- called,(organization :name (name :op "Eastern" :op "Turkistan")),false)),Map(2 -> organization, 5 -> "Turkistan", 1 -> comprise-01, 4 -> "Eastern", 0 -> cell, 3 -> name),Map(n -> name, c -> cell, o -> organization, c2 -> comprise-01))),[Ljava.lang.String;@1697f2b3,Annotation([Ljava.lang.String;@12ad1b2a,[Ljava.lang.String;@3134153d,[Ljava.lang.String;@767599a7),Annotation([Ljava.lang.String;@5f5effb0,[Ljava.lang.String;@25d0cb3a,[Ledu.cmu.lti.nlp.amr.Dependency;@345cbf40),Annotation([Ljava.lang.String;@6e3eb0cd,[Ljava.lang.String;@463561c5,[Ljava.lang.String;@659feb22),Annotation([Ljava.lang.String;@3468ee6e,[Ljava.lang.String;@2f4b98f6,[Ledu.cmu.lti.nlp.amr.Entity;@421def93))
AMR:
(c2 / comprise-01, ARG1, c / cell)
(n / name, op, "Eastern")
(n / name, op, "Turkistan")
(o / organization, name, n / name)
(o / organization, poss, c / cell)

Decoded in 40,030 microseconds
Sentence: The communique said that China and Kyrgyzstan agree to promote consultations and cooperation on issues of common concern within the framework of the United Nations and other international organizations.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 7-8:  agree => agree-01
Span 16-17:  common => common
Span 17-18:  concern => concern-01
Span 10-11:  consultations => consult-01
Span 12-13:  cooperation => cooperate-01
Span 20-21:  framework => framework
Span 14-15:  issues => issue
Span 6-7:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 28-29:  organizations => organization
Span 26-27:  other => other
Span 9-10:  promote => promote-02
Span 2-3:  said => say-01
Span 23-25:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 18-19:  within => within

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 7-8:  agree => agree-01
Oracle Span 5-6:  and => and
Oracle Span 11-12:  and => and
Oracle Span 25-26:  and => and
Oracle Span 4-5:  China => (country :name (name :op "China"))
Oracle Span 16-17:  common => common
Oracle Span 1-2:  communique => communique
Oracle Span 17-18:  concern => concern-01
Oracle Span 10-11:  consultations => consult-01
Oracle Span 12-13:  cooperation => cooperate-01
Oracle Span 20-21:  framework => framework
Oracle Span 27-28:  international => international
Oracle Span 14-15:  issues => issue
Oracle Span 6-7:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 28-29:  organizations => organization
Oracle Span 26-27:  other => other
Oracle Span 9-10:  promote => promote-02
Oracle Span 2-3:  said => say-01
Oracle Span 23-25:  United Nations => (organization :name (name :op "Nations" :op "United"))

Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Extra span: within => within
Missing span: China => (country :name (name :op "China"))
Missing span: United Nations => (organization :name (name :op "Nations" :op "United"))
Missing span: and => and
Missing span: international => international
Missing span: and => and
Missing span: and => and
Missing span: communique => communique
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	communique	_	NN	NN	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	8	mark	_	_
5	China	_	NNP	NNP	_	8	nsubj	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	Kyrgyzstan	_	NNP	NNP	_	5	conj	_	_
8	agree	_	VBP	VBP	_	3	ccomp	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	promote	_	VB	VB	_	8	xcomp	_	_
11	consultations	_	NNS	NNS	_	10	dobj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	cooperation	_	NN	NN	_	11	conj	_	_
14	on	_	IN	IN	_	10	prep	_	_
15	issues	_	NNS	NNS	_	14	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	common	_	JJ	JJ	_	18	amod	_	_
18	concern	_	NN	NN	_	16	pobj	_	_
19	within	_	IN	IN	_	10	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	framework	_	NN	NN	_	19	pobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	25	det	_	_
24	United	_	NNP	NNP	_	25	nn	_	_
25	Nations	_	NNPS	NNPS	_	22	pobj	_	_
26	and	_	CC	CC	_	25	cc	_	_
27	other	_	JJ	JJ	_	29	amod	_	_
28	international	_	JJ	JJ	_	29	amod	_	_
29	organizations	_	NNS	NNS	_	25	conj	_	_
30	.	_	.	.	_	3	punct	_	_

Oracle:
(a / agree-01, ARG0, a2 / and)
(a / agree-01, ARG1, p / promote-02)
(a2 / and, op, c2 / country)
(a2 / and, op, c3 / country)
(a3 / and, op, c4 / consult-01)
(a3 / and, op, c5 / cooperate-01)
(a4 / and, op, o / organization)
(a4 / and, op, o3 / organization)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / consult-01, ARG2, i / issue)
(c5 / cooperate-01, ARG2, i / issue)
(c6 / concern-01, ARG2, i / issue)
(c6 / concern-01, mod, c7 / common)
(f / framework, poss, a4 / and)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Nations")
(n3 / name, op, "United")
(o / organization, mod, i2 / international)
(o / organization, mod, o2 / other)
(o3 / organization, name, n3 / name)
(p / promote-02, ARG0, a2 / and)
(p / promote-02, ARG1, a3 / and)
(p / promote-02, prep-within, f / framework)
(s / say-01, ARG0, c / communique)
(s / say-01, ARG1, a / agree-01)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),organizations,organization,false), Span(26,27,List(1),other,other,false), Span(23,25,List(5, 4, 3, 2),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(20,21,List(6),framework,framework,false), Span(18,19,List(7),within,within,false), Span(17,18,List(8),concern,concern-01,false), Span(16,17,List(9),common,common,false), Span(14,15,List(10),issues,issue,false), Span(12,13,List(11),cooperation,cooperate-01,false), Span(10,11,List(12),consultations,consult-01,false), Span(9,10,List(13),promote,promote-02,false), Span(7,8,List(14),agree,agree-01,false), Span(6,7,List(17, 16, 15),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(2,3,List(18),said,say-01,false)),Map(2 -> organization, 5 -> "Nations", 12 -> consult-01, 15 -> country, 8 -> concern-01, 18 -> say-01, 7 -> within, 17 -> "Kyrgyzstan", 1 -> other, 4 -> "United", 11 -> cooperate-01, 14 -> agree-01, 6 -> framework, 0 -> organization, 9 -> common, 16 -> name, 3 -> name, 10 -> issue, 13 -> promote-02),Map(n -> name, w -> within, o3 -> organization, c4 -> consult-01, s -> say-01, p -> promote-02, c3 -> cooperate-01, a -> agree-01, o2 -> other, i -> issue, c -> concern-01, f -> framework, o -> organization, n2 -> name, c2 -> common, c5 -> country))),[Ljava.lang.String;@58c1da09,Annotation([Ljava.lang.String;@2b2954e1,[Ljava.lang.String;@58d6e55a,[Ljava.lang.String;@751ae8a4),Annotation([Ljava.lang.String;@235d659c,[Ljava.lang.String;@4232b34a,[Ledu.cmu.lti.nlp.amr.Dependency;@2da16263),Annotation([Ljava.lang.String;@f5ce0bb,[Ljava.lang.String;@47e51549,[Ljava.lang.String;@101a461c),Annotation([Ljava.lang.String;@360e9c06,[Ljava.lang.String;@5ebffb44,[Ledu.cmu.lti.nlp.amr.Entity;@311ff287))
AMR:
(a / agree-01, ARG1, p / promote-02)
(a / agree-01, ARG2, c5 / country)
(c / concern-01, ARG0, i / issue)
(c / concern-01, mod, c2 / common)
(c3 / cooperate-01, ARG1, i / issue)
(c4 / consult-01, ARG1, i / issue)
(c5 / country, name, n2 / name)
(f / framework, poss, o3 / organization)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Kyrgyzstan")
(o / organization, mod, o2 / other)
(o3 / organization, name, n / name)
(p / promote-02, ARG1, c4 / consult-01)
(p / promote-02, time, w / within)
(s / say-01, ARG1, a / agree-01)
(w / within, op, f / framework)
(w / within, op, o / organization)

Decoded in 276,411 microseconds
Sentence: China and Kyrgyzstan said in the communique that peace, stability and a just and rational world political and economic order should be established on the basis of the UN Charter and norms and principles of international law.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "UN" :op "Charter"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 19-20:  economic => economy
Span 23-24:  established => establish-01
Span 13-14:  just => just
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 37-38:  law => law
Span 8-9:  peace => peace
Span 34-35:  principles => principle
Span 3-4:  said => say-01
Span 21-22:  should => recommend-01
Span 10-11:  stability => stability
Span 29-31:  UN Charter => (organization :name (name :op "UN" :op "Charter"))

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 11-12:  and => and
Oracle Span 14-15:  and => and
Oracle Span 18-19:  and => and
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 6-7:  communique => communique
Oracle Span 19-20:  economic => economy
Oracle Span 23-24:  established => establish-01
Oracle Span 36-37:  international => international
Oracle Span 13-14:  just => just
Oracle Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 37-38:  law => law
Oracle Span 32-33:  norms => norm
Oracle Span 20-21:  order => order
Oracle Span 8-9:  peace => peace
Oracle Span 17-18:  political => politics
Oracle Span 34-35:  principles => principle
Oracle Span 15-16:  rational => rational
Oracle Span 3-4:  said => say-01
Oracle Span 21-22:  should => recommend-01
Oracle Span 10-11:  stability => stability
Oracle Span 29-31:  UN Charter => (treaty :name (name :op "Charter" :op "UN"))
Oracle Span 16-17:  world => world

Incorrect span: UN Charter => (organization :name (name :op "UN" :op "Charter"))
Missing span: China => (country :name (name :op "China"))
Missing span: UN Charter => (treaty :name (name :op "Charter" :op "UN"))
Missing span: communique => communique
Missing span: and => and
Missing span: norms => norm
Missing span: international => international
Missing span: and => and
Missing span: and => and
Missing span: world => world
Missing span: rational => rational
Missing span: order => order
Missing span: and => and
Missing span: political => politics
Dependencies:
1	China	_	NNP	NNP	_	4	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Kyrgyzstan	_	NNP	NNP	_	1	conj	_	_
4	said	_	VBD	VBD	_	0	root	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	communique	_	NN	NN	_	5	pobj	_	_
8	that	_	IN	IN	_	24	mark	_	_
9	peace	_	NN	NN	_	24	nsubjpass	_	_
10	,	_	,	,	_	9	punct	_	_
11	stability	_	NN	NN	_	9	conj	_	_
12	and	_	CC	CC	_	9	cc	_	_
13	a	_	DT	DT	_	17	det	_	_
14	just	_	JJ	JJ	_	17	amod	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	rational	_	JJ	JJ	_	14	conj	_	_
17	world	_	NN	NN	_	9	conj	_	_
18	political	_	JJ	JJ	_	21	amod	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	economic	_	JJ	JJ	_	18	conj	_	_
21	order	_	NN	NN	_	17	dep	_	_
22	should	_	MD	MD	_	24	aux	_	_
23	be	_	VB	VB	_	24	auxpass	_	_
24	established	_	VBN	VBN	_	4	ccomp	_	_
25	on	_	IN	IN	_	24	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	basis	_	NN	NN	_	25	pobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	31	det	_	_
30	UN	_	NNP	NNP	_	31	nn	_	_
31	Charter	_	NNP	NNP	_	28	pobj	_	_
32	and	_	CC	CC	_	27	cc	_	_
33	norms	_	NNS	NNS	_	27	conj	_	_
34	and	_	CC	CC	_	33	cc	_	_
35	principles	_	NNS	NNS	_	33	conj	_	_
36	of	_	IN	IN	_	33	prep	_	_
37	international	_	JJ	JJ	_	38	amod	_	_
38	law	_	NN	NN	_	36	pobj	_	_
39	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a2 / and, op, a6 / and)
(a2 / and, op, p / peace)
(a2 / and, op, s2 / stability)
(a5 / and, op, n4 / norm)
(a5 / and, op, p3 / principle)
(a5 / and, op, t / treaty)
(a6 / and, mod, w / world)
(a6 / and, op, o2 / order)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e / establish-01, ARG1, a2 / and)
(l / law, mod, i / international)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Charter")
(n3 / name, op, "UN")
(n4 / norm, poss, l / law)
(o2 / order, mod, e2 / economy)
(p3 / principle, poss, l / law)
(r / recommend-01, ARG1, e / establish-01)
(s / say-01, ARG0, a / and)
(s / say-01, ARG1, r / recommend-01)
(s / say-01, instrument, c3 / communique)
(t / treaty, name, n3 / name)
(w / world, mod, j / just)
(w / world, mod, r2 / rational)

Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),law,law,false), Span(34,35,List(1),principles,principle,false), Span(29,31,List(5, 4, 3, 2),UN Charter,(organization :name (name :op "UN" :op "Charter")),false), Span(23,24,List(6),established,establish-01,false), Span(21,22,List(7),should,recommend-01,false), Span(19,20,List(8),economic,economy,false), Span(13,14,List(9),just,just,false), Span(10,11,List(10),stability,stability,false), Span(8,9,List(11),peace,peace,false), Span(3,4,List(12),said,say-01,false), Span(2,3,List(15, 14, 13),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false)),Map(2 -> organization, 5 -> "Charter", 12 -> say-01, 15 -> "Kyrgyzstan", 8 -> economy, 7 -> recommend-01, 1 -> principle, 4 -> "UN", 11 -> peace, 14 -> name, 6 -> establish-01, 0 -> law, 9 -> just, 3 -> name, 10 -> stability, 13 -> country),Map(e -> establish-01, n -> name, s2 -> say-01, e2 -> economy, p2 -> peace, j -> just, s -> stability, p -> principle, r -> recommend-01, c -> country, l -> law, o -> organization, n2 -> name))),[Ljava.lang.String;@7377781e,Annotation([Ljava.lang.String;@31db34da,[Ljava.lang.String;@109f8c7e,[Ljava.lang.String;@5edacf20),Annotation([Ljava.lang.String;@16a5eb6d,[Ljava.lang.String;@7e307087,[Ledu.cmu.lti.nlp.amr.Dependency;@1220ef43),Annotation([Ljava.lang.String;@1a8b81e8,[Ljava.lang.String;@234cff57,[Ljava.lang.String;@5e8507f1),Annotation([Ljava.lang.String;@4bcaa195,[Ljava.lang.String;@d08edc5,[Ledu.cmu.lti.nlp.amr.Entity;@49fa1d74))
AMR:
(c / country, name, n2 / name)
(e / establish-01, ARG1, p2 / peace)
(e2 / economy, op, s2 / say-01)
(l / law, op, r / recommend-01)
(n / name, op, "Charter")
(n / name, op, "UN")
(n2 / name, op, "Kyrgyzstan")
(o / organization, name, n / name)
(o / organization, purpose, l / law)
(p / principle, mod, l / law)
(r / recommend-01, ARG0, s / stability)
(r / recommend-01, ARG1, e / establish-01)
(r / recommend-01, ARG2, j / just)
(s2 / say-01, ARG0, c / country)
(s2 / say-01, ARG1, r / recommend-01)

Decoded in 696,339 microseconds
Sentence: China and Kyrgyzstan also agree that international disputes should be solved by peaceful means and the United Nations should play a leading role in safeguarding peace and security in the world and efforts should be made to diversify modes of development.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 4-5:  agree => agree-01
Span 40-41:  development => develop-02
Span 7-8:  disputes => dispute-01
Span 37-38:  diversify => diversify-01
Span 32-33:  efforts => effort
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 25-26:  peace => peace
Span 12-13:  peaceful => peaceful
Span 22-23:  role => role
Span 33-34:  should => recommend-01
Span 18-19:  should => recommend-01
Span 8-9:  should => recommend-01
Span 16-18:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 4-5:  agree => agree-01
Oracle Span 3-4:  also => also
Oracle Span 1-2:  and => and
Oracle Span 14-15:  and => and
Oracle Span 26-27:  and => and
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 40-41:  development => develop-02
Oracle Span 7-8:  disputes => dispute-01
Oracle Span 37-38:  diversify => diversify-01
Oracle Span 6-7:  international => international
Oracle Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 21-22:  leading => lead-02
Oracle Span 13-14:  means => mean
Oracle Span 38-39:  modes => mode
Oracle Span 25-26:  peace => peace
Oracle Span 12-13:  peaceful => peaceful
Oracle Span 19-20:  play => play-08
Oracle Span 22-23:  role => role
Oracle Span 24-25:  safeguarding => safeguard-01
Oracle Span 27-28:  security => security
Oracle Span 8-9:  should => recommend-01
Oracle Span 18-19:  should => recommend-01
Oracle Span 33-34:  should => recommend-01
Oracle Span 10-11:  solved => solve-01
Oracle Span 16-18:  United Nations => (organization :name (name :op "Nations" :op "United"))
Oracle Span 30-31:  world => world

Extra span: efforts => effort
Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Missing span: China => (country :name (name :op "China"))
Missing span: United Nations => (organization :name (name :op "Nations" :op "United"))
Missing span: also => also
Missing span: and => and
Missing span: modes => mode
Missing span: play => play-08
Missing span: leading => lead-02
Missing span: safeguarding => safeguard-01
Missing span: world => world
Missing span: and => and
Missing span: security => security
Missing span: solved => solve-01
Missing span: means => mean
Missing span: international => international
Missing span: and => and
Dependencies:
1	China	_	NNP	NNP	_	5	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Kyrgyzstan	_	NNP	NNP	_	1	conj	_	_
4	also	_	RB	RB	_	5	advmod	_	_
5	agree	_	VBP	VBP	_	0	root	_	_
6	that	_	IN	IN	_	11	mark	_	_
7	international	_	JJ	JJ	_	8	amod	_	_
8	disputes	_	NNS	NNS	_	11	nsubjpass	_	_
9	should	_	MD	MD	_	11	aux	_	_
10	be	_	VB	VB	_	11	auxpass	_	_
11	solved	_	VBN	VBN	_	5	ccomp	_	_
12	by	_	IN	IN	_	11	prep	_	_
13	peaceful	_	JJ	JJ	_	14	amod	_	_
14	means	_	NNS	NNS	_	12	pobj	_	_
15	and	_	CC	CC	_	11	cc	_	_
16	the	_	DT	DT	_	18	det	_	_
17	United	_	NNP	NNP	_	18	nn	_	_
18	Nations	_	NNPS	NNPS	_	20	nsubj	_	_
19	should	_	MD	MD	_	20	aux	_	_
20	play	_	VB	VB	_	11	conj	_	_
21	a	_	DT	DT	_	23	det	_	_
22	leading	_	VBG	VBG	_	23	amod	_	_
23	role	_	NN	NN	_	20	dobj	_	_
24	in	_	IN	IN	_	20	prep	_	_
25	safeguarding	_	VBG	VBG	_	24	pcomp	_	_
26	peace	_	NN	NN	_	25	dobj	_	_
27	and	_	CC	CC	_	26	cc	_	_
28	security	_	NN	NN	_	26	conj	_	_
29	in	_	IN	IN	_	25	prep	_	_
30	the	_	DT	DT	_	31	det	_	_
31	world	_	NN	NN	_	29	pobj	_	_
32	and	_	CC	CC	_	20	cc	_	_
33	efforts	_	NNS	NNS	_	36	nsubjpass	_	_
34	should	_	MD	MD	_	36	aux	_	_
35	be	_	VB	VB	_	36	auxpass	_	_
36	made	_	VBN	VBN	_	20	conj	_	_
37	to	_	TO	TO	_	38	aux	_	_
38	diversify	_	VB	VB	_	36	xcomp	_	_
39	modes	_	NNS	NNS	_	38	dobj	_	_
40	of	_	IN	IN	_	39	prep	_	_
41	development	_	NN	NN	_	40	pobj	_	_
42	.	_	.	.	_	5	punct	_	_

Oracle:
(a / agree-01, ARG0, a2 / and)
(a / agree-01, ARG1, a4 / and)
(a / agree-01, mod, a3 / also)
(a2 / and, op, c / country)
(a2 / and, op, c2 / country)
(a4 / and, op, r / recommend-01)
(a4 / and, op, r2 / recommend-01)
(a4 / and, op, r3 / recommend-01)
(a5 / and, op, p3 / peace)
(a5 / and, op, s3 / security)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / dispute-01, mod, i / international)
(d2 / diversify-01, ARG0, m2 / mode)
(l / lead-02, purpose, s2 / safeguard-01)
(m / mean, mod, p / peaceful)
(m2 / mode, mod, d3 / develop-02)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Nations")
(n3 / name, op, "United")
(o / organization, name, n3 / name)
(p2 / play-08, ARG0, o / organization)
(p2 / play-08, ARG1, r4 / role)
(r / recommend-01, ARG1, s / solve-01)
(r2 / recommend-01, ARG1, p2 / play-08)
(r4 / role, mod, l / lead-02)
(s / solve-01, ARG1, d / dispute-01)
(s / solve-01, ARG2, m / mean)
(s2 / safeguard-01, ARG1, a5 / and)
(s2 / safeguard-01, location, w / world)

Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),development,develop-02,false), Span(37,38,List(1),diversify,diversify-01,false), Span(33,34,List(2),should,recommend-01,false), Span(32,33,List(3),efforts,effort,false), Span(25,26,List(4),peace,peace,false), Span(22,23,List(5),role,role,false), Span(18,19,List(6),should,recommend-01,false), Span(16,18,List(10, 9, 8, 7),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(12,13,List(11),peaceful,peaceful,false), Span(8,9,List(12),should,recommend-01,false), Span(7,8,List(13),disputes,dispute-01,false), Span(4,5,List(14),agree,agree-01,false), Span(2,3,List(17, 16, 15),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false)),Map(2 -> recommend-01, 5 -> role, 12 -> recommend-01, 15 -> country, 8 -> name, 7 -> organization, 17 -> "Kyrgyzstan", 1 -> diversify-01, 4 -> peace, 11 -> peaceful, 14 -> agree-01, 6 -> recommend-01, 0 -> develop-02, 9 -> "United", 16 -> name, 3 -> effort, 10 -> "Nations", 13 -> dispute-01),Map(e -> effort, n -> name, r3 -> recommend-01, d3 -> dispute-01, p2 -> peaceful, d -> develop-02, p -> peace, r2 -> role, a -> agree-01, d2 -> diversify-01, r -> recommend-01, r4 -> recommend-01, c -> country, o -> organization, n2 -> name))),[Ljava.lang.String;@3f362135,Annotation([Ljava.lang.String;@21eee94f,[Ljava.lang.String;@6bc24e72,[Ljava.lang.String;@724aefc3),Annotation([Ljava.lang.String;@7cfb4736,[Ljava.lang.String;@2a097d77,[Ledu.cmu.lti.nlp.amr.Dependency;@53c1179a),Annotation([Ljava.lang.String;@7650ded6,[Ljava.lang.String;@5034f5dd,[Ljava.lang.String;@31b7d869),Annotation([Ljava.lang.String;@6a916402,[Ljava.lang.String;@1a47a1e8,[Ledu.cmu.lti.nlp.amr.Entity;@6d2a2560))
AMR:
(a / agree-01, ARG1, r4 / recommend-01)
(a / agree-01, ARG2, c / country)
(c / country, name, n2 / name)
(d2 / diversify-01, ARG0, o / organization)
(d2 / diversify-01, ARG1, e / effort)
(d2 / diversify-01, ARG2, d / develop-02)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Kyrgyzstan")
(o / organization, name, n / name)
(o / organization, op, d3 / dispute-01)
(p2 / peaceful, op, r3 / recommend-01)
(r / recommend-01, ARG1, e / effort)
(r2 / role, op, d3 / dispute-01)
(r3 / recommend-01, ARG2, o / organization)
(r3 / recommend-01, location, p / peace)
(r4 / recommend-01, ARG1, d3 / dispute-01)

Decoded in 759,993 microseconds
Sentence: China and Kyrgyzstan further agree in the communique that the Shanghai Cooperation Organization's purposes and principles conform to reality and the development trend and the SCO's activities are conducive to regional peace and stability.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 28-29:  activities => activity
Span 4-5:  agree => agree-01
Span 17-18:  conform => conform-01
Span 22-23:  development => develop-02
Span 3-4:  further => further
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 33-34:  peace => peace
Span 16-17:  principles => principle
Span 14-15:  purposes => purpose
Span 32-33:  regional => region
Span 10-13:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 35-36:  stability => stability
Span 23-24:  trend => trend

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 28-29:  activities => activity
Oracle Span 4-5:  agree => agree-01
Oracle Span 1-2:  and => and
Oracle Span 15-16:  and => and
Oracle Span 20-21:  and => and
Oracle Span 24-25:  and => and
Oracle Span 34-35:  and => and
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 7-8:  communique => communique
Oracle Span 30-31:  conducive => conducive
Oracle Span 17-18:  conform => conform-01
Oracle Span 22-23:  development => develop-02
Oracle Span 3-4:  further => further
Oracle Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 33-34:  peace => peace
Oracle Span 16-17:  principles => principle
Oracle Span 14-15:  purposes => purpose
Oracle Span 19-20:  reality => reality
Oracle Span 32-33:  regional => region
Oracle Span 10-13:  Shanghai Cooperation Organization => (organization :name (name :op "Organization" :op "Cooperation" :op "Shanghai"))
Oracle Span 35-36:  stability => stability
Oracle Span 23-24:  trend => trend

Incorrect span: Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Missing span: China => (country :name (name :op "China"))
Missing span: Shanghai Cooperation Organization => (organization :name (name :op "Organization" :op "Cooperation" :op "Shanghai"))
Missing span: communique => communique
Missing span: and => and
Missing span: conducive => conducive
Missing span: and => and
Missing span: and => and
Missing span: reality => reality
Missing span: and => and
Missing span: and => and
Dependencies:
1	China	_	NNP	NNP	_	5	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Kyrgyzstan	_	NNP	NNP	_	1	conj	_	_
4	further	_	RB	RB	_	5	advmod	_	_
5	agree	_	VBP	VBP	_	0	root	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	communique	_	NN	NN	_	6	pobj	_	_
9	that	_	IN	IN	_	18	mark	_	_
10	the	_	DT	DT	_	13	det	_	_
11	Shanghai	_	NNP	NNP	_	13	nn	_	_
12	Cooperation	_	NNP	NNP	_	13	nn	_	_
13	Organization	_	NNP	NNP	_	15	poss	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	purposes	_	NNS	NNS	_	18	nsubj	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	principles	_	NNS	NNS	_	15	conj	_	_
18	conform	_	VBP	VBP	_	5	ccomp	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	reality	_	NN	NN	_	19	pobj	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	the	_	DT	DT	_	24	det	_	_
23	development	_	NN	NN	_	24	nn	_	_
24	trend	_	NN	NN	_	20	conj	_	_
25	and	_	CC	CC	_	18	cc	_	_
26	the	_	DT	DT	_	27	det	_	_
27	SCO	_	NNP	NNP	_	29	poss	_	_
28	's	_	POS	POS	_	27	possessive	_	_
29	activities	_	NNS	NNS	_	31	nsubj	_	_
30	are	_	VBP	VBP	_	31	cop	_	_
31	conducive	_	JJ	JJ	_	18	conj	_	_
32	to	_	TO	TO	_	31	prep	_	_
33	regional	_	JJ	JJ	_	34	amod	_	_
34	peace	_	NN	NN	_	32	pobj	_	_
35	and	_	CC	CC	_	34	cc	_	_
36	stability	_	NN	NN	_	34	conj	_	_
37	.	_	.	.	_	5	punct	_	_

Oracle:
(a / agree-01, ARG0, a2 / and)
(a / agree-01, ARG1, a3 / and)
(a / agree-01, instrument, c3 / communique)
(a / agree-01, mod, f / further)
(a2 / and, op, c / country)
(a2 / and, op, c2 / country)
(a3 / and, op, c4 / conform-01)
(a3 / and, op, c5 / conducive)
(a4 / and, op, p / purpose)
(a4 / and, op, p2 / principle)
(a5 / and, op, a6 / activity)
(a5 / and, op, t / trend)
(a6 / activity, poss, o / organization)
(a7 / and, op, p3 / peace)
(a7 / and, op, s / stability)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c4 / conform-01, ARG1, a4 / and)
(c4 / conform-01, ARG2, r / reality)
(c5 / conducive, domain, a5 / and)
(c5 / conducive, purpose, a7 / and)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Cooperation")
(n3 / name, op, "Organization")
(n3 / name, op, "Shanghai")
(o / organization, name, n3 / name)
(p / purpose, poss, o / organization)
(p2 / principle, poss, o / organization)
(p3 / peace, mod, r2 / region)
(s / stability, mod, r2 / region)
(t / trend, mod, d / develop-02)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),stability,stability,false), Span(33,34,List(1),peace,peace,false), Span(32,33,List(2),regional,region,false), Span(28,29,List(3),activities,activity,false), Span(23,24,List(4),trend,trend,false), Span(22,23,List(5),development,develop-02,false), Span(17,18,List(6),conform,conform-01,false), Span(16,17,List(7),principles,principle,false), Span(14,15,List(8),purposes,purpose,false), Span(10,13,List(13, 12, 11, 10, 9),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(4,5,List(14),agree,agree-01,false), Span(3,4,List(15),further,further,false), Span(2,3,List(18, 17, 16),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false)),Map(2 -> region, 5 -> develop-02, 12 -> "Cooperation", 15 -> further, 8 -> purpose, 18 -> "Kyrgyzstan", 7 -> principle, 17 -> name, 1 -> peace, 4 -> trend, 11 -> "Shanghai", 14 -> agree-01, 6 -> conform-01, 0 -> stability, 9 -> organization, 16 -> country, 3 -> activity, 10 -> name, 13 -> "Organization"),Map(n -> name, t -> trend, p2 -> principle, s -> stability, d -> develop-02, p -> peace, a -> activity, r -> region, a2 -> agree-01, c -> conform-01, f -> further, o -> organization, p3 -> purpose, n2 -> name, c2 -> country))),[Ljava.lang.String;@62d1dc3c,Annotation([Ljava.lang.String;@3811510,[Ljava.lang.String;@24eeac69,[Ljava.lang.String;@18539cb1),Annotation([Ljava.lang.String;@748f93bb,[Ljava.lang.String;@7f2d31af,[Ledu.cmu.lti.nlp.amr.Dependency;@2e7157c7),Annotation([Ljava.lang.String;@2a43e0ac,[Ljava.lang.String;@22d9bc14,[Ljava.lang.String;@346f41a9),Annotation([Ljava.lang.String;@1084f78c,[Ljava.lang.String;@25f723b0,[Ledu.cmu.lti.nlp.amr.Entity;@4aa11206))
AMR:
(a2 / agree-01, ARG0, p3 / purpose)
(a2 / agree-01, ARG1, c / conform-01)
(a2 / agree-01, ARG2, c2 / country)
(a2 / agree-01, degree, f / further)
(c / conform-01, ARG0, p2 / principle)
(c / conform-01, ARG1, a / activity)
(c2 / country, name, n2 / name)
(d / develop-02, ARG0, c2 / country)
(d / develop-02, ARG1, t / trend)
(n / name, op, "Cooperation")
(n / name, op, "Organization")
(n / name, op, "Shanghai")
(n2 / name, op, "Kyrgyzstan")
(o / organization, name, n / name)
(p / peace, mod, r / region)
(p3 / purpose, poss, o / organization)
(r / region, poss, c2 / country)
(s / stability, op, d / develop-02)

Decoded in 583,672 microseconds
Sentence: The communique said China and Kyrgyzstan are willing to work together with other members of the Shanghai Cooperation Organization and take effective measures in fighting terrorism, separatism, extremism, drug trafficking, illegal immigration and cross-border crimes.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 40-41:  crimes => crime
Span 37-38:  cross => cross-02
Span 31-32:  drug => drug
Span 21-22:  effective => effective
Span 29-30:  extremism => extremism
Span 24-25:  fighting => fight-01
Span 35-36:  immigration => immigrate-01
Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 22-23:  measures => measure
Span 13-14:  members => (have-org-role-91 :ARG2 member)
Span 12-13:  other => other
Span 2-3:  said => say-01
Span 16-19:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 25-26:  terrorism => terrorism
Span 10-11:  together => together
Span 7-8:  willing => will-02

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 19-20:  and => and
Oracle Span 36-37:  and => and
Oracle Span 39-40:  border => border
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 1-2:  communique => communique
Oracle Span 40-41:  crimes => crime
Oracle Span 37-38:  cross => cross-02
Oracle Span 31-32:  drug => drug
Oracle Span 21-22:  effective => effective
Oracle Span 29-30:  extremism => extremism
Oracle Span 24-25:  fighting => fight-01
Oracle Span 35-36:  immigration => immigrate-01
Oracle Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 22-23:  measures => measure
Oracle Span 13-14:  members => (have-org-role-91 :ARG2 member)
Oracle Span 12-13:  other => other
Oracle Span 2-3:  said => say-01
Oracle Span 27-28:  separatism => separatism
Oracle Span 16-19:  Shanghai Cooperation Organization => (organization :name (name :op "Organization" :op "Cooperation" :op "Shanghai"))
Oracle Span 20-21:  take => take-01
Oracle Span 25-26:  terrorism => terrorism
Oracle Span 10-11:  together => together
Oracle Span 32-33:  trafficking => traffic-00
Oracle Span 7-8:  willing => will-02
Oracle Span 9-10:  work => work-01

Incorrect span: Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Missing span: China => (country :name (name :op "China"))
Missing span: Shanghai Cooperation Organization => (organization :name (name :op "Organization" :op "Cooperation" :op "Shanghai"))
Missing span: and => and
Missing span: take => take-01
Missing span: and => and
Missing span: border => border
Missing span: trafficking => traffic-00
Missing span: separatism => separatism
Missing span: work => work-01
Missing span: and => and
Missing span: communique => communique
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	communique	_	NN	NN	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	China	_	NNP	NNP	_	8	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	Kyrgyzstan	_	NNP	NNP	_	4	conj	_	_
7	are	_	VBP	VBP	_	8	cop	_	_
8	willing	_	JJ	JJ	_	3	ccomp	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	work	_	VB	VB	_	8	xcomp	_	_
11	together	_	RB	RB	_	10	advmod	_	_
12	with	_	IN	IN	_	10	prep	_	_
13	other	_	JJ	JJ	_	14	amod	_	_
14	members	_	NNS	NNS	_	12	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	19	det	_	_
17	Shanghai	_	NNP	NNP	_	19	nn	_	_
18	Cooperation	_	NNP	NNP	_	19	nn	_	_
19	Organization	_	NNP	NNP	_	15	pobj	_	_
20	and	_	CC	CC	_	10	cc	_	_
21	take	_	VB	VB	_	10	conj	_	_
22	effective	_	JJ	JJ	_	23	amod	_	_
23	measures	_	NNS	NNS	_	21	dobj	_	_
24	in	_	IN	IN	_	21	prep	_	_
25	fighting	_	VBG	VBG	_	24	pcomp	_	_
26	terrorism	_	NN	NN	_	25	dobj	_	_
27	,	_	,	,	_	26	punct	_	_
28	separatism	_	NN	NN	_	26	conj	_	_
29	,	_	,	,	_	26	punct	_	_
30	extremism	_	NN	NN	_	26	conj	_	_
31	,	_	,	,	_	26	punct	_	_
32	drug	_	NN	NN	_	33	nn	_	_
33	trafficking	_	NN	NN	_	26	conj	_	_
34	,	_	,	,	_	26	punct	_	_
35	illegal	_	JJ	JJ	_	36	amod	_	_
36	immigration	_	NN	NN	_	26	conj	_	_
37	and	_	CC	CC	_	26	cc	_	_
38	cross-border	_	JJ	JJ	_	39	amod	_	_
39	crimes	_	NNS	NNS	_	26	conj	_	_
40	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a2 / and, op, t2 / take-01)
(a2 / and, op, w2 / work-01)
(a3 / and, op, c4 / crime)
(a3 / and, op, e2 / extremism)
(a3 / and, op, i / immigrate-01)
(a3 / and, op, s2 / separatism)
(a3 / and, op, t3 / terrorism)
(a3 / and, op, t4 / traffic-00)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c5 / cross-02, ARG0, c4 / crime)
(c5 / cross-02, ARG1, b / border)
(f / fight-01, ARG1, a3 / and)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m / member)
(m2 / measure, mod, e / effective)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Cooperation")
(n3 / name, op, "Organization")
(n3 / name, op, "Shanghai")
(o2 / organization, name, n3 / name)
(s / say-01, ARG0, c / communique)
(s / say-01, ARG1, w / will-02)
(t2 / take-01, ARG0, a / and)
(t2 / take-01, ARG1, m2 / measure)
(t2 / take-01, purpose, f / fight-01)
(t4 / traffic-00, ARG1, d / drug)
(w / will-02, ARG0, a / and)
(w / will-02, ARG1, a2 / and)
(w2 / work-01, ARG0, a / and)
(w2 / work-01, manner, t / together)

Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),crimes,crime,false), Span(37,38,List(1),cross,cross-02,false), Span(35,36,List(2),immigration,immigrate-01,false), Span(31,32,List(3),drug,drug,false), Span(29,30,List(4),extremism,extremism,false), Span(25,26,List(5),terrorism,terrorism,false), Span(24,25,List(6),fighting,fight-01,false), Span(22,23,List(7),measures,measure,false), Span(21,22,List(8),effective,effective,false), Span(16,19,List(13, 12, 11, 10, 9),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(13,14,List(15, 14),members,(have-org-role-91 :ARG2 member),false), Span(12,13,List(16),other,other,false), Span(10,11,List(17),together,together,false), Span(7,8,List(18),willing,will-02,false), Span(5,6,List(21, 20, 19),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(2,3,List(22),said,say-01,false)),Map(2 -> immigrate-01, 5 -> terrorism, 12 -> "Cooperation", 15 -> member, 8 -> effective, 21 -> "Kyrgyzstan", 18 -> will-02, 7 -> measure, 17 -> together, 1 -> cross-02, 4 -> extremism, 11 -> "Shanghai", 14 -> have-org-role-91, 20 -> name, 6 -> fight-01, 22 -> say-01, 0 -> crime, 9 -> organization, 16 -> other, 19 -> country, 3 -> drug, 10 -> name, 13 -> "Organization"),Map(e -> extremism, w -> will-02, n -> name, h -> have-org-role-91, t -> terrorism, m2 -> member, e2 -> effective, s -> say-01, d -> drug, m -> measure, c3 -> country, o2 -> other, t2 -> together, i -> immigrate-01, c -> crime, f -> fight-01, o -> organization, n2 -> name, c2 -> cross-02))),[Ljava.lang.String;@40d60f2,Annotation([Ljava.lang.String;@3382cf68,[Ljava.lang.String;@2f74900b,[Ljava.lang.String;@6d8796c1),Annotation([Ljava.lang.String;@2e26173,[Ljava.lang.String;@27be17c8,[Ledu.cmu.lti.nlp.amr.Dependency;@2c413ffc),Annotation([Ljava.lang.String;@7d21852b,[Ljava.lang.String;@6cd98a05,[Ljava.lang.String;@3b8ec001),Annotation([Ljava.lang.String;@1e95b653,[Ljava.lang.String;@6f6c6077,[Ledu.cmu.lti.nlp.amr.Entity;@4fc5563d))
AMR:
(c / crime, mod, d / drug)
(c2 / cross-02, ARG0, c / crime)
(c2 / cross-02, ARG1, h / have-org-role-91)
(c3 / country, name, n2 / name)
(f / fight-01, ARG0, c3 / country)
(f / fight-01, ARG1, t / terrorism)
(f / fight-01, ARG2, o / organization)
(h / have-org-role-91, ARG0, e / extremism)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m2 / member)
(i / immigrate-01, ARG1, o2 / other)
(m / measure, mod, e2 / effective)
(m / measure, op, i / immigrate-01)
(m / measure, purpose, f / fight-01)
(n / name, op, "Cooperation")
(n / name, op, "Organization")
(n / name, op, "Shanghai")
(n2 / name, op, "Kyrgyzstan")
(o / organization, name, n / name)
(s / say-01, ARG1, w / will-02)
(w / will-02, ARG0, c3 / country)
(w / will-02, ARG1, t2 / together)

Decoded in 930,231 microseconds
Sentence: The communique said China and Kyrgyzstan are also ready to expand cooperation in economy and other fields with other SCO members, promote the relations between the SCO and other countries and international organizations, and strengthen the SCO's role in maintaining regional and global peace and development.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
Spans:
Span 11-12:  cooperation => cooperate-01
Span 30-31:  countries => country
Span 48-49:  development => develop-02
Span 10-11:  expand => expand-01
Span 16-17:  fields => field
Span 45-46:  global => globe
Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 42-43:  maintaining => maintain-01
Span 20-21:  members => (have-org-role-91 :ARG2 member)
Span 33-34:  organizations => organization
Span 29-30:  other => other
Span 18-19:  other => other
Span 15-16:  other => other
Span 46-47:  peace => peace
Span 22-23:  promote => promote-02
Span 8-9:  ready => ready-01
Span 43-44:  regional => region
Span 40-41:  role => role
Span 2-3:  said => say-01
Span 36-37:  strengthen => strengthen-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 7-8:  also => also
Oracle Span 4-5:  and => and
Oracle Span 14-15:  and => and
Oracle Span 28-29:  and => and
Oracle Span 31-32:  and => and
Oracle Span 35-36:  and => and
Oracle Span 44-45:  and => and
Oracle Span 47-48:  and => and
Oracle Span 25-26:  between => between
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 1-2:  communique => communique
Oracle Span 11-12:  cooperation => cooperate-01
Oracle Span 30-31:  countries => country
Oracle Span 48-49:  development => develop-02
Oracle Span 13-14:  economy => economy
Oracle Span 10-11:  expand => expand-01
Oracle Span 16-17:  fields => field
Oracle Span 45-46:  global => globe
Oracle Span 32-33:  international => international
Oracle Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Oracle Span 42-43:  maintaining => maintain-01
Oracle Span 20-21:  members => (have-org-role-91 :ARG2 member)
Oracle Span 33-34:  organizations => organization
Oracle Span 15-16:  other => other
Oracle Span 18-19:  other => other
Oracle Span 29-30:  other => other
Oracle Span 46-47:  peace => peace
Oracle Span 22-23:  promote => promote-02
Oracle Span 8-9:  ready => ready-01
Oracle Span 43-44:  regional => region
Oracle Span 24-25:  relations => relation
Oracle Span 40-41:  role => role
Oracle Span 2-3:  said => say-01
Oracle Span 19-20:  SCO => (organization :name (name :op "SCO"))
Oracle Span 36-37:  strengthen => strengthen-01

Missing span: China => (country :name (name :op "China"))
Missing span: SCO => (organization :name (name :op "SCO"))
Missing span: also => also
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: relations => relation
Missing span: between => between
Missing span: and => and
Missing span: international => international
Missing span: and => and
Missing span: economy => economy
Missing span: and => and
Missing span: communique => communique
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	communique	_	NN	NN	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	China	_	NNP	NNP	_	9	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	Kyrgyzstan	_	NNP	NNP	_	4	conj	_	_
7	are	_	VBP	VBP	_	9	cop	_	_
8	also	_	RB	RB	_	9	advmod	_	_
9	ready	_	JJ	JJ	_	3	ccomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	expand	_	VB	VB	_	9	xcomp	_	_
12	cooperation	_	NN	NN	_	11	dobj	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	economy	_	NN	NN	_	17	nn	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	other	_	JJ	JJ	_	14	conj	_	_
17	fields	_	NNS	NNS	_	13	pobj	_	_
18	with	_	IN	IN	_	11	prep	_	_
19	other	_	JJ	JJ	_	21	amod	_	_
20	SCO	_	NNP	NNP	_	21	nn	_	_
21	members	_	NNS	NNS	_	18	pobj	_	_
22	,	_	,	,	_	11	punct	_	_
23	promote	_	VB	VB	_	11	conj	_	_
24	the	_	DT	DT	_	25	det	_	_
25	relations	_	NNS	NNS	_	23	dobj	_	_
26	between	_	IN	IN	_	25	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	SCO	_	NNP	NNP	_	26	pobj	_	_
29	and	_	CC	CC	_	25	cc	_	_
30	other	_	JJ	JJ	_	31	amod	_	_
31	countries	_	NNS	NNS	_	25	conj	_	_
32	and	_	CC	CC	_	31	cc	_	_
33	international	_	JJ	JJ	_	34	amod	_	_
34	organizations	_	NNS	NNS	_	31	conj	_	_
35	,	_	,	,	_	11	punct	_	_
36	and	_	CC	CC	_	11	cc	_	_
37	strengthen	_	VB	VB	_	11	conj	_	_
38	the	_	DT	DT	_	39	det	_	_
39	SCO	_	NNP	NNP	_	41	poss	_	_
40	's	_	POS	POS	_	39	possessive	_	_
41	role	_	NN	NN	_	37	dobj	_	_
42	in	_	IN	IN	_	37	prep	_	_
43	maintaining	_	VBG	VBG	_	42	pcomp	_	_
44	regional	_	JJ	JJ	_	47	amod	_	_
45	and	_	CC	CC	_	44	cc	_	_
46	global	_	JJ	JJ	_	44	conj	_	_
47	peace	_	NN	NN	_	43	dobj	_	_
48	and	_	CC	CC	_	47	cc	_	_
49	development	_	NN	NN	_	47	conj	_	_
50	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a3 / and, op, e / expand-01)
(a3 / and, op, p / promote-02)
(a3 / and, op, s2 / strengthen-01)
(a4 / and, op, c5 / country)
(a4 / and, op, o4 / organization)
(a5 / and, op, a8 / and)
(a5 / and, op, a9 / and)
(a7 / and, op, e2 / economy)
(a7 / and, op, f / field)
(a8 / and, op, p4 / peace)
(a9 / and, op, d2 / develop-02)
(b / between, op, a4 / and)
(b / between, op, o2 / organization)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / cooperate-01, ARG0, a / and)
(c4 / cooperate-01, ARG2, a7 / and)
(c5 / country, mod, o3 / other)
(d2 / develop-02, mod, g / globe)
(e / expand-01, ARG0, a / and)
(e / expand-01, ARG1, c4 / cooperate-01)
(f / field, mod, o5 / other)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m / member)
(m2 / maintain-01, ARG1, a5 / and)
(n / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "SCO")
(o2 / organization, name, n3 / name)
(o4 / organization, mod, i / international)
(p / promote-02, ARG0, a / and)
(p / promote-02, ARG1, r2 / relation)
(r / ready-01, ARG1, a / and)
(r / ready-01, ARG2, a3 / and)
(r / ready-01, mod, a2 / also)
(r2 / relation, mod, b / between)
(r3 / role, poss, o2 / organization)
(r3 / role, purpose, m2 / maintain-01)
(s / say-01, ARG0, c / communique)
(s / say-01, ARG1, r / ready-01)
(s2 / strengthen-01, ARG0, a / and)
(s2 / strengthen-01, ARG1, r3 / role)

Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),development,develop-02,false), Span(46,47,List(1),peace,peace,false), Span(45,46,List(2),global,globe,false), Span(43,44,List(3),regional,region,false), Span(42,43,List(4),maintaining,maintain-01,false), Span(40,41,List(5),role,role,false), Span(36,37,List(6),strengthen,strengthen-01,false), Span(33,34,List(7),organizations,organization,false), Span(30,31,List(8),countries,country,false), Span(29,30,List(9),other,other,false), Span(22,23,List(10),promote,promote-02,false), Span(20,21,List(12, 11),members,(have-org-role-91 :ARG2 member),false), Span(18,19,List(13),other,other,false), Span(16,17,List(14),fields,field,false), Span(15,16,List(15),other,other,false), Span(11,12,List(16),cooperation,cooperate-01,false), Span(10,11,List(17),expand,expand-01,false), Span(8,9,List(18),ready,ready-01,false), Span(5,6,List(21, 20, 19),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(2,3,List(22),said,say-01,false)),Map(2 -> globe, 5 -> role, 12 -> member, 15 -> other, 8 -> country, 21 -> "Kyrgyzstan", 18 -> ready-01, 7 -> organization, 17 -> expand-01, 1 -> peace, 4 -> maintain-01, 11 -> have-org-role-91, 14 -> field, 20 -> name, 6 -> strengthen-01, 22 -> say-01, 0 -> develop-02, 9 -> other, 16 -> cooperate-01, 19 -> country, 3 -> region, 10 -> promote-02, 13 -> other),Map(e -> expand-01, n -> name, r3 -> ready-01, h -> have-org-role-91, s2 -> say-01, o3 -> other, m2 -> member, p2 -> promote-02, s -> strengthen-01, d -> develop-02, m -> maintain-01, p -> peace, g -> globe, r2 -> role, c3 -> country, o2 -> other, r -> region, c -> country, f -> field, o4 -> other, o -> organization, c2 -> cooperate-01))),[Ljava.lang.String;@286090c,Annotation([Ljava.lang.String;@31120021,[Ljava.lang.String;@3df1a1ac,[Ljava.lang.String;@58606c91),Annotation([Ljava.lang.String;@6a9cd0f8,[Ljava.lang.String;@4baed682,[Ledu.cmu.lti.nlp.amr.Dependency;@7be2f29a),Annotation([Ljava.lang.String;@203d1d93,[Ljava.lang.String;@2c2a027c,[Ljava.lang.String;@118dcbbd),Annotation([Ljava.lang.String;@7d979d34,[Ljava.lang.String;@350ec690,[Ledu.cmu.lti.nlp.amr.Entity;@49cb1baf))
AMR:
(c / country, mod, o2 / other)
(c2 / cooperate-01, ARG0, c / country)
(c2 / cooperate-01, ARG2, f / field)
(c3 / country, name, n / name)
(d / develop-02, ARG0, c / country)
(d / develop-02, ARG1, r / region)
(e / expand-01, ARG0, c3 / country)
(e / expand-01, ARG1, c2 / cooperate-01)
(f / field, mod, o4 / other)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m2 / member)
(m / maintain-01, ARG1, p / peace)
(n / name, op, "Kyrgyzstan")
(p / peace, mod, g / globe)
(p2 / promote-02, ARG0, o / organization)
(p2 / promote-02, ARG1, c2 / cooperate-01)
(r3 / ready-01, ARG1, o3 / other)
(r3 / ready-01, ARG2, e / expand-01)
(s / strengthen-01, ARG1, r2 / role)
(s / strengthen-01, ARG2, m / maintain-01)
(s / strengthen-01, concession, e / expand-01)
(s2 / say-01, ARG1, r3 / ready-01)

Decoded in 955,421 microseconds
Sentence: 2004-10-09

mkDayMonthYear(2004-10-09,09,10,2004)
mkDayMonthYear(2004-10-09,09,10,2004)
Spans:
Span 0-1:  2004-10-09 => (date-entity :day 9 :month 10 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2004-10-09 => (date-entity :day 9 :month 10 :year 2004)

Dependencies:
1	2004-10-09	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 9)
(d / date-entity, month, 10)
(d / date-entity, year, 2004)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-10-09,(date-entity :day 9 :month 10 :year 2004),false)),Map(2 -> 10, 1 -> 9, 0 -> date-entity, 3 -> 2004),Map(2 -> 2004, d -> date-entity, 1 -> 10, 9 -> 9))),[Ljava.lang.String;@3664f108,Annotation([Ljava.lang.String;@77dba4cd,[Ljava.lang.String;@34a2d6e0,[Ljava.lang.String;@2525a5b8),Annotation([Ljava.lang.String;@3458eca5,[Ljava.lang.String;@1e0fdb2f,[Ledu.cmu.lti.nlp.amr.Dependency;@3c380bd8),Annotation([Ljava.lang.String;@34b87182,[Ljava.lang.String;@47768e74,[Ljava.lang.String;@2740e316),Annotation([Ljava.lang.String;@5b5a4aed,[Ljava.lang.String;@2c991465,[Ledu.cmu.lti.nlp.amr.Entity;@5fef2aac))
AMR:
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2004)

Decoded in 8,431 microseconds
Sentence: Viet Nam (VN); Germany (DE)

NER Entity: (person :name (name :op "Viet" :op "Nam"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "DE"))
Spans:
Span 5-6:  ; => and
Span 0-2:  Viet Nam => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  ; => and
Oracle Span 6-7:  Germany => (country :name (name :op "Germany"))
Oracle Span 0-2:  Viet Nam => (country :name (name :op "Vietnam"))

Missing span: Germany => (country :name (name :op "Germany"))
Dependencies:
1	Viet	_	NNP	NNP	_	2	nn	_	_
2	Nam	_	NNP	NNP	_	0	root	_	_
3	(	_	(	(	_	4	punct	_	_
4	VN	_	NNP	NNP	_	2	appos	_	_
5	)	_	)	)	_	4	punct	_	_
6	;	_	:	:	_	2	punct	_	_
7	Germany	_	NNP	NNP	_	9	nn	_	_
8	(	_	(	(	_	9	punct	_	_
9	DE	_	NN	NN	_	2	dep	_	_
10	)	_	)	)	_	9	punct	_	_

Oracle:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),;,and,false), Span(0,2,List(3, 2, 1),Viet Nam,(country :name (name :op "Vietnam")),false)),Map(2 -> name, 1 -> country, 0 -> and, 3 -> "Vietnam"),Map(n -> name, a -> and, c -> country))),[Ljava.lang.String;@7f973a14,Annotation([Ljava.lang.String;@76130a29,[Ljava.lang.String;@124d02b2,[Ljava.lang.String;@3451f01d),Annotation([Ljava.lang.String;@72503b19,[Ljava.lang.String;@1cfc2538,[Ledu.cmu.lti.nlp.amr.Dependency;@66deec87),Annotation([Ljava.lang.String;@5d342959,[Ljava.lang.String;@2ecf5915,[Ljava.lang.String;@53e76c11),Annotation([Ljava.lang.String;@42cc183e,[Ljava.lang.String;@3e4e8fdf,[Ledu.cmu.lti.nlp.amr.Entity;@6a1d6ef2))
AMR:
(a / and, op, c / country)
(c / country, name, n / name)
(n / name, op, "Vietnam")

Decoded in 16,650 microseconds
Sentence: International; Government; technology; politics; economy; money; leader

Spans:
Span 11-12:  ; => and
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 10-11:  money => money
Span 6-7:  politics => politics
Span 4-5:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 8-9:  economy => economy
Oracle Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  International => international
Oracle Span 12-13:  leader => (person :ARG0-of lead-02)
Oracle Span 10-11:  money => money
Oracle Span 6-7:  politics => politics
Oracle Span 4-5:  technology => technology

Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Extra span: ; => and
Missing span: leader => (person :ARG0-of lead-02)
Missing span: economy => economy
Missing span: International => international
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	International	_	NNP	NNP	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	Government	_	NNP	NNP	_	1	dep	_	_
4	;	_	:	:	_	3	punct	_	_
5	technology	_	NN	NN	_	3	dep	_	_
6	;	_	:	:	_	3	punct	_	_
7	politics	_	NNS	NNS	_	3	dep	_	_
8	;	_	:	:	_	7	punct	_	_
9	economy	_	NN	NN	_	7	dep	_	_
10	;	_	:	:	_	3	punct	_	_
11	money	_	NN	NN	_	3	dep	_	_
12	;	_	:	:	_	11	punct	_	_
13	leader	_	NN	NN	_	11	dep	_	_

Oracle:
(a / and, op, e / economy)
(a / and, op, g / government-organization)
(a / and, op, i / international)
(a / and, op, m / money)
(a / and, op, p / politics)
(a / and, op, p2 / person)
(a / and, op, t / technology)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),;,and,false), Span(10,11,List(1),money,money,false), Span(9,10,List(2),;,and,false), Span(7,8,List(3),;,and,false), Span(6,7,List(4),politics,politics,false), Span(5,6,List(5),;,and,false), Span(4,5,List(6),technology,technology,false), Span(3,4,List(7),;,and,false), Span(1,2,List(8),;,and,false)),Map(2 -> and, 5 -> and, 8 -> and, 7 -> and, 1 -> money, 4 -> politics, 6 -> technology, 0 -> and, 3 -> and),Map(t -> technology, a3 -> and, a6 -> and, m -> money, p -> politics, a -> and, a5 -> and, a2 -> and, a4 -> and))),[Ljava.lang.String;@2721044,Annotation([Ljava.lang.String;@205df5dc,[Ljava.lang.String;@6aa7b67f,[Ljava.lang.String;@6bcc3f27),Annotation([Ljava.lang.String;@79aee22a,[Ljava.lang.String;@36920bd6,[Ledu.cmu.lti.nlp.amr.Dependency;@61514735),Annotation([Ljava.lang.String;@6bee793f,[Ljava.lang.String;@655f69da,[Ljava.lang.String;@43b5021c),Annotation([Ljava.lang.String;@28369db0,[Ljava.lang.String;@30893e08,[Ledu.cmu.lti.nlp.amr.Entity;@2e86807a))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, a5 / and)
(a4 / and, op, a3 / and)
(a5 / and, op, a4 / and)
(a5 / and, op, p / politics)
(a5 / and, op, t / technology)
(a6 / and, op, a5 / and)
(a6 / and, op, m / money)

Decoded in 52,268 microseconds
Sentence: German Chancellor Gerhard Schroeder attended meetings with Vietnamese government leaders after the 5th Asia-Europe Meeting summit in Hanoi.

NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Gerhard" :op "Schroeder"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting"))
NER Entity: (country :name (name :op "Hanoi"))
NER Entity: (country :name (name :op "Hanoi"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 10-11:  after => after
Span 13-15:  Asia - => (organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting"))
Span 4-5:  attended => attend-01
Span 1-2:  Chancellor => (have-org-role-91 :ARG2 chancellor)
Span 2-4:  Gerhard Schroeder => (person :name (name :op "Schroeder" :op "Gerhard"))
Span 0-1:  German => (country :name (name :op "Germany"))
Span 9-10:  leaders => (person :ARG0-of lead-02)
Span 16-17:  Meeting => meet-03
Span 5-6:  meetings => meet-03
Span 17-18:  summit => summit

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 10-11:  after => after
Oracle Span 13-17:  Asia - Europe Meeting => (organization :name (name :op "Meeting" :op "Asia-Europe"))
Oracle Span 4-5:  attended => attend-01
Oracle Span 1-2:  Chancellor => (have-org-role-91 :ARG2 chancellor)
Oracle Span 2-4:  Gerhard Schroeder => (person :name (name :op "Schroeder" :op "Gerhard"))
Oracle Span 0-1:  German => (country :name (name :op "Germany"))
Oracle Span 8-9:  government => (government-organization :ARG0-of govern-01)
Oracle Span 19-20:  Hanoi => (city :name (name :op "Hanoi"))
Oracle Span 9-10:  leaders => (person :ARG0-of lead-02)
Oracle Span 5-6:  meetings => meet-03
Oracle Span 17-18:  summit => summit
Oracle Span 7-8:  Vietnamese => (country :name (name :op "Vietnam"))

Extra span: Meeting => meet-03
Extra span: Asia - => (organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting"))
Missing span: Asia - Europe Meeting => (organization :name (name :op "Meeting" :op "Asia-Europe"))
Missing span: Hanoi => (city :name (name :op "Hanoi"))
Missing span: Vietnamese => (country :name (name :op "Vietnam"))
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	German	_	NNP	NNP	_	4	nn	_	_
2	Chancellor	_	NNP	NNP	_	4	nn	_	_
3	Gerhard	_	NNP	NNP	_	4	nn	_	_
4	Schroeder	_	NNP	NNP	_	5	nsubj	_	_
5	attended	_	VBD	VBD	_	0	root	_	_
6	meetings	_	NNS	NNS	_	5	dobj	_	_
7	with	_	IN	IN	_	5	prep	_	_
8	Vietnamese	_	JJ	JJ	_	10	amod	_	_
9	government	_	NN	NN	_	10	nn	_	_
10	leaders	_	NNS	NNS	_	7	pobj	_	_
11	after	_	IN	IN	_	5	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	5th	_	JJ	JJ	_	14	amod	_	_
14	Asia-Europe	_	NN	NN	_	11	pobj	_	_
15	Meeting	_	VBG	VBG	_	14	vmod	_	_
16	summit	_	NN	NN	_	15	dobj	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	Hanoi	_	NNP	NNP	_	17	pobj	_	_
19	.	_	.	.	_	5	punct	_	_

Oracle:
(a / attend-01, ARG0, p / person)
(a / attend-01, ARG1, m / meet-03)
(a / attend-01, time, a2 / after)
(a2 / after, op, s / summit)
(c / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / city, name, n5 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, c2 / chancellor)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, g / government-organization)
(m / meet-03, ARG0, p / person)
(m / meet-03, ARG1, p2 / person)
(n / name, op, "Gerhard")
(n / name, op, "Schroeder")
(n2 / name, op, "Germany")
(n3 / name, op, "Vietnam")
(n4 / name, op, "Asia-Europe")
(n4 / name, op, "Meeting")
(n5 / name, op, "Hanoi")
(o / organization, name, n4 / name)
(p / person, name, n / name)
(s / summit, location, c4 / city)
(s / summit, mod, o / organization)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),summit,summit,false), Span(16,17,List(1),Meeting,meet-03,false), Span(13,15,List(7, 6, 5, 4, 3, 2),Asia -,(organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting")),false), Span(10,11,List(8),after,after,false), Span(9,10,List(10, 9),leaders,(person :ARG0-of lead-02),false), Span(5,6,List(11),meetings,meet-03,false), Span(4,5,List(12),attended,attend-01,false), Span(2,4,List(16, 15, 14, 13),Gerhard Schroeder,(person :name (name :op "Schroeder" :op "Gerhard")),false), Span(1,2,List(18, 17),Chancellor,(have-org-role-91 :ARG2 chancellor),false), Span(0,1,List(21, 20, 19),German,(country :name (name :op "Germany")),false)),Map(2 -> organization, 5 -> "-", 12 -> attend-01, 15 -> "Schroeder", 8 -> after, 21 -> "Germany", 18 -> chancellor, 7 -> "Meeting", 17 -> have-org-role-91, 1 -> meet-03, 4 -> "Asia", 11 -> meet-03, 14 -> name, 20 -> name, 6 -> "Europe", 0 -> summit, 9 -> person, 16 -> "Gerhard", 19 -> country, 3 -> name, 10 -> lead-02, 13 -> person),Map(n -> name, h -> have-org-role-91, m2 -> meet-03, p2 -> person, s -> summit, m -> meet-03, p -> person, n3 -> name, a -> after, a2 -> attend-01, c -> chancellor, l -> lead-02, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@4548d254,Annotation([Ljava.lang.String;@590f0c50,[Ljava.lang.String;@208f0007,[Ljava.lang.String;@3a90c13c),Annotation([Ljava.lang.String;@39c96e48,[Ljava.lang.String;@188598ad,[Ledu.cmu.lti.nlp.amr.Dependency;@40d23c82),Annotation([Ljava.lang.String;@7cf78c85,[Ljava.lang.String;@ebe067d,[Ljava.lang.String;@3a4ab7f7),Annotation([Ljava.lang.String;@6badba10,[Ljava.lang.String;@2b7e8044,[Ledu.cmu.lti.nlp.amr.Entity;@550de6b8))
AMR:
(a / after, op, m / meet-03)
(a2 / attend-01, ARG0, p2 / person)
(a2 / attend-01, ARG1, m2 / meet-03)
(a2 / attend-01, time, a / after)
(c2 / country, name, n3 / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, c / chancellor)
(l / lead-02, ARG0, p / person)
(m / meet-03, ARG0, o / organization)
(m / meet-03, ARG1, s / summit)
(m2 / meet-03, ARG1, p / person)
(n / name, op, "-")
(n / name, op, "Asia")
(n / name, op, "Europe")
(n / name, op, "Meeting")
(n2 / name, op, "Gerhard")
(n2 / name, op, "Schroeder")
(n3 / name, op, "Germany")
(o / organization, name, n / name)
(p2 / person, name, n2 / name)

Decoded in 216,748 microseconds
Sentence: German and Vietnamese officials signed 5 documents on financial, technical and business cooperation totaling over 260 million dollars.

NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 12-13:  business => business
Span 13-14:  cooperation => cooperate-01
Span 6-7:  documents => document
Span 18-19:  dollars => (monetary-quantity :unit dollar)
Span 0-1:  German => (country :name (name :op "Germany"))
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 10-11:  technical => technical

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 5-6:  5 => 5
Oracle Span 1-2:  and => and
Oracle Span 11-12:  and => and
Oracle Span 12-13:  business => business
Oracle Span 13-14:  cooperation => cooperate-01
Oracle Span 6-7:  documents => document
Oracle Span 18-19:  dollars => (monetary-quantity :unit dollar)
Oracle Span 8-9:  financial => finance
Oracle Span 0-1:  German => (have-org-role-91 :ARG1 (country :name (name :op "Germany")))
Oracle Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 15-16:  over => over
Oracle Span 4-5:  signed => sign-01
Oracle Span 10-11:  technical => technical
Oracle Span 14-15:  totaling => total-01
Oracle Span 2-3:  Vietnamese => (country :name (name :op "Vietnam"))

Incorrect span: German => (country :name (name :op "Germany"))
Missing span: German => (have-org-role-91 :ARG1 (country :name (name :op "Germany")))
Missing span: Vietnamese => (country :name (name :op "Vietnam"))
Missing span: signed => sign-01
Missing span: totaling => total-01
Missing span: over => over
Missing span: and => and
Missing span: 5 => 5
Missing span: and => and
Missing span: financial => finance
Dependencies:
1	German	_	JJ	JJ	_	4	amod	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	Vietnamese	_	JJ	JJ	_	1	conj	_	_
4	officials	_	NNS	NNS	_	5	nsubj	_	_
5	signed	_	VBD	VBD	_	0	root	_	_
6	5	_	CD	CD	_	7	num	_	_
7	documents	_	NNS	NNS	_	5	dobj	_	_
8	on	_	IN	IN	_	5	prep	_	_
9	financial	_	JJ	JJ	_	14	amod	_	_
10	,	_	,	,	_	9	punct	_	_
11	technical	_	JJ	JJ	_	9	conj	_	_
12	and	_	CC	CC	_	9	cc	_	_
13	business	_	NN	NN	_	9	conj	_	_
14	cooperation	_	NN	NN	_	8	pobj	_	_
15	totaling	_	VBG	VBG	_	5	xcomp	_	_
16	over	_	RP	RP	_	15	prt	_	_
17	260	_	CD	CD	_	18	number	_	_
18	million	_	CD	CD	_	19	num	_	_
19	dollars	_	NNS	NNS	_	15	dobj	_	_
20	.	_	.	.	_	5	punct	_	_

Oracle:
(a2 / and, op, b / business)
(a2 / and, op, f / finance)
(a2 / and, op, t / technical)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / cooperate-01, ARG2, a2 / and)
(d / document, quant, 5 / 5)
(d / document, topic, c3 / cooperate-01)
(h / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, o2 / official)
(m / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Germany")
(n2 / name, op, "Vietnam")
(o3 / over, op, m / monetary-quantity)
(s / sign-01, ARG0, a / and)
(s / sign-01, ARG1, d / document)
(t2 / total-01, ARG1, d / document)
(t2 / total-01, ARG2, o3 / over)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(13,14,List(2),cooperation,cooperate-01,false), Span(12,13,List(3),business,business,false), Span(10,11,List(4),technical,technical,false), Span(6,7,List(5),documents,document,false), Span(3,4,List(7, 6),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(10, 9, 8),German,(country :name (name :op "Germany")),false)),Map(2 -> cooperate-01, 5 -> document, 8 -> country, 7 -> official, 1 -> dollar, 4 -> technical, 6 -> have-org-role-91, 9 -> name, 0 -> monetary-quantity, 10 -> "Germany", 3 -> business),Map(n -> name, h -> have-org-role-91, t -> technical, b -> business, d -> dollar, m -> monetary-quantity, d2 -> document, c -> cooperate-01, o -> official, c2 -> country))),[Ljava.lang.String;@3a1706e1,Annotation([Ljava.lang.String;@3c6c4689,[Ljava.lang.String;@63cf9de0,[Ljava.lang.String;@594d9f07),Annotation([Ljava.lang.String;@5befbac1,[Ljava.lang.String;@5e9f73b,[Ledu.cmu.lti.nlp.amr.Dependency;@1a565afb),Annotation([Ljava.lang.String;@2fd64b11,[Ljava.lang.String;@949c598,[Ljava.lang.String;@43d3aba5),Annotation([Ljava.lang.String;@6bfaa0a6,[Ljava.lang.String;@76e9f00b,[Ledu.cmu.lti.nlp.amr.Entity;@314b9e4b))
AMR:
(c / cooperate-01, ARG0, c2 / country)
(c / cooperate-01, ARG1, h / have-org-role-91)
(c / cooperate-01, ARG2, m / monetary-quantity)
(c / cooperate-01, mod, b / business)
(c2 / country, name, n / name)
(d2 / document, topic, c / cooperate-01)
(h / have-org-role-91, ARG1, t / technical)
(h / have-org-role-91, ARG2, o / official)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Germany")

Decoded in 152,637 microseconds
Sentence: Media reports stated on 10 October 2004 that Vietnamese and German officials have pledged to further Vietnamese and German relations in such fields as investment, trade and technology and to support each other in the United Nations (UN).

mkDayMonthYear(10	October	2004,10,October,2004)
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "UN"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 4-7:  10 October 2004 => (date-entity :day 10 :month 10 :year 2004)
Span 32-33:  each => each
Span 22-23:  fields => field
Span 15-16:  further => further
Span 18-19:  German => (country :name (name :op "Germany"))
Span 10-11:  German => (country :name (name :op "Germany"))
Span 24-25:  investment => invest-01
Span 0-1:  Media => media
Span 11-12:  officials => (have-org-role-91 :ARG2 official)
Span 33-34:  other => other
Span 13-14:  pledged => pledge-01
Span 21-22:  such => such
Span 31-32:  support => support-01
Span 28-29:  technology => technology
Span 26-27:  trade => trade-01
Span 36-38:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 4-7:  10 October 2004 => (date-entity :day 10 :month 10 :year 2004)
Oracle Span 9-10:  and => and
Oracle Span 17-18:  and => and
Oracle Span 27-28:  and => and
Oracle Span 29-30:  and => and
Oracle Span 32-33:  each => each
Oracle Span 22-23:  fields => field
Oracle Span 15-16:  further => further
Oracle Span 10-11:  German => (country :name (name :op "Germany"))
Oracle Span 12-13:  have => (person :ARG0-of have-org-role-91)
Oracle Span 24-25:  investment => invest-01
Oracle Span 0-1:  Media => media
Oracle Span 11-12:  officials => official
Oracle Span 33-34:  other => other
Oracle Span 13-14:  pledged => pledge-01
Oracle Span 19-20:  relations => relation
Oracle Span 1-2:  reports => report
Oracle Span 2-3:  stated => state-01
Oracle Span 31-32:  support => support-01
Oracle Span 28-29:  technology => technology
Oracle Span 26-27:  trade => trade-01
Oracle Span 36-38:  United Nations => (organization :name (name :op "Nations" :op "United"))
Oracle Span 8-9:  Vietnamese => (have-org-role-91 :ARG1 (country :name (name :op "Vietnam")))

Incorrect span: United Nations => (organization :name (name :op "United" :op "Nations"))
Extra span: such => such
Extra span: German => (country :name (name :op "Germany"))
Incorrect span: officials => (have-org-role-91 :ARG2 official)
Missing span: United Nations => (organization :name (name :op "Nations" :op "United"))
Missing span: Vietnamese => (have-org-role-91 :ARG1 (country :name (name :op "Vietnam")))
Missing span: stated => state-01
Missing span: and => and
Missing span: relations => relation
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: officials => official
Missing span: reports => report
Missing span: have => (person :ARG0-of have-org-role-91)
Dependencies:
1	Media	_	NNP	NNP	_	2	nn	_	_
2	reports	_	NNS	NNS	_	3	nsubj	_	_
3	stated	_	VBD	VBD	_	0	root	_	_
4	on	_	IN	IN	_	3	prep	_	_
5	10	_	CD	CD	_	4	pobj	_	_
6	October	_	NNP	NNP	_	3	tmod	_	_
7	2004	_	CD	CD	_	6	num	_	_
8	that	_	IN	IN	_	14	mark	_	_
9	Vietnamese	_	JJ	JJ	_	12	amod	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	German	_	JJ	JJ	_	9	conj	_	_
12	officials	_	NNS	NNS	_	14	nsubj	_	_
13	have	_	VBP	VBP	_	14	aux	_	_
14	pledged	_	VBN	VBN	_	3	ccomp	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	further	_	VB	VB	_	14	ccomp	_	_
17	Vietnamese	_	JJ	JJ	_	20	amod	_	_
18	and	_	CC	CC	_	17	cc	_	_
19	German	_	JJ	JJ	_	17	conj	_	_
20	relations	_	NNS	NNS	_	16	dobj	_	_
21	in	_	IN	IN	_	16	prep	_	_
22	such	_	JJ	JJ	_	23	amod	_	_
23	fields	_	NNS	NNS	_	21	pobj	_	_
24	as	_	IN	IN	_	23	prep	_	_
25	investment	_	NN	NN	_	24	pobj	_	_
26	,	_	,	,	_	25	punct	_	_
27	trade	_	NN	NN	_	25	conj	_	_
28	and	_	CC	CC	_	25	cc	_	_
29	technology	_	NN	NN	_	25	conj	_	_
30	and	_	CC	CC	_	16	cc	_	_
31	to	_	TO	TO	_	32	aux	_	_
32	support	_	VB	VB	_	16	conj	_	_
33	each	_	DT	DT	_	34	det	_	_
34	other	_	JJ	JJ	_	32	dobj	_	_
35	in	_	IN	IN	_	32	prep	_	_
36	the	_	DT	DT	_	38	det	_	_
37	United	_	NNP	NNP	_	38	nn	_	_
38	Nations	_	NNPS	NNPS	_	35	pobj	_	_
39	(	_	(	(	_	40	punct	_	_
40	UN	_	NNP	NNP	_	38	appos	_	_
41	)	_	)	)	_	40	punct	_	_
42	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, p3 / person)
(a2 / and, op, r2 / relation)
(a2 / and, op, s2 / support-01)
(a3 / and, op, c / country)
(a3 / and, op, c2 / country)
(a4 / and, op, i / invest-01)
(a4 / and, op, t / trade-01)
(a4 / and, op, t2 / technology)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / date-entity, day, 10)
(d / date-entity, month, 10)
(d / date-entity, year, 2004)
(f2 / field, example, a4 / and)
(h / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, o2 / official)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")
(n3 / name, op, "Nations")
(n3 / name, op, "United")
(o4 / organization, name, n3 / name)
(p / pledge-01, ARG0, a / and)
(p / pledge-01, ARG1, a2 / and)
(r / report, mod, m / media)
(r2 / relation, mod, f2 / field)
(r2 / relation, poss, a3 / and)
(r2 / relation, time, f / further)
(s / state-01, ARG0, r / report)
(s / state-01, ARG1, p / pledge-01)
(s / state-01, time, d / date-entity)
(s2 / support-01, ARG0, e / each)
(s2 / support-01, ARG1, o3 / other)
(s2 / support-01, location, o4 / organization)

Input(Some(Graph(null,ArrayBuffer(Span(36,38,List(3, 2, 1, 0),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(33,34,List(4),other,other,false), Span(32,33,List(5),each,each,false), Span(31,32,List(6),support,support-01,false), Span(28,29,List(7),technology,technology,false), Span(26,27,List(8),trade,trade-01,false), Span(24,25,List(9),investment,invest-01,false), Span(22,23,List(10),fields,field,false), Span(21,22,List(11),such,such,false), Span(18,19,List(14, 13, 12),German,(country :name (name :op "Germany")),false), Span(15,16,List(15),further,further,false), Span(13,14,List(16),pledged,pledge-01,false), Span(11,12,List(18, 17),officials,(have-org-role-91 :ARG2 official),false), Span(10,11,List(21, 20, 19),German,(country :name (name :op "Germany")),false), Span(4,7,List(25, 24, 23, 22),10 October 2004,(date-entity :day 10 :month 10 :year 2004),false), Span(0,1,List(26),Media,media,false)),Map(2 -> "United", 5 -> each, 12 -> country, 8 -> trade-01, 15 -> further, 21 -> "Germany", 18 -> official, 24 -> 10, 7 -> technology, 1 -> name, 17 -> have-org-role-91, 23 -> 10, 26 -> media, 4 -> other, 11 -> such, 14 -> "Germany", 20 -> name, 6 -> support-01, 9 -> invest-01, 0 -> organization, 22 -> date-entity, 16 -> pledge-01, 19 -> country, 10 -> field, 3 -> "Nations", 25 -> 2004, 13 -> name),Map(e -> each, n -> name, h -> have-org-role-91, 2 -> 2004, s2 -> such, 12 -> 10, t -> technology, o3 -> official, s -> support-01, m -> media, d -> date-entity, 1 -> 10, p -> pledge-01, n3 -> name, o2 -> other, t2 -> trade-01, i -> invest-01, c -> country, f2 -> further, f -> field, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@6f1b8544,Annotation([Ljava.lang.String;@51dae791,[Ljava.lang.String;@688a2c09,[Ljava.lang.String;@5de5e95),Annotation([Ljava.lang.String;@365cdacf,[Ljava.lang.String;@303c55fa,[Ledu.cmu.lti.nlp.amr.Dependency;@9efcd90),Annotation([Ljava.lang.String;@7eb200ce,[Ljava.lang.String;@2ee83775,[Ljava.lang.String;@7c2924d7),Annotation([Ljava.lang.String;@b5de58f,[Ljava.lang.String;@6587305a,[Ledu.cmu.lti.nlp.amr.Entity;@abbe000))
AMR:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(d / date-entity, day, 1 / 10)
(d / date-entity, month, 12 / 10)
(d / date-entity, op, p / pledge-01)
(d / date-entity, year, 2 / 2004)
(f / field, mod, s2 / such)
(h / have-org-role-91, ARG0, m / media)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o3 / official)
(i / invest-01, ARG1, f / field)
(i / invest-01, ARG2, c2 / country)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Germany")
(n3 / name, op, "Germany")
(o / organization, name, n / name)
(o2 / other, manner, o / organization)
(p / pledge-01, ARG1, f2 / further)
(s / support-01, ARG0, e / each)
(s / support-01, ARG1, f2 / further)
(s / support-01, ARG2, h / have-org-role-91)
(t / technology, poss, c2 / country)
(t2 / trade-01, ARG0, o / organization)
(t2 / trade-01, ARG1, s / support-01)
(t2 / trade-01, ARG2, c / country)

Decoded in 911,153 microseconds
Sentence: German Chancellor Gerhard Schroeder attended the 5th Asia-Europe Meeting summit in Hanoi on 8 October 2004 and 9 October 2004.

NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Gerhard" :op "Schroeder"))
NER Entity: (organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting"))
NER Entity: (country :name (name :op "Hanoi"))
mkDayMonthYear(8	October	2004,8,October,2004)
mkDayMonthYear(9	October	2004,9,October,2004)
NER Entity: (country :name (name :op "Hanoi"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 15-18:  8 October 2004 => (date-entity :day 8 :month 10 :year 2004)
Span 19-22:  9 October 2004 => (date-entity :day 9 :month 10 :year 2004)
Span 7-9:  Asia - => (organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting"))
Span 4-5:  attended => attend-01
Span 1-2:  Chancellor => (have-org-role-91 :ARG2 chancellor)
Span 2-4:  Gerhard Schroeder => (person :name (name :op "Schroeder" :op "Gerhard"))
Span 0-1:  German => (country :name (name :op "Germany"))
Span 10-11:  Meeting => meet-03
Span 11-12:  summit => summit

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 15-18:  8 October 2004 => (date-entity :day 8 :month 10 :year 2004)
Oracle Span 19-22:  9 October 2004 => (date-entity :day 9 :month 10 :year 2004)
Oracle Span 18-19:  and => and
Oracle Span 7-11:  Asia - Europe Meeting => (organization :name (name :op "Meeting" :op "Asia-Europe"))
Oracle Span 4-5:  attended => attend-01
Oracle Span 1-2:  Chancellor => (have-org-role-91 :ARG2 chancellor)
Oracle Span 2-4:  Gerhard Schroeder => (person :name (name :op "Schroeder" :op "Gerhard"))
Oracle Span 0-1:  German => (country :name (name :op "Germany"))
Oracle Span 13-14:  Hanoi => (city :name (name :op "Hanoi"))
Oracle Span 11-12:  summit => summit

Extra span: Meeting => meet-03
Extra span: Asia - => (organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting"))
Missing span: Asia - Europe Meeting => (organization :name (name :op "Meeting" :op "Asia-Europe"))
Missing span: Hanoi => (city :name (name :op "Hanoi"))
Missing span: and => and
Dependencies:
1	German	_	NNP	NNP	_	4	nn	_	_
2	Chancellor	_	NNP	NNP	_	4	nn	_	_
3	Gerhard	_	NNP	NNP	_	4	nn	_	_
4	Schroeder	_	NNP	NNP	_	5	nsubj	_	_
5	attended	_	VBD	VBD	_	0	root	_	_
6	the	_	DT	DT	_	8	det	_	_
7	5th	_	JJ	JJ	_	8	amod	_	_
8	Asia-Europe	_	NN	NN	_	5	dobj	_	_
9	Meeting	_	VBG	VBG	_	8	vmod	_	_
10	summit	_	NN	NN	_	9	dobj	_	_
11	in	_	IN	IN	_	9	prep	_	_
12	Hanoi	_	NNP	NNP	_	11	pobj	_	_
13	on	_	IN	IN	_	12	prep	_	_
14	8	_	CD	CD	_	13	pobj	_	_
15	October	_	NNP	NNP	_	9	tmod	_	_
16	2004	_	CD	CD	_	15	num	_	_
17	and	_	CC	CC	_	15	cc	_	_
18	9	_	CD	CD	_	15	conj	_	_
19	October	_	NNP	NNP	_	5	tmod	_	_
20	2004	_	CD	CD	_	19	num	_	_
21	.	_	.	.	_	5	punct	_	_

Oracle:
(a / attend-01, ARG0, p / person)
(a / attend-01, ARG1, s / summit)
(a2 / and, op, d / date-entity)
(a2 / and, op, d2 / date-entity)
(c / country, name, n2 / name)
(c3 / city, name, n4 / name)
(d / date-entity, day, 8)
(d / date-entity, month, 10)
(d / date-entity, year, 2004)
(d2 / date-entity, day, 9)
(d2 / date-entity, month, 10)
(d2 / date-entity, year, 2004)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, c2 / chancellor)
(n / name, op, "Gerhard")
(n / name, op, "Schroeder")
(n2 / name, op, "Germany")
(n3 / name, op, "Asia-Europe")
(n3 / name, op, "Meeting")
(n4 / name, op, "Hanoi")
(o / organization, name, n3 / name)
(p / person, name, n / name)
(s / summit, location, c3 / city)
(s / summit, mod, o / organization)
(s / summit, time, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(19,22,List(3, 2, 1, 0),9 October 2004,(date-entity :day 9 :month 10 :year 2004),false), Span(15,18,List(7, 6, 5, 4),8 October 2004,(date-entity :day 8 :month 10 :year 2004),false), Span(11,12,List(8),summit,summit,false), Span(10,11,List(9),Meeting,meet-03,false), Span(7,9,List(15, 14, 13, 12, 11, 10),Asia -,(organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting")),false), Span(4,5,List(16),attended,attend-01,false), Span(2,4,List(20, 19, 18, 17),Gerhard Schroeder,(person :name (name :op "Schroeder" :op "Gerhard")),false), Span(1,2,List(22, 21),Chancellor,(have-org-role-91 :ARG2 chancellor),false), Span(0,1,List(25, 24, 23),German,(country :name (name :op "Germany")),false)),Map(2 -> 10, 5 -> 8, 12 -> "Asia", 8 -> summit, 15 -> "Meeting", 21 -> have-org-role-91, 18 -> name, 24 -> name, 7 -> 2004, 1 -> 9, 17 -> person, 23 -> country, 4 -> date-entity, 11 -> name, 14 -> "Europe", 20 -> "Gerhard", 6 -> 10, 9 -> meet-03, 0 -> date-entity, 22 -> chancellor, 16 -> attend-01, 19 -> "Schroeder", 10 -> organization, 3 -> 2004, 25 -> "Germany", 13 -> "-"),Map(n -> name, h -> have-org-role-91, 2 -> 2004, 12 -> 10, 8 -> 8, s -> summit, d -> date-entity, m -> meet-03, 1 -> 10, p -> person, n3 -> name, a -> attend-01, d2 -> date-entity, c -> chancellor, 9 -> 9, 22 -> 2004, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@3f81621c,Annotation([Ljava.lang.String;@5b9499fe,[Ljava.lang.String;@74d6736,[Ljava.lang.String;@52a33c3f),Annotation([Ljava.lang.String;@668625f5,[Ljava.lang.String;@19a20bb2,[Ledu.cmu.lti.nlp.amr.Dependency;@75babb67),Annotation([Ljava.lang.String;@3eb3232b,[Ljava.lang.String;@69cd1085,[Ljava.lang.String;@60bb7995),Annotation([Ljava.lang.String;@40fa8766,[Ljava.lang.String;@67774e29,[Ledu.cmu.lti.nlp.amr.Entity;@663f237a))
AMR:
(a / attend-01, ARG0, p / person)
(a / attend-01, ARG1, o / organization)
(c2 / country, name, n3 / name)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2004)
(d2 / date-entity, day, 8 / 8)
(d2 / date-entity, month, 12 / 10)
(d2 / date-entity, year, 22 / 2004)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, c / chancellor)
(m / meet-03, ARG0, o / organization)
(m / meet-03, ARG1, s / summit)
(m / meet-03, time, d / date-entity)
(m / meet-03, time, d2 / date-entity)
(n / name, op, "-")
(n / name, op, "Asia")
(n / name, op, "Europe")
(n / name, op, "Meeting")
(n2 / name, op, "Gerhard")
(n2 / name, op, "Schroeder")
(n3 / name, op, "Germany")
(o / organization, name, n / name)
(p / person, name, n2 / name)

Decoded in 306,013 microseconds
Sentence: During separate talks and meetings with Schroeder held on 9 October 2004 Vietnamese leaders stated that the Vietnamese government supports the German government's bid for a permanent seat in the UN Security Council and wants to strengthen Vietnamese relations with Germany.

NER Entity: (person :name (name :op "Schroeder"))
mkDayMonthYear(9	October	2004,9,October,2004)
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (organization :name (name :op "UN" :op "Security" :op "Council"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 9-12:  9 October 2004 => (date-entity :day 9 :month 10 :year 2004)
Span 24-25:  bid => bid-01
Span 21-22:  German => (country :name (name :op "Germany"))
Span 13-14:  leaders => (person :ARG0-of lead-02)
Span 4-5:  meetings => meet-03
Span 27-28:  permanent => permanent
Span 28-29:  seat => seat
Span 1-2:  separate => separate
Span 37-38:  strengthen => strengthen-01
Span 19-20:  supports => support-01
Span 2-3:  talks => talk-01
Span 31-34:  UN Security Council => (organization :name (name :op "UN" :op "Security" :op "Council"))
Span 35-36:  wants => want-01

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Oracle Span 9-12:  9 October 2004 => (date-entity :day 9 :month 10 :year 2004)
Oracle Span 3-4:  and => and
Oracle Span 34-35:  and => and
Oracle Span 24-25:  bid => bid-01
Oracle Span 41-42:  Germany => (country :name (name :op "Germany"))
Oracle Span 18-19:  government => government-organization
Oracle Span 22-23:  government => govern-01
Oracle Span 7-8:  held => hold-04
Oracle Span 13-14:  leaders => (person :ARG0-of lead-02)
Oracle Span 4-5:  meetings => meet-03
Oracle Span 27-28:  permanent => permanence
Oracle Span 39-40:  relations => relation
Oracle Span 6-7:  Schroeder => (person :name (name :op "Schroeder"))
Oracle Span 28-29:  seat => seat-01
Oracle Span 32-34:  Security Council => (organization :name (name :op "Council" :op "Security"))
Oracle Span 1-2:  separate => separate
Oracle Span 14-15:  stated => state-01
Oracle Span 37-38:  strengthen => strengthen-01
Oracle Span 19-20:  supports => support-01
Oracle Span 2-3:  talks => talk-01
Oracle Span 31-32:  UN => (organization :name (name :op "UN"))
Oracle Span 12-13:  Vietnamese => (country :name (name :op "Vietnam"))
Oracle Span 35-36:  wants => want-01

Extra span: UN Security Council => (organization :name (name :op "UN" :op "Security" :op "Council"))
Incorrect span: seat => seat
Incorrect span: permanent => permanent
Extra span: German => (country :name (name :op "Germany"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: Security Council => (organization :name (name :op "Council" :op "Security"))
Missing span: UN => (organization :name (name :op "UN"))
Missing span: Schroeder => (person :name (name :op "Schroeder"))
Missing span: Vietnamese => (country :name (name :op "Vietnam"))
Missing span: stated => state-01
Missing span: and => and
Missing span: held => hold-04
Missing span: and => and
Missing span: relations => relation
Missing span: seat => seat-01
Missing span: permanent => permanence
Missing span: government => government-organization
Missing span: government => govern-01
Dependencies:
1	During	_	IN	IN	_	15	prep	_	_
2	separate	_	JJ	JJ	_	3	amod	_	_
3	talks	_	NNS	NNS	_	1	pobj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	meetings	_	NNS	NNS	_	3	conj	_	_
6	with	_	IN	IN	_	3	prep	_	_
7	Schroeder	_	NNP	NNP	_	6	pobj	_	_
8	held	_	VBN	VBN	_	7	vmod	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	9	_	CD	CD	_	9	pobj	_	_
11	October	_	NNP	NNP	_	8	tmod	_	_
12	2004	_	CD	CD	_	11	num	_	_
13	Vietnamese	_	JJ	JJ	_	14	amod	_	_
14	leaders	_	NNS	NNS	_	15	nsubj	_	_
15	stated	_	VBD	VBD	_	0	root	_	_
16	that	_	IN	IN	_	20	mark	_	_
17	the	_	DT	DT	_	19	det	_	_
18	Vietnamese	_	JJ	JJ	_	19	amod	_	_
19	government	_	NN	NN	_	20	nsubj	_	_
20	supports	_	VBZ	VBZ	_	15	ccomp	_	_
21	the	_	DT	DT	_	23	det	_	_
22	German	_	JJ	JJ	_	23	amod	_	_
23	government	_	NN	NN	_	25	poss	_	_
24	's	_	POS	POS	_	23	possessive	_	_
25	bid	_	NN	NN	_	20	dobj	_	_
26	for	_	IN	IN	_	20	prep	_	_
27	a	_	DT	DT	_	29	det	_	_
28	permanent	_	JJ	JJ	_	29	amod	_	_
29	seat	_	NN	NN	_	26	pobj	_	_
30	in	_	IN	IN	_	29	prep	_	_
31	the	_	DT	DT	_	34	det	_	_
32	UN	_	NNP	NNP	_	34	nn	_	_
33	Security	_	NNP	NNP	_	34	nn	_	_
34	Council	_	NNP	NNP	_	30	pobj	_	_
35	and	_	CC	CC	_	20	cc	_	_
36	wants	_	VBZ	VBZ	_	20	conj	_	_
37	to	_	TO	TO	_	38	aux	_	_
38	strengthen	_	VB	VB	_	36	xcomp	_	_
39	Vietnamese	_	JJ	JJ	_	40	amod	_	_
40	relations	_	NNS	NNS	_	38	dobj	_	_
41	with	_	IN	IN	_	38	prep	_	_
42	Germany	_	NNP	NNP	_	41	pobj	_	_
43	.	_	.	.	_	15	punct	_	_

Oracle:
(a / and, op, m / meet-03)
(a / and, op, t / talk-01)
(a2 / and, op, s2 / support-01)
(a2 / and, op, w / want-01)
(b / bid-01, ARG0, g3 / government-organization)
(b / bid-01, ARG1, s3 / seat-01)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(d / date-entity, day, 9)
(d / date-entity, month, 10)
(d / date-entity, year, 2004)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c2 / country)
(h2 / hold-04, ARG1, a / and)
(h2 / hold-04, time, d / date-entity)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, c / country)
(m / meet-03, ARG0, p / person)
(m / meet-03, ARG1, p2 / person)
(m / meet-03, manner, s5 / separate)
(n / name, op, "Vietnam")
(n2 / name, op, "Schroeder")
(n3 / name, op, "Germany")
(n4 / name, op, "Council")
(n4 / name, op, "Security")
(n5 / name, op, "UN")
(o / organization, name, n4 / name)
(o2 / organization, name, n5 / name)
(o2 / organization, part, o / organization)
(p2 / person, name, n2 / name)
(r / relation, mod, c / country)
(r / relation, prep-with, c2 / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a2 / and)
(s / state-01, time, a / and)
(s2 / support-01, ARG1, b / bid-01)
(s3 / seat-01, ARG2, o / organization)
(s3 / seat-01, mod, p4 / permanence)
(s4 / strengthen-01, ARG1, r / relation)
(t / talk-01, ARG0, p / person)
(t / talk-01, ARG1, p2 / person)
(t / talk-01, manner, s5 / separate)
(w / want-01, ARG1, s4 / strengthen-01)

Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),strengthen,strengthen-01,false), Span(35,36,List(1),wants,want-01,false), Span(31,34,List(6, 5, 4, 3, 2),UN Security Council,(organization :name (name :op "UN" :op "Security" :op "Council")),false), Span(28,29,List(7),seat,seat,false), Span(27,28,List(8),permanent,permanent,false), Span(24,25,List(9),bid,bid-01,false), Span(21,22,List(12, 11, 10),German,(country :name (name :op "Germany")),false), Span(19,20,List(13),supports,support-01,false), Span(13,14,List(15, 14),leaders,(person :ARG0-of lead-02),false), Span(9,12,List(19, 18, 17, 16),9 October 2004,(date-entity :day 9 :month 10 :year 2004),false), Span(4,5,List(20),meetings,meet-03,false), Span(2,3,List(21),talks,talk-01,false), Span(1,2,List(22),separate,separate,false)),Map(2 -> organization, 5 -> "Security", 12 -> "Germany", 15 -> lead-02, 8 -> permanent, 21 -> talk-01, 18 -> 10, 7 -> seat, 17 -> 9, 1 -> want-01, 4 -> "UN", 11 -> name, 14 -> person, 20 -> meet-03, 6 -> "Council", 22 -> separate, 0 -> strengthen-01, 9 -> bid-01, 16 -> date-entity, 19 -> 2004, 3 -> name, 10 -> country, 13 -> support-01),Map(w -> want-01, n -> name, 2 -> 2004, s2 -> seat, t -> talk-01, b -> bid-01, p2 -> person, s -> strengthen-01, s4 -> separate, m -> meet-03, d -> date-entity, 1 -> 10, p -> permanent, c -> country, s3 -> support-01, l -> lead-02, 9 -> 9, o -> organization, n2 -> name))),[Ljava.lang.String;@5d7399f9,Annotation([Ljava.lang.String;@49a6f486,[Ljava.lang.String;@14fded9d,[Ljava.lang.String;@bc6288b),Annotation([Ljava.lang.String;@4a3bd45b,[Ljava.lang.String;@34c70b5e,[Ledu.cmu.lti.nlp.amr.Dependency;@4f2d995e),Annotation([Ljava.lang.String;@75156240,[Ljava.lang.String;@6198e9b5,[Ljava.lang.String;@6d099323),Annotation([Ljava.lang.String;@4ecd00b5,[Ljava.lang.String;@10947c4e,[Ledu.cmu.lti.nlp.amr.Entity;@3667faa8))
AMR:
(b / bid-01, ARG1, s2 / seat)
(c / country, name, n2 / name)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2004)
(l / lead-02, ARG0, p2 / person)
(m / meet-03, ARG1, p2 / person)
(m / meet-03, time, d / date-entity)
(n / name, op, "Council")
(n / name, op, "Security")
(n / name, op, "UN")
(n2 / name, op, "Germany")
(o / organization, name, n / name)
(s / strengthen-01, ARG1, s2 / seat)
(s2 / seat, mod, p / permanent)
(s2 / seat, poss, o / organization)
(s3 / support-01, ARG0, p2 / person)
(s3 / support-01, ARG1, b / bid-01)
(t / talk-01, ARG0, p2 / person)
(t / talk-01, mod, s4 / separate)
(w / want-01, ARG0, c / country)
(w / want-01, ARG1, s / strengthen-01)

Decoded in 1,814,435 microseconds
Sentence: Vietnamese Prime Minister Phan Van Khai stated that the visit by Schroeder is important to the Vietnam-German relationship and the closer cooperation between the 2 continents.

NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (person :name (name :op "Phan" :op "Van" :op "Khai"))
NER Entity: (person :name (name :op "Schroeder"))
NER Entity: (thing :name (name :op "Vietnam" :op "-" :op "German"))
Spans:
Span 22-23:  closer => close
Span 23-24:  cooperation => cooperate-01
Span 18-19:  German => (country :name (name :op "Germany"))
Span 13-14:  important => important
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 3-6:  Phan Van Khai => (person :name (name :op "Phan" :op "Van" :op "Khai"))
Span 1-2:  Prime => prime
Span 19-20:  relationship => relationship
Span 9-10:  visit => visit-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 26-27:  2 => 2
Oracle Span 20-21:  and => and
Oracle Span 22-23:  closer => close
Oracle Span 27-28:  continents => continent
Oracle Span 23-24:  cooperation => cooperate-01
Oracle Span 18-19:  German => (country :name (name :op "Germany"))
Oracle Span 13-14:  important => important
Oracle Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 3-6:  Phan Van Khai => (person :name (name :op "Khai" :op "Van" :op "Phan"))
Oracle Span 1-2:  Prime => prime
Oracle Span 19-20:  relationship => relationship
Oracle Span 11-12:  Schroeder => (person :name (name :op "Schroeder"))
Oracle Span 6-7:  stated => state-01
Oracle Span 16-17:  Vietnam => (country :name (name :op "Vietnam"))
Oracle Span 9-10:  visit => visit-01

Incorrect span: Phan Van Khai => (person :name (name :op "Phan" :op "Van" :op "Khai"))
Missing span: Phan Van Khai => (person :name (name :op "Khai" :op "Van" :op "Phan"))
Missing span: Vietnam => (country :name (name :op "Vietnam"))
Missing span: Schroeder => (person :name (name :op "Schroeder"))
Missing span: stated => state-01
Missing span: and => and
Missing span: continents => continent
Missing span: 2 => 2
Dependencies:
1	Vietnamese	_	JJ	JJ	_	6	amod	_	_
2	Prime	_	NNP	NNP	_	6	nn	_	_
3	Minister	_	NNP	NNP	_	6	nn	_	_
4	Phan	_	NNP	NNP	_	6	nn	_	_
5	Van	_	NNP	NNP	_	6	nn	_	_
6	Khai	_	NNP	NNP	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	that	_	IN	IN	_	14	mark	_	_
9	the	_	DT	DT	_	10	det	_	_
10	visit	_	NN	NN	_	14	nsubj	_	_
11	by	_	IN	IN	_	10	prep	_	_
12	Schroeder	_	NNP	NNP	_	11	pobj	_	_
13	is	_	VBZ	VBZ	_	14	cop	_	_
14	important	_	JJ	JJ	_	7	ccomp	_	_
15	to	_	TO	TO	_	14	prep	_	_
16	the	_	DT	DT	_	18	det	_	_
17	Vietnam-German	_	JJ	JJ	_	18	amod	_	_
18	relationship	_	NN	NN	_	15	pobj	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	the	_	DT	DT	_	22	det	_	_
21	closer	_	JJR	JJR	_	22	amod	_	_
22	cooperation	_	NN	NN	_	18	conj	_	_
23	between	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	26	det	_	_
25	2	_	CD	CD	_	26	num	_	_
26	continents	_	NNS	NNS	_	23	pobj	_	_
27	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, c3 / cooperate-01)
(a / and, op, r / relationship)
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(c3 / cooperate-01, ARG0, c4 / continent)
(c3 / cooperate-01, manner, c5 / close)
(c4 / continent, quant, 2 / 2)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(i / important, domain, v / visit-01)
(i / important, purpose, a / and)
(m / minister, mod, p2 / prime)
(n / name, op, "Khai")
(n / name, op, "Phan")
(n / name, op, "Van")
(n2 / name, op, "Vietnam")
(n3 / name, op, "Schroeder")
(n4 / name, op, "Germany")
(p / person, name, n / name)
(p3 / person, name, n3 / name)
(r / relationship, mod, c / country)
(r / relationship, mod, c2 / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, i / important)
(v / visit-01, ARG0, p3 / person)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),cooperation,cooperate-01,false), Span(22,23,List(1),closer,close,false), Span(19,20,List(2),relationship,relationship,false), Span(18,19,List(5, 4, 3),German,(country :name (name :op "Germany")),false), Span(13,14,List(6),important,important,false), Span(9,10,List(7),visit,visit-01,false), Span(3,6,List(12, 11, 10, 9, 8),Phan Van Khai,(person :name (name :op "Phan" :op "Van" :op "Khai")),false), Span(2,3,List(14, 13),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(15),Prime,prime,false)),Map(2 -> relationship, 5 -> "Germany", 12 -> "Khai", 15 -> prime, 8 -> person, 7 -> visit-01, 1 -> close, 4 -> name, 11 -> "Van", 14 -> minister, 6 -> important, 0 -> cooperate-01, 9 -> name, 3 -> country, 10 -> "Phan", 13 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, p2 -> prime, m -> minister, v -> visit-01, p -> person, c3 -> country, i -> important, r -> relationship, c -> cooperate-01, n2 -> name, c2 -> close))),[Ljava.lang.String;@1756f7cc,Annotation([Ljava.lang.String;@3138953b,[Ljava.lang.String;@27df95e,[Ljava.lang.String;@b46e103),Annotation([Ljava.lang.String;@2b0e9f30,[Ljava.lang.String;@5eea5627,[Ledu.cmu.lti.nlp.amr.Dependency;@3330f3ad),Annotation([Ljava.lang.String;@f425231,[Ljava.lang.String;@506aabf6,[Ljava.lang.String;@5cbd94b2),Annotation([Ljava.lang.String;@6824b913,[Ljava.lang.String;@756aadfc,[Ledu.cmu.lti.nlp.amr.Entity;@705a8dbc))
AMR:
(c / cooperate-01, ARG0, c3 / country)
(c / cooperate-01, manner, c2 / close)
(c3 / country, name, n / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, m / minister)
(i / important, beneficiary, r / relationship)
(i / important, domain, v / visit-01)
(m / minister, mod, p2 / prime)
(n / name, op, "Germany")
(n2 / name, op, "Khai")
(n2 / name, op, "Phan")
(n2 / name, op, "Van")
(p / person, name, n2 / name)
(r / relationship, mod, c3 / country)
(v / visit-01, ARG1, p2 / prime)

Decoded in 159,546 microseconds
Sentence: Vietnamese and German officials signed 5 documents on financial, technical and business cooperation totaling over 260 million US dollars.

NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 12-13:  business => business
Span 13-14:  cooperation => cooperate-01
Span 6-7:  documents => document
Span 19-20:  dollars => (monetary-quantity :unit dollar)
Span 2-3:  German => (country :name (name :op "Germany"))
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 10-11:  technical => technical

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 5-6:  5 => 5
Oracle Span 1-2:  and => and
Oracle Span 11-12:  and => and
Oracle Span 12-13:  business => business
Oracle Span 13-14:  cooperation => cooperate-01
Oracle Span 6-7:  documents => document
Oracle Span 19-20:  dollars => (monetary-quantity :unit dollar)
Oracle Span 8-9:  financial => finance
Oracle Span 2-3:  German => (country :name (name :op "Germany"))
Oracle Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 15-16:  over => over
Oracle Span 4-5:  signed => sign-01
Oracle Span 10-11:  technical => technical
Oracle Span 14-15:  totaling => total-01
Oracle Span 18-19:  US => (country :name (name :op "US"))
Oracle Span 0-1:  Vietnamese => (have-org-role-91 :ARG1 (country :name (name :op "Vietnam")))

Missing span: US => (country :name (name :op "US"))
Missing span: Vietnamese => (have-org-role-91 :ARG1 (country :name (name :op "Vietnam")))
Missing span: signed => sign-01
Missing span: totaling => total-01
Missing span: over => over
Missing span: and => and
Missing span: 5 => 5
Missing span: and => and
Missing span: financial => finance
Dependencies:
1	Vietnamese	_	JJ	JJ	_	4	amod	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	German	_	JJ	JJ	_	1	conj	_	_
4	officials	_	NNS	NNS	_	5	nsubj	_	_
5	signed	_	VBD	VBD	_	0	root	_	_
6	5	_	CD	CD	_	7	num	_	_
7	documents	_	NNS	NNS	_	5	dobj	_	_
8	on	_	IN	IN	_	5	prep	_	_
9	financial	_	JJ	JJ	_	14	amod	_	_
10	,	_	,	,	_	9	punct	_	_
11	technical	_	JJ	JJ	_	9	conj	_	_
12	and	_	CC	CC	_	9	cc	_	_
13	business	_	NN	NN	_	9	conj	_	_
14	cooperation	_	NN	NN	_	8	pobj	_	_
15	totaling	_	VBG	VBG	_	5	xcomp	_	_
16	over	_	RP	RP	_	15	prt	_	_
17	260	_	CD	CD	_	18	number	_	_
18	million	_	CD	CD	_	20	num	_	_
19	US	_	NNP	NNP	_	20	nn	_	_
20	dollars	_	NNS	NNS	_	15	dobj	_	_
21	.	_	.	.	_	5	punct	_	_

Oracle:
(a2 / and, op, b / business)
(a2 / and, op, f / finance)
(a2 / and, op, t / technical)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / cooperate-01, ARG2, a2 / and)
(c4 / country, name, n3 / name)
(d / document, quant, 5 / 5)
(d / document, topic, c3 / cooperate-01)
(d2 / dollar, mod, c4 / country)
(h / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, o2 / official)
(m / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")
(n3 / name, op, "US")
(o3 / over, op, m / monetary-quantity)
(s / sign-01, ARG0, a / and)
(s / sign-01, ARG1, d / document)
(t2 / total-01, ARG1, d / document)
(t2 / total-01, ARG2, o3 / over)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(13,14,List(2),cooperation,cooperate-01,false), Span(12,13,List(3),business,business,false), Span(10,11,List(4),technical,technical,false), Span(6,7,List(5),documents,document,false), Span(3,4,List(7, 6),officials,(have-org-role-91 :ARG2 official),false), Span(2,3,List(10, 9, 8),German,(country :name (name :op "Germany")),false)),Map(2 -> cooperate-01, 5 -> document, 8 -> country, 7 -> official, 1 -> dollar, 4 -> technical, 6 -> have-org-role-91, 9 -> name, 0 -> monetary-quantity, 10 -> "Germany", 3 -> business),Map(n -> name, h -> have-org-role-91, t -> technical, b -> business, d -> dollar, m -> monetary-quantity, d2 -> document, c -> cooperate-01, o -> official, c2 -> country))),[Ljava.lang.String;@40729f01,Annotation([Ljava.lang.String;@d535a3d,[Ljava.lang.String;@2d760326,[Ljava.lang.String;@9e54c59),Annotation([Ljava.lang.String;@5dbb50f3,[Ljava.lang.String;@4a2e7bcb,[Ledu.cmu.lti.nlp.amr.Dependency;@575c3e9b),Annotation([Ljava.lang.String;@74f827ad,[Ljava.lang.String;@73c3cd09,[Ljava.lang.String;@4a8a0099),Annotation([Ljava.lang.String;@7c1447b5,[Ljava.lang.String;@49e4c2d5,[Ledu.cmu.lti.nlp.amr.Entity;@24a2e565))
AMR:
(c / cooperate-01, ARG1, h / have-org-role-91)
(c / cooperate-01, ARG2, m / monetary-quantity)
(c / cooperate-01, mod, b / business)
(c2 / country, name, n / name)
(d2 / document, topic, c / cooperate-01)
(h / have-org-role-91, ARG0, t / technical)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Germany")

Decoded in 153,019 microseconds
Sentence: The documents cover financial cooperation for 2 stages in the 2003-2005 period and the purchase of 16 locomotives for the Vietnam Railway Corporation and equipment for a local cement plant.

mkDayMonthYear(2003-2005,05,20,2003)
NER Entity: (organization :name (name :op "Vietnam" :op "Railway" :op "Corporation"))
mkDayMonthYear(2003-2005,05,20,2003)
Spans:
Span 10-11:  2003-2005 => (date-entity :day 5 :month 20 :year 2003)
Span 4-5:  cooperation => cooperate-01
Span 2-3:  cover => cover-04
Span 1-2:  documents => document
Span 24-25:  equipment => equipment
Span 27-28:  local => local
Span 11-12:  period => period
Span 29-30:  plant => plant
Span 14-15:  purchase => purchase-01
Span 7-8:  stages => stage
Span 20-23:  Vietnam Railway Corporation => (organization :name (name :op "Vietnam" :op "Railway" :op "Corporation"))

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 16-17:  16 => 16
Oracle Span 6-7:  2 => 2
Oracle Span 10-11:  2003-2005 => 2003
Oracle Span 12-13:  and => and
Oracle Span 28-29:  cement => cement
Oracle Span 4-5:  cooperation => cooperate-01
Oracle Span 2-3:  cover => cover-01
Oracle Span 1-2:  documents => document
Oracle Span 24-25:  equipment => equipment
Oracle Span 3-4:  financial => finance
Oracle Span 27-28:  local => local
Oracle Span 17-18:  locomotives => locomotive
Oracle Span 29-30:  plant => plant
Oracle Span 14-15:  purchase => purchase-01
Oracle Span 7-8:  stages => stage
Oracle Span 20-23:  Vietnam Railway Corporation => (company :name (name :op "Corporation" :op "Railway" :op "Vietnam"))

Incorrect span: Vietnam Railway Corporation => (organization :name (name :op "Vietnam" :op "Railway" :op "Corporation"))
Extra span: period => period
Incorrect span: 2003-2005 => (date-entity :day 5 :month 20 :year 2003)
Incorrect span: cover => cover-04
Missing span: Vietnam Railway Corporation => (company :name (name :op "Corporation" :op "Railway" :op "Vietnam"))
Missing span: cover => cover-01
Missing span: and => and
Missing span: cement => cement
Missing span: locomotives => locomotive
Missing span: 16 => 16
Missing span: 2 => 2
Missing span: financial => finance
Missing span: 2003-2005 => 2003
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	documents	_	NNS	NNS	_	3	nsubj	_	_
3	cover	_	VBP	VBP	_	0	root	_	_
4	financial	_	JJ	JJ	_	5	amod	_	_
5	cooperation	_	NN	NN	_	3	dobj	_	_
6	for	_	IN	IN	_	3	prep	_	_
7	2	_	CD	CD	_	8	num	_	_
8	stages	_	NNS	NNS	_	6	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	2003-2005	_	CD	CD	_	12	num	_	_
12	period	_	NN	NN	_	9	pobj	_	_
13	and	_	CC	CC	_	8	cc	_	_
14	the	_	DT	DT	_	15	det	_	_
15	purchase	_	NN	NN	_	8	conj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	16	_	CD	CD	_	18	num	_	_
18	locomotives	_	NNS	NNS	_	16	pobj	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	23	det	_	_
21	Vietnam	_	NNP	NNP	_	23	nn	_	_
22	Railway	_	NNP	NNP	_	23	nn	_	_
23	Corporation	_	NNP	NNP	_	19	pobj	_	_
24	and	_	CC	CC	_	18	cc	_	_
25	equipment	_	NN	NN	_	18	conj	_	_
26	for	_	IN	IN	_	25	prep	_	_
27	a	_	DT	DT	_	30	det	_	_
28	local	_	JJ	JJ	_	30	amod	_	_
29	cement	_	NN	NN	_	30	nn	_	_
30	plant	_	NN	NN	_	26	pobj	_	_
31	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, e / equipment)
(a / and, op, f / finance)
(a / and, op, p / purchase-01)
(c / cover-01, ARG0, d / document)
(c / cover-01, ARG1, a / and)
(c2 / cooperate-01, ARG2, f / finance)
(c3 / company, name, n / name)
(e / equipment, beneficiary, p2 / plant)
(f / finance, duration, s / stage)
(l / locomotive, quant, 1 / 16)
(n / name, op, "Corporation")
(n / name, op, "Railway")
(n / name, op, "Vietnam")
(p / purchase-01, ARG1, l / locomotive)
(p / purchase-01, ARG4, c3 / company)
(p2 / plant, mod, c4 / cement)
(p2 / plant, mod, l2 / local)
(s / stage, quant, 2 / 2)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),plant,plant,false), Span(27,28,List(1),local,local,false), Span(24,25,List(2),equipment,equipment,false), Span(20,23,List(7, 6, 5, 4, 3),Vietnam Railway Corporation,(organization :name (name :op "Vietnam" :op "Railway" :op "Corporation")),false), Span(14,15,List(8),purchase,purchase-01,false), Span(11,12,List(9),period,period,false), Span(10,11,List(13, 12, 11, 10),2003-2005,(date-entity :day 5 :month 20 :year 2003),false), Span(7,8,List(14),stages,stage,false), Span(4,5,List(15),cooperation,cooperate-01,false), Span(2,3,List(16),cover,cover-04,false), Span(1,2,List(17),documents,document,false)),Map(2 -> equipment, 5 -> "Vietnam", 12 -> 20, 15 -> cooperate-01, 8 -> purchase-01, 7 -> "Corporation", 17 -> document, 1 -> local, 4 -> name, 11 -> 5, 14 -> stage, 6 -> "Railway", 0 -> plant, 9 -> period, 16 -> cover-04, 3 -> organization, 10 -> date-entity, 13 -> 2003),Map(e -> equipment, n -> name, 2 -> 20, 5 -> 5, p2 -> purchase-01, s -> stage, d -> date-entity, p -> plant, d2 -> document, c -> cooperate-01, l -> local, 22 -> 2003, o -> organization, p3 -> period, c2 -> cover-04))),[Ljava.lang.String;@3e36b7a0,Annotation([Ljava.lang.String;@60c1663c,[Ljava.lang.String;@f5cf29b,[Ljava.lang.String;@3c66b7d8),Annotation([Ljava.lang.String;@37e69c43,[Ljava.lang.String;@5c7dfc05,[Ledu.cmu.lti.nlp.amr.Dependency;@345d053b),Annotation([Ljava.lang.String;@3d0cac1f,[Ljava.lang.String;@3e8b3b79,[Ljava.lang.String;@d257579),Annotation([Ljava.lang.String;@518ddd3b,[Ljava.lang.String;@939ff41,[Ledu.cmu.lti.nlp.amr.Entity;@6e0e5dec))
AMR:
(c / cooperate-01, ARG0, d2 / document)
(c / cooperate-01, ARG1, p2 / purchase-01)
(c2 / cover-04, ARG1, c / cooperate-01)
(c2 / cover-04, ARG2, s / stage)
(d / date-entity, day, 5 / 5)
(d / date-entity, month, 2 / 20)
(d / date-entity, year, 22 / 2003)
(e / equipment, location, p / plant)
(n / name, op, "Corporation")
(n / name, op, "Railway")
(n / name, op, "Vietnam")
(o / organization, name, n / name)
(p / plant, mod, l / local)
(p2 / purchase-01, ARG1, e / equipment)
(p2 / purchase-01, ARG2, o / organization)
(p3 / period, mod, s / stage)
(p3 / period, time, d / date-entity)

Decoded in 258,835 microseconds
Sentence: Vietnamese State President Tran Duc Luong stated in a meeting with Schroeder that the Vietnamese Government would like to receive more technology transfer and experience from Germany and that Vietnam is developing under the industrialization process.

NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (person :name (name :op "Tran" :op "Duc" :op "Luong"))
NER Entity: (person :name (name :op "Schroeder"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Vietnam"))
Spans:
Span 24-25:  experience => experience-01
Span 2-3:  President => (have-org-role-91 :ARG2 president)
Span 35-36:  process => process
Span 21-22:  technology => technology
Span 3-6:  Tran Duc Luong => (person :name (name :op "Tran" :op "Duc" :op "Luong"))
Span 22-23:  transfer => transfer-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 23-24:  and => and
Oracle Span 27-28:  and => and
Oracle Span 31-32:  developing => develop-02
Oracle Span 24-25:  experience => experience
Oracle Span 26-27:  Germany => (country :name (name :op "Germany"))
Oracle Span 15-16:  Government => (government-organization :ARG0-of govern-01)
Oracle Span 34-35:  industrialization => industrialize-01
Oracle Span 17-18:  like => like-01
Oracle Span 9-10:  meeting => meet-03
Oracle Span 20-21:  more => more
Oracle Span 2-3:  President => (have-org-role-91 :ARG2 president)
Oracle Span 35-36:  process => process
Oracle Span 19-20:  receive => receive-01
Oracle Span 11-12:  Schroeder => (person :name (name :op "Schroeder"))
Oracle Span 1-2:  State => state-01
Oracle Span 21-22:  technology => technology
Oracle Span 3-6:  Tran Duc Luong => (person :name (name :op "Luong" :op "Duc" :op "Tran"))
Oracle Span 22-23:  transfer => transfer-01
Oracle Span 29-30:  Vietnam => (country :name (name :op "Vietnam"))

Incorrect span: experience => experience-01
Incorrect span: Tran Duc Luong => (person :name (name :op "Tran" :op "Duc" :op "Luong"))
Missing span: Tran Duc Luong => (person :name (name :op "Luong" :op "Duc" :op "Tran"))
Missing span: Vietnam => (country :name (name :op "Vietnam"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: Schroeder => (person :name (name :op "Schroeder"))
Missing span: State => state-01
Missing span: meeting => meet-03
Missing span: and => and
Missing span: developing => develop-02
Missing span: like => like-01
Missing span: receive => receive-01
Missing span: and => and
Missing span: experience => experience
Missing span: more => more
Missing span: industrialization => industrialize-01
Missing span: Government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Vietnamese	_	JJ	JJ	_	6	amod	_	_
2	State	_	NNP	NNP	_	6	nn	_	_
3	President	_	NNP	NNP	_	6	nn	_	_
4	Tran	_	NNP	NNP	_	6	nn	_	_
5	Duc	_	NNP	NNP	_	6	nn	_	_
6	Luong	_	NNP	NNP	_	7	nsubj	_	_
7	stated	_	VBD	VBD	_	0	root	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	a	_	DT	DT	_	10	det	_	_
10	meeting	_	NN	NN	_	8	pobj	_	_
11	with	_	IN	IN	_	10	prep	_	_
12	Schroeder	_	NNP	NNP	_	11	pobj	_	_
13	that	_	IN	IN	_	18	mark	_	_
14	the	_	DT	DT	_	16	det	_	_
15	Vietnamese	_	JJ	JJ	_	16	amod	_	_
16	Government	_	NN	NN	_	18	nsubj	_	_
17	would	_	MD	MD	_	18	aux	_	_
18	like	_	VB	VB	_	7	ccomp	_	_
19	to	_	TO	TO	_	20	aux	_	_
20	receive	_	VB	VB	_	18	xcomp	_	_
21	more	_	JJR	JJR	_	23	amod	_	_
22	technology	_	NN	NN	_	23	nn	_	_
23	transfer	_	NN	NN	_	20	dobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	experience	_	NN	NN	_	23	conj	_	_
26	from	_	IN	IN	_	20	prep	_	_
27	Germany	_	NNP	NNP	_	26	pobj	_	_
28	and	_	CC	CC	_	18	cc	_	_
29	that	_	IN	IN	_	32	mark	_	_
30	Vietnam	_	NNP	NNP	_	32	nsubj	_	_
31	is	_	VBZ	VBZ	_	32	aux	_	_
32	developing	_	VBG	VBG	_	18	conj	_	_
33	under	_	IN	IN	_	32	prep	_	_
34	the	_	DT	DT	_	36	det	_	_
35	industrialization	_	NN	NN	_	36	nn	_	_
36	process	_	NN	NN	_	33	pobj	_	_
37	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, d / develop-02)
(a / and, op, l / like-01)
(a2 / and, op, e / experience)
(a2 / and, op, t / transfer-01)
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(d / develop-02, ARG1, c / country)
(d / develop-02, prep-under, p4 / process)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(l / like-01, ARG0, g / government-organization)
(l / like-01, ARG1, r / receive-01)
(m / meet-03, ARG0, p / person)
(m / meet-03, ARG1, p3 / person)
(n / name, op, "Duc")
(n / name, op, "Luong")
(n / name, op, "Tran")
(n2 / name, op, "Vietnam")
(n3 / name, op, "Schroeder")
(n4 / name, op, "Germany")
(p / person, name, n / name)
(p3 / person, name, n3 / name)
(p4 / process, mod, i / industrialize-01)
(r / receive-01, ARG0, g / government-organization)
(r / receive-01, ARG1, a2 / and)
(r / receive-01, ARG2, c2 / country)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s / state-01, time, m / meet-03)
(t / transfer-01, ARG1, t2 / technology)
(t2 / technology, quant, m2 / more)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),process,process,false), Span(24,25,List(1),experience,experience-01,false), Span(22,23,List(2),transfer,transfer-01,false), Span(21,22,List(3),technology,technology,false), Span(3,6,List(8, 7, 6, 5, 4),Tran Duc Luong,(person :name (name :op "Tran" :op "Duc" :op "Luong")),false), Span(2,3,List(10, 9),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> transfer-01, 5 -> name, 8 -> "Luong", 7 -> "Duc", 1 -> experience-01, 4 -> person, 6 -> "Tran", 9 -> have-org-role-91, 0 -> process, 10 -> president, 3 -> technology),Map(n -> name, e -> experience-01, h -> have-org-role-91, t -> transfer-01, p2 -> person, p -> process, t2 -> technology, p3 -> president))),[Ljava.lang.String;@48a663e9,Annotation([Ljava.lang.String;@777d0bc3,[Ljava.lang.String;@3178219a,[Ljava.lang.String;@2d85fb64),Annotation([Ljava.lang.String;@56476c16,[Ljava.lang.String;@497b560e,[Ledu.cmu.lti.nlp.amr.Dependency;@39ffda4a),Annotation([Ljava.lang.String;@3ba348ca,[Ljava.lang.String;@56e9a474,[Ljava.lang.String;@45b15381),Annotation([Ljava.lang.String;@2dbfcf7,[Ljava.lang.String;@239f017e,[Ledu.cmu.lti.nlp.amr.Entity;@38cedb7d))
AMR:
(e / experience-01, ARG0, p / process)
(e / experience-01, ARG1, t / transfer-01)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, p3 / president)
(n / name, op, "Duc")
(n / name, op, "Luong")
(n / name, op, "Tran")
(p2 / person, name, n / name)
(t / transfer-01, ARG0, p2 / person)
(t / transfer-01, ARG1, t2 / technology)

Decoded in 166,813 microseconds
Sentence: Schroeder stated that German officials attach great importance to Vietnam in an attempt to strengthen bilateral ties.

NER Entity: (person :name (name :op "Schroeder"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "Vietnam"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 5-6:  attach => attach-01
Span 12-13:  attempt => attempt-01
Span 15-16:  bilateral => bilateral
Span 3-4:  German => (country :name (name :op "Germany"))
Span 6-7:  great => great
Span 7-8:  importance => important
Span 4-5:  officials => (have-org-role-91 :ARG2 official)
Span 14-15:  strengthen => strengthen-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 12-13:  attempt => attempt-01
Oracle Span 15-16:  bilateral => bilateral
Oracle Span 3-4:  German => (country :name (name :op "Germany"))
Oracle Span 6-7:  great => great
Oracle Span 7-8:  importance => important
Oracle Span 4-5:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 0-1:  Schroeder => (person :name (name :op "Schroeder"))
Oracle Span 1-2:  stated => state-01
Oracle Span 14-15:  strengthen => strengthen-01
Oracle Span 16-17:  ties => tie-01
Oracle Span 9-10:  Vietnam => (country :name (name :op "Vietnam"))

Extra span: attach => attach-01
Missing span: Schroeder => (person :name (name :op "Schroeder"))
Missing span: Vietnam => (country :name (name :op "Vietnam"))
Missing span: stated => state-01
Missing span: ties => tie-01
Dependencies:
1	Schroeder	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	German	_	JJ	JJ	_	5	amod	_	_
5	officials	_	NNS	NNS	_	6	nsubj	_	_
6	attach	_	VBP	VBP	_	2	ccomp	_	_
7	great	_	JJ	JJ	_	8	amod	_	_
8	importance	_	NN	NN	_	6	dobj	_	_
9	to	_	TO	TO	_	6	prep	_	_
10	Vietnam	_	NNP	NNP	_	9	pobj	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	an	_	DT	DT	_	13	det	_	_
13	attempt	_	NN	NN	_	11	pobj	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	strengthen	_	VB	VB	_	6	vmod	_	_
16	bilateral	_	JJ	JJ	_	17	amod	_	_
17	ties	_	NNS	NNS	_	15	dobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(a2 / attempt-01, ARG1, s2 / strengthen-01)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(i / important, degree, g / great)
(n / name, op, "Schroeder")
(n2 / name, op, "Germany")
(n3 / name, op, "Vietnam")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s2 / strengthen-01, ARG1, t / tie-01)
(t / tie-01, mod, b / bilateral)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),bilateral,bilateral,false), Span(14,15,List(1),strengthen,strengthen-01,false), Span(12,13,List(2),attempt,attempt-01,false), Span(7,8,List(3),importance,important,false), Span(6,7,List(4),great,great,false), Span(5,6,List(5),attach,attach-01,false), Span(4,5,List(7, 6),officials,(have-org-role-91 :ARG2 official),false), Span(3,4,List(10, 9, 8),German,(country :name (name :op "Germany")),false)),Map(2 -> attempt-01, 5 -> attach-01, 8 -> country, 7 -> official, 1 -> strengthen-01, 4 -> great, 6 -> have-org-role-91, 9 -> name, 0 -> bilateral, 10 -> "Germany", 3 -> important),Map(n -> name, h -> have-org-role-91, b -> bilateral, s -> strengthen-01, g -> great, a -> attempt-01, a2 -> attach-01, i -> important, c -> country, o -> official))),[Ljava.lang.String;@772caabe,Annotation([Ljava.lang.String;@2acdcce8,[Ljava.lang.String;@7102ac3e,[Ljava.lang.String;@3f598450),Annotation([Ljava.lang.String;@2db2a05f,[Ljava.lang.String;@695c938d,[Ledu.cmu.lti.nlp.amr.Dependency;@d5bb1c4),Annotation([Ljava.lang.String;@7ed3df3b,[Ljava.lang.String;@465b38e6,[Ljava.lang.String;@4b960b5b),Annotation([Ljava.lang.String;@1b13467c,[Ljava.lang.String;@7bd96822,[Ledu.cmu.lti.nlp.amr.Entity;@64dae3b7))
AMR:
(a / attempt-01, ARG0, c / country)
(a / attempt-01, ARG1, s / strengthen-01)
(a2 / attach-01, ARG1, i / important)
(a2 / attach-01, purpose, s / strengthen-01)
(c / country, name, n / name)
(h / have-org-role-91, ARG0, b / bilateral)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(i / important, mod, g / great)
(n / name, op, "Germany")

Decoded in 103,558 microseconds
Sentence: The German Government supports the Vietnamese government's bid for a non-permanent membership of the UN Security Council in the 2008-2009 term and encourages small- and medium-sized German enterprises to do business with Vietnam.

NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (organization :name (name :op "UN" :op "Security" :op "Council"))
mkDayMonthYear(2008-2009,09,20,2008)
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "Vietnam"))
NER Entity: (country :name (name :op "Vietnam"))
mkDayMonthYear(2008-2009,09,20,2008)
NER Entity: (thing :name (name :op "German"))
Spans:
Span 22-23:  2008-2009 => (date-entity :day 9 :month 20 :year 2008)
Span 8-9:  bid => bid-01
Span 36-37:  business => business
Span 25-26:  encourages => encourage-02
Span 33-34:  enterprises => enterprise
Span 32-33:  German => (country :name (name :op "Germany"))
Span 1-2:  German => (country :name (name :op "Germany"))
Span 29-30:  medium => medium
Span 15-18:  of the UN => (organization :name (name :op "UN" :op "Security" :op "Council"))
Span 13-14:  permanent => permanent
Span 18-20:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 31-32:  sized => size-01
Span 26-27:  small => small
Span 3-4:  supports => support-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 22-23:  2008-2009 => 2008
Oracle Span 24-25:  and => and
Oracle Span 28-29:  and => and
Oracle Span 8-9:  bid => bid-01
Oracle Span 36-37:  business => business
Oracle Span 35-36:  do => do-02
Oracle Span 25-26:  encourages => encourage-01
Oracle Span 33-34:  enterprises => enterprise
Oracle Span 1-2:  German => (country :name (name :op "Germany"))
Oracle Span 2-3:  Government => government-organization
Oracle Span 6-7:  government => govern-01
Oracle Span 29-30:  medium => medium
Oracle Span 14-15:  membership => membership
Oracle Span 13-14:  permanent => permanence
Oracle Span 18-20:  Security Council => (organization :name (name :op "Council" :op "Security"))
Oracle Span 31-32:  sized => size-01
Oracle Span 26-27:  small => small
Oracle Span 3-4:  supports => support-01
Oracle Span 23-24:  term => term
Oracle Span 17-18:  UN => (organization :name (name :op "UN"))
Oracle Span 38-39:  Vietnam => (country :name (name :op "Vietnam"))

Extra span: German => (country :name (name :op "Germany"))
Incorrect span: encourages => encourage-02
Incorrect span: 2008-2009 => (date-entity :day 9 :month 20 :year 2008)
Extra span: of the UN => (organization :name (name :op "UN" :op "Security" :op "Council"))
Incorrect span: permanent => permanent
Missing span: Vietnam => (country :name (name :op "Vietnam"))
Missing span: UN => (organization :name (name :op "UN"))
Missing span: and => and
Missing span: encourages => encourage-01
Missing span: do => do-02
Missing span: and => and
Missing span: membership => membership
Missing span: term => term
Missing span: 2008-2009 => 2008
Missing span: permanent => permanence
Missing span: Government => government-organization
Missing span: government => govern-01
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	German	_	JJ	JJ	_	3	amod	_	_
3	Government	_	NN	NN	_	4	nsubj	_	_
4	supports	_	VBZ	VBZ	_	0	root	_	_
5	the	_	DT	DT	_	7	det	_	_
6	Vietnamese	_	JJ	JJ	_	7	amod	_	_
7	government	_	NN	NN	_	9	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	bid	_	NN	NN	_	4	dobj	_	_
10	for	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	13	det	_	_
12	non-permanent	_	JJ	JJ	_	13	amod	_	_
13	membership	_	NN	NN	_	10	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	18	det	_	_
16	UN	_	NNP	NNP	_	18	nn	_	_
17	Security	_	NNP	NNP	_	18	nn	_	_
18	Council	_	NNP	NNP	_	14	pobj	_	_
19	in	_	IN	IN	_	4	prep	_	_
20	the	_	DT	DT	_	22	det	_	_
21	2008-2009	_	CD	CD	_	22	num	_	_
22	term	_	NN	NN	_	19	pobj	_	_
23	and	_	CC	CC	_	4	cc	_	_
24	encourages	_	VBZ	VBZ	_	4	conj	_	_
25	small	_	JJ	JJ	_	30	amod	_	_
26	-	_	:	:	_	25	punct	_	_
27	and	_	CC	CC	_	25	cc	_	_
28	medium-sized	_	JJ	JJ	_	25	conj	_	_
29	German	_	JJ	JJ	_	30	amod	_	_
30	enterprises	_	NNS	NNS	_	24	dobj	_	_
31	to	_	TO	TO	_	32	aux	_	_
32	do	_	VB	VB	_	24	xcomp	_	_
33	business	_	NN	NN	_	32	dobj	_	_
34	with	_	IN	IN	_	32	prep	_	_
35	Vietnam	_	NNP	NNP	_	34	pobj	_	_
36	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, e / encourage-01)
(a / and, op, s / support-01)
(a2 / and, op, e3 / enterprise)
(b / bid-01, ARG0, g3 / government-organization)
(b / bid-01, ARG1, m / membership)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d4 / do-02, ARG0, a2 / and)
(d4 / do-02, ARG1, b2 / business)
(d4 / do-02, ARG4, c2 / country)
(e / encourage-01, ARG1, a2 / and)
(e / encourage-01, ARG2, d4 / do-02)
(e3 / enterprise, mod, c / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c2 / country)
(m / membership, mod, o / organization)
(m / membership, mod, p / permanence)
(m / membership, time, t / term)
(n / name, op, "Germany")
(n2 / name, op, "Vietnam")
(n3 / name, op, "Council")
(n3 / name, op, "Security")
(n4 / name, op, "UN")
(o / organization, name, n3 / name)
(o2 / organization, name, n4 / name)
(o2 / organization, part, o / organization)
(s / support-01, ARG1, b / bid-01)
(s4 / size-01, ARG1, e3 / enterprise)
(s4 / size-01, ARG2, m2 / medium)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),business,business,false), Span(33,34,List(1),enterprises,enterprise,false), Span(32,33,List(4, 3, 2),German,(country :name (name :op "Germany")),false), Span(31,32,List(5),sized,size-01,false), Span(29,30,List(6),medium,medium,false), Span(26,27,List(7),small,small,false), Span(25,26,List(8),encourages,encourage-02,false), Span(22,23,List(12, 11, 10, 9),2008-2009,(date-entity :day 9 :month 20 :year 2008),false), Span(18,20,List(16, 15, 14, 13),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(15,18,List(21, 20, 19, 18, 17),of the UN,(organization :name (name :op "UN" :op "Security" :op "Council")),false), Span(13,14,List(22),permanent,permanent,false), Span(8,9,List(23),bid,bid-01,false), Span(3,4,List(24),supports,support-01,false), Span(1,2,List(27, 26, 25),German,(country :name (name :op "Germany")),false)),Map(2 -> country, 5 -> size-01, 27 -> "Germany", 12 -> 2008, 8 -> encourage-02, 15 -> "Council", 21 -> "Council", 18 -> name, 24 -> support-01, 7 -> small, 1 -> enterprise, 17 -> organization, 23 -> bid-01, 26 -> name, 4 -> "Germany", 11 -> 20, 14 -> name, 20 -> "Security", 6 -> medium, 9 -> date-entity, 0 -> business, 22 -> permanent, 16 -> "Security", 19 -> "UN", 10 -> 9, 3 -> name, 25 -> country, 13 -> organization),Map(e -> enterprise, n -> name, 2 -> 20, s2 -> small, b -> business, b2 -> bid-01, e2 -> encourage-02, n4 -> name, s -> size-01, m -> medium, d -> date-entity, p -> permanent, n3 -> name, o2 -> organization, s3 -> support-01, c -> country, 9 -> 9, 22 -> 2008, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@1fedf0a4,Annotation([Ljava.lang.String;@1e4c6583,[Ljava.lang.String;@2ee48610,[Ljava.lang.String;@1d901f20),Annotation([Ljava.lang.String;@6d08b4e6,[Ljava.lang.String;@1015a4b9,[Ledu.cmu.lti.nlp.amr.Dependency;@1acb74ad),Annotation([Ljava.lang.String;@7bf01cb,[Ljava.lang.String;@2f382a5e,[Ljava.lang.String;@12b5736c),Annotation([Ljava.lang.String;@539a138b,[Ljava.lang.String;@2cd4e16a,[Ledu.cmu.lti.nlp.amr.Entity;@42505474))
AMR:
(b2 / bid-01, ARG0, s2 / small)
(b2 / bid-01, ARG1, b / business)
(c / country, name, n / name)
(c2 / country, name, n4 / name)
(c2 / country, op, s / size-01)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 2 / 20)
(d / date-entity, year, 22 / 2008)
(e / enterprise, mod, c / country)
(e2 / encourage-02, ARG0, p / permanent)
(e2 / encourage-02, ARG1, e / enterprise)
(e2 / encourage-02, concession, s3 / support-01)
(n / name, op, "Germany")
(n2 / name, op, "Council")
(n2 / name, op, "Security")
(n3 / name, op, "Council")
(n3 / name, op, "Security")
(n3 / name, op, "UN")
(n4 / name, op, "Germany")
(o / organization, name, n2 / name)
(o / organization, name, n3 / name)
(o2 / organization, name, n3 / name)
(s / size-01, ARG0, d / date-entity)
(s / size-01, ARG1, e / enterprise)
(s / size-01, ARG2, m / medium)
(s3 / support-01, ARG0, o2 / organization)
(s3 / support-01, ARG1, b2 / bid-01)

Decoded in 953,560 microseconds
Sentence: The German government offered the Vietnamese government official development assistance worth more than 480 million dollars in the 1990-2003 period primarily for poverty reduction, agriculture development, healthcare and economic reforms.

NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
mkDayMonthYear(1990-2003,03,20,1990)
mkDayMonthYear(1990-2003,03,20,1990)
NER Entity: (thing :name (name :op "German"))
Spans:
Span 18-19:  1990-2003 => (date-entity :day 3 :month 20 :year 1990)
Span 13-14:  480 => 480
Span 25-26:  agriculture => agriculture
Span 9-10:  assistance => assist-01
Span 26-27:  development => develop-02
Span 8-9:  development => develop-02
Span 15-16:  dollars => (monetary-quantity :unit dollar)
Span 30-31:  economic => economy
Span 1-2:  German => (country :name (name :op "Germany"))
Span 3-4:  offered => offer-01
Span 19-20:  period => period
Span 22-23:  poverty => poverty
Span 20-21:  primarily => primary
Span 23-24:  reduction => reduce-01
Span 31-32:  reforms => reform-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 18-19:  1990-2003 => 1990
Oracle Span 25-26:  agriculture => agriculture
Oracle Span 29-30:  and => and
Oracle Span 9-10:  assistance => assist-01
Oracle Span 8-9:  development => develop-02
Oracle Span 26-27:  development => develop-02
Oracle Span 15-16:  dollars => (monetary-quantity :unit dollar)
Oracle Span 30-31:  economic => economy
Oracle Span 1-2:  German => (country :name (name :op "Germany"))
Oracle Span 2-3:  government => government-organization
Oracle Span 6-7:  government => govern-01
Oracle Span 28-29:  healthcare => healthcare
Oracle Span 11-12:  more => more-than
Oracle Span 3-4:  offered => offer-01
Oracle Span 7-8:  official => official
Oracle Span 22-23:  poverty => poverty
Oracle Span 20-21:  primarily => primarily
Oracle Span 23-24:  reduction => reduce-01
Oracle Span 31-32:  reforms => reform-01
Oracle Span 5-6:  Vietnamese => (country :name (name :op "Vietnam"))
Oracle Span 10-11:  worth => worth

Incorrect span: primarily => primary
Extra span: period => period
Incorrect span: 1990-2003 => (date-entity :day 3 :month 20 :year 1990)
Extra span: 480 => 480
Missing span: Vietnamese => (country :name (name :op "Vietnam"))
Missing span: official => official
Missing span: worth => worth
Missing span: and => and
Missing span: primarily => primarily
Missing span: healthcare => healthcare
Missing span: government => government-organization
Missing span: government => govern-01
Missing span: 1990-2003 => 1990
Missing span: more => more-than
Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	German	_	JJ	JJ	_	3	amod	_	_
3	government	_	NN	NN	_	4	nsubj	_	_
4	offered	_	VBD	VBD	_	0	root	_	_
5	the	_	DT	DT	_	10	det	_	_
6	Vietnamese	_	JJ	JJ	_	10	amod	_	_
7	government	_	NN	NN	_	10	nn	_	_
8	official	_	NN	NN	_	10	nn	_	_
9	development	_	NN	NN	_	10	nn	_	_
10	assistance	_	NN	NN	_	4	dobj	_	_
11	worth	_	IN	IN	_	4	prep	_	_
12	more	_	JJR	JJR	_	13	mwe	_	_
13	than	_	IN	IN	_	15	quantmod	_	_
14	480	_	CD	CD	_	15	number	_	_
15	million	_	CD	CD	_	16	num	_	_
16	dollars	_	NNS	NNS	_	11	pobj	_	_
17	in	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	1990-2003	_	CD	CD	_	20	num	_	_
20	period	_	NN	NN	_	17	pobj	_	_
21	primarily	_	RB	RB	_	22	advmod	_	_
22	for	_	IN	IN	_	4	prep	_	_
23	poverty	_	NN	NN	_	24	nn	_	_
24	reduction	_	NN	NN	_	22	pobj	_	_
25	,	_	,	,	_	24	punct	_	_
26	agriculture	_	NN	NN	_	27	nn	_	_
27	development	_	NN	NN	_	24	conj	_	_
28	,	_	,	,	_	24	punct	_	_
29	healthcare	_	NN	NN	_	24	conj	_	_
30	and	_	CC	CC	_	24	cc	_	_
31	economic	_	JJ	JJ	_	32	amod	_	_
32	reforms	_	NNS	NNS	_	24	conj	_	_
33	.	_	.	.	_	4	punct	_	_

Oracle:
(a / assist-01, ARG1, g3 / government-organization)
(a / assist-01, ARG2, d / develop-02)
(a / assist-01, manner, o2 / official)
(a / assist-01, mod, w / worth)
(a / assist-01, purpose, a2 / and)
(a2 / and, mod, p2 / primarily)
(a2 / and, op, d6 / develop-02)
(a2 / and, op, h / healthcare)
(a2 / and, op, r / reduce-01)
(a2 / and, op, r2 / reform-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d6 / develop-02, ARG1, a3 / agriculture)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c2 / country)
(m / more-than, op, m2 / monetary-quantity)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Germany")
(n2 / name, op, "Vietnam")
(o / offer-01, ARG1, a / assist-01)
(o / offer-01, ARG3, g3 / government-organization)
(r / reduce-01, ARG1, p / poverty)
(r2 / reform-01, ARG1, e / economy)
(w / worth, quant, m / more-than)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),reforms,reform-01,false), Span(30,31,List(1),economic,economy,false), Span(26,27,List(2),development,develop-02,false), Span(25,26,List(3),agriculture,agriculture,false), Span(23,24,List(4),reduction,reduce-01,false), Span(22,23,List(5),poverty,poverty,false), Span(20,21,List(6),primarily,primary,false), Span(19,20,List(7),period,period,false), Span(18,19,List(11, 10, 9, 8),1990-2003,(date-entity :day 3 :month 20 :year 1990),false), Span(15,16,List(13, 12),dollars,(monetary-quantity :unit dollar),false), Span(13,14,List(14),480,480,false), Span(9,10,List(15),assistance,assist-01,false), Span(8,9,List(16),development,develop-02,false), Span(3,4,List(17),offered,offer-01,false), Span(1,2,List(20, 19, 18),German,(country :name (name :op "Germany")),false)),Map(2 -> develop-02, 5 -> poverty, 12 -> monetary-quantity, 15 -> assist-01, 8 -> date-entity, 18 -> country, 7 -> period, 17 -> offer-01, 1 -> economy, 4 -> reduce-01, 11 -> 1990, 14 -> 480, 20 -> "Germany", 6 -> primary, 0 -> reform-01, 9 -> 3, 16 -> develop-02, 19 -> name, 3 -> agriculture, 10 -> 20, 13 -> dollar),Map(e -> economy, n -> name, 2 -> 20, d3 -> dollar, p2 -> primary, d -> develop-02, m -> monetary-quantity, 1 -> 1990, r2 -> reduce-01, p -> poverty, 4 -> 480, a -> agriculture, d2 -> date-entity, a2 -> assist-01, r -> reform-01, c -> country, d4 -> develop-02, o -> offer-01, p3 -> period, 3 -> 3))),[Ljava.lang.String;@7b477141,Annotation([Ljava.lang.String;@784223e9,[Ljava.lang.String;@7316523a,[Ljava.lang.String;@33a55bd8),Annotation([Ljava.lang.String;@73a8e994,[Ljava.lang.String;@1a1cc163,[Ledu.cmu.lti.nlp.amr.Dependency;@5b5ac798),Annotation([Ljava.lang.String;@42383cb0,[Ljava.lang.String;@7668892a,[Ljava.lang.String;@a83495d),Annotation([Ljava.lang.String;@7e83992,[Ljava.lang.String;@4364863,[Ledu.cmu.lti.nlp.amr.Entity;@3625a016))
AMR:
(a2 / assist-01, ARG1, r2 / reduce-01)
(c / country, name, n / name)
(d / develop-02, ARG0, c / country)
(d / develop-02, ARG1, d2 / date-entity)
(d / develop-02, mod, a / agriculture)
(d2 / date-entity, day, 3 / 3)
(d2 / date-entity, month, 2 / 20)
(d2 / date-entity, year, 1 / 1990)
(d4 / develop-02, ARG0, 4 / 480)
(d4 / develop-02, ARG1, e / economy)
(d4 / develop-02, ARG2, a2 / assist-01)
(m / monetary-quantity, quant, 4 / 480)
(m / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Germany")
(o / offer-01, ARG1, a2 / assist-01)
(p3 / period, time, d2 / date-entity)
(r / reform-01, ARG0, c / country)
(r / reform-01, ARG1, e / economy)
(r2 / reduce-01, ARG0, p2 / primary)
(r2 / reduce-01, ARG1, p / poverty)

Decoded in 919,924 microseconds
Sentence: The Vietnam-Germany trade volume rose 7.7 percent in 2003 to reach 1.4 billion dollars, of which 815.4 million dollars came from Vietnamese exports.

NER Entity: (thing :name (name :op "Vietnam" :op "-" :op "Germany"))
NER Entity: (thing :name (name :op "Vietnamese"))
Spans:
Span 13-14:  1.4 => 1.4
Span 10-11:  2003 => (date-entity :year 2003)
Span 21-22:  dollars => (monetary-quantity :unit dollar)
Span 15-16:  dollars => (monetary-quantity :unit dollar)
Span 25-26:  exports => export-01
Span 8-9:  percent => percentage-entity
Span 12-13:  reach => reach-01
Span 6-7:  rose => rise-01
Span 4-5:  trade => trade-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 10-11:  2003 => (date-entity :year 2003)
Oracle Span 7-8:  7.7 => 7.7
Oracle Span 22-23:  came => come-03
Oracle Span 15-16:  dollars => (monetary-quantity :unit dollar)
Oracle Span 25-26:  exports => export-01
Oracle Span 3-4:  Germany => (country :name (name :op "Germany"))
Oracle Span 17-18:  of => include-91
Oracle Span 8-9:  percent => percentage-entity
Oracle Span 12-13:  reach => reach-01
Oracle Span 6-7:  rose => rise-01
Oracle Span 4-5:  trade => trade-01
Oracle Span 1-2:  Vietnam => (country :name (name :op "Vietnam"))
Oracle Span 5-6:  volume => volume

Extra span: dollars => (monetary-quantity :unit dollar)
Extra span: 1.4 => 1.4
Missing span: Vietnam => (country :name (name :op "Vietnam"))
Missing span: Germany => (country :name (name :op "Germany"))
Missing span: of => include-91
Missing span: came => come-03
Missing span: 7.7 => 7.7
Missing span: volume => volume
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Vietnam-Germany	_	JJ	JJ	_	4	amod	_	_
3	trade	_	NN	NN	_	4	nn	_	_
4	volume	_	NN	NN	_	5	nsubj	_	_
5	rose	_	VBD	VBD	_	0	root	_	_
6	7.7	_	CD	CD	_	7	num	_	_
7	percent	_	NN	NN	_	5	dobj	_	_
8	in	_	IN	IN	_	5	prep	_	_
9	2003	_	CD	CD	_	8	pobj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	reach	_	VB	VB	_	5	vmod	_	_
12	1.4	_	CD	CD	_	13	number	_	_
13	billion	_	CD	CD	_	14	num	_	_
14	dollars	_	NNS	NNS	_	11	dobj	_	_
15	,	_	,	,	_	14	punct	_	_
16	of	_	IN	IN	_	21	prep	_	_
17	which	_	WDT	WDT	_	16	pobj	_	_
18	815.4	_	CD	CD	_	19	number	_	_
19	million	_	CD	CD	_	20	num	_	_
20	dollars	_	NNS	NNS	_	21	nsubj	_	_
21	came	_	VBD	VBD	_	14	rcmod	_	_
22	from	_	IN	IN	_	21	prep	_	_
23	Vietnamese	_	JJ	JJ	_	24	amod	_	_
24	exports	_	NNS	NNS	_	22	pobj	_	_
25	.	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / come-03, ARG2, e / export-01)
(d / date-entity, year, 2003)
(e / export-01, ARG0, c / country)
(i / include-91, ARG2, m / monetary-quantity)
(m / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")
(p / percentage-entity, value, 7 / 7.7)
(r / rise-01, ARG1, v / volume)
(r / rise-01, ARG2, p / percentage-entity)
(r / rise-01, ARG4, r2 / reach-01)
(r / rise-01, time, d / date-entity)
(r2 / reach-01, ARG0, v / volume)
(r2 / reach-01, ARG1, m / monetary-quantity)
(t / trade-01, ARG0, c / country)
(t / trade-01, ARG2, c2 / country)
(v / volume, mod, t / trade-01)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),exports,export-01,false), Span(21,22,List(2, 1),dollars,(monetary-quantity :unit dollar),false), Span(15,16,List(4, 3),dollars,(monetary-quantity :unit dollar),false), Span(13,14,List(5),1.4,1.4,false), Span(12,13,List(6),reach,reach-01,false), Span(10,11,List(8, 7),2003,(date-entity :year 2003),false), Span(8,9,List(9),percent,percentage-entity,false), Span(6,7,List(10),rose,rise-01,false), Span(4,5,List(11),trade,trade-01,false)),Map(2 -> dollar, 5 -> 1.4, 8 -> 2003, 7 -> date-entity, 1 -> monetary-quantity, 11 -> trade-01, 4 -> dollar, 6 -> reach-01, 9 -> percentage-entity, 0 -> export-01, 10 -> rise-01, 3 -> monetary-quantity),Map(e -> export-01, 2 -> 2003, t -> trade-01, d3 -> date-entity, m2 -> monetary-quantity, d -> dollar, m -> monetary-quantity, r2 -> rise-01, p -> percentage-entity, 1 -> 1.4, d2 -> dollar, r -> reach-01))),[Ljava.lang.String;@267cde2e,Annotation([Ljava.lang.String;@609e57da,[Ljava.lang.String;@56dd6efa,[Ljava.lang.String;@4d634127),Annotation([Ljava.lang.String;@d2e6b0b,[Ljava.lang.String;@1f1cddf3,[Ledu.cmu.lti.nlp.amr.Dependency;@228bda54),Annotation([Ljava.lang.String;@75b6dd5b,[Ljava.lang.String;@b3e86d5,[Ljava.lang.String;@72b43104),Annotation([Ljava.lang.String;@e111c7c,[Ljava.lang.String;@4d0e54e0,[Ledu.cmu.lti.nlp.amr.Entity;@32f96bba))
AMR:
(d3 / date-entity, year, 2 / 2003)
(e / export-01, ARG0, m / monetary-quantity)
(e / export-01, ARG1, d3 / date-entity)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, unit, d2 / dollar)
(r / reach-01, ARG0, p / percentage-entity)
(r / reach-01, ARG1, m / monetary-quantity)
(r2 / rise-01, ARG0, m2 / monetary-quantity)
(r2 / rise-01, ARG1, 1 / 1.4)
(r2 / rise-01, ARG2, p / percentage-entity)
(t / trade-01, ARG1, r2 / rise-01)

Decoded in 197,868 microseconds
Sentence: 2004-12-19

mkDayMonthYear(2004-12-19,19,12,2004)
mkDayMonthYear(2004-12-19,19,12,2004)
Spans:
Span 0-1:  2004-12-19 => (date-entity :day 19 :month 12 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  2004-12-19 => (date-entity :day 19 :month 12 :year 2004)

Dependencies:
1	2004-12-19	_	NNP	NNP	_	0	root	_	_

Oracle:
(d / date-entity, day, 19)
(d / date-entity, month, 12)
(d / date-entity, year, 2004)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-12-19,(date-entity :day 19 :month 12 :year 2004),false)),Map(2 -> 12, 1 -> 19, 0 -> date-entity, 3 -> 2004),Map(2 -> 2004, 12 -> 12, d -> date-entity, 1 -> 19))),[Ljava.lang.String;@611640f0,Annotation([Ljava.lang.String;@67e25252,[Ljava.lang.String;@58f4b31a,[Ljava.lang.String;@21a9a705),Annotation([Ljava.lang.String;@72eb6200,[Ljava.lang.String;@76ececd,[Ledu.cmu.lti.nlp.amr.Dependency;@7affc159),Annotation([Ljava.lang.String;@1682c08c,[Ljava.lang.String;@3fd05b3e,[Ljava.lang.String;@4eb9f2af),Annotation([Ljava.lang.String;@4a481728,[Ljava.lang.String;@4ace284d,[Ledu.cmu.lti.nlp.amr.Entity;@77fa9381))
AMR:
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 12 / 12)
(d / date-entity, year, 2 / 2004)

Decoded in 8,343 microseconds
Sentence: Hong Kong (HK); China (CN)

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "HK"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "CN"))
Spans:
Span 5-6:  ; => and
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  ; => and
Oracle Span 6-7:  China => (country :name (name :op "China"))
Oracle Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))

Missing span: China => (country :name (name :op "China"))
Dependencies:
1	Hong	_	NNP	NNP	_	2	nn	_	_
2	Kong	_	NNP	NNP	_	0	root	_	_
3	(	_	(	(	_	4	punct	_	_
4	HK	_	NNP	NNP	_	2	appos	_	_
5	)	_	)	)	_	4	punct	_	_
6	;	_	:	:	_	2	punct	_	_
7	China	_	NNP	NNP	_	9	nn	_	_
8	(	_	(	(	_	9	punct	_	_
9	CN	_	NN	NN	_	2	dep	_	_
10	)	_	)	)	_	9	punct	_	_

Oracle:
(a / and, op, c / city)
(a / and, op, c2 / country)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "China")

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),;,and,false), Span(0,2,List(4, 3, 2, 1),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> name, 1 -> city, 4 -> "Hong", 0 -> and, 3 -> "Kong"),Map(n -> name, a -> and, c -> city))),[Ljava.lang.String;@76d72b5b,Annotation([Ljava.lang.String;@7cac93fe,[Ljava.lang.String;@479b5066,[Ljava.lang.String;@64deb58f),Annotation([Ljava.lang.String;@2b1cd7bc,[Ljava.lang.String;@33379242,[Ledu.cmu.lti.nlp.amr.Dependency;@2e32fc22),Annotation([Ljava.lang.String;@3f5156a6,[Ljava.lang.String;@72bdd7c7,[Ljava.lang.String;@7d17ee50),Annotation([Ljava.lang.String;@44fdce3c,[Ljava.lang.String;@712c5463,[Ledu.cmu.lti.nlp.amr.Entity;@6d33a66e))
AMR:
(a / and, op, c / city)
(c / city, name, n / name)
(n / name, op, "Hong")
(n / name, op, "Kong")

Decoded in 17,300 microseconds
Sentence: technology; international

Spans:
Span 1-2:  ; => and
Span 0-1:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  ; => and
Oracle Span 2-3:  international => international
Oracle Span 0-1:  technology => technology

Missing span: international => international
Dependencies:
1	technology	_	NN	NN	_	0	root	_	_
2	;	_	:	:	_	1	punct	_	_
3	international	_	JJ	JJ	_	1	dep	_	_

Oracle:
(a / and, op, i / international)
(a / and, op, t / technology)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),;,and,false), Span(0,1,List(1),technology,technology,false)),Map(1 -> technology, 0 -> and),Map(t -> technology, a -> and))),[Ljava.lang.String;@2f14b0f6,Annotation([Ljava.lang.String;@5b20706,[Ljava.lang.String;@16aed49f,[Ljava.lang.String;@66de00f2),Annotation([Ljava.lang.String;@6c479fdf,[Ljava.lang.String;@79d82f66,[Ledu.cmu.lti.nlp.amr.Dependency;@19b206ee),Annotation([Ljava.lang.String;@ffd4cba,[Ljava.lang.String;@5f1483fd,[Ljava.lang.String;@670f2466),Annotation([Ljava.lang.String;@6e03db1f,[Ljava.lang.String;@bfec2f9,[Ledu.cmu.lti.nlp.amr.Entity;@708eb310))
AMR:
(a / and, op, t / technology)

Decoded in 4,970 microseconds
Sentence: Hong Kong universities collaborate with universities, businesses and government sectors of mainland China to coordinate training programs and research centers to promote high-tech research, commercialization, and technology transfer.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 7-8:  businesses => business
Span 20-21:  centers => center
Span 3-4:  collaborate => collaborate-01
Span 15-16:  coordinate => coordinate-01
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 12-13:  mainland => mainland
Span 17-18:  programs => program
Span 22-23:  promote => promote-02
Span 26-27:  research => research-01
Span 19-20:  research => research-01
Span 10-11:  sectors => sector
Span 25-26:  tech => tech
Span 31-32:  technology => technology
Span 16-17:  training => train-01
Span 32-33:  transfer => transfer-01
Span 5-6:  universities => university
Span 2-3:  universities => university

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 18-19:  and => and
Oracle Span 30-31:  and => and
Oracle Span 7-8:  businesses => business
Oracle Span 20-21:  centers => center
Oracle Span 13-14:  China => (country :name (name :op "China"))
Oracle Span 3-4:  collaborate => collaborate-01
Oracle Span 28-29:  commercialization => commercialize-01
Oracle Span 15-16:  coordinate => coordinate-01
Oracle Span 9-10:  government => (government-organization :ARG0-of govern-01)
Oracle Span 23-24:  high => high-tech
Oracle Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 12-13:  mainland => mainland
Oracle Span 17-18:  programs => program
Oracle Span 22-23:  promote => promote-02
Oracle Span 19-20:  research => research-01
Oracle Span 26-27:  research => research-01
Oracle Span 10-11:  sectors => sector
Oracle Span 31-32:  technology => technology
Oracle Span 16-17:  training => train-01
Oracle Span 32-33:  transfer => transfer-01
Oracle Span 2-3:  universities => university
Oracle Span 5-6:  universities => university

Extra span: tech => tech
Missing span: China => (country :name (name :op "China"))
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: commercialization => commercialize-01
Missing span: high => high-tech
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Hong	_	NNP	NNP	_	3	nn	_	_
2	Kong	_	NNP	NNP	_	3	nn	_	_
3	universities	_	NNS	NNS	_	4	nsubj	_	_
4	collaborate	_	VBD	VBD	_	0	root	_	_
5	with	_	IN	IN	_	4	prep	_	_
6	universities	_	NNS	NNS	_	8	nn	_	_
7	,	_	,	,	_	8	punct	_	_
8	businesses	_	NNS	NNS	_	5	pobj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	government	_	NN	NN	_	11	nn	_	_
11	sectors	_	NNS	NNS	_	8	conj	_	_
12	of	_	IN	IN	_	4	prep	_	_
13	mainland	_	JJ	JJ	_	14	amod	_	_
14	China	_	NNP	NNP	_	12	pobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	coordinate	_	VB	VB	_	4	xcomp	_	_
17	training	_	NN	NN	_	18	nn	_	_
18	programs	_	NNS	NNS	_	16	dobj	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	research	_	NN	NN	_	21	nn	_	_
21	centers	_	NNS	NNS	_	18	conj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	promote	_	VB	VB	_	16	vmod	_	_
24	high-tech	_	JJ	JJ	_	25	amod	_	_
25	research	_	NN	NN	_	23	dobj	_	_
26	,	_	,	,	_	25	punct	_	_
27	commercialization	_	NN	NN	_	25	conj	_	_
28	,	_	,	,	_	25	punct	_	_
29	and	_	CC	CC	_	25	cc	_	_
30	technology	_	NN	NN	_	31	nn	_	_
31	transfer	_	NN	NN	_	25	conj	_	_
32	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, b / business)
(a / and, op, s / sector)
(a / and, op, u2 / university)
(a2 / and, op, c5 / center)
(a2 / and, op, p / program)
(a3 / and, op, c6 / commercialize-01)
(a3 / and, op, t2 / transfer-01)
(b / business, mod, c3 / country)
(c / collaborate-01, ARG0, u / university)
(c / collaborate-01, ARG1, a / and)
(c / collaborate-01, ARG2, c4 / coordinate-01)
(c2 / city, name, n / name)
(c3 / country, mod, m / mainland)
(c3 / country, name, n2 / name)
(c4 / coordinate-01, ARG1, a2 / and)
(c4 / coordinate-01, purpose, p2 / promote-02)
(c5 / center, mod, r / research-01)
(c6 / commercialize-01, ARG1, r2 / research-01)
(g2 / govern-01, ARG0, g / government-organization)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "China")
(p / program, mod, t / train-01)
(p2 / promote-02, ARG0, a2 / and)
(p2 / promote-02, ARG1, a3 / and)
(r2 / research-01, mod, h / high-tech)
(s / sector, mod, c3 / country)
(s / sector, mod, g / government-organization)
(t2 / transfer-01, ARG1, t3 / technology)
(u / university, mod, c2 / city)
(u2 / university, mod, c3 / country)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),transfer,transfer-01,false), Span(31,32,List(1),technology,technology,false), Span(26,27,List(2),research,research-01,false), Span(25,26,List(3),tech,tech,false), Span(22,23,List(4),promote,promote-02,false), Span(20,21,List(5),centers,center,false), Span(19,20,List(6),research,research-01,false), Span(17,18,List(7),programs,program,false), Span(16,17,List(8),training,train-01,false), Span(15,16,List(9),coordinate,coordinate-01,false), Span(12,13,List(10),mainland,mainland,false), Span(10,11,List(11),sectors,sector,false), Span(7,8,List(12),businesses,business,false), Span(5,6,List(13),universities,university,false), Span(3,4,List(14),collaborate,collaborate-01,false), Span(2,3,List(15),universities,university,false), Span(0,2,List(19, 18, 17, 16),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> research-01, 5 -> center, 12 -> business, 15 -> university, 8 -> train-01, 18 -> "Kong", 7 -> program, 17 -> name, 1 -> technology, 4 -> promote-02, 11 -> sector, 14 -> collaborate-01, 6 -> research-01, 0 -> transfer-01, 9 -> coordinate-01, 16 -> city, 19 -> "Hong", 3 -> tech, 10 -> mainland, 13 -> university),Map(n -> name, t4 -> train-01, t -> transfer-01, b -> business, p2 -> program, c4 -> city, u2 -> university, s -> sector, m -> mainland, t3 -> tech, p -> promote-02, r2 -> research-01, c3 -> collaborate-01, t2 -> technology, r -> research-01, c -> center, u -> university, c2 -> coordinate-01))),[Ljava.lang.String;@6ebc9573,Annotation([Ljava.lang.String;@1e977098,[Ljava.lang.String;@630390b9,[Ljava.lang.String;@6690b9fa),Annotation([Ljava.lang.String;@6c8dbf56,[Ljava.lang.String;@493b01ef,[Ledu.cmu.lti.nlp.amr.Dependency;@36c2d629),Annotation([Ljava.lang.String;@55fee662,[Ljava.lang.String;@54089484,[Ljava.lang.String;@45adc393),Annotation([Ljava.lang.String;@65fe2691,[Ljava.lang.String;@479111ba,[Ledu.cmu.lti.nlp.amr.Entity;@57ad1178))
AMR:
(c / center, mod, r2 / research-01)
(c / center, purpose, p / promote-02)
(c2 / coordinate-01, ARG0, s / sector)
(c2 / coordinate-01, ARG1, p2 / program)
(c2 / coordinate-01, purpose, p / promote-02)
(c3 / collaborate-01, ARG1, u2 / university)
(c3 / collaborate-01, ARG2, c2 / coordinate-01)
(c4 / city, name, n / name)
(n / name, op, "Hong")
(n / name, op, "Kong")
(p / promote-02, ARG0, m / mainland)
(p / promote-02, ARG1, r / research-01)
(p2 / program, purpose, t4 / train-01)
(r / research-01, ARG1, u / university)
(s / sector, mod, b / business)
(t / transfer-01, ARG0, p2 / program)
(t / transfer-01, ARG1, t2 / technology)
(t / transfer-01, medium, t3 / tech)
(u2 / university, location, c4 / city)

Decoded in 496,914 microseconds
Sentence: In 2004 Hong Kong tertiary institutes actively contributed to improved relations between Hong Kong and mainland China in the research and development of high technology.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 1-2:  2004 => (date-entity :year 2004)
Span 6-7:  actively => active
Span 7-8:  contributed => contribute-01
Span 21-22:  development => develop-02
Span 12-14:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 2-4:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 9-10:  improved => improve-01
Span 15-16:  mainland => mainland
Span 19-20:  research => research-01
Span 24-25:  technology => technology

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 1-2:  2004 => (date-entity :year 2004)
Oracle Span 6-7:  actively => active
Oracle Span 14-15:  and => and
Oracle Span 11-12:  between => between
Oracle Span 16-17:  China => (country :name (name :op "China"))
Oracle Span 7-8:  contributed => contribute-01
Oracle Span 21-22:  development => develop-02
Oracle Span 23-24:  high => high
Oracle Span 2-4:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 9-10:  improved => improve-01
Oracle Span 5-6:  institutes => institute
Oracle Span 15-16:  mainland => mainland
Oracle Span 10-11:  relations => relation
Oracle Span 19-20:  research => research-01
Oracle Span 24-25:  technology => technology
Oracle Span 4-5:  tertiary => tertiary

Extra span: Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Missing span: China => (country :name (name :op "China"))
Missing span: relations => relation
Missing span: and => and
Missing span: high => high
Missing span: between => between
Missing span: institutes => institute
Missing span: tertiary => tertiary
Dependencies:
1	In	_	IN	IN	_	8	prep	_	_
2	2004	_	CD	CD	_	1	pobj	_	_
3	Hong	_	NNP	NNP	_	6	nn	_	_
4	Kong	_	NNP	NNP	_	6	nn	_	_
5	tertiary	_	NN	NN	_	6	nn	_	_
6	institutes	_	NNS	NNS	_	8	nsubj	_	_
7	actively	_	RB	RB	_	8	advmod	_	_
8	contributed	_	VBD	VBD	_	0	root	_	_
9	to	_	TO	TO	_	8	prep	_	_
10	improved	_	JJ	JJ	_	11	amod	_	_
11	relations	_	NNS	NNS	_	9	pobj	_	_
12	between	_	IN	IN	_	11	prep	_	_
13	Hong	_	NNP	NNP	_	14	nn	_	_
14	Kong	_	NNP	NNP	_	12	pobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	mainland	_	NNP	NNP	_	17	nn	_	_
17	China	_	NNP	NNP	_	14	conj	_	_
18	in	_	IN	IN	_	8	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	research	_	NN	NN	_	18	pobj	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	development	_	NN	NN	_	20	conj	_	_
23	of	_	IN	IN	_	20	prep	_	_
24	high	_	JJ	JJ	_	25	amod	_	_
25	technology	_	NN	NN	_	23	pobj	_	_
26	.	_	.	.	_	8	punct	_	_

Oracle:
(a2 / and, op, d2 / develop-02)
(a2 / and, op, r2 / research-01)
(b / between, op, c2 / city)
(b / between, op, c3 / country)
(c / contribute-01, ARG0, i / institute)
(c / contribute-01, ARG2, i2 / improve-01)
(c / contribute-01, manner, a / active)
(c / contribute-01, time, d / date-entity)
(c2 / city, name, n / name)
(c3 / country, mod, m / mainland)
(c3 / country, name, n2 / name)
(d / date-entity, year, 2004)
(d2 / develop-02, ARG1, t2 / technology)
(i / institute, mod, c2 / city)
(i / institute, mod, t / tertiary)
(i2 / improve-01, ARG1, r / relation)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "China")
(r / relation, mod, b / between)
(r / relation, topic, a2 / and)
(r2 / research-01, ARG1, t2 / technology)
(t2 / technology, mod, h / high)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),technology,technology,false), Span(21,22,List(1),development,develop-02,false), Span(19,20,List(2),research,research-01,false), Span(15,16,List(3),mainland,mainland,false), Span(12,14,List(7, 6, 5, 4),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(9,10,List(8),improved,improve-01,false), Span(7,8,List(9),contributed,contribute-01,false), Span(6,7,List(10),actively,active,false), Span(2,4,List(14, 13, 12, 11),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(1,2,List(16, 15),2004,(date-entity :year 2004),false)),Map(2 -> research-01, 5 -> name, 12 -> name, 15 -> date-entity, 8 -> improve-01, 7 -> "Hong", 1 -> develop-02, 4 -> city, 11 -> city, 14 -> "Hong", 6 -> "Kong", 0 -> technology, 9 -> contribute-01, 16 -> 2004, 3 -> mainland, 10 -> active, 13 -> "Kong"),Map(n -> name, 2 -> 2004, t -> technology, d -> develop-02, m -> mainland, a -> active, c3 -> city, d2 -> date-entity, r -> research-01, i -> improve-01, c -> city, c2 -> contribute-01, n2 -> name))),[Ljava.lang.String;@7c37f145,Annotation([Ljava.lang.String;@68699afc,[Ljava.lang.String;@273a5a8a,[Ljava.lang.String;@1823b9c4),Annotation([Ljava.lang.String;@5b5dce5c,[Ljava.lang.String;@7f4701b1,[Ledu.cmu.lti.nlp.amr.Dependency;@adcfad9),Annotation([Ljava.lang.String;@fb49fdf,[Ljava.lang.String;@3a2e9f5b,[Ljava.lang.String;@7da34b26),Annotation([Ljava.lang.String;@10c47c79,[Ljava.lang.String;@3b2553d9,[Ledu.cmu.lti.nlp.amr.Entity;@753fd7a1))
AMR:
(c / city, name, n / name)
(c2 / contribute-01, ARG0, m / mainland)
(c2 / contribute-01, ARG1, i / improve-01)
(c2 / contribute-01, ARG2, r / research-01)
(c2 / contribute-01, location, c / city)
(c2 / contribute-01, manner, a / active)
(c2 / contribute-01, time, d2 / date-entity)
(c3 / city, name, n2 / name)
(d / develop-02, ARG1, t / technology)
(d2 / date-entity, year, 2 / 2004)
(i / improve-01, ARG1, c3 / city)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(r / research-01, ARG1, t / technology)

Decoded in 283,779 microseconds
Sentence: Hong Kong universities have collaborated with tertiary education, business and government sectors of mainland China to direct training programs and research centers to promote research commercialization and technology transfer.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 9-10:  business => business
Span 22-23:  centers => center
Span 17-18:  direct => direct
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 14-15:  mainland => mainland
Span 19-20:  programs => program
Span 24-25:  promote => promote-02
Span 25-26:  research => research-01
Span 21-22:  research => research-01
Span 12-13:  sectors => sector
Span 28-29:  technology => technology
Span 18-19:  training => train-01
Span 29-30:  transfer => transfer-01
Span 2-3:  universities => university

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 10-11:  and => and
Oracle Span 20-21:  and => and
Oracle Span 27-28:  and => and
Oracle Span 9-10:  business => business
Oracle Span 22-23:  centers => center
Oracle Span 15-16:  China => (country :name (name :op "China"))
Oracle Span 4-5:  collaborated => collaborate-01
Oracle Span 26-27:  commercialization => commercialize-01
Oracle Span 17-18:  direct => direct-01
Oracle Span 7-8:  education => education
Oracle Span 11-12:  government => (government-organization :ARG0-of govern-01)
Oracle Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 14-15:  mainland => mainland
Oracle Span 19-20:  programs => program
Oracle Span 24-25:  promote => promote-02
Oracle Span 21-22:  research => research-01
Oracle Span 25-26:  research => research-01
Oracle Span 12-13:  sectors => sector
Oracle Span 28-29:  technology => technology
Oracle Span 6-7:  tertiary => tertiary
Oracle Span 18-19:  training => train-01
Oracle Span 29-30:  transfer => transfer-01
Oracle Span 2-3:  universities => university

Incorrect span: direct => direct
Missing span: China => (country :name (name :op "China"))
Missing span: collaborated => collaborate-01
Missing span: direct => direct-01
Missing span: and => and
Missing span: and => and
Missing span: and => and
Missing span: education => education
Missing span: tertiary => tertiary
Missing span: commercialization => commercialize-01
Missing span: government => (government-organization :ARG0-of govern-01)
Dependencies:
1	Hong	_	NNP	NNP	_	3	nn	_	_
2	Kong	_	NNP	NNP	_	3	nn	_	_
3	universities	_	NNS	NNS	_	5	nsubj	_	_
4	have	_	VBP	VBP	_	5	aux	_	_
5	collaborated	_	VBD	VBD	_	0	root	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	tertiary	_	JJ	JJ	_	13	amod	_	_
8	education	_	NN	NN	_	13	nn	_	_
9	,	_	,	,	_	8	punct	_	_
10	business	_	NN	NN	_	8	conj	_	_
11	and	_	CC	CC	_	8	cc	_	_
12	government	_	NN	NN	_	8	conj	_	_
13	sectors	_	NNS	NNS	_	6	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	mainland	_	JJ	JJ	_	16	amod	_	_
16	China	_	NNP	NNP	_	14	pobj	_	_
17	to	_	TO	TO	_	5	prep	_	_
18	direct	_	JJ	JJ	_	20	amod	_	_
19	training	_	NN	NN	_	20	nn	_	_
20	programs	_	NNS	NNS	_	17	pobj	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	research	_	NN	NN	_	23	nn	_	_
23	centers	_	NNS	NNS	_	20	conj	_	_
24	to	_	TO	TO	_	25	aux	_	_
25	promote	_	VB	VB	_	5	xcomp	_	_
26	research	_	NN	NN	_	27	nn	_	_
27	commercialization	_	NN	NN	_	25	dobj	_	_
28	and	_	CC	CC	_	27	cc	_	_
29	technology	_	NN	NN	_	30	nn	_	_
30	transfer	_	NN	NN	_	27	conj	_	_
31	.	_	.	.	_	5	punct	_	_

Oracle:
(a2 / and, op, c3 / center)
(a2 / and, op, p / program)
(a3 / and, op, c4 / commercialize-01)
(a3 / and, op, t3 / transfer-01)
(a4 / and, mod, c2 / country)
(a4 / and, op, s3 / sector)
(c / collaborate-01, ARG0, u / university)
(c / collaborate-01, ARG1, a4 / and)
(c / collaborate-01, ARG2, d / direct-01)
(c2 / country, mod, m / mainland)
(c2 / country, name, n / name)
(c3 / center, mod, r / research-01)
(c4 / commercialize-01, ARG1, r2 / research-01)
(c5 / city, name, n2 / name)
(d / direct-01, ARG1, a2 / and)
(d / direct-01, ARG2, p2 / promote-02)
(e / education, mod, t / tertiary)
(g2 / govern-01, ARG0, g / government-organization)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p / program, mod, t2 / train-01)
(p2 / promote-02, ARG0, a2 / and)
(p2 / promote-02, ARG1, a3 / and)
(s3 / sector, mod, g / government-organization)
(t3 / transfer-01, ARG1, t4 / technology)
(u / university, mod, c5 / city)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),transfer,transfer-01,false), Span(28,29,List(1),technology,technology,false), Span(25,26,List(2),research,research-01,false), Span(24,25,List(3),promote,promote-02,false), Span(22,23,List(4),centers,center,false), Span(21,22,List(5),research,research-01,false), Span(19,20,List(6),programs,program,false), Span(18,19,List(7),training,train-01,false), Span(17,18,List(8),direct,direct,false), Span(14,15,List(9),mainland,mainland,false), Span(12,13,List(10),sectors,sector,false), Span(9,10,List(11),business,business,false), Span(2,3,List(12),universities,university,false), Span(0,2,List(16, 15, 14, 13),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> research-01, 5 -> research-01, 12 -> university, 15 -> "Kong", 8 -> direct, 7 -> train-01, 1 -> technology, 4 -> center, 11 -> business, 14 -> name, 6 -> program, 0 -> transfer-01, 9 -> mainland, 16 -> "Hong", 3 -> promote-02, 10 -> sector, 13 -> city),Map(n -> name, t -> transfer-01, b -> business, p2 -> program, s -> sector, d -> direct, m -> mainland, t3 -> train-01, p -> promote-02, r2 -> research-01, t2 -> technology, r -> research-01, c -> center, u -> university, c2 -> city))),[Ljava.lang.String;@12a2585b,Annotation([Ljava.lang.String;@21b6c9c2,[Ljava.lang.String;@309cedb6,[Ljava.lang.String;@3b95a6db),Annotation([Ljava.lang.String;@3bf54172,[Ljava.lang.String;@2c9a6717,[Ledu.cmu.lti.nlp.amr.Dependency;@7b3cde6f),Annotation([Ljava.lang.String;@6d091cad,[Ljava.lang.String;@7c663eaf,[Ljava.lang.String;@3bb5ceb),Annotation([Ljava.lang.String;@1e692555,[Ljava.lang.String;@3ba0ae41,[Ledu.cmu.lti.nlp.amr.Entity;@76fe6cdc))
AMR:
(c / center, mod, r2 / research-01)
(c2 / city, name, n / name)
(n / name, op, "Hong")
(n / name, op, "Kong")
(p / promote-02, ARG0, u / university)
(p / promote-02, ARG1, r / research-01)
(p / promote-02, ARG2, c / center)
(p2 / program, mod, d / direct)
(p2 / program, purpose, t3 / train-01)
(r / research-01, ARG0, b / business)
(r / research-01, ARG1, m / mainland)
(s / sector, purpose, p / promote-02)
(t / transfer-01, ARG0, u / university)
(t / transfer-01, ARG1, t2 / technology)
(t3 / train-01, ARG0, u / university)
(u / university, location, c2 / city)

Decoded in 362,425 microseconds
Sentence: In June 2004 Hong Kong Polytechnic University (PolyU) joined national university science and technology park of the Virtual University Park in Shenzhen, China becoming the first tertiary institution of Hong Kong to establish research centers and training facilities in mainland China.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "Polytechnic" :op "University"))
NER Entity: (organization :name (name :op "PolyU"))
NER Entity: (organization :name (name :op "Virtual" :op "University" :op "Park"))
NER Entity: (country :name (name :op "Shenzhen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 26-27:  becoming => become-01
Span 37-38:  centers => center
Span 35-36:  establish => establish-01
Span 40-41:  facilities => facility
Span 32-34:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 3-5:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 30-31:  institution => institution
Span 10-11:  joined => join-01
Span 1-3:  June 2004 => (date-entity :month 6 :year 2004)
Span 42-43:  mainland => mainland
Span 5-7:  Polytechnic University => (organization :name (name :op "Polytechnic" :op "University"))
Span 36-37:  research => research-01
Span 13-14:  science => science
Span 15-16:  technology => technology
Span 39-40:  training => train-01
Span 12-13:  university => university
Span 19-22:  Virtual University Park => (organization :name (name :op "Virtual" :op "University" :op "Park"))

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 26-27:  becoming => become-01
Oracle Span 37-38:  centers => center
Oracle Span 25-26:  China => (country :name (name :op "China"))
Oracle Span 35-36:  establish => establish-01
Oracle Span 40-41:  facilities => facility
Oracle Span 32-34:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 3-7:  Hong Kong Polytechnic University => (university :name (name :op "University" :op "Polytechnic" :op "Kong" :op "Hong"))
Oracle Span 30-31:  institution => institute
Oracle Span 10-11:  joined => join-01
Oracle Span 1-3:  June 2004 => (date-entity :month 6 :year 2004)
Oracle Span 42-43:  mainland => mainland
Oracle Span 11-12:  national => national
Oracle Span 16-17:  park => park
Oracle Span 36-37:  research => research-01
Oracle Span 13-14:  science => science
Oracle Span 23-24:  Shenzhen => (city :name (name :op "Shenzhen"))
Oracle Span 15-16:  technology => technology
Oracle Span 29-30:  tertiary => tertiary
Oracle Span 39-40:  training => train-01
Oracle Span 12-13:  university => university
Oracle Span 19-22:  Virtual University Park => (event :name (name :op "Park" :op "University" :op "Virtual"))

Incorrect span: institution => institution
Incorrect span: Virtual University Park => (organization :name (name :op "Virtual" :op "University" :op "Park"))
Extra span: Polytechnic University => (organization :name (name :op "Polytechnic" :op "University"))
Extra span: Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Missing span: Hong Kong Polytechnic University => (university :name (name :op "University" :op "Polytechnic" :op "Kong" :op "Hong"))
Missing span: Virtual University Park => (event :name (name :op "Park" :op "University" :op "Virtual"))
Missing span: Shenzhen => (city :name (name :op "Shenzhen"))
Missing span: China => (country :name (name :op "China"))
Missing span: tertiary => tertiary
Missing span: and => and
Missing span: park => park
Missing span: national => national
Missing span: institution => institute
Dependencies:
1	In	_	IN	IN	_	11	prep	_	_
2	June	_	NNP	NNP	_	1	pobj	_	_
3	2004	_	CD	CD	_	2	num	_	_
4	Hong	_	NNP	NNP	_	7	nn	_	_
5	Kong	_	NNP	NNP	_	7	nn	_	_
6	Polytechnic	_	NNP	NNP	_	7	nn	_	_
7	University	_	NNP	NNP	_	11	nsubj	_	_
8	(	_	(	(	_	9	punct	_	_
9	PolyU	_	NNP	NNP	_	7	appos	_	_
10	)	_	)	)	_	9	punct	_	_
11	joined	_	VBD	VBD	_	0	root	_	_
12	national	_	JJ	JJ	_	14	amod	_	_
13	university	_	NN	NN	_	14	nn	_	_
14	science	_	NN	NN	_	11	dobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	technology	_	NN	NN	_	17	nn	_	_
17	park	_	NN	NN	_	14	conj	_	_
18	of	_	IN	IN	_	14	prep	_	_
19	the	_	DT	DT	_	22	det	_	_
20	Virtual	_	NNP	NNP	_	22	nn	_	_
21	University	_	NNP	NNP	_	22	nn	_	_
22	Park	_	NNP	NNP	_	18	pobj	_	_
23	in	_	IN	IN	_	11	prep	_	_
24	Shenzhen	_	NNP	NNP	_	26	nn	_	_
25	,	_	,	,	_	26	punct	_	_
26	China	_	NNP	NNP	_	23	pobj	_	_
27	becoming	_	VBG	VBG	_	26	vmod	_	_
28	the	_	DT	DT	_	31	det	_	_
29	first	_	JJ	JJ	_	31	amod	_	_
30	tertiary	_	NN	NN	_	31	nn	_	_
31	institution	_	NN	NN	_	27	xcomp	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	Hong	_	NNP	NNP	_	34	nn	_	_
34	Kong	_	NNP	NNP	_	32	pobj	_	_
35	to	_	TO	TO	_	36	aux	_	_
36	establish	_	VB	VB	_	27	vmod	_	_
37	research	_	NN	NN	_	38	nn	_	_
38	centers	_	NNS	NNS	_	36	dobj	_	_
39	and	_	CC	CC	_	38	cc	_	_
40	training	_	NN	NN	_	41	nn	_	_
41	facilities	_	NNS	NNS	_	38	conj	_	_
42	in	_	IN	IN	_	36	prep	_	_
43	mainland	_	JJ	JJ	_	44	amod	_	_
44	China	_	NNP	NNP	_	42	pobj	_	_
45	.	_	.	.	_	11	punct	_	_

Oracle:
(a2 / and, op, c4 / center)
(a2 / and, op, f / facility)
(b / become-01, ARG1, u / university)
(b / become-01, ARG2, i / institute)
(c / city, location, c2 / country)
(c / city, name, n4 / name)
(c2 / country, name, n5 / name)
(c2 / country, part, m / mainland)
(c3 / city, name, n6 / name)
(c4 / center, mod, r / research-01)
(d / date-entity, month, 6)
(d / date-entity, year, 2004)
(e / event, location, c / city)
(e / event, name, n3 / name)
(e2 / establish-01, ARG0, i / institute)
(e2 / establish-01, ARG1, a2 / and)
(e2 / establish-01, location, m / mainland)
(f / facility, mod, t3 / train-01)
(i / institute, mod, t2 / tertiary)
(i / institute, poss, c3 / city)
(j / join-01, ARG0, u / university)
(j / join-01, ARG1, p / park)
(j / join-01, mod, b / become-01)
(j / join-01, time, d / date-entity)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n / name, op, "Polytechnic")
(n / name, op, "University")
(n3 / name, op, "Park")
(n3 / name, op, "University")
(n3 / name, op, "Virtual")
(n4 / name, op, "Shenzhen")
(n5 / name, op, "China")
(n6 / name, op, "Hong")
(n6 / name, op, "Kong")
(p / park, mod, n2 / national)
(p / park, mod, s / science)
(p / park, mod, t / technology)
(p / park, mod, u2 / university)
(p / park, poss, e / event)
(u / university, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),mainland,mainland,false), Span(40,41,List(1),facilities,facility,false), Span(39,40,List(2),training,train-01,false), Span(37,38,List(3),centers,center,false), Span(36,37,List(4),research,research-01,false), Span(35,36,List(5),establish,establish-01,false), Span(32,34,List(9, 8, 7, 6),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(30,31,List(10),institution,institution,false), Span(26,27,List(11),becoming,become-01,false), Span(19,22,List(16, 15, 14, 13, 12),Virtual University Park,(organization :name (name :op "Virtual" :op "University" :op "Park")),false), Span(15,16,List(17),technology,technology,false), Span(13,14,List(18),science,science,false), Span(12,13,List(19),university,university,false), Span(10,11,List(20),joined,join-01,false), Span(5,7,List(24, 23, 22, 21),Polytechnic University,(organization :name (name :op "Polytechnic" :op "University")),false), Span(3,5,List(28, 27, 26, 25),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(1,3,List(31, 30, 29),June 2004,(date-entity :month 6 :year 2004),false)),Map(30 -> 6, 2 -> train-01, 5 -> establish-01, 27 -> "Kong", 12 -> organization, 8 -> "Kong", 15 -> "University", 21 -> organization, 18 -> science, 24 -> "University", 7 -> name, 1 -> facility, 17 -> technology, 23 -> "Polytechnic", 26 -> name, 4 -> research-01, 11 -> become-01, 14 -> "Virtual", 29 -> date-entity, 20 -> join-01, 28 -> "Hong", 6 -> city, 9 -> "Hong", 0 -> mainland, 22 -> name, 16 -> "Park", 19 -> university, 10 -> institution, 3 -> center, 31 -> 2004, 25 -> city, 13 -> name),Map(e -> establish-01, n -> name, 2 -> 2004, t -> train-01, b -> become-01, n4 -> name, j -> join-01, s -> science, d -> date-entity, m -> mainland, c3 -> city, n3 -> name, o2 -> organization, t2 -> technology, r -> research-01, i -> institution, 6 -> 6, c -> center, u -> university, f -> facility, o -> organization, c2 -> city, n2 -> name))),[Ljava.lang.String;@2ffb3aec,Annotation([Ljava.lang.String;@786ff1cb,[Ljava.lang.String;@46039a21,[Ljava.lang.String;@431e86b1),Annotation([Ljava.lang.String;@35c4e864,[Ljava.lang.String;@32a2a6be,[Ledu.cmu.lti.nlp.amr.Dependency;@682af059),Annotation([Ljava.lang.String;@5f36c8e3,[Ljava.lang.String;@4da39ca9,[Ljava.lang.String;@6a9344f5),Annotation([Ljava.lang.String;@5584d9c6,[Ljava.lang.String;@3c9c6245,[Ledu.cmu.lti.nlp.amr.Entity;@6d0be7ab))
AMR:
(b / become-01, ARG0, m / mainland)
(b / become-01, ARG1, s / science)
(b / become-01, ARG2, i / institution)
(b / become-01, purpose, e / establish-01)
(c / center, mod, r / research-01)
(c2 / city, name, n / name)
(c3 / city, name, n4 / name)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2004)
(e / establish-01, ARG0, c2 / city)
(e / establish-01, ARG1, c / center)
(f / facility, mod, t / train-01)
(i / institution, mod, o / organization)
(j / join-01, ARG0, o2 / organization)
(j / join-01, ARG1, s / science)
(j / join-01, time, d / date-entity)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Park")
(n2 / name, op, "University")
(n2 / name, op, "Virtual")
(n3 / name, op, "Polytechnic")
(n3 / name, op, "University")
(n4 / name, op, "Hong")
(n4 / name, op, "Kong")
(o / organization, name, n2 / name)
(o2 / organization, location, c3 / city)
(o2 / organization, name, n3 / name)
(r / research-01, ARG1, t2 / technology)
(s / science, mod, u / university)
(t / train-01, ARG1, r / research-01)

Decoded in 1,085,129 microseconds
Sentence: President of PolyU Poon Chung-kwong stated that both public and private sectors in Hong Kong are strengthening connections with mainland China in various areas.

NER Entity: (organization :name (name :op "PolyU"))
NER Entity: (person :name (name :op "Poon" :op "Chung" :op "-" :op "kwong"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 25-26:  areas => area
Span 9-10:  both => both
Span 19-20:  connections => connect-01
Span 15-17:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 21-22:  mainland => mainland
Span 3-5:  Poon Chung => (person :name (name :op "Poon" :op "Chung" :op "-" :op "kwong"))
Span 0-1:  President => (have-org-role-91 :ARG2 president)
Span 12-13:  private => private
Span 10-11:  public => public
Span 13-15:  sectors in => (country :name (name :op "Hong" :op "Kong"))
Span 18-19:  strengthening => strengthen-01
Span 24-25:  various => various

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 25-26:  areas => area
Oracle Span 9-10:  both => both
Oracle Span 22-23:  China => (country :name (name :op "China"))
Oracle Span 19-20:  connections => connection
Oracle Span 15-17:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 21-22:  mainland => mainland
Oracle Span 2-3:  PolyU => (university :name (name :op "PolyU"))
Oracle Span 3-7:  Poon Chung - kwong => (person :name (name :op "Chung-kwong" :op "Poon"))
Oracle Span 0-1:  President => (have-org-role-91 :ARG2 president)
Oracle Span 12-13:  private => private
Oracle Span 10-11:  public => public
Oracle Span 13-14:  sectors => sector
Oracle Span 7-8:  stated => state-01
Oracle Span 18-19:  strengthening => strengthen-01
Oracle Span 24-25:  various => various

Incorrect span: connections => connect-01
Extra span: sectors in => (country :name (name :op "Hong" :op "Kong"))
Extra span: Poon Chung => (person :name (name :op "Poon" :op "Chung" :op "-" :op "kwong"))
Missing span: Poon Chung - kwong => (person :name (name :op "Chung-kwong" :op "Poon"))
Missing span: PolyU => (university :name (name :op "PolyU"))
Missing span: China => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: connections => connection
Missing span: sectors => sector
Dependencies:
1	President	_	NNP	NNP	_	6	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	PolyU	_	NNP	NNP	_	5	nn	_	_
4	Poon	_	NNP	NNP	_	5	nn	_	_
5	Chung-kwong	_	NNP	NNP	_	2	pobj	_	_
6	stated	_	VBD	VBD	_	0	root	_	_
7	that	_	IN	IN	_	17	mark	_	_
8	both	_	DT	DT	_	9	preconj	_	_
9	public	_	JJ	JJ	_	12	amod	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	private	_	JJ	JJ	_	9	conj	_	_
12	sectors	_	NNS	NNS	_	17	nsubj	_	_
13	in	_	IN	IN	_	12	prep	_	_
14	Hong	_	NNP	NNP	_	15	nn	_	_
15	Kong	_	NNP	NNP	_	13	pobj	_	_
16	are	_	VBP	VBP	_	17	aux	_	_
17	strengthening	_	VBG	VBG	_	6	ccomp	_	_
18	connections	_	NNS	NNS	_	17	dobj	_	_
19	with	_	IN	IN	_	17	prep	_	_
20	mainland	_	NNP	NNP	_	21	nn	_	_
21	China	_	NNP	NNP	_	19	pobj	_	_
22	in	_	IN	IN	_	21	prep	_	_
23	various	_	JJ	JJ	_	24	amod	_	_
24	areas	_	NNS	NNS	_	22	pobj	_	_
25	.	_	.	.	_	6	punct	_	_

Oracle:
(a / area, mod, v / various)
(b / both, op, p3 / public)
(b / both, op, p4 / private)
(c / city, name, n3 / name)
(c2 / connection, prep-with, c3 / country)
(c2 / connection, topic, a / area)
(c3 / country, mod, m / mainland)
(c3 / country, name, n4 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, u / university)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Chung-kwong")
(n / name, op, "Poon")
(n2 / name, op, "PolyU")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(n4 / name, op, "China")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, s2 / strengthen-01)
(s2 / strengthen-01, ARG0, s3 / sector)
(s2 / strengthen-01, ARG1, c2 / connection)
(s3 / sector, mod, b / both)
(s3 / sector, mod, c / city)
(u / university, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),areas,area,false), Span(24,25,List(1),various,various,false), Span(21,22,List(2),mainland,mainland,false), Span(19,20,List(3),connections,connect-01,false), Span(18,19,List(4),strengthening,strengthen-01,false), Span(15,17,List(8, 7, 6, 5),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(13,15,List(12, 11, 10, 9),sectors in,(country :name (name :op "Hong" :op "Kong")),false), Span(12,13,List(13),private,private,false), Span(10,11,List(14),public,public,false), Span(9,10,List(15),both,both,false), Span(3,5,List(21, 20, 19, 18, 17, 16),Poon Chung,(person :name (name :op "Poon" :op "Chung" :op "-" :op "kwong")),false), Span(0,1,List(23, 22),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> mainland, 5 -> city, 12 -> "Kong", 15 -> both, 8 -> "Hong", 21 -> "kwong", 18 -> "Poon", 7 -> "Kong", 17 -> name, 1 -> various, 23 -> president, 4 -> strengthen-01, 11 -> "Hong", 14 -> public, 20 -> "-", 6 -> name, 22 -> have-org-role-91, 0 -> area, 9 -> country, 16 -> person, 19 -> "Chung", 3 -> connect-01, 10 -> name, 13 -> private),Map(n -> name, h -> have-org-role-91, b -> both, p2 -> public, s -> strengthen-01, v -> various, m -> mainland, p -> private, n3 -> name, a -> area, c3 -> country, p4 -> president, c -> connect-01, p3 -> person, c2 -> city, n2 -> name))),[Ljava.lang.String;@1d4fb213,Annotation([Ljava.lang.String;@6ef60295,[Ljava.lang.String;@3127cb44,[Ljava.lang.String;@3234474),Annotation([Ljava.lang.String;@631cb129,[Ljava.lang.String;@3d20e575,[Ledu.cmu.lti.nlp.amr.Dependency;@3252747e),Annotation([Ljava.lang.String;@2b4b96a4,[Ljava.lang.String;@2dd8ff1d,[Ljava.lang.String;@17e9bc9e),Annotation([Ljava.lang.String;@36b9cb99,[Ljava.lang.String;@4130955c,[Ledu.cmu.lti.nlp.amr.Entity;@2bfaba70))
AMR:
(a / area, quant, v / various)
(a / area, topic, h / have-org-role-91)
(c / connect-01, ARG0, b / both)
(c / connect-01, ARG1, c3 / country)
(c2 / city, name, n / name)
(c2 / city, topic, h / have-org-role-91)
(c3 / country, mod, p / private)
(c3 / country, name, n2 / name)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, p4 / president)
(m / mainland, topic, h / have-org-role-91)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "-")
(n3 / name, op, "Chung")
(n3 / name, op, "Poon")
(n3 / name, op, "kwong")
(p2 / public, mod, b / both)
(p3 / person, name, n3 / name)
(s / strengthen-01, ARG1, c / connect-01)

Decoded in 280,771 microseconds
Sentence: Poon stated that cooperation between Hong Kong and mainland China will facilitate universities to more effectively promote technology transfer and human resources development in the mainland creating positive results for both Hong Kong and China.

NER Entity: (person :name (name :op "Poon"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 30-31:  both => both
Span 3-4:  cooperation => cooperate-01
Span 26-27:  creating => create-01
Span 22-23:  development => develop-02
Span 15-16:  effectively => effective
Span 11-12:  facilitate => facilitate-01
Span 31-33:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 5-7:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 20-21:  human => human
Span 25-26:  mainland => mainland
Span 8-9:  mainland => mainland
Span 27-28:  positive => positive
Span 16-17:  promote => promote-02
Span 21-22:  resources => resource
Span 17-18:  technology => technology
Span 18-19:  transfer => transfer-01
Span 12-13:  universities => university

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 19-20:  and => and
Oracle Span 9-10:  China => (country :name (name :op "China"))
Oracle Span 3-4:  cooperation => cooperate-01
Oracle Span 26-27:  creating => create-01
Oracle Span 22-23:  development => develop-02
Oracle Span 15-16:  effectively => effective
Oracle Span 11-12:  facilitate => facilitate-01
Oracle Span 5-7:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 20-21:  human => human
Oracle Span 8-9:  mainland => mainland
Oracle Span 14-15:  more => more
Oracle Span 0-1:  Poon => (person :name (name :op "Poon"))
Oracle Span 27-28:  positive => positive
Oracle Span 16-17:  promote => promote-02
Oracle Span 21-22:  resources => resource
Oracle Span 28-29:  results => result
Oracle Span 1-2:  stated => state-01
Oracle Span 17-18:  technology => technology
Oracle Span 18-19:  transfer => transfer-01
Oracle Span 12-13:  universities => university

Extra span: Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Extra span: both => both
Extra span: mainland => mainland
Missing span: Poon => (person :name (name :op "Poon"))
Missing span: China => (country :name (name :op "China"))
Missing span: stated => state-01
Missing span: and => and
Missing span: results => result
Missing span: more => more
Missing span: and => and
Dependencies:
1	Poon	_	NNP	NNP	_	2	nsubj	_	_
2	stated	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	12	mark	_	_
4	cooperation	_	NN	NN	_	12	nsubj	_	_
5	between	_	IN	IN	_	4	prep	_	_
6	Hong	_	NNP	NNP	_	7	nn	_	_
7	Kong	_	NNP	NNP	_	5	pobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	mainland	_	NNP	NNP	_	10	nn	_	_
10	China	_	NNP	NNP	_	7	conj	_	_
11	will	_	MD	MD	_	12	aux	_	_
12	facilitate	_	VB	VB	_	2	ccomp	_	_
13	universities	_	NNS	NNS	_	12	dobj	_	_
14	to	_	TO	TO	_	17	aux	_	_
15	more	_	RBR	RBR	_	16	advmod	_	_
16	effectively	_	RB	RB	_	17	advmod	_	_
17	promote	_	VB	VB	_	12	xcomp	_	_
18	technology	_	NN	NN	_	19	nn	_	_
19	transfer	_	NN	NN	_	17	dobj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	human	_	JJ	JJ	_	23	amod	_	_
22	resources	_	NNS	NNS	_	23	nn	_	_
23	development	_	NN	NN	_	19	conj	_	_
24	in	_	IN	IN	_	19	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	mainland	_	NN	NN	_	24	pobj	_	_
27	creating	_	VBG	VBG	_	26	vmod	_	_
28	positive	_	JJ	JJ	_	29	amod	_	_
29	results	_	NNS	NNS	_	27	dobj	_	_
30	for	_	IN	IN	_	27	prep	_	_
31	both	_	DT	DT	_	33	det	_	_
32	Hong	_	NNP	NNP	_	33	nn	_	_
33	Kong	_	NNP	NNP	_	30	pobj	_	_
34	and	_	CC	CC	_	33	cc	_	_
35	China	_	NNP	NNP	_	33	conj	_	_
36	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, d / develop-02)
(a / and, op, t / transfer-01)
(a2 / and, op, c2 / city)
(a2 / and, op, c3 / country)
(c / cooperate-01, ARG0, c2 / city)
(c / cooperate-01, ARG1, c3 / country)
(c2 / city, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / create-01, ARG1, r2 / result)
(c4 / create-01, ARG3, a2 / and)
(d / develop-02, ARG1, r / resource)
(d / develop-02, location, m2 / mainland)
(e / effective, degree, m / more)
(f / facilitate-01, ARG0, c / cooperate-01)
(f / facilitate-01, ARG1, p2 / promote-02)
(n / name, op, "Poon")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "China")
(p / person, name, n / name)
(p2 / promote-02, ARG0, u / university)
(p2 / promote-02, ARG1, a / and)
(p2 / promote-02, manner, e / effective)
(p2 / promote-02, mod, c4 / create-01)
(r / resource, mod, h / human)
(r2 / result, mod, p3 / positive)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, f / facilitate-01)
(t / transfer-01, ARG1, t2 / technology)
(t / transfer-01, location, m2 / mainland)

Input(Some(Graph(null,ArrayBuffer(Span(31,33,List(3, 2, 1, 0),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(30,31,List(4),both,both,false), Span(27,28,List(5),positive,positive,false), Span(26,27,List(6),creating,create-01,false), Span(25,26,List(7),mainland,mainland,false), Span(22,23,List(8),development,develop-02,false), Span(21,22,List(9),resources,resource,false), Span(20,21,List(10),human,human,false), Span(18,19,List(11),transfer,transfer-01,false), Span(17,18,List(12),technology,technology,false), Span(16,17,List(13),promote,promote-02,false), Span(15,16,List(14),effectively,effective,false), Span(12,13,List(15),universities,university,false), Span(11,12,List(16),facilitate,facilitate-01,false), Span(8,9,List(17),mainland,mainland,false), Span(5,7,List(21, 20, 19, 18),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(3,4,List(22),cooperation,cooperate-01,false)),Map(2 -> "Kong", 5 -> positive, 12 -> technology, 15 -> university, 8 -> develop-02, 21 -> "Hong", 18 -> city, 7 -> mainland, 17 -> mainland, 1 -> name, 4 -> both, 11 -> transfer-01, 14 -> effective, 20 -> "Kong", 6 -> create-01, 22 -> cooperate-01, 0 -> city, 9 -> resource, 16 -> facilitate-01, 19 -> name, 3 -> "Hong", 10 -> human, 13 -> promote-02),Map(e -> effective, n -> name, h -> human, b -> both, t -> transfer-01, m2 -> mainland, p2 -> promote-02, c4 -> cooperate-01, m -> mainland, d -> develop-02, p -> positive, c3 -> city, t2 -> technology, r -> resource, c -> city, u -> university, f -> facilitate-01, n2 -> name, c2 -> create-01))),[Ljava.lang.String;@71adfedd,Annotation([Ljava.lang.String;@9301672,[Ljava.lang.String;@4ceff87d,[Ljava.lang.String;@3238e2aa),Annotation([Ljava.lang.String;@2c7db926,[Ljava.lang.String;@2577a95d,[Ledu.cmu.lti.nlp.amr.Dependency;@1668919e),Annotation([Ljava.lang.String;@63300c4b,[Ljava.lang.String;@22c53d82,[Ljava.lang.String;@3a6045c6),Annotation([Ljava.lang.String;@68d6d775,[Ljava.lang.String;@b67cc70,[Ledu.cmu.lti.nlp.amr.Entity;@45c9b3))
AMR:
(c / city, mod, b / both)
(c / city, name, n / name)
(c2 / create-01, ARG1, m / mainland)
(c2 / create-01, location, c / city)
(c3 / city, name, n2 / name)
(c4 / cooperate-01, ARG1, c3 / city)
(c4 / cooperate-01, ARG2, m2 / mainland)
(d / develop-02, ARG1, m / mainland)
(d / develop-02, mod, r / resource)
(f / facilitate-01, ARG0, c4 / cooperate-01)
(f / facilitate-01, ARG1, u / university)
(f / facilitate-01, ARG2, p2 / promote-02)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p2 / promote-02, ARG0, p / positive)
(p2 / promote-02, ARG1, t / transfer-01)
(p2 / promote-02, manner, e / effective)
(r / resource, mod, h / human)
(t / transfer-01, ARG1, t2 / technology)
(t / transfer-01, ARG2, r / resource)

Decoded in 1,431,679 microseconds
Sentence: City University of Hong Kong (CityU) and the University of Science and Technology of China (USTC) in Anhui province signed an agreement in June to jointly establish a high level joint research center in Suzhou.

NER Entity: (organization :name (name :op "City" :op "University" :op "of" :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "CityU"))
NER Entity: (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))
NER Entity: (organization :name (name :op "USTC"))
NER Entity: (country :name (name :op "Anhui"))
NER Entity: (country :name (name :op "Suzhou"))
Spans:
Span 25-26:  agreement => agree-01
Span 36-37:  center => center
Span 0-5:  City University of Hong Kong => (organization :name (name :op "City" :op "University" :op "of" :op "Hong" :op "Kong"))
Span 30-31:  establish => establish-01
Span 34-35:  joint => joint
Span 29-30:  jointly => joint
Span 27-28:  June => (date-entity :month 6)
Span 33-34:  level => level
Span 22-23:  province => province
Span 35-36:  research => research-01
Span 10-17:  University of Science and Technology of China => (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 25-26:  agreement => agreement
Oracle Span 21-22:  Anhui => (name :op "Anhui")
Oracle Span 36-37:  center => center
Oracle Span 0-5:  City University of Hong Kong => (university :name (name :op "Kong" :op "Hong" :op "of" :op "University" :op "City"))
Oracle Span 6-7:  CityU => city
Oracle Span 30-31:  establish => establish-01
Oracle Span 32-33:  high => high
Oracle Span 34-35:  joint => joint
Oracle Span 29-30:  jointly => joint
Oracle Span 27-28:  June => (date-entity :month 6)
Oracle Span 33-34:  level => level
Oracle Span 22-23:  province => province
Oracle Span 35-36:  research => research-01
Oracle Span 23-24:  signed => sign-02
Oracle Span 38-39:  Suzhou => (name :op "Suzhou")
Oracle Span 10-17:  University of Science and Technology of China => (university :name (name :op "China" :op "of" :op "Technology" :op "and" :op "Science" :op "of" :op "University"))

Incorrect span: agreement => agree-01
Incorrect span: University of Science and Technology of China => (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))
Incorrect span: City University of Hong Kong => (organization :name (name :op "City" :op "University" :op "of" :op "Hong" :op "Kong"))
Missing span: City University of Hong Kong => (university :name (name :op "Kong" :op "Hong" :op "of" :op "University" :op "City"))
Missing span: University of Science and Technology of China => (university :name (name :op "China" :op "of" :op "Technology" :op "and" :op "Science" :op "of" :op "University"))
Missing span: Anhui => (name :op "Anhui")
Missing span: Suzhou => (name :op "Suzhou")
Missing span: signed => sign-02
Missing span: high => high
Missing span: agreement => agreement
Missing span: CityU => city
Dependencies:
1	City	_	NNP	NNP	_	2	nn	_	_
2	University	_	NNP	NNP	_	24	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	Hong	_	NNP	NNP	_	5	nn	_	_
5	Kong	_	NNP	NNP	_	3	pobj	_	_
6	(	_	(	(	_	7	punct	_	_
7	CityU	_	NNP	NNP	_	5	appos	_	_
8	)	_	)	)	_	7	punct	_	_
9	and	_	CC	CC	_	5	cc	_	_
10	the	_	DT	DT	_	23	det	_	_
11	University	_	NNP	NNP	_	23	dep	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	Science	_	NNP	NNP	_	12	pobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	Technology	_	NNP	NNP	_	13	conj	_	_
16	of	_	IN	IN	_	13	prep	_	_
17	China	_	NNP	NNP	_	16	pobj	_	_
18	(	_	(	(	_	19	punct	_	_
19	USTC	_	NNP	NNP	_	17	appos	_	_
20	)	_	)	)	_	19	punct	_	_
21	in	_	IN	IN	_	17	prep	_	_
22	Anhui	_	NNP	NNP	_	21	pobj	_	_
23	province	_	NN	NN	_	5	conj	_	_
24	signed	_	VBD	VBD	_	0	root	_	_
25	an	_	DT	DT	_	26	det	_	_
26	agreement	_	NN	NN	_	24	dobj	_	_
27	in	_	IN	IN	_	24	prep	_	_
28	June	_	NNP	NNP	_	27	pobj	_	_
29	to	_	TO	TO	_	31	aux	_	_
30	jointly	_	RB	RB	_	31	advmod	_	_
31	establish	_	VB	VB	_	24	vmod	_	_
32	a	_	DT	DT	_	37	det	_	_
33	high	_	JJ	JJ	_	37	amod	_	_
34	level	_	NN	NN	_	37	nn	_	_
35	joint	_	JJ	JJ	_	37	amod	_	_
36	research	_	NN	NN	_	37	nn	_	_
37	center	_	NN	NN	_	31	dobj	_	_
38	in	_	IN	IN	_	37	prep	_	_
39	Suzhou	_	NNP	NNP	_	38	pobj	_	_
40	.	_	.	.	_	24	punct	_	_

Oracle:
(c / center, mod, r / research-01)
(c2 / city, name, n3 / name)
(d / date-entity, month, 6)
(e / establish-01, ARG1, c / center)
(e / establish-01, location, c2 / city)
(e / establish-01, manner, j / joint)
(l / level, mod, h / high)
(n / name, op, "City")
(n / name, op, "Hong")
(n / name, op, "Kong")
(n / name, op, "University")
(n / name, op, "of")
(n2 / name, op, "China")
(n2 / name, op, "Science")
(n2 / name, op, "Technology")
(n2 / name, op, "University")
(n2 / name, op, "and")
(n2 / name, op, "of")
(n2 / name, op, "of")
(n3 / name, op, "Suzhou")
(n4 / name, op, "Anhui")
(p / province, name, n4 / name)
(r / research-01, mod, j2 / joint)
(r / research-01, mod, l / level)
(s / sign-02, ARG0, u / university)
(s / sign-02, ARG1, a / agreement)
(s / sign-02, ARG2, u2 / university)
(s / sign-02, purpose, e / establish-01)
(s / sign-02, time, d / date-entity)
(u / university, name, n / name)
(u2 / university, location, p / province)
(u2 / university, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),center,center,false), Span(35,36,List(1),research,research-01,false), Span(34,35,List(2),joint,joint,false), Span(33,34,List(3),level,level,false), Span(30,31,List(4),establish,establish-01,false), Span(29,30,List(5),jointly,joint,false), Span(27,28,List(7, 6),June,(date-entity :month 6),false), Span(25,26,List(8),agreement,agree-01,false), Span(22,23,List(9),province,province,false), Span(10,17,List(18, 17, 16, 15, 14, 13, 12, 11, 10),University of Science and Technology of China,(organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China")),false), Span(0,5,List(25, 24, 23, 22, 21, 20, 19),City University of Hong Kong,(organization :name (name :op "City" :op "University" :op "of" :op "Hong" :op "Kong")),false)),Map(2 -> joint, 5 -> joint, 12 -> "University", 8 -> agree-01, 15 -> "and", 21 -> "City", 18 -> "China", 24 -> "Hong", 7 -> 6, 1 -> research-01, 17 -> "of", 23 -> "of", 4 -> establish-01, 11 -> name, 14 -> "Science", 20 -> name, 6 -> date-entity, 9 -> province, 0 -> center, 22 -> "University", 16 -> "Technology", 19 -> organization, 10 -> organization, 3 -> level, 25 -> "Kong", 13 -> "of"),Map(e -> establish-01, n -> name, j -> joint, j2 -> joint, d -> date-entity, p -> province, a -> agree-01, o2 -> organization, r -> research-01, c -> center, 6 -> 6, l -> level, o -> organization, n2 -> name))),[Ljava.lang.String;@38b3f208,Annotation([Ljava.lang.String;@6680f714,[Ljava.lang.String;@53b1a3f8,[Ljava.lang.String;@7d97e06c),Annotation([Ljava.lang.String;@5a936e64,[Ljava.lang.String;@3b4a1a75,[Ledu.cmu.lti.nlp.amr.Dependency;@65bad087),Annotation([Ljava.lang.String;@276cc8dc,[Ljava.lang.String;@66cd621b,[Ljava.lang.String;@d3f4505),Annotation([Ljava.lang.String;@3eb292cd,[Ljava.lang.String;@7fd987ef,[Ledu.cmu.lti.nlp.amr.Entity;@7209ffb5))
AMR:
(a / agree-01, ARG0, o2 / organization)
(a / agree-01, ARG1, e / establish-01)
(c / center, mod, j / joint)
(c / center, mod, r / research-01)
(d / date-entity, month, 6 / 6)
(e / establish-01, ARG0, d / date-entity)
(e / establish-01, ARG1, c / center)
(e / establish-01, manner, j2 / joint)
(n / name, op, "China")
(n / name, op, "Science")
(n / name, op, "Technology")
(n / name, op, "University")
(n / name, op, "and")
(n / name, op, "of")
(n / name, op, "of")
(n2 / name, op, "City")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n2 / name, op, "University")
(n2 / name, op, "of")
(o / organization, name, n / name)
(o / organization, op, e / establish-01)
(o2 / organization, name, n2 / name)
(r / research-01, ARG0, p / province)
(r / research-01, ARG1, l / level)

Decoded in 652,588 microseconds
Sentence: The University of Science and Technology of China is a university established by the Chinese Academy of Sciences (CAS).

NER Entity: (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (organization :name (name :op "Academy" :op "of" :op "Sciences"))
Spans:
Span 15-18:  Academy of Sciences => (organization :name (name :op "Academy" :op "of" :op "Sciences"))
Span 11-12:  established => establish-01
Span 10-11:  university => university
Span 1-8:  University of Science and Technology of China => (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 14-18:  Chinese Academy of Sciences => (organization :name (name :op "Sciences" :op "of" :op "Academy" :op "Chinese"))
Oracle Span 11-12:  established => establish-01
Oracle Span 10-11:  university => university
Oracle Span 1-8:  University of Science and Technology of China => (university :name (name :op "China" :op "of" :op "Technology" :op "and" :op "Science" :op "of" :op "University"))

Extra span: Academy of Sciences => (organization :name (name :op "Academy" :op "of" :op "Sciences"))
Incorrect span: University of Science and Technology of China => (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))
Missing span: Chinese Academy of Sciences => (organization :name (name :op "Sciences" :op "of" :op "Academy" :op "Chinese"))
Missing span: University of Science and Technology of China => (university :name (name :op "China" :op "of" :op "Technology" :op "and" :op "Science" :op "of" :op "University"))
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	University	_	NNP	NNP	_	11	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	Science	_	NNP	NNP	_	3	pobj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	Technology	_	NNP	NNP	_	4	conj	_	_
7	of	_	IN	IN	_	2	prep	_	_
8	China	_	NNP	NNP	_	7	pobj	_	_
9	is	_	VBZ	VBZ	_	11	cop	_	_
10	a	_	DT	DT	_	11	det	_	_
11	university	_	NN	NN	_	0	root	_	_
12	established	_	VBN	VBN	_	11	vmod	_	_
13	by	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	Chinese	_	JJ	JJ	_	16	amod	_	_
16	Academy	_	NN	NN	_	13	pobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	Sciences	_	NNPS	NNPS	_	17	pobj	_	_
19	(	_	(	(	_	20	punct	_	_
20	CAS	_	NNP	NNP	_	18	appos	_	_
21	)	_	)	)	_	20	punct	_	_
22	.	_	.	.	_	11	punct	_	_

Oracle:
(e / establish-01, ARG0, o / organization)
(e / establish-01, ARG1, u / university)
(n / name, op, "China")
(n / name, op, "Science")
(n / name, op, "Technology")
(n / name, op, "University")
(n / name, op, "and")
(n / name, op, "of")
(n / name, op, "of")
(n2 / name, op, "Academy")
(n2 / name, op, "Chinese")
(n2 / name, op, "Sciences")
(n2 / name, op, "of")
(o / organization, name, n2 / name)
(u / university, domain, u2 / university)
(u2 / university, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(15,18,List(4, 3, 2, 1, 0),Academy of Sciences,(organization :name (name :op "Academy" :op "of" :op "Sciences")),false), Span(11,12,List(5),established,establish-01,false), Span(10,11,List(6),university,university,false), Span(1,8,List(15, 14, 13, 12, 11, 10, 9, 8, 7),University of Science and Technology of China,(organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China")),false)),Map(2 -> "Academy", 5 -> establish-01, 12 -> "and", 15 -> "China", 8 -> name, 7 -> organization, 1 -> name, 4 -> "Sciences", 11 -> "Science", 14 -> "of", 6 -> university, 0 -> organization, 9 -> "University", 3 -> "of", 10 -> "of", 13 -> "Technology"),Map(e -> establish-01, n -> name, o2 -> organization, u -> university, o -> organization, n2 -> name))),[Ljava.lang.String;@5e99b9c,Annotation([Ljava.lang.String;@2fe74516,[Ljava.lang.String;@1c3259fa,[Ljava.lang.String;@217bf99e),Annotation([Ljava.lang.String;@6807a356,[Ljava.lang.String;@7ddd84b5,[Ledu.cmu.lti.nlp.amr.Dependency;@73aeef7d),Annotation([Ljava.lang.String;@d675f9f,[Ljava.lang.String;@58af5076,[Ljava.lang.String;@49469ffa),Annotation([Ljava.lang.String;@4d9754a8,[Ljava.lang.String;@7a3b7122,[Ledu.cmu.lti.nlp.amr.Entity;@58b5a2f3))
AMR:
(e / establish-01, ARG0, o / organization)
(e / establish-01, ARG1, u / university)
(n / name, op, "Academy")
(n / name, op, "Sciences")
(n / name, op, "of")
(n2 / name, op, "China")
(n2 / name, op, "Science")
(n2 / name, op, "Technology")
(n2 / name, op, "University")
(n2 / name, op, "and")
(n2 / name, op, "of")
(n2 / name, op, "of")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(u / university, domain, o2 / organization)

Decoded in 95,574 microseconds
Sentence: The agreement is based on the principle of mutually beneficial collaboration in which both universities complement each other's strengths in working together on joint research projects, supervision and teaching of research students and in administering professional training opportunities.

Spans:
Span 1-2:  agreement => agree-01
Span 9-10:  beneficial => benefit-01
Span 13-14:  both => both
Span 10-11:  collaboration => collaborate-01
Span 16-17:  each => each
Span 24-25:  joint => joint
Span 8-9:  mutually => mutual
Span 39-40:  opportunities => opportunity
Span 17-18:  other => other
Span 6-7:  principle => principle
Span 37-38:  professional => professional
Span 26-27:  projects => project
Span 32-33:  research => research-01
Span 25-26:  research => research-01
Span 33-34:  students => (person :ARG0-of study-01)
Span 30-31:  teaching => teach-01
Span 22-23:  together => together
Span 38-39:  training => train-01
Span 14-15:  universities => university

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 36-37:  administering => administer-01
Oracle Span 1-2:  agreement => agreement
Oracle Span 29-30:  and => and
Oracle Span 3-4:  based => base-02
Oracle Span 9-10:  beneficial => benefit-01
Oracle Span 13-14:  both => both
Oracle Span 10-11:  collaboration => collaborate-01
Oracle Span 15-16:  complement => complement-01
Oracle Span 16-17:  each => each
Oracle Span 24-25:  joint => joint
Oracle Span 8-9:  mutually => mutual
Oracle Span 39-40:  opportunities => opportunity
Oracle Span 17-18:  other => other
Oracle Span 6-7:  principle => principle
Oracle Span 37-38:  professional => professional
Oracle Span 26-27:  projects => project
Oracle Span 25-26:  research => research-01
Oracle Span 32-33:  research => research-01
Oracle Span 19-20:  strengths => strength
Oracle Span 33-34:  students => (person :ARG0-of study-01)
Oracle Span 28-29:  supervision => supervise-01
Oracle Span 30-31:  teaching => teach-01
Oracle Span 22-23:  together => together
Oracle Span 38-39:  training => train-01
Oracle Span 14-15:  universities => university
Oracle Span 21-22:  working => work-01

Incorrect span: agreement => agree-01
Missing span: based => base-02
Missing span: complement => complement-01
Missing span: working => work-01
Missing span: and => and
Missing span: administering => administer-01
Missing span: strengths => strength
Missing span: agreement => agreement
Missing span: supervision => supervise-01
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	agreement	_	NN	NN	_	4	nsubjpass	_	_
3	is	_	VBZ	VBZ	_	4	auxpass	_	_
4	based	_	VBN	VBN	_	0	root	_	_
5	on	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	principle	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	mutually	_	RB	RB	_	10	advmod	_	_
10	beneficial	_	JJ	JJ	_	11	amod	_	_
11	collaboration	_	NN	NN	_	8	pobj	_	_
12	in	_	IN	IN	_	16	prep	_	_
13	which	_	WDT	WDT	_	12	pobj	_	_
14	both	_	DT	DT	_	15	det	_	_
15	universities	_	NNS	NNS	_	16	nsubj	_	_
16	complement	_	VB	VB	_	7	rcmod	_	_
17	each	_	DT	DT	_	18	det	_	_
18	other	_	JJ	JJ	_	20	poss	_	_
19	's	_	POS	POS	_	18	possessive	_	_
20	strengths	_	NNS	NNS	_	16	dobj	_	_
21	in	_	IN	IN	_	16	prep	_	_
22	working	_	VBG	VBG	_	21	pcomp	_	_
23	together	_	RB	RB	_	22	advmod	_	_
24	on	_	IN	IN	_	22	prep	_	_
25	joint	_	JJ	JJ	_	27	amod	_	_
26	research	_	NN	NN	_	27	nn	_	_
27	projects	_	NNS	NNS	_	24	pobj	_	_
28	,	_	,	,	_	27	punct	_	_
29	supervision	_	NN	NN	_	27	appos	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	teaching	_	NN	NN	_	29	conj	_	_
32	of	_	IN	IN	_	29	prep	_	_
33	research	_	NN	NN	_	34	nn	_	_
34	students	_	NNS	NNS	_	32	pobj	_	_
35	and	_	CC	CC	_	5	cc	_	_
36	in	_	IN	IN	_	5	conj	_	_
37	administering	_	VBG	VBG	_	36	pcomp	_	_
38	professional	_	JJ	JJ	_	40	amod	_	_
39	training	_	NN	NN	_	40	nn	_	_
40	opportunities	_	NNS	NNS	_	37	dobj	_	_
41	.	_	.	.	_	4	punct	_	_

Oracle:
(a2 / and, op, a3 / administer-01)
(a2 / and, op, p2 / project)
(a2 / and, op, s2 / supervise-01)
(a2 / and, op, t2 / teach-01)
(a3 / administer-01, ARG1, o2 / opportunity)
(b / base-02, ARG1, a / agreement)
(b / base-02, ARG2, p / principle)
(b2 / benefit-01, mod, m / mutual)
(c / collaborate-01, mod, b2 / benefit-01)
(c2 / complement-01, ARG1, u / university)
(c2 / complement-01, ARG2, s / strength)
(c2 / complement-01, instrument, c / collaborate-01)
(c2 / complement-01, purpose, w / work-01)
(o2 / opportunity, mod, t3 / train-01)
(p / principle, mod, c / collaborate-01)
(p2 / project, mod, r / research-01)
(p4 / person, mod, r2 / research-01)
(r / research-01, mod, j / joint)
(s / strength, poss, o / other)
(s2 / supervise-01, ARG1, p4 / person)
(s3 / study-01, ARG0, p4 / person)
(t2 / teach-01, ARG2, p4 / person)
(t3 / train-01, mod, p3 / professional)
(u / university, mod, b3 / both)
(u / university, mod, e / each)
(w / work-01, ARG1, a2 / and)
(w / work-01, mod, t / together)

Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),opportunities,opportunity,false), Span(38,39,List(1),training,train-01,false), Span(37,38,List(2),professional,professional,false), Span(33,34,List(4, 3),students,(person :ARG0-of study-01),false), Span(32,33,List(5),research,research-01,false), Span(30,31,List(6),teaching,teach-01,false), Span(26,27,List(7),projects,project,false), Span(25,26,List(8),research,research-01,false), Span(24,25,List(9),joint,joint,false), Span(22,23,List(10),together,together,false), Span(17,18,List(11),other,other,false), Span(16,17,List(12),each,each,false), Span(14,15,List(13),universities,university,false), Span(13,14,List(14),both,both,false), Span(10,11,List(15),collaboration,collaborate-01,false), Span(9,10,List(16),beneficial,benefit-01,false), Span(8,9,List(17),mutually,mutual,false), Span(6,7,List(18),principle,principle,false), Span(1,2,List(19),agreement,agree-01,false)),Map(2 -> professional, 5 -> research-01, 12 -> each, 15 -> collaborate-01, 8 -> research-01, 18 -> principle, 7 -> project, 17 -> mutual, 1 -> train-01, 4 -> study-01, 11 -> other, 14 -> both, 6 -> teach-01, 0 -> opportunity, 9 -> joint, 16 -> benefit-01, 19 -> agree-01, 3 -> person, 10 -> together, 13 -> university),Map(e -> each, b -> both, t -> train-01, b2 -> benefit-01, p2 -> person, j -> joint, s -> study-01, m -> mutual, t3 -> together, p -> professional, r2 -> research-01, a -> agree-01, p4 -> principle, o2 -> other, t2 -> teach-01, r -> research-01, c -> collaborate-01, u -> university, o -> opportunity, p3 -> project))),[Ljava.lang.String;@25f15f50,Annotation([Ljava.lang.String;@52b46d52,[Ljava.lang.String;@7327a447,[Ljava.lang.String;@67022ea),Annotation([Ljava.lang.String;@2954f6ab,[Ljava.lang.String;@58fbd02e,[Ledu.cmu.lti.nlp.amr.Dependency;@163042ea),Annotation([Ljava.lang.String;@11d045b4,[Ljava.lang.String;@1fbf088b,[Ljava.lang.String;@1943c1f2),Annotation([Ljava.lang.String;@d70f722,[Ljava.lang.String;@1e1eeedd,[Ledu.cmu.lti.nlp.amr.Entity;@798256c5))
AMR:
(a / agree-01, ARG1, b2 / benefit-01)
(b2 / benefit-01, ARG0, p4 / principle)
(b2 / benefit-01, ARG2, c / collaborate-01)
(b2 / benefit-01, mod, m / mutual)
(c / collaborate-01, ARG0, p2 / person)
(c / collaborate-01, ARG1, b / both)
(p2 / person, mod, p / professional)
(p3 / project, mod, j / joint)
(p3 / project, topic, r2 / research-01)
(r / research-01, ARG1, e / each)
(r2 / research-01, ARG0, t3 / together)
(r2 / research-01, ARG1, o2 / other)
(s / study-01, ARG0, p2 / person)
(s / study-01, ARG1, r / research-01)
(t / train-01, ARG0, p2 / person)
(t / train-01, ARG1, o / opportunity)
(t2 / teach-01, ARG0, p3 / project)
(t2 / teach-01, ARG1, p2 / person)
(u / university, mod, b / both)

Decoded in 734,865 microseconds
Sentence: In addition to partnering with education institutes Hong Kong universities have also joined large-scale high technology exchange programs in mainland China in order to enhance communication between the mainland and Hong Kong in the discipline.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 27-28:  communication => communicate-01
Span 26-27:  enhance => enhance-01
Span 18-19:  exchange => exchange-01
Span 32-34:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 7-9:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 12-13:  joined => join-01
Span 13-14:  large => large
Span 21-22:  mainland => mainland
Span 30-32:  mainland and => (country :name (name :op "Hong" :op "Kong"))
Span 19-20:  programs => program
Span 15-16:  scale => scale
Span 17-18:  technology => technology
Span 9-10:  universities => university

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 11-12:  also => also
Oracle Span 28-29:  between => between
Oracle Span 22-23:  China => (country :name (name :op "China"))
Oracle Span 27-28:  communication => communication
Oracle Span 36-37:  discipline => discipline
Oracle Span 5-6:  education => education
Oracle Span 26-27:  enhance => enhance-01
Oracle Span 18-19:  exchange => exchange-01
Oracle Span 16-17:  high => high
Oracle Span 7-9:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Oracle Span 6-7:  institutes => institute
Oracle Span 12-13:  joined => join-01
Oracle Span 13-14:  large => large-scale
Oracle Span 21-22:  mainland => mainland
Oracle Span 3-4:  partnering => partner-01
Oracle Span 19-20:  programs => program
Oracle Span 17-18:  technology => technology
Oracle Span 9-10:  universities => university

Extra span: Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Extra span: mainland and => (country :name (name :op "Hong" :op "Kong"))
Incorrect span: communication => communicate-01
Extra span: scale => scale
Incorrect span: large => large
Missing span: China => (country :name (name :op "China"))
Missing span: communication => communication
Missing span: discipline => discipline
Missing span: between => between
Missing span: also => also
Missing span: partnering => partner-01
Missing span: institutes => institute
Missing span: education => education
Missing span: high => high
Missing span: large => large-scale
Dependencies:
1	In	_	IN	IN	_	13	prep	_	_
2	addition	_	NN	NN	_	1	pobj	_	_
3	to	_	TO	TO	_	2	prep	_	_
4	partnering	_	VBG	VBG	_	3	pcomp	_	_
5	with	_	IN	IN	_	4	prep	_	_
6	education	_	NN	NN	_	7	nn	_	_
7	institutes	_	NNS	NNS	_	5	pobj	_	_
8	Hong	_	NNP	NNP	_	10	nn	_	_
9	Kong	_	NNP	NNP	_	10	nn	_	_
10	universities	_	NNS	NNS	_	13	nsubj	_	_
11	have	_	VBP	VBP	_	13	aux	_	_
12	also	_	RB	RB	_	13	advmod	_	_
13	joined	_	VBN	VBN	_	0	root	_	_
14	large-scale	_	JJ	JJ	_	18	amod	_	_
15	high	_	JJ	JJ	_	18	amod	_	_
16	technology	_	NN	NN	_	18	nn	_	_
17	exchange	_	NN	NN	_	18	nn	_	_
18	programs	_	NNS	NNS	_	13	dobj	_	_
19	in	_	IN	IN	_	18	prep	_	_
20	mainland	_	JJ	JJ	_	21	amod	_	_
21	China	_	NNP	NNP	_	19	pobj	_	_
22	in	_	IN	IN	_	25	mark	_	_
23	order	_	NN	NN	_	25	dep	_	_
24	to	_	TO	TO	_	25	aux	_	_
25	enhance	_	VB	VB	_	13	advcl	_	_
26	communication	_	NN	NN	_	25	dobj	_	_
27	between	_	IN	IN	_	26	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	mainland	_	NN	NN	_	27	pobj	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	Hong	_	NNP	NNP	_	32	nn	_	_
32	Kong	_	NNP	NNP	_	29	conj	_	_
33	in	_	IN	IN	_	25	prep	_	_
34	the	_	DT	DT	_	35	det	_	_
35	discipline	_	NN	NN	_	33	pobj	_	_
36	.	_	.	.	_	13	punct	_	_

Oracle:
(b / between, op, c / city)
(b / between, op, m / mainland)
(c / city, name, n / name)
(c2 / country, mod, m / mainland)
(c2 / country, name, n2 / name)
(c3 / communication, mod, b / between)
(c3 / communication, topic, d / discipline)
(e2 / exchange-01, ARG1, t / technology)
(e2 / exchange-01, mod, l / large-scale)
(e3 / enhance-01, ARG1, c3 / communication)
(i / institute, mod, e / education)
(j / join-01, ARG0, u / university)
(j / join-01, ARG1, p2 / program)
(j / join-01, mod, a / also)
(j / join-01, prep-in-addition-to, p / partner-01)
(j / join-01, purpose, e3 / enhance-01)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "China")
(p / partner-01, ARG0, u / university)
(p / partner-01, ARG1, i / institute)
(p2 / program, location, c2 / country)
(p2 / program, mod, e2 / exchange-01)
(t / technology, mod, h / high)
(u / university, mod, c / city)

Input(Some(Graph(null,ArrayBuffer(Span(32,34,List(3, 2, 1, 0),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(30,32,List(7, 6, 5, 4),mainland and,(country :name (name :op "Hong" :op "Kong")),false), Span(27,28,List(8),communication,communicate-01,false), Span(26,27,List(9),enhance,enhance-01,false), Span(21,22,List(10),mainland,mainland,false), Span(19,20,List(11),programs,program,false), Span(18,19,List(12),exchange,exchange-01,false), Span(17,18,List(13),technology,technology,false), Span(15,16,List(14),scale,scale,false), Span(13,14,List(15),large,large,false), Span(12,13,List(16),joined,join-01,false), Span(9,10,List(17),universities,university,false), Span(7,9,List(21, 20, 19, 18),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> "Kong", 5 -> name, 12 -> exchange-01, 15 -> large, 8 -> communicate-01, 21 -> "Hong", 18 -> city, 7 -> "Kong", 17 -> university, 1 -> name, 4 -> country, 11 -> program, 14 -> scale, 20 -> "Kong", 6 -> "Hong", 0 -> city, 9 -> enhance-01, 16 -> join-01, 19 -> name, 3 -> "Hong", 10 -> mainland, 13 -> technology),Map(e -> enhance-01, n -> name, t -> technology, e2 -> exchange-01, c4 -> city, j -> join-01, s -> scale, m -> mainland, p -> program, n3 -> name, c3 -> communicate-01, c -> city, u -> university, l -> large, c2 -> country, n2 -> name))),[Ljava.lang.String;@7ec95456,Annotation([Ljava.lang.String;@748a654a,[Ljava.lang.String;@1d8b0500,[Ljava.lang.String;@76544c0a),Annotation([Ljava.lang.String;@428bdd72,[Ljava.lang.String;@650c405c,[Ledu.cmu.lti.nlp.amr.Dependency;@20eaeaf8),Annotation([Ljava.lang.String;@748ac6f3,[Ljava.lang.String;@68f6e55d,[Ljava.lang.String;@6fff46bf),Annotation([Ljava.lang.String;@1835dc92,[Ljava.lang.String;@3aaa3c39,[Ledu.cmu.lti.nlp.amr.Entity;@65a9ea3c))
AMR:
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(c3 / communicate-01, ARG1, c / city)
(c3 / communicate-01, ARG2, c2 / country)
(c4 / city, name, n3 / name)
(e / enhance-01, ARG1, c3 / communicate-01)
(e2 / exchange-01, ARG1, t / technology)
(j / join-01, ARG0, u / university)
(j / join-01, ARG1, p / program)
(j / join-01, purpose, e / enhance-01)
(m / mainland, mod, c2 / country)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(p / program, mod, s / scale)
(p / program, topic, e2 / exchange-01)
(s / scale, mod, l / large)
(u / university, location, c4 / city)

Decoded in 355,922 microseconds
Sentence: The Hong Kong University of Science and Technology (HKUST) demonstrated its latest achievements in research and development at the 6th annual China Hi-Tech Fair (CHTF) held in Shenzhen in October 2004.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology"))
NER Entity: (organization :name (name :op "HKUST"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Shenzhen"))
Spans:
Span 11-12:  demonstrated => demonstrate-01
Span 18-19:  development => develop-02
Span 24-25:  Hi => (thing :name (name :op "Hi"))
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 13-14:  latest => (late :degree most)
Span 35-37:  October 2004 => (date-entity :month 10 :year 2004)
Span 16-17:  research => research-01
Span 3-8:  University of Science and Technology => (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology"))

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 14-15:  achievements => (thing :ARG1-of achieve-01)
Oracle Span 17-18:  and => and
Oracle Span 23-28:  China Hi - Tech Fair => (event :name (name :op "Fair" :op "Hi-Tech" :op "China"))
Oracle Span 11-12:  demonstrated => demonstrate-01
Oracle Span 18-19:  development => develop-02
Oracle Span 31-32:  held => hold-04
Oracle Span 1-8:  Hong Kong University of Science and Technology => (university :name (name :op "Technology" :op "and" :op "Science" :op "of" :op "University" :op "Kong" :op "Hong"))
Oracle Span 13-14:  latest => (late :degree most)
Oracle Span 35-37:  October 2004 => (date-entity :month 10 :year 2004)
Oracle Span 16-17:  research => research-01
Oracle Span 33-34:  Shenzhen => (city :name (name :op "Shenzhen"))

Extra span: Hi => (thing :name (name :op "Hi"))
Extra span: University of Science and Technology => (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology"))
Extra span: Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Missing span: Hong Kong University of Science and Technology => (university :name (name :op "Technology" :op "and" :op "Science" :op "of" :op "University" :op "Kong" :op "Hong"))
Missing span: China Hi - Tech Fair => (event :name (name :op "Fair" :op "Hi-Tech" :op "China"))
Missing span: Shenzhen => (city :name (name :op "Shenzhen"))
Missing span: held => hold-04
Missing span: and => and
Missing span: achievements => (thing :ARG1-of achieve-01)
Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	Hong	_	NNP	NNP	_	4	nn	_	_
3	Kong	_	NNP	NNP	_	4	nn	_	_
4	University	_	NNP	NNP	_	12	nsubj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	Science	_	NNP	NNP	_	5	pobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	Technology	_	NNP	NNP	_	6	conj	_	_
9	(	_	(	(	_	10	punct	_	_
10	HKUST	_	NNP	NNP	_	4	appos	_	_
11	)	_	)	)	_	10	punct	_	_
12	demonstrated	_	VBD	VBD	_	0	root	_	_
13	its	_	PRP$	PRP$	_	15	poss	_	_
14	latest	_	JJS	JJS	_	15	amod	_	_
15	achievements	_	NNS	NNS	_	12	dobj	_	_
16	in	_	IN	IN	_	12	prep	_	_
17	research	_	NN	NN	_	16	pobj	_	_
18	and	_	CC	CC	_	17	cc	_	_
19	development	_	NN	NN	_	17	conj	_	_
20	at	_	IN	IN	_	12	prep	_	_
21	the	_	DT	DT	_	26	det	_	_
22	6th	_	JJ	JJ	_	26	amod	_	_
23	annual	_	JJ	JJ	_	26	amod	_	_
24	China	_	NNP	NNP	_	26	nn	_	_
25	Hi-Tech	_	NNP	NNP	_	26	nn	_	_
26	Fair	_	NNP	NNP	_	20	pobj	_	_
27	(	_	(	(	_	28	punct	_	_
28	CHTF	_	NNP	NNP	_	26	appos	_	_
29	)	_	)	)	_	28	punct	_	_
30	held	_	VBN	VBN	_	26	vmod	_	_
31	in	_	IN	IN	_	30	prep	_	_
32	Shenzhen	_	NNP	NNP	_	31	pobj	_	_
33	in	_	IN	IN	_	30	prep	_	_
34	October	_	NNP	NNP	_	33	pobj	_	_
35	2004	_	CD	CD	_	34	num	_	_
36	.	_	.	.	_	12	punct	_	_

Oracle:
(a / achieve-01, ARG0, u / university)
(a / achieve-01, ARG1, t / thing)
(a / achieve-01, topic, a2 / and)
(a2 / and, op, d2 / develop-02)
(a2 / and, op, r / research-01)
(c / city, name, n3 / name)
(d / demonstrate-01, ARG0, u / university)
(d / demonstrate-01, ARG1, t / thing)
(d / demonstrate-01, time, e / event)
(d3 / date-entity, month, 10)
(d3 / date-entity, year, 2004)
(e / event, name, n2 / name)
(h / hold-04, ARG1, e / event)
(h / hold-04, location, c / city)
(h / hold-04, time, d3 / date-entity)
(l / late, degree, m / most)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n / name, op, "Science")
(n / name, op, "Technology")
(n / name, op, "University")
(n / name, op, "and")
(n / name, op, "of")
(n2 / name, op, "China")
(n2 / name, op, "Fair")
(n2 / name, op, "Hi-Tech")
(n3 / name, op, "Shenzhen")
(t / thing, mod, l / late)
(u / university, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(35,37,List(2, 1, 0),October 2004,(date-entity :month 10 :year 2004),false), Span(24,25,List(5, 4, 3),Hi,(thing :name (name :op "Hi")),false), Span(18,19,List(6),development,develop-02,false), Span(16,17,List(7),research,research-01,false), Span(13,14,List(9, 8),latest,(late :degree most),false), Span(11,12,List(10),demonstrated,demonstrate-01,false), Span(3,8,List(17, 16, 15, 14, 13, 12, 11),University of Science and Technology,(organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology")),false), Span(1,3,List(21, 20, 19, 18),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> 2004, 5 -> "Hi", 12 -> name, 15 -> "Science", 8 -> late, 21 -> "Hong", 18 -> city, 7 -> research-01, 17 -> "Technology", 1 -> 10, 4 -> name, 11 -> organization, 14 -> "of", 20 -> "Kong", 6 -> develop-02, 0 -> date-entity, 9 -> most, 16 -> "and", 19 -> name, 3 -> thing, 10 -> demonstrate-01, 13 -> "University"),Map(n -> name, 2 -> 2004, t -> thing, d3 -> demonstrate-01, d -> date-entity, m -> most, 1 -> 10, n3 -> name, d2 -> develop-02, r -> research-01, c -> city, l -> late, o -> organization, n2 -> name))),[Ljava.lang.String;@70f68288,Annotation([Ljava.lang.String;@46911148,[Ljava.lang.String;@2db1b657,[Ljava.lang.String;@7e351d7),Annotation([Ljava.lang.String;@43c57161,[Ljava.lang.String;@d902300,[Ledu.cmu.lti.nlp.amr.Dependency;@2db33feb),Annotation([Ljava.lang.String;@30c3ae63,[Ljava.lang.String;@58658f63,[Ljava.lang.String;@54e12f4c),Annotation([Ljava.lang.String;@60990e5c,[Ljava.lang.String;@4d84049a,[Ledu.cmu.lti.nlp.amr.Entity;@39ee94de))
AMR:
(c / city, name, n3 / name)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2004)
(d2 / develop-02, ARG0, t / thing)
(d3 / demonstrate-01, ARG0, o / organization)
(d3 / demonstrate-01, ARG1, l / late)
(d3 / demonstrate-01, ARG2, r / research-01)
(l / late, degree, m / most)
(l / late, op, d / date-entity)
(n / name, op, "Hi")
(n2 / name, op, "Science")
(n2 / name, op, "Technology")
(n2 / name, op, "University")
(n2 / name, op, "and")
(n2 / name, op, "of")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(o / organization, location, c / city)
(o / organization, name, n2 / name)
(r / research-01, ARG1, t / thing)
(t / thing, name, n / name)

Decoded in 304,781 microseconds
Sentence: HKUST demonstrated more than 30 new technologies and products covering a wide range of technologies including nanotechnology, multimedia, logistics and RFID technology, advanced manufacturing, and biotechnology.

NER Entity: (organization :name (name :op "HKUST"))
Spans:
Span 29-30:  biotechnology => biotechnology
Span 1-2:  demonstrated => demonstrate-01
Span 26-27:  manufacturing => manufacture-01
Span 16-17:  nanotechnology => nanotechnology
Span 5-6:  new => new
Span 8-9:  products => product
Span 14-15:  technologies => technology
Span 6-7:  technologies => technology
Span 23-24:  technology => technology
Span 11-12:  wide => wide

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 4-5:  30 => 30
Oracle Span 25-26:  advanced => advance
Oracle Span 7-8:  and => and
Oracle Span 21-22:  and => and
Oracle Span 29-30:  biotechnology => biotechnology
Oracle Span 9-10:  covering => cover-01
Oracle Span 1-2:  demonstrated => demonstrate-01
Oracle Span 0-1:  HKUST => (university :name (name :op "HKUST"))
Oracle Span 20-21:  logistics => logistics
Oracle Span 26-27:  manufacturing => manufacture-01
Oracle Span 2-3:  more => more-than
Oracle Span 18-19:  multimedia => multimedia
Oracle Span 16-17:  nanotechnology => nanotechnology
Oracle Span 5-6:  new => new
Oracle Span 13-14:  of => include-91
Oracle Span 8-9:  products => product
Oracle Span 12-13:  range => range
Oracle Span 22-23:  RFID => (name :op "RFID")
Oracle Span 6-7:  technologies => technology
Oracle Span 14-15:  technologies => technology
Oracle Span 23-24:  technology => technology
Oracle Span 11-12:  wide => wide

Missing span: HKUST => (university :name (name :op "HKUST"))
Missing span: RFID => (name :op "RFID")
Missing span: and => and
Missing span: covering => cover-01
Missing span: range => range
Missing span: of => include-91
Missing span: and => and
Missing span: advanced => advance
Missing span: logistics => logistics
Missing span: multimedia => multimedia
Missing span: 30 => 30
Missing span: more => more-than
Dependencies:
1	HKUST	_	NNP	NNP	_	2	nsubj	_	_
2	demonstrated	_	VBD	VBD	_	0	root	_	_
3	more	_	JJR	JJR	_	4	mwe	_	_
4	than	_	IN	IN	_	5	quantmod	_	_
5	30	_	CD	CD	_	7	num	_	_
6	new	_	JJ	JJ	_	7	amod	_	_
7	technologies	_	NNS	NNS	_	2	dobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	products	_	NNS	NNS	_	7	conj	_	_
10	covering	_	VBG	VBG	_	9	vmod	_	_
11	a	_	DT	DT	_	13	det	_	_
12	wide	_	JJ	JJ	_	13	amod	_	_
13	range	_	NN	NN	_	10	dobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	technologies	_	NNS	NNS	_	14	pobj	_	_
16	including	_	VBG	VBG	_	15	prep	_	_
17	nanotechnology	_	NN	NN	_	16	pobj	_	_
18	,	_	,	,	_	17	punct	_	_
19	multimedia	_	NNS	NNS	_	21	nn	_	_
20	,	_	,	,	_	21	punct	_	_
21	logistics	_	NNS	NNS	_	17	conj	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	RFID	_	NN	NN	_	24	nn	_	_
24	technology	_	NN	NN	_	21	conj	_	_
25	,	_	,	,	_	17	punct	_	_
26	advanced	_	JJ	JJ	_	27	amod	_	_
27	manufacturing	_	NN	NN	_	17	conj	_	_
28	,	_	,	,	_	17	punct	_	_
29	and	_	CC	CC	_	17	cc	_	_
30	biotechnology	_	NN	NN	_	17	conj	_	_
31	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, p / product)
(a / and, op, t / technology)
(a / and, quant, m / more-than)
(a2 / and, op, b / biotechnology)
(a2 / and, op, l / logistics)
(a2 / and, op, m2 / multimedia)
(a2 / and, op, m3 / manufacture-01)
(a2 / and, op, n3 / nanotechnology)
(a2 / and, op, t3 / technology)
(c / cover-01, ARG0, a / and)
(c / cover-01, ARG1, r / range)
(d / demonstrate-01, ARG0, u / university)
(d / demonstrate-01, ARG1, a / and)
(i / include-91, ARG1, a2 / and)
(i / include-91, ARG2, r / range)
(m / more-than, op, 3 / 30)
(m3 / manufacture-01, mod, a3 / advance)
(n / name, op, "HKUST")
(n4 / name, op, "RFID")
(p / product, mod, n2 / new)
(r / range, mod, t2 / technology)
(r / range, mod, w / wide)
(t / technology, mod, n2 / new)
(t3 / technology, name, n4 / name)
(u / university, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),biotechnology,biotechnology,false), Span(26,27,List(1),manufacturing,manufacture-01,false), Span(23,24,List(2),technology,technology,false), Span(16,17,List(3),nanotechnology,nanotechnology,false), Span(14,15,List(4),technologies,technology,false), Span(11,12,List(5),wide,wide,false), Span(8,9,List(6),products,product,false), Span(6,7,List(7),technologies,technology,false), Span(5,6,List(8),new,new,false), Span(1,2,List(9),demonstrated,demonstrate-01,false)),Map(2 -> technology, 5 -> wide, 8 -> new, 7 -> technology, 1 -> manufacture-01, 4 -> technology, 6 -> product, 9 -> demonstrate-01, 0 -> biotechnology, 3 -> nanotechnology),Map(w -> wide, n -> nanotechnology, t -> technology, b -> biotechnology, d -> demonstrate-01, m -> manufacture-01, t3 -> technology, p -> product, t2 -> technology, n2 -> new))),[Ljava.lang.String;@642857e0,Annotation([Ljava.lang.String;@4c6b4ed7,[Ljava.lang.String;@21263314,[Ljava.lang.String;@6ca30b8a),Annotation([Ljava.lang.String;@4a92c6a9,[Ljava.lang.String;@5c9934da,[Ledu.cmu.lti.nlp.amr.Dependency;@4cb702ce),Annotation([Ljava.lang.String;@383caf89,[Ljava.lang.String;@64c781a9,[Ljava.lang.String;@71ed560f),Annotation([Ljava.lang.String;@5b88b8e,[Ljava.lang.String;@58253c57,[Ledu.cmu.lti.nlp.amr.Entity;@b73433))
AMR:
(d / demonstrate-01, ARG0, w / wide)
(d / demonstrate-01, ARG1, t3 / technology)
(m / manufacture-01, ARG0, b / biotechnology)
(m / manufacture-01, ARG1, p / product)
(p / product, mod, n2 / new)
(t / technology, op, d / demonstrate-01)
(t2 / technology, op, d / demonstrate-01)
(t2 / technology, topic, n / nanotechnology)
(t3 / technology, mod, n2 / new)

Decoded in 180,865 microseconds
Sentence: HKUST also collaborated with a prominent mainland manufacturer on the development of a nanomaterial-based high-capacity lithium battery.

NER Entity: (organization :name (name :op "HKUST"))
Spans:
Span 10-11:  development => develop-02
Span 6-7:  mainland => mainland
Span 7-8:  manufacturer => manufacture-01
Span 5-6:  prominent => prominent

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  also => also
Oracle Span 15-16:  based => base-02
Oracle Span 20-21:  battery => battery
Oracle Span 18-19:  capacity => capacity
Oracle Span 2-3:  collaborated => collaborate-01
Oracle Span 10-11:  development => develop-02
Oracle Span 16-17:  high => high
Oracle Span 0-1:  HKUST => (university :name (name :op "HKUST"))
Oracle Span 19-20:  lithium => lithium
Oracle Span 6-7:  mainland => mainland
Oracle Span 7-8:  manufacturer => manufacture-01
Oracle Span 13-14:  nanomaterial => nanomaterial
Oracle Span 5-6:  prominent => prominence

Incorrect span: prominent => prominent
Missing span: HKUST => (university :name (name :op "HKUST"))
Missing span: collaborated => collaborate-01
Missing span: also => also
Missing span: battery => battery
Missing span: capacity => capacity
Missing span: high => high
Missing span: based => base-02
Missing span: nanomaterial => nanomaterial
Missing span: lithium => lithium
Missing span: prominent => prominence
Dependencies:
1	HKUST	_	NNP	NNP	_	3	nsubj	_	_
2	also	_	RB	RB	_	3	advmod	_	_
3	collaborated	_	VBD	VBD	_	0	root	_	_
4	with	_	IN	IN	_	3	prep	_	_
5	a	_	DT	DT	_	8	det	_	_
6	prominent	_	JJ	JJ	_	8	amod	_	_
7	mainland	_	JJ	JJ	_	8	amod	_	_
8	manufacturer	_	NN	NN	_	4	pobj	_	_
9	on	_	IN	IN	_	3	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	development	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	17	det	_	_
14	nanomaterial-based	_	JJ	JJ	_	17	amod	_	_
15	high-capacity	_	JJ	JJ	_	17	amod	_	_
16	lithium	_	NN	NN	_	17	nn	_	_
17	battery	_	NN	NN	_	12	pobj	_	_
18	.	_	.	.	_	3	punct	_	_

Oracle:
(b / battery, mod, b2 / base-02)
(b / battery, mod, c3 / capacity)
(b2 / base-02, ARG1, b / battery)
(b2 / base-02, ARG2, n2 / nanomaterial)
(c / collaborate-01, ARG0, u / university)
(c / collaborate-01, ARG2, d / develop-02)
(c / collaborate-01, mod, a / also)
(c3 / capacity, mod, h / high)
(d / develop-02, ARG1, b / battery)
(l / lithium, consist, b / battery)
(n / name, op, "HKUST")
(u / university, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),development,develop-02,false), Span(7,8,List(1),manufacturer,manufacture-01,false), Span(6,7,List(2),mainland,mainland,false), Span(5,6,List(3),prominent,prominent,false)),Map(2 -> mainland, 1 -> manufacture-01, 0 -> develop-02, 3 -> prominent),Map(m2 -> mainland, m -> manufacture-01, d -> develop-02, p -> prominent))),[Ljava.lang.String;@1bf14704,Annotation([Ljava.lang.String;@5a545b0f,[Ljava.lang.String;@2be21396,[Ljava.lang.String;@124dac75),Annotation([Ljava.lang.String;@315105f,[Ljava.lang.String;@7b61bf11,[Ledu.cmu.lti.nlp.amr.Dependency;@40247d48),Annotation([Ljava.lang.String;@3ff54f3d,[Ljava.lang.String;@14c93774,[Ljava.lang.String;@62a68bcb),Annotation([Ljava.lang.String;@18b74ea,[Ljava.lang.String;@14924f41,[Ledu.cmu.lti.nlp.amr.Entity;@493da830))
AMR:
(m / manufacture-01, ARG1, d / develop-02)
(m / manufacture-01, mod, m2 / mainland)
(m / manufacture-01, mod, p / prominent)

Decoded in 54,816 microseconds
Sentence: This collaboration is the most recent in a series of successful technology transfer agreements reached by HKUST.

NER Entity: (organization :name (name :op "HKUST"))
Spans:
Span 13-14:  agreements => agree-01
Span 1-2:  collaboration => collaborate-01
Span 14-15:  reached => reach-01
Span 5-6:  recent => recent
Span 8-9:  series => series
Span 10-11:  successful => succeed-01
Span 11-12:  technology => technology
Span 0-1:  This => this
Span 12-13:  transfer => transfer-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 13-14:  agreements => agreement
Oracle Span 1-2:  collaboration => collaborate-01
Oracle Span 16-17:  HKUST => (university :name (name :op "HKUST"))
Oracle Span 4-5:  most => most
Oracle Span 9-10:  of => include-91
Oracle Span 14-15:  reached => reach-01
Oracle Span 5-6:  recent => recent
Oracle Span 8-9:  series => series
Oracle Span 10-11:  successful => successful
Oracle Span 11-12:  technology => technology
Oracle Span 0-1:  This => this
Oracle Span 12-13:  transfer => transfer-01

Incorrect span: agreements => agree-01
Incorrect span: successful => succeed-01
Missing span: HKUST => (university :name (name :op "HKUST"))
Missing span: most => most
Missing span: of => include-91
Missing span: agreements => agreement
Missing span: successful => successful
Dependencies:
1	This	_	DT	DT	_	2	det	_	_
2	collaboration	_	NN	NN	_	6	nsubj	_	_
3	is	_	VBZ	VBZ	_	6	cop	_	_
4	the	_	DT	DT	_	6	det	_	_
5	most	_	RBS	RBS	_	6	advmod	_	_
6	recent	_	JJ	JJ	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	a	_	DT	DT	_	9	det	_	_
9	series	_	NN	NN	_	7	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	successful	_	JJ	JJ	_	14	amod	_	_
12	technology	_	NN	NN	_	14	nn	_	_
13	transfer	_	NN	NN	_	14	nn	_	_
14	agreements	_	NNS	NNS	_	10	pobj	_	_
15	reached	_	VBN	VBN	_	14	vmod	_	_
16	by	_	IN	IN	_	15	prep	_	_
17	HKUST	_	NNP	NNP	_	16	pobj	_	_
18	.	_	.	.	_	6	punct	_	_

Oracle:
(a / agreement, mod, s2 / successful)
(a / agreement, mod, t2 / transfer-01)
(c / collaborate-01, mod, t / this)
(c / collaborate-01, time, r / recent)
(i / include-91, ARG1, c / collaborate-01)
(i / include-91, ARG2, s / series)
(n / name, op, "HKUST")
(r / recent, degree, m / most)
(r2 / reach-01, ARG0, u / university)
(r2 / reach-01, ARG1, a / agreement)
(s / series, mod, a / agreement)
(t2 / transfer-01, ARG1, t3 / technology)
(u / university, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),reached,reach-01,false), Span(13,14,List(1),agreements,agree-01,false), Span(12,13,List(2),transfer,transfer-01,false), Span(11,12,List(3),technology,technology,false), Span(10,11,List(4),successful,succeed-01,false), Span(8,9,List(5),series,series,false), Span(5,6,List(6),recent,recent,false), Span(1,2,List(7),collaboration,collaborate-01,false), Span(0,1,List(8),This,this,false)),Map(2 -> transfer-01, 5 -> series, 8 -> this, 7 -> collaborate-01, 1 -> agree-01, 4 -> succeed-01, 6 -> recent, 0 -> reach-01, 3 -> technology),Map(s2 -> series, t -> transfer-01, s -> succeed-01, t3 -> this, r2 -> recent, a -> agree-01, t2 -> technology, r -> reach-01, c -> collaborate-01))),[Ljava.lang.String;@1f939a0f,Annotation([Ljava.lang.String;@45658133,[Ljava.lang.String;@430b2699,[Ljava.lang.String;@67536ae0),Annotation([Ljava.lang.String;@6413d7e7,[Ljava.lang.String;@d16be4f,[Ledu.cmu.lti.nlp.amr.Dependency;@17b37e9a),Annotation([Ljava.lang.String;@6bcb12e6,[Ljava.lang.String;@111d5c97,[Ljava.lang.String;@29c17c3d),Annotation([Ljava.lang.String;@250a9031,[Ljava.lang.String;@1665fa54,[Ledu.cmu.lti.nlp.amr.Entity;@6d67f5eb))
AMR:
(a / agree-01, ARG1, t / transfer-01)
(a / agree-01, quant, s2 / series)
(c / collaborate-01, mod, t3 / this)
(c / collaborate-01, time, r2 / recent)
(r / reach-01, ARG1, a / agree-01)
(r2 / recent, condition, s2 / series)
(s / succeed-01, ARG1, a / agree-01)
(t / transfer-01, ARG1, t2 / technology)

Decoded in 68,436 microseconds
Sentence: HKUST President Paul Ching-Wu Chu stated --

NER Entity: (organization :name (name :op "HKUST"))
NER Entity: (person :name (name :op "Paul" :op "Ching" :op "-" :op "Wu" :op "Chu"))
Spans:
Span 2-5:  Paul Ching - => (person :name (name :op "Paul" :op "Ching" :op "-" :op "Wu" :op "Chu"))
Span 1-2:  President => (have-org-role-91 :ARG2 president)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  HKUST => (university :name (name :op "HKUST"))
Oracle Span 2-7:  Paul Ching - Wu Chu => (person :name (name :op "Chu" :op "Ching-Wu" :op "Paul"))
Oracle Span 1-2:  President => (have-org-role-91 :ARG2 president)
Oracle Span 7-8:  stated => state-01

Extra span: Paul Ching - => (person :name (name :op "Paul" :op "Ching" :op "-" :op "Wu" :op "Chu"))
Missing span: Paul Ching - Wu Chu => (person :name (name :op "Chu" :op "Ching-Wu" :op "Paul"))
Missing span: HKUST => (university :name (name :op "HKUST"))
Missing span: stated => state-01
Dependencies:
1	HKUST	_	NNP	NNP	_	5	nn	_	_
2	President	_	NNP	NNP	_	5	nn	_	_
3	Paul	_	NNP	NNP	_	5	nn	_	_
4	Ching-Wu	_	NNP	NNP	_	5	nn	_	_
5	Chu	_	NNP	NNP	_	0	root	_	_
6	stated	_	VBN	VBN	_	5	vmod	_	_
7	--	_	:	:	_	5	punct	_	_

Oracle:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, u / university)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Ching-Wu")
(n / name, op, "Chu")
(n / name, op, "Paul")
(n2 / name, op, "HKUST")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(u / university, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(2,5,List(6, 5, 4, 3, 2, 1, 0),Paul Ching -,(person :name (name :op "Paul" :op "Ching" :op "-" :op "Wu" :op "Chu")),false), Span(1,2,List(8, 7),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> "Paul", 5 -> "Wu", 8 -> president, 7 -> have-org-role-91, 1 -> name, 4 -> "-", 6 -> "Chu", 0 -> person, 3 -> "Ching"),Map(n -> name, h -> have-org-role-91, p2 -> president, p -> person))),[Ljava.lang.String;@4f654cee,Annotation([Ljava.lang.String;@3e1fd62b,[Ljava.lang.String;@7112ce6,[Ljava.lang.String;@558b4942),Annotation([Ljava.lang.String;@30ec7d21,[Ljava.lang.String;@70025b99,[Ledu.cmu.lti.nlp.amr.Dependency;@7efa3f63),Annotation([Ljava.lang.String;@7134b8a7,[Ljava.lang.String;@2262d6d5,[Ljava.lang.String;@40de8f93),Annotation([Ljava.lang.String;@6ff0b1cc,[Ljava.lang.String;@3b55dd15,[Ledu.cmu.lti.nlp.amr.Entity;@f3560d4))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "-")
(n / name, op, "Ching")
(n / name, op, "Chu")
(n / name, op, "Paul")
(n / name, op, "Wu")
(p / person, name, n / name)

Decoded in 20,522 microseconds
Sentence: HKUST is increasing funding to research new technologies required by industry in the Pearl River Delta.

NER Entity: (organization :name (name :op "HKUST"))
NER Entity: (country :name (name :op "Pearl" :op "River" :op "Delta"))
Spans:
Span 3-4:  funding => fund-01
Span 2-3:  increasing => increase-01
Span 10-11:  industry => industry
Span 6-7:  new => new
Span 13-16:  Pearl River Delta => (country :name (name :op "Pearl" :op "River" :op "Delta"))
Span 8-9:  required => require-01
Span 5-6:  research => research-01
Span 7-8:  technologies => technology

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Oracle Span 3-4:  funding => fund-01
Oracle Span 0-1:  HKUST => (university :name (name :op "HKUST"))
Oracle Span 2-3:  increasing => increase-01
Oracle Span 10-11:  industry => industry
Oracle Span 6-7:  new => new
Oracle Span 13-16:  Pearl River Delta => (country-region :name (name :op "Delta" :op "River" :op "Pearl"))
Oracle Span 8-9:  required => require-01
Oracle Span 5-6:  research => research-01
Oracle Span 7-8:  technologies => technology

Incorrect span: Pearl River Delta => (country :name (name :op "Pearl" :op "River" :op "Delta"))
Missing span: HKUST => (university :name (name :op "HKUST"))
Missing span: Pearl River Delta => (country-region :name (name :op "Delta" :op "River" :op "Pearl"))
Dependencies:
1	HKUST	_	NNP	NNP	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	aux	_	_
3	increasing	_	VBG	VBG	_	0	root	_	_
4	funding	_	VBG	VBG	_	3	vmod	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	research	_	VB	VB	_	4	xcomp	_	_
7	new	_	JJ	JJ	_	8	amod	_	_
8	technologies	_	NNS	NNS	_	6	dobj	_	_
9	required	_	VBN	VBN	_	8	vmod	_	_
10	by	_	IN	IN	_	9	prep	_	_
11	industry	_	NN	NN	_	10	pobj	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	16	det	_	_
14	Pearl	_	NNP	NNP	_	16	nn	_	_
15	River	_	NNP	NNP	_	16	nn	_	_
16	Delta	_	NNP	NNP	_	12	pobj	_	_
17	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country-region, name, n2 / name)
(f / fund-01, ARG1, r / research-01)
(i / increase-01, ARG0, u / university)
(i / increase-01, ARG1, f / fund-01)
(i2 / industry, location, c / country-region)
(n / name, op, "HKUST")
(n2 / name, op, "Delta")
(n2 / name, op, "Pearl")
(n2 / name, op, "River")
(r / research-01, ARG1, t / technology)
(r2 / require-01, ARG0, i2 / industry)
(r2 / require-01, ARG1, t / technology)
(t / technology, mod, n3 / new)
(u / university, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(13,16,List(4, 3, 2, 1, 0),Pearl River Delta,(country :name (name :op "Pearl" :op "River" :op "Delta")),false), Span(10,11,List(5),industry,industry,false), Span(8,9,List(6),required,require-01,false), Span(7,8,List(7),technologies,technology,false), Span(6,7,List(8),new,new,false), Span(5,6,List(9),research,research-01,false), Span(3,4,List(10),funding,fund-01,false), Span(2,3,List(11),increasing,increase-01,false)),Map(2 -> "Pearl", 5 -> industry, 8 -> new, 7 -> technology, 1 -> name, 11 -> increase-01, 4 -> "Delta", 6 -> require-01, 9 -> research-01, 0 -> country, 10 -> fund-01, 3 -> "River"),Map(n -> name, t -> technology, r2 -> research-01, i2 -> increase-01, r -> require-01, i -> industry, c -> country, f -> fund-01, n2 -> new))),[Ljava.lang.String;@3ba3d4b6,Annotation([Ljava.lang.String;@51b77cdf,[Ljava.lang.String;@441fbe89,[Ljava.lang.String;@6088451e),Annotation([Ljava.lang.String;@45ab3bdd,[Ljava.lang.String;@2f10f633,[Ledu.cmu.lti.nlp.amr.Dependency;@1642eeae),Annotation([Ljava.lang.String;@3440e9cd,[Ljava.lang.String;@28a9494b,[Ljava.lang.String;@a09303),Annotation([Ljava.lang.String;@1163a27,[Ljava.lang.String;@322ba549,[Ledu.cmu.lti.nlp.amr.Entity;@502a4156))
AMR:
(c / country, name, n / name)
(f / fund-01, ARG1, r2 / research-01)
(i / industry, poss, c / country)
(i2 / increase-01, ARG1, f / fund-01)
(n / name, op, "Delta")
(n / name, op, "Pearl")
(n / name, op, "River")
(r / require-01, ARG0, i / industry)
(r / require-01, ARG1, t / technology)
(r2 / research-01, ARG1, t / technology)
(t / technology, mod, n2 / new)

Decoded in 90,595 microseconds
Sentence: The University will continue to leverage its extensive relationships with international research institutions and multi-national corporations to enhance the development of advanced technologies which can find immediate practical application in China.

NER Entity: (organization :name (name :op "University"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 26-27:  can => possible
Span 3-4:  continue => continue-01
Span 17-18:  corporations => corporation
Span 21-22:  development => develop-02
Span 19-20:  enhance => enhance-01
Span 7-8:  extensive => extensive
Span 28-29:  immediate => immediate
Span 12-13:  institutions => institution
Span 29-30:  practical => practical
Span 11-12:  research => research-01
Span 24-25:  technologies => technology

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 23-24:  advanced => advance
Oracle Span 13-14:  and => and
Oracle Span 30-31:  application => application
Oracle Span 26-27:  can => possible
Oracle Span 32-33:  China => (country :name (name :op "China"))
Oracle Span 3-4:  continue => continue-01
Oracle Span 17-18:  corporations => corporation
Oracle Span 21-22:  development => develop-02
Oracle Span 19-20:  enhance => enhance-01
Oracle Span 7-8:  extensive => extensive
Oracle Span 27-28:  find => find-01
Oracle Span 28-29:  immediate => immediate
Oracle Span 12-13:  institutions => institution
Oracle Span 10-11:  international => international
Oracle Span 5-6:  leverage => leverage-01
Oracle Span 14-15:  multi => multi-national
Oracle Span 29-30:  practical => practical
Oracle Span 8-9:  relationships => relationship
Oracle Span 11-12:  research => research-01
Oracle Span 24-25:  technologies => technology
Oracle Span 1-2:  University => university

Missing span: China => (country :name (name :op "China"))
Missing span: leverage => leverage-01
Missing span: find => find-01
Missing span: application => application
Missing span: advanced => advance
Missing span: relationships => relationship
Missing span: and => and
Missing span: international => international
Missing span: University => university
Missing span: multi => multi-national
Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	University	_	NNP	NNP	_	4	nsubj	_	_
3	will	_	MD	MD	_	4	aux	_	_
4	continue	_	VB	VB	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	leverage	_	VB	VB	_	4	xcomp	_	_
7	its	_	PRP$	PRP$	_	9	poss	_	_
8	extensive	_	JJ	JJ	_	9	amod	_	_
9	relationships	_	NNS	NNS	_	6	dobj	_	_
10	with	_	IN	IN	_	6	prep	_	_
11	international	_	JJ	JJ	_	13	amod	_	_
12	research	_	NN	NN	_	13	nn	_	_
13	institutions	_	NNS	NNS	_	10	pobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	multi-national	_	JJ	JJ	_	16	amod	_	_
16	corporations	_	NNS	NNS	_	13	conj	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	enhance	_	VB	VB	_	6	vmod	_	_
19	the	_	DT	DT	_	20	det	_	_
20	development	_	NN	NN	_	18	dobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	advanced	_	JJ	JJ	_	23	amod	_	_
23	technologies	_	NNS	NNS	_	21	pobj	_	_
24	which	_	WDT	WDT	_	26	nsubj	_	_
25	can	_	MD	MD	_	26	aux	_	_
26	find	_	VB	VB	_	20	rcmod	_	_
27	immediate	_	JJ	JJ	_	29	amod	_	_
28	practical	_	JJ	JJ	_	29	amod	_	_
29	application	_	NN	NN	_	26	dobj	_	_
30	in	_	IN	IN	_	26	prep	_	_
31	China	_	NNP	NNP	_	30	pobj	_	_
32	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c2 / corporation)
(a / and, op, i2 / institution)
(a3 / application, location, c3 / country)
(a3 / application, mod, i4 / immediate)
(a3 / application, mod, p2 / practical)
(c / continue-01, ARG0, u / university)
(c / continue-01, ARG1, l / leverage-01)
(c2 / corporation, mod, m / multi-national)
(c3 / country, name, n / name)
(d / develop-02, ARG1, t / technology)
(e2 / enhance-01, ARG0, u / university)
(e2 / enhance-01, ARG1, d / develop-02)
(f / find-01, ARG1, a3 / application)
(i2 / institution, mod, i3 / international)
(i2 / institution, mod, r2 / research-01)
(l / leverage-01, ARG0, u / university)
(l / leverage-01, ARG1, r / relationship)
(l / leverage-01, purpose, e2 / enhance-01)
(n / name, op, "China")
(p / possible, domain, f / find-01)
(r / relationship, mod, e / extensive)
(r / relationship, poss, u / university)
(r / relationship, prep-with, a / and)
(t / technology, mod, a2 / advance)
(t / technology, mod, p / possible)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),practical,practical,false), Span(28,29,List(1),immediate,immediate,false), Span(26,27,List(2),can,possible,false), Span(24,25,List(3),technologies,technology,false), Span(21,22,List(4),development,develop-02,false), Span(19,20,List(5),enhance,enhance-01,false), Span(17,18,List(6),corporations,corporation,false), Span(12,13,List(7),institutions,institution,false), Span(11,12,List(8),research,research-01,false), Span(7,8,List(9),extensive,extensive,false), Span(3,4,List(10),continue,continue-01,false)),Map(2 -> possible, 5 -> enhance-01, 8 -> research-01, 7 -> institution, 1 -> immediate, 4 -> develop-02, 6 -> corporation, 9 -> extensive, 0 -> practical, 10 -> continue-01, 3 -> technology),Map(e -> enhance-01, t -> technology, e2 -> extensive, p2 -> possible, d -> develop-02, p -> practical, i2 -> institution, r -> research-01, i -> immediate, c -> corporation, c2 -> continue-01))),[Ljava.lang.String;@5416f8db,Annotation([Ljava.lang.String;@64e1377c,[Ljava.lang.String;@b0fd744,[Ljava.lang.String;@92d1782),Annotation([Ljava.lang.String;@6a1ef65c,[Ljava.lang.String;@72976b4,[Ledu.cmu.lti.nlp.amr.Dependency;@726934e2),Annotation([Ljava.lang.String;@1319bc2a,[Ljava.lang.String;@e280403,[Ljava.lang.String;@42f85fa4),Annotation([Ljava.lang.String;@798dad3d,[Ljava.lang.String;@27abb6ca,[Ledu.cmu.lti.nlp.amr.Entity;@696db620))
AMR:
(c2 / continue-01, ARG1, i2 / institution)
(c2 / continue-01, purpose, e / enhance-01)
(d / develop-02, ARG1, t / technology)
(e / enhance-01, ARG0, c / corporation)
(e / enhance-01, ARG1, d / develop-02)
(e2 / extensive, op, c / corporation)
(i2 / institution, mod, r / research-01)
(p2 / possible, domain, d / develop-02)
(r / research-01, ARG0, p / practical)
(r / research-01, ARG1, i / immediate)

Decoded in 541,822 microseconds
--- Stage1 evaluation ---
Precision: 0.8034748401901327
Recall: 0.5040098704503393
F1: 0.6194477791116447
