Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: Resolutely support the thread starter! I compose a poem in reply:

Oracle Span 1:  compose => compose-02
Oracle Span 2:  I => i
Oracle Span 3:  poem => poem
Oracle Span 4:  reply => reply-01
Oracle Span 5:  Resolutely => resolute
Oracle Span 6:  starter => (person :ARG0-of start-01)
Oracle Span 7:  support => support-01
Oracle Span 8:  thread => thread
Registering annotator regexner2 with class edu.stanford.nlp.pipeline.TokensRegexNERAnnotator
Registering annotator regexner1 with class edu.stanford.nlp.pipeline.TokensRegexNERAnnotator
Adding annotator tokenize
TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer.
Adding annotator ssplit
edu.stanford.nlp.curator.CuratorAnnotatorImplementations:
Adding annotator pos
Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [0.8 sec].
Adding annotator lemma
Adding annotator ner
Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [4.6 sec].
Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.1 sec].
Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [2.9 sec].
sutime.binder.1.
Initializing JollyDayHoliday for sutime with classpath:edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml
Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt
Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt
Feb 17, 2015 12:27:34 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules
INFO: Ignoring inactive rule: null
Feb 17, 2015 12:27:34 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules
INFO: Ignoring inactive rule: temporal-composite-8:ranges
Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt
Adding annotator regexner1
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{Deist RELIGION [ORGANIZATION, PERSON, MISC] 1.0}, new=Entry{Deist RELIGION [ORGANIZATION, PERSON, MISC] 3.0}
TokensRegexNERAnnotator regexner1: Entry has multiple types: murder	CRIMINAL_CHARGE,CAUSE_OF_DEATH	11.  Taking type to be CRIMINAL_CHARGE
TokensRegexNERAnnotator regexner1: Entry has multiple types: New York	CITY,STATE_OR_PROVINCE	LOCATION	2.  Taking type to be CITY
TokensRegexNERAnnotator regexner1: Entry has multiple types: England	COUNTRY,STATE_OR_PROVINCE	LOCATION	1.  Taking type to be COUNTRY
TokensRegexNERAnnotator regexner1: Entry has multiple types: Scotland	COUNTRY,STATE_OR_PROVINCE	LOCATION	1.  Taking type to be COUNTRY
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{SANDER TITLE [1] 0.0}, new=Entry{sander CITY [LOCATION] 1.0}
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{WINDER TITLE [1] 0.0}, new=Entry{winder CITY [LOCATION] 1.0}
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{CARVER TITLE [1] 0.0}, new=Entry{carver CITY [LOCATION] 1.0}
TokensRegexNERAnnotator regexner1: Read 56933 unique entries out of 73409 from data/kbp_regexner_mapping_nocase.tab, 0 TokensRegex patterns.
Adding annotator regexner2
TokensRegexNERAnnotator regexner2: Read 478 unique entries out of 481 from data/kbp_regexner_mapping.tab, 0 TokensRegex patterns.
Adding annotator parse
Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...done [0.8 sec].
Adding annotator dcoref
Adding annotator srl
Adding annotator nom
Adding annotator prep
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Spans:
Span 11-12:   => reply-01
Span 7-8:  a => compose-01
Span 0-1:  Resolutely => resolutely
Span 4-5:  starter! => (person :ARG0-of start-01)
Span 1-2:  support => support-01
Span 3-4:  thread => thread

 *** WARNING: The dependency tree seems broken.  I can't find the head of compose in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of poem in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of reply in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 12
Langrangian relaxation converged after 12 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of compose in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of poem in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of reply in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 12
Oracle Span 7-8:  compose => compose-02
Oracle Span 6-7:  I => i
Oracle Span 9-10:  poem => poem
Oracle Span 11-12:  reply => reply-01
Oracle Span 0-1:  Resolutely => resolute
Oracle Span 4-5:  starter => (person :ARG0-of start-01)
Oracle Span 1-2:  support => support-01
Oracle Span 3-4:  thread => thread

Dependencies:
1	Resolutely	_	RB	RB	_	2	advmod	_	_
2	support	_	VB	VB	_	0	root	_	_
3	the	_	DT	DT	_	5	det	_	_
4	thread	_	NN	NN	_	5	nn	_	_
5	starter	_	NN	NN	_	2	dobj	_	_
6	!	_	.	.	_	2	punct	_	_
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	compose	_	VBP	VBP	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	poem	_	NN	NN	_	2	dobj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	reply	_	NN	NN	_	5	pobj	_	_
7	:	_	:	:	_	2	punct	_	_

Oracle:
(c / compose-02, ARG0, i / i)
(c / compose-02, ARG1, p2 / poem)
(r2 / reply-01, ARG0, i / i)
(r2 / reply-01, ARG2, c / compose-02)
(s / support-01, ARG1, p / person)
(s / support-01, manner, r / resolute)
(s2 / start-01, ARG0, p / person)
(s2 / start-01, ARG1, t / thread)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),,reply-01,false), Span(1,2,List(1),support,support-01,false), Span(7,8,List(2),a,compose-01,false), Span(4,5,List(4, 3),starter!,(person :ARG0-of start-01),false), Span(0,1,List(5),Resolutely,resolutely,false), Span(3,4,List(6),thread,thread,false)),Map(2 -> compose-01, 5 -> resolutely, 1 -> support-01, 4 -> start-01, 6 -> thread, 0 -> reply-01, 3 -> person),Map(t -> thread, s2 -> start-01, s -> support-01, r2 -> resolutely, p -> person, r -> reply-01, c -> compose-01))),[Ljava.lang.String;@21d5af02,Annotation([Ljava.lang.String;@2d6bef39,[Ljava.lang.String;@57165e41,[Ljava.lang.String;@1593a0d9),Annotation([Ljava.lang.String;@1932b0d6,[Ljava.lang.String;@6bd286ee,[Ledu.cmu.lti.nlp.amr.Dependency;@ed32983),Annotation([Ljava.lang.String;@6ced5e8,[Ljava.lang.String;@af671e7,[Ljava.lang.String;@756c63a1),Annotation([Ljava.lang.String;@6264c3be,[Ljava.lang.String;@12f52b8f,[Ledu.cmu.lti.nlp.amr.Entity;@2b35197f))
AMR:
(c / compose-01, ARG1, p / person)
(r / reply-01, ARG1, p / person)
(s / support-01, ARG0, p / person)
(s / support-01, ARG1, t / thread)
(s / support-01, degree, r2 / resolutely)
(s2 / start-01, ARG0, p / person)

Decoded in 30,148,928 microseconds
Sentence: Pledge to fight to the death defending the Diaoyu Islands and the related islands

Oracle Span 1:  and => and
Oracle Span 2:  death => die-01
Oracle Span 3:  defending => defend-01
Oracle Span 4:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 5:  fight => fight-01
Oracle Span 6:  islands => island
Oracle Span 7:  Pledge => pledge-01
Oracle Span 8:  related => relate-01
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 10-11:  and => and
Span 5-6:  death => detach-01
Span 6-7:  defending => defend-01
Span 8-10:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Span 2-3:  fight => fight-01
Span 13-14:  islands => island
Span 0-1:  Pledge => pledge-01
Span 12-13:  related => relate-01

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Oracle Span 10-11:  and => and
Oracle Span 5-6:  death => die-01
Oracle Span 6-7:  defending => defend-01
Oracle Span 8-10:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 2-3:  fight => fight-01
Oracle Span 13-14:  islands => island
Oracle Span 0-1:  Pledge => pledge-01
Oracle Span 12-13:  related => relate-01

Dependencies:
1	Pledge	_	VB	VB	_	0	root	_	_
2	to	_	TO	TO	_	3	aux	_	_
3	fight	_	VB	VB	_	1	xcomp	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	death	_	NN	NN	_	4	pobj	_	_
7	defending	_	VBG	VBG	_	6	vmod	_	_
8	the	_	DT	DT	_	10	det	_	_
9	Diaoyu	_	NNP	NNP	_	10	nn	_	_
10	Islands	_	NNPS	NNPS	_	7	dobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	the	_	DT	DT	_	14	det	_	_
13	related	_	VBN	VBN	_	14	amod	_	_
14	islands	_	NNS	NNS	_	10	conj	_	_

Oracle:
(a / and, op, i / island)
(a / and, op, i2 / island)
(d2 / defend-01, ARG1, a / and)
(f / fight-01, manner, d / die-01)
(f / fight-01, purpose, d2 / defend-01)
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / pledge-01, ARG2, f / fight-01)
(r / relate-01, ARG1, i2 / island)
(r / relate-01, ARG2, i / island)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),death,detach-01,false), Span(6,7,List(1),defending,defend-01,false), Span(12,13,List(2),related,relate-01,false), Span(8,10,List(6, 5, 4, 3),Diaoyu Islands,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(2,3,List(7),fight,fight-01,false), Span(10,11,List(8),and,and,false), Span(13,14,List(9),islands,island,false), Span(0,1,List(10),Pledge,pledge-01,false)),Map(2 -> relate-01, 5 -> "Islands", 8 -> and, 7 -> fight-01, 1 -> defend-01, 4 -> name, 6 -> "Diaoyu", 9 -> island, 0 -> detach-01, 10 -> pledge-01, 3 -> island),Map(n -> name, d -> detach-01, p -> pledge-01, a -> and, d2 -> defend-01, i2 -> island, i -> island, r -> relate-01, f -> fight-01))),[Ljava.lang.String;@11f6a7dc,Annotation([Ljava.lang.String;@53499a6f,[Ljava.lang.String;@32eed10b,[Ljava.lang.String;@4ed5b463),Annotation([Ljava.lang.String;@6ab92222,[Ljava.lang.String;@753c57f8,[Ledu.cmu.lti.nlp.amr.Dependency;@319eb6dd),Annotation([Ljava.lang.String;@528b7a21,[Ljava.lang.String;@7180fa60,[Ljava.lang.String;@6694e03f),Annotation([Ljava.lang.String;@22f88a6e,[Ljava.lang.String;@2b2bb662,[Ledu.cmu.lti.nlp.amr.Entity;@5d0e1a9d))
AMR:
(a / and, op, i2 / island)
(d / detach-01, ARG1, d2 / defend-01)
(d2 / defend-01, ARG0, a / and)
(d2 / defend-01, ARG1, i / island)
(f / fight-01, ARG1, d2 / defend-01)
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / pledge-01, ARG1, f / fight-01)
(r / relate-01, ARG1, i2 / island)

Decoded in 6,462,557 microseconds
Sentence: Fleets bumping fishing boats. Little evil Japanese ghosts stirring up trouble and unrest. With hearts of thieves and arrogant form, they again show their wolfish appearance

Oracle Span 1:  again => again
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  appearance => appearance
Oracle Span 5:  arrogant => arrogance
Oracle Span 6:  boats => boat
Oracle Span 7:  bumping => bump-01
Oracle Span 8:  evil => evil
Oracle Span 9:  fishing => fish-01
Oracle Span 10:  Fleets => fleet
Oracle Span 11:  form => form
Oracle Span 12:  ghosts => ghost
Oracle Span 13:  hearts => heart
Oracle Span 14:  Japanese => (country :name (name :op "Japan"))
Oracle Span 15:  Little => little
Oracle Span 16:  show => show-01
Oracle Span 17:  stirring => stir-04
Oracle Span 18:  they => they
Oracle Span 19:  thieves => (person :ARG0-of thieve-01)
Oracle Span 20:  trouble => trouble
Oracle Span 21:  unrest => unrest
Oracle Span 22:  wolfish => wolfish
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 28-29:   => apprentice-01
Span 21-22:  again => form
Span 11-12:  and => trouble
Span 25-26:  appearance => show-01
Span 3-4:  boats. => boat
Span 1-2:  bumping => bump-01
Span 19-20:  form, => and
Span 7-8:  ghosts => (country :name (name :op "Japan"))
Span 6-7:  Japanese => evil
Span 16-17:  thieves => heart
Span 12-13:  unrest. => and
Span 9-10:  up => stir-02
Span 13-14:  With => unrest
Span 24-25:  wolfish => again

 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of With in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of hearts in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of thieves in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of arrogant in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of form in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of they in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of again in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of their in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of wolfish in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of appearance in position 28
Langrangian relaxation converged after 19 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of With in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of hearts in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of thieves in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of arrogant in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of form in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of they in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of again in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of their in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of wolfish in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of appearance in position 28
Oracle Span 24-25:  again => again
Oracle Span 12-13:  and => and
Oracle Span 19-20:  and => and
Oracle Span 28-29:  appearance => appearance
Oracle Span 20-21:  arrogant => arrogance
Oracle Span 3-4:  boats => boat
Oracle Span 1-2:  bumping => bump-01
Oracle Span 6-7:  evil => evil
Oracle Span 2-3:  fishing => fish-01
Oracle Span 0-1:  Fleets => fleet
Oracle Span 21-22:  form => form
Oracle Span 8-9:  ghosts => ghost
Oracle Span 16-17:  hearts => heart
Oracle Span 7-8:  Japanese => (country :name (name :op "Japan"))
Oracle Span 5-6:  Little => little
Oracle Span 25-26:  show => show-01
Oracle Span 9-10:  stirring => stir-04
Oracle Span 23-24:  they => they
Oracle Span 18-19:  thieves => (person :ARG0-of thieve-01)
Oracle Span 11-12:  trouble => trouble
Oracle Span 13-14:  unrest => unrest
Oracle Span 27-28:  wolfish => wolfish

Dependencies:
1	Fleets	_	NNS	NNS	_	0	root	_	_
2	bumping	_	VBG	VBG	_	1	vmod	_	_
3	fishing	_	NN	NN	_	4	nn	_	_
4	boats	_	NNS	NNS	_	2	dobj	_	_
5	.	_	.	.	_	1	punct	_	_
1	Little	_	JJ	JJ	_	4	amod	_	_
2	evil	_	JJ	JJ	_	4	amod	_	_
3	Japanese	_	JJ	JJ	_	4	amod	_	_
4	ghosts	_	NNS	NNS	_	0	root	_	_
5	stirring	_	VBG	VBG	_	4	vmod	_	_
6	up	_	RP	RP	_	5	prt	_	_
7	trouble	_	NN	NN	_	5	dobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	unrest	_	NN	NN	_	7	conj	_	_
10	.	_	.	.	_	4	punct	_	_
1	With	_	IN	IN	_	11	prep	_	_
2	hearts	_	NNS	NNS	_	1	pobj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	thieves	_	NNS	NNS	_	3	pobj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	arrogant	_	JJ	JJ	_	7	amod	_	_
7	form	_	NN	NN	_	4	conj	_	_
8	,	_	,	,	_	11	punct	_	_
9	they	_	PRP	PRP	_	11	nsubj	_	_
10	again	_	RB	RB	_	11	advmod	_	_
11	show	_	VBP	VBP	_	0	root	_	_
12	their	_	PRP$	PRP$	_	14	poss	_	_
13	wolfish	_	JJ	JJ	_	14	amod	_	_
14	appearance	_	NN	NN	_	11	dobj	_	_

Oracle:
(a / and, op, t / trouble)
(a / and, op, u / unrest)
(a3 / appearance, mod, w / wolfish)
(a3 / appearance, poss, t2 / they)
(a4 / and, op, f3 / form)
(a4 / and, op, h / heart)
(b / bump-01, ARG1, b2 / boat)
(b / bump-01, ARG2, f2 / fleet)
(b2 / boat, purpose, f / fish-01)
(c / country, name, n / name)
(f3 / form, mod, a5 / arrogance)
(g / ghost, mod, c / country)
(g / ghost, mod, e / evil)
(g / ghost, mod, l / little)
(h / heart, mod, p / person)
(n / name, op, "Japan")
(s / stir-04, ARG0, g / ghost)
(s / stir-04, ARG1, a / and)
(s2 / show-01, ARG0, t2 / they)
(s2 / show-01, ARG1, a3 / appearance)
(s2 / show-01, mod, a2 / again)
(s2 / show-01, prep-with, a4 / and)
(t3 / thieve-01, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),Japanese,evil,false), Span(28,29,List(1),,apprentice-01,false), Span(21,22,List(2),again,form,false), Span(16,17,List(3),thieves,heart,false), Span(1,2,List(4),bumping,bump-01,false), Span(9,10,List(5),up,stir-02,false), Span(24,25,List(6),wolfish,again,false), Span(3,4,List(7),boats.,boat,false), Span(7,8,List(10, 9, 8),ghosts,(country :name (name :op "Japan")),false), Span(19,20,List(11),form,,and,false), Span(25,26,List(12),appearance,show-01,false), Span(11,12,List(13),and,trouble,false), Span(13,14,List(14),With,unrest,false), Span(12,13,List(15),unrest.,and,false)),Map(2 -> form, 5 -> stir-02, 12 -> show-01, 15 -> and, 8 -> country, 7 -> boat, 1 -> apprentice-01, 4 -> bump-01, 11 -> and, 14 -> unrest, 6 -> again, 0 -> evil, 9 -> name, 3 -> heart, 10 -> "Japan", 13 -> trouble),Map(e -> evil, n -> name, h -> heart, s2 -> show-01, b -> bump-01, t -> trouble, b2 -> boat, a3 -> and, s -> stir-02, a -> apprentice-01, a2 -> again, c -> country, u -> unrest, f -> form, a4 -> and))),[Ljava.lang.String;@b281e8d,Annotation([Ljava.lang.String;@2df41197,[Ljava.lang.String;@4ad28631,[Ljava.lang.String;@50149d4),Annotation([Ljava.lang.String;@4e16f38f,[Ljava.lang.String;@43632b73,[Ledu.cmu.lti.nlp.amr.Dependency;@1d5ece20),Annotation([Ljava.lang.String;@129e7bb6,[Ljava.lang.String;@6bed78e1,[Ljava.lang.String;@318fee5c),Annotation([Ljava.lang.String;@5acb1983,[Ljava.lang.String;@3b698aa7,[Ledu.cmu.lti.nlp.amr.Entity;@3bc3d75b))
AMR:
(a / apprentice-01, ARG1, b / bump-01)
(a3 / and, calendar, f / form)
(a3 / and, op, h / heart)
(a4 / and, op, t / trouble)
(a4 / and, op, u / unrest)
(b / bump-01, ARG1, b2 / boat)
(c / country, mod, e / evil)
(c / country, name, n / name)
(n / name, op, "Japan")
(s / stir-02, ARG0, t / trouble)
(s / stir-02, ARG1, b / bump-01)
(s / stir-02, ARG6, h / heart)
(s2 / show-01, ARG0, a2 / again)
(s2 / show-01, ARG1, a / apprentice-01)
(s2 / show-01, ARG6, e / evil)

Decoded in 906,268 microseconds
Sentence: Never go back to that time, our humiliating appearance when signing the treaties. China be strong, swords be sharp and knives be shining, let's bury the approaching enemies!

Oracle Span 1:  and => and
Oracle Span 2:  appearance => appear-01
Oracle Span 3:  approaching => approach-01
Oracle Span 4:  back => back
Oracle Span 5:  bury => bury-01
Oracle Span 6:  China => (country :name (name :op "China"))
Oracle Span 7:  enemies => enemy
Oracle Span 8:  go => go-01
Oracle Span 9:  humiliating => humiliate-01
Oracle Span 10:  knives => knife
Oracle Span 11:  sharp => sharp
Oracle Span 12:  shining => shine-01
Oracle Span 13:  signing => sign-02
Oracle Span 14:  strong => strong
Oracle Span 15:  swords => sword
Oracle Span 16:  that => that
Oracle Span 17:  time => time
Oracle Span 18:  treaties => treaty
NER Entity: (country :name (name :op "China"))
Spans:
Span 32-33:   => enemy
Span 29-30:   => bury-01
Span 31-32:   => approach-01
Span 19-20:  and => "Swords"
Span 26-27:  approaching => and
Span 2-3:  back => back
Span 21-22:  be => sharp
Span 17-18:  be => strong
Span 13-14:  China => treaty
Span 27-28:  enemies! => let-01
Span 1-2:  go => go-01
Span 22-23:  shining, => and
Span 15-16:  strong, => (country :name (name :op "China"))
Span 4-5:  that => that
Span 25-26:  the => shine-01
Span 11-12:  the => sign-02
Span 5-6:  time, => time
Span 9-10:  when => apprentice-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of swords in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of sharp in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of knives in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of shining in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of bury in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of approaching in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 33
Langrangian relaxation converged after 46 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of swords in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of sharp in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of knives in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of shining in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of bury in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of approaching in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 33
Oracle Span 22-23:  and => and
Oracle Span 9-10:  appearance => appear-01
Oracle Span 31-32:  approaching => approach-01
Oracle Span 2-3:  back => back
Oracle Span 29-30:  bury => bury-01
Oracle Span 15-16:  China => (country :name (name :op "China"))
Oracle Span 32-33:  enemies => enemy
Oracle Span 1-2:  go => go-01
Oracle Span 8-9:  humiliating => humiliate-01
Oracle Span 23-24:  knives => knife
Oracle Span 21-22:  sharp => sharp
Oracle Span 25-26:  shining => shine-01
Oracle Span 11-12:  signing => sign-02
Oracle Span 17-18:  strong => strong
Oracle Span 19-20:  swords => sword
Oracle Span 4-5:  that => that
Oracle Span 5-6:  time => time
Oracle Span 13-14:  treaties => treaty

Dependencies:
1	Never	_	RB	RB	_	2	neg	_	_
2	go	_	VB	VB	_	0	root	_	_
3	back	_	RP	RP	_	2	prt	_	_
4	to	_	TO	TO	_	2	prep	_	_
5	that	_	DT	DT	_	6	det	_	_
6	time	_	NN	NN	_	4	pobj	_	_
7	,	_	,	,	_	6	punct	_	_
8	our	_	PRP$	PRP$	_	10	poss	_	_
9	humiliating	_	JJ	JJ	_	10	amod	_	_
10	appearance	_	NN	NN	_	6	appos	_	_
11	when	_	WRB	WRB	_	12	advmod	_	_
12	signing	_	VBG	VBG	_	2	advcl	_	_
13	the	_	DT	DT	_	14	det	_	_
14	treaties	_	NNS	NNS	_	12	dobj	_	_
15	.	_	.	.	_	2	punct	_	_
1	China	_	NNP	NNP	_	3	nsubj	_	_
2	be	_	VB	VB	_	3	cop	_	_
3	strong	_	JJ	JJ	_	15	ccomp	_	_
4	,	_	,	,	_	3	punct	_	_
5	swords	_	RB	RB	_	7	advmod	_	_
6	be	_	VB	VB	_	7	cop	_	_
7	sharp	_	JJ	JJ	_	3	dep	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	knives	_	VBZ	VBZ	_	3	conj	_	_
10	be	_	VB	VB	_	11	aux	_	_
11	shining	_	VBG	VBG	_	9	xcomp	_	_
12	,	_	,	,	_	15	punct	_	_
13	let	_	NNP	NNP	_	15	nsubj	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	bury	_	VBP	VBP	_	0	root	_	_
16	the	_	DT	DT	_	18	det	_	_
17	approaching	_	JJ	JJ	_	18	amod	_	_
18	enemies	_	NNS	NNS	_	15	dobj	_	_
19	!	_	.	.	_	15	punct	_	_

Oracle:
(a / appear-01, time, s / sign-02)
(a / appear-01, time, t2 / time)
(a2 / and, op, s3 / sharp)
(a2 / and, op, s5 / shine-01)
(a4 / approach-01, ARG1, e2 / enemy)
(b3 / bury-01, ARG1, e2 / enemy)
(c / country, name, n / name)
(g / go-01, ARG4, t2 / time)
(g / go-01, direction, b / back)
(h / humiliate-01, ARG0, a / appear-01)
(n / name, op, "China")
(s / sign-02, ARG1, t / treaty)
(s2 / strong, domain, c / country)
(s3 / sharp, domain, s4 / sword)
(s5 / shine-01, ARG0, k / knife)
(t2 / time, mod, t3 / that)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),time,,time,false), Span(4,5,List(1),that,that,false), Span(22,23,List(2),shining,,and,false), Span(21,22,List(3),be,sharp,false), Span(26,27,List(4),approaching,and,false), Span(17,18,List(5),be,strong,false), Span(13,14,List(6),China,treaty,false), Span(32,33,List(7),,enemy,false), Span(1,2,List(8),go,go-01,false), Span(19,20,List(9),and,"Swords",false), Span(2,3,List(10),back,back,false), Span(9,10,List(11),when,apprentice-01,false), Span(25,26,List(12),the,shine-01,false), Span(29,30,List(13),,bury-01,false), Span(31,32,List(14),,approach-01,false), Span(15,16,List(17, 16, 15),strong,,(country :name (name :op "China")),false), Span(11,12,List(18),the,sign-02,false), Span(27,28,List(19),enemies!,let-01,false)),Map(2 -> and, 5 -> strong, 12 -> shine-01, 15 -> country, 8 -> go-01, 18 -> sign-02, 7 -> enemy, 17 -> "China", 1 -> that, 4 -> and, 11 -> apprentice-01, 14 -> approach-01, 6 -> treaty, 0 -> time, 9 -> "Swords", 16 -> name, 19 -> let-01, 3 -> sharp, 10 -> back, 13 -> bury-01),Map(S -> "Swords", e -> enemy, n -> name, s2 -> strong, t -> time, b -> back, b2 -> bury-01, a3 -> apprentice-01, s -> sharp, s4 -> sign-02, t3 -> treaty, g -> go-01, a -> and, t2 -> that, a2 -> and, c -> country, s3 -> shine-01, l -> let-01, a4 -> approach-01))),[Ljava.lang.String;@12c1398c,Annotation([Ljava.lang.String;@609ff4d8,[Ljava.lang.String;@73f9cc97,[Ljava.lang.String;@6181ff7e),Annotation([Ljava.lang.String;@7a17b79b,[Ljava.lang.String;@65b1b535,[Ledu.cmu.lti.nlp.amr.Dependency;@58114060),Annotation([Ljava.lang.String;@36852e13,[Ljava.lang.String;@71e9ec37,[Ljava.lang.String;@1999f722),Annotation([Ljava.lang.String;@4bd9b631,[Ljava.lang.String;@5433ecef,[Ledu.cmu.lti.nlp.amr.Entity;@6a052a0a))
AMR:
(S / "Swords", mod, b / back)
(a / and, op, s / sharp)
(a / and, op, s3 / shine-01)
(a3 / apprentice-01, ARG1, t2 / that)
(a4 / approach-01, ARG1, e / enemy)
(b2 / bury-01, ARG1, e / enemy)
(c / country, name, n / name)
(e / enemy, mod, b / back)
(g / go-01, ARG1, s2 / strong)
(g / go-01, ARG2, t / time)
(g / go-01, direction, b / back)
(l / let-01, ARG1, a2 / and)
(l / let-01, time, s4 / sign-02)
(n / name, op, "China")
(s / sharp, mod, b / back)
(s3 / shine-01, ARG1, a2 / and)
(s3 / shine-01, ARG6, c / country)
(s4 / sign-02, ARG1, t3 / treaty)
(t / time, mod, t2 / that)

Decoded in 1,835,031 microseconds
Sentence: September 11th, 2010

Oracle Span 1:  2010 => 2010
Oracle Span 2:  September => 9
Spans:
Span 3-4:   => (date-entity :year 2010)
Span 1-2:  11th, => (date-entity :day 11 :month 12)
Span 0-1:  September => (date-entity :month 9)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  2010 => 2010
Oracle Span 0-1:  September => 9

Dependencies:
1	September	_	NNP	NNP	_	2	nn	_	_
2	11th	_	NNP	NNP	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	2010	_	CD	CD	_	2	amod	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(2, 1, 0),11th,,(date-entity :day 11 :month 12),false), Span(0,1,List(4, 3),September,(date-entity :month 9),false), Span(3,4,List(6, 5),,(date-entity :year 2010),false)),Map(2 -> 12, 5 -> date-entity, 1 -> 11, 4 -> 9, 6 -> 2010, 0 -> date-entity, 3 -> date-entity),Map(2 -> 2010, 12 -> 12, d3 -> date-entity, d -> date-entity, 1 -> 11, d2 -> date-entity, 9 -> 9))),[Ljava.lang.String;@6f6740cc,Annotation([Ljava.lang.String;@188b4d15,[Ljava.lang.String;@2346e1c2,[Ljava.lang.String;@2e0a814d),Annotation([Ljava.lang.String;@7bbed560,[Ljava.lang.String;@391fdce7,[Ledu.cmu.lti.nlp.amr.Dependency;@2dc362f7),Annotation([Ljava.lang.String;@57399eeb,[Ljava.lang.String;@5aa154b9,[Ljava.lang.String;@1d9e53ee),Annotation([Ljava.lang.String;@2bfc5e70,[Ljava.lang.String;@30a94322,[Ledu.cmu.lti.nlp.amr.Entity;@607ddd12))
AMR:
(d / date-entity, calendar, d3 / date-entity)
(d / date-entity, day, 1 / 11)
(d / date-entity, month, 12 / 12)
(d / date-entity, time, d2 / date-entity)
(d2 / date-entity, month, 9 / 9)
(d3 / date-entity, year, 2 / 2010)

Decoded in 147,285 microseconds
Sentence: I agree with the analysis of the thread starter, resolutely bump up. If war really comes, I would like to be Hua Mulan, to protect our home and defend our homeland, to spread the prestige of our China, to pledge to fight to the death defending our national dignity.

Oracle Span 1:  agree => agree-01
Oracle Span 2:  analysis => analyze-01
Oracle Span 3:  and => and
Oracle Span 4:  bump => bump-02
Oracle Span 5:  China => (country :name (name :op "China"))
Oracle Span 6:  comes => come-03
Oracle Span 7:  death => die-01
Oracle Span 8:  defend => defend-01
Oracle Span 9:  defending => defend-01
Oracle Span 10:  dignity => dignity
Oracle Span 11:  fight => fight-01
Oracle Span 12:  home => home
Oracle Span 13:  homeland => homeland
Oracle Span 14:  Hua Mulan => (person :name (name :op "Mulan" :op "Hua"))
Oracle Span 15:  I => i
Oracle Span 16:  I => i
Oracle Span 17:  like => like-02
Oracle Span 18:  national => nation
Oracle Span 19:  pledge => pledge-01
Oracle Span 20:  prestige => prestige
Oracle Span 21:  protect => protect-01
Oracle Span 22:  really => really
Oracle Span 23:  resolutely => resolute
Oracle Span 24:  spread => spread-03
Oracle Span 25:  starter => (person :ARG0-of start-01)
Oracle Span 26:  thread => thread
Oracle Span 27:  up => up
Oracle Span 28:  war => war
NER Entity: (person :name (name :op "Hua" :op "Mulan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 54-55:   => dignity
Span 50-51:   => detach-01
Span 53-54:   => nation
Span 51-52:   => defend-01
Span 1-2:  agree => agree-01
Span 4-5:  analysis => ally-01
Span 10-11:  bump => w
Span 37-38:  China, => spread-03
Span 15-16:  comes, => war-01
Span 28-29:  defend => protect-01
Span 45-46:  defending => pledge-01
Span 30-31:  homeland, => home
Span 21-22:  Hua => like-02
Span 0-1:  I => i
Span 47-48:  national => fight-01
Span 39-40:  pledge => prestige
Span 34-35:  prestige => homeland
Span 24-26:  protect our => (person :name (name :op "Hua" :op "Mulan"))
Span 32-33:  spread => defend-01
Span 8-9:  starter, => (person :ARG0-of start-01)
Span 7-8:  thread => thread
Span 31-32:  to => and
Span 42-43:  to => (country :name (name :op "China"))
Span 11-12:  up. => bump-01
Span 17-18:  would => come-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of pledge in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of fight in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of death in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of defending in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of dignity in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 55
Langrangian relaxation converged after 67 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of pledge in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of fight in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of death in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of defending in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of dignity in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 55
Oracle Span 1-2:  agree => agree-01
Oracle Span 4-5:  analysis => analyze-01
Oracle Span 31-32:  and => and
Oracle Span 11-12:  bump => bump-02
Oracle Span 42-43:  China => (country :name (name :op "China"))
Oracle Span 17-18:  comes => come-03
Oracle Span 50-51:  death => die-01
Oracle Span 32-33:  defend => defend-01
Oracle Span 51-52:  defending => defend-01
Oracle Span 54-55:  dignity => dignity
Oracle Span 47-48:  fight => fight-01
Oracle Span 30-31:  home => home
Oracle Span 34-35:  homeland => homeland
Oracle Span 24-26:  Hua Mulan => (person :name (name :op "Mulan" :op "Hua"))
Oracle Span 0-1:  I => i
Oracle Span 19-20:  I => i
Oracle Span 21-22:  like => like-02
Oracle Span 53-54:  national => nation
Oracle Span 45-46:  pledge => pledge-01
Oracle Span 39-40:  prestige => prestige
Oracle Span 28-29:  protect => protect-01
Oracle Span 16-17:  really => really
Oracle Span 10-11:  resolutely => resolute
Oracle Span 37-38:  spread => spread-03
Oracle Span 8-9:  starter => (person :ARG0-of start-01)
Oracle Span 7-8:  thread => thread
Oracle Span 12-13:  up => up
Oracle Span 15-16:  war => war

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	agree	_	VBP	VBP	_	12	ccomp	_	_
3	with	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	analysis	_	NN	NN	_	3	pobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	9	det	_	_
8	thread	_	NN	NN	_	9	nn	_	_
9	starter	_	NN	NN	_	6	pobj	_	_
10	,	_	,	,	_	12	punct	_	_
11	resolutely	_	RB	RB	_	12	advmod	_	_
12	bump	_	VB	VB	_	0	root	_	_
13	up	_	RP	RP	_	12	prt	_	_
14	.	_	.	.	_	12	punct	_	_
1	If	_	IN	IN	_	4	mark	_	_
2	war	_	NN	NN	_	4	nsubj	_	_
3	really	_	RB	RB	_	4	advmod	_	_
4	comes	_	VBZ	VBZ	_	8	advcl	_	_
5	,	_	,	,	_	8	punct	_	_
6	I	_	PRP	PRP	_	8	nsubj	_	_
7	would	_	MD	MD	_	8	aux	_	_
8	like	_	VB	VB	_	0	root	_	_
9	to	_	TO	TO	_	12	aux	_	_
10	be	_	VB	VB	_	12	cop	_	_
11	Hua	_	NNP	NNP	_	12	nn	_	_
12	Mulan	_	NNP	NNP	_	8	ccomp	_	_
13	,	_	,	,	_	12	punct	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	protect	_	VB	VB	_	12	dep	_	_
16	our	_	PRP$	PRP$	_	17	poss	_	_
17	home	_	NN	NN	_	15	dobj	_	_
18	and	_	CC	CC	_	15	cc	_	_
19	defend	_	VB	VB	_	15	conj	_	_
20	our	_	PRP$	PRP$	_	21	poss	_	_
21	homeland	_	NN	NN	_	19	dobj	_	_
22	,	_	,	,	_	12	punct	_	_
23	to	_	TO	TO	_	24	aux	_	_
24	spread	_	VB	VB	_	12	dep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	prestige	_	NN	NN	_	24	dobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	our	_	PRP$	PRP$	_	29	poss	_	_
29	China	_	NNP	NNP	_	27	pobj	_	_
30	,	_	,	,	_	24	punct	_	_
31	to	_	TO	TO	_	24	prep	_	_
32	pledge	_	NN	NN	_	31	pobj	_	_
33	to	_	TO	TO	_	34	aux	_	_
34	fight	_	VB	VB	_	32	vmod	_	_
35	to	_	TO	TO	_	34	prep	_	_
36	the	_	DT	DT	_	37	det	_	_
37	death	_	NN	NN	_	35	pobj	_	_
38	defending	_	VBG	VBG	_	37	vmod	_	_
39	our	_	PRP$	PRP$	_	41	poss	_	_
40	national	_	JJ	JJ	_	41	amod	_	_
41	dignity	_	NN	NN	_	38	dobj	_	_
42	.	_	.	.	_	8	punct	_	_

Oracle:
(a2 / agree-01, ARG0, i2 / i)
(a2 / agree-01, ARG1, a3 / analyze-01)
(a3 / analyze-01, ARG0, p / person)
(a4 / and, op, p4 / pledge-01)
(a4 / and, op, s2 / spread-03)
(b / bump-02, ARG5, u / up)
(b / bump-02, manner, r / resolute)
(c / come-03, ARG1, w / war)
(c / come-03, mod, r2 / really)
(c2 / country, name, n2 / name)
(d / die-01, ARG1, i / i)
(d2 / defend-01, ARG0, i / i)
(d2 / defend-01, ARG1, h2 / homeland)
(d4 / defend-01, ARG1, d5 / dignity)
(d5 / dignity, mod, n3 / nation)
(f / fight-01, degree, d / die-01)
(f / fight-01, purpose, d4 / defend-01)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, p2 / person)
(l / like-02, condition, c / come-03)
(n / name, op, "Hua")
(n / name, op, "Mulan")
(n2 / name, op, "China")
(p2 / person, domain, i / i)
(p2 / person, name, n / name)
(p2 / person, purpose, a4 / and)
(p3 / protect-01, ARG0, i / i)
(p3 / protect-01, ARG1, h / home)
(p4 / pledge-01, ARG0, i / i)
(p4 / pledge-01, ARG2, f / fight-01)
(p5 / prestige, poss, c2 / country)
(s / start-01, ARG0, p / person)
(s / start-01, ARG1, t / thread)
(s2 / spread-03, ARG0, i / i)
(s2 / spread-03, ARG1, p5 / prestige)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),would,come-01,false), Span(54,55,List(1),,dignity,false), Span(4,5,List(2),analysis,ally-01,false), Span(15,16,List(3),comes,,war-01,false), Span(31,32,List(4),to,and,false), Span(11,12,List(5),up.,bump-01,false), Span(1,2,List(6),agree,agree-01,false), Span(0,1,List(7),I,i,false), Span(21,22,List(8),Hua,like-02,false), Span(28,29,List(9),defend,protect-01,false), Span(37,38,List(10),China,,spread-03,false), Span(45,46,List(11),defending,pledge-01,false), Span(24,26,List(15, 14, 13, 12),protect our,(person :name (name :op "Hua" :op "Mulan")),false), Span(50,51,List(16),,detach-01,false), Span(42,43,List(19, 18, 17),to,(country :name (name :op "China")),false), Span(47,48,List(20),national,fight-01,false), Span(8,9,List(22, 21),starter,,(person :ARG0-of start-01),false), Span(7,8,List(23),thread,thread,false), Span(53,54,List(24),,nation,false), Span(34,35,List(25),prestige,homeland,false), Span(32,33,List(26),spread,defend-01,false), Span(39,40,List(27),pledge,prestige,false), Span(51,52,List(28),,defend-01,false), Span(10,11,List(29),bump,w,false), Span(30,31,List(30),homeland,,home,false)),Map(30 -> home, 2 -> ally-01, 5 -> bump-01, 27 -> prestige, 12 -> person, 8 -> like-02, 15 -> "Mulan", 21 -> person, 18 -> name, 24 -> nation, 7 -> i, 1 -> dignity, 17 -> country, 23 -> thread, 26 -> defend-01, 4 -> and, 11 -> pledge-01, 14 -> "Hua", 29 -> w, 20 -> fight-01, 28 -> defend-01, 6 -> agree-01, 9 -> protect-01, 0 -> come-01, 22 -> start-01, 16 -> detach-01, 19 -> "China", 10 -> spread-03, 3 -> war-01, 25 -> homeland, 13 -> name),Map(w -> war-01, n -> name, h -> homeland, h2 -> home, s2 -> start-01, p5 -> prestige, t -> thread, b -> bump-01, d3 -> defend-01, p2 -> pledge-01, a3 -> agree-01, s -> spread-03, d -> dignity, p -> protect-01, a -> ally-01, n3 -> nation, p4 -> person, d2 -> detach-01, w2 -> w, i -> i, a2 -> and, c -> come-01, l -> like-02, d4 -> defend-01, f -> fight-01, p3 -> person, c2 -> country, n2 -> name))),[Ljava.lang.String;@507d680f,Annotation([Ljava.lang.String;@2a22fed,[Ljava.lang.String;@9d96faa,[Ljava.lang.String;@243748),Annotation([Ljava.lang.String;@3ba20a53,[Ljava.lang.String;@28ec978d,[Ledu.cmu.lti.nlp.amr.Dependency;@6a8a1905),Annotation([Ljava.lang.String;@4bb5fd6b,[Ljava.lang.String;@606e86dc,[Ljava.lang.String;@2cf235a3),Annotation([Ljava.lang.String;@168a4309,[Ljava.lang.String;@72b0ba16,[Ledu.cmu.lti.nlp.amr.Entity;@667c8afa))
AMR:
(a / ally-01, ARG1, p4 / person)
(a2 / and, op, d3 / defend-01)
(a2 / and, op, h2 / home)
(a3 / agree-01, ARG0, i / i)
(a3 / agree-01, ARG1, a / ally-01)
(b / bump-01, ARG1, a3 / agree-01)
(b / bump-01, manner, w2 / w)
(c / come-01, ARG1, w / war-01)
(c / come-01, ARG6, b / bump-01)
(c2 / country, name, n2 / name)
(d2 / detach-01, ARG1, n3 / nation)
(d3 / defend-01, ARG1, h / homeland)
(d4 / defend-01, ARG0, d / dignity)
(d4 / defend-01, ARG1, d2 / detach-01)
(f / fight-01, ARG1, d2 / detach-01)
(l / like-02, ARG1, b / bump-01)
(n / name, op, "Hua")
(n / name, op, "Mulan")
(n2 / name, op, "China")
(p / protect-01, ARG1, a2 / and)
(p / protect-01, ARG6, p3 / person)
(p2 / pledge-01, ARG0, c2 / country)
(p2 / pledge-01, ARG1, f / fight-01)
(p3 / person, name, n / name)
(p5 / prestige, topic, c2 / country)
(s / spread-03, ARG1, p5 / prestige)
(s / spread-03, ARG6, h / homeland)
(s2 / start-01, ARG0, p4 / person)
(s2 / start-01, ARG1, t / thread)
(w / war-01, ARG1, s / spread-03)

Decoded in 4,706,393 microseconds
Sentence: I very much wish I had been born in those passionate and upsurging times of Mao Zedong, the Long March, losing my head and shedding my blood, completely extinguishing all the enemies that wrong China, spreading our dragon prestige!

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  blood => blood
Oracle Span 4:  born => bear-02
Oracle Span 5:  China => (country :name (name :op "China"))
Oracle Span 6:  completely => complete
Oracle Span 7:  dragon => dragon
Oracle Span 8:  enemies => enemy
Oracle Span 9:  extinguishing => extinguish-01
Oracle Span 10:  head => head
Oracle Span 11:  I => i
Oracle Span 12:  Long March => (event :name (name :op "March" :op "Long"))
Oracle Span 13:  losing => lose-02
Oracle Span 14:  Mao Zedong => (person :name (name :op "Zedong" :op "Mao"))
Oracle Span 15:  much => much
Oracle Span 16:  passionate => passionate
Oracle Span 17:  prestige => prestige
Oracle Span 18:  shedding => shed-00
Oracle Span 19:  spreading => spread-03
Oracle Span 20:  that => that
Oracle Span 21:  upsurging => upsurge-00
Oracle Span 22:  very => very
Oracle Span 23:  wish => wish-01
Oracle Span 24:  wrong => wrong-01
NER Entity: (person :name (name :op "Mao" :op "Zedong"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 41-42:   => dragon
Span 42-43:   => prestige
Span 39-40:   => spread-01
Span 11-12:  and => and
Span 7-8:  born => bear-02
Span 34-35:  China, => enemy
Span 37-38:  dragon => (country :name (name :op "China"))
Span 31-32:  enemies => extinguish-01
Span 28-29:  extinguishing => blood
Span 22-23:  head => lose-02
Span 0-1:  I => i
Span 0-21:  I very much wish I had been born in those passionate and upsurging times of Mao Zedong, the Long March, losing => (date-entity :month 3)
Span 15-17:  Mao Zedong, => (person :name (name :op "Mao" :op "Zedong"))
Span 2-3:  much => much
Span 25-26:  my => and
Span 36-37:  our => wrong-01
Span 24-25:  shedding => head-01
Span 32-33:  that => all
Span 30-31:  the => complete
Span 1-2:  very => very
Span 3-4:  wish => wish-01

Langrangian relaxation converged after 73 iterations. Delta = 0.0
Oracle Span 32-33:  all => all
Oracle Span 11-12:  and => and
Oracle Span 28-29:  blood => blood
Oracle Span 7-8:  born => bear-02
Oracle Span 37-38:  China => (country :name (name :op "China"))
Oracle Span 30-31:  completely => complete
Oracle Span 41-42:  dragon => dragon
Oracle Span 34-35:  enemies => enemy
Oracle Span 31-32:  extinguishing => extinguish-01
Oracle Span 24-25:  head => head
Oracle Span 0-1:  I => i
Oracle Span 19-21:  Long March => (event :name (name :op "March" :op "Long"))
Oracle Span 22-23:  losing => lose-02
Oracle Span 15-17:  Mao Zedong => (person :name (name :op "Zedong" :op "Mao"))
Oracle Span 2-3:  much => much
Oracle Span 10-11:  passionate => passionate
Oracle Span 42-43:  prestige => prestige
Oracle Span 26-27:  shedding => shed-00
Oracle Span 39-40:  spreading => spread-03
Oracle Span 35-36:  that => that
Oracle Span 12-13:  upsurging => upsurge-00
Oracle Span 1-2:  very => very
Oracle Span 3-4:  wish => wish-01
Oracle Span 36-37:  wrong => wrong-01

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	very	_	RB	RB	_	3	advmod	_	_
3	much	_	RB	RB	_	4	advmod	_	_
4	wish	_	VBP	VBP	_	0	root	_	_
5	I	_	PRP	PRP	_	8	nsubjpass	_	_
6	had	_	VBD	VBD	_	8	aux	_	_
7	been	_	VBN	VBN	_	8	auxpass	_	_
8	born	_	VBN	VBN	_	4	ccomp	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	those	_	DT	DT	_	14	det	_	_
11	passionate	_	JJ	JJ	_	14	amod	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	upsurging	_	JJ	JJ	_	11	conj	_	_
14	times	_	NNS	NNS	_	9	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	Mao	_	NNP	NNP	_	17	nn	_	_
17	Zedong	_	NNP	NNP	_	15	pobj	_	_
18	,	_	,	,	_	17	punct	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Long	_	NNP	NNP	_	21	nn	_	_
21	March	_	NNP	NNP	_	17	appos	_	_
22	,	_	,	,	_	17	punct	_	_
23	losing	_	VBG	VBG	_	8	ccomp	_	_
24	my	_	PRP$	PRP$	_	25	poss	_	_
25	head	_	NN	NN	_	23	dobj	_	_
26	and	_	CC	CC	_	23	cc	_	_
27	shedding	_	VBG	VBG	_	23	conj	_	_
28	my	_	PRP$	PRP$	_	29	poss	_	_
29	blood	_	NN	NN	_	27	dobj	_	_
30	,	_	,	,	_	23	punct	_	_
31	completely	_	RB	RB	_	32	advmod	_	_
32	extinguishing	_	VBG	VBG	_	23	dep	_	_
33	all	_	PDT	PDT	_	35	predet	_	_
34	the	_	DT	DT	_	35	det	_	_
35	enemies	_	NNS	NNS	_	32	dobj	_	_
36	that	_	IN	IN	_	35	prep	_	_
37	wrong	_	JJ	JJ	_	38	amod	_	_
38	China	_	NNP	NNP	_	36	pobj	_	_
39	,	_	,	,	_	23	punct	_	_
40	spreading	_	VBG	VBG	_	23	dep	_	_
41	our	_	PRP$	PRP$	_	42	poss	_	_
42	dragon	_	NN	NN	_	40	dobj	_	_
43	prestige	_	NN	NN	_	23	dobj	_	_
44	!	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, e2 / extinguish-01)
(a / and, op, l / lose-02)
(a / and, op, s / shed-00)
(a / and, op, s2 / spread-03)
(b / bear-02, ARG1, i / i)
(b / bear-02, purpose, a / and)
(b / bear-02, time, e / event)
(c2 / country, name, n3 / name)
(e / event, mod, p2 / passionate)
(e / event, mod, t3 / that)
(e / event, name, n2 / name)
(e / event, poss, p / person)
(e2 / extinguish-01, ARG0, i / i)
(e2 / extinguish-01, ARG1, e3 / enemy)
(e2 / extinguish-01, degree, c / complete)
(e3 / enemy, quant, a3 / all)
(i / i, part, b2 / blood)
(i / i, part, h / head)
(l / lose-02, ARG0, i / i)
(l / lose-02, ARG1, h / head)
(m / much, degree, v / very)
(n / name, op, "Mao")
(n / name, op, "Zedong")
(n2 / name, op, "Long")
(n2 / name, op, "March")
(n3 / name, op, "China")
(p / person, name, n / name)
(p3 / prestige, mod, d / dragon)
(s / shed-00, ARG0, i / i)
(s / shed-00, ARG1, b2 / blood)
(s2 / spread-03, ARG0, i / i)
(s2 / spread-03, ARG1, p3 / prestige)
(u / upsurge-00, ARG1, e / event)
(w / wish-01, ARG0, i / i)
(w / wish-01, ARG1, b / bear-02)
(w / wish-01, degree, m / much)
(w2 / wrong-01, ARG0, e3 / enemy)
(w2 / wrong-01, ARG1, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(15,17,List(3, 2, 1, 0),Mao Zedong,,(person :name (name :op "Mao" :op "Zedong")),false), Span(31,32,List(4),enemies,extinguish-01,false), Span(11,12,List(5),and,and,false), Span(2,3,List(6),much,much,false), Span(3,4,List(7),wish,wish-01,false), Span(28,29,List(8),extinguishing,blood,false), Span(7,8,List(9),born,bear-02,false), Span(24,25,List(10),shedding,head-01,false), Span(41,42,List(11),,dragon,false), Span(0,21,List(13, 12),I very much wish I had been born in those passionate and upsurging times of Mao Zedong, the Long March, losing,(date-entity :month 3),false), Span(0,1,List(14),I,i,false), Span(1,2,List(15),very,very,false), Span(42,43,List(16),,prestige,false), Span(25,26,List(17),my,and,false), Span(32,33,List(18),that,all,false), Span(36,37,List(19),our,wrong-01,false), Span(37,38,List(22, 21, 20),dragon,(country :name (name :op "China")),false), Span(34,35,List(23),China,,enemy,false), Span(30,31,List(24),the,complete,false), Span(39,40,List(25),,spread-01,false), Span(22,23,List(26),head,lose-02,false)),Map(2 -> "Mao", 5 -> and, 12 -> date-entity, 8 -> blood, 15 -> very, 21 -> name, 18 -> all, 24 -> complete, 7 -> wish-01, 1 -> name, 17 -> and, 23 -> enemy, 26 -> lose-02, 4 -> extinguish-01, 11 -> dragon, 14 -> i, 20 -> country, 6 -> much, 9 -> bear-02, 0 -> person, 22 -> "China", 16 -> prestige, 19 -> wrong-01, 10 -> head-01, 3 -> "Zedong", 25 -> spread-01, 13 -> 3),Map(e -> extinguish-01, n -> name, w -> wish-01, h -> head-01, b -> blood, b2 -> bear-02, e2 -> enemy, p2 -> prestige, a3 -> all, s -> spread-01, v -> very, m -> much, d -> dragon, p -> person, a -> and, d2 -> date-entity, w2 -> wrong-01, a2 -> and, i -> i, c -> country, l -> lose-02, 3 -> 3, c2 -> complete, n2 -> name))),[Ljava.lang.String;@6b18c410,Annotation([Ljava.lang.String;@28a848aa,[Ljava.lang.String;@4f85bb83,[Ljava.lang.String;@12349b05),Annotation([Ljava.lang.String;@3f21e517,[Ljava.lang.String;@55261741,[Ledu.cmu.lti.nlp.amr.Dependency;@371df7c5),Annotation([Ljava.lang.String;@147be90,[Ljava.lang.String;@317eeaf2,[Ljava.lang.String;@54076f83),Annotation([Ljava.lang.String;@cfc0919,[Ljava.lang.String;@30739528,[Ledu.cmu.lti.nlp.amr.Entity;@769cd0ae))
AMR:
(a / and, op, p / person)
(a2 / and, op, d2 / date-entity)
(a2 / and, op, l / lose-02)
(a2 / and, op, p2 / prestige)
(a3 / all, op, e / extinguish-01)
(b2 / bear-02, ARG1, a2 / and)
(c / country, name, n2 / name)
(d2 / date-entity, month, 3 / 3)
(e / extinguish-01, ARG1, e2 / enemy)
(e / extinguish-01, location, c / country)
(e / extinguish-01, manner, c2 / complete)
(h / head-01, ARG0, p / person)
(h / head-01, ARG1, e / extinguish-01)
(l / lose-02, ARG2, h / head-01)
(l / lose-02, ARG6, b / blood)
(m / much, degree, v / very)
(n / name, op, "Mao")
(n / name, op, "Zedong")
(n2 / name, op, "China")
(p / person, name, n / name)
(s / spread-01, ARG1, d / dragon)
(s / spread-01, ARG6, p2 / prestige)
(w / wish-01, ARG0, i / i)
(w / wish-01, ARG1, b2 / bear-02)
(w / wish-01, degree, m / much)
(w2 / wrong-01, ARG1, c / country)

Decoded in 4,156,953 microseconds
Sentence: How Long are We Going to Tolerate Japan?

Oracle Span 1:  Japan => (country :name (name :op "Japan"))
Oracle Span 2:  Tolerate => tolerate-01
Oracle Span 3:  We => we
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 4-5:  Going => go-02
Span 7-8:  Japan? => (country :name (name :op "Japan"))
Span 1-2:  Long => long
Span 6-7:  Tolerate => tolerate-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 7-8:  Japan => (country :name (name :op "Japan"))
Oracle Span 6-7:  Tolerate => tolerate-01
Oracle Span 3-4:  We => we

Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	Long	_	JJ	JJ	_	5	dep	_	_
3	are	_	VBP	VBP	_	5	aux	_	_
4	We	_	PRP	PRP	_	5	nsubj	_	_
5	Going	_	VBG	VBG	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	Tolerate	_	NNP	NNP	_	8	nn	_	_
8	Japan	_	NNP	NNP	_	6	pobj	_	_
9	?	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Japan")
(t / tolerate-01, ARG0, w / we)
(t / tolerate-01, ARG1, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),Long,long,false), Span(7,8,List(3, 2, 1),Japan?,(country :name (name :op "Japan")),false), Span(4,5,List(4),Going,go-02,false), Span(6,7,List(5),Tolerate,tolerate-01,false)),Map(2 -> name, 5 -> tolerate-01, 1 -> country, 4 -> go-02, 0 -> long, 3 -> "Japan"),Map(n -> name, t -> tolerate-01, g -> go-02, c -> country, l -> long))),[Ljava.lang.String;@2a3f77db,Annotation([Ljava.lang.String;@15a7cad9,[Ljava.lang.String;@285e9436,[Ljava.lang.String;@e34e22a),Annotation([Ljava.lang.String;@5f64cd98,[Ljava.lang.String;@74be25af,[Ledu.cmu.lti.nlp.amr.Dependency;@281de02a),Annotation([Ljava.lang.String;@19162b1,[Ljava.lang.String;@78606716,[Ljava.lang.String;@7df6b6e8),Annotation([Ljava.lang.String;@3aad05cc,[Ljava.lang.String;@30a37cc2,[Ledu.cmu.lti.nlp.amr.Entity;@4b00f517))
AMR:
(c / country, name, n / name)
(g / go-02, ARG1, c / country)
(g / go-02, ARG6, l / long)
(n / name, op, "Japan")
(t / tolerate-01, ARG1, c / country)

Decoded in 168,262 microseconds
Sentence: My fellow citizens:

Oracle Span 1:  citizens => citizen
Oracle Span 2:  fellow => fellow
Spans:
Span 2-3:  citizens: => citizen
Span 1-2:  fellow => fellow

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  citizens => citizen
Oracle Span 1-2:  fellow => fellow

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	0	root	_	_
4	:	_	:	:	_	3	punct	_	_

Oracle:
(c / citizen, mod, f / fellow)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),citizens:,citizen,false), Span(1,2,List(1),fellow,fellow,false)),Map(1 -> fellow, 0 -> citizen),Map(c -> citizen, f -> fellow))),[Ljava.lang.String;@59a23e50,Annotation([Ljava.lang.String;@3e48e18,[Ljava.lang.String;@413b2bac,[Ljava.lang.String;@2c9e0cc7),Annotation([Ljava.lang.String;@6486e7ba,[Ljava.lang.String;@4335317c,[Ledu.cmu.lti.nlp.amr.Dependency;@5bcb14fd),Annotation([Ljava.lang.String;@7efc377,[Ljava.lang.String;@54074f07,[Ljava.lang.String;@3e532a2a),Annotation([Ljava.lang.String;@3dbcade1,[Ljava.lang.String;@4431255a,[Ledu.cmu.lti.nlp.amr.Entity;@2a2025ac))
AMR:
(c / citizen, mod, f / fellow)

Decoded in 35,935 microseconds
Sentence: Hello, everyone! We all know the "September 18th" Incident, but now Japan again has a premeditated plan for another "September 18th" on the sea, another "Lugou Bridge on the sea".

Oracle Span 1:  again => again
Oracle Span 2:  all => all
Oracle Span 3:  another => another
Oracle Span 4:  another => another
Oracle Span 5:  everyone => everyone
Oracle Span 6:  has => have-concession-91
Oracle Span 7:  Hello => hello
Oracle Span 8:  Incident => incident
Oracle Span 9:  Japan => (country :name (name :op "Japan"))
Oracle Span 10:  know => know-01
Oracle Span 11:  Lugou Bridge => (incident :name (name :op "Bridge" :op "Lugou"))
Oracle Span 12:  now => now
Oracle Span 13:  plan => plan-01
Oracle Span 14:  premeditated => premeditate-01
Oracle Span 15:  sea => sea
Oracle Span 16:  sea => sea
Oracle Span 17:  September 18th => (incident :name (name :op "18th" :op "September"))
Oracle Span 18:  We => we
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Lugou" :op "Bridge"))
Spans:
Span 38-39:   => sea
Span 30-31:   => sea
Span 32-33:   => another
Span 6-7:  "September => know-01
Span 14-15:  a => bunt-01
Span 12-13:  again => (have-condition-91 :ARG2 do-02)
Span 17-18:  for => again
Span 0-1:  Hello, => heel-01
Span 0-10:  Hello, everyone! We all know the "September 18th" Incident, but => (date-entity :month 9 :day 18)
Span 0-16:  Hello, everyone! We all know the "September 18th" Incident, but now Japan again has a premeditated => (date-entity :time now)
Span 0-26:  Hello, everyone! We all know the "September 18th" Incident, but now Japan again has a premeditated plan for another "September 18th" on the sea, another "Lugou => (date-entity :month 9 :day 18)
Span 21-22:  on => plan-01
Span 16-17:  plan => (country :name (name :op "Japan"))
Span 23-24:  sea, => another
Span 5-6:  the => all
Span 2-3:  We => everyone

 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of sea in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 40
Langrangian relaxation converged after 61 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of sea in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 40
Oracle Span 17-18:  again => again
Oracle Span 5-6:  all => all
Oracle Span 23-24:  another => another
Oracle Span 32-33:  another => another
Oracle Span 2-3:  everyone => everyone
Oracle Span 18-19:  has => have-concession-91
Oracle Span 0-1:  Hello => hello
Oracle Span 12-13:  Incident => incident
Oracle Span 16-17:  Japan => (country :name (name :op "Japan"))
Oracle Span 6-7:  know => know-01
Oracle Span 34-36:  Lugou Bridge => (incident :name (name :op "Bridge" :op "Lugou"))
Oracle Span 15-16:  now => now
Oracle Span 21-22:  plan => plan-01
Oracle Span 20-21:  premeditated => premeditate-01
Oracle Span 30-31:  sea => sea
Oracle Span 38-39:  sea => sea
Oracle Span 9-11:  September 18th => (incident :name (name :op "18th" :op "September"))
Oracle Span 4-5:  We => we

Dependencies:
1	Hello	_	UH	UH	_	3	discourse	_	_
2	,	_	,	,	_	3	punct	_	_
3	everyone	_	NN	NN	_	0	root	_	_
4	!	_	.	.	_	3	punct	_	_
1	We	_	PRP	PRP	_	3	nsubj	_	_
2	all	_	DT	DT	_	3	advmod	_	_
3	know	_	VBP	VBP	_	0	root	_	_
4	the	_	DT	DT	_	9	det	_	_
5	"	_	``	``	_	9	punct	_	_
6	September	_	NNP	NNP	_	9	nn	_	_
7	18th	_	NNPS	NNPS	_	9	nn	_	_
8	"	_	''	''	_	9	punct	_	_
9	Incident	_	NN	NN	_	3	dobj	_	_
10	,	_	,	,	_	3	punct	_	_
11	but	_	CC	CC	_	3	cc	_	_
12	now	_	RB	RB	_	15	advmod	_	_
13	Japan	_	NNP	NNP	_	15	nsubj	_	_
14	again	_	RB	RB	_	15	advmod	_	_
15	has	_	VBZ	VBZ	_	3	conj	_	_
16	a	_	DT	DT	_	18	det	_	_
17	premeditated	_	JJ	JJ	_	18	amod	_	_
18	plan	_	NN	NN	_	15	dobj	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	another	_	DT	DT	_	23	det	_	_
21	"	_	``	``	_	23	punct	_	_
22	September	_	NNP	NNP	_	23	nn	_	_
23	18th	_	NNP	NNP	_	19	pobj	_	_
24	"	_	''	''	_	23	punct	_	_
25	on	_	IN	IN	_	18	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	sea	_	NN	NN	_	25	pobj	_	_
28	,	_	,	,	_	27	punct	_	_
29	another	_	DT	DT	_	32	det	_	_
30	"	_	``	``	_	32	punct	_	_
31	Lugou	_	NNP	NNP	_	32	nn	_	_
32	Bridge	_	NNP	NNP	_	27	appos	_	_
33	on	_	IN	IN	_	32	prep	_	_
34	the	_	DT	DT	_	35	det	_	_
35	sea	_	NN	NN	_	33	pobj	_	_
36	"	_	''	''	_	15	punct	_	_
37	.	_	.	.	_	3	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(h / have-concession-91, ARG1, p2 / plan-01)
(h / have-concession-91, ARG2, k / know-01)
(i / incident, name, n / name)
(i2 / incident, location, s / sea)
(i2 / incident, mod, a3 / another)
(i2 / incident, name, n / name)
(i3 / incident, location, s2 / sea)
(i3 / incident, mod, a4 / another)
(i3 / incident, name, n5 / name)
(k / know-01, ARG0, w / we)
(k / know-01, ARG1, i / incident)
(n / name, op, "18th")
(n / name, op, "September")
(n2 / name, op, "Japan")
(n5 / name, op, "Bridge")
(n5 / name, op, "Lugou")
(p / premeditate-01, ARG1, p2 / plan-01)
(p2 / plan-01, ARG0, c2 / country)
(p2 / plan-01, ARG1, i2 / incident)
(p2 / plan-01, mod, a2 / again)
(p2 / plan-01, time, n3 / now)
(w / we, mod, a / all)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Hello,,heel-01,false), Span(2,3,List(1),We,everyone,false), Span(6,7,List(2),"September,know-01,false), Span(38,39,List(3),,sea,false), Span(0,26,List(6, 5, 4),Hello, everyone! We all know the "September 18th" Incident, but now Japan again has a premeditated plan for another "September 18th" on the sea, another "Lugou,(date-entity :month 9 :day 18),false), Span(14,15,List(7),a,bunt-01,false), Span(16,17,List(10, 9, 8),plan,(country :name (name :op "Japan")),false), Span(23,24,List(11),sea,,another,false), Span(5,6,List(12),the,all,false), Span(0,16,List(14, 13),Hello, everyone! We all know the "September 18th" Incident, but now Japan again has a premeditated,(date-entity :time now),false), Span(21,22,List(15),on,plan-01,false), Span(30,31,List(16),,sea,false), Span(0,10,List(19, 18, 17),Hello, everyone! We all know the "September 18th" Incident, but,(date-entity :month 9 :day 18),false), Span(12,13,List(21, 20),again,(have-condition-91 :ARG2 do-02),false), Span(32,33,List(22),,another,false), Span(17,18,List(23),for,again,false)),Map(2 -> know-01, 5 -> 9, 12 -> all, 15 -> plan-01, 8 -> country, 21 -> do-02, 18 -> 9, 7 -> bunt-01, 17 -> date-entity, 1 -> everyone, 23 -> again, 4 -> date-entity, 11 -> another, 14 -> now, 20 -> have-condition-91, 6 -> 18, 22 -> another, 0 -> heel-01, 9 -> name, 16 -> sea, 19 -> 18, 3 -> sea, 10 -> "Japan", 13 -> date-entity),Map(e -> everyone, n -> name, h -> heel-01, h2 -> have-condition-91, s2 -> sea, 12 -> 18, k -> know-01, b -> bunt-01, d3 -> date-entity, 92 -> 9, a3 -> another, s -> sea, d -> date-entity, 1 -> 18, p -> plan-01, a -> another, d2 -> date-entity, a2 -> all, c -> country, d4 -> do-02, 9 -> 9, n2 -> now, a4 -> again))),[Ljava.lang.String;@ccd9067,Annotation([Ljava.lang.String;@15867bcf,[Ljava.lang.String;@cdc50b,[Ljava.lang.String;@663b2dcf),Annotation([Ljava.lang.String;@615d7c7,[Ljava.lang.String;@206b9cc9,[Ledu.cmu.lti.nlp.amr.Dependency;@4e60f052),Annotation([Ljava.lang.String;@710af904,[Ljava.lang.String;@5989b30d,[Ljava.lang.String;@25f8e121),Annotation([Ljava.lang.String;@6c5377ac,[Ljava.lang.String;@4ab771fb,[Ledu.cmu.lti.nlp.amr.Entity;@5eb2a27b))
AMR:
(b / bunt-01, ARG0, a4 / again)
(b / bunt-01, ARG2, h2 / have-condition-91)
(b / bunt-01, ARG6, c / country)
(c / country, calendar, d2 / date-entity)
(c / country, name, n / name)
(d / date-entity, day, 1 / 18)
(d / date-entity, month, 9 / 9)
(d2 / date-entity, time, n2 / now)
(d3 / date-entity, day, 12 / 18)
(d3 / date-entity, month, 92 / 9)
(h / heel-01, ARG1, d / date-entity)
(h / heel-01, ARG6, e / everyone)
(h2 / have-condition-91, ARG1, e / everyone)
(h2 / have-condition-91, ARG2, d4 / do-02)
(h2 / have-condition-91, ARG6, d3 / date-entity)
(k / know-01, ARG0, s2 / sea)
(k / know-01, ARG1, e / everyone)
(k / know-01, ARG6, a2 / all)
(n / name, op, "Japan")
(p / plan-01, ARG0, s / sea)
(p / plan-01, ARG1, d / date-entity)
(p / plan-01, ARG6, a / another)
(s2 / sea, calendar, a3 / another)

Decoded in 30,775,729 microseconds
Sentence: Japan surprisingly defied the strong condemnation of the whole world, openly invaded our country's sacred territory, "the Diaoyu Islands".

Oracle Span 1:  condemnation => condemn-01
Oracle Span 2:  country => country
Oracle Span 3:  defied => defy-01
Oracle Span 4:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Oracle Span 5:  invaded => invade-01
Oracle Span 6:  Japan => (name :op "Japan")
Oracle Span 7:  openly => open
Oracle Span 8:  sacred => sacred
Oracle Span 9:  strong => strong
Oracle Span 10:  surprisingly => surprise-01
Oracle Span 11:  territory => territory
Oracle Span 12:  whole => whole
Oracle Span 13:  world => world
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 21-23:   => (island :name (name :op "Islands" :op "Diaoyu"))
Span 16-17:  "the => sacred
Span 5-6:  condemnation => condition-01
Span 2-3:  defied => defy-01
Span 17-18:  Diaoyu => territory
Span 11-12:  invaded => open
Span 0-1:  Japan => (country :name (name :op "Japan"))
Span 12-13:  our => invade-01
Span 14-15:  sacred => country
Span 4-5:  strong => strong
Span 1-2:  surprisingly => surpass-01
Span 8-9:  whole => whole
Span 9-10:  world, => world

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 5-6:  condemnation => condemn-01
Oracle Span 14-15:  country => country
Oracle Span 2-3:  defied => defy-01
Oracle Span 21-23:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Oracle Span 12-13:  invaded => invade-01
Oracle Span 0-1:  Japan => (name :op "Japan")
Oracle Span 11-12:  openly => open
Oracle Span 16-17:  sacred => sacred
Oracle Span 4-5:  strong => strong
Oracle Span 1-2:  surprisingly => surprise-01
Oracle Span 17-18:  territory => territory
Oracle Span 8-9:  whole => whole
Oracle Span 9-10:  world => world

Dependencies:
1	Japan	_	NNP	NNP	_	3	nsubj	_	_
2	surprisingly	_	RB	RB	_	3	advmod	_	_
3	defied	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	strong	_	JJ	JJ	_	6	amod	_	_
6	condemnation	_	NN	NN	_	3	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	whole	_	JJ	JJ	_	10	amod	_	_
10	world	_	NN	NN	_	7	pobj	_	_
11	,	_	,	,	_	3	punct	_	_
12	openly	_	RB	RB	_	13	advmod	_	_
13	invaded	_	VBD	VBD	_	3	dep	_	_
14	our	_	PRP$	PRP$	_	15	poss	_	_
15	country	_	NN	NN	_	18	poss	_	_
16	's	_	POS	POS	_	15	possessive	_	_
17	sacred	_	JJ	JJ	_	18	amod	_	_
18	territory	_	NN	NN	_	13	dobj	_	_
19	,	_	,	,	_	18	punct	_	_
20	"	_	``	``	_	18	punct	_	_
21	the	_	DT	DT	_	23	det	_	_
22	Diaoyu	_	NNP	NNP	_	23	nn	_	_
23	Islands	_	NNPS	NNPS	_	18	dep	_	_
24	"	_	''	''	_	18	punct	_	_
25	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / condemn-01, ARG0, w / world)
(c2 / condemn-01, ARG1, c / country)
(c2 / condemn-01, manner, s2 / strong)
(d / defy-01, ARG0, c / country)
(d / defy-01, ARG1, c2 / condemn-01)
(i / invade-01, ARG1, t / territory)
(i / invade-01, manner, o2 / open)
(n / name, op, "Japan")
(n2 / name, op, "Diaoyu")
(n2 / name, op, "Islands")
(s / surprise-01, ARG0, d / defy-01)
(t / territory, mod, s3 / sacred)
(t / territory, name, n2 / name)
(w / world, mod, w2 / whole)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),world,,world,false), Span(14,15,List(1),sacred,country,false), Span(21,23,List(5, 4, 3, 2),,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(2,3,List(6),defied,defy-01,false), Span(5,6,List(7),condemnation,condition-01,false), Span(12,13,List(8),our,invade-01,false), Span(17,18,List(9),Diaoyu,territory,false), Span(11,12,List(10),invaded,open,false), Span(0,1,List(13, 12, 11),Japan,(country :name (name :op "Japan")),false), Span(8,9,List(14),whole,whole,false), Span(1,2,List(15),surprisingly,surpass-01,false), Span(16,17,List(16),"the,sacred,false), Span(4,5,List(17),strong,strong,false)),Map(2 -> island, 5 -> "Diaoyu", 12 -> name, 15 -> surpass-01, 8 -> invade-01, 7 -> condition-01, 17 -> strong, 1 -> country, 4 -> "Islands", 11 -> country, 14 -> whole, 6 -> defy-01, 0 -> world, 9 -> territory, 16 -> sacred, 3 -> name, 10 -> open, 13 -> "Japan"),Map(w -> world, n -> name, s2 -> sacred, t -> territory, s -> surpass-01, d -> defy-01, c3 -> country, i2 -> invade-01, w2 -> whole, i -> island, s3 -> strong, c -> country, o -> open, c2 -> condition-01, n2 -> name))),[Ljava.lang.String;@5748cb6e,Annotation([Ljava.lang.String;@2d514b49,[Ljava.lang.String;@560be5a2,[Ljava.lang.String;@759fc3f),Annotation([Ljava.lang.String;@16db5401,[Ljava.lang.String;@31774e90,[Ledu.cmu.lti.nlp.amr.Dependency;@38d89be9),Annotation([Ljava.lang.String;@70a830c9,[Ljava.lang.String;@3c9f1981,[Ljava.lang.String;@3717d34c),Annotation([Ljava.lang.String;@4b6c1194,[Ljava.lang.String;@7a735e48,[Ledu.cmu.lti.nlp.amr.Entity;@3ee40396))
AMR:
(c2 / condition-01, ARG1, w / world)
(c2 / condition-01, manner, s3 / strong)
(c3 / country, name, n2 / name)
(d / defy-01, ARG0, c3 / country)
(d / defy-01, ARG1, c2 / condition-01)
(i / island, name, n / name)
(i2 / invade-01, ARG0, c3 / country)
(i2 / invade-01, ARG1, t / territory)
(i2 / invade-01, manner, o / open)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(n2 / name, op, "Japan")
(s / surpass-01, ARG0, i / island)
(s / surpass-01, ARG1, c3 / country)
(t / territory, mod, s2 / sacred)
(t / territory, poss, c / country)
(w / world, mod, w2 / whole)

Decoded in 11,236,626 microseconds
Sentence: As we all know, the "Diaoyu Islands" have always belonged to China; due to historical reasons, what originally belongs us has become controversial.

Oracle Span 1:  all => all
Oracle Span 2:  always => always
Oracle Span 3:  become => become-01
Oracle Span 4:  belonged => belong-01
Oracle Span 5:  belongs => (thing :ARG0-of belong-01)
Oracle Span 6:  China => (country :name (name :op "China"))
Oracle Span 7:  controversial => controversy
Oracle Span 8:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 9:  historical => history
Oracle Span 10:  know => know-01
Oracle Span 11:  originally => original
Oracle Span 12:  reasons => reason
Oracle Span 13:  we => we
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 27-28:   => controversy
Span 24-25:   => w
Span 23-24:   => belong-01
Span 26-27:   => become-01
Span 2-3:  all => all
Span 18-19:  belongs => historical
Span 11-12:  China; => always
Span 22-23:  controversial. => original
Span 12-13:  due => belong-01
Span 7-9:  have always => (island :name (name :op "Islands" :op "Diaoyu"))
Span 14-15:  historical => (country :name (name :op "China"))
Span 3-4:  know, => know-01
Span 19-20:  us => reason

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Oracle Span 2-3:  all => all
Oracle Span 11-12:  always => always
Oracle Span 26-27:  become => become-01
Oracle Span 12-13:  belonged => belong-01
Oracle Span 23-24:  belongs => (thing :ARG0-of belong-01)
Oracle Span 14-15:  China => (country :name (name :op "China"))
Oracle Span 27-28:  controversial => controversy
Oracle Span 7-9:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 18-19:  historical => history
Oracle Span 3-4:  know => know-01
Oracle Span 22-23:  originally => original
Oracle Span 19-20:  reasons => reason
Oracle Span 1-2:  we => we

Dependencies:
1	As	_	IN	IN	_	4	mark	_	_
2	we	_	PRP	PRP	_	4	nsubj	_	_
3	all	_	DT	DT	_	4	advmod	_	_
4	know	_	VBP	VBP	_	13	advcl	_	_
5	,	_	,	,	_	13	punct	_	_
6	the	_	DT	DT	_	9	det	_	_
7	"	_	``	``	_	9	punct	_	_
8	Diaoyu	_	NNP	NNP	_	9	nn	_	_
9	Islands	_	NNP	NNP	_	13	nsubj	_	_
10	"	_	''	''	_	9	punct	_	_
11	have	_	VBP	VBP	_	13	aux	_	_
12	always	_	RB	RB	_	13	advmod	_	_
13	belonged	_	VBN	VBN	_	0	root	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	China	_	NNP	NNP	_	14	pobj	_	_
16	;	_	:	:	_	15	punct	_	_
17	due	_	JJ	JJ	_	15	amod	_	_
18	to	_	TO	TO	_	17	prep	_	_
19	historical	_	JJ	JJ	_	20	amod	_	_
20	reasons	_	NNS	NNS	_	18	pobj	_	_
21	,	_	,	,	_	20	punct	_	_
22	what	_	WP	WP	_	24	nsubj	_	_
23	originally	_	RB	RB	_	24	advmod	_	_
24	belongs	_	VBZ	VBZ	_	20	rcmod	_	_
25	us	_	PRP	PRP	_	27	nsubj	_	_
26	has	_	VBZ	VBZ	_	27	aux	_	_
27	become	_	VBN	VBN	_	24	ccomp	_	_
28	controversial	_	JJ	JJ	_	27	acomp	_	_
29	.	_	.	.	_	13	punct	_	_

Oracle:
(b / belong-01, ARG0, i / island)
(b / belong-01, ARG1, c2 / country)
(b / belong-01, time, a / always)
(b2 / become-01, ARG1, t / thing)
(b2 / become-01, ARG2, c3 / controversy)
(b3 / belong-01, ARG0, t / thing)
(b3 / belong-01, mod, o / original)
(c2 / country, name, n2 / name)
(i / island, name, n / name)
(k / know-01, ARG0, w / we)
(k / know-01, ARG1, b / belong-01)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(n2 / name, op, "China")
(r / reason, mod, h / history)
(w / we, mod, a2 / all)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),all,all,false), Span(14,15,List(3, 2, 1),historical,(country :name (name :op "China")),false), Span(27,28,List(4),,controversy,false), Span(22,23,List(5),controversial.,original,false), Span(24,25,List(6),,w,false), Span(12,13,List(7),due,belong-01,false), Span(18,19,List(8),belongs,historical,false), Span(7,9,List(12, 11, 10, 9),have always,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(23,24,List(13),,belong-01,false), Span(11,12,List(14),China;,always,false), Span(3,4,List(15),know,,know-01,false), Span(19,20,List(16),us,reason,false), Span(26,27,List(17),,become-01,false)),Map(2 -> name, 5 -> original, 12 -> "Diaoyu", 15 -> know-01, 8 -> historical, 7 -> belong-01, 17 -> become-01, 1 -> country, 4 -> controversy, 11 -> "Islands", 14 -> always, 6 -> w, 0 -> all, 9 -> island, 16 -> reason, 3 -> "China", 10 -> name, 13 -> belong-01),Map(b3 -> become-01, n -> name, w -> w, h -> historical, b -> belong-01, k -> know-01, b2 -> belong-01, a -> all, r -> reason, i -> island, a2 -> always, c -> country, o -> original, c2 -> controversy, n2 -> name))),[Ljava.lang.String;@2fa407b7,Annotation([Ljava.lang.String;@24eb371f,[Ljava.lang.String;@4089274e,[Ljava.lang.String;@1cd071e5),Annotation([Ljava.lang.String;@13464477,[Ljava.lang.String;@6e68cacf,[Ledu.cmu.lti.nlp.amr.Dependency;@67d2331b),Annotation([Ljava.lang.String;@7892295d,[Ljava.lang.String;@5956afc4,[Ljava.lang.String;@71c02893),Annotation([Ljava.lang.String;@7fc975b,[Ljava.lang.String;@6e4d9e38,[Ledu.cmu.lti.nlp.amr.Entity;@28924ba))
AMR:
(b / belong-01, ARG0, i / island)
(b / belong-01, ARG1, c / country)
(b / belong-01, time, a2 / always)
(b2 / belong-01, ARG1, b3 / become-01)
(b2 / belong-01, mod, o / original)
(b3 / become-01, ARG0, w / w)
(b3 / become-01, ARG1, c / country)
(b3 / become-01, ARG2, c2 / controversy)
(b3 / become-01, ARG6, r / reason)
(c / country, name, n / name)
(i / island, name, n2 / name)
(k / know-01, ARG0, c / country)
(k / know-01, ARG1, a / all)
(n / name, op, "China")
(n2 / name, op, "Diaoyu")
(n2 / name, op, "Islands")
(r / reason, mod, h / historical)

Decoded in 18,413,542 microseconds
Sentence: My fellow citizens, ours is ours, what need is there to negotiate! Japan thus goes even further - wants to create a fact of occupation. Can we allow this? No - absolutely not!

Oracle Span 1:  absolutely => absolute
Oracle Span 2:  allow => allow-01
Oracle Span 3:  Can => possible
Oracle Span 4:  citizens => citizen
Oracle Span 5:  create => create-01
Oracle Span 6:  even => even
Oracle Span 7:  fact => fact
Oracle Span 8:  fellow => fellow
Oracle Span 9:  further => further
Oracle Span 10:  goes => go-01
Oracle Span 11:  Japan => (country :name (name :op "Japan"))
Oracle Span 12:  need => need-01
Oracle Span 13:  negotiate => negotiate-01
Oracle Span 14:  No => -
Oracle Span 15:  occupation => occupy-01
Oracle Span 16:  this => this
Oracle Span 17:  wants => want-01
Oracle Span 18:  we => we
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 21-22:  a => want-01
Span 31-32:  absolutely => allow-01
Span 27-28:  allow => occasion-01
Span 2-3:  citizens, => citizen
Span 15-16:  even => (country :name (name :op "Japan"))
Span 1-2:  fellow => fellow
Span 8-9:  is => amr-unknown
Span 11-12:  negotiate! => multi-sentence
Span 32-33:  not! => this
Span 23-24:  of => create-01
Span 9-10:  there => need-01
Span 13-14:  thus => negotiate-01
Span 19-20:  to => further
Span 18-19:  wants => even

 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of thus in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of goes in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of further in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of wants in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of create in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of fact in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of occupation in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of Can in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of allow in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of No in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of absolutely in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 38
Langrangian relaxation converged after 49 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of thus in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of goes in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of further in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of wants in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of create in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of fact in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of occupation in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of Can in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of allow in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of No in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of absolutely in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 38
Oracle Span 36-37:  absolutely => absolute
Oracle Span 31-32:  allow => allow-01
Oracle Span 29-30:  Can => possible
Oracle Span 2-3:  citizens => citizen
Oracle Span 23-24:  create => create-01
Oracle Span 18-19:  even => even
Oracle Span 25-26:  fact => fact
Oracle Span 1-2:  fellow => fellow
Oracle Span 19-20:  further => further
Oracle Span 17-18:  goes => go-01
Oracle Span 15-16:  Japan => (country :name (name :op "Japan"))
Oracle Span 9-10:  need => need-01
Oracle Span 13-14:  negotiate => negotiate-01
Oracle Span 34-35:  No => -
Oracle Span 27-28:  occupation => occupy-01
Oracle Span 32-33:  this => this
Oracle Span 21-22:  wants => want-01
Oracle Span 30-31:  we => we

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	0	root	_	_
4	,	_	,	,	_	7	punct	_	_
5	ours	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	ours	_	PRP	PRP	_	3	dep	_	_
8	,	_	,	,	_	7	punct	_	_
9	what	_	WP	WP	_	10	nsubj	_	_
10	need	_	VBP	VBP	_	3	rcmod	_	_
11	is	_	VBZ	VBZ	_	10	ccomp	_	_
12	there	_	EX	EX	_	11	dobj	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	negotiate	_	VB	VB	_	11	xcomp	_	_
15	!	_	.	.	_	3	punct	_	_
1	Japan	_	NNP	NNP	_	3	nsubj	_	_
2	thus	_	RB	RB	_	3	advmod	_	_
3	goes	_	VBZ	VBZ	_	0	root	_	_
4	even	_	RB	RB	_	7	advmod	_	_
5	further	_	JJ	JJ	_	6	amod	_	_
6	-	_	NNS	NNS	_	7	nsubj	_	_
7	wants	_	VBZ	VBZ	_	3	ccomp	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	create	_	VB	VB	_	7	xcomp	_	_
10	a	_	DT	DT	_	11	det	_	_
11	fact	_	NN	NN	_	9	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	occupation	_	NN	NN	_	12	pobj	_	_
14	.	_	.	.	_	3	punct	_	_
1	Can	_	MD	MD	_	3	aux	_	_
2	we	_	PRP	PRP	_	3	nsubj	_	_
3	allow	_	VB	VB	_	0	root	_	_
4	this	_	DT	DT	_	3	dobj	_	_
5	?	_	.	.	_	3	punct	_	_
1	No	_	NNP	NNP	_	0	root	_	_
2	-	_	:	:	_	1	punct	_	_
3	absolutely	_	RB	RB	_	4	dep	_	_
4	not	_	RB	RB	_	1	dep	_	_
5	!	_	.	.	_	1	punct	_	_

Oracle:
(a2 / allow-01, ARG1, t / this)
(c / citizen, mod, f / fellow)
(c2 / country, name, n2 / name)
(c3 / create-01, ARG0, c2 / country)
(c3 / create-01, ARG1, f3 / fact)
(f2 / further, degree, e3 / even)
(f3 / fact, topic, o / occupy-01)
(g / go-01, ARG1, c2 / country)
(g / go-01, ARG2, f2 / further)
(n2 / name, op, "Japan")
(n3 / need-01, ARG1, n4 / negotiate-01)
(p / possible, domain, a2 / allow-01)
(w2 / want-01, ARG0, c2 / country)
(w2 / want-01, ARG1, c3 / create-01)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),absolutely,allow-01,false), Span(2,3,List(1),citizens,,citizen,false), Span(18,19,List(2),wants,even,false), Span(15,16,List(5, 4, 3),even,(country :name (name :op "Japan")),false), Span(19,20,List(6),to,further,false), Span(9,10,List(7),there,need-01,false), Span(21,22,List(8),a,want-01,false), Span(13,14,List(9),thus,negotiate-01,false), Span(1,2,List(10),fellow,fellow,false), Span(11,12,List(11),negotiate!,multi-sentence,false), Span(27,28,List(12),allow,occasion-01,false), Span(32,33,List(13),not!,this,false), Span(23,24,List(14),of,create-01,false), Span(8,9,List(15),is,amr-unknown,false)),Map(2 -> even, 5 -> "Japan", 12 -> occasion-01, 15 -> amr-unknown, 8 -> want-01, 7 -> need-01, 1 -> citizen, 4 -> name, 11 -> multi-sentence, 14 -> create-01, 6 -> further, 0 -> allow-01, 9 -> negotiate-01, 3 -> country, 10 -> fellow, 13 -> this),Map(e -> even, n -> name, w -> want-01, t -> this, m -> multi-sentence, c3 -> create-01, a -> allow-01, n3 -> negotiate-01, a2 -> amr-unknown, c -> citizen, f2 -> fellow, f -> further, o -> occasion-01, c2 -> country, n2 -> need-01))),[Ljava.lang.String;@6ef9a670,Annotation([Ljava.lang.String;@227c79dd,[Ljava.lang.String;@3e757800,[Ljava.lang.String;@2156383a),Annotation([Ljava.lang.String;@2bfd046,[Ljava.lang.String;@434cf35d,[Ledu.cmu.lti.nlp.amr.Dependency;@566c364c),Annotation([Ljava.lang.String;@466b5353,[Ljava.lang.String;@3aaa8638,[Ljava.lang.String;@1e585c2b),Annotation([Ljava.lang.String;@2931c7fa,[Ljava.lang.String;@35dcf844,[Ledu.cmu.lti.nlp.amr.Entity;@5ba92381))
AMR:
(a / allow-01, ARG1, t / this)
(c / citizen, mod, f2 / fellow)
(c2 / country, name, n / name)
(c3 / create-01, ARG1, a / allow-01)
(f / further, mod, e / even)
(n / name, op, "Japan")
(n2 / need-01, ARG0, c2 / country)
(n2 / need-01, ARG1, m / multi-sentence)
(n2 / need-01, ARG2, c / citizen)
(n2 / need-01, ARG6, a2 / amr-unknown)
(n3 / negotiate-01, ARG1, c2 / country)
(n3 / negotiate-01, ARG6, e / even)
(o / occasion-01, ARG1, a / allow-01)
(w / want-01, ARG1, c3 / create-01)
(w / want-01, ARG6, n3 / negotiate-01)

Decoded in 1,285,103 microseconds
Sentence: My fellow citizens, Japan's militarism has brought the people of Asia grave disasters.

Oracle Span 1:  Asia => (person :mod (continent :name (name :op "Asia")))
Oracle Span 2:  brought => bring-01
Oracle Span 3:  citizens => citizen
Oracle Span 4:  disasters => disaster
Oracle Span 5:  fellow => fellow
Oracle Span 6:  grave => grave
Oracle Span 7:  Japan => (country :name (name :op "Japan"))
Oracle Span 8:  militarism => militarism
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Asia"))
Spans:
Span 13-14:   => grave
Span 14-15:   => disaster
Span 6-7:  brought => militarism
Span 2-3:  citizens, => citizen
Span 12-13:  disasters. => (continent :name (name :op "Asia"))
Span 1-2:  fellow => fellow
Span 4-5:  militarism => (country :name (name :op "Japan"))
Span 8-9:  people => bring-01

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Oracle Span 12-13:  Asia => (person :mod (continent :name (name :op "Asia")))
Oracle Span 8-9:  brought => bring-01
Oracle Span 2-3:  citizens => citizen
Oracle Span 14-15:  disasters => disaster
Oracle Span 1-2:  fellow => fellow
Oracle Span 13-14:  grave => grave
Oracle Span 4-5:  Japan => (country :name (name :op "Japan"))
Oracle Span 6-7:  militarism => militarism

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	9	nsubj	_	_
4	,	_	,	,	_	3	punct	_	_
5	Japan	_	NNP	NNP	_	7	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	militarism	_	NN	NN	_	3	appos	_	_
8	has	_	VBZ	VBZ	_	9	aux	_	_
9	brought	_	VBN	VBN	_	0	root	_	_
10	the	_	DT	DT	_	11	det	_	_
11	people	_	NNS	NNS	_	9	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	Asia	_	NNP	NNP	_	15	nn	_	_
14	grave	_	JJ	JJ	_	15	amod	_	_
15	disasters	_	NNS	NNS	_	12	pobj	_	_
16	.	_	.	.	_	9	punct	_	_

Oracle:
(b / bring-01, ARG0, m2 / militarism)
(b / bring-01, ARG1, d / disaster)
(b / bring-01, ARG2, p / person)
(c / citizen, mod, f / fellow)
(c2 / country, name, n / name)
(c3 / continent, name, n2 / name)
(d / disaster, mod, g / grave)
(m2 / militarism, poss, c2 / country)
(n / name, op, "Japan")
(n2 / name, op, "Asia")
(p / person, mod, c3 / continent)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),citizens,,citizen,false), Span(4,5,List(3, 2, 1),militarism,(country :name (name :op "Japan")),false), Span(6,7,List(4),brought,militarism,false), Span(12,13,List(7, 6, 5),disasters.,(continent :name (name :op "Asia")),false), Span(13,14,List(8),,grave,false), Span(8,9,List(9),people,bring-01,false), Span(1,2,List(10),fellow,fellow,false), Span(14,15,List(11),,disaster,false)),Map(2 -> name, 5 -> continent, 8 -> grave, 7 -> "Asia", 1 -> country, 11 -> disaster, 4 -> militarism, 6 -> name, 9 -> bring-01, 0 -> citizen, 10 -> fellow, 3 -> "Japan"),Map(n -> name, b -> bring-01, d -> disaster, m -> militarism, g -> grave, c3 -> continent, c -> citizen, f -> fellow, n2 -> name, c2 -> country))),[Ljava.lang.String;@56a0b78c,Annotation([Ljava.lang.String;@7db07b51,[Ljava.lang.String;@429bcbc2,[Ljava.lang.String;@e4653a2),Annotation([Ljava.lang.String;@5d898931,[Ljava.lang.String;@239d1b22,[Ledu.cmu.lti.nlp.amr.Dependency;@3f440148),Annotation([Ljava.lang.String;@3239e41,[Ljava.lang.String;@12f24f15,[Ljava.lang.String;@597d1262),Annotation([Ljava.lang.String;@462c1644,[Ljava.lang.String;@59625956,[Ledu.cmu.lti.nlp.amr.Entity;@59e82f88))
AMR:
(b / bring-01, ARG0, c / citizen)
(b / bring-01, ARG1, m / militarism)
(c / citizen, mod, f / fellow)
(c2 / country, name, n / name)
(c3 / continent, name, n2 / name)
(d / disaster, mod, c2 / country)
(d / disaster, mod, g / grave)
(d / disaster, poss, c3 / continent)
(m / militarism, mod, c2 / country)
(n / name, op, "Japan")
(n2 / name, op, "Asia")

Decoded in 588,340 microseconds
Sentence: Especially China suffered the ravages of Japan for as long as several decades.

Oracle Span 1:  China => (country :name (name :op "China"))
Oracle Span 2:  decades => (temporal-quantity :unit decade)
Oracle Span 3:  Especially => especially
Oracle Span 4:  Japan => (country :name (name :op "Japan"))
Oracle Span 5:  ravages => ravage-01
Oracle Span 6:  several => several
Oracle Span 7:  suffered => suffer-01
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 8-9:  as => as-well
Span 1-2:  China => (country :name (name :op "China"))
Span 12-13:  decades. => decade
Span 0-1:  Especially => especially
Span 6-7:  Japan => (country :name (name :op "Japan"))
Span 9-10:  long => long
Span 4-5:  ravages => ravages
Span 11-12:  several => several
Span 2-3:  suffered => suffer-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 1-2:  China => (country :name (name :op "China"))
Oracle Span 12-13:  decades => (temporal-quantity :unit decade)
Oracle Span 0-1:  Especially => especially
Oracle Span 6-7:  Japan => (country :name (name :op "Japan"))
Oracle Span 4-5:  ravages => ravage-01
Oracle Span 11-12:  several => several
Oracle Span 2-3:  suffered => suffer-01

Dependencies:
1	Especially	_	RB	RB	_	2	advmod	_	_
2	China	_	NNP	NNP	_	3	nsubj	_	_
3	suffered	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	5	det	_	_
5	ravages	_	NNS	NNS	_	3	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	Japan	_	NNP	NNP	_	6	pobj	_	_
8	for	_	IN	IN	_	3	prep	_	_
9	as	_	RB	RB	_	12	quantmod	_	_
10	long	_	JJ	JJ	_	12	quantmod	_	_
11	as	_	IN	IN	_	12	quantmod	_	_
12	several	_	JJ	JJ	_	13	num	_	_
13	decades	_	NNS	NNS	_	8	pobj	_	_
14	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, mod, e / especially)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Japan")
(r / ravage-01, ARG0, c2 / country)
(r / ravage-01, ARG1, c / country)
(s / suffer-01, ARG0, c / country)
(s / suffer-01, ARG1, r / ravage-01)
(s4 / several, op, t / temporal-quantity)
(t / temporal-quantity, unit, d3 / decade)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Especially,especially,false), Span(9,10,List(1),long,long,false), Span(8,9,List(2),as,as-well,false), Span(11,12,List(3),several,several,false), Span(2,3,List(4),suffered,suffer-01,false), Span(4,5,List(5),ravages,ravages,false), Span(1,2,List(8, 7, 6),China,(country :name (name :op "China")),false), Span(12,13,List(9),decades.,decade,false), Span(6,7,List(12, 11, 10),Japan,(country :name (name :op "Japan")),false)),Map(2 -> as-well, 5 -> ravages, 12 -> "Japan", 8 -> "China", 7 -> name, 1 -> long, 4 -> suffer-01, 11 -> name, 6 -> country, 0 -> especially, 9 -> decade, 3 -> several, 10 -> country),Map(n -> name, e -> especially, s2 -> suffer-01, s -> several, d -> decade, a -> as-well, r -> ravages, c -> country, l -> long, n2 -> name, c2 -> country))),[Ljava.lang.String;@f2248c1,Annotation([Ljava.lang.String;@702884df,[Ljava.lang.String;@803d8b7,[Ljava.lang.String;@6d463291),Annotation([Ljava.lang.String;@703f0bb8,[Ljava.lang.String;@4405671c,[Ledu.cmu.lti.nlp.amr.Dependency;@5255d94b),Annotation([Ljava.lang.String;@e5bbb2a,[Ljava.lang.String;@6310392,[Ljava.lang.String;@69e3a9cf),Annotation([Ljava.lang.String;@1580ba39,[Ljava.lang.String;@4651c148,[Ledu.cmu.lti.nlp.amr.Entity;@48726783))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / decade, mod, s / several)
(l / long, calendar, s / several)
(l / long, mod, a / as-well)
(n / name, op, "China")
(n2 / name, op, "Japan")
(r / ravages, location, c2 / country)
(s2 / suffer-01, ARG0, c / country)
(s2 / suffer-01, ARG1, r / ravages)
(s2 / suffer-01, ARG6, e / especially)
(s2 / suffer-01, source, d / decade)

Decoded in 391,225 microseconds
Sentence: In the Northeast, Japanese Unit 731 cruelly conducted human body experiments on living people of China, Korea and other countries, the method of which were extremely brutal; the Nanjing Massacre added a layer of blood to the ancient capital which will never fade away; the big bloody battles at Hengyang and Changsha laid bare the bones of the dead over a thousand kilometers and killed off everything ...

Oracle Span 1:  ; => and
Oracle Span 2:  ; => and
Oracle Span 3:  added => add-02
Oracle Span 4:  ancient => ancient
Oracle Span 5:  and => and
Oracle Span 6:  away => away
Oracle Span 7:  bare => bare-01
Oracle Span 8:  battles => battle-01
Oracle Span 9:  big => big
Oracle Span 10:  blood => blood
Oracle Span 11:  bloody => bloody
Oracle Span 12:  body => body
Oracle Span 13:  bones => bone
Oracle Span 14:  brutal => brutal
Oracle Span 15:  capital => capital
Oracle Span 16:  Changsha => (city :name (name :op "Changsha"))
Oracle Span 17:  China => (country :name (name :op "China"))
Oracle Span 18:  countries => country
Oracle Span 19:  cruelly => cruel
Oracle Span 20:  everything => everything
Oracle Span 21:  experiments => experiment-01
Oracle Span 22:  extremely => extreme
Oracle Span 23:  fade => fade-01
Oracle Span 24:  Hengyang => (city :name (name :op "Hengyang"))
Oracle Span 25:  human => human
Oracle Span 26:  Japanese => (country :name (name :op "Japan"))
Oracle Span 27:  killed => kill-02
Oracle Span 28:  kilometers => (distance-quantity :unit kilometers)
Oracle Span 29:  Korea => (country :name (name :op "Korea"))
Oracle Span 30:  layer => layer
Oracle Span 31:  living => (person :ARG0-of live-01)
Oracle Span 32:  method => method
Oracle Span 33:  Nanjing Massacre => (incident :name (name :op "Massacre" :op "Nanjing"))
Oracle Span 34:  Northeast => (country-region :name (name :op "Northeast"))
Oracle Span 35:  other => other
Oracle Span 36:  over => over
Oracle Span 37:  Unit 731 => (military :name (name :op "731" :op "Unit"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Korea"))
NER Entity: (country :name (name :op "Northeast"))
NER Entity: (country :name (name :op "Nanjing"))
NER Entity: (country :name (name :op "Hengyang"))
NER Entity: (country :name (name :op "Changsha"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 68-69:   => and
Span 69-70:   => kill-01
Span 71-72:   => everything
Span 67-68:  ... => kilometer
Span 60-61:  a => bone
Span 50-51:  and => big
Span 47-48:  battles => away
Span 46-47:  bloody => fade-01
Span 9-10:  body => human
Span 55-56:  bones => and
Span 38-39:  capital => blood
Span 51-52:  Changsha => bloody
Span 19-20:  countries, => and
Span 10-11:  experiments => body
Span 42-43:  fade => capital
Span 0-1:  In => 1
Span 16-17:  Korea => (country :name (name :op "China"))
Span 52-53:  laid => battle-01
Span 32-33:  layer => (city :name (name :op "Nanjing"))
Span 29-30:  Massacre => brutal
Span 21-22:  method => country
Span 28-29:  Nanjing => extreme
Span 41-42:  never => ancient
Span 2-3:  Northeast, => northeast
Span 11-12:  on => experiment-01
Span 18-19:  other => (country :name (name :op "Korea"))
Span 13-14:  people => live-01
Span 36-37:  the => layer
Span 57-58:  the => lay-01
Span 20-21:  the => other
Span 24-25:  were => method

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 30-31:  ; => and
Oracle Span 48-49:  ; => and
Oracle Span 34-35:  added => add-02
Oracle Span 41-42:  ancient => ancient
Oracle Span 19-20:  and => and
Oracle Span 47-48:  away => away
Oracle Span 58-59:  bare => bare-01
Oracle Span 52-53:  battles => battle-01
Oracle Span 50-51:  big => big
Oracle Span 38-39:  blood => blood
Oracle Span 51-52:  bloody => bloody
Oracle Span 10-11:  body => body
Oracle Span 60-61:  bones => bone
Oracle Span 29-30:  brutal => brutal
Oracle Span 42-43:  capital => capital
Oracle Span 56-57:  Changsha => (city :name (name :op "Changsha"))
Oracle Span 16-17:  China => (country :name (name :op "China"))
Oracle Span 21-22:  countries => country
Oracle Span 7-8:  cruelly => cruel
Oracle Span 71-72:  everything => everything
Oracle Span 11-12:  experiments => experiment-01
Oracle Span 28-29:  extremely => extreme
Oracle Span 46-47:  fade => fade-01
Oracle Span 54-55:  Hengyang => (city :name (name :op "Hengyang"))
Oracle Span 9-10:  human => human
Oracle Span 4-5:  Japanese => (country :name (name :op "Japan"))
Oracle Span 69-70:  killed => kill-02
Oracle Span 67-68:  kilometers => (distance-quantity :unit kilometers)
Oracle Span 18-19:  Korea => (country :name (name :op "Korea"))
Oracle Span 36-37:  layer => layer
Oracle Span 13-14:  living => (person :ARG0-of live-01)
Oracle Span 24-25:  method => method
Oracle Span 32-34:  Nanjing Massacre => (incident :name (name :op "Massacre" :op "Nanjing"))
Oracle Span 2-3:  Northeast => (country-region :name (name :op "Northeast"))
Oracle Span 20-21:  other => other
Oracle Span 64-65:  over => over
Oracle Span 5-7:  Unit 731 => (military :name (name :op "731" :op "Unit"))

Dependencies:
1	In	_	IN	IN	_	58	prep	_	_
2	the	_	DT	DT	_	8	det	_	_
3	Northeast	_	NNP	NNP	_	5	amod	_	_
4	,	_	,	,	_	5	punct	_	_
5	Japanese	_	JJ	JJ	_	8	amod	_	_
6	Unit	_	NNP	NNP	_	8	nn	_	_
7	731	_	CD	CD	_	8	num	_	_
8	cruelly	_	NN	NN	_	1	pobj	_	_
9	conducted	_	VBN	VBN	_	8	vmod	_	_
10	human	_	JJ	JJ	_	12	amod	_	_
11	body	_	NN	NN	_	12	nn	_	_
12	experiments	_	NNS	NNS	_	9	dobj	_	_
13	on	_	IN	IN	_	9	prep	_	_
14	living	_	VBG	VBG	_	15	amod	_	_
15	people	_	NNS	NNS	_	13	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	China	_	NNP	NNP	_	16	pobj	_	_
18	,	_	,	,	_	17	punct	_	_
19	Korea	_	NNP	NNP	_	17	conj	_	_
20	and	_	CC	CC	_	17	cc	_	_
21	other	_	JJ	JJ	_	22	amod	_	_
22	countries	_	NNS	NNS	_	17	conj	_	_
23	,	_	,	,	_	58	punct	_	_
24	the	_	DT	DT	_	25	det	_	_
25	method	_	NN	NN	_	58	nsubj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	which	_	WDT	WDT	_	30	nsubj	_	_
28	were	_	VBD	VBD	_	30	cop	_	_
29	extremely	_	RB	RB	_	30	advmod	_	_
30	brutal	_	JJ	JJ	_	34	dep	_	_
31	;	_	:	:	_	34	punct	_	_
32	the	_	DT	DT	_	34	det	_	_
33	Nanjing	_	NNP	NNP	_	34	nn	_	_
34	Massacre	_	NNP	NNP	_	26	pobj	_	_
35	added	_	VBN	VBN	_	34	vmod	_	_
36	a	_	DT	DT	_	37	det	_	_
37	layer	_	NN	NN	_	35	dobj	_	_
38	of	_	IN	IN	_	37	prep	_	_
39	blood	_	NN	NN	_	38	pobj	_	_
40	to	_	TO	TO	_	35	prep	_	_
41	the	_	DT	DT	_	43	det	_	_
42	ancient	_	JJ	JJ	_	43	amod	_	_
43	capital	_	NN	NN	_	40	pobj	_	_
44	which	_	WDT	WDT	_	47	nsubj	_	_
45	will	_	MD	MD	_	47	aux	_	_
46	never	_	RB	RB	_	47	neg	_	_
47	fade	_	VB	VB	_	43	rcmod	_	_
48	away	_	RP	RP	_	47	prt	_	_
49	;	_	:	:	_	34	punct	_	_
50	the	_	DT	DT	_	53	det	_	_
51	big	_	JJ	JJ	_	53	amod	_	_
52	bloody	_	JJ	JJ	_	53	amod	_	_
53	battles	_	NNS	NNS	_	34	dep	_	_
54	at	_	IN	IN	_	53	prep	_	_
55	Hengyang	_	NNP	NNP	_	54	pobj	_	_
56	and	_	CC	CC	_	55	cc	_	_
57	Changsha	_	NNP	NNP	_	55	conj	_	_
58	laid	_	VBD	VBD	_	0	root	_	_
59	bare	_	JJ	JJ	_	58	acomp	_	_
60	the	_	DT	DT	_	61	det	_	_
61	bones	_	NNS	NNS	_	59	dep	_	_
62	of	_	IN	IN	_	61	prep	_	_
63	the	_	DT	DT	_	64	det	_	_
64	dead	_	NN	NN	_	62	pobj	_	_
65	over	_	IN	IN	_	64	prep	_	_
66	a	_	DT	DT	_	68	det	_	_
67	thousand	_	CD	CD	_	68	num	_	_
68	kilometers	_	NNS	NNS	_	65	pobj	_	_
69	and	_	CC	CC	_	58	cc	_	_
70	killed	_	VBD	VBD	_	58	conj	_	_
71	off	_	RP	RP	_	70	prt	_	_
72	everything	_	NN	NN	_	70	dobj	_	_
73	...	_	:	:	_	58	punct	_	_

Oracle:
(a2 / and, op, p4 / person)
(a3 / add-02, ARG0, i / incident)
(a3 / add-02, ARG1, l2 / layer)
(a3 / add-02, ARG2, c8 / capital)
(a6 / and, op, b4 / bare-01)
(a6 / and, op, k / kill-02)
(a7 / and, op, c10 / city)
(a7 / and, op, c9 / city)
(b / brutal, degree, e2 / extreme)
(b2 / body, mod, h / human)
(b3 / blood, consist, l2 / layer)
(b4 / bare-01, ARG0, b5 / battle-01)
(b4 / bare-01, ARG1, b8 / bone)
(b4 / bare-01, quant, o2 / over)
(b5 / battle-01, location, a7 / and)
(b5 / battle-01, mod, b6 / big)
(b5 / battle-01, mod, b7 / bloody)
(c10 / city, name, n8 / name)
(c3 / country, name, n2 / name)
(c4 / country-region, name, n3 / name)
(c5 / country, name, n4 / name)
(c6 / country, name, n5 / name)
(c7 / country, mod, o / other)
(c8 / capital, mod, a4 / ancient)
(c9 / city, name, n7 / name)
(d2 / distance-quantity, unit, k2 / kilometers)
(e / experiment-01, ARG0, m / military)
(e / experiment-01, ARG1, a2 / and)
(e / experiment-01, ARG2, m3 / method)
(e / experiment-01, location, c4 / country-region)
(e / experiment-01, manner, c2 / cruel)
(e / experiment-01, mod, b2 / body)
(f / fade-01, ARG1, l2 / layer)
(f / fade-01, direction, a5 / away)
(i / incident, name, n6 / name)
(k / kill-02, ARG0, b5 / battle-01)
(k / kill-02, ARG1, e4 / everything)
(l4 / live-01, ARG0, p4 / person)
(m / military, mod, c3 / country)
(m / military, name, n / name)
(m3 / method, mod, b / brutal)
(n / name, op, "731")
(n / name, op, "Unit")
(n2 / name, op, "Japan")
(n3 / name, op, "Northeast")
(n4 / name, op, "China")
(n5 / name, op, "Korea")
(n6 / name, op, "Massacre")
(n6 / name, op, "Nanjing")
(n7 / name, op, "Hengyang")
(n8 / name, op, "Changsha")
(o2 / over, op, d2 / distance-quantity)
(p4 / person, mod, c7 / country)

Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),Massacre,brutal,false), Span(36,37,List(1),the,layer,false), Span(11,12,List(2),on,experiment-01,false), Span(67,68,List(3),...,kilometer,false), Span(57,58,List(4),the,lay-01,false), Span(41,42,List(5),never,ancient,false), Span(68,69,List(6),,and,false), Span(24,25,List(7),were,method,false), Span(21,22,List(8),method,country,false), Span(55,56,List(9),bones,and,false), Span(50,51,List(10),and,big,false), Span(69,70,List(11),,kill-01,false), Span(46,47,List(12),bloody,fade-01,false), Span(47,48,List(13),battles,away,false), Span(28,29,List(14),Nanjing,extreme,false), Span(20,21,List(15),the,other,false), Span(10,11,List(16),experiments,body,false), Span(18,19,List(19, 18, 17),other,(country :name (name :op "Korea")),false), Span(42,43,List(20),fade,capital,false), Span(2,3,List(21),Northeast,,northeast,false), Span(38,39,List(22),capital,blood,false), Span(71,72,List(23),,everything,false), Span(0,1,List(24),In,1,false), Span(32,33,List(27, 26, 25),layer,(city :name (name :op "Nanjing")),false), Span(16,17,List(30, 29, 28),Korea,(country :name (name :op "China")),false), Span(19,20,List(31),countries,,and,false), Span(51,52,List(32),Changsha,bloody,false), Span(9,10,List(33),body,human,false), Span(52,53,List(34),laid,battle-01,false), Span(13,14,List(35),people,live-01,false), Span(60,61,List(36),a,bone,false)),Map(30 -> "China", 2 -> experiment-01, 5 -> ancient, 33 -> human, 27 -> "Nanjing", 12 -> fade-01, 8 -> country, 15 -> other, 36 -> bone, 21 -> northeast, 18 -> name, 24 -> 1, 35 -> live-01, 7 -> method, 1 -> layer, 17 -> country, 23 -> everything, 26 -> name, 4 -> lay-01, 11 -> kill-01, 32 -> bloody, 14 -> extreme, 29 -> name, 20 -> capital, 34 -> battle-01, 28 -> country, 6 -> and, 9 -> and, 0 -> brutal, 22 -> blood, 16 -> body, 19 -> "Korea", 10 -> big, 3 -> kilometer, 31 -> and, 25 -> city, 13 -> away),Map(e -> experiment-01, b3 -> body, n -> name, k2 -> kill-01, h -> human, k -> kilometer, b -> brutal, b2 -> big, b5 -> bloody, e2 -> extreme, l3 -> live-01, n4 -> name, a3 -> and, c4 -> city, m -> method, 1 -> 1, n3 -> name, a -> ancient, c3 -> capital, a5 -> and, b4 -> blood, l2 -> lay-01, b7 -> bone, a2 -> and, c -> country, l -> layer, f -> fade-01, o -> other, e3 -> everything, b6 -> battle-01, c2 -> country, n2 -> northeast, a4 -> away, c5 -> country))),[Ljava.lang.String;@3d7b6653,Annotation([Ljava.lang.String;@4f0d9324,[Ljava.lang.String;@3be2f47a,[Ljava.lang.String;@5ff1859b),Annotation([Ljava.lang.String;@39de39c8,[Ljava.lang.String;@1ae91964,[Ledu.cmu.lti.nlp.amr.Dependency;@36046f67),Annotation([Ljava.lang.String;@650ae961,[Ljava.lang.String;@2dd29c71,[Ljava.lang.String;@7f228296),Annotation([Ljava.lang.String;@6a48b542,[Ljava.lang.String;@58bb088b,[Ledu.cmu.lti.nlp.amr.Entity;@613326f9))
AMR:
(a2 / and, op, k / kilometer)
(a2 / and, op, k2 / kill-01)
(a2 / and, op, l2 / lay-01)
(a5 / and, op, a3 / and)
(a5 / and, op, c / country)
(a5 / and, op, c2 / country)
(a5 / and, op, c5 / country)
(b / brutal, mod, e2 / extreme)
(b3 / body, mod, h / human)
(b4 / blood, mod, c3 / capital)
(b6 / battle-01, ARG0, e2 / extreme)
(b6 / battle-01, ARG1, a3 / and)
(b6 / battle-01, mod, b2 / big)
(b6 / battle-01, mod, b5 / bloody)
(c / country, mod, n2 / northeast)
(c / country, mod, o / other)
(c2 / country, name, n / name)
(c3 / capital, mod, a / ancient)
(c4 / city, name, n3 / name)
(c5 / country, name, n4 / name)
(e / experiment-01, ARG0, c4 / city)
(e / experiment-01, ARG1, b3 / body)
(e / experiment-01, ARG2, l3 / live-01)
(f / fade-01, ARG0, c3 / capital)
(f / fade-01, ARG1, l / layer)
(f / fade-01, mod, a4 / away)
(k2 / kill-01, ARG0, m / method)
(k2 / kill-01, ARG1, e3 / everything)
(l / layer, poss, m / method)
(l2 / lay-01, ARG0, a3 / and)
(l2 / lay-01, ARG1, b7 / bone)
(l2 / lay-01, time, 1 / 1)
(l3 / live-01, ARG1, a5 / and)
(n / name, op, "Korea")
(n3 / name, op, "Nanjing")
(n4 / name, op, "China")

Decoded in 5,847,694 microseconds
Sentence: My fellow citizens, of the heinous crimes committed by Japan in China, there are too many instances to cite, difficult to record without exhausting all bamboo strips.

Oracle Span 1:  all => all
Oracle Span 2:  bamboo => bamboo
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  cite => cite-01
Oracle Span 5:  citizens => citizen
Oracle Span 6:  committed => commit-02
Oracle Span 7:  crimes => crime
Oracle Span 8:  difficult => difficult
Oracle Span 9:  exhausting => exhaust-01
Oracle Span 10:  fellow => fellow
Oracle Span 11:  heinous => heinous
Oracle Span 12:  instances => instance
Oracle Span 13:  Japan => (country :name (name :op "Japan"))
Oracle Span 14:  many => many
Oracle Span 15:  record => record-01
Oracle Span 16:  strips => strip
Oracle Span 17:  too => too
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 27-28:   => all
Span 28-29:   => bamboo
Span 29-30:   => strip
Span 24-25:  all => record-01
Span 8-9:  by => commit-02
Span 18-19:  cite, => instance
Span 2-3:  citizens, => citizen
Span 7-8:  committed => crime
Span 1-2:  fellow => fellow
Span 10-11:  in => (country :name (name :op "Japan"))
Span 16-17:  instances => too
Span 26-27:  strips. => exhaust-01
Span 12-13:  there => (country :name (name :op "China"))
Span 20-21:  to => cite-01
Span 17-18:  to => many
Span 22-23:  without => difficult

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 27-28:  all => all
Oracle Span 28-29:  bamboo => bamboo
Oracle Span 12-13:  China => (country :name (name :op "China"))
Oracle Span 20-21:  cite => cite-01
Oracle Span 2-3:  citizens => citizen
Oracle Span 8-9:  committed => commit-02
Oracle Span 7-8:  crimes => crime
Oracle Span 22-23:  difficult => difficult
Oracle Span 26-27:  exhausting => exhaust-01
Oracle Span 1-2:  fellow => fellow
Oracle Span 6-7:  heinous => heinous
Oracle Span 18-19:  instances => instance
Oracle Span 10-11:  Japan => (country :name (name :op "Japan"))
Oracle Span 17-18:  many => many
Oracle Span 24-25:  record => record-01
Oracle Span 29-30:  strips => strip
Oracle Span 16-17:  too => too

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	19	nsubj	_	_
4	,	_	,	,	_	3	punct	_	_
5	of	_	IN	IN	_	3	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	heinous	_	JJ	JJ	_	8	amod	_	_
8	crimes	_	NNS	NNS	_	5	pobj	_	_
9	committed	_	VBN	VBN	_	8	vmod	_	_
10	by	_	IN	IN	_	9	prep	_	_
11	Japan	_	NNP	NNP	_	10	pobj	_	_
12	in	_	IN	IN	_	9	prep	_	_
13	China	_	NNP	NNP	_	12	pobj	_	_
14	,	_	,	,	_	3	punct	_	_
15	there	_	RB	RB	_	19	advmod	_	_
16	are	_	VBP	VBP	_	19	cop	_	_
17	too	_	RB	RB	_	19	advmod	_	_
18	many	_	JJ	JJ	_	19	amod	_	_
19	instances	_	NNS	NNS	_	0	root	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	cite	_	VB	VB	_	19	vmod	_	_
22	,	_	,	,	_	21	punct	_	_
23	difficult	_	JJ	JJ	_	21	acomp	_	_
24	to	_	TO	TO	_	25	aux	_	_
25	record	_	VB	VB	_	23	xcomp	_	_
26	without	_	IN	IN	_	25	prep	_	_
27	exhausting	_	VBG	VBG	_	26	pcomp	_	_
28	all	_	DT	DT	_	30	det	_	_
29	bamboo	_	NN	NN	_	30	nn	_	_
30	strips	_	NNS	NNS	_	27	dobj	_	_
31	.	_	.	.	_	19	punct	_	_

Oracle:
(b / bamboo, consist, s2 / strip)
(c / citizen, mod, f / fellow)
(c2 / crime, mod, h / heinous)
(c3 / commit-02, ARG0, c4 / country)
(c3 / commit-02, ARG1, c2 / crime)
(c3 / commit-02, location, c5 / country)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(c6 / cite-01, ARG1, i / instance)
(e / exhaust-01, ARG1, s2 / strip)
(i / instance, quant, m2 / many)
(i / instance, topic, c2 / crime)
(m2 / many, degree, t / too)
(n / name, op, "Japan")
(n2 / name, op, "China")
(r / record-01, ARG1, i / instance)
(r / record-01, manner, d / difficult)
(r / record-01, manner, e / exhaust-01)
(s2 / strip, quant, a / all)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(2, 1, 0),in,(country :name (name :op "Japan")),false), Span(7,8,List(3),committed,crime,false), Span(26,27,List(4),strips.,exhaust-01,false), Span(2,3,List(5),citizens,,citizen,false), Span(20,21,List(6),to,cite-01,false), Span(22,23,List(7),without,difficult,false), Span(12,13,List(10, 9, 8),there,(country :name (name :op "China")),false), Span(1,2,List(11),fellow,fellow,false), Span(27,28,List(12),,all,false), Span(28,29,List(13),,bamboo,false), Span(18,19,List(14),cite,,instance,false), Span(16,17,List(15),instances,too,false), Span(17,18,List(16),to,many,false), Span(8,9,List(17),by,commit-02,false), Span(29,30,List(18),,strip,false), Span(24,25,List(19),all,record-01,false)),Map(2 -> "Japan", 5 -> citizen, 12 -> all, 15 -> too, 8 -> country, 18 -> strip, 7 -> difficult, 17 -> commit-02, 1 -> name, 4 -> exhaust-01, 11 -> fellow, 14 -> instance, 6 -> cite-01, 0 -> country, 9 -> name, 16 -> many, 19 -> record-01, 3 -> crime, 10 -> "China", 13 -> bamboo),Map(e -> exhaust-01, n -> name, t -> too, b -> bamboo, c4 -> cite-01, s -> strip, m -> many, d -> difficult, c3 -> citizen, a -> all, c6 -> commit-02, r -> record-01, i -> instance, c -> country, f -> fellow, c2 -> crime, n2 -> name, c5 -> country))),[Ljava.lang.String;@2aea49d2,Annotation([Ljava.lang.String;@5a75aa82,[Ljava.lang.String;@37505d9,[Ljava.lang.String;@62600583),Annotation([Ljava.lang.String;@1a3c74c4,[Ljava.lang.String;@6deafcbb,[Ledu.cmu.lti.nlp.amr.Dependency;@461a6712),Annotation([Ljava.lang.String;@24342e4f,[Ljava.lang.String;@5dd7f459,[Ljava.lang.String;@67e2c47c),Annotation([Ljava.lang.String;@72d50d65,[Ljava.lang.String;@77960326,[Ledu.cmu.lti.nlp.amr.Entity;@158154b1))
AMR:
(c / country, name, n / name)
(c3 / citizen, location, c2 / crime)
(c3 / citizen, mod, f / fellow)
(c4 / cite-01, ARG0, i / instance)
(c4 / cite-01, ARG1, d / difficult)
(c4 / cite-01, ARG6, t / too)
(c5 / country, name, n2 / name)
(c6 / commit-02, ARG0, c / country)
(c6 / commit-02, ARG1, c2 / crime)
(c6 / commit-02, ARG2, c5 / country)
(d / difficult, domain, r / record-01)
(e / exhaust-01, ARG1, s / strip)
(i / instance, domain, c3 / citizen)
(i / instance, quant, m / many)
(n / name, op, "Japan")
(n2 / name, op, "China")
(r / record-01, ARG1, e / exhaust-01)
(s / strip, mod, a / all)
(s / strip, mod, b / bamboo)

Decoded in 1,073,935 microseconds
Sentence: It's just as if those ten million deceased souls who lost their lives are wandering over the Pacific Ocean, finding it difficult to rest in peace.

Oracle Span 1:  deceased => decease-01
Oracle Span 2:  difficult => difficult
Oracle Span 3:  finding => find-02
Oracle Span 4:  just => just
Oracle Span 5:  lives => life
Oracle Span 6:  lost => lose-02
Oracle Span 7:  over => over
Oracle Span 8:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))
Oracle Span 9:  peace => peace
Oracle Span 10:  rest => rest-01
Oracle Span 11:  souls => soul
Oracle Span 12:  wandering => wander-01
NER Entity: (country :name (name :op "Pacific" :op "Ocean"))
Spans:
Span 27-28:   => peace
Span 13-14:  are => life
Span 2-3:  as => just
Span 21-22:  difficult => find-01
Span 0-1:  It's => it
Span 0-1:  It's => 1
Span 1-2:  just => be-located-at-91
Span 18-20:  Ocean, finding => (ocean :name (name :op "Pacific" :op "Ocean"))
Span 15-16:  over => wander-01
Span 25-26:  peace. => rest-02
Span 23-24:  rest => difficult
Span 16-17:  the => over
Span 9-10:  who => soul

Langrangian relaxation converged after 90 iterations. Delta = 0.0
Oracle Span 8-9:  deceased => decease-01
Oracle Span 23-24:  difficult => difficult
Oracle Span 21-22:  finding => find-02
Oracle Span 2-3:  just => just
Oracle Span 13-14:  lives => life
Oracle Span 11-12:  lost => lose-02
Oracle Span 16-17:  over => over
Oracle Span 18-20:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))
Oracle Span 27-28:  peace => peace
Oracle Span 25-26:  rest => rest-01
Oracle Span 9-10:  souls => soul
Oracle Span 15-16:  wandering => wander-01

Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	's	_	VBZ	VBZ	_	0	root	_	_
3	just	_	RB	RB	_	16	advmod	_	_
4	as	_	RB	RB	_	16	advmod	_	_
5	if	_	IN	IN	_	16	mark	_	_
6	those	_	DT	DT	_	10	det	_	_
7	ten	_	CD	CD	_	8	number	_	_
8	million	_	CD	CD	_	10	num	_	_
9	deceased	_	JJ	JJ	_	10	amod	_	_
10	souls	_	NNS	NNS	_	16	nsubj	_	_
11	who	_	WP	WP	_	12	nsubj	_	_
12	lost	_	VBD	VBD	_	10	rcmod	_	_
13	their	_	PRP$	PRP$	_	14	poss	_	_
14	lives	_	NNS	NNS	_	12	dobj	_	_
15	are	_	VBP	VBP	_	16	aux	_	_
16	wandering	_	VBG	VBG	_	2	advcl	_	_
17	over	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	Pacific	_	NNP	NNP	_	20	nn	_	_
20	Ocean	_	NNP	NNP	_	17	pobj	_	_
21	,	_	,	,	_	16	punct	_	_
22	finding	_	VBG	VBG	_	16	vmod	_	_
23	it	_	PRP	PRP	_	24	nsubj	_	_
24	difficult	_	JJ	JJ	_	22	xcomp	_	_
25	to	_	TO	TO	_	26	aux	_	_
26	rest	_	VB	VB	_	24	xcomp	_	_
27	in	_	IN	IN	_	26	prep	_	_
28	peace	_	NN	NN	_	27	pobj	_	_
29	.	_	.	.	_	2	punct	_	_

Oracle:
(d / difficult, domain, r / rest-01)
(d2 / decease-01, ARG1, s / soul)
(f / find-02, ARG0, s / soul)
(f / find-02, ARG1, d / difficult)
(l / life, poss, s / soul)
(l3 / lose-02, ARG0, s / soul)
(l3 / lose-02, ARG1, l / life)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)
(o2 / over, op, o / ocean)
(r / rest-01, ARG1, s / soul)
(r / rest-01, manner, p / peace)
(w / wander-01, ARG0, s / soul)
(w / wander-01, ARG1, o2 / over)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),who,soul,false), Span(27,28,List(1),,peace,false), Span(23,24,List(2),rest,difficult,false), Span(15,16,List(3),over,wander-01,false), Span(1,2,List(4),just,be-located-at-91,false), Span(25,26,List(5),peace.,rest-02,false), Span(18,20,List(9, 8, 7, 6),Ocean, finding,(ocean :name (name :op "Pacific" :op "Ocean")),false), Span(13,14,List(10),are,life,false), Span(0,1,List(11),It's,it,false), Span(0,1,List(12),It's,1,false), Span(16,17,List(13),the,over,false), Span(21,22,List(14),difficult,find-01,false), Span(2,3,List(15),as,just,false)),Map(2 -> difficult, 5 -> rest-02, 12 -> 1, 15 -> just, 8 -> "Pacific", 7 -> name, 1 -> peace, 4 -> be-located-at-91, 11 -> it, 14 -> find-01, 6 -> ocean, 0 -> soul, 9 -> "Ocean", 3 -> wander-01, 10 -> life, 13 -> over),Map(w -> wander-01, n -> name, b -> be-located-at-91, j -> just, s -> soul, d -> difficult, 1 -> 1, p -> peace, o2 -> over, r -> rest-02, i -> it, l -> life, f -> find-01, o -> ocean))),[Ljava.lang.String;@1f100322,Annotation([Ljava.lang.String;@a68ff88,[Ljava.lang.String;@d0446d,[Ljava.lang.String;@3fd5bb39),Annotation([Ljava.lang.String;@20c3a6f2,[Ljava.lang.String;@6d9a89dd,[Ledu.cmu.lti.nlp.amr.Dependency;@6f6b4b2f),Annotation([Ljava.lang.String;@7df52988,[Ljava.lang.String;@403ce4f2,[Ljava.lang.String;@79d15949),Annotation([Ljava.lang.String;@4c56576f,[Ljava.lang.String;@183b9e04,[Ledu.cmu.lti.nlp.amr.Entity;@3f87f285))
AMR:
(b / be-located-at-91, ARG0, i / it)
(b / be-located-at-91, ARG1, s / soul)
(b / be-located-at-91, ARG2, j / just)
(b / be-located-at-91, ARG6, 1 / 1)
(d / difficult, domain, r / rest-02)
(f / find-01, ARG1, d / difficult)
(f / find-01, ARG6, w / wander-01)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)
(o2 / over, op, o / ocean)
(r / rest-02, ARG1, p / peace)
(w / wander-01, ARG0, s / soul)
(w / wander-01, ARG1, l / life)
(w / wander-01, ARG6, o2 / over)

Decoded in 1,774,341 microseconds
Sentence: All the people who experienced that era must still remember it vividly; even our younger generations also will cry with tears streaming down our cheeks, and our blood boils with indignation, whenever we turn to this page of history and read!

Oracle Span 1:  ; => and
Oracle Span 2:  All => all
Oracle Span 3:  also => also
Oracle Span 4:  and => and
Oracle Span 5:  blood => blood
Oracle Span 6:  boils => boil-01
Oracle Span 7:  cheeks => cheek
Oracle Span 8:  cry => cry-02
Oracle Span 9:  down => down
Oracle Span 10:  era => era
Oracle Span 11:  even => even
Oracle Span 12:  experienced => (person :ARG0-of experience-01)
Oracle Span 13:  generations => generation
Oracle Span 14:  history => history
Oracle Span 15:  indignation => indignation
Oracle Span 16:  page => page
Oracle Span 17:  read => read-01
Oracle Span 18:  remember => remember-01
Oracle Span 19:  still => still
Oracle Span 20:  streaming => stream-02
Oracle Span 21:  tears => tear
Oracle Span 22:  that => that
Oracle Span 23:  this => this
Oracle Span 24:  turn => turn-01
Oracle Span 25:  vividly => vivid
Oracle Span 26:  we => we
Oracle Span 27:  younger => young
Spans:
Span 42-43:   => and
Span 43-44:   => read-01
Span 41-42:   => history
Span 0-1:  All => all
Span 16-17:  also => generation
Span 39-40:  and => page
Span 27-28:  blood => and
Span 22-23:  down => stream-02
Span 6-7:  era => era
Span 4-5:  experienced => (thing :ARG1-of experience-01)
Span 15-16:  generations => (young :degree more)
Span 38-39:  history => this
Span 7-8:  must => muster-01
Span 13-14:  our => even
Span 36-37:  page => turn-01
Span 9-10:  remember => remember-01
Span 8-9:  still => still
Span 21-22:  streaming => tear
Span 17-18:  will => also
Span 19-20:  with => cry-01
Span 29-30:  with => blood

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Oracle Span 12-13:  ; => and
Oracle Span 0-1:  All => all
Oracle Span 17-18:  also => also
Oracle Span 27-28:  and => and
Oracle Span 29-30:  blood => blood
Oracle Span 30-31:  boils => boil-01
Oracle Span 25-26:  cheeks => cheek
Oracle Span 19-20:  cry => cry-02
Oracle Span 23-24:  down => down
Oracle Span 6-7:  era => era
Oracle Span 13-14:  even => even
Oracle Span 4-5:  experienced => (person :ARG0-of experience-01)
Oracle Span 16-17:  generations => generation
Oracle Span 41-42:  history => history
Oracle Span 32-33:  indignation => indignation
Oracle Span 39-40:  page => page
Oracle Span 43-44:  read => read-01
Oracle Span 9-10:  remember => remember-01
Oracle Span 8-9:  still => still
Oracle Span 22-23:  streaming => stream-02
Oracle Span 21-22:  tears => tear
Oracle Span 5-6:  that => that
Oracle Span 38-39:  this => this
Oracle Span 36-37:  turn => turn-01
Oracle Span 11-12:  vividly => vivid
Oracle Span 35-36:  we => we
Oracle Span 15-16:  younger => young

Dependencies:
1	All	_	PDT	PDT	_	3	predet	_	_
2	the	_	DT	DT	_	3	det	_	_
3	people	_	NNS	NNS	_	0	root	_	_
4	who	_	WP	WP	_	5	nsubj	_	_
5	experienced	_	VBD	VBD	_	3	rcmod	_	_
6	that	_	IN	IN	_	10	mark	_	_
7	era	_	NN	NN	_	10	nsubj	_	_
8	must	_	MD	MD	_	10	aux	_	_
9	still	_	RB	RB	_	10	advmod	_	_
10	remember	_	VB	VB	_	5	ccomp	_	_
11	it	_	PRP	PRP	_	10	dobj	_	_
12	vividly	_	RB	RB	_	10	advmod	_	_
13	;	_	:	:	_	3	punct	_	_
14	even	_	RB	RB	_	20	dep	_	_
15	our	_	PRP$	PRP$	_	17	poss	_	_
16	younger	_	JJR	JJR	_	17	amod	_	_
17	generations	_	NNS	NNS	_	20	nsubj	_	_
18	also	_	RB	RB	_	20	advmod	_	_
19	will	_	MD	MD	_	20	aux	_	_
20	cry	_	VB	VB	_	3	dep	_	_
21	with	_	IN	IN	_	20	prep	_	_
22	tears	_	NNS	NNS	_	21	pobj	_	_
23	streaming	_	VBG	VBG	_	22	vmod	_	_
24	down	_	RP	RP	_	23	prt	_	_
25	our	_	PRP$	PRP$	_	26	poss	_	_
26	cheeks	_	NNS	NNS	_	23	dobj	_	_
27	,	_	,	,	_	20	punct	_	_
28	and	_	CC	CC	_	20	cc	_	_
29	our	_	PRP$	PRP$	_	30	poss	_	_
30	blood	_	NN	NN	_	31	nsubj	_	_
31	boils	_	VBZ	VBZ	_	20	conj	_	_
32	with	_	IN	IN	_	31	prep	_	_
33	indignation	_	NN	NN	_	32	pobj	_	_
34	,	_	,	,	_	33	punct	_	_
35	whenever	_	WRB	WRB	_	37	advmod	_	_
36	we	_	PRP	PRP	_	37	nsubj	_	_
37	turn	_	VBP	VBP	_	33	rcmod	_	_
38	to	_	TO	TO	_	37	prep	_	_
39	this	_	DT	DT	_	40	det	_	_
40	page	_	NN	NN	_	38	pobj	_	_
41	of	_	IN	IN	_	40	prep	_	_
42	history	_	NN	NN	_	41	pobj	_	_
43	and	_	CC	CC	_	37	cc	_	_
44	read	_	VBD	VBD	_	37	conj	_	_
45	!	_	.	.	_	3	punct	_	_

Oracle:
(a2 / and, op, b / boil-01)
(a2 / and, op, c / cry-02)
(a2 / and, time, a4 / and)
(a4 / and, op, r2 / read-01)
(a4 / and, op, t4 / turn-01)
(b / boil-01, ARG1, b2 / blood)
(b / boil-01, manner, i / indignation)
(b2 / blood, poss, w / we)
(c / cry-02, ARG0, g / generation)
(c / cry-02, ARG1, t2 / tear)
(c / cry-02, mod, a3 / also)
(e / era, mod, t / that)
(e2 / experience-01, ARG0, p / person)
(e2 / experience-01, ARG1, e / era)
(g / generation, mod, e3 / even)
(g / generation, mod, y / young)
(g / generation, poss, w / we)
(p / person, quant, a / all)
(p2 / page, mod, h / history)
(p2 / page, mod, t3 / this)
(r / remember-01, ARG0, p / person)
(r / remember-01, ARG1, e / era)
(r / remember-01, manner, v / vivid)
(r2 / read-01, ARG0, w / we)
(r2 / read-01, ARG1, p2 / page)
(s2 / stream-02, ARG1, t2 / tear)
(s2 / stream-02, direction, d / down)
(s2 / stream-02, location, c2 / cheek)
(t4 / turn-01, ARG1, w / we)
(t4 / turn-01, direction, p2 / page)
(w / we, part, c2 / cheek)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),generations,(young :degree more),false), Span(7,8,List(2),must,muster-01,false), Span(8,9,List(3),still,still,false), Span(27,28,List(4),blood,and,false), Span(19,20,List(5),with,cry-01,false), Span(17,18,List(6),will,also,false), Span(42,43,List(7),,and,false), Span(4,5,List(9, 8),experienced,(thing :ARG1-of experience-01),false), Span(13,14,List(10),our,even,false), Span(0,1,List(11),All,all,false), Span(36,37,List(12),page,turn-01,false), Span(22,23,List(13),down,stream-02,false), Span(21,22,List(14),streaming,tear,false), Span(29,30,List(15),with,blood,false), Span(39,40,List(16),and,page,false), Span(16,17,List(17),also,generation,false), Span(43,44,List(18),,read-01,false), Span(6,7,List(19),era,era,false), Span(9,10,List(20),remember,remember-01,false), Span(41,42,List(21),,history,false), Span(38,39,List(22),history,this,false)),Map(2 -> muster-01, 5 -> cry-01, 12 -> turn-01, 15 -> blood, 8 -> thing, 21 -> history, 18 -> read-01, 7 -> and, 17 -> generation, 1 -> more, 4 -> and, 11 -> all, 14 -> tear, 20 -> remember-01, 6 -> also, 22 -> this, 0 -> young, 9 -> experience-01, 16 -> page, 19 -> era, 3 -> still, 10 -> even, 13 -> stream-02),Map(e -> experience-01, t4 -> this, h -> history, s2 -> stream-02, b -> blood, t -> thing, m2 -> muster-01, e2 -> even, a3 -> and, s -> still, m -> more, t3 -> tear, r2 -> remember-01, g -> generation, p -> page, y -> young, a -> and, t2 -> turn-01, r -> read-01, a2 -> also, c -> cry-01, e3 -> era, a4 -> all))),[Ljava.lang.String;@2d627328,Annotation([Ljava.lang.String;@5e10cca7,[Ljava.lang.String;@763d563d,[Ljava.lang.String;@2912e103),Annotation([Ljava.lang.String;@17d72c3a,[Ljava.lang.String;@4f7aaf93,[Ledu.cmu.lti.nlp.amr.Dependency;@53ea84ff),Annotation([Ljava.lang.String;@6d4e7d78,[Ljava.lang.String;@43563a17,[Ljava.lang.String;@594a13d9),Annotation([Ljava.lang.String;@5e00b973,[Ljava.lang.String;@40bbaa76,[Ledu.cmu.lti.nlp.amr.Entity;@324fa6f4))
AMR:
(a / and, op, c / cry-01)
(a3 / and, op, r / read-01)
(a3 / and, op, t2 / turn-01)
(c / cry-01, ARG0, g / generation)
(c / cry-01, ARG1, b / blood)
(c / cry-01, ARG2, t3 / tear)
(c / cry-01, ARG6, e2 / even)
(c / cry-01, mod, a2 / also)
(e / experience-01, ARG1, t / thing)
(e / experience-01, ARG2, e3 / era)
(e / experience-01, ARG6, a4 / all)
(g / generation, age, y / young)
(m2 / muster-01, ARG1, r2 / remember-01)
(p / page, mod, t4 / this)
(r / read-01, ARG1, s2 / stream-02)
(r2 / remember-01, ARG0, e3 / era)
(r2 / remember-01, ARG1, e2 / even)
(r2 / remember-01, mod, s / still)
(s2 / stream-02, ARG1, t3 / tear)
(t2 / turn-01, ARG1, p / page)
(t2 / turn-01, ARG2, h / history)
(y / young, degree, m / more)

Decoded in 2,856,370 microseconds
Sentence: Now Japan actually wants to reverse the verdict on the history of its aggression - fellow citizens, fellow Chinese in Asia, wake up!

Oracle Span 1:  actually => actual
Oracle Span 2:  aggression => aggression
Oracle Span 3:  Asia => (continent :name (name :op "Asia"))
Oracle Span 4:  Chinese => (country :name (name :op "China"))
Oracle Span 5:  citizens => citizen
Oracle Span 6:  fellow => fellow
Oracle Span 7:  history => history
Oracle Span 8:  Japan => (country :name (name :op "Japan"))
Oracle Span 9:  Now => now
Oracle Span 10:  reverse => reverse-01
Oracle Span 11:  verdict => verdict
Oracle Span 12:  wake => wake-02
Oracle Span 13:  wants => want-01
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Asia"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 23-24:   => wake
Span 2-3:  actually => actual
Span 13-14:  aggression => aggression
Span 18-19:  Chinese => fellow
Span 16-17:  citizens, => citizen
Span 15-16:  fellow => fellow
Span 10-11:  history => history
Span 1-2:  Japan => (country :name (name :op "Japan"))
Span 0-1:  Now => (date-entity :time now)
Span 5-6:  reverse => reverse-01
Span 7-8:  verdict => verdict
Span 21-22:  wake => (continent :name (name :op "Asia"))
Span 3-4:  wants => want-01

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Oracle Span 2-3:  actually => actual
Oracle Span 13-14:  aggression => aggression
Oracle Span 21-22:  Asia => (continent :name (name :op "Asia"))
Oracle Span 19-20:  Chinese => (country :name (name :op "China"))
Oracle Span 16-17:  citizens => citizen
Oracle Span 15-16:  fellow => fellow
Oracle Span 10-11:  history => history
Oracle Span 1-2:  Japan => (country :name (name :op "Japan"))
Oracle Span 0-1:  Now => now
Oracle Span 5-6:  reverse => reverse-01
Oracle Span 7-8:  verdict => verdict
Oracle Span 23-24:  wake => wake-02
Oracle Span 3-4:  wants => want-01

Dependencies:
1	Now	_	NNP	NNP	_	2	nn	_	_
2	Japan	_	NNP	NNP	_	4	nsubj	_	_
3	actually	_	RB	RB	_	4	advmod	_	_
4	wants	_	VBZ	VBZ	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	reverse	_	VB	VB	_	4	xcomp	_	_
7	the	_	DT	DT	_	8	det	_	_
8	verdict	_	NN	NN	_	6	dobj	_	_
9	on	_	IN	IN	_	6	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	history	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	its	_	PRP$	PRP$	_	14	poss	_	_
14	aggression	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	4	punct	_	_
16	fellow	_	JJ	JJ	_	17	amod	_	_
17	citizens	_	NNS	NNS	_	24	nsubj	_	_
18	,	_	,	,	_	17	punct	_	_
19	fellow	_	JJ	JJ	_	20	amod	_	_
20	Chinese	_	NNPS	NNPS	_	17	appos	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	Asia	_	NNP	NNP	_	21	pobj	_	_
23	,	_	,	,	_	17	punct	_	_
24	wake	_	VBP	VBP	_	4	parataxis	_	_
25	up	_	RP	RP	_	24	prt	_	_
26	!	_	.	.	_	4	punct	_	_

Oracle:
(a4 / aggression, poss, c3 / country)
(c2 / continent, name, n / name)
(c3 / country, name, n2 / name)
(c5 / country, name, n4 / name)
(h / history, mod, a4 / aggression)
(n / name, op, "Asia")
(n2 / name, op, "Japan")
(n4 / name, op, "China")
(r / reverse-01, ARG0, c3 / country)
(r / reverse-01, ARG1, v / verdict)
(v / verdict, topic, h / history)
(w2 / want-01, ARG0, c3 / country)
(w2 / want-01, ARG1, r / reverse-01)
(w2 / want-01, mod, a / actual)
(w2 / want-01, time, n3 / now)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(1, 0),Now,(date-entity :time now),false), Span(10,11,List(2),history,history,false), Span(5,6,List(3),reverse,reverse-01,false), Span(18,19,List(4),Chinese,fellow,false), Span(23,24,List(5),,wake,false), Span(7,8,List(6),verdict,verdict,false), Span(13,14,List(7),aggression,aggression,false), Span(21,22,List(10, 9, 8),wake,(continent :name (name :op "Asia")),false), Span(1,2,List(13, 12, 11),Japan,(country :name (name :op "Japan")),false), Span(15,16,List(14),fellow,fellow,false), Span(16,17,List(15),citizens,,citizen,false), Span(2,3,List(16),actually,actual,false), Span(3,4,List(17),wants,want-01,false)),Map(2 -> history, 5 -> wake, 12 -> name, 15 -> citizen, 8 -> continent, 7 -> aggression, 17 -> want-01, 1 -> now, 4 -> fellow, 11 -> country, 14 -> fellow, 6 -> verdict, 0 -> date-entity, 9 -> name, 16 -> actual, 3 -> reverse-01, 10 -> "Asia", 13 -> "Japan"),Map(n -> now, w -> wake, h -> history, v -> verdict, d -> date-entity, c3 -> citizen, a -> aggression, n3 -> name, w2 -> want-01, a2 -> actual, r -> reverse-01, c -> continent, f2 -> fellow, f -> fellow, n2 -> name, c2 -> country))),[Ljava.lang.String;@48d446fa,Annotation([Ljava.lang.String;@18e8db63,[Ljava.lang.String;@1b3af6d7,[Ljava.lang.String;@664a7723),Annotation([Ljava.lang.String;@c431e86,[Ljava.lang.String;@522eefae,[Ledu.cmu.lti.nlp.amr.Dependency;@1e6e2772),Annotation([Ljava.lang.String;@2b28a8f3,[Ljava.lang.String;@3f8b343e,[Ljava.lang.String;@1afdfffe),Annotation([Ljava.lang.String;@75471e64,[Ljava.lang.String;@1b465f0f,[Ledu.cmu.lti.nlp.amr.Entity;@7d0aa29d))
AMR:
(c / continent, name, n2 / name)
(c / continent, op, w2 / want-01)
(c2 / country, name, n3 / name)
(c3 / citizen, mod, f2 / fellow)
(d / date-entity, time, n / now)
(h / history, poss, a / aggression)
(n2 / name, op, "Asia")
(n3 / name, op, "Japan")
(r / reverse-01, ARG0, c3 / citizen)
(r / reverse-01, ARG1, v / verdict)
(r / reverse-01, location, h / history)
(w / wake, calendar, c3 / citizen)
(w / wake, duration, f / fellow)
(w2 / want-01, ARG0, c2 / country)
(w2 / want-01, ARG1, r / reverse-01)
(w2 / want-01, ARG6, d / date-entity)
(w2 / want-01, mod, a2 / actual)

Decoded in 1,285,866 microseconds
Sentence: Although it is painful to look back at these hundred years of shame, we must go face it; although historical issues have not been resolved, let us create and choose history!

Oracle Span 1:  ; => and
Oracle Span 2:  back => back
Oracle Span 3:  choose => choose-01
Oracle Span 4:  create => create-01
Oracle Span 5:  face => face-01
Oracle Span 6:  go => go-05
Oracle Span 7:  history => history
Oracle Span 8:  issues => issue
Oracle Span 9:  look => look-01
Oracle Span 10:  painful => pain-01
Oracle Span 11:  resolved => resolve-01
Oracle Span 12:  shame => shame
Oracle Span 13:  we => we
Oracle Span 14:  years => (temporal-quantity :unit year)
Spans:
Span 32-33:   => choose-01
Span 31-32:   => and
Span 33-34:   => history
Span 28-29:  and => let-01
Span 6-7:  back => back
Span 29-30:  choose => w
Span 27-28:  create => and
Span 16-17:  face => go-06
Span 15-16:  go => muster-01
Span 21-22:  have => historical
Span 30-31:  history! => create-01
Span 17-18:  it; => face-01
Span 5-6:  look => look-01
Span 22-23:  not => issue
Span 3-4:  painful => painful
Span 12-13:  shame, => shame-01
Span 8-9:  these => this
Span 26-27:  us => resolve-01
Span 10-11:  years => year

Langrangian relaxation converged after 89 iterations. Delta = 0.0
Oracle Span 19-20:  ; => and
Oracle Span 6-7:  back => back
Oracle Span 32-33:  choose => choose-01
Oracle Span 30-31:  create => create-01
Oracle Span 17-18:  face => face-01
Oracle Span 16-17:  go => go-05
Oracle Span 33-34:  history => history
Oracle Span 22-23:  issues => issue
Oracle Span 5-6:  look => look-01
Oracle Span 3-4:  painful => pain-01
Oracle Span 26-27:  resolved => resolve-01
Oracle Span 12-13:  shame => shame
Oracle Span 14-15:  we => we
Oracle Span 10-11:  years => (temporal-quantity :unit year)

Dependencies:
1	Although	_	IN	IN	_	4	mark	_	_
2	it	_	PRP	PRP	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	painful	_	JJ	JJ	_	17	advcl	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	look	_	VB	VB	_	4	xcomp	_	_
7	back	_	RP	RP	_	6	prt	_	_
8	at	_	IN	IN	_	6	prep	_	_
9	these	_	DT	DT	_	11	det	_	_
10	hundred	_	CD	CD	_	11	num	_	_
11	years	_	NNS	NNS	_	8	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	shame	_	NN	NN	_	12	pobj	_	_
14	,	_	,	,	_	17	punct	_	_
15	we	_	PRP	PRP	_	17	nsubj	_	_
16	must	_	MD	MD	_	17	aux	_	_
17	go	_	VB	VB	_	0	root	_	_
18	face	_	VB	VB	_	17	xcomp	_	_
19	it	_	PRP	PRP	_	18	dobj	_	_
20	;	_	:	:	_	17	punct	_	_
21	although	_	IN	IN	_	27	mark	_	_
22	historical	_	JJ	JJ	_	23	amod	_	_
23	issues	_	NNS	NNS	_	27	nsubjpass	_	_
24	have	_	VBP	VBP	_	27	aux	_	_
25	not	_	RB	RB	_	27	neg	_	_
26	been	_	VBN	VBN	_	27	auxpass	_	_
27	resolved	_	VBN	VBN	_	29	advcl	_	_
28	,	_	,	,	_	29	punct	_	_
29	let	_	VB	VB	_	17	parataxis	_	_
30	us	_	PRP	PRP	_	31	nsubj	_	_
31	create	_	VB	VB	_	29	ccomp	_	_
32	and	_	CC	CC	_	31	cc	_	_
33	choose	_	VB	VB	_	31	conj	_	_
34	history	_	NN	NN	_	31	dobj	_	_
35	!	_	.	.	_	17	punct	_	_

Oracle:
(a2 / and, concession, r / resolve-01)
(a2 / and, op, c / create-01)
(a2 / and, op, c2 / choose-01)
(f / face-01, ARG0, w / we)
(f / face-01, ARG1, t / temporal-quantity)
(g / go-05, ARG0, w / we)
(g / go-05, ARG1, f / face-01)
(i2 / issue, mod, h2 / history)
(l / look-01, ARG0, w / we)
(l / look-01, ARG1, t / temporal-quantity)
(l / look-01, direction, b / back)
(p / pain-01, ARG0, l / look-01)
(p / pain-01, ARG1, w / we)
(r / resolve-01, ARG1, i2 / issue)
(s / shame, duration, t / temporal-quantity)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),painful,painful,false), Span(8,9,List(1),these,this,false), Span(27,28,List(2),create,and,false), Span(29,30,List(3),choose,w,false), Span(5,6,List(4),look,look-01,false), Span(28,29,List(5),and,let-01,false), Span(21,22,List(6),have,historical,false), Span(32,33,List(7),,choose-01,false), Span(6,7,List(8),back,back,false), Span(31,32,List(9),,and,false), Span(30,31,List(10),history!,create-01,false), Span(33,34,List(11),,history,false), Span(15,16,List(12),go,muster-01,false), Span(26,27,List(13),us,resolve-01,false), Span(10,11,List(14),years,year,false), Span(17,18,List(15),it;,face-01,false), Span(16,17,List(16),face,go-06,false), Span(22,23,List(17),not,issue,false), Span(12,13,List(18),shame,,shame-01,false)),Map(2 -> and, 5 -> let-01, 12 -> muster-01, 15 -> face-01, 8 -> back, 18 -> shame-01, 7 -> choose-01, 17 -> issue, 1 -> this, 4 -> look-01, 11 -> history, 14 -> year, 6 -> historical, 0 -> painful, 9 -> and, 16 -> go-06, 3 -> w, 10 -> create-01, 13 -> resolve-01),Map(w -> w, h -> historical, h2 -> history, t -> this, b -> back, s -> shame-01, m -> muster-01, g -> go-06, y -> year, p -> painful, a -> and, l2 -> let-01, i -> issue, r -> resolve-01, a2 -> and, c -> choose-01, l -> look-01, f -> face-01, c2 -> create-01))),[Ljava.lang.String;@2e4627c9,Annotation([Ljava.lang.String;@584c1de8,[Ljava.lang.String;@4ebc75c8,[Ljava.lang.String;@66918409),Annotation([Ljava.lang.String;@79f68f7d,[Ljava.lang.String;@41ed6ef6,[Ledu.cmu.lti.nlp.amr.Dependency;@6c524136),Annotation([Ljava.lang.String;@6892179,[Ljava.lang.String;@4b49dbb2,[Ljava.lang.String;@61f986f3),Annotation([Ljava.lang.String;@1fdc300b,[Ljava.lang.String;@50914860,[Ledu.cmu.lti.nlp.amr.Entity;@55809d8b))
AMR:
(a2 / and, op, c / choose-01)
(a2 / and, op, c2 / create-01)
(c / choose-01, ARG1, h2 / history)
(c2 / create-01, ARG0, w / w)
(f / face-01, ARG1, p / painful)
(g / go-06, ARG1, f / face-01)
(g / go-06, ARG6, l2 / let-01)
(i / issue, mod, h / historical)
(l / look-01, ARG1, y / year)
(l / look-01, ARG6, b / back)
(l2 / let-01, ARG1, a2 / and)
(l2 / let-01, ARG6, r / resolve-01)
(m / muster-01, ARG1, g / go-06)
(p / painful, domain, l / look-01)
(r / resolve-01, ARG1, i / issue)
(r / resolve-01, ARG6, a / and)
(s / shame-01, ARG1, h2 / history)
(y / year, mod, t / this)

Decoded in 2,669,200 microseconds
Sentence: Since there is responsibility, we are not afraid. The territory is small, but it is related to the matter of dignity; no matter how the winds and clouds changes, the interests of the country and national unity are the guarantee of honor; even though scarred with wounds, we can not let our native lands be separated!

Oracle Span 1:  ; => and
Oracle Span 2:  and => and
Oracle Span 3:  can => possible
Oracle Span 4:  changes => (thing :manner-of change-01)
Oracle Span 5:  clouds => cloud
Oracle Span 6:  country => country
Oracle Span 7:  dignity => dignity
Oracle Span 8:  guarantee => guarantee-01
Oracle Span 9:  honor => honor
Oracle Span 10:  interests => interest
Oracle Span 11:  lands => land
Oracle Span 12:  let => let-01
Oracle Span 13:  matter => matter
Oracle Span 14:  national => nation
Oracle Span 15:  native => native
Oracle Span 16:  related => relate-01
Oracle Span 17:  responsibility => responsible-41
Oracle Span 18:  scarred => scar-01
Oracle Span 19:  separated => separate-01
Oracle Span 20:  small => small
Oracle Span 21:  territory => territory
Oracle Span 22:  unity => unity
Oracle Span 23:  we => we
Oracle Span 24:  we => we
Oracle Span 25:  winds => wind
Oracle Span 26:  wounds => wound-01
Spans:
Span 62-63:   => separate-01
Span 59-60:   => native
Span 57-58:   => let-01
Span 26-27:  and => matter
Span 48-49:  can => even
Span 39-40:  guarantee => and
Span 23-24:  how => dignity
Span 30-31:  interests => and
Span 13-14:  it => small
Span 50-51:  let => scar-01
Span 18-19:  matter => relate-01
Span 35-36:  national => interest-01
Span 52-53:  native => wound
Span 21-22:  no => matter
Span 40-41:  of => nation
Span 15-16:  related => bunt-01
Span 3-4:  responsibility, => respire-01
Span 44-45:  scarred => guarantee-01
Span 55-56:  separated! => possible
Span 0-1:  Since => (since :op date-entity)
Span 11-12:  small, => territory
Span 8-9:  The => afford-01
Span 29-30:  the => concern-02
Span 32-33:  the => change-01
Span 16-17:  to => country
Span 25-26:  winds => no
Span 46-47:  wounds, => honor

 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of native in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lands in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of separated in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Langrangian relaxation converged after 44 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of native in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lands in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of separated in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Oracle Span 24-25:  ; => and
Oracle Span 30-31:  and => and
Oracle Span 55-56:  can => possible
Oracle Span 32-33:  changes => (thing :manner-of change-01)
Oracle Span 31-32:  clouds => cloud
Oracle Span 38-39:  country => country
Oracle Span 23-24:  dignity => dignity
Oracle Span 44-45:  guarantee => guarantee-01
Oracle Span 46-47:  honor => honor
Oracle Span 35-36:  interests => interest
Oracle Span 60-61:  lands => land
Oracle Span 57-58:  let => let-01
Oracle Span 21-22:  matter => matter
Oracle Span 40-41:  national => nation
Oracle Span 59-60:  native => native
Oracle Span 18-19:  related => relate-01
Oracle Span 3-4:  responsibility => responsible-41
Oracle Span 50-51:  scarred => scar-01
Oracle Span 62-63:  separated => separate-01
Oracle Span 13-14:  small => small
Oracle Span 11-12:  territory => territory
Oracle Span 41-42:  unity => unity
Oracle Span 5-6:  we => we
Oracle Span 54-55:  we => we
Oracle Span 29-30:  winds => wind
Oracle Span 52-53:  wounds => wound-01

Dependencies:
1	Since	_	IN	IN	_	3	mark	_	_
2	there	_	EX	EX	_	3	expl	_	_
3	is	_	VBZ	VBZ	_	7	advcl	_	_
4	responsibility	_	NN	NN	_	3	nsubj	_	_
5	,	_	,	,	_	7	punct	_	_
6	we	_	PRP	PRP	_	7	nsubj	_	_
7	are	_	VBP	VBP	_	0	root	_	_
8	not	_	RB	RB	_	7	neg	_	_
9	afraid	_	JJ	JJ	_	7	acomp	_	_
10	.	_	.	.	_	7	punct	_	_
1	The	_	DT	DT	_	2	det	_	_
2	territory	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	small	_	JJ	JJ	_	0	root	_	_
5	,	_	,	,	_	4	punct	_	_
6	but	_	CC	CC	_	4	cc	_	_
7	it	_	PRP	PRP	_	9	nsubjpass	_	_
8	is	_	VBZ	VBZ	_	9	auxpass	_	_
9	related	_	VBN	VBN	_	4	conj	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	matter	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	dignity	_	NN	NN	_	13	pobj	_	_
15	;	_	:	:	_	4	punct	_	_
16	no	_	DT	DT	_	17	neg	_	_
17	matter	_	NN	NN	_	23	advmod	_	_
18	how	_	WRB	WRB	_	23	advmod	_	_
19	the	_	DT	DT	_	20	det	_	_
20	winds	_	NNS	NNS	_	23	nsubj	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	clouds	_	NNS	NNS	_	20	conj	_	_
23	changes	_	VBZ	VBZ	_	35	advcl	_	_
24	,	_	,	,	_	35	punct	_	_
25	the	_	DT	DT	_	26	det	_	_
26	interests	_	NNS	NNS	_	35	nsubj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	country	_	NN	NN	_	27	pobj	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	national	_	JJ	JJ	_	32	amod	_	_
32	unity	_	NN	NN	_	29	conj	_	_
33	are	_	VBP	VBP	_	35	cop	_	_
34	the	_	DT	DT	_	35	det	_	_
35	guarantee	_	NN	NN	_	4	conj	_	_
36	of	_	IN	IN	_	35	prep	_	_
37	honor	_	NN	NN	_	36	pobj	_	_
38	;	_	:	:	_	4	punct	_	_
39	even	_	RB	RB	_	41	advmod	_	_
40	though	_	IN	IN	_	41	mark	_	_
41	scarred	_	VBN	VBN	_	48	advcl	_	_
42	with	_	IN	IN	_	41	prep	_	_
43	wounds	_	NNS	NNS	_	42	pobj	_	_
44	,	_	,	,	_	48	punct	_	_
45	we	_	PRP	PRP	_	48	nsubj	_	_
46	can	_	MD	MD	_	48	aux	_	_
47	not	_	RB	RB	_	48	neg	_	_
48	let	_	VB	VB	_	4	conj	_	_
49	our	_	PRP$	PRP$	_	51	poss	_	_
50	native	_	JJ	JJ	_	51	amod	_	_
51	lands	_	NNS	NNS	_	53	nsubjpass	_	_
52	be	_	VB	VB	_	53	auxpass	_	_
53	separated	_	VBN	VBN	_	48	ccomp	_	_
54	!	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c3 / country)
(a / and, op, u / unity)
(a2 / and, op, c2 / cloud)
(a2 / and, op, w2 / wind)
(c4 / change-01, ARG1, a2 / and)
(c4 / change-01, manner, t2 / thing)
(g / guarantee-01, ARG0, i / interest)
(g / guarantee-01, ARG1, h / honor)
(g / guarantee-01, concession, t2 / thing)
(i / interest, poss, a / and)
(l / let-01, ARG0, w3 / we)
(l / let-01, ARG1, s2 / separate-01)
(l / let-01, concession, s3 / scar-01)
(l2 / land, mod, n3 / native)
(l2 / land, poss, w3 / we)
(m2 / matter, topic, d / dignity)
(p / possible, domain, l / let-01)
(r2 / relate-01, ARG1, t / territory)
(r2 / relate-01, ARG2, m2 / matter)
(s / small, domain, t / territory)
(s2 / separate-01, ARG1, l2 / land)
(s3 / scar-01, ARG1, l2 / land)
(s3 / scar-01, manner, w4 / wound-01)
(u / unity, mod, n / nation)
(w4 / wound-01, ARG1, l2 / land)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),matter,relate-01,false), Span(52,53,List(1),native,wound,false), Span(0,1,List(3, 2),Since,(since :op date-entity),false), Span(46,47,List(4),wounds,,honor,false), Span(8,9,List(5),The,afford-01,false), Span(62,63,List(6),,separate-01,false), Span(30,31,List(7),interests,and,false), Span(29,30,List(8),the,concern-02,false), Span(40,41,List(9),of,nation,false), Span(16,17,List(10),to,country,false), Span(50,51,List(11),let,scar-01,false), Span(3,4,List(12),responsibility,,respire-01,false), Span(59,60,List(13),,native,false), Span(48,49,List(14),can,even,false), Span(44,45,List(15),scarred,guarantee-01,false), Span(23,24,List(16),how,dignity,false), Span(11,12,List(17),small,,territory,false), Span(13,14,List(18),it,small,false), Span(57,58,List(19),,let-01,false), Span(25,26,List(20),winds,no,false), Span(55,56,List(21),separated!,possible,false), Span(26,27,List(22),and,matter,false), Span(15,16,List(23),related,bunt-01,false), Span(21,22,List(24),no,matter,false), Span(35,36,List(25),national,interest-01,false), Span(39,40,List(26),guarantee,and,false), Span(32,33,List(27),the,change-01,false)),Map(2 -> since, 5 -> afford-01, 27 -> change-01, 12 -> respire-01, 8 -> concern-02, 15 -> guarantee-01, 21 -> possible, 18 -> small, 24 -> matter, 7 -> and, 1 -> wound, 17 -> territory, 23 -> bunt-01, 26 -> and, 4 -> honor, 11 -> scar-01, 14 -> even, 20 -> no, 6 -> separate-01, 9 -> nation, 0 -> relate-01, 22 -> matter, 16 -> dignity, 19 -> let-01, 10 -> country, 3 -> date-entity, 25 -> interest-01, 13 -> native),Map(e -> even, n -> nation, w -> wound, h -> honor, s2 -> separate-01, t -> territory, b -> bunt-01, m2 -> matter, a3 -> and, s -> since, s4 -> small, d -> date-entity, m -> matter, r2 -> respire-01, g -> guarantee-01, p -> possible, c3 -> change-01, a -> afford-01, n3 -> no, d2 -> dignity, i -> interest-01, a2 -> and, r -> relate-01, c -> concern-02, s3 -> scar-01, l -> let-01, c2 -> country, n2 -> native))),[Ljava.lang.String;@2c0084d0,Annotation([Ljava.lang.String;@3c086293,[Ljava.lang.String;@11dcc198,[Ljava.lang.String;@162d4d53),Annotation([Ljava.lang.String;@3e236d42,[Ljava.lang.String;@41c08cef,[Ledu.cmu.lti.nlp.amr.Dependency;@3667454e),Annotation([Ljava.lang.String;@4a5cc104,[Ljava.lang.String;@6f30ec70,[Ljava.lang.String;@2a52a28d),Annotation([Ljava.lang.String;@2693dfbc,[Ljava.lang.String;@aeb7e8b,[Ledu.cmu.lti.nlp.amr.Entity;@62d050ca))
AMR:
(a / afford-01, ARG1, t / territory)
(a2 / and, op, c / concern-02)
(a2 / and, op, p / possible)
(a3 / and, op, n / nation)
(b / bunt-01, ARG1, s4 / small)
(b / bunt-01, ARG2, r / relate-01)
(b / bunt-01, ARG6, c2 / country)
(c / concern-02, ARG1, m / matter)
(c3 / change-01, ARG1, d2 / dignity)
(c3 / change-01, ARG6, n3 / no)
(c3 / change-01, location, a2 / and)
(g / guarantee-01, ARG0, c2 / country)
(g / guarantee-01, ARG1, h / honor)
(g / guarantee-01, ARG6, w / wound)
(i / interest-01, ARG1, a3 / and)
(i / interest-01, ARG6, c3 / change-01)
(l / let-01, ARG1, a / afford-01)
(l / let-01, time, s / since)
(n2 / native, time, s / since)
(p / possible, time, s / since)
(r / relate-01, ARG1, m2 / matter)
(r / relate-01, ARG2, d2 / dignity)
(r2 / respire-01, ARG1, d2 / dignity)
(s / since, op, d / date-entity)
(s2 / separate-01, ARG1, a / afford-01)
(s3 / scar-01, ARG1, w / wound)
(s3 / scar-01, ARG6, e / even)

Decoded in 4,106,836 microseconds
Sentence: My fellow citizens, for the Chinese nation, the advent of the twenty-first century means a time when we are beset with difficulties inside while being pressed from outside, and we will face many challenges.

Oracle Span 1:  advent => advent
Oracle Span 2:  and => and
Oracle Span 3:  beset => beset-01
Oracle Span 4:  challenges => (thing :ARG2-of challenge-01)
Oracle Span 5:  Chinese => (country :name (name :op "China"))
Oracle Span 6:  citizens => citizen
Oracle Span 7:  difficulties => difficulty
Oracle Span 8:  face => face-01
Oracle Span 9:  fellow => fellow
Oracle Span 10:  inside => inside
Oracle Span 11:  many => many
Oracle Span 12:  means => mean-01
Oracle Span 13:  nation => nation
Oracle Span 14:  outside => outside
Oracle Span 15:  pressed => press-01
Oracle Span 16:  time => time
Oracle Span 17:  we => we
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 35-36:   => many
Span 36-37:   => challenge
Span 34-35:   => face-01
Span 24-25:  being => inside
Span 2-3:  citizens, => citizen
Span 21-22:  difficulties => beset-01
Span 1-2:  fellow => fellow
Span 0-14:  My fellow citizens, for the Chinese nation, the advent of the twenty-first century means => (ordinal-entity :value 1)
Span 6-7:  nation, => (country :name (name :op "China"))
Span 27-28:  outside, => press-01
Span 25-26:  pressed => will-01
Span 15-16:  time => mean-01
Span 17-18:  we => time
Span 29-30:  we => outside
Span 23-24:  while => difficulty

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 10-11:  advent => advent
Oracle Span 33-34:  and => and
Oracle Span 23-24:  beset => beset-01
Oracle Span 38-39:  challenges => (thing :ARG2-of challenge-01)
Oracle Span 6-7:  Chinese => (country :name (name :op "China"))
Oracle Span 2-3:  citizens => citizen
Oracle Span 25-26:  difficulties => difficulty
Oracle Span 36-37:  face => face-01
Oracle Span 1-2:  fellow => fellow
Oracle Span 26-27:  inside => inside
Oracle Span 37-38:  many => many
Oracle Span 17-18:  means => mean-01
Oracle Span 7-8:  nation => nation
Oracle Span 31-32:  outside => outside
Oracle Span 29-30:  pressed => press-01
Oracle Span 19-20:  time => time
Oracle Span 21-22:  we => we

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	16	nsubj	_	_
4	,	_	,	,	_	16	punct	_	_
5	for	_	IN	IN	_	16	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Chinese	_	JJ	JJ	_	8	amod	_	_
8	nation	_	NN	NN	_	5	pobj	_	_
9	,	_	,	,	_	16	punct	_	_
10	the	_	DT	DT	_	11	det	_	_
11	advent	_	NN	NN	_	16	nsubj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	twenty-first	_	JJ	JJ	_	15	amod	_	_
15	century	_	NN	NN	_	12	pobj	_	_
16	means	_	VBZ	VBZ	_	0	root	_	_
17	a	_	DT	DT	_	18	det	_	_
18	time	_	NN	NN	_	16	dobj	_	_
19	when	_	WRB	WRB	_	22	advmod	_	_
20	we	_	PRP	PRP	_	22	nsubjpass	_	_
21	are	_	VBP	VBP	_	22	auxpass	_	_
22	beset	_	VBN	VBN	_	18	rcmod	_	_
23	with	_	IN	IN	_	22	prep	_	_
24	difficulties	_	NNS	NNS	_	23	pobj	_	_
25	inside	_	IN	IN	_	24	prep	_	_
26	while	_	NN	NN	_	25	pobj	_	_
27	being	_	VBG	VBG	_	28	auxpass	_	_
28	pressed	_	VBN	VBN	_	26	vmod	_	_
29	from	_	IN	IN	_	28	prep	_	_
30	outside	_	RB	RB	_	29	pobj	_	_
31	,	_	,	,	_	16	punct	_	_
32	and	_	CC	CC	_	16	cc	_	_
33	we	_	PRP	PRP	_	35	nsubj	_	_
34	will	_	MD	MD	_	35	aux	_	_
35	face	_	VB	VB	_	16	conj	_	_
36	many	_	JJ	JJ	_	37	amod	_	_
37	challenges	_	NNS	NNS	_	35	dobj	_	_
38	.	_	.	.	_	16	punct	_	_

Oracle:
(a / and, op, f2 / face-01)
(a / and, op, m2 / mean-01)
(b / beset-01, ARG0, d2 / difficulty)
(b / beset-01, ARG1, w / we)
(b / beset-01, location, i2 / inside)
(c / citizen, mod, f / fellow)
(c2 / challenge-01, ARG1, w / we)
(c2 / challenge-01, ARG2, t2 / thing)
(c3 / country, name, n2 / name)
(f2 / face-01, ARG0, w / we)
(f2 / face-01, ARG1, t2 / thing)
(m2 / mean-01, ARG0, a2 / advent)
(m2 / mean-01, ARG1, t / time)
(m2 / mean-01, ARG2, n / nation)
(n / nation, mod, c3 / country)
(n2 / name, op, "China")
(p / press-01, ARG1, w / we)
(p / press-01, source, o / outside)
(t2 / thing, quant, m / many)

Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),,many,false), Span(2,3,List(1),citizens,,citizen,false), Span(36,37,List(2),,challenge,false), Span(17,18,List(3),we,time,false), Span(1,2,List(4),fellow,fellow,false), Span(23,24,List(5),while,difficulty,false), Span(0,14,List(7, 6),My fellow citizens, for the Chinese nation, the advent of the twenty-first century means,(ordinal-entity :value 1),false), Span(29,30,List(8),we,outside,false), Span(24,25,List(9),being,inside,false), Span(6,7,List(12, 11, 10),nation,,(country :name (name :op "China")),false), Span(21,22,List(13),difficulties,beset-01,false), Span(27,28,List(14),outside,,press-01,false), Span(25,26,List(15),pressed,will-01,false), Span(15,16,List(16),time,mean-01,false), Span(34,35,List(17),,face-01,false)),Map(2 -> challenge, 5 -> difficulty, 12 -> "China", 15 -> will-01, 8 -> outside, 7 -> 1, 17 -> face-01, 1 -> citizen, 4 -> fellow, 11 -> name, 14 -> press-01, 6 -> ordinal-entity, 0 -> many, 9 -> inside, 16 -> mean-01, 3 -> time, 10 -> country, 13 -> beset-01),Map(w -> will-01, n -> name, t -> time, b -> beset-01, m2 -> mean-01, m -> many, d -> difficulty, 1 -> 1, p -> press-01, c3 -> country, o2 -> outside, i -> inside, c -> citizen, f2 -> face-01, f -> fellow, o -> ordinal-entity, c2 -> challenge))),[Ljava.lang.String;@479d0087,Annotation([Ljava.lang.String;@7c69bdf5,[Ljava.lang.String;@16655573,[Ljava.lang.String;@66a75d95),Annotation([Ljava.lang.String;@4911e0fe,[Ljava.lang.String;@78a66a3c,[Ledu.cmu.lti.nlp.amr.Dependency;@44d47696),Annotation([Ljava.lang.String;@1843c06c,[Ljava.lang.String;@5e13d58a,[Ljava.lang.String;@152fb3fe),Annotation([Ljava.lang.String;@72a8170b,[Ljava.lang.String;@746ee992,[Ledu.cmu.lti.nlp.amr.Entity;@3491dd10))
AMR:
(b / beset-01, ARG0, c / citizen)
(b / beset-01, ARG1, d / difficulty)
(c / citizen, mod, f / fellow)
(c2 / challenge, op, f2 / face-01)
(c3 / country, name, n / name)
(d / difficulty, location, i / inside)
(f2 / face-01, ARG1, t / time)
(i / inside, op, w / will-01)
(m / many, domain, c2 / challenge)
(m2 / mean-01, ARG1, o / ordinal-entity)
(n / name, op, "China")
(o / ordinal-entity, value, 1 / 1)
(o2 / outside, op, c3 / country)
(p / press-01, ARG1, b / beset-01)
(t / time, calendar, o / ordinal-entity)
(t / time, domain, c / citizen)
(w / will-01, ARG1, o2 / outside)

Decoded in 1,602,277 microseconds
Sentence: The Taiwan issue, the Tibet issue, the South China Sea issue, the surrounding environment, as well as the foreign forces which are aggressive to China - which way should we go?

Oracle Span 1:  aggressive => aggressive
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  environment => environment
Oracle Span 4:  forces => force
Oracle Span 5:  foreign => foreign
Oracle Span 6:  go => go-06
Oracle Span 7:  issue => issue
Oracle Span 8:  issue => issue
Oracle Span 9:  issue => issue
Oracle Span 10:  should => recommend-01
Oracle Span 11:  South China Sea => (sea :name (name :op "Sea" :op "China" :op "South"))
Oracle Span 12:  surrounding => surround-01
Oracle Span 13:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 14:  Tibet => (province :name (name :op "Tibet"))
Oracle Span 15:  way => way
Oracle Span 16:  we => we
NER Entity: (country :name (name :op "Taiwan"))
NER Entity: (country :name (name :op "Tibet"))
NER Entity: (country :name (name :op "South" :op "China" :op "Sea"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 31-32:   => way
Span 32-33:   => shoulder-01
Span 34-35:   => go-06
Span 33-34:   => w
Span 22-23:  aggressive => foreign
Span 16-17:  as => environment
Span 8-9:  China => (country :name (name :op "North"))
Span 5-6:  issue, => (province :name (name :op "Tibet"))
Span 2-3:  issue, => issue
Span 10-11:  issue, => (country :name (name :op "China"))
Span 9-10:  Sea => (country :name (name :op "South" :op "Africa"))
Span 28-29:  should => (country :name (name :op "China"))
Span 12-13:  surrounding => issue
Span 1-2:  Taiwan => (country :name (name :op "Taiwan"))
Span 6-7:  the => issue
Span 23-24:  to => force
Span 26-27:  which => aggressive

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 26-27:  aggressive => aggressive
Oracle Span 28-29:  China => (country :name (name :op "China"))
Oracle Span 16-17:  environment => environment
Oracle Span 23-24:  forces => force
Oracle Span 22-23:  foreign => foreign
Oracle Span 34-35:  go => go-06
Oracle Span 2-3:  issue => issue
Oracle Span 6-7:  issue => issue
Oracle Span 12-13:  issue => issue
Oracle Span 32-33:  should => recommend-01
Oracle Span 9-12:  South China Sea => (sea :name (name :op "Sea" :op "China" :op "South"))
Oracle Span 15-16:  surrounding => surround-01
Oracle Span 1-2:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 5-6:  Tibet => (province :name (name :op "Tibet"))
Oracle Span 31-32:  way => way
Oracle Span 33-34:  we => we

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Taiwan	_	NNP	NNP	_	3	nn	_	_
3	issue	_	NN	NN	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	the	_	DT	DT	_	7	det	_	_
6	Tibet	_	NNP	NNP	_	7	nn	_	_
7	issue	_	NN	NN	_	3	appos	_	_
8	,	_	,	,	_	3	punct	_	_
9	the	_	DT	DT	_	13	det	_	_
10	South	_	NNP	NNP	_	13	nn	_	_
11	China	_	NNP	NNP	_	13	nn	_	_
12	Sea	_	NNP	NNP	_	13	nn	_	_
13	issue	_	NN	NN	_	3	appos	_	_
14	,	_	,	,	_	3	punct	_	_
15	the	_	DT	DT	_	17	det	_	_
16	surrounding	_	JJ	JJ	_	17	amod	_	_
17	environment	_	NN	NN	_	3	appos	_	_
18	,	_	,	,	_	17	punct	_	_
19	as	_	RB	RB	_	20	advmod	_	_
20	well	_	RB	RB	_	17	cc	_	_
21	as	_	IN	IN	_	20	mwe	_	_
22	the	_	DT	DT	_	24	det	_	_
23	foreign	_	JJ	JJ	_	24	amod	_	_
24	forces	_	NNS	NNS	_	17	conj	_	_
25	which	_	WDT	WDT	_	27	nsubj	_	_
26	are	_	VBP	VBP	_	27	cop	_	_
27	aggressive	_	JJ	JJ	_	3	dep	_	_
28	to	_	TO	TO	_	27	prep	_	_
29	China	_	NNP	NNP	_	28	pobj	_	_
30	-	_	:	:	_	29	punct	_	_
31	which	_	WDT	WDT	_	32	det	_	_
32	way	_	NN	NN	_	35	dobj	_	_
33	should	_	MD	MD	_	35	aux	_	_
34	we	_	PRP	PRP	_	35	nsubj	_	_
35	go	_	VB	VB	_	29	dep	_	_
36	?	_	.	.	_	35	punct	_	_

Oracle:
(a2 / aggressive, prep-to, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(f3 / force, mod, a2 / aggressive)
(f3 / force, mod, f4 / foreign)
(g / go-06, ARG0, w / we)
(g / go-06, ARG2, w3 / way)
(i / issue, topic, c / country)
(i2 / issue, topic, p / province)
(i5 / issue, topic, s2 / sea)
(n / name, op, "Taiwan")
(n2 / name, op, "China")
(n2 / name, op, "Sea")
(n2 / name, op, "South")
(n3 / name, op, "China")
(n5 / name, op, "Tibet")
(p / province, name, n5 / name)
(r / recommend-01, ARG1, g / go-06)
(s2 / sea, name, n2 / name)
(s3 / surround-01, ARG1, e2 / environment)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),,way,false), Span(8,9,List(3, 2, 1),China,(country :name (name :op "North")),false), Span(16,17,List(4),as,environment,false), Span(28,29,List(7, 6, 5),should,(country :name (name :op "China")),false), Span(26,27,List(8),which,aggressive,false), Span(5,6,List(11, 10, 9),issue,,(province :name (name :op "Tibet")),false), Span(32,33,List(12),,shoulder-01,false), Span(23,24,List(13),to,force,false), Span(2,3,List(14),issue,,issue,false), Span(34,35,List(15),,go-06,false), Span(12,13,List(16),surrounding,issue,false), Span(22,23,List(17),aggressive,foreign,false), Span(6,7,List(18),the,issue,false), Span(1,2,List(21, 20, 19),Taiwan,(country :name (name :op "Taiwan")),false), Span(9,10,List(25, 24, 23, 22),Sea,(country :name (name :op "South" :op "Africa")),false), Span(33,34,List(26),,w,false), Span(10,11,List(29, 28, 27),issue,,(country :name (name :op "China")),false)),Map(2 -> name, 5 -> country, 27 -> country, 12 -> shoulder-01, 8 -> aggressive, 15 -> go-06, 21 -> "Taiwan", 18 -> issue, 24 -> "South", 7 -> "China", 1 -> country, 17 -> foreign, 23 -> name, 26 -> w, 4 -> environment, 11 -> "Tibet", 14 -> issue, 29 -> "China", 20 -> name, 28 -> name, 6 -> name, 9 -> province, 0 -> way, 22 -> country, 16 -> issue, 19 -> country, 10 -> name, 3 -> "North", 25 -> "Africa", 13 -> force),Map(e -> environment, w -> way, n -> name, c4 -> country, n4 -> name, s -> shoulder-01, i3 -> issue, p -> province, g -> go-06, c3 -> country, a -> aggressive, n3 -> name, n6 -> name, i2 -> issue, w2 -> w, i -> issue, c -> country, f2 -> foreign, f -> force, c2 -> country, n2 -> name, c5 -> country, n5 -> name))),[Ljava.lang.String;@4fcb0b4e,Annotation([Ljava.lang.String;@910660a,[Ljava.lang.String;@3eea4c10,[Ljava.lang.String;@19cd7ad6),Annotation([Ljava.lang.String;@ecb83da,[Ljava.lang.String;@4e1943f,[Ledu.cmu.lti.nlp.amr.Dependency;@6807d27f),Annotation([Ljava.lang.String;@1aee0e63,[Ljava.lang.String;@48699bb7,[Ljava.lang.String;@4021aee9),Annotation([Ljava.lang.String;@16e308b8,[Ljava.lang.String;@7c949111,[Ledu.cmu.lti.nlp.amr.Entity;@78a40917))
AMR:
(a / aggressive, calendar, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(c5 / country, name, n6 / name)
(f / force, mod, c3 / country)
(f / force, mod, f2 / foreign)
(f / force, poss, e / environment)
(g / go-06, ARG0, w2 / w)
(g / go-06, ARG1, w / way)
(i / issue, poss, c / country)
(i / issue, topic, c3 / country)
(i2 / issue, mod, c / country)
(i2 / issue, poss, c5 / country)
(i2 / issue, topic, c4 / country)
(i3 / issue, mod, p / province)
(i3 / issue, poss, c2 / country)
(n / name, op, "North")
(n2 / name, op, "China")
(n3 / name, op, "Tibet")
(n4 / name, op, "Taiwan")
(n5 / name, op, "Africa")
(n5 / name, op, "South")
(n6 / name, op, "China")
(p / province, name, n3 / name)
(s / shoulder-01, ARG0, c5 / country)
(s / shoulder-01, ARG1, g / go-06)
(s / shoulder-01, ARG6, c2 / country)

Decoded in 1,302,783 microseconds
Sentence: What to do, fellow citizens? Please take a look at the map of the world, that crescent-shaped encirclement is suppressing our breathing, strangling our development, and coveting our national territory.

Oracle Span 1:  and => and
Oracle Span 2:  breathing => breathe-01
Oracle Span 3:  citizens => citizen
Oracle Span 4:  coveting => covet-01
Oracle Span 5:  crescent => crescent
Oracle Span 6:  development => develop-02
Oracle Span 7:  do => do-02
Oracle Span 8:  encirclement => encircle-01
Oracle Span 9:  fellow => fellow
Oracle Span 10:  look => look-01
Oracle Span 11:  map => map
Oracle Span 12:  national => nation
Oracle Span 13:  shaped => shape-01
Oracle Span 14:  strangling => strangle-01
Oracle Span 15:  suppressing => suppress-01
Oracle Span 16:  territory => territory
Oracle Span 17:  world => world
Spans:
Span 31-32:   => covet-01
Span 33-34:   => nation
Span 30-31:   => and
Span 34-35:   => territory
Span 7-8:  a => please-01
Span 4-5:  citizens? => fellow
Span 26-27:  coveting => strangle-01
Span 16-17:  crescent-shaped => world
Span 24-25:  development, => breathe-01
Span 2-3:  do, => do-02
Span 28-29:  national => develop-01
Span 20-21:  our => encircle-01
Span 5-6:  Please => citizen
Span 22-23:  strangling => suppress-01
Span 13-14:  the => map
Span 10-11:  the => lock-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of coveting in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of territory in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
Langrangian relaxation converged after 54 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of coveting in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of territory in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
Oracle Span 32-33:  and => and
Oracle Span 26-27:  breathing => breathe-01
Oracle Span 5-6:  citizens => citizen
Oracle Span 33-34:  coveting => covet-01
Oracle Span 19-20:  crescent => crescent
Oracle Span 30-31:  development => develop-02
Oracle Span 2-3:  do => do-02
Oracle Span 22-23:  encirclement => encircle-01
Oracle Span 4-5:  fellow => fellow
Oracle Span 10-11:  look => look-01
Oracle Span 13-14:  map => map
Oracle Span 35-36:  national => nation
Oracle Span 21-22:  shaped => shape-01
Oracle Span 28-29:  strangling => strangle-01
Oracle Span 24-25:  suppressing => suppress-01
Oracle Span 36-37:  territory => territory
Oracle Span 16-17:  world => world

Dependencies:
1	What	_	WP	WP	_	3	dep	_	_
2	to	_	TO	TO	_	3	aux	_	_
3	do	_	VB	VB	_	0	root	_	_
4	,	_	,	,	_	6	punct	_	_
5	fellow	_	JJ	JJ	_	6	amod	_	_
6	citizens	_	NNS	NNS	_	3	dep	_	_
7	?	_	.	.	_	3	punct	_	_
1	Please	_	VB	VB	_	2	discourse	_	_
2	take	_	VB	VB	_	16	ccomp	_	_
3	a	_	DT	DT	_	4	det	_	_
4	look	_	NN	NN	_	2	dobj	_	_
5	at	_	IN	IN	_	2	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	map	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	world	_	NN	NN	_	8	pobj	_	_
11	,	_	,	,	_	16	punct	_	_
12	that	_	DT	DT	_	14	det	_	_
13	crescent-shaped	_	JJ	JJ	_	14	amod	_	_
14	encirclement	_	NN	NN	_	16	nsubj	_	_
15	is	_	VBZ	VBZ	_	16	aux	_	_
16	suppressing	_	VBG	VBG	_	0	root	_	_
17	our	_	PRP$	PRP$	_	18	poss	_	_
18	breathing	_	NN	NN	_	16	dobj	_	_
19	,	_	,	,	_	16	punct	_	_
20	strangling	_	VBG	VBG	_	16	conj	_	_
21	our	_	PRP$	PRP$	_	22	poss	_	_
22	development	_	NN	NN	_	20	dobj	_	_
23	,	_	,	,	_	16	punct	_	_
24	and	_	CC	CC	_	16	cc	_	_
25	coveting	_	VBG	VBG	_	16	conj	_	_
26	our	_	PRP$	PRP$	_	28	poss	_	_
27	national	_	JJ	JJ	_	28	amod	_	_
28	territory	_	NN	NN	_	25	dobj	_	_
29	.	_	.	.	_	16	punct	_	_

Oracle:
(a2 / and, op, l / look-01)
(c / citizen, mod, f / fellow)
(c3 / covet-01, ARG0, e / encircle-01)
(c3 / covet-01, ARG1, t / territory)
(l / look-01, ARG1, m2 / map)
(m2 / map, mod, w / world)
(s2 / suppress-01, ARG0, e / encircle-01)
(s2 / suppress-01, ARG1, b / breathe-01)
(s3 / strangle-01, ARG0, e / encircle-01)
(s3 / strangle-01, ARG1, d2 / develop-02)
(s4 / shape-01, ARG1, e / encircle-01)
(s4 / shape-01, ARG2, c2 / crescent)
(t / territory, mod, n / nation)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),a,please-01,false), Span(26,27,List(1),coveting,strangle-01,false), Span(31,32,List(2),,covet-01,false), Span(13,14,List(3),the,map,false), Span(22,23,List(4),strangling,suppress-01,false), Span(2,3,List(5),do,,do-02,false), Span(10,11,List(6),the,lock-01,false), Span(33,34,List(7),,nation,false), Span(20,21,List(8),our,encircle-01,false), Span(30,31,List(9),,and,false), Span(28,29,List(10),national,develop-01,false), Span(5,6,List(11),Please,citizen,false), Span(34,35,List(12),,territory,false), Span(16,17,List(13),crescent-shaped,world,false), Span(4,5,List(14),citizens?,fellow,false), Span(24,25,List(15),development,,breathe-01,false)),Map(2 -> covet-01, 5 -> do-02, 12 -> territory, 15 -> breathe-01, 8 -> encircle-01, 7 -> nation, 1 -> strangle-01, 4 -> suppress-01, 11 -> citizen, 14 -> fellow, 6 -> lock-01, 0 -> please-01, 9 -> and, 3 -> map, 10 -> develop-01, 13 -> world),Map(e -> encircle-01, w -> world, n -> nation, s2 -> suppress-01, b -> breathe-01, t -> territory, s -> strangle-01, m -> map, d -> do-02, p -> please-01, a -> and, d2 -> develop-01, c -> covet-01, l -> lock-01, f -> fellow, c2 -> citizen))),[Ljava.lang.String;@3e9314ec,Annotation([Ljava.lang.String;@6218f6d8,[Ljava.lang.String;@a6438ae,[Ljava.lang.String;@59683506),Annotation([Ljava.lang.String;@7f7a7eb3,[Ljava.lang.String;@5af1e9b2,[Ledu.cmu.lti.nlp.amr.Dependency;@717b0b0a),Annotation([Ljava.lang.String;@69a3c026,[Ljava.lang.String;@4580a447,[Ljava.lang.String;@10e9793c),Annotation([Ljava.lang.String;@39630370,[Ljava.lang.String;@4eb6468a,[Ledu.cmu.lti.nlp.amr.Entity;@ed46187))
AMR:
(b / breathe-01, ARG1, s / strangle-01)
(c / covet-01, ARG1, t / territory)
(c / covet-01, ARG6, a / and)
(c2 / citizen, mod, f / fellow)
(d / do-02, ARG1, c2 / citizen)
(d2 / develop-01, ARG1, s / strangle-01)
(d2 / develop-01, ARG6, c / covet-01)
(e / encircle-01, ARG1, b / breathe-01)
(e / encircle-01, ARG6, m / map)
(l / lock-01, ARG1, m / map)
(l / lock-01, ARG6, c2 / citizen)
(p / please-01, ARG1, d / do-02)
(s / strangle-01, ARG1, s2 / suppress-01)
(s2 / suppress-01, ARG1, w / world)
(t / territory, op, n / nation)

Decoded in 1,506,253 microseconds
Sentence: We do not want to make enemies, but are never afraid of enemies; we do not want war, but are never afraid of war.

Oracle Span 1:  enemies => enemy
Oracle Span 2:  make => make-01
Oracle Span 3:  want => want-01
Oracle Span 4:  want => want-01
Oracle Span 5:  war => war
Oracle Span 6:  We => we
Oracle Span 7:  we => we
Spans:
Span 26-27:   => war
Span 21-22:  afraid => bunt-01
Span 8-9:  are => bunt-01
Span 19-20:  are => war-01
Span 18-19:  but => want-01
Span 6-7:  enemies, => enemy
Span 5-6:  make => make-01
Span 15-16:  not => we
Span 11-12:  of => afford-01
Span 3-4:  want => want-01
Span 13-14:  we => enemy
Span 0-1:  We => we

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 6-7:  enemies => enemy
Oracle Span 5-6:  make => make-01
Oracle Span 3-4:  want => want-01
Oracle Span 18-19:  want => want-01
Oracle Span 19-20:  war => war
Oracle Span 0-1:  We => we
Oracle Span 15-16:  we => we

Dependencies:
1	We	_	PRP	PRP	_	4	nsubj	_	_
2	do	_	VBP	VBP	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	want	_	VB	VB	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	make	_	VB	VB	_	4	xcomp	_	_
7	enemies	_	NNS	NNS	_	6	dobj	_	_
8	,	_	,	,	_	4	punct	_	_
9	but	_	CC	CC	_	4	cc	_	_
10	are	_	VBP	VBP	_	12	cop	_	_
11	never	_	RB	RB	_	12	neg	_	_
12	afraid	_	JJ	JJ	_	4	conj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	enemies	_	NNS	NNS	_	13	pobj	_	_
15	;	_	:	:	_	4	punct	_	_
16	we	_	PRP	PRP	_	19	nsubj	_	_
17	do	_	VBP	VBP	_	19	aux	_	_
18	not	_	RB	RB	_	19	neg	_	_
19	want	_	VB	VB	_	4	parataxis	_	_
20	war	_	NN	NN	_	19	dobj	_	_
21	,	_	,	,	_	19	punct	_	_
22	but	_	CC	CC	_	19	cc	_	_
23	are	_	VBP	VBP	_	25	cop	_	_
24	never	_	RB	RB	_	25	neg	_	_
25	afraid	_	JJ	JJ	_	19	conj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	war	_	NN	NN	_	26	pobj	_	_
28	.	_	.	.	_	4	punct	_	_

Oracle:
(m2 / make-01, ARG0, w / we)
(m2 / make-01, ARG1, e / enemy)
(w4 / want-01, ARG0, w / we)
(w4 / want-01, ARG1, m2 / make-01)
(w5 / want-01, ARG0, w2 / we)
(w5 / want-01, ARG1, w3 / war)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),enemies,,enemy,false), Span(15,16,List(1),not,we,false), Span(5,6,List(2),make,make-01,false), Span(8,9,List(3),are,bunt-01,false), Span(13,14,List(4),we,enemy,false), Span(21,22,List(5),afraid,bunt-01,false), Span(18,19,List(6),but,want-01,false), Span(11,12,List(7),of,afford-01,false), Span(26,27,List(8),,war,false), Span(3,4,List(9),want,want-01,false), Span(0,1,List(10),We,we,false), Span(19,20,List(11),are,war-01,false)),Map(2 -> make-01, 5 -> bunt-01, 8 -> war, 7 -> afford-01, 1 -> we, 11 -> war-01, 4 -> enemy, 6 -> want-01, 9 -> want-01, 0 -> enemy, 10 -> we, 3 -> bunt-01),Map(w -> we, e -> enemy, b -> bunt-01, w6 -> war-01, b2 -> bunt-01, e2 -> enemy, w3 -> war, m -> make-01, a -> afford-01, w5 -> we, w2 -> want-01, w4 -> want-01))),[Ljava.lang.String;@25d4935c,Annotation([Ljava.lang.String;@18a840ab,[Ljava.lang.String;@4783ddc5,[Ljava.lang.String;@5f3c6cb0),Annotation([Ljava.lang.String;@5e735a78,[Ljava.lang.String;@404e405,[Ledu.cmu.lti.nlp.amr.Dependency;@5db06cb5),Annotation([Ljava.lang.String;@6155d25f,[Ljava.lang.String;@2531f497,[Ljava.lang.String;@6b618f8),Annotation([Ljava.lang.String;@58bd195f,[Ljava.lang.String;@1735ff3d,[Ledu.cmu.lti.nlp.amr.Entity;@3d0a2400))
AMR:
(a / afford-01, ARG1, w2 / want-01)
(a / afford-01, ARG2, e2 / enemy)
(b / bunt-01, ARG1, w4 / want-01)
(b / bunt-01, ARG2, a / afford-01)
(b2 / bunt-01, ARG1, w2 / want-01)
(m / make-01, ARG0, w5 / we)
(m / make-01, ARG1, e / enemy)
(w2 / want-01, ARG1, w6 / war-01)
(w4 / want-01, ARG1, m / make-01)
(w6 / war-01, ARG0, w / we)
(w6 / war-01, ARG1, w3 / war)

Decoded in 782,043 microseconds
Sentence: We must urgently arrange arms, strengthen all military forces on land, on sea, and in the air.

Oracle Span 1:  air => air
Oracle Span 2:  all => all
Oracle Span 3:  and => and
Oracle Span 4:  arms => arm
Oracle Span 5:  arrange => arrange-01
Oracle Span 6:  forces => force
Oracle Span 7:  land => land
Oracle Span 8:  military => military
Oracle Span 9:  sea => sea
Oracle Span 10:  strengthen => strengthen-01
Oracle Span 11:  urgently => urgent
Oracle Span 12:  We => we
Spans:
Span 19-20:   => air
Span 16-17:  air. => and
Span 6-7:  all => strengthen-01
Span 4-5:  arms, => arm
Span 3-4:  arrange => arrange-01
Span 8-9:  forces => military
Span 14-15:  in => sea
Span 7-8:  military => all
Span 1-2:  must => muster-01
Span 9-10:  on => force
Span 11-12:  on => land
Span 5-6:  strengthen => and
Span 2-3:  urgently => urgent
Span 0-1:  We => we

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 19-20:  air => air
Oracle Span 7-8:  all => all
Oracle Span 16-17:  and => and
Oracle Span 4-5:  arms => arm
Oracle Span 3-4:  arrange => arrange-01
Oracle Span 9-10:  forces => force
Oracle Span 11-12:  land => land
Oracle Span 8-9:  military => military
Oracle Span 14-15:  sea => sea
Oracle Span 6-7:  strengthen => strengthen-01
Oracle Span 2-3:  urgently => urgent
Oracle Span 0-1:  We => we

Dependencies:
1	We	_	PRP	PRP	_	4	nsubj	_	_
2	must	_	MD	MD	_	4	aux	_	_
3	urgently	_	RB	RB	_	4	advmod	_	_
4	arrange	_	VB	VB	_	0	root	_	_
5	arms	_	NNS	NNS	_	4	dobj	_	_
6	,	_	,	,	_	4	punct	_	_
7	strengthen	_	VB	VB	_	4	dep	_	_
8	all	_	DT	DT	_	10	det	_	_
9	military	_	JJ	JJ	_	10	amod	_	_
10	forces	_	NNS	NNS	_	7	dobj	_	_
11	on	_	IN	IN	_	7	prep	_	_
12	land	_	NN	NN	_	11	pobj	_	_
13	,	_	,	,	_	4	punct	_	_
14	on	_	IN	IN	_	4	prep	_	_
15	sea	_	NN	NN	_	14	pobj	_	_
16	,	_	,	,	_	14	punct	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	in	_	IN	IN	_	14	conj	_	_
19	the	_	DT	DT	_	20	det	_	_
20	air	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, manner, u / urgent)
(a / and, op, a2 / arrange-01)
(a / and, op, s / strengthen-01)
(a2 / arrange-01, ARG0, w / we)
(a2 / arrange-01, ARG1, a3 / arm)
(f / force, mod, a6 / all)
(f / force, mod, m / military)
(s / strengthen-01, ARG0, w / we)
(s / strengthen-01, ARG1, f / force)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),must,muster-01,false), Span(7,8,List(1),military,all,false), Span(16,17,List(2),air.,and,false), Span(19,20,List(3),,air,false), Span(5,6,List(4),strengthen,and,false), Span(3,4,List(5),arrange,arrange-01,false), Span(9,10,List(6),on,force,false), Span(8,9,List(7),forces,military,false), Span(11,12,List(8),on,land,false), Span(0,1,List(9),We,we,false), Span(4,5,List(10),arms,,arm,false), Span(2,3,List(11),urgently,urgent,false), Span(14,15,List(12),in,sea,false), Span(6,7,List(13),all,strengthen-01,false)),Map(2 -> and, 5 -> arrange-01, 12 -> sea, 8 -> land, 7 -> military, 1 -> all, 4 -> and, 11 -> urgent, 6 -> force, 0 -> muster-01, 9 -> we, 3 -> air, 10 -> arm, 13 -> strengthen-01),Map(w -> we, s2 -> strengthen-01, m2 -> military, a3 -> air, s -> sea, a6 -> arm, m -> muster-01, a -> all, a5 -> arrange-01, a2 -> and, l -> land, u -> urgent, f -> force, a4 -> and))),[Ljava.lang.String;@307c3e89,Annotation([Ljava.lang.String;@15e99d84,[Ljava.lang.String;@4eb946e,[Ljava.lang.String;@5d0a9777),Annotation([Ljava.lang.String;@cd37229,[Ljava.lang.String;@558fdb8a,[Ledu.cmu.lti.nlp.amr.Dependency;@d9f6db1),Annotation([Ljava.lang.String;@4a7e25a,[Ljava.lang.String;@13f29add,[Ljava.lang.String;@380a40a2),Annotation([Ljava.lang.String;@4e8e40f7,[Ljava.lang.String;@7500de4e,[Ledu.cmu.lti.nlp.amr.Entity;@72a39641))
AMR:
(a2 / and, op, s / sea)
(a5 / arrange-01, ARG0, w / we)
(a5 / arrange-01, ARG1, a6 / arm)
(a5 / arrange-01, ARG6, a2 / and)
(a5 / arrange-01, manner, u / urgent)
(f / force, location, l / land)
(f / force, mod, a / all)
(f / force, mod, m2 / military)
(m / muster-01, ARG0, a3 / air)
(m / muster-01, ARG1, a5 / arrange-01)
(s2 / strengthen-01, ARG0, a4 / and)
(s2 / strengthen-01, ARG1, f / force)
(s2 / strengthen-01, ARG6, a6 / arm)

Decoded in 839,858 microseconds
Sentence: Over thousands of years, the Chinese nation has flourished several times, but before it has never had ambition to expand its territory outward.

Oracle Span 1:  ambition => ambition
Oracle Span 2:  before => before
Oracle Span 3:  Chinese => (country :name (name :op "China"))
Oracle Span 4:  expand => expand-01
Oracle Span 5:  flourished => flourish-01
Oracle Span 6:  has => have-03
Oracle Span 7:  has => have-concession-91
Oracle Span 8:  nation => nation
Oracle Span 9:  outward => outward
Oracle Span 10:  several => several
Oracle Span 11:  territory => territory
Oracle Span 12:  years => (temporal-quantity :unit year)
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 23-24:   => territory
Span 24-25:   => outward
Span 11-12:  but => time
Span 19-20:  expand => ambition
Span 14-15:  has => before
Span 7-8:  has => nation
Span 13-14:  it => bunt-01
Span 6-7:  nation => (country :name (name :op "China"))
Span 0-1:  Over => over
Span 9-10:  several => flourish-01
Span 21-22:  territory => expand-01
Span 10-11:  times, => several
Span 3-4:  years, => year

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 19-20:  ambition => ambition
Oracle Span 14-15:  before => before
Oracle Span 6-7:  Chinese => (country :name (name :op "China"))
Oracle Span 21-22:  expand => expand-01
Oracle Span 9-10:  flourished => flourish-01
Oracle Span 8-9:  has => have-03
Oracle Span 16-17:  has => have-concession-91
Oracle Span 7-8:  nation => nation
Oracle Span 24-25:  outward => outward
Oracle Span 10-11:  several => several
Oracle Span 23-24:  territory => territory
Oracle Span 3-4:  years => (temporal-quantity :unit year)

Dependencies:
1	Over	_	IN	IN	_	10	prep	_	_
2	thousands	_	NNS	NNS	_	1	pobj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	years	_	NNS	NNS	_	3	pobj	_	_
5	,	_	,	,	_	10	punct	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Chinese	_	JJ	JJ	_	8	amod	_	_
8	nation	_	NN	NN	_	10	nsubj	_	_
9	has	_	VBZ	VBZ	_	10	aux	_	_
10	flourished	_	VBN	VBN	_	0	root	_	_
11	several	_	JJ	JJ	_	12	amod	_	_
12	times	_	NNS	NNS	_	10	tmod	_	_
13	,	_	,	,	_	10	punct	_	_
14	but	_	CC	CC	_	10	cc	_	_
15	before	_	IN	IN	_	19	mark	_	_
16	it	_	PRP	PRP	_	19	nsubj	_	_
17	has	_	VBZ	VBZ	_	19	aux	_	_
18	never	_	RB	RB	_	19	neg	_	_
19	had	_	VBN	VBN	_	10	advcl	_	_
20	ambition	_	NN	NN	_	19	dobj	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	expand	_	VB	VB	_	19	vmod	_	_
23	its	_	PRP$	PRP$	_	25	poss	_	_
24	territory	_	NN	NN	_	25	nn	_	_
25	outward	_	NN	NN	_	22	dobj	_	_
26	.	_	.	.	_	10	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(e / expand-01, ARG0, n / nation)
(e / expand-01, ARG1, t / territory)
(e / expand-01, consist, a / ambition)
(e / expand-01, direction, o / outward)
(f / flourish-01, ARG1, n / nation)
(f / flourish-01, frequency, s2 / several)
(h / have-03, ARG0, n / nation)
(h / have-03, ARG1, a / ambition)
(h / have-03, time, b / before)
(h2 / have-concession-91, ARG1, h / have-03)
(h2 / have-concession-91, ARG2, f / flourish-01)
(n / nation, mod, c2 / country)
(n2 / name, op, "China")
(t / territory, poss, n / nation)
(t3 / temporal-quantity, unit, y / year)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),expand,ambition,false), Span(14,15,List(1),has,before,false), Span(13,14,List(2),it,bunt-01,false), Span(10,11,List(3),times,,several,false), Span(11,12,List(4),but,time,false), Span(9,10,List(5),several,flourish-01,false), Span(23,24,List(6),,territory,false), Span(3,4,List(7),years,,year,false), Span(21,22,List(8),territory,expand-01,false), Span(24,25,List(9),,outward,false), Span(7,8,List(10),has,nation,false), Span(0,1,List(11),Over,over,false), Span(6,7,List(14, 13, 12),nation,(country :name (name :op "China")),false)),Map(2 -> bunt-01, 5 -> flourish-01, 12 -> country, 8 -> expand-01, 7 -> year, 1 -> before, 4 -> time, 11 -> over, 14 -> "China", 6 -> territory, 0 -> ambition, 9 -> outward, 3 -> several, 10 -> nation, 13 -> name),Map(e -> expand-01, n -> nation, b -> before, t -> time, b2 -> bunt-01, s -> several, y -> year, a -> ambition, o2 -> over, t2 -> territory, c -> country, f -> flourish-01, o -> outward, n2 -> name))),[Ljava.lang.String;@2493e90e,Annotation([Ljava.lang.String;@7ee15f45,[Ljava.lang.String;@3217840f,[Ljava.lang.String;@4e01857f),Annotation([Ljava.lang.String;@7561de28,[Ljava.lang.String;@18ebcb6,[Ledu.cmu.lti.nlp.amr.Dependency;@fb76774),Annotation([Ljava.lang.String;@4d5f2180,[Ljava.lang.String;@36b4269d,[Ljava.lang.String;@422b47f1),Annotation([Ljava.lang.String;@76931407,[Ljava.lang.String;@42747874,[Ledu.cmu.lti.nlp.amr.Entity;@55633e69))
AMR:
(b / before, op, a / ambition)
(b2 / bunt-01, ARG1, f / flourish-01)
(c / country, name, n2 / name)
(e / expand-01, ARG1, o / outward)
(f / flourish-01, ARG1, n / nation)
(f / flourish-01, time, b / before)
(f / flourish-01, time, o2 / over)
(f / flourish-01, time, t / time)
(f / flourish-01, time, y / year)
(n / nation, mod, c / country)
(n2 / name, op, "China")
(o / outward, mod, t2 / territory)
(o / outward, poss, a / ambition)
(t / time, quant, s / several)

Decoded in 820,946 microseconds
Sentence: Not imposing on others what we don't want ourselves, what we follow is a foreign security strategic philosophy which applies benevolence and virtue.

Oracle Span 1:  and => and
Oracle Span 2:  applies => apply-02
Oracle Span 3:  benevolence => benevolence
Oracle Span 4:  follow => follow-02
Oracle Span 5:  foreign => foreign
Oracle Span 6:  imposing => impose-01
Oracle Span 7:  others => (person :mod other)
Oracle Span 8:  philosophy => philosophy
Oracle Span 9:  security => security
Oracle Span 10:  strategic => strategy
Oracle Span 11:  virtue => virtue
Oracle Span 12:  want => (thing :ARG1-of want-01)
Oracle Span 13:  we => we
Spans:
Span 24-25:   => virtue
Span 23-24:   => and
Span 13-14:  a => follow-03
Span 0-1:  Not => -
Span 3-4:  others => other
Span 8-9:  ourselves, => want-01
Span 17-18:  philosophy => security
Span 16-17:  strategic => foreign
Span 22-23:  virtue. => benevolence
Span 18-19:  which => strategic

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 23-24:  and => and
Oracle Span 21-22:  applies => apply-02
Oracle Span 22-23:  benevolence => benevolence
Oracle Span 13-14:  follow => follow-02
Oracle Span 16-17:  foreign => foreign
Oracle Span 1-2:  imposing => impose-01
Oracle Span 3-4:  others => (person :mod other)
Oracle Span 19-20:  philosophy => philosophy
Oracle Span 17-18:  security => security
Oracle Span 18-19:  strategic => strategy
Oracle Span 24-25:  virtue => virtue
Oracle Span 8-9:  want => (thing :ARG1-of want-01)
Oracle Span 5-6:  we => we

Dependencies:
1	Not	_	RB	RB	_	20	neg	_	_
2	imposing	_	VBG	VBG	_	20	csubj	_	_
3	on	_	IN	IN	_	2	prep	_	_
4	others	_	NNS	NNS	_	3	pobj	_	_
5	what	_	WP	WP	_	9	dobj	_	_
6	we	_	PRP	PRP	_	9	nsubj	_	_
7	do	_	VBP	VBP	_	9	aux	_	_
8	n't	_	RB	RB	_	9	neg	_	_
9	want	_	VB	VB	_	4	rcmod	_	_
10	ourselves	_	PRP	PRP	_	9	dobj	_	_
11	,	_	,	,	_	2	punct	_	_
12	what	_	WP	WP	_	14	dobj	_	_
13	we	_	PRP	PRP	_	14	nsubj	_	_
14	follow	_	VBP	VBP	_	2	ccomp	_	_
15	is	_	VBZ	VBZ	_	20	cop	_	_
16	a	_	DT	DT	_	20	det	_	_
17	foreign	_	JJ	JJ	_	20	amod	_	_
18	security	_	NN	NN	_	20	nn	_	_
19	strategic	_	JJ	JJ	_	20	amod	_	_
20	philosophy	_	NN	NN	_	0	root	_	_
21	which	_	WDT	WDT	_	22	nsubj	_	_
22	applies	_	VBZ	VBZ	_	20	rcmod	_	_
23	benevolence	_	NN	NN	_	22	dobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	virtue	_	NN	NN	_	23	conj	_	_
26	.	_	.	.	_	20	punct	_	_

Oracle:
(a / apply-02, ARG0, p / philosophy)
(a / apply-02, ARG1, a2 / and)
(a2 / and, op, b / benevolence)
(a2 / and, op, v / virtue)
(f / follow-02, ARG0, w / we)
(f / follow-02, ARG1, p / philosophy)
(i / impose-01, ARG0, w / we)
(i / impose-01, ARG1, t / thing)
(i / impose-01, ARG2, p2 / person)
(p / philosophy, mod, s / strategy)
(p / philosophy, mod, s2 / security)
(p2 / person, mod, o / other)
(s2 / security, mod, f2 / foreign)
(w2 / want-01, ARG0, w / we)
(w2 / want-01, ARG1, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),philosophy,security,false), Span(3,4,List(1),others,other,false), Span(18,19,List(2),which,strategic,false), Span(24,25,List(3),,virtue,false), Span(23,24,List(4),,and,false), Span(0,1,List(5),Not,-,false), Span(13,14,List(6),a,follow-03,false), Span(16,17,List(7),strategic,foreign,false), Span(22,23,List(8),virtue.,benevolence,false), Span(8,9,List(9),ourselves,,want-01,false)),Map(2 -> strategic, 5 -> -, 8 -> benevolence, 7 -> foreign, 1 -> other, 4 -> and, 6 -> follow-03, 9 -> want-01, 0 -> security, 3 -> virtue),Map(w -> want-01, b -> benevolence, s2 -> strategic, s -> security, v -> virtue, a -> and, - -> -, f2 -> foreign, f -> follow-03, o -> other))),[Ljava.lang.String;@1d4403c7,Annotation([Ljava.lang.String;@650b9114,[Ljava.lang.String;@3eee25f4,[Ljava.lang.String;@40f81672),Annotation([Ljava.lang.String;@7d9f7f91,[Ljava.lang.String;@4425c207,[Ledu.cmu.lti.nlp.amr.Dependency;@b2b8ef2),Annotation([Ljava.lang.String;@be05263,[Ljava.lang.String;@d05c779,[Ljava.lang.String;@675a1924),Annotation([Ljava.lang.String;@30d14723,[Ljava.lang.String;@39ab7810,[Ledu.cmu.lti.nlp.amr.Entity;@1a364e53))
AMR:
(a / and, op, b / benevolence)
(a / and, op, v / virtue)
(a / and, op, w / want-01)
(f / follow-03, ARG0, s2 / strategic)
(f / follow-03, ARG1, o / other)
(f / follow-03, ARG6, f2 / foreign)
(s / security, mod, f2 / foreign)
(w / want-01, ARG0, o / other)
(w / want-01, ARG1, - / -)

Decoded in 516,950 microseconds
Sentence: The tolerance and liberalness of a country are like those of an individual - we avoid hurting others, but must insist on not being hurt ourselves.

Oracle Span 1:  and => and
Oracle Span 2:  avoid => avoid-01
Oracle Span 3:  country => country
Oracle Span 4:  hurt => hurt-01
Oracle Span 5:  hurting => hurt-01
Oracle Span 6:  individual => individual
Oracle Span 7:  insist => insist-01
Oracle Span 8:  liberalness => liberalness
Oracle Span 9:  others => (person :mod other)
Oracle Span 10:  tolerance => tolerance
Oracle Span 11:  we => we
Spans:
Span 2-3:  and => and
Span 15-16:  avoid => avoid-01
Span 6-7:  country => country
Span 16-17:  hurting => hurt-01
Span 12-13:  individual => individual
Span 20-21:  insist => muster-01
Span 19-20:  must => bunt-01
Span 21-22:  on => insist-01
Span 17-18:  others, => other
Span 25-26:  ourselves. => hurt-01
Span 1-2:  tolerance => tolerance
Span 14-15:  we => we

Langrangian relaxation converged after 81 iterations. Delta = 0.0
Oracle Span 2-3:  and => and
Oracle Span 15-16:  avoid => avoid-01
Oracle Span 6-7:  country => country
Oracle Span 25-26:  hurt => hurt-01
Oracle Span 16-17:  hurting => hurt-01
Oracle Span 12-13:  individual => individual
Oracle Span 21-22:  insist => insist-01
Oracle Span 3-4:  liberalness => liberalness
Oracle Span 17-18:  others => (person :mod other)
Oracle Span 1-2:  tolerance => tolerance
Oracle Span 14-15:  we => we

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	tolerance	_	NN	NN	_	8	nsubj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	liberalness	_	NNS	NNS	_	2	conj	_	_
5	of	_	IN	IN	_	2	prep	_	_
6	a	_	DT	DT	_	7	det	_	_
7	country	_	NN	NN	_	5	pobj	_	_
8	are	_	VBP	VBP	_	0	root	_	_
9	like	_	IN	IN	_	8	prep	_	_
10	those	_	DT	DT	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	an	_	DT	DT	_	13	det	_	_
13	individual	_	NN	NN	_	11	pobj	_	_
14	-	_	:	:	_	8	punct	_	_
15	we	_	PRP	PRP	_	16	nsubj	_	_
16	avoid	_	VBP	VBP	_	8	parataxis	_	_
17	hurting	_	VBG	VBG	_	16	xcomp	_	_
18	others	_	NNS	NNS	_	17	dobj	_	_
19	,	_	,	,	_	16	punct	_	_
20	but	_	CC	CC	_	16	cc	_	_
21	must	_	MD	MD	_	22	aux	_	_
22	insist	_	VB	VB	_	16	conj	_	_
23	on	_	IN	IN	_	22	prep	_	_
24	not	_	RB	RB	_	26	neg	_	_
25	being	_	VBG	VBG	_	26	auxpass	_	_
26	hurt	_	VBN	VBN	_	23	pcomp	_	_
27	ourselves	_	PRP	PRP	_	26	dobj	_	_
28	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, l / liberalness)
(a / and, op, t / tolerance)
(a / and, poss, c / country)
(a2 / avoid-01, ARG0, w / we)
(a2 / avoid-01, ARG1, h / hurt-01)
(h / hurt-01, ARG0, w / we)
(h / hurt-01, ARG1, p / person)
(h2 / hurt-01, ARG1, w / we)
(i2 / insist-01, ARG0, w / we)
(i2 / insist-01, ARG1, h2 / hurt-01)
(p / person, mod, o / other)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),tolerance,tolerance,false), Span(6,7,List(1),country,country,false), Span(20,21,List(2),insist,muster-01,false), Span(16,17,List(3),hurting,hurt-01,false), Span(21,22,List(4),on,insist-01,false), Span(12,13,List(5),individual,individual,false), Span(17,18,List(6),others,,other,false), Span(2,3,List(7),and,and,false), Span(25,26,List(8),ourselves.,hurt-01,false), Span(14,15,List(9),we,we,false), Span(15,16,List(10),avoid,avoid-01,false), Span(19,20,List(11),must,bunt-01,false)),Map(2 -> muster-01, 5 -> individual, 8 -> hurt-01, 7 -> and, 1 -> country, 11 -> bunt-01, 4 -> insist-01, 6 -> other, 9 -> we, 0 -> tolerance, 10 -> avoid-01, 3 -> hurt-01),Map(w -> we, h -> hurt-01, b -> bunt-01, h2 -> hurt-01, t -> tolerance, m -> muster-01, a -> and, i2 -> individual, a2 -> avoid-01, i -> insist-01, c -> country, o -> other))),[Ljava.lang.String;@2a791710,Annotation([Ljava.lang.String;@779c73a8,[Ljava.lang.String;@1caada6e,[Ljava.lang.String;@9a8ecec),Annotation([Ljava.lang.String;@6b8bbb5e,[Ljava.lang.String;@7f9e94b4,[Ledu.cmu.lti.nlp.amr.Dependency;@35ad5883),Annotation([Ljava.lang.String;@7b2c0d56,[Ljava.lang.String;@4dcb0826,[Ljava.lang.String;@46fb0e1f),Annotation([Ljava.lang.String;@194d2f03,[Ljava.lang.String;@290c7c1,[Ledu.cmu.lti.nlp.amr.Entity;@170f758d))
AMR:
(a / and, location, c / country)
(a / and, op, t / tolerance)
(a2 / avoid-01, ARG0, w / we)
(a2 / avoid-01, ARG1, h / hurt-01)
(b / bunt-01, ARG1, a2 / avoid-01)
(b / bunt-01, ARG2, i / insist-01)
(h / hurt-01, ARG1, o / other)
(h2 / hurt-01, ARG1, i2 / individual)
(i / insist-01, ARG1, h2 / hurt-01)
(m / muster-01, ARG0, t / tolerance)
(m / muster-01, ARG1, i / insist-01)

Decoded in 1,273,116 microseconds
Sentence: Tolerance is certainly not fear, and sincerity does not have to be cowardice.

Oracle Span 1:  and => and
Oracle Span 2:  certainly => certain
Oracle Span 3:  cowardice => cowardice
Oracle Span 4:  fear => fear
Oracle Span 5:  sincerity => sincerity
Oracle Span 6:  Tolerance => tolerance
Spans:
Span 2-3:  certainly => certain
Span 7-8:  does => sincerity
Span 4-5:  fear, => fear-01
Span 6-7:  sincerity => and
Span 10-11:  to => have-02
Span 0-1:  Tolerance => tolerate-01

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 2-3:  certainly => certain
Oracle Span 13-14:  cowardice => cowardice
Oracle Span 4-5:  fear => fear
Oracle Span 7-8:  sincerity => sincerity
Oracle Span 0-1:  Tolerance => tolerance

Dependencies:
1	Tolerance	_	NNP	NNP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	certainly	_	RB	RB	_	4	advmod	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	fear	_	NN	NN	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	and	_	CC	CC	_	5	cc	_	_
8	sincerity	_	NN	NN	_	11	nsubj	_	_
9	does	_	VBZ	VBZ	_	11	aux	_	_
10	not	_	RB	RB	_	11	neg	_	_
11	have	_	VB	VB	_	5	conj	_	_
12	to	_	TO	TO	_	14	aux	_	_
13	be	_	VB	VB	_	14	cop	_	_
14	cowardice	_	JJ	JJ	_	11	xcomp	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, f / fear)
(c2 / cowardice, domain, s / sincerity)
(f / fear, domain, t / tolerance)
(f / fear, manner, c / certain)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),sincerity,and,false), Span(0,1,List(1),Tolerance,tolerate-01,false), Span(10,11,List(2),to,have-02,false), Span(2,3,List(3),certainly,certain,false), Span(4,5,List(4),fear,,fear-01,false), Span(7,8,List(5),does,sincerity,false)),Map(2 -> have-02, 5 -> sincerity, 1 -> tolerate-01, 4 -> fear-01, 0 -> and, 3 -> certain),Map(h -> have-02, t -> tolerate-01, s -> sincerity, a -> and, c -> certain, f -> fear-01))),[Ljava.lang.String;@7ea4a28a,Annotation([Ljava.lang.String;@6d0c4290,[Ljava.lang.String;@9d798bb,[Ljava.lang.String;@7153e5c0),Annotation([Ljava.lang.String;@2ab8a992,[Ljava.lang.String;@25af7697,[Ledu.cmu.lti.nlp.amr.Dependency;@108820d9),Annotation([Ljava.lang.String;@7e1bbaed,[Ljava.lang.String;@11006885,[Ljava.lang.String;@4f45bffc),Annotation([Ljava.lang.String;@1e9ad025,[Ljava.lang.String;@3d75cdc9,[Ledu.cmu.lti.nlp.amr.Entity;@2f23cea2))
AMR:
(a / and, op, f / fear-01)
(a / and, op, h / have-02)
(f / fear-01, ARG1, c / certain)
(h / have-02, ARG0, s / sincerity)
(h / have-02, ARG1, t / tolerate-01)

Decoded in 218,894 microseconds
Sentence: China exempting Japan from war reparations for World War II was in service of peace, benevolent peace.

Oracle Span 1:  benevolent => benevolence
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  exempting => exempt-01
Oracle Span 4:  Japan => (country :name (name :op "Japan"))
Oracle Span 5:  peace => peace
Oracle Span 6:  reparations => repair-01
Oracle Span 7:  service => serve-01
Oracle Span 8:  war => war
Oracle Span 9:  World War II => (war :name (name :op "II" :op "War" :op "World"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (thing :name (name :op "World" :op "War" :op "II"))
Spans:
Span 17-18:   => peace
Span 15-16:  benevolent => and
Span 0-1:  China => (country :name (name :op "China"))
Span 1-2:  exempting => exempt-01
Span 9-10:  II => "II"
Span 2-3:  Japan => (country :name (name :op "Japan"))
Span 14-15:  peace, => peace
Span 12-13:  service => service
Span 8-9:  War => "War"
Span 4-5:  war => war
Span 7-8:  World => (war :name (name :op "World"))

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 16-17:  benevolent => benevolence
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 1-2:  exempting => exempt-01
Oracle Span 2-3:  Japan => (country :name (name :op "Japan"))
Oracle Span 14-15:  peace => peace
Oracle Span 5-6:  reparations => repair-01
Oracle Span 12-13:  service => serve-01
Oracle Span 4-5:  war => war
Oracle Span 7-10:  World War II => (war :name (name :op "II" :op "War" :op "World"))

Dependencies:
1	China	_	NNP	NNP	_	3	nn	_	_
2	exempting	_	NNP	NNP	_	3	nn	_	_
3	Japan	_	NNP	NNP	_	11	nsubj	_	_
4	from	_	IN	IN	_	3	prep	_	_
5	war	_	NN	NN	_	6	nn	_	_
6	reparations	_	NNS	NNS	_	4	pobj	_	_
7	for	_	IN	IN	_	6	prep	_	_
8	World	_	NNP	NNP	_	10	nn	_	_
9	War	_	NNP	NNP	_	10	nn	_	_
10	II	_	NNP	NNP	_	7	pobj	_	_
11	was	_	VBD	VBD	_	0	root	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	service	_	NN	NN	_	12	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	peace	_	NN	NN	_	14	pobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	benevolent	_	JJ	JJ	_	18	amod	_	_
18	peace	_	NN	NN	_	15	appos	_	_
19	.	_	.	.	_	11	punct	_	_

Oracle:
(c / country, name, n / name)
(c3 / country, name, n2 / name)
(e / exempt-01, ARG0, c / country)
(e / exempt-01, ARG1, c3 / country)
(e / exempt-01, ARG2, r / repair-01)
(n / name, op, "China")
(n2 / name, op, "Japan")
(n3 / name, op, "II")
(n3 / name, op, "War")
(n3 / name, op, "World")
(p / peace, mod, b / benevolence)
(r / repair-01, ARG0, c3 / country)
(r / repair-01, mod, w / war)
(s / serve-01, ARG0, e / exempt-01)
(s / serve-01, ARG2, p / peace)
(w2 / war, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(2,3,List(5, 4, 3),Japan,(country :name (name :op "Japan")),false), Span(8,9,List(6),War,"War",false), Span(9,10,List(7),II,"II",false), Span(4,5,List(8),war,war,false), Span(12,13,List(9),service,service,false), Span(15,16,List(10),benevolent,and,false), Span(1,2,List(11),exempting,exempt-01,false), Span(14,15,List(12),peace,,peace,false), Span(7,8,List(15, 14, 13),World,(war :name (name :op "World")),false), Span(17,18,List(16),,peace,false)),Map(2 -> "China", 5 -> "Japan", 12 -> peace, 15 -> "World", 8 -> war, 7 -> "II", 1 -> name, 4 -> name, 11 -> exempt-01, 14 -> name, 6 -> "War", 0 -> country, 9 -> service, 16 -> peace, 3 -> country, 10 -> and, 13 -> war),Map(e -> exempt-01, n -> name, w -> war, p2 -> peace, s -> service, I -> "II", p -> peace, a -> and, n3 -> name, w2 -> war, W -> "War", c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@551c0f69,Annotation([Ljava.lang.String;@4494d4b4,[Ljava.lang.String;@4e0045d9,[Ljava.lang.String;@1206c7a6),Annotation([Ljava.lang.String;@27d4f5c8,[Ljava.lang.String;@4587b4f2,[Ledu.cmu.lti.nlp.amr.Dependency;@9651f16),Annotation([Ljava.lang.String;@2dfac26b,[Ljava.lang.String;@2d0008a9,[Ljava.lang.String;@555819df),Annotation([Ljava.lang.String;@746431cd,[Ljava.lang.String;@f764cb0,[Ledu.cmu.lti.nlp.amr.Entity;@229e58b7))
AMR:
(I / "II", mod, W / "War")
(W / "War", mod, w2 / war)
(a / and, op, p / peace)
(a / and, op, p2 / peace)
(c / country, name, n / name)
(c2 / country, location, W / "War")
(c2 / country, name, n2 / name)
(e / exempt-01, ARG0, c2 / country)
(e / exempt-01, ARG1, c / country)
(n / name, op, "China")
(n2 / name, op, "Japan")
(n3 / name, op, "World")
(s / service, location, p / peace)
(s / service, mod, W / "War")
(w / war, mod, p / peace)
(w2 / war, name, n3 / name)

Decoded in 364,939 microseconds
Sentence: My fellow citizens, the People's Heroes Monument is a condensed history of the Chinese nation striving for continuous self-improvement

Oracle Span 1:  Chinese => (country :name (name :op "China"))
Oracle Span 2:  citizens => citizen
Oracle Span 3:  condensed => condense-01
Oracle Span 4:  continuous => continue-01
Oracle Span 5:  fellow => fellow
Oracle Span 6:  history => history
Oracle Span 7:  improvement => improve-01
Oracle Span 8:  nation => nation
Oracle Span 9:  People 's Heroes Monument => (facility :name (name :op "Monument" :op "Heroes" :op "People's"))
Oracle Span 10:  striving => strive-01
NER Entity: (organization :name (name :op "People" :op "'s" :op "Heroes" :op "Monument"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 19-20:   => continuous
Span 2-3:  citizens, => citizen
Span 17-18:  continuous => strive-01
Span 1-2:  fellow => fellow
Span 16-17:  for => nation
Span 4-6:  People's Heroes => (person :mod country)
Span 15-16:  striving => (country :name (name :op "China"))
Span 12-13:  the => history

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 15-16:  Chinese => (country :name (name :op "China"))
Oracle Span 2-3:  citizens => citizen
Oracle Span 11-12:  condensed => condense-01
Oracle Span 19-20:  continuous => continue-01
Oracle Span 1-2:  fellow => fellow
Oracle Span 12-13:  history => history
Oracle Span 22-23:  improvement => improve-01
Oracle Span 16-17:  nation => nation
Oracle Span 5-9:  People 's Heroes Monument => (facility :name (name :op "Monument" :op "Heroes" :op "People's"))
Oracle Span 17-18:  striving => strive-01

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	13	nsubj	_	_
4	,	_	,	,	_	3	punct	_	_
5	the	_	DT	DT	_	6	det	_	_
6	People	_	NNS	NNS	_	9	poss	_	_
7	's	_	POS	POS	_	6	possessive	_	_
8	Heroes	_	NNP	NNP	_	9	nn	_	_
9	Monument	_	NNP	NNP	_	3	appos	_	_
10	is	_	VBZ	VBZ	_	13	cop	_	_
11	a	_	DT	DT	_	13	det	_	_
12	condensed	_	JJ	JJ	_	13	amod	_	_
13	history	_	NN	NN	_	0	root	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Chinese	_	JJ	JJ	_	17	amod	_	_
17	nation	_	NN	NN	_	14	pobj	_	_
18	striving	_	VBG	VBG	_	17	vmod	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	continuous	_	JJ	JJ	_	21	amod	_	_
21	self-improvement	_	NN	NN	_	19	pobj	_	_

Oracle:
(c / citizen, mod, f / fellow)
(c2 / condense-01, ARG1, h / history)
(c3 / country, name, n2 / name)
(c4 / continue-01, ARG1, i2 / improve-01)
(f2 / facility, name, n3 / name)
(h / history, domain, f2 / facility)
(h / history, topic, n / nation)
(i2 / improve-01, ARG1, n / nation)
(n / nation, mod, c3 / country)
(n2 / name, op, "China")
(n3 / name, op, "Heroes")
(n3 / name, op, "Monument")
(n3 / name, op, "People's")
(s2 / strive-01, ARG0, n / nation)
(s2 / strive-01, ARG1, i2 / improve-01)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),citizens,,citizen,false), Span(19,20,List(1),,continuous,false), Span(16,17,List(2),for,nation,false), Span(4,6,List(4, 3),People's Heroes,(person :mod country),false), Span(1,2,List(5),fellow,fellow,false), Span(15,16,List(8, 7, 6),striving,(country :name (name :op "China")),false), Span(17,18,List(9),continuous,strive-01,false), Span(12,13,List(10),the,history,false)),Map(2 -> nation, 5 -> fellow, 8 -> "China", 7 -> name, 1 -> continuous, 4 -> country, 6 -> country, 9 -> strive-01, 0 -> citizen, 10 -> history, 3 -> person),Map(n -> nation, h -> history, s -> strive-01, c4 -> country, p -> person, c3 -> country, c -> citizen, f -> fellow, n2 -> name, c2 -> continuous))),[Ljava.lang.String;@2271e2a0,Annotation([Ljava.lang.String;@79b0e404,[Ljava.lang.String;@157a20d4,[Ljava.lang.String;@7c39d14f),Annotation([Ljava.lang.String;@5170488a,[Ljava.lang.String;@2f9e0664,[Ledu.cmu.lti.nlp.amr.Dependency;@6b26efc3),Annotation([Ljava.lang.String;@59a7f841,[Ljava.lang.String;@ac0dfe7,[Ljava.lang.String;@553255fd),Annotation([Ljava.lang.String;@936f06f,[Ljava.lang.String;@6f3564f8,[Ledu.cmu.lti.nlp.amr.Entity;@6306b11e))
AMR:
(c / citizen, mod, f / fellow)
(c4 / country, name, n2 / name)
(f / fellow, op, c2 / continuous)
(h / history, domain, c / citizen)
(h / history, poss, n / nation)
(n / nation, mod, c4 / country)
(n2 / name, op, "China")
(p / person, mod, c3 / country)
(s / strive-01, ARG0, p / person)
(s / strive-01, ARG1, n / nation)

Decoded in 511,987 microseconds
Sentence: The solemn and magnificent posture represents a sacred expectation for peace.

Oracle Span 1:  expectation => expect-01
Oracle Span 2:  magnificent => magnificent
Oracle Span 3:  peace => peace
Oracle Span 4:  posture => posture
Oracle Span 5:  represents => represent-01
Oracle Span 6:  sacred => sacred
Oracle Span 7:  solemn => solemn
Spans:
Span 2-3:  and => and
Span 8-9:  expectation => (thing :ARG1-of expect-01)
Span 10-11:  peace. => peace
Span 4-5:  posture => posture
Span 5-6:  represents => represent-01
Span 7-8:  sacred => sacred

Langrangian relaxation converged after 57 iterations. Delta = 0.0
Oracle Span 8-9:  expectation => expect-01
Oracle Span 3-4:  magnificent => magnificent
Oracle Span 10-11:  peace => peace
Oracle Span 4-5:  posture => posture
Oracle Span 5-6:  represents => represent-01
Oracle Span 7-8:  sacred => sacred
Oracle Span 1-2:  solemn => solemn

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	solemn	_	NN	NN	_	6	nsubj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	magnificent	_	JJ	JJ	_	5	amod	_	_
5	posture	_	NN	NN	_	2	conj	_	_
6	represents	_	VBZ	VBZ	_	0	root	_	_
7	a	_	DT	DT	_	9	det	_	_
8	sacred	_	JJ	JJ	_	9	amod	_	_
9	expectation	_	NN	NN	_	6	dobj	_	_
10	for	_	IN	IN	_	9	prep	_	_
11	peace	_	NN	NN	_	10	pobj	_	_
12	.	_	.	.	_	6	punct	_	_

Oracle:
(e / expect-01, ARG1, p2 / peace)
(e / expect-01, mod, s2 / sacred)
(p / posture, mod, m / magnificent)
(p / posture, mod, s / solemn)
(r / represent-01, ARG0, p / posture)
(r / represent-01, ARG1, e / expect-01)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),represents,represent-01,false), Span(8,9,List(2, 1),expectation,(thing :ARG1-of expect-01),false), Span(10,11,List(3),peace.,peace,false), Span(2,3,List(4),and,and,false), Span(7,8,List(5),sacred,sacred,false), Span(4,5,List(6),posture,posture,false)),Map(2 -> expect-01, 5 -> sacred, 1 -> thing, 4 -> and, 6 -> posture, 0 -> represent-01, 3 -> peace),Map(e -> expect-01, t -> thing, p2 -> posture, s -> sacred, p -> peace, a -> and, r -> represent-01))),[Ljava.lang.String;@42f80030,Annotation([Ljava.lang.String;@4c5d37,[Ljava.lang.String;@7eb09940,[Ljava.lang.String;@5cc7e954),Annotation([Ljava.lang.String;@5ebc9b7c,[Ljava.lang.String;@3c7bc079,[Ledu.cmu.lti.nlp.amr.Dependency;@46fb342f),Annotation([Ljava.lang.String;@2515f8ed,[Ljava.lang.String;@1f48e048,[Ljava.lang.String;@7d5293d0),Annotation([Ljava.lang.String;@62978a19,[Ljava.lang.String;@68cfd436,[Ledu.cmu.lti.nlp.amr.Entity;@30dd33c7))
AMR:
(a / and, op, p2 / posture)
(e / expect-01, ARG1, t / thing)
(e / expect-01, ARG2, p / peace)
(r / represent-01, ARG0, a / and)
(r / represent-01, ARG1, t / thing)
(t / thing, mod, s / sacred)

Decoded in 385,361 microseconds
Sentence: The thought-strings of my memory have been agitated from time to time - many heroic, stirring, and tragic scenes of shining spears and armored horses spring up in my mind.

Oracle Span 1:  agitated => agitate-01
Oracle Span 2:  and => and
Oracle Span 3:  armored => armor-01
Oracle Span 4:  heroic => heroic
Oracle Span 5:  horses => horse
Oracle Span 6:  many => many
Oracle Span 7:  memory => memory
Oracle Span 8:  mind => mind
Oracle Span 9:  scenes => scene
Oracle Span 10:  shining => shine-01
Oracle Span 11:  spears => spear
Oracle Span 12:  spring => spring-02
Oracle Span 13:  stirring => stir-02
Oracle Span 14:  strings => string
Oracle Span 15:  thought => (thing :ARG1-of think-01)
Oracle Span 16:  tragic => tragic
Spans:
Span 31-32:   => mind
Span 7-8:  agitated => agitate-01
Span 16-17:  and => stir-01
Span 14-15:  heroic, => heroic
Span 24-25:  horses => and
Span 13-14:  many => many
Span 4-5:  memory => memory
Span 19-20:  of => tragic
Span 18-19:  scenes => and
Span 20-21:  shining => scene
Span 25-26:  spring => armored
Span 0-28:  The thought-strings of my memory have been agitated from time to time - many heroic, stirring, and tragic scenes of shining spears and armored horses spring up in => (date-entity :time spring)
Span 1-2:  thought-strings => thought-string
Span 11-12:  time => time
Span 9-10:  time => time
Span 26-27:  up => horse

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 9-10:  agitated => agitate-01
Oracle Span 20-21:  and => and
Oracle Span 27-28:  armored => armor-01
Oracle Span 16-17:  heroic => heroic
Oracle Span 28-29:  horses => horse
Oracle Span 15-16:  many => many
Oracle Span 6-7:  memory => memory
Oracle Span 33-34:  mind => mind
Oracle Span 22-23:  scenes => scene
Oracle Span 24-25:  shining => shine-01
Oracle Span 25-26:  spears => spear
Oracle Span 29-30:  spring => spring-02
Oracle Span 18-19:  stirring => stir-02
Oracle Span 3-4:  strings => string
Oracle Span 1-2:  thought => (thing :ARG1-of think-01)
Oracle Span 21-22:  tragic => tragic

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	thought-strings	_	NNS	NNS	_	8	nsubjpass	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	my	_	PRP$	PRP$	_	5	poss	_	_
5	memory	_	NN	NN	_	3	pobj	_	_
6	have	_	VBP	VBP	_	8	aux	_	_
7	been	_	VBN	VBN	_	8	auxpass	_	_
8	agitated	_	VBN	VBN	_	0	root	_	_
9	from	_	IN	IN	_	8	prep	_	_
10	time	_	NN	NN	_	9	pobj	_	_
11	to	_	TO	TO	_	8	prep	_	_
12	time	_	NN	NN	_	11	pobj	_	_
13	-	_	:	:	_	8	punct	_	_
14	many	_	JJ	JJ	_	15	amod	_	_
15	heroic	_	NNS	NNS	_	8	dobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	stirring	_	VBG	VBG	_	15	conj	_	_
18	,	_	,	,	_	15	punct	_	_
19	and	_	CC	CC	_	15	cc	_	_
20	tragic	_	JJ	JJ	_	21	amod	_	_
21	scenes	_	NNS	NNS	_	15	conj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	shining	_	VBG	VBG	_	22	pcomp	_	_
24	spears	_	JJ	JJ	_	28	amod	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	armored	_	JJ	JJ	_	24	conj	_	_
27	horses	_	NNS	NNS	_	28	nn	_	_
28	spring	_	NN	NN	_	23	tmod	_	_
29	up	_	RP	RP	_	23	prt	_	_
30	in	_	IN	IN	_	23	prep	_	_
31	my	_	PRP$	PRP$	_	32	poss	_	_
32	mind	_	NN	NN	_	30	pobj	_	_
33	.	_	.	.	_	8	punct	_	_

Oracle:
(a / agitate-01, ARG0, s2 / spring-02)
(a / agitate-01, ARG1, s6 / string)
(a2 / and, op, h2 / horse)
(a2 / and, op, s3 / spear)
(a3 / armor-01, ARG1, h2 / horse)
(s / scene, mod, h / heroic)
(s / scene, mod, t2 / tragic)
(s / scene, quant, m2 / many)
(s / scene, topic, a2 / and)
(s2 / spring-02, ARG1, s / scene)
(s2 / spring-02, location, m3 / mind)
(s4 / shine-01, ARG1, s3 / spear)
(s5 / stir-02, ARG2, s / scene)
(s6 / string, mod, t4 / thing)
(s6 / string, poss, m / memory)
(t3 / think-01, ARG1, t4 / thing)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),and,stir-01,false), Span(7,8,List(1),agitated,agitate-01,false), Span(25,26,List(2),spring,armored,false), Span(11,12,List(3),time,time,false), Span(4,5,List(4),memory,memory,false), Span(19,20,List(5),of,tragic,false), Span(26,27,List(6),up,horse,false), Span(31,32,List(7),,mind,false), Span(14,15,List(8),heroic,,heroic,false), Span(24,25,List(9),horses,and,false), Span(0,28,List(11, 10),The thought-strings of my memory have been agitated from time to time - many heroic, stirring, and tragic scenes of shining spears and armored horses spring up in,(date-entity :time spring),false), Span(1,2,List(12),thought-strings,thought-string,false), Span(9,10,List(13),time,time,false), Span(18,19,List(14),scenes,and,false), Span(13,14,List(15),many,many,false), Span(20,21,List(16),shining,scene,false)),Map(2 -> armored, 5 -> tragic, 12 -> thought-string, 15 -> many, 8 -> heroic, 7 -> mind, 1 -> agitate-01, 4 -> memory, 11 -> spring, 14 -> and, 6 -> horse, 0 -> stir-01, 9 -> and, 16 -> scene, 3 -> time, 10 -> date-entity, 13 -> time),Map(m3 -> many, t4 -> time, h -> horse, h2 -> heroic, s2 -> spring, t -> time, m2 -> mind, a3 -> and, s -> stir-01, m -> memory, d -> date-entity, t3 -> thought-string, a -> agitate-01, t2 -> tragic, a2 -> armored, s3 -> scene, a4 -> and))),[Ljava.lang.String;@1cb958e0,Annotation([Ljava.lang.String;@5feab30a,[Ljava.lang.String;@3da13541,[Ljava.lang.String;@46b18c06),Annotation([Ljava.lang.String;@1019b268,[Ljava.lang.String;@1a612182,[Ledu.cmu.lti.nlp.amr.Dependency;@2e5e14b2),Annotation([Ljava.lang.String;@64c57cc3,[Ljava.lang.String;@399208c1,[Ljava.lang.String;@2aec4340),Annotation([Ljava.lang.String;@74c9292b,[Ljava.lang.String;@3ba56015,[Ledu.cmu.lti.nlp.amr.Entity;@1258b3a0))
AMR:
(a / agitate-01, ARG0, t / time)
(a / agitate-01, ARG1, s3 / scene)
(a / agitate-01, ARG6, h2 / heroic)
(a3 / and, time, m2 / mind)
(d / date-entity, location, m2 / mind)
(d / date-entity, time, s2 / spring)
(h / horse, op, a2 / armored)
(h / horse, op, a3 / and)
(h2 / heroic, op, s / stir-01)
(m / memory, op, t4 / time)
(s / stir-01, ARG0, t3 / thought-string)
(s / stir-01, ARG1, d / date-entity)
(s3 / scene, op, a4 / and)
(t2 / tragic, op, s3 / scene)
(t4 / time, location, t / time)
(t4 / time, source, m3 / many)

Decoded in 1,054,568 microseconds
Sentence: My thoughts go through those yellowing pages of history, as if I saw Emperor Kangxi, the famous ruler of a generation, contemplating alone about how to achieve unification of the territory in his audience hall, hundreds of years ago; also as if I saw Abraham Lincoln, former U.S. President, wandering alone in the dark of a great hall, thinking about the integrity of the Union.

Oracle Span 1:  ; => and
Oracle Span 2:  Abraham Lincoln => (person :name (name :op "Lincoln" :op "Abraham"))
Oracle Span 3:  achieve => (thing :manner-of achieve-01)
Oracle Span 4:  alone => alone
Oracle Span 5:  also => also
Oracle Span 6:  audience => audience
Oracle Span 7:  contemplating => contemplate-01
Oracle Span 8:  dark => dark
Oracle Span 9:  Emperor => (have-org-role-91 :ARG2 emperor)
Oracle Span 10:  famous => famous
Oracle Span 11:  former => former
Oracle Span 12:  generation => generation
Oracle Span 13:  go => go-01
Oracle Span 14:  great => great
Oracle Span 15:  hall => hall
Oracle Span 16:  hall => hall
Oracle Span 17:  history => history
Oracle Span 18:  I => i
Oracle Span 19:  integrity => integrity
Oracle Span 20:  Kangxi => (person :name (name :op "Kangxi"))
Oracle Span 21:  pages => page
Oracle Span 22:  President => (have-org-role-91 :ARG2 president)
Oracle Span 23:  ruler => rule-03
Oracle Span 24:  saw => see-01
Oracle Span 25:  territory => territory
Oracle Span 26:  thinking => think-01
Oracle Span 27:  U.S. => (country :name (name :op "U.S."))
Oracle Span 28:  unification => unify-01
Oracle Span 29:  Union => (thing :name (name :op "Union"))
Oracle Span 30:  wandering => wander-01
Oracle Span 31:  years => (temporal-quantity :unit year)
Oracle Span 32:  yellowing => yellow-01
NER Entity: (person :name (name :op "Abraham" :op "Lincoln"))
NER Entity: (organization :name (name :op "Union"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (organization :name (name :op "Emperor" :op "Kangxi"))
Spans:
Span 72-73:   => "Union"
Span 66-67:   => think-01
Span 69-70:   => integrity
Span 44-45:  Abraham => also
Span 22-23:  alone => generation
Span 33-34:  audience => territory
Span 53-54:  dark => (country :name (name :op "U.S."))
Span 13-14:  Emperor => see-01
Span 2-3:  go => go-12
Span 56-57:  great => wander-01
Span 8-9:  history, => history
Span 10-11:  if => ask-01
Span 0-40:  My thoughts go through those yellowing pages of history, as if I saw Emperor Kangxi, the famous ruler of a generation, contemplating alone about how to achieve unification of the territory in his audience hall, hundreds of years ago; also => (date-entity :time hundred :time of :time year :time ago)
Span 36-37:  of => audience
Span 54-55:  of => (have-org-role-91 :ARG2 president)
Span 18-19:  of => famous
Span 6-7:  pages => page
Span 48-49:  President, => see-01
Span 30-31:  territory => unify-01
Span 63-64:  the => great
Span 52-53:  the => former
Span 60-61:  the => dark
Span 29-30:  the => achieve-01
Span 15-16:  the => (person :name (name :op "Kangxi"))
Span 1-2:  thoughts => thought
Span 64-65:  Union. => government-organization
Span 49-51:  wandering alone => (person :name (name :op "Abraham" :op "Lincoln"))

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 43-44:  ; => and
Oracle Span 49-51:  Abraham Lincoln => (person :name (name :op "Lincoln" :op "Abraham"))
Oracle Span 29-30:  achieve => (thing :manner-of achieve-01)
Oracle Span 25-26:  alone => alone
Oracle Span 44-45:  also => also
Oracle Span 36-37:  audience => audience
Oracle Span 24-25:  contemplating => contemplate-01
Oracle Span 60-61:  dark => dark
Oracle Span 14-15:  Emperor => (have-org-role-91 :ARG2 emperor)
Oracle Span 18-19:  famous => famous
Oracle Span 52-53:  former => former
Oracle Span 22-23:  generation => generation
Oracle Span 2-3:  go => go-01
Oracle Span 63-64:  great => great
Oracle Span 37-38:  hall => hall
Oracle Span 64-65:  hall => hall
Oracle Span 8-9:  history => history
Oracle Span 12-13:  I => i
Oracle Span 69-70:  integrity => integrity
Oracle Span 15-16:  Kangxi => (person :name (name :op "Kangxi"))
Oracle Span 6-7:  pages => page
Oracle Span 54-55:  President => (have-org-role-91 :ARG2 president)
Oracle Span 19-20:  ruler => rule-03
Oracle Span 13-14:  saw => see-01
Oracle Span 33-34:  territory => territory
Oracle Span 66-67:  thinking => think-01
Oracle Span 53-54:  U.S. => (country :name (name :op "U.S."))
Oracle Span 30-31:  unification => unify-01
Oracle Span 72-73:  Union => (thing :name (name :op "Union"))
Oracle Span 56-57:  wandering => wander-01
Oracle Span 41-42:  years => (temporal-quantity :unit year)
Oracle Span 5-6:  yellowing => yellow-01

Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	thoughts	_	NNS	NNS	_	3	nsubj	_	_
3	go	_	VBP	VBP	_	0	root	_	_
4	through	_	IN	IN	_	3	prep	_	_
5	those	_	DT	DT	_	7	det	_	_
6	yellowing	_	JJ	JJ	_	7	amod	_	_
7	pages	_	NNS	NNS	_	4	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	history	_	NN	NN	_	8	pobj	_	_
10	,	_	,	,	_	3	punct	_	_
11	as	_	RB	RB	_	14	advmod	_	_
12	if	_	IN	IN	_	14	mark	_	_
13	I	_	PRP	PRP	_	14	nsubj	_	_
14	saw	_	VBD	VBD	_	3	advcl	_	_
15	Emperor	_	NNP	NNP	_	16	nn	_	_
16	Kangxi	_	NNP	NNP	_	25	nsubj	_	_
17	,	_	,	,	_	16	punct	_	_
18	the	_	DT	DT	_	20	det	_	_
19	famous	_	JJ	JJ	_	20	amod	_	_
20	ruler	_	NN	NN	_	16	appos	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	a	_	DT	DT	_	23	det	_	_
23	generation	_	NN	NN	_	21	pobj	_	_
24	,	_	,	,	_	16	punct	_	_
25	contemplating	_	VBG	VBG	_	14	dep	_	_
26	alone	_	RB	RB	_	25	advmod	_	_
27	about	_	IN	IN	_	25	prep	_	_
28	how	_	WRB	WRB	_	30	advmod	_	_
29	to	_	TO	TO	_	30	aux	_	_
30	achieve	_	VB	VB	_	27	pcomp	_	_
31	unification	_	NN	NN	_	30	dobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	the	_	DT	DT	_	34	det	_	_
34	territory	_	NN	NN	_	32	pobj	_	_
35	in	_	IN	IN	_	34	prep	_	_
36	his	_	PRP$	PRP$	_	38	poss	_	_
37	audience	_	NN	NN	_	38	nn	_	_
38	hall	_	NN	NN	_	35	pobj	_	_
39	,	_	,	,	_	34	punct	_	_
40	hundreds	_	NNS	NNS	_	34	appos	_	_
41	of	_	IN	IN	_	40	prep	_	_
42	years	_	NNS	NNS	_	41	pobj	_	_
43	ago	_	IN	IN	_	42	advmod	_	_
44	;	_	:	:	_	34	punct	_	_
45	also	_	RB	RB	_	14	advmod	_	_
46	as	_	RB	RB	_	49	advmod	_	_
47	if	_	IN	IN	_	49	mark	_	_
48	I	_	PRP	PRP	_	49	nsubj	_	_
49	saw	_	VBD	VBD	_	14	dep	_	_
50	Abraham	_	NNP	NNP	_	51	nn	_	_
51	Lincoln	_	NNP	NNP	_	57	nsubj	_	_
52	,	_	,	,	_	51	punct	_	_
53	former	_	JJ	JJ	_	55	amod	_	_
54	U.S.	_	NNP	NNP	_	55	nn	_	_
55	President	_	NNP	NNP	_	51	appos	_	_
56	,	_	,	,	_	51	punct	_	_
57	wandering	_	VBG	VBG	_	49	ccomp	_	_
58	alone	_	RB	RB	_	57	advmod	_	_
59	in	_	IN	IN	_	57	prep	_	_
60	the	_	DT	DT	_	61	det	_	_
61	dark	_	NN	NN	_	59	pobj	_	_
62	of	_	IN	IN	_	61	prep	_	_
63	a	_	DT	DT	_	65	det	_	_
64	great	_	JJ	JJ	_	65	amod	_	_
65	hall	_	NN	NN	_	62	pobj	_	_
66	,	_	,	,	_	57	punct	_	_
67	thinking	_	VBG	VBG	_	57	dep	_	_
68	about	_	IN	IN	_	67	prep	_	_
69	the	_	DT	DT	_	70	det	_	_
70	integrity	_	NN	NN	_	68	pobj	_	_
71	of	_	IN	IN	_	70	prep	_	_
72	the	_	DT	DT	_	73	det	_	_
73	Union	_	NNP	NNP	_	71	pobj	_	_
74	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(a5 / achieve-01, ARG0, p3 / person)
(a5 / achieve-01, ARG1, u / unify-01)
(a5 / achieve-01, manner, t8 / thing)
(c / contemplate-01, ARG0, p3 / person)
(c / contemplate-01, ARG1, t8 / thing)
(c / contemplate-01, location, h3 / hall)
(c / contemplate-01, manner, a2 / alone)
(c2 / country, name, n3 / name)
(d / dark, poss, h2 / hall)
(g / go-01, path, p / page)
(h2 / hall, mod, g2 / great)
(h3 / hall, mod, a7 / audience)
(h3 / hall, poss, p3 / person)
(h4 / have-org-role-91, ARG0, p3 / person)
(h4 / have-org-role-91, ARG2, e / emperor)
(h5 / have-org-role-91, ARG0, p2 / person)
(h5 / have-org-role-91, ARG1, c2 / country)
(h5 / have-org-role-91, ARG2, p4 / president)
(h5 / have-org-role-91, time, f / former)
(i / integrity, poss, t4 / thing)
(n / name, op, "Kangxi")
(n2 / name, op, "Abraham")
(n2 / name, op, "Lincoln")
(n3 / name, op, "U.S.")
(n4 / name, op, "Union")
(p / page, mod, h / history)
(p2 / person, mod, a3 / also)
(p2 / person, name, n2 / name)
(p3 / person, mod, f2 / famous)
(p3 / person, name, n / name)
(r / rule-03, ARG0, p3 / person)
(r / rule-03, ARG1, g3 / generation)
(s / see-01, ARG0, i2 / i)
(s / see-01, ARG1, a / and)
(t3 / think-01, ARG0, p2 / person)
(t3 / think-01, ARG1, i / integrity)
(t4 / thing, name, n4 / name)
(t6 / temporal-quantity, unit, y2 / year)
(u / unify-01, ARG0, p3 / person)
(u / unify-01, ARG1, t5 / territory)
(w / wander-01, ARG0, p2 / person)
(w / wander-01, ARG1, d / dark)
(w / wander-01, manner, a2 / alone)
(y / yellow-01, ARG1, p / page)

Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),territory,unify-01,false), Span(72,73,List(1),,"Union",false), Span(44,45,List(2),Abraham,also,false), Span(36,37,List(3),of,audience,false), Span(63,64,List(4),the,great,false), Span(1,2,List(5),thoughts,thought,false), Span(2,3,List(6),go,go-12,false), Span(49,51,List(10, 9, 8, 7),wandering alone,(person :name (name :op "Abraham" :op "Lincoln")),false), Span(66,67,List(11),,think-01,false), Span(54,55,List(13, 12),of,(have-org-role-91 :ARG2 president),false), Span(6,7,List(14),pages,page,false), Span(64,65,List(15),Union.,government-organization,false), Span(56,57,List(16),great,wander-01,false), Span(10,11,List(17),if,ask-01,false), Span(52,53,List(18),the,former,false), Span(18,19,List(19),of,famous,false), Span(48,49,List(20),President,,see-01,false), Span(22,23,List(21),alone,generation,false), Span(53,54,List(24, 23, 22),dark,(country :name (name :op "U.S.")),false), Span(60,61,List(25),the,dark,false), Span(33,34,List(26),audience,territory,false), Span(29,30,List(27),the,achieve-01,false), Span(8,9,List(28),history,,history,false), Span(13,14,List(29),Emperor,see-01,false), Span(15,16,List(32, 31, 30),the,(person :name (name :op "Kangxi")),false), Span(0,40,List(37, 36, 35, 34, 33),My thoughts go through those yellowing pages of history, as if I saw Emperor Kangxi, the famous ruler of a generation, contemplating alone about how to achieve unification of the territory in his audience hall, hundreds of years ago; also,(date-entity :time hundred :time of :time year :time ago),false), Span(69,70,List(38),,integrity,false)),Map(30 -> person, 2 -> also, 5 -> thought, 33 -> date-entity, 27 -> achieve-01, 12 -> have-org-role-91, 8 -> name, 15 -> government-organization, 36 -> year, 21 -> generation, 18 -> former, 24 -> "U.S.", 35 -> of, 7 -> person, 1 -> "Union", 17 -> ask-01, 23 -> name, 38 -> integrity, 26 -> territory, 4 -> great, 11 -> think-01, 32 -> "Kangxi", 14 -> page, 29 -> see-01, 20 -> see-01, 34 -> hundred, 28 -> history, 6 -> go-12, 9 -> "Abraham", 0 -> unify-01, 22 -> country, 16 -> wander-01, 37 -> ago, 19 -> famous, 10 -> "Lincoln", 3 -> audience, 31 -> name, 25 -> dark, 13 -> president),Map(n -> name, w -> wander-01, g3 -> government-organization, h -> have-org-role-91, s2 -> see-01, h2 -> history, t -> thought, p2 -> president, a3 -> ask-01, s -> see-01, d -> dark, U -> "Union", g2 -> go-12, t3 -> territory, y -> year, p -> person, g -> great, n3 -> name, a -> also, p4 -> person, a5 -> ago, d2 -> date-entity, t2 -> think-01, i -> integrity, a2 -> audience, h3 -> hundred, c -> country, f2 -> famous, u -> unify-01, f -> former, o -> of, p3 -> page, g4 -> generation, n2 -> name, a4 -> achieve-01))),[Ljava.lang.String;@5ec9b444,Annotation([Ljava.lang.String;@71d7d2b5,[Ljava.lang.String;@1d416d44,[Ljava.lang.String;@16447296),Annotation([Ljava.lang.String;@5bc8f8e,[Ljava.lang.String;@4ab1a7f6,[Ledu.cmu.lti.nlp.amr.Dependency;@5c0cd8a9),Annotation([Ljava.lang.String;@69e9c17c,[Ljava.lang.String;@848f330,[Ljava.lang.String;@4f816bd8),Annotation([Ljava.lang.String;@75723b11,[Ljava.lang.String;@52b7f6e2,[Ledu.cmu.lti.nlp.amr.Entity;@1d295ef7))
AMR:
(a3 / ask-01, ARG0, p4 / person)
(a4 / achieve-01, ARG0, p4 / person)
(a4 / achieve-01, ARG1, u / unify-01)
(a4 / achieve-01, time, a2 / audience)
(c / country, name, n2 / name)
(d / dark, poss, g3 / government-organization)
(d2 / date-entity, time, a5 / ago)
(d2 / date-entity, time, h3 / hundred)
(d2 / date-entity, time, o / of)
(d2 / date-entity, time, y / year)
(f2 / famous, calendar, p4 / person)
(g2 / go-12, ARG0, t / thought)
(g2 / go-12, ARG1, d2 / date-entity)
(g2 / go-12, ARG2, p3 / page)
(g3 / government-organization, mod, g / great)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(i / integrity, poss, U / "Union")
(n / name, op, "Abraham")
(n / name, op, "Lincoln")
(n2 / name, op, "U.S.")
(n3 / name, op, "Kangxi")
(p / person, name, n / name)
(p2 / president, mod, f / former)
(p4 / person, name, n3 / name)
(s / see-01, ARG0, g4 / generation)
(s / see-01, ARG1, w / wander-01)
(s / see-01, ARG6, a / also)
(s2 / see-01, ARG0, t / thought)
(s2 / see-01, ARG1, p4 / person)
(t2 / think-01, ARG0, p / person)
(t2 / think-01, ARG1, i / integrity)
(u / unify-01, ARG0, h2 / history)
(u / unify-01, ARG1, t3 / territory)
(w / wander-01, ARG0, p / person)
(w / wander-01, ARG1, h / have-org-role-91)
(w / wander-01, ARG2, d / dark)

Decoded in 6,868,029 microseconds
Sentence: "Although it is peaceful throughout the world, it is certainly dangerous to forget war!" My fellow citizens, we want development and peace, but we must never exercise forbearance blindly. The "Boxer Protocol " of national betrayal and humiliation has aggravated China's poverty and backwardness in modern time - falling behind will lead to being bullied.

Oracle Span 1:  aggravated => aggravate-01
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  backwardness => backwardness
Oracle Span 6:  behind => behind
Oracle Span 7:  betrayal => betray-01
Oracle Span 8:  blindly => blind-01
Oracle Span 9:  Boxer Protocol => (treaty :name (name :op "Protocol" :op "Boxer"))
Oracle Span 10:  bullied => bully-01
Oracle Span 11:  certainly => certain
Oracle Span 12:  China => (country :name (name :op "China"))
Oracle Span 13:  citizens => citizen
Oracle Span 14:  dangerous => dangerous
Oracle Span 15:  development => develop-02
Oracle Span 16:  exercise => exercise-01
Oracle Span 17:  falling => fall-01
Oracle Span 18:  fellow => fellow
Oracle Span 19:  forbearance => forbearance
Oracle Span 20:  forget => forget-01
Oracle Span 21:  has => have-concession-91
Oracle Span 22:  humiliation => humiliate-01
Oracle Span 23:  lead => lead-03
Oracle Span 24:  modern => modern
Oracle Span 25:  national => nation
Oracle Span 26:  peace => peace
Oracle Span 27:  peaceful => peaceful
Oracle Span 28:  poverty => poverty
Oracle Span 29:  want => want-01
Oracle Span 30:  war => war
Oracle Span 31:  we => we
Oracle Span 32:  world => world
NER Entity: (thing :name (name :op "Boxer" :op "Protocol"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 60-61:   => lead-03
Span 58-59:   => behind
Span 63-64:   => bully-01
Span 55-56:   => time
Span 57-58:   => fall-01
Span 32-33:  " => exercise-01
Span 0-1:  "Although => (person :ARG0-of have-org-role-91)
Span 30-31:  "Boxer => muster-01
Span 47-48:  - => aggravate-01
Span 42-43:  and => nation
Span 20-21:  and => citizen
Span 28-29:  blindly. => bunt-01
Span 54-55:  bullied. => modern
Span 19-20:  development => fellow
Span 26-27:  exercise => peace
Span 48-49:  falling => (country :name (name :op "China"))
Span 15-16:  fellow => war
Span 12-13:  forget => dangerous
Span 37-38:  humiliation => (person :ARG0-of have-org-role-91)
Span 44-45:  in => and
Span 7-8:  it => world
Span 51-52:  lead => and
Span 24-25:  must => develop-01
Span 14-15:  My => forget-01
Span 34-35:  national => blindly
Span 25-26:  never => and
Span 33-34:  of => foresee-01
Span 4-5:  throughout => peaceful
Span 52-53:  to => backwardness
Span 11-12:  to => certainly
Span 23-24:  we => want-01
Span 50-51:  will => poverty

 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of never in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of exercise in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of forbearance in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of blindly in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of Boxer in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of Protocol in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of betrayal in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliation in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of aggravated in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of poverty in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of backwardness in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of modern in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of falling in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lead in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of bullied in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 64
Langrangian relaxation converged after 39 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of never in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of exercise in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of forbearance in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of blindly in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of Boxer in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of Protocol in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of betrayal in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliation in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of aggravated in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of poverty in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of backwardness in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of modern in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of falling in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lead in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of bullied in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 64
Oracle Span 47-48:  aggravated => aggravate-01
Oracle Span 25-26:  and => and
Oracle Span 44-45:  and => and
Oracle Span 51-52:  and => and
Oracle Span 52-53:  backwardness => backwardness
Oracle Span 58-59:  behind => behind
Oracle Span 43-44:  betrayal => betray-01
Oracle Span 34-35:  blindly => blind-01
Oracle Span 38-40:  Boxer Protocol => (treaty :name (name :op "Protocol" :op "Boxer"))
Oracle Span 63-64:  bullied => bully-01
Oracle Span 11-12:  certainly => certain
Oracle Span 48-49:  China => (country :name (name :op "China"))
Oracle Span 20-21:  citizens => citizen
Oracle Span 12-13:  dangerous => dangerous
Oracle Span 24-25:  development => develop-02
Oracle Span 32-33:  exercise => exercise-01
Oracle Span 57-58:  falling => fall-01
Oracle Span 19-20:  fellow => fellow
Oracle Span 33-34:  forbearance => forbearance
Oracle Span 14-15:  forget => forget-01
Oracle Span 46-47:  has => have-concession-91
Oracle Span 45-46:  humiliation => humiliate-01
Oracle Span 60-61:  lead => lead-03
Oracle Span 54-55:  modern => modern
Oracle Span 42-43:  national => nation
Oracle Span 26-27:  peace => peace
Oracle Span 4-5:  peaceful => peaceful
Oracle Span 50-51:  poverty => poverty
Oracle Span 23-24:  want => want-01
Oracle Span 15-16:  war => war
Oracle Span 22-23:  we => we
Oracle Span 7-8:  world => world

Dependencies:
1	"	_	``	``	_	13	punct	_	_
2	Although	_	IN	IN	_	5	mark	_	_
3	it	_	PRP	PRP	_	5	nsubj	_	_
4	is	_	VBZ	VBZ	_	5	cop	_	_
5	peaceful	_	JJ	JJ	_	13	advcl	_	_
6	throughout	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	world	_	NN	NN	_	6	pobj	_	_
9	,	_	,	,	_	13	punct	_	_
10	it	_	PRP	PRP	_	13	nsubj	_	_
11	is	_	VBZ	VBZ	_	13	cop	_	_
12	certainly	_	RB	RB	_	13	advmod	_	_
13	dangerous	_	JJ	JJ	_	0	root	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	forget	_	VB	VB	_	13	xcomp	_	_
16	war	_	NN	NN	_	15	dobj	_	_
17	!	_	.	.	_	13	punct	_	_
18	"	_	''	''	_	13	punct	_	_
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	6	nsubj	_	_
4	,	_	,	,	_	6	punct	_	_
5	we	_	PRP	PRP	_	6	nsubj	_	_
6	want	_	VBP	VBP	_	0	root	_	_
7	development	_	NN	NN	_	6	dobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	peace	_	NN	NN	_	7	conj	_	_
10	,	_	,	,	_	6	punct	_	_
11	but	_	CC	CC	_	6	cc	_	_
12	we	_	PRP	PRP	_	15	nsubj	_	_
13	must	_	MD	MD	_	15	aux	_	_
14	never	_	RB	RB	_	15	neg	_	_
15	exercise	_	VB	VB	_	6	conj	_	_
16	forbearance	_	RB	RB	_	17	advmod	_	_
17	blindly	_	RB	RB	_	15	advmod	_	_
18	.	_	.	.	_	6	punct	_	_
1	The	_	DT	DT	_	4	det	_	_
2	"	_	``	``	_	4	punct	_	_
3	Boxer	_	NNP	NNP	_	4	nn	_	_
4	Protocol	_	NNP	NNP	_	12	nsubj	_	_
5	"	_	''	''	_	4	punct	_	_
6	of	_	IN	IN	_	4	prep	_	_
7	national	_	JJ	JJ	_	8	amod	_	_
8	betrayal	_	NN	NN	_	6	pobj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	humiliation	_	NN	NN	_	8	conj	_	_
11	has	_	VBZ	VBZ	_	12	aux	_	_
12	aggravated	_	VBN	VBN	_	0	root	_	_
13	China	_	NNP	NNP	_	15	poss	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	poverty	_	NN	NN	_	12	dobj	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	backwardness	_	NNS	NNS	_	15	conj	_	_
18	in	_	IN	IN	_	12	prep	_	_
19	modern	_	JJ	JJ	_	20	amod	_	_
20	time	_	NN	NN	_	18	pobj	_	_
21	-	_	:	:	_	12	punct	_	_
22	falling	_	VBG	VBG	_	25	nsubj	_	_
23	behind	_	RB	RB	_	25	advmod	_	_
24	will	_	MD	MD	_	25	aux	_	_
25	lead	_	VB	VB	_	12	parataxis	_	_
26	to	_	TO	TO	_	25	prep	_	_
27	being	_	VBG	VBG	_	28	auxpass	_	_
28	bullied	_	VBD	VBD	_	26	pcomp	_	_
29	.	_	.	.	_	12	punct	_	_

Oracle:
(a / and, op, d / develop-02)
(a / and, op, p / peace)
(a3 / aggravate-01, ARG0, t2 / treaty)
(a3 / aggravate-01, ARG1, a4 / and)
(a3 / aggravate-01, time, m2 / modern)
(a4 / and, op, b2 / backwardness)
(a4 / and, op, p2 / poverty)
(a4 / and, poss, c3 / country)
(a5 / and, consist, t2 / treaty)
(a5 / and, op, b3 / betray-01)
(a5 / and, op, h / humiliate-01)
(b / blind-01, ARG1, w / want-01)
(b3 / betray-01, ARG1, n3 / nation)
(c / citizen, mod, f / fellow)
(c3 / country, name, n / name)
(d2 / dangerous, domain, f4 / forget-01)
(d2 / dangerous, mod, c4 / certain)
(e / exercise-01, ARG0, w2 / we)
(e / exercise-01, ARG1, f2 / forbearance)
(e / exercise-01, manner, b / blind-01)
(f3 / fall-01, direction, b5 / behind)
(f4 / forget-01, ARG1, w3 / war)
(h / humiliate-01, ARG1, n3 / nation)
(h2 / have-concession-91, ARG1, d2 / dangerous)
(h2 / have-concession-91, ARG2, p3 / peaceful)
(l / lead-03, ARG0, f3 / fall-01)
(l / lead-03, ARG2, b4 / bully-01)
(n / name, op, "China")
(n2 / name, op, "Boxer")
(n2 / name, op, "Protocol")
(p3 / peaceful, location, w4 / world)
(t2 / treaty, name, n2 / name)
(w / want-01, ARG0, w2 / we)
(w / want-01, ARG1, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),blindly.,bunt-01,false), Span(33,34,List(1),of,foresee-01,false), Span(42,43,List(2),and,nation,false), Span(4,5,List(3),throughout,peaceful,false), Span(12,13,List(4),forget,dangerous,false), Span(54,55,List(5),bullied.,modern,false), Span(14,15,List(6),My,forget-01,false), Span(7,8,List(7),it,world,false), Span(20,21,List(8),and,citizen,false), Span(34,35,List(9),national,blindly,false), Span(60,61,List(10),,lead-03,false), Span(32,33,List(11),",exercise-01,false), Span(19,20,List(12),development,fellow,false), Span(50,51,List(13),will,poverty,false), Span(37,38,List(15, 14),humiliation,(person :ARG0-of have-org-role-91),false), Span(47,48,List(16),-,aggravate-01,false), Span(0,1,List(18, 17),"Although,(person :ARG0-of have-org-role-91),false), Span(26,27,List(19),exercise,peace,false), Span(52,53,List(20),to,backwardness,false), Span(24,25,List(21),must,develop-01,false), Span(15,16,List(22),fellow,war,false), Span(58,59,List(23),,behind,false), Span(25,26,List(24),never,and,false), Span(11,12,List(25),to,certainly,false), Span(48,49,List(28, 27, 26),falling,(country :name (name :op "China")),false), Span(51,52,List(29),lead,and,false), Span(63,64,List(30),,bully-01,false), Span(23,24,List(31),we,want-01,false), Span(30,31,List(32),"Boxer,muster-01,false), Span(55,56,List(33),,time,false), Span(57,58,List(34),,fall-01,false), Span(44,45,List(35),in,and,false)),Map(30 -> bully-01, 2 -> nation, 5 -> modern, 33 -> time, 27 -> name, 12 -> fellow, 8 -> citizen, 15 -> have-org-role-91, 21 -> develop-01, 18 -> have-org-role-91, 24 -> and, 35 -> and, 7 -> world, 1 -> foresee-01, 17 -> person, 23 -> behind, 26 -> country, 4 -> dangerous, 11 -> exercise-01, 32 -> muster-01, 14 -> person, 29 -> and, 20 -> backwardness, 34 -> fall-01, 28 -> "China", 6 -> forget-01, 9 -> blindly, 0 -> bunt-01, 22 -> war, 16 -> aggravate-01, 19 -> peace, 10 -> lead-03, 3 -> peaceful, 31 -> want-01, 25 -> certainly, 13 -> poverty),Map(e -> exercise-01, w -> world, n -> nation, b3 -> backwardness, h -> have-org-role-91, h2 -> have-org-role-91, p5 -> peace, t -> time, b -> bunt-01, m2 -> muster-01, b2 -> blindly, f4 -> fall-01, b5 -> bully-01, p2 -> poverty, a3 -> and, w3 -> want-01, m -> modern, d -> dangerous, p -> peaceful, c3 -> country, a -> aggravate-01, p4 -> person, d2 -> develop-01, f3 -> fellow, b4 -> behind, w2 -> war, a2 -> and, c -> citizen, f2 -> forget-01, l -> lead-03, f -> foresee-01, p3 -> person, n2 -> name, c2 -> certainly, a4 -> and))),[Ljava.lang.String;@27d13fa6,Annotation([Ljava.lang.String;@3c242397,[Ljava.lang.String;@66470328,[Ljava.lang.String;@381a9734),Annotation([Ljava.lang.String;@1698a39e,[Ljava.lang.String;@b3d0241,[Ledu.cmu.lti.nlp.amr.Dependency;@55bd0e4d),Annotation([Ljava.lang.String;@397290f9,[Ljava.lang.String;@6a25401a,[Ljava.lang.String;@9697815),Annotation([Ljava.lang.String;@341bc013,[Ljava.lang.String;@19436b31,[Ledu.cmu.lti.nlp.amr.Entity;@59a6cd93))
AMR:
(a / aggravate-01, ARG0, c3 / country)
(a / aggravate-01, ARG1, p2 / poverty)
(a3 / and, op, b3 / backwardness)
(a3 / and, op, p2 / poverty)
(a4 / and, domain, f2 / forget-01)
(a4 / and, op, a / aggravate-01)
(b / bunt-01, ARG1, d2 / develop-01)
(b / bunt-01, ARG6, p5 / peace)
(b4 / behind, domain, f2 / forget-01)
(b5 / bully-01, ARG1, f2 / forget-01)
(c3 / country, name, n2 / name)
(d / dangerous, domain, f2 / forget-01)
(d / dangerous, mod, c2 / certainly)
(d2 / develop-01, ARG1, c / citizen)
(e / exercise-01, ARG1, b2 / blindly)
(e / exercise-01, ARG2, f2 / forget-01)
(f / foresee-01, ARG1, e / exercise-01)
(f2 / forget-01, ARG1, w2 / war)
(f4 / fall-01, ARG1, b4 / behind)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, f3 / fellow)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG1, p / peaceful)
(l / lead-03, ARG1, b5 / bully-01)
(m / modern, domain, f2 / forget-01)
(m2 / muster-01, ARG2, f2 / forget-01)
(m2 / muster-01, ARG6, b / bunt-01)
(n / nation, domain, f2 / forget-01)
(n2 / name, op, "China")
(p / peaceful, location, w / world)
(p3 / person, domain, f2 / forget-01)
(t / time, domain, f2 / forget-01)
(w3 / want-01, ARG0, p4 / person)
(w3 / want-01, ARG1, a2 / and)
(w3 / want-01, ARG6, d2 / develop-01)

Decoded in 44,170,200 microseconds
Sentence: Without strength, where does peace come from!

Oracle Span 1:  come => come-03
Oracle Span 2:  peace => peace
Oracle Span 3:  strength => strength
Spans:
Span 5-6:  come => peace
Span 6-7:  from! => come-03
Span 1-2:  strength, => strength

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 6-7:  come => come-03
Oracle Span 5-6:  peace => peace
Oracle Span 1-2:  strength => strength

Dependencies:
1	Without	_	IN	IN	_	7	prep	_	_
2	strength	_	NN	NN	_	1	pobj	_	_
3	,	_	,	,	_	7	punct	_	_
4	where	_	WRB	WRB	_	7	advmod	_	_
5	does	_	VBZ	VBZ	_	7	aux	_	_
6	peace	_	NN	NN	_	7	nsubj	_	_
7	come	_	VB	VB	_	0	root	_	_
8	from	_	IN	IN	_	7	prep	_	_
9	!	_	.	.	_	7	punct	_	_

Oracle:
(c / come-03, ARG1, p / peace)
(c / come-03, condition, s / strength)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),come,peace,false), Span(1,2,List(1),strength,,strength,false), Span(6,7,List(2),from!,come-03,false)),Map(2 -> come-03, 1 -> strength, 0 -> peace),Map(s -> strength, p -> peace, c -> come-03))),[Ljava.lang.String;@2f7a136,Annotation([Ljava.lang.String;@40de0001,[Ljava.lang.String;@77bed130,[Ljava.lang.String;@2f2c35ca),Annotation([Ljava.lang.String;@106ddf08,[Ljava.lang.String;@20831b0c,[Ledu.cmu.lti.nlp.amr.Dependency;@2135697d),Annotation([Ljava.lang.String;@6ff98af4,[Ljava.lang.String;@11928d9c,[Ljava.lang.String;@2971bfd9),Annotation([Ljava.lang.String;@2385450b,[Ljava.lang.String;@88d5a5,[Ledu.cmu.lti.nlp.amr.Entity;@5734645))
AMR:
(c / come-03, ARG1, p / peace)
(c / come-03, location, s / strength)

Decoded in 85,228 microseconds
Sentence: We must focus on national defense education, build up a Great Wall in the hearts of 1.3 billion people, and must establish the full range of a national defense system having the ability to both attack and defend;

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  attack => attack-01
Oracle Span 4:  build => build-05
Oracle Span 5:  defend => defend-01
Oracle Span 6:  defense => defense
Oracle Span 7:  defense => defense
Oracle Span 8:  education => education
Oracle Span 9:  establish => establish-01
Oracle Span 10:  focus => focus-01
Oracle Span 11:  full => full
Oracle Span 12:  Great => great
Oracle Span 13:  hearts => heart
Oracle Span 14:  national => nation
Oracle Span 15:  national => nation
Oracle Span 16:  range => range-01
Oracle Span 17:  system => system
Oracle Span 18:  Wall => wall
Oracle Span 19:  We => we
NER Entity: (country :name (name :op "Great" :op "Wall"))
Spans:
Span 38-39:   => and
Span 39-40:   => defend-01
Span 26-27:  a => range
Span 32-33:  ability => have-03
Span 36-37:  and => both
Span 7-8:  build => and
Span 37-38:  defend; => attack-01
Span 5-6:  defense => defense
Span 6-7:  education, => education
Span 2-3:  focus => focus-01
Span 23-24:  full => establish-01
Span 30-31:  having => descend-01
Span 1-2:  must => muster-01
Span 4-5:  national => nation
Span 25-26:  of => full
Span 15-16:  of => heart
Span 29-30:  system => nation
Span 22-23:  the => muster-01
Span 31-32:  the => system
Span 8-9:  up => build-02
Span 11-13:  Wall in => (name :op "Wall" :op "Great")
Span 0-1:  We => we
Span 0-1:  We => 1

Langrangian relaxation converged after 109 iterations. Delta = 0.0
Oracle Span 21-22:  and => and
Oracle Span 38-39:  and => and
Oracle Span 37-38:  attack => attack-01
Oracle Span 8-9:  build => build-05
Oracle Span 39-40:  defend => defend-01
Oracle Span 5-6:  defense => defense
Oracle Span 30-31:  defense => defense
Oracle Span 6-7:  education => education
Oracle Span 23-24:  establish => establish-01
Oracle Span 2-3:  focus => focus-01
Oracle Span 25-26:  full => full
Oracle Span 11-12:  Great => great
Oracle Span 15-16:  hearts => heart
Oracle Span 4-5:  national => nation
Oracle Span 29-30:  national => nation
Oracle Span 26-27:  range => range-01
Oracle Span 31-32:  system => system
Oracle Span 12-13:  Wall => wall
Oracle Span 0-1:  We => we

Dependencies:
1	We	_	PRP	PRP	_	3	nsubj	_	_
2	must	_	MD	MD	_	3	aux	_	_
3	focus	_	VB	VB	_	0	root	_	_
4	on	_	IN	IN	_	3	prep	_	_
5	national	_	JJ	JJ	_	7	amod	_	_
6	defense	_	NN	NN	_	7	nn	_	_
7	education	_	NN	NN	_	4	pobj	_	_
8	,	_	,	,	_	3	punct	_	_
9	build	_	VBP	VBP	_	3	conj	_	_
10	up	_	RP	RP	_	9	prt	_	_
11	a	_	DT	DT	_	13	det	_	_
12	Great	_	NNP	NNP	_	13	nn	_	_
13	Wall	_	NNP	NNP	_	9	dobj	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	hearts	_	NNS	NNS	_	14	pobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	1.3	_	CD	CD	_	19	number	_	_
19	billion	_	CD	CD	_	20	num	_	_
20	people	_	NNS	NNS	_	17	pobj	_	_
21	,	_	,	,	_	3	punct	_	_
22	and	_	CC	CC	_	3	cc	_	_
23	must	_	MD	MD	_	24	aux	_	_
24	establish	_	VB	VB	_	3	conj	_	_
25	the	_	DT	DT	_	27	det	_	_
26	full	_	JJ	JJ	_	27	amod	_	_
27	range	_	NN	NN	_	24	dobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	a	_	DT	DT	_	32	det	_	_
30	national	_	JJ	JJ	_	32	amod	_	_
31	defense	_	NN	NN	_	32	nn	_	_
32	system	_	NN	NN	_	28	pobj	_	_
33	having	_	VBG	VBG	_	32	vmod	_	_
34	the	_	DT	DT	_	35	det	_	_
35	ability	_	NN	NN	_	33	dobj	_	_
36	to	_	TO	TO	_	38	aux	_	_
37	both	_	DT	DT	_	38	preconj	_	_
38	attack	_	VB	VB	_	33	vmod	_	_
39	and	_	CC	CC	_	38	cc	_	_
40	defend	_	VB	VB	_	38	conj	_	_
41	;	_	:	:	_	3	punct	_	_

Oracle:
(a / and, op, b / build-05)
(a / and, op, e2 / establish-01)
(a / and, op, f / focus-01)
(a6 / and, op, a7 / attack-01)
(a6 / and, op, d4 / defend-01)
(a7 / attack-01, ARG0, s / system)
(b / build-05, ARG0, w / we)
(b / build-05, ARG1, w2 / wall)
(b / build-05, location, h / heart)
(d / defense, mod, n / nation)
(d4 / defend-01, ARG0, s / system)
(e / education, mod, d / defense)
(e2 / establish-01, ARG0, w / we)
(e2 / establish-01, ARG1, s / system)
(f / focus-01, ARG0, w / we)
(f / focus-01, ARG2, e / education)
(n3 / nation, mod, d2 / defense)
(r / range-01, ARG1, s / system)
(r / range-01, ARG2, f2 / full)
(s / system, mod, n3 / nation)
(w2 / wall, mod, g / great)

Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),,and,false), Span(36,37,List(1),and,both,false), Span(1,2,List(2),must,muster-01,false), Span(5,6,List(3),defense,defense,false), Span(6,7,List(4),education,,education,false), Span(22,23,List(5),the,muster-01,false), Span(23,24,List(6),full,establish-01,false), Span(32,33,List(7),ability,have-03,false), Span(25,26,List(8),of,full,false), Span(0,1,List(9),We,we,false), Span(2,3,List(10),focus,focus-01,false), Span(0,1,List(11),We,1,false), Span(37,38,List(12),defend;,attack-01,false), Span(29,30,List(13),system,nation,false), Span(39,40,List(14),,defend-01,false), Span(8,9,List(15),up,build-02,false), Span(31,32,List(16),the,system,false), Span(7,8,List(17),build,and,false), Span(30,31,List(18),having,descend-01,false), Span(4,5,List(19),national,nation,false), Span(11,13,List(22, 21, 20),Wall in,(name :op "Wall" :op "Great"),false), Span(15,16,List(23),of,heart,false), Span(26,27,List(24),a,range,false)),Map(2 -> muster-01, 5 -> muster-01, 12 -> attack-01, 8 -> full, 15 -> build-02, 21 -> "Wall", 18 -> descend-01, 24 -> range, 7 -> have-03, 1 -> both, 17 -> and, 23 -> heart, 4 -> education, 11 -> 1, 14 -> defend-01, 20 -> name, 6 -> establish-01, 9 -> we, 0 -> and, 22 -> "Great", 16 -> system, 19 -> nation, 10 -> focus-01, 3 -> defense, 13 -> nation),Map(e -> education, n -> nation, w -> we, h -> have-03, h2 -> heart, b -> both, d3 -> descend-01, b2 -> build-02, m2 -> muster-01, e2 -> establish-01, a3 -> and, s -> system, m -> muster-01, d -> defense, 1 -> 1, n3 -> name, a -> and, d2 -> defend-01, r -> range, a2 -> attack-01, f2 -> focus-01, f -> full, n2 -> nation))),[Ljava.lang.String;@696f140a,Annotation([Ljava.lang.String;@1604aee2,[Ljava.lang.String;@68f33029,[Ljava.lang.String;@de461be),Annotation([Ljava.lang.String;@1cbafb4c,[Ljava.lang.String;@2ffa3587,[Ledu.cmu.lti.nlp.amr.Dependency;@5e793a29),Annotation([Ljava.lang.String;@703e59c9,[Ljava.lang.String;@3b95ac19,[Ljava.lang.String;@453de0e1),Annotation([Ljava.lang.String;@5282321d,[Ljava.lang.String;@50f0d995,[Ledu.cmu.lti.nlp.amr.Entity;@461352f6))
AMR:
(a / and, op, a2 / attack-01)
(a / and, op, d2 / defend-01)
(a2 / attack-01, ARG1, b / both)
(b2 / build-02, ARG1, 1 / 1)
(b2 / build-02, ARG6, a3 / and)
(b2 / build-02, time, n3 / name)
(d2 / defend-01, ARG1, h / have-03)
(d3 / descend-01, ARG0, s / system)
(d3 / descend-01, ARG1, h2 / heart)
(e / education, mod, d / defense)
(e / education, mod, n2 / nation)
(e2 / establish-01, ARG1, r / range)
(f2 / focus-01, ARG1, e / education)
(f2 / focus-01, time, 1 / 1)
(f2 / focus-01, time, w / we)
(h / have-03, ARG1, s / system)
(m / muster-01, ARG1, e2 / establish-01)
(m / muster-01, ARG6, f2 / focus-01)
(m2 / muster-01, ARG1, r / range)
(n3 / name, op, "Great")
(n3 / name, op, "Wall")
(r / range, mod, f / full)
(s / system, mod, n / nation)
(s / system, path, r / range)

Decoded in 4,576,941 microseconds
Sentence: The best defense is to attack - we should strengthen forces which can engage in ultra-long-range attack, improve combat capability throughout all of aerospace, of great depth, and over great distances. On the premise of avoiding influence on national economic development, increase investment and construction of the defense industry, accelerate modernization and internationalization of military equipment, and establish a high-quality, high-tech elite division.

Oracle Span 1:  accelerate => accelerate-01
Oracle Span 2:  aerospace => aerospace
Oracle Span 3:  all => all
Oracle Span 4:  and => and
Oracle Span 5:  and => and
Oracle Span 6:  and => and
Oracle Span 7:  and => and
Oracle Span 8:  attack => attack-01
Oracle Span 9:  attack => attack-01
Oracle Span 10:  avoiding => avoid-01
Oracle Span 11:  best => (good :degree most)
Oracle Span 12:  can => possible
Oracle Span 13:  capability => capable-41
Oracle Span 14:  combat => combat-01
Oracle Span 15:  construction => construct-01
Oracle Span 16:  defense => defend-01
Oracle Span 17:  defense => defend
Oracle Span 18:  depth => depth
Oracle Span 19:  development => develop-02
Oracle Span 20:  distances => distance
Oracle Span 21:  division => division
Oracle Span 22:  economic => economy
Oracle Span 23:  elite => elite
Oracle Span 24:  engage => engage-01
Oracle Span 25:  equipment => equipment
Oracle Span 26:  establish => establish-01
Oracle Span 27:  forces => force
Oracle Span 28:  great => great
Oracle Span 29:  great => great
Oracle Span 30:  high => high
Oracle Span 31:  high => high
Oracle Span 32:  improve => improve-01
Oracle Span 33:  increase => increase-01
Oracle Span 34:  industry => industry
Oracle Span 35:  influence => influence-01
Oracle Span 36:  internationalization => internationalize-00
Oracle Span 37:  investment => invest-01
Oracle Span 38:  long => long
Oracle Span 39:  military => military
Oracle Span 40:  modernization => modernize-01
Oracle Span 41:  national => nation
Oracle Span 42:  premise => premise-01
Oracle Span 43:  quality => quality
Oracle Span 44:  range => range-01
Oracle Span 45:  should => recommend-01
Oracle Span 46:  strengthen => strengthen-01
Oracle Span 47:  tech => tech
Oracle Span 48:  ultra => ultra
Oracle Span 49:  we => we
Spans:
Span 64-65:   => establish-01
Span 63-64:   => and
Span 69-70:   => elite
Span 70-71:   => division
Span 68-69:   => high
Span 49-50:  accelerate => construct-01
Span 56-57:  and => modernize-01
Span 27-28:  and => great
Span 5-6:  attack => attack-01
Span 16-17:  attack, => attack-01
Span 1-2:  best => (good :degree most)
Span 12-13:  can => possible
Span 19-20:  capability => combat-01
Span 18-19:  combat => improve-01
Span 44-45:  construction => develop-01
Span 47-48:  defense => invest-01
Span 2-3:  defense => descend-01
Span 40-41:  development, => influence-01
Span 30-31:  distances. => and
Span 39-40:  economic => avoid-01
Span 61-62:  elite => equipment
Span 13-14:  engage => engage-01
Span 55-56:  equipment, => (accelerate-01 :ARG1-of have-purpose-91)
Span 57-58:  establish => and
Span 10-11:  forces => force
Span 60-61:  high-tech => military
Span 17-18:  improve => and
Span 48-49:  industry, => and
Span 52-53:  internationalization => descend-01
Span 42-43:  investment => nation
Span 54-55:  military => and
Span 24-25:  of => aerospace
Span 53-54:  of => industry
Span 22-23:  of => all
Span 37-38:  on => premise
Span 28-29:  over => depth
Span 8-9:  should => shoulder-01
Span 9-10:  strengthen => strengthen-01
Span 0-1:  The => (country :name (name :op "North"))
Span 32-33:  the => great
Span 46-47:  the => increase-01
Span 20-21:  throughout => capacitate-01
Span 7-8:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of premise in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of avoiding in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of economic in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of development in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of increase in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of investment in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of construction in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of defense in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of industry in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of accelerate in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of modernization in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of internationalization in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of military in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of equipment in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of establish in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-quality in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-tech in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of elite in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of division in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 71
Langrangian relaxation converged after 67 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of premise in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of avoiding in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of economic in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of development in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of increase in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of investment in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of construction in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of defense in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of industry in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of accelerate in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of modernization in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of internationalization in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of military in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of equipment in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of establish in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-quality in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-tech in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of elite in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of division in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 71
Oracle Span 59-60:  accelerate => accelerate-01
Oracle Span 28-29:  aerospace => aerospace
Oracle Span 26-27:  all => all
Oracle Span 34-35:  and => and
Oracle Span 52-53:  and => and
Oracle Span 61-62:  and => and
Oracle Span 67-68:  and => and
Oracle Span 5-6:  attack => attack-01
Oracle Span 20-21:  attack => attack-01
Oracle Span 43-44:  avoiding => avoid-01
Oracle Span 1-2:  best => (good :degree most)
Oracle Span 12-13:  can => possible
Oracle Span 24-25:  capability => capable-41
Oracle Span 23-24:  combat => combat-01
Oracle Span 53-54:  construction => construct-01
Oracle Span 2-3:  defense => defend-01
Oracle Span 56-57:  defense => defend
Oracle Span 32-33:  depth => depth
Oracle Span 48-49:  development => develop-02
Oracle Span 37-38:  distances => distance
Oracle Span 78-79:  division => division
Oracle Span 47-48:  economic => economy
Oracle Span 77-78:  elite => elite
Oracle Span 13-14:  engage => engage-01
Oracle Span 65-66:  equipment => equipment
Oracle Span 68-69:  establish => establish-01
Oracle Span 10-11:  forces => force
Oracle Span 31-32:  great => great
Oracle Span 36-37:  great => great
Oracle Span 70-71:  high => high
Oracle Span 74-75:  high => high
Oracle Span 22-23:  improve => improve-01
Oracle Span 50-51:  increase => increase-01
Oracle Span 57-58:  industry => industry
Oracle Span 44-45:  influence => influence-01
Oracle Span 62-63:  internationalization => internationalize-00
Oracle Span 51-52:  investment => invest-01
Oracle Span 17-18:  long => long
Oracle Span 64-65:  military => military
Oracle Span 60-61:  modernization => modernize-01
Oracle Span 46-47:  national => nation
Oracle Span 41-42:  premise => premise-01
Oracle Span 72-73:  quality => quality
Oracle Span 19-20:  range => range-01
Oracle Span 8-9:  should => recommend-01
Oracle Span 9-10:  strengthen => strengthen-01
Oracle Span 76-77:  tech => tech
Oracle Span 15-16:  ultra => ultra
Oracle Span 7-8:  we => we

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	best	_	JJS	JJS	_	3	amod	_	_
3	defense	_	NN	NN	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	attack	_	VB	VB	_	4	xcomp	_	_
7	-	_	:	:	_	4	punct	_	_
8	we	_	PRP	PRP	_	10	nsubj	_	_
9	should	_	MD	MD	_	10	aux	_	_
10	strengthen	_	VB	VB	_	4	parataxis	_	_
11	forces	_	NNS	NNS	_	10	dobj	_	_
12	which	_	WDT	WDT	_	14	nsubj	_	_
13	can	_	MD	MD	_	14	aux	_	_
14	engage	_	VB	VB	_	11	rcmod	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	ultra-long-range	_	JJ	JJ	_	17	amod	_	_
17	attack	_	NN	NN	_	15	pobj	_	_
18	,	_	,	,	_	14	punct	_	_
19	improve	_	VB	VB	_	14	dep	_	_
20	combat	_	NN	NN	_	21	nn	_	_
21	capability	_	NN	NN	_	19	dobj	_	_
22	throughout	_	IN	IN	_	19	prep	_	_
23	all	_	DT	DT	_	22	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	aerospace	_	NN	NN	_	24	pobj	_	_
26	,	_	,	,	_	14	punct	_	_
27	of	_	IN	IN	_	14	prep	_	_
28	great	_	JJ	JJ	_	29	amod	_	_
29	depth	_	NN	NN	_	27	pobj	_	_
30	,	_	,	,	_	27	punct	_	_
31	and	_	CC	CC	_	27	cc	_	_
32	over	_	IN	IN	_	27	conj	_	_
33	great	_	JJ	JJ	_	34	amod	_	_
34	distances	_	NNS	NNS	_	32	pobj	_	_
35	.	_	.	.	_	4	punct	_	_
1	On	_	IN	IN	_	12	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	premise	_	NN	NN	_	1	pobj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	avoiding	_	VBG	VBG	_	4	pcomp	_	_
6	influence	_	NN	NN	_	5	dobj	_	_
7	on	_	IN	IN	_	5	prep	_	_
8	national	_	JJ	JJ	_	10	amod	_	_
9	economic	_	JJ	JJ	_	10	amod	_	_
10	development	_	NN	NN	_	7	pobj	_	_
11	,	_	,	,	_	12	punct	_	_
12	increase	_	VB	VB	_	0	root	_	_
13	investment	_	NN	NN	_	12	dobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	construction	_	NN	NN	_	13	conj	_	_
16	of	_	IN	IN	_	13	prep	_	_
17	the	_	DT	DT	_	19	det	_	_
18	defense	_	NN	NN	_	19	nn	_	_
19	industry	_	NN	NN	_	16	pobj	_	_
20	,	_	,	,	_	12	punct	_	_
21	accelerate	_	VB	VB	_	12	conj	_	_
22	modernization	_	NN	NN	_	21	dobj	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	internationalization	_	NN	NN	_	22	conj	_	_
25	of	_	IN	IN	_	22	prep	_	_
26	military	_	JJ	JJ	_	27	amod	_	_
27	equipment	_	NN	NN	_	25	pobj	_	_
28	,	_	,	,	_	12	punct	_	_
29	and	_	CC	CC	_	12	cc	_	_
30	establish	_	VB	VB	_	12	conj	_	_
31	a	_	DT	DT	_	36	det	_	_
32	high-quality	_	JJ	JJ	_	36	amod	_	_
33	,	_	,	,	_	36	punct	_	_
34	high-tech	_	JJ	JJ	_	36	amod	_	_
35	elite	_	JJ	JJ	_	36	amod	_	_
36	division	_	NN	NN	_	30	dobj	_	_
37	.	_	.	.	_	12	punct	_	_

Oracle:
(a / attack-01, domain, d / defend-01)
(a10 / avoid-01, ARG1, i6 / influence-01)
(a2 / and, op, i / improve-01)
(a2 / and, op, s / strengthen-01)
(a3 / aerospace, mod, a4 / all)
(a6 / and, op, a7 / accelerate-01)
(a6 / and, op, e2 / establish-01)
(a6 / and, op, i2 / increase-01)
(a7 / accelerate-01, ARG1, a9 / and)
(a8 / and, op, c3 / construct-01)
(a8 / and, op, i3 / invest-01)
(a9 / and, op, i5 / internationalize-00)
(a9 / and, op, m3 / modernize-01)
(c / capable-41, ARG2, c2 / combat-01)
(c / capable-41, extent, d3 / distance)
(c / capable-41, location, a3 / aerospace)
(c / capable-41, mod, d2 / depth)
(c3 / construct-01, ARG1, i4 / industry)
(d / defend-01, manner, g / good)
(d2 / depth, mod, g2 / great)
(d3 / distance, mod, g3 / great)
(d5 / division, mod, e4 / elite)
(d5 / division, mod, q / quality)
(d5 / division, mod, t / tech)
(d6 / develop-02, ARG1, n / nation)
(d6 / develop-02, mod, e5 / economy)
(e / engage-01, ARG0, f / force)
(e / engage-01, ARG1, f / force)
(e / engage-01, ARG2, a5 / attack-01)
(e / engage-01, mod, p / possible)
(e2 / establish-01, ARG1, d5 / division)
(e3 / equipment, mod, m4 / military)
(g / good, degree, m2 / most)
(i / improve-01, ARG0, w / we)
(i / improve-01, ARG1, c / capable-41)
(i2 / increase-01, ARG1, a8 / and)
(i3 / invest-01, ARG2, i4 / industry)
(i4 / industry, mod, d4 / defend)
(i5 / internationalize-00, ARG1, e3 / equipment)
(i6 / influence-01, ARG1, d6 / develop-02)
(l / long, degree, u / ultra)
(m3 / modernize-01, ARG1, e3 / equipment)
(p2 / premise-01, ARG1, a6 / and)
(p2 / premise-01, ARG2, a10 / avoid-01)
(q / quality, mod, h2 / high)
(r / recommend-01, ARG1, a2 / and)
(r2 / range-01, ARG1, a5 / attack-01)
(r2 / range-01, ARG2, l / long)
(s / strengthen-01, ARG0, w / we)
(s / strengthen-01, ARG1, f / force)
(t / tech, mod, h / high)

Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),investment,nation,false), Span(20,21,List(1),throughout,capacitate-01,false), Span(24,25,List(2),of,aerospace,false), Span(48,49,List(3),industry,,and,false), Span(10,11,List(4),forces,force,false), Span(47,48,List(5),defense,invest-01,false), Span(55,56,List(7, 6),equipment,,(accelerate-01 :ARG1-of have-purpose-91),false), Span(64,65,List(8),,establish-01,false), Span(61,62,List(9),elite,equipment,false), Span(16,17,List(10),attack,,attack-01,false), Span(30,31,List(11),distances.,and,false), Span(9,10,List(12),strengthen,strengthen-01,false), Span(40,41,List(13),development,,influence-01,false), Span(1,2,List(15, 14),best,(good :degree most),false), Span(63,64,List(16),,and,false), Span(7,8,List(17),we,we,false), Span(69,70,List(18),,elite,false), Span(0,1,List(21, 20, 19),The,(country :name (name :op "North")),false), Span(49,50,List(22),accelerate,construct-01,false), Span(12,13,List(23),can,possible,false), Span(8,9,List(24),should,shoulder-01,false), Span(39,40,List(25),economic,avoid-01,false), Span(32,33,List(26),the,great,false), Span(53,54,List(27),of,industry,false), Span(54,55,List(28),military,and,false), Span(2,3,List(29),defense,descend-01,false), Span(13,14,List(30),engage,engage-01,false), Span(19,20,List(31),capability,combat-01,false), Span(28,29,List(32),over,depth,false), Span(22,23,List(33),of,all,false), Span(18,19,List(34),combat,improve-01,false), Span(56,57,List(35),and,modernize-01,false), Span(57,58,List(36),establish,and,false), Span(5,6,List(37),attack,attack-01,false), Span(44,45,List(38),construction,develop-01,false), Span(70,71,List(39),,division,false), Span(68,69,List(40),,high,false), Span(60,61,List(41),high-tech,military,false), Span(52,53,List(42),internationalization,descend-01,false), Span(37,38,List(43),on,premise,false), Span(46,47,List(44),the,increase-01,false), Span(27,28,List(45),and,great,false), Span(17,18,List(46),improve,and,false)),Map(45 -> great, 39 -> division, 30 -> engage-01, 2 -> aerospace, 5 -> invest-01, 33 -> all, 27 -> industry, 12 -> strengthen-01, 8 -> establish-01, 15 -> most, 42 -> descend-01, 36 -> and, 21 -> "North", 18 -> elite, 24 -> shoulder-01, 41 -> military, 35 -> modernize-01, 7 -> have-purpose-91, 1 -> capacitate-01, 17 -> we, 44 -> increase-01, 23 -> possible, 38 -> develop-01, 26 -> great, 4 -> force, 11 -> and, 32 -> depth, 14 -> good, 29 -> descend-01, 20 -> name, 46 -> and, 34 -> improve-01, 28 -> and, 6 -> accelerate-01, 40 -> high, 43 -> premise, 9 -> equipment, 0 -> nation, 22 -> construct-01, 16 -> and, 37 -> attack-01, 19 -> country, 10 -> attack-01, 3 -> and, 31 -> combat-01, 25 -> avoid-01, 13 -> influence-01),Map(m3 -> military, e -> establish-01, a7 -> avoid-01, n -> nation, w -> we, g3 -> great, h -> have-purpose-91, i4 -> improve-01, a10 -> and, h2 -> high, s2 -> shoulder-01, m2 -> modernize-01, d3 -> develop-01, p2 -> premise, a9 -> all, e2 -> equipment, c4 -> combat-01, a3 -> accelerate-01, a12 -> and, s -> strengthen-01, a6 -> and, d -> descend-01, m -> most, g2 -> great, i3 -> industry, g -> good, p -> possible, a -> aerospace, c3 -> construct-01, e4 -> engage-01, d2 -> depth, a5 -> and, d5 -> descend-01, a8 -> and, i2 -> influence-01, a11 -> attack-01, i5 -> increase-01, i -> invest-01, a2 -> and, c -> capacitate-01, d4 -> division, f -> force, e3 -> elite, c2 -> country, n2 -> name, a4 -> attack-01))),[Ljava.lang.String;@5761fcd6,Annotation([Ljava.lang.String;@780140b,[Ljava.lang.String;@4b4141e5,[Ljava.lang.String;@29ff8263),Annotation([Ljava.lang.String;@71a04cc6,[Ljava.lang.String;@76073eb5,[Ledu.cmu.lti.nlp.amr.Dependency;@378817f9),Annotation([Ljava.lang.String;@62b177f1,[Ljava.lang.String;@1184c11d,[Ljava.lang.String;@5e39b70e),Annotation([Ljava.lang.String;@29f944ef,[Ljava.lang.String;@401eb0de,[Ledu.cmu.lti.nlp.amr.Entity;@77250de9))
AMR:
(a11 / attack-01, ARG1, d / descend-01)
(a3 / accelerate-01, ARG0, g2 / great)
(a3 / accelerate-01, ARG1, a11 / attack-01)
(a4 / attack-01, ARG1, a12 / and)
(a6 / and, purpose, a11 / attack-01)
(a7 / avoid-01, ARG1, a5 / and)
(a7 / avoid-01, ARG6, p2 / premise)
(a8 / and, purpose, a11 / attack-01)
(a9 / all, calendar, a / aerospace)
(a9 / all, time, a5 / and)
(c / capacitate-01, ARG1, d2 / depth)
(c2 / country, name, n2 / name)
(c3 / construct-01, ARG6, a2 / and)
(c3 / construct-01, purpose, a11 / attack-01)
(c4 / combat-01, ARG1, c / capacitate-01)
(d / descend-01, ARG1, s / strengthen-01)
(d / descend-01, ARG6, c2 / country)
(d / descend-01, mod, g / good)
(d3 / develop-01, ARG1, a11 / attack-01)
(d4 / division, purpose, a11 / attack-01)
(d5 / descend-01, ARG1, a11 / attack-01)
(d5 / descend-01, ARG6, i3 / industry)
(e / establish-01, ARG1, a11 / attack-01)
(e2 / equipment, purpose, a11 / attack-01)
(e3 / elite, purpose, a11 / attack-01)
(e4 / engage-01, ARG0, f / force)
(e4 / engage-01, ARG1, a9 / all)
(e4 / engage-01, ARG2, c / capacitate-01)
(g / good, degree, m / most)
(g3 / great, op, d2 / depth)
(h / have-purpose-91, ARG1, a3 / accelerate-01)
(h2 / high, purpose, a11 / attack-01)
(i / invest-01, ARG1, a11 / attack-01)
(i2 / influence-01, ARG1, a7 / avoid-01)
(i4 / improve-01, ARG1, c4 / combat-01)
(i4 / improve-01, ARG6, a12 / and)
(i5 / increase-01, ARG1, a11 / attack-01)
(m2 / modernize-01, ARG0, a10 / and)
(m2 / modernize-01, ARG1, a11 / attack-01)
(m3 / military, purpose, a11 / attack-01)
(n / nation, purpose, a11 / attack-01)
(n2 / name, op, "North")
(p / possible, domain, e4 / engage-01)
(s / strengthen-01, ARG0, w / we)
(s / strengthen-01, ARG1, f / force)
(s2 / shoulder-01, ARG1, f / force)

Decoded in 10,160,931 microseconds
Sentence: The battle horn is about to sound, the people are already fully equipped and ready to go.

Oracle Span 1:  about => about
Oracle Span 2:  already => already
Oracle Span 3:  and => and
Oracle Span 4:  battle => battle
Oracle Span 5:  equipped => equip-01
Oracle Span 6:  fully => full
Oracle Span 7:  go => go-01
Oracle Span 8:  horn => horn
Oracle Span 9:  ready => ready-01
Oracle Span 10:  sound => sound-02
Spans:
Span 17-18:   => go-01
Span 13-14:  and => equip-01
Span 9-10:  are => people
Span 1-2:  battle => battle-01
Span 12-13:  equipped => full
Span 11-12:  fully => already
Span 2-3:  horn => (world-region :name (name :op "Horn"))
Span 14-15:  ready => and
Span 6-7:  sound, => sound-01
Span 15-16:  to => ready-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 4-5:  about => about
Oracle Span 11-12:  already => already
Oracle Span 14-15:  and => and
Oracle Span 1-2:  battle => battle
Oracle Span 13-14:  equipped => equip-01
Oracle Span 12-13:  fully => full
Oracle Span 17-18:  go => go-01
Oracle Span 2-3:  horn => horn
Oracle Span 15-16:  ready => ready-01
Oracle Span 6-7:  sound => sound-02

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	battle	_	NN	NN	_	3	nn	_	_
3	horn	_	NN	NN	_	5	nsubj	_	_
4	is	_	VBZ	VBZ	_	5	aux	_	_
5	about	_	IN	IN	_	14	ccomp	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	sound	_	VB	VB	_	5	xcomp	_	_
8	,	_	,	,	_	14	punct	_	_
9	the	_	DT	DT	_	10	det	_	_
10	people	_	NNS	NNS	_	14	nsubjpass	_	_
11	are	_	VBP	VBP	_	14	auxpass	_	_
12	already	_	RB	RB	_	14	advmod	_	_
13	fully	_	RB	RB	_	14	advmod	_	_
14	equipped	_	VBN	VBN	_	0	root	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	ready	_	JJ	JJ	_	14	conj	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	go	_	VB	VB	_	16	xcomp	_	_
19	.	_	.	.	_	14	punct	_	_

Oracle:
(a / and, op, e / equip-01)
(a / and, op, r / ready-01)
(a / and, op, s / sound-02)
(e / equip-01, manner, f / full)
(e / equip-01, time, a3 / already)
(h / horn, mod, b / battle)
(r / ready-01, ARG2, g / go-01)
(s / sound-02, ARG0, h / horn)
(s / sound-02, time, a2 / about)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),ready,and,false), Span(17,18,List(1),,go-01,false), Span(2,3,List(4, 3, 2),horn,(world-region :name (name :op "Horn")),false), Span(13,14,List(5),and,equip-01,false), Span(12,13,List(6),equipped,full,false), Span(1,2,List(7),battle,battle-01,false), Span(11,12,List(8),fully,already,false), Span(15,16,List(9),to,ready-01,false), Span(6,7,List(10),sound,,sound-01,false), Span(9,10,List(11),are,people,false)),Map(2 -> world-region, 5 -> equip-01, 8 -> already, 7 -> battle-01, 1 -> go-01, 11 -> people, 4 -> "Horn", 6 -> full, 9 -> ready-01, 0 -> and, 10 -> sound-01, 3 -> name),Map(e -> equip-01, n -> name, w -> world-region, b -> battle-01, s -> sound-01, p -> people, g -> go-01, a -> and, r -> ready-01, a2 -> already, f -> full))),[Ljava.lang.String;@66d8184,Annotation([Ljava.lang.String;@66579c9a,[Ljava.lang.String;@16dd047d,[Ljava.lang.String;@64a8dd72),Annotation([Ljava.lang.String;@ea311c2,[Ljava.lang.String;@54caefc0,[Ledu.cmu.lti.nlp.amr.Dependency;@2acae7c8),Annotation([Ljava.lang.String;@8abecae,[Ljava.lang.String;@1e90c178,[Ljava.lang.String;@1da79985),Annotation([Ljava.lang.String;@602ed95e,[Ljava.lang.String;@37b79769,[Ledu.cmu.lti.nlp.amr.Entity;@2fb41be6))
AMR:
(a / and, op, e / equip-01)
(a / and, op, r / ready-01)
(b / battle-01, ARG1, w / world-region)
(e / equip-01, ARG1, p / people)
(e / equip-01, manner, f / full)
(e / equip-01, time, a2 / already)
(g / go-01, ARG1, s / sound-01)
(n / name, op, "Horn")
(r / ready-01, ARG1, g / go-01)
(s / sound-01, ARG1, w / world-region)
(w / world-region, name, n / name)

Decoded in 482,914 microseconds
Sentence: Without the people's support we will accomplish nothing; with the support of the people, we will be all-powerful.

Oracle Span 1:  accomplish => accomplish-01
Oracle Span 2:  all => all
Oracle Span 3:  nothing => nothing
Oracle Span 4:  powerful => powerful
Oracle Span 5:  support => support-01
Oracle Span 6:  support => support-01
Oracle Span 7:  we => we
Spans:
Span 7-8:  nothing; => accomplish-01
Span 12-13:  the => support-01
Span 4-5:  we => support-01
Span 15-16:  will => people
Span 8-9:  with => nothing

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 7-8:  accomplish => accomplish-01
Oracle Span 20-21:  all => all
Oracle Span 8-9:  nothing => nothing
Oracle Span 22-23:  powerful => powerful
Oracle Span 4-5:  support => support-01
Oracle Span 12-13:  support => support-01
Oracle Span 5-6:  we => we

Dependencies:
1	Without	_	IN	IN	_	8	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	people	_	NNS	NNS	_	5	poss	_	_
4	's	_	POS	POS	_	3	possessive	_	_
5	support	_	NN	NN	_	1	pobj	_	_
6	we	_	PRP	PRP	_	8	nsubj	_	_
7	will	_	MD	MD	_	8	aux	_	_
8	accomplish	_	VB	VB	_	0	root	_	_
9	nothing	_	NN	NN	_	8	dobj	_	_
10	;	_	:	:	_	8	punct	_	_
11	with	_	IN	IN	_	21	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	support	_	NN	NN	_	11	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	people	_	NNS	NNS	_	14	pobj	_	_
17	,	_	,	,	_	21	punct	_	_
18	we	_	PRP	PRP	_	21	nsubj	_	_
19	will	_	MD	MD	_	21	aux	_	_
20	be	_	VB	VB	_	21	cop	_	_
21	all-powerful	_	NN	NN	_	8	parataxis	_	_
22	.	_	.	.	_	8	punct	_	_

Oracle:
(a / accomplish-01, ARG0, w / we)
(a / accomplish-01, ARG1, n / nothing)
(a / accomplish-01, manner, s / support-01)
(p2 / powerful, domain, w / we)
(p2 / powerful, manner, s2 / support-01)
(p2 / powerful, mod, a2 / all)
(s / support-01, ARG1, w / we)
(s2 / support-01, ARG1, w / we)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),we,support-01,false), Span(12,13,List(1),the,support-01,false), Span(15,16,List(2),will,people,false), Span(7,8,List(3),nothing;,accomplish-01,false), Span(8,9,List(4),with,nothing,false)),Map(2 -> people, 1 -> support-01, 4 -> nothing, 0 -> support-01, 3 -> accomplish-01),Map(n -> nothing, s2 -> support-01, s -> support-01, p -> people, a -> accomplish-01))),[Ljava.lang.String;@24426d43,Annotation([Ljava.lang.String;@431fa1a7,[Ljava.lang.String;@62521288,[Ljava.lang.String;@36bea3cb),Annotation([Ljava.lang.String;@121e82a,[Ljava.lang.String;@3f8d6330,[Ledu.cmu.lti.nlp.amr.Dependency;@4db9e01b),Annotation([Ljava.lang.String;@e5ab29c,[Ljava.lang.String;@346bc5,[Ljava.lang.String;@54741c10),Annotation([Ljava.lang.String;@564f87bd,[Ljava.lang.String;@d5a11ba,[Ledu.cmu.lti.nlp.amr.Entity;@2e932997))
AMR:
(a / accomplish-01, ARG1, n / nothing)
(a / accomplish-01, ARG2, s / support-01)
(s / support-01, ARG1, s2 / support-01)
(s2 / support-01, ARG1, p / people)

Decoded in 325,793 microseconds
Sentence: My fellow citizens, it is time for us to say "no" to others. Therefore, we must achieve:

Oracle Span 1:  achieve => achieve-01
Oracle Span 2:  citizens => citizen
Oracle Span 3:  fellow => fellow
Oracle Span 4:  no => no
Oracle Span 5:  others => (person :mod other)
Oracle Span 6:  say => say-01
Oracle Span 7:  time => time
Oracle Span 8:  we => we
Spans:
Span 20-21:   => muster-01
Span 21-22:   => achieve-01
Span 10-11:  "no" => say-01
Span 2-3:  citizens, => citizen
Span 1-2:  fellow => fellow
Span 6-7:  for => time
Span 15-16:  must => other

 *** WARNING: The dependency tree seems broken.  I can't find the head of Therefore in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of achieve in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 22
Langrangian relaxation converged after 42 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Therefore in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of achieve in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 22
Oracle Span 21-22:  achieve => achieve-01
Oracle Span 2-3:  citizens => citizen
Oracle Span 1-2:  fellow => fellow
Oracle Span 12-13:  no => no
Oracle Span 15-16:  others => (person :mod other)
Oracle Span 10-11:  say => say-01
Oracle Span 6-7:  time => time
Oracle Span 19-20:  we => we

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	7	nsubj	_	_
4	,	_	,	,	_	7	punct	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	time	_	NN	NN	_	0	root	_	_
8	for	_	IN	IN	_	7	prep	_	_
9	us	_	PRP	PRP	_	8	pobj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	say	_	VB	VB	_	7	vmod	_	_
12	"	_	``	``	_	13	punct	_	_
13	no	_	UH	UH	_	11	discourse	_	_
14	"	_	''	''	_	13	punct	_	_
15	to	_	TO	TO	_	11	prep	_	_
16	others	_	NNS	NNS	_	15	pobj	_	_
17	.	_	.	.	_	7	punct	_	_
1	Therefore	_	RB	RB	_	5	advmod	_	_
2	,	_	,	,	_	5	punct	_	_
3	we	_	PRP	PRP	_	5	nsubj	_	_
4	must	_	MD	MD	_	5	aux	_	_
5	achieve	_	VB	VB	_	0	root	_	_
6	:	_	:	:	_	5	punct	_	_

Oracle:
(c / citizen, mod, f / fellow)
(p / person, mod, o / other)
(s / say-01, ARG1, t / time)
(s / say-01, ARG2, c / citizen)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),citizens,,citizen,false), Span(20,21,List(1),,muster-01,false), Span(15,16,List(2),must,other,false), Span(21,22,List(3),,achieve-01,false), Span(1,2,List(4),fellow,fellow,false), Span(6,7,List(5),for,time,false), Span(10,11,List(6),"no",say-01,false)),Map(2 -> other, 5 -> time, 1 -> muster-01, 4 -> fellow, 6 -> say-01, 0 -> citizen, 3 -> achieve-01),Map(t -> time, s -> say-01, m -> muster-01, a -> achieve-01, c -> citizen, f -> fellow, o -> other))),[Ljava.lang.String;@75266d04,Annotation([Ljava.lang.String;@67d37f3c,[Ljava.lang.String;@b199571,[Ljava.lang.String;@75de7bf5),Annotation([Ljava.lang.String;@33566607,[Ljava.lang.String;@4f00d5ce,[Ledu.cmu.lti.nlp.amr.Dependency;@8757342),Annotation([Ljava.lang.String;@e72b06a,[Ljava.lang.String;@e9499fd,[Ljava.lang.String;@47739344),Annotation([Ljava.lang.String;@64bf178b,[Ljava.lang.String;@7f550a96,[Ledu.cmu.lti.nlp.amr.Entity;@55a42ff0))
AMR:
(a / achieve-01, ARG0, c / citizen)
(a / achieve-01, ARG1, s / say-01)
(c / citizen, mod, f / fellow)
(m / muster-01, ARG1, a / achieve-01)
(m / muster-01, ARG6, o / other)
(s / say-01, ARG1, t / time)

Decoded in 11,222,918 microseconds
Sentence: 1. Establish guaranteed funds, improve working environment and mechanisms, recruit back to China the hundreds of thousands of IT professionals who have emigrated to and linger in the United States and around the world.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  around => around
Oracle Span 5:  back => back
Oracle Span 6:  China => (country :name (name :op "China"))
Oracle Span 7:  emigrated => emigrate-01
Oracle Span 8:  environment => environment
Oracle Span 9:  Establish => establish-01
Oracle Span 10:  funds => fund
Oracle Span 11:  guaranteed => guarantee-01
Oracle Span 12:  improve => improve-01
Oracle Span 13:  IT => IT
Oracle Span 14:  linger => linger-01
Oracle Span 15:  mechanisms => mechanism
Oracle Span 16:  professionals => professional
Oracle Span 17:  recruit => recruit-01
Oracle Span 18:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 19:  working => work-01
Oracle Span 20:  world => world
Spans:
Span 34-35:   => around
Span 36-37:   => world
Span 0-1:  1. => 1
Span 7-8:  and => work-01
Span 31-33:  around the => (country :name (name :op "United" :op "States"))
Span 10-11:  back => mechanism
Span 12-13:  China => recruit-01
Span 6-7:  environment => improve-01
Span 3-4:  funds, => guarantee-01
Span 2-3:  guaranteed => establish-01
Span 21-22:  have => country
Span 4-5:  improve => fund
Span 25-26:  linger => emigrate-01
Span 8-9:  mechanisms, => environment
Span 15-16:  of => (country :name (name :op "China"))
Span 9-10:  recruit => and
Span 27-28:  the => and
Span 13-14:  the => back
Span 11-12:  to => and
Span 28-29:  United => linger-01
Span 5-6:  working => and
Span 33-34:  world. => and

 *** WARNING: The dependency tree seems broken.  I can't find the head of world in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 37
Langrangian relaxation converged after 34 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of world in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 37
Oracle Span 8-9:  and => and
Oracle Span 26-27:  and => and
Oracle Span 32-33:  and => and
Oracle Span 33-34:  around => around
Oracle Span 12-13:  back => back
Oracle Span 14-15:  China => (country :name (name :op "China"))
Oracle Span 24-25:  emigrated => emigrate-01
Oracle Span 7-8:  environment => environment
Oracle Span 1-2:  Establish => establish-01
Oracle Span 3-4:  funds => fund
Oracle Span 2-3:  guaranteed => guarantee-01
Oracle Span 5-6:  improve => improve-01
Oracle Span 20-21:  IT => IT
Oracle Span 27-28:  linger => linger-01
Oracle Span 9-10:  mechanisms => mechanism
Oracle Span 21-22:  professionals => professional
Oracle Span 11-12:  recruit => recruit-01
Oracle Span 30-32:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 6-7:  working => work-01
Oracle Span 35-36:  world => world

Dependencies:
1	1	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Establish	_	VB	VB	_	0	root	_	_
2	guaranteed	_	VBN	VBN	_	3	amod	_	_
3	funds	_	NNS	NNS	_	1	dobj	_	_
4	,	_	,	,	_	1	punct	_	_
5	improve	_	VB	VB	_	1	conj	_	_
6	working	_	VBG	VBG	_	7	amod	_	_
7	environment	_	NN	NN	_	5	dobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	mechanisms	_	NNS	NNS	_	7	conj	_	_
10	,	_	,	,	_	7	punct	_	_
11	recruit	_	RB	RB	_	12	advmod	_	_
12	back	_	RB	RB	_	7	advmod	_	_
13	to	_	TO	TO	_	12	prep	_	_
14	China	_	NNP	NNP	_	13	pobj	_	_
15	the	_	DT	DT	_	16	det	_	_
16	hundreds	_	NNS	NNS	_	7	dep	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	thousands	_	NNS	NNS	_	17	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	IT	_	NNP	NNP	_	21	nn	_	_
21	professionals	_	NNS	NNS	_	19	pobj	_	_
22	who	_	WP	WP	_	24	nsubj	_	_
23	have	_	VBP	VBP	_	24	aux	_	_
24	emigrated	_	VBD	VBD	_	5	dep	_	_
25	to	_	TO	TO	_	24	xcomp	_	_
26	and	_	CC	CC	_	1	cc	_	_
27	linger	_	VB	VB	_	1	conj	_	_
28	in	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	31	det	_	_
30	United	_	NNP	NNP	_	31	nn	_	_
31	States	_	NNPS	NNPS	_	28	pobj	_	_
32	and	_	CC	CC	_	28	cc	_	_
33	around	_	IN	IN	_	28	conj	_	_
34	the	_	DT	DT	_	35	det	_	_
35	world	_	NN	NN	_	33	pobj	_	_
36	.	_	.	.	_	1	punct	_	_

Oracle:
(a / and, op, e / establish-01)
(a / and, op, i / improve-01)
(a / and, op, r / recruit-01)
(a2 / and, op, e2 / environment)
(a2 / and, op, m / mechanism)
(a3 / and, op, a4 / around)
(a3 / and, op, c / country)
(a4 / around, op, w2 / world)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e / establish-01, ARG1, f / fund)
(e3 / emigrate-01, ARG0, p / professional)
(e3 / emigrate-01, ARG2, a3 / and)
(g / guarantee-01, ARG1, f / fund)
(i / improve-01, ARG1, a2 / and)
(l / linger-01, ARG1, p / professional)
(l / linger-01, ARG2, a3 / and)
(m / mechanism, mod, w3 / work-01)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "China")
(p / professional, mod, i2 / IT)
(r / recruit-01, ARG1, p / professional)
(r / recruit-01, destination, c2 / country)
(r / recruit-01, direction, b / back)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),guaranteed,establish-01,false), Span(11,12,List(1),to,and,false), Span(27,28,List(2),the,and,false), Span(6,7,List(3),environment,improve-01,false), Span(3,4,List(4),funds,,guarantee-01,false), Span(5,6,List(5),working,and,false), Span(28,29,List(6),United,linger-01,false), Span(10,11,List(7),back,mechanism,false), Span(9,10,List(8),recruit,and,false), Span(0,1,List(9),1.,1,false), Span(12,13,List(10),China,recruit-01,false), Span(31,33,List(14, 13, 12, 11),around the,(country :name (name :op "United" :op "States")),false), Span(7,8,List(15),and,work-01,false), Span(34,35,List(16),,around,false), Span(21,22,List(17),have,country,false), Span(8,9,List(18),mechanisms,,environment,false), Span(15,16,List(21, 20, 19),of,(country :name (name :op "China")),false), Span(13,14,List(22),the,back,false), Span(4,5,List(23),improve,fund,false), Span(25,26,List(24),linger,emigrate-01,false), Span(33,34,List(25),world.,and,false), Span(36,37,List(26),,world,false)),Map(2 -> and, 5 -> and, 12 -> name, 8 -> and, 15 -> work-01, 21 -> "China", 18 -> environment, 24 -> emigrate-01, 7 -> mechanism, 1 -> and, 17 -> country, 23 -> fund, 26 -> world, 4 -> guarantee-01, 11 -> country, 14 -> "States", 20 -> name, 6 -> linger-01, 9 -> 1, 0 -> establish-01, 22 -> back, 16 -> around, 19 -> country, 10 -> recruit-01, 3 -> improve-01, 25 -> and, 13 -> "United"),Map(e -> establish-01, w -> work-01, n -> name, b -> back, e2 -> environment, a3 -> and, a6 -> and, m -> mechanism, 1 -> 1, g -> guarantee-01, c3 -> country, a -> and, a5 -> around, w2 -> world, a2 -> and, i -> improve-01, r -> recruit-01, c -> country, l -> linger-01, f -> fund, e3 -> emigrate-01, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@2e791170,Annotation([Ljava.lang.String;@47f8a874,[Ljava.lang.String;@621199b3,[Ljava.lang.String;@68f85d67),Annotation([Ljava.lang.String;@e6c3399,[Ljava.lang.String;@c558128,[Ledu.cmu.lti.nlp.amr.Dependency;@62e74d10),Annotation([Ljava.lang.String;@485e274e,[Ljava.lang.String;@27c12527,[Ljava.lang.String;@7bdbc36),Annotation([Ljava.lang.String;@5feafe1c,[Ljava.lang.String;@6637d6f8,[Ledu.cmu.lti.nlp.amr.Entity;@48f12f04))
AMR:
(a3 / and, op, w / work-01)
(a6 / and, op, a / and)
(a6 / and, op, c / country)
(b / back, calendar, c3 / country)
(c / country, name, n / name)
(c3 / country, name, n2 / name)
(e / establish-01, ARG0, a2 / and)
(e / establish-01, ARG1, g / guarantee-01)
(e / establish-01, ARG6, 1 / 1)
(e3 / emigrate-01, ARG0, w2 / world)
(e3 / emigrate-01, ARG1, a5 / around)
(e3 / emigrate-01, ARG6, c / country)
(g / guarantee-01, ARG0, c3 / country)
(g / guarantee-01, ARG6, f / fund)
(i / improve-01, ARG0, c2 / country)
(i / improve-01, ARG1, g / guarantee-01)
(i / improve-01, ARG2, a3 / and)
(i / improve-01, ARG6, e2 / environment)
(l / linger-01, ARG1, a2 / and)
(m / mechanism, calendar, a4 / and)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "China")
(r / recruit-01, ARG1, m / mechanism)
(r / recruit-01, ARG6, a / and)
(w / work-01, ARG1, m / mechanism)

Decoded in 2,055,502 microseconds
Sentence: 2. Create a few nuclear-powered aircraft carrier battle groups.

Oracle Span 1:  aircraft => aircraft
Oracle Span 2:  battle => battle-01
Oracle Span 3:  carrier => carrier
Oracle Span 4:  Create => create-01
Oracle Span 5:  few => few
Oracle Span 6:  groups => group
Oracle Span 7:  nuclear => nucleus
Oracle Span 8:  powered => power-01
Spans:
Span 9-10:   => group
Span 0-1:  2. => 1
Span 2-3:  a => create-01
Span 5-6:  aircraft => (power-01 :ARG0 nucleus)
Span 6-7:  carrier => aircraft
Span 8-9:  groups. => battle-01
Span 4-5:  nuclear-powered => few

 *** WARNING: The dependency tree seems broken.  I can't find the head of groups in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Langrangian relaxation converged after 41 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of groups in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Oracle Span 7-8:  aircraft => aircraft
Oracle Span 9-10:  battle => battle-01
Oracle Span 8-9:  carrier => carrier
Oracle Span 1-2:  Create => create-01
Oracle Span 3-4:  few => few
Oracle Span 10-11:  groups => group
Oracle Span 4-5:  nuclear => nucleus
Oracle Span 6-7:  powered => power-01

Dependencies:
1	2	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Create	_	VB	VB	_	0	root	_	_
2	a	_	DT	DT	_	6	det	_	_
3	few	_	JJ	JJ	_	6	amod	_	_
4	nuclear-powered	_	JJ	JJ	_	6	amod	_	_
5	aircraft	_	NN	NN	_	6	nn	_	_
6	carrier	_	NN	NN	_	8	nsubj	_	_
7	battle	_	NN	NN	_	8	nn	_	_
8	groups	_	NNS	NNS	_	1	xcomp	_	_
9	.	_	.	.	_	1	punct	_	_

Oracle:
(c / create-01, ARG1, g / group)
(c2 / carrier, consist, g / group)
(c2 / carrier, mod, a / aircraft)
(g / group, mod, b / battle-01)
(g / group, quant, f / few)
(p / power-01, ARG0, n / nucleus)
(p / power-01, ARG1, c2 / carrier)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),groups.,battle-01,false), Span(9,10,List(1),,group,false), Span(0,1,List(2),2.,1,false), Span(5,6,List(4, 3),aircraft,(power-01 :ARG0 nucleus),false), Span(2,3,List(5),a,create-01,false), Span(4,5,List(6),nuclear-powered,few,false), Span(6,7,List(7),carrier,aircraft,false)),Map(2 -> 1, 5 -> create-01, 7 -> aircraft, 1 -> group, 4 -> nucleus, 6 -> few, 0 -> battle-01, 3 -> power-01),Map(n -> nucleus, b -> battle-01, p -> power-01, 1 -> 1, g -> group, a -> aircraft, c -> create-01, f -> few))),[Ljava.lang.String;@341636ed,Annotation([Ljava.lang.String;@7621f406,[Ljava.lang.String;@3ef6be5d,[Ljava.lang.String;@183182e9),Annotation([Ljava.lang.String;@1d157e5c,[Ljava.lang.String;@646d283c,[Ledu.cmu.lti.nlp.amr.Dependency;@6f6276ba),Annotation([Ljava.lang.String;@7bd09775,[Ljava.lang.String;@4d01f1cd,[Ljava.lang.String;@40200c99),Annotation([Ljava.lang.String;@3c8b6581,[Ljava.lang.String;@439f265a,[Ledu.cmu.lti.nlp.amr.Entity;@1d2287d))
AMR:
(b / battle-01, ARG0, g / group)
(b / battle-01, ARG6, a / aircraft)
(c / create-01, ARG1, f / few)
(p / power-01, ARG0, n / nucleus)
(p / power-01, ARG1, a / aircraft)
(p / power-01, ARG2, f / few)
(p / power-01, ARG6, 1 / 1)

Decoded in 324,679 microseconds
Sentence: 3. Manufacture 5000 advanced combat aircraft of various kinds.

Oracle Span 1:  5000 => 5000
Oracle Span 2:  advanced => advance-01
Oracle Span 3:  aircraft => aircraft
Oracle Span 4:  combat => combat-01
Oracle Span 5:  kinds => kind
Oracle Span 6:  Manufacture => manufacture-01
Oracle Span 7:  various => various
Spans:
Span 9-10:   => kind
Span 0-1:  3. => 1
Span 5-6:  aircraft => combat-01
Span 4-5:  combat => advance-01
Span 8-9:  kinds. => various

 *** WARNING: The dependency tree seems broken.  I can't find the head of kinds in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Langrangian relaxation converged after 15 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of kinds in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Oracle Span 2-3:  5000 => 5000
Oracle Span 3-4:  advanced => advance-01
Oracle Span 5-6:  aircraft => aircraft
Oracle Span 4-5:  combat => combat-01
Oracle Span 8-9:  kinds => kind
Oracle Span 1-2:  Manufacture => manufacture-01
Oracle Span 7-8:  various => various

Dependencies:
1	3	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Manufacture	_	NNP	NNP	_	2	nn	_	_
2	5000	_	NNP	NNP	_	3	nsubj	_	_
3	advanced	_	VBD	VBD	_	0	root	_	_
4	combat	_	VB	VB	_	5	dep	_	_
5	aircraft	_	NN	NN	_	3	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	various	_	JJ	JJ	_	8	amod	_	_
8	kinds	_	NNS	NNS	_	6	pobj	_	_
9	.	_	.	.	_	3	punct	_	_

Oracle:
(a / aircraft, mod, k / kind)
(a / aircraft, purpose, c / combat-01)
(a / aircraft, quant, 5 / 5000)
(a2 / advance-01, ARG1, a / aircraft)
(k / kind, mod, v / various)
(m / manufacture-01, ARG1, a / aircraft)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),3.,1,false), Span(9,10,List(1),,kind,false), Span(5,6,List(2),aircraft,combat-01,false), Span(8,9,List(3),kinds.,various,false), Span(4,5,List(4),combat,advance-01,false)),Map(2 -> combat-01, 1 -> kind, 4 -> advance-01, 0 -> 1, 3 -> various),Map(k -> kind, v -> various, 1 -> 1, a -> advance-01, c -> combat-01))),[Ljava.lang.String;@213cc257,Annotation([Ljava.lang.String;@5941be81,[Ljava.lang.String;@daa04c8,[Ljava.lang.String;@13f2a558),Annotation([Ljava.lang.String;@541be30b,[Ljava.lang.String;@7aeabf,[Ledu.cmu.lti.nlp.amr.Dependency;@5dab323c),Annotation([Ljava.lang.String;@5b7594b4,[Ljava.lang.String;@50fd376a,[Ljava.lang.String;@78500d8),Annotation([Ljava.lang.String;@33be8c6,[Ljava.lang.String;@749c1c21,[Ledu.cmu.lti.nlp.amr.Entity;@4d6323bf))
AMR:
(a / advance-01, ARG1, c / combat-01)
(a / advance-01, ARG6, 1 / 1)
(c / combat-01, ARG1, v / various)
(k / kind, op, v / various)

Decoded in 143,871 microseconds
Sentence: 4. Accelerate the research and deployment of high-speed intercontinental ballistic missiles which can break missile defense systems and whose range is more than 10,000 nautical miles.

Oracle Span 1:  Accelerate => accelerate-01
Oracle Span 2:  and => and
Oracle Span 3:  ballistic => ballistic
Oracle Span 4:  break => break-01
Oracle Span 5:  can => possible
Oracle Span 6:  defense => defense
Oracle Span 7:  deployment => deploy-01
Oracle Span 8:  high => high
Oracle Span 9:  intercontinental => intercontinental
Oracle Span 10:  miles => (distance-quantity :unit mile)
Oracle Span 11:  missile => missile
Oracle Span 12:  missiles => missile
Oracle Span 13:  more => more-than
Oracle Span 14:  nautical => nautical
Oracle Span 15:  range => range-01
Oracle Span 16:  research => research-01
Oracle Span 17:  speed => speed
Oracle Span 18:  systems => system
Spans:
Span 0-1:  4. => 1
Span 4-5:  and => research-01
Span 17-18:  and => system
Span 13-14:  break => possible
Span 15-16:  defense => missile
Span 5-6:  deployment => and
Span 25-26:  miles. => nautical
Span 14-15:  missile => break-01
Span 10-11:  missiles => ballistic
Span 6-7:  of => deploy-01
Span 16-17:  systems => descend-01
Span 22-23:  than => more-than
Span 2-3:  the => (accelerate-01 :ARG1-of have-purpose-91)
Span 18-19:  whose => and

 *** WARNING: The dependency tree seems broken.  I can't find the head of miles in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
Langrangian relaxation converged after 43 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of miles in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
Oracle Span 1-2:  Accelerate => accelerate-01
Oracle Span 4-5:  and => and
Oracle Span 11-12:  ballistic => ballistic
Oracle Span 15-16:  break => break-01
Oracle Span 14-15:  can => possible
Oracle Span 17-18:  defense => defense
Oracle Span 5-6:  deployment => deploy-01
Oracle Span 7-8:  high => high
Oracle Span 10-11:  intercontinental => intercontinental
Oracle Span 27-28:  miles => (distance-quantity :unit mile)
Oracle Span 16-17:  missile => missile
Oracle Span 12-13:  missiles => missile
Oracle Span 23-24:  more => more-than
Oracle Span 26-27:  nautical => nautical
Oracle Span 21-22:  range => range-01
Oracle Span 3-4:  research => research-01
Oracle Span 9-10:  speed => speed
Oracle Span 18-19:  systems => system

Dependencies:
1	4	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Accelerate	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	3	det	_	_
3	research	_	NN	NN	_	1	dobj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	deployment	_	NN	NN	_	3	conj	_	_
6	of	_	IN	IN	_	3	prep	_	_
7	high-speed	_	JJ	JJ	_	10	amod	_	_
8	intercontinental	_	JJ	JJ	_	10	amod	_	_
9	ballistic	_	JJ	JJ	_	10	amod	_	_
10	missiles	_	NNS	NNS	_	6	pobj	_	_
11	which	_	WDT	WDT	_	13	nsubj	_	_
12	can	_	MD	MD	_	13	aux	_	_
13	break	_	VB	VB	_	10	rcmod	_	_
14	missile	_	NN	NN	_	16	nn	_	_
15	defense	_	NN	NN	_	16	nn	_	_
16	systems	_	NNS	NNS	_	13	dobj	_	_
17	and	_	CC	CC	_	13	cc	_	_
18	whose	_	WP$	WP$	_	19	poss	_	_
19	range	_	NN	NN	_	25	nsubj	_	_
20	is	_	VBZ	VBZ	_	25	cop	_	_
21	more	_	JJR	JJR	_	22	mwe	_	_
22	than	_	IN	IN	_	23	quantmod	_	_
23	10,000	_	CD	CD	_	25	num	_	_
24	nautical	_	JJ	JJ	_	25	amod	_	_
25	miles	_	NNS	NNS	_	13	conj	_	_
26	.	_	.	.	_	1	punct	_	_

Oracle:
(a / accelerate-01, ARG1, a2 / and)
(a2 / and, op, d3 / deploy-01)
(a2 / and, op, r / research-01)
(b2 / break-01, ARG1, s / system)
(b2 / break-01, ARG2, m / missile)
(b2 / break-01, mod, p / possible)
(d / distance-quantity, unit, m3 / mile)
(d2 / defense, mod, m4 / missile)
(d3 / deploy-01, ARG1, m / missile)
(m / missile, mod, b / ballistic)
(m / missile, mod, i / intercontinental)
(m / missile, mod, s2 / speed)
(m2 / more-than, op, d / distance-quantity)
(m3 / mile, mod, n / nautical)
(r / research-01, ARG1, m / missile)
(r2 / range-01, ARG1, m / missile)
(r2 / range-01, ARG2, m2 / more-than)
(s / system, mod, d2 / defense)
(s2 / speed, mod, h / high)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),and,research-01,false), Span(5,6,List(1),deployment,and,false), Span(6,7,List(2),of,deploy-01,false), Span(15,16,List(3),defense,missile,false), Span(14,15,List(4),missile,break-01,false), Span(16,17,List(5),systems,descend-01,false), Span(17,18,List(6),and,system,false), Span(10,11,List(7),missiles,ballistic,false), Span(0,1,List(8),4.,1,false), Span(13,14,List(9),break,possible,false), Span(2,3,List(11, 10),the,(accelerate-01 :ARG1-of have-purpose-91),false), Span(25,26,List(12),miles.,nautical,false), Span(22,23,List(13),than,more-than,false), Span(18,19,List(14),whose,and,false)),Map(2 -> deploy-01, 5 -> descend-01, 12 -> nautical, 8 -> 1, 7 -> ballistic, 1 -> and, 4 -> break-01, 11 -> have-purpose-91, 14 -> and, 6 -> system, 0 -> research-01, 9 -> possible, 3 -> missile, 10 -> accelerate-01, 13 -> more-than),Map(n -> nautical, h -> have-purpose-91, b -> break-01, m2 -> more-than, b2 -> ballistic, a3 -> and, s -> system, d -> deploy-01, m -> missile, 1 -> 1, p -> possible, a -> and, d2 -> descend-01, r -> research-01, a2 -> accelerate-01))),[Ljava.lang.String;@5a89281b,Annotation([Ljava.lang.String;@7c7c95df,[Ljava.lang.String;@5667f474,[Ljava.lang.String;@945ed5b),Annotation([Ljava.lang.String;@1a1fd598,[Ljava.lang.String;@2d57969,[Ledu.cmu.lti.nlp.amr.Dependency;@6b78f913),Annotation([Ljava.lang.String;@4d71fe12,[Ljava.lang.String;@29a64131,[Ljava.lang.String;@917b5d),Annotation([Ljava.lang.String;@2c0dba3d,[Ljava.lang.String;@6ece40c0,[Ledu.cmu.lti.nlp.amr.Entity;@75fa3be1))
AMR:
(a / and, op, p / possible)
(a2 / accelerate-01, ARG0, m2 / more-than)
(a2 / accelerate-01, ARG1, r / research-01)
(a2 / accelerate-01, ARG6, 1 / 1)
(a3 / and, mod, s / system)
(b / break-01, ARG0, p / possible)
(b / break-01, ARG1, d2 / descend-01)
(d / deploy-01, ARG1, b2 / ballistic)
(d2 / descend-01, ARG0, s / system)
(d2 / descend-01, ARG6, n / nautical)
(h / have-purpose-91, ARG1, a2 / accelerate-01)
(m / missile, domain, b / break-01)
(r / research-01, ARG1, a / and)
(r / research-01, ARG6, d / deploy-01)

Decoded in 1,119,976 microseconds
Sentence: 5. Resume nuclear experiments, and establish military forces in space.

Oracle Span 1:  and => and
Oracle Span 2:  establish => establish-01
Oracle Span 3:  experiments => experiment-01
Oracle Span 4:  forces => force
Oracle Span 5:  military => military
Oracle Span 6:  nuclear => nucleus
Oracle Span 7:  Resume => resume-01
Oracle Span 8:  space => space
Spans:
Span 11-12:   => space
Span 0-1:  5. => 1
Span 4-5:  and => experiment-01
Span 3-4:  experiments, => nucleus
Span 7-8:  forces => establish-01
Span 8-9:  in => military
Span 6-7:  military => and
Span 2-3:  nuclear => resume-01
Span 9-10:  space. => force

 *** WARNING: The dependency tree seems broken.  I can't find the head of space in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 12
Langrangian relaxation converged after 31 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of space in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 12
Oracle Span 5-6:  and => and
Oracle Span 6-7:  establish => establish-01
Oracle Span 3-4:  experiments => experiment-01
Oracle Span 8-9:  forces => force
Oracle Span 7-8:  military => military
Oracle Span 2-3:  nuclear => nucleus
Oracle Span 1-2:  Resume => resume-01
Oracle Span 10-11:  space => space

Dependencies:
1	5	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Resume	_	VB	VB	_	0	root	_	_
2	nuclear	_	JJ	JJ	_	3	amod	_	_
3	experiments	_	NNS	NNS	_	1	dobj	_	_
4	,	_	,	,	_	1	punct	_	_
5	and	_	CC	CC	_	1	cc	_	_
6	establish	_	VB	VB	_	1	conj	_	_
7	military	_	JJ	JJ	_	8	amod	_	_
8	forces	_	NNS	NNS	_	6	dobj	_	_
9	in	_	IN	IN	_	6	prep	_	_
10	space	_	NN	NN	_	9	pobj	_	_
11	.	_	.	.	_	1	punct	_	_

Oracle:
(a / and, op, e / establish-01)
(a / and, op, r / resume-01)
(e / establish-01, ARG1, f / force)
(e / establish-01, location, s / space)
(e2 / experiment-01, mod, n / nucleus)
(f / force, mod, m / military)
(r / resume-01, ARG1, e2 / experiment-01)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),,space,false), Span(0,1,List(1),5.,1,false), Span(2,3,List(2),nuclear,resume-01,false), Span(4,5,List(3),and,experiment-01,false), Span(6,7,List(4),military,and,false), Span(7,8,List(5),forces,establish-01,false), Span(3,4,List(6),experiments,,nucleus,false), Span(9,10,List(7),space.,force,false), Span(8,9,List(8),in,military,false)),Map(2 -> resume-01, 5 -> establish-01, 8 -> military, 7 -> force, 1 -> 1, 4 -> and, 6 -> nucleus, 0 -> space, 3 -> experiment-01),Map(n -> nucleus, e -> experiment-01, e2 -> establish-01, s -> space, m -> military, 1 -> 1, a -> and, r -> resume-01, f -> force))),[Ljava.lang.String;@4c959a56,Annotation([Ljava.lang.String;@250a87b1,[Ljava.lang.String;@635f7,[Ljava.lang.String;@280a3543),Annotation([Ljava.lang.String;@48ad5d3e,[Ljava.lang.String;@39eb7c95,[Ledu.cmu.lti.nlp.amr.Dependency;@8734fd2),Annotation([Ljava.lang.String;@71aad3b2,[Ljava.lang.String;@534c2414,[Ljava.lang.String;@31a1f53c),Annotation([Ljava.lang.String;@23be3105,[Ljava.lang.String;@42e5183,[Ledu.cmu.lti.nlp.amr.Entity;@3670b996))
AMR:
(e / experiment-01, ARG1, a / and)
(e / experiment-01, ARG6, n / nucleus)
(e2 / establish-01, ARG0, a / and)
(e2 / establish-01, ARG1, m / military)
(e2 / establish-01, ARG6, s / space)
(r / resume-01, ARG0, n / nucleus)
(r / resume-01, ARG1, 1 / 1)
(r / resume-01, ARG6, f / force)

Decoded in 338,606 microseconds
Sentence: 6. Retain 1000 nuclear bombs equivalent to ten million tons of TNT, and when necessary, install nuclear warheads on all short- and middle-range missiles.

Oracle Span 1:  1000 => 1000
Oracle Span 2:  all => all
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  bombs => bomb
Oracle Span 6:  install => install-01
Oracle Span 7:  middle => middle
Oracle Span 8:  missiles => missile
Oracle Span 9:  nuclear => nucleus
Oracle Span 10:  nuclear => nucleus
Oracle Span 11:  range => range-01
Oracle Span 12:  Retain => retain-01
Oracle Span 13:  short => short
Oracle Span 14:  TNT => TNT
Oracle Span 15:  tons => (mass-quantity :unit ton)
Oracle Span 16:  warheads => warhead
Spans:
Span 25-26:   => and
Span 27-28:   => missile
Span 2-3:  1000 => retain-01
Span 0-1:  6. => 1
Span 19-20:  all => nucleus
Span 4-5:  bombs => nucleus
Span 5-6:  equivalent => bomb
Span 22-23:  middle-range => all
Span 23-24:  missiles. => short
Span 14-15:  necessary, => and
Span 16-17:  nuclear => necessitate-01
Span 10-11:  of => ton
Span 18-19:  on => instal-01
Span 20-21:  short- => warhead
Span 17-18:  warheads => and

 *** WARNING: The dependency tree seems broken.  I can't find the head of missiles in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
Langrangian relaxation converged after 38 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of missiles in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
Oracle Span 2-3:  1000 => 1000
Oracle Span 21-22:  all => all
Oracle Span 13-14:  and => and
Oracle Span 24-25:  and => and
Oracle Span 4-5:  bombs => bomb
Oracle Span 17-18:  install => install-01
Oracle Span 25-26:  middle => middle
Oracle Span 28-29:  missiles => missile
Oracle Span 3-4:  nuclear => nucleus
Oracle Span 18-19:  nuclear => nucleus
Oracle Span 27-28:  range => range-01
Oracle Span 1-2:  Retain => retain-01
Oracle Span 22-23:  short => short
Oracle Span 11-12:  TNT => TNT
Oracle Span 9-10:  tons => (mass-quantity :unit ton)
Oracle Span 19-20:  warheads => warhead

Dependencies:
1	6	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Retain	_	CD	CD	_	4	num	_	_
2	1000	_	CD	CD	_	4	num	_	_
3	nuclear	_	JJ	JJ	_	4	amod	_	_
4	bombs	_	NNS	NNS	_	17	nsubj	_	_
5	equivalent	_	JJ	JJ	_	4	amod	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	ten	_	CD	CD	_	8	number	_	_
8	million	_	CD	CD	_	9	num	_	_
9	tons	_	NNS	NNS	_	6	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	TNT	_	NNP	NNP	_	10	pobj	_	_
12	,	_	,	,	_	10	punct	_	_
13	and	_	CC	CC	_	10	cc	_	_
14	when	_	WRB	WRB	_	15	advmod	_	_
15	necessary	_	JJ	JJ	_	10	conj	_	_
16	,	_	,	,	_	10	punct	_	_
17	install	_	VBP	VBP	_	0	root	_	_
18	nuclear	_	JJ	JJ	_	19	amod	_	_
19	warheads	_	NNS	NNS	_	17	dobj	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	all	_	DT	DT	_	26	det	_	_
22	short	_	JJ	JJ	_	26	amod	_	_
23	-	_	:	:	_	22	punct	_	_
24	and	_	CC	CC	_	22	cc	_	_
25	middle-range	_	JJ	JJ	_	22	conj	_	_
26	missiles	_	NNS	NNS	_	20	pobj	_	_
27	.	_	.	.	_	17	punct	_	_

Oracle:
(a / and, op, i / install-01)
(a / and, op, r / retain-01)
(a2 / and, op, m3 / missile)
(a2 / and, quant, a3 / all)
(b / bomb, mod, n / nucleus)
(b / bomb, quant, 1 / 1000)
(i / install-01, ARG1, w / warhead)
(i / install-01, ARG2, a2 / and)
(m / mass-quantity, unit, t2 / ton)
(r / retain-01, ARG1, b / bomb)
(r3 / range-01, ARG1, m3 / missile)
(r3 / range-01, ARG2, m4 / middle)
(t3 / TNT, quant, m / mass-quantity)
(w / warhead, mod, n3 / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),bombs,nucleus,false), Span(5,6,List(1),equivalent,bomb,false), Span(16,17,List(2),nuclear,necessitate-01,false), Span(19,20,List(3),all,nucleus,false), Span(18,19,List(4),on,instal-01,false), Span(22,23,List(5),middle-range,all,false), Span(23,24,List(6),missiles.,short,false), Span(25,26,List(7),,and,false), Span(0,1,List(8),6.,1,false), Span(14,15,List(9),necessary,,and,false), Span(2,3,List(10),1000,retain-01,false), Span(10,11,List(11),of,ton,false), Span(20,21,List(12),short-,warhead,false), Span(17,18,List(13),warheads,and,false), Span(27,28,List(14),,missile,false)),Map(2 -> necessitate-01, 5 -> all, 12 -> warhead, 8 -> 1, 7 -> and, 1 -> bomb, 4 -> instal-01, 11 -> ton, 14 -> missile, 6 -> short, 0 -> nucleus, 9 -> and, 3 -> nucleus, 10 -> retain-01, 13 -> and),Map(n -> nucleus, w -> warhead, b -> bomb, t -> ton, a3 -> and, s -> short, m -> missile, 1 -> 1, n3 -> nucleus, a -> all, i -> instal-01, a2 -> and, r -> retain-01, n2 -> necessitate-01, a4 -> and))),[Ljava.lang.String;@417ebb86,Annotation([Ljava.lang.String;@78f3be69,[Ljava.lang.String;@5bb6406c,[Ljava.lang.String;@12c45891),Annotation([Ljava.lang.String;@265273c4,[Ljava.lang.String;@43b78191,[Ledu.cmu.lti.nlp.amr.Dependency;@2aeb0cab),Annotation([Ljava.lang.String;@1adbd9b7,[Ljava.lang.String;@2fa2457b,[Ljava.lang.String;@5066e217),Annotation([Ljava.lang.String;@229a22e4,[Ljava.lang.String;@66484161,[Ledu.cmu.lti.nlp.amr.Entity;@5b7c594e))
AMR:
(a2 / and, op, a3 / and)
(a2 / and, op, a4 / and)
(a3 / and, calendar, t / ton)
(i / instal-01, ARG0, a4 / and)
(i / instal-01, ARG1, n3 / nucleus)
(i / instal-01, ARG6, w / warhead)
(m / missile, mod, a2 / and)
(n2 / necessitate-01, ARG0, b / bomb)
(n2 / necessitate-01, ARG1, 1 / 1)
(n2 / necessitate-01, ARG6, a4 / and)
(r / retain-01, ARG1, 1 / 1)
(s / short, calendar, a / all)
(w / warhead, calendar, s / short)
(w / warhead, mod, n / nucleus)

Decoded in 1,048,522 microseconds
Sentence: 7. Retain 30 strategic nuclear submarines with the ability to inflict three devastating nuclear strikes against enemies.

Oracle Span 1:  30 => 30
Oracle Span 2:  devastating => devastate-01
Oracle Span 3:  enemies => enemy
Oracle Span 4:  inflict => inflict-01
Oracle Span 5:  nuclear => nucleus
Oracle Span 6:  nuclear => nucleus
Oracle Span 7:  Retain => retain-01
Oracle Span 8:  strategic => strategy
Oracle Span 9:  strikes => strike-01
Oracle Span 10:  submarines => submarine
Oracle Span 11:  three => 3
Spans:
Span 17-18:   => enemy
Span 2-3:  30 => retain-01
Span 0-1:  7. => 1
Span 15-16:  against => strike-01
Span 4-5:  nuclear => strategic
Span 13-14:  nuclear => devastate-01
Span 14-15:  strikes => nucleus
Span 5-6:  submarines => nucleus
Span 11-12:  three => inflict-01
Span 6-7:  with => submarine

 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 18
Langrangian relaxation converged after 22 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 18
Oracle Span 2-3:  30 => 30
Oracle Span 12-13:  devastating => devastate-01
Oracle Span 16-17:  enemies => enemy
Oracle Span 10-11:  inflict => inflict-01
Oracle Span 4-5:  nuclear => nucleus
Oracle Span 13-14:  nuclear => nucleus
Oracle Span 1-2:  Retain => retain-01
Oracle Span 3-4:  strategic => strategy
Oracle Span 14-15:  strikes => strike-01
Oracle Span 5-6:  submarines => submarine
Oracle Span 11-12:  three => 3

Dependencies:
1	7	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Retain	_	VB	VB	_	0	root	_	_
2	30	_	CD	CD	_	5	num	_	_
3	strategic	_	JJ	JJ	_	5	amod	_	_
4	nuclear	_	JJ	JJ	_	5	amod	_	_
5	submarines	_	NNS	NNS	_	1	dobj	_	_
6	with	_	IN	IN	_	1	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	ability	_	NN	NN	_	6	pobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	inflict	_	VB	VB	_	8	vmod	_	_
11	three	_	CD	CD	_	14	num	_	_
12	devastating	_	JJ	JJ	_	14	amod	_	_
13	nuclear	_	JJ	JJ	_	14	amod	_	_
14	strikes	_	NNS	NNS	_	10	dobj	_	_
15	against	_	IN	IN	_	14	prep	_	_
16	enemies	_	NNS	NNS	_	15	pobj	_	_
17	.	_	.	.	_	1	punct	_	_

Oracle:
(d / devastate-01, ARG0, s3 / strike-01)
(i / inflict-01, ARG0, s / submarine)
(i / inflict-01, ARG1, s3 / strike-01)
(i / inflict-01, ARG2, e / enemy)
(r / retain-01, ARG1, s / submarine)
(s / submarine, mod, n / nucleus)
(s / submarine, mod, s2 / strategy)
(s / submarine, quant, 32 / 30)
(s3 / strike-01, ARG0, s / submarine)
(s3 / strike-01, mod, n2 / nucleus)
(s3 / strike-01, quant, 3 / 3)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),7.,1,false), Span(17,18,List(1),,enemy,false), Span(15,16,List(2),against,strike-01,false), Span(4,5,List(3),nuclear,strategic,false), Span(5,6,List(4),submarines,nucleus,false), Span(11,12,List(5),three,inflict-01,false), Span(13,14,List(6),nuclear,devastate-01,false), Span(2,3,List(7),30,retain-01,false), Span(6,7,List(8),with,submarine,false), Span(14,15,List(9),strikes,nucleus,false)),Map(2 -> strike-01, 5 -> inflict-01, 8 -> submarine, 7 -> retain-01, 1 -> enemy, 4 -> nucleus, 6 -> devastate-01, 9 -> nucleus, 0 -> 1, 3 -> strategic),Map(n -> nucleus, e -> enemy, s2 -> strategic, s -> strike-01, d -> devastate-01, 1 -> 1, r -> retain-01, i -> inflict-01, s3 -> submarine, n2 -> nucleus))),[Ljava.lang.String;@1c797573,Annotation([Ljava.lang.String;@7e53221a,[Ljava.lang.String;@239d3d6,[Ljava.lang.String;@7e614d96),Annotation([Ljava.lang.String;@29e46dc4,[Ljava.lang.String;@4ec0c910,[Ledu.cmu.lti.nlp.amr.Dependency;@22b147d),Annotation([Ljava.lang.String;@76d2f453,[Ljava.lang.String;@7cd23d00,[Ljava.lang.String;@3492e3c3),Annotation([Ljava.lang.String;@6ec091d0,[Ljava.lang.String;@f519037,[Ledu.cmu.lti.nlp.amr.Entity;@620696e0))
AMR:
(d / devastate-01, ARG1, n2 / nucleus)
(d / devastate-01, ARG6, i / inflict-01)
(i / inflict-01, ARG1, s3 / submarine)
(n / nucleus, mod, s2 / strategic)
(r / retain-01, ARG1, e / enemy)
(r / retain-01, ARG6, 1 / 1)
(s / strike-01, ARG1, s2 / strategic)
(s / strike-01, ARG6, e / enemy)
(s3 / submarine, calendar, n / nucleus)

Decoded in 404,135 microseconds
Sentence: 8. Abandon the commitment to not use nuclear weapons first.

Oracle Span 1:  Abandon => abandon-03
Oracle Span 2:  commitment => commit-01
Oracle Span 3:  first => first
Oracle Span 4:  nuclear => nucleus
Oracle Span 5:  use => use-01
Oracle Span 6:  weapons => weapon
Spans:
Span 0-1:  8. => 1
Span 0-11:  8. Abandon the commitment to not use nuclear weapons first. => (ordinal-entity :value 1)
Span 9-10:  first. => weapon
Span 7-8:  nuclear => use-01
Span 2-3:  the => abandon-01
Span 4-5:  to => compliment-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of first in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 11
Langrangian relaxation converged after 44 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of first in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 11
Oracle Span 1-2:  Abandon => abandon-03
Oracle Span 3-4:  commitment => commit-01
Oracle Span 9-10:  first => first
Oracle Span 7-8:  nuclear => nucleus
Oracle Span 6-7:  use => use-01
Oracle Span 8-9:  weapons => weapon

Dependencies:
1	8	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Abandon	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	3	det	_	_
3	commitment	_	NN	NN	_	1	dobj	_	_
4	to	_	TO	TO	_	6	aux	_	_
5	not	_	RB	RB	_	6	neg	_	_
6	use	_	VB	VB	_	3	vmod	_	_
7	nuclear	_	JJ	JJ	_	8	amod	_	_
8	weapons	_	NNS	NNS	_	6	dobj	_	_
9	first	_	RB	RB	_	6	advmod	_	_
10	.	_	.	.	_	1	punct	_	_

Oracle:
(a / abandon-03, ARG1, c / commit-01)
(c / commit-01, ARG2, u / use-01)
(u / use-01, ARG1, w / weapon)
(u / use-01, time, f / first)
(w / weapon, mod, n / nucleus)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),8.,1,false), Span(4,5,List(1),to,compliment-01,false), Span(0,11,List(3, 2),8. Abandon the commitment to not use nuclear weapons first.,(ordinal-entity :value 1),false), Span(2,3,List(4),the,abandon-01,false), Span(7,8,List(5),nuclear,use-01,false), Span(9,10,List(6),first.,weapon,false)),Map(2 -> ordinal-entity, 5 -> use-01, 1 -> compliment-01, 4 -> abandon-01, 6 -> weapon, 0 -> 1, 3 -> 1),Map(w -> weapon, 12 -> 1, 1 -> 1, a -> abandon-01, u -> use-01, c -> compliment-01, o -> ordinal-entity))),[Ljava.lang.String;@22d32e24,Annotation([Ljava.lang.String;@2f85b5f6,[Ljava.lang.String;@1e73e3,[Ljava.lang.String;@5d21c87d),Annotation([Ljava.lang.String;@66b87ff3,[Ljava.lang.String;@64104cd7,[Ledu.cmu.lti.nlp.amr.Dependency;@1762aadd),Annotation([Ljava.lang.String;@44d3fa6c,[Ljava.lang.String;@61b152e2,[Ljava.lang.String;@721dcf7),Annotation([Ljava.lang.String;@597ba8c,[Ljava.lang.String;@5e4c20c8,[Ledu.cmu.lti.nlp.amr.Entity;@35815fa1))
AMR:
(a / abandon-01, ARG1, o / ordinal-entity)
(a / abandon-01, ARG6, c / compliment-01)
(c / compliment-01, ARG1, 1 / 1)
(o / ordinal-entity, value, 12 / 1)
(u / use-01, ARG1, c / compliment-01)
(u / use-01, ARG6, w / weapon)

Decoded in 313,980 microseconds
Sentence: 9. Retain the right of pre-emptive strike when national security is threatened.

Oracle Span 1:  national => nation
Oracle Span 2:  Retain => retain-01
Oracle Span 3:  security => security
Oracle Span 4:  strike => strike-01
Oracle Span 5:  threatened => threaten-01
Spans:
Span 12-13:   => threaten-01
Span 0-1:  9. => 1
Span 10-11:  is => security
Span 9-10:  security => nation
Span 6-7:  strike => pre-empt-01
Span 2-3:  the => retain-01
Span 7-8:  when => strike-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of threatened in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 13
Langrangian relaxation converged after 48 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of threatened in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 13
Oracle Span 10-11:  national => nation
Oracle Span 1-2:  Retain => retain-01
Oracle Span 11-12:  security => security
Oracle Span 8-9:  strike => strike-01
Oracle Span 13-14:  threatened => threaten-01

Dependencies:
1	9	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Retain	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	3	det	_	_
3	right	_	NN	NN	_	1	dobj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	pre-emptive	_	JJ	JJ	_	6	amod	_	_
6	strike	_	NN	NN	_	4	pobj	_	_
7	when	_	WRB	WRB	_	11	advmod	_	_
8	national	_	JJ	JJ	_	9	amod	_	_
9	security	_	NN	NN	_	11	nsubjpass	_	_
10	is	_	VBZ	VBZ	_	11	auxpass	_	_
11	threatened	_	VBN	VBN	_	3	rcmod	_	_
12	.	_	.	.	_	1	punct	_	_

Oracle:
(r / retain-01, time, t / threaten-01)
(s / security, mod, n / nation)
(t / threaten-01, ARG2, s / security)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),is,security,false), Span(0,1,List(1),9.,1,false), Span(7,8,List(2),when,strike-01,false), Span(6,7,List(3),strike,pre-empt-01,false), Span(2,3,List(4),the,retain-01,false), Span(12,13,List(5),,threaten-01,false), Span(9,10,List(6),security,nation,false)),Map(2 -> strike-01, 5 -> threaten-01, 1 -> 1, 4 -> retain-01, 6 -> nation, 0 -> security, 3 -> pre-empt-01),Map(n -> nation, t -> threaten-01, s2 -> strike-01, s -> security, p -> pre-empt-01, 1 -> 1, r -> retain-01))),[Ljava.lang.String;@2926b630,Annotation([Ljava.lang.String;@5c9bfc4b,[Ljava.lang.String;@2183f551,[Ljava.lang.String;@b770bc2),Annotation([Ljava.lang.String;@17fcabaa,[Ljava.lang.String;@140674ba,[Ledu.cmu.lti.nlp.amr.Dependency;@2a113216),Annotation([Ljava.lang.String;@198b158d,[Ljava.lang.String;@6bd84ced,[Ljava.lang.String;@4cdc5688),Annotation([Ljava.lang.String;@6f7e5c87,[Ljava.lang.String;@2e180b98,[Ledu.cmu.lti.nlp.amr.Entity;@78e9592))
AMR:
(p / pre-empt-01, ARG1, s2 / strike-01)
(r / retain-01, ARG1, 1 / 1)
(s2 / strike-01, ARG1, s / security)
(s2 / strike-01, ARG6, n / nation)
(t / threaten-01, ARG1, s2 / strike-01)
(t / threaten-01, ARG6, 1 / 1)

Decoded in 345,253 microseconds
Sentence: My fellow citizens, only if we have self-confidence and self-improvement, can we strive to be strong. Qin Shi Huang unified China. Zheng Chenggong recovered Taiwan. In our responsibilities we must carry on the farsightedness, insight, and strong will of our predecessors.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  can => possible
Oracle Span 4:  carry => carry-02
Oracle Span 5:  China => (country :name (name :op "China"))
Oracle Span 6:  citizens => citizen
Oracle Span 7:  confidence => confident-41
Oracle Span 8:  fellow => fellow
Oracle Span 9:  improvement => improve-01
Oracle Span 10:  insight => insight
Oracle Span 11:  only => only
Oracle Span 12:  predecessors => predecessor
Oracle Span 13:  Qin Shi Huang => (person :name (name :op "Huang" :op "Shi" :op "Qin"))
Oracle Span 14:  recovered => recover-02
Oracle Span 15:  responsibilities => responsible-41
Oracle Span 16:  strive => strive-01
Oracle Span 17:  strong => strong
Oracle Span 18:  strong => strong
Oracle Span 19:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 20:  unified => unify-01
Oracle Span 21:  we => we
Oracle Span 22:  we => we
Oracle Span 23:  will => will
Oracle Span 24:  Zheng Chenggong => (person :name (name :op "Chenggong" :op "Zheng"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 42-43:   => and
Span 43-44:   => strong
Span 47-48:   => (person :ARG0-of precede-01)
Span 35-36:  and => carry-01
Span 14-15:  be => strive-01
Span 2-3:  citizens, => citizen
Span 1-2:  fellow => fellow
Span 25-27:  In our => (person :name (name :op "Zheng" :op "Chenggong"))
Span 34-35:  insight, => muster-01
Span 31-32:  on => wed-01
Span 40-41:  predecessors. => insight-01
Span 23-24:  recovered => (country :name (name :op "China"))
Span 27-28:  responsibilities => recover-02
Span 7-8:  self-confidence => have-03
Span 9-10:  self-improvement, => and
Span 17-18:  Shi => strong
Span 12-13:  strive => possible
Span 32-33:  the => respire-01
Span 19-22:  unified China. Zheng => (person :name (name :op "Qin" :op "Shi" :op "Huang"))
Span 28-29:  we => (country :name (name :op "Taiwan"))

 *** WARNING: The dependency tree seems broken.  I can't find the head of Qin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of Shi in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of Huang in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of unified in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zheng in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Chenggong in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of recovered in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of Taiwan in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of In in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of responsibilities in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of farsightedness in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of insight in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of predecessors in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 48
Langrangian relaxation converged after 48 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Qin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of Shi in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of Huang in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of unified in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zheng in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Chenggong in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of recovered in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of Taiwan in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of In in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of responsibilities in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of farsightedness in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of insight in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of predecessors in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 48
Oracle Span 11-12:  and => and
Oracle Span 46-47:  and => and
Oracle Span 16-17:  can => possible
Oracle Span 39-40:  carry => carry-02
Oracle Span 27-28:  China => (country :name (name :op "China"))
Oracle Span 2-3:  citizens => citizen
Oracle Span 10-11:  confidence => confident-41
Oracle Span 1-2:  fellow => fellow
Oracle Span 14-15:  improvement => improve-01
Oracle Span 44-45:  insight => insight
Oracle Span 4-5:  only => only
Oracle Span 51-52:  predecessors => predecessor
Oracle Span 23-26:  Qin Shi Huang => (person :name (name :op "Huang" :op "Shi" :op "Qin"))
Oracle Span 31-32:  recovered => recover-02
Oracle Span 36-37:  responsibilities => responsible-41
Oracle Span 18-19:  strive => strive-01
Oracle Span 21-22:  strong => strong
Oracle Span 47-48:  strong => strong
Oracle Span 32-33:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 26-27:  unified => unify-01
Oracle Span 6-7:  we => we
Oracle Span 17-18:  we => we
Oracle Span 48-49:  will => will
Oracle Span 29-31:  Zheng Chenggong => (person :name (name :op "Chenggong" :op "Zheng"))

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	13	nsubj	_	_
4	,	_	,	,	_	13	punct	_	_
5	only	_	RB	RB	_	8	advmod	_	_
6	if	_	IN	IN	_	8	mark	_	_
7	we	_	PRP	PRP	_	8	nsubj	_	_
8	have	_	VBP	VBP	_	13	dep	_	_
9	self-confidence	_	NN	NN	_	8	dobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	self-improvement	_	NN	NN	_	9	conj	_	_
12	,	_	,	,	_	13	punct	_	_
13	can	_	MD	MD	_	15	dep	_	_
14	we	_	PRP	PRP	_	15	nsubj	_	_
15	strive	_	VBP	VBP	_	0	root	_	_
16	to	_	TO	TO	_	18	aux	_	_
17	be	_	VB	VB	_	18	cop	_	_
18	strong	_	JJ	JJ	_	15	xcomp	_	_
19	.	_	.	.	_	15	punct	_	_
1	Qin	_	NNP	NNP	_	5	nn	_	_
2	Shi	_	NNP	NNP	_	5	nn	_	_
3	Huang	_	NNP	NNP	_	5	nn	_	_
4	unified	_	NNP	NNP	_	5	nn	_	_
5	China	_	NNP	NNP	_	0	root	_	_
6	.	_	.	.	_	5	punct	_	_
1	Zheng	_	NNP	NNP	_	2	nn	_	_
2	Chenggong	_	NNP	NNP	_	3	nsubj	_	_
3	recovered	_	VBD	VBD	_	0	root	_	_
4	Taiwan	_	NNP	NNP	_	3	dobj	_	_
5	.	_	.	.	_	3	punct	_	_
1	In	_	IN	IN	_	6	prep	_	_
2	our	_	PRP$	PRP$	_	3	poss	_	_
3	responsibilities	_	NNS	NNS	_	1	pobj	_	_
4	we	_	PRP	PRP	_	6	nsubj	_	_
5	must	_	MD	MD	_	6	aux	_	_
6	carry	_	VB	VB	_	0	root	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	farsightedness	_	NNS	NNS	_	7	pobj	_	_
10	,	_	,	,	_	9	punct	_	_
11	insight	_	NN	NN	_	9	conj	_	_
12	,	_	,	,	_	9	punct	_	_
13	and	_	CC	CC	_	9	cc	_	_
14	strong	_	JJ	JJ	_	15	amod	_	_
15	will	_	NN	NN	_	9	conj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	our	_	PRP$	PRP$	_	18	poss	_	_
18	predecessors	_	NNS	NNS	_	16	pobj	_	_
19	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, mod, o2 / only)
(a / and, op, c4 / confident-41)
(a / and, op, i2 / improve-01)
(a2 / and, op, i3 / insight)
(a2 / and, op, w3 / will)
(a2 / and, poss, p4 / predecessor)
(c / country, name, n4 / name)
(c2 / citizen, mod, f / fellow)
(c3 / carry-02, ARG1, a2 / and)
(c4 / confident-41, ARG1, w / we)
(c4 / confident-41, ARG2, w / we)
(c5 / country, name, n2 / name)
(i2 / improve-01, ARG0, w / we)
(i2 / improve-01, ARG1, w / we)
(n / name, op, "Chenggong")
(n / name, op, "Zheng")
(n2 / name, op, "Taiwan")
(n3 / name, op, "Huang")
(n3 / name, op, "Qin")
(n3 / name, op, "Shi")
(n4 / name, op, "China")
(p / person, name, n / name)
(p2 / person, name, n3 / name)
(p3 / possible, condition, a / and)
(p3 / possible, domain, s3 / strive-01)
(p4 / predecessor, poss, w2 / we)
(r / recover-02, ARG0, p / person)
(r / recover-02, ARG1, c5 / country)
(r2 / responsible-41, ARG1, w2 / we)
(s3 / strive-01, ARG0, w / we)
(s3 / strive-01, ARG1, s4 / strong)
(s4 / strong, domain, w / we)
(u / unify-01, ARG0, p2 / person)
(u / unify-01, ARG1, c / country)
(w3 / will, mod, s7 / strong)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),citizens,,citizen,false), Span(27,28,List(1),responsibilities,recover-02,false), Span(31,32,List(2),on,wed-01,false), Span(7,8,List(3),self-confidence,have-03,false), Span(17,18,List(4),Shi,strong,false), Span(42,43,List(5),,and,false), Span(32,33,List(6),the,respire-01,false), Span(1,2,List(7),fellow,fellow,false), Span(23,24,List(10, 9, 8),recovered,(country :name (name :op "China")),false), Span(34,35,List(11),insight,,muster-01,false), Span(9,10,List(12),self-improvement,,and,false), Span(14,15,List(13),be,strive-01,false), Span(25,27,List(17, 16, 15, 14),In our,(person :name (name :op "Zheng" :op "Chenggong")),false), Span(43,44,List(18),,strong,false), Span(47,48,List(20, 19),,(person :ARG0-of precede-01),false), Span(19,22,List(25, 24, 23, 22, 21),unified China. Zheng,(person :name (name :op "Qin" :op "Shi" :op "Huang")),false), Span(12,13,List(26),strive,possible,false), Span(35,36,List(27),and,carry-01,false), Span(28,29,List(30, 29, 28),we,(country :name (name :op "Taiwan")),false), Span(40,41,List(31),predecessors.,insight-01,false)),Map(30 -> "Taiwan", 2 -> wed-01, 5 -> and, 27 -> carry-01, 12 -> and, 8 -> country, 15 -> name, 21 -> person, 18 -> strong, 24 -> "Shi", 7 -> fellow, 1 -> recover-02, 17 -> "Chenggong", 23 -> "Qin", 26 -> possible, 4 -> strong, 11 -> muster-01, 14 -> person, 29 -> name, 20 -> precede-01, 28 -> country, 6 -> respire-01, 9 -> name, 0 -> citizen, 22 -> name, 16 -> "Zheng", 19 -> person, 10 -> "China", 3 -> have-03, 31 -> insight-01, 25 -> "Huang", 13 -> strive-01),Map(n -> name, w -> wed-01, h -> have-03, s2 -> strive-01, p5 -> possible, p2 -> person, c4 -> country, n4 -> name, s -> strong, m -> muster-01, r2 -> respire-01, p -> person, a -> and, n3 -> name, c3 -> carry-01, p4 -> person, a2 -> and, r -> recover-02, i -> insight-01, c -> citizen, s3 -> strong, f -> fellow, p3 -> precede-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@1398cb20,Annotation([Ljava.lang.String;@799777c4,[Ljava.lang.String;@7545ff95,[Ljava.lang.String;@6666f10e),Annotation([Ljava.lang.String;@3372f729,[Ljava.lang.String;@71199fd4,[Ledu.cmu.lti.nlp.amr.Dependency;@2b7a6f35),Annotation([Ljava.lang.String;@7ac505d5,[Ljava.lang.String;@5e2a7e1b,[Ljava.lang.String;@63f0ad35),Annotation([Ljava.lang.String;@1b0b65b9,[Ljava.lang.String;@49b230a0,[Ledu.cmu.lti.nlp.amr.Entity;@4465552b))
AMR:
(a / and, op, s3 / strong)
(c / citizen, mod, f / fellow)
(c2 / country, calendar, p4 / person)
(c2 / country, name, n / name)
(c3 / carry-01, ARG1, p4 / person)
(c4 / country, name, n4 / name)
(h / have-03, ARG0, p4 / person)
(h / have-03, ARG1, a2 / and)
(h / have-03, ARG6, c / citizen)
(i / insight-01, ARG0, s / strong)
(i / insight-01, ARG1, s3 / strong)
(m / muster-01, ARG1, c3 / carry-01)
(n / name, op, "China")
(n2 / name, op, "Chenggong")
(n2 / name, op, "Zheng")
(n3 / name, op, "Huang")
(n3 / name, op, "Qin")
(n3 / name, op, "Shi")
(n4 / name, op, "Taiwan")
(p / person, name, n2 / name)
(p3 / precede-01, ARG0, p2 / person)
(p3 / precede-01, ARG1, p4 / person)
(p4 / person, name, n3 / name)
(r / recover-02, ARG0, p / person)
(r / recover-02, ARG1, p4 / person)
(r / recover-02, ARG6, c4 / country)
(r2 / respire-01, ARG0, s / strong)
(r2 / respire-01, ARG1, p4 / person)
(s2 / strive-01, ARG0, c4 / country)
(s2 / strive-01, ARG1, p5 / possible)
(w / wed-01, ARG1, r2 / respire-01)

Decoded in 2,873,858 microseconds
Sentence: Now, that piece of land trembling far away from the embrace of the motherland is shaking, moaning, and calling. Fellow citizens, let us carry forward the unfulfilled wishes of previous generals, moving forward courageously!

Oracle Span 1:  and => and
Oracle Span 2:  calling => call-02
Oracle Span 3:  carry => carry-01
Oracle Span 4:  citizens => citizen
Oracle Span 5:  courageously => courageous
Oracle Span 6:  embrace => embrace-01
Oracle Span 7:  far => far
Oracle Span 8:  Fellow => fellow
Oracle Span 9:  forward => forward
Oracle Span 10:  forward => forward
Oracle Span 11:  generals => (have-org-role-91 :ARG2 general)
Oracle Span 12:  land => land
Oracle Span 13:  moaning => moan-01
Oracle Span 14:  motherland => motherland
Oracle Span 15:  moving => move-01
Oracle Span 16:  Now => now
Oracle Span 17:  piece => piece
Oracle Span 18:  previous => previous
Oracle Span 19:  shaking => shake-01
Oracle Span 20:  that => that
Oracle Span 21:  trembling => tremble-01
Oracle Span 22:  unfulfilled => (fulfill-01 :polarity -)
Oracle Span 23:  wishes => (thing :ARG1-of wish-01)
Spans:
Span 37-38:   => move-01
Span 35-36:   => (person :ARG0-of (have-org-role-91 :ARG2 general))
Span 34-35:   => previous
Span 38-39:   => forward
Span 7-8:  away => far
Span 18-19:  calling. => moan-01
Span 20-21:  citizens, => and
Span 6-7:  far => tremble-01
Span 24-25:  forward => citizen
Span 32-33:  forward => wish-01
Span 14-15:  is => motherland
Span 21-22:  let => call-01
Span 16-17:  moaning, => shake-01
Span 0-1:  Now, => (date-entity :time now)
Span 28-29:  of => carry-01
Span 3-4:  of => piece
Span 11-12:  of => embrace-01
Span 25-26:  the => and
Span 5-6:  trembling => land
Span 26-27:  unfulfilled => let-01
Span 27-28:  wishes => w

 *** WARNING: The dependency tree seems broken.  I can't find the head of Fellow in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizens in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of us in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of unfulfilled in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of wishes in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of previous in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of generals in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of moving in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of courageously in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 40
Langrangian relaxation converged after 25 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Fellow in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizens in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of us in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of unfulfilled in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of wishes in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of previous in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of generals in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of moving in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of courageously in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 40
Oracle Span 20-21:  and => and
Oracle Span 21-22:  calling => call-02
Oracle Span 28-29:  carry => carry-01
Oracle Span 24-25:  citizens => citizen
Oracle Span 39-40:  courageously => courageous
Oracle Span 11-12:  embrace => embrace-01
Oracle Span 7-8:  far => far
Oracle Span 23-24:  Fellow => fellow
Oracle Span 29-30:  forward => forward
Oracle Span 38-39:  forward => forward
Oracle Span 35-36:  generals => (have-org-role-91 :ARG2 general)
Oracle Span 5-6:  land => land
Oracle Span 18-19:  moaning => moan-01
Oracle Span 14-15:  motherland => motherland
Oracle Span 37-38:  moving => move-01
Oracle Span 0-1:  Now => now
Oracle Span 3-4:  piece => piece
Oracle Span 34-35:  previous => previous
Oracle Span 16-17:  shaking => shake-01
Oracle Span 2-3:  that => that
Oracle Span 6-7:  trembling => tremble-01
Oracle Span 31-32:  unfulfilled => (fulfill-01 :polarity -)
Oracle Span 32-33:  wishes => (thing :ARG1-of wish-01)

Dependencies:
1	Now	_	RB	RB	_	17	advmod	_	_
2	,	_	,	,	_	17	punct	_	_
3	that	_	DT	DT	_	4	det	_	_
4	piece	_	NN	NN	_	17	nsubj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	land	_	NN	NN	_	5	pobj	_	_
7	trembling	_	VBG	VBG	_	6	vmod	_	_
8	far	_	RB	RB	_	9	advmod	_	_
9	away	_	RB	RB	_	7	advmod	_	_
10	from	_	IN	IN	_	7	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	embrace	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	motherland	_	NN	NN	_	13	pobj	_	_
16	is	_	VBZ	VBZ	_	17	aux	_	_
17	shaking	_	VBG	VBG	_	0	root	_	_
18	,	_	,	,	_	17	punct	_	_
19	moaning	_	VBG	VBG	_	17	conj	_	_
20	,	_	,	,	_	17	punct	_	_
21	and	_	CC	CC	_	17	cc	_	_
22	calling	_	VBG	VBG	_	17	conj	_	_
23	.	_	.	.	_	17	punct	_	_
1	Fellow	_	NNP	NNP	_	2	nn	_	_
2	citizens	_	NNS	NNS	_	4	nsubj	_	_
3	,	_	,	,	_	4	punct	_	_
4	let	_	VB	VB	_	0	root	_	_
5	us	_	PRP	PRP	_	6	nsubj	_	_
6	carry	_	VB	VB	_	4	ccomp	_	_
7	forward	_	RP	RP	_	6	prt	_	_
8	the	_	DT	DT	_	10	det	_	_
9	unfulfilled	_	JJ	JJ	_	10	amod	_	_
10	wishes	_	NNS	NNS	_	6	dobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	previous	_	JJ	JJ	_	13	amod	_	_
13	generals	_	NNS	NNS	_	11	pobj	_	_
14	,	_	,	,	_	10	punct	_	_
15	moving	_	VBG	VBG	_	10	vmod	_	_
16	forward	_	RP	RP	_	15	prt	_	_
17	courageously	_	RB	RB	_	15	advmod	_	_
18	!	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / call-02)
(a / and, op, m2 / moan-01)
(a / and, op, s / shake-01)
(a / and, time, n / now)
(c / call-02, ARG0, p / piece)
(c2 / citizen, mod, f2 / fellow)
(c3 / carry-01, ARG1, t3 / thing)
(c3 / carry-01, direction, f4 / forward)
(c3 / carry-01, manner, m4 / move-01)
(e / embrace-01, ARG0, m3 / motherland)
(e / embrace-01, ARG1, p / piece)
(f5 / fulfill-01, ARG1, w / wish-01)
(f5 / fulfill-01, polarity, -)
(h / have-org-role-91, ARG2, g / general)
(h / have-org-role-91, time, p2 / previous)
(l / land, part, p / piece)
(m2 / moan-01, ARG0, p / piece)
(m4 / move-01, direction, f3 / forward)
(m4 / move-01, manner, c4 / courageous)
(p / piece, mod, t2 / that)
(s / shake-01, ARG1, p / piece)
(t / tremble-01, ARG1, p / piece)
(w / wish-01, ARG1, t3 / thing)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(1, 0),Now,,(date-entity :time now),false), Span(28,29,List(2),of,carry-01,false), Span(21,22,List(3),let,call-01,false), Span(14,15,List(4),is,motherland,false), Span(24,25,List(5),forward,citizen,false), Span(37,38,List(6),,move-01,false), Span(35,36,List(9, 8, 7),,(person :ARG0-of (have-org-role-91 :ARG2 general)),false), Span(3,4,List(10),of,piece,false), Span(16,17,List(11),moaning,,shake-01,false), Span(34,35,List(12),,previous,false), Span(38,39,List(13),,forward,false), Span(20,21,List(14),citizens,,and,false), Span(25,26,List(15),the,and,false), Span(26,27,List(16),unfulfilled,let-01,false), Span(5,6,List(17),trembling,land,false), Span(11,12,List(18),of,embrace-01,false), Span(6,7,List(19),far,tremble-01,false), Span(32,33,List(20),forward,wish-01,false), Span(7,8,List(21),away,far,false), Span(27,28,List(22),wishes,w,false), Span(18,19,List(23),calling.,moan-01,false)),Map(2 -> carry-01, 5 -> citizen, 12 -> previous, 15 -> and, 8 -> have-org-role-91, 21 -> far, 18 -> embrace-01, 7 -> person, 17 -> land, 1 -> now, 23 -> moan-01, 4 -> motherland, 11 -> shake-01, 14 -> and, 20 -> wish-01, 6 -> move-01, 22 -> w, 0 -> date-entity, 9 -> general, 16 -> let-01, 19 -> tremble-01, 3 -> call-01, 10 -> piece, 13 -> forward),Map(m3 -> moan-01, e -> embrace-01, w -> wish-01, n -> now, h -> have-org-role-91, t -> tremble-01, m2 -> move-01, p2 -> piece, s -> shake-01, d -> date-entity, m -> motherland, p -> person, g -> general, a -> and, c3 -> citizen, w2 -> w, l2 -> land, a2 -> and, c -> carry-01, f2 -> far, l -> let-01, f -> forward, p3 -> previous, c2 -> call-01))),[Ljava.lang.String;@6b297ffa,Annotation([Ljava.lang.String;@72b33e68,[Ljava.lang.String;@423fa41,[Ljava.lang.String;@245b09dd),Annotation([Ljava.lang.String;@42d7403,[Ljava.lang.String;@6f865a90,[Ledu.cmu.lti.nlp.amr.Dependency;@74ec54d3),Annotation([Ljava.lang.String;@805be72,[Ljava.lang.String;@67675e1d,[Ljava.lang.String;@3a68cabb),Annotation([Ljava.lang.String;@2cb45be9,[Ljava.lang.String;@9678623,[Ledu.cmu.lti.nlp.amr.Entity;@542da6a4))
AMR:
(a / and, op, a2 / and)
(a / and, op, c2 / call-01)
(a / and, op, c3 / citizen)
(a / and, op, f / forward)
(a / and, op, l / let-01)
(a / and, op, m3 / moan-01)
(a / and, op, p / person)
(a / and, op, s / shake-01)
(a / and, op, w / wish-01)
(a / and, op, w2 / w)
(c / carry-01, ARG1, a / and)
(c2 / call-01, ARG1, p3 / previous)
(d / date-entity, time, n / now)
(e / embrace-01, ARG1, m / motherland)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, g / general)
(l / let-01, ARG1, f2 / far)
(m2 / move-01, ARG1, a / and)
(m3 / moan-01, ARG0, p2 / piece)
(m3 / moan-01, ARG1, d / date-entity)
(s / shake-01, ARG1, m / motherland)
(t / tremble-01, ARG0, p2 / piece)
(t / tremble-01, ARG1, l2 / land)

Decoded in 1,612,729 microseconds
Sentence: When reading over history, the heaviness and anger in my heart simmer into concern for the nation. Although I was born to cloth gown and am one of the common people, for the prosperity of the motherland, for the motherland being splendid once again, I am willing to voluntarily serve our country, and I will have no regrets even if I die! My sincere patriotic heart is adequate to show to heaven!

Oracle Span 1:  adequate => adequate
Oracle Span 2:  again => again
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  and => and
Oracle Span 6:  anger => anger
Oracle Span 7:  born => bear-02
Oracle Span 8:  cloth => cloth
Oracle Span 9:  common => (person :mod common)
Oracle Span 10:  concern => concern-01
Oracle Span 11:  country => country
Oracle Span 12:  die => die-01
Oracle Span 13:  even => even-if
Oracle Span 14:  gown => gown
Oracle Span 15:  have => have-concession-91
Oracle Span 16:  heart => heart
Oracle Span 17:  heart => heart
Oracle Span 18:  heaven => heaven
Oracle Span 19:  heaviness => heaviness
Oracle Span 20:  history => history
Oracle Span 21:  I => i
Oracle Span 22:  I => i
Oracle Span 23:  I => i
Oracle Span 24:  motherland => motherland
Oracle Span 25:  nation => nation
Oracle Span 26:  no => -
Oracle Span 27:  of => include-91
Oracle Span 28:  once => once
Oracle Span 29:  patriotic => patriotic
Oracle Span 30:  prosperity => prosper-01
Oracle Span 31:  reading => read-01
Oracle Span 32:  regrets => regret-01
Oracle Span 33:  serve => serve-02
Oracle Span 34:  show => show-01
Oracle Span 35:  simmer => simmer-01
Oracle Span 36:  sincere => sincere
Oracle Span 37:  splendid => splendid
Oracle Span 38:  voluntarily => volunteer-01
Oracle Span 39:  willing => will-02
Spans:
Span 78-79:   => heaven
Span 74-75:   => adequate
Span 76-77:   => show-01
Span 72-73:   => heart
Span 67-68:  adequate => die-01
Span 43-44:  again, => motherland
Span 17-18:  Although => nation
Span 24-25:  and => clothe-01
Span 7-8:  anger => and
Span 22-23:  cloth => bear-02
Span 51-52:  country, => will-01
Span 31-32:  for => common
Span 14-15:  for => concern-01
Span 71-72:  heaven! => patriotic
Span 3-4:  history, => history
Span 53-54:  I => volunteer-01
Span 8-9:  in => anger-01
Span 39-40:  motherland => motherland
Span 36-37:  motherland, => prosperity
Span 16-17:  nation. => (country :name (name :op "North"))
Span 27-28:  of => be-located-at-91
Span 26-27:  one => and
Span 64-65:  patriotic => even
Span 1-2:  reading => read-01
Span 11-12:  simmer => heart
Span 47-48:  to => again
Span 70-71:  to => sincere
Span 0-1:  When => 1
Span 0-47:  When reading over history, the heaviness and anger in my heart simmer into concern for the nation. Although I was born to cloth gown and am one of the common people, for the prosperity of the motherland, for the motherland being splendid once again, I am willing => (date-entity :time once)
Span 54-55:  will => serve-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of am in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of willing in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of voluntarily in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of serve in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of regrets in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of die in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of My in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of sincere in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of patriotic in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of heart in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of adequate in position 74
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 75
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 76
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 77
 *** WARNING: The dependency tree seems broken.  I can't find the head of heaven in position 78
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 79
Langrangian relaxation converged after 41 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of am in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of willing in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of voluntarily in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of serve in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of regrets in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of die in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of My in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of sincere in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of patriotic in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of heart in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of adequate in position 74
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 75
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 76
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 77
 *** WARNING: The dependency tree seems broken.  I can't find the head of heaven in position 78
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 79
Oracle Span 74-75:  adequate => adequate
Oracle Span 47-48:  again => again
Oracle Span 7-8:  and => and
Oracle Span 26-27:  and => and
Oracle Span 58-59:  and => and
Oracle Span 8-9:  anger => anger
Oracle Span 22-23:  born => bear-02
Oracle Span 24-25:  cloth => cloth
Oracle Span 31-32:  common => (person :mod common)
Oracle Span 14-15:  concern => concern-01
Oracle Span 56-57:  country => country
Oracle Span 67-68:  die => die-01
Oracle Span 64-65:  even => even-if
Oracle Span 25-26:  gown => gown
Oracle Span 61-62:  have => have-concession-91
Oracle Span 11-12:  heart => heart
Oracle Span 72-73:  heart => heart
Oracle Span 78-79:  heaven => heaven
Oracle Span 6-7:  heaviness => heaviness
Oracle Span 3-4:  history => history
Oracle Span 20-21:  I => i
Oracle Span 49-50:  I => i
Oracle Span 59-60:  I => i
Oracle Span 39-40:  motherland => motherland
Oracle Span 17-18:  nation => nation
Oracle Span 62-63:  no => -
Oracle Span 29-30:  of => include-91
Oracle Span 46-47:  once => once
Oracle Span 71-72:  patriotic => patriotic
Oracle Span 36-37:  prosperity => prosper-01
Oracle Span 1-2:  reading => read-01
Oracle Span 63-64:  regrets => regret-01
Oracle Span 54-55:  serve => serve-02
Oracle Span 76-77:  show => show-01
Oracle Span 12-13:  simmer => simmer-01
Oracle Span 70-71:  sincere => sincere
Oracle Span 45-46:  splendid => splendid
Oracle Span 53-54:  voluntarily => volunteer-01
Oracle Span 51-52:  willing => will-02

Dependencies:
1	When	_	WRB	WRB	_	2	advmod	_	_
2	reading	_	VBG	VBG	_	13	advcl	_	_
3	over	_	IN	IN	_	2	prep	_	_
4	history	_	NN	NN	_	3	pobj	_	_
5	,	_	,	,	_	13	punct	_	_
6	the	_	DT	DT	_	7	det	_	_
7	heaviness	_	NN	NN	_	13	nsubj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	anger	_	NN	NN	_	7	conj	_	_
10	in	_	IN	IN	_	7	prep	_	_
11	my	_	PRP$	PRP$	_	12	poss	_	_
12	heart	_	NN	NN	_	10	pobj	_	_
13	simmer	_	VBP	VBP	_	0	root	_	_
14	into	_	IN	IN	_	13	prep	_	_
15	concern	_	NN	NN	_	14	pobj	_	_
16	for	_	IN	IN	_	15	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	nation	_	NN	NN	_	16	pobj	_	_
19	.	_	.	.	_	13	punct	_	_
1	Although	_	IN	IN	_	4	mark	_	_
2	I	_	PRP	PRP	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	born	_	VBN	VBN	_	33	advcl	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	cloth	_	NN	NN	_	7	nn	_	_
7	gown	_	NN	NN	_	5	pobj	_	_
8	and	_	CC	CC	_	4	cc	_	_
9	am	_	VBP	VBP	_	10	cop	_	_
10	one	_	CD	CD	_	4	conj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	common	_	JJ	JJ	_	14	amod	_	_
14	people	_	NNS	NNS	_	11	pobj	_	_
15	,	_	,	,	_	4	punct	_	_
16	for	_	IN	IN	_	4	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	prosperity	_	NN	NN	_	16	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	motherland	_	NN	NN	_	19	pobj	_	_
22	,	_	,	,	_	18	punct	_	_
23	for	_	IN	IN	_	18	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	motherland	_	NN	NN	_	23	pobj	_	_
26	being	_	VBG	VBG	_	27	auxpass	_	_
27	splendid	_	VBN	VBN	_	25	vmod	_	_
28	once	_	RB	RB	_	29	advmod	_	_
29	again	_	RB	RB	_	27	advmod	_	_
30	,	_	,	,	_	33	punct	_	_
31	I	_	PRP	PRP	_	33	nsubj	_	_
32	am	_	VBP	VBP	_	33	cop	_	_
33	willing	_	JJ	JJ	_	0	root	_	_
34	to	_	TO	TO	_	36	aux	_	_
35	voluntarily	_	RB	RB	_	36	advmod	_	_
36	serve	_	VB	VB	_	33	xcomp	_	_
37	our	_	PRP$	PRP$	_	38	poss	_	_
38	country	_	NN	NN	_	36	dobj	_	_
39	,	_	,	,	_	33	punct	_	_
40	and	_	CC	CC	_	33	cc	_	_
41	I	_	PRP	PRP	_	43	nsubj	_	_
42	will	_	MD	MD	_	43	aux	_	_
43	have	_	VB	VB	_	33	conj	_	_
44	no	_	DT	DT	_	45	neg	_	_
45	regrets	_	NNS	NNS	_	43	dobj	_	_
46	even	_	RB	RB	_	49	advmod	_	_
47	if	_	IN	IN	_	49	mark	_	_
48	I	_	PRP	PRP	_	49	nsubj	_	_
49	die	_	VBP	VBP	_	43	advcl	_	_
50	!	_	.	.	_	33	punct	_	_
1	My	_	PRP$	PRP$	_	4	poss	_	_
2	sincere	_	JJ	JJ	_	3	amod	_	_
3	patriotic	_	JJ	JJ	_	4	amod	_	_
4	heart	_	NN	NN	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	adequate	_	JJ	JJ	_	0	root	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	show	_	VB	VB	_	6	xcomp	_	_
9	to	_	TO	TO	_	8	prep	_	_
10	heaven	_	NN	NN	_	9	pobj	_	_
11	!	_	.	.	_	6	punct	_	_

Oracle:
(a / and, location, h3 / heart)
(a / and, op, a2 / anger)
(a / and, op, h2 / heaviness)
(a3 / and, op, r2 / regret-01)
(a3 / and, op, w / will-02)
(a4 / adequate, domain, s3 / show-01)
(a5 / and, op, p2 / prosper-01)
(a5 / and, op, s5 / splendid)
(a6 / again, mod, o2 / once)
(b / bear-02, ARG1, i / i)
(b / bear-02, prep-to, g / gown)
(c / concern-01, ARG0, n / nation)
(c / concern-01, ARG1, i3 / i)
(d / die-01, ARG1, i / i)
(e2 / even-if, op, d / die-01)
(g / gown, mod, c3 / cloth)
(h4 / heart, mod, p / patriotic)
(h4 / heart, mod, s2 / sincere)
(h7 / have-concession-91, ARG1, a3 / and)
(i2 / include-91, ARG1, i / i)
(i2 / include-91, ARG2, p3 / person)
(i3 / i, part, h3 / heart)
(i4 / i, part, h4 / heart)
(p2 / prosper-01, ARG0, m4 / motherland)
(p3 / person, mod, c4 / common)
(r / read-01, ARG0, i3 / i)
(r / read-01, ARG1, h / history)
(r2 / regret-01, ARG0, i / i)
(r2 / regret-01, concession, e2 / even-if)
(r2 / regret-01, polarity, - / -)
(s / simmer-01, ARG1, a / and)
(s / simmer-01, prep-into, c / concern-01)
(s / simmer-01, time, r / read-01)
(s3 / show-01, ARG0, i4 / i)
(s3 / show-01, ARG1, h4 / heart)
(s3 / show-01, ARG2, h5 / heaven)
(s4 / serve-02, ARG0, i / i)
(s4 / serve-02, ARG1, c2 / country)
(s4 / serve-02, purpose, a5 / and)
(s5 / splendid, domain, m4 / motherland)
(s5 / splendid, mod, a6 / again)
(v / volunteer-01, ARG0, i / i)
(v / volunteer-01, ARG1, s4 / serve-02)
(w / will-02, ARG0, i / i)
(w / will-02, ARG1, s4 / serve-02)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),of,be-located-at-91,false), Span(11,12,List(1),simmer,heart,false), Span(47,48,List(2),to,again,false), Span(26,27,List(3),one,and,false), Span(22,23,List(4),cloth,bear-02,false), Span(78,79,List(5),,heaven,false), Span(17,18,List(6),Although,nation,false), Span(70,71,List(7),to,sincere,false), Span(24,25,List(8),and,clothe-01,false), Span(74,75,List(9),,adequate,false), Span(39,40,List(10),motherland,motherland,false), Span(31,32,List(11),for,common,false), Span(71,72,List(12),heaven!,patriotic,false), Span(76,77,List(13),,show-01,false), Span(67,68,List(14),adequate,die-01,false), Span(36,37,List(15),motherland,,prosperity,false), Span(8,9,List(16),in,anger-01,false), Span(53,54,List(17),I,volunteer-01,false), Span(72,73,List(18),,heart,false), Span(0,1,List(19),When,1,false), Span(1,2,List(20),reading,read-01,false), Span(43,44,List(21),again,,motherland,false), Span(54,55,List(22),will,serve-01,false), Span(0,47,List(24, 23),When reading over history, the heaviness and anger in my heart simmer into concern for the nation. Although I was born to cloth gown and am one of the common people, for the prosperity of the motherland, for the motherland being splendid once again, I am willing,(date-entity :time once),false), Span(16,17,List(27, 26, 25),nation.,(country :name (name :op "North")),false), Span(3,4,List(28),history,,history,false), Span(7,8,List(29),anger,and,false), Span(51,52,List(30),country,,will-01,false), Span(64,65,List(31),patriotic,even,false), Span(14,15,List(32),for,concern-01,false)),Map(30 -> will-01, 2 -> again, 5 -> heaven, 27 -> "North", 12 -> patriotic, 8 -> clothe-01, 15 -> prosperity, 21 -> motherland, 18 -> heart, 24 -> once, 7 -> sincere, 1 -> heart, 17 -> volunteer-01, 23 -> date-entity, 26 -> name, 4 -> bear-02, 11 -> common, 32 -> concern-01, 14 -> die-01, 29 -> and, 20 -> read-01, 28 -> history, 6 -> nation, 9 -> adequate, 0 -> be-located-at-91, 22 -> serve-01, 16 -> anger-01, 19 -> 1, 10 -> motherland, 3 -> and, 31 -> even, 25 -> country, 13 -> show-01),Map(e -> even, w -> will-01, n -> nation, h -> heart, h2 -> heaven, s2 -> show-01, b -> be-located-at-91, b2 -> bear-02, m2 -> motherland, p2 -> prosperity, c4 -> concern-01, a3 -> adequate, s -> sincere, h4 -> history, v -> volunteer-01, m -> motherland, d -> die-01, 1 -> 1, p -> patriotic, c3 -> country, a -> again, a5 -> and, d2 -> date-entity, a2 -> and, r -> read-01, c -> clothe-01, h3 -> heart, s3 -> serve-01, o -> once, n2 -> name, c2 -> common, a4 -> anger-01))),[Ljava.lang.String;@7ffc86b6,Annotation([Ljava.lang.String;@53d489d0,[Ljava.lang.String;@5d1df2ab,[Ljava.lang.String;@32d9d48c),Annotation([Ljava.lang.String;@290b3d57,[Ljava.lang.String;@5e66bbaf,[Ledu.cmu.lti.nlp.amr.Dependency;@6c5c9262),Annotation([Ljava.lang.String;@105d46d1,[Ljava.lang.String;@604c3008,[Ljava.lang.String;@b9c446d),Annotation([Ljava.lang.String;@35b08fe,[Ljava.lang.String;@794aad8a,[Ledu.cmu.lti.nlp.amr.Entity;@78871edb))
AMR:
(a / again, calendar, d2 / date-entity)
(a4 / anger-01, ARG0, h / heart)
(a5 / and, op, a4 / anger-01)
(a5 / and, op, c4 / concern-01)
(a5 / and, op, s / sincere)
(b / be-located-at-91, ARG1, a2 / and)
(b2 / bear-02, ARG1, n / nation)
(b2 / bear-02, ARG2, c / clothe-01)
(b2 / bear-02, ARG6, c3 / country)
(c / clothe-01, ARG1, a2 / and)
(c3 / country, name, n2 / name)
(c4 / concern-01, ARG0, n / nation)
(c4 / concern-01, ARG1, c2 / common)
(d / die-01, ARG0, a5 / and)
(d / die-01, ARG1, e / even)
(d2 / date-entity, time, o / once)
(n2 / name, op, "North")
(p / patriotic, mod, s / sincere)
(r / read-01, ARG0, a5 / and)
(r / read-01, ARG1, h4 / history)
(r / read-01, ARG6, 1 / 1)
(s2 / show-01, ARG0, a5 / and)
(s2 / show-01, ARG1, h3 / heart)
(s2 / show-01, ARG2, h2 / heaven)
(s2 / show-01, ARG6, a3 / adequate)
(s3 / serve-01, ARG0, a5 / and)
(s3 / serve-01, ARG1, p2 / prosperity)
(v / volunteer-01, ARG0, a5 / and)
(v / volunteer-01, ARG1, m / motherland)
(w / will-01, ARG0, a5 / and)
(w / will-01, ARG1, m2 / motherland)
(w / will-01, ARG6, a / again)

Decoded in 5,016,119 microseconds
Sentence: Here, I've composed a poem in classical ci form, to voice the aspirations of my heart.

Oracle Span 1:  aspirations => aspire-01
Oracle Span 2:  ci => ci
Oracle Span 3:  classical => classical
Oracle Span 4:  composed => compose-02
Oracle Span 5:  form => form
Oracle Span 6:  heart => heart
Oracle Span 7:  Here => here
Oracle Span 8:  I => i
Oracle Span 9:  poem => poem
Oracle Span 10:  voice => voice-01
Spans:
Span 18-19:   => heart
Span 6-7:  classical => poo-01
Span 15-16:  heart. => aspiration
Span 13-14:  of => voice-01
Span 4-5:  poem => compose-01
Span 10-11:  voice => form

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Oracle Span 15-16:  aspirations => aspire-01
Oracle Span 9-10:  ci => ci
Oracle Span 8-9:  classical => classical
Oracle Span 4-5:  composed => compose-02
Oracle Span 10-11:  form => form
Oracle Span 18-19:  heart => heart
Oracle Span 0-1:  Here => here
Oracle Span 2-3:  I => i
Oracle Span 6-7:  poem => poem
Oracle Span 13-14:  voice => voice-01

Dependencies:
1	Here	_	RB	RB	_	5	advmod	_	_
2	,	_	,	,	_	5	punct	_	_
3	I	_	PRP	PRP	_	5	nsubj	_	_
4	've	_	VBP	VBP	_	5	aux	_	_
5	composed	_	VBN	VBN	_	0	root	_	_
6	a	_	DT	DT	_	7	det	_	_
7	poem	_	NN	NN	_	5	dobj	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	classical	_	JJ	JJ	_	11	amod	_	_
10	ci	_	NN	NN	_	11	nn	_	_
11	form	_	NN	NN	_	8	pobj	_	_
12	,	_	,	,	_	5	punct	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	voice	_	VB	VB	_	5	vmod	_	_
15	the	_	DT	DT	_	16	det	_	_
16	aspirations	_	NNS	NNS	_	14	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	my	_	PRP$	PRP$	_	19	poss	_	_
19	heart	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	5	punct	_	_

Oracle:
(a / aspire-01, ARG0, h / heart)
(c / compose-02, ARG0, i / i)
(c / compose-02, ARG1, p / poem)
(c / compose-02, manner, f / form)
(c / compose-02, mod, h2 / here)
(c / compose-02, purpose, v / voice-01)
(f / form, mod, c2 / classical)
(f / form, mod, c3 / ci)
(i / i, part, h / heart)
(v / voice-01, ARG0, i / i)
(v / voice-01, ARG1, a / aspire-01)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),heart.,aspiration,false), Span(18,19,List(1),,heart,false), Span(13,14,List(2),of,voice-01,false), Span(4,5,List(3),poem,compose-01,false), Span(10,11,List(4),voice,form,false), Span(6,7,List(5),classical,poo-01,false)),Map(2 -> voice-01, 5 -> poo-01, 1 -> heart, 4 -> form, 0 -> aspiration, 3 -> compose-01),Map(h -> heart, v -> voice-01, p -> poo-01, a -> aspiration, c -> compose-01, f -> form))),[Ljava.lang.String;@207f43c1,Annotation([Ljava.lang.String;@64ccbc0b,[Ljava.lang.String;@4c8b642a,[Ljava.lang.String;@643f5782),Annotation([Ljava.lang.String;@3e84618f,[Ljava.lang.String;@3fa9aeb0,[Ledu.cmu.lti.nlp.amr.Dependency;@2894375b),Annotation([Ljava.lang.String;@3609e68c,[Ljava.lang.String;@2b9c61db,[Ljava.lang.String;@59328636),Annotation([Ljava.lang.String;@50155ca4,[Ljava.lang.String;@29d1fdac,[Ledu.cmu.lti.nlp.amr.Entity;@610bd3f4))
AMR:
(a / aspiration, poss, h / heart)
(c / compose-01, ARG1, p / poo-01)
(p / poo-01, ARG1, f / form)
(v / voice-01, ARG1, a / aspiration)
(v / voice-01, ARG6, p / poo-01)

Decoded in 357,217 microseconds
Sentence: Paint the deep red lips

Oracle Span 1:  deep => deep
Oracle Span 2:  lips => lip
Oracle Span 3:  Paint => paint-01
Oracle Span 4:  red => red
Spans:
Span 2-3:  deep => deep
Span 4-5:  lips => lip
Span 0-1:  Paint => paint-01
Span 3-4:  red => red

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  deep => deep
Oracle Span 4-5:  lips => lip
Oracle Span 0-1:  Paint => paint-01
Oracle Span 3-4:  red => red

Dependencies:
1	Paint	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	5	det	_	_
3	deep	_	JJ	JJ	_	5	amod	_	_
4	red	_	JJ	JJ	_	5	amod	_	_
5	lips	_	NNS	NNS	_	1	dobj	_	_

Oracle:
(l / lip, mod, r / red)
(p / paint-01, ARG1, l / lip)
(r / red, degree, d2 / deep)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Paint,paint-01,false), Span(4,5,List(1),lips,lip,false), Span(3,4,List(2),red,red,false), Span(2,3,List(3),deep,deep,false)),Map(2 -> red, 1 -> lip, 0 -> paint-01, 3 -> deep),Map(d -> deep, p -> paint-01, r -> red, l -> lip))),[Ljava.lang.String;@45971840,Annotation([Ljava.lang.String;@770f1a1e,[Ljava.lang.String;@2cb9c7fd,[Ljava.lang.String;@4e60750b),Annotation([Ljava.lang.String;@3348219f,[Ljava.lang.String;@3c980202,[Ledu.cmu.lti.nlp.amr.Dependency;@5efcbc43),Annotation([Ljava.lang.String;@13f952ba,[Ljava.lang.String;@614fdd83,[Ljava.lang.String;@1dbb4bba),Annotation([Ljava.lang.String;@261ef2ea,[Ljava.lang.String;@7f2b0811,[Ledu.cmu.lti.nlp.amr.Entity;@609771b2))
AMR:
(l / lip, mod, d / deep)
(l / lip, mod, r / red)
(p / paint-01, ARG1, l / lip)

Decoded in 48,385 microseconds
Sentence: Protect the Diaoyu Islands

Oracle Span 1:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 2:  Protect => protect-01
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 2-4:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Span 0-1:  Protect => protect-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-4:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 0-1:  Protect => protect-01

Dependencies:
1	Protect	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	4	det	_	_
3	Diaoyu	_	NNP	NNP	_	4	nn	_	_
4	Islands	_	NNPS	NNPS	_	1	dobj	_	_

Oracle:
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / protect-01, ARG1, i / island)

Input(Some(Graph(null,ArrayBuffer(Span(2,4,List(3, 2, 1, 0),Diaoyu Islands,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(0,1,List(4),Protect,protect-01,false)),Map(2 -> "Islands", 1 -> name, 4 -> protect-01, 0 -> island, 3 -> "Diaoyu"),Map(n -> name, p -> protect-01, i -> island))),[Ljava.lang.String;@255cc2dd,Annotation([Ljava.lang.String;@28470b3d,[Ljava.lang.String;@426297,[Ljava.lang.String;@c517588),Annotation([Ljava.lang.String;@4f5804f5,[Ljava.lang.String;@5f56e0c0,[Ledu.cmu.lti.nlp.amr.Dependency;@4c137767),Annotation([Ljava.lang.String;@4be9a658,[Ljava.lang.String;@44996c7c,[Ljava.lang.String;@2ca1c4cf),Annotation([Ljava.lang.String;@7b5e3673,[Ljava.lang.String;@7d039426,[Ledu.cmu.lti.nlp.amr.Entity;@72f6ed76))
AMR:
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / protect-01, ARG1, i / island)

Decoded in 49,020 microseconds
Sentence: Bitterly lost our Ryukyu Islands

Oracle Span 1:  Bitterly => bitter
Oracle Span 2:  lost => lose-02
Oracle Span 3:  Ryukyu Islands => (island :name (name :op "Islands" :op "Ryukyu"))
NER Entity: (country :name (name :op "Ryukyu" :op "Islands"))
Spans:
Span 0-1:  Bitterly => bitter
Span 1-2:  lost => lose-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Bitterly => bitter
Oracle Span 1-2:  lost => lose-02
Oracle Span 3-5:  Ryukyu Islands => (island :name (name :op "Islands" :op "Ryukyu"))

Dependencies:
1	Bitterly	_	RB	RB	_	2	advmod	_	_
2	lost	_	VBD	VBD	_	0	root	_	_
3	our	_	PRP$	PRP$	_	2	dobj	_	_
4	Ryukyu	_	NNP	NNP	_	5	nn	_	_
5	Islands	_	NNP	NNP	_	2	nsubj	_	_

Oracle:
(i / island, name, n / name)
(l / lose-02, ARG1, i / island)
(l / lose-02, manner, b / bitter)
(n / name, op, "Islands")
(n / name, op, "Ryukyu")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Bitterly,bitter,false), Span(1,2,List(1),lost,lose-02,false)),Map(1 -> lose-02, 0 -> bitter),Map(b -> bitter, l -> lose-02))),[Ljava.lang.String;@359b551d,Annotation([Ljava.lang.String;@70afc06,[Ljava.lang.String;@5705a4fa,[Ljava.lang.String;@7b90d1),Annotation([Ljava.lang.String;@6f271e7e,[Ljava.lang.String;@3f1d3550,[Ledu.cmu.lti.nlp.amr.Dependency;@4545743d),Annotation([Ljava.lang.String;@1964895c,[Ljava.lang.String;@4ee7b0e0,[Ljava.lang.String;@1806bbd9),Annotation([Ljava.lang.String;@760cc078,[Ljava.lang.String;@4b1f998c,[Ledu.cmu.lti.nlp.amr.Entity;@380c50bf))
AMR:
(l / lose-02, ARG1, b / bitter)

Decoded in 51,082 microseconds
Sentence: How can we allow the Diaoyu Islands to fall to other countries

Oracle Span 1:  allow => allow-01
Oracle Span 2:  can => possible
Oracle Span 3:  countries => country
Oracle Span 4:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 5:  fall => fall-05
Oracle Span 6:  other => other
Oracle Span 7:  we => we
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 3-4:  allow => allow-01
Span 1-2:  can => possible
Span 11-12:  countries => country
Span 5-7:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Span 8-9:  fall => fall-01
Span 0-1:  How => thing
Span 10-11:  other => other

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 3-4:  allow => allow-01
Oracle Span 1-2:  can => possible
Oracle Span 11-12:  countries => country
Oracle Span 5-7:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 8-9:  fall => fall-05
Oracle Span 10-11:  other => other
Oracle Span 2-3:  we => we

Dependencies:
1	How	_	WRB	WRB	_	4	advmod	_	_
2	can	_	MD	MD	_	4	aux	_	_
3	we	_	PRP	PRP	_	4	nsubj	_	_
4	allow	_	VB	VB	_	0	root	_	_
5	the	_	DT	DT	_	7	det	_	_
6	Diaoyu	_	NNP	NNP	_	7	nn	_	_
7	Islands	_	NNPS	NNPS	_	4	dobj	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	fall	_	VB	VB	_	4	xcomp	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	other	_	JJ	JJ	_	12	amod	_	_
12	countries	_	NNS	NNS	_	10	pobj	_	_

Oracle:
(a / allow-01, ARG0, w / we)
(a / allow-01, ARG1, f / fall-05)
(c / country, mod, o / other)
(f / fall-05, ARG1, i / island)
(f / fall-05, ARG2, c / country)
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / possible, domain, a / allow-01)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),other,other,false), Span(11,12,List(1),countries,country,false), Span(5,7,List(5, 4, 3, 2),Diaoyu Islands,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(3,4,List(6),allow,allow-01,false), Span(1,2,List(7),can,possible,false), Span(0,1,List(8),How,thing,false), Span(8,9,List(9),fall,fall-01,false)),Map(2 -> island, 5 -> "Diaoyu", 8 -> thing, 7 -> possible, 1 -> country, 4 -> "Islands", 6 -> allow-01, 9 -> fall-01, 0 -> other, 3 -> name),Map(n -> name, t -> thing, p -> possible, a -> allow-01, i -> island, c -> country, f -> fall-01, o -> other))),[Ljava.lang.String;@6a933af5,Annotation([Ljava.lang.String;@679ac609,[Ljava.lang.String;@18627f,[Ljava.lang.String;@28bd6c64),Annotation([Ljava.lang.String;@5b8aaf14,[Ljava.lang.String;@6a1190e2,[Ledu.cmu.lti.nlp.amr.Dependency;@29591c45),Annotation([Ljava.lang.String;@6ac49b46,[Ljava.lang.String;@64b87b05,[Ljava.lang.String;@24861f0),Annotation([Ljava.lang.String;@6392eec8,[Ljava.lang.String;@2d425757,[Ledu.cmu.lti.nlp.amr.Entity;@a8571a9))
AMR:
(a / allow-01, ARG1, f / fall-01)
(f / fall-01, ARG0, i / island)
(f / fall-01, ARG1, c / country)
(f / fall-01, ARG2, o / other)
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / possible, domain, a / allow-01)
(p / possible, location, t / thing)

Decoded in 253,569 microseconds
Sentence: One hundred years of vicissitudes

Oracle Span 1:  vicissitudes => vicissitude
Oracle Span 2:  years => (temporal-quantity :unit year)
Spans:
Span 1-2:  hundred => hundred
Span 4-5:  vicissitudes => vicissitude
Span 2-3:  years => year

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  vicissitudes => vicissitude
Oracle Span 2-3:  years => (temporal-quantity :unit year)

Dependencies:
1	One	_	CD	CD	_	0	root	_	_
2	hundred	_	CD	CD	_	3	num	_	_
3	years	_	NNS	NNS	_	1	dep	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	vicissitudes	_	NNS	NNS	_	4	pobj	_	_

Oracle:
(t / temporal-quantity, unit, y / year)
(v / vicissitude, duration, t / temporal-quantity)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),hundred,hundred,false), Span(2,3,List(1),years,year,false), Span(4,5,List(2),vicissitudes,vicissitude,false)),Map(2 -> vicissitude, 1 -> year, 0 -> hundred),Map(h -> hundred, v -> vicissitude, y -> year))),[Ljava.lang.String;@73fddaa,Annotation([Ljava.lang.String;@19c3782f,[Ljava.lang.String;@2d183835,[Ljava.lang.String;@343096b8),Annotation([Ljava.lang.String;@4d9bdf19,[Ljava.lang.String;@4f1bc485,[Ledu.cmu.lti.nlp.amr.Dependency;@232e84c3),Annotation([Ljava.lang.String;@139b4348,[Ljava.lang.String;@eb2535,[Ljava.lang.String;@1145e641),Annotation([Ljava.lang.String;@469a7036,[Ljava.lang.String;@f52eaae,[Ledu.cmu.lti.nlp.amr.Entity;@5649b4fc))
AMR:
(v / vicissitude, quant, y / year)
(y / year, quant, h / hundred)

Decoded in 49,899 microseconds
Sentence: Smoke and clouds chase the flying waves

Oracle Span 1:  and => and
Oracle Span 2:  chase => chase-01
Oracle Span 3:  clouds => cloud
Oracle Span 4:  flying => fly-01
Oracle Span 5:  Smoke => smoke
Oracle Span 6:  waves => wave
Spans:
Span 1-2:  and => and
Span 3-4:  chase => chase-01
Span 2-3:  clouds => cloud
Span 5-6:  flying => fly-01
Span 0-1:  Smoke => person
Span 6-7:  waves => wave

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 3-4:  chase => chase-01
Oracle Span 2-3:  clouds => cloud
Oracle Span 5-6:  flying => fly-01
Oracle Span 0-1:  Smoke => smoke
Oracle Span 6-7:  waves => wave

Dependencies:
1	Smoke	_	VB	VB	_	0	root	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	clouds	_	VBZ	VBZ	_	1	conj	_	_
4	chase	_	VB	VB	_	3	ccomp	_	_
5	the	_	DT	DT	_	7	det	_	_
6	flying	_	VBG	VBG	_	7	amod	_	_
7	waves	_	NNS	NNS	_	4	dobj	_	_

Oracle:
(a / and, op, c2 / cloud)
(a / and, op, s / smoke)
(c / chase-01, ARG0, a / and)
(c / chase-01, ARG1, w / wave)
(f / fly-01, ARG1, w / wave)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),clouds,cloud,false), Span(5,6,List(1),flying,fly-01,false), Span(3,4,List(2),chase,chase-01,false), Span(0,1,List(3),Smoke,person,false), Span(6,7,List(4),waves,wave,false), Span(1,2,List(5),and,and,false)),Map(2 -> chase-01, 5 -> and, 1 -> fly-01, 4 -> wave, 0 -> cloud, 3 -> person),Map(w -> wave, p -> person, a -> and, c -> cloud, f -> fly-01, c2 -> chase-01))),[Ljava.lang.String;@7ea97bf2,Annotation([Ljava.lang.String;@461f19f6,[Ljava.lang.String;@779cd121,[Ljava.lang.String;@34bdc2a),Annotation([Ljava.lang.String;@3688415a,[Ljava.lang.String;@8e62ed4,[Ledu.cmu.lti.nlp.amr.Dependency;@19e2e330),Annotation([Ljava.lang.String;@4415c6aa,[Ljava.lang.String;@3063dde3,[Ljava.lang.String;@9cad5b5),Annotation([Ljava.lang.String;@73f5cdf,[Ljava.lang.String;@6df5fa04,[Ledu.cmu.lti.nlp.amr.Entity;@43d7be9c))
AMR:
(a / and, op, c / cloud)
(a / and, op, c2 / chase-01)
(a / and, op, p / person)
(c2 / chase-01, ARG1, w / wave)
(f / fly-01, ARG1, w / wave)

Decoded in 72,603 microseconds
Sentence: Youngest brother is still a tender youth

Oracle Span 1:  brother => brother
Oracle Span 2:  still => still
Oracle Span 3:  tender => tender
Oracle Span 4:  Youngest => (young :degree most)
Oracle Span 5:  youth => youth
Spans:
Span 1-2:  brother => brother
Span 3-4:  still => still
Span 5-6:  tender => tender-01
Span 6-7:  youth => youth

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 1-2:  brother => brother
Oracle Span 3-4:  still => still
Oracle Span 5-6:  tender => tender
Oracle Span 0-1:  Youngest => (young :degree most)
Oracle Span 6-7:  youth => youth

Dependencies:
1	Youngest	_	JJ	JJ	_	2	amod	_	_
2	brother	_	NN	NN	_	7	nsubj	_	_
3	is	_	VBZ	VBZ	_	7	cop	_	_
4	still	_	RB	RB	_	7	advmod	_	_
5	a	_	DT	DT	_	7	det	_	_
6	tender	_	NN	NN	_	7	nn	_	_
7	youth	_	NN	NN	_	0	root	_	_

Oracle:
(b / brother, mod, y2 / young)
(y / youth, domain, b / brother)
(y / youth, mod, t / tender)
(y / youth, time, s / still)
(y2 / young, degree, m / most)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),youth,youth,false), Span(1,2,List(1),brother,brother,false), Span(5,6,List(2),tender,tender-01,false), Span(3,4,List(3),still,still,false)),Map(2 -> tender-01, 1 -> brother, 0 -> youth, 3 -> still),Map(t -> tender-01, b -> brother, s -> still, y -> youth))),[Ljava.lang.String;@47b80f42,Annotation([Ljava.lang.String;@1dda1790,[Ljava.lang.String;@14ad8d9b,[Ljava.lang.String;@ac52f45),Annotation([Ljava.lang.String;@d80f340,[Ljava.lang.String;@402b13f7,[Ledu.cmu.lti.nlp.amr.Dependency;@38928f3c),Annotation([Ljava.lang.String;@1b0e306c,[Ljava.lang.String;@119edabe,[Ljava.lang.String;@932d7d1),Annotation([Ljava.lang.String;@257542a4,[Ljava.lang.String;@4f929b36,[Ledu.cmu.lti.nlp.amr.Entity;@28bef350))
AMR:
(t / tender-01, ARG0, b / brother)
(t / tender-01, ARG1, y / youth)
(t / tender-01, ARG6, s / still)

Decoded in 90,697 microseconds
Sentence: Wandering in all directions, bearing a seal

Oracle Span 1:  all => all
Oracle Span 2:  bearing => bear-01
Oracle Span 3:  directions => direction
Oracle Span 4:  seal => seal
Oracle Span 5:  Wandering => wander-01
Spans:
Span 7-8:   => seal
Span 5-6:  a => bear-01
Span 2-3:  all => all
Span 3-4:  directions, => direction
Span 0-1:  Wandering => wander-01

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 2-3:  all => all
Oracle Span 5-6:  bearing => bear-01
Oracle Span 3-4:  directions => direction
Oracle Span 7-8:  seal => seal
Oracle Span 0-1:  Wandering => wander-01

Dependencies:
1	Wandering	_	VBG	VBG	_	0	root	_	_
2	in	_	IN	IN	_	1	prep	_	_
3	all	_	DT	DT	_	4	det	_	_
4	directions	_	NNS	NNS	_	2	pobj	_	_
5	,	_	,	,	_	1	punct	_	_
6	bearing	_	VBG	VBG	_	1	dep	_	_
7	a	_	DT	DT	_	8	det	_	_
8	seal	_	NN	NN	_	6	dobj	_	_

Oracle:
(b / bear-01, ARG1, s / seal)
(d / direction, quant, a2 / all)
(w / wander-01, ARG1, d / direction)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),a,bear-01,false), Span(3,4,List(1),directions,,direction,false), Span(7,8,List(2),,seal,false), Span(2,3,List(3),all,all,false), Span(0,1,List(4),Wandering,wander-01,false)),Map(2 -> seal, 1 -> direction, 4 -> wander-01, 0 -> bear-01, 3 -> all),Map(w -> wander-01, b -> bear-01, s -> seal, d -> direction, a -> all))),[Ljava.lang.String;@2c6a2f98,Annotation([Ljava.lang.String;@50127cb4,[Ljava.lang.String;@bed4447,[Ljava.lang.String;@22938b66),Annotation([Ljava.lang.String;@5ff87643,[Ljava.lang.String;@1ccc56d4,[Ledu.cmu.lti.nlp.amr.Dependency;@7de2f676),Annotation([Ljava.lang.String;@43948a17,[Ljava.lang.String;@5f42b648,[Ljava.lang.String;@21c63182),Annotation([Ljava.lang.String;@4bfd328a,[Ljava.lang.String;@2c5eddd0,[Ledu.cmu.lti.nlp.amr.Entity;@66e4cee5))
AMR:
(b / bear-01, ARG1, s / seal)
(d / direction, name, s / seal)
(d / direction, quant, a / all)
(w / wander-01, ARG1, d / direction)

Decoded in 184,398 microseconds
Sentence: Looking over to the flag

Oracle Span 1:  flag => flag
Oracle Span 2:  Looking => look-06
Spans:
Span 4-5:  flag => flag
Span 0-1:  Looking => look-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  flag => flag
Oracle Span 0-1:  Looking => look-06

Dependencies:
1	Looking	_	VBG	VBG	_	0	root	_	_
2	over	_	RP	RP	_	1	prt	_	_
3	to	_	TO	TO	_	1	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	flag	_	NN	NN	_	3	pobj	_	_

Oracle:
(l / look-06, ARG1, f / flag)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),flag,flag,false), Span(0,1,List(1),Looking,look-01,false)),Map(1 -> look-01, 0 -> flag),Map(l -> look-01, f -> flag))),[Ljava.lang.String;@4929ff6c,Annotation([Ljava.lang.String;@5edbf387,[Ljava.lang.String;@11c75195,[Ljava.lang.String;@47ad62cc),Annotation([Ljava.lang.String;@41f937ca,[Ljava.lang.String;@40bfb3b9,[Ledu.cmu.lti.nlp.amr.Dependency;@6b5f09c2),Annotation([Ljava.lang.String;@4748ad67,[Ljava.lang.String;@4f878523,[Ljava.lang.String;@7218c511),Annotation([Ljava.lang.String;@611ac389,[Ljava.lang.String;@633b7958,[Ledu.cmu.lti.nlp.amr.Entity;@10664681))
AMR:
(l / look-01, ARG1, f / flag)

Decoded in 40,832 microseconds
Sentence: Brandish our weapons and cross to the east

Oracle Span 1:  and => and
Oracle Span 2:  Brandish => brandish-01
Oracle Span 3:  cross => cross-02
Oracle Span 4:  east => east
Oracle Span 5:  weapons => weapon
NER Entity: (thing :name (name :op "Brandish"))
Spans:
Span 3-4:  and => and
Span 0-1:  Brandish => brandish-01
Span 4-5:  cross => cross-01
Span 7-8:  east => east
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  and => and
Oracle Span 0-1:  Brandish => brandish-01
Oracle Span 4-5:  cross => cross-02
Oracle Span 7-8:  east => east
Oracle Span 2-3:  weapons => weapon

Dependencies:
1	Brandish	_	VB	VB	_	0	root	_	_
2	our	_	PRP$	PRP$	_	3	poss	_	_
3	weapons	_	NNS	NNS	_	1	dobj	_	_
4	and	_	CC	CC	_	1	cc	_	_
5	cross	_	VB	VB	_	1	conj	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	east	_	JJ	JJ	_	6	pobj	_	_

Oracle:
(a / and, op, b / brandish-01)
(a / and, op, c / cross-02)
(b / brandish-01, ARG1, w / weapon)
(c / cross-02, direction, e / east)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),and,and,false), Span(0,1,List(1),Brandish,brandish-01,false), Span(4,5,List(2),cross,cross-01,false), Span(2,3,List(3),weapons,weapon,false), Span(7,8,List(4),east,east,false)),Map(2 -> cross-01, 1 -> brandish-01, 4 -> east, 0 -> and, 3 -> weapon),Map(e -> east, w -> weapon, b -> brandish-01, a -> and, c -> cross-01))),[Ljava.lang.String;@60668451,Annotation([Ljava.lang.String;@7db17c84,[Ljava.lang.String;@31ed9435,[Ljava.lang.String;@5de6ff8e),Annotation([Ljava.lang.String;@9f6ac6f,[Ljava.lang.String;@7fd5b489,[Ledu.cmu.lti.nlp.amr.Dependency;@22c4db7a),Annotation([Ljava.lang.String;@48345a23,[Ljava.lang.String;@749d129e,[Ljava.lang.String;@26be9178),Annotation([Ljava.lang.String;@222581de,[Ljava.lang.String;@482a32fb,[Ledu.cmu.lti.nlp.amr.Entity;@54bfd082))
AMR:
(a / and, op, b / brandish-01)
(a / and, op, c / cross-01)
(b / brandish-01, ARG1, w / weapon)
(c / cross-01, ARG1, e / east)

Decoded in 83,040 microseconds
Sentence: Let the horses drink from the Pacific Ocean

Oracle Span 1:  drink => drink-01
Oracle Span 2:  horses => horse
Oracle Span 3:  Let => let-01
Oracle Span 4:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))
NER Entity: (country :name (name :op "Pacific" :op "Ocean"))
Spans:
Span 3-4:  drink => drink-01
Span 2-3:  horses => horse
Span 0-1:  Let => let-01
Span 6-8:  Pacific Ocean => (ocean :name (name :op "Pacific" :op "Ocean"))

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 3-4:  drink => drink-01
Oracle Span 2-3:  horses => horse
Oracle Span 0-1:  Let => let-01
Oracle Span 6-8:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))

Dependencies:
1	Let	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	4	det	_	_
3	horses	_	NNS	NNS	_	4	nn	_	_
4	drink	_	NN	NN	_	1	dobj	_	_
5	from	_	IN	IN	_	1	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Pacific	_	NNP	NNP	_	8	nn	_	_
8	Ocean	_	NNP	NNP	_	5	pobj	_	_

Oracle:
(d / drink-01, ARG0, h / horse)
(d / drink-01, ARG2, o / ocean)
(l / let-01, ARG1, d / drink-01)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),horses,horse,false), Span(3,4,List(1),drink,drink-01,false), Span(6,8,List(5, 4, 3, 2),Pacific Ocean,(ocean :name (name :op "Pacific" :op "Ocean")),false), Span(0,1,List(6),Let,let-01,false)),Map(2 -> ocean, 5 -> "Ocean", 1 -> drink-01, 4 -> "Pacific", 6 -> let-01, 0 -> horse, 3 -> name),Map(n -> name, h -> horse, d -> drink-01, l -> let-01, o -> ocean))),[Ljava.lang.String;@753cc1c8,Annotation([Ljava.lang.String;@7ff5ca84,[Ljava.lang.String;@7fba5dae,[Ljava.lang.String;@173ca64c),Annotation([Ljava.lang.String;@49d17e2,[Ljava.lang.String;@55ed4c1f,[Ledu.cmu.lti.nlp.amr.Dependency;@78173c21),Annotation([Ljava.lang.String;@aebeba9,[Ljava.lang.String;@66a5cf11,[Ljava.lang.String;@5917fa6e),Annotation([Ljava.lang.String;@18a03359,[Ljava.lang.String;@4d432547,[Ledu.cmu.lti.nlp.amr.Entity;@5d6b6b9))
AMR:
(d / drink-01, ARG0, o / ocean)
(d / drink-01, ARG1, h / horse)
(l / let-01, ARG1, d / drink-01)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)

Decoded in 224,498 microseconds
Sentence: June, 26th, 2002

Oracle Span 1:  2002 => 2002
Oracle Span 2:  June => 6
Spans:
Span 4-5:   => (date-entity :year 2002)
Span 0-1:  June, => (date-entity :month 6)
Span 0-3:  June, 26th, 2002 => (ordinal-entity :value 29.0)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  2002 => 2002
Oracle Span 0-1:  June => 6

Dependencies:
1	June	_	NNP	NNP	_	3	nn	_	_
2	,	_	,	,	_	3	punct	_	_
3	26th	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	2002	_	CD	CD	_	3	amod	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(0,3,List(1, 0),June, 26th, 2002,(ordinal-entity :value 29.0),false), Span(0,1,List(3, 2),June,,(date-entity :month 6),false), Span(4,5,List(5, 4),,(date-entity :year 2002),false)),Map(2 -> date-entity, 5 -> 2002, 1 -> 29.0, 4 -> date-entity, 0 -> ordinal-entity, 3 -> 6),Map(2 -> 29.0, d -> date-entity, d2 -> date-entity, 6 -> 6, 22 -> 2002, o -> ordinal-entity))),[Ljava.lang.String;@4978a0e0,Annotation([Ljava.lang.String;@2ab40114,[Ljava.lang.String;@4f8268ea,[Ljava.lang.String;@2b99c35d),Annotation([Ljava.lang.String;@27ea096e,[Ljava.lang.String;@2ddc0026,[Ledu.cmu.lti.nlp.amr.Dependency;@71c5f84f),Annotation([Ljava.lang.String;@14234e01,[Ljava.lang.String;@63758492,[Ljava.lang.String;@2e6565ea),Annotation([Ljava.lang.String;@70bcf7e9,[Ljava.lang.String;@7e61ecb9,[Ledu.cmu.lti.nlp.amr.Entity;@31ffb6f3))
AMR:
(d / date-entity, calendar, d2 / date-entity)
(d / date-entity, month, 6 / 6)
(d2 / date-entity, calendar, o / ordinal-entity)
(d2 / date-entity, year, 22 / 2002)
(o / ordinal-entity, value, 2 / 29.0)

Decoded in 63,013 microseconds
Sentence: Other articles: "A book for Taiwan compatriots-I have a dream", "The necessity for building memorials museums or temples for Chinese national heroes", "How long will we tolerate it", "China is expecting the Olympics, but would never beg for the Olympics", "If we forget the hardship of history, there will be more history of hardship", "I am Chinese", "There is only one Chinese nation, there is only one Chinese culture", "With the over-development of sports, the state may decline", "'Wealthy country, strong people' or 'wealthy officials, poor people"?", "Disgusting Ren Zhiqiang, shut your filthy mouth", "Hateful housing prices! Pitiable people!", "Google, you have no right to make irresponsible remarks to China", "How long will we tolerate the US", "Japan deserved the bombing-strongly oppose Ban Ki-moon presenting a bouquet in Hiroshima", "Be strong, my brothers and sisters", "Do we need low-level entertainment stars, or talents in technological innovation?", "Contemporary garbage writer, shameless Li Yinhe, please let the children off the hook"

Oracle Span 1:  and => and
Oracle Span 2:  articles => article
Oracle Span 3:  Ban Ki - moon => (person :name (name :op "Ki-Moon" :op "Ban"))
Oracle Span 4:  beg => beg-01
Oracle Span 5:  bombing => bomb-01
Oracle Span 6:  book => book
Oracle Span 7:  bouquet => bouquet
Oracle Span 8:  brothers => brother
Oracle Span 9:  building => build-01
Oracle Span 10:  children => child
Oracle Span 11:  China => (country :name (name :op "China"))
Oracle Span 12:  compatriots => compatriot
Oracle Span 13:  Contemporary => contemporary
Oracle Span 14:  country => country
Oracle Span 15:  culture => culture
Oracle Span 16:  decline => decline-01
Oracle Span 17:  deserved => deserve-01
Oracle Span 18:  Disgusting => disgust-01
Oracle Span 19:  dream => (thing :ARG1-of dream-01)
Oracle Span 20:  entertainment => entertain-01
Oracle Span 21:  expecting => expect-01
Oracle Span 22:  filthy => filthy
Oracle Span 23:  forget => forget-01
Oracle Span 24:  garbage => garbage
Oracle Span 25:  Google => (company :name (name :op "Google"))
Oracle Span 26:  hardship => hardship
Oracle Span 27:  hardship => hardship
Oracle Span 28:  Hateful => hateful
Oracle Span 29:  have => have-03
Oracle Span 30:  have => have-condition-91
Oracle Span 31:  heroes => hero
Oracle Span 32:  Hiroshima => (city :name (name :op "Hiroshima"))
Oracle Span 33:  history => history
Oracle Span 34:  history => history
Oracle Span 35:  hook => (thing :ARG2-of hook-01)
Oracle Span 36:  housing => housing
Oracle Span 37:  I => i
Oracle Span 38:  I => (person :domain i)
Oracle Span 39:  innovation => innovate-01
Oracle Span 40:  it => it
Oracle Span 41:  Japan => (name :op "Japan")
Oracle Span 42:  let => let-00
Oracle Span 43:  level => level
Oracle Span 44:  Li Yinhe => (person :name (name :op "Yinhe" :op "Li"))
Oracle Span 45:  low => low
Oracle Span 46:  may => possible
Oracle Span 47:  memorials => memorial
Oracle Span 48:  more => more
Oracle Span 49:  mouth => mouth
Oracle Span 50:  museums => museum
Oracle Span 51:  nation => nation
Oracle Span 52:  national => nation
Oracle Span 53:  need => need-01
Oracle Span 54:  no => -
Oracle Span 55:  off => off
Oracle Span 56:  officials => official
Oracle Span 57:  Olympics => (game :name (name :op "Olympics"))
Oracle Span 58:  one => 1
Oracle Span 59:  one => 1
Oracle Span 60:  only => only
Oracle Span 61:  oppose => oppose-01
Oracle Span 62:  or => or
Oracle Span 63:  or => or
Oracle Span 64:  or => or
Oracle Span 65:  Other => other
Oracle Span 66:  over => overdevelop-00
Oracle Span 67:  poor => (person :mod poor)
Oracle Span 68:  presenting => present-01
Oracle Span 69:  prices => price-01
Oracle Span 70:  remarks => (thing :ARG1-of remark-01)
Oracle Span 71:  Ren Zhiqiang => (person :name (name :op "Zhiqiang" :op "Ren"))
Oracle Span 72:  shameless => shame-01
Oracle Span 73:  shut => shut-01
Oracle Span 74:  sisters => sister
Oracle Span 75:  sports => sport
Oracle Span 76:  stars => star
Oracle Span 77:  state => state
Oracle Span 78:  strong => strong
Oracle Span 79:  strong => strong
Oracle Span 80:  strongly => (person :mod strong)
Oracle Span 81:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 82:  talents => talent
Oracle Span 83:  technological => technology
Oracle Span 84:  temples => temple
Oracle Span 85:  tolerate => tolerate-01
Oracle Span 86:  tolerate => tolerate-01
Oracle Span 87:  US => (country :name (name :op "US"))
Oracle Span 88:  we => we
Oracle Span 89:  we => we
Oracle Span 90:  we => we
Oracle Span 91:  we => we
Oracle Span 92:  Wealthy => wealthy
Oracle Span 93:  writer => write-01
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Hiroshima"))
NER Entity: (organization :name (name :op "Google"))
NER Entity: (person :name (name :op "Ren" :op "Zhiqiang"))
NER Entity: (thing :name (name :op "Olympics"))
NER Entity: (person :name (name :op "Li" :op "Yinhe"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 189-190:   => strong
Span 208-209:   => technology
Span 205-206:   => or
Span 216-217:   => (person :ARG0-of write-01)
Span 180-181:   => present-01
Span 215-216:   => garbage
Span 187-188:   => (person :ARG0-of have-org-role-91)
Span 222-223:   => please-01
Span 225-226:   => child
Span 209-210:   => innovate-01
Span 192-193:   => brother
Span 223-224:   => let-01
Span 226-227:   => off
Span 203-204:   => star
Span 201-202:   => low
Span 219-221:   => (person :name (name :op "Li" :op "Yinhe"))
Span 174-175:   => deserve-01
Span 193-194:   => and
Span 194-195:   => sister
Span 169-170:   => (country :name (name :op "US"))
Span 228-229:   => honk-01
Span 173-174:   => (country :name (name :op "Japan"))
Span 167-168:   => tolerate-01
Span 179-180:   => "Ki-moon"
Span 200-201:   => need-01
Span 178-179:   => (person :name (name :op "Ban"))
Span 177-178:   => government-organization
Span 159-160:   => (country :name (name :op "China"))
Span 164-165:   => long
Span 99-100:  "Google, => sport
Span 22-23:  "How => temple
Span 110-111:  "How => country
Span 117-118:  "Japan => wealth
Span 57-58:  "There => forget-01
Span 69-70:  "With => hardship
Span 83-84:  'wealthy => (country :name (name :op "China"))
Span 133-134:  and => filthy
Span 1-2:  articles: => article
Span 120-121:  bombing-strongly => poor
Span 155-156:  children => make-01
Span 109-110:  China", => wealth
Span 19-20:  Chinese => city
Span 61-62:  Chinese => history
Span 67-68:  Chinese => history
Span 118-119:  deserved => (person :ARG0-of (have-org-role-91 :ARG2 official))
Span 9-10:  dream", => have-03
Span 139-140:  entertainment => house
Span 18-19:  for => build-01
Span 7-8:  have => (country :name (name :op "Taiwan"))
Span 21-22:  heroes", => or
Span 128-130:  Hiroshima", "Be => (person :name (name :op "Ren" :op "Zhiqiang"))
Span 51-52:  history => (game :name (name :op "Olympics"))
Span 111-112:  long => and
Span 131-132:  my => shut-01
Span 20-21:  national => museum
Span 11-12:  necessity => dream
Span 102-103:  no => state
Span 45-46:  of => bunt-01
Span 84-85:  officials, => nation
Span 39-40:  Olympics", => (country :name (name :op "China"))
Span 66-67:  one => more
Span 59-60:  only => harass-01
Span 16-17:  or => necessitate-01
Span 0-1:  Other => 1
Span 0-1:  Other => other
Span 81-82:  people' => only
Span 88-89:  Ren => only
Span 90-91:  shut => (country :name (name :op "China"))
Span 134-135:  sisters", => mouth
Span 140-141:  stars, => (thing :ARG2-of price-01)
Span 5-6:  Taiwan => book
Span 43-44:  the => (game :name (name :op "Olympics"))
Span 115-116:  the => or
Span 157-158:  the => remark-01
Span 31-32:  the => long
Span 104-105:  to => decline-01
Span 26-27:  tolerate => hero
Span 41-42:  we => expect-01
Span 25-26:  we => nation
Span 48-49:  will => beg-01
Span 112-113:  will => strong
Span 34-35:  would => tolerate-01
Span 148-149:  writer, => (company :name (name :op "Google"))
Span 151-152:  Yinhe, => have-03
Span 91-92:  your => culture

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 125
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 126
 *** WARNING: The dependency tree seems broken.  I can't find the head of Disgusting in position 127
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ren in position 128
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zhiqiang in position 129
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 130
 *** WARNING: The dependency tree seems broken.  I can't find the head of shut in position 131
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 132
 *** WARNING: The dependency tree seems broken.  I can't find the head of filthy in position 133
 *** WARNING: The dependency tree seems broken.  I can't find the head of mouth in position 134
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 135
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 136
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 137
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hateful in position 138
 *** WARNING: The dependency tree seems broken.  I can't find the head of housing in position 139
 *** WARNING: The dependency tree seems broken.  I can't find the head of prices in position 140
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 141
 *** WARNING: The dependency tree seems broken.  I can't find the head of Pitiable in position 142
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 143
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 144
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 145
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 146
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 147
 *** WARNING: The dependency tree seems broken.  I can't find the head of Google in position 148
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 149
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 150
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 151
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 152
 *** WARNING: The dependency tree seems broken.  I can't find the head of right in position 153
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 154
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 155
 *** WARNING: The dependency tree seems broken.  I can't find the head of irresponsible in position 156
 *** WARNING: The dependency tree seems broken.  I can't find the head of remarks in position 157
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 158
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 159
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 160
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 161
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 162
 *** WARNING: The dependency tree seems broken.  I can't find the head of How in position 163
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 164
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 165
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 166
 *** WARNING: The dependency tree seems broken.  I can't find the head of tolerate in position 167
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 168
 *** WARNING: The dependency tree seems broken.  I can't find the head of US in position 169
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 170
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 171
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 172
 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 173
 *** WARNING: The dependency tree seems broken.  I can't find the head of deserved in position 174
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 175
 *** WARNING: The dependency tree seems broken.  I can't find the head of bombing-strongly in position 176
 *** WARNING: The dependency tree seems broken.  I can't find the head of oppose in position 177
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ban in position 178
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ki-moon in position 179
 *** WARNING: The dependency tree seems broken.  I can't find the head of presenting in position 180
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 181
 *** WARNING: The dependency tree seems broken.  I can't find the head of bouquet in position 182
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 183
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hiroshima in position 184
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 185
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 186
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 187
 *** WARNING: The dependency tree seems broken.  I can't find the head of Be in position 188
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 189
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 190
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 191
 *** WARNING: The dependency tree seems broken.  I can't find the head of brothers in position 192
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 193
 *** WARNING: The dependency tree seems broken.  I can't find the head of sisters in position 194
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 195
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 196
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 197
 *** WARNING: The dependency tree seems broken.  I can't find the head of Do in position 198
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 199
 *** WARNING: The dependency tree seems broken.  I can't find the head of need in position 200
 *** WARNING: The dependency tree seems broken.  I can't find the head of low-level in position 201
 *** WARNING: The dependency tree seems broken.  I can't find the head of entertainment in position 202
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 203
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 204
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 205
 *** WARNING: The dependency tree seems broken.  I can't find the head of talents in position 206
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 207
 *** WARNING: The dependency tree seems broken.  I can't find the head of technological in position 208
 *** WARNING: The dependency tree seems broken.  I can't find the head of innovation in position 209
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 210
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 211
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 212
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 213
 *** WARNING: The dependency tree seems broken.  I can't find the head of Contemporary in position 214
 *** WARNING: The dependency tree seems broken.  I can't find the head of garbage in position 215
 *** WARNING: The dependency tree seems broken.  I can't find the head of writer in position 216
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 217
 *** WARNING: The dependency tree seems broken.  I can't find the head of shameless in position 218
 *** WARNING: The dependency tree seems broken.  I can't find the head of Li in position 219
 *** WARNING: The dependency tree seems broken.  I can't find the head of Yinhe in position 220
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 221
 *** WARNING: The dependency tree seems broken.  I can't find the head of please in position 222
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 223
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 224
 *** WARNING: The dependency tree seems broken.  I can't find the head of children in position 225
 *** WARNING: The dependency tree seems broken.  I can't find the head of off in position 226
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 227
 *** WARNING: The dependency tree seems broken.  I can't find the head of hook in position 228
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 229
Langrangian relaxation converged after 42 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 125
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 126
 *** WARNING: The dependency tree seems broken.  I can't find the head of Disgusting in position 127
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ren in position 128
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zhiqiang in position 129
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 130
 *** WARNING: The dependency tree seems broken.  I can't find the head of shut in position 131
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 132
 *** WARNING: The dependency tree seems broken.  I can't find the head of filthy in position 133
 *** WARNING: The dependency tree seems broken.  I can't find the head of mouth in position 134
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 135
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 136
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 137
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hateful in position 138
 *** WARNING: The dependency tree seems broken.  I can't find the head of housing in position 139
 *** WARNING: The dependency tree seems broken.  I can't find the head of prices in position 140
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 141
 *** WARNING: The dependency tree seems broken.  I can't find the head of Pitiable in position 142
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 143
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 144
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 145
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 146
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 147
 *** WARNING: The dependency tree seems broken.  I can't find the head of Google in position 148
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 149
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 150
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 151
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 152
 *** WARNING: The dependency tree seems broken.  I can't find the head of right in position 153
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 154
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 155
 *** WARNING: The dependency tree seems broken.  I can't find the head of irresponsible in position 156
 *** WARNING: The dependency tree seems broken.  I can't find the head of remarks in position 157
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 158
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 159
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 160
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 161
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 162
 *** WARNING: The dependency tree seems broken.  I can't find the head of How in position 163
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 164
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 165
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 166
 *** WARNING: The dependency tree seems broken.  I can't find the head of tolerate in position 167
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 168
 *** WARNING: The dependency tree seems broken.  I can't find the head of US in position 169
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 170
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 171
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 172
 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 173
 *** WARNING: The dependency tree seems broken.  I can't find the head of deserved in position 174
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 175
 *** WARNING: The dependency tree seems broken.  I can't find the head of bombing-strongly in position 176
 *** WARNING: The dependency tree seems broken.  I can't find the head of oppose in position 177
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ban in position 178
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ki-moon in position 179
 *** WARNING: The dependency tree seems broken.  I can't find the head of presenting in position 180
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 181
 *** WARNING: The dependency tree seems broken.  I can't find the head of bouquet in position 182
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 183
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hiroshima in position 184
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 185
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 186
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 187
 *** WARNING: The dependency tree seems broken.  I can't find the head of Be in position 188
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 189
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 190
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 191
 *** WARNING: The dependency tree seems broken.  I can't find the head of brothers in position 192
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 193
 *** WARNING: The dependency tree seems broken.  I can't find the head of sisters in position 194
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 195
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 196
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 197
 *** WARNING: The dependency tree seems broken.  I can't find the head of Do in position 198
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 199
 *** WARNING: The dependency tree seems broken.  I can't find the head of need in position 200
 *** WARNING: The dependency tree seems broken.  I can't find the head of low-level in position 201
 *** WARNING: The dependency tree seems broken.  I can't find the head of entertainment in position 202
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 203
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 204
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 205
 *** WARNING: The dependency tree seems broken.  I can't find the head of talents in position 206
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 207
 *** WARNING: The dependency tree seems broken.  I can't find the head of technological in position 208
 *** WARNING: The dependency tree seems broken.  I can't find the head of innovation in position 209
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 210
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 211
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 212
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 213
 *** WARNING: The dependency tree seems broken.  I can't find the head of Contemporary in position 214
 *** WARNING: The dependency tree seems broken.  I can't find the head of garbage in position 215
 *** WARNING: The dependency tree seems broken.  I can't find the head of writer in position 216
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 217
 *** WARNING: The dependency tree seems broken.  I can't find the head of shameless in position 218
 *** WARNING: The dependency tree seems broken.  I can't find the head of Li in position 219
 *** WARNING: The dependency tree seems broken.  I can't find the head of Yinhe in position 220
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 221
 *** WARNING: The dependency tree seems broken.  I can't find the head of please in position 222
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 223
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 224
 *** WARNING: The dependency tree seems broken.  I can't find the head of children in position 225
 *** WARNING: The dependency tree seems broken.  I can't find the head of off in position 226
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 227
 *** WARNING: The dependency tree seems broken.  I can't find the head of hook in position 228
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 229
Oracle Span 201-202:  and => and
Oracle Span 1-2:  articles => article
Oracle Span 184-188:  Ban Ki - moon => (person :name (name :op "Ki-Moon" :op "Ban"))
Oracle Span 50-51:  beg => beg-01
Oracle Span 180-181:  bombing => bomb-01
Oracle Span 5-6:  book => book
Oracle Span 190-191:  bouquet => bouquet
Oracle Span 200-201:  brothers => brother
Oracle Span 20-21:  building => build-01
Oracle Span 235-236:  children => child
Oracle Span 41-42:  China => (country :name (name :op "China"))
Oracle Span 8-9:  compatriots => compatriot
Oracle Span 224-225:  Contemporary => contemporary
Oracle Span 114-115:  country => country
Oracle Span 93-94:  culture => culture
Oracle Span 108-109:  decline => decline-01
Oracle Span 178-179:  deserved => deserve-01
Oracle Span 131-132:  Disgusting => disgust-01
Oracle Span 13-14:  dream => (thing :ARG1-of dream-01)
Oracle Span 212-213:  entertainment => entertain-01
Oracle Span 43-44:  expecting => expect-01
Oracle Span 137-138:  filthy => filthy
Oracle Span 59-60:  forget => forget-01
Oracle Span 225-226:  garbage => garbage
Oracle Span 152-153:  Google => (company :name (name :op "Google"))
Oracle Span 61-62:  hardship => hardship
Oracle Span 71-72:  hardship => hardship
Oracle Span 142-143:  Hateful => hateful
Oracle Span 11-12:  have => have-03
Oracle Span 155-156:  have => have-condition-91
Oracle Span 28-29:  heroes => hero
Oracle Span 192-193:  Hiroshima => (city :name (name :op "Hiroshima"))
Oracle Span 63-64:  history => history
Oracle Span 69-70:  history => history
Oracle Span 238-239:  hook => (thing :ARG2-of hook-01)
Oracle Span 143-144:  housing => housing
Oracle Span 10-11:  I => i
Oracle Span 75-76:  I => (person :domain i)
Oracle Span 219-220:  innovation => innovate-01
Oracle Span 37-38:  it => it
Oracle Span 177-178:  Japan => (name :op "Japan")
Oracle Span 233-234:  let => let-00
Oracle Span 211-212:  level => level
Oracle Span 229-231:  Li Yinhe => (person :name (name :op "Yinhe" :op "Li"))
Oracle Span 209-210:  low => low
Oracle Span 107-108:  may => possible
Oracle Span 21-22:  memorials => memorial
Oracle Span 68-69:  more => more
Oracle Span 138-139:  mouth => mouth
Oracle Span 22-23:  museums => museum
Oracle Span 86-87:  nation => nation
Oracle Span 27-28:  national => nation
Oracle Span 208-209:  need => need-01
Oracle Span 156-157:  no => -
Oracle Span 236-237:  off => off
Oracle Span 122-123:  officials => official
Oracle Span 45-46:  Olympics => (game :name (name :op "Olympics"))
Oracle Span 84-85:  one => 1
Oracle Span 91-92:  one => 1
Oracle Span 83-84:  only => only
Oracle Span 183-184:  oppose => oppose-01
Oracle Span 23-24:  or => or
Oracle Span 119-120:  or => or
Oracle Span 215-216:  or => or
Oracle Span 0-1:  Other => other
Oracle Span 99-100:  over => overdevelop-00
Oracle Span 124-125:  poor => (person :mod poor)
Oracle Span 188-189:  presenting => present-01
Oracle Span 144-145:  prices => price-01
Oracle Span 161-162:  remarks => (thing :ARG1-of remark-01)
Oracle Span 132-134:  Ren Zhiqiang => (person :name (name :op "Zhiqiang" :op "Ren"))
Oracle Span 228-229:  shameless => shame-01
Oracle Span 135-136:  shut => shut-01
Oracle Span 202-203:  sisters => sister
Oracle Span 103-104:  sports => sport
Oracle Span 213-214:  stars => star
Oracle Span 106-107:  state => state
Oracle Span 116-117:  strong => strong
Oracle Span 197-198:  strong => strong
Oracle Span 182-183:  strongly => (person :mod strong)
Oracle Span 7-8:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 216-217:  talents => talent
Oracle Span 218-219:  technological => technology
Oracle Span 24-25:  temples => temple
Oracle Span 36-37:  tolerate => tolerate-01
Oracle Span 171-172:  tolerate => tolerate-01
Oracle Span 173-174:  US => (country :name (name :op "US"))
Oracle Span 35-36:  we => we
Oracle Span 58-59:  we => we
Oracle Span 170-171:  we => we
Oracle Span 207-208:  we => we
Oracle Span 113-114:  Wealthy => wealthy
Oracle Span 226-227:  writer => write-01

Dependencies:
1	Other	_	JJ	JJ	_	2	amod	_	_
2	articles	_	NNS	NNS	_	0	root	_	_
3	:	_	:	:	_	2	punct	_	_
4	"	_	``	``	_	2	punct	_	_
5	A	_	DT	DT	_	6	det	_	_
6	book	_	NN	NN	_	10	nsubj	_	_
7	for	_	IN	IN	_	6	prep	_	_
8	Taiwan	_	NNP	NNP	_	9	nn	_	_
9	compatriots-I	_	NNP	NNP	_	7	pobj	_	_
10	have	_	VBP	VBP	_	2	dep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	dream	_	NN	NN	_	10	dobj	_	_
13	"	_	''	''	_	12	punct	_	_
14	,	_	,	,	_	10	punct	_	_
15	"	_	``	``	_	17	punct	_	_
16	The	_	DT	DT	_	17	det	_	_
17	necessity	_	NN	NN	_	10	dobj	_	_
18	for	_	IN	IN	_	42	prep	_	_
19	building	_	VBG	VBG	_	18	pcomp	_	_
20	memorials	_	JJ	JJ	_	21	amod	_	_
21	museums	_	NNS	NNS	_	19	dobj	_	_
22	or	_	CC	CC	_	21	cc	_	_
23	temples	_	NNS	NNS	_	21	conj	_	_
24	for	_	IN	IN	_	21	prep	_	_
25	Chinese	_	JJ	JJ	_	27	amod	_	_
26	national	_	JJ	JJ	_	27	amod	_	_
27	heroes	_	NNS	NNS	_	24	pobj	_	_
28	"	_	''	''	_	21	punct	_	_
29	,	_	,	,	_	19	punct	_	_
30	"	_	``	``	_	19	punct	_	_
31	How	_	WRB	WRB	_	32	advmod	_	_
32	long	_	JJ	JJ	_	35	dep	_	_
33	will	_	MD	MD	_	35	aux	_	_
34	we	_	PRP	PRP	_	35	nsubj	_	_
35	tolerate	_	VB	VB	_	19	ccomp	_	_
36	it	_	PRP	PRP	_	35	dobj	_	_
37	"	_	''	''	_	19	punct	_	_
38	,	_	,	,	_	42	punct	_	_
39	"	_	``	``	_	42	punct	_	_
40	China	_	NNP	NNP	_	42	nsubj	_	_
41	is	_	VBZ	VBZ	_	42	aux	_	_
42	expecting	_	VBG	VBG	_	17	rcmod	_	_
43	the	_	DT	DT	_	44	det	_	_
44	Olympics	_	NNPS	NNPS	_	42	dobj	_	_
45	,	_	,	,	_	42	punct	_	_
46	but	_	CC	CC	_	42	cc	_	_
47	would	_	MD	MD	_	49	aux	_	_
48	never	_	RB	RB	_	49	neg	_	_
49	beg	_	VB	VB	_	42	conj	_	_
50	for	_	IN	IN	_	49	prep	_	_
51	the	_	DT	DT	_	52	det	_	_
52	Olympics	_	NNPS	NNPS	_	50	pobj	_	_
53	"	_	''	''	_	49	punct	_	_
54	,	_	,	,	_	42	punct	_	_
55	"	_	``	``	_	68	punct	_	_
56	If	_	IN	IN	_	58	mark	_	_
57	we	_	PRP	PRP	_	58	nsubj	_	_
58	forget	_	VB	VB	_	68	advcl	_	_
59	the	_	DT	DT	_	60	det	_	_
60	hardship	_	NN	NN	_	58	dobj	_	_
61	of	_	IN	IN	_	60	prep	_	_
62	history	_	NN	NN	_	61	pobj	_	_
63	,	_	,	,	_	68	punct	_	_
64	there	_	EX	EX	_	68	expl	_	_
65	will	_	MD	MD	_	68	aux	_	_
66	be	_	VB	VB	_	68	cop	_	_
67	more	_	JJR	JJR	_	68	amod	_	_
68	history	_	NN	NN	_	42	parataxis	_	_
69	of	_	IN	IN	_	68	prep	_	_
70	hardship	_	NN	NN	_	69	pobj	_	_
71	"	_	''	''	_	68	punct	_	_
72	,	_	,	,	_	42	punct	_	_
73	"	_	``	``	_	76	punct	_	_
74	I	_	PRP	PRP	_	76	nsubj	_	_
75	am	_	VBP	VBP	_	76	cop	_	_
76	Chinese	_	JJ	JJ	_	42	parataxis	_	_
77	"	_	''	''	_	76	punct	_	_
78	,	_	,	,	_	42	punct	_	_
79	"	_	``	``	_	81	punct	_	_
80	There	_	EX	EX	_	81	expl	_	_
81	is	_	VBZ	VBZ	_	42	parataxis	_	_
82	only	_	RB	RB	_	81	advmod	_	_
83	one	_	CD	CD	_	85	num	_	_
84	Chinese	_	JJ	JJ	_	85	amod	_	_
85	nation	_	NN	NN	_	81	nsubj	_	_
86	,	_	,	,	_	81	punct	_	_
87	there	_	EX	EX	_	88	expl	_	_
88	is	_	VBZ	VBZ	_	81	parataxis	_	_
89	only	_	RB	RB	_	88	advmod	_	_
90	one	_	CD	CD	_	92	num	_	_
91	Chinese	_	JJ	JJ	_	92	amod	_	_
92	culture	_	NN	NN	_	88	nsubj	_	_
93	"	_	''	''	_	81	punct	_	_
94	,	_	,	,	_	42	punct	_	_
95	"	_	``	``	_	105	punct	_	_
96	With	_	IN	IN	_	105	prep	_	_
97	the	_	DT	DT	_	98	det	_	_
98	over-development	_	NN	NN	_	96	pobj	_	_
99	of	_	IN	IN	_	98	prep	_	_
100	sports	_	NNS	NNS	_	99	pobj	_	_
101	,	_	,	,	_	105	punct	_	_
102	the	_	DT	DT	_	103	det	_	_
103	state	_	NN	NN	_	105	nsubj	_	_
104	may	_	MD	MD	_	105	aux	_	_
105	decline	_	VB	VB	_	42	parataxis	_	_
106	"	_	''	''	_	105	punct	_	_
107	,	_	,	,	_	17	punct	_	_
108	"	_	''	''	_	17	punct	_	_
109	'	_	``	``	_	111	punct	_	_
110	Wealthy	_	NNP	NNP	_	111	nn	_	_
111	country	_	NN	NN	_	17	dep	_	_
112	,	_	,	,	_	111	punct	_	_
113	strong	_	JJ	JJ	_	114	amod	_	_
114	people	_	NNS	NNS	_	111	appos	_	_
115	'	_	''	''	_	111	punct	_	_
116	or	_	CC	CC	_	111	cc	_	_
117	'	_	``	``	_	111	punct	_	_
118	wealthy	_	JJ	JJ	_	119	amod	_	_
119	officials	_	NNS	NNS	_	111	conj	_	_
120	,	_	,	,	_	119	punct	_	_
121	poor	_	JJ	JJ	_	122	amod	_	_
122	people	_	NNS	NNS	_	119	appos	_	_
123	"	_	''	''	_	122	punct	_	_
124	?	_	.	.	_	2	punct	_	_
125	"	_	''	''	_	2	punct	_	_
1	,	_	,	,	_	3	punct	_	_
2	"	_	``	``	_	3	punct	_	_
3	Disgusting	_	NNP	NNP	_	7	dep	_	_
4	Ren	_	NNP	NNP	_	5	nn	_	_
5	Zhiqiang	_	NNP	NNP	_	3	dep	_	_
6	,	_	,	,	_	3	punct	_	_
7	shut	_	VB	VB	_	0	root	_	_
8	your	_	PRP$	PRP$	_	10	poss	_	_
9	filthy	_	NN	NN	_	10	nn	_	_
10	mouth	_	NN	NN	_	7	dobj	_	_
11	"	_	''	''	_	10	punct	_	_
12	,	_	,	,	_	15	punct	_	_
13	"	_	``	``	_	15	punct	_	_
14	Hateful	_	NNP	NNP	_	15	nsubj	_	_
15	housing	_	VBZ	VBZ	_	7	dep	_	_
16	prices	_	NNS	NNS	_	15	dobj	_	_
17	!	_	.	.	_	7	punct	_	_
1	Pitiable	_	VB	VB	_	0	root	_	_
2	people	_	NNS	NNS	_	1	dobj	_	_
3	!	_	.	.	_	1	punct	_	_
4	"	_	''	''	_	1	punct	_	_
1	,	_	,	,	_	6	punct	_	_
2	"	_	``	``	_	6	punct	_	_
3	Google	_	JJ	JJ	_	6	dep	_	_
4	,	_	,	,	_	6	punct	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	have	_	VBP	VBP	_	0	root	_	_
7	no	_	RB	RB	_	8	neg	_	_
8	right	_	RB	RB	_	6	advmod	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	make	_	VB	VB	_	6	xcomp	_	_
11	irresponsible	_	VBG	VBG	_	10	xcomp	_	_
12	remarks	_	NNS	NNS	_	11	dobj	_	_
13	to	_	TO	TO	_	12	prep	_	_
14	China	_	NNP	NNP	_	13	pobj	_	_
15	"	_	''	''	_	12	punct	_	_
16	,	_	,	,	_	11	punct	_	_
17	"	_	``	``	_	11	punct	_	_
18	How	_	WRB	WRB	_	19	advmod	_	_
19	long	_	JJ	JJ	_	22	dep	_	_
20	will	_	MD	MD	_	22	aux	_	_
21	we	_	PRP	PRP	_	22	nsubj	_	_
22	tolerate	_	VB	VB	_	11	ccomp	_	_
23	the	_	DT	DT	_	24	det	_	_
24	US	_	NNP	NNP	_	22	dobj	_	_
25	"	_	''	''	_	11	punct	_	_
26	,	_	,	,	_	29	punct	_	_
27	"	_	``	``	_	29	punct	_	_
28	Japan	_	NNP	NNP	_	29	nsubj	_	_
29	deserved	_	VBD	VBD	_	10	parataxis	_	_
30	the	_	DT	DT	_	31	det	_	_
31	bombing-strongly	_	NN	NN	_	32	nsubj	_	_
32	oppose	_	VBP	VBP	_	29	ccomp	_	_
33	Ban	_	NNP	NNP	_	34	nn	_	_
34	Ki-moon	_	NNP	NNP	_	35	nsubj	_	_
35	presenting	_	VBG	VBG	_	32	dep	_	_
36	a	_	DT	DT	_	37	det	_	_
37	bouquet	_	NN	NN	_	35	dobj	_	_
38	in	_	IN	IN	_	37	prep	_	_
39	Hiroshima	_	NNP	NNP	_	38	pobj	_	_
40	"	_	''	''	_	37	punct	_	_
41	,	_	,	,	_	32	punct	_	_
42	"	_	``	``	_	44	punct	_	_
43	Be	_	VB	VB	_	44	cop	_	_
44	strong	_	JJ	JJ	_	32	ccomp	_	_
45	,	_	,	,	_	44	punct	_	_
46	my	_	PRP$	PRP$	_	47	poss	_	_
47	brothers	_	NNS	NNS	_	44	dep	_	_
48	and	_	CC	CC	_	47	cc	_	_
49	sisters	_	NNS	NNS	_	47	conj	_	_
50	"	_	''	''	_	29	punct	_	_
51	,	_	,	,	_	29	punct	_	_
52	"	_	``	``	_	10	punct	_	_
53	Do	_	VBP	VBP	_	55	aux	_	_
54	we	_	PRP	PRP	_	55	nsubj	_	_
55	need	_	VB	VB	_	10	dep	_	_
56	low-level	_	JJ	JJ	_	58	amod	_	_
57	entertainment	_	NN	NN	_	58	nn	_	_
58	stars	_	NNS	NNS	_	55	dobj	_	_
59	,	_	,	,	_	58	punct	_	_
60	or	_	CC	CC	_	58	cc	_	_
61	talents	_	NNS	NNS	_	58	conj	_	_
62	in	_	IN	IN	_	61	prep	_	_
63	technological	_	JJ	JJ	_	64	amod	_	_
64	innovation	_	NN	NN	_	62	pobj	_	_
65	?	_	.	.	_	55	punct	_	_
66	"	_	''	''	_	10	punct	_	_
1	,	_	,	,	_	12	punct	_	_
2	"	_	``	``	_	12	punct	_	_
3	Contemporary	_	NNP	NNP	_	5	nn	_	_
4	garbage	_	NN	NN	_	5	nn	_	_
5	writer	_	NN	NN	_	12	nsubj	_	_
6	,	_	,	,	_	5	punct	_	_
7	shameless	_	NNS	NNS	_	5	appos	_	_
8	Li	_	NNP	NNP	_	9	nn	_	_
9	Yinhe	_	NNP	NNP	_	7	dep	_	_
10	,	_	,	,	_	12	punct	_	_
11	please	_	NNP	NNP	_	12	nsubj	_	_
12	let	_	VBD	VBD	_	0	root	_	_
13	the	_	DT	DT	_	14	det	_	_
14	children	_	NNS	NNS	_	12	dobj	_	_
15	off	_	IN	IN	_	12	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	hook	_	NN	NN	_	15	pobj	_	_
18	"	_	''	''	_	12	punct	_	_

Oracle:
(a / article, mod, o / other)
(a2 / and, op, b / book)
(a2 / and, op, d5 / deserve-01)
(a2 / and, op, h4 / have-condition-91)
(a2 / and, op, l3 / let-00)
(a2 / and, op, n14 / need-01)
(a2 / and, op, o5 / or)
(a2 / and, op, p14 / person)
(a2 / and, op, s4 / shut-01)
(a2 / and, op, s6 / strong)
(a2 / and, op, t3 / tolerate-01)
(a2 / and, op, t5 / tolerate-01)
(b / book, beneficiary, c / compatriot)
(b / book, mod, h / have-03)
(b2 / build-01, ARG1, o2 / or)
(b2 / build-01, beneficiary, h2 / hero)
(b3 / beg-01, ARG0, c3 / country)
(b3 / beg-01, ARG2, g / game)
(b3 / beg-01, polarity, - / -)
(c / compatriot, mod, c2 / country)
(c10 / country, name, n10 / name)
(c11 / country, name, n11 / name)
(c12 / city, name, n13 / name)
(c15 / company, name, n8 / name)
(c2 / country, name, n18 / name)
(c3 / country, name, n20 / name)
(c7 / culture, quant, 12 / 1)
(d / dream-01, ARG1, t19 / thing)
(d2 / decline-01, ARG1, s / state)
(d4 / disgust-01, ARG0, p5 / person)
(d5 / deserve-01, ARG0, c11 / country)
(d5 / deserve-01, ARG1, p11 / present-01)
(e2 / expect-01, ARG1, g / game)
(e4 / entertain-01, ARG0, s8 / star)
(e4 / entertain-01, mod, l / level)
(f / forget-01, ARG0, w2 / we)
(f / forget-01, ARG1, h7 / hardship)
(g / game, name, n3 / name)
(h / have-03, ARG1, t19 / thing)
(h10 / hook-01, ARG2, t8 / thing)
(h2 / hero, mod, c3 / country)
(h2 / hero, mod, n19 / nation)
(h4 / have-condition-91, ARG1, h5 / history)
(h4 / have-condition-91, ARG2, f / forget-01)
(h5 / history, mod, h6 / hardship)
(h5 / history, mod, m3 / more)
(h7 / hardship, poss, h11 / history)
(i5 / innovate-01, ARG1, t7 / technology)
(l / level, mod, l2 / low)
(l3 / let-00, ARG0, p13 / person)
(l3 / let-00, ARG1, c14 / child)
(l3 / let-00, location, o9 / off)
(m / museum, mod, m2 / memorial)
(m4 / mouth, mod, f2 / filthy)
(n10 / name, op, "US")
(n11 / name, op, "Japan")
(n12 / name, op, "Ban")
(n12 / name, op, "Ki-Moon")
(n13 / name, op, "Hiroshima")
(n14 / need-01, ARG0, w5 / we)
(n14 / need-01, ARG1, o8 / or)
(n15 / name, op, "Li")
(n15 / name, op, "Yinhe")
(n18 / name, op, "Taiwan")
(n20 / name, op, "China")
(n3 / name, op, "Olympics")
(n5 / nation, mod, c3 / country)
(n5 / nation, quant, 1 / 1)
(n7 / name, op, "Ren")
(n7 / name, op, "Zhiqiang")
(n8 / name, op, "Google")
(o10 / overdevelop-00, ARG1, s2 / sport)
(o2 / or, op, m / museum)
(o2 / or, op, t2 / temple)
(o6 / official, mod, w3 / wealthy)
(o7 / oppose-01, ARG0, p12 / person)
(o7 / oppose-01, ARG1, b5 / bomb-01)
(o7 / oppose-01, manner, s5 / strong)
(o8 / or, op, s8 / star)
(o8 / or, op, t6 / talent)
(o9 / off, op, t8 / thing)
(p11 / present-01, ARG0, p12 / person)
(p11 / present-01, ARG1, b4 / bouquet)
(p11 / present-01, location, c12 / city)
(p12 / person, name, n12 / name)
(p13 / person, name, n15 / name)
(p14 / person, domain, i3 / i)
(p14 / person, mod, c3 / country)
(p2 / person, mod, s3 / strong)
(p3 / person, mod, p4 / poor)
(p5 / person, name, n7 / name)
(p5 / person, part, m4 / mouth)
(p6 / price-01, ARG1, h8 / housing)
(r / remark-01, ARG0, c15 / company)
(r / remark-01, ARG1, t4 / thing)
(r / remark-01, ARG2, c3 / country)
(s4 / shut-01, ARG0, p5 / person)
(s4 / shut-01, ARG1, m4 / mouth)
(s9 / shame-01, ARG1, p13 / person)
(t3 / tolerate-01, ARG0, w / we)
(t3 / tolerate-01, ARG1, i2 / it)
(t5 / tolerate-01, ARG0, w4 / we)
(t5 / tolerate-01, ARG1, c10 / country)
(t6 / talent, mod, i5 / innovate-01)
(w6 / write-01, ARG0, p13 / person)
(w6 / write-01, ARG1, g2 / garbage)
(w6 / write-01, time, c13 / contemporary)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),Chinese,city,false), Span(151,152,List(1),Yinhe,,have-03,false), Span(189,190,List(2),,strong,false), Span(208,209,List(3),,technology,false), Span(104,105,List(4),to,decline-01,false), Span(5,6,List(5),Taiwan,book,false), Span(45,46,List(6),of,bunt-01,false), Span(205,206,List(7),,or,false), Span(216,217,List(9, 8),,(person :ARG0-of write-01),false), Span(26,27,List(10),tolerate,hero,false), Span(131,132,List(11),my,shut-01,false), Span(41,42,List(12),we,expect-01,false), Span(9,10,List(13),dream",,have-03,false), Span(61,62,List(14),Chinese,history,false), Span(180,181,List(15),,present-01,false), Span(215,216,List(16),,garbage,false), Span(102,103,List(17),no,state,false), Span(43,44,List(20, 19, 18),the,(game :name (name :op "Olympics")),false), Span(140,141,List(22, 21),stars,,(thing :ARG2-of price-01),false), Span(84,85,List(23),officials,,nation,false), Span(187,188,List(25, 24),,(person :ARG0-of have-org-role-91),false), Span(25,26,List(26),we,nation,false), Span(222,223,List(27),,please-01,false), Span(155,156,List(28),children,make-01,false), Span(83,84,List(31, 30, 29),'wealthy,(country :name (name :op "China")),false), Span(225,226,List(32),,child,false), Span(34,35,List(33),would,tolerate-01,false), Span(48,49,List(34),will,beg-01,false), Span(115,116,List(35),the,or,false), Span(91,92,List(36),your,culture,false), Span(39,40,List(39, 38, 37),Olympics",,(country :name (name :op "China")),false), Span(133,134,List(40),and,filthy,false), Span(134,135,List(41),sisters",,mouth,false), Span(0,1,List(42),Other,1,false), Span(112,113,List(43),will,strong,false), Span(209,210,List(44),,innovate-01,false), Span(192,193,List(45),,brother,false), Span(57,58,List(46),"There,forget-01,false), Span(223,224,List(47),,let-01,false), Span(226,227,List(48),,off,false), Span(203,204,List(49),,star,false), Span(201,202,List(50),,low,false), Span(21,22,List(51),heroes",,or,false), Span(219,221,List(55, 54, 53, 52),,(person :name (name :op "Li" :op "Yinhe")),false), Span(120,121,List(56),bombing-strongly,poor,false), Span(174,175,List(57),,deserve-01,false), Span(193,194,List(58),,and,false), Span(194,195,List(59),,sister,false), Span(118,119,List(62, 61, 60),deserved,(person :ARG0-of (have-org-role-91 :ARG2 official)),false), Span(81,82,List(63),people',only,false), Span(157,158,List(64),the,remark-01,false), Span(169,170,List(67, 66, 65),,(country :name (name :op "US")),false), Span(51,52,List(70, 69, 68),history,(game :name (name :op "Olympics")),false), Span(228,229,List(71),,honk-01,false), Span(173,174,List(74, 73, 72),,(country :name (name :op "Japan")),false), Span(22,23,List(75),"How,temple,false), Span(59,60,List(76),only,harass-01,false), Span(167,168,List(77),,tolerate-01,false), Span(109,110,List(78),China",,wealth,false), Span(139,140,List(79),entertainment,house,false), Span(1,2,List(80),articles:,article,false), Span(179,180,List(81),,"Ki-moon",false), Span(200,201,List(82),,need-01,false), Span(128,130,List(86, 85, 84, 83),Hiroshima", "Be,(person :name (name :op "Ren" :op "Zhiqiang")),false), Span(110,111,List(87),"How,country,false), Span(69,70,List(88),"With,hardship,false), Span(0,1,List(89),Other,other,false), Span(66,67,List(90),one,more,false), Span(18,19,List(91),for,build-01,false), Span(16,17,List(92),or,necessitate-01,false), Span(117,118,List(93),"Japan,wealth,false), Span(178,179,List(96, 95, 94),,(person :name (name :op "Ban")),false), Span(11,12,List(97),necessity,dream,false), Span(99,100,List(98),"Google,,sport,false), Span(177,178,List(99),,government-organization,false), Span(111,112,List(100),long,and,false), Span(7,8,List(103, 102, 101),have,(country :name (name :op "Taiwan")),false), Span(148,149,List(106, 105, 104),writer,,(company :name (name :op "Google")),false), Span(67,68,List(107),Chinese,history,false), Span(20,21,List(108),national,museum,false), Span(159,160,List(111, 110, 109),,(country :name (name :op "China")),false), Span(31,32,List(112),the,long,false), Span(164,165,List(113),,long,false), Span(90,91,List(116, 115, 114),shut,(country :name (name :op "China")),false), Span(88,89,List(117),Ren,only,false)),Map(111 -> "China", 99 -> government-organization, 90 -> more, 57 -> deserve-01, 84 -> name, 78 -> wealth, 63 -> only, 105 -> name, 45 -> brother, 39 -> "China", 30 -> name, 66 -> name, 51 -> or, 2 -> strong, 87 -> country, 72 -> country, 5 -> book, 48 -> off, 33 -> tolerate-01, 69 -> name, 27 -> please-01, 54 -> "Li", 12 -> expect-01, 60 -> person, 8 -> person, 15 -> present-01, 42 -> 1, 110 -> name, 36 -> culture, 98 -> sport, 21 -> thing, 113 -> long, 71 -> honk-01, 92 -> necessitate-01, 18 -> game, 86 -> "Zhiqiang", 24 -> person, 107 -> history, 74 -> "Japan", 101 -> country, 89 -> other, 95 -> name, 53 -> name, 68 -> game, 80 -> article, 116 -> "China", 41 -> mouth, 35 -> or, 83 -> person, 104 -> company, 56 -> poor, 62 -> official, 7 -> or, 77 -> tolerate-01, 59 -> sister, 1 -> have-03, 17 -> state, 50 -> low, 44 -> innovate-01, 23 -> nation, 38 -> name, 65 -> country, 47 -> let-01, 26 -> nation, 4 -> decline-01, 115 -> name, 11 -> shut-01, 32 -> child, 14 -> history, 97 -> dream, 82 -> need-01, 29 -> country, 20 -> "Olympics", 103 -> "Taiwan", 112 -> long, 79 -> house, 85 -> "Ren", 70 -> "Olympics", 64 -> remark-01, 91 -> build-01, 106 -> "Google", 46 -> forget-01, 94 -> person, 52 -> person, 109 -> country, 67 -> "US", 73 -> name, 100 -> and, 88 -> hardship, 34 -> beg-01, 28 -> make-01, 6 -> bunt-01, 40 -> filthy, 55 -> "Yinhe", 49 -> star, 61 -> have-org-role-91, 76 -> harass-01, 9 -> write-01, 0 -> city, 43 -> strong, 22 -> price-01, 58 -> and, 16 -> garbage, 37 -> country, 19 -> name, 3 -> technology, 10 -> hero, 31 -> "China", 25 -> have-org-role-91, 93 -> wealth, 114 -> country, 108 -> museum, 117 -> only, 13 -> have-03, 75 -> temple, 81 -> "Ki-moon", 96 -> "Ban", 102 -> name),Map(n12 -> necessitate-01, p10 -> person, e -> expect-01, s5 -> star, h5 -> have-org-role-91, m3 -> more, n -> name, w -> write-01, b3 -> beg-01, c8 -> country, h -> have-03, g3 -> game, h8 -> harass-01, t4 -> temple, p5 -> please-01, s2 -> shut-01, h2 -> hero, t -> technology, b -> book, m2 -> mouth, b2 -> bunt-01, p8 -> person, o3 -> off, d3 -> dream, n11 -> name, n7 -> name, c7 -> country, o6 -> only, p2 -> present-01, n14 -> name, b5 -> build-01, h11 -> history, n17 -> name, c10 -> company, l3 -> long, a3 -> and, c4 -> culture, n4 -> name, w3 -> wealth, s -> strong, s4 -> strong, h4 -> history, d -> decline-01, m -> make-01, t3 -> tolerate-01, 1 -> 1, g2 -> game, h7 -> honk-01, s7 -> sport, o5 -> official, g -> garbage, p -> person, c3 -> child, n3 -> nation, a -> and, n16 -> name, p4 -> person, o8 -> only, o2 -> or, n6 -> name, d2 -> deserve-01, p7 -> poor, n10 -> need-01, c12 -> country, c6 -> country, h10 -> hardship, n9 -> name, c9 -> country, n13 -> name, b4 -> brother, m4 -> museum, t2 -> thing, w2 -> wealth, t5 -> tolerate-01, h9 -> house, l2 -> low, i -> innovate-01, r -> remark-01, a2 -> article, c -> city, h3 -> have-03, s3 -> state, f2 -> forget-01, p6 -> person, l -> let-01, n8 -> name, h6 -> have-org-role-91, f -> filthy, K -> "Ki-moon", o -> or, s6 -> sister, p9 -> person, o4 -> or, p3 -> price-01, o7 -> other, n15 -> name, g4 -> government-organization, c2 -> country, n2 -> nation, c11 -> country, l4 -> long, n5 -> name, c5 -> country))),[Ljava.lang.String;@4b1b3c23,Annotation([Ljava.lang.String;@3e638f8f,[Ljava.lang.String;@55990b25,[Ljava.lang.String;@2ab72499),Annotation([Ljava.lang.String;@38dfefc8,[Ljava.lang.String;@1a6200ab,[Ledu.cmu.lti.nlp.amr.Dependency;@73ff0e1),Annotation([Ljava.lang.String;@14bf8f73,[Ljava.lang.String;@53d98383,[Ljava.lang.String;@5934a60b),Annotation([Ljava.lang.String;@2174ed34,[Ljava.lang.String;@49582a7e,[Ledu.cmu.lti.nlp.amr.Entity;@56827d4d))
AMR:
(a / and, op, b4 / brother)
(a / and, op, p4 / person)
(a / and, op, s6 / sister)
(a2 / article, mod, 1 / 1)
(a2 / article, mod, o7 / other)
(a3 / and, op, c12 / country)
(a3 / and, op, c8 / country)
(a3 / and, op, p8 / person)
(a3 / and, op, p9 / person)
(a3 / and, op, s4 / strong)
(b / book, topic, h3 / have-03)
(b2 / bunt-01, ARG0, e / expect-01)
(b3 / beg-01, ARG0, h2 / hero)
(b3 / beg-01, ARG1, g2 / game)
(b3 / beg-01, ARG6, g3 / game)
(b5 / build-01, ARG0, b / book)
(b5 / build-01, ARG1, n12 / necessitate-01)
(b5 / build-01, ARG2, m4 / museum)
(c / city, op, m4 / museum)
(c10 / company, name, n15 / name)
(c11 / country, name, n16 / name)
(c12 / country, calendar, o8 / only)
(c12 / country, name, n17 / name)
(c2 / country, name, n4 / name)
(c4 / culture, mod, c8 / country)
(c5 / country, name, n5 / name)
(c6 / country, name, n7 / name)
(c7 / country, name, n9 / name)
(c9 / country, name, n14 / name)
(d / decline-01, ARG0, c2 / country)
(d / decline-01, ARG1, w2 / wealth)
(d / decline-01, ARG6, s3 / state)
(d2 / deserve-01, ARG0, c7 / country)
(d2 / deserve-01, ARG1, g4 / government-organization)
(d2 / deserve-01, ARG6, l4 / long)
(e / expect-01, ARG0, h4 / history)
(e / expect-01, ARG6, c5 / country)
(f2 / forget-01, ARG0, h8 / harass-01)
(f2 / forget-01, ARG1, h10 / hardship)
(g2 / game, calendar, e / expect-01)
(g2 / game, name, n / name)
(g3 / game, name, n8 / name)
(h / have-03, ARG0, c11 / country)
(h / have-03, ARG1, c10 / company)
(h11 / history, poss, c12 / country)
(h3 / have-03, ARG0, c9 / country)
(h3 / have-03, ARG1, l3 / long)
(h4 / history, poss, c2 / country)
(h5 / have-org-role-91, ARG0, p4 / person)
(h5 / have-org-role-91, ARG1, g4 / government-organization)
(h5 / have-org-role-91, ARG6, s / strong)
(h6 / have-org-role-91, ARG0, p8 / person)
(h6 / have-org-role-91, ARG2, o5 / official)
(h7 / honk-01, ARG1, c3 / child)
(h8 / harass-01, ARG0, n2 / nation)
(h8 / harass-01, ARG1, h4 / history)
(i / innovate-01, ARG0, p6 / person)
(i / innovate-01, ARG6, t / technology)
(l / let-01, ARG0, p / person)
(l / let-01, ARG1, o3 / off)
(l / let-01, ARG6, p5 / please-01)
(l2 / low, op, n10 / need-01)
(m / make-01, ARG0, c11 / country)
(m / make-01, ARG1, r / remark-01)
(m2 / mouth, op, f / filthy)
(m3 / more, condition, h8 / harass-01)
(m3 / more, domain, h11 / history)
(m4 / museum, calendar, t4 / temple)
(m4 / museum, op, e / expect-01)
(n / name, op, "Olympics")
(n10 / need-01, ARG0, a / and)
(n10 / need-01, ARG1, s5 / star)
(n11 / name, op, "Ren")
(n11 / name, op, "Zhiqiang")
(n12 / necessitate-01, ARG0, a2 / article)
(n12 / necessitate-01, ARG1, d3 / dream)
(n13 / name, op, "Ban")
(n14 / name, op, "Taiwan")
(n15 / name, op, "Google")
(n16 / name, op, "China")
(n17 / name, op, "China")
(n4 / name, op, "China")
(n5 / name, op, "China")
(n6 / name, op, "Li")
(n6 / name, op, "Yinhe")
(n7 / name, op, "US")
(n8 / name, op, "Olympics")
(n9 / name, op, "Japan")
(o2 / or, op, p8 / person)
(o3 / off, mod, c3 / child)
(o6 / only, calendar, c2 / country)
(p10 / person, name, n13 / name)
(p2 / present-01, ARG0, p10 / person)
(p2 / present-01, ARG1, g4 / government-organization)
(p2 / present-01, ARG6, K / "Ki-moon")
(p3 / price-01, ARG0, c10 / company)
(p3 / price-01, ARG1, h9 / house)
(p3 / price-01, ARG2, t2 / thing)
(p5 / please-01, ARG0, p6 / person)
(p6 / person, name, n6 / name)
(p7 / poor, mod, s7 / sport)
(p8 / person, calendar, p7 / poor)
(p8 / person, calendar, w3 / wealth)
(p9 / person, name, n11 / name)
(r / remark-01, ARG0, p8 / person)
(r / remark-01, ARG1, t5 / tolerate-01)
(s2 / shut-01, ARG0, p9 / person)
(s2 / shut-01, ARG1, m2 / mouth)
(t / technology, mod, l2 / low)
(t / technology, mod, o / or)
(t3 / tolerate-01, ARG1, m4 / museum)
(t4 / temple, mod, o4 / or)
(t4 / temple, poss, n3 / nation)
(t5 / tolerate-01, ARG0, c6 / country)
(t5 / tolerate-01, ARG1, l4 / long)
(w / write-01, ARG0, p / person)
(w / write-01, ARG1, g / garbage)

Decoded in 150,487,369 microseconds
Sentence: Why don't we fight with little Japan?

Oracle Span 1:  fight => fight-01
Oracle Span 2:  Japan => (country :name (name :op "Japan"))
Oracle Span 3:  little => little
Oracle Span 4:  we => we
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 6-7:  Japan? => little
Span 4-5:  with => fight-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  fight => fight-01
Oracle Span 7-8:  Japan => (country :name (name :op "Japan"))
Oracle Span 6-7:  little => little
Oracle Span 3-4:  we => we

Dependencies:
1	Why	_	WRB	WRB	_	5	advmod	_	_
2	do	_	VBP	VBP	_	5	aux	_	_
3	n't	_	RB	RB	_	5	neg	_	_
4	we	_	PRP	PRP	_	5	nsubj	_	_
5	fight	_	VB	VB	_	0	root	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	little	_	JJ	JJ	_	8	amod	_	_
8	Japan	_	NNP	NNP	_	6	pobj	_	_
9	?	_	.	.	_	5	punct	_	_

Oracle:
(c / country, mod, l / little)
(c / country, name, n / name)
(f / fight-01, ARG0, w / we)
(f / fight-01, ARG1, c / country)
(n / name, op, "Japan")

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),with,fight-02,false), Span(6,7,List(1),Japan?,little,false)),Map(1 -> little, 0 -> fight-02),Map(l -> little, f -> fight-02))),[Ljava.lang.String;@4cd16c5b,Annotation([Ljava.lang.String;@2b047f48,[Ljava.lang.String;@630d0e83,[Ljava.lang.String;@519b1863),Annotation([Ljava.lang.String;@166f15bf,[Ljava.lang.String;@1e19d605,[Ledu.cmu.lti.nlp.amr.Dependency;@156baa53),Annotation([Ljava.lang.String;@1cbae09d,[Ljava.lang.String;@7216cc58,[Ljava.lang.String;@22ef95e1),Annotation([Ljava.lang.String;@6a1e9add,[Ljava.lang.String;@216b310b,[Ledu.cmu.lti.nlp.amr.Entity;@65db4d72))
AMR:
(f / fight-02, ARG1, l / little)

Decoded in 78,237 microseconds
Sentence: What do Chinese still tolerate ...

Oracle Span 1:  Chinese => (person :mod (country :name (name :op "China")))
Oracle Span 2:  still => still
Oracle Span 3:  tolerate => tolerate-01
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 2-3:  Chinese => (country :name (name :op "China"))
Span 1-2:  do => do-02
Span 3-4:  still => still
Span 4-5:  tolerate => tolerate-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  Chinese => (person :mod (country :name (name :op "China")))
Oracle Span 3-4:  still => still
Oracle Span 4-5:  tolerate => tolerate-01

Dependencies:
1	What	_	WP	WP	_	2	nsubj	_	_
2	do	_	VBP	VBP	_	0	root	_	_
3	Chinese	_	NNP	NNP	_	5	nsubj	_	_
4	still	_	RB	RB	_	5	advmod	_	_
5	tolerate	_	VB	VB	_	2	ccomp	_	_
6	...	_	:	:	_	2	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "China")
(p / person, mod, c / country)
(t / tolerate-01, ARG0, p / person)
(t / tolerate-01, mod, s / still)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),tolerate,tolerate-01,false), Span(2,3,List(3, 2, 1),Chinese,(country :name (name :op "China")),false), Span(1,2,List(4),do,do-02,false), Span(3,4,List(5),still,still,false)),Map(2 -> name, 5 -> still, 1 -> country, 4 -> do-02, 0 -> tolerate-01, 3 -> "China"),Map(n -> name, t -> tolerate-01, s -> still, d -> do-02, c -> country))),[Ljava.lang.String;@52bcafac,Annotation([Ljava.lang.String;@1384e05b,[Ljava.lang.String;@3b78b90f,[Ljava.lang.String;@5b7a736c),Annotation([Ljava.lang.String;@6c0c7660,[Ljava.lang.String;@583ed582,[Ledu.cmu.lti.nlp.amr.Dependency;@2670af4b),Annotation([Ljava.lang.String;@2e1949fa,[Ljava.lang.String;@2129852f,[Ljava.lang.String;@f15c64d),Annotation([Ljava.lang.String;@2c3c3a13,[Ljava.lang.String;@488ef0f7,[Ledu.cmu.lti.nlp.amr.Entity;@25631434))
AMR:
(c / country, name, n / name)
(d / do-02, ARG1, t / tolerate-01)
(n / name, op, "China")
(t / tolerate-01, ARG0, c / country)
(t / tolerate-01, ARG1, s / still)

Decoded in 58,837 microseconds
Sentence: They are riding even on our head

Oracle Span 1:  even => even
Oracle Span 2:  head => head
Oracle Span 3:  riding => ride-01
Oracle Span 4:  They => they
Spans:
Span 3-4:  even => even
Span 6-7:  head => head-01
Span 2-3:  riding => ride-01
Span 0-1:  They => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  even => even
Oracle Span 6-7:  head => head
Oracle Span 2-3:  riding => ride-01
Oracle Span 0-1:  They => they

Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	are	_	VBP	VBP	_	3	aux	_	_
3	riding	_	VBG	VBG	_	0	root	_	_
4	even	_	RB	RB	_	3	advmod	_	_
5	on	_	IN	IN	_	3	prep	_	_
6	our	_	PRP$	PRP$	_	7	poss	_	_
7	head	_	NN	NN	_	5	pobj	_	_

Oracle:
(r / ride-01, ARG0, t / they)
(r / ride-01, ARG1, h / head)
(r / ride-01, mod, e / even)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),head,head-01,false), Span(2,3,List(1),riding,ride-01,false), Span(3,4,List(2),even,even,false), Span(0,1,List(3),They,they,false)),Map(2 -> even, 1 -> ride-01, 0 -> head-01, 3 -> they),Map(e -> even, h -> head-01, t -> they, r -> ride-01))),[Ljava.lang.String;@7c4c11ab,Annotation([Ljava.lang.String;@5b37568e,[Ljava.lang.String;@304fdb44,[Ljava.lang.String;@68a46def),Annotation([Ljava.lang.String;@7479e819,[Ljava.lang.String;@151b433e,[Ledu.cmu.lti.nlp.amr.Dependency;@5b403f22),Annotation([Ljava.lang.String;@10c0eab0,[Ljava.lang.String;@2b42f191,[Ljava.lang.String;@640f5574),Annotation([Ljava.lang.String;@3eecdff8,[Ljava.lang.String;@296e37ff,[Ledu.cmu.lti.nlp.amr.Entity;@151c953a))
AMR:
(e / even, domain, t / they)
(r / ride-01, ARG0, t / they)
(r / ride-01, ARG1, h / head-01)

Decoded in 63,199 microseconds
Sentence: Is this still what Chinese with guts do?

Oracle Span 1:  Chinese => (country :name (name :op "China"))
Oracle Span 2:  do => do-02
Oracle Span 3:  guts => (person :poss-of gut)
Oracle Span 4:  still => still
Oracle Span 5:  this => this
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 6-7:  guts => gut
Span 2-3:  still => still
Span 1-2:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  Chinese => (country :name (name :op "China"))
Oracle Span 7-8:  do => do-02
Oracle Span 6-7:  guts => (person :poss-of gut)
Oracle Span 2-3:  still => still
Oracle Span 1-2:  this => this

Dependencies:
1	Is	_	VBZ	VBZ	_	3	cop	_	_
2	this	_	DT	DT	_	3	nsubj	_	_
3	still	_	JJ	JJ	_	0	root	_	_
4	what	_	WP	WP	_	8	dobj	_	_
5	Chinese	_	NNP	NNP	_	8	nsubj	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	guts	_	NNS	NNS	_	6	pobj	_	_
8	do	_	VBP	VBP	_	3	rcmod	_	_
9	?	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(d / do-02, ARG0, p / person)
(d / do-02, ARG1, t / this)
(d / do-02, mod, s / still)
(g / gut, poss, p / person)
(n / name, op, "China")
(p / person, mod, c / country)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),guts,gut,false), Span(2,3,List(1),still,still,false), Span(1,2,List(2),this,this,false)),Map(2 -> this, 1 -> still, 0 -> gut),Map(t -> this, s -> still, g -> gut))),[Ljava.lang.String;@31a232e9,Annotation([Ljava.lang.String;@7836977,[Ljava.lang.String;@46cf699c,[Ljava.lang.String;@6917e070),Annotation([Ljava.lang.String;@4982b2c1,[Ljava.lang.String;@55d6a257,[Ledu.cmu.lti.nlp.amr.Dependency;@6868b2f8),Annotation([Ljava.lang.String;@3e2adbe5,[Ljava.lang.String;@6262625b,[Ljava.lang.String;@2c6a05a),Annotation([Ljava.lang.String;@2f943d88,[Ljava.lang.String;@47893e6c,[Ledu.cmu.lti.nlp.amr.Entity;@3608ec7c))
AMR:
(g / gut, mod, t / this)
(t / this, calendar, s / still)

Decoded in 76,642 microseconds
Sentence: We should tell the whole world, that Chinese can't be bullied at will by others ...

Oracle Span 1:  bullied => bully-01
Oracle Span 2:  Chinese => (country :name (name :op "China"))
Oracle Span 3:  others => other
Oracle Span 4:  should => recommend-01
Oracle Span 5:  tell => tell-01
Oracle Span 6:  We => we
Oracle Span 7:  whole => whole
Oracle Span 8:  will => will-02
Oracle Span 9:  world => world
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 16-17:   => other
Span 9-10:  be => possible
Span 1-2:  should => shoulder-01
Span 2-3:  tell => tell-01
Span 3-4:  the => thread-01
Span 0-1:  We => we
Span 4-5:  whole => whole
Span 12-13:  will => bully-01
Span 5-6:  world, => world

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Oracle Span 12-13:  bullied => bully-01
Oracle Span 8-9:  Chinese => (country :name (name :op "China"))
Oracle Span 16-17:  others => other
Oracle Span 1-2:  should => recommend-01
Oracle Span 2-3:  tell => tell-01
Oracle Span 0-1:  We => we
Oracle Span 4-5:  whole => whole
Oracle Span 14-15:  will => will-02
Oracle Span 5-6:  world => world

Dependencies:
1	We	_	PRP	PRP	_	3	nsubj	_	_
2	should	_	MD	MD	_	3	aux	_	_
3	tell	_	VB	VB	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	whole	_	JJ	JJ	_	6	amod	_	_
6	world	_	NN	NN	_	3	dobj	_	_
7	,	_	,	,	_	3	punct	_	_
8	that	_	IN	IN	_	13	mark	_	_
9	Chinese	_	NNP	NNP	_	13	nsubjpass	_	_
10	ca	_	MD	MD	_	13	aux	_	_
11	n't	_	RB	RB	_	13	neg	_	_
12	be	_	VB	VB	_	13	auxpass	_	_
13	bullied	_	VBN	VBN	_	3	ccomp	_	_
14	at	_	IN	IN	_	13	prep	_	_
15	will	_	NN	NN	_	14	pobj	_	_
16	by	_	IN	IN	_	13	prep	_	_
17	others	_	NNS	NNS	_	16	pobj	_	_
18	...	_	:	:	_	3	punct	_	_

Oracle:
(b / bully-01, ARG0, o / other)
(b / bully-01, ARG1, c / country)
(b / bully-01, manner, w4 / will-02)
(c / country, name, n / name)
(n / name, op, "China")
(r / recommend-01, ARG1, t / tell-01)
(t / tell-01, ARG0, w / we)
(t / tell-01, ARG2, w2 / world)
(w2 / world, mod, w3 / whole)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),the,thread-01,false), Span(12,13,List(1),will,bully-01,false), Span(2,3,List(2),tell,tell-01,false), Span(4,5,List(3),whole,whole,false), Span(1,2,List(4),should,shoulder-01,false), Span(9,10,List(5),be,possible,false), Span(5,6,List(6),world,,world,false), Span(16,17,List(7),,other,false), Span(0,1,List(8),We,we,false)),Map(2 -> tell-01, 5 -> possible, 8 -> we, 7 -> other, 1 -> bully-01, 4 -> shoulder-01, 6 -> world, 0 -> thread-01, 3 -> whole),Map(w -> whole, b -> bully-01, t -> thread-01, w3 -> we, s -> shoulder-01, p -> possible, t2 -> tell-01, w2 -> world, o -> other))),[Ljava.lang.String;@43182c43,Annotation([Ljava.lang.String;@701a7e97,[Ljava.lang.String;@1ef720ec,[Ljava.lang.String;@552c7781),Annotation([Ljava.lang.String;@57542353,[Ljava.lang.String;@741911e8,[Ledu.cmu.lti.nlp.amr.Dependency;@534eafc7),Annotation([Ljava.lang.String;@65685a50,[Ljava.lang.String;@1350a315,[Ljava.lang.String;@2f7a66c6),Annotation([Ljava.lang.String;@9ecd479,[Ljava.lang.String;@2e71b5ce,[Ledu.cmu.lti.nlp.amr.Entity;@38aff31e))
AMR:
(b / bully-01, ARG1, o / other)
(p / possible, domain, b / bully-01)
(s / shoulder-01, ARG1, t2 / tell-01)
(t / thread-01, ARG1, s / shoulder-01)
(t2 / tell-01, ARG0, w3 / we)
(t2 / tell-01, ARG1, b / bully-01)
(t2 / tell-01, ARG2, w2 / world)
(w2 / world, mod, w / whole)

Decoded in 494,580 microseconds
Sentence: It is time to show our strength! China has been calm for too long!

Oracle Span 1:  calm => calm-01
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  long => long
Oracle Span 4:  show => show-01
Oracle Span 5:  strength => strength
Oracle Span 6:  time => time
Oracle Span 7:  too => too
NER Entity: (country :name (name :op "China"))
Spans:
Span 14-15:   => long
Span 8-9:  has => (country :name (name :op "China"))
Span 13-14:  long! => too
Span 4-5:  show => show-01
Span 6-7:  strength! => strength
Span 2-3:  time => time

 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of been in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of calm in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 15
Langrangian relaxation converged after 27 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of been in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of calm in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 15
Oracle Span 11-12:  calm => calm-01
Oracle Span 8-9:  China => (country :name (name :op "China"))
Oracle Span 14-15:  long => long
Oracle Span 4-5:  show => show-01
Oracle Span 6-7:  strength => strength
Oracle Span 2-3:  time => time
Oracle Span 13-14:  too => too

Dependencies:
1	It	_	PRP	PRP	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	cop	_	_
3	time	_	NN	NN	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	show	_	VB	VB	_	3	vmod	_	_
6	our	_	PRP$	PRP$	_	7	poss	_	_
7	strength	_	NN	NN	_	5	dobj	_	_
8	!	_	.	.	_	3	punct	_	_
1	China	_	NNP	NNP	_	4	nsubj	_	_
2	has	_	VBZ	VBZ	_	4	aux	_	_
3	been	_	VBN	VBN	_	4	cop	_	_
4	calm	_	JJ	JJ	_	0	root	_	_
5	for	_	IN	IN	_	4	prep	_	_
6	too	_	RB	RB	_	7	advmod	_	_
7	long	_	JJ	JJ	_	5	pobj	_	_
8	!	_	.	.	_	4	punct	_	_

Oracle:
(c / calm-01, ARG1, c2 / country)
(c / calm-01, duration, l / long)
(c2 / country, name, n / name)
(l / long, degree, t / too)
(n / name, op, "China")
(s / show-01, ARG1, s2 / strength)
(s / show-01, time, t2 / time)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),,long,false), Span(6,7,List(1),strength!,strength,false), Span(8,9,List(4, 3, 2),has,(country :name (name :op "China")),false), Span(2,3,List(5),time,time,false), Span(13,14,List(6),long!,too,false), Span(4,5,List(7),show,show-01,false)),Map(2 -> country, 5 -> time, 7 -> show-01, 1 -> strength, 4 -> "China", 6 -> too, 0 -> long, 3 -> name),Map(n -> name, s2 -> show-01, t -> time, s -> strength, t2 -> too, c -> country, l -> long))),[Ljava.lang.String;@5ea8a254,Annotation([Ljava.lang.String;@502be076,[Ljava.lang.String;@54a39c82,[Ljava.lang.String;@1e350072),Annotation([Ljava.lang.String;@514bbe2,[Ljava.lang.String;@a33d366,[Ledu.cmu.lti.nlp.amr.Dependency;@42bc092e),Annotation([Ljava.lang.String;@743ca79b,[Ljava.lang.String;@54d7d955,[Ljava.lang.String;@406b884a),Annotation([Ljava.lang.String;@623c1c10,[Ljava.lang.String;@732d6fb3,[Ledu.cmu.lti.nlp.amr.Entity;@195a0df2))
AMR:
(c / country, name, n / name)
(n / name, op, "China")
(s / strength, poss, c / country)
(s2 / show-01, ARG0, t / time)
(s2 / show-01, ARG1, s / strength)
(t2 / too, calendar, l / long)
(t2 / too, purpose, s2 / show-01)

Decoded in 265,464 microseconds
Sentence: Currently our citizens' lives are all too carefree! The officials are too extravagant.

Oracle Span 1:  all => all
Oracle Span 2:  carefree => carefree
Oracle Span 3:  citizens => citizen
Oracle Span 4:  Currently => current
Oracle Span 5:  extravagant => extravagant
Oracle Span 6:  lives => life
Oracle Span 7:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 8:  too => too
Oracle Span 9:  too => too
Spans:
Span 13-14:   => too
Span 4-5:  are => life
Span 7-8:  carefree! => too
Span 2-3:  citizens' => citizen
Span 0-1:  Currently => (date-entity :time currently)
Span 11-12:  too => (person :ARG0-of (have-org-role-91 :ARG2 official))
Span 6-7:  too => all

 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of extravagant in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 15
Langrangian relaxation converged after 10 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of extravagant in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 15
Oracle Span 6-7:  all => all
Oracle Span 8-9:  carefree => carefree
Oracle Span 2-3:  citizens => citizen
Oracle Span 0-1:  Currently => current
Oracle Span 14-15:  extravagant => extravagant
Oracle Span 4-5:  lives => life
Oracle Span 11-12:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 7-8:  too => too
Oracle Span 13-14:  too => too

Dependencies:
1	Currently	_	RB	RB	_	9	advmod	_	_
2	our	_	PRP$	PRP$	_	3	poss	_	_
3	citizens	_	NNS	NNS	_	5	poss	_	_
4	'	_	POS	POS	_	3	possessive	_	_
5	lives	_	NNS	NNS	_	9	nsubj	_	_
6	are	_	VBP	VBP	_	9	cop	_	_
7	all	_	RB	RB	_	9	advmod	_	_
8	too	_	RB	RB	_	9	advmod	_	_
9	carefree	_	JJ	JJ	_	0	root	_	_
10	!	_	.	.	_	9	punct	_	_
1	The	_	DT	DT	_	2	det	_	_
2	officials	_	NNS	NNS	_	5	nsubj	_	_
3	are	_	VBP	VBP	_	5	cop	_	_
4	too	_	RB	RB	_	5	advmod	_	_
5	extravagant	_	JJ	JJ	_	0	root	_	_
6	.	_	.	.	_	5	punct	_	_

Oracle:
(c / carefree, degree, t / too)
(c / carefree, domain, l / life)
(c / carefree, time, c3 / current)
(e / extravagant, degree, t2 / too)
(h / have-org-role-91, ARG2, o2 / official)
(l / life, poss, c2 / citizen)
(l / life, quant, a / all)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),citizens',citizen,false), Span(11,12,List(3, 2, 1),too,(person :ARG0-of (have-org-role-91 :ARG2 official)),false), Span(13,14,List(4),,too,false), Span(0,1,List(6, 5),Currently,(date-entity :time currently),false), Span(4,5,List(7),are,life,false), Span(7,8,List(8),carefree!,too,false), Span(6,7,List(9),too,all,false)),Map(2 -> have-org-role-91, 5 -> date-entity, 8 -> too, 7 -> life, 1 -> person, 4 -> too, 6 -> currently, 9 -> all, 0 -> citizen, 3 -> official),Map(h -> have-org-role-91, t -> too, d -> date-entity, p -> person, a -> all, t2 -> too, l -> life, c -> citizen, o -> official, c2 -> currently))),[Ljava.lang.String;@4c43e2d5,Annotation([Ljava.lang.String;@3be829c0,[Ljava.lang.String;@74ef62b0,[Ljava.lang.String;@4a49824e),Annotation([Ljava.lang.String;@19cf9498,[Ljava.lang.String;@63130848,[Ledu.cmu.lti.nlp.amr.Dependency;@6ce60c78),Annotation([Ljava.lang.String;@6abbb858,[Ljava.lang.String;@f359ac3,[Ljava.lang.String;@741f8225),Annotation([Ljava.lang.String;@2846c512,[Ljava.lang.String;@1f08d13a,[Ledu.cmu.lti.nlp.amr.Entity;@3c48a39a))
AMR:
(a / all, op, t / too)
(d / date-entity, op, t / too)
(d / date-entity, time, c2 / currently)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, t2 / too)
(h / have-org-role-91, ARG2, o / official)
(l / life, poss, c / citizen)
(p / person, domain, l / life)
(t2 / too, op, t / too)

Decoded in 243,895 microseconds
Sentence: Now we already have no cohesion! China needs to start a war! A harsh slap in the face of the countries which follow the United States' rear!

Oracle Span 1:  already => already
Oracle Span 2:  China => (name :op "China")
Oracle Span 3:  cohesion => cohesion
Oracle Span 4:  countries => country
Oracle Span 5:  face => face
Oracle Span 6:  follow => follow-02
Oracle Span 7:  harsh => harsh
Oracle Span 8:  have => have-03
Oracle Span 9:  needs => need-01
Oracle Span 10:  no => -
Oracle Span 11:  Now => now
Oracle Span 12:  rear => rear
Oracle Span 13:  slap => slap-01
Oracle Span 14:  start => start-01
Oracle Span 15:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 16:  war => war
Oracle Span 17:  we => we
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "United" :op "States" :op "'"))
Spans:
Span 29-30:   => rear
Span 10-11:  a => start-01
Span 12-13:  A => war-01
Span 2-3:  already => already
Span 22-23:  follow => (country :ARG0-of have-org-role-91)
Span 3-4:  have => have-03
Span 15-16:  in => harsh
Span 7-8:  needs => (country :name (name :op "China"))
Span 0-1:  Now => (date-entity :time now)
Span 26-28:  rear! => (country :name (name :op "United" :op "States"))
Span 19-20:  the => face-01
Span 16-17:  the => slap-01
Span 8-9:  to => need-01
Span 24-25:  United => follow-02

 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of countries in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of which in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of follow in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of United in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of States in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of rear in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 30
Langrangian relaxation converged after 48 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of countries in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of which in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of follow in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of United in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of States in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of rear in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 30
Oracle Span 2-3:  already => already
Oracle Span 7-8:  China => (name :op "China")
Oracle Span 5-6:  cohesion => cohesion
Oracle Span 22-23:  countries => country
Oracle Span 19-20:  face => face
Oracle Span 24-25:  follow => follow-02
Oracle Span 15-16:  harsh => harsh
Oracle Span 3-4:  have => have-03
Oracle Span 8-9:  needs => need-01
Oracle Span 4-5:  no => -
Oracle Span 0-1:  Now => now
Oracle Span 29-30:  rear => rear
Oracle Span 16-17:  slap => slap-01
Oracle Span 10-11:  start => start-01
Oracle Span 26-28:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 12-13:  war => war
Oracle Span 1-2:  we => we

Dependencies:
1	Now	_	RB	RB	_	4	advmod	_	_
2	we	_	PRP	PRP	_	4	nsubj	_	_
3	already	_	RB	RB	_	4	advmod	_	_
4	have	_	VBP	VBP	_	0	root	_	_
5	no	_	DT	DT	_	6	neg	_	_
6	cohesion	_	NN	NN	_	4	dobj	_	_
7	!	_	.	.	_	4	punct	_	_
1	China	_	NNP	NNP	_	2	nsubj	_	_
2	needs	_	VBZ	VBZ	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	start	_	VB	VB	_	2	xcomp	_	_
5	a	_	DT	DT	_	6	det	_	_
6	war	_	NN	NN	_	4	dobj	_	_
7	!	_	.	.	_	2	punct	_	_
1	A	_	DT	DT	_	3	det	_	_
2	harsh	_	JJ	JJ	_	3	amod	_	_
3	slap	_	NN	NN	_	0	root	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	face	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	countries	_	NNS	NNS	_	7	pobj	_	_
10	which	_	WDT	WDT	_	11	nsubj	_	_
11	follow	_	VBP	VBP	_	9	rcmod	_	_
12	the	_	DT	DT	_	16	det	_	_
13	United	_	NNP	NNP	_	16	nn	_	_
14	States	_	NNPS	NNPS	_	16	nn	_	_
15	'	_	''	''	_	16	punct	_	_
16	rear	_	NN	NN	_	11	dobj	_	_
17	!	_	.	.	_	3	punct	_	_

Oracle:
(c2 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(f2 / follow-02, ARG1, r / rear)
(h / have-03, ARG0, w / we)
(h / have-03, ARG1, c / cohesion)
(h / have-03, polarity, - / -)
(h / have-03, time, a / already)
(h / have-03, time, n / now)
(n2 / need-01, ARG0, c2 / country)
(n2 / need-01, ARG1, s / start-01)
(n3 / name, op, "China")
(n4 / name, op, "States")
(n4 / name, op, "United")
(r / rear, poss, c4 / country)
(s / start-01, ARG0, c2 / country)
(s / start-01, ARG1, w2 / war)
(s2 / slap-01, ARG1, f / face)
(s2 / slap-01, manner, h2 / harsh)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(1, 0),Now,(date-entity :time now),false), Span(29,30,List(2),,rear,false), Span(22,23,List(4, 3),follow,(country :ARG0-of have-org-role-91),false), Span(15,16,List(5),in,harsh,false), Span(7,8,List(8, 7, 6),needs,(country :name (name :op "China")),false), Span(2,3,List(9),already,already,false), Span(19,20,List(10),the,face-01,false), Span(10,11,List(11),a,start-01,false), Span(12,13,List(12),A,war-01,false), Span(26,28,List(16, 15, 14, 13),rear!,(country :name (name :op "United" :op "States")),false), Span(8,9,List(17),to,need-01,false), Span(24,25,List(18),United,follow-02,false), Span(16,17,List(19),the,slap-01,false), Span(3,4,List(20),have,have-03,false)),Map(2 -> rear, 5 -> harsh, 12 -> war-01, 15 -> "United", 8 -> "China", 18 -> follow-02, 7 -> name, 17 -> need-01, 1 -> now, 4 -> have-org-role-91, 11 -> start-01, 14 -> name, 20 -> have-03, 6 -> country, 0 -> date-entity, 9 -> already, 16 -> "States", 19 -> slap-01, 3 -> country, 10 -> face-01, 13 -> country),Map(n -> now, w -> war-01, h -> have-org-role-91, s2 -> slap-01, h2 -> harsh, n4 -> need-01, s -> start-01, d -> date-entity, n3 -> name, a -> already, c3 -> country, r -> rear, h3 -> have-03, c -> country, f2 -> follow-02, f -> face-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@6a5d0e4f,Annotation([Ljava.lang.String;@3d2d7dab,[Ljava.lang.String;@66dcad14,[Ljava.lang.String;@54867cb6),Annotation([Ljava.lang.String;@56ab2f1f,[Ljava.lang.String;@3dc044,[Ledu.cmu.lti.nlp.amr.Dependency;@38a795a),Annotation([Ljava.lang.String;@648ed651,[Ljava.lang.String;@6b52de08,[Ljava.lang.String;@5830cc6),Annotation([Ljava.lang.String;@5593f585,[Ljava.lang.String;@47bd8d38,[Ledu.cmu.lti.nlp.amr.Entity;@3ae2a959))
AMR:
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(d / date-entity, time, n / now)
(f / face-01, ARG0, c / country)
(f / face-01, ARG1, r / rear)
(f2 / follow-02, ARG0, c / country)
(f2 / follow-02, ARG1, c3 / country)
(h / have-org-role-91, ARG0, c / country)
(h / have-org-role-91, ARG1, c2 / country)
(h3 / have-03, ARG1, n4 / need-01)
(h3 / have-03, time, a / already)
(n2 / name, op, "China")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / need-01, ARG0, c2 / country)
(n4 / need-01, ARG1, s / start-01)
(s / start-01, ARG1, w / war-01)
(s2 / slap-01, ARG0, d / date-entity)
(s2 / slap-01, ARG1, f / face-01)
(w / war-01, ARG1, h2 / harsh)

Decoded in 1,501,323 microseconds
Sentence: Let them know that the US is not a panacea! If we win, it may increase China's influence! and improve the cohesion of the citizenry! If we lose, we can clean out those incompetent bureaucrats, and make those trash get out! Let China have new blood and get updated. , Get up, China!

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  blood => blood
Oracle Span 5:  bureaucrats => bureaucrat
Oracle Span 6:  can => possible
Oracle Span 7:  China => (country :name (name :op "China"))
Oracle Span 8:  China => (country :name (name :op "China"))
Oracle Span 9:  China => (country :name (name :op "China"))
Oracle Span 10:  citizenry => citizen
Oracle Span 11:  clean => clean-03
Oracle Span 12:  cohesion => cohesion
Oracle Span 13:  get => get-05
Oracle Span 14:  get => get-05
Oracle Span 15:  have => have-03
Oracle Span 16:  improve => improve-01
Oracle Span 17:  incompetent => competent-41
Oracle Span 18:  increase => increase-01
Oracle Span 19:  influence => influence-01
Oracle Span 20:  know => know-01
Oracle Span 21:  Let => let-01
Oracle Span 22:  Let => let-01
Oracle Span 23:  lose => lose-03
Oracle Span 24:  make => make-02
Oracle Span 25:  may => possible
Oracle Span 26:  new => new
Oracle Span 27:  out => out
Oracle Span 28:  panacea => panacea
Oracle Span 29:  trash => trash
Oracle Span 30:  up => up
Oracle Span 31:  updated => update-01
Oracle Span 32:  US => (country :name (name :op "US"))
Oracle Span 33:  we => we
Oracle Span 34:  we => we
Oracle Span 35:  win => win-01
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Error fetching annotation for prep from the Curator. Backing off to local annotator
ServiceUnavailableException(reason:dependencies unavailable:java.net.SocketTimeoutException: Read timed out)
	at edu.illinois.cs.cogcomp.thrift.curator.Curator$wsprovide_result$wsprovide_resultStandardScheme.read(Curator.java:4610)
	at edu.illinois.cs.cogcomp.thrift.curator.Curator$wsprovide_result$wsprovide_resultStandardScheme.read(Curator.java:4587)
	at edu.illinois.cs.cogcomp.thrift.curator.Curator$wsprovide_result.read(Curator.java:4522)
	at org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:78)
	at edu.illinois.cs.cogcomp.thrift.curator.Curator$Client.recv_wsprovide(Curator.java:261)
	at edu.illinois.cs.cogcomp.thrift.curator.Curator$Client.wsprovide(Curator.java:246)
	at edu.stanford.nlp.curator.CuratorAnnotator.getRecordFromCurator(CuratorAnnotator.java:87)
	at edu.stanford.nlp.curator.CuratorAnnotator.alignForestToPredicateArguments(CuratorAnnotator.java:234)
	at edu.stanford.nlp.curator.CuratorAnnotators$CuratorPrepSRLAnnotator.annotateRemote(CuratorAnnotators.java:181)
	at edu.stanford.nlp.curator.CuratorAnnotator.annotate(CuratorAnnotator.java:310)
	at edu.stanford.nlp.pipeline.AnnotationPipeline.annotate(AnnotationPipeline.java:68)
	at edu.stanford.nlp.pipeline.StanfordCoreNLP.annotate(StanfordCoreNLP.java:409)
	at nlp.experiments.SequenceSystem.getSpans(SequenceSystem.java:146)
	at edu.cmu.lti.nlp.amr.StanfordDecoder.Decoder$.decode(Decoder.scala:24)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply$mcV$sp(AMRParser.scala:210)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:195)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3$$anonfun$apply$1.apply(AMRParser.scala:195)
	at edu.cmu.lti.nlp.amr.AMRParser$.time(AMRParser.scala:79)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:195)
	at edu.cmu.lti.nlp.amr.AMRParser$$anonfun$main$3.apply(AMRParser.scala:193)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:108)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at edu.cmu.lti.nlp.amr.AMRParser$.main(AMRParser.scala:193)
	at edu.cmu.lti.nlp.amr.AMRParser.main(AMRParser.scala)
Registering annotator regexner2 with class edu.stanford.nlp.pipeline.TokensRegexNERAnnotator
Registering annotator regexner1 with class edu.stanford.nlp.pipeline.TokensRegexNERAnnotator
Adding annotator tokenize
TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer.
Adding annotator ssplit
edu.stanford.nlp.pipeline.AnnotatorImplementations:
Adding annotator pos
Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [0.7 sec].
Adding annotator lemma
Adding annotator ner
Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [8.2 sec].
Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [2.4 sec].
Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [2.9 sec].
sutime.binder.1.
Initializing JollyDayHoliday for sutime with classpath:edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml
Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt
Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt
Feb 17, 2015 12:37:03 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules
INFO: Ignoring inactive rule: null
Feb 17, 2015 12:37:03 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules
INFO: Ignoring inactive rule: temporal-composite-8:ranges
Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt
Adding annotator regexner1
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{Deist RELIGION [ORGANIZATION, PERSON, MISC] 1.0}, new=Entry{Deist RELIGION [ORGANIZATION, PERSON, MISC] 3.0}
TokensRegexNERAnnotator regexner1: Entry has multiple types: murder	CRIMINAL_CHARGE,CAUSE_OF_DEATH	11.  Taking type to be CRIMINAL_CHARGE
TokensRegexNERAnnotator regexner1: Entry has multiple types: New York	CITY,STATE_OR_PROVINCE	LOCATION	2.  Taking type to be CITY
TokensRegexNERAnnotator regexner1: Entry has multiple types: England	COUNTRY,STATE_OR_PROVINCE	LOCATION	1.  Taking type to be COUNTRY
TokensRegexNERAnnotator regexner1: Entry has multiple types: Scotland	COUNTRY,STATE_OR_PROVINCE	LOCATION	1.  Taking type to be COUNTRY
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{SANDER TITLE [1] 0.0}, new=Entry{sander CITY [LOCATION] 1.0}
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{WINDER TITLE [1] 0.0}, new=Entry{winder CITY [LOCATION] 1.0}
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{CARVER TITLE [1] 0.0}, new=Entry{carver CITY [LOCATION] 1.0}
TokensRegexNERAnnotator regexner1: Read 56933 unique entries out of 73409 from data/kbp_regexner_mapping_nocase.tab, 0 TokensRegex patterns.
Adding annotator regexner2
TokensRegexNERAnnotator regexner2: Read 478 unique entries out of 481 from data/kbp_regexner_mapping.tab, 0 TokensRegex patterns.
Adding annotator parse
Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...done [0.3 sec].
Adding annotator dcoref
Spans:
Span 62-63:   => (country :name (name :op "China"))
Span 56-57:   => update-01
Span 59-60:   => get-13
Span 54-55:   => and
Span 53-54:   => blood
Span 55-56:   => get-03
Span 35-36:  and => possible
Span 46-47:  and => get-03
Span 45-46:  blood => trash
Span 42-43:  China => and
Span 52-53:  China! => new
Span 50-51:  Get => (country :name (name :op "China"))
Span 43-44:  have => make-02
Span 17-18:  influence! => increase-01
Span 13-14:  it => win-01
Span 2-3:  know => know-01
Span 0-1:  Let => let-01
Span 36-37:  make => clean-03
Span 22-23:  of => and
Span 40-41:  out! => bureaucrat
Span 20-21:  the => influence-01
Span 23-24:  the => improve-01
Span 32-33:  those => lose-03
Span 5-6:  US => (country :name (name :op "US"))
Span 28-29:  we => citizenry

 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of improve in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of cohesion in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizenry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of If in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of clean in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of incompetent in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of bureaucrats in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of trash in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of Let in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of new in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of blood in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of updated in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of Get in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of up in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Langrangian relaxation converged after 62 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of improve in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of cohesion in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizenry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of If in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of clean in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of incompetent in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of bureaucrats in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of trash in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of Let in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of new in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of blood in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of updated in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of Get in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of up in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Oracle Span 22-23:  and => and
Oracle Span 42-43:  and => and
Oracle Span 54-55:  and => and
Oracle Span 53-54:  blood => blood
Oracle Span 40-41:  bureaucrats => bureaucrat
Oracle Span 35-36:  can => possible
Oracle Span 18-19:  China => (country :name (name :op "China"))
Oracle Span 50-51:  China => (country :name (name :op "China"))
Oracle Span 62-63:  China => (country :name (name :op "China"))
Oracle Span 28-29:  citizenry => citizen
Oracle Span 36-37:  clean => clean-03
Oracle Span 25-26:  cohesion => cohesion
Oracle Span 46-47:  get => get-05
Oracle Span 55-56:  get => get-05
Oracle Span 51-52:  have => have-03
Oracle Span 23-24:  improve => improve-01
Oracle Span 39-40:  incompetent => competent-41
Oracle Span 17-18:  increase => increase-01
Oracle Span 20-21:  influence => influence-01
Oracle Span 2-3:  know => know-01
Oracle Span 0-1:  Let => let-01
Oracle Span 49-50:  Let => let-01
Oracle Span 32-33:  lose => lose-03
Oracle Span 43-44:  make => make-02
Oracle Span 16-17:  may => possible
Oracle Span 52-53:  new => new
Oracle Span 37-38:  out => out
Oracle Span 9-10:  panacea => panacea
Oracle Span 45-46:  trash => trash
Oracle Span 60-61:  up => up
Oracle Span 56-57:  updated => update-01
Oracle Span 5-6:  US => (country :name (name :op "US"))
Oracle Span 12-13:  we => we
Oracle Span 31-32:  we => we
Oracle Span 13-14:  win => win-01

Dependencies:
1	Let	_	VB	VB	_	0	root	_	_
2	them	_	PRP	PRP	_	3	nsubj	_	_
3	know	_	VBP	VBP	_	1	ccomp	_	_
4	that	_	IN	IN	_	10	mark	_	_
5	the	_	DT	DT	_	6	det	_	_
6	US	_	NNP	NNP	_	10	nsubj	_	_
7	is	_	VBZ	VBZ	_	10	cop	_	_
8	not	_	RB	RB	_	10	neg	_	_
9	a	_	DT	DT	_	10	det	_	_
10	panacea	_	NN	NN	_	3	ccomp	_	_
11	!	_	.	.	_	1	punct	_	_
1	If	_	IN	IN	_	3	mark	_	_
2	we	_	PRP	PRP	_	3	nsubj	_	_
3	win	_	VBP	VBP	_	7	advcl	_	_
4	,	_	,	,	_	7	punct	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	may	_	MD	MD	_	7	aux	_	_
7	increase	_	VB	VB	_	0	root	_	_
8	China	_	NNP	NNP	_	10	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	influence	_	NN	NN	_	7	dobj	_	_
11	!	_	.	.	_	7	punct	_	_
1	and	_	CC	CC	_	2	cc	_	_
2	improve	_	VB	VB	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	cohesion	_	NN	NN	_	2	dobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	citizenry	_	NN	NN	_	5	pobj	_	_
8	!	_	.	.	_	2	punct	_	_
1	If	_	IN	IN	_	3	mark	_	_
2	we	_	PRP	PRP	_	3	nsubj	_	_
3	lose	_	VBP	VBP	_	7	advcl	_	_
4	,	_	,	,	_	7	punct	_	_
5	we	_	PRP	PRP	_	7	nsubj	_	_
6	can	_	MD	MD	_	7	aux	_	_
7	clean	_	VB	VB	_	0	root	_	_
8	out	_	RP	RP	_	7	prt	_	_
9	those	_	DT	DT	_	11	det	_	_
10	incompetent	_	JJ	JJ	_	11	amod	_	_
11	bureaucrats	_	NNS	NNS	_	7	dobj	_	_
12	,	_	,	,	_	7	punct	_	_
13	and	_	CC	CC	_	7	cc	_	_
14	make	_	VB	VB	_	7	conj	_	_
15	those	_	DT	DT	_	16	det	_	_
16	trash	_	NN	NN	_	17	nsubj	_	_
17	get	_	VB	VB	_	14	ccomp	_	_
18	out	_	RP	RP	_	17	prt	_	_
19	!	_	.	.	_	7	punct	_	_
1	Let	_	VB	VB	_	0	root	_	_
2	China	_	NNP	NNP	_	3	nsubj	_	_
3	have	_	VB	VB	_	1	ccomp	_	_
4	new	_	JJ	JJ	_	5	amod	_	_
5	blood	_	NN	NN	_	3	dobj	_	_
6	and	_	CC	CC	_	3	cc	_	_
7	get	_	VB	VB	_	3	conj	_	_
8	updated	_	NNS	NNS	_	7	dobj	_	_
9	.	_	.	.	_	1	punct	_	_
1	,	_	,	,	_	2	punct	_	_
2	Get	_	VB	VB	_	0	root	_	_
3	up	_	RB	RB	_	2	advmod	_	_
4	,	_	,	,	_	2	punct	_	_
5	China	_	NNP	NNP	_	6	nn	_	_
6	!	_	NNP	NNP	_	2	dobj	_	_

Oracle:
(a / and, op, i3 / improve-01)
(a2 / and, op, c5 / clean-03)
(a2 / and, op, m2 / make-02)
(a3 / and, op, h / have-03)
(a3 / and, op, u / update-01)
(b2 / blood, mod, n5 / new)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / cohesion, mod, c4 / citizen)
(c5 / clean-03, ARG0, w3 / we)
(c5 / clean-03, ARG1, b / bureaucrat)
(c6 / country, name, n3 / name)
(c7 / country, name, n4 / name)
(c8 / competent-41, ARG1, b / bureaucrat)
(g / get-05, ARG1, t3 / trash)
(g / get-05, ARG2, o / out)
(g2 / get-05, ARG0, c6 / country)
(g2 / get-05, ARG1, c6 / country)
(g2 / get-05, ARG2, u2 / up)
(h / have-03, ARG0, c7 / country)
(h / have-03, ARG1, b2 / blood)
(i / increase-01, ARG0, w / win-01)
(i / increase-01, ARG1, i2 / influence-01)
(i2 / influence-01, ARG0, c2 / country)
(i3 / improve-01, ARG1, c3 / cohesion)
(k / know-01, ARG1, p / panacea)
(l / lose-03, ARG0, w3 / we)
(l3 / let-01, ARG1, a3 / and)
(l4 / let-01, ARG1, k / know-01)
(m2 / make-02, ARG0, w3 / we)
(m2 / make-02, ARG1, g / get-05)
(n / name, op, "US")
(n2 / name, op, "China")
(n3 / name, op, "China")
(n4 / name, op, "China")
(p / panacea, domain, c / country)
(p2 / possible, condition, w / win-01)
(p2 / possible, domain, i / increase-01)
(p3 / possible, condition, l / lose-03)
(p3 / possible, domain, a2 / and)
(u / update-01, ARG1, c7 / country)
(w / win-01, ARG0, w2 / we)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),those,lose-03,false), Span(62,63,List(3, 2, 1),,(country :name (name :op "China")),false), Span(17,18,List(4),influence!,increase-01,false), Span(52,53,List(5),China!,new,false), Span(13,14,List(6),it,win-01,false), Span(35,36,List(7),and,possible,false), Span(46,47,List(8),and,get-03,false), Span(50,51,List(11, 10, 9),Get,(country :name (name :op "China")),false), Span(2,3,List(12),know,know-01,false), Span(45,46,List(13),blood,trash,false), Span(20,21,List(14),the,influence-01,false), Span(40,41,List(15),out!,bureaucrat,false), Span(0,1,List(16),Let,let-01,false), Span(28,29,List(17),we,citizenry,false), Span(56,57,List(18),,update-01,false), Span(59,60,List(19),,get-13,false), Span(22,23,List(20),of,and,false), Span(54,55,List(21),,and,false), Span(43,44,List(22),have,make-02,false), Span(36,37,List(23),make,clean-03,false), Span(53,54,List(24),,blood,false), Span(42,43,List(25),China,and,false), Span(23,24,List(26),the,improve-01,false), Span(5,6,List(29, 28, 27),US,(country :name (name :op "US")),false), Span(55,56,List(30),,get-03,false)),Map(30 -> get-03, 2 -> name, 5 -> new, 27 -> country, 12 -> know-01, 8 -> get-03, 15 -> bureaucrat, 21 -> and, 18 -> update-01, 24 -> blood, 7 -> possible, 1 -> country, 17 -> citizenry, 23 -> clean-03, 26 -> improve-01, 4 -> increase-01, 11 -> "China", 14 -> influence-01, 29 -> "US", 20 -> and, 28 -> name, 6 -> win-01, 9 -> country, 0 -> lose-03, 22 -> make-02, 16 -> let-01, 19 -> get-13, 10 -> name, 3 -> "China", 25 -> and, 13 -> trash),Map(w -> win-01, n -> name, g3 -> get-03, t -> trash, k -> know-01, b -> bureaucrat, b2 -> blood, n4 -> name, c4 -> clean-03, a3 -> and, m -> make-02, g2 -> get-13, i3 -> improve-01, g -> get-03, p -> possible, n3 -> name, c3 -> citizenry, a -> and, i2 -> influence-01, l2 -> let-01, i -> increase-01, a2 -> and, c -> country, l -> lose-03, u -> update-01, c2 -> country, n2 -> new, c5 -> country))),[Ljava.lang.String;@1fc445ac,Annotation([Ljava.lang.String;@35f847e4,[Ljava.lang.String;@3ba4319b,[Ljava.lang.String;@32feefd0),Annotation([Ljava.lang.String;@f2a3506,[Ljava.lang.String;@789a8460,[Ledu.cmu.lti.nlp.amr.Dependency;@62a85a01),Annotation([Ljava.lang.String;@276da9eb,[Ljava.lang.String;@79313a05,[Ljava.lang.String;@55a408c7),Annotation([Ljava.lang.String;@757c2820,[Ljava.lang.String;@3f94e595,[Ledu.cmu.lti.nlp.amr.Entity;@4f851170))
AMR:
(a / and, op, i3 / improve-01)
(a2 / and, op, b2 / blood)
(a2 / and, op, g3 / get-03)
(a3 / and, op, b / bureaucrat)
(a3 / and, op, m / make-02)
(b2 / blood, mod, n2 / new)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c4 / clean-03, ARG1, b / bureaucrat)
(c4 / clean-03, ARG6, p / possible)
(c5 / country, name, n4 / name)
(g / get-03, ARG0, c2 / country)
(g / get-03, ARG1, t / trash)
(g2 / get-13, ARG1, c / country)
(g3 / get-03, ARG0, c2 / country)
(g3 / get-03, ARG1, u / update-01)
(i / increase-01, ARG1, a3 / and)
(i2 / influence-01, ARG1, k / know-01)
(i3 / improve-01, ARG1, i2 / influence-01)
(k / know-01, ARG1, w / win-01)
(l / lose-03, ARG0, c3 / citizenry)
(l / lose-03, ARG1, p / possible)
(l2 / let-01, ARG1, k / know-01)
(m / make-02, ARG1, g / get-03)
(n / name, op, "China")
(n3 / name, op, "China")
(n4 / name, op, "US")
(u / update-01, ARG1, g2 / get-13)
(w / win-01, ARG0, c5 / country)
(w / win-01, ARG1, i / increase-01)

Decoded in 211,675,782 microseconds
Sentence: Go, China, go

Oracle Span 1:  China => (country :name (name :op "China"))
Oracle Span 2:  Go => go-01
NER Entity: (country :name (name :op "China"))
Spans:
Span 4-5:   => go-01
Span 2-3:  go => (country :name (name :op "China"))
Span 0-1:  Go, => go-09

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 2-3:  China => (country :name (name :op "China"))
Oracle Span 0-1:  Go => go-01

Dependencies:
1	Go	_	NNP	NNP	_	5	nsubj	_	_
2	,	_	,	,	_	1	punct	_	_
3	China	_	NNP	NNP	_	1	appos	_	_
4	,	_	,	,	_	1	punct	_	_
5	go	_	VBP	VBP	_	0	root	_	_

Oracle:
(c / country, name, n / name)
(g / go-01, ARG1, c / country)
(n / name, op, "China")

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Go,,go-09,false), Span(4,5,List(1),,go-01,false), Span(2,3,List(4, 3, 2),go,(country :name (name :op "China")),false)),Map(2 -> country, 1 -> go-01, 4 -> "China", 0 -> go-09, 3 -> name),Map(n -> name, g2 -> go-01, g -> go-09, c -> country))),[Ljava.lang.String;@2f475cc1,Annotation([Ljava.lang.String;@3e920ac3,[Ljava.lang.String;@5007a0d3,[Ljava.lang.String;@db31768),Annotation([Ljava.lang.String;@1807f34b,[Ljava.lang.String;@366d369a,[Ledu.cmu.lti.nlp.amr.Dependency;@5b8109bc),Annotation([Ljava.lang.String;@4e9c4df3,[Ljava.lang.String;@69a662c0,[Ljava.lang.String;@36205088),Annotation([Ljava.lang.String;@653f7319,[Ljava.lang.String;@49e04998,[Ledu.cmu.lti.nlp.amr.Entity;@130a8206))
AMR:
(c / country, name, n / name)
(g / go-09, location, c / country)
(g2 / go-01, ARG1, g / go-09)
(n / name, op, "China")

Decoded in 363,112 microseconds
Sentence: I suggest that China strengthens the guard on the Diaoyu Islands, make it daily, protect the fishermen and the sovereignty of our country; if Japan dares to invade our territory with military force, we will fight a small-scale war of self-defense, regardless of the cost. China can not lose!

Oracle Span 1:  ; => and
Oracle Span 2:  and => and
Oracle Span 3:  can => possible
Oracle Span 4:  China => (country :name (name :op "China"))
Oracle Span 5:  China => (country :name (name :op "China"))
Oracle Span 6:  cost => (thing :ARG2-of cost-01)
Oracle Span 7:  country => country
Oracle Span 8:  dares => dare-01
Oracle Span 9:  defense => defend-01
Oracle Span 10:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 11:  fight => fight-01
Oracle Span 12:  fishermen => (person :ARG0-of fish-01)
Oracle Span 13:  force => force
Oracle Span 14:  guard => guard-01
Oracle Span 15:  I => i
Oracle Span 16:  invade => invade-01
Oracle Span 17:  Japan => (country :name (name :op "Japan"))
Oracle Span 18:  lose => lose-02
Oracle Span 19:  military => military
Oracle Span 20:  protect => protect-01
Oracle Span 21:  scale => scale
Oracle Span 22:  small => small
Oracle Span 23:  sovereignty => sovereignty
Oracle Span 24:  strengthens => strengthen-01
Oracle Span 25:  suggest => suggest-01
Oracle Span 26:  territory => territory
Oracle Span 27:  war => war
Oracle Span 28:  we => we
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 49-50:   => cost-01
Span 54-55:   => lose-02
Span 51-52:   => (country :name (name :op "China"))
Span 3-4:  China => (country :name (name :op "China"))
Span 44-45:  cost. => self
Span 9-11:  Diaoyu Islands, => (island :name (name :op "Islands" :op "Diaoyu"))
Span 35-36:  fight => force
Span 16-17:  fishermen => protect-01
Span 32-33:  force, => territory
Span 6-7:  guard => guard-01
Span 0-1:  I => i
Span 27-28:  invade => (country :name (name :op "Japan"))
Span 12-13:  it => make-02
Span 24-25:  Japan => country
Span 42-43:  of => war-01
Span 20-21:  of => (country :name (name :op "North"))
Span 39-40:  of => fight-01
Span 28-29:  our => dare-01
Span 21-22:  our => sovereignty
Span 14-15:  protect => (rate-entity-91 :ARG3 (temporal-quantity :unit day))
Span 41-42:  regardless => small-scale
Span 19-20:  sovereignty => and
Span 4-5:  strengthens => strengthen-01
Span 1-2:  suggest => suggest-01
Span 8-9:  the => (country :name (name :op "North"))
Span 34-35:  will => military
Span 30-31:  with => invade-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 55
Langrangian relaxation converged after 64 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 55
Oracle Span 25-26:  ; => and
Oracle Span 19-20:  and => and
Oracle Span 56-57:  can => possible
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 55-56:  China => (country :name (name :op "China"))
Oracle Span 53-54:  cost => (thing :ARG2-of cost-01)
Oracle Span 24-25:  country => country
Oracle Span 28-29:  dares => dare-01
Oracle Span 48-49:  defense => defend-01
Oracle Span 9-11:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 39-40:  fight => fight-01
Oracle Span 18-19:  fishermen => (person :ARG0-of fish-01)
Oracle Span 35-36:  force => force
Oracle Span 6-7:  guard => guard-01
Oracle Span 0-1:  I => i
Oracle Span 30-31:  invade => invade-01
Oracle Span 27-28:  Japan => (country :name (name :op "Japan"))
Oracle Span 58-59:  lose => lose-02
Oracle Span 34-35:  military => military
Oracle Span 16-17:  protect => protect-01
Oracle Span 43-44:  scale => scale
Oracle Span 41-42:  small => small
Oracle Span 21-22:  sovereignty => sovereignty
Oracle Span 4-5:  strengthens => strengthen-01
Oracle Span 1-2:  suggest => suggest-01
Oracle Span 32-33:  territory => territory
Oracle Span 44-45:  war => war
Oracle Span 37-38:  we => we

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	suggest	_	VB	VB	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	China	_	NNP	NNP	_	5	nsubj	_	_
5	strengthens	_	VBZ	VBZ	_	2	ccomp	_	_
6	the	_	DT	DT	_	7	det	_	_
7	guard	_	NN	NN	_	5	dobj	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	Diaoyu	_	NNP	NNP	_	11	nn	_	_
11	Islands	_	NNPS	NNPS	_	8	pobj	_	_
12	,	_	,	,	_	2	punct	_	_
13	make	_	VB	VB	_	2	dep	_	_
14	it	_	PRP	PRP	_	13	dobj	_	_
15	daily	_	RB	RB	_	13	advmod	_	_
16	,	_	,	,	_	2	punct	_	_
17	protect	_	VB	VB	_	2	dep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	fishermen	_	NNS	NNS	_	17	dobj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	the	_	DT	DT	_	22	det	_	_
22	sovereignty	_	NN	NN	_	19	conj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	our	_	PRP$	PRP$	_	25	poss	_	_
25	country	_	NN	NN	_	23	pobj	_	_
26	;	_	:	:	_	2	punct	_	_
27	if	_	IN	IN	_	29	mark	_	_
28	Japan	_	NNP	NNP	_	29	nsubj	_	_
29	dares	_	VBZ	VBZ	_	40	advcl	_	_
30	to	_	TO	TO	_	31	aux	_	_
31	invade	_	VB	VB	_	29	xcomp	_	_
32	our	_	PRP$	PRP$	_	33	poss	_	_
33	territory	_	NN	NN	_	31	dobj	_	_
34	with	_	IN	IN	_	31	prep	_	_
35	military	_	JJ	JJ	_	36	amod	_	_
36	force	_	NN	NN	_	34	pobj	_	_
37	,	_	,	,	_	40	punct	_	_
38	we	_	PRP	PRP	_	40	nsubj	_	_
39	will	_	MD	MD	_	40	aux	_	_
40	fight	_	VB	VB	_	2	parataxis	_	_
41	a	_	DT	DT	_	43	det	_	_
42	small-scale	_	JJ	JJ	_	43	amod	_	_
43	war	_	NN	NN	_	40	dobj	_	_
44	of	_	IN	IN	_	43	prep	_	_
45	self-defense	_	NN	NN	_	44	pobj	_	_
46	,	_	,	,	_	40	punct	_	_
47	regardless	_	RB	RB	_	40	advmod	_	_
48	of	_	IN	IN	_	47	prep	_	_
49	the	_	DT	DT	_	50	det	_	_
50	cost	_	NN	NN	_	48	pobj	_	_
51	.	_	.	.	_	2	punct	_	_
1	China	_	NNP	NNP	_	4	nsubj	_	_
2	can	_	MD	MD	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	lose	_	VB	VB	_	0	root	_	_
5	!	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, g2 / guard-01)
(a / and, op, p2 / protect-01)
(a / and, op, s2 / strengthen-01)
(a2 / and, op, p3 / person)
(a2 / and, op, s3 / sovereignty)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, poss, w3 / we)
(c4 / cost-01, ARG2, t3 / thing)
(c5 / country, name, n4 / name)
(d2 / defend-01, instrument, w2 / war)
(d3 / dare-01, ARG0, c5 / country)
(d3 / dare-01, ARG2, i3 / invade-01)
(f / fish-01, ARG0, p3 / person)
(f2 / fight-01, ARG1, w2 / war)
(f2 / fight-01, concession, t3 / thing)
(f2 / fight-01, condition, d3 / dare-01)
(f3 / force, mod, m3 / military)
(g2 / guard-01, ARG0, c2 / country)
(g2 / guard-01, ARG1, i2 / island)
(i2 / island, name, n3 / name)
(i3 / invade-01, ARG0, c5 / country)
(i3 / invade-01, ARG1, t / territory)
(i3 / invade-01, manner, f3 / force)
(l / lose-02, ARG0, c / country)
(n / name, op, "China")
(n2 / name, op, "China")
(n3 / name, op, "Diaoyu")
(n3 / name, op, "Islands")
(n4 / name, op, "Japan")
(p / possible, domain, l / lose-02)
(p2 / protect-01, ARG0, c2 / country)
(p2 / protect-01, ARG1, a2 / and)
(s / suggest-01, ARG0, i / i)
(s / suggest-01, ARG1, a / and)
(s2 / strengthen-01, ARG0, c2 / country)
(s3 / sovereignty, poss, c3 / country)
(s4 / scale, mod, s5 / small)
(w2 / war, mod, s4 / scale)

Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),force,,territory,false), Span(42,43,List(1),of,war-01,false), Span(3,4,List(4, 3, 2),China,(country :name (name :op "China")),false), Span(12,13,List(5),it,make-02,false), Span(35,36,List(6),fight,force,false), Span(41,42,List(7),regardless,small-scale,false), Span(49,50,List(8),,cost-01,false), Span(0,1,List(9),I,i,false), Span(1,2,List(10),suggest,suggest-01,false), Span(20,21,List(13, 12, 11),of,(country :name (name :op "North")),false), Span(4,5,List(14),strengthens,strengthen-01,false), Span(34,35,List(15),will,military,false), Span(28,29,List(16),our,dare-01,false), Span(16,17,List(17),fishermen,protect-01,false), Span(14,15,List(20, 19, 18),protect,(rate-entity-91 :ARG3 (temporal-quantity :unit day)),false), Span(21,22,List(21),our,sovereignty,false), Span(44,45,List(22),cost.,self,false), Span(54,55,List(23),,lose-02,false), Span(51,52,List(26, 25, 24),,(country :name (name :op "China")),false), Span(24,25,List(27),Japan,country,false), Span(8,9,List(30, 29, 28),the,(country :name (name :op "North")),false), Span(27,28,List(33, 32, 31),invade,(country :name (name :op "Japan")),false), Span(9,11,List(37, 36, 35, 34),Diaoyu Islands,,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(39,40,List(38),of,fight-01,false), Span(19,20,List(39),sovereignty,and,false), Span(30,31,List(40),with,invade-01,false), Span(6,7,List(41),guard,guard-01,false)),Map(39 -> and, 30 -> "North", 2 -> country, 5 -> make-02, 33 -> "Japan", 27 -> country, 12 -> name, 8 -> cost-01, 15 -> military, 36 -> "Islands", 21 -> sovereignty, 18 -> rate-entity-91, 24 -> country, 41 -> guard-01, 35 -> name, 7 -> small-scale, 1 -> war-01, 17 -> protect-01, 23 -> lose-02, 38 -> fight-01, 26 -> "China", 4 -> "China", 11 -> country, 32 -> name, 14 -> strengthen-01, 29 -> name, 20 -> day, 34 -> island, 28 -> country, 6 -> force, 40 -> invade-01, 9 -> i, 0 -> territory, 22 -> self, 16 -> dare-01, 37 -> "Diaoyu", 19 -> temporal-quantity, 10 -> suggest-01, 3 -> name, 31 -> country, 25 -> name, 13 -> "North"),Map(s5 -> self, n -> name, w -> war-01, s2 -> suggest-01, t -> territory, m2 -> military, c7 -> country, n4 -> name, c4 -> country, s -> small-scale, s4 -> sovereignty, m -> make-02, d -> dare-01, i3 -> invade-01, g -> guard-01, p -> protect-01, a -> and, c3 -> country, n3 -> name, n6 -> name, d2 -> day, c6 -> country, i2 -> island, t2 -> temporal-quantity, i -> i, r -> rate-entity-91, c -> country, s3 -> strengthen-01, f2 -> fight-01, l -> lose-02, f -> force, n2 -> name, c2 -> cost-01, n5 -> name, c5 -> country))),[Ljava.lang.String;@2394305e,Annotation([Ljava.lang.String;@491158f,[Ljava.lang.String;@f614961,[Ljava.lang.String;@27241fa4),Annotation([Ljava.lang.String;@2530ddde,[Ljava.lang.String;@2981999a,[Ledu.cmu.lti.nlp.amr.Dependency;@2caef78a),Annotation([Ljava.lang.String;@2bf01484,[Ljava.lang.String;@80df209,[Ljava.lang.String;@2d65e7db),Annotation([Ljava.lang.String;@762c475a,[Ljava.lang.String;@5d53392f,[Ledu.cmu.lti.nlp.amr.Entity;@3a290536))
AMR:
(a / and, op, s4 / sovereignty)
(c / country, name, n / name)
(c2 / cost-01, ARG1, s5 / self)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(c4 / country, op, f2 / fight-01)
(c6 / country, name, n4 / name)
(c7 / country, name, n5 / name)
(d / dare-01, ARG0, c7 / country)
(d / dare-01, ARG1, i3 / invade-01)
(f / force, mod, m2 / military)
(f2 / fight-01, ARG0, a / and)
(f2 / fight-01, ARG1, s5 / self)
(f2 / fight-01, condition, d / dare-01)
(g / guard-01, ARG1, i2 / island)
(i2 / island, mod, c6 / country)
(i2 / island, name, n6 / name)
(i3 / invade-01, ARG0, c7 / country)
(i3 / invade-01, ARG1, t / territory)
(i3 / invade-01, ARG2, f / force)
(l / lose-02, ARG1, f2 / fight-01)
(m / make-02, ARG0, i / i)
(m / make-02, ARG1, r / rate-entity-91)
(n / name, op, "China")
(n2 / name, op, "North")
(n3 / name, op, "China")
(n4 / name, op, "North")
(n5 / name, op, "Japan")
(n6 / name, op, "Diaoyu")
(n6 / name, op, "Islands")
(p / protect-01, ARG0, i / i)
(p / protect-01, ARG1, a / and)
(r / rate-entity-91, ARG3, t2 / temporal-quantity)
(s2 / suggest-01, ARG0, i / i)
(s2 / suggest-01, ARG1, s3 / strengthen-01)
(s3 / strengthen-01, ARG0, c / country)
(s3 / strengthen-01, ARG1, g / guard-01)
(s4 / sovereignty, mod, c3 / country)
(s4 / sovereignty, poss, c5 / country)
(t2 / temporal-quantity, unit, d2 / day)
(w / war-01, ARG0, s / small-scale)
(w / war-01, ARG1, s5 / self)

Decoded in 8,291,706 microseconds
Sentence: We need shows in life, but it is really p. to show yourself within someone's embrace.

Oracle Span 1:  but => contrast-01
Oracle Span 2:  embrace => embrace-02
Oracle Span 3:  life => life
Oracle Span 4:  need => need-01
Oracle Span 5:  really => really
Oracle Span 6:  show => show
Oracle Span 7:  shows => show-01
Oracle Span 8:  someone => someone
Oracle Span 9:  We => we
Spans:
Span 17-18:   => embrace-01
Span 15-16:  embrace. => someone
Span 7-8:  is => country
Span 6-7:  it => bunt-01
Span 4-5:  life, => life
Span 1-2:  need => need-01
Span 9-10:  p. => really
Span 2-3:  shows => show-01
Span 14-15:  someone's => within
Span 0-1:  We => we
Span 13-14:  within => outsell-01
Span 12-13:  yourself => show-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 6-7:  but => contrast-01
Oracle Span 17-18:  embrace => embrace-02
Oracle Span 4-5:  life => life
Oracle Span 1-2:  need => need-01
Oracle Span 9-10:  really => really
Oracle Span 12-13:  show => show
Oracle Span 2-3:  shows => show-01
Oracle Span 15-16:  someone => someone
Oracle Span 0-1:  We => we

Dependencies:
1	We	_	PRP	PRP	_	2	nsubj	_	_
2	need	_	VBP	VBP	_	0	root	_	_
3	shows	_	NNS	NNS	_	2	dobj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	life	_	NN	NN	_	4	pobj	_	_
6	,	_	,	,	_	2	punct	_	_
7	but	_	CC	CC	_	2	cc	_	_
8	it	_	PRP	PRP	_	11	nsubj	_	_
9	is	_	VBZ	VBZ	_	11	cop	_	_
10	really	_	RB	RB	_	11	advmod	_	_
11	p.	_	JJ	JJ	_	2	conj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	show	_	VB	VB	_	11	xcomp	_	_
14	yourself	_	PRP	PRP	_	13	dobj	_	_
15	within	_	IN	IN	_	13	prep	_	_
16	someone	_	NN	NN	_	18	poss	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	embrace	_	NN	NN	_	15	pobj	_	_
19	.	_	.	.	_	2	punct	_	_

Oracle:
(c / contrast-01, ARG1, n / need-01)
(e / embrace-02, ARG0, s2 / someone)
(n / need-01, ARG0, w / we)
(n / need-01, ARG1, s3 / show)
(n / need-01, prep-in, l / life)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),embrace.,someone,false), Span(1,2,List(1),need,need-01,false), Span(12,13,List(2),yourself,show-01,false), Span(17,18,List(3),,embrace-01,false), Span(4,5,List(4),life,,life,false), Span(9,10,List(5),p.,really,false), Span(13,14,List(6),within,outsell-01,false), Span(2,3,List(7),shows,show-01,false), Span(14,15,List(8),someone's,within,false), Span(7,8,List(9),is,country,false), Span(6,7,List(10),it,bunt-01,false), Span(0,1,List(11),We,we,false)),Map(2 -> show-01, 5 -> really, 8 -> within, 7 -> show-01, 1 -> need-01, 11 -> we, 4 -> life, 6 -> outsell-01, 9 -> country, 0 -> someone, 10 -> bunt-01, 3 -> embrace-01),Map(w -> within, e -> embrace-01, n -> need-01, b -> bunt-01, s2 -> show-01, s -> someone, w2 -> we, r -> really, c -> country, s3 -> show-01, l -> life, o -> outsell-01))),[Ljava.lang.String;@7480cb6d,Annotation([Ljava.lang.String;@7730e92e,[Ljava.lang.String;@7e191a30,[Ljava.lang.String;@141f3206),Annotation([Ljava.lang.String;@6636484b,[Ljava.lang.String;@16bfb43a,[Ledu.cmu.lti.nlp.amr.Dependency;@20c1e447),Annotation([Ljava.lang.String;@4da37d5b,[Ljava.lang.String;@198310b4,[Ljava.lang.String;@727669da),Annotation([Ljava.lang.String;@5d3a480f,[Ljava.lang.String;@b25af56,[Ledu.cmu.lti.nlp.amr.Entity;@a221836))
AMR:
(b / bunt-01, ARG1, n / need-01)
(b / bunt-01, ARG6, c / country)
(e / embrace-01, ARG1, s / someone)
(n / need-01, ARG0, w2 / we)
(n / need-01, ARG1, s3 / show-01)
(o / outsell-01, ARG1, w / within)
(r / really, domain, c / country)
(s2 / show-01, ARG1, c / country)
(s2 / show-01, time, w / within)
(s3 / show-01, ARG1, l / life)
(w / within, op, e / embrace-01)

Decoded in 541,267 microseconds
Sentence: I'm just passing by

Oracle Span 1:  I => i
Oracle Span 2:  just => just
Oracle Span 3:  passing => pass-17
Spans:
Span 3-4:  by => pass-01
Span 0-1:  I'm => i
Span 2-3:  passing => just

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 2-3:  just => just
Oracle Span 3-4:  passing => pass-17

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	'm	_	VBP	VBP	_	4	aux	_	_
3	just	_	RB	RB	_	4	advmod	_	_
4	passing	_	VBG	VBG	_	0	root	_	_
5	by	_	IN	IN	_	4	prep	_	_

Oracle:
(p / pass-17, ARG0, i / i)
(p / pass-17, mod, j / just)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),passing,just,false), Span(0,1,List(1),I'm,i,false), Span(3,4,List(2),by,pass-01,false)),Map(2 -> pass-01, 1 -> i, 0 -> just),Map(j -> just, p -> pass-01, i -> i))),[Ljava.lang.String;@7766bfa2,Annotation([Ljava.lang.String;@192b55bb,[Ljava.lang.String;@7655b21d,[Ljava.lang.String;@445ae2fe),Annotation([Ljava.lang.String;@603ce78,[Ljava.lang.String;@4546c58e,[Ledu.cmu.lti.nlp.amr.Dependency;@1ed84261),Annotation([Ljava.lang.String;@d860e56,[Ljava.lang.String;@15ee6190,[Ljava.lang.String;@6677ac16),Annotation([Ljava.lang.String;@3ae021f3,[Ljava.lang.String;@7a96c47,[Ledu.cmu.lti.nlp.amr.Entity;@61ad7fc3))
AMR:
(j / just, domain, i / i)
(p / pass-01, ARG1, i / i)

Decoded in 40,058 microseconds
Sentence: The whole society is like this, not to mention the stars

Oracle Span 1:  society => society
Oracle Span 2:  stars => (person :ARG1-of star-01)
Oracle Span 3:  this => this
Oracle Span 4:  whole => whole
Spans:
Span 11-12:   => star
Span 2-3:  society => society
Span 9-10:  the => mention-01
Span 5-6:  this, => this
Span 1-2:  whole => whole

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 2-3:  society => society
Oracle Span 11-12:  stars => (person :ARG1-of star-01)
Oracle Span 5-6:  this => this
Oracle Span 1-2:  whole => whole

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	whole	_	JJ	JJ	_	3	amod	_	_
3	society	_	NN	NN	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	0	root	_	_
5	like	_	IN	IN	_	4	prep	_	_
6	this	_	DT	DT	_	5	pobj	_	_
7	,	_	,	,	_	6	punct	_	_
8	not	_	RB	RB	_	10	neg	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	mention	_	VB	VB	_	6	vmod	_	_
11	the	_	DT	DT	_	12	det	_	_
12	stars	_	NNS	NNS	_	10	dobj	_	_

Oracle:
(s / society, mod, w / whole)
(s2 / star-01, ARG1, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),whole,whole,false), Span(5,6,List(1),this,,this,false), Span(9,10,List(2),the,mention-01,false), Span(2,3,List(3),society,society,false), Span(11,12,List(4),,star,false)),Map(2 -> mention-01, 1 -> this, 4 -> star, 0 -> whole, 3 -> society),Map(w -> whole, s2 -> star, t -> this, s -> society, m -> mention-01))),[Ljava.lang.String;@29f378c,Annotation([Ljava.lang.String;@24816021,[Ljava.lang.String;@470b4d89,[Ljava.lang.String;@3b4d7fad),Annotation([Ljava.lang.String;@40951c1f,[Ljava.lang.String;@6f3afc44,[Ledu.cmu.lti.nlp.amr.Dependency;@7240932f),Annotation([Ljava.lang.String;@22203add,[Ljava.lang.String;@4abdbf62,[Ljava.lang.String;@72ddb2ad),Annotation([Ljava.lang.String;@4729e32,[Ljava.lang.String;@2727aab3,[Ledu.cmu.lti.nlp.amr.Entity;@c6479a))
AMR:
(m / mention-01, ARG0, s / society)
(m / mention-01, ARG1, s2 / star)
(m / mention-01, ARG6, t / this)
(s / society, mod, w / whole)

Decoded in 144,312 microseconds
Sentence: Damn it being not sexy

Oracle Span 1:  Damn => damn-01
Oracle Span 2:  sexy => sexy
Spans:
Span 0-1:  Damn => (damn :mode expressive)
Span 4-5:  sexy => sight-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Damn => damn-01
Oracle Span 4-5:  sexy => sexy

Dependencies:
1	Damn	_	VB	VB	_	0	root	_	_
2	it	_	PRP	PRP	_	5	nsubj	_	_
3	being	_	VBG	VBG	_	5	cop	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	sexy	_	JJ	JJ	_	1	dep	_	_

Oracle:
(d / damn-01, ARG1, s / sexy)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),sexy,sight-01,false), Span(0,1,List(2, 1),Damn,(damn :mode expressive),false)),Map(2 -> expressive, 1 -> damn, 0 -> sight-01),Map(e -> expressive, s -> sight-01, d -> damn))),[Ljava.lang.String;@46e9a1c2,Annotation([Ljava.lang.String;@3d33f1d3,[Ljava.lang.String;@bba5901,[Ljava.lang.String;@2145ce7c),Annotation([Ljava.lang.String;@2a298c27,[Ljava.lang.String;@8b65dd8,[Ledu.cmu.lti.nlp.amr.Dependency;@511d7f9e),Annotation([Ljava.lang.String;@5ea47def,[Ljava.lang.String;@388a8aa8,[Ljava.lang.String;@26848fc),Annotation([Ljava.lang.String;@38b336a0,[Ljava.lang.String;@45856f5c,[Ledu.cmu.lti.nlp.amr.Entity;@2936628e))
AMR:
(d / damn, mode, e / expressive)
(s / sight-01, ARG1, d / damn)

Decoded in 43,282 microseconds
Sentence: It's totally unacceptable

Oracle Span 1:  It => it
Oracle Span 2:  totally => total
Oracle Span 3:  unacceptable => accept-01
Spans:
Span 3-4:   => accentuate-01
Span 0-1:  It's => it
Span 1-2:  totally => be-located-at-91
Span 2-3:  unacceptable => total

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 0-1:  It => it
Oracle Span 2-3:  totally => total
Oracle Span 3-4:  unacceptable => accept-01

Dependencies:
1	It	_	PRP	PRP	_	4	nsubj	_	_
2	's	_	VBZ	VBZ	_	4	cop	_	_
3	totally	_	RB	RB	_	4	advmod	_	_
4	unacceptable	_	JJ	JJ	_	0	root	_	_

Oracle:
(a / accept-01, ARG1, i / it)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),It's,it,false), Span(2,3,List(1),unacceptable,total,false), Span(3,4,List(2),,accentuate-01,false), Span(1,2,List(3),totally,be-located-at-91,false)),Map(2 -> accentuate-01, 1 -> total, 0 -> it, 3 -> be-located-at-91),Map(b -> be-located-at-91, t -> total, a -> accentuate-01, i -> it))),[Ljava.lang.String;@56e4adb5,Annotation([Ljava.lang.String;@2ca89a7e,[Ljava.lang.String;@4e2ba65c,[Ljava.lang.String;@5d330eb3),Annotation([Ljava.lang.String;@2ec989a5,[Ljava.lang.String;@465a9d68,[Ledu.cmu.lti.nlp.amr.Dependency;@55d0dab9),Annotation([Ljava.lang.String;@10530026,[Ljava.lang.String;@72b53728,[Ljava.lang.String;@601645cb),Annotation([Ljava.lang.String;@33c04e62,[Ljava.lang.String;@3b9a2a0c,[Ledu.cmu.lti.nlp.amr.Entity;@60cd5620))
AMR:
(a / accentuate-01, ARG1, i / it)
(a / accentuate-01, ARG6, t / total)
(b / be-located-at-91, ARG1, a / accentuate-01)

Decoded in 58,592 microseconds
Sentence: Agree, just cheap entertainers. Their reputation in feudal China somewhat makes sense.

Oracle Span 1:  Agree => agree-01
Oracle Span 2:  cheap => cheap
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  entertainers => (person :ARG0-of entertain-01)
Oracle Span 5:  feudal => feudal
Oracle Span 6:  just => just
Oracle Span 7:  makes => make-01
Oracle Span 8:  reputation => (thing :ARG2-of repute-01)
Oracle Span 9:  sense => sense
Oracle Span 10:  somewhat => somewhat
NER Entity: (country :name (name :op "China"))
Spans:
Span 13-14:   => sense
Span 0-1:  Agree, => (person :ARG0-of have-org-role-91)
Span 2-3:  cheap => just
Span 3-4:  entertainers. => cheap
Span 7-8:  feudal => reputation
Span 10-11:  makes => (country :name (name :op "China"))
Span 11-12:  sense. => e

 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Langrangian relaxation converged after 17 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Oracle Span 0-1:  Agree => agree-01
Oracle Span 3-4:  cheap => cheap
Oracle Span 10-11:  China => (country :name (name :op "China"))
Oracle Span 4-5:  entertainers => (person :ARG0-of entertain-01)
Oracle Span 9-10:  feudal => feudal
Oracle Span 2-3:  just => just
Oracle Span 12-13:  makes => make-01
Oracle Span 7-8:  reputation => (thing :ARG2-of repute-01)
Oracle Span 13-14:  sense => sense
Oracle Span 11-12:  somewhat => somewhat

Dependencies:
1	Agree	_	NNP	NNP	_	0	root	_	_
2	,	_	,	,	_	1	punct	_	_
3	just	_	RB	RB	_	5	advmod	_	_
4	cheap	_	JJ	JJ	_	5	amod	_	_
5	entertainers	_	NNS	NNS	_	1	appos	_	_
6	.	_	.	.	_	1	punct	_	_
1	Their	_	PRP$	PRP$	_	2	poss	_	_
2	reputation	_	NN	NN	_	7	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	feudal	_	JJ	JJ	_	5	amod	_	_
5	China	_	NNP	NNP	_	3	pobj	_	_
6	somewhat	_	RB	RB	_	7	advmod	_	_
7	makes	_	VBZ	VBZ	_	0	root	_	_
8	sense	_	NN	NN	_	7	dobj	_	_
9	.	_	.	.	_	7	punct	_	_

Oracle:
(a / agree-01, ARG1, p / person)
(c2 / country, mod, f / feudal)
(c2 / country, name, n / name)
(e / entertain-01, ARG0, p / person)
(e / entertain-01, mod, c / cheap)
(m2 / make-01, ARG0, t2 / thing)
(m2 / make-01, ARG1, s / sense)
(m2 / make-01, degree, s2 / somewhat)
(n / name, op, "China")
(p / person, mod, j / just)
(r / repute-01, ARG2, t2 / thing)
(r / repute-01, location, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),sense.,e,false), Span(0,1,List(2, 1),Agree,,(person :ARG0-of have-org-role-91),false), Span(3,4,List(3),entertainers.,cheap,false), Span(7,8,List(4),feudal,reputation,false), Span(13,14,List(5),,sense,false), Span(2,3,List(6),cheap,just,false), Span(10,11,List(9, 8, 7),makes,(country :name (name :op "China")),false)),Map(2 -> have-org-role-91, 5 -> sense, 8 -> name, 7 -> country, 1 -> person, 4 -> reputation, 6 -> just, 9 -> "China", 0 -> e, 3 -> cheap),Map(n -> name, e -> e, h -> have-org-role-91, j -> just, s -> sense, p -> person, r -> reputation, c -> cheap, c2 -> country))),[Ljava.lang.String;@90d991e,Annotation([Ljava.lang.String;@3300cc00,[Ljava.lang.String;@6aa04f46,[Ljava.lang.String;@15f06f75),Annotation([Ljava.lang.String;@70d0d1bc,[Ljava.lang.String;@4505736a,[Ledu.cmu.lti.nlp.amr.Dependency;@2db7cef3),Annotation([Ljava.lang.String;@3b2a97f7,[Ljava.lang.String;@4d81ec1f,[Ljava.lang.String;@23f158e6),Annotation([Ljava.lang.String;@3022da3d,[Ljava.lang.String;@5f5876e1,[Ledu.cmu.lti.nlp.amr.Entity;@1dfb8801))
AMR:
(c2 / country, name, n / name)
(e / e, calendar, r / reputation)
(e / e, mod, s / sense)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, j / just)
(h / have-org-role-91, ARG6, r / reputation)
(j / just, calendar, c / cheap)
(n / name, op, "China")
(r / reputation, poss, c2 / country)

Decoded in 276,578 microseconds
Sentence: Their life looks glorious

Oracle Span 1:  glorious => glorious
Oracle Span 2:  looks => look-02
Spans:
Span 1-2:  life => life
Span 2-3:  looks => look-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  glorious => glorious
Oracle Span 2-3:  looks => look-02

Dependencies:
1	Their	_	PRP$	PRP$	_	2	poss	_	_
2	life	_	NN	NN	_	3	nsubj	_	_
3	looks	_	VBZ	VBZ	_	0	root	_	_
4	glorious	_	JJ	JJ	_	3	dobj	_	_

Oracle:
(l / look-02, ARG1, g / glorious)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),looks,look-02,false), Span(1,2,List(1),life,life,false)),Map(1 -> life, 0 -> look-02),Map(l2 -> life, l -> look-02))),[Ljava.lang.String;@4ec02bac,Annotation([Ljava.lang.String;@17a75fce,[Ljava.lang.String;@e39129b,[Ljava.lang.String;@26b06d1),Annotation([Ljava.lang.String;@4db9d07b,[Ljava.lang.String;@604daf2d,[Ledu.cmu.lti.nlp.amr.Dependency;@26a6d475),Annotation([Ljava.lang.String;@7ca113fe,[Ljava.lang.String;@7f183e19,[Ljava.lang.String;@72a1c210),Annotation([Ljava.lang.String;@6234a54d,[Ljava.lang.String;@16fe7416,[Ledu.cmu.lti.nlp.amr.Entity;@28a87826))
AMR:
(l / look-02, ARG1, l2 / life)

Decoded in 37,948 microseconds
Sentence: a group of people of nine professions

Oracle Span 1:  group => group
Oracle Span 2:  nine => 9
Oracle Span 3:  professions => (have-org-role-91 :ARG2 profession)
Spans:
Span 0-1:  a => 1
Span 1-2:  group => group
Span 6-7:  professions => profession

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  group => group
Oracle Span 5-6:  nine => 9
Oracle Span 6-7:  professions => (have-org-role-91 :ARG2 profession)

Dependencies:
1	a	_	DT	DT	_	2	det	_	_
2	group	_	NN	NN	_	0	root	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	people	_	NNS	NNS	_	3	pobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	nine	_	CD	CD	_	7	num	_	_
7	professions	_	NNS	NNS	_	5	pobj	_	_

Oracle:
(h / have-org-role-91, ARG2, p2 / profession)
(p2 / profession, quant, 9 / 9)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),group,group,false), Span(0,1,List(1),a,1,false), Span(6,7,List(2),professions,profession,false)),Map(2 -> profession, 1 -> 1, 0 -> group),Map(p -> profession, 1 -> 1, g -> group))),[Ljava.lang.String;@7608ae39,Annotation([Ljava.lang.String;@7b8197c7,[Ljava.lang.String;@68089bd3,[Ljava.lang.String;@618c6b8d),Annotation([Ljava.lang.String;@524678e3,[Ljava.lang.String;@250ef2c3,[Ledu.cmu.lti.nlp.amr.Dependency;@9f433b2),Annotation([Ljava.lang.String;@b26f102,[Ljava.lang.String;@6a4601e5,[Ljava.lang.String;@380c7e84),Annotation([Ljava.lang.String;@104da394,[Ljava.lang.String;@2c5ffe7e,[Ledu.cmu.lti.nlp.amr.Entity;@764c9b39))
AMR:
(1 / 1, op, p / profession)
(g / group, mod, 1 / 1)

Decoded in 70,047 microseconds
Sentence: Life is hard.

Oracle Span 1:  hard => hard
Oracle Span 2:  Life => life
Spans:
Span 2-3:  hard. => hard
Span 0-1:  Life => life

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  hard => hard
Oracle Span 0-1:  Life => life

Dependencies:
1	Life	_	NNP	NNP	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	cop	_	_
3	hard	_	JJ	JJ	_	0	root	_	_
4	.	_	.	.	_	3	punct	_	_

Oracle:
(h / hard, domain, l / life)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Life,life,false), Span(2,3,List(1),hard.,hard,false)),Map(1 -> hard, 0 -> life),Map(h -> hard, l -> life))),[Ljava.lang.String;@e26648,Annotation([Ljava.lang.String;@38e1504e,[Ljava.lang.String;@3d745413,[Ljava.lang.String;@514202da),Annotation([Ljava.lang.String;@4281ee9c,[Ljava.lang.String;@70d0b5a2,[Ledu.cmu.lti.nlp.amr.Dependency;@6f9bb367),Annotation([Ljava.lang.String;@2e0e389c,[Ljava.lang.String;@6336d6cf,[Ljava.lang.String;@163e02ae),Annotation([Ljava.lang.String;@248c8b85,[Ljava.lang.String;@7b998d50,[Ledu.cmu.lti.nlp.amr.Entity;@2eccac42))
AMR:
(h / hard, domain, l / life)

Decoded in 32,407 microseconds
Sentence: :shocked:

Oracle Span 1:  shocked => shock-01
Spans:
Span 1-2:   => shock-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  shocked => shock-01

Dependencies:
1	:	_	:	:	_	2	punct	_	_
2	shocked	_	VBN	VBN	_	0	root	_	_
3	:	_	:	:	_	2	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),,shock-01,false)),Map(0 -> shock-01),Map(s -> shock-01))),[Ljava.lang.String;@55aabf42,Annotation([Ljava.lang.String;@6c320052,[Ljava.lang.String;@1b6e5894,[Ljava.lang.String;@1ffee493),Annotation([Ljava.lang.String;@1f2e1881,[Ljava.lang.String;@63e2aba6,[Ledu.cmu.lti.nlp.amr.Dependency;@a21f5b6),Annotation([Ljava.lang.String;@6213521d,[Ljava.lang.String;@d16b4ce,[Ljava.lang.String;@7bdf9151),Annotation([Ljava.lang.String;@7e5657d9,[Ljava.lang.String;@6ad61b4,[Ledu.cmu.lti.nlp.amr.Entity;@3ea5156b))
AMR:


Decoded in 23,827 microseconds
Sentence: That's normal, it has always been the case that a whore is heartless and a performer is unrighteous

Oracle Span 1:  always => always
Oracle Span 2:  and => and
Oracle Span 3:  heartless => heartless
Oracle Span 4:  normal => normal
Oracle Span 5:  performer => (person :ARG0-of perform-01)
Oracle Span 6:  That => that
Oracle Span 7:  unrighteous => (righteous :polarity -)
Oracle Span 8:  whore => whore
Spans:
Span 14-15:  a => heartless
Span 9-10:  a => case
Span 12-13:  heartless => whore-01
Span 2-3:  it => normal
Span 15-16:  performer => and
Span 0-1:  That's => that
Span 6-7:  the => always

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 6-7:  always => always
Oracle Span 15-16:  and => and
Oracle Span 14-15:  heartless => heartless
Oracle Span 2-3:  normal => normal
Oracle Span 17-18:  performer => (person :ARG0-of perform-01)
Oracle Span 0-1:  That => that
Oracle Span 19-20:  unrighteous => (righteous :polarity -)
Oracle Span 12-13:  whore => whore

Dependencies:
1	That	_	DT	DT	_	3	nsubj	_	_
2	's	_	VBZ	VBZ	_	3	cop	_	_
3	normal	_	JJ	JJ	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	it	_	PRP	PRP	_	10	nsubj	_	_
6	has	_	VBZ	VBZ	_	10	aux	_	_
7	always	_	RB	RB	_	10	advmod	_	_
8	been	_	VBN	VBN	_	10	cop	_	_
9	the	_	DT	DT	_	10	det	_	_
10	case	_	NN	NN	_	3	conj	_	_
11	that	_	IN	IN	_	15	mark	_	_
12	a	_	DT	DT	_	13	det	_	_
13	whore	_	NN	NN	_	15	nsubj	_	_
14	is	_	VBZ	VBZ	_	15	cop	_	_
15	heartless	_	JJ	JJ	_	10	ccomp	_	_
16	and	_	CC	CC	_	3	cc	_	_
17	a	_	DT	DT	_	18	det	_	_
18	performer	_	NN	NN	_	20	nsubj	_	_
19	is	_	VBZ	VBZ	_	20	cop	_	_
20	unrighteous	_	JJ	JJ	_	3	conj	_	_

Oracle:
(h / heartless, domain, w2 / whore)
(n / normal, domain, t / that)
(p3 / perform-01, ARG0, p2 / person)
(r / righteous, domain, p2 / person)
(r / righteous, polarity, -)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),the,always,false), Span(14,15,List(1),a,heartless,false), Span(2,3,List(2),it,normal,false), Span(0,1,List(3),That's,that,false), Span(12,13,List(4),heartless,whore-01,false), Span(15,16,List(5),performer,and,false), Span(9,10,List(6),a,case,false)),Map(2 -> normal, 5 -> and, 1 -> heartless, 4 -> whore-01, 6 -> case, 0 -> always, 3 -> that),Map(w -> whore-01, n -> normal, h -> heartless, t -> that, a -> always, a2 -> and, c -> case))),[Ljava.lang.String;@75a8ec32,Annotation([Ljava.lang.String;@2cb0d5c6,[Ljava.lang.String;@774306a,[Ljava.lang.String;@26ef12ce),Annotation([Ljava.lang.String;@1414a35d,[Ljava.lang.String;@3e205afc,[Ledu.cmu.lti.nlp.amr.Dependency;@18f1ca32),Annotation([Ljava.lang.String;@46d6d280,[Ljava.lang.String;@77699f4c,[Ljava.lang.String;@4ba2cce7),Annotation([Ljava.lang.String;@5d942ffb,[Ljava.lang.String;@2d26b41b,[Ledu.cmu.lti.nlp.amr.Entity;@160ecd0c))
AMR:
(a2 / and, op, c / case)
(a2 / and, op, n / normal)
(h / heartless, domain, w / whore-01)
(n / normal, calendar, t / that)
(w / whore-01, ARG0, a / always)
(w / whore-01, ARG1, c / case)

Decoded in 552,994 microseconds
Sentence: They want money, not the face

Oracle Span 1:  face => face
Oracle Span 2:  money => money
Oracle Span 3:  They => they
Oracle Span 4:  want => want-01
Spans:
Span 6-7:   => face
Span 2-3:  money, => money
Span 0-1:  They => they
Span 1-2:  want => want-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 6-7:  face => face
Oracle Span 2-3:  money => money
Oracle Span 0-1:  They => they
Oracle Span 1-2:  want => want-01

Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	want	_	VBP	VBP	_	0	root	_	_
3	money	_	NN	NN	_	2	dobj	_	_
4	,	_	,	,	_	3	punct	_	_
5	not	_	RB	RB	_	7	neg	_	_
6	the	_	DT	DT	_	7	det	_	_
7	face	_	NN	NN	_	3	appos	_	_

Oracle:
(w / want-01, ARG0, t / they)
(w / want-01, ARG1, m / money)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),want,want-01,false), Span(6,7,List(1),,face,false), Span(0,1,List(2),They,they,false), Span(2,3,List(3),money,,money,false)),Map(2 -> they, 1 -> face, 0 -> want-01, 3 -> money),Map(w -> want-01, t -> they, m -> money, f -> face))),[Ljava.lang.String;@1996d12c,Annotation([Ljava.lang.String;@5ffb554d,[Ljava.lang.String;@60679576,[Ljava.lang.String;@47930263),Annotation([Ljava.lang.String;@68a3b40c,[Ljava.lang.String;@6df7c568,[Ledu.cmu.lti.nlp.amr.Dependency;@31e73185),Annotation([Ljava.lang.String;@6e38adc0,[Ljava.lang.String;@1bce77df,[Ljava.lang.String;@48413d4b),Annotation([Ljava.lang.String;@402256df,[Ljava.lang.String;@6bdfb5b6,[Ledu.cmu.lti.nlp.amr.Entity;@347479d))
AMR:
(w / want-01, ARG0, t / they)
(w / want-01, ARG1, m / money)
(w / want-01, ARG6, f / face)

Decoded in 100,600 microseconds
Sentence: Have a look at the "wolf with glasses" near Ms. Fan, you will know the actress has no choice but drink with him or she will be forced out or even framed.

Oracle Span 1:  drink => drink-01
Oracle Span 2:  even => even
Oracle Span 3:  forced => force-01
Oracle Span 4:  framed => frame-02
Oracle Span 5:  glasses => glasses
Oracle Span 6:  has => have-condition-91
Oracle Span 7:  Have => have-03
Oracle Span 8:  know => know-01
Oracle Span 9:  look => look-01
Oracle Span 10:  Ms. Fan => (person :name (name :op "Fan" :op "Ms."))
Oracle Span 11:  near => near
Oracle Span 12:  no => -
Oracle Span 13:  or => or
Oracle Span 14:  out => out
Oracle Span 15:  wolf => wolf
Oracle Span 16:  you => you
NER Entity: (country :name (name :op "Ms."))
Spans:
Span 33-34:   => even
Span 34-35:   => frame-01
Span 32-33:   => or
Span 26-27:  be => or
Span 30-31:  even => force-01
Span 10-11:  Fan, => near
Span 16-17:  has => know-01
Span 0-1:  Have => have-03
Span 22-23:  him => bunt-01
Span 2-3:  look => look
Span 8-9:  near => glass
Span 23-24:  or => drink-01
Span 21-22:  with => choke-01
Span 6-7:  with => wolf

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 23-24:  drink => drink-01
Oracle Span 33-34:  even => even
Oracle Span 30-31:  forced => force-01
Oracle Span 34-35:  framed => frame-02
Oracle Span 8-9:  glasses => glasses
Oracle Span 19-20:  has => have-condition-91
Oracle Span 0-1:  Have => have-03
Oracle Span 16-17:  know => know-01
Oracle Span 2-3:  look => look-01
Oracle Span 11-13:  Ms. Fan => (person :name (name :op "Fan" :op "Ms."))
Oracle Span 10-11:  near => near
Oracle Span 20-21:  no => -
Oracle Span 26-27:  or => or
Oracle Span 31-32:  out => out
Oracle Span 6-7:  wolf => wolf
Oracle Span 14-15:  you => you

Dependencies:
1	Have	_	VBG	VBG	_	17	vmod	_	_
2	a	_	DT	DT	_	3	det	_	_
3	look	_	NN	NN	_	1	dobj	_	_
4	at	_	IN	IN	_	1	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	"	_	``	``	_	7	punct	_	_
7	wolf	_	NN	NN	_	4	pobj	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	glasses	_	NNS	NNS	_	8	pobj	_	_
10	"	_	''	''	_	9	punct	_	_
11	near	_	IN	IN	_	9	prep	_	_
12	Ms.	_	NNP	NNP	_	13	nn	_	_
13	Fan	_	NNP	NNP	_	11	pobj	_	_
14	,	_	,	,	_	17	punct	_	_
15	you	_	PRP	PRP	_	17	nsubj	_	_
16	will	_	MD	MD	_	17	aux	_	_
17	know	_	VB	VB	_	0	root	_	_
18	the	_	DT	DT	_	19	det	_	_
19	actress	_	NN	NN	_	20	nsubj	_	_
20	has	_	VBZ	VBZ	_	17	dep	_	_
21	no	_	DT	DT	_	22	neg	_	_
22	choice	_	NN	NN	_	20	dobj	_	_
23	but	_	CC	CC	_	20	cc	_	_
24	drink	_	VBP	VBP	_	20	conj	_	_
25	with	_	IN	IN	_	24	prep	_	_
26	him	_	PRP	PRP	_	25	pobj	_	_
27	or	_	CC	CC	_	20	cc	_	_
28	she	_	PRP	PRP	_	31	nsubjpass	_	_
29	will	_	MD	MD	_	31	aux	_	_
30	be	_	VB	VB	_	31	auxpass	_	_
31	forced	_	VBN	VBN	_	20	conj	_	_
32	out	_	RP	RP	_	31	prt	_	_
33	or	_	CC	CC	_	31	cc	_	_
34	even	_	RB	RB	_	35	advmod	_	_
35	framed	_	VBN	VBN	_	31	conj	_	_
36	.	_	.	.	_	17	punct	_	_

Oracle:
(f / force-01, ARG2, o3 / out)
(f / force-01, polarity, - / -)
(f2 / frame-02, mod, e / even)
(h2 / have-03, ARG0, w / wolf)
(h2 / have-03, ARG1, g / glasses)
(h3 / have-condition-91, ARG1, o2 / or)
(l / look-01, ARG0, y2 / you)
(l / look-01, ARG1, w / wolf)
(n / near, op, p / person)
(n2 / name, op, "Fan")
(n2 / name, op, "Ms.")
(o2 / or, op, f / force-01)
(o2 / or, op, f2 / frame-02)
(p / person, name, n2 / name)
(w / wolf, location, n / near)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),has,know-01,false), Span(33,34,List(1),,even,false), Span(34,35,List(2),,frame-01,false), Span(0,1,List(3),Have,have-03,false), Span(2,3,List(4),look,look,false), Span(21,22,List(5),with,choke-01,false), Span(6,7,List(6),with,wolf,false), Span(10,11,List(7),Fan,,near,false), Span(8,9,List(8),near,glass,false), Span(32,33,List(9),,or,false), Span(30,31,List(10),even,force-01,false), Span(23,24,List(11),or,drink-01,false), Span(22,23,List(12),him,bunt-01,false), Span(26,27,List(13),be,or,false)),Map(2 -> frame-01, 5 -> choke-01, 12 -> bunt-01, 8 -> glass, 7 -> near, 1 -> even, 4 -> look, 11 -> drink-01, 6 -> wolf, 0 -> know-01, 9 -> or, 3 -> have-03, 10 -> force-01, 13 -> or),Map(e -> even, w -> wolf, n -> near, h -> have-03, k -> know-01, b -> bunt-01, d -> drink-01, g -> glass, o2 -> or, c -> choke-01, l -> look, f2 -> force-01, f -> frame-01, o -> or))),[Ljava.lang.String;@e580dd1,Annotation([Ljava.lang.String;@486be27f,[Ljava.lang.String;@92d429,[Ljava.lang.String;@32c298fc),Annotation([Ljava.lang.String;@7cba3df0,[Ljava.lang.String;@6bd54002,[Ledu.cmu.lti.nlp.amr.Dependency;@7d70f2cd),Annotation([Ljava.lang.String;@5bd380e7,[Ljava.lang.String;@76ab73d0,[Ljava.lang.String;@373fe857),Annotation([Ljava.lang.String;@4d2382e7,[Ljava.lang.String;@ab0e71c,[Ledu.cmu.lti.nlp.amr.Entity;@27282069))
AMR:
(b / bunt-01, ARG1, g / glass)
(b / bunt-01, ARG2, d / drink-01)
(c / choke-01, ARG1, h / have-03)
(d / drink-01, ARG1, c / choke-01)
(f / frame-01, ARG1, n / near)
(f / frame-01, manner, e / even)
(f2 / force-01, ARG1, b / bunt-01)
(h / have-03, ARG1, l / look)
(k / know-01, ARG0, w / wolf)
(k / know-01, ARG1, b / bunt-01)
(o / or, op, f / frame-01)
(o / or, op, f2 / force-01)
(o2 / or, op, d / drink-01)

Decoded in 10,557,394 microseconds
Sentence: SOB

Spans:
Span 0-1:  SOB => sob-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0

Dependencies:
1	SOB	_	NNP	NNP	_	0	root	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),SOB,sob-01,false)),Map(0 -> sob-01),Map(s -> sob-01))),[Ljava.lang.String;@425ddd22,Annotation([Ljava.lang.String;@7dd1b7a7,[Ljava.lang.String;@592f2ab3,[Ljava.lang.String;@20201f24),Annotation([Ljava.lang.String;@c3862cf,[Ljava.lang.String;@7c249060,[Ledu.cmu.lti.nlp.amr.Dependency;@5cfe47e5),Annotation([Ljava.lang.String;@7c07aa61,[Ljava.lang.String;@33669134,[Ljava.lang.String;@6b19a0a8),Annotation([Ljava.lang.String;@45761341,[Ljava.lang.String;@463ed2c,[Ledu.cmu.lti.nlp.amr.Entity;@38b33a5))
AMR:


Decoded in 18,804 microseconds
Sentence: It's ok as long as there is something to eat :loveliness:

Oracle Span 1:  eat => eat-01
Oracle Span 2:  loveliness => loveliness
Oracle Span 3:  something => something
Spans:
Span 12-13:   => love-01
Span 10-11:  :loveliness: => eat-01
Span 2-3:  as => ok
Span 0-1:  It's => it
Span 3-4:  long => as-well
Span 1-2:  ok => be-located-at-91
Span 8-9:  to => something

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 10-11:  eat => eat-01
Oracle Span 12-13:  loveliness => loveliness
Oracle Span 8-9:  something => something

Dependencies:
1	It	_	PRP	PRP	_	3	nsubjpass	_	_
2	's	_	VBZ	VBZ	_	3	auxpass	_	_
3	ok	_	VBN	VBN	_	0	root	_	_
4	as	_	RB	RB	_	5	advmod	_	_
5	long	_	RB	RB	_	3	advmod	_	_
6	as	_	IN	IN	_	8	mark	_	_
7	there	_	EX	EX	_	8	expl	_	_
8	is	_	VBZ	VBZ	_	5	advcl	_	_
9	something	_	NN	NN	_	8	nsubj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	eat	_	VB	VB	_	9	vmod	_	_
12	:	_	:	:	_	11	punct	_	_
13	loveliness	_	NNS	NNS	_	11	dobj	_	_
14	:	_	:	:	_	3	punct	_	_

Oracle:
(e / eat-01, ARG1, s2 / something)
(s2 / something, mod, l / loveliness)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),It's,it,false), Span(3,4,List(1),long,as-well,false), Span(10,11,List(2),:loveliness:,eat-01,false), Span(2,3,List(3),as,ok,false), Span(1,2,List(4),ok,be-located-at-91,false), Span(8,9,List(5),to,something,false), Span(12,13,List(6),,love-01,false)),Map(2 -> eat-01, 5 -> something, 1 -> as-well, 4 -> be-located-at-91, 6 -> love-01, 0 -> it, 3 -> ok),Map(e -> eat-01, b -> be-located-at-91, s -> something, a -> as-well, i -> it, l -> love-01, o -> ok))),[Ljava.lang.String;@7d13674,Annotation([Ljava.lang.String;@7be5d8ef,[Ljava.lang.String;@5dc8cb54,[Ljava.lang.String;@43899433),Annotation([Ljava.lang.String;@4de578a0,[Ljava.lang.String;@1892e353,[Ledu.cmu.lti.nlp.amr.Dependency;@39b097e),Annotation([Ljava.lang.String;@c3c2d32,[Ljava.lang.String;@6afa646d,[Ljava.lang.String;@657d9a1a),Annotation([Ljava.lang.String;@3e76bf32,[Ljava.lang.String;@534e4073,[Ledu.cmu.lti.nlp.amr.Entity;@6a2e8f7b))
AMR:
(b / be-located-at-91, ARG0, i / it)
(b / be-located-at-91, ARG1, o / ok)
(e / eat-01, ARG0, s / something)
(e / eat-01, ARG1, l / love-01)
(l / love-01, ARG1, b / be-located-at-91)
(o / ok, mod, a / as-well)

Decoded in 252,843 microseconds
Sentence: No one is easy. Life is like a show, you must have a look at the script to know how to perform

Oracle Span 1:  easy => easy
Oracle Span 2:  know => know-01
Oracle Span 3:  look => look-01
Oracle Span 4:  perform => (thing :manner-of perform-01)
Oracle Span 5:  script => script
Oracle Span 6:  show => show
Oracle Span 7:  you => you
Spans:
Span 23-24:   => perform-01
Span 12-13:  a => muster-01
Span 3-4:  easy. => easy
Span 5-6:  is => life
Span 18-19:  know => script-01
Span 0-1:  No => 1
Span 0-1:  No => -
Span 15-16:  the => lock-01
Span 20-21:  to => know-01
Span 9-10:  you => show

 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of know in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of how in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of perform in position 23
Langrangian relaxation converged after 34 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of know in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of how in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of perform in position 23
Oracle Span 3-4:  easy => easy
Oracle Span 20-21:  know => know-01
Oracle Span 15-16:  look => look-01
Oracle Span 23-24:  perform => (thing :manner-of perform-01)
Oracle Span 18-19:  script => script
Oracle Span 9-10:  show => show
Oracle Span 11-12:  you => you

Dependencies:
1	No	_	DT	DT	_	2	neg	_	_
2	one	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	easy	_	JJ	JJ	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_
1	Life	_	NNP	NNP	_	2	nsubj	_	_
2	is	_	VBZ	VBZ	_	0	root	_	_
3	like	_	IN	IN	_	9	prep	_	_
4	a	_	DT	DT	_	5	det	_	_
5	show	_	NN	NN	_	3	pobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	you	_	PRP	PRP	_	9	nsubj	_	_
8	must	_	MD	MD	_	9	aux	_	_
9	have	_	VB	VB	_	2	ccomp	_	_
10	a	_	DT	DT	_	11	det	_	_
11	look	_	NN	NN	_	9	dobj	_	_
12	at	_	IN	IN	_	9	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	script	_	NN	NN	_	12	pobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	know	_	VB	VB	_	9	vmod	_	_
17	how	_	WRB	WRB	_	19	advmod	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	perform	_	VB	VB	_	16	ccomp	_	_

Oracle:
(k / know-01, ARG0, y / you)
(k / know-01, ARG1, t / thing)
(l2 / look-01, ARG0, y / you)
(l2 / look-01, ARG1, s2 / script)
(l2 / look-01, purpose, k / know-01)
(p2 / perform-01, manner, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),No,1,false), Span(12,13,List(1),a,muster-01,false), Span(18,19,List(2),know,script-01,false), Span(3,4,List(3),easy.,easy,false), Span(15,16,List(4),the,lock-01,false), Span(20,21,List(5),to,know-01,false), Span(0,1,List(6),No,-,false), Span(23,24,List(7),,perform-01,false), Span(9,10,List(8),you,show,false), Span(5,6,List(9),is,life,false)),Map(2 -> script-01, 5 -> know-01, 8 -> show, 7 -> perform-01, 1 -> muster-01, 4 -> lock-01, 6 -> -, 9 -> life, 0 -> 1, 3 -> easy),Map(e -> easy, s2 -> show, k -> know-01, s -> script-01, m -> muster-01, p -> perform-01, 1 -> 1, l2 -> life, - -> -, l -> lock-01))),[Ljava.lang.String;@2b311e20,Annotation([Ljava.lang.String;@6aca8d39,[Ljava.lang.String;@4be34879,[Ljava.lang.String;@1132c8a1),Annotation([Ljava.lang.String;@325104b9,[Ljava.lang.String;@c4ce48f,[Ledu.cmu.lti.nlp.amr.Dependency;@5dbdd5ff),Annotation([Ljava.lang.String;@5acd7929,[Ljava.lang.String;@6003da05,[Ljava.lang.String;@b802216),Annotation([Ljava.lang.String;@38a10cb4,[Ljava.lang.String;@9142eb8,[Ledu.cmu.lti.nlp.amr.Entity;@77b90e6d))
AMR:
(1 / 1, calendar, e / easy)
(e / easy, calendar, - / -)
(k / know-01, ARG1, p / perform-01)
(l / lock-01, ARG1, l2 / life)
(m / muster-01, ARG1, k / know-01)
(p / perform-01, ARG0, s2 / show)
(s / script-01, ARG0, - / -)
(s / script-01, ARG1, k / know-01)
(s / script-01, ARG2, l / lock-01)

Decoded in 795,703 microseconds
Sentence: All are SB

Oracle Span 1:  All => all
Spans:
Span 0-1:  All => all

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  All => all

Dependencies:
1	All	_	DT	DT	_	3	nsubj	_	_
2	are	_	VBP	VBP	_	3	cop	_	_
3	SB	_	NNP	NNP	_	0	root	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),All,all,false)),Map(0 -> all),Map(a -> all))),[Ljava.lang.String;@46d23540,Annotation([Ljava.lang.String;@58fea055,[Ljava.lang.String;@19c3098d,[Ljava.lang.String;@1f7113d),Annotation([Ljava.lang.String;@56d85c76,[Ljava.lang.String;@7b89a2f0,[Ledu.cmu.lti.nlp.amr.Dependency;@7a87536d),Annotation([Ljava.lang.String;@4340dbf9,[Ljava.lang.String;@57ef140b,[Ljava.lang.String;@61c7a224),Annotation([Ljava.lang.String;@219b994a,[Ljava.lang.String;@64c10193,[Ledu.cmu.lti.nlp.amr.Entity;@4ba10e4c))
AMR:


Decoded in 27,107 microseconds
Sentence: There are top scorer in the Imperial Examination in all 360 walks of life! What effort and endeavor behind those top scorer in the Imperial Examination! This is humiliating the word " bean vermicelli"!

Oracle Span 1:  360 => 360
Oracle Span 2:  all => all
Oracle Span 3:  and => and
Oracle Span 4:  bean => bean
Oracle Span 5:  behind => behind
Oracle Span 6:  effort => effort
Oracle Span 7:  endeavor => endeavor-01
Oracle Span 8:  humiliating => humiliate-01
Oracle Span 9:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Oracle Span 10:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Oracle Span 11:  life => life
Oracle Span 12:  scorer => (person :ARG0-of score-01)
Oracle Span 13:  scorer => (person :ARG0-of score-01)
Oracle Span 14:  This => this
Oracle Span 15:  top => top
Oracle Span 16:  top => top
Oracle Span 17:  vermicelli => vermicelli
Oracle Span 18:  walks => walk
Oracle Span 19:  word => word
NER Entity: (thing :name (name :op "Imperial" :op "Examination"))
NER Entity: (thing :name (name :op "Imperial" :op "Examination"))
Spans:
Span 9-10:  all => all
Span 16-17:  and => effort
Span 32-33:  bean => word
Span 18-19:  behind => endeavor-01
Span 17-18:  endeavor => and
Span 22-23:  in => score-01
Span 13-14:  life! => life
Span 3-4:  scorer => score-01
Span 21-22:  scorer => top
Span 0-1:  There => 1
Span 19-20:  those => behind
Span 2-3:  top => top
Span 11-12:  walks => walk-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of What in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of effort in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of endeavor in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of top in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of scorer in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Imperial in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Examination in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of This in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliating in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of word in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of bean in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of vermicelli in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 37
Langrangian relaxation converged after 24 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of What in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of effort in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of endeavor in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of top in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of scorer in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Imperial in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Examination in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of This in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliating in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of word in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of bean in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of vermicelli in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 37
Oracle Span 10-11:  360 => 360
Oracle Span 9-10:  all => all
Oracle Span 17-18:  and => and
Oracle Span 34-35:  bean => bean
Oracle Span 19-20:  behind => behind
Oracle Span 16-17:  effort => effort
Oracle Span 18-19:  endeavor => endeavor-01
Oracle Span 30-31:  humiliating => humiliate-01
Oracle Span 6-8:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Oracle Span 25-27:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Oracle Span 13-14:  life => life
Oracle Span 3-4:  scorer => (person :ARG0-of score-01)
Oracle Span 22-23:  scorer => (person :ARG0-of score-01)
Oracle Span 28-29:  This => this
Oracle Span 2-3:  top => top
Oracle Span 21-22:  top => top
Oracle Span 35-36:  vermicelli => vermicelli
Oracle Span 11-12:  walks => walk
Oracle Span 32-33:  word => word

Dependencies:
1	There	_	EX	EX	_	2	expl	_	_
2	are	_	VBP	VBP	_	0	root	_	_
3	top	_	JJ	JJ	_	4	amod	_	_
4	scorer	_	NN	NN	_	2	nsubj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Imperial	_	NNP	NNP	_	8	nn	_	_
8	Examination	_	NNP	NNP	_	5	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	all	_	DT	DT	_	12	det	_	_
11	360	_	CD	CD	_	12	num	_	_
12	walks	_	NNS	NNS	_	9	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	life	_	NN	NN	_	13	pobj	_	_
15	!	_	.	.	_	2	punct	_	_
1	What	_	WP	WP	_	0	root	_	_
2	effort	_	NN	NN	_	1	dep	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	endeavor	_	NN	NN	_	2	conj	_	_
5	behind	_	IN	IN	_	1	prep	_	_
6	those	_	DT	DT	_	8	det	_	_
7	top	_	JJ	JJ	_	8	amod	_	_
8	scorer	_	NN	NN	_	5	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	Imperial	_	NNP	NNP	_	12	nn	_	_
12	Examination	_	NNP	NNP	_	9	pobj	_	_
13	!	_	.	.	_	1	punct	_	_
1	This	_	DT	DT	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	aux	_	_
3	humiliating	_	VBG	VBG	_	0	root	_	_
4	the	_	DT	DT	_	8	det	_	_
5	word	_	NN	NN	_	8	nn	_	_
6	"	_	''	''	_	8	punct	_	_
7	bean	_	NN	NN	_	8	nn	_	_
8	vermicelli	_	NN	NN	_	3	dobj	_	_
9	"	_	''	''	_	3	punct	_	_
10	!	_	.	.	_	3	punct	_	_

Oracle:
(a2 / and, location, b / behind)
(a2 / and, op, e / effort)
(a2 / and, op, e2 / endeavor-01)
(b / behind, op, p2 / person)
(h / humiliate-01, ARG0, t5 / this)
(h / humiliate-01, ARG1, w3 / word)
(n / name, op, "Examination")
(n / name, op, "Imperial")
(n2 / name, op, "Examination")
(n2 / name, op, "Imperial")
(p / person, location, w / walk)
(s / score-01, ARG0, p / person)
(s / score-01, ARG1, t / top)
(s / score-01, time, t2 / thing)
(s2 / score-01, ARG0, p2 / person)
(s2 / score-01, ARG1, t6 / top)
(s2 / score-01, time, t4 / thing)
(t2 / thing, name, n / name)
(t4 / thing, name, n2 / name)
(v / vermicelli, mod, b2 / bean)
(w / walk, mod, l / life)
(w / walk, quant, 3 / 360)
(w / walk, quant, a / all)
(w3 / word, mod, v / vermicelli)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),behind,endeavor-01,false), Span(2,3,List(1),top,top,false), Span(3,4,List(2),scorer,score-01,false), Span(32,33,List(3),bean,word,false), Span(13,14,List(4),life!,life,false), Span(0,1,List(5),There,1,false), Span(11,12,List(6),walks,walk-01,false), Span(19,20,List(7),those,behind,false), Span(9,10,List(8),all,all,false), Span(21,22,List(9),scorer,top,false), Span(16,17,List(10),and,effort,false), Span(22,23,List(11),in,score-01,false), Span(17,18,List(12),endeavor,and,false)),Map(2 -> score-01, 5 -> 1, 12 -> and, 8 -> all, 7 -> behind, 1 -> top, 4 -> life, 11 -> score-01, 6 -> walk-01, 0 -> endeavor-01, 9 -> top, 3 -> word, 10 -> effort),Map(e -> endeavor-01, w -> word, s2 -> score-01, t -> top, b -> behind, e2 -> effort, s -> score-01, 1 -> 1, a -> all, t2 -> top, w2 -> walk-01, a2 -> and, l -> life))),[Ljava.lang.String;@43513b57,Annotation([Ljava.lang.String;@66bfc486,[Ljava.lang.String;@5ca17485,[Ljava.lang.String;@7001a8d9),Annotation([Ljava.lang.String;@3ac0be0d,[Ljava.lang.String;@22c3c627,[Ledu.cmu.lti.nlp.amr.Dependency;@75119ba6),Annotation([Ljava.lang.String;@8aba2bd,[Ljava.lang.String;@37244573,[Ljava.lang.String;@bea5f4e),Annotation([Ljava.lang.String;@725f293e,[Ljava.lang.String;@27b4c382,[Ledu.cmu.lti.nlp.amr.Entity;@322e05da))
AMR:
(a2 / and, op, e / endeavor-01)
(a2 / and, op, e2 / effort)
(e / endeavor-01, ARG0, s / score-01)
(e / endeavor-01, ARG1, b / behind)
(s / score-01, ARG1, 1 / 1)
(s / score-01, mod, t / top)
(s / score-01, time, l / life)
(s2 / score-01, ARG0, s / score-01)
(s2 / score-01, ARG1, t2 / top)
(w2 / walk-01, ARG0, w / word)
(w2 / walk-01, ARG1, l / life)
(w2 / walk-01, ARG6, a / all)

Decoded in 17,869,750 microseconds
Sentence: Haha

Oracle Span 1:  Haha => haha
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Haha => haha

Dependencies:
1	Haha	_	NNP	NNP	_	0	root	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@522038f3,Annotation([Ljava.lang.String;@5cd073e9,[Ljava.lang.String;@2e701fd8,[Ljava.lang.String;@5d58d5cd),Annotation([Ljava.lang.String;@eec8935,[Ljava.lang.String;@517cec3a,[Ledu.cmu.lti.nlp.amr.Dependency;@7f5cb712),Annotation([Ljava.lang.String;@64b1e389,[Ljava.lang.String;@efe7b0b,[Ljava.lang.String;@38555bd2),Annotation([Ljava.lang.String;@22ab8fed,[Ljava.lang.String;@496d9d9a,[Ledu.cmu.lti.nlp.amr.Entity;@34b6819f))
AMR:


Decoded in 12,782 microseconds
Sentence: Overdoing

Oracle Span 1:  Overdoing => overdo-01
Spans:
Span 0-1:  Overdoing => overdo-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Overdoing => overdo-01

Dependencies:
1	Overdoing	_	NN	NN	_	0	root	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Overdoing,overdo-01,false)),Map(0 -> overdo-01),Map(o -> overdo-01))),[Ljava.lang.String;@4f56b528,Annotation([Ljava.lang.String;@1e265ea4,[Ljava.lang.String;@49052a5a,[Ljava.lang.String;@a9e25c3),Annotation([Ljava.lang.String;@709b2e4d,[Ljava.lang.String;@5c649d84,[Ledu.cmu.lti.nlp.amr.Dependency;@3cd32ba8),Annotation([Ljava.lang.String;@4798a1cc,[Ljava.lang.String;@6e581634,[Ljava.lang.String;@16283ec6),Annotation([Ljava.lang.String;@3303d9c0,[Ljava.lang.String;@319798ad,[Ledu.cmu.lti.nlp.amr.Entity;@1f50d11d))
AMR:


Decoded in 15,327 microseconds
Sentence: The reality

Oracle Span 1:  reality => reality
Spans:
Span 1-2:  reality => reality

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  reality => reality

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	reality	_	NN	NN	_	0	root	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),reality,reality,false)),Map(0 -> reality),Map(r -> reality))),[Ljava.lang.String;@290e9600,Annotation([Ljava.lang.String;@33f6070b,[Ljava.lang.String;@537a3347,[Ljava.lang.String;@6e2998a1),Annotation([Ljava.lang.String;@334abdf2,[Ljava.lang.String;@30073acf,[Ledu.cmu.lti.nlp.amr.Dependency;@32e5d783),Annotation([Ljava.lang.String;@102badee,[Ljava.lang.String;@76682734,[Ljava.lang.String;@7fb0aa74),Annotation([Ljava.lang.String;@63f523ce,[Ljava.lang.String;@2efca683,[Ledu.cmu.lti.nlp.amr.Entity;@191a65ef))
AMR:


Decoded in 24,618 microseconds
Sentence: Shoot those hooligans

Oracle Span 1:  hooligans => hooligan
Oracle Span 2:  Shoot => shoot-02
Spans:
Span 2-3:  hooligans => hooligan
Span 0-1:  Shoot => short-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  hooligans => hooligan
Oracle Span 0-1:  Shoot => shoot-02

Dependencies:
1	Shoot	_	VB	VB	_	0	root	_	_
2	those	_	DT	DT	_	3	det	_	_
3	hooligans	_	NNS	NNS	_	1	dobj	_	_

Oracle:
(s / shoot-02, ARG1, h / hooligan)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),hooligans,hooligan,false), Span(0,1,List(1),Shoot,short-01,false)),Map(1 -> short-01, 0 -> hooligan),Map(h -> hooligan, s -> short-01))),[Ljava.lang.String;@7d6056b2,Annotation([Ljava.lang.String;@108c6669,[Ljava.lang.String;@57c59dc1,[Ljava.lang.String;@1d27cc08),Annotation([Ljava.lang.String;@628dccd8,[Ljava.lang.String;@114141ce,[Ledu.cmu.lti.nlp.amr.Dependency;@6a91edb2),Annotation([Ljava.lang.String;@49752b64,[Ljava.lang.String;@4512d59e,[Ljava.lang.String;@5ec6a3c3),Annotation([Ljava.lang.String;@3bdf39d4,[Ljava.lang.String;@5b911bc0,[Ledu.cmu.lti.nlp.amr.Entity;@8fc8b09))
AMR:
(s / short-01, ARG1, h / hooligan)

Decoded in 37,072 microseconds
Sentence: Cheap performers

Oracle Span 1:  Cheap => cheap
Oracle Span 2:  performers => (person :ARG0-of perform-01)
Spans:
Span 1-2:  performers => performer

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Cheap => cheap
Oracle Span 1-2:  performers => (person :ARG0-of perform-01)

Dependencies:
1	Cheap	_	JJ	JJ	_	2	amod	_	_
2	performers	_	NNS	NNS	_	0	root	_	_

Oracle:
(p2 / perform-01, ARG0, p / person)
(p2 / perform-01, mod, c / cheap)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),performers,performer,false)),Map(0 -> performer),Map(p -> performer))),[Ljava.lang.String;@7c25b17,Annotation([Ljava.lang.String;@2d15ec8f,[Ljava.lang.String;@5be7a6ec,[Ljava.lang.String;@1c0de590),Annotation([Ljava.lang.String;@9821fe5,[Ljava.lang.String;@bf1ebce,[Ledu.cmu.lti.nlp.amr.Dependency;@6dc7ec9a),Annotation([Ljava.lang.String;@1e95a5d7,[Ljava.lang.String;@771ecd7,[Ljava.lang.String;@3dac86c),Annotation([Ljava.lang.String;@512b47b1,[Ljava.lang.String;@6223fb5e,[Ledu.cmu.lti.nlp.amr.Entity;@6a3cb499))
AMR:


Decoded in 21,253 microseconds
Sentence: Cheap performers!

Oracle Span 1:  Cheap => cheap
Oracle Span 2:  performers => (person :ARG0-of perform-01)
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Cheap => cheap
Oracle Span 1-2:  performers => (person :ARG0-of perform-01)

Dependencies:
1	Cheap	_	JJ	JJ	_	2	amod	_	_
2	performers	_	NNS	NNS	_	0	root	_	_
3	!	_	.	.	_	2	punct	_	_

Oracle:
(p / person, mod, c / cheap)
(p2 / perform-01, ARG0, p / person)

Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@53755c4b,Annotation([Ljava.lang.String;@58a5b467,[Ljava.lang.String;@3e776a,[Ljava.lang.String;@29601f8d),Annotation([Ljava.lang.String;@500e89ee,[Ljava.lang.String;@25fd1904,[Ledu.cmu.lti.nlp.amr.Dependency;@560bbff6),Annotation([Ljava.lang.String;@7fbe5ecd,[Ljava.lang.String;@5b5be92d,[Ljava.lang.String;@16a3fe7b),Annotation([Ljava.lang.String;@1d5c0756,[Ljava.lang.String;@10997a06,[Ledu.cmu.lti.nlp.amr.Entity;@148ffbb9))
AMR:


Decoded in 26,494 microseconds
Sentence: The entertainment circle is a dirty one, all men in it are birds and beasts and scum

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  beasts => beast
Oracle Span 4:  birds => bird
Oracle Span 5:  circle => circle
Oracle Span 6:  dirty => dirty
Oracle Span 7:  entertainment => entertain-01
Oracle Span 8:  it => it
Oracle Span 9:  men => man
Oracle Span 10:  scum => scum
Spans:
Span 17-18:   => scum
Span 14-15:  beasts => and
Span 2-3:  circle => circle
Span 5-6:  dirty => dirty
Span 8-9:  men => all
Span 16-17:  scum => and
Span 0-1:  The => 1

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  all => all
Oracle Span 14-15:  and => and
Oracle Span 15-16:  beasts => beast
Oracle Span 13-14:  birds => bird
Oracle Span 2-3:  circle => circle
Oracle Span 5-6:  dirty => dirty
Oracle Span 1-2:  entertainment => entertain-01
Oracle Span 11-12:  it => it
Oracle Span 9-10:  men => man
Oracle Span 17-18:  scum => scum

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	entertainment	_	NN	NN	_	3	nn	_	_
3	circle	_	NN	NN	_	7	nsubj	_	_
4	is	_	VBZ	VBZ	_	7	cop	_	_
5	a	_	DT	DT	_	7	det	_	_
6	dirty	_	JJ	JJ	_	7	amod	_	_
7	one	_	NN	NN	_	0	root	_	_
8	,	_	,	,	_	7	punct	_	_
9	all	_	DT	DT	_	10	det	_	_
10	men	_	NNS	NNS	_	7	appos	_	_
11	in	_	IN	IN	_	14	mark	_	_
12	it	_	PRP	PRP	_	14	nsubj	_	_
13	are	_	VBP	VBP	_	14	cop	_	_
14	birds	_	NNS	NNS	_	10	dep	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	beasts	_	NNS	NNS	_	14	conj	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	scum	_	NN	NN	_	14	conj	_	_

Oracle:
(a2 / and, domain, m / man)
(a2 / and, op, b / bird)
(a2 / and, op, b2 / beast)
(a2 / and, op, s / scum)
(c / circle, mod, e / entertain-01)
(d / dirty, domain, c / circle)
(m / man, location, i / it)
(m / man, quant, a3 / all)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),dirty,dirty,false), Span(0,1,List(1),The,1,false), Span(14,15,List(2),beasts,and,false), Span(17,18,List(3),,scum,false), Span(16,17,List(4),scum,and,false), Span(2,3,List(5),circle,circle,false), Span(8,9,List(6),men,all,false)),Map(2 -> and, 5 -> circle, 1 -> 1, 4 -> and, 6 -> all, 0 -> dirty, 3 -> scum),Map(a3 -> all, s -> scum, d -> dirty, 1 -> 1, a -> and, a2 -> and, c -> circle))),[Ljava.lang.String;@4759148e,Annotation([Ljava.lang.String;@19690dd5,[Ljava.lang.String;@a0da645,[Ljava.lang.String;@1353ef5b),Annotation([Ljava.lang.String;@1c2164db,[Ljava.lang.String;@4df7c52f,[Ledu.cmu.lti.nlp.amr.Dependency;@2aaf6d5a),Annotation([Ljava.lang.String;@268a6663,[Ljava.lang.String;@319ac9d5,[Ljava.lang.String;@4237bc74),Annotation([Ljava.lang.String;@1323dcd5,[Ljava.lang.String;@666f19ac,[Ledu.cmu.lti.nlp.amr.Entity;@1dcb0d5))
AMR:
(a / and, op, s / scum)
(a2 / and, mod, 1 / 1)
(a2 / and, op, s / scum)
(a2 / and, quant, a3 / all)
(c / circle, mod, 1 / 1)
(d / dirty, poss, a2 / and)

Decoded in 213,040 microseconds
Sentence: Pity them, but who is to blame? Those female stars are not easy

Oracle Span 1:  blame => blame-01
Oracle Span 2:  but => contrast-01
Oracle Span 3:  easy => easy
Oracle Span 4:  female => female
Oracle Span 5:  Pity => pity-01
Oracle Span 6:  stars => star-01
Spans:
Span 14-15:   => easy
Span 10-11:  are => female
Span 11-12:  not => star
Span 0-1:  Pity => pity-01
Span 7-8:  Those => blame-01
Span 3-4:  who => bunt-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of Those in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of female in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of easy in position 14
Langrangian relaxation converged after 48 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Those in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of female in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of easy in position 14
Oracle Span 7-8:  blame => blame-01
Oracle Span 3-4:  but => contrast-01
Oracle Span 14-15:  easy => easy
Oracle Span 10-11:  female => female
Oracle Span 0-1:  Pity => pity-01
Oracle Span 11-12:  stars => star-01

Dependencies:
1	Pity	_	RB	RB	_	2	dep	_	_
2	them	_	PRP	PRP	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	but	_	IN	IN	_	2	prep	_	_
5	who	_	WP	WP	_	6	nsubj	_	_
6	is	_	VBZ	VBZ	_	4	pcomp	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	blame	_	VB	VB	_	6	xcomp	_	_
9	?	_	.	.	_	2	punct	_	_
1	Those	_	DT	DT	_	3	det	_	_
2	female	_	JJ	JJ	_	3	amod	_	_
3	stars	_	NNS	NNS	_	6	nsubj	_	_
4	are	_	VBP	VBP	_	6	cop	_	_
5	not	_	RB	RB	_	6	neg	_	_
6	easy	_	JJ	JJ	_	0	root	_	_

Oracle:
(c / contrast-01, ARG1, p / pity-01)
(c / contrast-01, ARG2, b2 / blame-01)
(e / easy, domain, f2 / female)
(s2 / star-01, ARG1, f2 / female)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Pity,pity-01,false), Span(11,12,List(1),not,star,false), Span(14,15,List(2),,easy,false), Span(3,4,List(3),who,bunt-01,false), Span(10,11,List(4),are,female,false), Span(7,8,List(5),Those,blame-01,false)),Map(2 -> easy, 5 -> blame-01, 1 -> star, 4 -> female, 0 -> pity-01, 3 -> bunt-01),Map(e -> easy, b -> bunt-01, b2 -> blame-01, s -> star, p -> pity-01, f -> female))),[Ljava.lang.String;@1c76337,Annotation([Ljava.lang.String;@19ea62ce,[Ljava.lang.String;@7a8dbfbf,[Ljava.lang.String;@2d7c012e),Annotation([Ljava.lang.String;@1718116d,[Ljava.lang.String;@5d2efd52,[Ledu.cmu.lti.nlp.amr.Dependency;@4a49d10f),Annotation([Ljava.lang.String;@771cc19,[Ljava.lang.String;@503536e3,[Ljava.lang.String;@7a5b95da),Annotation([Ljava.lang.String;@7e1ee237,[Ljava.lang.String;@7706f8e9,[Ledu.cmu.lti.nlp.amr.Entity;@e7d5ac4))
AMR:
(b / bunt-01, ARG1, b2 / blame-01)
(b2 / blame-01, ARG0, s / star)
(b2 / blame-01, ARG1, f / female)
(b2 / blame-01, ARG6, e / easy)
(p / pity-01, ARG1, b / bunt-01)

Decoded in 274,756 microseconds
Sentence: Everybody is doing this, how can you make money if you don't do this

Oracle Span 1:  can => possible
Oracle Span 2:  do => do-02
Oracle Span 3:  doing => do-02
Oracle Span 4:  Everybody => everybody
Oracle Span 5:  make => make-05
Oracle Span 6:  money => money
Oracle Span 7:  this => this
Oracle Span 8:  you => you
Spans:
Span 14-15:   => do-02
Span 15-16:   => this
Span 2-3:  doing => do-02
Span 11-12:  don't => you
Span 9-10:  if => money
Span 7-8:  make => you
Span 8-9:  money => make-05
Span 3-4:  this, => this
Span 6-7:  you => possible

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 6-7:  can => possible
Oracle Span 12-13:  do => do-02
Oracle Span 2-3:  doing => do-02
Oracle Span 0-1:  Everybody => everybody
Oracle Span 8-9:  make => make-05
Oracle Span 9-10:  money => money
Oracle Span 3-4:  this => this
Oracle Span 7-8:  you => you

Dependencies:
1	Everybody	_	WDT	WDT	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	aux	_	_
3	doing	_	VBG	VBG	_	9	dep	_	_
4	this	_	DT	DT	_	3	dobj	_	_
5	,	_	,	,	_	9	punct	_	_
6	how	_	WRB	WRB	_	9	advmod	_	_
7	can	_	MD	MD	_	9	aux	_	_
8	you	_	PRP	PRP	_	9	nsubj	_	_
9	make	_	VB	VB	_	0	root	_	_
10	money	_	NN	NN	_	9	dobj	_	_
11	if	_	IN	IN	_	15	mark	_	_
12	you	_	PRP	PRP	_	15	nsubj	_	_
13	do	_	VBP	VBP	_	15	aux	_	_
14	n't	_	RB	RB	_	15	neg	_	_
15	do	_	VB	VB	_	9	advcl	_	_
16	this	_	DT	DT	_	15	dobj	_	_

Oracle:
(d / do-02, ARG0, e2 / everybody)
(d / do-02, ARG1, t / this)
(d2 / do-02, ARG0, y / you)
(d2 / do-02, ARG1, t / this)
(m / make-05, ARG0, y / you)
(m / make-05, ARG1, m2 / money)
(m / make-05, condition, d2 / do-02)
(p2 / possible, domain, m / make-05)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),,do-02,false), Span(7,8,List(1),make,you,false), Span(8,9,List(2),money,make-05,false), Span(15,16,List(3),,this,false), Span(9,10,List(4),if,money,false), Span(2,3,List(5),doing,do-02,false), Span(11,12,List(6),don't,you,false), Span(3,4,List(7),this,,this,false), Span(6,7,List(8),you,possible,false)),Map(2 -> make-05, 5 -> do-02, 8 -> possible, 7 -> this, 1 -> you, 4 -> money, 6 -> you, 0 -> do-02, 3 -> this),Map(t -> this, m2 -> money, m -> make-05, d -> do-02, p -> possible, y -> you, d2 -> do-02, t2 -> this, y2 -> you))),[Ljava.lang.String;@2cfee8,Annotation([Ljava.lang.String;@587b41a3,[Ljava.lang.String;@3872738d,[Ljava.lang.String;@260cfde),Annotation([Ljava.lang.String;@655cbac4,[Ljava.lang.String;@67289995,[Ledu.cmu.lti.nlp.amr.Dependency;@4ced60e6),Annotation([Ljava.lang.String;@4877489a,[Ljava.lang.String;@487d41ca,[Ljava.lang.String;@6bba9d61),Annotation([Ljava.lang.String;@4c772aa0,[Ljava.lang.String;@3e36882c,[Ledu.cmu.lti.nlp.amr.Entity;@1ce7ed31))
AMR:
(d / do-02, ARG0, m2 / money)
(d / do-02, ARG1, t / this)
(d / do-02, ARG6, y2 / you)
(d2 / do-02, ARG0, y / you)
(d2 / do-02, ARG1, t2 / this)
(m / make-05, ARG0, y / you)
(m / make-05, ARG1, m2 / money)
(p / possible, domain, m / make-05)

Decoded in 691,212 microseconds
Sentence: She is a proud woman in front of others but is in melancholy mood when staying alone ...

Oracle Span 1:  alone => alone
Oracle Span 2:  but => contrast-01
Oracle Span 3:  front => front
Oracle Span 4:  melancholy => melancholy
Oracle Span 5:  mood => mood
Oracle Span 6:  others => (person :mod other)
Oracle Span 7:  proud => proud-41
Oracle Span 8:  staying => stay-01
Oracle Span 9:  woman => woman
Spans:
Span 16-17:  alone => alone
Span 9-10:  but => bunt-01
Span 6-7:  front => front
Span 13-14:  mood => mood
Span 8-9:  others => other
Span 3-4:  proud => prod-01
Span 0-1:  She => she
Span 15-16:  staying => stay-01
Span 4-5:  woman => woman

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 16-17:  alone => alone
Oracle Span 9-10:  but => contrast-01
Oracle Span 6-7:  front => front
Oracle Span 12-13:  melancholy => melancholy
Oracle Span 13-14:  mood => mood
Oracle Span 8-9:  others => (person :mod other)
Oracle Span 3-4:  proud => proud-41
Oracle Span 15-16:  staying => stay-01
Oracle Span 4-5:  woman => woman

Dependencies:
1	She	_	PRP	PRP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	a	_	DT	DT	_	5	det	_	_
4	proud	_	JJ	JJ	_	5	amod	_	_
5	woman	_	NN	NN	_	0	root	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	front	_	NN	NN	_	6	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	others	_	NNS	NNS	_	8	pobj	_	_
10	but	_	CC	CC	_	11	cc	_	_
11	is	_	VBZ	VBZ	_	9	dep	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	melancholy	_	JJ	JJ	_	14	amod	_	_
14	mood	_	NN	NN	_	12	pobj	_	_
15	when	_	WRB	WRB	_	16	advmod	_	_
16	staying	_	VBG	VBG	_	11	advcl	_	_
17	alone	_	RB	RB	_	16	advmod	_	_
18	...	_	:	:	_	5	punct	_	_

Oracle:
(c / contrast-01, ARG1, p / proud-41)
(c / contrast-01, ARG2, m / mood)
(f / front, op, p2 / person)
(m / mood, domain, w / woman)
(m / mood, mod, m2 / melancholy)
(m / mood, time, s / stay-01)
(p / proud-41, ARG1, w / woman)
(p2 / person, mod, o / other)
(s / stay-01, ARG1, w / woman)
(s / stay-01, ARG3, a / alone)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),staying,stay-01,false), Span(9,10,List(1),but,bunt-01,false), Span(13,14,List(2),mood,mood,false), Span(0,1,List(3),She,she,false), Span(6,7,List(4),front,front,false), Span(3,4,List(5),proud,prod-01,false), Span(4,5,List(6),woman,woman,false), Span(8,9,List(7),others,other,false), Span(16,17,List(8),alone,alone,false)),Map(2 -> mood, 5 -> prod-01, 8 -> alone, 7 -> other, 1 -> bunt-01, 4 -> front, 6 -> woman, 0 -> stay-01, 3 -> she),Map(w -> woman, s2 -> she, b -> bunt-01, s -> stay-01, m -> mood, p -> prod-01, a -> alone, o -> other, f -> front))),[Ljava.lang.String;@6ea5a7a7,Annotation([Ljava.lang.String;@2252ec37,[Ljava.lang.String;@37f5591a,[Ljava.lang.String;@177fb579),Annotation([Ljava.lang.String;@5424b0ae,[Ljava.lang.String;@6122cd49,[Ledu.cmu.lti.nlp.amr.Dependency;@7c0265fe),Annotation([Ljava.lang.String;@163cd37a,[Ljava.lang.String;@676cb0d3,[Ljava.lang.String;@10d361f2),Annotation([Ljava.lang.String;@7f11db83,[Ljava.lang.String;@f466018,[Ledu.cmu.lti.nlp.amr.Entity;@d2ea30b))
AMR:
(b / bunt-01, ARG1, s / stay-01)
(b / bunt-01, ARG6, o / other)
(b / bunt-01, instrument, f / front)
(m / mood, mod, o / other)
(p / prod-01, ARG1, w / woman)
(p / prod-01, ARG6, s2 / she)
(s / stay-01, ARG1, a / alone)
(w / woman, prep-with, b / bunt-01)

Decoded in 372,502 microseconds
Sentence: To put it plainly stars nowadays are just popular prostitutes in ancient times. Now that they are famous prostitutes, it should be just normal to drink with some high officials or even sleep with them

Oracle Span 1:  ancient => ancient
Oracle Span 2:  drink => drink-01
Oracle Span 3:  even => even
Oracle Span 4:  famous => famous
Oracle Span 5:  high => high
Oracle Span 6:  just => just
Oracle Span 7:  just => just
Oracle Span 8:  normal => normal
Oracle Span 9:  Now => now
Oracle Span 10:  nowadays => nowadays
Oracle Span 11:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 12:  or => or
Oracle Span 13:  plainly => plain
Oracle Span 14:  popular => popular-41
Oracle Span 15:  prostitutes => (person :ARG1-of prostitute-01)
Oracle Span 16:  prostitutes => (person :ARG1-of prostitute-01)
Oracle Span 17:  put => put-02
Oracle Span 18:  should => recommend-01
Oracle Span 19:  sleep => sleep-02
Oracle Span 20:  some => some
Oracle Span 21:  stars => (person :ARG1-of star-01)
Oracle Span 22:  they => they
Oracle Span 23:  times => time
Spans:
Span 11-12:  ancient => ancient
Span 25-26:  drink => normal
Span 31-32:  even => (person :ARG0-of (have-org-role-91 :ARG2 official))
Span 22-23:  just => shoulder-01
Span 7-8:  just => just
Span 5-6:  nowadays => nowadays
Span 29-30:  officials => some
Span 30-31:  or => high
Span 8-9:  popular => popular
Span 9-10:  prostitutes => prostitute
Span 18-19:  prostitutes, => famous
Span 1-2:  put => put-02
Span 32-33:  sleep => or
Span 27-28:  some => drink-01
Span 4-5:  stars => star
Span 34-35:  them => sleep-01
Span 12-13:  times. => time
Span 24-25:  to => just
Span 0-15:  To put it plainly stars nowadays are just popular prostitutes in ancient times. Now that => (date-entity :time now)
Span 33-34:  with => even

 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of just in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of normal in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of drink in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of sleep in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of them in position 36
Langrangian relaxation converged after 28 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of just in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of normal in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of drink in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of sleep in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of them in position 36
Oracle Span 11-12:  ancient => ancient
Oracle Span 27-28:  drink => drink-01
Oracle Span 33-34:  even => even
Oracle Span 18-19:  famous => famous
Oracle Span 30-31:  high => high
Oracle Span 7-8:  just => just
Oracle Span 24-25:  just => just
Oracle Span 25-26:  normal => normal
Oracle Span 14-15:  Now => now
Oracle Span 5-6:  nowadays => nowadays
Oracle Span 31-32:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 32-33:  or => or
Oracle Span 3-4:  plainly => plain
Oracle Span 8-9:  popular => popular-41
Oracle Span 9-10:  prostitutes => (person :ARG1-of prostitute-01)
Oracle Span 19-20:  prostitutes => (person :ARG1-of prostitute-01)
Oracle Span 1-2:  put => put-02
Oracle Span 22-23:  should => recommend-01
Oracle Span 34-35:  sleep => sleep-02
Oracle Span 29-30:  some => some
Oracle Span 4-5:  stars => (person :ARG1-of star-01)
Oracle Span 16-17:  they => they
Oracle Span 12-13:  times => time

Dependencies:
1	To	_	TO	TO	_	2	aux	_	_
2	put	_	VB	VB	_	10	csubj	_	_
3	it	_	PRP	PRP	_	5	nsubj	_	_
4	plainly	_	RB	RB	_	5	advmod	_	_
5	stars	_	VBZ	VBZ	_	2	ccomp	_	_
6	nowadays	_	RB	RB	_	5	advmod	_	_
7	are	_	VBP	VBP	_	10	cop	_	_
8	just	_	RB	RB	_	10	advmod	_	_
9	popular	_	JJ	JJ	_	10	amod	_	_
10	prostitutes	_	NNS	NNS	_	0	root	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	ancient	_	JJ	JJ	_	13	amod	_	_
13	times	_	NNS	NNS	_	11	pobj	_	_
14	.	_	.	.	_	10	punct	_	_
1	Now	_	RB	RB	_	6	advmod	_	_
2	that	_	IN	IN	_	6	mark	_	_
3	they	_	PRP	PRP	_	6	nsubj	_	_
4	are	_	VBP	VBP	_	6	cop	_	_
5	famous	_	JJ	JJ	_	6	amod	_	_
6	prostitutes	_	NNS	NNS	_	12	advcl	_	_
7	,	_	,	,	_	12	punct	_	_
8	it	_	PRP	PRP	_	12	nsubj	_	_
9	should	_	MD	MD	_	12	aux	_	_
10	be	_	VB	VB	_	12	cop	_	_
11	just	_	RB	RB	_	12	advmod	_	_
12	normal	_	JJ	JJ	_	0	root	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	drink	_	VB	VB	_	12	xcomp	_	_
15	with	_	IN	IN	_	14	prep	_	_
16	some	_	DT	DT	_	18	det	_	_
17	high	_	JJ	JJ	_	18	amod	_	_
18	officials	_	NNS	NNS	_	15	pobj	_	_
19	or	_	CC	CC	_	14	cc	_	_
20	even	_	RB	RB	_	21	advmod	_	_
21	sleep	_	VB	VB	_	14	conj	_	_
22	with	_	IN	IN	_	21	prep	_	_
23	them	_	PRP	PRP	_	22	pobj	_	_

Oracle:
(d / drink-01, ARG0, t / they)
(h2 / have-org-role-91, ARG2, o2 / official)
(n3 / normal, domain, o / or)
(n3 / normal, mod, j2 / just)
(o / or, op, d / drink-01)
(o / or, op, s3 / sleep-02)
(o2 / official, mod, h / high)
(p / put-02, ARG1, p6 / person)
(p / put-02, manner, p2 / plain)
(p3 / prostitute-01, ARG0, p6 / person)
(p3 / prostitute-01, ARG1, p6 / person)
(p4 / popular-41, ARG1, p6 / person)
(p5 / prostitute-01, ARG0, p8 / person)
(p5 / prostitute-01, ARG1, p8 / person)
(p6 / person, domain, p7 / person)
(p6 / person, mod, j / just)
(p6 / person, time, t2 / time)
(p7 / person, time, n4 / nowadays)
(p8 / person, domain, t / they)
(p8 / person, mod, f / famous)
(p8 / person, time, n2 / now)
(r / recommend-01, ARG1, n3 / normal)
(s3 / sleep-02, ARG0, t / they)
(s3 / sleep-02, ARG1, o2 / official)
(s3 / sleep-02, mod, e / even)
(s4 / star-01, ARG1, p7 / person)
(t2 / time, mod, a / ancient)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),nowadays,nowadays,false), Span(8,9,List(1),popular,popular,false), Span(11,12,List(2),ancient,ancient,false), Span(33,34,List(3),with,even,false), Span(1,2,List(4),put,put-02,false), Span(12,13,List(5),times.,time,false), Span(22,23,List(6),just,shoulder-01,false), Span(31,32,List(9, 8, 7),even,(person :ARG0-of (have-org-role-91 :ARG2 official)),false), Span(4,5,List(10),stars,star,false), Span(27,28,List(11),some,drink-01,false), Span(25,26,List(12),drink,normal,false), Span(34,35,List(13),them,sleep-01,false), Span(0,15,List(15, 14),To put it plainly stars nowadays are just popular prostitutes in ancient times. Now that,(date-entity :time now),false), Span(32,33,List(16),sleep,or,false), Span(7,8,List(17),just,just,false), Span(29,30,List(18),officials,some,false), Span(18,19,List(19),prostitutes,,famous,false), Span(24,25,List(20),to,just,false), Span(9,10,List(21),prostitutes,prostitute,false), Span(30,31,List(22),or,high,false)),Map(2 -> ancient, 5 -> time, 12 -> normal, 15 -> now, 8 -> have-org-role-91, 21 -> prostitute, 18 -> some, 7 -> person, 17 -> just, 1 -> popular, 4 -> put-02, 11 -> drink-01, 14 -> date-entity, 20 -> just, 6 -> shoulder-01, 22 -> high, 0 -> nowadays, 9 -> official, 16 -> or, 19 -> famous, 3 -> even, 10 -> star, 13 -> sleep-01),Map(e -> even, n -> nowadays, h -> have-org-role-91, h2 -> high, s2 -> star, t -> time, p2 -> put-02, j -> just, j2 -> just, s -> shoulder-01, s4 -> some, d -> drink-01, p -> popular, n3 -> now, a -> ancient, p4 -> prostitute, o2 -> or, d2 -> date-entity, s3 -> sleep-01, f -> famous, o -> official, p3 -> person, n2 -> normal))),[Ljava.lang.String;@6967a235,Annotation([Ljava.lang.String;@c0added,[Ljava.lang.String;@5f4337a,[Ljava.lang.String;@195fa22e),Annotation([Ljava.lang.String;@4d7ddd3a,[Ljava.lang.String;@174284cd,[Ledu.cmu.lti.nlp.amr.Dependency;@33891abc),Annotation([Ljava.lang.String;@57238031,[Ljava.lang.String;@741403e2,[Ljava.lang.String;@77f38541),Annotation([Ljava.lang.String;@cd43df9,[Ljava.lang.String;@473d065a,[Ledu.cmu.lti.nlp.amr.Entity;@13e2164c))
AMR:
(d / drink-01, ARG1, h2 / high)
(d / drink-01, ARG6, f / famous)
(d2 / date-entity, time, n3 / now)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, a / ancient)
(h / have-org-role-91, ARG2, o / official)
(j2 / just, domain, p2 / put-02)
(n2 / normal, domain, p2 / put-02)
(o2 / or, op, p3 / person)
(p2 / put-02, ARG0, d2 / date-entity)
(p2 / put-02, ARG1, s2 / star)
(p2 / put-02, ARG6, j / just)
(p3 / person, domain, p2 / put-02)
(p4 / prostitute, domain, p2 / put-02)
(p4 / prostitute, mod, p / popular)
(s / shoulder-01, ARG1, j2 / just)
(s2 / star, mod, n / nowadays)
(s3 / sleep-01, ARG0, e / even)
(s3 / sleep-01, ARG1, o2 / or)
(s4 / some, domain, p2 / put-02)
(s4 / some, mod, h2 / high)
(t / time, mod, a / ancient)

Decoded in 1,868,129 microseconds
Sentence: Stop talking about others just behave yourself

Oracle Span 1:  behave => behave-01
Oracle Span 2:  just => just
Oracle Span 3:  others => (person :mod other)
Oracle Span 4:  Stop => stop-01
Oracle Span 5:  talking => talk-01
Spans:
Span 5-6:  behave => behave-01
Span 4-5:  just => just
Span 3-4:  others => other
Span 0-1:  Stop => stop-01
Span 1-2:  talking => talk-01
Span 6-7:  yourself => yourself

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 5-6:  behave => behave-01
Oracle Span 4-5:  just => just
Oracle Span 3-4:  others => (person :mod other)
Oracle Span 0-1:  Stop => stop-01
Oracle Span 1-2:  talking => talk-01

Dependencies:
1	Stop	_	VB	VB	_	0	root	_	_
2	talking	_	VBG	VBG	_	1	xcomp	_	_
3	about	_	IN	IN	_	2	prep	_	_
4	others	_	NNS	NNS	_	3	pobj	_	_
5	just	_	RB	RB	_	6	advmod	_	_
6	behave	_	VB	VB	_	4	dep	_	_
7	yourself	_	PRP	PRP	_	6	dobj	_	_

Oracle:
(b / behave-01, mod, j / just)
(p / person, mod, o / other)
(s / stop-01, ARG1, t / talk-01)
(t / talk-01, ARG1, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),talking,talk-01,false), Span(5,6,List(1),behave,behave-01,false), Span(4,5,List(2),just,just,false), Span(3,4,List(3),others,other,false), Span(0,1,List(4),Stop,stop-01,false), Span(6,7,List(5),yourself,yourself,false)),Map(2 -> just, 5 -> yourself, 1 -> behave-01, 4 -> stop-01, 0 -> talk-01, 3 -> other),Map(b -> behave-01, t -> talk-01, s -> stop-01, j -> just, y -> yourself, o -> other))),[Ljava.lang.String;@47ed5b,Annotation([Ljava.lang.String;@44a72450,[Ljava.lang.String;@60531fd1,[Ljava.lang.String;@25db6b67),Annotation([Ljava.lang.String;@1a4977b2,[Ljava.lang.String;@67b1450f,[Ledu.cmu.lti.nlp.amr.Dependency;@1fe463bf),Annotation([Ljava.lang.String;@619ab377,[Ljava.lang.String;@30bfbc11,[Ljava.lang.String;@5d4b1e34),Annotation([Ljava.lang.String;@618e77b9,[Ljava.lang.String;@55bb71f4,[Ledu.cmu.lti.nlp.amr.Entity;@18291066))
AMR:
(b / behave-01, ARG1, y / yourself)
(b / behave-01, ARG2, o / other)
(b / behave-01, ARG6, j / just)
(s / stop-01, ARG1, t / talk-01)
(t / talk-01, ARG1, o / other)

Decoded in 114,881 microseconds
Sentence: What should we do in the future! Ability alone isn't enough to become successful! Are we goin' to face such hard choices too?

Oracle Span 1:  alone => alone
Oracle Span 2:  do => do-02
Oracle Span 3:  enough => enough
Oracle Span 4:  face => face-01
Oracle Span 5:  future => future
Oracle Span 6:  hard => hard
Oracle Span 7:  should => recommend-01
Oracle Span 8:  successful => succeed-01
Oracle Span 9:  such => such
Oracle Span 10:  too => too
Oracle Span 11:  we => we
Oracle Span 12:  we => we
Spans:
Span 26-27:   => too
Span 24-25:   => hard
Span 25-26:   => choke-01
Span 23-24:   => such
Span 14-15:  Are => become-01
Span 12-13:  become => enough
Span 3-4:  do => do-02
Span 1-2:  should => shoulder-01
Span 22-23:  too? => face-01
Span 15-16:  we => succeed-01
Span 0-6:  What should we do in the => (date-entity :time the :time future)

 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of enough in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of become in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of successful in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of Are in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of goin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of hard in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of choices in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 27
Langrangian relaxation converged after 36 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of enough in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of become in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of successful in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of Are in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of goin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of hard in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of choices in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 27
Oracle Span 9-10:  alone => alone
Oracle Span 3-4:  do => do-02
Oracle Span 12-13:  enough => enough
Oracle Span 22-23:  face => face-01
Oracle Span 6-7:  future => future
Oracle Span 24-25:  hard => hard
Oracle Span 1-2:  should => recommend-01
Oracle Span 15-16:  successful => succeed-01
Oracle Span 23-24:  such => such
Oracle Span 26-27:  too => too
Oracle Span 2-3:  we => we
Oracle Span 18-19:  we => we

Dependencies:
1	What	_	WP	WP	_	4	dobj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	we	_	PRP	PRP	_	4	nsubj	_	_
4	do	_	VB	VB	_	0	root	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	future	_	NN	NN	_	5	pobj	_	_
8	!	_	.	.	_	4	punct	_	_
1	Ability	_	NNP	NNP	_	5	nsubj	_	_
2	alone	_	RB	RB	_	5	advmod	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	n't	_	RB	RB	_	5	neg	_	_
5	enough	_	JJ	JJ	_	0	root	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	become	_	VB	VB	_	5	xcomp	_	_
8	successful	_	JJ	JJ	_	7	acomp	_	_
9	!	_	.	.	_	5	punct	_	_
1	Are	_	VBP	VBP	_	3	auxpass	_	_
2	we	_	PRP	PRP	_	3	nsubjpass	_	_
3	goin	_	VBN	VBN	_	0	root	_	_
4	'	_	''	''	_	3	punct	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	face	_	VB	VB	_	3	xcomp	_	_
7	such	_	JJ	JJ	_	9	amod	_	_
8	hard	_	JJ	JJ	_	9	amod	_	_
9	choices	_	NNS	NNS	_	6	dobj	_	_
10	too	_	RB	RB	_	6	advmod	_	_
11	?	_	.	.	_	3	punct	_	_

Oracle:
(d / do-02, time, f / future)
(e / enough, purpose, s3 / succeed-01)
(f2 / face-01, ARG0, w2 / we)
(f2 / face-01, mod, t2 / too)
(h / hard, mod, s2 / such)
(r / recommend-01, ARG1, d / do-02)
(r / recommend-01, ARG2, w / we)

Input(Some(Graph(null,ArrayBuffer(Span(0,6,List(2, 1, 0),What should we do in the,(date-entity :time the :time future),false), Span(3,4,List(3),do,do-02,false), Span(12,13,List(4),become,enough,false), Span(14,15,List(5),Are,become-01,false), Span(15,16,List(6),we,succeed-01,false), Span(22,23,List(7),too?,face-01,false), Span(1,2,List(8),should,shoulder-01,false), Span(26,27,List(9),,too,false), Span(24,25,List(10),,hard,false), Span(25,26,List(11),,choke-01,false), Span(23,24,List(12),,such,false)),Map(2 -> future, 5 -> become-01, 12 -> such, 8 -> shoulder-01, 7 -> face-01, 1 -> the, 4 -> enough, 11 -> choke-01, 6 -> succeed-01, 0 -> date-entity, 9 -> too, 3 -> do-02, 10 -> hard),Map(e -> enough, h -> hard, s2 -> shoulder-01, t -> the, b -> become-01, s -> succeed-01, d -> date-entity, d2 -> do-02, t2 -> too, c -> choke-01, s3 -> such, f2 -> face-01, f -> future))),[Ljava.lang.String;@64f55fe1,Annotation([Ljava.lang.String;@2d8e8a70,[Ljava.lang.String;@7d3eb592,[Ljava.lang.String;@38400cf9),Annotation([Ljava.lang.String;@76844647,[Ljava.lang.String;@2f009fed,[Ledu.cmu.lti.nlp.amr.Dependency;@271a2dba),Annotation([Ljava.lang.String;@1f85da64,[Ljava.lang.String;@4b6711ad,[Ljava.lang.String;@60b310db),Annotation([Ljava.lang.String;@16b2968a,[Ljava.lang.String;@27d538c2,[Ledu.cmu.lti.nlp.amr.Entity;@544cafec))
AMR:
(b / become-01, ARG1, s / succeed-01)
(c / choke-01, ARG1, h / hard)
(c / choke-01, ARG6, t2 / too)
(d / date-entity, time, f / future)
(d / date-entity, time, t / the)
(d2 / do-02, ARG1, d / date-entity)
(f2 / face-01, ARG1, s3 / such)
(h / hard, mod, s3 / such)
(s / succeed-01, ARG1, e / enough)
(s2 / shoulder-01, ARG1, s / succeed-01)
(s2 / shoulder-01, ARG6, d2 / do-02)
(s2 / shoulder-01, domain, f2 / face-01)

Decoded in 736,932 microseconds
Sentence: More suffering is under the disguise of glorious looks, 'tis the undisputable fact.

Oracle Span 1:  disguise => disguise-01
Oracle Span 2:  glorious => glorious
Oracle Span 3:  looks => look-02
Oracle Span 4:  More => more
Oracle Span 5:  suffering => suffer-01
Oracle Span 6:  undisputable => dispute-01
Spans:
Span 5-6:  disguise => disguise-01
Span 8-9:  looks, => look
Span 0-1:  More => more
Span 1-2:  suffering => suffer-01
Span 4-5:  the => (country :name (name :op "North"))

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 5-6:  disguise => disguise-01
Oracle Span 7-8:  glorious => glorious
Oracle Span 8-9:  looks => look-02
Oracle Span 0-1:  More => more
Oracle Span 1-2:  suffering => suffer-01
Oracle Span 13-14:  undisputable => dispute-01

Dependencies:
1	More	_	JJR	JJR	_	2	amod	_	_
2	suffering	_	NN	NN	_	3	nsubj	_	_
3	is	_	VBZ	VBZ	_	15	ccomp	_	_
4	under	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	disguise	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	glorious	_	JJ	JJ	_	9	amod	_	_
9	looks	_	NNS	NNS	_	7	pobj	_	_
10	,	_	,	,	_	15	punct	_	_
11	't	_	NN	NN	_	15	nsubj	_	_
12	is	_	VBZ	VBZ	_	15	cop	_	_
13	the	_	DT	DT	_	15	det	_	_
14	undisputable	_	JJ	JJ	_	15	amod	_	_
15	fact	_	NN	NN	_	0	root	_	_
16	.	_	.	.	_	15	punct	_	_

Oracle:
(d / dispute-01, ARG2, d2 / disguise-01)
(d2 / disguise-01, ARG1, s / suffer-01)
(d2 / disguise-01, ARG2, l / look-02)
(l / look-02, ARG1, g / glorious)
(s / suffer-01, quant, m / more)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(2, 1, 0),the,(country :name (name :op "North")),false), Span(5,6,List(3),disguise,disguise-01,false), Span(8,9,List(4),looks,,look,false), Span(1,2,List(5),suffering,suffer-01,false), Span(0,1,List(6),More,more,false)),Map(2 -> "North", 5 -> suffer-01, 1 -> name, 4 -> look, 6 -> more, 0 -> country, 3 -> disguise-01),Map(n -> name, s -> suffer-01, m -> more, d -> disguise-01, l -> look, c -> country))),[Ljava.lang.String;@7d6e5ae7,Annotation([Ljava.lang.String;@4ac93abc,[Ljava.lang.String;@75a42c1e,[Ljava.lang.String;@32247f46),Annotation([Ljava.lang.String;@3d12a287,[Ljava.lang.String;@3e0d7343,[Ledu.cmu.lti.nlp.amr.Dependency;@6a1d7c40),Annotation([Ljava.lang.String;@7bd2e00a,[Ljava.lang.String;@53fc736d,[Ljava.lang.String;@6be853a),Annotation([Ljava.lang.String;@7c016d1,[Ljava.lang.String;@6bfe7493,[Ledu.cmu.lti.nlp.amr.Entity;@5b29159a))
AMR:
(c / country, name, n / name)
(d / disguise-01, ARG0, s / suffer-01)
(d / disguise-01, ARG1, l / look)
(d / disguise-01, ARG6, c / country)
(n / name, op, "North")
(s / suffer-01, ARG6, m / more)

Decoded in 4,873,897 microseconds
Sentence: It's not so bad, they're just playing in their own circle, out of sight, out of mind,

Oracle Span 1:  bad => bad
Oracle Span 2:  circle => circle
Oracle Span 3:  just => just
Oracle Span 4:  mind => mind
Oracle Span 5:  out => out
Oracle Span 6:  out => out
Oracle Span 7:  playing => play-01
Oracle Span 8:  so => so
Oracle Span 9:  they => they
Spans:
Span 17-18:   => sight
Span 21-22:   => mind
Span 3-4:  bad, => sob-01
Span 0-1:  It's => it
Span 1-2:  not => be-located-at-91
Span 9-10:  own => play-01
Span 13-14:  sight, => circle
Span 8-9:  their => just
Span 4-5:  they're => bad

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 4-5:  bad => bad
Oracle Span 13-14:  circle => circle
Oracle Span 8-9:  just => just
Oracle Span 21-22:  mind => mind
Oracle Span 15-16:  out => out
Oracle Span 19-20:  out => out
Oracle Span 9-10:  playing => play-01
Oracle Span 3-4:  so => so
Oracle Span 6-7:  they => they

Dependencies:
1	It	_	PRP	PRP	_	5	nsubj	_	_
2	's	_	VBZ	VBZ	_	5	cop	_	_
3	not	_	RB	RB	_	5	neg	_	_
4	so	_	RB	RB	_	5	advmod	_	_
5	bad	_	JJ	JJ	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	they	_	PRP	PRP	_	10	nsubj	_	_
8	're	_	VBP	VBP	_	10	aux	_	_
9	just	_	RB	RB	_	10	advmod	_	_
10	playing	_	VBG	VBG	_	5	ccomp	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	their	_	PRP$	PRP$	_	14	poss	_	_
13	own	_	JJ	JJ	_	14	amod	_	_
14	circle	_	NN	NN	_	11	pobj	_	_
15	,	_	,	,	_	11	punct	_	_
16	out	_	RB	RB	_	11	dep	_	_
17	of	_	IN	IN	_	11	prep	_	_
18	sight	_	NN	NN	_	17	pobj	_	_
19	,	_	,	,	_	11	punct	_	_
20	out	_	RB	RB	_	11	dep	_	_
21	of	_	IN	IN	_	11	prep	_	_
22	mind	_	NN	NN	_	21	pobj	_	_
23	,	_	,	,	_	5	punct	_	_

Oracle:
(b / bad, degree, s2 / so)
(c / circle, poss, t / they)
(o2 / out, op, m / mind)
(p / play-01, ARG0, t / they)
(p / play-01, location, c / circle)
(p / play-01, location, o / out)
(p / play-01, location, o2 / out)
(p / play-01, mod, j / just)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),It's,it,false), Span(4,5,List(1),they're,bad,false), Span(13,14,List(2),sight,,circle,false), Span(17,18,List(3),,sight,false), Span(9,10,List(4),own,play-01,false), Span(21,22,List(5),,mind,false), Span(1,2,List(6),not,be-located-at-91,false), Span(3,4,List(7),bad,,sob-01,false), Span(8,9,List(8),their,just,false)),Map(2 -> circle, 5 -> mind, 8 -> just, 7 -> sob-01, 1 -> bad, 4 -> play-01, 6 -> be-located-at-91, 0 -> it, 3 -> sight),Map(s2 -> sob-01, b -> bad, b2 -> be-located-at-91, j -> just, s -> sight, m -> mind, p -> play-01, i -> it, c -> circle))),[Ljava.lang.String;@4cd706fe,Annotation([Ljava.lang.String;@56cd5358,[Ljava.lang.String;@3f64db23,[Ljava.lang.String;@354fb689),Annotation([Ljava.lang.String;@41dba628,[Ljava.lang.String;@7d306ad8,[Ledu.cmu.lti.nlp.amr.Dependency;@64140b9e),Annotation([Ljava.lang.String;@2ca7026b,[Ljava.lang.String;@30d10b31,[Ljava.lang.String;@4ec9d159),Annotation([Ljava.lang.String;@a457be5,[Ljava.lang.String;@1ee5949c,[Ledu.cmu.lti.nlp.amr.Entity;@26559cf2))
AMR:
(b / bad, domain, i / it)
(b / bad, domain, p / play-01)
(b2 / be-located-at-91, ARG0, m / mind)
(b2 / be-located-at-91, ARG1, b / bad)
(p / play-01, ARG0, s / sight)
(p / play-01, ARG1, c / circle)
(p / play-01, ARG6, j / just)
(s2 / sob-01, ARG1, b / bad)

Decoded in 720,436 microseconds
Sentence: Not like the old guy Zhang Jizhong not only behaved like a hooligan in his own circle, but also thinks he is virtuous without any talent. He makes TV series when he has nothing to do to wreck people of the whole country.

Oracle Span 1:  also => also
Oracle Span 2:  behaved => behave-01
Oracle Span 3:  but => contrast-01
Oracle Span 4:  circle => circle
Oracle Span 5:  country => (person :poss country)
Oracle Span 6:  do => do-02
Oracle Span 7:  guy => guy
Oracle Span 8:  has => have-03
Oracle Span 9:  he => he
Oracle Span 10:  hooligan => hooligan
Oracle Span 11:  makes => make-01
Oracle Span 12:  nothing => nothing
Oracle Span 13:  old => old
Oracle Span 14:  series => series
Oracle Span 15:  talent => talent
Oracle Span 16:  thinks => think-01
Oracle Span 17:  TV => TV
Oracle Span 18:  virtuous => virtuous
Oracle Span 19:  whole => whole
Oracle Span 20:  wreck => wreck-01
Oracle Span 21:  Zhang Jizhong => (name :op "Jizhong" :op "Zhang")
NER Entity: (person :name (name :op "Zhang" :op "Jizhong"))
Spans:
Span 44-45:   => country
Span 43-44:   => whole
Span 18-19:  also => bunt-01
Span 9-10:  behaved => behave-01
Span 16-17:  circle, => circle
Span 4-5:  guy => guy
Span 31-32:  he => series
Span 26-27:  He => talent
Span 20-21:  he => think-01
Span 0-1:  Not => -
Span 39-40:  of => wreck-01
Span 3-4:  old => old
Span 29-30:  series => make-04
Span 25-26:  talent. => any
Span 19-20:  thinks => also
Span 30-31:  when => tv
Span 37-38:  wreck => do-02
Span 5-7:  Zhang Jizhong => (person :name (name :op "Zhang" :op "Jizhong"))

 *** WARNING: The dependency tree seems broken.  I can't find the head of He in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of TV in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of series in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of when in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of nothing in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of wreck in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of whole in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 45
Langrangian relaxation converged after 55 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of He in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of TV in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of series in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of when in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of nothing in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of wreck in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of whole in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 45
Oracle Span 19-20:  also => also
Oracle Span 9-10:  behaved => behave-01
Oracle Span 18-19:  but => contrast-01
Oracle Span 16-17:  circle => circle
Oracle Span 44-45:  country => (person :poss country)
Oracle Span 37-38:  do => do-02
Oracle Span 4-5:  guy => guy
Oracle Span 34-35:  has => have-03
Oracle Span 21-22:  he => he
Oracle Span 12-13:  hooligan => hooligan
Oracle Span 29-30:  makes => make-01
Oracle Span 35-36:  nothing => nothing
Oracle Span 3-4:  old => old
Oracle Span 31-32:  series => series
Oracle Span 26-27:  talent => talent
Oracle Span 20-21:  thinks => think-01
Oracle Span 30-31:  TV => TV
Oracle Span 23-24:  virtuous => virtuous
Oracle Span 43-44:  whole => whole
Oracle Span 39-40:  wreck => wreck-01
Oracle Span 5-7:  Zhang Jizhong => (name :op "Jizhong" :op "Zhang")

Dependencies:
1	Not	_	RB	RB	_	10	neg	_	_
2	like	_	IN	IN	_	10	prep	_	_
3	the	_	DT	DT	_	5	det	_	_
4	old	_	JJ	JJ	_	5	amod	_	_
5	guy	_	NN	NN	_	2	pobj	_	_
6	Zhang	_	NNP	NNP	_	7	nn	_	_
7	Jizhong	_	NNP	NNP	_	10	nsubj	_	_
8	not	_	RB	RB	_	9	neg	_	_
9	only	_	JJ	JJ	_	10	preconj	_	_
10	behaved	_	VBD	VBD	_	0	root	_	_
11	like	_	IN	IN	_	10	prep	_	_
12	a	_	DT	DT	_	13	det	_	_
13	hooligan	_	NN	NN	_	11	pobj	_	_
14	in	_	IN	IN	_	10	prep	_	_
15	his	_	PRP$	PRP$	_	17	poss	_	_
16	own	_	JJ	JJ	_	17	amod	_	_
17	circle	_	NN	NN	_	14	pobj	_	_
18	,	_	,	,	_	10	punct	_	_
19	but	_	CC	CC	_	20	cc	_	_
20	also	_	RB	RB	_	10	cc	_	_
21	thinks	_	VBZ	VBZ	_	10	conj	_	_
22	he	_	PRP	PRP	_	24	nsubj	_	_
23	is	_	VBZ	VBZ	_	24	cop	_	_
24	virtuous	_	JJ	JJ	_	21	ccomp	_	_
25	without	_	IN	IN	_	24	prep	_	_
26	any	_	DT	DT	_	27	det	_	_
27	talent	_	NN	NN	_	25	pobj	_	_
28	.	_	.	.	_	10	punct	_	_
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	makes	_	VBZ	VBZ	_	0	root	_	_
3	TV	_	NN	NN	_	4	nn	_	_
4	series	_	NN	NN	_	2	dobj	_	_
5	when	_	WRB	WRB	_	7	advmod	_	_
6	he	_	PRP	PRP	_	7	nsubj	_	_
7	has	_	VBZ	VBZ	_	4	rcmod	_	_
8	nothing	_	NN	NN	_	7	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	do	_	VB	VB	_	8	vmod	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	wreck	_	VB	VB	_	10	xcomp	_	_
13	people	_	NNS	NNS	_	12	dobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	whole	_	JJ	JJ	_	17	amod	_	_
17	country	_	NN	NN	_	14	pobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(b / behave-01, ARG0, g / guy)
(b / behave-01, ARG1, h / hooligan)
(b / behave-01, location, c2 / circle)
(c / contrast-01, ARG2, g / guy)
(c2 / circle, poss, g / guy)
(c3 / country, mod, w2 / whole)
(d / do-02, ARG1, n2 / nothing)
(g / guy, mod, o / old)
(g / guy, name, n / name)
(h2 / have-03, ARG0, g / guy)
(h2 / have-03, ARG1, n2 / nothing)
(m2 / make-01, ARG0, h3 / he)
(m2 / make-01, ARG1, s / series)
(m2 / make-01, purpose, w / wreck-01)
(m2 / make-01, time, h2 / have-03)
(n / name, op, "Jizhong")
(n / name, op, "Zhang")
(p / person, poss, c3 / country)
(s / series, mod, t3 / TV)
(t / think-01, ARG0, g / guy)
(t / think-01, ARG1, v / virtuous)
(t / think-01, mod, a2 / also)
(v / virtuous, domain, g / guy)
(v / virtuous, manner, t2 / talent)
(w / wreck-01, ARG1, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),circle,,circle,false), Span(18,19,List(1),also,bunt-01,false), Span(25,26,List(2),talent.,any,false), Span(31,32,List(3),he,series,false), Span(9,10,List(4),behaved,behave-01,false), Span(19,20,List(5),thinks,also,false), Span(0,1,List(6),Not,-,false), Span(4,5,List(7),guy,guy,false), Span(44,45,List(8),,country,false), Span(5,7,List(12, 11, 10, 9),Zhang Jizhong,(person :name (name :op "Zhang" :op "Jizhong")),false), Span(29,30,List(13),series,make-04,false), Span(26,27,List(14),He,talent,false), Span(30,31,List(15),when,tv,false), Span(39,40,List(16),of,wreck-01,false), Span(37,38,List(17),wreck,do-02,false), Span(3,4,List(18),old,old,false), Span(43,44,List(19),,whole,false), Span(20,21,List(20),he,think-01,false)),Map(2 -> any, 5 -> also, 12 -> "Jizhong", 15 -> tv, 8 -> country, 18 -> old, 7 -> guy, 17 -> do-02, 1 -> bunt-01, 4 -> behave-01, 11 -> "Zhang", 14 -> talent, 20 -> think-01, 6 -> -, 0 -> circle, 9 -> person, 16 -> wreck-01, 19 -> whole, 3 -> series, 10 -> name, 13 -> make-04),Map(w -> wreck-01, n -> name, b -> bunt-01, t -> talent, b2 -> behave-01, s -> series, d -> do-02, m -> make-04, t3 -> think-01, g -> guy, p -> person, a -> any, t2 -> tv, w2 -> whole, a2 -> also, - -> -, c -> circle, o -> old, c2 -> country))),[Ljava.lang.String;@39d4dc61,Annotation([Ljava.lang.String;@316b76c6,[Ljava.lang.String;@3fba40ab,[Ljava.lang.String;@30965d5a),Annotation([Ljava.lang.String;@2fbeb8fd,[Ljava.lang.String;@4509268a,[Ledu.cmu.lti.nlp.amr.Dependency;@28db8998),Annotation([Ljava.lang.String;@2a257d54,[Ljava.lang.String;@708641bd,[Ljava.lang.String;@7cb70451),Annotation([Ljava.lang.String;@8d4d516,[Ljava.lang.String;@99ad685,[Ledu.cmu.lti.nlp.amr.Entity;@4b53f5a2))
AMR:
(b / bunt-01, ARG1, t / talent)
(b / bunt-01, ARG6, c / circle)
(b2 / behave-01, ARG0, p / person)
(b2 / behave-01, ARG1, - / -)
(d / do-02, ARG0, p / person)
(d / do-02, ARG1, w2 / whole)
(d / do-02, ARG2, c / circle)
(d / do-02, location, g / guy)
(g / guy, mod, o / old)
(m / make-04, ARG0, p / person)
(m / make-04, ARG1, t2 / tv)
(n / name, op, "Jizhong")
(n / name, op, "Zhang")
(p / person, name, n / name)
(s / series, mod, t2 / tv)
(t / talent, mod, a / any)
(t3 / think-01, ARG0, p / person)
(t3 / think-01, ARG1, c2 / country)
(t3 / think-01, ARG6, a2 / also)
(w / wreck-01, ARG0, p / person)

Decoded in 7,239,966 microseconds
Sentence: Both take what they need

Oracle Span 1:  Both => both
Oracle Span 2:  need => (thing :ARG1-of need-01)
Oracle Span 3:  take => take-01
Spans:
Span 0-1:  Both => both
Span 4-5:  need => need-01
Span 1-2:  take => (take-01 :ARG0-of mean-01)

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 0-1:  Both => both
Oracle Span 4-5:  need => (thing :ARG1-of need-01)
Oracle Span 1-2:  take => take-01

Dependencies:
1	Both	_	DT	DT	_	2	nsubj	_	_
2	take	_	VBP	VBP	_	0	root	_	_
3	what	_	WP	WP	_	5	dobj	_	_
4	they	_	PRP	PRP	_	5	nsubj	_	_
5	need	_	VBP	VBP	_	2	ccomp	_	_

Oracle:
(n / need-01, ARG0, b / both)
(n / need-01, ARG1, t2 / thing)
(t / take-01, ARG0, b / both)
(t / take-01, ARG1, t2 / thing)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),need,need-01,false), Span(1,2,List(2, 1),take,(take-01 :ARG0-of mean-01),false), Span(0,1,List(3),Both,both,false)),Map(2 -> mean-01, 1 -> take-01, 0 -> need-01, 3 -> both),Map(n -> need-01, b -> both, t -> take-01, m -> mean-01))),[Ljava.lang.String;@5243ba6a,Annotation([Ljava.lang.String;@350b6ce0,[Ljava.lang.String;@1f4d72cc,[Ljava.lang.String;@3fc1408),Annotation([Ljava.lang.String;@4ca37ef7,[Ljava.lang.String;@22a177ef,[Ledu.cmu.lti.nlp.amr.Dependency;@560eba65),Annotation([Ljava.lang.String;@3531b8f8,[Ljava.lang.String;@62322c6f,[Ljava.lang.String;@4b0531c9),Annotation([Ljava.lang.String;@68fb775e,[Ljava.lang.String;@50b5f4c1,[Ledu.cmu.lti.nlp.amr.Entity;@2317ebec))
AMR:
(m / mean-01, ARG0, t / take-01)
(m / mean-01, ARG1, n / need-01)
(t / take-01, ARG0, b / both)
(t / take-01, ARG1, n / need-01)

Decoded in 150,767 microseconds
Sentence: When can China have a pure, innocent girl?

Oracle Span 1:  can => possible
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  girl => girl
Oracle Span 4:  have => have-03
Oracle Span 5:  innocent => innocent-41
Oracle Span 6:  pure => pure
NER Entity: (country :name (name :op "China"))
Spans:
Span 8-9:   => girl
Span 1-2:  can => possible
Span 2-3:  China => (country :name (name :op "China"))
Span 7-8:  girl? => (person :ARG1-of innocent-41)
Span 3-4:  have => have-03
Span 5-6:  pure, => pure

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Oracle Span 1-2:  can => possible
Oracle Span 2-3:  China => (country :name (name :op "China"))
Oracle Span 8-9:  girl => girl
Oracle Span 3-4:  have => have-03
Oracle Span 7-8:  innocent => innocent-41
Oracle Span 5-6:  pure => pure

Dependencies:
1	When	_	WRB	WRB	_	4	advmod	_	_
2	can	_	MD	MD	_	4	aux	_	_
3	China	_	NNP	NNP	_	4	nsubj	_	_
4	have	_	VB	VB	_	0	root	_	_
5	a	_	DT	DT	_	9	det	_	_
6	pure	_	JJ	JJ	_	9	amod	_	_
7	,	_	,	,	_	9	punct	_	_
8	innocent	_	JJ	JJ	_	9	amod	_	_
9	girl	_	NN	NN	_	4	dobj	_	_
10	?	_	.	.	_	4	punct	_	_

Oracle:
(c / country, name, n / name)
(g / girl, mod, p2 / pure)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, g / girl)
(i / innocent-41, ARG1, g / girl)
(n / name, op, "China")
(p / possible, domain, h / have-03)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(1, 0),girl?,(person :ARG1-of innocent-41),false), Span(5,6,List(2),pure,,pure,false), Span(1,2,List(3),can,possible,false), Span(2,3,List(6, 5, 4),China,(country :name (name :op "China")),false), Span(3,4,List(7),have,have-03,false), Span(8,9,List(8),,girl,false)),Map(2 -> pure, 5 -> name, 8 -> girl, 7 -> have-03, 1 -> innocent-41, 4 -> country, 6 -> "China", 0 -> person, 3 -> possible),Map(n -> name, h -> have-03, p2 -> pure, g -> girl, p -> person, i -> innocent-41, c -> country, p3 -> possible))),[Ljava.lang.String;@505fec54,Annotation([Ljava.lang.String;@699213b3,[Ljava.lang.String;@79789b26,[Ljava.lang.String;@778905e),Annotation([Ljava.lang.String;@28eaf1a9,[Ljava.lang.String;@519c708c,[Ledu.cmu.lti.nlp.amr.Dependency;@6c807032),Annotation([Ljava.lang.String;@2f39f79c,[Ljava.lang.String;@50213c6b,[Ljava.lang.String;@628b2ef3),Annotation([Ljava.lang.String;@d65c370,[Ljava.lang.String;@6d804057,[Ledu.cmu.lti.nlp.amr.Entity;@349bfbe8))
AMR:
(c / country, name, n / name)
(g / girl, mod, p2 / pure)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, g / girl)
(i / innocent-41, ARG0, g / girl)
(i / innocent-41, ARG1, p / person)
(n / name, op, "China")
(p3 / possible, domain, h / have-03)

Decoded in 360,116 microseconds
Sentence: A story is now very shocking in the entertainment world. It is rumored that Hsu Yuki has been forced out because she refused to drink with a guest as arranged by the company and has to switch to work as a lawyer's assistant instead to make ends meet.

Oracle Span 1:  and => and
Oracle Span 2:  arranged => arrange-01
Oracle Span 3:  assistant => (person :ARG0-of assist-01)
Oracle Span 4:  because => cause-01
Oracle Span 5:  company => company
Oracle Span 6:  drink => drink-01
Oracle Span 7:  ends => end
Oracle Span 8:  entertainment => entertain-01
Oracle Span 9:  forced => force-01
Oracle Span 10:  guest => guest
Oracle Span 11:  Hsu Yuki => (person :name (name :op "Yuki" :op "Hsu"))
Oracle Span 12:  instead => instead
Oracle Span 13:  lawyer => lawyer
Oracle Span 14:  make => make-02
Oracle Span 15:  meet => meet-03
Oracle Span 16:  now => now
Oracle Span 17:  out => out
Oracle Span 18:  refused => refuse-01
Oracle Span 19:  rumored => rumor-01
Oracle Span 20:  shocking => shock-01
Oracle Span 21:  story => story
Oracle Span 22:  switch => switch-01
Oracle Span 23:  very => very
Oracle Span 24:  work => work-01
Oracle Span 25:  world => world
NER Entity: (person :name (name :op "Hsu" :op "Yuki"))
Spans:
Span 48-49:   => (end :op date-entity)
Span 49-50:   => meet-02
Span 0-4:  A story is now => (date-entity :time now)
Span 28-29:  as => guest
Span 39-40:  as => work-01
Span 42-43:  assistant => lawyer
Span 30-31:  by => arrange-01
Span 8-9:  entertainment => entertainment
Span 34-35:  has => and
Span 45-46:  make => instead
Span 47-48:  meet. => make-01
Span 19-20:  out => force-01
Span 5-6:  shocking => shocking
Span 1-2:  story => story
Span 13-14:  that => rumor-01
Span 23-24:  to => refuse-01
Span 44-45:  to => ascertain-01
Span 37-38:  to => switch-01
Span 4-5:  very => very
Span 25-26:  with => drink-01
Span 9-10:  world. => world
Span 15-17:  Yuki has => (person :name (name :op "Hsu" :op "Yuki"))

 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of lawyer in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of assistant in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of instead in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ends in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of meet in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 50
Langrangian relaxation converged after 43 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of lawyer in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of assistant in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of instead in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ends in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of meet in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 50
Oracle Span 34-35:  and => and
Oracle Span 30-31:  arranged => arrange-01
Oracle Span 44-45:  assistant => (person :ARG0-of assist-01)
Oracle Span 21-22:  because => cause-01
Oracle Span 33-34:  company => company
Oracle Span 25-26:  drink => drink-01
Oracle Span 48-49:  ends => end
Oracle Span 8-9:  entertainment => entertain-01
Oracle Span 19-20:  forced => force-01
Oracle Span 28-29:  guest => guest
Oracle Span 15-17:  Hsu Yuki => (person :name (name :op "Yuki" :op "Hsu"))
Oracle Span 45-46:  instead => instead
Oracle Span 42-43:  lawyer => lawyer
Oracle Span 47-48:  make => make-02
Oracle Span 49-50:  meet => meet-03
Oracle Span 3-4:  now => now
Oracle Span 20-21:  out => out
Oracle Span 23-24:  refused => refuse-01
Oracle Span 13-14:  rumored => rumor-01
Oracle Span 5-6:  shocking => shock-01
Oracle Span 1-2:  story => story
Oracle Span 37-38:  switch => switch-01
Oracle Span 4-5:  very => very
Oracle Span 39-40:  work => work-01
Oracle Span 9-10:  world => world

Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	story	_	NN	NN	_	6	nsubj	_	_
3	is	_	VBZ	VBZ	_	6	cop	_	_
4	now	_	RB	RB	_	6	advmod	_	_
5	very	_	RB	RB	_	6	advmod	_	_
6	shocking	_	JJ	JJ	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	entertainment	_	NN	NN	_	10	nn	_	_
10	world	_	NN	NN	_	7	pobj	_	_
11	.	_	.	.	_	6	punct	_	_
1	It	_	PRP	PRP	_	3	nsubjpass	_	_
2	is	_	VBZ	VBZ	_	3	auxpass	_	_
3	rumored	_	VBN	VBN	_	0	root	_	_
4	that	_	IN	IN	_	9	mark	_	_
5	Hsu	_	NNP	NNP	_	6	nn	_	_
6	Yuki	_	NNP	NNP	_	9	nsubjpass	_	_
7	has	_	VBZ	VBZ	_	9	aux	_	_
8	been	_	VBN	VBN	_	9	auxpass	_	_
9	forced	_	VBN	VBN	_	3	ccomp	_	_
10	out	_	RP	RP	_	9	prt	_	_
11	because	_	IN	IN	_	13	mark	_	_
12	she	_	PRP	PRP	_	13	nsubj	_	_
13	refused	_	VBD	VBD	_	9	advcl	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	drink	_	VB	VB	_	13	xcomp	_	_
16	with	_	IN	IN	_	15	prep	_	_
17	a	_	DT	DT	_	18	det	_	_
18	guest	_	NN	NN	_	16	pobj	_	_
19	as	_	IN	IN	_	20	mark	_	_
20	arranged	_	VBD	VBD	_	15	advcl	_	_
21	by	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	company	_	NN	NN	_	21	pobj	_	_
24	and	_	CC	CC	_	20	cc	_	_
25	has	_	VBZ	VBZ	_	20	conj	_	_
26	to	_	TO	TO	_	27	aux	_	_
27	switch	_	VB	VB	_	25	xcomp	_	_
28	to	_	TO	TO	_	29	aux	_	_
29	work	_	VB	VB	_	27	xcomp	_	_
30	as	_	IN	IN	_	29	prep	_	_
31	a	_	DT	DT	_	32	det	_	_
32	lawyer	_	NN	NN	_	34	poss	_	_
33	's	_	POS	POS	_	32	possessive	_	_
34	assistant	_	NN	NN	_	30	pobj	_	_
35	instead	_	RB	RB	_	37	advmod	_	_
36	to	_	TO	TO	_	37	aux	_	_
37	make	_	VB	VB	_	34	vmod	_	_
38	ends	_	NNS	NNS	_	39	nsubj	_	_
39	meet	_	VB	VB	_	37	ccomp	_	_
40	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, f / force-01)
(a2 / assist-01, ARG0, p2 / person)
(a2 / assist-01, ARG1, l / lawyer)
(a3 / arrange-01, ARG0, c2 / company)
(a3 / arrange-01, ARG1, d / drink-01)
(c / cause-01, ARG0, r2 / refuse-01)
(c / cause-01, ARG1, f / force-01)
(d / drink-01, accompanier, g / guest)
(f / force-01, ARG1, p / person)
(f / force-01, ARG2, o / out)
(m2 / make-02, ARG0, p / person)
(m2 / make-02, ARG1, m3 / meet-03)
(m3 / meet-03, ARG0, e2 / end)
(n2 / name, op, "Hsu")
(n2 / name, op, "Yuki")
(p / person, name, n2 / name)
(r / rumor-01, ARG1, a / and)
(r2 / refuse-01, ARG0, p / person)
(r2 / refuse-01, ARG1, d / drink-01)
(s / shock-01, ARG0, s2 / story)
(s / shock-01, degree, v / very)
(s / shock-01, location, w / world)
(s / shock-01, time, n / now)
(s3 / switch-01, ARG1, p / person)
(s3 / switch-01, ARG2, w2 / work-01)
(w / world, mod, e / entertain-01)
(w2 / work-01, ARG0, p / person)
(w2 / work-01, ARG1, p2 / person)
(w2 / work-01, mod, i / instead)
(w2 / work-01, purpose, m2 / make-02)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),that,rumor-01,false), Span(9,10,List(1),world.,world,false), Span(30,31,List(2),by,arrange-01,false), Span(48,49,List(4, 3),,(end :op date-entity),false), Span(8,9,List(5),entertainment,entertainment,false), Span(25,26,List(6),with,drink-01,false), Span(23,24,List(7),to,refuse-01,false), Span(44,45,List(8),to,ascertain-01,false), Span(37,38,List(9),to,switch-01,false), Span(45,46,List(10),make,instead,false), Span(4,5,List(11),very,very,false), Span(49,50,List(12),,meet-02,false), Span(5,6,List(13),shocking,shocking,false), Span(28,29,List(14),as,guest,false), Span(15,17,List(18, 17, 16, 15),Yuki has,(person :name (name :op "Hsu" :op "Yuki")),false), Span(0,4,List(20, 19),A story is now,(date-entity :time now),false), Span(39,40,List(21),as,work-01,false), Span(19,20,List(22),out,force-01,false), Span(34,35,List(23),has,and,false), Span(1,2,List(24),story,story,false), Span(42,43,List(25),assistant,lawyer,false), Span(47,48,List(26),meet.,make-01,false)),Map(2 -> arrange-01, 5 -> entertainment, 12 -> meet-02, 8 -> ascertain-01, 15 -> person, 21 -> work-01, 18 -> "Yuki", 24 -> story, 7 -> refuse-01, 1 -> world, 17 -> "Hsu", 23 -> and, 26 -> make-01, 4 -> date-entity, 11 -> very, 14 -> guest, 20 -> now, 6 -> drink-01, 9 -> switch-01, 0 -> rumor-01, 22 -> force-01, 16 -> name, 19 -> date-entity, 10 -> instead, 3 -> end, 25 -> lawyer, 13 -> shocking),Map(e -> end, w -> world, n -> name, s2 -> shocking, m2 -> make-01, d3 -> date-entity, e2 -> entertainment, a3 -> and, s -> switch-01, v -> very, m -> meet-02, d -> date-entity, r2 -> refuse-01, g -> guest, p -> person, a -> arrange-01, d2 -> drink-01, w2 -> work-01, i -> instead, a2 -> ascertain-01, r -> rumor-01, s3 -> story, l -> lawyer, f -> force-01, n2 -> now))),[Ljava.lang.String;@53bec26c,Annotation([Ljava.lang.String;@7724ab3,[Ljava.lang.String;@50653ff1,[Ljava.lang.String;@61172cd3),Annotation([Ljava.lang.String;@441f3f3f,[Ljava.lang.String;@51adc2dd,[Ledu.cmu.lti.nlp.amr.Dependency;@28cef5ae),Annotation([Ljava.lang.String;@70e735d0,[Ljava.lang.String;@4dbc1a34,[Ljava.lang.String;@72b89274),Annotation([Ljava.lang.String;@2d847a08,[Ljava.lang.String;@648483dd,[Ledu.cmu.lti.nlp.amr.Entity;@49c458c3))
AMR:
(a / arrange-01, ARG0, g / guest)
(a / arrange-01, ARG1, w2 / work-01)
(a2 / ascertain-01, ARG1, l / lawyer)
(a2 / ascertain-01, ARG6, i / instead)
(a3 / and, op, r2 / refuse-01)
(d2 / drink-01, ARG1, g / guest)
(d3 / date-entity, time, n2 / now)
(e / end, op, d / date-entity)
(f / force-01, ARG1, p / person)
(l / lawyer, domain, d3 / date-entity)
(m / meet-02, ARG1, e / end)
(m2 / make-01, ARG0, e / end)
(m2 / make-01, ARG1, a2 / ascertain-01)
(n / name, op, "Hsu")
(n / name, op, "Yuki")
(p / person, name, n / name)
(r / rumor-01, ARG1, p / person)
(r2 / refuse-01, ARG1, f / force-01)
(r2 / refuse-01, ARG2, d2 / drink-01)
(s / switch-01, ARG1, w2 / work-01)
(s2 / shocking, degree, v / very)
(s2 / shocking, domain, d3 / date-entity)
(s2 / shocking, domain, s3 / story)
(s2 / shocking, location, w / world)
(w / world, mod, e2 / entertainment)
(w2 / work-01, ARG1, a2 / ascertain-01)

Decoded in 2,808,982 microseconds
Sentence: Much envied super stars often encounter social engagements or circumstances which they don't welcome but have to join in,

Oracle Span 1:  circumstances => circumstance
Oracle Span 2:  encounter => encounter-01
Oracle Span 3:  engagements => engage-01
Oracle Span 4:  envied => (person :ARG1-of envy-01)
Oracle Span 5:  join => join-05
Oracle Span 6:  Much => much
Oracle Span 7:  often => often
Oracle Span 8:  or => or
Oracle Span 9:  social => social
Oracle Span 10:  stars => star-01
Oracle Span 11:  super => super
Oracle Span 12:  welcome => welcome-01
Spans:
Span 14-15:  but => welcome-01
Span 9-10:  circumstances => circumstance
Span 5-6:  encounter => encounter-01
Span 7-8:  engagements => engagement
Span 15-16:  have => bunt-01
Span 18-19:  in, => join-01
Span 0-1:  Much => much
Span 4-5:  often => often
Span 8-9:  or => or
Span 6-7:  social => social
Span 3-4:  stars => star
Span 2-3:  super => super
Span 16-17:  to => have-02

Langrangian relaxation converged after 86 iterations. Delta = 0.0
Oracle Span 9-10:  circumstances => circumstance
Oracle Span 5-6:  encounter => encounter-01
Oracle Span 7-8:  engagements => engage-01
Oracle Span 1-2:  envied => (person :ARG1-of envy-01)
Oracle Span 18-19:  join => join-05
Oracle Span 0-1:  Much => much
Oracle Span 4-5:  often => often
Oracle Span 8-9:  or => or
Oracle Span 6-7:  social => social
Oracle Span 3-4:  stars => star-01
Oracle Span 2-3:  super => super
Oracle Span 14-15:  welcome => welcome-01

Dependencies:
1	Much	_	RB	RB	_	2	nsubj	_	_
2	envied	_	VBD	VBD	_	0	root	_	_
3	super	_	JJ	JJ	_	4	amod	_	_
4	stars	_	NNS	NNS	_	6	nsubj	_	_
5	often	_	RB	RB	_	6	advmod	_	_
6	encounter	_	VB	VB	_	2	ccomp	_	_
7	social	_	JJ	JJ	_	8	amod	_	_
8	engagements	_	NNS	NNS	_	6	dobj	_	_
9	or	_	CC	CC	_	8	cc	_	_
10	circumstances	_	NNS	NNS	_	8	conj	_	_
11	which	_	WDT	WDT	_	15	dobj	_	_
12	they	_	PRP	PRP	_	15	nsubj	_	_
13	do	_	VBP	VBP	_	15	aux	_	_
14	n't	_	RB	RB	_	15	neg	_	_
15	welcome	_	VB	VB	_	6	dep	_	_
16	but	_	CC	CC	_	6	cc	_	_
17	have	_	VB	VB	_	6	conj	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	join	_	VB	VB	_	17	xcomp	_	_
20	in	_	RP	RP	_	19	prt	_	_
21	,	_	,	,	_	2	punct	_	_

Oracle:
(e / encounter-01, ARG0, p / person)
(e / encounter-01, ARG1, o2 / or)
(e / encounter-01, frequency, o / often)
(e2 / envy-01, ARG1, p / person)
(e2 / envy-01, degree, m / much)
(e3 / engage-01, mod, s3 / social)
(j / join-05, ARG0, p / person)
(j / join-05, ARG1, o2 / or)
(o2 / or, op, c2 / circumstance)
(o2 / or, op, e3 / engage-01)
(p / person, mod, s2 / super)
(s / star-01, ARG1, p / person)
(w / welcome-01, ARG0, p / person)
(w / welcome-01, ARG1, o2 / or)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),stars,star,false), Span(7,8,List(1),engagements,engagement,false), Span(6,7,List(2),social,social,false), Span(2,3,List(3),super,super,false), Span(8,9,List(4),or,or,false), Span(16,17,List(5),to,have-02,false), Span(18,19,List(6),in,,join-01,false), Span(0,1,List(7),Much,much,false), Span(5,6,List(8),encounter,encounter-01,false), Span(14,15,List(9),but,welcome-01,false), Span(15,16,List(10),have,bunt-01,false), Span(9,10,List(11),circumstances,circumstance,false), Span(4,5,List(12),often,often,false)),Map(2 -> social, 5 -> have-02, 12 -> often, 8 -> encounter-01, 7 -> much, 1 -> engagement, 4 -> or, 11 -> circumstance, 6 -> join-01, 0 -> star, 9 -> welcome-01, 3 -> super, 10 -> bunt-01),Map(e -> engagement, w -> welcome-01, h -> have-02, s2 -> social, b -> bunt-01, e2 -> encounter-01, j -> join-01, s -> star, m -> much, o2 -> often, s3 -> super, c -> circumstance, o -> or))),[Ljava.lang.String;@57cf6728,Annotation([Ljava.lang.String;@871bc5f,[Ljava.lang.String;@22f4a762,[Ljava.lang.String;@54ec40b2),Annotation([Ljava.lang.String;@78b68b20,[Ljava.lang.String;@7da0532d,[Ledu.cmu.lti.nlp.amr.Dependency;@7ae8344c),Annotation([Ljava.lang.String;@4cb70273,[Ljava.lang.String;@947f4e,[Ljava.lang.String;@7f527d4a),Annotation([Ljava.lang.String;@44237cb8,[Ljava.lang.String;@30f35ad5,[Ledu.cmu.lti.nlp.amr.Entity;@133e2d8a))
AMR:
(b / bunt-01, ARG2, h / have-02)
(e / engagement, mod, s2 / social)
(e2 / encounter-01, ARG0, s / star)
(e2 / encounter-01, ARG1, e / engagement)
(e2 / encounter-01, ARG2, o / or)
(e2 / encounter-01, frequency, o2 / often)
(h / have-02, ARG0, s / star)
(h / have-02, ARG1, j / join-01)
(j / join-01, ARG1, m / much)
(o / or, op, c / circumstance)
(s / star, mod, s3 / super)
(w / welcome-01, ARG1, h / have-02)

Decoded in 1,258,523 microseconds
Sentence: After all, there are many things they can't decide themselves 'cause that will have to do with many aspects and the interests of many people,

Oracle Span 1:  After => after-all
Oracle Span 2:  and => and
Oracle Span 3:  aspects => aspect
Oracle Span 4:  cause => cause-01
Oracle Span 5:  decide => decide-01
Oracle Span 6:  do => do-04
Oracle Span 7:  interests => interest
Oracle Span 8:  many => many
Oracle Span 9:  many => (person :quant many)
Oracle Span 10:  many => many
Oracle Span 11:  they => they
Oracle Span 12:  things => thing
Spans:
Span 25-26:   => many
Span 10-11:  'cause => decide-01
Span 0-1:  After => after
Span 1-2:  all, => all
Span 19-20:  and => many
Span 8-9:  decide => possible
Span 15-16:  do => have-02
Span 21-22:  interests => and
Span 23-24:  many => interest
Span 17-18:  many => do-02
Span 20-21:  the => aspect
Span 6-7:  they => thing
Span 5-6:  things => many

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 0-1:  After => after-all
Oracle Span 22-23:  and => and
Oracle Span 21-22:  aspects => aspect
Oracle Span 13-14:  cause => cause-01
Oracle Span 10-11:  decide => decide-01
Oracle Span 18-19:  do => do-04
Oracle Span 24-25:  interests => interest
Oracle Span 5-6:  many => many
Oracle Span 20-21:  many => (person :quant many)
Oracle Span 26-27:  many => many
Oracle Span 7-8:  they => they
Oracle Span 6-7:  things => thing

Dependencies:
1	After	_	IN	IN	_	7	prep	_	_
2	all	_	DT	DT	_	1	pobj	_	_
3	,	_	,	,	_	7	punct	_	_
4	there	_	RB	RB	_	7	advmod	_	_
5	are	_	VBP	VBP	_	7	cop	_	_
6	many	_	JJ	JJ	_	7	amod	_	_
7	things	_	NNS	NNS	_	0	root	_	_
8	they	_	PRP	PRP	_	11	nsubj	_	_
9	ca	_	MD	MD	_	11	aux	_	_
10	n't	_	RB	RB	_	11	neg	_	_
11	decide	_	VB	VB	_	7	rcmod	_	_
12	themselves	_	PRP	PRP	_	16	nsubj	_	_
13	'cause	_	JJ	JJ	_	16	dep	_	_
14	that	_	WDT	WDT	_	16	nsubj	_	_
15	will	_	MD	MD	_	16	aux	_	_
16	have	_	VB	VB	_	11	xcomp	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	do	_	VB	VB	_	16	xcomp	_	_
19	with	_	IN	IN	_	18	prep	_	_
20	many	_	JJ	JJ	_	21	amod	_	_
21	aspects	_	NNS	NNS	_	19	pobj	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	the	_	DT	DT	_	24	det	_	_
24	interests	_	NNS	NNS	_	21	conj	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	many	_	JJ	JJ	_	27	amod	_	_
27	people	_	NNS	NNS	_	25	pobj	_	_
28	,	_	,	,	_	7	punct	_	_

Oracle:
(a / and, op, a2 / aspect)
(a / and, op, i / interest)
(a2 / aspect, quant, m2 / many)
(d / decide-01, ARG0, t / they)
(d / decide-01, ARG1, t2 / thing)
(d2 / do-04, ARG0, d / decide-01)
(d2 / do-04, ARG1, a / and)
(i / interest, poss, p2 / person)
(p2 / person, quant, m3 / many)
(t2 / thing, quant, m / many)

Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),and,many,false), Span(23,24,List(1),many,interest,false), Span(25,26,List(2),,many,false), Span(21,22,List(3),interests,and,false), Span(6,7,List(4),they,thing,false), Span(1,2,List(5),all,,all,false), Span(5,6,List(6),things,many,false), Span(17,18,List(7),many,do-02,false), Span(10,11,List(8),'cause,decide-01,false), Span(20,21,List(9),the,aspect,false), Span(8,9,List(10),decide,possible,false), Span(0,1,List(11),After,after,false), Span(15,16,List(12),do,have-02,false)),Map(2 -> many, 5 -> all, 12 -> have-02, 8 -> decide-01, 7 -> do-02, 1 -> interest, 4 -> thing, 11 -> after, 6 -> many, 0 -> many, 9 -> aspect, 3 -> and, 10 -> possible),Map(m3 -> many, h -> have-02, t -> thing, m2 -> many, a3 -> aspect, m -> many, d -> do-02, p -> possible, a -> and, d2 -> decide-01, i -> interest, a2 -> all, a4 -> after))),[Ljava.lang.String;@507c3052,Annotation([Ljava.lang.String;@44600e35,[Ljava.lang.String;@5b59534d,[Ljava.lang.String;@171a2148),Annotation([Ljava.lang.String;@26556d59,[Ljava.lang.String;@6200de00,[Ledu.cmu.lti.nlp.amr.Dependency;@73522a36),Annotation([Ljava.lang.String;@35044575,[Ljava.lang.String;@38b6c929,[Ljava.lang.String;@5c22e0e1),Annotation([Ljava.lang.String;@3e4372c9,[Ljava.lang.String;@29fbb799,[Ledu.cmu.lti.nlp.amr.Entity;@278adc0e))
AMR:
(a / and, mod, a3 / aspect)
(a / and, op, p / possible)
(a4 / after, calendar, a2 / all)
(d / do-02, ARG1, m / many)
(d2 / decide-01, ARG1, t / thing)
(d2 / decide-01, time, a4 / after)
(h / have-02, ARG1, d2 / decide-01)
(i / interest, calendar, a / and)
(i / interest, calendar, m2 / many)
(m / many, calendar, a / and)
(p / possible, domain, d2 / decide-01)
(t / thing, quant, m3 / many)

Decoded in 670,091 microseconds
Sentence: Sometimes a dinner party which seems very normal for us ordinary people may not be that simple for stars as we imagined.

Oracle Span 1:  dinner => dinner
Oracle Span 2:  imagined => imagine-01
Oracle Span 3:  may => possible
Oracle Span 4:  normal => normal
Oracle Span 5:  ordinary => (person :mod ordinary)
Oracle Span 6:  party => party
Oracle Span 7:  seems => seem-01
Oracle Span 8:  simple => simple
Oracle Span 9:  Sometimes => sometimes
Oracle Span 10:  stars => (person :ARG1-of star-01)
Oracle Span 11:  that => that
Oracle Span 12:  very => very
Oracle Span 13:  we => we
Spans:
Span 19-20:  as => ask-01
Span 2-3:  dinner => dinner
Span 21-22:  imagined. => imagine-01
Span 7-8:  normal => normal
Span 10-11:  ordinary => ordinary
Span 3-4:  party => party
Span 16-17:  simple => simple
Span 0-1:  Sometimes => sometimes
Span 18-19:  stars => star
Span 6-7:  very => very

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 2-3:  dinner => dinner
Oracle Span 21-22:  imagined => imagine-01
Oracle Span 12-13:  may => possible
Oracle Span 7-8:  normal => normal
Oracle Span 10-11:  ordinary => (person :mod ordinary)
Oracle Span 3-4:  party => party
Oracle Span 5-6:  seems => seem-01
Oracle Span 16-17:  simple => simple
Oracle Span 0-1:  Sometimes => sometimes
Oracle Span 18-19:  stars => (person :ARG1-of star-01)
Oracle Span 15-16:  that => that
Oracle Span 6-7:  very => very
Oracle Span 20-21:  we => we

Dependencies:
1	Sometimes	_	RB	RB	_	17	advmod	_	_
2	a	_	DT	DT	_	4	det	_	_
3	dinner	_	NN	NN	_	4	nn	_	_
4	party	_	NN	NN	_	17	nsubj	_	_
5	which	_	WDT	WDT	_	6	nsubj	_	_
6	seems	_	VBZ	VBZ	_	4	rcmod	_	_
7	very	_	RB	RB	_	8	advmod	_	_
8	normal	_	JJ	JJ	_	12	amod	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	us	_	PRP	PRP	_	9	pobj	_	_
11	ordinary	_	JJ	JJ	_	12	amod	_	_
12	people	_	NNS	NNS	_	6	xcomp	_	_
13	may	_	MD	MD	_	17	aux	_	_
14	not	_	RB	RB	_	17	neg	_	_
15	be	_	VB	VB	_	17	cop	_	_
16	that	_	RB	RB	_	17	advmod	_	_
17	simple	_	JJ	JJ	_	0	root	_	_
18	for	_	IN	IN	_	17	prep	_	_
19	stars	_	NNS	NNS	_	18	pobj	_	_
20	as	_	IN	IN	_	22	mark	_	_
21	we	_	PRP	PRP	_	22	nsubj	_	_
22	imagined	_	VBD	VBD	_	17	advcl	_	_
23	.	_	.	.	_	17	punct	_	_

Oracle:
(i / imagine-01, ARG0, w / we)
(n / normal, degree, v / very)
(p / party, mod, d / dinner)
(p / party, mod, n / normal)
(p2 / person, mod, o / ordinary)
(p3 / possible, domain, s3 / simple)
(p3 / possible, frequency, s2 / sometimes)
(s / seem-01, ARG1, p / party)
(s / seem-01, ARG2, w / we)
(s3 / simple, degree, t / that)
(s3 / simple, domain, p / party)
(s3 / simple, prep-for, p4 / person)
(s4 / star-01, ARG1, p4 / person)
(w / we, mod, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),simple,simple,false), Span(18,19,List(1),stars,star,false), Span(0,1,List(2),Sometimes,sometimes,false), Span(2,3,List(3),dinner,dinner,false), Span(10,11,List(4),ordinary,ordinary,false), Span(21,22,List(5),imagined.,imagine-01,false), Span(7,8,List(6),normal,normal,false), Span(3,4,List(7),party,party,false), Span(6,7,List(8),very,very,false), Span(19,20,List(9),as,ask-01,false)),Map(2 -> sometimes, 5 -> imagine-01, 8 -> very, 7 -> party, 1 -> star, 4 -> ordinary, 6 -> normal, 9 -> ask-01, 0 -> simple, 3 -> dinner),Map(n -> normal, s2 -> star, s -> simple, v -> very, d -> dinner, p -> party, a -> ask-01, i -> imagine-01, s3 -> sometimes, o -> ordinary))),[Ljava.lang.String;@105a9a31,Annotation([Ljava.lang.String;@1765bdeb,[Ljava.lang.String;@2dc1080b,[Ljava.lang.String;@6e2b8bd),Annotation([Ljava.lang.String;@42ad3142,[Ljava.lang.String;@781d5619,[Ledu.cmu.lti.nlp.amr.Dependency;@5db98841),Annotation([Ljava.lang.String;@4e0df41b,[Ljava.lang.String;@6501ebb9,[Ljava.lang.String;@773ec49e),Annotation([Ljava.lang.String;@6654b1b8,[Ljava.lang.String;@47582c45,[Ledu.cmu.lti.nlp.amr.Entity;@2dee5b34))
AMR:
(a / ask-01, ARG0, i / imagine-01)
(a / ask-01, ARG1, s / simple)
(i / imagine-01, ARG0, v / very)
(i / imagine-01, ARG1, o / ordinary)
(n / normal, degree, v / very)
(p / party, mod, d / dinner)
(s / simple, domain, p / party)
(s / simple, location, s2 / star)
(s3 / sometimes, op, s / simple)

Decoded in 616,565 microseconds
Sentence: A star will have lots of contracts and her source of money will be rolling if she tackles well; If she doesn't tack well, what comes after her heel would be forcing out or even frame-ups ...

Oracle Span 1:  and => and
Oracle Span 2:  comes => come-02
Oracle Span 3:  contracts => contract-02
Oracle Span 4:  even => even
Oracle Span 5:  forcing => force-01
Oracle Span 6:  frame => frame-02
Oracle Span 7:  have => have-03
Oracle Span 8:  heel => heel
Oracle Span 9:  lots => lot
Oracle Span 10:  money => money
Oracle Span 11:  or => or
Oracle Span 12:  out => out
Oracle Span 13:  rolling => roll-01
Oracle Span 14:  she => she
Oracle Span 15:  source => source-01
Oracle Span 16:  star => (person :ARG1-of star-01)
Oracle Span 17:  tack => tack-00
Oracle Span 18:  tackles => tackle-01
Spans:
Span 38-39:   => frame-up
Span 37-38:   => even
Span 36-37:  ... => or
Span 7-8:  and => and
Span 25-26:  comes => well
Span 6-7:  contracts => contract-01
Span 34-35:  even => force-01
Span 31-32:  forcing => heel-01
Span 3-4:  have => have-03
Span 28-29:  heel => come-01
Span 4-5:  lots => lot
Span 11-12:  money => money
Span 14-15:  rolling => roll-01
Span 9-10:  source => source-01
Span 1-2:  star => star
Span 18-19:  well; => well
Span 29-30:  would => after

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 28-29:  comes => come-02
Oracle Span 6-7:  contracts => contract-02
Oracle Span 37-38:  even => even
Oracle Span 34-35:  forcing => force-01
Oracle Span 38-39:  frame => frame-02
Oracle Span 3-4:  have => have-03
Oracle Span 31-32:  heel => heel
Oracle Span 4-5:  lots => lot
Oracle Span 11-12:  money => money
Oracle Span 36-37:  or => or
Oracle Span 35-36:  out => out
Oracle Span 14-15:  rolling => roll-01
Oracle Span 16-17:  she => she
Oracle Span 9-10:  source => source-01
Oracle Span 1-2:  star => (person :ARG1-of star-01)
Oracle Span 24-25:  tack => tack-00
Oracle Span 17-18:  tackles => tackle-01

Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	star	_	NN	NN	_	4	nsubj	_	_
3	will	_	MD	MD	_	4	aux	_	_
4	have	_	VB	VB	_	0	root	_	_
5	lots	_	NNS	NNS	_	4	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	contracts	_	NNS	NNS	_	6	pobj	_	_
8	and	_	CC	CC	_	4	cc	_	_
9	her	_	PRP$	PRP$	_	10	poss	_	_
10	source	_	NN	NN	_	15	nsubj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	money	_	NN	NN	_	11	pobj	_	_
13	will	_	MD	MD	_	15	aux	_	_
14	be	_	VB	VB	_	15	aux	_	_
15	rolling	_	VBG	VBG	_	4	conj	_	_
16	if	_	IN	IN	_	18	mark	_	_
17	she	_	PRP	PRP	_	18	nsubj	_	_
18	tackles	_	VBZ	VBZ	_	15	advcl	_	_
19	well	_	RB	RB	_	18	advmod	_	_
20	;	_	:	:	_	4	punct	_	_
21	If	_	IN	IN	_	25	mark	_	_
22	she	_	PRP	PRP	_	25	nsubj	_	_
23	does	_	VBZ	VBZ	_	25	aux	_	_
24	n't	_	RB	RB	_	25	neg	_	_
25	tack	_	VB	VB	_	29	advcl	_	_
26	well	_	RB	RB	_	25	advmod	_	_
27	,	_	,	,	_	29	punct	_	_
28	what	_	WDT	WDT	_	29	nsubj	_	_
29	comes	_	VBZ	VBZ	_	4	parataxis	_	_
30	after	_	IN	IN	_	35	mark	_	_
31	her	_	PRP$	PRP$	_	32	poss	_	_
32	heel	_	NN	NN	_	35	nsubj	_	_
33	would	_	MD	MD	_	35	aux	_	_
34	be	_	VB	VB	_	35	aux	_	_
35	forcing	_	VBG	VBG	_	29	advcl	_	_
36	out	_	RP	RP	_	35	prt	_	_
37	or	_	CC	CC	_	38	cc	_	_
38	even	_	RB	RB	_	39	num	_	_
39	frame-ups	_	NNS	NNS	_	35	dobj	_	_
40	...	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, h / have-03)
(a / and, op, r / roll-01)
(c2 / come-02, ARG0, o2 / or)
(c2 / come-02, ARG1, h2 / heel)
(c2 / come-02, condition, t3 / tack-00)
(c3 / contract-02, quant, l / lot)
(f2 / force-01, ARG2, o / out)
(f3 / frame-02, mod, e / even)
(h / have-03, ARG0, p / person)
(h / have-03, ARG1, c3 / contract-02)
(o2 / or, op, f2 / force-01)
(o2 / or, op, f3 / frame-02)
(r / roll-01, condition, t2 / tackle-01)
(s / she, part, h2 / heel)
(s2 / source-01, ARG1, m2 / money)
(s2 / source-01, ARG2, r / roll-01)
(s3 / star-01, ARG1, p / person)
(t2 / tackle-01, ARG0, p / person)
(t3 / tack-00, ARG0, s / she)

Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),even,force-01,false), Span(25,26,List(1),comes,well,false), Span(28,29,List(2),heel,come-01,false), Span(29,30,List(3),would,after,false), Span(11,12,List(4),money,money,false), Span(18,19,List(5),well;,well,false), Span(1,2,List(6),star,star,false), Span(36,37,List(7),...,or,false), Span(14,15,List(8),rolling,roll-01,false), Span(6,7,List(9),contracts,contract-01,false), Span(38,39,List(10),,frame-up,false), Span(7,8,List(11),and,and,false), Span(4,5,List(12),lots,lot,false), Span(37,38,List(13),,even,false), Span(9,10,List(14),source,source-01,false), Span(31,32,List(15),forcing,heel-01,false), Span(3,4,List(16),have,have-03,false)),Map(2 -> come-01, 5 -> well, 12 -> lot, 15 -> heel-01, 8 -> roll-01, 7 -> or, 1 -> well, 4 -> money, 11 -> and, 14 -> source-01, 6 -> star, 0 -> force-01, 9 -> contract-01, 16 -> have-03, 3 -> after, 10 -> frame-up, 13 -> even),Map(e -> even, w -> well, h -> heel-01, h2 -> have-03, s2 -> source-01, s -> star, m -> money, a -> after, w2 -> well, r -> roll-01, a2 -> and, c -> come-01, f2 -> frame-up, l -> lot, f -> force-01, o -> or, c2 -> contract-01))),[Ljava.lang.String;@6b72a440,Annotation([Ljava.lang.String;@3a4ebaa1,[Ljava.lang.String;@340d58a8,[Ljava.lang.String;@43a8151c),Annotation([Ljava.lang.String;@3d06e98d,[Ljava.lang.String;@72d2d73e,[Ledu.cmu.lti.nlp.amr.Dependency;@2c4419d4),Annotation([Ljava.lang.String;@2f47f9b5,[Ljava.lang.String;@25872751,[Ljava.lang.String;@41886ff8),Annotation([Ljava.lang.String;@4d8e54a4,[Ljava.lang.String;@5d9496f1,[Ledu.cmu.lti.nlp.amr.Entity;@41358fbd))
AMR:
(a / after, op, f / force-01)
(a2 / and, op, r / roll-01)
(c / come-01, ARG1, w / well)
(c / come-01, time, a / after)
(c2 / contract-01, ARG1, c / come-01)
(f / force-01, ARG0, h / heel-01)
(f / force-01, ARG1, f2 / frame-up)
(f / force-01, ARG6, e / even)
(h / heel-01, ARG1, w2 / well)
(h2 / have-03, ARG0, s / star)
(h2 / have-03, ARG1, l / lot)
(m / money, location, a2 / and)
(o / or, op, e / even)
(r / roll-01, ARG0, s / star)
(r / roll-01, ARG1, s2 / source-01)
(s2 / source-01, ARG2, c2 / contract-01)

Decoded in 1,476,216 microseconds
Sentence: There are two kinds of smart female stars. Those of the first kind always hold very high integrity and sternly reject all such invitations;

Oracle Span 1:  all => all
Oracle Span 2:  always => always
Oracle Span 3:  and => and
Oracle Span 4:  female => female
Oracle Span 5:  high => high
Oracle Span 6:  hold => hold-01
Oracle Span 7:  integrity => integrity
Oracle Span 8:  invitations => invite-01
Oracle Span 9:  kind => kind
Oracle Span 10:  kinds => kind
Oracle Span 11:  reject => reject-01
Oracle Span 12:  smart => smart
Oracle Span 13:  stars => star-01
Oracle Span 14:  sternly => stern
Oracle Span 15:  such => such
Oracle Span 16:  two => 2
Oracle Span 17:  very => very
Spans:
Span 21-22:  all => reject-01
Span 13-14:  always => kind
Span 18-19:  and => integrity
Span 6-7:  female => female
Span 16-17:  high => very
Span 14-15:  hold => always
Span 17-18:  integrity => high
Span 23-24:  invitations; => such
Span 3-4:  kinds => kind
Span 5-6:  smart => smart
Span 7-8:  stars. => star
Span 19-20:  sternly => and
Span 22-23:  such => all
Span 0-1:  There => 1
Span 0-13:  There are two kinds of smart female stars. Those of the first kind => (ordinal-entity :value 1)
Span 15-16:  very => hold-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of integrity in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of sternly in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of reject in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of all in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of invitations in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of ; in position 25
Langrangian relaxation converged after 14 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of integrity in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of sternly in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of reject in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of all in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of invitations in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of ; in position 25
Oracle Span 22-23:  all => all
Oracle Span 14-15:  always => always
Oracle Span 19-20:  and => and
Oracle Span 6-7:  female => female
Oracle Span 17-18:  high => high
Oracle Span 15-16:  hold => hold-01
Oracle Span 18-19:  integrity => integrity
Oracle Span 24-25:  invitations => invite-01
Oracle Span 13-14:  kind => kind
Oracle Span 3-4:  kinds => kind
Oracle Span 21-22:  reject => reject-01
Oracle Span 5-6:  smart => smart
Oracle Span 7-8:  stars => star-01
Oracle Span 20-21:  sternly => stern
Oracle Span 23-24:  such => such
Oracle Span 2-3:  two => 2
Oracle Span 16-17:  very => very

Dependencies:
1	There	_	EX	EX	_	2	expl	_	_
2	are	_	VBP	VBP	_	0	root	_	_
3	two	_	CD	CD	_	4	num	_	_
4	kinds	_	NNS	NNS	_	2	nsubj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	smart	_	JJ	JJ	_	8	amod	_	_
7	female	_	JJ	JJ	_	8	amod	_	_
8	stars	_	NNS	NNS	_	5	pobj	_	_
9	.	_	.	.	_	2	punct	_	_
1	Those	_	DT	DT	_	7	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	5	det	_	_
4	first	_	JJ	JJ	_	5	amod	_	_
5	kind	_	NN	NN	_	2	pobj	_	_
6	always	_	RB	RB	_	7	advmod	_	_
7	hold	_	VBP	VBP	_	0	root	_	_
8	very	_	RB	RB	_	9	advmod	_	_
9	high	_	JJ	JJ	_	10	amod	_	_
10	integrity	_	NN	NN	_	7	dobj	_	_
11	and	_	CC	CC	_	7	cc	_	_
12	sternly	_	RB	RB	_	13	advmod	_	_
13	reject	_	VBP	VBP	_	7	conj	_	_
14	all	_	DT	DT	_	16	det	_	_
15	such	_	JJ	JJ	_	16	amod	_	_
16	invitations	_	NNS	NNS	_	13	dobj	_	_
17	;	_	:	:	_	7	punct	_	_

Oracle:
(a / and, op, h / hold-01)
(a / and, op, r / reject-01)
(f2 / female, mod, s4 / smart)
(h / hold-01, ARG1, i / integrity)
(h / hold-01, time, a2 / always)
(h2 / high, degree, v / very)
(i / integrity, mod, h2 / high)
(i2 / invite-01, mod, s2 / such)
(i2 / invite-01, quant, a3 / all)
(k / kind, domain, f2 / female)
(k / kind, quant, 2 / 2)
(r / reject-01, ARG1, i2 / invite-01)
(r / reject-01, manner, s3 / stern)
(s / star-01, ARG1, f2 / female)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),female,female,false), Span(14,15,List(1),hold,always,false), Span(0,13,List(3, 2),There are two kinds of smart female stars. Those of the first kind,(ordinal-entity :value 1),false), Span(16,17,List(4),high,very,false), Span(17,18,List(5),integrity,high,false), Span(22,23,List(6),such,all,false), Span(18,19,List(7),and,integrity,false), Span(23,24,List(8),invitations;,such,false), Span(0,1,List(9),There,1,false), Span(15,16,List(10),very,hold-01,false), Span(21,22,List(11),all,reject-01,false), Span(19,20,List(12),sternly,and,false), Span(5,6,List(13),smart,smart,false), Span(3,4,List(14),kinds,kind,false), Span(13,14,List(15),always,kind,false), Span(7,8,List(16),stars.,star,false)),Map(2 -> ordinal-entity, 5 -> high, 12 -> and, 15 -> kind, 8 -> such, 7 -> integrity, 1 -> always, 4 -> very, 11 -> reject-01, 14 -> kind, 6 -> all, 0 -> female, 9 -> 1, 16 -> star, 3 -> 1, 10 -> hold-01, 13 -> smart),Map(k2 -> kind, h -> high, s2 -> smart, h2 -> hold-01, k -> kind, 12 -> 1, a3 -> and, s -> such, v -> very, 1 -> 1, a -> always, a2 -> all, i -> integrity, r -> reject-01, s3 -> star, f -> female, o -> ordinal-entity))),[Ljava.lang.String;@20e0f5bf,Annotation([Ljava.lang.String;@6a5cba52,[Ljava.lang.String;@61c35c8c,[Ljava.lang.String;@cbb8e53),Annotation([Ljava.lang.String;@2b51df76,[Ljava.lang.String;@24507e64,[Ledu.cmu.lti.nlp.amr.Dependency;@5f8c715e),Annotation([Ljava.lang.String;@f15a5ea,[Ljava.lang.String;@2a1a6111,[Ljava.lang.String;@d9e8968),Annotation([Ljava.lang.String;@31a41f04,[Ljava.lang.String;@133cc62f,[Ledu.cmu.lti.nlp.amr.Entity;@6a573fb0))
AMR:
(a2 / all, op, s / such)
(a3 / and, op, i / integrity)
(a3 / and, op, r / reject-01)
(h / high, calendar, v / very)
(h2 / hold-01, ARG0, k2 / kind)
(h2 / hold-01, ARG1, o / ordinal-entity)
(h2 / hold-01, ARG6, a / always)
(i / integrity, mod, h / high)
(k / kind, calendar, 12 / 1)
(o / ordinal-entity, value, 1 / 1)
(r / reject-01, ARG0, k / kind)
(r / reject-01, ARG1, a2 / all)
(r / reject-01, ARG2, k2 / kind)
(s3 / star, mod, f / female)
(s3 / star, mod, k / kind)
(s3 / star, mod, s2 / smart)

Decoded in 624,122 microseconds
Sentence: the second kind are good at playing the trick and making their objectives achieved with their seed money,

Oracle Span 1:  achieved => achieve-01
Oracle Span 2:  and => and
Oracle Span 3:  good => good-41
Oracle Span 4:  kind => (person :mod kind)
Oracle Span 5:  money => money
Oracle Span 6:  objectives => objective
Oracle Span 7:  playing => play-01
Oracle Span 8:  seed => seed
Oracle Span 9:  trick => trick
Spans:
Span 13-14:  achieved => achieve-01
Span 9-10:  and => and
Span 4-5:  good => goad-01
Span 2-3:  kind => kind
Span 10-11:  making => make-05
Span 17-18:  money, => money
Span 12-13:  objectives => objective
Span 6-7:  playing => play-01
Span 16-17:  seed => seed
Span 0-2:  the second => (ordinal-entity :value 1)
Span 8-9:  trick => trick-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 13-14:  achieved => achieve-01
Oracle Span 9-10:  and => and
Oracle Span 4-5:  good => good-41
Oracle Span 2-3:  kind => (person :mod kind)
Oracle Span 17-18:  money => money
Oracle Span 12-13:  objectives => objective
Oracle Span 6-7:  playing => play-01
Oracle Span 16-17:  seed => seed
Oracle Span 8-9:  trick => trick

Dependencies:
1	the	_	DT	DT	_	3	det	_	_
2	second	_	JJ	JJ	_	3	amod	_	_
3	kind	_	NN	NN	_	5	nsubj	_	_
4	are	_	VBP	VBP	_	5	cop	_	_
5	good	_	JJ	JJ	_	0	root	_	_
6	at	_	IN	IN	_	5	prep	_	_
7	playing	_	VBG	VBG	_	6	pcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	trick	_	NN	NN	_	7	dobj	_	_
10	and	_	CC	CC	_	7	cc	_	_
11	making	_	VBG	VBG	_	7	conj	_	_
12	their	_	PRP$	PRP$	_	13	poss	_	_
13	objectives	_	NNS	NNS	_	11	dobj	_	_
14	achieved	_	VBN	VBN	_	13	vmod	_	_
15	with	_	IN	IN	_	14	prep	_	_
16	their	_	PRP$	PRP$	_	18	poss	_	_
17	seed	_	NN	NN	_	18	nn	_	_
18	money	_	NN	NN	_	15	pobj	_	_
19	,	_	,	,	_	5	punct	_	_

Oracle:
(a3 / and, op, a4 / achieve-01)
(a3 / and, op, p4 / play-01)
(a4 / achieve-01, ARG0, p3 / person)
(a4 / achieve-01, ARG1, o2 / objective)
(a4 / achieve-01, instrument, m2 / money)
(g3 / good-41, ARG1, p3 / person)
(g3 / good-41, ARG2, a3 / and)
(m2 / money, mod, s2 / seed)
(m2 / money, poss, p3 / person)
(o2 / objective, poss, p3 / person)
(p3 / person, mod, k2 / kind)
(p4 / play-01, ARG0, p3 / person)
(p4 / play-01, ARG1, t / trick)

Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),seed,seed,false), Span(13,14,List(1),achieved,achieve-01,false), Span(6,7,List(2),playing,play-01,false), Span(17,18,List(3),money,,money,false), Span(10,11,List(4),making,make-05,false), Span(12,13,List(5),objectives,objective,false), Span(0,2,List(7, 6),the second,(ordinal-entity :value 1),false), Span(4,5,List(8),good,goad-01,false), Span(8,9,List(9),trick,trick-01,false), Span(2,3,List(10),kind,kind,false), Span(9,10,List(11),and,and,false)),Map(2 -> play-01, 5 -> objective, 8 -> goad-01, 7 -> 1, 1 -> achieve-01, 11 -> and, 4 -> make-05, 6 -> ordinal-entity, 9 -> trick-01, 0 -> seed, 10 -> kind, 3 -> money),Map(k -> kind, t -> trick-01, m2 -> make-05, s -> seed, m -> money, g -> goad-01, 1 -> 1, p -> play-01, a -> achieve-01, o2 -> ordinal-entity, a2 -> and, o -> objective))),[Ljava.lang.String;@73fc818f,Annotation([Ljava.lang.String;@2578998a,[Ljava.lang.String;@677f4e90,[Ljava.lang.String;@623c075c),Annotation([Ljava.lang.String;@755b126d,[Ljava.lang.String;@140e6185,[Ledu.cmu.lti.nlp.amr.Dependency;@918b65a),Annotation([Ljava.lang.String;@b1c46c2,[Ljava.lang.String;@2679e5b6,[Ljava.lang.String;@419caab5),Annotation([Ljava.lang.String;@d7a7eba,[Ljava.lang.String;@64391381,[Ledu.cmu.lti.nlp.amr.Entity;@d840ee5))
AMR:
(a / achieve-01, ARG0, m / money)
(a / achieve-01, ARG1, o / objective)
(a2 / and, op, m2 / make-05)
(a2 / and, op, p / play-01)
(g / goad-01, ARG1, k / kind)
(g / goad-01, ARG2, p / play-01)
(k / kind, mod, o2 / ordinal-entity)
(m / money, mod, s / seed)
(m2 / make-05, ARG1, o / objective)
(o2 / ordinal-entity, value, 1 / 1)
(p / play-01, ARG1, t / trick-01)

Decoded in 370,706 microseconds
Sentence: It's rumored that even some super female stars won their first roles in this way.

Oracle Span 1:  even => even
Oracle Span 2:  female => female
Oracle Span 3:  roles => role
Oracle Span 4:  rumored => rumor-01
Oracle Span 5:  some => some
Oracle Span 6:  stars => star-01
Oracle Span 7:  super => super
Oracle Span 8:  this => this
Oracle Span 9:  way => way
Oracle Span 10:  won => win-01
Spans:
Span 15-16:   => way
Span 6-7:  female => super
Span 12-13:  in => role
Span 0-1:  It's => it
Span 0-12:  It's rumored that even some super female stars won their first roles => (ordinal-entity :value 1)
Span 4-5:  some => even
Span 7-8:  stars => female
Span 5-6:  super => some
Span 2-3:  that => rumor-01
Span 9-10:  their => win-01
Span 14-15:  way. => this
Span 8-9:  won => star

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 4-5:  even => even
Oracle Span 7-8:  female => female
Oracle Span 12-13:  roles => role
Oracle Span 2-3:  rumored => rumor-01
Oracle Span 5-6:  some => some
Oracle Span 8-9:  stars => star-01
Oracle Span 6-7:  super => super
Oracle Span 14-15:  this => this
Oracle Span 15-16:  way => way
Oracle Span 9-10:  won => win-01

Dependencies:
1	It	_	PRP	PRP	_	3	nsubjpass	_	_
2	's	_	VBZ	VBZ	_	3	auxpass	_	_
3	rumored	_	VBN	VBN	_	0	root	_	_
4	that	_	IN	IN	_	10	mark	_	_
5	even	_	RB	RB	_	9	advmod	_	_
6	some	_	DT	DT	_	9	det	_	_
7	super	_	JJ	JJ	_	9	amod	_	_
8	female	_	JJ	JJ	_	9	amod	_	_
9	stars	_	NNS	NNS	_	10	nsubj	_	_
10	won	_	VBD	VBD	_	3	ccomp	_	_
11	their	_	PRP$	PRP$	_	13	poss	_	_
12	first	_	JJ	JJ	_	13	amod	_	_
13	roles	_	NNS	NNS	_	10	dobj	_	_
14	in	_	IN	IN	_	10	prep	_	_
15	this	_	DT	DT	_	16	det	_	_
16	way	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	3	punct	_	_

Oracle:
(f2 / female, mod, e / even)
(f2 / female, mod, s2 / super)
(f2 / female, quant, s3 / some)
(r / role, poss, f2 / female)
(r2 / rumor-01, ARG1, w / win-01)
(s / star-01, ARG1, f2 / female)
(w / win-01, ARG0, f2 / female)
(w / win-01, ARG1, r / role)
(w / win-01, manner, w2 / way)
(w2 / way, mod, t / this)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),It's,it,false), Span(6,7,List(1),female,super,false), Span(9,10,List(2),their,win-01,false), Span(2,3,List(3),that,rumor-01,false), Span(0,12,List(5, 4),It's rumored that even some super female stars won their first roles,(ordinal-entity :value 1),false), Span(15,16,List(6),,way,false), Span(4,5,List(7),some,even,false), Span(8,9,List(8),won,star,false), Span(12,13,List(9),in,role,false), Span(5,6,List(10),super,some,false), Span(7,8,List(11),stars,female,false), Span(14,15,List(12),way.,this,false)),Map(2 -> win-01, 5 -> 1, 12 -> this, 8 -> star, 7 -> even, 1 -> super, 4 -> ordinal-entity, 11 -> female, 6 -> way, 0 -> it, 9 -> role, 3 -> rumor-01, 10 -> some),Map(e -> even, w -> win-01, s2 -> star, t -> this, s -> super, 1 -> 1, r2 -> role, w2 -> way, i -> it, r -> rumor-01, s3 -> some, f -> female, o -> ordinal-entity))),[Ljava.lang.String;@56c3163a,Annotation([Ljava.lang.String;@62e1d92f,[Ljava.lang.String;@1dfb8e43,[Ljava.lang.String;@2609a603),Annotation([Ljava.lang.String;@68b5163e,[Ljava.lang.String;@4f182a6,[Ledu.cmu.lti.nlp.amr.Dependency;@45398ded),Annotation([Ljava.lang.String;@2e6b12f7,[Ljava.lang.String;@6e2fe5e2,[Ljava.lang.String;@66c3ae33),Annotation([Ljava.lang.String;@6f9c01e3,[Ljava.lang.String;@19964a4d,[Ledu.cmu.lti.nlp.amr.Entity;@807bc68))
AMR:
(e / even, calendar, s3 / some)
(o / ordinal-entity, calendar, r2 / role)
(o / ordinal-entity, prep-in, w2 / way)
(o / ordinal-entity, value, 1 / 1)
(r / rumor-01, ARG1, i / it)
(r / rumor-01, ARG6, w / win-01)
(s2 / star, mod, f / female)
(s2 / star, mod, s / super)
(w / win-01, ARG0, s2 / star)
(w / win-01, ARG1, r2 / role)
(w / win-01, ARG6, e / even)
(w2 / way, mod, t / this)

Decoded in 837,759 microseconds
Sentence: After drinking some alcohol, the advertiser or show sponsor may take the chance to lie on the female star's shoulder, feel her chin or kiss her cheek, and endurance is the attitude most adopted by the female stars.

Oracle Span 1:  adopted => adopt-01
Oracle Span 2:  advertiser => (person :ARG0-of advertise-01)
Oracle Span 3:  After => after
Oracle Span 4:  alcohol => alcohol
Oracle Span 5:  and => and
Oracle Span 6:  attitude => attitude
Oracle Span 7:  chance => chance-01
Oracle Span 8:  cheek => cheek
Oracle Span 9:  chin => chin
Oracle Span 10:  drinking => drink-01
Oracle Span 11:  endurance => endure-01
Oracle Span 12:  feel => feel-01
Oracle Span 13:  female => female
Oracle Span 14:  kiss => kiss-01
Oracle Span 15:  lie => lie-01
Oracle Span 16:  may => possible
Oracle Span 17:  most => most
Oracle Span 18:  or => or
Oracle Span 19:  or => or
Oracle Span 20:  shoulder => shoulder
Oracle Span 21:  show => show
Oracle Span 22:  some => some
Oracle Span 23:  sponsor => (person :ARG0-of sponsor-01)
Oracle Span 24:  star => star-01
Spans:
Span 41-42:   => star
Span 40-41:   => female
Span 0-1:  After => after
Span 3-4:  alcohol, => alcohol
Span 27-28:  and => kiss-01
Span 31-32:  attitude => and
Span 26-27:  cheek, => or
Span 22-23:  chin => and
Span 1-2:  drinking => drink-01
Span 36-37:  female => most
Span 21-22:  her => shoulder
Span 25-26:  her => chink-01
Span 29-30:  is => check-01
Span 9-10:  may => sponsor-01
Span 15-16:  on => lie-01
Span 23-24:  or => feel-01
Span 19-20:  shoulder, => star
Span 7-8:  show => or
Span 2-3:  some => some
Span 8-9:  sponsor => show
Span 18-19:  star's => female
Span 37-38:  stars. => adopt-01
Span 11-12:  the => take-01
Span 35-36:  the => attitude
Span 13-14:  to => chance

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 37-38:  adopted => adopt-01
Oracle Span 6-7:  advertiser => (person :ARG0-of advertise-01)
Oracle Span 0-1:  After => after
Oracle Span 3-4:  alcohol => alcohol
Oracle Span 31-32:  and => and
Oracle Span 35-36:  attitude => attitude
Oracle Span 13-14:  chance => chance-01
Oracle Span 29-30:  cheek => cheek
Oracle Span 25-26:  chin => chin
Oracle Span 1-2:  drinking => drink-01
Oracle Span 32-33:  endurance => endure-01
Oracle Span 23-24:  feel => feel-01
Oracle Span 18-19:  female => female
Oracle Span 27-28:  kiss => kiss-01
Oracle Span 15-16:  lie => lie-01
Oracle Span 10-11:  may => possible
Oracle Span 36-37:  most => most
Oracle Span 7-8:  or => or
Oracle Span 26-27:  or => or
Oracle Span 21-22:  shoulder => shoulder
Oracle Span 8-9:  show => show
Oracle Span 2-3:  some => some
Oracle Span 9-10:  sponsor => (person :ARG0-of sponsor-01)
Oracle Span 19-20:  star => star-01

Dependencies:
1	After	_	IN	IN	_	12	prep	_	_
2	drinking	_	VBG	VBG	_	1	pcomp	_	_
3	some	_	DT	DT	_	4	det	_	_
4	alcohol	_	NN	NN	_	2	dobj	_	_
5	,	_	,	,	_	12	punct	_	_
6	the	_	DT	DT	_	10	det	_	_
7	advertiser	_	NN	NN	_	10	nn	_	_
8	or	_	CC	CC	_	7	cc	_	_
9	show	_	NN	NN	_	7	conj	_	_
10	sponsor	_	NN	NN	_	12	nsubj	_	_
11	may	_	MD	MD	_	12	aux	_	_
12	take	_	VB	VB	_	0	root	_	_
13	the	_	DT	DT	_	14	det	_	_
14	chance	_	NN	NN	_	12	dobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	lie	_	VB	VB	_	14	vmod	_	_
17	on	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	female	_	JJ	JJ	_	20	amod	_	_
20	star	_	NN	NN	_	22	poss	_	_
21	's	_	POS	POS	_	20	possessive	_	_
22	shoulder	_	NN	NN	_	17	pobj	_	_
23	,	_	,	,	_	16	punct	_	_
24	feel	_	VB	VB	_	16	conj	_	_
25	her	_	PRP$	PRP$	_	26	poss	_	_
26	chin	_	NN	NN	_	24	dobj	_	_
27	or	_	CC	CC	_	16	cc	_	_
28	kiss	_	VB	VB	_	16	conj	_	_
29	her	_	PRP$	PRP$	_	30	poss	_	_
30	cheek	_	NN	NN	_	28	dobj	_	_
31	,	_	,	,	_	12	punct	_	_
32	and	_	CC	CC	_	12	cc	_	_
33	endurance	_	NNP	NNP	_	36	nsubj	_	_
34	is	_	VBZ	VBZ	_	36	cop	_	_
35	the	_	DT	DT	_	36	det	_	_
36	attitude	_	NN	NN	_	12	conj	_	_
37	most	_	RBS	RBS	_	38	advmod	_	_
38	adopted	_	VBN	VBN	_	36	vmod	_	_
39	by	_	IN	IN	_	38	prep	_	_
40	the	_	DT	DT	_	42	det	_	_
41	female	_	JJ	JJ	_	42	amod	_	_
42	stars	_	NNS	NNS	_	39	pobj	_	_
43	.	_	.	.	_	12	punct	_	_

Oracle:
(a / and, op, a5 / adopt-01)
(a / and, op, p / possible)
(a2 / advertise-01, ARG0, p2 / person)
(a3 / after, op, d / drink-01)
(a4 / alcohol, quant, s5 / some)
(a5 / adopt-01, ARG0, f3 / female)
(a5 / adopt-01, ARG1, a6 / attitude)
(a5 / adopt-01, degree, m / most)
(a6 / attitude, mod, e / endure-01)
(c / chance-01, ARG0, o / or)
(c / chance-01, ARG1, o2 / or)
(d / drink-01, ARG0, o / or)
(d / drink-01, ARG1, a4 / alcohol)
(f / feel-01, ARG0, o / or)
(f / feel-01, ARG1, c2 / chin)
(f3 / female, part, c2 / chin)
(f3 / female, part, c3 / cheek)
(f3 / female, part, s3 / shoulder)
(k / kiss-01, ARG0, o / or)
(k / kiss-01, ARG1, c3 / cheek)
(l / lie-01, ARG1, o / or)
(l / lie-01, ARG2, s3 / shoulder)
(o / or, op, p2 / person)
(o / or, op, p3 / person)
(o2 / or, op, f / feel-01)
(o2 / or, op, k / kiss-01)
(o2 / or, op, l / lie-01)
(p / possible, domain, c / chance-01)
(p / possible, time, a3 / after)
(s / sponsor-01, ARG0, p3 / person)
(s / sponsor-01, ARG1, s2 / show)
(s4 / star-01, ARG1, f3 / female)

Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),and,kiss-01,false), Span(36,37,List(1),female,most,false), Span(31,32,List(2),attitude,and,false), Span(21,22,List(3),her,shoulder,false), Span(29,30,List(4),is,check-01,false), Span(11,12,List(5),the,take-01,false), Span(22,23,List(6),chin,and,false), Span(7,8,List(7),show,or,false), Span(15,16,List(8),on,lie-01,false), Span(35,36,List(9),the,attitude,false), Span(19,20,List(10),shoulder,,star,false), Span(37,38,List(11),stars.,adopt-01,false), Span(13,14,List(12),to,chance,false), Span(41,42,List(13),,star,false), Span(9,10,List(14),may,sponsor-01,false), Span(23,24,List(15),or,feel-01,false), Span(40,41,List(16),,female,false), Span(0,1,List(17),After,after,false), Span(8,9,List(18),sponsor,show,false), Span(1,2,List(19),drinking,drink-01,false), Span(25,26,List(20),her,chink-01,false), Span(26,27,List(21),cheek,,or,false), Span(3,4,List(22),alcohol,,alcohol,false), Span(2,3,List(23),some,some,false), Span(18,19,List(24),star's,female,false)),Map(2 -> and, 5 -> take-01, 12 -> chance, 8 -> lie-01, 15 -> feel-01, 21 -> or, 18 -> show, 24 -> female, 7 -> or, 1 -> most, 17 -> after, 23 -> some, 4 -> check-01, 11 -> adopt-01, 14 -> sponsor-01, 20 -> chink-01, 6 -> and, 9 -> attitude, 0 -> kiss-01, 22 -> alcohol, 16 -> female, 19 -> drink-01, 10 -> star, 3 -> shoulder, 13 -> star),Map(s5 -> show, s2 -> star, t -> take-01, k -> kiss-01, a3 -> attitude, s -> shoulder, s4 -> sponsor-01, a6 -> alcohol, m -> most, d -> drink-01, a -> and, c3 -> chink-01, a5 -> after, o2 -> or, f3 -> female, a2 -> and, c -> check-01, s3 -> star, f2 -> female, l -> lie-01, f -> feel-01, o -> or, s6 -> some, c2 -> chance, a4 -> adopt-01))),[Ljava.lang.String;@42347f93,Annotation([Ljava.lang.String;@5351daa4,[Ljava.lang.String;@14100e81,[Ljava.lang.String;@1e88f558),Annotation([Ljava.lang.String;@7f21d9fd,[Ljava.lang.String;@2278a847,[Ledu.cmu.lti.nlp.amr.Dependency;@3608de8f),Annotation([Ljava.lang.String;@6f73df23,[Ljava.lang.String;@1eec1d01,[Ljava.lang.String;@79b1a40b),Annotation([Ljava.lang.String;@9bde114,[Ljava.lang.String;@7846adc7,[Ledu.cmu.lti.nlp.amr.Entity;@6bcb3db))
AMR:
(a / and, op, t / take-01)
(a4 / adopt-01, ARG0, s3 / star)
(a4 / adopt-01, ARG1, a3 / attitude)
(a5 / after, op, d / drink-01)
(c / check-01, ARG1, m / most)
(c3 / chink-01, ARG1, s6 / some)
(d / drink-01, ARG1, a6 / alcohol)
(f / feel-01, ARG1, c3 / chink-01)
(f / feel-01, ARG6, a2 / and)
(k / kiss-01, ARG1, c / check-01)
(l / lie-01, ARG0, s5 / show)
(l / lie-01, ARG1, s4 / sponsor-01)
(l / lie-01, manner, s / shoulder)
(o / or, op, s4 / sponsor-01)
(o2 / or, op, f / feel-01)
(o2 / or, op, k / kiss-01)
(o2 / or, op, l / lie-01)
(s / shoulder, poss, s2 / star)
(s2 / star, mod, f3 / female)
(s3 / star, mod, f2 / female)
(t / take-01, ARG0, a3 / attitude)
(t / take-01, ARG1, c2 / chance)
(t / take-01, ARG2, l / lie-01)
(t / take-01, time, a5 / after)

Decoded in 2,466,282 microseconds
Sentence: They are the very people of lower nine professions

Oracle Span 1:  lower => low
Oracle Span 2:  nine => 9
Oracle Span 3:  professions => (have-org-role-91 :ARG2 profession)
Oracle Span 4:  They => they
Oracle Span 5:  very => very
Spans:
Span 6-7:  lower => (low :degree more)
Span 8-9:  professions => profession
Span 0-1:  They => 1
Span 0-1:  They => they
Span 3-4:  very => very

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  lower => low
Oracle Span 7-8:  nine => 9
Oracle Span 8-9:  professions => (have-org-role-91 :ARG2 profession)
Oracle Span 0-1:  They => they
Oracle Span 3-4:  very => very

Dependencies:
1	They	_	PRP	PRP	_	5	nsubj	_	_
2	are	_	VBP	VBP	_	5	cop	_	_
3	the	_	DT	DT	_	5	det	_	_
4	very	_	JJ	JJ	_	5	amod	_	_
5	people	_	NNS	NNS	_	0	root	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	lower	_	RBR	RBR	_	9	advmod	_	_
8	nine	_	CD	CD	_	9	num	_	_
9	professions	_	NNS	NNS	_	6	pobj	_	_

Oracle:
(h / have-org-role-91, ARG2, p3 / profession)
(p3 / profession, mod, l / low)
(p3 / profession, quant, 9 / 9)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),professions,profession,false), Span(0,1,List(1),They,1,false), Span(6,7,List(3, 2),lower,(low :degree more),false), Span(0,1,List(4),They,they,false), Span(3,4,List(5),very,very,false)),Map(2 -> low, 5 -> very, 1 -> 1, 4 -> they, 0 -> profession, 3 -> more),Map(t -> they, v -> very, m -> more, 1 -> 1, p -> profession, l -> low))),[Ljava.lang.String;@15bceefb,Annotation([Ljava.lang.String;@74bfd10e,[Ljava.lang.String;@58414317,[Ljava.lang.String;@601f9c0b),Annotation([Ljava.lang.String;@12a66dc5,[Ljava.lang.String;@181bf93e,[Ledu.cmu.lti.nlp.amr.Dependency;@4a1048d1),Annotation([Ljava.lang.String;@56736a5c,[Ljava.lang.String;@779aed12,[Ljava.lang.String;@300f38d6),Annotation([Ljava.lang.String;@7811a8c6,[Ljava.lang.String;@35fd0c12,[Ledu.cmu.lti.nlp.amr.Entity;@15af95c2))
AMR:
(1 / 1, calendar, v / very)
(l / low, degree, m / more)
(p / profession, calendar, l / low)
(t / they, calendar, v / very)
(v / very, domain, p / profession)

Decoded in 89,022 microseconds
Sentence: Those stars are just pretending, they are all actually living a much damned better life than this

Oracle Span 1:  actually => actual
Oracle Span 2:  better => good
Oracle Span 3:  damned => damn-01
Oracle Span 4:  just => just
Oracle Span 5:  life => life
Oracle Span 6:  living => live-01
Oracle Span 7:  much => much
Oracle Span 8:  pretending => pretend-01
Oracle Span 9:  stars => (person :ARG1-of star-01)
Oracle Span 10:  this => this
Spans:
Span 17-18:   => this
Span 10-11:  a => live-01
Span 8-9:  actually => all
Span 13-14:  better => damn
Span 12-13:  damned => much
Span 3-4:  just => just
Span 14-15:  life => (good :degree more)
Span 9-10:  living => actual
Span 4-5:  pretending, => pretend-01
Span 1-2:  stars => star
Span 15-16:  than => life
Span 0-1:  Those => those

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 9-10:  actually => actual
Oracle Span 14-15:  better => good
Oracle Span 13-14:  damned => damn-01
Oracle Span 3-4:  just => just
Oracle Span 15-16:  life => life
Oracle Span 10-11:  living => live-01
Oracle Span 12-13:  much => much
Oracle Span 4-5:  pretending => pretend-01
Oracle Span 1-2:  stars => (person :ARG1-of star-01)
Oracle Span 17-18:  this => this

Dependencies:
1	Those	_	DT	DT	_	2	det	_	_
2	stars	_	NNS	NNS	_	5	nsubj	_	_
3	are	_	VBP	VBP	_	5	cop	_	_
4	just	_	RB	RB	_	5	advmod	_	_
5	pretending	_	JJ	JJ	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	they	_	PRP	PRP	_	11	nsubj	_	_
8	are	_	VBP	VBP	_	11	aux	_	_
9	all	_	RB	RB	_	11	advmod	_	_
10	actually	_	RB	RB	_	11	advmod	_	_
11	living	_	VBG	VBG	_	5	ccomp	_	_
12	a	_	DT	DT	_	16	det	_	_
13	much	_	RB	RB	_	15	advmod	_	_
14	damned	_	RB	RB	_	15	advmod	_	_
15	better	_	JJR	JJR	_	16	amod	_	_
16	life	_	NN	NN	_	11	dobj	_	_
17	than	_	IN	IN	_	16	prep	_	_
18	this	_	DT	DT	_	17	pobj	_	_

Oracle:
(d / damn-01, ARG1, l2 / life)
(l / live-01, ARG0, p2 / person)
(l / live-01, ARG1, l2 / life)
(l / live-01, compared-to, t2 / this)
(l / live-01, mod, a2 / actual)
(l2 / life, mod, g / good)
(p / pretend-01, ARG0, p2 / person)
(p / pretend-01, mod, j / just)
(s / star-01, ARG1, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),stars,star,false), Span(3,4,List(1),just,just,false), Span(12,13,List(2),damned,much,false), Span(4,5,List(3),pretending,,pretend-01,false), Span(14,15,List(5, 4),life,(good :degree more),false), Span(10,11,List(6),a,live-01,false), Span(17,18,List(7),,this,false), Span(9,10,List(8),living,actual,false), Span(15,16,List(9),than,life,false), Span(13,14,List(10),better,damn,false), Span(0,1,List(11),Those,those,false), Span(8,9,List(12),actually,all,false)),Map(2 -> much, 5 -> more, 12 -> all, 8 -> actual, 7 -> this, 1 -> just, 4 -> good, 11 -> those, 6 -> live-01, 0 -> star, 9 -> life, 3 -> pretend-01, 10 -> damn),Map(t -> this, m2 -> more, j -> just, s -> star, m -> much, d -> damn, p -> pretend-01, g -> good, a -> actual, t2 -> those, l2 -> life, a2 -> all, l -> live-01))),[Ljava.lang.String;@56fbe3b8,Annotation([Ljava.lang.String;@fedd22e,[Ljava.lang.String;@5c118638,[Ljava.lang.String;@5677eb41),Annotation([Ljava.lang.String;@5f182414,[Ljava.lang.String;@3e85e17b,[Ledu.cmu.lti.nlp.amr.Dependency;@6ef580d5),Annotation([Ljava.lang.String;@73143a9,[Ljava.lang.String;@1917efdf,[Ljava.lang.String;@8884bbf),Annotation([Ljava.lang.String;@4ab98153,[Ljava.lang.String;@4798afa6,[Ledu.cmu.lti.nlp.amr.Entity;@61d7d99d))
AMR:
(d / damn, calendar, m / much)
(g / good, degree, m2 / more)
(l / live-01, ARG1, l2 / life)
(l / live-01, mod, a / actual)
(l / live-01, time, a2 / all)
(l2 / life, mod, g / good)
(m2 / more, mod, d / damn)
(p / pretend-01, ARG0, l / live-01)
(p / pretend-01, ARG1, s / star)
(p / pretend-01, ARG6, j / just)
(s / star, mod, t2 / those)
(t / this, calendar, l2 / life)

Decoded in 350,129 microseconds
Sentence: Agree, just cheap entertainers. Their reputation in feudal China somewhat makes sense.

Oracle Span 1:  Agree => agree-01
Oracle Span 2:  cheap => cheap
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  entertainers => (person :ARG0-of entertain-01)
Oracle Span 5:  feudal => feudal
Oracle Span 6:  just => just
Oracle Span 7:  makes => make-01
Oracle Span 8:  reputation => (thing :ARG2-of repute-01)
Oracle Span 9:  sense => sense
Oracle Span 10:  somewhat => somewhat
NER Entity: (country :name (name :op "China"))
Spans:
Span 13-14:   => sense
Span 0-1:  Agree, => (person :ARG0-of have-org-role-91)
Span 2-3:  cheap => just
Span 3-4:  entertainers. => cheap
Span 7-8:  feudal => reputation
Span 10-11:  makes => (country :name (name :op "China"))
Span 11-12:  sense. => e

 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Langrangian relaxation converged after 17 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Oracle Span 0-1:  Agree => agree-01
Oracle Span 3-4:  cheap => cheap
Oracle Span 10-11:  China => (country :name (name :op "China"))
Oracle Span 4-5:  entertainers => (person :ARG0-of entertain-01)
Oracle Span 9-10:  feudal => feudal
Oracle Span 2-3:  just => just
Oracle Span 12-13:  makes => make-01
Oracle Span 7-8:  reputation => (thing :ARG2-of repute-01)
Oracle Span 13-14:  sense => sense
Oracle Span 11-12:  somewhat => somewhat

Dependencies:
1	Agree	_	NNP	NNP	_	0	root	_	_
2	,	_	,	,	_	1	punct	_	_
3	just	_	RB	RB	_	5	advmod	_	_
4	cheap	_	JJ	JJ	_	5	amod	_	_
5	entertainers	_	NNS	NNS	_	1	appos	_	_
6	.	_	.	.	_	1	punct	_	_
1	Their	_	PRP$	PRP$	_	2	poss	_	_
2	reputation	_	NN	NN	_	7	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	feudal	_	JJ	JJ	_	5	amod	_	_
5	China	_	NNP	NNP	_	3	pobj	_	_
6	somewhat	_	RB	RB	_	7	advmod	_	_
7	makes	_	VBZ	VBZ	_	0	root	_	_
8	sense	_	NN	NN	_	7	dobj	_	_
9	.	_	.	.	_	7	punct	_	_

Oracle:
(a / agree-01, ARG1, p / person)
(c2 / country, mod, f / feudal)
(c2 / country, name, n / name)
(e / entertain-01, ARG0, p / person)
(e / entertain-01, mod, c / cheap)
(m2 / make-01, ARG0, t2 / thing)
(m2 / make-01, ARG1, s / sense)
(m2 / make-01, degree, s2 / somewhat)
(n / name, op, "China")
(p / person, mod, j / just)
(r / repute-01, ARG2, t2 / thing)
(r / repute-01, location, c2 / country)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),sense.,e,false), Span(0,1,List(2, 1),Agree,,(person :ARG0-of have-org-role-91),false), Span(3,4,List(3),entertainers.,cheap,false), Span(7,8,List(4),feudal,reputation,false), Span(13,14,List(5),,sense,false), Span(2,3,List(6),cheap,just,false), Span(10,11,List(9, 8, 7),makes,(country :name (name :op "China")),false)),Map(2 -> have-org-role-91, 5 -> sense, 8 -> name, 7 -> country, 1 -> person, 4 -> reputation, 6 -> just, 9 -> "China", 0 -> e, 3 -> cheap),Map(n -> name, e -> e, h -> have-org-role-91, j -> just, s -> sense, p -> person, r -> reputation, c -> cheap, c2 -> country))),[Ljava.lang.String;@7336ab60,Annotation([Ljava.lang.String;@7d3d21a7,[Ljava.lang.String;@51540abb,[Ljava.lang.String;@37847534),Annotation([Ljava.lang.String;@71afb50f,[Ljava.lang.String;@658b9284,[Ledu.cmu.lti.nlp.amr.Dependency;@147b4d5c),Annotation([Ljava.lang.String;@42a732,[Ljava.lang.String;@c497df8,[Ljava.lang.String;@356fc147),Annotation([Ljava.lang.String;@7b306b1b,[Ljava.lang.String;@6ede3878,[Ledu.cmu.lti.nlp.amr.Entity;@29bf2ee6))
AMR:
(c2 / country, name, n / name)
(e / e, calendar, r / reputation)
(e / e, mod, s / sense)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, j / just)
(h / have-org-role-91, ARG6, r / reputation)
(j / just, calendar, c / cheap)
(n / name, op, "China")
(r / reputation, poss, c2 / country)

Decoded in 271,372 microseconds
Sentence: Agree!

Oracle Span 1:  Agree => agree-01
Spans:
Span 0-1:  Agree! => agree-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Agree => agree-01

Dependencies:
1	Agree	_	VB	VB	_	0	root	_	_
2	!	_	.	.	_	1	punct	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Agree!,agree-01,false)),Map(0 -> agree-01),Map(a -> agree-01))),[Ljava.lang.String;@2841d1f3,Annotation([Ljava.lang.String;@21015a75,[Ljava.lang.String;@5d5d6043,[Ljava.lang.String;@3f1d28d3),Annotation([Ljava.lang.String;@19f5a88a,[Ljava.lang.String;@328c8b33,[Ledu.cmu.lti.nlp.amr.Dependency;@4e5ba59),Annotation([Ljava.lang.String;@526841a6,[Ljava.lang.String;@666d0299,[Ljava.lang.String;@306ed874),Annotation([Ljava.lang.String;@19f09b52,[Ljava.lang.String;@9859cbb,[Ledu.cmu.lti.nlp.amr.Entity;@7723ed8))
AMR:


Decoded in 21,343 microseconds
Sentence: Ah well, it is not easy to be an actress

Oracle Span 1:  easy => easy
Spans:
Span 10-11:   => access-01
Span 0-1:  Ah => ah-01
Span 6-7:  to => easy
Span 1-2:  well, => well

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 6-7:  easy => easy

Dependencies:
1	Ah	_	RB	RB	_	2	advmod	_	_
2	well	_	RB	RB	_	7	advmod	_	_
3	,	_	,	,	_	7	punct	_	_
4	it	_	PRP	PRP	_	7	nsubj	_	_
5	is	_	VBZ	VBZ	_	7	cop	_	_
6	not	_	RB	RB	_	7	neg	_	_
7	easy	_	JJ	JJ	_	0	root	_	_
8	to	_	TO	TO	_	11	aux	_	_
9	be	_	VB	VB	_	11	cop	_	_
10	an	_	DT	DT	_	11	det	_	_
11	actress	_	NN	NN	_	7	xcomp	_	_

Oracle:


Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),,access-01,false), Span(1,2,List(1),well,,well,false), Span(0,1,List(2),Ah,ah-01,false), Span(6,7,List(3),to,easy,false)),Map(2 -> ah-01, 1 -> well, 0 -> access-01, 3 -> easy),Map(e -> easy, w -> well, a -> access-01, a2 -> ah-01))),[Ljava.lang.String;@2dcf13b9,Annotation([Ljava.lang.String;@42eebc2a,[Ljava.lang.String;@46306404,[Ljava.lang.String;@12efdfbb),Annotation([Ljava.lang.String;@47e84484,[Ljava.lang.String;@7050bfbf,[Ledu.cmu.lti.nlp.amr.Dependency;@3585e5f5),Annotation([Ljava.lang.String;@597be6f9,[Ljava.lang.String;@5c324536,[Ljava.lang.String;@296ab448),Annotation([Ljava.lang.String;@335a56dd,[Ljava.lang.String;@35902261,[Ledu.cmu.lti.nlp.amr.Entity;@7bc5ca10))
AMR:
(a / access-01, ARG1, w / well)
(a2 / ah-01, ARG1, e / easy)
(w / well, op, a2 / ah-01)

Decoded in 138,617 microseconds
Sentence: They deserve it. They asked for that.

Oracle Span 1:  asked => ask-02
Oracle Span 2:  deserve => deserve-01
Oracle Span 3:  it => it
Oracle Span 4:  that => that
Oracle Span 5:  They => they
Oracle Span 6:  They => they
Spans:
Span 1-2:  deserve => deserve-01
Span 0-1:  They => they

 *** WARNING: The dependency tree seems broken.  I can't find the head of asked in position 5
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 6
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 8
Langrangian relaxation converged after 1 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of asked in position 5
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 6
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 8
Oracle Span 5-6:  asked => ask-02
Oracle Span 1-2:  deserve => deserve-01
Oracle Span 2-3:  it => it
Oracle Span 7-8:  that => that
Oracle Span 0-1:  They => they
Oracle Span 4-5:  They => they

Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	deserve	_	VBP	VBP	_	0	root	_	_
3	it	_	PRP	PRP	_	2	dobj	_	_
4	.	_	.	.	_	2	punct	_	_
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	asked	_	VBD	VBD	_	0	root	_	_
3	for	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	3	pobj	_	_
5	.	_	.	.	_	2	punct	_	_

Oracle:
(a / ask-02, ARG0, t2 / they)
(a / ask-02, ARG1, t3 / that)
(d / deserve-01, ARG0, t / they)
(d / deserve-01, ARG1, i / it)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),They,they,false), Span(1,2,List(1),deserve,deserve-01,false)),Map(1 -> deserve-01, 0 -> they),Map(t -> they, d -> deserve-01))),[Ljava.lang.String;@177f1269,Annotation([Ljava.lang.String;@55acdcbe,[Ljava.lang.String;@2adc0812,[Ljava.lang.String;@293abad),Annotation([Ljava.lang.String;@6d900dcc,[Ljava.lang.String;@5eea65ec,[Ledu.cmu.lti.nlp.amr.Dependency;@143c6abb),Annotation([Ljava.lang.String;@bed6552,[Ljava.lang.String;@66fef78e,[Ljava.lang.String;@6b362bb8),Annotation([Ljava.lang.String;@1ca8edd7,[Ljava.lang.String;@7c0fdce5,[Ledu.cmu.lti.nlp.amr.Entity;@6d5c166d))
AMR:
(d / deserve-01, ARG0, t / they)

Decoded in 64,591 microseconds
Sentence: It dawned on me nothing is easy!

Oracle Span 1:  dawned => dawn-01
Oracle Span 2:  easy => easy
Oracle Span 3:  nothing => nothing
Spans:
Span 1-2:  dawned => dawn-01
Span 6-7:  easy! => easy
Span 0-1:  It => it
Span 4-5:  nothing => nothing

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  dawned => dawn-01
Oracle Span 6-7:  easy => easy
Oracle Span 4-5:  nothing => nothing

Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	dawned	_	VBD	VBD	_	0	root	_	_
3	on	_	IN	IN	_	7	prep	_	_
4	me	_	PRP	PRP	_	3	pobj	_	_
5	nothing	_	NN	NN	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	easy	_	JJ	JJ	_	2	ccomp	_	_
8	!	_	.	.	_	2	punct	_	_

Oracle:
(d / dawn-01, ARG1, e / easy)
(e / easy, domain, n / nothing)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),It,it,false), Span(1,2,List(1),dawned,dawn-01,false), Span(6,7,List(2),easy!,easy,false), Span(4,5,List(3),nothing,nothing,false)),Map(2 -> easy, 1 -> dawn-01, 0 -> it, 3 -> nothing),Map(n -> nothing, e -> easy, d -> dawn-01, i -> it))),[Ljava.lang.String;@23aafca9,Annotation([Ljava.lang.String;@7f7397d5,[Ljava.lang.String;@21e26a0c,[Ljava.lang.String;@54e05f09),Annotation([Ljava.lang.String;@205bae88,[Ljava.lang.String;@43754869,[Ledu.cmu.lti.nlp.amr.Dependency;@7175f801),Annotation([Ljava.lang.String;@273be931,[Ljava.lang.String;@5a693cb0,[Ljava.lang.String;@33b61194),Annotation([Ljava.lang.String;@6d5d5213,[Ljava.lang.String;@15574ce8,[Ledu.cmu.lti.nlp.amr.Entity;@6487e4e))
AMR:
(d / dawn-01, ARG0, i / it)
(d / dawn-01, ARG1, e / easy)
(e / easy, domain, n / nothing)

Decoded in 63,729 microseconds
Sentence: The women are birds and beasts, and the men are worse than birds and beasts

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  beasts => beast
Oracle Span 5:  birds => bird
Oracle Span 6:  men => man
Oracle Span 7:  women => woman
Oracle Span 8:  worse => bad
Spans:
Span 15-16:   => beast
Span 4-5:  and => and
Span 13-14:  and => bird
Span 9-10:  are => man
Span 14-15:  beasts => and
Span 7-8:  the => and
Span 1-2:  women => woman

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 7-8:  and => and
Oracle Span 14-15:  and => and
Oracle Span 5-6:  beasts => beast
Oracle Span 3-4:  birds => bird
Oracle Span 9-10:  men => man
Oracle Span 1-2:  women => woman
Oracle Span 11-12:  worse => bad

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	women	_	NNS	NNS	_	4	nsubj	_	_
3	are	_	VBP	VBP	_	4	cop	_	_
4	birds	_	NNS	NNS	_	0	root	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	beasts	_	NNS	NNS	_	4	conj	_	_
7	,	_	,	,	_	4	punct	_	_
8	and	_	CC	CC	_	4	cc	_	_
9	the	_	DT	DT	_	10	det	_	_
10	men	_	NNS	NNS	_	12	nsubj	_	_
11	are	_	VBP	VBP	_	12	cop	_	_
12	worse	_	JJR	JJR	_	4	conj	_	_
13	than	_	IN	IN	_	12	prep	_	_
14	birds	_	NNS	NNS	_	13	pobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	beasts	_	NNS	NNS	_	14	conj	_	_

Oracle:
(a / and, op, a3 / and)
(a / and, op, b3 / bad)
(a2 / and, op, b4 / bird)
(a2 / and, op, b5 / beast)
(a3 / and, domain, w / woman)
(a3 / and, op, b4 / bird)
(a3 / and, op, b5 / beast)
(b3 / bad, compared-to, a2 / and)
(b3 / bad, domain, m / man)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),beasts,and,false), Span(9,10,List(1),are,man,false), Span(1,2,List(2),women,woman,false), Span(15,16,List(3),,beast,false), Span(7,8,List(4),the,and,false), Span(4,5,List(5),and,and,false), Span(13,14,List(6),and,bird,false)),Map(2 -> woman, 5 -> and, 1 -> man, 4 -> and, 6 -> bird, 0 -> and, 3 -> beast),Map(w -> woman, b -> beast, b2 -> bird, a3 -> and, m -> man, a -> and, a2 -> and))),[Ljava.lang.String;@aae343a,Annotation([Ljava.lang.String;@1722a33f,[Ljava.lang.String;@6b0d018c,[Ljava.lang.String;@292ab090),Annotation([Ljava.lang.String;@525e5e6b,[Ljava.lang.String;@50673444,[Ledu.cmu.lti.nlp.amr.Dependency;@53e55ea5),Annotation([Ljava.lang.String;@2f37da79,[Ljava.lang.String;@f3a64f2,[Ljava.lang.String;@6696b445),Annotation([Ljava.lang.String;@1f7fde44,[Ljava.lang.String;@e8a3bc0,[Ledu.cmu.lti.nlp.amr.Entity;@524bc317))
AMR:
(a / and, op, a2 / and)
(a / and, op, b / beast)
(a / and, op, b2 / bird)
(a2 / and, op, w / woman)
(a3 / and, op, m / man)
(a3 / and, op, w / woman)

Decoded in 168,903 microseconds
