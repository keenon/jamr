Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: Xinhua News Agency , Beijing , September 1st , by reporter Guojun Yang

NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (country :name (name :op "Beijing"))
NER Entity: (person :name (name :op "Guojun" :op "Yang"))
NER Entity: (country :name (name :op "Beijing"))
Spans:
Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Span 11-13:  Guojun Yang => (person :name (name :op "Guojun" :op "Yang"))
Span 10-11:  reporter => (person :ARG0-of report-01)
Span 6-7:  September => (date-entity :month 9)
Span 0-3:  Xinhua News Agency => (organization :name (name :op "Xinhua" :op "News" :op "Agency"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,13,List(3, 2, 1, 0),Guojun Yang,(person :name (name :op "Guojun" :op "Yang")),false), Span(10,11,List(5, 4),reporter,(person :ARG0-of report-01),false), Span(6,7,List(7, 6),September,(date-entity :month 9),false), Span(4,5,List(10, 9, 8),Beijing,(city :name (name :op "Beijing")),false), Span(0,3,List(15, 14, 13, 12, 11),Xinhua News Agency,(organization :name (name :op "Xinhua" :op "News" :op "Agency")),false)),Map(2 -> "Guojun", 5 -> report-01, 12 -> name, 15 -> "Agency", 8 -> city, 7 -> 9, 1 -> name, 4 -> person, 11 -> organization, 14 -> "News", 6 -> date-entity, 0 -> person, 9 -> name, 3 -> "Yang", 10 -> "Beijing", 13 -> "Xinhua"),Map(n -> name, p2 -> person, d -> date-entity, p -> person, n3 -> name, r -> report-01, c -> city, o -> organization, 9 -> 9, n2 -> name))),[Ljava.lang.String;@2667f029,Annotation([Ljava.lang.String;@67a20f67,[Ljava.lang.String;@57c758ac,[Ljava.lang.String;@a9cd3b1),Annotation([Ljava.lang.String;@13e39c73,[Ljava.lang.String;@64cd705f,[Ledu.cmu.lti.nlp.amr.Dependency;@9225652),Annotation([Ljava.lang.String;@654f0d9c,[Ljava.lang.String;@6a400542,[Ljava.lang.String;@6580cfdd),Annotation([Ljava.lang.String;@7e0b85f9,[Ljava.lang.String;@63355449,[Ledu.cmu.lti.nlp.amr.Entity;@9353778))
AMR:
(c / city, location, d / date-entity)
(c / city, name, n2 / name)
(d / date-entity, month, 9 / 9)
(n / name, op, "Guojun")
(n / name, op, "Yang")
(n2 / name, op, "Beijing")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(o / organization, name, n3 / name)
(o / organization, poss, p / person)
(o / organization, poss, p2 / person)
(p / person, name, n / name)
(r / report-01, ARG0, p2 / person)
(r / report-01, ARG1, c / city)

Decoded in 976,462 microseconds
Sentence: When meeting with Chavalit Yoncayu , vice-premier and concurrent Minister of Domestic Affairs of Thailand , at the Diaoyutai State Guesthouse today , Huaqing Liu , vice-chairman of the Central Military Commission said that China placed a great deal of importance in developing friendship with the government , people and Armed Forces of Thailand , especially the economic and trade cooperation between the two countries .

NER Entity: (person :name (name :op "Chavalit" :op "Yoncayu"))
NER Entity: (organization :name (name :op "Domestic" :op "Affairs" :op "of" :op "Thailand"))
NER Entity: (organization :name (name :op "Diaoyutai" :op "State" :op "Guesthouse"))
NER Entity: (person :name (name :op "Huaqing" :op "Liu"))
NER Entity: (organization :name (name :op "Central" :op "Military" :op "Commission"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "Armed" :op "Forces" :op "of" :op "Thailand"))
Spans:
Span 29-32:  - chairman of => (organization :name (name :op "Central" :op "Military" :op "Commission"))
Span 62-63:  and => and
Span 9-10:  and => and
Span 54-55:  Armed => arm-01
Span 18-21:  at the Diaoyutai => (organization :name (name :op "Diaoyutai" :op "State" :op "Guesthouse"))
Span 65-66:  between => between
Span 33-36:  Central Military Commission => (government-organization :name (name :op "Commission" :op "Military" :op "Central"))
Span 3-5:  Chavalit Yoncayu => (person :name (name :op "Chavalit" :op "Yoncayu"))
Span 38-39:  China => (country :name (name :op "China"))
Span 64-65:  cooperation => cooperate-01
Span 68-69:  countries => country
Span 42-43:  deal => deal-01
Span 46-47:  developing => develop-02
Span 61-62:  economic => economy
Span 59-60:  especially => especially
Span 55-56:  Forces => (have-org-role-91 :ARG2 force)
Span 47-48:  friendship => friendship
Span 50-54:  government , people and => (organization :name (name :op "Armed" :op "Forces" :op "of" :op "Thailand"))
Span 41-42:  great => great
Span 44-45:  importance => importance
Span 1-2:  meeting => meet-03
Span 11-15:  Minister of Domestic Affairs => (organization :name (name :op "Domestic" :op "Affairs" :op "of" :op "Thailand"))
Span 39-40:  placed => place-01
Span 8-9:  premier => premier
Span 36-37:  said => say-01
Span 57-58:  Thailand => (country :name (name :op "Thailand"))
Span 16-17:  Thailand => (country :name (name :op "Thailand"))
Span 23-25:  today , => (person :name (name :op "Huaqing" :op "Liu"))
Span 63-64:  trade => trade-01
Span 67-68:  two => 2
Span 28-29:  vice => vice
Span 6-7:  vice => vice

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(68,69,List(0),countries,country,false), Span(67,68,List(1),two,2,false), Span(65,66,List(2),between,between,false), Span(64,65,List(3),cooperation,cooperate-01,false), Span(63,64,List(4),trade,trade-01,false), Span(62,63,List(5),and,and,false), Span(61,62,List(6),economic,economy,false), Span(59,60,List(7),especially,especially,false), Span(57,58,List(10, 9, 8),Thailand,(country :name (name :op "Thailand")),false), Span(55,56,List(12, 11),Forces,(have-org-role-91 :ARG2 force),false), Span(54,55,List(13),Armed,arm-01,false), Span(50,54,List(19, 18, 17, 16, 15, 14),government , people and,(organization :name (name :op "Armed" :op "Forces" :op "of" :op "Thailand")),false), Span(47,48,List(20),friendship,friendship,false), Span(46,47,List(21),developing,develop-02,false), Span(44,45,List(22),importance,importance,false), Span(42,43,List(23),deal,deal-01,false), Span(41,42,List(24),great,great,false), Span(39,40,List(25),placed,place-01,false), Span(38,39,List(28, 27, 26),China,(country :name (name :op "China")),false), Span(36,37,List(29),said,say-01,false), Span(33,36,List(34, 33, 32, 31, 30),Central Military Commission,(government-organization :name (name :op "Commission" :op "Military" :op "Central")),false), Span(29,32,List(39, 38, 37, 36, 35),- chairman of,(organization :name (name :op "Central" :op "Military" :op "Commission")),false), Span(28,29,List(40),vice,vice,false), Span(23,25,List(44, 43, 42, 41),today ,,(person :name (name :op "Huaqing" :op "Liu")),false), Span(18,21,List(49, 48, 47, 46, 45),at the Diaoyutai,(organization :name (name :op "Diaoyutai" :op "State" :op "Guesthouse")),false), Span(16,17,List(52, 51, 50),Thailand,(country :name (name :op "Thailand")),false), Span(11,15,List(58, 57, 56, 55, 54, 53),Minister of Domestic Affairs,(organization :name (name :op "Domestic" :op "Affairs" :op "of" :op "Thailand")),false), Span(9,10,List(59),and,and,false), Span(8,9,List(60),premier,premier,false), Span(6,7,List(61),vice,vice,false), Span(3,5,List(65, 64, 63, 62),Chavalit Yoncayu,(person :name (name :op "Chavalit" :op "Yoncayu")),false), Span(1,2,List(66),meeting,meet-03,false)),Map(57 -> "of", 63 -> name, 30 -> government-organization, 39 -> "Commission", 45 -> organization, 66 -> meet-03, 51 -> name, 2 -> between, 5 -> and, 48 -> "State", 33 -> "Military", 27 -> name, 54 -> name, 12 -> force, 60 -> premier, 8 -> country, 15 -> name, 42 -> name, 36 -> name, 21 -> develop-02, 18 -> "of", 24 -> great, 53 -> organization, 35 -> organization, 41 -> person, 62 -> person, 56 -> "Affairs", 7 -> especially, 59 -> and, 17 -> "Forces", 1 -> 2, 50 -> country, 44 -> "Liu", 23 -> deal-01, 65 -> "Yoncayu", 38 -> "Military", 47 -> "Diaoyutai", 4 -> trade-01, 26 -> country, 11 -> have-org-role-91, 32 -> "Commission", 14 -> organization, 20 -> friendship, 29 -> say-01, 64 -> "Chavalit", 46 -> name, 52 -> "Thailand", 34 -> "Central", 6 -> economy, 28 -> "China", 55 -> "Domestic", 40 -> vice, 61 -> vice, 49 -> "Guesthouse", 0 -> country, 9 -> name, 43 -> "Huaqing", 22 -> importance, 58 -> "Thailand", 16 -> "Armed", 37 -> "Central", 19 -> "Thailand", 3 -> cooperate-01, 10 -> "Thailand", 25 -> place-01, 31 -> name, 13 -> arm-01),Map(e -> economy, n -> name, v2 -> vice, h -> have-org-role-91, 2 -> 2, t -> trade-01, b -> between, o3 -> organization, n7 -> name, p2 -> person, e2 -> especially, a3 -> and, n4 -> name, c4 -> country, s -> say-01, v -> vice, m -> meet-03, d -> develop-02, g2 -> government-organization, g -> great, p -> place-01, c3 -> country, a -> and, n3 -> name, p4 -> person, n6 -> name, o2 -> organization, d2 -> deal-01, n10 -> name, n9 -> name, a2 -> arm-01, i -> importance, c -> country, f2 -> friendship, n8 -> name, f -> force, o -> organization, o4 -> organization, p3 -> premier, c2 -> cooperate-01, n2 -> name, c5 -> country, n5 -> name))),[Ljava.lang.String;@498d318c,Annotation([Ljava.lang.String;@6e171cd7,[Ljava.lang.String;@402bba4f,[Ljava.lang.String;@795cd85e),Annotation([Ljava.lang.String;@59fd97a8,[Ljava.lang.String;@f5ac9e4,[Ledu.cmu.lti.nlp.amr.Dependency;@123ef382),Annotation([Ljava.lang.String;@dbf57b3,[Ljava.lang.String;@384ad17b,[Ljava.lang.String;@61862a7f),Annotation([Ljava.lang.String;@441772e,[Ljava.lang.String;@7334aada,[Ledu.cmu.lti.nlp.amr.Entity;@1d9b7cce))
AMR:
(a / and, location, c3 / country)
(a / and, op, c2 / cooperate-01)
(a / and, op, f2 / friendship)
(a / and, op, o / organization)
(a2 / arm-01, ARG0, g2 / government-organization)
(a2 / arm-01, ARG1, c5 / country)
(a3 / and, op, c5 / country)
(a3 / and, op, p3 / premier)
(b / between, op, c / country)
(c / country, quant, 2 / 2)
(c2 / cooperate-01, ARG0, c / country)
(c2 / cooperate-01, ARG1, e / economy)
(c3 / country, name, n / name)
(c4 / country, name, n3 / name)
(c5 / country, name, n8 / name)
(d / develop-02, ARG1, f2 / friendship)
(d2 / deal-01, ARG0, c4 / country)
(d2 / deal-01, mod, g / great)
(e / economy, degree, e2 / especially)
(f / force, mod, a2 / arm-01)
(g2 / government-organization, name, n4 / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, f / force)
(i / importance, poss, c4 / country)
(m / meet-03, ARG0, o3 / organization)
(m / meet-03, ARG1, p4 / person)
(n / name, op, "Thailand")
(n10 / name, op, "Chavalit")
(n10 / name, op, "Yoncayu")
(n2 / name, op, "Armed")
(n2 / name, op, "Forces")
(n2 / name, op, "Thailand")
(n2 / name, op, "of")
(n3 / name, op, "China")
(n4 / name, op, "Central")
(n4 / name, op, "Commission")
(n4 / name, op, "Military")
(n5 / name, op, "Central")
(n5 / name, op, "Commission")
(n5 / name, op, "Military")
(n6 / name, op, "Huaqing")
(n6 / name, op, "Liu")
(n7 / name, op, "Diaoyutai")
(n7 / name, op, "Guesthouse")
(n7 / name, op, "State")
(n8 / name, op, "Thailand")
(n9 / name, op, "Affairs")
(n9 / name, op, "Domestic")
(n9 / name, op, "Thailand")
(n9 / name, op, "of")
(o / organization, name, n2 / name)
(o2 / organization, name, n5 / name)
(o3 / organization, name, n7 / name)
(o4 / organization, location, c5 / country)
(o4 / organization, name, n9 / name)
(p / place-01, ARG0, a / and)
(p / place-01, ARG1, d2 / deal-01)
(p2 / person, name, n6 / name)
(p3 / premier, mod, v2 / vice)
(p4 / person, mod, a3 / and)
(p4 / person, name, n10 / name)
(s / say-01, ARG0, v / vice)
(s / say-01, ARG1, p / place-01)
(s / say-01, ARG6, o2 / organization)
(t / trade-01, ARG1, c2 / cooperate-01)

Decoded in 6,217,187 microseconds
Sentence: Huaqing Liu said that , the people of China and Thailand have traditional friendship and the relationship between the two countries was also very friendly too .

NER Entity: (person :name (name :op "Huaqing" :op "Liu"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 22-23:  also => also
Span 14-15:  and => and
Span 9-10:  and => and
Span 17-18:  between => between
Span 8-9:  China => (country :name (name :op "China"))
Span 20-21:  countries => country
Span 24-25:  friendly => friendly
Span 13-14:  friendship => friendship
Span 0-2:  Huaqing Liu => (person :name (name :op "Huaqing" :op "Liu"))
Span 6-7:  people => people
Span 16-17:  relationship => relationship
Span 2-3:  said => say-01
Span 10-11:  Thailand => (country :name (name :op "Thailand"))
Span 25-26:  too => too
Span 12-13:  traditional => traditional
Span 19-20:  two => 2
Span 23-24:  very => very

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),too,too,false), Span(24,25,List(1),friendly,friendly,false), Span(23,24,List(2),very,very,false), Span(22,23,List(3),also,also,false), Span(20,21,List(4),countries,country,false), Span(19,20,List(5),two,2,false), Span(17,18,List(6),between,between,false), Span(16,17,List(7),relationship,relationship,false), Span(14,15,List(8),and,and,false), Span(13,14,List(9),friendship,friendship,false), Span(12,13,List(10),traditional,traditional,false), Span(10,11,List(13, 12, 11),Thailand,(country :name (name :op "Thailand")),false), Span(9,10,List(14),and,and,false), Span(8,9,List(17, 16, 15),China,(country :name (name :op "China")),false), Span(6,7,List(18),people,people,false), Span(2,3,List(19),said,say-01,false), Span(0,2,List(23, 22, 21, 20),Huaqing Liu,(person :name (name :op "Huaqing" :op "Liu")),false)),Map(2 -> very, 5 -> 2, 12 -> name, 15 -> country, 8 -> and, 21 -> name, 18 -> people, 7 -> relationship, 17 -> "China", 1 -> friendly, 23 -> "Liu", 4 -> country, 11 -> country, 14 -> and, 20 -> person, 6 -> between, 22 -> "Huaqing", 0 -> too, 9 -> friendship, 16 -> name, 19 -> say-01, 3 -> also, 10 -> traditional, 13 -> "Thailand"),Map(n -> name, 2 -> 2, t -> too, b -> between, p2 -> person, a3 -> and, s -> say-01, v -> very, p -> people, n3 -> name, c3 -> country, a -> also, t2 -> traditional, r -> relationship, a2 -> and, c -> country, f2 -> friendship, f -> friendly, n2 -> name, c2 -> country))),[Ljava.lang.String;@4d9e68d0,Annotation([Ljava.lang.String;@42e99e4a,[Ljava.lang.String;@14dd9eb7,[Ljava.lang.String;@52e6fdee),Annotation([Ljava.lang.String;@6c80d78a,[Ljava.lang.String;@62150f9e,[Ledu.cmu.lti.nlp.amr.Dependency;@1a451d4d),Annotation([Ljava.lang.String;@7fa98a66,[Ljava.lang.String;@15ff3e9e,[Ljava.lang.String;@5fdcaa40),Annotation([Ljava.lang.String;@6dc17b83,[Ljava.lang.String;@5e0826e7,[Ledu.cmu.lti.nlp.amr.Entity;@32eff876))
AMR:
(a2 / and, op, f / friendly)
(a2 / and, op, f2 / friendship)
(a3 / and, op, c3 / country)
(a3 / and, op, f2 / friendship)
(b / between, op, c / country)
(c / country, quant, 2 / 2)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(f / friendly, degree, v / very)
(f / friendly, domain, r / relationship)
(f / friendly, mod, a / also)
(f / friendly, mod, t / too)
(f2 / friendship, mod, t2 / traditional)
(f2 / friendship, poss, p / people)
(n / name, op, "Thailand")
(n2 / name, op, "China")
(n3 / name, op, "Huaqing")
(n3 / name, op, "Liu")
(p / people, mod, c2 / country)
(p2 / person, name, n3 / name)
(r / relationship, mod, b / between)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, a2 / and)

Decoded in 458,385 microseconds
Sentence: He said that this visit by vice-premier Chavalit and mutual visits by other high - level leaders of China and Thailand were beneficial in promoting further development of relationships and the efficient cooperation in all fields between the two countries .

NER Entity: (person :name (name :op "Chavalit"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 36-37:  all => all
Span 31-32:  and => and
Span 21-22:  and => and
Span 10-11:  and => and
Span 24-25:  beneficial => benefit-01
Span 38-39:  between => between
Span 20-21:  China => (country :name (name :op "China"))
Span 34-35:  cooperation => cooperate-01
Span 41-42:  countries => country
Span 28-29:  development => develop-02
Span 33-34:  efficient => efficient-41
Span 37-38:  fields => field
Span 27-28:  further => further
Span 0-1:  He => he
Span 15-16:  high => high
Span 18-19:  leaders => (person :ARG0-of lead-02)
Span 17-18:  level => level
Span 11-12:  mutual => mutual
Span 14-15:  other => other
Span 8-9:  premier => premier
Span 26-27:  promoting => promote-02
Span 30-31:  relationships => relationship
Span 1-2:  said => say-01
Span 22-23:  Thailand => (country :name (name :op "Thailand"))
Span 3-4:  this => this
Span 40-41:  two => 2
Span 6-7:  vice => vice
Span 4-5:  visit => visit-01
Span 12-13:  visits => visit-01

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),countries,country,false), Span(40,41,List(1),two,2,false), Span(38,39,List(2),between,between,false), Span(37,38,List(3),fields,field,false), Span(36,37,List(4),all,all,false), Span(34,35,List(5),cooperation,cooperate-01,false), Span(33,34,List(6),efficient,efficient-41,false), Span(31,32,List(7),and,and,false), Span(30,31,List(8),relationships,relationship,false), Span(28,29,List(9),development,develop-02,false), Span(27,28,List(10),further,further,false), Span(26,27,List(11),promoting,promote-02,false), Span(24,25,List(12),beneficial,benefit-01,false), Span(22,23,List(15, 14, 13),Thailand,(country :name (name :op "Thailand")),false), Span(21,22,List(16),and,and,false), Span(20,21,List(19, 18, 17),China,(country :name (name :op "China")),false), Span(18,19,List(21, 20),leaders,(person :ARG0-of lead-02),false), Span(17,18,List(22),level,level,false), Span(15,16,List(23),high,high,false), Span(14,15,List(24),other,other,false), Span(12,13,List(25),visits,visit-01,false), Span(11,12,List(26),mutual,mutual,false), Span(10,11,List(27),and,and,false), Span(8,9,List(28),premier,premier,false), Span(6,7,List(29),vice,vice,false), Span(4,5,List(30),visit,visit-01,false), Span(3,4,List(31),this,this,false), Span(1,2,List(32),said,say-01,false), Span(0,1,List(33),He,he,false)),Map(30 -> visit-01, 2 -> between, 5 -> cooperate-01, 33 -> he, 27 -> and, 12 -> benefit-01, 8 -> relationship, 15 -> "Thailand", 21 -> lead-02, 18 -> name, 24 -> other, 7 -> and, 1 -> 2, 17 -> country, 23 -> high, 26 -> mutual, 4 -> all, 11 -> promote-02, 32 -> say-01, 14 -> name, 29 -> vice, 20 -> person, 28 -> premier, 6 -> efficient-41, 9 -> develop-02, 0 -> country, 22 -> level, 16 -> and, 19 -> "China", 10 -> further, 3 -> field, 31 -> this, 25 -> visit-01, 13 -> country),Map(e -> efficient-41, n -> name, v2 -> vice, h -> high, 2 -> 2, h2 -> he, t -> this, b -> between, b2 -> benefit-01, p2 -> person, a3 -> and, c4 -> country, s -> say-01, v -> visit-01, d -> develop-02, m -> mutual, p -> promote-02, a -> all, c3 -> country, v3 -> visit-01, l2 -> level, r -> relationship, a2 -> and, c -> country, f2 -> further, l -> lead-02, f -> field, o -> other, p3 -> premier, c2 -> cooperate-01, n2 -> name, a4 -> and))),[Ljava.lang.String;@8dbdac1,Annotation([Ljava.lang.String;@6e20b53a,[Ljava.lang.String;@71809907,[Ljava.lang.String;@3ce1e309),Annotation([Ljava.lang.String;@6aba2b86,[Ljava.lang.String;@158da8e,[Ledu.cmu.lti.nlp.amr.Dependency;@74e52303),Annotation([Ljava.lang.String;@47af7f3d,[Ljava.lang.String;@7c729a55,[Ljava.lang.String;@3bb9a3ff),Annotation([Ljava.lang.String;@661972b0,[Ljava.lang.String;@5af3afd9,[Ledu.cmu.lti.nlp.amr.Entity;@323b36e0))
AMR:
(a2 / and, op, c2 / cooperate-01)
(a2 / and, op, p2 / person)
(a2 / and, op, r / relationship)
(a4 / and, op, v / visit-01)
(b / between, op, c / country)
(b2 / benefit-01, ARG1, a3 / and)
(b2 / benefit-01, ARG2, p / promote-02)
(c / country, quant, 2 / 2)
(c2 / cooperate-01, ARG1, c / country)
(c3 / country, name, n / name)
(c4 / country, name, n2 / name)
(d / develop-02, ARG1, r / relationship)
(d / develop-02, degree, f2 / further)
(e / efficient-41, ARG1, c2 / cooperate-01)
(f / field, mod, b / between)
(f / field, quant, a / all)
(h / high, example, a4 / and)
(h / high, mod, o / other)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, c4 / country)
(n / name, op, "Thailand")
(n2 / name, op, "China")
(p / promote-02, ARG0, c3 / country)
(p / promote-02, ARG1, d / develop-02)
(p3 / premier, mod, v2 / vice)
(s / say-01, ARG0, h2 / he)
(s / say-01, ARG1, v3 / visit-01)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, ARG1, l2 / level)
(v / visit-01, mod, m / mutual)
(v3 / visit-01, ARG0, a4 / and)
(v3 / visit-01, ARG1, t / this)
(v3 / visit-01, ARG2, v2 / vice)

Decoded in 2,967,386 microseconds
Sentence: Chavalit said that he was extremely happy to meet vice-chairman Liu .

NER Entity: (person :name (name :op "Chavalit"))
NER Entity: (person :name (name :op "Liu"))
Spans:
Span 11-12:  chairman => chairman
Span 5-6:  extremely => extreme
Span 8-9:  meet => meet-03
Span 1-2:  said => say-01
Span 9-10:  vice => vice

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),chairman,chairman,false), Span(9,10,List(1),vice,vice,false), Span(8,9,List(2),meet,meet-03,false), Span(5,6,List(3),extremely,extreme,false), Span(1,2,List(4),said,say-01,false)),Map(2 -> meet-03, 1 -> vice, 4 -> say-01, 0 -> chairman, 3 -> extreme),Map(e -> extreme, s -> say-01, m -> meet-03, v -> vice, c -> chairman))),[Ljava.lang.String;@44ebcd03,Annotation([Ljava.lang.String;@694abbdc,[Ljava.lang.String;@2e005c4b,[Ljava.lang.String;@4567f35d),Annotation([Ljava.lang.String;@5ffead27,[Ljava.lang.String;@6356695f,[Ledu.cmu.lti.nlp.amr.Dependency;@4f18837a),Annotation([Ljava.lang.String;@359f7cdf,[Ljava.lang.String;@1fa268de,[Ljava.lang.String;@4f6ee6e4),Annotation([Ljava.lang.String;@4466af20,[Ljava.lang.String;@a514af7,[Ledu.cmu.lti.nlp.amr.Entity;@6b927fb))
AMR:
(c / chairman, mod, v / vice)
(m / meet-03, ARG6, s / say-01)
(s / say-01, ARG0, c / chairman)
(s / say-01, ARG1, e / extreme)

Decoded in 162,501 microseconds
Sentence: He said that in recent years , the development of China 's economy has accelerated , and the government and the people of Thailand feel extremely happy .

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 14-15:  accelerated => accelerate-01
Span 19-20:  and => and
Span 16-17:  and => and
Span 10-11:  China => (country :name (name :op "China"))
Span 8-9:  development => develop-02
Span 12-13:  economy => economy
Span 25-26:  extremely => extreme
Span 18-19:  government => (government-organization :ARG0-of govern-01)
Span 0-1:  He => he
Span 21-22:  people => people
Span 4-5:  recent => recent
Span 1-2:  said => say-01
Span 23-24:  Thailand => (country :name (name :op "Thailand"))
Span 5-6:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),extremely,extreme,false), Span(23,24,List(3, 2, 1),Thailand,(country :name (name :op "Thailand")),false), Span(21,22,List(4),people,people,false), Span(19,20,List(5),and,and,false), Span(18,19,List(7, 6),government,(government-organization :ARG0-of govern-01),false), Span(16,17,List(8),and,and,false), Span(14,15,List(9),accelerated,accelerate-01,false), Span(12,13,List(10),economy,economy,false), Span(10,11,List(13, 12, 11),China,(country :name (name :op "China")),false), Span(8,9,List(14),development,develop-02,false), Span(5,6,List(16, 15),years,(temporal-quantity :unit year),false), Span(4,5,List(17),recent,recent,false), Span(1,2,List(18),said,say-01,false), Span(0,1,List(19),He,he,false)),Map(2 -> name, 5 -> and, 12 -> name, 15 -> temporal-quantity, 8 -> and, 18 -> say-01, 7 -> govern-01, 17 -> recent, 1 -> country, 4 -> people, 11 -> country, 14 -> develop-02, 6 -> government-organization, 0 -> extreme, 9 -> accelerate-01, 16 -> year, 19 -> he, 3 -> "Thailand", 10 -> economy, 13 -> "China"),Map(e -> extreme, n -> name, h -> he, t -> temporal-quantity, e2 -> economy, a3 -> accelerate-01, s -> say-01, d -> develop-02, g2 -> govern-01, y -> year, p -> people, g -> government-organization, a -> and, r -> recent, a2 -> and, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@3e58a80e,Annotation([Ljava.lang.String;@4fb61f4a,[Ljava.lang.String;@4fb0f2b9,[Ljava.lang.String;@79924b),Annotation([Ljava.lang.String;@7b9a4292,[Ljava.lang.String;@4a94ee4,[Ledu.cmu.lti.nlp.amr.Dependency;@4cc451f2),Annotation([Ljava.lang.String;@6379eb,[Ljava.lang.String;@294425a7,[Ljava.lang.String;@67d48005),Annotation([Ljava.lang.String;@9f116cc,[Ljava.lang.String;@12468a38,[Ledu.cmu.lti.nlp.amr.Entity;@1aa7ecca))
AMR:
(a / and, op, g / government-organization)
(a / and, op, p / people)
(a2 / and, op, a3 / accelerate-01)
(a3 / accelerate-01, ARG0, d / develop-02)
(a3 / accelerate-01, ARG1, e / extreme)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / develop-02, ARG1, e2 / economy)
(e2 / economy, poss, c2 / country)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(n / name, op, "Thailand")
(n2 / name, op, "China")
(p / people, location, c / country)
(r / recent, mod, e / extreme)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a2 / and)
(t / temporal-quantity, unit, y / year)
(y / year, mod, r / recent)

Decoded in 1,015,471 microseconds
Sentence: He said that he agreed with Huaqing Liu 's opinion that Thailand and China should further develop various forms of economic and trade cooperation .

NER Entity: (person :name (name :op "Huaqing" :op "Liu"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Thailand"))
Spans:
Span 4-5:  agreed => agree-01
Span 21-22:  and => and
Span 12-13:  and => and
Span 13-14:  China => (country :name (name :op "China"))
Span 23-24:  cooperation => cooperate-01
Span 16-17:  develop => develop-02
Span 20-21:  economic => economy
Span 18-19:  forms => form
Span 15-16:  further => further
Span 0-1:  He => he
Span 6-8:  Huaqing Liu => (person :name (name :op "Huaqing" :op "Liu"))
Span 9-10:  opinion => (thing :ARG1-of opine-01)
Span 1-2:  said => say-01
Span 14-15:  should => recommend-01
Span 11-12:  Thailand => (country :name (name :op "Thailand"))
Span 22-23:  trade => trade-01
Span 17-18:  various => various

Langrangian relaxation converged after 98 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),cooperation,cooperate-01,false), Span(22,23,List(1),trade,trade-01,false), Span(21,22,List(2),and,and,false), Span(20,21,List(3),economic,economy,false), Span(18,19,List(4),forms,form,false), Span(17,18,List(5),various,various,false), Span(16,17,List(6),develop,develop-02,false), Span(15,16,List(7),further,further,false), Span(14,15,List(8),should,recommend-01,false), Span(13,14,List(11, 10, 9),China,(country :name (name :op "China")),false), Span(12,13,List(12),and,and,false), Span(11,12,List(15, 14, 13),Thailand,(country :name (name :op "Thailand")),false), Span(9,10,List(17, 16),opinion,(thing :ARG1-of opine-01),false), Span(6,8,List(21, 20, 19, 18),Huaqing Liu,(person :name (name :op "Huaqing" :op "Liu")),false), Span(4,5,List(22),agreed,agree-01,false), Span(1,2,List(23),said,say-01,false), Span(0,1,List(24),He,he,false)),Map(2 -> and, 5 -> various, 12 -> and, 8 -> recommend-01, 15 -> "Thailand", 21 -> "Liu", 18 -> person, 24 -> he, 7 -> further, 1 -> trade-01, 17 -> opine-01, 23 -> say-01, 4 -> form, 11 -> "China", 14 -> name, 20 -> "Huaqing", 6 -> develop-02, 9 -> country, 0 -> cooperate-01, 22 -> agree-01, 16 -> thing, 19 -> name, 10 -> name, 3 -> economy, 13 -> country),Map(e -> economy, n -> name, h -> he, t -> trade-01, a3 -> agree-01, s -> say-01, v -> various, d -> develop-02, p -> person, n3 -> name, a -> and, c3 -> country, t2 -> thing, r -> recommend-01, a2 -> and, c -> cooperate-01, f2 -> further, f -> form, o -> opine-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@59309333,Annotation([Ljava.lang.String;@5876a9af,[Ljava.lang.String;@7ec7ffd3,[Ljava.lang.String;@5b239d7d),Annotation([Ljava.lang.String;@6572421,[Ljava.lang.String;@6b81ce95,[Ledu.cmu.lti.nlp.amr.Dependency;@2a798d51),Annotation([Ljava.lang.String;@6d763516,[Ljava.lang.String;@52bf72b5,[Ljava.lang.String;@37afeb11),Annotation([Ljava.lang.String;@515aebb0,[Ljava.lang.String;@dd8ba08,[Ledu.cmu.lti.nlp.amr.Entity;@245b4bdc))
AMR:
(a / and, op, e / economy)
(a / and, op, t / trade-01)
(a3 / agree-01, ARG0, t2 / thing)
(a3 / agree-01, ARG1, r / recommend-01)
(c / cooperate-01, ARG1, c2 / country)
(c / cooperate-01, ARG2, a / and)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(d / develop-02, ARG0, c3 / country)
(d / develop-02, ARG1, f / form)
(d / develop-02, ARG2, c / cooperate-01)
(d / develop-02, degree, f2 / further)
(n / name, op, "China")
(n2 / name, op, "Thailand")
(n3 / name, op, "Huaqing")
(n3 / name, op, "Liu")
(o / opine-01, ARG0, p / person)
(o / opine-01, ARG1, t2 / thing)
(p / person, name, n3 / name)
(r / recommend-01, ARG1, d / develop-02)
(r / recommend-01, ARG6, a2 / and)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a3 / agree-01)
(t / trade-01, ARG1, v / various)

Decoded in 2,951,529 microseconds
Sentence: ( End )

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@595b007d,Annotation([Ljava.lang.String;@72d1ad2e,[Ljava.lang.String;@2d7275fc,[Ljava.lang.String;@399f45b1),Annotation([Ljava.lang.String;@38c6f217,[Ljava.lang.String;@478190fc,[Ledu.cmu.lti.nlp.amr.Dependency;@79e2c065),Annotation([Ljava.lang.String;@3a93b025,[Ljava.lang.String;@35cabb2a,[Ljava.lang.String;@7e07db1f),Annotation([Ljava.lang.String;@1189dd52,[Ljava.lang.String;@36bc55de,[Ledu.cmu.lti.nlp.amr.Entity;@564fabc8))
AMR:


Decoded in 5,466 microseconds
Sentence: Xinhua News Agency , Beijing , September 1st

NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (country :name (name :op "Beijing"))
NER Entity: (country :name (name :op "Beijing"))
Spans:
Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Span 6-7:  September => (date-entity :month 9)
Span 0-3:  Xinhua News Agency => (organization :name (name :op "Xinhua" :op "News" :op "Agency"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(1, 0),September,(date-entity :month 9),false), Span(4,5,List(4, 3, 2),Beijing,(city :name (name :op "Beijing")),false), Span(0,3,List(9, 8, 7, 6, 5),Xinhua News Agency,(organization :name (name :op "Xinhua" :op "News" :op "Agency")),false)),Map(2 -> city, 5 -> organization, 8 -> "News", 7 -> "Xinhua", 1 -> 9, 4 -> "Beijing", 6 -> name, 9 -> "Agency", 0 -> date-entity, 3 -> name),Map(n -> name, d -> date-entity, c -> city, o -> organization, 9 -> 9, n2 -> name))),[Ljava.lang.String;@16d04d3d,Annotation([Ljava.lang.String;@49ec71f8,[Ljava.lang.String;@1d2adfbe,[Ljava.lang.String;@36902638),Annotation([Ljava.lang.String;@223d2c72,[Ljava.lang.String;@8f4ea7c,[Ledu.cmu.lti.nlp.amr.Dependency;@436813f3),Annotation([Ljava.lang.String;@74fe5c40,[Ljava.lang.String;@3febb011,[Ljava.lang.String;@10e31a9a),Annotation([Ljava.lang.String;@131774fe,[Ljava.lang.String;@158d2680,[Ledu.cmu.lti.nlp.amr.Entity;@77847718))
AMR:
(c / city, location, d / date-entity)
(c / city, name, n / name)
(d / date-entity, month, 9 / 9)
(n / name, op, "Beijing")
(n2 / name, op, "Agency")
(n2 / name, op, "News")
(n2 / name, op, "Xinhua")
(o / organization, location, c / city)
(o / organization, name, n2 / name)

Decoded in 25,738 microseconds
Sentence: Guofang Shen , The foreign ministry spokesperson , announced at a news conference held this afternoon that President Gentzs Aerpade of the Hungary Republic , would pay a State visit to China from September 14th to the 17th at the invitation of president Zemin Jiang .

NER Entity: (person :name (name :op "Guofang" :op "Shen"))
NER Entity: (person :name (name :op "Gentzs" :op "Aerpade"))
NER Entity: (country :name (name :op "Hungary"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Zemin" :op "Jiang"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Hungary"))
Spans:
Span 15-16:  afternoon => afternoon
Span 8-9:  announced => announce-01
Span 31-32:  China => (country :name (name :op "China"))
Span 12-13:  conference => conference
Span 4-6:  foreign ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Span 18-20:  Gentzs Aerpade => (person :name (name :op "Gentzs" :op "Aerpade"))
Span 0-2:  Guofang Shen => (person :name (name :op "Guofang" :op "Shen"))
Span 13-14:  held => hold-04
Span 22-23:  Hungary => (country :name (name :op "Hungary"))
Span 40-41:  invitation => invite-01
Span 11-12:  news => news
Span 26-27:  pay => pay-01
Span 42-43:  president => president
Span 17-18:  President => (have-org-role-91 :ARG2 president)
Span 23-24:  Republic => "Republic"
Span 33-34:  September => (date-entity :month 9)
Span 14-15:  this => this
Span 29-30:  visit => visit-01
Span 43-45:  Zemin Jiang => (person :name (name :op "Zemin" :op "Jiang"))

Langrangian relaxation converged after 62 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,45,List(3, 2, 1, 0),Zemin Jiang,(person :name (name :op "Zemin" :op "Jiang")),false), Span(42,43,List(4),president,president,false), Span(40,41,List(5),invitation,invite-01,false), Span(33,34,List(7, 6),September,(date-entity :month 9),false), Span(31,32,List(10, 9, 8),China,(country :name (name :op "China")),false), Span(29,30,List(11),visit,visit-01,false), Span(26,27,List(12),pay,pay-01,false), Span(23,24,List(13),Republic,"Republic",false), Span(22,23,List(16, 15, 14),Hungary,(country :name (name :op "Hungary")),false), Span(18,20,List(20, 19, 18, 17),Gentzs Aerpade,(person :name (name :op "Gentzs" :op "Aerpade")),false), Span(17,18,List(22, 21),President,(have-org-role-91 :ARG2 president),false), Span(15,16,List(23),afternoon,afternoon,false), Span(14,15,List(24),this,this,false), Span(13,14,List(25),held,hold-04,false), Span(12,13,List(26),conference,conference,false), Span(11,12,List(27),news,news,false), Span(8,9,List(28),announced,announce-01,false), Span(4,6,List(32, 31, 30, 29),foreign ministry,(government-organization :name (name :op "Ministry" :op "Foreign")),false), Span(0,2,List(36, 35, 34, 33),Guofang Shen,(person :name (name :op "Guofang" :op "Shen")),false)),Map(30 -> name, 2 -> "Zemin", 5 -> invite-01, 33 -> person, 27 -> news, 12 -> pay-01, 8 -> country, 15 -> name, 36 -> "Shen", 21 -> have-org-role-91, 18 -> name, 24 -> this, 35 -> "Guofang", 7 -> 9, 1 -> name, 17 -> person, 23 -> afternoon, 26 -> conference, 4 -> president, 11 -> visit-01, 32 -> "Foreign", 14 -> country, 29 -> government-organization, 20 -> "Aerpade", 34 -> name, 28 -> announce-01, 6 -> date-entity, 9 -> name, 0 -> person, 22 -> president, 16 -> "Hungary", 19 -> "Gentzs", 10 -> "China", 3 -> "Jiang", 31 -> "Ministry", 25 -> hold-04, 13 -> "Republic"),Map(n -> name, h -> have-org-role-91, p5 -> president, h2 -> hold-04, t -> this, n7 -> name, p2 -> president, n4 -> name, v -> visit-01, R -> "Republic", d -> date-entity, p -> person, g -> government-organization, n3 -> name, a -> afternoon, c3 -> conference, p4 -> person, n6 -> name, i -> invite-01, a2 -> announce-01, c -> country, p6 -> person, 9 -> 9, p3 -> pay-01, c2 -> country, n2 -> name, n5 -> news))),[Ljava.lang.String;@2b662a77,Annotation([Ljava.lang.String;@7f0eb4b4,[Ljava.lang.String;@5c33f1a9,[Ljava.lang.String;@1623b78d),Annotation([Ljava.lang.String;@c8c12ac,[Ljava.lang.String;@6adbc9d,[Ledu.cmu.lti.nlp.amr.Dependency;@4550bb58),Annotation([Ljava.lang.String;@4ec4f3a0,[Ljava.lang.String;@223191a6,[Ljava.lang.String;@49139829),Annotation([Ljava.lang.String;@9597028,[Ljava.lang.String;@6069db50,[Ledu.cmu.lti.nlp.amr.Entity;@4efbca5a))
AMR:
(R / "Republic", mod, c2 / country)
(a / afternoon, mod, t / this)
(a2 / announce-01, ARG0, p6 / person)
(a2 / announce-01, ARG1, c3 / conference)
(c / country, location, d / date-entity)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / conference, mod, n5 / news)
(d / date-entity, month, 9 / 9)
(g / government-organization, calendar, p6 / person)
(g / government-organization, name, n6 / name)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, p5 / president)
(h2 / hold-04, ARG6, p3 / pay-01)
(h2 / hold-04, time, a / afternoon)
(i / invite-01, ARG0, p / person)
(i / invite-01, ARG1, p6 / person)
(i / invite-01, ARG6, p2 / president)
(n / name, op, "Jiang")
(n / name, op, "Zemin")
(n2 / name, op, "China")
(n3 / name, op, "Hungary")
(n4 / name, op, "Aerpade")
(n4 / name, op, "Gentzs")
(n6 / name, op, "Foreign")
(n6 / name, op, "Ministry")
(n7 / name, op, "Guofang")
(n7 / name, op, "Shen")
(p / person, name, n / name)
(p3 / pay-01, ARG0, p4 / person)
(p3 / pay-01, ARG1, v / visit-01)
(p3 / pay-01, ARG2, c / country)
(p4 / person, name, n4 / name)
(p6 / person, name, n7 / name)
(v / visit-01, ARG0, p / person)

Decoded in 3,365,729 microseconds
Sentence: He also announced that Casymier Auye Muba , premier of the Gabon Republic , would pay a formal , friendly visit to China from September 6th to the 11th at the invitation of Peng Li , premier of the State Council .

NER Entity: (person :name (name :op "Auye" :op "Muba"))
NER Entity: (country :name (name :op "Gabon"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (organization :name (name :op "State" :op "Council"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 1-2:  also => also
Span 2-3:  announced => announce-01
Span 5-7:  Auye Muba => (person :name (name :op "Auye" :op "Muba"))
Span 22-23:  China => (country :name (name :op "China"))
Span 17-18:  formal => formal
Span 19-20:  friendly => friendly
Span 0-1:  He => he
Span 31-32:  invitation => invite-01
Span 15-16:  pay => pay-01
Span 33-35:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 36-37:  premier => premier
Span 8-9:  premier => premier
Span 12-13:  Republic => "Republic"
Span 24-25:  September => (date-entity :month 9)
Span 39-41:  State Council => (organization :name (name :op "State" :op "Council"))
Span 20-21:  visit => visit-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,41,List(3, 2, 1, 0),State Council,(organization :name (name :op "State" :op "Council")),false), Span(36,37,List(4),premier,premier,false), Span(33,35,List(8, 7, 6, 5),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(31,32,List(9),invitation,invite-01,false), Span(24,25,List(11, 10),September,(date-entity :month 9),false), Span(22,23,List(14, 13, 12),China,(country :name (name :op "China")),false), Span(20,21,List(15),visit,visit-01,false), Span(19,20,List(16),friendly,friendly,false), Span(17,18,List(17),formal,formal,false), Span(15,16,List(18),pay,pay-01,false), Span(12,13,List(19),Republic,"Republic",false), Span(8,9,List(20),premier,premier,false), Span(5,7,List(24, 23, 22, 21),Auye Muba,(person :name (name :op "Auye" :op "Muba")),false), Span(2,3,List(25),announced,announce-01,false), Span(1,2,List(26),also,also,false), Span(0,1,List(27),He,he,false)),Map(2 -> "State", 5 -> person, 27 -> he, 12 -> country, 8 -> "Li", 15 -> visit-01, 21 -> person, 18 -> pay-01, 24 -> "Muba", 7 -> "Peng", 1 -> name, 17 -> formal, 23 -> "Auye", 26 -> also, 4 -> premier, 11 -> 9, 14 -> "China", 20 -> premier, 6 -> name, 9 -> invite-01, 0 -> organization, 22 -> name, 16 -> friendly, 19 -> "Republic", 10 -> date-entity, 3 -> "Council", 25 -> announce-01, 13 -> name),Map(n -> name, h -> he, p5 -> person, p2 -> person, n4 -> name, v -> visit-01, R -> "Republic", d -> date-entity, p -> premier, a -> announce-01, n3 -> name, p4 -> premier, a2 -> also, i -> invite-01, c -> country, f2 -> formal, 9 -> 9, f -> friendly, o -> organization, p3 -> pay-01, n2 -> name))),[Ljava.lang.String;@1b7cc17c,Annotation([Ljava.lang.String;@59662a0b,[Ljava.lang.String;@77fbd92c,[Ljava.lang.String;@67c27493),Annotation([Ljava.lang.String;@1a482e36,[Ljava.lang.String;@72967906,[Ledu.cmu.lti.nlp.amr.Dependency;@5b8dfcc1),Annotation([Ljava.lang.String;@2f9f7dcf,[Ljava.lang.String;@747ddf94,[Ljava.lang.String;@35e2d654),Annotation([Ljava.lang.String;@1bd4fdd,[Ljava.lang.String;@55183b20,[Ledu.cmu.lti.nlp.amr.Entity;@4f83df68))
AMR:
(a / announce-01, ARG0, h / he)
(a / announce-01, ARG1, p3 / pay-01)
(a / announce-01, mod, a2 / also)
(c / country, location, d / date-entity)
(c / country, name, n3 / name)
(d / date-entity, month, 9 / 9)
(i / invite-01, ARG0, p2 / person)
(i / invite-01, ARG1, R / "Republic")
(n / name, op, "Council")
(n / name, op, "State")
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(n3 / name, op, "China")
(n4 / name, op, "Auye")
(n4 / name, op, "Muba")
(o / organization, name, n / name)
(p / premier, poss, o / organization)
(p2 / person, location, p / premier)
(p2 / person, name, n2 / name)
(p3 / pay-01, ARG0, p4 / premier)
(p3 / pay-01, ARG1, v / visit-01)
(p3 / pay-01, ARG2, p5 / person)
(p5 / person, name, n4 / name)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, ARG1, c / country)
(v / visit-01, location, f / friendly)
(v / visit-01, mod, f2 / formal)

Decoded in 1,135,753 microseconds
Sentence: At the invitation of Peng Li , premier of the State Council , premier and first vice-president of the Tanzania United Republic , John Malsela will pay an official visit to China from September 9th to the 13th .

NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (organization :name (name :op "State" :op "Council"))
NER Entity: (country :name (name :op "Tanzania"))
NER Entity: (person :name (name :op "John" :op "Malsela"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 14-15:  and => and
Span 33-34:  China => (country :name (name :op "China"))
Span 2-3:  invitation => invite-01
Span 30-31:  official => (have-org-role-91 :ARG2 official)
Span 28-29:  pay => pay-01
Span 4-6:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 13-14:  premier => premier
Span 7-8:  premier => premier
Span 18-19:  president => president
Span 23-25:  Republic , => (person :name (name :op "John" :op "Malsela"))
Span 35-36:  September => (date-entity :month 9)
Span 10-12:  State Council => (organization :name (name :op "State" :op "Council"))
Span 21-22:  Tanzania => (country :name (name :op "Tanzania"))
Span 16-17:  vice => vice
Span 31-32:  visit => visit-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(1, 0),September,(date-entity :month 9),false), Span(33,34,List(4, 3, 2),China,(country :name (name :op "China")),false), Span(31,32,List(5),visit,visit-01,false), Span(30,31,List(7, 6),official,(have-org-role-91 :ARG2 official),false), Span(28,29,List(8),pay,pay-01,false), Span(23,25,List(12, 11, 10, 9),Republic ,,(person :name (name :op "John" :op "Malsela")),false), Span(21,22,List(15, 14, 13),Tanzania,(country :name (name :op "Tanzania")),false), Span(18,19,List(16),president,president,false), Span(16,17,List(17),vice,vice,false), Span(14,15,List(18),and,and,false), Span(13,14,List(19),premier,premier,false), Span(10,12,List(23, 22, 21, 20),State Council,(organization :name (name :op "State" :op "Council")),false), Span(7,8,List(24),premier,premier,false), Span(4,6,List(28, 27, 26, 25),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(2,3,List(29),invitation,invite-01,false)),Map(2 -> country, 5 -> visit-01, 27 -> "Peng", 12 -> "Malsela", 8 -> pay-01, 15 -> "Tanzania", 21 -> name, 18 -> and, 24 -> premier, 7 -> official, 1 -> 9, 17 -> vice, 23 -> "Council", 26 -> name, 4 -> "China", 11 -> "John", 14 -> name, 29 -> invite-01, 20 -> organization, 28 -> "Li", 6 -> have-org-role-91, 9 -> person, 0 -> date-entity, 22 -> "State", 16 -> president, 19 -> premier, 10 -> name, 3 -> name, 25 -> person, 13 -> country),Map(v2 -> vice, n -> name, h -> have-org-role-91, p5 -> premier, p2 -> person, n4 -> name, v -> visit-01, d -> date-entity, p -> pay-01, a -> and, n3 -> name, p4 -> premier, o2 -> organization, i -> invite-01, c -> country, p6 -> person, 9 -> 9, o -> official, p3 -> president, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@6cf0e0ba,Annotation([Ljava.lang.String;@7d8995e,[Ljava.lang.String;@130d63be,[Ljava.lang.String;@42a48628),Annotation([Ljava.lang.String;@293a5bf6,[Ljava.lang.String;@6aeb35e6,[Ledu.cmu.lti.nlp.amr.Dependency;@1283bb96),Annotation([Ljava.lang.String;@74f0ea28,[Ljava.lang.String;@f6efaab,[Ljava.lang.String;@3c19aaa5),Annotation([Ljava.lang.String;@3349e9bb,[Ljava.lang.String;@409bf450,[Ledu.cmu.lti.nlp.amr.Entity;@38d8f54a))
AMR:
(a / and, location, c2 / country)
(a / and, op, p3 / president)
(a / and, op, p5 / premier)
(c / country, location, d / date-entity)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(d / date-entity, month, 9 / 9)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, o / official)
(i / invite-01, ARG0, p6 / person)
(i / invite-01, ARG1, p2 / person)
(n / name, op, "China")
(n2 / name, op, "John")
(n2 / name, op, "Malsela")
(n3 / name, op, "Tanzania")
(n4 / name, op, "Council")
(n4 / name, op, "State")
(n5 / name, op, "Li")
(n5 / name, op, "Peng")
(o2 / organization, location, p4 / premier)
(o2 / organization, name, n4 / name)
(p / pay-01, ARG0, a / and)
(p / pay-01, ARG1, v / visit-01)
(p2 / person, name, n2 / name)
(p3 / president, mod, v2 / vice)
(p6 / person, name, n5 / name)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, ARG1, c / country)
(v / visit-01, mod, o / official)

Decoded in 906,838 microseconds
Sentence: ( End )

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@49e53c76,Annotation([Ljava.lang.String;@351d00c0,[Ljava.lang.String;@2a3b5b47,[Ljava.lang.String;@55b699ef),Annotation([Ljava.lang.String;@35d019a3,[Ljava.lang.String;@689604d9,[Ledu.cmu.lti.nlp.amr.Dependency;@18078bef),Annotation([Ljava.lang.String;@799f10e1,[Ljava.lang.String;@4c371370,[Ljava.lang.String;@145f66e3),Annotation([Ljava.lang.String;@3023df74,[Ljava.lang.String;@313ac989,[Ledu.cmu.lti.nlp.amr.Entity;@4562e04d))
AMR:


Decoded in 3,094 microseconds
Sentence: Xinhua News Agency , Bishket , April 23rd , by reporters Menjun Ju and Xiaoguang Hu

NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Menjun" :op "Ju"))
NER Entity: (person :name (name :op "Xiaoguang" :op "Hu"))
Spans:
Span 13-14:  and => and
Span 6-7:  April => (date-entity :month 4)
Span 11-13:  Menjun Ju => (person :name (name :op "Menjun" :op "Ju"))
Span 10-11:  reporters => (person :ARG0-of report-01)
Span 14-16:  Xiaoguang Hu => (person :name (name :op "Xiaoguang" :op "Hu"))
Span 0-3:  Xinhua News Agency => (organization :name (name :op "Xinhua" :op "News" :op "Agency"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,16,List(3, 2, 1, 0),Xiaoguang Hu,(person :name (name :op "Xiaoguang" :op "Hu")),false), Span(13,14,List(4),and,and,false), Span(11,13,List(8, 7, 6, 5),Menjun Ju,(person :name (name :op "Menjun" :op "Ju")),false), Span(10,11,List(10, 9),reporters,(person :ARG0-of report-01),false), Span(6,7,List(12, 11),April,(date-entity :month 4),false), Span(0,3,List(17, 16, 15, 14, 13),Xinhua News Agency,(organization :name (name :op "Xinhua" :op "News" :op "Agency")),false)),Map(2 -> "Xiaoguang", 5 -> person, 12 -> 4, 15 -> "Xinhua", 8 -> "Ju", 7 -> "Menjun", 17 -> "Agency", 1 -> name, 4 -> and, 11 -> date-entity, 14 -> name, 6 -> name, 0 -> person, 9 -> person, 16 -> "News", 3 -> "Hu", 10 -> report-01, 13 -> organization),Map(n -> name, p2 -> person, d -> date-entity, p -> person, n3 -> name, 4 -> 4, a -> and, r -> report-01, o -> organization, p3 -> person, n2 -> name))),[Ljava.lang.String;@2a65fe7c,Annotation([Ljava.lang.String;@4135c3b,[Ljava.lang.String;@6302bbb1,[Ljava.lang.String;@31304f14),Annotation([Ljava.lang.String;@34a3d150,[Ljava.lang.String;@2a4fb17b,[Ledu.cmu.lti.nlp.amr.Dependency;@5c6648b0),Annotation([Ljava.lang.String;@6f1de4c7,[Ljava.lang.String;@459e9125,[Ljava.lang.String;@128d2484),Annotation([Ljava.lang.String;@7cc0cdad,[Ljava.lang.String;@7c7b252e,[Ledu.cmu.lti.nlp.amr.Entity;@4d5d943d))
AMR:
(a / and, op, o / organization)
(a / and, op, p / person)
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(d / date-entity, month, 4 / 4)
(n / name, op, "Hu")
(n / name, op, "Xiaoguang")
(n2 / name, op, "Ju")
(n2 / name, op, "Menjun")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(o / organization, name, n3 / name)
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(r / report-01, ARG0, p3 / person)
(r / report-01, ARG1, d / date-entity)

Decoded in 300,937 microseconds
Sentence: Principles of parties concerned from China and Kirghizia signed six documents here today .

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kirghizia"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 6-7:  and => and
Span 5-6:  China => (country :name (name :op "China"))
Span 3-4:  concerned => concern-01
Span 10-11:  documents => document
Span 11-12:  here => here
Span 2-3:  parties => party
Span 8-9:  signed => sign-02
Span 9-10:  six => 6
Span 12-13:  today => today

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),today,today,false), Span(11,12,List(1),here,here,false), Span(10,11,List(2),documents,document,false), Span(9,10,List(3),six,6,false), Span(8,9,List(4),signed,sign-02,false), Span(6,7,List(5),and,and,false), Span(5,6,List(8, 7, 6),China,(country :name (name :op "China")),false), Span(3,4,List(9),concerned,concern-01,false), Span(2,3,List(10),parties,party,false)),Map(2 -> document, 5 -> and, 8 -> "China", 7 -> name, 1 -> here, 4 -> sign-02, 6 -> country, 9 -> concern-01, 0 -> today, 10 -> party, 3 -> 6),Map(n -> name, h -> here, t -> today, s -> sign-02, d -> document, p -> party, a -> and, c -> country, 6 -> 6, c2 -> concern-01))),[Ljava.lang.String;@368f2016,Annotation([Ljava.lang.String;@4c583ecf,[Ljava.lang.String;@692f203f,[Ljava.lang.String;@48f2bd5b),Annotation([Ljava.lang.String;@7b2bbc3,[Ljava.lang.String;@a1153bc,[Ledu.cmu.lti.nlp.amr.Dependency;@1aafa419),Annotation([Ljava.lang.String;@47eaca72,[Ljava.lang.String;@55141def,[Ljava.lang.String;@55182842),Annotation([Ljava.lang.String;@3270d194,[Ljava.lang.String;@235834f2,[Ledu.cmu.lti.nlp.amr.Entity;@5656be13))
AMR:
(a / and, op, d / document)
(c / country, name, n / name)
(c2 / concern-01, ARG0, c / country)
(c2 / concern-01, ARG1, p / party)
(c2 / concern-01, ARG2, a / and)
(d / document, quant, 6 / 6)
(n / name, op, "China")
(s / sign-02, ARG0, a / and)
(s / sign-02, ARG1, t / today)
(t / today, calendar, h / here)

Decoded in 124,961 microseconds
Sentence: Premier Peng Li and Kirghizian President Akayev attended the signing ceremony .

NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (person :name (name :op "Akayev"))
Spans:
Span 3-4:  and => and
Span 7-8:  attended => attend-01
Span 10-11:  ceremony => ceremony
Span 1-3:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 0-1:  Premier => (have-org-role-91 :ARG2 premier)
Span 5-6:  President => (have-org-role-91 :ARG2 president)
Span 9-10:  signing => sign-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),ceremony,ceremony,false), Span(9,10,List(1),signing,sign-01,false), Span(7,8,List(2),attended,attend-01,false), Span(5,6,List(4, 3),President,(have-org-role-91 :ARG2 president),false), Span(3,4,List(5),and,and,false), Span(1,3,List(9, 8, 7, 6),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(0,1,List(11, 10),Premier,(have-org-role-91 :ARG2 premier),false)),Map(2 -> attend-01, 5 -> and, 8 -> "Peng", 7 -> name, 1 -> sign-01, 11 -> premier, 4 -> president, 6 -> person, 9 -> "Li", 0 -> ceremony, 10 -> have-org-role-91, 3 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, h2 -> have-org-role-91, p2 -> person, s -> sign-01, p -> president, a -> attend-01, a2 -> and, c -> ceremony, p3 -> premier))),[Ljava.lang.String;@4218d6a3,Annotation([Ljava.lang.String;@76505305,[Ljava.lang.String;@14cd1699,[Ljava.lang.String;@77888435),Annotation([Ljava.lang.String;@73a1e9a9,[Ljava.lang.String;@71d44a3,[Ledu.cmu.lti.nlp.amr.Dependency;@7b98f307),Annotation([Ljava.lang.String;@4802796d,[Ljava.lang.String;@34123d65,[Ljava.lang.String;@59474f18),Annotation([Ljava.lang.String;@65fb9ffc,[Ljava.lang.String;@3e694b3f,[Ledu.cmu.lti.nlp.amr.Entity;@1bb5a082))
AMR:
(a / attend-01, ARG0, a2 / and)
(a / attend-01, ARG1, c / ceremony)
(a2 / and, op, p2 / person)
(c / ceremony, mod, s / sign-01)
(h / have-org-role-91, ARG1, h2 / have-org-role-91)
(h / have-org-role-91, ARG2, p / president)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG2, p3 / premier)
(n / name, op, "Li")
(n / name, op, "Peng")
(p2 / person, name, n / name)

Decoded in 77,895 microseconds
Sentence: The six documents are : an agreement on Chinese providing a loan to the Kirghizia government , an agreement on forming a combined Economy and Trade Committee between the Sino - Kirghizian governments , an note exchange on the presenting of materials to Kirghizia by China , a cultural cooperation agreement between the two countries of China and Kirghizia , ratification letters on exchanging consular treaties between the two countries , an agreement on cooperating on the China Trade Promotion Council and the Kirghizian Chamber of Industry and Commerce .

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Kirghizia"))
NER Entity: (organization :name (name :op "Trade" :op "Committee"))
NER Entity: (country :name (name :op "Kirghizia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kirghizia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "Promotion" :op "Council"))
NER Entity: (organization :name (name :op "Kirghizian" :op "Chamber" :op "of" :op "Industry"))
NER Entity: (organization :name (name :op "Commerce"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 72-73:  agreement => agree-01
Span 50-51:  agreement => agree-01
Span 18-19:  agreement => agree-01
Span 6-7:  agreement => agree-01
Span 87-88:  and => and
Span 81-82:  and => and
Span 57-58:  and => and
Span 24-25:  and => and
Span 66-67:  between => between
Span 51-52:  between => between
Span 27-28:  between => between
Span 77-78:  China => (country :name (name :op "China"))
Span 56-57:  China => (country :name (name :op "China"))
Span 45-46:  China => (country :name (name :op "China"))
Span 8-9:  Chinese => (country :name (name :op "China"))
Span 74-75:  cooperating => cooperate-01
Span 49-50:  cooperation => cooperate-01
Span 69-70:  countries => country
Span 54-55:  countries => country
Span 48-49:  cultural => culture
Span 2-3:  documents => document
Span 23-24:  Economy => economy
Span 36-37:  exchange => exchange-01
Span 63-64:  exchanging => exchange-01
Span 15-16:  government => (government-organization :ARG0-of govern-01)
Span 32-33:  governments => (government-organization :ARG0-of govern-01)
Span 83-87:  Kirghizian Chamber of Industry => (organization :name (name :op "Kirghizian" :op "Chamber" :op "of" :op "Industry"))
Span 11-12:  loan => loan-01
Span 41-42:  materials => material
Span 35-36:  note => note-01
Span 79-81:  Promotion Council => (organization :name (name :op "Promotion" :op "Council"))
Span 9-10:  providing => provide-01
Span 1-2:  six => 6
Span 78-79:  Trade => trade
Span 25-27:  Trade Committee => (organization :name (name :op "Trade" :op "Committee"))
Span 65-66:  treaties => treaty
Span 68-69:  two => 2
Span 53-54:  two => 2

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(87,88,List(0),and,and,false), Span(83,87,List(6, 5, 4, 3, 2, 1),Kirghizian Chamber of Industry,(organization :name (name :op "Kirghizian" :op "Chamber" :op "of" :op "Industry")),false), Span(81,82,List(7),and,and,false), Span(79,81,List(11, 10, 9, 8),Promotion Council,(organization :name (name :op "Promotion" :op "Council")),false), Span(78,79,List(12),Trade,trade,false), Span(77,78,List(15, 14, 13),China,(country :name (name :op "China")),false), Span(74,75,List(16),cooperating,cooperate-01,false), Span(72,73,List(17),agreement,agree-01,false), Span(69,70,List(18),countries,country,false), Span(68,69,List(19),two,2,false), Span(66,67,List(20),between,between,false), Span(65,66,List(21),treaties,treaty,false), Span(63,64,List(22),exchanging,exchange-01,false), Span(57,58,List(23),and,and,false), Span(56,57,List(26, 25, 24),China,(country :name (name :op "China")),false), Span(54,55,List(27),countries,country,false), Span(53,54,List(28),two,2,false), Span(51,52,List(29),between,between,false), Span(50,51,List(30),agreement,agree-01,false), Span(49,50,List(31),cooperation,cooperate-01,false), Span(48,49,List(32),cultural,culture,false), Span(45,46,List(35, 34, 33),China,(country :name (name :op "China")),false), Span(41,42,List(36),materials,material,false), Span(36,37,List(37),exchange,exchange-01,false), Span(35,36,List(38),note,note-01,false), Span(32,33,List(40, 39),governments,(government-organization :ARG0-of govern-01),false), Span(27,28,List(41),between,between,false), Span(25,27,List(45, 44, 43, 42),Trade Committee,(organization :name (name :op "Trade" :op "Committee")),false), Span(24,25,List(46),and,and,false), Span(23,24,List(47),Economy,economy,false), Span(18,19,List(48),agreement,agree-01,false), Span(15,16,List(50, 49),government,(government-organization :ARG0-of govern-01),false), Span(11,12,List(51),loan,loan-01,false), Span(9,10,List(52),providing,provide-01,false), Span(8,9,List(55, 54, 53),Chinese,(country :name (name :op "China")),false), Span(6,7,List(56),agreement,agree-01,false), Span(2,3,List(57),documents,document,false), Span(1,2,List(58),six,6,false)),Map(57 -> document, 30 -> agree-01, 39 -> government-organization, 45 -> "Committee", 51 -> loan-01, 2 -> name, 5 -> "of", 48 -> agree-01, 33 -> country, 27 -> country, 54 -> name, 12 -> trade, 8 -> organization, 15 -> "China", 42 -> organization, 36 -> material, 21 -> treaty, 18 -> country, 24 -> country, 53 -> country, 35 -> "China", 41 -> between, 56 -> agree-01, 7 -> and, 17 -> agree-01, 1 -> organization, 50 -> govern-01, 44 -> "Trade", 23 -> and, 38 -> note-01, 47 -> economy, 4 -> "Chamber", 26 -> "China", 11 -> "Council", 32 -> culture, 14 -> name, 20 -> between, 29 -> between, 46 -> and, 52 -> provide-01, 34 -> name, 6 -> "Industry", 28 -> 2, 55 -> "China", 40 -> govern-01, 49 -> government-organization, 0 -> and, 9 -> name, 43 -> name, 22 -> exchange-01, 58 -> 6, 16 -> cooperate-01, 37 -> exchange-01, 19 -> 2, 3 -> "Kirghizian", 10 -> "Promotion", 25 -> name, 31 -> cooperate-01, 13 -> country),Map(a7 -> agree-01, e -> exchange-01, b3 -> between, n -> name, c8 -> country, g3 -> government-organization, 2 -> 2, t -> trade, b -> between, b2 -> between, o3 -> organization, n7 -> name, c7 -> culture, e2 -> exchange-01, a3 -> agree-01, c4 -> country, n4 -> name, a6 -> and, d -> document, m -> material, g2 -> govern-01, p -> provide-01, g -> government-organization, c3 -> country, n3 -> name, a -> and, n6 -> note-01, o2 -> organization, a5 -> agree-01, c6 -> cooperate-01, a8 -> agree-01, c9 -> country, t2 -> treaty, a2 -> and, 6 -> 6, c -> country, l -> loan-01, n8 -> name, 22 -> 2, o -> organization, e3 -> economy, g4 -> govern-01, c2 -> cooperate-01, n2 -> name, a4 -> and, n5 -> name, c5 -> country))),[Ljava.lang.String;@78691363,Annotation([Ljava.lang.String;@41d477ed,[Ljava.lang.String;@3590fc5b,[Ljava.lang.String;@397fbdb),Annotation([Ljava.lang.String;@33d512c1,[Ljava.lang.String;@515c6049,[Ledu.cmu.lti.nlp.amr.Dependency;@639c2c1d),Annotation([Ljava.lang.String;@5fe94a96,[Ljava.lang.String;@443118b0,[Ljava.lang.String;@765d7657),Annotation([Ljava.lang.String;@74235045,[Ljava.lang.String;@618b19ad,[Ledu.cmu.lti.nlp.amr.Entity;@2d3379b4))
AMR:
(a / and, op, o / organization)
(a2 / and, op, a5 / agree-01)
(a2 / and, op, c / country)
(a2 / and, op, o / organization)
(a3 / agree-01, ARG1, c2 / cooperate-01)
(a4 / and, op, c4 / country)
(a5 / agree-01, ARG1, c6 / cooperate-01)
(a5 / agree-01, location, b2 / between)
(a6 / and, op, e3 / economy)
(a6 / and, op, o3 / organization)
(a7 / agree-01, ARG0, a6 / and)
(a8 / agree-01, ARG1, d / document)
(a8 / agree-01, ARG2, c9 / country)
(b / between, op, c3 / country)
(b2 / between, op, c5 / country)
(c / country, name, n3 / name)
(c2 / cooperate-01, ARG0, a2 / and)
(c2 / cooperate-01, ARG1, o2 / organization)
(c3 / country, quant, 2 / 2)
(c4 / country, name, n4 / name)
(c5 / country, quant, 22 / 2)
(c6 / cooperate-01, ARG0, c7 / culture)
(c6 / cooperate-01, ARG1, c8 / country)
(c8 / country, name, n5 / name)
(c9 / country, name, n8 / name)
(d / document, quant, 6 / 6)
(e / exchange-01, ARG0, c8 / country)
(e / exchange-01, ARG1, t2 / treaty)
(e2 / exchange-01, ARG0, c4 / country)
(e2 / exchange-01, ARG1, n6 / note-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c5 / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c8 / country)
(l / loan-01, ARG1, m / material)
(l / loan-01, ARG2, g3 / government-organization)
(n / name, op, "Chamber")
(n / name, op, "Industry")
(n / name, op, "Kirghizian")
(n / name, op, "of")
(n2 / name, op, "Council")
(n2 / name, op, "Promotion")
(n3 / name, op, "China")
(n4 / name, op, "China")
(n5 / name, op, "China")
(n6 / note-01, ARG1, g / government-organization)
(n7 / name, op, "Committee")
(n7 / name, op, "Trade")
(n8 / name, op, "China")
(o / organization, name, n / name)
(o2 / organization, mod, t / trade)
(o2 / organization, name, n2 / name)
(o3 / organization, mod, b3 / between)
(o3 / organization, name, n7 / name)
(p / provide-01, ARG0, c9 / country)
(p / provide-01, ARG1, l / loan-01)
(p / provide-01, ARG6, a7 / agree-01)
(t2 / treaty, mod, b / between)

Decoded in 7,157,208 microseconds
Sentence: After the signing ceremony , Kirghizian President Akayev and Premier Peng Li respectively answered questions from reporters .

NER Entity: (person :name (name :op "Akayev"))
NER Entity: (person :name (name :op "Peng" :op "Li"))
Spans:
Span 0-1:  After => after
Span 8-9:  and => and
Span 13-14:  answered => answer-01
Span 3-4:  ceremony => ceremony
Span 10-12:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 9-10:  Premier => (have-org-role-91 :ARG2 premier)
Span 6-7:  President => (have-org-role-91 :ARG2 president)
Span 14-15:  questions => question
Span 16-17:  reporters => (person :ARG0-of report-01)
Span 12-13:  respectively => respective
Span 2-3:  signing => sign-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),reporters,(person :ARG0-of report-01),false), Span(14,15,List(2),questions,question,false), Span(13,14,List(3),answered,answer-01,false), Span(12,13,List(4),respectively,respective,false), Span(10,12,List(8, 7, 6, 5),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(9,10,List(10, 9),Premier,(have-org-role-91 :ARG2 premier),false), Span(8,9,List(11),and,and,false), Span(6,7,List(13, 12),President,(have-org-role-91 :ARG2 president),false), Span(3,4,List(14),ceremony,ceremony,false), Span(2,3,List(15),signing,sign-01,false), Span(0,1,List(16),After,after,false)),Map(2 -> question, 5 -> person, 12 -> have-org-role-91, 15 -> sign-01, 8 -> "Li", 7 -> "Peng", 1 -> report-01, 4 -> respective, 11 -> and, 14 -> ceremony, 6 -> name, 0 -> person, 9 -> have-org-role-91, 16 -> after, 3 -> answer-01, 10 -> premier, 13 -> president),Map(n -> name, h -> have-org-role-91, q -> question, h2 -> have-org-role-91, p2 -> person, a3 -> after, s -> sign-01, p -> person, r2 -> respective, a -> answer-01, p4 -> president, r -> report-01, a2 -> and, c -> ceremony, p3 -> premier))),[Ljava.lang.String;@6771beb3,Annotation([Ljava.lang.String;@51399530,[Ljava.lang.String;@6b2ea799,[Ljava.lang.String;@411f53a0),Annotation([Ljava.lang.String;@2b71e916,[Ljava.lang.String;@36fc695d,[Ledu.cmu.lti.nlp.amr.Dependency;@28701274),Annotation([Ljava.lang.String;@13c9d689,[Ljava.lang.String;@3754a4bf,[Ljava.lang.String;@62379589),Annotation([Ljava.lang.String;@4afcd809,[Ljava.lang.String;@175c2241,[Ledu.cmu.lti.nlp.amr.Entity;@5bf0d49))
AMR:
(a / answer-01, ARG0, a2 / and)
(a / answer-01, ARG1, q / question)
(a / answer-01, manner, r2 / respective)
(a / answer-01, time, a3 / after)
(a2 / and, op, p2 / person)
(a3 / after, op, c / ceremony)
(c / ceremony, mod, s / sign-01)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, p3 / premier)
(h2 / have-org-role-91, ARG1, a / answer-01)
(h2 / have-org-role-91, ARG2, p4 / president)
(n / name, op, "Li")
(n / name, op, "Peng")
(p2 / person, name, n / name)
(r / report-01, ARG0, p / person)
(r / report-01, ARG1, q / question)

Decoded in 258,128 microseconds
Sentence: Akayev highly commended the results of the conference with Peng Li

NER Entity: (person :name (name :op "Akayev"))
NER Entity: (person :name (name :op "Peng" :op "Li"))
Spans:
Span 7-8:  conference => conference
Span 1-2:  highly => high
Span 9-11:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 4-5:  results => result

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(7,8,List(4),conference,conference,false), Span(4,5,List(5),results,result,false), Span(1,2,List(6),highly,high,false)),Map(2 -> "Peng", 5 -> result, 1 -> name, 4 -> conference, 6 -> high, 0 -> person, 3 -> "Li"),Map(n -> name, h -> high, p -> person, r -> result, c -> conference))),[Ljava.lang.String;@5b7a5baa,Annotation([Ljava.lang.String;@776aec5c,[Ljava.lang.String;@1d296da,[Ljava.lang.String;@7c7a06ec),Annotation([Ljava.lang.String;@75d4a5c2,[Ljava.lang.String;@557caf28,[Ledu.cmu.lti.nlp.amr.Dependency;@408d971b),Annotation([Ljava.lang.String;@6c6cb480,[Ljava.lang.String;@3c46e67a,[Ljava.lang.String;@c730b35),Annotation([Ljava.lang.String;@206a70ef,[Ljava.lang.String;@292b08d6,[Ledu.cmu.lti.nlp.amr.Entity;@22555ebf))
AMR:
(c / conference, poss, p / person)
(n / name, op, "Li")
(n / name, op, "Peng")
(p / person, name, n / name)
(r / result, calendar, h / high)
(r / result, location, c / conference)

Decoded in 25,416 microseconds
Sentence: He expressed that , this visit by Premier Peng Li would promote the peace , security and stability of the Central Asian region .

NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (country :name (name :op "Central" :op "Asian"))
Spans:
Span 16-17:  and => and
Span 20-22:  Central Asian => (country :name (name :op "Central" :op "Asian"))
Span 1-2:  expressed => express-01
Span 0-1:  He => he
Span 13-14:  peace => peace
Span 8-10:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 7-8:  Premier => (have-org-role-91 :ARG2 premier)
Span 11-12:  promote => promote-02
Span 22-23:  region => region
Span 15-16:  security => security
Span 17-18:  stability => stability
Span 4-5:  this => this
Span 5-6:  visit => visit-01

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),region,region,false), Span(20,22,List(4, 3, 2, 1),Central Asian,(country :name (name :op "Central" :op "Asian")),false), Span(17,18,List(5),stability,stability,false), Span(16,17,List(6),and,and,false), Span(15,16,List(7),security,security,false), Span(13,14,List(8),peace,peace,false), Span(11,12,List(9),promote,promote-02,false), Span(8,10,List(13, 12, 11, 10),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(7,8,List(15, 14),Premier,(have-org-role-91 :ARG2 premier),false), Span(5,6,List(16),visit,visit-01,false), Span(4,5,List(17),this,this,false), Span(1,2,List(18),expressed,express-01,false), Span(0,1,List(19),He,he,false)),Map(2 -> name, 5 -> stability, 12 -> "Peng", 15 -> premier, 8 -> peace, 18 -> express-01, 7 -> security, 17 -> this, 1 -> country, 4 -> "Asian", 11 -> name, 14 -> have-org-role-91, 6 -> and, 0 -> region, 9 -> promote-02, 16 -> visit-01, 19 -> he, 3 -> "Central", 10 -> person, 13 -> "Li"),Map(e -> express-01, n -> name, h -> have-org-role-91, h2 -> he, s2 -> security, t -> this, p2 -> promote-02, s -> stability, v -> visit-01, p -> peace, a -> and, p4 -> premier, r -> region, c -> country, p3 -> person, n2 -> name))),[Ljava.lang.String;@36ebc363,Annotation([Ljava.lang.String;@45752059,[Ljava.lang.String;@34e9fd99,[Ljava.lang.String;@3c41ed1d),Annotation([Ljava.lang.String;@54d9d12d,[Ljava.lang.String;@38425407,[Ledu.cmu.lti.nlp.amr.Dependency;@43bc63a3),Annotation([Ljava.lang.String;@702657cc,[Ljava.lang.String;@6a6cb05c,[Ljava.lang.String;@40a4337a),Annotation([Ljava.lang.String;@6025e1b6,[Ljava.lang.String;@22ff4249,[Ledu.cmu.lti.nlp.amr.Entity;@2d1ef81a))
AMR:
(a / and, op, p / peace)
(a / and, op, s / stability)
(c / country, name, n / name)
(e / express-01, ARG0, h2 / he)
(e / express-01, ARG1, p2 / promote-02)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, s2 / security)
(h / have-org-role-91, ARG2, p4 / premier)
(n / name, op, "Asian")
(n / name, op, "Central")
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(p2 / promote-02, ARG0, v / visit-01)
(p2 / promote-02, ARG1, a / and)
(p2 / promote-02, location, r / region)
(p3 / person, name, n2 / name)
(r / region, mod, c / country)
(v / visit-01, ARG1, p3 / person)
(v / visit-01, mod, t / this)

Decoded in 1,221,294 microseconds
Sentence: He felt that , the recently signed documents were very important in enforcing good neighborhood relations and friendly cooperation between both countries .

Spans:
Span 16-17:  and => and
Span 19-20:  between => between
Span 20-21:  both => both
Span 18-19:  cooperation => cooperate-01
Span 21-22:  countries => country
Span 7-8:  documents => document
Span 1-2:  felt => feel-01
Span 17-18:  friendly => friendly
Span 13-14:  good => good-41
Span 0-1:  He => he
Span 10-11:  important => important
Span 5-6:  recently => recent
Span 15-16:  relations => relation
Span 6-7:  signed => sign-02
Span 9-10:  very => very

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),countries,country,false), Span(20,21,List(1),both,both,false), Span(19,20,List(2),between,between,false), Span(18,19,List(3),cooperation,cooperate-01,false), Span(17,18,List(4),friendly,friendly,false), Span(16,17,List(5),and,and,false), Span(15,16,List(6),relations,relation,false), Span(13,14,List(7),good,good-41,false), Span(10,11,List(8),important,important,false), Span(9,10,List(9),very,very,false), Span(7,8,List(10),documents,document,false), Span(6,7,List(11),signed,sign-02,false), Span(5,6,List(12),recently,recent,false), Span(1,2,List(13),felt,feel-01,false), Span(0,1,List(14),He,he,false)),Map(2 -> between, 5 -> and, 12 -> recent, 8 -> important, 7 -> good-41, 1 -> both, 4 -> friendly, 11 -> sign-02, 14 -> he, 6 -> relation, 0 -> country, 9 -> very, 3 -> cooperate-01, 10 -> document, 13 -> feel-01),Map(h -> he, b -> both, b2 -> between, s -> sign-02, v -> very, d -> document, g -> good-41, r2 -> recent, a -> and, r -> relation, i -> important, c -> country, f2 -> feel-01, f -> friendly, c2 -> cooperate-01))),[Ljava.lang.String;@4c402120,Annotation([Ljava.lang.String;@327514f,[Ljava.lang.String;@5b12b668,[Ljava.lang.String;@1165b38),Annotation([Ljava.lang.String;@4c12331b,[Ljava.lang.String;@7586beff,[Ledu.cmu.lti.nlp.amr.Dependency;@3b69e7d1),Annotation([Ljava.lang.String;@815b41f,[Ljava.lang.String;@5542c4ed,[Ljava.lang.String;@1573f9fc),Annotation([Ljava.lang.String;@6150c3ec,[Ljava.lang.String;@44c03695,[Ledu.cmu.lti.nlp.amr.Entity;@7e6f74c))
AMR:
(a / and, op, c2 / cooperate-01)
(a / and, op, r / relation)
(b2 / between, op, c / country)
(c / country, mod, b / both)
(c2 / cooperate-01, ARG0, c / country)
(c2 / cooperate-01, ARG2, f / friendly)
(f2 / feel-01, ARG0, h / he)
(f2 / feel-01, ARG1, i / important)
(g / good-41, ARG0, d / document)
(g / good-41, ARG1, r / relation)
(i / important, degree, v / very)
(i / important, domain, d / document)
(s / sign-02, ARG1, d / document)
(s / sign-02, time, r2 / recent)

Decoded in 427,930 microseconds
Sentence: Premier Peng Li said that , this visit had improved mutual friendship and understanding and set a good foundation for further cooperation between China and Kirghizia .

NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kirghizia"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 24-25:  and => and
Span 14-15:  and => and
Span 12-13:  and => and
Span 22-23:  between => between
Span 23-24:  China => (country :name (name :op "China"))
Span 21-22:  cooperation => cooperate-01
Span 18-19:  foundation => foundation
Span 11-12:  friendship => friendship
Span 20-21:  further => further
Span 17-18:  good => good-41
Span 9-10:  improved => improve-01
Span 10-11:  mutual => mutual
Span 1-3:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 0-1:  Premier => (have-org-role-91 :ARG2 premier)
Span 3-4:  said => say-01
Span 6-7:  this => this
Span 13-14:  understanding => understand-01
Span 7-8:  visit => visit-01

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),and,and,false), Span(23,24,List(3, 2, 1),China,(country :name (name :op "China")),false), Span(22,23,List(4),between,between,false), Span(21,22,List(5),cooperation,cooperate-01,false), Span(20,21,List(6),further,further,false), Span(18,19,List(7),foundation,foundation,false), Span(17,18,List(8),good,good-41,false), Span(14,15,List(9),and,and,false), Span(13,14,List(10),understanding,understand-01,false), Span(12,13,List(11),and,and,false), Span(11,12,List(12),friendship,friendship,false), Span(10,11,List(13),mutual,mutual,false), Span(9,10,List(14),improved,improve-01,false), Span(7,8,List(15),visit,visit-01,false), Span(6,7,List(16),this,this,false), Span(3,4,List(17),said,say-01,false), Span(1,3,List(21, 20, 19, 18),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(0,1,List(23, 22),Premier,(have-org-role-91 :ARG2 premier),false)),Map(2 -> name, 5 -> cooperate-01, 12 -> friendship, 15 -> visit-01, 8 -> good-41, 21 -> "Li", 18 -> person, 7 -> foundation, 17 -> say-01, 1 -> country, 23 -> premier, 4 -> between, 11 -> and, 14 -> improve-01, 20 -> "Peng", 6 -> further, 22 -> have-org-role-91, 0 -> and, 9 -> and, 16 -> this, 19 -> name, 3 -> "China", 10 -> understand-01, 13 -> mutual),Map(n -> name, h -> have-org-role-91, t -> this, b -> between, p2 -> premier, a3 -> and, s -> say-01, v -> visit-01, m -> mutual, p -> person, g -> good-41, a -> and, f3 -> friendship, i -> improve-01, a2 -> and, c -> country, f2 -> foundation, u -> understand-01, f -> further, n2 -> name, c2 -> cooperate-01))),[Ljava.lang.String;@dd05255,Annotation([Ljava.lang.String;@6a78afa0,[Ljava.lang.String;@2f4948e4,[Ljava.lang.String;@1f2586d6),Annotation([Ljava.lang.String;@10683d9d,[Ljava.lang.String;@3fc2959f,[Ledu.cmu.lti.nlp.amr.Dependency;@5aa9e4eb),Annotation([Ljava.lang.String;@6989da5e,[Ljava.lang.String;@385c9627,[Ljava.lang.String;@139982de),Annotation([Ljava.lang.String;@682b2fa,[Ljava.lang.String;@217ed35e,[Ledu.cmu.lti.nlp.amr.Entity;@7dcf94f8))
AMR:
(a2 / and, op, i / improve-01)
(a3 / and, op, u / understand-01)
(b / between, op, c / country)
(c / country, name, n / name)
(c2 / cooperate-01, ARG0, c / country)
(c2 / cooperate-01, ARG1, a / and)
(c2 / cooperate-01, mod, f / further)
(f2 / foundation, topic, c2 / cooperate-01)
(f3 / friendship, mod, m / mutual)
(g / good-41, ARG1, f2 / foundation)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / premier)
(i / improve-01, ARG0, v / visit-01)
(i / improve-01, ARG1, f3 / friendship)
(i / improve-01, ARG2, a3 / and)
(n / name, op, "China")
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(p / person, name, n2 / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a2 / and)
(v / visit-01, mod, t / this)

Decoded in 1,308,169 microseconds
Sentence: He expressed hopes that the Central Asian region would be stable and developed , and that the standard of living of the people would continuously improve .

NER Entity: (country :name (name :op "Central" :op "Asian"))
Spans:
Span 14-15:  and => and
Span 11-12:  and => and
Span 5-7:  Central Asian => (country :name (name :op "Central" :op "Asian"))
Span 24-25:  continuously => continue-01
Span 12-13:  developed => develop-02
Span 1-2:  expressed => express-01
Span 0-1:  He => he
Span 2-3:  hopes => hope-01
Span 25-26:  improve => improve-01
Span 19-20:  living => live-01
Span 22-23:  people => people
Span 7-8:  region => region
Span 10-11:  stable => stable
Span 17-18:  standard => standard

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),improve,improve-01,false), Span(24,25,List(1),continuously,continue-01,false), Span(22,23,List(2),people,people,false), Span(19,20,List(3),living,live-01,false), Span(17,18,List(4),standard,standard,false), Span(14,15,List(5),and,and,false), Span(12,13,List(6),developed,develop-02,false), Span(11,12,List(7),and,and,false), Span(10,11,List(8),stable,stable,false), Span(7,8,List(9),region,region,false), Span(5,7,List(13, 12, 11, 10),Central Asian,(country :name (name :op "Central" :op "Asian")),false), Span(2,3,List(14),hopes,hope-01,false), Span(1,2,List(15),expressed,express-01,false), Span(0,1,List(16),He,he,false)),Map(2 -> people, 5 -> and, 12 -> "Central", 15 -> express-01, 8 -> stable, 7 -> and, 1 -> continue-01, 4 -> standard, 11 -> name, 14 -> hope-01, 6 -> develop-02, 0 -> improve-01, 9 -> region, 16 -> he, 3 -> live-01, 10 -> country, 13 -> "Asian"),Map(e -> express-01, n -> name, h -> hope-01, h2 -> he, s2 -> stable, s -> standard, d -> develop-02, p -> people, a -> and, i -> improve-01, a2 -> and, r -> region, c -> continue-01, l -> live-01, c2 -> country))),[Ljava.lang.String;@229f66ed,Annotation([Ljava.lang.String;@31190526,[Ljava.lang.String;@662ac478,[Ljava.lang.String;@6743e411),Annotation([Ljava.lang.String;@3eb25e1a,[Ljava.lang.String;@477b4cdf,[Ledu.cmu.lti.nlp.amr.Dependency;@77c2494c),Annotation([Ljava.lang.String;@f5958c9,[Ljava.lang.String;@233795b6,[Ljava.lang.String;@3eb738bb),Annotation([Ljava.lang.String;@5bda8e08,[Ljava.lang.String;@1e800aaa,[Ledu.cmu.lti.nlp.amr.Entity;@185a6e9))
AMR:
(a / and, op, h / hope-01)
(a / and, op, i / improve-01)
(a2 / and, op, d / develop-02)
(c / continue-01, ARG1, i / improve-01)
(c2 / country, name, n / name)
(d / develop-02, ARG1, l / live-01)
(e / express-01, ARG0, h2 / he)
(e / express-01, ARG1, a / and)
(h / hope-01, ARG1, a2 / and)
(i / improve-01, ARG1, s / standard)
(l / live-01, ARG1, p / people)
(n / name, op, "Asian")
(n / name, op, "Central")
(r / region, mod, c2 / country)
(s2 / stable, domain, a / and)
(s2 / stable, domain, r / region)

Decoded in 554,434 microseconds
Sentence: Peng Li hoped that the Kirghizian news media would relay greetings from the Chinese people to the Kirghizian people .

NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (thing :name (name :op "Kirghizian"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Kirghizian"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 13-14:  Chinese => (country :name (name :op "China"))
Span 2-3:  hoped => hope-01
Span 7-8:  media => media
Span 6-7:  news => news
Span 0-2:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 18-19:  people => people
Span 14-15:  people => people

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),people,people,false), Span(14,15,List(1),people,people,false), Span(13,14,List(4, 3, 2),Chinese,(country :name (name :op "China")),false), Span(7,8,List(5),media,media,false), Span(6,7,List(6),news,news,false), Span(2,3,List(7),hoped,hope-01,false), Span(0,2,List(11, 10, 9, 8),Peng Li,(person :name (name :op "Peng" :op "Li")),false)),Map(2 -> country, 5 -> media, 8 -> person, 7 -> hope-01, 1 -> people, 11 -> "Li", 4 -> "China", 6 -> news, 9 -> name, 0 -> people, 10 -> "Peng", 3 -> name),Map(n -> name, h -> hope-01, p2 -> people, m -> media, p -> people, n3 -> name, c -> country, p3 -> person, n2 -> news))),[Ljava.lang.String;@6f03482,Annotation([Ljava.lang.String;@9d5509a,[Ljava.lang.String;@179ece50,[Ljava.lang.String;@3b0090a4),Annotation([Ljava.lang.String;@3cd3e762,[Ljava.lang.String;@1fa121e2,[Ledu.cmu.lti.nlp.amr.Dependency;@7eac9008),Annotation([Ljava.lang.String;@4116aac9,[Ljava.lang.String;@62ddbd7e,[Ljava.lang.String;@74e52ef6),Annotation([Ljava.lang.String;@6ed3ccb2,[Ljava.lang.String;@1a677343,[Ledu.cmu.lti.nlp.amr.Entity;@15de0b3c))
AMR:
(c / country, name, n / name)
(h / hope-01, ARG0, p3 / person)
(h / hope-01, ARG1, m / media)
(m / media, mod, n2 / news)
(n / name, op, "China")
(n3 / name, op, "Li")
(n3 / name, op, "Peng")
(p2 / people, destination, p / people)
(p2 / people, mod, c / country)
(p2 / people, poss, m / media)
(p3 / person, name, n3 / name)

Decoded in 155,394 microseconds
Sentence: ( End )

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@489115ef,Annotation([Ljava.lang.String;@3857f613,[Ljava.lang.String;@198b6731,[Ljava.lang.String;@7c6908d7),Annotation([Ljava.lang.String;@3c9754d8,[Ljava.lang.String;@3bf7ca37,[Ledu.cmu.lti.nlp.amr.Dependency;@79079097),Annotation([Ljava.lang.String;@4d1c00d0,[Ljava.lang.String;@4b2bac3f,[Ljava.lang.String;@4e08711f),Annotation([Ljava.lang.String;@bcec361,[Ljava.lang.String;@26794848,[Ledu.cmu.lti.nlp.amr.Entity;@302552ec))
AMR:


Decoded in 2,740 microseconds
Sentence: Xinhua News Agency , Tokyo , September 1st , by reporter Yiguo Yu

NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (country :name (name :op "Tokyo"))
NER Entity: (person :name (name :op "Yiguo" :op "Yu"))
NER Entity: (country :name (name :op "Tokyo"))
Spans:
Span 10-11:  reporter => (person :ARG0-of report-01)
Span 6-7:  September => (date-entity :month 9)
Span 4-5:  Tokyo => (city :name (name :op "Tokyo"))
Span 0-3:  Xinhua News Agency => (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
Span 11-13:  Yiguo Yu => (person :name (name :op "Yiguo" :op "Yu"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,13,List(3, 2, 1, 0),Yiguo Yu,(person :name (name :op "Yiguo" :op "Yu")),false), Span(10,11,List(5, 4),reporter,(person :ARG0-of report-01),false), Span(6,7,List(7, 6),September,(date-entity :month 9),false), Span(4,5,List(10, 9, 8),Tokyo,(city :name (name :op "Tokyo")),false), Span(0,3,List(15, 14, 13, 12, 11),Xinhua News Agency,(organization :name (name :op "Xinhua" :op "News" :op "Agency")),false)),Map(2 -> "Yiguo", 5 -> report-01, 12 -> name, 15 -> "Agency", 8 -> city, 7 -> 9, 1 -> name, 4 -> person, 11 -> organization, 14 -> "News", 6 -> date-entity, 0 -> person, 9 -> name, 3 -> "Yu", 10 -> "Tokyo", 13 -> "Xinhua"),Map(n -> name, p2 -> person, d -> date-entity, p -> person, n3 -> name, r -> report-01, c -> city, o -> organization, 9 -> 9, n2 -> name))),[Ljava.lang.String;@3d285d7e,Annotation([Ljava.lang.String;@40005471,[Ljava.lang.String;@2cd76f31,[Ljava.lang.String;@367ffa75),Annotation([Ljava.lang.String;@49438269,[Ljava.lang.String;@ba2f4ec,[Ledu.cmu.lti.nlp.amr.Dependency;@1c1bbc4e),Annotation([Ljava.lang.String;@55fe41ea,[Ljava.lang.String;@fbd1f6,[Ljava.lang.String;@1ce24091),Annotation([Ljava.lang.String;@5dda768f,[Ljava.lang.String;@7a8c8dcf,[Ledu.cmu.lti.nlp.amr.Entity;@24269709))
AMR:
(c / city, location, d / date-entity)
(c / city, name, n2 / name)
(d / date-entity, month, 9 / 9)
(n / name, op, "Yiguo")
(n / name, op, "Yu")
(n2 / name, op, "Tokyo")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(o / organization, name, n3 / name)
(o / organization, poss, p / person)
(o / organization, poss, p2 / person)
(p / person, name, n / name)
(r / report-01, ARG0, p2 / person)
(r / report-01, ARG1, c / city)

Decoded in 167,852 microseconds
Sentence: The Japanese delegation participating in the Sixth Far East and South Pacific Region Handicapped Sports Meet held a grand swearing in ceremony in Tokyo this afternoon .

NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (thing :name (name :op "Sixth" :op "Far" :op "East"))
NER Entity: (organization :name (name :op "South" :op "Pacific" :op "Region" :op "Handicapped" :op "Sports" :op "Meet"))
NER Entity: (country :name (name :op "Tokyo"))
NER Entity: (country :name (name :op "Tokyo"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 25-26:  afternoon => afternoon
Span 9-10:  and => and
Span 21-22:  ceremony => ceremony
Span 2-3:  delegation => delegation
Span 16-17:  held => hold-04
Span 1-2:  Japanese => (country :name (name :op "Japan"))
Span 3-4:  participating => participate-01
Span 6-9:  Sixth Far East => (thing :name (name :op "Sixth" :op "Far" :op "East"))
Span 10-16:  South Pacific Region Handicapped Sports Meet => (organization :name (name :op "South" :op "Pacific" :op "Region" :op "Handicapped" :op "Sports" :op "Meet"))
Span 24-25:  this => this
Span 23-24:  Tokyo => (city :name (name :op "Tokyo"))

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),afternoon,afternoon,false), Span(24,25,List(1),this,this,false), Span(23,24,List(4, 3, 2),Tokyo,(city :name (name :op "Tokyo")),false), Span(21,22,List(5),ceremony,ceremony,false), Span(16,17,List(6),held,hold-04,false), Span(10,16,List(14, 13, 12, 11, 10, 9, 8, 7),South Pacific Region Handicapped Sports Meet,(organization :name (name :op "South" :op "Pacific" :op "Region" :op "Handicapped" :op "Sports" :op "Meet")),false), Span(9,10,List(15),and,and,false), Span(6,9,List(20, 19, 18, 17, 16),Sixth Far East,(thing :name (name :op "Sixth" :op "Far" :op "East")),false), Span(3,4,List(21),participating,participate-01,false), Span(2,3,List(22),delegation,delegation,false), Span(1,2,List(25, 24, 23),Japanese,(country :name (name :op "Japan")),false)),Map(2 -> city, 5 -> ceremony, 12 -> "Handicapped", 8 -> name, 15 -> and, 21 -> participate-01, 18 -> "Sixth", 24 -> name, 7 -> organization, 1 -> this, 17 -> name, 23 -> country, 4 -> "Tokyo", 11 -> "Region", 14 -> "Meet", 20 -> "East", 6 -> hold-04, 9 -> "South", 0 -> afternoon, 22 -> delegation, 16 -> thing, 19 -> "Far", 10 -> "Pacific", 3 -> name, 25 -> "Japan", 13 -> "Sports"),Map(n -> name, h -> hold-04, t -> this, n4 -> name, d -> delegation, p -> participate-01, c3 -> country, a -> afternoon, n3 -> name, t2 -> thing, a2 -> and, c -> city, o -> organization, c2 -> ceremony, n2 -> name))),[Ljava.lang.String;@2aceadd4,Annotation([Ljava.lang.String;@24aed80c,[Ljava.lang.String;@3a52dba3,[Ljava.lang.String;@2a5c8d3f),Annotation([Ljava.lang.String;@752325ad,[Ljava.lang.String;@279fedbd,[Ledu.cmu.lti.nlp.amr.Dependency;@b3ca52e),Annotation([Ljava.lang.String;@45c7e403,[Ljava.lang.String;@2925bf5b,[Ljava.lang.String;@710f4dc7),Annotation([Ljava.lang.String;@1ff4931d,[Ljava.lang.String;@65e98b1c,[Ledu.cmu.lti.nlp.amr.Entity;@61322f9d))
AMR:
(a / afternoon, mod, t / this)
(a2 / and, op, o / organization)
(c / city, name, n / name)
(c2 / ceremony, location, c / city)
(c3 / country, name, n4 / name)
(d / delegation, mod, c3 / country)
(h / hold-04, ARG0, d / delegation)
(h / hold-04, ARG1, o / organization)
(h / hold-04, location, c2 / ceremony)
(n / name, op, "Tokyo")
(n2 / name, op, "Handicapped")
(n2 / name, op, "Meet")
(n2 / name, op, "Pacific")
(n2 / name, op, "Region")
(n2 / name, op, "South")
(n2 / name, op, "Sports")
(n3 / name, op, "East")
(n3 / name, op, "Far")
(n3 / name, op, "Sixth")
(n4 / name, op, "Japan")
(o / organization, name, n2 / name)
(p / participate-01, ARG0, d / delegation)
(p / participate-01, ARG1, t2 / thing)
(p / participate-01, ARG2, a / afternoon)
(t2 / thing, name, n3 / name)

Decoded in 919,997 microseconds
Sentence: A Japanese flag hung from the Chairman 's stage .

NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 6-7:  Chairman => (have-org-role-91 :ARG2 chairman)
Span 1-2:  Japanese => (country :name (name :op "Japan"))
Span 8-9:  stage => stage

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),stage,stage,false), Span(6,7,List(2, 1),Chairman,(have-org-role-91 :ARG2 chairman),false), Span(1,2,List(5, 4, 3),Japanese,(country :name (name :op "Japan")),false)),Map(2 -> chairman, 5 -> "Japan", 1 -> have-org-role-91, 4 -> name, 0 -> stage, 3 -> country),Map(n -> name, h -> have-org-role-91, s -> stage, c -> chairman, c2 -> country))),[Ljava.lang.String;@6ad82709,Annotation([Ljava.lang.String;@510f3d34,[Ljava.lang.String;@7817fd62,[Ljava.lang.String;@8297b3a),Annotation([Ljava.lang.String;@2362f559,[Ljava.lang.String;@b2c9a9c,[Ledu.cmu.lti.nlp.amr.Dependency;@4c178a76),Annotation([Ljava.lang.String;@fa4c865,[Ljava.lang.String;@3bd82cf5,[Ljava.lang.String;@544fa968),Annotation([Ljava.lang.String;@247bddad,[Ljava.lang.String;@d35dea7,[Ledu.cmu.lti.nlp.amr.Entity;@7770f470))
AMR:
(c2 / country, name, n / name)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, c / chairman)
(n / name, op, "Japan")
(s / stage, poss, h / have-org-role-91)

Decoded in 19,661 microseconds
Sentence: Sportsmen , coaches , doctors , nurses and officials of the delegation sat neatly below the stage .

Spans:
Span 7-8:  and => and
Span 11-12:  delegation => delegation
Span 4-5:  doctors => doctor
Span 6-7:  nurses => nurse
Span 8-9:  officials => (have-org-role-91 :ARG2 official)
Span 12-13:  sat => sit-02
Span 16-17:  stage => stage

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),stage,stage,false), Span(12,13,List(1),sat,sit-02,false), Span(11,12,List(2),delegation,delegation,false), Span(8,9,List(4, 3),officials,(have-org-role-91 :ARG2 official),false), Span(7,8,List(5),and,and,false), Span(6,7,List(6),nurses,nurse,false), Span(4,5,List(7),doctors,doctor,false)),Map(2 -> delegation, 5 -> and, 7 -> doctor, 1 -> sit-02, 4 -> official, 6 -> nurse, 0 -> stage, 3 -> have-org-role-91),Map(n -> nurse, h -> have-org-role-91, s2 -> sit-02, s -> stage, d -> delegation, a -> and, d2 -> doctor, o -> official))),[Ljava.lang.String;@5e5d171f,Annotation([Ljava.lang.String;@24313fcc,[Ljava.lang.String;@7d20d0b,[Ljava.lang.String;@77f1baf5),Annotation([Ljava.lang.String;@41a2befb,[Ljava.lang.String;@6c40365c,[Ledu.cmu.lti.nlp.amr.Dependency;@7bedc48a),Annotation([Ljava.lang.String;@131ef10,[Ljava.lang.String;@55b0dcab,[Ljava.lang.String;@38afe297),Annotation([Ljava.lang.String;@2df3b89c,[Ljava.lang.String;@23348b5d,[Ledu.cmu.lti.nlp.amr.Entity;@70325e14))
AMR:
(a / and, op, d2 / doctor)
(h / have-org-role-91, ARG1, s2 / sit-02)
(h / have-org-role-91, ARG2, o / official)
(s2 / sit-02, ARG0, d / delegation)
(s2 / sit-02, ARG1, a / and)
(s2 / sit-02, ARG2, s / stage)
(s2 / sit-02, ARG6, n / nurse)

Decoded in 210,897 microseconds
Sentence: An atmosphere of confidence and eagerness for progress filled the ceremony ground .

Spans:
Span 4-5:  and => and
Span 1-2:  atmosphere => atmosphere
Span 10-11:  ceremony => ceremony
Span 3-4:  confidence => confidence
Span 11-12:  ground => ground
Span 7-8:  progress => progress-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),ground,ground,false), Span(10,11,List(1),ceremony,ceremony,false), Span(7,8,List(2),progress,progress-01,false), Span(4,5,List(3),and,and,false), Span(3,4,List(4),confidence,confidence,false), Span(1,2,List(5),atmosphere,atmosphere,false)),Map(2 -> progress-01, 5 -> atmosphere, 1 -> ceremony, 4 -> confidence, 0 -> ground, 3 -> and),Map(p -> progress-01, g -> ground, a -> and, a2 -> atmosphere, c -> ceremony, c2 -> confidence))),[Ljava.lang.String;@37ceb1df,Annotation([Ljava.lang.String;@7c9d8e2,[Ljava.lang.String;@20d525,[Ljava.lang.String;@6200f9cb),Annotation([Ljava.lang.String;@2002fc1d,[Ljava.lang.String;@69453e37,[Ledu.cmu.lti.nlp.amr.Dependency;@6f4a47c7),Annotation([Ljava.lang.String;@ae13544,[Ljava.lang.String;@3d34d211,[Ljava.lang.String;@7dc0f706),Annotation([Ljava.lang.String;@4009e306,[Ljava.lang.String;@43c1b556,[Ledu.cmu.lti.nlp.amr.Entity;@587e5365))
AMR:
(a / and, op, c / ceremony)
(a / and, op, c2 / confidence)
(a2 / atmosphere, prep-against, a / and)
(c / ceremony, location, g / ground)
(p / progress-01, ARG1, g / ground)

Decoded in 28,523 microseconds
Sentence: Vice-minister of the Japanese State Welfare Ministry , Souyasen , delivered a " bolstering departure speech " to the delegation .

NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (organization :name (name :op "Welfare" :op "Ministry"))
NER Entity: (person :name (name :op "Souyasen"))
Spans:
Span 21-22:  delegation => delegation
Span 12-13:  delivered => deliver-01
Span 16-17:  departure => depart-01
Span 5-7:  Japanese State => (organization :name (name :op "Welfare" :op "Ministry"))
Span 2-3:  minister => (have-org-role-91 :ARG2 minister)
Span 17-18:  speech => speak-01
Span 0-1:  Vice => vice

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),delegation,delegation,false), Span(17,18,List(1),speech,speak-01,false), Span(16,17,List(2),departure,depart-01,false), Span(12,13,List(3),delivered,deliver-01,false), Span(5,7,List(7, 6, 5, 4),Japanese State,(organization :name (name :op "Welfare" :op "Ministry")),false), Span(2,3,List(9, 8),minister,(have-org-role-91 :ARG2 minister),false), Span(0,1,List(10),Vice,vice,false)),Map(2 -> depart-01, 5 -> name, 8 -> have-org-role-91, 7 -> "Ministry", 1 -> speak-01, 4 -> organization, 6 -> "Welfare", 9 -> minister, 0 -> delegation, 10 -> vice, 3 -> deliver-01),Map(n -> name, h -> have-org-role-91, d3 -> deliver-01, s -> speak-01, v -> vice, m -> minister, d -> delegation, d2 -> depart-01, o -> organization))),[Ljava.lang.String;@22fcf7ab,Annotation([Ljava.lang.String;@2de23121,[Ljava.lang.String;@63475ace,[Ljava.lang.String;@4988d8b8),Annotation([Ljava.lang.String;@c0c2f8d,[Ljava.lang.String;@305b7c14,[Ledu.cmu.lti.nlp.amr.Dependency;@6913c1fb),Annotation([Ljava.lang.String;@66d18979,[Ljava.lang.String;@bccb269,[Ljava.lang.String;@609cd4d8),Annotation([Ljava.lang.String;@17f7cd29,[Ljava.lang.String;@7d8704ef,[Ledu.cmu.lti.nlp.amr.Entity;@13b6aecc))
AMR:
(d2 / depart-01, ARG1, d3 / deliver-01)
(d3 / deliver-01, ARG0, v / vice)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, v / vice)
(n / name, op, "Ministry")
(n / name, op, "Welfare")
(o / organization, name, n / name)
(s / speak-01, ARG1, d2 / depart-01)
(s / speak-01, ARG2, d / delegation)

Decoded in 478,443 microseconds
Sentence: Souya said , the Far South Sports Meet was an international sports meet that attracts the world 's attention , and the scale of this sports meet to be held in Beijing is the largest to date .

NER Entity: (person :name (name :op "Souya"))
NER Entity: (organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet"))
NER Entity: (country :name (name :op "Beijing"))
NER Entity: (country :name (name :op "Beijing"))
Spans:
Span 20-21:  and => and
Span 18-19:  attention => attention
Span 31-32:  Beijing => (city :name (name :op "Beijing"))
Span 36-37:  date => date
Span 4-8:  Far South Sports Meet => (organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet"))
Span 29-30:  held => hold-04
Span 10-11:  international => international
Span 34-35:  largest => (large :degree most)
Span 26-27:  meet => meet-03
Span 12-13:  meet => meet-03
Span 1-2:  said => say-01
Span 22-23:  scale => scale
Span 24-25:  this => this
Span 16-17:  world => world

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),date,date,false), Span(34,35,List(2, 1),largest,(large :degree most),false), Span(31,32,List(5, 4, 3),Beijing,(city :name (name :op "Beijing")),false), Span(29,30,List(6),held,hold-04,false), Span(26,27,List(7),meet,meet-03,false), Span(24,25,List(8),this,this,false), Span(22,23,List(9),scale,scale,false), Span(20,21,List(10),and,and,false), Span(18,19,List(11),attention,attention,false), Span(16,17,List(12),world,world,false), Span(12,13,List(13),meet,meet-03,false), Span(10,11,List(14),international,international,false), Span(4,8,List(20, 19, 18, 17, 16, 15),Far South Sports Meet,(organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet")),false), Span(1,2,List(21),said,say-01,false)),Map(2 -> most, 5 -> "Beijing", 12 -> world, 15 -> organization, 8 -> this, 21 -> say-01, 18 -> "South", 7 -> meet-03, 17 -> "Far", 1 -> large, 4 -> name, 11 -> attention, 14 -> international, 20 -> "Meet", 6 -> hold-04, 0 -> date, 9 -> scale, 16 -> name, 19 -> "Sports", 3 -> city, 10 -> and, 13 -> meet-03),Map(m3 -> meet-03, n -> name, w -> world, h -> hold-04, s2 -> say-01, t -> this, m2 -> meet-03, s -> scale, d -> date, m -> most, a -> and, i -> international, a2 -> attention, c -> city, l -> large, o -> organization, n2 -> name))),[Ljava.lang.String;@158a8276,Annotation([Ljava.lang.String;@3c3d9b6b,[Ljava.lang.String;@79d8407f,[Ljava.lang.String;@5fbe4146),Annotation([Ljava.lang.String;@1e66f1f5,[Ljava.lang.String;@4e50c791,[Ledu.cmu.lti.nlp.amr.Dependency;@7530ad9c),Annotation([Ljava.lang.String;@58a9760d,[Ljava.lang.String;@71e9ddb4,[Ljava.lang.String;@394df057),Annotation([Ljava.lang.String;@4961f6af,[Ljava.lang.String;@5aebe890,[Ledu.cmu.lti.nlp.amr.Entity;@65d09a04))
AMR:
(a / and, op, a2 / attention)
(a / and, op, m2 / meet-03)
(a2 / attention, poss, w / world)
(c / city, name, n / name)
(d / date, calendar, l / large)
(h / hold-04, ARG1, l / large)
(h / hold-04, location, c / city)
(l / large, degree, m / most)
(m2 / meet-03, ARG0, s / scale)
(m2 / meet-03, ARG1, h / hold-04)
(m2 / meet-03, ARG6, t / this)
(m3 / meet-03, ARG1, a2 / attention)
(m3 / meet-03, ARG6, o / organization)
(n / name, op, "Beijing")
(n2 / name, op, "Far")
(n2 / name, op, "Meet")
(n2 / name, op, "South")
(n2 / name, op, "Sports")
(o / organization, name, n2 / name)
(s2 / say-01, ARG1, a / and)
(s2 / say-01, ARG6, i / international)

Decoded in 947,863 microseconds
Sentence: He hoped that all the athletes would " fully demonstrate the strength and skill that they cultivate daily , as the competitors representing Japan , they should carry out competition with athletes from various countries honestly " .

NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 3-4:  all => all
Span 12-13:  and => and
Span 31-32:  athletes => athlete
Span 5-6:  athletes => athlete
Span 27-28:  carry => carry-01
Span 29-30:  competition => compete-01
Span 21-22:  competitors => company
Span 34-35:  countries => country
Span 17-18:  daily => daily
Span 9-10:  demonstrate => demonstrate-01
Span 8-9:  fully => full
Span 0-1:  He => he
Span 1-2:  hoped => hope-01
Span 23-24:  Japan => (country :name (name :op "Japan"))
Span 28-29:  out => out
Span 22-23:  representing => represent-01
Span 26-27:  should => recommend-01
Span 13-14:  skill => skill-level
Span 11-12:  strength => strength
Span 25-26:  they => they
Span 15-16:  they => they
Span 33-34:  various => various

Langrangian relaxation converged after 84 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),countries,country,false), Span(33,34,List(1),various,various,false), Span(31,32,List(2),athletes,athlete,false), Span(29,30,List(3),competition,compete-01,false), Span(28,29,List(4),out,out,false), Span(27,28,List(5),carry,carry-01,false), Span(26,27,List(6),should,recommend-01,false), Span(25,26,List(7),they,they,false), Span(23,24,List(10, 9, 8),Japan,(country :name (name :op "Japan")),false), Span(22,23,List(11),representing,represent-01,false), Span(21,22,List(12),competitors,company,false), Span(17,18,List(13),daily,daily,false), Span(15,16,List(14),they,they,false), Span(13,14,List(15),skill,skill-level,false), Span(12,13,List(16),and,and,false), Span(11,12,List(17),strength,strength,false), Span(9,10,List(18),demonstrate,demonstrate-01,false), Span(8,9,List(19),fully,full,false), Span(5,6,List(20),athletes,athlete,false), Span(3,4,List(21),all,all,false), Span(1,2,List(22),hoped,hope-01,false), Span(0,1,List(23),He,he,false)),Map(2 -> athlete, 5 -> carry-01, 12 -> company, 15 -> skill-level, 8 -> country, 21 -> all, 18 -> demonstrate-01, 7 -> they, 17 -> strength, 1 -> various, 23 -> he, 4 -> out, 11 -> represent-01, 14 -> they, 20 -> athlete, 6 -> recommend-01, 22 -> hope-01, 0 -> country, 9 -> name, 16 -> and, 19 -> full, 3 -> compete-01, 10 -> "Japan", 13 -> daily),Map(n -> name, h -> hope-01, h2 -> he, s2 -> strength, t -> they, a3 -> athlete, c4 -> country, s -> skill-level, v -> various, d -> daily, r2 -> represent-01, a -> athlete, c3 -> carry-01, d2 -> demonstrate-01, t2 -> they, a2 -> and, r -> recommend-01, c -> country, f -> full, o -> out, c2 -> compete-01, a4 -> all, c5 -> company))),[Ljava.lang.String;@33c911a1,Annotation([Ljava.lang.String;@75db5df9,[Ljava.lang.String;@707194ba,[Ljava.lang.String;@1190200a),Annotation([Ljava.lang.String;@6a2f6f80,[Ljava.lang.String;@45b4c3a9,[Ledu.cmu.lti.nlp.amr.Dependency;@399c4be1),Annotation([Ljava.lang.String;@291caca8,[Ljava.lang.String;@385e9564,[Ljava.lang.String;@5b94b04d),Annotation([Ljava.lang.String;@8c3b9d,[Ljava.lang.String;@4c39bec8,[Ledu.cmu.lti.nlp.amr.Entity;@f79e))
AMR:
(a / athlete, location, c / country)
(a2 / and, op, h / hope-01)
(a2 / and, op, r / recommend-01)
(a2 / and, op, s / skill-level)
(a2 / and, op, s2 / strength)
(a3 / athlete, quant, a4 / all)
(c / country, mod, v / various)
(c2 / compete-01, ARG1, a / athlete)
(c3 / carry-01, ARG0, t / they)
(c3 / carry-01, ARG1, c2 / compete-01)
(c3 / carry-01, ARG6, c4 / country)
(c3 / carry-01, direction, o / out)
(c4 / country, name, n / name)
(d / daily, domain, t2 / they)
(d2 / demonstrate-01, ARG1, s2 / strength)
(d2 / demonstrate-01, ARG6, t2 / they)
(d2 / demonstrate-01, manner, f / full)
(h / hope-01, ARG0, h2 / he)
(h / hope-01, ARG1, a4 / all)
(n / name, op, "Japan")
(r / recommend-01, ARG1, c3 / carry-01)
(r2 / represent-01, ARG0, c5 / company)
(r2 / represent-01, ARG1, r / recommend-01)

Decoded in 2,846,337 microseconds
Sentence: Souya emphasized , the Japanese delegation must make use of this opportunity of participation in the Beijing Far South Sports Meet " to deepen friendship with athletes from various countries , and expand the scope of international friendliness . "

NER Entity: (person :name (name :op "Souya"))
NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (country :name (name :op "Beijing" :op "Far" :op "South" :op "Sports"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 31-32:  and => and
Span 26-27:  athletes => athlete
Span 16-20:  Beijing Far South Sports => (country :name (name :op "Beijing" :op "Far" :op "South" :op "Sports"))
Span 29-30:  countries => country
Span 23-24:  deepen => deepen-01
Span 5-6:  delegation => delegation
Span 32-33:  expand => expand-01
Span 24-25:  friendship => friendship
Span 36-37:  international => international
Span 4-5:  Japanese => (country :name (name :op "Japan"))
Span 7-8:  make => make-01
Span 11-12:  opportunity => opportunity
Span 13-14:  participation => participate-01
Span 10-11:  this => this
Span 8-9:  use => use-01
Span 28-29:  various => various

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),international,international,false), Span(32,33,List(1),expand,expand-01,false), Span(31,32,List(2),and,and,false), Span(29,30,List(3),countries,country,false), Span(28,29,List(4),various,various,false), Span(26,27,List(5),athletes,athlete,false), Span(24,25,List(6),friendship,friendship,false), Span(23,24,List(7),deepen,deepen-01,false), Span(16,20,List(13, 12, 11, 10, 9, 8),Beijing Far South Sports,(country :name (name :op "Beijing" :op "Far" :op "South" :op "Sports")),false), Span(13,14,List(14),participation,participate-01,false), Span(11,12,List(15),opportunity,opportunity,false), Span(10,11,List(16),this,this,false), Span(8,9,List(17),use,use-01,false), Span(7,8,List(18),make,make-01,false), Span(5,6,List(19),delegation,delegation,false), Span(4,5,List(22, 21, 20),Japanese,(country :name (name :op "Japan")),false)),Map(2 -> and, 5 -> athlete, 12 -> "South", 15 -> opportunity, 8 -> country, 21 -> name, 18 -> make-01, 7 -> deepen-01, 17 -> use-01, 1 -> expand-01, 4 -> various, 11 -> "Far", 14 -> participate-01, 20 -> country, 6 -> friendship, 22 -> "Japan", 0 -> international, 9 -> name, 16 -> this, 19 -> delegation, 3 -> country, 10 -> "Beijing", 13 -> "Sports"),Map(e -> expand-01, n -> name, t -> this, v -> various, m -> make-01, d -> deepen-01, p -> participate-01, c3 -> country, a -> and, d2 -> delegation, i -> international, a2 -> athlete, c -> country, u -> use-01, f -> friendship, o -> opportunity, n2 -> name, c2 -> country))),[Ljava.lang.String;@7ee8290b,Annotation([Ljava.lang.String;@1f59a598,[Ljava.lang.String;@1e178745,[Ljava.lang.String;@192c3f1e),Annotation([Ljava.lang.String;@26b3fd41,[Ljava.lang.String;@7494f96a,[Ledu.cmu.lti.nlp.amr.Dependency;@561b6512),Annotation([Ljava.lang.String;@2e377400,[Ljava.lang.String;@1757cd72,[Ljava.lang.String;@445b295b),Annotation([Ljava.lang.String;@49e5f737,[Ljava.lang.String;@5c671d7f,[Ledu.cmu.lti.nlp.amr.Entity;@757277dc))
AMR:
(a / and, op, c / country)
(a / and, op, d / deepen-01)
(a / and, op, e / expand-01)
(c / country, mod, v / various)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(d / deepen-01, ARG0, u / use-01)
(d / deepen-01, ARG1, f / friendship)
(d2 / delegation, mod, c3 / country)
(e / expand-01, ARG1, a2 / athlete)
(m / make-01, ARG0, d2 / delegation)
(m / make-01, ARG1, u / use-01)
(n / name, op, "Beijing")
(n / name, op, "Far")
(n / name, op, "South")
(n / name, op, "Sports")
(n2 / name, op, "Japan")
(o / opportunity, beneficiary, p / participate-01)
(o / opportunity, mod, t / this)
(p / participate-01, ARG0, c2 / country)
(p / participate-01, ARG1, i / international)
(u / use-01, ARG1, o / opportunity)

Decoded in 960,460 microseconds
Sentence: Souya handed over the delegation flag of the Japanese delegation to the head of the delegation and Director of the Tokyo Handicapped Integrated Sports Center , Banminyan .

NER Entity: (person :name (name :op "Souya"))
NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (country :name (name :op "Tokyo"))
NER Entity: (organization :name (name :op "Integrated" :op "Sports" :op "Center"))
NER Entity: (organization :name (name :op "Banminyan"))
NER Entity: (country :name (name :op "Tokyo"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 16-17:  and => and
Span 15-16:  delegation => delegation
Span 9-10:  delegation => delegation
Span 4-5:  delegation => delegation
Span 17-18:  Director => (have-org-role-91 :ARG2 director)
Span 1-2:  handed => hand-02
Span 12-13:  head => head-01
Span 22-25:  Integrated Sports Center => (organization :name (name :op "Integrated" :op "Sports" :op "Center"))
Span 8-9:  Japanese => (country :name (name :op "Japan"))
Span 2-3:  over => over
Span 20-21:  Tokyo => (city :name (name :op "Tokyo"))

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,25,List(4, 3, 2, 1, 0),Integrated Sports Center,(organization :name (name :op "Integrated" :op "Sports" :op "Center")),false), Span(20,21,List(7, 6, 5),Tokyo,(city :name (name :op "Tokyo")),false), Span(17,18,List(9, 8),Director,(have-org-role-91 :ARG2 director),false), Span(16,17,List(10),and,and,false), Span(15,16,List(11),delegation,delegation,false), Span(12,13,List(12),head,head-01,false), Span(9,10,List(13),delegation,delegation,false), Span(8,9,List(16, 15, 14),Japanese,(country :name (name :op "Japan")),false), Span(4,5,List(17),delegation,delegation,false), Span(2,3,List(18),over,over,false), Span(1,2,List(19),handed,hand-02,false)),Map(2 -> "Integrated", 5 -> city, 12 -> head-01, 15 -> name, 8 -> have-org-role-91, 18 -> over, 7 -> "Tokyo", 17 -> delegation, 1 -> name, 4 -> "Center", 11 -> delegation, 14 -> country, 6 -> name, 0 -> organization, 9 -> director, 16 -> "Japan", 19 -> hand-02, 3 -> "Sports", 10 -> and, 13 -> delegation),Map(n -> name, h -> have-org-role-91, h2 -> head-01, d3 -> delegation, d -> director, a -> and, n3 -> name, o2 -> over, d2 -> delegation, h3 -> hand-02, c -> city, d4 -> delegation, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@687e99d8,Annotation([Ljava.lang.String;@e4487af,[Ljava.lang.String;@6aaceffd,[Ljava.lang.String;@c86b9e3),Annotation([Ljava.lang.String;@10aa41f2,[Ljava.lang.String;@3af9c5b7,[Ledu.cmu.lti.nlp.amr.Dependency;@37271612),Annotation([Ljava.lang.String;@ed7f8b4,[Ljava.lang.String;@4c309d4d,[Ljava.lang.String;@38102d01),Annotation([Ljava.lang.String;@37883b97,[Ljava.lang.String;@6ab778a,[Ledu.cmu.lti.nlp.amr.Entity;@4e3958e7))
AMR:
(c / city, name, n2 / name)
(c2 / country, name, n3 / name)
(d3 / delegation, location, c / city)
(d3 / delegation, mod, c2 / country)
(d4 / delegation, location, h3 / hand-02)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, d / director)
(h2 / head-01, ARG0, h / have-org-role-91)
(h2 / head-01, ARG1, d2 / delegation)
(h3 / hand-02, ARG1, a / and)
(h3 / hand-02, ARG2, h2 / head-01)
(h3 / hand-02, ARG6, o2 / over)
(n / name, op, "Center")
(n / name, op, "Integrated")
(n / name, op, "Sports")
(n2 / name, op, "Tokyo")
(n3 / name, op, "Japan")
(o / organization, location, c / city)
(o / organization, name, n / name)

Decoded in 722,159 microseconds
Sentence: From this tight , orderly , warm and serious swearing in ceremony , this reporter felt that , the Japanese Handicapped Sports Team was a team that was well trained , disciplined and possessed fighting spirit .

NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 32-33:  and => and
Span 7-8:  and => and
Span 11-12:  ceremony => ceremony
Span 15-16:  felt => feel-01
Span 34-35:  fighting => fight-01
Span 0-1:  From => from
Span 19-20:  Japanese => (country :name (name :op "Japan"))
Span 33-34:  possessed => possess-01
Span 14-15:  reporter => (person :ARG0-of report-01)
Span 8-9:  serious => serious
Span 35-36:  spirit => spirit
Span 25-26:  team => team
Span 13-14:  this => this
Span 1-2:  this => this
Span 2-3:  tight => tight
Span 29-30:  trained => train-02
Span 28-29:  well => well

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),spirit,spirit,false), Span(34,35,List(1),fighting,fight-01,false), Span(33,34,List(2),possessed,possess-01,false), Span(32,33,List(3),and,and,false), Span(29,30,List(4),trained,train-02,false), Span(28,29,List(5),well,well,false), Span(25,26,List(6),team,team,false), Span(19,20,List(9, 8, 7),Japanese,(country :name (name :op "Japan")),false), Span(15,16,List(10),felt,feel-01,false), Span(14,15,List(12, 11),reporter,(person :ARG0-of report-01),false), Span(13,14,List(13),this,this,false), Span(11,12,List(14),ceremony,ceremony,false), Span(8,9,List(15),serious,serious,false), Span(7,8,List(16),and,and,false), Span(2,3,List(17),tight,tight,false), Span(1,2,List(18),this,this,false), Span(0,1,List(19),From,from,false)),Map(2 -> possess-01, 5 -> well, 12 -> report-01, 15 -> serious, 8 -> name, 18 -> this, 7 -> country, 17 -> tight, 1 -> fight-01, 4 -> train-02, 11 -> person, 14 -> ceremony, 6 -> team, 0 -> spirit, 9 -> "Japan", 16 -> and, 19 -> from, 3 -> and, 10 -> feel-01, 13 -> this),Map(w -> well, n -> name, t4 -> tight, s2 -> serious, t -> train-02, p2 -> person, s -> spirit, t3 -> this, p -> possess-01, a -> and, f3 -> from, t2 -> team, t5 -> this, a2 -> and, r -> report-01, c -> country, f2 -> feel-01, f -> fight-01, c2 -> ceremony))),[Ljava.lang.String;@77f80c04,Annotation([Ljava.lang.String;@1dac5ef,[Ljava.lang.String;@5c90e579,[Ljava.lang.String;@58ea606c),Annotation([Ljava.lang.String;@6f45df59,[Ljava.lang.String;@38e79ae3,[Ledu.cmu.lti.nlp.amr.Dependency;@63070bab),Annotation([Ljava.lang.String;@68e5eea7,[Ljava.lang.String;@291b4bf5,[Ljava.lang.String;@2d2ffcb7),Annotation([Ljava.lang.String;@762ef0ea,[Ljava.lang.String;@31f9b85e,[Ledu.cmu.lti.nlp.amr.Entity;@424e1977))
AMR:
(a / and, op, p / possess-01)
(a / and, op, t / train-02)
(a2 / and, op, c2 / ceremony)
(a2 / and, op, s2 / serious)
(c / country, name, n / name)
(f / fight-01, ARG1, s / spirit)
(f2 / feel-01, ARG0, p2 / person)
(f2 / feel-01, ARG1, t2 / team)
(f2 / feel-01, time, f3 / from)
(f3 / from, calendar, t5 / this)
(n / name, op, "Japan")
(p / possess-01, ARG0, c / country)
(p / possess-01, ARG1, s / spirit)
(r / report-01, ARG0, p2 / person)
(r / report-01, ARG1, a2 / and)
(r / report-01, mod, t3 / this)
(t / train-02, ARG0, t4 / tight)
(t / train-02, ARG1, t2 / team)
(t / train-02, mod, w / well)

Decoded in 899,294 microseconds
Sentence: The Japanese delegation will fly to Beijing on the 2nd .

NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (country :name (name :op "Beijing"))
NER Entity: (country :name (name :op "Beijing"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 6-7:  Beijing => (city :name (name :op "Beijing"))
Span 2-3:  delegation => delegation
Span 1-2:  Japanese => (country :name (name :op "Japan"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(2, 1, 0),Beijing,(city :name (name :op "Beijing")),false), Span(2,3,List(3),delegation,delegation,false), Span(1,2,List(6, 5, 4),Japanese,(country :name (name :op "Japan")),false)),Map(2 -> "Beijing", 5 -> name, 1 -> name, 4 -> country, 6 -> "Japan", 0 -> city, 3 -> delegation),Map(n -> name, d -> delegation, c -> city, n2 -> name, c2 -> country))),[Ljava.lang.String;@10d68fcd,Annotation([Ljava.lang.String;@117e949d,[Ljava.lang.String;@6db9f5a4,[Ljava.lang.String;@5f8edcc5),Annotation([Ljava.lang.String;@7b02881e,[Ljava.lang.String;@1ebd319f,[Ledu.cmu.lti.nlp.amr.Dependency;@3c0be339),Annotation([Ljava.lang.String;@15ca7889,[Ljava.lang.String;@7a675056,[Ljava.lang.String;@d21a74c),Annotation([Ljava.lang.String;@6e509ffa,[Ljava.lang.String;@2898ac89,[Ledu.cmu.lti.nlp.amr.Entity;@683dbc2c))
AMR:
(c / city, location, c2 / country)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(d / delegation, mod, c2 / country)
(n / name, op, "Beijing")
(n2 / name, op, "Japan")

Decoded in 24,283 microseconds
Sentence: After the closing ceremonies of the Sports Meet , they will continue to remain in Beijing for two days , to carry out interaction activities with relevant Chinese parties and visit and tour , and return to Japan on 13th .

NER Entity: (country :name (name :op "Beijing"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Beijing"))
Spans:
Span 24-25:  activities => activity
Span 0-1:  After => after
Span 34-35:  and => and
Span 31-32:  and => and
Span 29-30:  and => and
Span 15-16:  Beijing => (city :name (name :op "Beijing"))
Span 21-22:  carry => carry-01
Span 3-4:  ceremonies => ceremony
Span 27-28:  Chinese => (country :name (name :op "China"))
Span 2-3:  closing => close-01
Span 11-12:  continue => continue-01
Span 18-19:  days => (temporal-quantity :unit day)
Span 37-38:  Japan => (country :name (name :op "Japan"))
Span 22-23:  out => out
Span 28-29:  parties => party
Span 26-27:  relevant => relevance
Span 13-14:  remain => remain-01
Span 35-36:  return => return-01
Span 9-10:  they => they
Span 32-33:  tour => tour-01
Span 17-18:  two => 2
Span 30-31:  visit => visit-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(2, 1, 0),Japan,(country :name (name :op "Japan")),false), Span(35,36,List(3),return,return-01,false), Span(34,35,List(4),and,and,false), Span(32,33,List(5),tour,tour-01,false), Span(31,32,List(6),and,and,false), Span(30,31,List(7),visit,visit-01,false), Span(29,30,List(8),and,and,false), Span(28,29,List(9),parties,party,false), Span(27,28,List(12, 11, 10),Chinese,(country :name (name :op "China")),false), Span(26,27,List(13),relevant,relevance,false), Span(24,25,List(14),activities,activity,false), Span(22,23,List(15),out,out,false), Span(21,22,List(16),carry,carry-01,false), Span(18,19,List(18, 17),days,(temporal-quantity :unit day),false), Span(17,18,List(19),two,2,false), Span(15,16,List(22, 21, 20),Beijing,(city :name (name :op "Beijing")),false), Span(13,14,List(23),remain,remain-01,false), Span(11,12,List(24),continue,continue-01,false), Span(9,10,List(25),they,they,false), Span(3,4,List(26),ceremonies,ceremony,false), Span(2,3,List(27),closing,close-01,false), Span(0,1,List(28),After,after,false)),Map(2 -> "Japan", 5 -> tour-01, 27 -> close-01, 12 -> "China", 8 -> and, 15 -> out, 21 -> name, 18 -> day, 24 -> continue-01, 7 -> visit-01, 1 -> name, 17 -> temporal-quantity, 23 -> remain-01, 26 -> ceremony, 4 -> and, 11 -> name, 14 -> activity, 20 -> city, 28 -> after, 6 -> and, 9 -> party, 0 -> country, 22 -> "Beijing", 16 -> carry-01, 19 -> 2, 10 -> country, 3 -> return-01, 25 -> they, 13 -> relevance),Map(n -> name, r3 -> remain-01, 2 -> 2, t -> tour-01, c7 -> close-01, a3 -> and, c4 -> city, v -> visit-01, d -> day, t3 -> they, r2 -> relevance, p -> party, a -> and, c3 -> carry-01, n3 -> name, a5 -> after, c6 -> ceremony, t2 -> temporal-quantity, a2 -> and, r -> return-01, c -> country, o -> out, n2 -> name, c2 -> country, a4 -> activity, c5 -> continue-01))),[Ljava.lang.String;@68267da0,Annotation([Ljava.lang.String;@2638011,[Ljava.lang.String;@6ff29830,[Ljava.lang.String;@6a2b953e),Annotation([Ljava.lang.String;@313b2ea6,[Ljava.lang.String;@2f465398,[Ledu.cmu.lti.nlp.amr.Dependency;@548e6d58),Annotation([Ljava.lang.String;@623a8092,[Ljava.lang.String;@a1cdc6d,[Ljava.lang.String;@175b9425),Annotation([Ljava.lang.String;@3098cf3b,[Ljava.lang.String;@610f7aa,[Ledu.cmu.lti.nlp.amr.Entity;@6a03bcb1))
AMR:
(a / and, op, r / return-01)
(a2 / and, op, t / tour-01)
(a2 / and, op, v / visit-01)
(a3 / and, op, c3 / carry-01)
(a3 / and, op, r / return-01)
(a3 / and, op, v / visit-01)
(a5 / after, op, c6 / ceremony)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / carry-01, ARG0, p / party)
(c3 / carry-01, ARG1, a4 / activity)
(c3 / carry-01, direction, o / out)
(c4 / city, name, n3 / name)
(c5 / continue-01, ARG0, t3 / they)
(c5 / continue-01, ARG1, r3 / remain-01)
(c5 / continue-01, time, a5 / after)
(c7 / close-01, ARG1, c6 / ceremony)
(n / name, op, "Japan")
(n2 / name, op, "China")
(n3 / name, op, "Beijing")
(p / party, mod, c2 / country)
(p / party, mod, r2 / relevance)
(r / return-01, ARG1, t2 / temporal-quantity)
(r / return-01, ARG4, c / country)
(r3 / remain-01, ARG1, a / and)
(t2 / temporal-quantity, quant, 2 / 2)
(t2 / temporal-quantity, unit, d / day)
(v / visit-01, ARG1, c4 / city)

Decoded in 1,228,139 microseconds
Sentence: ( End )

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@21b2e768,Annotation([Ljava.lang.String;@57250572,[Ljava.lang.String;@5609159b,[Ljava.lang.String;@2118cddf),Annotation([Ljava.lang.String;@17a7f733,[Ljava.lang.String;@68567e20,[Ledu.cmu.lti.nlp.amr.Dependency;@76ed1b7c),Annotation([Ljava.lang.String;@11fc564b,[Ljava.lang.String;@394a2528,[Ljava.lang.String;@6236eb5f),Annotation([Ljava.lang.String;@7c1e2a9e,[Ljava.lang.String;@fa36558,[Ledu.cmu.lti.nlp.amr.Entity;@672872e1))
AMR:


Decoded in 2,762 microseconds
Sentence: In the script " Mongolian handicapped athletes prepare for the Far South Sports Meet " broadcast today , the " Sports Association Chairman Lahagewasu " at the end of paragraph three should be changed to " Sports Association Chairman Lahagewasulen " .

NER Entity: (thing :name (name :op "Mongolian"))
NER Entity: (organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet"))
NER Entity: (organization :name (name :op "Sports" :op "Association"))
NER Entity: (thing :name (name :op "Lahagewasu"))
NER Entity: (organization :name (name :op "Sports" :op "Association"))
NER Entity: (thing :name (name :op "Lahagewasulen"))
Spans:
Span 6-7:  athletes => athlete
Span 15-16:  broadcast => broadcast-01
Span 38-39:  Chairman => (have-org-role-91 :ARG2 chairman)
Span 22-23:  Chairman => (have-org-role-91 :ARG2 chairman)
Span 33-34:  changed => change-01
Span 27-28:  end => end-01
Span 10-14:  Far South Sports Meet => (organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet"))
Span 31-32:  should => recommend-01
Span 36-38:  Sports Association => (organization :name (name :op "Sports" :op "Association"))
Span 20-22:  Sports Association => (organization :name (name :op "Sports" :op "Association"))
Span 30-31:  three => 3
Span 16-17:  today => today

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(1, 0),Chairman,(have-org-role-91 :ARG2 chairman),false), Span(36,38,List(5, 4, 3, 2),Sports Association,(organization :name (name :op "Sports" :op "Association")),false), Span(33,34,List(6),changed,change-01,false), Span(31,32,List(7),should,recommend-01,false), Span(30,31,List(8),three,3,false), Span(27,28,List(9),end,end-01,false), Span(22,23,List(11, 10),Chairman,(have-org-role-91 :ARG2 chairman),false), Span(20,22,List(15, 14, 13, 12),Sports Association,(organization :name (name :op "Sports" :op "Association")),false), Span(16,17,List(16),today,today,false), Span(15,16,List(17),broadcast,broadcast-01,false), Span(10,14,List(23, 22, 21, 20, 19, 18),Far South Sports Meet,(organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet")),false), Span(6,7,List(24),athletes,athlete,false)),Map(2 -> organization, 5 -> "Association", 12 -> organization, 8 -> 3, 15 -> "Association", 21 -> "South", 18 -> organization, 24 -> athlete, 7 -> recommend-01, 1 -> chairman, 17 -> broadcast-01, 23 -> "Meet", 4 -> "Sports", 11 -> chairman, 14 -> "Sports", 20 -> "Far", 6 -> change-01, 9 -> end-01, 0 -> have-org-role-91, 22 -> "Sports", 16 -> today, 19 -> name, 10 -> have-org-role-91, 3 -> name, 13 -> name),Map(e -> end-01, n -> name, h -> have-org-role-91, h2 -> have-org-role-91, b -> broadcast-01, t -> today, o3 -> organization, a -> athlete, n3 -> name, c3 -> chairman, o2 -> organization, r -> recommend-01, c -> chairman, o -> organization, 3 -> 3, c2 -> change-01, n2 -> name))),[Ljava.lang.String;@32910148,Annotation([Ljava.lang.String;@3f56875e,[Ljava.lang.String;@2b4bac49,[Ljava.lang.String;@fd07cbb),Annotation([Ljava.lang.String;@3571b748,[Ljava.lang.String;@3e96bacf,[Ledu.cmu.lti.nlp.amr.Dependency;@484970b0),Annotation([Ljava.lang.String;@4470f8a6,[Ljava.lang.String;@7c83dc97,[Ljava.lang.String;@7748410a),Annotation([Ljava.lang.String;@740773a3,[Ljava.lang.String;@37f1104d,[Ledu.cmu.lti.nlp.amr.Entity;@55740540))
AMR:
(b / broadcast-01, ARG0, a / athlete)
(b / broadcast-01, ARG1, t / today)
(b / broadcast-01, ARG6, o3 / organization)
(c2 / change-01, ARG0, a / athlete)
(e / end-01, ARG1, a / athlete)
(h / have-org-role-91, ARG0, t / today)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, c / chairman)
(h2 / have-org-role-91, ARG0, t / today)
(h2 / have-org-role-91, ARG1, o2 / organization)
(h2 / have-org-role-91, ARG2, c3 / chairman)
(n / name, op, "Association")
(n / name, op, "Sports")
(n2 / name, op, "Association")
(n2 / name, op, "Sports")
(n3 / name, op, "Far")
(n3 / name, op, "Meet")
(n3 / name, op, "South")
(n3 / name, op, "Sports")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(o3 / organization, name, n3 / name)
(r / recommend-01, ARG1, c2 / change-01)
(r / recommend-01, ARG6, 3 / 3)

Decoded in 1,428,748 microseconds
Sentence: Xinhua News Agency , August 31st .

NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
Spans:
Span 4-5:  August => (date-entity :month 8)
Span 0-3:  Xinhua News Agency => (organization :name (name :op "Xinhua" :op "News" :op "Agency"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(1, 0),August,(date-entity :month 8),false), Span(0,3,List(6, 5, 4, 3, 2),Xinhua News Agency,(organization :name (name :op "Xinhua" :op "News" :op "Agency")),false)),Map(2 -> organization, 5 -> "News", 1 -> 8, 4 -> "Xinhua", 6 -> "Agency", 0 -> date-entity, 3 -> name),Map(n -> name, 8 -> 8, d -> date-entity, o -> organization))),[Ljava.lang.String;@60015ef5,Annotation([Ljava.lang.String;@2f54a33d,[Ljava.lang.String;@1018bde2,[Ljava.lang.String;@65b3f4a4),Annotation([Ljava.lang.String;@f2ff811,[Ljava.lang.String;@568ff82,[Ledu.cmu.lti.nlp.amr.Dependency;@50caa560),Annotation([Ljava.lang.String;@2a266d09,[Ljava.lang.String;@5ab9e72c,[Ljava.lang.String;@186f8716),Annotation([Ljava.lang.String;@1d8bd0de,[Ljava.lang.String;@45ca843,[Ledu.cmu.lti.nlp.amr.Entity;@11c9af63))
AMR:
(d / date-entity, month, 8 / 8)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(o / organization, calendar, d / date-entity)
(o / organization, name, n / name)

Decoded in 13,665 microseconds
Sentence: Xinhua News Agency , Seoul , August 31st , by reporter Shuifu Tang

NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (country :name (name :op "Seoul"))
NER Entity: (person :name (name :op "Shuifu" :op "Tang"))
NER Entity: (country :name (name :op "Seoul"))
Spans:
Span 6-7:  August => (date-entity :month 8)
Span 10-11:  reporter => (person :ARG0-of report-01)
Span 4-5:  Seoul => (city :name (name :op "Seoul"))
Span 11-13:  Shuifu Tang => (person :name (name :op "Shuifu" :op "Tang"))
Span 0-3:  Xinhua News Agency => (organization :name (name :op "Xinhua" :op "News" :op "Agency"))

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,13,List(3, 2, 1, 0),Shuifu Tang,(person :name (name :op "Shuifu" :op "Tang")),false), Span(10,11,List(5, 4),reporter,(person :ARG0-of report-01),false), Span(6,7,List(7, 6),August,(date-entity :month 8),false), Span(4,5,List(10, 9, 8),Seoul,(city :name (name :op "Seoul")),false), Span(0,3,List(15, 14, 13, 12, 11),Xinhua News Agency,(organization :name (name :op "Xinhua" :op "News" :op "Agency")),false)),Map(2 -> "Shuifu", 5 -> report-01, 12 -> name, 15 -> "Agency", 8 -> city, 7 -> 8, 1 -> name, 4 -> person, 11 -> organization, 14 -> "News", 6 -> date-entity, 0 -> person, 9 -> name, 3 -> "Tang", 10 -> "Seoul", 13 -> "Xinhua"),Map(n -> name, 8 -> 8, p2 -> person, d -> date-entity, p -> person, n3 -> name, r -> report-01, c -> city, o -> organization, n2 -> name))),[Ljava.lang.String;@757acd7b,Annotation([Ljava.lang.String;@36b4fe2a,[Ljava.lang.String;@574b560f,[Ljava.lang.String;@ba54932),Annotation([Ljava.lang.String;@28975c28,[Ljava.lang.String;@3943a2be,[Ledu.cmu.lti.nlp.amr.Dependency;@343570b7),Annotation([Ljava.lang.String;@157853da,[Ljava.lang.String;@71c3b41,[Ljava.lang.String;@236e3f4e),Annotation([Ljava.lang.String;@3cc1435c,[Ljava.lang.String;@6bf0219d,[Ledu.cmu.lti.nlp.amr.Entity;@dd0c991))
AMR:
(c / city, calendar, d / date-entity)
(c / city, name, n2 / name)
(d / date-entity, month, 8 / 8)
(n / name, op, "Shuifu")
(n / name, op, "Tang")
(n2 / name, op, "Seoul")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(o / organization, name, n3 / name)
(o / organization, poss, p / person)
(o / organization, poss, p2 / person)
(p / person, name, n / name)
(r / report-01, ARG0, p2 / person)
(r / report-01, ARG1, c / city)

Decoded in 181,113 microseconds
Sentence: The first " Le Tian Cup " China and Korea Go competition started today at Fushan , the second largest city of Korea .

NER Entity: (person :name (name :op "Le"))
NER Entity: (thing :name (name :op "Tian" :op "Cup"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Korea"))
NER Entity: (country :name (name :op "Fushan"))
NER Entity: (country :name (name :op "Korea"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 8-9:  and => and
Span 7-8:  China => (country :name (name :op "China"))
Span 20-21:  city => city
Span 11-12:  competition => compete-01
Span 19-20:  largest => (large :degree most)
Span 12-13:  started => start-01
Span 4-6:  Tian Cup => (thing :name (name :op "Tian" :op "Cup"))
Span 13-14:  today => today

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),city,city,false), Span(19,20,List(2, 1),largest,(large :degree most),false), Span(13,14,List(3),today,today,false), Span(12,13,List(4),started,start-01,false), Span(11,12,List(5),competition,compete-01,false), Span(8,9,List(6),and,and,false), Span(7,8,List(9, 8, 7),China,(country :name (name :op "China")),false), Span(4,6,List(13, 12, 11, 10),Tian Cup,(thing :name (name :op "Tian" :op "Cup")),false)),Map(2 -> most, 5 -> compete-01, 12 -> "Tian", 8 -> name, 7 -> country, 1 -> large, 4 -> start-01, 11 -> name, 6 -> and, 0 -> city, 9 -> "China", 3 -> today, 10 -> thing, 13 -> "Cup"),Map(n -> name, t -> today, s -> start-01, m -> most, c3 -> country, a -> and, t2 -> thing, l -> large, c -> city, n2 -> name, c2 -> compete-01))),[Ljava.lang.String;@5f16132a,Annotation([Ljava.lang.String;@69fb6037,[Ljava.lang.String;@36d585c,[Ljava.lang.String;@87a85e1),Annotation([Ljava.lang.String;@671a5887,[Ljava.lang.String;@5552768b,[Ledu.cmu.lti.nlp.amr.Dependency;@3c947bc5),Annotation([Ljava.lang.String;@609db43b,[Ljava.lang.String;@55f616cf,[Ljava.lang.String;@1356d4d4),Annotation([Ljava.lang.String;@c03cf28,[Ljava.lang.String;@1329eff,[Ledu.cmu.lti.nlp.amr.Entity;@6497b078))
AMR:
(a / and, op, c3 / country)
(c / city, mod, l / large)
(c2 / compete-01, ARG1, a / and)
(c3 / country, mod, t2 / thing)
(c3 / country, name, n / name)
(l / large, degree, m / most)
(n / name, op, "China")
(n2 / name, op, "Cup")
(n2 / name, op, "Tian")
(s / start-01, ARG0, a / and)
(s / start-01, ARG1, c / city)
(s / start-01, time, t / today)
(t2 / thing, name, n2 / name)

Decoded in 417,847 microseconds
Sentence: In the first round of competition , the Chinese team defeated the relatively stronger Korean team with a score of 4 : 3 .

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 22-23:  3 => 3
Span 20-21:  4 => 4
Span 8-9:  Chinese => (country :name (name :op "China"))
Span 5-6:  competition => compete-01
Span 3-4:  round => round
Span 13-14:  stronger => strong
Span 15-16:  team => team
Span 9-10:  team => team

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),3,3,false), Span(20,21,List(1),4,4,false), Span(15,16,List(2),team,team,false), Span(13,14,List(3),stronger,strong,false), Span(9,10,List(4),team,team,false), Span(8,9,List(7, 6, 5),Chinese,(country :name (name :op "China")),false), Span(5,6,List(8),competition,compete-01,false), Span(3,4,List(9),round,round,false)),Map(2 -> team, 5 -> country, 8 -> compete-01, 7 -> "China", 1 -> 4, 4 -> team, 6 -> name, 9 -> round, 0 -> 3, 3 -> strong),Map(n -> name, t -> team, s -> strong, 4 -> 4, t2 -> team, r -> round, c -> country, c2 -> compete-01, 3 -> 3))),[Ljava.lang.String;@41c2284a,Annotation([Ljava.lang.String;@53aad5d5,[Ljava.lang.String;@46fa7c39,[Ljava.lang.String;@1fb700ee),Annotation([Ljava.lang.String;@4f67eb2a,[Ljava.lang.String;@4a668b6e,[Ledu.cmu.lti.nlp.amr.Dependency;@5f683daf),Annotation([Ljava.lang.String;@78ffe6dc,[Ljava.lang.String;@8317c52,[Ljava.lang.String;@76f2bbc1),Annotation([Ljava.lang.String;@68e965f5,[Ljava.lang.String;@6f27a732,[Ledu.cmu.lti.nlp.amr.Entity;@6c779568))
AMR:
(c / country, name, n / name)
(c2 / compete-01, ARG0, 3 / 3)
(c2 / compete-01, ARG1, 4 / 4)
(n / name, op, "China")
(r / round, mod, c2 / compete-01)
(t / team, location, r / round)
(t / team, mod, s / strong)
(t / team, poss, t2 / team)
(t2 / team, mod, c / country)

Decoded in 136,521 microseconds
Sentence: In the competition today , both sides each have 7 Go players participating .

Spans:
Span 9-10:  7 => 7
Span 5-6:  both => both
Span 2-3:  competition => compete-01
Span 7-8:  each => each
Span 12-13:  participating => participate-01
Span 6-7:  sides => side
Span 3-4:  today => today

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),participating,participate-01,false), Span(9,10,List(1),7,7,false), Span(7,8,List(2),each,each,false), Span(6,7,List(3),sides,side,false), Span(5,6,List(4),both,both,false), Span(3,4,List(5),today,today,false), Span(2,3,List(6),competition,compete-01,false)),Map(2 -> each, 5 -> today, 1 -> 7, 4 -> both, 6 -> compete-01, 0 -> participate-01, 3 -> side),Map(e -> each, t -> today, b -> both, s -> side, 7 -> 7, p -> participate-01, c -> compete-01))),[Ljava.lang.String;@f381794,Annotation([Ljava.lang.String;@2cdd0d4b,[Ljava.lang.String;@7e9131d5,[Ljava.lang.String;@2e1d27ba),Annotation([Ljava.lang.String;@61d6015a,[Ljava.lang.String;@2525ff7e,[Ledu.cmu.lti.nlp.amr.Dependency;@524d6d96),Annotation([Ljava.lang.String;@152aa092,[Ljava.lang.String;@44a7bfbc,[Ljava.lang.String;@4ef37659),Annotation([Ljava.lang.String;@776b83cc,[Ljava.lang.String;@37858383,[Ledu.cmu.lti.nlp.amr.Entity;@4e268090))
AMR:
(c / compete-01, ARG0, s / side)
(c / compete-01, ARG6, t / today)
(e / each, calendar, s / side)
(p / participate-01, ARG1, s / side)
(p / participate-01, ARG6, 7 / 7)
(s / side, mod, b / both)

Decoded in 119,427 microseconds
Sentence: Weiping Nie ( 9th level ) , Xiaoguang Liu ( 9th level ) , Hao Chang ( 6th level ) and Dayuan Cao ( 9th level ) from the Chinese team defeated Guibing Cui ( 6th level ) , Xiuying Zhang ( 9th level ) , Fengzhu Xu ( 9th level ) and Xuange Lin ( 8th level ) from the Korean team respectively .

NER Entity: (person :name (name :op "Xiaoguang" :op "Liu"))
NER Entity: (person :name (name :op "Hao" :op "Chang"))
NER Entity: (person :name (name :op "Dayuan" :op "Cao"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Guibing" :op "Cui"))
NER Entity: (person :name (name :op "Xiuying" :op "Zhang"))
NER Entity: (person :name (name :op "Fengzhu" :op "Xu"))
NER Entity: (person :name (name :op "Xuange" :op "Lin"))
NER Entity: (thing :name (name :op "Korean"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 52-53:  and => and
Span 20-21:  and => and
Span 29-30:  Chinese => (country :name (name :op "China"))
Span 21-23:  Dayuan Cao => (person :name (name :op "Dayuan" :op "Cao"))
Span 46-48:  Fengzhu Xu => (person :name (name :op "Fengzhu" :op "Xu"))
Span 32-34:  Guibing Cui => (person :name (name :op "Guibing" :op "Cui"))
Span 14-16:  Hao Chang => (person :name (name :op "Hao" :op "Chang"))
Span 57-58:  level => level
Span 50-51:  level => level
Span 43-44:  level => level
Span 36-37:  level => level
Span 25-26:  level => level
Span 18-19:  level => level
Span 11-12:  level => level
Span 4-5:  level => level
Span 63-64:  respectively => respective
Span 62-63:  team => team
Span 30-31:  team => team
Span 7-9:  Xiaoguang Liu => (person :name (name :op "Xiaoguang" :op "Liu"))
Span 39-41:  Xiuying Zhang => (person :name (name :op "Xiuying" :op "Zhang"))
Span 53-55:  Xuange Lin => (person :name (name :op "Xuange" :op "Lin"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(63,64,List(0),respectively,respective,false), Span(62,63,List(1),team,team,false), Span(57,58,List(2),level,level,false), Span(53,55,List(6, 5, 4, 3),Xuange Lin,(person :name (name :op "Xuange" :op "Lin")),false), Span(52,53,List(7),and,and,false), Span(50,51,List(8),level,level,false), Span(46,48,List(12, 11, 10, 9),Fengzhu Xu,(person :name (name :op "Fengzhu" :op "Xu")),false), Span(43,44,List(13),level,level,false), Span(39,41,List(17, 16, 15, 14),Xiuying Zhang,(person :name (name :op "Xiuying" :op "Zhang")),false), Span(36,37,List(18),level,level,false), Span(32,34,List(22, 21, 20, 19),Guibing Cui,(person :name (name :op "Guibing" :op "Cui")),false), Span(30,31,List(23),team,team,false), Span(29,30,List(26, 25, 24),Chinese,(country :name (name :op "China")),false), Span(25,26,List(27),level,level,false), Span(21,23,List(31, 30, 29, 28),Dayuan Cao,(person :name (name :op "Dayuan" :op "Cao")),false), Span(20,21,List(32),and,and,false), Span(18,19,List(33),level,level,false), Span(14,16,List(37, 36, 35, 34),Hao Chang,(person :name (name :op "Hao" :op "Chang")),false), Span(11,12,List(38),level,level,false), Span(7,9,List(42, 41, 40, 39),Xiaoguang Liu,(person :name (name :op "Xiaoguang" :op "Liu")),false), Span(4,5,List(43),level,level,false)),Map(39 -> person, 30 -> "Dayuan", 2 -> level, 5 -> "Xuange", 33 -> level, 27 -> level, 12 -> "Xu", 8 -> level, 15 -> name, 42 -> "Liu", 36 -> "Hao", 21 -> "Guibing", 18 -> level, 24 -> country, 41 -> "Xiaoguang", 35 -> name, 7 -> and, 1 -> team, 17 -> "Zhang", 23 -> team, 38 -> level, 26 -> "China", 4 -> name, 11 -> "Fengzhu", 32 -> and, 14 -> person, 29 -> name, 20 -> name, 34 -> person, 28 -> person, 6 -> "Lin", 40 -> name, 43 -> level, 9 -> person, 0 -> respective, 22 -> "Cui", 16 -> "Xiuying", 37 -> "Chang", 19 -> person, 10 -> name, 3 -> person, 31 -> "Cao", 25 -> name, 13 -> level),Map(l7 -> level, n -> name, p5 -> person, t -> team, n7 -> name, p2 -> person, l3 -> level, n4 -> name, l6 -> level, p -> person, n3 -> name, a -> and, p4 -> person, l5 -> level, n6 -> name, p7 -> person, l8 -> level, t2 -> team, l2 -> level, r -> respective, a2 -> and, c -> country, p6 -> person, l -> level, n8 -> name, p3 -> person, n2 -> name, l4 -> level, n5 -> name))),[Ljava.lang.String;@1bb266b3,Annotation([Ljava.lang.String;@306cf3ea,[Ljava.lang.String;@2beee7ff,[Ljava.lang.String;@5136d012),Annotation([Ljava.lang.String;@5939a379,[Ljava.lang.String;@e1de817,[Ledu.cmu.lti.nlp.amr.Dependency;@52102734),Annotation([Ljava.lang.String;@3541cb24,[Ljava.lang.String;@2177849e,[Ljava.lang.String;@40cb8df7),Annotation([Ljava.lang.String;@13b13b5d,[Ljava.lang.String;@2892dae4,[Ledu.cmu.lti.nlp.amr.Entity;@355ce81c))
AMR:
(a / and, op, c / country)
(a / and, op, l / level)
(a / and, op, l3 / level)
(a / and, op, l4 / level)
(a / and, op, p / person)
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(a2 / and, mod, r / respective)
(a2 / and, op, l5 / level)
(a2 / and, op, l7 / level)
(a2 / and, op, l8 / level)
(a2 / and, op, p2 / person)
(a2 / and, op, p4 / person)
(a2 / and, op, p5 / person)
(a2 / and, op, p6 / person)
(a2 / and, op, p7 / person)
(a2 / and, poss, t / team)
(c / country, name, n5 / name)
(l2 / level, calendar, p / person)
(l6 / level, calendar, p5 / person)
(n / name, op, "Lin")
(n / name, op, "Xuange")
(n2 / name, op, "Fengzhu")
(n2 / name, op, "Xu")
(n3 / name, op, "Xiuying")
(n3 / name, op, "Zhang")
(n4 / name, op, "Cui")
(n4 / name, op, "Guibing")
(n5 / name, op, "China")
(n6 / name, op, "Cao")
(n6 / name, op, "Dayuan")
(n7 / name, op, "Chang")
(n7 / name, op, "Hao")
(n8 / name, op, "Liu")
(n8 / name, op, "Xiaoguang")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / person, name, n3 / name)
(p4 / person, name, n4 / name)
(p5 / person, name, n6 / name)
(p6 / person, name, n7 / name)
(p7 / person, name, n8 / name)
(t2 / team, mod, c / country)

Decoded in 680,602 microseconds
Sentence: Among which , Weiping Nie , Xiaoguang Liu and Hao Chang both achieved victories in the middle games .

NER Entity: (person :name (name :op "Xiaoguang" :op "Liu"))
NER Entity: (person :name (name :op "Hao" :op "Chang"))
Spans:
Span 12-13:  achieved => achieve-01
Span 8-9:  and => and
Span 11-12:  both => both
Span 9-11:  Hao Chang => (person :name (name :op "Hao" :op "Chang"))
Span 6-8:  Xiaoguang Liu => (person :name (name :op "Xiaoguang" :op "Liu"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),achieved,achieve-01,false), Span(11,12,List(1),both,both,false), Span(9,11,List(5, 4, 3, 2),Hao Chang,(person :name (name :op "Hao" :op "Chang")),false), Span(8,9,List(6),and,and,false), Span(6,8,List(10, 9, 8, 7),Xiaoguang Liu,(person :name (name :op "Xiaoguang" :op "Liu")),false)),Map(2 -> person, 5 -> "Chang", 8 -> name, 7 -> person, 1 -> both, 4 -> "Hao", 6 -> and, 9 -> "Xiaoguang", 0 -> achieve-01, 10 -> "Liu", 3 -> name),Map(n -> name, b -> both, p2 -> person, p -> person, a -> achieve-01, a2 -> and, n2 -> name))),[Ljava.lang.String;@29647f75,Annotation([Ljava.lang.String;@3315d2d7,[Ljava.lang.String;@d6e7bab,[Ljava.lang.String;@5fa07e12),Annotation([Ljava.lang.String;@55b53d44,[Ljava.lang.String;@482bce4f,[Ledu.cmu.lti.nlp.amr.Dependency;@366647c2),Annotation([Ljava.lang.String;@6a6afff2,[Ljava.lang.String;@1649b0e6,[Ljava.lang.String;@865dd6),Annotation([Ljava.lang.String;@4da4253,[Ljava.lang.String;@3972a855,[Ledu.cmu.lti.nlp.amr.Entity;@62e7f11d))
AMR:
(a / achieve-01, ARG0, a2 / and)
(a / achieve-01, ARG1, b / both)
(a2 / and, op, p / person)
(a2 / and, op, p2 / person)
(n / name, op, "Chang")
(n / name, op, "Hao")
(n2 / name, op, "Liu")
(n2 / name, op, "Xiaoguang")
(p / person, name, n / name)
(p2 / person, name, n2 / name)

Decoded in 158,842 microseconds
Sentence: Dayuan Cao achieved victory with an advantage of seven and a half ' mu ' .

NER Entity: (person :name (name :op "Dayuan" :op "Cao"))
Spans:
Span 2-3:  achieved => achieve-01
Span 6-7:  advantage => advantage
Span 9-10:  and => and
Span 0-2:  Dayuan Cao => (person :name (name :op "Dayuan" :op "Cao"))
Span 11-12:  half => half
Span 8-9:  seven => 7
Span 3-4:  victory => victory

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),half,half,false), Span(9,10,List(1),and,and,false), Span(8,9,List(2),seven,7,false), Span(6,7,List(3),advantage,advantage,false), Span(3,4,List(4),victory,victory,false), Span(2,3,List(5),achieved,achieve-01,false), Span(0,2,List(9, 8, 7, 6),Dayuan Cao,(person :name (name :op "Dayuan" :op "Cao")),false)),Map(2 -> 7, 5 -> achieve-01, 8 -> "Dayuan", 7 -> name, 1 -> and, 4 -> victory, 6 -> person, 9 -> "Cao", 0 -> half, 3 -> advantage),Map(n -> name, h -> half, a3 -> achieve-01, v -> victory, 7 -> 7, p -> person, a -> and, a2 -> advantage))),[Ljava.lang.String;@503d687a,Annotation([Ljava.lang.String;@6a370f4,[Ljava.lang.String;@2abf4075,[Ljava.lang.String;@770d3326),Annotation([Ljava.lang.String;@4cc8eb05,[Ljava.lang.String;@51f116b8,[Ledu.cmu.lti.nlp.amr.Dependency;@19d481b),Annotation([Ljava.lang.String;@1f97cf0d,[Ljava.lang.String;@140c9f39,[Ljava.lang.String;@4d910fd6),Annotation([Ljava.lang.String;@26275bef,[Ljava.lang.String;@7690781,[Ledu.cmu.lti.nlp.amr.Entity;@77eca502))
AMR:
(a / and, op, p / person)
(a3 / achieve-01, ARG0, p / person)
(a3 / achieve-01, ARG1, v / victory)
(a3 / achieve-01, ARG2, a2 / advantage)
(a3 / achieve-01, time, 7 / 7)
(h / half, calendar, a2 / advantage)
(n / name, op, "Cao")
(n / name, op, "Dayuan")
(p / person, name, n / name)

Decoded in 104,164 microseconds
Sentence: Xunxuan Cao ( 9th level ) , Changhao Li ( 7th level ) and Changhe Liu ( 6th level ) from the Korean team defeated Jing Liu ( 5th level ) , Xiaocun Ma ( 9th level ) and Jianhong Wang ( 7th level ) from the Chinese team respectively .

NER Entity: (person :name (name :op "Xunxuan" :op "Cao"))
NER Entity: (person :name (name :op "Changhao" :op "Li"))
NER Entity: (person :name (name :op "Changhe" :op "Liu"))
NER Entity: (thing :name (name :op "Korean"))
NER Entity: (person :name (name :op "Jing" :op "Liu"))
NER Entity: (person :name (name :op "Xiaocun" :op "Ma"))
NER Entity: (person :name (name :op "Jianhong" :op "Wang"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 38-39:  and => and
Span 13-14:  and => and
Span 7-9:  Changhao Li => (person :name (name :op "Changhao" :op "Li"))
Span 14-16:  Changhe Liu => (person :name (name :op "Changhe" :op "Liu"))
Span 47-48:  Chinese => (country :name (name :op "China"))
Span 39-41:  Jianhong Wang => (person :name (name :op "Jianhong" :op "Wang"))
Span 25-27:  Jing Liu => (person :name (name :op "Jing" :op "Liu"))
Span 43-44:  level => level
Span 36-37:  level => level
Span 29-30:  level => level
Span 18-19:  level => level
Span 11-12:  level => level
Span 4-5:  level => level
Span 49-50:  respectively => respective
Span 48-49:  team => team
Span 23-24:  team => team
Span 32-34:  Xiaocun Ma => (person :name (name :op "Xiaocun" :op "Ma"))
Span 0-2:  Xunxuan Cao => (person :name (name :op "Xunxuan" :op "Cao"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),respectively,respective,false), Span(48,49,List(1),team,team,false), Span(47,48,List(4, 3, 2),Chinese,(country :name (name :op "China")),false), Span(43,44,List(5),level,level,false), Span(39,41,List(9, 8, 7, 6),Jianhong Wang,(person :name (name :op "Jianhong" :op "Wang")),false), Span(38,39,List(10),and,and,false), Span(36,37,List(11),level,level,false), Span(32,34,List(15, 14, 13, 12),Xiaocun Ma,(person :name (name :op "Xiaocun" :op "Ma")),false), Span(29,30,List(16),level,level,false), Span(25,27,List(20, 19, 18, 17),Jing Liu,(person :name (name :op "Jing" :op "Liu")),false), Span(23,24,List(21),team,team,false), Span(18,19,List(22),level,level,false), Span(14,16,List(26, 25, 24, 23),Changhe Liu,(person :name (name :op "Changhe" :op "Liu")),false), Span(13,14,List(27),and,and,false), Span(11,12,List(28),level,level,false), Span(7,9,List(32, 31, 30, 29),Changhao Li,(person :name (name :op "Changhao" :op "Li")),false), Span(4,5,List(33),level,level,false), Span(0,2,List(37, 36, 35, 34),Xunxuan Cao,(person :name (name :op "Xunxuan" :op "Cao")),false)),Map(30 -> name, 2 -> country, 5 -> level, 33 -> level, 27 -> and, 12 -> person, 8 -> "Jianhong", 15 -> "Ma", 36 -> "Xunxuan", 21 -> team, 18 -> name, 24 -> name, 35 -> name, 7 -> name, 1 -> team, 17 -> person, 23 -> person, 26 -> "Liu", 4 -> "China", 11 -> level, 32 -> "Li", 14 -> "Xiaocun", 29 -> person, 20 -> "Liu", 34 -> person, 28 -> level, 6 -> person, 9 -> "Wang", 0 -> respective, 22 -> level, 16 -> level, 37 -> "Cao", 19 -> "Jing", 10 -> and, 3 -> name, 31 -> "Changhao", 25 -> "Changhe", 13 -> name),Map(n -> name, p5 -> person, t -> team, n7 -> name, p2 -> person, l3 -> level, n4 -> name, l6 -> level, p -> person, n3 -> name, a -> and, p4 -> person, l5 -> level, n6 -> name, t2 -> team, l2 -> level, r -> respective, a2 -> and, c -> country, p6 -> person, l -> level, p3 -> person, n2 -> name, l4 -> level, n5 -> name))),[Ljava.lang.String;@3246fb96,Annotation([Ljava.lang.String;@2e222612,[Ljava.lang.String;@61386958,[Ljava.lang.String;@73ee04c8),Annotation([Ljava.lang.String;@7671cb68,[Ljava.lang.String;@49dc7102,[Ledu.cmu.lti.nlp.amr.Dependency;@6b8ca3c8),Annotation([Ljava.lang.String;@68c72235,[Ljava.lang.String;@10959ece,[Ljava.lang.String;@3a6bb9bf),Annotation([Ljava.lang.String;@34f7cfd9,[Ljava.lang.String;@65f095f8,[Ledu.cmu.lti.nlp.amr.Entity;@59af0466))
AMR:
(a / and, op, l / level)
(a / and, op, l3 / level)
(a / and, op, p / person)
(a / and, op, p2 / person)
(a / and, op, p4 / person)
(a2 / and, mod, r / respective)
(a2 / and, op, l4 / level)
(a2 / and, op, l6 / level)
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / person)
(a2 / and, op, p5 / person)
(a2 / and, poss, t / team)
(a2 / and, poss, t2 / team)
(c / country, name, n / name)
(l2 / level, calendar, p / person)
(l5 / level, calendar, p4 / person)
(n / name, op, "China")
(n2 / name, op, "Jianhong")
(n2 / name, op, "Wang")
(n3 / name, op, "Ma")
(n3 / name, op, "Xiaocun")
(n4 / name, op, "Jing")
(n4 / name, op, "Liu")
(n5 / name, op, "Changhe")
(n5 / name, op, "Liu")
(n6 / name, op, "Changhao")
(n6 / name, op, "Li")
(n7 / name, op, "Cao")
(n7 / name, op, "Xunxuan")
(p / person, name, n2 / name)
(p2 / person, name, n3 / name)
(p3 / person, name, n4 / name)
(p4 / person, name, n5 / name)
(p5 / person, name, n6 / name)
(p6 / person, calendar, l6 / level)
(p6 / person, name, n7 / name)
(t / team, mod, c / country)

Decoded in 452,793 microseconds
Sentence: Among which , Xunxuan Cao achieved a victory in the middle game .

NER Entity: (person :name (name :op "Xunxuan" :op "Cao"))
Spans:
Span 5-6:  achieved => achieve-01
Span 11-12:  game => game
Span 7-8:  victory => victory
Span 3-5:  Xunxuan Cao => (person :name (name :op "Xunxuan" :op "Cao"))

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),game,game,false), Span(7,8,List(1),victory,victory,false), Span(5,6,List(2),achieved,achieve-01,false), Span(3,5,List(6, 5, 4, 3),Xunxuan Cao,(person :name (name :op "Xunxuan" :op "Cao")),false)),Map(2 -> achieve-01, 5 -> "Xunxuan", 1 -> victory, 4 -> name, 6 -> "Cao", 0 -> game, 3 -> person),Map(n -> name, v -> victory, p -> person, g -> game, a -> achieve-01))),[Ljava.lang.String;@3e6ef8ad,Annotation([Ljava.lang.String;@346d61be,[Ljava.lang.String;@55536d9e,[Ljava.lang.String;@747edf66),Annotation([Ljava.lang.String;@3d1cfad4,[Ljava.lang.String;@62230c58,[Ledu.cmu.lti.nlp.amr.Dependency;@2cd2a21f),Annotation([Ljava.lang.String;@2e55dd0c,[Ljava.lang.String;@74455848,[Ljava.lang.String;@e7edb54),Annotation([Ljava.lang.String;@378542de,[Ljava.lang.String;@3738449f,[Ledu.cmu.lti.nlp.amr.Entity;@69e1dd28))
AMR:
(a / achieve-01, ARG0, p / person)
(a / achieve-01, ARG1, v / victory)
(n / name, op, "Cao")
(n / name, op, "Xunxuan")
(p / person, name, n / name)
(v / victory, topic, g / game)

Decoded in 82,842 microseconds
Sentence: Changhao Li and Changhe Liu achieved victories with advantages of six and a half ' mu ' and seven and a half ' mu ' respectively .

NER Entity: (person :name (name :op "Changhao" :op "Li"))
NER Entity: (person :name (name :op "Changhe" :op "Liu"))
Spans:
Span 5-6:  achieved => achieve-01
Span 8-9:  advantages => advantage
Span 19-20:  and => and
Span 17-18:  and => and
Span 11-12:  and => and
Span 2-3:  and => and
Span 0-2:  Changhao Li => (person :name (name :op "Changhao" :op "Li"))
Span 3-5:  Changhe Liu => (person :name (name :op "Changhe" :op "Liu"))
Span 21-22:  half => half
Span 13-14:  half => half
Span 25-26:  respectively => respective
Span 18-19:  seven => 7
Span 10-11:  six => 6

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),respectively,respective,false), Span(21,22,List(1),half,half,false), Span(19,20,List(2),and,and,false), Span(18,19,List(3),seven,7,false), Span(17,18,List(4),and,and,false), Span(13,14,List(5),half,half,false), Span(11,12,List(6),and,and,false), Span(10,11,List(7),six,6,false), Span(8,9,List(8),advantages,advantage,false), Span(5,6,List(9),achieved,achieve-01,false), Span(3,5,List(13, 12, 11, 10),Changhe Liu,(person :name (name :op "Changhe" :op "Liu")),false), Span(2,3,List(14),and,and,false), Span(0,2,List(18, 17, 16, 15),Changhao Li,(person :name (name :op "Changhao" :op "Li")),false)),Map(2 -> and, 5 -> half, 12 -> "Changhe", 15 -> person, 8 -> advantage, 18 -> "Li", 7 -> 6, 17 -> "Changhao", 1 -> half, 4 -> and, 11 -> name, 14 -> and, 6 -> and, 0 -> respective, 9 -> achieve-01, 16 -> name, 3 -> 7, 10 -> person, 13 -> "Liu"),Map(n -> name, h -> half, h2 -> half, p2 -> person, a3 -> and, a6 -> and, 7 -> 7, p -> person, a -> and, a5 -> achieve-01, r -> respective, a2 -> and, 6 -> 6, n2 -> name, a4 -> advantage))),[Ljava.lang.String;@11bd0f3b,Annotation([Ljava.lang.String;@c333c60,[Ljava.lang.String;@79da8dc5,[Ljava.lang.String;@1eb5174b),Annotation([Ljava.lang.String;@67080771,[Ljava.lang.String;@72cde7cc,[Ledu.cmu.lti.nlp.amr.Dependency;@5fd4f8f5),Annotation([Ljava.lang.String;@696da30b,[Ljava.lang.String;@4e7912d8,[Ljava.lang.String;@53976f5c),Annotation([Ljava.lang.String;@2bfc268b,[Ljava.lang.String;@2f8dad04,[Ledu.cmu.lti.nlp.amr.Entity;@29e495ff))
AMR:
(7 / 7, poss, a3 / and)
(a2 / and, op, a3 / and)
(a2 / and, op, p2 / person)
(a5 / achieve-01, ARG0, a6 / and)
(a5 / achieve-01, ARG1, a / and)
(a5 / achieve-01, ARG2, a4 / advantage)
(a5 / achieve-01, time, 6 / 6)
(a6 / and, mod, r / respective)
(a6 / and, op, p / person)
(a6 / and, op, p2 / person)
(h / half, op, a5 / achieve-01)
(h2 / half, calendar, 6 / 6)
(n / name, op, "Changhe")
(n / name, op, "Liu")
(n2 / name, op, "Changhao")
(n2 / name, op, "Li")
(p / person, name, n / name)
(p2 / person, name, n2 / name)

Decoded in 397,245 microseconds
Sentence: When receiving reporters telephone interviews , Runan Wang , leader of the Chinese delegation presented that , overall speaking , the strength of the Korean team was stronger than the Chinese team .

NER Entity: (person :name (name :op "Runan" :op "Wang"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 30-31:  Chinese => (country :name (name :op "China"))
Span 12-13:  Chinese => (country :name (name :op "China"))
Span 13-14:  delegation => delegation
Span 4-5:  interviews => interview-01
Span 9-10:  leader => (person :ARG0-of lead-02)
Span 17-18:  overall => overall
Span 14-15:  presented => present-01
Span 1-2:  receiving => receive-01
Span 2-3:  reporters => (person :ARG0-of report-01)
Span 6-8:  Runan Wang => (person :name (name :op "Runan" :op "Wang"))
Span 18-19:  speaking => speak-01
Span 21-22:  strength => strength
Span 27-28:  stronger => strong
Span 31-32:  team => team
Span 25-26:  team => team
Span 3-4:  telephone => telephone

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),team,team,false), Span(30,31,List(3, 2, 1),Chinese,(country :name (name :op "China")),false), Span(27,28,List(4),stronger,strong,false), Span(25,26,List(5),team,team,false), Span(21,22,List(6),strength,strength,false), Span(18,19,List(7),speaking,speak-01,false), Span(17,18,List(8),overall,overall,false), Span(14,15,List(9),presented,present-01,false), Span(13,14,List(10),delegation,delegation,false), Span(12,13,List(13, 12, 11),Chinese,(country :name (name :op "China")),false), Span(9,10,List(15, 14),leader,(person :ARG0-of lead-02),false), Span(6,8,List(19, 18, 17, 16),Runan Wang,(person :name (name :op "Runan" :op "Wang")),false), Span(4,5,List(20),interviews,interview-01,false), Span(3,4,List(21),telephone,telephone,false), Span(2,3,List(23, 22),reporters,(person :ARG0-of report-01),false), Span(1,2,List(24),receiving,receive-01,false)),Map(2 -> name, 5 -> team, 12 -> name, 8 -> overall, 15 -> lead-02, 21 -> telephone, 18 -> "Runan", 24 -> receive-01, 7 -> speak-01, 1 -> country, 17 -> name, 23 -> report-01, 4 -> strong, 11 -> country, 14 -> person, 20 -> interview-01, 6 -> strength, 9 -> present-01, 0 -> team, 22 -> person, 16 -> person, 19 -> "Wang", 10 -> delegation, 3 -> "China", 13 -> "China"),Map(n -> name, s2 -> strength, t -> team, p2 -> person, s -> strong, d -> delegation, t3 -> telephone, r2 -> receive-01, p -> present-01, n3 -> name, p4 -> person, t2 -> team, r -> report-01, i -> interview-01, c -> country, s3 -> speak-01, l -> lead-02, o -> overall, p3 -> person, c2 -> country, n2 -> name))),[Ljava.lang.String;@41e1e210,Annotation([Ljava.lang.String;@be35cd9,[Ljava.lang.String;@4944252c,[Ljava.lang.String;@44821a96),Annotation([Ljava.lang.String;@a3d8174,[Ljava.lang.String;@1ba9117e,[Ledu.cmu.lti.nlp.amr.Dependency;@732c2a62),Annotation([Ljava.lang.String;@272ed83b,[Ljava.lang.String;@41fecb8b,[Ljava.lang.String;@120f102b),Annotation([Ljava.lang.String;@625732,[Ljava.lang.String;@51dcb805,[Ledu.cmu.lti.nlp.amr.Entity;@66498326))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / delegation, mod, c2 / country)
(i / interview-01, ARG0, p3 / person)
(i / interview-01, ARG1, t3 / telephone)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, d / delegation)
(n / name, op, "China")
(n2 / name, op, "China")
(n3 / name, op, "Runan")
(n3 / name, op, "Wang")
(p / present-01, ARG0, p2 / person)
(p / present-01, ARG1, s3 / speak-01)
(p3 / person, name, n3 / name)
(r / report-01, ARG0, p4 / person)
(r / report-01, ARG1, t2 / team)
(r2 / receive-01, ARG0, p2 / person)
(r2 / receive-01, ARG1, p4 / person)
(s / strong, domain, s3 / speak-01)
(s3 / speak-01, ARG1, t / team)
(s3 / speak-01, ARG6, s2 / strength)
(s3 / speak-01, mod, o / overall)
(t / team, mod, c / country)
(t3 / telephone, mod, p4 / person)

Decoded in 1,564,707 microseconds
Sentence: However , the Chinese team performed better today , and therefore achieved victory .

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 11-12:  achieved => achieve-01
Span 9-10:  and => and
Span 6-7:  better => good
Span 3-4:  Chinese => (country :name (name :op "China"))
Span 5-6:  performed => perform-01
Span 4-5:  team => team
Span 7-8:  today => today
Span 12-13:  victory => victory

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),victory,victory,false), Span(11,12,List(1),achieved,achieve-01,false), Span(9,10,List(2),and,and,false), Span(7,8,List(3),today,today,false), Span(6,7,List(4),better,good,false), Span(5,6,List(5),performed,perform-01,false), Span(4,5,List(6),team,team,false), Span(3,4,List(9, 8, 7),Chinese,(country :name (name :op "China")),false)),Map(2 -> and, 5 -> perform-01, 8 -> name, 7 -> country, 1 -> achieve-01, 4 -> good, 6 -> team, 9 -> "China", 0 -> victory, 3 -> today),Map(n -> name, t -> today, v -> victory, p -> perform-01, g -> good, a -> achieve-01, t2 -> team, a2 -> and, c -> country))),[Ljava.lang.String;@cad498c,Annotation([Ljava.lang.String;@1e6454ec,[Ljava.lang.String;@2accdbb5,[Ljava.lang.String;@b62d79),Annotation([Ljava.lang.String;@6631f5ca,[Ljava.lang.String;@5ace1ed4,[Ledu.cmu.lti.nlp.amr.Dependency;@1613674b),Annotation([Ljava.lang.String;@27ff5d15,[Ljava.lang.String;@4e096385,[Ljava.lang.String;@649bec2e),Annotation([Ljava.lang.String;@693fe6c9,[Ljava.lang.String;@34f5090e,[Ledu.cmu.lti.nlp.amr.Entity;@31e5415e))
AMR:
(a / achieve-01, ARG0, t2 / team)
(a / achieve-01, ARG1, v / victory)
(a2 / and, op, a / achieve-01)
(c / country, name, n / name)
(n / name, op, "China")
(p / perform-01, ARG0, t2 / team)
(p / perform-01, ARG1, g / good)
(p / perform-01, time, t / today)
(t2 / team, mod, c / country)

Decoded in 154,716 microseconds
Sentence: The performance of our young competitor , Hao Chang , was especially outstanding today , defeating Fengzhu Xu of the Korean team in the middle game .

NER Entity: (person :name (name :op "Hao" :op "Chang"))
NER Entity: (person :name (name :op "Fengzhu" :op "Xu"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 11-12:  especially => especially
Span 16-18:  Fengzhu Xu => (person :name (name :op "Fengzhu" :op "Xu"))
Span 25-26:  game => game
Span 7-9:  Hao Chang => (person :name (name :op "Hao" :op "Chang"))
Span 1-2:  performance => perform-01
Span 21-22:  team => team
Span 13-14:  today => today
Span 4-5:  young => young

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),game,game,false), Span(21,22,List(1),team,team,false), Span(16,18,List(5, 4, 3, 2),Fengzhu Xu,(person :name (name :op "Fengzhu" :op "Xu")),false), Span(13,14,List(6),today,today,false), Span(11,12,List(7),especially,especially,false), Span(7,9,List(11, 10, 9, 8),Hao Chang,(person :name (name :op "Hao" :op "Chang")),false), Span(4,5,List(12),young,young,false), Span(1,2,List(13),performance,perform-01,false)),Map(2 -> person, 5 -> "Xu", 12 -> young, 8 -> person, 7 -> especially, 1 -> team, 4 -> "Fengzhu", 11 -> "Chang", 6 -> today, 0 -> game, 9 -> name, 3 -> name, 10 -> "Hao", 13 -> perform-01),Map(e -> especially, n -> name, t -> team, p2 -> person, y -> young, p -> person, g -> game, t2 -> today, p3 -> perform-01, n2 -> name))),[Ljava.lang.String;@a2431d0,Annotation([Ljava.lang.String;@1cbb87f3,[Ljava.lang.String;@1a4013,[Ljava.lang.String;@1b6e1eff),Annotation([Ljava.lang.String;@306f16f3,[Ljava.lang.String;@702b8b12,[Ledu.cmu.lti.nlp.amr.Dependency;@22e357dc),Annotation([Ljava.lang.String;@49912c99,[Ljava.lang.String;@10163d6,[Ljava.lang.String;@2dde1bff),Annotation([Ljava.lang.String;@15bbf42f,[Ljava.lang.String;@550ee7e5,[Ledu.cmu.lti.nlp.amr.Entity;@5f9b2141))
AMR:
(g / game, op, p3 / perform-01)
(n / name, op, "Fengzhu")
(n / name, op, "Xu")
(n2 / name, op, "Chang")
(n2 / name, op, "Hao")
(p / person, location, t / team)
(p / person, mod, y / young)
(p / person, name, n / name)
(p2 / person, mod, y / young)
(p2 / person, name, n2 / name)
(p3 / perform-01, ARG0, p / person)
(p3 / perform-01, ARG1, t2 / today)
(t2 / today, calendar, e / especially)

Decoded in 211,206 microseconds
Sentence: Fengzhu Xu has won many championships in international competitions before .

NER Entity: (person :name (name :op "Fengzhu" :op "Xu"))
Spans:
Span 9-10:  before => before
Span 0-2:  Fengzhu Xu => (person :name (name :op "Fengzhu" :op "Xu"))
Span 7-8:  international => international
Span 4-5:  many => many
Span 3-4:  won => win-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),before,before,false), Span(7,8,List(1),international,international,false), Span(4,5,List(2),many,many,false), Span(3,4,List(3),won,win-01,false), Span(0,2,List(7, 6, 5, 4),Fengzhu Xu,(person :name (name :op "Fengzhu" :op "Xu")),false)),Map(2 -> many, 5 -> name, 7 -> "Xu", 1 -> international, 4 -> person, 6 -> "Fengzhu", 0 -> before, 3 -> win-01),Map(n -> name, w -> win-01, b -> before, m -> many, p -> person, i -> international))),[Ljava.lang.String;@247d8ae,Annotation([Ljava.lang.String;@48974e45,[Ljava.lang.String;@6a84a97d,[Ljava.lang.String;@6c130c45),Annotation([Ljava.lang.String;@50ad3bc1,[Ljava.lang.String;@223aa2f7,[Ledu.cmu.lti.nlp.amr.Dependency;@6d3a388c),Annotation([Ljava.lang.String;@193f604a,[Ljava.lang.String;@20f5239f,[Ljava.lang.String;@57af006c),Annotation([Ljava.lang.String;@6bedbc4d,[Ljava.lang.String;@932bc4a,[Ledu.cmu.lti.nlp.amr.Entity;@d29f28))
AMR:
(i / international, mod, p / person)
(n / name, op, "Fengzhu")
(n / name, op, "Xu")
(p / person, name, n / name)
(w / win-01, ARG0, p / person)
(w / win-01, ARG1, m / many)
(w / win-01, ARG6, b / before)

Decoded in 63,780 microseconds
Sentence: He had achieved complete victory in nine games with Chinese Go players before .

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 2-3:  achieved => achieve-01
Span 12-13:  before => before
Span 9-10:  Chinese => (country :name (name :op "China"))
Span 3-4:  complete => complete-01
Span 0-1:  He => he
Span 6-7:  nine => 9
Span 4-5:  victory => victory

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),before,before,false), Span(9,10,List(3, 2, 1),Chinese,(country :name (name :op "China")),false), Span(6,7,List(4),nine,9,false), Span(4,5,List(5),victory,victory,false), Span(3,4,List(6),complete,complete-01,false), Span(2,3,List(7),achieved,achieve-01,false), Span(0,1,List(8),He,he,false)),Map(2 -> name, 5 -> victory, 8 -> he, 7 -> achieve-01, 1 -> country, 4 -> 9, 6 -> complete-01, 0 -> before, 3 -> "China"),Map(n -> name, h -> he, b -> before, v -> victory, a -> achieve-01, c -> country, 9 -> 9, c2 -> complete-01))),[Ljava.lang.String;@2fd1433e,Annotation([Ljava.lang.String;@29d89d5d,[Ljava.lang.String;@3514a4c0,[Ljava.lang.String;@212b5695),Annotation([Ljava.lang.String;@446293d,[Ljava.lang.String;@69997e9d,[Ledu.cmu.lti.nlp.amr.Dependency;@793be5ca),Annotation([Ljava.lang.String;@2df9b86,[Ljava.lang.String;@37654521,[Ljava.lang.String;@15aab8c6),Annotation([Ljava.lang.String;@33990a0c,[Ljava.lang.String;@4de4b452,[Ledu.cmu.lti.nlp.amr.Entity;@50b5ac82))
AMR:
(a / achieve-01, ARG0, h / he)
(a / achieve-01, ARG1, v / victory)
(b / before, domain, h / he)
(c / country, name, n / name)
(c2 / complete-01, ARG0, c / country)
(c2 / complete-01, ARG1, v / victory)
(c2 / complete-01, time, 9 / 9)
(n / name, op, "China")

Decoded in 151,245 microseconds
Sentence: The Go teams from China and Korea will shift to Seoul on September 1st , and will hold the second competition in the Le Tian Hotel on the 2nd .

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Korea"))
NER Entity: (country :name (name :op "Seoul"))
NER Entity: (organization :name (name :op "Le" :op "Tian" :op "Hotel"))
NER Entity: (country :name (name :op "Seoul"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 15-16:  and => and
Span 5-6:  and => and
Span 4-5:  China => (country :name (name :op "China"))
Span 20-21:  competition => compete-01
Span 17-18:  hold => hold-04
Span 23-26:  Le Tian Hotel => (organization :name (name :op "Le" :op "Tian" :op "Hotel"))
Span 10-11:  Seoul => (city :name (name :op "Seoul"))
Span 12-13:  September => (date-entity :month 9)
Span 8-9:  shift => shift-01
Span 2-3:  teams => team

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,26,List(4, 3, 2, 1, 0),Le Tian Hotel,(organization :name (name :op "Le" :op "Tian" :op "Hotel")),false), Span(20,21,List(5),competition,compete-01,false), Span(17,18,List(6),hold,hold-04,false), Span(15,16,List(7),and,and,false), Span(12,13,List(9, 8),September,(date-entity :month 9),false), Span(10,11,List(12, 11, 10),Seoul,(city :name (name :op "Seoul")),false), Span(8,9,List(13),shift,shift-01,false), Span(5,6,List(14),and,and,false), Span(4,5,List(17, 16, 15),China,(country :name (name :op "China")),false), Span(2,3,List(18),teams,team,false)),Map(2 -> "Le", 5 -> compete-01, 12 -> "Seoul", 15 -> country, 8 -> date-entity, 18 -> team, 7 -> and, 17 -> "China", 1 -> name, 4 -> "Hotel", 11 -> name, 14 -> and, 6 -> hold-04, 0 -> organization, 9 -> 9, 16 -> name, 3 -> "Tian", 10 -> city, 13 -> shift-01),Map(n -> name, h -> hold-04, t -> team, s -> shift-01, d -> date-entity, a -> and, c3 -> country, n3 -> name, a2 -> and, c -> compete-01, 9 -> 9, o -> organization, c2 -> city, n2 -> name))),[Ljava.lang.String;@101952da,Annotation([Ljava.lang.String;@6babf3bf,[Ljava.lang.String;@3059cbc,[Ljava.lang.String;@7ea9e1e2),Annotation([Ljava.lang.String;@24fcf36f,[Ljava.lang.String;@10feca44,[Ledu.cmu.lti.nlp.amr.Dependency;@3fb1549b),Annotation([Ljava.lang.String;@ea6147e,[Ljava.lang.String;@4d02f94e,[Ljava.lang.String;@2b48a640),Annotation([Ljava.lang.String;@1e683a3e,[Ljava.lang.String;@2053d869,[Ledu.cmu.lti.nlp.amr.Entity;@7a419da4))
AMR:
(a / and, op, h / hold-04)
(a / and, op, s / shift-01)
(a2 / and, op, c3 / country)
(a2 / and, op, s / shift-01)
(c / compete-01, ARG1, o / organization)
(c2 / city, name, n2 / name)
(c3 / country, name, n3 / name)
(d / date-entity, month, 9 / 9)
(h / hold-04, ARG0, t / team)
(h / hold-04, ARG1, c / compete-01)
(n / name, op, "Hotel")
(n / name, op, "Le")
(n / name, op, "Tian")
(n2 / name, op, "Seoul")
(n3 / name, op, "China")
(o / organization, name, n / name)
(s / shift-01, ARG1, c2 / city)
(s / shift-01, time, d / date-entity)

Decoded in 327,025 microseconds
Sentence: According to the rules discussed and agreed upon by both sides , if the two teams draw with 7 : 7 , then the final result will be determined by the result of the competition between Weiping Nie of the Chinese team and Xunxuan Cao of the Korean team .

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Xunxuan" :op "Cao"))
NER Entity: (thing :name (name :op "Korean"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 20-21:  7 => 7
Span 18-19:  7 => 7
Span 6-7:  agreed => agree-01
Span 42-43:  and => and
Span 5-6:  and => and
Span 35-36:  between => between
Span 9-10:  both => both
Span 40-41:  Chinese => (country :name (name :op "China"))
Span 34-35:  competition => compete-01
Span 28-29:  determined => determine-01
Span 4-5:  discussed => discuss-01
Span 16-17:  draw => draw-02
Span 24-25:  final => final
Span 31-32:  result => result-01
Span 25-26:  result => result-01
Span 3-4:  rules => rule
Span 10-11:  sides => side
Span 48-49:  team => team
Span 41-42:  team => team
Span 15-16:  teams => team
Span 22-23:  then => then
Span 14-15:  two => 2
Span 43-45:  Xunxuan Cao => (person :name (name :op "Xunxuan" :op "Cao"))

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),team,team,false), Span(43,45,List(4, 3, 2, 1),Xunxuan Cao,(person :name (name :op "Xunxuan" :op "Cao")),false), Span(42,43,List(5),and,and,false), Span(41,42,List(6),team,team,false), Span(40,41,List(9, 8, 7),Chinese,(country :name (name :op "China")),false), Span(35,36,List(10),between,between,false), Span(34,35,List(11),competition,compete-01,false), Span(31,32,List(12),result,result-01,false), Span(28,29,List(13),determined,determine-01,false), Span(25,26,List(14),result,result-01,false), Span(24,25,List(15),final,final,false), Span(22,23,List(16),then,then,false), Span(20,21,List(17),7,7,false), Span(18,19,List(18),7,7,false), Span(16,17,List(19),draw,draw-02,false), Span(15,16,List(20),teams,team,false), Span(14,15,List(21),two,2,false), Span(10,11,List(22),sides,side,false), Span(9,10,List(23),both,both,false), Span(6,7,List(24),agreed,agree-01,false), Span(5,6,List(25),and,and,false), Span(4,5,List(26),discussed,discuss-01,false), Span(3,4,List(27),rules,rule,false)),Map(2 -> name, 5 -> and, 27 -> rule, 12 -> result-01, 8 -> name, 15 -> final, 21 -> 2, 18 -> 7, 24 -> agree-01, 7 -> country, 1 -> person, 17 -> 7, 23 -> both, 26 -> discuss-01, 4 -> "Cao", 11 -> compete-01, 14 -> result-01, 20 -> team, 6 -> team, 9 -> "China", 0 -> team, 22 -> side, 16 -> then, 19 -> draw-02, 10 -> between, 3 -> "Xunxuan", 25 -> and, 13 -> determine-01),Map(n -> name, r3 -> rule, t4 -> team, 72 -> 7, 2 -> 2, t -> team, b -> between, b2 -> both, d3 -> discuss-01, a3 -> and, s -> side, d -> determine-01, 7 -> 7, t3 -> then, r2 -> result-01, p -> person, a -> and, d2 -> draw-02, t2 -> team, r -> result-01, a2 -> agree-01, c -> country, f -> final, c2 -> compete-01, n2 -> name))),[Ljava.lang.String;@14555e0a,Annotation([Ljava.lang.String;@4bb33f74,[Ljava.lang.String;@759d26fb,[Ljava.lang.String;@3c73951),Annotation([Ljava.lang.String;@3d5c822d,[Ljava.lang.String;@6f46426d,[Ledu.cmu.lti.nlp.amr.Dependency;@73700b80),Annotation([Ljava.lang.String;@49c7b90e,[Ljava.lang.String;@10d307f1,[Ljava.lang.String;@4d5b6aac),Annotation([Ljava.lang.String;@3e84448c,[Ljava.lang.String;@4a7f959b,[Ledu.cmu.lti.nlp.amr.Entity;@429bffaa))
AMR:
(a / and, op, p / person)
(a2 / agree-01, ARG0, a / and)
(a2 / agree-01, ARG1, r3 / rule)
(a3 / and, op, a2 / agree-01)
(a3 / and, op, d3 / discuss-01)
(b / between, op, p / person)
(c / country, name, n2 / name)
(c2 / compete-01, ARG2, t2 / team)
(c2 / compete-01, location, b / between)
(d / determine-01, ARG1, r2 / result-01)
(d / determine-01, ARG2, r / result-01)
(d / determine-01, ARG6, t3 / then)
(d2 / draw-02, ARG0, t4 / team)
(d2 / draw-02, ARG1, 7 / 7)
(d2 / draw-02, ARG2, s / side)
(d3 / discuss-01, ARG0, s / side)
(d3 / discuss-01, ARG1, 72 / 7)
(n / name, op, "Cao")
(n / name, op, "Xunxuan")
(n2 / name, op, "China")
(p / person, name, n / name)
(r / result-01, ARG1, c2 / compete-01)
(r2 / result-01, ARG1, t / team)
(r2 / result-01, mod, f / final)
(s / side, mod, b2 / both)
(t2 / team, mod, c / country)
(t4 / team, quant, 2 / 2)

Decoded in 1,507,700 microseconds
Sentence: The prize money of the competition this time is 100,000 US dollars , the team that wins will get 70,000 US dollars , while the team that loses will get 30,000 US dollars .

Spans:
Span 5-6:  competition => compete-01
Span 32-33:  dollars => (monetary-quantity :unit dollar)
Span 21-22:  dollars => (monetary-quantity :unit dollar)
Span 11-12:  dollars => (monetary-quantity :unit dollar)
Span 29-30:  get => get-04
Span 18-19:  get => get-04
Span 2-3:  money => money
Span 25-26:  team => team
Span 14-15:  team => team
Span 6-7:  this => this
Span 7-8:  time => time
Span 31-32:  US => (country :name (name :op "US"))
Span 20-21:  US => (country :name (name :op "US"))
Span 10-11:  US => (country :name (name :op "US"))
Span 16-17:  wins => win-01

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(31,32,List(4, 3, 2),US,(country :name (name :op "US")),false), Span(29,30,List(5),get,get-04,false), Span(25,26,List(6),team,team,false), Span(21,22,List(8, 7),dollars,(monetary-quantity :unit dollar),false), Span(20,21,List(11, 10, 9),US,(country :name (name :op "US")),false), Span(18,19,List(12),get,get-04,false), Span(16,17,List(13),wins,win-01,false), Span(14,15,List(14),team,team,false), Span(11,12,List(16, 15),dollars,(monetary-quantity :unit dollar),false), Span(10,11,List(19, 18, 17),US,(country :name (name :op "US")),false), Span(7,8,List(20),time,time,false), Span(6,7,List(21),this,this,false), Span(5,6,List(22),competition,compete-01,false), Span(2,3,List(23),money,money,false)),Map(2 -> country, 5 -> get-04, 12 -> get-04, 15 -> monetary-quantity, 8 -> dollar, 21 -> this, 18 -> name, 7 -> monetary-quantity, 17 -> country, 1 -> dollar, 23 -> money, 4 -> "US", 11 -> "US", 14 -> team, 20 -> time, 6 -> team, 22 -> compete-01, 0 -> monetary-quantity, 9 -> country, 16 -> dollar, 19 -> "US", 3 -> name, 10 -> name, 13 -> win-01),Map(m3 -> monetary-quantity, n -> name, w -> win-01, t4 -> this, t -> team, d3 -> dollar, m2 -> monetary-quantity, c4 -> compete-01, m -> monetary-quantity, d -> dollar, t3 -> time, g2 -> get-04, g -> get-04, n3 -> name, c3 -> country, d2 -> dollar, m4 -> money, t2 -> team, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@5403f35f,Annotation([Ljava.lang.String;@483f6d77,[Ljava.lang.String;@7e5afaa6,[Ljava.lang.String;@63a12c68),Annotation([Ljava.lang.String;@28f3b248,[Ljava.lang.String;@1b1426f4,[Ledu.cmu.lti.nlp.amr.Dependency;@32b260fa),Annotation([Ljava.lang.String;@581ac8a8,[Ljava.lang.String;@6d4e5011,[Ljava.lang.String;@57d7f8ca),Annotation([Ljava.lang.String;@76c3e77a,[Ljava.lang.String;@78123e82,[Ledu.cmu.lti.nlp.amr.Entity;@67c33749))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / compete-01, ARG1, g / get-04)
(d / dollar, mod, c / country)
(d2 / dollar, mod, c2 / country)
(d3 / dollar, mod, c3 / country)
(g / get-04, ARG0, t / team)
(g / get-04, ARG1, m / monetary-quantity)
(g2 / get-04, ARG0, w / win-01)
(g2 / get-04, ARG1, m2 / monetary-quantity)
(g2 / get-04, ARG2, t2 / team)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, unit, d2 / dollar)
(m3 / monetary-quantity, domain, m4 / money)
(m3 / monetary-quantity, mod, t2 / team)
(m3 / monetary-quantity, unit, d3 / dollar)
(n / name, op, "US")
(n2 / name, op, "US")
(n3 / name, op, "US")
(t3 / time, mod, t4 / this)
(w / win-01, ARG0, c / country)
(w / win-01, ARG1, t3 / time)

Decoded in 1,206,425 microseconds
Sentence: ( End )

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@fba92d3,Annotation([Ljava.lang.String;@662b4c69,[Ljava.lang.String;@fa49800,[Ljava.lang.String;@71238fc2),Annotation([Ljava.lang.String;@2a54a73f,[Ljava.lang.String;@16a0ee18,[Ledu.cmu.lti.nlp.amr.Dependency;@3d6f0054),Annotation([Ljava.lang.String;@505fc5a4,[Ljava.lang.String;@5fbdfdcf,[Ljava.lang.String;@4efc180e),Annotation([Ljava.lang.String;@bd4dc25,[Ljava.lang.String;@25084a1e,[Ledu.cmu.lti.nlp.amr.Entity;@156b88f5))
AMR:


Decoded in 2,490 microseconds
Sentence: Xinhua News Agency , Rome , September 1st , by reporters Aiguo Yang and Changrui Huang

NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (country :name (name :op "Rome"))
NER Entity: (person :name (name :op "Aiguo" :op "Yang"))
NER Entity: (person :name (name :op "Changrui" :op "Huang"))
Spans:
Span 11-13:  Aiguo Yang => (person :name (name :op "Aiguo" :op "Yang"))
Span 13-14:  and => and
Span 14-16:  Changrui Huang => (person :name (name :op "Changrui" :op "Huang"))
Span 10-11:  reporters => (person :ARG0-of report-01)
Span 6-7:  September => (date-entity :month 9)
Span 0-3:  Xinhua News Agency => (organization :name (name :op "Xinhua" :op "News" :op "Agency"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,16,List(3, 2, 1, 0),Changrui Huang,(person :name (name :op "Changrui" :op "Huang")),false), Span(13,14,List(4),and,and,false), Span(11,13,List(8, 7, 6, 5),Aiguo Yang,(person :name (name :op "Aiguo" :op "Yang")),false), Span(10,11,List(10, 9),reporters,(person :ARG0-of report-01),false), Span(6,7,List(12, 11),September,(date-entity :month 9),false), Span(0,3,List(17, 16, 15, 14, 13),Xinhua News Agency,(organization :name (name :op "Xinhua" :op "News" :op "Agency")),false)),Map(2 -> "Changrui", 5 -> person, 12 -> 9, 15 -> "Xinhua", 8 -> "Yang", 7 -> "Aiguo", 17 -> "Agency", 1 -> name, 4 -> and, 11 -> date-entity, 14 -> name, 6 -> name, 0 -> person, 9 -> person, 16 -> "News", 3 -> "Huang", 10 -> report-01, 13 -> organization),Map(n -> name, p2 -> person, d -> date-entity, p -> person, n3 -> name, a -> and, r -> report-01, o -> organization, 9 -> 9, p3 -> person, n2 -> name))),[Ljava.lang.String;@3bf9ce3e,Annotation([Ljava.lang.String;@16610890,[Ljava.lang.String;@71def8f8,[Ljava.lang.String;@383bfa16),Annotation([Ljava.lang.String;@4d465b11,[Ljava.lang.String;@53fdffa1,[Ledu.cmu.lti.nlp.amr.Dependency;@5562c41e),Annotation([Ljava.lang.String;@32ee6fee,[Ljava.lang.String;@4d0f2471,[Ljava.lang.String;@7133da86),Annotation([Ljava.lang.String;@3232a28a,[Ljava.lang.String;@73e22a3d,[Ledu.cmu.lti.nlp.amr.Entity;@47faa49c))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(d / date-entity, month, 9 / 9)
(n / name, op, "Changrui")
(n / name, op, "Huang")
(n2 / name, op, "Aiguo")
(n2 / name, op, "Yang")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(o / organization, name, n3 / name)
(p / person, mod, o / organization)
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(r / report-01, ARG0, p3 / person)
(r / report-01, ARG1, d / date-entity)

Decoded in 310,742 microseconds
Sentence: The 1 - meter diving board preliminaries of the Seventh World Swimming Championship were held here this morning .

NER Entity: (thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championship"))
Spans:
Span 1-2:  1 => 1
Span 5-6:  board => board-01
Span 14-15:  held => hold-04
Span 15-16:  here => here
Span 3-4:  meter => (distance-quantity :unit meter)
Span 17-18:  morning => morning
Span 9-13:  Seventh World Swimming Championship => (thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championship"))
Span 16-17:  this => this

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),morning,morning,false), Span(16,17,List(1),this,this,false), Span(15,16,List(2),here,here,false), Span(14,15,List(3),held,hold-04,false), Span(9,13,List(9, 8, 7, 6, 5, 4),Seventh World Swimming Championship,(thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championship")),false), Span(5,6,List(10),board,board-01,false), Span(3,4,List(12, 11),meter,(distance-quantity :unit meter),false), Span(1,2,List(13),1,1,false)),Map(2 -> here, 5 -> name, 12 -> meter, 8 -> "Swimming", 7 -> "World", 1 -> this, 4 -> thing, 11 -> distance-quantity, 6 -> "Seventh", 0 -> morning, 9 -> "Championship", 3 -> hold-04, 10 -> board-01, 13 -> 1),Map(n -> name, h -> here, b -> board-01, h2 -> hold-04, t -> this, m2 -> meter, d -> distance-quantity, m -> morning, 1 -> 1, t2 -> thing))),[Ljava.lang.String;@28f2a10f,Annotation([Ljava.lang.String;@f736069,[Ljava.lang.String;@6da21078,[Ljava.lang.String;@7fee8714),Annotation([Ljava.lang.String;@4229bb3f,[Ljava.lang.String;@56cdfb3b,[Ledu.cmu.lti.nlp.amr.Dependency;@2b91004a),Annotation([Ljava.lang.String;@20ccf40b,[Ljava.lang.String;@2fb3536e,[Ljava.lang.String;@169e6180),Annotation([Ljava.lang.String;@35aea049,[Ljava.lang.String;@7205765b,[Ledu.cmu.lti.nlp.amr.Entity;@47987356))
AMR:
(b / board-01, ARG1, t2 / thing)
(b / board-01, mod, d / distance-quantity)
(d / distance-quantity, unit, m2 / meter)
(h / here, op, t / this)
(h2 / hold-04, ARG0, 1 / 1)
(h2 / hold-04, ARG1, t2 / thing)
(h2 / hold-04, ARG6, m / morning)
(m / morning, mod, t / this)
(n / name, op, "Championship")
(n / name, op, "Seventh")
(n / name, op, "Swimming")
(n / name, op, "World")
(t2 / thing, name, n / name)

Decoded in 254,336 microseconds
Sentence: Chinese competitor Lan Wei and Sheng Chen both received qualification for the semi-finals .

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Lan" :op "Wei"))
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 4-5:  and => and
Span 7-8:  both => both
Span 0-1:  Chinese => (country :name (name :op "China"))
Span 14-15:  finals => final
Span 2-4:  Lan Wei => (person :name (name :op "Lan" :op "Wei"))
Span 8-9:  received => receive-01
Span 5-7:  Sheng Chen => (person :name (name :op "Sheng" :op "Chen"))

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),finals,final,false), Span(8,9,List(1),received,receive-01,false), Span(7,8,List(2),both,both,false), Span(5,7,List(6, 5, 4, 3),Sheng Chen,(person :name (name :op "Sheng" :op "Chen")),false), Span(4,5,List(7),and,and,false), Span(2,4,List(11, 10, 9, 8),Lan Wei,(person :name (name :op "Lan" :op "Wei")),false), Span(0,1,List(14, 13, 12),Chinese,(country :name (name :op "China")),false)),Map(2 -> both, 5 -> "Sheng", 12 -> country, 8 -> person, 7 -> and, 1 -> receive-01, 4 -> name, 11 -> "Wei", 14 -> "China", 6 -> "Chen", 0 -> final, 9 -> name, 3 -> person, 10 -> "Lan", 13 -> name),Map(n -> name, b -> both, p2 -> person, p -> person, n3 -> name, a -> and, r -> receive-01, c -> country, f -> final, n2 -> name))),[Ljava.lang.String;@22ef9844,Annotation([Ljava.lang.String;@6283d8b8,[Ljava.lang.String;@3b6ddd1d,[Ljava.lang.String;@3f6b0be5),Annotation([Ljava.lang.String;@611889f4,[Ljava.lang.String;@1da2cb77,[Ledu.cmu.lti.nlp.amr.Dependency;@48f278eb),Annotation([Ljava.lang.String;@2f217633,[Ljava.lang.String;@a530d0a,[Ljava.lang.String;@1a18644),Annotation([Ljava.lang.String;@5acf93bb,[Ljava.lang.String;@7e7be63f,[Ledu.cmu.lti.nlp.amr.Entity;@6cd28fa7))
AMR:
(a / and, op, p / person)
(c / country, name, n3 / name)
(f / final, poss, p2 / person)
(n / name, op, "Chen")
(n / name, op, "Sheng")
(n2 / name, op, "Lan")
(n2 / name, op, "Wei")
(n3 / name, op, "China")
(p / person, name, n / name)
(p2 / person, mod, c / country)
(p2 / person, name, n2 / name)
(r / receive-01, ARG0, p2 / person)
(r / receive-01, ARG1, a / and)
(r / receive-01, ARG6, b / both)

Decoded in 303,596 microseconds
Sentence: In the preliminaries , Wei Lan , who is 26 years old this year , from Guangdong , with outstanding skill , occupied the lead position with a total score of 355.35 points .

NER Entity: (person :name (name :op "Wei" :op "Lan"))
NER Entity: (country :name (name :op "Guangdong"))
NER Entity: (country :name (name :op "Guangdong"))
Spans:
Span 9-10:  26 => 26
Span 16-17:  Guangdong => (province :name (name :op "Guangdong"))
Span 24-25:  lead => lead-03
Span 22-23:  occupied => occupy-01
Span 11-12:  old => old
Span 32-33:  points => point
Span 25-26:  position => position
Span 20-21:  skill => skill-level
Span 12-13:  this => this
Span 28-29:  total => total
Span 4-6:  Wei Lan => (person :name (name :op "Wei" :op "Lan"))
Span 13-14:  year => (temporal-quantity :unit year)
Span 10-11:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),points,point,false), Span(28,29,List(1),total,total,false), Span(25,26,List(2),position,position,false), Span(24,25,List(3),lead,lead-03,false), Span(22,23,List(4),occupied,occupy-01,false), Span(20,21,List(5),skill,skill-level,false), Span(16,17,List(8, 7, 6),Guangdong,(province :name (name :op "Guangdong")),false), Span(13,14,List(10, 9),year,(temporal-quantity :unit year),false), Span(12,13,List(11),this,this,false), Span(11,12,List(12),old,old,false), Span(10,11,List(14, 13),years,(temporal-quantity :unit year),false), Span(9,10,List(15),26,26,false), Span(4,6,List(19, 18, 17, 16),Wei Lan,(person :name (name :op "Wei" :op "Lan")),false)),Map(2 -> position, 5 -> skill-level, 12 -> old, 15 -> 26, 8 -> "Guangdong", 18 -> "Wei", 7 -> name, 17 -> name, 1 -> total, 4 -> occupy-01, 11 -> this, 14 -> year, 6 -> province, 0 -> point, 9 -> temporal-quantity, 16 -> person, 19 -> "Lan", 3 -> lead-03, 10 -> year, 13 -> temporal-quantity),Map(n -> name, t4 -> temporal-quantity, 2 -> 26, t -> total, p2 -> position, s -> skill-level, t3 -> this, p -> point, y -> year, p4 -> person, o2 -> old, t2 -> temporal-quantity, l -> lead-03, o -> occupy-01, p3 -> province, n2 -> name, y2 -> year))),[Ljava.lang.String;@614ca7df,Annotation([Ljava.lang.String;@4738a206,[Ljava.lang.String;@66d3eec0,[Ljava.lang.String;@1e04fa0a),Annotation([Ljava.lang.String;@1af2d44a,[Ljava.lang.String;@18d87d80,[Ledu.cmu.lti.nlp.amr.Dependency;@618425b5),Annotation([Ljava.lang.String;@58695725,[Ljava.lang.String;@543588e6,[Ljava.lang.String;@f5acb9d),Annotation([Ljava.lang.String;@4fb3ee4e,[Ljava.lang.String;@5d7148e2,[Ledu.cmu.lti.nlp.amr.Entity;@25fb8912))
AMR:
(l / lead-03, ARG1, p / point)
(n / name, op, "Guangdong")
(n2 / name, op, "Lan")
(n2 / name, op, "Wei")
(o / occupy-01, ARG0, p4 / person)
(o / occupy-01, ARG1, p2 / position)
(o / occupy-01, ARG6, s / skill-level)
(o2 / old, location, p3 / province)
(o2 / old, mod, t4 / temporal-quantity)
(o2 / old, op, o / occupy-01)
(p / point, mod, t / total)
(p2 / position, mod, l / lead-03)
(p3 / province, name, n / name)
(p4 / person, name, n2 / name)
(t2 / temporal-quantity, unit, y / year)
(t3 / this, calendar, o2 / old)
(t4 / temporal-quantity, quant, 2 / 26)
(t4 / temporal-quantity, unit, y2 / year)
(y / year, mod, t3 / this)

Decoded in 608,175 microseconds
Sentence: Sheng Chen , who is 19 years old this year , from Hubei , is temporarily in the sixth position , the a total score of 342.60 points .

NER Entity: (person :name (name :op "Sheng" :op "Chen"))
NER Entity: (country :name (name :op "Hubei"))
Spans:
Span 5-6:  19 => 19
Span 7-8:  old => old
Span 27-28:  points => point
Span 19-20:  position => position
Span 0-2:  Sheng Chen => (person :name (name :op "Sheng" :op "Chen"))
Span 15-16:  temporarily => temporary
Span 8-9:  this => this
Span 23-24:  total => total
Span 9-10:  year => (temporal-quantity :unit year)
Span 6-7:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),points,point,false), Span(23,24,List(1),total,total,false), Span(19,20,List(2),position,position,false), Span(15,16,List(3),temporarily,temporary,false), Span(9,10,List(5, 4),year,(temporal-quantity :unit year),false), Span(8,9,List(6),this,this,false), Span(7,8,List(7),old,old,false), Span(6,7,List(9, 8),years,(temporal-quantity :unit year),false), Span(5,6,List(10),19,19,false), Span(0,2,List(14, 13, 12, 11),Sheng Chen,(person :name (name :op "Sheng" :op "Chen")),false)),Map(2 -> position, 5 -> year, 12 -> name, 8 -> temporal-quantity, 7 -> old, 1 -> total, 4 -> temporal-quantity, 11 -> person, 14 -> "Chen", 6 -> this, 0 -> point, 9 -> year, 3 -> temporary, 10 -> 19, 13 -> "Sheng"),Map(n -> name, t4 -> this, t -> total, p2 -> position, t3 -> temporal-quantity, 1 -> 19, p -> point, y -> year, t2 -> temporary, t5 -> temporal-quantity, o -> old, p3 -> person, y2 -> year))),[Ljava.lang.String;@7c24b813,Annotation([Ljava.lang.String;@2c35e847,[Ljava.lang.String;@7bd4937b,[Ljava.lang.String;@21e360a),Annotation([Ljava.lang.String;@5ba3f27a,[Ljava.lang.String;@58d75e99,[Ledu.cmu.lti.nlp.amr.Dependency;@74751b3),Annotation([Ljava.lang.String;@741a8937,[Ljava.lang.String;@306e95ec,[Ljava.lang.String;@52af26ee),Annotation([Ljava.lang.String;@6fd83fc1,[Ljava.lang.String;@4f2b503c,[Ledu.cmu.lti.nlp.amr.Entity;@bae7dc0))
AMR:
(1 / 19, mod, p / point)
(n / name, op, "Chen")
(n / name, op, "Sheng")
(o / old, mod, t5 / temporal-quantity)
(p / point, mod, t / total)
(p2 / position, poss, p3 / person)
(p3 / person, mod, o / old)
(p3 / person, name, n / name)
(t2 / temporary, mod, p / point)
(t3 / temporal-quantity, unit, y / year)
(t4 / this, calendar, o / old)
(t5 / temporal-quantity, mod, p / point)
(t5 / temporal-quantity, unit, y2 / year)
(y / year, mod, t4 / this)

Decoded in 111,883 microseconds
Sentence: The competitor who is temporarily in second place is the German athlete Bao Lizuo , with a total score of 355.02 points , slightly lower than Wei Lan .

NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Bao" :op "Lizuo"))
NER Entity: (person :name (name :op "Wei" :op "Lan"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 12-14:  Bao Lizuo => (person :name (name :op "Bao" :op "Lizuo"))
Span 10-11:  German => (country :name (name :op "Germany"))
Span 24-25:  lower => lower-01
Span 7-8:  place => place
Span 21-22:  points => point
Span 23-24:  slightly => slight
Span 4-5:  temporarily => temporary
Span 17-18:  total => total
Span 26-28:  Wei Lan => (person :name (name :op "Wei" :op "Lan"))

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,28,List(3, 2, 1, 0),Wei Lan,(person :name (name :op "Wei" :op "Lan")),false), Span(24,25,List(4),lower,lower-01,false), Span(23,24,List(5),slightly,slight,false), Span(21,22,List(6),points,point,false), Span(17,18,List(7),total,total,false), Span(12,14,List(11, 10, 9, 8),Bao Lizuo,(person :name (name :op "Bao" :op "Lizuo")),false), Span(10,11,List(14, 13, 12),German,(country :name (name :op "Germany")),false), Span(7,8,List(15),place,place,false), Span(4,5,List(16),temporarily,temporary,false)),Map(2 -> "Wei", 5 -> slight, 12 -> country, 15 -> place, 8 -> person, 7 -> total, 1 -> name, 4 -> lower-01, 11 -> "Lizuo", 14 -> "Germany", 6 -> point, 0 -> person, 9 -> name, 16 -> temporary, 3 -> "Lan", 10 -> "Bao", 13 -> name),Map(n -> name, t -> total, p2 -> point, s -> slight, p -> person, p4 -> place, n3 -> name, t2 -> temporary, c -> country, l -> lower-01, n2 -> name, p3 -> person))),[Ljava.lang.String;@209da20d,Annotation([Ljava.lang.String;@e15b7e8,[Ljava.lang.String;@1b2abca6,[Ljava.lang.String;@6392827e),Annotation([Ljava.lang.String;@2ed2d9cb,[Ljava.lang.String;@d5b810e,[Ledu.cmu.lti.nlp.amr.Dependency;@43dac38f),Annotation([Ljava.lang.String;@342c38f8,[Ljava.lang.String;@c88a337,[Ljava.lang.String;@5d0a1059),Annotation([Ljava.lang.String;@485966cc,[Ljava.lang.String;@1de76cc7,[Ledu.cmu.lti.nlp.amr.Entity;@54bff557))
AMR:
(c / country, mod, p2 / point)
(c / country, name, n3 / name)
(l / lower-01, ARG0, t2 / temporary)
(l / lower-01, ARG1, p3 / person)
(l / lower-01, ARG2, t / total)
(l / lower-01, ARG6, s / slight)
(l / lower-01, location, p / person)
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Bao")
(n2 / name, op, "Lizuo")
(n3 / name, op, "Germany")
(p / person, name, n / name)
(p3 / person, mod, c / country)
(p3 / person, name, n2 / name)
(p4 / place, time, t2 / temporary)

Decoded in 231,365 microseconds
Sentence: The competitor from Zimbabwe , Si Aiwan , who is temporarily in third place , has a total score of 354.39 points .

NER Entity: (country :name (name :op "Zimbabwe"))
NER Entity: (person :name (name :op "Si" :op "Aiwan"))
Spans:
Span 13-14:  place => place
Span 21-22:  points => point
Span 5-7:  Si Aiwan => (person :name (name :op "Si" :op "Aiwan"))
Span 10-11:  temporarily => temporary
Span 17-18:  total => total

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),points,point,false), Span(17,18,List(1),total,total,false), Span(13,14,List(2),place,place,false), Span(10,11,List(3),temporarily,temporary,false), Span(5,7,List(7, 6, 5, 4),Si Aiwan,(person :name (name :op "Si" :op "Aiwan")),false)),Map(2 -> place, 5 -> name, 7 -> "Aiwan", 1 -> total, 4 -> person, 6 -> "Si", 0 -> point, 3 -> temporary),Map(n -> name, t -> total, p2 -> place, p -> point, t2 -> temporary, p3 -> person))),[Ljava.lang.String;@593aaf41,Annotation([Ljava.lang.String;@5a56cdac,[Ljava.lang.String;@7c711375,[Ljava.lang.String;@57cf54e1),Annotation([Ljava.lang.String;@5b03b9fe,[Ljava.lang.String;@37d4349f,[Ledu.cmu.lti.nlp.amr.Dependency;@434a63ab),Annotation([Ljava.lang.String;@6e0f5f7f,[Ljava.lang.String;@2805d709,[Ljava.lang.String;@3ee37e5a),Annotation([Ljava.lang.String;@2ea41516,[Ljava.lang.String;@3a44431a,[Ledu.cmu.lti.nlp.amr.Entity;@3c7f66c4))
AMR:
(n / name, op, "Aiwan")
(n / name, op, "Si")
(p / point, mod, t / total)
(p / point, mod, t2 / temporary)
(p2 / place, time, t2 / temporary)
(p3 / person, mod, p / point)
(p3 / person, name, n / name)

Decoded in 43,653 microseconds
Sentence: After the competition , the chief coach of the Chinese diving team said to our agency 's reporter : " Sheng Chen is a little nervous today . "

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 0-1:  After => after
Span 15-16:  agency => agency
Span 5-6:  chief => chief
Span 9-10:  Chinese => (country :name (name :op "China"))
Span 2-3:  competition => compete-01
Span 24-25:  little => little
Span 17-18:  reporter => (person :ARG0-of report-01)
Span 12-13:  said => say-01
Span 20-22:  Sheng Chen => (person :name (name :op "Sheng" :op "Chen"))
Span 11-12:  team => team
Span 26-27:  today => today

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),today,today,false), Span(24,25,List(1),little,little,false), Span(20,22,List(5, 4, 3, 2),Sheng Chen,(person :name (name :op "Sheng" :op "Chen")),false), Span(17,18,List(7, 6),reporter,(person :ARG0-of report-01),false), Span(15,16,List(8),agency,agency,false), Span(12,13,List(9),said,say-01,false), Span(11,12,List(10),team,team,false), Span(9,10,List(13, 12, 11),Chinese,(country :name (name :op "China")),false), Span(5,6,List(14),chief,chief,false), Span(2,3,List(15),competition,compete-01,false), Span(0,1,List(16),After,after,false)),Map(2 -> person, 5 -> "Chen", 12 -> name, 15 -> compete-01, 8 -> agency, 7 -> report-01, 1 -> little, 4 -> "Sheng", 11 -> country, 14 -> chief, 6 -> person, 0 -> today, 9 -> say-01, 16 -> after, 3 -> name, 10 -> team, 13 -> "China"),Map(n -> name, t -> today, p2 -> person, s -> say-01, p -> person, a -> agency, c3 -> compete-01, t2 -> team, a2 -> after, r -> report-01, c -> country, l -> little, n2 -> name, c2 -> chief))),[Ljava.lang.String;@194bcebf,Annotation([Ljava.lang.String;@17497425,[Ljava.lang.String;@f0da945,[Ljava.lang.String;@4803b726),Annotation([Ljava.lang.String;@ffaa6af,[Ljava.lang.String;@53ce1329,[Ledu.cmu.lti.nlp.amr.Dependency;@316bcf94),Annotation([Ljava.lang.String;@6404f418,[Ljava.lang.String;@3e11f9e9,[Ljava.lang.String;@1de5f259),Annotation([Ljava.lang.String;@729d991e,[Ljava.lang.String;@31fa1761,[Ledu.cmu.lti.nlp.amr.Entity;@957e06))
AMR:
(a / agency, op, t2 / team)
(a2 / after, op, c3 / compete-01)
(c / country, name, n2 / name)
(c3 / compete-01, ARG1, l / little)
(n / name, op, "Chen")
(n / name, op, "Sheng")
(n2 / name, op, "China")
(p / person, mod, c2 / chief)
(p / person, name, n / name)
(r / report-01, ARG0, p2 / person)
(r / report-01, ARG1, a / agency)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, t / today)
(s / say-01, ARG6, p2 / person)
(s / say-01, time, a2 / after)
(t2 / team, mod, c / country)

Decoded in 768,051 microseconds
Sentence: He also said : " Our athletes are not very used to carrying out competition under strong sunlight . "

Spans:
Span 1-2:  also => also
Span 6-7:  athletes => athlete
Span 12-13:  carrying => carry-01
Span 14-15:  competition => compete-01
Span 0-1:  He => he
Span 13-14:  out => out
Span 2-3:  said => say-01
Span 16-17:  strong => strong
Span 10-11:  used => use-01
Span 9-10:  very => very

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),strong,strong,false), Span(14,15,List(1),competition,compete-01,false), Span(13,14,List(2),out,out,false), Span(12,13,List(3),carrying,carry-01,false), Span(10,11,List(4),used,use-01,false), Span(9,10,List(5),very,very,false), Span(6,7,List(6),athletes,athlete,false), Span(2,3,List(7),said,say-01,false), Span(1,2,List(8),also,also,false), Span(0,1,List(9),He,he,false)),Map(2 -> out, 5 -> very, 8 -> also, 7 -> say-01, 1 -> compete-01, 4 -> use-01, 6 -> athlete, 9 -> he, 0 -> strong, 3 -> carry-01),Map(h -> he, s2 -> say-01, s -> strong, v -> very, a -> athlete, a2 -> also, u -> use-01, c -> compete-01, o -> out, c2 -> carry-01))),[Ljava.lang.String;@32502377,Annotation([Ljava.lang.String;@2c1b194a,[Ljava.lang.String;@4dbb42b7,[Ljava.lang.String;@66f57048),Annotation([Ljava.lang.String;@550dbc7a,[Ljava.lang.String;@21282ed8,[Ledu.cmu.lti.nlp.amr.Dependency;@36916eb0),Annotation([Ljava.lang.String;@7bab3f1a,[Ljava.lang.String;@437da279,[Ljava.lang.String;@23c30a20),Annotation([Ljava.lang.String;@1e1a0406,[Ljava.lang.String;@3cebbb30,[Ledu.cmu.lti.nlp.amr.Entity;@12aba8be))
AMR:
(c / compete-01, ARG1, s / strong)
(c2 / carry-01, ARG1, c / compete-01)
(c2 / carry-01, ARG5, o / out)
(s2 / say-01, ARG0, h / he)
(s2 / say-01, ARG1, a / athlete)
(s2 / say-01, mod, a2 / also)
(u / use-01, ARG1, a / athlete)
(u / use-01, ARG2, c2 / carry-01)
(u / use-01, manner, v / very)

Decoded in 418,105 microseconds
Sentence: At home , they carry out indoor training mostly .

Spans:
Span 4-5:  carry => carry-01
Span 1-2:  home => home
Span 8-9:  mostly => most
Span 5-6:  out => out
Span 3-4:  they => they
Span 7-8:  training => train-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),mostly,most,false), Span(7,8,List(1),training,train-01,false), Span(5,6,List(2),out,out,false), Span(4,5,List(3),carry,carry-01,false), Span(3,4,List(4),they,they,false), Span(1,2,List(5),home,home,false)),Map(2 -> out, 5 -> home, 1 -> train-01, 4 -> they, 0 -> most, 3 -> carry-01),Map(h -> home, t -> train-01, m -> most, t2 -> they, c -> carry-01, o -> out))),[Ljava.lang.String;@290222c1,Annotation([Ljava.lang.String;@67f639d3,[Ljava.lang.String;@6253c26,[Ljava.lang.String;@49049a04),Annotation([Ljava.lang.String;@71a8adcf,[Ljava.lang.String;@27462a88,[Ledu.cmu.lti.nlp.amr.Dependency;@82de64a),Annotation([Ljava.lang.String;@659499f1,[Ljava.lang.String;@51e69659,[Ljava.lang.String;@47e2e487),Annotation([Ljava.lang.String;@201a4587,[Ljava.lang.String;@61001b64,[Ledu.cmu.lti.nlp.amr.Entity;@4310d43))
AMR:
(c / carry-01, ARG0, t2 / they)
(c / carry-01, ARG1, t / train-01)
(c / carry-01, ARG6, h / home)
(c / carry-01, time, o / out)
(m / most, domain, t2 / they)

Decoded in 102,588 microseconds
Sentence: Looks like we still need to train more outdoors . "

Spans:
Span 7-8:  more => more
Span 4-5:  need => need-01
Span 3-4:  still => still
Span 6-7:  train => train-01
Span 2-3:  we => we

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),more,more,false), Span(6,7,List(1),train,train-01,false), Span(4,5,List(2),need,need-01,false), Span(3,4,List(3),still,still,false), Span(2,3,List(4),we,we,false)),Map(2 -> need-01, 1 -> train-01, 4 -> we, 0 -> more, 3 -> still),Map(w -> we, n -> need-01, t -> train-01, s -> still, m -> more))),[Ljava.lang.String;@54a7079e,Annotation([Ljava.lang.String;@26e356f0,[Ljava.lang.String;@47d9a273,[Ljava.lang.String;@4b8ee4de),Annotation([Ljava.lang.String;@27f981c6,[Ljava.lang.String;@1b11171f,[Ledu.cmu.lti.nlp.amr.Dependency;@1151e434),Annotation([Ljava.lang.String;@2dc54ad4,[Ljava.lang.String;@4659191b,[Ljava.lang.String;@55634720),Annotation([Ljava.lang.String;@4b0d79fc,[Ljava.lang.String;@4c1909a3,[Ledu.cmu.lti.nlp.amr.Entity;@428640fa))
AMR:
(n / need-01, ARG1, t / train-01)
(n / need-01, ARG6, m / more)
(n / need-01, mod, s / still)
(t / train-01, ARG1, w / we)

Decoded in 67,943 microseconds
Sentence: He felt that , there were more new competitors from our country participating in this competition .

Spans:
Span 15-16:  competition => compete-01
Span 8-9:  competitors => company
Span 11-12:  country => country
Span 1-2:  felt => feel-01
Span 0-1:  He => he
Span 6-7:  more => more
Span 7-8:  new => new
Span 12-13:  participating => participate-01
Span 14-15:  this => this

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),competition,compete-01,false), Span(14,15,List(1),this,this,false), Span(12,13,List(2),participating,participate-01,false), Span(11,12,List(3),country,country,false), Span(8,9,List(4),competitors,company,false), Span(7,8,List(5),new,new,false), Span(6,7,List(6),more,more,false), Span(1,2,List(7),felt,feel-01,false), Span(0,1,List(8),He,he,false)),Map(2 -> participate-01, 5 -> new, 8 -> he, 7 -> feel-01, 1 -> this, 4 -> company, 6 -> more, 0 -> compete-01, 3 -> country),Map(n -> new, h -> he, t -> this, m -> more, p -> participate-01, c3 -> company, c -> compete-01, f -> feel-01, c2 -> country))),[Ljava.lang.String;@d9345cd,Annotation([Ljava.lang.String;@2d710f1a,[Ljava.lang.String;@29215f06,[Ljava.lang.String;@59505b48),Annotation([Ljava.lang.String;@4efac082,[Ljava.lang.String;@6bd61f98,[Ledu.cmu.lti.nlp.amr.Dependency;@48aca48b),Annotation([Ljava.lang.String;@13fd2ccd,[Ljava.lang.String;@b9b00e0,[Ljava.lang.String;@506ae4d4),Annotation([Ljava.lang.String;@7d4f9aae,[Ljava.lang.String;@72e5a8e,[Ledu.cmu.lti.nlp.amr.Entity;@54e1c68b))
AMR:
(c / compete-01, ARG1, n / new)
(c / compete-01, mod, t / this)
(c3 / company, quant, m / more)
(c3 / company, topic, c2 / country)
(f / feel-01, ARG0, h / he)
(f / feel-01, ARG1, c3 / company)
(p / participate-01, ARG0, c2 / country)
(p / participate-01, ARG1, c / compete-01)

Decoded in 148,152 microseconds
Sentence: They still lack experience in international competitions .

Spans:
Span 3-4:  experience => experience-01
Span 5-6:  international => international
Span 2-3:  lack => lack-01
Span 1-2:  still => still
Span 0-1:  They => they

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),international,international,false), Span(3,4,List(1),experience,experience-01,false), Span(2,3,List(2),lack,lack-01,false), Span(1,2,List(3),still,still,false), Span(0,1,List(4),They,they,false)),Map(2 -> lack-01, 1 -> experience-01, 4 -> they, 0 -> international, 3 -> still),Map(e -> experience-01, t -> they, s -> still, i -> international, l -> lack-01))),[Ljava.lang.String;@53aac487,Annotation([Ljava.lang.String;@52b1beb6,[Ljava.lang.String;@273e7444,[Ljava.lang.String;@7db12bb6),Annotation([Ljava.lang.String;@783a467b,[Ljava.lang.String;@272113c4,[Ledu.cmu.lti.nlp.amr.Dependency;@73e9cf30),Annotation([Ljava.lang.String;@771a660,[Ljava.lang.String;@2d52216b,[Ljava.lang.String;@242b836),Annotation([Ljava.lang.String;@3f6f6701,[Ljava.lang.String;@3527942a,[Ledu.cmu.lti.nlp.amr.Entity;@942a29c))
AMR:
(e / experience-01, ARG1, i / international)
(l / lack-01, ARG0, t / they)
(l / lack-01, ARG1, e / experience-01)
(l / lack-01, mod, s / still)

Decoded in 27,902 microseconds
Sentence: The preliminary competition for the women 's 10 - meter platform diving will be held this afternoon .

Spans:
Span 7-8:  10 => 10
Span 16-17:  afternoon => afternoon
Span 2-3:  competition => compete-01
Span 14-15:  held => hold-04
Span 9-10:  meter => (distance-quantity :unit meter)
Span 10-11:  platform => platform
Span 1-2:  preliminary => preliminary
Span 15-16:  this => this
Span 5-6:  women => woman

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),afternoon,afternoon,false), Span(15,16,List(1),this,this,false), Span(14,15,List(2),held,hold-04,false), Span(10,11,List(3),platform,platform,false), Span(9,10,List(5, 4),meter,(distance-quantity :unit meter),false), Span(7,8,List(6),10,10,false), Span(5,6,List(7),women,woman,false), Span(2,3,List(8),competition,compete-01,false), Span(1,2,List(9),preliminary,preliminary,false)),Map(2 -> hold-04, 5 -> meter, 8 -> compete-01, 7 -> woman, 1 -> this, 4 -> distance-quantity, 6 -> 10, 9 -> preliminary, 0 -> afternoon, 3 -> platform),Map(w -> woman, h -> hold-04, t -> this, p2 -> preliminary, m -> meter, d -> distance-quantity, 1 -> 10, p -> platform, a -> afternoon, c -> compete-01))),[Ljava.lang.String;@1ed6388a,Annotation([Ljava.lang.String;@5a45133e,[Ljava.lang.String;@534a5a98,[Ljava.lang.String;@4f80542f),Annotation([Ljava.lang.String;@60bd273d,[Ljava.lang.String;@121314f7,[Ledu.cmu.lti.nlp.amr.Dependency;@130c12b7),Annotation([Ljava.lang.String;@5e600dd5,[Ljava.lang.String;@576d5deb,[Ljava.lang.String;@5d534f5d),Annotation([Ljava.lang.String;@2e3967ea,[Ljava.lang.String;@70e9c95d,[Ledu.cmu.lti.nlp.amr.Entity;@4d5650ae))
AMR:
(a / afternoon, mod, t / this)
(c / compete-01, ARG0, d / distance-quantity)
(c / compete-01, ARG1, w / woman)
(c / compete-01, ARG6, 1 / 10)
(c / compete-01, mod, p2 / preliminary)
(d / distance-quantity, unit, m / meter)
(h / hold-04, ARG6, 1 / 10)
(h / hold-04, time, a / afternoon)
(p / platform, mod, d / distance-quantity)

Decoded in 158,083 microseconds
Sentence: Mingxia Fu , who won the championship for our country at the World Championship and the Olympic Games , and the competitor from Hebei , Bin Chi , who won the championship at the World Cup will participate in the competition .

NER Entity: (person :name (name :op "Mingxia" :op "Fu"))
NER Entity: (thing :name (name :op "World" :op "Championship"))
NER Entity: (thing :name (name :op "Olympic" :op "Games"))
NER Entity: (country :name (name :op "Hebei"))
NER Entity: (person :name (name :op "Bin" :op "Chi"))
NER Entity: (thing :name (name :op "World" :op "Cup"))
Spans:
Span 19-20:  and => and
Span 14-15:  and => and
Span 25-27:  Bin Chi => (person :name (name :op "Bin" :op "Chi"))
Span 40-41:  competition => compete-01
Span 9-10:  country => country
Span 0-2:  Mingxia Fu => (person :name (name :op "Mingxia" :op "Fu"))
Span 16-18:  Olympic Games => (thing :name (name :op "Olympic" :op "Games"))
Span 37-38:  participate => participate-01
Span 29-30:  won => win-01
Span 4-5:  won => win-01
Span 12-14:  World Championship => (thing :name (name :op "World" :op "Championship"))
Span 34-36:  World Cup => (thing :name (name :op "World" :op "Cup"))

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),competition,compete-01,false), Span(37,38,List(1),participate,participate-01,false), Span(34,36,List(5, 4, 3, 2),World Cup,(thing :name (name :op "World" :op "Cup")),false), Span(29,30,List(6),won,win-01,false), Span(25,27,List(10, 9, 8, 7),Bin Chi,(person :name (name :op "Bin" :op "Chi")),false), Span(19,20,List(11),and,and,false), Span(16,18,List(15, 14, 13, 12),Olympic Games,(thing :name (name :op "Olympic" :op "Games")),false), Span(14,15,List(16),and,and,false), Span(12,14,List(20, 19, 18, 17),World Championship,(thing :name (name :op "World" :op "Championship")),false), Span(9,10,List(21),country,country,false), Span(4,5,List(22),won,win-01,false), Span(0,2,List(26, 25, 24, 23),Mingxia Fu,(person :name (name :op "Mingxia" :op "Fu")),false)),Map(2 -> thing, 5 -> "Cup", 12 -> thing, 8 -> name, 15 -> "Games", 21 -> country, 18 -> name, 24 -> name, 7 -> person, 1 -> participate-01, 17 -> thing, 23 -> person, 26 -> "Fu", 4 -> "World", 11 -> and, 14 -> "Olympic", 20 -> "Championship", 6 -> win-01, 9 -> "Bin", 0 -> compete-01, 22 -> win-01, 16 -> and, 19 -> "World", 10 -> "Chi", 3 -> name, 25 -> "Mingxia", 13 -> name),Map(n -> name, w -> win-01, t -> thing, p2 -> person, n4 -> name, t3 -> thing, p -> participate-01, a -> and, n3 -> name, t2 -> thing, w2 -> win-01, a2 -> and, c -> compete-01, p3 -> person, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@a38c7fe,Annotation([Ljava.lang.String;@6fdbe764,[Ljava.lang.String;@51c668e3,[Ljava.lang.String;@2e6a8155),Annotation([Ljava.lang.String;@6221a451,[Ljava.lang.String;@52719fb6,[Ledu.cmu.lti.nlp.amr.Dependency;@3012646b),Annotation([Ljava.lang.String;@4a883b15,[Ljava.lang.String;@25641d39,[Ljava.lang.String;@7b36aa0c),Annotation([Ljava.lang.String;@5824a83d,[Ljava.lang.String;@537f60bf,[Ledu.cmu.lti.nlp.amr.Entity;@5677323c))
AMR:
(a / and, op, p3 / person)
(a / and, op, t2 / thing)
(a2 / and, op, t2 / thing)
(c / compete-01, ARG0, p3 / person)
(c / compete-01, ARG1, t / thing)
(n / name, op, "Cup")
(n / name, op, "World")
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(n3 / name, op, "Games")
(n3 / name, op, "Olympic")
(n4 / name, op, "Championship")
(n4 / name, op, "World")
(n5 / name, op, "Fu")
(n5 / name, op, "Mingxia")
(p / participate-01, ARG0, p2 / person)
(p / participate-01, ARG1, c / compete-01)
(p2 / person, name, n2 / name)
(p3 / person, name, n5 / name)
(t / thing, name, n / name)
(t2 / thing, name, n3 / name)
(t3 / thing, name, n4 / name)
(w / win-01, ARG0, c2 / country)
(w / win-01, ARG1, a / and)
(w2 / win-01, ARG1, a / and)
(w2 / win-01, ARG2, t3 / thing)

Decoded in 1,800,440 microseconds
Sentence: ( End )

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@18df8434,Annotation([Ljava.lang.String;@65c7a252,[Ljava.lang.String;@4d154ccd,[Ljava.lang.String;@229c6181),Annotation([Ljava.lang.String;@4686afc2,[Ljava.lang.String;@1e0b4072,[Ledu.cmu.lti.nlp.amr.Dependency;@791f145a),Annotation([Ljava.lang.String;@38cee291,[Ljava.lang.String;@4b45a2f5,[Ljava.lang.String;@f09733f),Annotation([Ljava.lang.String;@e350b40,[Ljava.lang.String;@41a0aa7d,[Ledu.cmu.lti.nlp.amr.Entity;@2794eab6))
AMR:


Decoded in 2,583 microseconds
Sentence: Xinhua News Agency , Rome , September 1st , by reporters Changrui Huang and Aiguo Yang

NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (country :name (name :op "Rome"))
NER Entity: (person :name (name :op "Changrui" :op "Huang"))
NER Entity: (person :name (name :op "Aiguo" :op "Yang"))
Spans:
Span 14-16:  Aiguo Yang => (person :name (name :op "Aiguo" :op "Yang"))
Span 13-14:  and => and
Span 11-13:  Changrui Huang => (person :name (name :op "Changrui" :op "Huang"))
Span 10-11:  reporters => (person :ARG0-of report-01)
Span 6-7:  September => (date-entity :month 9)
Span 0-3:  Xinhua News Agency => (organization :name (name :op "Xinhua" :op "News" :op "Agency"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,16,List(3, 2, 1, 0),Aiguo Yang,(person :name (name :op "Aiguo" :op "Yang")),false), Span(13,14,List(4),and,and,false), Span(11,13,List(8, 7, 6, 5),Changrui Huang,(person :name (name :op "Changrui" :op "Huang")),false), Span(10,11,List(10, 9),reporters,(person :ARG0-of report-01),false), Span(6,7,List(12, 11),September,(date-entity :month 9),false), Span(0,3,List(17, 16, 15, 14, 13),Xinhua News Agency,(organization :name (name :op "Xinhua" :op "News" :op "Agency")),false)),Map(2 -> "Aiguo", 5 -> person, 12 -> 9, 15 -> "Xinhua", 8 -> "Huang", 7 -> "Changrui", 17 -> "Agency", 1 -> name, 4 -> and, 11 -> date-entity, 14 -> name, 6 -> name, 0 -> person, 9 -> person, 16 -> "News", 3 -> "Yang", 10 -> report-01, 13 -> organization),Map(n -> name, p2 -> person, d -> date-entity, p -> person, n3 -> name, a -> and, r -> report-01, o -> organization, 9 -> 9, p3 -> person, n2 -> name))),[Ljava.lang.String;@6340e5f0,Annotation([Ljava.lang.String;@45099dd3,[Ljava.lang.String;@13e344d,[Ljava.lang.String;@1ffaf86),Annotation([Ljava.lang.String;@6574a52c,[Ljava.lang.String;@6c1a5b54,[Ledu.cmu.lti.nlp.amr.Dependency;@1c7696c6),Annotation([Ljava.lang.String;@60099951,[Ljava.lang.String;@20140db9,[Ljava.lang.String;@1e6a3214),Annotation([Ljava.lang.String;@368247b9,[Ljava.lang.String;@1a6d8329,[Ledu.cmu.lti.nlp.amr.Entity;@1a942c18))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(d / date-entity, month, 9 / 9)
(n / name, op, "Aiguo")
(n / name, op, "Yang")
(n2 / name, op, "Changrui")
(n2 / name, op, "Huang")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(o / organization, name, n3 / name)
(p / person, mod, o / organization)
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(r / report-01, ARG0, p3 / person)
(r / report-01, ARG1, d / date-entity)

Decoded in 346,112 microseconds
Sentence: The performance of the female competitors of the Chinese diving team , Mingxia Fu and Bin Chi , in the first 6 rounds of the 10 - meter platform diving preliminary competition at the Seventh World Swimming Championships held here today was ideal , and hopes of entering the heats are in sight .

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Mingxia" :op "Fu"))
NER Entity: (person :name (name :op "Bin" :op "Chi"))
NER Entity: (thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championships"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 25-26:  10 => 10
Span 21-22:  6 => 6
Span 44-45:  and => and
Span 14-15:  and => and
Span 15-17:  Bin Chi => (person :name (name :op "Bin" :op "Chi"))
Span 8-9:  Chinese => (country :name (name :op "China"))
Span 31-32:  competition => compete-01
Span 5-6:  competitors => company
Span 47-48:  entering => enter-01
Span 38-39:  held => hold-04
Span 39-40:  here => here
Span 45-46:  hopes => hope-01
Span 42-43:  ideal => ideal
Span 27-28:  meter => (distance-quantity :unit meter)
Span 12-14:  Mingxia Fu => (person :name (name :op "Mingxia" :op "Fu"))
Span 1-2:  performance => perform-01
Span 28-29:  platform => platform
Span 30-31:  preliminary => preliminary
Span 22-23:  rounds => round
Span 34-38:  Seventh World Swimming Championships => (thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championships"))
Span 10-11:  team => team
Span 40-41:  today => today

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),entering,enter-01,false), Span(45,46,List(1),hopes,hope-01,false), Span(44,45,List(2),and,and,false), Span(42,43,List(3),ideal,ideal,false), Span(40,41,List(4),today,today,false), Span(39,40,List(5),here,here,false), Span(38,39,List(6),held,hold-04,false), Span(34,38,List(12, 11, 10, 9, 8, 7),Seventh World Swimming Championships,(thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championships")),false), Span(31,32,List(13),competition,compete-01,false), Span(30,31,List(14),preliminary,preliminary,false), Span(28,29,List(15),platform,platform,false), Span(27,28,List(17, 16),meter,(distance-quantity :unit meter),false), Span(25,26,List(18),10,10,false), Span(22,23,List(19),rounds,round,false), Span(21,22,List(20),6,6,false), Span(15,17,List(24, 23, 22, 21),Bin Chi,(person :name (name :op "Bin" :op "Chi")),false), Span(14,15,List(25),and,and,false), Span(12,14,List(29, 28, 27, 26),Mingxia Fu,(person :name (name :op "Mingxia" :op "Fu")),false), Span(10,11,List(30),team,team,false), Span(8,9,List(33, 32, 31),Chinese,(country :name (name :op "China")),false), Span(5,6,List(34),competitors,company,false), Span(1,2,List(35),performance,perform-01,false)),Map(30 -> team, 2 -> and, 5 -> here, 33 -> "China", 27 -> name, 12 -> "Championships", 8 -> name, 15 -> platform, 21 -> person, 18 -> 10, 24 -> "Chi", 35 -> perform-01, 7 -> thing, 1 -> hope-01, 17 -> meter, 23 -> "Bin", 26 -> person, 4 -> today, 11 -> "Swimming", 32 -> name, 14 -> preliminary, 29 -> "Fu", 20 -> 6, 34 -> company, 28 -> "Mingxia", 6 -> hold-04, 9 -> "Seventh", 0 -> enter-01, 22 -> name, 16 -> distance-quantity, 19 -> round, 10 -> "World", 3 -> ideal, 31 -> country, 25 -> and, 13 -> compete-01),Map(e -> enter-01, n -> name, h -> hope-01, p5 -> perform-01, h2 -> here, t -> today, p2 -> platform, n4 -> name, d -> distance-quantity, m -> meter, 1 -> 10, t3 -> team, p -> preliminary, c3 -> company, a -> and, n3 -> name, p4 -> person, t2 -> thing, i -> ideal, r -> round, a2 -> and, c -> compete-01, h3 -> hold-04, 6 -> 6, p3 -> person, n2 -> name, c2 -> country))),[Ljava.lang.String;@55a147cc,Annotation([Ljava.lang.String;@71ba6d4e,[Ljava.lang.String;@738dc9b,[Ljava.lang.String;@3c77d488),Annotation([Ljava.lang.String;@63376bed,[Ljava.lang.String;@4145bad8,[Ledu.cmu.lti.nlp.amr.Dependency;@d86a6f),Annotation([Ljava.lang.String;@2892d68,[Ljava.lang.String;@5ab956d7,[Ljava.lang.String;@3646a422),Annotation([Ljava.lang.String;@750e2b97,[Ljava.lang.String;@3e27aa33,[Ledu.cmu.lti.nlp.amr.Entity;@2e385cce))
AMR:
(a / and, op, h / hope-01)
(a / and, op, p2 / platform)
(a / and, op, r / round)
(a2 / and, op, c3 / company)
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / person)
(c / compete-01, ARG0, t2 / thing)
(c / compete-01, ARG1, h3 / hold-04)
(c / compete-01, ARG2, d / distance-quantity)
(c / compete-01, mod, p / preliminary)
(c2 / country, name, n4 / name)
(d / distance-quantity, unit, m / meter)
(e / enter-01, ARG1, 1 / 10)
(h / hope-01, ARG0, p3 / person)
(h / hope-01, ARG1, e / enter-01)
(h3 / hold-04, ARG1, i / ideal)
(h3 / hold-04, time, t / today)
(n / name, op, "Championships")
(n / name, op, "Seventh")
(n / name, op, "Swimming")
(n / name, op, "World")
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(n3 / name, op, "Fu")
(n3 / name, op, "Mingxia")
(n4 / name, op, "China")
(p2 / platform, mod, d / distance-quantity)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(p5 / perform-01, ARG0, c3 / company)
(p5 / perform-01, ARG1, t3 / team)
(r / round, quant, 6 / 6)
(t / today, calendar, h2 / here)
(t2 / thing, name, n / name)
(t3 / team, mod, c2 / country)

Decoded in 1,351,260 microseconds
Sentence: At the time this reporter dispatched , in the first 6 rounds of competition , Mingxia Fu and Bin Chi are temporarily occupying the first and third positions with total scores of 339.12 and 290.19 points respectively .

NER Entity: (person :name (name :op "Mingxia" :op "Fu"))
NER Entity: (person :name (name :op "Bin" :op "Chi"))
Spans:
Span 10-11:  6 => 6
Span 33-34:  and => and
Span 25-26:  and => and
Span 17-18:  and => and
Span 18-20:  Bin Chi => (person :name (name :op "Bin" :op "Chi"))
Span 13-14:  competition => compete-01
Span 5-6:  dispatched => dispatch-01
Span 15-17:  Mingxia Fu => (person :name (name :op "Mingxia" :op "Fu"))
Span 22-23:  occupying => occupy-01
Span 35-36:  points => point
Span 27-28:  positions => position
Span 4-5:  reporter => (person :ARG0-of report-01)
Span 36-37:  respectively => respective
Span 11-12:  rounds => round
Span 21-22:  temporarily => temporary
Span 3-4:  this => this
Span 2-3:  time => time
Span 29-30:  total => total

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),respectively,respective,false), Span(35,36,List(1),points,point,false), Span(33,34,List(2),and,and,false), Span(29,30,List(3),total,total,false), Span(27,28,List(4),positions,position,false), Span(25,26,List(5),and,and,false), Span(22,23,List(6),occupying,occupy-01,false), Span(21,22,List(7),temporarily,temporary,false), Span(18,20,List(11, 10, 9, 8),Bin Chi,(person :name (name :op "Bin" :op "Chi")),false), Span(17,18,List(12),and,and,false), Span(15,17,List(16, 15, 14, 13),Mingxia Fu,(person :name (name :op "Mingxia" :op "Fu")),false), Span(13,14,List(17),competition,compete-01,false), Span(11,12,List(18),rounds,round,false), Span(10,11,List(19),6,6,false), Span(5,6,List(20),dispatched,dispatch-01,false), Span(4,5,List(22, 21),reporter,(person :ARG0-of report-01),false), Span(3,4,List(23),this,this,false), Span(2,3,List(24),time,time,false)),Map(2 -> and, 5 -> and, 12 -> and, 8 -> person, 15 -> "Mingxia", 21 -> person, 18 -> round, 24 -> time, 7 -> temporary, 1 -> point, 17 -> compete-01, 23 -> this, 4 -> position, 11 -> "Chi", 14 -> name, 20 -> dispatch-01, 6 -> occupy-01, 9 -> name, 0 -> respective, 22 -> report-01, 16 -> "Fu", 19 -> 6, 10 -> "Bin", 3 -> total, 13 -> person),Map(n -> name, t4 -> time, r3 -> report-01, p5 -> person, t -> total, p2 -> position, a3 -> and, d -> dispatch-01, t3 -> this, r2 -> round, p -> point, a -> and, p4 -> person, t2 -> temporary, r -> respective, a2 -> and, 6 -> 6, c -> compete-01, o -> occupy-01, p3 -> person, n2 -> name))),[Ljava.lang.String;@2ddc9a9f,Annotation([Ljava.lang.String;@298a5e20,[Ljava.lang.String;@2a7f1f10,[Ljava.lang.String;@46cdf8bd),Annotation([Ljava.lang.String;@f0c8a99,[Ljava.lang.String;@740cae06,[Ledu.cmu.lti.nlp.amr.Dependency;@26d9b808),Annotation([Ljava.lang.String;@f78a47e,[Ljava.lang.String;@644baf4a,[Ljava.lang.String;@7526515b),Annotation([Ljava.lang.String;@1ed4ae0f,[Ljava.lang.String;@54c5a2ff,[Ledu.cmu.lti.nlp.amr.Entity;@6d4d66d2))
AMR:
(a2 / and, op, p2 / position)
(a3 / and, mod, r / respective)
(a3 / and, op, c / compete-01)
(a3 / and, op, d / dispatch-01)
(a3 / and, op, o / occupy-01)
(a3 / and, op, p3 / person)
(c / compete-01, ARG1, p / point)
(c / compete-01, quant, r2 / round)
(d / dispatch-01, ARG0, p5 / person)
(d / dispatch-01, ARG1, t4 / time)
(n / name, op, "Bin")
(n / name, op, "Chi")
(n2 / name, op, "Fu")
(n2 / name, op, "Mingxia")
(o / occupy-01, ARG0, p4 / person)
(o / occupy-01, ARG1, p2 / position)
(o / occupy-01, duration, t2 / temporary)
(p / point, quant, a / and)
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)
(r2 / round, quant, 6 / 6)
(r3 / report-01, ARG0, p5 / person)
(r3 / report-01, ARG1, t / total)
(r3 / report-01, mod, t3 / this)

Decoded in 908,404 microseconds
Sentence: If accidents do not occur , their hopes of entering the heats are already in sight .

Spans:
Span 13-14:  already => already
Span 2-3:  do => do-02
Span 9-10:  entering => enter-01
Span 7-8:  hopes => hope-01
Span 4-5:  occur => occur-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),already,already,false), Span(9,10,List(1),entering,enter-01,false), Span(7,8,List(2),hopes,hope-01,false), Span(4,5,List(3),occur,occur-01,false), Span(2,3,List(4),do,do-02,false)),Map(2 -> hope-01, 1 -> enter-01, 4 -> do-02, 0 -> already, 3 -> occur-01),Map(e -> enter-01, h -> hope-01, d -> do-02, a -> already, o -> occur-01))),[Ljava.lang.String;@2a265ea9,Annotation([Ljava.lang.String;@11392934,[Ljava.lang.String;@6892b3b6,[Ljava.lang.String;@6e6f2380),Annotation([Ljava.lang.String;@76a4ebf2,[Ljava.lang.String;@2e8c1c9b,[Ledu.cmu.lti.nlp.amr.Dependency;@53fe15ff),Annotation([Ljava.lang.String;@449a4f23,[Ljava.lang.String;@1530c739,[Ljava.lang.String;@5b1669c0),Annotation([Ljava.lang.String;@78e4deb0,[Ljava.lang.String;@6e9175d8,[Ledu.cmu.lti.nlp.amr.Entity;@7d0b7e3c))
AMR:
(d / do-02, ARG1, o / occur-01)
(e / enter-01, ARG1, a / already)
(h / hope-01, ARG1, e / enter-01)
(o / occur-01, ARG1, h / hope-01)

Decoded in 28,626 microseconds
Sentence: Occupying the second position is the US competitor , Richard .

NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Richard"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 3-4:  position => position
Span 6-7:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(2, 1, 0),US,(country :name (name :op "US")),false), Span(3,4,List(3),position,position,false)),Map(2 -> "US", 1 -> name, 0 -> country, 3 -> position),Map(n -> name, p -> position, c -> country))),[Ljava.lang.String;@15bb5034,Annotation([Ljava.lang.String;@4b741d6d,[Ljava.lang.String;@2eae8e6e,[Ljava.lang.String;@8f2ef19),Annotation([Ljava.lang.String;@470734c3,[Ljava.lang.String;@2cf3d63b,[Ledu.cmu.lti.nlp.amr.Dependency;@7674f035),Annotation([Ljava.lang.String;@69e153c5,[Ljava.lang.String;@173ed316,[Ljava.lang.String;@25ce9dc4),Annotation([Ljava.lang.String;@74ea2410,[Ljava.lang.String;@17f62e33,[Ledu.cmu.lti.nlp.amr.Entity;@76b1e9b8))
AMR:
(c / country, name, n / name)
(n / name, op, "US")
(p / position, mod, c / country)

Decoded in 14,262 microseconds
Sentence: Her performance was 303.00 points .

Spans:
Span 1-2:  performance => perform-01
Span 4-5:  points => point

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),points,point,false), Span(1,2,List(1),performance,perform-01,false)),Map(1 -> perform-01, 0 -> point),Map(p2 -> perform-01, p -> point))),[Ljava.lang.String;@27406a17,Annotation([Ljava.lang.String;@2af004b,[Ljava.lang.String;@248e319b,[Ljava.lang.String;@5d0bf09b),Annotation([Ljava.lang.String;@793f29ff,[Ljava.lang.String;@3e8c3cb,[Ledu.cmu.lti.nlp.amr.Dependency;@563f38c4),Annotation([Ljava.lang.String;@543295b0,[Ljava.lang.String;@54422e18,[Ljava.lang.String;@117159c0),Annotation([Ljava.lang.String;@3e27ba32,[Ljava.lang.String;@7ef82753,[Ledu.cmu.lti.nlp.amr.Entity;@3b0fe47a))
AMR:
(p2 / perform-01, ARG1, p / point)

Decoded in 5,789 microseconds
Sentence: In the preliminary men 's 1 - meter platform diving competition this morning , our competitors Lan Wei and Sheng Chen have already gained rights to the heats .

NER Entity: (person :name (name :op "Lan" :op "Wei"))
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
Spans:
Span 5-6:  1 => 1
Span 22-23:  already => already
Span 18-19:  and => and
Span 10-11:  competition => compete-01
Span 15-16:  competitors => company
Span 23-24:  gained => gain-02
Span 16-18:  Lan Wei => (person :name (name :op "Lan" :op "Wei"))
Span 3-4:  men => man
Span 7-8:  meter => (distance-quantity :unit meter)
Span 12-13:  morning => morning
Span 8-9:  platform => platform
Span 2-3:  preliminary => preliminary
Span 24-25:  rights => right
Span 19-21:  Sheng Chen => (person :name (name :op "Sheng" :op "Chen"))
Span 11-12:  this => this

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),rights,right,false), Span(23,24,List(1),gained,gain-02,false), Span(22,23,List(2),already,already,false), Span(19,21,List(6, 5, 4, 3),Sheng Chen,(person :name (name :op "Sheng" :op "Chen")),false), Span(18,19,List(7),and,and,false), Span(16,18,List(11, 10, 9, 8),Lan Wei,(person :name (name :op "Lan" :op "Wei")),false), Span(15,16,List(12),competitors,company,false), Span(12,13,List(13),morning,morning,false), Span(11,12,List(14),this,this,false), Span(10,11,List(15),competition,compete-01,false), Span(8,9,List(16),platform,platform,false), Span(7,8,List(18, 17),meter,(distance-quantity :unit meter),false), Span(5,6,List(19),1,1,false), Span(3,4,List(20),men,man,false), Span(2,3,List(21),preliminary,preliminary,false)),Map(2 -> already, 5 -> "Sheng", 12 -> company, 15 -> compete-01, 8 -> person, 21 -> preliminary, 18 -> meter, 7 -> and, 17 -> distance-quantity, 1 -> gain-02, 4 -> name, 11 -> "Wei", 14 -> this, 20 -> man, 6 -> "Chen", 0 -> right, 9 -> name, 16 -> platform, 19 -> 1, 3 -> person, 10 -> "Lan", 13 -> morning),Map(m3 -> man, n -> name, t -> this, m2 -> meter, p2 -> person, d -> distance-quantity, m -> morning, 1 -> 1, g -> gain-02, p -> person, a -> already, p4 -> preliminary, r -> right, a2 -> and, c -> company, p3 -> platform, n2 -> name, c2 -> compete-01))),[Ljava.lang.String;@202b0582,Annotation([Ljava.lang.String;@235ecd9f,[Ljava.lang.String;@1ca3b418,[Ljava.lang.String;@58cbafc2),Annotation([Ljava.lang.String;@2034b64c,[Ljava.lang.String;@75d3a5e0,[Ledu.cmu.lti.nlp.amr.Dependency;@74d1dc36),Annotation([Ljava.lang.String;@7161d8d1,[Ljava.lang.String;@74e28667,[Ljava.lang.String;@1cf6d1be),Annotation([Ljava.lang.String;@663c9e7a,[Ljava.lang.String;@19e4653c,[Ledu.cmu.lti.nlp.amr.Entity;@795509d9))
AMR:
(a2 / and, op, p / person)
(a2 / and, op, p2 / person)
(c2 / compete-01, ARG0, m3 / man)
(c2 / compete-01, ARG1, p3 / platform)
(c2 / compete-01, ARG6, m / morning)
(c2 / compete-01, mod, d / distance-quantity)
(d / distance-quantity, unit, m2 / meter)
(g / gain-02, ARG0, a2 / and)
(g / gain-02, ARG1, r / right)
(g / gain-02, time, a / already)
(m / morning, mod, t / this)
(m / morning, poss, 1 / 1)
(m3 / man, mod, p4 / preliminary)
(n / name, op, "Chen")
(n / name, op, "Sheng")
(n2 / name, op, "Lan")
(n2 / name, op, "Wei")
(p / person, name, n / name)
(p2 / person, name, c / company)
(p2 / person, name, n2 / name)
(p4 / preliminary, op, g / gain-02)

Decoded in 859,257 microseconds
Sentence: The results of today 's preliminary women 's water - polo competition are : the Hungarian team defeated the Canadian team by 13 : 7 , the French team defeated the Brazilian team by 10 : 9 , the Australian team defeated the German team by 10 : 8 , the Russian team defeated the Dutch team by 7 : 6 , the US team defeated the Kazakhstani team by 10 : 5 , and the Italian team defeated the New Zealand team by 12 : 2 .

NER Entity: (thing :name (name :op "Hungarian"))
NER Entity: (thing :name (name :op "Canadian"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Dutch"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Kazakhstani"))
NER Entity: (thing :name (name :op "Italian"))
NER Entity: (country :name (name :op "New" :op "Zealand"))
NER Entity: (thing :name (name :op "Italian"))
NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "Canadian"))
Spans:
Span 70-71:  10 => 10
Span 46-47:  10 => 10
Span 34-35:  10 => 10
Span 84-85:  12 => 12
Span 22-23:  13 => 13
Span 86-87:  2 => 2
Span 72-73:  5 => 5
Span 60-61:  6 => 6
Span 58-59:  7 => 7
Span 24-25:  7 => 7
Span 48-49:  8 => 8
Span 36-37:  9 => 9
Span 74-75:  and => and
Span 39-40:  Australian => (country :name (name :op "Australia"))
Span 31-32:  Brazilian => (country :name (name :op "Brazil"))
Span 19-20:  Canadian => (country :name (name :op "Canada"))
Span 11-12:  competition => compete-01
Span 27-28:  French => (country :name (name :op "France"))
Span 43-44:  German => (country :name (name :op "Germany"))
Span 76-77:  Italian => (country :name (name :op "Italy"))
Span 80-82:  New Zealand => (country :name (name :op "New" :op "Zealand"))
Span 5-6:  preliminary => preliminary
Span 1-2:  results => result
Span 51-52:  Russian => (country :name (name :op "Russia"))
Span 82-83:  team => team
Span 77-78:  team => team
Span 68-69:  team => team
Span 64-65:  team => team
Span 56-57:  team => team
Span 52-53:  team => team
Span 44-45:  team => team
Span 40-41:  team => team
Span 32-33:  team => team
Span 28-29:  team => team
Span 20-21:  team => team
Span 16-17:  team => team
Span 3-4:  today => today
Span 63-64:  US => (country :name (name :op "US"))
Span 8-9:  water => water
Span 6-7:  women => woman

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(86,87,List(0),2,2,false), Span(84,85,List(1),12,12,false), Span(82,83,List(2),team,team,false), Span(80,82,List(6, 5, 4, 3),New Zealand,(country :name (name :op "New" :op "Zealand")),false), Span(77,78,List(7),team,team,false), Span(76,77,List(10, 9, 8),Italian,(country :name (name :op "Italy")),false), Span(74,75,List(11),and,and,false), Span(72,73,List(12),5,5,false), Span(70,71,List(13),10,10,false), Span(68,69,List(14),team,team,false), Span(64,65,List(15),team,team,false), Span(63,64,List(18, 17, 16),US,(country :name (name :op "US")),false), Span(60,61,List(19),6,6,false), Span(58,59,List(20),7,7,false), Span(56,57,List(21),team,team,false), Span(52,53,List(22),team,team,false), Span(51,52,List(25, 24, 23),Russian,(country :name (name :op "Russia")),false), Span(48,49,List(26),8,8,false), Span(46,47,List(27),10,10,false), Span(44,45,List(28),team,team,false), Span(43,44,List(31, 30, 29),German,(country :name (name :op "Germany")),false), Span(40,41,List(32),team,team,false), Span(39,40,List(35, 34, 33),Australian,(country :name (name :op "Australia")),false), Span(36,37,List(36),9,9,false), Span(34,35,List(37),10,10,false), Span(32,33,List(38),team,team,false), Span(31,32,List(41, 40, 39),Brazilian,(country :name (name :op "Brazil")),false), Span(28,29,List(42),team,team,false), Span(27,28,List(45, 44, 43),French,(country :name (name :op "France")),false), Span(24,25,List(46),7,7,false), Span(22,23,List(47),13,13,false), Span(20,21,List(48),team,team,false), Span(19,20,List(51, 50, 49),Canadian,(country :name (name :op "Canada")),false), Span(16,17,List(52),team,team,false), Span(11,12,List(53),competition,compete-01,false), Span(8,9,List(54),water,water,false), Span(6,7,List(55),women,woman,false), Span(5,6,List(56),preliminary,preliminary,false), Span(3,4,List(57),today,today,false), Span(1,2,List(58),results,result,false)),Map(57 -> today, 30 -> name, 39 -> country, 45 -> "France", 51 -> "Canada", 2 -> team, 5 -> "New", 48 -> team, 33 -> country, 27 -> 10, 54 -> water, 12 -> 5, 8 -> country, 15 -> team, 42 -> team, 36 -> 9, 21 -> team, 18 -> "US", 24 -> name, 53 -> compete-01, 35 -> "Australia", 41 -> "Brazil", 56 -> preliminary, 7 -> team, 17 -> name, 1 -> 12, 50 -> name, 44 -> name, 23 -> country, 38 -> team, 47 -> 13, 4 -> name, 26 -> 8, 11 -> and, 32 -> team, 14 -> team, 20 -> 7, 29 -> country, 46 -> 7, 52 -> team, 34 -> name, 6 -> "Zealand", 28 -> team, 55 -> woman, 40 -> name, 49 -> country, 0 -> 2, 9 -> name, 43 -> country, 22 -> team, 58 -> result, 16 -> country, 37 -> 10, 19 -> 6, 3 -> country, 10 -> "Italy", 25 -> "Russia", 31 -> "Germany", 13 -> 10),Map(n -> name, w -> water, c8 -> country, t4 -> team, 2 -> 2, 72 -> 7, 5 -> 5, t -> team, 12 -> 10, t11 -> team, 8 -> 8, 15 -> 13, c7 -> country, n7 -> name, c10 -> compete-01, n4 -> name, c4 -> country, t6 -> team, t9 -> team, 7 -> 7, 1 -> 12, t3 -> team, p -> preliminary, n3 -> name, c3 -> country, a -> and, t10 -> team, n6 -> name, 14 -> 10, t13 -> today, c6 -> country, c9 -> country, n9 -> name, t2 -> team, w2 -> woman, t5 -> team, r -> result, c -> country, 6 -> 6, t8 -> team, 9 -> 9, n8 -> name, c2 -> country, n2 -> name, t7 -> team, 13 -> 10, t12 -> team, c5 -> country, n5 -> name))),[Ljava.lang.String;@53045c6c,Annotation([Ljava.lang.String;@5149d738,[Ljava.lang.String;@6bbe85a8,[Ljava.lang.String;@3a7442c7),Annotation([Ljava.lang.String;@4be29ed9,[Ljava.lang.String;@548d708a,[Ledu.cmu.lti.nlp.amr.Dependency;@4b013c76),Annotation([Ljava.lang.String;@53fb3dab,[Ljava.lang.String;@cb0755b,[Ljava.lang.String;@33065d67),Annotation([Ljava.lang.String;@712625fd,[Ljava.lang.String;@7bba5817,[Ledu.cmu.lti.nlp.amr.Entity;@742ff096))
AMR:
(12 / 10, calendar, 5 / 5)
(13 / 10, mod, 72 / 7)
(13 / 10, mod, t3 / team)
(14 / 10, op, c10 / compete-01)
(72 / 7, calendar, c8 / country)
(9 / 9, calendar, c6 / country)
(a / and, op, c / country)
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(a / and, op, r / result)
(a / and, op, t12 / team)
(a / and, op, t2 / team)
(a / and, op, w / water)
(c / country, mod, 7 / 7)
(c / country, name, n / name)
(c10 / compete-01, ARG1, r / result)
(c10 / compete-01, ARG6, 72 / 7)
(c2 / country, name, n2 / name)
(c3 / country, calendar, 6 / 6)
(c3 / country, mod, 1 / 12)
(c3 / country, name, n3 / name)
(c4 / country, calendar, 8 / 8)
(c4 / country, mod, 5 / 5)
(c4 / country, name, n4 / name)
(c5 / country, mod, t4 / team)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(c7 / country, name, n7 / name)
(c8 / country, name, n8 / name)
(c9 / country, name, n9 / name)
(n / name, op, "New")
(n / name, op, "Zealand")
(n2 / name, op, "Italy")
(n3 / name, op, "US")
(n4 / name, op, "Russia")
(n5 / name, op, "Germany")
(n6 / name, op, "Australia")
(n7 / name, op, "Brazil")
(n8 / name, op, "France")
(n9 / name, op, "Canada")
(r / result, mod, 15 / 13)
(r / result, prep-in, w2 / woman)
(t / team, mod, c / country)
(t10 / team, mod, c8 / country)
(t11 / team, poss, c9 / country)
(t11 / team, poss, t12 / team)
(t2 / team, mod, c2 / country)
(t2 / team, poss, 2 / 2)
(t4 / team, mod, c3 / country)
(t5 / team, poss, t6 / team)
(t6 / team, mod, c4 / country)
(t7 / team, mod, c5 / country)
(t7 / team, poss, t8 / team)
(t8 / team, mod, c6 / country)
(t9 / team, op, c10 / compete-01)
(t9 / team, poss, c7 / country)
(w2 / woman, mod, p / preliminary)
(w2 / woman, poss, t13 / today)

Decoded in 2,111,313 microseconds
Sentence: There are 12 teams totally participating in the competition .

Spans:
Span 2-3:  12 => 12
Span 8-9:  competition => compete-01
Span 5-6:  participating => participate-01
Span 3-4:  teams => team

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),competition,compete-01,false), Span(5,6,List(1),participating,participate-01,false), Span(3,4,List(2),teams,team,false), Span(2,3,List(3),12,12,false)),Map(2 -> team, 1 -> participate-01, 0 -> compete-01, 3 -> 12),Map(t -> team, 1 -> 12, p -> participate-01, c -> compete-01))),[Ljava.lang.String;@75437611,Annotation([Ljava.lang.String;@350aac89,[Ljava.lang.String;@1c5920df,[Ljava.lang.String;@17f9d882),Annotation([Ljava.lang.String;@79e4c792,[Ljava.lang.String;@196a42c3,[Ledu.cmu.lti.nlp.amr.Dependency;@4c60d6e9),Annotation([Ljava.lang.String;@15043a2f,[Ljava.lang.String;@4a83a74a,[Ljava.lang.String;@1349883),Annotation([Ljava.lang.String;@4b29d1d2,[Ljava.lang.String;@7f485fda,[Ledu.cmu.lti.nlp.amr.Entity;@28261e8e))
AMR:
(c / compete-01, ARG1, 1 / 12)
(p / participate-01, ARG1, c / compete-01)
(p / participate-01, compared-to, t / team)

Decoded in 54,815 microseconds
Sentence: ( End )

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@d737b89,Annotation([Ljava.lang.String;@8519cb4,[Ljava.lang.String;@35dab4eb,[Ljava.lang.String;@2d901eb0),Annotation([Ljava.lang.String;@3ba987b8,[Ljava.lang.String;@3f191845,[Ledu.cmu.lti.nlp.amr.Dependency;@5f049ea1),Annotation([Ljava.lang.String;@72cc7e6f,[Ljava.lang.String;@5afa3c9,[Ljava.lang.String;@72035809),Annotation([Ljava.lang.String;@909217e,[Ljava.lang.String;@18271936,[Ledu.cmu.lti.nlp.amr.Entity;@606e4010))
AMR:


Decoded in 2,388 microseconds
--- Stage1 evaluation ---
Precision: NaN
Recall: NaN
F1: NaN
