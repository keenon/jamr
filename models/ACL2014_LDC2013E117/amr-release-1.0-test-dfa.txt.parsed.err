Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: I am 24 and a mother of a 2 and a half year old.

Spans:
Span 8-9:  2 => 2
Span 2-3:  24 => 24
Span 9-10:  and => and
Span 3-4:  and => and
Span 11-12:  half => half
Span 13-14:  old => old
Span 12-13:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),old,old,false), Span(12,13,List(2, 1),year,(temporal-quantity :unit year),false), Span(11,12,List(3),half,half,false), Span(9,10,List(4),and,and,false), Span(8,9,List(5),2,2,false), Span(3,4,List(6),and,and,false), Span(2,3,List(7),24,24,false)),Map(2 -> year, 5 -> 2, 7 -> 24, 1 -> temporal-quantity, 4 -> and, 6 -> and, 0 -> old, 3 -> half),Map(2 -> 2, h -> half, t -> temporal-quantity, y -> year, a -> and, a2 -> and, 22 -> 24, o -> old))),[Ljava.lang.String;@70e8f8e,Annotation([Ljava.lang.String;@17046283,[Ljava.lang.String;@5bd03f44,[Ljava.lang.String;@29626d54),Annotation([Ljava.lang.String;@5a63f509,[Ljava.lang.String;@6e4784bc,[Ledu.cmu.lti.nlp.amr.Dependency;@34b7ac2f),Annotation([Ljava.lang.String;@e056f20,[Ljava.lang.String;@4b0b0854,[Ljava.lang.String;@19bb07ed),Annotation([Ljava.lang.String;@10e41621,[Ljava.lang.String;@353d0772,[Ledu.cmu.lti.nlp.amr.Entity;@2667f029))
AMR:
(22 / 24, op, h / half)
(a / and, op, h / half)
(a2 / and, op, h / half)
(o / old, mod, t / temporal-quantity)
(t / temporal-quantity, mod, h / half)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)

Decoded in 590,038 microseconds
Sentence: Me and my son's father have been broken up since August.

NER Entity: (country :name (name :op "Me"))
Spans:
Span 1-2:  and => and
Span 11-12:  August => (date-entity :month 8)
Span 5-6:  father => father
Span 10-11:  since => since
Span 3-4:  son => son

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),August,(date-entity :month 8),false), Span(10,11,List(2),since,since,false), Span(5,6,List(3),father,father,false), Span(3,4,List(4),son,son,false), Span(1,2,List(5),and,and,false)),Map(2 -> since, 5 -> and, 1 -> 8, 4 -> son, 0 -> date-entity, 3 -> father),Map(s2 -> son, 8 -> 8, s -> since, d -> date-entity, a -> and, f -> father))),[Ljava.lang.String;@72057ecf,Annotation([Ljava.lang.String;@1afd44cb,[Ljava.lang.String;@6973b51b,[Ljava.lang.String;@1ab3a8c8),Annotation([Ljava.lang.String;@43195e57,[Ljava.lang.String;@333291e3,[Ledu.cmu.lti.nlp.amr.Dependency;@479d31f3),Annotation([Ljava.lang.String;@40ef3420,[Ljava.lang.String;@498d318c,[Ljava.lang.String;@6e171cd7),Annotation([Ljava.lang.String;@402bba4f,[Ljava.lang.String;@795cd85e,[Ledu.cmu.lti.nlp.amr.Entity;@59fd97a8))
AMR:
(a / and, op, f / father)
(d / date-entity, month, 8 / 8)
(f / father, poss, s2 / son)
(s / since, op, a / and)
(s / since, op, d / date-entity)

Decoded in 85,972 microseconds
Sentence: I want to start dating other people and my son's father says if I do he will have nothing to do with his son.

Spans:
Span 7-8:  and => and
Span 21-22:  do => do-02
Span 15-16:  do => do-02
Span 11-12:  father => father
Span 19-20:  nothing => nothing
Span 5-6:  other => other
Span 6-7:  people => people
Span 12-13:  says => say-01
Span 24-25:  son => son
Span 9-10:  son => son
Span 3-4:  start => start-01
Span 1-2:  want => want-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),son,son,false), Span(21,22,List(1),do,do-02,false), Span(19,20,List(2),nothing,nothing,false), Span(15,16,List(3),do,do-02,false), Span(12,13,List(4),says,say-01,false), Span(11,12,List(5),father,father,false), Span(9,10,List(6),son,son,false), Span(7,8,List(7),and,and,false), Span(6,7,List(8),people,people,false), Span(5,6,List(9),other,other,false), Span(3,4,List(10),start,start-01,false), Span(1,2,List(11),want,want-01,false)),Map(2 -> nothing, 5 -> father, 8 -> people, 7 -> and, 1 -> do-02, 11 -> want-01, 4 -> say-01, 6 -> son, 9 -> other, 0 -> son, 10 -> start-01, 3 -> do-02),Map(w -> want-01, n -> nothing, s2 -> say-01, s -> son, s4 -> start-01, d -> do-02, p -> people, a -> and, d2 -> do-02, s3 -> son, o -> other, f -> father))),[Ljava.lang.String;@7334aada,Annotation([Ljava.lang.String;@1d9b7cce,[Ljava.lang.String;@4d9e68d0,[Ljava.lang.String;@42e99e4a),Annotation([Ljava.lang.String;@14dd9eb7,[Ljava.lang.String;@52e6fdee,[Ledu.cmu.lti.nlp.amr.Dependency;@6c80d78a),Annotation([Ljava.lang.String;@62150f9e,[Ljava.lang.String;@1a451d4d,[Ljava.lang.String;@7fa98a66),Annotation([Ljava.lang.String;@15ff3e9e,[Ljava.lang.String;@5fdcaa40,[Ledu.cmu.lti.nlp.amr.Entity;@6dc17b83))
AMR:
(a / and, op, s2 / say-01)
(a / and, op, w / want-01)
(d / do-02, ARG0, s / son)
(d / do-02, ARG1, n / nothing)
(d2 / do-02, ARG1, d / do-02)
(f / father, poss, s3 / son)
(p / people, mod, o / other)
(s2 / say-01, ARG0, f / father)
(s2 / say-01, ARG1, d2 / do-02)
(s4 / start-01, ARG1, p / people)
(w / want-01, ARG1, s4 / start-01)

Decoded in 631,113 microseconds
Sentence: He is very possesive and controlling but he has no right to be as we are not together.

Spans:
Span 4-5:  and => and
Span 6-7:  but => contrast-01
Span 5-6:  controlling => control-01
Span 0-1:  He => he
Span 9-10:  no => -
Span 10-11:  right => right
Span 17-18:  together => together
Span 2-3:  very => very
Span 14-15:  we => we

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),together,together,false), Span(14,15,List(1),we,we,false), Span(10,11,List(2),right,right,false), Span(9,10,List(3),no,-,false), Span(6,7,List(4),but,contrast-01,false), Span(5,6,List(5),controlling,control-01,false), Span(4,5,List(6),and,and,false), Span(2,3,List(7),very,very,false), Span(0,1,List(8),He,he,false)),Map(2 -> right, 5 -> control-01, 8 -> he, 7 -> very, 1 -> we, 4 -> contrast-01, 6 -> and, 0 -> together, 3 -> -),Map(w -> we, h -> he, t -> together, v -> very, a -> and, r -> right, - -> -, c -> contrast-01, c2 -> control-01))),[Ljava.lang.String;@8dbdac1,Annotation([Ljava.lang.String;@6e20b53a,[Ljava.lang.String;@71809907,[Ljava.lang.String;@3ce1e309),Annotation([Ljava.lang.String;@6aba2b86,[Ljava.lang.String;@158da8e,[Ledu.cmu.lti.nlp.amr.Dependency;@74e52303),Annotation([Ljava.lang.String;@47af7f3d,[Ljava.lang.String;@7c729a55,[Ljava.lang.String;@3bb9a3ff),Annotation([Ljava.lang.String;@661972b0,[Ljava.lang.String;@5af3afd9,[Ledu.cmu.lti.nlp.amr.Entity;@323b36e0))
AMR:
(a / and, op, c2 / control-01)
(c / contrast-01, ARG0, t / together)
(c / contrast-01, ARG1, a / and)
(c2 / control-01, ARG0, r / right)
(c2 / control-01, ARG1, h / he)
(r / right, calendar, - / -)
(v / very, domain, h / he)
(w / we, calendar, t / together)

Decoded in 197,579 microseconds
Sentence: He has too much going on in his life right now and he thinks we can work when I have told him several times I dont love him and he does not love me.

Spans:
Span 28-29:  and => and
Span 11-12:  and => and
Span 15-16:  can => possible
Span 4-5:  going => go-02
Span 0-1:  He => he
Span 8-9:  life => life
Span 32-33:  love => love
Span 26-27:  love => love
Span 3-4:  much => much
Span 10-11:  now => now
Span 9-10:  right => right
Span 22-23:  several => several
Span 13-14:  thinks => think-01
Span 20-21:  told => tell-01
Span 2-3:  too => too
Span 14-15:  we => we
Span 16-17:  work => work-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),love,love,false), Span(28,29,List(1),and,and,false), Span(26,27,List(2),love,love,false), Span(22,23,List(3),several,several,false), Span(20,21,List(4),told,tell-01,false), Span(16,17,List(5),work,work-01,false), Span(15,16,List(6),can,possible,false), Span(14,15,List(7),we,we,false), Span(13,14,List(8),thinks,think-01,false), Span(11,12,List(9),and,and,false), Span(10,11,List(10),now,now,false), Span(9,10,List(11),right,right,false), Span(8,9,List(12),life,life,false), Span(4,5,List(13),going,go-02,false), Span(3,4,List(14),much,much,false), Span(2,3,List(15),too,too,false), Span(0,1,List(16),He,he,false)),Map(2 -> love, 5 -> work-01, 12 -> life, 15 -> too, 8 -> think-01, 7 -> we, 1 -> and, 4 -> tell-01, 11 -> right, 14 -> much, 6 -> possible, 0 -> love, 9 -> and, 16 -> he, 3 -> several, 10 -> now, 13 -> go-02),Map(w -> work-01, n -> now, h -> he, t -> tell-01, l3 -> life, s -> several, m -> much, t3 -> too, g -> go-02, p -> possible, a -> and, t2 -> think-01, l2 -> love, w2 -> we, a2 -> and, r -> right, l -> love))),[Ljava.lang.String;@2e005c4b,Annotation([Ljava.lang.String;@4567f35d,[Ljava.lang.String;@5ffead27,[Ljava.lang.String;@6356695f),Annotation([Ljava.lang.String;@4f18837a,[Ljava.lang.String;@359f7cdf,[Ledu.cmu.lti.nlp.amr.Dependency;@1fa268de),Annotation([Ljava.lang.String;@4f6ee6e4,[Ljava.lang.String;@4466af20,[Ljava.lang.String;@a514af7),Annotation([Ljava.lang.String;@6b927fb,[Ljava.lang.String;@3e58a80e,[Ledu.cmu.lti.nlp.amr.Entity;@4fb61f4a))
AMR:
(a / and, condition, t / tell-01)
(a / and, op, l / love)
(a / and, op, l2 / love)
(a2 / and, op, t2 / think-01)
(g / go-02, ARG0, l3 / life)
(g / go-02, ARG1, r / right)
(g / go-02, ARG2, a2 / and)
(g / go-02, ARG6, m / much)
(m / much, degree, t3 / too)
(n / now, degree, r / right)
(p / possible, domain, w / work-01)
(t / tell-01, ARG1, s / several)
(t2 / think-01, ARG0, h / he)
(t2 / think-01, ARG1, p / possible)
(w / work-01, ARG0, w2 / we)
(w / work-01, ARG1, a / and)

Decoded in 1,095,573 microseconds
Sentence: I want him to be there for his son without needing me too.

Spans:
Span 8-9:  son => son
Span 12-13:  too => too
Span 1-2:  want => want-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),too,too,false), Span(8,9,List(1),son,son,false), Span(1,2,List(2),want,want-01,false)),Map(2 -> want-01, 1 -> son, 0 -> too),Map(w -> want-01, t -> too, s -> son))),[Ljava.lang.String;@4fb0f2b9,Annotation([Ljava.lang.String;@79924b,[Ljava.lang.String;@7b9a4292,[Ljava.lang.String;@4a94ee4),Annotation([Ljava.lang.String;@4cc451f2,[Ljava.lang.String;@6379eb,[Ledu.cmu.lti.nlp.amr.Dependency;@294425a7),Annotation([Ljava.lang.String;@67d48005,[Ljava.lang.String;@9f116cc,[Ljava.lang.String;@12468a38),Annotation([Ljava.lang.String;@1aa7ecca,[Ljava.lang.String;@59309333,[Ledu.cmu.lti.nlp.amr.Entity;@5876a9af))
AMR:
(w / want-01, ARG0, t / too)
(w / want-01, ARG1, s / son)

Decoded in 46,539 microseconds
Sentence: But he has no one his family and him dont get along and have their own issues.

Spans:
Span 11-12:  along => along
Span 12-13:  and => and
Span 7-8:  and => and
Span 0-1:  But => contrast-01
Span 6-7:  family => family
Span 10-11:  get => get-04
Span 16-17:  issues => issue
Span 3-4:  no => -
Span 4-5:  one => 1
Span 15-16:  own => own

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),issues,issue,false), Span(15,16,List(1),own,own,false), Span(12,13,List(2),and,and,false), Span(11,12,List(3),along,along,false), Span(10,11,List(4),get,get-04,false), Span(7,8,List(5),and,and,false), Span(6,7,List(6),family,family,false), Span(4,5,List(7),one,1,false), Span(3,4,List(8),no,-,false), Span(0,1,List(9),But,contrast-01,false)),Map(2 -> and, 5 -> and, 8 -> -, 7 -> 1, 1 -> own, 4 -> get-04, 6 -> family, 9 -> contrast-01, 0 -> issue, 3 -> along),Map(a3 -> and, 1 -> 1, g -> get-04, a -> and, a2 -> along, i -> issue, - -> -, c -> contrast-01, f -> family, o -> own))),[Ljava.lang.String;@7ec7ffd3,Annotation([Ljava.lang.String;@5b239d7d,[Ljava.lang.String;@6572421,[Ljava.lang.String;@6b81ce95),Annotation([Ljava.lang.String;@2a798d51,[Ljava.lang.String;@6d763516,[Ledu.cmu.lti.nlp.amr.Dependency;@52bf72b5),Annotation([Ljava.lang.String;@37afeb11,[Ljava.lang.String;@515aebb0,[Ljava.lang.String;@dd8ba08),Annotation([Ljava.lang.String;@245b4bdc,[Ljava.lang.String;@6c64cb25,[Ledu.cmu.lti.nlp.amr.Entity;@6ae5aa72))
AMR:
(a / and, op, i / issue)
(a / and, time, f / family)
(a3 / and, op, 1 / 1)
(a3 / and, op, f / family)
(c / contrast-01, ARG1, g / get-04)
(c / contrast-01, ARG2, a / and)
(g / get-04, ARG1, - / -)
(g / get-04, ARG6, a2 / along)
(i / issue, mod, o / own)

Decoded in 199,735 microseconds
Sentence: I don't want to be miserable anymore and the longer he is around the more miserable I will be.

Spans:
Span 8-9:  and => and
Span 13-14:  around => around
Span 1-2:  do => do-02
Span 10-11:  longer => longer
Span 15-16:  more => more
Span 3-4:  want => want-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),more,more,false), Span(13,14,List(1),around,around,false), Span(10,11,List(2),longer,longer,false), Span(8,9,List(3),and,and,false), Span(3,4,List(4),want,want-01,false), Span(1,2,List(5),do,do-02,false)),Map(2 -> longer, 5 -> do-02, 1 -> around, 4 -> want-01, 0 -> more, 3 -> and),Map(w -> want-01, d -> do-02, m -> more, a -> around, a2 -> and, l -> longer))),[Ljava.lang.String;@222545dc,Annotation([Ljava.lang.String;@5c5eefef,[Ljava.lang.String;@16293aa2,[Ljava.lang.String;@5158b42f),Annotation([Ljava.lang.String;@595b007d,[Ljava.lang.String;@72d1ad2e,[Ledu.cmu.lti.nlp.amr.Dependency;@2d7275fc),Annotation([Ljava.lang.String;@399f45b1,[Ljava.lang.String;@38c6f217,[Ljava.lang.String;@478190fc),Annotation([Ljava.lang.String;@79e2c065,[Ljava.lang.String;@3a93b025,[Ledu.cmu.lti.nlp.amr.Entity;@35cabb2a))
AMR:
(a2 / and, op, w / want-01)
(d / do-02, ARG0, m / more)
(m / more, calendar, a / around)
(w / want-01, ARG0, d / do-02)
(w / want-01, ARG1, l / longer)

Decoded in 128,016 microseconds
Sentence: I dont want him to not be there for his son as he is a good father or he at least tries.

Spans:
Span 16-17:  father => father
Span 15-16:  good => good-41
Span 17-18:  or => or
Span 10-11:  son => son
Span 2-3:  want => want-01

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),or,or,false), Span(16,17,List(1),father,father,false), Span(15,16,List(2),good,good-41,false), Span(10,11,List(3),son,son,false), Span(2,3,List(4),want,want-01,false)),Map(2 -> good-41, 1 -> father, 4 -> want-01, 0 -> or, 3 -> son),Map(w -> want-01, s -> son, g -> good-41, f -> father, o -> or))),[Ljava.lang.String;@7e07db1f,Annotation([Ljava.lang.String;@1189dd52,[Ljava.lang.String;@36bc55de,[Ljava.lang.String;@564fabc8),Annotation([Ljava.lang.String;@16d04d3d,[Ljava.lang.String;@49ec71f8,[Ledu.cmu.lti.nlp.amr.Dependency;@1d2adfbe),Annotation([Ljava.lang.String;@36902638,[Ljava.lang.String;@223d2c72,[Ljava.lang.String;@8f4ea7c),Annotation([Ljava.lang.String;@436813f3,[Ljava.lang.String;@74fe5c40,[Ledu.cmu.lti.nlp.amr.Entity;@3febb011))
AMR:
(g / good-41, ARG1, f / father)
(o / or, op, f / father)
(o / or, op, w / want-01)
(w / want-01, ARG1, s / son)

Decoded in 136,021 microseconds
Sentence: I do believe every child needs both parents weather they are together or not.

Spans:
Span 2-3:  believe => believe-01
Span 6-7:  both => both
Span 4-5:  child => child
Span 1-2:  do => do-02
Span 3-4:  every => every
Span 5-6:  needs => need-01
Span 12-13:  or => or
Span 7-8:  parents => parent
Span 9-10:  they => they
Span 11-12:  together => together
Span 8-9:  weather => weather

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),or,or,false), Span(11,12,List(1),together,together,false), Span(9,10,List(2),they,they,false), Span(8,9,List(3),weather,weather,false), Span(7,8,List(4),parents,parent,false), Span(6,7,List(5),both,both,false), Span(5,6,List(6),needs,need-01,false), Span(4,5,List(7),child,child,false), Span(3,4,List(8),every,every,false), Span(2,3,List(9),believe,believe-01,false), Span(1,2,List(10),do,do-02,false)),Map(2 -> they, 5 -> both, 8 -> every, 7 -> child, 1 -> together, 4 -> parent, 6 -> need-01, 9 -> believe-01, 0 -> or, 10 -> do-02, 3 -> weather),Map(e -> every, n -> need-01, w -> weather, b -> both, t -> together, b2 -> believe-01, d -> do-02, p -> parent, t2 -> they, c -> child, o -> or))),[Ljava.lang.String;@10e31a9a,Annotation([Ljava.lang.String;@131774fe,[Ljava.lang.String;@158d2680,[Ljava.lang.String;@77847718),Annotation([Ljava.lang.String;@7f3b84b8,[Ljava.lang.String;@57a3af25,[Ledu.cmu.lti.nlp.amr.Dependency;@2b662a77),Annotation([Ljava.lang.String;@7f0eb4b4,[Ljava.lang.String;@5c33f1a9,[Ljava.lang.String;@1623b78d),Annotation([Ljava.lang.String;@c8c12ac,[Ljava.lang.String;@6adbc9d,[Ledu.cmu.lti.nlp.amr.Entity;@4550bb58))
AMR:
(b2 / believe-01, ARG1, n / need-01)
(c / child, mod, e / every)
(d / do-02, ARG1, b2 / believe-01)
(n / need-01, ARG0, c / child)
(n / need-01, ARG1, w / weather)
(o / or, op, t / together)
(p / parent, mod, b / both)
(t / together, domain, t2 / they)
(w / weather, calendar, t / together)
(w / weather, mod, p / parent)

Decoded in 174,136 microseconds
Sentence: But he thinks if he cant have me no one can.

Spans:
Span 0-1:  But => contrast-01
Span 10-11:  can => possible
Span 8-9:  no => -
Span 9-10:  one => 1
Span 2-3:  thinks => think-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),can,possible,false), Span(9,10,List(1),one,1,false), Span(8,9,List(2),no,-,false), Span(2,3,List(3),thinks,think-01,false), Span(0,1,List(4),But,contrast-01,false)),Map(2 -> -, 1 -> 1, 4 -> contrast-01, 0 -> possible, 3 -> think-01),Map(t -> think-01, 1 -> 1, p -> possible, - -> -, c -> contrast-01))),[Ljava.lang.String;@4ec4f3a0,Annotation([Ljava.lang.String;@223191a6,[Ljava.lang.String;@49139829,[Ljava.lang.String;@9597028),Annotation([Ljava.lang.String;@6069db50,[Ljava.lang.String;@4efbca5a,[Ledu.cmu.lti.nlp.amr.Dependency;@1b7cc17c),Annotation([Ljava.lang.String;@59662a0b,[Ljava.lang.String;@77fbd92c,[Ljava.lang.String;@67c27493),Annotation([Ljava.lang.String;@1a482e36,[Ljava.lang.String;@72967906,[Ledu.cmu.lti.nlp.amr.Entity;@5b8dfcc1))
AMR:
(1 / 1, mod, - / -)
(c / contrast-01, ARG1, t / think-01)
(p / possible, calendar, 1 / 1)
(t / think-01, ARG1, p / possible)

Decoded in 66,526 microseconds
Sentence: What do I do to move on with my life.

Spans:
Span 3-4:  do => do-02
Span 1-2:  do => do-02
Span 9-10:  life => life
Span 5-6:  move => move-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),life,life,false), Span(5,6,List(1),move,move-02,false), Span(3,4,List(2),do,do-02,false), Span(1,2,List(3),do,do-02,false)),Map(2 -> do-02, 1 -> move-02, 0 -> life, 3 -> do-02),Map(d -> do-02, m -> move-02, d2 -> do-02, l -> life))),[Ljava.lang.String;@2f9f7dcf,Annotation([Ljava.lang.String;@747ddf94,[Ljava.lang.String;@35e2d654,[Ljava.lang.String;@1bd4fdd),Annotation([Ljava.lang.String;@55183b20,[Ljava.lang.String;@4f83df68,[Ledu.cmu.lti.nlp.amr.Dependency;@6cf0e0ba),Annotation([Ljava.lang.String;@7d8995e,[Ljava.lang.String;@130d63be,[Ljava.lang.String;@42a48628),Annotation([Ljava.lang.String;@293a5bf6,[Ljava.lang.String;@6aeb35e6,[Ledu.cmu.lti.nlp.amr.Entity;@1283bb96))
AMR:
(d / do-02, ARG1, m / move-02)
(d2 / do-02, ARG1, d / do-02)
(m / move-02, ARG1, l / life)

Decoded in 16,554 microseconds
Sentence: Your ex is threatening you using your son... bad, bad, bad.

Spans:
Span 13-14:  bad => bad
Span 11-12:  bad => bad
Span 9-10:  bad => bad
Span 1-2:  ex => ex
Span 7-8:  son => son
Span 3-4:  threatening => threaten-01
Span 5-6:  using => use-01
Span 4-5:  you => you

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),bad,bad,false), Span(11,12,List(1),bad,bad,false), Span(9,10,List(2),bad,bad,false), Span(7,8,List(3),son,son,false), Span(5,6,List(4),using,use-01,false), Span(4,5,List(5),you,you,false), Span(3,4,List(6),threatening,threaten-01,false), Span(1,2,List(7),ex,ex,false)),Map(2 -> bad, 5 -> you, 7 -> ex, 1 -> bad, 4 -> use-01, 6 -> threaten-01, 0 -> bad, 3 -> son),Map(e -> ex, b3 -> bad, t -> threaten-01, b -> bad, b2 -> bad, s -> son, y -> you, u -> use-01))),[Ljava.lang.String;@74f0ea28,Annotation([Ljava.lang.String;@f6efaab,[Ljava.lang.String;@3c19aaa5,[Ljava.lang.String;@3349e9bb),Annotation([Ljava.lang.String;@409bf450,[Ljava.lang.String;@38d8f54a,[Ledu.cmu.lti.nlp.amr.Dependency;@49e53c76),Annotation([Ljava.lang.String;@351d00c0,[Ljava.lang.String;@2a3b5b47,[Ljava.lang.String;@55b699ef),Annotation([Ljava.lang.String;@35d019a3,[Ljava.lang.String;@689604d9,[Ledu.cmu.lti.nlp.amr.Entity;@18078bef))
AMR:
(b / bad, calendar, b2 / bad)
(b2 / bad, calendar, b3 / bad)
(s / son, calendar, b2 / bad)
(t / threaten-01, ARG0, e / ex)
(t / threaten-01, ARG1, u / use-01)
(u / use-01, ARG0, y / you)
(u / use-01, ARG1, s / son)

Decoded in 143,519 microseconds
Sentence: You can't give in to that or it will just escalate.

Spans:
Span 11-12:  escalate => escalate-01
Span 3-4:  give => give-01
Span 8-9:  it => it
Span 10-11:  just => just
Span 7-8:  or => or

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),escalate,escalate-01,false), Span(10,11,List(1),just,just,false), Span(8,9,List(2),it,it,false), Span(7,8,List(3),or,or,false), Span(3,4,List(4),give,give-01,false)),Map(2 -> it, 1 -> just, 4 -> give-01, 0 -> escalate-01, 3 -> or),Map(e -> escalate-01, j -> just, g -> give-01, i -> it, o -> or))),[Ljava.lang.String;@799f10e1,Annotation([Ljava.lang.String;@4c371370,[Ljava.lang.String;@145f66e3,[Ljava.lang.String;@3023df74),Annotation([Ljava.lang.String;@313ac989,[Ljava.lang.String;@4562e04d,[Ledu.cmu.lti.nlp.amr.Dependency;@2a65fe7c),Annotation([Ljava.lang.String;@4135c3b,[Ljava.lang.String;@6302bbb1,[Ljava.lang.String;@31304f14),Annotation([Ljava.lang.String;@34a3d150,[Ljava.lang.String;@2a4fb17b,[Ledu.cmu.lti.nlp.amr.Entity;@5c6648b0))
AMR:
(e / escalate-01, ARG0, i / it)
(e / escalate-01, ARG1, j / just)
(o / or, op, e / escalate-01)
(o / or, op, g / give-01)

Decoded in 49,159 microseconds
Sentence: You have a right to live your own life and be happy, so don't cave to his threats.

Spans:
Span 9-10:  and => and
Span 14-15:  do => do-02
Span 8-9:  life => life
Span 5-6:  live => live-01
Span 7-8:  own => own
Span 3-4:  right => right
Span 13-14:  so => so
Span 19-20:  threats => threaten-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),threats,threaten-01,false), Span(14,15,List(1),do,do-02,false), Span(13,14,List(2),so,so,false), Span(9,10,List(3),and,and,false), Span(8,9,List(4),life,life,false), Span(7,8,List(5),own,own,false), Span(5,6,List(6),live,live-01,false), Span(3,4,List(7),right,right,false)),Map(2 -> so, 5 -> own, 7 -> right, 1 -> do-02, 4 -> life, 6 -> live-01, 0 -> threaten-01, 3 -> and),Map(t -> threaten-01, s -> so, d -> do-02, a -> and, r -> right, l2 -> live-01, l -> life, o -> own))),[Ljava.lang.String;@6f1de4c7,Annotation([Ljava.lang.String;@459e9125,[Ljava.lang.String;@128d2484,[Ljava.lang.String;@7cc0cdad),Annotation([Ljava.lang.String;@7c7b252e,[Ljava.lang.String;@4d5d943d,[Ledu.cmu.lti.nlp.amr.Dependency;@368f2016),Annotation([Ljava.lang.String;@4c583ecf,[Ljava.lang.String;@692f203f,[Ljava.lang.String;@48f2bd5b),Annotation([Ljava.lang.String;@7b2bbc3,[Ljava.lang.String;@a1153bc,[Ledu.cmu.lti.nlp.amr.Entity;@1aafa419))
AMR:
(a / and, op, l2 / live-01)
(d / do-02, ARG1, s / so)
(d / do-02, ARG2, t / threaten-01)
(l / life, mod, o / own)
(l2 / live-01, ARG1, l / life)
(r / right, prep-to, l2 / live-01)
(t / threaten-01, ARG1, l2 / live-01)

Decoded in 156,692 microseconds
Sentence: If he really loves his son, he'll see him regardless, but this is just a typical control method that people like him use.

Spans:
Span 13-14:  but => contrast-01
Span 19-20:  control => control-01
Span 16-17:  just => just
Span 20-21:  method => method
Span 22-23:  people => people
Span 2-3:  really => really
Span 9-10:  see => see-01
Span 5-6:  son => son
Span 14-15:  this => this
Span 25-26:  use => use-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),use,use-01,false), Span(22,23,List(1),people,people,false), Span(20,21,List(2),method,method,false), Span(19,20,List(3),control,control-01,false), Span(16,17,List(4),just,just,false), Span(14,15,List(5),this,this,false), Span(13,14,List(6),but,contrast-01,false), Span(9,10,List(7),see,see-01,false), Span(5,6,List(8),son,son,false), Span(2,3,List(9),really,really,false)),Map(2 -> method, 5 -> this, 8 -> son, 7 -> see-01, 1 -> people, 4 -> just, 6 -> contrast-01, 9 -> really, 0 -> use-01, 3 -> control-01),Map(s2 -> son, t -> this, s -> see-01, j -> just, m -> method, p -> people, r -> really, c -> control-01, u -> use-01, c2 -> contrast-01))),[Ljava.lang.String;@47eaca72,Annotation([Ljava.lang.String;@55141def,[Ljava.lang.String;@55182842,[Ljava.lang.String;@3270d194),Annotation([Ljava.lang.String;@235834f2,[Ljava.lang.String;@5656be13,[Ledu.cmu.lti.nlp.amr.Dependency;@4218d6a3),Annotation([Ljava.lang.String;@76505305,[Ljava.lang.String;@14cd1699,[Ljava.lang.String;@77888435),Annotation([Ljava.lang.String;@73a1e9a9,[Ljava.lang.String;@71d44a3,[Ledu.cmu.lti.nlp.amr.Entity;@7b98f307))
AMR:
(c / control-01, ARG0, m / method)
(c / control-01, ARG1, r / really)
(c2 / contrast-01, ARG1, s / see-01)
(c2 / contrast-01, ARG2, m / method)
(s / see-01, ARG1, s2 / son)
(t / this, mod, m / method)
(t / this, time, j / just)
(u / use-01, ARG0, p / people)
(u / use-01, ARG1, m / method)

Decoded in 259,860 microseconds
Sentence: Others say things like, "I'm going to kill myself if you leave me"... get it?

Spans:
Span 18-19:  get => get-04
Span 8-9:  going => go-02
Span 19-20:  it => it
Span 14-15:  leave => leave-01
Span 1-2:  say => say-01
Span 2-3:  things => thing
Span 13-14:  you => you

Langrangian relaxation converged after 60 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),it,it,false), Span(18,19,List(1),get,get-04,false), Span(14,15,List(2),leave,leave-01,false), Span(13,14,List(3),you,you,false), Span(8,9,List(4),going,go-02,false), Span(2,3,List(5),things,thing,false), Span(1,2,List(6),say,say-01,false)),Map(2 -> leave-01, 5 -> thing, 1 -> get-04, 4 -> go-02, 6 -> say-01, 0 -> it, 3 -> you),Map(t -> thing, s -> say-01, g2 -> go-02, y -> you, g -> get-04, i -> it, l -> leave-01))),[Ljava.lang.String;@4802796d,Annotation([Ljava.lang.String;@34123d65,[Ljava.lang.String;@59474f18,[Ljava.lang.String;@65fb9ffc),Annotation([Ljava.lang.String;@3e694b3f,[Ljava.lang.String;@1bb5a082,[Ledu.cmu.lti.nlp.amr.Dependency;@78691363),Annotation([Ljava.lang.String;@41d477ed,[Ljava.lang.String;@3590fc5b,[Ljava.lang.String;@397fbdb),Annotation([Ljava.lang.String;@33d512c1,[Ljava.lang.String;@515c6049,[Ledu.cmu.lti.nlp.amr.Entity;@639c2c1d))
AMR:
(g / get-04, ARG1, i / it)
(g2 / go-02, ARG1, t / thing)
(l / leave-01, ARG0, y / you)
(l / leave-01, ARG1, g2 / go-02)
(s / say-01, ARG1, g / get-04)
(s / say-01, ARG2, t / thing)

Decoded in 307,093 microseconds
Sentence: Date.

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@30c15d8b,Annotation([Ljava.lang.String;@5e0e82ae,[Ljava.lang.String;@6771beb3,[Ljava.lang.String;@51399530),Annotation([Ljava.lang.String;@6b2ea799,[Ljava.lang.String;@411f53a0,[Ledu.cmu.lti.nlp.amr.Dependency;@2b71e916),Annotation([Ljava.lang.String;@36fc695d,[Ljava.lang.String;@28701274,[Ljava.lang.String;@13c9d689),Annotation([Ljava.lang.String;@3754a4bf,[Ljava.lang.String;@62379589,[Ledu.cmu.lti.nlp.amr.Entity;@4afcd809))
AMR:


Decoded in 5,040 microseconds
Sentence: Meet all kinds of people.

Spans:
Span 1-2:  all => all
Span 2-3:  kinds => kind
Span 4-5:  people => people

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),people,people,false), Span(2,3,List(1),kinds,kind,false), Span(1,2,List(2),all,all,false)),Map(2 -> all, 1 -> kind, 0 -> people),Map(k -> kind, p -> people, a -> all))),[Ljava.lang.String;@175c2241,Annotation([Ljava.lang.String;@5bf0d49,[Ljava.lang.String;@5b7a5baa,[Ljava.lang.String;@776aec5c),Annotation([Ljava.lang.String;@1d296da,[Ljava.lang.String;@7c7a06ec,[Ledu.cmu.lti.nlp.amr.Dependency;@75d4a5c2),Annotation([Ljava.lang.String;@557caf28,[Ljava.lang.String;@408d971b,[Ljava.lang.String;@6c6cb480),Annotation([Ljava.lang.String;@3c46e67a,[Ljava.lang.String;@c730b35,[Ledu.cmu.lti.nlp.amr.Entity;@206a70ef))
AMR:
(k / kind, quant, a / all)
(p / people, mod, k / kind)

Decoded in 10,003 microseconds
Sentence: Do what you want.

Spans:
Span 3-4:  want => want-01
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),want,want-01,false), Span(2,3,List(1),you,you,false)),Map(1 -> you, 0 -> want-01),Map(w -> want-01, y -> you))),[Ljava.lang.String;@292b08d6,Annotation([Ljava.lang.String;@22555ebf,[Ljava.lang.String;@36ebc363,[Ljava.lang.String;@45752059),Annotation([Ljava.lang.String;@34e9fd99,[Ljava.lang.String;@3c41ed1d,[Ledu.cmu.lti.nlp.amr.Dependency;@54d9d12d),Annotation([Ljava.lang.String;@38425407,[Ljava.lang.String;@43bc63a3,[Ljava.lang.String;@702657cc),Annotation([Ljava.lang.String;@6a6cb05c,[Ljava.lang.String;@40a4337a,[Ledu.cmu.lti.nlp.amr.Entity;@6025e1b6))
AMR:
(w / want-01, ARG0, y / you)

Decoded in 6,331 microseconds
Sentence: If the price is, he voluntarily walks out of both of your lives, you're probably better off without him.

Spans:
Span 18-19:  better => good
Span 10-11:  both => both
Span 13-14:  lives => live-01
Span 19-20:  off => off
Span 8-9:  out => out
Span 2-3:  price => (thing :ARG2-of price-01)
Span 17-18:  probably => probable
Span 15-16:  you => you

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),off,off,false), Span(18,19,List(1),better,good,false), Span(17,18,List(2),probably,probable,false), Span(15,16,List(3),you,you,false), Span(13,14,List(4),lives,live-01,false), Span(10,11,List(5),both,both,false), Span(8,9,List(6),out,out,false), Span(2,3,List(8, 7),price,(thing :ARG2-of price-01),false)),Map(2 -> probable, 5 -> both, 8 -> price-01, 7 -> thing, 1 -> good, 4 -> live-01, 6 -> out, 0 -> off, 3 -> you),Map(t -> thing, b -> both, p2 -> price-01, y -> you, p -> probable, g -> good, o2 -> out, l -> live-01, o -> off))),[Ljava.lang.String;@22ff4249,Annotation([Ljava.lang.String;@2d1ef81a,[Ljava.lang.String;@4c402120,[Ljava.lang.String;@327514f),Annotation([Ljava.lang.String;@5b12b668,[Ljava.lang.String;@1165b38,[Ledu.cmu.lti.nlp.amr.Dependency;@4c12331b),Annotation([Ljava.lang.String;@7586beff,[Ljava.lang.String;@3b69e7d1,[Ljava.lang.String;@815b41f),Annotation([Ljava.lang.String;@5542c4ed,[Ljava.lang.String;@1573f9fc,[Ledu.cmu.lti.nlp.amr.Entity;@6150c3ec))
AMR:
(g / good, calendar, o / off)
(g / good, mod, p / probable)
(l / live-01, ARG0, o2 / out)
(l / live-01, ARG1, y / you)
(l / live-01, ARG6, b / both)
(p / probable, domain, y / you)
(p2 / price-01, ARG1, g / good)
(p2 / price-01, ARG2, t / thing)

Decoded in 239,878 microseconds
Sentence: I'd agree - one other thing it is none of his business whether you date or not.

Spans:
Span 2-3:  agree => agree-01
Span 12-13:  business => business
Span 15-16:  date => date
Span 7-8:  it => it
Span 4-5:  one => 1
Span 16-17:  or => or
Span 5-6:  other => other
Span 14-15:  you => you

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),or,or,false), Span(15,16,List(1),date,date,false), Span(14,15,List(2),you,you,false), Span(12,13,List(3),business,business,false), Span(7,8,List(4),it,it,false), Span(5,6,List(5),other,other,false), Span(4,5,List(6),one,1,false), Span(2,3,List(7),agree,agree-01,false)),Map(2 -> you, 5 -> other, 7 -> agree-01, 1 -> date, 4 -> it, 6 -> 1, 0 -> or, 3 -> business),Map(b -> business, d -> date, 1 -> 1, y -> you, a -> agree-01, o2 -> other, i -> it, o -> or))),[Ljava.lang.String;@44c03695,Annotation([Ljava.lang.String;@7e6f74c,[Ljava.lang.String;@dd05255,[Ljava.lang.String;@6a78afa0),Annotation([Ljava.lang.String;@2f4948e4,[Ljava.lang.String;@1f2586d6,[Ledu.cmu.lti.nlp.amr.Dependency;@10683d9d),Annotation([Ljava.lang.String;@3fc2959f,[Ljava.lang.String;@5aa9e4eb,[Ljava.lang.String;@6989da5e),Annotation([Ljava.lang.String;@385c9627,[Ljava.lang.String;@139982de,[Ledu.cmu.lti.nlp.amr.Entity;@682b2fa))
AMR:
(a / agree-01, ARG0, b / business)
(a / agree-01, ARG2, y / you)
(a / agree-01, ARG6, 1 / 1)
(d / date, calendar, y / you)
(i / it, poss, d / date)
(o / or, mod, o2 / other)
(o / or, op, d / date)

Decoded in 135,475 microseconds
Sentence: I wouldn't tell him.

Spans:
Span 3-4:  tell => tell-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),tell,tell-01,false)),Map(0 -> tell-01),Map(t -> tell-01))),[Ljava.lang.String;@217ed35e,Annotation([Ljava.lang.String;@7dcf94f8,[Ljava.lang.String;@229f66ed,[Ljava.lang.String;@31190526),Annotation([Ljava.lang.String;@662ac478,[Ljava.lang.String;@6743e411,[Ledu.cmu.lti.nlp.amr.Dependency;@3eb25e1a),Annotation([Ljava.lang.String;@477b4cdf,[Ljava.lang.String;@77c2494c,[Ljava.lang.String;@f5958c9),Annotation([Ljava.lang.String;@233795b6,[Ljava.lang.String;@3eb738bb,[Ledu.cmu.lti.nlp.amr.Entity;@5bda8e08))
AMR:


Decoded in 4,582 microseconds
Sentence: Not because of his threat - but because your personal life is none of his business.

Spans:
Span 7-8:  because => cause-01
Span 1-2:  because => cause-01
Span 15-16:  business => business
Span 6-7:  but => contrast-01
Span 10-11:  life => life
Span 9-10:  personal => personal
Span 4-5:  threat => threaten-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),business,business,false), Span(10,11,List(1),life,life,false), Span(9,10,List(2),personal,personal,false), Span(7,8,List(3),because,cause-01,false), Span(6,7,List(4),but,contrast-01,false), Span(4,5,List(5),threat,threaten-01,false), Span(1,2,List(6),because,cause-01,false)),Map(2 -> personal, 5 -> threaten-01, 1 -> life, 4 -> contrast-01, 6 -> cause-01, 0 -> business, 3 -> cause-01),Map(t -> threaten-01, b -> business, p -> personal, c3 -> cause-01, c -> cause-01, l -> life, c2 -> contrast-01))),[Ljava.lang.String;@1e800aaa,Annotation([Ljava.lang.String;@185a6e9,[Ljava.lang.String;@6f03482,[Ljava.lang.String;@9d5509a),Annotation([Ljava.lang.String;@179ece50,[Ljava.lang.String;@3b0090a4,[Ledu.cmu.lti.nlp.amr.Dependency;@3cd3e762),Annotation([Ljava.lang.String;@1fa121e2,[Ljava.lang.String;@7eac9008,[Ljava.lang.String;@4116aac9),Annotation([Ljava.lang.String;@62ddbd7e,[Ljava.lang.String;@74e52ef6,[Ledu.cmu.lti.nlp.amr.Entity;@6ed3ccb2))
AMR:
(b / business, poss, l / life)
(c / cause-01, ARG1, l / life)
(c2 / contrast-01, ARG1, t / threaten-01)
(c2 / contrast-01, ARG6, c / cause-01)
(c3 / cause-01, ARG1, p / personal)
(t / threaten-01, ARG1, c3 / cause-01)

Decoded in 138,569 microseconds
Sentence: Can you document his threats?

Spans:
Span 2-3:  document => document
Span 4-5:  threats => threaten-01
Span 1-2:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),threats,threaten-01,false), Span(2,3,List(1),document,document,false), Span(1,2,List(2),you,you,false)),Map(2 -> you, 1 -> document, 0 -> threaten-01),Map(t -> threaten-01, d -> document, y -> you))),[Ljava.lang.String;@1a677343,Annotation([Ljava.lang.String;@15de0b3c,[Ljava.lang.String;@489115ef,[Ljava.lang.String;@3857f613),Annotation([Ljava.lang.String;@198b6731,[Ljava.lang.String;@7c6908d7,[Ledu.cmu.lti.nlp.amr.Dependency;@3c9754d8),Annotation([Ljava.lang.String;@3bf7ca37,[Ljava.lang.String;@79079097,[Ljava.lang.String;@4d1c00d0),Annotation([Ljava.lang.String;@4b2bac3f,[Ljava.lang.String;@4e08711f,[Ledu.cmu.lti.nlp.amr.Entity;@bcec361))
AMR:
(d / document, calendar, t / threaten-01)
(t / threaten-01, ARG1, y / you)

Decoded in 9,629 microseconds
Sentence: You really need to.

Spans:
Span 2-3:  need => need-01
Span 1-2:  really => really

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),need,need-01,false), Span(1,2,List(1),really,really,false)),Map(1 -> really, 0 -> need-01),Map(n -> need-01, r -> really))),[Ljava.lang.String;@26794848,Annotation([Ljava.lang.String;@302552ec,[Ljava.lang.String;@3d285d7e,[Ljava.lang.String;@40005471),Annotation([Ljava.lang.String;@2cd76f31,[Ljava.lang.String;@367ffa75,[Ledu.cmu.lti.nlp.amr.Dependency;@49438269),Annotation([Ljava.lang.String;@ba2f4ec,[Ljava.lang.String;@1c1bbc4e,[Ljava.lang.String;@55fe41ea),Annotation([Ljava.lang.String;@fbd1f6,[Ljava.lang.String;@1ce24091,[Ledu.cmu.lti.nlp.amr.Entity;@5dda768f))
AMR:
(n / need-01, ARG1, r / really)

Decoded in 6,311 microseconds
Sentence: Quit taking his calls, make him leave voice mail.

Spans:
Span 3-4:  calls => call-03
Span 7-8:  leave => leave-01
Span 9-10:  mail => mail
Span 5-6:  make => make-01
Span 1-2:  taking => take-01
Span 8-9:  voice => voice

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),mail,mail,false), Span(8,9,List(1),voice,voice,false), Span(7,8,List(2),leave,leave-01,false), Span(5,6,List(3),make,make-01,false), Span(3,4,List(4),calls,call-03,false), Span(1,2,List(5),taking,take-01,false)),Map(2 -> leave-01, 5 -> take-01, 1 -> voice, 4 -> call-03, 0 -> mail, 3 -> make-01),Map(t -> take-01, m2 -> make-01, v -> voice, m -> mail, c -> call-03, l -> leave-01))),[Ljava.lang.String;@7a8c8dcf,Annotation([Ljava.lang.String;@24269709,[Ljava.lang.String;@2aceadd4,[Ljava.lang.String;@24aed80c),Annotation([Ljava.lang.String;@3a52dba3,[Ljava.lang.String;@2a5c8d3f,[Ledu.cmu.lti.nlp.amr.Dependency;@752325ad),Annotation([Ljava.lang.String;@279fedbd,[Ljava.lang.String;@b3ca52e,[Ljava.lang.String;@45c7e403),Annotation([Ljava.lang.String;@2925bf5b,[Ljava.lang.String;@710f4dc7,[Ledu.cmu.lti.nlp.amr.Entity;@1ff4931d))
AMR:
(c / call-03, ARG1, l / leave-01)
(l / leave-01, ARG1, m / mail)
(m / mail, mod, v / voice)
(m2 / make-01, ARG1, l / leave-01)
(t / take-01, ARG1, c / call-03)

Decoded in 121,118 microseconds
Sentence: Make him email or text you.

Spans:
Span 2-3:  email => email
Span 3-4:  or => or
Span 4-5:  text => text
Span 5-6:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),you,you,false), Span(4,5,List(1),text,text,false), Span(3,4,List(2),or,or,false), Span(2,3,List(3),email,email,false)),Map(2 -> or, 1 -> text, 0 -> you, 3 -> email),Map(e -> email, t -> text, y -> you, o -> or))),[Ljava.lang.String;@65e98b1c,Annotation([Ljava.lang.String;@61322f9d,[Ljava.lang.String;@6ad82709,[Ljava.lang.String;@510f3d34),Annotation([Ljava.lang.String;@7817fd62,[Ljava.lang.String;@8297b3a,[Ledu.cmu.lti.nlp.amr.Dependency;@2362f559),Annotation([Ljava.lang.String;@b2c9a9c,[Ljava.lang.String;@4c178a76,[Ljava.lang.String;@fa4c865),Annotation([Ljava.lang.String;@3bd82cf5,[Ljava.lang.String;@544fa968,[Ledu.cmu.lti.nlp.amr.Entity;@247bddad))
AMR:
(o / or, op, e / email)
(o / or, op, t / text)
(t / text, calendar, y / you)

Decoded in 13,348 microseconds
Sentence: Keep those records.

Spans:
Span 2-3:  records => (thing :ARG1-of record-01)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(1, 0),records,(thing :ARG1-of record-01),false)),Map(1 -> record-01, 0 -> thing),Map(t -> thing, r -> record-01))),[Ljava.lang.String;@d35dea7,Annotation([Ljava.lang.String;@7770f470,[Ljava.lang.String;@5e5d171f,[Ljava.lang.String;@24313fcc),Annotation([Ljava.lang.String;@7d20d0b,[Ljava.lang.String;@77f1baf5,[Ledu.cmu.lti.nlp.amr.Dependency;@41a2befb),Annotation([Ljava.lang.String;@6c40365c,[Ljava.lang.String;@7bedc48a,[Ljava.lang.String;@131ef10),Annotation([Ljava.lang.String;@55b0dcab,[Ljava.lang.String;@38afe297,[Ledu.cmu.lti.nlp.amr.Entity;@2df3b89c))
AMR:
(r / record-01, ARG1, t / thing)

Decoded in 6,489 microseconds
Sentence: Get a lawyer and get a divorce.

Spans:
Span 3-4:  and => and
Span 4-5:  get => get-04
Span 2-3:  lawyer => lawyer

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),get,get-04,false), Span(3,4,List(1),and,and,false), Span(2,3,List(2),lawyer,lawyer,false)),Map(2 -> lawyer, 1 -> and, 0 -> get-04),Map(g -> get-04, a -> and, l -> lawyer))),[Ljava.lang.String;@23348b5d,Annotation([Ljava.lang.String;@70325e14,[Ljava.lang.String;@37ceb1df,[Ljava.lang.String;@7c9d8e2),Annotation([Ljava.lang.String;@20d525,[Ljava.lang.String;@6200f9cb,[Ledu.cmu.lti.nlp.amr.Dependency;@2002fc1d),Annotation([Ljava.lang.String;@69453e37,[Ljava.lang.String;@6f4a47c7,[Ljava.lang.String;@ae13544),Annotation([Ljava.lang.String;@3d34d211,[Ljava.lang.String;@7dc0f706,[Ledu.cmu.lti.nlp.amr.Entity;@4009e306))
AMR:
(a / and, op, g / get-04)
(g / get-04, ARG1, l / lawyer)

Decoded in 11,301 microseconds
Sentence: If you can't afford one, try legal aid.

Spans:
Span 9-10:  aid => aid-01
Span 8-9:  legal => legal
Span 5-6:  one => 1
Span 7-8:  try => try-01
Span 1-2:  you => you

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),aid,aid-01,false), Span(8,9,List(1),legal,legal,false), Span(7,8,List(2),try,try-01,false), Span(5,6,List(3),one,1,false), Span(1,2,List(4),you,you,false)),Map(2 -> try-01, 1 -> legal, 4 -> you, 0 -> aid-01, 3 -> 1),Map(t -> try-01, y -> you, 1 -> 1, a -> aid-01, l -> legal))),[Ljava.lang.String;@43c1b556,Annotation([Ljava.lang.String;@587e5365,[Ljava.lang.String;@22fcf7ab,[Ljava.lang.String;@2de23121),Annotation([Ljava.lang.String;@63475ace,[Ljava.lang.String;@4988d8b8,[Ledu.cmu.lti.nlp.amr.Dependency;@c0c2f8d),Annotation([Ljava.lang.String;@305b7c14,[Ljava.lang.String;@6913c1fb,[Ljava.lang.String;@66d18979),Annotation([Ljava.lang.String;@bccb269,[Ljava.lang.String;@609cd4d8,[Ledu.cmu.lti.nlp.amr.Entity;@17f7cd29))
AMR:
(a / aid-01, ARG1, y / you)
(a / aid-01, mod, l / legal)
(t / try-01, ARG1, a / aid-01)
(t / try-01, ARG6, 1 / 1)

Decoded in 53,768 microseconds
Sentence: Tell your ex that all communication needs to go through the lawyer.

Spans:
Span 4-5:  all => all
Span 5-6:  communication => communicate-01
Span 2-3:  ex => ex
Span 8-9:  go => go-01
Span 11-12:  lawyer => lawyer
Span 6-7:  needs => need-01
Span 9-10:  through => through

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),lawyer,lawyer,false), Span(9,10,List(1),through,through,false), Span(8,9,List(2),go,go-01,false), Span(6,7,List(3),needs,need-01,false), Span(5,6,List(4),communication,communicate-01,false), Span(4,5,List(5),all,all,false), Span(2,3,List(6),ex,ex,false)),Map(2 -> go-01, 5 -> all, 1 -> through, 4 -> communicate-01, 6 -> ex, 0 -> lawyer, 3 -> need-01),Map(e -> ex, n -> need-01, t -> through, g -> go-01, a -> all, c -> communicate-01, l -> lawyer))),[Ljava.lang.String;@7d8704ef,Annotation([Ljava.lang.String;@13b6aecc,[Ljava.lang.String;@158a8276,[Ljava.lang.String;@3c3d9b6b),Annotation([Ljava.lang.String;@79d8407f,[Ljava.lang.String;@5fbe4146,[Ledu.cmu.lti.nlp.amr.Dependency;@1e66f1f5),Annotation([Ljava.lang.String;@4e50c791,[Ljava.lang.String;@7530ad9c,[Ljava.lang.String;@58a9760d),Annotation([Ljava.lang.String;@71e9ddb4,[Ljava.lang.String;@394df057,[Ledu.cmu.lti.nlp.amr.Entity;@4961f6af))
AMR:
(c / communicate-01, ARG1, e / ex)
(c / communicate-01, ARG6, a / all)
(g / go-01, ARG0, c / communicate-01)
(g / go-01, ARG1, l / lawyer)
(n / need-01, ARG1, g / go-01)
(t / through, op, l / lawyer)

Decoded in 154,947 microseconds
Sentence: The bus drivers want exact change, the till people want exact change, the people who deliver your food want exact change...

Spans:
Span 1-2:  bus => bus
Span 22-23:  change => change-01
Span 12-13:  change => change-01
Span 5-6:  change => change-01
Span 17-18:  deliver => deliver-01
Span 2-3:  drivers => (person :ARG0-of drive-01)
Span 19-20:  food => food
Span 15-16:  people => people
Span 9-10:  people => people
Span 20-21:  want => want-01
Span 10-11:  want => want-01
Span 3-4:  want => want-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),change,change-01,false), Span(20,21,List(1),want,want-01,false), Span(19,20,List(2),food,food,false), Span(17,18,List(3),deliver,deliver-01,false), Span(15,16,List(4),people,people,false), Span(12,13,List(5),change,change-01,false), Span(10,11,List(6),want,want-01,false), Span(9,10,List(7),people,people,false), Span(5,6,List(8),change,change-01,false), Span(3,4,List(9),want,want-01,false), Span(2,3,List(11, 10),drivers,(person :ARG0-of drive-01),false), Span(1,2,List(12),bus,bus,false)),Map(2 -> food, 5 -> change-01, 12 -> bus, 8 -> change-01, 7 -> people, 1 -> want-01, 4 -> people, 11 -> drive-01, 6 -> want-01, 0 -> change-01, 9 -> want-01, 3 -> deliver-01, 10 -> person),Map(w -> want-01, b -> bus, p2 -> people, w3 -> want-01, d -> deliver-01, p -> people, c3 -> change-01, d2 -> drive-01, w2 -> want-01, c -> change-01, f -> food, p3 -> person, c2 -> change-01))),[Ljava.lang.String;@5aebe890,Annotation([Ljava.lang.String;@65d09a04,[Ljava.lang.String;@33c911a1,[Ljava.lang.String;@75db5df9),Annotation([Ljava.lang.String;@707194ba,[Ljava.lang.String;@1190200a,[Ledu.cmu.lti.nlp.amr.Dependency;@6a2f6f80),Annotation([Ljava.lang.String;@45b4c3a9,[Ljava.lang.String;@399c4be1,[Ljava.lang.String;@291caca8),Annotation([Ljava.lang.String;@385e9564,[Ljava.lang.String;@5b94b04d,[Ledu.cmu.lti.nlp.amr.Entity;@8c3b9d))
AMR:
(c / change-01, ARG1, b / bus)
(c2 / change-01, ARG1, w3 / want-01)
(d / deliver-01, ARG0, p / people)
(d / deliver-01, ARG1, f / food)
(d2 / drive-01, ARG0, p3 / person)
(d2 / drive-01, ARG1, b / bus)
(w / want-01, ARG0, f / food)
(w / want-01, ARG1, c / change-01)
(w2 / want-01, ARG0, p2 / people)
(w2 / want-01, ARG1, c2 / change-01)
(w3 / want-01, ARG0, p3 / person)
(w3 / want-01, ARG1, c3 / change-01)

Decoded in 396,557 microseconds
Sentence: Do they not realise that you don't get piles of change from the bank,

Spans:
Span 14-15:  bank => bank-01
Span 11-12:  change => change-01
Span 6-7:  do => do-02
Span 8-9:  get => get-04
Span 1-2:  they => they
Span 5-6:  you => you

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),bank,bank-01,false), Span(11,12,List(1),change,change-01,false), Span(8,9,List(2),get,get-04,false), Span(6,7,List(3),do,do-02,false), Span(5,6,List(4),you,you,false), Span(1,2,List(5),they,they,false)),Map(2 -> get-04, 5 -> they, 1 -> change-01, 4 -> you, 0 -> bank-01, 3 -> do-02),Map(t -> they, b -> bank-01, d -> do-02, y -> you, g -> get-04, c -> change-01))),[Ljava.lang.String;@4c39bec8,Annotation([Ljava.lang.String;@f79e,[Ljava.lang.String;@7ee8290b,[Ljava.lang.String;@1f59a598),Annotation([Ljava.lang.String;@1e178745,[Ljava.lang.String;@192c3f1e,[Ledu.cmu.lti.nlp.amr.Dependency;@26b3fd41),Annotation([Ljava.lang.String;@7494f96a,[Ljava.lang.String;@561b6512,[Ljava.lang.String;@2e377400),Annotation([Ljava.lang.String;@1757cd72,[Ljava.lang.String;@445b295b,[Ledu.cmu.lti.nlp.amr.Entity;@49e5f737))
AMR:
(b / bank-01, ARG1, y / you)
(c / change-01, ARG1, d / do-02)
(d / do-02, ARG1, g / get-04)
(g / get-04, ARG1, y / you)
(g / get-04, ARG6, t / they)

Decoded in 170,897 microseconds
Sentence: someone somewhere is going to have to take the notes?

Spans:
Span 3-4:  going => go-02
Span 9-10:  notes => note
Span 0-1:  someone => someone
Span 7-8:  take => take-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),notes,note,false), Span(7,8,List(1),take,take-01,false), Span(3,4,List(2),going,go-02,false), Span(0,1,List(3),someone,someone,false)),Map(2 -> go-02, 1 -> take-01, 0 -> note, 3 -> someone),Map(n -> note, t -> take-01, s -> someone, g -> go-02))),[Ljava.lang.String;@5c671d7f,Annotation([Ljava.lang.String;@757277dc,[Ljava.lang.String;@687e99d8,[Ljava.lang.String;@e4487af),Annotation([Ljava.lang.String;@6aaceffd,[Ljava.lang.String;@c86b9e3,[Ledu.cmu.lti.nlp.amr.Dependency;@10aa41f2),Annotation([Ljava.lang.String;@3af9c5b7,[Ljava.lang.String;@37271612,[Ljava.lang.String;@ed7f8b4),Annotation([Ljava.lang.String;@4c309d4d,[Ljava.lang.String;@38102d01,[Ledu.cmu.lti.nlp.amr.Entity;@37883b97))
AMR:
(g / go-02, ARG0, s / someone)
(g / go-02, ARG1, t / take-01)
(t / take-01, ARG1, n / note)

Decoded in 58,039 microseconds
Sentence: People are getting lazy.

Spans:
Span 2-3:  getting => get-01
Span 0-1:  People => "People's"

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),getting,get-01,false), Span(0,1,List(1),People,"People's",false)),Map(1 -> "People's", 0 -> get-01),Map(P -> "People's", g -> get-01))),[Ljava.lang.String;@6ab778a,Annotation([Ljava.lang.String;@4e3958e7,[Ljava.lang.String;@77f80c04,[Ljava.lang.String;@1dac5ef),Annotation([Ljava.lang.String;@5c90e579,[Ljava.lang.String;@58ea606c,[Ledu.cmu.lti.nlp.amr.Dependency;@6f45df59),Annotation([Ljava.lang.String;@38e79ae3,[Ljava.lang.String;@63070bab,[Ljava.lang.String;@68e5eea7),Annotation([Ljava.lang.String;@291b4bf5,[Ljava.lang.String;@2d2ffcb7,[Ledu.cmu.lti.nlp.amr.Entity;@762ef0ea))
AMR:
(g / get-01, ARG1, P / "People's")

Decoded in 5,649 microseconds
Sentence: I do like to get as near as possible as i woudn't like to be couting coppers all day

Spans:
Span 18-19:  all => all
Span 19-20:  day => (temporal-quantity :unit day)
Span 1-2:  do => do-02
Span 4-5:  get => get-04
Span 6-7:  near => near
Span 8-9:  possible => possible

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),day,(temporal-quantity :unit day),false), Span(18,19,List(2),all,all,false), Span(8,9,List(3),possible,possible,false), Span(6,7,List(4),near,near,false), Span(4,5,List(5),get,get-04,false), Span(1,2,List(6),do,do-02,false)),Map(2 -> all, 5 -> get-04, 1 -> day, 4 -> near, 6 -> do-02, 0 -> temporal-quantity, 3 -> possible),Map(n -> near, t -> temporal-quantity, d -> day, g -> get-04, p -> possible, a -> all, d2 -> do-02))),[Ljava.lang.String;@10d68fcd,Annotation([Ljava.lang.String;@117e949d,[Ljava.lang.String;@6db9f5a4,[Ljava.lang.String;@5f8edcc5),Annotation([Ljava.lang.String;@7b02881e,[Ljava.lang.String;@1ebd319f,[Ledu.cmu.lti.nlp.amr.Dependency;@3c0be339),Annotation([Ljava.lang.String;@15ca7889,[Ljava.lang.String;@7a675056,[Ljava.lang.String;@d21a74c),Annotation([Ljava.lang.String;@6e509ffa,[Ljava.lang.String;@2898ac89,[Ledu.cmu.lti.nlp.amr.Entity;@683dbc2c))
AMR:
(d2 / do-02, ARG0, a / all)
(d2 / do-02, ARG1, g / get-04)
(g / get-04, ARG0, p / possible)
(g / get-04, ARG1, n / near)
(t / temporal-quantity, quant, a / all)
(t / temporal-quantity, unit, d / day)

Decoded in 164,734 microseconds
Sentence: take a £20 note on the bus, they just tell you to get on cos theyre lazy as hell

Spans:
Span 3-4:  20 => 20
Span 7-8:  bus => bus
Span 14-15:  get => get-04
Span 10-11:  just => just
Span 4-5:  note => note-01
Span 0-1:  take => take-01
Span 11-12:  tell => tell-01
Span 9-10:  they => they
Span 12-13:  you => you

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),get,get-04,false), Span(12,13,List(1),you,you,false), Span(11,12,List(2),tell,tell-01,false), Span(10,11,List(3),just,just,false), Span(9,10,List(4),they,they,false), Span(7,8,List(5),bus,bus,false), Span(4,5,List(6),note,note-01,false), Span(3,4,List(7),20,20,false), Span(0,1,List(8),take,take-01,false)),Map(2 -> tell-01, 5 -> bus, 8 -> take-01, 7 -> 20, 1 -> you, 4 -> they, 6 -> note-01, 0 -> get-04, 3 -> just),Map(n -> note-01, 2 -> 20, b -> bus, t -> tell-01, j -> just, t3 -> take-01, y -> you, g -> get-04, t2 -> they))),[Ljava.lang.String;@6ff29830,Annotation([Ljava.lang.String;@6a2b953e,[Ljava.lang.String;@313b2ea6,[Ljava.lang.String;@2f465398),Annotation([Ljava.lang.String;@548e6d58,[Ljava.lang.String;@623a8092,[Ledu.cmu.lti.nlp.amr.Dependency;@a1cdc6d),Annotation([Ljava.lang.String;@175b9425,[Ljava.lang.String;@3098cf3b,[Ljava.lang.String;@610f7aa),Annotation([Ljava.lang.String;@6a03bcb1,[Ljava.lang.String;@21b2e768,[Ledu.cmu.lti.nlp.amr.Entity;@57250572))
AMR:
(g / get-04, ARG1, t / tell-01)
(j / just, quant, t2 / they)
(n / note-01, ARG1, 2 / 20)
(t / tell-01, ARG1, j / just)
(t / tell-01, purpose, n / note-01)
(t2 / they, quant, b / bus)
(t3 / take-01, ARG1, 2 / 20)
(y / you, purpose, t / tell-01)

Decoded in 365,857 microseconds
Sentence: its illegal to pay certain amounts in loads of coins. such as you can only pay something like 30pence in 1ps

Spans:
Span 5-6:  amounts => amount
Span 14-15:  can => possible
Span 4-5:  certain => certain
Span 1-2:  illegal => (law :polarity -)
Span 15-16:  only => only
Span 16-17:  pay => pay-01
Span 3-4:  pay => pay-01
Span 11-12:  such => such
Span 13-14:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of only in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of pay in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of something in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of like in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of 30pence in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of 1ps in position 21
Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),pay,pay-01,false), Span(15,16,List(1),only,only,false), Span(14,15,List(2),can,possible,false), Span(13,14,List(3),you,you,false), Span(11,12,List(4),such,such,false), Span(5,6,List(5),amounts,amount,false), Span(4,5,List(6),certain,certain,false), Span(3,4,List(7),pay,pay-01,false), Span(1,2,List(9, 8),illegal,(law :polarity -),false)),Map(2 -> possible, 5 -> amount, 8 -> law, 7 -> pay-01, 1 -> only, 4 -> such, 6 -> certain, 9 -> -, 0 -> pay-01, 3 -> you),Map(p2 -> possible, s -> such, y -> you, p -> pay-01, a -> amount, l -> law, c -> certain, o -> only, p3 -> pay-01))),[Ljava.lang.String;@5609159b,Annotation([Ljava.lang.String;@2118cddf,[Ljava.lang.String;@17a7f733,[Ljava.lang.String;@68567e20),Annotation([Ljava.lang.String;@76ed1b7c,[Ljava.lang.String;@11fc564b,[Ledu.cmu.lti.nlp.amr.Dependency;@394a2528),Annotation([Ljava.lang.String;@6236eb5f,[Ljava.lang.String;@7c1e2a9e,[Ljava.lang.String;@fa36558),Annotation([Ljava.lang.String;@672872e1,[Ljava.lang.String;@32910148,[Ledu.cmu.lti.nlp.amr.Entity;@3f56875e))
AMR:
(a / amount, mod, c / certain)
(l / law, polarity, -)
(p / pay-01, ARG0, y / you)
(p / pay-01, ARG1, s / such)
(p / pay-01, ARG6, o / only)
(p2 / possible, op, y / you)
(p3 / pay-01, ARG0, y / you)
(p3 / pay-01, ARG1, a / amount)
(p3 / pay-01, ARG6, l / law)

Decoded in 217,005 microseconds
Sentence: Hello I started university in September, didn't immediately gel with it obviously like most people.

Spans:
Span 9-10:  immediately => immediate
Span 12-13:  it => it
Span 15-16:  most => most
Span 13-14:  obviously => obvious
Span 16-17:  people => people
Span 5-6:  September => (date-entity :month 9)
Span 2-3:  started => start-01
Span 3-4:  university => university

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),people,people,false), Span(15,16,List(1),most,most,false), Span(13,14,List(2),obviously,obvious,false), Span(12,13,List(3),it,it,false), Span(9,10,List(4),immediately,immediate,false), Span(5,6,List(6, 5),September,(date-entity :month 9),false), Span(3,4,List(7),university,university,false), Span(2,3,List(8),started,start-01,false)),Map(2 -> obvious, 5 -> date-entity, 8 -> start-01, 7 -> university, 1 -> most, 4 -> immediate, 6 -> 9, 0 -> people, 3 -> it),Map(s -> start-01, d -> date-entity, m -> most, p -> people, i2 -> immediate, i -> it, u -> university, 9 -> 9, o -> obvious))),[Ljava.lang.String;@2b4bac49,Annotation([Ljava.lang.String;@fd07cbb,[Ljava.lang.String;@3571b748,[Ljava.lang.String;@3e96bacf),Annotation([Ljava.lang.String;@484970b0,[Ljava.lang.String;@4470f8a6,[Ledu.cmu.lti.nlp.amr.Dependency;@7c83dc97),Annotation([Ljava.lang.String;@7748410a,[Ljava.lang.String;@740773a3,[Ljava.lang.String;@37f1104d),Annotation([Ljava.lang.String;@55740540,[Ljava.lang.String;@60015ef5,[Ledu.cmu.lti.nlp.amr.Entity;@2f54a33d))
AMR:
(d / date-entity, month, 9 / 9)
(o / obvious, calendar, i / it)
(p / people, mod, m / most)
(s / start-01, ARG0, p / people)
(s / start-01, ARG1, u / university)
(s / start-01, ARG2, i / it)
(s / start-01, ARG6, i2 / immediate)
(s / start-01, time, d / date-entity)

Decoded in 180,650 microseconds
Sentence: However, I knew it would take me some time to adjust, because I have always been very introverted, and shy and especially anxious and all the rest of it.

Spans:
Span 27-28:  all => all
Span 16-17:  always => always
Span 26-27:  and => and
Span 23-24:  and => and
Span 21-22:  and => and
Span 13-14:  because => cause-01
Span 24-25:  especially => especially
Span 31-32:  it => it
Span 4-5:  it => it
Span 3-4:  knew => know-01
Span 29-30:  rest => rest
Span 8-9:  some => some
Span 6-7:  take => take-01
Span 9-10:  time => time
Span 18-19:  very => very

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),it,it,false), Span(29,30,List(1),rest,rest,false), Span(27,28,List(2),all,all,false), Span(26,27,List(3),and,and,false), Span(24,25,List(4),especially,especially,false), Span(23,24,List(5),and,and,false), Span(21,22,List(6),and,and,false), Span(18,19,List(7),very,very,false), Span(16,17,List(8),always,always,false), Span(13,14,List(9),because,cause-01,false), Span(9,10,List(10),time,time,false), Span(8,9,List(11),some,some,false), Span(6,7,List(12),take,take-01,false), Span(4,5,List(13),it,it,false), Span(3,4,List(14),knew,know-01,false)),Map(2 -> all, 5 -> and, 12 -> take-01, 8 -> always, 7 -> very, 1 -> rest, 4 -> especially, 11 -> some, 14 -> know-01, 6 -> and, 0 -> it, 9 -> cause-01, 3 -> and, 10 -> time, 13 -> it),Map(e -> especially, k -> know-01, t -> time, a3 -> and, s -> some, v -> very, a -> all, a5 -> always, i2 -> it, t2 -> take-01, i -> it, r -> rest, a2 -> and, c -> cause-01, a4 -> and))),[Ljava.lang.String;@1018bde2,Annotation([Ljava.lang.String;@65b3f4a4,[Ljava.lang.String;@f2ff811,[Ljava.lang.String;@568ff82),Annotation([Ljava.lang.String;@50caa560,[Ljava.lang.String;@2a266d09,[Ledu.cmu.lti.nlp.amr.Dependency;@5ab9e72c),Annotation([Ljava.lang.String;@186f8716,[Ljava.lang.String;@1d8bd0de,[Ljava.lang.String;@45ca843),Annotation([Ljava.lang.String;@11c9af63,[Ljava.lang.String;@757acd7b,[Ledu.cmu.lti.nlp.amr.Entity;@36b4fe2a))
AMR:
(a2 / and, op, r / rest)
(a3 / and, op, a4 / and)
(a3 / and, op, e / especially)
(a3 / and, op, r / rest)
(a5 / always, calendar, v / very)
(c / cause-01, ARG0, a4 / and)
(c / cause-01, ARG6, a5 / always)
(i / it, calendar, r / rest)
(k / know-01, ARG1, t2 / take-01)
(r / rest, quant, a / all)
(t / time, quant, s / some)
(t2 / take-01, ARG0, i2 / it)
(t2 / take-01, ARG1, t / time)
(t2 / take-01, ARG6, c / cause-01)

Decoded in 468,014 microseconds
Sentence: The first night I was here, all my housemates and I went out and it was the hardest thing I have ever ever had to do.

Spans:
Span 7-8:  all => all
Span 14-15:  and => and
Span 10-11:  and => and
Span 26-27:  do => do-02
Span 23-24:  ever => ever
Span 22-23:  ever => ever
Span 5-6:  here => here
Span 15-16:  it => it
Span 2-3:  night => night
Span 13-14:  out => out
Span 12-13:  went => go-08

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),do,do-02,false), Span(23,24,List(1),ever,ever,false), Span(22,23,List(2),ever,ever,false), Span(15,16,List(3),it,it,false), Span(14,15,List(4),and,and,false), Span(13,14,List(5),out,out,false), Span(12,13,List(6),went,go-08,false), Span(10,11,List(7),and,and,false), Span(7,8,List(8),all,all,false), Span(5,6,List(9),here,here,false), Span(2,3,List(10),night,night,false)),Map(2 -> ever, 5 -> out, 8 -> all, 7 -> and, 1 -> ever, 4 -> and, 6 -> go-08, 9 -> here, 0 -> do-02, 10 -> night, 3 -> it),Map(n -> night, e -> ever, h -> here, e2 -> ever, a3 -> all, d -> do-02, g -> go-08, a -> and, a2 -> and, i -> it, o -> out))),[Ljava.lang.String;@574b560f,Annotation([Ljava.lang.String;@ba54932,[Ljava.lang.String;@28975c28,[Ljava.lang.String;@3943a2be),Annotation([Ljava.lang.String;@343570b7,[Ljava.lang.String;@157853da,[Ledu.cmu.lti.nlp.amr.Dependency;@71c3b41),Annotation([Ljava.lang.String;@236e3f4e,[Ljava.lang.String;@3cc1435c,[Ljava.lang.String;@6bf0219d),Annotation([Ljava.lang.String;@dd0c991,[Ljava.lang.String;@5f16132a,[Ledu.cmu.lti.nlp.amr.Entity;@69fb6037))
AMR:
(a / and, op, g / go-08)
(a2 / and, op, g / go-08)
(d / do-02, ARG0, e / ever)
(d / do-02, ARG1, h / here)
(e / ever, degree, e2 / ever)
(g / go-08, ARG0, a3 / all)
(g / go-08, ARG1, i / it)
(g / go-08, ARG5, o / out)
(g / go-08, ARG6, h / here)
(h / here, calendar, n / night)

Decoded in 239,885 microseconds
Sentence: To go into the SU bar on my own, sober.

NER Entity: (country :name (name :op "SU"))
Spans:
Span 5-6:  bar => bar-01
Span 1-2:  go => go-01
Span 8-9:  own => own

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),own,own,false), Span(5,6,List(1),bar,bar-01,false), Span(1,2,List(2),go,go-01,false)),Map(2 -> go-01, 1 -> bar-01, 0 -> own),Map(b -> bar-01, g -> go-01, o -> own))),[Ljava.lang.String;@36d585c,Annotation([Ljava.lang.String;@87a85e1,[Ljava.lang.String;@671a5887,[Ljava.lang.String;@5552768b),Annotation([Ljava.lang.String;@3c947bc5,[Ljava.lang.String;@609db43b,[Ledu.cmu.lti.nlp.amr.Dependency;@55f616cf),Annotation([Ljava.lang.String;@1356d4d4,[Ljava.lang.String;@c03cf28,[Ljava.lang.String;@1329eff),Annotation([Ljava.lang.String;@6497b078,[Ljava.lang.String;@41c2284a,[Ledu.cmu.lti.nlp.amr.Entity;@53aad5d5))
AMR:
(b / bar-01, ARG1, o / own)
(g / go-01, ARG1, b / bar-01)

Decoded in 29,020 microseconds
Sentence: Anyways more to the point; Here are the facts:

Spans:
Span 5-6:  ; => and
Span 1-2:  more => more
Span 4-5:  point => point

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),;,and,false), Span(4,5,List(1),point,point,false), Span(1,2,List(2),more,more,false)),Map(2 -> more, 1 -> point, 0 -> and),Map(m -> more, p -> point, a -> and))),[Ljava.lang.String;@46fa7c39,Annotation([Ljava.lang.String;@1fb700ee,[Ljava.lang.String;@4f67eb2a,[Ljava.lang.String;@4a668b6e),Annotation([Ljava.lang.String;@5f683daf,[Ljava.lang.String;@78ffe6dc,[Ledu.cmu.lti.nlp.amr.Dependency;@8317c52),Annotation([Ljava.lang.String;@76f2bbc1,[Ljava.lang.String;@68e965f5,[Ljava.lang.String;@6f27a732),Annotation([Ljava.lang.String;@6c779568,[Ljava.lang.String;@f381794,[Ledu.cmu.lti.nlp.amr.Entity;@2cdd0d4b))
AMR:
(a / and, op, p / point)
(p / point, calendar, m / more)

Decoded in 16,227 microseconds
Sentence: - I am not enjoying university having been here 5months or so; I'm disillusioned by the course, not enjoying the projects set, and I don't like the course delivery as much.

Spans:
Span 12-13:  ; => and
Span 26-27:  and => and
Span 32-33:  course => course
Span 18-19:  course => course
Span 33-34:  delivery => deliver-01
Span 28-29:  do => do-02
Span 6-7:  having => have-03
Span 8-9:  here => here
Span 35-36:  much => much
Span 10-11:  or => or
Span 23-24:  projects => project
Span 11-12:  so => so
Span 5-6:  university => university

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),much,much,false), Span(33,34,List(1),delivery,deliver-01,false), Span(32,33,List(2),course,course,false), Span(28,29,List(3),do,do-02,false), Span(26,27,List(4),and,and,false), Span(23,24,List(5),projects,project,false), Span(18,19,List(6),course,course,false), Span(12,13,List(7),;,and,false), Span(11,12,List(8),so,so,false), Span(10,11,List(9),or,or,false), Span(8,9,List(10),here,here,false), Span(6,7,List(11),having,have-03,false), Span(5,6,List(12),university,university,false)),Map(2 -> course, 5 -> project, 12 -> university, 8 -> so, 7 -> and, 1 -> deliver-01, 4 -> and, 11 -> have-03, 6 -> course, 0 -> much, 9 -> or, 3 -> do-02, 10 -> here),Map(h -> here, h2 -> have-03, s -> so, m -> much, d -> deliver-01, p -> project, a -> and, d2 -> do-02, a2 -> and, c -> course, u -> university, o -> or, c2 -> course))),[Ljava.lang.String;@7e9131d5,Annotation([Ljava.lang.String;@2e1d27ba,[Ljava.lang.String;@61d6015a,[Ljava.lang.String;@2525ff7e),Annotation([Ljava.lang.String;@524d6d96,[Ljava.lang.String;@152aa092,[Ledu.cmu.lti.nlp.amr.Dependency;@44a7bfbc),Annotation([Ljava.lang.String;@4ef37659,[Ljava.lang.String;@776b83cc,[Ljava.lang.String;@37858383),Annotation([Ljava.lang.String;@4e268090,[Ljava.lang.String;@1bb266b3,[Ledu.cmu.lti.nlp.amr.Entity;@306cf3ea))
AMR:
(a / and, op, a2 / and)
(a / and, op, p / project)
(d / deliver-01, ARG0, c2 / course)
(d / deliver-01, ARG1, c / course)
(d2 / do-02, ARG0, a / and)
(d2 / do-02, ARG1, m / much)
(d2 / do-02, ARG2, c / course)
(h2 / have-03, ARG0, u / university)
(h2 / have-03, ARG1, o / or)
(h2 / have-03, ARG6, h / here)
(o / or, op, s / so)
(u / university, poss, a / and)

Decoded in 422,579 microseconds
Sentence: The University made out it was much better than it seems.

Spans:
Span 7-8:  better => good
Span 9-10:  it => it
Span 4-5:  it => it
Span 6-7:  much => much
Span 3-4:  out => out
Span 10-11:  seems => seem-01
Span 1-2:  University => university

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),seems,seem-01,false), Span(9,10,List(1),it,it,false), Span(7,8,List(2),better,good,false), Span(6,7,List(3),much,much,false), Span(4,5,List(4),it,it,false), Span(3,4,List(5),out,out,false), Span(1,2,List(6),University,university,false)),Map(2 -> good, 5 -> out, 1 -> it, 4 -> it, 6 -> university, 0 -> seem-01, 3 -> much),Map(s -> seem-01, m -> much, g -> good, i2 -> it, i -> it, u -> university, o -> out))),[Ljava.lang.String;@2beee7ff,Annotation([Ljava.lang.String;@5136d012,[Ljava.lang.String;@5939a379,[Ljava.lang.String;@e1de817),Annotation([Ljava.lang.String;@52102734,[Ljava.lang.String;@3541cb24,[Ledu.cmu.lti.nlp.amr.Dependency;@2177849e),Annotation([Ljava.lang.String;@40cb8df7,[Ljava.lang.String;@13b13b5d,[Ljava.lang.String;@2892dae4),Annotation([Ljava.lang.String;@355ce81c,[Ljava.lang.String;@29647f75,[Ledu.cmu.lti.nlp.amr.Entity;@3315d2d7))
AMR:
(g / good, compared-to, s / seem-01)
(m / much, domain, i2 / it)
(o / out, calendar, i2 / it)
(o / out, calendar, u / university)
(s / seem-01, ARG0, i / it)
(s / seem-01, ARG1, m / much)

Decoded in 60,273 microseconds
Sentence: - I had a bad start to the first term; student finance was delayed, adding to my stress levels, I was so worried I was unable to progress with work, conclusively it all piled up.

Spans:
Span 10-11:  ; => and
Span 16-17:  adding => add-01
Span 36-37:  all => all
Span 4-5:  bad => bad
Span 14-15:  delayed => delay-01
Span 12-13:  finance => finance-01
Span 35-36:  it => it
Span 20-21:  levels => level
Span 30-31:  progress => progress-01
Span 24-25:  so => so
Span 5-6:  start => start-01
Span 19-20:  stress => stress-01
Span 11-12:  student => (person :ARG0-of study-01)
Span 9-10:  term => term
Span 32-33:  work => work-01
Span 25-26:  worried => worry-02

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),all,all,false), Span(35,36,List(1),it,it,false), Span(32,33,List(2),work,work-01,false), Span(30,31,List(3),progress,progress-01,false), Span(25,26,List(4),worried,worry-02,false), Span(24,25,List(5),so,so,false), Span(20,21,List(6),levels,level,false), Span(19,20,List(7),stress,stress-01,false), Span(16,17,List(8),adding,add-01,false), Span(14,15,List(9),delayed,delay-01,false), Span(12,13,List(10),finance,finance-01,false), Span(11,12,List(12, 11),student,(person :ARG0-of study-01),false), Span(10,11,List(13),;,and,false), Span(9,10,List(14),term,term,false), Span(5,6,List(15),start,start-01,false), Span(4,5,List(16),bad,bad,false)),Map(2 -> work-01, 5 -> so, 12 -> study-01, 15 -> start-01, 8 -> add-01, 7 -> stress-01, 1 -> it, 4 -> worry-02, 11 -> person, 14 -> term, 6 -> level, 0 -> all, 9 -> delay-01, 16 -> bad, 3 -> progress-01, 10 -> finance-01, 13 -> and),Map(w -> work-01, s2 -> stress-01, b -> bad, t -> term, p2 -> person, a3 -> and, s -> so, s4 -> start-01, d -> delay-01, p -> progress-01, a -> all, w2 -> worry-02, i -> it, a2 -> add-01, s3 -> study-01, l -> level, f -> finance-01))),[Ljava.lang.String;@d6e7bab,Annotation([Ljava.lang.String;@5fa07e12,[Ljava.lang.String;@55b53d44,[Ljava.lang.String;@482bce4f),Annotation([Ljava.lang.String;@366647c2,[Ljava.lang.String;@6a6afff2,[Ledu.cmu.lti.nlp.amr.Dependency;@1649b0e6),Annotation([Ljava.lang.String;@865dd6,[Ljava.lang.String;@4da4253,[Ljava.lang.String;@3972a855),Annotation([Ljava.lang.String;@62e7f11d,[Ljava.lang.String;@503d687a,[Ledu.cmu.lti.nlp.amr.Entity;@6a370f4))
AMR:
(a / all, calendar, i / it)
(a2 / add-01, ARG1, d / delay-01)
(a2 / add-01, ARG2, s2 / stress-01)
(d / delay-01, ARG1, f / finance-01)
(f / finance-01, ARG1, a3 / and)
(l / level, mod, s2 / stress-01)
(p / progress-01, ARG1, w / work-01)
(s2 / stress-01, ARG1, a / all)
(s3 / study-01, ARG0, p2 / person)
(s3 / study-01, ARG1, f / finance-01)
(s4 / start-01, ARG0, a3 / and)
(s4 / start-01, ARG2, t / term)
(s4 / start-01, mod, b / bad)
(w / work-01, ARG1, a3 / and)
(w2 / worry-02, ARG1, p / progress-01)
(w2 / worry-02, manner, s / so)

Decoded in 760,644 microseconds
Sentence: - I was assigned a counselor through the university; had seen her for about 5-6weeks (block sessions), if I'm honest it didn't really work; because I was never open with her.

Spans:
Span 30-31:  ; => and
Span 9-10:  ; => and
Span 14-15:  about => about
Span 3-4:  assigned => assign-01
Span 31-32:  because => cause-01
Span 17-18:  block => block-01
Span 25-26:  it => it
Span 35-36:  open => open-01
Span 28-29:  really => really
Span 11-12:  seen => see-01
Span 18-19:  sessions => session
Span 6-7:  through => through
Span 8-9:  university => university
Span 29-30:  work => work-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),open,open-01,false), Span(31,32,List(1),because,cause-01,false), Span(30,31,List(2),;,and,false), Span(29,30,List(3),work,work-01,false), Span(28,29,List(4),really,really,false), Span(25,26,List(5),it,it,false), Span(18,19,List(6),sessions,session,false), Span(17,18,List(7),block,block-01,false), Span(14,15,List(8),about,about,false), Span(11,12,List(9),seen,see-01,false), Span(9,10,List(10),;,and,false), Span(8,9,List(11),university,university,false), Span(6,7,List(12),through,through,false), Span(3,4,List(13),assigned,assign-01,false)),Map(2 -> and, 5 -> it, 12 -> through, 8 -> about, 7 -> block-01, 1 -> cause-01, 4 -> really, 11 -> university, 6 -> session, 0 -> open-01, 9 -> see-01, 3 -> work-01, 10 -> and, 13 -> assign-01),Map(w -> work-01, s2 -> see-01, b -> block-01, t -> through, a3 -> and, s -> session, a -> and, r -> really, i -> it, a2 -> about, c -> cause-01, u -> university, o -> open-01, a4 -> assign-01))),[Ljava.lang.String;@2abf4075,Annotation([Ljava.lang.String;@770d3326,[Ljava.lang.String;@4cc8eb05,[Ljava.lang.String;@51f116b8),Annotation([Ljava.lang.String;@19d481b,[Ljava.lang.String;@1f97cf0d,[Ledu.cmu.lti.nlp.amr.Dependency;@140c9f39),Annotation([Ljava.lang.String;@4d910fd6,[Ljava.lang.String;@26275bef,[Ljava.lang.String;@7690781),Annotation([Ljava.lang.String;@77eca502,[Ljava.lang.String;@3246fb96,[Ledu.cmu.lti.nlp.amr.Entity;@2e222612))
AMR:
(a4 / assign-01, ARG1, s2 / see-01)
(a4 / assign-01, path, t / through)
(b / block-01, ARG1, a2 / about)
(c / cause-01, ARG0, a3 / and)
(c / cause-01, ARG1, o / open-01)
(o / open-01, ARG1, a / and)
(s / session, mod, b / block-01)
(s2 / see-01, ARG1, a3 / and)
(s2 / see-01, ARG2, s / session)
(t / through, op, u / university)
(w / work-01, ARG0, a / and)
(w / work-01, ARG1, i / it)
(w / work-01, manner, r / really)

Decoded in 533,356 microseconds
Sentence: Only half-halfheartedly.

Spans:
Span 1-2:  half => half
Span 0-1:  Only => only

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),half,half,false), Span(0,1,List(1),Only,only,false)),Map(1 -> only, 0 -> half),Map(h -> half, o -> only))),[Ljava.lang.String;@61386958,Annotation([Ljava.lang.String;@73ee04c8,[Ljava.lang.String;@7671cb68,[Ljava.lang.String;@49dc7102),Annotation([Ljava.lang.String;@6b8ca3c8,[Ljava.lang.String;@68c72235,[Ledu.cmu.lti.nlp.amr.Dependency;@10959ece),Annotation([Ljava.lang.String;@3a6bb9bf,[Ljava.lang.String;@34f7cfd9,[Ljava.lang.String;@65f095f8),Annotation([Ljava.lang.String;@59af0466,[Ljava.lang.String;@3e6ef8ad,[Ledu.cmu.lti.nlp.amr.Entity;@346d61be))
AMR:
(h / half, mod, o / only)

Decoded in 5,146 microseconds
Sentence: - Now the work-load is up to my neck, I have major deadlines to hit, I am depressed, the anxiety is resulting in me feeling miserable all the time.

Spans:
Span 31-32:  all => all
Span 24-25:  anxiety => anxiety
Span 29-30:  feeling => feel-01
Span 17-18:  hit => hit-01
Span 5-6:  load => load-01
Span 14-15:  major => major
Span 10-11:  neck => neck
Span 26-27:  resulting => result-01
Span 33-34:  time => time
Span 3-4:  work => work-01

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),time,time,false), Span(31,32,List(1),all,all,false), Span(29,30,List(2),feeling,feel-01,false), Span(26,27,List(3),resulting,result-01,false), Span(24,25,List(4),anxiety,anxiety,false), Span(17,18,List(5),hit,hit-01,false), Span(14,15,List(6),major,major,false), Span(10,11,List(7),neck,neck,false), Span(5,6,List(8),load,load-01,false), Span(3,4,List(9),work,work-01,false)),Map(2 -> feel-01, 5 -> hit-01, 8 -> load-01, 7 -> neck, 1 -> all, 4 -> anxiety, 6 -> major, 9 -> work-01, 0 -> time, 3 -> result-01),Map(w -> work-01, n -> neck, h -> hit-01, t -> time, m -> major, a -> all, a2 -> anxiety, r -> result-01, l -> load-01, f -> feel-01))),[Ljava.lang.String;@55536d9e,Annotation([Ljava.lang.String;@747edf66,[Ljava.lang.String;@3d1cfad4,[Ljava.lang.String;@62230c58),Annotation([Ljava.lang.String;@2cd2a21f,[Ljava.lang.String;@2e55dd0c,[Ledu.cmu.lti.nlp.amr.Dependency;@74455848),Annotation([Ljava.lang.String;@e7edb54,[Ljava.lang.String;@378542de,[Ljava.lang.String;@3738449f),Annotation([Ljava.lang.String;@69e1dd28,[Ljava.lang.String;@11bd0f3b,[Ledu.cmu.lti.nlp.amr.Entity;@c333c60))
AMR:
(f / feel-01, ARG0, n / neck)
(f / feel-01, ARG1, t / time)
(f / feel-01, ARG6, a / all)
(h / hit-01, ARG1, w / work-01)
(r / result-01, ARG1, a2 / anxiety)
(r / result-01, ARG2, f / feel-01)
(r / result-01, ARG6, l / load-01)
(w / work-01, ARG0, m / major)
(w / work-01, ARG1, l / load-01)

Decoded in 334,071 microseconds
Sentence: In no longer have a counselor because you can only have them for so many sessions at a time, and I doubt it will help much this time, if it hasn't already.

Spans:
Span 34-35:  already => already
Span 20-21:  and => and
Span 6-7:  because => cause-01
Span 8-9:  can => possible
Span 22-23:  doubt => doubt-01
Span 25-26:  help => help-01
Span 31-32:  it => it
Span 23-24:  it => it
Span 2-3:  longer => longer
Span 14-15:  many => many
Span 26-27:  much => much
Span 1-2:  no => -
Span 9-10:  only => only
Span 15-16:  sessions => session
Span 13-14:  so => so
Span 27-28:  this => this
Span 28-29:  time => time
Span 18-19:  time => time
Span 7-8:  you => you

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),already,already,false), Span(31,32,List(1),it,it,false), Span(28,29,List(2),time,time,false), Span(27,28,List(3),this,this,false), Span(26,27,List(4),much,much,false), Span(25,26,List(5),help,help-01,false), Span(23,24,List(6),it,it,false), Span(22,23,List(7),doubt,doubt-01,false), Span(20,21,List(8),and,and,false), Span(18,19,List(9),time,time,false), Span(15,16,List(10),sessions,session,false), Span(14,15,List(11),many,many,false), Span(13,14,List(12),so,so,false), Span(9,10,List(13),only,only,false), Span(8,9,List(14),can,possible,false), Span(7,8,List(15),you,you,false), Span(6,7,List(16),because,cause-01,false), Span(2,3,List(17),longer,longer,false), Span(1,2,List(18),no,-,false)),Map(2 -> time, 5 -> help-01, 12 -> so, 15 -> you, 8 -> and, 18 -> -, 7 -> doubt-01, 17 -> longer, 1 -> it, 4 -> much, 11 -> many, 14 -> possible, 6 -> it, 0 -> already, 9 -> time, 16 -> cause-01, 3 -> this, 10 -> session, 13 -> only),Map(h -> help-01, s2 -> so, t -> time, m2 -> many, s -> session, m -> much, d -> doubt-01, t3 -> time, y -> you, p -> possible, a -> already, t2 -> this, i2 -> it, i -> it, a2 -> and, - -> -, c -> cause-01, l -> longer, o -> only))),[Ljava.lang.String;@79da8dc5,Annotation([Ljava.lang.String;@1eb5174b,[Ljava.lang.String;@67080771,[Ljava.lang.String;@72cde7cc),Annotation([Ljava.lang.String;@5fd4f8f5,[Ljava.lang.String;@696da30b,[Ledu.cmu.lti.nlp.amr.Dependency;@4e7912d8),Annotation([Ljava.lang.String;@53976f5c,[Ljava.lang.String;@2bfc268b,[Ljava.lang.String;@2f8dad04),Annotation([Ljava.lang.String;@29e495ff,[Ljava.lang.String;@41e1e210,[Ledu.cmu.lti.nlp.amr.Entity;@be35cd9))
AMR:
(a2 / and, op, d / doubt-01)
(a2 / and, op, p / possible)
(a2 / and, op, t3 / time)
(c / cause-01, ARG0, p / possible)
(c / cause-01, ARG1, o / only)
(c / cause-01, ARG6, y / you)
(d / doubt-01, ARG0, - / -)
(d / doubt-01, ARG1, h / help-01)
(d / doubt-01, ARG6, a / already)
(h / help-01, ARG0, i2 / it)
(h / help-01, ARG1, t / time)
(h / help-01, ARG6, i / it)
(l / longer, calendar, - / -)
(m / much, calendar, t2 / this)
(m2 / many, mod, s2 / so)
(s / session, prep-in, t3 / time)
(s / session, quant, m2 / many)
(t / time, mod, t2 / this)

Decoded in 692,378 microseconds
Sentence: - I lack motivation, don't feel comfortable with any of my lecturers, feel like I want to give in, but can't bring myself to it, because I will end up in a dead end job, and I aspired to 'be someone'.

Spans:
Span 42-43:  and => and
Span 10-11:  any => any
Span 31-32:  because => cause-01
Span 26-27:  bring => bring-01
Span 23-24:  but => contrast-01
Span 5-6:  do => do-02
Span 39-40:  end => end-01
Span 34-35:  end => end-01
Span 20-21:  give => give-01
Span 29-30:  it => it
Span 40-41:  job => job
Span 2-3:  lack => lack-01
Span 48-49:  someone => someone
Span 18-19:  want => want-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),someone,someone,false), Span(42,43,List(1),and,and,false), Span(40,41,List(2),job,job,false), Span(39,40,List(3),end,end-01,false), Span(34,35,List(4),end,end-01,false), Span(31,32,List(5),because,cause-01,false), Span(29,30,List(6),it,it,false), Span(26,27,List(7),bring,bring-01,false), Span(23,24,List(8),but,contrast-01,false), Span(20,21,List(9),give,give-01,false), Span(18,19,List(10),want,want-01,false), Span(10,11,List(11),any,any,false), Span(5,6,List(12),do,do-02,false), Span(2,3,List(13),lack,lack-01,false)),Map(2 -> job, 5 -> cause-01, 12 -> do-02, 8 -> contrast-01, 7 -> bring-01, 1 -> and, 4 -> end-01, 11 -> any, 6 -> it, 0 -> someone, 9 -> give-01, 3 -> end-01, 10 -> want-01, 13 -> lack-01),Map(e -> end-01, w -> want-01, b -> bring-01, e2 -> end-01, j -> job, s -> someone, d -> do-02, g -> give-01, a -> and, i -> it, a2 -> any, c -> cause-01, l -> lack-01, c2 -> contrast-01))),[Ljava.lang.String;@4944252c,Annotation([Ljava.lang.String;@44821a96,[Ljava.lang.String;@a3d8174,[Ljava.lang.String;@1ba9117e),Annotation([Ljava.lang.String;@732c2a62,[Ljava.lang.String;@272ed83b,[Ledu.cmu.lti.nlp.amr.Dependency;@41fecb8b),Annotation([Ljava.lang.String;@120f102b,[Ljava.lang.String;@625732,[Ljava.lang.String;@51dcb805),Annotation([Ljava.lang.String;@66498326,[Ljava.lang.String;@cad498c,[Ledu.cmu.lti.nlp.amr.Entity;@1e6454ec))
AMR:
(a / and, op, b / bring-01)
(a / and, op, j / job)
(b / bring-01, ARG1, i / it)
(c / cause-01, ARG0, e2 / end-01)
(c / cause-01, ARG1, b / bring-01)
(c2 / contrast-01, ARG1, l / lack-01)
(c2 / contrast-01, ARG2, b / bring-01)
(d / do-02, ARG1, a2 / any)
(e / end-01, ARG1, j / job)
(e2 / end-01, ARG1, s / someone)
(g / give-01, ARG1, a / and)
(l / lack-01, ARG1, d / do-02)
(w / want-01, ARG1, g / give-01)

Decoded in 333,474 microseconds
Sentence: - I would rather be dead than not be educated, and live a life I want to live (and dropping out of uni would make matters worse).

Spans:
Span 20-21:  and => and
Span 11-12:  and => and
Span 9-10:  educated => (person :ARG1-of educate-01)
Span 14-15:  life => life
Span 18-19:  live => live-01
Span 12-13:  live => live-01
Span 26-27:  make => make-01
Span 27-28:  matters => matter
Span 22-23:  out => out
Span 16-17:  want => want-01
Span 28-29:  worse => bad

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),worse,bad,false), Span(27,28,List(1),matters,matter,false), Span(26,27,List(2),make,make-01,false), Span(22,23,List(3),out,out,false), Span(20,21,List(4),and,and,false), Span(18,19,List(5),live,live-01,false), Span(16,17,List(6),want,want-01,false), Span(14,15,List(7),life,life,false), Span(12,13,List(8),live,live-01,false), Span(11,12,List(9),and,and,false), Span(9,10,List(11, 10),educated,(person :ARG1-of educate-01),false)),Map(2 -> make-01, 5 -> live-01, 8 -> live-01, 7 -> life, 1 -> matter, 11 -> educate-01, 4 -> and, 6 -> want-01, 9 -> and, 0 -> bad, 10 -> person, 3 -> out),Map(e -> educate-01, w -> want-01, b -> bad, m2 -> make-01, l3 -> live-01, m -> matter, p -> person, a -> and, a2 -> and, l2 -> life, l -> live-01, o -> out))),[Ljava.lang.String;@2accdbb5,Annotation([Ljava.lang.String;@b62d79,[Ljava.lang.String;@6631f5ca,[Ljava.lang.String;@5ace1ed4),Annotation([Ljava.lang.String;@1613674b,[Ljava.lang.String;@27ff5d15,[Ledu.cmu.lti.nlp.amr.Dependency;@4e096385),Annotation([Ljava.lang.String;@649bec2e,[Ljava.lang.String;@693fe6c9,[Ljava.lang.String;@34f5090e),Annotation([Ljava.lang.String;@31e5415e,[Ljava.lang.String;@a2431d0,[Ledu.cmu.lti.nlp.amr.Entity;@1cbb87f3))
AMR:
(a / and, op, l3 / live-01)
(a2 / and, op, l3 / live-01)
(a2 / and, op, p / person)
(e / educate-01, ARG1, p / person)
(l / live-01, ARG1, l2 / life)
(l3 / live-01, ARG1, l2 / life)
(l3 / live-01, ARG6, o / out)
(m2 / make-01, ARG0, a / and)
(m2 / make-01, ARG1, m / matter)
(m2 / make-01, ARG6, b / bad)
(w / want-01, ARG1, l / live-01)

Decoded in 478,671 microseconds
Sentence: - I'm 21yrs old (turn 22 this year), don't have much time left for failing need to do something.

Spans:
Span 7-8:  22 => 22
Span 22-23:  do => do-02
Span 12-13:  do => do-02
Span 19-20:  failing => fail-01
Span 17-18:  left => leave-01
Span 15-16:  much => much
Span 20-21:  need => need-01
Span 4-5:  old => old
Span 8-9:  this => this
Span 16-17:  time => time
Span 6-7:  turn => turn-07
Span 9-10:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),do,do-02,false), Span(20,21,List(1),need,need-01,false), Span(19,20,List(2),failing,fail-01,false), Span(17,18,List(3),left,leave-01,false), Span(16,17,List(4),time,time,false), Span(15,16,List(5),much,much,false), Span(12,13,List(6),do,do-02,false), Span(9,10,List(8, 7),year,(temporal-quantity :unit year),false), Span(8,9,List(9),this,this,false), Span(7,8,List(10),22,22,false), Span(6,7,List(11),turn,turn-07,false), Span(4,5,List(12),old,old,false)),Map(2 -> fail-01, 5 -> much, 12 -> old, 8 -> year, 7 -> temporal-quantity, 1 -> need-01, 4 -> time, 11 -> turn-07, 6 -> do-02, 0 -> do-02, 9 -> this, 3 -> leave-01, 10 -> 22),Map(n -> need-01, t4 -> turn-07, 2 -> 22, t -> time, d -> do-02, m -> much, t3 -> this, y -> year, d2 -> do-02, t2 -> temporal-quantity, l -> leave-01, f -> fail-01, o -> old))),[Ljava.lang.String;@1a4013,Annotation([Ljava.lang.String;@1b6e1eff,[Ljava.lang.String;@306f16f3,[Ljava.lang.String;@702b8b12),Annotation([Ljava.lang.String;@22e357dc,[Ljava.lang.String;@49912c99,[Ledu.cmu.lti.nlp.amr.Dependency;@10163d6),Annotation([Ljava.lang.String;@2dde1bff,[Ljava.lang.String;@15bbf42f,[Ljava.lang.String;@550ee7e5),Annotation([Ljava.lang.String;@5f9b2141,[Ljava.lang.String;@247d8ae,[Ledu.cmu.lti.nlp.amr.Entity;@48974e45))
AMR:
(d / do-02, ARG1, 2 / 22)
(d2 / do-02, ARG1, l / leave-01)
(d2 / do-02, ARG6, m / much)
(f / fail-01, ARG1, n / need-01)
(l / leave-01, ARG1, t / time)
(l / leave-01, ARG2, f / fail-01)
(n / need-01, ARG1, d / do-02)
(o / old, topic, l / leave-01)
(t2 / temporal-quantity, unit, y / year)
(t4 / turn-07, ARG1, t2 / temporal-quantity)
(t4 / turn-07, ARG6, o / old)
(y / year, mod, t3 / this)

Decoded in 425,329 microseconds
Sentence: I failed college once over, did another course so I could get to uni don't want to go through the system over and over and consistently fail.

Spans:
Span 26-27:  and => and
Span 24-25:  and => and
Span 7-8:  another => another
Span 2-3:  college => college
Span 27-28:  consistently => consistent
Span 11-12:  could => possible
Span 8-9:  course => course
Span 15-16:  do => do-02
Span 28-29:  fail => fail-safe
Span 1-2:  failed => fail-01
Span 12-13:  get => get-04
Span 19-20:  go => go-01
Span 3-4:  once => once
Span 25-26:  over => over
Span 23-24:  over => over
Span 4-5:  over => over
Span 9-10:  so => so
Span 22-23:  system => system
Span 20-21:  through => through
Span 17-18:  want => want-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),fail,fail-safe,false), Span(27,28,List(1),consistently,consistent,false), Span(26,27,List(2),and,and,false), Span(25,26,List(3),over,over,false), Span(24,25,List(4),and,and,false), Span(23,24,List(5),over,over,false), Span(22,23,List(6),system,system,false), Span(20,21,List(7),through,through,false), Span(19,20,List(8),go,go-01,false), Span(17,18,List(9),want,want-01,false), Span(15,16,List(10),do,do-02,false), Span(12,13,List(11),get,get-04,false), Span(11,12,List(12),could,possible,false), Span(9,10,List(13),so,so,false), Span(8,9,List(14),course,course,false), Span(7,8,List(15),another,another,false), Span(4,5,List(16),over,over,false), Span(3,4,List(17),once,once,false), Span(2,3,List(18),college,college,false), Span(1,2,List(19),failed,fail-01,false)),Map(2 -> and, 5 -> over, 12 -> possible, 15 -> another, 8 -> go-01, 18 -> college, 7 -> through, 17 -> once, 1 -> consistent, 4 -> and, 11 -> get-04, 14 -> course, 6 -> system, 0 -> fail-safe, 9 -> want-01, 16 -> over, 19 -> fail-01, 3 -> over, 10 -> do-02, 13 -> so),Map(w -> want-01, s2 -> so, t -> through, o3 -> over, a3 -> another, s -> system, d -> do-02, g2 -> get-04, g -> go-01, p -> possible, c3 -> college, a -> and, o2 -> over, a2 -> and, c -> consistent, f2 -> fail-01, f -> fail-safe, o4 -> once, o -> over, c2 -> course))),[Ljava.lang.String;@6a84a97d,Annotation([Ljava.lang.String;@6c130c45,[Ljava.lang.String;@50ad3bc1,[Ljava.lang.String;@223aa2f7),Annotation([Ljava.lang.String;@6d3a388c,[Ljava.lang.String;@193f604a,[Ledu.cmu.lti.nlp.amr.Dependency;@20f5239f),Annotation([Ljava.lang.String;@57af006c,[Ljava.lang.String;@6bedbc4d,[Ljava.lang.String;@932bc4a),Annotation([Ljava.lang.String;@d29f28,[Ljava.lang.String;@2fd1433e,[Ledu.cmu.lti.nlp.amr.Entity;@29d89d5d))
AMR:
(a / and, op, f / fail-safe)
(a / and, op, f2 / fail-01)
(a / and, op, w / want-01)
(a2 / and, calendar, o / over)
(a2 / and, calendar, o2 / over)
(c2 / course, mod, a3 / another)
(d / do-02, ARG1, w / want-01)
(f / fail-safe, mod, c / consistent)
(f2 / fail-01, ARG1, c3 / college)
(f2 / fail-01, ARG6, o4 / once)
(g / go-01, ARG2, t / through)
(g2 / get-04, ARG1, c2 / course)
(o3 / over, degree, o4 / once)
(p / possible, domain, g2 / get-04)
(s2 / so, op, g2 / get-04)
(t / through, op, s / system)
(w / want-01, ARG0, c2 / course)
(w / want-01, ARG1, g / go-01)
(w / want-01, ARG6, o2 / over)

Decoded in 883,688 microseconds
Sentence: Can someone please give me some advice please?

Spans:
Span 6-7:  advice => advice
Span 3-4:  give => give-01
Span 5-6:  some => some
Span 1-2:  someone => someone

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),advice,advice,false), Span(5,6,List(1),some,some,false), Span(3,4,List(2),give,give-01,false), Span(1,2,List(3),someone,someone,false)),Map(2 -> give-01, 1 -> some, 0 -> advice, 3 -> someone),Map(s2 -> someone, s -> some, g -> give-01, a -> advice))),[Ljava.lang.String;@3514a4c0,Annotation([Ljava.lang.String;@212b5695,[Ljava.lang.String;@446293d,[Ljava.lang.String;@69997e9d),Annotation([Ljava.lang.String;@793be5ca,[Ljava.lang.String;@2df9b86,[Ledu.cmu.lti.nlp.amr.Dependency;@37654521),Annotation([Ljava.lang.String;@15aab8c6,[Ljava.lang.String;@33990a0c,[Ljava.lang.String;@4de4b452),Annotation([Ljava.lang.String;@50b5ac82,[Ljava.lang.String;@101952da,[Ledu.cmu.lti.nlp.amr.Entity;@6babf3bf))
AMR:
(g / give-01, ARG0, s2 / someone)
(g / give-01, ARG1, s / some)
(g / give-01, ARG6, a / advice)

Decoded in 29,086 microseconds
Sentence: Perhaps go and see your doctor, and see if there's any way you can get your deadlines extended to try and ease the pressure a bit?

Spans:
Span 22-23:  and => and
Span 7-8:  and => and
Span 2-3:  and => and
Span 12-13:  any => any
Span 15-16:  can => possible
Span 23-24:  ease => ease
Span 19-20:  extended => extend-01
Span 16-17:  get => get-04
Span 1-2:  go => go-01
Span 25-26:  pressure => pressure-01
Span 8-9:  see => see-01
Span 3-4:  see => see-01
Span 21-22:  try => try-01
Span 13-14:  way => way
Span 14-15:  you => you

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),pressure,pressure-01,false), Span(23,24,List(1),ease,ease,false), Span(22,23,List(2),and,and,false), Span(21,22,List(3),try,try-01,false), Span(19,20,List(4),extended,extend-01,false), Span(16,17,List(5),get,get-04,false), Span(15,16,List(6),can,possible,false), Span(14,15,List(7),you,you,false), Span(13,14,List(8),way,way,false), Span(12,13,List(9),any,any,false), Span(8,9,List(10),see,see-01,false), Span(7,8,List(11),and,and,false), Span(3,4,List(12),see,see-01,false), Span(2,3,List(13),and,and,false), Span(1,2,List(14),go,go-01,false)),Map(2 -> and, 5 -> get-04, 12 -> see-01, 8 -> way, 7 -> you, 1 -> ease, 4 -> extend-01, 11 -> and, 14 -> go-01, 6 -> possible, 0 -> pressure-01, 9 -> any, 3 -> try-01, 10 -> see-01, 13 -> and),Map(e -> ease, w -> way, s2 -> see-01, t -> try-01, e2 -> extend-01, p2 -> possible, a3 -> and, s -> see-01, g2 -> go-01, p -> pressure-01, g -> get-04, y -> you, a -> and, a2 -> any, a4 -> and))),[Ljava.lang.String;@3059cbc,Annotation([Ljava.lang.String;@7ea9e1e2,[Ljava.lang.String;@24fcf36f,[Ljava.lang.String;@10feca44),Annotation([Ljava.lang.String;@3fb1549b,[Ljava.lang.String;@ea6147e,[Ledu.cmu.lti.nlp.amr.Dependency;@4d02f94e),Annotation([Ljava.lang.String;@2b48a640,[Ljava.lang.String;@1e683a3e,[Ljava.lang.String;@2053d869),Annotation([Ljava.lang.String;@7a419da4,[Ljava.lang.String;@14555e0a,[Ledu.cmu.lti.nlp.amr.Entity;@4bb33f74))
AMR:
(a / and, op, e / ease)
(a / and, op, t / try-01)
(a3 / and, op, g2 / go-01)
(a3 / and, op, s / see-01)
(a4 / and, op, g2 / go-01)
(a4 / and, op, s2 / see-01)
(e2 / extend-01, ARG1, a / and)
(g / get-04, ARG0, y / you)
(g / get-04, ARG1, w / way)
(g2 / go-01, ARG1, a2 / any)
(p2 / possible, domain, g / get-04)
(s / see-01, ARG1, w / way)
(s2 / see-01, ARG1, a / and)
(t / try-01, ARG1, p / pressure-01)

Decoded in 394,323 microseconds
Sentence: Send your tutors a similar email to this post (don't worry they've seen it all before - some much more uncomfortable admissions too - I know as I used to work in a Uni Dept admin) and they will consider mitigating circumstances.

NER Entity: (organization :name (name :op "Uni" :op "Dept"))
Spans:
Span 35-37:  a Uni => (organization :name (name :op "Uni" :op "Dept"))
Span 17-18:  all => all
Span 40-41:  and => and
Span 18-19:  before => before
Span 43-44:  consider => consider-02
Span 10-11:  do => do-02
Span 5-6:  email => email
Span 16-17:  it => it
Span 28-29:  know => know-01
Span 22-23:  more => more
Span 21-22:  much => much
Span 8-9:  post => post
Span 15-16:  seen => see-01
Span 20-21:  some => some
Span 41-42:  they => they
Span 13-14:  they => they
Span 7-8:  this => this
Span 25-26:  too => too
Span 31-32:  used => use-01
Span 33-34:  work => work-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),consider,consider-02,false), Span(41,42,List(1),they,they,false), Span(40,41,List(2),and,and,false), Span(35,37,List(6, 5, 4, 3),a Uni,(organization :name (name :op "Uni" :op "Dept")),false), Span(33,34,List(7),work,work-01,false), Span(31,32,List(8),used,use-01,false), Span(28,29,List(9),know,know-01,false), Span(25,26,List(10),too,too,false), Span(22,23,List(11),more,more,false), Span(21,22,List(12),much,much,false), Span(20,21,List(13),some,some,false), Span(18,19,List(14),before,before,false), Span(17,18,List(15),all,all,false), Span(16,17,List(16),it,it,false), Span(15,16,List(17),seen,see-01,false), Span(13,14,List(18),they,they,false), Span(10,11,List(19),do,do-02,false), Span(8,9,List(20),post,post,false), Span(7,8,List(21),this,this,false), Span(5,6,List(22),email,email,false)),Map(2 -> and, 5 -> "Uni", 12 -> much, 15 -> all, 8 -> use-01, 21 -> this, 18 -> they, 7 -> work-01, 17 -> see-01, 1 -> they, 4 -> name, 11 -> more, 14 -> before, 20 -> post, 6 -> "Dept", 22 -> email, 0 -> consider-02, 9 -> know-01, 16 -> it, 19 -> do-02, 3 -> organization, 10 -> too, 13 -> some),Map(e -> email, n -> name, w -> work-01, t4 -> this, s2 -> see-01, t -> they, k -> know-01, b -> before, m2 -> much, s -> some, d -> do-02, m -> more, t3 -> they, p -> post, a -> and, t2 -> too, i -> it, a2 -> all, c -> consider-02, u -> use-01, o -> organization))),[Ljava.lang.String;@759d26fb,Annotation([Ljava.lang.String;@3c73951,[Ljava.lang.String;@3d5c822d,[Ljava.lang.String;@6f46426d),Annotation([Ljava.lang.String;@73700b80,[Ljava.lang.String;@49c7b90e,[Ledu.cmu.lti.nlp.amr.Dependency;@10d307f1),Annotation([Ljava.lang.String;@4d5b6aac,[Ljava.lang.String;@3e84448c,[Ljava.lang.String;@4a7f959b),Annotation([Ljava.lang.String;@429bffaa,[Ljava.lang.String;@5403f35f,[Ledu.cmu.lti.nlp.amr.Entity;@483f6d77))
AMR:
(a / and, op, c / consider-02)
(b / before, calendar, a2 / all)
(c / consider-02, ARG0, t / they)
(c / consider-02, ARG1, m / more)
(d / do-02, ARG0, o / organization)
(d / do-02, ARG1, s2 / see-01)
(e / email, op, p / post)
(k / know-01, ARG0, u / use-01)
(k / know-01, ARG1, s / some)
(k / know-01, ARG6, t2 / too)
(m / more, degree, m2 / much)
(n / name, op, "Dept")
(n / name, op, "Uni")
(o / organization, name, n / name)
(p / post, mod, t4 / this)
(s2 / see-01, ARG0, t3 / they)
(s2 / see-01, ARG1, a2 / all)
(s2 / see-01, ARG6, i / it)
(u / use-01, ARG1, d / do-02)
(u / use-01, ARG2, w / work-01)
(w / work-01, ARG0, a / and)
(w / work-01, ARG1, p / post)

Decoded in 1,129,929 microseconds
Sentence: Break your work into manageable chunks.

Spans:
Span 2-3:  work => work-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),work,work-01,false)),Map(0 -> work-01),Map(w -> work-01))),[Ljava.lang.String;@7e5afaa6,Annotation([Ljava.lang.String;@63a12c68,[Ljava.lang.String;@28f3b248,[Ljava.lang.String;@1b1426f4),Annotation([Ljava.lang.String;@32b260fa,[Ljava.lang.String;@581ac8a8,[Ledu.cmu.lti.nlp.amr.Dependency;@6d4e5011),Annotation([Ljava.lang.String;@57d7f8ca,[Ljava.lang.String;@76c3e77a,[Ljava.lang.String;@78123e82),Annotation([Ljava.lang.String;@67c33749,[Ljava.lang.String;@fba92d3,[Ledu.cmu.lti.nlp.amr.Entity;@662b4c69))
AMR:


Decoded in 6,630 microseconds
Sentence: Concentrate on one bit of work at a time (obvs the most urgent assignment first).

Spans:
Span 12-13:  most => most
Span 2-3:  one => 1
Span 8-9:  time => time
Span 13-14:  urgent => urgent
Span 5-6:  work => work-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),urgent,urgent,false), Span(12,13,List(1),most,most,false), Span(8,9,List(2),time,time,false), Span(5,6,List(3),work,work-01,false), Span(2,3,List(4),one,1,false)),Map(2 -> time, 1 -> most, 4 -> 1, 0 -> urgent, 3 -> work-01),Map(w -> work-01, t -> time, m -> most, 1 -> 1, u -> urgent))),[Ljava.lang.String;@fa49800,Annotation([Ljava.lang.String;@71238fc2,[Ljava.lang.String;@2a54a73f,[Ljava.lang.String;@16a0ee18),Annotation([Ljava.lang.String;@3d6f0054,[Ljava.lang.String;@505fc5a4,[Ledu.cmu.lti.nlp.amr.Dependency;@5fbdfdcf),Annotation([Ljava.lang.String;@4efc180e,[Ljava.lang.String;@bd4dc25,[Ljava.lang.String;@25084a1e),Annotation([Ljava.lang.String;@156b88f5,[Ljava.lang.String;@3bf9ce3e,[Ledu.cmu.lti.nlp.amr.Entity;@16610890))
AMR:
(m / most, quant, 1 / 1)
(u / urgent, degree, m / most)
(w / work-01, ARG1, u / urgent)
(w / work-01, location, t / time)

Decoded in 77,229 microseconds
Sentence: Don't shut yourself off from your housemates, and well done for trying new things from the very beginning now keep at it!

Spans:
Span 9-10:  and => and
Span 19-20:  beginning => begin-01
Span 11-12:  done => do-02
Span 23-24:  it => it
Span 21-22:  keep => keep-05
Span 14-15:  new => new
Span 20-21:  now => now
Span 4-5:  off => off
Span 2-3:  shut => shut-05
Span 15-16:  things => thing
Span 13-14:  trying => try-01
Span 18-19:  very => very
Span 10-11:  well => well

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),it,it,false), Span(21,22,List(1),keep,keep-05,false), Span(20,21,List(2),now,now,false), Span(19,20,List(3),beginning,begin-01,false), Span(18,19,List(4),very,very,false), Span(15,16,List(5),things,thing,false), Span(14,15,List(6),new,new,false), Span(13,14,List(7),trying,try-01,false), Span(11,12,List(8),done,do-02,false), Span(10,11,List(9),well,well,false), Span(9,10,List(10),and,and,false), Span(4,5,List(11),off,off,false), Span(2,3,List(12),shut,shut-05,false)),Map(2 -> now, 5 -> thing, 12 -> shut-05, 8 -> do-02, 7 -> try-01, 1 -> keep-05, 4 -> very, 11 -> off, 6 -> new, 0 -> it, 9 -> well, 3 -> begin-01, 10 -> and),Map(n -> now, w -> well, k -> keep-05, b -> begin-01, t -> thing, s -> shut-05, v -> very, d -> do-02, a -> and, t2 -> try-01, i -> it, o -> off, n2 -> new))),[Ljava.lang.String;@71def8f8,Annotation([Ljava.lang.String;@383bfa16,[Ljava.lang.String;@4d465b11,[Ljava.lang.String;@53fdffa1),Annotation([Ljava.lang.String;@5562c41e,[Ljava.lang.String;@32ee6fee,[Ledu.cmu.lti.nlp.amr.Dependency;@4d0f2471),Annotation([Ljava.lang.String;@7133da86,[Ljava.lang.String;@3232a28a,[Ljava.lang.String;@73e22a3d),Annotation([Ljava.lang.String;@47faa49c,[Ljava.lang.String;@28f2a10f,[Ledu.cmu.lti.nlp.amr.Entity;@f736069))
AMR:
(a / and, op, d / do-02)
(a / and, op, s / shut-05)
(b / begin-01, ARG1, v / very)
(d / do-02, ARG1, t2 / try-01)
(d / do-02, mod, w / well)
(k / keep-05, ARG0, t / thing)
(k / keep-05, ARG1, b / begin-01)
(k / keep-05, ARG6, i / it)
(k / keep-05, time, n / now)
(s / shut-05, ARG1, o / off)
(t / thing, mod, n2 / new)
(t2 / try-01, ARG1, t / thing)

Decoded in 420,123 microseconds
Sentence: I'd reccomend you go and see your doctor too.

Spans:
Span 5-6:  and => and
Span 4-5:  go => go-01
Span 6-7:  see => see-01
Span 9-10:  too => too
Span 3-4:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),too,too,false), Span(6,7,List(1),see,see-01,false), Span(5,6,List(2),and,and,false), Span(4,5,List(3),go,go-01,false), Span(3,4,List(4),you,you,false)),Map(2 -> and, 1 -> see-01, 4 -> you, 0 -> too, 3 -> go-01),Map(t -> too, s -> see-01, y -> you, g -> go-01, a -> and))),[Ljava.lang.String;@6da21078,Annotation([Ljava.lang.String;@7fee8714,[Ljava.lang.String;@4229bb3f,[Ljava.lang.String;@56cdfb3b),Annotation([Ljava.lang.String;@2b91004a,[Ljava.lang.String;@20ccf40b,[Ledu.cmu.lti.nlp.amr.Dependency;@2fb3536e),Annotation([Ljava.lang.String;@169e6180,[Ljava.lang.String;@35aea049,[Ljava.lang.String;@7205765b),Annotation([Ljava.lang.String;@47987356,[Ljava.lang.String;@22ef9844,[Ledu.cmu.lti.nlp.amr.Entity;@6283d8b8))
AMR:
(a / and, op, g / go-01)
(a / and, op, s / see-01)
(g / go-01, ARG0, y / you)
(g / go-01, ARG1, t / too)

Decoded in 17,873 microseconds
Sentence: If you've always been an anxious person you might benefit from speaking to someone (my friend got therapy on the NHS for anxiety, so its really normal).

NER Entity: (organization :name (name :op "NHS"))
Spans:
Span 3-4:  always => always
Span 24-25:  anxiety => anxiety
Span 10-11:  benefit => benefit-01
Span 17-18:  friend => friend
Span 29-30:  normal => normal
Span 7-8:  person => person
Span 28-29:  really => really
Span 26-27:  so => so
Span 14-15:  someone => someone
Span 12-13:  speaking => speak-01
Span 8-9:  you => you
Span 1-2:  you => you

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),normal,normal,false), Span(28,29,List(1),really,really,false), Span(26,27,List(2),so,so,false), Span(24,25,List(3),anxiety,anxiety,false), Span(17,18,List(4),friend,friend,false), Span(14,15,List(5),someone,someone,false), Span(12,13,List(6),speaking,speak-01,false), Span(10,11,List(7),benefit,benefit-01,false), Span(8,9,List(8),you,you,false), Span(7,8,List(9),person,person,false), Span(3,4,List(10),always,always,false), Span(1,2,List(11),you,you,false)),Map(2 -> so, 5 -> someone, 8 -> you, 7 -> benefit-01, 1 -> really, 11 -> you, 4 -> friend, 6 -> speak-01, 9 -> person, 0 -> normal, 10 -> always, 3 -> anxiety),Map(n -> normal, b -> benefit-01, s2 -> someone, s -> so, p -> person, y -> you, a -> anxiety, a2 -> always, r -> really, s3 -> speak-01, f -> friend, y2 -> you))),[Ljava.lang.String;@3b6ddd1d,Annotation([Ljava.lang.String;@3f6b0be5,[Ljava.lang.String;@611889f4,[Ljava.lang.String;@1da2cb77),Annotation([Ljava.lang.String;@48f278eb,[Ljava.lang.String;@2f217633,[Ledu.cmu.lti.nlp.amr.Dependency;@a530d0a),Annotation([Ljava.lang.String;@1a18644,[Ljava.lang.String;@5acf93bb,[Ljava.lang.String;@7e7be63f),Annotation([Ljava.lang.String;@6cd28fa7,[Ljava.lang.String;@614ca7df,[Ledu.cmu.lti.nlp.amr.Entity;@4738a206))
AMR:
(a2 / always, domain, y2 / you)
(b / benefit-01, ARG0, y / you)
(b / benefit-01, ARG1, s3 / speak-01)
(b / benefit-01, ARG6, a2 / always)
(f / friend, mod, s2 / someone)
(n / normal, mod, r / really)
(s / so, calendar, a / anxiety)
(s / so, op, n / normal)
(s3 / speak-01, ARG0, p / person)
(s3 / speak-01, ARG1, n / normal)
(s3 / speak-01, ARG2, s2 / someone)

Decoded in 252,228 microseconds
Sentence: And try and get deadlines extended, if you're honest I'm sure your uni will allow it.

Spans:
Span 17-18:  allow => allow-01
Span 2-3:  and => and
Span 5-6:  extended => extend-01
Span 3-4:  get => get-04
Span 18-19:  it => it
Span 1-2:  try => try-01
Span 8-9:  you => you

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),it,it,false), Span(17,18,List(1),allow,allow-01,false), Span(8,9,List(2),you,you,false), Span(5,6,List(3),extended,extend-01,false), Span(3,4,List(4),get,get-04,false), Span(2,3,List(5),and,and,false), Span(1,2,List(6),try,try-01,false)),Map(2 -> you, 5 -> and, 1 -> allow-01, 4 -> get-04, 6 -> try-01, 0 -> it, 3 -> extend-01),Map(e -> extend-01, t -> try-01, g -> get-04, y -> you, a -> allow-01, a2 -> and, i -> it))),[Ljava.lang.String;@66d3eec0,Annotation([Ljava.lang.String;@1e04fa0a,[Ljava.lang.String;@1af2d44a,[Ljava.lang.String;@18d87d80),Annotation([Ljava.lang.String;@618425b5,[Ljava.lang.String;@58695725,[Ledu.cmu.lti.nlp.amr.Dependency;@543588e6),Annotation([Ljava.lang.String;@f5acb9d,[Ljava.lang.String;@4fb3ee4e,[Ljava.lang.String;@5d7148e2),Annotation([Ljava.lang.String;@25fb8912,[Ljava.lang.String;@7c24b813,[Ledu.cmu.lti.nlp.amr.Entity;@2c35e847))
AMR:
(a / allow-01, ARG1, i / it)
(a2 / and, op, g / get-04)
(a2 / and, op, t / try-01)
(e / extend-01, ARG1, t / try-01)
(g / get-04, ARG1, a / allow-01)
(t / try-01, ARG1, y / you)

Decoded in 66,424 microseconds
Sentence: It's getting hard to keep strong and keep carrying on with life.

Spans:
Span 7-8:  and => and
Span 9-10:  carrying => carry-01
Span 2-3:  getting => get-01
Span 3-4:  hard => hard-line
Span 0-1:  It => it
Span 8-9:  keep => keep-05
Span 5-6:  keep => keep-05
Span 12-13:  life => life
Span 6-7:  strong => strong

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),life,life,false), Span(9,10,List(1),carrying,carry-01,false), Span(8,9,List(2),keep,keep-05,false), Span(7,8,List(3),and,and,false), Span(6,7,List(4),strong,strong,false), Span(5,6,List(5),keep,keep-05,false), Span(3,4,List(6),hard,hard-line,false), Span(2,3,List(7),getting,get-01,false), Span(0,1,List(8),It,it,false)),Map(2 -> keep-05, 5 -> keep-05, 8 -> it, 7 -> get-01, 1 -> carry-01, 4 -> strong, 6 -> hard-line, 0 -> life, 3 -> and),Map(k2 -> keep-05, h -> hard-line, k -> keep-05, s -> strong, g -> get-01, a -> and, i -> it, c -> carry-01, l -> life))),[Ljava.lang.String;@7bd4937b,Annotation([Ljava.lang.String;@21e360a,[Ljava.lang.String;@5ba3f27a,[Ljava.lang.String;@58d75e99),Annotation([Ljava.lang.String;@74751b3,[Ljava.lang.String;@741a8937,[Ledu.cmu.lti.nlp.amr.Dependency;@306e95ec),Annotation([Ljava.lang.String;@52af26ee,[Ljava.lang.String;@6fd83fc1,[Ljava.lang.String;@4f2b503c),Annotation([Ljava.lang.String;@bae7dc0,[Ljava.lang.String;@209da20d,[Ledu.cmu.lti.nlp.amr.Entity;@e15b7e8))
AMR:
(a / and, op, k / keep-05)
(a / and, op, k2 / keep-05)
(c / carry-01, ARG1, l / life)
(g / get-01, ARG0, i / it)
(g / get-01, ARG1, a / and)
(h / hard-line, domain, i / it)
(k / keep-05, ARG1, c / carry-01)
(k2 / keep-05, ARG1, s / strong)

Decoded in 48,079 microseconds
Sentence: My mum is getting divorced - she had a horrible time with my step-father and her new found freedom has sent her round the bend.

Spans:
Span 16-17:  and => and
Span 15-16:  father => father
Span 19-20:  found => find-01
Span 20-21:  freedom => free-41
Span 3-4:  getting => get-01
Span 18-19:  new => new
Span 24-25:  round => round
Span 22-23:  sent => send-01
Span 6-7:  she => she
Span 13-14:  step => step-01
Span 10-11:  time => time

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),round,round,false), Span(22,23,List(1),sent,send-01,false), Span(20,21,List(2),freedom,free-41,false), Span(19,20,List(3),found,find-01,false), Span(18,19,List(4),new,new,false), Span(16,17,List(5),and,and,false), Span(15,16,List(6),father,father,false), Span(13,14,List(7),step,step-01,false), Span(10,11,List(8),time,time,false), Span(6,7,List(9),she,she,false), Span(3,4,List(10),getting,get-01,false)),Map(2 -> free-41, 5 -> and, 8 -> time, 7 -> step-01, 1 -> send-01, 4 -> new, 6 -> father, 9 -> she, 0 -> round, 10 -> get-01, 3 -> find-01),Map(n -> new, t -> time, s2 -> step-01, s -> send-01, g -> get-01, a -> and, f3 -> father, r -> round, s3 -> she, f2 -> find-01, f -> free-41))),[Ljava.lang.String;@1b2abca6,Annotation([Ljava.lang.String;@6392827e,[Ljava.lang.String;@2ed2d9cb,[Ljava.lang.String;@d5b810e),Annotation([Ljava.lang.String;@43dac38f,[Ljava.lang.String;@342c38f8,[Ledu.cmu.lti.nlp.amr.Dependency;@c88a337),Annotation([Ljava.lang.String;@5d0a1059,[Ljava.lang.String;@485966cc,[Ljava.lang.String;@1de76cc7),Annotation([Ljava.lang.String;@54bff557,[Ljava.lang.String;@593aaf41,[Ledu.cmu.lti.nlp.amr.Entity;@5a56cdac))
AMR:
(a / and, op, f2 / find-01)
(a / and, op, t / time)
(f / free-41, ARG1, r / round)
(f2 / find-01, ARG0, s3 / she)
(f2 / find-01, ARG1, s / send-01)
(f2 / find-01, ARG6, n / new)
(g / get-01, ARG1, s3 / she)
(s / send-01, ARG1, f / free-41)
(s2 / step-01, ARG1, f3 / father)
(t / time, poss, f3 / father)

Decoded in 362,987 microseconds
Sentence: She's epileptic and a manic depressive with a huge anger problem.

Spans:
Span 3-4:  and => and
Span 10-11:  anger => anger-01
Span 9-10:  huge => huge
Span 11-12:  problem => problem

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),problem,problem,false), Span(10,11,List(1),anger,anger-01,false), Span(9,10,List(2),huge,huge,false), Span(3,4,List(3),and,and,false)),Map(2 -> huge, 1 -> anger-01, 0 -> problem, 3 -> and),Map(h -> huge, p -> problem, a -> anger-01, a2 -> and))),[Ljava.lang.String;@7c711375,Annotation([Ljava.lang.String;@57cf54e1,[Ljava.lang.String;@5b03b9fe,[Ljava.lang.String;@37d4349f),Annotation([Ljava.lang.String;@434a63ab,[Ljava.lang.String;@6e0f5f7f,[Ledu.cmu.lti.nlp.amr.Dependency;@2805d709),Annotation([Ljava.lang.String;@3ee37e5a,[Ljava.lang.String;@2ea41516,[Ljava.lang.String;@3a44431a),Annotation([Ljava.lang.String;@3c7f66c4,[Ljava.lang.String;@194bcebf,[Ledu.cmu.lti.nlp.amr.Entity;@17497425))
AMR:
(a / anger-01, ARG1, a2 / and)
(p / problem, mod, h / huge)
(p / problem, topic, a / anger-01)

Decoded in 28,705 microseconds
Sentence: She's horrible to me, constantly.

Spans:
Span 6-7:  constantly => constant

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),constantly,constant,false)),Map(0 -> constant),Map(c -> constant))),[Ljava.lang.String;@f0da945,Annotation([Ljava.lang.String;@4803b726,[Ljava.lang.String;@ffaa6af,[Ljava.lang.String;@53ce1329),Annotation([Ljava.lang.String;@316bcf94,[Ljava.lang.String;@6404f418,[Ledu.cmu.lti.nlp.amr.Dependency;@3e11f9e9),Annotation([Ljava.lang.String;@1de5f259,[Ljava.lang.String;@729d991e,[Ljava.lang.String;@31fa1761),Annotation([Ljava.lang.String;@957e06,[Ljava.lang.String;@32502377,[Ledu.cmu.lti.nlp.amr.Entity;@2c1b194a))
AMR:


Decoded in 5,392 microseconds
Sentence: I can't cope with her outbursts and nasty hateful remarks when I'm at home.

Spans:
Span 7-8:  and => and
Span 15-16:  home => home
Span 10-11:  remarks => remark-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),home,home,false), Span(10,11,List(1),remarks,remark-01,false), Span(7,8,List(2),and,and,false)),Map(2 -> and, 1 -> remark-01, 0 -> home),Map(h -> home, a -> and, r -> remark-01))),[Ljava.lang.String;@4dbb42b7,Annotation([Ljava.lang.String;@66f57048,[Ljava.lang.String;@550dbc7a,[Ljava.lang.String;@21282ed8),Annotation([Ljava.lang.String;@36916eb0,[Ljava.lang.String;@7bab3f1a,[Ledu.cmu.lti.nlp.amr.Dependency;@437da279),Annotation([Ljava.lang.String;@23c30a20,[Ljava.lang.String;@1e1a0406,[Ljava.lang.String;@3cebbb30),Annotation([Ljava.lang.String;@12aba8be,[Ljava.lang.String;@290222c1,[Ledu.cmu.lti.nlp.amr.Entity;@67f639d3))
AMR:
(a / and, op, r / remark-01)
(r / remark-01, ARG1, h / home)

Decoded in 23,273 microseconds
Sentence: I'm 18, a full-time sixth former at a high pressure private school (on a 95% bursary) and I'm at breaking point.

Spans:
Span 2-3:  18 => 18
Span 19-20:  95 => 95
Span 23-24:  and => and
Span 27-28:  breaking => break-01
Span 9-10:  former => former
Span 5-6:  full => full
Span 12-13:  high => high
Span 28-29:  point => point
Span 13-14:  pressure => pressure-01
Span 14-15:  private => private
Span 15-16:  school => school
Span 7-8:  time => time

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),point,point,false), Span(27,28,List(1),breaking,break-01,false), Span(23,24,List(2),and,and,false), Span(19,20,List(3),95,95,false), Span(15,16,List(4),school,school,false), Span(14,15,List(5),private,private,false), Span(13,14,List(6),pressure,pressure-01,false), Span(12,13,List(7),high,high,false), Span(9,10,List(8),former,former,false), Span(7,8,List(9),time,time,false), Span(5,6,List(10),full,full,false), Span(2,3,List(11),18,18,false)),Map(2 -> and, 5 -> private, 8 -> former, 7 -> high, 1 -> break-01, 11 -> 18, 4 -> school, 6 -> pressure-01, 9 -> time, 0 -> point, 10 -> full, 3 -> 95),Map(h -> high, t -> time, b -> break-01, p2 -> private, s -> school, 1 -> 18, p -> point, a -> and, f2 -> full, f -> former, 9 -> 95, p3 -> pressure-01))),[Ljava.lang.String;@6253c26,Annotation([Ljava.lang.String;@49049a04,[Ljava.lang.String;@71a8adcf,[Ljava.lang.String;@27462a88),Annotation([Ljava.lang.String;@82de64a,[Ljava.lang.String;@659499f1,[Ledu.cmu.lti.nlp.amr.Dependency;@51e69659),Annotation([Ljava.lang.String;@47e2e487,[Ljava.lang.String;@201a4587,[Ljava.lang.String;@61001b64),Annotation([Ljava.lang.String;@4310d43,[Ljava.lang.String;@54a7079e,[Ledu.cmu.lti.nlp.amr.Entity;@26e356f0))
AMR:
(b / break-01, ARG0, f2 / full)
(b / break-01, ARG1, p / point)
(f / former, mod, f2 / full)
(f / former, poss, s / school)
(f2 / full, calendar, 1 / 18)
(p3 / pressure-01, ARG0, a / and)
(p3 / pressure-01, ARG1, 9 / 95)
(p3 / pressure-01, mod, h / high)
(s / school, mod, h / high)
(s / school, mod, p2 / private)
(t / time, mod, f2 / full)

Decoded in 249,835 microseconds
Sentence: I can't do work at home, because she shouts at me.

Spans:
Span 8-9:  because => cause-01
Span 3-4:  do => do-02
Span 6-7:  home => home
Span 9-10:  she => she
Span 4-5:  work => work-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),she,she,false), Span(8,9,List(1),because,cause-01,false), Span(6,7,List(2),home,home,false), Span(4,5,List(3),work,work-01,false), Span(3,4,List(4),do,do-02,false)),Map(2 -> home, 1 -> cause-01, 4 -> do-02, 0 -> she, 3 -> work-01),Map(w -> work-01, h -> home, s -> she, d -> do-02, c -> cause-01))),[Ljava.lang.String;@47d9a273,Annotation([Ljava.lang.String;@4b8ee4de,[Ljava.lang.String;@27f981c6,[Ljava.lang.String;@1b11171f),Annotation([Ljava.lang.String;@1151e434,[Ljava.lang.String;@2dc54ad4,[Ledu.cmu.lti.nlp.amr.Dependency;@4659191b),Annotation([Ljava.lang.String;@55634720,[Ljava.lang.String;@4b0d79fc,[Ljava.lang.String;@4c1909a3),Annotation([Ljava.lang.String;@428640fa,[Ljava.lang.String;@d9345cd,[Ledu.cmu.lti.nlp.amr.Entity;@2d710f1a))
AMR:
(c / cause-01, ARG1, d / do-02)
(c / cause-01, ARG6, s / she)
(d / do-02, ARG1, w / work-01)
(w / work-01, ARG1, h / home)

Decoded in 91,003 microseconds
Sentence: So then my teachers get angry at me.

Spans:
Span 4-5:  get => get-04
Span 0-1:  So => so
Span 3-4:  teachers => (person :ARG0-of teach-01)
Span 1-2:  then => then

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),get,get-04,false), Span(3,4,List(2, 1),teachers,(person :ARG0-of teach-01),false), Span(1,2,List(3),then,then,false), Span(0,1,List(4),So,so,false)),Map(2 -> teach-01, 1 -> person, 4 -> so, 0 -> get-04, 3 -> then),Map(t -> teach-01, s -> so, p -> person, g -> get-04, t2 -> then))),[Ljava.lang.String;@29215f06,Annotation([Ljava.lang.String;@59505b48,[Ljava.lang.String;@4efac082,[Ljava.lang.String;@6bd61f98),Annotation([Ljava.lang.String;@48aca48b,[Ljava.lang.String;@13fd2ccd,[Ledu.cmu.lti.nlp.amr.Dependency;@b9b00e0),Annotation([Ljava.lang.String;@506ae4d4,[Ljava.lang.String;@7d4f9aae,[Ljava.lang.String;@72e5a8e),Annotation([Ljava.lang.String;@54e1c68b,[Ljava.lang.String;@53aac487,[Ledu.cmu.lti.nlp.amr.Entity;@52b1beb6))
AMR:
(g / get-04, ARG1, p / person)
(g / get-04, ARG6, t2 / then)
(t / teach-01, ARG0, p / person)
(t / teach-01, ARG1, s / so)

Decoded in 66,159 microseconds
Sentence: One minute she's lovely, and it's like having my mummy back, then the next, she turns into the most spiteful human alive.

Spans:
Span 6-7:  and => and
Span 13-14:  back => back
Span 10-11:  having => have-03
Span 25-26:  human => human
Span 7-8:  it => it
Span 1-2:  minute => (temporal-quantity :unit minute)
Span 23-24:  most => most
Span 17-18:  next => next
Span 0-1:  One => 1
Span 19-20:  she => she
Span 2-3:  she => she
Span 15-16:  then => then

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),human,human,false), Span(23,24,List(1),most,most,false), Span(19,20,List(2),she,she,false), Span(17,18,List(3),next,next,false), Span(15,16,List(4),then,then,false), Span(13,14,List(5),back,back,false), Span(10,11,List(6),having,have-03,false), Span(7,8,List(7),it,it,false), Span(6,7,List(8),and,and,false), Span(2,3,List(9),she,she,false), Span(1,2,List(11, 10),minute,(temporal-quantity :unit minute),false), Span(0,1,List(12),One,1,false)),Map(2 -> she, 5 -> back, 12 -> 1, 8 -> and, 7 -> it, 1 -> most, 4 -> then, 11 -> minute, 6 -> have-03, 0 -> human, 9 -> she, 3 -> next, 10 -> temporal-quantity),Map(n -> next, h -> human, h2 -> have-03, s2 -> she, t -> then, b -> back, m2 -> minute, s -> she, m -> most, 1 -> 1, a -> and, t2 -> temporal-quantity, i -> it))),[Ljava.lang.String;@273e7444,Annotation([Ljava.lang.String;@7db12bb6,[Ljava.lang.String;@783a467b,[Ljava.lang.String;@272113c4),Annotation([Ljava.lang.String;@73e9cf30,[Ljava.lang.String;@771a660,[Ledu.cmu.lti.nlp.amr.Dependency;@2d52216b),Annotation([Ljava.lang.String;@242b836,[Ljava.lang.String;@3f6f6701,[Ljava.lang.String;@3527942a),Annotation([Ljava.lang.String;@942a29c,[Ljava.lang.String;@1ed6388a,[Ledu.cmu.lti.nlp.amr.Entity;@5a45133e))
AMR:
(a / and, calendar, s2 / she)
(a / and, op, i / it)
(h2 / have-03, ARG0, i / it)
(h2 / have-03, ARG1, b / back)
(h2 / have-03, ARG6, n / next)
(m / most, calendar, h / human)
(m / most, mod, s2 / she)
(n / next, mod, t / then)
(s / she, op, h2 / have-03)
(s2 / she, calendar, t2 / temporal-quantity)
(t2 / temporal-quantity, quant, 1 / 1)
(t2 / temporal-quantity, unit, m2 / minute)

Decoded in 183,120 microseconds
Sentence: I'm not going to pass my A2 exams, I've already accepted defeat, that this year of my life is going to make me a failure.

Spans:
Span 8-9:  2 => 2
Span 14-15:  accepted => accept-01
Span 13-14:  already => already
Span 29-30:  failure => fail-01
Span 24-25:  going => go-02
Span 3-4:  going => go-02
Span 22-23:  life => life
Span 26-27:  make => make-01
Span 5-6:  pass => pass-03
Span 18-19:  this => this
Span 19-20:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 117 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),failure,fail-01,false), Span(26,27,List(1),make,make-01,false), Span(24,25,List(2),going,go-02,false), Span(22,23,List(3),life,life,false), Span(19,20,List(5, 4),year,(temporal-quantity :unit year),false), Span(18,19,List(6),this,this,false), Span(14,15,List(7),accepted,accept-01,false), Span(13,14,List(8),already,already,false), Span(8,9,List(9),2,2,false), Span(5,6,List(10),pass,pass-03,false), Span(3,4,List(11),going,go-02,false)),Map(2 -> go-02, 5 -> year, 8 -> already, 7 -> accept-01, 1 -> make-01, 11 -> go-02, 4 -> temporal-quantity, 6 -> this, 9 -> 2, 0 -> fail-01, 10 -> pass-03, 3 -> life),Map(2 -> 2, t -> temporal-quantity, m -> make-01, g2 -> go-02, p -> pass-03, y -> year, g -> go-02, a -> accept-01, t2 -> this, a2 -> already, l -> life, f -> fail-01))),[Ljava.lang.String;@534a5a98,Annotation([Ljava.lang.String;@4f80542f,[Ljava.lang.String;@60bd273d,[Ljava.lang.String;@121314f7),Annotation([Ljava.lang.String;@130c12b7,[Ljava.lang.String;@5e600dd5,[Ledu.cmu.lti.nlp.amr.Dependency;@576d5deb),Annotation([Ljava.lang.String;@5d534f5d,[Ljava.lang.String;@2e3967ea,[Ljava.lang.String;@70e9c95d),Annotation([Ljava.lang.String;@4d5650ae,[Ljava.lang.String;@a38c7fe,[Ledu.cmu.lti.nlp.amr.Entity;@6fdbe764))
AMR:
(a / accept-01, ARG1, g / go-02)
(a / accept-01, ARG6, g2 / go-02)
(a / accept-01, time, a2 / already)
(f / fail-01, ARG1, 2 / 2)
(g / go-02, ARG1, m / make-01)
(g2 / go-02, ARG1, p / pass-03)
(m / make-01, ARG0, t / temporal-quantity)
(m / make-01, ARG1, f / fail-01)
(p / pass-03, ARG1, l / life)
(t / temporal-quantity, unit, y / year)
(y / year, mod, t2 / this)

Decoded in 1,240,693 microseconds
Sentence: Maybe I can come back from this, who knows. I've got the most amazing university offers, but I can't even accept them - I'll never make the grades.

Spans:
Span 25-26:  accept => accept-01
Span 4-5:  back => back
Span 20-21:  but => contrast-01
Span 2-3:  can => possible
Span 3-4:  come => come-01
Span 24-25:  even => even
Span 33-34:  grades => grade-01
Span 31-32:  make => make-01
Span 15-16:  most => most
Span 18-19:  offers => offer-01
Span 6-7:  this => this
Span 17-18:  university => university

 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of accept in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of them in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of 'll in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of never in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of grades in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 34
Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),grades,grade-01,false), Span(31,32,List(1),make,make-01,false), Span(25,26,List(2),accept,accept-01,false), Span(24,25,List(3),even,even,false), Span(20,21,List(4),but,contrast-01,false), Span(18,19,List(5),offers,offer-01,false), Span(17,18,List(6),university,university,false), Span(15,16,List(7),most,most,false), Span(6,7,List(8),this,this,false), Span(4,5,List(9),back,back,false), Span(3,4,List(10),come,come-01,false), Span(2,3,List(11),can,possible,false)),Map(2 -> accept-01, 5 -> offer-01, 8 -> this, 7 -> most, 1 -> make-01, 11 -> possible, 4 -> contrast-01, 6 -> university, 9 -> back, 0 -> grade-01, 10 -> come-01, 3 -> even),Map(e -> even, b -> back, t -> this, m2 -> most, m -> make-01, p -> possible, g -> grade-01, a -> accept-01, u -> university, c -> contrast-01, o -> offer-01, c2 -> come-01))),[Ljava.lang.String;@51c668e3,Annotation([Ljava.lang.String;@2e6a8155,[Ljava.lang.String;@6221a451,[Ljava.lang.String;@52719fb6),Annotation([Ljava.lang.String;@3012646b,[Ljava.lang.String;@4a883b15,[Ledu.cmu.lti.nlp.amr.Dependency;@25641d39),Annotation([Ljava.lang.String;@7b36aa0c,[Ljava.lang.String;@5824a83d,[Ljava.lang.String;@537f60bf),Annotation([Ljava.lang.String;@5677323c,[Ljava.lang.String;@18df8434,[Ledu.cmu.lti.nlp.amr.Entity;@65c7a252))
AMR:
(a / accept-01, ARG1, o / offer-01)
(c / contrast-01, ARG1, o / offer-01)
(c2 / come-01, ARG1, t / this)
(c2 / come-01, direction, b / back)
(g / grade-01, ARG1, m2 / most)
(m / make-01, ARG1, g / grade-01)
(o / offer-01, ARG1, u / university)
(p / possible, domain, a / accept-01)
(p / possible, domain, c2 / come-01)
(p / possible, domain, e / even)
(p / possible, domain, m / make-01)

Decoded in 579,590 microseconds
Sentence: I wish I could wipe her out of my life - things would be so much better without her.

Spans:
Span 16-17:  better => good
Span 3-4:  could => possible
Span 9-10:  life => life
Span 15-16:  much => much
Span 6-7:  out => out
Span 14-15:  so => so
Span 11-12:  things => thing

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),better,good,false), Span(15,16,List(1),much,much,false), Span(14,15,List(2),so,so,false), Span(11,12,List(3),things,thing,false), Span(9,10,List(4),life,life,false), Span(6,7,List(5),out,out,false), Span(3,4,List(6),could,possible,false)),Map(2 -> so, 5 -> out, 1 -> much, 4 -> life, 6 -> possible, 0 -> good, 3 -> thing),Map(t -> thing, s -> so, m -> much, p -> possible, g -> good, l -> life, o -> out))),[Ljava.lang.String;@4d154ccd,Annotation([Ljava.lang.String;@229c6181,[Ljava.lang.String;@4686afc2,[Ljava.lang.String;@1e0b4072),Annotation([Ljava.lang.String;@791f145a,[Ljava.lang.String;@38cee291,[Ledu.cmu.lti.nlp.amr.Dependency;@4b45a2f5),Annotation([Ljava.lang.String;@f09733f,[Ljava.lang.String;@e350b40,[Ljava.lang.String;@41a0aa7d),Annotation([Ljava.lang.String;@2794eab6,[Ljava.lang.String;@6340e5f0,[Ledu.cmu.lti.nlp.amr.Entity;@45099dd3))
AMR:
(g / good, degree, m / much)
(g / good, domain, t / thing)
(l / life, mod, s / so)
(m / much, calendar, s / so)
(o / out, calendar, p / possible)
(o / out, op, l / life)

Decoded in 38,201 microseconds
Sentence: But then, I think I'm just being selfish.

Spans:
Span 0-1:  But => contrast-01
Span 7-8:  just => just
Span 1-2:  then => then
Span 4-5:  think => think-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),just,just,false), Span(4,5,List(1),think,think-01,false), Span(1,2,List(2),then,then,false), Span(0,1,List(3),But,contrast-01,false)),Map(2 -> then, 1 -> think-01, 0 -> just, 3 -> contrast-01),Map(t -> think-01, j -> just, t2 -> then, c -> contrast-01))),[Ljava.lang.String;@13e344d,Annotation([Ljava.lang.String;@1ffaf86,[Ljava.lang.String;@6574a52c,[Ljava.lang.String;@6c1a5b54),Annotation([Ljava.lang.String;@1c7696c6,[Ljava.lang.String;@60099951,[Ledu.cmu.lti.nlp.amr.Dependency;@20140db9),Annotation([Ljava.lang.String;@1e6a3214,[Ljava.lang.String;@368247b9,[Ljava.lang.String;@1a6d8329),Annotation([Ljava.lang.String;@1a942c18,[Ljava.lang.String;@55a147cc,[Ledu.cmu.lti.nlp.amr.Entity;@71ba6d4e))
AMR:
(c / contrast-01, ARG1, t / think-01)
(t / think-01, ARG0, j / just)
(t / think-01, ARG1, t2 / then)

Decoded in 18,524 microseconds
Sentence: But surely, my life isn't meant to be like this?

Spans:
Span 0-1:  But => contrast-01
Span 4-5:  life => life
Span 7-8:  meant => mean-01
Span 11-12:  this => this

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),this,this,false), Span(7,8,List(1),meant,mean-01,false), Span(4,5,List(2),life,life,false), Span(0,1,List(3),But,contrast-01,false)),Map(2 -> life, 1 -> mean-01, 0 -> this, 3 -> contrast-01),Map(t -> this, m -> mean-01, c -> contrast-01, l -> life))),[Ljava.lang.String;@738dc9b,Annotation([Ljava.lang.String;@3c77d488,[Ljava.lang.String;@63376bed,[Ljava.lang.String;@4145bad8),Annotation([Ljava.lang.String;@d86a6f,[Ljava.lang.String;@2892d68,[Ledu.cmu.lti.nlp.amr.Dependency;@5ab956d7),Annotation([Ljava.lang.String;@3646a422,[Ljava.lang.String;@750e2b97,[Ljava.lang.String;@3e27aa33),Annotation([Ljava.lang.String;@2e385cce,[Ljava.lang.String;@2ddc9a9f,[Ledu.cmu.lti.nlp.amr.Entity;@298a5e20))
AMR:
(c / contrast-01, ARG0, t / this)
(c / contrast-01, ARG1, m / mean-01)
(m / mean-01, ARG1, l / life)

Decoded in 52,805 microseconds
Sentence: It should be so much better. B

Spans:
Span 5-6:  better => good
Span 0-1:  It => it
Span 4-5:  much => much
Span 1-2:  should => recommend-01
Span 3-4:  so => so

 *** WARNING: The dependency tree seems broken.  I can't find the head of B in position 7
Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),better,good,false), Span(4,5,List(1),much,much,false), Span(3,4,List(2),so,so,false), Span(1,2,List(3),should,recommend-01,false), Span(0,1,List(4),It,it,false)),Map(2 -> so, 1 -> much, 4 -> it, 0 -> good, 3 -> recommend-01),Map(s -> so, m -> much, g -> good, i -> it, r -> recommend-01))),[Ljava.lang.String;@2a7f1f10,Annotation([Ljava.lang.String;@46cdf8bd,[Ljava.lang.String;@f0c8a99,[Ljava.lang.String;@740cae06),Annotation([Ljava.lang.String;@26d9b808,[Ljava.lang.String;@f78a47e,[Ledu.cmu.lti.nlp.amr.Dependency;@644baf4a),Annotation([Ljava.lang.String;@7526515b,[Ljava.lang.String;@1ed4ae0f,[Ljava.lang.String;@54c5a2ff),Annotation([Ljava.lang.String;@6d4d66d2,[Ljava.lang.String;@2a265ea9,[Ledu.cmu.lti.nlp.amr.Entity;@11392934))
AMR:
(m / much, calendar, s / so)
(r / recommend-01, ARG0, g / good)
(r / recommend-01, ARG1, i / it)
(r / recommend-01, ARG6, s / so)

Decoded in 77,434 microseconds
Sentence: ut I feel as if I have no control over this downhill spiral.

Spans:
Span 8-9:  control => control-01
Span 7-8:  no => -
Span 9-10:  over => over
Span 10-11:  this => this

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),this,this,false), Span(9,10,List(1),over,over,false), Span(8,9,List(2),control,control-01,false), Span(7,8,List(3),no,-,false)),Map(2 -> control-01, 1 -> over, 0 -> this, 3 -> -),Map(t -> this, - -> -, c -> control-01, o -> over))),[Ljava.lang.String;@6892b3b6,Annotation([Ljava.lang.String;@6e6f2380,[Ljava.lang.String;@76a4ebf2,[Ljava.lang.String;@2e8c1c9b),Annotation([Ljava.lang.String;@53fe15ff,[Ljava.lang.String;@449a4f23,[Ledu.cmu.lti.nlp.amr.Dependency;@1530c739),Annotation([Ljava.lang.String;@5b1669c0,[Ljava.lang.String;@78e4deb0,[Ljava.lang.String;@6e9175d8),Annotation([Ljava.lang.String;@7d0b7e3c,[Ljava.lang.String;@15bb5034,[Ledu.cmu.lti.nlp.amr.Entity;@4b741d6d))
AMR:
(c / control-01, ARG1, o / over)
(c / control-01, ARG6, - / -)
(o / over, calendar, t / this)

Decoded in 34,261 microseconds
Sentence: And I don't know what to do.

Spans:
Span 7-8:  do => do-02
Span 2-3:  do => do-02
Span 4-5:  know => know-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),do,do-02,false), Span(4,5,List(1),know,know-01,false), Span(2,3,List(2),do,do-02,false)),Map(2 -> do-02, 1 -> know-01, 0 -> do-02),Map(k -> know-01, d -> do-02, d2 -> do-02))),[Ljava.lang.String;@2eae8e6e,Annotation([Ljava.lang.String;@8f2ef19,[Ljava.lang.String;@470734c3,[Ljava.lang.String;@2cf3d63b),Annotation([Ljava.lang.String;@7674f035,[Ljava.lang.String;@69e153c5,[Ledu.cmu.lti.nlp.amr.Dependency;@173ed316),Annotation([Ljava.lang.String;@25ce9dc4,[Ljava.lang.String;@74ea2410,[Ljava.lang.String;@17f62e33),Annotation([Ljava.lang.String;@76b1e9b8,[Ljava.lang.String;@27406a17,[Ledu.cmu.lti.nlp.amr.Entity;@2af004b))
AMR:
(d2 / do-02, ARG1, k / know-01)
(k / know-01, ARG1, d / do-02)

Decoded in 8,998 microseconds
Sentence: Thanks for reading.

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@248e319b,Annotation([Ljava.lang.String;@5d0bf09b,[Ljava.lang.String;@793f29ff,[Ljava.lang.String;@3e8c3cb),Annotation([Ljava.lang.String;@563f38c4,[Ljava.lang.String;@543295b0,[Ledu.cmu.lti.nlp.amr.Dependency;@54422e18),Annotation([Ljava.lang.String;@117159c0,[Ljava.lang.String;@3e27ba32,[Ljava.lang.String;@7ef82753),Annotation([Ljava.lang.String;@3b0fe47a,[Ljava.lang.String;@202b0582,[Ledu.cmu.lti.nlp.amr.Entity;@235ecd9f))
AMR:


Decoded in 2,825 microseconds
Sentence: It's nice to vent.

Spans:
Span 0-1:  It => it

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),It,it,false)),Map(0 -> it),Map(i -> it))),[Ljava.lang.String;@1ca3b418,Annotation([Ljava.lang.String;@58cbafc2,[Ljava.lang.String;@2034b64c,[Ljava.lang.String;@75d3a5e0),Annotation([Ljava.lang.String;@74d1dc36,[Ljava.lang.String;@7161d8d1,[Ledu.cmu.lti.nlp.amr.Dependency;@74e28667),Annotation([Ljava.lang.String;@1cf6d1be,[Ljava.lang.String;@663c9e7a,[Ljava.lang.String;@19e4653c),Annotation([Ljava.lang.String;@795509d9,[Ljava.lang.String;@53045c6c,[Ledu.cmu.lti.nlp.amr.Entity;@5149d738))
AMR:


Decoded in 3,532 microseconds
Sentence: You can't get her sectioned for that.

Spans:
Span 3-4:  get => get-04

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),get,get-04,false)),Map(0 -> get-04),Map(g -> get-04))),[Ljava.lang.String;@6bbe85a8,Annotation([Ljava.lang.String;@3a7442c7,[Ljava.lang.String;@4be29ed9,[Ljava.lang.String;@548d708a),Annotation([Ljava.lang.String;@4b013c76,[Ljava.lang.String;@53fb3dab,[Ledu.cmu.lti.nlp.amr.Dependency;@cb0755b),Annotation([Ljava.lang.String;@33065d67,[Ljava.lang.String;@712625fd,[Ljava.lang.String;@7bba5817),Annotation([Ljava.lang.String;@742ff096,[Ljava.lang.String;@75437611,[Ledu.cmu.lti.nlp.amr.Entity;@350aac89))
AMR:


Decoded in 5,904 microseconds
Sentence: Does she even have a history of mental illness or a diagnosis?

Spans:
Span 2-3:  even => even
Span 5-6:  history => history
Span 9-10:  or => or
Span 1-2:  she => she

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),or,or,false), Span(5,6,List(1),history,history,false), Span(2,3,List(2),even,even,false), Span(1,2,List(3),she,she,false)),Map(2 -> even, 1 -> history, 0 -> or, 3 -> she),Map(e -> even, h -> history, s -> she, o -> or))),[Ljava.lang.String;@1c5920df,Annotation([Ljava.lang.String;@17f9d882,[Ljava.lang.String;@79e4c792,[Ljava.lang.String;@196a42c3),Annotation([Ljava.lang.String;@4c60d6e9,[Ljava.lang.String;@15043a2f,[Ledu.cmu.lti.nlp.amr.Dependency;@4a83a74a),Annotation([Ljava.lang.String;@1349883,[Ljava.lang.String;@4b29d1d2,[Ljava.lang.String;@7f485fda),Annotation([Ljava.lang.String;@28261e8e,[Ljava.lang.String;@d737b89,[Ledu.cmu.lti.nlp.amr.Entity;@8519cb4))
AMR:
(e / even, calendar, s / she)
(h / history, calendar, s / she)
(h / history, poss, o / or)

Decoded in 17,232 microseconds
Sentence: You don't know for sure that you won't get good grades so accept places if you can.

Spans:
Span 14-15:  accept => accept-01
Span 18-19:  can => possible
Span 1-2:  do => do-02
Span 10-11:  get => get-04
Span 11-12:  good => good-41
Span 12-13:  grades => grade-01
Span 3-4:  know => know-01
Span 15-16:  places => place
Span 13-14:  so => so
Span 17-18:  you => you
Span 7-8:  you => you

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),can,possible,false), Span(17,18,List(1),you,you,false), Span(15,16,List(2),places,place,false), Span(14,15,List(3),accept,accept-01,false), Span(13,14,List(4),so,so,false), Span(12,13,List(5),grades,grade-01,false), Span(11,12,List(6),good,good-41,false), Span(10,11,List(7),get,get-04,false), Span(7,8,List(8),you,you,false), Span(3,4,List(9),know,know-01,false), Span(1,2,List(10),do,do-02,false)),Map(2 -> place, 5 -> grade-01, 8 -> you, 7 -> get-04, 1 -> you, 4 -> so, 6 -> good-41, 9 -> know-01, 0 -> possible, 10 -> do-02, 3 -> accept-01),Map(g3 -> get-04, k -> know-01, p2 -> place, s -> so, d -> do-02, g2 -> good-41, g -> grade-01, y -> you, p -> possible, a -> accept-01, y2 -> you))),[Ljava.lang.String;@35dab4eb,Annotation([Ljava.lang.String;@2d901eb0,[Ljava.lang.String;@3ba987b8,[Ljava.lang.String;@3f191845),Annotation([Ljava.lang.String;@5f049ea1,[Ljava.lang.String;@72cc7e6f,[Ledu.cmu.lti.nlp.amr.Dependency;@5afa3c9),Annotation([Ljava.lang.String;@72035809,[Ljava.lang.String;@909217e,[Ljava.lang.String;@18271936),Annotation([Ljava.lang.String;@606e4010,[Ljava.lang.String;@8458f04,[Ledu.cmu.lti.nlp.amr.Entity;@48075da3))
AMR:
(a / accept-01, ARG0, g / grade-01)
(a / accept-01, ARG1, p2 / place)
(a / accept-01, ARG6, y / you)
(a / accept-01, manner, s / so)
(d / do-02, ARG1, k / know-01)
(g / grade-01, ARG1, p / possible)
(g2 / good-41, ARG1, g / grade-01)
(g3 / get-04, ARG0, y2 / you)
(g3 / get-04, ARG1, g / grade-01)
(k / know-01, ARG1, g3 / get-04)

Decoded in 235,474 microseconds
Sentence: Life throws **** at you all the time.

Spans:
Span 8-9:  all => all
Span 0-1:  Life => life
Span 10-11:  time => time
Span 7-8:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),time,time,false), Span(8,9,List(1),all,all,false), Span(7,8,List(2),you,you,false), Span(0,1,List(3),Life,life,false)),Map(2 -> you, 1 -> all, 0 -> time, 3 -> life),Map(t -> time, y -> you, a -> all, l -> life))),[Ljava.lang.String;@68c9133c,Annotation([Ljava.lang.String;@7a35b0f5,[Ljava.lang.String;@5e2c3d18,[Ljava.lang.String;@2cb4893b),Annotation([Ljava.lang.String;@cc43f62,[Ljava.lang.String;@5b218417,[Ledu.cmu.lti.nlp.amr.Dependency;@645aa696),Annotation([Ljava.lang.String;@6caf0677,[Ljava.lang.String;@413d1baf,[Ljava.lang.String;@16eb3ea3),Annotation([Ljava.lang.String;@273444fe,[Ljava.lang.String;@33bc72d1,[Ledu.cmu.lti.nlp.amr.Entity;@1a75e76a))
AMR:
(l / life, op, a / all)
(t / time, quant, a / all)
(y / you, calendar, a / all)

Decoded in 14,222 microseconds
Sentence: If it's not someone in your family, it's an outsider.

Spans:
Span 7-8:  family => family
Span 9-10:  it => it
Span 1-2:  it => it
Span 4-5:  someone => someone

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),it,it,false), Span(7,8,List(1),family,family,false), Span(4,5,List(2),someone,someone,false), Span(1,2,List(3),it,it,false)),Map(2 -> someone, 1 -> family, 0 -> it, 3 -> it),Map(s -> someone, i2 -> it, i -> it, f -> family))),[Ljava.lang.String;@5524cca1,Annotation([Ljava.lang.String;@5032714f,[Ljava.lang.String;@48bb62,[Ljava.lang.String;@353352b6),Annotation([Ljava.lang.String;@4681c175,[Ljava.lang.String;@57a78e3,[Ledu.cmu.lti.nlp.amr.Dependency;@402c4085),Annotation([Ljava.lang.String;@6fa51cd4,[Ljava.lang.String;@2767e23c,[Ljava.lang.String;@710c2b53),Annotation([Ljava.lang.String;@5386659f,[Ljava.lang.String;@14028087,[Ledu.cmu.lti.nlp.amr.Entity;@cecf639))
AMR:
(i2 / it, calendar, s / someone)
(s / someone, calendar, i / it)
(s / someone, poss, f / family)

Decoded in 16,634 microseconds
Sentence: I had to deal with verbal abuse from my dad for a long 8 years before I came to uni and honestly, the only reason why I'm here is because it was the only way out.

Spans:
Span 13-14:  8 => 8
Span 6-7:  abuse => abuse-01
Span 20-21:  and => and
Span 31-32:  because => cause-01
Span 15-16:  before => before
Span 17-18:  came => come-01
Span 3-4:  deal => deal-01
Span 29-30:  here => here
Span 32-33:  it => it
Span 12-13:  long => long
Span 35-36:  only => only
Span 24-25:  only => only
Span 37-38:  out => out
Span 25-26:  reason => reason-01
Span 5-6:  verbal => verbal
Span 36-37:  way => way
Span 14-15:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),out,out,false), Span(36,37,List(1),way,way,false), Span(35,36,List(2),only,only,false), Span(32,33,List(3),it,it,false), Span(31,32,List(4),because,cause-01,false), Span(29,30,List(5),here,here,false), Span(25,26,List(6),reason,reason-01,false), Span(24,25,List(7),only,only,false), Span(20,21,List(8),and,and,false), Span(17,18,List(9),came,come-01,false), Span(15,16,List(10),before,before,false), Span(14,15,List(12, 11),years,(temporal-quantity :unit year),false), Span(13,14,List(13),8,8,false), Span(12,13,List(14),long,long,false), Span(6,7,List(15),abuse,abuse-01,false), Span(5,6,List(16),verbal,verbal,false), Span(3,4,List(17),deal,deal-01,false)),Map(2 -> only, 5 -> here, 12 -> year, 15 -> abuse-01, 8 -> and, 7 -> only, 17 -> deal-01, 1 -> way, 4 -> cause-01, 11 -> temporal-quantity, 14 -> long, 6 -> reason-01, 0 -> out, 9 -> come-01, 16 -> verbal, 3 -> it, 10 -> before, 13 -> 8),Map(w -> way, h -> here, b -> before, t -> temporal-quantity, 8 -> 8, o3 -> only, v -> verbal, d -> deal-01, y -> year, a -> and, o2 -> only, a2 -> abuse-01, i -> it, r -> reason-01, c -> cause-01, l -> long, o -> out, c2 -> come-01))),[Ljava.lang.String;@1caa0244,Annotation([Ljava.lang.String;@7ce026d3,[Ljava.lang.String;@7ce69770,[Ljava.lang.String;@1750fbeb),Annotation([Ljava.lang.String;@5b247367,[Ljava.lang.String;@268f106e,[Ledu.cmu.lti.nlp.amr.Dependency;@6e9a5ed8),Annotation([Ljava.lang.String;@7e057f43,[Ljava.lang.String;@6c284af,[Ljava.lang.String;@5890e879),Annotation([Ljava.lang.String;@6440112d,[Ljava.lang.String;@31ea9581,[Ledu.cmu.lti.nlp.amr.Entity;@231f98ef))
AMR:
(a / and, op, d / deal-01)
(a / and, op, r / reason-01)
(a2 / abuse-01, ARG1, h / here)
(a2 / abuse-01, mod, v / verbal)
(b / before, op, c2 / come-01)
(c / cause-01, ARG0, w / way)
(c / cause-01, ARG1, o / out)
(c / cause-01, ARG6, i / it)
(c2 / come-01, ARG1, a / and)
(d / deal-01, ARG1, a2 / abuse-01)
(l / long, op, t / temporal-quantity)
(r / reason-01, ARG1, w / way)
(r / reason-01, mod, o3 / only)
(t / temporal-quantity, location, b / before)
(t / temporal-quantity, quant, 8 / 8)
(t / temporal-quantity, unit, y / year)
(w / way, mod, o2 / only)

Decoded in 796,529 microseconds
Sentence: Work hard if you really want out.

Spans:
Span 1-2:  hard => hard-line
Span 6-7:  out => out
Span 4-5:  really => really
Span 5-6:  want => want-01
Span 3-4:  you => you

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),out,out,false), Span(5,6,List(1),want,want-01,false), Span(4,5,List(2),really,really,false), Span(3,4,List(3),you,you,false), Span(1,2,List(4),hard,hard-line,false)),Map(2 -> really, 1 -> want-01, 4 -> hard-line, 0 -> out, 3 -> you),Map(w -> want-01, h -> hard-line, y -> you, r -> really, o -> out))),[Ljava.lang.String;@7c137fd5,Annotation([Ljava.lang.String;@183ec003,[Ljava.lang.String;@7d9d0818,[Ljava.lang.String;@221a3fa4),Annotation([Ljava.lang.String;@451001e5,[Ljava.lang.String;@2b40ff9c,[Ledu.cmu.lti.nlp.amr.Dependency;@3e08ff24),Annotation([Ljava.lang.String;@4d1c005e,[Ljava.lang.String;@8462f31,[Ljava.lang.String;@24569dba),Annotation([Ljava.lang.String;@5ddeb7cb,[Ljava.lang.String;@70ed52de,[Ledu.cmu.lti.nlp.amr.Entity;@496bc455))
AMR:
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, h / hard-line)
(w / want-01, ARG5, o / out)
(w / want-01, manner, r / really)

Decoded in 48,372 microseconds
Sentence: Really sounds like you need support from somewhere else if she can't give it to you consistently.

Spans:
Span 17-18:  consistently => consistent
Span 13-14:  give => give-01
Span 14-15:  it => it
Span 4-5:  need => need-01
Span 10-11:  she => she
Span 5-6:  support => support-01
Span 16-17:  you => you
Span 3-4:  you => you

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),consistently,consistent,false), Span(16,17,List(1),you,you,false), Span(14,15,List(2),it,it,false), Span(13,14,List(3),give,give-01,false), Span(10,11,List(4),she,she,false), Span(5,6,List(5),support,support-01,false), Span(4,5,List(6),need,need-01,false), Span(3,4,List(7),you,you,false)),Map(2 -> it, 5 -> support-01, 7 -> you, 1 -> you, 4 -> she, 6 -> need-01, 0 -> consistent, 3 -> give-01),Map(n -> need-01, s2 -> support-01, s -> she, g -> give-01, y -> you, i -> it, c -> consistent, y2 -> you))),[Ljava.lang.String;@59402b8f,Annotation([Ljava.lang.String;@7188af83,[Ljava.lang.String;@6be968ce,[Ljava.lang.String;@7c37508a),Annotation([Ljava.lang.String;@247310d0,[Ljava.lang.String;@1033576a,[Ledu.cmu.lti.nlp.amr.Dependency;@303cf2ba),Annotation([Ljava.lang.String;@76494737,[Ljava.lang.String;@4a003cbe,[Ljava.lang.String;@4082ba93),Annotation([Ljava.lang.String;@17fc391b,[Ljava.lang.String;@2b30a42c,[Ledu.cmu.lti.nlp.amr.Entity;@609e8838))
AMR:
(c / consistent, domain, s / she)
(g / give-01, ARG0, s / she)
(g / give-01, ARG1, y / you)
(g / give-01, ARG6, i / it)
(n / need-01, ARG1, s2 / support-01)
(s2 / support-01, ARG0, y2 / you)
(s2 / support-01, ARG1, s / she)

Decoded in 129,028 microseconds
Sentence: You could call Childline or something similar?

Spans:
Span 2-3:  call => call-11
Span 1-2:  could => possible
Span 4-5:  or => or

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),or,or,false), Span(2,3,List(1),call,call-11,false), Span(1,2,List(2),could,possible,false)),Map(2 -> possible, 1 -> call-11, 0 -> or),Map(p -> possible, c -> call-11, o -> or))),[Ljava.lang.String;@359df09a,Annotation([Ljava.lang.String;@43df23d3,[Ljava.lang.String;@6d60fe40,[Ljava.lang.String;@792b749c),Annotation([Ljava.lang.String;@23e84203,[Ljava.lang.String;@19932c16,[Ledu.cmu.lti.nlp.amr.Dependency;@73eb439a),Annotation([Ljava.lang.String;@514646ef,[Ljava.lang.String;@305ffe9e,[Ljava.lang.String;@302c971f),Annotation([Ljava.lang.String;@1972e513,[Ljava.lang.String;@7ae0a9ec,[Ledu.cmu.lti.nlp.amr.Entity;@35841320))
AMR:
(c / call-11, ARG1, o / or)
(p / possible, domain, c / call-11)

Decoded in 9,587 microseconds
Sentence: You could go to the library on saturdays and do a good 8 hours of studying there.

Spans:
Span 12-13:  8 => 8
Span 8-9:  and => and
Span 1-2:  could => possible
Span 9-10:  do => do-02
Span 2-3:  go => go-01
Span 11-12:  good => good-41
Span 13-14:  hours => (temporal-quantity :unit hour)

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(1, 0),hours,(temporal-quantity :unit hour),false), Span(12,13,List(2),8,8,false), Span(11,12,List(3),good,good-41,false), Span(9,10,List(4),do,do-02,false), Span(8,9,List(5),and,and,false), Span(2,3,List(6),go,go-01,false), Span(1,2,List(7),could,possible,false)),Map(2 -> 8, 5 -> and, 7 -> possible, 1 -> hour, 4 -> do-02, 6 -> go-01, 0 -> temporal-quantity, 3 -> good-41),Map(h -> hour, t -> temporal-quantity, 8 -> 8, d -> do-02, p -> possible, g2 -> go-01, g -> good-41, a -> and))),[Ljava.lang.String;@61c4eee0,Annotation([Ljava.lang.String;@6f10d5b6,[Ljava.lang.String;@1040be71,[Ljava.lang.String;@548a24a),Annotation([Ljava.lang.String;@433defed,[Ljava.lang.String;@2a693f59,[Ledu.cmu.lti.nlp.amr.Dependency;@3f4faf53),Annotation([Ljava.lang.String;@7fd50002,[Ljava.lang.String;@533bda92,[Ljava.lang.String;@304bb45b),Annotation([Ljava.lang.String;@723ca036,[Ljava.lang.String;@25be7b63,[Ledu.cmu.lti.nlp.amr.Entity;@28dcca0c))
AMR:
(a / and, op, d / do-02)
(a / and, op, g2 / go-01)
(d / do-02, ARG1, t / temporal-quantity)
(g / good-41, ARG1, t / temporal-quantity)
(p / possible, domain, g2 / go-01)
(t / temporal-quantity, quant, 8 / 8)
(t / temporal-quantity, unit, h / hour)

Decoded in 98,535 microseconds
Sentence: Is there a friend's house you could go to- form a study group?

Spans:
Span 7-8:  could => possible
Span 11-12:  form => form
Span 3-4:  friend => friend
Span 8-9:  go => go-01
Span 14-15:  group => group
Span 5-6:  house => house
Span 13-14:  study => study
Span 6-7:  you => you

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),group,group,false), Span(13,14,List(1),study,study,false), Span(11,12,List(2),form,form,false), Span(8,9,List(3),go,go-01,false), Span(7,8,List(4),could,possible,false), Span(6,7,List(5),you,you,false), Span(5,6,List(6),house,house,false), Span(3,4,List(7),friend,friend,false)),Map(2 -> form, 5 -> you, 7 -> friend, 1 -> study, 4 -> possible, 6 -> house, 0 -> group, 3 -> go-01),Map(h -> house, s -> study, y -> you, p -> possible, g2 -> go-01, g -> group, f2 -> friend, f -> form))),[Ljava.lang.String;@45d84a20,Annotation([Ljava.lang.String;@52f27fbd,[Ljava.lang.String;@4c163e3,[Ljava.lang.String;@4a8355dd),Annotation([Ljava.lang.String;@4d0d9fe7,[Ljava.lang.String;@c430e6c,[Ledu.cmu.lti.nlp.amr.Dependency;@312aa7c),Annotation([Ljava.lang.String;@536f2a7e,[Ljava.lang.String;@72bc6553,[Ljava.lang.String;@66982506),Annotation([Ljava.lang.String;@70cf32e3,[Ljava.lang.String;@5a59ca5e,[Ledu.cmu.lti.nlp.amr.Entity;@4bdeaabb))
AMR:
(f / form, calendar, g / group)
(f / form, calendar, y / you)
(g / group, mod, s / study)
(g2 / go-01, ARG0, y / you)
(g2 / go-01, ARG1, h / house)
(g2 / go-01, ARG6, f2 / friend)
(p / possible, domain, g2 / go-01)

Decoded in 202,598 microseconds
Sentence: So you want her sectioned cos she is a bit of a pain in the arse and you've blamed all your problems on her?

Spans:
Span 20-21:  all => all
Span 16-17:  and => and
Span 19-20:  blamed => blame-01
Span 22-23:  problems => problem
Span 6-7:  she => she
Span 0-1:  So => so
Span 2-3:  want => want-01
Span 17-18:  you => you
Span 1-2:  you => you

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),problems,problem,false), Span(20,21,List(1),all,all,false), Span(19,20,List(2),blamed,blame-01,false), Span(17,18,List(3),you,you,false), Span(16,17,List(4),and,and,false), Span(6,7,List(5),she,she,false), Span(2,3,List(6),want,want-01,false), Span(1,2,List(7),you,you,false), Span(0,1,List(8),So,so,false)),Map(2 -> blame-01, 5 -> she, 8 -> so, 7 -> you, 1 -> all, 4 -> and, 6 -> want-01, 0 -> problem, 3 -> you),Map(w -> want-01, s2 -> so, b -> blame-01, s -> she, y -> you, p -> problem, a -> all, a2 -> and, y2 -> you))),[Ljava.lang.String;@6c4906d3,Annotation([Ljava.lang.String;@65987993,[Ljava.lang.String;@71075444,[Ljava.lang.String;@4f32a3ad),Annotation([Ljava.lang.String;@6b695b06,[Ljava.lang.String;@4d1bf319,[Ledu.cmu.lti.nlp.amr.Dependency;@6f53b8a),Annotation([Ljava.lang.String;@5c80cf32,[Ljava.lang.String;@7d900ecf,[Ljava.lang.String;@6f01b95f),Annotation([Ljava.lang.String;@4007f65e,[Ljava.lang.String;@1a245833,[Ledu.cmu.lti.nlp.amr.Entity;@673fdbce))
AMR:
(a / all, op, b / blame-01)
(a2 / and, op, b / blame-01)
(b / blame-01, ARG1, p / problem)
(b / blame-01, ARG2, s / she)
(b / blame-01, ARG6, y / you)
(s2 / so, op, w / want-01)
(w / want-01, ARG0, y2 / you)
(w / want-01, ARG1, s / she)

Decoded in 426,746 microseconds
Sentence: I know what you're feeling.

Spans:
Span 5-6:  feeling => feel-01
Span 1-2:  know => know-01
Span 3-4:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),feeling,feel-01,false), Span(3,4,List(1),you,you,false), Span(1,2,List(2),know,know-01,false)),Map(2 -> know-01, 1 -> you, 0 -> feel-01),Map(k -> know-01, y -> you, f -> feel-01))),[Ljava.lang.String;@5965d37,Annotation([Ljava.lang.String;@7a5ceedd,[Ljava.lang.String;@4201c465,[Ljava.lang.String;@5b799640),Annotation([Ljava.lang.String;@6cb107fd,[Ljava.lang.String;@710636b0,[Ledu.cmu.lti.nlp.amr.Dependency;@3de8f619),Annotation([Ljava.lang.String;@2ab4bc72,[Ljava.lang.String;@4e5ed836,[Ljava.lang.String;@eadd4fb),Annotation([Ljava.lang.String;@740fb309,[Ljava.lang.String;@7bd7d6d6,[Ledu.cmu.lti.nlp.amr.Entity;@43f02ef2))
AMR:
(f / feel-01, ARG0, y / you)
(k / know-01, ARG1, f / feel-01)

Decoded in 7,789 microseconds
Sentence: My Mum was spat out of hell too.

Spans:
Span 4-5:  out => out
Span 7-8:  too => too

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),too,too,false), Span(4,5,List(1),out,out,false)),Map(1 -> out, 0 -> too),Map(t -> too, o -> out))),[Ljava.lang.String;@239a307b,Annotation([Ljava.lang.String;@2a8448fa,[Ljava.lang.String;@6f204a1a,[Ljava.lang.String;@2de56eb2),Annotation([Ljava.lang.String;@5f8e8a9d,[Ljava.lang.String;@5745ca0e,[Ledu.cmu.lti.nlp.amr.Dependency;@3ad83a66),Annotation([Ljava.lang.String;@3cce5371,[Ljava.lang.String;@17bffc17,[Ljava.lang.String;@6e535154),Annotation([Ljava.lang.String;@15a34df2,[Ljava.lang.String;@5b38c1ec,[Ledu.cmu.lti.nlp.amr.Entity;@338fc1d8))
AMR:
(o / out, calendar, t / too)

Decoded in 6,985 microseconds
Sentence: I highly recommend taking up smoking

Spans:
Span 1-2:  highly => high
Span 3-4:  taking => take-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),taking,take-01,false), Span(1,2,List(1),highly,high,false)),Map(1 -> high, 0 -> take-01),Map(h -> high, t -> take-01))),[Ljava.lang.String;@4722ef0c,Annotation([Ljava.lang.String;@48e1f6c7,[Ljava.lang.String;@55cb6996,[Ljava.lang.String;@1807e3f6),Annotation([Ljava.lang.String;@480d3575,[Ljava.lang.String;@f1da57d,[Ledu.cmu.lti.nlp.amr.Dependency;@194fad1),Annotation([Ljava.lang.String;@26abb146,[Ljava.lang.String;@72c8e7b,[Ljava.lang.String;@65f8f5ae),Annotation([Ljava.lang.String;@431cd9b2,[Ljava.lang.String;@38467116,[Ledu.cmu.lti.nlp.amr.Entity;@5b7a7f33))
AMR:
(t / take-01, ARG1, h / high)

Decoded in 5,581 microseconds
Sentence: Oh grow up tsr and stop negging its was a joke!!!

NER Entity: (country :name (name :op "Oh"))
Spans:
Span 4-5:  and => and
Span 1-2:  grow => grow-03
Span 5-6:  stop => stop-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),stop,stop-01,false), Span(4,5,List(1),and,and,false), Span(1,2,List(2),grow,grow-03,false)),Map(2 -> grow-03, 1 -> and, 0 -> stop-01),Map(s -> stop-01, g -> grow-03, a -> and))),[Ljava.lang.String;@790da477,Annotation([Ljava.lang.String;@5c7933ad,[Ljava.lang.String;@57bc27f5,[Ljava.lang.String;@5fb759d6),Annotation([Ljava.lang.String;@4b8d604b,[Ljava.lang.String;@5e7cd6cc,[Ledu.cmu.lti.nlp.amr.Dependency;@68c9d179),Annotation([Ljava.lang.String;@d554c5f,[Ljava.lang.String;@2dfaea86,[Ljava.lang.String;@15888343),Annotation([Ljava.lang.String;@33ecda92,[Ljava.lang.String;@14fc5f04,[Ledu.cmu.lti.nlp.amr.Entity;@6e2829c7))
AMR:
(a / and, op, s / stop-01)
(g / grow-03, ARG1, a / and)

Decoded in 12,323 microseconds
Sentence: I think over the last year or 2 i've become a much weaker person and in a way have dulled down my personality inorder to try and make some friends at uni.

Spans:
Span 7-8:  2 => 2
Span 27-28:  and => and
Span 15-16:  and => and
Span 10-11:  become => become-01
Span 21-22:  down => down
Span 4-5:  last => last
Span 28-29:  make => make-01
Span 12-13:  much => much
Span 6-7:  or => or
Span 2-3:  over => over
Span 14-15:  person => person
Span 29-30:  some => some
Span 1-2:  think => think-01
Span 26-27:  try => try-01
Span 18-19:  way => way
Span 13-14:  weaker => weak
Span 5-6:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),some,some,false), Span(28,29,List(1),make,make-01,false), Span(27,28,List(2),and,and,false), Span(26,27,List(3),try,try-01,false), Span(21,22,List(4),down,down,false), Span(18,19,List(5),way,way,false), Span(15,16,List(6),and,and,false), Span(14,15,List(7),person,person,false), Span(13,14,List(8),weaker,weak,false), Span(12,13,List(9),much,much,false), Span(10,11,List(10),become,become-01,false), Span(7,8,List(11),2,2,false), Span(6,7,List(12),or,or,false), Span(5,6,List(14, 13),year,(temporal-quantity :unit year),false), Span(4,5,List(15),last,last,false), Span(2,3,List(16),over,over,false), Span(1,2,List(17),think,think-01,false)),Map(2 -> and, 5 -> way, 12 -> or, 15 -> last, 8 -> weak, 7 -> person, 17 -> think-01, 1 -> make-01, 4 -> down, 11 -> 2, 14 -> year, 6 -> and, 0 -> some, 9 -> much, 16 -> over, 3 -> try-01, 10 -> become-01, 13 -> temporal-quantity),Map(w -> way, 2 -> 2, t -> try-01, b -> become-01, m2 -> much, s -> some, m -> make-01, d -> down, t3 -> think-01, y -> year, p -> person, a -> and, o2 -> over, t2 -> temporal-quantity, w2 -> weak, a2 -> and, l -> last, o -> or))),[Ljava.lang.String;@3feb2dda,Annotation([Ljava.lang.String;@6a8658ff,[Ljava.lang.String;@1c742ed4,[Ljava.lang.String;@333d4a8c),Annotation([Ljava.lang.String;@55de24cc,[Ljava.lang.String;@dc7df28,[Ledu.cmu.lti.nlp.amr.Dependency;@30f842ca),Annotation([Ljava.lang.String;@69c81773,[Ljava.lang.String;@4d14b6c2,[Ljava.lang.String;@7e990ed7),Annotation([Ljava.lang.String;@c05fddc,[Ljava.lang.String;@25df00a0,[Ledu.cmu.lti.nlp.amr.Entity;@4d15107f))
AMR:
(a / and, op, m / make-01)
(a / and, op, t / try-01)
(a2 / and, op, b / become-01)
(b / become-01, ARG1, w / way)
(b / become-01, ARG2, p / person)
(b / become-01, ARG6, w2 / weak)
(m / make-01, ARG1, m2 / much)
(o / or, op, 2 / 2)
(o / or, op, t2 / temporal-quantity)
(o2 / over, op, t2 / temporal-quantity)
(t / try-01, ARG0, w / way)
(t / try-01, ARG1, d / down)
(t / try-01, ARG6, s / some)
(t2 / temporal-quantity, mod, l / last)
(t2 / temporal-quantity, unit, y / year)
(t3 / think-01, ARG1, a2 / and)
(t3 / think-01, ARG6, o2 / over)

Decoded in 550,401 microseconds
Sentence: But being overly-nice to people has lead them to believe that they can say or do whatever the hell they want to me...

NER Entity: (country :name (name :op "me" :op "..."))
NER Entity: (country :name (name :op "me" :op "..."))
Spans:
Span 11-12:  believe => believe-01
Span 0-1:  But => contrast-01
Span 14-15:  can => possible
Span 17-18:  do => do-02
Span 8-9:  lead => lead-03
Span 16-17:  or => or
Span 6-7:  people => people
Span 15-16:  say => say-01
Span 21-22:  they => they
Span 13-14:  they => they
Span 22-23:  want => want-01
Span 18-19:  whatever => whatever

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),want,want-01,false), Span(21,22,List(1),they,they,false), Span(18,19,List(2),whatever,whatever,false), Span(17,18,List(3),do,do-02,false), Span(16,17,List(4),or,or,false), Span(15,16,List(5),say,say-01,false), Span(14,15,List(6),can,possible,false), Span(13,14,List(7),they,they,false), Span(11,12,List(8),believe,believe-01,false), Span(8,9,List(9),lead,lead-03,false), Span(6,7,List(10),people,people,false), Span(0,1,List(11),But,contrast-01,false)),Map(2 -> whatever, 5 -> say-01, 8 -> believe-01, 7 -> they, 1 -> they, 11 -> contrast-01, 4 -> or, 6 -> possible, 9 -> lead-03, 0 -> want-01, 10 -> people, 3 -> do-02),Map(w -> want-01, b -> believe-01, t -> they, p2 -> people, s -> say-01, d -> do-02, p -> possible, t2 -> they, w2 -> whatever, c -> contrast-01, l -> lead-03, o -> or))),[Ljava.lang.String;@7b4c50bc,Annotation([Ljava.lang.String;@5884a914,[Ljava.lang.String;@50378a4,[Ljava.lang.String;@60f00693),Annotation([Ljava.lang.String;@79207381,[Ljava.lang.String;@491b9b8,[Ledu.cmu.lti.nlp.amr.Dependency;@1a4927d6),Annotation([Ljava.lang.String;@7a6d7e92,[Ljava.lang.String;@aba625,[Ljava.lang.String;@97e93f1),Annotation([Ljava.lang.String;@5a5a729f,[Ljava.lang.String;@4b520ea8,[Ledu.cmu.lti.nlp.amr.Entity;@16150369))
AMR:
(b / believe-01, ARG1, p / possible)
(c / contrast-01, ARG1, l / lead-03)
(d / do-02, ARG1, w2 / whatever)
(l / lead-03, ARG1, p2 / people)
(l / lead-03, ARG2, b / believe-01)
(o / or, op, d / do-02)
(p / possible, domain, o / or)
(s / say-01, ARG0, t2 / they)
(s / say-01, ARG1, o / or)
(w / want-01, ARG0, t / they)
(w / want-01, ARG1, w2 / whatever)

Decoded in 287,977 microseconds
Sentence: they show absolutely no respect.

Spans:
Span 3-4:  no => -
Span 4-5:  respect => respect-01
Span 1-2:  show => show-01
Span 0-1:  they => they

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),respect,respect-01,false), Span(3,4,List(1),no,-,false), Span(1,2,List(2),show,show-01,false), Span(0,1,List(3),they,they,false)),Map(2 -> show-01, 1 -> -, 0 -> respect-01, 3 -> they),Map(t -> they, s -> show-01, r -> respect-01, - -> -))),[Ljava.lang.String;@6b09fb41,Annotation([Ljava.lang.String;@624ea235,[Ljava.lang.String;@3932c79a,[Ljava.lang.String;@782859e),Annotation([Ljava.lang.String;@23f5b5dc,[Ljava.lang.String;@34bde49d,[Ledu.cmu.lti.nlp.amr.Dependency;@1b1cfb87),Annotation([Ljava.lang.String;@821330f,[Ljava.lang.String;@6f43c82,[Ljava.lang.String;@5db6b9cd),Annotation([Ljava.lang.String;@210ab13f,[Ljava.lang.String;@20b2475a,[Ledu.cmu.lti.nlp.amr.Entity;@7857fe2))
AMR:
(r / respect-01, ARG1, - / -)
(s / show-01, ARG0, t / they)
(s / show-01, ARG1, r / respect-01)

Decoded in 24,048 microseconds
Sentence: e.g. i'll say hello to someone from uni and they'll ignore me, but 30 minutes later they'll decide they want my help with some work... and i'll give it to them.

Spans:
Span 16-17:  30 => 30
Span 30-31:  and => and
Span 9-10:  and => and
Span 15-16:  but => contrast-01
Span 21-22:  decide => decide-01
Span 33-34:  give => give-01
Span 25-26:  help => help-01
Span 12-13:  ignore => ignore-01
Span 34-35:  it => it
Span 18-19:  later => late
Span 3-4:  say => say-01
Span 27-28:  some => some
Span 6-7:  someone => someone
Span 22-23:  they => they
Span 19-20:  they => they
Span 10-11:  they => they
Span 23-24:  want => want-01
Span 28-29:  work => work-01

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),it,it,false), Span(33,34,List(1),give,give-01,false), Span(30,31,List(2),and,and,false), Span(28,29,List(3),work,work-01,false), Span(27,28,List(4),some,some,false), Span(25,26,List(5),help,help-01,false), Span(23,24,List(6),want,want-01,false), Span(22,23,List(7),they,they,false), Span(21,22,List(8),decide,decide-01,false), Span(19,20,List(9),they,they,false), Span(18,19,List(10),later,late,false), Span(16,17,List(11),30,30,false), Span(15,16,List(12),but,contrast-01,false), Span(12,13,List(13),ignore,ignore-01,false), Span(10,11,List(14),they,they,false), Span(9,10,List(15),and,and,false), Span(6,7,List(16),someone,someone,false), Span(3,4,List(17),say,say-01,false)),Map(2 -> and, 5 -> help-01, 12 -> contrast-01, 15 -> and, 8 -> decide-01, 7 -> they, 17 -> say-01, 1 -> give-01, 4 -> some, 11 -> 30, 14 -> they, 6 -> want-01, 0 -> it, 9 -> they, 16 -> someone, 3 -> work-01, 10 -> late, 13 -> ignore-01),Map(w -> work-01, h -> help-01, s2 -> someone, t -> they, s -> some, d -> decide-01, t3 -> they, g -> give-01, a -> and, i2 -> ignore-01, t2 -> they, w2 -> want-01, a2 -> and, i -> it, s3 -> say-01, c -> contrast-01, l -> late, 3 -> 30))),[Ljava.lang.String;@6f15d60e,Annotation([Ljava.lang.String;@1be2019a,[Ljava.lang.String;@29d80d2b,[Ljava.lang.String;@58e1d9d),Annotation([Ljava.lang.String;@446a1e84,[Ljava.lang.String;@4f0f2942,[Ledu.cmu.lti.nlp.amr.Dependency;@2657d4dd),Annotation([Ljava.lang.String;@5340477f,[Ljava.lang.String;@47caedad,[Ljava.lang.String;@7139992f),Annotation([Ljava.lang.String;@69504ae9,[Ljava.lang.String;@387a8303,[Ledu.cmu.lti.nlp.amr.Entity;@28cda624))
AMR:
(a / and, op, g / give-01)
(a / and, op, w / work-01)
(a / and, op, w2 / want-01)
(a2 / and, op, i2 / ignore-01)
(c / contrast-01, ARG1, s3 / say-01)
(c / contrast-01, ARG2, d / decide-01)
(d / decide-01, ARG0, t2 / they)
(d / decide-01, ARG1, w2 / want-01)
(d / decide-01, ARG6, l / late)
(g / give-01, ARG1, i / it)
(i2 / ignore-01, ARG0, t3 / they)
(i2 / ignore-01, ARG1, 3 / 30)
(s3 / say-01, ARG1, a2 / and)
(w / work-01, ARG1, s2 / someone)
(w / work-01, quant, s / some)
(w2 / want-01, ARG0, t / they)
(w2 / want-01, ARG1, h / help-01)

Decoded in 909,570 microseconds
Sentence: It's causing alot of anger and distress in my life and is really starting to effect my concentration in uni.

Spans:
Span 11-12:  and => and
Span 6-7:  and => and
Span 5-6:  anger => anger-01
Span 2-3:  causing => cause-01
Span 18-19:  concentration => concentrate-02
Span 16-17:  effect => effect
Span 0-1:  It => it
Span 10-11:  life => life
Span 13-14:  really => really
Span 14-15:  starting => start-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),concentration,concentrate-02,false), Span(16,17,List(1),effect,effect,false), Span(14,15,List(2),starting,start-01,false), Span(13,14,List(3),really,really,false), Span(11,12,List(4),and,and,false), Span(10,11,List(5),life,life,false), Span(6,7,List(6),and,and,false), Span(5,6,List(7),anger,anger-01,false), Span(2,3,List(8),causing,cause-01,false), Span(0,1,List(9),It,it,false)),Map(2 -> start-01, 5 -> life, 8 -> cause-01, 7 -> anger-01, 1 -> effect, 4 -> and, 6 -> and, 9 -> it, 0 -> concentrate-02, 3 -> really),Map(e -> effect, a3 -> anger-01, s -> start-01, a -> and, i -> it, a2 -> and, r -> really, l -> life, c -> concentrate-02, c2 -> cause-01))),[Ljava.lang.String;@1500b2f3,Annotation([Ljava.lang.String;@7eecb5b8,[Ljava.lang.String;@126253fd,[Ljava.lang.String;@57db2b13),Annotation([Ljava.lang.String;@475c9c31,[Ljava.lang.String;@5c86a017,[Ledu.cmu.lti.nlp.amr.Dependency;@5c7bfdc1),Annotation([Ljava.lang.String;@5276d6ee,[Ljava.lang.String;@71687585,[Ljava.lang.String;@1807f5a7),Annotation([Ljava.lang.String;@1b919693,[Ljava.lang.String;@7fb4f2a9,[Ledu.cmu.lti.nlp.amr.Entity;@4dc27487))
AMR:
(a / and, op, c2 / cause-01)
(a / and, op, s / start-01)
(a2 / and, op, a3 / anger-01)
(c / concentrate-02, ARG1, l / life)
(c2 / cause-01, ARG0, i / it)
(c2 / cause-01, ARG1, a2 / and)
(e / effect, calendar, c / concentrate-02)
(s / start-01, ARG1, e / effect)
(s / start-01, mod, r / really)

Decoded in 204,844 microseconds
Sentence: has anyone got any experience in handling this sort of thing or how to go about gaining some respect again?

Spans:
Span 15-16:  about => about
Span 19-20:  again => again
Span 3-4:  any => any
Span 1-2:  anyone => anyone
Span 4-5:  experience => experience-01
Span 14-15:  go => go-01
Span 6-7:  handling => handle-01
Span 11-12:  or => or
Span 18-19:  respect => respect-01
Span 17-18:  some => some
Span 8-9:  sort => sort
Span 7-8:  this => this

Langrangian relaxation converged after 76 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),again,again,false), Span(18,19,List(1),respect,respect-01,false), Span(17,18,List(2),some,some,false), Span(15,16,List(3),about,about,false), Span(14,15,List(4),go,go-01,false), Span(11,12,List(5),or,or,false), Span(8,9,List(6),sort,sort,false), Span(7,8,List(7),this,this,false), Span(6,7,List(8),handling,handle-01,false), Span(4,5,List(9),experience,experience-01,false), Span(3,4,List(10),any,any,false), Span(1,2,List(11),anyone,anyone,false)),Map(2 -> some, 5 -> or, 8 -> handle-01, 7 -> this, 1 -> respect-01, 11 -> anyone, 4 -> go-01, 6 -> sort, 9 -> experience-01, 0 -> again, 10 -> any, 3 -> about),Map(e -> experience-01, h -> handle-01, t -> this, s2 -> sort, a3 -> any, s -> some, g -> go-01, a -> again, a2 -> about, r -> respect-01, o -> or, a4 -> anyone))),[Ljava.lang.String;@6a4f1a55,Annotation([Ljava.lang.String;@7dfd3c81,[Ljava.lang.String;@2584b82d,[Ljava.lang.String;@7bbc8656),Annotation([Ljava.lang.String;@6933b6c6,[Ljava.lang.String;@7d3e8655,[Ledu.cmu.lti.nlp.amr.Dependency;@7dfb0c0f),Annotation([Ljava.lang.String;@626abbd0,[Ljava.lang.String;@169bb4dd,[Ljava.lang.String;@1f9e9475),Annotation([Ljava.lang.String;@3aa078fd,[Ljava.lang.String;@d23e042,[Ledu.cmu.lti.nlp.amr.Entity;@46d59067))
AMR:
(e / experience-01, ARG0, a4 / anyone)
(e / experience-01, ARG1, h / handle-01)
(e / experience-01, mod, a3 / any)
(g / go-01, ARG1, a2 / about)
(h / handle-01, ARG1, o / or)
(h / handle-01, ARG2, s2 / sort)
(o / or, op, g / go-01)
(r / respect-01, ARG1, a2 / about)
(r / respect-01, ARG6, a / again)
(r / respect-01, quant, s / some)
(s2 / sort, mod, t / this)

Decoded in 770,027 microseconds
Sentence: Just say no.

Spans:
Span 1-2:  say => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),say,say-01,false)),Map(0 -> say-01),Map(s -> say-01))),[Ljava.lang.String;@2d0399f4,Annotation([Ljava.lang.String;@14dd7b39,[Ljava.lang.String;@66ea810,[Ljava.lang.String;@6cd24612),Annotation([Ljava.lang.String;@5dafbe45,[Ljava.lang.String;@2254127a,[Ledu.cmu.lti.nlp.amr.Dependency;@51891008),Annotation([Ljava.lang.String;@2f953efd,[Ljava.lang.String;@f68f0dc,[Ljava.lang.String;@d2de489),Annotation([Ljava.lang.String;@14bdbc74,[Ljava.lang.String;@12591ac8,[Ledu.cmu.lti.nlp.amr.Entity;@5a7fe64f))
AMR:


Decoded in 2,712 microseconds
Sentence: Do it gradually if it's not something you're particularly comfortable with.

Spans:
Span 2-3:  gradually => gradual
Span 4-5:  it => it
Span 1-2:  it => it
Span 10-11:  particularly => particular
Span 8-9:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),particularly,particular,false), Span(8,9,List(1),you,you,false), Span(4,5,List(2),it,it,false), Span(2,3,List(3),gradually,gradual,false), Span(1,2,List(4),it,it,false)),Map(2 -> it, 1 -> you, 4 -> it, 0 -> particular, 3 -> gradual),Map(g -> gradual, y -> you, p -> particular, i2 -> it, i -> it))),[Ljava.lang.String;@38145825,Annotation([Ljava.lang.String;@41330d4f,[Ljava.lang.String;@1b66c0fb,[Ljava.lang.String;@3e0e1046),Annotation([Ljava.lang.String;@24c1b2d2,[Ljava.lang.String;@7dc19a70,[Ledu.cmu.lti.nlp.amr.Dependency;@508dec2b),Annotation([Ljava.lang.String;@1e4f4a5c,[Ljava.lang.String;@37313c65,[Ljava.lang.String;@465232e9),Annotation([Ljava.lang.String;@798162bc,[Ljava.lang.String;@1df8da7a,[Ledu.cmu.lti.nlp.amr.Entity;@23941fb4))
AMR:
(g / gradual, calendar, i / it)
(g / gradual, calendar, i2 / it)
(i2 / it, op, p / particular)
(p / particular, domain, y / you)

Decoded in 21,434 microseconds
Sentence: You could start with 'No, sorry but I'm busy'

Spans:
Span 11-12:  busy => busy
Span 8-9:  but => contrast-01
Span 1-2:  could => possible
Span 5-6:  No => -
Span 2-3:  start => start-01

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),busy,busy,false), Span(8,9,List(1),but,contrast-01,false), Span(5,6,List(2),No,-,false), Span(2,3,List(3),start,start-01,false), Span(1,2,List(4),could,possible,false)),Map(2 -> -, 1 -> contrast-01, 4 -> possible, 0 -> busy, 3 -> start-01),Map(b -> busy, s -> start-01, p -> possible, - -> -, c -> contrast-01))),[Ljava.lang.String;@7486b455,Annotation([Ljava.lang.String;@660acfb,[Ljava.lang.String;@5d908d47,[Ljava.lang.String;@5efa40fe),Annotation([Ljava.lang.String;@1f9f6368,[Ljava.lang.String;@1c9b0314,[Ledu.cmu.lti.nlp.amr.Dependency;@45385f75),Annotation([Ljava.lang.String;@49c90a9c,[Ljava.lang.String;@2d29b4ee,[Ljava.lang.String;@69ee81fc),Annotation([Ljava.lang.String;@6e2aa843,[Ljava.lang.String;@6f36c2f0,[Ledu.cmu.lti.nlp.amr.Entity;@f58853c))
AMR:
(c / contrast-01, ARG1, b / busy)
(c / contrast-01, ARG6, s / start-01)
(p / possible, domain, s / start-01)
(s / start-01, ARG6, - / -)

Decoded in 135,976 microseconds
Sentence: Of course, don't go over the top with it lest you go in completely the opposite direction.

Spans:
Span 15-16:  completely => complete
Span 1-2:  course => course
Span 18-19:  direction => direction
Span 3-4:  do => do-02
Span 13-14:  go => go-01
Span 5-6:  go => go-01
Span 10-11:  it => it
Span 6-7:  over => over
Span 8-9:  top => top
Span 12-13:  you => you

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),direction,direction,false), Span(15,16,List(1),completely,complete,false), Span(13,14,List(2),go,go-01,false), Span(12,13,List(3),you,you,false), Span(10,11,List(4),it,it,false), Span(8,9,List(5),top,top,false), Span(6,7,List(6),over,over,false), Span(5,6,List(7),go,go-01,false), Span(3,4,List(8),do,do-02,false), Span(1,2,List(9),course,course,false)),Map(2 -> go-01, 5 -> top, 8 -> do-02, 7 -> go-01, 1 -> complete, 4 -> it, 6 -> over, 9 -> course, 0 -> direction, 3 -> you),Map(t -> top, d -> direction, g2 -> go-01, y -> you, g -> go-01, d2 -> do-02, i -> it, c -> complete, o -> over, c2 -> course))),[Ljava.lang.String;@1224144a,Annotation([Ljava.lang.String;@29f7cefd,[Ljava.lang.String;@700fb871,[Ljava.lang.String;@3b35a229),Annotation([Ljava.lang.String;@9816741,[Ljava.lang.String;@1e16c0aa,[Ledu.cmu.lti.nlp.amr.Dependency;@13d73f29),Annotation([Ljava.lang.String;@565f390,[Ljava.lang.String;@7dc3712,[Ljava.lang.String;@2f67a4d3),Annotation([Ljava.lang.String;@5e3f861,[Ljava.lang.String;@2fb0623e,[Ledu.cmu.lti.nlp.amr.Entity;@49b2a47d))
AMR:
(d2 / do-02, ARG1, o / over)
(g / go-01, ARG0, y / you)
(g / go-01, ARG1, g2 / go-01)
(g / go-01, ARG2, d / direction)
(g / go-01, ARG6, c / complete)
(g2 / go-01, ARG0, d2 / do-02)
(g2 / go-01, ARG1, t / top)
(g2 / go-01, ARG2, c2 / course)
(i / it, calendar, t / top)

Decoded in 224,812 microseconds
Sentence: If, in your mind, you're thinking no - say it.

Spans:
Span 12-13:  it => it
Span 4-5:  mind => mind
Span 9-10:  no => -
Span 11-12:  say => say-01
Span 8-9:  thinking => think-01
Span 6-7:  you => you

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),it,it,false), Span(11,12,List(1),say,say-01,false), Span(9,10,List(2),no,-,false), Span(8,9,List(3),thinking,think-01,false), Span(6,7,List(4),you,you,false), Span(4,5,List(5),mind,mind,false)),Map(2 -> -, 5 -> mind, 1 -> say-01, 4 -> you, 0 -> it, 3 -> think-01),Map(t -> think-01, s -> say-01, m -> mind, y -> you, i -> it, - -> -))),[Ljava.lang.String;@5be1d0a4,Annotation([Ljava.lang.String;@415b0b49,[Ljava.lang.String;@6d5620ce,[Ljava.lang.String;@311bf055),Annotation([Ljava.lang.String;@642a7222,[Ljava.lang.String;@7d322cad,[Ledu.cmu.lti.nlp.amr.Dependency;@21be3395),Annotation([Ljava.lang.String;@4f49f6af,[Ljava.lang.String;@78452606,[Ljava.lang.String;@147e2ae7),Annotation([Ljava.lang.String;@448c8166,[Ljava.lang.String;@4470fbd6,[Ledu.cmu.lti.nlp.amr.Entity;@15d49048))
AMR:
(s / say-01, ARG1, i / it)
(s / say-01, ARG6, t / think-01)
(t / think-01, ARG0, y / you)
(t / think-01, ARG1, m / mind)
(t / think-01, ARG6, - / -)

Decoded in 78,723 microseconds
Sentence: When they start to realise that you're not going to bend over backwards for them, they'll start respecting you more.

Spans:
Span 9-10:  going => go-02
Span 22-23:  more => more
Span 12-13:  over => over
Span 19-20:  start => start-01
Span 2-3:  start => start-01
Span 17-18:  they => they
Span 1-2:  they => they
Span 21-22:  you => you
Span 6-7:  you => you

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),more,more,false), Span(21,22,List(1),you,you,false), Span(19,20,List(2),start,start-01,false), Span(17,18,List(3),they,they,false), Span(12,13,List(4),over,over,false), Span(9,10,List(5),going,go-02,false), Span(6,7,List(6),you,you,false), Span(2,3,List(7),start,start-01,false), Span(1,2,List(8),they,they,false)),Map(2 -> start-01, 5 -> go-02, 8 -> they, 7 -> start-01, 1 -> you, 4 -> over, 6 -> you, 0 -> more, 3 -> they),Map(s2 -> start-01, t -> they, s -> start-01, m -> more, g -> go-02, y -> you, t2 -> they, o -> over, y2 -> you))),[Ljava.lang.String;@7098b907,Annotation([Ljava.lang.String;@503f91c3,[Ljava.lang.String;@13526e59,[Ljava.lang.String;@2235eaab),Annotation([Ljava.lang.String;@17503f6b,[Ljava.lang.String;@3bcd05cb,[Ledu.cmu.lti.nlp.amr.Dependency;@3b6d844d),Annotation([Ljava.lang.String;@36804139,[Ljava.lang.String;@20bd8be5,[Ljava.lang.String;@730d2164),Annotation([Ljava.lang.String;@24959ca4,[Ljava.lang.String;@10289886,[Ledu.cmu.lti.nlp.amr.Entity;@5c86dbc5))
AMR:
(g / go-02, ARG1, y2 / you)
(g / go-02, ARG6, o / over)
(s / start-01, ARG0, t / they)
(s / start-01, ARG1, m / more)
(s / start-01, time, s2 / start-01)
(s2 / start-01, ARG0, t2 / they)
(s2 / start-01, ARG1, g / go-02)
(y / you, calendar, m / more)

Decoded in 225,228 microseconds
Sentence: well this is such a bad attitude really, of course you can be respected if you're nice but not to the point where you just let them do anything to you, that's not being nice it's being a fool.

Spans:
Span 30-31:  anything => anything
Span 6-7:  attitude => attitude
Span 5-6:  bad => bad
Span 19-20:  but => contrast-01
Span 12-13:  can => possible
Span 10-11:  course => course
Span 29-30:  do => do-02
Span 39-40:  it => it
Span 26-27:  just => just
Span 27-28:  let => let-01
Span 23-24:  point => point
Span 7-8:  really => really
Span 3-4:  such => such
Span 1-2:  this => this
Span 0-1:  well => well
Span 32-33:  you => you
Span 25-26:  you => you
Span 16-17:  you => you
Span 11-12:  you => you

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),it,it,false), Span(32,33,List(1),you,you,false), Span(30,31,List(2),anything,anything,false), Span(29,30,List(3),do,do-02,false), Span(27,28,List(4),let,let-01,false), Span(26,27,List(5),just,just,false), Span(25,26,List(6),you,you,false), Span(23,24,List(7),point,point,false), Span(19,20,List(8),but,contrast-01,false), Span(16,17,List(9),you,you,false), Span(12,13,List(10),can,possible,false), Span(11,12,List(11),you,you,false), Span(10,11,List(12),course,course,false), Span(7,8,List(13),really,really,false), Span(6,7,List(14),attitude,attitude,false), Span(5,6,List(15),bad,bad,false), Span(3,4,List(16),such,such,false), Span(1,2,List(17),this,this,false), Span(0,1,List(18),well,well,false)),Map(2 -> anything, 5 -> just, 12 -> course, 15 -> bad, 8 -> contrast-01, 18 -> well, 7 -> point, 17 -> this, 1 -> you, 4 -> let-01, 11 -> you, 14 -> attitude, 6 -> you, 0 -> it, 9 -> you, 16 -> such, 3 -> do-02, 10 -> possible, 13 -> really),Map(w -> well, y4 -> you, t -> this, b -> bad, p2 -> possible, j -> just, s -> such, d -> do-02, y -> you, p -> point, a -> anything, y3 -> you, a2 -> attitude, r -> really, i -> it, c -> contrast-01, l -> let-01, y2 -> you, c2 -> course))),[Ljava.lang.String;@461ad730,Annotation([Ljava.lang.String;@4ee203eb,[Ljava.lang.String;@1a5a4e19,[Ljava.lang.String;@7068e664),Annotation([Ljava.lang.String;@60db1c0e,[Ljava.lang.String;@3e78b6a5,[Ledu.cmu.lti.nlp.amr.Dependency;@769a1df5),Annotation([Ljava.lang.String;@41f69e84,[Ljava.lang.String;@7975d1d8,[Ljava.lang.String;@2438dcd),Annotation([Ljava.lang.String;@24105dc5,[Ljava.lang.String;@5167f57d,[Ledu.cmu.lti.nlp.amr.Entity;@64b0598))
AMR:
(a2 / attitude, mod, b / bad)
(a2 / attitude, quant, s / such)
(c / contrast-01, ARG0, w / well)
(c / contrast-01, ARG1, y3 / you)
(c / contrast-01, ARG2, p2 / possible)
(c2 / course, calendar, y4 / you)
(d / do-02, ARG0, p / point)
(d / do-02, ARG1, a / anything)
(d / do-02, ARG6, y / you)
(i / it, op, c / contrast-01)
(l / let-01, ARG0, y2 / you)
(l / let-01, ARG1, d / do-02)
(l / let-01, ARG6, j / just)
(p2 / possible, calendar, y4 / you)
(r / really, op, d / do-02)
(t / this, mod, a2 / attitude)
(t / this, time, r / really)
(t / this, time, w / well)

Decoded in 789,544 microseconds
Sentence: I don't know if anyone will read this, but I just feel desperate and feel the need to tell someone.

Spans:
Span 15-16:  and => and
Span 5-6:  anyone => anyone
Span 10-11:  but => contrast-01
Span 14-15:  desperate => desperate
Span 1-2:  do => do-02
Span 12-13:  just => just
Span 3-4:  know => know-01
Span 18-19:  need => need-01
Span 7-8:  read => read-01
Span 21-22:  someone => someone
Span 20-21:  tell => tell-01
Span 8-9:  this => this

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),someone,someone,false), Span(20,21,List(1),tell,tell-01,false), Span(18,19,List(2),need,need-01,false), Span(15,16,List(3),and,and,false), Span(14,15,List(4),desperate,desperate,false), Span(12,13,List(5),just,just,false), Span(10,11,List(6),but,contrast-01,false), Span(8,9,List(7),this,this,false), Span(7,8,List(8),read,read-01,false), Span(5,6,List(9),anyone,anyone,false), Span(3,4,List(10),know,know-01,false), Span(1,2,List(11),do,do-02,false)),Map(2 -> need-01, 5 -> just, 8 -> read-01, 7 -> this, 1 -> tell-01, 11 -> do-02, 4 -> desperate, 6 -> contrast-01, 9 -> anyone, 0 -> someone, 10 -> know-01, 3 -> and),Map(n -> need-01, k -> know-01, t -> tell-01, j -> just, s -> someone, d -> desperate, a -> and, d2 -> do-02, t2 -> this, a2 -> anyone, r -> read-01, c -> contrast-01))),[Ljava.lang.String;@18f8cd79,Annotation([Ljava.lang.String;@3e2055d6,[Ljava.lang.String;@50029372,[Ljava.lang.String;@e3b3b2f),Annotation([Ljava.lang.String;@50f6ac94,[Ljava.lang.String;@6cc4cdb9,[Ledu.cmu.lti.nlp.amr.Dependency;@28194a50),Annotation([Ljava.lang.String;@7f2cfe3f,[Ljava.lang.String;@1a5b6f42,[Ljava.lang.String;@5038d0b5),Annotation([Ljava.lang.String;@32115b28,[Ljava.lang.String;@2ad48653,[Ledu.cmu.lti.nlp.amr.Entity;@6bb4dd34))
AMR:
(a / and, op, n / need-01)
(c / contrast-01, ARG1, k / know-01)
(c / contrast-01, ARG2, a / and)
(c / contrast-01, ARG6, r / read-01)
(d / desperate, calendar, j / just)
(d2 / do-02, ARG1, k / know-01)
(k / know-01, ARG1, d / desperate)
(n / need-01, ARG1, t / tell-01)
(r / read-01, ARG0, a2 / anyone)
(r / read-01, ARG1, t2 / this)
(t / tell-01, ARG1, s / someone)

Decoded in 478,335 microseconds
Sentence: This September I left home, and started at University. I was incredibly anxious about doing this, but rather delayed thinking about it until I got here! Now I'm here, and have been for over two weeks, I feel terribly overwhelmed by it all and feel unintelligent and socially awkward.

Spans:
Span 23-24:  about => about
Span 15-16:  about => about
Span 49-50:  all => all
Span 53-54:  and => and
Span 50-51:  and => and
Span 35-36:  and => and
Span 6-7:  and => and
Span 19-20:  but => contrast-01
Span 21-22:  delayed => delay-01
Span 16-17:  doing => (thing :ARG1-of do-02)
Span 33-34:  here => here
Span 28-29:  here => here
Span 4-5:  home => home
Span 48-49:  it => it
Span 24-25:  it => it
Span 3-4:  left => leave-01
Span 39-40:  over => over
Span 46-47:  overwhelmed => overwhelm-01
Span 1-2:  September => (date-entity :month 9)
Span 7-8:  started => start-01
Span 22-23:  thinking => think-01
Span 17-18:  this => this
Span 0-1:  This => this
Span 40-41:  two => 2
Span 9-10:  University => university
Span 25-26:  until => until
Span 41-42:  weeks => week

 *** WARNING: The dependency tree seems broken.  I can't find the head of got in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of here in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of Now in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of 'm in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of here in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of been in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of over in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of two in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of weeks in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of terribly in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of overwhelmed in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of by in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of it in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of all in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of unintelligent in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of socially in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of awkward in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 56
Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(0),and,and,false), Span(50,51,List(1),and,and,false), Span(49,50,List(2),all,all,false), Span(48,49,List(3),it,it,false), Span(46,47,List(4),overwhelmed,overwhelm-01,false), Span(41,42,List(5),weeks,week,false), Span(40,41,List(6),two,2,false), Span(39,40,List(7),over,over,false), Span(35,36,List(8),and,and,false), Span(33,34,List(9),here,here,false), Span(28,29,List(10),here,here,false), Span(25,26,List(11),until,until,false), Span(24,25,List(12),it,it,false), Span(23,24,List(13),about,about,false), Span(22,23,List(14),thinking,think-01,false), Span(21,22,List(15),delayed,delay-01,false), Span(19,20,List(16),but,contrast-01,false), Span(17,18,List(17),this,this,false), Span(16,17,List(19, 18),doing,(thing :ARG1-of do-02),false), Span(15,16,List(20),about,about,false), Span(9,10,List(21),University,university,false), Span(7,8,List(22),started,start-01,false), Span(6,7,List(23),and,and,false), Span(4,5,List(24),home,home,false), Span(3,4,List(25),left,leave-01,false), Span(1,2,List(27, 26),September,(date-entity :month 9),false), Span(0,1,List(28),This,this,false)),Map(2 -> all, 5 -> week, 27 -> 9, 12 -> it, 8 -> and, 15 -> delay-01, 21 -> university, 18 -> thing, 24 -> home, 7 -> over, 1 -> and, 17 -> this, 23 -> and, 26 -> date-entity, 4 -> overwhelm-01, 11 -> until, 14 -> think-01, 20 -> about, 28 -> this, 6 -> 2, 9 -> here, 0 -> and, 22 -> start-01, 16 -> contrast-01, 19 -> do-02, 10 -> here, 3 -> it, 25 -> leave-01, 13 -> about),Map(a7 -> and, w -> week, h -> here, t4 -> this, 2 -> 2, h2 -> here, t -> think-01, d3 -> date-entity, a3 -> all, u2 -> university, s -> start-01, a6 -> about, d -> delay-01, t3 -> thing, a -> and, o2 -> over, a5 -> about, d2 -> do-02, i2 -> it, t2 -> this, i -> it, a2 -> and, c -> contrast-01, h3 -> home, l -> leave-01, u -> until, 9 -> 9, o -> overwhelm-01, a4 -> and))),[Ljava.lang.String;@7d9f158f,Annotation([Ljava.lang.String;@45efd90f,[Ljava.lang.String;@4b8729ff,[Ljava.lang.String;@61710c6),Annotation([Ljava.lang.String;@3214ee6,[Ljava.lang.String;@383dc82c,[Ledu.cmu.lti.nlp.amr.Dependency;@4a07d605),Annotation([Ljava.lang.String;@74287ea3,[Ljava.lang.String;@7d7758be,[Ljava.lang.String;@2bdd8394),Annotation([Ljava.lang.String;@5f9edf14,[Ljava.lang.String;@68746f22,[Ledu.cmu.lti.nlp.amr.Entity;@2f01783a))
AMR:
(a6 / about, op, t3 / thing)
(a7 / and, condition, t3 / thing)
(a7 / and, op, 2 / 2)
(a7 / and, op, a / and)
(a7 / and, op, a2 / and)
(a7 / and, op, a3 / all)
(a7 / and, op, a4 / and)
(a7 / and, op, h / here)
(a7 / and, op, h2 / here)
(a7 / and, op, i / it)
(a7 / and, op, l / leave-01)
(a7 / and, op, o2 / over)
(a7 / and, op, s / start-01)
(a7 / and, op, w / week)
(c / contrast-01, ARG1, t3 / thing)
(c / contrast-01, ARG6, t2 / this)
(d / delay-01, ARG0, t4 / this)
(d / delay-01, ARG1, t / think-01)
(d / delay-01, ARG6, a5 / about)
(d / delay-01, manner, c / contrast-01)
(d2 / do-02, ARG1, t3 / thing)
(d3 / date-entity, month, 9 / 9)
(l / leave-01, ARG1, h3 / home)
(l / leave-01, time, d3 / date-entity)
(o / overwhelm-01, ARG1, h3 / home)
(s / start-01, ARG1, u2 / university)
(t / think-01, ARG1, u / until)
(t / think-01, ARG6, i2 / it)

Decoded in 2,390,076 microseconds
Sentence: I have been struggling emotionally for the majority of my life since moving to Secondary School, although I did lose my dad at around the age of 9 and always used to blame that for my feelings. I have had two periods of counselling in my life, over roughly 15 months from December 2009 until around March this year.

Spans:
Span 52-53:  15 => 15
Span 28-29:  9 => 9
Span 26-27:  age => age
Span 30-31:  always => always
Span 29-30:  and => and
Span 58-59:  around => around
Span 24-25:  around => around
Span 55-57:  December 2009 => (date-entity :month 12 :year 2009)
Span 48-49:  life => life
Span 10-11:  life => life
Span 20-21:  lose => lose-06
Span 7-8:  majority => majority
Span 59-60:  March => (date-entity :month 3)
Span 53-54:  months => (temporal-quantity :unit month)
Span 12-13:  moving => move-02
Span 50-51:  over => over
Span 43-44:  periods => period
Span 11-12:  since => since
Span 60-61:  this => this
Span 42-43:  two => 2
Span 57-58:  until => until
Span 31-32:  used => use-01
Span 61-62:  year => (temporal-quantity :unit year)

 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of had in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of two in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of periods in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of counselling in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of life in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of over in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of roughly in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of 15 in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of months in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of from in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of December in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of 2009 in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of until in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of around in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of March in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of year in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 62
Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(61,62,List(1, 0),year,(temporal-quantity :unit year),false), Span(60,61,List(2),this,this,false), Span(59,60,List(4, 3),March,(date-entity :month 3),false), Span(58,59,List(5),around,around,false), Span(57,58,List(6),until,until,false), Span(55,57,List(9, 8, 7),December 2009,(date-entity :month 12 :year 2009),false), Span(53,54,List(11, 10),months,(temporal-quantity :unit month),false), Span(52,53,List(12),15,15,false), Span(50,51,List(13),over,over,false), Span(48,49,List(14),life,life,false), Span(43,44,List(15),periods,period,false), Span(42,43,List(16),two,2,false), Span(31,32,List(17),used,use-01,false), Span(30,31,List(18),always,always,false), Span(29,30,List(19),and,and,false), Span(28,29,List(20),9,9,false), Span(26,27,List(21),age,age,false), Span(24,25,List(22),around,around,false), Span(20,21,List(23),lose,lose-06,false), Span(12,13,List(24),moving,move-02,false), Span(11,12,List(25),since,since,false), Span(10,11,List(26),life,life,false), Span(7,8,List(27),majority,majority,false)),Map(2 -> this, 5 -> around, 27 -> majority, 12 -> 15, 8 -> 12, 15 -> period, 21 -> age, 18 -> always, 24 -> move-02, 7 -> date-entity, 1 -> year, 17 -> use-01, 23 -> lose-06, 26 -> life, 4 -> 3, 11 -> month, 14 -> life, 20 -> 9, 6 -> until, 9 -> 2009, 0 -> temporal-quantity, 22 -> around, 16 -> 2, 19 -> and, 10 -> temporal-quantity, 3 -> date-entity, 25 -> since, 13 -> over),Map(m3 -> majority, 2 -> 2009, 12 -> 15, t -> temporal-quantity, m2 -> move-02, l3 -> life, a3 -> and, u2 -> use-01, s -> since, m -> month, d -> date-entity, t3 -> temporal-quantity, 1 -> 12, y -> year, p -> period, a -> around, d2 -> date-entity, a5 -> around, t2 -> this, l2 -> lose-06, a2 -> always, u -> until, l -> life, 9 -> 9, 22 -> 2, o -> over, 3 -> 3, a4 -> age))),[Ljava.lang.String;@7ac296f6,Annotation([Ljava.lang.String;@7fd7a283,[Ljava.lang.String;@22f59fa,[Ljava.lang.String;@78fa769e),Annotation([Ljava.lang.String;@16612a51,[Ljava.lang.String;@54e041a4,[Ledu.cmu.lti.nlp.amr.Dependency;@2c78324b),Annotation([Ljava.lang.String;@79defdc,[Ljava.lang.String;@18317edc,[Ljava.lang.String;@4e0ae11f),Annotation([Ljava.lang.String;@238d68ff,[Ljava.lang.String;@4b86805d,[Ledu.cmu.lti.nlp.amr.Entity;@5852c06f))
AMR:
(22 / 2, time, s / since)
(a3 / and, op, 12 / 15)
(a3 / and, op, 22 / 2)
(a3 / and, op, a / around)
(a3 / and, op, d / date-entity)
(a3 / and, op, d2 / date-entity)
(a3 / and, op, l / life)
(a3 / and, op, o / over)
(a3 / and, op, p / period)
(a3 / and, op, t / temporal-quantity)
(a3 / and, op, t2 / this)
(a3 / and, op, t3 / temporal-quantity)
(a3 / and, op, u / until)
(a5 / around, op, a4 / age)
(d / date-entity, month, 3 / 3)
(d2 / date-entity, month, 1 / 12)
(d2 / date-entity, year, 2 / 2009)
(l2 / lose-06, ARG1, m2 / move-02)
(l2 / lose-06, time, a4 / age)
(l3 / life, part, m3 / majority)
(m2 / move-02, ARG0, l3 / life)
(m2 / move-02, ARG1, 9 / 9)
(s / since, op, m2 / move-02)
(t / temporal-quantity, unit, y / year)
(t3 / temporal-quantity, unit, m / month)
(u2 / use-01, ARG1, a3 / and)
(u2 / use-01, time, a2 / always)

Decoded in 1,718,137 microseconds
Sentence: I feel at the moment like the problems in my life are incredibly overwhelming, and are making me ever more doubtful of my always low self-esteem. I have no ability to concentrate on work, often find myself becoming very quiet in social occasions, and doubt myself over anything and everything.

Spans:
Span 24-25:  always => always
Span 54-55:  and => and
Span 49-50:  and => and
Span 15-16:  and => and
Span 53-54:  anything => anything
Span 42-43:  becoming => become-01
Span 50-51:  doubt => doubt-01
Span 19-20:  ever => ever
Span 55-56:  everything => everything
Span 40-41:  find => find-01
Span 10-11:  life => life
Span 25-26:  low => low
Span 17-18:  making => make-01
Span 4-5:  moment => moment
Span 20-21:  more => more
Span 32-33:  no => -
Span 39-40:  often => often
Span 52-53:  over => over
Span 7-8:  problems => problem
Span 26-27:  self => self
Span 46-47:  social => society
Span 43-44:  very => very
Span 37-38:  work => work-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of ability in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of concentrate in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of work in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of often in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of find in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of myself in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of becoming in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of very in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of quiet in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of social in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of occasions in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of doubt in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of myself in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of over in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of anything in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of everything in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 54
Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(55,56,List(0),everything,everything,false), Span(54,55,List(1),and,and,false), Span(53,54,List(2),anything,anything,false), Span(52,53,List(3),over,over,false), Span(50,51,List(4),doubt,doubt-01,false), Span(49,50,List(5),and,and,false), Span(46,47,List(6),social,society,false), Span(43,44,List(7),very,very,false), Span(42,43,List(8),becoming,become-01,false), Span(40,41,List(9),find,find-01,false), Span(39,40,List(10),often,often,false), Span(37,38,List(11),work,work-01,false), Span(32,33,List(12),no,-,false), Span(26,27,List(13),self,self,false), Span(25,26,List(14),low,low,false), Span(24,25,List(15),always,always,false), Span(20,21,List(16),more,more,false), Span(19,20,List(17),ever,ever,false), Span(17,18,List(18),making,make-01,false), Span(15,16,List(19),and,and,false), Span(10,11,List(20),life,life,false), Span(7,8,List(21),problems,problem,false), Span(4,5,List(22),moment,moment,false)),Map(2 -> anything, 5 -> and, 12 -> -, 15 -> always, 8 -> become-01, 21 -> problem, 18 -> make-01, 7 -> very, 17 -> ever, 1 -> and, 4 -> doubt-01, 11 -> work-01, 14 -> low, 20 -> life, 6 -> society, 22 -> moment, 0 -> everything, 9 -> find-01, 16 -> more, 19 -> and, 3 -> over, 10 -> often, 13 -> self),Map(m3 -> moment, e -> everything, w -> work-01, s2 -> self, b -> become-01, m2 -> make-01, e2 -> ever, a3 -> and, s -> society, v -> very, m -> more, d -> doubt-01, p -> problem, a -> and, a5 -> and, o2 -> often, l2 -> life, a2 -> anything, - -> -, l -> low, f -> find-01, o -> over, a4 -> always))),[Ljava.lang.String;@4149c063,Annotation([Ljava.lang.String;@9cb8225,[Ljava.lang.String;@76b07f29,[Ljava.lang.String;@38af9828),Annotation([Ljava.lang.String;@376a0d86,[Ljava.lang.String;@62656be4,[Ledu.cmu.lti.nlp.amr.Dependency;@17d919b6),Annotation([Ljava.lang.String;@53f3bdbd,[Ljava.lang.String;@34129c78,[Ljava.lang.String;@7d61eb55),Annotation([Ljava.lang.String;@222a59e6,[Ljava.lang.String;@6c7a164b,[Ledu.cmu.lti.nlp.amr.Entity;@4c2bb6e0))
AMR:
(a / and, op, a2 / anything)
(a / and, op, e / everything)
(a / and, op, s / society)
(a3 / and, op, b / become-01)
(a3 / and, op, d / doubt-01)
(a5 / and, op, m2 / make-01)
(b / become-01, ARG1, - / -)
(b / become-01, ARG6, v / very)
(d / doubt-01, ARG0, s2 / self)
(d / doubt-01, ARG1, a2 / anything)
(f / find-01, ARG0, v / very)
(f / find-01, ARG1, w / work-01)
(f / find-01, ARG6, o2 / often)
(l / low, time, a4 / always)
(m / more, mod, e2 / ever)
(m2 / make-01, ARG0, p / problem)
(m2 / make-01, ARG1, - / -)
(m2 / make-01, ARG6, e2 / ever)
(o / over, op, a2 / anything)
(p / problem, poss, l2 / life)
(s2 / self, degree, a4 / always)
(w / work-01, ARG3, m3 / moment)

Decoded in 1,589,207 microseconds
Sentence: Neither of my counsellers have diagnosed me with depression, and both have suggested I do not suffer from it, but it is a huge worry to me, as depression was the cause of my dad's death, suicide.

Spans:
Span 10-11:  and => and
Span 11-12:  both => both
Span 21-22:  but => contrast-01
Span 34-35:  cause => cause-01
Span 39-40:  death => die-01
Span 15-16:  do => do-02
Span 25-26:  huge => huge
Span 22-23:  it => it
Span 19-20:  it => it
Span 17-18:  suffer => suffer-01
Span 13-14:  suggested => suggest-01
Span 41-42:  suicide => suicide

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),suicide,suicide,false), Span(39,40,List(1),death,die-01,false), Span(34,35,List(2),cause,cause-01,false), Span(25,26,List(3),huge,huge,false), Span(22,23,List(4),it,it,false), Span(21,22,List(5),but,contrast-01,false), Span(19,20,List(6),it,it,false), Span(17,18,List(7),suffer,suffer-01,false), Span(15,16,List(8),do,do-02,false), Span(13,14,List(9),suggested,suggest-01,false), Span(11,12,List(10),both,both,false), Span(10,11,List(11),and,and,false)),Map(2 -> cause-01, 5 -> contrast-01, 8 -> do-02, 7 -> suffer-01, 1 -> die-01, 11 -> and, 4 -> it, 6 -> it, 9 -> suggest-01, 0 -> suicide, 10 -> both, 3 -> huge),Map(h -> huge, b -> both, s2 -> suffer-01, s -> suicide, d -> die-01, a -> and, d2 -> do-02, i2 -> it, i -> it, s3 -> suggest-01, c -> cause-01, c2 -> contrast-01))),[Ljava.lang.String;@3e62d773,Annotation([Ljava.lang.String;@4ef74c30,[Ljava.lang.String;@7283d3eb,[Ljava.lang.String;@638ef7ed),Annotation([Ljava.lang.String;@4bff7da0,[Ljava.lang.String;@3f1d2e23,[Ledu.cmu.lti.nlp.amr.Dependency;@536dbea0),Annotation([Ljava.lang.String;@47c81abf,[Ljava.lang.String;@776a6d9b,[Ljava.lang.String;@21d03963),Annotation([Ljava.lang.String;@1f760b47,[Ljava.lang.String;@18ece7f4,[Ledu.cmu.lti.nlp.amr.Entity;@3cce57c7))
AMR:
(a / and, op, s3 / suggest-01)
(c / cause-01, ARG0, a / and)
(c / cause-01, ARG1, d / die-01)
(c2 / contrast-01, ARG1, i / it)
(c2 / contrast-01, ARG2, s3 / suggest-01)
(d / die-01, ARG1, h / huge)
(d / die-01, location, s / suicide)
(d2 / do-02, ARG1, s2 / suffer-01)
(s2 / suffer-01, ARG1, i2 / it)
(s3 / suggest-01, ARG1, s2 / suffer-01)
(s3 / suggest-01, ARG6, b / both)

Decoded in 515,918 microseconds
Sentence: I have tried to solve my problems before, and have found exercise and meditation particularly useful, and have also tried things like self-help books and tapes. But my general feeling, is, 'Is this what my life will be? My one chance at existance, my one chance of being a young man, I am wasting it!' And these feelings are beating away at me.

Spans:
Span 20-21:  also => also
Span 28-29:  and => and
Span 18-19:  and => and
Span 13-14:  and => and
Span 9-10:  and => and
Span 73-74:  away => away
Span 7-8:  before => before
Span 27-28:  books => book
Span 31-32:  But => contrast-01
Span 12-13:  exercise => exercise-01
Span 34-35:  feeling => feel-01
Span 11-12:  found => find-01
Span 33-34:  general => general
Span 26-27:  help => help-01
Span 65-66:  it => it
Span 43-44:  life => life
Span 60-61:  man => man
Span 54-55:  one => 1
Span 48-49:  one => 1
Span 15-16:  particularly => particular
Span 6-7:  problems => problem
Span 24-25:  self => self
Span 4-5:  solve => solve-01
Span 22-23:  things => thing
Span 40-41:  this => this
Span 21-22:  tried => try-01
Span 2-3:  tried => try-01
Span 16-17:  useful => useful
Span 59-60:  young => young

 *** WARNING: The dependency tree seems broken.  I can't find the head of But in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of general in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of feeling in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of Is in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of what in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of life in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of My in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of one in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of chance in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of existance in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of one in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of chance in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of young in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of man in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of am in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of wasting in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of it in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of And in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of these in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of feelings in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of beating in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of away in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of me in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 74
Langrangian relaxation converged after 61 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(73,74,List(0),away,away,false), Span(65,66,List(1),it,it,false), Span(60,61,List(2),man,man,false), Span(59,60,List(3),young,young,false), Span(54,55,List(4),one,1,false), Span(48,49,List(5),one,1,false), Span(43,44,List(6),life,life,false), Span(40,41,List(7),this,this,false), Span(34,35,List(8),feeling,feel-01,false), Span(33,34,List(9),general,general,false), Span(31,32,List(10),But,contrast-01,false), Span(28,29,List(11),and,and,false), Span(27,28,List(12),books,book,false), Span(26,27,List(13),help,help-01,false), Span(24,25,List(14),self,self,false), Span(22,23,List(15),things,thing,false), Span(21,22,List(16),tried,try-01,false), Span(20,21,List(17),also,also,false), Span(18,19,List(18),and,and,false), Span(16,17,List(19),useful,useful,false), Span(15,16,List(20),particularly,particular,false), Span(13,14,List(21),and,and,false), Span(12,13,List(22),exercise,exercise-01,false), Span(11,12,List(23),found,find-01,false), Span(9,10,List(24),and,and,false), Span(7,8,List(25),before,before,false), Span(6,7,List(26),problems,problem,false), Span(4,5,List(27),solve,solve-01,false), Span(2,3,List(28),tried,try-01,false)),Map(2 -> man, 5 -> 1, 27 -> solve-01, 12 -> book, 8 -> feel-01, 15 -> thing, 21 -> and, 18 -> and, 24 -> and, 7 -> this, 1 -> it, 17 -> also, 23 -> find-01, 26 -> problem, 4 -> 1, 11 -> and, 14 -> self, 20 -> particular, 28 -> try-01, 6 -> life, 9 -> general, 0 -> away, 22 -> exercise-01, 16 -> try-01, 19 -> useful, 10 -> contrast-01, 3 -> young, 25 -> before, 13 -> help-01),Map(e -> exercise-01, h -> help-01, t4 -> try-01, s2 -> solve-01, t -> this, 12 -> 1, b -> book, b2 -> before, p2 -> problem, a3 -> also, s -> self, a6 -> and, m -> man, 1 -> 1, t3 -> try-01, y -> young, g -> general, p -> particular, a -> away, a5 -> and, t2 -> thing, a2 -> and, i -> it, c -> contrast-01, f2 -> find-01, l -> life, u -> useful, f -> feel-01, a4 -> and))),[Ljava.lang.String;@1cf56a1c,Annotation([Ljava.lang.String;@33f676f6,[Ljava.lang.String;@4c5ae43b,[Ljava.lang.String;@264f218),Annotation([Ljava.lang.String;@3576ddc2,[Ljava.lang.String;@35b74c5c,[Ledu.cmu.lti.nlp.amr.Dependency;@2e570ded),Annotation([Ljava.lang.String;@b86de0d,[Ljava.lang.String;@81d9a72,[Ljava.lang.String;@747f281),Annotation([Ljava.lang.String;@1169afe1,[Ljava.lang.String;@2ca26d77,[Ledu.cmu.lti.nlp.amr.Entity;@4808bc9b))
AMR:
(1 / 1, purpose, a4 / and)
(12 / 1, purpose, a4 / and)
(a / away, purpose, a4 / and)
(a4 / and, op, f2 / find-01)
(a4 / and, op, t3 / try-01)
(a5 / and, op, e / exercise-01)
(a6 / and, op, f2 / find-01)
(a6 / and, op, s2 / solve-01)
(c / contrast-01, ARG1, a6 / and)
(e / exercise-01, ARG1, b2 / before)
(e / exercise-01, mod, u / useful)
(f / feel-01, ARG1, g / general)
(f / feel-01, ARG3, a6 / and)
(f2 / find-01, ARG1, a5 / and)
(h / help-01, ARG1, b / book)
(h / help-01, mod, s / self)
(i / it, purpose, a4 / and)
(l / life, purpose, a4 / and)
(m / man, purpose, a4 / and)
(s2 / solve-01, ARG1, p2 / problem)
(t / this, purpose, a4 / and)
(t3 / try-01, ARG0, b / book)
(t3 / try-01, ARG1, t2 / thing)
(t3 / try-01, ARG2, a2 / and)
(t3 / try-01, mod, a3 / also)
(t4 / try-01, ARG1, s2 / solve-01)
(u / useful, mod, p / particular)
(y / young, purpose, a4 / and)

Decoded in 3,581,321 microseconds
Sentence: I simply don't know what to do, and when I think of things to do, I never follow through with it. Friends often say I'm lazy, and I can't disagree a lot of the time. I feel like everything anyone could do to help, people have tried, and time and time again I fail.

Spans:
Span 61-62:  again => again
Span 59-60:  and => and
Span 57-58:  and => and
Span 32-33:  and => and
Span 9-10:  and => and
Span 47-48:  anyone => anyone
Span 48-49:  could => possible
Span 49-50:  do => do-02
Span 16-17:  do => do-02
Span 7-8:  do => do-02
Span 2-3:  do => do-02
Span 46-47:  everything => everything
Span 63-64:  fail => fail-safe
Span 20-21:  follow => follow-03
Span 51-52:  help => help-01
Span 23-24:  it => it
Span 4-5:  know => know-01
Span 26-27:  often => often
Span 53-54:  people => people
Span 27-28:  say => say-01
Span 1-2:  simply => simple
Span 14-15:  things => thing
Span 12-13:  think => think-01
Span 21-22:  through => through
Span 60-61:  time => time
Span 58-59:  time => time
Span 41-42:  time => time
Span 55-56:  tried => try-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of Friends in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of often in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of say in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of 'm in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of lazy in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of ca in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of disagree in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of lot in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of like in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of everything in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of anyone in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of could in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of help in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of tried in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of again in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of fail in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 64
Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(63,64,List(0),fail,fail-safe,false), Span(61,62,List(1),again,again,false), Span(60,61,List(2),time,time,false), Span(59,60,List(3),and,and,false), Span(58,59,List(4),time,time,false), Span(57,58,List(5),and,and,false), Span(55,56,List(6),tried,try-01,false), Span(53,54,List(7),people,people,false), Span(51,52,List(8),help,help-01,false), Span(49,50,List(9),do,do-02,false), Span(48,49,List(10),could,possible,false), Span(47,48,List(11),anyone,anyone,false), Span(46,47,List(12),everything,everything,false), Span(41,42,List(13),time,time,false), Span(32,33,List(14),and,and,false), Span(27,28,List(15),say,say-01,false), Span(26,27,List(16),often,often,false), Span(23,24,List(17),it,it,false), Span(21,22,List(18),through,through,false), Span(20,21,List(19),follow,follow-03,false), Span(16,17,List(20),do,do-02,false), Span(14,15,List(21),things,thing,false), Span(12,13,List(22),think,think-01,false), Span(9,10,List(23),and,and,false), Span(7,8,List(24),do,do-02,false), Span(4,5,List(25),know,know-01,false), Span(2,3,List(26),do,do-02,false), Span(1,2,List(27),simply,simple,false)),Map(2 -> time, 5 -> and, 27 -> simple, 12 -> everything, 8 -> help-01, 15 -> say-01, 21 -> thing, 18 -> through, 24 -> do-02, 7 -> people, 1 -> again, 17 -> it, 23 -> and, 26 -> do-02, 4 -> time, 11 -> anyone, 14 -> and, 20 -> do-02, 6 -> try-01, 9 -> do-02, 0 -> fail-safe, 22 -> think-01, 16 -> often, 19 -> follow-03, 10 -> possible, 3 -> and, 25 -> know-01, 13 -> time),Map(e -> everything, h -> help-01, t4 -> time, s2 -> simple, t -> time, k -> know-01, d3 -> do-02, p2 -> possible, a3 -> and, t6 -> thing, s -> say-01, a6 -> and, d -> do-02, t3 -> try-01, p -> people, a -> again, a5 -> and, d2 -> do-02, t2 -> time, t5 -> through, a2 -> and, i -> it, f2 -> follow-03, d4 -> do-02, f -> fail-safe, o -> often, a4 -> anyone, t7 -> think-01))),[Ljava.lang.String;@70e38ce1,Annotation([Ljava.lang.String;@2ca923bb,[Ljava.lang.String;@13df2a8c,[Ljava.lang.String;@1ebea008),Annotation([Ljava.lang.String;@72d6b3ba,[Ljava.lang.String;@1787f2a0,[Ledu.cmu.lti.nlp.amr.Dependency;@7de62196),Annotation([Ljava.lang.String;@163370c2,[Ljava.lang.String;@51bf5add,[Ljava.lang.String;@7905a0b8),Annotation([Ljava.lang.String;@35a3d49f,[Ljava.lang.String;@389b0789,[Ledu.cmu.lti.nlp.amr.Entity;@13d9cbf5))
AMR:
(a6 / and, op, a / again)
(a6 / and, op, a2 / and)
(a6 / and, op, a3 / and)
(a6 / and, op, a4 / anyone)
(a6 / and, op, a5 / and)
(a6 / and, op, e / everything)
(a6 / and, op, f / fail-safe)
(a6 / and, op, f2 / follow-03)
(a6 / and, op, h / help-01)
(a6 / and, op, k / know-01)
(a6 / and, op, o / often)
(a6 / and, op, p2 / possible)
(a6 / and, op, t / time)
(a6 / and, op, t2 / time)
(a6 / and, op, t3 / try-01)
(a6 / and, op, t4 / time)
(d / do-02, ARG1, h / help-01)
(d2 / do-02, ARG1, f2 / follow-03)
(d4 / do-02, ARG1, s2 / simple)
(f2 / follow-03, ARG1, i / it)
(f2 / follow-03, ARG6, t5 / through)
(h / help-01, ARG1, d3 / do-02)
(k / know-01, ARG1, d4 / do-02)
(s / say-01, ARG1, a6 / and)
(t3 / try-01, ARG1, p / people)
(t7 / think-01, ARG1, t6 / thing)
(t7 / think-01, ARG2, d2 / do-02)

Decoded in 1,481,950 microseconds
Sentence: Sorry to anyone whose read this jumbled mess, and I feel a bit like a self-seeking moaner, but I truly do feel desperate.

Spans:
Span 9-10:  and => and
Span 2-3:  anyone => anyone
Span 21-22:  but => contrast-01
Span 26-27:  desperate => desperate
Span 24-25:  do => do-02
Span 7-8:  mess => mess
Span 4-5:  read => read-01
Span 18-19:  seeking => seek-01
Span 16-17:  self => self
Span 5-6:  this => this

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),desperate,desperate,false), Span(24,25,List(1),do,do-02,false), Span(21,22,List(2),but,contrast-01,false), Span(18,19,List(3),seeking,seek-01,false), Span(16,17,List(4),self,self,false), Span(9,10,List(5),and,and,false), Span(7,8,List(6),mess,mess,false), Span(5,6,List(7),this,this,false), Span(4,5,List(8),read,read-01,false), Span(2,3,List(9),anyone,anyone,false)),Map(2 -> contrast-01, 5 -> and, 8 -> read-01, 7 -> this, 1 -> do-02, 4 -> self, 6 -> mess, 9 -> anyone, 0 -> desperate, 3 -> seek-01),Map(t -> this, s2 -> self, s -> seek-01, m -> mess, d -> desperate, a -> and, d2 -> do-02, a2 -> anyone, r -> read-01, c -> contrast-01))),[Ljava.lang.String;@478db956,Annotation([Ljava.lang.String;@6ca18a14,[Ljava.lang.String;@c667f46,[Ljava.lang.String;@51bd8b5c),Annotation([Ljava.lang.String;@7b50df34,[Ljava.lang.String;@1b410b60,[Ledu.cmu.lti.nlp.amr.Dependency;@2462cb01),Annotation([Ljava.lang.String;@19b843ba,[Ljava.lang.String;@64ec96c6,[Ljava.lang.String;@77659b30),Annotation([Ljava.lang.String;@456d6c1e,[Ljava.lang.String;@1e13529a,[Ledu.cmu.lti.nlp.amr.Entity;@1ec9bd38))
AMR:
(a / and, op, d2 / do-02)
(c / contrast-01, ARG1, r / read-01)
(c / contrast-01, ARG2, a / and)
(d2 / do-02, ARG1, a2 / anyone)
(m / mess, mod, t / this)
(r / read-01, ARG0, d / desperate)
(r / read-01, ARG1, m / mess)
(s / seek-01, ARG0, a / and)
(s / seek-01, mod, s2 / self)

Decoded in 314,811 microseconds
Sentence: Its not uncommon for people's existing feelings about themselves to become more intense when they are in new situations and feel the pressure to socialise with strangers and fit into new roles, i.e. being a university student.

Spans:
Span 8-9:  about => about
Span 28-29:  and => and
Span 20-21:  and => and
Span 11-12:  become => become-01
Span 6-7:  existing => exist-01
Span 29-30:  fit => fit-41
Span 13-14:  intense => intense
Span 0-1:  Its => it
Span 12-13:  more => more
Span 31-32:  new => new
Span 18-19:  new => new
Span 4-5:  people => people
Span 23-24:  pressure => pressure-01
Span 19-20:  situations => situation
Span 38-39:  student => (person :ARG0-of study-01)
Span 15-16:  they => they
Span 37-38:  university => university

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(1, 0),student,(person :ARG0-of study-01),false), Span(37,38,List(2),university,university,false), Span(31,32,List(3),new,new,false), Span(29,30,List(4),fit,fit-41,false), Span(28,29,List(5),and,and,false), Span(23,24,List(6),pressure,pressure-01,false), Span(20,21,List(7),and,and,false), Span(19,20,List(8),situations,situation,false), Span(18,19,List(9),new,new,false), Span(15,16,List(10),they,they,false), Span(13,14,List(11),intense,intense,false), Span(12,13,List(12),more,more,false), Span(11,12,List(13),become,become-01,false), Span(8,9,List(14),about,about,false), Span(6,7,List(15),existing,exist-01,false), Span(4,5,List(16),people,people,false), Span(0,1,List(17),Its,it,false)),Map(2 -> university, 5 -> and, 12 -> more, 15 -> exist-01, 8 -> situation, 7 -> and, 17 -> it, 1 -> study-01, 4 -> fit-41, 11 -> intense, 14 -> about, 6 -> pressure-01, 0 -> person, 9 -> new, 16 -> people, 3 -> new, 10 -> they, 13 -> become-01),Map(e -> exist-01, n -> new, s2 -> situation, b -> become-01, t -> they, p2 -> pressure-01, a3 -> about, s -> study-01, m -> more, p -> person, a -> and, i2 -> it, a2 -> and, i -> intense, u -> university, f -> fit-41, p3 -> people, n2 -> new))),[Ljava.lang.String;@452e19ca,Annotation([Ljava.lang.String;@6b0d80ed,[Ljava.lang.String;@6f8e8894,[Ljava.lang.String;@3cfdd820),Annotation([Ljava.lang.String;@928763c,[Ljava.lang.String;@e25951c,[Ledu.cmu.lti.nlp.amr.Dependency;@15f47664),Annotation([Ljava.lang.String;@471a9022,[Ljava.lang.String;@dc9876b,[Ljava.lang.String;@2f666ebb),Annotation([Ljava.lang.String;@19976a65,[Ljava.lang.String;@a1f72f5,[Ledu.cmu.lti.nlp.amr.Entity;@4b2c5e02))
AMR:
(a / and, op, f / fit-41)
(a / and, op, p2 / pressure-01)
(a2 / and, op, b / become-01)
(a2 / and, op, p / person)
(a2 / and, op, p2 / pressure-01)
(a2 / and, op, s2 / situation)
(a3 / about, op, b / become-01)
(b / become-01, ARG1, i / intense)
(b / become-01, ARG6, t / they)
(e / exist-01, ARG1, i2 / it)
(e / exist-01, ARG6, p3 / people)
(f / fit-41, ARG1, e / exist-01)
(i / intense, degree, m / more)
(p2 / pressure-01, ARG1, n / new)
(s / study-01, ARG0, p / person)
(s / study-01, ARG1, u / university)
(s2 / situation, mod, n2 / new)

Decoded in 639,560 microseconds
Sentence: I am not a health professional and I can only speak from personal experience which is why I strongly suggest you see a qualified health professional about your feelings and worries about depression.

Spans:
Span 31-32:  about => about
Span 26-27:  about => about
Span 29-30:  and => and
Span 6-7:  and => and
Span 8-9:  can => possible
Span 13-14:  experience => experience-01
Span 24-25:  health => health
Span 4-5:  health => health
Span 9-10:  only => only
Span 12-13:  personal => personal
Span 25-26:  professional => professional
Span 5-6:  professional => professional
Span 23-24:  qualified => qualify-02
Span 21-22:  see => see-01
Span 10-11:  speak => speak-01
Span 18-19:  strongly => strong
Span 19-20:  suggest => suggest-01
Span 20-21:  you => you

Langrangian relaxation converged after 65 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),about,about,false), Span(29,30,List(1),and,and,false), Span(26,27,List(2),about,about,false), Span(25,26,List(3),professional,professional,false), Span(24,25,List(4),health,health,false), Span(23,24,List(5),qualified,qualify-02,false), Span(21,22,List(6),see,see-01,false), Span(20,21,List(7),you,you,false), Span(19,20,List(8),suggest,suggest-01,false), Span(18,19,List(9),strongly,strong,false), Span(13,14,List(10),experience,experience-01,false), Span(12,13,List(11),personal,personal,false), Span(10,11,List(12),speak,speak-01,false), Span(9,10,List(13),only,only,false), Span(8,9,List(14),can,possible,false), Span(6,7,List(15),and,and,false), Span(5,6,List(16),professional,professional,false), Span(4,5,List(17),health,health,false)),Map(2 -> about, 5 -> qualify-02, 12 -> speak-01, 15 -> and, 8 -> suggest-01, 7 -> you, 17 -> health, 1 -> and, 4 -> health, 11 -> personal, 14 -> possible, 6 -> see-01, 0 -> about, 9 -> strong, 16 -> professional, 3 -> professional, 10 -> experience-01, 13 -> only),Map(e -> experience-01, h -> health, q -> qualify-02, h2 -> health, s2 -> suggest-01, p2 -> personal, a3 -> about, s -> see-01, s4 -> speak-01, p -> professional, y -> you, a -> about, p4 -> professional, a2 -> and, s3 -> strong, o -> only, p3 -> possible, a4 -> and))),[Ljava.lang.String;@57a3e26a,Annotation([Ljava.lang.String;@75c56eb9,[Ljava.lang.String;@4bc222e,[Ljava.lang.String;@2dc9b0f5),Annotation([Ljava.lang.String;@6531a794,[Ljava.lang.String;@3b5fad2d,[Ledu.cmu.lti.nlp.amr.Dependency;@5e17553a),Annotation([Ljava.lang.String;@3eb91815,[Ljava.lang.String;@56dc1551,[Ljava.lang.String;@102cec62),Annotation([Ljava.lang.String;@74f6c5d8,[Ljava.lang.String;@27912e3,[Ledu.cmu.lti.nlp.amr.Entity;@34b9f960))
AMR:
(a3 / about, op, a2 / and)
(a4 / and, op, s4 / speak-01)
(e / experience-01, ARG1, s2 / suggest-01)
(e / experience-01, mod, p2 / personal)
(p / professional, mod, h / health)
(p3 / possible, domain, s4 / speak-01)
(p4 / professional, mod, h2 / health)
(q / qualify-02, ARG1, p / professional)
(s / see-01, ARG0, y / you)
(s / see-01, ARG1, a2 / and)
(s / see-01, ARG2, p / professional)
(s2 / suggest-01, ARG1, s / see-01)
(s2 / suggest-01, ARG6, a / about)
(s2 / suggest-01, manner, s3 / strong)
(s4 / speak-01, ARG0, p4 / professional)
(s4 / speak-01, ARG1, e / experience-01)
(s4 / speak-01, mod, o / only)

Decoded in 1,414,185 microseconds
Sentence: Most people feel unintelligent and awkward when they first get to uni- you're definitely not alone there. But I would really recommend that you get an appointment with your uni counselling services. It doesn't really matter whether anyone has told you that you are depressed or not, you are obviously having some problems at the minute and could use some support- labels aren't as important as your experiences. Meditation and exercise are really helpful, so definitely try to do those. But yeah, you will have to engage with help and life in general to get somewhere- but don't beat yourself up about feeling unmotivated to do anything at the minute, lots of people feel like this and hopefully it will pass as you begin to feel better. Being unkind to yourself will only make you feel worse- be kind to yourself and get some help.

Spans:
Span 115-116:  about => about
Span 17-18:  alone => alone
Span 158-159:  and => and
Span 131-132:  and => and
Span 101-102:  and => and
Span 78-79:  and => and
Span 62-63:  and => and
Span 4-5:  and => and
Span 42-43:  anyone => anyone
Span 120-121:  anything => anything
Span 112-113:  beat => beat-03
Span 138-139:  begin => begin-01
Span 141-142:  better => good
Span 109-110:  but => contrast-01
Span 91-92:  But => contrast-01
Span 20-21:  But => contrast-01
Span 63-64:  could => possible
Span 119-120:  do => do-02
Span 110-111:  do => do-02
Span 88-89:  do => do-02
Span 98-99:  engage => engage-01
Span 79-80:  exercise => exercise-01
Span 116-117:  feeling => feel-01
Span 104-105:  general => general
Span 159-160:  get => get-04
Span 106-107:  get => get-04
Span 27-28:  get => get-04
Span 9-10:  get => get-04
Span 56-57:  having => have-03
Span 161-162:  help => help-01
Span 100-101:  help => help-01
Span 82-83:  helpful => help-01
Span 72-73:  important => important
Span 133-134:  it => it
Span 36-37:  It => it
Span 155-156:  kind => kind
Span 102-103:  life => life
Span 149-150:  make => make-01
Span 40-41:  matter => matter
Span 123-124:  minute => (temporal-quantity :unit minute)
Span 61-62:  minute => (temporal-quantity :unit minute)
Span 0-1:  Most => most
Span 55-56:  obviously => obvious
Span 148-149:  only => only
Span 50-51:  or => or
Span 135-136:  pass => pass-03
Span 127-128:  people => people
Span 1-2:  people => people
Span 58-59:  problems => problem
Span 81-82:  really => really
Span 39-40:  really => really
Span 23-24:  really => really
Span 34-35:  services => service
Span 84-85:  so => so
Span 160-161:  some => some
Span 65-66:  some => some
Span 57-58:  some => some
Span 66-67:  support => support-01
Span 7-8:  they => they
Span 130-131:  this => this
Span 44-45:  told => tell-01
Span 86-87:  try => try-01
Span 64-65:  use => use-01
Span 152-153:  worse => bad
Span 150-151:  you => you
Span 137-138:  you => you
Span 94-95:  you => you
Span 53-54:  you => you
Span 47-48:  you => you
Span 45-46:  you => you
Span 26-27:  you => you
Span 13-14:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of obviously in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of having in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of problems in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of minute in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of could in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of use in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of support in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of labels in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of important in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 74
 *** WARNING: The dependency tree seems broken.  I can't find the head of experiences in position 75
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 76
 *** WARNING: The dependency tree seems broken.  I can't find the head of Meditation in position 77
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 78
 *** WARNING: The dependency tree seems broken.  I can't find the head of exercise in position 79
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 80
 *** WARNING: The dependency tree seems broken.  I can't find the head of really in position 81
 *** WARNING: The dependency tree seems broken.  I can't find the head of helpful in position 82
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 83
 *** WARNING: The dependency tree seems broken.  I can't find the head of so in position 84
 *** WARNING: The dependency tree seems broken.  I can't find the head of definitely in position 85
 *** WARNING: The dependency tree seems broken.  I can't find the head of try in position 86
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 87
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 88
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 89
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 90
 *** WARNING: The dependency tree seems broken.  I can't find the head of But in position 91
 *** WARNING: The dependency tree seems broken.  I can't find the head of yeah in position 92
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 93
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 94
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 95
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 96
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 97
 *** WARNING: The dependency tree seems broken.  I can't find the head of engage in position 98
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 99
 *** WARNING: The dependency tree seems broken.  I can't find the head of help in position 100
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 101
 *** WARNING: The dependency tree seems broken.  I can't find the head of life in position 102
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 103
 *** WARNING: The dependency tree seems broken.  I can't find the head of general in position 104
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 105
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 106
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhere in position 107
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 108
 *** WARNING: The dependency tree seems broken.  I can't find the head of but in position 109
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 110
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 111
 *** WARNING: The dependency tree seems broken.  I can't find the head of beat in position 112
 *** WARNING: The dependency tree seems broken.  I can't find the head of yourself in position 113
 *** WARNING: The dependency tree seems broken.  I can't find the head of up in position 114
 *** WARNING: The dependency tree seems broken.  I can't find the head of about in position 115
 *** WARNING: The dependency tree seems broken.  I can't find the head of feeling in position 116
 *** WARNING: The dependency tree seems broken.  I can't find the head of unmotivated in position 117
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 118
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 119
 *** WARNING: The dependency tree seems broken.  I can't find the head of anything in position 120
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 121
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 122
 *** WARNING: The dependency tree seems broken.  I can't find the head of minute in position 123
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 124
 *** WARNING: The dependency tree seems broken.  I can't find the head of lots in position 125
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 126
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 127
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 128
 *** WARNING: The dependency tree seems broken.  I can't find the head of like in position 129
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 130
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 131
 *** WARNING: The dependency tree seems broken.  I can't find the head of hopefully in position 132
 *** WARNING: The dependency tree seems broken.  I can't find the head of it in position 133
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 134
 *** WARNING: The dependency tree seems broken.  I can't find the head of pass in position 135
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 136
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 137
 *** WARNING: The dependency tree seems broken.  I can't find the head of begin in position 138
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 139
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 140
 *** WARNING: The dependency tree seems broken.  I can't find the head of better in position 141
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 142
 *** WARNING: The dependency tree seems broken.  I can't find the head of Being in position 143
 *** WARNING: The dependency tree seems broken.  I can't find the head of unkind in position 144
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 145
 *** WARNING: The dependency tree seems broken.  I can't find the head of yourself in position 146
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 147
 *** WARNING: The dependency tree seems broken.  I can't find the head of only in position 148
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 149
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 150
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 151
 *** WARNING: The dependency tree seems broken.  I can't find the head of worse in position 152
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 153
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 154
 *** WARNING: The dependency tree seems broken.  I can't find the head of kind in position 155
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 156
 *** WARNING: The dependency tree seems broken.  I can't find the head of yourself in position 157
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 158
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 159
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 160
 *** WARNING: The dependency tree seems broken.  I can't find the head of help in position 161
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 162
Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(161,162,List(0),help,help-01,false), Span(160,161,List(1),some,some,false), Span(159,160,List(2),get,get-04,false), Span(158,159,List(3),and,and,false), Span(155,156,List(4),kind,kind,false), Span(152,153,List(5),worse,bad,false), Span(150,151,List(6),you,you,false), Span(149,150,List(7),make,make-01,false), Span(148,149,List(8),only,only,false), Span(141,142,List(9),better,good,false), Span(138,139,List(10),begin,begin-01,false), Span(137,138,List(11),you,you,false), Span(135,136,List(12),pass,pass-03,false), Span(133,134,List(13),it,it,false), Span(131,132,List(14),and,and,false), Span(130,131,List(15),this,this,false), Span(127,128,List(16),people,people,false), Span(123,124,List(18, 17),minute,(temporal-quantity :unit minute),false), Span(120,121,List(19),anything,anything,false), Span(119,120,List(20),do,do-02,false), Span(116,117,List(21),feeling,feel-01,false), Span(115,116,List(22),about,about,false), Span(112,113,List(23),beat,beat-03,false), Span(110,111,List(24),do,do-02,false), Span(109,110,List(25),but,contrast-01,false), Span(106,107,List(26),get,get-04,false), Span(104,105,List(27),general,general,false), Span(102,103,List(28),life,life,false), Span(101,102,List(29),and,and,false), Span(100,101,List(30),help,help-01,false), Span(98,99,List(31),engage,engage-01,false), Span(94,95,List(32),you,you,false), Span(91,92,List(33),But,contrast-01,false), Span(88,89,List(34),do,do-02,false), Span(86,87,List(35),try,try-01,false), Span(84,85,List(36),so,so,false), Span(82,83,List(37),helpful,help-01,false), Span(81,82,List(38),really,really,false), Span(79,80,List(39),exercise,exercise-01,false), Span(78,79,List(40),and,and,false), Span(72,73,List(41),important,important,false), Span(66,67,List(42),support,support-01,false), Span(65,66,List(43),some,some,false), Span(64,65,List(44),use,use-01,false), Span(63,64,List(45),could,possible,false), Span(62,63,List(46),and,and,false), Span(61,62,List(48, 47),minute,(temporal-quantity :unit minute),false), Span(58,59,List(49),problems,problem,false), Span(57,58,List(50),some,some,false), Span(56,57,List(51),having,have-03,false), Span(55,56,List(52),obviously,obvious,false), Span(53,54,List(53),you,you,false), Span(50,51,List(54),or,or,false), Span(47,48,List(55),you,you,false), Span(45,46,List(56),you,you,false), Span(44,45,List(57),told,tell-01,false), Span(42,43,List(58),anyone,anyone,false), Span(40,41,List(59),matter,matter,false), Span(39,40,List(60),really,really,false), Span(36,37,List(61),It,it,false), Span(34,35,List(62),services,service,false), Span(27,28,List(63),get,get-04,false), Span(26,27,List(64),you,you,false), Span(23,24,List(65),really,really,false), Span(20,21,List(66),But,contrast-01,false), Span(17,18,List(67),alone,alone,false), Span(13,14,List(68),you,you,false), Span(9,10,List(69),get,get-04,false), Span(7,8,List(70),they,they,false), Span(4,5,List(71),and,and,false), Span(1,2,List(72),people,people,false), Span(0,1,List(73),Most,most,false)),Map(57 -> tell-01, 63 -> get-04, 30 -> help-01, 39 -> exercise-01, 45 -> possible, 66 -> contrast-01, 51 -> have-03, 2 -> get-04, 72 -> people, 5 -> bad, 48 -> minute, 69 -> get-04, 33 -> contrast-01, 27 -> general, 54 -> or, 12 -> pass-03, 60 -> really, 8 -> only, 15 -> this, 42 -> support-01, 36 -> so, 21 -> feel-01, 71 -> and, 18 -> minute, 24 -> do-02, 68 -> you, 53 -> you, 35 -> try-01, 41 -> important, 62 -> service, 56 -> you, 7 -> make-01, 59 -> matter, 17 -> temporal-quantity, 1 -> some, 50 -> some, 44 -> use-01, 23 -> beat-03, 65 -> really, 38 -> really, 47 -> temporal-quantity, 4 -> kind, 26 -> get-04, 11 -> you, 32 -> you, 14 -> and, 20 -> do-02, 29 -> and, 70 -> they, 64 -> you, 46 -> and, 52 -> obvious, 73 -> most, 67 -> alone, 34 -> do-02, 6 -> you, 28 -> life, 55 -> you, 40 -> and, 61 -> it, 49 -> problem, 0 -> help-01, 9 -> good, 43 -> some, 22 -> about, 58 -> anyone, 16 -> people, 37 -> help-01, 19 -> anything, 3 -> and, 10 -> begin-01, 25 -> contrast-01, 31 -> engage-01, 13 -> it),Map(s5 -> some, e -> engage-01, a7 -> and, m3 -> minute, b3 -> beat-03, h -> help-01, r3 -> really, g3 -> get-04, t4 -> temporal-quantity, a10 -> and, y4 -> you, p5 -> people, h2 -> help-01, s2 -> so, g6 -> get-04, t -> this, b -> bad, k -> kind, m2 -> minute, b2 -> begin-01, o3 -> or, d3 -> do-02, y7 -> you, p2 -> people, e2 -> exercise-01, m5 -> most, a9 -> alone, a3 -> anything, t6 -> they, s -> some, a6 -> and, h4 -> have-03, s4 -> some, d -> do-02, m -> make-01, g2 -> good, t3 -> try-01, i3 -> it, r2 -> really, y -> you, g -> get-04, p -> pass-03, c3 -> contrast-01, a -> and, p4 -> problem, y3 -> you, g5 -> get-04, y6 -> you, o2 -> obvious, d2 -> do-02, a5 -> and, a8 -> anyone, m4 -> matter, t2 -> temporal-quantity, i2 -> important, t5 -> tell-01, i -> it, a2 -> and, r -> really, c -> contrast-01, h3 -> help-01, s3 -> support-01, l -> life, u -> use-01, f -> feel-01, o -> only, y8 -> you, s6 -> service, p3 -> possible, g4 -> general, y2 -> you, c2 -> contrast-01, a4 -> about, y5 -> you))),[Ljava.lang.String;@43015c69,Annotation([Ljava.lang.String;@19b89d4,[Ljava.lang.String;@4bbf6d0e,[Ljava.lang.String;@30b6ffe0),Annotation([Ljava.lang.String;@791d1f8b,[Ljava.lang.String;@2415fc55,[Ledu.cmu.lti.nlp.amr.Dependency;@14f232c4),Annotation([Ljava.lang.String;@13bc8645,[Ljava.lang.String;@24c22fe,[Ljava.lang.String;@93081b6),Annotation([Ljava.lang.String;@cd1e646,[Ljava.lang.String;@7ba8c737,[Ledu.cmu.lti.nlp.amr.Entity;@1890516e))
AMR:
(a / and, op, g / get-04)
(a10 / and, op, a2 / and)
(a10 / and, op, a5 / and)
(a10 / and, op, a6 / and)
(a10 / and, op, b / bad)
(a10 / and, op, b2 / begin-01)
(a10 / and, op, c2 / contrast-01)
(a10 / and, op, c3 / contrast-01)
(a10 / and, op, h4 / have-03)
(a10 / and, op, i2 / important)
(a10 / and, op, k / kind)
(a10 / and, op, m / make-01)
(a10 / and, op, p2 / people)
(a10 / and, op, p3 / possible)
(a10 / and, op, p4 / problem)
(a10 / and, op, s3 / support-01)
(a10 / and, op, t2 / temporal-quantity)
(a2 / and, op, t / this)
(a4 / about, op, f / feel-01)
(a5 / and, op, h2 / help-01)
(a5 / and, op, l / life)
(a6 / and, op, e2 / exercise-01)
(a6 / and, op, o3 / or)
(a7 / and, op, p3 / possible)
(a7 / and, op, t4 / temporal-quantity)
(b2 / begin-01, ARG0, y2 / you)
(b2 / begin-01, ARG1, g2 / good)
(b3 / beat-03, ARG1, a4 / about)
(c / contrast-01, ARG1, g3 / get-04)
(c / contrast-01, ARG2, d2 / do-02)
(c2 / contrast-01, ARG1, y3 / you)
(c3 / contrast-01, ARG1, r3 / really)
(c3 / contrast-01, ARG6, y8 / you)
(d / do-02, ARG1, a3 / anything)
(d2 / do-02, ARG1, b3 / beat-03)
(d3 / do-02, ARG1, c2 / contrast-01)
(e / engage-01, ARG1, a5 / and)
(e2 / exercise-01, ARG1, h3 / help-01)
(f / feel-01, ARG1, d / do-02)
(g / get-04, ARG1, s / some)
(g3 / get-04, ARG1, g4 / general)
(g5 / get-04, ARG0, y7 / you)
(g5 / get-04, ARG1, a9 / alone)
(g5 / get-04, ARG6, c3 / contrast-01)
(g6 / get-04, ARG0, t6 / they)
(g6 / get-04, ARG1, p5 / people)
(h / help-01, ARG0, p5 / people)
(h / help-01, ARG1, s / some)
(h2 / help-01, ARG0, p5 / people)
(h2 / help-01, ARG1, g4 / general)
(h3 / help-01, ARG1, s2 / so)
(h3 / help-01, ARG6, r / really)
(h4 / have-03, ARG0, s5 / some)
(h4 / have-03, ARG1, y4 / you)
(h4 / have-03, ARG6, o2 / obvious)
(i3 / it, calendar, r2 / really)
(m / make-01, ARG0, o / only)
(m / make-01, ARG6, y / you)
(m4 / matter, location, a8 / anyone)
(m4 / matter, time, r2 / really)
(p / pass-03, ARG0, i / it)
(p / pass-03, ARG1, b2 / begin-01)
(p5 / people, mod, m5 / most)
(s6 / service, calendar, i3 / it)
(t2 / temporal-quantity, unit, m2 / minute)
(t3 / try-01, ARG1, d3 / do-02)
(t4 / temporal-quantity, unit, m3 / minute)
(t5 / tell-01, ARG0, a8 / anyone)
(t5 / tell-01, ARG1, y5 / you)
(t5 / tell-01, ARG2, a7 / and)
(t5 / tell-01, ARG6, y6 / you)
(u / use-01, ARG0, s4 / some)
(u / use-01, ARG6, p3 / possible)

Decoded in 16,163,722 microseconds
Sentence: Good luck.

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@15a04efb,Annotation([Ljava.lang.String;@16c069df,[Ljava.lang.String;@2bec854f,[Ljava.lang.String;@31edaa7d),Annotation([Ljava.lang.String;@26adfd2d,[Ljava.lang.String;@3336e6b6,[Ledu.cmu.lti.nlp.amr.Dependency;@7c3fdb62),Annotation([Ljava.lang.String;@205d38da,[Ljava.lang.String;@6950ed69,[Ljava.lang.String;@6dd7b5a3),Annotation([Ljava.lang.String;@6f3187b0,[Ljava.lang.String;@2663e964,[Ledu.cmu.lti.nlp.amr.Entity;@48b67364))
AMR:


Decoded in 2,389 microseconds
Sentence: I think a lot more people feel the same way as you do, but medicate themselves by using friends. Whilst it probably isn't a 'solution' as such, being around friends whilst being depressed is definitely better than being alone and being depressed. Either way, if you fancy a chat, feel free to PM

Spans:
Span 44-45:  alone => alone
Span 45-46:  and => and
Span 34-35:  around => around
Span 41-42:  better => good
Span 14-15:  but => contrast-01
Span 56-57:  chat => chat-01
Span 12-13:  do => do-02
Span 59-60:  free => free
Span 22-23:  it => it
Span 4-5:  more => more
Span 5-6:  people => people
Span 23-24:  probably => probable
Span 8-9:  same => same-41
Span 28-29:  solution => solution
Span 31-32:  such => such
Span 1-2:  think => think-01
Span 18-19:  using => use-01
Span 50-51:  way => way
Span 9-10:  way => way
Span 53-54:  you => you
Span 11-12:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of solution in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of around in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of friends in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of whilst in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of depressed in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of definitely in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of better in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of than in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of alone in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of depressed in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of Either in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of way in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of fancy in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of chat in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of free in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of PM in position 61
Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(59,60,List(0),free,free,false), Span(56,57,List(1),chat,chat-01,false), Span(53,54,List(2),you,you,false), Span(50,51,List(3),way,way,false), Span(45,46,List(4),and,and,false), Span(44,45,List(5),alone,alone,false), Span(41,42,List(6),better,good,false), Span(34,35,List(7),around,around,false), Span(31,32,List(8),such,such,false), Span(28,29,List(9),solution,solution,false), Span(23,24,List(10),probably,probable,false), Span(22,23,List(11),it,it,false), Span(18,19,List(12),using,use-01,false), Span(14,15,List(13),but,contrast-01,false), Span(12,13,List(14),do,do-02,false), Span(11,12,List(15),you,you,false), Span(9,10,List(16),way,way,false), Span(8,9,List(17),same,same-41,false), Span(5,6,List(18),people,people,false), Span(4,5,List(19),more,more,false), Span(1,2,List(20),think,think-01,false)),Map(2 -> you, 5 -> alone, 12 -> use-01, 15 -> you, 8 -> such, 18 -> people, 7 -> around, 17 -> same-41, 1 -> chat-01, 4 -> and, 11 -> it, 14 -> do-02, 20 -> think-01, 6 -> good, 0 -> free, 9 -> solution, 16 -> way, 19 -> more, 3 -> way, 10 -> probable, 13 -> contrast-01),Map(w -> way, s2 -> solution, t -> think-01, p2 -> people, a3 -> around, s -> such, m -> more, d -> do-02, y -> you, g -> good, p -> probable, a -> and, w2 -> way, a2 -> alone, i -> it, s3 -> same-41, c -> chat-01, u -> use-01, f -> free, y2 -> you, c2 -> contrast-01))),[Ljava.lang.String;@189cbd7c,Annotation([Ljava.lang.String;@7bf3a5d8,[Ljava.lang.String;@42e25b0b,[Ljava.lang.String;@39b43d60),Annotation([Ljava.lang.String;@44be0077,[Ljava.lang.String;@2205a05d,[Ledu.cmu.lti.nlp.amr.Dependency;@72ef8d15),Annotation([Ljava.lang.String;@6aa8e115,[Ljava.lang.String;@5e21e98f,[Ljava.lang.String;@51a9ad5e),Annotation([Ljava.lang.String;@5f20155b,[Ljava.lang.String;@72ade7e3,[Ledu.cmu.lti.nlp.amr.Entity;@239105a8))
AMR:
(a / and, op, a2 / alone)
(a / and, op, g / good)
(a / and, op, w / way)
(c / chat-01, ARG0, i / it)
(c / chat-01, ARG1, f / free)
(c / chat-01, ARG6, y / you)
(c2 / contrast-01, ARG0, p2 / people)
(c2 / contrast-01, ARG1, d / do-02)
(c2 / contrast-01, ARG6, s / such)
(d / do-02, ARG0, y2 / you)
(d / do-02, ARG1, w2 / way)
(p / probable, calendar, i / it)
(p2 / people, quant, m / more)
(s2 / solution, op, c2 / contrast-01)
(s3 / same-41, ARG1, w2 / way)
(t / think-01, ARG0, i / it)
(t / think-01, ARG1, p2 / people)
(u / use-01, ARG0, a3 / around)
(u / use-01, ARG1, c2 / contrast-01)
(u / use-01, ARG2, a / and)

Decoded in 1,088,749 microseconds
Sentence: If i were you id focus on an idol. Someone you aspire to (not want to be them but someone who your admire and have respect for) e.g. someone who came from a bad background and ended up successful and happy with a family and married etc etc

Spans:
Span 47-48:  and => and
Span 42-43:  and => and
Span 38-39:  and => and
Span 25-26:  and => and
Span 12-13:  aspire => aspire-01
Span 36-37:  bad => bad
Span 20-21:  but => contrast-01
Span 33-34:  came => come-01
Span 39-40:  ended => end-01
Span 46-47:  family => family
Span 5-6:  focus => focus-01
Span 27-28:  respect => respect-01
Span 31-32:  someone => someone
Span 21-22:  someone => someone
Span 41-42:  successful => succeed-01
Span 16-17:  want => want-01
Span 11-12:  you => you
Span 3-4:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of successful in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of happy in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of family in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of married in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of etc in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of etc in position 50
Langrangian relaxation converged after 58 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),and,and,false), Span(46,47,List(1),family,family,false), Span(42,43,List(2),and,and,false), Span(41,42,List(3),successful,succeed-01,false), Span(39,40,List(4),ended,end-01,false), Span(38,39,List(5),and,and,false), Span(36,37,List(6),bad,bad,false), Span(33,34,List(7),came,come-01,false), Span(31,32,List(8),someone,someone,false), Span(27,28,List(9),respect,respect-01,false), Span(25,26,List(10),and,and,false), Span(21,22,List(11),someone,someone,false), Span(20,21,List(12),but,contrast-01,false), Span(16,17,List(13),want,want-01,false), Span(12,13,List(14),aspire,aspire-01,false), Span(11,12,List(15),you,you,false), Span(5,6,List(16),focus,focus-01,false), Span(3,4,List(17),you,you,false)),Map(2 -> and, 5 -> and, 12 -> contrast-01, 15 -> you, 8 -> someone, 7 -> come-01, 17 -> you, 1 -> family, 4 -> end-01, 11 -> someone, 14 -> aspire-01, 6 -> bad, 0 -> and, 9 -> respect-01, 16 -> focus-01, 3 -> succeed-01, 10 -> and, 13 -> want-01),Map(e -> end-01, w -> want-01, s2 -> someone, b -> bad, a3 -> and, s -> succeed-01, y -> you, a -> and, a5 -> aspire-01, a2 -> and, r -> respect-01, c -> come-01, s3 -> someone, f2 -> focus-01, f -> family, y2 -> you, c2 -> contrast-01, a4 -> and))),[Ljava.lang.String;@3fce8fd9,Annotation([Ljava.lang.String;@609bcfb6,[Ljava.lang.String;@7d94beb9,[Ljava.lang.String;@560348e6),Annotation([Ljava.lang.String;@1df8b5b8,[Ljava.lang.String;@23202fce,[Ledu.cmu.lti.nlp.amr.Dependency;@7b993c65),Annotation([Ljava.lang.String;@37911f88,[Ljava.lang.String;@6f1c29b7,[Ljava.lang.String;@4d6025c5),Annotation([Ljava.lang.String;@7f284218,[Ljava.lang.String;@407a7f2a,[Ledu.cmu.lti.nlp.amr.Entity;@4ea5b703))
AMR:
(a / and, op, f / family)
(a2 / and, op, s / succeed-01)
(a3 / and, op, c / come-01)
(a4 / and, op, a / and)
(a5 / aspire-01, ARG0, y / you)
(a5 / aspire-01, ARG1, b / bad)
(c / come-01, ARG0, s2 / someone)
(c / come-01, ARG1, a4 / and)
(c2 / contrast-01, ARG1, s3 / someone)
(c2 / contrast-01, ARG2, a2 / and)
(e / end-01, ARG1, a3 / and)
(f2 / focus-01, ARG1, y2 / you)
(r / respect-01, ARG6, a4 / and)
(s / succeed-01, ARG1, f2 / focus-01)
(s / succeed-01, ARG6, e / end-01)
(w / want-01, ARG1, f2 / focus-01)
(w / want-01, ARG6, y / you)

Decoded in 1,397,098 microseconds
Sentence: Focus on what you want to achieve in life, you havent stated what your studying, or indeed why....is it because you wanted the experience? Because your mum wanted yo to go? Because u need a degree for the career you want to do?

Spans:
Span 6-7:  achieve => achieve-01
Span 23-24:  because => cause-01
Span 48-49:  do => do-02
Span 27-28:  experience => experience-01
Span 35-36:  go => go-01
Span 22-23:  it => it
Span 8-9:  life => life
Span 39-40:  need => need-01
Span 17-18:  or => or
Span 12-13:  stated => state-01
Span 46-47:  want => want-01
Span 4-5:  want => want-01
Span 32-33:  wanted => want-01
Span 25-26:  wanted => want-01
Span 45-46:  you => you
Span 24-25:  you => you
Span 10-11:  you => you
Span 3-4:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of Because in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of mum in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of wanted in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of yo in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of go in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of Because in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of u in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of need in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of degree in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of career in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of want in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 49
Langrangian relaxation converged after 96 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),do,do-02,false), Span(46,47,List(1),want,want-01,false), Span(45,46,List(2),you,you,false), Span(39,40,List(3),need,need-01,false), Span(35,36,List(4),go,go-01,false), Span(32,33,List(5),wanted,want-01,false), Span(27,28,List(6),experience,experience-01,false), Span(25,26,List(7),wanted,want-01,false), Span(24,25,List(8),you,you,false), Span(23,24,List(9),because,cause-01,false), Span(22,23,List(10),it,it,false), Span(17,18,List(11),or,or,false), Span(12,13,List(12),stated,state-01,false), Span(10,11,List(13),you,you,false), Span(8,9,List(14),life,life,false), Span(6,7,List(15),achieve,achieve-01,false), Span(4,5,List(16),want,want-01,false), Span(3,4,List(17),you,you,false)),Map(2 -> you, 5 -> want-01, 12 -> state-01, 15 -> achieve-01, 8 -> you, 7 -> want-01, 17 -> you, 1 -> want-01, 4 -> go-01, 11 -> or, 14 -> life, 6 -> experience-01, 0 -> do-02, 9 -> cause-01, 16 -> want-01, 3 -> need-01, 10 -> it, 13 -> you),Map(e -> experience-01, w -> want-01, n -> need-01, y4 -> you, w3 -> want-01, s -> state-01, d -> do-02, y -> you, g -> go-01, a -> achieve-01, y3 -> you, w2 -> want-01, i -> it, c -> cause-01, l -> life, o -> or, y2 -> you, w4 -> want-01))),[Ljava.lang.String;@2a7ed1f,Annotation([Ljava.lang.String;@3fa247d1,[Ljava.lang.String;@2cb2fc20,[Ljava.lang.String;@4f4c4b1a),Annotation([Ljava.lang.String;@723e88f9,[Ljava.lang.String;@5f0fd5a0,[Ledu.cmu.lti.nlp.amr.Dependency;@64e7619d),Annotation([Ljava.lang.String;@495ee280,[Ljava.lang.String;@4fa1c212,[Ljava.lang.String;@6ea2bc93),Annotation([Ljava.lang.String;@3116c353,[Ljava.lang.String;@f627d13,[Ledu.cmu.lti.nlp.amr.Entity;@4e928fbf))
AMR:
(a / achieve-01, ARG1, l / life)
(a / achieve-01, ARG6, y3 / you)
(c / cause-01, ARG0, w3 / want-01)
(c / cause-01, ARG1, w4 / want-01)
(c / cause-01, ARG6, i / it)
(d / do-02, ARG1, n / need-01)
(e / experience-01, ARG1, w2 / want-01)
(g / go-01, ARG1, o / or)
(n / need-01, ARG1, g / go-01)
(s / state-01, ARG1, w3 / want-01)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, d / do-02)
(w2 / want-01, ARG1, g / go-01)
(w3 / want-01, ARG0, y2 / you)
(w3 / want-01, ARG1, e / experience-01)
(w4 / want-01, ARG0, y4 / you)
(w4 / want-01, ARG1, a / achieve-01)

Decoded in 2,149,258 microseconds
Sentence: Either way, sum up why youre there and work your bottom off to get the best grades you can, cos once you get ur degree, you wil have something you can say "hey i didnt fail, it was hard work and i passed"

Spans:
Span 45-46:  and => and
Span 8-9:  and => and
Span 33-34:  can => possible
Span 19-20:  can => possible
Span 39-40:  fail => fail-safe
Span 24-25:  get => get-04
Span 14-15:  get => get-04
Span 17-18:  grades => grade-01
Span 43-44:  hard => hard-line
Span 41-42:  it => it
Span 12-13:  off => off
Span 22-23:  once => once
Span 47-48:  passed => pass-01
Span 34-35:  say => say-01
Span 1-2:  way => way
Span 44-45:  work => work-01
Span 9-10:  work => work-01
Span 32-33:  you => you
Span 28-29:  you => you
Span 23-24:  you => you
Span 18-19:  you => you

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),passed,pass-01,false), Span(45,46,List(1),and,and,false), Span(44,45,List(2),work,work-01,false), Span(43,44,List(3),hard,hard-line,false), Span(41,42,List(4),it,it,false), Span(39,40,List(5),fail,fail-safe,false), Span(34,35,List(6),say,say-01,false), Span(33,34,List(7),can,possible,false), Span(32,33,List(8),you,you,false), Span(28,29,List(9),you,you,false), Span(24,25,List(10),get,get-04,false), Span(23,24,List(11),you,you,false), Span(22,23,List(12),once,once,false), Span(19,20,List(13),can,possible,false), Span(18,19,List(14),you,you,false), Span(17,18,List(15),grades,grade-01,false), Span(14,15,List(16),get,get-04,false), Span(12,13,List(17),off,off,false), Span(9,10,List(18),work,work-01,false), Span(8,9,List(19),and,and,false), Span(1,2,List(20),way,way,false)),Map(2 -> work-01, 5 -> fail-safe, 12 -> once, 15 -> grade-01, 8 -> you, 18 -> work-01, 7 -> possible, 17 -> off, 1 -> and, 4 -> it, 11 -> you, 14 -> you, 20 -> way, 6 -> say-01, 0 -> pass-01, 9 -> you, 16 -> get-04, 19 -> and, 3 -> hard-line, 10 -> get-04, 13 -> possible),Map(w -> work-01, g3 -> get-04, h -> hard-line, y4 -> you, p2 -> possible, w3 -> way, s -> say-01, g2 -> grade-01, p -> pass-01, y -> you, g -> get-04, a -> and, y3 -> you, o2 -> off, w2 -> work-01, a2 -> and, i -> it, f -> fail-safe, o -> once, p3 -> possible, y2 -> you))),[Ljava.lang.String;@352ff4da,Annotation([Ljava.lang.String;@3224a577,[Ljava.lang.String;@2e32ccc5,[Ljava.lang.String;@748741cb),Annotation([Ljava.lang.String;@3e44f2a5,[Ljava.lang.String;@295cf707,[Ledu.cmu.lti.nlp.amr.Dependency;@1130520d),Annotation([Ljava.lang.String;@5f77d0f9,[Ljava.lang.String;@463fd068,[Ljava.lang.String;@895e367),Annotation([Ljava.lang.String;@1b266842,[Ljava.lang.String;@7a3793c7,[Ledu.cmu.lti.nlp.amr.Entity;@42b3b079))
AMR:
(a / and, op, p / pass-01)
(a2 / and, op, p2 / possible)
(a2 / and, op, w2 / work-01)
(g / get-04, ARG0, y3 / you)
(g / get-04, ARG1, a / and)
(g2 / grade-01, ARG1, p3 / possible)
(g2 / grade-01, ARG6, y4 / you)
(g3 / get-04, ARG0, w3 / way)
(g3 / get-04, ARG1, g2 / grade-01)
(h / hard-line, domain, i / it)
(o / once, op, g / get-04)
(p / pass-01, ARG0, i / it)
(p / pass-01, ARG1, w / work-01)
(p2 / possible, domain, s / say-01)
(s / say-01, ARG0, y / you)
(s / say-01, ARG1, f / fail-safe)
(w / work-01, ARG1, f / fail-safe)
(w2 / work-01, ARG0, y2 / you)
(w2 / work-01, ARG1, g3 / get-04)
(w2 / work-01, ARG6, o2 / off)

Decoded in 1,304,436 microseconds
Sentence: X

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@651aed93,Annotation([Ljava.lang.String;@4dd6fd0a,[Ljava.lang.String;@bb9e6dc,[Ljava.lang.String;@5456afaa),Annotation([Ljava.lang.String;@6692b6c6,[Ljava.lang.String;@1cd629b3,[Ledu.cmu.lti.nlp.amr.Dependency;@589da3f3),Annotation([Ljava.lang.String;@39d76cb5,[Ljava.lang.String;@4a00d9cf,[Ljava.lang.String;@6736fa8d),Annotation([Ljava.lang.String;@52815fa3,[Ljava.lang.String;@50313382,[Ledu.cmu.lti.nlp.amr.Entity;@1cb346ea))
AMR:


Decoded in 2,192 microseconds
Sentence: hope this helps

Spans:
Span 2-3:  helps => help-01
Span 0-1:  hope => hope-01
Span 1-2:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),helps,help-01,false), Span(1,2,List(1),this,this,false), Span(0,1,List(2),hope,hope-01,false)),Map(2 -> hope-01, 1 -> this, 0 -> help-01),Map(h -> help-01, h2 -> hope-01, t -> this))),[Ljava.lang.String;@4c012563,Annotation([Ljava.lang.String;@14a50707,[Ljava.lang.String;@4d518b32,[Ljava.lang.String;@4bd31064),Annotation([Ljava.lang.String;@e3c0e40,[Ljava.lang.String;@329dbdbf,[Ledu.cmu.lti.nlp.amr.Dependency;@7354b8c5),Annotation([Ljava.lang.String;@20d7d6fb,[Ljava.lang.String;@4ef782af,[Ljava.lang.String;@11d8ae8b),Annotation([Ljava.lang.String;@479cbee5,[Ljava.lang.String;@59e2d8e3,[Ledu.cmu.lti.nlp.amr.Entity;@2b72cb8a))
AMR:
(h / help-01, ARG1, t / this)
(h2 / hope-01, ARG1, h / help-01)

Decoded in 7,804 microseconds
Sentence: I'm pretty much non-autistic (not diagnosed with dyspraxia but I think the doctor misdiagnosed), but I walk on my toes nearly all of the time.

Spans:
Span 27-28:  all => all
Span 20-21:  but => contrast-01
Span 12-13:  but => contrast-01
Span 3-4:  much => much
Span 26-27:  nearly => near
Span 14-15:  think => think-01
Span 30-31:  time => time

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),time,time,false), Span(27,28,List(1),all,all,false), Span(26,27,List(2),nearly,near,false), Span(20,21,List(3),but,contrast-01,false), Span(14,15,List(4),think,think-01,false), Span(12,13,List(5),but,contrast-01,false), Span(3,4,List(6),much,much,false)),Map(2 -> near, 5 -> contrast-01, 1 -> all, 4 -> think-01, 6 -> much, 0 -> time, 3 -> contrast-01),Map(n -> near, t -> time, m -> much, a -> all, t2 -> think-01, c -> contrast-01, c2 -> contrast-01))),[Ljava.lang.String;@7f8a9499,Annotation([Ljava.lang.String;@5d43661b,[Ljava.lang.String;@12299890,[Ljava.lang.String;@2fba3fc4),Annotation([Ljava.lang.String;@4bf48f6,[Ljava.lang.String;@420a85c4,[Ledu.cmu.lti.nlp.amr.Dependency;@1c39680d),Annotation([Ljava.lang.String;@62833051,[Ljava.lang.String;@1c852c0f,[Ljava.lang.String;@a37aefe),Annotation([Ljava.lang.String;@5d99c6b5,[Ljava.lang.String;@266374ef,[Ledu.cmu.lti.nlp.amr.Entity;@13b3d178))
AMR:
(c / contrast-01, ARG0, a / all)
(c / contrast-01, ARG1, m / much)
(c2 / contrast-01, ARG1, t2 / think-01)
(t / time, mod, a / all)
(t / time, quant, n / near)
(t2 / think-01, ARG1, c / contrast-01)

Decoded in 219,681 microseconds
Sentence: It's more comfortable to me.

Spans:
Span 0-1:  It => it
Span 2-3:  more => more

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),more,more,false), Span(0,1,List(1),It,it,false)),Map(1 -> it, 0 -> more),Map(m -> more, i -> it))),[Ljava.lang.String;@24c4ddae,Annotation([Ljava.lang.String;@37fb0bed,[Ljava.lang.String;@a82c5f1,[Ljava.lang.String;@7b7fdc8),Annotation([Ljava.lang.String;@51c693d,[Ljava.lang.String;@6a57ae10,[Ledu.cmu.lti.nlp.amr.Dependency;@766653e6),Annotation([Ljava.lang.String;@4e07b95f,[Ljava.lang.String;@28b46423,[Ljava.lang.String;@7fc4780b),Annotation([Ljava.lang.String;@3b79fd76,[Ljava.lang.String;@48c76607,[Ledu.cmu.lti.nlp.amr.Entity;@43599640))
AMR:
(i / it, calendar, m / more)

Decoded in 5,812 microseconds
Sentence: What made them decide toe-walking is a sign of autism since it seems so random and isn't always indicative?

Spans:
Span 20-21:  always => always
Span 17-18:  and => and
Span 3-4:  decide => decide-01
Span 13-14:  it => it
Span 16-17:  random => random
Span 14-15:  seems => seem-01
Span 9-10:  sign => sign-02
Span 12-13:  since => since
Span 15-16:  so => so
Span 6-7:  walking => walk-01

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),always,always,false), Span(17,18,List(1),and,and,false), Span(16,17,List(2),random,random,false), Span(15,16,List(3),so,so,false), Span(14,15,List(4),seems,seem-01,false), Span(13,14,List(5),it,it,false), Span(12,13,List(6),since,since,false), Span(9,10,List(7),sign,sign-02,false), Span(6,7,List(8),walking,walk-01,false), Span(3,4,List(9),decide,decide-01,false)),Map(2 -> random, 5 -> it, 8 -> walk-01, 7 -> sign-02, 1 -> and, 4 -> seem-01, 6 -> since, 9 -> decide-01, 0 -> always, 3 -> so),Map(w -> walk-01, s2 -> seem-01, s -> so, d -> decide-01, s4 -> sign-02, a -> always, i -> it, r -> random, a2 -> and, s3 -> since))),[Ljava.lang.String;@1f81aa00,Annotation([Ljava.lang.String;@6b6776cb,[Ljava.lang.String;@1863d2fe,[Ljava.lang.String;@1787bc24),Annotation([Ljava.lang.String;@544d57e,[Ljava.lang.String;@55c53a33,[Ledu.cmu.lti.nlp.amr.Dependency;@53b7f657),Annotation([Ljava.lang.String;@797b0699,[Ljava.lang.String;@5a37d3ed,[Ljava.lang.String;@26df6e3a),Annotation([Ljava.lang.String;@4a3631f8,[Ljava.lang.String;@6b58b9e9,[Ledu.cmu.lti.nlp.amr.Entity;@f14a7d4))
AMR:
(a2 / and, op, s2 / seem-01)
(d / decide-01, ARG1, s4 / sign-02)
(r / random, mod, s / so)
(s2 / seem-01, ARG0, i / it)
(s2 / seem-01, ARG1, r / random)
(s3 / since, op, s2 / seem-01)
(s4 / sign-02, ARG1, w / walk-01)
(s4 / sign-02, ARG6, s2 / seem-01)
(w / walk-01, ARG1, a / always)

Decoded in 312,205 microseconds
Sentence: Well I might have signs of something on the autism spectrum but who doesn't have one or two?

Spans:
Span 11-12:  but => contrast-01
Span 16-17:  one => 1
Span 17-18:  or => or
Span 4-5:  signs => sign
Span 18-19:  two => 2

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),two,2,false), Span(17,18,List(1),or,or,false), Span(16,17,List(2),one,1,false), Span(11,12,List(3),but,contrast-01,false), Span(4,5,List(4),signs,sign,false)),Map(2 -> 1, 1 -> or, 4 -> sign, 0 -> 2, 3 -> contrast-01),Map(2 -> 2, s -> sign, 1 -> 1, c -> contrast-01, o -> or))),[Ljava.lang.String;@52e7a6b2,Annotation([Ljava.lang.String;@29a5f4e7,[Ljava.lang.String;@79c97cb,[Ljava.lang.String;@2d9caaeb),Annotation([Ljava.lang.String;@42a15bdc,[Ljava.lang.String;@44a59da3,[Ledu.cmu.lti.nlp.amr.Dependency;@27e47833),Annotation([Ljava.lang.String;@6f6745d6,[Ljava.lang.String;@27508c5d,[Ljava.lang.String;@4f704591),Annotation([Ljava.lang.String;@4b5189ac,[Ljava.lang.String;@1e4d3ce5,[Ledu.cmu.lti.nlp.amr.Entity;@3ddc6915))
AMR:
(c / contrast-01, ARG1, s / sign)
(c / contrast-01, ARG2, 2 / 2)
(o / or, op, 1 / 1)
(o / or, op, 2 / 2)

Decoded in 78,083 microseconds
Sentence: You guys know what I mean.

Spans:
Span 2-3:  know => know-01
Span 5-6:  mean => mean-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),mean,mean-01,false), Span(2,3,List(1),know,know-01,false)),Map(1 -> know-01, 0 -> mean-01),Map(k -> know-01, m -> mean-01))),[Ljava.lang.String;@704deff2,Annotation([Ljava.lang.String;@379614be,[Ljava.lang.String;@404bbcbd,[Ljava.lang.String;@1e81f160),Annotation([Ljava.lang.String;@1acaf3d,[Ljava.lang.String;@6986852,[Ledu.cmu.lti.nlp.amr.Dependency;@1bab8268),Annotation([Ljava.lang.String;@a307a8c,[Ljava.lang.String;@6e01f9b0,[Ljava.lang.String;@2b9ed6da),Annotation([Ljava.lang.String;@6c61a903,[Ljava.lang.String;@658c5a19,[Ledu.cmu.lti.nlp.amr.Entity;@421e361))
AMR:
(k / know-01, ARG1, m / mean-01)

Decoded in 5,951 microseconds
Sentence: Walking on toes can be a symptom of autism.

Spans:
Span 3-4:  can => possible

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),can,possible,false)),Map(0 -> possible),Map(p -> possible))),[Ljava.lang.String;@59d4cd39,Annotation([Ljava.lang.String;@389c4eb1,[Ljava.lang.String;@3fc79729,[Ljava.lang.String;@34f6515b),Annotation([Ljava.lang.String;@4b34fff9,[Ljava.lang.String;@1187c9e8,[Ledu.cmu.lti.nlp.amr.Dependency;@127a7a2e),Annotation([Ljava.lang.String;@14008db3,[Ljava.lang.String;@78a773fd,[Ljava.lang.String;@57c03d88),Annotation([Ljava.lang.String;@16aa8654,[Ljava.lang.String;@6d7fc27,[Ledu.cmu.lti.nlp.amr.Entity;@45ac5f9b))
AMR:


Decoded in 7,254 microseconds
Sentence: Having a headache can be a symptom of brain tumours.

Spans:
Span 3-4:  can => possible

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),can,possible,false)),Map(0 -> possible),Map(p -> possible))),[Ljava.lang.String;@135606db,Annotation([Ljava.lang.String;@518caac3,[Ljava.lang.String;@68034211,[Ljava.lang.String;@4f74980d),Annotation([Ljava.lang.String;@6c372fe6,[Ljava.lang.String;@58594a11,[Ledu.cmu.lti.nlp.amr.Dependency;@2a3888c1),Annotation([Ljava.lang.String;@4167d97b,[Ljava.lang.String;@14fa86ae,[Ljava.lang.String;@6e15fe2),Annotation([Ljava.lang.String;@68f1b17f,[Ljava.lang.String;@1722011b,[Ledu.cmu.lti.nlp.amr.Entity;@57ad2aa7))
AMR:


Decoded in 8,924 microseconds
Sentence: Feeling tired a lot can be a symptom of leukaemia.

Spans:
Span 4-5:  can => possible

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),can,possible,false)),Map(0 -> possible),Map(p -> possible))),[Ljava.lang.String;@5b3f61ff,Annotation([Ljava.lang.String;@3e2059ae,[Ljava.lang.String;@398dada8,[Ljava.lang.String;@7cb502c),Annotation([Ljava.lang.String;@275bf9b3,[Ljava.lang.String;@1b8a29df,[Ledu.cmu.lti.nlp.amr.Dependency;@4fbe37eb),Annotation([Ljava.lang.String;@12a94400,[Ljava.lang.String;@6a47b187,[Ljava.lang.String;@2049a9c1),Annotation([Ljava.lang.String;@1ef6d34c,[Ljava.lang.String;@46271dd6,[Ledu.cmu.lti.nlp.amr.Entity;@11bb571c))
AMR:


Decoded in 8,434 microseconds
Sentence: Symptoms don't always apply but if they happen in a lot of cases (which it clearly must do in this instance) it's worth noting, since otherwise nothing would ever get diagnosed.

Spans:
Span 3-4:  always => always
Span 4-5:  apply => apply-02
Span 5-6:  but => contrast-01
Span 13-14:  cases => case
Span 17-18:  clearly => clear
Span 19-20:  do => do-02
Span 1-2:  do => do-02
Span 33-34:  ever => ever
Span 34-35:  get => get-04
Span 8-9:  happen => happen-01
Span 24-25:  it => it
Span 16-17:  it => it
Span 31-32:  nothing => nothing
Span 27-28:  noting => note-01
Span 29-30:  since => since
Span 7-8:  they => they
Span 21-22:  this => this

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),get,get-04,false), Span(33,34,List(1),ever,ever,false), Span(31,32,List(2),nothing,nothing,false), Span(29,30,List(3),since,since,false), Span(27,28,List(4),noting,note-01,false), Span(24,25,List(5),it,it,false), Span(21,22,List(6),this,this,false), Span(19,20,List(7),do,do-02,false), Span(17,18,List(8),clearly,clear,false), Span(16,17,List(9),it,it,false), Span(13,14,List(10),cases,case,false), Span(8,9,List(11),happen,happen-01,false), Span(7,8,List(12),they,they,false), Span(5,6,List(13),but,contrast-01,false), Span(4,5,List(14),apply,apply-02,false), Span(3,4,List(15),always,always,false), Span(1,2,List(16),do,do-02,false)),Map(2 -> nothing, 5 -> it, 12 -> they, 15 -> always, 8 -> clear, 7 -> do-02, 1 -> ever, 4 -> note-01, 11 -> happen-01, 14 -> apply-02, 6 -> this, 0 -> get-04, 9 -> it, 16 -> do-02, 3 -> since, 10 -> case, 13 -> contrast-01),Map(e -> ever, n -> nothing, h -> happen-01, t -> this, s -> since, d -> do-02, g -> get-04, a -> apply-02, c3 -> contrast-01, d2 -> do-02, i2 -> it, t2 -> they, a2 -> always, i -> it, c -> clear, n2 -> note-01, c2 -> case))),[Ljava.lang.String;@7c51f34b,Annotation([Ljava.lang.String;@5495333e,[Ljava.lang.String;@2a225dd7,[Ljava.lang.String;@61eaec38),Annotation([Ljava.lang.String;@125290e5,[Ljava.lang.String;@6fa34d52,[Ledu.cmu.lti.nlp.amr.Dependency;@57576994),Annotation([Ljava.lang.String;@616ac46a,[Ljava.lang.String;@67b9b51a,[Ljava.lang.String;@1205bd62),Annotation([Ljava.lang.String;@7ef27d7f,[Ljava.lang.String;@490caf5f,[Ledu.cmu.lti.nlp.amr.Entity;@6337c201))
AMR:
(a / apply-02, ARG1, h / happen-01)
(a / apply-02, time, a2 / always)
(c3 / contrast-01, ARG1, n2 / note-01)
(c3 / contrast-01, ARG6, a / apply-02)
(d / do-02, ARG0, i2 / it)
(d / do-02, ARG1, c / clear)
(d / do-02, ARG6, i / it)
(d2 / do-02, ARG0, t / this)
(d2 / do-02, ARG1, a2 / always)
(g / get-04, ARG0, c2 / case)
(g / get-04, ARG1, n / nothing)
(g / get-04, ARG6, e / ever)
(h / happen-01, ARG0, t2 / they)
(h / happen-01, ARG1, s / since)
(n2 / note-01, ARG1, i / it)
(s / since, op, n / nothing)

Decoded in 998,031 microseconds
Sentence: I used to walk on my toes, but that was because I was born with strange toes that curled under and had to be straightened with surgery two years ago.

Spans:
Span 30-31:  ago => ago
Span 21-22:  and => and
Span 11-12:  because => cause-01
Span 14-15:  born => bear-02
Span 8-9:  but => contrast-01
Span 28-29:  two => 2
Span 1-2:  used => use-01
Span 29-30:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),ago,ago,false), Span(29,30,List(2, 1),years,(temporal-quantity :unit year),false), Span(28,29,List(3),two,2,false), Span(21,22,List(4),and,and,false), Span(14,15,List(5),born,bear-02,false), Span(11,12,List(6),because,cause-01,false), Span(8,9,List(7),but,contrast-01,false), Span(1,2,List(8),used,use-01,false)),Map(2 -> year, 5 -> bear-02, 8 -> use-01, 7 -> contrast-01, 1 -> temporal-quantity, 4 -> and, 6 -> cause-01, 0 -> ago, 3 -> 2),Map(2 -> 2, b -> bear-02, t -> temporal-quantity, y -> year, a -> ago, a2 -> and, u -> use-01, c -> cause-01, c2 -> contrast-01))),[Ljava.lang.String;@5c669da8,Annotation([Ljava.lang.String;@31920ade,[Ljava.lang.String;@1d483de4,[Ljava.lang.String;@4032d386),Annotation([Ljava.lang.String;@28d18df5,[Ljava.lang.String;@934b6cb,[Ledu.cmu.lti.nlp.amr.Dependency;@55cf0d14),Annotation([Ljava.lang.String;@3b74ac8,[Ljava.lang.String;@27adc16e,[Ljava.lang.String;@b83a9be),Annotation([Ljava.lang.String;@2609b277,[Ljava.lang.String;@1fd14d74,[Ledu.cmu.lti.nlp.amr.Entity;@563e4951))
AMR:
(a / ago, op, t / temporal-quantity)
(b / bear-02, ARG1, 2 / 2)
(c / cause-01, ARG0, b / bear-02)
(c / cause-01, ARG1, a2 / and)
(c2 / contrast-01, ARG1, u / use-01)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, y / year)
(u / use-01, ARG1, b / bear-02)

Decoded in 138,834 microseconds
Sentence: My brother's autistic but I haven't noticed this with him either, but the spectrum is so broad and I myself probably have mild asperger's because I have problems with communication and don't pick up on social reactions/body language.

Spans:
Span 34-35:  and => and
Span 20-21:  and => and
Span 28-29:  because => cause-01
Span 43-44:  body => body
Span 19-20:  broad => broad
Span 1-2:  brother => brother
Span 14-15:  but => contrast-01
Span 4-5:  but => contrast-01
Span 33-34:  communication => communicate-01
Span 35-36:  do => do-02
Span 44-45:  language => language
Span 37-38:  pick => pick-04
Span 23-24:  probably => probable
Span 31-32:  problems => problem
Span 18-19:  so => so
Span 40-41:  social => society
Span 9-10:  this => this

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),language,language,false), Span(43,44,List(1),body,body,false), Span(40,41,List(2),social,society,false), Span(37,38,List(3),pick,pick-04,false), Span(35,36,List(4),do,do-02,false), Span(34,35,List(5),and,and,false), Span(33,34,List(6),communication,communicate-01,false), Span(31,32,List(7),problems,problem,false), Span(28,29,List(8),because,cause-01,false), Span(23,24,List(9),probably,probable,false), Span(20,21,List(10),and,and,false), Span(19,20,List(11),broad,broad,false), Span(18,19,List(12),so,so,false), Span(14,15,List(13),but,contrast-01,false), Span(9,10,List(14),this,this,false), Span(4,5,List(15),but,contrast-01,false), Span(1,2,List(16),brother,brother,false)),Map(2 -> society, 5 -> and, 12 -> so, 15 -> contrast-01, 8 -> cause-01, 7 -> problem, 1 -> body, 4 -> do-02, 11 -> broad, 14 -> this, 6 -> communicate-01, 0 -> language, 9 -> probable, 16 -> brother, 3 -> pick-04, 10 -> and, 13 -> contrast-01),Map(b3 -> brother, s2 -> so, t -> this, b -> body, b2 -> broad, p2 -> problem, c4 -> contrast-01, s -> society, d -> do-02, p -> pick-04, c3 -> contrast-01, a -> and, a2 -> and, c -> communicate-01, l -> language, p3 -> probable, c2 -> cause-01))),[Ljava.lang.String;@4066c471,Annotation([Ljava.lang.String;@2b175c00,[Ljava.lang.String;@3eb81efb,[Ljava.lang.String;@1ae8bcbc),Annotation([Ljava.lang.String;@6cdba6dc,[Ljava.lang.String;@7d3d101b,[Ledu.cmu.lti.nlp.amr.Dependency;@30c8681),Annotation([Ljava.lang.String;@5cdec700,[Ljava.lang.String;@6d026701,[Ljava.lang.String;@78aa1f72),Annotation([Ljava.lang.String;@1f75a668,[Ljava.lang.String;@35399441,[Ledu.cmu.lti.nlp.amr.Entity;@4b7dc788))
AMR:
(a / and, op, p / pick-04)
(a2 / and, op, b2 / broad)
(b2 / broad, mod, s2 / so)
(c2 / cause-01, ARG0, a / and)
(c2 / cause-01, ARG1, p2 / problem)
(c3 / contrast-01, ARG0, b3 / brother)
(c3 / contrast-01, ARG1, t / this)
(c3 / contrast-01, ARG2, b2 / broad)
(c4 / contrast-01, ARG0, p3 / probable)
(c4 / contrast-01, ARG1, a2 / and)
(d / do-02, ARG0, a2 / and)
(l / language, mod, b / body)
(l / language, mod, s / society)
(p / pick-04, ARG0, d / do-02)
(p / pick-04, ARG1, l / language)
(p2 / problem, mod, c / communicate-01)

Decoded in 1,175,415 microseconds
Sentence: But then I don't have a proper diagnosis and even having some symptoms might not mean you have a certain condition.

Spans:
Span 9-10:  and => and
Span 0-1:  But => contrast-01
Span 20-21:  certain => certain
Span 21-22:  condition => condition
Span 3-4:  do => do-02
Span 10-11:  even => even
Span 11-12:  having => have-03
Span 16-17:  mean => mean-01
Span 7-8:  proper => proper
Span 12-13:  some => some
Span 1-2:  then => then
Span 17-18:  you => you

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),condition,condition,false), Span(20,21,List(1),certain,certain,false), Span(17,18,List(2),you,you,false), Span(16,17,List(3),mean,mean-01,false), Span(12,13,List(4),some,some,false), Span(11,12,List(5),having,have-03,false), Span(10,11,List(6),even,even,false), Span(9,10,List(7),and,and,false), Span(7,8,List(8),proper,proper,false), Span(3,4,List(9),do,do-02,false), Span(1,2,List(10),then,then,false), Span(0,1,List(11),But,contrast-01,false)),Map(2 -> you, 5 -> have-03, 8 -> proper, 7 -> and, 1 -> certain, 11 -> contrast-01, 4 -> some, 6 -> even, 9 -> do-02, 0 -> condition, 10 -> then, 3 -> mean-01),Map(e -> even, h -> have-03, t -> then, s -> some, d -> do-02, m -> mean-01, p -> proper, y -> you, c3 -> contrast-01, a -> and, c -> condition, c2 -> certain))),[Ljava.lang.String;@6304101a,Annotation([Ljava.lang.String;@5170bcf4,[Ljava.lang.String;@2812b107,[Ljava.lang.String;@df6620a),Annotation([Ljava.lang.String;@4e31276e,[Ljava.lang.String;@1a72a540,[Ledu.cmu.lti.nlp.amr.Dependency;@27d5a580),Annotation([Ljava.lang.String;@198d6542,[Ljava.lang.String;@5e403b4a,[Ljava.lang.String;@5117dd67),Annotation([Ljava.lang.String;@5be49b60,[Ljava.lang.String;@2931522b,[Ledu.cmu.lti.nlp.amr.Entity;@7674b62c))
AMR:
(a / and, op, h / have-03)
(a / and, op, m / mean-01)
(c / condition, calendar, y / you)
(c / condition, mod, c2 / certain)
(c3 / contrast-01, ARG1, s / some)
(c3 / contrast-01, ARG2, a / and)
(d / do-02, ARG1, t / then)
(h / have-03, ARG1, d / do-02)
(h / have-03, mod, e / even)
(m / mean-01, ARG0, p / proper)
(m / mean-01, ARG1, c / condition)

Decoded in 318,606 microseconds
Sentence: I walk on my toes not as much since years of being told not to.

Spans:
Span 7-8:  much => much
Span 8-9:  since => since
Span 12-13:  told => tell-01
Span 9-10:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),told,tell-01,false), Span(9,10,List(2, 1),years,(temporal-quantity :unit year),false), Span(8,9,List(3),since,since,false), Span(7,8,List(4),much,much,false)),Map(2 -> year, 1 -> temporal-quantity, 4 -> much, 0 -> tell-01, 3 -> since),Map(t -> tell-01, s -> since, m -> much, y -> year, t2 -> temporal-quantity))),[Ljava.lang.String;@19e7a160,Annotation([Ljava.lang.String;@662706a7,[Ljava.lang.String;@45a4b042,[Ljava.lang.String;@16b2bb0c),Annotation([Ljava.lang.String;@327af41b,[Ljava.lang.String;@6cb6decd,[Ledu.cmu.lti.nlp.amr.Dependency;@c7045b9),Annotation([Ljava.lang.String;@f99f5e0,[Ljava.lang.String;@6aa61224,[Ljava.lang.String;@30bce90b),Annotation([Ljava.lang.String;@3e6f3f28,[Ljava.lang.String;@7e19ebf0,[Ledu.cmu.lti.nlp.amr.Entity;@2474f125))
AMR:
(m / much, op, s / since)
(s / since, op, t2 / temporal-quantity)
(t / tell-01, ARG1, t2 / temporal-quantity)
(t2 / temporal-quantity, unit, y / year)

Decoded in 45,248 microseconds
Sentence: I have dyspraxia.

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@7357a011,Annotation([Ljava.lang.String;@3406472c,[Ljava.lang.String;@5717c37,[Ljava.lang.String;@68f4865),Annotation([Ljava.lang.String;@4816278d,[Ljava.lang.String;@4eaf3684,[Ledu.cmu.lti.nlp.amr.Dependency;@40317ba2),Annotation([Ljava.lang.String;@3c01cfa1,[Ljava.lang.String;@45d2ade3,[Ljava.lang.String;@727eb8cb),Annotation([Ljava.lang.String;@39d9314d,[Ljava.lang.String;@b978d10,[Ledu.cmu.lti.nlp.amr.Entity;@5b7a8434))
AMR:


Decoded in 2,579 microseconds
Sentence: So maybe you are dyspraxic or have short tendons.

Spans:
Span 5-6:  or => or
Span 7-8:  short => short
Span 0-1:  So => so
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),short,short,false), Span(5,6,List(1),or,or,false), Span(2,3,List(2),you,you,false), Span(0,1,List(3),So,so,false)),Map(2 -> you, 1 -> or, 0 -> short, 3 -> so),Map(s2 -> so, s -> short, y -> you, o -> or))),[Ljava.lang.String;@5c45d770,Annotation([Ljava.lang.String;@2ce6c6ec,[Ljava.lang.String;@1bae316d,[Ljava.lang.String;@147a5d08),Annotation([Ljava.lang.String;@6676f6a0,[Ljava.lang.String;@7cbd9d24,[Ledu.cmu.lti.nlp.amr.Dependency;@1672fe87),Annotation([Ljava.lang.String;@5026735c,[Ljava.lang.String;@1b45c0e,[Ljava.lang.String;@11f0a5a1),Annotation([Ljava.lang.String;@10f7f7de,[Ljava.lang.String;@73a8da0f,[Ledu.cmu.lti.nlp.amr.Entity;@50dfbc58))
AMR:
(o / or, calendar, y / you)
(s / short, domain, y / you)
(y / you, calendar, s2 / so)

Decoded in 13,158 microseconds
Sentence: People who do dance/ gymnastics/ ballet etc have it drilled into them, to the point where I find it more comfortable now =P

Spans:
Span 3-4:  dance => dance-01
Span 2-3:  do => do-02
Span 20-21:  find => find-01
Span 21-22:  it => it
Span 10-11:  it => it
Span 22-23:  more => more
Span 24-25:  now => now
Span 0-1:  People => "People's"
Span 17-18:  point => point

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),now,now,false), Span(22,23,List(1),more,more,false), Span(21,22,List(2),it,it,false), Span(20,21,List(3),find,find-01,false), Span(17,18,List(4),point,point,false), Span(10,11,List(5),it,it,false), Span(3,4,List(6),dance,dance-01,false), Span(2,3,List(7),do,do-02,false), Span(0,1,List(8),People,"People's",false)),Map(2 -> it, 5 -> it, 8 -> "People's", 7 -> do-02, 1 -> more, 4 -> point, 6 -> dance-01, 0 -> now, 3 -> find-01),Map(n -> now, P -> "People's", d -> dance-01, m -> more, p -> point, d2 -> do-02, i2 -> it, i -> it, f -> find-01))),[Ljava.lang.String;@4416d64f,Annotation([Ljava.lang.String;@6bf08014,[Ljava.lang.String;@5e3d57c7,[Ljava.lang.String;@732d0d24),Annotation([Ljava.lang.String;@1fb19a0,[Ljava.lang.String;@6ee4d9ab,[Ledu.cmu.lti.nlp.amr.Dependency;@5a5338df),Annotation([Ljava.lang.String;@418c5a9c,[Ljava.lang.String;@18e36d14,[Ljava.lang.String;@5082d622),Annotation([Ljava.lang.String;@13d4992d,[Ljava.lang.String;@302f7971,[Ledu.cmu.lti.nlp.amr.Entity;@332729ad))
AMR:
(d / dance-01, ARG0, i2 / it)
(d / dance-01, ARG1, p / point)
(d2 / do-02, ARG0, P / "People's")
(d2 / do-02, ARG1, d / dance-01)
(f / find-01, ARG1, p / point)
(f / find-01, ARG6, n / now)
(m / more, calendar, i / it)
(m / more, mod, n / now)

Decoded in 216,452 microseconds
Sentence: I wouldn't read too much into random "symptoms" like that

Spans:
Span 5-6:  much => much
Span 7-8:  random => random
Span 3-4:  read => read-01
Span 4-5:  too => too

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),random,random,false), Span(5,6,List(1),much,much,false), Span(4,5,List(2),too,too,false), Span(3,4,List(3),read,read-01,false)),Map(2 -> too, 1 -> much, 0 -> random, 3 -> read-01),Map(t -> too, m -> much, r2 -> read-01, r -> random))),[Ljava.lang.String;@75d2da2d,Annotation([Ljava.lang.String;@4278284b,[Ljava.lang.String;@9573584,[Ljava.lang.String;@3370f42),Annotation([Ljava.lang.String;@6057aebb,[Ljava.lang.String;@63eef88a,[Ledu.cmu.lti.nlp.amr.Dependency;@53251a66),Annotation([Ljava.lang.String;@6853425f,[Ljava.lang.String;@352c1b98,[Ljava.lang.String;@21129f1f),Annotation([Ljava.lang.String;@5a9f4771,[Ljava.lang.String;@282cb7c7,[Ledu.cmu.lti.nlp.amr.Entity;@7d898981))
AMR:
(r2 / read-01, ARG1, t / too)
(r2 / read-01, degree, m / much)
(t / too, op, r / random)

Decoded in 34,309 microseconds
Sentence: hello, i am a 12 year old girl (13 in two days) who is addicted to self harming

Spans:
Span 5-6:  12 => 12
Span 10-11:  13 => 13
Span 13-14:  days => (temporal-quantity :unit day)
Span 7-8:  old => old
Span 19-20:  self => self
Span 12-13:  two => 2
Span 6-7:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),self,self,false), Span(13,14,List(2, 1),days,(temporal-quantity :unit day),false), Span(12,13,List(3),two,2,false), Span(10,11,List(4),13,13,false), Span(7,8,List(5),old,old,false), Span(6,7,List(7, 6),year,(temporal-quantity :unit year),false), Span(5,6,List(8),12,12,false)),Map(2 -> day, 5 -> old, 8 -> 12, 7 -> year, 1 -> temporal-quantity, 4 -> 13, 6 -> temporal-quantity, 0 -> self, 3 -> 2),Map(2 -> 2, 12 -> 12, t -> temporal-quantity, s -> self, d -> day, y -> year, 1 -> 13, t2 -> temporal-quantity, o -> old))),[Ljava.lang.String;@48d61b48,Annotation([Ljava.lang.String;@68d279ec,[Ljava.lang.String;@258d79be,[Ljava.lang.String;@14f9390f),Annotation([Ljava.lang.String;@6c0d7c83,[Ljava.lang.String;@176b75f7,[Ledu.cmu.lti.nlp.amr.Dependency;@5965be2d),Annotation([Ljava.lang.String;@409c54f,[Ljava.lang.String;@3e74829,[Ljava.lang.String;@4f6f416f),Annotation([Ljava.lang.String;@3b8f0a79,[Ljava.lang.String;@71e693fa,[Ledu.cmu.lti.nlp.amr.Entity;@48793bef))
AMR:
(1 / 13, calendar, o / old)
(1 / 13, calendar, t / temporal-quantity)
(o / old, mod, t2 / temporal-quantity)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, d / day)
(t2 / temporal-quantity, mod, s / self)
(t2 / temporal-quantity, quant, 12 / 12)
(t2 / temporal-quantity, unit, y / year)

Decoded in 51,216 microseconds
Sentence: i started when i was seven as i slit each firnger indevidually with sissors, and from that day i never stopped,

Spans:
Span 15-16:  and => and
Span 18-19:  day => (temporal-quantity :unit day)
Span 9-10:  each => each
Span 5-6:  seven => 7
Span 1-2:  started => start-01
Span 21-22:  stopped => stop-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),stopped,stop-01,false), Span(18,19,List(2, 1),day,(temporal-quantity :unit day),false), Span(15,16,List(3),and,and,false), Span(9,10,List(4),each,each,false), Span(5,6,List(5),seven,7,false), Span(1,2,List(6),started,start-01,false)),Map(2 -> day, 5 -> 7, 1 -> temporal-quantity, 4 -> each, 6 -> start-01, 0 -> stop-01, 3 -> and),Map(e -> each, s2 -> start-01, t -> temporal-quantity, s -> stop-01, 7 -> 7, d -> day, a -> and))),[Ljava.lang.String;@7d286fb6,Annotation([Ljava.lang.String;@3eb77ea8,[Ljava.lang.String;@7b8b43c7,[Ljava.lang.String;@7aaca91a),Annotation([Ljava.lang.String;@44c73c26,[Ljava.lang.String;@41005828,[Ledu.cmu.lti.nlp.amr.Dependency;@60b4beb4),Annotation([Ljava.lang.String;@7fcf2fc1,[Ljava.lang.String;@2141a12,[Ljava.lang.String;@4196c360),Annotation([Ljava.lang.String;@41294f8,[Ljava.lang.String;@225129c,[Ledu.cmu.lti.nlp.amr.Entity;@20435c40))
AMR:
(a / and, op, s / stop-01)
(s / stop-01, ARG0, e / each)
(s / stop-01, ARG1, t / temporal-quantity)
(s2 / start-01, ARG0, a / and)
(s2 / start-01, ARG6, 7 / 7)
(t / temporal-quantity, unit, d / day)

Decoded in 172,210 microseconds
Sentence: it has got worse as i have a scar on my leg as i slit in my ex boyfriends name with stables,as i wont stop cutting unless i bleed,

Spans:
Span 27-28:  cutting => cut-02
Span 17-18:  ex => ex
Span 0-1:  it => it
Span 11-12:  leg => leg
Span 19-20:  name => name
Span 26-27:  stop => stop-01
Span 3-4:  worse => bad

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),cutting,cut-02,false), Span(26,27,List(1),stop,stop-01,false), Span(19,20,List(2),name,name,false), Span(17,18,List(3),ex,ex,false), Span(11,12,List(4),leg,leg,false), Span(3,4,List(5),worse,bad,false), Span(0,1,List(6),it,it,false)),Map(2 -> name, 5 -> bad, 1 -> stop-01, 4 -> leg, 6 -> it, 0 -> cut-02, 3 -> ex),Map(e -> ex, n -> name, b -> bad, s -> stop-01, i -> it, l -> leg, c -> cut-02))),[Ljava.lang.String;@573906eb,Annotation([Ljava.lang.String;@479ceda0,[Ljava.lang.String;@6d07a63d,[Ljava.lang.String;@571c5681),Annotation([Ljava.lang.String;@488d1cd7,[Ljava.lang.String;@68dc098b,[Ledu.cmu.lti.nlp.amr.Dependency;@38ba6ce3),Annotation([Ljava.lang.String;@d278d2b,[Ljava.lang.String;@2d6c53fc,[Ljava.lang.String;@25f4878b),Annotation([Ljava.lang.String;@4e423aa2,[Ljava.lang.String;@7fbdb894,[Ledu.cmu.lti.nlp.amr.Entity;@3081f72c))
AMR:
(b / bad, calendar, i / it)
(b / bad, op, s / stop-01)
(c / cut-02, ARG1, e / ex)
(l / leg, op, c / cut-02)
(s / stop-01, ARG1, c / cut-02)
(s / stop-01, ARG2, n / name)

Decoded in 136,715 microseconds
Sentence: i have sevral slits on my arm,

Spans:
Span 6-7:  arm => arm-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),arm,arm-01,false)),Map(0 -> arm-01),Map(a -> arm-01))),[Ljava.lang.String;@3148f668,Annotation([Ljava.lang.String;@6e005dc9,[Ljava.lang.String;@7ceb3185,[Ljava.lang.String;@436c81a3),Annotation([Ljava.lang.String;@3561c410,[Ljava.lang.String;@59e32960,[Ledu.cmu.lti.nlp.amr.Dependency;@7c214cc0),Annotation([Ljava.lang.String;@5b67bb7e,[Ljava.lang.String;@609db546,[Ljava.lang.String;@20f5281c),Annotation([Ljava.lang.String;@56c4278e,[Ljava.lang.String;@301eda63,[Ledu.cmu.lti.nlp.amr.Entity;@3d246ea3))
AMR:


Decoded in 5,194 microseconds
Sentence: they healed, then i cut myself with staples i robbed from school and a razor.

Spans:
Span 13-14:  and => and
Span 5-6:  cut => cut-02
Span 12-13:  school => school
Span 3-4:  then => then
Span 0-1:  they => they

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),and,and,false), Span(12,13,List(1),school,school,false), Span(5,6,List(2),cut,cut-02,false), Span(3,4,List(3),then,then,false), Span(0,1,List(4),they,they,false)),Map(2 -> cut-02, 1 -> school, 4 -> they, 0 -> and, 3 -> then),Map(t -> then, s -> school, a -> and, t2 -> they, c -> cut-02))),[Ljava.lang.String;@341814d3,Annotation([Ljava.lang.String;@4397ad89,[Ljava.lang.String;@59cba5a,[Ljava.lang.String;@1bd39d3c),Annotation([Ljava.lang.String;@6f19ac19,[Ljava.lang.String;@119cbf96,[Ledu.cmu.lti.nlp.amr.Dependency;@71329995),Annotation([Ljava.lang.String;@768fc0f2,[Ljava.lang.String;@5454d35e,[Ljava.lang.String;@20c0a64d),Annotation([Ljava.lang.String;@455b6df1,[Ljava.lang.String;@4ddbbdf8,[Ledu.cmu.lti.nlp.amr.Entity;@3f67593e))
AMR:
(a / and, op, s / school)
(c / cut-02, ARG0, a / and)
(c / cut-02, ARG1, t2 / they)
(c / cut-02, ARG6, t / then)

Decoded in 47,508 microseconds
Sentence: when i cant find anything to cut with i take around 5 paracetmols and other drugs and i take them with larger and vodka.

Spans:
Span 11-12:  5 => 5
Span 22-23:  and => and
Span 16-17:  and => and
Span 13-14:  and => and
Span 4-5:  anything => anything
Span 10-11:  around => around
Span 6-7:  cut => cut-02
Span 15-16:  drugs => drug
Span 3-4:  find => find-01
Span 21-22:  larger => large
Span 14-15:  other => other
Span 18-19:  take => take-01
Span 9-10:  take => take-01
Span 23-24:  vodka => vodka

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),vodka,vodka,false), Span(22,23,List(1),and,and,false), Span(21,22,List(2),larger,large,false), Span(18,19,List(3),take,take-01,false), Span(16,17,List(4),and,and,false), Span(15,16,List(5),drugs,drug,false), Span(14,15,List(6),other,other,false), Span(13,14,List(7),and,and,false), Span(11,12,List(8),5,5,false), Span(10,11,List(9),around,around,false), Span(9,10,List(10),take,take-01,false), Span(6,7,List(11),cut,cut-02,false), Span(4,5,List(12),anything,anything,false), Span(3,4,List(13),find,find-01,false)),Map(2 -> large, 5 -> drug, 12 -> anything, 8 -> 5, 7 -> and, 1 -> and, 4 -> and, 11 -> cut-02, 6 -> other, 0 -> vodka, 9 -> around, 3 -> take-01, 10 -> take-01, 13 -> find-01),Map(5 -> 5, t -> take-01, a3 -> and, v -> vodka, d -> drug, a -> and, a5 -> anything, t2 -> take-01, a2 -> and, c -> cut-02, l -> large, f -> find-01, o -> other, a4 -> around))),[Ljava.lang.String;@1ab06251,Annotation([Ljava.lang.String;@41ab013,[Ljava.lang.String;@14bee915,[Ljava.lang.String;@1115ec15),Annotation([Ljava.lang.String;@82ea68c,[Ljava.lang.String;@59e505b2,[Ledu.cmu.lti.nlp.amr.Dependency;@3af0a9da),Annotation([Ljava.lang.String;@43b9fd5,[Ljava.lang.String;@79dc5318,[Ljava.lang.String;@8e50104),Annotation([Ljava.lang.String;@37e4d7bb,[Ljava.lang.String;@6f7923a5,[Ledu.cmu.lti.nlp.amr.Entity;@74a6f9c1))
AMR:
(a2 / and, condition, f / find-01)
(a2 / and, op, d / drug)
(a2 / and, op, t / take-01)
(a2 / and, op, t2 / take-01)
(a3 / and, op, t2 / take-01)
(a4 / around, op, 5 / 5)
(a4 / around, op, a3 / and)
(c / cut-02, ARG1, a5 / anything)
(d / drug, mod, o / other)
(f / find-01, ARG0, a / and)
(f / find-01, ARG1, a5 / anything)
(t / take-01, ARG1, l / large)
(t2 / take-01, ARG1, v / vodka)

Decoded in 282,761 microseconds
Sentence: as im writing this i am really tempted to cut my arm or burn myslef,

Spans:
Span 11-12:  arm => arm-01
Span 9-10:  cut => cut-02
Span 12-13:  or => or
Span 6-7:  really => really
Span 3-4:  this => this

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),or,or,false), Span(11,12,List(1),arm,arm-01,false), Span(9,10,List(2),cut,cut-02,false), Span(6,7,List(3),really,really,false), Span(3,4,List(4),this,this,false)),Map(2 -> cut-02, 1 -> arm-01, 4 -> this, 0 -> or, 3 -> really),Map(t -> this, a -> arm-01, r -> really, c -> cut-02, o -> or))),[Ljava.lang.String;@54eb2b70,Annotation([Ljava.lang.String;@45a37759,[Ljava.lang.String;@63611043,[Ljava.lang.String;@20ca951f),Annotation([Ljava.lang.String;@2d778add,[Ljava.lang.String;@73302995,[Ledu.cmu.lti.nlp.amr.Dependency;@1838ccb8),Annotation([Ljava.lang.String;@6c2ed0cd,[Ljava.lang.String;@7d9e8ef7,[Ljava.lang.String;@f107c50),Annotation([Ljava.lang.String;@51133c06,[Ljava.lang.String;@4b213651,[Ledu.cmu.lti.nlp.amr.Entity;@4241e0f4))
AMR:
(a / arm-01, ARG1, t / this)
(c / cut-02, ARG0, r / really)
(c / cut-02, ARG1, a / arm-01)
(o / or, op, c / cut-02)

Decoded in 32,090 microseconds
Sentence: i am addicted,when ever one heals i cut again

Spans:
Span 10-11:  again => again
Span 9-10:  cut => cut-02
Span 5-6:  ever => ever
Span 6-7:  one => 1

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),again,again,false), Span(9,10,List(1),cut,cut-02,false), Span(6,7,List(2),one,1,false), Span(5,6,List(3),ever,ever,false)),Map(2 -> 1, 1 -> cut-02, 0 -> again, 3 -> ever),Map(e -> ever, 1 -> 1, a -> again, c -> cut-02))),[Ljava.lang.String;@4ebff610,Annotation([Ljava.lang.String;@60410cd,[Ljava.lang.String;@44d52de2,[Ljava.lang.String;@95e33cc),Annotation([Ljava.lang.String;@38604b81,[Ljava.lang.String;@1e44b638,[Ledu.cmu.lti.nlp.amr.Dependency;@7393222f),Annotation([Ljava.lang.String;@babafc2,[Ljava.lang.String;@31add175,[Ljava.lang.String;@ae3540e),Annotation([Ljava.lang.String;@600b9d27,[Ljava.lang.String;@3688eb5b,[Ledu.cmu.lti.nlp.amr.Entity;@69f1a286))
AMR:
(c / cut-02, ARG1, 1 / 1)
(c / cut-02, mod, a / again)
(e / ever, op, 1 / 1)

Decoded in 31,910 microseconds
Sentence: it think about it everyday,

Spans:
Span 2-3:  about => about
Span 3-4:  it => it
Span 0-1:  it => it
Span 1-2:  think => think-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),it,it,false), Span(2,3,List(1),about,about,false), Span(1,2,List(2),think,think-01,false), Span(0,1,List(3),it,it,false)),Map(2 -> think-01, 1 -> about, 0 -> it, 3 -> it),Map(t -> think-01, a -> about, i2 -> it, i -> it))),[Ljava.lang.String;@7922d892,Annotation([Ljava.lang.String;@457c9034,[Ljava.lang.String;@345f69f3,[Ljava.lang.String;@50de186c),Annotation([Ljava.lang.String;@3f57bcad,[Ljava.lang.String;@1e8b7643,[Ledu.cmu.lti.nlp.amr.Dependency;@51549490),Annotation([Ljava.lang.String;@71e9ebae,[Ljava.lang.String;@73d983ea,[Ljava.lang.String;@36a5cabc),Annotation([Ljava.lang.String;@432038ec,[Ljava.lang.String;@7daa0fbd,[Ledu.cmu.lti.nlp.amr.Entity;@42530531))
AMR:
(t / think-01, ARG0, i2 / it)
(t / think-01, ARG1, i / it)
(t / think-01, ARG6, a / about)

Decoded in 36,018 microseconds
Sentence: i am 12 and i am already sick of my life.

Spans:
Span 2-3:  12 => 12
Span 6-7:  already => already
Span 3-4:  and => and
Span 10-11:  life => life

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),life,life,false), Span(6,7,List(1),already,already,false), Span(3,4,List(2),and,and,false), Span(2,3,List(3),12,12,false)),Map(2 -> and, 1 -> already, 0 -> life, 3 -> 12),Map(1 -> 12, a -> already, a2 -> and, l -> life))),[Ljava.lang.String;@5a3bc7ed,Annotation([Ljava.lang.String;@181e731e,[Ljava.lang.String;@35645047,[Ljava.lang.String;@6f44a157),Annotation([Ljava.lang.String;@6bc407fd,[Ljava.lang.String;@291f18,[Ledu.cmu.lti.nlp.amr.Dependency;@17d88132),Annotation([Ljava.lang.String;@5ddcc487,[Ljava.lang.String;@16eccb2e,[Ljava.lang.String;@5ef5c734),Annotation([Ljava.lang.String;@d771cc9,[Ljava.lang.String;@36b4091c,[Ledu.cmu.lti.nlp.amr.Entity;@4671115f))
AMR:
(a / already, calendar, 1 / 12)
(a2 / and, op, l / life)
(l / life, op, 1 / 12)

Decoded in 13,835 microseconds
Sentence: the source of this is that; when i was 7 my dad left,and he doesnt want to know me anymore,

Spans:
Span 10-11:  7 => 7
Span 6-7:  ; => and
Span 15-16:  and => and
Span 20-21:  know => know-01
Span 13-14:  left => leave-01
Span 1-2:  source => source
Span 3-4:  this => this
Span 18-19:  want => want-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),know,know-01,false), Span(18,19,List(1),want,want-01,false), Span(15,16,List(2),and,and,false), Span(13,14,List(3),left,leave-01,false), Span(10,11,List(4),7,7,false), Span(6,7,List(5),;,and,false), Span(3,4,List(6),this,this,false), Span(1,2,List(7),source,source,false)),Map(2 -> and, 5 -> and, 7 -> source, 1 -> want-01, 4 -> 7, 6 -> this, 0 -> know-01, 3 -> leave-01),Map(w -> want-01, t -> this, k -> know-01, s -> source, 7 -> 7, a -> and, a2 -> and, l -> leave-01))),[Ljava.lang.String;@36cda2c2,Annotation([Ljava.lang.String;@3697186,[Ljava.lang.String;@1583741e,[Ljava.lang.String;@5b367418),Annotation([Ljava.lang.String;@36060e,[Ljava.lang.String;@481ba2cf,[Ledu.cmu.lti.nlp.amr.Dependency;@46b61c56),Annotation([Ljava.lang.String;@2e48362c,[Ljava.lang.String;@1efe439d,[Ljava.lang.String;@be68757),Annotation([Ljava.lang.String;@7d446ed1,[Ljava.lang.String;@12d2ce03,[Ledu.cmu.lti.nlp.amr.Entity;@7e5c856f))
AMR:
(k / know-01, ARG0, s / source)
(k / know-01, ARG1, a2 / and)
(l / leave-01, ARG0, a2 / and)
(l / leave-01, ARG1, a / and)
(l / leave-01, ARG6, 7 / 7)
(t / this, calendar, s / source)
(w / want-01, ARG1, k / know-01)

Decoded in 159,158 microseconds
Sentence: he just cares about his new little girl and wife,his new life, where im not wanted.

Spans:
Span 3-4:  about => about
Span 8-9:  and => and
Span 1-2:  just => just
Span 13-14:  life => life
Span 6-7:  little => little
Span 12-13:  new => new
Span 5-6:  new => new
Span 18-19:  wanted => want-01
Span 9-10:  wife => wife

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),wanted,want-01,false), Span(13,14,List(1),life,life,false), Span(12,13,List(2),new,new,false), Span(9,10,List(3),wife,wife,false), Span(8,9,List(4),and,and,false), Span(6,7,List(5),little,little,false), Span(5,6,List(6),new,new,false), Span(3,4,List(7),about,about,false), Span(1,2,List(8),just,just,false)),Map(2 -> new, 5 -> little, 8 -> just, 7 -> about, 1 -> life, 4 -> and, 6 -> new, 0 -> want-01, 3 -> wife),Map(n -> new, w -> want-01, j -> just, a -> and, a2 -> about, l2 -> little, w2 -> wife, l -> life, n2 -> new))),[Ljava.lang.String;@413f69cc,Annotation([Ljava.lang.String;@1f53a5dc,[Ljava.lang.String;@1b75c2e3,[Ljava.lang.String;@1984b1f),Annotation([Ljava.lang.String;@3bd323e9,[Ljava.lang.String;@39ac0c0a,[Ledu.cmu.lti.nlp.amr.Dependency;@c7ba306),Annotation([Ljava.lang.String;@4ff8d125,[Ljava.lang.String;@6d167f58,[Ljava.lang.String;@3403e2ac),Annotation([Ljava.lang.String;@65b104b9,[Ljava.lang.String;@6c4980d3,[Ledu.cmu.lti.nlp.amr.Entity;@327bcebd))
AMR:
(a / and, op, n / new)
(a / and, op, w2 / wife)
(a2 / about, op, a / and)
(j / just, calendar, a2 / about)
(l / life, mod, n / new)
(w / want-01, ARG0, a / and)
(w / want-01, ARG1, l2 / little)
(w2 / wife, mod, n2 / new)

Decoded in 78,343 microseconds
Sentence: my best mate died when i was 10

Spans:
Span 7-8:  10 => 10
Span 3-4:  died => die-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),10,10,false), Span(3,4,List(1),died,die-01,false)),Map(1 -> die-01, 0 -> 10),Map(d -> die-01, 1 -> 10))),[Ljava.lang.String;@19c65cdc,Annotation([Ljava.lang.String;@74bf1791,[Ljava.lang.String;@54504ecd,[Ljava.lang.String;@38b27cdc),Annotation([Ljava.lang.String;@1339e7aa,[Ljava.lang.String;@1fb669c3,[Ledu.cmu.lti.nlp.amr.Dependency;@49c66ade),Annotation([Ljava.lang.String;@6239aba6,[Ljava.lang.String;@3e6104fc,[Ljava.lang.String;@12359a82),Annotation([Ljava.lang.String;@68df9280,[Ljava.lang.String;@479460a6,[Ledu.cmu.lti.nlp.amr.Entity;@7164ca4c))
AMR:
(d / die-01, ARG1, 1 / 10)

Decoded in 6,396 microseconds
Sentence: i had a reltionship with a boy who is 16 and i am forbidden to speak to him because of what happend and the age diffrience

Spans:
Span 9-10:  16 => 16
Span 24-25:  age => age
Span 22-23:  and => and
Span 10-11:  and => and
Span 18-19:  because => cause-01
Span 6-7:  boy => boy
Span 15-16:  speak => speak-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),age,age,false), Span(22,23,List(1),and,and,false), Span(18,19,List(2),because,cause-01,false), Span(15,16,List(3),speak,speak-01,false), Span(10,11,List(4),and,and,false), Span(9,10,List(5),16,16,false), Span(6,7,List(6),boy,boy,false)),Map(2 -> cause-01, 5 -> 16, 1 -> and, 4 -> and, 6 -> boy, 0 -> age, 3 -> speak-01),Map(b -> boy, a3 -> and, s -> speak-01, 1 -> 16, a -> age, a2 -> and, c -> cause-01))),[Ljava.lang.String;@4f3bbf68,Annotation([Ljava.lang.String;@5be46f9d,[Ljava.lang.String;@3f91b517,[Ljava.lang.String;@68702e03),Annotation([Ljava.lang.String;@7a220c9a,[Ljava.lang.String;@2421cc4,[Ledu.cmu.lti.nlp.amr.Dependency;@30c93896),Annotation([Ljava.lang.String;@59a008ba,[Ljava.lang.String;@338c99c8,[Ljava.lang.String;@21ba0741),Annotation([Ljava.lang.String;@58ce9668,[Ljava.lang.String;@172b013,[Ledu.cmu.lti.nlp.amr.Entity;@56673b2c))
AMR:
(a3 / and, op, a2 / and)
(c / cause-01, ARG0, a2 / and)
(c / cause-01, ARG1, a / age)
(s / speak-01, ARG0, b / boy)
(s / speak-01, ARG1, 1 / 16)
(s / speak-01, ARG2, a2 / and)

Decoded in 130,238 microseconds
Sentence: also my mum suffers from bi polar and i have depression

Spans:
Span 0-1:  also => also
Span 7-8:  and => and
Span 6-7:  polar => polar

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),and,and,false), Span(6,7,List(1),polar,polar,false), Span(0,1,List(2),also,also,false)),Map(2 -> also, 1 -> polar, 0 -> and),Map(p -> polar, a -> and, a2 -> also))),[Ljava.lang.String;@2796aeae,Annotation([Ljava.lang.String;@b4711e2,[Ljava.lang.String;@1fa1cab1,[Ljava.lang.String;@70f02c32),Annotation([Ljava.lang.String;@62010f5c,[Ljava.lang.String;@51fadaff,[Ledu.cmu.lti.nlp.amr.Dependency;@401f7633),Annotation([Ljava.lang.String;@31ff43be,[Ljava.lang.String;@5b6ec132,[Ljava.lang.String;@5c44c582),Annotation([Ljava.lang.String;@67d18ed7,[Ljava.lang.String;@2c78d320,[Ledu.cmu.lti.nlp.amr.Entity;@132e0cc))
AMR:
(a / and, mod, a2 / also)
(a / and, op, p / polar)

Decoded in 11,652 microseconds
Sentence: i dont what to stop,

Spans:
Span 4-5:  stop => stop-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),stop,stop-01,false)),Map(0 -> stop-01),Map(s -> stop-01))),[Ljava.lang.String;@7b205dbd,Annotation([Ljava.lang.String;@106cc338,[Ljava.lang.String;@7a67e3c6,[Ljava.lang.String;@6cc558c6),Annotation([Ljava.lang.String;@15713d56,[Ljava.lang.String;@63f259c3,[Ledu.cmu.lti.nlp.amr.Dependency;@26ceffa8),Annotation([Ljava.lang.String;@600b90df,[Ljava.lang.String;@7c8c9a05,[Ljava.lang.String;@d41f816),Annotation([Ljava.lang.String;@5c2375a9,[Ljava.lang.String;@60129b9a,[Ledu.cmu.lti.nlp.amr.Entity;@78d6692f))
AMR:


Decoded in 3,353 microseconds
Sentence: i dont care what i do to myself,i want to do it again and again to tourture myslef,i hate me.

Spans:
Span 16-17:  again => again
Span 14-15:  again => again
Span 15-16:  and => and
Span 12-13:  do => do-02
Span 5-6:  do => do-02
Span 13-14:  it => it
Span 10-11:  want => want-01

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),again,again,false), Span(15,16,List(1),and,and,false), Span(14,15,List(2),again,again,false), Span(13,14,List(3),it,it,false), Span(12,13,List(4),do,do-02,false), Span(10,11,List(5),want,want-01,false), Span(5,6,List(6),do,do-02,false)),Map(2 -> again, 5 -> want-01, 1 -> and, 4 -> do-02, 6 -> do-02, 0 -> again, 3 -> it),Map(w -> want-01, a3 -> again, d -> do-02, a -> again, d2 -> do-02, i -> it, a2 -> and))),[Ljava.lang.String;@7a55af6b,Annotation([Ljava.lang.String;@3d9c13b5,[Ljava.lang.String;@492691d7,[Ljava.lang.String;@27216cd),Annotation([Ljava.lang.String;@558bdf1f,[Ljava.lang.String;@8576fa0,[Ledu.cmu.lti.nlp.amr.Dependency;@7582ff54),Annotation([Ljava.lang.String;@67545b57,[Ljava.lang.String;@6c2c1385,[Ljava.lang.String;@5f354bcf),Annotation([Ljava.lang.String;@3daf7722,[Ljava.lang.String;@78641d23,[Ledu.cmu.lti.nlp.amr.Entity;@74589991))
AMR:
(a2 / and, op, d / do-02)
(d / do-02, ARG1, a3 / again)
(d / do-02, ARG6, a / again)
(d2 / do-02, ARG1, w / want-01)
(w / want-01, ARG1, a2 / and)
(w / want-01, ARG6, i / it)

Decoded in 226,608 microseconds
Sentence: however,my best mate,i love him,loads,he means the world to me and if i do anything then he will,

Spans:
Span 18-19:  and => and
Span 22-23:  anything => anything
Span 21-22:  do => do-02
Span 7-8:  love => love
Span 13-14:  means => mean-01
Span 23-24:  then => then
Span 15-16:  world => world

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),then,then,false), Span(22,23,List(1),anything,anything,false), Span(21,22,List(2),do,do-02,false), Span(18,19,List(3),and,and,false), Span(15,16,List(4),world,world,false), Span(13,14,List(5),means,mean-01,false), Span(7,8,List(6),love,love,false)),Map(2 -> do-02, 5 -> mean-01, 1 -> anything, 4 -> world, 6 -> love, 0 -> then, 3 -> and),Map(w -> world, t -> then, m -> mean-01, d -> do-02, a -> anything, a2 -> and, l -> love))),[Ljava.lang.String;@146dfe6,Annotation([Ljava.lang.String;@4716be8b,[Ljava.lang.String;@1fc32e4f,[Ljava.lang.String;@2f67b837),Annotation([Ljava.lang.String;@1869fbd2,[Ljava.lang.String;@6af9fcb2,[Ledu.cmu.lti.nlp.amr.Dependency;@6cce16f4),Annotation([Ljava.lang.String;@7efaad5a,[Ljava.lang.String;@291a7e3c,[Ljava.lang.String;@ca30bc1),Annotation([Ljava.lang.String;@1046d517,[Ljava.lang.String;@3b7d3a38,[Ledu.cmu.lti.nlp.amr.Entity;@416c58f5))
AMR:
(a2 / and, op, l / love)
(a2 / and, op, m / mean-01)
(d / do-02, ARG1, a / anything)
(d / do-02, ARG6, t / then)
(m / mean-01, ARG1, w / world)
(m / mean-01, ARG6, d / do-02)

Decoded in 174,273 microseconds
Sentence: i dont tell him but he finds out,

Spans:
Span 4-5:  but => contrast-01
Span 6-7:  finds => find-02
Span 7-8:  out => out
Span 2-3:  tell => tell-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),out,out,false), Span(6,7,List(1),finds,find-02,false), Span(4,5,List(2),but,contrast-01,false), Span(2,3,List(3),tell,tell-01,false)),Map(2 -> contrast-01, 1 -> find-02, 0 -> out, 3 -> tell-01),Map(t -> tell-01, c -> contrast-01, f -> find-02, o -> out))),[Ljava.lang.String;@5505ae1a,Annotation([Ljava.lang.String;@73cd37c0,[Ljava.lang.String;@21337f7b,[Ljava.lang.String;@2bb3058),Annotation([Ljava.lang.String;@7a362b6b,[Ljava.lang.String;@60df60da,[Ledu.cmu.lti.nlp.amr.Dependency;@5a2d131d),Annotation([Ljava.lang.String;@14fc1f0,[Ljava.lang.String;@4ae9cfc1,[Ljava.lang.String;@512baff6),Annotation([Ljava.lang.String;@632ceb35,[Ljava.lang.String;@1c93f6e1,[Ledu.cmu.lti.nlp.amr.Entity;@1800a575))
AMR:
(c / contrast-01, ARG1, f / find-02)
(f / find-02, ARG5, o / out)
(t / tell-01, ARG1, c / contrast-01)

Decoded in 11,639 microseconds
Sentence: i dont want to hurt him,i dont want him to hurt himself

Spans:
Span 12-13:  hurt => hurt-01
Span 4-5:  hurt => hurt-01
Span 9-10:  want => want-01
Span 2-3:  want => want-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),hurt,hurt-01,false), Span(9,10,List(1),want,want-01,false), Span(4,5,List(2),hurt,hurt-01,false), Span(2,3,List(3),want,want-01,false)),Map(2 -> hurt-01, 1 -> want-01, 0 -> hurt-01, 3 -> want-01),Map(w -> want-01, h -> hurt-01, h2 -> hurt-01, w2 -> want-01))),[Ljava.lang.String;@1458ed9c,Annotation([Ljava.lang.String;@10a9d961,[Ljava.lang.String;@130e116b,[Ljava.lang.String;@e383572),Annotation([Ljava.lang.String;@5ddf0d24,[Ljava.lang.String;@363a52f,[Ledu.cmu.lti.nlp.amr.Dependency;@60856961),Annotation([Ljava.lang.String;@2fd953a6,[Ljava.lang.String;@a4add54,[Ljava.lang.String;@141e5bef),Annotation([Ljava.lang.String;@5f9be66c,[Ljava.lang.String;@3abada5a,[Ledu.cmu.lti.nlp.amr.Entity;@66c61024))
AMR:
(h2 / hurt-01, ARG1, w / want-01)
(w / want-01, ARG1, h / hurt-01)
(w2 / want-01, ARG1, h2 / hurt-01)

Decoded in 30,018 microseconds
Sentence: what do i do

Spans:
Span 3-4:  do => do-02
Span 1-2:  do => do-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),do,do-02,false), Span(1,2,List(1),do,do-02,false)),Map(1 -> do-02, 0 -> do-02),Map(d -> do-02, d2 -> do-02))),[Ljava.lang.String;@61fe30,Annotation([Ljava.lang.String;@c9d0d6,[Ljava.lang.String;@6ccdb29f,[Ljava.lang.String;@3adcc812),Annotation([Ljava.lang.String;@35432107,[Ljava.lang.String;@7b420819,[Ledu.cmu.lti.nlp.amr.Dependency;@7a1a14a4),Annotation([Ljava.lang.String;@265adfad,[Ljava.lang.String;@a3d9978,[Ljava.lang.String;@61544ae6),Annotation([Ljava.lang.String;@4b41dd5c,[Ljava.lang.String;@3b96c42e,[Ledu.cmu.lti.nlp.amr.Entity;@5d066c7d))
AMR:
(d / do-02, ARG1, d2 / do-02)

Decoded in 3,922 microseconds
Sentence: thanks you for reading

Spans:
Span 1-2:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),you,you,false)),Map(0 -> you),Map(y -> you))),[Ljava.lang.String;@1e461e41,Annotation([Ljava.lang.String;@5ba88be8,[Ljava.lang.String;@56928307,[Ljava.lang.String;@3899782c),Annotation([Ljava.lang.String;@1603cd68,[Ljava.lang.String;@9ebe38b,[Ledu.cmu.lti.nlp.amr.Dependency;@4b23c30a),Annotation([Ljava.lang.String;@38089a5a,[Ljava.lang.String;@30e868be,[Ljava.lang.String;@66c92293),Annotation([Ljava.lang.String;@332796d3,[Ljava.lang.String;@4f0100a7,[Ledu.cmu.lti.nlp.amr.Entity;@3cdf2c61))
AMR:


Decoded in 2,573 microseconds
Sentence: Are you on any drugs or getting any therapy?

Spans:
Span 7-8:  any => any
Span 3-4:  any => any
Span 4-5:  drugs => drug
Span 6-7:  getting => get-01
Span 5-6:  or => or
Span 1-2:  you => you

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),any,any,false), Span(6,7,List(1),getting,get-01,false), Span(5,6,List(2),or,or,false), Span(4,5,List(3),drugs,drug,false), Span(3,4,List(4),any,any,false), Span(1,2,List(5),you,you,false)),Map(2 -> or, 5 -> you, 1 -> get-01, 4 -> any, 0 -> any, 3 -> drug),Map(d -> drug, y -> you, g -> get-01, a -> any, a2 -> any, o -> or))),[Ljava.lang.String;@13ad5cd3,Annotation([Ljava.lang.String;@1c33c17b,[Ljava.lang.String;@5bf0fe62,[Ljava.lang.String;@1e097d59),Annotation([Ljava.lang.String;@673be18f,[Ljava.lang.String;@6581dc0a,[Ledu.cmu.lti.nlp.amr.Dependency;@39de3d36),Annotation([Ljava.lang.String;@6ce86ce1,[Ljava.lang.String;@54e7df6a,[Ljava.lang.String;@3fed2870),Annotation([Ljava.lang.String;@77128536,[Ljava.lang.String;@58326051,[Ledu.cmu.lti.nlp.amr.Entity;@32c4e8b2))
AMR:
(d / drug, mod, a2 / any)
(g / get-01, ARG1, y / you)
(g / get-01, ARG6, a / any)
(o / or, op, d / drug)
(o / or, op, g / get-01)

Decoded in 76,292 microseconds
Sentence: It might be an idea to talk to your school nurse or your GP and tell them what's going on.

Spans:
Span 14-15:  and => and
Span 19-20:  going => go-02
Span 4-5:  idea => idea
Span 0-1:  It => it
Span 11-12:  or => or
Span 9-10:  school => school
Span 6-7:  talk => talk-01
Span 15-16:  tell => tell-01

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),going,go-02,false), Span(15,16,List(1),tell,tell-01,false), Span(14,15,List(2),and,and,false), Span(11,12,List(3),or,or,false), Span(9,10,List(4),school,school,false), Span(6,7,List(5),talk,talk-01,false), Span(4,5,List(6),idea,idea,false), Span(0,1,List(7),It,it,false)),Map(2 -> and, 5 -> talk-01, 7 -> it, 1 -> tell-01, 4 -> school, 6 -> idea, 0 -> go-02, 3 -> or),Map(t -> tell-01, s -> school, g -> go-02, a -> and, i2 -> it, t2 -> talk-01, i -> idea, o -> or))),[Ljava.lang.String;@64bce832,Annotation([Ljava.lang.String;@764faa6,[Ljava.lang.String;@4c1f22f3,[Ljava.lang.String;@598bd2ba),Annotation([Ljava.lang.String;@5a755cc1,[Ljava.lang.String;@7ae42ce3,[Ledu.cmu.lti.nlp.amr.Dependency;@4f5991f6),Annotation([Ljava.lang.String;@484094a5,[Ljava.lang.String;@38234a38,[Ljava.lang.String;@63fbfaeb),Annotation([Ljava.lang.String;@602e0143,[Ljava.lang.String;@2c07545f,[Ledu.cmu.lti.nlp.amr.Entity;@e57b96d))
AMR:
(a / and, op, t / tell-01)
(a / and, op, t2 / talk-01)
(g / go-02, ARG1, i2 / it)
(t / tell-01, ARG1, g / go-02)
(t2 / talk-01, ARG0, i / idea)
(t2 / talk-01, ARG1, o / or)
(t2 / talk-01, ARG2, s / school)

Decoded in 258,369 microseconds
Sentence: Perhaps there's a teacher at school who you trust and could tell.

Spans:
Span 10-11:  and => and
Span 11-12:  could => possible
Span 6-7:  school => school
Span 12-13:  tell => tell-01
Span 9-10:  trust => trust-01
Span 8-9:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),tell,tell-01,false), Span(11,12,List(1),could,possible,false), Span(10,11,List(2),and,and,false), Span(9,10,List(3),trust,trust-01,false), Span(8,9,List(4),you,you,false), Span(6,7,List(5),school,school,false)),Map(2 -> and, 5 -> school, 1 -> possible, 4 -> you, 0 -> tell-01, 3 -> trust-01),Map(t -> tell-01, s -> school, y -> you, p -> possible, a -> and, t2 -> trust-01))),[Ljava.lang.String;@32c726ee,Annotation([Ljava.lang.String;@22f31dec,[Ljava.lang.String;@34c01041,[Ljava.lang.String;@76f4b65),Annotation([Ljava.lang.String;@c94fd30,[Ljava.lang.String;@36328d33,[Ledu.cmu.lti.nlp.amr.Dependency;@2c4d1ac),Annotation([Ljava.lang.String;@7f0d96f2,[Ljava.lang.String;@545b995e,[Ljava.lang.String;@76a2ddf3),Annotation([Ljava.lang.String;@524f3b3a,[Ljava.lang.String;@41e68d87,[Ledu.cmu.lti.nlp.amr.Entity;@49ff7d8c))
AMR:
(a / and, op, p / possible)
(a / and, op, t / tell-01)
(a / and, op, t2 / trust-01)
(t2 / trust-01, ARG0, y / you)
(t2 / trust-01, ARG1, s / school)

Decoded in 25,605 microseconds
Sentence: If you tell people they can help you,

Spans:
Span 5-6:  can => possible
Span 6-7:  help => help-01
Span 3-4:  people => people
Span 2-3:  tell => tell-01
Span 4-5:  they => they
Span 7-8:  you => you
Span 1-2:  you => you

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),you,you,false), Span(6,7,List(1),help,help-01,false), Span(5,6,List(2),can,possible,false), Span(4,5,List(3),they,they,false), Span(3,4,List(4),people,people,false), Span(2,3,List(5),tell,tell-01,false), Span(1,2,List(6),you,you,false)),Map(2 -> possible, 5 -> tell-01, 1 -> help-01, 4 -> people, 6 -> you, 0 -> you, 3 -> they),Map(h -> help-01, t -> they, p2 -> people, p -> possible, y -> you, t2 -> tell-01, y2 -> you))),[Ljava.lang.String;@29526c05,Annotation([Ljava.lang.String;@2ef14fe,[Ljava.lang.String;@77102b91,[Ljava.lang.String;@45312be2),Annotation([Ljava.lang.String;@7fb95505,[Ljava.lang.String;@58be6e8,[Ledu.cmu.lti.nlp.amr.Dependency;@7331196b),Annotation([Ljava.lang.String;@3f9342d4,[Ljava.lang.String;@ab7395e,[Ljava.lang.String;@50d13246),Annotation([Ljava.lang.String;@2bd08376,[Ljava.lang.String;@e70f13a,[Ledu.cmu.lti.nlp.amr.Entity;@3d3e5463))
AMR:
(h / help-01, ARG0, t / they)
(h / help-01, ARG1, y / you)
(p / possible, domain, h / help-01)
(t2 / tell-01, ARG0, y2 / you)
(t2 / tell-01, ARG1, h / help-01)
(t2 / tell-01, ARG2, p2 / people)

Decoded in 214,725 microseconds
Sentence: if you keep it bottled up inside it's likely to only get worse.

Spans:
Span 12-13:  get => get-04
Span 6-7:  inside => inside
Span 7-8:  it => it
Span 3-4:  it => it
Span 2-3:  keep => keep-05
Span 9-10:  likely => likely
Span 11-12:  only => only
Span 13-14:  worse => bad
Span 1-2:  you => you

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),worse,bad,false), Span(12,13,List(1),get,get-04,false), Span(11,12,List(2),only,only,false), Span(9,10,List(3),likely,likely,false), Span(7,8,List(4),it,it,false), Span(6,7,List(5),inside,inside,false), Span(3,4,List(6),it,it,false), Span(2,3,List(7),keep,keep-05,false), Span(1,2,List(8),you,you,false)),Map(2 -> only, 5 -> inside, 8 -> you, 7 -> keep-05, 1 -> get-04, 4 -> it, 6 -> it, 0 -> bad, 3 -> likely),Map(k -> keep-05, b -> bad, y -> you, i3 -> it, g -> get-04, i2 -> inside, i -> it, l -> likely, o -> only))),[Ljava.lang.String;@64a40280,Annotation([Ljava.lang.String;@4b40f651,[Ljava.lang.String;@42b02722,[Ljava.lang.String;@d62fe5b),Annotation([Ljava.lang.String;@49964d75,[Ljava.lang.String;@528c868,[Ledu.cmu.lti.nlp.amr.Dependency;@466276d8),Annotation([Ljava.lang.String;@5ce8d869,[Ljava.lang.String;@27eedb64,[Ljava.lang.String;@64c63c79),Annotation([Ljava.lang.String;@31c7528f,[Ljava.lang.String;@2b76ff4e,[Ledu.cmu.lti.nlp.amr.Entity;@7a1234bf))
AMR:
(g / get-04, ARG0, o / only)
(g / get-04, ARG1, l / likely)
(g / get-04, ARG6, b / bad)
(k / keep-05, ARG0, y / you)
(k / keep-05, ARG1, i2 / inside)
(k / keep-05, ARG6, i3 / it)
(l / likely, domain, i / it)
(l / likely, time, k / keep-05)

Decoded in 200,038 microseconds
Sentence: Trust me, it's better to get these things as early as possible rather than let them get even worse.

Spans:
Span 5-6:  better => good
Span 11-12:  early => early
Span 19-20:  even => even
Span 18-19:  get => get-04
Span 7-8:  get => get-04
Span 3-4:  it => it
Span 16-17:  let => let-01
Span 13-14:  possible => possible
Span 9-10:  things => thing
Span 20-21:  worse => bad

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),worse,bad,false), Span(19,20,List(1),even,even,false), Span(18,19,List(2),get,get-04,false), Span(16,17,List(3),let,let-01,false), Span(13,14,List(4),possible,possible,false), Span(11,12,List(5),early,early,false), Span(9,10,List(6),things,thing,false), Span(7,8,List(7),get,get-04,false), Span(5,6,List(8),better,good,false), Span(3,4,List(9),it,it,false)),Map(2 -> get-04, 5 -> early, 8 -> good, 7 -> get-04, 1 -> even, 4 -> possible, 6 -> thing, 9 -> it, 0 -> bad, 3 -> let-01),Map(e -> even, g3 -> good, t -> thing, b -> bad, e2 -> early, g2 -> get-04, p -> possible, g -> get-04, i -> it, l -> let-01))),[Ljava.lang.String;@2f62ea70,Annotation([Ljava.lang.String;@24ba9639,[Ljava.lang.String;@38aa816f,[Ljava.lang.String;@53f6fd09),Annotation([Ljava.lang.String;@6bffbc6d,[Ljava.lang.String;@1b84f475,[Ledu.cmu.lti.nlp.amr.Dependency;@7749bf93),Annotation([Ljava.lang.String;@13330ac6,[Ljava.lang.String;@539d019,[Ljava.lang.String;@39a2bb97),Annotation([Ljava.lang.String;@3ad2e17,[Ljava.lang.String;@8c3619e,[Ledu.cmu.lti.nlp.amr.Entity;@4331d187))
AMR:
(e2 / early, degree, p / possible)
(g / get-04, ARG1, b / bad)
(g2 / get-04, ARG0, i / it)
(g2 / get-04, ARG1, t / thing)
(g2 / get-04, ARG2, l / let-01)
(g2 / get-04, ARG6, g3 / good)
(g2 / get-04, manner, e2 / early)
(l / let-01, ARG0, e / even)
(l / let-01, ARG1, g / get-04)

Decoded in 269,585 microseconds
Sentence: Please don't do this,

Spans:
Span 3-4:  do => do-02
Span 1-2:  do => do-02
Span 4-5:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),this,this,false), Span(3,4,List(1),do,do-02,false), Span(1,2,List(2),do,do-02,false)),Map(2 -> do-02, 1 -> do-02, 0 -> this),Map(t -> this, d -> do-02, d2 -> do-02))),[Ljava.lang.String;@6f63b475,Annotation([Ljava.lang.String;@554e218,[Ljava.lang.String;@1608bcbd,[Ljava.lang.String;@5bf8fa12),Annotation([Ljava.lang.String;@29ca3d04,[Ljava.lang.String;@b2c5e07,[Ledu.cmu.lti.nlp.amr.Dependency;@5812f68b),Annotation([Ljava.lang.String;@4426bff1,[Ljava.lang.String;@3c7c886c,[Ljava.lang.String;@55493582),Annotation([Ljava.lang.String;@1a20270e,[Ljava.lang.String;@6b88ca8c,[Ledu.cmu.lti.nlp.amr.Entity;@336f1079))
AMR:
(d / do-02, ARG1, t / this)
(d2 / do-02, ARG1, d / do-02)

Decoded in 7,002 microseconds
Sentence: I'm 17 I started self harming last year, mainly cutting my arms, but I have stopped since the last few months,

Spans:
Span 2-3:  17 => 17
Span 13-14:  arms => arm
Span 15-16:  but => contrast-01
Span 11-12:  cutting => cut-02
Span 22-23:  few => few
Span 21-22:  last => last
Span 7-8:  last => last
Span 10-11:  mainly => main
Span 23-24:  months => (temporal-quantity :unit month)
Span 5-6:  self => self
Span 19-20:  since => since
Span 4-5:  started => start-01
Span 18-19:  stopped => stop-01
Span 8-9:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(1, 0),months,(temporal-quantity :unit month),false), Span(22,23,List(2),few,few,false), Span(21,22,List(3),last,last,false), Span(19,20,List(4),since,since,false), Span(18,19,List(5),stopped,stop-01,false), Span(15,16,List(6),but,contrast-01,false), Span(13,14,List(7),arms,arm,false), Span(11,12,List(8),cutting,cut-02,false), Span(10,11,List(9),mainly,main,false), Span(8,9,List(11, 10),year,(temporal-quantity :unit year),false), Span(7,8,List(12),last,last,false), Span(5,6,List(13),self,self,false), Span(4,5,List(14),started,start-01,false), Span(2,3,List(15),17,17,false)),Map(2 -> few, 5 -> stop-01, 12 -> last, 15 -> 17, 8 -> cut-02, 7 -> arm, 1 -> month, 4 -> since, 11 -> year, 14 -> start-01, 6 -> contrast-01, 0 -> temporal-quantity, 9 -> main, 3 -> last, 10 -> temporal-quantity, 13 -> self),Map(s2 -> stop-01, t -> temporal-quantity, m2 -> main, s -> since, s4 -> start-01, m -> month, 1 -> 17, y -> year, a -> arm, t2 -> temporal-quantity, l2 -> last, s3 -> self, c -> contrast-01, l -> last, f -> few, c2 -> cut-02))),[Ljava.lang.String;@2f16c6b3,Annotation([Ljava.lang.String;@34158c08,[Ljava.lang.String;@19e4fcac,[Ljava.lang.String;@52c3cb31),Annotation([Ljava.lang.String;@4b79ac84,[Ljava.lang.String;@53941c2f,[Ledu.cmu.lti.nlp.amr.Dependency;@6dab9b6d),Annotation([Ljava.lang.String;@21fd5faa,[Ljava.lang.String;@2766ca9d,[Ljava.lang.String;@5460cf3a),Annotation([Ljava.lang.String;@65a15628,[Ljava.lang.String;@2e6a5539,[Ledu.cmu.lti.nlp.amr.Entity;@3fc9504b))
AMR:
(c / contrast-01, ARG1, s4 / start-01)
(c / contrast-01, ARG2, s2 / stop-01)
(c / contrast-01, time, 1 / 17)
(c2 / cut-02, ARG1, a / arm)
(c2 / cut-02, ARG6, t2 / temporal-quantity)
(c2 / cut-02, manner, m2 / main)
(f / few, op, t / temporal-quantity)
(m / month, mod, l / last)
(s / since, op, t / temporal-quantity)
(s2 / stop-01, ARG1, c2 / cut-02)
(s2 / stop-01, time, s / since)
(s4 / start-01, ARG1, s3 / self)
(t / temporal-quantity, unit, m / month)
(t2 / temporal-quantity, mod, l2 / last)
(t2 / temporal-quantity, unit, y / year)

Decoded in 635,438 microseconds
Sentence: its hard but you can do it.

Spans:
Span 2-3:  but => contrast-01
Span 4-5:  can => possible
Span 5-6:  do => do-02
Span 1-2:  hard => hard-line
Span 6-7:  it => it
Span 3-4:  you => you

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),it,it,false), Span(5,6,List(1),do,do-02,false), Span(4,5,List(2),can,possible,false), Span(3,4,List(3),you,you,false), Span(2,3,List(4),but,contrast-01,false), Span(1,2,List(5),hard,hard-line,false)),Map(2 -> possible, 5 -> hard-line, 1 -> do-02, 4 -> contrast-01, 0 -> it, 3 -> you),Map(h -> hard-line, d -> do-02, y -> you, p -> possible, i -> it, c -> contrast-01))),[Ljava.lang.String;@6d025197,Annotation([Ljava.lang.String;@27d4a09,[Ljava.lang.String;@7e4204e2,[Ljava.lang.String;@b7c4869),Annotation([Ljava.lang.String;@740d2e78,[Ljava.lang.String;@1c481ff2,[Ledu.cmu.lti.nlp.amr.Dependency;@72437d8d),Annotation([Ljava.lang.String;@1b955cac,[Ljava.lang.String;@676cf48,[Ljava.lang.String;@5a1de7fb),Annotation([Ljava.lang.String;@335b5620,[Ljava.lang.String;@29a0cdb,[Ledu.cmu.lti.nlp.amr.Entity;@32a68f4f))
AMR:
(c / contrast-01, ARG1, h / hard-line)
(c / contrast-01, ARG6, y / you)
(d / do-02, ARG0, y / you)
(d / do-02, ARG1, i / it)
(p / possible, domain, d / do-02)

Decoded in 78,942 microseconds
Sentence: I feel so much happier, but seeing the scars is both a painful reminder of how I felt at that time, how strong my feelings were that I would want to do such a thing to myself!

Spans:
Span 11-12:  both => both
Span 6-7:  but => contrast-01
Span 33-34:  do => do-02
Span 18-19:  felt => feel-01
Span 3-4:  much => much
Span 2-3:  so => so
Span 24-25:  strong => strong
Span 34-35:  such => such
Span 21-22:  time => time
Span 31-32:  want => want-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),such,such,false), Span(33,34,List(1),do,do-02,false), Span(31,32,List(2),want,want-01,false), Span(24,25,List(3),strong,strong,false), Span(21,22,List(4),time,time,false), Span(18,19,List(5),felt,feel-01,false), Span(11,12,List(6),both,both,false), Span(6,7,List(7),but,contrast-01,false), Span(3,4,List(8),much,much,false), Span(2,3,List(9),so,so,false)),Map(2 -> want-01, 5 -> feel-01, 8 -> much, 7 -> contrast-01, 1 -> do-02, 4 -> time, 6 -> both, 9 -> so, 0 -> such, 3 -> strong),Map(w -> want-01, b -> both, t -> time, s2 -> strong, s -> such, m -> much, d -> do-02, s3 -> so, c -> contrast-01, f -> feel-01))),[Ljava.lang.String;@73194df,Annotation([Ljava.lang.String;@6eb2384f,[Ljava.lang.String;@3c9c0d96,[Ljava.lang.String;@3a4621bd),Annotation([Ljava.lang.String;@31dadd46,[Ljava.lang.String;@4ed5eb72,[Ledu.cmu.lti.nlp.amr.Dependency;@12f9af83),Annotation([Ljava.lang.String;@19b93fa8,[Ljava.lang.String;@7e6ef134,[Ljava.lang.String;@1f010bf0),Annotation([Ljava.lang.String;@40db2a24,[Ljava.lang.String;@10cf09e8,[Ledu.cmu.lti.nlp.amr.Entity;@1921ad94))
AMR:
(c / contrast-01, ARG1, m / much)
(d / do-02, ARG0, b / both)
(d / do-02, ARG1, s3 / so)
(f / feel-01, ARG0, t / time)
(f / feel-01, ARG1, s2 / strong)
(m / much, calendar, s3 / so)
(s / such, op, d / do-02)
(w / want-01, ARG1, d / do-02)
(w / want-01, ARG6, s2 / strong)

Decoded in 316,100 microseconds
Sentence: And, also strength, you can do it, I found salvation in poetry writing and keeping a journal,

Spans:
Span 2-3:  also => also
Span 16-17:  and => and
Span 6-7:  can => possible
Span 7-8:  do => do-02
Span 11-12:  found => find-01
Span 8-9:  it => it
Span 3-4:  strength => strength
Span 5-6:  you => you

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),and,and,false), Span(11,12,List(1),found,find-01,false), Span(8,9,List(2),it,it,false), Span(7,8,List(3),do,do-02,false), Span(6,7,List(4),can,possible,false), Span(5,6,List(5),you,you,false), Span(3,4,List(6),strength,strength,false), Span(2,3,List(7),also,also,false)),Map(2 -> it, 5 -> you, 7 -> also, 1 -> find-01, 4 -> possible, 6 -> strength, 0 -> and, 3 -> do-02),Map(s -> strength, d -> do-02, y -> you, p -> possible, a -> and, a2 -> also, i -> it, f -> find-01))),[Ljava.lang.String;@ee86bcb,Annotation([Ljava.lang.String;@177bea38,[Ljava.lang.String;@7f132176,[Ljava.lang.String;@6bca7e0d),Annotation([Ljava.lang.String;@2631f68c,[Ljava.lang.String;@6ed3f258,[Ledu.cmu.lti.nlp.amr.Dependency;@8ad6665),Annotation([Ljava.lang.String;@30af5b6b,[Ljava.lang.String;@19835e64,[Ljava.lang.String;@68b32e3e),Annotation([Ljava.lang.String;@bcef303,[Ljava.lang.String;@41709512,[Ledu.cmu.lti.nlp.amr.Entity;@42039326))
AMR:
(d / do-02, ARG0, y / you)
(d / do-02, ARG2, s / strength)
(d / do-02, ARG6, i / it)
(f / find-01, ARG1, a / and)
(f / find-01, ARG6, i / it)
(p / possible, domain, d / do-02)
(s / strength, calendar, a2 / also)

Decoded in 189,935 microseconds
Sentence: self harming is addictive, but you can overcome it,

Spans:
Span 5-6:  but => contrast-01
Span 7-8:  can => possible
Span 9-10:  it => it
Span 8-9:  overcome => overcome-01
Span 0-1:  self => self
Span 6-7:  you => you

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),it,it,false), Span(8,9,List(1),overcome,overcome-01,false), Span(7,8,List(2),can,possible,false), Span(6,7,List(3),you,you,false), Span(5,6,List(4),but,contrast-01,false), Span(0,1,List(5),self,self,false)),Map(2 -> possible, 5 -> self, 1 -> overcome-01, 4 -> contrast-01, 0 -> it, 3 -> you),Map(s -> self, y -> you, p -> possible, i -> it, c -> contrast-01, o -> overcome-01))),[Ljava.lang.String;@33308786,Annotation([Ljava.lang.String;@4f9a2c08,[Ljava.lang.String;@a87f8ec,[Ljava.lang.String;@5443d039),Annotation([Ljava.lang.String;@63787180,[Ljava.lang.String;@7d1cfb8b,[Ledu.cmu.lti.nlp.amr.Dependency;@48e92c5c),Annotation([Ljava.lang.String;@2e1ef60,[Ljava.lang.String;@22356acd,[Ljava.lang.String;@386f0da3),Annotation([Ljava.lang.String;@39655d3e,[Ljava.lang.String;@34f22f9d,[Ledu.cmu.lti.nlp.amr.Entity;@3d1848cc))
AMR:
(c / contrast-01, ARG0, s / self)
(c / contrast-01, ARG1, o / overcome-01)
(o / overcome-01, ARG0, y / you)
(o / overcome-01, ARG6, i / it)
(o / overcome-01, mod, p / possible)

Decoded in 143,414 microseconds
Sentence: remember your self harming does not define who you are.

Spans:
Span 2-3:  self => self
Span 8-9:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),you,you,false), Span(2,3,List(1),self,self,false)),Map(1 -> self, 0 -> you),Map(s -> self, y -> you))),[Ljava.lang.String;@7dda48d9,Annotation([Ljava.lang.String;@6e4566f1,[Ljava.lang.String;@4b6e2263,[Ljava.lang.String;@344f4dea),Annotation([Ljava.lang.String;@1b7c473a,[Ljava.lang.String;@5e4bd84a,[Ledu.cmu.lti.nlp.amr.Dependency;@648c94da),Annotation([Ljava.lang.String;@2a62b5bc,[Ljava.lang.String;@53de625d,[Ljava.lang.String;@535779e4),Annotation([Ljava.lang.String;@53fd0d10,[Ljava.lang.String;@6c0d9d86,[Ledu.cmu.lti.nlp.amr.Entity;@4ce1d6d0))
AMR:
(s / self, op, y / you)

Decoded in 10,490 microseconds
Sentence: You can overcome it.

Spans:
Span 1-2:  can => possible
Span 3-4:  it => it
Span 2-3:  overcome => overcome-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),it,it,false), Span(2,3,List(1),overcome,overcome-01,false), Span(1,2,List(2),can,possible,false)),Map(2 -> possible, 1 -> overcome-01, 0 -> it),Map(p -> possible, i -> it, o -> overcome-01))),[Ljava.lang.String;@24111ef1,Annotation([Ljava.lang.String;@1f3f02ee,[Ljava.lang.String;@1fde5d22,[Ljava.lang.String;@5dcb4f5f),Annotation([Ljava.lang.String;@71812481,[Ljava.lang.String;@16ce702d,[Ledu.cmu.lti.nlp.amr.Dependency;@7b94089b),Annotation([Ljava.lang.String;@7ca20101,[Ljava.lang.String;@47f9738,[Ljava.lang.String;@6155d082),Annotation([Ljava.lang.String;@3a5ecce3,[Ljava.lang.String;@561868a0,[Ledu.cmu.lti.nlp.amr.Entity;@2ea6e30c))
AMR:
(o / overcome-01, ARG1, i / it)
(o / overcome-01, mod, p / possible)

Decoded in 6,194 microseconds
Sentence: So I think Ive got a form of OCD because for the past year, I've found that everytime I go out, especially to Uni, I'm always checking my belongings to make sure I haven't lost or left anything.

NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 30-31:  always => always
Span 43-44:  anything => anything
Span 9-10:  because => cause-01
Span 24-25:  especially => especially
Span 6-7:  form => form
Span 17-18:  found => find-01
Span 21-22:  go => go-01
Span 42-43:  left => leave-01
Span 40-41:  lost => lose-02
Span 35-36:  make => make-01
Span 41-42:  or => or
Span 22-23:  out => out
Span 12-13:  past => past
Span 0-1:  So => so
Span 2-3:  think => think-01
Span 13-14:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),anything,anything,false), Span(42,43,List(1),left,leave-01,false), Span(41,42,List(2),or,or,false), Span(40,41,List(3),lost,lose-02,false), Span(35,36,List(4),make,make-01,false), Span(30,31,List(5),always,always,false), Span(24,25,List(6),especially,especially,false), Span(22,23,List(7),out,out,false), Span(21,22,List(8),go,go-01,false), Span(17,18,List(9),found,find-01,false), Span(13,14,List(11, 10),year,(temporal-quantity :unit year),false), Span(12,13,List(12),past,past,false), Span(9,10,List(13),because,cause-01,false), Span(6,7,List(14),form,form,false), Span(2,3,List(15),think,think-01,false), Span(0,1,List(16),So,so,false)),Map(2 -> or, 5 -> always, 12 -> past, 15 -> think-01, 8 -> go-01, 7 -> out, 1 -> leave-01, 4 -> make-01, 11 -> year, 14 -> form, 6 -> especially, 0 -> anything, 9 -> find-01, 16 -> so, 3 -> lose-02, 10 -> temporal-quantity, 13 -> cause-01),Map(e -> especially, t -> temporal-quantity, s -> so, m -> make-01, g -> go-01, y -> year, p -> past, a -> anything, o2 -> out, t2 -> think-01, l2 -> lose-02, a2 -> always, c -> cause-01, f2 -> form, l -> leave-01, f -> find-01, o -> or))),[Ljava.lang.String;@6138e79a,Annotation([Ljava.lang.String;@2dcd168a,[Ljava.lang.String;@388526fb,[Ljava.lang.String;@21a21c64),Annotation([Ljava.lang.String;@7803bfd,[Ljava.lang.String;@42bc14c1,[Ledu.cmu.lti.nlp.amr.Dependency;@531f4093),Annotation([Ljava.lang.String;@62ef27a8,[Ljava.lang.String;@6436a7db,[Ljava.lang.String;@460ebd80),Annotation([Ljava.lang.String;@6f3c660a,[Ljava.lang.String;@74f5ce22,[Ledu.cmu.lti.nlp.amr.Entity;@25aca718))
AMR:
(c / cause-01, ARG0, f / find-01)
(c / cause-01, ARG1, a2 / always)
(f / find-01, ARG1, g / go-01)
(f / find-01, ARG6, f2 / form)
(g / go-01, ARG1, t / temporal-quantity)
(g / go-01, ARG5, o2 / out)
(l / leave-01, ARG1, a / anything)
(l2 / lose-02, ARG1, m / make-01)
(m / make-01, ARG1, a2 / always)
(o / or, op, l / leave-01)
(o / or, op, l2 / lose-02)
(s / so, op, t2 / think-01)
(t / temporal-quantity, mod, p / past)
(t / temporal-quantity, unit, y / year)
(t2 / think-01, ARG0, e / especially)
(t2 / think-01, ARG1, c / cause-01)

Decoded in 1,357,929 microseconds
Sentence: I often have to check twice at one go, then after 30 seconds for some reason I cant resist checking again!

Spans:
Span 12-13:  30 => 30
Span 11-12:  after => after
Span 21-22:  again => again
Span 4-5:  check => check-07
Span 8-9:  go => go-01
Span 1-2:  often => often
Span 7-8:  one => 1
Span 16-17:  reason => reason-01
Span 19-20:  resist => resist-01
Span 15-16:  some => some
Span 10-11:  then => then

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),again,again,false), Span(19,20,List(1),resist,resist-01,false), Span(16,17,List(2),reason,reason-01,false), Span(15,16,List(3),some,some,false), Span(12,13,List(4),30,30,false), Span(11,12,List(5),after,after,false), Span(10,11,List(6),then,then,false), Span(8,9,List(7),go,go-01,false), Span(7,8,List(8),one,1,false), Span(4,5,List(9),check,check-07,false), Span(1,2,List(10),often,often,false)),Map(2 -> reason-01, 5 -> after, 8 -> 1, 7 -> go-01, 1 -> resist-01, 4 -> 30, 6 -> then, 9 -> check-07, 0 -> again, 10 -> often, 3 -> some),Map(t -> then, s -> some, 1 -> 1, g -> go-01, r2 -> reason-01, a -> again, a2 -> after, r -> resist-01, c -> check-07, o -> often, 3 -> 30))),[Ljava.lang.String;@16fdec90,Annotation([Ljava.lang.String;@1afdd473,[Ljava.lang.String;@40238dd0,[Ljava.lang.String;@7776ab),Annotation([Ljava.lang.String;@79179359,[Ljava.lang.String;@dbd8e44,[Ledu.cmu.lti.nlp.amr.Dependency;@51acdf2e),Annotation([Ljava.lang.String;@6a55299e,[Ljava.lang.String;@2f1de2d6,[Ljava.lang.String;@4eb386df),Annotation([Ljava.lang.String;@79517588,[Ljava.lang.String;@3a0baae5,[Ledu.cmu.lti.nlp.amr.Entity;@7ac0e420))
AMR:
(a / again, op, r / resist-01)
(a2 / after, mod, t / then)
(a2 / after, op, 3 / 30)
(a2 / after, op, r / resist-01)
(c / check-07, ARG0, o / often)
(c / check-07, ARG1, 1 / 1)
(c / check-07, time, a2 / after)
(g / go-01, ARG1, c / check-07)
(r / resist-01, ARG1, s / some)
(r2 / reason-01, ARG1, g / go-01)

Decoded in 297,663 microseconds
Sentence: Why is this!?

Spans:
Span 2-3:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),this,this,false)),Map(0 -> this),Map(t -> this))),[Ljava.lang.String;@289710d9,Annotation([Ljava.lang.String;@5a18cd76,[Ljava.lang.String;@3da30852,[Ljava.lang.String;@403f0a22),Annotation([Ljava.lang.String;@503ecb24,[Ljava.lang.String;@4c51cf28,[Ledu.cmu.lti.nlp.amr.Dependency;@6995bf68),Annotation([Ljava.lang.String;@5143c662,[Ljava.lang.String;@77825085,[Ljava.lang.String;@3568f9d2),Annotation([Ljava.lang.String;@71c27ee8,[Ljava.lang.String;@3e7dd664,[Ledu.cmu.lti.nlp.amr.Entity;@5b1ebf56))
AMR:


Decoded in 3,086 microseconds
Sentence: Am I going crazy or something?

Spans:
Span 3-4:  crazy => crazy
Span 2-3:  going => go-02
Span 4-5:  or => or

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),or,or,false), Span(3,4,List(1),crazy,crazy,false), Span(2,3,List(2),going,go-02,false)),Map(2 -> go-02, 1 -> crazy, 0 -> or),Map(g -> go-02, c -> crazy, o -> or))),[Ljava.lang.String;@294a6b8e,Annotation([Ljava.lang.String;@4b1d6571,[Ljava.lang.String;@1b835480,[Ljava.lang.String;@3549bca9),Annotation([Ljava.lang.String;@4f25b795,[Ljava.lang.String;@6fb365ed,[Ledu.cmu.lti.nlp.amr.Dependency;@6e950bcf),Annotation([Ljava.lang.String;@16414e40,[Ljava.lang.String;@74bada02,[Ljava.lang.String;@525575),Annotation([Ljava.lang.String;@46dffdc3,[Ljava.lang.String;@5a709816,[Ledu.cmu.lti.nlp.amr.Entity;@78383390))
AMR:
(g / go-02, ARG1, c / crazy)
(o / or, op, g / go-02)

Decoded in 24,869 microseconds
Sentence: It happens most often when I'm carrying many things, but that is rarely and even still daily I'm checking many times. And is this OCD to any extent?

NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 15-16:  and => and
Span 30-31:  any => any
Span 11-12:  but => contrast-01
Span 7-8:  carrying => carry-01
Span 18-19:  daily => daily
Span 16-17:  even => even
Span 31-32:  extent => extent
Span 0-1:  It => it
Span 22-23:  many => many
Span 8-9:  many => many
Span 2-3:  most => most
Span 3-4:  often => often
Span 17-18:  still => still
Span 9-10:  things => thing
Span 27-28:  this => this

 *** WARNING: The dependency tree seems broken.  I can't find the head of And in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of OCD in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of any in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of extent in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 32
Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),extent,extent,false), Span(30,31,List(1),any,any,false), Span(27,28,List(2),this,this,false), Span(22,23,List(3),many,many,false), Span(18,19,List(4),daily,daily,false), Span(17,18,List(5),still,still,false), Span(16,17,List(6),even,even,false), Span(15,16,List(7),and,and,false), Span(11,12,List(8),but,contrast-01,false), Span(9,10,List(9),things,thing,false), Span(8,9,List(10),many,many,false), Span(7,8,List(11),carrying,carry-01,false), Span(3,4,List(12),often,often,false), Span(2,3,List(13),most,most,false), Span(0,1,List(14),It,it,false)),Map(2 -> this, 5 -> still, 12 -> often, 8 -> contrast-01, 7 -> and, 1 -> any, 4 -> daily, 11 -> carry-01, 14 -> it, 6 -> even, 0 -> extent, 9 -> thing, 3 -> many, 10 -> many, 13 -> most),Map(m3 -> most, e -> extent, t -> this, m2 -> many, e2 -> even, s -> still, m -> many, d -> daily, a -> any, t2 -> thing, i -> it, a2 -> and, c -> contrast-01, o -> often, c2 -> carry-01))),[Ljava.lang.String;@6ad3381f,Annotation([Ljava.lang.String;@53dbe163,[Ljava.lang.String;@db57326,[Ljava.lang.String;@34a875b3),Annotation([Ljava.lang.String;@4748a0f9,[Ljava.lang.String;@4b14918a,[Ledu.cmu.lti.nlp.amr.Dependency;@6d1ef78d),Annotation([Ljava.lang.String;@1a6c1270,[Ljava.lang.String;@18a136ac,[Ljava.lang.String;@77d67cf3),Annotation([Ljava.lang.String;@6dee4f1b,[Ljava.lang.String;@176b3f44,[Ledu.cmu.lti.nlp.amr.Entity;@6ee6f53))
AMR:
(a / any, poss, m / many)
(a2 / and, op, a / any)
(a2 / and, op, e / extent)
(a2 / and, op, e2 / even)
(a2 / and, op, t / this)
(c / contrast-01, ARG1, a / any)
(c / contrast-01, ARG2, c2 / carry-01)
(c2 / carry-01, ARG0, s / still)
(c2 / carry-01, ARG1, t2 / thing)
(c2 / carry-01, frequency, o / often)
(d / daily, poss, t / this)
(o / often, degree, m3 / most)
(t / this, poss, i / it)
(t2 / thing, quant, m2 / many)

Decoded in 517,064 microseconds
Sentence: What can I do about this?

Spans:
Span 4-5:  about => about
Span 1-2:  can => possible
Span 3-4:  do => do-02
Span 5-6:  this => this

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),this,this,false), Span(4,5,List(1),about,about,false), Span(3,4,List(2),do,do-02,false), Span(1,2,List(3),can,possible,false)),Map(2 -> do-02, 1 -> about, 0 -> this, 3 -> possible),Map(t -> this, d -> do-02, p -> possible, a -> about))),[Ljava.lang.String;@421bba99,Annotation([Ljava.lang.String;@5d12a356,[Ljava.lang.String;@134d26af,[Ljava.lang.String;@66ac5762),Annotation([Ljava.lang.String;@797cf65c,[Ljava.lang.String;@31bcf236,[Ledu.cmu.lti.nlp.amr.Dependency;@4b3ed2f0),Annotation([Ljava.lang.String;@4fad9bb2,[Ljava.lang.String;@517d4a0d,[Ljava.lang.String;@7862f56),Annotation([Ljava.lang.String;@3a12c404,[Ljava.lang.String;@1941a8ff,[Ledu.cmu.lti.nlp.amr.Entity;@22d7b4f8))
AMR:
(d / do-02, ARG0, t / this)
(d / do-02, ARG1, a / about)
(p / possible, domain, d / do-02)

Decoded in 28,525 microseconds
Sentence: If I don't check, I get very very anxious, which does sort of go away after 15-30 mins, but often the anxiety is so much that I can't wait that long.

Spans:
Span 18-19:  after => after
Span 25-26:  anxiety => anxiety
Span 17-18:  away => away
Span 22-23:  but => contrast-01
Span 4-5:  check => check-07
Span 2-3:  do => do-02
Span 7-8:  get => get-04
Span 16-17:  go => go-01
Span 35-36:  long => long
Span 28-29:  much => much
Span 23-24:  often => often
Span 27-28:  so => so
Span 14-15:  sort => sort
Span 9-10:  very => very
Span 8-9:  very => very
Span 33-34:  wait => wait-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),long,long,false), Span(33,34,List(1),wait,wait-01,false), Span(28,29,List(2),much,much,false), Span(27,28,List(3),so,so,false), Span(25,26,List(4),anxiety,anxiety,false), Span(23,24,List(5),often,often,false), Span(22,23,List(6),but,contrast-01,false), Span(18,19,List(7),after,after,false), Span(17,18,List(8),away,away,false), Span(16,17,List(9),go,go-01,false), Span(14,15,List(10),sort,sort,false), Span(9,10,List(11),very,very,false), Span(8,9,List(12),very,very,false), Span(7,8,List(13),get,get-04,false), Span(4,5,List(14),check,check-07,false), Span(2,3,List(15),do,do-02,false)),Map(2 -> much, 5 -> often, 12 -> very, 15 -> do-02, 8 -> away, 7 -> after, 1 -> wait-01, 4 -> anxiety, 11 -> very, 14 -> check-07, 6 -> contrast-01, 0 -> long, 9 -> go-01, 3 -> so, 10 -> sort, 13 -> get-04),Map(w -> wait-01, v2 -> very, s2 -> sort, a3 -> away, s -> so, v -> very, d -> do-02, m -> much, g2 -> get-04, g -> go-01, a -> anxiety, a2 -> after, c -> contrast-01, l -> long, o -> often, c2 -> check-07))),[Ljava.lang.String;@149dd36b,Annotation([Ljava.lang.String;@38831718,[Ljava.lang.String;@2c1156a7,[Ljava.lang.String;@33fe57a9),Annotation([Ljava.lang.String;@4982cc36,[Ljava.lang.String;@691939c9,[Ledu.cmu.lti.nlp.amr.Dependency;@4f1bfe23),Annotation([Ljava.lang.String;@e19bb76,[Ljava.lang.String;@512535ff,[Ljava.lang.String;@71529963),Annotation([Ljava.lang.String;@61a88b8c,[Ljava.lang.String;@22295ec4,[Ledu.cmu.lti.nlp.amr.Entity;@5adb0db3))
AMR:
(c / contrast-01, ARG1, v / very)
(c / contrast-01, ARG2, m / much)
(c2 / check-07, ARG1, g2 / get-04)
(d / do-02, ARG1, c2 / check-07)
(g / go-01, ARG0, s2 / sort)
(g / go-01, ARG1, l / long)
(g / go-01, mod, a3 / away)
(g / go-01, time, a2 / after)
(g2 / get-04, ARG1, v / very)
(g2 / get-04, ARG6, v2 / very)
(m / much, domain, a / anxiety)
(m / much, domain, w / wait-01)
(o / often, quant, m / much)
(s / so, quant, m / much)
(w / wait-01, ARG1, l / long)

Decoded in 773,620 microseconds
Sentence: I feel if I lost my wallet or phone, then I'm doomed or so I feel.

Spans:
Span 4-5:  lost => lose-02
Span 14-15:  or => or
Span 7-8:  or => or
Span 8-9:  phone => phone
Span 15-16:  so => so
Span 10-11:  then => then

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),so,so,false), Span(14,15,List(1),or,or,false), Span(10,11,List(2),then,then,false), Span(8,9,List(3),phone,phone,false), Span(7,8,List(4),or,or,false), Span(4,5,List(5),lost,lose-02,false)),Map(2 -> then, 5 -> lose-02, 1 -> or, 4 -> or, 0 -> so, 3 -> phone),Map(t -> then, s -> so, p -> phone, o2 -> or, l -> lose-02, o -> or))),[Ljava.lang.String;@3f270e0a,Annotation([Ljava.lang.String;@1a760689,[Ljava.lang.String;@7241a47d,[Ljava.lang.String;@70f59913),Annotation([Ljava.lang.String;@77258e59,[Ljava.lang.String;@5dcd8c7a,[Ledu.cmu.lti.nlp.amr.Dependency;@2250b9f2),Annotation([Ljava.lang.String;@7e3181aa,[Ljava.lang.String;@253d9f73,[Ljava.lang.String;@142269f2),Annotation([Ljava.lang.String;@331acdad,[Ljava.lang.String;@41d426b5,[Ledu.cmu.lti.nlp.amr.Entity;@8dbfffb))
AMR:
(l / lose-02, ARG0, s / so)
(l / lose-02, ARG1, o2 / or)
(l / lose-02, ARG6, t / then)
(o / or, op, l / lose-02)
(o / or, op, p / phone)

Decoded in 98,165 microseconds
Sentence: I just wish I could go out without worrying every 2 mins whether I've left or lost something.

Spans:
Span 10-11:  2 => 2
Span 4-5:  could => possible
Span 9-10:  every => every
Span 5-6:  go => go-01
Span 1-2:  just => just
Span 15-16:  left => leave-01
Span 17-18:  lost => lose-02
Span 16-17:  or => or
Span 6-7:  out => out
Span 8-9:  worrying => worry-01

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),lost,lose-02,false), Span(16,17,List(1),or,or,false), Span(15,16,List(2),left,leave-01,false), Span(10,11,List(3),2,2,false), Span(9,10,List(4),every,every,false), Span(8,9,List(5),worrying,worry-01,false), Span(6,7,List(6),out,out,false), Span(5,6,List(7),go,go-01,false), Span(4,5,List(8),could,possible,false), Span(1,2,List(9),just,just,false)),Map(2 -> leave-01, 5 -> worry-01, 8 -> possible, 7 -> go-01, 1 -> or, 4 -> every, 6 -> out, 9 -> just, 0 -> lose-02, 3 -> 2),Map(w -> worry-01, e -> every, 2 -> 2, j -> just, p -> possible, g -> go-01, o2 -> out, l2 -> leave-01, l -> lose-02, o -> or))),[Ljava.lang.String;@f316aeb,Annotation([Ljava.lang.String;@6aa3a905,[Ljava.lang.String;@a22cb6a,[Ljava.lang.String;@5dd1c9f2),Annotation([Ljava.lang.String;@59b38691,[Ljava.lang.String;@2e2ff723,[Ledu.cmu.lti.nlp.amr.Dependency;@324a0017),Annotation([Ljava.lang.String;@6187d1f5,[Ljava.lang.String;@2445445a,[Ljava.lang.String;@7502291e),Annotation([Ljava.lang.String;@17aad511,[Ljava.lang.String;@487db668,[Ledu.cmu.lti.nlp.amr.Entity;@46944ca9))
AMR:
(e / every, calendar, 2 / 2)
(g / go-01, ARG1, w / worry-01)
(g / go-01, ARG5, o2 / out)
(g / go-01, ARG6, j / just)
(l / lose-02, ARG1, 2 / 2)
(o / or, op, l / lose-02)
(o / or, op, l2 / leave-01)
(p / possible, domain, g / go-01)
(w / worry-01, ARG1, l2 / leave-01)

Decoded in 376,608 microseconds
Sentence: I really dont know what to do, and am afraid of going to the GP.

Spans:
Span 8-9:  and => and
Span 6-7:  do => do-02
Span 12-13:  going => go-02
Span 3-4:  know => know-01
Span 1-2:  really => really

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),going,go-02,false), Span(8,9,List(1),and,and,false), Span(6,7,List(2),do,do-02,false), Span(3,4,List(3),know,know-01,false), Span(1,2,List(4),really,really,false)),Map(2 -> do-02, 1 -> and, 4 -> really, 0 -> go-02, 3 -> know-01),Map(k -> know-01, d -> do-02, g -> go-02, a -> and, r -> really))),[Ljava.lang.String;@22bac7bc,Annotation([Ljava.lang.String;@63798ca7,[Ljava.lang.String;@4612b856,[Ljava.lang.String;@22875539),Annotation([Ljava.lang.String;@5674e1f2,[Ljava.lang.String;@79c7532f,[Ledu.cmu.lti.nlp.amr.Dependency;@2a448449),Annotation([Ljava.lang.String;@32f232a5,[Ljava.lang.String;@43f82e78,[Ljava.lang.String;@e54303),Annotation([Ljava.lang.String;@e8df99a,[Ljava.lang.String;@2dc995f4,[Ledu.cmu.lti.nlp.amr.Entity;@2f40e5db))
AMR:
(a / and, op, k / know-01)
(d / do-02, ARG1, r / really)
(g / go-02, ARG1, k / know-01)
(k / know-01, ARG1, d / do-02)

Decoded in 85,718 microseconds
Sentence: They've probably never heard of some compulsion like this and I just dont know what to do

Spans:
Span 10-11:  and => and
Span 17-18:  do => do-02
Span 4-5:  heard => hear-01
Span 12-13:  just => just
Span 14-15:  know => know-01
Span 2-3:  probably => probable
Span 6-7:  some => some
Span 0-1:  They => they
Span 9-10:  this => this

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),do,do-02,false), Span(14,15,List(1),know,know-01,false), Span(12,13,List(2),just,just,false), Span(10,11,List(3),and,and,false), Span(9,10,List(4),this,this,false), Span(6,7,List(5),some,some,false), Span(4,5,List(6),heard,hear-01,false), Span(2,3,List(7),probably,probable,false), Span(0,1,List(8),They,they,false)),Map(2 -> just, 5 -> some, 8 -> they, 7 -> probable, 1 -> know-01, 4 -> this, 6 -> hear-01, 0 -> do-02, 3 -> and),Map(h -> hear-01, t -> this, k -> know-01, s -> some, j -> just, d -> do-02, p -> probable, a -> and, t2 -> they))),[Ljava.lang.String;@517566b,Annotation([Ljava.lang.String;@64b73e7a,[Ljava.lang.String;@530712d,[Ljava.lang.String;@2df6226d),Annotation([Ljava.lang.String;@12ed9db6,[Ljava.lang.String;@4ff4357f,[Ledu.cmu.lti.nlp.amr.Dependency;@49cb9cb5),Annotation([Ljava.lang.String;@55322aab,[Ljava.lang.String;@2b4c1d96,[Ljava.lang.String;@45fd9a4d),Annotation([Ljava.lang.String;@50468873,[Ljava.lang.String;@146587a2,[Ledu.cmu.lti.nlp.amr.Entity;@5f0e9815))
AMR:
(a / and, calendar, t / this)
(d / do-02, ARG0, a / and)
(d / do-02, ARG1, s / some)
(h / hear-01, ARG0, t2 / they)
(h / hear-01, ARG1, k / know-01)
(k / know-01, ARG1, d / do-02)
(k / know-01, frequency, j / just)
(p / probable, domain, t2 / they)

Decoded in 268,728 microseconds
Sentence: Do any of you have a similar 'ritual'?

Spans:
Span 1-2:  any => any
Span 3-4:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),you,you,false), Span(1,2,List(1),any,any,false)),Map(1 -> any, 0 -> you),Map(y -> you, a -> any))),[Ljava.lang.String;@76884e4b,Annotation([Ljava.lang.String;@126945f9,[Ljava.lang.String;@2a898881,[Ljava.lang.String;@16c63f5),Annotation([Ljava.lang.String;@35229f85,[Ljava.lang.String;@6d3c5255,[Ledu.cmu.lti.nlp.amr.Dependency;@b1712f3),Annotation([Ljava.lang.String;@6986bbaf,[Ljava.lang.String;@4879dfad,[Ljava.lang.String;@4758820d),Annotation([Ljava.lang.String;@74eb909f,[Ljava.lang.String;@28ec166e,[Ledu.cmu.lti.nlp.amr.Entity;@2eee3069))
AMR:
(a / any, calendar, y / you)

Decoded in 8,645 microseconds
Sentence: People would think I'm crazy, but it's very strangely difficult to get yourself out of this.

Spans:
Span 7-8:  but => contrast-01
Span 5-6:  crazy => crazy
Span 12-13:  difficult => difficult
Span 14-15:  get => get-04
Span 8-9:  it => it
Span 16-17:  out => out
Span 0-1:  People => "People's"
Span 2-3:  think => think-01
Span 18-19:  this => this
Span 10-11:  very => very

Langrangian relaxation converged after 89 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),this,this,false), Span(16,17,List(1),out,out,false), Span(14,15,List(2),get,get-04,false), Span(12,13,List(3),difficult,difficult,false), Span(10,11,List(4),very,very,false), Span(8,9,List(5),it,it,false), Span(7,8,List(6),but,contrast-01,false), Span(5,6,List(7),crazy,crazy,false), Span(2,3,List(8),think,think-01,false), Span(0,1,List(9),People,"People's",false)),Map(2 -> get-04, 5 -> it, 8 -> think-01, 7 -> crazy, 1 -> out, 4 -> very, 6 -> contrast-01, 9 -> "People's", 0 -> this, 3 -> difficult),Map(P -> "People's", t -> this, v -> very, d -> difficult, g -> get-04, t2 -> think-01, i -> it, c -> contrast-01, o -> out, c2 -> crazy))),[Ljava.lang.String;@2da59753,Annotation([Ljava.lang.String;@5629510,[Ljava.lang.String;@4df5bcb4,[Ljava.lang.String;@12c7a01b),Annotation([Ljava.lang.String;@13d9b21f,[Ljava.lang.String;@2826f61,[Ledu.cmu.lti.nlp.amr.Dependency;@62727399),Annotation([Ljava.lang.String;@4d9ac0b4,[Ljava.lang.String;@130dca52,[Ljava.lang.String;@2654635),Annotation([Ljava.lang.String;@737a135b,[Ljava.lang.String;@687ef2e0,[Ledu.cmu.lti.nlp.amr.Entity;@15dcfae7))
AMR:
(c / contrast-01, ARG1, c2 / crazy)
(c / contrast-01, ARG2, t2 / think-01)
(c / contrast-01, ARG6, i / it)
(d / difficult, degree, v / very)
(d / difficult, domain, g / get-04)
(d / difficult, domain, i / it)
(g / get-04, ARG1, t / this)
(g / get-04, ARG6, o / out)
(t2 / think-01, ARG1, P / "People's")

Decoded in 647,613 microseconds
Sentence: What advice could you give me?

Spans:
Span 1-2:  advice => advice
Span 2-3:  could => possible
Span 4-5:  give => give-01
Span 3-4:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),give,give-01,false), Span(3,4,List(1),you,you,false), Span(2,3,List(2),could,possible,false), Span(1,2,List(3),advice,advice,false)),Map(2 -> possible, 1 -> you, 0 -> give-01, 3 -> advice),Map(p -> possible, y -> you, g -> give-01, a -> advice))),[Ljava.lang.String;@3da05287,Annotation([Ljava.lang.String;@1e636ea3,[Ljava.lang.String;@115667d,[Ljava.lang.String;@736caf7a),Annotation([Ljava.lang.String;@4ce7fffa,[Ljava.lang.String;@497486b3,[Ledu.cmu.lti.nlp.amr.Dependency;@63f8276e),Annotation([Ljava.lang.String;@75f95314,[Ljava.lang.String;@6127a7e,[Ljava.lang.String;@6bbe2511),Annotation([Ljava.lang.String;@495fac5f,[Ljava.lang.String;@76012793,[Ledu.cmu.lti.nlp.amr.Entity;@635572a7))
AMR:
(g / give-01, ARG0, y / you)
(g / give-01, ARG1, a / advice)
(p / possible, domain, g / give-01)

Decoded in 10,543 microseconds
Sentence: I used to do this on my way to college-I had a list of items I knew I had on me and used to check compulsively on the bus.

Spans:
Span 23-24:  and => and
Span 30-31:  bus => bus
Span 26-27:  check => check-07
Span 9-10:  college => college
Span 3-4:  do => do-02
Span 16-17:  items => item
Span 18-19:  knew => know-01
Span 14-15:  list => list-01
Span 4-5:  this => this
Span 24-25:  used => use-01
Span 1-2:  used => use-01
Span 7-8:  way => way

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),bus,bus,false), Span(26,27,List(1),check,check-07,false), Span(24,25,List(2),used,use-01,false), Span(23,24,List(3),and,and,false), Span(18,19,List(4),knew,know-01,false), Span(16,17,List(5),items,item,false), Span(14,15,List(6),list,list-01,false), Span(9,10,List(7),college,college,false), Span(7,8,List(8),way,way,false), Span(4,5,List(9),this,this,false), Span(3,4,List(10),do,do-02,false), Span(1,2,List(11),used,use-01,false)),Map(2 -> use-01, 5 -> item, 8 -> way, 7 -> college, 1 -> check-07, 11 -> use-01, 4 -> know-01, 6 -> list-01, 9 -> this, 0 -> bus, 10 -> do-02, 3 -> and),Map(w -> way, t -> this, k -> know-01, b -> bus, u2 -> use-01, d -> do-02, a -> and, i -> item, l -> list-01, u -> use-01, c -> check-07, c2 -> college))),[Ljava.lang.String;@79d94571,Annotation([Ljava.lang.String;@4dd02341,[Ljava.lang.String;@3212a8d7,[Ljava.lang.String;@7a1a3478),Annotation([Ljava.lang.String;@495b0487,[Ljava.lang.String;@55dfcc6,[Ledu.cmu.lti.nlp.amr.Dependency;@222eb8aa),Annotation([Ljava.lang.String;@93cf163,[Ljava.lang.String;@1852a3ff,[Ljava.lang.String;@7203c7ff),Annotation([Ljava.lang.String;@25bfcafd,[Ljava.lang.String;@4b6690c0,[Ledu.cmu.lti.nlp.amr.Entity;@46268f08))
AMR:
(c / check-07, ARG1, l / list-01)
(c / check-07, ARG2, b / bus)
(d / do-02, ARG1, t / this)
(d / do-02, ARG2, c2 / college)
(k / know-01, ARG1, i / item)
(l / list-01, ARG1, i / item)
(u / use-01, ARG0, c2 / college)
(u / use-01, ARG1, a / and)
(u / use-01, ARG2, c / check-07)
(u2 / use-01, ARG1, w / way)
(u2 / use-01, ARG2, d / do-02)

Decoded in 443,652 microseconds
Sentence: I now have more severe anxiety and think this was just a warning sign so just try and wean yourself out of the habit while it's relatively fresh-definitely visit your doctor but also tell yourself not to keep checking these things (easier said than done I know).

Spans:
Span 35-36:  also => also
Span 17-18:  and => and
Span 6-7:  and => and
Span 5-6:  anxiety => anxiety
Span 34-35:  but => contrast-01
Span 48-49:  done => do-02
Span 28-29:  fresh => fresh
Span 25-26:  it => it
Span 15-16:  just => just
Span 10-11:  just => just
Span 40-41:  keep => keep-05
Span 50-51:  know => know-01
Span 3-4:  more => more
Span 1-2:  now => now
Span 20-21:  out => out
Span 46-47:  said => say-01
Span 4-5:  severe => severe
Span 13-14:  sign => sign-02
Span 14-15:  so => so
Span 36-37:  tell => tell-01
Span 43-44:  things => thing
Span 7-8:  think => think-01
Span 8-9:  this => this
Span 16-17:  try => try-01
Span 31-32:  visit => visit-01
Span 12-13:  warning => warn-01

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(50,51,List(0),know,know-01,false), Span(48,49,List(1),done,do-02,false), Span(46,47,List(2),said,say-01,false), Span(43,44,List(3),things,thing,false), Span(40,41,List(4),keep,keep-05,false), Span(36,37,List(5),tell,tell-01,false), Span(35,36,List(6),also,also,false), Span(34,35,List(7),but,contrast-01,false), Span(31,32,List(8),visit,visit-01,false), Span(28,29,List(9),fresh,fresh,false), Span(25,26,List(10),it,it,false), Span(20,21,List(11),out,out,false), Span(17,18,List(12),and,and,false), Span(16,17,List(13),try,try-01,false), Span(15,16,List(14),just,just,false), Span(14,15,List(15),so,so,false), Span(13,14,List(16),sign,sign-02,false), Span(12,13,List(17),warning,warn-01,false), Span(10,11,List(18),just,just,false), Span(8,9,List(19),this,this,false), Span(7,8,List(20),think,think-01,false), Span(6,7,List(21),and,and,false), Span(5,6,List(22),anxiety,anxiety,false), Span(4,5,List(23),severe,severe,false), Span(3,4,List(24),more,more,false), Span(1,2,List(25),now,now,false)),Map(2 -> say-01, 5 -> tell-01, 12 -> and, 8 -> visit-01, 15 -> so, 21 -> and, 18 -> just, 24 -> more, 7 -> contrast-01, 1 -> do-02, 17 -> warn-01, 23 -> severe, 4 -> keep-05, 11 -> out, 14 -> just, 20 -> think-01, 6 -> also, 9 -> fresh, 0 -> know-01, 22 -> anxiety, 16 -> sign-02, 19 -> this, 10 -> it, 3 -> thing, 25 -> now, 13 -> try-01),Map(n -> now, w -> warn-01, k2 -> keep-05, t4 -> this, s2 -> so, t -> thing, k -> know-01, j -> just, a3 -> and, j2 -> just, s -> say-01, s4 -> severe, v -> visit-01, d -> do-02, m -> more, t3 -> try-01, a -> also, t2 -> tell-01, t5 -> think-01, a2 -> and, i -> it, c -> contrast-01, s3 -> sign-02, f -> fresh, o -> out, a4 -> anxiety))),[Ljava.lang.String;@2a76840c,Annotation([Ljava.lang.String;@71454b9d,[Ljava.lang.String;@eda25e5,[Ljava.lang.String;@7cf6a5f9),Annotation([Ljava.lang.String;@623e088f,[Ljava.lang.String;@39fcbef6,[Ledu.cmu.lti.nlp.amr.Dependency;@66565121),Annotation([Ljava.lang.String;@2fc6f97f,[Ljava.lang.String;@3d2ee678,[Ljava.lang.String;@6179e425),Annotation([Ljava.lang.String;@35f26e72,[Ljava.lang.String;@2d6764b2,[Ledu.cmu.lti.nlp.amr.Entity;@67304a40))
AMR:
(a2 / and, op, t2 / tell-01)
(a2 / and, op, t3 / try-01)
(a3 / and, op, a4 / anxiety)
(a3 / and, op, t5 / think-01)
(a4 / anxiety, mod, s4 / severe)
(c / contrast-01, ARG1, v / visit-01)
(d / do-02, ARG1, k / know-01)
(f / fresh, domain, i / it)
(j / just, degree, s2 / so)
(k / know-01, ARG1, a2 / and)
(k2 / keep-05, ARG1, t / thing)
(s / say-01, ARG1, d / do-02)
(s3 / sign-02, ARG1, w / warn-01)
(s4 / severe, degree, m / more)
(t2 / tell-01, ARG1, k2 / keep-05)
(t2 / tell-01, ARG6, a / also)
(t2 / tell-01, manner, c / contrast-01)
(t3 / try-01, ARG1, n / now)
(t3 / try-01, time, j / just)
(t4 / this, mod, s3 / sign-02)
(t4 / this, time, j / just)
(t4 / this, time, j2 / just)
(t5 / think-01, ARG1, t4 / this)
(v / visit-01, ARG1, i / it)
(w / warn-01, ARG1, o / out)

Decoded in 2,187,596 microseconds
Sentence: Doctors will have seen much worse cases so don't worry about that!

Spans:
Span 11-12:  about => about
Span 6-7:  cases => case
Span 8-9:  do => do-02
Span 4-5:  much => much
Span 3-4:  seen => see-01
Span 7-8:  so => so
Span 5-6:  worse => bad

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),about,about,false), Span(8,9,List(1),do,do-02,false), Span(7,8,List(2),so,so,false), Span(6,7,List(3),cases,case,false), Span(5,6,List(4),worse,bad,false), Span(4,5,List(5),much,much,false), Span(3,4,List(6),seen,see-01,false)),Map(2 -> so, 5 -> much, 1 -> do-02, 4 -> bad, 6 -> see-01, 0 -> about, 3 -> case),Map(s2 -> see-01, b -> bad, s -> so, m -> much, d -> do-02, a -> about, c -> case))),[Ljava.lang.String;@49c6c24f,Annotation([Ljava.lang.String;@6fe1b4fb,[Ljava.lang.String;@79351f41,[Ljava.lang.String;@1c32386d),Annotation([Ljava.lang.String;@6399551e,[Ljava.lang.String;@13d73fa,[Ledu.cmu.lti.nlp.amr.Dependency;@5023bb8b),Annotation([Ljava.lang.String;@5d5f10b2,[Ljava.lang.String;@74c79fa2,[Ljava.lang.String;@1e0f9063),Annotation([Ljava.lang.String;@53bd8fca,[Ljava.lang.String;@7642df8f,[Ledu.cmu.lti.nlp.amr.Entity;@3e30646a))
AMR:
(c / case, mod, b / bad)
(d / do-02, ARG1, s2 / see-01)
(d / do-02, ARG6, a / about)
(s / so, op, d / do-02)
(s2 / see-01, ARG1, c / case)
(s2 / see-01, ARG6, m / much)

Decoded in 99,841 microseconds
Sentence: I did about OCD in psycology today :P

NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 2-3:  about => about
Span 6-7:  today => today

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),today,today,false), Span(2,3,List(1),about,about,false)),Map(1 -> about, 0 -> today),Map(t -> today, a -> about))),[Ljava.lang.String;@5cde6747,Annotation([Ljava.lang.String;@63a270c9,[Ljava.lang.String;@37c7595,[Ljava.lang.String;@3ed242a4),Annotation([Ljava.lang.String;@1199fe66,[Ljava.lang.String;@614df0a4,[Ledu.cmu.lti.nlp.amr.Dependency;@1fdf1c5),Annotation([Ljava.lang.String;@2d96543c,[Ljava.lang.String;@73a2e526,[Ljava.lang.String;@7d64e326),Annotation([Ljava.lang.String;@13f95696,[Ljava.lang.String;@cd1d761,[Ledu.cmu.lti.nlp.amr.Entity;@68be8808))
AMR:
(t / today, location, a / about)

Decoded in 7,251 microseconds
Sentence: To get rid of it, one way could be just to avoid the compulsive act so don't check to see whether you have lost something, just leave it (:

Spans:
Span 15-16:  act => act-02
Span 12-13:  avoid => avoid-01
Span 19-20:  check => check-07
Span 8-9:  could => possible
Span 17-18:  do => do-02
Span 1-2:  get => get-04
Span 30-31:  it => it
Span 4-5:  it => it
Span 28-29:  just => just
Span 10-11:  just => just
Span 29-30:  leave => leave-01
Span 25-26:  lost => lose-02
Span 6-7:  one => 1
Span 21-22:  see => see-01
Span 16-17:  so => so
Span 7-8:  way => way
Span 23-24:  you => you

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),it,it,false), Span(29,30,List(1),leave,leave-01,false), Span(28,29,List(2),just,just,false), Span(25,26,List(3),lost,lose-02,false), Span(23,24,List(4),you,you,false), Span(21,22,List(5),see,see-01,false), Span(19,20,List(6),check,check-07,false), Span(17,18,List(7),do,do-02,false), Span(16,17,List(8),so,so,false), Span(15,16,List(9),act,act-02,false), Span(12,13,List(10),avoid,avoid-01,false), Span(10,11,List(11),just,just,false), Span(8,9,List(12),could,possible,false), Span(7,8,List(13),way,way,false), Span(6,7,List(14),one,1,false), Span(4,5,List(15),it,it,false), Span(1,2,List(16),get,get-04,false)),Map(2 -> just, 5 -> see-01, 12 -> possible, 15 -> it, 8 -> so, 7 -> do-02, 1 -> leave-01, 4 -> you, 11 -> just, 14 -> 1, 6 -> check-07, 0 -> it, 9 -> act-02, 16 -> get-04, 3 -> lose-02, 10 -> avoid-01, 13 -> way),Map(w -> way, s2 -> so, j -> just, s -> see-01, j2 -> just, d -> do-02, 1 -> 1, g -> get-04, y -> you, p -> possible, a -> act-02, i2 -> it, l2 -> lose-02, i -> it, a2 -> avoid-01, c -> check-07, l -> leave-01))),[Ljava.lang.String;@32193bea,Annotation([Ljava.lang.String;@6b8d96d9,[Ljava.lang.String;@69653e16,[Ljava.lang.String;@758705fa),Annotation([Ljava.lang.String;@ebaa6cb,[Ljava.lang.String;@906d29b,[Ledu.cmu.lti.nlp.amr.Dependency;@49d3c823),Annotation([Ljava.lang.String;@436bc36,[Ljava.lang.String;@5fe1ce85,[Ljava.lang.String;@604c5de8),Annotation([Ljava.lang.String;@37091312,[Ljava.lang.String;@66fdec9,[Ledu.cmu.lti.nlp.amr.Entity;@57abad67))
AMR:
(a / act-02, ARG1, d / do-02)
(a2 / avoid-01, ARG0, w / way)
(a2 / avoid-01, ARG1, a / act-02)
(a2 / avoid-01, degree, j2 / just)
(c / check-07, ARG0, d / do-02)
(c / check-07, ARG1, s / see-01)
(d / do-02, ARG1, s2 / so)
(g / get-04, ARG1, y / you)
(l / leave-01, ARG0, y / you)
(l / leave-01, ARG1, i2 / it)
(l2 / lose-02, ARG0, y / you)
(l2 / lose-02, ARG1, j / just)
(p / possible, domain, w / way)
(s / see-01, ARG0, i / it)
(s / see-01, ARG1, l2 / lose-02)
(w / way, quant, 1 / 1)

Decoded in 1,114,807 microseconds
Sentence: Even though your anxiety levels would increase for a duration, they will gradualy decrease so hopefully, overtime your OCD will disappear (:

NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 3-4:  anxiety => anxiety
Span 14-15:  decrease => decrease-01
Span 22-23:  disappear => disappear-01
Span 6-7:  increase => increase-01
Span 4-5:  levels => level
Span 15-16:  so => so
Span 11-12:  they => they

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),disappear,disappear-01,false), Span(15,16,List(1),so,so,false), Span(14,15,List(2),decrease,decrease-01,false), Span(11,12,List(3),they,they,false), Span(6,7,List(4),increase,increase-01,false), Span(4,5,List(5),levels,level,false), Span(3,4,List(6),anxiety,anxiety,false)),Map(2 -> decrease-01, 5 -> level, 1 -> so, 4 -> increase-01, 6 -> anxiety, 0 -> disappear-01, 3 -> they),Map(t -> they, s -> so, d -> disappear-01, a -> anxiety, d2 -> decrease-01, i -> increase-01, l -> level))),[Ljava.lang.String;@550a1967,Annotation([Ljava.lang.String;@2a640157,[Ljava.lang.String;@52851b44,[Ljava.lang.String;@584f54e6),Annotation([Ljava.lang.String;@5d8bafa9,[Ljava.lang.String;@576f63f6,[Ledu.cmu.lti.nlp.amr.Dependency;@2dca0d64),Annotation([Ljava.lang.String;@f80945f,[Ljava.lang.String;@ff684e1,[Ljava.lang.String;@23aa363a),Annotation([Ljava.lang.String;@5ef6ae06,[Ljava.lang.String;@55dfebeb,[Ledu.cmu.lti.nlp.amr.Entity;@6e35bc3d))
AMR:
(d / disappear-01, ARG1, d2 / decrease-01)
(d / disappear-01, time, i / increase-01)
(d2 / decrease-01, ARG0, t / they)
(d2 / decrease-01, ARG1, s / so)
(i / increase-01, ARG1, l / level)
(l / level, mod, a / anxiety)

Decoded in 149,886 microseconds
Sentence: To me that just sounds like you being overly anxious, as opposed to having really bad OCD.

NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 16-17:  bad => bad
Span 14-15:  having => have-03
Span 3-4:  just => just
Span 12-13:  opposed => oppose-01
Span 15-16:  really => really
Span 6-7:  you => you

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),bad,bad,false), Span(15,16,List(1),really,really,false), Span(14,15,List(2),having,have-03,false), Span(12,13,List(3),opposed,oppose-01,false), Span(6,7,List(4),you,you,false), Span(3,4,List(5),just,just,false)),Map(2 -> have-03, 5 -> just, 1 -> really, 4 -> you, 0 -> bad, 3 -> oppose-01),Map(h -> have-03, b -> bad, j -> just, y -> you, r -> really, o -> oppose-01))),[Ljava.lang.String;@1cdc4c27,Annotation([Ljava.lang.String;@77b14724,[Ljava.lang.String;@5d9b7a8a,[Ljava.lang.String;@1e8ce150),Annotation([Ljava.lang.String;@604f2bd2,[Ljava.lang.String;@1d3ac898,[Ledu.cmu.lti.nlp.amr.Dependency;@1b73be9f),Annotation([Ljava.lang.String;@628c4ac0,[Ljava.lang.String;@7b84fcf8,[Ljava.lang.String;@30b19518),Annotation([Ljava.lang.String;@363042d7,[Ljava.lang.String;@366ac49b,[Ledu.cmu.lti.nlp.amr.Entity;@6ad59d92))
AMR:
(h / have-03, ARG1, j / just)
(h / have-03, ARG6, r / really)
(o / oppose-01, ARG0, b / bad)
(o / oppose-01, ARG1, h / have-03)
(o / oppose-01, ARG6, y / you)

Decoded in 106,662 microseconds
Sentence: I am very obsessional to the point where I get up 20 times a night to check the locks in my house are all locked a particular way.

Spans:
Span 11-12:  20 => 20
Span 23-24:  all => all
Span 16-17:  check => check-07
Span 9-10:  get => get-04
Span 21-22:  house => house
Span 14-15:  night => night
Span 26-27:  particular => particular
Span 6-7:  point => point
Span 2-3:  very => very
Span 27-28:  way => way

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),way,way,false), Span(26,27,List(1),particular,particular,false), Span(23,24,List(2),all,all,false), Span(21,22,List(3),house,house,false), Span(16,17,List(4),check,check-07,false), Span(14,15,List(5),night,night,false), Span(11,12,List(6),20,20,false), Span(9,10,List(7),get,get-04,false), Span(6,7,List(8),point,point,false), Span(2,3,List(9),very,very,false)),Map(2 -> all, 5 -> night, 8 -> point, 7 -> get-04, 1 -> particular, 4 -> check-07, 6 -> 20, 9 -> very, 0 -> way, 3 -> house),Map(n -> night, w -> way, 2 -> 20, h -> house, p2 -> point, v -> very, g -> get-04, p -> particular, a -> all, c -> check-07))),[Ljava.lang.String;@56f0cc85,Annotation([Ljava.lang.String;@62e20a76,[Ljava.lang.String;@2cc44ad,[Ljava.lang.String;@44b3606b),Annotation([Ljava.lang.String;@1477089c,[Ljava.lang.String;@663411de,[Ledu.cmu.lti.nlp.amr.Dependency;@63dd899),Annotation([Ljava.lang.String;@59d2400d,[Ljava.lang.String;@75cd8043,[Ljava.lang.String;@33b1c5c5),Annotation([Ljava.lang.String;@5b202a3a,[Ljava.lang.String;@10b9db7b,[Ledu.cmu.lti.nlp.amr.Entity;@9ef8eb7))
AMR:
(c / check-07, ARG0, n / night)
(c / check-07, ARG1, w / way)
(c / check-07, ARG2, h / house)
(g / get-04, ARG0, n / night)
(g / get-04, ARG1, p2 / point)
(g / get-04, ARG2, v / very)
(g / get-04, ARG6, 2 / 20)
(v / very, mod, a / all)
(w / way, mod, p / particular)

Decoded in 339,638 microseconds
Sentence: Sometimes although I know they're locked I'm convinced they're not.

Spans:
Span 9-10:  convinced => convince-01
Span 3-4:  know => know-01
Span 10-11:  they => they
Span 4-5:  they => they

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),they,they,false), Span(9,10,List(1),convinced,convince-01,false), Span(4,5,List(2),they,they,false), Span(3,4,List(3),know,know-01,false)),Map(2 -> they, 1 -> convince-01, 0 -> they, 3 -> know-01),Map(k -> know-01, t -> they, t2 -> they, c -> convince-01))),[Ljava.lang.String;@34cdeda2,Annotation([Ljava.lang.String;@6ee660fb,[Ljava.lang.String;@305a0c5f,[Ljava.lang.String;@4535b6d5),Annotation([Ljava.lang.String;@1ecee32c,[Ljava.lang.String;@4372b9b6,[Ledu.cmu.lti.nlp.amr.Dependency;@232a7d73),Annotation([Ljava.lang.String;@4b41e4dd,[Ljava.lang.String;@22ffa91a,[Ljava.lang.String;@74960bfa),Annotation([Ljava.lang.String;@42721fe,[Ljava.lang.String;@40844aab,[Ledu.cmu.lti.nlp.amr.Entity;@1f6c9cd8))
AMR:
(c / convince-01, ARG1, t / they)
(k / know-01, ARG1, c / convince-01)
(k / know-01, ARG6, t2 / they)

Decoded in 79,875 microseconds
Sentence: I think it becomes a real problem when the obsession starts to really interrupt your everyday routine.

Spans:
Span 3-4:  becomes => become-01
Span 2-3:  it => it
Span 6-7:  problem => problem
Span 5-6:  real => real
Span 12-13:  really => really
Span 16-17:  routine => routine
Span 10-11:  starts => start-01
Span 1-2:  think => think-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),routine,routine,false), Span(12,13,List(1),really,really,false), Span(10,11,List(2),starts,start-01,false), Span(6,7,List(3),problem,problem,false), Span(5,6,List(4),real,real,false), Span(3,4,List(5),becomes,become-01,false), Span(2,3,List(6),it,it,false), Span(1,2,List(7),think,think-01,false)),Map(2 -> start-01, 5 -> become-01, 7 -> think-01, 1 -> really, 4 -> real, 6 -> it, 0 -> routine, 3 -> problem),Map(r3 -> real, t -> think-01, b -> become-01, s -> start-01, p -> problem, r2 -> really, i -> it, r -> routine))),[Ljava.lang.String;@5b619d14,Annotation([Ljava.lang.String;@66746f57,[Ljava.lang.String;@447a020,[Ljava.lang.String;@7f36662c),Annotation([Ljava.lang.String;@28e8dde3,[Ljava.lang.String;@6d23017e,[Ledu.cmu.lti.nlp.amr.Dependency;@54dcfa5a),Annotation([Ljava.lang.String;@1817f1eb,[Ljava.lang.String;@767e20cf,[Ljava.lang.String;@3a3e78f),Annotation([Ljava.lang.String;@301ec38b,[Ljava.lang.String;@17a1e4ca,[Ledu.cmu.lti.nlp.amr.Entity;@10ded6a9))
AMR:
(b / become-01, ARG0, i / it)
(b / become-01, ARG1, p / problem)
(p / problem, mod, r3 / real)
(s / start-01, ARG1, r / routine)
(s / start-01, ARG2, p / problem)
(s / start-01, ARG6, r2 / really)
(t / think-01, ARG1, b / become-01)

Decoded in 150,281 microseconds
Sentence: You definitely aren't crazy though don't worry and your GP will be understanding of the issue I'm sure.

Spans:
Span 9-10:  and => and
Span 4-5:  crazy => crazy
Span 6-7:  do => do-02
Span 17-18:  issue => issue
Span 14-15:  understanding => understand-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),issue,issue,false), Span(14,15,List(1),understanding,understand-01,false), Span(9,10,List(2),and,and,false), Span(6,7,List(3),do,do-02,false), Span(4,5,List(4),crazy,crazy,false)),Map(2 -> and, 1 -> understand-01, 4 -> crazy, 0 -> issue, 3 -> do-02),Map(d -> do-02, a -> and, i -> issue, c -> crazy, u -> understand-01))),[Ljava.lang.String;@c5dc4a2,Annotation([Ljava.lang.String;@4a194c39,[Ljava.lang.String;@52066604,[Ljava.lang.String;@340b9973),Annotation([Ljava.lang.String;@56113384,[Ljava.lang.String;@5669c5fb,[Ledu.cmu.lti.nlp.amr.Dependency;@373ebf74),Annotation([Ljava.lang.String;@5f9678e1,[Ljava.lang.String;@c4ed84,[Ljava.lang.String;@189aa67a),Annotation([Ljava.lang.String;@5a9d6f02,[Ljava.lang.String;@362045c0,[Ledu.cmu.lti.nlp.amr.Entity;@112f364d))
AMR:
(a / and, op, c / crazy)
(a / and, op, u / understand-01)
(d / do-02, ARG1, c / crazy)
(u / understand-01, ARG1, i / issue)

Decoded in 77,123 microseconds
Sentence: I go to therapy (for other reasons also) and they have encouraged me to pick a number of times to check, obviously that is less than 20, and to stick to it and cut down that way.

Spans:
Span 29-30:  20 => 20
Span 8-9:  also => also
Span 36-37:  and => and
Span 31-32:  and => and
Span 10-11:  and => and
Span 22-23:  check => check-07
Span 37-38:  cut => cut-02
Span 38-39:  down => down
Span 13-14:  encouraged => encourage-01
Span 1-2:  go => go-01
Span 35-36:  it => it
Span 27-28:  less => less
Span 18-19:  number => number
Span 24-25:  obviously => obvious
Span 6-7:  other => other
Span 16-17:  pick => pick-04
Span 7-8:  reasons => reason-01
Span 11-12:  they => they
Span 40-41:  way => way

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),way,way,false), Span(38,39,List(1),down,down,false), Span(37,38,List(2),cut,cut-02,false), Span(36,37,List(3),and,and,false), Span(35,36,List(4),it,it,false), Span(31,32,List(5),and,and,false), Span(29,30,List(6),20,20,false), Span(27,28,List(7),less,less,false), Span(24,25,List(8),obviously,obvious,false), Span(22,23,List(9),check,check-07,false), Span(18,19,List(10),number,number,false), Span(16,17,List(11),pick,pick-04,false), Span(13,14,List(12),encouraged,encourage-01,false), Span(11,12,List(13),they,they,false), Span(10,11,List(14),and,and,false), Span(8,9,List(15),also,also,false), Span(7,8,List(16),reasons,reason-01,false), Span(6,7,List(17),other,other,false), Span(1,2,List(18),go,go-01,false)),Map(2 -> cut-02, 5 -> and, 12 -> encourage-01, 15 -> also, 8 -> obvious, 18 -> go-01, 7 -> less, 17 -> other, 1 -> down, 4 -> it, 11 -> pick-04, 14 -> and, 6 -> 20, 0 -> way, 9 -> check-07, 16 -> reason-01, 3 -> and, 10 -> number, 13 -> they),Map(e -> encourage-01, w -> way, n -> number, 2 -> 20, t -> they, a3 -> and, d -> down, g -> go-01, p -> pick-04, a -> and, o2 -> other, r -> reason-01, i -> it, a2 -> and, c -> cut-02, l -> less, o -> obvious, c2 -> check-07, a4 -> also))),[Ljava.lang.String;@5ccbeb64,Annotation([Ljava.lang.String;@6d9f7a80,[Ljava.lang.String;@59252cb6,[Ljava.lang.String;@31d0e481),Annotation([Ljava.lang.String;@3243b914,[Ljava.lang.String;@241e8ea6,[Ledu.cmu.lti.nlp.amr.Dependency;@542e560f),Annotation([Ljava.lang.String;@626c44e7,[Ljava.lang.String;@4dc8caa7,[Ljava.lang.String;@1d730606),Annotation([Ljava.lang.String;@3bcbb589,[Ljava.lang.String;@3b00856b,[Ledu.cmu.lti.nlp.amr.Entity;@3016fd5e))
AMR:
(a / and, op, c / cut-02)
(a / and, op, i / it)
(a2 / and, op, c / cut-02)
(a2 / and, op, c2 / check-07)
(a3 / and, op, e / encourage-01)
(a3 / and, op, g / go-01)
(c / cut-02, ARG1, w / way)
(c / cut-02, ARG6, d / down)
(c2 / check-07, ARG1, o / obvious)
(e / encourage-01, ARG0, t / they)
(e / encourage-01, ARG1, a2 / and)
(e / encourage-01, ARG2, p / pick-04)
(g / go-01, ARG1, r / reason-01)
(p / pick-04, ARG1, n / number)
(r / reason-01, ARG0, l / less)
(r / reason-01, ARG1, 2 / 20)
(r / reason-01, ARG6, a4 / also)
(r / reason-01, mod, o2 / other)

Decoded in 1,281,253 microseconds
Sentence: I think the idea is to teach me, I'm still 'okay' if I check 5 times or 20 times.

Spans:
Span 21-22:  20 => 20
Span 18-19:  5 => 5
Span 17-18:  check => check-07
Span 3-4:  idea => idea
Span 20-21:  or => or
Span 11-12:  still => still
Span 1-2:  think => think-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),20,20,false), Span(20,21,List(1),or,or,false), Span(18,19,List(2),5,5,false), Span(17,18,List(3),check,check-07,false), Span(11,12,List(4),still,still,false), Span(3,4,List(5),idea,idea,false), Span(1,2,List(6),think,think-01,false)),Map(2 -> 5, 5 -> idea, 1 -> or, 4 -> still, 6 -> think-01, 0 -> 20, 3 -> check-07),Map(2 -> 20, t -> think-01, 5 -> 5, s -> still, i -> idea, c -> check-07, o -> or))),[Ljava.lang.String;@35d08e6c,Annotation([Ljava.lang.String;@53d102a2,[Ljava.lang.String;@6c45ee6e,[Ljava.lang.String;@6b3e12b5),Annotation([Ljava.lang.String;@5aac4250,[Ljava.lang.String;@1338fb5,[Ledu.cmu.lti.nlp.amr.Dependency;@42463763),Annotation([Ljava.lang.String;@59f63e24,[Ljava.lang.String;@61f05988,[Ljava.lang.String;@7ca33c24),Annotation([Ljava.lang.String;@fade1fc,[Ljava.lang.String;@67c2e933,[Ledu.cmu.lti.nlp.amr.Entity;@41dd05a))
AMR:
(2 / 20, op, t / think-01)
(c / check-07, ARG1, o / or)
(c / check-07, ARG6, s / still)
(t / think-01, ARG0, 5 / 5)
(t / think-01, ARG1, i / idea)
(t / think-01, ARG6, s / still)

Decoded in 102,199 microseconds
Sentence: So far I have been a lot better, I think there is definitely hope of improvement for anyone that wants it.

Spans:
Span 18-19:  anyone => anyone
Span 7-8:  better => good
Span 1-2:  far => far
Span 14-15:  hope => hope-01
Span 16-17:  improvement => improve-01
Span 21-22:  it => it
Span 0-1:  So => so
Span 10-11:  think => think-01
Span 20-21:  wants => want-01

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),it,it,false), Span(20,21,List(1),wants,want-01,false), Span(18,19,List(2),anyone,anyone,false), Span(16,17,List(3),improvement,improve-01,false), Span(14,15,List(4),hope,hope-01,false), Span(10,11,List(5),think,think-01,false), Span(7,8,List(6),better,good,false), Span(1,2,List(7),far,far,false), Span(0,1,List(8),So,so,false)),Map(2 -> anyone, 5 -> think-01, 8 -> so, 7 -> far, 1 -> want-01, 4 -> hope-01, 6 -> good, 0 -> it, 3 -> improve-01),Map(w -> want-01, h -> hope-01, t -> think-01, s -> so, g -> good, a -> anyone, i2 -> improve-01, i -> it, f -> far))),[Ljava.lang.String;@613a8ee1,Annotation([Ljava.lang.String;@178213b,[Ljava.lang.String;@7103cb56,[Ljava.lang.String;@1b765a2c),Annotation([Ljava.lang.String;@2e8e8225,[Ljava.lang.String;@6ebf0f36,[Ledu.cmu.lti.nlp.amr.Dependency;@18920cc),Annotation([Ljava.lang.String;@2807bdeb,[Ljava.lang.String;@72c28d64,[Ljava.lang.String;@6492fab5),Annotation([Ljava.lang.String;@2c5529ab,[Ljava.lang.String;@39a8312f,[Ledu.cmu.lti.nlp.amr.Entity;@5f6722d3))
AMR:
(f / far, mod, s / so)
(h / hope-01, ARG1, i2 / improve-01)
(i2 / improve-01, ARG1, a / anyone)
(t / think-01, ARG0, s / so)
(t / think-01, ARG1, h / hope-01)
(t / think-01, ARG6, g / good)
(w / want-01, ARG0, h / hope-01)
(w / want-01, ARG1, i / it)

Decoded in 370,683 microseconds
Sentence: Usually I'm pretty calm about things and like to take things as they come and not to worry too much.

Spans:
Span 5-6:  about => about
Span 15-16:  and => and
Span 7-8:  and => and
Span 14-15:  come => come-01
Span 20-21:  much => much
Span 10-11:  take => take-01
Span 13-14:  they => they
Span 11-12:  things => thing
Span 6-7:  things => thing
Span 19-20:  too => too

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),much,much,false), Span(19,20,List(1),too,too,false), Span(15,16,List(2),and,and,false), Span(14,15,List(3),come,come-01,false), Span(13,14,List(4),they,they,false), Span(11,12,List(5),things,thing,false), Span(10,11,List(6),take,take-01,false), Span(7,8,List(7),and,and,false), Span(6,7,List(8),things,thing,false), Span(5,6,List(9),about,about,false)),Map(2 -> and, 5 -> thing, 8 -> thing, 7 -> and, 1 -> too, 4 -> they, 6 -> take-01, 9 -> about, 0 -> much, 3 -> come-01),Map(t4 -> take-01, t -> too, a3 -> about, m -> much, t3 -> thing, a -> and, t2 -> they, t5 -> thing, a2 -> and, c -> come-01))),[Ljava.lang.String;@2c532cd8,Annotation([Ljava.lang.String;@294e5088,[Ljava.lang.String;@51972dc7,[Ljava.lang.String;@3700ec9c),Annotation([Ljava.lang.String;@2002348,[Ljava.lang.String;@5911e990,[Ledu.cmu.lti.nlp.amr.Dependency;@31000e60),Annotation([Ljava.lang.String;@1d470d0,[Ljava.lang.String;@24d09c1,[Ljava.lang.String;@54c62d71),Annotation([Ljava.lang.String;@65045a87,[Ljava.lang.String;@47f4e407,[Ledu.cmu.lti.nlp.amr.Entity;@2d1dee39))
AMR:
(a / and, op, c / come-01)
(a / and, op, t4 / take-01)
(a2 / and, op, t4 / take-01)
(a3 / about, op, t5 / thing)
(c / come-01, ARG0, t2 / they)
(c / come-01, ARG1, t / too)
(m / much, degree, t / too)
(t4 / take-01, ARG0, t5 / thing)
(t4 / take-01, ARG1, t3 / thing)

Decoded in 193,509 microseconds
Sentence: However, over the last month or two I've found myself becoming really anxious about things, and I'm not talking about a mere out of the blue feeling of nervousness.

Spans:
Span 23-24:  about => about
Span 15-16:  about => about
Span 18-19:  and => and
Span 12-13:  becoming => become-01
Span 30-31:  feeling => feel-01
Span 10-11:  found => find-01
Span 4-5:  last => last
Span 5-6:  month => (temporal-quantity :unit month)
Span 6-7:  or => or
Span 26-27:  out => out
Span 2-3:  over => over
Span 13-14:  really => really
Span 16-17:  things => thing
Span 7-8:  two => 2

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),feeling,feel-01,false), Span(26,27,List(1),out,out,false), Span(23,24,List(2),about,about,false), Span(18,19,List(3),and,and,false), Span(16,17,List(4),things,thing,false), Span(15,16,List(5),about,about,false), Span(13,14,List(6),really,really,false), Span(12,13,List(7),becoming,become-01,false), Span(10,11,List(8),found,find-01,false), Span(7,8,List(9),two,2,false), Span(6,7,List(10),or,or,false), Span(5,6,List(12, 11),month,(temporal-quantity :unit month),false), Span(4,5,List(13),last,last,false), Span(2,3,List(14),over,over,false)),Map(2 -> about, 5 -> about, 12 -> month, 8 -> find-01, 7 -> become-01, 1 -> out, 4 -> thing, 11 -> temporal-quantity, 14 -> over, 6 -> really, 0 -> feel-01, 9 -> 2, 3 -> and, 10 -> or, 13 -> last),Map(2 -> 2, t -> thing, b -> become-01, o3 -> over, a3 -> about, m -> month, a -> about, o2 -> or, t2 -> temporal-quantity, a2 -> and, r -> really, l -> last, f2 -> find-01, f -> feel-01, o -> out))),[Ljava.lang.String;@48d5f34e,Annotation([Ljava.lang.String;@fc258b1,[Ljava.lang.String;@6ff65192,[Ljava.lang.String;@2dd80673),Annotation([Ljava.lang.String;@4af0df05,[Ljava.lang.String;@57ea113a,[Ledu.cmu.lti.nlp.amr.Dependency;@acdb094),Annotation([Ljava.lang.String;@674bd420,[Ljava.lang.String;@2b0f373b,[Ljava.lang.String;@2ceb80a1),Annotation([Ljava.lang.String;@4b45dcb8,[Ljava.lang.String;@7216fb24,[Ledu.cmu.lti.nlp.amr.Entity;@2072acb2))
AMR:
(a / about, op, o / out)
(a2 / and, op, f2 / find-01)
(a3 / about, op, t / thing)
(b / become-01, ARG1, t / thing)
(b / become-01, time, o3 / over)
(f / feel-01, ARG1, o / out)
(f2 / find-01, ARG0, r / really)
(f2 / find-01, ARG1, b / become-01)
(f2 / find-01, ARG6, a / about)
(m / month, mod, l / last)
(o2 / or, op, 2 / 2)
(o2 / or, op, t2 / temporal-quantity)
(o3 / over, op, t2 / temporal-quantity)
(t2 / temporal-quantity, unit, m / month)

Decoded in 513,357 microseconds
Sentence: I have begun to feel irrationally panicky about a variety of things which beforehand wouldn't worry me too much or even cross my mind as something to cause alarm bells to ring in my head.

Spans:
Span 7-8:  about => about
Span 29-30:  alarm => alarm-01
Span 2-3:  begun => begin-01
Span 28-29:  cause => cause-01
Span 22-23:  cross => cross-02
Span 21-22:  even => even
Span 35-36:  head => head-01
Span 24-25:  mind => mind
Span 19-20:  much => much
Span 20-21:  or => or
Span 11-12:  things => thing
Span 18-19:  too => too
Span 9-10:  variety => variety

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),head,head-01,false), Span(29,30,List(1),alarm,alarm-01,false), Span(28,29,List(2),cause,cause-01,false), Span(24,25,List(3),mind,mind,false), Span(22,23,List(4),cross,cross-02,false), Span(21,22,List(5),even,even,false), Span(20,21,List(6),or,or,false), Span(19,20,List(7),much,much,false), Span(18,19,List(8),too,too,false), Span(11,12,List(9),things,thing,false), Span(9,10,List(10),variety,variety,false), Span(7,8,List(11),about,about,false), Span(2,3,List(12),begun,begin-01,false)),Map(2 -> cause-01, 5 -> even, 12 -> begin-01, 8 -> too, 7 -> much, 1 -> alarm-01, 4 -> cross-02, 11 -> about, 6 -> or, 0 -> head-01, 9 -> thing, 3 -> mind, 10 -> variety),Map(e -> even, h -> head-01, t -> too, b -> begin-01, m2 -> much, v -> variety, m -> mind, a -> alarm-01, t2 -> thing, a2 -> about, c -> cause-01, o -> or, c2 -> cross-02))),[Ljava.lang.String;@50ecde95,Annotation([Ljava.lang.String;@35a9782c,[Ljava.lang.String;@70a36a66,[Ljava.lang.String;@45815ffc),Annotation([Ljava.lang.String;@732f29af,[Ljava.lang.String;@d3957fe,[Ledu.cmu.lti.nlp.amr.Dependency;@6622fc65),Annotation([Ljava.lang.String;@299321e2,[Ljava.lang.String;@23fb172e,[Ljava.lang.String;@64ba3208),Annotation([Ljava.lang.String;@158a3b2e,[Ljava.lang.String;@25a6944c,[Ledu.cmu.lti.nlp.amr.Entity;@5e1fa5b1))
AMR:
(a / alarm-01, ARG1, a2 / about)
(a2 / about, op, v / variety)
(b / begin-01, ARG1, a2 / about)
(c / cause-01, ARG0, m / mind)
(c / cause-01, ARG1, a / alarm-01)
(c2 / cross-02, ARG0, t2 / thing)
(c2 / cross-02, ARG1, m / mind)
(c2 / cross-02, manner, e / even)
(h / head-01, ARG1, t2 / thing)
(o / or, op, c2 / cross-02)
(o / or, op, m2 / much)
(t / too, quant, m2 / much)

Decoded in 427,423 microseconds
Sentence: I'm not sure if it's the change in lifestyle (going from care-free student to unemployed graduate) that is causing this or if it's a sign of other issues, but it's beginning to bug me as it's affecting my confidence and happiness.

Spans:
Span 46-47:  affecting => affect-01
Span 49-50:  and => and
Span 39-40:  beginning => begin-01
Span 41-42:  bug => bug
Span 36-37:  but => contrast-01
Span 24-25:  causing => cause-01
Span 8-9:  change => change-01
Span 48-49:  confidence => confidence
Span 16-17:  free => free
Span 12-13:  going => go-02
Span 20-21:  graduate => graduate-01
Span 50-51:  happiness => happiness
Span 34-35:  issues => issue
Span 44-45:  it => it
Span 37-38:  it => it
Span 28-29:  it => it
Span 5-6:  it => it
Span 26-27:  or => or
Span 33-34:  other => other
Span 31-32:  sign => sign-02
Span 17-18:  student => (person :ARG0-of study-01)
Span 25-26:  this => this

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(50,51,List(0),happiness,happiness,false), Span(49,50,List(1),and,and,false), Span(48,49,List(2),confidence,confidence,false), Span(46,47,List(3),affecting,affect-01,false), Span(44,45,List(4),it,it,false), Span(41,42,List(5),bug,bug,false), Span(39,40,List(6),beginning,begin-01,false), Span(37,38,List(7),it,it,false), Span(36,37,List(8),but,contrast-01,false), Span(34,35,List(9),issues,issue,false), Span(33,34,List(10),other,other,false), Span(31,32,List(11),sign,sign-02,false), Span(28,29,List(12),it,it,false), Span(26,27,List(13),or,or,false), Span(25,26,List(14),this,this,false), Span(24,25,List(15),causing,cause-01,false), Span(20,21,List(16),graduate,graduate-01,false), Span(17,18,List(18, 17),student,(person :ARG0-of study-01),false), Span(16,17,List(19),free,free,false), Span(12,13,List(20),going,go-02,false), Span(8,9,List(21),change,change-01,false), Span(5,6,List(22),it,it,false)),Map(2 -> confidence, 5 -> bug, 12 -> it, 15 -> cause-01, 8 -> contrast-01, 21 -> change-01, 18 -> study-01, 7 -> it, 17 -> person, 1 -> and, 4 -> it, 11 -> sign-02, 14 -> this, 20 -> go-02, 6 -> begin-01, 22 -> it, 0 -> happiness, 9 -> issue, 16 -> graduate-01, 19 -> free, 3 -> affect-01, 10 -> other, 13 -> or),Map(h -> happiness, i4 -> it, s2 -> study-01, t -> this, b -> bug, b2 -> begin-01, c4 -> change-01, s -> sign-02, g2 -> go-02, i3 -> issue, p -> person, g -> graduate-01, c3 -> cause-01, a -> and, o2 -> or, i2 -> it, i5 -> it, a2 -> affect-01, i -> it, c -> confidence, f -> free, o -> other, c2 -> contrast-01))),[Ljava.lang.String;@6b00f608,Annotation([Ljava.lang.String;@2f17e30d,[Ljava.lang.String;@3e821657,[Ljava.lang.String;@1d131e1b),Annotation([Ljava.lang.String;@71cf1b07,[Ljava.lang.String;@615091b8,[Ledu.cmu.lti.nlp.amr.Dependency;@4fce136b),Annotation([Ljava.lang.String;@4aa83f4f,[Ljava.lang.String;@43b6123e,[Ljava.lang.String;@260e86a1),Annotation([Ljava.lang.String;@19648c40,[Ljava.lang.String;@12bd8a64,[Ledu.cmu.lti.nlp.amr.Entity;@61e94def))
AMR:
(a / and, op, h / happiness)
(a2 / affect-01, ARG0, i / it)
(a2 / affect-01, ARG1, a / and)
(a2 / affect-01, ARG6, c / confidence)
(b2 / begin-01, ARG0, i2 / it)
(b2 / begin-01, ARG1, b / bug)
(b2 / begin-01, ARG6, a2 / affect-01)
(c2 / contrast-01, ARG1, i3 / issue)
(c2 / contrast-01, ARG2, b2 / begin-01)
(c3 / cause-01, ARG0, i5 / it)
(c3 / cause-01, ARG1, t / this)
(c4 / change-01, ARG1, i4 / it)
(g2 / go-02, ARG0, p / person)
(g2 / go-02, ARG1, c3 / cause-01)
(i3 / issue, mod, o / other)
(o2 / or, op, c4 / change-01)
(o2 / or, op, s / sign-02)
(p / person, mod, f / free)
(s / sign-02, ARG1, i3 / issue)
(s2 / study-01, ARG0, p / person)
(s2 / study-01, ARG1, b2 / begin-01)
(s2 / study-01, ARG2, g / graduate-01)

Decoded in 2,227,387 microseconds
Sentence: I've spoken to a few people about it including my parents but they all think the same: that I'm going through a random phase and that I should hold off taking action until it is clear that it is a serious problem

Spans:
Span 7-8:  about => about
Span 34-35:  action => action
Span 14-15:  all => all
Span 27-28:  and => and
Span 12-13:  but => contrast-01
Span 38-39:  clear => clear
Span 5-6:  few => few
Span 22-23:  going => go-02
Span 31-32:  hold => hold-04
Span 9-10:  including => include-91
Span 40-41:  it => it
Span 36-37:  it => it
Span 8-9:  it => it
Span 32-33:  off => off
Span 11-12:  parents => parent
Span 6-7:  people => people
Span 26-27:  phase => phase
Span 44-45:  problem => problem
Span 25-26:  random => random
Span 17-18:  same => same-41
Span 43-44:  serious => serious
Span 30-31:  should => recommend-01
Span 2-3:  spoken => speak-01
Span 33-34:  taking => take-01
Span 13-14:  they => they
Span 15-16:  think => think-01
Span 23-24:  through => through
Span 35-36:  until => until

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),problem,problem,false), Span(43,44,List(1),serious,serious,false), Span(40,41,List(2),it,it,false), Span(38,39,List(3),clear,clear,false), Span(36,37,List(4),it,it,false), Span(35,36,List(5),until,until,false), Span(34,35,List(6),action,action,false), Span(33,34,List(7),taking,take-01,false), Span(32,33,List(8),off,off,false), Span(31,32,List(9),hold,hold-04,false), Span(30,31,List(10),should,recommend-01,false), Span(27,28,List(11),and,and,false), Span(26,27,List(12),phase,phase,false), Span(25,26,List(13),random,random,false), Span(23,24,List(14),through,through,false), Span(22,23,List(15),going,go-02,false), Span(17,18,List(16),same,same-41,false), Span(15,16,List(17),think,think-01,false), Span(14,15,List(18),all,all,false), Span(13,14,List(19),they,they,false), Span(12,13,List(20),but,contrast-01,false), Span(11,12,List(21),parents,parent,false), Span(9,10,List(22),including,include-91,false), Span(8,9,List(23),it,it,false), Span(7,8,List(24),about,about,false), Span(6,7,List(25),people,people,false), Span(5,6,List(26),few,few,false), Span(2,3,List(27),spoken,speak-01,false)),Map(2 -> it, 5 -> until, 27 -> speak-01, 12 -> phase, 8 -> off, 15 -> go-02, 21 -> parent, 18 -> all, 24 -> about, 7 -> take-01, 1 -> serious, 17 -> think-01, 23 -> it, 26 -> few, 4 -> it, 11 -> and, 14 -> through, 20 -> contrast-01, 6 -> action, 9 -> hold-04, 0 -> problem, 22 -> include-91, 16 -> same-41, 19 -> they, 10 -> recommend-01, 3 -> clear, 25 -> people, 13 -> random),Map(h -> hold-04, t4 -> they, i4 -> it, s2 -> same-41, t -> take-01, p2 -> phase, a3 -> all, s -> serious, t3 -> think-01, i3 -> include-91, r2 -> random, p -> problem, g -> go-02, a -> action, p4 -> people, i2 -> it, t2 -> through, a2 -> and, r -> recommend-01, i -> it, c -> clear, s3 -> speak-01, u -> until, f -> few, o -> off, p3 -> parent, c2 -> contrast-01, a4 -> about))),[Ljava.lang.String;@3300f4fd,Annotation([Ljava.lang.String;@ebb6851,[Ljava.lang.String;@70ab2d48,[Ljava.lang.String;@5b068087),Annotation([Ljava.lang.String;@6f152006,[Ljava.lang.String;@3a393455,[Ledu.cmu.lti.nlp.amr.Dependency;@13518f37),Annotation([Ljava.lang.String;@7cbc3762,[Ljava.lang.String;@3a6f2de3,[Ljava.lang.String;@49872d67),Annotation([Ljava.lang.String;@56303b57,[Ljava.lang.String;@4b2a01d4,[Ledu.cmu.lti.nlp.amr.Entity;@8692d67))
AMR:
(a2 / and, op, g / go-02)
(a2 / and, op, h / hold-04)
(a4 / about, op, i3 / include-91)
(c / clear, domain, i2 / it)
(c2 / contrast-01, ARG1, g / go-02)
(c2 / contrast-01, ARG2, t3 / think-01)
(c2 / contrast-01, ARG6, i3 / include-91)
(g / go-02, ARG1, p / problem)
(g / go-02, ARG2, t2 / through)
(h / hold-04, ARG1, r2 / random)
(h / hold-04, ARG2, t / take-01)
(h / hold-04, ARG6, o / off)
(i3 / include-91, ARG0, i4 / it)
(i3 / include-91, ARG1, p3 / parent)
(p / problem, mod, s / serious)
(p4 / people, quant, f / few)
(r / recommend-01, ARG1, h / hold-04)
(s2 / same-41, ARG1, i / it)
(s3 / speak-01, ARG1, p4 / people)
(s3 / speak-01, ARG2, i3 / include-91)
(t / take-01, ARG1, a / action)
(t / take-01, ARG6, u / until)
(t2 / through, op, p2 / phase)
(t3 / think-01, ARG0, t4 / they)
(t3 / think-01, ARG1, s2 / same-41)
(t3 / think-01, ARG6, a3 / all)
(u / until, op, c / clear)

Decoded in 2,857,360 microseconds
Sentence: So was wondering what's the best thing to do?

Spans:
Span 9-10:  do => do-02
Span 0-1:  So => so
Span 2-3:  wondering => wonder-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),do,do-02,false), Span(2,3,List(1),wondering,wonder-01,false), Span(0,1,List(2),So,so,false)),Map(2 -> so, 1 -> wonder-01, 0 -> do-02),Map(w -> wonder-01, s -> so, d -> do-02))),[Ljava.lang.String;@78f5c518,Annotation([Ljava.lang.String;@2f48b3d2,[Ljava.lang.String;@34f7234e,[Ljava.lang.String;@753432a2),Annotation([Ljava.lang.String;@23bff419,[Ljava.lang.String;@4983159f,[Ledu.cmu.lti.nlp.amr.Dependency;@44e3a2b2),Annotation([Ljava.lang.String;@101639ae,[Ljava.lang.String;@4c550889,[Ljava.lang.String;@1d2bd371),Annotation([Ljava.lang.String;@44040454,[Ljava.lang.String;@65fe9e33,[Ledu.cmu.lti.nlp.amr.Entity;@18bc345))
AMR:
(d / do-02, ARG1, w / wonder-01)
(w / wonder-01, ARG1, s / so)

Decoded in 12,425 microseconds
Sentence: Speak to a doctor about it and see if anti-anxiety pills could take the edge off of things?

Spans:
Span 4-5:  about => about
Span 6-7:  and => and
Span 11-12:  anxiety => anxiety
Span 13-14:  could => possible
Span 16-17:  edge => edge
Span 5-6:  it => it
Span 17-18:  off => off
Span 12-13:  pills => pill
Span 7-8:  see => see-01
Span 14-15:  take => take-01
Span 19-20:  things => thing

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),things,thing,false), Span(17,18,List(1),off,off,false), Span(16,17,List(2),edge,edge,false), Span(14,15,List(3),take,take-01,false), Span(13,14,List(4),could,possible,false), Span(12,13,List(5),pills,pill,false), Span(11,12,List(6),anxiety,anxiety,false), Span(7,8,List(7),see,see-01,false), Span(6,7,List(8),and,and,false), Span(5,6,List(9),it,it,false), Span(4,5,List(10),about,about,false)),Map(2 -> edge, 5 -> pill, 8 -> and, 7 -> see-01, 1 -> off, 4 -> possible, 6 -> anxiety, 9 -> it, 0 -> thing, 10 -> about, 3 -> take-01),Map(e -> edge, t -> thing, p2 -> pill, a3 -> about, s -> see-01, p -> possible, a -> anxiety, t2 -> take-01, i -> it, a2 -> and, o -> off))),[Ljava.lang.String;@42f8285e,Annotation([Ljava.lang.String;@26bab2f1,[Ljava.lang.String;@3724af13,[Ljava.lang.String;@68ead359),Annotation([Ljava.lang.String;@6b53bcc2,[Ljava.lang.String;@180da663,[Ledu.cmu.lti.nlp.amr.Dependency;@a43ce46),Annotation([Ljava.lang.String;@340da44c,[Ljava.lang.String;@424ebba3,[Ljava.lang.String;@37052337),Annotation([Ljava.lang.String;@2320fa6f,[Ljava.lang.String;@7a560583,[Ledu.cmu.lti.nlp.amr.Entity;@4d722ac9))
AMR:
(a2 / and, op, i / it)
(a2 / and, op, s / see-01)
(i / it, calendar, a3 / about)
(p / possible, domain, t2 / take-01)
(p2 / pill, mod, a / anxiety)
(s / see-01, ARG1, p / possible)
(t2 / take-01, ARG0, p2 / pill)
(t2 / take-01, ARG1, e / edge)
(t2 / take-01, location, t / thing)
(t2 / take-01, mod, o / off)

Decoded in 212,246 microseconds
Sentence: See if I can speak to a counsellor?

Spans:
Span 3-4:  can => possible
Span 4-5:  speak => speak-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),speak,speak-01,false), Span(3,4,List(1),can,possible,false)),Map(1 -> possible, 0 -> speak-01),Map(s -> speak-01, p -> possible))),[Ljava.lang.String;@53f0a4cb,Annotation([Ljava.lang.String;@77a7cf58,[Ljava.lang.String;@3d97a632,[Ljava.lang.String;@616fe72b),Annotation([Ljava.lang.String;@37efd131,[Ljava.lang.String;@7e7b159b,[Ledu.cmu.lti.nlp.amr.Dependency;@7e5d9a50),Annotation([Ljava.lang.String;@60957c0f,[Ljava.lang.String;@293a5f75,[Ljava.lang.String;@fcb4004),Annotation([Ljava.lang.String;@1dd6d4b7,[Ljava.lang.String;@56e8b606,[Ledu.cmu.lti.nlp.amr.Entity;@2dd29a59))
AMR:
(p / possible, domain, s / speak-01)

Decoded in 10,304 microseconds
Sentence: Or should I take the advice given by the close people around me and just keep an eye on the anxiety until it becomes a problem?

Spans:
Span 5-6:  advice => advice
Span 13-14:  and => and
Span 20-21:  anxiety => anxiety
Span 11-12:  around => around
Span 23-24:  becomes => become-01
Span 17-18:  eye => eye
Span 6-7:  given => give-01
Span 22-23:  it => it
Span 14-15:  just => just
Span 15-16:  keep => keep-05
Span 10-11:  people => people
Span 25-26:  problem => problem
Span 1-2:  should => recommend-01
Span 3-4:  take => take-01
Span 21-22:  until => until

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),problem,problem,false), Span(23,24,List(1),becomes,become-01,false), Span(22,23,List(2),it,it,false), Span(21,22,List(3),until,until,false), Span(20,21,List(4),anxiety,anxiety,false), Span(17,18,List(5),eye,eye,false), Span(15,16,List(6),keep,keep-05,false), Span(14,15,List(7),just,just,false), Span(13,14,List(8),and,and,false), Span(11,12,List(9),around,around,false), Span(10,11,List(10),people,people,false), Span(6,7,List(11),given,give-01,false), Span(5,6,List(12),advice,advice,false), Span(3,4,List(13),take,take-01,false), Span(1,2,List(14),should,recommend-01,false)),Map(2 -> it, 5 -> eye, 12 -> advice, 8 -> and, 7 -> just, 1 -> become-01, 4 -> anxiety, 11 -> give-01, 14 -> recommend-01, 6 -> keep-05, 0 -> problem, 9 -> around, 3 -> until, 10 -> people, 13 -> take-01),Map(e -> eye, t -> take-01, b -> become-01, k -> keep-05, p2 -> people, j -> just, a3 -> around, p -> problem, g -> give-01, a -> anxiety, r -> recommend-01, i -> it, a2 -> and, u -> until, a4 -> advice))),[Ljava.lang.String;@784c3487,Annotation([Ljava.lang.String;@53142455,[Ljava.lang.String;@40dff0b7,[Ljava.lang.String;@7966baa7),Annotation([Ljava.lang.String;@60975100,[Ljava.lang.String;@1253e7cb,[Ledu.cmu.lti.nlp.amr.Dependency;@2d36e77e),Annotation([Ljava.lang.String;@61c9c3fd,[Ljava.lang.String;@3b0c9195,[Ljava.lang.String;@366c4480),Annotation([Ljava.lang.String;@2c7b5824,[Ljava.lang.String;@302a07d,[Ledu.cmu.lti.nlp.amr.Entity;@5cdd09b1))
AMR:
(a2 / and, op, k / keep-05)
(a2 / and, op, r / recommend-01)
(b / become-01, ARG0, i / it)
(b / become-01, ARG1, p / problem)
(e / eye, location, a / anxiety)
(g / give-01, ARG1, a4 / advice)
(g / give-01, ARG2, p2 / people)
(k / keep-05, ARG1, e / eye)
(k / keep-05, ARG6, j / just)
(k / keep-05, time, u / until)
(p2 / people, location, a3 / around)
(r / recommend-01, ARG1, t / take-01)
(t / take-01, ARG1, a4 / advice)
(u / until, op, b / become-01)

Decoded in 710,146 microseconds
Sentence: Well I woudnt try to keep an eye on ur anxiety for a start because that will make u tense and more likely to become more panicky (circle of demise there)

Spans:
Span 20-21:  and => and
Span 10-11:  anxiety => anxiety
Span 14-15:  because => cause-01
Span 24-25:  become => become-01
Span 7-8:  eye => eye
Span 5-6:  keep => keep-05
Span 22-23:  likely => likely
Span 17-18:  make => make-01
Span 25-26:  more => more
Span 21-22:  more => more
Span 13-14:  start => start-01
Span 19-20:  tense => tense
Span 3-4:  try => try-01

Langrangian relaxation converged after 83 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),more,more,false), Span(24,25,List(1),become,become-01,false), Span(22,23,List(2),likely,likely,false), Span(21,22,List(3),more,more,false), Span(20,21,List(4),and,and,false), Span(19,20,List(5),tense,tense,false), Span(17,18,List(6),make,make-01,false), Span(14,15,List(7),because,cause-01,false), Span(13,14,List(8),start,start-01,false), Span(10,11,List(9),anxiety,anxiety,false), Span(7,8,List(10),eye,eye,false), Span(5,6,List(11),keep,keep-05,false), Span(3,4,List(12),try,try-01,false)),Map(2 -> likely, 5 -> tense, 12 -> try-01, 8 -> start-01, 7 -> cause-01, 1 -> become-01, 4 -> and, 11 -> keep-05, 6 -> make-01, 0 -> more, 9 -> anxiety, 3 -> more, 10 -> eye),Map(m3 -> make-01, e -> eye, b -> become-01, t -> tense, k -> keep-05, m2 -> more, s -> start-01, m -> more, a -> and, t2 -> try-01, a2 -> anxiety, c -> cause-01, l -> likely))),[Ljava.lang.String;@8c11eee,Annotation([Ljava.lang.String;@7e8dcdaa,[Ljava.lang.String;@681a8b4e,[Ljava.lang.String;@5cbe877d),Annotation([Ljava.lang.String;@5c08c46a,[Ljava.lang.String;@4cf8b2dc,[Ledu.cmu.lti.nlp.amr.Dependency;@708400f6),Annotation([Ljava.lang.String;@5829e4f4,[Ljava.lang.String;@4218500f,[Ljava.lang.String;@4bff64c2),Annotation([Ljava.lang.String;@1b2c4efb,[Ljava.lang.String;@c35172e,[Ledu.cmu.lti.nlp.amr.Entity;@c2db68f))
AMR:
(a / and, op, l / likely)
(a / and, op, t / tense)
(b / become-01, ARG1, m / more)
(c / cause-01, ARG0, m3 / make-01)
(c / cause-01, ARG1, k / keep-05)
(k / keep-05, ARG1, e / eye)
(k / keep-05, prep-with, a2 / anxiety)
(l / likely, degree, m2 / more)
(l / likely, domain, b / become-01)
(m3 / make-01, ARG1, a / and)
(s / start-01, ARG1, c / cause-01)
(t2 / try-01, ARG1, k / keep-05)

Decoded in 1,017,237 microseconds
Sentence: what I would try to do is focus on something that is garunteed to make you smile or feel happier as soon as you start to feel a bit panicky about anything.

Spans:
Span 30-31:  about => about
Span 31-32:  anything => anything
Span 5-6:  do => do-02
Span 7-8:  focus => focus-01
Span 14-15:  make => make-01
Span 17-18:  or => or
Span 21-22:  soon => soon
Span 24-25:  start => start-01
Span 3-4:  try => try-01
Span 23-24:  you => you
Span 15-16:  you => you

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),anything,anything,false), Span(30,31,List(1),about,about,false), Span(24,25,List(2),start,start-01,false), Span(23,24,List(3),you,you,false), Span(21,22,List(4),soon,soon,false), Span(17,18,List(5),or,or,false), Span(15,16,List(6),you,you,false), Span(14,15,List(7),make,make-01,false), Span(7,8,List(8),focus,focus-01,false), Span(5,6,List(9),do,do-02,false), Span(3,4,List(10),try,try-01,false)),Map(2 -> start-01, 5 -> or, 8 -> focus-01, 7 -> make-01, 1 -> about, 4 -> soon, 6 -> you, 9 -> do-02, 0 -> anything, 10 -> try-01, 3 -> you),Map(t -> try-01, s2 -> soon, s -> start-01, d -> do-02, m -> make-01, y -> you, a -> anything, a2 -> about, f -> focus-01, o -> or, y2 -> you))),[Ljava.lang.String;@3cc41abc,Annotation([Ljava.lang.String;@4566d049,[Ljava.lang.String;@61ce23ac,[Ljava.lang.String;@3668d4),Annotation([Ljava.lang.String;@1c3b9394,[Ljava.lang.String;@6f2cfcc2,[Ledu.cmu.lti.nlp.amr.Dependency;@7f6f61c8),Annotation([Ljava.lang.String;@4c2cc639,[Ljava.lang.String;@ccb4b1b,[Ljava.lang.String;@4097cac),Annotation([Ljava.lang.String;@ec2cc4,[Ljava.lang.String;@2a5b3fee,[Ledu.cmu.lti.nlp.amr.Entity;@7c1e2a2d))
AMR:
(a2 / about, op, a / anything)
(d / do-02, ARG1, f / focus-01)
(f / focus-01, ARG1, y2 / you)
(m / make-01, ARG1, f / focus-01)
(m / make-01, ARG6, s / start-01)
(o / or, op, m / make-01)
(s / start-01, ARG0, y / you)
(s / start-01, ARG1, s2 / soon)
(s / start-01, time, a2 / about)
(t / try-01, ARG1, d / do-02)

Decoded in 434,143 microseconds
Sentence: Or if u cant do that-when you start to feel panicky, get one of your friends to make you laugh (it works for me and i suffer from random panic attacks lol

Spans:
Span 28-29:  and => and
Span 34-35:  attacks => attack-01
Span 4-5:  do => do-02
Span 14-15:  get => get-04
Span 24-25:  it => it
Span 20-21:  make => make-01
Span 15-16:  one => 1
Span 33-34:  panic => panic-01
Span 32-33:  random => random
Span 9-10:  start => start-01
Span 30-31:  suffer => suffer-01
Span 25-26:  works => work-01
Span 21-22:  you => you
Span 8-9:  you => you

Langrangian relaxation converged after 67 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),attacks,attack-01,false), Span(33,34,List(1),panic,panic-01,false), Span(32,33,List(2),random,random,false), Span(30,31,List(3),suffer,suffer-01,false), Span(28,29,List(4),and,and,false), Span(25,26,List(5),works,work-01,false), Span(24,25,List(6),it,it,false), Span(21,22,List(7),you,you,false), Span(20,21,List(8),make,make-01,false), Span(15,16,List(9),one,1,false), Span(14,15,List(10),get,get-04,false), Span(9,10,List(11),start,start-01,false), Span(8,9,List(12),you,you,false), Span(4,5,List(13),do,do-02,false)),Map(2 -> random, 5 -> work-01, 12 -> you, 8 -> make-01, 7 -> you, 1 -> panic-01, 4 -> and, 11 -> start-01, 6 -> it, 0 -> attack-01, 9 -> 1, 3 -> suffer-01, 10 -> get-04, 13 -> do-02),Map(w -> work-01, s2 -> start-01, s -> suffer-01, d -> do-02, m -> make-01, 1 -> 1, p -> panic-01, y -> you, g -> get-04, a -> attack-01, r -> random, a2 -> and, i -> it, y2 -> you))),[Ljava.lang.String;@333dd51e,Annotation([Ljava.lang.String;@52d645b1,[Ljava.lang.String;@2101b44a,[Ljava.lang.String;@2cc3ad05),Annotation([Ljava.lang.String;@710b18a6,[Ljava.lang.String;@119020fb,[Ledu.cmu.lti.nlp.amr.Dependency;@3d9f6567),Annotation([Ljava.lang.String;@c055c54,[Ljava.lang.String;@25e2ab5a,[Ljava.lang.String;@35e5d0e5),Annotation([Ljava.lang.String;@73173f63,[Ljava.lang.String;@55562aa9,[Ledu.cmu.lti.nlp.amr.Entity;@655ef322))
AMR:
(a / attack-01, ARG1, p / panic-01)
(a2 / and, op, s / suffer-01)
(d / do-02, ARG1, s2 / start-01)
(g / get-04, ARG1, 1 / 1)
(m / make-01, ARG1, y / you)
(p / panic-01, ARG1, s2 / start-01)
(p / panic-01, manner, r / random)
(s / suffer-01, ARG0, y / you)
(s / suffer-01, ARG1, s2 / start-01)
(s2 / start-01, ARG0, y2 / you)
(s2 / start-01, ARG1, g / get-04)
(w / work-01, ARG0, i / it)
(w / work-01, ARG1, a2 / and)

Decoded in 951,931 microseconds
Sentence: This started happening to me, where I'd just start being really anxious over tiny things, although from the sound of things, not as severely as you.

Spans:
Span 9-10:  just => just
Span 14-15:  over => over
Span 12-13:  really => really
Span 27-28:  severely => severe
Span 10-11:  start => start-01
Span 1-2:  started => start-01
Span 23-24:  things => thing
Span 16-17:  things => thing
Span 0-1:  This => this
Span 29-30:  you => you

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),you,you,false), Span(27,28,List(1),severely,severe,false), Span(23,24,List(2),things,thing,false), Span(16,17,List(3),things,thing,false), Span(14,15,List(4),over,over,false), Span(12,13,List(5),really,really,false), Span(10,11,List(6),start,start-01,false), Span(9,10,List(7),just,just,false), Span(1,2,List(8),started,start-01,false), Span(0,1,List(9),This,this,false)),Map(2 -> thing, 5 -> really, 8 -> start-01, 7 -> just, 1 -> severe, 4 -> over, 6 -> start-01, 9 -> this, 0 -> you, 3 -> thing),Map(s2 -> start-01, t -> thing, j -> just, s -> severe, t3 -> this, y -> you, t2 -> thing, r -> really, s3 -> start-01, o -> over))),[Ljava.lang.String;@7e276594,Annotation([Ljava.lang.String;@3401a114,[Ljava.lang.String;@5066d65f,[Ljava.lang.String;@4233e892),Annotation([Ljava.lang.String;@77d2e85,[Ljava.lang.String;@3ecd267f,[Ledu.cmu.lti.nlp.amr.Dependency;@58ffcbd7),Annotation([Ljava.lang.String;@555cf22,[Ljava.lang.String;@6bb2d00b,[Ljava.lang.String;@3c9bfddc),Annotation([Ljava.lang.String;@1a9c38eb,[Ljava.lang.String;@319bc845,[Ledu.cmu.lti.nlp.amr.Entity;@4c5474f5))
AMR:
(o / over, calendar, t2 / thing)
(s2 / start-01, ARG0, y / you)
(s2 / start-01, ARG1, o / over)
(s2 / start-01, ARG6, r / really)
(s2 / start-01, mod, j / just)
(s3 / start-01, ARG0, t / thing)
(s3 / start-01, ARG1, t3 / this)
(s3 / start-01, condition, s2 / start-01)
(y / you, calendar, s / severe)

Decoded in 154,704 microseconds
Sentence: What I find helps is just talking about what is making you anxious to someone else.

Spans:
Span 7-8:  about => about
Span 2-3:  find => find-01
Span 3-4:  helps => help-01
Span 5-6:  just => just
Span 10-11:  making => make-01
Span 14-15:  someone => someone
Span 11-12:  you => you

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),someone,someone,false), Span(11,12,List(1),you,you,false), Span(10,11,List(2),making,make-01,false), Span(7,8,List(3),about,about,false), Span(5,6,List(4),just,just,false), Span(3,4,List(5),helps,help-01,false), Span(2,3,List(6),find,find-01,false)),Map(2 -> make-01, 5 -> help-01, 1 -> you, 4 -> just, 6 -> find-01, 0 -> someone, 3 -> about),Map(h -> help-01, j -> just, s -> someone, m -> make-01, y -> you, a -> about, f -> find-01))),[Ljava.lang.String;@2f4205be,Annotation([Ljava.lang.String;@54e22bdd,[Ljava.lang.String;@3bd418e4,[Ljava.lang.String;@544820b7),Annotation([Ljava.lang.String;@6b98a075,[Ljava.lang.String;@2e61d218,[Ledu.cmu.lti.nlp.amr.Dependency;@3569fc08),Annotation([Ljava.lang.String;@20b12f8a,[Ljava.lang.String;@e84a8e1,[Ljava.lang.String;@2e554a3b),Annotation([Ljava.lang.String;@54a67a45,[Ljava.lang.String;@7d42c224,[Ledu.cmu.lti.nlp.amr.Entity;@56aaaecd))
AMR:
(a / about, op, m / make-01)
(f / find-01, ARG1, h / help-01)
(f / find-01, ARG6, a / about)
(h / help-01, ARG1, s / someone)
(m / make-01, ARG1, j / just)
(m / make-01, ARG6, y / you)

Decoded in 148,116 microseconds
Sentence: Perhaps not in a moany way but I found that mentioning the thing that I was worried about to my mum and seeing her react to the situation in a calm way (like I should have been reacting) made me feel better about it because I knew it wasn't a big deal and I didn't need to be anxious about it.

Spans:
Span 63-64:  about => about
Span 44-45:  about => about
Span 17-18:  about => about
Span 55-56:  and => and
Span 21-22:  and => and
Span 46-47:  because => cause-01
Span 43-44:  better => good
Span 53-54:  big => big
Span 6-7:  but => contrast-01
Span 54-55:  deal => deal-01
Span 8-9:  found => find-01
Span 64-65:  it => it
Span 49-50:  it => it
Span 45-46:  it => it
Span 48-49:  knew => know-01
Span 59-60:  need => need-01
Span 35-36:  should => recommend-01
Span 27-28:  situation => situation
Span 31-32:  way => way
Span 5-6:  way => way
Span 16-17:  worried => worry-02

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(64,65,List(0),it,it,false), Span(63,64,List(1),about,about,false), Span(59,60,List(2),need,need-01,false), Span(55,56,List(3),and,and,false), Span(54,55,List(4),deal,deal-01,false), Span(53,54,List(5),big,big,false), Span(49,50,List(6),it,it,false), Span(48,49,List(7),knew,know-01,false), Span(46,47,List(8),because,cause-01,false), Span(45,46,List(9),it,it,false), Span(44,45,List(10),about,about,false), Span(43,44,List(11),better,good,false), Span(35,36,List(12),should,recommend-01,false), Span(31,32,List(13),way,way,false), Span(27,28,List(14),situation,situation,false), Span(21,22,List(15),and,and,false), Span(17,18,List(16),about,about,false), Span(16,17,List(17),worried,worry-02,false), Span(8,9,List(18),found,find-01,false), Span(6,7,List(19),but,contrast-01,false), Span(5,6,List(20),way,way,false)),Map(2 -> need-01, 5 -> big, 12 -> recommend-01, 15 -> and, 8 -> cause-01, 18 -> find-01, 7 -> know-01, 17 -> worry-02, 1 -> about, 4 -> deal-01, 11 -> good, 14 -> situation, 20 -> way, 6 -> it, 0 -> it, 9 -> it, 16 -> about, 19 -> contrast-01, 3 -> and, 10 -> about, 13 -> way),Map(w -> way, n -> need-01, b -> big, k -> know-01, a3 -> about, w3 -> way, s -> situation, d -> deal-01, i3 -> it, g -> good, a -> about, a5 -> about, i2 -> it, w2 -> worry-02, i -> it, a2 -> and, r -> recommend-01, c -> cause-01, f -> find-01, c2 -> contrast-01, a4 -> and))),[Ljava.lang.String;@522a32b1,Annotation([Ljava.lang.String;@35390ee3,[Ljava.lang.String;@5e01a982,[Ljava.lang.String;@5ddea849),Annotation([Ljava.lang.String;@5ee2b6f9,[Ljava.lang.String;@23d1e5d0,[Ledu.cmu.lti.nlp.amr.Dependency;@704f1591),Annotation([Ljava.lang.String;@58fb7731,[Ljava.lang.String;@13e547a9,[Ljava.lang.String;@3fb6cf60),Annotation([Ljava.lang.String;@37ddb69a,[Ljava.lang.String;@349c1daf,[Ledu.cmu.lti.nlp.amr.Entity;@dfddc9a))
AMR:
(a2 / and, op, d / deal-01)
(a2 / and, op, r / recommend-01)
(a4 / and, op, r / recommend-01)
(a4 / and, op, w2 / worry-02)
(c / cause-01, ARG0, k / know-01)
(c / cause-01, ARG1, i3 / it)
(c2 / contrast-01, ARG1, f / find-01)
(d / deal-01, ARG1, g / good)
(d / deal-01, mod, b / big)
(f / find-01, ARG1, a2 / and)
(f / find-01, ARG6, w3 / way)
(i / it, calendar, a / about)
(k / know-01, ARG0, i2 / it)
(k / know-01, ARG1, d / deal-01)
(k / know-01, ARG6, a3 / about)
(n / need-01, ARG1, a2 / and)
(n / need-01, ARG6, a / about)
(r / recommend-01, ARG1, s / situation)
(s / situation, location, w / way)
(w2 / worry-02, ARG1, a5 / about)

Decoded in 1,048,010 microseconds
Sentence: However, if it gets worse, then yes, go to the doctor's.

Spans:
Span 10-11:  go => go-01
Span 3-4:  it => it
Span 7-8:  then => then
Span 5-6:  worse => bad

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),go,go-01,false), Span(7,8,List(1),then,then,false), Span(5,6,List(2),worse,bad,false), Span(3,4,List(3),it,it,false)),Map(2 -> bad, 1 -> then, 0 -> go-01, 3 -> it),Map(b -> bad, t -> then, g -> go-01, i -> it))),[Ljava.lang.String;@4b9df8a,Annotation([Ljava.lang.String;@5e8ac0e1,[Ljava.lang.String;@aafcffa,[Ljava.lang.String;@6955cb39),Annotation([Ljava.lang.String;@235a0c16,[Ljava.lang.String;@2b5f4d54,[Ledu.cmu.lti.nlp.amr.Dependency;@5f7b97da),Annotation([Ljava.lang.String;@18b0930f,[Ljava.lang.String;@6b7906b3,[Ljava.lang.String;@3a1dd365),Annotation([Ljava.lang.String;@395b56bb,[Ljava.lang.String;@256f8274,[Ledu.cmu.lti.nlp.amr.Entity;@68044f4))
AMR:
(g / go-01, ARG0, b / bad)
(g / go-01, ARG1, t / then)
(i / it, calendar, b / bad)

Decoded in 74,893 microseconds
Sentence: I have a friend who suffers from severe anxiety that can prevent her from leaving the house and doing things because she's so worried about what can go wrong.

Spans:
Span 25-26:  about => about
Span 17-18:  and => and
Span 8-9:  anxiety => anxiety
Span 20-21:  because => cause-01
Span 27-28:  can => possible
Span 10-11:  can => possible
Span 18-19:  doing => (thing :ARG1-of do-02)
Span 3-4:  friend => friend
Span 28-29:  go => go-01
Span 16-17:  house => house
Span 14-15:  leaving => leave-06
Span 11-12:  prevent => prevent-01
Span 7-8:  severe => severe
Span 21-22:  she => she
Span 23-24:  so => so
Span 19-20:  things => thing
Span 24-25:  worried => worry-02

Langrangian relaxation converged after 81 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),go,go-01,false), Span(27,28,List(1),can,possible,false), Span(25,26,List(2),about,about,false), Span(24,25,List(3),worried,worry-02,false), Span(23,24,List(4),so,so,false), Span(21,22,List(5),she,she,false), Span(20,21,List(6),because,cause-01,false), Span(19,20,List(7),things,thing,false), Span(18,19,List(9, 8),doing,(thing :ARG1-of do-02),false), Span(17,18,List(10),and,and,false), Span(16,17,List(11),house,house,false), Span(14,15,List(12),leaving,leave-06,false), Span(11,12,List(13),prevent,prevent-01,false), Span(10,11,List(14),can,possible,false), Span(8,9,List(15),anxiety,anxiety,false), Span(7,8,List(16),severe,severe,false), Span(3,4,List(17),friend,friend,false)),Map(2 -> about, 5 -> she, 12 -> leave-06, 15 -> anxiety, 8 -> thing, 7 -> thing, 17 -> friend, 1 -> possible, 4 -> so, 11 -> house, 14 -> possible, 6 -> cause-01, 0 -> go-01, 9 -> do-02, 16 -> severe, 3 -> worry-02, 10 -> and, 13 -> prevent-01),Map(w -> worry-02, h -> house, s2 -> she, t -> thing, p2 -> prevent-01, a3 -> anxiety, s -> so, d -> do-02, g -> go-01, p -> possible, a -> about, t2 -> thing, a2 -> and, s3 -> severe, c -> cause-01, l -> leave-06, f -> friend, p3 -> possible))),[Ljava.lang.String;@52d239ba,Annotation([Ljava.lang.String;@315f43d5,[Ljava.lang.String;@68fa0ba8,[Ljava.lang.String;@6c5945a7),Annotation([Ljava.lang.String;@2f05be7f,[Ljava.lang.String;@640f11a1,[Ledu.cmu.lti.nlp.amr.Dependency;@5c10f1c3),Annotation([Ljava.lang.String;@7ac2e39b,[Ljava.lang.String;@78365cfa,[Ljava.lang.String;@64a8c844),Annotation([Ljava.lang.String;@3f6db3fb,[Ljava.lang.String;@52de51b6,[Ledu.cmu.lti.nlp.amr.Entity;@18c5069b))
AMR:
(a / about, op, g / go-01)
(a2 / and, op, l / leave-06)
(a2 / and, op, t2 / thing)
(a3 / anxiety, mod, s3 / severe)
(c / cause-01, ARG0, a2 / and)
(c / cause-01, ARG1, s2 / she)
(d / do-02, ARG1, t2 / thing)
(d / do-02, ARG2, t / thing)
(g / go-01, ARG1, f / friend)
(l / leave-06, ARG1, h / house)
(p / possible, domain, g / go-01)
(p2 / prevent-01, ARG0, a3 / anxiety)
(p2 / prevent-01, ARG1, l / leave-06)
(p3 / possible, domain, p2 / prevent-01)
(w / worry-02, ARG1, s2 / she)
(w / worry-02, ARG2, a / about)
(w / worry-02, manner, s / so)

Decoded in 1,746,889 microseconds
Sentence: The doctors gave her medication and it's made her much better.

Spans:
Span 5-6:  and => and
Span 11-12:  better => good
Span 1-2:  doctors => doctor
Span 2-3:  gave => give-01
Span 6-7:  it => it
Span 4-5:  medication => medication
Span 10-11:  much => much

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),better,good,false), Span(10,11,List(1),much,much,false), Span(6,7,List(2),it,it,false), Span(5,6,List(3),and,and,false), Span(4,5,List(4),medication,medication,false), Span(2,3,List(5),gave,give-01,false), Span(1,2,List(6),doctors,doctor,false)),Map(2 -> it, 5 -> give-01, 1 -> much, 4 -> medication, 6 -> doctor, 0 -> good, 3 -> and),Map(m2 -> medication, d -> doctor, m -> much, g2 -> give-01, g -> good, a -> and, i -> it))),[Ljava.lang.String;@3a0d172f,Annotation([Ljava.lang.String;@68ad99fe,[Ljava.lang.String;@485e36bc,[Ljava.lang.String;@781f10f2),Annotation([Ljava.lang.String;@2a79d4b1,[Ljava.lang.String;@2e9fda69,[Ledu.cmu.lti.nlp.amr.Dependency;@17cdf2d0),Annotation([Ljava.lang.String;@1755e85b,[Ljava.lang.String;@736d6a5c,[Ljava.lang.String;@2371aaca),Annotation([Ljava.lang.String;@5b529706,[Ljava.lang.String;@63fdab07,[Ledu.cmu.lti.nlp.amr.Entity;@7b5a12ae))
AMR:
(a / and, op, g2 / give-01)
(a / and, op, i / it)
(g / good, degree, m / much)
(g2 / give-01, ARG0, d / doctor)
(g2 / give-01, ARG1, m2 / medication)
(g2 / give-01, ARG6, g / good)

Decoded in 65,913 microseconds
--- Stage1 evaluation ---
Precision: NaN
Recall: NaN
F1: NaN
