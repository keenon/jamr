Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: Resolutely support the thread starter! I compose a poem in reply:

Spans:
Span 1-2:  support => support-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of compose in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of poem in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of reply in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 12
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),support,support-01,false)),Map(0 -> support-01),Map(s -> support-01))),[Ljava.lang.String;@124c278f,Annotation([Ljava.lang.String;@15b204a1,[Ljava.lang.String;@77167fb7,[Ljava.lang.String;@1fe20588),Annotation([Ljava.lang.String;@6ce139a4,[Ljava.lang.String;@6973bf95,[Ledu.cmu.lti.nlp.amr.Dependency;@2ddc8ecb),Annotation([Ljava.lang.String;@229d10bd,[Ljava.lang.String;@47542153,[Ljava.lang.String;@33afa13b),Annotation([Ljava.lang.String;@7a4ccb53,[Ljava.lang.String;@309e345f,[Ledu.cmu.lti.nlp.amr.Entity;@56a6d5a6))
AMR:


Decoded in 253,457 microseconds
Sentence: Pledge to fight to the death defending the Diaoyu Islands and the related islands

NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 10-11:  and => and
Span 5-6:  death => die-01
Span 6-7:  defending => defend-01
Span 8-10:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Span 2-3:  fight => fight-01
Span 12-13:  related => relate-01

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),related,relate-01,false), Span(10,11,List(1),and,and,false), Span(8,10,List(4, 3, 2),Diaoyu Islands,(name :op "Islands" :op "Diaoyu"),false), Span(6,7,List(5),defending,defend-01,false), Span(5,6,List(6),death,die-01,false), Span(2,3,List(7),fight,fight-01,false)),Map(2 -> name, 5 -> defend-01, 7 -> fight-01, 1 -> and, 4 -> "Diaoyu", 6 -> die-01, 0 -> relate-01, 3 -> "Islands"),Map(n -> name, d -> defend-01, a -> and, d2 -> die-01, r -> relate-01, f -> fight-01))),[Ljava.lang.String;@7193666c,Annotation([Ljava.lang.String;@20deea7f,[Ljava.lang.String;@3835c46,[Ljava.lang.String;@1dde4cb2),Annotation([Ljava.lang.String;@7714e963,[Ljava.lang.String;@20ce78ec,[Ledu.cmu.lti.nlp.amr.Dependency;@393671df),Annotation([Ljava.lang.String;@56620197,[Ljava.lang.String;@6eda5c9,[Ljava.lang.String;@55b7a4e0),Annotation([Ljava.lang.String;@5f058f00,[Ljava.lang.String;@192d43ce,[Ledu.cmu.lti.nlp.amr.Entity;@72057ecf))
AMR:
(d / defend-01, ARG1, a / and)
(d / defend-01, ARG6, d2 / die-01)
(d2 / die-01, ARG1, n / name)
(f / fight-01, ARG1, d / defend-01)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(r / relate-01, ARG1, d2 / die-01)

Decoded in 718,528 microseconds
Sentence: Fleets bumping fishing boats. Little evil Japanese ghosts stirring up trouble and unrest. With hearts of thieves and arrogant form, they again show their wolfish appearance

NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 24-25:  again => again
Span 19-20:  and => and
Span 12-13:  and => and
Span 3-4:  boats => boat
Span 21-22:  form => form
Span 7-8:  Japanese => (country :name (name :op "Japan"))
Span 25-26:  show => show-01
Span 23-24:  they => they
Span 11-12:  trouble => trouble
Span 13-14:  unrest => unrest

 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of With in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of hearts in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of thieves in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of arrogant in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of form in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of they in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of again in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of their in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of wolfish in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of appearance in position 28
Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),show,show-01,false), Span(24,25,List(1),again,again,false), Span(23,24,List(2),they,they,false), Span(21,22,List(3),form,form,false), Span(19,20,List(4),and,and,false), Span(13,14,List(5),unrest,unrest,false), Span(12,13,List(6),and,and,false), Span(11,12,List(7),trouble,trouble,false), Span(7,8,List(10, 9, 8),Japanese,(country :name (name :op "Japan")),false), Span(3,4,List(11),boats,boat,false)),Map(2 -> they, 5 -> unrest, 8 -> country, 7 -> trouble, 1 -> again, 11 -> boat, 4 -> and, 6 -> and, 9 -> name, 0 -> show-01, 10 -> "Japan", 3 -> form),Map(n -> name, b -> boat, t -> they, a3 -> and, s -> show-01, a -> again, t2 -> trouble, a2 -> and, c -> country, u -> unrest, f -> form))),[Ljava.lang.String;@40ef3420,Annotation([Ljava.lang.String;@498d318c,[Ljava.lang.String;@6e171cd7,[Ljava.lang.String;@402bba4f),Annotation([Ljava.lang.String;@795cd85e,[Ljava.lang.String;@59fd97a8,[Ledu.cmu.lti.nlp.amr.Dependency;@f5ac9e4),Annotation([Ljava.lang.String;@123ef382,[Ljava.lang.String;@dbf57b3,[Ljava.lang.String;@384ad17b),Annotation([Ljava.lang.String;@61862a7f,[Ljava.lang.String;@441772e,[Ledu.cmu.lti.nlp.amr.Entity;@7334aada))
AMR:
(a2 / and, calendar, f / form)
(a3 / and, op, a2 / and)
(a3 / and, op, t2 / trouble)
(a3 / and, op, u / unrest)
(b / boat, poss, a2 / and)
(c / country, name, n / name)
(n / name, op, "Japan")
(s / show-01, ARG0, a / again)
(s / show-01, ARG1, c / country)
(s / show-01, ARG6, a3 / and)
(t / they, op, a / again)

Decoded in 348,433 microseconds
Sentence: Never go back to that time, our humiliating appearance when signing the treaties. China be strong, swords be sharp and knives be shining, let's bury the approaching enemies!

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 22-23:  and => and
Span 2-3:  back => back
Span 15-16:  China => (country :name (name :op "China"))
Span 1-2:  go => go-01
Span 27-28:  let => let-01
Span 21-22:  sharp => sharp
Span 11-12:  signing => sign-01
Span 17-18:  strong => strong
Span 5-6:  time => time
Span 13-14:  treaties => treaty

 *** WARNING: The dependency tree seems broken.  I can't find the head of swords in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of sharp in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of knives in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of shining in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of bury in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of approaching in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 33
Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),let,let-01,false), Span(22,23,List(1),and,and,false), Span(21,22,List(2),sharp,sharp,false), Span(17,18,List(3),strong,strong,false), Span(15,16,List(6, 5, 4),China,(country :name (name :op "China")),false), Span(13,14,List(7),treaties,treaty,false), Span(11,12,List(8),signing,sign-01,false), Span(5,6,List(9),time,time,false), Span(2,3,List(10),back,back,false), Span(1,2,List(11),go,go-01,false)),Map(2 -> sharp, 5 -> name, 8 -> sign-01, 7 -> treaty, 1 -> and, 11 -> go-01, 4 -> country, 6 -> "China", 9 -> time, 0 -> let-01, 10 -> back, 3 -> strong),Map(n -> name, b -> back, t -> treaty, s2 -> strong, s -> sharp, g -> go-01, a -> and, t2 -> time, s3 -> sign-01, c -> country, l -> let-01))),[Ljava.lang.String;@5e0826e7,Annotation([Ljava.lang.String;@32eff876,[Ljava.lang.String;@8dbdac1,[Ljava.lang.String;@6e20b53a),Annotation([Ljava.lang.String;@71809907,[Ljava.lang.String;@3ce1e309,[Ledu.cmu.lti.nlp.amr.Dependency;@6aba2b86),Annotation([Ljava.lang.String;@158da8e,[Ljava.lang.String;@74e52303,[Ljava.lang.String;@47af7f3d),Annotation([Ljava.lang.String;@7c729a55,[Ljava.lang.String;@3bb9a3ff,[Ledu.cmu.lti.nlp.amr.Entity;@661972b0))
AMR:
(a / and, op, s / sharp)
(c / country, name, n / name)
(g / go-01, ARG1, s2 / strong)
(g / go-01, ARG2, t2 / time)
(g / go-01, direction, b / back)
(l / let-01, ARG1, c / country)
(l / let-01, mod, b / back)
(l / let-01, time, s3 / sign-01)
(n / name, op, "China")
(s / sharp, mod, b / back)
(s3 / sign-01, ARG1, t / treaty)

Decoded in 494,126 microseconds
Sentence: September 11th, 2010

Spans:
Span 3-4:  2010 => (date-entity :year 2010)
Span 0-1:  September => (date-entity :month 9)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(1, 0),2010,(date-entity :year 2010),false), Span(0,1,List(3, 2),September,(date-entity :month 9),false)),Map(2 -> date-entity, 1 -> 2010, 0 -> date-entity, 3 -> 9),Map(2 -> 2010, d -> date-entity, d2 -> date-entity, 9 -> 9))),[Ljava.lang.String;@2e005c4b,Annotation([Ljava.lang.String;@4567f35d,[Ljava.lang.String;@5ffead27,[Ljava.lang.String;@6356695f),Annotation([Ljava.lang.String;@4f18837a,[Ljava.lang.String;@359f7cdf,[Ledu.cmu.lti.nlp.amr.Dependency;@1fa268de),Annotation([Ljava.lang.String;@4f6ee6e4,[Ljava.lang.String;@4466af20,[Ljava.lang.String;@a514af7),Annotation([Ljava.lang.String;@6b927fb,[Ljava.lang.String;@3e58a80e,[Ledu.cmu.lti.nlp.amr.Entity;@4fb61f4a))
AMR:
(d / date-entity, year, 2 / 2010)
(d2 / date-entity, calendar, d / date-entity)
(d2 / date-entity, month, 9 / 9)

Decoded in 18,338 microseconds
Sentence: I agree with the analysis of the thread starter, resolutely bump up. If war really comes, I would like to be Hua Mulan, to protect our home and defend our homeland, to spread the prestige of our China, to pledge to fight to the death defending our national dignity.

NER Entity: (person :name (name :op "Hua" :op "Mulan"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 1-2:  agree => agree-01
Span 4-5:  analysis => analyze-01
Span 31-32:  and => and
Span 42-43:  China => (country :name (name :op "China"))
Span 17-18:  comes => come-01
Span 50-51:  death => die-01
Span 32-33:  defend => defend-01
Span 51-52:  defending => defend-01
Span 47-48:  fight => fight-01
Span 30-31:  home => home
Span 34-35:  homeland => homeland
Span 24-26:  Hua Mulan => (person :name (name :op "Hua" :op "Mulan"))
Span 53-54:  national => nation
Span 45-46:  pledge => pledge-01
Span 39-40:  prestige => prestige
Span 28-29:  protect => protect-01
Span 16-17:  really => really
Span 37-38:  spread => spread-03
Span 15-16:  war => war

 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of pledge in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of fight in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of death in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of defending in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of dignity in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 55
Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(0),national,nation,false), Span(51,52,List(1),defending,defend-01,false), Span(50,51,List(2),death,die-01,false), Span(47,48,List(3),fight,fight-01,false), Span(45,46,List(4),pledge,pledge-01,false), Span(42,43,List(7, 6, 5),China,(country :name (name :op "China")),false), Span(39,40,List(8),prestige,prestige,false), Span(37,38,List(9),spread,spread-03,false), Span(34,35,List(10),homeland,homeland,false), Span(32,33,List(11),defend,defend-01,false), Span(31,32,List(12),and,and,false), Span(30,31,List(13),home,home,false), Span(28,29,List(14),protect,protect-01,false), Span(24,26,List(18, 17, 16, 15),Hua Mulan,(person :name (name :op "Hua" :op "Mulan")),false), Span(17,18,List(19),comes,come-01,false), Span(16,17,List(20),really,really,false), Span(15,16,List(21),war,war,false), Span(4,5,List(22),analysis,analyze-01,false), Span(1,2,List(23),agree,agree-01,false)),Map(2 -> die-01, 5 -> country, 12 -> and, 15 -> person, 8 -> prestige, 21 -> war, 18 -> "Mulan", 7 -> "China", 17 -> "Hua", 1 -> defend-01, 23 -> agree-01, 4 -> pledge-01, 11 -> defend-01, 14 -> protect-01, 20 -> really, 6 -> name, 22 -> analyze-01, 0 -> nation, 9 -> spread-03, 16 -> name, 19 -> come-01, 3 -> fight-01, 10 -> homeland, 13 -> home),Map(w -> war, n -> nation, h -> homeland, h2 -> home, d3 -> defend-01, p2 -> prestige, a3 -> agree-01, s -> spread-03, d -> defend-01, p -> pledge-01, n3 -> name, a -> and, p4 -> person, d2 -> die-01, a2 -> analyze-01, r -> really, c -> country, f -> fight-01, p3 -> protect-01, c2 -> come-01, n2 -> name))),[Ljava.lang.String;@4fb0f2b9,Annotation([Ljava.lang.String;@79924b,[Ljava.lang.String;@7b9a4292,[Ljava.lang.String;@4a94ee4),Annotation([Ljava.lang.String;@4cc451f2,[Ljava.lang.String;@6379eb,[Ledu.cmu.lti.nlp.amr.Dependency;@294425a7),Annotation([Ljava.lang.String;@67d48005,[Ljava.lang.String;@9f116cc,[Ljava.lang.String;@12468a38),Annotation([Ljava.lang.String;@1aa7ecca,[Ljava.lang.String;@59309333,[Ledu.cmu.lti.nlp.amr.Entity;@5876a9af))
AMR:
(a / and, op, d3 / defend-01)
(a / and, op, h2 / home)
(a2 / analyze-01, ARG1, w / war)
(a3 / agree-01, ARG0, a / and)
(a3 / agree-01, ARG1, a2 / analyze-01)
(c / country, name, n2 / name)
(c2 / come-01, ARG1, w / war)
(c2 / come-01, ARG6, r / really)
(d / defend-01, ARG1, d2 / die-01)
(d2 / die-01, ARG1, n / nation)
(d3 / defend-01, ARG1, h / homeland)
(f / fight-01, ARG1, d2 / die-01)
(n2 / name, op, "China")
(n3 / name, op, "Hua")
(n3 / name, op, "Mulan")
(p / pledge-01, ARG0, c / country)
(p / pledge-01, ARG1, f / fight-01)
(p2 / prestige, topic, c / country)
(p3 / protect-01, ARG1, a / and)
(p3 / protect-01, ARG6, p4 / person)
(p4 / person, name, n3 / name)
(s / spread-03, ARG1, p2 / prestige)
(s / spread-03, ARG6, h / homeland)

Decoded in 1,514,116 microseconds
Sentence: I very much wish I had been born in those passionate and upsurging times of Mao Zedong, the Long March, losing my head and shedding my blood, completely extinguishing all the enemies that wrong China, spreading our dragon prestige!

NER Entity: (person :name (name :op "Mao" :op "Zedong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 32-33:  all => all
Span 25-26:  and => and
Span 11-12:  and => and
Span 28-29:  blood => blood
Span 7-8:  born => bear-02
Span 37-38:  China => (country :name (name :op "China"))
Span 30-31:  completely => complete
Span 24-25:  head => head-01
Span 15-17:  Mao Zedong => (person :name (name :op "Mao" :op "Zedong"))
Span 20-21:  March => (date-entity :month 3)
Span 2-3:  much => much
Span 42-43:  prestige => prestige
Span 39-40:  spreading => spread-02
Span 1-2:  very => very

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),prestige,prestige,false), Span(39,40,List(1),spreading,spread-02,false), Span(37,38,List(4, 3, 2),China,(country :name (name :op "China")),false), Span(32,33,List(5),all,all,false), Span(30,31,List(6),completely,complete,false), Span(28,29,List(7),blood,blood,false), Span(25,26,List(8),and,and,false), Span(24,25,List(9),head,head-01,false), Span(20,21,List(11, 10),March,(date-entity :month 3),false), Span(15,17,List(15, 14, 13, 12),Mao Zedong,(person :name (name :op "Mao" :op "Zedong")),false), Span(11,12,List(16),and,and,false), Span(7,8,List(17),born,bear-02,false), Span(2,3,List(18),much,much,false), Span(1,2,List(19),very,very,false)),Map(2 -> country, 5 -> all, 12 -> person, 15 -> "Zedong", 8 -> and, 18 -> much, 7 -> blood, 17 -> bear-02, 1 -> spread-02, 4 -> "China", 11 -> 3, 14 -> "Mao", 6 -> complete, 0 -> prestige, 9 -> head-01, 16 -> and, 19 -> very, 3 -> name, 10 -> date-entity, 13 -> name),Map(n -> name, h -> head-01, b -> blood, b2 -> bear-02, p2 -> person, a3 -> and, s -> spread-02, v -> very, m -> much, d -> date-entity, p -> prestige, a -> all, a2 -> and, c -> country, 3 -> 3, c2 -> complete, n2 -> name))),[Ljava.lang.String;@7ec7ffd3,Annotation([Ljava.lang.String;@5b239d7d,[Ljava.lang.String;@6572421,[Ljava.lang.String;@6b81ce95),Annotation([Ljava.lang.String;@2a798d51,[Ljava.lang.String;@6d763516,[Ledu.cmu.lti.nlp.amr.Dependency;@52bf72b5),Annotation([Ljava.lang.String;@37afeb11,[Ljava.lang.String;@515aebb0,[Ljava.lang.String;@dd8ba08),Annotation([Ljava.lang.String;@245b4bdc,[Ljava.lang.String;@6c64cb25,[Ledu.cmu.lti.nlp.amr.Entity;@6ae5aa72))
AMR:
(a2 / and, op, b / blood)
(a2 / and, op, h / head-01)
(a2 / and, op, p / prestige)
(a3 / and, op, c / country)
(a3 / and, op, p2 / person)
(b2 / bear-02, ARG0, c2 / complete)
(b2 / bear-02, ARG1, a2 / and)
(b2 / bear-02, ARG6, m / much)
(c / country, name, n / name)
(d / date-entity, month, 3 / 3)
(h / head-01, ARG0, p2 / person)
(h / head-01, ARG1, a / all)
(m / much, degree, v / very)
(n / name, op, "China")
(n2 / name, op, "Mao")
(n2 / name, op, "Zedong")
(p2 / person, name, n2 / name)
(s / spread-02, ARG0, d / date-entity)
(s / spread-02, ARG1, p / prestige)

Decoded in 670,232 microseconds
Sentence: How Long are We Going to Tolerate Japan?

NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 7-8:  Japan => (country :name (name :op "Japan"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(2, 1, 0),Japan,(country :name (name :op "Japan")),false)),Map(2 -> "Japan", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@222545dc,Annotation([Ljava.lang.String;@5c5eefef,[Ljava.lang.String;@16293aa2,[Ljava.lang.String;@5158b42f),Annotation([Ljava.lang.String;@595b007d,[Ljava.lang.String;@72d1ad2e,[Ledu.cmu.lti.nlp.amr.Dependency;@2d7275fc),Annotation([Ljava.lang.String;@399f45b1,[Ljava.lang.String;@38c6f217,[Ljava.lang.String;@478190fc),Annotation([Ljava.lang.String;@79e2c065,[Ljava.lang.String;@3a93b025,[Ledu.cmu.lti.nlp.amr.Entity;@35cabb2a))
AMR:
(c / country, name, n / name)
(n / name, op, "Japan")

Decoded in 13,132 microseconds
Sentence: My fellow citizens:

Spans:
Span 2-3:  citizens => citizen
Span 1-2:  fellow => (have-org-role-91 :ARG2 fellow)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),citizens,citizen,false), Span(1,2,List(2, 1),fellow,(have-org-role-91 :ARG2 fellow),false)),Map(2 -> fellow, 1 -> have-org-role-91, 0 -> citizen),Map(h -> have-org-role-91, c -> citizen, f -> fellow))),[Ljava.lang.String;@7e07db1f,Annotation([Ljava.lang.String;@1189dd52,[Ljava.lang.String;@36bc55de,[Ljava.lang.String;@564fabc8),Annotation([Ljava.lang.String;@16d04d3d,[Ljava.lang.String;@49ec71f8,[Ledu.cmu.lti.nlp.amr.Dependency;@1d2adfbe),Annotation([Ljava.lang.String;@36902638,[Ljava.lang.String;@223d2c72,[Ljava.lang.String;@8f4ea7c),Annotation([Ljava.lang.String;@436813f3,[Ljava.lang.String;@74fe5c40,[Ledu.cmu.lti.nlp.amr.Entity;@3febb011))
AMR:
(h / have-org-role-91, ARG1, c / citizen)
(h / have-org-role-91, ARG2, f / fellow)

Decoded in 9,093 microseconds
Sentence: Hello, everyone! We all know the "September 18th" Incident, but now Japan again has a premeditated plan for another "September 18th" on the sea, another "Lugou Bridge on the sea".

NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Lugou" :op "Bridge"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 17-18:  again => again
Span 5-6:  all => all
Span 32-33:  another => another
Span 23-24:  another => another
Span 14-15:  but => contrast-01
Span 2-3:  everyone => everyone
Span 16-17:  Japan => (country :name (name :op "Japan"))
Span 6-7:  know => know-01
Span 34-36:  Lugou Bridge => (country :name (name :op "Lugou" :op "Bridge"))
Span 15-16:  now => now
Span 21-22:  plan => plan-01
Span 38-39:  sea => sea
Span 30-31:  sea => sea
Span 25-26:  September => (date-entity :month 9)
Span 9-10:  September => (date-entity :month 9)

 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of sea in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 40
Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),sea,sea,false), Span(34,36,List(4, 3, 2, 1),Lugou Bridge,(country :name (name :op "Lugou" :op "Bridge")),false), Span(32,33,List(5),another,another,false), Span(30,31,List(6),sea,sea,false), Span(25,26,List(8, 7),September,(date-entity :month 9),false), Span(23,24,List(9),another,another,false), Span(21,22,List(10),plan,plan-01,false), Span(17,18,List(11),again,again,false), Span(16,17,List(14, 13, 12),Japan,(country :name (name :op "Japan")),false), Span(15,16,List(15),now,now,false), Span(14,15,List(16),but,contrast-01,false), Span(9,10,List(18, 17),September,(date-entity :month 9),false), Span(6,7,List(19),know,know-01,false), Span(5,6,List(20),all,all,false), Span(2,3,List(21),everyone,everyone,false)),Map(2 -> name, 5 -> another, 12 -> country, 15 -> now, 8 -> 9, 21 -> everyone, 18 -> 9, 7 -> date-entity, 17 -> date-entity, 1 -> country, 4 -> "Bridge", 11 -> again, 14 -> "Japan", 20 -> all, 6 -> sea, 0 -> sea, 9 -> another, 16 -> contrast-01, 19 -> know-01, 3 -> "Lugou", 10 -> plan-01, 13 -> name),Map(e -> everyone, n -> name, s2 -> sea, k -> know-01, 92 -> 9, a3 -> again, s -> sea, d -> date-entity, p -> plan-01, c3 -> contrast-01, a -> another, n3 -> now, d2 -> date-entity, a2 -> another, c -> country, 9 -> 9, c2 -> country, n2 -> name, a4 -> all))),[Ljava.lang.String;@10e31a9a,Annotation([Ljava.lang.String;@131774fe,[Ljava.lang.String;@158d2680,[Ljava.lang.String;@77847718),Annotation([Ljava.lang.String;@7f3b84b8,[Ljava.lang.String;@57a3af25,[Ledu.cmu.lti.nlp.amr.Dependency;@2b662a77),Annotation([Ljava.lang.String;@7f0eb4b4,[Ljava.lang.String;@5c33f1a9,[Ljava.lang.String;@1623b78d),Annotation([Ljava.lang.String;@c8c12ac,[Ljava.lang.String;@6adbc9d,[Ledu.cmu.lti.nlp.amr.Entity;@4550bb58))
AMR:
(a / another, calendar, c / country)
(a3 / again, calendar, n3 / now)
(c / country, location, s / sea)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / contrast-01, ARG1, d2 / date-entity)
(c3 / contrast-01, ARG6, c2 / country)
(c3 / contrast-01, manner, n3 / now)
(d / date-entity, month, 9 / 9)
(d2 / date-entity, month, 92 / 9)
(d2 / date-entity, poss, e / everyone)
(k / know-01, ARG0, d / date-entity)
(k / know-01, ARG1, e / everyone)
(k / know-01, ARG6, a4 / all)
(n / name, op, "Bridge")
(n / name, op, "Lugou")
(n2 / name, op, "Japan")
(p / plan-01, ARG0, c / country)
(p / plan-01, ARG1, a3 / again)
(p / plan-01, ARG6, a2 / another)
(s2 / sea, calendar, a / another)

Decoded in 1,167,266 microseconds
Sentence: Japan surprisingly defied the strong condemnation of the whole world, openly invaded our country's sacred territory, "the Diaoyu Islands".

NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 5-6:  condemnation => condemn-01
Span 14-15:  country => country
Span 2-3:  defied => defy-01
Span 21-23:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Span 12-13:  invaded => invade-01
Span 0-1:  Japan => (country :name (name :op "Japan"))
Span 11-12:  openly => open
Span 4-5:  strong => strong
Span 1-2:  surprisingly => surprise-01
Span 17-18:  territory => territory
Span 8-9:  whole => whole
Span 9-10:  world => world

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,23,List(2, 1, 0),Diaoyu Islands,(name :op "Islands" :op "Diaoyu"),false), Span(17,18,List(3),territory,territory,false), Span(14,15,List(4),country,country,false), Span(12,13,List(5),invaded,invade-01,false), Span(11,12,List(6),openly,open,false), Span(9,10,List(7),world,world,false), Span(8,9,List(8),whole,whole,false), Span(5,6,List(9),condemnation,condemn-01,false), Span(4,5,List(10),strong,strong,false), Span(2,3,List(11),defied,defy-01,false), Span(1,2,List(12),surprisingly,surprise-01,false), Span(0,1,List(15, 14, 13),Japan,(country :name (name :op "Japan")),false)),Map(2 -> "Diaoyu", 5 -> invade-01, 12 -> surprise-01, 15 -> "Japan", 8 -> whole, 7 -> world, 1 -> "Islands", 4 -> country, 11 -> defy-01, 14 -> name, 6 -> open, 0 -> name, 9 -> condemn-01, 3 -> territory, 10 -> strong, 13 -> country),Map(n -> name, w -> world, s2 -> surprise-01, t -> territory, s -> strong, d -> defy-01, c3 -> country, w2 -> whole, i -> invade-01, c -> country, o -> open, c2 -> condemn-01, n2 -> name))),[Ljava.lang.String;@4ec4f3a0,Annotation([Ljava.lang.String;@223191a6,[Ljava.lang.String;@49139829,[Ljava.lang.String;@9597028),Annotation([Ljava.lang.String;@6069db50,[Ljava.lang.String;@4efbca5a,[Ledu.cmu.lti.nlp.amr.Dependency;@1b7cc17c),Annotation([Ljava.lang.String;@59662a0b,[Ljava.lang.String;@77fbd92c,[Ljava.lang.String;@67c27493),Annotation([Ljava.lang.String;@1a482e36,[Ljava.lang.String;@72967906,[Ledu.cmu.lti.nlp.amr.Entity;@5b8dfcc1))
AMR:
(c2 / condemn-01, ARG1, w / world)
(c2 / condemn-01, manner, s / strong)
(c3 / country, name, n2 / name)
(d / defy-01, ARG0, c3 / country)
(d / defy-01, ARG1, c2 / condemn-01)
(i / invade-01, ARG0, c3 / country)
(i / invade-01, ARG1, t / territory)
(i / invade-01, manner, o / open)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(n2 / name, op, "Japan")
(s2 / surprise-01, ARG0, n / name)
(s2 / surprise-01, ARG1, c3 / country)
(t / territory, poss, c / country)
(w / world, mod, w2 / whole)

Decoded in 704,605 microseconds
Sentence: As we all know, the "Diaoyu Islands" have always belonged to China; due to historical reasons, what originally belongs us has become controversial.

NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 15-16:  ; => and
Span 2-3:  all => all
Span 11-12:  always => always
Span 26-27:  become => become-01
Span 12-13:  belonged => belong-01
Span 14-15:  China => (country :name (name :op "China"))
Span 27-28:  controversial => controversy
Span 7-9:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Span 3-4:  know => know-01
Span 22-23:  originally => original
Span 19-20:  reasons => reason-01
Span 1-2:  we => we

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),controversial,controversy,false), Span(26,27,List(1),become,become-01,false), Span(22,23,List(2),originally,original,false), Span(19,20,List(3),reasons,reason-01,false), Span(15,16,List(4),;,and,false), Span(14,15,List(7, 6, 5),China,(country :name (name :op "China")),false), Span(12,13,List(8),belonged,belong-01,false), Span(11,12,List(9),always,always,false), Span(7,9,List(12, 11, 10),Diaoyu Islands,(name :op "Islands" :op "Diaoyu"),false), Span(3,4,List(13),know,know-01,false), Span(2,3,List(14),all,all,false), Span(1,2,List(15),we,we,false)),Map(2 -> original, 5 -> country, 12 -> "Diaoyu", 15 -> we, 8 -> belong-01, 7 -> "China", 1 -> become-01, 4 -> and, 11 -> "Islands", 14 -> all, 6 -> name, 0 -> controversy, 9 -> always, 3 -> reason-01, 10 -> name, 13 -> know-01),Map(n -> name, w -> we, b -> become-01, k -> know-01, b2 -> belong-01, a3 -> all, a -> and, r -> reason-01, a2 -> always, c -> controversy, o -> original, c2 -> country, n2 -> name))),[Ljava.lang.String;@2f9f7dcf,Annotation([Ljava.lang.String;@747ddf94,[Ljava.lang.String;@35e2d654,[Ljava.lang.String;@1bd4fdd),Annotation([Ljava.lang.String;@55183b20,[Ljava.lang.String;@4f83df68,[Ledu.cmu.lti.nlp.amr.Dependency;@6cf0e0ba),Annotation([Ljava.lang.String;@7d8995e,[Ljava.lang.String;@130d63be,[Ljava.lang.String;@42a48628),Annotation([Ljava.lang.String;@293a5bf6,[Ljava.lang.String;@6aeb35e6,[Ledu.cmu.lti.nlp.amr.Entity;@1283bb96))
AMR:
(a / and, op, c2 / country)
(b / become-01, ARG1, c2 / country)
(b / become-01, ARG2, c / controversy)
(b / become-01, ARG6, r / reason-01)
(b2 / belong-01, ARG1, c2 / country)
(b2 / belong-01, condition, k / know-01)
(b2 / belong-01, time, a2 / always)
(c2 / country, name, n / name)
(k / know-01, ARG0, w / we)
(k / know-01, ARG1, a3 / all)
(k / know-01, ARG6, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Diaoyu")
(n2 / name, op, "Islands")
(r / reason-01, ARG1, o / original)

Decoded in 566,678 microseconds
Sentence: My fellow citizens, ours is ours, what need is there to negotiate! Japan thus goes even further - wants to create a fact of occupation. Can we allow this? No - absolutely not!

NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 31-32:  allow => allow-01
Span 2-3:  citizens => citizen
Span 23-24:  create => create-01
Span 18-19:  even => even
Span 25-26:  fact => fact
Span 1-2:  fellow => (have-org-role-91 :ARG2 fellow)
Span 19-20:  further => further
Span 17-18:  goes => go-02
Span 15-16:  Japan => (country :name (name :op "Japan"))
Span 9-10:  need => need-01
Span 13-14:  negotiate => negotiate-01
Span 34-35:  No => -
Span 27-28:  occupation => occupy-01
Span 32-33:  this => this
Span 21-22:  wants => want-01
Span 30-31:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of thus in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of goes in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of further in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of wants in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of create in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of fact in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of occupation in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of Can in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of allow in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of No in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of absolutely in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 38
Langrangian relaxation converged after 70 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),No,-,false), Span(32,33,List(1),this,this,false), Span(31,32,List(2),allow,allow-01,false), Span(30,31,List(3),we,we,false), Span(27,28,List(4),occupation,occupy-01,false), Span(25,26,List(5),fact,fact,false), Span(23,24,List(6),create,create-01,false), Span(21,22,List(7),wants,want-01,false), Span(19,20,List(8),further,further,false), Span(18,19,List(9),even,even,false), Span(17,18,List(10),goes,go-02,false), Span(15,16,List(13, 12, 11),Japan,(country :name (name :op "Japan")),false), Span(13,14,List(14),negotiate,negotiate-01,false), Span(9,10,List(15),need,need-01,false), Span(2,3,List(16),citizens,citizen,false), Span(1,2,List(18, 17),fellow,(have-org-role-91 :ARG2 fellow),false)),Map(2 -> allow-01, 5 -> fact, 12 -> name, 15 -> need-01, 8 -> further, 18 -> fellow, 7 -> want-01, 17 -> have-org-role-91, 1 -> this, 4 -> occupy-01, 11 -> country, 14 -> negotiate-01, 6 -> create-01, 0 -> -, 9 -> even, 16 -> citizen, 3 -> we, 10 -> go-02, 13 -> "Japan"),Map(e -> even, w -> we, n -> name, h -> have-org-role-91, t -> this, g -> go-02, c3 -> citizen, n3 -> need-01, a -> allow-01, f3 -> fellow, w2 -> want-01, - -> -, c -> create-01, f2 -> further, f -> fact, o -> occupy-01, c2 -> country, n2 -> negotiate-01))),[Ljava.lang.String;@3c19aaa5,Annotation([Ljava.lang.String;@3349e9bb,[Ljava.lang.String;@409bf450,[Ljava.lang.String;@38d8f54a),Annotation([Ljava.lang.String;@49e53c76,[Ljava.lang.String;@351d00c0,[Ledu.cmu.lti.nlp.amr.Dependency;@2a3b5b47),Annotation([Ljava.lang.String;@55b699ef,[Ljava.lang.String;@35d019a3,[Ljava.lang.String;@689604d9),Annotation([Ljava.lang.String;@18078bef,[Ljava.lang.String;@799f10e1,[Ledu.cmu.lti.nlp.amr.Entity;@4c371370))
AMR:
(a / allow-01, ARG0, w / we)
(a / allow-01, ARG1, - / -)
(a / allow-01, ARG6, t / this)
(c / create-01, ARG1, f / fact)
(c2 / country, name, n / name)
(g / go-02, ARG0, c2 / country)
(g / go-02, ARG1, f2 / further)
(g / go-02, ARG6, e / even)
(h / have-org-role-91, ARG0, c3 / citizen)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, f3 / fellow)
(n / name, op, "Japan")
(n2 / negotiate-01, ARG1, c2 / country)
(n2 / negotiate-01, ARG6, w2 / want-01)
(n3 / need-01, ARG0, c2 / country)
(n3 / need-01, ARG1, o / occupy-01)
(o / occupy-01, ARG1, w / we)
(w2 / want-01, ARG1, c / create-01)

Decoded in 1,691,752 microseconds
Sentence: My fellow citizens, Japan's militarism has brought the people of Asia grave disasters.

NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Asia"))
NER Entity: (country :name (name :op "Asia"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 12-13:  Asia => (continent :name (name :op "Asia"))
Span 8-9:  brought => bring-01
Span 2-3:  citizens => citizen
Span 1-2:  fellow => (have-org-role-91 :ARG2 fellow)
Span 13-14:  grave => grave
Span 4-5:  Japan => (country :name (name :op "Japan"))
Span 6-7:  militarism => militarism
Span 10-11:  people => people

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),grave,grave,false), Span(12,13,List(3, 2, 1),Asia,(continent :name (name :op "Asia")),false), Span(10,11,List(4),people,people,false), Span(8,9,List(5),brought,bring-01,false), Span(6,7,List(6),militarism,militarism,false), Span(4,5,List(9, 8, 7),Japan,(country :name (name :op "Japan")),false), Span(2,3,List(10),citizens,citizen,false), Span(1,2,List(12, 11),fellow,(have-org-role-91 :ARG2 fellow),false)),Map(2 -> name, 5 -> bring-01, 12 -> fellow, 8 -> name, 7 -> country, 1 -> continent, 4 -> people, 11 -> have-org-role-91, 6 -> militarism, 0 -> grave, 9 -> "Japan", 3 -> "Asia", 10 -> citizen),Map(n -> name, h -> have-org-role-91, b -> bring-01, m -> militarism, p -> people, g -> grave, c3 -> citizen, c -> continent, f -> fellow, n2 -> name, c2 -> country))),[Ljava.lang.String;@145f66e3,Annotation([Ljava.lang.String;@3023df74,[Ljava.lang.String;@313ac989,[Ljava.lang.String;@4562e04d),Annotation([Ljava.lang.String;@2a65fe7c,[Ljava.lang.String;@4135c3b,[Ledu.cmu.lti.nlp.amr.Dependency;@6302bbb1),Annotation([Ljava.lang.String;@31304f14,[Ljava.lang.String;@34a3d150,[Ljava.lang.String;@2a4fb17b),Annotation([Ljava.lang.String;@5c6648b0,[Ljava.lang.String;@6f1de4c7,[Ledu.cmu.lti.nlp.amr.Entity;@459e9125))
AMR:
(b / bring-01, ARG0, c3 / citizen)
(b / bring-01, ARG1, p / people)
(b / bring-01, ARG6, m / militarism)
(c / continent, name, n / name)
(c2 / country, name, n2 / name)
(g / grave, location, c / continent)
(h / have-org-role-91, ARG0, c3 / citizen)
(h / have-org-role-91, ARG1, c / continent)
(h / have-org-role-91, ARG2, f / fellow)
(m / militarism, mod, c2 / country)
(n / name, op, "Asia")
(n2 / name, op, "Japan")

Decoded in 559,594 microseconds
Sentence: Especially China suffered the ravages of Japan for as long as several decades.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 1-2:  China => (country :name (name :op "China"))
Span 12-13:  decades => (temporal-quantity :unit decade)
Span 6-7:  Japan => (country :name (name :op "Japan"))
Span 9-10:  long => long
Span 11-12:  several => several
Span 2-3:  suffered => suffer-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(1, 0),decades,(temporal-quantity :unit decade),false), Span(11,12,List(2),several,several,false), Span(9,10,List(3),long,long,false), Span(6,7,List(6, 5, 4),Japan,(country :name (name :op "Japan")),false), Span(2,3,List(7),suffered,suffer-01,false), Span(1,2,List(10, 9, 8),China,(country :name (name :op "China")),false)),Map(2 -> several, 5 -> name, 8 -> country, 7 -> suffer-01, 1 -> decade, 4 -> country, 6 -> "Japan", 9 -> name, 0 -> temporal-quantity, 10 -> "China", 3 -> long),Map(n -> name, s2 -> suffer-01, t -> temporal-quantity, s -> several, d -> decade, c -> country, l -> long, n2 -> name, c2 -> country))),[Ljava.lang.String;@128d2484,Annotation([Ljava.lang.String;@7cc0cdad,[Ljava.lang.String;@7c7b252e,[Ljava.lang.String;@4d5d943d),Annotation([Ljava.lang.String;@368f2016,[Ljava.lang.String;@4c583ecf,[Ledu.cmu.lti.nlp.amr.Dependency;@692f203f),Annotation([Ljava.lang.String;@48f2bd5b,[Ljava.lang.String;@7b2bbc3,[Ljava.lang.String;@a1153bc),Annotation([Ljava.lang.String;@1aafa419,[Ljava.lang.String;@47eaca72,[Ledu.cmu.lti.nlp.amr.Entity;@55141def))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(l / long, calendar, s / several)
(n / name, op, "Japan")
(n2 / name, op, "China")
(s2 / suffer-01, ARG0, c2 / country)
(s2 / suffer-01, ARG1, l / long)
(s2 / suffer-01, location, c / country)
(t / temporal-quantity, mod, s / several)
(t / temporal-quantity, unit, d / decade)

Decoded in 257,324 microseconds
Sentence: In the Northeast, Japanese Unit 731 cruelly conducted human body experiments on living people of China, Korea and other countries, the method of which were extremely brutal; the Nanjing Massacre added a layer of blood to the ancient capital which will never fade away; the big bloody battles at Hengyang and Changsha laid bare the bones of the dead over a thousand kilometers and killed off everything ...

NER Entity: (country :name (name :op "Northeast"))
NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Korea"))
NER Entity: (country :name (name :op "Nanjing"))
NER Entity: (country :name (name :op "Hengyang"))
NER Entity: (country :name (name :op "Changsha"))
NER Entity: (country :name (name :op "Nanjing"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 48-49:  ; => and
Span 30-31:  ; => and
Span 34-35:  added => add-01
Span 68-69:  and => and
Span 55-56:  and => and
Span 19-20:  and => and
Span 47-48:  away => away
Span 52-53:  battles => battle-01
Span 50-51:  big => big
Span 38-39:  blood => blood
Span 10-11:  body => body
Span 29-30:  brutal => brutal
Span 42-43:  capital => capital
Span 16-17:  China => (country :name (name :op "China"))
Span 8-9:  conducted => conduct-01
Span 21-22:  countries => country
Span 71-72:  everything => everything
Span 11-12:  experiments => experiment-01
Span 28-29:  extremely => extreme
Span 9-10:  human => human
Span 4-5:  Japanese => (country :name (name :op "Japan"))
Span 69-70:  killed => kill-01
Span 67-68:  kilometers => (distance-quantity :unit kilometer)
Span 13-14:  living => live-01
Span 24-25:  method => method
Span 32-33:  Nanjing => (name :op "Nanjing")
Span 70-71:  off => off
Span 20-21:  other => other
Span 64-65:  over => over
Span 14-15:  people => people

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(71,72,List(0),everything,everything,false), Span(70,71,List(1),off,off,false), Span(69,70,List(2),killed,kill-01,false), Span(68,69,List(3),and,and,false), Span(67,68,List(5, 4),kilometers,(distance-quantity :unit kilometer),false), Span(64,65,List(6),over,over,false), Span(55,56,List(7),and,and,false), Span(52,53,List(8),battles,battle-01,false), Span(50,51,List(9),big,big,false), Span(48,49,List(10),;,and,false), Span(47,48,List(11),away,away,false), Span(42,43,List(12),capital,capital,false), Span(38,39,List(13),blood,blood,false), Span(34,35,List(14),added,add-01,false), Span(32,33,List(16, 15),Nanjing,(name :op "Nanjing"),false), Span(30,31,List(17),;,and,false), Span(29,30,List(18),brutal,brutal,false), Span(28,29,List(19),extremely,extreme,false), Span(24,25,List(20),method,method,false), Span(21,22,List(21),countries,country,false), Span(20,21,List(22),other,other,false), Span(19,20,List(23),and,and,false), Span(16,17,List(26, 25, 24),China,(country :name (name :op "China")),false), Span(14,15,List(27),people,people,false), Span(13,14,List(28),living,live-01,false), Span(11,12,List(29),experiments,experiment-01,false), Span(10,11,List(30),body,body,false), Span(9,10,List(31),human,human,false), Span(8,9,List(32),conducted,conduct-01,false), Span(4,5,List(35, 34, 33),Japanese,(country :name (name :op "Japan")),false)),Map(30 -> body, 2 -> kill-01, 5 -> kilometer, 33 -> country, 27 -> people, 12 -> capital, 8 -> battle-01, 15 -> name, 21 -> country, 18 -> brutal, 24 -> country, 35 -> "Japan", 7 -> and, 1 -> off, 17 -> and, 23 -> and, 26 -> "China", 4 -> distance-quantity, 11 -> away, 32 -> conduct-01, 14 -> add-01, 29 -> experiment-01, 20 -> method, 34 -> name, 28 -> live-01, 6 -> over, 9 -> big, 0 -> everything, 22 -> other, 16 -> "Nanjing", 19 -> extreme, 10 -> and, 3 -> and, 31 -> human, 25 -> name, 13 -> blood),Map(e -> everything, a7 -> and, b3 -> blood, n -> name, k2 -> kilometer, h -> human, b -> battle-01, k -> kill-01, b2 -> big, o3 -> other, b5 -> body, e2 -> extreme, c4 -> conduct-01, a3 -> and, a6 -> and, d -> distance-quantity, m -> method, p -> people, n3 -> name, a -> and, c3 -> country, o2 -> over, a5 -> add-01, b4 -> brutal, a2 -> and, c -> capital, l -> live-01, o -> off, e3 -> experiment-01, c2 -> country, n2 -> name, a4 -> away, c5 -> country))),[Ljava.lang.String;@55182842,Annotation([Ljava.lang.String;@3270d194,[Ljava.lang.String;@235834f2,[Ljava.lang.String;@5656be13),Annotation([Ljava.lang.String;@4218d6a3,[Ljava.lang.String;@76505305,[Ledu.cmu.lti.nlp.amr.Dependency;@14cd1699),Annotation([Ljava.lang.String;@77888435,[Ljava.lang.String;@73a1e9a9,[Ljava.lang.String;@71d44a3),Annotation([Ljava.lang.String;@7b98f307,[Ljava.lang.String;@4802796d,[Ledu.cmu.lti.nlp.amr.Entity;@34123d65))
AMR:
(a / and, op, c4 / conduct-01)
(a / and, op, d / distance-quantity)
(a / and, op, k / kill-01)
(a2 / and, op, a6 / and)
(a3 / and, op, b4 / brutal)
(a3 / and, op, k / kill-01)
(a5 / add-01, ARG0, a4 / away)
(a5 / add-01, ARG1, c / capital)
(a5 / add-01, ARG6, a6 / and)
(a6 / and, op, b4 / brutal)
(a6 / and, op, c5 / country)
(a7 / and, op, c2 / country)
(a7 / and, op, c3 / country)
(b / battle-01, ARG1, a2 / and)
(b / battle-01, mod, b2 / big)
(b3 / blood, mod, c / capital)
(b4 / brutal, mod, e2 / extreme)
(b5 / body, mod, h / human)
(c2 / country, mod, o3 / other)
(c3 / country, name, n2 / name)
(c4 / conduct-01, ARG1, e3 / experiment-01)
(c5 / country, name, n3 / name)
(d / distance-quantity, unit, k2 / kilometer)
(e3 / experiment-01, ARG0, n / name)
(e3 / experiment-01, ARG1, b5 / body)
(e3 / experiment-01, ARG2, l / live-01)
(k / kill-01, ARG0, m / method)
(k / kill-01, ARG1, e / everything)
(k / kill-01, ARG6, o / off)
(l / live-01, ARG1, a7 / and)
(l / live-01, location, p / people)
(n / name, op, "Nanjing")
(n2 / name, op, "China")
(n3 / name, op, "Japan")
(o2 / over, op, d / distance-quantity)

Decoded in 2,185,628 microseconds
Sentence: My fellow citizens, of the heinous crimes committed by Japan in China, there are too many instances to cite, difficult to record without exhausting all bamboo strips.

NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 27-28:  all => all
Span 12-13:  China => (country :name (name :op "China"))
Span 20-21:  cite => cite-01
Span 2-3:  citizens => citizen
Span 8-9:  committed => commit-01
Span 7-8:  crimes => crime
Span 22-23:  difficult => difficult
Span 1-2:  fellow => (have-org-role-91 :ARG2 fellow)
Span 10-11:  Japan => (country :name (name :op "Japan"))
Span 17-18:  many => many
Span 24-25:  record => record
Span 16-17:  too => too

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),all,all,false), Span(24,25,List(1),record,record,false), Span(22,23,List(2),difficult,difficult,false), Span(20,21,List(3),cite,cite-01,false), Span(17,18,List(4),many,many,false), Span(16,17,List(5),too,too,false), Span(12,13,List(8, 7, 6),China,(country :name (name :op "China")),false), Span(10,11,List(11, 10, 9),Japan,(country :name (name :op "Japan")),false), Span(8,9,List(12),committed,commit-01,false), Span(7,8,List(13),crimes,crime,false), Span(2,3,List(14),citizens,citizen,false), Span(1,2,List(16, 15),fellow,(have-org-role-91 :ARG2 fellow),false)),Map(2 -> difficult, 5 -> too, 12 -> commit-01, 15 -> have-org-role-91, 8 -> "China", 7 -> name, 1 -> record, 4 -> many, 11 -> "Japan", 14 -> citizen, 6 -> country, 0 -> all, 9 -> country, 16 -> fellow, 3 -> cite-01, 10 -> name, 13 -> crime),Map(n -> name, h -> have-org-role-91, t -> too, c4 -> commit-01, d -> difficult, m -> many, a -> all, c3 -> country, c6 -> citizen, r -> record, c -> cite-01, f -> fellow, c2 -> country, n2 -> name, c5 -> crime))),[Ljava.lang.String;@59474f18,Annotation([Ljava.lang.String;@65fb9ffc,[Ljava.lang.String;@3e694b3f,[Ljava.lang.String;@1bb5a082),Annotation([Ljava.lang.String;@78691363,[Ljava.lang.String;@41d477ed,[Ledu.cmu.lti.nlp.amr.Dependency;@3590fc5b),Annotation([Ljava.lang.String;@397fbdb,[Ljava.lang.String;@33d512c1,[Ljava.lang.String;@515c6049),Annotation([Ljava.lang.String;@639c2c1d,[Ljava.lang.String;@5fe94a96,[Ledu.cmu.lti.nlp.amr.Entity;@443118b0))
AMR:
(c / cite-01, ARG0, a / all)
(c / cite-01, ARG1, d / difficult)
(c / cite-01, ARG6, t / too)
(c / cite-01, quant, m / many)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / commit-01, ARG1, c5 / crime)
(c4 / commit-01, ARG2, c2 / country)
(c4 / commit-01, location, c3 / country)
(c6 / citizen, poss, t / too)
(d / difficult, domain, r / record)
(h / have-org-role-91, ARG0, c6 / citizen)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, f / fellow)
(n / name, op, "China")
(n2 / name, op, "Japan")

Decoded in 730,729 microseconds
Sentence: It's just as if those ten million deceased souls who lost their lives are wandering over the Pacific Ocean, finding it difficult to rest in peace.

NER Entity: (country :name (name :op "Pacific" :op "Ocean"))
Spans:
Span 23-24:  difficult => difficult
Span 21-22:  finding => find-01
Span 22-23:  it => it
Span 0-1:  It => it
Span 2-3:  just => just
Span 13-14:  lives => live-01
Span 11-12:  lost => lose-02
Span 16-17:  over => over
Span 18-20:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))
Span 27-28:  peace => peace
Span 25-26:  rest => rest
Span 6-7:  ten => ten

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),peace,peace,false), Span(25,26,List(1),rest,rest,false), Span(23,24,List(2),difficult,difficult,false), Span(22,23,List(3),it,it,false), Span(21,22,List(4),finding,find-01,false), Span(18,20,List(8, 7, 6, 5),Pacific Ocean,(ocean :name (name :op "Ocean" :op "Pacific")),false), Span(16,17,List(9),over,over,false), Span(13,14,List(10),lives,live-01,false), Span(11,12,List(11),lost,lose-02,false), Span(6,7,List(12),ten,ten,false), Span(2,3,List(13),just,just,false), Span(0,1,List(14),It,it,false)),Map(2 -> difficult, 5 -> ocean, 12 -> ten, 8 -> "Pacific", 7 -> "Ocean", 1 -> rest, 4 -> find-01, 11 -> lose-02, 14 -> it, 6 -> name, 0 -> peace, 9 -> over, 3 -> it, 10 -> live-01, 13 -> just),Map(n -> name, t -> ten, j -> just, d -> difficult, p -> peace, o2 -> over, i2 -> it, l2 -> lose-02, r -> rest, i -> it, l -> live-01, f -> find-01, o -> ocean))),[Ljava.lang.String;@765d7657,Annotation([Ljava.lang.String;@74235045,[Ljava.lang.String;@618b19ad,[Ljava.lang.String;@2d3379b4),Annotation([Ljava.lang.String;@30c15d8b,[Ljava.lang.String;@5e0e82ae,[Ledu.cmu.lti.nlp.amr.Dependency;@6771beb3),Annotation([Ljava.lang.String;@51399530,[Ljava.lang.String;@6b2ea799,[Ljava.lang.String;@411f53a0),Annotation([Ljava.lang.String;@2b71e916,[Ljava.lang.String;@36fc695d,[Ledu.cmu.lti.nlp.amr.Entity;@28701274))
AMR:
(d / difficult, domain, i / it)
(d / difficult, domain, r / rest)
(f / find-01, ARG0, i2 / it)
(f / find-01, ARG1, d / difficult)
(f / find-01, ARG6, o2 / over)
(j / just, domain, i2 / it)
(l / live-01, ARG0, t / ten)
(l / live-01, ARG1, f / find-01)
(l2 / lose-02, ARG1, l / live-01)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)
(o2 / over, op, o / ocean)
(r / rest, location, p / peace)

Decoded in 368,862 microseconds
Sentence: All the people who experienced that era must still remember it vividly; even our younger generations also will cry with tears streaming down our cheeks, and our blood boils with indignation, whenever we turn to this page of history and read!

Spans:
Span 12-13:  ; => and
Span 0-1:  All => all
Span 17-18:  also => also
Span 42-43:  and => and
Span 27-28:  and => and
Span 29-30:  blood => blood
Span 23-24:  down => down
Span 6-7:  era => era
Span 13-14:  even => even
Span 4-5:  experienced => experience-01
Span 41-42:  history => history
Span 10-11:  it => it
Span 39-40:  page => page
Span 2-3:  people => people
Span 43-44:  read => read-01
Span 8-9:  still => still
Span 38-39:  this => this
Span 36-37:  turn => turn-07
Span 35-36:  we => we
Span 15-16:  younger => young

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),read,read-01,false), Span(42,43,List(1),and,and,false), Span(41,42,List(2),history,history,false), Span(39,40,List(3),page,page,false), Span(38,39,List(4),this,this,false), Span(36,37,List(5),turn,turn-07,false), Span(35,36,List(6),we,we,false), Span(29,30,List(7),blood,blood,false), Span(27,28,List(8),and,and,false), Span(23,24,List(9),down,down,false), Span(17,18,List(10),also,also,false), Span(15,16,List(11),younger,young,false), Span(13,14,List(12),even,even,false), Span(12,13,List(13),;,and,false), Span(10,11,List(14),it,it,false), Span(8,9,List(15),still,still,false), Span(6,7,List(16),era,era,false), Span(4,5,List(17),experienced,experience-01,false), Span(2,3,List(18),people,people,false), Span(0,1,List(19),All,all,false)),Map(2 -> history, 5 -> turn-07, 12 -> even, 15 -> still, 8 -> and, 18 -> people, 7 -> blood, 17 -> experience-01, 1 -> and, 4 -> this, 11 -> young, 14 -> it, 6 -> we, 0 -> read-01, 9 -> down, 16 -> era, 19 -> all, 3 -> page, 10 -> also, 13 -> and),Map(e -> even, w -> we, h -> history, t -> this, b -> blood, p2 -> people, e2 -> era, a3 -> also, s -> still, d -> down, p -> page, y -> young, a -> and, a5 -> all, t2 -> turn-07, i -> it, r -> read-01, a2 -> and, e3 -> experience-01, a4 -> and))),[Ljava.lang.String;@62379589,Annotation([Ljava.lang.String;@4afcd809,[Ljava.lang.String;@175c2241,[Ljava.lang.String;@5bf0d49),Annotation([Ljava.lang.String;@5b7a5baa,[Ljava.lang.String;@776aec5c,[Ledu.cmu.lti.nlp.amr.Dependency;@1d296da),Annotation([Ljava.lang.String;@7c7a06ec,[Ljava.lang.String;@75d4a5c2,[Ljava.lang.String;@557caf28),Annotation([Ljava.lang.String;@408d971b,[Ljava.lang.String;@6c6cb480,[Ledu.cmu.lti.nlp.amr.Entity;@3c46e67a))
AMR:
(a / and, op, a2 / and)
(a / and, op, r / read-01)
(a / and, op, t2 / turn-07)
(a2 / and, mod, a3 / also)
(a2 / and, op, e3 / experience-01)
(a4 / and, calendar, e / even)
(a4 / and, op, e3 / experience-01)
(e3 / experience-01, ARG0, p2 / people)
(e3 / experience-01, ARG1, e2 / era)
(e3 / experience-01, ARG6, i / it)
(e3 / experience-01, time, s / still)
(p / page, mod, t / this)
(p2 / people, quant, a5 / all)
(r / read-01, ARG0, d / down)
(r / read-01, ARG1, b / blood)
(t2 / turn-07, ARG0, w / we)
(t2 / turn-07, ARG1, y / young)
(t2 / turn-07, ARG2, h / history)
(t2 / turn-07, ARG4, p / page)

Decoded in 1,045,496 microseconds
Sentence: Now Japan actually wants to reverse the verdict on the history of its aggression - fellow citizens, fellow Chinese in Asia, wake up!

NER Entity: (country :name (name :op "Japan"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Asia"))
NER Entity: (country :name (name :op "Asia"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 2-3:  actually => actual
Span 13-14:  aggression => aggress-00
Span 21-22:  Asia => (continent :name (name :op "Asia"))
Span 19-20:  Chinese => (country :name (name :op "China"))
Span 16-17:  citizens => citizen
Span 18-19:  fellow => (have-org-role-91 :ARG2 fellow)
Span 15-16:  fellow => (have-org-role-91 :ARG2 fellow)
Span 10-11:  history => history
Span 1-2:  Japan => (country :name (name :op "Japan"))
Span 5-6:  reverse => reverse-01
Span 7-8:  verdict => verdict
Span 23-24:  wake => wake
Span 3-4:  wants => want-01

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),wake,wake,false), Span(21,22,List(3, 2, 1),Asia,(continent :name (name :op "Asia")),false), Span(19,20,List(6, 5, 4),Chinese,(country :name (name :op "China")),false), Span(18,19,List(8, 7),fellow,(have-org-role-91 :ARG2 fellow),false), Span(16,17,List(9),citizens,citizen,false), Span(15,16,List(11, 10),fellow,(have-org-role-91 :ARG2 fellow),false), Span(13,14,List(12),aggression,aggress-00,false), Span(10,11,List(13),history,history,false), Span(7,8,List(14),verdict,verdict,false), Span(5,6,List(15),reverse,reverse-01,false), Span(3,4,List(16),wants,want-01,false), Span(2,3,List(17),actually,actual,false), Span(1,2,List(20, 19, 18),Japan,(country :name (name :op "Japan")),false)),Map(2 -> name, 5 -> name, 12 -> aggress-00, 15 -> reverse-01, 8 -> fellow, 18 -> country, 7 -> have-org-role-91, 17 -> actual, 1 -> continent, 4 -> country, 11 -> fellow, 14 -> verdict, 20 -> "Japan", 6 -> "China", 0 -> wake, 9 -> citizen, 16 -> want-01, 19 -> name, 3 -> "Asia", 10 -> have-org-role-91, 13 -> history),Map(w -> wake, n -> name, h -> have-org-role-91, h2 -> have-org-role-91, c4 -> country, v -> verdict, n3 -> name, c3 -> citizen, a -> aggress-00, w2 -> want-01, a2 -> actual, r -> reverse-01, c -> continent, h3 -> history, f2 -> fellow, f -> fellow, c2 -> country, n2 -> name))),[Ljava.lang.String;@c730b35,Annotation([Ljava.lang.String;@206a70ef,[Ljava.lang.String;@292b08d6,[Ljava.lang.String;@22555ebf),Annotation([Ljava.lang.String;@36ebc363,[Ljava.lang.String;@45752059,[Ledu.cmu.lti.nlp.amr.Dependency;@34e9fd99),Annotation([Ljava.lang.String;@3c41ed1d,[Ljava.lang.String;@54d9d12d,[Ljava.lang.String;@38425407),Annotation([Ljava.lang.String;@43bc63a3,[Ljava.lang.String;@702657cc,[Ledu.cmu.lti.nlp.amr.Entity;@6a6cb05c))
AMR:
(a / aggress-00, ARG1, c / continent)
(c / continent, name, n / name)
(c2 / country, mod, h2 / have-org-role-91)
(c2 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, f / fellow)
(h2 / have-org-role-91, ARG0, c3 / citizen)
(h2 / have-org-role-91, ARG1, c4 / country)
(h2 / have-org-role-91, ARG2, f2 / fellow)
(h3 / history, purpose, a / aggress-00)
(n / name, op, "Asia")
(n2 / name, op, "China")
(n3 / name, op, "Japan")
(r / reverse-01, ARG1, v / verdict)
(r / reverse-01, ARG2, a / aggress-00)
(w / wake, calendar, c2 / country)
(w2 / want-01, ARG0, c4 / country)
(w2 / want-01, ARG1, r / reverse-01)
(w2 / want-01, mod, a2 / actual)

Decoded in 930,886 microseconds
Sentence: Although it is painful to look back at these hundred years of shame, we must go face it; although historical issues have not been resolved, let us create and choose history!

Spans:
Span 19-20:  ; => and
Span 31-32:  and => and
Span 6-7:  back => back
Span 32-33:  choose => choose-01
Span 30-31:  create => create-01
Span 17-18:  face => face-01
Span 16-17:  go => go-01
Span 33-34:  history => history
Span 22-23:  issues => issue
Span 18-19:  it => it
Span 1-2:  it => it
Span 28-29:  let => let-01
Span 5-6:  look => look-01
Span 26-27:  resolved => resolve-01
Span 12-13:  shame => shame-01
Span 14-15:  we => we
Span 10-11:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),history,history,false), Span(32,33,List(1),choose,choose-01,false), Span(31,32,List(2),and,and,false), Span(30,31,List(3),create,create-01,false), Span(28,29,List(4),let,let-01,false), Span(26,27,List(5),resolved,resolve-01,false), Span(22,23,List(6),issues,issue,false), Span(19,20,List(7),;,and,false), Span(18,19,List(8),it,it,false), Span(17,18,List(9),face,face-01,false), Span(16,17,List(10),go,go-01,false), Span(14,15,List(11),we,we,false), Span(12,13,List(12),shame,shame-01,false), Span(10,11,List(14, 13),years,(temporal-quantity :unit year),false), Span(6,7,List(15),back,back,false), Span(5,6,List(16),look,look-01,false), Span(1,2,List(17),it,it,false)),Map(2 -> and, 5 -> resolve-01, 12 -> shame-01, 15 -> back, 8 -> it, 7 -> and, 17 -> it, 1 -> choose-01, 4 -> let-01, 11 -> we, 14 -> year, 6 -> issue, 0 -> history, 9 -> face-01, 16 -> look-01, 3 -> create-01, 10 -> go-01, 13 -> temporal-quantity),Map(w -> we, h -> history, b -> back, t -> temporal-quantity, s -> shame-01, i3 -> it, y -> year, g -> go-01, a -> and, i2 -> it, l2 -> look-01, r -> resolve-01, i -> issue, a2 -> and, c -> choose-01, l -> let-01, f -> face-01, c2 -> create-01))),[Ljava.lang.String;@40a4337a,Annotation([Ljava.lang.String;@6025e1b6,[Ljava.lang.String;@22ff4249,[Ljava.lang.String;@2d1ef81a),Annotation([Ljava.lang.String;@4c402120,[Ljava.lang.String;@327514f,[Ledu.cmu.lti.nlp.amr.Dependency;@5b12b668),Annotation([Ljava.lang.String;@1165b38,[Ljava.lang.String;@4c12331b,[Ljava.lang.String;@7586beff),Annotation([Ljava.lang.String;@3b69e7d1,[Ljava.lang.String;@815b41f,[Ledu.cmu.lti.nlp.amr.Entity;@5542c4ed))
AMR:
(a / and, op, c / choose-01)
(a / and, op, c2 / create-01)
(c / choose-01, ARG0, t / temporal-quantity)
(c / choose-01, ARG1, h / history)
(c2 / create-01, ARG1, l2 / look-01)
(f / face-01, ARG1, a2 / and)
(f / face-01, ARG6, i2 / it)
(g / go-01, ARG0, w / we)
(g / go-01, ARG1, f / face-01)
(g / go-01, ARG6, l / let-01)
(l / let-01, ARG1, a / and)
(l / let-01, ARG6, r / resolve-01)
(l2 / look-01, ARG1, i3 / it)
(l2 / look-01, ARG6, b / back)
(r / resolve-01, ARG1, i / issue)
(s / shame-01, ARG1, w / we)
(t / temporal-quantity, unit, y / year)

Decoded in 1,112,134 microseconds
Sentence: Since there is responsibility, we are not afraid. The territory is small, but it is related to the matter of dignity; no matter how the winds and clouds changes, the interests of the country and national unity are the guarantee of honor; even though scarred with wounds, we can not let our native lands be separated!

Spans:
Span 47-48:  ; => and
Span 24-25:  ; => and
Span 39-40:  and => and
Span 30-31:  and => and
Span 15-16:  but => contrast-01
Span 55-56:  can => possible
Span 32-33:  changes => change-01
Span 38-39:  country => country
Span 48-49:  even => even
Span 44-45:  guarantee => guarantee-01
Span 35-36:  interests => interest
Span 16-17:  it => it
Span 60-61:  lands => land
Span 57-58:  let => let-01
Span 26-27:  matter => matter
Span 21-22:  matter => matter
Span 40-41:  national => nation
Span 25-26:  no => -
Span 18-19:  related => relate-01
Span 3-4:  responsibility => responsible-41
Span 62-63:  separated => separate-01
Span 0-1:  Since => since
Span 13-14:  small => small
Span 11-12:  territory => territory
Span 41-42:  unity => (name :op "unity")
Span 54-55:  we => we
Span 5-6:  we => we
Span 52-53:  wounds => wound

 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of native in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lands in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of separated in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(62,63,List(0),separated,separate-01,false), Span(60,61,List(1),lands,land,false), Span(57,58,List(2),let,let-01,false), Span(55,56,List(3),can,possible,false), Span(54,55,List(4),we,we,false), Span(52,53,List(5),wounds,wound,false), Span(48,49,List(6),even,even,false), Span(47,48,List(7),;,and,false), Span(44,45,List(8),guarantee,guarantee-01,false), Span(41,42,List(10, 9),unity,(name :op "unity"),false), Span(40,41,List(11),national,nation,false), Span(39,40,List(12),and,and,false), Span(38,39,List(13),country,country,false), Span(35,36,List(14),interests,interest,false), Span(32,33,List(15),changes,change-01,false), Span(30,31,List(16),and,and,false), Span(26,27,List(17),matter,matter,false), Span(25,26,List(18),no,-,false), Span(24,25,List(19),;,and,false), Span(21,22,List(20),matter,matter,false), Span(18,19,List(21),related,relate-01,false), Span(16,17,List(22),it,it,false), Span(15,16,List(23),but,contrast-01,false), Span(13,14,List(24),small,small,false), Span(11,12,List(25),territory,territory,false), Span(5,6,List(26),we,we,false), Span(3,4,List(27),responsibility,responsible-41,false), Span(0,1,List(28),Since,since,false)),Map(2 -> let-01, 5 -> wound, 27 -> responsible-41, 12 -> and, 8 -> guarantee-01, 15 -> change-01, 21 -> relate-01, 18 -> -, 24 -> small, 7 -> and, 1 -> land, 17 -> matter, 23 -> contrast-01, 26 -> we, 4 -> we, 11 -> nation, 14 -> interest, 20 -> matter, 28 -> since, 6 -> even, 9 -> name, 0 -> separate-01, 22 -> it, 16 -> and, 19 -> and, 10 -> "unity", 3 -> possible, 25 -> territory, 13 -> country),Map(e -> even, n -> name, w -> we, s2 -> small, t -> territory, m2 -> matter, a3 -> and, w3 -> we, s -> separate-01, m -> matter, r2 -> responsible-41, g -> guarantee-01, p -> possible, a -> and, c3 -> contrast-01, i2 -> it, w2 -> wound, l2 -> let-01, a2 -> and, i -> interest, r -> relate-01, - -> -, c -> country, s3 -> since, l -> land, n2 -> nation, c2 -> change-01, a4 -> and))),[Ljava.lang.String;@1573f9fc,Annotation([Ljava.lang.String;@6150c3ec,[Ljava.lang.String;@44c03695,[Ljava.lang.String;@7e6f74c),Annotation([Ljava.lang.String;@dd05255,[Ljava.lang.String;@6a78afa0,[Ledu.cmu.lti.nlp.amr.Dependency;@2f4948e4),Annotation([Ljava.lang.String;@1f2586d6,[Ljava.lang.String;@10683d9d,[Ljava.lang.String;@3fc2959f),Annotation([Ljava.lang.String;@5aa9e4eb,[Ljava.lang.String;@6989da5e,[Ledu.cmu.lti.nlp.amr.Entity;@385c9627))
AMR:
(a / and, op, p / possible)
(a2 / and, op, c / country)
(a2 / and, op, c3 / contrast-01)
(a2 / and, op, i / interest)
(a2 / and, op, n2 / nation)
(a3 / and, op, p / possible)
(a4 / and, calendar, - / -)
(c2 / change-01, ARG1, i / interest)
(c2 / change-01, ARG6, - / -)
(c2 / change-01, location, a3 / and)
(c3 / contrast-01, ARG1, s2 / small)
(c3 / contrast-01, ARG2, r / relate-01)
(c3 / contrast-01, ARG6, i2 / it)
(g / guarantee-01, ARG0, n / name)
(g / guarantee-01, ARG1, w2 / wound)
(g / guarantee-01, ARG6, a / and)
(l2 / let-01, ARG0, w3 / we)
(l2 / let-01, ARG1, w / we)
(l2 / let-01, time, s3 / since)
(m / matter, mod, - / -)
(n / name, op, "unity")
(p / possible, time, s3 / since)
(r / relate-01, ARG1, m2 / matter)
(r2 / responsible-41, ARG1, a4 / and)
(s / separate-01, ARG0, e / even)
(s / separate-01, ARG1, l / land)
(s / separate-01, time, s3 / since)
(t / territory, poss, c / country)

Decoded in 1,226,224 microseconds
Sentence: My fellow citizens, for the Chinese nation, the advent of the twenty-first century means a time when we are beset with difficulties inside while being pressed from outside, and we will face many challenges.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 33-34:  and => and
Span 16-17:  century => (temporal-quantity :unit century)
Span 6-7:  Chinese => (country :name (name :op "China"))
Span 2-3:  citizens => citizen
Span 25-26:  difficulties => difficulty
Span 36-37:  face => face-01
Span 1-2:  fellow => (have-org-role-91 :ARG2 fellow)
Span 26-27:  inside => inside
Span 37-38:  many => many
Span 17-18:  means => mean-01
Span 7-8:  nation => nation
Span 31-32:  outside => outside
Span 19-20:  time => time
Span 34-35:  we => we
Span 21-22:  we => we

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),many,many,false), Span(36,37,List(1),face,face-01,false), Span(34,35,List(2),we,we,false), Span(33,34,List(3),and,and,false), Span(31,32,List(4),outside,outside,false), Span(26,27,List(5),inside,inside,false), Span(25,26,List(6),difficulties,difficulty,false), Span(21,22,List(7),we,we,false), Span(19,20,List(8),time,time,false), Span(17,18,List(9),means,mean-01,false), Span(16,17,List(11, 10),century,(temporal-quantity :unit century),false), Span(7,8,List(12),nation,nation,false), Span(6,7,List(15, 14, 13),Chinese,(country :name (name :op "China")),false), Span(2,3,List(16),citizens,citizen,false), Span(1,2,List(18, 17),fellow,(have-org-role-91 :ARG2 fellow),false)),Map(2 -> we, 5 -> inside, 12 -> nation, 15 -> "China", 8 -> time, 18 -> fellow, 7 -> we, 17 -> have-org-role-91, 1 -> face-01, 4 -> outside, 11 -> century, 14 -> name, 6 -> difficulty, 0 -> many, 9 -> mean-01, 16 -> citizen, 3 -> and, 10 -> temporal-quantity, 13 -> country),Map(w -> we, n -> nation, h -> have-org-role-91, t -> time, m2 -> mean-01, m -> many, d -> difficulty, c3 -> citizen, a -> and, t2 -> temporal-quantity, w2 -> we, i -> inside, c -> century, f2 -> fellow, f -> face-01, o -> outside, n2 -> name, c2 -> country))),[Ljava.lang.String;@139982de,Annotation([Ljava.lang.String;@682b2fa,[Ljava.lang.String;@217ed35e,[Ljava.lang.String;@7dcf94f8),Annotation([Ljava.lang.String;@229f66ed,[Ljava.lang.String;@31190526,[Ledu.cmu.lti.nlp.amr.Dependency;@662ac478),Annotation([Ljava.lang.String;@6743e411,[Ljava.lang.String;@3eb25e1a,[Ljava.lang.String;@477b4cdf),Annotation([Ljava.lang.String;@77c2494c,[Ljava.lang.String;@f5958c9,[Ledu.cmu.lti.nlp.amr.Entity;@233795b6))
AMR:
(a / and, op, f / face-01)
(a / and, op, m2 / mean-01)
(c2 / country, name, n2 / name)
(d / difficulty, location, i / inside)
(f / face-01, ARG0, w / we)
(f / face-01, ARG1, m / many)
(h / have-org-role-91, ARG0, c3 / citizen)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, f2 / fellow)
(i / inside, op, c2 / country)
(m2 / mean-01, ARG0, c3 / citizen)
(m2 / mean-01, ARG1, t / time)
(m2 / mean-01, ARG6, t2 / temporal-quantity)
(n / nation, mod, c2 / country)
(n2 / name, op, "China")
(o / outside, op, c2 / country)
(t2 / temporal-quantity, unit, c / century)
(w2 / we, calendar, t / time)

Decoded in 990,995 microseconds
Sentence: The Taiwan issue, the Tibet issue, the South China Sea issue, the surrounding environment, as well as the foreign forces which are aggressive to China - which way should we go?

NER Entity: (country :name (name :op "Taiwan"))
NER Entity: (country :name (name :op "Tibet"))
NER Entity: (country :name (name :op "South" :op "China" :op "Sea"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Tibet"))
NER Entity: (country :name (name :op "Taiwan"))
Spans:
Span 26-27:  aggressive => aggressive
Span 28-29:  China => (country :name (name :op "China"))
Span 16-17:  environment => environment
Span 23-24:  forces => force
Span 22-23:  foreign => foreign
Span 34-35:  go => go-01
Span 12-13:  issue => issue
Span 6-7:  issue => issue
Span 2-3:  issue => issue
Span 32-33:  should => recommend-01
Span 9-12:  South China Sea => (country :name (name :op "South" :op "China" :op "Sea"))
Span 15-16:  surrounding => surround-01
Span 1-2:  Taiwan => (country :name (name :op "Taiwan"))
Span 5-6:  Tibet => (province :name (name :op "Tibet"))
Span 31-32:  way => way
Span 33-34:  we => we
Span 19-20:  well => well

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),go,go-01,false), Span(33,34,List(1),we,we,false), Span(32,33,List(2),should,recommend-01,false), Span(31,32,List(3),way,way,false), Span(28,29,List(6, 5, 4),China,(country :name (name :op "China")),false), Span(26,27,List(7),aggressive,aggressive,false), Span(23,24,List(8),forces,force,false), Span(22,23,List(9),foreign,foreign,false), Span(19,20,List(10),well,well,false), Span(16,17,List(11),environment,environment,false), Span(15,16,List(12),surrounding,surround-01,false), Span(12,13,List(13),issue,issue,false), Span(9,12,List(18, 17, 16, 15, 14),South China Sea,(country :name (name :op "South" :op "China" :op "Sea")),false), Span(6,7,List(19),issue,issue,false), Span(5,6,List(22, 21, 20),Tibet,(province :name (name :op "Tibet")),false), Span(2,3,List(23),issue,issue,false), Span(1,2,List(26, 25, 24),Taiwan,(country :name (name :op "Taiwan")),false)),Map(2 -> recommend-01, 5 -> name, 12 -> surround-01, 8 -> force, 15 -> name, 21 -> name, 18 -> "Sea", 24 -> country, 7 -> aggressive, 1 -> we, 17 -> "China", 23 -> issue, 26 -> "Taiwan", 4 -> country, 11 -> environment, 14 -> country, 20 -> province, 6 -> "China", 9 -> foreign, 0 -> go-01, 22 -> "Tibet", 16 -> "South", 19 -> issue, 10 -> well, 3 -> way, 25 -> name, 13 -> issue),Map(e -> environment, w -> we, n -> name, n4 -> name, w3 -> well, s -> surround-01, i3 -> issue, p -> province, g -> go-01, c3 -> country, n3 -> name, a -> aggressive, i2 -> issue, w2 -> way, r -> recommend-01, i -> issue, c -> country, f2 -> foreign, f -> force, n2 -> name, c2 -> country))),[Ljava.lang.String;@3eb738bb,Annotation([Ljava.lang.String;@5bda8e08,[Ljava.lang.String;@1e800aaa,[Ljava.lang.String;@185a6e9),Annotation([Ljava.lang.String;@6f03482,[Ljava.lang.String;@9d5509a,[Ledu.cmu.lti.nlp.amr.Dependency;@179ece50),Annotation([Ljava.lang.String;@3b0090a4,[Ljava.lang.String;@3cd3e762,[Ljava.lang.String;@1fa121e2),Annotation([Ljava.lang.String;@7eac9008,[Ljava.lang.String;@4116aac9,[Ledu.cmu.lti.nlp.amr.Entity;@62ddbd7e))
AMR:
(a / aggressive, calendar, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n4 / name)
(e / environment, mod, s / surround-01)
(f / force, mod, c3 / country)
(f / force, mod, f2 / foreign)
(g / go-01, ARG0, w / we)
(g / go-01, ARG1, w2 / way)
(i / issue, topic, c2 / country)
(i2 / issue, mod, p / province)
(i2 / issue, poss, c / country)
(i3 / issue, topic, c3 / country)
(n / name, op, "China")
(n2 / name, op, "China")
(n2 / name, op, "Sea")
(n2 / name, op, "South")
(n3 / name, op, "Tibet")
(n4 / name, op, "Taiwan")
(p / province, name, n3 / name)
(r / recommend-01, ARG0, i / issue)
(r / recommend-01, ARG1, g / go-01)
(r / recommend-01, ARG6, c / country)
(s / surround-01, ARG0, i / issue)
(s / surround-01, ARG1, f / force)
(s / surround-01, ARG6, w3 / well)

Decoded in 708,999 microseconds
Sentence: What to do, fellow citizens? Please take a look at the map of the world, that crescent-shaped encirclement is suppressing our breathing, strangling our development, and coveting our national territory.

Spans:
Span 32-33:  and => and
Span 5-6:  citizens => citizen
Span 30-31:  development => develop-02
Span 2-3:  do => do-02
Span 4-5:  fellow => (have-org-role-91 :ARG2 fellow)
Span 10-11:  look => look-01
Span 13-14:  map => map-01
Span 35-36:  national => nation
Span 8-9:  take => take-01
Span 36-37:  territory => territory
Span 16-17:  world => world

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of coveting in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of territory in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),territory,territory,false), Span(35,36,List(1),national,nation,false), Span(32,33,List(2),and,and,false), Span(30,31,List(3),development,develop-02,false), Span(16,17,List(4),world,world,false), Span(13,14,List(5),map,map-01,false), Span(10,11,List(6),look,look-01,false), Span(8,9,List(7),take,take-01,false), Span(5,6,List(8),citizens,citizen,false), Span(4,5,List(10, 9),fellow,(have-org-role-91 :ARG2 fellow),false), Span(2,3,List(11),do,do-02,false)),Map(2 -> and, 5 -> map-01, 8 -> citizen, 7 -> take-01, 1 -> nation, 11 -> do-02, 4 -> world, 6 -> look-01, 9 -> have-org-role-91, 0 -> territory, 10 -> fellow, 3 -> develop-02),Map(w -> world, n -> nation, h -> have-org-role-91, t -> territory, m -> map-01, d -> develop-02, a -> and, d2 -> do-02, t2 -> take-01, c -> citizen, l -> look-01, f -> fellow))),[Ljava.lang.String;@74e52ef6,Annotation([Ljava.lang.String;@6ed3ccb2,[Ljava.lang.String;@1a677343,[Ljava.lang.String;@15de0b3c),Annotation([Ljava.lang.String;@489115ef,[Ljava.lang.String;@3857f613,[Ledu.cmu.lti.nlp.amr.Dependency;@198b6731),Annotation([Ljava.lang.String;@7c6908d7,[Ljava.lang.String;@3c9754d8,[Ljava.lang.String;@3bf7ca37),Annotation([Ljava.lang.String;@79079097,[Ljava.lang.String;@4d1c00d0,[Ledu.cmu.lti.nlp.amr.Entity;@4b2bac3f))
AMR:
(a / and, op, d / develop-02)
(a / and, op, t / territory)
(d / develop-02, ARG1, n / nation)
(d2 / do-02, ARG1, c / citizen)
(h / have-org-role-91, ARG1, d2 / do-02)
(h / have-org-role-91, ARG2, f / fellow)
(l / look-01, ARG1, m / map-01)
(m / map-01, ARG0, w / world)
(m / map-01, ARG1, c / citizen)
(t2 / take-01, ARG0, a / and)
(t2 / take-01, ARG1, m / map-01)

Decoded in 525,274 microseconds
Sentence: We do not want to make enemies, but are never afraid of enemies; we do not want war, but are never afraid of war.

Spans:
Span 14-15:  ; => and
Span 21-22:  but => contrast-01
Span 8-9:  but => contrast-01
Span 16-17:  do => do-02
Span 1-2:  do => do-02
Span 5-6:  make => make-01
Span 18-19:  want => want-01
Span 3-4:  want => want-01
Span 26-27:  war => war
Span 19-20:  war => war
Span 15-16:  we => we

Langrangian relaxation converged after 74 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),war,war,false), Span(21,22,List(1),but,contrast-01,false), Span(19,20,List(2),war,war,false), Span(18,19,List(3),want,want-01,false), Span(16,17,List(4),do,do-02,false), Span(15,16,List(5),we,we,false), Span(14,15,List(6),;,and,false), Span(8,9,List(7),but,contrast-01,false), Span(5,6,List(8),make,make-01,false), Span(3,4,List(9),want,want-01,false), Span(1,2,List(10),do,do-02,false)),Map(2 -> war, 5 -> we, 8 -> make-01, 7 -> contrast-01, 1 -> contrast-01, 4 -> do-02, 6 -> and, 9 -> want-01, 0 -> war, 10 -> do-02, 3 -> want-01),Map(w -> war, w3 -> want-01, m -> make-01, d -> do-02, a -> and, d2 -> do-02, w5 -> want-01, w2 -> war, c -> contrast-01, c2 -> contrast-01, w4 -> we))),[Ljava.lang.String;@4e08711f,Annotation([Ljava.lang.String;@bcec361,[Ljava.lang.String;@26794848,[Ljava.lang.String;@302552ec),Annotation([Ljava.lang.String;@3d285d7e,[Ljava.lang.String;@40005471,[Ledu.cmu.lti.nlp.amr.Dependency;@2cd76f31),Annotation([Ljava.lang.String;@367ffa75,[Ljava.lang.String;@49438269,[Ljava.lang.String;@ba2f4ec),Annotation([Ljava.lang.String;@1c1bbc4e,[Ljava.lang.String;@55fe41ea,[Ledu.cmu.lti.nlp.amr.Entity;@fbd1f6))
AMR:
(c / contrast-01, ARG1, w3 / want-01)
(c2 / contrast-01, ARG1, w5 / want-01)
(c2 / contrast-01, ARG6, a / and)
(d / do-02, ARG1, w3 / want-01)
(d2 / do-02, ARG1, w5 / want-01)
(m / make-01, ARG1, w / war)
(w3 / want-01, ARG0, w4 / we)
(w3 / want-01, ARG1, w2 / war)
(w3 / want-01, ARG6, a / and)
(w5 / want-01, ARG1, m / make-01)

Decoded in 669,329 microseconds
Sentence: We must urgently arrange arms, strengthen all military forces on land, on sea, and in the air.

Spans:
Span 19-20:  air => air
Span 7-8:  all => all
Span 16-17:  and => and
Span 4-5:  arms => arm
Span 9-10:  forces => force
Span 11-12:  land => land
Span 8-9:  military => military
Span 14-15:  sea => sea
Span 6-7:  strengthen => strengthen-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),air,air,false), Span(16,17,List(1),and,and,false), Span(14,15,List(2),sea,sea,false), Span(11,12,List(3),land,land,false), Span(9,10,List(4),forces,force,false), Span(8,9,List(5),military,military,false), Span(7,8,List(6),all,all,false), Span(6,7,List(7),strengthen,strengthen-01,false), Span(4,5,List(8),arms,arm,false)),Map(2 -> sea, 5 -> military, 8 -> arm, 7 -> strengthen-01, 1 -> and, 4 -> force, 6 -> all, 0 -> air, 3 -> land),Map(s2 -> strengthen-01, a3 -> all, s -> sea, m -> military, a -> air, a2 -> and, l -> land, f -> force, a4 -> arm))),[Ljava.lang.String;@1ce24091,Annotation([Ljava.lang.String;@5dda768f,[Ljava.lang.String;@7a8c8dcf,[Ljava.lang.String;@24269709),Annotation([Ljava.lang.String;@2aceadd4,[Ljava.lang.String;@24aed80c,[Ledu.cmu.lti.nlp.amr.Dependency;@3a52dba3),Annotation([Ljava.lang.String;@2a5c8d3f,[Ljava.lang.String;@752325ad,[Ljava.lang.String;@279fedbd),Annotation([Ljava.lang.String;@b3ca52e,[Ljava.lang.String;@45c7e403,[Ledu.cmu.lti.nlp.amr.Entity;@2925bf5b))
AMR:
(a2 / and, op, s / sea)
(f / force, location, l / land)
(f / force, mod, a3 / all)
(f / force, mod, m / military)
(f / force, topic, a2 / and)
(s2 / strengthen-01, ARG0, a / air)
(s2 / strengthen-01, ARG1, f / force)
(s2 / strengthen-01, ARG6, a4 / arm)

Decoded in 279,103 microseconds
Sentence: Over thousands of years, the Chinese nation has flourished several times, but before it has never had ambition to expand its territory outward.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 14-15:  before => before
Span 13-14:  but => contrast-01
Span 6-7:  Chinese => (country :name (name :op "China"))
Span 21-22:  expand => expand-01
Span 15-16:  it => it
Span 7-8:  nation => nation
Span 0-1:  Over => over
Span 10-11:  several => several
Span 23-24:  territory => territory
Span 1-2:  thousands => thousands
Span 3-4:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),territory,territory,false), Span(21,22,List(1),expand,expand-01,false), Span(15,16,List(2),it,it,false), Span(14,15,List(3),before,before,false), Span(13,14,List(4),but,contrast-01,false), Span(10,11,List(5),several,several,false), Span(7,8,List(6),nation,nation,false), Span(6,7,List(9, 8, 7),Chinese,(country :name (name :op "China")),false), Span(3,4,List(11, 10),years,(temporal-quantity :unit year),false), Span(1,2,List(12),thousands,thousands,false), Span(0,1,List(13),Over,over,false)),Map(2 -> it, 5 -> several, 12 -> thousands, 8 -> name, 7 -> country, 1 -> expand-01, 4 -> contrast-01, 11 -> year, 6 -> nation, 0 -> territory, 9 -> "China", 3 -> before, 10 -> temporal-quantity, 13 -> over),Map(e -> expand-01, n -> nation, t -> territory, b -> before, s -> several, t3 -> thousands, y -> year, t2 -> temporal-quantity, i -> it, c -> contrast-01, o -> over, c2 -> country, n2 -> name))),[Ljava.lang.String;@710f4dc7,Annotation([Ljava.lang.String;@1ff4931d,[Ljava.lang.String;@65e98b1c,[Ljava.lang.String;@61322f9d),Annotation([Ljava.lang.String;@6ad82709,[Ljava.lang.String;@510f3d34,[Ledu.cmu.lti.nlp.amr.Dependency;@7817fd62),Annotation([Ljava.lang.String;@8297b3a,[Ljava.lang.String;@2362f559,[Ljava.lang.String;@b2c9a9c),Annotation([Ljava.lang.String;@4c178a76,[Ljava.lang.String;@fa4c865,[Ledu.cmu.lti.nlp.amr.Entity;@3bd82cf5))
AMR:
(c / contrast-01, ARG1, n / nation)
(c2 / country, name, n2 / name)
(e / expand-01, ARG0, o / over)
(e / expand-01, ARG1, i / it)
(e / expand-01, ARG6, b / before)
(n / nation, mod, c2 / country)
(n / nation, time, b / before)
(n2 / name, op, "China")
(o / over, op, t2 / temporal-quantity)
(o / over, op, t3 / thousands)
(s / several, op, t2 / temporal-quantity)
(t / territory, poss, c2 / country)
(t2 / temporal-quantity, unit, y / year)

Decoded in 311,665 microseconds
Sentence: Not imposing on others what we don't want ourselves, what we follow is a foreign security strategic philosophy which applies benevolence and virtue.

Spans:
Span 23-24:  and => and
Span 21-22:  applies => apply-02
Span 6-7:  do => do-02
Span 13-14:  follow => follow-03
Span 16-17:  foreign => foreign
Span 1-2:  imposing => impose-01
Span 3-4:  others => other
Span 19-20:  philosophy => philosophy
Span 17-18:  security => security
Span 18-19:  strategic => strategy
Span 8-9:  want => want-01
Span 12-13:  we => we
Span 5-6:  we => we

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),and,and,false), Span(21,22,List(1),applies,apply-02,false), Span(19,20,List(2),philosophy,philosophy,false), Span(18,19,List(3),strategic,strategy,false), Span(17,18,List(4),security,security,false), Span(16,17,List(5),foreign,foreign,false), Span(13,14,List(6),follow,follow-03,false), Span(12,13,List(7),we,we,false), Span(8,9,List(8),want,want-01,false), Span(6,7,List(9),do,do-02,false), Span(5,6,List(10),we,we,false), Span(3,4,List(11),others,other,false), Span(1,2,List(12),imposing,impose-01,false)),Map(2 -> philosophy, 5 -> foreign, 12 -> impose-01, 8 -> want-01, 7 -> we, 1 -> apply-02, 4 -> security, 11 -> other, 6 -> follow-03, 0 -> and, 9 -> do-02, 3 -> strategy, 10 -> we),Map(w -> we, s2 -> security, s -> strategy, w3 -> we, d -> do-02, p -> philosophy, a -> and, w2 -> want-01, a2 -> apply-02, i -> impose-01, f2 -> follow-03, f -> foreign, o -> other))),[Ljava.lang.String;@544fa968,Annotation([Ljava.lang.String;@247bddad,[Ljava.lang.String;@d35dea7,[Ljava.lang.String;@7770f470),Annotation([Ljava.lang.String;@5e5d171f,[Ljava.lang.String;@24313fcc,[Ledu.cmu.lti.nlp.amr.Dependency;@7d20d0b),Annotation([Ljava.lang.String;@77f1baf5,[Ljava.lang.String;@41a2befb,[Ljava.lang.String;@6c40365c),Annotation([Ljava.lang.String;@7bedc48a,[Ljava.lang.String;@131ef10,[Ledu.cmu.lti.nlp.amr.Entity;@55b0dcab))
AMR:
(a2 / apply-02, ARG0, p / philosophy)
(a2 / apply-02, ARG1, a / and)
(d / do-02, ARG1, w2 / want-01)
(f2 / follow-03, ARG0, w / we)
(f2 / follow-03, ARG1, p / philosophy)
(i / impose-01, ARG0, o / other)
(i / impose-01, ARG1, f2 / follow-03)
(p / philosophy, mod, s / strategy)
(p / philosophy, mod, s2 / security)
(s2 / security, mod, f / foreign)
(w2 / want-01, ARG0, o / other)
(w2 / want-01, ARG1, w3 / we)

Decoded in 335,781 microseconds
Sentence: The tolerance and liberalness of a country are like those of an individual - we avoid hurting others, but must insist on not being hurt ourselves.

Spans:
Span 2-3:  and => and
Span 15-16:  avoid => avoid-01
Span 19-20:  but => contrast-01
Span 6-7:  country => country
Span 25-26:  hurt => hurt-01
Span 12-13:  individual => individual
Span 17-18:  others => other
Span 14-15:  we => we

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),hurt,hurt-01,false), Span(19,20,List(1),but,contrast-01,false), Span(17,18,List(2),others,other,false), Span(15,16,List(3),avoid,avoid-01,false), Span(14,15,List(4),we,we,false), Span(12,13,List(5),individual,individual,false), Span(6,7,List(6),country,country,false), Span(2,3,List(7),and,and,false)),Map(2 -> other, 5 -> individual, 7 -> and, 1 -> contrast-01, 4 -> we, 6 -> country, 0 -> hurt-01, 3 -> avoid-01),Map(w -> we, h -> hurt-01, a -> avoid-01, a2 -> and, i -> individual, c -> contrast-01, o -> other, c2 -> country))),[Ljava.lang.String;@38afe297,Annotation([Ljava.lang.String;@2df3b89c,[Ljava.lang.String;@23348b5d,[Ljava.lang.String;@70325e14),Annotation([Ljava.lang.String;@37ceb1df,[Ljava.lang.String;@7c9d8e2,[Ledu.cmu.lti.nlp.amr.Dependency;@20d525),Annotation([Ljava.lang.String;@6200f9cb,[Ljava.lang.String;@2002fc1d,[Ljava.lang.String;@69453e37),Annotation([Ljava.lang.String;@6f4a47c7,[Ljava.lang.String;@ae13544,[Ledu.cmu.lti.nlp.amr.Entity;@3d34d211))
AMR:
(a / avoid-01, ARG0, w / we)
(a / avoid-01, ARG1, o / other)
(a2 / and, location, c2 / country)
(c / contrast-01, ARG0, i / individual)
(c / contrast-01, ARG1, a / avoid-01)
(c / contrast-01, ARG2, a2 / and)
(h / hurt-01, ARG1, c / contrast-01)

Decoded in 231,184 microseconds
Sentence: Tolerance is certainly not fear, and sincerity does not have to be cowardice.

Spans:
Span 6-7:  and => and
Span 4-5:  fear => fear-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),and,and,false), Span(4,5,List(1),fear,fear-01,false)),Map(1 -> fear-01, 0 -> and),Map(a -> and, f -> fear-01))),[Ljava.lang.String;@7dc0f706,Annotation([Ljava.lang.String;@4009e306,[Ljava.lang.String;@43c1b556,[Ljava.lang.String;@587e5365),Annotation([Ljava.lang.String;@22fcf7ab,[Ljava.lang.String;@2de23121,[Ledu.cmu.lti.nlp.amr.Dependency;@63475ace),Annotation([Ljava.lang.String;@4988d8b8,[Ljava.lang.String;@c0c2f8d,[Ljava.lang.String;@305b7c14),Annotation([Ljava.lang.String;@6913c1fb,[Ljava.lang.String;@66d18979,[Ledu.cmu.lti.nlp.amr.Entity;@bccb269))
AMR:
(a / and, op, f / fear-01)

Decoded in 16,937 microseconds
Sentence: China exempting Japan from war reparations for World War II was in service of peace, benevolent peace.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (thing :name (name :op "World" :op "War" :op "II"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 0-1:  China => (country :name (name :op "China"))
Span 2-3:  Japan => (country :name (name :op "Japan"))
Span 17-18:  peace => peace
Span 14-15:  peace => peace
Span 12-13:  service => service
Span 4-5:  war => war
Span 7-10:  World War II => (war-01 :name (name :op "II" :op "War" :op "World"))

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),peace,peace,false), Span(14,15,List(1),peace,peace,false), Span(12,13,List(2),service,service,false), Span(7,10,List(7, 6, 5, 4, 3),World War II,(war-01 :name (name :op "II" :op "War" :op "World")),false), Span(4,5,List(8),war,war,false), Span(2,3,List(11, 10, 9),Japan,(country :name (name :op "Japan")),false), Span(0,1,List(14, 13, 12),China,(country :name (name :op "China")),false)),Map(2 -> service, 5 -> "II", 12 -> country, 8 -> war, 7 -> "World", 1 -> peace, 4 -> name, 11 -> "Japan", 14 -> "China", 6 -> "War", 0 -> peace, 9 -> country, 3 -> war-01, 10 -> name, 13 -> name),Map(n -> name, w -> war-01, p2 -> peace, s -> service, p -> peace, n3 -> name, w2 -> war, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@609cd4d8,Annotation([Ljava.lang.String;@17f7cd29,[Ljava.lang.String;@7d8704ef,[Ljava.lang.String;@13b6aecc),Annotation([Ljava.lang.String;@158a8276,[Ljava.lang.String;@3c3d9b6b,[Ledu.cmu.lti.nlp.amr.Dependency;@79d8407f),Annotation([Ljava.lang.String;@5fbe4146,[Ljava.lang.String;@1e66f1f5,[Ljava.lang.String;@4e50c791),Annotation([Ljava.lang.String;@7530ad9c,[Ljava.lang.String;@58a9760d,[Ledu.cmu.lti.nlp.amr.Entity;@71e9ddb4))
AMR:
(c / country, location, p2 / peace)
(c / country, name, n2 / name)
(c2 / country, mod, p2 / peace)
(c2 / country, name, n3 / name)
(n / name, op, "II")
(n / name, op, "War")
(n / name, op, "World")
(n2 / name, op, "Japan")
(n3 / name, op, "China")
(s / service, location, p2 / peace)
(w / war-01, ARG1, p / peace)
(w / war-01, ARG2, s / service)
(w / war-01, ARG3, w2 / war)
(w / war-01, name, n / name)

Decoded in 110,696 microseconds
Sentence: My fellow citizens, the People's Heroes Monument is a condensed history of the Chinese nation striving for continuous self-improvement

NER Entity: (organization :name (name :op "People" :op "'s" :op "Heroes" :op "Monument"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 15-16:  Chinese => (country :name (name :op "China"))
Span 2-3:  citizens => citizen
Span 1-2:  fellow => (have-org-role-91 :ARG2 fellow)
Span 12-13:  history => history
Span 22-23:  improvement => improve-01
Span 16-17:  nation => nation
Span 5-8:  People 's Heroes => (organization :name (name :op "People" :op "'s" :op "Heroes" :op "Monument"))
Span 20-21:  self => self
Span 17-18:  striving => strive-01

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),improvement,improve-01,false), Span(20,21,List(1),self,self,false), Span(17,18,List(2),striving,strive-01,false), Span(16,17,List(3),nation,nation,false), Span(15,16,List(6, 5, 4),Chinese,(country :name (name :op "China")),false), Span(12,13,List(7),history,history,false), Span(5,8,List(13, 12, 11, 10, 9, 8),People 's Heroes,(organization :name (name :op "People" :op "'s" :op "Heroes" :op "Monument")),false), Span(2,3,List(14),citizens,citizen,false), Span(1,2,List(16, 15),fellow,(have-org-role-91 :ARG2 fellow),false)),Map(2 -> strive-01, 5 -> name, 12 -> "Heroes", 15 -> have-org-role-91, 8 -> organization, 7 -> history, 1 -> self, 4 -> country, 11 -> "'s", 14 -> citizen, 6 -> "China", 0 -> improve-01, 9 -> name, 16 -> fellow, 3 -> nation, 10 -> "People", 13 -> "Monument"),Map(n -> nation, h -> history, h2 -> have-org-role-91, s2 -> strive-01, s -> self, n3 -> name, i -> improve-01, c -> country, f -> fellow, o -> organization, c2 -> citizen, n2 -> name))),[Ljava.lang.String;@394df057,Annotation([Ljava.lang.String;@4961f6af,[Ljava.lang.String;@5aebe890,[Ljava.lang.String;@65d09a04),Annotation([Ljava.lang.String;@33c911a1,[Ljava.lang.String;@75db5df9,[Ledu.cmu.lti.nlp.amr.Dependency;@707194ba),Annotation([Ljava.lang.String;@1190200a,[Ljava.lang.String;@6a2f6f80,[Ljava.lang.String;@45b4c3a9),Annotation([Ljava.lang.String;@399c4be1,[Ljava.lang.String;@291caca8,[Ledu.cmu.lti.nlp.amr.Entity;@385e9564))
AMR:
(c / country, name, n2 / name)
(h / history, domain, c2 / citizen)
(h / history, poss, n / nation)
(h2 / have-org-role-91, ARG0, c2 / citizen)
(h2 / have-org-role-91, ARG1, o / organization)
(h2 / have-org-role-91, ARG2, f / fellow)
(i / improve-01, ARG1, s / self)
(n / nation, mod, c / country)
(n2 / name, op, "China")
(n3 / name, op, "'s")
(n3 / name, op, "Heroes")
(n3 / name, op, "Monument")
(n3 / name, op, "People")
(o / organization, name, n3 / name)
(s2 / strive-01, ARG0, s / self)
(s2 / strive-01, ARG1, n / nation)

Decoded in 658,463 microseconds
Sentence: The solemn and magnificent posture represents a sacred expectation for peace.

Spans:
Span 2-3:  and => and
Span 10-11:  peace => peace
Span 5-6:  represents => represent-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),peace,peace,false), Span(5,6,List(1),represents,represent-01,false), Span(2,3,List(2),and,and,false)),Map(2 -> and, 1 -> represent-01, 0 -> peace),Map(p -> peace, a -> and, r -> represent-01))),[Ljava.lang.String;@5b94b04d,Annotation([Ljava.lang.String;@8c3b9d,[Ljava.lang.String;@4c39bec8,[Ljava.lang.String;@f79e),Annotation([Ljava.lang.String;@7ee8290b,[Ljava.lang.String;@1f59a598,[Ledu.cmu.lti.nlp.amr.Dependency;@1e178745),Annotation([Ljava.lang.String;@192c3f1e,[Ljava.lang.String;@26b3fd41,[Ljava.lang.String;@7494f96a),Annotation([Ljava.lang.String;@561b6512,[Ljava.lang.String;@2e377400,[Ledu.cmu.lti.nlp.amr.Entity;@1757cd72))
AMR:
(r / represent-01, ARG0, a / and)
(r / represent-01, ARG1, p / peace)

Decoded in 15,843 microseconds
Sentence: The thought-strings of my memory have been agitated from time to time - many heroic, stirring, and tragic scenes of shining spears and armored horses spring up in my mind.

Spans:
Span 26-27:  and => and
Span 20-21:  and => and
Span 27-28:  armored => armor-01
Span 28-29:  horses => horse
Span 15-16:  many => many
Span 6-7:  memory => memory
Span 33-34:  mind => mind
Span 29-30:  spring => spring
Span 1-2:  thought => think-01
Span 13-14:  time => time
Span 11-12:  time => time
Span 21-22:  tragic => tragic

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),mind,mind,false), Span(29,30,List(1),spring,spring,false), Span(28,29,List(2),horses,horse,false), Span(27,28,List(3),armored,armor-01,false), Span(26,27,List(4),and,and,false), Span(21,22,List(5),tragic,tragic,false), Span(20,21,List(6),and,and,false), Span(15,16,List(7),many,many,false), Span(13,14,List(8),time,time,false), Span(11,12,List(9),time,time,false), Span(6,7,List(10),memory,memory,false), Span(1,2,List(11),thought,think-01,false)),Map(2 -> horse, 5 -> tragic, 8 -> time, 7 -> many, 1 -> spring, 11 -> think-01, 4 -> and, 6 -> and, 9 -> time, 0 -> mind, 10 -> memory, 3 -> armor-01),Map(m3 -> memory, t4 -> think-01, h -> horse, t -> tragic, m2 -> many, a3 -> and, s -> spring, m -> mind, t3 -> time, a -> armor-01, t2 -> time, a2 -> and))),[Ljava.lang.String;@445b295b,Annotation([Ljava.lang.String;@49e5f737,[Ljava.lang.String;@5c671d7f,[Ljava.lang.String;@757277dc),Annotation([Ljava.lang.String;@687e99d8,[Ljava.lang.String;@e4487af,[Ledu.cmu.lti.nlp.amr.Dependency;@6aaceffd),Annotation([Ljava.lang.String;@c86b9e3,[Ljava.lang.String;@10aa41f2,[Ljava.lang.String;@3af9c5b7),Annotation([Ljava.lang.String;@37271612,[Ljava.lang.String;@ed7f8b4,[Ledu.cmu.lti.nlp.amr.Entity;@4c309d4d))
AMR:
(a / armor-01, ARG1, s / spring)
(a / armor-01, ARG2, m2 / many)
(a3 / and, location, t2 / time)
(a3 / and, op, a2 / and)
(m / mind, mod, t3 / time)
(s / spring, location, a2 / and)
(s / spring, mod, h / horse)
(t3 / time, destination, t2 / time)
(t4 / think-01, ARG0, t / tragic)
(t4 / think-01, ARG1, a3 / and)
(t4 / think-01, ARG2, m3 / memory)

Decoded in 313,893 microseconds
Sentence: My thoughts go through those yellowing pages of history, as if I saw Emperor Kangxi, the famous ruler of a generation, contemplating alone about how to achieve unification of the territory in his audience hall, hundreds of years ago; also as if I saw Abraham Lincoln, former U.S. President, wandering alone in the dark of a great hall, thinking about the integrity of the Union.

NER Entity: (organization :name (name :op "Emperor" :op "Kangxi"))
NER Entity: (person :name (name :op "Abraham" :op "Lincoln"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (organization :name (name :op "Union"))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 43-44:  ; => and
Span 67-68:  about => about
Span 26-27:  about => about
Span 49-51:  Abraham Lincoln => (person :name (name :op "Abraham" :op "Lincoln"))
Span 29-30:  achieve => achieve-01
Span 42-43:  ago => ago
Span 57-58:  alone => alone
Span 25-26:  alone => alone
Span 44-45:  also => also
Span 14-16:  Emperor Kangxi => (organization :name (name :op "Emperor" :op "Kangxi"))
Span 52-53:  former => former
Span 22-23:  generation => generation
Span 2-3:  go => go-01
Span 63-64:  great => great
Span 8-9:  history => history
Span 39-40:  hundreds => hundreds
Span 6-7:  pages => page
Span 54-55:  President => (have-org-role-91 :ARG2 president)
Span 19-20:  ruler => rule-03
Span 48-49:  saw => see-01
Span 13-14:  saw => see-01
Span 33-34:  territory => territory
Span 66-67:  thinking => think-01
Span 3-4:  through => through
Span 53-54:  U.S. => (country :name (name :op "U.S."))
Span 41-42:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(67,68,List(0),about,about,false), Span(66,67,List(1),thinking,think-01,false), Span(63,64,List(2),great,great,false), Span(57,58,List(3),alone,alone,false), Span(54,55,List(5, 4),President,(have-org-role-91 :ARG2 president),false), Span(53,54,List(8, 7, 6),U.S.,(country :name (name :op "U.S.")),false), Span(52,53,List(9),former,former,false), Span(49,51,List(13, 12, 11, 10),Abraham Lincoln,(person :name (name :op "Abraham" :op "Lincoln")),false), Span(48,49,List(14),saw,see-01,false), Span(44,45,List(15),also,also,false), Span(43,44,List(16),;,and,false), Span(42,43,List(17),ago,ago,false), Span(41,42,List(19, 18),years,(temporal-quantity :unit year),false), Span(39,40,List(20),hundreds,hundreds,false), Span(33,34,List(21),territory,territory,false), Span(29,30,List(22),achieve,achieve-01,false), Span(26,27,List(23),about,about,false), Span(25,26,List(24),alone,alone,false), Span(22,23,List(25),generation,generation,false), Span(19,20,List(26),ruler,rule-03,false), Span(14,16,List(30, 29, 28, 27),Emperor Kangxi,(organization :name (name :op "Emperor" :op "Kangxi")),false), Span(13,14,List(31),saw,see-01,false), Span(8,9,List(32),history,history,false), Span(6,7,List(33),pages,page,false), Span(3,4,List(34),through,through,false), Span(2,3,List(35),go,go-01,false)),Map(30 -> "Kangxi", 2 -> great, 5 -> president, 33 -> page, 27 -> organization, 12 -> "Abraham", 8 -> "U.S.", 15 -> also, 21 -> territory, 18 -> temporal-quantity, 24 -> alone, 35 -> go-01, 7 -> name, 1 -> think-01, 17 -> ago, 23 -> about, 26 -> rule-03, 4 -> have-org-role-91, 11 -> name, 32 -> history, 14 -> see-01, 29 -> "Emperor", 20 -> hundreds, 34 -> through, 28 -> name, 6 -> country, 9 -> former, 0 -> about, 22 -> achieve-01, 16 -> and, 19 -> year, 10 -> person, 3 -> alone, 31 -> see-01, 25 -> generation, 13 -> "Lincoln"),Map(a7 -> about, n -> name, g3 -> go-01, h -> have-org-role-91, t4 -> through, s2 -> see-01, h2 -> hundreds, t -> think-01, p2 -> person, a3 -> also, s -> see-01, a6 -> achieve-01, t3 -> territory, g2 -> generation, y -> year, p -> president, g -> great, n3 -> name, a -> about, a5 -> ago, a8 -> alone, t2 -> temporal-quantity, a2 -> alone, r -> rule-03, h3 -> history, c -> country, f -> former, o -> organization, p3 -> page, n2 -> name, a4 -> and))),[Ljava.lang.String;@38102d01,Annotation([Ljava.lang.String;@37883b97,[Ljava.lang.String;@6ab778a,[Ljava.lang.String;@4e3958e7),Annotation([Ljava.lang.String;@77f80c04,[Ljava.lang.String;@1dac5ef,[Ledu.cmu.lti.nlp.amr.Dependency;@5c90e579),Annotation([Ljava.lang.String;@58ea606c,[Ljava.lang.String;@6f45df59,[Ljava.lang.String;@38e79ae3),Annotation([Ljava.lang.String;@63070bab,[Ljava.lang.String;@68e5eea7,[Ledu.cmu.lti.nlp.amr.Entity;@291b4bf5))
AMR:
(a5 / ago, calendar, t2 / temporal-quantity)
(a6 / achieve-01, ARG0, o / organization)
(a6 / achieve-01, ARG1, h3 / history)
(a7 / about, mod, a8 / alone)
(a7 / about, op, a6 / achieve-01)
(c / country, name, n / name)
(g3 / go-01, ARG1, h2 / hundreds)
(g3 / go-01, ARG2, t4 / through)
(g3 / go-01, condition, s2 / see-01)
(h / have-org-role-91, ARG0, g / great)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p / president)
(h2 / hundreds, time, a5 / ago)
(n / name, op, "U.S.")
(n2 / name, op, "Abraham")
(n2 / name, op, "Lincoln")
(n3 / name, op, "Emperor")
(n3 / name, op, "Kangxi")
(o / organization, name, n3 / name)
(p / president, mod, f / former)
(p2 / person, name, n2 / name)
(r / rule-03, ARG0, c / country)
(r / rule-03, ARG1, g2 / generation)
(r / rule-03, ARG6, o / organization)
(r / rule-03, mod, t3 / territory)
(s / see-01, ARG0, p2 / person)
(s / see-01, ARG1, a4 / and)
(s / see-01, ARG6, a3 / also)
(s2 / see-01, ARG0, o / organization)
(s2 / see-01, ARG1, s / see-01)
(t / think-01, ARG0, p2 / person)
(t / think-01, ARG1, a2 / alone)
(t / think-01, ARG6, a / about)
(t2 / temporal-quantity, unit, y / year)
(t4 / through, op, p3 / page)

Decoded in 2,243,520 microseconds
Sentence: "Although it is peaceful throughout the world, it is certainly dangerous to forget war!" My fellow citizens, we want development and peace, but we must never exercise forbearance blindly. The "Boxer Protocol " of national betrayal and humiliation has aggravated China's poverty and backwardness in modern time - falling behind will lead to being bullied.

NER Entity: (thing :name (name :op "Boxer" :op "Protocol"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 47-48:  aggravated => aggravate-01
Span 51-52:  and => and
Span 44-45:  and => and
Span 25-26:  and => and
Span 58-59:  behind => behind
Span 38-40:  Boxer Protocol => (thing :name (name :op "Boxer" :op "Protocol"))
Span 28-29:  but => contrast-01
Span 48-49:  China => (country :name (name :op "China"))
Span 20-21:  citizens => citizen
Span 12-13:  dangerous => dangerous
Span 24-25:  development => develop-02
Span 32-33:  exercise => exercise-01
Span 19-20:  fellow => (have-org-role-91 :ARG2 fellow)
Span 9-10:  it => it
Span 2-3:  it => it
Span 60-61:  lead => lead-03
Span 54-55:  modern => modern
Span 42-43:  national => nation
Span 26-27:  peace => peace
Span 4-5:  peaceful => peaceful
Span 50-51:  poverty => poverty
Span 5-6:  throughout => throughout
Span 55-56:  time => time
Span 23-24:  want => want-01
Span 15-16:  war => war
Span 29-30:  we => we
Span 22-23:  we => we
Span 7-8:  world => world

 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of never in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of exercise in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of forbearance in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of blindly in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of Boxer in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of Protocol in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of betrayal in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliation in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of aggravated in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of poverty in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of backwardness in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of modern in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of falling in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lead in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of bullied in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 64
Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(60,61,List(0),lead,lead-03,false), Span(58,59,List(1),behind,behind,false), Span(55,56,List(2),time,time,false), Span(54,55,List(3),modern,modern,false), Span(51,52,List(4),and,and,false), Span(50,51,List(5),poverty,poverty,false), Span(48,49,List(8, 7, 6),China,(country :name (name :op "China")),false), Span(47,48,List(9),aggravated,aggravate-01,false), Span(44,45,List(10),and,and,false), Span(42,43,List(11),national,nation,false), Span(38,40,List(15, 14, 13, 12),Boxer Protocol,(thing :name (name :op "Boxer" :op "Protocol")),false), Span(32,33,List(16),exercise,exercise-01,false), Span(29,30,List(17),we,we,false), Span(28,29,List(18),but,contrast-01,false), Span(26,27,List(19),peace,peace,false), Span(25,26,List(20),and,and,false), Span(24,25,List(21),development,develop-02,false), Span(23,24,List(22),want,want-01,false), Span(22,23,List(23),we,we,false), Span(20,21,List(24),citizens,citizen,false), Span(19,20,List(26, 25),fellow,(have-org-role-91 :ARG2 fellow),false), Span(15,16,List(27),war,war,false), Span(12,13,List(28),dangerous,dangerous,false), Span(9,10,List(29),it,it,false), Span(7,8,List(30),world,world,false), Span(5,6,List(31),throughout,throughout,false), Span(4,5,List(32),peaceful,peaceful,false), Span(2,3,List(33),it,it,false)),Map(30 -> world, 2 -> time, 5 -> poverty, 33 -> it, 27 -> war, 12 -> thing, 8 -> "China", 15 -> "Protocol", 21 -> develop-02, 18 -> contrast-01, 24 -> citizen, 7 -> name, 1 -> behind, 17 -> we, 23 -> we, 26 -> fellow, 4 -> and, 11 -> nation, 32 -> peaceful, 14 -> "Boxer", 29 -> it, 20 -> and, 28 -> dangerous, 6 -> country, 9 -> aggravate-01, 0 -> lead-03, 22 -> want-01, 16 -> exercise-01, 19 -> peace, 10 -> and, 3 -> modern, 31 -> throughout, 25 -> have-org-role-91, 13 -> name),Map(e -> exercise-01, n -> name, w -> we, h -> have-org-role-91, t -> time, b -> behind, p2 -> peace, a3 -> and, w3 -> we, m -> modern, d -> develop-02, t3 -> throughout, p -> poverty, n3 -> name, a -> and, c3 -> citizen, d2 -> dangerous, w5 -> world, i2 -> it, t2 -> thing, w2 -> want-01, i -> it, a2 -> aggravate-01, c -> country, l -> lead-03, f -> fellow, p3 -> peaceful, n2 -> nation, c2 -> contrast-01, a4 -> and, w4 -> war))),[Ljava.lang.String;@2d2ffcb7,Annotation([Ljava.lang.String;@762ef0ea,[Ljava.lang.String;@31f9b85e,[Ljava.lang.String;@424e1977),Annotation([Ljava.lang.String;@10d68fcd,[Ljava.lang.String;@117e949d,[Ledu.cmu.lti.nlp.amr.Dependency;@6db9f5a4),Annotation([Ljava.lang.String;@5f8edcc5,[Ljava.lang.String;@7b02881e,[Ljava.lang.String;@1ebd319f),Annotation([Ljava.lang.String;@3c0be339,[Ljava.lang.String;@15ca7889,[Ledu.cmu.lti.nlp.amr.Entity;@7a675056))
AMR:
(a / and, op, p / poverty)
(a2 / aggravate-01, ARG0, c / country)
(a2 / aggravate-01, ARG1, i / it)
(a3 / and, op, a2 / aggravate-01)
(a4 / and, op, c2 / contrast-01)
(a4 / and, op, p2 / peace)
(b / behind, domain, i / it)
(c / country, name, n / name)
(c2 / contrast-01, ARG0, t3 / throughout)
(c2 / contrast-01, ARG1, d / develop-02)
(c2 / contrast-01, ARG6, w / we)
(d / develop-02, ARG0, w4 / war)
(d / develop-02, ARG1, c3 / citizen)
(d2 / dangerous, domain, i / it)
(e / exercise-01, ARG1, i / it)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, f / fellow)
(l / lead-03, ARG1, i / it)
(m / modern, domain, i / it)
(n / name, op, "China")
(n2 / nation, domain, i / it)
(n3 / name, op, "Boxer")
(n3 / name, op, "Protocol")
(p / poverty, domain, i / it)
(p3 / peaceful, domain, i2 / it)
(p3 / peaceful, time, t3 / throughout)
(t / time, domain, i / it)
(t2 / thing, domain, i / it)
(t2 / thing, name, n3 / name)
(t3 / throughout, op, w5 / world)
(w / we, domain, i / it)
(w2 / want-01, ARG0, w3 / we)
(w2 / want-01, ARG1, a4 / and)

Decoded in 2,224,971 microseconds
Sentence: Without strength, where does peace come from!

Spans:
Span 6-7:  come => come-01
Span 5-6:  peace => peace
Span 1-2:  strength => strength

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),come,come-01,false), Span(5,6,List(1),peace,peace,false), Span(1,2,List(2),strength,strength,false)),Map(2 -> strength, 1 -> peace, 0 -> come-01),Map(s -> strength, p -> peace, c -> come-01))),[Ljava.lang.String;@d21a74c,Annotation([Ljava.lang.String;@6e509ffa,[Ljava.lang.String;@2898ac89,[Ljava.lang.String;@683dbc2c),Annotation([Ljava.lang.String;@68267da0,[Ljava.lang.String;@2638011,[Ledu.cmu.lti.nlp.amr.Dependency;@6ff29830),Annotation([Ljava.lang.String;@6a2b953e,[Ljava.lang.String;@313b2ea6,[Ljava.lang.String;@2f465398),Annotation([Ljava.lang.String;@548e6d58,[Ljava.lang.String;@623a8092,[Ledu.cmu.lti.nlp.amr.Entity;@a1cdc6d))
AMR:
(c / come-01, ARG1, p / peace)
(c / come-01, ARG3, s / strength)

Decoded in 17,824 microseconds
Sentence: We must focus on national defense education, build up a Great Wall in the hearts of 1.3 billion people, and must establish the full range of a national defense system having the ability to both attack and defend;

NER Entity: (country :name (name :op "Great" :op "Wall"))
Spans:
Span 40-41:  ; => and
Span 38-39:  and => and
Span 21-22:  and => and
Span 37-38:  attack => attack-01
Span 36-37:  both => both
Span 8-9:  build => build-01
Span 39-40:  defend => defend-01
Span 30-31:  defense => defense
Span 5-6:  defense => defense
Span 6-7:  education => education
Span 23-24:  establish => establish-01
Span 2-3:  focus => focus-01
Span 25-26:  full => full
Span 11-13:  Great Wall => (country :name (name :op "Great" :op "Wall"))
Span 32-33:  having => have-03
Span 29-30:  national => nation
Span 4-5:  national => nation
Span 19-20:  people => people
Span 26-27:  range => range
Span 31-32:  system => system

Langrangian relaxation converged after 57 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),;,and,false), Span(39,40,List(1),defend,defend-01,false), Span(38,39,List(2),and,and,false), Span(37,38,List(3),attack,attack-01,false), Span(36,37,List(4),both,both,false), Span(32,33,List(5),having,have-03,false), Span(31,32,List(6),system,system,false), Span(30,31,List(7),defense,defense,false), Span(29,30,List(8),national,nation,false), Span(26,27,List(9),range,range,false), Span(25,26,List(10),full,full,false), Span(23,24,List(11),establish,establish-01,false), Span(21,22,List(12),and,and,false), Span(19,20,List(13),people,people,false), Span(11,13,List(17, 16, 15, 14),Great Wall,(country :name (name :op "Great" :op "Wall")),false), Span(8,9,List(18),build,build-01,false), Span(6,7,List(19),education,education,false), Span(5,6,List(20),defense,defense,false), Span(4,5,List(21),national,nation,false), Span(2,3,List(22),focus,focus-01,false)),Map(2 -> and, 5 -> have-03, 12 -> and, 15 -> name, 8 -> nation, 21 -> nation, 18 -> build-01, 7 -> defense, 17 -> "Wall", 1 -> defend-01, 4 -> both, 11 -> establish-01, 14 -> country, 20 -> defense, 6 -> system, 22 -> focus-01, 0 -> and, 9 -> range, 16 -> "Great", 19 -> education, 3 -> attack-01, 10 -> full, 13 -> people),Map(e -> establish-01, n -> nation, h -> have-03, b -> both, d3 -> defense, b2 -> build-01, e2 -> education, a3 -> attack-01, s -> system, d -> defend-01, p -> people, n3 -> nation, a -> and, d2 -> defense, a2 -> and, r -> range, c -> country, f2 -> focus-01, f -> full, n2 -> name, a4 -> and))),[Ljava.lang.String;@175b9425,Annotation([Ljava.lang.String;@3098cf3b,[Ljava.lang.String;@610f7aa,[Ljava.lang.String;@6a03bcb1),Annotation([Ljava.lang.String;@21b2e768,[Ljava.lang.String;@57250572,[Ledu.cmu.lti.nlp.amr.Dependency;@5609159b),Annotation([Ljava.lang.String;@2118cddf,[Ljava.lang.String;@17a7f733,[Ljava.lang.String;@68567e20),Annotation([Ljava.lang.String;@76ed1b7c,[Ljava.lang.String;@11fc564b,[Ledu.cmu.lti.nlp.amr.Entity;@394a2528))
AMR:
(a2 / and, op, a3 / attack-01)
(a2 / and, op, d / defend-01)
(a3 / attack-01, ARG1, b / both)
(a4 / and, op, b2 / build-01)
(a4 / and, op, e / establish-01)
(a4 / and, op, f2 / focus-01)
(a4 / and, op, p / people)
(b2 / build-01, ARG1, c / country)
(c / country, name, n2 / name)
(d / defend-01, ARG1, a / and)
(e / establish-01, ARG1, r / range)
(e2 / education, mod, d3 / defense)
(e2 / education, mod, n3 / nation)
(f2 / focus-01, ARG1, e2 / education)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, s / system)
(h / have-03, ARG6, a3 / attack-01)
(n2 / name, op, "Great")
(n2 / name, op, "Wall")
(r / range, mod, f / full)
(s / system, mod, d2 / defense)
(s / system, mod, n / nation)

Decoded in 1,729,149 microseconds
Sentence: The best defense is to attack - we should strengthen forces which can engage in ultra-long-range attack, improve combat capability throughout all of aerospace, of great depth, and over great distances. On the premise of avoiding influence on national economic development, increase investment and construction of the defense industry, accelerate modernization and internationalization of military equipment, and establish a high-quality, high-tech elite division.

Spans:
Span 59-60:  accelerate => accelerate-01
Span 28-29:  aerospace => aerospace
Span 26-27:  all => all
Span 67-68:  and => and
Span 61-62:  and => and
Span 52-53:  and => and
Span 34-35:  and => and
Span 20-21:  attack => attack-01
Span 5-6:  attack => attack-01
Span 12-13:  can => possible
Span 24-25:  capability => capable-41
Span 23-24:  combat => combat-01
Span 53-54:  construction => construct-01
Span 56-57:  defense => defense
Span 2-3:  defense => defense
Span 48-49:  development => develop-02
Span 78-79:  division => division
Span 47-48:  economic => economy
Span 77-78:  elite => elite
Span 13-14:  engage => engage-01
Span 65-66:  equipment => equipment
Span 68-69:  establish => establish-01
Span 10-11:  forces => force
Span 36-37:  great => great
Span 31-32:  great => great
Span 74-75:  high => high
Span 70-71:  high => high
Span 22-23:  improve => improve-01
Span 50-51:  increase => increase-01
Span 57-58:  industry => industry
Span 44-45:  influence => influence-01
Span 51-52:  investment => invest-01
Span 17-18:  long => long
Span 64-65:  military => military
Span 60-61:  modernization => modernize-01
Span 46-47:  national => nation
Span 35-36:  over => over
Span 41-42:  premise => premise
Span 72-73:  quality => quality
Span 19-20:  range => range
Span 8-9:  should => recommend-01
Span 9-10:  strengthen => strengthen-01
Span 76-77:  tech => technology
Span 25-26:  throughout => throughout
Span 15-16:  ultra => ultra-violet
Span 7-8:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of premise in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of avoiding in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of economic in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of development in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of increase in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of investment in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of construction in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of defense in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of industry in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of accelerate in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of modernization in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of internationalization in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of military in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of equipment in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of establish in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-quality in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-tech in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of elite in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of division in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 71
Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(78,79,List(0),division,division,false), Span(77,78,List(1),elite,elite,false), Span(76,77,List(2),tech,technology,false), Span(74,75,List(3),high,high,false), Span(72,73,List(4),quality,quality,false), Span(70,71,List(5),high,high,false), Span(68,69,List(6),establish,establish-01,false), Span(67,68,List(7),and,and,false), Span(65,66,List(8),equipment,equipment,false), Span(64,65,List(9),military,military,false), Span(61,62,List(10),and,and,false), Span(60,61,List(11),modernization,modernize-01,false), Span(59,60,List(12),accelerate,accelerate-01,false), Span(57,58,List(13),industry,industry,false), Span(56,57,List(14),defense,defense,false), Span(53,54,List(15),construction,construct-01,false), Span(52,53,List(16),and,and,false), Span(51,52,List(17),investment,invest-01,false), Span(50,51,List(18),increase,increase-01,false), Span(48,49,List(19),development,develop-02,false), Span(47,48,List(20),economic,economy,false), Span(46,47,List(21),national,nation,false), Span(44,45,List(22),influence,influence-01,false), Span(41,42,List(23),premise,premise,false), Span(36,37,List(24),great,great,false), Span(35,36,List(25),over,over,false), Span(34,35,List(26),and,and,false), Span(31,32,List(27),great,great,false), Span(28,29,List(28),aerospace,aerospace,false), Span(26,27,List(29),all,all,false), Span(25,26,List(30),throughout,throughout,false), Span(24,25,List(31),capability,capable-41,false), Span(23,24,List(32),combat,combat-01,false), Span(22,23,List(33),improve,improve-01,false), Span(20,21,List(34),attack,attack-01,false), Span(19,20,List(35),range,range,false), Span(17,18,List(36),long,long,false), Span(15,16,List(37),ultra,ultra-violet,false), Span(13,14,List(38),engage,engage-01,false), Span(12,13,List(39),can,possible,false), Span(10,11,List(40),forces,force,false), Span(9,10,List(41),strengthen,strengthen-01,false), Span(8,9,List(42),should,recommend-01,false), Span(7,8,List(43),we,we,false), Span(5,6,List(44),attack,attack-01,false), Span(2,3,List(45),defense,defense,false)),Map(45 -> defense, 39 -> possible, 30 -> throughout, 2 -> technology, 5 -> high, 33 -> improve-01, 27 -> great, 12 -> accelerate-01, 8 -> equipment, 15 -> construct-01, 42 -> recommend-01, 36 -> long, 21 -> nation, 18 -> increase-01, 24 -> great, 41 -> strengthen-01, 35 -> range, 7 -> and, 1 -> elite, 17 -> invest-01, 44 -> attack-01, 23 -> premise, 38 -> engage-01, 26 -> and, 4 -> quality, 11 -> modernize-01, 32 -> combat-01, 14 -> defense, 29 -> all, 20 -> economy, 34 -> attack-01, 28 -> aerospace, 6 -> establish-01, 40 -> force, 43 -> we, 9 -> military, 0 -> division, 22 -> influence-01, 16 -> and, 37 -> ultra-violet, 19 -> develop-02, 10 -> and, 3 -> high, 31 -> capable-41, 25 -> over, 13 -> industry),Map(a7 -> all, e -> elite, w -> we, n -> nation, h -> high, i4 -> influence-01, q -> quality, e5 -> engage-01, h2 -> high, t -> technology, m2 -> modernize-01, d3 -> develop-02, a9 -> attack-01, p2 -> possible, e2 -> establish-01, a3 -> accelerate-01, s -> strengthen-01, a6 -> aerospace, m -> military, d -> division, g2 -> great, i3 -> increase-01, r2 -> recommend-01, p -> premise, g -> great, c3 -> combat-01, a -> and, e4 -> economy, a5 -> and, d2 -> defense, a8 -> attack-01, t2 -> throughout, i2 -> invest-01, r -> range, i5 -> improve-01, a2 -> and, i -> industry, c -> construct-01, u -> ultra-violet, l -> long, d4 -> defense, f -> force, o -> over, e3 -> equipment, c2 -> capable-41, a4 -> and))),[Ljava.lang.String;@6236eb5f,Annotation([Ljava.lang.String;@7c1e2a9e,[Ljava.lang.String;@fa36558,[Ljava.lang.String;@672872e1),Annotation([Ljava.lang.String;@32910148,[Ljava.lang.String;@3f56875e,[Ledu.cmu.lti.nlp.amr.Dependency;@2b4bac49),Annotation([Ljava.lang.String;@fd07cbb,[Ljava.lang.String;@3571b748,[Ljava.lang.String;@3e96bacf),Annotation([Ljava.lang.String;@484970b0,[Ljava.lang.String;@4470f8a6,[Ledu.cmu.lti.nlp.amr.Entity;@7c83dc97))
AMR:
(a / and, op, e2 / establish-01)
(a / and, op, e3 / equipment)
(a2 / and, op, m2 / modernize-01)
(a3 / accelerate-01, ARG1, m2 / modernize-01)
(a4 / and, op, c / construct-01)
(a4 / and, op, i2 / invest-01)
(a5 / and, op, o / over)
(a6 / aerospace, quant, a7 / all)
(a8 / attack-01, mod, r / range)
(a9 / attack-01, ARG0, d4 / defense)
(a9 / attack-01, ARG1, f / force)
(c / construct-01, ARG1, d2 / defense)
(c2 / capable-41, ARG1, g / great)
(c2 / capable-41, ARG2, a8 / attack-01)
(c2 / capable-41, location, t2 / throughout)
(c2 / capable-41, mod, c3 / combat-01)
(c3 / combat-01, ARG1, g2 / great)
(d / division, purpose, a9 / attack-01)
(d3 / develop-02, purpose, a9 / attack-01)
(e / elite, mod, h / high)
(e2 / establish-01, ARG1, a9 / attack-01)
(e4 / economy, mod, n / nation)
(e5 / engage-01, ARG0, f / force)
(e5 / engage-01, ARG1, a5 / and)
(e5 / engage-01, ARG2, a8 / attack-01)
(h2 / high, purpose, a9 / attack-01)
(i / industry, mod, d2 / defense)
(i2 / invest-01, ARG1, a9 / attack-01)
(i3 / increase-01, ARG1, a9 / attack-01)
(i4 / influence-01, ARG1, a9 / attack-01)
(i5 / improve-01, ARG0, a7 / all)
(i5 / improve-01, ARG1, c2 / capable-41)
(l / long, mod, u / ultra-violet)
(m / military, purpose, a9 / attack-01)
(m2 / modernize-01, ARG1, a9 / attack-01)
(n / nation, purpose, a9 / attack-01)
(p / premise, purpose, a9 / attack-01)
(p2 / possible, domain, e5 / engage-01)
(q / quality, mod, h2 / high)
(r / range, mod, l / long)
(r2 / recommend-01, ARG1, f / force)
(s / strengthen-01, ARG0, w / we)
(s / strengthen-01, ARG1, f / force)
(t / technology, mod, h / high)
(t / technology, mod, h2 / high)

Decoded in 6,103,221 microseconds
Sentence: The battle horn is about to sound, the people are already fully equipped and ready to go.

Spans:
Span 4-5:  about => about
Span 11-12:  already => already
Span 14-15:  and => and
Span 1-2:  battle => battle-01
Span 13-14:  equipped => equip-01
Span 12-13:  fully => full
Span 17-18:  go => go-01
Span 9-10:  people => people
Span 15-16:  ready => ready-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),go,go-01,false), Span(15,16,List(1),ready,ready-01,false), Span(14,15,List(2),and,and,false), Span(13,14,List(3),equipped,equip-01,false), Span(12,13,List(4),fully,full,false), Span(11,12,List(5),already,already,false), Span(9,10,List(6),people,people,false), Span(4,5,List(7),about,about,false), Span(1,2,List(8),battle,battle-01,false)),Map(2 -> and, 5 -> already, 8 -> battle-01, 7 -> about, 1 -> ready-01, 4 -> full, 6 -> people, 0 -> go-01, 3 -> equip-01),Map(e -> equip-01, b -> battle-01, a3 -> about, p -> people, g -> go-01, a -> and, a2 -> already, r -> ready-01, f -> full))),[Ljava.lang.String;@7748410a,Annotation([Ljava.lang.String;@740773a3,[Ljava.lang.String;@37f1104d,[Ljava.lang.String;@55740540),Annotation([Ljava.lang.String;@60015ef5,[Ljava.lang.String;@2f54a33d,[Ledu.cmu.lti.nlp.amr.Dependency;@1018bde2),Annotation([Ljava.lang.String;@65b3f4a4,[Ljava.lang.String;@f2ff811,[Ljava.lang.String;@568ff82),Annotation([Ljava.lang.String;@50caa560,[Ljava.lang.String;@2a266d09,[Ledu.cmu.lti.nlp.amr.Entity;@5ab9e72c))
AMR:
(a / and, op, e / equip-01)
(a / and, op, r / ready-01)
(b / battle-01, ARG1, a3 / about)
(e / equip-01, ARG1, p / people)
(e / equip-01, manner, f / full)
(e / equip-01, time, a2 / already)
(g / go-01, ARG1, a3 / about)
(r / ready-01, ARG1, g / go-01)

Decoded in 135,102 microseconds
Sentence: Without the people's support we will accomplish nothing; with the support of the people, we will be all-powerful.

Spans:
Span 9-10:  ; => and
Span 20-21:  all => all
Span 8-9:  nothing => nothing
Span 15-16:  people => people
Span 2-3:  people => people
Span 22-23:  powerful => powerful
Span 12-13:  support => support-01
Span 4-5:  support => support-01
Span 17-18:  we => we
Span 5-6:  we => we

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),powerful,powerful,false), Span(20,21,List(1),all,all,false), Span(17,18,List(2),we,we,false), Span(15,16,List(3),people,people,false), Span(12,13,List(4),support,support-01,false), Span(9,10,List(5),;,and,false), Span(8,9,List(6),nothing,nothing,false), Span(5,6,List(7),we,we,false), Span(4,5,List(8),support,support-01,false), Span(2,3,List(9),people,people,false)),Map(2 -> we, 5 -> and, 8 -> support-01, 7 -> we, 1 -> all, 4 -> support-01, 6 -> nothing, 9 -> people, 0 -> powerful, 3 -> people),Map(n -> nothing, w -> we, s2 -> support-01, p2 -> people, s -> support-01, p -> powerful, a -> all, w2 -> we, a2 -> and, p3 -> people))),[Ljava.lang.String;@186f8716,Annotation([Ljava.lang.String;@1d8bd0de,[Ljava.lang.String;@45ca843,[Ljava.lang.String;@11c9af63),Annotation([Ljava.lang.String;@757acd7b,[Ljava.lang.String;@36b4fe2a,[Ledu.cmu.lti.nlp.amr.Dependency;@574b560f),Annotation([Ljava.lang.String;@ba54932,[Ljava.lang.String;@28975c28,[Ljava.lang.String;@3943a2be),Annotation([Ljava.lang.String;@343570b7,[Ljava.lang.String;@157853da,[Ledu.cmu.lti.nlp.amr.Entity;@71c3b41))
AMR:
(a2 / and, op, n / nothing)
(a2 / and, op, s / support-01)
(a2 / and, op, s2 / support-01)
(p / powerful, mod, a / all)
(s / support-01, ARG1, p2 / people)
(s / support-01, part, p / powerful)
(s2 / support-01, ARG1, p3 / people)
(s2 / support-01, ARG2, w / we)
(s2 / support-01, ARG6, w2 / we)

Decoded in 176,271 microseconds
Sentence: My fellow citizens, it is time for us to say "no" to others. Therefore, we must achieve:

Spans:
Span 21-22:  achieve => achieve-01
Span 2-3:  citizens => citizen
Span 1-2:  fellow => (have-org-role-91 :ARG2 fellow)
Span 4-5:  it => it
Span 12-13:  no => -
Span 15-16:  others => other
Span 10-11:  say => say-01
Span 6-7:  time => time
Span 19-20:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of Therefore in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of achieve in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 22
Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),achieve,achieve-01,false), Span(19,20,List(1),we,we,false), Span(15,16,List(2),others,other,false), Span(12,13,List(3),no,-,false), Span(10,11,List(4),say,say-01,false), Span(6,7,List(5),time,time,false), Span(4,5,List(6),it,it,false), Span(2,3,List(7),citizens,citizen,false), Span(1,2,List(9, 8),fellow,(have-org-role-91 :ARG2 fellow),false)),Map(2 -> other, 5 -> time, 8 -> have-org-role-91, 7 -> citizen, 1 -> we, 4 -> say-01, 6 -> it, 9 -> fellow, 0 -> achieve-01, 3 -> -),Map(w -> we, h -> have-org-role-91, t -> time, s -> say-01, a -> achieve-01, i -> it, - -> -, c -> citizen, f -> fellow, o -> other))),[Ljava.lang.String;@236e3f4e,Annotation([Ljava.lang.String;@3cc1435c,[Ljava.lang.String;@6bf0219d,[Ljava.lang.String;@dd0c991),Annotation([Ljava.lang.String;@5f16132a,[Ljava.lang.String;@69fb6037,[Ledu.cmu.lti.nlp.amr.Dependency;@36d585c),Annotation([Ljava.lang.String;@87a85e1,[Ljava.lang.String;@671a5887,[Ljava.lang.String;@5552768b),Annotation([Ljava.lang.String;@3c947bc5,[Ljava.lang.String;@609db43b,[Ledu.cmu.lti.nlp.amr.Entity;@55f616cf))
AMR:
(a / achieve-01, ARG0, c / citizen)
(a / achieve-01, ARG1, w / we)
(a / achieve-01, ARG6, o / other)
(h / have-org-role-91, ARG1, c / citizen)
(h / have-org-role-91, ARG2, f / fellow)
(s / say-01, ARG0, i / it)
(s / say-01, ARG1, w / we)
(s / say-01, ARG6, - / -)
(t / time, condition, s / say-01)

Decoded in 267,238 microseconds
Sentence: 1. Establish guaranteed funds, improve working environment and mechanisms, recruit back to China the hundreds of thousands of IT professionals who have emigrated to and linger in the United States and around the world.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "United" :op "States"))
Spans:
Span 26-27:  and => and
Span 8-9:  and => and
Span 33-34:  around => around
Span 12-13:  back => back
Span 14-15:  China => (country :name (name :op "China"))
Span 24-25:  emigrated => emigrate-01
Span 7-8:  environment => environment
Span 3-4:  funds => fund
Span 16-17:  hundreds => hundreds
Span 5-6:  improve => improve-01
Span 9-10:  mechanisms => mechanism
Span 31-33:  States and => (country :name (name :op "United" :op "States"))
Span 18-19:  thousands => thousands
Span 6-7:  working => work-01
Span 35-36:  world => world

 *** WARNING: The dependency tree seems broken.  I can't find the head of world in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 37
Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),world,world,false), Span(33,34,List(1),around,around,false), Span(31,33,List(5, 4, 3, 2),States and,(country :name (name :op "United" :op "States")),false), Span(26,27,List(6),and,and,false), Span(24,25,List(7),emigrated,emigrate-01,false), Span(18,19,List(8),thousands,thousands,false), Span(16,17,List(9),hundreds,hundreds,false), Span(14,15,List(12, 11, 10),China,(country :name (name :op "China")),false), Span(12,13,List(13),back,back,false), Span(9,10,List(14),mechanisms,mechanism,false), Span(8,9,List(15),and,and,false), Span(7,8,List(16),environment,environment,false), Span(6,7,List(17),working,work-01,false), Span(5,6,List(18),improve,improve-01,false), Span(3,4,List(19),funds,fund,false)),Map(2 -> country, 5 -> "States", 12 -> "China", 15 -> and, 8 -> thousands, 18 -> improve-01, 7 -> emigrate-01, 17 -> work-01, 1 -> around, 4 -> "United", 11 -> name, 14 -> mechanism, 6 -> and, 0 -> world, 9 -> hundreds, 16 -> environment, 19 -> fund, 3 -> name, 10 -> country, 13 -> back),Map(e -> emigrate-01, w -> world, n -> name, h -> hundreds, t -> thousands, b -> back, e2 -> environment, a3 -> and, m -> mechanism, a -> around, w2 -> work-01, i -> improve-01, a2 -> and, c -> country, f -> fund, c2 -> country, n2 -> name))),[Ljava.lang.String;@1356d4d4,Annotation([Ljava.lang.String;@c03cf28,[Ljava.lang.String;@1329eff,[Ljava.lang.String;@6497b078),Annotation([Ljava.lang.String;@41c2284a,[Ljava.lang.String;@53aad5d5,[Ledu.cmu.lti.nlp.amr.Dependency;@46fa7c39),Annotation([Ljava.lang.String;@1fb700ee,[Ljava.lang.String;@4f67eb2a,[Ljava.lang.String;@4a668b6e),Annotation([Ljava.lang.String;@5f683daf,[Ljava.lang.String;@78ffe6dc,[Ledu.cmu.lti.nlp.amr.Entity;@8317c52))
AMR:
(a / around, op, c / country)
(a2 / and, op, a3 / and)
(a3 / and, op, m / mechanism)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e / emigrate-01, ARG0, b / back)
(e / emigrate-01, ARG1, w / world)
(e / emigrate-01, ARG6, a2 / and)
(h / hundreds, location, t / thousands)
(i / improve-01, ARG0, c / country)
(i / improve-01, ARG1, e2 / environment)
(i / improve-01, ARG6, w2 / work-01)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "China")
(t / thousands, op, e / emigrate-01)
(w2 / work-01, ARG0, a3 / and)
(w2 / work-01, ARG1, f / fund)
(w2 / work-01, ARG6, c2 / country)

Decoded in 865,761 microseconds
Sentence: 2. Create a few nuclear-powered aircraft carrier battle groups.

Spans:
Span 7-8:  aircraft => aircraft
Span 9-10:  battle => battle-01
Span 8-9:  carrier => carry-01
Span 3-4:  few => few
Span 10-11:  groups => group
Span 4-5:  nuclear => nucleus

 *** WARNING: The dependency tree seems broken.  I can't find the head of groups in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),groups,group,false), Span(9,10,List(1),battle,battle-01,false), Span(8,9,List(2),carrier,carry-01,false), Span(7,8,List(3),aircraft,aircraft,false), Span(4,5,List(4),nuclear,nucleus,false), Span(3,4,List(5),few,few,false)),Map(2 -> carry-01, 5 -> few, 1 -> battle-01, 4 -> nucleus, 0 -> group, 3 -> aircraft),Map(n -> nucleus, b -> battle-01, g -> group, a -> aircraft, c -> carry-01, f -> few))),[Ljava.lang.String;@76f2bbc1,Annotation([Ljava.lang.String;@68e965f5,[Ljava.lang.String;@6f27a732,[Ljava.lang.String;@6c779568),Annotation([Ljava.lang.String;@f381794,[Ljava.lang.String;@2cdd0d4b,[Ledu.cmu.lti.nlp.amr.Dependency;@7e9131d5),Annotation([Ljava.lang.String;@2e1d27ba,[Ljava.lang.String;@61d6015a,[Ljava.lang.String;@2525ff7e),Annotation([Ljava.lang.String;@524d6d96,[Ljava.lang.String;@152aa092,[Ledu.cmu.lti.nlp.amr.Entity;@44a7bfbc))
AMR:
(b / battle-01, ARG0, f / few)
(b / battle-01, ARG1, a / aircraft)
(b / battle-01, ARG6, c / carry-01)
(c / carry-01, ARG1, g / group)
(c / carry-01, ARG6, n / nucleus)

Decoded in 99,471 microseconds
Sentence: 3. Manufacture 5000 advanced combat aircraft of various kinds.

Spans:
Span 2-3:  5000 => 5000
Span 3-4:  advanced => advance-01
Span 5-6:  aircraft => aircraft
Span 4-5:  combat => combat-01
Span 8-9:  kinds => kind
Span 7-8:  various => various

 *** WARNING: The dependency tree seems broken.  I can't find the head of kinds in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),kinds,kind,false), Span(7,8,List(1),various,various,false), Span(5,6,List(2),aircraft,aircraft,false), Span(4,5,List(3),combat,combat-01,false), Span(3,4,List(4),advanced,advance-01,false), Span(2,3,List(5),5000,5000,false)),Map(2 -> aircraft, 5 -> 5000, 1 -> various, 4 -> advance-01, 0 -> kind, 3 -> combat-01),Map(5 -> 5000, k -> kind, v -> various, a -> aircraft, a2 -> advance-01, c -> combat-01))),[Ljava.lang.String;@4ef37659,Annotation([Ljava.lang.String;@776b83cc,[Ljava.lang.String;@37858383,[Ljava.lang.String;@4e268090),Annotation([Ljava.lang.String;@1bb266b3,[Ljava.lang.String;@306cf3ea,[Ledu.cmu.lti.nlp.amr.Dependency;@2beee7ff),Annotation([Ljava.lang.String;@5136d012,[Ljava.lang.String;@5939a379,[Ljava.lang.String;@e1de817),Annotation([Ljava.lang.String;@52102734,[Ljava.lang.String;@3541cb24,[Ledu.cmu.lti.nlp.amr.Entity;@2177849e))
AMR:
(a2 / advance-01, ARG1, k / kind)
(a2 / advance-01, ARG6, v / various)
(c / combat-01, ARG0, a2 / advance-01)
(c / combat-01, ARG1, 5 / 5000)
(c / combat-01, ARG6, a / aircraft)

Decoded in 124,362 microseconds
Sentence: 4. Accelerate the research and deployment of high-speed intercontinental ballistic missiles which can break missile defense systems and whose range is more than 10,000 nautical miles.

Spans:
Span 19-20:  and => and
Span 4-5:  and => and
Span 11-12:  ballistic => ballistic
Span 14-15:  can => possible
Span 17-18:  defense => defense
Span 5-6:  deployment => deploy-01
Span 7-8:  high => high
Span 10-11:  intercontinental => intercontinental
Span 27-28:  miles => (distance-quantity :unit mile)
Span 16-17:  missile => missile
Span 12-13:  missiles => missile
Span 23-24:  more => more
Span 21-22:  range => range
Span 3-4:  research => research-01
Span 9-10:  speed => speed
Span 18-19:  systems => system

 *** WARNING: The dependency tree seems broken.  I can't find the head of miles in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(1, 0),miles,(distance-quantity :unit mile),false), Span(23,24,List(2),more,more,false), Span(21,22,List(3),range,range,false), Span(19,20,List(4),and,and,false), Span(18,19,List(5),systems,system,false), Span(17,18,List(6),defense,defense,false), Span(16,17,List(7),missile,missile,false), Span(14,15,List(8),can,possible,false), Span(12,13,List(9),missiles,missile,false), Span(11,12,List(10),ballistic,ballistic,false), Span(10,11,List(11),intercontinental,intercontinental,false), Span(9,10,List(12),speed,speed,false), Span(7,8,List(13),high,high,false), Span(5,6,List(14),deployment,deploy-01,false), Span(4,5,List(15),and,and,false), Span(3,4,List(16),research,research-01,false)),Map(2 -> more, 5 -> system, 12 -> speed, 15 -> and, 8 -> possible, 7 -> missile, 1 -> mile, 4 -> and, 11 -> intercontinental, 14 -> deploy-01, 6 -> defense, 0 -> distance-quantity, 9 -> missile, 16 -> research-01, 3 -> range, 10 -> ballistic, 13 -> high),Map(m3 -> missile, h -> high, s2 -> speed, b -> ballistic, d3 -> deploy-01, m2 -> more, s -> system, d -> distance-quantity, m -> mile, r2 -> research-01, p -> possible, a -> and, d2 -> defense, m4 -> missile, a2 -> and, r -> range, i -> intercontinental))),[Ljava.lang.String;@40cb8df7,Annotation([Ljava.lang.String;@13b13b5d,[Ljava.lang.String;@2892dae4,[Ljava.lang.String;@355ce81c),Annotation([Ljava.lang.String;@29647f75,[Ljava.lang.String;@3315d2d7,[Ledu.cmu.lti.nlp.amr.Dependency;@d6e7bab),Annotation([Ljava.lang.String;@5fa07e12,[Ljava.lang.String;@55b53d44,[Ljava.lang.String;@482bce4f),Annotation([Ljava.lang.String;@366647c2,[Ljava.lang.String;@6a6afff2,[Ledu.cmu.lti.nlp.amr.Entity;@1649b0e6))
AMR:
(a / and, op, p / possible)
(a / and, op, s / system)
(a2 / and, op, d3 / deploy-01)
(a2 / and, op, r2 / research-01)
(b / ballistic, mod, i / intercontinental)
(d / distance-quantity, unit, m / mile)
(d2 / defense, mod, m3 / missile)
(d3 / deploy-01, ARG0, d / distance-quantity)
(d3 / deploy-01, ARG1, h / high)
(m2 / more, domain, r / range)
(m4 / missile, mod, h / high)
(m4 / missile, mod, i / intercontinental)
(r2 / research-01, ARG0, m2 / more)
(r2 / research-01, ARG1, a / and)
(s / system, mod, d2 / defense)
(s2 / speed, mod, h / high)

Decoded in 270,134 microseconds
Sentence: 5. Resume nuclear experiments, and establish military forces in space.

Spans:
Span 5-6:  and => and
Span 6-7:  establish => establish-01
Span 3-4:  experiments => experiment-01
Span 8-9:  forces => force
Span 7-8:  military => military
Span 2-3:  nuclear => nucleus
Span 10-11:  space => space

 *** WARNING: The dependency tree seems broken.  I can't find the head of space in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 12
Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),space,space,false), Span(8,9,List(1),forces,force,false), Span(7,8,List(2),military,military,false), Span(6,7,List(3),establish,establish-01,false), Span(5,6,List(4),and,and,false), Span(3,4,List(5),experiments,experiment-01,false), Span(2,3,List(6),nuclear,nucleus,false)),Map(2 -> military, 5 -> experiment-01, 1 -> force, 4 -> and, 6 -> nucleus, 0 -> space, 3 -> establish-01),Map(n -> nucleus, e -> establish-01, e2 -> experiment-01, s -> space, m -> military, a -> and, f -> force))),[Ljava.lang.String;@865dd6,Annotation([Ljava.lang.String;@4da4253,[Ljava.lang.String;@3972a855,[Ljava.lang.String;@62e7f11d),Annotation([Ljava.lang.String;@503d687a,[Ljava.lang.String;@6a370f4,[Ledu.cmu.lti.nlp.amr.Dependency;@2abf4075),Annotation([Ljava.lang.String;@770d3326,[Ljava.lang.String;@4cc8eb05,[Ljava.lang.String;@51f116b8),Annotation([Ljava.lang.String;@19d481b,[Ljava.lang.String;@1f97cf0d,[Ledu.cmu.lti.nlp.amr.Entity;@140c9f39))
AMR:
(a / and, op, e2 / experiment-01)
(e / establish-01, ARG1, a / and)
(e / establish-01, ARG6, m / military)
(e2 / experiment-01, ARG1, n / nucleus)
(e2 / experiment-01, ARG6, s / space)
(f / force, name, m / military)

Decoded in 110,571 microseconds
Sentence: 6. Retain 1000 nuclear bombs equivalent to ten million tons of TNT, and when necessary, install nuclear warheads on all short- and middle-range missiles.

Spans:
Span 2-3:  1000 => (date-entity :year 1000)
Span 21-22:  all => all
Span 24-25:  and => and
Span 13-14:  and => and
Span 4-5:  bombs => bomb
Span 5-6:  equivalent => equivalent
Span 17-18:  install => install-01
Span 28-29:  missiles => missile
Span 18-19:  nuclear => nucleus
Span 3-4:  nuclear => nucleus
Span 27-28:  range => range
Span 22-23:  short => short
Span 7-8:  ten => ten
Span 9-10:  tons => (mass-quantity :unit ton)
Span 19-20:  warheads => warhead

 *** WARNING: The dependency tree seems broken.  I can't find the head of missiles in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),missiles,missile,false), Span(27,28,List(1),range,range,false), Span(24,25,List(2),and,and,false), Span(22,23,List(3),short,short,false), Span(21,22,List(4),all,all,false), Span(19,20,List(5),warheads,warhead,false), Span(18,19,List(6),nuclear,nucleus,false), Span(17,18,List(7),install,install-01,false), Span(13,14,List(8),and,and,false), Span(9,10,List(10, 9),tons,(mass-quantity :unit ton),false), Span(7,8,List(11),ten,ten,false), Span(5,6,List(12),equivalent,equivalent,false), Span(4,5,List(13),bombs,bomb,false), Span(3,4,List(14),nuclear,nucleus,false), Span(2,3,List(16, 15),1000,(date-entity :year 1000),false)),Map(2 -> and, 5 -> warhead, 12 -> equivalent, 15 -> date-entity, 8 -> and, 7 -> install-01, 1 -> range, 4 -> all, 11 -> ten, 14 -> nucleus, 6 -> nucleus, 0 -> missile, 9 -> mass-quantity, 16 -> 1000, 3 -> short, 10 -> ton, 13 -> bomb),Map(e -> equivalent, w -> warhead, n -> nucleus, b -> bomb, t -> ton, m2 -> mass-quantity, a3 -> and, s -> short, d -> date-entity, m -> missile, 1 -> 1000, a -> and, t2 -> ten, r -> range, a2 -> all, i -> install-01, n2 -> nucleus))),[Ljava.lang.String;@4d910fd6,Annotation([Ljava.lang.String;@26275bef,[Ljava.lang.String;@7690781,[Ljava.lang.String;@77eca502),Annotation([Ljava.lang.String;@3246fb96,[Ljava.lang.String;@2e222612,[Ledu.cmu.lti.nlp.amr.Dependency;@61386958),Annotation([Ljava.lang.String;@73ee04c8,[Ljava.lang.String;@7671cb68,[Ljava.lang.String;@49dc7102),Annotation([Ljava.lang.String;@6b8ca3c8,[Ljava.lang.String;@68c72235,[Ledu.cmu.lti.nlp.amr.Entity;@10959ece))
AMR:
(a / and, op, m / missile)
(a2 / all, calendar, s / short)
(a3 / and, op, a / and)
(b / bomb, mod, n2 / nucleus)
(d / date-entity, year, 1 / 1000)
(e / equivalent, mod, n2 / nucleus)
(i / install-01, ARG0, n2 / nucleus)
(i / install-01, ARG1, n / nucleus)
(i / install-01, ARG2, a / and)
(i / install-01, time, s / short)
(m / missile, mod, r / range)
(m2 / mass-quantity, calendar, a3 / and)
(m2 / mass-quantity, unit, t / ton)
(n2 / nucleus, calendar, d / date-entity)
(t2 / ten, calendar, e / equivalent)
(w / warhead, mod, n / nucleus)

Decoded in 335,157 microseconds
Sentence: 7. Retain 30 strategic nuclear submarines with the ability to inflict three devastating nuclear strikes against enemies.

Spans:
Span 2-3:  30 => 30
Span 12-13:  devastating => devastate-01
Span 10-11:  inflict => inflict-01
Span 13-14:  nuclear => nucleus
Span 4-5:  nuclear => nucleus
Span 3-4:  strategic => strategy
Span 14-15:  strikes => strike-01
Span 5-6:  submarines => submarine
Span 11-12:  three => 3

 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 18
Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),strikes,strike-01,false), Span(13,14,List(1),nuclear,nucleus,false), Span(12,13,List(2),devastating,devastate-01,false), Span(11,12,List(3),three,3,false), Span(10,11,List(4),inflict,inflict-01,false), Span(5,6,List(5),submarines,submarine,false), Span(4,5,List(6),nuclear,nucleus,false), Span(3,4,List(7),strategic,strategy,false), Span(2,3,List(8),30,30,false)),Map(2 -> devastate-01, 5 -> submarine, 8 -> 30, 7 -> strategy, 1 -> nucleus, 4 -> inflict-01, 6 -> nucleus, 0 -> strike-01, 3 -> 3),Map(n -> nucleus, s2 -> submarine, s -> strike-01, d -> devastate-01, 32 -> 30, i -> inflict-01, s3 -> strategy, n2 -> nucleus, 3 -> 3))),[Ljava.lang.String;@3a6bb9bf,Annotation([Ljava.lang.String;@34f7cfd9,[Ljava.lang.String;@65f095f8,[Ljava.lang.String;@59af0466),Annotation([Ljava.lang.String;@3e6ef8ad,[Ljava.lang.String;@346d61be,[Ledu.cmu.lti.nlp.amr.Dependency;@55536d9e),Annotation([Ljava.lang.String;@747edf66,[Ljava.lang.String;@3d1cfad4,[Ljava.lang.String;@62230c58),Annotation([Ljava.lang.String;@2cd2a21f,[Ljava.lang.String;@2e55dd0c,[Ledu.cmu.lti.nlp.amr.Entity;@74455848))
AMR:
(d / devastate-01, ARG1, s / strike-01)
(d / devastate-01, ARG6, 3 / 3)
(i / inflict-01, ARG0, s2 / submarine)
(i / inflict-01, ARG1, n / nucleus)
(n2 / nucleus, mod, s3 / strategy)
(s / strike-01, ARG1, n / nucleus)
(s2 / submarine, mod, s3 / strategy)
(s3 / strategy, calendar, 32 / 30)

Decoded in 126,374 microseconds
Sentence: 8. Abandon the commitment to not use nuclear weapons first.

Spans:
Span 3-4:  commitment => commit-01
Span 7-8:  nuclear => nucleus
Span 6-7:  use => use-01
Span 8-9:  weapons => weapon

 *** WARNING: The dependency tree seems broken.  I can't find the head of first in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 11
Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),weapons,weapon,false), Span(7,8,List(1),nuclear,nucleus,false), Span(6,7,List(2),use,use-01,false), Span(3,4,List(3),commitment,commit-01,false)),Map(2 -> use-01, 1 -> nucleus, 0 -> weapon, 3 -> commit-01),Map(n -> nucleus, w -> weapon, c -> commit-01, u -> use-01))),[Ljava.lang.String;@e7edb54,Annotation([Ljava.lang.String;@378542de,[Ljava.lang.String;@3738449f,[Ljava.lang.String;@69e1dd28),Annotation([Ljava.lang.String;@11bd0f3b,[Ljava.lang.String;@c333c60,[Ledu.cmu.lti.nlp.amr.Dependency;@79da8dc5),Annotation([Ljava.lang.String;@1eb5174b,[Ljava.lang.String;@67080771,[Ljava.lang.String;@72cde7cc),Annotation([Ljava.lang.String;@5fd4f8f5,[Ljava.lang.String;@696da30b,[Ledu.cmu.lti.nlp.amr.Entity;@4e7912d8))
AMR:
(c / commit-01, ARG1, u / use-01)
(u / use-01, ARG1, n / nucleus)
(u / use-01, ARG2, w / weapon)

Decoded in 75,367 microseconds
Sentence: 9. Retain the right of pre-emptive strike when national security is threatened.

Spans:
Span 10-11:  national => nation
Span 3-4:  right => right
Span 11-12:  security => security
Span 8-9:  strike => strike-01
Span 13-14:  threatened => threaten-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of threatened in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 13
Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),threatened,threaten-01,false), Span(11,12,List(1),security,security,false), Span(10,11,List(2),national,nation,false), Span(8,9,List(3),strike,strike-01,false), Span(3,4,List(4),right,right,false)),Map(2 -> nation, 1 -> security, 4 -> right, 0 -> threaten-01, 3 -> strike-01),Map(n -> nation, s2 -> strike-01, t -> threaten-01, s -> security, r -> right))),[Ljava.lang.String;@53976f5c,Annotation([Ljava.lang.String;@2bfc268b,[Ljava.lang.String;@2f8dad04,[Ljava.lang.String;@29e495ff),Annotation([Ljava.lang.String;@41e1e210,[Ljava.lang.String;@be35cd9,[Ledu.cmu.lti.nlp.amr.Dependency;@4944252c),Annotation([Ljava.lang.String;@44821a96,[Ljava.lang.String;@a3d8174,[Ljava.lang.String;@1ba9117e),Annotation([Ljava.lang.String;@732c2a62,[Ljava.lang.String;@272ed83b,[Ledu.cmu.lti.nlp.amr.Entity;@41fecb8b))
AMR:
(r / right, mod, s2 / strike-01)
(s2 / strike-01, ARG1, s / security)
(t / threaten-01, ARG1, s / security)
(t / threaten-01, ARG6, n / nation)

Decoded in 93,180 microseconds
Sentence: My fellow citizens, only if we have self-confidence and self-improvement, can we strive to be strong. Qin Shi Huang unified China. Zheng Chenggong recovered Taiwan. In our responsibilities we must carry on the farsightedness, insight, and strong will of our predecessors.

NER Entity: (person :name (name :op "Qin" :op "Shi" :op "Huang"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Zheng" :op "Chenggong"))
NER Entity: (country :name (name :op "Taiwan"))
Spans:
Span 46-47:  and => and
Span 11-12:  and => and
Span 16-17:  can => possible
Span 39-40:  carry => carry-01
Span 27-28:  China => (country :name (name :op "China"))
Span 2-3:  citizens => citizen
Span 10-11:  confidence => confidence
Span 1-2:  fellow => (have-org-role-91 :ARG2 fellow)
Span 25-27:  Huang unified => (person :name (name :op "Zheng" :op "Chenggong"))
Span 14-15:  improvement => improve-01
Span 44-45:  insight => insight
Span 4-5:  only => only
Span 51-52:  predecessors => predecessor
Span 31-32:  recovered => recover-02
Span 12-13:  self => self
Span 8-9:  self => self
Span 47-48:  strong => strong
Span 32-33:  Taiwan => (country :name (name :op "Taiwan"))
Span 19-22:  to be strong => (person :name (name :op "Qin" :op "Shi" :op "Huang"))
Span 37-38:  we => we
Span 17-18:  we => we
Span 6-7:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of Qin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of Shi in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of Huang in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of unified in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zheng in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Chenggong in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of recovered in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of Taiwan in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of In in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of responsibilities in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of farsightedness in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of insight in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of predecessors in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 48
Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(51,52,List(0),predecessors,predecessor,false), Span(47,48,List(1),strong,strong,false), Span(46,47,List(2),and,and,false), Span(44,45,List(3),insight,insight,false), Span(39,40,List(4),carry,carry-01,false), Span(37,38,List(5),we,we,false), Span(32,33,List(8, 7, 6),Taiwan,(country :name (name :op "Taiwan")),false), Span(31,32,List(9),recovered,recover-02,false), Span(27,28,List(12, 11, 10),China,(country :name (name :op "China")),false), Span(25,27,List(16, 15, 14, 13),Huang unified,(person :name (name :op "Zheng" :op "Chenggong")),false), Span(19,22,List(21, 20, 19, 18, 17),to be strong,(person :name (name :op "Qin" :op "Shi" :op "Huang")),false), Span(17,18,List(22),we,we,false), Span(16,17,List(23),can,possible,false), Span(14,15,List(24),improvement,improve-01,false), Span(12,13,List(25),self,self,false), Span(11,12,List(26),and,and,false), Span(10,11,List(27),confidence,confidence,false), Span(8,9,List(28),self,self,false), Span(6,7,List(29),we,we,false), Span(4,5,List(30),only,only,false), Span(2,3,List(31),citizens,citizen,false), Span(1,2,List(33, 32),fellow,(have-org-role-91 :ARG2 fellow),false)),Map(30 -> only, 2 -> and, 5 -> we, 33 -> fellow, 27 -> confidence, 12 -> "China", 8 -> "Taiwan", 15 -> "Zheng", 21 -> "Huang", 18 -> name, 24 -> improve-01, 7 -> name, 1 -> strong, 17 -> person, 23 -> possible, 26 -> and, 4 -> carry-01, 11 -> name, 32 -> have-org-role-91, 14 -> name, 29 -> we, 20 -> "Shi", 28 -> self, 6 -> country, 9 -> recover-02, 0 -> predecessor, 22 -> we, 16 -> "Chenggong", 19 -> "Qin", 10 -> country, 3 -> insight, 31 -> citizen, 25 -> self, 13 -> person),Map(n -> name, w -> we, h -> have-org-role-91, s2 -> self, p2 -> person, n4 -> name, c4 -> confidence, w3 -> we, s -> strong, p -> predecessor, n3 -> name, c3 -> country, a -> and, p4 -> possible, i2 -> improve-01, w2 -> we, r -> recover-02, i -> insight, a2 -> and, c -> carry-01, s3 -> self, f -> fellow, o -> only, p3 -> person, n2 -> name, c2 -> country, c5 -> citizen))),[Ljava.lang.String;@120f102b,Annotation([Ljava.lang.String;@625732,[Ljava.lang.String;@51dcb805,[Ljava.lang.String;@66498326),Annotation([Ljava.lang.String;@cad498c,[Ljava.lang.String;@1e6454ec,[Ledu.cmu.lti.nlp.amr.Dependency;@2accdbb5),Annotation([Ljava.lang.String;@b62d79,[Ljava.lang.String;@6631f5ca,[Ljava.lang.String;@5ace1ed4),Annotation([Ljava.lang.String;@1613674b,[Ljava.lang.String;@27ff5d15,[Ledu.cmu.lti.nlp.amr.Entity;@4e096385))
AMR:
(a / and, op, i / insight)
(a / and, op, s / strong)
(a2 / and, op, c4 / confidence)
(a2 / and, op, i2 / improve-01)
(c / carry-01, ARG0, w2 / we)
(c / carry-01, ARG1, p3 / person)
(c / carry-01, ARG6, w / we)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / confidence, calendar, w3 / we)
(c4 / confidence, mod, s3 / self)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, c5 / citizen)
(h / have-org-role-91, ARG2, f / fellow)
(i / insight, poss, w2 / we)
(i2 / improve-01, ARG0, c2 / country)
(i2 / improve-01, ARG1, s2 / self)
(n / name, op, "Taiwan")
(n2 / name, op, "China")
(n3 / name, op, "Chenggong")
(n3 / name, op, "Zheng")
(n4 / name, op, "Huang")
(n4 / name, op, "Qin")
(n4 / name, op, "Shi")
(o / only, domain, w3 / we)
(p / predecessor, poss, w2 / we)
(p2 / person, direction, c3 / country)
(p2 / person, name, n3 / name)
(p2 / person, poss, w2 / we)
(p3 / person, name, n4 / name)
(p4 / possible, calendar, w2 / we)
(r / recover-02, ARG0, w2 / we)
(r / recover-02, ARG1, c2 / country)

Decoded in 2,225,084 microseconds
Sentence: Now, that piece of land trembling far away from the embrace of the motherland is shaking, moaning, and calling. Fellow citizens, let us carry forward the unfulfilled wishes of previous generals, moving forward courageously!

Spans:
Span 20-21:  and => and
Span 8-9:  away => away
Span 21-22:  calling => call-03
Span 28-29:  carry => carry-01
Span 24-25:  citizens => citizen
Span 7-8:  far => far
Span 38-39:  forward => forward
Span 29-30:  forward => forward
Span 35-36:  generals => general
Span 5-6:  land => land
Span 26-27:  let => let-01
Span 37-38:  moving => move-02
Span 34-35:  previous => previous
Span 32-33:  wishes => wish-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of Fellow in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizens in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of us in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of unfulfilled in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of wishes in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of previous in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of generals in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of moving in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of courageously in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 40
Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),forward,forward,false), Span(37,38,List(1),moving,move-02,false), Span(35,36,List(2),generals,general,false), Span(34,35,List(3),previous,previous,false), Span(32,33,List(4),wishes,wish-01,false), Span(29,30,List(5),forward,forward,false), Span(28,29,List(6),carry,carry-01,false), Span(26,27,List(7),let,let-01,false), Span(24,25,List(8),citizens,citizen,false), Span(21,22,List(9),calling,call-03,false), Span(20,21,List(10),and,and,false), Span(8,9,List(11),away,away,false), Span(7,8,List(12),far,far,false), Span(5,6,List(13),land,land,false)),Map(2 -> general, 5 -> forward, 12 -> far, 8 -> citizen, 7 -> let-01, 1 -> move-02, 4 -> wish-01, 11 -> away, 6 -> carry-01, 0 -> forward, 9 -> call-03, 3 -> previous, 10 -> and, 13 -> land),Map(w -> wish-01, m -> move-02, g -> general, p -> previous, c3 -> call-03, a -> and, f3 -> far, l2 -> land, a2 -> away, c -> carry-01, f2 -> forward, l -> let-01, f -> forward, c2 -> citizen))),[Ljava.lang.String;@649bec2e,Annotation([Ljava.lang.String;@693fe6c9,[Ljava.lang.String;@34f5090e,[Ljava.lang.String;@31e5415e),Annotation([Ljava.lang.String;@a2431d0,[Ljava.lang.String;@1cbb87f3,[Ledu.cmu.lti.nlp.amr.Dependency;@1a4013),Annotation([Ljava.lang.String;@1b6e1eff,[Ljava.lang.String;@306f16f3,[Ljava.lang.String;@702b8b12),Annotation([Ljava.lang.String;@22e357dc,[Ljava.lang.String;@49912c99,[Ledu.cmu.lti.nlp.amr.Entity;@10163d6))
AMR:
(a / and, op, c2 / citizen)
(a / and, op, c3 / call-03)
(a / and, op, f / forward)
(a / and, op, f2 / forward)
(a / and, op, g / general)
(a / and, op, l / let-01)
(a / and, op, p / previous)
(a / and, op, w / wish-01)
(c / carry-01, ARG1, a / and)
(c3 / call-03, ARG1, f3 / far)
(l / let-01, ARG1, l2 / land)
(m / move-02, ARG1, a / and)
(w / wish-01, ARG1, a2 / away)

Decoded in 253,864 microseconds
Sentence: When reading over history, the heaviness and anger in my heart simmer into concern for the nation. Although I was born to cloth gown and am one of the common people, for the prosperity of the motherland, for the motherland being splendid once again, I am willing to voluntarily serve our country, and I will have no regrets even if I die! My sincere patriotic heart is adequate to show to heaven!

Spans:
Span 74-75:  adequate => adequate
Span 47-48:  again => again
Span 58-59:  and => and
Span 26-27:  and => and
Span 7-8:  and => and
Span 8-9:  anger => anger-01
Span 22-23:  born => bear-02
Span 31-32:  common => common
Span 14-15:  concern => concern-01
Span 56-57:  country => country
Span 64-65:  even => even
Span 72-73:  heart => heart
Span 11-12:  heart => heart
Span 3-4:  history => history
Span 17-18:  nation => nation
Span 62-63:  no => -
Span 46-47:  once => once
Span 28-29:  one => 1
Span 2-3:  over => over
Span 32-33:  people => people
Span 54-55:  serve => serve-01
Span 76-77:  show => show-01
Span 70-71:  sincere => sincere
Span 51-52:  willing => will-02

 *** WARNING: The dependency tree seems broken.  I can't find the head of am in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of willing in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of voluntarily in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of serve in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of regrets in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of die in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of My in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of sincere in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of patriotic in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of heart in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of adequate in position 74
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 75
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 76
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 77
 *** WARNING: The dependency tree seems broken.  I can't find the head of heaven in position 78
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 79
Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(76,77,List(0),show,show-01,false), Span(74,75,List(1),adequate,adequate,false), Span(72,73,List(2),heart,heart,false), Span(70,71,List(3),sincere,sincere,false), Span(64,65,List(4),even,even,false), Span(62,63,List(5),no,-,false), Span(58,59,List(6),and,and,false), Span(56,57,List(7),country,country,false), Span(54,55,List(8),serve,serve-01,false), Span(51,52,List(9),willing,will-02,false), Span(47,48,List(10),again,again,false), Span(46,47,List(11),once,once,false), Span(32,33,List(12),people,people,false), Span(31,32,List(13),common,common,false), Span(28,29,List(14),one,1,false), Span(26,27,List(15),and,and,false), Span(22,23,List(16),born,bear-02,false), Span(17,18,List(17),nation,nation,false), Span(14,15,List(18),concern,concern-01,false), Span(11,12,List(19),heart,heart,false), Span(8,9,List(20),anger,anger-01,false), Span(7,8,List(21),and,and,false), Span(3,4,List(22),history,history,false), Span(2,3,List(23),over,over,false)),Map(2 -> heart, 5 -> -, 12 -> people, 15 -> and, 8 -> serve-01, 21 -> and, 18 -> concern-01, 7 -> country, 17 -> nation, 1 -> adequate, 23 -> over, 4 -> even, 11 -> once, 14 -> 1, 20 -> anger-01, 6 -> and, 22 -> history, 0 -> show-01, 9 -> will-02, 16 -> bear-02, 19 -> heart, 3 -> sincere, 10 -> again, 13 -> common),Map(e -> even, n -> nation, w -> will-02, h -> heart, h2 -> heart, s2 -> sincere, b -> bear-02, a3 -> again, s -> show-01, a6 -> and, 1 -> 1, p -> people, c3 -> concern-01, a -> adequate, o2 -> over, a5 -> anger-01, a2 -> and, - -> -, h3 -> history, c -> country, s3 -> serve-01, o -> once, c2 -> common, a4 -> and))),[Ljava.lang.String;@2dde1bff,Annotation([Ljava.lang.String;@15bbf42f,[Ljava.lang.String;@550ee7e5,[Ljava.lang.String;@5f9b2141),Annotation([Ljava.lang.String;@247d8ae,[Ljava.lang.String;@48974e45,[Ledu.cmu.lti.nlp.amr.Dependency;@6a84a97d),Annotation([Ljava.lang.String;@6c130c45,[Ljava.lang.String;@50ad3bc1,[Ljava.lang.String;@223aa2f7),Annotation([Ljava.lang.String;@6d3a388c,[Ljava.lang.String;@193f604a,[Ledu.cmu.lti.nlp.amr.Entity;@20f5239f))
AMR:
(1 / 1, calendar, a4 / and)
(a5 / anger-01, ARG0, h2 / heart)
(a5 / anger-01, ARG1, c2 / common)
(a6 / and, op, - / -)
(a6 / and, op, a2 / and)
(a6 / and, op, a5 / anger-01)
(a6 / and, op, c3 / concern-01)
(a6 / and, op, s2 / sincere)
(b / bear-02, ARG1, n / nation)
(b / bear-02, ARG6, a4 / and)
(c3 / concern-01, ARG0, n / nation)
(c3 / concern-01, ARG1, o2 / over)
(e / even, location, a6 / and)
(o2 / over, op, h3 / history)
(p / people, location, a6 / and)
(s / show-01, ARG0, a6 / and)
(s / show-01, ARG1, h / heart)
(s / show-01, ARG6, a / adequate)
(s3 / serve-01, ARG0, a6 / and)
(s3 / serve-01, ARG1, c / country)
(s3 / serve-01, ARG6, a3 / again)
(w / will-02, ARG0, a6 / and)
(w / will-02, ARG1, o / once)

Decoded in 1,785,371 microseconds
Sentence: Here, I've composed a poem in classical ci form, to voice the aspirations of my heart.

Spans:
Span 4-5:  composed => compose-01
Span 10-11:  form => form
Span 18-19:  heart => heart
Span 13-14:  voice => voice

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),heart,heart,false), Span(13,14,List(1),voice,voice,false), Span(10,11,List(2),form,form,false), Span(4,5,List(3),composed,compose-01,false)),Map(2 -> form, 1 -> voice, 0 -> heart, 3 -> compose-01),Map(h -> heart, v -> voice, c -> compose-01, f -> form))),[Ljava.lang.String;@57af006c,Annotation([Ljava.lang.String;@6bedbc4d,[Ljava.lang.String;@932bc4a,[Ljava.lang.String;@d29f28),Annotation([Ljava.lang.String;@2fd1433e,[Ljava.lang.String;@29d89d5d,[Ledu.cmu.lti.nlp.amr.Dependency;@3514a4c0),Annotation([Ljava.lang.String;@212b5695,[Ljava.lang.String;@446293d,[Ljava.lang.String;@69997e9d),Annotation([Ljava.lang.String;@793be5ca,[Ljava.lang.String;@2df9b86,[Ledu.cmu.lti.nlp.amr.Entity;@37654521))
AMR:
(c / compose-01, ARG0, h / heart)
(c / compose-01, ARG1, f / form)
(c / compose-01, ARG6, v / voice)

Decoded in 76,282 microseconds
Sentence: Paint the deep red lips

Spans:
Span 2-3:  deep => deep
Span 3-4:  red => red

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),red,red,false), Span(2,3,List(1),deep,deep,false)),Map(1 -> deep, 0 -> red),Map(d -> deep, r -> red))),[Ljava.lang.String;@15aab8c6,Annotation([Ljava.lang.String;@33990a0c,[Ljava.lang.String;@4de4b452,[Ljava.lang.String;@50b5ac82),Annotation([Ljava.lang.String;@101952da,[Ljava.lang.String;@6babf3bf,[Ledu.cmu.lti.nlp.amr.Dependency;@3059cbc),Annotation([Ljava.lang.String;@7ea9e1e2,[Ljava.lang.String;@24fcf36f,[Ljava.lang.String;@10feca44),Annotation([Ljava.lang.String;@3fb1549b,[Ljava.lang.String;@ea6147e,[Ledu.cmu.lti.nlp.amr.Entity;@4d02f94e))
AMR:
(r / red, mod, d / deep)

Decoded in 4,992 microseconds
Sentence: Protect the Diaoyu Islands

NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 2-4:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,4,List(2, 1, 0),Diaoyu Islands,(name :op "Islands" :op "Diaoyu"),false)),Map(2 -> "Diaoyu", 1 -> "Islands", 0 -> name),Map(n -> name))),[Ljava.lang.String;@2b48a640,Annotation([Ljava.lang.String;@1e683a3e,[Ljava.lang.String;@2053d869,[Ljava.lang.String;@7a419da4),Annotation([Ljava.lang.String;@14555e0a,[Ljava.lang.String;@4bb33f74,[Ledu.cmu.lti.nlp.amr.Dependency;@759d26fb),Annotation([Ljava.lang.String;@3c73951,[Ljava.lang.String;@3d5c822d,[Ljava.lang.String;@6f46426d),Annotation([Ljava.lang.String;@73700b80,[Ljava.lang.String;@49c7b90e,[Ledu.cmu.lti.nlp.amr.Entity;@10d307f1))
AMR:
(n / name, op, "Diaoyu")
(n / name, op, "Islands")

Decoded in 4,197 microseconds
Sentence: Bitterly lost our Ryukyu Islands

NER Entity: (country :name (name :op "Ryukyu" :op "Islands"))
Spans:
Span 1-2:  lost => lose-02
Span 3-5:  Ryukyu Islands => (country :name (name :op "Ryukyu" :op "Islands"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,5,List(3, 2, 1, 0),Ryukyu Islands,(country :name (name :op "Ryukyu" :op "Islands")),false), Span(1,2,List(4),lost,lose-02,false)),Map(2 -> "Ryukyu", 1 -> name, 4 -> lose-02, 0 -> country, 3 -> "Islands"),Map(n -> name, l -> lose-02, c -> country))),[Ljava.lang.String;@4d5b6aac,Annotation([Ljava.lang.String;@3e84448c,[Ljava.lang.String;@4a7f959b,[Ljava.lang.String;@429bffaa),Annotation([Ljava.lang.String;@5403f35f,[Ljava.lang.String;@483f6d77,[Ledu.cmu.lti.nlp.amr.Dependency;@7e5afaa6),Annotation([Ljava.lang.String;@63a12c68,[Ljava.lang.String;@28f3b248,[Ljava.lang.String;@1b1426f4),Annotation([Ljava.lang.String;@32b260fa,[Ljava.lang.String;@581ac8a8,[Ledu.cmu.lti.nlp.amr.Entity;@6d4e5011))
AMR:
(c / country, name, n / name)
(l / lose-02, ARG1, c / country)
(n / name, op, "Islands")
(n / name, op, "Ryukyu")

Decoded in 8,363 microseconds
Sentence: How can we allow the Diaoyu Islands to fall to other countries

NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 3-4:  allow => allow-01
Span 1-2:  can => possible
Span 11-12:  countries => country
Span 5-7:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Span 8-9:  fall => fall-05
Span 10-11:  other => other
Span 2-3:  we => we

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),countries,country,false), Span(10,11,List(1),other,other,false), Span(8,9,List(2),fall,fall-05,false), Span(5,7,List(5, 4, 3),Diaoyu Islands,(name :op "Islands" :op "Diaoyu"),false), Span(3,4,List(6),allow,allow-01,false), Span(2,3,List(7),we,we,false), Span(1,2,List(8),can,possible,false)),Map(2 -> fall-05, 5 -> "Diaoyu", 8 -> possible, 7 -> we, 1 -> other, 4 -> "Islands", 6 -> allow-01, 0 -> country, 3 -> name),Map(w -> we, n -> name, p -> possible, a -> allow-01, c -> country, f -> fall-05, o -> other))),[Ljava.lang.String;@57d7f8ca,Annotation([Ljava.lang.String;@76c3e77a,[Ljava.lang.String;@78123e82,[Ljava.lang.String;@67c33749),Annotation([Ljava.lang.String;@fba92d3,[Ljava.lang.String;@662b4c69,[Ledu.cmu.lti.nlp.amr.Dependency;@fa49800),Annotation([Ljava.lang.String;@71238fc2,[Ljava.lang.String;@2a54a73f,[Ljava.lang.String;@16a0ee18),Annotation([Ljava.lang.String;@3d6f0054,[Ljava.lang.String;@505fc5a4,[Ledu.cmu.lti.nlp.amr.Entity;@5fbdfdcf))
AMR:
(a / allow-01, ARG0, w / we)
(a / allow-01, ARG1, f / fall-05)
(f / fall-05, ARG0, n / name)
(f / fall-05, ARG1, c / country)
(f / fall-05, ARG2, o / other)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / possible, domain, a / allow-01)

Decoded in 102,895 microseconds
Sentence: One hundred years of vicissitudes

Spans:
Span 0-1:  One => 1
Span 2-3:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(1, 0),years,(temporal-quantity :unit year),false), Span(0,1,List(2),One,1,false)),Map(2 -> 1, 1 -> year, 0 -> temporal-quantity),Map(t -> temporal-quantity, 1 -> 1, y -> year))),[Ljava.lang.String;@4efc180e,Annotation([Ljava.lang.String;@bd4dc25,[Ljava.lang.String;@25084a1e,[Ljava.lang.String;@156b88f5),Annotation([Ljava.lang.String;@3bf9ce3e,[Ljava.lang.String;@16610890,[Ledu.cmu.lti.nlp.amr.Dependency;@71def8f8),Annotation([Ljava.lang.String;@383bfa16,[Ljava.lang.String;@4d465b11,[Ljava.lang.String;@53fdffa1),Annotation([Ljava.lang.String;@5562c41e,[Ljava.lang.String;@32ee6fee,[Ledu.cmu.lti.nlp.amr.Entity;@4d0f2471))
AMR:
(t / temporal-quantity, calendar, 1 / 1)
(t / temporal-quantity, unit, y / year)

Decoded in 7,339 microseconds
Sentence: Smoke and clouds chase the flying waves

Spans:
Span 1-2:  and => and
Span 5-6:  flying => fly-01
Span 6-7:  waves => wave

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),waves,wave,false), Span(5,6,List(1),flying,fly-01,false), Span(1,2,List(2),and,and,false)),Map(2 -> and, 1 -> fly-01, 0 -> wave),Map(w -> wave, a -> and, f -> fly-01))),[Ljava.lang.String;@7133da86,Annotation([Ljava.lang.String;@3232a28a,[Ljava.lang.String;@73e22a3d,[Ljava.lang.String;@47faa49c),Annotation([Ljava.lang.String;@28f2a10f,[Ljava.lang.String;@f736069,[Ledu.cmu.lti.nlp.amr.Dependency;@6da21078),Annotation([Ljava.lang.String;@7fee8714,[Ljava.lang.String;@4229bb3f,[Ljava.lang.String;@56cdfb3b),Annotation([Ljava.lang.String;@2b91004a,[Ljava.lang.String;@20ccf40b,[Ledu.cmu.lti.nlp.amr.Entity;@2fb3536e))
AMR:
(f / fly-01, ARG0, a / and)
(f / fly-01, ARG1, w / wave)

Decoded in 32,139 microseconds
Sentence: Youngest brother is still a tender youth

Spans:
Span 1-2:  brother => brother
Span 3-4:  still => still
Span 5-6:  tender => tender-01
Span 6-7:  youth => youth

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),youth,youth,false), Span(5,6,List(1),tender,tender-01,false), Span(3,4,List(2),still,still,false), Span(1,2,List(3),brother,brother,false)),Map(2 -> still, 1 -> tender-01, 0 -> youth, 3 -> brother),Map(b -> brother, t -> tender-01, s -> still, y -> youth))),[Ljava.lang.String;@169e6180,Annotation([Ljava.lang.String;@35aea049,[Ljava.lang.String;@7205765b,[Ljava.lang.String;@47987356),Annotation([Ljava.lang.String;@22ef9844,[Ljava.lang.String;@6283d8b8,[Ledu.cmu.lti.nlp.amr.Dependency;@3b6ddd1d),Annotation([Ljava.lang.String;@3f6b0be5,[Ljava.lang.String;@611889f4,[Ljava.lang.String;@1da2cb77),Annotation([Ljava.lang.String;@48f278eb,[Ljava.lang.String;@2f217633,[Ledu.cmu.lti.nlp.amr.Entity;@a530d0a))
AMR:
(t / tender-01, ARG0, b / brother)
(t / tender-01, ARG1, y / youth)
(t / tender-01, ARG6, s / still)

Decoded in 34,101 microseconds
Sentence: Wandering in all directions, bearing a seal

Spans:
Span 2-3:  all => all
Span 5-6:  bearing => bear-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),bearing,bear-01,false), Span(2,3,List(1),all,all,false)),Map(1 -> all, 0 -> bear-01),Map(b -> bear-01, a -> all))),[Ljava.lang.String;@1a18644,Annotation([Ljava.lang.String;@5acf93bb,[Ljava.lang.String;@7e7be63f,[Ljava.lang.String;@6cd28fa7),Annotation([Ljava.lang.String;@614ca7df,[Ljava.lang.String;@4738a206,[Ledu.cmu.lti.nlp.amr.Dependency;@66d3eec0),Annotation([Ljava.lang.String;@1e04fa0a,[Ljava.lang.String;@1af2d44a,[Ljava.lang.String;@18d87d80),Annotation([Ljava.lang.String;@618425b5,[Ljava.lang.String;@58695725,[Ledu.cmu.lti.nlp.amr.Entity;@543588e6))
AMR:
(b / bear-01, ARG1, a / all)

Decoded in 7,813 microseconds
Sentence: Looking over to the flag

Spans:
Span 1-2:  over => over

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),over,over,false)),Map(0 -> over),Map(o -> over))),[Ljava.lang.String;@f5acb9d,Annotation([Ljava.lang.String;@4fb3ee4e,[Ljava.lang.String;@5d7148e2,[Ljava.lang.String;@25fb8912),Annotation([Ljava.lang.String;@7c24b813,[Ljava.lang.String;@2c35e847,[Ledu.cmu.lti.nlp.amr.Dependency;@7bd4937b),Annotation([Ljava.lang.String;@21e360a,[Ljava.lang.String;@5ba3f27a,[Ljava.lang.String;@58d75e99),Annotation([Ljava.lang.String;@74751b3,[Ljava.lang.String;@741a8937,[Ledu.cmu.lti.nlp.amr.Entity;@306e95ec))
AMR:


Decoded in 3,560 microseconds
Sentence: Brandish our weapons and cross to the east

NER Entity: (thing :name (name :op "Brandish"))
Spans:
Span 3-4:  and => and
Span 4-5:  cross => cross-02
Span 7-8:  east => east
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),east,east,false), Span(4,5,List(1),cross,cross-02,false), Span(3,4,List(2),and,and,false), Span(2,3,List(3),weapons,weapon,false)),Map(2 -> and, 1 -> cross-02, 0 -> east, 3 -> weapon),Map(w -> weapon, e -> east, a -> and, c -> cross-02))),[Ljava.lang.String;@52af26ee,Annotation([Ljava.lang.String;@6fd83fc1,[Ljava.lang.String;@4f2b503c,[Ljava.lang.String;@bae7dc0),Annotation([Ljava.lang.String;@209da20d,[Ljava.lang.String;@e15b7e8,[Ledu.cmu.lti.nlp.amr.Dependency;@1b2abca6),Annotation([Ljava.lang.String;@6392827e,[Ljava.lang.String;@2ed2d9cb,[Ljava.lang.String;@d5b810e),Annotation([Ljava.lang.String;@43dac38f,[Ljava.lang.String;@342c38f8,[Ledu.cmu.lti.nlp.amr.Entity;@c88a337))
AMR:
(a / and, op, c / cross-02)
(a / and, op, w / weapon)
(c / cross-02, ARG6, e / east)

Decoded in 50,732 microseconds
Sentence: Let the horses drink from the Pacific Ocean

NER Entity: (country :name (name :op "Pacific" :op "Ocean"))
Spans:
Span 3-4:  drink => (thing :ARG1-of drink-01)
Span 2-3:  horses => horse
Span 6-8:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,8,List(3, 2, 1, 0),Pacific Ocean,(ocean :name (name :op "Ocean" :op "Pacific")),false), Span(3,4,List(5, 4),drink,(thing :ARG1-of drink-01),false), Span(2,3,List(6),horses,horse,false)),Map(2 -> "Ocean", 5 -> drink-01, 1 -> name, 4 -> thing, 6 -> horse, 0 -> ocean, 3 -> "Pacific"),Map(n -> name, h -> horse, t -> thing, d -> drink-01, o -> ocean))),[Ljava.lang.String;@5d0a1059,Annotation([Ljava.lang.String;@485966cc,[Ljava.lang.String;@1de76cc7,[Ljava.lang.String;@54bff557),Annotation([Ljava.lang.String;@593aaf41,[Ljava.lang.String;@5a56cdac,[Ledu.cmu.lti.nlp.amr.Dependency;@7c711375),Annotation([Ljava.lang.String;@57cf54e1,[Ljava.lang.String;@5b03b9fe,[Ljava.lang.String;@37d4349f),Annotation([Ljava.lang.String;@434a63ab,[Ljava.lang.String;@6e0f5f7f,[Ledu.cmu.lti.nlp.amr.Entity;@2805d709))
AMR:
(d / drink-01, ARG0, o / ocean)
(d / drink-01, ARG1, t / thing)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)
(t / thing, mod, h / horse)

Decoded in 90,343 microseconds
Sentence: June, 26th, 2002

Spans:
Span 4-5:  2002 => (date-entity :year 2002)
Span 0-1:  June => (date-entity :month 6)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(1, 0),2002,(date-entity :year 2002),false), Span(0,1,List(3, 2),June,(date-entity :month 6),false)),Map(2 -> date-entity, 1 -> 2002, 0 -> date-entity, 3 -> 6),Map(2 -> 2002, d -> date-entity, d2 -> date-entity, 6 -> 6))),[Ljava.lang.String;@3ee37e5a,Annotation([Ljava.lang.String;@2ea41516,[Ljava.lang.String;@3a44431a,[Ljava.lang.String;@3c7f66c4),Annotation([Ljava.lang.String;@194bcebf,[Ljava.lang.String;@17497425,[Ledu.cmu.lti.nlp.amr.Dependency;@f0da945),Annotation([Ljava.lang.String;@4803b726,[Ljava.lang.String;@ffaa6af,[Ljava.lang.String;@53ce1329),Annotation([Ljava.lang.String;@316bcf94,[Ljava.lang.String;@6404f418,[Ledu.cmu.lti.nlp.amr.Entity;@3e11f9e9))
AMR:
(d / date-entity, year, 2 / 2002)
(d2 / date-entity, calendar, d / date-entity)
(d2 / date-entity, month, 6 / 6)

Decoded in 9,648 microseconds
Sentence: Other articles: "A book for Taiwan compatriots-I have a dream", "The necessity for building memorials museums or temples for Chinese national heroes", "How long will we tolerate it", "China is expecting the Olympics, but would never beg for the Olympics", "If we forget the hardship of history, there will be more history of hardship", "I am Chinese", "There is only one Chinese nation, there is only one Chinese culture", "With the over-development of sports, the state may decline", "'Wealthy country, strong people' or 'wealthy officials, poor people"?", "Disgusting Ren Zhiqiang, shut your filthy mouth", "Hateful housing prices! Pitiable people!", "Google, you have no right to make irresponsible remarks to China", "How long will we tolerate the US", "Japan deserved the bombing-strongly oppose Ban Ki-moon presenting a bouquet in Hiroshima", "Be strong, my brothers and sisters", "Do we need low-level entertainment stars, or talents in technological innovation?", "Contemporary garbage writer, shameless Li Yinhe, please let the children off the hook"

NER Entity: (country :name (name :op "Taiwan"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "Olympics"))
NER Entity: (thing :name (name :op "Olympics"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Ren" :op "Zhiqiang"))
NER Entity: (organization :name (name :op "Google"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (person :name (name :op "Ban" :op "Ki" :op "-" :op "moon"))
NER Entity: (country :name (name :op "Hiroshima"))
NER Entity: (person :name (name :op "Li" :op "Yinhe"))
NER Entity: (country :name (name :op "Hiroshima"))
NER Entity: (organization :name (name :op "Google"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 174-176:  " , => (person :name (name :op "Ban" :op "Ki" :op "-" :op "moon"))
Span 201-202:  and => and
Span 1-2:  articles => article
Span 180-181:  bombing => bomb-01
Span 5-6:  book => book
Span 20-21:  building => build-01
Span 47-48:  but => contrast-01
Span 235-236:  children => child
Span 163-164:  China => (country :name (name :op "China"))
Span 41-42:  China => (country :name (name :op "China"))
Span 92-93:  Chinese => (country :name (name :op "China"))
Span 85-86:  Chinese => (country :name (name :op "China"))
Span 77-78:  Chinese => (country :name (name :op "China"))
Span 26-27:  Chinese => (country :name (name :op "China"))
Span 114-115:  country => country
Span 93-94:  culture => culture
Span 108-109:  decline => decline-01
Span 101-102:  development => develop-02
Span 212-213:  entertainment => entertain-01
Span 69-70:  history => history
Span 63-64:  history => history
Span 143-144:  housing => house-01
Span 37-38:  it => it
Span 177-178:  Japan => (country :name (name :op "Japan"))
Span 233-234:  let => let-01
Span 211-212:  level => level
Span 168-169:  long => long
Span 33-34:  long => long
Span 209-210:  low => low
Span 159-160:  make => make-01
Span 107-108:  may => possible
Span 187-188:  moon => moon
Span 68-69:  more => more
Span 86-87:  nation => nation
Span 27-28:  national => nation
Span 208-209:  need => need-01
Span 156-157:  no => -
Span 236-237:  off => off
Span 122-123:  officials => (have-org-role-91 :ARG2 official)
Span 53-54:  Olympics => (game :name (name :op "Olympics"))
Span 45-46:  Olympics => (game :name (name :op "Olympics"))
Span 91-92:  one => 1
Span 84-85:  one => 1
Span 90-91:  only => only
Span 83-84:  only => only
Span 183-184:  oppose => oppose-01
Span 119-120:  or => or
Span 23-24:  or => or
Span 215-217:  or talents => (person :name (name :op "Li" :op "Yinhe"))
Span 0-1:  Other => other
Span 99-100:  over => over
Span 147-148:  people => people
Span 117-118:  people => people
Span 124-126:  poor people => (person :name (name :op "Ren" :op "Zhiqiang"))
Span 144-145:  prices => price-01
Span 161-162:  remarks => remark-01
Span 157-158:  right => right
Span 135-136:  shut => shut-05
Span 106-107:  state => state
Span 197-198:  strong => strong
Span 116-117:  strong => strong
Span 182-183:  strongly => strong
Span 7-8:  Taiwan => (country :name (name :op "Taiwan"))
Span 218-219:  technological => technology
Span 173-174:  US => (country :name (name :op "US"))
Span 207-208:  we => we
Span 170-171:  we => we
Span 58-59:  we => we
Span 35-36:  we => we
Span 121-122:  wealthy => wealth
Span 154-155:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 125
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 126
 *** WARNING: The dependency tree seems broken.  I can't find the head of Disgusting in position 127
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ren in position 128
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zhiqiang in position 129
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 130
 *** WARNING: The dependency tree seems broken.  I can't find the head of shut in position 131
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 132
 *** WARNING: The dependency tree seems broken.  I can't find the head of filthy in position 133
 *** WARNING: The dependency tree seems broken.  I can't find the head of mouth in position 134
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 135
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 136
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 137
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hateful in position 138
 *** WARNING: The dependency tree seems broken.  I can't find the head of housing in position 139
 *** WARNING: The dependency tree seems broken.  I can't find the head of prices in position 140
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 141
 *** WARNING: The dependency tree seems broken.  I can't find the head of Pitiable in position 142
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 143
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 144
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 145
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 146
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 147
 *** WARNING: The dependency tree seems broken.  I can't find the head of Google in position 148
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 149
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 150
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 151
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 152
 *** WARNING: The dependency tree seems broken.  I can't find the head of right in position 153
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 154
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 155
 *** WARNING: The dependency tree seems broken.  I can't find the head of irresponsible in position 156
 *** WARNING: The dependency tree seems broken.  I can't find the head of remarks in position 157
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 158
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 159
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 160
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 161
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 162
 *** WARNING: The dependency tree seems broken.  I can't find the head of How in position 163
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 164
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 165
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 166
 *** WARNING: The dependency tree seems broken.  I can't find the head of tolerate in position 167
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 168
 *** WARNING: The dependency tree seems broken.  I can't find the head of US in position 169
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 170
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 171
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 172
 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 173
 *** WARNING: The dependency tree seems broken.  I can't find the head of deserved in position 174
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 175
 *** WARNING: The dependency tree seems broken.  I can't find the head of bombing-strongly in position 176
 *** WARNING: The dependency tree seems broken.  I can't find the head of oppose in position 177
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ban in position 178
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ki-moon in position 179
 *** WARNING: The dependency tree seems broken.  I can't find the head of presenting in position 180
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 181
 *** WARNING: The dependency tree seems broken.  I can't find the head of bouquet in position 182
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 183
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hiroshima in position 184
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 185
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 186
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 187
 *** WARNING: The dependency tree seems broken.  I can't find the head of Be in position 188
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 189
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 190
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 191
 *** WARNING: The dependency tree seems broken.  I can't find the head of brothers in position 192
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 193
 *** WARNING: The dependency tree seems broken.  I can't find the head of sisters in position 194
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 195
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 196
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 197
 *** WARNING: The dependency tree seems broken.  I can't find the head of Do in position 198
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 199
 *** WARNING: The dependency tree seems broken.  I can't find the head of need in position 200
 *** WARNING: The dependency tree seems broken.  I can't find the head of low-level in position 201
 *** WARNING: The dependency tree seems broken.  I can't find the head of entertainment in position 202
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 203
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 204
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 205
 *** WARNING: The dependency tree seems broken.  I can't find the head of talents in position 206
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 207
 *** WARNING: The dependency tree seems broken.  I can't find the head of technological in position 208
 *** WARNING: The dependency tree seems broken.  I can't find the head of innovation in position 209
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 210
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 211
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 212
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 213
 *** WARNING: The dependency tree seems broken.  I can't find the head of Contemporary in position 214
 *** WARNING: The dependency tree seems broken.  I can't find the head of garbage in position 215
 *** WARNING: The dependency tree seems broken.  I can't find the head of writer in position 216
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 217
 *** WARNING: The dependency tree seems broken.  I can't find the head of shameless in position 218
 *** WARNING: The dependency tree seems broken.  I can't find the head of Li in position 219
 *** WARNING: The dependency tree seems broken.  I can't find the head of Yinhe in position 220
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 221
 *** WARNING: The dependency tree seems broken.  I can't find the head of please in position 222
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 223
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 224
 *** WARNING: The dependency tree seems broken.  I can't find the head of children in position 225
 *** WARNING: The dependency tree seems broken.  I can't find the head of off in position 226
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 227
 *** WARNING: The dependency tree seems broken.  I can't find the head of hook in position 228
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 229
Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(236,237,List(0),off,off,false), Span(235,236,List(1),children,child,false), Span(233,234,List(2),let,let-01,false), Span(218,219,List(3),technological,technology,false), Span(215,217,List(7, 6, 5, 4),or talents,(person :name (name :op "Li" :op "Yinhe")),false), Span(212,213,List(8),entertainment,entertain-01,false), Span(211,212,List(9),level,level,false), Span(209,210,List(10),low,low,false), Span(208,209,List(11),need,need-01,false), Span(207,208,List(12),we,we,false), Span(201,202,List(13),and,and,false), Span(197,198,List(14),strong,strong,false), Span(187,188,List(15),moon,moon,false), Span(183,184,List(16),oppose,oppose-01,false), Span(182,183,List(17),strongly,strong,false), Span(180,181,List(18),bombing,bomb-01,false), Span(177,178,List(21, 20, 19),Japan,(country :name (name :op "Japan")),false), Span(174,176,List(27, 26, 25, 24, 23, 22)," ,,(person :name (name :op "Ban" :op "Ki" :op "-" :op "moon")),false), Span(173,174,List(30, 29, 28),US,(country :name (name :op "US")),false), Span(170,171,List(31),we,we,false), Span(168,169,List(32),long,long,false), Span(163,164,List(35, 34, 33),China,(country :name (name :op "China")),false), Span(161,162,List(36),remarks,remark-01,false), Span(159,160,List(37),make,make-01,false), Span(157,158,List(38),right,right,false), Span(156,157,List(39),no,-,false), Span(154,155,List(40),you,you,false), Span(147,148,List(41),people,people,false), Span(144,145,List(42),prices,price-01,false), Span(143,144,List(43),housing,house-01,false), Span(135,136,List(44),shut,shut-05,false), Span(124,126,List(48, 47, 46, 45),poor people,(person :name (name :op "Ren" :op "Zhiqiang")),false), Span(122,123,List(50, 49),officials,(have-org-role-91 :ARG2 official),false), Span(121,122,List(51),wealthy,wealth,false), Span(119,120,List(52),or,or,false), Span(117,118,List(53),people,people,false), Span(116,117,List(54),strong,strong,false), Span(114,115,List(55),country,country,false), Span(108,109,List(56),decline,decline-01,false), Span(107,108,List(57),may,possible,false), Span(106,107,List(58),state,state,false), Span(101,102,List(59),development,develop-02,false), Span(99,100,List(60),over,over,false), Span(93,94,List(61),culture,culture,false), Span(92,93,List(64, 63, 62),Chinese,(country :name (name :op "China")),false), Span(91,92,List(65),one,1,false), Span(90,91,List(66),only,only,false), Span(86,87,List(67),nation,nation,false), Span(85,86,List(70, 69, 68),Chinese,(country :name (name :op "China")),false), Span(84,85,List(71),one,1,false), Span(83,84,List(72),only,only,false), Span(77,78,List(75, 74, 73),Chinese,(country :name (name :op "China")),false), Span(69,70,List(76),history,history,false), Span(68,69,List(77),more,more,false), Span(63,64,List(78),history,history,false), Span(58,59,List(79),we,we,false), Span(53,54,List(82, 81, 80),Olympics,(game :name (name :op "Olympics")),false), Span(47,48,List(83),but,contrast-01,false), Span(45,46,List(86, 85, 84),Olympics,(game :name (name :op "Olympics")),false), Span(41,42,List(89, 88, 87),China,(country :name (name :op "China")),false), Span(37,38,List(90),it,it,false), Span(35,36,List(91),we,we,false), Span(33,34,List(92),long,long,false), Span(27,28,List(93),national,nation,false), Span(26,27,List(96, 95, 94),Chinese,(country :name (name :op "China")),false), Span(23,24,List(97),or,or,false), Span(20,21,List(98),building,build-01,false), Span(7,8,List(101, 100, 99),Taiwan,(country :name (name :op "Taiwan")),false), Span(5,6,List(102),book,book,false), Span(1,2,List(103),articles,article,false), Span(0,1,List(104),Other,other,false)),Map(99 -> country, 90 -> it, 57 -> possible, 84 -> game, 78 -> history, 63 -> name, 45 -> person, 39 -> -, 30 -> "US", 66 -> only, 51 -> wealth, 2 -> let-01, 87 -> country, 72 -> only, 5 -> name, 48 -> "Zhiqiang", 33 -> country, 69 -> name, 27 -> "moon", 54 -> strong, 12 -> we, 60 -> over, 8 -> entertain-01, 15 -> moon, 42 -> price-01, 36 -> remark-01, 98 -> build-01, 21 -> "Japan", 71 -> 1, 92 -> long, 18 -> bomb-01, 86 -> "Olympics", 24 -> "Ban", 74 -> name, 101 -> "Taiwan", 89 -> "China", 95 -> name, 53 -> people, 68 -> country, 80 -> game, 41 -> people, 35 -> "China", 83 -> contrast-01, 104 -> other, 56 -> decline-01, 62 -> country, 7 -> "Yinhe", 77 -> more, 59 -> develop-02, 1 -> child, 17 -> strong, 50 -> official, 44 -> shut-05, 23 -> name, 38 -> right, 65 -> 1, 47 -> "Ren", 26 -> "-", 4 -> person, 11 -> need-01, 32 -> long, 14 -> strong, 97 -> or, 82 -> "Olympics", 29 -> name, 20 -> name, 103 -> article, 79 -> we, 85 -> name, 70 -> "China", 64 -> "China", 91 -> we, 46 -> name, 94 -> country, 52 -> or, 67 -> nation, 73 -> country, 100 -> name, 88 -> name, 34 -> name, 28 -> country, 6 -> "Li", 40 -> you, 55 -> country, 49 -> have-org-role-91, 61 -> culture, 76 -> history, 9 -> level, 0 -> off, 43 -> house-01, 22 -> person, 58 -> state, 16 -> oppose-01, 37 -> make-01, 19 -> country, 3 -> technology, 10 -> low, 31 -> we, 25 -> "Ki", 93 -> nation, 13 -> and, 75 -> "China", 81 -> name, 96 -> "China", 102 -> book),Map(n12 -> name, e -> entertain-01, s5 -> state, m3 -> more, n -> name, b3 -> book, w -> we, c8 -> country, h -> house-01, p5 -> person, s2 -> strong, h2 -> have-org-role-91, 12 -> 1, t -> technology, o9 -> other, b -> bomb-01, b2 -> build-01, m2 -> make-01, o3 -> official, n11 -> name, c7 -> country, n7 -> name, o6 -> only, n14 -> name, p2 -> person, n17 -> name, c10 -> contrast-01, l3 -> low, n4 -> name, c4 -> country, w3 -> wealth, s -> strong, h4 -> history, s4 -> strong, c13 -> country, d -> decline-01, m -> moon, g2 -> game, 1 -> 1, o5 -> over, r2 -> right, y -> you, g -> game, p -> person, n16 -> name, c3 -> country, n3 -> name, a -> and, p4 -> price-01, o8 -> or, l5 -> long, o2 -> oppose-01, n6 -> name, d2 -> develop-02, n10 -> name, p7 -> possible, c12 -> country, w5 -> we, c6 -> culture, c9 -> country, n9 -> nation, n13 -> name, w2 -> we, l2 -> level, i -> it, a2 -> article, r -> remark-01, c -> child, - -> -, h3 -> history, s3 -> shut-05, p6 -> people, l -> let-01, n8 -> name, o -> off, o4 -> or, o7 -> only, p3 -> people, n15 -> nation, c2 -> country, n2 -> need-01, c11 -> country, w4 -> we, l4 -> long, n5 -> name, c5 -> country))),[Ljava.lang.String;@1de5f259,Annotation([Ljava.lang.String;@729d991e,[Ljava.lang.String;@31fa1761,[Ljava.lang.String;@957e06),Annotation([Ljava.lang.String;@32502377,[Ljava.lang.String;@2c1b194a,[Ledu.cmu.lti.nlp.amr.Dependency;@4dbb42b7),Annotation([Ljava.lang.String;@66f57048,[Ljava.lang.String;@550dbc7a,[Ljava.lang.String;@21282ed8),Annotation([Ljava.lang.String;@36916eb0,[Ljava.lang.String;@7bab3f1a,[Ledu.cmu.lti.nlp.amr.Entity;@437da279))
AMR:
(- / -, domain, y / you)
(a / and, op, s / strong)
(a2 / article, calendar, b3 / book)
(a2 / article, mod, o9 / other)
(b / bomb-01, ARG0, c2 / country)
(b / bomb-01, ARG1, s2 / strong)
(b2 / build-01, ARG0, c11 / country)
(b2 / build-01, ARG1, o8 / or)
(b2 / build-01, ARG6, l5 / long)
(b3 / book, location, c13 / country)
(c10 / contrast-01, ARG0, g / game)
(c10 / contrast-01, ARG1, g2 / game)
(c11 / country, name, n14 / name)
(c12 / country, name, n16 / name)
(c12 / country, op, c10 / contrast-01)
(c13 / country, name, n17 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(c4 / country, name, n6 / name)
(c6 / culture, mod, c7 / country)
(c6 / culture, mod, o6 / only)
(c6 / culture, quant, 1 / 1)
(c7 / country, name, n8 / name)
(c8 / country, name, n10 / name)
(c9 / country, name, n11 / name)
(d / decline-01, ARG0, n9 / nation)
(d / decline-01, ARG1, s5 / state)
(d / decline-01, ARG2, d2 / develop-02)
(d2 / develop-02, ARG0, c9 / country)
(d2 / develop-02, ARG1, o5 / over)
(e / entertain-01, ARG0, p / person)
(e / entertain-01, ARG1, l2 / level)
(g / game, name, n12 / name)
(g2 / game, name, n13 / name)
(g2 / game, poss, c11 / country)
(h / house-01, ARG0, w3 / wealth)
(h / house-01, ARG1, p4 / price-01)
(h2 / have-org-role-91, ARG0, p5 / person)
(h2 / have-org-role-91, ARG1, c7 / country)
(h2 / have-org-role-91, ARG2, o3 / official)
(h2 / have-org-role-91, ARG6, p6 / people)
(h3 / history, poss, c7 / country)
(h3 / history, poss, c9 / country)
(h3 / history, quant, m3 / more)
(h4 / history, op, w4 / we)
(h4 / history, poss, c11 / country)
(h4 / history, poss, c8 / country)
(l / let-01, ARG0, p / person)
(l / let-01, ARG1, c / child)
(l / let-01, ARG6, o / off)
(l2 / level, mod, l3 / low)
(l5 / long, calendar, w5 / we)
(m2 / make-01, ARG1, r / remark-01)
(m2 / make-01, ARG6, r2 / right)
(n / name, op, "Li")
(n / name, op, "Yinhe")
(n10 / name, op, "China")
(n11 / name, op, "China")
(n12 / name, op, "Olympics")
(n13 / name, op, "Olympics")
(n14 / name, op, "China")
(n15 / nation, mod, c12 / country)
(n16 / name, op, "China")
(n17 / name, op, "Taiwan")
(n2 / need-01, ARG0, w / we)
(n2 / need-01, ARG1, a / and)
(n2 / need-01, ARG6, l3 / low)
(n3 / name, op, "Japan")
(n4 / name, op, "-")
(n4 / name, op, "Ban")
(n4 / name, op, "Ki")
(n4 / name, op, "moon")
(n5 / name, op, "US")
(n6 / name, op, "China")
(n7 / name, op, "Ren")
(n7 / name, op, "Zhiqiang")
(n8 / name, op, "China")
(n9 / nation, mod, c8 / country)
(n9 / nation, mod, o7 / only)
(n9 / nation, quant, 12 / 1)
(o2 / oppose-01, ARG0, p2 / person)
(o2 / oppose-01, ARG1, s2 / strong)
(o2 / oppose-01, ARG2, s / strong)
(o2 / oppose-01, ARG6, m / moon)
(o4 / or, op, c5 / country)
(o4 / or, op, h2 / have-org-role-91)
(o8 / or, mod, o9 / other)
(p / person, name, n / name)
(p2 / person, location, c3 / country)
(p2 / person, name, n4 / name)
(p4 / price-01, ARG0, y / you)
(p4 / price-01, ARG1, p3 / people)
(p5 / person, name, n7 / name)
(p6 / people, mod, s4 / strong)
(p7 / possible, domain, d / decline-01)
(r / remark-01, ARG0, p2 / person)
(r / remark-01, ARG1, c4 / country)
(r / remark-01, ARG6, l4 / long)
(r2 / right, op, - / -)
(s3 / shut-05, ARG0, s4 / strong)
(s3 / shut-05, ARG1, h / house-01)
(t / technology, mod, l2 / level)
(w2 / we, mod, l4 / long)
(w5 / we, calendar, i / it)

Decoded in 22,896,430 microseconds
Sentence: Why don't we fight with little Japan?

NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 1-2:  do => do-02
Span 4-5:  fight => fight-01
Span 7-8:  Japan => (country :name (name :op "Japan"))
Span 6-7:  little => little
Span 3-4:  we => we

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(2, 1, 0),Japan,(country :name (name :op "Japan")),false), Span(6,7,List(3),little,little,false), Span(4,5,List(4),fight,fight-01,false), Span(3,4,List(5),we,we,false), Span(1,2,List(6),do,do-02,false)),Map(2 -> "Japan", 5 -> we, 1 -> name, 4 -> fight-01, 6 -> do-02, 0 -> country, 3 -> little),Map(w -> we, n -> name, d -> do-02, l -> little, c -> country, f -> fight-01))),[Ljava.lang.String;@23c30a20,Annotation([Ljava.lang.String;@1e1a0406,[Ljava.lang.String;@3cebbb30,[Ljava.lang.String;@12aba8be),Annotation([Ljava.lang.String;@290222c1,[Ljava.lang.String;@67f639d3,[Ledu.cmu.lti.nlp.amr.Dependency;@6253c26),Annotation([Ljava.lang.String;@49049a04,[Ljava.lang.String;@71a8adcf,[Ljava.lang.String;@27462a88),Annotation([Ljava.lang.String;@82de64a,[Ljava.lang.String;@659499f1,[Ledu.cmu.lti.nlp.amr.Entity;@51e69659))
AMR:
(c / country, degree, l / little)
(c / country, name, n / name)
(d / do-02, ARG1, f / fight-01)
(f / fight-01, ARG0, w / we)
(f / fight-01, ARG1, c / country)
(n / name, op, "Japan")

Decoded in 120,752 microseconds
Sentence: What do Chinese still tolerate ...

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 2-3:  Chinese => (country :name (name :op "China"))
Span 1-2:  do => do-02
Span 3-4:  still => still

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),still,still,false), Span(2,3,List(3, 2, 1),Chinese,(country :name (name :op "China")),false), Span(1,2,List(4),do,do-02,false)),Map(2 -> name, 1 -> country, 4 -> do-02, 0 -> still, 3 -> "China"),Map(n -> name, s -> still, d -> do-02, c -> country))),[Ljava.lang.String;@47e2e487,Annotation([Ljava.lang.String;@201a4587,[Ljava.lang.String;@61001b64,[Ljava.lang.String;@4310d43),Annotation([Ljava.lang.String;@54a7079e,[Ljava.lang.String;@26e356f0,[Ledu.cmu.lti.nlp.amr.Dependency;@47d9a273),Annotation([Ljava.lang.String;@4b8ee4de,[Ljava.lang.String;@27f981c6,[Ljava.lang.String;@1b11171f),Annotation([Ljava.lang.String;@1151e434,[Ljava.lang.String;@2dc54ad4,[Ledu.cmu.lti.nlp.amr.Entity;@4659191b))
AMR:
(c / country, name, n / name)
(d / do-02, ARG1, c / country)
(d / do-02, ARG6, s / still)
(n / name, op, "China")

Decoded in 68,528 microseconds
Sentence: They are riding even on our head

Spans:
Span 3-4:  even => even
Span 6-7:  head => head-01
Span 0-1:  They => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),head,head-01,false), Span(3,4,List(1),even,even,false), Span(0,1,List(2),They,they,false)),Map(2 -> they, 1 -> even, 0 -> head-01),Map(e -> even, h -> head-01, t -> they))),[Ljava.lang.String;@55634720,Annotation([Ljava.lang.String;@4b0d79fc,[Ljava.lang.String;@4c1909a3,[Ljava.lang.String;@428640fa),Annotation([Ljava.lang.String;@d9345cd,[Ljava.lang.String;@2d710f1a,[Ledu.cmu.lti.nlp.amr.Dependency;@29215f06),Annotation([Ljava.lang.String;@59505b48,[Ljava.lang.String;@4efac082,[Ljava.lang.String;@6bd61f98),Annotation([Ljava.lang.String;@48aca48b,[Ljava.lang.String;@13fd2ccd,[Ledu.cmu.lti.nlp.amr.Entity;@b9b00e0))
AMR:
(e / even, domain, t / they)
(h / head-01, ARG1, t / they)

Decoded in 8,264 microseconds
Sentence: Is this still what Chinese with guts do?

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 4-5:  Chinese => (country :name (name :op "China"))
Span 7-8:  do => do-02
Span 2-3:  still => still
Span 1-2:  this => this

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),do,do-02,false), Span(4,5,List(3, 2, 1),Chinese,(country :name (name :op "China")),false), Span(2,3,List(4),still,still,false), Span(1,2,List(5),this,this,false)),Map(2 -> name, 5 -> this, 1 -> country, 4 -> still, 0 -> do-02, 3 -> "China"),Map(n -> name, t -> this, s -> still, d -> do-02, c -> country))),[Ljava.lang.String;@506ae4d4,Annotation([Ljava.lang.String;@7d4f9aae,[Ljava.lang.String;@72e5a8e,[Ljava.lang.String;@54e1c68b),Annotation([Ljava.lang.String;@53aac487,[Ljava.lang.String;@52b1beb6,[Ledu.cmu.lti.nlp.amr.Dependency;@273e7444),Annotation([Ljava.lang.String;@7db12bb6,[Ljava.lang.String;@783a467b,[Ljava.lang.String;@272113c4),Annotation([Ljava.lang.String;@73e9cf30,[Ljava.lang.String;@771a660,[Ledu.cmu.lti.nlp.amr.Entity;@2d52216b))
AMR:
(c / country, name, n / name)
(d / do-02, ARG0, c / country)
(d / do-02, ARG1, t / this)
(d / do-02, ARG6, s / still)
(n / name, op, "China")

Decoded in 61,680 microseconds
Sentence: We should tell the whole world, that Chinese can't be bullied at will by others ...

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 8-9:  Chinese => (country :name (name :op "China"))
Span 16-17:  others => other
Span 1-2:  should => recommend-01
Span 2-3:  tell => tell-01
Span 4-5:  whole => whole
Span 5-6:  world => world

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),others,other,false), Span(8,9,List(3, 2, 1),Chinese,(country :name (name :op "China")),false), Span(5,6,List(4),world,world,false), Span(4,5,List(5),whole,whole,false), Span(2,3,List(6),tell,tell-01,false), Span(1,2,List(7),should,recommend-01,false)),Map(2 -> name, 5 -> whole, 7 -> recommend-01, 1 -> country, 4 -> world, 6 -> tell-01, 0 -> other, 3 -> "China"),Map(w -> world, n -> name, t -> tell-01, r -> recommend-01, w2 -> whole, c -> country, o -> other))),[Ljava.lang.String;@242b836,Annotation([Ljava.lang.String;@3f6f6701,[Ljava.lang.String;@3527942a,[Ljava.lang.String;@942a29c),Annotation([Ljava.lang.String;@1ed6388a,[Ljava.lang.String;@5a45133e,[Ledu.cmu.lti.nlp.amr.Dependency;@534a5a98),Annotation([Ljava.lang.String;@4f80542f,[Ljava.lang.String;@60bd273d,[Ljava.lang.String;@121314f7),Annotation([Ljava.lang.String;@130c12b7,[Ljava.lang.String;@5e600dd5,[Ledu.cmu.lti.nlp.amr.Entity;@576d5deb))
AMR:
(c / country, name, n / name)
(n / name, op, "China")
(r / recommend-01, ARG1, t / tell-01)
(r / recommend-01, ARG2, c / country)
(t / tell-01, ARG1, o / other)
(t / tell-01, ARG2, w / world)
(w / world, mod, w2 / whole)

Decoded in 139,016 microseconds
Sentence: It is time to show our strength! China has been calm for too long!

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 8-9:  China => (country :name (name :op "China"))
Span 0-1:  It => it
Span 14-15:  long => long
Span 4-5:  show => show-01
Span 6-7:  strength => strength
Span 2-3:  time => time
Span 13-14:  too => too

 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of been in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of calm in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 15
Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),long,long,false), Span(13,14,List(1),too,too,false), Span(8,9,List(4, 3, 2),China,(country :name (name :op "China")),false), Span(6,7,List(5),strength,strength,false), Span(4,5,List(6),show,show-01,false), Span(2,3,List(7),time,time,false), Span(0,1,List(8),It,it,false)),Map(2 -> country, 5 -> strength, 8 -> it, 7 -> time, 1 -> too, 4 -> "China", 6 -> show-01, 0 -> long, 3 -> name),Map(n -> name, s2 -> show-01, t -> too, s -> strength, t2 -> time, i -> it, c -> country, l -> long))),[Ljava.lang.String;@5d534f5d,Annotation([Ljava.lang.String;@2e3967ea,[Ljava.lang.String;@70e9c95d,[Ljava.lang.String;@4d5650ae),Annotation([Ljava.lang.String;@a38c7fe,[Ljava.lang.String;@6fdbe764,[Ledu.cmu.lti.nlp.amr.Dependency;@51c668e3),Annotation([Ljava.lang.String;@2e6a8155,[Ljava.lang.String;@6221a451,[Ljava.lang.String;@52719fb6),Annotation([Ljava.lang.String;@3012646b,[Ljava.lang.String;@4a883b15,[Ledu.cmu.lti.nlp.amr.Entity;@25641d39))
AMR:
(c / country, name, n / name)
(n / name, op, "China")
(s / strength, poss, c / country)
(s2 / show-01, ARG0, t2 / time)
(s2 / show-01, ARG1, s / strength)
(s2 / show-01, ARG6, i / it)
(t / too, calendar, l / long)
(t / too, purpose, s2 / show-01)

Decoded in 170,680 microseconds
Sentence: Currently our citizens' lives are all too carefree! The officials are too extravagant.

Spans:
Span 6-7:  all => all
Span 2-3:  citizens => citizen
Span 0-1:  Currently => current
Span 4-5:  lives => live-01
Span 11-12:  officials => (have-org-role-91 :ARG2 official)
Span 13-14:  too => too
Span 7-8:  too => too

 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of extravagant in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 15
Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),too,too,false), Span(11,12,List(2, 1),officials,(have-org-role-91 :ARG2 official),false), Span(7,8,List(3),too,too,false), Span(6,7,List(4),all,all,false), Span(4,5,List(5),lives,live-01,false), Span(2,3,List(6),citizens,citizen,false), Span(0,1,List(7),Currently,current,false)),Map(2 -> official, 5 -> live-01, 7 -> current, 1 -> have-org-role-91, 4 -> all, 6 -> citizen, 0 -> too, 3 -> too),Map(h -> have-org-role-91, t -> too, a -> all, t2 -> too, c -> citizen, l -> live-01, o -> official, c2 -> current))),[Ljava.lang.String;@7b36aa0c,Annotation([Ljava.lang.String;@5824a83d,[Ljava.lang.String;@537f60bf,[Ljava.lang.String;@5677323c),Annotation([Ljava.lang.String;@18df8434,[Ljava.lang.String;@65c7a252,[Ledu.cmu.lti.nlp.amr.Dependency;@4d154ccd),Annotation([Ljava.lang.String;@229c6181,[Ljava.lang.String;@4686afc2,[Ljava.lang.String;@1e0b4072),Annotation([Ljava.lang.String;@791f145a,[Ljava.lang.String;@38cee291,[Ledu.cmu.lti.nlp.amr.Entity;@4b45a2f5))
AMR:
(a / all, op, t / too)
(h / have-org-role-91, ARG1, t2 / too)
(h / have-org-role-91, ARG2, o / official)
(h / have-org-role-91, ARG6, l / live-01)
(l / live-01, ARG0, c / citizen)
(l / live-01, ARG1, c2 / current)
(t2 / too, op, t / too)

Decoded in 145,402 microseconds
Sentence: Now we already have no cohesion! China needs to start a war! A harsh slap in the face of the countries which follow the United States' rear!

NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "United" :op "States" :op "'"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 2-3:  already => already
Span 7-8:  China => (country :name (name :op "China"))
Span 22-23:  countries => country
Span 19-20:  face => face-01
Span 24-25:  follow => follow-03
Span 15-16:  harsh => harsh
Span 8-9:  needs => need-01
Span 4-5:  no => -
Span 29-30:  rear => rear
Span 10-11:  start => start-01
Span 26-28:  United States => (organization :name (name :op "United" :op "States" :op "'"))
Span 12-13:  war => war
Span 1-2:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of countries in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of which in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of follow in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of United in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of States in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of rear in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 30
Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),rear,rear,false), Span(26,28,List(5, 4, 3, 2, 1),United States,(organization :name (name :op "United" :op "States" :op "'")),false), Span(24,25,List(6),follow,follow-03,false), Span(22,23,List(7),countries,country,false), Span(19,20,List(8),face,face-01,false), Span(15,16,List(9),harsh,harsh,false), Span(12,13,List(10),war,war,false), Span(10,11,List(11),start,start-01,false), Span(8,9,List(12),needs,need-01,false), Span(7,8,List(15, 14, 13),China,(country :name (name :op "China")),false), Span(4,5,List(16),no,-,false), Span(2,3,List(17),already,already,false), Span(1,2,List(18),we,we,false)),Map(2 -> name, 5 -> "'", 12 -> need-01, 15 -> "China", 8 -> face-01, 18 -> we, 7 -> country, 17 -> already, 1 -> organization, 4 -> "States", 11 -> start-01, 14 -> name, 6 -> follow-03, 0 -> rear, 9 -> harsh, 16 -> -, 3 -> "United", 10 -> war, 13 -> country),Map(n -> name, w -> war, h -> harsh, s -> start-01, n3 -> name, a -> already, w2 -> we, r -> rear, - -> -, c -> country, f2 -> face-01, f -> follow-03, o -> organization, n2 -> need-01, c2 -> country))),[Ljava.lang.String;@f09733f,Annotation([Ljava.lang.String;@e350b40,[Ljava.lang.String;@41a0aa7d,[Ljava.lang.String;@2794eab6),Annotation([Ljava.lang.String;@6340e5f0,[Ljava.lang.String;@45099dd3,[Ledu.cmu.lti.nlp.amr.Dependency;@13e344d),Annotation([Ljava.lang.String;@1ffaf86,[Ljava.lang.String;@6574a52c,[Ljava.lang.String;@6c1a5b54),Annotation([Ljava.lang.String;@1c7696c6,[Ljava.lang.String;@60099951,[Ledu.cmu.lti.nlp.amr.Entity;@20140db9))
AMR:
(a / already, calendar, w2 / we)
(c2 / country, name, n3 / name)
(f / follow-03, ARG0, w2 / we)
(f / follow-03, ARG1, o / organization)
(f2 / face-01, ARG0, w2 / we)
(f2 / face-01, ARG1, c / country)
(f2 / face-01, ARG6, - / -)
(n / name, op, "'")
(n / name, op, "States")
(n / name, op, "United")
(n2 / need-01, ARG0, c2 / country)
(n2 / need-01, ARG1, s / start-01)
(n3 / name, op, "China")
(o / organization, name, n / name)
(r / rear, poss, w2 / we)
(s / start-01, ARG0, c / country)
(s / start-01, ARG1, w / war)
(s / start-01, ARG6, h / harsh)

Decoded in 722,849 microseconds
Sentence: Let them know that the US is not a panacea! If we win, it may increase China's influence! and improve the cohesion of the citizenry! If we lose, we can clean out those incompetent bureaucrats, and make those trash get out! Let China have new blood and get updated. , Get up, China!

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 54-55:  and => and
Span 42-43:  and => and
Span 22-23:  and => and
Span 53-54:  blood => blood
Span 40-41:  bureaucrats => bureaucrat
Span 35-36:  can => possible
Span 62-63:  China => (country :name (name :op "China"))
Span 50-51:  China => (country :name (name :op "China"))
Span 18-19:  China => (country :name (name :op "China"))
Span 36-37:  clean => clean-02
Span 55-56:  get => get-04
Span 46-47:  get => get-04
Span 23-24:  improve => improve-01
Span 17-18:  increase => increase-01
Span 20-21:  influence => influence-01
Span 15-16:  it => it
Span 2-3:  know => know-01
Span 32-33:  lose => lose-06
Span 43-44:  make => make-01
Span 16-17:  may => possible
Span 52-53:  new => new
Span 47-48:  out => out
Span 37-38:  out => out
Span 56-57:  updated => update-01
Span 5-6:  US => (country :name (name :op "US"))
Span 34-35:  we => we
Span 31-32:  we => we
Span 12-13:  we => we
Span 13-14:  win => win-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of improve in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of cohesion in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizenry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of If in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of clean in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of incompetent in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of bureaucrats in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of trash in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of Let in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of new in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of blood in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of updated in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of Get in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of up in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(62,63,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(56,57,List(3),updated,update-01,false), Span(55,56,List(4),get,get-04,false), Span(54,55,List(5),and,and,false), Span(53,54,List(6),blood,blood,false), Span(52,53,List(7),new,new,false), Span(50,51,List(10, 9, 8),China,(country :name (name :op "China")),false), Span(47,48,List(11),out,out,false), Span(46,47,List(12),get,get-04,false), Span(43,44,List(13),make,make-01,false), Span(42,43,List(14),and,and,false), Span(40,41,List(15),bureaucrats,bureaucrat,false), Span(37,38,List(16),out,out,false), Span(36,37,List(17),clean,clean-02,false), Span(35,36,List(18),can,possible,false), Span(34,35,List(19),we,we,false), Span(32,33,List(20),lose,lose-06,false), Span(31,32,List(21),we,we,false), Span(23,24,List(22),improve,improve-01,false), Span(22,23,List(23),and,and,false), Span(20,21,List(24),influence,influence-01,false), Span(18,19,List(27, 26, 25),China,(country :name (name :op "China")),false), Span(17,18,List(28),increase,increase-01,false), Span(16,17,List(29),may,possible,false), Span(15,16,List(30),it,it,false), Span(13,14,List(31),win,win-01,false), Span(12,13,List(32),we,we,false), Span(5,6,List(35, 34, 33),US,(country :name (name :op "US")),false), Span(2,3,List(36),know,know-01,false)),Map(30 -> it, 2 -> "China", 5 -> and, 33 -> country, 27 -> "China", 12 -> get-04, 8 -> country, 15 -> bureaucrat, 36 -> know-01, 21 -> we, 18 -> possible, 24 -> influence-01, 35 -> "US", 7 -> new, 1 -> name, 17 -> clean-02, 23 -> and, 26 -> name, 4 -> get-04, 11 -> out, 32 -> we, 14 -> and, 29 -> possible, 20 -> lose-06, 34 -> name, 28 -> increase-01, 6 -> blood, 9 -> name, 0 -> country, 22 -> improve-01, 16 -> out, 19 -> we, 10 -> "China", 3 -> update-01, 31 -> win-01, 25 -> country, 13 -> make-01),Map(n -> name, w -> we, i4 -> it, k -> know-01, b -> blood, b2 -> bureaucrat, p2 -> possible, a3 -> and, c4 -> country, n4 -> name, w3 -> win-01, m -> make-01, g2 -> get-04, i3 -> increase-01, g -> get-04, p -> possible, n3 -> name, a -> and, c3 -> clean-02, o2 -> out, i2 -> influence-01, w2 -> we, a2 -> and, i -> improve-01, c -> country, u -> update-01, l -> lose-06, o -> out, c2 -> country, n2 -> new, w4 -> we, n5 -> name, c5 -> country))),[Ljava.lang.String;@1e6a3214,Annotation([Ljava.lang.String;@368247b9,[Ljava.lang.String;@1a6d8329,[Ljava.lang.String;@1a942c18),Annotation([Ljava.lang.String;@55a147cc,[Ljava.lang.String;@71ba6d4e,[Ledu.cmu.lti.nlp.amr.Dependency;@738dc9b),Annotation([Ljava.lang.String;@3c77d488,[Ljava.lang.String;@63376bed,[Ljava.lang.String;@4145bad8),Annotation([Ljava.lang.String;@d86a6f,[Ljava.lang.String;@2892d68,[Ledu.cmu.lti.nlp.amr.Entity;@5ab956d7))
AMR:
(a / and, op, b / blood)
(a / and, op, g / get-04)
(a2 / and, op, b2 / bureaucrat)
(a2 / and, op, m / make-01)
(a2 / and, op, p / possible)
(a2 / and, op, p2 / possible)
(a3 / and, op, i / improve-01)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / clean-02, ARG0, w / we)
(c3 / clean-02, ARG1, p / possible)
(c3 / clean-02, ARG6, o2 / out)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(g / get-04, ARG0, c / country)
(g / get-04, ARG1, u / update-01)
(g2 / get-04, ARG1, a / and)
(g2 / get-04, ARG6, o / out)
(i / improve-01, ARG0, c5 / country)
(i / improve-01, ARG1, i2 / influence-01)
(i2 / influence-01, ARG1, k / know-01)
(i3 / increase-01, ARG0, i4 / it)
(i3 / increase-01, ARG1, c4 / country)
(i3 / increase-01, ARG6, p2 / possible)
(k / know-01, ARG1, w3 / win-01)
(l / lose-06, ARG0, w2 / we)
(l / lose-06, ARG1, p / possible)
(m / make-01, ARG0, c2 / country)
(m / make-01, ARG1, g2 / get-04)
(n / name, op, "China")
(n3 / name, op, "China")
(n4 / name, op, "China")
(n5 / name, op, "US")
(u / update-01, ARG1, n2 / new)
(w3 / win-01, ARG0, w4 / we)
(w3 / win-01, ARG1, i4 / it)

Decoded in 2,924,012 microseconds
Sentence: Go, China, go

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 2-3:  China => (country :name (name :op "China"))
Span 4-5:  go => go-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),go,go-01,false), Span(2,3,List(3, 2, 1),China,(country :name (name :op "China")),false)),Map(2 -> name, 1 -> country, 0 -> go-01, 3 -> "China"),Map(n -> name, g -> go-01, c -> country))),[Ljava.lang.String;@3646a422,Annotation([Ljava.lang.String;@750e2b97,[Ljava.lang.String;@3e27aa33,[Ljava.lang.String;@2e385cce),Annotation([Ljava.lang.String;@2ddc9a9f,[Ljava.lang.String;@298a5e20,[Ledu.cmu.lti.nlp.amr.Dependency;@2a7f1f10),Annotation([Ljava.lang.String;@46cdf8bd,[Ljava.lang.String;@f0c8a99,[Ljava.lang.String;@740cae06),Annotation([Ljava.lang.String;@26d9b808,[Ljava.lang.String;@f78a47e,[Ledu.cmu.lti.nlp.amr.Entity;@644baf4a))
AMR:
(c / country, name, n / name)
(g / go-01, ARG1, c / country)
(n / name, op, "China")

Decoded in 7,204 microseconds
Sentence: I suggest that China strengthens the guard on the Diaoyu Islands, make it daily, protect the fishermen and the sovereignty of our country; if Japan dares to invade our territory with military force, we will fight a small-scale war of self-defense, regardless of the cost. China can not lose!

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 25-26:  ; => and
Span 19-20:  and => and
Span 56-57:  can => possible
Span 55-56:  China => (country :name (name :op "China"))
Span 3-4:  China => (country :name (name :op "China"))
Span 53-54:  cost => cost-01
Span 24-25:  country => country
Span 14-15:  daily => daily
Span 48-49:  defense => defense
Span 9-11:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Span 39-40:  fight => fight-01
Span 35-36:  force => force
Span 30-31:  invade => invade-01
Span 13-14:  it => it
Span 27-28:  Japan => (country :name (name :op "Japan"))
Span 58-59:  lose => lose-06
Span 12-13:  make => make-01
Span 34-35:  military => military
Span 16-17:  protect => protect-01
Span 43-44:  scale => scale
Span 46-47:  self => self
Span 41-42:  small => small
Span 21-22:  sovereignty => sovereignty
Span 1-2:  suggest => suggest-01
Span 32-33:  territory => territory
Span 44-45:  war => war
Span 37-38:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 55
Langrangian relaxation converged after 65 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(58,59,List(0),lose,lose-06,false), Span(56,57,List(1),can,possible,false), Span(55,56,List(4, 3, 2),China,(country :name (name :op "China")),false), Span(53,54,List(5),cost,cost-01,false), Span(48,49,List(6),defense,defense,false), Span(46,47,List(7),self,self,false), Span(44,45,List(8),war,war,false), Span(43,44,List(9),scale,scale,false), Span(41,42,List(10),small,small,false), Span(39,40,List(11),fight,fight-01,false), Span(37,38,List(12),we,we,false), Span(35,36,List(13),force,force,false), Span(34,35,List(14),military,military,false), Span(32,33,List(15),territory,territory,false), Span(30,31,List(16),invade,invade-01,false), Span(27,28,List(19, 18, 17),Japan,(country :name (name :op "Japan")),false), Span(25,26,List(20),;,and,false), Span(24,25,List(21),country,country,false), Span(21,22,List(22),sovereignty,sovereignty,false), Span(19,20,List(23),and,and,false), Span(16,17,List(24),protect,protect-01,false), Span(14,15,List(25),daily,daily,false), Span(13,14,List(26),it,it,false), Span(12,13,List(27),make,make-01,false), Span(9,11,List(30, 29, 28),Diaoyu Islands,(name :op "Islands" :op "Diaoyu"),false), Span(3,4,List(33, 32, 31),China,(country :name (name :op "China")),false), Span(1,2,List(34),suggest,suggest-01,false)),Map(30 -> "Diaoyu", 2 -> country, 5 -> cost-01, 33 -> "China", 27 -> make-01, 12 -> we, 8 -> war, 15 -> territory, 21 -> country, 18 -> name, 24 -> protect-01, 7 -> self, 1 -> possible, 17 -> country, 23 -> and, 26 -> it, 4 -> "China", 11 -> fight-01, 32 -> name, 14 -> military, 29 -> "Islands", 20 -> and, 34 -> suggest-01, 28 -> name, 6 -> defense, 9 -> scale, 0 -> lose-06, 22 -> sovereignty, 16 -> invade-01, 19 -> "Japan", 10 -> small, 3 -> name, 31 -> country, 25 -> daily, 13 -> force),Map(s5 -> suggest-01, w -> war, n -> name, s2 -> scale, t -> territory, m2 -> make-01, p2 -> protect-01, n4 -> name, c4 -> country, s -> self, s4 -> sovereignty, d -> defense, m -> military, p -> possible, n3 -> name, c3 -> country, a -> and, d2 -> daily, i2 -> it, w2 -> we, i -> invade-01, a2 -> and, c -> country, s3 -> small, f2 -> force, l -> lose-06, f -> fight-01, c2 -> cost-01, n2 -> name, c5 -> country))),[Ljava.lang.String;@7526515b,Annotation([Ljava.lang.String;@1ed4ae0f,[Ljava.lang.String;@54c5a2ff,[Ljava.lang.String;@6d4d66d2),Annotation([Ljava.lang.String;@2a265ea9,[Ljava.lang.String;@11392934,[Ledu.cmu.lti.nlp.amr.Dependency;@6892b3b6),Annotation([Ljava.lang.String;@6e6f2380,[Ljava.lang.String;@76a4ebf2,[Ljava.lang.String;@2e8c1c9b),Annotation([Ljava.lang.String;@53fe15ff,[Ljava.lang.String;@449a4f23,[Ledu.cmu.lti.nlp.amr.Entity;@1530c739))
AMR:
(a / and, op, c4 / country)
(a2 / and, op, s4 / sovereignty)
(c / country, name, n / name)
(c2 / cost-01, ARG1, f / fight-01)
(c3 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c5 / country, name, n4 / name)
(d / defense, mod, s / self)
(f / fight-01, ARG0, w2 / we)
(f / fight-01, ARG1, w / war)
(f / fight-01, ARG6, i / invade-01)
(f2 / force, mod, m / military)
(i / invade-01, ARG0, c3 / country)
(i / invade-01, ARG1, t / territory)
(i / invade-01, ARG2, f2 / force)
(l / lose-06, ARG0, c / country)
(l / lose-06, ARG1, p2 / protect-01)
(l / lose-06, ARG6, p / possible)
(m / military, poss, c / country)
(m2 / make-01, ARG1, i2 / it)
(m2 / make-01, ARG6, d2 / daily)
(n / name, op, "China")
(n2 / name, op, "Japan")
(n3 / name, op, "Diaoyu")
(n3 / name, op, "Islands")
(n4 / name, op, "China")
(p2 / protect-01, ARG1, a2 / and)
(p2 / protect-01, ARG6, m2 / make-01)
(s2 / scale, mod, s3 / small)
(s4 / sovereignty, poss, c4 / country)
(s5 / suggest-01, ARG1, p2 / protect-01)
(s5 / suggest-01, ARG6, c5 / country)
(w / war, location, s / self)
(w / war, mod, s2 / scale)

Decoded in 3,815,961 microseconds
Sentence: We need shows in life, but it is really p. to show yourself within someone's embrace.

Spans:
Span 6-7:  but => contrast-01
Span 7-8:  it => it
Span 4-5:  life => life
Span 1-2:  need => need-01
Span 9-10:  really => really
Span 12-13:  show => show-01
Span 15-16:  someone => someone
Span 14-15:  within => within

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),someone,someone,false), Span(14,15,List(1),within,within,false), Span(12,13,List(2),show,show-01,false), Span(9,10,List(3),really,really,false), Span(7,8,List(4),it,it,false), Span(6,7,List(5),but,contrast-01,false), Span(4,5,List(6),life,life,false), Span(1,2,List(7),need,need-01,false)),Map(2 -> show-01, 5 -> contrast-01, 7 -> need-01, 1 -> within, 4 -> it, 6 -> life, 0 -> someone, 3 -> really),Map(n -> need-01, w -> within, s2 -> show-01, s -> someone, i -> it, r -> really, l -> life, c -> contrast-01))),[Ljava.lang.String;@5b1669c0,Annotation([Ljava.lang.String;@78e4deb0,[Ljava.lang.String;@6e9175d8,[Ljava.lang.String;@7d0b7e3c),Annotation([Ljava.lang.String;@15bb5034,[Ljava.lang.String;@4b741d6d,[Ledu.cmu.lti.nlp.amr.Dependency;@2eae8e6e),Annotation([Ljava.lang.String;@8f2ef19,[Ljava.lang.String;@470734c3,[Ljava.lang.String;@2cf3d63b),Annotation([Ljava.lang.String;@7674f035,[Ljava.lang.String;@69e153c5,[Ledu.cmu.lti.nlp.amr.Entity;@173ed316))
AMR:
(c / contrast-01, ARG1, n / need-01)
(c / contrast-01, ARG6, i / it)
(n / need-01, ARG1, l / life)
(r / really, domain, i / it)
(s2 / show-01, ARG0, s / someone)
(s2 / show-01, ARG1, i / it)
(s2 / show-01, time, w / within)

Decoded in 161,522 microseconds
Sentence: I'm just passing by

Spans:
Span 2-3:  just => just

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),just,just,false)),Map(0 -> just),Map(j -> just))),[Ljava.lang.String;@25ce9dc4,Annotation([Ljava.lang.String;@74ea2410,[Ljava.lang.String;@17f62e33,[Ljava.lang.String;@76b1e9b8),Annotation([Ljava.lang.String;@27406a17,[Ljava.lang.String;@2af004b,[Ledu.cmu.lti.nlp.amr.Dependency;@248e319b),Annotation([Ljava.lang.String;@5d0bf09b,[Ljava.lang.String;@793f29ff,[Ljava.lang.String;@3e8c3cb),Annotation([Ljava.lang.String;@563f38c4,[Ljava.lang.String;@543295b0,[Ledu.cmu.lti.nlp.amr.Entity;@54422e18))
AMR:


Decoded in 3,320 microseconds
Sentence: The whole society is like this, not to mention the stars

Spans:
Span 9-10:  mention => mention-01
Span 2-3:  society => society
Span 5-6:  this => this
Span 1-2:  whole => whole

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),mention,mention-01,false), Span(5,6,List(1),this,this,false), Span(2,3,List(2),society,society,false), Span(1,2,List(3),whole,whole,false)),Map(2 -> society, 1 -> this, 0 -> mention-01, 3 -> whole),Map(w -> whole, t -> this, s -> society, m -> mention-01))),[Ljava.lang.String;@117159c0,Annotation([Ljava.lang.String;@3e27ba32,[Ljava.lang.String;@7ef82753,[Ljava.lang.String;@3b0fe47a),Annotation([Ljava.lang.String;@202b0582,[Ljava.lang.String;@235ecd9f,[Ledu.cmu.lti.nlp.amr.Dependency;@1ca3b418),Annotation([Ljava.lang.String;@58cbafc2,[Ljava.lang.String;@2034b64c,[Ljava.lang.String;@75d3a5e0),Annotation([Ljava.lang.String;@74d1dc36,[Ljava.lang.String;@7161d8d1,[Ledu.cmu.lti.nlp.amr.Entity;@74e28667))
AMR:
(m / mention-01, ARG0, s / society)
(m / mention-01, ARG1, w / whole)
(m / mention-01, ARG6, t / this)

Decoded in 30,477 microseconds
Sentence: Damn it being not sexy

Spans:
Span 1-2:  it => it

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),it,it,false)),Map(0 -> it),Map(i -> it))),[Ljava.lang.String;@1cf6d1be,Annotation([Ljava.lang.String;@663c9e7a,[Ljava.lang.String;@19e4653c,[Ljava.lang.String;@795509d9),Annotation([Ljava.lang.String;@53045c6c,[Ljava.lang.String;@5149d738,[Ledu.cmu.lti.nlp.amr.Dependency;@6bbe85a8),Annotation([Ljava.lang.String;@3a7442c7,[Ljava.lang.String;@4be29ed9,[Ljava.lang.String;@548d708a),Annotation([Ljava.lang.String;@4b013c76,[Ljava.lang.String;@53fb3dab,[Ledu.cmu.lti.nlp.amr.Entity;@cb0755b))
AMR:


Decoded in 3,411 microseconds
Sentence: It's totally unacceptable

Spans:
Span 0-1:  It => it
Span 3-4:  unacceptable => accept-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),unacceptable,accept-01,false), Span(0,1,List(1),It,it,false)),Map(1 -> it, 0 -> accept-01),Map(a -> accept-01, i -> it))),[Ljava.lang.String;@33065d67,Annotation([Ljava.lang.String;@712625fd,[Ljava.lang.String;@7bba5817,[Ljava.lang.String;@742ff096),Annotation([Ljava.lang.String;@75437611,[Ljava.lang.String;@350aac89,[Ledu.cmu.lti.nlp.amr.Dependency;@1c5920df),Annotation([Ljava.lang.String;@17f9d882,[Ljava.lang.String;@79e4c792,[Ljava.lang.String;@196a42c3),Annotation([Ljava.lang.String;@4c60d6e9,[Ljava.lang.String;@15043a2f,[Ledu.cmu.lti.nlp.amr.Entity;@4a83a74a))
AMR:
(a / accept-01, ARG1, i / it)

Decoded in 4,067 microseconds
Sentence: Agree, just cheap entertainers. Their reputation in feudal China somewhat makes sense.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 3-4:  cheap => cheap
Span 10-11:  China => (country :name (name :op "China"))
Span 2-3:  just => just
Span 12-13:  makes => make-02
Span 7-8:  reputation => repute-01
Span 13-14:  sense => sense-01
Span 11-12:  somewhat => somewhat

 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),sense,sense-01,false), Span(12,13,List(1),makes,make-02,false), Span(11,12,List(2),somewhat,somewhat,false), Span(10,11,List(5, 4, 3),China,(country :name (name :op "China")),false), Span(7,8,List(6),reputation,repute-01,false), Span(3,4,List(7),cheap,cheap,false), Span(2,3,List(8),just,just,false)),Map(2 -> somewhat, 5 -> "China", 8 -> just, 7 -> cheap, 1 -> make-02, 4 -> name, 6 -> repute-01, 0 -> sense-01, 3 -> country),Map(n -> name, s2 -> somewhat, j -> just, s -> sense-01, m -> make-02, r -> repute-01, c -> country, c2 -> cheap))),[Ljava.lang.String;@1349883,Annotation([Ljava.lang.String;@4b29d1d2,[Ljava.lang.String;@7f485fda,[Ljava.lang.String;@28261e8e),Annotation([Ljava.lang.String;@d737b89,[Ljava.lang.String;@8519cb4,[Ledu.cmu.lti.nlp.amr.Dependency;@35dab4eb),Annotation([Ljava.lang.String;@2d901eb0,[Ljava.lang.String;@3ba987b8,[Ljava.lang.String;@3f191845),Annotation([Ljava.lang.String;@5f049ea1,[Ljava.lang.String;@72cc7e6f,[Ledu.cmu.lti.nlp.amr.Entity;@5afa3c9))
AMR:
(c / country, name, n / name)
(j / just, calendar, c2 / cheap)
(m / make-02, ARG0, c / country)
(m / make-02, ARG1, s / sense-01)
(m / make-02, ARG6, s2 / somewhat)
(n / name, op, "China")
(r / repute-01, ARG1, c / country)
(s / sense-01, ARG1, j / just)

Decoded in 253,132 microseconds
Sentence: Their life looks glorious

Spans:
Span 1-2:  life => life

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),life,life,false)),Map(0 -> life),Map(l -> life))),[Ljava.lang.String;@72035809,Annotation([Ljava.lang.String;@909217e,[Ljava.lang.String;@18271936,[Ljava.lang.String;@606e4010),Annotation([Ljava.lang.String;@8458f04,[Ljava.lang.String;@48075da3,[Ledu.cmu.lti.nlp.amr.Dependency;@68c9133c),Annotation([Ljava.lang.String;@7a35b0f5,[Ljava.lang.String;@5e2c3d18,[Ljava.lang.String;@2cb4893b),Annotation([Ljava.lang.String;@cc43f62,[Ljava.lang.String;@5b218417,[Ledu.cmu.lti.nlp.amr.Entity;@645aa696))
AMR:


Decoded in 3,053 microseconds
Sentence: a group of people of nine professions

Spans:
Span 1-2:  group => group
Span 5-6:  nine => 9
Span 3-4:  people => people

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),nine,9,false), Span(3,4,List(1),people,people,false), Span(1,2,List(2),group,group,false)),Map(2 -> group, 1 -> people, 0 -> 9),Map(g -> group, p -> people, 9 -> 9))),[Ljava.lang.String;@6caf0677,Annotation([Ljava.lang.String;@413d1baf,[Ljava.lang.String;@16eb3ea3,[Ljava.lang.String;@273444fe),Annotation([Ljava.lang.String;@33bc72d1,[Ljava.lang.String;@1a75e76a,[Ledu.cmu.lti.nlp.amr.Dependency;@5524cca1),Annotation([Ljava.lang.String;@5032714f,[Ljava.lang.String;@48bb62,[Ljava.lang.String;@353352b6),Annotation([Ljava.lang.String;@4681c175,[Ljava.lang.String;@57a78e3,[Ledu.cmu.lti.nlp.amr.Entity;@402c4085))
AMR:
(g / group, time, 9 / 9)
(p / people, consist, g / group)

Decoded in 8,006 microseconds
Sentence: Life is hard.

Spans:
Span 2-3:  hard => hard-line
Span 0-1:  Life => life

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),hard,hard-line,false), Span(0,1,List(1),Life,life,false)),Map(1 -> life, 0 -> hard-line),Map(h -> hard-line, l -> life))),[Ljava.lang.String;@6fa51cd4,Annotation([Ljava.lang.String;@2767e23c,[Ljava.lang.String;@710c2b53,[Ljava.lang.String;@5386659f),Annotation([Ljava.lang.String;@14028087,[Ljava.lang.String;@cecf639,[Ledu.cmu.lti.nlp.amr.Dependency;@1caa0244),Annotation([Ljava.lang.String;@7ce026d3,[Ljava.lang.String;@7ce69770,[Ljava.lang.String;@1750fbeb),Annotation([Ljava.lang.String;@5b247367,[Ljava.lang.String;@268f106e,[Ledu.cmu.lti.nlp.amr.Entity;@6e9a5ed8))
AMR:
(h / hard-line, domain, l / life)

Decoded in 3,937 microseconds
Sentence: :shocked:

Spans:
Span 1-2:  shocked => shock-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),shocked,shock-01,false)),Map(0 -> shock-01),Map(s -> shock-01))),[Ljava.lang.String;@7e057f43,Annotation([Ljava.lang.String;@6c284af,[Ljava.lang.String;@5890e879,[Ljava.lang.String;@6440112d),Annotation([Ljava.lang.String;@31ea9581,[Ljava.lang.String;@231f98ef,[Ledu.cmu.lti.nlp.amr.Dependency;@7c137fd5),Annotation([Ljava.lang.String;@183ec003,[Ljava.lang.String;@7d9d0818,[Ljava.lang.String;@221a3fa4),Annotation([Ljava.lang.String;@451001e5,[Ljava.lang.String;@2b40ff9c,[Ledu.cmu.lti.nlp.amr.Entity;@3e08ff24))
AMR:


Decoded in 1,954 microseconds
Sentence: That's normal, it has always been the case that a whore is heartless and a performer is unrighteous

Spans:
Span 6-7:  always => always
Span 15-16:  and => and
Span 9-10:  case => case
Span 4-5:  it => it
Span 2-3:  normal => normal
Span 0-1:  That => that

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),and,and,false), Span(9,10,List(1),case,case,false), Span(6,7,List(2),always,always,false), Span(4,5,List(3),it,it,false), Span(2,3,List(4),normal,normal,false), Span(0,1,List(5),That,that,false)),Map(2 -> always, 5 -> that, 1 -> case, 4 -> normal, 0 -> and, 3 -> it),Map(n -> normal, t -> that, a -> and, i -> it, a2 -> always, c -> case))),[Ljava.lang.String;@4d1c005e,Annotation([Ljava.lang.String;@8462f31,[Ljava.lang.String;@24569dba,[Ljava.lang.String;@5ddeb7cb),Annotation([Ljava.lang.String;@70ed52de,[Ljava.lang.String;@496bc455,[Ledu.cmu.lti.nlp.amr.Dependency;@59402b8f),Annotation([Ljava.lang.String;@7188af83,[Ljava.lang.String;@6be968ce,[Ljava.lang.String;@7c37508a),Annotation([Ljava.lang.String;@247310d0,[Ljava.lang.String;@1033576a,[Ledu.cmu.lti.nlp.amr.Entity;@303cf2ba))
AMR:
(a / and, op, c / case)
(a / and, op, n / normal)
(a2 / always, domain, i / it)
(n / normal, calendar, i / it)
(n / normal, calendar, t / that)

Decoded in 34,693 microseconds
Sentence: They want money, not the face

Spans:
Span 6-7:  face => face-01
Span 2-3:  money => money
Span 0-1:  They => they
Span 1-2:  want => want-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),face,face-01,false), Span(2,3,List(1),money,money,false), Span(1,2,List(2),want,want-01,false), Span(0,1,List(3),They,they,false)),Map(2 -> want-01, 1 -> money, 0 -> face-01, 3 -> they),Map(w -> want-01, t -> they, m -> money, f -> face-01))),[Ljava.lang.String;@76494737,Annotation([Ljava.lang.String;@4a003cbe,[Ljava.lang.String;@4082ba93,[Ljava.lang.String;@17fc391b),Annotation([Ljava.lang.String;@2b30a42c,[Ljava.lang.String;@609e8838,[Ledu.cmu.lti.nlp.amr.Dependency;@359df09a),Annotation([Ljava.lang.String;@43df23d3,[Ljava.lang.String;@6d60fe40,[Ljava.lang.String;@792b749c),Annotation([Ljava.lang.String;@23e84203,[Ljava.lang.String;@19932c16,[Ledu.cmu.lti.nlp.amr.Entity;@73eb439a))
AMR:
(f / face-01, ARG1, m / money)
(w / want-01, ARG0, t / they)
(w / want-01, ARG1, m / money)

Decoded in 10,594 microseconds
Sentence: Have a look at the "wolf with glasses" near Ms. Fan, you will know the actress has no choice but drink with him or she will be forced out or even framed.

NER Entity: (country :name (name :op "Ms."))
Spans:
Span 22-23:  but => contrast-01
Span 23-24:  drink => (thing :ARG1-of drink-01)
Span 33-34:  even => even
Span 30-31:  forced => force-01
Span 16-17:  know => know-01
Span 2-3:  look => look-01
Span 10-11:  near => near
Span 20-21:  no => -
Span 32-33:  or => or
Span 26-27:  or => or
Span 31-32:  out => out
Span 27-28:  she => she
Span 14-15:  you => you

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),even,even,false), Span(32,33,List(1),or,or,false), Span(31,32,List(2),out,out,false), Span(30,31,List(3),forced,force-01,false), Span(27,28,List(4),she,she,false), Span(26,27,List(5),or,or,false), Span(23,24,List(7, 6),drink,(thing :ARG1-of drink-01),false), Span(22,23,List(8),but,contrast-01,false), Span(20,21,List(9),no,-,false), Span(16,17,List(10),know,know-01,false), Span(14,15,List(11),you,you,false), Span(10,11,List(12),near,near,false), Span(2,3,List(13),look,look-01,false)),Map(2 -> out, 5 -> or, 12 -> near, 8 -> contrast-01, 7 -> drink-01, 1 -> or, 4 -> she, 11 -> you, 6 -> thing, 0 -> even, 9 -> -, 3 -> force-01, 10 -> know-01, 13 -> look-01),Map(e -> even, n -> near, t -> thing, k -> know-01, o3 -> or, s -> she, d -> drink-01, y -> you, o2 -> out, - -> -, c -> contrast-01, l -> look-01, f -> force-01, o -> or))),[Ljava.lang.String;@514646ef,Annotation([Ljava.lang.String;@305ffe9e,[Ljava.lang.String;@302c971f,[Ljava.lang.String;@1972e513),Annotation([Ljava.lang.String;@7ae0a9ec,[Ljava.lang.String;@35841320,[Ledu.cmu.lti.nlp.amr.Dependency;@61c4eee0),Annotation([Ljava.lang.String;@6f10d5b6,[Ljava.lang.String;@1040be71,[Ljava.lang.String;@548a24a),Annotation([Ljava.lang.String;@433defed,[Ljava.lang.String;@2a693f59,[Ledu.cmu.lti.nlp.amr.Entity;@3f4faf53))
AMR:
(c / contrast-01, ARG1, - / -)
(c / contrast-01, ARG2, t / thing)
(d / drink-01, ARG1, t / thing)
(f / force-01, ARG0, n / near)
(f / force-01, ARG1, s / she)
(f / force-01, ARG5, o2 / out)
(f / force-01, ARG6, e / even)
(k / know-01, ARG0, y / you)
(k / know-01, ARG1, c / contrast-01)
(l / look-01, ARG1, k / know-01)
(o / or, op, f / force-01)
(o3 / or, op, f / force-01)
(o3 / or, op, t / thing)

Decoded in 784,548 microseconds
Sentence: SOB

NER Entity: (organization :name (name :op "SOB"))
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@45d84a20,Annotation([Ljava.lang.String;@52f27fbd,[Ljava.lang.String;@4c163e3,[Ljava.lang.String;@4a8355dd),Annotation([Ljava.lang.String;@4d0d9fe7,[Ljava.lang.String;@c430e6c,[Ledu.cmu.lti.nlp.amr.Dependency;@312aa7c),Annotation([Ljava.lang.String;@536f2a7e,[Ljava.lang.String;@72bc6553,[Ljava.lang.String;@66982506),Annotation([Ljava.lang.String;@70cf32e3,[Ljava.lang.String;@5a59ca5e,[Ledu.cmu.lti.nlp.amr.Entity;@4bdeaabb))
AMR:


Decoded in 3,915 microseconds
Sentence: It's ok as long as there is something to eat :loveliness:

Spans:
Span 10-11:  eat => eat-01
Span 0-1:  It => it
Span 4-5:  long => long

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),eat,eat-01,false), Span(4,5,List(1),long,long,false), Span(0,1,List(2),It,it,false)),Map(2 -> it, 1 -> long, 0 -> eat-01),Map(e -> eat-01, i -> it, l -> long))),[Ljava.lang.String;@6c4906d3,Annotation([Ljava.lang.String;@65987993,[Ljava.lang.String;@71075444,[Ljava.lang.String;@4f32a3ad),Annotation([Ljava.lang.String;@6b695b06,[Ljava.lang.String;@4d1bf319,[Ledu.cmu.lti.nlp.amr.Dependency;@6f53b8a),Annotation([Ljava.lang.String;@5c80cf32,[Ljava.lang.String;@7d900ecf,[Ljava.lang.String;@6f01b95f),Annotation([Ljava.lang.String;@4007f65e,[Ljava.lang.String;@1a245833,[Ledu.cmu.lti.nlp.amr.Entity;@673fdbce))
AMR:
(e / eat-01, ARG0, l / long)
(e / eat-01, ARG1, i / it)

Decoded in 34,578 microseconds
Sentence: No one is easy. Life is like a show, you must have a look at the script to know how to perform

Spans:
Span 3-4:  easy => easy
Span 20-21:  know => know-01
Span 5-6:  Life => life
Span 15-16:  look => look-01
Span 0-1:  No => -
Span 1-2:  one => 1
Span 23-24:  perform => perform-01
Span 9-10:  show => show-01
Span 11-12:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of know in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of how in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of perform in position 23
Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),perform,perform-01,false), Span(20,21,List(1),know,know-01,false), Span(15,16,List(2),look,look-01,false), Span(11,12,List(3),you,you,false), Span(9,10,List(4),show,show-01,false), Span(5,6,List(5),Life,life,false), Span(3,4,List(6),easy,easy,false), Span(1,2,List(7),one,1,false), Span(0,1,List(8),No,-,false)),Map(2 -> look-01, 5 -> life, 8 -> -, 7 -> 1, 1 -> know-01, 4 -> show-01, 6 -> easy, 0 -> perform-01, 3 -> you),Map(e -> easy, k -> know-01, s -> show-01, 1 -> 1, y -> you, p -> perform-01, l2 -> life, - -> -, l -> look-01))),[Ljava.lang.String;@5965d37,Annotation([Ljava.lang.String;@7a5ceedd,[Ljava.lang.String;@4201c465,[Ljava.lang.String;@5b799640),Annotation([Ljava.lang.String;@6cb107fd,[Ljava.lang.String;@710636b0,[Ledu.cmu.lti.nlp.amr.Dependency;@3de8f619),Annotation([Ljava.lang.String;@2ab4bc72,[Ljava.lang.String;@4e5ed836,[Ljava.lang.String;@eadd4fb),Annotation([Ljava.lang.String;@740fb309,[Ljava.lang.String;@7bd7d6d6,[Ledu.cmu.lti.nlp.amr.Entity;@43f02ef2))
AMR:
(1 / 1, mod, - / -)
(e / easy, domain, 1 / 1)
(k / know-01, ARG1, 1 / 1)
(l / look-01, ARG1, k / know-01)
(l / look-01, ARG6, y / you)
(p / perform-01, ARG1, 1 / 1)
(s / show-01, ARG0, l2 / life)
(s / show-01, ARG6, y / you)

Decoded in 285,121 microseconds
Sentence: All are SB

NER Entity: (thing :name (name :op "SB"))
Spans:
Span 0-1:  All => all

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),All,all,false)),Map(0 -> all),Map(a -> all))),[Ljava.lang.String;@239a307b,Annotation([Ljava.lang.String;@2a8448fa,[Ljava.lang.String;@6f204a1a,[Ljava.lang.String;@2de56eb2),Annotation([Ljava.lang.String;@5f8e8a9d,[Ljava.lang.String;@5745ca0e,[Ledu.cmu.lti.nlp.amr.Dependency;@3ad83a66),Annotation([Ljava.lang.String;@3cce5371,[Ljava.lang.String;@17bffc17,[Ljava.lang.String;@6e535154),Annotation([Ljava.lang.String;@15a34df2,[Ljava.lang.String;@5b38c1ec,[Ledu.cmu.lti.nlp.amr.Entity;@338fc1d8))
AMR:


Decoded in 2,348 microseconds
Sentence: There are top scorer in the Imperial Examination in all 360 walks of life! What effort and endeavor behind those top scorer in the Imperial Examination! This is humiliating the word " bean vermicelli"!

NER Entity: (thing :name (name :op "Imperial" :op "Examination"))
NER Entity: (thing :name (name :op "Imperial" :op "Examination"))
Spans:
Span 9-10:  all => all
Span 17-18:  and => and
Span 19-20:  behind => behind
Span 16-17:  effort => effort
Span 25-27:  Imperial Examination => (thing :name (name :op "Imperial" :op "Examination"))
Span 6-8:  Imperial Examination => (thing :name (name :op "Imperial" :op "Examination"))
Span 13-14:  life => life
Span 28-29:  This => this
Span 21-22:  top => top
Span 2-3:  top => top

 *** WARNING: The dependency tree seems broken.  I can't find the head of What in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of effort in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of endeavor in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of top in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of scorer in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Imperial in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Examination in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of This in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliating in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of word in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of bean in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of vermicelli in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 37
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),This,this,false), Span(25,27,List(4, 3, 2, 1),Imperial Examination,(thing :name (name :op "Imperial" :op "Examination")),false), Span(21,22,List(5),top,top,false), Span(19,20,List(6),behind,behind,false), Span(17,18,List(7),and,and,false), Span(16,17,List(8),effort,effort,false), Span(13,14,List(9),life,life,false), Span(9,10,List(10),all,all,false), Span(6,8,List(14, 13, 12, 11),Imperial Examination,(thing :name (name :op "Imperial" :op "Examination")),false), Span(2,3,List(15),top,top,false)),Map(2 -> name, 5 -> top, 12 -> name, 15 -> top, 8 -> effort, 7 -> and, 1 -> thing, 4 -> "Examination", 11 -> thing, 14 -> "Examination", 6 -> behind, 0 -> this, 9 -> life, 3 -> "Imperial", 10 -> all, 13 -> "Imperial"),Map(e -> effort, n -> name, t4 -> thing, b -> behind, t -> this, t3 -> top, a -> and, t2 -> thing, t5 -> top, a2 -> all, l -> life, n2 -> name))),[Ljava.lang.String;@4722ef0c,Annotation([Ljava.lang.String;@48e1f6c7,[Ljava.lang.String;@55cb6996,[Ljava.lang.String;@1807e3f6),Annotation([Ljava.lang.String;@480d3575,[Ljava.lang.String;@f1da57d,[Ledu.cmu.lti.nlp.amr.Dependency;@194fad1),Annotation([Ljava.lang.String;@26abb146,[Ljava.lang.String;@72c8e7b,[Ljava.lang.String;@65f8f5ae),Annotation([Ljava.lang.String;@431cd9b2,[Ljava.lang.String;@38467116,[Ledu.cmu.lti.nlp.amr.Entity;@5b7a7f33))
AMR:
(a / and, op, b / behind)
(a / and, op, e / effort)
(a / and, quant, a2 / all)
(b / behind, calendar, t3 / top)
(n / name, op, "Examination")
(n / name, op, "Imperial")
(n2 / name, op, "Examination")
(n2 / name, op, "Imperial")
(t / this, mod, a2 / all)
(t / this, mod, l / life)
(t2 / thing, mod, t / this)
(t2 / thing, name, n / name)
(t4 / thing, name, n2 / name)
(t4 / thing, poss, e / effort)
(t5 / top, mod, l / life)

Decoded in 135,310 microseconds
Sentence: Haha

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@790da477,Annotation([Ljava.lang.String;@5c7933ad,[Ljava.lang.String;@57bc27f5,[Ljava.lang.String;@5fb759d6),Annotation([Ljava.lang.String;@4b8d604b,[Ljava.lang.String;@5e7cd6cc,[Ledu.cmu.lti.nlp.amr.Dependency;@68c9d179),Annotation([Ljava.lang.String;@d554c5f,[Ljava.lang.String;@2dfaea86,[Ljava.lang.String;@15888343),Annotation([Ljava.lang.String;@33ecda92,[Ljava.lang.String;@14fc5f04,[Ledu.cmu.lti.nlp.amr.Entity;@6e2829c7))
AMR:


Decoded in 1,701 microseconds
Sentence: Overdoing

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@3feb2dda,Annotation([Ljava.lang.String;@6a8658ff,[Ljava.lang.String;@1c742ed4,[Ljava.lang.String;@333d4a8c),Annotation([Ljava.lang.String;@55de24cc,[Ljava.lang.String;@dc7df28,[Ledu.cmu.lti.nlp.amr.Dependency;@30f842ca),Annotation([Ljava.lang.String;@69c81773,[Ljava.lang.String;@4d14b6c2,[Ljava.lang.String;@7e990ed7),Annotation([Ljava.lang.String;@c05fddc,[Ljava.lang.String;@25df00a0,[Ledu.cmu.lti.nlp.amr.Entity;@4d15107f))
AMR:


Decoded in 1,255 microseconds
Sentence: The reality

Spans:
Span 1-2:  reality => reality

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),reality,reality,false)),Map(0 -> reality),Map(r -> reality))),[Ljava.lang.String;@7b4c50bc,Annotation([Ljava.lang.String;@5884a914,[Ljava.lang.String;@50378a4,[Ljava.lang.String;@60f00693),Annotation([Ljava.lang.String;@79207381,[Ljava.lang.String;@491b9b8,[Ledu.cmu.lti.nlp.amr.Dependency;@1a4927d6),Annotation([Ljava.lang.String;@7a6d7e92,[Ljava.lang.String;@aba625,[Ljava.lang.String;@97e93f1),Annotation([Ljava.lang.String;@5a5a729f,[Ljava.lang.String;@4b520ea8,[Ledu.cmu.lti.nlp.amr.Entity;@16150369))
AMR:


Decoded in 1,769 microseconds
Sentence: Shoot those hooligans

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@6b09fb41,Annotation([Ljava.lang.String;@624ea235,[Ljava.lang.String;@3932c79a,[Ljava.lang.String;@782859e),Annotation([Ljava.lang.String;@23f5b5dc,[Ljava.lang.String;@34bde49d,[Ledu.cmu.lti.nlp.amr.Dependency;@1b1cfb87),Annotation([Ljava.lang.String;@821330f,[Ljava.lang.String;@6f43c82,[Ljava.lang.String;@5db6b9cd),Annotation([Ljava.lang.String;@210ab13f,[Ljava.lang.String;@20b2475a,[Ledu.cmu.lti.nlp.amr.Entity;@7857fe2))
AMR:


Decoded in 2,131 microseconds
Sentence: Cheap performers

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@6f15d60e,Annotation([Ljava.lang.String;@1be2019a,[Ljava.lang.String;@29d80d2b,[Ljava.lang.String;@58e1d9d),Annotation([Ljava.lang.String;@446a1e84,[Ljava.lang.String;@4f0f2942,[Ledu.cmu.lti.nlp.amr.Dependency;@2657d4dd),Annotation([Ljava.lang.String;@5340477f,[Ljava.lang.String;@47caedad,[Ljava.lang.String;@7139992f),Annotation([Ljava.lang.String;@69504ae9,[Ljava.lang.String;@387a8303,[Ledu.cmu.lti.nlp.amr.Entity;@28cda624))
AMR:


Decoded in 1,629 microseconds
Sentence: Cheap performers!

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@1500b2f3,Annotation([Ljava.lang.String;@7eecb5b8,[Ljava.lang.String;@126253fd,[Ljava.lang.String;@57db2b13),Annotation([Ljava.lang.String;@475c9c31,[Ljava.lang.String;@5c86a017,[Ledu.cmu.lti.nlp.amr.Dependency;@5c7bfdc1),Annotation([Ljava.lang.String;@5276d6ee,[Ljava.lang.String;@71687585,[Ljava.lang.String;@1807f5a7),Annotation([Ljava.lang.String;@1b919693,[Ljava.lang.String;@7fb4f2a9,[Ledu.cmu.lti.nlp.amr.Entity;@4dc27487))
AMR:


Decoded in 2,117 microseconds
Sentence: The entertainment circle is a dirty one, all men in it are birds and beasts and scum

Spans:
Span 8-9:  all => all
Span 16-17:  and => and
Span 14-15:  and => and
Span 1-2:  entertainment => entertain-01
Span 11-12:  it => it
Span 9-10:  men => man
Span 6-7:  one => 1

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),and,and,false), Span(14,15,List(1),and,and,false), Span(11,12,List(2),it,it,false), Span(9,10,List(3),men,man,false), Span(8,9,List(4),all,all,false), Span(6,7,List(5),one,1,false), Span(1,2,List(6),entertainment,entertain-01,false)),Map(2 -> it, 5 -> 1, 1 -> and, 4 -> all, 6 -> entertain-01, 0 -> and, 3 -> man),Map(e -> entertain-01, a3 -> all, m -> man, 1 -> 1, a -> and, i -> it, a2 -> and))),[Ljava.lang.String;@6a4f1a55,Annotation([Ljava.lang.String;@7dfd3c81,[Ljava.lang.String;@2584b82d,[Ljava.lang.String;@7bbc8656),Annotation([Ljava.lang.String;@6933b6c6,[Ljava.lang.String;@7d3e8655,[Ledu.cmu.lti.nlp.amr.Dependency;@7dfb0c0f),Annotation([Ljava.lang.String;@626abbd0,[Ljava.lang.String;@169bb4dd,[Ljava.lang.String;@1f9e9475),Annotation([Ljava.lang.String;@3aa078fd,[Ljava.lang.String;@d23e042,[Ledu.cmu.lti.nlp.amr.Entity;@46d59067))
AMR:
(1 / 1, mod, m / man)
(a2 / and, op, a / and)
(a2 / and, op, m / man)
(e / entertain-01, ARG0, 1 / 1)
(e / entertain-01, ARG1, i / it)
(m / man, quant, a3 / all)

Decoded in 67,924 microseconds
Sentence: Pity them, but who is to blame? Those female stars are not easy

Spans:
Span 3-4:  but => contrast-01
Span 14-15:  easy => easy

 *** WARNING: The dependency tree seems broken.  I can't find the head of Those in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of female in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of easy in position 14
Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),easy,easy,false), Span(3,4,List(1),but,contrast-01,false)),Map(1 -> contrast-01, 0 -> easy),Map(e -> easy, c -> contrast-01))),[Ljava.lang.String;@2d0399f4,Annotation([Ljava.lang.String;@14dd7b39,[Ljava.lang.String;@66ea810,[Ljava.lang.String;@6cd24612),Annotation([Ljava.lang.String;@5dafbe45,[Ljava.lang.String;@2254127a,[Ledu.cmu.lti.nlp.amr.Dependency;@51891008),Annotation([Ljava.lang.String;@2f953efd,[Ljava.lang.String;@f68f0dc,[Ljava.lang.String;@d2de489),Annotation([Ljava.lang.String;@14bdbc74,[Ljava.lang.String;@12591ac8,[Ledu.cmu.lti.nlp.amr.Entity;@5a7fe64f))
AMR:
(c / contrast-01, ARG1, e / easy)

Decoded in 14,377 microseconds
Sentence: Everybody is doing this, how can you make money if you don't do this

Spans:
Span 6-7:  can => possible
Span 14-15:  do => do-02
Span 12-13:  do => do-02
Span 2-3:  doing => (thing :ARG1-of do-02)
Span 8-9:  make => make-01
Span 9-10:  money => money
Span 15-16:  this => this
Span 3-4:  this => this
Span 11-12:  you => you
Span 7-8:  you => you

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),this,this,false), Span(14,15,List(1),do,do-02,false), Span(12,13,List(2),do,do-02,false), Span(11,12,List(3),you,you,false), Span(9,10,List(4),money,money,false), Span(8,9,List(5),make,make-01,false), Span(7,8,List(6),you,you,false), Span(6,7,List(7),can,possible,false), Span(3,4,List(8),this,this,false), Span(2,3,List(10, 9),doing,(thing :ARG1-of do-02),false)),Map(2 -> do-02, 5 -> make-01, 8 -> this, 7 -> possible, 1 -> do-02, 4 -> money, 6 -> you, 9 -> thing, 0 -> this, 10 -> do-02, 3 -> you),Map(t -> this, d3 -> do-02, m2 -> make-01, m -> money, d -> do-02, t3 -> thing, p -> possible, y -> you, d2 -> do-02, t2 -> this, y2 -> you))),[Ljava.lang.String;@38145825,Annotation([Ljava.lang.String;@41330d4f,[Ljava.lang.String;@1b66c0fb,[Ljava.lang.String;@3e0e1046),Annotation([Ljava.lang.String;@24c1b2d2,[Ljava.lang.String;@7dc19a70,[Ledu.cmu.lti.nlp.amr.Dependency;@508dec2b),Annotation([Ljava.lang.String;@1e4f4a5c,[Ljava.lang.String;@37313c65,[Ljava.lang.String;@465232e9),Annotation([Ljava.lang.String;@798162bc,[Ljava.lang.String;@1df8da7a,[Ledu.cmu.lti.nlp.amr.Entity;@23941fb4))
AMR:
(d / do-02, ARG0, d2 / do-02)
(d / do-02, ARG1, t / this)
(d2 / do-02, ARG0, y / you)
(d2 / do-02, ARG1, m2 / make-01)
(d3 / do-02, ARG0, y2 / you)
(d3 / do-02, ARG1, t3 / thing)
(d3 / do-02, ARG6, t2 / this)
(m2 / make-01, ARG0, y2 / you)
(m2 / make-01, ARG1, m / money)
(p / possible, domain, m2 / make-01)

Decoded in 484,837 microseconds
Sentence: She is a proud woman in front of others but is in melancholy mood when staying alone ...

Spans:
Span 16-17:  alone => alone
Span 9-10:  but => contrast-01
Span 6-7:  front => front
Span 8-9:  others => other
Span 15-16:  staying => stay-01
Span 4-5:  woman => woman

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),alone,alone,false), Span(15,16,List(1),staying,stay-01,false), Span(9,10,List(2),but,contrast-01,false), Span(8,9,List(3),others,other,false), Span(6,7,List(4),front,front,false), Span(4,5,List(5),woman,woman,false)),Map(2 -> contrast-01, 5 -> woman, 1 -> stay-01, 4 -> front, 0 -> alone, 3 -> other),Map(w -> woman, s -> stay-01, a -> alone, c -> contrast-01, f -> front, o -> other))),[Ljava.lang.String;@7486b455,Annotation([Ljava.lang.String;@660acfb,[Ljava.lang.String;@5d908d47,[Ljava.lang.String;@5efa40fe),Annotation([Ljava.lang.String;@1f9f6368,[Ljava.lang.String;@1c9b0314,[Ledu.cmu.lti.nlp.amr.Dependency;@45385f75),Annotation([Ljava.lang.String;@49c90a9c,[Ljava.lang.String;@2d29b4ee,[Ljava.lang.String;@69ee81fc),Annotation([Ljava.lang.String;@6e2aa843,[Ljava.lang.String;@6f36c2f0,[Ledu.cmu.lti.nlp.amr.Entity;@f58853c))
AMR:
(c / contrast-01, ARG1, s / stay-01)
(c / contrast-01, ARG6, o / other)
(c / contrast-01, instrument, f / front)
(s / stay-01, ARG1, a / alone)
(w / woman, prep-with, c / contrast-01)

Decoded in 90,339 microseconds
Sentence: To put it plainly stars nowadays are just popular prostitutes in ancient times. Now that they are famous prostitutes, it should be just normal to drink with some high officials or even sleep with them

Spans:
Span 27-28:  drink => (thing :ARG1-of drink-01)
Span 33-34:  even => even
Span 30-31:  high => high
Span 21-22:  it => it
Span 2-3:  it => it
Span 24-25:  just => just
Span 7-8:  just => just
Span 25-26:  normal => normal
Span 31-32:  officials => (have-org-role-91 :ARG2 official)
Span 32-33:  or => or
Span 8-9:  popular => popular-41
Span 1-2:  put => put-03
Span 22-23:  should => recommend-01
Span 29-30:  some => some
Span 16-17:  they => they

 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of just in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of normal in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of drink in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of sleep in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of them in position 36
Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),even,even,false), Span(32,33,List(1),or,or,false), Span(31,32,List(3, 2),officials,(have-org-role-91 :ARG2 official),false), Span(30,31,List(4),high,high,false), Span(29,30,List(5),some,some,false), Span(27,28,List(7, 6),drink,(thing :ARG1-of drink-01),false), Span(25,26,List(8),normal,normal,false), Span(24,25,List(9),just,just,false), Span(22,23,List(10),should,recommend-01,false), Span(21,22,List(11),it,it,false), Span(16,17,List(12),they,they,false), Span(8,9,List(13),popular,popular-41,false), Span(7,8,List(14),just,just,false), Span(2,3,List(15),it,it,false), Span(1,2,List(16),put,put-03,false)),Map(2 -> have-org-role-91, 5 -> some, 12 -> they, 15 -> it, 8 -> normal, 7 -> drink-01, 1 -> or, 4 -> high, 11 -> it, 14 -> just, 6 -> thing, 0 -> even, 9 -> just, 16 -> put-03, 3 -> official, 10 -> recommend-01, 13 -> popular-41),Map(e -> even, n -> normal, h -> have-org-role-91, h2 -> high, t -> thing, p2 -> put-03, j -> just, j2 -> just, s -> some, d -> drink-01, p -> popular-41, o2 -> official, i2 -> it, t2 -> they, r -> recommend-01, i -> it, o -> or))),[Ljava.lang.String;@1224144a,Annotation([Ljava.lang.String;@29f7cefd,[Ljava.lang.String;@700fb871,[Ljava.lang.String;@3b35a229),Annotation([Ljava.lang.String;@9816741,[Ljava.lang.String;@1e16c0aa,[Ledu.cmu.lti.nlp.amr.Dependency;@13d73f29),Annotation([Ljava.lang.String;@565f390,[Ljava.lang.String;@7dc3712,[Ljava.lang.String;@2f67a4d3),Annotation([Ljava.lang.String;@5e3f861,[Ljava.lang.String;@2fb0623e,[Ledu.cmu.lti.nlp.amr.Entity;@49b2a47d))
AMR:
(d / drink-01, ARG1, t / thing)
(h / have-org-role-91, ARG0, h2 / high)
(h / have-org-role-91, ARG1, i / it)
(h / have-org-role-91, ARG2, o2 / official)
(i2 / it, calendar, p2 / put-03)
(j / just, domain, p2 / put-03)
(n / normal, domain, p2 / put-03)
(o / or, domain, p2 / put-03)
(o / or, op, e / even)
(p / popular-41, ARG1, p2 / put-03)
(p2 / put-03, ARG0, t2 / they)
(p2 / put-03, ARG1, j2 / just)
(r / recommend-01, ARG1, i / it)
(s / some, domain, p2 / put-03)
(s / some, mod, h2 / high)
(t / thing, domain, p2 / put-03)

Decoded in 773,373 microseconds
Sentence: Stop talking about others just behave yourself

Spans:
Span 2-3:  about => about
Span 4-5:  just => just
Span 3-4:  others => other
Span 0-1:  Stop => stop-03

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),just,just,false), Span(3,4,List(1),others,other,false), Span(2,3,List(2),about,about,false), Span(0,1,List(3),Stop,stop-03,false)),Map(2 -> about, 1 -> other, 0 -> just, 3 -> stop-03),Map(s -> stop-03, j -> just, a -> about, o -> other))),[Ljava.lang.String;@5be1d0a4,Annotation([Ljava.lang.String;@415b0b49,[Ljava.lang.String;@6d5620ce,[Ljava.lang.String;@311bf055),Annotation([Ljava.lang.String;@642a7222,[Ljava.lang.String;@7d322cad,[Ledu.cmu.lti.nlp.amr.Dependency;@21be3395),Annotation([Ljava.lang.String;@4f49f6af,[Ljava.lang.String;@78452606,[Ljava.lang.String;@147e2ae7),Annotation([Ljava.lang.String;@448c8166,[Ljava.lang.String;@4470fbd6,[Ledu.cmu.lti.nlp.amr.Entity;@15d49048))
AMR:
(a / about, op, o / other)
(j / just, calendar, o / other)
(s / stop-03, time, a / about)

Decoded in 47,111 microseconds
Sentence: What should we do in the future! Ability alone isn't enough to become successful! Are we goin' to face such hard choices too?

Spans:
Span 9-10:  alone => alone
Span 14-15:  become => become-01
Span 3-4:  do => do-02
Span 12-13:  enough => enough
Span 22-23:  face => face-01
Span 6-7:  future => future
Span 24-25:  hard => hard-line
Span 1-2:  should => recommend-01
Span 15-16:  successful => succeed-01
Span 23-24:  such => such
Span 26-27:  too => too
Span 18-19:  we => we
Span 2-3:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of enough in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of become in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of successful in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of Are in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of goin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of hard in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of choices in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 27
Langrangian relaxation converged after 55 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),too,too,false), Span(24,25,List(1),hard,hard-line,false), Span(23,24,List(2),such,such,false), Span(22,23,List(3),face,face-01,false), Span(18,19,List(4),we,we,false), Span(15,16,List(5),successful,succeed-01,false), Span(14,15,List(6),become,become-01,false), Span(12,13,List(7),enough,enough,false), Span(9,10,List(8),alone,alone,false), Span(6,7,List(9),future,future,false), Span(3,4,List(10),do,do-02,false), Span(2,3,List(11),we,we,false), Span(1,2,List(12),should,recommend-01,false)),Map(2 -> such, 5 -> succeed-01, 12 -> recommend-01, 8 -> alone, 7 -> enough, 1 -> hard-line, 4 -> we, 11 -> we, 6 -> become-01, 0 -> too, 9 -> future, 3 -> face-01, 10 -> do-02),Map(e -> enough, w -> we, h -> hard-line, s2 -> succeed-01, t -> too, b -> become-01, s -> such, d -> do-02, a -> alone, w2 -> we, r -> recommend-01, f2 -> future, f -> face-01))),[Ljava.lang.String;@7098b907,Annotation([Ljava.lang.String;@503f91c3,[Ljava.lang.String;@13526e59,[Ljava.lang.String;@2235eaab),Annotation([Ljava.lang.String;@17503f6b,[Ljava.lang.String;@3bcd05cb,[Ledu.cmu.lti.nlp.amr.Dependency;@3b6d844d),Annotation([Ljava.lang.String;@36804139,[Ljava.lang.String;@20bd8be5,[Ljava.lang.String;@730d2164),Annotation([Ljava.lang.String;@24959ca4,[Ljava.lang.String;@10289886,[Ledu.cmu.lti.nlp.amr.Entity;@5c86dbc5))
AMR:
(a / alone, calendar, f2 / future)
(b / become-01, ARG0, w2 / we)
(b / become-01, ARG1, e / enough)
(d / do-02, ARG0, w2 / we)
(d / do-02, ARG1, f2 / future)
(f / face-01, ARG0, w2 / we)
(f / face-01, ARG1, s / such)
(h / hard-line, mod, s / such)
(r / recommend-01, ARG1, t / too)
(r / recommend-01, ARG6, d / do-02)
(s2 / succeed-01, ARG0, w2 / we)
(s2 / succeed-01, ARG1, w / we)

Decoded in 669,786 microseconds
Sentence: More suffering is under the disguise of glorious looks, 'tis the undisputable fact.

Spans:
Span 14-15:  fact => fact
Span 0-1:  More => more-than

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),fact,fact,false), Span(0,1,List(1),More,more-than,false)),Map(1 -> more-than, 0 -> fact),Map(m -> more-than, f -> fact))),[Ljava.lang.String;@461ad730,Annotation([Ljava.lang.String;@4ee203eb,[Ljava.lang.String;@1a5a4e19,[Ljava.lang.String;@7068e664),Annotation([Ljava.lang.String;@60db1c0e,[Ljava.lang.String;@3e78b6a5,[Ledu.cmu.lti.nlp.amr.Dependency;@769a1df5),Annotation([Ljava.lang.String;@41f69e84,[Ljava.lang.String;@7975d1d8,[Ljava.lang.String;@2438dcd),Annotation([Ljava.lang.String;@24105dc5,[Ljava.lang.String;@5167f57d,[Ledu.cmu.lti.nlp.amr.Entity;@64b0598))
AMR:
(m / more-than, poss, f / fact)

Decoded in 17,667 microseconds
Sentence: It's not so bad, they're just playing in their own circle, out of sight, out of mind,

Spans:
Span 4-5:  bad => bad
Span 0-1:  It => it
Span 8-9:  just => just
Span 21-22:  mind => mind
Span 19-20:  out => out
Span 15-16:  out => out
Span 12-13:  own => own
Span 3-4:  so => so
Span 6-7:  they => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),mind,mind,false), Span(19,20,List(1),out,out,false), Span(15,16,List(2),out,out,false), Span(12,13,List(3),own,own,false), Span(8,9,List(4),just,just,false), Span(6,7,List(5),they,they,false), Span(4,5,List(6),bad,bad,false), Span(3,4,List(7),so,so,false), Span(0,1,List(8),It,it,false)),Map(2 -> out, 5 -> they, 8 -> it, 7 -> so, 1 -> out, 4 -> just, 6 -> bad, 0 -> mind, 3 -> own),Map(b -> bad, t -> they, o3 -> own, s -> so, j -> just, m -> mind, o2 -> out, i -> it, o -> out))),[Ljava.lang.String;@18f8cd79,Annotation([Ljava.lang.String;@3e2055d6,[Ljava.lang.String;@50029372,[Ljava.lang.String;@e3b3b2f),Annotation([Ljava.lang.String;@50f6ac94,[Ljava.lang.String;@6cc4cdb9,[Ledu.cmu.lti.nlp.amr.Dependency;@28194a50),Annotation([Ljava.lang.String;@7f2cfe3f,[Ljava.lang.String;@1a5b6f42,[Ljava.lang.String;@5038d0b5),Annotation([Ljava.lang.String;@32115b28,[Ljava.lang.String;@2ad48653,[Ledu.cmu.lti.nlp.amr.Entity;@6bb4dd34))
AMR:
(b / bad, calendar, t / they)
(b / bad, domain, i / it)
(b / bad, mod, s / so)
(i / it, mod, m / mind)
(j / just, domain, t / they)
(o / out, calendar, o2 / out)
(o / out, op, m / mind)
(o3 / own, mod, i / it)

Decoded in 54,135 microseconds
Sentence: Not like the old guy Zhang Jizhong not only behaved like a hooligan in his own circle, but also thinks he is virtuous without any talent. He makes TV series when he has nothing to do to wreck people of the whole country.

NER Entity: (person :name (name :op "Zhang" :op "Jizhong"))
Spans:
Span 19-20:  also => also
Span 25-26:  any => any
Span 18-19:  but => contrast-01
Span 44-45:  country => country
Span 37-38:  do => do-02
Span 28-29:  He => he
Span 29-30:  makes => make-02
Span 35-36:  nothing => nothing
Span 3-4:  old => old
Span 8-9:  only => only
Span 15-16:  own => own
Span 40-41:  people => people
Span 31-32:  series => series
Span 20-21:  thinks => think-01
Span 43-44:  whole => whole
Span 5-7:  Zhang Jizhong => (person :name (name :op "Zhang" :op "Jizhong"))

 *** WARNING: The dependency tree seems broken.  I can't find the head of He in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of TV in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of series in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of when in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of nothing in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of wreck in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of whole in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 45
Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),country,country,false), Span(43,44,List(1),whole,whole,false), Span(40,41,List(2),people,people,false), Span(37,38,List(3),do,do-02,false), Span(35,36,List(4),nothing,nothing,false), Span(31,32,List(5),series,series,false), Span(29,30,List(6),makes,make-02,false), Span(28,29,List(7),He,he,false), Span(25,26,List(8),any,any,false), Span(20,21,List(9),thinks,think-01,false), Span(19,20,List(10),also,also,false), Span(18,19,List(11),but,contrast-01,false), Span(15,16,List(12),own,own,false), Span(8,9,List(13),only,only,false), Span(5,7,List(17, 16, 15, 14),Zhang Jizhong,(person :name (name :op "Zhang" :op "Jizhong")),false), Span(3,4,List(18),old,old,false)),Map(2 -> people, 5 -> series, 12 -> own, 15 -> name, 8 -> any, 18 -> old, 7 -> he, 17 -> "Jizhong", 1 -> whole, 4 -> nothing, 11 -> contrast-01, 14 -> person, 6 -> make-02, 0 -> country, 9 -> think-01, 16 -> "Zhang", 3 -> do-02, 10 -> also, 13 -> only),Map(w -> whole, n -> nothing, h -> he, t -> think-01, o3 -> old, p2 -> person, s -> series, d -> do-02, m -> make-02, p -> people, a -> any, o2 -> only, a2 -> also, c -> country, o -> own, n2 -> name, c2 -> contrast-01))),[Ljava.lang.String;@7d9f158f,Annotation([Ljava.lang.String;@45efd90f,[Ljava.lang.String;@4b8729ff,[Ljava.lang.String;@61710c6),Annotation([Ljava.lang.String;@3214ee6,[Ljava.lang.String;@383dc82c,[Ledu.cmu.lti.nlp.amr.Dependency;@4a07d605),Annotation([Ljava.lang.String;@74287ea3,[Ljava.lang.String;@7d7758be,[Ljava.lang.String;@2bdd8394),Annotation([Ljava.lang.String;@5f9edf14,[Ljava.lang.String;@68746f22,[Ledu.cmu.lti.nlp.amr.Entity;@2f01783a))
AMR:
(a / any, mod, o3 / old)
(c2 / contrast-01, ARG1, c / country)
(d / do-02, ARG0, p2 / person)
(d / do-02, ARG1, p / people)
(d / do-02, ARG6, w / whole)
(m / make-02, ARG0, p2 / person)
(m / make-02, ARG1, s / series)
(m / make-02, ARG6, h / he)
(n2 / name, op, "Jizhong")
(n2 / name, op, "Zhang")
(p2 / person, calendar, o2 / only)
(p2 / person, mod, a / any)
(p2 / person, name, n2 / name)
(t / think-01, ARG0, p2 / person)
(t / think-01, ARG1, n / nothing)
(t / think-01, ARG2, o / own)
(t / think-01, ARG6, a2 / also)
(t / think-01, manner, c2 / contrast-01)

Decoded in 1,173,832 microseconds
Sentence: Both take what they need

Spans:
Span 0-1:  Both => both
Span 4-5:  need => need-01
Span 1-2:  take => take-01
Span 3-4:  they => they

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),need,need-01,false), Span(3,4,List(1),they,they,false), Span(1,2,List(2),take,take-01,false), Span(0,1,List(3),Both,both,false)),Map(2 -> take-01, 1 -> they, 0 -> need-01, 3 -> both),Map(n -> need-01, b -> both, t -> they, t2 -> take-01))),[Ljava.lang.String;@68878f6d,Annotation([Ljava.lang.String;@41488b16,[Ljava.lang.String;@a8ef162,[Ljava.lang.String;@2eea88a1),Annotation([Ljava.lang.String;@7ac296f6,[Ljava.lang.String;@7fd7a283,[Ledu.cmu.lti.nlp.amr.Dependency;@22f59fa),Annotation([Ljava.lang.String;@78fa769e,[Ljava.lang.String;@16612a51,[Ljava.lang.String;@54e041a4),Annotation([Ljava.lang.String;@2c78324b,[Ljava.lang.String;@79defdc,[Ledu.cmu.lti.nlp.amr.Entity;@18317edc))
AMR:
(n / need-01, ARG0, t / they)
(t2 / take-01, ARG0, b / both)
(t2 / take-01, ARG1, n / need-01)

Decoded in 51,432 microseconds
Sentence: When can China have a pure, innocent girl?

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 1-2:  can => possible
Span 2-3:  China => (country :name (name :op "China"))
Span 7-8:  innocent => innocent-41

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),innocent,innocent-41,false), Span(2,3,List(3, 2, 1),China,(country :name (name :op "China")),false), Span(1,2,List(4),can,possible,false)),Map(2 -> name, 1 -> country, 4 -> possible, 0 -> innocent-41, 3 -> "China"),Map(n -> name, p -> possible, i -> innocent-41, c -> country))),[Ljava.lang.String;@4e0ae11f,Annotation([Ljava.lang.String;@238d68ff,[Ljava.lang.String;@4b86805d,[Ljava.lang.String;@5852c06f),Annotation([Ljava.lang.String;@4149c063,[Ljava.lang.String;@9cb8225,[Ledu.cmu.lti.nlp.amr.Dependency;@76b07f29),Annotation([Ljava.lang.String;@38af9828,[Ljava.lang.String;@376a0d86,[Ljava.lang.String;@62656be4),Annotation([Ljava.lang.String;@17d919b6,[Ljava.lang.String;@53f3bdbd,[Ledu.cmu.lti.nlp.amr.Entity;@34129c78))
AMR:
(c / country, name, n / name)
(i / innocent-41, ARG1, p / possible)
(n / name, op, "China")
(p / possible, calendar, c / country)

Decoded in 14,178 microseconds
Sentence: A story is now very shocking in the entertainment world. It is rumored that Hsu Yuki has been forced out because she refused to drink with a guest as arranged by the company and has to switch to work as a lawyer's assistant instead to make ends meet.

NER Entity: (person :name (name :op "Hsu" :op "Yuki"))
Spans:
Span 34-35:  and => and
Span 44-45:  assistant => assist-01
Span 21-22:  because => cause-01
Span 33-34:  company => company
Span 25-26:  drink => (thing :ARG1-of drink-01)
Span 8-9:  entertainment => entertain-01
Span 19-20:  forced => force-01
Span 15-17:  Hsu Yuki => (person :name (name :op "Hsu" :op "Yuki"))
Span 45-46:  instead => instead
Span 11-12:  It => it
Span 42-43:  lawyer => lawyer
Span 47-48:  make => make-01
Span 49-50:  meet => meet-03
Span 3-4:  now => now
Span 20-21:  out => out
Span 23-24:  refused => refuse-01
Span 13-14:  rumored => rumor-01
Span 22-23:  she => she
Span 1-2:  story => story
Span 37-38:  switch => switch-01
Span 4-5:  very => very
Span 39-40:  work => work-01
Span 9-10:  world => world

 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of lawyer in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of assistant in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of instead in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ends in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of meet in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 50
Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),meet,meet-03,false), Span(47,48,List(1),make,make-01,false), Span(45,46,List(2),instead,instead,false), Span(44,45,List(3),assistant,assist-01,false), Span(42,43,List(4),lawyer,lawyer,false), Span(39,40,List(5),work,work-01,false), Span(37,38,List(6),switch,switch-01,false), Span(34,35,List(7),and,and,false), Span(33,34,List(8),company,company,false), Span(25,26,List(10, 9),drink,(thing :ARG1-of drink-01),false), Span(23,24,List(11),refused,refuse-01,false), Span(22,23,List(12),she,she,false), Span(21,22,List(13),because,cause-01,false), Span(20,21,List(14),out,out,false), Span(19,20,List(15),forced,force-01,false), Span(15,17,List(19, 18, 17, 16),Hsu Yuki,(person :name (name :op "Hsu" :op "Yuki")),false), Span(13,14,List(20),rumored,rumor-01,false), Span(11,12,List(21),It,it,false), Span(9,10,List(22),world,world,false), Span(8,9,List(23),entertainment,entertain-01,false), Span(4,5,List(24),very,very,false), Span(3,4,List(25),now,now,false), Span(1,2,List(26),story,story,false)),Map(2 -> instead, 5 -> work-01, 12 -> she, 8 -> company, 15 -> force-01, 21 -> it, 18 -> "Hsu", 24 -> very, 7 -> and, 1 -> make-01, 17 -> name, 23 -> entertain-01, 26 -> story, 4 -> lawyer, 11 -> refuse-01, 14 -> out, 20 -> rumor-01, 6 -> switch-01, 9 -> thing, 0 -> meet-03, 22 -> world, 16 -> person, 19 -> "Yuki", 10 -> drink-01, 3 -> assist-01, 25 -> now, 13 -> cause-01),Map(e -> entertain-01, w -> work-01, n -> name, s2 -> she, t -> thing, m2 -> make-01, s -> switch-01, v -> very, d -> drink-01, m -> meet-03, r2 -> rumor-01, p -> person, a -> assist-01, i2 -> it, w2 -> world, r -> refuse-01, a2 -> and, i -> instead, c -> company, s3 -> story, l -> lawyer, f -> force-01, o -> out, c2 -> cause-01, n2 -> now))),[Ljava.lang.String;@7d61eb55,Annotation([Ljava.lang.String;@222a59e6,[Ljava.lang.String;@6c7a164b,[Ljava.lang.String;@4c2bb6e0),Annotation([Ljava.lang.String;@3e62d773,[Ljava.lang.String;@4ef74c30,[Ledu.cmu.lti.nlp.amr.Dependency;@7283d3eb),Annotation([Ljava.lang.String;@638ef7ed,[Ljava.lang.String;@4bff7da0,[Ljava.lang.String;@3f1d2e23),Annotation([Ljava.lang.String;@536dbea0,[Ljava.lang.String;@47c81abf,[Ledu.cmu.lti.nlp.amr.Entity;@776a6d9b))
AMR:
(a / assist-01, ARG1, l / lawyer)
(a / assist-01, ARG6, i / instead)
(a2 / and, op, c / company)
(a2 / and, op, r / refuse-01)
(c2 / cause-01, ARG1, s2 / she)
(d / drink-01, ARG1, t / thing)
(e / entertain-01, ARG0, w2 / world)
(e / entertain-01, ARG1, i2 / it)
(f / force-01, ARG0, i2 / it)
(f / force-01, ARG1, p / person)
(f / force-01, ARG6, o / out)
(m / meet-03, ARG0, p / person)
(m / meet-03, ARG1, s3 / story)
(m2 / make-01, ARG1, a / assist-01)
(m2 / make-01, ARG6, m / meet-03)
(n / name, op, "Hsu")
(n / name, op, "Yuki")
(n2 / now, degree, v / very)
(p / person, name, n / name)
(r / refuse-01, ARG0, s2 / she)
(r / refuse-01, ARG1, o / out)
(r / refuse-01, ARG2, t / thing)
(r2 / rumor-01, ARG1, p / person)
(s / switch-01, ARG1, w / work-01)
(v / very, op, a / assist-01)
(w / work-01, ARG1, a / assist-01)

Decoded in 1,871,262 microseconds
Sentence: Much envied super stars often encounter social engagements or circumstances which they don't welcome but have to join in,

Spans:
Span 15-16:  but => contrast-01
Span 12-13:  do => do-02
Span 5-6:  encounter => encounter-01
Span 18-19:  join => join-01
Span 0-1:  Much => much
Span 4-5:  often => often
Span 8-9:  or => or
Span 6-7:  social => society
Span 11-12:  they => they

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),join,join-01,false), Span(15,16,List(1),but,contrast-01,false), Span(12,13,List(2),do,do-02,false), Span(11,12,List(3),they,they,false), Span(8,9,List(4),or,or,false), Span(6,7,List(5),social,society,false), Span(5,6,List(6),encounter,encounter-01,false), Span(4,5,List(7),often,often,false), Span(0,1,List(8),Much,much,false)),Map(2 -> do-02, 5 -> society, 8 -> much, 7 -> often, 1 -> contrast-01, 4 -> or, 6 -> encounter-01, 0 -> join-01, 3 -> they),Map(e -> encounter-01, t -> they, s -> society, j -> join-01, m -> much, d -> do-02, o2 -> often, c -> contrast-01, o -> or))),[Ljava.lang.String;@21d03963,Annotation([Ljava.lang.String;@1f760b47,[Ljava.lang.String;@18ece7f4,[Ljava.lang.String;@3cce57c7),Annotation([Ljava.lang.String;@1cf56a1c,[Ljava.lang.String;@33f676f6,[Ledu.cmu.lti.nlp.amr.Dependency;@4c5ae43b),Annotation([Ljava.lang.String;@264f218,[Ljava.lang.String;@3576ddc2,[Ljava.lang.String;@35b74c5c),Annotation([Ljava.lang.String;@2e570ded,[Ljava.lang.String;@b86de0d,[Ledu.cmu.lti.nlp.amr.Entity;@81d9a72))
AMR:
(c / contrast-01, ARG1, e / encounter-01)
(d / do-02, ARG0, t / they)
(d / do-02, ARG6, e / encounter-01)
(e / encounter-01, ARG1, o / or)
(e / encounter-01, ARG6, m / much)
(e / encounter-01, frequency, o2 / often)
(j / join-01, ARG0, s / society)
(j / join-01, ARG1, c / contrast-01)

Decoded in 371,460 microseconds
Sentence: After all, there are many things they can't decide themselves 'cause that will have to do with many aspects and the interests of many people,

Spans:
Span 0-1:  After => after
Span 1-2:  all => all
Span 22-23:  and => and
Span 21-22:  aspects => aspect
Span 13-14:  cause => cause-01
Span 10-11:  decide => decide-01
Span 18-19:  do => do-02
Span 24-25:  interests => interest
Span 26-27:  many => many
Span 20-21:  many => many
Span 5-6:  many => many
Span 27-28:  people => people
Span 7-8:  they => they
Span 6-7:  things => thing

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),people,people,false), Span(26,27,List(1),many,many,false), Span(24,25,List(2),interests,interest,false), Span(22,23,List(3),and,and,false), Span(21,22,List(4),aspects,aspect,false), Span(20,21,List(5),many,many,false), Span(18,19,List(6),do,do-02,false), Span(13,14,List(7),cause,cause-01,false), Span(10,11,List(8),decide,decide-01,false), Span(7,8,List(9),they,they,false), Span(6,7,List(10),things,thing,false), Span(5,6,List(11),many,many,false), Span(1,2,List(12),all,all,false), Span(0,1,List(13),After,after,false)),Map(2 -> interest, 5 -> many, 12 -> all, 8 -> decide-01, 7 -> cause-01, 1 -> many, 4 -> aspect, 11 -> many, 6 -> do-02, 0 -> people, 9 -> they, 3 -> and, 10 -> thing, 13 -> after),Map(m3 -> many, t -> they, m2 -> many, a3 -> all, m -> many, d -> do-02, p -> people, a -> and, d2 -> decide-01, t2 -> thing, i -> interest, a2 -> aspect, c -> cause-01, a4 -> after))),[Ljava.lang.String;@747f281,Annotation([Ljava.lang.String;@1169afe1,[Ljava.lang.String;@2ca26d77,[Ljava.lang.String;@4808bc9b),Annotation([Ljava.lang.String;@70e38ce1,[Ljava.lang.String;@2ca923bb,[Ledu.cmu.lti.nlp.amr.Dependency;@13df2a8c),Annotation([Ljava.lang.String;@1ebea008,[Ljava.lang.String;@72d6b3ba,[Ljava.lang.String;@1787f2a0),Annotation([Ljava.lang.String;@7de62196,[Ljava.lang.String;@163370c2,[Ledu.cmu.lti.nlp.amr.Entity;@51bf5add))
AMR:
(a / and, op, i / interest)
(a2 / aspect, quant, m2 / many)
(a3 / all, calendar, a4 / after)
(c / cause-01, ARG0, a / and)
(c / cause-01, ARG1, d2 / decide-01)
(d / do-02, ARG0, a / and)
(d / do-02, ARG1, a2 / aspect)
(d2 / decide-01, ARG0, t / they)
(d2 / decide-01, ARG1, t2 / thing)
(d2 / decide-01, time, a4 / after)
(i / interest, poss, p / people)
(p / people, quant, m / many)
(t2 / thing, quant, m3 / many)

Decoded in 447,731 microseconds
Sentence: Sometimes a dinner party which seems very normal for us ordinary people may not be that simple for stars as we imagined.

Spans:
Span 12-13:  may => possible
Span 7-8:  normal => normal
Span 10-11:  ordinary => ordinary
Span 3-4:  party => party
Span 11-12:  people => people
Span 5-6:  seems => seem-01
Span 6-7:  very => very
Span 20-21:  we => we

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),we,we,false), Span(12,13,List(1),may,possible,false), Span(11,12,List(2),people,people,false), Span(10,11,List(3),ordinary,ordinary,false), Span(7,8,List(4),normal,normal,false), Span(6,7,List(5),very,very,false), Span(5,6,List(6),seems,seem-01,false), Span(3,4,List(7),party,party,false)),Map(2 -> people, 5 -> very, 7 -> party, 1 -> possible, 4 -> normal, 6 -> seem-01, 0 -> we, 3 -> ordinary),Map(n -> normal, w -> we, p2 -> people, s -> seem-01, v -> very, p -> possible, o -> ordinary, p3 -> party))),[Ljava.lang.String;@7905a0b8,Annotation([Ljava.lang.String;@35a3d49f,[Ljava.lang.String;@389b0789,[Ljava.lang.String;@13d9cbf5),Annotation([Ljava.lang.String;@478db956,[Ljava.lang.String;@6ca18a14,[Ledu.cmu.lti.nlp.amr.Dependency;@c667f46),Annotation([Ljava.lang.String;@51bd8b5c,[Ljava.lang.String;@7b50df34,[Ljava.lang.String;@1b410b60),Annotation([Ljava.lang.String;@2462cb01,[Ljava.lang.String;@19b843ba,[Ledu.cmu.lti.nlp.amr.Entity;@64ec96c6))
AMR:
(n / normal, degree, v / very)
(p2 / people, mod, o / ordinary)
(p3 / party, poss, p / possible)
(s / seem-01, ARG0, p3 / party)
(s / seem-01, ARG1, p2 / people)
(s / seem-01, ARG2, w / we)
(s / seem-01, ARG6, n / normal)

Decoded in 135,159 microseconds
Sentence: A star will have lots of contracts and her source of money will be rolling if she tackles well; If she doesn't tack well, what comes after her heel would be forcing out or even frame-ups ...

Spans:
Span 19-20:  ; => and
Span 29-30:  after => after
Span 7-8:  and => and
Span 28-29:  comes => come-01
Span 6-7:  contracts => contract-02
Span 37-38:  even => even
Span 34-35:  forcing => force-02
Span 38-39:  frame => frame
Span 11-12:  money => money
Span 36-37:  or => or
Span 35-36:  out => out
Span 14-15:  rolling => roll-01
Span 21-22:  she => she
Span 16-17:  she => she
Span 9-10:  source => source
Span 25-26:  well => well
Span 18-19:  well => well

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),frame,frame,false), Span(37,38,List(1),even,even,false), Span(36,37,List(2),or,or,false), Span(35,36,List(3),out,out,false), Span(34,35,List(4),forcing,force-02,false), Span(29,30,List(5),after,after,false), Span(28,29,List(6),comes,come-01,false), Span(25,26,List(7),well,well,false), Span(21,22,List(8),she,she,false), Span(19,20,List(9),;,and,false), Span(18,19,List(10),well,well,false), Span(16,17,List(11),she,she,false), Span(14,15,List(12),rolling,roll-01,false), Span(11,12,List(13),money,money,false), Span(9,10,List(14),source,source,false), Span(7,8,List(15),and,and,false), Span(6,7,List(16),contracts,contract-02,false)),Map(2 -> or, 5 -> after, 12 -> roll-01, 15 -> and, 8 -> she, 7 -> well, 1 -> even, 4 -> force-02, 11 -> she, 14 -> source, 6 -> come-01, 0 -> frame, 9 -> and, 16 -> contract-02, 3 -> out, 10 -> well, 13 -> money),Map(e -> even, w -> well, s2 -> she, a3 -> and, s -> she, m -> money, a -> after, o2 -> out, w2 -> well, a2 -> and, r -> roll-01, s3 -> source, c -> come-01, f2 -> force-02, f -> frame, o -> or, c2 -> contract-02))),[Ljava.lang.String;@77659b30,Annotation([Ljava.lang.String;@456d6c1e,[Ljava.lang.String;@1e13529a,[Ljava.lang.String;@1ec9bd38),Annotation([Ljava.lang.String;@452e19ca,[Ljava.lang.String;@6b0d80ed,[Ledu.cmu.lti.nlp.amr.Dependency;@6f8e8894),Annotation([Ljava.lang.String;@3cfdd820,[Ljava.lang.String;@928763c,[Ljava.lang.String;@e25951c),Annotation([Ljava.lang.String;@15f47664,[Ljava.lang.String;@471a9022,[Ledu.cmu.lti.nlp.amr.Entity;@dc9876b))
AMR:
(a / after, op, f2 / force-02)
(a3 / and, op, r / roll-01)
(c / come-01, ARG1, a2 / and)
(c / come-01, ARG6, w / well)
(c / come-01, time, a / after)
(c2 / contract-02, ARG1, c / come-01)
(f2 / force-02, ARG1, f / frame)
(f2 / force-02, ARG5, o2 / out)
(f2 / force-02, ARG6, e / even)
(m / money, location, a3 / and)
(o / or, op, e / even)
(r / roll-01, ARG0, s3 / source)
(r / roll-01, ARG1, c2 / contract-02)
(r / roll-01, ARG6, s2 / she)
(w / well, domain, s / she)
(w2 / well, domain, s2 / she)

Decoded in 685,730 microseconds
Sentence: There are two kinds of smart female stars. Those of the first kind always hold very high integrity and sternly reject all such invitations;

Spans:
Span 25-26:  ; => and
Span 22-23:  all => all
Span 14-15:  always => always
Span 19-20:  and => and
Span 17-18:  high => high
Span 15-16:  hold => hold-04
Span 13-14:  kind => kind
Span 3-4:  kinds => kind
Span 5-6:  smart => smart
Span 23-24:  such => such
Span 2-3:  two => 2
Span 16-17:  very => very

 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of integrity in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of sternly in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of reject in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of all in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of invitations in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of ; in position 25
Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),;,and,false), Span(23,24,List(1),such,such,false), Span(22,23,List(2),all,all,false), Span(19,20,List(3),and,and,false), Span(17,18,List(4),high,high,false), Span(16,17,List(5),very,very,false), Span(15,16,List(6),hold,hold-04,false), Span(14,15,List(7),always,always,false), Span(13,14,List(8),kind,kind,false), Span(5,6,List(9),smart,smart,false), Span(3,4,List(10),kinds,kind,false), Span(2,3,List(11),two,2,false)),Map(2 -> all, 5 -> very, 8 -> kind, 7 -> always, 1 -> such, 11 -> 2, 4 -> high, 6 -> hold-04, 9 -> smart, 0 -> and, 10 -> kind, 3 -> and),Map(k2 -> kind, 2 -> 2, h -> high, s2 -> smart, k -> kind, h2 -> hold-04, a3 -> and, s -> such, v -> very, a -> and, a2 -> all, a4 -> always))),[Ljava.lang.String;@2f666ebb,Annotation([Ljava.lang.String;@19976a65,[Ljava.lang.String;@a1f72f5,[Ljava.lang.String;@4b2c5e02),Annotation([Ljava.lang.String;@57a3e26a,[Ljava.lang.String;@75c56eb9,[Ledu.cmu.lti.nlp.amr.Dependency;@4bc222e),Annotation([Ljava.lang.String;@2dc9b0f5,[Ljava.lang.String;@6531a794,[Ljava.lang.String;@3b5fad2d),Annotation([Ljava.lang.String;@5e17553a,[Ljava.lang.String;@3eb91815,[Ledu.cmu.lti.nlp.amr.Entity;@56dc1551))
AMR:
(a2 / all, op, s / such)
(a3 / and, op, a / and)
(a3 / and, op, a2 / all)
(a3 / and, op, h / high)
(h / high, calendar, v / very)
(h2 / hold-04, ARG0, k / kind)
(h2 / hold-04, ARG2, s2 / smart)
(h2 / hold-04, ARG3, h / high)
(h2 / hold-04, ARG6, a4 / always)
(k2 / kind, name, a2 / all)
(k2 / kind, quant, 2 / 2)

Decoded in 271,667 microseconds
Sentence: the second kind are good at playing the trick and making their objectives achieved with their seed money,

Spans:
Span 13-14:  achieved => achieve-01
Span 9-10:  and => and
Span 4-5:  good => good-41
Span 2-3:  kind => kind
Span 10-11:  making => make-01
Span 17-18:  money => money
Span 12-13:  objectives => objective
Span 16-17:  seed => seed

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),money,money,false), Span(16,17,List(1),seed,seed,false), Span(13,14,List(2),achieved,achieve-01,false), Span(12,13,List(3),objectives,objective,false), Span(10,11,List(4),making,make-01,false), Span(9,10,List(5),and,and,false), Span(4,5,List(6),good,good-41,false), Span(2,3,List(7),kind,kind,false)),Map(2 -> achieve-01, 5 -> and, 7 -> kind, 1 -> seed, 4 -> make-01, 6 -> good-41, 0 -> money, 3 -> objective),Map(k -> kind, m2 -> make-01, s -> seed, m -> money, g -> good-41, a -> achieve-01, a2 -> and, o -> objective))),[Ljava.lang.String;@102cec62,Annotation([Ljava.lang.String;@74f6c5d8,[Ljava.lang.String;@27912e3,[Ljava.lang.String;@34b9f960),Annotation([Ljava.lang.String;@43015c69,[Ljava.lang.String;@19b89d4,[Ledu.cmu.lti.nlp.amr.Dependency;@4bbf6d0e),Annotation([Ljava.lang.String;@30b6ffe0,[Ljava.lang.String;@791d1f8b,[Ljava.lang.String;@2415fc55),Annotation([Ljava.lang.String;@14f232c4,[Ljava.lang.String;@13bc8645,[Ledu.cmu.lti.nlp.amr.Entity;@24c22fe))
AMR:
(a / achieve-01, ARG0, m / money)
(a / achieve-01, ARG1, o / objective)
(a2 / and, op, m2 / make-01)
(g / good-41, ARG1, k / kind)
(m / money, mod, s / seed)
(m2 / make-01, ARG0, k / kind)
(m2 / make-01, ARG1, o / objective)

Decoded in 92,644 microseconds
Sentence: It's rumored that even some super female stars won their first roles in this way.

Spans:
Span 4-5:  even => even
Span 0-1:  It => it
Span 2-3:  rumored => rumor-01
Span 5-6:  some => some
Span 14-15:  this => this
Span 15-16:  way => way
Span 9-10:  won => win-01

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),way,way,false), Span(14,15,List(1),this,this,false), Span(9,10,List(2),won,win-01,false), Span(5,6,List(3),some,some,false), Span(4,5,List(4),even,even,false), Span(2,3,List(5),rumored,rumor-01,false), Span(0,1,List(6),It,it,false)),Map(2 -> win-01, 5 -> rumor-01, 1 -> this, 4 -> even, 6 -> it, 0 -> way, 3 -> some),Map(e -> even, w -> way, t -> this, s -> some, i -> it, r -> rumor-01, w2 -> win-01))),[Ljava.lang.String;@93081b6,Annotation([Ljava.lang.String;@cd1e646,[Ljava.lang.String;@7ba8c737,[Ljava.lang.String;@1890516e),Annotation([Ljava.lang.String;@15a04efb,[Ljava.lang.String;@16c069df,[Ledu.cmu.lti.nlp.amr.Dependency;@2bec854f),Annotation([Ljava.lang.String;@31edaa7d,[Ljava.lang.String;@26adfd2d,[Ljava.lang.String;@3336e6b6),Annotation([Ljava.lang.String;@7c3fdb62,[Ljava.lang.String;@205d38da,[Ledu.cmu.lti.nlp.amr.Entity;@6950ed69))
AMR:
(e / even, calendar, s / some)
(r / rumor-01, ARG1, i / it)
(r / rumor-01, ARG6, w2 / win-01)
(w / way, mod, t / this)
(w2 / win-01, ARG1, e / even)
(w2 / win-01, ARG2, w / way)

Decoded in 241,014 microseconds
Sentence: After drinking some alcohol, the advertiser or show sponsor may take the chance to lie on the female star's shoulder, feel her chin or kiss her cheek, and endurance is the attitude most adopted by the female stars.

Spans:
Span 37-38:  adopted => adopt-01
Span 0-1:  After => after
Span 31-32:  and => and
Span 35-36:  attitude => attitude
Span 10-11:  may => possible
Span 36-37:  most => most
Span 26-27:  or => or
Span 7-8:  or => or
Span 21-22:  shoulder => shoulder
Span 8-9:  show => show-01
Span 2-3:  some => some
Span 9-10:  sponsor => sponsor-01
Span 11-12:  take => take-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),adopted,adopt-01,false), Span(36,37,List(1),most,most,false), Span(35,36,List(2),attitude,attitude,false), Span(31,32,List(3),and,and,false), Span(26,27,List(4),or,or,false), Span(21,22,List(5),shoulder,shoulder,false), Span(11,12,List(6),take,take-01,false), Span(10,11,List(7),may,possible,false), Span(9,10,List(8),sponsor,sponsor-01,false), Span(8,9,List(9),show,show-01,false), Span(7,8,List(10),or,or,false), Span(2,3,List(11),some,some,false), Span(0,1,List(12),After,after,false)),Map(2 -> attitude, 5 -> shoulder, 12 -> after, 8 -> sponsor-01, 7 -> possible, 1 -> most, 4 -> or, 11 -> some, 6 -> take-01, 0 -> adopt-01, 9 -> show-01, 3 -> and, 10 -> or),Map(s2 -> sponsor-01, t -> take-01, a3 -> and, s -> shoulder, s4 -> some, m -> most, p -> possible, a -> adopt-01, o2 -> or, a2 -> attitude, s3 -> show-01, o -> or, a4 -> after))),[Ljava.lang.String;@6dd7b5a3,Annotation([Ljava.lang.String;@6f3187b0,[Ljava.lang.String;@2663e964,[Ljava.lang.String;@48b67364),Annotation([Ljava.lang.String;@189cbd7c,[Ljava.lang.String;@7bf3a5d8,[Ledu.cmu.lti.nlp.amr.Dependency;@42e25b0b),Annotation([Ljava.lang.String;@39b43d60,[Ljava.lang.String;@44be0077,[Ljava.lang.String;@2205a05d),Annotation([Ljava.lang.String;@72ef8d15,[Ljava.lang.String;@6aa8e115,[Ledu.cmu.lti.nlp.amr.Entity;@5e21e98f))
AMR:
(a / adopt-01, ARG0, s / shoulder)
(a / adopt-01, ARG1, a2 / attitude)
(a2 / attitude, calendar, m / most)
(a3 / and, op, t / take-01)
(o / or, op, t / take-01)
(o2 / or, op, s2 / sponsor-01)
(o2 / or, op, s3 / show-01)
(p / possible, domain, t / take-01)
(s2 / sponsor-01, ARG0, s4 / some)
(t / take-01, ARG0, a2 / attitude)
(t / take-01, ARG1, s2 / sponsor-01)
(t / take-01, time, a4 / after)

Decoded in 622,623 microseconds
Sentence: They are the very people of lower nine professions

Spans:
Span 6-7:  lower => lower-01
Span 7-8:  nine => 9
Span 4-5:  people => people
Span 0-1:  They => they
Span 3-4:  very => very

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),nine,9,false), Span(6,7,List(1),lower,lower-01,false), Span(4,5,List(2),people,people,false), Span(3,4,List(3),very,very,false), Span(0,1,List(4),They,they,false)),Map(2 -> people, 1 -> lower-01, 4 -> they, 0 -> 9, 3 -> very),Map(t -> they, v -> very, p -> people, l -> lower-01, 9 -> 9))),[Ljava.lang.String;@51a9ad5e,Annotation([Ljava.lang.String;@5f20155b,[Ljava.lang.String;@72ade7e3,[Ljava.lang.String;@239105a8),Annotation([Ljava.lang.String;@3fce8fd9,[Ljava.lang.String;@609bcfb6,[Ledu.cmu.lti.nlp.amr.Dependency;@7d94beb9),Annotation([Ljava.lang.String;@560348e6,[Ljava.lang.String;@1df8b5b8,[Ljava.lang.String;@23202fce),Annotation([Ljava.lang.String;@7b993c65,[Ljava.lang.String;@37911f88,[Ledu.cmu.lti.nlp.amr.Entity;@6f1c29b7))
AMR:
(l / lower-01, ARG1, 9 / 9)
(l / lower-01, ARG6, p / people)
(p / people, mod, v / very)
(v / very, calendar, t / they)

Decoded in 32,628 microseconds
Sentence: Those stars are just pretending, they are all actually living a much damned better life than this

Spans:
Span 9-10:  actually => actual
Span 8-9:  all => all
Span 14-15:  better => good
Span 3-4:  just => just
Span 15-16:  life => life
Span 10-11:  living => live-01
Span 12-13:  much => much
Span 6-7:  they => they
Span 17-18:  this => this

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),this,this,false), Span(15,16,List(1),life,life,false), Span(14,15,List(2),better,good,false), Span(12,13,List(3),much,much,false), Span(10,11,List(4),living,live-01,false), Span(9,10,List(5),actually,actual,false), Span(8,9,List(6),all,all,false), Span(6,7,List(7),they,they,false), Span(3,4,List(8),just,just,false)),Map(2 -> good, 5 -> actual, 8 -> just, 7 -> they, 1 -> life, 4 -> live-01, 6 -> all, 0 -> this, 3 -> much),Map(t -> this, j -> just, m -> much, g -> good, a -> actual, t2 -> they, a2 -> all, l2 -> live-01, l -> life))),[Ljava.lang.String;@4d6025c5,Annotation([Ljava.lang.String;@7f284218,[Ljava.lang.String;@407a7f2a,[Ljava.lang.String;@4ea5b703),Annotation([Ljava.lang.String;@2a7ed1f,[Ljava.lang.String;@3fa247d1,[Ledu.cmu.lti.nlp.amr.Dependency;@2cb2fc20),Annotation([Ljava.lang.String;@4f4c4b1a,[Ljava.lang.String;@723e88f9,[Ljava.lang.String;@5f0fd5a0),Annotation([Ljava.lang.String;@64e7619d,[Ljava.lang.String;@495ee280,[Ledu.cmu.lti.nlp.amr.Entity;@4fa1c212))
AMR:
(a2 / all, domain, t2 / they)
(l / life, mod, g / good)
(l2 / live-01, ARG0, t2 / they)
(l2 / live-01, ARG1, l / life)
(l2 / live-01, ARG2, m / much)
(l2 / live-01, ARG6, j / just)
(l2 / live-01, mod, a / actual)
(t / this, calendar, l / life)

Decoded in 178,018 microseconds
Sentence: Agree, just cheap entertainers. Their reputation in feudal China somewhat makes sense.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 3-4:  cheap => cheap
Span 10-11:  China => (country :name (name :op "China"))
Span 2-3:  just => just
Span 12-13:  makes => make-02
Span 7-8:  reputation => repute-01
Span 13-14:  sense => sense-01
Span 11-12:  somewhat => somewhat

 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),sense,sense-01,false), Span(12,13,List(1),makes,make-02,false), Span(11,12,List(2),somewhat,somewhat,false), Span(10,11,List(5, 4, 3),China,(country :name (name :op "China")),false), Span(7,8,List(6),reputation,repute-01,false), Span(3,4,List(7),cheap,cheap,false), Span(2,3,List(8),just,just,false)),Map(2 -> somewhat, 5 -> "China", 8 -> just, 7 -> cheap, 1 -> make-02, 4 -> name, 6 -> repute-01, 0 -> sense-01, 3 -> country),Map(n -> name, s2 -> somewhat, j -> just, s -> sense-01, m -> make-02, r -> repute-01, c -> country, c2 -> cheap))),[Ljava.lang.String;@6ea2bc93,Annotation([Ljava.lang.String;@3116c353,[Ljava.lang.String;@f627d13,[Ljava.lang.String;@4e928fbf),Annotation([Ljava.lang.String;@352ff4da,[Ljava.lang.String;@3224a577,[Ledu.cmu.lti.nlp.amr.Dependency;@2e32ccc5),Annotation([Ljava.lang.String;@748741cb,[Ljava.lang.String;@3e44f2a5,[Ljava.lang.String;@295cf707),Annotation([Ljava.lang.String;@1130520d,[Ljava.lang.String;@5f77d0f9,[Ledu.cmu.lti.nlp.amr.Entity;@463fd068))
AMR:
(c / country, name, n / name)
(j / just, calendar, c2 / cheap)
(m / make-02, ARG0, c / country)
(m / make-02, ARG1, s / sense-01)
(m / make-02, ARG6, s2 / somewhat)
(n / name, op, "China")
(r / repute-01, ARG1, c / country)
(s / sense-01, ARG1, j / just)

Decoded in 246,477 microseconds
Sentence: Agree!

Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@895e367,Annotation([Ljava.lang.String;@1b266842,[Ljava.lang.String;@7a3793c7,[Ljava.lang.String;@42b3b079),Annotation([Ljava.lang.String;@651aed93,[Ljava.lang.String;@4dd6fd0a,[Ledu.cmu.lti.nlp.amr.Dependency;@bb9e6dc),Annotation([Ljava.lang.String;@5456afaa,[Ljava.lang.String;@6692b6c6,[Ljava.lang.String;@1cd629b3),Annotation([Ljava.lang.String;@589da3f3,[Ljava.lang.String;@39d76cb5,[Ledu.cmu.lti.nlp.amr.Entity;@4a00d9cf))
AMR:


Decoded in 2,768 microseconds
Sentence: Ah well, it is not easy to be an actress

Spans:
Span 6-7:  easy => easy
Span 3-4:  it => it
Span 1-2:  well => well

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),easy,easy,false), Span(3,4,List(1),it,it,false), Span(1,2,List(2),well,well,false)),Map(2 -> well, 1 -> it, 0 -> easy),Map(w -> well, e -> easy, i -> it))),[Ljava.lang.String;@6736fa8d,Annotation([Ljava.lang.String;@52815fa3,[Ljava.lang.String;@50313382,[Ljava.lang.String;@1cb346ea),Annotation([Ljava.lang.String;@4c012563,[Ljava.lang.String;@14a50707,[Ledu.cmu.lti.nlp.amr.Dependency;@4d518b32),Annotation([Ljava.lang.String;@4bd31064,[Ljava.lang.String;@e3c0e40,[Ljava.lang.String;@329dbdbf),Annotation([Ljava.lang.String;@7354b8c5,[Ljava.lang.String;@20d7d6fb,[Ledu.cmu.lti.nlp.amr.Entity;@4ef782af))
AMR:
(e / easy, domain, i / it)
(w / well, op, e / easy)

Decoded in 10,500 microseconds
Sentence: They deserve it. They asked for that.

Spans:
Span 5-6:  asked => ask-02
Span 2-3:  it => it
Span 4-5:  They => they
Span 0-1:  They => they

 *** WARNING: The dependency tree seems broken.  I can't find the head of asked in position 5
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 6
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 8
Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),asked,ask-02,false), Span(4,5,List(1),They,they,false), Span(2,3,List(2),it,it,false), Span(0,1,List(3),They,they,false)),Map(2 -> it, 1 -> they, 0 -> ask-02, 3 -> they),Map(t -> they, a -> ask-02, t2 -> they, i -> it))),[Ljava.lang.String;@11d8ae8b,Annotation([Ljava.lang.String;@479cbee5,[Ljava.lang.String;@59e2d8e3,[Ljava.lang.String;@2b72cb8a),Annotation([Ljava.lang.String;@7f8a9499,[Ljava.lang.String;@5d43661b,[Ledu.cmu.lti.nlp.amr.Dependency;@12299890),Annotation([Ljava.lang.String;@2fba3fc4,[Ljava.lang.String;@4bf48f6,[Ljava.lang.String;@420a85c4),Annotation([Ljava.lang.String;@1c39680d,[Ljava.lang.String;@62833051,[Ledu.cmu.lti.nlp.amr.Entity;@1c852c0f))
AMR:
(a / ask-02, ARG0, t2 / they)
(a / ask-02, ARG1, i / it)
(a / ask-02, ARG6, t / they)

Decoded in 47,532 microseconds
Sentence: It dawned on me nothing is easy!

Spans:
Span 6-7:  easy => easy
Span 0-1:  It => it
Span 4-5:  nothing => nothing

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),easy,easy,false), Span(4,5,List(1),nothing,nothing,false), Span(0,1,List(2),It,it,false)),Map(2 -> it, 1 -> nothing, 0 -> easy),Map(n -> nothing, e -> easy, i -> it))),[Ljava.lang.String;@a37aefe,Annotation([Ljava.lang.String;@5d99c6b5,[Ljava.lang.String;@266374ef,[Ljava.lang.String;@13b3d178),Annotation([Ljava.lang.String;@24c4ddae,[Ljava.lang.String;@37fb0bed,[Ledu.cmu.lti.nlp.amr.Dependency;@a82c5f1),Annotation([Ljava.lang.String;@7b7fdc8,[Ljava.lang.String;@51c693d,[Ljava.lang.String;@6a57ae10),Annotation([Ljava.lang.String;@766653e6,[Ljava.lang.String;@4e07b95f,[Ledu.cmu.lti.nlp.amr.Entity;@28b46423))
AMR:
(e / easy, domain, n / nothing)
(e / easy, poss, i / it)

Decoded in 8,422 microseconds
Sentence: The women are birds and beasts, and the men are worse than birds and beasts

Spans:
Span 14-15:  and => and
Span 7-8:  and => and
Span 4-5:  and => and
Span 9-10:  men => man
Span 1-2:  women => woman
Span 11-12:  worse => bad

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),and,and,false), Span(11,12,List(1),worse,bad,false), Span(9,10,List(2),men,man,false), Span(7,8,List(3),and,and,false), Span(4,5,List(4),and,and,false), Span(1,2,List(5),women,woman,false)),Map(2 -> man, 5 -> woman, 1 -> bad, 4 -> and, 0 -> and, 3 -> and),Map(w -> woman, b -> bad, a3 -> and, m -> man, a -> and, a2 -> and))),[Ljava.lang.String;@7fc4780b,Annotation([Ljava.lang.String;@3b79fd76,[Ljava.lang.String;@48c76607,[Ljava.lang.String;@43599640),Annotation([Ljava.lang.String;@1f81aa00,[Ljava.lang.String;@6b6776cb,[Ledu.cmu.lti.nlp.amr.Dependency;@1863d2fe),Annotation([Ljava.lang.String;@1787bc24,[Ljava.lang.String;@544d57e,[Ljava.lang.String;@55c53a33),Annotation([Ljava.lang.String;@53b7f657,[Ljava.lang.String;@797b0699,[Ledu.cmu.lti.nlp.amr.Entity;@5a37d3ed))
AMR:
(a / and, op, b / bad)
(a2 / and, op, w / woman)
(a3 / and, op, m / man)
(a3 / and, op, w / woman)
(b / bad, domain, m / man)

Decoded in 27,961 microseconds
--- Stage1 evaluation ---
Precision: NaN
Recall: NaN
F1: NaN
