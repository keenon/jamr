Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: I am 24 and a mother of a 2 and a half year old.

Oracle Span 1:  24 => 24
Oracle Span 2:  and => and
Oracle Span 3:  I => i
Oracle Span 4:  mother => mother
Oracle Span 5:  year => (temporal-quantity :unit year)
Spans:
Span 2-3:  24 => 24
Span 3-4:  and => and
Span 0-1:  I => i
Span 5-6:  mother => mother
Span 12-13:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  24 => 24
Oracle Span 3-4:  and => and
Oracle Span 0-1:  I => i
Oracle Span 5-6:  mother => mother
Oracle Span 12-13:  year => (temporal-quantity :unit year)

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	am	_	VBP	VBP	_	3	cop	_	_
3	24	_	CD	CD	_	0	root	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	a	_	DT	DT	_	6	det	_	_
6	mother	_	NN	NN	_	3	conj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	a	_	DT	DT	_	14	det	_	_
9	2	_	CD	CD	_	13	num	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	a	_	DT	DT	_	12	det	_	_
12	half	_	NN	NN	_	9	conj	_	_
13	year	_	NN	NN	_	14	npadvmod	_	_
14	old	_	JJ	JJ	_	7	pobj	_	_
15	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, m / mother)
(m / mother, mod, i / i)
(t3 / temporal-quantity, unit, y / year)

Input(Some(Graph((and :op (mother :poss (person :ARG1-of (age-01 :ARG2 (temporal-quantity :unit year :quant 2.5))) :mod i) :op (age-01 :ARG1 i :ARG2 (temporal-quantity :quant 24 :unit year))),ArrayBuffer(Span(3,4,List(0),and,and,false), Span(5,6,List(1),mother,mother,false), Span(12,13,List(2, 3),year,(temporal-quantity :unit year),false), Span(0,1,List(4),I,i,false), Span(2,3,List(5),24,24,false)),Map(2 -> temporal-quantity, 5 -> 24, 1 -> mother, 4 -> i, 0 -> and, 3 -> year),Map(2 -> 24, m -> mother, y -> year, t3 -> temporal-quantity, a -> and, i -> i))),[Ljava.lang.String;@40ef3420,Annotation([Ljava.lang.String;@498d318c,[Ljava.lang.String;@6e171cd7,[Ljava.lang.String;@402bba4f),Annotation([Ljava.lang.String;@795cd85e,[Ljava.lang.String;@59fd97a8,[Ledu.cmu.lti.nlp.amr.Dependency;@f5ac9e4),Annotation([Ljava.lang.String;@123ef382,[Ljava.lang.String;@dbf57b3,[Ljava.lang.String;@384ad17b),Annotation([Ljava.lang.String;@61862a7f,[Ljava.lang.String;@441772e,[Ledu.cmu.lti.nlp.amr.Entity;@7334aada))
AMR:
(2 / 24, calendar, i / i)
(a / and, op, m / mother)
(a / and, op, t3 / temporal-quantity)
(m / mother, calendar, 2 / 24)
(t3 / temporal-quantity, unit, y / year)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 423,097 microseconds
Sentence: Me and my son's father have been broken up since August.

Oracle Span 1:  August => (date-entity :month 8)
Oracle Span 2:  broken => break-16
Oracle Span 3:  father => father
Oracle Span 4:  since => since
Oracle Span 5:  son => son
Spans:
Span 11-12:  August => (date-entity :month 8)
Span 8-9:  broken => break-16
Span 5-6:  father => father
Span 10-11:  since => since
Span 3-4:  son => son

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 11-12:  August => (date-entity :month 8)
Oracle Span 8-9:  broken => break-16
Oracle Span 5-6:  father => father
Oracle Span 10-11:  since => since
Oracle Span 3-4:  son => son

Dependencies:
1	Me	_	PRP	PRP	_	9	nsubjpass	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	my	_	PRP$	PRP$	_	4	poss	_	_
4	son	_	NN	NN	_	6	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	father	_	NN	NN	_	1	conj	_	_
7	have	_	VBP	VBP	_	9	aux	_	_
8	been	_	VBN	VBN	_	9	auxpass	_	_
9	broken	_	VBN	VBN	_	0	root	_	_
10	up	_	RP	RP	_	9	prt	_	_
11	since	_	IN	IN	_	9	prep	_	_
12	August	_	NNP	NNP	_	11	pobj	_	_
13	.	_	.	.	_	9	punct	_	_

Oracle:
(b / break-16, ARG1, f / father)
(b / break-16, duration, s2 / since)
(d / date-entity, month, 8)
(f / father, poss, s / son)
(s2 / since, op, d / date-entity)

Input(Some(Graph((break-16 :duration (since :op (date-entity :month 8)) :ARG1 (father :poss (son :poss i)) :ARG0 i),ArrayBuffer(Span(11,12,List(0, 1),August,(date-entity :month 8),false), Span(8,9,List(2),broken,break-16,false), Span(10,11,List(3),since,since,false), Span(5,6,List(4),father,father,false), Span(3,4,List(5),son,son,false)),Map(2 -> break-16, 5 -> son, 1 -> 8, 4 -> father, 0 -> date-entity, 3 -> since),Map(s2 -> since, b -> break-16, s -> son, d -> date-entity, f -> father))),[Ljava.lang.String;@49ec71f8,Annotation([Ljava.lang.String;@1d2adfbe,[Ljava.lang.String;@36902638,[Ljava.lang.String;@223d2c72),Annotation([Ljava.lang.String;@8f4ea7c,[Ljava.lang.String;@436813f3,[Ledu.cmu.lti.nlp.amr.Dependency;@74fe5c40),Annotation([Ljava.lang.String;@3febb011,[Ljava.lang.String;@10e31a9a,[Ljava.lang.String;@131774fe),Annotation([Ljava.lang.String;@158d2680,[Ljava.lang.String;@77847718,[Ledu.cmu.lti.nlp.amr.Entity;@7f3b84b8))
AMR:
(b / break-16, ARG0, f / father)
(b / break-16, ARG1, d / date-entity)
(d / date-entity, month, 8)
(f / father, poss, s / son)
(s2 / since, op, d / date-entity)

WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 460,093 microseconds
Sentence: I want to start dating other people and my son's father says if I do he will have nothing to do with his son.

Oracle Span 1:  and => and
Oracle Span 2:  dating => date-02
Oracle Span 3:  do => do-04
Oracle Span 4:  father => father
Oracle Span 5:  I => i
Oracle Span 6:  nothing => nothing
Oracle Span 7:  other => (person :mod other)
Oracle Span 8:  says => say-01
Oracle Span 9:  son => son
Oracle Span 10:  son => son
Oracle Span 11:  start => start-01
Oracle Span 12:  want => want-01
Spans:
Span 7-8:  and => and
Span 4-5:  dating => date-02
Span 15-16:  do => do-04
Span 11-12:  father => father
Span 0-1:  I => i
Span 19-20:  nothing => nothing
Span 5-6:  other => (person :mod other)
Span 12-13:  says => say-01
Span 9-10:  son => son
Span 24-25:  son => son
Span 3-4:  start => start-01
Span 1-2:  want => want-01

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 4-5:  dating => date-02
Oracle Span 15-16:  do => do-04
Oracle Span 11-12:  father => father
Oracle Span 0-1:  I => i
Oracle Span 19-20:  nothing => nothing
Oracle Span 5-6:  other => (person :mod other)
Oracle Span 12-13:  says => say-01
Oracle Span 9-10:  son => son
Oracle Span 24-25:  son => son
Oracle Span 3-4:  start => start-01
Oracle Span 1-2:  want => want-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	want	_	VBP	VBP	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	start	_	VB	VB	_	2	xcomp	_	_
5	dating	_	VBG	VBG	_	4	xcomp	_	_
6	other	_	JJ	JJ	_	7	amod	_	_
7	people	_	NNS	NNS	_	5	dobj	_	_
8	and	_	CC	CC	_	2	cc	_	_
9	my	_	PRP$	PRP$	_	10	poss	_	_
10	son	_	NN	NN	_	12	poss	_	_
11	's	_	POS	POS	_	10	possessive	_	_
12	father	_	NN	NN	_	13	nsubj	_	_
13	says	_	VBZ	VBZ	_	2	conj	_	_
14	if	_	IN	IN	_	16	mark	_	_
15	I	_	PRP	PRP	_	16	nsubj	_	_
16	do	_	VBP	VBP	_	13	advcl	_	_
17	he	_	PRP	PRP	_	19	nsubj	_	_
18	will	_	MD	MD	_	19	aux	_	_
19	have	_	VB	VB	_	16	ccomp	_	_
20	nothing	_	NN	NN	_	19	dobj	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	do	_	VB	VB	_	19	vmod	_	_
23	with	_	IN	IN	_	22	prep	_	_
24	his	_	PRP$	PRP$	_	25	poss	_	_
25	son	_	NN	NN	_	23	pobj	_	_
26	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, s / say-01)
(a / and, op, w / want-01)
(d / date-02, ARG0, i / i)
(d / date-02, ARG1, p / person)
(d2 / do-04, ARG0, f / father)
(d2 / do-04, ARG1, s4 / son)
(d2 / do-04, ARG2, n / nothing)
(d2 / do-04, condition, d / date-02)
(f / father, poss, s3 / son)
(p / person, mod, o / other)
(s / say-01, ARG0, f / father)
(s / say-01, ARG1, d2 / do-04)
(s2 / start-01, ARG0, i / i)
(s2 / start-01, ARG1, d / date-02)
(s3 / son, poss, i / i)
(s4 / son, poss, f / father)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, s2 / start-01)

Input(Some(Graph((and :op (say-01 :ARG1 (do-04 :ARG2 nothing :ARG1 (son :poss father) :ARG0 father :condition date-02) :ARG0 (father :poss (son :poss i))) :op (want-01 :ARG1 (start-01 :ARG1 (date-02 :ARG1 (person :mod other) :ARG0 i) :ARG0 i) :ARG0 i)),ArrayBuffer(Span(7,8,List(0),and,and,false), Span(12,13,List(1),says,say-01,false), Span(15,16,List(2),do,do-04,false), Span(19,20,List(3),nothing,nothing,false), Span(9,10,List(4),son,son,false), Span(11,12,List(5),father,father,false), Span(24,25,List(6),son,son,false), Span(1,2,List(7),want,want-01,false), Span(3,4,List(8),start,start-01,false), Span(4,5,List(9),dating,date-02,false), Span(5,6,List(10, 11),other,(person :mod other),false), Span(0,1,List(12),I,i,false)),Map(2 -> do-04, 5 -> father, 12 -> i, 8 -> start-01, 7 -> want-01, 1 -> say-01, 4 -> son, 11 -> other, 6 -> son, 9 -> date-02, 0 -> and, 10 -> person, 3 -> nothing),Map(w -> want-01, n -> nothing, s2 -> start-01, s -> say-01, s4 -> son, d -> date-02, p -> person, a -> and, d2 -> do-04, i -> i, s3 -> son, f -> father, o -> other))),[Ljava.lang.String;@7f0eb4b4,Annotation([Ljava.lang.String;@5c33f1a9,[Ljava.lang.String;@1623b78d,[Ljava.lang.String;@c8c12ac),Annotation([Ljava.lang.String;@6adbc9d,[Ljava.lang.String;@4550bb58,[Ledu.cmu.lti.nlp.amr.Dependency;@4ec4f3a0),Annotation([Ljava.lang.String;@223191a6,[Ljava.lang.String;@49139829,[Ljava.lang.String;@9597028),Annotation([Ljava.lang.String;@6069db50,[Ljava.lang.String;@4efbca5a,[Ledu.cmu.lti.nlp.amr.Entity;@1b7cc17c))
AMR:
(a / and, op, s / say-01)
(a / and, op, w / want-01)
(d / date-02, ARG1, p / person)
(d2 / do-04, ARG1, n / nothing)
(f / father, poss, s4 / son)
(p / person, mod, o / other)
(s / say-01, ARG0, f / father)
(s / say-01, ARG1, d2 / do-04)
(s2 / start-01, ARG0, s3 / son)
(s2 / start-01, ARG1, d / date-02)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, s2 / start-01)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 1,109,357 microseconds
Sentence: He is very possesive and controlling but he has no right to be as we are not together.

Oracle Span 1:  and => and
Oracle Span 2:  but => contrast-01
Oracle Span 3:  controlling => controlling
Oracle Span 4:  He => he
Oracle Span 5:  no => -
Oracle Span 6:  possesive => possessive
Oracle Span 7:  together => together
Oracle Span 8:  very => very
Oracle Span 9:  we => we
Spans:
Span 4-5:  and => and
Span 6-7:  but => contrast-01
Span 5-6:  controlling => controlling
Span 0-1:  He => he
Span 9-10:  no => -
Span 3-4:  possesive => possessive
Span 17-18:  together => together
Span 2-3:  very => very
Span 14-15:  we => we

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 6-7:  but => contrast-01
Oracle Span 5-6:  controlling => controlling
Oracle Span 0-1:  He => he
Oracle Span 9-10:  no => -
Oracle Span 3-4:  possesive => possessive
Oracle Span 17-18:  together => together
Oracle Span 2-3:  very => very
Oracle Span 14-15:  we => we

Dependencies:
1	He	_	PRP	PRP	_	4	nsubj	_	_
2	is	_	VBZ	VBZ	_	4	cop	_	_
3	very	_	RB	RB	_	4	advmod	_	_
4	possesive	_	JJ	JJ	_	0	root	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	controlling	_	VBG	VBG	_	4	conj	_	_
7	but	_	CC	CC	_	4	cc	_	_
8	he	_	PRP	PRP	_	9	nsubj	_	_
9	has	_	VBZ	VBZ	_	4	conj	_	_
10	no	_	RB	RB	_	11	neg	_	_
11	right	_	RB	RB	_	9	advmod	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	be	_	VB	VB	_	9	xcomp	_	_
14	as	_	IN	IN	_	18	mark	_	_
15	we	_	PRP	PRP	_	18	nsubj	_	_
16	are	_	VBP	VBP	_	18	cop	_	_
17	not	_	RB	RB	_	18	neg	_	_
18	together	_	RB	RB	_	13	advcl	_	_
19	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c3 / controlling)
(a / and, op, p / possessive)
(c / contrast-01, ARG1, a / and)
(c3 / controlling, degree, v / very)
(c3 / controlling, domain, h2 / he)
(p / possessive, domain, h2 / he)
(t / together, domain, w / we)

Input(Some(Graph((contrast-01 :ARG2 (entitle-01 :polarity - :ARG1-of (cause-01 :ARG0 (together :domain we)) :ARG1 and :ARG2 he) :ARG1 (and :op (controlling :degree very :domain he) :op (possessive :degree very :domain he))),ArrayBuffer(Span(9,10,List(0),no,-,false), Span(6,7,List(1),but,contrast-01,false), Span(17,18,List(2),together,together,false), Span(14,15,List(3),we,we,false), Span(4,5,List(4),and,and,false), Span(5,6,List(5),controlling,controlling,false), Span(2,3,List(6),very,very,false), Span(0,1,List(7),He,he,false), Span(3,4,List(8),possesive,possessive,false)),Map(2 -> together, 5 -> controlling, 8 -> possessive, 7 -> he, 1 -> contrast-01, 4 -> and, 6 -> very, 0 -> -, 3 -> we),Map(w -> we, h2 -> he, t -> together, v -> very, p -> possessive, c3 -> controlling, a -> and, - -> -, c -> contrast-01))),[Ljava.lang.String;@59662a0b,Annotation([Ljava.lang.String;@77fbd92c,[Ljava.lang.String;@67c27493,[Ljava.lang.String;@1a482e36),Annotation([Ljava.lang.String;@72967906,[Ljava.lang.String;@5b8dfcc1,[Ledu.cmu.lti.nlp.amr.Dependency;@2f9f7dcf),Annotation([Ljava.lang.String;@747ddf94,[Ljava.lang.String;@35e2d654,[Ljava.lang.String;@1bd4fdd),Annotation([Ljava.lang.String;@55183b20,[Ljava.lang.String;@4f83df68,[Ledu.cmu.lti.nlp.amr.Entity;@6cf0e0ba))
AMR:
(a / and, op, c3 / controlling)
(c / contrast-01, ARG0, t / together)
(c / contrast-01, ARG1, a / and)
(c / contrast-01, ARG2, - / -)
(c / contrast-01, ARG6, p / possessive)
(p / possessive, degree, v / very)
(p / possessive, domain, h2 / he)
(w / we, calendar, t / together)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 270,021 microseconds
Sentence: He has too much going on in his life right now and he thinks we can work when I have told him several times I dont love him and he does not love me.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  can => possible
Oracle Span 4:  going => go-00
Oracle Span 5:  He => he
Oracle Span 6:  I => i
Oracle Span 7:  life => life
Oracle Span 8:  love => love-01
Oracle Span 9:  love => love-01
Oracle Span 10:  much => much
Oracle Span 11:  now => now
Oracle Span 12:  right => right
Oracle Span 13:  several => several
Oracle Span 14:  thinks => think-01
Oracle Span 15:  told => tell-01
Oracle Span 16:  too => too
Oracle Span 17:  we => we
Oracle Span 18:  work => work-09
Spans:
Span 11-12:  and => and
Span 28-29:  and => and
Span 15-16:  can => possible
Span 4-5:  going => go-00
Span 0-1:  He => he
Span 18-19:  I => i
Span 8-9:  life => life
Span 26-27:  love => love-01
Span 32-33:  love => love-01
Span 3-4:  much => much
Span 10-11:  now => now
Span 9-10:  right => right
Span 22-23:  several => several
Span 13-14:  thinks => think-01
Span 20-21:  told => tell-01
Span 2-3:  too => too
Span 14-15:  we => we
Span 16-17:  work => work-09

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 28-29:  and => and
Oracle Span 15-16:  can => possible
Oracle Span 4-5:  going => go-00
Oracle Span 0-1:  He => he
Oracle Span 18-19:  I => i
Oracle Span 8-9:  life => life
Oracle Span 26-27:  love => love-01
Oracle Span 32-33:  love => love-01
Oracle Span 3-4:  much => much
Oracle Span 10-11:  now => now
Oracle Span 9-10:  right => right
Oracle Span 22-23:  several => several
Oracle Span 13-14:  thinks => think-01
Oracle Span 20-21:  told => tell-01
Oracle Span 2-3:  too => too
Oracle Span 14-15:  we => we
Oracle Span 16-17:  work => work-09

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	has	_	VBZ	VBZ	_	0	root	_	_
3	too	_	RB	RB	_	4	advmod	_	_
4	much	_	RB	RB	_	2	advmod	_	_
5	going	_	VBG	VBG	_	2	xcomp	_	_
6	on	_	IN	IN	_	5	prep	_	_
7	in	_	IN	IN	_	6	pcomp	_	_
8	his	_	PRP$	PRP$	_	9	poss	_	_
9	life	_	NN	NN	_	7	pobj	_	_
10	right	_	RB	RB	_	11	advmod	_	_
11	now	_	RB	RB	_	5	advmod	_	_
12	and	_	CC	CC	_	2	cc	_	_
13	he	_	PRP	PRP	_	14	nsubj	_	_
14	thinks	_	VBZ	VBZ	_	2	conj	_	_
15	we	_	PRP	PRP	_	17	nsubj	_	_
16	can	_	MD	MD	_	17	aux	_	_
17	work	_	VB	VB	_	14	ccomp	_	_
18	when	_	WRB	WRB	_	21	advmod	_	_
19	I	_	PRP	PRP	_	21	nsubj	_	_
20	have	_	VBP	VBP	_	21	aux	_	_
21	told	_	VBN	VBN	_	26	advcl	_	_
22	him	_	PRP	PRP	_	21	dobj	_	_
23	several	_	JJ	JJ	_	24	amod	_	_
24	times	_	NNS	NNS	_	21	tmod	_	_
25	I	_	PRP	PRP	_	26	nsubj	_	_
26	dont	_	VBP	VBP	_	17	dep	_	_
27	love	_	VB	VB	_	26	xcomp	_	_
28	him	_	PRP	PRP	_	27	dobj	_	_
29	and	_	CC	CC	_	26	cc	_	_
30	he	_	PRP	PRP	_	33	nsubj	_	_
31	does	_	VBZ	VBZ	_	33	aux	_	_
32	not	_	RB	RB	_	33	neg	_	_
33	love	_	VB	VB	_	26	conj	_	_
34	me	_	PRP	PRP	_	33	dobj	_	_
35	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, g2 / go-00)
(a / and, op, t / think-01)
(a2 / and, op, l2 / love-01)
(a2 / and, op, l3 / love-01)
(g2 / go-00, ARG1, m / much)
(g2 / go-00, ARG2, h2 / he)
(g2 / go-00, location, l / life)
(g2 / go-00, time, n / now)
(l / life, poss, h2 / he)
(l2 / love-01, ARG0, i / i)
(l2 / love-01, ARG1, h2 / he)
(l3 / love-01, ARG0, h2 / he)
(l3 / love-01, ARG1, i / i)
(m / much, degree, t2 / too)
(n / now, mod, r / right)
(p / possible, domain, w / work-09)
(t / think-01, ARG0, h2 / he)
(t / think-01, ARG1, p / possible)
(t / think-01, concession, t3 / tell-01)
(t3 / tell-01, ARG0, i / i)
(t3 / tell-01, ARG1, a2 / and)
(t3 / tell-01, ARG2, h2 / he)
(t3 / tell-01, frequency, s2 / several)
(w / work-09, ARG1, w2 / we)

Input(Some(Graph((and :op (think-01 :concession (tell-01 :frequency several :ARG1 (and :op (love-01 :polarity - :ARG0 he :ARG1 i) :op (love-01 :polarity - :ARG0 i :ARG1 he)) :ARG0 i :ARG2 he) :ARG1 (possible :domain (work-09 :ARG1 we)) :ARG0 he) :op (go-00 :time (now :mod right) :location (life :poss he) :ARG2 he :ARG1 (much :degree too))),ArrayBuffer(Span(11,12,List(0),and,and,false), Span(13,14,List(1),thinks,think-01,false), Span(20,21,List(2),told,tell-01,false), Span(22,23,List(3),several,several,false), Span(28,29,List(4),and,and,false), Span(26,27,List(5),love,love-01,false), Span(32,33,List(6),love,love-01,false), Span(18,19,List(7),I,i,false), Span(15,16,List(8),can,possible,false), Span(16,17,List(9),work,work-09,false), Span(14,15,List(10),we,we,false), Span(4,5,List(11),going,go-00,false), Span(10,11,List(12),now,now,false), Span(9,10,List(13),right,right,false), Span(8,9,List(14),life,life,false), Span(0,1,List(15),He,he,false), Span(3,4,List(16),much,much,false), Span(2,3,List(17),too,too,false)),Map(2 -> tell-01, 5 -> love-01, 12 -> now, 15 -> he, 8 -> possible, 7 -> i, 17 -> too, 1 -> think-01, 4 -> and, 11 -> go-00, 14 -> life, 6 -> love-01, 9 -> work-09, 0 -> and, 16 -> much, 10 -> we, 3 -> several, 13 -> right),Map(n -> now, w -> work-09, h2 -> he, s2 -> several, t -> think-01, l3 -> love-01, m -> much, g2 -> go-00, t3 -> tell-01, p -> possible, a -> and, t2 -> too, w2 -> we, l2 -> love-01, r -> right, i -> i, a2 -> and, l -> life))),[Ljava.lang.String;@7d8995e,Annotation([Ljava.lang.String;@130d63be,[Ljava.lang.String;@42a48628,[Ljava.lang.String;@293a5bf6),Annotation([Ljava.lang.String;@6aeb35e6,[Ljava.lang.String;@1283bb96,[Ledu.cmu.lti.nlp.amr.Dependency;@74f0ea28),Annotation([Ljava.lang.String;@f6efaab,[Ljava.lang.String;@3c19aaa5,[Ljava.lang.String;@3349e9bb),Annotation([Ljava.lang.String;@409bf450,[Ljava.lang.String;@38d8f54a,[Ledu.cmu.lti.nlp.amr.Entity;@49e53c76))
AMR:
(a / and, op, t / think-01)
(a2 / and, condition, t3 / tell-01)
(g2 / go-00, ARG0, l / life)
(g2 / go-00, ARG1, r / right)
(g2 / go-00, ARG2, a / and)
(g2 / go-00, ARG6, m / much)
(l2 / love-01, ARG1, a2 / and)
(l3 / love-01, ARG1, a2 / and)
(m / much, degree, t2 / too)
(n / now, degree, r / right)
(p / possible, domain, w / work-09)
(t / think-01, ARG0, h2 / he)
(t / think-01, ARG1, p / possible)
(t3 / tell-01, ARG0, i / i)
(t3 / tell-01, ARG1, s2 / several)
(w / work-09, ARG0, w2 / we)
(w / work-09, ARG1, a2 / and)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 1,109,606 microseconds
Sentence: I want him to be there for his son without needing me too.

Oracle Span 1:  I => i
Oracle Span 2:  needing => need-01
Oracle Span 3:  son => son
Oracle Span 4:  there => there
Oracle Span 5:  too => too
Oracle Span 6:  want => want-01
Spans:
Span 0-1:  I => i
Span 10-11:  needing => need-01
Span 8-9:  son => son
Span 5-6:  there => there
Span 12-13:  too => too
Span 1-2:  want => want-01

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 10-11:  needing => need-01
Oracle Span 8-9:  son => son
Oracle Span 5-6:  there => there
Oracle Span 12-13:  too => too
Oracle Span 1-2:  want => want-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	want	_	VBP	VBP	_	0	root	_	_
3	him	_	PRP	PRP	_	2	dobj	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	be	_	VB	VB	_	2	xcomp	_	_
6	there	_	RB	RB	_	5	advmod	_	_
7	for	_	IN	IN	_	5	prep	_	_
8	his	_	PRP$	PRP$	_	9	poss	_	_
9	son	_	NN	NN	_	7	pobj	_	_
10	without	_	IN	IN	_	5	prep	_	_
11	needing	_	VBG	VBG	_	10	pcomp	_	_
12	me	_	PRP	PRP	_	11	dobj	_	_
13	too	_	RB	RB	_	11	advmod	_	_
14	.	_	.	.	_	2	punct	_	_

Oracle:
(n / need-01, ARG1, i / i)
(n / need-01, mod, t2 / too)
(t / there, beneficiary, s / son)
(w / want-01, ARG0, i / i)
(w / want-01, manner, n / need-01)

Input(Some(Graph((want-01 :manner (need-01 :mod too :polarity - :ARG0 he :ARG1 i) :ARG1 (he :location (there :beneficiary (son :poss he))) :ARG0 i),ArrayBuffer(Span(1,2,List(0),want,want-01,false), Span(10,11,List(1),needing,need-01,false), Span(12,13,List(2),too,too,false), Span(5,6,List(3),there,there,false), Span(8,9,List(4),son,son,false), Span(0,1,List(5),I,i,false)),Map(2 -> too, 5 -> i, 1 -> need-01, 4 -> son, 0 -> want-01, 3 -> there),Map(n -> need-01, w -> want-01, t -> there, s -> son, t2 -> too, i -> i))),[Ljava.lang.String;@351d00c0,Annotation([Ljava.lang.String;@2a3b5b47,[Ljava.lang.String;@55b699ef,[Ljava.lang.String;@35d019a3),Annotation([Ljava.lang.String;@689604d9,[Ljava.lang.String;@18078bef,[Ledu.cmu.lti.nlp.amr.Dependency;@799f10e1),Annotation([Ljava.lang.String;@4c371370,[Ljava.lang.String;@145f66e3,[Ljava.lang.String;@3023df74),Annotation([Ljava.lang.String;@313ac989,[Ljava.lang.String;@4562e04d,[Ledu.cmu.lti.nlp.amr.Entity;@2a65fe7c))
AMR:
(n / need-01, ARG0, s / son)
(n / need-01, ARG1, t2 / too)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, t / there)
(w / want-01, manner, n / need-01)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 145,536 microseconds
Sentence: But he has no one his family and him dont get along and have their own issues.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  But => contrast-01
Oracle Span 4:  family => family
Oracle Span 5:  get => get-18
Oracle Span 6:  has => have-03
Oracle Span 7:  have => have-03
Oracle Span 8:  he => he
Oracle Span 9:  issues => issue
Oracle Span 10:  no => -
Spans:
Span 7-8:  and => and
Span 12-13:  and => and
Span 0-1:  But => contrast-01
Span 6-7:  family => family
Span 10-11:  get => get-18
Span 2-3:  has => have-03
Span 13-14:  have => have-03
Span 1-2:  he => he
Span 16-17:  issues => issue
Span 3-4:  no => -

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 12-13:  and => and
Oracle Span 0-1:  But => contrast-01
Oracle Span 6-7:  family => family
Oracle Span 10-11:  get => get-18
Oracle Span 2-3:  has => have-03
Oracle Span 13-14:  have => have-03
Oracle Span 1-2:  he => he
Oracle Span 16-17:  issues => issue
Oracle Span 3-4:  no => -

Dependencies:
1	But	_	CC	CC	_	3	cc	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	has	_	VBZ	VBZ	_	0	root	_	_
4	no	_	DT	DT	_	5	neg	_	_
5	one	_	NN	NN	_	7	dep	_	_
6	his	_	PRP$	PRP$	_	7	poss	_	_
7	family	_	NN	NN	_	3	dep	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	him	_	PRP	PRP	_	10	dep	_	_
10	dont	_	JJ	JJ	_	7	conj	_	_
11	get	_	VB	VB	_	3	ccomp	_	_
12	along	_	RP	RP	_	11	prt	_	_
13	and	_	CC	CC	_	3	cc	_	_
14	have	_	VBP	VBP	_	3	conj	_	_
15	their	_	PRP$	PRP$	_	17	poss	_	_
16	own	_	JJ	JJ	_	17	amod	_	_
17	issues	_	NNS	NNS	_	14	dobj	_	_
18	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, g / get-18)
(a / and, op, h4 / have-03)
(a3 / and, op, f / family)
(c / contrast-01, ARG2, h / have-03)
(g / get-18, ARG1, f / family)
(g / get-18, polarity, - / -)
(h / have-03, ARG0, h2 / he)
(h4 / have-03, ARG0, a3 / and)
(h4 / have-03, ARG1, i / issue)

Input(Some(Graph((multi-sentence :snt1 (contrast-01 :ARG2 (have-03 :ARG1 no-one :ARG0 he)) :snt2 (and :op (have-03 :ARG1 issue :ARG0 (and :op he :op family)) :op (get-18 :ARG2 he :ARG1 (family :poss he) :polarity -))),ArrayBuffer(Span(3,4,List(0),no,-,false), Span(0,1,List(1),But,contrast-01,false), Span(2,3,List(2),has,have-03,false), Span(1,2,List(3),he,he,false), Span(7,8,List(4),and,and,false), Span(13,14,List(5),have,have-03,false), Span(16,17,List(6),issues,issue,false), Span(12,13,List(7),and,and,false), Span(10,11,List(8),get,get-18,false), Span(6,7,List(9),family,family,false)),Map(2 -> have-03, 5 -> have-03, 8 -> get-18, 7 -> and, 1 -> contrast-01, 4 -> and, 6 -> issue, 9 -> family, 0 -> -, 3 -> he),Map(h -> have-03, h2 -> he, a3 -> and, h4 -> have-03, g -> get-18, a -> and, i -> issue, - -> -, c -> contrast-01, f -> family))),[Ljava.lang.String;@4135c3b,Annotation([Ljava.lang.String;@6302bbb1,[Ljava.lang.String;@31304f14,[Ljava.lang.String;@34a3d150),Annotation([Ljava.lang.String;@2a4fb17b,[Ljava.lang.String;@5c6648b0,[Ledu.cmu.lti.nlp.amr.Dependency;@6f1de4c7),Annotation([Ljava.lang.String;@459e9125,[Ljava.lang.String;@128d2484,[Ljava.lang.String;@7cc0cdad),Annotation([Ljava.lang.String;@7c7b252e,[Ljava.lang.String;@4d5d943d,[Ledu.cmu.lti.nlp.amr.Entity;@368f2016))
AMR:
(a3 / and, op, h / have-03)
(a3 / and, op, h4 / have-03)
(a3 / and, time, f / family)
(c / contrast-01, ARG1, g / get-18)
(c / contrast-01, ARG2, h4 / have-03)
(g / get-18, ARG1, - / -)
(h / have-03, ARG0, h2 / he)
(h / have-03, ARG1, a / and)
(h4 / have-03, ARG1, i / issue)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
Decoded in 244,966 microseconds
Sentence: I don't want to be miserable anymore and the longer he is around the more miserable I will be.

Oracle Span 1:  anymore => anymore
Oracle Span 2:  around => around
Oracle Span 3:  he => he
Oracle Span 4:  I => i
Oracle Span 5:  longer => long
Oracle Span 6:  miserable => miserable
Oracle Span 7:  miserable => miserable
Oracle Span 8:  more => more
Oracle Span 9:  want => want-01
Spans:
Span 7-8:  anymore => anymore
Span 13-14:  around => around
Span 11-12:  he => he
Span 0-1:  I => i
Span 10-11:  longer => long
Span 6-7:  miserable => miserable
Span 16-17:  miserable => miserable
Span 15-16:  more => more
Span 3-4:  want => want-01

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 7-8:  anymore => anymore
Oracle Span 13-14:  around => around
Oracle Span 11-12:  he => he
Oracle Span 0-1:  I => i
Oracle Span 10-11:  longer => long
Oracle Span 6-7:  miserable => miserable
Oracle Span 16-17:  miserable => miserable
Oracle Span 15-16:  more => more
Oracle Span 3-4:  want => want-01

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	do	_	VBP	VBP	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	want	_	VB	VB	_	0	root	_	_
5	to	_	TO	TO	_	7	aux	_	_
6	be	_	VB	VB	_	7	cop	_	_
7	miserable	_	JJ	JJ	_	4	xcomp	_	_
8	anymore	_	RB	RB	_	7	advmod	_	_
9	and	_	CC	CC	_	4	cc	_	_
10	the	_	DT	DT	_	11	det	_	_
11	longer	_	JJR	JJR	_	17	dep	_	_
12	he	_	PRP	PRP	_	17	nsubj	_	_
13	is	_	VBZ	VBZ	_	17	cop	_	_
14	around	_	IN	IN	_	17	advmod	_	_
15	the	_	DT	DT	_	14	dep	_	_
16	more	_	RBR	RBR	_	17	advmod	_	_
17	miserable	_	JJ	JJ	_	20	advcl	_	_
18	I	_	PRP	PRP	_	20	nsubj	_	_
19	will	_	MD	MD	_	20	aux	_	_
20	be	_	VB	VB	_	4	conj	_	_
21	.	_	.	.	_	4	punct	_	_

Oracle:
(l / long, degree, m4 / more)
(m / miserable, domain, i / i)
(m2 / miserable, domain, i / i)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, m / miserable)
(w / want-01, time, a / anymore)

Input(Some(Graph((contrast-01 :ARG1 (want-01 :time anymore :ARG1 (miserable :domain i) :ARG0 i :polarity -) :ARG2 (miserable :condition (be-located-at-91 :ARG1 he :ARG2 around :time (long :degree more)) :degree more :domain i)),ArrayBuffer(Span(3,4,List(0),want,want-01,false), Span(7,8,List(1),anymore,anymore,false), Span(6,7,List(2),miserable,miserable,false), Span(0,1,List(3),I,i,false), Span(16,17,List(4),miserable,miserable,false), Span(11,12,List(5),he,he,false), Span(13,14,List(6),around,around,false), Span(10,11,List(7),longer,long,false), Span(15,16,List(8),more,more,false)),Map(2 -> miserable, 5 -> he, 8 -> more, 7 -> long, 1 -> anymore, 4 -> miserable, 6 -> around, 0 -> want-01, 3 -> i),Map(w -> want-01, h -> he, m2 -> miserable, m -> miserable, a -> anymore, m4 -> more, a2 -> around, i -> i, l -> long))),[Ljava.lang.String;@4c583ecf,Annotation([Ljava.lang.String;@692f203f,[Ljava.lang.String;@48f2bd5b,[Ljava.lang.String;@7b2bbc3),Annotation([Ljava.lang.String;@a1153bc,[Ljava.lang.String;@1aafa419,[Ledu.cmu.lti.nlp.amr.Dependency;@47eaca72),Annotation([Ljava.lang.String;@55141def,[Ljava.lang.String;@55182842,[Ljava.lang.String;@3270d194),Annotation([Ljava.lang.String;@235834f2,[Ljava.lang.String;@5656be13,[Ledu.cmu.lti.nlp.amr.Entity;@4218d6a3))
AMR:
(h / he, calendar, l / long)
(m / miserable, mod, a / anymore)
(m2 / miserable, degree, m4 / more)
(m2 / miserable, domain, h / he)
(m4 / more, calendar, a2 / around)
(w / want-01, ARG1, i / i)
(w / want-01, ARG2, m / miserable)
(w / want-01, ARG6, m2 / miserable)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.2.0
Decoded in 397,248 microseconds
Sentence: I dont want him to not be there for his son as he is a good father or he at least tries.

Oracle Span 1:  father => father
Oracle Span 2:  good => good
Oracle Span 3:  he => he
Oracle Span 4:  I => i
Oracle Span 5:  or => or
Oracle Span 6:  son => son
Oracle Span 7:  there => there
Oracle Span 8:  tries => try-01
Oracle Span 9:  want => want-01
Spans:
Span 16-17:  father => father
Span 15-16:  good => good
Span 12-13:  he => he
Span 0-1:  I => i
Span 17-18:  or => or
Span 10-11:  son => son
Span 7-8:  there => there
Span 21-22:  tries => try-01
Span 2-3:  want => want-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 16-17:  father => father
Oracle Span 15-16:  good => good
Oracle Span 12-13:  he => he
Oracle Span 0-1:  I => i
Oracle Span 17-18:  or => or
Oracle Span 10-11:  son => son
Oracle Span 7-8:  there => there
Oracle Span 21-22:  tries => try-01
Oracle Span 2-3:  want => want-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	dont	_	VBP	VBP	_	0	root	_	_
3	want	_	VB	VB	_	2	xcomp	_	_
4	him	_	PRP	PRP	_	3	dobj	_	_
5	to	_	TO	TO	_	7	aux	_	_
6	not	_	RB	RB	_	7	neg	_	_
7	be	_	VB	VB	_	3	xcomp	_	_
8	there	_	RB	RB	_	7	advmod	_	_
9	for	_	IN	IN	_	7	prep	_	_
10	his	_	PRP$	PRP$	_	11	poss	_	_
11	son	_	NN	NN	_	9	pobj	_	_
12	as	_	IN	IN	_	17	mark	_	_
13	he	_	PRP	PRP	_	17	nsubj	_	_
14	is	_	VBZ	VBZ	_	17	cop	_	_
15	a	_	DT	DT	_	17	det	_	_
16	good	_	JJ	JJ	_	17	amod	_	_
17	father	_	NN	NN	_	7	advcl	_	_
18	or	_	CC	CC	_	2	cc	_	_
19	he	_	PRP	PRP	_	22	nsubj	_	_
20	at	_	IN	IN	_	22	advmod	_	_
21	least	_	JJS	JJS	_	20	pobj	_	_
22	tries	_	VBZ	VBZ	_	2	conj	_	_
23	.	_	.	.	_	2	punct	_	_

Oracle:
(f / father, domain, h / he)
(f / father, mod, g / good)
(h / he, location, t / there)
(o / or, op, f / father)
(o / or, op, t2 / try-01)
(s / son, poss, h / he)
(t / there, beneficiary, s / son)
(t2 / try-01, ARG0, h / he)
(t2 / try-01, ARG1, f / father)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, h / he)

Input(Some(Graph((want-01 :ARG1-of (cause-01 :ARG0 (or :op (try-01 :manner at-least :ARG0 he :ARG1 father) :op (father :mod good :domain he))) :ARG1 (he :location (there :beneficiary (son :poss he) :polarity -)) :ARG0 i :polarity -),ArrayBuffer(Span(2,3,List(0),want,want-01,false), Span(17,18,List(1),or,or,false), Span(21,22,List(2),tries,try-01,false), Span(16,17,List(3),father,father,false), Span(15,16,List(4),good,good,false), Span(12,13,List(5),he,he,false), Span(7,8,List(6),there,there,false), Span(10,11,List(7),son,son,false), Span(0,1,List(8),I,i,false)),Map(2 -> try-01, 5 -> he, 8 -> i, 7 -> son, 1 -> or, 4 -> good, 6 -> there, 0 -> want-01, 3 -> father),Map(w -> want-01, h -> he, t -> there, s -> son, g -> good, t2 -> try-01, i -> i, f -> father, o -> or))),[Ljava.lang.String;@76505305,Annotation([Ljava.lang.String;@14cd1699,[Ljava.lang.String;@77888435,[Ljava.lang.String;@73a1e9a9),Annotation([Ljava.lang.String;@71d44a3,[Ljava.lang.String;@7b98f307,[Ledu.cmu.lti.nlp.amr.Dependency;@4802796d),Annotation([Ljava.lang.String;@34123d65,[Ljava.lang.String;@59474f18,[Ljava.lang.String;@65fb9ffc),Annotation([Ljava.lang.String;@3e694b3f,[Ljava.lang.String;@1bb5a082,[Ledu.cmu.lti.nlp.amr.Entity;@78691363))
AMR:
(f / father, mod, g / good)
(o / or, op, f / father)
(o / or, op, t2 / try-01)
(o / or, op, w / want-01)
(t2 / try-01, ARG0, s / son)
(t2 / try-01, ARG1, i / i)
(w / want-01, ARG0, h / he)
(w / want-01, ARG1, t / there)

WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.1
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.3.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.1
Decoded in 184,684 microseconds
Sentence: I do believe every child needs both parents weather they are together or not.

Oracle Span 1:  believe => believe-01
Oracle Span 2:  both => both
Oracle Span 3:  child => child
Oracle Span 4:  every => every
Oracle Span 5:  I => i
Oracle Span 6:  needs => need-01
Oracle Span 7:  or => or
Oracle Span 8:  parents => parent
Oracle Span 9:  together => together
Spans:
Span 2-3:  believe => believe-01
Span 6-7:  both => both
Span 4-5:  child => child
Span 3-4:  every => every
Span 0-1:  I => i
Span 5-6:  needs => need-01
Span 12-13:  or => or
Span 7-8:  parents => parent
Span 11-12:  together => together

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 2-3:  believe => believe-01
Oracle Span 6-7:  both => both
Oracle Span 4-5:  child => child
Oracle Span 3-4:  every => every
Oracle Span 0-1:  I => i
Oracle Span 5-6:  needs => need-01
Oracle Span 12-13:  or => or
Oracle Span 7-8:  parents => parent
Oracle Span 11-12:  together => together

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	do	_	VBP	VBP	_	0	root	_	_
3	believe	_	VBP	VBP	_	2	ccomp	_	_
4	every	_	DT	DT	_	5	det	_	_
5	child	_	NN	NN	_	6	nsubj	_	_
6	needs	_	VBZ	VBZ	_	3	ccomp	_	_
7	both	_	DT	DT	_	8	det	_	_
8	parents	_	NNS	NNS	_	9	nsubj	_	_
9	weather	_	VBP	VBP	_	6	ccomp	_	_
10	they	_	PRP	PRP	_	11	nsubj	_	_
11	are	_	VBP	VBP	_	9	ccomp	_	_
12	together	_	RB	RB	_	11	advmod	_	_
13	or	_	CC	CC	_	12	cc	_	_
14	not	_	RB	RB	_	12	conj	_	_
15	.	_	.	.	_	2	punct	_	_

Oracle:
(b / believe-01, ARG0, i / i)
(b / believe-01, ARG1, n / need-01)
(c / child, mod, e / every)
(n / need-01, ARG0, c / child)
(n / need-01, ARG1, p / parent)
(n / need-01, concession, o / or)
(o / or, op, t2 / together)
(p / parent, mod, b2 / both)
(t2 / together, domain, p / parent)

Input(Some(Graph((believe-01 :ARG1 (need-01 :concession (or :op (together :polarity - :domain parent) :op (together :domain parent)) :ARG1 (parent :mod both) :ARG0 (child :mod every)) :ARG0 i),ArrayBuffer(Span(2,3,List(0),believe,believe-01,false), Span(5,6,List(1),needs,need-01,false), Span(12,13,List(2),or,or,false), Span(11,12,List(3),together,together,false), Span(7,8,List(4),parents,parent,false), Span(6,7,List(5),both,both,false), Span(4,5,List(6),child,child,false), Span(3,4,List(7),every,every,false), Span(0,1,List(8),I,i,false)),Map(2 -> or, 5 -> both, 8 -> i, 7 -> every, 1 -> need-01, 4 -> parent, 6 -> child, 0 -> believe-01, 3 -> together),Map(e -> every, n -> need-01, b -> believe-01, b2 -> both, p -> parent, t2 -> together, i -> i, c -> child, o -> or))),[Ljava.lang.String;@41d477ed,Annotation([Ljava.lang.String;@3590fc5b,[Ljava.lang.String;@397fbdb,[Ljava.lang.String;@33d512c1),Annotation([Ljava.lang.String;@515c6049,[Ljava.lang.String;@639c2c1d,[Ledu.cmu.lti.nlp.amr.Dependency;@5fe94a96),Annotation([Ljava.lang.String;@443118b0,[Ljava.lang.String;@765d7657,[Ljava.lang.String;@74235045),Annotation([Ljava.lang.String;@618b19ad,[Ljava.lang.String;@2d3379b4,[Ledu.cmu.lti.nlp.amr.Entity;@30c15d8b))
AMR:
(b / believe-01, ARG0, t2 / together)
(b / believe-01, ARG1, n / need-01)
(b / believe-01, ARG6, i / i)
(c / child, mod, e / every)
(n / need-01, ARG0, c / child)
(n / need-01, ARG1, p / parent)
(o / or, op, t2 / together)
(p / parent, mod, b2 / both)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 291,213 microseconds
Sentence: But he thinks if he cant have me no one can.

Oracle Span 1:  But => contrast-01
Oracle Span 2:  can => possible
Oracle Span 3:  have => have-03
Oracle Span 4:  he => he
Oracle Span 5:  no => -
Oracle Span 6:  thinks => think-01
Spans:
Span 0-1:  But => contrast-01
Span 10-11:  can => possible
Span 6-7:  have => have-03
Span 1-2:  he => he
Span 8-9:  no => -
Span 2-3:  thinks => think-01

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 10-11:  can => possible
Oracle Span 6-7:  have => have-03
Oracle Span 1-2:  he => he
Oracle Span 8-9:  no => -
Oracle Span 2-3:  thinks => think-01

Dependencies:
1	But	_	CC	CC	_	3	cc	_	_
2	he	_	PRP	PRP	_	3	nsubj	_	_
3	thinks	_	VBZ	VBZ	_	0	root	_	_
4	if	_	IN	IN	_	7	mark	_	_
5	he	_	PRP	PRP	_	7	nsubj	_	_
6	cant	_	MD	MD	_	7	aux	_	_
7	have	_	VB	VB	_	3	advcl	_	_
8	me	_	PRP	PRP	_	7	dobj	_	_
9	no	_	DT	DT	_	10	neg	_	_
10	one	_	NN	NN	_	11	nsubj	_	_
11	can	_	MD	MD	_	7	dep	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(c / contrast-01, ARG2, t / think-01)
(h3 / have-03, ARG0, h / he)
(t / think-01, ARG0, h / he)
(t / think-01, ARG1, p / possible)

Input(Some(Graph((contrast-01 :ARG2 (think-01 :ARG1 (possible :condition (possible :polarity - :domain (have-03 :ARG0 he :ARG1 i)) :domain (have-03 :ARG0 no-one :ARG1 i)) :ARG0 he)),ArrayBuffer(Span(8,9,List(0),no,-,false), Span(0,1,List(1),But,contrast-01,false), Span(2,3,List(2),thinks,think-01,false), Span(10,11,List(3),can,possible,false), Span(6,7,List(4),have,have-03,false), Span(1,2,List(5),he,he,false)),Map(2 -> think-01, 5 -> he, 1 -> contrast-01, 4 -> have-03, 0 -> -, 3 -> possible),Map(h -> he, t -> think-01, p -> possible, - -> -, h3 -> have-03, c -> contrast-01))),[Ljava.lang.String;@5e0e82ae,Annotation([Ljava.lang.String;@6771beb3,[Ljava.lang.String;@51399530,[Ljava.lang.String;@6b2ea799),Annotation([Ljava.lang.String;@411f53a0,[Ljava.lang.String;@2b71e916,[Ledu.cmu.lti.nlp.amr.Dependency;@36fc695d),Annotation([Ljava.lang.String;@28701274,[Ljava.lang.String;@13c9d689,[Ljava.lang.String;@3754a4bf),Annotation([Ljava.lang.String;@62379589,[Ljava.lang.String;@4afcd809,[Ledu.cmu.lti.nlp.amr.Entity;@175c2241))
AMR:
(c / contrast-01, ARG1, t / think-01)
(h3 / have-03, ARG1, p / possible)
(h3 / have-03, ARG6, - / -)
(t / think-01, ARG0, h / he)
(t / think-01, ARG1, h3 / have-03)

WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 162,261 microseconds
Sentence: What do I do to move on with my life.

Oracle Span 1:  do => do-02
Oracle Span 2:  I => i
Oracle Span 3:  life => life
Oracle Span 4:  move => move-01
Spans:
Span 1-2:  do => do-02
Span 2-3:  I => i
Span 9-10:  life => life
Span 5-6:  move => move-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 1-2:  do => do-02
Oracle Span 2-3:  I => i
Oracle Span 9-10:  life => life
Oracle Span 5-6:  move => move-01

Dependencies:
1	What	_	WP	WP	_	4	dep	_	_
2	do	_	VBP	VBP	_	4	aux	_	_
3	I	_	PRP	PRP	_	4	nsubj	_	_
4	do	_	VB	VB	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	move	_	VB	VB	_	4	xcomp	_	_
7	on	_	RP	RP	_	6	prt	_	_
8	with	_	IN	IN	_	6	prep	_	_
9	my	_	PRP$	PRP$	_	10	poss	_	_
10	life	_	NN	NN	_	8	pobj	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(d / do-02, ARG0, i / i)
(l / life, poss, i / i)
(m / move-01, ARG0, i / i)
(m / move-01, ARG2, d / do-02)
(m / move-01, topic, l / life)

Input(Some(Graph((do-02 :ARG2-of (move-01 :topic (life :poss i) :ARG0 i) :ARG1 amr-unknown :ARG0 i),ArrayBuffer(Span(1,2,List(0),do,do-02,false), Span(5,6,List(1),move,move-01,false), Span(9,10,List(2),life,life,false), Span(2,3,List(3),I,i,false)),Map(2 -> life, 1 -> move-01, 0 -> do-02, 3 -> i),Map(m -> move-01, d -> do-02, i -> i, l -> life))),[Ljava.lang.String;@5bf0d49,Annotation([Ljava.lang.String;@5b7a5baa,[Ljava.lang.String;@776aec5c,[Ljava.lang.String;@1d296da),Annotation([Ljava.lang.String;@7c7a06ec,[Ljava.lang.String;@75d4a5c2,[Ledu.cmu.lti.nlp.amr.Dependency;@557caf28),Annotation([Ljava.lang.String;@408d971b,[Ljava.lang.String;@6c6cb480,[Ljava.lang.String;@3c46e67a),Annotation([Ljava.lang.String;@c730b35,[Ljava.lang.String;@206a70ef,[Ledu.cmu.lti.nlp.amr.Entity;@292b08d6))
AMR:
(d / do-02, ARG1, i / i)
(m / move-01, ARG0, i / i)
(m / move-01, ARG1, l / life)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 22,369 microseconds
Sentence: Your ex is threatening you using your son... bad, bad, bad.

Oracle Span 1:  bad => bad
Oracle Span 2:  ex => ex
Oracle Span 3:  son => son
Oracle Span 4:  threatening => threaten-01
Oracle Span 5:  using => use-01
Oracle Span 6:  you => you
Spans:
Span 9-10:  bad => bad
Span 1-2:  ex => ex
Span 7-8:  son => son
Span 3-4:  threatening => threaten-01
Span 5-6:  using => use-01
Span 4-5:  you => you

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 9-10:  bad => bad
Oracle Span 1-2:  ex => ex
Oracle Span 7-8:  son => son
Oracle Span 3-4:  threatening => threaten-01
Oracle Span 5-6:  using => use-01
Oracle Span 4-5:  you => you

Dependencies:
1	Your	_	PRP$	PRP$	_	2	poss	_	_
2	ex	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	aux	_	_
4	threatening	_	VBG	VBG	_	0	root	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	using	_	VBG	VBG	_	4	vmod	_	_
7	your	_	PRP$	PRP$	_	8	poss	_	_
8	son	_	NN	NN	_	6	dobj	_	_
9	...	_	:	:	_	8	punct	_	_
10	bad	_	JJ	JJ	_	14	amod	_	_
11	,	_	,	,	_	14	punct	_	_
12	bad	_	JJ	JJ	_	14	amod	_	_
13	,	_	,	,	_	14	punct	_	_
14	bad	_	JJ	JJ	_	8	amod	_	_
15	.	_	.	.	_	4	punct	_	_

Oracle:
(b / bad, domain, t / threaten-01)
(e / ex, poss, y / you)
(s / son, poss, y / you)
(t / threaten-01, ARG0, e / ex)
(t / threaten-01, ARG2, y / you)
(u / use-01, ARG0, e / ex)
(u / use-01, ARG1, s / son)
(u / use-01, ARG2, t / threaten-01)

Input(Some(Graph((bad :domain (threaten-01 :ARG2-of (use-01 :ARG1 (son :poss you) :ARG0 ex) :ARG2 you :ARG0 (ex :poss you)) :degree very),ArrayBuffer(Span(9,10,List(0),bad,bad,false), Span(3,4,List(1),threatening,threaten-01,false), Span(5,6,List(2),using,use-01,false), Span(7,8,List(3),son,son,false), Span(4,5,List(4),you,you,false), Span(1,2,List(5),ex,ex,false)),Map(2 -> use-01, 5 -> ex, 1 -> threaten-01, 4 -> you, 0 -> bad, 3 -> son),Map(e -> ex, t -> threaten-01, b -> bad, s -> son, y -> you, u -> use-01))),[Ljava.lang.String;@22555ebf,Annotation([Ljava.lang.String;@36ebc363,[Ljava.lang.String;@45752059,[Ljava.lang.String;@34e9fd99),Annotation([Ljava.lang.String;@3c41ed1d,[Ljava.lang.String;@54d9d12d,[Ledu.cmu.lti.nlp.amr.Dependency;@38425407),Annotation([Ljava.lang.String;@43bc63a3,[Ljava.lang.String;@702657cc,[Ljava.lang.String;@6a6cb05c),Annotation([Ljava.lang.String;@40a4337a,[Ljava.lang.String;@6025e1b6,[Ledu.cmu.lti.nlp.amr.Entity;@22ff4249))
AMR:
(t / threaten-01, ARG0, e / ex)
(t / threaten-01, ARG1, u / use-01)
(u / use-01, ARG0, y / you)
(u / use-01, ARG1, s / son)
(u / use-01, ARG6, b / bad)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 170,491 microseconds
Sentence: You can't give in to that or it will just escalate.

Oracle Span 1:  escalate => escalate-01
Oracle Span 2:  give => give-09
Oracle Span 3:  it => it
Oracle Span 4:  just => just
Oracle Span 5:  that => that
Oracle Span 6:  You => you
Spans:
Span 11-12:  escalate => escalate-01
Span 3-4:  give => give-09
Span 8-9:  it => it
Span 10-11:  just => just
Span 6-7:  that => that
Span 0-1:  You => you

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 11-12:  escalate => escalate-01
Oracle Span 3-4:  give => give-09
Oracle Span 8-9:  it => it
Oracle Span 10-11:  just => just
Oracle Span 6-7:  that => that
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	4	nsubj	_	_
2	ca	_	MD	MD	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	give	_	VB	VB	_	0	root	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	to	_	TO	TO	_	5	pcomp	_	_
7	that	_	DT	DT	_	6	pobj	_	_
8	or	_	CC	CC	_	4	cc	_	_
9	it	_	PRP	PRP	_	12	nsubj	_	_
10	will	_	MD	MD	_	12	aux	_	_
11	just	_	RB	RB	_	12	advmod	_	_
12	escalate	_	VB	VB	_	4	conj	_	_
13	.	_	.	.	_	4	punct	_	_

Oracle:
(e / escalate-01, ARG1, i / it)
(e / escalate-01, mod, j / just)
(g2 / give-09, ARG0, y / you)
(g2 / give-09, ARG1, t / that)

Input(Some(Graph((obligate-01 :ARG1 (give-09 :ARG1 that :ARG0 you :polarity -) :ARG1-of (cause-01 :ARG0 (escalate-01 :condition (give-09 :ARG0 you :ARG1 that) :mod just :ARG1 it))),ArrayBuffer(Span(3,4,List(0),give,give-09,false), Span(6,7,List(1),that,that,false), Span(0,1,List(2),You,you,false), Span(11,12,List(3),escalate,escalate-01,false), Span(10,11,List(4),just,just,false), Span(8,9,List(5),it,it,false)),Map(2 -> you, 5 -> it, 1 -> that, 4 -> just, 0 -> give-09, 3 -> escalate-01),Map(e -> escalate-01, t -> that, j -> just, y -> you, g2 -> give-09, i -> it))),[Ljava.lang.String;@2d1ef81a,Annotation([Ljava.lang.String;@4c402120,[Ljava.lang.String;@327514f,[Ljava.lang.String;@5b12b668),Annotation([Ljava.lang.String;@1165b38,[Ljava.lang.String;@4c12331b,[Ledu.cmu.lti.nlp.amr.Dependency;@7586beff),Annotation([Ljava.lang.String;@3b69e7d1,[Ljava.lang.String;@815b41f,[Ljava.lang.String;@5542c4ed),Annotation([Ljava.lang.String;@1573f9fc,[Ljava.lang.String;@6150c3ec,[Ledu.cmu.lti.nlp.amr.Entity;@44c03695))
AMR:
(e / escalate-01, ARG0, i / it)
(e / escalate-01, ARG1, y / you)
(g2 / give-09, ARG0, y / you)
(g2 / give-09, ARG1, t / that)
(j / just, domain, i / it)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 53,377 microseconds
Sentence: You have a right to live your own life and be happy, so don't cave to his threats.

Oracle Span 1:  and => and
Oracle Span 2:  cave => cave-00
Oracle Span 3:  happy => happy
Oracle Span 4:  life => life
Oracle Span 5:  live => live-01
Oracle Span 6:  threats => threaten-01
Oracle Span 7:  You => you
Spans:
Span 9-10:  and => and
Span 16-17:  cave => cave-00
Span 11-12:  happy => happy
Span 8-9:  life => life
Span 5-6:  live => live-01
Span 19-20:  threats => threaten-01
Span 0-1:  You => you

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 16-17:  cave => cave-00
Oracle Span 11-12:  happy => happy
Oracle Span 8-9:  life => life
Oracle Span 5-6:  live => live-01
Oracle Span 19-20:  threats => threaten-01
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	2	nsubj	_	_
2	have	_	VBP	VBP	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	right	_	NN	NN	_	2	dobj	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	live	_	VB	VB	_	4	vmod	_	_
7	your	_	PRP$	PRP$	_	9	poss	_	_
8	own	_	JJ	JJ	_	9	amod	_	_
9	life	_	NN	NN	_	6	dobj	_	_
10	and	_	CC	CC	_	6	cc	_	_
11	be	_	VB	VB	_	12	cop	_	_
12	happy	_	JJ	JJ	_	6	conj	_	_
13	,	_	,	,	_	12	punct	_	_
14	so	_	IN	IN	_	17	mark	_	_
15	do	_	VBP	VBP	_	17	aux	_	_
16	n't	_	RB	RB	_	17	neg	_	_
17	cave	_	VB	VB	_	12	advcl	_	_
18	to	_	TO	TO	_	17	prep	_	_
19	his	_	PRP$	PRP$	_	20	poss	_	_
20	threats	_	NNS	NNS	_	18	pobj	_	_
21	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, h2 / happy)
(a / and, op, l / live-01)
(c2 / cave-00, ARG0, y / you)
(c2 / cave-00, ARG1, t / threaten-01)
(h2 / happy, domain, y / you)
(l / live-01, ARG0, y / you)
(l / live-01, ARG1, l2 / life)
(l2 / life, poss, y / you)

Input(Some(Graph((entitle-01 :ARG1 (and :op (happy :domain you) :op (live-01 :ARG1 (life :poss you) :ARG0 you)) :ARG2 you :ARG0-of (cause-01 :ARG1 (cave-00 :ARG1 (threaten-01 :ARG0 he) :polarity - :ARG0 you))),ArrayBuffer(Span(9,10,List(0),and,and,false), Span(11,12,List(1),happy,happy,false), Span(5,6,List(2),live,live-01,false), Span(8,9,List(3),life,life,false), Span(0,1,List(4),You,you,false), Span(16,17,List(5),cave,cave-00,false), Span(19,20,List(6),threats,threaten-01,false)),Map(2 -> live-01, 5 -> cave-00, 1 -> happy, 4 -> you, 6 -> threaten-01, 0 -> and, 3 -> life),Map(t -> threaten-01, h2 -> happy, y -> you, a -> and, l2 -> life, l -> live-01, c2 -> cave-00))),[Ljava.lang.String;@7e6f74c,Annotation([Ljava.lang.String;@dd05255,[Ljava.lang.String;@6a78afa0,[Ljava.lang.String;@2f4948e4),Annotation([Ljava.lang.String;@1f2586d6,[Ljava.lang.String;@10683d9d,[Ledu.cmu.lti.nlp.amr.Dependency;@3fc2959f),Annotation([Ljava.lang.String;@5aa9e4eb,[Ljava.lang.String;@6989da5e,[Ljava.lang.String;@385c9627),Annotation([Ljava.lang.String;@139982de,[Ljava.lang.String;@682b2fa,[Ledu.cmu.lti.nlp.amr.Entity;@217ed35e))
AMR:
(a / and, op, h2 / happy)
(a / and, op, l / live-01)
(c2 / cave-00, ARG1, h2 / happy)
(c2 / cave-00, ARG2, t / threaten-01)
(l / live-01, ARG1, l2 / life)
(t / threaten-01, ARG1, y / you)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
Decoded in 194,964 microseconds
Sentence: If he really loves his son, he'll see him regardless, but this is just a typical control method that people like him use.

Oracle Span 1:  but => contrast-01
Oracle Span 2:  control => control-01
Oracle Span 3:  he => he
Oracle Span 4:  just => just
Oracle Span 5:  loves => love-01
Oracle Span 6:  method => method
Oracle Span 7:  really => real
Oracle Span 8:  regardless => regardless
Oracle Span 9:  see => see-01
Oracle Span 10:  son => son
Oracle Span 11:  this => this
Oracle Span 12:  typical => typical
Oracle Span 13:  use => use-01
Spans:
Span 13-14:  but => contrast-01
Span 19-20:  control => control-01
Span 1-2:  he => he
Span 16-17:  just => just
Span 3-4:  loves => love-01
Span 20-21:  method => method
Span 2-3:  really => real
Span 11-12:  regardless => regardless
Span 9-10:  see => see-01
Span 5-6:  son => son
Span 14-15:  this => this
Span 18-19:  typical => typical
Span 25-26:  use => use-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 13-14:  but => contrast-01
Oracle Span 19-20:  control => control-01
Oracle Span 1-2:  he => he
Oracle Span 16-17:  just => just
Oracle Span 3-4:  loves => love-01
Oracle Span 20-21:  method => method
Oracle Span 2-3:  really => real
Oracle Span 11-12:  regardless => regardless
Oracle Span 9-10:  see => see-01
Oracle Span 5-6:  son => son
Oracle Span 14-15:  this => this
Oracle Span 18-19:  typical => typical
Oracle Span 25-26:  use => use-01

Dependencies:
1	If	_	IN	IN	_	4	mark	_	_
2	he	_	PRP	PRP	_	4	nsubj	_	_
3	really	_	RB	RB	_	4	advmod	_	_
4	loves	_	VBZ	VBZ	_	10	advcl	_	_
5	his	_	PRP$	PRP$	_	6	poss	_	_
6	son	_	NN	NN	_	4	dobj	_	_
7	,	_	,	,	_	10	punct	_	_
8	he	_	PRP	PRP	_	10	nsubj	_	_
9	'll	_	MD	MD	_	10	aux	_	_
10	see	_	VB	VB	_	0	root	_	_
11	him	_	PRP	PRP	_	10	dobj	_	_
12	regardless	_	RB	RB	_	10	advmod	_	_
13	,	_	,	,	_	10	punct	_	_
14	but	_	CC	CC	_	10	cc	_	_
15	this	_	DT	DT	_	21	nsubj	_	_
16	is	_	VBZ	VBZ	_	21	cop	_	_
17	just	_	RB	RB	_	21	advmod	_	_
18	a	_	DT	DT	_	21	det	_	_
19	typical	_	JJ	JJ	_	21	amod	_	_
20	control	_	NN	NN	_	21	nn	_	_
21	method	_	NN	NN	_	10	conj	_	_
22	that	_	IN	IN	_	24	mark	_	_
23	people	_	NNS	NNS	_	24	nsubj	_	_
24	like	_	VBP	VBP	_	21	ccomp	_	_
25	him	_	PRP	PRP	_	26	nsubj	_	_
26	use	_	VBP	VBP	_	24	ccomp	_	_
27	.	_	.	.	_	10	punct	_	_

Oracle:
(c / contrast-01, ARG1, s / see-01)
(c / contrast-01, ARG2, m / method)
(l / love-01, ARG0, h / he)
(l / love-01, ARG1, s2 / son)
(l / love-01, manner, r2 / real)
(m / method, domain, t2 / this)
(m / method, mod, j / just)
(m / method, mod, t / typical)
(m / method, purpose, c2 / control-01)
(s / see-01, ARG0, h / he)
(s / see-01, ARG1, s2 / son)
(s / see-01, concession, r / regardless)
(s / see-01, condition, l / love-01)
(s2 / son, poss, h / he)
(u / use-01, ARG1, m / method)

Input(Some(Graph((contrast-01 :ARG2 (method :domain this :ARG1-of (use-01 :ARG0 (person :example he)) :mod just :mod typical :purpose control-01) :ARG1 (see-01 :condition (love-01 :manner real :ARG1 (son :poss he) :ARG0 he) :concession regardless :ARG0 he :ARG1 son)),ArrayBuffer(Span(13,14,List(0),but,contrast-01,false), Span(20,21,List(1),method,method,false), Span(14,15,List(2),this,this,false), Span(25,26,List(3),use,use-01,false), Span(16,17,List(4),just,just,false), Span(18,19,List(5),typical,typical,false), Span(19,20,List(6),control,control-01,false), Span(9,10,List(7),see,see-01,false), Span(3,4,List(8),loves,love-01,false), Span(5,6,List(9),son,son,false), Span(11,12,List(10),regardless,regardless,false), Span(1,2,List(11),he,he,false), Span(2,3,List(12),really,real,false)),Map(2 -> this, 5 -> typical, 12 -> real, 8 -> love-01, 7 -> see-01, 1 -> method, 4 -> just, 11 -> he, 6 -> control-01, 9 -> son, 0 -> contrast-01, 10 -> regardless, 3 -> use-01),Map(h -> he, s2 -> son, t -> typical, j -> just, s -> see-01, m -> method, r2 -> real, t2 -> this, r -> regardless, c -> contrast-01, l -> love-01, u -> use-01, c2 -> control-01))),[Ljava.lang.String;@7dcf94f8,Annotation([Ljava.lang.String;@229f66ed,[Ljava.lang.String;@31190526,[Ljava.lang.String;@662ac478),Annotation([Ljava.lang.String;@6743e411,[Ljava.lang.String;@3eb25e1a,[Ledu.cmu.lti.nlp.amr.Dependency;@477b4cdf),Annotation([Ljava.lang.String;@77c2494c,[Ljava.lang.String;@f5958c9,[Ljava.lang.String;@233795b6),Annotation([Ljava.lang.String;@3eb738bb,[Ljava.lang.String;@5bda8e08,[Ledu.cmu.lti.nlp.amr.Entity;@1e800aaa))
AMR:
(c / contrast-01, ARG1, s / see-01)
(c / contrast-01, ARG2, m / method)
(c2 / control-01, ARG0, m / method)
(c2 / control-01, ARG1, t / typical)
(l / love-01, ARG0, h / he)
(l / love-01, ARG1, s2 / son)
(l / love-01, manner, r2 / real)
(s / see-01, ARG1, l / love-01)
(s / see-01, ARG6, r / regardless)
(t2 / this, mod, m / method)
(t2 / this, time, j / just)
(u / use-01, ARG1, m / method)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.4
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.2.1
Decoded in 346,616 microseconds
Sentence: Others say things like, "I'm going to kill myself if you leave me"... get it?

Oracle Span 1:  get => get-12
Oracle Span 2:  I => i
Oracle Span 3:  it => it
Oracle Span 4:  kill => kill-01
Oracle Span 5:  leave => leave-01
Oracle Span 6:  Others => (person :mod other)
Oracle Span 7:  say => say-01
Oracle Span 8:  things => thing
Oracle Span 9:  you => you
Spans:
Span 18-19:  get => get-12
Span 6-7:  I => i
Span 19-20:  it => it
Span 10-11:  kill => kill-01
Span 14-15:  leave => leave-01
Span 0-1:  Others => (person :mod other)
Span 1-2:  say => say-01
Span 2-3:  things => thing
Span 13-14:  you => you

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 18-19:  get => get-12
Oracle Span 6-7:  I => i
Oracle Span 19-20:  it => it
Oracle Span 10-11:  kill => kill-01
Oracle Span 14-15:  leave => leave-01
Oracle Span 0-1:  Others => (person :mod other)
Oracle Span 1-2:  say => say-01
Oracle Span 2-3:  things => thing
Oracle Span 13-14:  you => you

Dependencies:
1	Others	_	NNS	NNS	_	2	nsubj	_	_
2	say	_	VBP	VBP	_	0	root	_	_
3	things	_	NNS	NNS	_	4	nsubj	_	_
4	like	_	VBP	VBP	_	2	ccomp	_	_
5	,	_	,	,	_	4	punct	_	_
6	"	_	``	``	_	4	punct	_	_
7	I	_	PRP	PRP	_	9	nsubj	_	_
8	'm	_	VBP	VBP	_	9	aux	_	_
9	going	_	VBG	VBG	_	4	ccomp	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	kill	_	VB	VB	_	9	xcomp	_	_
12	myself	_	PRP	PRP	_	11	dobj	_	_
13	if	_	IN	IN	_	15	mark	_	_
14	you	_	PRP	PRP	_	15	nsubj	_	_
15	leave	_	VBP	VBP	_	11	advcl	_	_
16	me	_	PRP	PRP	_	15	dobj	_	_
17	"	_	''	''	_	4	punct	_	_
18	...	_	:	:	_	2	punct	_	_
19	get	_	VB	VB	_	2	parataxis	_	_
20	it	_	PRP	PRP	_	19	dobj	_	_
21	?	_	.	.	_	2	punct	_	_

Oracle:
(g / get-12, ARG0, i / it)
(k / kill-01, ARG0, i2 / i)
(k / kill-01, ARG1, i2 / i)
(k / kill-01, condition, l / leave-01)
(l / leave-01, ARG0, y2 / you)
(l / leave-01, ARG1, i2 / i)
(p / person, mod, o / other)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, t / thing)

Input(Some(Graph((multi-sentence :snt1 (say-01 :ARG1 (thing :ARG1-of (resemble-01 :ARG2 (kill-01 :condition (leave-01 :ARG0 you :ARG1 i) :ARG0 i :ARG1 i))) :ARG0 (person :mod other)) :snt2 (get-12 :ARG1 you :ARG0 it :mode interrogative)),ArrayBuffer(Span(1,2,List(0),say,say-01,false), Span(2,3,List(1),things,thing,false), Span(10,11,List(2),kill,kill-01,false), Span(14,15,List(3),leave,leave-01,false), Span(13,14,List(4),you,you,false), Span(6,7,List(5),I,i,false), Span(0,1,List(6, 7),Others,(person :mod other),false), Span(18,19,List(8),get,get-12,false), Span(19,20,List(9),it,it,false)),Map(2 -> kill-01, 5 -> i, 8 -> get-12, 7 -> other, 1 -> thing, 4 -> you, 6 -> person, 9 -> it, 0 -> say-01, 3 -> leave-01),Map(k -> kill-01, t -> thing, s -> say-01, g -> get-12, p -> person, i2 -> i, i -> it, l -> leave-01, o -> other, y2 -> you))),[Ljava.lang.String;@185a6e9,Annotation([Ljava.lang.String;@6f03482,[Ljava.lang.String;@9d5509a,[Ljava.lang.String;@179ece50),Annotation([Ljava.lang.String;@3b0090a4,[Ljava.lang.String;@3cd3e762,[Ledu.cmu.lti.nlp.amr.Dependency;@1fa121e2),Annotation([Ljava.lang.String;@7eac9008,[Ljava.lang.String;@4116aac9,[Ljava.lang.String;@62ddbd7e),Annotation([Ljava.lang.String;@74e52ef6,[Ljava.lang.String;@6ed3ccb2,[Ledu.cmu.lti.nlp.amr.Entity;@1a677343))
AMR:
(g / get-12, ARG1, i / it)
(k / kill-01, ARG0, i2 / i)
(k / kill-01, ARG1, p / person)
(k / kill-01, time, l / leave-01)
(l / leave-01, ARG0, y2 / you)
(l / leave-01, ARG1, g / get-12)
(p / person, mod, o / other)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 459,130 microseconds
Sentence: Date.

Oracle Span 1:  Date => date-02
Spans:
Span 0-1:  Date => date-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Date => date-02

Dependencies:
1	Date	_	VB	VB	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_

Oracle:


Input(Some(Graph((date-02 :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),Date,date-02,false)),Map(0 -> date-02),Map(d -> date-02))),[Ljava.lang.String;@15de0b3c,Annotation([Ljava.lang.String;@489115ef,[Ljava.lang.String;@3857f613,[Ljava.lang.String;@198b6731),Annotation([Ljava.lang.String;@7c6908d7,[Ljava.lang.String;@3c9754d8,[Ledu.cmu.lti.nlp.amr.Dependency;@3bf7ca37),Annotation([Ljava.lang.String;@79079097,[Ljava.lang.String;@4d1c00d0,[Ljava.lang.String;@4b2bac3f),Annotation([Ljava.lang.String;@4e08711f,[Ljava.lang.String;@bcec361,[Ledu.cmu.lti.nlp.amr.Entity;@26794848))
AMR:


Decoded in 3,202 microseconds
Sentence: Meet all kinds of people.

Oracle Span 1:  all => all
Oracle Span 2:  kinds => kind
Oracle Span 3:  Meet => meet-03
Spans:
Span 1-2:  all => all
Span 2-3:  kinds => kind
Span 0-1:  Meet => meet-03

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  all => all
Oracle Span 2-3:  kinds => kind
Oracle Span 0-1:  Meet => meet-03

Dependencies:
1	Meet	_	VB	VB	_	0	root	_	_
2	all	_	DT	DT	_	3	det	_	_
3	kinds	_	NNS	NNS	_	1	dobj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	people	_	NNS	NNS	_	4	pobj	_	_
6	.	_	.	.	_	1	punct	_	_

Oracle:
(k / kind, mod, a / all)
(m / meet-03, ARG1, k / kind)

Input(Some(Graph((meet-03 :ARG1 (kind :mod all :mod person) :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),Meet,meet-03,false), Span(2,3,List(1),kinds,kind,false), Span(1,2,List(2),all,all,false)),Map(2 -> all, 1 -> kind, 0 -> meet-03),Map(k -> kind, m -> meet-03, a -> all))),[Ljava.lang.String;@302552ec,Annotation([Ljava.lang.String;@3d285d7e,[Ljava.lang.String;@40005471,[Ljava.lang.String;@2cd76f31),Annotation([Ljava.lang.String;@367ffa75,[Ljava.lang.String;@49438269,[Ledu.cmu.lti.nlp.amr.Dependency;@ba2f4ec),Annotation([Ljava.lang.String;@1c1bbc4e,[Ljava.lang.String;@55fe41ea,[Ljava.lang.String;@fbd1f6),Annotation([Ljava.lang.String;@1ce24091,[Ljava.lang.String;@5dda768f,[Ledu.cmu.lti.nlp.amr.Entity;@7a8c8dcf))
AMR:
(k / kind, quant, a / all)
(m / meet-03, ARG1, k / kind)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
Decoded in 10,636 microseconds
Sentence: Do what you want.

Oracle Span 1:  Do => do-02
Oracle Span 2:  want => (thing :ARG1-of want-01)
Oracle Span 3:  you => you
Spans:
Span 0-1:  Do => do-02
Span 3-4:  want => (thing :ARG1-of want-01)
Span 2-3:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Do => do-02
Oracle Span 3-4:  want => (thing :ARG1-of want-01)
Oracle Span 2-3:  you => you

Dependencies:
1	Do	_	VB	VB	_	0	root	_	_
2	what	_	WP	WP	_	4	dobj	_	_
3	you	_	PRP	PRP	_	4	nsubj	_	_
4	want	_	VBP	VBP	_	1	ccomp	_	_
5	.	_	.	.	_	1	punct	_	_

Oracle:
(d / do-02, ARG0, y / you)
(d / do-02, ARG1, t / thing)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, t / thing)

Input(Some(Graph((do-02 :ARG1 (thing :ARG1-of (want-01 :ARG0 you)) :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),Do,do-02,false), Span(3,4,List(1, 2),want,(thing :ARG1-of want-01),false), Span(2,3,List(3),you,you,false)),Map(2 -> want-01, 1 -> thing, 0 -> do-02, 3 -> you),Map(w -> want-01, t -> thing, d -> do-02, y -> you))),[Ljava.lang.String;@24269709,Annotation([Ljava.lang.String;@2aceadd4,[Ljava.lang.String;@24aed80c,[Ljava.lang.String;@3a52dba3),Annotation([Ljava.lang.String;@2a5c8d3f,[Ljava.lang.String;@752325ad,[Ledu.cmu.lti.nlp.amr.Dependency;@279fedbd),Annotation([Ljava.lang.String;@b3ca52e,[Ljava.lang.String;@45c7e403,[Ljava.lang.String;@2925bf5b),Annotation([Ljava.lang.String;@710f4dc7,[Ljava.lang.String;@1ff4931d,[Ledu.cmu.lti.nlp.amr.Entity;@65e98b1c))
AMR:
(d / do-02, ARG1, t / thing)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 13,128 microseconds
Sentence: If the price is, he voluntarily walks out of both of your lives, you're probably better off without him.

Oracle Span 1:  better => good
Oracle Span 2:  both => both
Oracle Span 3:  he => he
Oracle Span 4:  lives => life
Oracle Span 5:  out => out
Oracle Span 6:  price => price-01
Oracle Span 7:  probably => probable
Oracle Span 8:  voluntarily => volunteer-01
Oracle Span 9:  walks => walk-01
Oracle Span 10:  you => you
Spans:
Span 18-19:  better => good
Span 10-11:  both => both
Span 5-6:  he => he
Span 13-14:  lives => life
Span 8-9:  out => out
Span 2-3:  price => price-01
Span 17-18:  probably => probable
Span 6-7:  voluntarily => volunteer-01
Span 7-8:  walks => walk-01
Span 15-16:  you => you

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Oracle Span 18-19:  better => good
Oracle Span 10-11:  both => both
Oracle Span 5-6:  he => he
Oracle Span 13-14:  lives => life
Oracle Span 8-9:  out => out
Oracle Span 2-3:  price => price-01
Oracle Span 17-18:  probably => probable
Oracle Span 6-7:  voluntarily => volunteer-01
Oracle Span 7-8:  walks => walk-01
Oracle Span 15-16:  you => you

Dependencies:
1	If	_	IN	IN	_	4	mark	_	_
2	the	_	DT	DT	_	3	det	_	_
3	price	_	NN	NN	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	19	advcl	_	_
5	,	_	,	,	_	4	punct	_	_
6	he	_	PRP	PRP	_	8	nsubj	_	_
7	voluntarily	_	RB	RB	_	8	advmod	_	_
8	walks	_	VBZ	VBZ	_	4	ccomp	_	_
9	out	_	RP	RP	_	8	prt	_	_
10	of	_	IN	IN	_	8	prep	_	_
11	both	_	DT	DT	_	10	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	your	_	PRP$	PRP$	_	14	poss	_	_
14	lives	_	NNS	NNS	_	12	pobj	_	_
15	,	_	,	,	_	19	punct	_	_
16	you	_	PRP	PRP	_	19	nsubj	_	_
17	're	_	VBP	VBP	_	19	cop	_	_
18	probably	_	RB	RB	_	19	advmod	_	_
19	better	_	JJR	JJR	_	0	root	_	_
20	off	_	RP	RP	_	19	dep	_	_
21	without	_	IN	IN	_	19	prep	_	_
22	him	_	PRP	PRP	_	21	pobj	_	_
23	.	_	.	.	_	19	punct	_	_

Oracle:
(g / good, condition, p2 / price-01)
(g / good, mod, p / probable)
(g / good, prep-without, h2 / he)
(l / life, poss, y2 / you)
(o / out, op, l / life)
(p2 / price-01, ARG2, w / walk-01)
(v / volunteer-01, ARG1, w / walk-01)
(w / walk-01, direction, o / out)
(y2 / you, mod, b / both)

Input(Some(Graph((good :prep-without he :condition (price-01 :ARG2 (walk-01 :ARG1-of (volunteer-01 :ARG0 he) :direction (out :op (life :poss (you :mod both))) :ARG0 he)) :mod probable :domain you :degree more),ArrayBuffer(Span(18,19,List(0),better,good,false), Span(5,6,List(1),he,he,false), Span(2,3,List(2),price,price-01,false), Span(7,8,List(3),walks,walk-01,false), Span(8,9,List(4),out,out,false), Span(13,14,List(5),lives,life,false), Span(15,16,List(6),you,you,false), Span(10,11,List(7),both,both,false), Span(6,7,List(8),voluntarily,volunteer-01,false), Span(17,18,List(9),probably,probable,false)),Map(2 -> price-01, 5 -> life, 8 -> volunteer-01, 7 -> both, 1 -> he, 4 -> out, 6 -> you, 9 -> probable, 0 -> good, 3 -> walk-01),Map(w -> walk-01, h2 -> he, b -> both, p2 -> price-01, v -> volunteer-01, p -> probable, g -> good, l -> life, o -> out, y2 -> you))),[Ljava.lang.String;@61322f9d,Annotation([Ljava.lang.String;@6ad82709,[Ljava.lang.String;@510f3d34,[Ljava.lang.String;@7817fd62),Annotation([Ljava.lang.String;@8297b3a,[Ljava.lang.String;@2362f559,[Ledu.cmu.lti.nlp.amr.Dependency;@b2c9a9c),Annotation([Ljava.lang.String;@4c178a76,[Ljava.lang.String;@fa4c865,[Ljava.lang.String;@3bd82cf5),Annotation([Ljava.lang.String;@544fa968,[Ljava.lang.String;@247bddad,[Ledu.cmu.lti.nlp.amr.Entity;@d35dea7))
AMR:
(g / good, mod, p / probable)
(l / life, mod, b / both)
(p / probable, domain, y2 / you)
(p2 / price-01, ARG1, g / good)
(v / volunteer-01, ARG1, w / walk-01)
(w / walk-01, ARG0, h2 / he)
(w / walk-01, ARG1, p2 / price-01)
(w / walk-01, ARG5, o / out)
(w / walk-01, ARG6, b / both)

WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.1
WARNING: makeIds can't find span Id: 0.3.0.1.0
WARNING: makeIds can't find span Id: 0.3.0.1.0.0
WARNING: makeIds can't find span Id: 0.3.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.3.0.2
WARNING: makeIds can't find span Id: 0.2
Decoded in 370,661 microseconds
Sentence: I'd agree - one other thing it is none of his business whether you date or not.

Oracle Span 1:  agree => agree-01
Oracle Span 2:  business => business
Oracle Span 3:  date => date-02
Oracle Span 4:  I => i
Oracle Span 5:  one => 1
Oracle Span 6:  or => or
Oracle Span 7:  other => other
Oracle Span 8:  thing => thing
Oracle Span 9:  you => you
Spans:
Span 2-3:  agree => agree-01
Span 12-13:  business => business
Span 15-16:  date => date-02
Span 0-1:  I => i
Span 4-5:  one => 1
Span 16-17:  or => or
Span 5-6:  other => other
Span 6-7:  thing => thing
Span 14-15:  you => you

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 2-3:  agree => agree-01
Oracle Span 12-13:  business => business
Oracle Span 15-16:  date => date-02
Oracle Span 0-1:  I => i
Oracle Span 4-5:  one => 1
Oracle Span 16-17:  or => or
Oracle Span 5-6:  other => other
Oracle Span 6-7:  thing => thing
Oracle Span 14-15:  you => you

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	'd	_	MD	MD	_	3	aux	_	_
3	agree	_	VB	VB	_	0	root	_	_
4	-	_	:	:	_	3	punct	_	_
5	one	_	CD	CD	_	7	num	_	_
6	other	_	JJ	JJ	_	7	amod	_	_
7	thing	_	NN	NN	_	3	dobj	_	_
8	it	_	PRP	PRP	_	10	nsubj	_	_
9	is	_	VBZ	VBZ	_	10	cop	_	_
10	none	_	NN	NN	_	7	rcmod	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	his	_	PRP$	PRP$	_	13	poss	_	_
13	business	_	NN	NN	_	11	pobj	_	_
14	whether	_	IN	IN	_	16	mark	_	_
15	you	_	PRP	PRP	_	16	nsubj	_	_
16	date	_	VBP	VBP	_	10	ccomp	_	_
17	or	_	CC	CC	_	16	cc	_	_
18	not	_	RB	RB	_	16	conj	_	_
19	.	_	.	.	_	3	punct	_	_

Oracle:
(a2 / agree-01, ARG0, i / i)
(b / business, domain, o3 / or)
(d2 / date-02, ARG0, y / you)
(o3 / or, op, d2 / date-02)
(t / thing, domain, b / business)
(t / thing, mod, o / other)
(t / thing, quant, 1 / 1)

Input(Some(Graph((multi-sentence :snt1 (agree-01 :ARG0 i) :snt2 (thing :domain (business :domain (or :op (date-02 :polarity - :ARG0 you) :op (date-02 :ARG0 you)) :poss he :polarity -) :mod other :quant 1)),ArrayBuffer(Span(2,3,List(0),agree,agree-01,false), Span(0,1,List(1),I,i,false), Span(6,7,List(2),thing,thing,false), Span(12,13,List(3),business,business,false), Span(16,17,List(4),or,or,false), Span(15,16,List(5),date,date-02,false), Span(14,15,List(6),you,you,false), Span(5,6,List(7),other,other,false), Span(4,5,List(8),one,1,false)),Map(2 -> thing, 5 -> date-02, 8 -> 1, 7 -> other, 1 -> i, 4 -> or, 6 -> you, 0 -> agree-01, 3 -> business),Map(b -> business, t -> thing, o3 -> or, 1 -> 1, y -> you, d2 -> date-02, i -> i, a2 -> agree-01, o -> other))),[Ljava.lang.String;@7770f470,Annotation([Ljava.lang.String;@5e5d171f,[Ljava.lang.String;@24313fcc,[Ljava.lang.String;@7d20d0b),Annotation([Ljava.lang.String;@77f1baf5,[Ljava.lang.String;@41a2befb,[Ledu.cmu.lti.nlp.amr.Dependency;@6c40365c),Annotation([Ljava.lang.String;@7bedc48a,[Ljava.lang.String;@131ef10,[Ljava.lang.String;@55b0dcab),Annotation([Ljava.lang.String;@38afe297,[Ljava.lang.String;@2df3b89c,[Ledu.cmu.lti.nlp.amr.Entity;@23348b5d))
AMR:
(a2 / agree-01, ARG0, i / i)
(a2 / agree-01, ARG1, t / thing)
(d2 / date-02, ARG0, y / you)
(d2 / date-02, ARG1, t / thing)
(d2 / date-02, ARG6, b / business)
(o3 / or, op, d2 / date-02)
(t / thing, mod, o / other)
(t / thing, quant, 1 / 1)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.2
WARNING: makeIds can't find span Id: 0.1.2.2.1
WARNING: makeIds can't find span Id: 0.1.2.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 237,340 microseconds
Sentence: I wouldn't tell him.

Oracle Span 1:  I => i
Oracle Span 2:  tell => tell-01
Spans:
Span 0-1:  I => i
Span 3-4:  tell => tell-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 3-4:  tell => tell-01

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	would	_	MD	MD	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	tell	_	VB	VB	_	0	root	_	_
5	him	_	PRP	PRP	_	4	dobj	_	_
6	.	_	.	.	_	4	punct	_	_

Oracle:
(t / tell-01, ARG0, i / i)

Input(Some(Graph((tell-01 :ARG2 he :ARG0 i :polarity -),ArrayBuffer(Span(3,4,List(0),tell,tell-01,false), Span(0,1,List(1),I,i,false)),Map(1 -> i, 0 -> tell-01),Map(t -> tell-01, i -> i))),[Ljava.lang.String;@70325e14,Annotation([Ljava.lang.String;@37ceb1df,[Ljava.lang.String;@7c9d8e2,[Ljava.lang.String;@20d525),Annotation([Ljava.lang.String;@6200f9cb,[Ljava.lang.String;@2002fc1d,[Ledu.cmu.lti.nlp.amr.Dependency;@69453e37),Annotation([Ljava.lang.String;@6f4a47c7,[Ljava.lang.String;@ae13544,[Ljava.lang.String;@3d34d211),Annotation([Ljava.lang.String;@7dc0f706,[Ljava.lang.String;@4009e306,[Ledu.cmu.lti.nlp.amr.Entity;@43c1b556))
AMR:
(t / tell-01, ARG0, i / i)

WARNING: makeIds can't find span Id: 0.1
Decoded in 7,742 microseconds
Sentence: Not because of his threat - but because your personal life is none of his business.

Oracle Span 1:  because => cause-01
Oracle Span 2:  because => cause-01
Oracle Span 3:  business => business
Oracle Span 4:  but => contrast-01
Oracle Span 5:  life => life
Oracle Span 6:  personal => personal
Oracle Span 7:  threat => threaten-01
Spans:
Span 1-2:  because => cause-01
Span 7-8:  because => cause-01
Span 15-16:  business => business
Span 6-7:  but => contrast-01
Span 10-11:  life => life
Span 9-10:  personal => personal
Span 4-5:  threat => threaten-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 1-2:  because => cause-01
Oracle Span 7-8:  because => cause-01
Oracle Span 15-16:  business => business
Oracle Span 6-7:  but => contrast-01
Oracle Span 10-11:  life => life
Oracle Span 9-10:  personal => personal
Oracle Span 4-5:  threat => threaten-01

Dependencies:
1	Not	_	VBG	VBG	_	13	csubj	_	_
2	because	_	RB	RB	_	3	advmod	_	_
3	of	_	IN	IN	_	1	prep	_	_
4	his	_	PRP$	PRP$	_	5	poss	_	_
5	threat	_	NN	NN	_	3	pobj	_	_
6	-	_	:	:	_	3	punct	_	_
7	but	_	CC	CC	_	3	cc	_	_
8	because	_	IN	IN	_	3	conj	_	_
9	your	_	PRP$	PRP$	_	11	poss	_	_
10	personal	_	JJ	JJ	_	11	amod	_	_
11	life	_	NN	NN	_	8	pobj	_	_
12	is	_	VBZ	VBZ	_	13	cop	_	_
13	none	_	NN	NN	_	0	root	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	his	_	PRP$	PRP$	_	16	poss	_	_
16	business	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	13	punct	_	_

Oracle:
(b / business, domain, l / life)
(c / contrast-01, ARG1, c2 / cause-01)
(c / contrast-01, ARG2, c3 / cause-01)
(c2 / cause-01, ARG0, t / threaten-01)
(c3 / cause-01, ARG0, b / business)
(l / life, mod, p / personal)

Input(Some(Graph((contrast-01 :ARG2 (cause-01 :ARG0 (business :domain (life :poss you :mod personal) :polarity - :poss he)) :ARG1 (cause-01 :ARG0 (threaten-01 :ARG0 he) :polarity -)),ArrayBuffer(Span(6,7,List(0),but,contrast-01,false), Span(1,2,List(1),because,cause-01,false), Span(15,16,List(2),business,business,false), Span(10,11,List(3),life,life,false), Span(9,10,List(4),personal,personal,false), Span(7,8,List(5),because,cause-01,false), Span(4,5,List(6),threat,threaten-01,false)),Map(2 -> business, 5 -> cause-01, 1 -> cause-01, 4 -> personal, 6 -> threaten-01, 0 -> contrast-01, 3 -> life),Map(t -> threaten-01, b -> business, p -> personal, c3 -> cause-01, l -> life, c -> contrast-01, c2 -> cause-01))),[Ljava.lang.String;@587e5365,Annotation([Ljava.lang.String;@22fcf7ab,[Ljava.lang.String;@2de23121,[Ljava.lang.String;@63475ace),Annotation([Ljava.lang.String;@4988d8b8,[Ljava.lang.String;@c0c2f8d,[Ledu.cmu.lti.nlp.amr.Dependency;@305b7c14),Annotation([Ljava.lang.String;@6913c1fb,[Ljava.lang.String;@66d18979,[Ljava.lang.String;@bccb269),Annotation([Ljava.lang.String;@609cd4d8,[Ljava.lang.String;@17f7cd29,[Ledu.cmu.lti.nlp.amr.Entity;@7d8704ef))
AMR:
(b / business, poss, l / life)
(c / contrast-01, ARG1, t / threaten-01)
(c / contrast-01, ARG6, c2 / cause-01)
(c2 / cause-01, ARG1, l / life)
(c3 / cause-01, ARG1, p / personal)
(t / threaten-01, ARG1, c3 / cause-01)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 140,446 microseconds
Sentence: Can you document his threats?

Oracle Span 1:  Can => possible
Oracle Span 2:  document => document-01
Oracle Span 3:  threats => threaten-01
Oracle Span 4:  you => you
Spans:
Span 0-1:  Can => possible
Span 2-3:  document => document-01
Span 4-5:  threats => threaten-01
Span 1-2:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Can => possible
Oracle Span 2-3:  document => document-01
Oracle Span 4-5:  threats => threaten-01
Oracle Span 1-2:  you => you

Dependencies:
1	Can	_	MD	MD	_	3	aux	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	document	_	VB	VB	_	0	root	_	_
4	his	_	PRP$	PRP$	_	5	poss	_	_
5	threats	_	NNS	NNS	_	3	dobj	_	_
6	?	_	.	.	_	3	punct	_	_

Oracle:
(d / document-01, ARG0, y / you)
(d / document-01, ARG1, t2 / threaten-01)
(p / possible, domain, d / document-01)

Input(Some(Graph((possible :domain (document-01 :ARG1 (threaten-01 :ARG0 he) :ARG0 you) :mode interrogative),ArrayBuffer(Span(0,1,List(0),Can,possible,false), Span(2,3,List(1),document,document-01,false), Span(1,2,List(2),you,you,false), Span(4,5,List(3),threats,threaten-01,false)),Map(2 -> you, 1 -> document-01, 0 -> possible, 3 -> threaten-01),Map(d -> document-01, y -> you, p -> possible, t2 -> threaten-01))),[Ljava.lang.String;@13b6aecc,Annotation([Ljava.lang.String;@158a8276,[Ljava.lang.String;@3c3d9b6b,[Ljava.lang.String;@79d8407f),Annotation([Ljava.lang.String;@5fbe4146,[Ljava.lang.String;@1e66f1f5,[Ledu.cmu.lti.nlp.amr.Dependency;@4e50c791),Annotation([Ljava.lang.String;@7530ad9c,[Ljava.lang.String;@58a9760d,[Ljava.lang.String;@71e9ddb4),Annotation([Ljava.lang.String;@394df057,[Ljava.lang.String;@4961f6af,[Ledu.cmu.lti.nlp.amr.Entity;@5aebe890))
AMR:
(d / document-01, ARG0, y / you)
(d / document-01, ARG1, t2 / threaten-01)
(p / possible, domain, d / document-01)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 14,250 microseconds
Sentence: You really need to.

Oracle Span 1:  need => need-01
Oracle Span 2:  really => real
Oracle Span 3:  You => you
Spans:
Span 2-3:  need => need-01
Span 1-2:  really => real
Span 0-1:  You => you

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 2-3:  need => need-01
Oracle Span 1-2:  really => real
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	really	_	RB	RB	_	3	advmod	_	_
3	need	_	VBP	VBP	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	.	_	.	.	_	3	punct	_	_

Oracle:
(n / need-01, ARG0, y / you)
(n / need-01, manner, r / real)

Input(Some(Graph((need-01 :manner real :ARG0 you),ArrayBuffer(Span(2,3,List(0),need,need-01,false), Span(0,1,List(1),You,you,false), Span(1,2,List(2),really,real,false)),Map(2 -> real, 1 -> you, 0 -> need-01),Map(n -> need-01, y -> you, r -> real))),[Ljava.lang.String;@65d09a04,Annotation([Ljava.lang.String;@33c911a1,[Ljava.lang.String;@75db5df9,[Ljava.lang.String;@707194ba),Annotation([Ljava.lang.String;@1190200a,[Ljava.lang.String;@6a2f6f80,[Ledu.cmu.lti.nlp.amr.Dependency;@45b4c3a9),Annotation([Ljava.lang.String;@399c4be1,[Ljava.lang.String;@291caca8,[Ljava.lang.String;@385e9564),Annotation([Ljava.lang.String;@5b94b04d,[Ljava.lang.String;@8c3b9d,[Ledu.cmu.lti.nlp.amr.Entity;@4c39bec8))
AMR:
(n / need-01, ARG0, y / you)
(n / need-01, ARG1, r / real)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 16,970 microseconds
Sentence: Quit taking his calls, make him leave voice mail.

Oracle Span 1:  calls => call-02
Oracle Span 2:  leave => leave-02
Oracle Span 3:  mail => mail
Oracle Span 4:  make => make-02
Oracle Span 5:  Quit => quit-01
Oracle Span 6:  taking => take-01
Oracle Span 7:  voice => voice
Spans:
Span 3-4:  calls => call-02
Span 7-8:  leave => leave-02
Span 9-10:  mail => mail
Span 5-6:  make => make-02
Span 0-1:  Quit => quit-01
Span 1-2:  taking => take-01
Span 8-9:  voice => voice

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 3-4:  calls => call-02
Oracle Span 7-8:  leave => leave-02
Oracle Span 9-10:  mail => mail
Oracle Span 5-6:  make => make-02
Oracle Span 0-1:  Quit => quit-01
Oracle Span 1-2:  taking => take-01
Oracle Span 8-9:  voice => voice

Dependencies:
1	Quit	_	NNP	NNP	_	6	nsubj	_	_
2	taking	_	VBG	VBG	_	1	vmod	_	_
3	his	_	PRP$	PRP$	_	4	poss	_	_
4	calls	_	NNS	NNS	_	2	dobj	_	_
5	,	_	,	,	_	6	punct	_	_
6	make	_	VBP	VBP	_	0	root	_	_
7	him	_	PRP	PRP	_	8	nsubj	_	_
8	leave	_	VB	VB	_	6	ccomp	_	_
9	voice	_	NN	NN	_	10	nn	_	_
10	mail	_	NN	NN	_	8	dobj	_	_
11	.	_	.	.	_	6	punct	_	_

Oracle:
(l / leave-02, ARG1, m2 / mail)
(m / make-02, ARG1, l / leave-02)
(m2 / mail, mod, v / voice)
(q / quit-01, ARG1, t / take-01)
(t / take-01, ARG1, c / call-02)

Input(Some(Graph((and :op (quit-01 :ARG1 (take-01 :ARG1 (call-02 :ARG0 he) :ARG0 you) :ARG0 you :mode imperative) :op (make-02 :ARG1 (leave-02 :ARG1 (mail :mod voice) :ARG0 he) :mode imperative :ARG0 you)),ArrayBuffer(Span(0,1,List(0),Quit,quit-01,false), Span(1,2,List(1),taking,take-01,false), Span(3,4,List(2),calls,call-02,false), Span(5,6,List(3),make,make-02,false), Span(7,8,List(4),leave,leave-02,false), Span(9,10,List(5),mail,mail,false), Span(8,9,List(6),voice,voice,false)),Map(2 -> call-02, 5 -> mail, 1 -> take-01, 4 -> leave-02, 6 -> voice, 0 -> quit-01, 3 -> make-02),Map(q -> quit-01, t -> take-01, m2 -> mail, v -> voice, m -> make-02, l -> leave-02, c -> call-02))),[Ljava.lang.String;@f79e,Annotation([Ljava.lang.String;@7ee8290b,[Ljava.lang.String;@1f59a598,[Ljava.lang.String;@1e178745),Annotation([Ljava.lang.String;@192c3f1e,[Ljava.lang.String;@26b3fd41,[Ledu.cmu.lti.nlp.amr.Dependency;@7494f96a),Annotation([Ljava.lang.String;@561b6512,[Ljava.lang.String;@2e377400,[Ljava.lang.String;@1757cd72),Annotation([Ljava.lang.String;@445b295b,[Ljava.lang.String;@49e5f737,[Ledu.cmu.lti.nlp.amr.Entity;@5c671d7f))
AMR:
(c / call-02, ARG1, q / quit-01)
(l / leave-02, ARG1, m2 / mail)
(m / make-02, ARG1, l / leave-02)
(m2 / mail, mod, v / voice)
(q / quit-01, ARG1, m / make-02)
(t / take-01, ARG1, c / call-02)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
Decoded in 139,833 microseconds
Sentence: Make him email or text you.

Oracle Span 1:  email => email-01
Oracle Span 2:  Make => make-02
Oracle Span 3:  or => or
Oracle Span 4:  text => text-00
Oracle Span 5:  you => you
Spans:
Span 2-3:  email => email-01
Span 0-1:  Make => make-02
Span 3-4:  or => or
Span 4-5:  text => text-00
Span 5-6:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  email => email-01
Oracle Span 0-1:  Make => make-02
Oracle Span 3-4:  or => or
Oracle Span 4-5:  text => text-00
Oracle Span 5-6:  you => you

Dependencies:
1	Make	_	VB	VB	_	0	root	_	_
2	him	_	PRP	PRP	_	3	nsubj	_	_
3	email	_	VB	VB	_	1	ccomp	_	_
4	or	_	CC	CC	_	3	cc	_	_
5	text	_	VB	VB	_	3	conj	_	_
6	you	_	PRP	PRP	_	3	dobj	_	_
7	.	_	.	.	_	1	punct	_	_

Oracle:
(e / email-01, ARG2, y / you)
(m / make-02, ARG0, y / you)
(m / make-02, ARG1, o / or)
(o / or, op, e / email-01)
(o / or, op, t / text-00)
(t / text-00, ARG2, y / you)

Input(Some(Graph((make-02 :ARG1 (or :op (text-00 :ARG0 he :ARG2 you) :op (email-01 :ARG0 he :ARG2 you)) :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),Make,make-02,false), Span(3,4,List(1),or,or,false), Span(4,5,List(2),text,text-00,false), Span(2,3,List(3),email,email-01,false), Span(5,6,List(4),you,you,false)),Map(2 -> text-00, 1 -> or, 4 -> you, 0 -> make-02, 3 -> email-01),Map(e -> email-01, t -> text-00, m -> make-02, y -> you, o -> or))),[Ljava.lang.String;@757277dc,Annotation([Ljava.lang.String;@687e99d8,[Ljava.lang.String;@e4487af,[Ljava.lang.String;@6aaceffd),Annotation([Ljava.lang.String;@c86b9e3,[Ljava.lang.String;@10aa41f2,[Ledu.cmu.lti.nlp.amr.Dependency;@3af9c5b7),Annotation([Ljava.lang.String;@37271612,[Ljava.lang.String;@ed7f8b4,[Ljava.lang.String;@4c309d4d),Annotation([Ljava.lang.String;@38102d01,[Ljava.lang.String;@37883b97,[Ledu.cmu.lti.nlp.amr.Entity;@6ab778a))
AMR:
(m / make-02, ARG1, e / email-01)
(o / or, op, e / email-01)
(o / or, op, t / text-00)
(t / text-00, ARG1, y / you)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 19,327 microseconds
Sentence: Keep those records.

Oracle Span 1:  Keep => keep-01
Oracle Span 2:  records => (thing :ARG1-of record-01)
Spans:
Span 0-1:  Keep => keep-01
Span 2-3:  records => (thing :ARG1-of record-01)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Keep => keep-01
Oracle Span 2-3:  records => (thing :ARG1-of record-01)

Dependencies:
1	Keep	_	VB	VB	_	0	root	_	_
2	those	_	DT	DT	_	3	det	_	_
3	records	_	NNS	NNS	_	1	dobj	_	_
4	.	_	.	.	_	1	punct	_	_

Oracle:
(k / keep-01, ARG1, t / thing)
(r / record-01, ARG1, t / thing)

Input(Some(Graph((keep-01 :ARG1 (thing :mod that :ARG1-of record-01) :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),Keep,keep-01,false), Span(2,3,List(1, 2),records,(thing :ARG1-of record-01),false)),Map(2 -> record-01, 1 -> thing, 0 -> keep-01),Map(t -> thing, k -> keep-01, r -> record-01))),[Ljava.lang.String;@4e3958e7,Annotation([Ljava.lang.String;@77f80c04,[Ljava.lang.String;@1dac5ef,[Ljava.lang.String;@5c90e579),Annotation([Ljava.lang.String;@58ea606c,[Ljava.lang.String;@6f45df59,[Ledu.cmu.lti.nlp.amr.Dependency;@38e79ae3),Annotation([Ljava.lang.String;@63070bab,[Ljava.lang.String;@68e5eea7,[Ljava.lang.String;@291b4bf5),Annotation([Ljava.lang.String;@2d2ffcb7,[Ljava.lang.String;@762ef0ea,[Ledu.cmu.lti.nlp.amr.Entity;@31f9b85e))
AMR:
(k / keep-01, ARG1, t / thing)
(r / record-01, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 9,137 microseconds
Sentence: Get a lawyer and get a divorce.

Oracle Span 1:  and => and
Oracle Span 2:  divorce => divorce-01
Oracle Span 3:  Get => get-01
Oracle Span 4:  lawyer => lawyer
Spans:
Span 3-4:  and => and
Span 6-7:  divorce => divorce-01
Span 0-1:  Get => get-01
Span 2-3:  lawyer => lawyer

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 3-4:  and => and
Oracle Span 6-7:  divorce => divorce-01
Oracle Span 0-1:  Get => get-01
Oracle Span 2-3:  lawyer => lawyer

Dependencies:
1	Get	_	VB	VB	_	0	root	_	_
2	a	_	DT	DT	_	3	det	_	_
3	lawyer	_	NN	NN	_	1	dobj	_	_
4	and	_	CC	CC	_	1	cc	_	_
5	get	_	VB	VB	_	1	conj	_	_
6	a	_	DT	DT	_	7	det	_	_
7	divorce	_	NN	NN	_	5	dobj	_	_
8	.	_	.	.	_	1	punct	_	_

Oracle:
(a / and, op, d / divorce-01)
(a / and, op, g / get-01)
(g / get-01, ARG1, l / lawyer)

Input(Some(Graph((and :op (divorce-01 :mode imperative :ARG0 you) :op (get-01 :ARG1 lawyer :ARG0 you :mode imperative)),ArrayBuffer(Span(3,4,List(0),and,and,false), Span(6,7,List(1),divorce,divorce-01,false), Span(0,1,List(2),Get,get-01,false), Span(2,3,List(3),lawyer,lawyer,false)),Map(2 -> get-01, 1 -> divorce-01, 0 -> and, 3 -> lawyer),Map(d -> divorce-01, g -> get-01, a -> and, l -> lawyer))),[Ljava.lang.String;@424e1977,Annotation([Ljava.lang.String;@10d68fcd,[Ljava.lang.String;@117e949d,[Ljava.lang.String;@6db9f5a4),Annotation([Ljava.lang.String;@5f8edcc5,[Ljava.lang.String;@7b02881e,[Ledu.cmu.lti.nlp.amr.Dependency;@1ebd319f),Annotation([Ljava.lang.String;@3c0be339,[Ljava.lang.String;@15ca7889,[Ljava.lang.String;@7a675056),Annotation([Ljava.lang.String;@d21a74c,[Ljava.lang.String;@6e509ffa,[Ledu.cmu.lti.nlp.amr.Entity;@2898ac89))
AMR:
(a / and, op, g / get-01)
(d / divorce-01, ARG1, a / and)
(g / get-01, ARG1, l / lawyer)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
Decoded in 45,763 microseconds
Sentence: If you can't afford one, try legal aid.

Oracle Span 1:  afford => afford-01
Oracle Span 2:  aid => aid-01
Oracle Span 3:  one => one
Oracle Span 4:  try => try-01
Oracle Span 5:  you => you
Spans:
Span 4-5:  afford => afford-01
Span 9-10:  aid => aid-01
Span 5-6:  one => one
Span 7-8:  try => try-01
Span 1-2:  you => you

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 4-5:  afford => afford-01
Oracle Span 9-10:  aid => aid-01
Oracle Span 5-6:  one => one
Oracle Span 7-8:  try => try-01
Oracle Span 1-2:  you => you

Dependencies:
1	If	_	IN	IN	_	5	mark	_	_
2	you	_	PRP	PRP	_	5	nsubj	_	_
3	ca	_	MD	MD	_	5	aux	_	_
4	n't	_	RB	RB	_	5	neg	_	_
5	afford	_	VB	VB	_	8	advcl	_	_
6	one	_	CD	CD	_	5	dobj	_	_
7	,	_	,	,	_	8	punct	_	_
8	try	_	VB	VB	_	0	root	_	_
9	legal	_	JJ	JJ	_	10	amod	_	_
10	aid	_	NN	NN	_	8	dobj	_	_
11	.	_	.	.	_	8	punct	_	_

Oracle:
(a2 / afford-01, ARG0, y / you)
(a2 / afford-01, ARG1, o / one)
(t / try-01, ARG0, y / you)
(t / try-01, ARG1, a / aid-01)

Input(Some(Graph((try-01 :condition (possible :polarity - :domain (afford-01 :ARG1 one :ARG0 you)) :ARG1 (aid-01 :mod law) :ARG0 you :mode imperative),ArrayBuffer(Span(7,8,List(0),try,try-01,false), Span(4,5,List(1),afford,afford-01,false), Span(5,6,List(2),one,one,false), Span(9,10,List(3),aid,aid-01,false), Span(1,2,List(4),you,you,false)),Map(2 -> one, 1 -> afford-01, 4 -> you, 0 -> try-01, 3 -> aid-01),Map(t -> try-01, y -> you, a -> aid-01, a2 -> afford-01, o -> one))),[Ljava.lang.String;@683dbc2c,Annotation([Ljava.lang.String;@68267da0,[Ljava.lang.String;@2638011,[Ljava.lang.String;@6ff29830),Annotation([Ljava.lang.String;@6a2b953e,[Ljava.lang.String;@313b2ea6,[Ledu.cmu.lti.nlp.amr.Dependency;@2f465398),Annotation([Ljava.lang.String;@548e6d58,[Ljava.lang.String;@623a8092,[Ljava.lang.String;@a1cdc6d),Annotation([Ljava.lang.String;@175b9425,[Ljava.lang.String;@3098cf3b,[Ledu.cmu.lti.nlp.amr.Entity;@610f7aa))
AMR:
(a2 / afford-01, ARG0, y / you)
(a2 / afford-01, ARG1, o / one)
(t / try-01, ARG1, a / aid-01)
(t / try-01, time, a2 / afford-01)

WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
Decoded in 104,637 microseconds
Sentence: Tell your ex that all communication needs to go through the lawyer.

Oracle Span 1:  all => all
Oracle Span 2:  communication => communicate-01
Oracle Span 3:  ex => ex
Oracle Span 4:  go => go-06
Oracle Span 5:  lawyer => lawyer
Oracle Span 6:  needs => need-01
Oracle Span 7:  Tell => tell-01
Spans:
Span 4-5:  all => all
Span 5-6:  communication => communicate-01
Span 2-3:  ex => ex
Span 8-9:  go => go-06
Span 11-12:  lawyer => lawyer
Span 6-7:  needs => need-01
Span 0-1:  Tell => tell-01

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 4-5:  all => all
Oracle Span 5-6:  communication => communicate-01
Oracle Span 2-3:  ex => ex
Oracle Span 8-9:  go => go-06
Oracle Span 11-12:  lawyer => lawyer
Oracle Span 6-7:  needs => need-01
Oracle Span 0-1:  Tell => tell-01

Dependencies:
1	Tell	_	VB	VB	_	0	root	_	_
2	your	_	PRP$	PRP$	_	3	poss	_	_
3	ex	_	FW	FW	_	1	dobj	_	_
4	that	_	IN	IN	_	7	mark	_	_
5	all	_	DT	DT	_	6	det	_	_
6	communication	_	NN	NN	_	7	nsubj	_	_
7	needs	_	VBZ	VBZ	_	3	dep	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	go	_	VB	VB	_	7	xcomp	_	_
10	through	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	lawyer	_	NN	NN	_	10	pobj	_	_
13	.	_	.	.	_	1	punct	_	_

Oracle:
(c / communicate-01, quant, a / all)
(g / go-06, ARG0, c / communicate-01)
(g / go-06, path, l / lawyer)
(n / need-01, ARG1, g / go-06)
(t / tell-01, ARG1, n / need-01)
(t / tell-01, ARG2, e / ex)

Input(Some(Graph((tell-01 :ARG2 (ex :poss you) :ARG1 (need-01 :ARG1 (go-06 :path lawyer :ARG0 (communicate-01 :quant all))) :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),Tell,tell-01,false), Span(2,3,List(1),ex,ex,false), Span(6,7,List(2),needs,need-01,false), Span(8,9,List(3),go,go-06,false), Span(11,12,List(4),lawyer,lawyer,false), Span(4,5,List(5),all,all,false), Span(5,6,List(6),communication,communicate-01,false)),Map(2 -> need-01, 5 -> all, 1 -> ex, 4 -> lawyer, 6 -> communicate-01, 0 -> tell-01, 3 -> go-06),Map(n -> need-01, e -> ex, t -> tell-01, g -> go-06, a -> all, c -> communicate-01, l -> lawyer))),[Ljava.lang.String;@6a03bcb1,Annotation([Ljava.lang.String;@21b2e768,[Ljava.lang.String;@57250572,[Ljava.lang.String;@5609159b),Annotation([Ljava.lang.String;@2118cddf,[Ljava.lang.String;@17a7f733,[Ledu.cmu.lti.nlp.amr.Dependency;@68567e20),Annotation([Ljava.lang.String;@76ed1b7c,[Ljava.lang.String;@11fc564b,[Ljava.lang.String;@394a2528),Annotation([Ljava.lang.String;@6236eb5f,[Ljava.lang.String;@7c1e2a9e,[Ledu.cmu.lti.nlp.amr.Entity;@fa36558))
AMR:
(c / communicate-01, ARG1, e / ex)
(c / communicate-01, ARG6, a / all)
(g / go-06, ARG0, c / communicate-01)
(g / go-06, ARG1, l / lawyer)
(n / need-01, ARG1, g / go-06)
(t / tell-01, ARG1, e / ex)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0
Decoded in 178,721 microseconds
Sentence: The bus drivers want exact change, the till people want exact change, the people who deliver your food want exact change...

Oracle Span 1:  bus => bus
Oracle Span 2:  change => change
Oracle Span 3:  deliver => (person :ARG0-of deliver-01)
Oracle Span 4:  drivers => (person :ARG0-of drive-01)
Oracle Span 5:  exact => exact
Oracle Span 6:  food => food
Oracle Span 7:  till => (person :location till)
Oracle Span 8:  want => want-01
Spans:
Span 1-2:  bus => bus
Span 5-6:  change => change
Span 17-18:  deliver => (person :ARG0-of deliver-01)
Span 2-3:  drivers => (person :ARG0-of drive-01)
Span 4-5:  exact => exact
Span 19-20:  food => food
Span 8-9:  till => (person :location till)
Span 3-4:  want => want-01

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 1-2:  bus => bus
Oracle Span 5-6:  change => change
Oracle Span 17-18:  deliver => (person :ARG0-of deliver-01)
Oracle Span 2-3:  drivers => (person :ARG0-of drive-01)
Oracle Span 4-5:  exact => exact
Oracle Span 19-20:  food => food
Oracle Span 8-9:  till => (person :location till)
Oracle Span 3-4:  want => want-01

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	bus	_	NN	NN	_	3	nn	_	_
3	drivers	_	NNS	NNS	_	4	nsubj	_	_
4	want	_	VBP	VBP	_	11	ccomp	_	_
5	exact	_	JJ	JJ	_	6	amod	_	_
6	change	_	NN	NN	_	4	dobj	_	_
7	,	_	,	,	_	11	punct	_	_
8	the	_	DT	DT	_	10	det	_	_
9	till	_	JJ	JJ	_	10	amod	_	_
10	people	_	NNS	NNS	_	11	nsubj	_	_
11	want	_	VBP	VBP	_	0	root	_	_
12	exact	_	JJ	JJ	_	13	amod	_	_
13	change	_	NN	NN	_	11	dobj	_	_
14	,	_	,	,	_	13	punct	_	_
15	the	_	DT	DT	_	16	det	_	_
16	people	_	NNS	NNS	_	13	appos	_	_
17	who	_	WP	WP	_	18	nsubj	_	_
18	deliver	_	VBP	VBP	_	16	rcmod	_	_
19	your	_	PRP$	PRP$	_	20	poss	_	_
20	food	_	NN	NN	_	21	nsubj	_	_
21	want	_	VBP	VBP	_	18	ccomp	_	_
22	exact	_	JJ	JJ	_	23	amod	_	_
23	change	_	NN	NN	_	21	dobj	_	_
24	...	_	:	:	_	11	punct	_	_

Oracle:
(c / change, mod, e / exact)
(d / drive-01, ARG0, p / person)
(d / drive-01, ARG1, b / bus)
(d2 / deliver-01, ARG0, p3 / person)
(d2 / deliver-01, ARG1, f / food)
(p2 / person, location, t / till)
(w / want-01, ARG1, c / change)

Input(Some(Graph((want-01 :ARG1 (change :mod exact) :ARG0 (and :op (person :ARG0-of (drive-01 :ARG1 bus)) :op (person :location till) :op (person :ARG0-of (deliver-01 :ARG1 (food :poss you))))),ArrayBuffer(Span(3,4,List(0),want,want-01,false), Span(5,6,List(1),change,change,false), Span(4,5,List(2),exact,exact,false), Span(1,2,List(3),bus,bus,false), Span(8,9,List(4, 5),till,(person :location till),false), Span(17,18,List(6, 7),deliver,(person :ARG0-of deliver-01),false), Span(19,20,List(8),food,food,false), Span(2,3,List(9, 10),drivers,(person :ARG0-of drive-01),false)),Map(2 -> exact, 5 -> till, 8 -> food, 7 -> deliver-01, 1 -> change, 4 -> person, 6 -> person, 9 -> person, 0 -> want-01, 10 -> drive-01, 3 -> bus),Map(e -> exact, w -> want-01, t -> till, b -> bus, p2 -> person, d -> drive-01, p -> person, d2 -> deliver-01, c -> change, f -> food, p3 -> person))),[Ljava.lang.String;@672872e1,Annotation([Ljava.lang.String;@32910148,[Ljava.lang.String;@3f56875e,[Ljava.lang.String;@2b4bac49),Annotation([Ljava.lang.String;@fd07cbb,[Ljava.lang.String;@3571b748,[Ledu.cmu.lti.nlp.amr.Dependency;@3e96bacf),Annotation([Ljava.lang.String;@484970b0,[Ljava.lang.String;@4470f8a6,[Ljava.lang.String;@7c83dc97),Annotation([Ljava.lang.String;@7748410a,[Ljava.lang.String;@740773a3,[Ledu.cmu.lti.nlp.amr.Entity;@37f1104d))
AMR:
(c / change, mod, e / exact)
(d / drive-01, ARG0, p / person)
(d / drive-01, ARG1, b / bus)
(d2 / deliver-01, ARG0, p3 / person)
(d2 / deliver-01, ARG1, f / food)
(f / food, mod, p2 / person)
(f / food, op, w / want-01)
(p2 / person, location, t / till)
(w / want-01, ARG0, p / person)
(w / want-01, ARG1, c / change)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 514,363 microseconds
Sentence: Do they not realise that you don't get piles of change from the bank,

Oracle Span 1:  bank => bank
Oracle Span 2:  change => change
Oracle Span 3:  get => get-01
Oracle Span 4:  piles => pile
Oracle Span 5:  realise => realize-01
Oracle Span 6:  they => they
Oracle Span 7:  you => you
Spans:
Span 14-15:  bank => bank
Span 11-12:  change => change
Span 8-9:  get => get-01
Span 9-10:  piles => pile
Span 3-4:  realise => realize-01
Span 1-2:  they => they
Span 5-6:  you => you

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 14-15:  bank => bank
Oracle Span 11-12:  change => change
Oracle Span 8-9:  get => get-01
Oracle Span 9-10:  piles => pile
Oracle Span 3-4:  realise => realize-01
Oracle Span 1-2:  they => they
Oracle Span 5-6:  you => you

Dependencies:
1	Do	_	VB	VB	_	4	aux	_	_
2	they	_	PRP	PRP	_	4	dobj	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	realise	_	VB	VB	_	0	root	_	_
5	that	_	IN	IN	_	9	mark	_	_
6	you	_	PRP	PRP	_	9	nsubj	_	_
7	do	_	VBP	VBP	_	9	aux	_	_
8	n't	_	RB	RB	_	9	neg	_	_
9	get	_	VB	VB	_	4	ccomp	_	_
10	piles	_	NNS	NNS	_	9	dobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	change	_	NN	NN	_	11	pobj	_	_
13	from	_	IN	IN	_	9	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	bank	_	NN	NN	_	13	pobj	_	_
16	,	_	,	,	_	9	punct	_	_

Oracle:
(g / get-01, ARG0, y / you)
(g / get-01, ARG1, p / pile)
(g / get-01, ARG2, b / bank)
(p / pile, mod, c / change)
(r / realize-01, ARG0, t / they)
(r / realize-01, ARG1, g / get-01)

Input(Some(Graph((realize-01 :ARG1 (get-01 :ARG2 bank :ARG1 (pile :mod change) :ARG0 you :polarity -) :ARG0 they :mode interrogative :polarity -),ArrayBuffer(Span(1,2,List(0),they,they,false), Span(8,9,List(1),get,get-01,false), Span(14,15,List(2),bank,bank,false), Span(9,10,List(3),piles,pile,false), Span(11,12,List(4),change,change,false), Span(5,6,List(5),you,you,false), Span(3,4,List(6),realise,realize-01,false)),Map(2 -> bank, 5 -> you, 1 -> get-01, 4 -> change, 6 -> realize-01, 0 -> they, 3 -> pile),Map(b -> bank, t -> they, y -> you, p -> pile, g -> get-01, r -> realize-01, c -> change))),[Ljava.lang.String;@55740540,Annotation([Ljava.lang.String;@60015ef5,[Ljava.lang.String;@2f54a33d,[Ljava.lang.String;@1018bde2),Annotation([Ljava.lang.String;@65b3f4a4,[Ljava.lang.String;@f2ff811,[Ledu.cmu.lti.nlp.amr.Dependency;@568ff82),Annotation([Ljava.lang.String;@50caa560,[Ljava.lang.String;@2a266d09,[Ljava.lang.String;@5ab9e72c),Annotation([Ljava.lang.String;@186f8716,[Ljava.lang.String;@1d8bd0de,[Ledu.cmu.lti.nlp.amr.Entity;@45ca843))
AMR:
(g / get-01, ARG1, p / pile)
(g / get-01, ARG2, b / bank)
(g / get-01, ARG6, y / you)
(p / pile, location, c / change)
(r / realize-01, ARG1, g / get-01)
(r / realize-01, ARG6, t / they)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.3
WARNING: makeIds can't find span Id: 0.3.2
WARNING: makeIds can't find span Id: 0.3.2.0
WARNING: makeIds can't find span Id: 0.3.1
Decoded in 117,582 microseconds
Sentence: someone somewhere is going to have to take the notes?

Oracle Span 1:  notes => note
Oracle Span 2:  someone => someone
Oracle Span 3:  somewhere => somewhere
Oracle Span 4:  take => take-01
Spans:
Span 9-10:  notes => note
Span 0-1:  someone => someone
Span 1-2:  somewhere => somewhere
Span 7-8:  take => take-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 9-10:  notes => note
Oracle Span 0-1:  someone => someone
Oracle Span 1-2:  somewhere => somewhere
Oracle Span 7-8:  take => take-01

Dependencies:
1	someone	_	NN	NN	_	4	nsubj	_	_
2	somewhere	_	RB	RB	_	4	advmod	_	_
3	is	_	VBZ	VBZ	_	4	aux	_	_
4	going	_	VBG	VBG	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	have	_	VB	VB	_	4	xcomp	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	take	_	VB	VB	_	6	xcomp	_	_
9	the	_	DT	DT	_	10	det	_	_
10	notes	_	NNS	NNS	_	8	dobj	_	_
11	?	_	.	.	_	4	punct	_	_

Oracle:
(t / take-01, ARG0, s / someone)
(t / take-01, ARG1, n / note)
(t / take-01, location, s2 / somewhere)

Input(Some(Graph((obligate-01 :mode interrogative :ARG2 (take-01 :location somewhere :ARG1 note :ARG0 someone) :ARG1 someone),ArrayBuffer(Span(7,8,List(0),take,take-01,false), Span(1,2,List(1),somewhere,somewhere,false), Span(9,10,List(2),notes,note,false), Span(0,1,List(3),someone,someone,false)),Map(2 -> note, 1 -> somewhere, 0 -> take-01, 3 -> someone),Map(n -> note, s2 -> somewhere, t -> take-01, s -> someone))),[Ljava.lang.String;@11c9af63,Annotation([Ljava.lang.String;@757acd7b,[Ljava.lang.String;@36b4fe2a,[Ljava.lang.String;@574b560f),Annotation([Ljava.lang.String;@ba54932,[Ljava.lang.String;@28975c28,[Ledu.cmu.lti.nlp.amr.Dependency;@3943a2be),Annotation([Ljava.lang.String;@343570b7,[Ljava.lang.String;@157853da,[Ljava.lang.String;@71c3b41),Annotation([Ljava.lang.String;@236e3f4e,[Ljava.lang.String;@3cc1435c,[Ledu.cmu.lti.nlp.amr.Entity;@6bf0219d))
AMR:
(s / someone, location, s2 / somewhere)
(t / take-01, ARG0, s / someone)
(t / take-01, ARG1, n / note)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 53,255 microseconds
Sentence: People are getting lazy.

Oracle Span 1:  getting => get-03
Oracle Span 2:  lazy => lazy
Spans:
Span 2-3:  getting => get-03
Span 3-4:  lazy => lazy

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  getting => get-03
Oracle Span 3-4:  lazy => lazy

Dependencies:
1	People	_	NNS	NNS	_	4	nsubj	_	_
2	are	_	VBP	VBP	_	4	aux	_	_
3	getting	_	VBG	VBG	_	4	dep	_	_
4	lazy	_	JJ	JJ	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_

Oracle:
(g / get-03, ARG2, l / lazy)

Input(Some(Graph((get-03 :ARG2 lazy :ARG1 person),ArrayBuffer(Span(2,3,List(0),getting,get-03,false), Span(3,4,List(1),lazy,lazy,false)),Map(1 -> lazy, 0 -> get-03),Map(g -> get-03, l -> lazy))),[Ljava.lang.String;@dd0c991,Annotation([Ljava.lang.String;@5f16132a,[Ljava.lang.String;@69fb6037,[Ljava.lang.String;@36d585c),Annotation([Ljava.lang.String;@87a85e1,[Ljava.lang.String;@671a5887,[Ledu.cmu.lti.nlp.amr.Dependency;@5552768b),Annotation([Ljava.lang.String;@3c947bc5,[Ljava.lang.String;@609db43b,[Ljava.lang.String;@55f616cf),Annotation([Ljava.lang.String;@1356d4d4,[Ljava.lang.String;@c03cf28,[Ledu.cmu.lti.nlp.amr.Entity;@1329eff))
AMR:
(g / get-03, ARG1, l / lazy)

WARNING: makeIds can't find span Id: 0.1
Decoded in 6,851 microseconds
Sentence: I do like to get as near as possible as i woudn't like to be couting coppers all day

Oracle Span 1:  all => all
Oracle Span 2:  coppers => copper
Oracle Span 3:  day => day
Oracle Span 4:  I => i
Oracle Span 5:  like => like-01
Oracle Span 6:  like => like-01
Oracle Span 7:  near => near-01
Oracle Span 8:  possible => possible
Spans:
Span 18-19:  all => all
Span 17-18:  coppers => copper
Span 19-20:  day => day
Span 0-1:  I => i
Span 2-3:  like => like-01
Span 13-14:  like => like-01
Span 6-7:  near => near-01
Span 8-9:  possible => possible

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 18-19:  all => all
Oracle Span 17-18:  coppers => copper
Oracle Span 19-20:  day => day
Oracle Span 0-1:  I => i
Oracle Span 2-3:  like => like-01
Oracle Span 13-14:  like => like-01
Oracle Span 6-7:  near => near-01
Oracle Span 8-9:  possible => possible

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	do	_	VBP	VBP	_	0	root	_	_
3	like	_	IN	IN	_	12	mark	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	get	_	VB	VB	_	12	csubj	_	_
6	as	_	RB	RB	_	10	advmod	_	_
7	near	_	RB	RB	_	10	advmod	_	_
8	as	_	RB	RB	_	10	advmod	_	_
9	possible	_	RB	RB	_	10	advmod	_	_
10	as	_	IN	IN	_	5	prep	_	_
11	i	_	FW	FW	_	10	pobj	_	_
12	woud	_	VBD	VBD	_	2	advcl	_	_
13	n't	_	RB	RB	_	12	neg	_	_
14	like	_	VB	VB	_	12	dep	_	_
15	to	_	TO	TO	_	17	aux	_	_
16	be	_	VB	VB	_	17	aux	_	_
17	couting	_	VBG	VBG	_	14	xcomp	_	_
18	coppers	_	NNS	NNS	_	17	dobj	_	_
19	all	_	DT	DT	_	20	det	_	_
20	day	_	NN	NN	_	18	dep	_	_

Oracle:
(d2 / day, mod, a / all)
(l / like-01, ARG0, i / i)
(l / like-01, ARG1, n2 / near-01)
(l2 / like-01, ARG0, i / i)
(n2 / near-01, ARG1, i / i)
(n2 / near-01, degree, p / possible)

Input(Some(Graph((like-01 :ARG1-of (cause-01 :ARG0 (like-01 :ARG1 (count-01 :ARG1 copper :duration (day :mod all) :ARG0 i) :polarity - :ARG0 i)) :ARG1 (near-01 :degree possible :ARG1 i) :ARG0 i),ArrayBuffer(Span(2,3,List(0),like,like-01,false), Span(13,14,List(1),like,like-01,false), Span(17,18,List(2),coppers,copper,false), Span(19,20,List(3),day,day,false), Span(18,19,List(4),all,all,false), Span(6,7,List(5),near,near-01,false), Span(8,9,List(6),possible,possible,false), Span(0,1,List(7),I,i,false)),Map(2 -> copper, 5 -> near-01, 7 -> i, 1 -> like-01, 4 -> all, 6 -> possible, 0 -> like-01, 3 -> day),Map(p -> possible, a -> all, c3 -> copper, d2 -> day, i -> i, l2 -> like-01, l -> like-01, n2 -> near-01))),[Ljava.lang.String;@6497b078,Annotation([Ljava.lang.String;@41c2284a,[Ljava.lang.String;@53aad5d5,[Ljava.lang.String;@46fa7c39),Annotation([Ljava.lang.String;@1fb700ee,[Ljava.lang.String;@4f67eb2a,[Ledu.cmu.lti.nlp.amr.Dependency;@4a668b6e),Annotation([Ljava.lang.String;@5f683daf,[Ljava.lang.String;@78ffe6dc,[Ljava.lang.String;@8317c52),Annotation([Ljava.lang.String;@76f2bbc1,[Ljava.lang.String;@68e965f5,[Ledu.cmu.lti.nlp.amr.Entity;@6f27a732))
AMR:
(a / all, calendar, c3 / copper)
(d2 / day, quant, a / all)
(l / like-01, ARG0, p / possible)
(l / like-01, ARG1, l2 / like-01)
(l / like-01, ARG6, i / i)
(l2 / like-01, ARG1, c3 / copper)
(n2 / near-01, ARG1, p / possible)

WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.1.1
WARNING: makeIds can't find span Id: 0.2.0.1.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 200,148 microseconds
Sentence: take a £20 note on the bus, they just tell you to get on cos theyre lazy as hell

Oracle Span 1:  20 => 20
Oracle Span 2:  bus => bus
Oracle Span 3:  get => get-05
Oracle Span 4:  hell => hell
Oracle Span 5:  just => just
Oracle Span 6:  lazy => lazy
Oracle Span 7:  note => note
Oracle Span 8:  on => on
Oracle Span 9:  take => take-01
Oracle Span 10:  tell => tell-01
Oracle Span 11:  they => they
Oracle Span 12:  you => you
Spans:
Span 3-4:  20 => 20
Span 7-8:  bus => bus
Span 14-15:  get => get-05
Span 20-21:  hell => hell
Span 10-11:  just => just
Span 18-19:  lazy => lazy
Span 4-5:  note => note
Span 5-6:  on => on
Span 0-1:  take => take-01
Span 11-12:  tell => tell-01
Span 9-10:  they => they
Span 12-13:  you => you

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 3-4:  20 => 20
Oracle Span 7-8:  bus => bus
Oracle Span 14-15:  get => get-05
Oracle Span 20-21:  hell => hell
Oracle Span 10-11:  just => just
Oracle Span 18-19:  lazy => lazy
Oracle Span 4-5:  note => note
Oracle Span 5-6:  on => on
Oracle Span 0-1:  take => take-01
Oracle Span 11-12:  tell => tell-01
Oracle Span 9-10:  they => they
Oracle Span 12-13:  you => you

Dependencies:
1	take	_	VB	VB	_	0	root	_	_
2	a	_	DT	DT	_	5	det	_	_
3	£	_	#	#	_	4	number	_	_
4	20	_	CD	CD	_	5	amod	_	_
5	note	_	NN	NN	_	1	dobj	_	_
6	on	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	bus	_	NN	NN	_	6	pobj	_	_
9	,	_	,	,	_	5	punct	_	_
10	they	_	PRP	PRP	_	12	nsubj	_	_
11	just	_	RB	RB	_	12	advmod	_	_
12	tell	_	VBP	VBP	_	5	rcmod	_	_
13	you	_	PRP	PRP	_	12	dobj	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	get	_	VB	VB	_	12	xcomp	_	_
16	on	_	IN	IN	_	15	prep	_	_
17	cos	_	NN	NN	_	16	pobj	_	_
18	theyre	_	JJ	JJ	_	19	amod	_	_
19	lazy	_	JJ	JJ	_	17	amod	_	_
20	as	_	IN	IN	_	15	prep	_	_
21	hell	_	NN	NN	_	20	pobj	_	_

Oracle:
(g / get-05, ARG2, o / on)
(l / lazy, degree, h / hell)
(l / lazy, domain, t3 / they)
(t / take-01, ARG0, y / you)
(t / take-01, ARG1, n / note)
(t / take-01, location, b / bus)
(t4 / tell-01, ARG0, t3 / they)
(t4 / tell-01, ARG1, g / get-05)
(t4 / tell-01, condition, t / take-01)
(t4 / tell-01, mod, j / just)

Input(Some(Graph((tell-01 :condition (take-01 :location bus :ARG1 (note :quant (monetary-quantity :quant 20 :unit pound)) :ARG0 you :mode imperative) :ARG1-of (cause-01 :ARG0 (lazy :degree hell :domain they)) :mod just :ARG2 you :ARG1 (get-05 :ARG2 on :ARG1 you) :ARG0 they),ArrayBuffer(Span(11,12,List(0),tell,tell-01,false), Span(0,1,List(1),take,take-01,false), Span(7,8,List(2),bus,bus,false), Span(4,5,List(3),note,note,false), Span(3,4,List(4),20,20,false), Span(12,13,List(5),you,you,false), Span(18,19,List(6),lazy,lazy,false), Span(20,21,List(7),hell,hell,false), Span(10,11,List(8),just,just,false), Span(14,15,List(9),get,get-05,false), Span(5,6,List(10),on,on,false), Span(9,10,List(11),they,they,false)),Map(2 -> bus, 5 -> you, 8 -> just, 7 -> hell, 1 -> take-01, 4 -> 20, 11 -> they, 6 -> lazy, 9 -> get-05, 0 -> tell-01, 10 -> on, 3 -> note),Map(n -> note, h -> hell, t4 -> tell-01, 2 -> 20, b -> bus, t -> take-01, j -> just, t3 -> they, g -> get-05, y -> you, l -> lazy, o -> on))),[Ljava.lang.String;@2cdd0d4b,Annotation([Ljava.lang.String;@7e9131d5,[Ljava.lang.String;@2e1d27ba,[Ljava.lang.String;@61d6015a),Annotation([Ljava.lang.String;@2525ff7e,[Ljava.lang.String;@524d6d96,[Ledu.cmu.lti.nlp.amr.Dependency;@152aa092),Annotation([Ljava.lang.String;@44a7bfbc,[Ljava.lang.String;@4ef37659,[Ljava.lang.String;@776b83cc),Annotation([Ljava.lang.String;@37858383,[Ljava.lang.String;@4e268090,[Ledu.cmu.lti.nlp.amr.Entity;@1bb266b3))
AMR:
(b / bus, quant, o / on)
(g / get-05, ARG1, t4 / tell-01)
(h / hell, quant, j / just)
(h / hell, quant, l / lazy)
(j / just, quant, t3 / they)
(n / note, quant, 2 / 20)
(o / on, quant, n / note)
(t / take-01, ARG1, 2 / 20)
(t3 / they, quant, b / bus)
(t4 / tell-01, ARG1, j / just)
(y / you, purpose, t4 / tell-01)

WARNING: makeIds can't find span Id: 0.5
WARNING: makeIds can't find span Id: 0.5.3
WARNING: makeIds can't find span Id: 0.5.2
WARNING: makeIds can't find span Id: 0.5.2.0.0
WARNING: makeIds can't find span Id: 0.5.1
WARNING: makeIds can't find span Id: 0.4.0
WARNING: makeIds can't find span Id: 0.4.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 285,283 microseconds
Sentence: its illegal to pay certain amounts in loads of coins. such as you can only pay something like 30pence in 1ps

Oracle Span 1:  amounts => amount
Oracle Span 2:  can => possible
Oracle Span 3:  certain => certain
Oracle Span 4:  coins => coin
Oracle Span 5:  illegal => (law :polarity -)
Oracle Span 6:  loads => load
Oracle Span 7:  only => only
Oracle Span 8:  pay => pay-01
Oracle Span 9:  pay => pay-01
Oracle Span 10:  something => something
Oracle Span 11:  you => you
Spans:
Span 5-6:  amounts => amount
Span 14-15:  can => possible
Span 4-5:  certain => certain
Span 9-10:  coins => coin
Span 1-2:  illegal => (law :polarity -)
Span 7-8:  loads => load
Span 15-16:  only => only
Span 3-4:  pay => pay-01
Span 16-17:  pay => pay-01
Span 17-18:  something => something
Span 13-14:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of only in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of pay in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of something in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of like in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of 30pence in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of 1ps in position 21
Langrangian relaxation converged after 13 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of only in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of pay in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of something in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of like in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of 30pence in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of 1ps in position 21
Oracle Span 5-6:  amounts => amount
Oracle Span 14-15:  can => possible
Oracle Span 4-5:  certain => certain
Oracle Span 9-10:  coins => coin
Oracle Span 1-2:  illegal => (law :polarity -)
Oracle Span 7-8:  loads => load
Oracle Span 15-16:  only => only
Oracle Span 3-4:  pay => pay-01
Oracle Span 16-17:  pay => pay-01
Oracle Span 17-18:  something => something
Oracle Span 13-14:  you => you

Dependencies:
1	its	_	PRP$	PRP$	_	2	poss	_	_
2	illegal	_	JJ	JJ	_	4	nsubj	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	pay	_	VB	VB	_	0	root	_	_
5	certain	_	JJ	JJ	_	6	amod	_	_
6	amounts	_	NNS	NNS	_	4	dobj	_	_
7	in	_	IN	IN	_	4	prep	_	_
8	loads	_	NNS	NNS	_	7	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	coins	_	NNS	NNS	_	9	pobj	_	_
11	.	_	.	.	_	4	punct	_	_
1	such	_	JJ	JJ	_	0	root	_	_
2	as	_	IN	IN	_	6	mark	_	_
3	you	_	PRP	PRP	_	6	nsubj	_	_
4	can	_	MD	MD	_	6	aux	_	_
5	only	_	RB	RB	_	6	advmod	_	_
6	pay	_	VB	VB	_	1	dep	_	_
7	something	_	NN	NN	_	6	dobj	_	_
8	like	_	IN	IN	_	6	prep	_	_
9	30pence	_	NNS	NNS	_	8	pobj	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	1ps	_	CD	CD	_	10	pobj	_	_

Oracle:
(a / amount, quant, c / certain)
(c2 / coin, quant, l / load)
(l3 / law, domain, p / pay-01)
(l3 / law, polarity, -)
(p / pay-01, ARG1, a / amount)
(p / pay-01, example, p2 / possible)
(p / pay-01, instrument, c2 / coin)
(p2 / possible, domain, p3 / pay-01)
(p3 / pay-01, ARG0, y / you)
(p3 / pay-01, ARG1, s / something)
(p3 / pay-01, mod, o / only)

Input(Some(Graph((law :domain (pay-01 :example (possible :domain (pay-01 :mod only :instrument (monetary-quantity :quant 1 :unit pence) :ARG1 (something :example (monetary-quantity :quant 30 :unit pence)) :ARG0 you)) :instrument (coin :quant load) :ARG1 (amount :quant certain)) :polarity -),ArrayBuffer(Span(1,2,List(0, 1),illegal,(law :polarity -),false), Span(3,4,List(2),pay,pay-01,false), Span(14,15,List(3),can,possible,false), Span(16,17,List(4),pay,pay-01,false), Span(15,16,List(5),only,only,false), Span(17,18,List(6),something,something,false), Span(13,14,List(7),you,you,false), Span(9,10,List(8),coins,coin,false), Span(7,8,List(9),loads,load,false), Span(5,6,List(10),amounts,amount,false), Span(4,5,List(11),certain,certain,false)),Map(2 -> pay-01, 5 -> only, 8 -> coin, 7 -> you, 1 -> -, 4 -> pay-01, 11 -> certain, 6 -> something, 9 -> load, 0 -> law, 10 -> amount, 3 -> possible),Map(p2 -> possible, l3 -> law, s -> something, y -> you, p -> pay-01, a -> amount, c -> certain, l -> load, o -> only, p3 -> pay-01, c2 -> coin))),[Ljava.lang.String;@306cf3ea,Annotation([Ljava.lang.String;@2beee7ff,[Ljava.lang.String;@5136d012,[Ljava.lang.String;@5939a379),Annotation([Ljava.lang.String;@e1de817,[Ljava.lang.String;@52102734,[Ledu.cmu.lti.nlp.amr.Dependency;@3541cb24),Annotation([Ljava.lang.String;@2177849e,[Ljava.lang.String;@40cb8df7,[Ljava.lang.String;@13b13b5d),Annotation([Ljava.lang.String;@2892dae4,[Ljava.lang.String;@355ce81c,[Ledu.cmu.lti.nlp.amr.Entity;@29647f75))
AMR:
(a / amount, mod, c / certain)
(c2 / coin, mod, l3 / law)
(l3 / law, polarity, -)
(p / pay-01, ARG0, l / load)
(p / pay-01, ARG1, a / amount)
(p / pay-01, ARG6, l3 / law)
(p2 / possible, op, y / you)
(p3 / pay-01, ARG0, y / you)
(p3 / pay-01, ARG1, s / something)
(p3 / pay-01, ARG3, l / load)
(p3 / pay-01, ARG6, o / only)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.3
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 201,956 microseconds
Sentence: Hello I started university in September, didn't immediately gel with it obviously like most people.

Oracle Span 1:  gel => gel-00
Oracle Span 2:  Hello => hello
Oracle Span 3:  I => i
Oracle Span 4:  immediately => immediate
Oracle Span 5:  most => (person :mod most)
Oracle Span 6:  obviously => obvious
Oracle Span 7:  September => (date-entity :month 9)
Oracle Span 8:  started => start-01
Oracle Span 9:  university => university
Spans:
Span 10-11:  gel => gel-00
Span 0-1:  Hello => hello
Span 1-2:  I => i
Span 9-10:  immediately => immediate
Span 15-16:  most => (person :mod most)
Span 13-14:  obviously => obvious
Span 5-6:  September => (date-entity :month 9)
Span 2-3:  started => start-01
Span 3-4:  university => university

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 10-11:  gel => gel-00
Oracle Span 0-1:  Hello => hello
Oracle Span 1-2:  I => i
Oracle Span 9-10:  immediately => immediate
Oracle Span 15-16:  most => (person :mod most)
Oracle Span 13-14:  obviously => obvious
Oracle Span 5-6:  September => (date-entity :month 9)
Oracle Span 2-3:  started => start-01
Oracle Span 3-4:  university => university

Dependencies:
1	Hello	_	UH	UH	_	3	discourse	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	started	_	VBD	VBD	_	11	ccomp	_	_
4	university	_	NN	NN	_	3	dobj	_	_
5	in	_	IN	IN	_	3	prep	_	_
6	September	_	NNP	NNP	_	5	pobj	_	_
7	,	_	,	,	_	11	punct	_	_
8	did	_	VBD	VBD	_	11	aux	_	_
9	n't	_	RB	RB	_	11	neg	_	_
10	immediately	_	RB	RB	_	11	advmod	_	_
11	gel	_	VB	VB	_	0	root	_	_
12	with	_	IN	IN	_	11	prep	_	_
13	it	_	PRP	PRP	_	12	pobj	_	_
14	obviously	_	RB	RB	_	11	advmod	_	_
15	like	_	IN	IN	_	11	prep	_	_
16	most	_	JJS	JJS	_	17	amod	_	_
17	people	_	NNS	NNS	_	15	pobj	_	_
18	.	_	.	.	_	11	punct	_	_

Oracle:
(d / date-entity, month, 9)
(g / gel-00, ARG1, i / i)
(g / gel-00, ARG2, u / university)
(g / gel-00, manner, o / obvious)
(g / gel-00, time, i2 / immediate)
(p / person, mod, m2 / most)
(s / start-01, ARG0, i / i)
(s / start-01, ARG1, u / university)
(s / start-01, time, d / date-entity)

Input(Some(Graph((multi-sentence :snt1 hello :snt2 (contrast-01 :ARG1 (start-01 :time (date-entity :month 9) :ARG1 university :ARG0 i) :ARG2 (gel-00 :ARG1-of (resemble-01 :ARG2 (person :mod most)) :manner obvious :time immediate :polarity - :ARG1 i :ARG2 university))),ArrayBuffer(Span(5,6,List(0, 1),September,(date-entity :month 9),false), Span(0,1,List(2),Hello,hello,false), Span(2,3,List(3),started,start-01,false), Span(3,4,List(4),university,university,false), Span(1,2,List(5),I,i,false), Span(10,11,List(6),gel,gel-00,false), Span(15,16,List(7, 8),most,(person :mod most),false), Span(13,14,List(9),obviously,obvious,false), Span(9,10,List(10),immediately,immediate,false)),Map(2 -> hello, 5 -> i, 8 -> most, 7 -> person, 1 -> 9, 4 -> university, 6 -> gel-00, 9 -> obvious, 0 -> date-entity, 10 -> immediate, 3 -> start-01),Map(h -> hello, m2 -> most, s -> start-01, d -> date-entity, p -> person, g -> gel-00, i2 -> immediate, i -> i, u -> university, o -> obvious))),[Ljava.lang.String;@3315d2d7,Annotation([Ljava.lang.String;@d6e7bab,[Ljava.lang.String;@5fa07e12,[Ljava.lang.String;@55b53d44),Annotation([Ljava.lang.String;@482bce4f,[Ljava.lang.String;@366647c2,[Ledu.cmu.lti.nlp.amr.Dependency;@6a6afff2),Annotation([Ljava.lang.String;@1649b0e6,[Ljava.lang.String;@865dd6,[Ljava.lang.String;@4da4253),Annotation([Ljava.lang.String;@3972a855,[Ljava.lang.String;@62e7f11d,[Ledu.cmu.lti.nlp.amr.Entity;@503d687a))
AMR:
(d / date-entity, month, 9)
(g / gel-00, ARG0, p / person)
(g / gel-00, ARG1, s / start-01)
(g / gel-00, ARG6, o / obvious)
(g / gel-00, time, i2 / immediate)
(p / person, mod, m2 / most)
(s / start-01, ARG0, i / i)
(s / start-01, ARG1, u / university)
(s / start-01, ARG6, h / hello)
(s / start-01, time, d / date-entity)

WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.3.0
WARNING: makeIds can't find span Id: 0.1.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.1
Decoded in 212,875 microseconds
Sentence: However, I knew it would take me some time to adjust, because I have always been very introverted, and shy and especially anxious and all the rest of it.

Oracle Span 1:  adjust => adjust-01
Oracle Span 2:  all => all
Oracle Span 3:  always => always
Oracle Span 4:  and => and
Oracle Span 5:  anxious => anxious
Oracle Span 6:  because => cause-01
Oracle Span 7:  especially => especially
Oracle Span 8:  have => have-concession-91
Oracle Span 9:  I => i
Oracle Span 10:  introverted => introvert
Oracle Span 11:  knew => know-01
Oracle Span 12:  rest => rest
Oracle Span 13:  shy => shy-01
Oracle Span 14:  some => some
Oracle Span 15:  take => take-10
Oracle Span 16:  time => time
Oracle Span 17:  very => very
Spans:
Span 11-12:  adjust => adjust-01
Span 27-28:  all => all
Span 16-17:  always => always
Span 21-22:  and => and
Span 25-26:  anxious => anxious
Span 13-14:  because => cause-01
Span 24-25:  especially => especially
Span 15-16:  have => have-concession-91
Span 2-3:  I => i
Span 19-20:  introverted => introvert
Span 3-4:  knew => know-01
Span 29-30:  rest => rest
Span 22-23:  shy => shy-01
Span 8-9:  some => some
Span 6-7:  take => take-10
Span 9-10:  time => time
Span 18-19:  very => very

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 11-12:  adjust => adjust-01
Oracle Span 27-28:  all => all
Oracle Span 16-17:  always => always
Oracle Span 21-22:  and => and
Oracle Span 25-26:  anxious => anxious
Oracle Span 13-14:  because => cause-01
Oracle Span 24-25:  especially => especially
Oracle Span 15-16:  have => have-concession-91
Oracle Span 2-3:  I => i
Oracle Span 19-20:  introverted => introvert
Oracle Span 3-4:  knew => know-01
Oracle Span 29-30:  rest => rest
Oracle Span 22-23:  shy => shy-01
Oracle Span 8-9:  some => some
Oracle Span 6-7:  take => take-10
Oracle Span 9-10:  time => time
Oracle Span 18-19:  very => very

Dependencies:
1	However	_	RB	RB	_	4	advmod	_	_
2	,	_	,	,	_	4	punct	_	_
3	I	_	PRP	PRP	_	4	nsubj	_	_
4	knew	_	VBD	VBD	_	0	root	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	would	_	MD	MD	_	7	aux	_	_
7	take	_	VB	VB	_	4	ccomp	_	_
8	me	_	PRP	PRP	_	7	dobj	_	_
9	some	_	DT	DT	_	10	det	_	_
10	time	_	NN	NN	_	7	tmod	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	adjust	_	VB	VB	_	7	vmod	_	_
13	,	_	,	,	_	7	punct	_	_
14	because	_	IN	IN	_	20	mark	_	_
15	I	_	PRP	PRP	_	20	nsubj	_	_
16	have	_	VBP	VBP	_	20	aux	_	_
17	always	_	RB	RB	_	20	advmod	_	_
18	been	_	VBN	VBN	_	20	cop	_	_
19	very	_	RB	RB	_	20	advmod	_	_
20	introverted	_	JJ	JJ	_	7	advcl	_	_
21	,	_	,	,	_	20	punct	_	_
22	and	_	CC	CC	_	20	cc	_	_
23	shy	_	JJ	JJ	_	26	dep	_	_
24	and	_	CC	CC	_	26	cc	_	_
25	especially	_	RB	RB	_	26	advmod	_	_
26	anxious	_	JJ	JJ	_	20	conj	_	_
27	and	_	CC	CC	_	26	cc	_	_
28	all	_	PDT	PDT	_	30	predet	_	_
29	the	_	DT	DT	_	30	det	_	_
30	rest	_	NN	NN	_	26	conj	_	_
31	of	_	IN	IN	_	30	prep	_	_
32	it	_	PRP	PRP	_	31	pobj	_	_
33	.	_	.	.	_	4	punct	_	_

Oracle:
(a / adjust-01, ARG1, i / i)
(a3 / and, op, a4 / anxious)
(a3 / and, op, i2 / introvert)
(a3 / and, op, r / rest)
(a3 / and, op, s2 / shy-01)
(a3 / and, time, a2 / always)
(a4 / anxious, degree, e / especially)
(a4 / anxious, domain, i / i)
(c / cause-01, ARG0, a3 / and)
(c / cause-01, ARG1, k / know-01)
(h / have-concession-91, ARG2, k / know-01)
(i2 / introvert, degree, v / very)
(i2 / introvert, domain, i / i)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t / take-10)
(r / rest, mod, a5 / all)
(s2 / shy-01, ARG0, i / i)
(t / take-10, ARG0, a / adjust-01)
(t / take-10, ARG1, t2 / time)
(t / take-10, ARG2, i / i)
(t2 / time, mod, s / some)

Input(Some(Graph((have-concession-91 :ARG2 (know-01 :ARG1-of (cause-01 :ARG0 (and :time always :op (rest :mod all) :op (anxious :degree especially :domain i) :op (shy-01 :ARG0 i) :op (introvert :degree very :domain i))) :ARG1 (take-10 :ARG1 (time :mod some) :ARG0 (adjust-01 :ARG1 i) :ARG2 i) :ARG0 i)),ArrayBuffer(Span(3,4,List(0),knew,know-01,false), Span(13,14,List(1),because,cause-01,false), Span(21,22,List(2),and,and,false), Span(16,17,List(3),always,always,false), Span(29,30,List(4),rest,rest,false), Span(27,28,List(5),all,all,false), Span(25,26,List(6),anxious,anxious,false), Span(24,25,List(7),especially,especially,false), Span(22,23,List(8),shy,shy-01,false), Span(19,20,List(9),introverted,introvert,false), Span(18,19,List(10),very,very,false), Span(6,7,List(11),take,take-10,false), Span(9,10,List(12),time,time,false), Span(8,9,List(13),some,some,false), Span(11,12,List(14),adjust,adjust-01,false), Span(2,3,List(15),I,i,false), Span(15,16,List(16),have,have-concession-91,false)),Map(2 -> and, 5 -> all, 12 -> time, 15 -> i, 8 -> shy-01, 7 -> especially, 1 -> cause-01, 4 -> rest, 11 -> take-10, 14 -> adjust-01, 6 -> anxious, 9 -> introvert, 0 -> know-01, 16 -> have-concession-91, 10 -> very, 3 -> always, 13 -> some),Map(e -> especially, h -> have-concession-91, s2 -> shy-01, t -> take-10, k -> know-01, a3 -> and, s -> some, v -> very, a -> adjust-01, a5 -> all, t2 -> time, i2 -> introvert, i -> i, r -> rest, a2 -> always, c -> cause-01, a4 -> anxious))),[Ljava.lang.String;@6a370f4,Annotation([Ljava.lang.String;@2abf4075,[Ljava.lang.String;@770d3326,[Ljava.lang.String;@4cc8eb05),Annotation([Ljava.lang.String;@51f116b8,[Ljava.lang.String;@19d481b,[Ledu.cmu.lti.nlp.amr.Dependency;@1f97cf0d),Annotation([Ljava.lang.String;@140c9f39,[Ljava.lang.String;@4d910fd6,[Ljava.lang.String;@26275bef),Annotation([Ljava.lang.String;@7690781,[Ljava.lang.String;@77eca502,[Ledu.cmu.lti.nlp.amr.Entity;@3246fb96))
AMR:
(a / adjust-01, ARG1, t2 / time)
(a4 / anxious, degree, e / especially)
(c / cause-01, ARG0, a3 / and)
(c / cause-01, ARG1, h / have-concession-91)
(h / have-concession-91, ARG1, v / very)
(i2 / introvert, degree, v / very)
(i2 / introvert, mod, a2 / always)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t / take-10)
(k / know-01, ARG6, a / adjust-01)
(r / rest, quant, a5 / all)
(s2 / shy-01, ARG0, r / rest)
(s2 / shy-01, ARG1, i2 / introvert)
(s2 / shy-01, ARG6, e / especially)
(t / take-10, ARG1, c / cause-01)
(t2 / time, quant, s / some)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.4
WARNING: makeIds can't find span Id: 0.0.2.0.3
WARNING: makeIds can't find span Id: 0.0.2.0.3.0
WARNING: makeIds can't find span Id: 0.0.2.0.2
WARNING: makeIds can't find span Id: 0.0.2.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 761,048 microseconds
Sentence: The first night I was here, all my housemates and I went out and it was the hardest thing I have ever ever had to do.

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  do => do-02
Oracle Span 5:  ever => ever
Oracle Span 6:  hardest => (hard :degree most)
Oracle Span 7:  here => here
Oracle Span 8:  housemates => housemate
Oracle Span 9:  I => i
Oracle Span 10:  night => night
Oracle Span 11:  thing => thing
Oracle Span 12:  went => go-17
Spans:
Span 7-8:  all => all
Span 10-11:  and => and
Span 14-15:  and => and
Span 26-27:  do => do-02
Span 22-23:  ever => ever
Span 18-19:  hardest => (hard :degree most)
Span 5-6:  here => here
Span 9-10:  housemates => housemate
Span 3-4:  I => i
Span 2-3:  night => night
Span 19-20:  thing => thing
Span 12-13:  went => go-17

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 7-8:  all => all
Oracle Span 10-11:  and => and
Oracle Span 14-15:  and => and
Oracle Span 26-27:  do => do-02
Oracle Span 22-23:  ever => ever
Oracle Span 18-19:  hardest => (hard :degree most)
Oracle Span 5-6:  here => here
Oracle Span 9-10:  housemates => housemate
Oracle Span 3-4:  I => i
Oracle Span 2-3:  night => night
Oracle Span 19-20:  thing => thing
Oracle Span 12-13:  went => go-17

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	first	_	JJ	JJ	_	3	amod	_	_
3	night	_	NN	NN	_	5	tmod	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	was	_	VBD	VBD	_	0	root	_	_
6	here	_	RB	RB	_	5	advmod	_	_
7	,	_	,	,	_	5	punct	_	_
8	all	_	DT	DT	_	10	dep	_	_
9	my	_	PRP$	PRP$	_	10	poss	_	_
10	housemates	_	NNS	NNS	_	5	conj	_	_
11	and	_	CC	CC	_	5	cc	_	_
12	I	_	PRP	PRP	_	13	nsubj	_	_
13	went	_	VBD	VBD	_	5	conj	_	_
14	out	_	RP	RP	_	13	prt	_	_
15	and	_	CC	CC	_	13	cc	_	_
16	it	_	PRP	PRP	_	20	nsubj	_	_
17	was	_	VBD	VBD	_	20	cop	_	_
18	the	_	DT	DT	_	20	det	_	_
19	hardest	_	JJS	JJS	_	20	amod	_	_
20	thing	_	NN	NN	_	13	conj	_	_
21	I	_	PRP	PRP	_	25	nsubj	_	_
22	have	_	VBP	VBP	_	25	aux	_	_
23	ever	_	RB	RB	_	24	advmod	_	_
24	ever	_	RB	RB	_	25	advmod	_	_
25	had	_	VBN	VBN	_	20	rcmod	_	_
26	to	_	TO	TO	_	27	aux	_	_
27	do	_	VB	VB	_	25	xcomp	_	_
28	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, g / go-17)
(a / and, op, h3 / hard)
(a2 / and, op, h2 / housemate)
(a2 / and, op, i / i)
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, t / thing)
(d / do-02, time, e / ever)
(g / go-17, ARG0, a2 / and)
(g / go-17, time, n / night)
(h2 / housemate, poss, i / i)
(h2 / housemate, quant, a3 / all)
(h3 / hard, compared-to, t / thing)
(h3 / hard, degree, m / most)
(h3 / hard, domain, g / go-17)

Input(Some(Graph((and :op (hard :compared-to (thing :ARG1-of (do-02 :ARG1-of obligate-01 :time ever :ARG0 i)) :degree most :domain go-17) :op (go-17 :time (night :time-of (be-located-at-91 :ARG1 i :ARG2 here) :ord (ordinal-entity :value 1)) :ARG0 (and :op (housemate :quant all :poss i) :op i))),ArrayBuffer(Span(10,11,List(0),and,and,false), Span(18,19,List(1, 2),hardest,(hard :degree most),false), Span(19,20,List(3),thing,thing,false), Span(26,27,List(4),do,do-02,false), Span(22,23,List(5),ever,ever,false), Span(12,13,List(6),went,go-17,false), Span(2,3,List(7),night,night,false), Span(3,4,List(8),I,i,false), Span(5,6,List(9),here,here,false), Span(14,15,List(10),and,and,false), Span(9,10,List(11),housemates,housemate,false), Span(7,8,List(12),all,all,false)),Map(2 -> most, 5 -> ever, 12 -> all, 8 -> i, 7 -> night, 1 -> hard, 4 -> do-02, 11 -> housemate, 6 -> go-17, 9 -> here, 0 -> and, 10 -> and, 3 -> thing),Map(e -> ever, n -> night, h -> here, h2 -> housemate, t -> thing, a3 -> all, d -> do-02, m -> most, g -> go-17, a -> and, a2 -> and, i -> i, h3 -> hard))),[Ljava.lang.String;@2e222612,Annotation([Ljava.lang.String;@61386958,[Ljava.lang.String;@73ee04c8,[Ljava.lang.String;@7671cb68),Annotation([Ljava.lang.String;@49dc7102,[Ljava.lang.String;@6b8ca3c8,[Ledu.cmu.lti.nlp.amr.Dependency;@68c72235),Annotation([Ljava.lang.String;@10959ece,[Ljava.lang.String;@3a6bb9bf,[Ljava.lang.String;@34f7cfd9),Annotation([Ljava.lang.String;@65f095f8,[Ljava.lang.String;@59af0466,[Ledu.cmu.lti.nlp.amr.Entity;@3e6ef8ad))
AMR:
(a / and, op, g / go-17)
(a / and, op, h2 / housemate)
(a2 / and, op, g / go-17)
(d / do-02, ARG0, e / ever)
(d / do-02, ARG1, t / thing)
(g / go-17, ARG0, t / thing)
(g / go-17, ARG1, i / i)
(h / here, domain, i / i)
(h2 / housemate, calendar, a3 / all)
(h3 / hard, degree, m / most)
(i / i, calendar, n / night)
(t / thing, mod, h3 / hard)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
Decoded in 299,427 microseconds
Sentence: To go into the SU bar on my own, sober.

Oracle Span 1:  bar => bar
Oracle Span 2:  go => go-06
Oracle Span 3:  own => own
Oracle Span 4:  sober => sober
Spans:
Span 5-6:  bar => bar
Span 1-2:  go => go-06
Span 8-9:  own => own
Span 10-11:  sober => sober

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 5-6:  bar => bar
Oracle Span 1-2:  go => go-06
Oracle Span 8-9:  own => own
Oracle Span 10-11:  sober => sober

Dependencies:
1	To	_	TO	TO	_	2	aux	_	_
2	go	_	VB	VB	_	0	root	_	_
3	into	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	SU	_	NNP	NNP	_	6	nn	_	_
6	bar	_	NN	NN	_	3	pobj	_	_
7	on	_	IN	IN	_	2	prep	_	_
8	my	_	PRP$	PRP$	_	9	poss	_	_
9	own	_	JJ	JJ	_	7	pobj	_	_
10	,	_	,	,	_	2	punct	_	_
11	sober	_	JJ	JJ	_	2	acomp	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(g / go-06, ARG2, b / bar)
(g / go-06, manner, o / own)
(g / go-06, time, s / sober)

Input(Some(Graph((go-06 :time (sober :domain i) :manner (own :poss i) :ARG2 (bar :mod (union :mod (person :ARG0-of study-01))) :ARG0 i),ArrayBuffer(Span(1,2,List(0),go,go-06,false), Span(10,11,List(1),sober,sober,false), Span(8,9,List(2),own,own,false), Span(5,6,List(3),bar,bar,false)),Map(2 -> own, 1 -> sober, 0 -> go-06, 3 -> bar),Map(b -> bar, s -> sober, g -> go-06, o -> own))),[Ljava.lang.String;@346d61be,Annotation([Ljava.lang.String;@55536d9e,[Ljava.lang.String;@747edf66,[Ljava.lang.String;@3d1cfad4),Annotation([Ljava.lang.String;@62230c58,[Ljava.lang.String;@2cd2a21f,[Ledu.cmu.lti.nlp.amr.Dependency;@2e55dd0c),Annotation([Ljava.lang.String;@74455848,[Ljava.lang.String;@e7edb54,[Ljava.lang.String;@378542de),Annotation([Ljava.lang.String;@3738449f,[Ljava.lang.String;@69e1dd28,[Ledu.cmu.lti.nlp.amr.Entity;@11bd0f3b))
AMR:
(g / go-06, ARG1, s / sober)
(g / go-06, ARG2, b / bar)
(g / go-06, ARG6, o / own)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
Decoded in 56,175 microseconds
Sentence: Anyways more to the point; Here are the facts:

Oracle Span 1:  facts => fact
Oracle Span 2:  Here => here
Oracle Span 3:  more => more
Oracle Span 4:  point => point
Spans:
Span 9-10:  facts => fact
Span 6-7:  Here => here
Span 1-2:  more => more
Span 4-5:  point => point

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 9-10:  facts => fact
Oracle Span 6-7:  Here => here
Oracle Span 1-2:  more => more
Oracle Span 4-5:  point => point

Dependencies:
1	Anyways	_	NNS	NNS	_	2	dep	_	_
2	more	_	JJR	JJR	_	0	root	_	_
3	to	_	TO	TO	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	point	_	NN	NN	_	3	pobj	_	_
6	;	_	:	:	_	5	punct	_	_
7	Here	_	RB	RB	_	10	advmod	_	_
8	are	_	VBP	VBP	_	10	cop	_	_
9	the	_	DT	DT	_	10	det	_	_
10	facts	_	NNS	NNS	_	5	rcmod	_	_
11	:	_	:	:	_	5	punct	_	_

Oracle:
(f / fact, location, h / here)
(p / point, degree, m / more)

Input(Some(Graph((multi-sentence :snt2 (fact :location here) :snt1 (contrast-01 :ARG2 (point :degree more))),ArrayBuffer(Span(9,10,List(0),facts,fact,false), Span(6,7,List(1),Here,here,false), Span(4,5,List(2),point,point,false), Span(1,2,List(3),more,more,false)),Map(2 -> point, 1 -> here, 0 -> fact, 3 -> more),Map(h -> here, m -> more, p -> point, f -> fact))),[Ljava.lang.String;@c333c60,Annotation([Ljava.lang.String;@79da8dc5,[Ljava.lang.String;@1eb5174b,[Ljava.lang.String;@67080771),Annotation([Ljava.lang.String;@72cde7cc,[Ljava.lang.String;@5fd4f8f5,[Ledu.cmu.lti.nlp.amr.Dependency;@696da30b),Annotation([Ljava.lang.String;@4e7912d8,[Ljava.lang.String;@53976f5c,[Ljava.lang.String;@2bfc268b),Annotation([Ljava.lang.String;@2f8dad04,[Ljava.lang.String;@29e495ff,[Ledu.cmu.lti.nlp.amr.Entity;@41e1e210))
AMR:
(m / more, calendar, p / point)
(p / point, calendar, h / here)
(p / point, location, f / fact)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 19,301 microseconds
Sentence: - I am not enjoying university having been here 5months or so; I'm disillusioned by the course, not enjoying the projects set, and I don't like the course delivery as much.

Oracle Span 1:  ; => and
Oracle Span 2:  course => course
Oracle Span 3:  course => course
Oracle Span 4:  delivery => deliver-01
Oracle Span 5:  disillusioned => disillusion-01
Oracle Span 6:  enjoying => enjoy-01
Oracle Span 7:  enjoying => enjoy-01
Oracle Span 8:  here => here
Oracle Span 9:  I => i
Oracle Span 10:  like => like-01
Oracle Span 11:  much => much
Oracle Span 12:  projects => project
Oracle Span 13:  set => set-02
Oracle Span 14:  university => university
Spans:
Span 12-13:  ; => and
Span 18-19:  course => course
Span 32-33:  course => course
Span 33-34:  delivery => deliver-01
Span 15-16:  disillusioned => disillusion-01
Span 4-5:  enjoying => enjoy-01
Span 21-22:  enjoying => enjoy-01
Span 8-9:  here => here
Span 1-2:  I => i
Span 30-31:  like => like-01
Span 35-36:  much => much
Span 23-24:  projects => project
Span 24-25:  set => set-02
Span 5-6:  university => university

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Oracle Span 12-13:  ; => and
Oracle Span 18-19:  course => course
Oracle Span 32-33:  course => course
Oracle Span 33-34:  delivery => deliver-01
Oracle Span 15-16:  disillusioned => disillusion-01
Oracle Span 4-5:  enjoying => enjoy-01
Oracle Span 21-22:  enjoying => enjoy-01
Oracle Span 8-9:  here => here
Oracle Span 1-2:  I => i
Oracle Span 30-31:  like => like-01
Oracle Span 35-36:  much => much
Oracle Span 23-24:  projects => project
Oracle Span 24-25:  set => set-02
Oracle Span 5-6:  university => university

Dependencies:
1	-	_	:	:	_	5	punct	_	_
2	I	_	PRP	PRP	_	5	nsubj	_	_
3	am	_	VBP	VBP	_	5	aux	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	enjoying	_	VBG	VBG	_	0	root	_	_
6	university	_	NN	NN	_	5	dobj	_	_
7	having	_	VBG	VBG	_	8	aux	_	_
8	been	_	VBN	VBN	_	5	vmod	_	_
9	here	_	RB	RB	_	8	advmod	_	_
10	5months	_	NNS	NNS	_	8	tmod	_	_
11	or	_	CC	CC	_	10	cc	_	_
12	so	_	RB	RB	_	10	advmod	_	_
13	;	_	:	:	_	5	punct	_	_
14	I	_	PRP	PRP	_	16	nsubjpass	_	_
15	'm	_	VBP	VBP	_	16	auxpass	_	_
16	disillusioned	_	VBN	VBN	_	5	conj	_	_
17	by	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	course	_	NN	NN	_	17	pobj	_	_
20	,	_	,	,	_	16	punct	_	_
21	not	_	RB	RB	_	22	neg	_	_
22	enjoying	_	VBG	VBG	_	16	xcomp	_	_
23	the	_	DT	DT	_	25	det	_	_
24	projects	_	NNS	NNS	_	25	nn	_	_
25	set	_	NN	NN	_	22	dobj	_	_
26	,	_	,	,	_	5	punct	_	_
27	and	_	CC	CC	_	5	cc	_	_
28	I	_	PRP	PRP	_	31	nsubj	_	_
29	do	_	VBP	VBP	_	31	aux	_	_
30	n't	_	RB	RB	_	31	neg	_	_
31	like	_	VB	VB	_	5	conj	_	_
32	the	_	DT	DT	_	34	det	_	_
33	course	_	NN	NN	_	34	nn	_	_
34	delivery	_	NN	NN	_	31	dobj	_	_
35	as	_	RB	RB	_	36	advmod	_	_
36	much	_	RB	RB	_	31	advmod	_	_
37	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, d / disillusion-01)
(a / and, op, e2 / enjoy-01)
(a / and, op, l / like-01)
(d / disillusion-01, ARG0, c / course)
(d / disillusion-01, ARG1, i / i)
(d2 / deliver-01, ARG1, c2 / course)
(e / enjoy-01, ARG0, i / i)
(e / enjoy-01, ARG1, u / university)
(e2 / enjoy-01, ARG0, i / i)
(e2 / enjoy-01, ARG1, p2 / project)
(l / like-01, ARG0, i / i)
(l / like-01, ARG1, d2 / deliver-01)
(l / like-01, degree, m4 / much)
(s / set-02, ARG1, p2 / project)

Input(Some(Graph((multi-sentence :snt1 (enjoy-01 :time (after :op (be-located-at-91 :ARG2 here :duration (or-so :op (temporal-quantity :quant 5 :unit month)) :ARG1 i)) :ARG1 university :ARG0 i :polarity -) :snt2 (and :op (like-01 :degree much :ARG1 (deliver-01 :ARG1 course) :polarity - :ARG0 i) :op (enjoy-01 :ARG1 (project :ARG1-of set-02) :polarity - :ARG0 i) :op (disillusion-01 :ARG0 course :ARG1 i))),ArrayBuffer(Span(4,5,List(0),enjoying,enjoy-01,false), Span(8,9,List(1),here,here,false), Span(5,6,List(2),university,university,false), Span(1,2,List(3),I,i,false), Span(12,13,List(4),;,and,false), Span(30,31,List(5),like,like-01,false), Span(35,36,List(6),much,much,false), Span(18,19,List(7),course,course,false), Span(21,22,List(8),enjoying,enjoy-01,false), Span(23,24,List(9),projects,project,false), Span(24,25,List(10),set,set-02,false), Span(15,16,List(11),disillusioned,disillusion-01,false), Span(32,33,List(12),course,course,false), Span(33,34,List(13),delivery,deliver-01,false)),Map(2 -> university, 5 -> like-01, 12 -> course, 8 -> enjoy-01, 7 -> course, 1 -> here, 4 -> and, 11 -> disillusion-01, 6 -> much, 9 -> project, 0 -> enjoy-01, 10 -> set-02, 3 -> i, 13 -> deliver-01),Map(e -> enjoy-01, h -> here, p2 -> project, e2 -> enjoy-01, s -> set-02, d -> disillusion-01, a -> and, d2 -> deliver-01, m4 -> much, i -> i, c -> course, l -> like-01, u -> university, c2 -> course))),[Ljava.lang.String;@be35cd9,Annotation([Ljava.lang.String;@4944252c,[Ljava.lang.String;@44821a96,[Ljava.lang.String;@a3d8174),Annotation([Ljava.lang.String;@1ba9117e,[Ljava.lang.String;@732c2a62,[Ledu.cmu.lti.nlp.amr.Dependency;@272ed83b),Annotation([Ljava.lang.String;@41fecb8b,[Ljava.lang.String;@120f102b,[Ljava.lang.String;@625732),Annotation([Ljava.lang.String;@51dcb805,[Ljava.lang.String;@66498326,[Ledu.cmu.lti.nlp.amr.Entity;@cad498c))
AMR:
(d / disillusion-01, ARG0, c2 / course)
(d / disillusion-01, ARG1, i / i)
(d / disillusion-01, ARG6, a / and)
(d / disillusion-01, purpose, e2 / enjoy-01)
(d2 / deliver-01, ARG1, c / course)
(e / enjoy-01, ARG0, h / here)
(e / enjoy-01, ARG1, u / university)
(e / enjoy-01, ARG6, i / i)
(e2 / enjoy-01, ARG1, s / set-02)
(l / like-01, ARG0, i / i)
(l / like-01, ARG1, d2 / deliver-01)
(l / like-01, ARG6, m4 / much)
(s / set-02, ARG1, p2 / project)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.2
WARNING: makeIds can't find span Id: 0.1.2.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.2.1
Decoded in 955,540 microseconds
Sentence: The University made out it was much better than it seems.

Oracle Span 1:  better => good
Oracle Span 2:  it => it
Oracle Span 3:  made => make-12
Oracle Span 4:  much => much
Oracle Span 5:  seems => seem-01
Oracle Span 6:  University => university
Spans:
Span 7-8:  better => good
Span 4-5:  it => it
Span 2-3:  made => make-12
Span 6-7:  much => much
Span 10-11:  seems => seem-01
Span 1-2:  University => university

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 7-8:  better => good
Oracle Span 4-5:  it => it
Oracle Span 2-3:  made => make-12
Oracle Span 6-7:  much => much
Oracle Span 10-11:  seems => seem-01
Oracle Span 1-2:  University => university

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	University	_	NNP	NNP	_	3	nsubj	_	_
3	made	_	VBD	VBD	_	0	root	_	_
4	out	_	RP	RP	_	3	prt	_	_
5	it	_	PRP	PRP	_	8	nsubj	_	_
6	was	_	VBD	VBD	_	8	cop	_	_
7	much	_	RB	RB	_	8	advmod	_	_
8	better	_	JJR	JJR	_	3	ccomp	_	_
9	than	_	IN	IN	_	11	mark	_	_
10	it	_	PRP	PRP	_	11	nsubj	_	_
11	seems	_	VBZ	VBZ	_	8	ccomp	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(g / good, compared-to, s / seem-01)
(g / good, domain, i / it)
(m / make-12, ARG0, u / university)
(m / make-12, ARG1, g / good)
(s / seem-01, ARG1, i / it)

Input(Some(Graph((make-12 :ARG1 (good :compared-to (seem-01 :ARG1 it) :degree (more :quant much) :domain it) :ARG0 university),ArrayBuffer(Span(2,3,List(0),made,make-12,false), Span(7,8,List(1),better,good,false), Span(10,11,List(2),seems,seem-01,false), Span(4,5,List(3),it,it,false), Span(6,7,List(4),much,much,false), Span(1,2,List(5),University,university,false)),Map(2 -> seem-01, 5 -> university, 1 -> good, 4 -> much, 0 -> make-12, 3 -> it),Map(m3 -> much, s -> seem-01, m -> make-12, g -> good, i -> it, u -> university))),[Ljava.lang.String;@1e6454ec,Annotation([Ljava.lang.String;@2accdbb5,[Ljava.lang.String;@b62d79,[Ljava.lang.String;@6631f5ca),Annotation([Ljava.lang.String;@5ace1ed4,[Ljava.lang.String;@1613674b,[Ledu.cmu.lti.nlp.amr.Dependency;@27ff5d15),Annotation([Ljava.lang.String;@4e096385,[Ljava.lang.String;@649bec2e,[Ljava.lang.String;@693fe6c9),Annotation([Ljava.lang.String;@34f5090e,[Ljava.lang.String;@31e5415e,[Ledu.cmu.lti.nlp.amr.Entity;@a2431d0))
AMR:
(g / good, compared-to, s / seem-01)
(m / make-12, ARG0, u / university)
(m / make-12, ARG1, g / good)
(m / make-12, ARG6, i / it)
(s / seem-01, ARG1, m3 / much)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 89,882 microseconds
Sentence: - I had a bad start to the first term; student finance was delayed, adding to my stress levels, I was so worried I was unable to progress with work, conclusively it all piled up.

Oracle Span 1:  ; => and
Oracle Span 2:  adding => add-02
Oracle Span 3:  all => all
Oracle Span 4:  bad => bad
Oracle Span 5:  conclusively => conclude-01
Oracle Span 6:  delayed => delay-01
Oracle Span 7:  finance => finance
Oracle Span 8:  I => i
Oracle Span 9:  levels => level
Oracle Span 10:  piled => pile-01
Oracle Span 11:  progress => progress-01
Oracle Span 12:  so => so
Oracle Span 13:  start => start-01
Oracle Span 14:  stress => stress
Oracle Span 15:  student => (person :ARG0-of study-01)
Oracle Span 16:  term => term
Oracle Span 17:  work => work-01
Oracle Span 18:  worried => worry-01
Spans:
Span 10-11:  ; => and
Span 16-17:  adding => add-02
Span 36-37:  all => all
Span 4-5:  bad => bad
Span 34-35:  conclusively => conclude-01
Span 14-15:  delayed => delay-01
Span 12-13:  finance => finance
Span 1-2:  I => i
Span 20-21:  levels => level
Span 37-38:  piled => pile-01
Span 30-31:  progress => progress-01
Span 24-25:  so => so
Span 5-6:  start => start-01
Span 19-20:  stress => stress
Span 11-12:  student => (person :ARG0-of study-01)
Span 9-10:  term => term
Span 32-33:  work => work-01
Span 25-26:  worried => worry-01

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Oracle Span 10-11:  ; => and
Oracle Span 16-17:  adding => add-02
Oracle Span 36-37:  all => all
Oracle Span 4-5:  bad => bad
Oracle Span 34-35:  conclusively => conclude-01
Oracle Span 14-15:  delayed => delay-01
Oracle Span 12-13:  finance => finance
Oracle Span 1-2:  I => i
Oracle Span 20-21:  levels => level
Oracle Span 37-38:  piled => pile-01
Oracle Span 30-31:  progress => progress-01
Oracle Span 24-25:  so => so
Oracle Span 5-6:  start => start-01
Oracle Span 19-20:  stress => stress
Oracle Span 11-12:  student => (person :ARG0-of study-01)
Oracle Span 9-10:  term => term
Oracle Span 32-33:  work => work-01
Oracle Span 25-26:  worried => worry-01

Dependencies:
1	-	_	:	:	_	3	punct	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	had	_	VBD	VBD	_	0	root	_	_
4	a	_	DT	DT	_	6	det	_	_
5	bad	_	JJ	JJ	_	6	amod	_	_
6	start	_	NN	NN	_	3	dobj	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	first	_	JJ	JJ	_	10	amod	_	_
10	term	_	NN	NN	_	7	pobj	_	_
11	;	_	:	:	_	3	punct	_	_
12	student	_	NN	NN	_	13	nn	_	_
13	finance	_	NN	NN	_	15	nsubjpass	_	_
14	was	_	VBD	VBD	_	15	auxpass	_	_
15	delayed	_	VBN	VBN	_	3	parataxis	_	_
16	,	_	,	,	_	3	punct	_	_
17	adding	_	VBG	VBG	_	26	vmod	_	_
18	to	_	TO	TO	_	17	prep	_	_
19	my	_	PRP$	PRP$	_	21	poss	_	_
20	stress	_	NN	NN	_	21	nn	_	_
21	levels	_	NNS	NNS	_	18	pobj	_	_
22	,	_	,	,	_	26	punct	_	_
23	I	_	PRP	PRP	_	26	nsubj	_	_
24	was	_	VBD	VBD	_	26	cop	_	_
25	so	_	RB	RB	_	26	advmod	_	_
26	worried	_	JJ	JJ	_	3	parataxis	_	_
27	I	_	PRP	PRP	_	29	nsubj	_	_
28	was	_	VBD	VBD	_	29	cop	_	_
29	unable	_	JJ	JJ	_	26	ccomp	_	_
30	to	_	TO	TO	_	31	aux	_	_
31	progress	_	VB	VB	_	29	xcomp	_	_
32	with	_	IN	IN	_	31	prep	_	_
33	work	_	NN	NN	_	32	pobj	_	_
34	,	_	,	,	_	3	punct	_	_
35	conclusively	_	RB	RB	_	38	advmod	_	_
36	it	_	PRP	PRP	_	38	nsubj	_	_
37	all	_	DT	DT	_	38	advmod	_	_
38	piled	_	VBD	VBD	_	3	parataxis	_	_
39	up	_	RP	RP	_	38	prt	_	_
40	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, d / delay-01)
(a / and, op, w / worry-01)
(a3 / add-02, ARG0, d / delay-01)
(a3 / add-02, ARG2, l / level)
(d / delay-01, ARG1, f2 / finance)
(f2 / finance, mod, p4 / person)
(l / level, mod, s3 / stress)
(l / level, poss, i / i)
(p2 / pile-01, ARG1, a2 / all)
(p3 / progress-01, ARG1, w2 / work-01)
(s / study-01, ARG0, p4 / person)
(s2 / start-01, ARG0, i / i)
(s2 / start-01, ARG1, t / term)
(s2 / start-01, manner, b / bad)
(w / worry-01, ARG1, i / i)
(w / worry-01, degree, s4 / so)
(w2 / work-01, ARG0, i / i)

Input(Some(Graph((multi-sentence :snt1 (start-01 :manner bad :ARG1 (term :ord (ordinal-entity :value 1)) :ARG0 i) :snt2 (and :ARG1-of (cause-01 :ARG0 (pile-01 :ARG1 all) :ARG1-of conclude-01) :op (worry-01 :ARG0-of (cause-01 :ARG1 (capable-41 :polarity - :ARG2 (progress-01 :ARG1 (work-01 :ARG0 i)))) :degree so :ARG1 i) :op (delay-01 :ARG0-of (add-02 :ARG2 (level :mod stress :poss i)) :ARG1 (finance :mod (person :ARG0-of study-01))))),ArrayBuffer(Span(5,6,List(0),start,start-01,false), Span(4,5,List(1),bad,bad,false), Span(9,10,List(2),term,term,false), Span(1,2,List(3),I,i,false), Span(10,11,List(4),;,and,false), Span(37,38,List(5),piled,pile-01,false), Span(36,37,List(6),all,all,false), Span(25,26,List(7),worried,worry-01,false), Span(30,31,List(8),progress,progress-01,false), Span(32,33,List(9),work,work-01,false), Span(24,25,List(10),so,so,false), Span(14,15,List(11),delayed,delay-01,false), Span(16,17,List(12),adding,add-02,false), Span(20,21,List(13),levels,level,false), Span(19,20,List(14),stress,stress,false), Span(12,13,List(15),finance,finance,false), Span(34,35,List(16),conclusively,conclude-01,false), Span(11,12,List(17, 18),student,(person :ARG0-of study-01),false)),Map(2 -> term, 5 -> pile-01, 12 -> add-02, 15 -> finance, 8 -> progress-01, 18 -> study-01, 7 -> worry-01, 17 -> person, 1 -> bad, 4 -> and, 11 -> delay-01, 14 -> stress, 6 -> all, 9 -> work-01, 0 -> start-01, 16 -> conclude-01, 10 -> so, 3 -> i, 13 -> level),Map(w -> worry-01, s2 -> start-01, t -> term, b -> bad, p2 -> pile-01, a3 -> add-02, s -> study-01, s4 -> so, d -> delay-01, a -> and, p4 -> person, w2 -> work-01, a2 -> all, i -> i, s3 -> stress, f2 -> finance, l -> level, p3 -> progress-01, c5 -> conclude-01))),[Ljava.lang.String;@1cbb87f3,Annotation([Ljava.lang.String;@1a4013,[Ljava.lang.String;@1b6e1eff,[Ljava.lang.String;@306f16f3),Annotation([Ljava.lang.String;@702b8b12,[Ljava.lang.String;@22e357dc,[Ledu.cmu.lti.nlp.amr.Dependency;@49912c99),Annotation([Ljava.lang.String;@10163d6,[Ljava.lang.String;@2dde1bff,[Ljava.lang.String;@15bbf42f),Annotation([Ljava.lang.String;@550ee7e5,[Ljava.lang.String;@5f9b2141,[Ledu.cmu.lti.nlp.amr.Entity;@247d8ae))
AMR:
(a / and, op, p4 / person)
(a3 / add-02, ARG1, d / delay-01)
(a3 / add-02, ARG2, s3 / stress)
(c5 / conclude-01, ARG1, a2 / all)
(d / delay-01, ARG1, f2 / finance)
(l / level, mod, s3 / stress)
(p2 / pile-01, ARG1, a2 / all)
(p3 / progress-01, ARG1, w2 / work-01)
(s / study-01, ARG0, p4 / person)
(s / study-01, ARG1, f2 / finance)
(s2 / start-01, ARG0, i / i)
(s2 / start-01, ARG2, t / term)
(s2 / start-01, ARG6, a / and)
(s2 / start-01, mod, b / bad)
(w / worry-01, ARG1, a / and)
(w / worry-01, ARG6, s4 / so)
(w2 / work-01, ARG0, p4 / person)
(w2 / work-01, ARG1, c5 / conclude-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
Decoded in 1,297,379 microseconds
Sentence: - I was assigned a counselor through the university; had seen her for about 5-6weeks (block sessions), if I'm honest it didn't really work; because I was never open with her.

Oracle Span 1:  ; => and
Oracle Span 2:  about => about
Oracle Span 3:  assigned => assign-01
Oracle Span 4:  block => block
Oracle Span 5:  counselor => (person :ARG0-of counsel-01)
Oracle Span 6:  honest => honest
Oracle Span 7:  I => i
Oracle Span 8:  if => cause-01
Oracle Span 9:  open => open-03
Oracle Span 10:  really => real
Oracle Span 11:  seen => see-01
Oracle Span 12:  sessions => session
Oracle Span 13:  university => university
Oracle Span 14:  work => work-02
Spans:
Span 9-10:  ; => and
Span 14-15:  about => about
Span 3-4:  assigned => assign-01
Span 17-18:  block => block
Span 5-6:  counselor => (person :ARG0-of counsel-01)
Span 24-25:  honest => honest
Span 1-2:  I => i
Span 21-22:  if => cause-01
Span 35-36:  open => open-03
Span 28-29:  really => real
Span 11-12:  seen => see-01
Span 18-19:  sessions => session
Span 8-9:  university => university
Span 29-30:  work => work-02

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Oracle Span 9-10:  ; => and
Oracle Span 14-15:  about => about
Oracle Span 3-4:  assigned => assign-01
Oracle Span 17-18:  block => block
Oracle Span 5-6:  counselor => (person :ARG0-of counsel-01)
Oracle Span 24-25:  honest => honest
Oracle Span 1-2:  I => i
Oracle Span 21-22:  if => cause-01
Oracle Span 35-36:  open => open-03
Oracle Span 28-29:  really => real
Oracle Span 11-12:  seen => see-01
Oracle Span 18-19:  sessions => session
Oracle Span 8-9:  university => university
Oracle Span 29-30:  work => work-02

Dependencies:
1	-	_	:	:	_	4	punct	_	_
2	I	_	PRP	PRP	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	assigned	_	VBN	VBN	_	0	root	_	_
5	a	_	DT	DT	_	6	det	_	_
6	counselor	_	NN	NN	_	4	dobj	_	_
7	through	_	IN	IN	_	4	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	university	_	NN	NN	_	7	pobj	_	_
10	;	_	:	:	_	4	punct	_	_
11	had	_	VBD	VBD	_	12	aux	_	_
12	seen	_	VBN	VBN	_	4	parataxis	_	_
13	her	_	PRP	PRP	_	12	dobj	_	_
14	for	_	IN	IN	_	12	prep	_	_
15	about	_	RB	RB	_	19	advmod	_	_
16	5-6weeks	_	JJ	JJ	_	19	amod	_	_
17	(	_	(	(	_	19	punct	_	_
18	block	_	NN	NN	_	19	nn	_	_
19	sessions	_	NNS	NNS	_	14	pobj	_	_
20	)	_	)	)	_	19	punct	_	_
21	,	_	,	,	_	19	punct	_	_
22	if	_	IN	IN	_	25	mark	_	_
23	I	_	PRP	PRP	_	25	nsubj	_	_
24	'm	_	VBP	VBP	_	25	cop	_	_
25	honest	_	JJ	JJ	_	19	dep	_	_
26	it	_	PRP	PRP	_	30	nsubj	_	_
27	did	_	VBD	VBD	_	30	aux	_	_
28	n't	_	RB	RB	_	30	neg	_	_
29	really	_	RB	RB	_	30	advmod	_	_
30	work	_	VB	VB	_	25	ccomp	_	_
31	;	_	:	:	_	25	punct	_	_
32	because	_	IN	IN	_	36	mark	_	_
33	I	_	PRP	PRP	_	36	nsubj	_	_
34	was	_	VBD	VBD	_	36	cop	_	_
35	never	_	RB	RB	_	36	neg	_	_
36	open	_	JJ	JJ	_	25	dep	_	_
37	with	_	IN	IN	_	36	prep	_	_
38	her	_	PRP	PRP	_	37	pobj	_	_
39	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, a2 / assign-01)
(a / and, op, s / see-01)
(a / and, op, w3 / work-02)
(a2 / assign-01, ARG1, p / person)
(a2 / assign-01, ARG2, i / i)
(a2 / assign-01, instrument, u / university)
(c / counsel-01, ARG0, p / person)
(c2 / cause-01, ARG0, o / open-03)
(c2 / cause-01, ARG1, w3 / work-02)
(o / open-03, ARG0, i / i)
(o / open-03, ARG3, p / person)
(s / see-01, ARG0, i / i)
(s / see-01, ARG1, p / person)
(s / see-01, duration, a3 / about)
(s / see-01, mod, s2 / session)
(s2 / session, mod, b / block)
(w3 / work-02, ARG1, s / see-01)
(w3 / work-02, mod, r / real)

Input(Some(Graph((and :op (work-02 :condition (opine-01 :manner honest :ARG0 i) :ARG1-of (cause-01 :ARG0 (open-03 :time ever :polarity - :ARG0 i :ARG3 person)) :mod real :polarity - :ARG1 see-01) :op (see-01 :mod (session :mod block) :duration (about :op (between :op (temporal-quantity :quant 5 :unit week) :op (temporal-quantity :quant 6 :unit week))) :ARG0 i :ARG1 person) :op (assign-01 :instrument university :ARG2 i :ARG1 (person :ARG0-of counsel-01))),ArrayBuffer(Span(9,10,List(0),;,and,false), Span(29,30,List(1),work,work-02,false), Span(24,25,List(2),honest,honest,false), Span(21,22,List(3),if,cause-01,false), Span(35,36,List(4),open,open-03,false), Span(11,12,List(5),seen,see-01,false), Span(18,19,List(6),sessions,session,false), Span(17,18,List(7),block,block,false), Span(14,15,List(8),about,about,false), Span(3,4,List(9),assigned,assign-01,false), Span(8,9,List(10),university,university,false), Span(1,2,List(11),I,i,false), Span(28,29,List(12),really,real,false), Span(5,6,List(13, 14),counselor,(person :ARG0-of counsel-01),false)),Map(2 -> honest, 5 -> see-01, 12 -> real, 8 -> about, 7 -> block, 1 -> work-02, 4 -> open-03, 11 -> i, 14 -> counsel-01, 6 -> session, 9 -> assign-01, 0 -> and, 10 -> university, 3 -> cause-01, 13 -> person),Map(h -> honest, s2 -> session, b -> block, a3 -> about, s -> see-01, w3 -> work-02, p -> person, a -> and, r -> real, i -> i, a2 -> assign-01, c -> counsel-01, u -> university, o -> open-03, c2 -> cause-01))),[Ljava.lang.String;@48974e45,Annotation([Ljava.lang.String;@6a84a97d,[Ljava.lang.String;@6c130c45,[Ljava.lang.String;@50ad3bc1),Annotation([Ljava.lang.String;@223aa2f7,[Ljava.lang.String;@6d3a388c,[Ledu.cmu.lti.nlp.amr.Dependency;@193f604a),Annotation([Ljava.lang.String;@20f5239f,[Ljava.lang.String;@57af006c,[Ljava.lang.String;@6bedbc4d),Annotation([Ljava.lang.String;@932bc4a,[Ljava.lang.String;@d29f28,[Ledu.cmu.lti.nlp.amr.Entity;@2fd1433e))
AMR:
(a / and, op, u / university)
(a2 / assign-01, ARG1, i / i)
(a2 / assign-01, ARG2, p / person)
(c / counsel-01, ARG0, p / person)
(c / counsel-01, ARG1, a / and)
(c2 / cause-01, ARG0, h / honest)
(c2 / cause-01, ARG1, s2 / session)
(h / honest, domain, w3 / work-02)
(o / open-03, ARG1, a3 / about)
(s / see-01, ARG1, a / and)
(s / see-01, ARG2, s2 / session)
(s2 / session, mod, b / block)
(w3 / work-02, ARG1, o / open-03)
(w3 / work-02, manner, r / real)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.3.0
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 951,187 microseconds
Sentence: Only half-halfheartedly.

Oracle Span 1:  half => half-half
Oracle Span 2:  Only => only
Spans:
Span 1-2:  half => half-half
Span 0-1:  Only => only

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  half => half-half
Oracle Span 0-1:  Only => only

Dependencies:
1	Only	_	RB	RB	_	2	advmod	_	_
2	half-halfheartedly	_	JJ	JJ	_	0	root	_	_
3	.	_	.	.	_	2	punct	_	_

Oracle:


Input(Some(Graph((heart :degree half-half :mod only),ArrayBuffer(Span(0,1,List(0),Only,only,false), Span(1,2,List(1),half,half-half,false)),Map(1 -> half-half, 0 -> only),Map(h2 -> half-half, o -> only))),[Ljava.lang.String;@29d89d5d,Annotation([Ljava.lang.String;@3514a4c0,[Ljava.lang.String;@212b5695,[Ljava.lang.String;@446293d),Annotation([Ljava.lang.String;@69997e9d,[Ljava.lang.String;@793be5ca,[Ledu.cmu.lti.nlp.amr.Dependency;@2df9b86),Annotation([Ljava.lang.String;@37654521,[Ljava.lang.String;@15aab8c6,[Ljava.lang.String;@33990a0c),Annotation([Ljava.lang.String;@4de4b452,[Ljava.lang.String;@50b5ac82,[Ledu.cmu.lti.nlp.amr.Entity;@101952da))
AMR:
(h2 / half-half, mod, o / only)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 6,077 microseconds
Sentence: - Now the work-load is up to my neck, I have major deadlines to hit, I am depressed, the anxiety is resulting in me feeling miserable all the time.

Oracle Span 1:  all => all
Oracle Span 2:  anxiety => anxiety
Oracle Span 3:  deadlines => deadline
Oracle Span 4:  depressed => depress-01
Oracle Span 5:  feeling => feel-01
Oracle Span 6:  hit => hit-02
Oracle Span 7:  I => i
Oracle Span 8:  load => load-01
Oracle Span 9:  major => major
Oracle Span 10:  miserable => miserable
Oracle Span 11:  neck => neck
Oracle Span 12:  Now => now
Oracle Span 13:  resulting => result-01
Oracle Span 14:  time => time
Oracle Span 15:  work => work
Spans:
Span 31-32:  all => all
Span 24-25:  anxiety => anxiety
Span 15-16:  deadlines => deadline
Span 21-22:  depressed => depress-01
Span 29-30:  feeling => feel-01
Span 17-18:  hit => hit-02
Span 12-13:  I => i
Span 5-6:  load => load-01
Span 14-15:  major => major
Span 30-31:  miserable => miserable
Span 10-11:  neck => neck
Span 1-2:  Now => now
Span 26-27:  resulting => result-01
Span 33-34:  time => time
Span 3-4:  work => work

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 31-32:  all => all
Oracle Span 24-25:  anxiety => anxiety
Oracle Span 15-16:  deadlines => deadline
Oracle Span 21-22:  depressed => depress-01
Oracle Span 29-30:  feeling => feel-01
Oracle Span 17-18:  hit => hit-02
Oracle Span 12-13:  I => i
Oracle Span 5-6:  load => load-01
Oracle Span 14-15:  major => major
Oracle Span 30-31:  miserable => miserable
Oracle Span 10-11:  neck => neck
Oracle Span 1-2:  Now => now
Oracle Span 26-27:  resulting => result-01
Oracle Span 33-34:  time => time
Oracle Span 3-4:  work => work

Dependencies:
1	-	_	:	:	_	5	punct	_	_
2	Now	_	RB	RB	_	5	advmod	_	_
3	the	_	DT	DT	_	4	det	_	_
4	work-load	_	NN	NN	_	5	nsubj	_	_
5	is	_	VBZ	VBZ	_	0	root	_	_
6	up	_	RB	RB	_	5	advmod	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	my	_	PRP$	PRP$	_	9	poss	_	_
9	neck	_	NN	NN	_	7	pobj	_	_
10	,	_	,	,	_	5	punct	_	_
11	I	_	PRP	PRP	_	12	nsubj	_	_
12	have	_	VBP	VBP	_	5	parataxis	_	_
13	major	_	JJ	JJ	_	14	amod	_	_
14	deadlines	_	NNS	NNS	_	12	dobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	hit	_	VB	VB	_	14	vmod	_	_
17	,	_	,	,	_	5	punct	_	_
18	I	_	PRP	PRP	_	20	nsubj	_	_
19	am	_	VBP	VBP	_	20	cop	_	_
20	depressed	_	JJ	JJ	_	5	parataxis	_	_
21	,	_	,	,	_	5	punct	_	_
22	the	_	DT	DT	_	23	det	_	_
23	anxiety	_	NN	NN	_	25	nsubj	_	_
24	is	_	VBZ	VBZ	_	25	aux	_	_
25	resulting	_	VBG	VBG	_	5	dep	_	_
26	in	_	IN	IN	_	25	prep	_	_
27	me	_	PRP	PRP	_	28	nsubj	_	_
28	feeling	_	VBG	VBG	_	26	pcomp	_	_
29	miserable	_	JJ	JJ	_	28	acomp	_	_
30	all	_	PDT	PDT	_	32	predet	_	_
31	the	_	DT	DT	_	32	det	_	_
32	time	_	NN	NN	_	28	tmod	_	_
33	.	_	.	.	_	5	punct	_	_

Oracle:
(d / depress-01, ARG1, i / i)
(d2 / deadline, mod, m / major)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, m2 / miserable)
(f / feel-01, duration, t / time)
(h / hit-02, ARG0, i / i)
(h / hit-02, ARG1, d2 / deadline)
(i / i, part, n2 / neck)
(l / load-01, ARG1, i / i)
(l / load-01, ARG2, w / work)
(l / load-01, extent, n2 / neck)
(l / load-01, time, n / now)
(r / result-01, ARG1, a2 / anxiety)
(r / result-01, ARG2, f / feel-01)
(t / time, mod, a3 / all)

Input(Some(Graph((and :op (load-01 :extent (neck :part-of i) :time now :ARG2 work :ARG1 i) :op (obligate-01 :ARG2 (hit-02 :ARG1 (deadline :mod major) :ARG0 i)) :op (depress-01 :ARG1 i) :op (result-01 :ARG2 (feel-01 :duration (time :mod all) :ARG1 miserable :ARG0 i) :ARG1 anxiety)),ArrayBuffer(Span(5,6,List(0),load,load-01,false), Span(10,11,List(1),neck,neck,false), Span(12,13,List(2),I,i,false), Span(1,2,List(3),Now,now,false), Span(3,4,List(4),work,work,false), Span(17,18,List(5),hit,hit-02,false), Span(15,16,List(6),deadlines,deadline,false), Span(14,15,List(7),major,major,false), Span(21,22,List(8),depressed,depress-01,false), Span(26,27,List(9),resulting,result-01,false), Span(29,30,List(10),feeling,feel-01,false), Span(33,34,List(11),time,time,false), Span(31,32,List(12),all,all,false), Span(30,31,List(13),miserable,miserable,false), Span(24,25,List(14),anxiety,anxiety,false)),Map(2 -> i, 5 -> hit-02, 12 -> all, 8 -> depress-01, 7 -> major, 1 -> neck, 4 -> work, 11 -> time, 14 -> anxiety, 6 -> deadline, 9 -> result-01, 0 -> load-01, 10 -> feel-01, 3 -> now, 13 -> miserable),Map(w -> work, n -> now, h -> hit-02, t -> time, m2 -> miserable, a3 -> all, d -> depress-01, m -> major, d2 -> deadline, a2 -> anxiety, r -> result-01, i -> i, l -> load-01, f -> feel-01, n2 -> neck))),[Ljava.lang.String;@6babf3bf,Annotation([Ljava.lang.String;@3059cbc,[Ljava.lang.String;@7ea9e1e2,[Ljava.lang.String;@24fcf36f),Annotation([Ljava.lang.String;@10feca44,[Ljava.lang.String;@3fb1549b,[Ledu.cmu.lti.nlp.amr.Dependency;@ea6147e),Annotation([Ljava.lang.String;@4d02f94e,[Ljava.lang.String;@2b48a640,[Ljava.lang.String;@1e683a3e),Annotation([Ljava.lang.String;@2053d869,[Ljava.lang.String;@7a419da4,[Ledu.cmu.lti.nlp.amr.Entity;@14555e0a))
AMR:
(d / depress-01, ARG0, n2 / neck)
(d / depress-01, ARG1, n / now)
(d2 / deadline, mod, m / major)
(f / feel-01, ARG0, w / work)
(f / feel-01, ARG1, m2 / miserable)
(f / feel-01, ARG6, a3 / all)
(f / feel-01, time, t / time)
(h / hit-02, ARG1, d2 / deadline)
(l / load-01, ARG0, i / i)
(l / load-01, ARG1, w / work)
(m / major, domain, i / i)
(r / result-01, ARG1, a2 / anxiety)
(r / result-01, ARG2, f / feel-01)
(r / result-01, ARG6, d / depress-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.1.1
WARNING: makeIds can't find span Id: 0.3.1.1.0
WARNING: makeIds can't find span Id: 0.3.1.0
WARNING: makeIds can't find span Id: 0.3.0
Decoded in 522,315 microseconds
Sentence: In no longer have a counselor because you can only have them for so many sessions at a time, and I doubt it will help much this time, if it hasn't already.

Oracle Span 1:  already => already
Oracle Span 2:  and => and
Oracle Span 3:  because => cause-01
Oracle Span 4:  can => possible
Oracle Span 5:  counselor => (person :ARG0-of counsel-01)
Oracle Span 6:  doubt => doubt-01
Oracle Span 7:  have => have-03
Oracle Span 8:  have => have-03
Oracle Span 9:  help => help-01
Oracle Span 10:  I => i
Oracle Span 11:  much => much
Oracle Span 12:  no => -
Oracle Span 13:  only => only
Oracle Span 14:  sessions => session
Oracle Span 15:  this => this
Oracle Span 16:  time => time
Oracle Span 17:  time => time
Oracle Span 18:  you => you
Spans:
Span 34-35:  already => already
Span 20-21:  and => and
Span 6-7:  because => cause-01
Span 8-9:  can => possible
Span 5-6:  counselor => (person :ARG0-of counsel-01)
Span 22-23:  doubt => doubt-01
Span 3-4:  have => have-03
Span 10-11:  have => have-03
Span 25-26:  help => help-01
Span 21-22:  I => i
Span 26-27:  much => much
Span 1-2:  no => -
Span 9-10:  only => only
Span 15-16:  sessions => session
Span 27-28:  this => this
Span 18-19:  time => time
Span 28-29:  time => time
Span 7-8:  you => you

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 34-35:  already => already
Oracle Span 20-21:  and => and
Oracle Span 6-7:  because => cause-01
Oracle Span 8-9:  can => possible
Oracle Span 5-6:  counselor => (person :ARG0-of counsel-01)
Oracle Span 22-23:  doubt => doubt-01
Oracle Span 3-4:  have => have-03
Oracle Span 10-11:  have => have-03
Oracle Span 25-26:  help => help-01
Oracle Span 21-22:  I => i
Oracle Span 26-27:  much => much
Oracle Span 1-2:  no => -
Oracle Span 9-10:  only => only
Oracle Span 15-16:  sessions => session
Oracle Span 27-28:  this => this
Oracle Span 18-19:  time => time
Oracle Span 28-29:  time => time
Oracle Span 7-8:  you => you

Dependencies:
1	In	_	IN	IN	_	4	prep	_	_
2	no	_	RB	RB	_	3	neg	_	_
3	longer	_	RB	RB	_	1	pcomp	_	_
4	have	_	VB	VB	_	0	root	_	_
5	a	_	DT	DT	_	6	det	_	_
6	counselor	_	NN	NN	_	4	dobj	_	_
7	because	_	IN	IN	_	11	mark	_	_
8	you	_	PRP	PRP	_	11	nsubj	_	_
9	can	_	MD	MD	_	11	aux	_	_
10	only	_	RB	RB	_	11	advmod	_	_
11	have	_	VB	VB	_	6	dep	_	_
12	them	_	PRP	PRP	_	11	dobj	_	_
13	for	_	IN	IN	_	11	prep	_	_
14	so	_	RB	RB	_	15	advmod	_	_
15	many	_	JJ	JJ	_	16	amod	_	_
16	sessions	_	NNS	NNS	_	13	pobj	_	_
17	at	_	IN	IN	_	16	prep	_	_
18	a	_	DT	DT	_	19	det	_	_
19	time	_	NN	NN	_	17	pobj	_	_
20	,	_	,	,	_	4	punct	_	_
21	and	_	CC	CC	_	4	cc	_	_
22	I	_	PRP	PRP	_	23	nsubj	_	_
23	doubt	_	VBP	VBP	_	4	conj	_	_
24	it	_	PRP	PRP	_	26	nsubj	_	_
25	will	_	MD	MD	_	26	aux	_	_
26	help	_	VB	VB	_	23	ccomp	_	_
27	much	_	RB	RB	_	29	advmod	_	_
28	this	_	DT	DT	_	29	det	_	_
29	time	_	NN	NN	_	26	tmod	_	_
30	,	_	,	,	_	26	punct	_	_
31	if	_	IN	IN	_	35	mark	_	_
32	it	_	PRP	PRP	_	35	nsubj	_	_
33	has	_	VBZ	VBZ	_	35	aux	_	_
34	n't	_	RB	RB	_	35	neg	_	_
35	already	_	RB	RB	_	26	advcl	_	_
36	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, d / doubt-01)
(a / and, op, h / have-03)
(c / counsel-01, ARG0, p / person)
(c2 / cause-01, ARG0, p2 / possible)
(c2 / cause-01, ARG1, h / have-03)
(d / doubt-01, ARG0, i / i)
(d / doubt-01, ARG1, h3 / help-01)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, p / person)
(h2 / have-03, ARG0, y / you)
(h2 / have-03, ARG1, p / person)
(h2 / have-03, duration, s / session)
(h2 / have-03, mod, o / only)
(h3 / help-01, ARG0, h / have-03)
(h3 / help-01, ARG2, i / i)
(h3 / help-01, degree, m2 / much)
(h3 / help-01, time, t2 / time)
(p2 / possible, domain, h2 / have-03)
(t2 / time, mod, t3 / this)

Input(Some(Graph((and :op (doubt-01 :ARG1 (help-01 :condition (help-01 :polarity - :time already :ARG0 have-03 :ARG1 i) :time (time :mod this) :degree much :ARG0 have-03 :ARG2 i) :ARG0 i) :op (have-03 :ARG1-of (cause-01 :ARG0 (possible :domain (have-03 :mod only :duration (session :quant (so-many :frequency time)) :ARG0 you :ARG1 person))) :time no-longer :ARG1 (person :ARG0-of counsel-01) :ARG0 i)),ArrayBuffer(Span(1,2,List(0),no,-,false), Span(20,21,List(1),and,and,false), Span(22,23,List(2),doubt,doubt-01,false), Span(25,26,List(3),help,help-01,false), Span(34,35,List(4),already,already,false), Span(18,19,List(5),time,time,false), Span(27,28,List(6),this,this,false), Span(26,27,List(7),much,much,false), Span(3,4,List(8),have,have-03,false), Span(6,7,List(9),because,cause-01,false), Span(8,9,List(10),can,possible,false), Span(10,11,List(11),have,have-03,false), Span(9,10,List(12),only,only,false), Span(15,16,List(13),sessions,session,false), Span(28,29,List(14),time,time,false), Span(7,8,List(15),you,you,false), Span(21,22,List(16),I,i,false), Span(5,6,List(17, 18),counselor,(person :ARG0-of counsel-01),false)),Map(2 -> doubt-01, 5 -> time, 12 -> only, 15 -> you, 8 -> have-03, 18 -> counsel-01, 7 -> much, 17 -> person, 1 -> and, 4 -> already, 11 -> have-03, 14 -> time, 6 -> this, 9 -> cause-01, 0 -> -, 16 -> i, 10 -> possible, 3 -> help-01, 13 -> session),Map(h -> have-03, h2 -> have-03, t -> time, m2 -> much, p2 -> possible, s -> session, d -> doubt-01, t3 -> this, p -> person, y -> you, a -> and, t2 -> time, i -> i, a2 -> already, - -> -, c -> counsel-01, h3 -> help-01, o -> only, c2 -> cause-01))),[Ljava.lang.String;@4bb33f74,Annotation([Ljava.lang.String;@759d26fb,[Ljava.lang.String;@3c73951,[Ljava.lang.String;@3d5c822d),Annotation([Ljava.lang.String;@6f46426d,[Ljava.lang.String;@73700b80,[Ledu.cmu.lti.nlp.amr.Dependency;@49c7b90e),Annotation([Ljava.lang.String;@10d307f1,[Ljava.lang.String;@4d5b6aac,[Ljava.lang.String;@3e84448c),Annotation([Ljava.lang.String;@4a7f959b,[Ljava.lang.String;@429bffaa,[Ledu.cmu.lti.nlp.amr.Entity;@5403f35f))
AMR:
(a / and, op, d / doubt-01)
(a / and, op, h / have-03)
(a / and, op, t2 / time)
(c / counsel-01, ARG0, p / person)
(c / counsel-01, ARG1, h2 / have-03)
(c2 / cause-01, ARG0, p2 / possible)
(c2 / cause-01, ARG1, o / only)
(d / doubt-01, ARG0, i / i)
(d / doubt-01, ARG1, h3 / help-01)
(h / have-03, ARG1, p / person)
(h / have-03, ARG6, - / -)
(h2 / have-03, ARG0, y / you)
(h2 / have-03, ARG1, a2 / already)
(h2 / have-03, location, s / session)
(h3 / help-01, ARG1, t / time)
(h3 / help-01, ARG6, m2 / much)
(p2 / possible, domain, h2 / have-03)
(t / time, mod, t3 / this)

WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2.1
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.2
WARNING: makeIds can't find span Id: 0.0.3.0.0.1
WARNING: makeIds can't find span Id: 0.0.3.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 1,231,112 microseconds
Sentence: - I lack motivation, don't feel comfortable with any of my lecturers, feel like I want to give in, but can't bring myself to it, because I will end up in a dead end job, and I aspired to 'be someone'.

Oracle Span 1:  and => and
Oracle Span 2:  aspired => aspire-01
Oracle Span 3:  because => cause-01
Oracle Span 4:  bring => bring-05
Oracle Span 5:  but => contrast-01
Oracle Span 6:  comfortable => comfortable
Oracle Span 7:  end => end-03
Oracle Span 8:  end => end-02
Oracle Span 9:  feel => feel-01
Oracle Span 10:  feel => feel-01
Oracle Span 11:  give => give-09
Oracle Span 12:  I => i
Oracle Span 13:  job => job
Oracle Span 14:  lack => lack-01
Oracle Span 15:  lecturers => (person :ARG0-of lecture-01)
Oracle Span 16:  motivation => motivation
Oracle Span 17:  someone => someone
Oracle Span 18:  want => want-01
Spans:
Span 42-43:  and => and
Span 44-45:  aspired => aspire-01
Span 31-32:  because => cause-01
Span 26-27:  bring => bring-05
Span 23-24:  but => contrast-01
Span 8-9:  comfortable => comfortable
Span 34-35:  end => end-03
Span 39-40:  end => end-02
Span 7-8:  feel => feel-01
Span 15-16:  feel => feel-01
Span 20-21:  give => give-09
Span 1-2:  I => i
Span 40-41:  job => job
Span 2-3:  lack => lack-01
Span 13-14:  lecturers => (person :ARG0-of lecture-01)
Span 3-4:  motivation => motivation
Span 48-49:  someone => someone
Span 18-19:  want => want-01

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 42-43:  and => and
Oracle Span 44-45:  aspired => aspire-01
Oracle Span 31-32:  because => cause-01
Oracle Span 26-27:  bring => bring-05
Oracle Span 23-24:  but => contrast-01
Oracle Span 8-9:  comfortable => comfortable
Oracle Span 34-35:  end => end-03
Oracle Span 39-40:  end => end-02
Oracle Span 7-8:  feel => feel-01
Oracle Span 15-16:  feel => feel-01
Oracle Span 20-21:  give => give-09
Oracle Span 1-2:  I => i
Oracle Span 40-41:  job => job
Oracle Span 2-3:  lack => lack-01
Oracle Span 13-14:  lecturers => (person :ARG0-of lecture-01)
Oracle Span 3-4:  motivation => motivation
Oracle Span 48-49:  someone => someone
Oracle Span 18-19:  want => want-01

Dependencies:
1	-	_	:	:	_	3	punct	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	lack	_	VBP	VBP	_	0	root	_	_
4	motivation	_	NN	NN	_	3	dobj	_	_
5	,	_	,	,	_	3	punct	_	_
6	do	_	VBP	VBP	_	8	aux	_	_
7	n't	_	RB	RB	_	8	neg	_	_
8	feel	_	VB	VB	_	3	conj	_	_
9	comfortable	_	JJ	JJ	_	8	acomp	_	_
10	with	_	IN	IN	_	8	prep	_	_
11	any	_	DT	DT	_	10	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	my	_	PRP$	PRP$	_	14	poss	_	_
14	lecturers	_	NNS	NNS	_	12	pobj	_	_
15	,	_	,	,	_	3	punct	_	_
16	feel	_	VBP	VBP	_	3	conj	_	_
17	like	_	IN	IN	_	19	mark	_	_
18	I	_	PRP	PRP	_	19	nsubj	_	_
19	want	_	VBP	VBP	_	16	advcl	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	give	_	VB	VB	_	19	xcomp	_	_
22	in	_	RP	RP	_	21	prt	_	_
23	,	_	,	,	_	3	punct	_	_
24	but	_	CC	CC	_	3	cc	_	_
25	ca	_	MD	MD	_	27	aux	_	_
26	n't	_	RB	RB	_	27	neg	_	_
27	bring	_	VB	VB	_	3	conj	_	_
28	myself	_	PRP	PRP	_	27	dobj	_	_
29	to	_	TO	TO	_	27	prep	_	_
30	it	_	PRP	PRP	_	29	pobj	_	_
31	,	_	,	,	_	27	punct	_	_
32	because	_	IN	IN	_	35	mark	_	_
33	I	_	PRP	PRP	_	35	nsubj	_	_
34	will	_	MD	MD	_	35	aux	_	_
35	end	_	VB	VB	_	27	advcl	_	_
36	up	_	RP	RP	_	35	prt	_	_
37	in	_	IN	IN	_	35	prep	_	_
38	a	_	DT	DT	_	41	det	_	_
39	dead	_	JJ	JJ	_	41	amod	_	_
40	end	_	NN	NN	_	41	nn	_	_
41	job	_	NN	NN	_	37	pobj	_	_
42	,	_	,	,	_	3	punct	_	_
43	and	_	CC	CC	_	3	cc	_	_
44	I	_	PRP	PRP	_	45	nsubj	_	_
45	aspired	_	VBD	VBD	_	3	conj	_	_
46	to	_	TO	TO	_	49	aux	_	_
47	'	_	``	``	_	49	punct	_	_
48	be	_	VB	VB	_	49	cop	_	_
49	someone	_	NN	NN	_	45	xcomp	_	_
50	'	_	''	''	_	49	punct	_	_
51	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, c / contrast-01)
(a / and, op, f / feel-01)
(a / and, op, l / lack-01)
(a2 / aspire-01, ARG0, i / i)
(a2 / aspire-01, ARG1, s / someone)
(b / bring-05, ARG0, i / i)
(b / bring-05, ARG1, g2 / give-09)
(c / contrast-01, ARG1, f2 / feel-01)
(e / end-03, ARG1, i / i)
(e / end-03, ARG2, j / job)
(e2 / end-02, ARG4, j / job)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, c2 / comfortable)
(f / feel-01, ARG2, p / person)
(f2 / feel-01, ARG0, i / i)
(f2 / feel-01, ARG1, w / want-01)
(g2 / give-09, ARG0, i / i)
(l / lack-01, ARG0, i / i)
(l / lack-01, ARG1, m / motivation)
(l2 / lecture-01, ARG0, p / person)
(l2 / lecture-01, ARG1, i / i)
(s / someone, domain, i / i)
(w / want-01, ARG0, i / i)

Input(Some(Graph((and :op (contrast-01 :ARG2 (capable-41 :polarity - :ARG2 (bring-05 :ARG1 (give-09 :ARG0 i) :ARG0 i) :ARG1-of (cause-01 :ARG0 (and :op (end-03 :ARG2 (job :ARG4-of (end-02 :ARG1-of die-01)) :ARG1 i) :op (aspire-01 :ARG1 (someone :domain i) :ARG0 i))) :ARG1 i) :ARG1 (feel-01 :ARG1 (want-01 :ARG1 (give-09 :ARG0 i) :ARG0 i) :ARG0 i)) :op (feel-01 :ARG2 (person :ARG0-of (lecture-01 :ARG1 i)) :ARG1 comfortable :polarity - :ARG0 i) :op (lack-01 :ARG1 motivation :ARG0 i)),ArrayBuffer(Span(42,43,List(0),and,and,false), Span(23,24,List(1),but,contrast-01,false), Span(26,27,List(2),bring,bring-05,false), Span(20,21,List(3),give,give-09,false), Span(31,32,List(4),because,cause-01,false), Span(34,35,List(5),end,end-03,false), Span(40,41,List(6),job,job,false), Span(39,40,List(7),end,end-02,false), Span(44,45,List(8),aspired,aspire-01,false), Span(48,49,List(9),someone,someone,false), Span(7,8,List(10),feel,feel-01,false), Span(18,19,List(11),want,want-01,false), Span(15,16,List(12),feel,feel-01,false), Span(8,9,List(13),comfortable,comfortable,false), Span(2,3,List(14),lack,lack-01,false), Span(3,4,List(15),motivation,motivation,false), Span(1,2,List(16),I,i,false), Span(13,14,List(17, 18),lecturers,(person :ARG0-of lecture-01),false)),Map(2 -> bring-05, 5 -> end-03, 12 -> feel-01, 15 -> motivation, 8 -> aspire-01, 18 -> lecture-01, 7 -> end-02, 17 -> person, 1 -> contrast-01, 4 -> cause-01, 11 -> want-01, 14 -> lack-01, 6 -> job, 9 -> someone, 0 -> and, 16 -> i, 10 -> feel-01, 3 -> give-09, 13 -> comfortable),Map(e -> end-03, w -> want-01, b -> bring-05, e2 -> end-02, j -> job, s -> someone, m -> motivation, g2 -> give-09, p -> person, c3 -> cause-01, a -> and, l2 -> lecture-01, i -> i, a2 -> aspire-01, c -> contrast-01, l -> lack-01, f2 -> feel-01, f -> feel-01, c2 -> comfortable))),[Ljava.lang.String;@483f6d77,Annotation([Ljava.lang.String;@7e5afaa6,[Ljava.lang.String;@63a12c68,[Ljava.lang.String;@28f3b248),Annotation([Ljava.lang.String;@1b1426f4,[Ljava.lang.String;@32b260fa,[Ledu.cmu.lti.nlp.amr.Dependency;@581ac8a8),Annotation([Ljava.lang.String;@6d4e5011,[Ljava.lang.String;@57d7f8ca,[Ljava.lang.String;@76c3e77a),Annotation([Ljava.lang.String;@78123e82,[Ljava.lang.String;@67c33749,[Ledu.cmu.lti.nlp.amr.Entity;@fba92d3))
AMR:
(a / and, op, b / bring-05)
(a / and, op, f / feel-01)
(a / and, op, f2 / feel-01)
(a / and, op, j / job)
(a2 / aspire-01, ARG1, s / someone)
(c / contrast-01, ARG1, l / lack-01)
(c / contrast-01, ARG2, a2 / aspire-01)
(c / contrast-01, ARG6, b / bring-05)
(c3 / cause-01, ARG0, e / end-03)
(c3 / cause-01, ARG1, b / bring-05)
(e / end-03, ARG1, p / person)
(e2 / end-02, ARG1, j / job)
(f / feel-01, ARG1, w / want-01)
(f2 / feel-01, ARG1, c2 / comfortable)
(l / lack-01, ARG0, i / i)
(l / lack-01, ARG1, m / motivation)
(l2 / lecture-01, ARG0, p / person)
(w / want-01, ARG1, g2 / give-09)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.1.1.0
WARNING: makeIds can't find span Id: 0.2.1.2
WARNING: makeIds can't find span Id: 0.2.1.2.0.0
WARNING: makeIds can't find span Id: 0.2.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.2.0.1
WARNING: makeIds can't find span Id: 0.2.1.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
Decoded in 1,032,342 microseconds
Sentence: - I would rather be dead than not be educated, and live a life I want to live (and dropping out of uni would make matters worse).

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  dropping => drop-04
Oracle Span 4:  educated => educate-01
Oracle Span 5:  I => i
Oracle Span 6:  life => life
Oracle Span 7:  live => live-01
Oracle Span 8:  live => live-01
Oracle Span 9:  matters => matter
Oracle Span 10:  want => want-01
Oracle Span 11:  worse => worsen-01
Spans:
Span 11-12:  and => and
Span 20-21:  and => and
Span 21-22:  dropping => drop-04
Span 9-10:  educated => educate-01
Span 1-2:  I => i
Span 14-15:  life => life
Span 12-13:  live => live-01
Span 18-19:  live => live-01
Span 27-28:  matters => matter
Span 16-17:  want => want-01
Span 28-29:  worse => worsen-01

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 20-21:  and => and
Oracle Span 21-22:  dropping => drop-04
Oracle Span 9-10:  educated => educate-01
Oracle Span 1-2:  I => i
Oracle Span 14-15:  life => life
Oracle Span 12-13:  live => live-01
Oracle Span 18-19:  live => live-01
Oracle Span 27-28:  matters => matter
Oracle Span 16-17:  want => want-01
Oracle Span 28-29:  worse => worsen-01

Dependencies:
1	-	_	:	:	_	6	punct	_	_
2	I	_	PRP	PRP	_	6	nsubj	_	_
3	would	_	MD	MD	_	6	aux	_	_
4	rather	_	RB	RB	_	6	advmod	_	_
5	be	_	VB	VB	_	6	cop	_	_
6	dead	_	JJ	JJ	_	0	root	_	_
7	than	_	IN	IN	_	8	dep	_	_
8	not	_	RB	RB	_	6	cc	_	_
9	be	_	VB	VB	_	10	auxpass	_	_
10	educated	_	VBN	VBN	_	6	conj	_	_
11	,	_	,	,	_	6	punct	_	_
12	and	_	CC	CC	_	6	cc	_	_
13	live	_	VB	VB	_	6	conj	_	_
14	a	_	DT	DT	_	15	det	_	_
15	life	_	NN	NN	_	13	dobj	_	_
16	I	_	PRP	PRP	_	17	nsubj	_	_
17	want	_	VBP	VBP	_	15	rcmod	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	live	_	VB	VB	_	17	xcomp	_	_
20	(	_	(	(	_	22	punct	_	_
21	and	_	CC	CC	_	22	cc	_	_
22	dropping	_	VBG	VBG	_	13	dep	_	_
23	out	_	RP	RP	_	22	prt	_	_
24	of	_	IN	IN	_	22	prep	_	_
25	uni	_	NN	NN	_	24	pobj	_	_
26	would	_	MD	MD	_	27	aux	_	_
27	make	_	VB	VB	_	25	rcmod	_	_
28	matters	_	NNS	NNS	_	29	nsubj	_	_
29	worse	_	RBR	RBR	_	27	xcomp	_	_
30	)	_	)	)	_	22	punct	_	_
31	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, w / worsen-01)
(a2 / and, op, e / educate-01)
(a2 / and, op, l / live-01)
(d2 / drop-04, ARG0, i / i)
(e / educate-01, ARG1, i / i)
(l / live-01, ARG0, i / i)
(l / live-01, ARG1, l2 / life)
(l2 / life, mod, w2 / want-01)
(l3 / live-01, ARG0, i / i)
(l3 / live-01, ARG1, l2 / life)
(w / worsen-01, ARG0, d2 / drop-04)
(w / worsen-01, ARG1, m / matter)
(w2 / want-01, ARG0, i / i)
(w2 / want-01, ARG1, l3 / live-01)

Input(Some(Graph((and :op (worsen-01 :ARG1 matter :ARG0 (drop-04 :ARG1 university :ARG0 i)) :op (prefer-01 :ARG0 i :ARG1 (die-01 :ARG1 i) :ARG2 (and :op (live-01 :ARG1 (life :mod (want-01 :ARG1 (live-01 :ARG0 i :ARG1 life) :ARG0 i)) :polarity - :ARG0 i) :op (educate-01 :polarity - :ARG1 i)))),ArrayBuffer(Span(11,12,List(0),and,and,false), Span(21,22,List(1),dropping,drop-04,false), Span(27,28,List(2),matters,matter,false), Span(1,2,List(3),I,i,false), Span(20,21,List(4),and,and,false), Span(12,13,List(5),live,live-01,false), Span(14,15,List(6),life,life,false), Span(16,17,List(7),want,want-01,false), Span(18,19,List(8),live,live-01,false), Span(9,10,List(9),educated,educate-01,false), Span(28,29,List(10),worse,worsen-01,false)),Map(2 -> matter, 5 -> live-01, 8 -> live-01, 7 -> want-01, 1 -> drop-04, 4 -> and, 6 -> life, 9 -> educate-01, 0 -> and, 10 -> worsen-01, 3 -> i),Map(e -> educate-01, w -> worsen-01, l3 -> live-01, m -> matter, a -> and, d2 -> drop-04, w2 -> want-01, l2 -> life, a2 -> and, i -> i, l -> live-01))),[Ljava.lang.String;@662b4c69,Annotation([Ljava.lang.String;@fa49800,[Ljava.lang.String;@71238fc2,[Ljava.lang.String;@2a54a73f),Annotation([Ljava.lang.String;@16a0ee18,[Ljava.lang.String;@3d6f0054,[Ledu.cmu.lti.nlp.amr.Dependency;@505fc5a4),Annotation([Ljava.lang.String;@5fbdfdcf,[Ljava.lang.String;@4efc180e,[Ljava.lang.String;@bd4dc25),Annotation([Ljava.lang.String;@25084a1e,[Ljava.lang.String;@156b88f5,[Ledu.cmu.lti.nlp.amr.Entity;@3bf9ce3e))
AMR:
(a / and, op, e / educate-01)
(a / and, op, l / live-01)
(a2 / and, op, d2 / drop-04)
(a2 / and, op, l / live-01)
(d2 / drop-04, ARG1, w / worsen-01)
(e / educate-01, ARG1, i / i)
(l / live-01, ARG1, l2 / life)
(l3 / live-01, ARG1, l2 / life)
(w / worsen-01, ARG1, m / matter)
(w2 / want-01, ARG1, l3 / live-01)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.1.1
WARNING: makeIds can't find span Id: 0.0.2.1.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 269,979 microseconds
Sentence: - I'm 21yrs old (turn 22 this year), don't have much time left for failing need to do something.

Oracle Span 1:  22 => 22
Oracle Span 2:  do => do-02
Oracle Span 3:  failing => fail-01
Oracle Span 4:  have => have-03
Oracle Span 5:  I => i
Oracle Span 6:  left => leave-06
Oracle Span 7:  much => much
Oracle Span 8:  something => something
Oracle Span 9:  this => this
Oracle Span 10:  time => time
Oracle Span 11:  turn => turn-02
Oracle Span 12:  year => (temporal-quantity :unit year)
Spans:
Span 7-8:  22 => 22
Span 12-13:  do => do-02
Span 19-20:  failing => fail-01
Span 14-15:  have => have-03
Span 1-2:  I => i
Span 17-18:  left => leave-06
Span 15-16:  much => much
Span 23-24:  something => something
Span 8-9:  this => this
Span 16-17:  time => time
Span 6-7:  turn => turn-02
Span 9-10:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Oracle Span 7-8:  22 => 22
Oracle Span 12-13:  do => do-02
Oracle Span 19-20:  failing => fail-01
Oracle Span 14-15:  have => have-03
Oracle Span 1-2:  I => i
Oracle Span 17-18:  left => leave-06
Oracle Span 15-16:  much => much
Oracle Span 23-24:  something => something
Oracle Span 8-9:  this => this
Oracle Span 16-17:  time => time
Oracle Span 6-7:  turn => turn-02
Oracle Span 9-10:  year => (temporal-quantity :unit year)

Dependencies:
1	-	_	:	:	_	5	punct	_	_
2	I	_	PRP	PRP	_	5	nsubj	_	_
3	'm	_	VBP	VBP	_	5	cop	_	_
4	21yrs	_	JJ	JJ	_	5	amod	_	_
5	old	_	JJ	JJ	_	0	root	_	_
6	(	_	(	(	_	7	punct	_	_
7	turn	_	VB	VB	_	5	dep	_	_
8	22	_	CD	CD	_	7	dobj	_	_
9	this	_	DT	DT	_	10	det	_	_
10	year	_	NN	NN	_	8	dep	_	_
11	)	_	)	)	_	7	punct	_	_
12	,	_	,	,	_	5	punct	_	_
13	do	_	VBP	VBP	_	18	aux	_	_
14	n't	_	RB	RB	_	18	neg	_	_
15	have	_	VB	VB	_	18	aux	_	_
16	much	_	JJ	JJ	_	18	advmod	_	_
17	time	_	NN	NN	_	16	dep	_	_
18	left	_	VBN	VBN	_	5	ccomp	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	failing	_	VBG	VBG	_	19	pcomp	_	_
21	need	_	NN	NN	_	20	dobj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	do	_	VB	VB	_	20	vmod	_	_
24	something	_	NN	NN	_	23	dobj	_	_
25	.	_	.	.	_	5	punct	_	_

Oracle:
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, s / something)
(f / fail-01, ARG1, i / i)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, t5 / time)
(l / leave-06, ARG1, t5 / time)
(t / turn-02, ARG1, i / i)
(t2 / temporal-quantity, unit, y / year)
(t5 / time, mod, m / much)
(t5 / time, purpose, f / fail-01)

Input(Some(Graph((and :op (age-01 :ARG1 i :ARG2 (temporal-quantity :unit year :quant 21)) :op (turn-02 :time (year :mod this) :ARG3 (temporal-quantity :quant 22 :unit year) :ARG1 i) :op (have-03 :ARG1 (time :purpose (fail-01 :ARG1 i) :ARG1-of leave-06 :mod much) :polarity - :ARG0 i) :op (obligate-01 :ARG2 (do-02 :ARG1 something :ARG0 i))),ArrayBuffer(Span(1,2,List(0),I,i,false), Span(9,10,List(1, 2),year,(temporal-quantity :unit year),false), Span(6,7,List(3),turn,turn-02,false), Span(8,9,List(4),this,this,false), Span(7,8,List(5),22,22,false), Span(14,15,List(6),have,have-03,false), Span(16,17,List(7),time,time,false), Span(19,20,List(8),failing,fail-01,false), Span(17,18,List(9),left,leave-06,false), Span(15,16,List(10),much,much,false), Span(12,13,List(11),do,do-02,false), Span(23,24,List(12),something,something,false)),Map(2 -> year, 5 -> 22, 12 -> something, 8 -> fail-01, 7 -> time, 1 -> temporal-quantity, 4 -> this, 11 -> do-02, 6 -> have-03, 9 -> leave-06, 0 -> i, 10 -> much, 3 -> turn-02),Map(h -> have-03, t4 -> this, 2 -> 22, t -> turn-02, s -> something, d -> do-02, m -> much, y -> year, t2 -> temporal-quantity, t5 -> time, i -> i, l -> leave-06, f -> fail-01))),[Ljava.lang.String;@16610890,Annotation([Ljava.lang.String;@71def8f8,[Ljava.lang.String;@383bfa16,[Ljava.lang.String;@4d465b11),Annotation([Ljava.lang.String;@53fdffa1,[Ljava.lang.String;@5562c41e,[Ledu.cmu.lti.nlp.amr.Dependency;@32ee6fee),Annotation([Ljava.lang.String;@4d0f2471,[Ljava.lang.String;@7133da86,[Ljava.lang.String;@3232a28a),Annotation([Ljava.lang.String;@73e22a3d,[Ljava.lang.String;@47faa49c,[Ledu.cmu.lti.nlp.amr.Entity;@28f2a10f))
AMR:
(d / do-02, ARG1, l / leave-06)
(d / do-02, ARG6, h / have-03)
(f / fail-01, ARG1, s / something)
(h / have-03, ARG1, m / much)
(l / leave-06, ARG1, t5 / time)
(l / leave-06, ARG2, f / fail-01)
(l / leave-06, ARG6, t / turn-02)
(t / turn-02, ARG0, i / i)
(t / turn-02, ARG1, t2 / temporal-quantity)
(t2 / temporal-quantity, unit, y / year)
(t4 / this, calendar, 2 / 22)
(y / year, mod, t4 / this)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.2
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.0
Decoded in 672,385 microseconds
Sentence: I failed college once over, did another course so I could get to uni don't want to go through the system over and over and consistently fail.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  another => another
Oracle Span 4:  college => college
Oracle Span 5:  consistently => consistent
Oracle Span 6:  could => possible
Oracle Span 7:  course => course
Oracle Span 8:  did => do-02
Oracle Span 9:  fail => fail-01
Oracle Span 10:  failed => fail-01
Oracle Span 11:  get => get-05
Oracle Span 12:  go => go-01
Oracle Span 13:  I => i
Oracle Span 14:  once => once
Oracle Span 15:  over => over-and-over
Oracle Span 16:  system => system
Oracle Span 17:  want => want-01
Spans:
Span 24-25:  and => and
Span 26-27:  and => and
Span 7-8:  another => another
Span 2-3:  college => college
Span 27-28:  consistently => consistent
Span 11-12:  could => possible
Span 8-9:  course => course
Span 6-7:  did => do-02
Span 28-29:  fail => fail-01
Span 1-2:  failed => fail-01
Span 12-13:  get => get-05
Span 19-20:  go => go-01
Span 0-1:  I => i
Span 3-4:  once => once
Span 4-5:  over => over-and-over
Span 22-23:  system => system
Span 17-18:  want => want-01

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 24-25:  and => and
Oracle Span 26-27:  and => and
Oracle Span 7-8:  another => another
Oracle Span 2-3:  college => college
Oracle Span 27-28:  consistently => consistent
Oracle Span 11-12:  could => possible
Oracle Span 8-9:  course => course
Oracle Span 6-7:  did => do-02
Oracle Span 28-29:  fail => fail-01
Oracle Span 1-2:  failed => fail-01
Oracle Span 12-13:  get => get-05
Oracle Span 19-20:  go => go-01
Oracle Span 0-1:  I => i
Oracle Span 3-4:  once => once
Oracle Span 4-5:  over => over-and-over
Oracle Span 22-23:  system => system
Oracle Span 17-18:  want => want-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	failed	_	VBD	VBD	_	0	root	_	_
3	college	_	NN	NN	_	2	dobj	_	_
4	once	_	RB	RB	_	5	advmod	_	_
5	over	_	RB	RB	_	2	advmod	_	_
6	,	_	,	,	_	2	punct	_	_
7	did	_	VBD	VBD	_	2	conj	_	_
8	another	_	DT	DT	_	9	det	_	_
9	course	_	NN	NN	_	18	nsubj	_	_
10	so	_	IN	IN	_	13	mark	_	_
11	I	_	PRP	PRP	_	13	nsubj	_	_
12	could	_	MD	MD	_	13	aux	_	_
13	get	_	VB	VB	_	9	rcmod	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	uni	_	NN	NN	_	14	pobj	_	_
16	do	_	VBP	VBP	_	18	aux	_	_
17	n't	_	RB	RB	_	18	neg	_	_
18	want	_	VB	VB	_	7	ccomp	_	_
19	to	_	TO	TO	_	20	aux	_	_
20	go	_	VB	VB	_	18	xcomp	_	_
21	through	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	system	_	NN	NN	_	21	pobj	_	_
24	over	_	RP	RP	_	20	advmod	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	over	_	RP	RP	_	24	conj	_	_
27	and	_	CC	CC	_	2	cc	_	_
28	consistently	_	RB	RB	_	29	advmod	_	_
29	fail	_	VBP	VBP	_	2	conj	_	_
30	.	_	.	.	_	2	punct	_	_

Oracle:
(a2 / and, op, f2 / fail-01)
(a2 / and, op, g2 / go-01)
(a3 / and, op, d / do-02)
(a3 / and, op, f / fail-01)
(c2 / course, mod, a / another)
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, c2 / course)
(d / do-02, purpose, p / possible)
(f / fail-01, ARG1, i / i)
(f / fail-01, ARG2, c / college)
(f / fail-01, time, o / once)
(f2 / fail-01, ARG0, i / i)
(f2 / fail-01, manner, c3 / consistent)
(g / get-05, ARG1, i / i)
(g2 / go-01, ARG1, i / i)
(g2 / go-01, frequency, o2 / over-and-over)
(g2 / go-01, path, s / system)
(p / possible, domain, g / get-05)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, a2 / and)

Input(Some(Graph((multi-sentence :snt2 (want-01 :ARG1 (and :op (fail-01 :manner consistent :ARG0 i) :op (go-01 :frequency over-and-over :path system :ARG1 i)) :polarity - :ARG0 i) :snt1 (and :op (do-02 :purpose (possible :domain (get-05 :ARG2 university :ARG1 i)) :ARG1 (course :mod another) :ARG0 i) :op (fail-01 :time once :ARG2 college :ARG1 i))),ArrayBuffer(Span(17,18,List(0),want,want-01,false), Span(24,25,List(1),and,and,false), Span(1,2,List(2),failed,fail-01,false), Span(19,20,List(3),go,go-01,false), Span(22,23,List(4),system,system,false), Span(26,27,List(5),and,and,false), Span(6,7,List(6),did,do-02,false), Span(11,12,List(7),could,possible,false), Span(12,13,List(8),get,get-05,false), Span(8,9,List(9),course,course,false), Span(7,8,List(10),another,another,false), Span(28,29,List(11),fail,fail-01,false), Span(3,4,List(12),once,once,false), Span(2,3,List(13),college,college,false), Span(0,1,List(14),I,i,false), Span(27,28,List(15),consistently,consistent,false), Span(4,5,List(16),over,over-and-over,false)),Map(2 -> fail-01, 5 -> and, 12 -> once, 15 -> consistent, 8 -> get-05, 7 -> possible, 1 -> and, 4 -> system, 11 -> fail-01, 14 -> i, 6 -> do-02, 9 -> course, 0 -> want-01, 16 -> over-and-over, 10 -> another, 3 -> go-01, 13 -> college),Map(w -> want-01, a3 -> and, s -> system, d -> do-02, g2 -> go-01, g -> get-05, p -> possible, c3 -> consistent, a -> another, o2 -> over-and-over, i -> i, a2 -> and, c -> college, f2 -> fail-01, f -> fail-01, o -> once, c2 -> course))),[Ljava.lang.String;@7fee8714,Annotation([Ljava.lang.String;@4229bb3f,[Ljava.lang.String;@56cdfb3b,[Ljava.lang.String;@2b91004a),Annotation([Ljava.lang.String;@20ccf40b,[Ljava.lang.String;@2fb3536e,[Ledu.cmu.lti.nlp.amr.Dependency;@169e6180),Annotation([Ljava.lang.String;@35aea049,[Ljava.lang.String;@7205765b,[Ljava.lang.String;@47987356),Annotation([Ljava.lang.String;@22ef9844,[Ljava.lang.String;@6283d8b8,[Ledu.cmu.lti.nlp.amr.Entity;@3b6ddd1d))
AMR:
(a3 / and, op, d / do-02)
(a3 / and, op, f / fail-01)
(c2 / course, mod, a / another)
(d / do-02, ARG1, c2 / course)
(f / fail-01, ARG1, i / i)
(f / fail-01, manner, c3 / consistent)
(f2 / fail-01, ARG0, i / i)
(f2 / fail-01, ARG1, c / college)
(f2 / fail-01, ARG6, o / once)
(g / get-05, ARG1, c2 / course)
(g2 / go-01, ARG2, s / system)
(g2 / go-01, ARG6, a2 / and)
(o2 / over-and-over, degree, o / once)
(p / possible, domain, g / get-05)
(w / want-01, ARG0, c2 / course)
(w / want-01, ARG1, g2 / go-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
Decoded in 898,594 microseconds
Sentence: Can someone please give me some advice please?

Oracle Span 1:  advice => advise-01
Oracle Span 2:  Can => possible
Oracle Span 3:  some => some
Oracle Span 4:  someone => someone
Spans:
Span 6-7:  advice => advise-01
Span 0-1:  Can => possible
Span 5-6:  some => some
Span 1-2:  someone => someone

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 6-7:  advice => advise-01
Oracle Span 0-1:  Can => possible
Oracle Span 5-6:  some => some
Oracle Span 1-2:  someone => someone

Dependencies:
1	Can	_	MD	MD	_	3	aux	_	_
2	someone	_	NN	NN	_	3	nsubj	_	_
3	please	_	VB	VB	_	0	root	_	_
4	give	_	VB	VB	_	3	ccomp	_	_
5	me	_	PRP	PRP	_	4	iobj	_	_
6	some	_	DT	DT	_	8	det	_	_
7	advice	_	NN	NN	_	8	nn	_	_
8	please	_	NN	NN	_	4	dobj	_	_
9	?	_	.	.	_	3	punct	_	_

Oracle:
(a2 / advise-01, ARG0, s / someone)
(a2 / advise-01, mod, s2 / some)
(p / possible, domain, a2 / advise-01)

Input(Some(Graph((possible :domain (advise-01 :mod some :ARG2 i :ARG0 someone) :polite + :mode interrogative),ArrayBuffer(Span(0,1,List(0),Can,possible,false), Span(1,2,List(1),someone,someone,false), Span(5,6,List(2),some,some,false), Span(6,7,List(3),advice,advise-01,false)),Map(2 -> some, 1 -> someone, 0 -> possible, 3 -> advise-01),Map(s2 -> some, s -> someone, p -> possible, a2 -> advise-01))),[Ljava.lang.String;@3f6b0be5,Annotation([Ljava.lang.String;@611889f4,[Ljava.lang.String;@1da2cb77,[Ljava.lang.String;@48f278eb),Annotation([Ljava.lang.String;@2f217633,[Ljava.lang.String;@a530d0a,[Ledu.cmu.lti.nlp.amr.Dependency;@1a18644),Annotation([Ljava.lang.String;@5acf93bb,[Ljava.lang.String;@7e7be63f,[Ljava.lang.String;@6cd28fa7),Annotation([Ljava.lang.String;@614ca7df,[Ljava.lang.String;@4738a206,[Ledu.cmu.lti.nlp.amr.Entity;@66d3eec0))
AMR:
(a2 / advise-01, ARG1, p / possible)
(a2 / advise-01, ARG6, s2 / some)
(p / possible, calendar, s / someone)

WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2
Decoded in 23,308 microseconds
Sentence: Perhaps go and see your doctor, and see if there's any way you can get your deadlines extended to try and ease the pressure a bit?

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  bit => bit
Oracle Span 4:  can => possible
Oracle Span 5:  deadlines => deadline
Oracle Span 6:  doctor => doctor
Oracle Span 7:  ease => ease-02
Oracle Span 8:  extended => extend-01
Oracle Span 9:  get => get-04
Oracle Span 10:  go => go-01
Oracle Span 11:  pressure => pressure
Oracle Span 12:  see => see-01
Oracle Span 13:  see => see-01
Oracle Span 14:  try => try-01
Oracle Span 15:  way => way
Oracle Span 16:  you => you
Spans:
Span 2-3:  and => and
Span 7-8:  and => and
Span 27-28:  bit => bit
Span 15-16:  can => possible
Span 18-19:  deadlines => deadline
Span 5-6:  doctor => doctor
Span 23-24:  ease => ease-02
Span 19-20:  extended => extend-01
Span 16-17:  get => get-04
Span 1-2:  go => go-01
Span 25-26:  pressure => pressure
Span 3-4:  see => see-01
Span 8-9:  see => see-01
Span 21-22:  try => try-01
Span 13-14:  way => way
Span 14-15:  you => you

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Oracle Span 2-3:  and => and
Oracle Span 7-8:  and => and
Oracle Span 27-28:  bit => bit
Oracle Span 15-16:  can => possible
Oracle Span 18-19:  deadlines => deadline
Oracle Span 5-6:  doctor => doctor
Oracle Span 23-24:  ease => ease-02
Oracle Span 19-20:  extended => extend-01
Oracle Span 16-17:  get => get-04
Oracle Span 1-2:  go => go-01
Oracle Span 25-26:  pressure => pressure
Oracle Span 3-4:  see => see-01
Oracle Span 8-9:  see => see-01
Oracle Span 21-22:  try => try-01
Oracle Span 13-14:  way => way
Oracle Span 14-15:  you => you

Dependencies:
1	Perhaps	_	RB	RB	_	2	advmod	_	_
2	go	_	VB	VB	_	0	root	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	see	_	VB	VB	_	2	conj	_	_
5	your	_	PRP$	PRP$	_	6	poss	_	_
6	doctor	_	NN	NN	_	2	dobj	_	_
7	,	_	,	,	_	2	punct	_	_
8	and	_	CC	CC	_	2	cc	_	_
9	see	_	VB	VB	_	2	conj	_	_
10	if	_	IN	IN	_	12	mark	_	_
11	there	_	EX	EX	_	12	expl	_	_
12	's	_	VBZ	VBZ	_	9	advcl	_	_
13	any	_	DT	DT	_	14	det	_	_
14	way	_	NN	NN	_	12	nsubj	_	_
15	you	_	PRP	PRP	_	17	nsubj	_	_
16	can	_	MD	MD	_	17	aux	_	_
17	get	_	VB	VB	_	14	rcmod	_	_
18	your	_	PRP$	PRP$	_	19	poss	_	_
19	deadlines	_	NNS	NNS	_	17	dobj	_	_
20	extended	_	VBN	VBN	_	19	vmod	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	try	_	VB	VB	_	20	xcomp	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	ease	_	VB	VB	_	22	conj	_	_
25	the	_	DT	DT	_	26	det	_	_
26	pressure	_	NN	NN	_	22	dobj	_	_
27	a	_	DT	DT	_	28	det	_	_
28	bit	_	NN	NN	_	26	dep	_	_
29	?	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a2 / and)
(a / and, op, s / see-01)
(a2 / and, op, g / go-01)
(a2 / and, op, s2 / see-01)
(d / doctor, poss, y / you)
(d2 / deadline, poss, y / you)
(e / extend-01, ARG0, y / you)
(e / extend-01, ARG1, d2 / deadline)
(e / extend-01, purpose, t2 / try-01)
(e2 / ease-02, ARG0, y / you)
(e2 / ease-02, ARG1, p3 / pressure)
(e2 / ease-02, degree, b / bit)
(g / go-01, ARG1, y / you)
(g2 / get-04, ARG1, e / extend-01)
(p2 / possible, domain, g2 / get-04)
(s / see-01, ARG0, y / you)
(s / see-01, ARG1, w / way)
(s2 / see-01, ARG0, y / you)
(s2 / see-01, ARG1, d / doctor)
(t2 / try-01, ARG0, y / you)
(t2 / try-01, ARG1, e2 / ease-02)
(w / way, mod, p2 / possible)

Input(Some(Graph((and :op (see-01 :ARG1 (way :mod (possible :domain (get-04 :ARG1 (extend-01 :purpose (try-01 :ARG1 (ease-02 :degree bit :ARG1 pressure :ARG0 you) :ARG0 you) :ARG1 (deadline :poss you) :ARG0 you))) :mode interrogative) :mode imperative :ARG0 you) :op (and :mod possible :op (see-01 :ARG1 (doctor :poss you) :mode imperative :ARG0 you) :op (go-01 :ARG1 you :mode imperative))),ArrayBuffer(Span(2,3,List(0),and,and,false), Span(3,4,List(1),see,see-01,false), Span(13,14,List(2),way,way,false), Span(15,16,List(3),can,possible,false), Span(16,17,List(4),get,get-04,false), Span(19,20,List(5),extended,extend-01,false), Span(21,22,List(6),try,try-01,false), Span(23,24,List(7),ease,ease-02,false), Span(27,28,List(8),bit,bit,false), Span(25,26,List(9),pressure,pressure,false), Span(18,19,List(10),deadlines,deadline,false), Span(7,8,List(11),and,and,false), Span(8,9,List(12),see,see-01,false), Span(5,6,List(13),doctor,doctor,false), Span(1,2,List(14),go,go-01,false), Span(14,15,List(15),you,you,false)),Map(2 -> way, 5 -> extend-01, 12 -> see-01, 15 -> you, 8 -> bit, 7 -> ease-02, 1 -> see-01, 4 -> get-04, 11 -> and, 14 -> go-01, 6 -> try-01, 9 -> pressure, 0 -> and, 10 -> deadline, 3 -> possible, 13 -> doctor),Map(e -> extend-01, w -> way, s2 -> see-01, b -> bit, e2 -> ease-02, p2 -> possible, s -> see-01, d -> doctor, g2 -> get-04, y -> you, g -> go-01, a -> and, d2 -> deadline, t2 -> try-01, a2 -> and, p3 -> pressure))),[Ljava.lang.String;@1e04fa0a,Annotation([Ljava.lang.String;@1af2d44a,[Ljava.lang.String;@18d87d80,[Ljava.lang.String;@618425b5),Annotation([Ljava.lang.String;@58695725,[Ljava.lang.String;@543588e6,[Ledu.cmu.lti.nlp.amr.Dependency;@f5acb9d),Annotation([Ljava.lang.String;@4fb3ee4e,[Ljava.lang.String;@5d7148e2,[Ljava.lang.String;@25fb8912),Annotation([Ljava.lang.String;@7c24b813,[Ljava.lang.String;@2c35e847,[Ledu.cmu.lti.nlp.amr.Entity;@7bd4937b))
AMR:
(a / and, op, g / go-01)
(a / and, op, s / see-01)
(a2 / and, op, g / go-01)
(a2 / and, op, s2 / see-01)
(e / extend-01, ARG1, t2 / try-01)
(e2 / ease-02, ARG0, d2 / deadline)
(e2 / ease-02, ARG1, p3 / pressure)
(g / go-01, ARG1, b / bit)
(g2 / get-04, ARG0, y / you)
(g2 / get-04, ARG1, d2 / deadline)
(g2 / get-04, manner, w / way)
(p2 / possible, domain, g2 / get-04)
(s / see-01, ARG1, d / doctor)
(s2 / see-01, ARG1, w / way)
(t2 / try-01, ARG1, p3 / pressure)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
Decoded in 956,920 microseconds
Sentence: Send your tutors a similar email to this post (don't worry they've seen it all before - some much more uncomfortable admissions too - I know as I used to work in a Uni Dept admin) and they will consider mitigating circumstances.

Oracle Span 1:  admin => administrate-01
Oracle Span 2:  admissions => (thing :ARG1-of admit-02)
Oracle Span 3:  all => all
Oracle Span 4:  and => and
Oracle Span 5:  before => before
Oracle Span 6:  circumstances => circumstance
Oracle Span 7:  consider => consider-02
Oracle Span 8:  email => email
Oracle Span 9:  know => know-01
Oracle Span 10:  mitigating => mitigate-01
Oracle Span 11:  more => more
Oracle Span 12:  much => much
Oracle Span 13:  post => post
Oracle Span 14:  seen => see-01
Oracle Span 15:  Send => send-01
Oracle Span 16:  some => some
Oracle Span 17:  they => they
Oracle Span 18:  this => this
Oracle Span 19:  tutors => tutor
Oracle Span 20:  uncomfortable => (comfortable :polarity -)
Oracle Span 21:  used => use-02
Oracle Span 22:  work => work-01
Oracle Span 23:  worry => worry-02
Spans:
Span 38-39:  admin => administrate-01
Span 24-25:  admissions => (thing :ARG1-of admit-02)
Span 17-18:  all => all
Span 40-41:  and => and
Span 18-19:  before => before
Span 45-46:  circumstances => circumstance
Span 43-44:  consider => consider-02
Span 5-6:  email => email
Span 28-29:  know => know-01
Span 44-45:  mitigating => mitigate-01
Span 22-23:  more => more
Span 21-22:  much => much
Span 8-9:  post => post
Span 15-16:  seen => see-01
Span 0-1:  Send => send-01
Span 20-21:  some => some
Span 13-14:  they => they
Span 7-8:  this => this
Span 2-3:  tutors => tutor
Span 23-24:  uncomfortable => (comfortable :polarity -)
Span 31-32:  used => use-02
Span 33-34:  work => work-01
Span 12-13:  worry => worry-02

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Oracle Span 38-39:  admin => administrate-01
Oracle Span 24-25:  admissions => (thing :ARG1-of admit-02)
Oracle Span 17-18:  all => all
Oracle Span 40-41:  and => and
Oracle Span 18-19:  before => before
Oracle Span 45-46:  circumstances => circumstance
Oracle Span 43-44:  consider => consider-02
Oracle Span 5-6:  email => email
Oracle Span 28-29:  know => know-01
Oracle Span 44-45:  mitigating => mitigate-01
Oracle Span 22-23:  more => more
Oracle Span 21-22:  much => much
Oracle Span 8-9:  post => post
Oracle Span 15-16:  seen => see-01
Oracle Span 0-1:  Send => send-01
Oracle Span 20-21:  some => some
Oracle Span 13-14:  they => they
Oracle Span 7-8:  this => this
Oracle Span 2-3:  tutors => tutor
Oracle Span 23-24:  uncomfortable => (comfortable :polarity -)
Oracle Span 31-32:  used => use-02
Oracle Span 33-34:  work => work-01
Oracle Span 12-13:  worry => worry-02

Dependencies:
1	Send	_	VB	VB	_	0	root	_	_
2	your	_	PRP$	PRP$	_	3	poss	_	_
3	tutors	_	NNS	NNS	_	6	nsubj	_	_
4	a	_	DT	DT	_	6	det	_	_
5	similar	_	JJ	JJ	_	6	amod	_	_
6	email	_	NN	NN	_	1	xcomp	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	this	_	DT	DT	_	9	det	_	_
9	post	_	NN	NN	_	7	pobj	_	_
10	(	_	(	(	_	13	punct	_	_
11	do	_	VB	VB	_	13	aux	_	_
12	n't	_	RB	RB	_	13	neg	_	_
13	worry	_	VB	VB	_	1	dep	_	_
14	they	_	PRP	PRP	_	16	nsubj	_	_
15	've	_	VBP	VBP	_	16	aux	_	_
16	seen	_	VBN	VBN	_	13	ccomp	_	_
17	it	_	PRP	PRP	_	16	dobj	_	_
18	all	_	DT	DT	_	19	dep	_	_
19	before	_	IN	IN	_	16	advmod	_	_
20	-	_	:	:	_	13	punct	_	_
21	some	_	DT	DT	_	25	det	_	_
22	much	_	RB	RB	_	24	advmod	_	_
23	more	_	RBR	RBR	_	24	advmod	_	_
24	uncomfortable	_	JJ	JJ	_	25	amod	_	_
25	admissions	_	NNS	NNS	_	13	dobj	_	_
26	too	_	RB	RB	_	25	advmod	_	_
27	-	_	:	:	_	25	punct	_	_
28	I	_	PRP	PRP	_	29	nsubj	_	_
29	know	_	VBP	VBP	_	25	dep	_	_
30	as	_	IN	IN	_	32	mark	_	_
31	I	_	PRP	PRP	_	32	nsubj	_	_
32	used	_	VBD	VBD	_	29	advcl	_	_
33	to	_	TO	TO	_	34	aux	_	_
34	work	_	VB	VB	_	32	xcomp	_	_
35	in	_	IN	IN	_	34	prep	_	_
36	a	_	DT	DT	_	39	det	_	_
37	Uni	_	NNP	NNP	_	39	nn	_	_
38	Dept	_	NNP	NNP	_	39	nn	_	_
39	admin	_	NN	NN	_	35	pobj	_	_
40	)	_	)	)	_	13	punct	_	_
41	and	_	CC	CC	_	1	cc	_	_
42	they	_	PRP	PRP	_	44	nsubj	_	_
43	will	_	MD	MD	_	44	aux	_	_
44	consider	_	VB	VB	_	1	conj	_	_
45	mitigating	_	VBG	VBG	_	44	xcomp	_	_
46	circumstances	_	NNS	NNS	_	45	dobj	_	_
47	.	_	.	.	_	1	punct	_	_

Oracle:
(a / and, op, c / consider-02)
(a / and, op, s / send-01)
(a3 / admit-02, ARG1, t4 / thing)
(c / consider-02, ARG0, t / tutor)
(c / consider-02, ARG1, c6 / circumstance)
(c4 / comfortable, degree, m3 / more)
(c4 / comfortable, polarity, -)
(m2 / mitigate-01, ARG0, c6 / circumstance)
(m3 / more, quant, m4 / much)
(p / post, mod, t2 / this)
(s / send-01, ARG1, e / email)
(s / send-01, ARG2, t / tutor)
(s2 / see-01, ARG0, t3 / they)
(s2 / see-01, ARG1, a2 / all)
(s2 / see-01, time, b / before)
(t4 / thing, mod, c4 / comfortable)
(t4 / thing, quant, s3 / some)
(u / use-02, ARG1, w2 / work-01)

Input(Some(Graph((multi-sentence :snt1 (and :op (consider-02 :ARG1 (circumstance :ARG0-of mitigate-01) :ARG0 tutor) :op (send-01 :ARG2 (tutor :poss you) :ARG1 (email :ARG1-of (resemble-01 :ARG2 (post :mod this))) :ARG0 you :mode imperative)) :snt2 (worry-02 :ARG1-of (cause-01 :ARG0 (see-01 :time before :ARG1 (all :ARG2-of (include-91 :ARG1 (thing :mod (comfortable :degree (more :quant much) :polarity -) :quant some :ARG1-of admit-02))) :ARG0 they)) :ARG0 you :mode imperative :polarity -) :snt3 (know-01 :ARG1-of (cause-01 :ARG0 (use-02 :ARG1 (work-01 :ARG2 (department :ARG0-of (administrate-01 :ARG1 university)) :ARG0 include-91))) :ARG0 include-91)),ArrayBuffer(Span(40,41,List(0),and,and,false), Span(43,44,List(1),consider,consider-02,false), Span(45,46,List(2),circumstances,circumstance,false), Span(44,45,List(3),mitigating,mitigate-01,false), Span(0,1,List(4),Send,send-01,false), Span(2,3,List(5),tutors,tutor,false), Span(5,6,List(6),email,email,false), Span(8,9,List(7),post,post,false), Span(7,8,List(8),this,this,false), Span(12,13,List(9),worry,worry-02,false), Span(15,16,List(10),seen,see-01,false), Span(18,19,List(11),before,before,false), Span(17,18,List(12),all,all,false), Span(20,21,List(13),some,some,false), Span(23,24,List(14, 15),uncomfortable,(comfortable :polarity -),false), Span(22,23,List(16),more,more,false), Span(21,22,List(17),much,much,false), Span(13,14,List(18),they,they,false), Span(28,29,List(19),know,know-01,false), Span(31,32,List(20),used,use-02,false), Span(33,34,List(21),work,work-01,false), Span(24,25,List(22, 23),admissions,(thing :ARG1-of admit-02),false), Span(38,39,List(24),admin,administrate-01,false)),Map(2 -> circumstance, 5 -> tutor, 12 -> all, 15 -> -, 8 -> this, 21 -> work-01, 18 -> they, 24 -> administrate-01, 7 -> post, 17 -> much, 1 -> consider-02, 23 -> admit-02, 4 -> send-01, 11 -> before, 14 -> comfortable, 20 -> use-02, 6 -> email, 9 -> worry-02, 0 -> and, 22 -> thing, 16 -> more, 19 -> know-01, 10 -> see-01, 3 -> mitigate-01, 13 -> some),Map(m3 -> more, e -> email, w -> worry-02, t4 -> thing, s2 -> see-01, t -> tutor, k -> know-01, b -> before, m2 -> mitigate-01, a3 -> admit-02, c4 -> comfortable, s -> send-01, t3 -> they, p -> post, a -> and, c6 -> circumstance, m4 -> much, t2 -> this, w2 -> work-01, a2 -> all, c -> consider-02, s3 -> some, u -> use-02, a4 -> administrate-01))),[Ljava.lang.String;@21e360a,Annotation([Ljava.lang.String;@5ba3f27a,[Ljava.lang.String;@58d75e99,[Ljava.lang.String;@74751b3),Annotation([Ljava.lang.String;@741a8937,[Ljava.lang.String;@306e95ec,[Ledu.cmu.lti.nlp.amr.Dependency;@52af26ee),Annotation([Ljava.lang.String;@6fd83fc1,[Ljava.lang.String;@4f2b503c,[Ljava.lang.String;@bae7dc0),Annotation([Ljava.lang.String;@209da20d,[Ljava.lang.String;@e15b7e8,[Ledu.cmu.lti.nlp.amr.Entity;@1b2abca6))
AMR:
(a / and, op, c / consider-02)
(a / and, op, s / send-01)
(a3 / admit-02, ARG1, t4 / thing)
(a3 / admit-02, ARG2, s2 / see-01)
(c / consider-02, ARG1, m2 / mitigate-01)
(c4 / comfortable, degree, m3 / more)
(c4 / comfortable, polarity, -)
(e / email, op, p / post)
(k / know-01, ARG1, u / use-02)
(m2 / mitigate-01, ARG1, c6 / circumstance)
(m3 / more, degree, m4 / much)
(p / post, mod, t2 / this)
(s / send-01, ARG1, t / tutor)
(s / send-01, ARG2, e / email)
(s2 / see-01, ARG0, t3 / they)
(s2 / see-01, ARG1, a2 / all)
(t4 / thing, mod, c4 / comfortable)
(t4 / thing, mod, s3 / some)
(u / use-02, ARG1, w2 / work-01)
(u / use-02, ARG6, t4 / thing)
(w / worry-02, ARG1, s2 / see-01)
(w / worry-02, ARG6, b / before)
(w2 / work-01, ARG0, a / and)
(w2 / work-01, ARG1, a4 / administrate-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.3.0.2
WARNING: makeIds can't find span Id: 0.1.3.0.1
WARNING: makeIds can't find span Id: 0.1.3.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.3.0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.3.0.1.0.0.2.0
WARNING: makeIds can't find span Id: 0.1.3.0.1.0.0.2.1
WARNING: makeIds can't find span Id: 0.1.3.0.1.0.0.2.1.0
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0.0
Decoded in 2,280,234 microseconds
Sentence: Break your work into manageable chunks.

Oracle Span 1:  Break => break-01
Oracle Span 2:  chunks => chunk
Oracle Span 3:  manageable => manage-01
Oracle Span 4:  work => (thing :ARG1-of work-01)
Spans:
Span 0-1:  Break => break-01
Span 5-6:  chunks => chunk
Span 4-5:  manageable => manage-01
Span 2-3:  work => (thing :ARG1-of work-01)

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Oracle Span 0-1:  Break => break-01
Oracle Span 5-6:  chunks => chunk
Oracle Span 4-5:  manageable => manage-01
Oracle Span 2-3:  work => (thing :ARG1-of work-01)

Dependencies:
1	Break	_	VB	VB	_	0	root	_	_
2	your	_	PRP$	PRP$	_	3	poss	_	_
3	work	_	NN	NN	_	1	dobj	_	_
4	into	_	IN	IN	_	1	prep	_	_
5	manageable	_	JJ	JJ	_	6	amod	_	_
6	chunks	_	NNS	NNS	_	4	pobj	_	_
7	.	_	.	.	_	1	punct	_	_

Oracle:
(b / break-01, ARG1, t / thing)
(b / break-01, ARG3, c / chunk)
(m / manage-01, ARG1, c / chunk)
(w / work-01, ARG1, t / thing)

Input(Some(Graph((break-01 :ARG3 (chunk :ARG1-of (manage-01 :mod possible :ARG0 you)) :ARG1 (thing :ARG1-of (work-01 :ARG0 you)) :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),Break,break-01,false), Span(5,6,List(1),chunks,chunk,false), Span(2,3,List(2, 3),work,(thing :ARG1-of work-01),false), Span(4,5,List(4),manageable,manage-01,false)),Map(2 -> thing, 1 -> chunk, 4 -> manage-01, 0 -> break-01, 3 -> work-01),Map(w -> work-01, t -> thing, b -> break-01, m -> manage-01, c -> chunk))),[Ljava.lang.String;@d5b810e,Annotation([Ljava.lang.String;@43dac38f,[Ljava.lang.String;@342c38f8,[Ljava.lang.String;@c88a337),Annotation([Ljava.lang.String;@5d0a1059,[Ljava.lang.String;@485966cc,[Ledu.cmu.lti.nlp.amr.Dependency;@1de76cc7),Annotation([Ljava.lang.String;@54bff557,[Ljava.lang.String;@593aaf41,[Ljava.lang.String;@5a56cdac),Annotation([Ljava.lang.String;@7c711375,[Ljava.lang.String;@57cf54e1,[Ledu.cmu.lti.nlp.amr.Entity;@5b03b9fe))
AMR:
(b / break-01, ARG1, t / thing)
(b / break-01, ARG2, c / chunk)
(m / manage-01, ARG1, c / chunk)
(w / work-01, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.3.0
Decoded in 119,439 microseconds
Sentence: Concentrate on one bit of work at a time (obvs the most urgent assignment first).

Oracle Span 1:  assignment => (thing :ARG1-of assign-01)
Oracle Span 2:  bit => bit
Oracle Span 3:  Concentrate => concentrate-01
Oracle Span 4:  most => most
Oracle Span 5:  one => 1
Oracle Span 6:  time => time
Oracle Span 7:  urgent => urgent
Oracle Span 8:  work => (thing :ARG1-of work-01)
Spans:
Span 14-15:  assignment => (thing :ARG1-of assign-01)
Span 3-4:  bit => bit
Span 0-1:  Concentrate => concentrate-01
Span 12-13:  most => most
Span 2-3:  one => 1
Span 8-9:  time => time
Span 13-14:  urgent => urgent
Span 5-6:  work => (thing :ARG1-of work-01)

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 14-15:  assignment => (thing :ARG1-of assign-01)
Oracle Span 3-4:  bit => bit
Oracle Span 0-1:  Concentrate => concentrate-01
Oracle Span 12-13:  most => most
Oracle Span 2-3:  one => 1
Oracle Span 8-9:  time => time
Oracle Span 13-14:  urgent => urgent
Oracle Span 5-6:  work => (thing :ARG1-of work-01)

Dependencies:
1	Concentrate	_	VB	VB	_	0	root	_	_
2	on	_	IN	IN	_	1	prep	_	_
3	one	_	CD	CD	_	4	num	_	_
4	bit	_	NN	NN	_	2	pobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	work	_	NN	NN	_	5	pobj	_	_
7	at	_	IN	IN	_	1	prep	_	_
8	a	_	DT	DT	_	9	det	_	_
9	time	_	NN	NN	_	7	pobj	_	_
10	(	_	(	(	_	11	punct	_	_
11	obvs	_	VBZ	VBZ	_	9	dep	_	_
12	the	_	DT	DT	_	15	det	_	_
13	most	_	JJS	JJS	_	15	amod	_	_
14	urgent	_	JJ	JJ	_	15	amod	_	_
15	assignment	_	NN	NN	_	11	dobj	_	_
16	first	_	RB	RB	_	11	advmod	_	_
17	)	_	)	)	_	11	punct	_	_
18	.	_	.	.	_	1	punct	_	_

Oracle:
(a / assign-01, ARG1, t3 / thing)
(b / bit, frequency, t / time)
(c / concentrate-01, ARG1, b / bit)
(t2 / thing, part, b / bit)
(t3 / thing, mod, u / urgent)
(u / urgent, degree, m / most)
(w / work-01, ARG1, t2 / thing)

Input(Some(Graph((concentrate-01 :ARG1 (bit :frequency time :ARG0-of (mean-01 :ARG1 (thing :ARG1-of obvious-41 :time (ordinal-entity :value 1) :mod (urgent :degree most) :ARG1-of assign-01)) :part-of (thing :ARG1-of work-01) :quant 1) :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),Concentrate,concentrate-01,false), Span(3,4,List(1),bit,bit,false), Span(8,9,List(2),time,time,false), Span(13,14,List(3),urgent,urgent,false), Span(12,13,List(4),most,most,false), Span(2,3,List(5),one,1,false), Span(5,6,List(6, 7),work,(thing :ARG1-of work-01),false), Span(14,15,List(8, 9),assignment,(thing :ARG1-of assign-01),false)),Map(2 -> time, 5 -> 1, 8 -> thing, 7 -> work-01, 1 -> bit, 4 -> most, 6 -> thing, 9 -> assign-01, 0 -> concentrate-01, 3 -> urgent),Map(w -> work-01, t -> time, b -> bit, m -> most, 1 -> 1, t3 -> thing, a -> assign-01, t2 -> thing, c -> concentrate-01, u -> urgent))),[Ljava.lang.String;@37d4349f,Annotation([Ljava.lang.String;@434a63ab,[Ljava.lang.String;@6e0f5f7f,[Ljava.lang.String;@2805d709),Annotation([Ljava.lang.String;@3ee37e5a,[Ljava.lang.String;@2ea41516,[Ledu.cmu.lti.nlp.amr.Dependency;@3a44431a),Annotation([Ljava.lang.String;@3c7f66c4,[Ljava.lang.String;@194bcebf,[Ljava.lang.String;@17497425),Annotation([Ljava.lang.String;@f0da945,[Ljava.lang.String;@4803b726,[Ledu.cmu.lti.nlp.amr.Entity;@ffaa6af))
AMR:
(a / assign-01, ARG1, t3 / thing)
(b / bit, mod, t2 / thing)
(b / bit, quant, 1 / 1)
(c / concentrate-01, ARG0, t3 / thing)
(c / concentrate-01, ARG1, b / bit)
(c / concentrate-01, ARG2, t / time)
(t3 / thing, mod, u / urgent)
(u / urgent, degree, m / most)
(w / work-01, ARG1, t2 / thing)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.3
WARNING: makeIds can't find span Id: 0.2.2.0.1
WARNING: makeIds can't find span Id: 0.2.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.2.0.2.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.2.2.0.0
Decoded in 248,579 microseconds
Sentence: Don't shut yourself off from your housemates, and well done for trying new things from the very beginning now keep at it!

Oracle Span 1:  and => and
Oracle Span 2:  beginning => begin-01
Oracle Span 3:  Do => do-02
Oracle Span 4:  from => from
Oracle Span 5:  housemates => housemate
Oracle Span 6:  it => it
Oracle Span 7:  keep => keep-02
Oracle Span 8:  new => new
Oracle Span 9:  now => now
Oracle Span 10:  shut => shut-03
Oracle Span 11:  things => thing
Oracle Span 12:  trying => try-01
Oracle Span 13:  very => very
Oracle Span 14:  well => well
Spans:
Span 9-10:  and => and
Span 19-20:  beginning => begin-01
Span 0-1:  Do => do-02
Span 5-6:  from => from
Span 7-8:  housemates => housemate
Span 23-24:  it => it
Span 21-22:  keep => keep-02
Span 14-15:  new => new
Span 20-21:  now => now
Span 2-3:  shut => shut-03
Span 15-16:  things => thing
Span 13-14:  trying => try-01
Span 18-19:  very => very
Span 10-11:  well => well

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 19-20:  beginning => begin-01
Oracle Span 0-1:  Do => do-02
Oracle Span 5-6:  from => from
Oracle Span 7-8:  housemates => housemate
Oracle Span 23-24:  it => it
Oracle Span 21-22:  keep => keep-02
Oracle Span 14-15:  new => new
Oracle Span 20-21:  now => now
Oracle Span 2-3:  shut => shut-03
Oracle Span 15-16:  things => thing
Oracle Span 13-14:  trying => try-01
Oracle Span 18-19:  very => very
Oracle Span 10-11:  well => well

Dependencies:
1	Do	_	VBP	VBP	_	3	aux	_	_
2	n't	_	RB	RB	_	3	neg	_	_
3	shut	_	VB	VB	_	0	root	_	_
4	yourself	_	PRP	PRP	_	3	dobj	_	_
5	off	_	RP	RP	_	3	prt	_	_
6	from	_	IN	IN	_	3	prep	_	_
7	your	_	PRP$	PRP$	_	8	poss	_	_
8	housemates	_	NNS	NNS	_	6	pobj	_	_
9	,	_	,	,	_	3	punct	_	_
10	and	_	CC	CC	_	3	cc	_	_
11	well	_	RB	RB	_	12	advmod	_	_
12	done	_	VBN	VBN	_	3	conj	_	_
13	for	_	IN	IN	_	12	prep	_	_
14	trying	_	VBG	VBG	_	13	pcomp	_	_
15	new	_	JJ	JJ	_	16	amod	_	_
16	things	_	NNS	NNS	_	22	nsubj	_	_
17	from	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	very	_	JJ	JJ	_	20	amod	_	_
20	beginning	_	NN	NN	_	17	pobj	_	_
21	now	_	RB	RB	_	22	advmod	_	_
22	keep	_	VB	VB	_	14	ccomp	_	_
23	at	_	IN	IN	_	22	prep	_	_
24	it	_	PRP	PRP	_	23	pobj	_	_
25	!	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, d / do-02)
(a / and, op, s / shut-03)
(b2 / begin-01, mod, v / very)
(d / do-02, degree, w / well)
(f / from, op, b2 / begin-01)
(k / keep-02, ARG1, i / it)
(k / keep-02, time, n / now)
(s / shut-03, ARG2, h / housemate)
(t / try-01, ARG1, t2 / thing)
(t / try-01, time, f / from)
(t2 / thing, mod, n2 / new)

Input(Some(Graph((multi-sentence :snt1 (and :op (do-02 :ARG1-of (cause-01 :ARG0 (try-01 :time (from :op (begin-01 :mod very)) :ARG1 (thing :mod new) :ARG0 you)) :degree well :mode imperative :ARG0 you) :op (shut-03 :ARG2 (housemate :poss you) :ARG0 you :mode imperative :polarity - :ARG1 you)) :snt2 (keep-02 :time now :ARG1 it :ARG0 you :mode imperative)),ArrayBuffer(Span(9,10,List(0),and,and,false), Span(0,1,List(1),Do,do-02,false), Span(13,14,List(2),trying,try-01,false), Span(5,6,List(3),from,from,false), Span(19,20,List(4),beginning,begin-01,false), Span(18,19,List(5),very,very,false), Span(15,16,List(6),things,thing,false), Span(14,15,List(7),new,new,false), Span(10,11,List(8),well,well,false), Span(2,3,List(9),shut,shut-03,false), Span(7,8,List(10),housemates,housemate,false), Span(21,22,List(11),keep,keep-02,false), Span(20,21,List(12),now,now,false), Span(23,24,List(13),it,it,false)),Map(2 -> try-01, 5 -> very, 12 -> now, 8 -> well, 7 -> new, 1 -> do-02, 4 -> begin-01, 11 -> keep-02, 6 -> thing, 9 -> shut-03, 0 -> and, 10 -> housemate, 3 -> from, 13 -> it),Map(n -> now, w -> well, h -> housemate, k -> keep-02, t -> try-01, b2 -> begin-01, s -> shut-03, v -> very, d -> do-02, a -> and, t2 -> thing, i -> it, f -> from, n2 -> new))),[Ljava.lang.String;@53ce1329,Annotation([Ljava.lang.String;@316bcf94,[Ljava.lang.String;@6404f418,[Ljava.lang.String;@3e11f9e9),Annotation([Ljava.lang.String;@1de5f259,[Ljava.lang.String;@729d991e,[Ledu.cmu.lti.nlp.amr.Dependency;@31fa1761),Annotation([Ljava.lang.String;@957e06,[Ljava.lang.String;@32502377,[Ljava.lang.String;@2c1b194a),Annotation([Ljava.lang.String;@4dbb42b7,[Ljava.lang.String;@66f57048,[Ledu.cmu.lti.nlp.amr.Entity;@550dbc7a))
AMR:
(a / and, op, s / shut-03)
(b2 / begin-01, ARG1, v / very)
(d / do-02, ARG1, f / from)
(f / from, op, h / housemate)
(k / keep-02, ARG0, t2 / thing)
(k / keep-02, ARG1, b2 / begin-01)
(k / keep-02, ARG6, i / it)
(k / keep-02, time, n / now)
(s / shut-03, ARG0, d / do-02)
(s / shut-03, ARG1, w / well)
(t / try-01, ARG0, t2 / thing)
(t / try-01, ARG1, a / and)
(t2 / thing, mod, n2 / new)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.1
WARNING: makeIds can't find span Id: 0.0.1.2.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 559,034 microseconds
Sentence: I'd reccomend you go and see your doctor too.

Oracle Span 1:  doctor => doctor
Oracle Span 2:  go => go-01
Oracle Span 3:  I => i
Oracle Span 4:  see => see-01
Oracle Span 5:  too => too
Oracle Span 6:  you => you
Spans:
Span 8-9:  doctor => doctor
Span 4-5:  go => go-01
Span 0-1:  I => i
Span 6-7:  see => see-01
Span 9-10:  too => too
Span 3-4:  you => you

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Oracle Span 8-9:  doctor => doctor
Oracle Span 4-5:  go => go-01
Oracle Span 0-1:  I => i
Oracle Span 6-7:  see => see-01
Oracle Span 9-10:  too => too
Oracle Span 3-4:  you => you

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	'd	_	MD	MD	_	3	aux	_	_
3	reccomend	_	VB	VB	_	0	root	_	_
4	you	_	PRP	PRP	_	5	nsubj	_	_
5	go	_	VB	VB	_	3	ccomp	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	see	_	VB	VB	_	5	conj	_	_
8	your	_	PRP$	PRP$	_	9	poss	_	_
9	doctor	_	NN	NN	_	7	dobj	_	_
10	too	_	RB	RB	_	7	advmod	_	_
11	.	_	.	.	_	3	punct	_	_

Oracle:
(d / doctor, poss, y / you)
(g / go-01, ARG1, y / you)
(g / go-01, purpose, s / see-01)
(s / see-01, ARG0, y / you)
(s / see-01, ARG1, d / doctor)
(s / see-01, mod, t / too)

Input(Some(Graph((recommend-01 :ARG0 i :ARG1 (go-01 :purpose (see-01 :mod too :ARG1 (doctor :poss you) :ARG0 you) :ARG1 you)),ArrayBuffer(Span(0,1,List(0),I,i,false), Span(4,5,List(1),go,go-01,false), Span(6,7,List(2),see,see-01,false), Span(9,10,List(3),too,too,false), Span(8,9,List(4),doctor,doctor,false), Span(3,4,List(5),you,you,false)),Map(2 -> see-01, 5 -> you, 1 -> go-01, 4 -> doctor, 0 -> i, 3 -> too),Map(t -> too, s -> see-01, d -> doctor, y -> you, g -> go-01, i -> i))),[Ljava.lang.String;@21282ed8,Annotation([Ljava.lang.String;@36916eb0,[Ljava.lang.String;@7bab3f1a,[Ljava.lang.String;@437da279),Annotation([Ljava.lang.String;@23c30a20,[Ljava.lang.String;@1e1a0406,[Ledu.cmu.lti.nlp.amr.Dependency;@3cebbb30),Annotation([Ljava.lang.String;@12aba8be,[Ljava.lang.String;@290222c1,[Ljava.lang.String;@67f639d3),Annotation([Ljava.lang.String;@6253c26,[Ljava.lang.String;@49049a04,[Ledu.cmu.lti.nlp.amr.Entity;@71a8adcf))
AMR:
(g / go-01, ARG0, y / you)
(g / go-01, ARG1, d / doctor)
(s / see-01, ARG0, i / i)
(s / see-01, ARG1, d / doctor)
(s / see-01, ARG6, t / too)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 174,216 microseconds
Sentence: If you've always been an anxious person you might benefit from speaking to someone (my friend got therapy on the NHS for anxiety, so its really normal).

Oracle Span 1:  always => always
Oracle Span 2:  anxiety => anxiety
Oracle Span 3:  anxious => anxious
Oracle Span 4:  benefit => benefit-01
Oracle Span 5:  friend => friend
Oracle Span 6:  got => get-01
Oracle Span 7:  If => cause-01
Oracle Span 8:  its => it
Oracle Span 9:  NHS => (organization :name (name :op "NHS"))
Oracle Span 10:  normal => normal
Oracle Span 11:  person => person
Oracle Span 12:  really => real
Oracle Span 13:  someone => someone
Oracle Span 14:  speaking => speak-01
Oracle Span 15:  therapy => therapy
Oracle Span 16:  you => you
NER Entity: (organization :name (name :op "NHS"))
Spans:
Span 3-4:  always => always
Span 24-25:  anxiety => anxiety
Span 6-7:  anxious => anxious
Span 10-11:  benefit => benefit-01
Span 17-18:  friend => friend
Span 18-19:  got => get-01
Span 0-1:  If => cause-01
Span 27-28:  its => it
Span 22-23:  NHS => (organization :name (name :op "NHS"))
Span 29-30:  normal => normal
Span 7-8:  person => person
Span 28-29:  really => real
Span 14-15:  someone => someone
Span 12-13:  speaking => speak-01
Span 19-20:  therapy => therapy
Span 1-2:  you => you

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 3-4:  always => always
Oracle Span 24-25:  anxiety => anxiety
Oracle Span 6-7:  anxious => anxious
Oracle Span 10-11:  benefit => benefit-01
Oracle Span 17-18:  friend => friend
Oracle Span 18-19:  got => get-01
Oracle Span 0-1:  If => cause-01
Oracle Span 27-28:  its => it
Oracle Span 22-23:  NHS => (organization :name (name :op "NHS"))
Oracle Span 29-30:  normal => normal
Oracle Span 7-8:  person => person
Oracle Span 28-29:  really => real
Oracle Span 14-15:  someone => someone
Oracle Span 12-13:  speaking => speak-01
Oracle Span 19-20:  therapy => therapy
Oracle Span 1-2:  you => you

Dependencies:
1	If	_	IN	IN	_	8	mark	_	_
2	you	_	PRP	PRP	_	8	nsubj	_	_
3	've	_	VBP	VBP	_	8	aux	_	_
4	always	_	RB	RB	_	8	advmod	_	_
5	been	_	VBN	VBN	_	8	cop	_	_
6	an	_	DT	DT	_	8	det	_	_
7	anxious	_	JJ	JJ	_	8	amod	_	_
8	person	_	NN	NN	_	11	advcl	_	_
9	you	_	PRP	PRP	_	11	nsubj	_	_
10	might	_	MD	MD	_	11	aux	_	_
11	benefit	_	VB	VB	_	0	root	_	_
12	from	_	IN	IN	_	11	prep	_	_
13	speaking	_	VBG	VBG	_	12	pcomp	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	someone	_	NN	NN	_	14	pobj	_	_
16	(	_	(	(	_	19	punct	_	_
17	my	_	PRP$	PRP$	_	18	poss	_	_
18	friend	_	NN	NN	_	19	nsubj	_	_
19	got	_	VBD	VBD	_	15	dep	_	_
20	therapy	_	NN	NN	_	19	dobj	_	_
21	on	_	IN	IN	_	19	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	NHS	_	NNP	NNP	_	21	pobj	_	_
24	for	_	IN	IN	_	19	prep	_	_
25	anxiety	_	NN	NN	_	24	pobj	_	_
26	,	_	,	,	_	19	punct	_	_
27	so	_	IN	IN	_	30	mark	_	_
28	its	_	PRP$	PRP$	_	30	dep	_	_
29	really	_	RB	RB	_	30	advmod	_	_
30	normal	_	JJ	JJ	_	19	advcl	_	_
31	)	_	)	)	_	19	punct	_	_
32	.	_	.	.	_	11	punct	_	_

Oracle:
(a2 / anxious, domain, p2 / person)
(a2 / anxious, time, a3 / always)
(b / benefit-01, ARG0, s / speak-01)
(b / benefit-01, ARG1, y / you)
(b / benefit-01, condition, a2 / anxious)
(c2 / cause-01, ARG0, a4 / anxiety)
(c2 / cause-01, ARG1, g / get-01)
(g / get-01, ARG0, f / friend)
(g / get-01, ARG1, t / therapy)
(g / get-01, ARG2, o / organization)
(n / name, op, "NHS")
(n2 / normal, degree, r / real)
(n2 / normal, domain, i2 / it)
(o / organization, name, n / name)
(p2 / person, domain, y / you)
(s / speak-01, ARG0, y / you)
(s / speak-01, ARG2, s2 / someone)

Input(Some(Graph((multi-sentence :snt1 (possible :domain (benefit-01 :condition (anxious :time always :domain (person :domain you)) :ARG1 you :ARG0 (speak-01 :ARG2 someone :ARG0 you))) :snt2 (get-01 :ARG1-of (cause-01 :ARG0 anxiety) :ARG0-of (cause-01 :ARG1 (normal :degree real :domain it)) :ARG2 (organization :name (name :op "NHS")) :ARG1 therapy :ARG0 (friend :poss i))),ArrayBuffer(Span(22,23,List(0, 1, 2),NHS,(organization :name (name :op "NHS")),false), Span(10,11,List(3),benefit,benefit-01,false), Span(6,7,List(4),anxious,anxious,false), Span(3,4,List(5),always,always,false), Span(7,8,List(6),person,person,false), Span(1,2,List(7),you,you,false), Span(12,13,List(8),speaking,speak-01,false), Span(14,15,List(9),someone,someone,false), Span(18,19,List(10),got,get-01,false), Span(0,1,List(11),If,cause-01,false), Span(24,25,List(12),anxiety,anxiety,false), Span(29,30,List(13),normal,normal,false), Span(27,28,List(14),its,it,false), Span(19,20,List(15),therapy,therapy,false), Span(17,18,List(16),friend,friend,false), Span(28,29,List(17),really,real,false)),Map(2 -> "NHS", 5 -> always, 12 -> anxiety, 15 -> therapy, 8 -> speak-01, 7 -> you, 17 -> real, 1 -> name, 4 -> anxious, 11 -> cause-01, 14 -> it, 6 -> person, 9 -> someone, 0 -> organization, 16 -> friend, 10 -> get-01, 3 -> benefit-01, 13 -> normal),Map(n -> name, s2 -> someone, t -> therapy, b -> benefit-01, p2 -> person, a3 -> always, s -> speak-01, g -> get-01, y -> you, i2 -> it, r -> real, a2 -> anxious, f -> friend, o -> organization, n2 -> normal, c2 -> cause-01, a4 -> anxiety))),[Ljava.lang.String;@659499f1,Annotation([Ljava.lang.String;@51e69659,[Ljava.lang.String;@47e2e487,[Ljava.lang.String;@201a4587),Annotation([Ljava.lang.String;@61001b64,[Ljava.lang.String;@4310d43,[Ledu.cmu.lti.nlp.amr.Dependency;@54a7079e),Annotation([Ljava.lang.String;@26e356f0,[Ljava.lang.String;@47d9a273,[Ljava.lang.String;@4b8ee4de),Annotation([Ljava.lang.String;@27f981c6,[Ljava.lang.String;@1b11171f,[Ledu.cmu.lti.nlp.amr.Entity;@1151e434))
AMR:
(a3 / always, domain, y / you)
(b / benefit-01, ARG1, s / speak-01)
(c2 / cause-01, ARG0, p2 / person)
(c2 / cause-01, ARG1, b / benefit-01)
(c2 / cause-01, ARG6, y / you)
(g / get-01, ARG0, f / friend)
(g / get-01, ARG1, t / therapy)
(g / get-01, ARG2, o / organization)
(g / get-01, ARG6, s2 / someone)
(n / name, op, "NHS")
(n2 / normal, mod, r / real)
(o / organization, location, a4 / anxiety)
(o / organization, name, n / name)
(p2 / person, mod, a2 / anxious)
(r / real, calendar, i2 / it)
(s / speak-01, ARG1, n2 / normal)
(s / speak-01, ARG2, s2 / someone)

WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.1
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.4
WARNING: makeIds can't find span Id: 0.1.4.0
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.3.0.1
Decoded in 684,370 microseconds
Sentence: And try and get deadlines extended, if you're honest I'm sure your uni will allow it.

Oracle Span 1:  allow => allow-01
Oracle Span 2:  And => and
Oracle Span 3:  deadlines => deadline
Oracle Span 4:  extended => extend-01
Oracle Span 5:  get => get-04
Oracle Span 6:  honest => honest
Oracle Span 7:  I => i
Oracle Span 8:  it => it
Oracle Span 9:  try => try-01
Oracle Span 10:  you => you
Spans:
Span 17-18:  allow => allow-01
Span 0-1:  And => and
Span 4-5:  deadlines => deadline
Span 5-6:  extended => extend-01
Span 3-4:  get => get-04
Span 10-11:  honest => honest
Span 11-12:  I => i
Span 18-19:  it => it
Span 1-2:  try => try-01
Span 8-9:  you => you

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 17-18:  allow => allow-01
Oracle Span 0-1:  And => and
Oracle Span 4-5:  deadlines => deadline
Oracle Span 5-6:  extended => extend-01
Oracle Span 3-4:  get => get-04
Oracle Span 10-11:  honest => honest
Oracle Span 11-12:  I => i
Oracle Span 18-19:  it => it
Oracle Span 1-2:  try => try-01
Oracle Span 8-9:  you => you

Dependencies:
1	And	_	CC	CC	_	2	cc	_	_
2	try	_	VB	VB	_	0	root	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	get	_	VB	VB	_	2	conj	_	_
5	deadlines	_	NNS	NNS	_	2	dobj	_	_
6	extended	_	VBN	VBN	_	2	dep	_	_
7	,	_	,	,	_	2	punct	_	_
8	if	_	IN	IN	_	11	mark	_	_
9	you	_	PRP	PRP	_	11	nsubj	_	_
10	're	_	VBP	VBP	_	11	cop	_	_
11	honest	_	JJ	JJ	_	2	advcl	_	_
12	I	_	PRP	PRP	_	14	nsubj	_	_
13	'm	_	VBP	VBP	_	14	cop	_	_
14	sure	_	JJ	JJ	_	11	ccomp	_	_
15	your	_	PRP$	PRP$	_	16	poss	_	_
16	uni	_	NN	NN	_	18	nsubj	_	_
17	will	_	MD	MD	_	18	aux	_	_
18	allow	_	VB	VB	_	14	ccomp	_	_
19	it	_	PRP	PRP	_	18	dobj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(a / allow-01, ARG1, i2 / it)
(a2 / and, op, t / try-01)
(e / extend-01, ARG1, d / deadline)
(g / get-04, ARG1, e / extend-01)
(t / try-01, ARG1, g / get-04)

Input(Some(Graph((multi-sentence :snt2 (know-01 :ARG0 i :ARG1 (allow-01 :ARG1 it :ARG0 (university :poss you)) :condition (honest :domain you)) :snt1 (and :op (try-01 :ARG1 (get-04 :ARG1 (extend-01 :ARG1 deadline) :ARG0 you) :ARG0 you :mode imperative))),ArrayBuffer(Span(11,12,List(0),I,i,false), Span(17,18,List(1),allow,allow-01,false), Span(18,19,List(2),it,it,false), Span(8,9,List(3),you,you,false), Span(10,11,List(4),honest,honest,false), Span(0,1,List(5),And,and,false), Span(1,2,List(6),try,try-01,false), Span(3,4,List(7),get,get-04,false), Span(5,6,List(8),extended,extend-01,false), Span(4,5,List(9),deadlines,deadline,false)),Map(2 -> it, 5 -> and, 8 -> extend-01, 7 -> get-04, 1 -> allow-01, 4 -> honest, 6 -> try-01, 9 -> deadline, 0 -> i, 3 -> you),Map(e -> extend-01, h -> honest, t -> try-01, d -> deadline, g -> get-04, a -> allow-01, i2 -> it, a2 -> and, i -> i, y2 -> you))),[Ljava.lang.String;@2dc54ad4,Annotation([Ljava.lang.String;@4659191b,[Ljava.lang.String;@55634720,[Ljava.lang.String;@4b0d79fc),Annotation([Ljava.lang.String;@4c1909a3,[Ljava.lang.String;@428640fa,[Ledu.cmu.lti.nlp.amr.Dependency;@d9345cd),Annotation([Ljava.lang.String;@2d710f1a,[Ljava.lang.String;@29215f06,[Ljava.lang.String;@59505b48),Annotation([Ljava.lang.String;@4efac082,[Ljava.lang.String;@6bd61f98,[Ledu.cmu.lti.nlp.amr.Entity;@48aca48b))
AMR:
(a / allow-01, ARG0, h / honest)
(a / allow-01, ARG6, i2 / it)
(a2 / and, op, g / get-04)
(a2 / and, op, t / try-01)
(e / extend-01, ARG1, d / deadline)
(g / get-04, ARG1, d / deadline)
(h / honest, domain, y2 / you)
(i / i, calendar, h / honest)
(t / try-01, ARG1, y2 / you)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.0
Decoded in 342,010 microseconds
Sentence: It's getting hard to keep strong and keep carrying on with life.

Oracle Span 1:  and => and
Oracle Span 2:  carrying => carry-02
Oracle Span 3:  getting => get-03
Oracle Span 4:  hard => hard
Oracle Span 5:  keep => keep-02
Oracle Span 6:  keep => keep-02
Oracle Span 7:  strong => strong
Spans:
Span 7-8:  and => and
Span 9-10:  carrying => carry-02
Span 2-3:  getting => get-03
Span 3-4:  hard => hard
Span 5-6:  keep => keep-02
Span 8-9:  keep => keep-02
Span 6-7:  strong => strong

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 9-10:  carrying => carry-02
Oracle Span 2-3:  getting => get-03
Oracle Span 3-4:  hard => hard
Oracle Span 5-6:  keep => keep-02
Oracle Span 8-9:  keep => keep-02
Oracle Span 6-7:  strong => strong

Dependencies:
1	It	_	PRP	PRP	_	3	nsubj	_	_
2	's	_	VBZ	VBZ	_	3	aux	_	_
3	getting	_	VBG	VBG	_	0	root	_	_
4	hard	_	RB	RB	_	3	advmod	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	keep	_	VB	VB	_	3	xcomp	_	_
7	strong	_	JJ	JJ	_	6	acomp	_	_
8	and	_	CC	CC	_	6	cc	_	_
9	keep	_	VB	VB	_	6	conj	_	_
10	carrying	_	VBG	VBG	_	9	xcomp	_	_
11	on	_	RP	RP	_	10	prt	_	_
12	with	_	IN	IN	_	10	prep	_	_
13	life	_	NN	NN	_	12	pobj	_	_
14	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, k / keep-02)
(a / and, op, k2 / keep-02)
(g / get-03, ARG1, a / and)
(g / get-03, ARG2, h / hard)
(k / keep-02, ARG1, s / strong)
(k2 / keep-02, ARG1, c / carry-02)

Input(Some(Graph((get-03 :ARG2 hard :ARG1 (and :op (keep-02 :ARG1 (carry-02 :ARG1 live-01)) :op (keep-02 :ARG1 strong))),ArrayBuffer(Span(2,3,List(0),getting,get-03,false), Span(3,4,List(1),hard,hard,false), Span(7,8,List(2),and,and,false), Span(5,6,List(3),keep,keep-02,false), Span(9,10,List(4),carrying,carry-02,false), Span(8,9,List(5),keep,keep-02,false), Span(6,7,List(6),strong,strong,false)),Map(2 -> and, 5 -> keep-02, 1 -> hard, 4 -> carry-02, 6 -> strong, 0 -> get-03, 3 -> keep-02),Map(k2 -> keep-02, h -> hard, k -> keep-02, s -> strong, g -> get-03, a -> and, c -> carry-02))),[Ljava.lang.String;@13fd2ccd,Annotation([Ljava.lang.String;@b9b00e0,[Ljava.lang.String;@506ae4d4,[Ljava.lang.String;@7d4f9aae),Annotation([Ljava.lang.String;@72e5a8e,[Ljava.lang.String;@54e1c68b,[Ledu.cmu.lti.nlp.amr.Dependency;@53aac487),Annotation([Ljava.lang.String;@52b1beb6,[Ljava.lang.String;@273e7444,[Ljava.lang.String;@7db12bb6),Annotation([Ljava.lang.String;@783a467b,[Ljava.lang.String;@272113c4,[Ledu.cmu.lti.nlp.amr.Entity;@73e9cf30))
AMR:
(a / and, op, k / keep-02)
(a / and, op, k2 / keep-02)
(g / get-03, ARG1, a / and)
(g / get-03, manner, h / hard)
(k / keep-02, ARG1, c / carry-02)
(k2 / keep-02, ARG1, s / strong)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 201,426 microseconds
Sentence: My mum is getting divorced - she had a horrible time with my step-father and her new found freedom has sent her round the bend.

Oracle Span 1:  and => and
Oracle Span 2:  bend => bend
Oracle Span 3:  divorced => divorce-01
Oracle Span 4:  found => find-01
Oracle Span 5:  freedom => free-41
Oracle Span 6:  had => have-03
Oracle Span 7:  horrible => horrible
Oracle Span 8:  mum => mum
Oracle Span 9:  new => new
Oracle Span 10:  round => round-03
Oracle Span 11:  sent => send-02
Oracle Span 12:  she => she
Oracle Span 13:  step => step-father
Oracle Span 14:  time => time
Spans:
Span 16-17:  and => and
Span 26-27:  bend => bend
Span 4-5:  divorced => divorce-01
Span 19-20:  found => find-01
Span 20-21:  freedom => free-41
Span 7-8:  had => have-03
Span 9-10:  horrible => horrible
Span 1-2:  mum => mum
Span 18-19:  new => new
Span 24-25:  round => round-03
Span 22-23:  sent => send-02
Span 6-7:  she => she
Span 13-14:  step => step-father
Span 10-11:  time => time

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 26-27:  bend => bend
Oracle Span 4-5:  divorced => divorce-01
Oracle Span 19-20:  found => find-01
Oracle Span 20-21:  freedom => free-41
Oracle Span 7-8:  had => have-03
Oracle Span 9-10:  horrible => horrible
Oracle Span 1-2:  mum => mum
Oracle Span 18-19:  new => new
Oracle Span 24-25:  round => round-03
Oracle Span 22-23:  sent => send-02
Oracle Span 6-7:  she => she
Oracle Span 13-14:  step => step-father
Oracle Span 10-11:  time => time

Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	mum	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	aux	_	_
4	getting	_	VBG	VBG	_	0	root	_	_
5	divorced	_	VBN	VBN	_	4	dep	_	_
6	-	_	:	:	_	4	punct	_	_
7	she	_	PRP	PRP	_	8	nsubj	_	_
8	had	_	VBD	VBD	_	4	parataxis	_	_
9	a	_	DT	DT	_	11	det	_	_
10	horrible	_	JJ	JJ	_	11	amod	_	_
11	time	_	NN	NN	_	8	dobj	_	_
12	with	_	IN	IN	_	11	prep	_	_
13	my	_	PRP$	PRP$	_	14	poss	_	_
14	step-father	_	NN	NN	_	12	pobj	_	_
15	and	_	CC	CC	_	8	cc	_	_
16	her	_	PRP$	PRP$	_	17	poss	_	_
17	new	_	JJ	JJ	_	18	nsubj	_	_
18	found	_	VBD	VBD	_	8	conj	_	_
19	freedom	_	NN	NN	_	21	nsubj	_	_
20	has	_	VBZ	VBZ	_	21	aux	_	_
21	sent	_	VBN	VBN	_	18	ccomp	_	_
22	her	_	PRP$	PRP$	_	23	poss	_	_
23	round	_	NN	NN	_	21	dep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	bend	_	NN	NN	_	21	dobj	_	_
26	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, h / have-03)
(a / and, op, s3 / send-02)
(d / divorce-01, ARG0, m2 / mum)
(f / free-41, ARG1, s / she)
(f / free-41, mod, n / new)
(f2 / find-01, ARG0, s / she)
(f2 / find-01, ARG1, f / free-41)
(h / have-03, ARG0, s / she)
(h / have-03, ARG1, t / time)
(h / have-03, accompanier, s2 / step-father)
(r / round-03, ARG1, s / she)
(r / round-03, ARG2, b / bend)
(s3 / send-02, ARG0, f / free-41)
(s3 / send-02, ARG1, s / she)
(s3 / send-02, ARG2, r / round-03)
(t / time, mod, h2 / horrible)

Input(Some(Graph((multi-sentence :snt1 (divorce-01 :ARG0 (mum :poss i)) :snt2 (and :op (send-02 :ARG2 (round-03 :ARG2 bend :ARG1 she) :ARG0 (free-41 :mod new :ARG1-of (find-01 :ARG0 she) :ARG1 she) :ARG1 she) :op (have-03 :accompanier (step-father :poss i) :ARG1 (time :mod horrible) :ARG0 she))),ArrayBuffer(Span(4,5,List(0),divorced,divorce-01,false), Span(1,2,List(1),mum,mum,false), Span(16,17,List(2),and,and,false), Span(22,23,List(3),sent,send-02,false), Span(24,25,List(4),round,round-03,false), Span(26,27,List(5),bend,bend,false), Span(19,20,List(6),found,find-01,false), Span(18,19,List(7),new,new,false), Span(7,8,List(8),had,have-03,false), Span(10,11,List(9),time,time,false), Span(9,10,List(10),horrible,horrible,false), Span(6,7,List(11),she,she,false), Span(20,21,List(12),freedom,free-41,false), Span(13,14,List(13),step,step-father,false)),Map(2 -> and, 5 -> bend, 12 -> free-41, 8 -> have-03, 7 -> new, 1 -> mum, 4 -> round-03, 11 -> she, 6 -> find-01, 9 -> time, 0 -> divorce-01, 10 -> horrible, 3 -> send-02, 13 -> step-father),Map(n -> new, h -> have-03, s2 -> step-father, h2 -> horrible, t -> time, b -> bend, m2 -> mum, s -> she, d -> divorce-01, a -> and, r -> round-03, s3 -> send-02, f2 -> find-01, f -> free-41))),[Ljava.lang.String;@771a660,Annotation([Ljava.lang.String;@2d52216b,[Ljava.lang.String;@242b836,[Ljava.lang.String;@3f6f6701),Annotation([Ljava.lang.String;@3527942a,[Ljava.lang.String;@942a29c,[Ledu.cmu.lti.nlp.amr.Dependency;@1ed6388a),Annotation([Ljava.lang.String;@5a45133e,[Ljava.lang.String;@534a5a98,[Ljava.lang.String;@4f80542f),Annotation([Ljava.lang.String;@60bd273d,[Ljava.lang.String;@121314f7,[Ledu.cmu.lti.nlp.amr.Entity;@130c12b7))
AMR:
(a / and, op, f2 / find-01)
(a / and, op, h / have-03)
(d / divorce-01, ARG0, m2 / mum)
(d / divorce-01, ARG1, h / have-03)
(f / free-41, ARG1, n / new)
(f2 / find-01, ARG1, s3 / send-02)
(h / have-03, ARG0, s / she)
(h / have-03, ARG1, t / time)
(r / round-03, ARG1, f / free-41)
(s3 / send-02, ARG0, f / free-41)
(s3 / send-02, ARG1, b / bend)
(t / time, mod, h2 / horrible)
(t / time, poss, s2 / step-father)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
Decoded in 781,430 microseconds
Sentence: She's epileptic and a manic depressive with a huge anger problem.

Oracle Span 1:  and => and
Oracle Span 2:  anger => anger
Oracle Span 3:  depressive => depress-01
Oracle Span 4:  epileptic => epilepsy
Oracle Span 5:  huge => huge
Oracle Span 6:  manic => manic
Oracle Span 7:  problem => problem
Oracle Span 8:  She => she
Spans:
Span 3-4:  and => and
Span 10-11:  anger => anger
Span 6-7:  depressive => depress-01
Span 2-3:  epileptic => epilepsy
Span 9-10:  huge => huge
Span 5-6:  manic => manic
Span 11-12:  problem => problem
Span 0-1:  She => she

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 3-4:  and => and
Oracle Span 10-11:  anger => anger
Oracle Span 6-7:  depressive => depress-01
Oracle Span 2-3:  epileptic => epilepsy
Oracle Span 9-10:  huge => huge
Oracle Span 5-6:  manic => manic
Oracle Span 11-12:  problem => problem
Oracle Span 0-1:  She => she

Dependencies:
1	She	_	PRP	PRP	_	3	nsubj	_	_
2	's	_	VBZ	VBZ	_	3	cop	_	_
3	epileptic	_	JJ	JJ	_	0	root	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	a	_	DT	DT	_	7	det	_	_
6	manic	_	JJ	JJ	_	7	amod	_	_
7	depressive	_	NN	NN	_	3	conj	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	a	_	DT	DT	_	12	det	_	_
10	huge	_	JJ	JJ	_	12	amod	_	_
11	anger	_	NN	NN	_	12	nn	_	_
12	problem	_	NN	NN	_	8	pobj	_	_
13	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, d / depress-01)
(a / and, op, e / epilepsy)
(d / depress-01, ARG1, s / she)
(d / depress-01, accompanier, p / problem)
(d / depress-01, mod, m / manic)
(e / epilepsy, domain, s / she)
(p / problem, mod, a2 / anger)
(p / problem, mod, h / huge)

Input(Some(Graph((and :op (depress-01 :accompanier (problem :mod huge :mod anger) :mod manic :ARG1 she) :op (epilepsy :domain she)),ArrayBuffer(Span(3,4,List(0),and,and,false), Span(5,6,List(1),manic,manic,false), Span(11,12,List(2),problem,problem,false), Span(9,10,List(3),huge,huge,false), Span(10,11,List(4),anger,anger,false), Span(0,1,List(5),She,she,false), Span(6,7,List(6),depressive,depress-01,false), Span(2,3,List(7),epileptic,epilepsy,false)),Map(2 -> problem, 5 -> she, 7 -> epilepsy, 1 -> manic, 4 -> anger, 6 -> depress-01, 0 -> and, 3 -> huge),Map(e -> epilepsy, h -> huge, s -> she, d -> depress-01, m -> manic, p -> problem, a -> and, a2 -> anger))),[Ljava.lang.String;@5e600dd5,Annotation([Ljava.lang.String;@576d5deb,[Ljava.lang.String;@5d534f5d,[Ljava.lang.String;@2e3967ea),Annotation([Ljava.lang.String;@70e9c95d,[Ljava.lang.String;@4d5650ae,[Ledu.cmu.lti.nlp.amr.Dependency;@a38c7fe),Annotation([Ljava.lang.String;@6fdbe764,[Ljava.lang.String;@51c668e3,[Ljava.lang.String;@2e6a8155),Annotation([Ljava.lang.String;@6221a451,[Ljava.lang.String;@52719fb6,[Ledu.cmu.lti.nlp.amr.Entity;@3012646b))
AMR:
(a / and, op, d / depress-01)
(d / depress-01, ARG1, p / problem)
(d / depress-01, ARG6, s / she)
(d / depress-01, mod, m / manic)
(e / epilepsy, domain, s / she)
(p / problem, mod, a2 / anger)
(p / problem, mod, h / huge)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 100,015 microseconds
Sentence: She's horrible to me, constantly.

Oracle Span 1:  constantly => constant
Oracle Span 2:  horrible => horrible
Oracle Span 3:  She => she
Spans:
Span 6-7:  constantly => constant
Span 2-3:  horrible => horrible
Span 0-1:  She => she

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  constantly => constant
Oracle Span 2-3:  horrible => horrible
Oracle Span 0-1:  She => she

Dependencies:
1	She	_	PRP	PRP	_	3	nsubj	_	_
2	's	_	VBZ	VBZ	_	3	cop	_	_
3	horrible	_	JJ	JJ	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	me	_	PRP	PRP	_	4	pobj	_	_
6	,	_	,	,	_	3	punct	_	_
7	constantly	_	RB	RB	_	3	advmod	_	_
8	.	_	.	.	_	3	punct	_	_

Oracle:
(h / horrible, domain, s / she)
(h / horrible, manner, c / constant)

Input(Some(Graph((horrible :manner constant :domain she :beneficiary i),ArrayBuffer(Span(2,3,List(0),horrible,horrible,false), Span(0,1,List(1),She,she,false), Span(6,7,List(2),constantly,constant,false)),Map(2 -> constant, 1 -> she, 0 -> horrible),Map(h -> horrible, s -> she, c -> constant))),[Ljava.lang.String;@4a883b15,Annotation([Ljava.lang.String;@25641d39,[Ljava.lang.String;@7b36aa0c,[Ljava.lang.String;@5824a83d),Annotation([Ljava.lang.String;@537f60bf,[Ljava.lang.String;@5677323c,[Ledu.cmu.lti.nlp.amr.Dependency;@18df8434),Annotation([Ljava.lang.String;@65c7a252,[Ljava.lang.String;@4d154ccd,[Ljava.lang.String;@229c6181),Annotation([Ljava.lang.String;@4686afc2,[Ljava.lang.String;@1e0b4072,[Ledu.cmu.lti.nlp.amr.Entity;@791f145a))
AMR:
(c / constant, op, h / horrible)
(h / horrible, domain, s / she)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
Decoded in 11,111 microseconds
Sentence: I can't cope with her outbursts and nasty hateful remarks when I'm at home.

Oracle Span 1:  and => and
Oracle Span 2:  cope => cope-01
Oracle Span 3:  hateful => hateful
Oracle Span 4:  home => home
Oracle Span 5:  I => i
Oracle Span 6:  nasty => nasty
Oracle Span 7:  outbursts => outburst
Oracle Span 8:  remarks => (thing :ARG1-of remark-01)
Spans:
Span 7-8:  and => and
Span 3-4:  cope => cope-01
Span 9-10:  hateful => hateful
Span 15-16:  home => home
Span 0-1:  I => i
Span 8-9:  nasty => nasty
Span 6-7:  outbursts => outburst
Span 10-11:  remarks => (thing :ARG1-of remark-01)

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 3-4:  cope => cope-01
Oracle Span 9-10:  hateful => hateful
Oracle Span 15-16:  home => home
Oracle Span 0-1:  I => i
Oracle Span 8-9:  nasty => nasty
Oracle Span 6-7:  outbursts => outburst
Oracle Span 10-11:  remarks => (thing :ARG1-of remark-01)

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	ca	_	MD	MD	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	cope	_	VB	VB	_	0	root	_	_
5	with	_	IN	IN	_	4	prep	_	_
6	her	_	PRP$	PRP$	_	7	poss	_	_
7	outbursts	_	NNS	NNS	_	5	pobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	nasty	_	JJ	JJ	_	11	amod	_	_
10	hateful	_	JJ	JJ	_	11	amod	_	_
11	remarks	_	NNS	NNS	_	7	conj	_	_
12	when	_	WRB	WRB	_	14	advmod	_	_
13	I	_	PRP	PRP	_	14	nsubj	_	_
14	'm	_	VBP	VBP	_	4	advcl	_	_
15	at	_	IN	IN	_	14	prep	_	_
16	home	_	NN	NN	_	15	pobj	_	_
17	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, o / outburst)
(a / and, op, t / thing)
(c / cope-01, ARG0, i / i)
(c / cope-01, ARG1, a / and)
(r / remark-01, ARG1, t / thing)
(t / thing, mod, h / hateful)
(t / thing, mod, n / nasty)

Input(Some(Graph((possible :polarity - :domain (cope-01 :ARG1 (and :op (thing :mod nasty :mod hateful :ARG1-of (remark-01 :ARG0 she)) :op (outburst :poss she)) :ARG0 i) :time (be-located-at-91 :ARG2 home :ARG1 i)),ArrayBuffer(Span(3,4,List(0),cope,cope-01,false), Span(7,8,List(1),and,and,false), Span(10,11,List(2, 3),remarks,(thing :ARG1-of remark-01),false), Span(9,10,List(4),hateful,hateful,false), Span(8,9,List(5),nasty,nasty,false), Span(6,7,List(6),outbursts,outburst,false), Span(0,1,List(7),I,i,false), Span(15,16,List(8),home,home,false)),Map(2 -> thing, 5 -> nasty, 8 -> home, 7 -> i, 1 -> and, 4 -> hateful, 6 -> outburst, 0 -> cope-01, 3 -> remark-01),Map(n -> nasty, h -> hateful, h2 -> home, t -> thing, a -> and, i -> i, r -> remark-01, c -> cope-01, o -> outburst))),[Ljava.lang.String;@38cee291,Annotation([Ljava.lang.String;@4b45a2f5,[Ljava.lang.String;@f09733f,[Ljava.lang.String;@e350b40),Annotation([Ljava.lang.String;@41a0aa7d,[Ljava.lang.String;@2794eab6,[Ledu.cmu.lti.nlp.amr.Dependency;@6340e5f0),Annotation([Ljava.lang.String;@45099dd3,[Ljava.lang.String;@13e344d,[Ljava.lang.String;@1ffaf86),Annotation([Ljava.lang.String;@6574a52c,[Ljava.lang.String;@6c1a5b54,[Ledu.cmu.lti.nlp.amr.Entity;@1c7696c6))
AMR:
(a / and, op, o / outburst)
(a / and, op, t / thing)
(c / cope-01, ARG0, i / i)
(c / cope-01, ARG1, h2 / home)
(c / cope-01, medium, o / outburst)
(r / remark-01, ARG1, t / thing)
(t / thing, mod, h / hateful)
(t / thing, mod, n / nasty)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 153,808 microseconds
Sentence: I'm 18, a full-time sixth former at a high pressure private school (on a 95% bursary) and I'm at breaking point.

Oracle Span 1:  18 => 18
Oracle Span 2:  95 => 95
Oracle Span 3:  breaking => break-01
Oracle Span 4:  bursary => bursary
Oracle Span 5:  former => form
Oracle Span 6:  full => full
Oracle Span 7:  high => high
Oracle Span 8:  I => i
Oracle Span 9:  point => point
Oracle Span 10:  pressure => pressure-01
Oracle Span 11:  private => private
Oracle Span 12:  school => school
Oracle Span 13:  time => time
Spans:
Span 2-3:  18 => 18
Span 19-20:  95 => 95
Span 27-28:  breaking => break-01
Span 21-22:  bursary => bursary
Span 9-10:  former => form
Span 5-6:  full => full
Span 12-13:  high => high
Span 0-1:  I => i
Span 28-29:  point => point
Span 13-14:  pressure => pressure-01
Span 14-15:  private => private
Span 15-16:  school => school
Span 7-8:  time => time

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 2-3:  18 => 18
Oracle Span 19-20:  95 => 95
Oracle Span 27-28:  breaking => break-01
Oracle Span 21-22:  bursary => bursary
Oracle Span 9-10:  former => form
Oracle Span 5-6:  full => full
Oracle Span 12-13:  high => high
Oracle Span 0-1:  I => i
Oracle Span 28-29:  point => point
Oracle Span 13-14:  pressure => pressure-01
Oracle Span 14-15:  private => private
Oracle Span 15-16:  school => school
Oracle Span 7-8:  time => time

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	'm	_	VBP	VBP	_	3	cop	_	_
3	18	_	CD	CD	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	a	_	DT	DT	_	8	det	_	_
6	full-time	_	JJ	JJ	_	8	amod	_	_
7	sixth	_	JJ	JJ	_	8	amod	_	_
8	former	_	NN	NN	_	3	appos	_	_
9	at	_	IN	IN	_	8	prep	_	_
10	a	_	DT	DT	_	14	det	_	_
11	high	_	JJ	JJ	_	14	amod	_	_
12	pressure	_	NN	NN	_	14	nn	_	_
13	private	_	JJ	JJ	_	14	amod	_	_
14	school	_	NN	NN	_	9	pobj	_	_
15	(	_	(	(	_	16	punct	_	_
16	on	_	IN	IN	_	14	prep	_	_
17	a	_	DT	DT	_	20	det	_	_
18	95	_	CD	CD	_	19	number	_	_
19	%	_	NN	NN	_	20	amod	_	_
20	bursary	_	NN	NN	_	16	pobj	_	_
21	)	_	)	)	_	16	punct	_	_
22	and	_	CC	CC	_	3	cc	_	_
23	I	_	PRP	PRP	_	24	nsubj	_	_
24	'm	_	VBP	VBP	_	3	conj	_	_
25	at	_	IN	IN	_	24	prep	_	_
26	breaking	_	VBG	VBG	_	25	pcomp	_	_
27	point	_	NN	NN	_	26	dobj	_	_
28	.	_	.	.	_	3	punct	_	_

Oracle:
(b3 / break-01, ARG1, i / i)
(p3 / pressure-01, ARG0, s / school)
(p3 / pressure-01, mod, h / high)
(p4 / point, mod, b3 / break-01)
(s / school, mod, p2 / private)
(t2 / time, mod, f2 / full)

Input(Some(Graph((person :ARG0-of (have-03 :ARG1 (bursary :mod (percentage-entity :value 95))) :ARG0-of (study-01 :mod (time :mod full) :location (school :ARG0-of (pressure-01 :mod high) :mod private) :prep-in (form :ord (ordinal-entity :value 6))) :age (temporal-quantity :quant 18 :unit year) :location (point :mod (break-01 :ARG1 i)) :domain i),ArrayBuffer(Span(21,22,List(0),bursary,bursary,false), Span(19,20,List(1),95,95,false), Span(7,8,List(2),time,time,false), Span(5,6,List(3),full,full,false), Span(15,16,List(4),school,school,false), Span(13,14,List(5),pressure,pressure-01,false), Span(12,13,List(6),high,high,false), Span(14,15,List(7),private,private,false), Span(9,10,List(8),former,form,false), Span(2,3,List(9),18,18,false), Span(28,29,List(10),point,point,false), Span(27,28,List(11),breaking,break-01,false), Span(0,1,List(12),I,i,false)),Map(2 -> time, 5 -> pressure-01, 12 -> i, 8 -> form, 7 -> private, 1 -> 95, 4 -> school, 11 -> break-01, 6 -> high, 9 -> 18, 0 -> bursary, 10 -> point, 3 -> full),Map(b3 -> break-01, h -> high, b -> bursary, p2 -> private, s -> school, 1 -> 18, p4 -> point, t2 -> time, i -> i, f2 -> full, 9 -> 95, f -> form, p3 -> pressure-01))),[Ljava.lang.String;@60099951,Annotation([Ljava.lang.String;@20140db9,[Ljava.lang.String;@1e6a3214,[Ljava.lang.String;@368247b9),Annotation([Ljava.lang.String;@1a6d8329,[Ljava.lang.String;@1a942c18,[Ledu.cmu.lti.nlp.amr.Dependency;@55a147cc),Annotation([Ljava.lang.String;@71ba6d4e,[Ljava.lang.String;@738dc9b,[Ljava.lang.String;@3c77d488),Annotation([Ljava.lang.String;@63376bed,[Ljava.lang.String;@4145bad8,[Ledu.cmu.lti.nlp.amr.Entity;@d86a6f))
AMR:
(b3 / break-01, ARG0, f2 / full)
(b3 / break-01, ARG1, p4 / point)
(f / form, mod, f2 / full)
(f2 / full, calendar, 1 / 18)
(i / i, calendar, 1 / 18)
(p3 / pressure-01, ARG0, 9 / 95)
(p3 / pressure-01, ARG1, b / bursary)
(p3 / pressure-01, mod, h / high)
(s / school, mod, h / high)
(s / school, mod, p2 / private)
(s / school, part, f / form)
(t2 / time, mod, f2 / full)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.4
Decoded in 280,199 microseconds
Sentence: I can't do work at home, because she shouts at me.

Oracle Span 1:  because => cause-01
Oracle Span 2:  home => home
Oracle Span 3:  I => i
Oracle Span 4:  she => she
Oracle Span 5:  shouts => shout-01
Oracle Span 6:  work => work-01
Spans:
Span 8-9:  because => cause-01
Span 6-7:  home => home
Span 0-1:  I => i
Span 9-10:  she => she
Span 10-11:  shouts => shout-01
Span 4-5:  work => work-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  because => cause-01
Oracle Span 6-7:  home => home
Oracle Span 0-1:  I => i
Oracle Span 9-10:  she => she
Oracle Span 10-11:  shouts => shout-01
Oracle Span 4-5:  work => work-01

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	ca	_	MD	MD	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	do	_	VB	VB	_	0	root	_	_
5	work	_	NN	NN	_	4	dobj	_	_
6	at	_	IN	IN	_	4	prep	_	_
7	home	_	NN	NN	_	6	pobj	_	_
8	,	_	,	,	_	4	punct	_	_
9	because	_	IN	IN	_	11	mark	_	_
10	she	_	PRP	PRP	_	11	nsubj	_	_
11	shouts	_	VBZ	VBZ	_	4	advcl	_	_
12	at	_	IN	IN	_	11	prep	_	_
13	me	_	PRP	PRP	_	12	pobj	_	_
14	.	_	.	.	_	4	punct	_	_

Oracle:
(c / cause-01, ARG0, s / shout-01)
(s / shout-01, ARG0, s2 / she)
(s / shout-01, ARG2, i / i)
(w / work-01, ARG0, i / i)
(w / work-01, location, h / home)

Input(Some(Graph((possible :polarity - :domain (work-01 :location home :ARG0 i) :ARG1-of (cause-01 :ARG0 (shout-01 :ARG0 she :ARG2 i))),ArrayBuffer(Span(4,5,List(0),work,work-01,false), Span(6,7,List(1),home,home,false), Span(0,1,List(2),I,i,false), Span(8,9,List(3),because,cause-01,false), Span(10,11,List(4),shouts,shout-01,false), Span(9,10,List(5),she,she,false)),Map(2 -> i, 5 -> she, 1 -> home, 4 -> shout-01, 0 -> work-01, 3 -> cause-01),Map(w -> work-01, h -> home, s2 -> she, s -> shout-01, i -> i, c -> cause-01))),[Ljava.lang.String;@2892d68,Annotation([Ljava.lang.String;@5ab956d7,[Ljava.lang.String;@3646a422,[Ljava.lang.String;@750e2b97),Annotation([Ljava.lang.String;@3e27aa33,[Ljava.lang.String;@2e385cce,[Ledu.cmu.lti.nlp.amr.Dependency;@2ddc9a9f),Annotation([Ljava.lang.String;@298a5e20,[Ljava.lang.String;@2a7f1f10,[Ljava.lang.String;@46cdf8bd),Annotation([Ljava.lang.String;@f0c8a99,[Ljava.lang.String;@740cae06,[Ledu.cmu.lti.nlp.amr.Entity;@26d9b808))
AMR:
(c / cause-01, ARG0, s / shout-01)
(s / shout-01, ARG0, s2 / she)
(s / shout-01, ARG1, w / work-01)
(w / work-01, ARG0, i / i)
(w / work-01, ARG1, h / home)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
Decoded in 34,047 microseconds
Sentence: So then my teachers get angry at me.

Oracle Span 1:  teachers => (person :ARG0-of teach-01)
Oracle Span 2:  then => then
Spans:
Span 3-4:  teachers => (person :ARG0-of teach-01)
Span 1-2:  then => then

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  teachers => (person :ARG0-of teach-01)
Oracle Span 1-2:  then => then

Dependencies:
1	So	_	IN	IN	_	6	dep	_	_
2	then	_	RB	RB	_	6	advmod	_	_
3	my	_	PRP$	PRP$	_	4	poss	_	_
4	teachers	_	NNS	NNS	_	6	nsubj	_	_
5	get	_	VBP	VBP	_	6	dep	_	_
6	angry	_	JJ	JJ	_	0	root	_	_
7	at	_	IN	IN	_	6	prep	_	_
8	me	_	PRP	PRP	_	7	pobj	_	_
9	.	_	.	.	_	6	punct	_	_

Oracle:
(t / teach-01, ARG0, p / person)

Input(Some(Graph((anger-01 :ARG0 i :ARG1 (person :ARG0-of (teach-01 :ARG2 i)) :time then :ARG1-of cause-01),ArrayBuffer(Span(3,4,List(0, 1),teachers,(person :ARG0-of teach-01),false), Span(1,2,List(2),then,then,false)),Map(2 -> then, 1 -> teach-01, 0 -> person),Map(t -> teach-01, p -> person, t2 -> then))),[Ljava.lang.String;@f78a47e,Annotation([Ljava.lang.String;@644baf4a,[Ljava.lang.String;@7526515b,[Ljava.lang.String;@1ed4ae0f),Annotation([Ljava.lang.String;@54c5a2ff,[Ljava.lang.String;@6d4d66d2,[Ledu.cmu.lti.nlp.amr.Dependency;@2a265ea9),Annotation([Ljava.lang.String;@11392934,[Ljava.lang.String;@6892b3b6,[Ljava.lang.String;@6e6f2380),Annotation([Ljava.lang.String;@76a4ebf2,[Ljava.lang.String;@2e8c1c9b,[Ledu.cmu.lti.nlp.amr.Entity;@53fe15ff))
AMR:
(t / teach-01, ARG0, p / person)
(t / teach-01, ARG1, t2 / then)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 12,447 microseconds
Sentence: One minute she's lovely, and it's like having my mummy back, then the next, she turns into the most spiteful human alive.

Oracle Span 1:  and => and
Oracle Span 2:  back => back
Oracle Span 3:  having => have-06
Oracle Span 4:  human => human
Oracle Span 5:  lovely => lovely
Oracle Span 6:  minute => minute
Oracle Span 7:  most => most
Oracle Span 8:  mummy => mummy
Oracle Span 9:  next => next
Oracle Span 10:  One => one
Oracle Span 11:  she => she
Oracle Span 12:  spiteful => spiteful
Oracle Span 13:  then => then
Oracle Span 14:  turns => turn-02
Spans:
Span 6-7:  and => and
Span 13-14:  back => back
Span 10-11:  having => have-06
Span 25-26:  human => human
Span 4-5:  lovely => lovely
Span 1-2:  minute => minute
Span 23-24:  most => most
Span 12-13:  mummy => mummy
Span 17-18:  next => next
Span 0-1:  One => one
Span 2-3:  she => she
Span 24-25:  spiteful => spiteful
Span 15-16:  then => then
Span 20-21:  turns => turn-02

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 13-14:  back => back
Oracle Span 10-11:  having => have-06
Oracle Span 25-26:  human => human
Oracle Span 4-5:  lovely => lovely
Oracle Span 1-2:  minute => minute
Oracle Span 23-24:  most => most
Oracle Span 12-13:  mummy => mummy
Oracle Span 17-18:  next => next
Oracle Span 0-1:  One => one
Oracle Span 2-3:  she => she
Oracle Span 24-25:  spiteful => spiteful
Oracle Span 15-16:  then => then
Oracle Span 20-21:  turns => turn-02

Dependencies:
1	One	_	CD	CD	_	2	num	_	_
2	minute	_	NN	NN	_	5	tmod	_	_
3	she	_	PRP	PRP	_	5	nsubj	_	_
4	's	_	VBZ	VBZ	_	5	cop	_	_
5	lovely	_	JJ	JJ	_	21	ccomp	_	_
6	,	_	,	,	_	5	punct	_	_
7	and	_	CC	CC	_	5	cc	_	_
8	it	_	PRP	PRP	_	9	nsubj	_	_
9	's	_	VBZ	VBZ	_	5	conj	_	_
10	like	_	IN	IN	_	9	prep	_	_
11	having	_	VBG	VBG	_	10	pcomp	_	_
12	my	_	PRP$	PRP$	_	14	poss	_	_
13	mummy	_	JJ	JJ	_	14	amod	_	_
14	back	_	NN	NN	_	11	dobj	_	_
15	,	_	,	,	_	14	punct	_	_
16	then	_	RB	RB	_	18	advmod	_	_
17	the	_	DT	DT	_	18	det	_	_
18	next	_	JJ	JJ	_	14	appos	_	_
19	,	_	,	,	_	21	punct	_	_
20	she	_	PRP	PRP	_	21	nsubj	_	_
21	turns	_	VBZ	VBZ	_	0	root	_	_
22	into	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	26	det	_	_
24	most	_	RBS	RBS	_	25	advmod	_	_
25	spiteful	_	JJ	JJ	_	26	amod	_	_
26	human	_	NN	NN	_	22	pobj	_	_
27	alive	_	JJ	JJ	_	26	amod	_	_
28	.	_	.	.	_	21	punct	_	_

Oracle:
(a / and, op, l / lovely)
(a / and, op, t2 / turn-02)
(h / have-06, ARG1, m2 / mummy)
(h / have-06, mod, b / back)
(h2 / human, mod, s2 / spiteful)
(l / lovely, domain, s / she)
(m4 / minute, mod, n / next)
(s2 / spiteful, degree, m3 / most)
(t2 / turn-02, ARG1, s / she)
(t2 / turn-02, ARG2, h2 / human)
(t2 / turn-02, time, m4 / minute)
(t2 / turn-02, time, t3 / then)

Input(Some(Graph((and :op (turn-02 :time (minute :mod next) :time then :ARG2 (human :ARG0-of live-01 :mod (spiteful :degree most)) :ARG1 she) :op (lovely :ARG1-of (resemble-01 :ARG2 (have-06 :mod back :ARG1 (mummy :poss i) :ARG0 i)) :time (minute :mod one) :domain she)),ArrayBuffer(Span(6,7,List(0),and,and,false), Span(20,21,List(1),turns,turn-02,false), Span(1,2,List(2),minute,minute,false), Span(17,18,List(3),next,next,false), Span(15,16,List(4),then,then,false), Span(25,26,List(5),human,human,false), Span(24,25,List(6),spiteful,spiteful,false), Span(23,24,List(7),most,most,false), Span(4,5,List(8),lovely,lovely,false), Span(10,11,List(9),having,have-06,false), Span(13,14,List(10),back,back,false), Span(12,13,List(11),mummy,mummy,false), Span(0,1,List(12),One,one,false), Span(2,3,List(13),she,she,false)),Map(2 -> minute, 5 -> human, 12 -> one, 8 -> lovely, 7 -> most, 1 -> turn-02, 4 -> then, 11 -> mummy, 6 -> spiteful, 9 -> have-06, 0 -> and, 10 -> back, 3 -> next, 13 -> she),Map(m3 -> most, n -> next, h -> have-06, s2 -> spiteful, h2 -> human, b -> back, m2 -> mummy, s -> she, t3 -> then, a -> and, m4 -> minute, t2 -> turn-02, l -> lovely, o -> one))),[Ljava.lang.String;@449a4f23,Annotation([Ljava.lang.String;@1530c739,[Ljava.lang.String;@5b1669c0,[Ljava.lang.String;@78e4deb0),Annotation([Ljava.lang.String;@6e9175d8,[Ljava.lang.String;@7d0b7e3c,[Ledu.cmu.lti.nlp.amr.Dependency;@15bb5034),Annotation([Ljava.lang.String;@4b741d6d,[Ljava.lang.String;@2eae8e6e,[Ljava.lang.String;@8f2ef19),Annotation([Ljava.lang.String;@470734c3,[Ljava.lang.String;@2cf3d63b,[Ledu.cmu.lti.nlp.amr.Entity;@7674f035))
AMR:
(a / and, op, l / lovely)
(b / back, mod, m2 / mummy)
(h / have-06, ARG0, l / lovely)
(h / have-06, ARG1, b / back)
(h / have-06, ARG6, n / next)
(h2 / human, mod, s2 / spiteful)
(l / lovely, domain, s / she)
(m4 / minute, calendar, s / she)
(n / next, mod, t3 / then)
(s2 / spiteful, degree, m3 / most)
(t2 / turn-02, ARG0, o / one)
(t2 / turn-02, ARG1, a / and)
(t2 / turn-02, prep-as, h2 / human)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 583,312 microseconds
Sentence: I'm not going to pass my A2 exams, I've already accepted defeat, that this year of my life is going to make me a failure.

Oracle Span 1:  A => (name :op "A2")
Oracle Span 2:  accepted => accept-01
Oracle Span 3:  already => already
Oracle Span 4:  defeat => defeat-01
Oracle Span 5:  exams => exam
Oracle Span 6:  failure => fail-01
Oracle Span 7:  I => i
Oracle Span 8:  make => make-02
Oracle Span 9:  pass => pass-07
Oracle Span 10:  this => this
Oracle Span 11:  year => year
Spans:
Span 7-8:  A => (name :op "A2")
Span 14-15:  accepted => accept-01
Span 13-14:  already => already
Span 15-16:  defeat => defeat-01
Span 9-10:  exams => exam
Span 29-30:  failure => fail-01
Span 0-1:  I => i
Span 26-27:  make => make-02
Span 5-6:  pass => pass-07
Span 18-19:  this => this
Span 19-20:  year => year

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Oracle Span 7-8:  A => (name :op "A2")
Oracle Span 14-15:  accepted => accept-01
Oracle Span 13-14:  already => already
Oracle Span 15-16:  defeat => defeat-01
Oracle Span 9-10:  exams => exam
Oracle Span 29-30:  failure => fail-01
Oracle Span 0-1:  I => i
Oracle Span 26-27:  make => make-02
Oracle Span 5-6:  pass => pass-07
Oracle Span 18-19:  this => this
Oracle Span 19-20:  year => year

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	'm	_	VBP	VBP	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	going	_	VBG	VBG	_	14	ccomp	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	pass	_	VB	VB	_	4	xcomp	_	_
7	my	_	PRP$	PRP$	_	9	poss	_	_
8	A2	_	NN	NN	_	9	nn	_	_
9	exams	_	NNS	NNS	_	6	dobj	_	_
10	,	_	,	,	_	14	punct	_	_
11	I	_	PRP	PRP	_	14	nsubj	_	_
12	've	_	VBP	VBP	_	14	aux	_	_
13	already	_	RB	RB	_	14	advmod	_	_
14	accepted	_	VBN	VBN	_	0	root	_	_
15	defeat	_	NN	NN	_	14	dobj	_	_
16	,	_	,	,	_	14	punct	_	_
17	that	_	IN	IN	_	24	mark	_	_
18	this	_	DT	DT	_	19	det	_	_
19	year	_	NN	NN	_	24	nsubj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	my	_	PRP$	PRP$	_	22	poss	_	_
22	life	_	NN	NN	_	20	pobj	_	_
23	is	_	VBZ	VBZ	_	24	aux	_	_
24	going	_	VBG	VBG	_	14	ccomp	_	_
25	to	_	TO	TO	_	26	aux	_	_
26	make	_	VB	VB	_	24	xcomp	_	_
27	me	_	PRP	PRP	_	29	nsubj	_	_
28	a	_	DT	DT	_	29	det	_	_
29	failure	_	NN	NN	_	26	xcomp	_	_
30	.	_	.	.	_	14	punct	_	_

Oracle:
(a2 / accept-01, ARG0, i / i)
(a2 / accept-01, time, a4 / already)
(d / defeat-01, ARG1, i / i)
(e / exam, name, n / name)
(e / exam, poss, i / i)
(f / fail-01, ARG1, i / i)
(m / make-02, ARG0, y / year)
(m / make-02, ARG1, f / fail-01)
(n / name, op, "A2")
(p / pass-07, ARG1, i / i)
(p / pass-07, ARG2, e / exam)
(y / year, mod, t / this)

Input(Some(Graph((and :op (pass-07 :ARG2 (exam :name (name :op "A2") :poss i) :ARG1 i :polarity -) :op (accept-01 :time already :ARG1 (and :op (defeat-01 :ARG1 i) :op (make-02 :ARG1 (fail-01 :ARG1 i) :ARG0 (year :part-of (live-01 :ARG0 i) :mod this))) :ARG0 i)),ArrayBuffer(Span(7,8,List(0, 1),A,(name :op "A2"),false), Span(5,6,List(2),pass,pass-07,false), Span(9,10,List(3),exams,exam,false), Span(0,1,List(4),I,i,false), Span(14,15,List(5),accepted,accept-01,false), Span(13,14,List(6),already,already,false), Span(15,16,List(7),defeat,defeat-01,false), Span(26,27,List(8),make,make-02,false), Span(19,20,List(9),year,year,false), Span(18,19,List(10),this,this,false), Span(29,30,List(11),failure,fail-01,false)),Map(2 -> pass-07, 5 -> accept-01, 8 -> make-02, 7 -> defeat-01, 1 -> "A2", 4 -> i, 11 -> fail-01, 6 -> already, 9 -> year, 0 -> name, 10 -> this, 3 -> exam),Map(e -> exam, n -> name, t -> this, m -> make-02, d -> defeat-01, y -> year, p -> pass-07, a2 -> accept-01, i -> i, f -> fail-01, a4 -> already))),[Ljava.lang.String;@69e153c5,Annotation([Ljava.lang.String;@173ed316,[Ljava.lang.String;@25ce9dc4,[Ljava.lang.String;@74ea2410),Annotation([Ljava.lang.String;@17f62e33,[Ljava.lang.String;@76b1e9b8,[Ledu.cmu.lti.nlp.amr.Dependency;@27406a17),Annotation([Ljava.lang.String;@2af004b,[Ljava.lang.String;@248e319b,[Ljava.lang.String;@5d0bf09b),Annotation([Ljava.lang.String;@793f29ff,[Ljava.lang.String;@3e8c3cb,[Ledu.cmu.lti.nlp.amr.Entity;@563f38c4))
AMR:
(a2 / accept-01, ARG1, d / defeat-01)
(a2 / accept-01, time, a4 / already)
(d / defeat-01, ARG1, t / this)
(e / exam, name, n / name)
(f / fail-01, ARG1, n / name)
(m / make-02, ARG0, y / year)
(m / make-02, ARG1, f / fail-01)
(n / name, op, "A2")
(p / pass-07, ARG0, i / i)
(p / pass-07, ARG1, e / exam)
(y / year, mod, t / this)

WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.1
Decoded in 659,158 microseconds
Sentence: Maybe I can come back from this, who knows. I've got the most amazing university offers, but I can't even accept them - I'll never make the grades.

Oracle Span 1:  accept => accept-01
Oracle Span 2:  amazing => amaze-01
Oracle Span 3:  back => back
Oracle Span 4:  but => contrast-01
Oracle Span 5:  can => possible
Oracle Span 6:  come => come-01
Oracle Span 7:  even => even
Oracle Span 8:  grades => grade
Oracle Span 9:  I => i
Oracle Span 10:  I => i
Oracle Span 11:  I => i
Oracle Span 12:  knows => know-01
Oracle Span 13:  make => make-18
Oracle Span 14:  most => most
Oracle Span 15:  offers => offer-01
Oracle Span 16:  this => this
Oracle Span 17:  university => university
Spans:
Span 25-26:  accept => accept-01
Span 16-17:  amazing => amaze-01
Span 4-5:  back => back
Span 20-21:  but => contrast-01
Span 2-3:  can => possible
Span 3-4:  come => come-01
Span 24-25:  even => even
Span 33-34:  grades => grade
Span 1-2:  I => i
Span 11-12:  I => i
Span 21-22:  I => i
Span 9-10:  knows => know-01
Span 31-32:  make => make-18
Span 15-16:  most => most
Span 18-19:  offers => offer-01
Span 6-7:  this => this
Span 17-18:  university => university

 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of accept in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of them in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of 'll in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of never in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of grades in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 34
Langrangian relaxation converged after 42 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of accept in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of them in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of 'll in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of never in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of grades in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 34
Oracle Span 25-26:  accept => accept-01
Oracle Span 16-17:  amazing => amaze-01
Oracle Span 4-5:  back => back
Oracle Span 20-21:  but => contrast-01
Oracle Span 2-3:  can => possible
Oracle Span 3-4:  come => come-01
Oracle Span 24-25:  even => even
Oracle Span 33-34:  grades => grade
Oracle Span 1-2:  I => i
Oracle Span 11-12:  I => i
Oracle Span 21-22:  I => i
Oracle Span 9-10:  knows => know-01
Oracle Span 31-32:  make => make-18
Oracle Span 15-16:  most => most
Oracle Span 18-19:  offers => offer-01
Oracle Span 6-7:  this => this
Oracle Span 17-18:  university => university

Dependencies:
1	Maybe	_	RB	RB	_	4	advmod	_	_
2	I	_	PRP	PRP	_	4	nsubj	_	_
3	can	_	MD	MD	_	4	aux	_	_
4	come	_	VB	VB	_	0	root	_	_
5	back	_	RP	RP	_	4	prt	_	_
6	from	_	IN	IN	_	4	prep	_	_
7	this	_	DT	DT	_	6	pobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	who	_	WP	WP	_	10	nsubj	_	_
10	knows	_	VBZ	VBZ	_	7	rcmod	_	_
11	.	_	.	.	_	4	punct	_	_
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	've	_	VBP	VBP	_	3	aux	_	_
3	got	_	VBN	VBN	_	0	root	_	_
4	the	_	DT	DT	_	8	det	_	_
5	most	_	RBS	RBS	_	6	advmod	_	_
6	amazing	_	JJ	JJ	_	8	amod	_	_
7	university	_	NN	NN	_	8	nn	_	_
8	offers	_	NNS	NNS	_	3	dobj	_	_
9	,	_	,	,	_	3	punct	_	_
10	but	_	CC	CC	_	3	cc	_	_
11	I	_	PRP	PRP	_	15	nsubj	_	_
12	ca	_	MD	MD	_	15	aux	_	_
13	n't	_	RB	RB	_	15	neg	_	_
14	even	_	RB	RB	_	15	advmod	_	_
15	accept	_	VB	VB	_	3	conj	_	_
16	them	_	PRP	PRP	_	15	dobj	_	_
17	-	_	:	:	_	3	punct	_	_
18	I	_	PRP	PRP	_	21	nsubj	_	_
19	'll	_	MD	MD	_	21	aux	_	_
20	never	_	RB	RB	_	21	neg	_	_
21	make	_	VB	VB	_	3	parataxis	_	_
22	the	_	DT	DT	_	23	det	_	_
23	grades	_	NNS	NNS	_	21	dobj	_	_
24	.	_	.	.	_	3	punct	_	_

Oracle:
(a / amaze-01, ARG0, o / offer-01)
(a / amaze-01, degree, m2 / most)
(a2 / accept-01, ARG0, i2 / i)
(a2 / accept-01, ARG1, o / offer-01)
(a2 / accept-01, mod, e / even)
(c / come-01, ARG1, i / i)
(c / come-01, ARG3, t / this)
(c / come-01, direction, b / back)
(c2 / contrast-01, ARG1, o / offer-01)
(k / know-01, ARG1, p / possible)
(m3 / make-18, ARG0, i3 / i)
(m3 / make-18, ARG1, g / grade)
(o / offer-01, ARG0, u / university)
(o / offer-01, ARG2, i2 / i)

Input(Some(Graph((multi-sentence :snt1 (possible :ARG1-of (know-01 :ARG0 amr-unknown) :domain (possible :domain (come-01 :direction back :ARG3 this :ARG1 i))) :snt2 (contrast-01 :ARG2 (possible :polarity - :domain (accept-01 :mod even :ARG0 i :ARG1 offer-01)) :ARG1 (offer-01 :ARG0-of (amaze-01 :degree most) :ARG2 i :ARG0 university)) :snt3 (make-18 :time ever :ARG1 grade :ARG0 i :polarity -)),ArrayBuffer(Span(2,3,List(0),can,possible,false), Span(9,10,List(1),knows,know-01,false), Span(3,4,List(2),come,come-01,false), Span(4,5,List(3),back,back,false), Span(6,7,List(4),this,this,false), Span(1,2,List(5),I,i,false), Span(20,21,List(6),but,contrast-01,false), Span(25,26,List(7),accept,accept-01,false), Span(24,25,List(8),even,even,false), Span(18,19,List(9),offers,offer-01,false), Span(16,17,List(10),amazing,amaze-01,false), Span(15,16,List(11),most,most,false), Span(11,12,List(12),I,i,false), Span(17,18,List(13),university,university,false), Span(31,32,List(14),make,make-18,false), Span(33,34,List(15),grades,grade,false), Span(21,22,List(16),I,i,false)),Map(2 -> come-01, 5 -> i, 12 -> i, 15 -> grade, 8 -> even, 7 -> accept-01, 1 -> know-01, 4 -> this, 11 -> most, 14 -> make-18, 6 -> contrast-01, 9 -> offer-01, 0 -> possible, 16 -> i, 10 -> amaze-01, 3 -> back, 13 -> university),Map(m3 -> make-18, e -> even, t -> this, b -> back, k -> know-01, m2 -> most, i3 -> i, g -> grade, p -> possible, a -> amaze-01, i2 -> i, a2 -> accept-01, i -> i, c -> come-01, u -> university, o -> offer-01, c2 -> contrast-01))),[Ljava.lang.String;@543295b0,Annotation([Ljava.lang.String;@54422e18,[Ljava.lang.String;@117159c0,[Ljava.lang.String;@3e27ba32),Annotation([Ljava.lang.String;@7ef82753,[Ljava.lang.String;@3b0fe47a,[Ledu.cmu.lti.nlp.amr.Dependency;@202b0582),Annotation([Ljava.lang.String;@235ecd9f,[Ljava.lang.String;@1ca3b418,[Ljava.lang.String;@58cbafc2),Annotation([Ljava.lang.String;@2034b64c,[Ljava.lang.String;@75d3a5e0,[Ledu.cmu.lti.nlp.amr.Entity;@74d1dc36))
AMR:
(a / amaze-01, ARG1, c2 / contrast-01)
(a / amaze-01, ARG6, m2 / most)
(a2 / accept-01, ARG1, o / offer-01)
(c / come-01, ARG0, i / i)
(c / come-01, ARG1, t / this)
(c / come-01, direction, b / back)
(c2 / contrast-01, ARG1, o / offer-01)
(c2 / contrast-01, ARG6, i3 / i)
(k / know-01, ARG1, t / this)
(m3 / make-18, ARG1, i2 / i)
(o / offer-01, ARG1, u / university)
(p / possible, domain, a2 / accept-01)
(p / possible, domain, c / come-01)
(p / possible, domain, e / even)
(p / possible, domain, g / grade)
(p / possible, domain, m3 / make-18)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.1
Decoded in 915,346 microseconds
Sentence: I wish I could wipe her out of my life - things would be so much better without her.

Oracle Span 1:  better => good
Oracle Span 2:  could => possible
Oracle Span 3:  I => i
Oracle Span 4:  much => much
Oracle Span 5:  so => so
Oracle Span 6:  things => thing
Oracle Span 7:  wipe => wipe-02
Oracle Span 8:  wish => wish-01
Spans:
Span 16-17:  better => good
Span 3-4:  could => possible
Span 0-1:  I => i
Span 15-16:  much => much
Span 14-15:  so => so
Span 11-12:  things => thing
Span 4-5:  wipe => wipe-02
Span 1-2:  wish => wish-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 16-17:  better => good
Oracle Span 3-4:  could => possible
Oracle Span 0-1:  I => i
Oracle Span 15-16:  much => much
Oracle Span 14-15:  so => so
Oracle Span 11-12:  things => thing
Oracle Span 4-5:  wipe => wipe-02
Oracle Span 1-2:  wish => wish-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	wish	_	VBP	VBP	_	0	root	_	_
3	I	_	PRP	PRP	_	5	nsubj	_	_
4	could	_	MD	MD	_	5	aux	_	_
5	wipe	_	VB	VB	_	2	ccomp	_	_
6	her	_	PRP	PRP	_	5	dobj	_	_
7	out	_	RP	RP	_	5	prt	_	_
8	of	_	IN	IN	_	5	prep	_	_
9	my	_	PRP$	PRP$	_	10	poss	_	_
10	life	_	NN	NN	_	8	pobj	_	_
11	-	_	:	:	_	2	punct	_	_
12	things	_	NNS	NNS	_	17	nsubj	_	_
13	would	_	MD	MD	_	17	aux	_	_
14	be	_	VB	VB	_	17	cop	_	_
15	so	_	RB	RB	_	17	advmod	_	_
16	much	_	RB	RB	_	17	advmod	_	_
17	better	_	JJR	JJR	_	2	parataxis	_	_
18	without	_	IN	IN	_	17	prep	_	_
19	her	_	PRP	PRP	_	18	pobj	_	_
20	.	_	.	.	_	2	punct	_	_

Oracle:
(g / good, domain, t / thing)
(m3 / much, degree, s2 / so)
(p / possible, domain, w3 / wipe-02)
(w2 / wish-01, ARG0, i2 / i)
(w2 / wish-01, ARG1, p / possible)
(w3 / wipe-02, ARG0, i2 / i)

Input(Some(Graph((multi-sentence :snt1 (wish-01 :ARG1 (possible :domain (wipe-02 :source (live-01 :ARG0 i) :ARG1 she :ARG0 i)) :ARG0 i) :snt2 (good :domain thing :prep-without she :degree (more :degree (much :degree so)))),ArrayBuffer(Span(1,2,List(0),wish,wish-01,false), Span(3,4,List(1),could,possible,false), Span(4,5,List(2),wipe,wipe-02,false), Span(0,1,List(3),I,i,false), Span(16,17,List(4),better,good,false), Span(11,12,List(5),things,thing,false), Span(15,16,List(6),much,much,false), Span(14,15,List(7),so,so,false)),Map(2 -> wipe-02, 5 -> thing, 7 -> so, 1 -> possible, 4 -> good, 6 -> much, 0 -> wish-01, 3 -> i),Map(m3 -> much, s2 -> so, t -> thing, w3 -> wipe-02, g -> good, p -> possible, i2 -> i, w2 -> wish-01))),[Ljava.lang.String;@7161d8d1,Annotation([Ljava.lang.String;@74e28667,[Ljava.lang.String;@1cf6d1be,[Ljava.lang.String;@663c9e7a),Annotation([Ljava.lang.String;@19e4653c,[Ljava.lang.String;@795509d9,[Ledu.cmu.lti.nlp.amr.Dependency;@53045c6c),Annotation([Ljava.lang.String;@5149d738,[Ljava.lang.String;@6bbe85a8,[Ljava.lang.String;@3a7442c7),Annotation([Ljava.lang.String;@4be29ed9,[Ljava.lang.String;@548d708a,[Ledu.cmu.lti.nlp.amr.Entity;@4b013c76))
AMR:
(g / good, domain, t / thing)
(m3 / much, calendar, s2 / so)
(p / possible, domain, w3 / wipe-02)
(w2 / wish-01, ARG0, i2 / i)
(w2 / wish-01, ARG1, p / possible)
(w2 / wish-01, ARG6, s2 / so)
(w3 / wipe-02, ARG1, g / good)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
Decoded in 173,597 microseconds
Sentence: But then, I think I'm just being selfish.

Oracle Span 1:  But => contrast-01
Oracle Span 2:  I => i
Oracle Span 3:  just => just
Oracle Span 4:  selfish => selfish
Oracle Span 5:  then => then
Oracle Span 6:  think => think-01
Spans:
Span 0-1:  But => contrast-01
Span 3-4:  I => i
Span 7-8:  just => just
Span 9-10:  selfish => selfish
Span 1-2:  then => then
Span 4-5:  think => think-01

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 3-4:  I => i
Oracle Span 7-8:  just => just
Oracle Span 9-10:  selfish => selfish
Oracle Span 1-2:  then => then
Oracle Span 4-5:  think => think-01

Dependencies:
1	But	_	CC	CC	_	5	cc	_	_
2	then	_	RB	RB	_	5	advmod	_	_
3	,	_	,	,	_	5	punct	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	think	_	VBP	VBP	_	0	root	_	_
6	I	_	PRP	PRP	_	10	nsubjpass	_	_
7	'm	_	VBP	VBP	_	10	aux	_	_
8	just	_	RB	RB	_	10	advmod	_	_
9	being	_	VBG	VBG	_	10	auxpass	_	_
10	selfish	_	VBN	VBN	_	5	ccomp	_	_
11	.	_	.	.	_	5	punct	_	_

Oracle:
(c / contrast-01, ARG2, t / think-01)
(s / selfish, domain, i / i)
(s / selfish, mod, j / just)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, s / selfish)
(t / think-01, mod, t2 / then)

Input(Some(Graph((contrast-01 :ARG2 (think-01 :mod then :ARG1 (selfish :mod just :domain i) :ARG0 i)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(4,5,List(1),think,think-01,false), Span(1,2,List(2),then,then,false), Span(9,10,List(3),selfish,selfish,false), Span(7,8,List(4),just,just,false), Span(3,4,List(5),I,i,false)),Map(2 -> then, 5 -> i, 1 -> think-01, 4 -> just, 0 -> contrast-01, 3 -> selfish),Map(t -> think-01, j -> just, s -> selfish, t2 -> then, i -> i, c -> contrast-01))),[Ljava.lang.String;@53fb3dab,Annotation([Ljava.lang.String;@cb0755b,[Ljava.lang.String;@33065d67,[Ljava.lang.String;@712625fd),Annotation([Ljava.lang.String;@7bba5817,[Ljava.lang.String;@742ff096,[Ledu.cmu.lti.nlp.amr.Dependency;@75437611),Annotation([Ljava.lang.String;@350aac89,[Ljava.lang.String;@1c5920df,[Ljava.lang.String;@17f9d882),Annotation([Ljava.lang.String;@79e4c792,[Ljava.lang.String;@196a42c3,[Ledu.cmu.lti.nlp.amr.Entity;@4c60d6e9))
AMR:
(c / contrast-01, ARG1, s / selfish)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, s / selfish)
(t / think-01, ARG6, j / just)
(t / think-01, time, t2 / then)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 175,553 microseconds
Sentence: But surely, my life isn't meant to be like this?

Oracle Span 1:  But => contrast-01
Oracle Span 2:  meant => mean-01
Oracle Span 3:  surely => sure
Oracle Span 4:  this => this
Spans:
Span 0-1:  But => contrast-01
Span 7-8:  meant => mean-01
Span 1-2:  surely => sure
Span 11-12:  this => this

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 0-1:  But => contrast-01
Oracle Span 7-8:  meant => mean-01
Oracle Span 1-2:  surely => sure
Oracle Span 11-12:  this => this

Dependencies:
1	But	_	CC	CC	_	8	cc	_	_
2	surely	_	RB	RB	_	8	advmod	_	_
3	,	_	,	,	_	8	punct	_	_
4	my	_	PRP$	PRP$	_	5	poss	_	_
5	life	_	NN	NN	_	8	nsubjpass	_	_
6	is	_	VBZ	VBZ	_	8	auxpass	_	_
7	n't	_	RB	RB	_	8	neg	_	_
8	meant	_	VBN	VBN	_	0	root	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	be	_	VB	VB	_	8	xcomp	_	_
11	like	_	IN	IN	_	10	prep	_	_
12	this	_	DT	DT	_	11	pobj	_	_
13	?	_	.	.	_	8	punct	_	_

Oracle:
(c / contrast-01, ARG2, m / mean-01)
(m / mean-01, mod, s / sure)

Input(Some(Graph((contrast-01 :ARG2 (mean-01 :mod sure :ARG1 (resemble-01 :ARG1 (live-01 :ARG0 i) :ARG2 this) :mode interrogative :polarity -)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(7,8,List(1),meant,mean-01,false), Span(11,12,List(2),this,this,false), Span(1,2,List(3),surely,sure,false)),Map(2 -> this, 1 -> mean-01, 0 -> contrast-01, 3 -> sure),Map(t -> this, s -> sure, m -> mean-01, c -> contrast-01))),[Ljava.lang.String;@15043a2f,Annotation([Ljava.lang.String;@4a83a74a,[Ljava.lang.String;@1349883,[Ljava.lang.String;@4b29d1d2),Annotation([Ljava.lang.String;@7f485fda,[Ljava.lang.String;@28261e8e,[Ledu.cmu.lti.nlp.amr.Dependency;@d737b89),Annotation([Ljava.lang.String;@8519cb4,[Ljava.lang.String;@35dab4eb,[Ljava.lang.String;@2d901eb0),Annotation([Ljava.lang.String;@3ba987b8,[Ljava.lang.String;@3f191845,[Ledu.cmu.lti.nlp.amr.Entity;@5f049ea1))
AMR:
(c / contrast-01, ARG0, t / this)
(c / contrast-01, ARG1, m / mean-01)
(m / mean-01, ARG1, s / sure)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.3
Decoded in 40,463 microseconds
Sentence: It should be so much better. B

Oracle Span 1:  B => b
Oracle Span 2:  better => good
Oracle Span 3:  It => it
Oracle Span 4:  much => much
Oracle Span 5:  should => recommend-01
Oracle Span 6:  so => so
Spans:
Span 7-8:  B => b
Span 5-6:  better => good
Span 0-1:  It => it
Span 4-5:  much => much
Span 1-2:  should => recommend-01
Span 3-4:  so => so

 *** WARNING: The dependency tree seems broken.  I can't find the head of B in position 7
Langrangian relaxation converged after 19 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of B in position 7
Oracle Span 7-8:  B => b
Oracle Span 5-6:  better => good
Oracle Span 0-1:  It => it
Oracle Span 4-5:  much => much
Oracle Span 1-2:  should => recommend-01
Oracle Span 3-4:  so => so

Dependencies:
1	It	_	PRP	PRP	_	6	nsubj	_	_
2	should	_	MD	MD	_	6	aux	_	_
3	be	_	VB	VB	_	6	cop	_	_
4	so	_	RB	RB	_	6	advmod	_	_
5	much	_	RB	RB	_	6	advmod	_	_
6	better	_	JJR	JJR	_	0	root	_	_
7	.	_	.	.	_	6	punct	_	_
1	B	_	NNP	NNP	_	0	root	_	_

Oracle:
(g / good, domain, i / it)
(m2 / much, degree, s / so)
(r / recommend-01, ARG1, g / good)

Input(Some(Graph((multi-sentence :snt1 (recommend-01 :ARG1 (good :domain it :degree (more :degree (much :degree so)))) :snt2 b),ArrayBuffer(Span(1,2,List(0),should,recommend-01,false), Span(5,6,List(1),better,good,false), Span(0,1,List(2),It,it,false), Span(4,5,List(3),much,much,false), Span(3,4,List(4),so,so,false), Span(7,8,List(5),B,b,false)),Map(2 -> it, 5 -> b, 1 -> good, 4 -> so, 0 -> recommend-01, 3 -> much),Map(b -> b, m2 -> much, s -> so, g -> good, i -> it, r -> recommend-01))),[Ljava.lang.String;@72cc7e6f,Annotation([Ljava.lang.String;@5afa3c9,[Ljava.lang.String;@72035809,[Ljava.lang.String;@909217e),Annotation([Ljava.lang.String;@18271936,[Ljava.lang.String;@606e4010,[Ledu.cmu.lti.nlp.amr.Dependency;@8458f04),Annotation([Ljava.lang.String;@48075da3,[Ljava.lang.String;@68c9133c,[Ljava.lang.String;@7a35b0f5),Annotation([Ljava.lang.String;@5e2c3d18,[Ljava.lang.String;@2cb4893b,[Ledu.cmu.lti.nlp.amr.Entity;@cc43f62))
AMR:
(m2 / much, calendar, s / so)
(r / recommend-01, ARG0, b / b)
(r / recommend-01, ARG1, i / it)
(r / recommend-01, ARG2, g / good)
(r / recommend-01, ARG6, s / so)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 70,521 microseconds
Sentence: ut I feel as if I have no control over this downhill spiral.

Oracle Span 1:  control => control-01
Oracle Span 2:  downhill => downhill
Oracle Span 3:  feel => feel-01
Oracle Span 4:  I => i
Oracle Span 5:  no => -
Oracle Span 6:  spiral => spiral
Oracle Span 7:  this => this
Spans:
Span 8-9:  control => control-01
Span 11-12:  downhill => downhill
Span 2-3:  feel => feel-01
Span 1-2:  I => i
Span 7-8:  no => -
Span 12-13:  spiral => spiral
Span 10-11:  this => this

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 8-9:  control => control-01
Oracle Span 11-12:  downhill => downhill
Oracle Span 2-3:  feel => feel-01
Oracle Span 1-2:  I => i
Oracle Span 7-8:  no => -
Oracle Span 12-13:  spiral => spiral
Oracle Span 10-11:  this => this

Dependencies:
1	ut	_	RB	RB	_	3	advmod	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	feel	_	VBP	VBP	_	0	root	_	_
4	as	_	RB	RB	_	7	advmod	_	_
5	if	_	IN	IN	_	7	mark	_	_
6	I	_	PRP	PRP	_	7	nsubj	_	_
7	have	_	VBP	VBP	_	3	advcl	_	_
8	no	_	DT	DT	_	9	neg	_	_
9	control	_	NN	NN	_	7	dobj	_	_
10	over	_	IN	IN	_	9	prep	_	_
11	this	_	DT	DT	_	13	det	_	_
12	downhill	_	JJ	JJ	_	13	amod	_	_
13	spiral	_	NN	NN	_	10	pobj	_	_
14	.	_	.	.	_	3	punct	_	_

Oracle:
(c2 / control-01, ARG0, i / i)
(c2 / control-01, ARG1, s / spiral)
(c2 / control-01, polarity, - / -)
(f / feel-01, ARG0, i / i)
(s / spiral, direction, d / downhill)
(s / spiral, mod, t / this)

Input(Some(Graph((contrast-01 :ARG2 (feel-01 :ARG1-of (resemble-01 :ARG2 (control-01 :ARG1 (spiral :mod this :direction downhill) :polarity - :ARG0 i)) :ARG0 i)),ArrayBuffer(Span(7,8,List(0),no,-,false), Span(2,3,List(1),feel,feel-01,false), Span(8,9,List(2),control,control-01,false), Span(12,13,List(3),spiral,spiral,false), Span(10,11,List(4),this,this,false), Span(11,12,List(5),downhill,downhill,false), Span(1,2,List(6),I,i,false)),Map(2 -> control-01, 5 -> downhill, 1 -> feel-01, 4 -> this, 6 -> i, 0 -> -, 3 -> spiral),Map(t -> this, s -> spiral, d -> downhill, i -> i, - -> -, f -> feel-01, c2 -> control-01))),[Ljava.lang.String;@5b218417,Annotation([Ljava.lang.String;@645aa696,[Ljava.lang.String;@6caf0677,[Ljava.lang.String;@413d1baf),Annotation([Ljava.lang.String;@16eb3ea3,[Ljava.lang.String;@273444fe,[Ledu.cmu.lti.nlp.amr.Dependency;@33bc72d1),Annotation([Ljava.lang.String;@1a75e76a,[Ljava.lang.String;@5524cca1,[Ljava.lang.String;@5032714f),Annotation([Ljava.lang.String;@48bb62,[Ljava.lang.String;@353352b6,[Ledu.cmu.lti.nlp.amr.Entity;@4681c175))
AMR:
(c2 / control-01, ARG1, s / spiral)
(c2 / control-01, ARG6, - / -)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, c2 / control-01)
(s / spiral, mod, d / downhill)
(s / spiral, mod, t / this)

WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 81,753 microseconds
Sentence: And I don't know what to do.

Oracle Span 1:  And => and
Oracle Span 2:  do => (thing :ARG1-of do-02)
Oracle Span 3:  I => i
Oracle Span 4:  know => know-01
Spans:
Span 0-1:  And => and
Span 2-3:  do => (thing :ARG1-of do-02)
Span 1-2:  I => i
Span 4-5:  know => know-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  And => and
Oracle Span 2-3:  do => (thing :ARG1-of do-02)
Oracle Span 1-2:  I => i
Oracle Span 4-5:  know => know-01

Dependencies:
1	And	_	CC	CC	_	5	cc	_	_
2	I	_	PRP	PRP	_	5	nsubj	_	_
3	do	_	VBP	VBP	_	5	aux	_	_
4	n't	_	RB	RB	_	5	neg	_	_
5	know	_	VB	VB	_	0	root	_	_
6	what	_	WP	WP	_	8	nsubj	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	do	_	VB	VB	_	5	ccomp	_	_
9	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, k / know-01)
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, t / thing)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t / thing)

Input(Some(Graph((and :op (know-01 :ARG1 (thing :ARG1-of (do-02 :ARG0 i)) :ARG0 i :polarity -)),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(4,5,List(1),know,know-01,false), Span(2,3,List(2, 3),do,(thing :ARG1-of do-02),false), Span(1,2,List(4),I,i,false)),Map(2 -> thing, 1 -> know-01, 4 -> i, 0 -> and, 3 -> do-02),Map(t -> thing, k -> know-01, d -> do-02, a -> and, i -> i))),[Ljava.lang.String;@57a78e3,Annotation([Ljava.lang.String;@402c4085,[Ljava.lang.String;@6fa51cd4,[Ljava.lang.String;@2767e23c),Annotation([Ljava.lang.String;@710c2b53,[Ljava.lang.String;@5386659f,[Ledu.cmu.lti.nlp.amr.Dependency;@14028087),Annotation([Ljava.lang.String;@cecf639,[Ljava.lang.String;@1caa0244,[Ljava.lang.String;@7ce026d3),Annotation([Ljava.lang.String;@7ce69770,[Ljava.lang.String;@1750fbeb,[Ledu.cmu.lti.nlp.amr.Entity;@5b247367))
AMR:
(a / and, op, k / know-01)
(d / do-02, ARG1, t / thing)
(k / know-01, ARG0, t / thing)
(k / know-01, ARG1, i / i)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 18,438 microseconds
Sentence: Thanks for reading.

Oracle Span 1:  reading => read-01
Oracle Span 2:  Thanks => thank-01
Spans:
Span 2-3:  reading => read-01
Span 0-1:  Thanks => thank-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  reading => read-01
Oracle Span 0-1:  Thanks => thank-01

Dependencies:
1	Thanks	_	NNS	NNS	_	0	root	_	_
2	for	_	IN	IN	_	1	prep	_	_
3	reading	_	NN	NN	_	2	pobj	_	_
4	.	_	.	.	_	1	punct	_	_

Oracle:
(t / thank-01, ARG2, r / read-01)

Input(Some(Graph((thank-01 :ARG2 (read-01 :ARG0 you) :ARG1 you),ArrayBuffer(Span(0,1,List(0),Thanks,thank-01,false), Span(2,3,List(1),reading,read-01,false)),Map(1 -> read-01, 0 -> thank-01),Map(t -> thank-01, r -> read-01))),[Ljava.lang.String;@268f106e,Annotation([Ljava.lang.String;@6e9a5ed8,[Ljava.lang.String;@7e057f43,[Ljava.lang.String;@6c284af),Annotation([Ljava.lang.String;@5890e879,[Ljava.lang.String;@6440112d,[Ledu.cmu.lti.nlp.amr.Dependency;@31ea9581),Annotation([Ljava.lang.String;@231f98ef,[Ljava.lang.String;@7c137fd5,[Ljava.lang.String;@183ec003),Annotation([Ljava.lang.String;@7d9d0818,[Ljava.lang.String;@221a3fa4,[Ledu.cmu.lti.nlp.amr.Entity;@451001e5))
AMR:
(t / thank-01, ARG1, r / read-01)

WARNING: makeIds can't find span Id: 0.1
Decoded in 5,807 microseconds
Sentence: It's nice to vent.

Oracle Span 1:  nice => nice-42
Oracle Span 2:  vent => vent-01
Spans:
Span 2-3:  nice => nice-42
Span 4-5:  vent => vent-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  nice => nice-42
Oracle Span 4-5:  vent => vent-01

Dependencies:
1	It	_	PRP	PRP	_	3	nsubj	_	_
2	's	_	VBZ	VBZ	_	3	cop	_	_
3	nice	_	JJ	JJ	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	vent	_	VB	VB	_	3	xcomp	_	_
6	.	_	.	.	_	3	punct	_	_

Oracle:
(n / nice-42, ARG1, v / vent-01)

Input(Some(Graph((nice-42 :ARG1 vent-01),ArrayBuffer(Span(2,3,List(0),nice,nice-42,false), Span(4,5,List(1),vent,vent-01,false)),Map(1 -> vent-01, 0 -> nice-42),Map(n -> nice-42, v -> vent-01))),[Ljava.lang.String;@2b40ff9c,Annotation([Ljava.lang.String;@3e08ff24,[Ljava.lang.String;@4d1c005e,[Ljava.lang.String;@8462f31),Annotation([Ljava.lang.String;@24569dba,[Ljava.lang.String;@5ddeb7cb,[Ledu.cmu.lti.nlp.amr.Dependency;@70ed52de),Annotation([Ljava.lang.String;@496bc455,[Ljava.lang.String;@59402b8f,[Ljava.lang.String;@7188af83),Annotation([Ljava.lang.String;@6be968ce,[Ljava.lang.String;@7c37508a,[Ledu.cmu.lti.nlp.amr.Entity;@247310d0))
AMR:
(n / nice-42, ARG1, v / vent-01)

WARNING: makeIds can't find span Id: 0.0
Decoded in 6,254 microseconds
Sentence: You can't get her sectioned for that.

Oracle Span 1:  get => get-04
Oracle Span 2:  sectioned => section-00
Oracle Span 3:  that => that
Oracle Span 4:  You => you
Spans:
Span 3-4:  get => get-04
Span 5-6:  sectioned => section-00
Span 7-8:  that => that
Span 0-1:  You => you

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 3-4:  get => get-04
Oracle Span 5-6:  sectioned => section-00
Oracle Span 7-8:  that => that
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	4	nsubj	_	_
2	ca	_	MD	MD	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	get	_	VB	VB	_	0	root	_	_
5	her	_	PRP$	PRP$	_	6	poss	_	_
6	sectioned	_	NN	NN	_	4	dobj	_	_
7	for	_	IN	IN	_	4	prep	_	_
8	that	_	DT	DT	_	7	pobj	_	_
9	.	_	.	.	_	4	punct	_	_

Oracle:
(g / get-04, ARG0, y / you)
(g / get-04, ARG1, s / section-00)
(s / section-00, ARG0, y / you)

Input(Some(Graph((possible :polarity - :domain (get-04 :ARG1 (section-00 :ARG1-of (cause-01 :ARG0 that) :ARG1 she :ARG0 you) :ARG0 you)),ArrayBuffer(Span(3,4,List(0),get,get-04,false), Span(5,6,List(1),sectioned,section-00,false), Span(7,8,List(2),that,that,false), Span(0,1,List(3),You,you,false)),Map(2 -> that, 1 -> section-00, 0 -> get-04, 3 -> you),Map(t -> that, s -> section-00, y -> you, g -> get-04))),[Ljava.lang.String;@1033576a,Annotation([Ljava.lang.String;@303cf2ba,[Ljava.lang.String;@76494737,[Ljava.lang.String;@4a003cbe),Annotation([Ljava.lang.String;@4082ba93,[Ljava.lang.String;@17fc391b,[Ledu.cmu.lti.nlp.amr.Dependency;@2b30a42c),Annotation([Ljava.lang.String;@609e8838,[Ljava.lang.String;@359df09a,[Ljava.lang.String;@43df23d3),Annotation([Ljava.lang.String;@6d60fe40,[Ljava.lang.String;@792b749c,[Ledu.cmu.lti.nlp.amr.Entity;@23e84203))
AMR:
(g / get-04, ARG0, y / you)
(g / get-04, ARG1, s / section-00)
(g / get-04, ARG6, t / that)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 65,512 microseconds
Sentence: Does she even have a history of mental illness or a diagnosis?

Oracle Span 1:  diagnosis => diagnose-01
Oracle Span 2:  even => even
Oracle Span 3:  have => have-03
Oracle Span 4:  history => history
Oracle Span 5:  mental => mental
Oracle Span 6:  or => or
Oracle Span 7:  she => she
Spans:
Span 11-12:  diagnosis => diagnose-01
Span 2-3:  even => even
Span 3-4:  have => have-03
Span 5-6:  history => history
Span 7-8:  mental => mental
Span 9-10:  or => or
Span 1-2:  she => she

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 11-12:  diagnosis => diagnose-01
Oracle Span 2-3:  even => even
Oracle Span 3-4:  have => have-03
Oracle Span 5-6:  history => history
Oracle Span 7-8:  mental => mental
Oracle Span 9-10:  or => or
Oracle Span 1-2:  she => she

Dependencies:
1	Does	_	VBZ	VBZ	_	4	aux	_	_
2	she	_	PRP	PRP	_	4	nsubj	_	_
3	even	_	RB	RB	_	4	advmod	_	_
4	have	_	VB	VB	_	0	root	_	_
5	a	_	DT	DT	_	6	det	_	_
6	history	_	NN	NN	_	4	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	mental	_	JJ	JJ	_	9	amod	_	_
9	illness	_	NN	NN	_	7	pobj	_	_
10	or	_	CC	CC	_	9	cc	_	_
11	a	_	DT	DT	_	12	det	_	_
12	diagnosis	_	NN	NN	_	9	conj	_	_
13	?	_	.	.	_	4	punct	_	_

Oracle:
(d / diagnose-01, ARG1, s / she)
(h / have-03, ARG0, s / she)
(h / have-03, ARG1, o / or)
(h / have-03, mod, e / even)
(o / or, op, d / diagnose-01)
(o / or, op, h2 / history)

Input(Some(Graph((have-03 :mod even :ARG1 (or :op (diagnose-01 :ARG1 she) :op (history :consist-of (ill-41 :ARG2 mental :ARG1 she))) :ARG0 she :mode interrogative),ArrayBuffer(Span(3,4,List(0),have,have-03,false), Span(2,3,List(1),even,even,false), Span(9,10,List(2),or,or,false), Span(5,6,List(3),history,history,false), Span(7,8,List(4),mental,mental,false), Span(1,2,List(5),she,she,false), Span(11,12,List(6),diagnosis,diagnose-01,false)),Map(2 -> or, 5 -> she, 1 -> even, 4 -> mental, 6 -> diagnose-01, 0 -> have-03, 3 -> history),Map(e -> even, h -> have-03, h2 -> history, s -> she, d -> diagnose-01, m -> mental, o -> or))),[Ljava.lang.String;@19932c16,Annotation([Ljava.lang.String;@73eb439a,[Ljava.lang.String;@514646ef,[Ljava.lang.String;@305ffe9e),Annotation([Ljava.lang.String;@302c971f,[Ljava.lang.String;@1972e513,[Ledu.cmu.lti.nlp.amr.Dependency;@7ae0a9ec),Annotation([Ljava.lang.String;@35841320,[Ljava.lang.String;@61c4eee0,[Ljava.lang.String;@6f10d5b6),Annotation([Ljava.lang.String;@1040be71,[Ljava.lang.String;@548a24a,[Ledu.cmu.lti.nlp.amr.Entity;@433defed))
AMR:
(d / diagnose-01, ARG1, m / mental)
(e / even, calendar, s / she)
(h / have-03, ARG0, s / she)
(h / have-03, ARG1, h2 / history)
(h2 / history, poss, o / or)
(o / or, op, d / diagnose-01)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2.1
Decoded in 165,975 microseconds
Sentence: You don't know for sure that you won't get good grades so accept places if you can.

Oracle Span 1:  accept => accept-01
Oracle Span 2:  can => possible
Oracle Span 3:  get => get-01
Oracle Span 4:  good => good
Oracle Span 5:  grades => grade
Oracle Span 6:  if => cause-01
Oracle Span 7:  know => know-01
Oracle Span 8:  places => place
Oracle Span 9:  sure => sure
Oracle Span 10:  You => you
Spans:
Span 14-15:  accept => accept-01
Span 18-19:  can => possible
Span 10-11:  get => get-01
Span 11-12:  good => good
Span 12-13:  grades => grade
Span 16-17:  if => cause-01
Span 3-4:  know => know-01
Span 15-16:  places => place
Span 5-6:  sure => sure
Span 0-1:  You => you

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 14-15:  accept => accept-01
Oracle Span 18-19:  can => possible
Oracle Span 10-11:  get => get-01
Oracle Span 11-12:  good => good
Oracle Span 12-13:  grades => grade
Oracle Span 16-17:  if => cause-01
Oracle Span 3-4:  know => know-01
Oracle Span 15-16:  places => place
Oracle Span 5-6:  sure => sure
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	4	nsubj	_	_
2	do	_	VBP	VBP	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	know	_	VB	VB	_	0	root	_	_
5	for	_	IN	IN	_	4	prep	_	_
6	sure	_	JJ	JJ	_	5	pobj	_	_
7	that	_	IN	IN	_	11	mark	_	_
8	you	_	PRP	PRP	_	11	nsubj	_	_
9	wo	_	MD	MD	_	11	aux	_	_
10	n't	_	RB	RB	_	11	neg	_	_
11	get	_	VB	VB	_	4	ccomp	_	_
12	good	_	JJ	JJ	_	13	amod	_	_
13	grades	_	NNS	NNS	_	15	nsubj	_	_
14	so	_	RB	RB	_	15	advmod	_	_
15	accept	_	VB	VB	_	11	ccomp	_	_
16	places	_	NNS	NNS	_	15	dobj	_	_
17	if	_	IN	IN	_	19	mark	_	_
18	you	_	PRP	PRP	_	19	nsubj	_	_
19	can	_	MD	MD	_	15	advcl	_	_
20	.	_	.	.	_	4	punct	_	_

Oracle:
(a / accept-01, ARG0, y / you)
(a / accept-01, ARG1, p / place)
(a / accept-01, condition, p2 / possible)
(c / cause-01, ARG0, k / know-01)
(c / cause-01, ARG1, a / accept-01)
(g / get-01, ARG0, y / you)
(g / get-01, ARG1, g2 / grade)
(g2 / grade, mod, g3 / good)
(k / know-01, ARG0, y / you)
(k / know-01, ARG1, g / get-01)
(k / know-01, mod, s / sure)
(p2 / possible, domain, a / accept-01)

Input(Some(Graph((know-01 :ARG0-of (cause-01 :ARG1 (accept-01 :condition (possible :domain accept-01) :ARG1 place :ARG0 you)) :mod sure :ARG1 (get-01 :ARG1 (grade :mod good) :polarity - :ARG0 you) :ARG0 you :polarity -),ArrayBuffer(Span(3,4,List(0),know,know-01,false), Span(16,17,List(1),if,cause-01,false), Span(14,15,List(2),accept,accept-01,false), Span(18,19,List(3),can,possible,false), Span(15,16,List(4),places,place,false), Span(5,6,List(5),sure,sure,false), Span(10,11,List(6),get,get-01,false), Span(12,13,List(7),grades,grade,false), Span(11,12,List(8),good,good,false), Span(0,1,List(9),You,you,false)),Map(2 -> accept-01, 5 -> sure, 8 -> good, 7 -> grade, 1 -> cause-01, 4 -> place, 6 -> get-01, 9 -> you, 0 -> know-01, 3 -> possible),Map(g3 -> good, k -> know-01, p2 -> possible, s -> sure, y -> you, g2 -> grade, g -> get-01, p -> place, a -> accept-01, c -> cause-01))),[Ljava.lang.String;@2a693f59,Annotation([Ljava.lang.String;@3f4faf53,[Ljava.lang.String;@7fd50002,[Ljava.lang.String;@533bda92),Annotation([Ljava.lang.String;@304bb45b,[Ljava.lang.String;@723ca036,[Ledu.cmu.lti.nlp.amr.Dependency;@25be7b63),Annotation([Ljava.lang.String;@28dcca0c,[Ljava.lang.String;@45d84a20,[Ljava.lang.String;@52f27fbd),Annotation([Ljava.lang.String;@4c163e3,[Ljava.lang.String;@4a8355dd,[Ledu.cmu.lti.nlp.amr.Entity;@4d0d9fe7))
AMR:
(a / accept-01, ARG0, g2 / grade)
(a / accept-01, ARG1, p / place)
(a / accept-01, ARG6, c / cause-01)
(c / cause-01, ARG1, p2 / possible)
(g / get-01, ARG0, y / you)
(g / get-01, ARG1, g2 / grade)
(g2 / grade, mod, g3 / good)
(k / know-01, ARG1, g / get-01)
(k / know-01, ARG2, s / sure)

WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.4.0
WARNING: makeIds can't find span Id: 0.4.0.1
WARNING: makeIds can't find span Id: 0.4.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 295,265 microseconds
Sentence: Life throws **** at you all the time.

Oracle Span 1:  all => all
Oracle Span 2:  Life => life
Oracle Span 3:  throws => throw-01
Oracle Span 4:  time => time
Oracle Span 5:  you => you
Spans:
Span 8-9:  all => all
Span 0-1:  Life => life
Span 1-2:  throws => throw-01
Span 10-11:  time => time
Span 7-8:  you => you

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 8-9:  all => all
Oracle Span 0-1:  Life => life
Oracle Span 1-2:  throws => throw-01
Oracle Span 10-11:  time => time
Oracle Span 7-8:  you => you

Dependencies:
1	Life	_	NNP	NNP	_	2	nsubj	_	_
2	throws	_	VBZ	VBZ	_	0	root	_	_
3	****	_	VBG	VBG	_	2	xcomp	_	_
4	at	_	IN	IN	_	3	prep	_	_
5	you	_	PRP	PRP	_	4	pobj	_	_
6	all	_	PDT	PDT	_	8	predet	_	_
7	the	_	DT	DT	_	8	det	_	_
8	time	_	NN	NN	_	3	tmod	_	_
9	.	_	.	.	_	2	punct	_	_

Oracle:
(t / throw-01, ARG0, l / life)
(t / throw-01, ARG2, y / you)
(t / throw-01, time, t2 / time)
(t2 / time, quant, a / all)

Input(Some(Graph((throw-01 :time (time :quant all) :ARG2 you :ARG1 thing :ARG0 life),ArrayBuffer(Span(1,2,List(0),throws,throw-01,false), Span(10,11,List(1),time,time,false), Span(8,9,List(2),all,all,false), Span(7,8,List(3),you,you,false), Span(0,1,List(4),Life,life,false)),Map(2 -> all, 1 -> time, 4 -> life, 0 -> throw-01, 3 -> you),Map(t -> throw-01, y -> you, a -> all, t2 -> time, l -> life))),[Ljava.lang.String;@c430e6c,Annotation([Ljava.lang.String;@312aa7c,[Ljava.lang.String;@536f2a7e,[Ljava.lang.String;@72bc6553),Annotation([Ljava.lang.String;@66982506,[Ljava.lang.String;@70cf32e3,[Ledu.cmu.lti.nlp.amr.Dependency;@5a59ca5e),Annotation([Ljava.lang.String;@4bdeaabb,[Ljava.lang.String;@6c4906d3,[Ljava.lang.String;@65987993),Annotation([Ljava.lang.String;@71075444,[Ljava.lang.String;@4f32a3ad,[Ledu.cmu.lti.nlp.amr.Entity;@6b695b06))
AMR:
(a / all, calendar, y / you)
(t / throw-01, ARG0, l / life)
(t / throw-01, ARG1, t2 / time)
(t2 / time, quant, a / all)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.0
Decoded in 53,392 microseconds
Sentence: If it's not someone in your family, it's an outsider.

Oracle Span 1:  family => family
Oracle Span 2:  outsider => outsider
Oracle Span 3:  someone => someone
Spans:
Span 7-8:  family => family
Span 12-13:  outsider => outsider
Span 4-5:  someone => someone

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 7-8:  family => family
Oracle Span 12-13:  outsider => outsider
Oracle Span 4-5:  someone => someone

Dependencies:
1	If	_	IN	IN	_	5	mark	_	_
2	it	_	PRP	PRP	_	5	nsubj	_	_
3	's	_	VBZ	VBZ	_	5	cop	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	someone	_	NN	NN	_	13	advcl	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	your	_	PRP$	PRP$	_	8	poss	_	_
8	family	_	NN	NN	_	6	pobj	_	_
9	,	_	,	,	_	13	punct	_	_
10	it	_	PRP	PRP	_	13	nsubj	_	_
11	's	_	VBZ	VBZ	_	13	cop	_	_
12	an	_	DT	DT	_	13	det	_	_
13	outsider	_	NN	NN	_	0	root	_	_
14	.	_	.	.	_	13	punct	_	_

Oracle:
(f / family, part, s / someone)

Input(Some(Graph((have-condition-91 :ARG1 outsider :ARG2 (someone :part-of (family :poss you) :polarity -)),ArrayBuffer(Span(12,13,List(0),outsider,outsider,false), Span(4,5,List(1),someone,someone,false), Span(7,8,List(2),family,family,false)),Map(2 -> family, 1 -> someone, 0 -> outsider),Map(s -> someone, f -> family, o -> outsider))),[Ljava.lang.String;@4d1bf319,Annotation([Ljava.lang.String;@6f53b8a,[Ljava.lang.String;@5c80cf32,[Ljava.lang.String;@7d900ecf),Annotation([Ljava.lang.String;@6f01b95f,[Ljava.lang.String;@4007f65e,[Ledu.cmu.lti.nlp.amr.Dependency;@1a245833),Annotation([Ljava.lang.String;@673fdbce,[Ljava.lang.String;@5965d37,[Ljava.lang.String;@7a5ceedd),Annotation([Ljava.lang.String;@4201c465,[Ljava.lang.String;@5b799640,[Ledu.cmu.lti.nlp.amr.Entity;@6cb107fd))
AMR:
(s / someone, poss, f / family)
(s / someone, poss, o / outsider)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 18,001 microseconds
Sentence: I had to deal with verbal abuse from my dad for a long 8 years before I came to uni and honestly, the only reason why I'm here is because it was the only way out.

Oracle Span 1:  8 => 8
Oracle Span 2:  abuse => abuse-01
Oracle Span 3:  and => and
Oracle Span 4:  because => cause-01
Oracle Span 5:  before => before
Oracle Span 6:  came => come-01
Oracle Span 7:  dad => dad
Oracle Span 8:  deal => deal-01
Oracle Span 9:  here => here
Oracle Span 10:  honestly => honest
Oracle Span 11:  I => i
Oracle Span 12:  it => it
Oracle Span 13:  long => long
Oracle Span 14:  only => only
Oracle Span 15:  only => only
Oracle Span 16:  out => out
Oracle Span 17:  reason => reason
Oracle Span 18:  verbal => verbal
Oracle Span 19:  way => way
Oracle Span 20:  years => (temporal-quantity :unit year)
Spans:
Span 13-14:  8 => 8
Span 6-7:  abuse => abuse-01
Span 20-21:  and => and
Span 31-32:  because => cause-01
Span 15-16:  before => before
Span 17-18:  came => come-01
Span 9-10:  dad => dad
Span 3-4:  deal => deal-01
Span 29-30:  here => here
Span 21-22:  honestly => honest
Span 0-1:  I => i
Span 32-33:  it => it
Span 12-13:  long => long
Span 24-25:  only => only
Span 35-36:  only => only
Span 37-38:  out => out
Span 25-26:  reason => reason
Span 5-6:  verbal => verbal
Span 36-37:  way => way
Span 14-15:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 13-14:  8 => 8
Oracle Span 6-7:  abuse => abuse-01
Oracle Span 20-21:  and => and
Oracle Span 31-32:  because => cause-01
Oracle Span 15-16:  before => before
Oracle Span 17-18:  came => come-01
Oracle Span 9-10:  dad => dad
Oracle Span 3-4:  deal => deal-01
Oracle Span 29-30:  here => here
Oracle Span 21-22:  honestly => honest
Oracle Span 0-1:  I => i
Oracle Span 32-33:  it => it
Oracle Span 12-13:  long => long
Oracle Span 24-25:  only => only
Oracle Span 35-36:  only => only
Oracle Span 37-38:  out => out
Oracle Span 25-26:  reason => reason
Oracle Span 5-6:  verbal => verbal
Oracle Span 36-37:  way => way
Oracle Span 14-15:  years => (temporal-quantity :unit year)

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	had	_	VBD	VBD	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	deal	_	VB	VB	_	2	xcomp	_	_
5	with	_	IN	IN	_	4	prep	_	_
6	verbal	_	JJ	JJ	_	7	amod	_	_
7	abuse	_	NN	NN	_	5	pobj	_	_
8	from	_	IN	IN	_	4	prep	_	_
9	my	_	PRP$	PRP$	_	10	poss	_	_
10	dad	_	NN	NN	_	8	pobj	_	_
11	for	_	IN	IN	_	10	prep	_	_
12	a	_	DT	DT	_	15	det	_	_
13	long	_	JJ	JJ	_	15	amod	_	_
14	8	_	CD	CD	_	15	num	_	_
15	years	_	NNS	NNS	_	11	pobj	_	_
16	before	_	IN	IN	_	18	mark	_	_
17	I	_	PRP	PRP	_	18	nsubj	_	_
18	came	_	VBD	VBD	_	2	advcl	_	_
19	to	_	TO	TO	_	20	aux	_	_
20	uni	_	VB	VB	_	18	xcomp	_	_
21	and	_	CC	CC	_	2	cc	_	_
22	honestly	_	RB	RB	_	31	advmod	_	_
23	,	_	,	,	_	31	punct	_	_
24	the	_	DT	DT	_	26	det	_	_
25	only	_	JJ	JJ	_	26	amod	_	_
26	reason	_	NN	NN	_	31	nsubj	_	_
27	why	_	WRB	WRB	_	29	advmod	_	_
28	I	_	PRP	PRP	_	29	nsubj	_	_
29	'm	_	VBP	VBP	_	26	rcmod	_	_
30	here	_	RB	RB	_	29	advmod	_	_
31	is	_	VBZ	VBZ	_	2	conj	_	_
32	because	_	IN	IN	_	37	mark	_	_
33	it	_	PRP	PRP	_	37	nsubj	_	_
34	was	_	VBD	VBD	_	37	cop	_	_
35	the	_	DT	DT	_	37	det	_	_
36	only	_	JJ	JJ	_	37	amod	_	_
37	way	_	NN	NN	_	31	advcl	_	_
38	out	_	RP	RP	_	37	dep	_	_
39	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c2 / cause-01)
(a2 / abuse-01, ARG0, d2 / dad)
(a2 / abuse-01, ARG1, i / i)
(a2 / abuse-01, mod, v / verbal)
(b2 / before, op, c / come-01)
(c / come-01, ARG1, i / i)
(c2 / cause-01, ARG0, r / reason)
(c2 / cause-01, mod, h2 / honest)
(d / deal-01, ARG0, i / i)
(d / deal-01, ARG1, a2 / abuse-01)
(d / deal-01, duration, t2 / temporal-quantity)
(d / deal-01, time, b2 / before)
(d2 / dad, poss, i / i)
(r / reason, domain, w / way)
(r / reason, mod, o4 / only)
(t2 / temporal-quantity, mod, l / long)
(t2 / temporal-quantity, quant, 8 / 8)
(t2 / temporal-quantity, unit, y2 / year)
(w / way, direction, o3 / out)
(w / way, domain, i2 / it)
(w / way, mod, o2 / only)

Input(Some(Graph((and :op (cause-01 :mod honest :ARG1 (be-located-at-91 :ARG2 here :ARG1 i) :ARG0 (reason :domain (way :domain it :direction out :mod only) :mod only)) :op (obligate-01 :ARG2 (deal-01 :time (before :op (come-01 :ARG4 university :ARG1 i)) :duration (temporal-quantity :mod long :unit year :quant 8) :ARG1 (abuse-01 :mod verbal :ARG0 (dad :poss i) :ARG1 i) :ARG0 i))),ArrayBuffer(Span(20,21,List(0),and,and,false), Span(31,32,List(1),because,cause-01,false), Span(29,30,List(2),here,here,false), Span(25,26,List(3),reason,reason,false), Span(36,37,List(4),way,way,false), Span(32,33,List(5),it,it,false), Span(37,38,List(6),out,out,false), Span(24,25,List(7),only,only,false), Span(35,36,List(8),only,only,false), Span(3,4,List(9),deal,deal-01,false), Span(15,16,List(10),before,before,false), Span(17,18,List(11),came,come-01,false), Span(13,14,List(12),8,8,false), Span(14,15,List(13, 14),years,(temporal-quantity :unit year),false), Span(12,13,List(15),long,long,false), Span(6,7,List(16),abuse,abuse-01,false), Span(5,6,List(17),verbal,verbal,false), Span(9,10,List(18),dad,dad,false), Span(0,1,List(19),I,i,false), Span(21,22,List(20),honestly,honest,false)),Map(2 -> here, 5 -> it, 12 -> 8, 15 -> long, 8 -> only, 18 -> dad, 7 -> only, 17 -> verbal, 1 -> cause-01, 4 -> way, 11 -> come-01, 14 -> year, 20 -> honest, 6 -> out, 9 -> deal-01, 0 -> and, 16 -> abuse-01, 19 -> i, 10 -> before, 3 -> reason, 13 -> temporal-quantity),Map(w -> way, h -> here, h2 -> honest, 8 -> 8, b2 -> before, o3 -> out, v -> verbal, d -> deal-01, a -> and, d2 -> dad, o2 -> only, t2 -> temporal-quantity, i2 -> it, i -> i, a2 -> abuse-01, r -> reason, c -> come-01, l -> long, o4 -> only, y2 -> year, c2 -> cause-01))),[Ljava.lang.String;@710636b0,Annotation([Ljava.lang.String;@3de8f619,[Ljava.lang.String;@2ab4bc72,[Ljava.lang.String;@4e5ed836),Annotation([Ljava.lang.String;@eadd4fb,[Ljava.lang.String;@740fb309,[Ledu.cmu.lti.nlp.amr.Dependency;@7bd7d6d6),Annotation([Ljava.lang.String;@43f02ef2,[Ljava.lang.String;@239a307b,[Ljava.lang.String;@2a8448fa),Annotation([Ljava.lang.String;@6f204a1a,[Ljava.lang.String;@2de56eb2,[Ledu.cmu.lti.nlp.amr.Entity;@5f8e8a9d))
AMR:
(a / and, condition, c / come-01)
(a / and, op, d / deal-01)
(a / and, op, r / reason)
(a2 / abuse-01, ARG0, d2 / dad)
(a2 / abuse-01, ARG1, h / here)
(a2 / abuse-01, mod, v / verbal)
(b2 / before, op, c / come-01)
(c / come-01, ARG0, w / way)
(c / come-01, ARG1, h2 / honest)
(c2 / cause-01, ARG0, w / way)
(c2 / cause-01, ARG1, o3 / out)
(c2 / cause-01, ARG6, i2 / it)
(d / deal-01, ARG0, i / i)
(d / deal-01, ARG1, a2 / abuse-01)
(l / long, op, t2 / temporal-quantity)
(r / reason, mod, o2 / only)
(t2 / temporal-quantity, location, b2 / before)
(t2 / temporal-quantity, quant, 8 / 8)
(t2 / temporal-quantity, unit, y2 / year)
(w / way, mod, o4 / only)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.2
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.3.0
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.1
WARNING: makeIds can't find span Id: 0.0.0.2.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 1,007,727 microseconds
Sentence: Work hard if you really want out.

Oracle Span 1:  hard => hard
Oracle Span 2:  out => out
Oracle Span 3:  really => really
Oracle Span 4:  want => want-01
Oracle Span 5:  Work => work-01
Oracle Span 6:  you => you
Spans:
Span 1-2:  hard => hard
Span 6-7:  out => out
Span 4-5:  really => really
Span 5-6:  want => want-01
Span 0-1:  Work => work-01
Span 3-4:  you => you

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 1-2:  hard => hard
Oracle Span 6-7:  out => out
Oracle Span 4-5:  really => really
Oracle Span 5-6:  want => want-01
Oracle Span 0-1:  Work => work-01
Oracle Span 3-4:  you => you

Dependencies:
1	Work	_	VB	VB	_	0	root	_	_
2	hard	_	JJ	JJ	_	1	acomp	_	_
3	if	_	IN	IN	_	6	mark	_	_
4	you	_	PRP	PRP	_	6	nsubj	_	_
5	really	_	RB	RB	_	6	advmod	_	_
6	want	_	VBP	VBP	_	1	advcl	_	_
7	out	_	RP	RP	_	6	prt	_	_
8	.	_	.	.	_	1	punct	_	_

Oracle:
(w / work-01, ARG0, y / you)
(w / work-01, manner, h2 / hard)
(w2 / want-01, ARG0, y / you)
(w2 / want-01, ARG2, o / out)
(w2 / want-01, mod, r / really)

Input(Some(Graph((have-condition-91 :ARG1 (work-01 :manner hard :ARG0 you) :ARG2 (want-01 :mod really :ARG2 out :ARG0 you)),ArrayBuffer(Span(0,1,List(0),Work,work-01,false), Span(1,2,List(1),hard,hard,false), Span(3,4,List(2),you,you,false), Span(5,6,List(3),want,want-01,false), Span(4,5,List(4),really,really,false), Span(6,7,List(5),out,out,false)),Map(2 -> you, 5 -> out, 1 -> hard, 4 -> really, 0 -> work-01, 3 -> want-01),Map(w -> work-01, h2 -> hard, y -> you, r -> really, w2 -> want-01, o -> out))),[Ljava.lang.String;@5745ca0e,Annotation([Ljava.lang.String;@3ad83a66,[Ljava.lang.String;@3cce5371,[Ljava.lang.String;@17bffc17),Annotation([Ljava.lang.String;@6e535154,[Ljava.lang.String;@15a34df2,[Ledu.cmu.lti.nlp.amr.Dependency;@5b38c1ec),Annotation([Ljava.lang.String;@338fc1d8,[Ljava.lang.String;@4722ef0c,[Ljava.lang.String;@48e1f6c7),Annotation([Ljava.lang.String;@55cb6996,[Ljava.lang.String;@1807e3f6,[Ledu.cmu.lti.nlp.amr.Entity;@480d3575))
AMR:
(w / work-01, ARG1, h2 / hard)
(w2 / want-01, ARG0, y / you)
(w2 / want-01, ARG1, w / work-01)
(w2 / want-01, ARG5, o / out)
(w2 / want-01, manner, r / really)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 110,732 microseconds
Sentence: Really sounds like you need support from somewhere else if she can't give it to you consistently.

Oracle Span 1:  consistently => consistent
Oracle Span 2:  else => else
Oracle Span 3:  give => give-01
Oracle Span 4:  need => need-01
Oracle Span 5:  Really => really
Oracle Span 6:  she => she
Oracle Span 7:  somewhere => somewhere
Oracle Span 8:  sounds => sound-01
Oracle Span 9:  support => support-01
Oracle Span 10:  you => you
Spans:
Span 17-18:  consistently => consistent
Span 8-9:  else => else
Span 13-14:  give => give-01
Span 4-5:  need => need-01
Span 0-1:  Really => really
Span 10-11:  she => she
Span 7-8:  somewhere => somewhere
Span 1-2:  sounds => sound-01
Span 5-6:  support => support-01
Span 3-4:  you => you

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 17-18:  consistently => consistent
Oracle Span 8-9:  else => else
Oracle Span 13-14:  give => give-01
Oracle Span 4-5:  need => need-01
Oracle Span 0-1:  Really => really
Oracle Span 10-11:  she => she
Oracle Span 7-8:  somewhere => somewhere
Oracle Span 1-2:  sounds => sound-01
Oracle Span 5-6:  support => support-01
Oracle Span 3-4:  you => you

Dependencies:
1	Really	_	NNP	NNP	_	2	nsubj	_	_
2	sounds	_	VBZ	VBZ	_	0	root	_	_
3	like	_	IN	IN	_	6	mark	_	_
4	you	_	PRP	PRP	_	6	nsubj	_	_
5	need	_	MD	MD	_	6	aux	_	_
6	support	_	VB	VB	_	2	advcl	_	_
7	from	_	IN	IN	_	6	prep	_	_
8	somewhere	_	RB	RB	_	9	advmod	_	_
9	else	_	RB	RB	_	7	pobj	_	_
10	if	_	IN	IN	_	14	mark	_	_
11	she	_	PRP	PRP	_	14	nsubj	_	_
12	ca	_	MD	MD	_	14	aux	_	_
13	n't	_	RB	RB	_	14	neg	_	_
14	give	_	VB	VB	_	6	advcl	_	_
15	it	_	PRP	PRP	_	14	dobj	_	_
16	to	_	TO	TO	_	14	prep	_	_
17	you	_	PRP	PRP	_	16	pobj	_	_
18	consistently	_	RB	RB	_	14	advmod	_	_
19	.	_	.	.	_	2	punct	_	_

Oracle:
(g / give-01, ARG0, s4 / she)
(g / give-01, ARG1, s2 / support-01)
(g / give-01, ARG2, y / you)
(g / give-01, manner, c / consistent)
(n / need-01, ARG0, y / you)
(n / need-01, ARG1, s2 / support-01)
(n / need-01, source, s3 / somewhere)
(s / sound-01, ARG2, n / need-01)
(s / sound-01, mod, r2 / really)
(s2 / support-01, ARG1, y / you)
(s3 / somewhere, mod, e / else)

Input(Some(Graph((sound-01 :mod really :ARG2 (need-01 :ARG1-of (have-condition-91 :ARG2 (possible :polarity - :domain (give-01 :manner consistent :ARG0 she :ARG1 support-01 :ARG2 you))) :source (somewhere :mod else) :ARG1 (support-01 :ARG1 you) :ARG0 you)),ArrayBuffer(Span(1,2,List(0),sounds,sound-01,false), Span(0,1,List(1),Really,really,false), Span(4,5,List(2),need,need-01,false), Span(13,14,List(3),give,give-01,false), Span(10,11,List(4),she,she,false), Span(7,8,List(5),somewhere,somewhere,false), Span(8,9,List(6),else,else,false), Span(5,6,List(7),support,support-01,false), Span(3,4,List(8),you,you,false), Span(17,18,List(9),consistently,consistent,false)),Map(2 -> need-01, 5 -> somewhere, 8 -> you, 7 -> support-01, 1 -> really, 4 -> she, 6 -> else, 9 -> consistent, 0 -> sound-01, 3 -> give-01),Map(e -> else, n -> need-01, s2 -> support-01, s -> sound-01, s4 -> she, y -> you, g -> give-01, r2 -> really, c -> consistent, s3 -> somewhere))),[Ljava.lang.String;@f1da57d,Annotation([Ljava.lang.String;@194fad1,[Ljava.lang.String;@26abb146,[Ljava.lang.String;@72c8e7b),Annotation([Ljava.lang.String;@65f8f5ae,[Ljava.lang.String;@431cd9b2,[Ledu.cmu.lti.nlp.amr.Dependency;@38467116),Annotation([Ljava.lang.String;@5b7a7f33,[Ljava.lang.String;@790da477,[Ljava.lang.String;@5c7933ad),Annotation([Ljava.lang.String;@57bc27f5,[Ljava.lang.String;@5fb759d6,[Ledu.cmu.lti.nlp.amr.Entity;@4b8d604b))
AMR:
(c / consistent, domain, s4 / she)
(e / else, degree, s3 / somewhere)
(g / give-01, ARG0, s4 / she)
(g / give-01, ARG1, s2 / support-01)
(n / need-01, ARG1, s2 / support-01)
(s / sound-01, ARG0, r2 / really)
(s / sound-01, ARG1, n / need-01)
(s2 / support-01, ARG0, y / you)
(s2 / support-01, ARG1, e / else)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3.0.1
WARNING: makeIds can't find span Id: 0.0.3.0.1.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.1.1
Decoded in 169,590 microseconds
Sentence: You could call Childline or something similar?

Oracle Span 1:  call => call-02
Oracle Span 2:  Childline => (organization :name (name :op "Childline"))
Oracle Span 3:  could => possible
Oracle Span 4:  or => or
Oracle Span 5:  something => something
Oracle Span 6:  You => you
Spans:
Span 2-3:  call => call-02
Span 3-4:  Childline => (organization :name (name :op "Childline"))
Span 1-2:  could => possible
Span 4-5:  or => or
Span 5-6:  something => something
Span 0-1:  You => you

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 2-3:  call => call-02
Oracle Span 3-4:  Childline => (organization :name (name :op "Childline"))
Oracle Span 1-2:  could => possible
Oracle Span 4-5:  or => or
Oracle Span 5-6:  something => something
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	could	_	MD	MD	_	3	aux	_	_
3	call	_	VB	VB	_	0	root	_	_
4	Childline	_	NNP	NNP	_	7	nsubj	_	_
5	or	_	CC	CC	_	4	cc	_	_
6	something	_	NN	NN	_	4	conj	_	_
7	similar	_	JJ	JJ	_	3	xcomp	_	_
8	?	_	.	.	_	3	punct	_	_

Oracle:
(c / call-02, ARG0, y / you)
(c / call-02, ARG1, o / or)
(n / name, op, "Childline")
(o / or, op, o2 / organization)
(o / or, op, s / something)
(o2 / organization, name, n / name)
(p / possible, domain, c / call-02)

Input(Some(Graph((possible :domain (call-02 :ARG1 (or :op (something :ARG1-of (resemble-01 :ARG2 organization)) :op (organization :name (name :op "Childline"))) :ARG0 you) :mode interrogative),ArrayBuffer(Span(3,4,List(0, 1, 2),Childline,(organization :name (name :op "Childline")),false), Span(1,2,List(3),could,possible,false), Span(2,3,List(4),call,call-02,false), Span(4,5,List(5),or,or,false), Span(5,6,List(6),something,something,false), Span(0,1,List(7),You,you,false)),Map(2 -> "Childline", 5 -> or, 7 -> you, 1 -> name, 4 -> call-02, 6 -> something, 0 -> organization, 3 -> possible),Map(n -> name, s -> something, y -> you, p -> possible, o2 -> organization, c -> call-02, o -> or))),[Ljava.lang.String;@5e7cd6cc,Annotation([Ljava.lang.String;@68c9d179,[Ljava.lang.String;@d554c5f,[Ljava.lang.String;@2dfaea86),Annotation([Ljava.lang.String;@15888343,[Ljava.lang.String;@33ecda92,[Ledu.cmu.lti.nlp.amr.Dependency;@14fc5f04),Annotation([Ljava.lang.String;@6e2829c7,[Ljava.lang.String;@3feb2dda,[Ljava.lang.String;@6a8658ff),Annotation([Ljava.lang.String;@1c742ed4,[Ljava.lang.String;@333d4a8c,[Ledu.cmu.lti.nlp.amr.Entity;@55de24cc))
AMR:
(c / call-02, ARG0, y / you)
(c / call-02, ARG1, o2 / organization)
(n / name, op, "Childline")
(o / or, op, o2 / organization)
(o / or, op, s / something)
(o2 / organization, name, n / name)
(p / possible, domain, c / call-02)

WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 112,657 microseconds
Sentence: You could go to the library on saturdays and do a good 8 hours of studying there.

Oracle Span 1:  8 => 8
Oracle Span 2:  and => and
Oracle Span 3:  could => possible
Oracle Span 4:  go => go-01
Oracle Span 5:  good => good
Oracle Span 6:  hours => (temporal-quantity :unit hour)
Oracle Span 7:  library => library
Oracle Span 8:  saturdays => saturday
Oracle Span 9:  studying => study-01
Oracle Span 10:  You => you
Spans:
Span 12-13:  8 => 8
Span 8-9:  and => and
Span 1-2:  could => possible
Span 2-3:  go => go-01
Span 11-12:  good => good
Span 13-14:  hours => (temporal-quantity :unit hour)
Span 5-6:  library => library
Span 7-8:  saturdays => saturday
Span 15-16:  studying => study-01
Span 0-1:  You => you

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 12-13:  8 => 8
Oracle Span 8-9:  and => and
Oracle Span 1-2:  could => possible
Oracle Span 2-3:  go => go-01
Oracle Span 11-12:  good => good
Oracle Span 13-14:  hours => (temporal-quantity :unit hour)
Oracle Span 5-6:  library => library
Oracle Span 7-8:  saturdays => saturday
Oracle Span 15-16:  studying => study-01
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	could	_	MD	MD	_	3	aux	_	_
3	go	_	VB	VB	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	library	_	NN	NN	_	4	pobj	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	saturdays	_	NNS	NNS	_	7	pobj	_	_
9	and	_	CC	CC	_	3	cc	_	_
10	do	_	VB	VB	_	3	conj	_	_
11	a	_	DT	DT	_	14	det	_	_
12	good	_	JJ	JJ	_	14	amod	_	_
13	8	_	CD	CD	_	14	num	_	_
14	hours	_	NNS	NNS	_	10	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	studying	_	VBG	VBG	_	15	pcomp	_	_
17	there	_	RB	RB	_	16	advmod	_	_
18	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, p / possible)
(a / and, op, s2 / study-01)
(g / go-01, ARG1, y / you)
(g / go-01, ARG4, l / library)
(g2 / good, op, t / temporal-quantity)
(p / possible, domain, g / go-01)
(s2 / study-01, ARG0, y / you)
(s2 / study-01, duration, g2 / good)
(s2 / study-01, location, l / library)
(t / temporal-quantity, quant, 8 / 8)
(t / temporal-quantity, unit, h / hour)

Input(Some(Graph((and :op (study-01 :duration (good :op (temporal-quantity :unit hour :quant 8)) :ARG0 you :location library) :op (possible :domain (go-01 :time (date-entity :weekday saturday) :ARG4 library :ARG1 you))),ArrayBuffer(Span(8,9,List(0),and,and,false), Span(15,16,List(1),studying,study-01,false), Span(11,12,List(2),good,good,false), Span(12,13,List(3),8,8,false), Span(13,14,List(4, 5),hours,(temporal-quantity :unit hour),false), Span(1,2,List(6),could,possible,false), Span(2,3,List(7),go,go-01,false), Span(7,8,List(8),saturdays,saturday,false), Span(5,6,List(9),library,library,false), Span(0,1,List(10),You,you,false)),Map(2 -> good, 5 -> hour, 8 -> saturday, 7 -> go-01, 1 -> study-01, 4 -> temporal-quantity, 6 -> possible, 9 -> library, 0 -> and, 10 -> you, 3 -> 8),Map(h -> hour, t -> temporal-quantity, s2 -> study-01, 8 -> 8, s -> saturday, y -> you, g -> go-01, p -> possible, g2 -> good, a -> and, l -> library))),[Ljava.lang.String;@dc7df28,Annotation([Ljava.lang.String;@30f842ca,[Ljava.lang.String;@69c81773,[Ljava.lang.String;@4d14b6c2),Annotation([Ljava.lang.String;@7e990ed7,[Ljava.lang.String;@c05fddc,[Ledu.cmu.lti.nlp.amr.Dependency;@25df00a0),Annotation([Ljava.lang.String;@4d15107f,[Ljava.lang.String;@7b4c50bc,[Ljava.lang.String;@5884a914),Annotation([Ljava.lang.String;@50378a4,[Ljava.lang.String;@60f00693,[Ledu.cmu.lti.nlp.amr.Entity;@79207381))
AMR:
(a / and, op, g / go-01)
(g / go-01, ARG0, y / you)
(g / go-01, ARG1, t / temporal-quantity)
(g / go-01, ARG2, s / saturday)
(g / go-01, ARG4, l / library)
(g2 / good, op, t / temporal-quantity)
(p / possible, domain, g / go-01)
(s2 / study-01, ARG0, t / temporal-quantity)
(s2 / study-01, ARG1, 8 / 8)
(t / temporal-quantity, unit, h / hour)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 128,828 microseconds
Sentence: Is there a friend's house you could go to- form a study group?

Oracle Span 1:  could => possible
Oracle Span 2:  form => form-01
Oracle Span 3:  friend => friend
Oracle Span 4:  go => go-01
Oracle Span 5:  group => group
Oracle Span 6:  house => house
Oracle Span 7:  study => study-01
Oracle Span 8:  you => you
Spans:
Span 7-8:  could => possible
Span 11-12:  form => form-01
Span 3-4:  friend => friend
Span 8-9:  go => go-01
Span 14-15:  group => group
Span 5-6:  house => house
Span 13-14:  study => study-01
Span 6-7:  you => you

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 7-8:  could => possible
Oracle Span 11-12:  form => form-01
Oracle Span 3-4:  friend => friend
Oracle Span 8-9:  go => go-01
Oracle Span 14-15:  group => group
Oracle Span 5-6:  house => house
Oracle Span 13-14:  study => study-01
Oracle Span 6-7:  you => you

Dependencies:
1	Is	_	VBZ	VBZ	_	0	root	_	_
2	there	_	EX	EX	_	1	expl	_	_
3	a	_	DT	DT	_	4	det	_	_
4	friend	_	NN	NN	_	1	nsubj	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	house	_	NN	NN	_	4	dep	_	_
7	you	_	PRP	PRP	_	9	nsubj	_	_
8	could	_	MD	MD	_	9	aux	_	_
9	go	_	VB	VB	_	6	rcmod	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	-	_	:	:	_	9	punct	_	_
12	form	_	VB	VB	_	9	dep	_	_
13	a	_	DT	DT	_	15	det	_	_
14	study	_	NN	NN	_	15	nn	_	_
15	group	_	NN	NN	_	12	dobj	_	_
16	?	_	.	.	_	1	punct	_	_

Oracle:
(f2 / form-01, ARG1, g2 / group)
(g / go-01, ARG1, y / you)
(g / go-01, ARG4, h / house)
(g / go-01, purpose, f2 / form-01)
(h / house, poss, f / friend)
(p / possible, domain, g / go-01)
(s / study-01, ARG0, g2 / group)

Input(Some(Graph((possible :domain (go-01 :purpose (form-01 :ARG1 (group :ARG0-of study-01)) :ARG4 (house :poss friend) :ARG1 you) :mode interrogative),ArrayBuffer(Span(7,8,List(0),could,possible,false), Span(8,9,List(1),go,go-01,false), Span(11,12,List(2),form,form-01,false), Span(14,15,List(3),group,group,false), Span(13,14,List(4),study,study-01,false), Span(5,6,List(5),house,house,false), Span(3,4,List(6),friend,friend,false), Span(6,7,List(7),you,you,false)),Map(2 -> form-01, 5 -> house, 7 -> you, 1 -> go-01, 4 -> study-01, 6 -> friend, 0 -> possible, 3 -> group),Map(h -> house, s -> study-01, y -> you, g2 -> group, g -> go-01, p -> possible, f2 -> form-01, f -> friend))),[Ljava.lang.String;@491b9b8,Annotation([Ljava.lang.String;@1a4927d6,[Ljava.lang.String;@7a6d7e92,[Ljava.lang.String;@aba625),Annotation([Ljava.lang.String;@97e93f1,[Ljava.lang.String;@5a5a729f,[Ledu.cmu.lti.nlp.amr.Dependency;@4b520ea8),Annotation([Ljava.lang.String;@16150369,[Ljava.lang.String;@6b09fb41,[Ljava.lang.String;@624ea235),Annotation([Ljava.lang.String;@3932c79a,[Ljava.lang.String;@782859e,[Ledu.cmu.lti.nlp.amr.Entity;@23f5b5dc))
AMR:
(f2 / form-01, ARG0, y / you)
(f2 / form-01, ARG1, g2 / group)
(g / go-01, ARG0, y / you)
(g / go-01, ARG1, h / house)
(p / possible, domain, g / go-01)
(s / study-01, ARG0, g2 / group)
(s / study-01, ARG1, f / friend)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 135,616 microseconds
Sentence: So you want her sectioned cos she is a bit of a pain in the arse and you've blamed all your problems on her?

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  arse => arse
Oracle Span 4:  bit => bit
Oracle Span 5:  blamed => blame-01
Oracle Span 6:  pain => pain
Oracle Span 7:  problems => problem
Oracle Span 8:  sectioned => section-00
Oracle Span 9:  she => she
Oracle Span 10:  want => want-01
Oracle Span 11:  you => you
Spans:
Span 20-21:  all => all
Span 16-17:  and => and
Span 15-16:  arse => arse
Span 9-10:  bit => bit
Span 19-20:  blamed => blame-01
Span 12-13:  pain => pain
Span 22-23:  problems => problem
Span 4-5:  sectioned => section-00
Span 6-7:  she => she
Span 2-3:  want => want-01
Span 1-2:  you => you

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 20-21:  all => all
Oracle Span 16-17:  and => and
Oracle Span 15-16:  arse => arse
Oracle Span 9-10:  bit => bit
Oracle Span 19-20:  blamed => blame-01
Oracle Span 12-13:  pain => pain
Oracle Span 22-23:  problems => problem
Oracle Span 4-5:  sectioned => section-00
Oracle Span 6-7:  she => she
Oracle Span 2-3:  want => want-01
Oracle Span 1-2:  you => you

Dependencies:
1	So	_	IN	IN	_	3	dep	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	want	_	VBP	VBP	_	0	root	_	_
4	her	_	PRP$	PRP$	_	6	poss	_	_
5	sectioned	_	JJ	JJ	_	6	amod	_	_
6	cos	_	NN	NN	_	3	dobj	_	_
7	she	_	PRP	PRP	_	10	nsubj	_	_
8	is	_	VBZ	VBZ	_	10	cop	_	_
9	a	_	DT	DT	_	10	det	_	_
10	bit	_	NN	NN	_	6	rcmod	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	a	_	DT	DT	_	13	det	_	_
13	pain	_	NN	NN	_	11	pobj	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	arse	_	NN	NN	_	14	pobj	_	_
17	and	_	CC	CC	_	10	cc	_	_
18	you	_	PRP	PRP	_	20	nsubj	_	_
19	've	_	VBP	VBP	_	20	aux	_	_
20	blamed	_	VBN	VBN	_	10	conj	_	_
21	all	_	PDT	PDT	_	23	predet	_	_
22	your	_	PRP$	PRP$	_	23	poss	_	_
23	problems	_	NNS	NNS	_	20	dobj	_	_
24	on	_	IN	IN	_	20	prep	_	_
25	her	_	PRP	PRP	_	24	pobj	_	_
26	?	_	.	.	_	3	punct	_	_

Oracle:
(a2 / and, op, b2 / blame-01)
(a2 / and, op, p / pain)
(b2 / blame-01, ARG0, y / you)
(b2 / blame-01, ARG1, s / section-00)
(b2 / blame-01, ARG2, p2 / problem)
(p / pain, degree, b / bit)
(p / pain, domain, s / section-00)
(p / pain, location, a / arse)
(p2 / problem, poss, y / you)
(p2 / problem, quant, a3 / all)
(s / section-00, ARG1, s2 / she)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, s / section-00)

Input(Some(Graph((cause-01 :ARG0 (and :op (blame-01 :ARG2 (problem :quant all :poss you) :ARG0 you :ARG1 section-00) :op (pain :degree bit :location arse :domain section-00)) :ARG1 (want-01 :ARG1 (section-00 :ARG1 she) :ARG0 you :mode interrogative)),ArrayBuffer(Span(16,17,List(0),and,and,false), Span(19,20,List(1),blamed,blame-01,false), Span(22,23,List(2),problems,problem,false), Span(20,21,List(3),all,all,false), Span(12,13,List(4),pain,pain,false), Span(9,10,List(5),bit,bit,false), Span(15,16,List(6),arse,arse,false), Span(2,3,List(7),want,want-01,false), Span(4,5,List(8),sectioned,section-00,false), Span(6,7,List(9),she,she,false), Span(1,2,List(10),you,you,false)),Map(2 -> problem, 5 -> bit, 8 -> section-00, 7 -> want-01, 1 -> blame-01, 4 -> pain, 6 -> arse, 9 -> she, 0 -> and, 10 -> you, 3 -> all),Map(w -> want-01, s2 -> she, b -> bit, b2 -> blame-01, p2 -> problem, s -> section-00, a3 -> all, y -> you, p -> pain, a -> arse, a2 -> and))),[Ljava.lang.String;@34bde49d,Annotation([Ljava.lang.String;@1b1cfb87,[Ljava.lang.String;@821330f,[Ljava.lang.String;@6f43c82),Annotation([Ljava.lang.String;@5db6b9cd,[Ljava.lang.String;@210ab13f,[Ledu.cmu.lti.nlp.amr.Dependency;@20b2475a),Annotation([Ljava.lang.String;@7857fe2,[Ljava.lang.String;@6f15d60e,[Ljava.lang.String;@1be2019a),Annotation([Ljava.lang.String;@29d80d2b,[Ljava.lang.String;@58e1d9d,[Ledu.cmu.lti.nlp.amr.Entity;@446a1e84))
AMR:
(a2 / and, op, a / arse)
(a2 / and, op, b2 / blame-01)
(a3 / all, op, b2 / blame-01)
(b2 / blame-01, ARG0, s2 / she)
(b2 / blame-01, ARG1, p2 / problem)
(b2 / blame-01, ARG2, p / pain)
(b2 / blame-01, ARG6, b / bit)
(s / section-00, ARG1, b / bit)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, s2 / she)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 344,161 microseconds
Sentence: I know what you're feeling.

Oracle Span 1:  feeling => (thing :ARG1-of feel-01)
Oracle Span 2:  I => i
Oracle Span 3:  know => know-01
Oracle Span 4:  you => you
Spans:
Span 5-6:  feeling => (thing :ARG1-of feel-01)
Span 0-1:  I => i
Span 1-2:  know => know-01
Span 3-4:  you => you

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Oracle Span 5-6:  feeling => (thing :ARG1-of feel-01)
Oracle Span 0-1:  I => i
Oracle Span 1-2:  know => know-01
Oracle Span 3-4:  you => you

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	know	_	VBP	VBP	_	0	root	_	_
3	what	_	WP	WP	_	6	dobj	_	_
4	you	_	PRP	PRP	_	6	nsubj	_	_
5	're	_	VBP	VBP	_	6	aux	_	_
6	feeling	_	VBG	VBG	_	2	ccomp	_	_
7	.	_	.	.	_	2	punct	_	_

Oracle:
(f / feel-01, ARG0, y / you)
(f / feel-01, ARG1, t / thing)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t / thing)

Input(Some(Graph((know-01 :ARG1 (thing :ARG1-of (feel-01 :ARG0 you)) :ARG0 i),ArrayBuffer(Span(1,2,List(0),know,know-01,false), Span(5,6,List(1, 2),feeling,(thing :ARG1-of feel-01),false), Span(3,4,List(3),you,you,false), Span(0,1,List(4),I,i,false)),Map(2 -> feel-01, 1 -> thing, 4 -> i, 0 -> know-01, 3 -> you),Map(t -> thing, k -> know-01, y -> you, i -> i, f -> feel-01))),[Ljava.lang.String;@4f0f2942,Annotation([Ljava.lang.String;@2657d4dd,[Ljava.lang.String;@5340477f,[Ljava.lang.String;@47caedad),Annotation([Ljava.lang.String;@7139992f,[Ljava.lang.String;@69504ae9,[Ledu.cmu.lti.nlp.amr.Dependency;@387a8303),Annotation([Ljava.lang.String;@28cda624,[Ljava.lang.String;@1500b2f3,[Ljava.lang.String;@7eecb5b8),Annotation([Ljava.lang.String;@126253fd,[Ljava.lang.String;@57db2b13,[Ledu.cmu.lti.nlp.amr.Entity;@475c9c31))
AMR:
(f / feel-01, ARG0, y / you)
(f / feel-01, ARG1, t / thing)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 19,471 microseconds
Sentence: My Mum was spat out of hell too.

Oracle Span 1:  hell => hell
Oracle Span 2:  Mum => mum
Oracle Span 3:  spat => spit-01
Oracle Span 4:  too => too
Spans:
Span 6-7:  hell => hell
Span 1-2:  Mum => mum
Span 3-4:  spat => spit-01
Span 7-8:  too => too

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Oracle Span 6-7:  hell => hell
Oracle Span 1-2:  Mum => mum
Oracle Span 3-4:  spat => spit-01
Oracle Span 7-8:  too => too

Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	Mum	_	NN	NN	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	spat	_	VBN	VBN	_	0	root	_	_
5	out	_	RP	RP	_	4	prt	_	_
6	of	_	IN	IN	_	4	prep	_	_
7	hell	_	NN	NN	_	6	pobj	_	_
8	too	_	RB	RB	_	4	advmod	_	_
9	.	_	.	.	_	4	punct	_	_

Oracle:
(s / spit-01, ARG1, m / mum)
(s / spit-01, mod, t / too)
(s / spit-01, source, h / hell)

Input(Some(Graph((spit-01 :mod too :source hell :ARG1 (mum :poss i)),ArrayBuffer(Span(3,4,List(0),spat,spit-01,false), Span(7,8,List(1),too,too,false), Span(6,7,List(2),hell,hell,false), Span(1,2,List(3),Mum,mum,false)),Map(2 -> hell, 1 -> too, 0 -> spit-01, 3 -> mum),Map(h -> hell, t -> too, s -> spit-01, m -> mum))),[Ljava.lang.String;@5c86a017,Annotation([Ljava.lang.String;@5c7bfdc1,[Ljava.lang.String;@5276d6ee,[Ljava.lang.String;@71687585),Annotation([Ljava.lang.String;@1807f5a7,[Ljava.lang.String;@1b919693,[Ledu.cmu.lti.nlp.amr.Dependency;@7fb4f2a9),Annotation([Ljava.lang.String;@4dc27487,[Ljava.lang.String;@6a4f1a55,[Ljava.lang.String;@7dfd3c81),Annotation([Ljava.lang.String;@2584b82d,[Ljava.lang.String;@7bbc8656,[Ledu.cmu.lti.nlp.amr.Entity;@6933b6c6))
AMR:
(s / spit-01, ARG1, m / mum)
(s / spit-01, ARG2, h / hell)
(s / spit-01, ARG6, t / too)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 81,676 microseconds
Sentence: I highly recommend taking up smoking

Oracle Span 1:  highly => high
Oracle Span 2:  I => i
Oracle Span 3:  recommend => recommend-01
Oracle Span 4:  smoking => smoke-02
Oracle Span 5:  taking => take-13
Spans:
Span 1-2:  highly => high
Span 0-1:  I => i
Span 2-3:  recommend => recommend-01
Span 5-6:  smoking => smoke-02
Span 3-4:  taking => take-13

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 1-2:  highly => high
Oracle Span 0-1:  I => i
Oracle Span 2-3:  recommend => recommend-01
Oracle Span 5-6:  smoking => smoke-02
Oracle Span 3-4:  taking => take-13

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	highly	_	RB	RB	_	3	advmod	_	_
3	recommend	_	VBP	VBP	_	0	root	_	_
4	taking	_	VBG	VBG	_	3	xcomp	_	_
5	up	_	RP	RP	_	4	prt	_	_
6	smoking	_	NN	NN	_	4	dobj	_	_

Oracle:
(r / recommend-01, ARG0, i / i)
(r / recommend-01, ARG1, t / take-13)
(r / recommend-01, degree, h / high)
(t / take-13, ARG1, s / smoke-02)

Input(Some(Graph((recommend-01 :degree high :ARG1 (take-13 :ARG1 smoke-02) :ARG0 i),ArrayBuffer(Span(2,3,List(0),recommend,recommend-01,false), Span(3,4,List(1),taking,take-13,false), Span(5,6,List(2),smoking,smoke-02,false), Span(0,1,List(3),I,i,false), Span(1,2,List(4),highly,high,false)),Map(2 -> smoke-02, 1 -> take-13, 4 -> high, 0 -> recommend-01, 3 -> i),Map(h -> high, t -> take-13, s -> smoke-02, i -> i, r -> recommend-01))),[Ljava.lang.String;@7d3e8655,Annotation([Ljava.lang.String;@7dfb0c0f,[Ljava.lang.String;@626abbd0,[Ljava.lang.String;@169bb4dd),Annotation([Ljava.lang.String;@1f9e9475,[Ljava.lang.String;@3aa078fd,[Ledu.cmu.lti.nlp.amr.Dependency;@d23e042),Annotation([Ljava.lang.String;@46d59067,[Ljava.lang.String;@2d0399f4,[Ljava.lang.String;@14dd7b39),Annotation([Ljava.lang.String;@66ea810,[Ljava.lang.String;@6cd24612,[Ledu.cmu.lti.nlp.amr.Entity;@5dafbe45))
AMR:
(r / recommend-01, ARG0, i / i)
(r / recommend-01, ARG1, t / take-13)
(r / recommend-01, manner, h / high)
(t / take-13, ARG1, s / smoke-02)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 49,679 microseconds
Sentence: Oh grow up tsr and stop negging its was a joke!!!

Oracle Span 1:  and => and
Oracle Span 2:  grow => grow-04
Oracle Span 3:  its => it
Oracle Span 4:  joke => joke
Oracle Span 5:  Oh => oh
Oracle Span 6:  stop => stop-01
Oracle Span 7:  tsr => (person :name (name :op "tsr"))
NER Entity: (country :name (name :op "Oh"))
Spans:
Span 4-5:  and => and
Span 1-2:  grow => grow-04
Span 7-8:  its => it
Span 10-11:  joke => joke
Span 0-1:  Oh => oh
Span 5-6:  stop => stop-01
Span 3-4:  tsr => (person :name (name :op "tsr"))

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 1-2:  grow => grow-04
Oracle Span 7-8:  its => it
Oracle Span 10-11:  joke => joke
Oracle Span 0-1:  Oh => oh
Oracle Span 5-6:  stop => stop-01
Oracle Span 3-4:  tsr => (person :name (name :op "tsr"))

Dependencies:
1	Oh	_	UH	UH	_	2	dep	_	_
2	grow	_	VBP	VBP	_	0	root	_	_
3	up	_	RP	RP	_	2	prt	_	_
4	tsr	_	NN	NN	_	7	nn	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	stop	_	NN	NN	_	4	conj	_	_
7	negging	_	NN	NN	_	2	dobj	_	_
8	its	_	PRP$	PRP$	_	11	nsubj	_	_
9	was	_	VBD	VBD	_	11	cop	_	_
10	a	_	DT	DT	_	11	det	_	_
11	joke	_	NN	NN	_	7	rcmod	_	_
12	!!!	_	NNP	NNP	_	2	nsubj	_	_

Oracle:
(a / and, mod, o / oh)
(a / and, op, g / grow-04)
(a / and, op, s / stop-01)
(g / grow-04, ARG1, p / person)
(j / joke, domain, i / it)
(n / name, op, "tsr")
(p / person, name, n / name)
(s / stop-01, ARG0, p / person)

Input(Some(Graph((multi-sentence :snt1 (and :mod (oh :mode expressive) :op (stop-01 :ARG1 (nag-01 :ARG0 person) :ARG0 person) :op (grow-04 :ARG1 (person :name (name :op "tsr")))) :snt2 (joke :domain it)),ArrayBuffer(Span(3,4,List(0, 1, 2),tsr,(person :name (name :op "tsr")),false), Span(4,5,List(3),and,and,false), Span(0,1,List(4),Oh,oh,false), Span(5,6,List(5),stop,stop-01,false), Span(1,2,List(6),grow,grow-04,false), Span(10,11,List(7),joke,joke,false), Span(7,8,List(8),its,it,false)),Map(2 -> "tsr", 5 -> stop-01, 8 -> it, 7 -> joke, 1 -> name, 4 -> oh, 6 -> grow-04, 0 -> person, 3 -> and),Map(n -> name, j -> joke, s -> stop-01, g -> grow-04, p -> person, a -> and, i -> it, o -> oh))),[Ljava.lang.String;@2254127a,Annotation([Ljava.lang.String;@51891008,[Ljava.lang.String;@2f953efd,[Ljava.lang.String;@f68f0dc),Annotation([Ljava.lang.String;@d2de489,[Ljava.lang.String;@14bdbc74,[Ledu.cmu.lti.nlp.amr.Dependency;@12591ac8),Annotation([Ljava.lang.String;@5a7fe64f,[Ljava.lang.String;@38145825,[Ljava.lang.String;@41330d4f),Annotation([Ljava.lang.String;@1b66c0fb,[Ljava.lang.String;@3e0e1046,[Ledu.cmu.lti.nlp.amr.Entity;@24c1b2d2))
AMR:
(a / and, op, p / person)
(a / and, op, s / stop-01)
(g / grow-04, ARG1, a / and)
(g / grow-04, ARG6, o / oh)
(j / joke, topic, p / person)
(n / name, op, "tsr")
(p / person, name, n / name)
(s / stop-01, ARG1, i / it)

WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 134,837 microseconds
Sentence: I think over the last year or 2 i've become a much weaker person and in a way have dulled down my personality inorder to try and make some friends at uni.

Oracle Span 1:  2 => 2
Oracle Span 2:  and => and
Oracle Span 3:  become => become-01
Oracle Span 4:  down => down
Oracle Span 5:  dulled => dull-01
Oracle Span 6:  friends => friend
Oracle Span 7:  I => i
Oracle Span 8:  last => last
Oracle Span 9:  make => make-02
Oracle Span 10:  much => much
Oracle Span 11:  person => person
Oracle Span 12:  personality => personality
Oracle Span 13:  some => some
Oracle Span 14:  think => think-01
Oracle Span 15:  try => try-01
Oracle Span 16:  way => way
Oracle Span 17:  weaker => weak
Oracle Span 18:  year => (temporal-quantity :unit year)
Spans:
Span 7-8:  2 => 2
Span 15-16:  and => and
Span 10-11:  become => become-01
Span 21-22:  down => down
Span 20-21:  dulled => dull-01
Span 30-31:  friends => friend
Span 0-1:  I => i
Span 4-5:  last => last
Span 28-29:  make => make-02
Span 12-13:  much => much
Span 14-15:  person => person
Span 23-24:  personality => personality
Span 29-30:  some => some
Span 1-2:  think => think-01
Span 26-27:  try => try-01
Span 18-19:  way => way
Span 13-14:  weaker => weak
Span 5-6:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Oracle Span 7-8:  2 => 2
Oracle Span 15-16:  and => and
Oracle Span 10-11:  become => become-01
Oracle Span 21-22:  down => down
Oracle Span 20-21:  dulled => dull-01
Oracle Span 30-31:  friends => friend
Oracle Span 0-1:  I => i
Oracle Span 4-5:  last => last
Oracle Span 28-29:  make => make-02
Oracle Span 12-13:  much => much
Oracle Span 14-15:  person => person
Oracle Span 23-24:  personality => personality
Oracle Span 29-30:  some => some
Oracle Span 1-2:  think => think-01
Oracle Span 26-27:  try => try-01
Oracle Span 18-19:  way => way
Oracle Span 13-14:  weaker => weak
Oracle Span 5-6:  year => (temporal-quantity :unit year)

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	think	_	VBP	VBP	_	0	root	_	_
3	over	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	last	_	JJ	JJ	_	6	amod	_	_
6	year	_	NN	NN	_	3	pobj	_	_
7	or	_	CC	CC	_	6	cc	_	_
8	2	_	CD	CD	_	6	conj	_	_
9	i	_	FW	FW	_	11	nsubj	_	_
10	've	_	VBP	VBP	_	11	aux	_	_
11	become	_	VBN	VBN	_	2	advcl	_	_
12	a	_	DT	DT	_	15	det	_	_
13	much	_	RB	RB	_	14	advmod	_	_
14	weaker	_	JJR	JJR	_	15	amod	_	_
15	person	_	NN	NN	_	11	xcomp	_	_
16	and	_	CC	CC	_	11	cc	_	_
17	in	_	IN	IN	_	21	mark	_	_
18	a	_	DT	DT	_	19	det	_	_
19	way	_	NN	NN	_	21	nsubj	_	_
20	have	_	VBP	VBP	_	21	aux	_	_
21	dulled	_	VBN	VBN	_	11	conj	_	_
22	down	_	RP	RP	_	21	prt	_	_
23	my	_	PRP$	PRP$	_	25	poss	_	_
24	personality	_	NN	NN	_	25	nn	_	_
25	inorder	_	NN	NN	_	21	dobj	_	_
26	to	_	TO	TO	_	27	aux	_	_
27	try	_	VB	VB	_	21	vmod	_	_
28	and	_	CC	CC	_	27	cc	_	_
29	make	_	VB	VB	_	27	conj	_	_
30	some	_	DT	DT	_	31	det	_	_
31	friends	_	NNS	NNS	_	27	dobj	_	_
32	at	_	IN	IN	_	27	prep	_	_
33	uni	_	NN	NN	_	32	pobj	_	_
34	.	_	.	.	_	2	punct	_	_

Oracle:
(a2 / and, op, b / become-01)
(a2 / and, op, d / dull-01)
(b / become-01, ARG1, i / i)
(b / become-01, ARG2, p / person)
(d / dull-01, ARG0, i / i)
(d / dull-01, ARG1, p2 / personality)
(d / dull-01, manner, w2 / way)
(d / dull-01, mod, d2 / down)
(d / dull-01, purpose, t3 / try-01)
(f / friend, quant, s / some)
(m3 / make-02, ARG0, i / i)
(m3 / make-02, ARG1, f / friend)
(p / person, mod, w / weak)
(p2 / personality, poss, i / i)
(t / temporal-quantity, mod, l / last)
(t / temporal-quantity, unit, y / year)
(t3 / try-01, ARG0, i / i)
(t3 / try-01, ARG1, m3 / make-02)
(t4 / think-01, ARG0, i / i)
(t4 / think-01, ARG1, a2 / and)

Input(Some(Graph((think-01 :ARG1 (and :op (dull-01 :manner way :purpose (try-01 :ARG1 (make-02 :location university :ARG1 (friend :quant some) :ARG0 i) :ARG0 i) :mod down :ARG1 (personality :poss i) :ARG0 i :time between) :op (become-01 :time (between :op (temporal-quantity :mod last :unit year :quant 1) :op (temporal-quantity :quant 2 :unit year :mod last)) :ARG2 (person :mod (weak :degree (more :degree much))) :ARG1 i)) :ARG0 i),ArrayBuffer(Span(1,2,List(0),think,think-01,false), Span(15,16,List(1),and,and,false), Span(20,21,List(2),dulled,dull-01,false), Span(18,19,List(3),way,way,false), Span(26,27,List(4),try,try-01,false), Span(28,29,List(5),make,make-02,false), Span(30,31,List(6),friends,friend,false), Span(29,30,List(7),some,some,false), Span(21,22,List(8),down,down,false), Span(23,24,List(9),personality,personality,false), Span(10,11,List(10),become,become-01,false), Span(5,6,List(11, 12),year,(temporal-quantity :unit year),false), Span(4,5,List(13),last,last,false), Span(7,8,List(14),2,2,false), Span(14,15,List(15),person,person,false), Span(13,14,List(16),weaker,weak,false), Span(12,13,List(17),much,much,false), Span(0,1,List(18),I,i,false)),Map(2 -> dull-01, 5 -> make-02, 12 -> year, 15 -> person, 8 -> down, 18 -> i, 7 -> some, 17 -> much, 1 -> and, 4 -> try-01, 11 -> temporal-quantity, 14 -> 2, 6 -> friend, 9 -> personality, 0 -> think-01, 16 -> weak, 10 -> become-01, 3 -> way, 13 -> last),Map(m3 -> make-02, w -> weak, t4 -> think-01, 2 -> 2, t -> temporal-quantity, b -> become-01, m2 -> much, p2 -> personality, s -> some, d -> dull-01, t3 -> try-01, p -> person, y -> year, d2 -> down, w2 -> way, i -> i, a2 -> and, l -> last, f -> friend))),[Ljava.lang.String;@7dc19a70,Annotation([Ljava.lang.String;@508dec2b,[Ljava.lang.String;@1e4f4a5c,[Ljava.lang.String;@37313c65),Annotation([Ljava.lang.String;@465232e9,[Ljava.lang.String;@798162bc,[Ledu.cmu.lti.nlp.amr.Dependency;@1df8da7a),Annotation([Ljava.lang.String;@23941fb4,[Ljava.lang.String;@7486b455,[Ljava.lang.String;@660acfb),Annotation([Ljava.lang.String;@5d908d47,[Ljava.lang.String;@5efa40fe,[Ledu.cmu.lti.nlp.amr.Entity;@1f9f6368))
AMR:
(a2 / and, op, b / become-01)
(a2 / and, op, d / dull-01)
(b / become-01, ARG1, w / weak)
(b / become-01, ARG2, p / person)
(b / become-01, ARG6, m2 / much)
(d / dull-01, ARG0, w2 / way)
(d / dull-01, ARG1, p2 / personality)
(d / dull-01, ARG6, d2 / down)
(f / friend, quant, s / some)
(m3 / make-02, ARG0, 2 / 2)
(m3 / make-02, ARG1, f / friend)
(t / temporal-quantity, mod, l / last)
(t / temporal-quantity, unit, y / year)
(t3 / try-01, ARG0, w2 / way)
(t3 / try-01, ARG1, f / friend)
(t4 / think-01, ARG0, i / i)
(t4 / think-01, condition, b / become-01)
(t4 / think-01, time, l / last)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.3
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 1,408,283 microseconds
Sentence: But being overly-nice to people has lead them to believe that they can say or do whatever the hell they want to me...

Oracle Span 1:  believe => believe-01
Oracle Span 2:  But => contrast-01
Oracle Span 3:  can => possible
Oracle Span 4:  do => do-02
Oracle Span 5:  hell => hell
Oracle Span 6:  lead => lead-03
Oracle Span 7:  nice => nice-41
Oracle Span 8:  or => or
Oracle Span 9:  overly => over
Oracle Span 10:  say => say-01
Oracle Span 11:  want => want-01
Oracle Span 12:  whatever => whatever
NER Entity: (country :name (name :op "me" :op "..."))
Spans:
Span 11-12:  believe => believe-01
Span 0-1:  But => contrast-01
Span 14-15:  can => possible
Span 17-18:  do => do-02
Span 20-21:  hell => hell
Span 8-9:  lead => lead-03
Span 4-5:  nice => nice-41
Span 16-17:  or => or
Span 2-3:  overly => over
Span 15-16:  say => say-01
Span 22-23:  want => want-01
Span 18-19:  whatever => whatever

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 11-12:  believe => believe-01
Oracle Span 0-1:  But => contrast-01
Oracle Span 14-15:  can => possible
Oracle Span 17-18:  do => do-02
Oracle Span 20-21:  hell => hell
Oracle Span 8-9:  lead => lead-03
Oracle Span 4-5:  nice => nice-41
Oracle Span 16-17:  or => or
Oracle Span 2-3:  overly => over
Oracle Span 15-16:  say => say-01
Oracle Span 22-23:  want => want-01
Oracle Span 18-19:  whatever => whatever

Dependencies:
1	But	_	CC	CC	_	7	cc	_	_
2	being	_	VBG	VBG	_	3	cop	_	_
3	overly-nice	_	JJ	JJ	_	7	csubj	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	people	_	NNS	NNS	_	4	pobj	_	_
6	has	_	VBZ	VBZ	_	7	aux	_	_
7	lead	_	VB	VB	_	0	root	_	_
8	them	_	PRP	PRP	_	7	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	believe	_	VB	VB	_	7	xcomp	_	_
11	that	_	IN	IN	_	14	mark	_	_
12	they	_	PRP	PRP	_	14	nsubj	_	_
13	can	_	MD	MD	_	14	aux	_	_
14	say	_	VB	VB	_	10	ccomp	_	_
15	or	_	CC	CC	_	14	cc	_	_
16	do	_	VB	VB	_	14	conj	_	_
17	whatever	_	NNP	NNP	_	14	dobj	_	_
18	the	_	DT	DT	_	19	det	_	_
19	hell	_	NN	NN	_	17	dep	_	_
20	they	_	PRP	PRP	_	21	nsubj	_	_
21	want	_	VBP	VBP	_	17	rcmod	_	_
22	to	_	TO	TO	_	21	prep	_	_
23	me	_	PRP	PRP	_	22	pobj	_	_
24	...	_	.	.	_	7	punct	_	_

Oracle:
(b / believe-01, ARG1, p2 / possible)
(c / contrast-01, ARG2, l / lead-03)
(d / do-02, ARG1, w / whatever)
(l / lead-03, ARG0, n / nice-41)
(l / lead-03, ARG2, b / believe-01)
(n / nice-41, mod, o / over)
(o2 / or, op, d / do-02)
(o2 / or, op, s / say-01)
(p2 / possible, domain, o2 / or)
(s / say-01, ARG1, w / whatever)
(w / whatever, mod, h / hell)
(w2 / want-01, ARG1, w / whatever)

Input(Some(Graph((contrast-01 :ARG2 (lead-03 :ARG2 (believe-01 :ARG1 (possible :domain (or :op (do-02 :ARG0 person :ARG1 whatever :ARG2 i) :op (say-01 :ARG2 i :ARG1 (whatever :mod hell :ARG1-of (want-01 :ARG0 person)) :ARG0 person))) :ARG0 person) :ARG0 (nice-41 :mod over :ARG2 person) :ARG1 person)),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(8,9,List(1),lead,lead-03,false), Span(11,12,List(2),believe,believe-01,false), Span(14,15,List(3),can,possible,false), Span(16,17,List(4),or,or,false), Span(17,18,List(5),do,do-02,false), Span(15,16,List(6),say,say-01,false), Span(18,19,List(7),whatever,whatever,false), Span(20,21,List(8),hell,hell,false), Span(22,23,List(9),want,want-01,false), Span(4,5,List(10),nice,nice-41,false), Span(2,3,List(11),overly,over,false)),Map(2 -> believe-01, 5 -> do-02, 8 -> hell, 7 -> whatever, 1 -> lead-03, 4 -> or, 11 -> over, 6 -> say-01, 9 -> want-01, 0 -> contrast-01, 10 -> nice-41, 3 -> possible),Map(n -> nice-41, w -> whatever, h -> hell, b -> believe-01, p2 -> possible, s -> say-01, d -> do-02, o2 -> or, w2 -> want-01, c -> contrast-01, l -> lead-03, o -> over))),[Ljava.lang.String;@1c9b0314,Annotation([Ljava.lang.String;@45385f75,[Ljava.lang.String;@49c90a9c,[Ljava.lang.String;@2d29b4ee),Annotation([Ljava.lang.String;@69ee81fc,[Ljava.lang.String;@6e2aa843,[Ledu.cmu.lti.nlp.amr.Dependency;@6f36c2f0),Annotation([Ljava.lang.String;@f58853c,[Ljava.lang.String;@1224144a,[Ljava.lang.String;@29f7cefd),Annotation([Ljava.lang.String;@700fb871,[Ljava.lang.String;@3b35a229,[Ledu.cmu.lti.nlp.amr.Entity;@9816741))
AMR:
(b / believe-01, ARG1, p2 / possible)
(c / contrast-01, ARG1, l / lead-03)
(d / do-02, ARG1, w / whatever)
(l / lead-03, ARG1, n / nice-41)
(l / lead-03, ARG2, b / believe-01)
(n / nice-41, ARG1, o / over)
(o2 / or, op, d / do-02)
(p2 / possible, domain, o2 / or)
(s / say-01, ARG1, o2 / or)
(w2 / want-01, ARG0, w / whatever)
(w2 / want-01, ARG1, h / hell)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
Decoded in 370,358 microseconds
Sentence: they show absolutely no respect.

Oracle Span 1:  absolutely => absolute
Oracle Span 2:  no => -
Oracle Span 3:  respect => respect-01
Oracle Span 4:  show => show-01
Oracle Span 5:  they => they
Spans:
Span 2-3:  absolutely => absolute
Span 3-4:  no => -
Span 4-5:  respect => respect-01
Span 1-2:  show => show-01
Span 0-1:  they => they

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 2-3:  absolutely => absolute
Oracle Span 3-4:  no => -
Oracle Span 4-5:  respect => respect-01
Oracle Span 1-2:  show => show-01
Oracle Span 0-1:  they => they

Dependencies:
1	they	_	PRP	PRP	_	2	nsubj	_	_
2	show	_	VBP	VBP	_	0	root	_	_
3	absolutely	_	RB	RB	_	5	advmod	_	_
4	no	_	DT	DT	_	5	neg	_	_
5	respect	_	NN	NN	_	2	dobj	_	_
6	.	_	.	.	_	2	punct	_	_

Oracle:
(r / respect-01, ARG0, t / they)
(r / respect-01, mod, a / absolute)
(r / respect-01, polarity, - / -)
(s / show-01, ARG0, t / they)
(s / show-01, ARG1, r / respect-01)

Input(Some(Graph((show-01 :ARG1 (respect-01 :mod absolute :polarity - :ARG0 they) :ARG0 they),ArrayBuffer(Span(3,4,List(0),no,-,false), Span(1,2,List(1),show,show-01,false), Span(4,5,List(2),respect,respect-01,false), Span(0,1,List(3),they,they,false), Span(2,3,List(4),absolutely,absolute,false)),Map(2 -> respect-01, 1 -> show-01, 4 -> absolute, 0 -> -, 3 -> they),Map(t -> they, s -> show-01, a -> absolute, r -> respect-01, - -> -))),[Ljava.lang.String;@1e16c0aa,Annotation([Ljava.lang.String;@13d73f29,[Ljava.lang.String;@565f390,[Ljava.lang.String;@7dc3712),Annotation([Ljava.lang.String;@2f67a4d3,[Ljava.lang.String;@5e3f861,[Ledu.cmu.lti.nlp.amr.Dependency;@2fb0623e),Annotation([Ljava.lang.String;@49b2a47d,[Ljava.lang.String;@5be1d0a4,[Ljava.lang.String;@415b0b49),Annotation([Ljava.lang.String;@6d5620ce,[Ljava.lang.String;@311bf055,[Ledu.cmu.lti.nlp.amr.Entity;@642a7222))
AMR:
(a / absolute, calendar, - / -)
(r / respect-01, ARG1, - / -)
(s / show-01, ARG0, t / they)
(s / show-01, ARG1, r / respect-01)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 31,557 microseconds
Sentence: e.g. i'll say hello to someone from uni and they'll ignore me, but 30 minutes later they'll decide they want my help with some work... and i'll give it to them.

Oracle Span 1:  30 => 30
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  but => contrast-01
Oracle Span 5:  decide => decide-01
Oracle Span 6:  give => give-01
Oracle Span 7:  hello => hello
Oracle Span 8:  help => help-01
Oracle Span 9:  i => i
Oracle Span 10:  ignore => ignore-01
Oracle Span 11:  later => late
Oracle Span 12:  minutes => (temporal-quantity :unit minute)
Oracle Span 13:  say => say-01
Oracle Span 14:  some => some
Oracle Span 15:  someone => someone
Oracle Span 16:  want => want-01
Oracle Span 17:  work => work-01
Spans:
Span 16-17:  30 => 30
Span 9-10:  and => and
Span 30-31:  and => and
Span 15-16:  but => contrast-01
Span 21-22:  decide => decide-01
Span 33-34:  give => give-01
Span 4-5:  hello => hello
Span 25-26:  help => help-01
Span 1-2:  i => i
Span 12-13:  ignore => ignore-01
Span 18-19:  later => late
Span 17-18:  minutes => (temporal-quantity :unit minute)
Span 3-4:  say => say-01
Span 27-28:  some => some
Span 6-7:  someone => someone
Span 23-24:  want => want-01
Span 28-29:  work => work-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 16-17:  30 => 30
Oracle Span 9-10:  and => and
Oracle Span 30-31:  and => and
Oracle Span 15-16:  but => contrast-01
Oracle Span 21-22:  decide => decide-01
Oracle Span 33-34:  give => give-01
Oracle Span 4-5:  hello => hello
Oracle Span 25-26:  help => help-01
Oracle Span 1-2:  i => i
Oracle Span 12-13:  ignore => ignore-01
Oracle Span 18-19:  later => late
Oracle Span 17-18:  minutes => (temporal-quantity :unit minute)
Oracle Span 3-4:  say => say-01
Oracle Span 27-28:  some => some
Oracle Span 6-7:  someone => someone
Oracle Span 23-24:  want => want-01
Oracle Span 28-29:  work => work-01

Dependencies:
1	e.g.	_	NNP	NNP	_	2	nn	_	_
2	i	_	NNP	NNP	_	4	nsubj	_	_
3	'll	_	MD	MD	_	4	aux	_	_
4	say	_	VB	VB	_	0	root	_	_
5	hello	_	UH	UH	_	4	dobj	_	_
6	to	_	TO	TO	_	4	prep	_	_
7	someone	_	NN	NN	_	6	pobj	_	_
8	from	_	IN	IN	_	4	prep	_	_
9	uni	_	NN	NN	_	8	pobj	_	_
10	and	_	CC	CC	_	4	cc	_	_
11	they	_	PRP	PRP	_	13	nsubj	_	_
12	'll	_	MD	MD	_	13	aux	_	_
13	ignore	_	VB	VB	_	4	conj	_	_
14	me	_	PRP	PRP	_	13	dobj	_	_
15	,	_	,	,	_	4	punct	_	_
16	but	_	CC	CC	_	4	cc	_	_
17	30	_	CD	CD	_	18	num	_	_
18	minutes	_	NNS	NNS	_	22	tmod	_	_
19	later	_	RB	RB	_	18	advmod	_	_
20	they	_	PRP	PRP	_	22	nsubj	_	_
21	'll	_	MD	MD	_	22	aux	_	_
22	decide	_	VB	VB	_	4	conj	_	_
23	they	_	PRP	PRP	_	24	nsubj	_	_
24	want	_	VBP	VBP	_	22	dep	_	_
25	my	_	PRP$	PRP$	_	26	poss	_	_
26	help	_	NN	NN	_	24	dobj	_	_
27	with	_	IN	IN	_	24	prep	_	_
28	some	_	DT	DT	_	29	det	_	_
29	work	_	NN	NN	_	27	pobj	_	_
30	...	_	:	:	_	24	punct	_	_
31	and	_	CC	CC	_	24	cc	_	_
32	i	_	FW	FW	_	34	nsubj	_	_
33	'll	_	MD	MD	_	34	aux	_	_
34	give	_	VB	VB	_	24	conj	_	_
35	it	_	PRP	PRP	_	34	dobj	_	_
36	to	_	TO	TO	_	34	prep	_	_
37	them	_	PRP	PRP	_	36	pobj	_	_
38	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, i2 / ignore-01)
(a / and, op, s / say-01)
(a2 / and, op, d / decide-01)
(a2 / and, op, g / give-01)
(c / contrast-01, ARG1, a / and)
(c / contrast-01, ARG2, a2 / and)
(d / decide-01, ARG0, s2 / someone)
(d / decide-01, ARG1, w / want-01)
(d / decide-01, time, l / late)
(g / give-01, ARG0, i / i)
(g / give-01, ARG1, h2 / help-01)
(g / give-01, ARG2, s2 / someone)
(h2 / help-01, ARG0, i / i)
(h2 / help-01, ARG1, w2 / work-01)
(h2 / help-01, ARG2, s2 / someone)
(i2 / ignore-01, ARG0, s2 / someone)
(i2 / ignore-01, ARG1, i / i)
(l / late, op, t / temporal-quantity)
(s / say-01, ARG0, i / i)
(s / say-01, ARG1, h / hello)
(s / say-01, ARG2, s2 / someone)
(t / temporal-quantity, quant, 3 / 30)
(t / temporal-quantity, unit, m2 / minute)
(w / want-01, ARG0, s2 / someone)
(w / want-01, ARG1, h2 / help-01)
(w2 / work-01, mod, s3 / some)

Input(Some(Graph((exemplify-01 :ARG0 (contrast-01 :ARG2 (and :op (give-01 :ARG0 i :ARG1 help-01 :ARG2 someone) :op (decide-01 :time (late :degree more :op (temporal-quantity :unit minute :quant 30)) :ARG1 (want-01 :ARG1 (help-01 :ARG1 (work-01 :mod some) :ARG0 i :ARG2 someone) :ARG0 someone) :ARG0 someone)) :ARG1 (and :op (ignore-01 :ARG0 someone :ARG1 i) :op (say-01 :ARG2 (someone :source university) :ARG1 hello :ARG0 i)))),ArrayBuffer(Span(15,16,List(0),but,contrast-01,false), Span(9,10,List(1),and,and,false), Span(33,34,List(2),give,give-01,false), Span(21,22,List(3),decide,decide-01,false), Span(18,19,List(4),later,late,false), Span(16,17,List(5),30,30,false), Span(17,18,List(6, 7),minutes,(temporal-quantity :unit minute),false), Span(23,24,List(8),want,want-01,false), Span(25,26,List(9),help,help-01,false), Span(28,29,List(10),work,work-01,false), Span(27,28,List(11),some,some,false), Span(30,31,List(12),and,and,false), Span(12,13,List(13),ignore,ignore-01,false), Span(3,4,List(14),say,say-01,false), Span(6,7,List(15),someone,someone,false), Span(4,5,List(16),hello,hello,false), Span(1,2,List(17),i,i,false)),Map(2 -> give-01, 5 -> 30, 12 -> and, 15 -> someone, 8 -> want-01, 7 -> minute, 17 -> i, 1 -> and, 4 -> late, 11 -> some, 14 -> say-01, 6 -> temporal-quantity, 9 -> help-01, 0 -> contrast-01, 16 -> hello, 10 -> work-01, 3 -> decide-01, 13 -> ignore-01),Map(w -> want-01, h -> hello, s2 -> someone, h2 -> help-01, t -> temporal-quantity, m2 -> minute, s -> say-01, d -> decide-01, g -> give-01, a -> and, i2 -> ignore-01, w2 -> work-01, i -> i, a2 -> and, s3 -> some, c -> contrast-01, l -> late, 3 -> 30))),[Ljava.lang.String;@7d322cad,Annotation([Ljava.lang.String;@21be3395,[Ljava.lang.String;@4f49f6af,[Ljava.lang.String;@78452606),Annotation([Ljava.lang.String;@147e2ae7,[Ljava.lang.String;@448c8166,[Ledu.cmu.lti.nlp.amr.Dependency;@4470fbd6),Annotation([Ljava.lang.String;@15d49048,[Ljava.lang.String;@7098b907,[Ljava.lang.String;@503f91c3),Annotation([Ljava.lang.String;@13526e59,[Ljava.lang.String;@2235eaab,[Ledu.cmu.lti.nlp.amr.Entity;@17503f6b))
AMR:
(a / and, op, g / give-01)
(a / and, op, w / want-01)
(a / and, op, w2 / work-01)
(a2 / and, op, i2 / ignore-01)
(c / contrast-01, ARG1, s / say-01)
(c / contrast-01, ARG2, d / decide-01)
(d / decide-01, ARG1, w / want-01)
(d / decide-01, ARG6, l / late)
(g / give-01, ARG1, 3 / 30)
(i2 / ignore-01, ARG1, i / i)
(s / say-01, ARG1, a2 / and)
(s / say-01, ARG6, h / hello)
(t / temporal-quantity, unit, m2 / minute)
(w / want-01, ARG1, h2 / help-01)
(w / want-01, ARG6, t / temporal-quantity)
(w2 / work-01, ARG1, s2 / someone)
(w2 / work-01, quant, s3 / some)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
Decoded in 818,835 microseconds
Sentence: It's causing alot of anger and distress in my life and is really starting to effect my concentration in uni.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  anger => anger
Oracle Span 4:  causing => cause-01
Oracle Span 5:  concentration => concentration
Oracle Span 6:  distress => distress-01
Oracle Span 7:  It => it
Oracle Span 8:  life => life
Oracle Span 9:  really => really
Oracle Span 10:  starting => start-01
Oracle Span 11:  uni => i
Spans:
Span 6-7:  and => and
Span 11-12:  and => and
Span 5-6:  anger => anger
Span 2-3:  causing => cause-01
Span 18-19:  concentration => concentration
Span 7-8:  distress => distress-01
Span 0-1:  It => it
Span 10-11:  life => life
Span 13-14:  really => really
Span 14-15:  starting => start-01
Span 20-21:  uni => i

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 11-12:  and => and
Oracle Span 5-6:  anger => anger
Oracle Span 2-3:  causing => cause-01
Oracle Span 18-19:  concentration => concentration
Oracle Span 7-8:  distress => distress-01
Oracle Span 0-1:  It => it
Oracle Span 10-11:  life => life
Oracle Span 13-14:  really => really
Oracle Span 14-15:  starting => start-01
Oracle Span 20-21:  uni => i

Dependencies:
1	It	_	PRP	PRP	_	3	nsubj	_	_
2	's	_	VBZ	VBZ	_	3	aux	_	_
3	causing	_	VBG	VBG	_	0	root	_	_
4	alot	_	NN	NN	_	3	dobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	anger	_	NN	NN	_	5	pobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	distress	_	NN	NN	_	6	conj	_	_
9	in	_	IN	IN	_	3	prep	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	life	_	NN	NN	_	9	pobj	_	_
12	and	_	CC	CC	_	3	cc	_	_
13	is	_	VBZ	VBZ	_	15	aux	_	_
14	really	_	RB	RB	_	15	advmod	_	_
15	starting	_	VBG	VBG	_	3	conj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	effect	_	VB	VB	_	15	xcomp	_	_
18	my	_	PRP$	PRP$	_	19	poss	_	_
19	concentration	_	NN	NN	_	17	dobj	_	_
20	in	_	IN	IN	_	17	prep	_	_
21	uni	_	NN	NN	_	20	pobj	_	_
22	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, c / cause-01)
(a / and, op, s / start-01)
(a2 / and, op, a3 / anger)
(a2 / and, op, d / distress-01)
(a3 / anger, prep-in, l / life)
(c / cause-01, ARG0, i / it)
(c / cause-01, ARG1, a2 / and)
(c2 / concentration, poss, i2 / i)
(d / distress-01, prep-in, l / life)
(l / life, poss, i2 / i)
(s / start-01, ARG0, i / it)
(s / start-01, mod, r / really)

Input(Some(Graph((and :op (start-01 :mod really :ARG1 (affect-01 :ARG1 (concentration :location university :poss i) :ARG0 it) :ARG0 it) :op (cause-01 :ARG1 (and :op (distress-01 :prep-in life) :op (anger :quant lot :prep-in (life :poss i))) :ARG0 it)),ArrayBuffer(Span(6,7,List(0),and,and,false), Span(14,15,List(1),starting,start-01,false), Span(13,14,List(2),really,really,false), Span(18,19,List(3),concentration,concentration,false), Span(2,3,List(4),causing,cause-01,false), Span(11,12,List(5),and,and,false), Span(7,8,List(6),distress,distress-01,false), Span(5,6,List(7),anger,anger,false), Span(10,11,List(8),life,life,false), Span(20,21,List(9),uni,i,false), Span(0,1,List(10),It,it,false)),Map(2 -> really, 5 -> and, 8 -> life, 7 -> anger, 1 -> start-01, 4 -> cause-01, 6 -> distress-01, 9 -> i, 0 -> and, 10 -> it, 3 -> concentration),Map(a3 -> anger, s -> start-01, d -> distress-01, a -> and, i2 -> i, i -> it, a2 -> and, r -> really, c -> cause-01, l -> life, c2 -> concentration))),[Ljava.lang.String;@3bcd05cb,Annotation([Ljava.lang.String;@3b6d844d,[Ljava.lang.String;@36804139,[Ljava.lang.String;@20bd8be5),Annotation([Ljava.lang.String;@730d2164,[Ljava.lang.String;@24959ca4,[Ledu.cmu.lti.nlp.amr.Dependency;@10289886),Annotation([Ljava.lang.String;@5c86dbc5,[Ljava.lang.String;@461ad730,[Ljava.lang.String;@4ee203eb),Annotation([Ljava.lang.String;@1a5a4e19,[Ljava.lang.String;@7068e664,[Ledu.cmu.lti.nlp.amr.Entity;@60db1c0e))
AMR:
(a / and, op, a3 / anger)
(a / and, op, d / distress-01)
(a2 / and, op, c / cause-01)
(a2 / and, op, s / start-01)
(c / cause-01, ARG0, i / it)
(c / cause-01, ARG1, a / and)
(d / distress-01, ARG0, l / life)
(d / distress-01, ARG1, i2 / i)
(s / start-01, ARG1, c2 / concentration)
(s / start-01, mod, r / really)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 343,994 microseconds
Sentence: has anyone got any experience in handling this sort of thing or how to go about gaining some respect again?

Oracle Span 1:  again => again
Oracle Span 2:  any => any
Oracle Span 3:  anyone => anyone
Oracle Span 4:  experience => experience-01
Oracle Span 5:  gaining => gain-02
Oracle Span 6:  go => go-06
Oracle Span 7:  got => get-02
Oracle Span 8:  handling => handle-01
Oracle Span 9:  or => or
Oracle Span 10:  respect => respect-01
Oracle Span 11:  some => some
Oracle Span 12:  sort => sort
Oracle Span 13:  thing => thing
Oracle Span 14:  this => this
Spans:
Span 19-20:  again => again
Span 3-4:  any => any
Span 1-2:  anyone => anyone
Span 4-5:  experience => experience-01
Span 16-17:  gaining => gain-02
Span 14-15:  go => go-06
Span 2-3:  got => get-02
Span 6-7:  handling => handle-01
Span 11-12:  or => or
Span 18-19:  respect => respect-01
Span 17-18:  some => some
Span 8-9:  sort => sort
Span 10-11:  thing => thing
Span 7-8:  this => this

Langrangian relaxation converged after 76 iterations. Delta = 0.0
Oracle Span 19-20:  again => again
Oracle Span 3-4:  any => any
Oracle Span 1-2:  anyone => anyone
Oracle Span 4-5:  experience => experience-01
Oracle Span 16-17:  gaining => gain-02
Oracle Span 14-15:  go => go-06
Oracle Span 2-3:  got => get-02
Oracle Span 6-7:  handling => handle-01
Oracle Span 11-12:  or => or
Oracle Span 18-19:  respect => respect-01
Oracle Span 17-18:  some => some
Oracle Span 8-9:  sort => sort
Oracle Span 10-11:  thing => thing
Oracle Span 7-8:  this => this

Dependencies:
1	has	_	VBZ	VBZ	_	3	aux	_	_
2	anyone	_	NN	NN	_	3	nsubj	_	_
3	got	_	VBN	VBN	_	0	root	_	_
4	any	_	DT	DT	_	5	det	_	_
5	experience	_	NN	NN	_	3	dobj	_	_
6	in	_	IN	IN	_	3	prep	_	_
7	handling	_	VBG	VBG	_	6	pcomp	_	_
8	this	_	DT	DT	_	9	det	_	_
9	sort	_	NN	NN	_	7	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	thing	_	NN	NN	_	10	pobj	_	_
12	or	_	CC	CC	_	9	cc	_	_
13	how	_	WRB	WRB	_	15	advmod	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	go	_	VB	VB	_	9	conj	_	_
16	about	_	IN	IN	_	15	prep	_	_
17	gaining	_	VBG	VBG	_	16	pcomp	_	_
18	some	_	DT	DT	_	19	det	_	_
19	respect	_	NN	NN	_	17	dobj	_	_
20	again	_	RB	RB	_	17	advmod	_	_
21	?	_	.	.	_	3	punct	_	_

Oracle:
(e2 / experience-01, ARG0, a2 / anyone)
(e2 / experience-01, ARG1, o / or)
(e2 / experience-01, mod, a4 / any)
(g2 / get-02, ARG0, a2 / anyone)
(g2 / get-02, ARG1, e2 / experience-01)
(g3 / go-06, ARG1, g4 / gain-02)
(g3 / go-06, manner, t3 / thing)
(g4 / gain-02, ARG1, r / respect-01)
(g4 / gain-02, mod, a3 / again)
(h / handle-01, ARG0, a2 / anyone)
(o / or, op, h / handle-01)
(o / or, op, t3 / thing)
(r / respect-01, mod, s2 / some)
(s / sort, mod, t2 / this)

Input(Some(Graph((get-02 :ARG1 (experience-01 :mod any :ARG1 (or :op (thing :manner-of (go-06 :ARG1 (gain-02 :mod again :ARG1 (respect-01 :mod some)))) :op (handle-01 :ARG1 (thing :mod (sort :mod this)) :ARG0 anyone)) :ARG0 anyone) :ARG0 anyone :mode interrogative),ArrayBuffer(Span(2,3,List(0),got,get-02,false), Span(4,5,List(1),experience,experience-01,false), Span(3,4,List(2),any,any,false), Span(11,12,List(3),or,or,false), Span(10,11,List(4),thing,thing,false), Span(14,15,List(5),go,go-06,false), Span(16,17,List(6),gaining,gain-02,false), Span(19,20,List(7),again,again,false), Span(18,19,List(8),respect,respect-01,false), Span(17,18,List(9),some,some,false), Span(6,7,List(10),handling,handle-01,false), Span(8,9,List(11),sort,sort,false), Span(7,8,List(12),this,this,false), Span(1,2,List(13),anyone,anyone,false)),Map(2 -> any, 5 -> go-06, 12 -> this, 8 -> respect-01, 7 -> again, 1 -> experience-01, 4 -> thing, 11 -> sort, 6 -> gain-02, 9 -> some, 0 -> get-02, 10 -> handle-01, 3 -> or, 13 -> anyone),Map(h -> handle-01, g3 -> go-06, s2 -> some, e2 -> experience-01, a3 -> again, s -> sort, t3 -> thing, g2 -> get-02, t2 -> this, a2 -> anyone, r -> respect-01, o -> or, g4 -> gain-02, a4 -> any))),[Ljava.lang.String;@3e78b6a5,Annotation([Ljava.lang.String;@769a1df5,[Ljava.lang.String;@41f69e84,[Ljava.lang.String;@7975d1d8),Annotation([Ljava.lang.String;@2438dcd,[Ljava.lang.String;@24105dc5,[Ledu.cmu.lti.nlp.amr.Dependency;@5167f57d),Annotation([Ljava.lang.String;@64b0598,[Ljava.lang.String;@18f8cd79,[Ljava.lang.String;@3e2055d6),Annotation([Ljava.lang.String;@50029372,[Ljava.lang.String;@e3b3b2f,[Ledu.cmu.lti.nlp.amr.Entity;@50f6ac94))
AMR:
(e2 / experience-01, ARG1, s2 / some)
(e2 / experience-01, mod, a4 / any)
(g2 / get-02, ARG0, a2 / anyone)
(g2 / get-02, ARG1, e2 / experience-01)
(g2 / get-02, manner, h / handle-01)
(g3 / go-06, ARG1, g4 / gain-02)
(g4 / gain-02, ARG1, r / respect-01)
(g4 / gain-02, manner, a3 / again)
(h / handle-01, ARG1, o / or)
(h / handle-01, ARG2, s / sort)
(o / or, op, g3 / go-06)
(r / respect-01, ARG1, t3 / thing)
(s / sort, mod, t2 / this)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 1,002,386 microseconds
Sentence: Just say no.

Oracle Span 1:  Just => just
Oracle Span 2:  say => say-01
Spans:
Span 0-1:  Just => just
Span 1-2:  say => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Just => just
Oracle Span 1-2:  say => say-01

Dependencies:
1	Just	_	RB	RB	_	2	advmod	_	_
2	say	_	VB	VB	_	0	root	_	_
3	no	_	RB	RB	_	2	dobj	_	_
4	.	_	.	.	_	2	punct	_	_

Oracle:
(s / say-01, mod, j / just)

Input(Some(Graph((say-01 :mod just :ARG1 no :ARG0 you),ArrayBuffer(Span(1,2,List(0),say,say-01,false), Span(0,1,List(1),Just,just,false)),Map(1 -> just, 0 -> say-01),Map(j -> just, s -> say-01))),[Ljava.lang.String;@6cc4cdb9,Annotation([Ljava.lang.String;@28194a50,[Ljava.lang.String;@7f2cfe3f,[Ljava.lang.String;@1a5b6f42),Annotation([Ljava.lang.String;@5038d0b5,[Ljava.lang.String;@32115b28,[Ledu.cmu.lti.nlp.amr.Dependency;@2ad48653),Annotation([Ljava.lang.String;@6bb4dd34,[Ljava.lang.String;@7d9f158f,[Ljava.lang.String;@45efd90f),Annotation([Ljava.lang.String;@4b8729ff,[Ljava.lang.String;@61710c6,[Ledu.cmu.lti.nlp.amr.Entity;@3214ee6))
AMR:
(s / say-01, ARG1, j / just)

WARNING: makeIds can't find span Id: 0.2
Decoded in 4,984 microseconds
Sentence: Do it gradually if it's not something you're particularly comfortable with.

Oracle Span 1:  comfortable => comfortable
Oracle Span 2:  Do => do-02
Oracle Span 3:  gradually => gradual
Oracle Span 4:  it => it
Oracle Span 5:  particularly => particular
Oracle Span 6:  you => you
Spans:
Span 11-12:  comfortable => comfortable
Span 0-1:  Do => do-02
Span 2-3:  gradually => gradual
Span 1-2:  it => it
Span 10-11:  particularly => particular
Span 8-9:  you => you

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 11-12:  comfortable => comfortable
Oracle Span 0-1:  Do => do-02
Oracle Span 2-3:  gradually => gradual
Oracle Span 1-2:  it => it
Oracle Span 10-11:  particularly => particular
Oracle Span 8-9:  you => you

Dependencies:
1	Do	_	VB	VB	_	0	root	_	_
2	it	_	PRP	PRP	_	1	dobj	_	_
3	gradually	_	RB	RB	_	1	advmod	_	_
4	if	_	IN	IN	_	8	mark	_	_
5	it	_	PRP	PRP	_	8	nsubj	_	_
6	's	_	VBZ	VBZ	_	8	cop	_	_
7	not	_	RB	RB	_	8	neg	_	_
8	something	_	NN	NN	_	1	advcl	_	_
9	you	_	PRP	PRP	_	12	nsubj	_	_
10	're	_	VBP	VBP	_	12	cop	_	_
11	particularly	_	RB	RB	_	12	advmod	_	_
12	comfortable	_	JJ	JJ	_	8	rcmod	_	_
13	with	_	IN	IN	_	12	prep	_	_
14	.	_	.	.	_	1	punct	_	_

Oracle:
(c / comfortable, domain, y / you)
(c / comfortable, mod, p / particular)
(c / comfortable, topic, i / it)
(d / do-02, ARG0, y / you)
(d / do-02, ARG1, i / it)
(d / do-02, manner, g / gradual)

Input(Some(Graph((have-condition-91 :ARG1 (do-02 :manner gradual :ARG1 it :ARG0 you) :ARG2 (comfortable :mod particular :polarity - :domain you :topic it)),ArrayBuffer(Span(0,1,List(0),Do,do-02,false), Span(1,2,List(1),it,it,false), Span(8,9,List(2),you,you,false), Span(11,12,List(3),comfortable,comfortable,false), Span(2,3,List(4),gradually,gradual,false), Span(10,11,List(5),particularly,particular,false)),Map(2 -> you, 5 -> particular, 1 -> it, 4 -> gradual, 0 -> do-02, 3 -> comfortable),Map(d -> do-02, p -> particular, g -> gradual, y -> you, i -> it, c -> comfortable))),[Ljava.lang.String;@383dc82c,Annotation([Ljava.lang.String;@4a07d605,[Ljava.lang.String;@74287ea3,[Ljava.lang.String;@7d7758be),Annotation([Ljava.lang.String;@2bdd8394,[Ljava.lang.String;@5f9edf14,[Ledu.cmu.lti.nlp.amr.Dependency;@68746f22),Annotation([Ljava.lang.String;@2f01783a,[Ljava.lang.String;@68878f6d,[Ljava.lang.String;@41488b16),Annotation([Ljava.lang.String;@a8ef162,[Ljava.lang.String;@2eea88a1,[Ledu.cmu.lti.nlp.amr.Entity;@7ac296f6))
AMR:
(c / comfortable, domain, y / you)
(c / comfortable, mod, p / particular)
(d / do-02, ARG1, c / comfortable)
(d / do-02, ARG6, i / it)
(d / do-02, manner, g / gradual)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 88,727 microseconds
Sentence: You could start with 'No, sorry but I'm busy'

Oracle Span 1:  busy => busy
Oracle Span 2:  but => contrast-01
Oracle Span 3:  could => possible
Oracle Span 4:  I => i
Oracle Span 5:  sorry => sorry-41
Oracle Span 6:  start => start-01
Oracle Span 7:  You => you
Spans:
Span 11-12:  busy => busy
Span 8-9:  but => contrast-01
Span 1-2:  could => possible
Span 9-10:  I => i
Span 7-8:  sorry => sorry-41
Span 2-3:  start => start-01
Span 0-1:  You => you

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 11-12:  busy => busy
Oracle Span 8-9:  but => contrast-01
Oracle Span 1-2:  could => possible
Oracle Span 9-10:  I => i
Oracle Span 7-8:  sorry => sorry-41
Oracle Span 2-3:  start => start-01
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	could	_	MD	MD	_	3	aux	_	_
3	start	_	VB	VB	_	0	root	_	_
4	with	_	IN	IN	_	3	prep	_	_
5	'	_	``	``	_	3	punct	_	_
6	No	_	UH	UH	_	3	discourse	_	_
7	,	_	,	,	_	3	punct	_	_
8	sorry	_	RB	RB	_	3	advmod	_	_
9	but	_	CC	CC	_	12	cc	_	_
10	I	_	PRP	PRP	_	12	nsubj	_	_
11	'm	_	VBP	VBP	_	12	cop	_	_
12	busy	_	JJ	JJ	_	3	parataxis	_	_
13	'	_	''	''	_	3	punct	_	_

Oracle:
(b / busy, domain, i / i)
(c / contrast-01, ARG1, s2 / sorry-41)
(c / contrast-01, ARG2, b / busy)
(p / possible, domain, s / start-01)
(s / start-01, ARG0, y / you)
(s / start-01, ARG2, c / contrast-01)
(s2 / sorry-41, ARG1, i / i)

Input(Some(Graph((possible :domain (start-01 :ARG2 (contrast-01 :ARG2 (busy :domain i) :ARG1 (sorry-41 :ARG2 (have-polarity-91 :ARG2 -) :ARG1 i)) :ARG0 you)),ArrayBuffer(Span(1,2,List(0),could,possible,false), Span(2,3,List(1),start,start-01,false), Span(8,9,List(2),but,contrast-01,false), Span(11,12,List(3),busy,busy,false), Span(7,8,List(4),sorry,sorry-41,false), Span(9,10,List(5),I,i,false), Span(0,1,List(6),You,you,false)),Map(2 -> contrast-01, 5 -> i, 1 -> start-01, 4 -> sorry-41, 6 -> you, 0 -> possible, 3 -> busy),Map(s2 -> sorry-41, b -> busy, s -> start-01, y -> you, p -> possible, i -> i, c -> contrast-01))),[Ljava.lang.String;@7fd7a283,Annotation([Ljava.lang.String;@22f59fa,[Ljava.lang.String;@78fa769e,[Ljava.lang.String;@16612a51),Annotation([Ljava.lang.String;@54e041a4,[Ljava.lang.String;@2c78324b,[Ledu.cmu.lti.nlp.amr.Dependency;@79defdc),Annotation([Ljava.lang.String;@18317edc,[Ljava.lang.String;@4e0ae11f,[Ljava.lang.String;@238d68ff),Annotation([Ljava.lang.String;@4b86805d,[Ljava.lang.String;@5852c06f,[Ledu.cmu.lti.nlp.amr.Entity;@4149c063))
AMR:
(b / busy, domain, i / i)
(c / contrast-01, ARG1, i / i)
(p / possible, domain, s / start-01)
(s / start-01, ARG0, y / you)
(s / start-01, ARG1, c / contrast-01)
(s2 / sorry-41, ARG1, y / you)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 59,290 microseconds
Sentence: Of course, don't go over the top with it lest you go in completely the opposite direction.

Oracle Span 1:  completely => complete
Oracle Span 2:  direction => direction
Oracle Span 3:  go => go-01
Oracle Span 4:  go => go-01
Oracle Span 5:  it => it
Oracle Span 6:  opposite => opposite-41
Oracle Span 7:  over => over
Oracle Span 8:  top => top
Oracle Span 9:  you => you
Spans:
Span 15-16:  completely => complete
Span 18-19:  direction => direction
Span 5-6:  go => go-01
Span 13-14:  go => go-01
Span 10-11:  it => it
Span 17-18:  opposite => opposite-41
Span 6-7:  over => over
Span 8-9:  top => top
Span 12-13:  you => you

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 15-16:  completely => complete
Oracle Span 18-19:  direction => direction
Oracle Span 5-6:  go => go-01
Oracle Span 13-14:  go => go-01
Oracle Span 10-11:  it => it
Oracle Span 17-18:  opposite => opposite-41
Oracle Span 6-7:  over => over
Oracle Span 8-9:  top => top
Oracle Span 12-13:  you => you

Dependencies:
1	Of	_	IN	IN	_	6	prep	_	_
2	course	_	NN	NN	_	1	pobj	_	_
3	,	_	,	,	_	6	punct	_	_
4	do	_	VBP	VBP	_	6	aux	_	_
5	n't	_	RB	RB	_	6	neg	_	_
6	go	_	VB	VB	_	0	root	_	_
7	over	_	RP	RP	_	6	prt	_	_
8	the	_	DT	DT	_	9	det	_	_
9	top	_	NN	NN	_	6	dobj	_	_
10	with	_	IN	IN	_	9	prep	_	_
11	it	_	PRP	PRP	_	10	pobj	_	_
12	lest	_	IN	IN	_	14	mark	_	_
13	you	_	PRP	PRP	_	14	nsubj	_	_
14	go	_	VBP	VBP	_	6	advcl	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	completely	_	RB	RB	_	19	advmod	_	_
17	the	_	DT	DT	_	19	det	_	_
18	opposite	_	JJ	JJ	_	19	amod	_	_
19	direction	_	NN	NN	_	15	pobj	_	_
20	.	_	.	.	_	6	punct	_	_

Oracle:
(g / go-01, ARG1, y / you)
(g / go-01, ARG2, t / top)
(g / go-01, prep-with, i / it)
(g / go-01, purpose, g2 / go-01)
(g2 / go-01, ARG1, y / you)
(g2 / go-01, direction, d / direction)
(o2 / opposite-41, ARG1, d / direction)
(o2 / opposite-41, degree, c / complete)
(t / top, mod, o / over)

Input(Some(Graph((go-01 :purpose (go-01 :direction (direction :ARG1-of (opposite-41 :degree complete)) :polarity - :ARG1 you) :mod of-course :prep-with it :ARG2 (top :mod over) :ARG1 you :polarity -),ArrayBuffer(Span(5,6,List(0),go,go-01,false), Span(13,14,List(1),go,go-01,false), Span(18,19,List(2),direction,direction,false), Span(17,18,List(3),opposite,opposite-41,false), Span(10,11,List(4),it,it,false), Span(8,9,List(5),top,top,false), Span(6,7,List(6),over,over,false), Span(12,13,List(7),you,you,false), Span(15,16,List(8),completely,complete,false)),Map(2 -> direction, 5 -> top, 8 -> complete, 7 -> you, 1 -> go-01, 4 -> it, 6 -> over, 0 -> go-01, 3 -> opposite-41),Map(t -> top, d -> direction, y -> you, g2 -> go-01, g -> go-01, o2 -> opposite-41, i -> it, c -> complete, o -> over))),[Ljava.lang.String;@9cb8225,Annotation([Ljava.lang.String;@76b07f29,[Ljava.lang.String;@38af9828,[Ljava.lang.String;@376a0d86),Annotation([Ljava.lang.String;@62656be4,[Ljava.lang.String;@17d919b6,[Ledu.cmu.lti.nlp.amr.Dependency;@53f3bdbd),Annotation([Ljava.lang.String;@34129c78,[Ljava.lang.String;@7d61eb55,[Ljava.lang.String;@222a59e6),Annotation([Ljava.lang.String;@6c7a164b,[Ljava.lang.String;@4c2bb6e0,[Ledu.cmu.lti.nlp.amr.Entity;@3e62d773))
AMR:
(g / go-01, ARG1, t / top)
(g2 / go-01, ARG0, y / you)
(g2 / go-01, ARG1, g / go-01)
(g2 / go-01, ARG2, d / direction)
(i / it, calendar, t / top)
(o / over, op, t / top)
(o2 / opposite-41, ARG1, d / direction)
(o2 / opposite-41, ARG6, c / complete)

WARNING: makeIds can't find span Id: 0.5
WARNING: makeIds can't find span Id: 0.5.1
WARNING: makeIds can't find span Id: 0.5.1.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.5.1.0.0
Decoded in 198,128 microseconds
Sentence: If, in your mind, you're thinking no - say it.

Oracle Span 1:  mind => mind
Oracle Span 2:  no => no
Oracle Span 3:  say => say-01
Oracle Span 4:  thinking => think-01
Oracle Span 5:  you => you
Spans:
Span 4-5:  mind => mind
Span 9-10:  no => no
Span 11-12:  say => say-01
Span 8-9:  thinking => think-01
Span 6-7:  you => you

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 4-5:  mind => mind
Oracle Span 9-10:  no => no
Oracle Span 11-12:  say => say-01
Oracle Span 8-9:  thinking => think-01
Oracle Span 6-7:  you => you

Dependencies:
1	If	_	IN	IN	_	9	mark	_	_
2	,	_	,	,	_	9	punct	_	_
3	in	_	IN	IN	_	9	prep	_	_
4	your	_	PRP$	PRP$	_	5	poss	_	_
5	mind	_	NN	NN	_	3	pobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	you	_	PRP	PRP	_	9	nsubj	_	_
8	're	_	VBP	VBP	_	9	aux	_	_
9	thinking	_	VBG	VBG	_	12	csubj	_	_
10	no	_	DT	DT	_	11	neg	_	_
11	-	_	NN	NN	_	9	dobj	_	_
12	say	_	VBP	VBP	_	0	root	_	_
13	it	_	PRP	PRP	_	12	dobj	_	_
14	.	_	.	.	_	12	punct	_	_

Oracle:
(m / mind, poss, y2 / you)
(s / say-01, ARG1, n / no)
(t / think-01, ARG1, n / no)
(t / think-01, prep-in, m / mind)

Input(Some(Graph((have-condition-91 :ARG1 (say-01 :ARG0 you :ARG1 no) :ARG2 (think-01 :prep-in (mind :poss you) :ARG1 no :ARG0 you)),ArrayBuffer(Span(11,12,List(0),say,say-01,false), Span(8,9,List(1),thinking,think-01,false), Span(4,5,List(2),mind,mind,false), Span(6,7,List(3),you,you,false), Span(9,10,List(4),no,no,false)),Map(2 -> mind, 1 -> think-01, 4 -> no, 0 -> say-01, 3 -> you),Map(n -> no, t -> think-01, s -> say-01, m -> mind, y2 -> you))),[Ljava.lang.String;@4ef74c30,Annotation([Ljava.lang.String;@7283d3eb,[Ljava.lang.String;@638ef7ed,[Ljava.lang.String;@4bff7da0),Annotation([Ljava.lang.String;@3f1d2e23,[Ljava.lang.String;@536dbea0,[Ledu.cmu.lti.nlp.amr.Dependency;@47c81abf),Annotation([Ljava.lang.String;@776a6d9b,[Ljava.lang.String;@21d03963,[Ljava.lang.String;@1f760b47),Annotation([Ljava.lang.String;@18ece7f4,[Ljava.lang.String;@3cce57c7,[Ledu.cmu.lti.nlp.amr.Entity;@1cf56a1c))
AMR:
(s / say-01, ARG1, t / think-01)
(t / think-01, ARG0, y2 / you)
(t / think-01, ARG1, m / mind)
(t / think-01, ARG6, n / no)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 73,411 microseconds
Sentence: When they start to realise that you're not going to bend over backwards for them, they'll start respecting you more.

Oracle Span 1:  backwards => backwards
Oracle Span 2:  bend => bend-01
Oracle Span 3:  more => more
Oracle Span 4:  over => over
Oracle Span 5:  realise => realize-01
Oracle Span 6:  respecting => respect-01
Oracle Span 7:  start => start-01
Oracle Span 8:  start => start-01
Oracle Span 9:  they => they
Oracle Span 10:  you => you
Spans:
Span 13-14:  backwards => backwards
Span 11-12:  bend => bend-01
Span 22-23:  more => more
Span 12-13:  over => over
Span 4-5:  realise => realize-01
Span 20-21:  respecting => respect-01
Span 2-3:  start => start-01
Span 19-20:  start => start-01
Span 1-2:  they => they
Span 6-7:  you => you

Langrangian relaxation converged after 77 iterations. Delta = 0.0
Oracle Span 13-14:  backwards => backwards
Oracle Span 11-12:  bend => bend-01
Oracle Span 22-23:  more => more
Oracle Span 12-13:  over => over
Oracle Span 4-5:  realise => realize-01
Oracle Span 20-21:  respecting => respect-01
Oracle Span 2-3:  start => start-01
Oracle Span 19-20:  start => start-01
Oracle Span 1-2:  they => they
Oracle Span 6-7:  you => you

Dependencies:
1	When	_	WRB	WRB	_	3	advmod	_	_
2	they	_	PRP	PRP	_	3	nsubj	_	_
3	start	_	VBP	VBP	_	20	advcl	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	realise	_	VB	VB	_	3	xcomp	_	_
6	that	_	IN	IN	_	10	mark	_	_
7	you	_	PRP	PRP	_	10	nsubj	_	_
8	're	_	VBP	VBP	_	10	aux	_	_
9	not	_	RB	RB	_	10	neg	_	_
10	going	_	VBG	VBG	_	5	ccomp	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	bend	_	VB	VB	_	10	xcomp	_	_
13	over	_	RB	RB	_	14	advmod	_	_
14	backwards	_	RB	RB	_	12	advmod	_	_
15	for	_	IN	IN	_	12	prep	_	_
16	them	_	PRP	PRP	_	15	pobj	_	_
17	,	_	,	,	_	20	punct	_	_
18	they	_	PRP	PRP	_	20	nsubj	_	_
19	'll	_	MD	MD	_	20	aux	_	_
20	start	_	VB	VB	_	0	root	_	_
21	respecting	_	VBG	VBG	_	20	xcomp	_	_
22	you	_	PRP	PRP	_	23	nsubj	_	_
23	more	_	JJR	JJR	_	21	xcomp	_	_
24	.	_	.	.	_	20	punct	_	_

Oracle:
(b / bend-01, ARG1, y / you)
(b / bend-01, beneficiary, t / they)
(b / bend-01, direction, b2 / backwards)
(b / bend-01, mod, o / over)
(r / respect-01, ARG0, t / they)
(r / respect-01, ARG1, y / you)
(r / respect-01, degree, m / more)
(r2 / realize-01, ARG0, t / they)
(r2 / realize-01, ARG1, b / bend-01)
(s / start-01, ARG0, t / they)
(s / start-01, ARG1, r / respect-01)
(s / start-01, time, s2 / start-01)
(s2 / start-01, ARG0, t / they)
(s2 / start-01, ARG1, r2 / realize-01)

Input(Some(Graph((start-01 :time (start-01 :ARG1 (realize-01 :ARG1 (bend-01 :direction backwards :mod over :polarity - :ARG1 you :beneficiary they) :ARG0 they) :ARG0 they) :ARG1 (respect-01 :degree more :ARG1 you :ARG0 they) :ARG0 they),ArrayBuffer(Span(2,3,List(0),start,start-01,false), Span(19,20,List(1),start,start-01,false), Span(11,12,List(2),bend,bend-01,false), Span(13,14,List(3),backwards,backwards,false), Span(12,13,List(4),over,over,false), Span(20,21,List(5),respecting,respect-01,false), Span(22,23,List(6),more,more,false), Span(6,7,List(7),you,you,false), Span(1,2,List(8),they,they,false), Span(4,5,List(9),realise,realize-01,false)),Map(2 -> bend-01, 5 -> respect-01, 8 -> they, 7 -> you, 1 -> start-01, 4 -> over, 6 -> more, 9 -> realize-01, 0 -> start-01, 3 -> backwards),Map(t -> they, b -> bend-01, s2 -> start-01, b2 -> backwards, s -> start-01, m -> more, r2 -> realize-01, y -> you, r -> respect-01, o -> over))),[Ljava.lang.String;@33f676f6,Annotation([Ljava.lang.String;@4c5ae43b,[Ljava.lang.String;@264f218,[Ljava.lang.String;@3576ddc2),Annotation([Ljava.lang.String;@35b74c5c,[Ljava.lang.String;@2e570ded,[Ledu.cmu.lti.nlp.amr.Dependency;@b86de0d),Annotation([Ljava.lang.String;@81d9a72,[Ljava.lang.String;@747f281,[Ljava.lang.String;@1169afe1),Annotation([Ljava.lang.String;@2ca26d77,[Ljava.lang.String;@4808bc9b,[Ledu.cmu.lti.nlp.amr.Entity;@70e38ce1))
AMR:
(b / bend-01, ARG0, y / you)
(b / bend-01, ARG1, o / over)
(b / bend-01, degree, b2 / backwards)
(r / respect-01, ARG1, m / more)
(r2 / realize-01, ARG0, t / they)
(r2 / realize-01, ARG1, y / you)
(s / start-01, ARG0, t / they)
(s2 / start-01, ARG1, r / respect-01)
(s2 / start-01, time, s / start-01)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.2
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 608,559 microseconds
Sentence: well this is such a bad attitude really, of course you can be respected if you're nice but not to the point where you just let them do anything to you, that's not being nice it's being a fool.

Oracle Span 1:  anything => anything
Oracle Span 2:  attitude => attitude
Oracle Span 3:  bad => bad
Oracle Span 4:  but => contrast-01
Oracle Span 5:  can => possible
Oracle Span 6:  do => do-02
Oracle Span 7:  fool => (person :ARG1-of fool-01)
Oracle Span 8:  just => just
Oracle Span 9:  let => let-01
Oracle Span 10:  nice => nice-41
Oracle Span 11:  nice => nice-41
Oracle Span 12:  really => really
Oracle Span 13:  respected => respect-01
Oracle Span 14:  such => such
Oracle Span 15:  that => that
Oracle Span 16:  this => this
Oracle Span 17:  well => well
Oracle Span 18:  you => you
Spans:
Span 30-31:  anything => anything
Span 6-7:  attitude => attitude
Span 5-6:  bad => bad
Span 19-20:  but => contrast-01
Span 12-13:  can => possible
Span 29-30:  do => do-02
Span 43-44:  fool => (person :ARG1-of fool-01)
Span 26-27:  just => just
Span 27-28:  let => let-01
Span 18-19:  nice => nice-41
Span 38-39:  nice => nice-41
Span 7-8:  really => really
Span 14-15:  respected => respect-01
Span 3-4:  such => such
Span 34-35:  that => that
Span 1-2:  this => this
Span 0-1:  well => well
Span 11-12:  you => you

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 30-31:  anything => anything
Oracle Span 6-7:  attitude => attitude
Oracle Span 5-6:  bad => bad
Oracle Span 19-20:  but => contrast-01
Oracle Span 12-13:  can => possible
Oracle Span 29-30:  do => do-02
Oracle Span 43-44:  fool => (person :ARG1-of fool-01)
Oracle Span 26-27:  just => just
Oracle Span 27-28:  let => let-01
Oracle Span 18-19:  nice => nice-41
Oracle Span 38-39:  nice => nice-41
Oracle Span 7-8:  really => really
Oracle Span 14-15:  respected => respect-01
Oracle Span 3-4:  such => such
Oracle Span 34-35:  that => that
Oracle Span 1-2:  this => this
Oracle Span 0-1:  well => well
Oracle Span 11-12:  you => you

Dependencies:
1	well	_	RB	RB	_	7	advmod	_	_
2	this	_	DT	DT	_	7	nsubj	_	_
3	is	_	VBZ	VBZ	_	7	cop	_	_
4	such	_	PDT	PDT	_	7	predet	_	_
5	a	_	DT	DT	_	7	det	_	_
6	bad	_	JJ	JJ	_	7	amod	_	_
7	attitude	_	NN	NN	_	0	root	_	_
8	really	_	RB	RB	_	7	advmod	_	_
9	,	_	,	,	_	7	punct	_	_
10	of	_	IN	IN	_	7	prep	_	_
11	course	_	NN	NN	_	10	pobj	_	_
12	you	_	PRP	PRP	_	15	nsubj	_	_
13	can	_	MD	MD	_	15	aux	_	_
14	be	_	VB	VB	_	15	cop	_	_
15	respected	_	JJ	JJ	_	11	rcmod	_	_
16	if	_	IN	IN	_	19	mark	_	_
17	you	_	PRP	PRP	_	19	nsubj	_	_
18	're	_	VBP	VBP	_	19	cop	_	_
19	nice	_	JJ	JJ	_	15	advcl	_	_
20	but	_	CC	CC	_	21	cc	_	_
21	not	_	RB	RB	_	10	cc	_	_
22	to	_	TO	TO	_	10	conj	_	_
23	the	_	DT	DT	_	24	det	_	_
24	point	_	NN	NN	_	22	pobj	_	_
25	where	_	WRB	WRB	_	28	advmod	_	_
26	you	_	PRP	PRP	_	28	nsubj	_	_
27	just	_	RB	RB	_	28	advmod	_	_
28	let	_	VBD	VBD	_	24	rcmod	_	_
29	them	_	PRP	PRP	_	30	nsubj	_	_
30	do	_	VBP	VBP	_	28	ccomp	_	_
31	anything	_	NN	NN	_	30	dobj	_	_
32	to	_	TO	TO	_	30	prep	_	_
33	you	_	PRP	PRP	_	32	pobj	_	_
34	,	_	,	,	_	33	punct	_	_
35	that	_	WDT	WDT	_	39	nsubj	_	_
36	's	_	VBZ	VBZ	_	39	aux	_	_
37	not	_	RB	RB	_	39	neg	_	_
38	being	_	VBG	VBG	_	39	cop	_	_
39	nice	_	JJ	JJ	_	33	rcmod	_	_
40	it	_	PRP	PRP	_	41	nsubj	_	_
41	's	_	VBZ	VBZ	_	39	ccomp	_	_
42	being	_	VBG	VBG	_	44	cop	_	_
43	a	_	DT	DT	_	44	det	_	_
44	fool	_	NN	NN	_	41	xcomp	_	_
45	.	_	.	.	_	7	punct	_	_

Oracle:
(a / attitude, domain, t / this)
(a / attitude, mod, b / bad)
(a / attitude, mod, r / really)
(a / attitude, mod, w / well)
(b / bad, mod, s / such)
(c / contrast-01, ARG1, n / nice-41)
(c / contrast-01, ARG2, n2 / nice-41)
(d / do-02, ARG1, a2 / anything)
(d / do-02, ARG2, y / you)
(f / fool-01, ARG1, p2 / person)
(l / let-01, ARG0, y / you)
(l / let-01, ARG1, d / do-02)
(l / let-01, mod, j / just)
(n / nice-41, ARG1, y / you)
(n2 / nice-41, ARG1, y / you)
(n2 / nice-41, extent, l / let-01)
(p / possible, condition, c / contrast-01)
(p / possible, domain, r2 / respect-01)
(p2 / person, domain, t3 / that)
(r2 / respect-01, ARG1, y / you)

Input(Some(Graph((multi-sentence :snt1 (attitude :mod well :mod really :domain this :mod (bad :mod such)) :snt2 (possible :mod of-course :condition (contrast-01 :ARG2 (nice-41 :extent (let-01 :mod just :ARG1 (do-02 :ARG1 anything :ARG0 they :ARG2 you) :ARG0 you) :polarity - :ARG1 you) :ARG1 (nice-41 :ARG1 you)) :domain (respect-01 :ARG1 you)) :snt3 (contrast-01 :ARG1 (nice-41 :polarity - :domain that) :ARG2 (person :ARG1-of fool-01 :domain that))),ArrayBuffer(Span(6,7,List(0),attitude,attitude,false), Span(0,1,List(1),well,well,false), Span(7,8,List(2),really,really,false), Span(1,2,List(3),this,this,false), Span(5,6,List(4),bad,bad,false), Span(3,4,List(5),such,such,false), Span(12,13,List(6),can,possible,false), Span(19,20,List(7),but,contrast-01,false), Span(18,19,List(8),nice,nice-41,false), Span(27,28,List(9),let,let-01,false), Span(26,27,List(10),just,just,false), Span(29,30,List(11),do,do-02,false), Span(30,31,List(12),anything,anything,false), Span(38,39,List(13),nice,nice-41,false), Span(14,15,List(14),respected,respect-01,false), Span(11,12,List(15),you,you,false), Span(34,35,List(16),that,that,false), Span(43,44,List(17, 18),fool,(person :ARG1-of fool-01),false)),Map(2 -> really, 5 -> such, 12 -> anything, 15 -> you, 8 -> nice-41, 18 -> fool-01, 7 -> contrast-01, 17 -> person, 1 -> well, 4 -> bad, 11 -> do-02, 14 -> respect-01, 6 -> possible, 9 -> let-01, 0 -> attitude, 16 -> that, 10 -> just, 3 -> this, 13 -> nice-41),Map(n -> nice-41, w -> well, b -> bad, t -> this, p2 -> person, j -> just, s -> such, d -> do-02, t3 -> that, y -> you, r2 -> respect-01, p -> possible, a -> attitude, a2 -> anything, r -> really, c -> contrast-01, l -> let-01, f -> fool-01, n2 -> nice-41))),[Ljava.lang.String;@2ca923bb,Annotation([Ljava.lang.String;@13df2a8c,[Ljava.lang.String;@1ebea008,[Ljava.lang.String;@72d6b3ba),Annotation([Ljava.lang.String;@1787f2a0,[Ljava.lang.String;@7de62196,[Ledu.cmu.lti.nlp.amr.Dependency;@163370c2),Annotation([Ljava.lang.String;@51bf5add,[Ljava.lang.String;@7905a0b8,[Ljava.lang.String;@35a3d49f),Annotation([Ljava.lang.String;@389b0789,[Ljava.lang.String;@13d9cbf5,[Ledu.cmu.lti.nlp.amr.Entity;@478db956))
AMR:
(a / attitude, mod, b / bad)
(a / attitude, quant, s / such)
(c / contrast-01, ARG0, p2 / person)
(c / contrast-01, ARG1, n2 / nice-41)
(d / do-02, ARG1, a2 / anything)
(f / fool-01, ARG1, p2 / person)
(l / let-01, ARG0, a / attitude)
(l / let-01, ARG1, d / do-02)
(l / let-01, ARG6, j / just)
(n / nice-41, ARG0, t3 / that)
(n / nice-41, ARG1, p2 / person)
(n2 / nice-41, ARG1, l / let-01)
(p / possible, calendar, y / you)
(p / possible, domain, r2 / respect-01)
(r2 / respect-01, ARG1, n2 / nice-41)
(t / this, mod, a / attitude)
(t / this, time, r / really)
(t / this, time, w / well)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
Decoded in 1,422,523 microseconds
Sentence: I don't know if anyone will read this, but I just feel desperate and feel the need to tell someone.

Oracle Span 1:  and => and
Oracle Span 2:  anyone => anyone
Oracle Span 3:  but => contrast-01
Oracle Span 4:  desperate => desperate
Oracle Span 5:  feel => feel-01
Oracle Span 6:  feel => feel-01
Oracle Span 7:  I => i
Oracle Span 8:  just => just
Oracle Span 9:  know => know-01
Oracle Span 10:  need => need-01
Oracle Span 11:  read => read-01
Oracle Span 12:  someone => someone
Oracle Span 13:  tell => tell-01
Oracle Span 14:  this => this
Spans:
Span 15-16:  and => and
Span 5-6:  anyone => anyone
Span 10-11:  but => contrast-01
Span 14-15:  desperate => desperate
Span 13-14:  feel => feel-01
Span 16-17:  feel => feel-01
Span 0-1:  I => i
Span 12-13:  just => just
Span 3-4:  know => know-01
Span 18-19:  need => need-01
Span 7-8:  read => read-01
Span 21-22:  someone => someone
Span 20-21:  tell => tell-01
Span 8-9:  this => this

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 5-6:  anyone => anyone
Oracle Span 10-11:  but => contrast-01
Oracle Span 14-15:  desperate => desperate
Oracle Span 13-14:  feel => feel-01
Oracle Span 16-17:  feel => feel-01
Oracle Span 0-1:  I => i
Oracle Span 12-13:  just => just
Oracle Span 3-4:  know => know-01
Oracle Span 18-19:  need => need-01
Oracle Span 7-8:  read => read-01
Oracle Span 21-22:  someone => someone
Oracle Span 20-21:  tell => tell-01
Oracle Span 8-9:  this => this

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	do	_	VBP	VBP	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	know	_	VB	VB	_	0	root	_	_
5	if	_	IN	IN	_	8	mark	_	_
6	anyone	_	NN	NN	_	8	nsubj	_	_
7	will	_	MD	MD	_	8	aux	_	_
8	read	_	VB	VB	_	4	advcl	_	_
9	this	_	DT	DT	_	8	dobj	_	_
10	,	_	,	,	_	4	punct	_	_
11	but	_	CC	CC	_	4	cc	_	_
12	I	_	PRP	PRP	_	14	nsubj	_	_
13	just	_	RB	RB	_	14	advmod	_	_
14	feel	_	VBP	VBP	_	4	conj	_	_
15	desperate	_	JJ	JJ	_	14	acomp	_	_
16	and	_	CC	CC	_	14	cc	_	_
17	feel	_	VBP	VBP	_	14	conj	_	_
18	the	_	DT	DT	_	19	det	_	_
19	need	_	NN	NN	_	17	dobj	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	tell	_	VB	VB	_	17	vmod	_	_
22	someone	_	NN	NN	_	21	dobj	_	_
23	.	_	.	.	_	4	punct	_	_

Oracle:
(a2 / and, op, f / feel-01)
(a2 / and, op, f2 / feel-01)
(c / contrast-01, ARG1, k / know-01)
(c / contrast-01, ARG2, a2 / and)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, d / desperate)
(f / feel-01, mod, j / just)
(f2 / feel-01, ARG0, i / i)
(f2 / feel-01, ARG1, n / need-01)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, r / read-01)
(n / need-01, ARG0, i / i)
(n / need-01, ARG1, t2 / tell-01)
(r / read-01, ARG0, a / anyone)
(r / read-01, ARG1, t / this)
(t2 / tell-01, ARG0, i / i)
(t2 / tell-01, ARG2, s / someone)

Input(Some(Graph((contrast-01 :ARG2 (and :op (feel-01 :ARG1 (need-01 :ARG1 (tell-01 :ARG2 someone :ARG0 i) :ARG0 i) :ARG0 i) :op (feel-01 :mod just :ARG1 desperate :ARG0 i)) :ARG1 (know-01 :ARG1 (read-01 :ARG1 this :ARG0 anyone :mode interrogative) :ARG0 i :polarity -)),ArrayBuffer(Span(10,11,List(0),but,contrast-01,false), Span(15,16,List(1),and,and,false), Span(13,14,List(2),feel,feel-01,false), Span(18,19,List(3),need,need-01,false), Span(20,21,List(4),tell,tell-01,false), Span(21,22,List(5),someone,someone,false), Span(16,17,List(6),feel,feel-01,false), Span(12,13,List(7),just,just,false), Span(14,15,List(8),desperate,desperate,false), Span(3,4,List(9),know,know-01,false), Span(7,8,List(10),read,read-01,false), Span(8,9,List(11),this,this,false), Span(5,6,List(12),anyone,anyone,false), Span(0,1,List(13),I,i,false)),Map(2 -> feel-01, 5 -> someone, 12 -> anyone, 8 -> desperate, 7 -> just, 1 -> and, 4 -> tell-01, 11 -> this, 6 -> feel-01, 9 -> know-01, 0 -> contrast-01, 10 -> read-01, 3 -> need-01, 13 -> i),Map(n -> need-01, t -> this, k -> know-01, j -> just, s -> someone, d -> desperate, a -> anyone, t2 -> tell-01, i -> i, r -> read-01, a2 -> and, c -> contrast-01, f2 -> feel-01, f -> feel-01))),[Ljava.lang.String;@6ca18a14,Annotation([Ljava.lang.String;@c667f46,[Ljava.lang.String;@51bd8b5c,[Ljava.lang.String;@7b50df34),Annotation([Ljava.lang.String;@1b410b60,[Ljava.lang.String;@2462cb01,[Ledu.cmu.lti.nlp.amr.Dependency;@19b843ba),Annotation([Ljava.lang.String;@64ec96c6,[Ljava.lang.String;@77659b30,[Ljava.lang.String;@456d6c1e),Annotation([Ljava.lang.String;@1e13529a,[Ljava.lang.String;@1ec9bd38,[Ledu.cmu.lti.nlp.amr.Entity;@452e19ca))
AMR:
(a2 / and, op, f / feel-01)
(a2 / and, op, f2 / feel-01)
(c / contrast-01, ARG1, k / know-01)
(c / contrast-01, ARG2, f2 / feel-01)
(c / contrast-01, ARG6, r / read-01)
(f / feel-01, ARG1, n / need-01)
(f2 / feel-01, ARG1, d / desperate)
(f2 / feel-01, ARG6, j / just)
(k / know-01, ARG1, i / i)
(n / need-01, ARG1, t2 / tell-01)
(r / read-01, ARG0, a / anyone)
(r / read-01, ARG1, t / this)
(t2 / tell-01, ARG1, s / someone)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 676,416 microseconds
Sentence: This September I left home, and started at University. I was incredibly anxious about doing this, but rather delayed thinking about it until I got here! Now I'm here, and have been for over two weeks, I feel terribly overwhelmed by it all and feel unintelligent and socially awkward.

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  and => and
Oracle Span 6:  anxious => anxious
Oracle Span 7:  awkward => awkward
Oracle Span 8:  but => contrast-01
Oracle Span 9:  delayed => delay-01
Oracle Span 10:  doing => do-02
Oracle Span 11:  feel => feel-01
Oracle Span 12:  feel => feel-01
Oracle Span 13:  got => get-05
Oracle Span 14:  here => here
Oracle Span 15:  here => here
Oracle Span 16:  home => home
Oracle Span 17:  I => i
Oracle Span 18:  I => i
Oracle Span 19:  I => i
Oracle Span 20:  I => i
Oracle Span 21:  incredibly => incredible
Oracle Span 22:  it => it
Oracle Span 23:  left => leave-01
Oracle Span 24:  Now => now
Oracle Span 25:  over => over
Oracle Span 26:  overwhelmed => overwhelm-01
Oracle Span 27:  September => (date-entity :month 9)
Oracle Span 28:  socially => social
Oracle Span 29:  started => start-01
Oracle Span 30:  terribly => terrible
Oracle Span 31:  thinking => think-01
Oracle Span 32:  This => this
Oracle Span 33:  two => 2
Oracle Span 34:  unintelligent => (intelligent-41 :polarity -)
Oracle Span 35:  University => university
Oracle Span 36:  until => until
Oracle Span 37:  weeks => (temporal-quantity :unit week)
Spans:
Span 49-50:  all => all
Span 6-7:  and => and
Span 35-36:  and => and
Span 50-51:  and => and
Span 53-54:  and => and
Span 14-15:  anxious => anxious
Span 55-56:  awkward => awkward
Span 19-20:  but => contrast-01
Span 21-22:  delayed => delay-01
Span 16-17:  doing => do-02
Span 44-45:  feel => feel-01
Span 51-52:  feel => feel-01
Span 27-28:  got => get-05
Span 28-29:  here => here
Span 33-34:  here => here
Span 4-5:  home => home
Span 2-3:  I => i
Span 11-12:  I => i
Span 26-27:  I => i
Span 31-32:  I => i
Span 13-14:  incredibly => incredible
Span 24-25:  it => it
Span 3-4:  left => leave-01
Span 30-31:  Now => now
Span 39-40:  over => over
Span 46-47:  overwhelmed => overwhelm-01
Span 1-2:  September => (date-entity :month 9)
Span 54-55:  socially => social
Span 7-8:  started => start-01
Span 45-46:  terribly => terrible
Span 22-23:  thinking => think-01
Span 0-1:  This => this
Span 40-41:  two => 2
Span 52-53:  unintelligent => (intelligent-41 :polarity -)
Span 9-10:  University => university
Span 25-26:  until => until
Span 41-42:  weeks => (temporal-quantity :unit week)

 *** WARNING: The dependency tree seems broken.  I can't find the head of got in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of here in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of Now in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of 'm in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of here in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of been in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of over in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of two in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of weeks in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of terribly in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of overwhelmed in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of by in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of it in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of all in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of unintelligent in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of socially in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of awkward in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 56
Langrangian relaxation converged after 45 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of got in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of here in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of Now in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of 'm in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of here in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of been in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of over in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of two in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of weeks in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of terribly in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of overwhelmed in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of by in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of it in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of all in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of unintelligent in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of socially in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of awkward in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 56
Oracle Span 49-50:  all => all
Oracle Span 6-7:  and => and
Oracle Span 35-36:  and => and
Oracle Span 50-51:  and => and
Oracle Span 53-54:  and => and
Oracle Span 14-15:  anxious => anxious
Oracle Span 55-56:  awkward => awkward
Oracle Span 19-20:  but => contrast-01
Oracle Span 21-22:  delayed => delay-01
Oracle Span 16-17:  doing => do-02
Oracle Span 44-45:  feel => feel-01
Oracle Span 51-52:  feel => feel-01
Oracle Span 27-28:  got => get-05
Oracle Span 28-29:  here => here
Oracle Span 33-34:  here => here
Oracle Span 4-5:  home => home
Oracle Span 2-3:  I => i
Oracle Span 11-12:  I => i
Oracle Span 26-27:  I => i
Oracle Span 31-32:  I => i
Oracle Span 13-14:  incredibly => incredible
Oracle Span 24-25:  it => it
Oracle Span 3-4:  left => leave-01
Oracle Span 30-31:  Now => now
Oracle Span 39-40:  over => over
Oracle Span 46-47:  overwhelmed => overwhelm-01
Oracle Span 1-2:  September => (date-entity :month 9)
Oracle Span 54-55:  socially => social
Oracle Span 7-8:  started => start-01
Oracle Span 45-46:  terribly => terrible
Oracle Span 22-23:  thinking => think-01
Oracle Span 0-1:  This => this
Oracle Span 40-41:  two => 2
Oracle Span 52-53:  unintelligent => (intelligent-41 :polarity -)
Oracle Span 9-10:  University => university
Oracle Span 25-26:  until => until
Oracle Span 41-42:  weeks => (temporal-quantity :unit week)

Dependencies:
1	This	_	DT	DT	_	3	det	_	_
2	September	_	NNP	NNP	_	3	nn	_	_
3	I	_	NN	NN	_	4	nsubj	_	_
4	left	_	VBD	VBD	_	0	root	_	_
5	home	_	NN	NN	_	4	dobj	_	_
6	,	_	,	,	_	4	punct	_	_
7	and	_	CC	CC	_	4	cc	_	_
8	started	_	VBD	VBD	_	4	conj	_	_
9	at	_	IN	IN	_	8	prep	_	_
10	University	_	NNP	NNP	_	9	pobj	_	_
11	.	_	.	.	_	4	punct	_	_
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	was	_	VBD	VBD	_	4	cop	_	_
3	incredibly	_	RB	RB	_	4	advmod	_	_
4	anxious	_	JJ	JJ	_	0	root	_	_
5	about	_	IN	IN	_	4	prep	_	_
6	doing	_	VBG	VBG	_	5	pcomp	_	_
7	this	_	DT	DT	_	6	dobj	_	_
8	,	_	,	,	_	7	punct	_	_
9	but	_	CC	CC	_	10	cc	_	_
10	rather	_	RB	RB	_	7	cc	_	_
11	delayed	_	VBN	VBN	_	12	amod	_	_
12	thinking	_	NN	NN	_	7	conj	_	_
13	about	_	IN	IN	_	12	prep	_	_
14	it	_	PRP	PRP	_	13	pobj	_	_
15	until	_	IN	IN	_	17	mark	_	_
16	I	_	PRP	PRP	_	17	nsubj	_	_
17	got	_	VBD	VBD	_	4	advcl	_	_
18	here	_	RB	RB	_	17	advmod	_	_
19	!	_	.	.	_	4	punct	_	_
1	Now	_	RB	RB	_	3	advmod	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	'm	_	VBP	VBP	_	0	root	_	_
4	here	_	RB	RB	_	3	advmod	_	_
5	,	_	,	,	_	3	punct	_	_
6	and	_	CC	CC	_	3	cc	_	_
7	have	_	VB	VB	_	8	aux	_	_
8	been	_	VBN	VBN	_	15	ccomp	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	over	_	IN	IN	_	12	amod	_	_
11	two	_	CD	CD	_	12	num	_	_
12	weeks	_	NNS	NNS	_	9	pobj	_	_
13	,	_	,	,	_	15	punct	_	_
14	I	_	PRP	PRP	_	15	nsubj	_	_
15	feel	_	VBP	VBP	_	3	conj	_	_
16	terribly	_	RB	RB	_	17	advmod	_	_
17	overwhelmed	_	JJ	JJ	_	15	ccomp	_	_
18	by	_	IN	IN	_	17	prep	_	_
19	it	_	PRP	PRP	_	18	pobj	_	_
20	all	_	DT	DT	_	18	advmod	_	_
21	and	_	CC	CC	_	17	cc	_	_
22	feel	_	VBP	VBP	_	17	conj	_	_
23	unintelligent	_	NN	NN	_	22	dobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	socially	_	RB	RB	_	26	advmod	_	_
26	awkward	_	JJ	JJ	_	23	conj	_	_
27	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, l / leave-01)
(a / and, op, s / start-01)
(a3 / and, op, f / feel-01)
(a3 / and, op, f2 / feel-01)
(a5 / and, op, a6 / awkward)
(a5 / and, op, i7 / intelligent-41)
(a6 / awkward, mod, s2 / social)
(a7 / anxious, degree, i4 / incredible)
(a7 / anxious, domain, i2 / i)
(a7 / anxious, topic, d2 / do-02)
(c / contrast-01, ARG1, a7 / anxious)
(c / contrast-01, ARG2, d3 / delay-01)
(d / date-entity, month, 9)
(d2 / do-02, ARG0, i2 / i)
(d2 / do-02, ARG1, t3 / this)
(d3 / delay-01, ARG0, i2 / i)
(d3 / delay-01, ARG1, t2 / think-01)
(d3 / delay-01, ARG2, u2 / until)
(f / feel-01, ARG0, i5 / i)
(f / feel-01, ARG1, o2 / overwhelm-01)
(f2 / feel-01, ARG0, i5 / i)
(f2 / feel-01, ARG1, a5 / and)
(g / get-05, ARG1, i2 / i)
(g / get-05, ARG2, h2 / here)
(i6 / it, mod, a4 / all)
(i7 / intelligent-41, ARG1, i5 / i)
(i7 / intelligent-41, polarity, -)
(l / leave-01, ARG0, i / i)
(l / leave-01, ARG1, h / home)
(l / leave-01, time, d / date-entity)
(o / over, op, t / temporal-quantity)
(o2 / overwhelm-01, ARG0, i6 / it)
(o2 / overwhelm-01, ARG1, i5 / i)
(o2 / overwhelm-01, degree, t4 / terrible)
(s / start-01, ARG0, i / i)
(s / start-01, ARG2, u / university)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, w / week)
(t2 / think-01, ARG0, i2 / i)
(t2 / think-01, ARG1, t3 / this)
(u2 / until, op, g / get-05)

Input(Some(Graph((multi-sentence :snt1 (and :op (start-01 :ARG2 university :ARG0 i) :op (leave-01 :time (date-entity :month 9) :ARG1 home :ARG0 i)) :snt2 (contrast-01 :ARG2 (delay-01 :ARG2 (until :op (get-05 :ARG2 here :ARG1 i)) :ARG1 (think-01 :ARG0 i :ARG1 this) :ARG0 i) :ARG1 (anxious :degree incredible :topic (do-02 :ARG1 this :ARG0 i) :domain i)) :snt3 (and :op (be-located-at-91 :time (over :op (temporal-quantity :unit week :quant 2)) :ARG1 i :ARG2 here) :op (be-located-at-91 :ARG1 i :ARG2 here :time now)) :snt4 (and :op (feel-01 :ARG1 (and :op (awkward :mod social) :op (intelligent-41 :polarity - :ARG1 i)) :ARG0 i) :op (feel-01 :ARG1 (overwhelm-01 :degree terrible :ARG0 (it :mod all) :ARG1 i) :ARG0 i))),ArrayBuffer(Span(1,2,List(0, 1),September,(date-entity :month 9),false), Span(6,7,List(2),and,and,false), Span(7,8,List(3),started,start-01,false), Span(9,10,List(4),University,university,false), Span(3,4,List(5),left,leave-01,false), Span(4,5,List(6),home,home,false), Span(2,3,List(7),I,i,false), Span(19,20,List(8),but,contrast-01,false), Span(21,22,List(9),delayed,delay-01,false), Span(25,26,List(10),until,until,false), Span(27,28,List(11),got,get-05,false), Span(28,29,List(12),here,here,false), Span(22,23,List(13),thinking,think-01,false), Span(14,15,List(14),anxious,anxious,false), Span(16,17,List(15),doing,do-02,false), Span(0,1,List(16),This,this,false), Span(11,12,List(17),I,i,false), Span(35,36,List(18),and,and,false), Span(39,40,List(19),over,over,false), Span(40,41,List(20),two,2,false), Span(41,42,List(21, 22),weeks,(temporal-quantity :unit week),false), Span(26,27,List(23),I,i,false), Span(33,34,List(24),here,here,false), Span(30,31,List(25),Now,now,false), Span(50,51,List(26),and,and,false), Span(44,45,List(27),feel,feel-01,false), Span(53,54,List(28),and,and,false), Span(55,56,List(29),awkward,awkward,false), Span(52,53,List(30, 31),unintelligent,(intelligent-41 :polarity -),false), Span(51,52,List(32),feel,feel-01,false), Span(46,47,List(33),overwhelmed,overwhelm-01,false), Span(24,25,List(34),it,it,false), Span(49,50,List(35),all,all,false), Span(31,32,List(36),I,i,false), Span(13,14,List(37),incredibly,incredible,false), Span(54,55,List(38),socially,social,false), Span(45,46,List(39),terribly,terrible,false)),Map(39 -> terrible, 30 -> intelligent-41, 2 -> and, 5 -> leave-01, 33 -> overwhelm-01, 27 -> feel-01, 12 -> here, 15 -> do-02, 8 -> contrast-01, 36 -> i, 21 -> temporal-quantity, 18 -> and, 24 -> here, 35 -> all, 7 -> i, 17 -> i, 1 -> 9, 23 -> i, 38 -> social, 26 -> and, 4 -> university, 11 -> get-05, 32 -> feel-01, 14 -> anxious, 29 -> awkward, 20 -> 2, 34 -> it, 28 -> and, 6 -> home, 9 -> delay-01, 0 -> date-entity, 22 -> week, 16 -> this, 37 -> incredible, 19 -> over, 10 -> until, 3 -> start-01, 31 -> -, 25 -> now, 13 -> think-01),Map(a7 -> anxious, n -> now, w -> week, h -> home, t4 -> terrible, i4 -> incredible, 2 -> 2, i7 -> intelligent-41, s2 -> social, h2 -> here, t -> temporal-quantity, d3 -> delay-01, a3 -> and, u2 -> until, i6 -> it, s -> start-01, a6 -> awkward, d -> date-entity, t3 -> this, i3 -> i, g -> get-05, a -> and, o2 -> overwhelm-01, a5 -> and, d2 -> do-02, i2 -> i, t2 -> think-01, i5 -> i, a2 -> and, i -> i, h3 -> here, c -> contrast-01, f2 -> feel-01, l -> leave-01, u -> university, f -> feel-01, o -> over, a4 -> all))),[Ljava.lang.String;@6b0d80ed,Annotation([Ljava.lang.String;@6f8e8894,[Ljava.lang.String;@3cfdd820,[Ljava.lang.String;@928763c),Annotation([Ljava.lang.String;@e25951c,[Ljava.lang.String;@15f47664,[Ledu.cmu.lti.nlp.amr.Dependency;@471a9022),Annotation([Ljava.lang.String;@dc9876b,[Ljava.lang.String;@2f666ebb,[Ljava.lang.String;@19976a65),Annotation([Ljava.lang.String;@a1f72f5,[Ljava.lang.String;@4b2c5e02,[Ledu.cmu.lti.nlp.amr.Entity;@57a3e26a))
AMR:
(a / and, condition, d2 / do-02)
(a / and, op, 2 / 2)
(a / and, op, a2 / and)
(a / and, op, a3 / and)
(a / and, op, a4 / all)
(a / and, op, a5 / and)
(a / and, op, a6 / awkward)
(a / and, op, h2 / here)
(a / and, op, h3 / here)
(a / and, op, i5 / i)
(a / and, op, l / leave-01)
(a / and, op, n / now)
(a / and, op, o / over)
(a / and, op, s / start-01)
(a / and, op, s2 / social)
(a / and, op, t / temporal-quantity)
(a / and, op, t4 / terrible)
(c / contrast-01, ARG1, d2 / do-02)
(d / date-entity, month, 9)
(d2 / do-02, ARG1, a7 / anxious)
(d3 / delay-01, ARG0, i / i)
(d3 / delay-01, ARG1, t2 / think-01)
(f / feel-01, ARG1, h / home)
(f2 / feel-01, ARG1, h / home)
(g / get-05, ARG0, i3 / i)
(g / get-05, ARG1, h / home)
(i / i, mod, t3 / this)
(i / i, time, d / date-entity)
(i4 / incredible, domain, i2 / i)
(i7 / intelligent-41, ARG1, h / home)
(i7 / intelligent-41, polarity, -)
(l / leave-01, ARG0, i / i)
(l / leave-01, ARG1, h / home)
(l / leave-01, ARG6, i2 / i)
(o2 / overwhelm-01, ARG1, h / home)
(s / start-01, ARG1, u / university)
(t / temporal-quantity, unit, w / week)
(t2 / think-01, ARG1, u2 / until)
(t2 / think-01, ARG6, i6 / it)

WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.2
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.1.0
WARNING: makeIds can't find span Id: 0.3.1.0.1
WARNING: makeIds can't find span Id: 0.3.1.0.0
WARNING: makeIds can't find span Id: 0.3.1.0.0.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.1
WARNING: makeIds can't find span Id: 0.3.0.1.0
WARNING: makeIds can't find span Id: 0.3.0.1.0.0
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.3.1.0.1.0
WARNING: makeIds can't find span Id: 0.3.0.1.1
Decoded in 4,005,986 microseconds
Sentence: I have been struggling emotionally for the majority of my life since moving to Secondary School, although I did lose my dad at around the age of 9 and always used to blame that for my feelings. I have had two periods of counselling in my life, over roughly 15 months from December 2009 until around March this year.

Oracle Span 1:  15 => 15
Oracle Span 2:  9 => 9
Oracle Span 3:  age => age-01
Oracle Span 4:  always => always
Oracle Span 5:  and => and
Oracle Span 6:  around => around
Oracle Span 7:  around => around
Oracle Span 8:  blame => blame-01
Oracle Span 9:  counselling => counsel-01
Oracle Span 10:  dad => dad
Oracle Span 11:  December 2009 => (date-entity :month 12 :year 2009)
Oracle Span 12:  emotionally => emotional
Oracle Span 13:  feelings => (thing :ARG1-of feel-01)
Oracle Span 14:  have => have-03
Oracle Span 15:  I => i
Oracle Span 16:  I => i
Oracle Span 17:  lose => lose-02
Oracle Span 18:  majority => majority
Oracle Span 19:  March => (date-entity :month 3)
Oracle Span 20:  months => (temporal-quantity :unit month)
Oracle Span 21:  moving => move-01
Oracle Span 22:  periods => period
Oracle Span 23:  roughly => roughly
Oracle Span 24:  School => school
Oracle Span 25:  Secondary => secondary
Oracle Span 26:  since => since
Oracle Span 27:  struggling => struggle-01
Oracle Span 28:  this => this
Oracle Span 29:  two => 2
Oracle Span 30:  year => (temporal-quantity :unit year)
Spans:
Span 52-53:  15 => 15
Span 28-29:  9 => 9
Span 26-27:  age => age-01
Span 30-31:  always => always
Span 29-30:  and => and
Span 24-25:  around => around
Span 58-59:  around => around
Span 33-34:  blame => blame-01
Span 45-46:  counselling => counsel-01
Span 22-23:  dad => dad
Span 55-57:  December 2009 => (date-entity :month 12 :year 2009)
Span 4-5:  emotionally => emotional
Span 37-38:  feelings => (thing :ARG1-of feel-01)
Span 1-2:  have => have-03
Span 0-1:  I => i
Span 18-19:  I => i
Span 20-21:  lose => lose-02
Span 7-8:  majority => majority
Span 59-60:  March => (date-entity :month 3)
Span 53-54:  months => (temporal-quantity :unit month)
Span 12-13:  moving => move-01
Span 43-44:  periods => period
Span 51-52:  roughly => roughly
Span 15-16:  School => school
Span 14-15:  Secondary => secondary
Span 11-12:  since => since
Span 3-4:  struggling => struggle-01
Span 60-61:  this => this
Span 42-43:  two => 2
Span 61-62:  year => (temporal-quantity :unit year)

 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of had in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of two in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of periods in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of counselling in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of life in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of over in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of roughly in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of 15 in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of months in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of from in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of December in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of 2009 in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of until in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of around in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of March in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of year in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 62
Langrangian relaxation converged after 77 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of had in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of two in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of periods in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of counselling in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of life in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of over in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of roughly in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of 15 in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of months in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of from in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of December in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of 2009 in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of until in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of around in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of March in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of year in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 62
Oracle Span 52-53:  15 => 15
Oracle Span 28-29:  9 => 9
Oracle Span 26-27:  age => age-01
Oracle Span 30-31:  always => always
Oracle Span 29-30:  and => and
Oracle Span 24-25:  around => around
Oracle Span 58-59:  around => around
Oracle Span 33-34:  blame => blame-01
Oracle Span 45-46:  counselling => counsel-01
Oracle Span 22-23:  dad => dad
Oracle Span 55-57:  December 2009 => (date-entity :month 12 :year 2009)
Oracle Span 4-5:  emotionally => emotional
Oracle Span 37-38:  feelings => (thing :ARG1-of feel-01)
Oracle Span 1-2:  have => have-03
Oracle Span 0-1:  I => i
Oracle Span 18-19:  I => i
Oracle Span 20-21:  lose => lose-02
Oracle Span 7-8:  majority => majority
Oracle Span 59-60:  March => (date-entity :month 3)
Oracle Span 53-54:  months => (temporal-quantity :unit month)
Oracle Span 12-13:  moving => move-01
Oracle Span 43-44:  periods => period
Oracle Span 51-52:  roughly => roughly
Oracle Span 15-16:  School => school
Oracle Span 14-15:  Secondary => secondary
Oracle Span 11-12:  since => since
Oracle Span 3-4:  struggling => struggle-01
Oracle Span 60-61:  this => this
Oracle Span 42-43:  two => 2
Oracle Span 61-62:  year => (temporal-quantity :unit year)

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	have	_	VBP	VBP	_	4	aux	_	_
3	been	_	VBN	VBN	_	4	aux	_	_
4	struggling	_	VBG	VBG	_	0	root	_	_
5	emotionally	_	RB	RB	_	4	advmod	_	_
6	for	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	majority	_	NN	NN	_	6	pobj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	life	_	NN	NN	_	9	pobj	_	_
12	since	_	IN	IN	_	4	prep	_	_
13	moving	_	VBG	VBG	_	12	pcomp	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	Secondary	_	JJ	JJ	_	16	amod	_	_
16	School	_	NNP	NNP	_	14	pobj	_	_
17	,	_	,	,	_	13	punct	_	_
18	although	_	IN	IN	_	21	mark	_	_
19	I	_	PRP	PRP	_	21	nsubj	_	_
20	did	_	VBD	VBD	_	21	aux	_	_
21	lose	_	VB	VB	_	13	advcl	_	_
22	my	_	PRP$	PRP$	_	23	poss	_	_
23	dad	_	NN	NN	_	21	dobj	_	_
24	at	_	IN	IN	_	25	dep	_	_
25	around	_	IN	IN	_	21	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	age	_	NN	NN	_	25	pobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	9	_	CD	CD	_	28	pobj	_	_
30	and	_	CC	CC	_	4	cc	_	_
31	always	_	RB	RB	_	32	advmod	_	_
32	used	_	VBN	VBN	_	4	conj	_	_
33	to	_	TO	TO	_	34	aux	_	_
34	blame	_	VB	VB	_	32	xcomp	_	_
35	that	_	DT	DT	_	34	dobj	_	_
36	for	_	IN	IN	_	35	prep	_	_
37	my	_	PRP$	PRP$	_	38	poss	_	_
38	feelings	_	NNS	NNS	_	36	pobj	_	_
39	.	_	.	.	_	4	punct	_	_
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	had	_	VBN	VBN	_	0	root	_	_
4	two	_	CD	CD	_	5	num	_	_
5	periods	_	NNS	NNS	_	3	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	counselling	_	VBG	VBG	_	6	pcomp	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	my	_	PRP$	PRP$	_	10	poss	_	_
10	life	_	NN	NN	_	8	pobj	_	_
11	,	_	,	,	_	10	punct	_	_
12	over	_	IN	IN	_	10	advmod	_	_
13	roughly	_	RB	RB	_	15	advmod	_	_
14	15	_	CD	CD	_	15	num	_	_
15	months	_	NNS	NNS	_	12	pobj	_	_
16	from	_	IN	IN	_	12	prep	_	_
17	December	_	NNP	NNP	_	16	pobj	_	_
18	2009	_	CD	CD	_	17	num	_	_
19	until	_	IN	IN	_	12	prep	_	_
20	around	_	RB	RB	_	21	advmod	_	_
21	March	_	NNP	NNP	_	19	pobj	_	_
22	this	_	DT	DT	_	23	det	_	_
23	year	_	NN	NN	_	7	tmod	_	_
24	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, b / blame-01)
(a / and, op, l2 / lose-02)
(a2 / around, op, a3 / age-01)
(a3 / age-01, ARG1, i / i)
(a3 / age-01, ARG2, t2 / temporal-quantity)
(a4 / around, op, d2 / date-entity)
(b / blame-01, ARG0, i / i)
(b / blame-01, ARG1, l2 / lose-02)
(b / blame-01, ARG2, t3 / thing)
(b / blame-01, time, a5 / always)
(c / counsel-01, ARG1, i2 / i)
(c / counsel-01, consist, p / period)
(d / date-entity, month, 12)
(d / date-entity, year, 2009)
(d2 / date-entity, month, 3)
(d3 / dad, poss, i / i)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, t3 / thing)
(h / have-03, ARG0, i2 / i)
(h / have-03, ARG1, p / period)
(h / have-03, duration, r2 / roughly)
(l2 / lose-02, ARG0, i / i)
(l2 / lose-02, ARG1, d3 / dad)
(l2 / lose-02, time, a2 / around)
(m4 / move-01, ARG1, i / i)
(m4 / move-01, ARG2, s2 / school)
(p / period, quant, 2 / 2)
(r2 / roughly, op, t / temporal-quantity)
(s / struggle-01, ARG0, i / i)
(s / struggle-01, concession, a / and)
(s / struggle-01, duration, s4 / since)
(s / struggle-01, manner, e / emotional)
(s2 / school, mod, s3 / secondary)
(s4 / since, op, m4 / move-01)
(t / temporal-quantity, quant, 1 / 15)
(t / temporal-quantity, unit, m / month)
(t2 / temporal-quantity, quant, 9 / 9)
(t2 / temporal-quantity, unit, y / year)

Input(Some(Graph((multi-sentence :snt1 (struggle-01 :duration (since :op (move-01 :ARG2 (school :mod secondary) :ARG1 i)) :concession (and :op (blame-01 :time always :ARG2 (thing :ARG1-of (feel-01 :ARG0 i)) :ARG0 i :ARG1 lose-02) :op (lose-02 :time (around :op (age-01 :ARG2 (temporal-quantity :unit year :quant 9) :ARG1 i)) :ARG1 (dad :poss i) :ARG0 i)) :duration (live-01 :quant majority :ARG0 i) :manner emotional :ARG0 i) :snt2 (have-03 :duration (roughly :op (temporal-quantity :unit month :quant 15)) :time (date-interval :op (date-entity :month 12 :year 2009) :op (year :mod this :mod (around :op (date-entity :month 3)))) :ARG1 (period :time (live-01 :ARG0 i) :consist-of (counsel-01 :ARG1 i) :quant 2) :ARG0 i)),ArrayBuffer(Span(55,57,List(0, 1, 2),December 2009,(date-entity :month 12 :year 2009),false), Span(59,60,List(3, 4),March,(date-entity :month 3),false), Span(3,4,List(5),struggling,struggle-01,false), Span(11,12,List(6),since,since,false), Span(12,13,List(7),moving,move-01,false), Span(15,16,List(8),School,school,false), Span(14,15,List(9),Secondary,secondary,false), Span(29,30,List(10),and,and,false), Span(33,34,List(11),blame,blame-01,false), Span(30,31,List(12),always,always,false), Span(20,21,List(13),lose,lose-02,false), Span(24,25,List(14),around,around,false), Span(26,27,List(15),age,age-01,false), Span(28,29,List(16),9,9,false), Span(61,62,List(17, 18),year,(temporal-quantity :unit year),false), Span(22,23,List(19),dad,dad,false), Span(7,8,List(20),majority,majority,false), Span(0,1,List(21),I,i,false), Span(1,2,List(22),have,have-03,false), Span(51,52,List(23),roughly,roughly,false), Span(52,53,List(24),15,15,false), Span(53,54,List(25, 26),months,(temporal-quantity :unit month),false), Span(60,61,List(27),this,this,false), Span(58,59,List(28),around,around,false), Span(43,44,List(29),periods,period,false), Span(45,46,List(30),counselling,counsel-01,false), Span(42,43,List(31),two,2,false), Span(18,19,List(32),I,i,false), Span(37,38,List(33, 34),feelings,(thing :ARG1-of feel-01),false), Span(4,5,List(35),emotionally,emotional,false)),Map(30 -> counsel-01, 2 -> 2009, 5 -> struggle-01, 33 -> thing, 27 -> this, 12 -> always, 15 -> age-01, 8 -> school, 21 -> i, 18 -> year, 24 -> 15, 35 -> emotional, 7 -> move-01, 17 -> temporal-quantity, 1 -> 12, 23 -> roughly, 26 -> month, 4 -> 3, 11 -> blame-01, 32 -> i, 14 -> around, 29 -> period, 20 -> majority, 34 -> feel-01, 28 -> around, 6 -> since, 9 -> secondary, 0 -> date-entity, 22 -> have-03, 16 -> 9, 19 -> dad, 10 -> and, 3 -> date-entity, 31 -> 2, 25 -> temporal-quantity, 13 -> lose-02),Map(e -> emotional, m3 -> majority, h -> have-03, t4 -> this, 2 -> 2, s2 -> school, t -> temporal-quantity, b -> blame-01, d3 -> dad, a3 -> age-01, s -> struggle-01, s4 -> since, m -> month, d -> date-entity, 1 -> 15, t3 -> thing, r2 -> roughly, y -> year, p -> period, a -> and, a5 -> always, d2 -> date-entity, m4 -> move-01, i2 -> i, t2 -> temporal-quantity, l2 -> lose-02, i -> i, a2 -> around, c -> counsel-01, s3 -> secondary, 9 -> 9, f -> feel-01, a4 -> around))),[Ljava.lang.String;@2dc9b0f5,Annotation([Ljava.lang.String;@6531a794,[Ljava.lang.String;@3b5fad2d,[Ljava.lang.String;@5e17553a),Annotation([Ljava.lang.String;@3eb91815,[Ljava.lang.String;@56dc1551,[Ledu.cmu.lti.nlp.amr.Dependency;@102cec62),Annotation([Ljava.lang.String;@74f6c5d8,[Ljava.lang.String;@27912e3,[Ljava.lang.String;@34b9f960),Annotation([Ljava.lang.String;@43015c69,[Ljava.lang.String;@19b89d4,[Ledu.cmu.lti.nlp.amr.Entity;@4bbf6d0e))
AMR:
(a / and, op, 1 / 15)
(a / and, op, 2 / 2)
(a / and, op, a4 / around)
(a / and, op, c / counsel-01)
(a / and, op, d / date-entity)
(a / and, op, d2 / date-entity)
(a / and, op, p / period)
(a / and, op, r2 / roughly)
(a / and, op, s / struggle-01)
(a / and, op, t / temporal-quantity)
(a / and, op, t2 / temporal-quantity)
(a / and, op, t4 / this)
(a2 / around, op, a3 / age-01)
(a3 / age-01, ARG1, m3 / majority)
(b / blame-01, ARG0, a5 / always)
(b / blame-01, ARG1, a / and)
(c / counsel-01, ARG0, 9 / 9)
(c / counsel-01, ARG1, t3 / thing)
(d / date-entity, month, 12)
(d / date-entity, year, 2009)
(d2 / date-entity, month, 3)
(f / feel-01, ARG1, t3 / thing)
(h / have-03, ARG1, e / emotional)
(l2 / lose-02, ARG0, i2 / i)
(l2 / lose-02, ARG1, d3 / dad)
(l2 / lose-02, time, a3 / age-01)
(m4 / move-01, ARG2, s3 / secondary)
(m4 / move-01, time, l2 / lose-02)
(s / struggle-01, ARG0, i / i)
(s / struggle-01, ARG1, h / have-03)
(s / struggle-01, ARG2, m4 / move-01)
(s2 / school, mod, s3 / secondary)
(s4 / since, op, m4 / move-01)
(t / temporal-quantity, unit, m / month)
(t2 / temporal-quantity, unit, y / year)

WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.1.1.0
WARNING: makeIds can't find span Id: 0.1.2.1.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.4
WARNING: makeIds can't find span Id: 0.0.4.0
WARNING: makeIds can't find span Id: 0.0.4.0.0
WARNING: makeIds can't find span Id: 0.0.4.0.0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.1
WARNING: makeIds can't find span Id: 0.0.3.1.1
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.1
WARNING: makeIds can't find span Id: 0.0.3.0.1.0
WARNING: makeIds can't find span Id: 0.0.3.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.3.0.1
WARNING: makeIds can't find span Id: 0.1.2.1.0
WARNING: makeIds can't find span Id: 0.1.2.1.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.3.1.0
WARNING: makeIds can't find span Id: 0.0.3.1.0.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 5,184,570 microseconds
Sentence: I feel at the moment like the problems in my life are incredibly overwhelming, and are making me ever more doubtful of my always low self-esteem. I have no ability to concentrate on work, often find myself becoming very quiet in social occasions, and doubt myself over anything and everything.

Oracle Span 1:  always => always
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  anything => anything
Oracle Span 6:  becoming => become-01
Oracle Span 7:  concentrate => concentrate-01
Oracle Span 8:  doubt => doubt-01
Oracle Span 9:  doubtful => doubt-01
Oracle Span 10:  esteem => esteem
Oracle Span 11:  ever => ever
Oracle Span 12:  everything => everything
Oracle Span 13:  feel => feel-01
Oracle Span 14:  find => find-01
Oracle Span 15:  I => i
Oracle Span 16:  I => i
Oracle Span 17:  incredibly => credible
Oracle Span 18:  low => low
Oracle Span 19:  making => make-02
Oracle Span 20:  moment => moment
Oracle Span 21:  more => more
Oracle Span 22:  no => -
Oracle Span 23:  occasions => occasion
Oracle Span 24:  often => often
Oracle Span 25:  overwhelming => overwhelm-01
Oracle Span 26:  problems => problem
Oracle Span 27:  quiet => quiet-01
Oracle Span 28:  self => self
Oracle Span 29:  social => society
Oracle Span 30:  very => very
Oracle Span 31:  work => work-01
Spans:
Span 24-25:  always => always
Span 15-16:  and => and
Span 49-50:  and => and
Span 54-55:  and => and
Span 53-54:  anything => anything
Span 42-43:  becoming => become-01
Span 35-36:  concentrate => concentrate-01
Span 50-51:  doubt => doubt-01
Span 21-22:  doubtful => doubt-01
Span 28-29:  esteem => esteem
Span 19-20:  ever => ever
Span 55-56:  everything => everything
Span 1-2:  feel => feel-01
Span 40-41:  find => find-01
Span 0-1:  I => i
Span 30-31:  I => i
Span 12-13:  incredibly => credible
Span 25-26:  low => low
Span 17-18:  making => make-02
Span 4-5:  moment => moment
Span 20-21:  more => more
Span 32-33:  no => -
Span 47-48:  occasions => occasion
Span 39-40:  often => often
Span 13-14:  overwhelming => overwhelm-01
Span 7-8:  problems => problem
Span 44-45:  quiet => quiet-01
Span 26-27:  self => self
Span 46-47:  social => society
Span 43-44:  very => very
Span 37-38:  work => work-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of ability in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of concentrate in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of work in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of often in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of find in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of myself in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of becoming in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of very in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of quiet in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of social in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of occasions in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of doubt in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of myself in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of over in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of anything in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of everything in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 54
Langrangian relaxation converged after 38 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of ability in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of concentrate in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of work in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of often in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of find in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of myself in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of becoming in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of very in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of quiet in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of social in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of occasions in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of doubt in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of myself in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of over in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of anything in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of everything in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 54
Oracle Span 24-25:  always => always
Oracle Span 15-16:  and => and
Oracle Span 49-50:  and => and
Oracle Span 54-55:  and => and
Oracle Span 53-54:  anything => anything
Oracle Span 42-43:  becoming => become-01
Oracle Span 35-36:  concentrate => concentrate-01
Oracle Span 50-51:  doubt => doubt-01
Oracle Span 21-22:  doubtful => doubt-01
Oracle Span 28-29:  esteem => esteem
Oracle Span 19-20:  ever => ever
Oracle Span 55-56:  everything => everything
Oracle Span 1-2:  feel => feel-01
Oracle Span 40-41:  find => find-01
Oracle Span 0-1:  I => i
Oracle Span 30-31:  I => i
Oracle Span 12-13:  incredibly => credible
Oracle Span 25-26:  low => low
Oracle Span 17-18:  making => make-02
Oracle Span 4-5:  moment => moment
Oracle Span 20-21:  more => more
Oracle Span 32-33:  no => -
Oracle Span 47-48:  occasions => occasion
Oracle Span 39-40:  often => often
Oracle Span 13-14:  overwhelming => overwhelm-01
Oracle Span 7-8:  problems => problem
Oracle Span 44-45:  quiet => quiet-01
Oracle Span 26-27:  self => self
Oracle Span 46-47:  social => society
Oracle Span 43-44:  very => very
Oracle Span 37-38:  work => work-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	feel	_	VBP	VBP	_	0	root	_	_
3	at	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	moment	_	NN	NN	_	3	pobj	_	_
6	like	_	IN	IN	_	14	mark	_	_
7	the	_	DT	DT	_	8	det	_	_
8	problems	_	NNS	NNS	_	14	nsubj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	life	_	NN	NN	_	9	pobj	_	_
12	are	_	VBP	VBP	_	14	cop	_	_
13	incredibly	_	RB	RB	_	14	advmod	_	_
14	overwhelming	_	JJ	JJ	_	2	advcl	_	_
15	,	_	,	,	_	14	punct	_	_
16	and	_	CC	CC	_	14	cc	_	_
17	are	_	VBP	VBP	_	18	aux	_	_
18	making	_	VBG	VBG	_	14	conj	_	_
19	me	_	PRP	PRP	_	22	dep	_	_
20	ever	_	RB	RB	_	22	advmod	_	_
21	more	_	RBR	RBR	_	22	advmod	_	_
22	doubtful	_	JJ	JJ	_	18	dep	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	my	_	PRP$	PRP$	_	27	poss	_	_
25	always	_	RB	RB	_	26	advmod	_	_
26	low	_	JJ	JJ	_	27	amod	_	_
27	self-esteem	_	NN	NN	_	23	pobj	_	_
28	.	_	.	.	_	2	punct	_	_
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	have	_	VBP	VBP	_	0	root	_	_
3	no	_	DT	DT	_	4	neg	_	_
4	ability	_	NN	NN	_	2	dobj	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	concentrate	_	VB	VB	_	4	vmod	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	work	_	NN	NN	_	7	pobj	_	_
9	,	_	,	,	_	6	punct	_	_
10	often	_	RB	RB	_	11	advmod	_	_
11	find	_	VB	VB	_	6	conj	_	_
12	myself	_	PRP	PRP	_	13	nsubj	_	_
13	becoming	_	VBG	VBG	_	11	dep	_	_
14	very	_	RB	RB	_	15	advmod	_	_
15	quiet	_	JJ	JJ	_	13	acomp	_	_
16	in	_	IN	IN	_	13	prep	_	_
17	social	_	JJ	JJ	_	18	amod	_	_
18	occasions	_	NNS	NNS	_	16	pobj	_	_
19	,	_	,	,	_	6	punct	_	_
20	and	_	CC	CC	_	6	cc	_	_
21	doubt	_	VB	VB	_	6	conj	_	_
22	myself	_	PRP	PRP	_	21	dobj	_	_
23	over	_	IN	IN	_	21	prep	_	_
24	anything	_	NN	NN	_	23	pobj	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	everything	_	NN	NN	_	24	conj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, m2 / make-02)
(a / and, op, o / overwhelm-01)
(a3 / and, op, d2 / doubt-01)
(a3 / and, op, f2 / find-01)
(a4 / and, op, a5 / anything)
(a4 / and, op, e3 / everything)
(b / become-01, ARG1, i3 / i)
(b / become-01, ARG2, q / quiet-01)
(c2 / concentrate-01, ARG0, i3 / i)
(c2 / concentrate-01, ARG1, w / work-01)
(c3 / credible, polarity, - / -)
(d / doubt-01, ARG0, i / i)
(d / doubt-01, ARG1, e / esteem)
(d / doubt-01, degree, m3 / more)
(d2 / doubt-01, ARG0, i3 / i)
(d2 / doubt-01, ARG1, i3 / i)
(d2 / doubt-01, topic, a4 / and)
(e / esteem, mod, l2 / low)
(e / esteem, mod, s / self)
(e / esteem, poss, i / i)
(f / feel-01, ARG0, i / i)
(f / feel-01, time, m4 / moment)
(f2 / find-01, ARG0, i3 / i)
(f2 / find-01, ARG1, b / become-01)
(f2 / find-01, frequency, o3 / often)
(l2 / low, time, a2 / always)
(m2 / make-02, ARG0, i / i)
(m2 / make-02, ARG1, d / doubt-01)
(m3 / more, mod, e2 / ever)
(o / overwhelm-01, ARG0, p / problem)
(o / overwhelm-01, degree, c3 / credible)
(o2 / occasion, mod, s2 / society)
(q / quiet-01, ARG1, i3 / i)
(q / quiet-01, degree, v / very)
(q / quiet-01, time, o2 / occasion)

Input(Some(Graph((multi-sentence :snt1 (feel-01 :time moment :ARG1 (thing :ARG1-of (resemble-01 :ARG2 (and :op (make-02 :ARG1 (doubt-01 :degree (more :mod ever) :ARG1 (esteem :mod (low :time always) :mod self :poss i) :ARG0 i) :ARG0 i) :op (overwhelm-01 :degree (credible :polarity -) :ARG0 (problem :part-of (live-01 :ARG0 i)))))) :ARG0 i) :snt2 (and :op (doubt-01 :topic (and :op everything :op anything) :ARG0 i :ARG1 i) :op (find-01 :frequency often :ARG1 (become-01 :ARG2 (quiet-01 :time (occasion :mod society) :degree very :ARG1 i) :ARG1 i) :ARG0 i) :op (capable-41 :polarity - :ARG1 i :ARG2 (concentrate-01 :ARG1 work-01 :ARG0 i)))),ArrayBuffer(Span(32,33,List(0),no,-,false), Span(1,2,List(1),feel,feel-01,false), Span(4,5,List(2),moment,moment,false), Span(15,16,List(3),and,and,false), Span(17,18,List(4),making,make-02,false), Span(50,51,List(5),doubt,doubt-01,false), Span(20,21,List(6),more,more,false), Span(19,20,List(7),ever,ever,false), Span(28,29,List(8),esteem,esteem,false), Span(25,26,List(9),low,low,false), Span(24,25,List(10),always,always,false), Span(26,27,List(11),self,self,false), Span(13,14,List(12),overwhelming,overwhelm-01,false), Span(7,8,List(13),problems,problem,false), Span(0,1,List(14),I,i,false), Span(49,50,List(15),and,and,false), Span(54,55,List(16),and,and,false), Span(55,56,List(17),everything,everything,false), Span(53,54,List(18),anything,anything,false), Span(40,41,List(19),find,find-01,false), Span(39,40,List(20),often,often,false), Span(42,43,List(21),becoming,become-01,false), Span(44,45,List(22),quiet,quiet-01,false), Span(47,48,List(23),occasions,occasion,false), Span(43,44,List(24),very,very,false), Span(30,31,List(25),I,i,false), Span(35,36,List(26),concentrate,concentrate-01,false), Span(37,38,List(27),work,work-01,false), Span(12,13,List(28),incredibly,credible,false), Span(21,22,List(29),doubtful,doubt-01,false), Span(46,47,List(30),social,society,false)),Map(30 -> society, 2 -> moment, 5 -> doubt-01, 27 -> work-01, 12 -> overwhelm-01, 15 -> and, 8 -> esteem, 21 -> become-01, 18 -> anything, 24 -> very, 7 -> ever, 17 -> everything, 1 -> feel-01, 23 -> occasion, 26 -> concentrate-01, 4 -> make-02, 11 -> self, 14 -> i, 29 -> doubt-01, 20 -> often, 28 -> credible, 6 -> more, 9 -> low, 0 -> -, 22 -> quiet-01, 16 -> and, 19 -> find-01, 10 -> always, 3 -> and, 25 -> i, 13 -> problem),Map(e -> esteem, m3 -> more, w -> work-01, q -> quiet-01, s2 -> society, b -> become-01, m2 -> make-02, o3 -> often, e2 -> ever, a3 -> and, s -> self, v -> very, d -> doubt-01, i3 -> i, p -> problem, c3 -> credible, a -> and, d2 -> doubt-01, o2 -> occasion, a5 -> anything, m4 -> moment, l2 -> low, i -> i, a2 -> always, - -> -, f2 -> find-01, f -> feel-01, o -> overwhelm-01, e3 -> everything, c2 -> concentrate-01, a4 -> and))),[Ljava.lang.String;@30b6ffe0,Annotation([Ljava.lang.String;@791d1f8b,[Ljava.lang.String;@2415fc55,[Ljava.lang.String;@14f232c4),Annotation([Ljava.lang.String;@13bc8645,[Ljava.lang.String;@24c22fe,[Ledu.cmu.lti.nlp.amr.Dependency;@93081b6),Annotation([Ljava.lang.String;@cd1e646,[Ljava.lang.String;@7ba8c737,[Ljava.lang.String;@1890516e),Annotation([Ljava.lang.String;@15a04efb,[Ljava.lang.String;@16c069df,[Ledu.cmu.lti.nlp.amr.Entity;@2bec854f))
AMR:
(a / and, op, m2 / make-02)
(a3 / and, op, d / doubt-01)
(a3 / and, op, o2 / occasion)
(a4 / and, op, a5 / anything)
(a4 / and, op, e3 / everything)
(b / become-01, ARG0, i / i)
(b / become-01, ARG1, - / -)
(c2 / concentrate-01, ARG0, i / i)
(c2 / concentrate-01, ARG1, a2 / always)
(d / doubt-01, ARG0, i / i)
(d / doubt-01, ARG1, a5 / anything)
(d2 / doubt-01, ARG1, s / self)
(d2 / doubt-01, degree, m3 / more)
(e / esteem, mod, s / self)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, m4 / moment)
(f2 / find-01, ARG1, b / become-01)
(f2 / find-01, ARG6, o3 / often)
(l2 / low, time, a2 / always)
(m2 / make-02, ARG0, p / problem)
(m2 / make-02, ARG1, e2 / ever)
(m3 / more, mod, e2 / ever)
(o / overwhelm-01, ARG1, p / problem)
(o / overwhelm-01, ARG2, f / feel-01)
(o / overwhelm-01, ARG6, c3 / credible)
(q / quiet-01, ARG0, i / i)
(q / quiet-01, ARG1, s2 / society)
(q / quiet-01, ARG6, v / very)
(w / work-01, ARG0, i / i)
(w / work-01, ARG1, i3 / i)

WARNING: makeIds can't find span Id: 0.0.1.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1.0.0.1.0
Decoded in 2,512,458 microseconds
Sentence: Neither of my counsellers have diagnosed me with depression, and both have suggested I do not suffer from it, but it is a huge worry to me, as depression was the cause of my dad's death, suicide.

Oracle Span 1:  and => and
Oracle Span 2:  but => contrast-01
Oracle Span 3:  cause => cause-01
Oracle Span 4:  counsellers => (person :ARG0-of counsel-01)
Oracle Span 5:  dad => dad
Oracle Span 6:  death => die-01
Oracle Span 7:  depression => depression
Oracle Span 8:  depression => depression
Oracle Span 9:  diagnosed => diagnose-01
Oracle Span 10:  huge => huge
Oracle Span 11:  I => i
Oracle Span 12:  suffer => suffer-01
Oracle Span 13:  suggested => suggest-01
Oracle Span 14:  suicide => suicide
Oracle Span 15:  worry => worry-01
Spans:
Span 10-11:  and => and
Span 21-22:  but => contrast-01
Span 34-35:  cause => cause-01
Span 3-4:  counsellers => (person :ARG0-of counsel-01)
Span 37-38:  dad => dad
Span 39-40:  death => die-01
Span 8-9:  depression => depression
Span 31-32:  depression => depression
Span 5-6:  diagnosed => diagnose-01
Span 25-26:  huge => huge
Span 14-15:  I => i
Span 17-18:  suffer => suffer-01
Span 13-14:  suggested => suggest-01
Span 41-42:  suicide => suicide
Span 26-27:  worry => worry-01

Langrangian relaxation converged after 57 iterations. Delta = 0.0
Oracle Span 10-11:  and => and
Oracle Span 21-22:  but => contrast-01
Oracle Span 34-35:  cause => cause-01
Oracle Span 3-4:  counsellers => (person :ARG0-of counsel-01)
Oracle Span 37-38:  dad => dad
Oracle Span 39-40:  death => die-01
Oracle Span 8-9:  depression => depression
Oracle Span 31-32:  depression => depression
Oracle Span 5-6:  diagnosed => diagnose-01
Oracle Span 25-26:  huge => huge
Oracle Span 14-15:  I => i
Oracle Span 17-18:  suffer => suffer-01
Oracle Span 13-14:  suggested => suggest-01
Oracle Span 41-42:  suicide => suicide
Oracle Span 26-27:  worry => worry-01

Dependencies:
1	Neither	_	DT	DT	_	6	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	my	_	PRP$	PRP$	_	4	poss	_	_
4	counsellers	_	NNS	NNS	_	2	pobj	_	_
5	have	_	VBP	VBP	_	6	aux	_	_
6	diagnosed	_	VBN	VBN	_	0	root	_	_
7	me	_	PRP	PRP	_	6	dobj	_	_
8	with	_	IN	IN	_	6	prep	_	_
9	depression	_	NN	NN	_	8	pobj	_	_
10	,	_	,	,	_	6	punct	_	_
11	and	_	CC	CC	_	6	cc	_	_
12	both	_	DT	DT	_	14	nsubj	_	_
13	have	_	VBP	VBP	_	14	aux	_	_
14	suggested	_	VBN	VBN	_	6	conj	_	_
15	I	_	PRP	PRP	_	18	nsubj	_	_
16	do	_	VBP	VBP	_	18	aux	_	_
17	not	_	RB	RB	_	18	neg	_	_
18	suffer	_	VB	VB	_	14	ccomp	_	_
19	from	_	IN	IN	_	18	prep	_	_
20	it	_	PRP	PRP	_	19	pobj	_	_
21	,	_	,	,	_	6	punct	_	_
22	but	_	CC	CC	_	6	cc	_	_
23	it	_	PRP	PRP	_	27	nsubj	_	_
24	is	_	VBZ	VBZ	_	27	cop	_	_
25	a	_	DT	DT	_	27	det	_	_
26	huge	_	JJ	JJ	_	27	amod	_	_
27	worry	_	NN	NN	_	6	conj	_	_
28	to	_	TO	TO	_	27	prep	_	_
29	me	_	PRP	PRP	_	28	pobj	_	_
30	,	_	,	,	_	27	punct	_	_
31	as	_	IN	IN	_	35	mark	_	_
32	depression	_	NN	NN	_	35	nsubj	_	_
33	was	_	VBD	VBD	_	35	cop	_	_
34	the	_	DT	DT	_	35	det	_	_
35	cause	_	NN	NN	_	27	advcl	_	_
36	of	_	IN	IN	_	35	prep	_	_
37	my	_	PRP$	PRP$	_	38	poss	_	_
38	dad	_	NN	NN	_	40	poss	_	_
39	's	_	POS	POS	_	38	possessive	_	_
40	death	_	NN	NN	_	36	pobj	_	_
41	,	_	,	,	_	40	punct	_	_
42	suicide	_	NN	NN	_	40	appos	_	_
43	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, d / diagnose-01)
(a / and, op, s / suggest-01)
(c / contrast-01, ARG1, a / and)
(c / contrast-01, ARG2, w / worry-01)
(c2 / counsel-01, ARG0, p / person)
(c2 / counsel-01, ARG1, i / i)
(c4 / cause-01, ARG0, d3 / depression)
(c4 / cause-01, ARG1, w / worry-01)
(d / diagnose-01, ARG0, p / person)
(d / diagnose-01, ARG1, i / i)
(d / diagnose-01, ARG2, d2 / depression)
(d4 / die-01, ARG1, d5 / dad)
(d5 / dad, poss, i / i)
(s / suggest-01, ARG0, p / person)
(s / suggest-01, ARG1, s2 / suffer-01)
(s2 / suffer-01, ARG0, i / i)
(s2 / suffer-01, ARG1, d2 / depression)
(s3 / suicide, poss, d5 / dad)
(w / worry-01, ARG0, d2 / depression)
(w / worry-01, ARG1, i / i)
(w / worry-01, mod, h / huge)

Input(Some(Graph((contrast-01 :ARG2 (worry-01 :ARG1-of (cause-01 :ARG0 (depression :ARG0-of (cause-01 :ARG1 (suicide :poss dad)) :ARG0-of (cause-01 :ARG1 (die-01 :ARG1 (dad :poss i))))) :mod huge :ARG0 depression :ARG1 i) :ARG1 (and :op (suggest-01 :ARG1 (suffer-01 :polarity - :ARG0 i :ARG1 depression) :ARG0 person) :op (diagnose-01 :ARG2 depression :ARG1 i :ARG0 (person :ARG0-of (counsel-01 :ARG1 i) :quant 2) :polarity -))),ArrayBuffer(Span(21,22,List(0),but,contrast-01,false), Span(26,27,List(1),worry,worry-01,false), Span(34,35,List(2),cause,cause-01,false), Span(8,9,List(3),depression,depression,false), Span(41,42,List(4),suicide,suicide,false), Span(39,40,List(5),death,die-01,false), Span(37,38,List(6),dad,dad,false), Span(25,26,List(7),huge,huge,false), Span(10,11,List(8),and,and,false), Span(13,14,List(9),suggested,suggest-01,false), Span(17,18,List(10),suffer,suffer-01,false), Span(5,6,List(11),diagnosed,diagnose-01,false), Span(31,32,List(12),depression,depression,false), Span(14,15,List(13),I,i,false), Span(3,4,List(14, 15),counsellers,(person :ARG0-of counsel-01),false)),Map(2 -> cause-01, 5 -> die-01, 12 -> depression, 15 -> counsel-01, 8 -> and, 7 -> huge, 1 -> worry-01, 4 -> suicide, 11 -> diagnose-01, 14 -> person, 6 -> dad, 9 -> suggest-01, 0 -> contrast-01, 10 -> suffer-01, 3 -> depression, 13 -> i),Map(w -> worry-01, h -> huge, s2 -> suffer-01, d3 -> depression, c4 -> cause-01, s -> suggest-01, d -> diagnose-01, p -> person, a -> and, d2 -> depression, d5 -> dad, i -> i, s3 -> suicide, c -> contrast-01, d4 -> die-01, c2 -> counsel-01))),[Ljava.lang.String;@31edaa7d,Annotation([Ljava.lang.String;@26adfd2d,[Ljava.lang.String;@3336e6b6,[Ljava.lang.String;@7c3fdb62),Annotation([Ljava.lang.String;@205d38da,[Ljava.lang.String;@6950ed69,[Ledu.cmu.lti.nlp.amr.Dependency;@6dd7b5a3),Annotation([Ljava.lang.String;@6f3187b0,[Ljava.lang.String;@2663e964,[Ljava.lang.String;@48b67364),Annotation([Ljava.lang.String;@189cbd7c,[Ljava.lang.String;@7bf3a5d8,[Ledu.cmu.lti.nlp.amr.Entity;@42e25b0b))
AMR:
(a / and, op, s / suggest-01)
(c / contrast-01, ARG1, d / diagnose-01)
(c / contrast-01, ARG2, s / suggest-01)
(c2 / counsel-01, ARG0, p / person)
(c4 / cause-01, ARG0, d2 / depression)
(c4 / cause-01, ARG1, d4 / die-01)
(d / diagnose-01, ARG0, p / person)
(d / diagnose-01, ARG1, w / worry-01)
(d / diagnose-01, location, d3 / depression)
(d4 / die-01, ARG1, d5 / dad)
(d4 / die-01, location, s3 / suicide)
(s / suggest-01, ARG1, s2 / suffer-01)
(s2 / suffer-01, ARG1, i / i)
(w / worry-01, ARG1, d2 / depression)
(w / worry-01, mod, h / huge)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
Decoded in 1,160,496 microseconds
Sentence: I have tried to solve my problems before, and have found exercise and meditation particularly useful, and have also tried things like self-help books and tapes. But my general feeling, is, 'Is this what my life will be? My one chance at existance, my one chance of being a young man, I am wasting it!' And these feelings are beating away at me.

Oracle Span 1:  also => also
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  and => and
Oracle Span 6:  away => away
Oracle Span 7:  beating => beat-02
Oracle Span 8:  before => before
Oracle Span 9:  books => book
Oracle Span 10:  But => contrast-01
Oracle Span 11:  chance => chance
Oracle Span 12:  chance => chance
Oracle Span 13:  exercise => exercise
Oracle Span 14:  existance => exist-01
Oracle Span 15:  feeling => feel-01
Oracle Span 16:  feelings => (thing :ARG1-of feel-01)
Oracle Span 17:  found => find-02
Oracle Span 18:  general => general
Oracle Span 19:  help => help-01
Oracle Span 20:  I => i
Oracle Span 21:  I => i
Oracle Span 22:  man => man
Oracle Span 23:  meditation => meditation
Oracle Span 24:  one => one
Oracle Span 25:  particularly => particular
Oracle Span 26:  problems => problem
Oracle Span 27:  self => self
Oracle Span 28:  solve => solve-01
Oracle Span 29:  tapes => tape
Oracle Span 30:  things => thing
Oracle Span 31:  this => this
Oracle Span 32:  tried => try-01
Oracle Span 33:  tried => try-01
Oracle Span 34:  useful => useful
Oracle Span 35:  wasting => waste-01
Oracle Span 36:  young => young
Spans:
Span 20-21:  also => also
Span 9-10:  and => and
Span 13-14:  and => and
Span 18-19:  and => and
Span 28-29:  and => and
Span 73-74:  away => away
Span 72-73:  beating => beat-02
Span 7-8:  before => before
Span 27-28:  books => book
Span 31-32:  But => contrast-01
Span 49-50:  chance => chance
Span 55-56:  chance => chance
Span 12-13:  exercise => exercise
Span 51-52:  existance => exist-01
Span 34-35:  feeling => feel-01
Span 70-71:  feelings => (thing :ARG1-of feel-01)
Span 11-12:  found => find-02
Span 33-34:  general => general
Span 26-27:  help => help-01
Span 0-1:  I => i
Span 62-63:  I => i
Span 60-61:  man => man
Span 14-15:  meditation => meditation
Span 48-49:  one => one
Span 15-16:  particularly => particular
Span 6-7:  problems => problem
Span 24-25:  self => self
Span 4-5:  solve => solve-01
Span 29-30:  tapes => tape
Span 22-23:  things => thing
Span 40-41:  this => this
Span 2-3:  tried => try-01
Span 21-22:  tried => try-01
Span 16-17:  useful => useful
Span 64-65:  wasting => waste-01
Span 59-60:  young => young

 *** WARNING: The dependency tree seems broken.  I can't find the head of But in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of general in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of feeling in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of Is in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of what in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of life in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of My in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of one in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of chance in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of existance in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of one in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of chance in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of young in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of man in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of am in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of wasting in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of it in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of And in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of these in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of feelings in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of beating in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of away in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of me in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 74
Langrangian relaxation converged after 56 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of But in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of general in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of feeling in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of Is in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of what in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of life in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of My in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of one in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of chance in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of existance in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of one in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of chance in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of young in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of man in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of am in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of wasting in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of it in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of And in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of these in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of feelings in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of beating in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of away in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of me in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 74
Oracle Span 20-21:  also => also
Oracle Span 9-10:  and => and
Oracle Span 13-14:  and => and
Oracle Span 18-19:  and => and
Oracle Span 28-29:  and => and
Oracle Span 73-74:  away => away
Oracle Span 72-73:  beating => beat-02
Oracle Span 7-8:  before => before
Oracle Span 27-28:  books => book
Oracle Span 31-32:  But => contrast-01
Oracle Span 49-50:  chance => chance
Oracle Span 55-56:  chance => chance
Oracle Span 12-13:  exercise => exercise
Oracle Span 51-52:  existance => exist-01
Oracle Span 34-35:  feeling => feel-01
Oracle Span 70-71:  feelings => (thing :ARG1-of feel-01)
Oracle Span 11-12:  found => find-02
Oracle Span 33-34:  general => general
Oracle Span 26-27:  help => help-01
Oracle Span 0-1:  I => i
Oracle Span 62-63:  I => i
Oracle Span 60-61:  man => man
Oracle Span 14-15:  meditation => meditation
Oracle Span 48-49:  one => one
Oracle Span 15-16:  particularly => particular
Oracle Span 6-7:  problems => problem
Oracle Span 24-25:  self => self
Oracle Span 4-5:  solve => solve-01
Oracle Span 29-30:  tapes => tape
Oracle Span 22-23:  things => thing
Oracle Span 40-41:  this => this
Oracle Span 2-3:  tried => try-01
Oracle Span 21-22:  tried => try-01
Oracle Span 16-17:  useful => useful
Oracle Span 64-65:  wasting => waste-01
Oracle Span 59-60:  young => young

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	tried	_	VBN	VBN	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	solve	_	VB	VB	_	3	xcomp	_	_
6	my	_	PRP$	PRP$	_	7	poss	_	_
7	problems	_	NNS	NNS	_	5	dobj	_	_
8	before	_	RB	RB	_	5	advmod	_	_
9	,	_	,	,	_	5	punct	_	_
10	and	_	CC	CC	_	5	cc	_	_
11	have	_	VB	VB	_	12	aux	_	_
12	found	_	VBN	VBN	_	5	conj	_	_
13	exercise	_	NN	NN	_	12	dobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	meditation	_	NN	NN	_	13	conj	_	_
16	particularly	_	RB	RB	_	17	advmod	_	_
17	useful	_	JJ	JJ	_	13	amod	_	_
18	,	_	,	,	_	5	punct	_	_
19	and	_	CC	CC	_	5	cc	_	_
20	have	_	VB	VB	_	22	aux	_	_
21	also	_	RB	RB	_	22	advmod	_	_
22	tried	_	VBN	VBN	_	5	conj	_	_
23	things	_	NNS	NNS	_	22	dobj	_	_
24	like	_	IN	IN	_	22	prep	_	_
25	self-help	_	JJ	JJ	_	26	amod	_	_
26	books	_	NNS	NNS	_	24	pobj	_	_
27	and	_	CC	CC	_	26	cc	_	_
28	tapes	_	NNS	NNS	_	26	conj	_	_
29	.	_	.	.	_	3	punct	_	_
1	But	_	CC	CC	_	6	cc	_	_
2	my	_	PRP$	PRP$	_	3	poss	_	_
3	general	_	NN	NN	_	6	nsubj	_	_
4	feeling	_	VBG	VBG	_	3	vmod	_	_
5	,	_	,	,	_	6	punct	_	_
6	is	_	VBZ	VBZ	_	0	root	_	_
7	,	_	,	,	_	6	punct	_	_
8	'	_	``	``	_	6	punct	_	_
9	Is	_	VBZ	VBZ	_	6	dep	_	_
10	this	_	DT	DT	_	9	nsubj	_	_
11	what	_	WP	WP	_	15	dobj	_	_
12	my	_	PRP$	PRP$	_	13	poss	_	_
13	life	_	NN	NN	_	15	nsubj	_	_
14	will	_	MD	MD	_	15	aux	_	_
15	be	_	VB	VB	_	10	rcmod	_	_
16	?	_	.	.	_	6	punct	_	_
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	one	_	NN	NN	_	3	nsubj	_	_
3	chance	_	VBP	VBP	_	18	ccomp	_	_
4	at	_	IN	IN	_	3	prep	_	_
5	existance	_	NN	NN	_	4	pobj	_	_
6	,	_	,	,	_	5	punct	_	_
7	my	_	PRP$	PRP$	_	9	poss	_	_
8	one	_	CD	CD	_	9	num	_	_
9	chance	_	NN	NN	_	5	appos	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	being	_	VBG	VBG	_	14	cop	_	_
12	a	_	DT	DT	_	14	det	_	_
13	young	_	JJ	JJ	_	14	amod	_	_
14	man	_	NN	NN	_	10	pcomp	_	_
15	,	_	,	,	_	18	punct	_	_
16	I	_	PRP	PRP	_	18	nsubj	_	_
17	am	_	VBP	VBP	_	18	aux	_	_
18	wasting	_	VBG	VBG	_	0	root	_	_
19	it	_	PRP	PRP	_	18	dobj	_	_
20	!	_	.	.	_	18	punct	_	_
21	'	_	''	''	_	18	punct	_	_
1	And	_	CC	CC	_	5	cc	_	_
2	these	_	DT	DT	_	3	det	_	_
3	feelings	_	NNS	NNS	_	5	nsubj	_	_
4	are	_	VBP	VBP	_	5	aux	_	_
5	beating	_	VBG	VBG	_	0	root	_	_
6	away	_	RP	RP	_	5	prt	_	_
7	at	_	IN	IN	_	5	prep	_	_
8	me	_	PRP	PRP	_	7	pobj	_	_
9	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, f / find-02)
(a / and, op, t / try-01)
(a / and, op, t2 / try-01)
(a2 / and, op, e / exercise)
(a2 / and, op, m2 / meditation)
(a3 / and, op, b2 / book)
(a3 / and, op, t4 / tape)
(a5 / and, op, c2 / chance)
(a5 / and, op, c3 / chance)
(b3 / beat-02, ARG1, t7 / thing)
(b3 / beat-02, ARG2, a6 / away)
(c / contrast-01, ARG2, f2 / feel-01)
(c2 / chance, mod, o / one)
(c2 / chance, prep-at, e2 / exist-01)
(c3 / chance, mod, o / one)
(f / find-02, ARG0, i / i)
(f / find-02, ARG1, u / useful)
(f2 / feel-01, ARG0, i2 / i)
(f2 / feel-01, mod, g / general)
(f3 / feel-01, ARG1, t7 / thing)
(h / help-01, ARG0, b2 / book)
(h / help-01, ARG0, t4 / tape)
(h / help-01, mod, s2 / self)
(m3 / man, consist, c3 / chance)
(m3 / man, mod, y / young)
(p / problem, poss, i / i)
(s / solve-01, ARG0, i / i)
(s / solve-01, ARG1, p / problem)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, s / solve-01)
(t / try-01, time, b / before)
(t2 / try-01, ARG0, i / i)
(t2 / try-01, ARG1, t3 / thing)
(t2 / try-01, mod, a4 / also)
(t3 / thing, example, a3 / and)
(u / useful, domain, a2 / and)
(u / useful, mod, p2 / particular)
(w / waste-01, ARG1, a5 / and)

Input(Some(Graph((multi-sentence :snt1 (and :op (try-01 :mod also :ARG1 (thing :example (and :op (tape :ARG0-of help-01) :op (book :ARG0-of (help-01 :mod self)))) :ARG0 i) :op (find-02 :ARG1 (useful :domain (and :op meditation :op exercise) :mod particular) :ARG0 i) :op (try-01 :time before :ARG1 (solve-01 :ARG1 (problem :poss i) :ARG0 i) :ARG0 i)) :snt2 (contrast-01 :ARG2 (feel-01 :mod general :ARG1 (thing :mode interrogative :ARG1-of (live-01 :ARG0 i) :domain this) :ARG0 i)) :snt3 (waste-01 :ARG1 (and :op (chance :consist-of (man :mod young :domain i) :poss i :mod one) :op (chance :mod one :prep-at (exist-01 :ARG1 i) :poss i)) :ARG0 i :mode expressive) :snt4 (beat-02 :ARG2 away :ARG1 (thing :mod this :ARG1-of (feel-01 :ARG0 i)) :prep-at i)),ArrayBuffer(Span(9,10,List(0),and,and,false), Span(2,3,List(1),tried,try-01,false), Span(20,21,List(2),also,also,false), Span(22,23,List(3),things,thing,false), Span(13,14,List(4),and,and,false), Span(29,30,List(5),tapes,tape,false), Span(27,28,List(6),books,book,false), Span(26,27,List(7),help,help-01,false), Span(24,25,List(8),self,self,false), Span(11,12,List(9),found,find-02,false), Span(16,17,List(10),useful,useful,false), Span(18,19,List(11),and,and,false), Span(14,15,List(12),meditation,meditation,false), Span(12,13,List(13),exercise,exercise,false), Span(21,22,List(14),tried,try-01,false), Span(7,8,List(15),before,before,false), Span(4,5,List(16),solve,solve-01,false), Span(6,7,List(17),problems,problem,false), Span(0,1,List(18),I,i,false), Span(31,32,List(19),But,contrast-01,false), Span(34,35,List(20),feeling,feel-01,false), Span(33,34,List(21),general,general,false), Span(40,41,List(22),this,this,false), Span(62,63,List(23),I,i,false), Span(64,65,List(24),wasting,waste-01,false), Span(28,29,List(25),and,and,false), Span(49,50,List(26),chance,chance,false), Span(60,61,List(27),man,man,false), Span(59,60,List(28),young,young,false), Span(55,56,List(29),chance,chance,false), Span(48,49,List(30),one,one,false), Span(72,73,List(31),beating,beat-02,false), Span(73,74,List(32),away,away,false), Span(15,16,List(33),particularly,particular,false), Span(51,52,List(34),existance,exist-01,false), Span(70,71,List(35, 36),feelings,(thing :ARG1-of feel-01),false)),Map(30 -> one, 2 -> also, 5 -> tape, 33 -> particular, 27 -> man, 12 -> meditation, 15 -> before, 8 -> self, 36 -> feel-01, 21 -> general, 18 -> i, 24 -> waste-01, 35 -> thing, 7 -> help-01, 17 -> problem, 1 -> try-01, 23 -> i, 26 -> chance, 4 -> and, 11 -> and, 32 -> away, 14 -> try-01, 29 -> chance, 20 -> feel-01, 34 -> exist-01, 28 -> young, 6 -> book, 9 -> find-02, 0 -> and, 22 -> this, 16 -> solve-01, 19 -> contrast-01, 10 -> useful, 3 -> thing, 31 -> beat-02, 25 -> and, 13 -> exercise),Map(m3 -> man, e -> exercise, b3 -> beat-02, w -> waste-01, h -> help-01, t4 -> tape, s2 -> self, t -> try-01, b -> before, m2 -> meditation, b2 -> book, e2 -> exist-01, p2 -> particular, a3 -> and, t6 -> this, s -> solve-01, a6 -> away, t3 -> thing, y -> young, g -> general, p -> problem, c3 -> chance, a -> and, a5 -> and, f3 -> feel-01, i2 -> i, t2 -> try-01, i -> i, a2 -> and, c -> contrast-01, f2 -> feel-01, u -> useful, f -> find-02, o -> one, c2 -> chance, t7 -> thing, a4 -> also))),[Ljava.lang.String;@39b43d60,Annotation([Ljava.lang.String;@44be0077,[Ljava.lang.String;@2205a05d,[Ljava.lang.String;@72ef8d15),Annotation([Ljava.lang.String;@6aa8e115,[Ljava.lang.String;@5e21e98f,[Ledu.cmu.lti.nlp.amr.Dependency;@51a9ad5e),Annotation([Ljava.lang.String;@5f20155b,[Ljava.lang.String;@72ade7e3,[Ljava.lang.String;@239105a8),Annotation([Ljava.lang.String;@3fce8fd9,[Ljava.lang.String;@609bcfb6,[Ledu.cmu.lti.nlp.amr.Entity;@7d94beb9))
AMR:
(a / and, op, f / find-02)
(a / and, op, s / solve-01)
(a2 / and, op, f / find-02)
(a2 / and, op, t / try-01)
(a3 / and, op, e / exercise)
(a3 / and, op, m2 / meditation)
(a5 / and, op, t4 / tape)
(b3 / beat-02, ARG1, a2 / and)
(b3 / beat-02, ARG6, a6 / away)
(c / contrast-01, ARG1, a / and)
(c2 / chance, purpose, a2 / and)
(c3 / chance, purpose, a2 / and)
(e / exercise, mod, u / useful)
(e2 / exist-01, ARG1, a2 / and)
(f / find-02, ARG1, a3 / and)
(f2 / feel-01, ARG1, g / general)
(f2 / feel-01, ARG3, a / and)
(f3 / feel-01, ARG1, t7 / thing)
(f3 / feel-01, ARG3, a2 / and)
(h / help-01, ARG1, b2 / book)
(h / help-01, mod, s2 / self)
(i2 / i, purpose, a2 / and)
(m3 / man, purpose, a2 / and)
(o / one, purpose, a2 / and)
(s / solve-01, ARG1, p / problem)
(t / try-01, ARG0, b2 / book)
(t / try-01, ARG1, t3 / thing)
(t / try-01, ARG2, a5 / and)
(t / try-01, mod, a4 / also)
(t2 / try-01, ARG0, i / i)
(t2 / try-01, ARG1, s / solve-01)
(t2 / try-01, ARG6, b / before)
(t6 / this, purpose, a2 / and)
(u / useful, mod, p2 / particular)
(w / waste-01, ARG1, a2 / and)
(y / young, purpose, a2 / and)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1.2
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.1
WARNING: makeIds can't find span Id: 0.2.2.1.0
WARNING: makeIds can't find span Id: 0.2.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.2.2.0.1
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.2.0.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.0
Decoded in 5,044,045 microseconds
Sentence: I simply don't know what to do, and when I think of things to do, I never follow through with it. Friends often say I'm lazy, and I can't disagree a lot of the time. I feel like everything anyone could do to help, people have tried, and time and time again I fail.

Oracle Span 1:  again => again
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  anyone => anyone
Oracle Span 6:  could => possible
Oracle Span 7:  disagree => disagree-01
Oracle Span 8:  do => do-02
Oracle Span 9:  do => (thing :ARG1-of do-02)
Oracle Span 10:  do => do-02
Oracle Span 11:  everything => everything
Oracle Span 12:  fail => fail-01
Oracle Span 13:  feel => feel-01
Oracle Span 14:  follow => follow-07
Oracle Span 15:  Friends => friend
Oracle Span 16:  help => help-01
Oracle Span 17:  I => i
Oracle Span 18:  I => i
Oracle Span 19:  I => i
Oracle Span 20:  know => know-01
Oracle Span 21:  lazy => lazy
Oracle Span 22:  lot => lot
Oracle Span 23:  often => often
Oracle Span 24:  say => say-01
Oracle Span 25:  simply => simple
Oracle Span 26:  things => thing
Oracle Span 27:  think => think-01
Oracle Span 28:  time => time
Oracle Span 29:  time => time
Oracle Span 30:  time => time
Oracle Span 31:  tried => try-01
Spans:
Span 61-62:  again => again
Span 9-10:  and => and
Span 32-33:  and => and
Span 57-58:  and => and
Span 47-48:  anyone => anyone
Span 48-49:  could => possible
Span 36-37:  disagree => disagree-01
Span 2-3:  do => do-02
Span 7-8:  do => (thing :ARG1-of do-02)
Span 16-17:  do => do-02
Span 46-47:  everything => everything
Span 63-64:  fail => fail-01
Span 44-45:  feel => feel-01
Span 20-21:  follow => follow-07
Span 25-26:  Friends => friend
Span 51-52:  help => help-01
Span 0-1:  I => i
Span 11-12:  I => i
Span 18-19:  I => i
Span 4-5:  know => know-01
Span 30-31:  lazy => lazy
Span 38-39:  lot => lot
Span 26-27:  often => often
Span 27-28:  say => say-01
Span 1-2:  simply => simple
Span 14-15:  things => thing
Span 12-13:  think => think-01
Span 41-42:  time => time
Span 58-59:  time => time
Span 60-61:  time => time
Span 55-56:  tried => try-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of Friends in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of often in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of say in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of 'm in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of lazy in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of ca in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of disagree in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of lot in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of like in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of everything in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of anyone in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of could in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of help in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of tried in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of again in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of fail in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 64
Langrangian relaxation converged after 20 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Friends in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of often in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of say in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of 'm in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of lazy in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of ca in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of disagree in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of lot in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of like in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of everything in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of anyone in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of could in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of help in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of tried in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of again in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of fail in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 64
Oracle Span 61-62:  again => again
Oracle Span 9-10:  and => and
Oracle Span 32-33:  and => and
Oracle Span 57-58:  and => and
Oracle Span 47-48:  anyone => anyone
Oracle Span 48-49:  could => possible
Oracle Span 36-37:  disagree => disagree-01
Oracle Span 2-3:  do => do-02
Oracle Span 7-8:  do => (thing :ARG1-of do-02)
Oracle Span 16-17:  do => do-02
Oracle Span 46-47:  everything => everything
Oracle Span 63-64:  fail => fail-01
Oracle Span 44-45:  feel => feel-01
Oracle Span 20-21:  follow => follow-07
Oracle Span 25-26:  Friends => friend
Oracle Span 51-52:  help => help-01
Oracle Span 0-1:  I => i
Oracle Span 11-12:  I => i
Oracle Span 18-19:  I => i
Oracle Span 4-5:  know => know-01
Oracle Span 30-31:  lazy => lazy
Oracle Span 38-39:  lot => lot
Oracle Span 26-27:  often => often
Oracle Span 27-28:  say => say-01
Oracle Span 1-2:  simply => simple
Oracle Span 14-15:  things => thing
Oracle Span 12-13:  think => think-01
Oracle Span 41-42:  time => time
Oracle Span 58-59:  time => time
Oracle Span 60-61:  time => time
Oracle Span 55-56:  tried => try-01

Dependencies:
1	I	_	PRP	PRP	_	5	nsubj	_	_
2	simply	_	RB	RB	_	5	advmod	_	_
3	do	_	VBP	VBP	_	5	aux	_	_
4	n't	_	RB	RB	_	5	neg	_	_
5	know	_	VB	VB	_	0	root	_	_
6	what	_	WP	WP	_	8	nsubj	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	do	_	VB	VB	_	5	ccomp	_	_
9	,	_	,	,	_	5	punct	_	_
10	and	_	CC	CC	_	5	cc	_	_
11	when	_	WRB	WRB	_	13	advmod	_	_
12	I	_	PRP	PRP	_	13	nsubj	_	_
13	think	_	VBP	VBP	_	21	advcl	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	things	_	NNS	NNS	_	14	pobj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	do	_	VB	VB	_	13	xcomp	_	_
18	,	_	,	,	_	21	punct	_	_
19	I	_	PRP	PRP	_	21	nsubj	_	_
20	never	_	RB	RB	_	21	neg	_	_
21	follow	_	VBP	VBP	_	5	conj	_	_
22	through	_	RP	RP	_	21	prt	_	_
23	with	_	IN	IN	_	21	prep	_	_
24	it	_	PRP	PRP	_	23	pobj	_	_
25	.	_	.	.	_	5	punct	_	_
1	Friends	_	NNS	NNS	_	3	nsubj	_	_
2	often	_	RB	RB	_	3	advmod	_	_
3	say	_	VBP	VBP	_	0	root	_	_
4	I	_	PRP	PRP	_	6	nsubj	_	_
5	'm	_	VBP	VBP	_	6	cop	_	_
6	lazy	_	JJ	JJ	_	3	ccomp	_	_
7	,	_	,	,	_	3	punct	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	I	_	PRP	PRP	_	12	nsubj	_	_
10	ca	_	MD	MD	_	12	aux	_	_
11	n't	_	RB	RB	_	12	neg	_	_
12	disagree	_	VB	VB	_	3	conj	_	_
13	a	_	DT	DT	_	14	det	_	_
14	lot	_	NN	NN	_	12	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	time	_	NN	NN	_	15	pobj	_	_
18	.	_	.	.	_	3	punct	_	_
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	feel	_	VBP	VBP	_	0	root	_	_
3	like	_	IN	IN	_	7	mark	_	_
4	everything	_	NN	NN	_	5	nn	_	_
5	anyone	_	NN	NN	_	7	nsubj	_	_
6	could	_	MD	MD	_	7	aux	_	_
7	do	_	VB	VB	_	2	advcl	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	help	_	VB	VB	_	7	xcomp	_	_
10	,	_	,	,	_	13	punct	_	_
11	people	_	NNS	NNS	_	13	nsubj	_	_
12	have	_	VBP	VBP	_	13	aux	_	_
13	tried	_	VBN	VBN	_	2	dep	_	_
14	,	_	,	,	_	13	punct	_	_
15	and	_	CC	CC	_	2	cc	_	_
16	time	_	NN	NN	_	21	tmod	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	time	_	NN	NN	_	16	conj	_	_
19	again	_	RB	RB	_	16	advmod	_	_
20	I	_	PRP	PRP	_	21	nsubj	_	_
21	fail	_	VBP	VBP	_	2	conj	_	_
22	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, f / follow-07)
(a / and, op, k / know-01)
(a2 / and, op, p / possible)
(a2 / and, op, s2 / say-01)
(a4 / and, op, f3 / feel-01)
(a4 / and, op, f4 / fail-01)
(a6 / again, op, t7 / time)
(a6 / again, op, t8 / time)
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, t / thing)
(d2 / do-02, ARG0, i / i)
(d2 / do-02, ARG1, t3 / thing)
(d3 / do-02, ARG0, a5 / anyone)
(d3 / do-02, ARG1, e2 / everything)
(d3 / do-02, ARG2, h / help-01)
(d4 / disagree-01, ARG0, i2 / i)
(d4 / disagree-01, time, t4 / time)
(f / follow-07, ARG0, i / i)
(f / follow-07, ARG1, t3 / thing)
(f / follow-07, time, t2 / think-01)
(f3 / feel-01, ARG0, i3 / i)
(f4 / fail-01, ARG1, i3 / i)
(f4 / fail-01, mod, a6 / again)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t / thing)
(k / know-01, mod, s / simple)
(l / lazy, domain, i2 / i)
(p / possible, domain, d4 / disagree-01)
(s2 / say-01, ARG0, f2 / friend)
(s2 / say-01, ARG1, l / lazy)
(s2 / say-01, frequency, o / often)
(t2 / think-01, ARG0, i / i)
(t2 / think-01, ARG1, t3 / thing)
(t4 / time, quant, l2 / lot)
(t6 / try-01, ARG1, e2 / everything)

Input(Some(Graph((multi-sentence :snt1 (and :op (follow-07 :time ever :time (think-01 :ARG1 (thing :ARG1-of (do-02 :ARG0 i)) :ARG0 i) :polarity - :ARG0 i :ARG1 thing) :op (know-01 :mod simple :ARG1 (thing :ARG1-of (do-02 :ARG0 i)) :ARG0 i :polarity -)) :snt2 (and :op (possible :domain (disagree-01 :time (time :quant lot) :ARG0 i) :polarity -) :op (say-01 :frequency often :ARG1 (lazy :domain i) :ARG0 friend)) :snt3 (and :op (fail-01 :mod (again :op time :op time) :ARG1 i) :op (feel-01 :ARG1 (thing :ARG1-of (resemble-01 :ARG2 (try-01 :ARG1 (everything :ARG1-of (do-02 :mod possible :ARG2 help-01 :ARG0 anyone)) :ARG0 person))) :ARG0 i))),ArrayBuffer(Span(9,10,List(0),and,and,false), Span(20,21,List(1),follow,follow-07,false), Span(12,13,List(2),think,think-01,false), Span(14,15,List(3),things,thing,false), Span(2,3,List(4),do,do-02,false), Span(4,5,List(5),know,know-01,false), Span(7,8,List(6, 7),do,(thing :ARG1-of do-02),false), Span(0,1,List(8),I,i,false), Span(32,33,List(9),and,and,false), Span(48,49,List(10),could,possible,false), Span(36,37,List(11),disagree,disagree-01,false), Span(41,42,List(12),time,time,false), Span(38,39,List(13),lot,lot,false), Span(27,28,List(14),say,say-01,false), Span(26,27,List(15),often,often,false), Span(30,31,List(16),lazy,lazy,false), Span(11,12,List(17),I,i,false), Span(25,26,List(18),Friends,friend,false), Span(57,58,List(19),and,and,false), Span(63,64,List(20),fail,fail-01,false), Span(61,62,List(21),again,again,false), Span(58,59,List(22),time,time,false), Span(60,61,List(23),time,time,false), Span(44,45,List(24),feel,feel-01,false), Span(55,56,List(25),tried,try-01,false), Span(46,47,List(26),everything,everything,false), Span(16,17,List(27),do,do-02,false), Span(51,52,List(28),help,help-01,false), Span(47,48,List(29),anyone,anyone,false), Span(18,19,List(30),I,i,false), Span(1,2,List(31),simply,simple,false)),Map(30 -> i, 2 -> think-01, 5 -> know-01, 27 -> do-02, 12 -> time, 15 -> often, 8 -> i, 21 -> again, 18 -> friend, 24 -> feel-01, 7 -> do-02, 17 -> i, 1 -> follow-07, 23 -> time, 26 -> everything, 4 -> do-02, 11 -> disagree-01, 14 -> say-01, 29 -> anyone, 20 -> fail-01, 28 -> help-01, 6 -> thing, 9 -> and, 0 -> and, 22 -> time, 16 -> lazy, 19 -> and, 10 -> possible, 3 -> thing, 31 -> simple, 25 -> try-01, 13 -> lot),Map(h -> help-01, t4 -> time, s2 -> say-01, t -> thing, k -> know-01, d3 -> do-02, f4 -> fail-01, e2 -> everything, t6 -> try-01, s -> simple, a6 -> again, d -> do-02, t3 -> thing, i3 -> i, p -> possible, a -> and, a5 -> anyone, d2 -> do-02, f3 -> feel-01, i2 -> i, t2 -> think-01, l2 -> lot, a2 -> and, i -> i, t8 -> time, f2 -> friend, l -> lazy, d4 -> disagree-01, f -> follow-07, o -> often, t7 -> time, a4 -> and))),[Ljava.lang.String;@560348e6,Annotation([Ljava.lang.String;@1df8b5b8,[Ljava.lang.String;@23202fce,[Ljava.lang.String;@7b993c65),Annotation([Ljava.lang.String;@37911f88,[Ljava.lang.String;@6f1c29b7,[Ledu.cmu.lti.nlp.amr.Dependency;@4d6025c5),Annotation([Ljava.lang.String;@7f284218,[Ljava.lang.String;@407a7f2a,[Ljava.lang.String;@4ea5b703),Annotation([Ljava.lang.String;@2a7ed1f,[Ljava.lang.String;@3fa247d1,[Ledu.cmu.lti.nlp.amr.Entity;@2cb2fc20))
AMR:
(a / and, op, a2 / and)
(a / and, op, a4 / and)
(a / and, op, a5 / anyone)
(a / and, op, a6 / again)
(a / and, op, e2 / everything)
(a / and, op, f / follow-07)
(a / and, op, f2 / friend)
(a / and, op, h / help-01)
(a / and, op, k / know-01)
(a / and, op, l / lazy)
(a / and, op, l2 / lot)
(a / and, op, o / often)
(a / and, op, p / possible)
(a / and, op, t4 / time)
(a / and, op, t6 / try-01)
(a / and, op, t7 / time)
(a / and, op, t8 / time)
(d / do-02, ARG1, t / thing)
(d2 / do-02, ARG1, s / simple)
(d3 / do-02, ARG1, f / follow-07)
(d4 / disagree-01, ARG1, a / and)
(f / follow-07, ARG0, i3 / i)
(f / follow-07, ARG1, i / i)
(f3 / feel-01, ARG1, a / and)
(f4 / fail-01, ARG1, a / and)
(h / help-01, ARG1, t / thing)
(k / know-01, ARG1, d2 / do-02)
(s2 / say-01, ARG1, a / and)
(t2 / think-01, ARG0, i2 / i)
(t2 / think-01, ARG1, t3 / thing)
(t2 / think-01, ARG2, d3 / do-02)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.0.0.3
Decoded in 1,806,978 microseconds
Sentence: Sorry to anyone whose read this jumbled mess, and I feel a bit like a self-seeking moaner, but I truly do feel desperate.

Oracle Span 1:  and => and
Oracle Span 2:  anyone => anyone
Oracle Span 3:  bit => bit
Oracle Span 4:  but => contrast-01
Oracle Span 5:  desperate => desperate
Oracle Span 6:  feel => feel-01
Oracle Span 7:  feel => feel-01
Oracle Span 8:  I => i
Oracle Span 9:  jumbled => jumble-01
Oracle Span 10:  mess => mess
Oracle Span 11:  moaner => (person :ARG0-of moan-01)
Oracle Span 12:  read => read-01
Oracle Span 13:  seeking => seek-01
Oracle Span 14:  self => self
Oracle Span 15:  Sorry => sorry-41
Oracle Span 16:  this => this
Spans:
Span 9-10:  and => and
Span 2-3:  anyone => anyone
Span 13-14:  bit => bit
Span 21-22:  but => contrast-01
Span 26-27:  desperate => desperate
Span 11-12:  feel => feel-01
Span 25-26:  feel => feel-01
Span 10-11:  I => i
Span 6-7:  jumbled => jumble-01
Span 7-8:  mess => mess
Span 19-20:  moaner => (person :ARG0-of moan-01)
Span 4-5:  read => read-01
Span 18-19:  seeking => seek-01
Span 16-17:  self => self
Span 0-1:  Sorry => sorry-41
Span 5-6:  this => this

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 2-3:  anyone => anyone
Oracle Span 13-14:  bit => bit
Oracle Span 21-22:  but => contrast-01
Oracle Span 26-27:  desperate => desperate
Oracle Span 11-12:  feel => feel-01
Oracle Span 25-26:  feel => feel-01
Oracle Span 10-11:  I => i
Oracle Span 6-7:  jumbled => jumble-01
Oracle Span 7-8:  mess => mess
Oracle Span 19-20:  moaner => (person :ARG0-of moan-01)
Oracle Span 4-5:  read => read-01
Oracle Span 18-19:  seeking => seek-01
Oracle Span 16-17:  self => self
Oracle Span 0-1:  Sorry => sorry-41
Oracle Span 5-6:  this => this

Dependencies:
1	Sorry	_	NNP	NNP	_	24	nsubj	_	_
2	to	_	TO	TO	_	1	prep	_	_
3	anyone	_	NN	NN	_	2	pobj	_	_
4	whose	_	WP$	WP$	_	5	dep	_	_
5	read	_	VB	VB	_	3	dep	_	_
6	this	_	DT	DT	_	8	det	_	_
7	jumbled	_	JJ	JJ	_	8	amod	_	_
8	mess	_	NN	NN	_	5	dobj	_	_
9	,	_	,	,	_	5	punct	_	_
10	and	_	CC	CC	_	5	cc	_	_
11	I	_	PRP	PRP	_	12	nsubj	_	_
12	feel	_	VBP	VBP	_	5	conj	_	_
13	a	_	DT	DT	_	14	det	_	_
14	bit	_	NN	NN	_	12	dobj	_	_
15	like	_	IN	IN	_	14	prep	_	_
16	a	_	DT	DT	_	18	det	_	_
17	self-seeking	_	JJ	JJ	_	18	amod	_	_
18	moaner	_	NN	NN	_	15	pobj	_	_
19	,	_	,	,	_	5	punct	_	_
20	but	_	CC	CC	_	5	cc	_	_
21	I	_	PRP	PRP	_	23	nsubj	_	_
22	truly	_	RB	RB	_	23	advmod	_	_
23	do	_	VBP	VBP	_	5	conj	_	_
24	feel	_	VBP	VBP	_	0	root	_	_
25	desperate	_	JJ	JJ	_	24	acomp	_	_
26	.	_	.	.	_	24	punct	_	_

Oracle:
(a / and, op, c / contrast-01)
(a / and, op, s / sorry-41)
(c / contrast-01, ARG1, f / feel-01)
(c / contrast-01, ARG2, f2 / feel-01)
(f / feel-01, ARG0, i / i)
(f / feel-01, degree, b / bit)
(f2 / feel-01, ARG0, i / i)
(f2 / feel-01, ARG1, d / desperate)
(j / jumble-01, ARG1, m / mess)
(m / mess, mod, t / this)
(m2 / moan-01, ARG0, p / person)
(r / read-01, ARG0, a2 / anyone)
(r / read-01, ARG1, m / mess)
(s / sorry-41, ARG1, i / i)
(s / sorry-41, beneficiary, a2 / anyone)
(s2 / seek-01, ARG0, p / person)
(s2 / seek-01, mod, s3 / self)

Input(Some(Graph((and :op (contrast-01 :ARG2 (feel-01 :mod true :ARG1 desperate :ARG0 i) :ARG1 (feel-01 :degree bit :ARG1 (resemble-01 :ARG2 (person :ARG0-of (seek-01 :mod self) :ARG0-of moan-01) :ARG1 i) :ARG0 i)) :op (sorry-41 :beneficiary (anyone :ARG0-of (read-01 :ARG1 (mess :mod this :ARG1-of jumble-01))) :ARG1 i)),ArrayBuffer(Span(9,10,List(0),and,and,false), Span(21,22,List(1),but,contrast-01,false), Span(11,12,List(2),feel,feel-01,false), Span(26,27,List(3),desperate,desperate,false), Span(25,26,List(4),feel,feel-01,false), Span(13,14,List(5),bit,bit,false), Span(19,20,List(6, 7),moaner,(person :ARG0-of moan-01),false), Span(18,19,List(8),seeking,seek-01,false), Span(16,17,List(9),self,self,false), Span(0,1,List(10),Sorry,sorry-41,false), Span(2,3,List(11),anyone,anyone,false), Span(4,5,List(12),read,read-01,false), Span(7,8,List(13),mess,mess,false), Span(5,6,List(14),this,this,false), Span(6,7,List(15),jumbled,jumble-01,false), Span(10,11,List(16),I,i,false)),Map(2 -> feel-01, 5 -> bit, 12 -> read-01, 15 -> jumble-01, 8 -> seek-01, 7 -> moan-01, 1 -> contrast-01, 4 -> feel-01, 11 -> anyone, 14 -> this, 6 -> person, 9 -> self, 0 -> and, 16 -> i, 10 -> sorry-41, 3 -> desperate, 13 -> mess),Map(s2 -> seek-01, t -> this, b -> bit, m2 -> moan-01, j -> jumble-01, s -> sorry-41, m -> mess, d -> desperate, p -> person, a -> and, i -> i, r -> read-01, a2 -> anyone, s3 -> self, c -> contrast-01, f2 -> feel-01, f -> feel-01))),[Ljava.lang.String;@4f4c4b1a,Annotation([Ljava.lang.String;@723e88f9,[Ljava.lang.String;@5f0fd5a0,[Ljava.lang.String;@64e7619d),Annotation([Ljava.lang.String;@495ee280,[Ljava.lang.String;@4fa1c212,[Ledu.cmu.lti.nlp.amr.Dependency;@6ea2bc93),Annotation([Ljava.lang.String;@3116c353,[Ljava.lang.String;@f627d13,[Ljava.lang.String;@4e928fbf),Annotation([Ljava.lang.String;@352ff4da,[Ljava.lang.String;@3224a577,[Ledu.cmu.lti.nlp.amr.Entity;@2e32ccc5))
AMR:
(a / and, op, r / read-01)
(c / contrast-01, ARG1, r / read-01)
(c / contrast-01, ARG2, f2 / feel-01)
(c / contrast-01, ARG6, p / person)
(f / feel-01, ARG1, d / desperate)
(f2 / feel-01, ARG0, i / i)
(f2 / feel-01, ARG1, b / bit)
(f2 / feel-01, ARG6, a2 / anyone)
(j / jumble-01, ARG1, m / mess)
(m / mess, mod, t / this)
(m2 / moan-01, ARG0, p / person)
(m2 / moan-01, ARG1, f / feel-01)
(r / read-01, ARG1, m / mess)
(s / sorry-41, ARG1, a2 / anyone)
(s2 / seek-01, ARG1, p / person)
(s2 / seek-01, mod, s3 / self)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 980,564 microseconds
Sentence: Its not uncommon for people's existing feelings about themselves to become more intense when they are in new situations and feel the pressure to socialise with strangers and fit into new roles, i.e. being a university student.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  become => become-01
Oracle Span 4:  existing => exist-01
Oracle Span 5:  feel => feel-01
Oracle Span 6:  feelings => (thing :ARG1-of feel-01)
Oracle Span 7:  fit => fit-01
Oracle Span 8:  intense => intense
Oracle Span 9:  more => more
Oracle Span 10:  new => new
Oracle Span 11:  pressure => pressure-01
Oracle Span 12:  roles => role
Oracle Span 13:  situations => situation
Oracle Span 14:  socialise => socialize-01
Oracle Span 15:  strangers => stranger
Oracle Span 16:  student => (person :ARG0-of study-01)
Oracle Span 17:  uncommon => common
Oracle Span 18:  university => university
Spans:
Span 20-21:  and => and
Span 28-29:  and => and
Span 11-12:  become => become-01
Span 6-7:  existing => exist-01
Span 21-22:  feel => feel-01
Span 7-8:  feelings => (thing :ARG1-of feel-01)
Span 29-30:  fit => fit-01
Span 13-14:  intense => intense
Span 12-13:  more => more
Span 18-19:  new => new
Span 23-24:  pressure => pressure-01
Span 32-33:  roles => role
Span 19-20:  situations => situation
Span 25-26:  socialise => socialize-01
Span 27-28:  strangers => stranger
Span 38-39:  student => (person :ARG0-of study-01)
Span 2-3:  uncommon => common
Span 37-38:  university => university

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 20-21:  and => and
Oracle Span 28-29:  and => and
Oracle Span 11-12:  become => become-01
Oracle Span 6-7:  existing => exist-01
Oracle Span 21-22:  feel => feel-01
Oracle Span 7-8:  feelings => (thing :ARG1-of feel-01)
Oracle Span 29-30:  fit => fit-01
Oracle Span 13-14:  intense => intense
Oracle Span 12-13:  more => more
Oracle Span 18-19:  new => new
Oracle Span 23-24:  pressure => pressure-01
Oracle Span 32-33:  roles => role
Oracle Span 19-20:  situations => situation
Oracle Span 25-26:  socialise => socialize-01
Oracle Span 27-28:  strangers => stranger
Oracle Span 38-39:  student => (person :ARG0-of study-01)
Oracle Span 2-3:  uncommon => common
Oracle Span 37-38:  university => university

Dependencies:
1	Its	_	PRP$	PRP$	_	8	poss	_	_
2	not	_	RB	RB	_	3	neg	_	_
3	uncommon	_	JJ	JJ	_	8	amod	_	_
4	for	_	IN	IN	_	3	prep	_	_
5	people	_	NNS	NNS	_	4	pobj	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	existing	_	VBG	VBG	_	8	amod	_	_
8	feelings	_	NNS	NNS	_	35	nsubj	_	_
9	about	_	IN	IN	_	8	prep	_	_
10	themselves	_	PRP	PRP	_	12	nsubj	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	become	_	VB	VB	_	9	pcomp	_	_
13	more	_	RBR	RBR	_	14	advmod	_	_
14	intense	_	JJ	JJ	_	12	acomp	_	_
15	when	_	WRB	WRB	_	17	advmod	_	_
16	they	_	PRP	PRP	_	17	nsubj	_	_
17	are	_	VBP	VBP	_	12	advcl	_	_
18	in	_	IN	IN	_	17	prep	_	_
19	new	_	JJ	JJ	_	20	amod	_	_
20	situations	_	NNS	NNS	_	18	pobj	_	_
21	and	_	CC	CC	_	12	cc	_	_
22	feel	_	VB	VB	_	12	conj	_	_
23	the	_	DT	DT	_	24	det	_	_
24	pressure	_	NN	NN	_	22	dobj	_	_
25	to	_	TO	TO	_	26	aux	_	_
26	socialise	_	VB	VB	_	24	vmod	_	_
27	with	_	IN	IN	_	26	prep	_	_
28	strangers	_	NNS	NNS	_	27	pobj	_	_
29	and	_	CC	CC	_	26	cc	_	_
30	fit	_	VB	VB	_	26	conj	_	_
31	into	_	IN	IN	_	30	prep	_	_
32	new	_	JJ	JJ	_	33	amod	_	_
33	roles	_	NNS	NNS	_	31	pobj	_	_
34	,	_	,	,	_	35	punct	_	_
35	i.e.	_	VBZ	VBZ	_	0	root	_	_
36	being	_	VBG	VBG	_	39	cop	_	_
37	a	_	DT	DT	_	39	det	_	_
38	university	_	NN	NN	_	39	nn	_	_
39	student	_	NN	NN	_	35	xcomp	_	_
40	.	_	.	.	_	35	punct	_	_

Oracle:
(a / and, op, f2 / feel-01)
(a2 / and, op, f3 / fit-01)
(a2 / and, op, s2 / socialize-01)
(b / become-01, ARG1, t / thing)
(b / become-01, ARG2, i / intense)
(b / become-01, time, a / and)
(c / common, domain, b / become-01)
(e / exist-01, ARG1, t / thing)
(f / feel-01, ARG1, t / thing)
(f2 / feel-01, ARG1, p2 / pressure-01)
(f3 / fit-01, location, r / role)
(i / intense, degree, m / more)
(p2 / pressure-01, ARG2, a2 / and)
(r / role, example, p3 / person)
(r / role, mod, n / new)
(s / situation, mod, n / new)
(s2 / socialize-01, prep-with, s3 / stranger)
(s4 / study-01, ARG0, p3 / person)
(s4 / study-01, location, u / university)

Input(Some(Graph((common :domain (become-01 :time (and :op (feel-01 :ARG1 (pressure-01 :ARG2 (and :op (fit-01 :location (role :example (person :ARG0-of (study-01 :location university)) :mod new) :ARG1 person) :op (socialize-01 :prep-with stranger :ARG0 person)) :ARG1 person) :ARG0 person) :op (be-located-at-91 :ARG2 (situation :mod new) :ARG1 person)) :ARG2 (intense :degree more) :ARG1 (thing :ARG1-of exist-01 :ARG1-of (feel-01 :ARG0 person :ARG2 person)))),ArrayBuffer(Span(2,3,List(0),uncommon,common,false), Span(11,12,List(1),become,become-01,false), Span(20,21,List(2),and,and,false), Span(21,22,List(3),feel,feel-01,false), Span(23,24,List(4),pressure,pressure-01,false), Span(28,29,List(5),and,and,false), Span(29,30,List(6),fit,fit-01,false), Span(32,33,List(7),roles,role,false), Span(37,38,List(8),university,university,false), Span(27,28,List(9),strangers,stranger,false), Span(19,20,List(10),situations,situation,false), Span(18,19,List(11),new,new,false), Span(13,14,List(12),intense,intense,false), Span(12,13,List(13),more,more,false), Span(6,7,List(14),existing,exist-01,false), Span(38,39,List(15, 16),student,(person :ARG0-of study-01),false), Span(25,26,List(17),socialise,socialize-01,false), Span(7,8,List(18, 19),feelings,(thing :ARG1-of feel-01),false)),Map(2 -> and, 5 -> and, 12 -> intense, 15 -> person, 8 -> university, 18 -> thing, 7 -> role, 17 -> socialize-01, 1 -> become-01, 4 -> pressure-01, 11 -> new, 14 -> exist-01, 6 -> fit-01, 9 -> stranger, 0 -> common, 16 -> study-01, 19 -> feel-01, 10 -> situation, 3 -> feel-01, 13 -> more),Map(e -> exist-01, n -> new, s2 -> socialize-01, t -> thing, b -> become-01, p2 -> pressure-01, s -> situation, s4 -> study-01, m -> more, a -> and, f3 -> fit-01, i -> intense, r -> role, a2 -> and, s3 -> stranger, c -> common, u -> university, f2 -> feel-01, f -> feel-01, p3 -> person))),[Ljava.lang.String;@748741cb,Annotation([Ljava.lang.String;@3e44f2a5,[Ljava.lang.String;@295cf707,[Ljava.lang.String;@1130520d),Annotation([Ljava.lang.String;@5f77d0f9,[Ljava.lang.String;@463fd068,[Ledu.cmu.lti.nlp.amr.Dependency;@895e367),Annotation([Ljava.lang.String;@1b266842,[Ljava.lang.String;@7a3793c7,[Ljava.lang.String;@42b3b079),Annotation([Ljava.lang.String;@651aed93,[Ljava.lang.String;@4dd6fd0a,[Ledu.cmu.lti.nlp.amr.Entity;@bb9e6dc))
AMR:
(a / and, op, b / become-01)
(a / and, op, f2 / feel-01)
(a / and, op, s / situation)
(a2 / and, op, f3 / fit-01)
(a2 / and, op, s2 / socialize-01)
(b / become-01, ARG1, i / intense)
(e / exist-01, ARG1, t / thing)
(e / exist-01, ARG6, c / common)
(f / feel-01, ARG1, t / thing)
(f / feel-01, ARG2, b / become-01)
(f2 / feel-01, ARG0, p3 / person)
(f2 / feel-01, ARG1, p2 / pressure-01)
(f3 / fit-01, ARG1, r / role)
(i / intense, degree, m / more)
(p2 / pressure-01, ARG1, s2 / socialize-01)
(s / situation, mod, n / new)
(s2 / socialize-01, ARG1, s3 / stranger)
(s4 / study-01, ARG0, p3 / person)
(s4 / study-01, ARG1, u / university)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 1,175,066 microseconds
Sentence: I am not a health professional and I can only speak from personal experience which is why I strongly suggest you see a qualified health professional about your feelings and worries about depression.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  can => possible
Oracle Span 4:  depression => depression
Oracle Span 5:  experience => experience-01
Oracle Span 6:  feelings => (thing :ARG1-of feel-01)
Oracle Span 7:  health => health
Oracle Span 8:  health => health
Oracle Span 9:  I => i
Oracle Span 10:  only => only
Oracle Span 11:  professional => professional
Oracle Span 12:  professional => professional
Oracle Span 13:  qualified => qualify-02
Oracle Span 14:  see => see-01
Oracle Span 15:  speak => speak-01
Oracle Span 16:  strongly => strong
Oracle Span 17:  suggest => suggest-01
Oracle Span 18:  worries => worry-02
Oracle Span 19:  you => you
Spans:
Span 6-7:  and => and
Span 29-30:  and => and
Span 8-9:  can => possible
Span 32-33:  depression => depression
Span 13-14:  experience => experience-01
Span 28-29:  feelings => (thing :ARG1-of feel-01)
Span 4-5:  health => health
Span 24-25:  health => health
Span 0-1:  I => i
Span 9-10:  only => only
Span 5-6:  professional => professional
Span 25-26:  professional => professional
Span 23-24:  qualified => qualify-02
Span 21-22:  see => see-01
Span 10-11:  speak => speak-01
Span 18-19:  strongly => strong
Span 19-20:  suggest => suggest-01
Span 30-31:  worries => worry-02
Span 20-21:  you => you

Langrangian relaxation converged after 73 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 29-30:  and => and
Oracle Span 8-9:  can => possible
Oracle Span 32-33:  depression => depression
Oracle Span 13-14:  experience => experience-01
Oracle Span 28-29:  feelings => (thing :ARG1-of feel-01)
Oracle Span 4-5:  health => health
Oracle Span 24-25:  health => health
Oracle Span 0-1:  I => i
Oracle Span 9-10:  only => only
Oracle Span 5-6:  professional => professional
Oracle Span 25-26:  professional => professional
Oracle Span 23-24:  qualified => qualify-02
Oracle Span 21-22:  see => see-01
Oracle Span 10-11:  speak => speak-01
Oracle Span 18-19:  strongly => strong
Oracle Span 19-20:  suggest => suggest-01
Oracle Span 30-31:  worries => worry-02
Oracle Span 20-21:  you => you

Dependencies:
1	I	_	PRP	PRP	_	6	nsubj	_	_
2	am	_	VBP	VBP	_	6	cop	_	_
3	not	_	RB	RB	_	6	neg	_	_
4	a	_	DT	DT	_	6	det	_	_
5	health	_	NN	NN	_	6	nn	_	_
6	professional	_	NN	NN	_	0	root	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	I	_	PRP	PRP	_	11	nsubj	_	_
9	can	_	MD	MD	_	11	aux	_	_
10	only	_	RB	RB	_	11	advmod	_	_
11	speak	_	VB	VB	_	6	conj	_	_
12	from	_	IN	IN	_	11	prep	_	_
13	personal	_	JJ	JJ	_	14	amod	_	_
14	experience	_	NN	NN	_	12	pobj	_	_
15	which	_	WDT	WDT	_	16	nsubj	_	_
16	is	_	VBZ	VBZ	_	14	rcmod	_	_
17	why	_	WRB	WRB	_	20	advmod	_	_
18	I	_	PRP	PRP	_	20	nsubj	_	_
19	strongly	_	RB	RB	_	20	advmod	_	_
20	suggest	_	VBP	VBP	_	16	advcl	_	_
21	you	_	PRP	PRP	_	22	nsubj	_	_
22	see	_	VBP	VBP	_	20	ccomp	_	_
23	a	_	DT	DT	_	26	det	_	_
24	qualified	_	JJ	JJ	_	26	amod	_	_
25	health	_	NN	NN	_	26	nn	_	_
26	professional	_	NN	NN	_	22	dobj	_	_
27	about	_	IN	IN	_	26	prep	_	_
28	your	_	PRP$	PRP$	_	29	poss	_	_
29	feelings	_	NNS	NNS	_	27	pobj	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	worries	_	NNS	NNS	_	29	conj	_	_
32	about	_	IN	IN	_	22	prep	_	_
33	depression	_	NN	NN	_	32	pobj	_	_
34	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, p / professional)
(a / and, op, p2 / possible)
(a2 / and, op, t / thing)
(a2 / and, op, w / worry-02)
(e / experience-01, ARG0, i / i)
(f / feel-01, ARG0, y / you)
(f / feel-01, ARG1, t / thing)
(f / feel-01, ARG2, d / depression)
(p / professional, domain, i / i)
(p / professional, mod, h / health)
(p2 / possible, domain, s / speak-01)
(p3 / professional, mod, h2 / health)
(q / qualify-02, ARG1, p3 / professional)
(s / speak-01, ARG0, i / i)
(s / speak-01, mod, o / only)
(s / speak-01, source, e / experience-01)
(s2 / suggest-01, ARG0, i / i)
(s2 / suggest-01, ARG1, s3 / see-01)
(s2 / suggest-01, manner, s4 / strong)
(s3 / see-01, ARG0, y / you)
(s3 / see-01, ARG1, p3 / professional)
(s3 / see-01, topic, a2 / and)
(w / worry-02, ARG0, y / you)
(w / worry-02, ARG1, d / depression)

Input(Some(Graph((and :op (possible :ARG0-of (cause-01 :ARG1 (suggest-01 :manner strong :ARG1 (see-01 :topic (and :op (worry-02 :ARG0 you :ARG1 depression) :op (thing :ARG1-of (feel-01 :ARG2 depression :ARG0 you))) :ARG1 (professional :ARG1-of qualify-02 :mod health) :ARG0 you) :ARG0 i)) :domain (speak-01 :mod only :source (experience-01 :ARG0 i) :ARG0 i)) :op (professional :domain i :mod health :polarity -)),ArrayBuffer(Span(6,7,List(0),and,and,false), Span(8,9,List(1),can,possible,false), Span(19,20,List(2),suggest,suggest-01,false), Span(21,22,List(3),see,see-01,false), Span(29,30,List(4),and,and,false), Span(30,31,List(5),worries,worry-02,false), Span(32,33,List(6),depression,depression,false), Span(5,6,List(7),professional,professional,false), Span(23,24,List(8),qualified,qualify-02,false), Span(4,5,List(9),health,health,false), Span(20,21,List(10),you,you,false), Span(10,11,List(11),speak,speak-01,false), Span(9,10,List(12),only,only,false), Span(13,14,List(13),experience,experience-01,false), Span(25,26,List(14),professional,professional,false), Span(0,1,List(15),I,i,false), Span(24,25,List(16),health,health,false), Span(18,19,List(17),strongly,strong,false), Span(28,29,List(18, 19),feelings,(thing :ARG1-of feel-01),false)),Map(2 -> suggest-01, 5 -> worry-02, 12 -> only, 15 -> i, 8 -> qualify-02, 18 -> thing, 7 -> professional, 17 -> strong, 1 -> possible, 4 -> and, 11 -> speak-01, 14 -> professional, 6 -> depression, 9 -> health, 0 -> and, 16 -> health, 19 -> feel-01, 10 -> you, 3 -> see-01, 13 -> experience-01),Map(e -> experience-01, w -> worry-02, h -> health, q -> qualify-02, h2 -> health, s2 -> suggest-01, t -> thing, p2 -> possible, s -> speak-01, s4 -> strong, d -> depression, p -> professional, y -> you, a -> and, i -> i, a2 -> and, s3 -> see-01, f -> feel-01, o -> only, p3 -> professional))),[Ljava.lang.String;@5456afaa,Annotation([Ljava.lang.String;@6692b6c6,[Ljava.lang.String;@1cd629b3,[Ljava.lang.String;@589da3f3),Annotation([Ljava.lang.String;@39d76cb5,[Ljava.lang.String;@4a00d9cf,[Ledu.cmu.lti.nlp.amr.Dependency;@6736fa8d),Annotation([Ljava.lang.String;@52815fa3,[Ljava.lang.String;@50313382,[Ljava.lang.String;@1cb346ea),Annotation([Ljava.lang.String;@4c012563,[Ljava.lang.String;@14a50707,[Ledu.cmu.lti.nlp.amr.Entity;@4d518b32))
AMR:
(a / and, op, p3 / professional)
(a / and, op, s / speak-01)
(a2 / and, op, t / thing)
(a2 / and, op, w / worry-02)
(e / experience-01, ARG1, s2 / suggest-01)
(f / feel-01, ARG1, t / thing)
(p / professional, mod, h / health)
(p2 / possible, domain, s / speak-01)
(p3 / professional, mod, h2 / health)
(q / qualify-02, ARG1, p / professional)
(s / speak-01, ARG0, i / i)
(s / speak-01, ARG1, e / experience-01)
(s / speak-01, mod, o / only)
(s2 / suggest-01, ARG1, s3 / see-01)
(s2 / suggest-01, manner, s4 / strong)
(s3 / see-01, ARG0, y / you)
(s3 / see-01, ARG1, p / professional)
(s3 / see-01, ARG2, d / depression)
(w / worry-02, ARG1, d / depression)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.1.0.0.2.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.2.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.2.0.0
Decoded in 1,893,528 microseconds
Sentence: Most people feel unintelligent and awkward when they first get to uni- you're definitely not alone there. But I would really recommend that you get an appointment with your uni counselling services. It doesn't really matter whether anyone has told you that you are depressed or not, you are obviously having some problems at the minute and could use some support- labels aren't as important as your experiences. Meditation and exercise are really helpful, so definitely try to do those. But yeah, you will have to engage with help and life in general to get somewhere- but don't beat yourself up about feeling unmotivated to do anything at the minute, lots of people feel like this and hopefully it will pass as you begin to feel better. Being unkind to yourself will only make you feel worse- be kind to yourself and get some help.

Oracle Span 1:  alone => alone
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  and => and
Oracle Span 6:  and => and
Oracle Span 7:  and => and
Oracle Span 8:  anyone => anyone
Oracle Span 9:  anything => anything
Oracle Span 10:  appointment => appointment
Oracle Span 11:  awkward => awkward
Oracle Span 12:  beat => beat-00
Oracle Span 13:  begin => begin-01
Oracle Span 14:  better => good
Oracle Span 15:  But => contrast-01
Oracle Span 16:  But => contrast-01
Oracle Span 17:  but => contrast-01
Oracle Span 18:  could => possible
Oracle Span 19:  counselling => counsel-01
Oracle Span 20:  definitely => definite
Oracle Span 21:  depressed => depress-01
Oracle Span 22:  do => do-02
Oracle Span 23:  does => do-02
Oracle Span 24:  engage => engage-01
Oracle Span 25:  exercise => exercise
Oracle Span 26:  experiences => (thing :ARG1-of experience-01)
Oracle Span 27:  feel => feel-01
Oracle Span 28:  feel => feel-01
Oracle Span 29:  feel => feel-01
Oracle Span 30:  feel => feel-01
Oracle Span 31:  feeling => feel-01
Oracle Span 32:  general => general
Oracle Span 33:  get => get-05
Oracle Span 34:  get => get-01
Oracle Span 35:  get => get-05
Oracle Span 36:  get => get-01
Oracle Span 37:  has => have-03
Oracle Span 38:  help => help-01
Oracle Span 39:  help => help
Oracle Span 40:  helpful => help-01
Oracle Span 41:  hopefully => hope-01
Oracle Span 42:  important => important
Oracle Span 43:  kind => kind-41
Oracle Span 44:  labels => (thing :ARG2-of label-01)
Oracle Span 45:  life => life
Oracle Span 46:  lots => (person :quant lot)
Oracle Span 47:  make => make-02
Oracle Span 48:  matter => matter-01
Oracle Span 49:  Meditation => meditation
Oracle Span 50:  minute => minute
Oracle Span 51:  minute => minute
Oracle Span 52:  Most => (person :quant most)
Oracle Span 53:  obviously => obvious-41
Oracle Span 54:  only => only
Oracle Span 55:  or => or
Oracle Span 56:  pass => pass-03
Oracle Span 57:  problems => problem
Oracle Span 58:  really => really
Oracle Span 59:  really => really
Oracle Span 60:  really => really
Oracle Span 61:  recommend => recommend-01
Oracle Span 62:  services => service
Oracle Span 63:  some => some
Oracle Span 64:  some => some
Oracle Span 65:  some => some
Oracle Span 66:  somewhere => somewhere
Oracle Span 67:  support => support-01
Oracle Span 68:  this => this
Oracle Span 69:  told => tell-01
Oracle Span 70:  try => try-01
Oracle Span 71:  uni => i
Oracle Span 72:  unintelligent => intelligent-41
Oracle Span 73:  unkind => kind-41
Oracle Span 74:  unmotivated => motivate-01
Oracle Span 75:  use => use-01
Oracle Span 76:  worse => bad
Oracle Span 77:  you => you
Oracle Span 78:  you => you
Oracle Span 79:  you => you
Oracle Span 80:  you => you
Oracle Span 81:  you => you
Oracle Span 82:  you => you
Oracle Span 83:  you => you
Oracle Span 84:  you => you
Spans:
Span 17-18:  alone => alone
Span 4-5:  and => and
Span 62-63:  and => and
Span 78-79:  and => and
Span 101-102:  and => and
Span 131-132:  and => and
Span 158-159:  and => and
Span 42-43:  anyone => anyone
Span 120-121:  anything => anything
Span 29-30:  appointment => appointment
Span 5-6:  awkward => awkward
Span 112-113:  beat => beat-00
Span 138-139:  begin => begin-01
Span 141-142:  better => good
Span 20-21:  But => contrast-01
Span 91-92:  But => contrast-01
Span 109-110:  but => contrast-01
Span 63-64:  could => possible
Span 33-34:  counselling => counsel-01
Span 15-16:  definitely => definite
Span 49-50:  depressed => depress-01
Span 88-89:  do => do-02
Span 37-38:  does => do-02
Span 98-99:  engage => engage-01
Span 79-80:  exercise => exercise
Span 75-76:  experiences => (thing :ARG1-of experience-01)
Span 2-3:  feel => feel-01
Span 128-129:  feel => feel-01
Span 140-141:  feel => feel-01
Span 151-152:  feel => feel-01
Span 116-117:  feeling => feel-01
Span 104-105:  general => general
Span 9-10:  get => get-05
Span 27-28:  get => get-01
Span 106-107:  get => get-05
Span 159-160:  get => get-01
Span 43-44:  has => have-03
Span 100-101:  help => help-01
Span 161-162:  help => help
Span 82-83:  helpful => help-01
Span 132-133:  hopefully => hope-01
Span 72-73:  important => important
Span 155-156:  kind => kind-41
Span 68-69:  labels => (thing :ARG2-of label-01)
Span 102-103:  life => life
Span 125-126:  lots => (person :quant lot)
Span 149-150:  make => make-02
Span 40-41:  matter => matter-01
Span 77-78:  Meditation => meditation
Span 61-62:  minute => minute
Span 123-124:  minute => minute
Span 0-1:  Most => (person :quant most)
Span 55-56:  obviously => obvious-41
Span 148-149:  only => only
Span 50-51:  or => or
Span 135-136:  pass => pass-03
Span 58-59:  problems => problem
Span 23-24:  really => really
Span 39-40:  really => really
Span 81-82:  really => really
Span 24-25:  recommend => recommend-01
Span 34-35:  services => service
Span 57-58:  some => some
Span 65-66:  some => some
Span 160-161:  some => some
Span 107-108:  somewhere => somewhere
Span 66-67:  support => support-01
Span 130-131:  this => this
Span 44-45:  told => tell-01
Span 86-87:  try => try-01
Span 11-12:  uni => i
Span 3-4:  unintelligent => intelligent-41
Span 144-145:  unkind => kind-41
Span 117-118:  unmotivated => motivate-01
Span 64-65:  use => use-01
Span 152-153:  worse => bad
Span 13-14:  you => you
Span 26-27:  you => you
Span 45-46:  you => you
Span 47-48:  you => you
Span 53-54:  you => you
Span 94-95:  you => you
Span 137-138:  you => you
Span 150-151:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of obviously in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of having in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of problems in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of minute in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of could in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of use in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of support in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of labels in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of important in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 74
 *** WARNING: The dependency tree seems broken.  I can't find the head of experiences in position 75
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 76
 *** WARNING: The dependency tree seems broken.  I can't find the head of Meditation in position 77
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 78
 *** WARNING: The dependency tree seems broken.  I can't find the head of exercise in position 79
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 80
 *** WARNING: The dependency tree seems broken.  I can't find the head of really in position 81
 *** WARNING: The dependency tree seems broken.  I can't find the head of helpful in position 82
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 83
 *** WARNING: The dependency tree seems broken.  I can't find the head of so in position 84
 *** WARNING: The dependency tree seems broken.  I can't find the head of definitely in position 85
 *** WARNING: The dependency tree seems broken.  I can't find the head of try in position 86
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 87
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 88
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 89
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 90
 *** WARNING: The dependency tree seems broken.  I can't find the head of But in position 91
 *** WARNING: The dependency tree seems broken.  I can't find the head of yeah in position 92
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 93
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 94
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 95
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 96
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 97
 *** WARNING: The dependency tree seems broken.  I can't find the head of engage in position 98
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 99
 *** WARNING: The dependency tree seems broken.  I can't find the head of help in position 100
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 101
 *** WARNING: The dependency tree seems broken.  I can't find the head of life in position 102
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 103
 *** WARNING: The dependency tree seems broken.  I can't find the head of general in position 104
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 105
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 106
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhere in position 107
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 108
 *** WARNING: The dependency tree seems broken.  I can't find the head of but in position 109
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 110
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 111
 *** WARNING: The dependency tree seems broken.  I can't find the head of beat in position 112
 *** WARNING: The dependency tree seems broken.  I can't find the head of yourself in position 113
 *** WARNING: The dependency tree seems broken.  I can't find the head of up in position 114
 *** WARNING: The dependency tree seems broken.  I can't find the head of about in position 115
 *** WARNING: The dependency tree seems broken.  I can't find the head of feeling in position 116
 *** WARNING: The dependency tree seems broken.  I can't find the head of unmotivated in position 117
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 118
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 119
 *** WARNING: The dependency tree seems broken.  I can't find the head of anything in position 120
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 121
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 122
 *** WARNING: The dependency tree seems broken.  I can't find the head of minute in position 123
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 124
 *** WARNING: The dependency tree seems broken.  I can't find the head of lots in position 125
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 126
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 127
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 128
 *** WARNING: The dependency tree seems broken.  I can't find the head of like in position 129
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 130
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 131
 *** WARNING: The dependency tree seems broken.  I can't find the head of hopefully in position 132
 *** WARNING: The dependency tree seems broken.  I can't find the head of it in position 133
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 134
 *** WARNING: The dependency tree seems broken.  I can't find the head of pass in position 135
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 136
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 137
 *** WARNING: The dependency tree seems broken.  I can't find the head of begin in position 138
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 139
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 140
 *** WARNING: The dependency tree seems broken.  I can't find the head of better in position 141
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 142
 *** WARNING: The dependency tree seems broken.  I can't find the head of Being in position 143
 *** WARNING: The dependency tree seems broken.  I can't find the head of unkind in position 144
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 145
 *** WARNING: The dependency tree seems broken.  I can't find the head of yourself in position 146
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 147
 *** WARNING: The dependency tree seems broken.  I can't find the head of only in position 148
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 149
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 150
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 151
 *** WARNING: The dependency tree seems broken.  I can't find the head of worse in position 152
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 153
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 154
 *** WARNING: The dependency tree seems broken.  I can't find the head of kind in position 155
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 156
 *** WARNING: The dependency tree seems broken.  I can't find the head of yourself in position 157
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 158
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 159
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 160
 *** WARNING: The dependency tree seems broken.  I can't find the head of help in position 161
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 162
Langrangian relaxation converged after 59 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of obviously in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of having in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of problems in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of minute in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of could in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of use in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of support in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of labels in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of important in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 74
 *** WARNING: The dependency tree seems broken.  I can't find the head of experiences in position 75
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 76
 *** WARNING: The dependency tree seems broken.  I can't find the head of Meditation in position 77
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 78
 *** WARNING: The dependency tree seems broken.  I can't find the head of exercise in position 79
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 80
 *** WARNING: The dependency tree seems broken.  I can't find the head of really in position 81
 *** WARNING: The dependency tree seems broken.  I can't find the head of helpful in position 82
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 83
 *** WARNING: The dependency tree seems broken.  I can't find the head of so in position 84
 *** WARNING: The dependency tree seems broken.  I can't find the head of definitely in position 85
 *** WARNING: The dependency tree seems broken.  I can't find the head of try in position 86
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 87
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 88
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 89
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 90
 *** WARNING: The dependency tree seems broken.  I can't find the head of But in position 91
 *** WARNING: The dependency tree seems broken.  I can't find the head of yeah in position 92
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 93
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 94
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 95
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 96
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 97
 *** WARNING: The dependency tree seems broken.  I can't find the head of engage in position 98
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 99
 *** WARNING: The dependency tree seems broken.  I can't find the head of help in position 100
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 101
 *** WARNING: The dependency tree seems broken.  I can't find the head of life in position 102
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 103
 *** WARNING: The dependency tree seems broken.  I can't find the head of general in position 104
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 105
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 106
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhere in position 107
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 108
 *** WARNING: The dependency tree seems broken.  I can't find the head of but in position 109
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 110
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 111
 *** WARNING: The dependency tree seems broken.  I can't find the head of beat in position 112
 *** WARNING: The dependency tree seems broken.  I can't find the head of yourself in position 113
 *** WARNING: The dependency tree seems broken.  I can't find the head of up in position 114
 *** WARNING: The dependency tree seems broken.  I can't find the head of about in position 115
 *** WARNING: The dependency tree seems broken.  I can't find the head of feeling in position 116
 *** WARNING: The dependency tree seems broken.  I can't find the head of unmotivated in position 117
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 118
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 119
 *** WARNING: The dependency tree seems broken.  I can't find the head of anything in position 120
 *** WARNING: The dependency tree seems broken.  I can't find the head of at in position 121
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 122
 *** WARNING: The dependency tree seems broken.  I can't find the head of minute in position 123
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 124
 *** WARNING: The dependency tree seems broken.  I can't find the head of lots in position 125
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 126
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 127
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 128
 *** WARNING: The dependency tree seems broken.  I can't find the head of like in position 129
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 130
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 131
 *** WARNING: The dependency tree seems broken.  I can't find the head of hopefully in position 132
 *** WARNING: The dependency tree seems broken.  I can't find the head of it in position 133
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 134
 *** WARNING: The dependency tree seems broken.  I can't find the head of pass in position 135
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 136
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 137
 *** WARNING: The dependency tree seems broken.  I can't find the head of begin in position 138
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 139
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 140
 *** WARNING: The dependency tree seems broken.  I can't find the head of better in position 141
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 142
 *** WARNING: The dependency tree seems broken.  I can't find the head of Being in position 143
 *** WARNING: The dependency tree seems broken.  I can't find the head of unkind in position 144
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 145
 *** WARNING: The dependency tree seems broken.  I can't find the head of yourself in position 146
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 147
 *** WARNING: The dependency tree seems broken.  I can't find the head of only in position 148
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 149
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 150
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 151
 *** WARNING: The dependency tree seems broken.  I can't find the head of worse in position 152
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 153
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 154
 *** WARNING: The dependency tree seems broken.  I can't find the head of kind in position 155
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 156
 *** WARNING: The dependency tree seems broken.  I can't find the head of yourself in position 157
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 158
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 159
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 160
 *** WARNING: The dependency tree seems broken.  I can't find the head of help in position 161
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 162
Oracle Span 17-18:  alone => alone
Oracle Span 4-5:  and => and
Oracle Span 62-63:  and => and
Oracle Span 78-79:  and => and
Oracle Span 101-102:  and => and
Oracle Span 131-132:  and => and
Oracle Span 158-159:  and => and
Oracle Span 42-43:  anyone => anyone
Oracle Span 120-121:  anything => anything
Oracle Span 29-30:  appointment => appointment
Oracle Span 5-6:  awkward => awkward
Oracle Span 112-113:  beat => beat-00
Oracle Span 138-139:  begin => begin-01
Oracle Span 141-142:  better => good
Oracle Span 20-21:  But => contrast-01
Oracle Span 91-92:  But => contrast-01
Oracle Span 109-110:  but => contrast-01
Oracle Span 63-64:  could => possible
Oracle Span 33-34:  counselling => counsel-01
Oracle Span 15-16:  definitely => definite
Oracle Span 49-50:  depressed => depress-01
Oracle Span 88-89:  do => do-02
Oracle Span 37-38:  does => do-02
Oracle Span 98-99:  engage => engage-01
Oracle Span 79-80:  exercise => exercise
Oracle Span 75-76:  experiences => (thing :ARG1-of experience-01)
Oracle Span 2-3:  feel => feel-01
Oracle Span 128-129:  feel => feel-01
Oracle Span 140-141:  feel => feel-01
Oracle Span 151-152:  feel => feel-01
Oracle Span 116-117:  feeling => feel-01
Oracle Span 104-105:  general => general
Oracle Span 9-10:  get => get-05
Oracle Span 27-28:  get => get-01
Oracle Span 106-107:  get => get-05
Oracle Span 159-160:  get => get-01
Oracle Span 43-44:  has => have-03
Oracle Span 100-101:  help => help-01
Oracle Span 161-162:  help => help
Oracle Span 82-83:  helpful => help-01
Oracle Span 132-133:  hopefully => hope-01
Oracle Span 72-73:  important => important
Oracle Span 155-156:  kind => kind-41
Oracle Span 68-69:  labels => (thing :ARG2-of label-01)
Oracle Span 102-103:  life => life
Oracle Span 125-126:  lots => (person :quant lot)
Oracle Span 149-150:  make => make-02
Oracle Span 40-41:  matter => matter-01
Oracle Span 77-78:  Meditation => meditation
Oracle Span 61-62:  minute => minute
Oracle Span 123-124:  minute => minute
Oracle Span 0-1:  Most => (person :quant most)
Oracle Span 55-56:  obviously => obvious-41
Oracle Span 148-149:  only => only
Oracle Span 50-51:  or => or
Oracle Span 135-136:  pass => pass-03
Oracle Span 58-59:  problems => problem
Oracle Span 23-24:  really => really
Oracle Span 39-40:  really => really
Oracle Span 81-82:  really => really
Oracle Span 24-25:  recommend => recommend-01
Oracle Span 34-35:  services => service
Oracle Span 57-58:  some => some
Oracle Span 65-66:  some => some
Oracle Span 160-161:  some => some
Oracle Span 107-108:  somewhere => somewhere
Oracle Span 66-67:  support => support-01
Oracle Span 130-131:  this => this
Oracle Span 44-45:  told => tell-01
Oracle Span 86-87:  try => try-01
Oracle Span 11-12:  uni => i
Oracle Span 3-4:  unintelligent => intelligent-41
Oracle Span 144-145:  unkind => kind-41
Oracle Span 117-118:  unmotivated => motivate-01
Oracle Span 64-65:  use => use-01
Oracle Span 152-153:  worse => bad
Oracle Span 13-14:  you => you
Oracle Span 26-27:  you => you
Oracle Span 45-46:  you => you
Oracle Span 47-48:  you => you
Oracle Span 53-54:  you => you
Oracle Span 94-95:  you => you
Oracle Span 137-138:  you => you
Oracle Span 150-151:  you => you

Dependencies:
1	Most	_	JJS	JJS	_	2	amod	_	_
2	people	_	NNS	NNS	_	3	nsubj	_	_
3	feel	_	VBP	VBP	_	0	root	_	_
4	unintelligent	_	JJ	JJ	_	3	acomp	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	awkward	_	JJ	JJ	_	4	conj	_	_
7	when	_	WRB	WRB	_	10	advmod	_	_
8	they	_	PRP	PRP	_	10	nsubj	_	_
9	first	_	RB	RB	_	10	advmod	_	_
10	get	_	VBP	VBP	_	3	advcl	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	uni	_	VB	VB	_	10	xcomp	_	_
13	-	_	:	:	_	3	punct	_	_
14	you	_	PRP	PRP	_	15	nsubj	_	_
15	're	_	VBP	VBP	_	3	parataxis	_	_
16	definitely	_	RB	RB	_	15	advmod	_	_
17	not	_	RB	RB	_	19	dep	_	_
18	alone	_	RB	RB	_	19	advmod	_	_
19	there	_	RB	RB	_	15	advmod	_	_
20	.	_	.	.	_	3	punct	_	_
1	But	_	CC	CC	_	5	cc	_	_
2	I	_	PRP	PRP	_	5	nsubj	_	_
3	would	_	MD	MD	_	5	aux	_	_
4	really	_	RB	RB	_	5	advmod	_	_
5	recommend	_	VB	VB	_	0	root	_	_
6	that	_	IN	IN	_	8	mark	_	_
7	you	_	PRP	PRP	_	8	nsubj	_	_
8	get	_	VBP	VBP	_	5	ccomp	_	_
9	an	_	DT	DT	_	10	det	_	_
10	appointment	_	NN	NN	_	8	dobj	_	_
11	with	_	IN	IN	_	10	prep	_	_
12	your	_	PRP$	PRP$	_	15	poss	_	_
13	uni	_	NN	NN	_	15	nn	_	_
14	counselling	_	VBG	VBG	_	15	amod	_	_
15	services	_	NNS	NNS	_	11	pobj	_	_
16	.	_	.	.	_	5	punct	_	_
1	It	_	PRP	PRP	_	5	nsubj	_	_
2	does	_	VBZ	VBZ	_	5	aux	_	_
3	n't	_	RB	RB	_	5	neg	_	_
4	really	_	RB	RB	_	5	advmod	_	_
5	matter	_	VB	VB	_	21	ccomp	_	_
6	whether	_	IN	IN	_	9	mark	_	_
7	anyone	_	NN	NN	_	9	nsubj	_	_
8	has	_	VBZ	VBZ	_	9	aux	_	_
9	told	_	VBN	VBN	_	5	ccomp	_	_
10	you	_	PRP	PRP	_	9	dobj	_	_
11	that	_	IN	IN	_	14	mark	_	_
12	you	_	PRP	PRP	_	14	nsubj	_	_
13	are	_	VBP	VBP	_	14	cop	_	_
14	depressed	_	JJ	JJ	_	9	ccomp	_	_
15	or	_	CC	CC	_	14	cc	_	_
16	not	_	RB	RB	_	14	conj	_	_
17	,	_	,	,	_	21	punct	_	_
18	you	_	PRP	PRP	_	21	nsubj	_	_
19	are	_	VBP	VBP	_	21	aux	_	_
20	obviously	_	RB	RB	_	21	advmod	_	_
21	having	_	VBG	VBG	_	0	root	_	_
22	some	_	DT	DT	_	23	det	_	_
23	problems	_	NNS	NNS	_	21	dobj	_	_
24	at	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	minute	_	NN	NN	_	24	pobj	_	_
27	and	_	CC	CC	_	21	cc	_	_
28	could	_	MD	MD	_	29	aux	_	_
29	use	_	VB	VB	_	21	conj	_	_
30	some	_	DT	DT	_	31	det	_	_
31	support	_	NN	NN	_	29	dobj	_	_
32	-	_	:	:	_	31	punct	_	_
33	labels	_	NNS	NNS	_	37	nsubj	_	_
34	are	_	VBP	VBP	_	37	cop	_	_
35	n't	_	RB	RB	_	37	neg	_	_
36	as	_	RB	RB	_	37	advmod	_	_
37	important	_	JJ	JJ	_	31	dep	_	_
38	as	_	IN	IN	_	37	prep	_	_
39	your	_	PRP$	PRP$	_	40	poss	_	_
40	experiences	_	NNS	NNS	_	38	pobj	_	_
41	.	_	.	.	_	21	punct	_	_
1	Meditation	_	NN	NN	_	6	nsubj	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	exercise	_	NN	NN	_	1	conj	_	_
4	are	_	VBP	VBP	_	6	cop	_	_
5	really	_	RB	RB	_	6	advmod	_	_
6	helpful	_	JJ	JJ	_	0	root	_	_
7	,	_	,	,	_	6	punct	_	_
8	so	_	IN	IN	_	10	mark	_	_
9	definitely	_	RB	RB	_	10	advmod	_	_
10	try	_	VBP	VBP	_	6	advcl	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	do	_	VB	VB	_	10	xcomp	_	_
13	those	_	DT	DT	_	12	dobj	_	_
14	.	_	.	.	_	6	punct	_	_
1	But	_	CC	CC	_	6	cc	_	_
2	yeah	_	RB	RB	_	6	advmod	_	_
3	,	_	,	,	_	6	punct	_	_
4	you	_	PRP	PRP	_	6	nsubj	_	_
5	will	_	MD	MD	_	6	aux	_	_
6	have	_	VB	VB	_	0	root	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	engage	_	VB	VB	_	6	xcomp	_	_
9	with	_	IN	IN	_	8	prep	_	_
10	help	_	NN	NN	_	9	pobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	life	_	NN	NN	_	10	conj	_	_
13	in	_	IN	IN	_	8	prep	_	_
14	general	_	NN	NN	_	13	pobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	get	_	VB	VB	_	6	xcomp	_	_
17	somewhere	_	RB	RB	_	16	advmod	_	_
18	-	_	:	:	_	6	punct	_	_
19	but	_	CC	CC	_	6	cc	_	_
20	do	_	VBP	VBP	_	22	aux	_	_
21	n't	_	RB	RB	_	22	neg	_	_
22	beat	_	VB	VB	_	6	conj	_	_
23	yourself	_	PRP	PRP	_	22	dobj	_	_
24	up	_	RP	RP	_	22	prt	_	_
25	about	_	IN	IN	_	22	prep	_	_
26	feeling	_	VBG	VBG	_	25	pcomp	_	_
27	unmotivated	_	JJ	JJ	_	26	acomp	_	_
28	to	_	TO	TO	_	29	aux	_	_
29	do	_	VB	VB	_	27	xcomp	_	_
30	anything	_	NN	NN	_	29	dobj	_	_
31	at	_	IN	IN	_	29	prep	_	_
32	the	_	DT	DT	_	33	det	_	_
33	minute	_	NN	NN	_	31	pobj	_	_
34	,	_	,	,	_	6	punct	_	_
35	lots	_	NNS	NNS	_	38	nsubj	_	_
36	of	_	IN	IN	_	35	prep	_	_
37	people	_	NNS	NNS	_	36	pobj	_	_
38	feel	_	VBP	VBP	_	6	dep	_	_
39	like	_	IN	IN	_	38	prep	_	_
40	this	_	DT	DT	_	39	pobj	_	_
41	and	_	CC	CC	_	6	cc	_	_
42	hopefully	_	RB	RB	_	45	advmod	_	_
43	it	_	PRP	PRP	_	45	nsubj	_	_
44	will	_	MD	MD	_	45	aux	_	_
45	pass	_	VB	VB	_	6	conj	_	_
46	as	_	IN	IN	_	48	mark	_	_
47	you	_	PRP	PRP	_	48	nsubj	_	_
48	begin	_	VBP	VBP	_	45	advcl	_	_
49	to	_	TO	TO	_	50	aux	_	_
50	feel	_	VB	VB	_	48	xcomp	_	_
51	better	_	RBR	RBR	_	50	advmod	_	_
52	.	_	.	.	_	6	punct	_	_
1	Being	_	VBG	VBG	_	2	auxpass	_	_
2	unkind	_	VBN	VBN	_	7	csubj	_	_
3	to	_	TO	TO	_	2	prep	_	_
4	yourself	_	PRP	PRP	_	3	pobj	_	_
5	will	_	MD	MD	_	7	aux	_	_
6	only	_	RB	RB	_	7	advmod	_	_
7	make	_	VB	VB	_	0	root	_	_
8	you	_	PRP	PRP	_	9	nsubj	_	_
9	feel	_	VB	VB	_	7	ccomp	_	_
10	worse	_	JJR	JJR	_	9	acomp	_	_
11	-	_	:	:	_	7	punct	_	_
12	be	_	VB	VB	_	13	cop	_	_
13	kind	_	JJ	JJ	_	7	dep	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	yourself	_	PRP	PRP	_	14	pobj	_	_
16	and	_	CC	CC	_	13	cc	_	_
17	get	_	VB	VB	_	13	conj	_	_
18	some	_	DT	DT	_	19	det	_	_
19	help	_	NN	NN	_	17	dobj	_	_
20	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, a2 / awkward)
(a / and, op, i / intelligent-41)
(a10 / and, op, f4 / feel-01)
(a10 / and, op, p5 / pass-03)
(a11 / and, op, g6 / get-01)
(a11 / and, op, k2 / kind-41)
(a4 / alone, domain, y / you)
(a4 / alone, mod, d / definite)
(a5 / appointment, prep-with, s / service)
(a6 / and, op, h / have-03)
(a6 / and, op, p3 / possible)
(a7 / and, op, e3 / exercise)
(a7 / and, op, m4 / meditation)
(a8 / and, op, h3 / help)
(a8 / and, op, l2 / life)
(b / beat-00, ARG1, y7 / you)
(b3 / begin-01, ARG0, y8 / you)
(b3 / begin-01, ARG1, f5 / feel-01)
(c / contrast-01, ARG2, r / recommend-01)
(c2 / counsel-01, ARG0, s / service)
(c2 / counsel-01, ARG1, y / you)
(c5 / contrast-01, ARG2, c6 / contrast-01)
(c6 / contrast-01, ARG2, b / beat-00)
(d3 / depress-01, ARG1, y3 / you)
(d4 / do-02, ARG0, y6 / you)
(d4 / do-02, ARG1, a7 / and)
(d5 / do-02, ARG0, y7 / you)
(d5 / do-02, ARG1, a9 / anything)
(d5 / do-02, time, m6 / minute)
(e2 / experience-01, ARG0, y5 / you)
(e2 / experience-01, ARG1, t3 / thing)
(e4 / engage-01, ARG1, y7 / you)
(e4 / engage-01, ARG2, a8 / and)
(e4 / engage-01, purpose, g4 / get-05)
(f / feel-01, ARG0, p / person)
(f / feel-01, ARG1, a / and)
(f / feel-01, time, g / get-05)
(f3 / feel-01, ARG0, y7 / you)
(f3 / feel-01, ARG1, m5 / motivate-01)
(f4 / feel-01, ARG0, p4 / person)
(f5 / feel-01, ARG0, y8 / you)
(f5 / feel-01, ARG1, g5 / good)
(f6 / feel-01, ARG1, b2 / bad)
(g / get-05, ARG1, p / person)
(g2 / get-01, ARG0, y2 / you)
(g2 / get-01, ARG1, a5 / appointment)
(g4 / get-05, ARG1, y7 / you)
(g4 / get-05, ARG2, s5 / somewhere)
(g6 / get-01, ARG1, h4 / help-01)
(h / have-03, ARG0, y4 / you)
(h / have-03, ARG1, p2 / problem)
(h / have-03, time, m10 / minute)
(h2 / help-01, ARG0, a7 / and)
(h2 / help-01, mod, r4 / really)
(h4 / help-01, mod, s6 / some)
(h5 / hope-01, ARG1, p5 / pass-03)
(i / intelligent-41, ARG1, p / person)
(i3 / important, domain, t2 / thing)
(l / label-01, ARG2, t2 / thing)
(l2 / life, mod, g3 / general)
(m3 / matter-01, ARG1, t / tell-01)
(m3 / matter-01, mod, r3 / really)
(m5 / motivate-01, ARG1, y7 / you)
(m5 / motivate-01, ARG2, d5 / do-02)
(m8 / make-02, ARG0, k / kind-41)
(m8 / make-02, ARG1, f6 / feel-01)
(m8 / make-02, mod, o4 / only)
(o / or, op, d3 / depress-01)
(o2 / obvious-41, ARG1, h / have-03)
(p / person, quant, m2 / most)
(p2 / problem, quant, s2 / some)
(p3 / possible, domain, u3 / use-01)
(p4 / person, quant, l3 / lot)
(p5 / pass-03, time, b3 / begin-01)
(r / recommend-01, ARG0, i2 / i)
(r / recommend-01, ARG1, g2 / get-01)
(r / recommend-01, mod, r2 / really)
(s3 / support-01, ARG1, y4 / you)
(s3 / support-01, mod, s4 / some)
(t / tell-01, ARG0, a3 / anyone)
(t / tell-01, ARG1, o / or)
(t / tell-01, ARG2, y3 / you)
(t4 / try-01, ARG0, y6 / you)
(t4 / try-01, ARG1, d4 / do-02)
(u3 / use-01, ARG0, y4 / you)
(u3 / use-01, ARG1, s3 / support-01)

Input(Some(Graph((multi-sentence :snt1 (feel-01 :ARG0-of (cause-01 :ARG1 (alone :mod definite :domain you :polarity - :location university)) :time (get-05 :ord (ordinal-entity :value 1) :ARG2 university :ARG1 person) :ARG1 (and :op awkward :op (intelligent-41 :polarity - :ARG1 person)) :ARG0 (person :quant most)) :snt2 (contrast-01 :ARG2 (recommend-01 :mod really :ARG1 (get-01 :ARG1 (appointment :prep-with (service :location (university :poss you) :ARG0-of (counsel-01 :ARG1 you))) :ARG0 you) :ARG0 i)) :snt3 (matter-01 :mod really :ARG1 (tell-01 :ARG2 you :ARG1 (or :op (depress-01 :polarity - :ARG1 you) :op (depress-01 :ARG1 you)) :ARG0 anyone) :polarity -) :snt4 (and :op (possible :domain (use-01 :ARG1 (support-01 :mod some :ARG1 you) :ARG0 you)) :op (have-03 :time minute :ARG1-of obvious-41 :ARG1 (problem :quant some) :ARG0 you)) :snt5 (important :ARG1-of (equal-01 :polarity - :ARG2 (thing :ARG1-of (experience-01 :ARG0 you))) :domain (thing :ARG2-of label-01)) :snt6 (help-01 :ARG0-of (cause-01 :ARG1 (try-01 :ARG1 (do-02 :ARG0 you :ARG1 and) :ARG0 you)) :mod really :ARG0 (and :op exercise :op meditation)) :snt7 (contrast-01 :ARG2 (contrast-01 :ARG2 (beat-00 :ARG1-of (cause-01 :ARG0 (feel-01 :ARG1 (motivate-01 :ARG2 (do-02 :time minute :ARG1 anything :ARG0 you) :polarity - :ARG1 you) :ARG0 you)) :polarity - :ARG1 you) :ARG1 (obligate-01 :ARG2 (engage-01 :purpose (get-05 :ARG2 somewhere :ARG1 you) :ARG2 (and :op (life :mod general) :op help) :ARG1 you)))) :snt8 (and :op (pass-03 :time (begin-01 :ARG1 (feel-01 :ARG1 (good :degree more) :ARG0 you) :ARG0 you) :ARG1-of hope-01 :ARG1 thing) :op (feel-01 :ARG1 (thing :ARG1-of (resemble-01 :ARG2 this)) :ARG0 (person :quant lot))) :snt9 (make-02 :mod only :ARG1 (feel-01 :ARG1 (bad :degree more) :ARG0 you) :ARG0 (kind-41 :ARG1 you :polarity - :ARG2 you)) :snt10 (and :op (get-01 :ARG1 (help-01 :mod some :ARG2 you) :mode imperative :ARG0 you) :op (kind-41 :ARG1 you :mode imperative :ARG2 you))),ArrayBuffer(Span(2,3,List(0),feel,feel-01,false), Span(17,18,List(1),alone,alone,false), Span(13,14,List(2),you,you,false), Span(9,10,List(3),get,get-05,false), Span(4,5,List(4),and,and,false), Span(5,6,List(5),awkward,awkward,false), Span(3,4,List(6),unintelligent,intelligent-41,false), Span(0,1,List(7, 8),Most,(person :quant most),false), Span(20,21,List(9),But,contrast-01,false), Span(24,25,List(10),recommend,recommend-01,false), Span(23,24,List(11),really,really,false), Span(27,28,List(12),get,get-01,false), Span(29,30,List(13),appointment,appointment,false), Span(34,35,List(14),services,service,false), Span(33,34,List(15),counselling,counsel-01,false), Span(26,27,List(16),you,you,false), Span(11,12,List(17),uni,i,false), Span(40,41,List(18),matter,matter-01,false), Span(39,40,List(19),really,really,false), Span(44,45,List(20),told,tell-01,false), Span(45,46,List(21),you,you,false), Span(50,51,List(22),or,or,false), Span(49,50,List(23),depressed,depress-01,false), Span(42,43,List(24),anyone,anyone,false), Span(62,63,List(25),and,and,false), Span(63,64,List(26),could,possible,false), Span(64,65,List(27),use,use-01,false), Span(66,67,List(28),support,support-01,false), Span(57,58,List(29),some,some,false), Span(43,44,List(30),has,have-03,false), Span(61,62,List(31),minute,minute,false), Span(58,59,List(32),problems,problem,false), Span(65,66,List(33),some,some,false), Span(47,48,List(34),you,you,false), Span(72,73,List(35),important,important,false), Span(75,76,List(36, 37),experiences,(thing :ARG1-of experience-01),false), Span(53,54,List(38),you,you,false), Span(68,69,List(39, 40),labels,(thing :ARG2-of label-01),false), Span(100,101,List(41),help,help-01,false), Span(86,87,List(42),try,try-01,false), Span(37,38,List(43),does,do-02,false), Span(94,95,List(44),you,you,false), Span(81,82,List(45),really,really,false), Span(78,79,List(46),and,and,false), Span(79,80,List(47),exercise,exercise,false), Span(77,78,List(48),Meditation,meditation,false), Span(91,92,List(49),But,contrast-01,false), Span(109,110,List(50),but,contrast-01,false), Span(112,113,List(51),beat,beat-00,false), Span(116,117,List(52),feeling,feel-01,false), Span(88,89,List(53),do,do-02,false), Span(123,124,List(54),minute,minute,false), Span(120,121,List(55),anything,anything,false), Span(98,99,List(56),engage,engage-01,false), Span(106,107,List(57),get,get-05,false), Span(107,108,List(58),somewhere,somewhere,false), Span(101,102,List(59),and,and,false), Span(102,103,List(60),life,life,false), Span(104,105,List(61),general,general,false), Span(161,162,List(62),help,help,false), Span(137,138,List(63),you,you,false), Span(131,132,List(64),and,and,false), Span(135,136,List(65),pass,pass-03,false), Span(138,139,List(66),begin,begin-01,false), Span(128,129,List(67),feel,feel-01,false), Span(141,142,List(68),better,good,false), Span(150,151,List(69),you,you,false), Span(140,141,List(70),feel,feel-01,false), Span(130,131,List(71),this,this,false), Span(125,126,List(72, 73),lots,(person :quant lot),false), Span(149,150,List(74),make,make-02,false), Span(148,149,List(75),only,only,false), Span(151,152,List(76),feel,feel-01,false), Span(152,153,List(77),worse,bad,false), Span(144,145,List(78),unkind,kind-41,false), Span(158,159,List(79),and,and,false), Span(159,160,List(80),get,get-01,false), Span(160,161,List(81),some,some,false), Span(155,156,List(82),kind,kind-41,false), Span(15,16,List(83),definitely,definite,false), Span(55,56,List(84),obviously,obvious-41,false), Span(117,118,List(85),unmotivated,motivate-01,false), Span(132,133,List(86),hopefully,hope-01,false), Span(82,83,List(87),helpful,help-01,false)),Map(57 -> get-05, 84 -> obvious-41, 78 -> kind-41, 63 -> you, 45 -> really, 39 -> thing, 30 -> have-03, 66 -> begin-01, 51 -> beat-00, 87 -> help-01, 2 -> you, 72 -> person, 5 -> awkward, 48 -> meditation, 69 -> you, 33 -> some, 27 -> use-01, 54 -> minute, 12 -> get-01, 60 -> life, 8 -> most, 15 -> counsel-01, 42 -> try-01, 36 -> thing, 21 -> you, 71 -> this, 18 -> matter-01, 86 -> hope-01, 24 -> anyone, 74 -> make-02, 68 -> good, 53 -> do-02, 80 -> get-01, 41 -> help-01, 35 -> important, 83 -> definite, 62 -> help, 56 -> engage-01, 7 -> person, 77 -> bad, 59 -> and, 17 -> i, 1 -> alone, 50 -> contrast-01, 44 -> you, 23 -> depress-01, 38 -> you, 65 -> pass-03, 47 -> exercise, 26 -> possible, 4 -> and, 11 -> really, 32 -> problem, 14 -> service, 82 -> kind-41, 29 -> some, 20 -> tell-01, 85 -> motivate-01, 79 -> and, 70 -> feel-01, 64 -> and, 46 -> and, 52 -> feel-01, 73 -> lot, 67 -> feel-01, 34 -> you, 28 -> support-01, 6 -> intelligent-41, 40 -> label-01, 55 -> anything, 49 -> contrast-01, 76 -> feel-01, 61 -> general, 9 -> contrast-01, 0 -> feel-01, 43 -> do-02, 22 -> or, 58 -> somewhere, 16 -> you, 37 -> experience-01, 19 -> really, 3 -> get-05, 10 -> recommend-01, 31 -> minute, 25 -> and, 13 -> appointment, 81 -> some, 75 -> only),Map(a7 -> and, h5 -> hope-01, s5 -> somewhere, m3 -> matter-01, b3 -> begin-01, k2 -> kind-41, h -> have-03, g3 -> general, r3 -> really, t4 -> try-01, a10 -> and, y4 -> you, p5 -> pass-03, h2 -> help-01, s2 -> some, g6 -> get-01, t -> tell-01, b -> beat-00, k -> kind-41, b2 -> bad, m2 -> most, d3 -> depress-01, y7 -> you, f4 -> feel-01, e2 -> experience-01, p2 -> problem, m5 -> motivate-01, a9 -> anything, l3 -> lot, a3 -> anyone, m8 -> make-02, t6 -> this, s -> service, a6 -> and, h4 -> help-01, s4 -> some, d -> definite, t3 -> thing, g2 -> get-01, i3 -> important, f6 -> feel-01, r2 -> really, y -> you, g -> get-05, p -> person, a -> and, p4 -> person, e4 -> engage-01, y3 -> you, g5 -> good, o2 -> obvious-41, y6 -> you, a5 -> appointment, f3 -> feel-01, c6 -> contrast-01, d5 -> do-02, a8 -> and, m4 -> meditation, t2 -> thing, i2 -> i, l2 -> life, a11 -> and, i -> intelligent-41, r -> recommend-01, a2 -> awkward, r4 -> really, c -> contrast-01, h3 -> help, s3 -> support-01, l -> label-01, d4 -> do-02, f -> feel-01, f5 -> feel-01, o -> or, s6 -> some, o4 -> only, y8 -> you, e3 -> exercise, p3 -> possible, m6 -> minute, g4 -> get-05, y2 -> you, c2 -> counsel-01, m10 -> minute, a4 -> alone, c5 -> contrast-01, y5 -> you, u3 -> use-01))),[Ljava.lang.String;@4bd31064,Annotation([Ljava.lang.String;@e3c0e40,[Ljava.lang.String;@329dbdbf,[Ljava.lang.String;@7354b8c5),Annotation([Ljava.lang.String;@20d7d6fb,[Ljava.lang.String;@4ef782af,[Ledu.cmu.lti.nlp.amr.Dependency;@11d8ae8b),Annotation([Ljava.lang.String;@479cbee5,[Ljava.lang.String;@59e2d8e3,[Ljava.lang.String;@2b72cb8a),Annotation([Ljava.lang.String;@7f8a9499,[Ljava.lang.String;@5d43661b,[Ledu.cmu.lti.nlp.amr.Entity;@12299890))
AMR:
(a / and, op, a7 / and)
(a / and, op, a9 / anything)
(a / and, op, c / contrast-01)
(a / and, op, h3 / help)
(a / and, op, i3 / important)
(a / and, op, m6 / minute)
(a / and, op, p2 / problem)
(a / and, op, r / recommend-01)
(a / and, op, s4 / some)
(a / and, op, t3 / thing)
(a / and, op, y6 / you)
(a10 / and, op, h5 / hope-01)
(a10 / and, op, t6 / this)
(a11 / and, op, g6 / get-01)
(a6 / and, op, m10 / minute)
(a6 / and, op, p3 / possible)
(a7 / and, op, e3 / exercise)
(a7 / and, op, m4 / meditation)
(a8 / and, op, h2 / help-01)
(a8 / and, op, l2 / life)
(b / beat-00, ARG1, i / intelligent-41)
(b3 / begin-01, ARG0, y7 / you)
(b3 / begin-01, ARG1, i / intelligent-41)
(c / contrast-01, ARG1, i / intelligent-41)
(c / contrast-01, ARG6, d / definite)
(c2 / counsel-01, ARG1, s / service)
(c5 / contrast-01, ARG1, i / intelligent-41)
(c6 / contrast-01, ARG1, i / intelligent-41)
(d / definite, domain, y / you)
(d3 / depress-01, ARG1, y4 / you)
(d4 / do-02, ARG1, s / service)
(d4 / do-02, ARG6, r3 / really)
(d5 / do-02, ARG1, i / intelligent-41)
(e2 / experience-01, ARG1, t3 / thing)
(e4 / engage-01, ARG1, i / intelligent-41)
(f / feel-01, ARG0, p / person)
(f / feel-01, ARG1, i / intelligent-41)
(f / feel-01, ARG6, a2 / awkward)
(f / feel-01, condition, g / get-05)
(f3 / feel-01, ARG1, i / intelligent-41)
(f4 / feel-01, ARG1, i / intelligent-41)
(f4 / feel-01, ARG6, g5 / good)
(f5 / feel-01, ARG0, p4 / person)
(f5 / feel-01, ARG1, i / intelligent-41)
(f6 / feel-01, ARG0, y8 / you)
(f6 / feel-01, ARG1, i / intelligent-41)
(f6 / feel-01, ARG6, b2 / bad)
(g / get-05, ARG0, a5 / appointment)
(g / get-05, ARG1, i2 / i)
(g2 / get-01, ARG0, y2 / you)
(g4 / get-05, ARG0, g3 / general)
(g4 / get-05, ARG1, i / intelligent-41)
(g4 / get-05, ARG6, s5 / somewhere)
(g6 / get-01, ARG0, s6 / some)
(g6 / get-01, ARG1, i / intelligent-41)
(h / have-03, ARG1, y4 / you)
(h / have-03, ARG2, a2 / awkward)
(h2 / help-01, ARG1, i / intelligent-41)
(h4 / help-01, ARG1, i / intelligent-41)
(h4 / help-01, ARG6, r4 / really)
(h5 / hope-01, ARG1, i / intelligent-41)
(k / kind-41, ARG1, i / intelligent-41)
(k2 / kind-41, ARG1, i / intelligent-41)
(l / label-01, ARG1, i / intelligent-41)
(l / label-01, ARG2, t2 / thing)
(m3 / matter-01, ARG0, a4 / alone)
(m3 / matter-01, ARG1, a3 / anyone)
(m3 / matter-01, time, r3 / really)
(m5 / motivate-01, ARG1, i / intelligent-41)
(m8 / make-02, ARG0, o4 / only)
(m8 / make-02, ARG1, i / intelligent-41)
(o / or, op, d3 / depress-01)
(o2 / obvious-41, ARG1, i / intelligent-41)
(o2 / obvious-41, ARG6, y5 / you)
(p / person, quant, m2 / most)
(p4 / person, quant, l3 / lot)
(p5 / pass-03, ARG1, i / intelligent-41)
(r / recommend-01, ARG1, g2 / get-01)
(r / recommend-01, ARG6, r2 / really)
(s3 / support-01, ARG1, i / intelligent-41)
(t / tell-01, ARG0, a3 / anyone)
(t / tell-01, ARG1, h / have-03)
(t / tell-01, ARG6, y3 / you)
(t4 / try-01, ARG1, i / intelligent-41)
(u3 / use-01, ARG0, s2 / some)
(u3 / use-01, ARG1, i / intelligent-41)
(u3 / use-01, ARG6, p3 / possible)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.2
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.1.1.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.1.0
WARNING: makeIds can't find span Id: 0.3.1.0.0
WARNING: makeIds can't find span Id: 0.3.1.0.0.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.3
WARNING: makeIds can't find span Id: 0.3.0.1
WARNING: makeIds can't find span Id: 0.3.0.1.0
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.4.1.1
WARNING: makeIds can't find span Id: 0.4.1.1.0
WARNING: makeIds can't find span Id: 0.4.1.1.0.0
WARNING: makeIds can't find span Id: 0.4.0
WARNING: makeIds can't find span Id: 0.4.0.0
WARNING: makeIds can't find span Id: 0.5
WARNING: makeIds can't find span Id: 0.5.2.0
WARNING: makeIds can't find span Id: 0.5.2.0.1
WARNING: makeIds can't find span Id: 0.5.2.0.0
WARNING: makeIds can't find span Id: 0.5.1
WARNING: makeIds can't find span Id: 0.5.0
WARNING: makeIds can't find span Id: 0.5.0.1
WARNING: makeIds can't find span Id: 0.5.0.0
WARNING: makeIds can't find span Id: 0.6
WARNING: makeIds can't find span Id: 0.6.0
WARNING: makeIds can't find span Id: 0.6.0.1
WARNING: makeIds can't find span Id: 0.6.0.1.1.0
WARNING: makeIds can't find span Id: 0.6.0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.6.0.1.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.6.0.1.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.6.0.0.0
WARNING: makeIds can't find span Id: 0.6.0.0.0.2
WARNING: makeIds can't find span Id: 0.6.0.0.0.2.0
WARNING: makeIds can't find span Id: 0.6.0.0.0.1
WARNING: makeIds can't find span Id: 0.6.0.0.0.1.1
WARNING: makeIds can't find span Id: 0.6.0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.6.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.6.0.0.0.0
WARNING: makeIds can't find span Id: 0.7
WARNING: makeIds can't find span Id: 0.7.1
WARNING: makeIds can't find span Id: 0.7.1.1
WARNING: makeIds can't find span Id: 0.7.1.1.0
WARNING: makeIds can't find span Id: 0.7.1.1.0.1
WARNING: makeIds can't find span Id: 0.7.1.1.0.0
WARNING: makeIds can't find span Id: 0.7.0
WARNING: makeIds can't find span Id: 0.7.0.1.0.0
WARNING: makeIds can't find span Id: 0.7.0.0
WARNING: makeIds can't find span Id: 0.7.0.0.0
WARNING: makeIds can't find span Id: 0.8
WARNING: makeIds can't find span Id: 0.8.2
WARNING: makeIds can't find span Id: 0.8.1
WARNING: makeIds can't find span Id: 0.8.1.0
WARNING: makeIds can't find span Id: 0.8.0
WARNING: makeIds can't find span Id: 0.9
WARNING: makeIds can't find span Id: 0.9.1
WARNING: makeIds can't find span Id: 0.9.1.1.0
WARNING: makeIds can't find span Id: 0.9.0
WARNING: makeIds can't find span Id: 0.0.3.0.2
WARNING: makeIds can't find span Id: 0.3.0.2
WARNING: makeIds can't find span Id: 0.6.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.7.1.0
WARNING: makeIds can't find span Id: 0.9.1.1
Decoded in 28,242,284 microseconds
Sentence: Good luck.

Oracle Span 1:  Good => good
Oracle Span 2:  luck => luck
Spans:
Span 0-1:  Good => good
Span 1-2:  luck => luck

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Good => good
Oracle Span 1-2:  luck => luck

Dependencies:
1	Good	_	JJ	JJ	_	0	root	_	_
2	luck	_	NN	NN	_	1	dep	_	_
3	.	_	.	.	_	1	punct	_	_

Oracle:
(l / luck, mod, g / good)

Input(Some(Graph((luck :mod good),ArrayBuffer(Span(1,2,List(0),luck,luck,false), Span(0,1,List(1),Good,good,false)),Map(1 -> good, 0 -> luck),Map(g -> good, l -> luck))),[Ljava.lang.String;@2fba3fc4,Annotation([Ljava.lang.String;@4bf48f6,[Ljava.lang.String;@420a85c4,[Ljava.lang.String;@1c39680d),Annotation([Ljava.lang.String;@62833051,[Ljava.lang.String;@1c852c0f,[Ledu.cmu.lti.nlp.amr.Dependency;@a37aefe),Annotation([Ljava.lang.String;@5d99c6b5,[Ljava.lang.String;@266374ef,[Ljava.lang.String;@13b3d178),Annotation([Ljava.lang.String;@24c4ddae,[Ljava.lang.String;@37fb0bed,[Ledu.cmu.lti.nlp.amr.Entity;@a82c5f1))
AMR:
(l / luck, mod, g / good)

WARNING: makeIds can't find span Id: 0.0
Decoded in 5,473 microseconds
Sentence: I think a lot more people feel the same way as you do, but medicate themselves by using friends. Whilst it probably isn't a 'solution' as such, being around friends whilst being depressed is definitely better than being alone and being depressed. Either way, if you fancy a chat, feel free to PM

Oracle Span 1:  alone => alone
Oracle Span 2:  and => and
Oracle Span 3:  around => around
Oracle Span 4:  better => good
Oracle Span 5:  but => contrast-01
Oracle Span 6:  chat => chat-01
Oracle Span 7:  definitely => definite
Oracle Span 8:  depressed => depress-01
Oracle Span 9:  Either => either
Oracle Span 10:  fancy => fancy-02
Oracle Span 11:  feel => feel-01
Oracle Span 12:  feel => feel-01
Oracle Span 13:  free => free-41
Oracle Span 14:  friends => friend
Oracle Span 15:  friends => friend
Oracle Span 16:  I => i
Oracle Span 17:  lot => (person :quant lot)
Oracle Span 18:  medicate => medicate-01
Oracle Span 19:  more => more
Oracle Span 20:  PM => PM
Oracle Span 21:  probably => probable
Oracle Span 22:  same => same-41
Oracle Span 23:  solution => solution
Oracle Span 24:  think => think-01
Oracle Span 25:  using => use-01
Oracle Span 26:  way => way
Oracle Span 27:  way => way
Oracle Span 28:  you => you
Oracle Span 29:  you => you
Spans:
Span 44-45:  alone => alone
Span 45-46:  and => and
Span 34-35:  around => around
Span 41-42:  better => good
Span 14-15:  but => contrast-01
Span 56-57:  chat => chat-01
Span 40-41:  definitely => definite
Span 38-39:  depressed => depress-01
Span 49-50:  Either => either
Span 54-55:  fancy => fancy-02
Span 6-7:  feel => feel-01
Span 58-59:  feel => feel-01
Span 59-60:  free => free-41
Span 19-20:  friends => friend
Span 35-36:  friends => friend
Span 0-1:  I => i
Span 3-4:  lot => (person :quant lot)
Span 15-16:  medicate => medicate-01
Span 4-5:  more => more
Span 61-62:  PM => PM
Span 23-24:  probably => probable
Span 8-9:  same => same-41
Span 28-29:  solution => solution
Span 1-2:  think => think-01
Span 18-19:  using => use-01
Span 9-10:  way => way
Span 50-51:  way => way
Span 11-12:  you => you
Span 53-54:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of solution in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of around in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of friends in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of whilst in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of depressed in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of definitely in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of better in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of than in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of alone in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of depressed in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of Either in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of way in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of fancy in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of chat in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of free in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of PM in position 61
Langrangian relaxation converged after 40 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of solution in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of around in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of friends in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of whilst in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of depressed in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of definitely in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of better in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of than in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of alone in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of depressed in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of Either in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of way in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of fancy in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of chat in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of feel in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of free in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of PM in position 61
Oracle Span 44-45:  alone => alone
Oracle Span 45-46:  and => and
Oracle Span 34-35:  around => around
Oracle Span 41-42:  better => good
Oracle Span 14-15:  but => contrast-01
Oracle Span 56-57:  chat => chat-01
Oracle Span 40-41:  definitely => definite
Oracle Span 38-39:  depressed => depress-01
Oracle Span 49-50:  Either => either
Oracle Span 54-55:  fancy => fancy-02
Oracle Span 6-7:  feel => feel-01
Oracle Span 58-59:  feel => feel-01
Oracle Span 59-60:  free => free-41
Oracle Span 19-20:  friends => friend
Oracle Span 35-36:  friends => friend
Oracle Span 0-1:  I => i
Oracle Span 3-4:  lot => (person :quant lot)
Oracle Span 15-16:  medicate => medicate-01
Oracle Span 4-5:  more => more
Oracle Span 61-62:  PM => PM
Oracle Span 23-24:  probably => probable
Oracle Span 8-9:  same => same-41
Oracle Span 28-29:  solution => solution
Oracle Span 1-2:  think => think-01
Oracle Span 18-19:  using => use-01
Oracle Span 9-10:  way => way
Oracle Span 50-51:  way => way
Oracle Span 11-12:  you => you
Oracle Span 53-54:  you => you

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	think	_	VBP	VBP	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	lot	_	RB	RB	_	5	npadvmod	_	_
5	more	_	JJR	JJR	_	6	amod	_	_
6	people	_	NNS	NNS	_	7	nsubj	_	_
7	feel	_	VBP	VBP	_	2	ccomp	_	_
8	the	_	DT	DT	_	10	det	_	_
9	same	_	JJ	JJ	_	10	amod	_	_
10	way	_	NN	NN	_	7	dobj	_	_
11	as	_	IN	IN	_	13	mark	_	_
12	you	_	PRP	PRP	_	13	nsubj	_	_
13	do	_	VBP	VBP	_	7	advcl	_	_
14	,	_	,	,	_	13	punct	_	_
15	but	_	CC	CC	_	13	cc	_	_
16	medicate	_	VBP	VBP	_	13	conj	_	_
17	themselves	_	PRP	PRP	_	16	dobj	_	_
18	by	_	IN	IN	_	16	prep	_	_
19	using	_	VBG	VBG	_	18	pcomp	_	_
20	friends	_	NNS	NNS	_	19	dobj	_	_
21	.	_	.	.	_	2	punct	_	_
1	Whilst	_	IN	IN	_	8	mark	_	_
2	it	_	PRP	PRP	_	8	nsubj	_	_
3	probably	_	RB	RB	_	8	advmod	_	_
4	is	_	VBZ	VBZ	_	8	cop	_	_
5	n't	_	RB	RB	_	8	neg	_	_
6	a	_	DT	DT	_	8	det	_	_
7	'	_	``	``	_	8	punct	_	_
8	solution	_	NN	NN	_	21	dep	_	_
9	'	_	''	''	_	8	punct	_	_
10	as	_	IN	IN	_	8	prep	_	_
11	such	_	JJ	JJ	_	10	pobj	_	_
12	,	_	,	,	_	21	punct	_	_
13	being	_	VBG	VBG	_	21	csubj	_	_
14	around	_	IN	IN	_	13	prep	_	_
15	friends	_	NNS	NNS	_	16	nn	_	_
16	whilst	_	NNS	NNS	_	14	pobj	_	_
17	being	_	VBG	VBG	_	18	auxpass	_	_
18	depressed	_	VBN	VBN	_	16	vmod	_	_
19	is	_	VBZ	VBZ	_	21	cop	_	_
20	definitely	_	RB	RB	_	21	advmod	_	_
21	better	_	JJR	JJR	_	0	root	_	_
22	than	_	IN	IN	_	21	prep	_	_
23	being	_	VBG	VBG	_	24	cop	_	_
24	alone	_	RB	RB	_	22	pcomp	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	being	_	VBG	VBG	_	27	auxpass	_	_
27	depressed	_	VBN	VBN	_	24	conj	_	_
28	.	_	.	.	_	21	punct	_	_
1	Either	_	DT	DT	_	2	det	_	_
2	way	_	NN	NN	_	10	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	if	_	IN	IN	_	6	mark	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	fancy	_	VBZ	VBZ	_	2	dep	_	_
7	a	_	DT	DT	_	8	det	_	_
8	chat	_	NN	NN	_	6	dobj	_	_
9	,	_	,	,	_	2	punct	_	_
10	feel	_	VBP	VBP	_	0	root	_	_
11	free	_	JJ	JJ	_	10	acomp	_	_
12	to	_	TO	TO	_	11	prep	_	_
13	PM	_	NNP	NNP	_	12	pobj	_	_

Oracle:
(a2 / around, op, f4 / friend)
(a3 / and, op, a4 / alone)
(a3 / and, op, d / depress-01)
(a4 / alone, domain, y2 / you)
(c / contrast-01, ARG1, f / feel-01)
(c / contrast-01, ARG2, m3 / medicate-01)
(d / depress-01, ARG1, y2 / you)
(f / feel-01, ARG0, p / person)
(f / feel-01, ARG1, w / way)
(f2 / feel-01, ARG0, y / you)
(f6 / free-41, ARG2, p2 / PM)
(f7 / fancy-02, ARG1, c3 / chat-01)
(g / good, compared-to, a3 / and)
(g / good, mod, d2 / definite)
(l / lot, degree, m2 / more)
(m3 / medicate-01, ARG0, p / person)
(m3 / medicate-01, ARG1, p / person)
(m3 / medicate-01, instrument, u / use-01)
(p / person, quant, l / lot)
(s / same-41, ARG1, w / way)
(s / same-41, ARG2, f2 / feel-01)
(s2 / solution, mod, p3 / probable)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, c / contrast-01)
(u / use-01, ARG0, p / person)
(u / use-01, ARG1, f3 / friend)
(w2 / way, mod, e / either)

Input(Some(Graph((multi-sentence :snt1 (think-01 :ARG1 (contrast-01 :ARG2 (medicate-01 :instrument (use-01 :ARG1 friend :ARG0 person) :ARG0 person :ARG1 person) :ARG1 (feel-01 :ARG1 (way :ARG1-of (same-41 :ARG2 (feel-01 :ARG0 you))) :ARG0 (person :quant (lot :degree more)))) :ARG0 i) :snt2 (contrast-01 :ARG1 (solution :mod probable :mod as-such :polarity - :domain be-located-at-91) :ARG2 (good :mod definite :compared-to (and :op (alone :domain you) :op depress-01) :domain (be-located-at-91 :ARG1 you :ARG2 (around :op friend) :time (depress-01 :ARG1 you)) :degree more)) :snt3 (have-condition-91 :ARG1 (feel-01 :ARG0 you :ARG1 (free-41 :ARG2 PM :ARG1 you)) :ARG2 (fancy-02 :ARG1 (chat-01 :ARG0 you) :ARG0 you) :mod (way :mod either))),ArrayBuffer(Span(1,2,List(0),think,think-01,false), Span(14,15,List(1),but,contrast-01,false), Span(15,16,List(2),medicate,medicate-01,false), Span(18,19,List(3),using,use-01,false), Span(19,20,List(4),friends,friend,false), Span(6,7,List(5),feel,feel-01,false), Span(9,10,List(6),way,way,false), Span(8,9,List(7),same,same-41,false), Span(58,59,List(8),feel,feel-01,false), Span(11,12,List(9),you,you,false), Span(3,4,List(10, 11),lot,(person :quant lot),false), Span(4,5,List(12),more,more,false), Span(0,1,List(13),I,i,false), Span(28,29,List(14),solution,solution,false), Span(41,42,List(15),better,good,false), Span(45,46,List(16),and,and,false), Span(44,45,List(17),alone,alone,false), Span(53,54,List(18),you,you,false), Span(34,35,List(19),around,around,false), Span(35,36,List(20),friends,friend,false), Span(38,39,List(21),depressed,depress-01,false), Span(59,60,List(22),free,free-41,false), Span(61,62,List(23),PM,PM,false), Span(54,55,List(24),fancy,fancy-02,false), Span(56,57,List(25),chat,chat-01,false), Span(50,51,List(26),way,way,false), Span(49,50,List(27),Either,either,false), Span(23,24,List(28),probably,probable,false), Span(40,41,List(29),definitely,definite,false)),Map(2 -> medicate-01, 5 -> feel-01, 27 -> either, 12 -> more, 15 -> good, 8 -> feel-01, 21 -> depress-01, 18 -> you, 24 -> fancy-02, 7 -> same-41, 17 -> alone, 1 -> contrast-01, 23 -> PM, 26 -> way, 4 -> friend, 11 -> lot, 14 -> solution, 29 -> definite, 20 -> friend, 28 -> probable, 6 -> way, 9 -> you, 0 -> think-01, 22 -> free-41, 16 -> and, 19 -> around, 10 -> person, 3 -> use-01, 25 -> chat-01, 13 -> i),Map(e -> either, m3 -> medicate-01, w -> way, f7 -> fancy-02, s2 -> solution, t -> think-01, m2 -> more, f4 -> friend, p2 -> PM, a3 -> and, s -> same-41, d -> depress-01, f6 -> free-41, y -> you, g -> good, p -> person, c3 -> chat-01, d2 -> definite, f3 -> friend, w2 -> way, a2 -> around, i -> i, c -> contrast-01, f2 -> feel-01, l -> lot, u -> use-01, f -> feel-01, p3 -> probable, y2 -> you, a4 -> alone))),[Ljava.lang.String;@7b7fdc8,Annotation([Ljava.lang.String;@51c693d,[Ljava.lang.String;@6a57ae10,[Ljava.lang.String;@766653e6),Annotation([Ljava.lang.String;@4e07b95f,[Ljava.lang.String;@28b46423,[Ledu.cmu.lti.nlp.amr.Dependency;@7fc4780b),Annotation([Ljava.lang.String;@3b79fd76,[Ljava.lang.String;@48c76607,[Ljava.lang.String;@43599640),Annotation([Ljava.lang.String;@1f81aa00,[Ljava.lang.String;@6b6776cb,[Ledu.cmu.lti.nlp.amr.Entity;@1863d2fe))
AMR:
(a2 / around, op, f4 / friend)
(a3 / and, op, a4 / alone)
(a4 / alone, poss, i / i)
(c / contrast-01, ARG1, f / feel-01)
(c / contrast-01, ARG2, m3 / medicate-01)
(c3 / chat-01, ARG0, i / i)
(c3 / chat-01, ARG1, e / either)
(d / depress-01, ARG0, i / i)
(d / depress-01, ARG1, f4 / friend)
(d / depress-01, ARG6, g / good)
(f / feel-01, ARG0, p3 / probable)
(f / feel-01, ARG1, w / way)
(f / feel-01, ARG6, m2 / more)
(f2 / feel-01, ARG0, i / i)
(f2 / feel-01, ARG1, f6 / free-41)
(f6 / free-41, ARG1, p2 / PM)
(f7 / fancy-02, ARG0, i / i)
(f7 / fancy-02, ARG1, y2 / you)
(g / good, op, d2 / definite)
(m2 / more, calendar, p / person)
(m3 / medicate-01, ARG1, u / use-01)
(m3 / medicate-01, ARG6, y / you)
(p / person, quant, l / lot)
(s / same-41, ARG1, w / way)
(s2 / solution, poss, i / i)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, f / feel-01)
(u / use-01, ARG1, f3 / friend)
(w2 / way, mod, e / either)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.2
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.1.3
Decoded in 2,572,281 microseconds
Sentence: If i were you id focus on an idol. Someone you aspire to (not want to be them but someone who your admire and have respect for) e.g. someone who came from a bad background and ended up successful and happy with a family and married etc etc

Oracle Span 1:  admire => admire-01
Oracle Span 2:  and => and
Oracle Span 3:  aspire => aspire-01
Oracle Span 4:  background => background
Oracle Span 5:  bad => bad
Oracle Span 6:  but => contrast-01
Oracle Span 7:  came => come-03
Oracle Span 8:  ended => end-03
Oracle Span 9:  family => family
Oracle Span 10:  focus => focus-01
Oracle Span 11:  happy => happy
Oracle Span 12:  have => have-03
Oracle Span 13:  i => i
Oracle Span 14:  idol => idol
Oracle Span 15:  married => marry-01
Oracle Span 16:  respect => respect-01
Oracle Span 17:  Someone => someone
Oracle Span 18:  someone => someone
Oracle Span 19:  someone => someone
Oracle Span 20:  successful => succeed-01
Oracle Span 21:  want => want-01
Oracle Span 22:  you => you
Oracle Span 23:  you => you
Spans:
Span 24-25:  admire => admire-01
Span 25-26:  and => and
Span 12-13:  aspire => aspire-01
Span 37-38:  background => background
Span 36-37:  bad => bad
Span 20-21:  but => contrast-01
Span 33-34:  came => come-03
Span 39-40:  ended => end-03
Span 46-47:  family => family
Span 5-6:  focus => focus-01
Span 43-44:  happy => happy
Span 26-27:  have => have-03
Span 1-2:  i => i
Span 8-9:  idol => idol
Span 48-49:  married => marry-01
Span 27-28:  respect => respect-01
Span 10-11:  Someone => someone
Span 21-22:  someone => someone
Span 31-32:  someone => someone
Span 41-42:  successful => succeed-01
Span 16-17:  want => want-01
Span 3-4:  you => you
Span 11-12:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of successful in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of happy in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of family in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of married in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of etc in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of etc in position 50
Langrangian relaxation converged after 34 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of successful in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of happy in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of family in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of married in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of etc in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of etc in position 50
Oracle Span 24-25:  admire => admire-01
Oracle Span 25-26:  and => and
Oracle Span 12-13:  aspire => aspire-01
Oracle Span 37-38:  background => background
Oracle Span 36-37:  bad => bad
Oracle Span 20-21:  but => contrast-01
Oracle Span 33-34:  came => come-03
Oracle Span 39-40:  ended => end-03
Oracle Span 46-47:  family => family
Oracle Span 5-6:  focus => focus-01
Oracle Span 43-44:  happy => happy
Oracle Span 26-27:  have => have-03
Oracle Span 1-2:  i => i
Oracle Span 8-9:  idol => idol
Oracle Span 48-49:  married => marry-01
Oracle Span 27-28:  respect => respect-01
Oracle Span 10-11:  Someone => someone
Oracle Span 21-22:  someone => someone
Oracle Span 31-32:  someone => someone
Oracle Span 41-42:  successful => succeed-01
Oracle Span 16-17:  want => want-01
Oracle Span 3-4:  you => you
Oracle Span 11-12:  you => you

Dependencies:
1	If	_	IN	IN	_	4	mark	_	_
2	i	_	FW	FW	_	4	nsubj	_	_
3	were	_	VBD	VBD	_	4	cop	_	_
4	you	_	PRP	PRP	_	5	csubj	_	_
5	id	_	VBP	VBP	_	0	root	_	_
6	focus	_	NN	NN	_	5	dobj	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	an	_	DT	DT	_	9	det	_	_
9	idol	_	NN	NN	_	7	pobj	_	_
10	.	_	.	.	_	5	punct	_	_
1	Someone	_	VBD	VBD	_	0	root	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	aspire	_	VBP	VBP	_	1	ccomp	_	_
4	to	_	TO	TO	_	7	aux	_	_
5	(	_	(	(	_	7	punct	_	_
6	not	_	RB	RB	_	7	neg	_	_
7	want	_	VB	VB	_	3	xcomp	_	_
8	to	_	TO	TO	_	10	aux	_	_
9	be	_	VB	VB	_	10	cop	_	_
10	them	_	PRP	PRP	_	7	xcomp	_	_
11	but	_	CC	CC	_	12	cc	_	_
12	someone	_	NN	NN	_	7	dep	_	_
13	who	_	WP	WP	_	15	dobj	_	_
14	your	_	PRP	PRP	_	15	nsubj	_	_
15	admire	_	VBP	VBP	_	12	rcmod	_	_
16	and	_	CC	CC	_	7	cc	_	_
17	have	_	VB	VB	_	7	conj	_	_
18	respect	_	NN	NN	_	17	dobj	_	_
19	for	_	IN	IN	_	17	prep	_	_
20	)	_	)	)	_	7	punct	_	_
21	e.g.	_	JJ	JJ	_	22	amod	_	_
22	someone	_	NN	NN	_	1	nsubj	_	_
23	who	_	WP	WP	_	24	nsubj	_	_
24	came	_	VBD	VBD	_	22	rcmod	_	_
25	from	_	IN	IN	_	24	prep	_	_
26	a	_	DT	DT	_	28	det	_	_
27	bad	_	JJ	JJ	_	28	amod	_	_
28	background	_	NN	NN	_	25	pobj	_	_
29	and	_	CC	CC	_	24	cc	_	_
30	ended	_	VBD	VBD	_	24	conj	_	_
31	up	_	RP	RP	_	32	dep	_	_
32	successful	_	JJ	JJ	_	30	advmod	_	_
33	and	_	CC	CC	_	32	cc	_	_
34	happy	_	JJ	JJ	_	32	conj	_	_
35	with	_	IN	IN	_	30	prep	_	_
36	a	_	DT	DT	_	37	det	_	_
37	family	_	NN	NN	_	35	pobj	_	_
38	and	_	CC	CC	_	22	cc	_	_
39	married	_	VBN	VBN	_	41	amod	_	_
40	etc	_	FW	FW	_	41	conj	_	_
41	etc	_	FW	FW	_	22	conj	_	_

Oracle:
(a / aspire-01, ARG0, y2 / you)
(a / aspire-01, ARG1, s / someone)
(a2 / and, op, h / happy)
(a2 / and, op, h2 / have-03)
(a2 / and, op, m2 / marry-01)
(a2 / and, op, s3 / succeed-01)
(a3 / admire-01, ARG1, s4 / someone)
(b / background, mod, b2 / bad)
(c / come-03, ARG1, s2 / someone)
(c / come-03, ARG2, b / background)
(c3 / contrast-01, ARG1, w / want-01)
(c3 / contrast-01, ARG2, s4 / someone)
(e / end-03, ARG1, s2 / someone)
(e / end-03, ARG2, a2 / and)
(f / focus-01, ARG0, i / i)
(f / focus-01, ARG2, i2 / idol)
(f / focus-01, condition, y / you)
(h / happy, domain, s2 / someone)
(h2 / have-03, ARG0, s2 / someone)
(h2 / have-03, ARG1, f2 / family)
(m2 / marry-01, ARG1, s2 / someone)
(r / respect-01, ARG1, s4 / someone)
(s / someone, example, s2 / someone)
(s3 / succeed-01, ARG0, s2 / someone)
(y / you, domain, i / i)

Input(Some(Graph((multi-sentence :snt1 (focus-01 :condition (you :domain i) :ARG2 idol :ARG0 i) :snt2 (aspire-01 :ARG1 (someone :example (someone :ARG1-of (end-03 :ARG2 (and :op et-cetera :op (marry-01 :ARG1 someone) :op (have-03 :ARG1 family :ARG0 someone) :op (happy :domain someone) :op (succeed-01 :ARG0 someone))) :ARG1-of (come-03 :ARG2 (background :mod bad)))) :ARG0 you) :snt3 (contrast-01 :ARG2 (someone :ARG1-of (respect-01 :ARG0 you) :ARG1-of (admire-01 :ARG0 you)) :ARG1 (want-01 :ARG1 (they :domain you) :ARG0 you :polarity -))),ArrayBuffer(Span(5,6,List(0),focus,focus-01,false), Span(3,4,List(1),you,you,false), Span(8,9,List(2),idol,idol,false), Span(1,2,List(3),i,i,false), Span(12,13,List(4),aspire,aspire-01,false), Span(10,11,List(5),Someone,someone,false), Span(21,22,List(6),someone,someone,false), Span(39,40,List(7),ended,end-03,false), Span(25,26,List(8),and,and,false), Span(48,49,List(9),married,marry-01,false), Span(26,27,List(10),have,have-03,false), Span(46,47,List(11),family,family,false), Span(43,44,List(12),happy,happy,false), Span(33,34,List(13),came,come-03,false), Span(37,38,List(14),background,background,false), Span(36,37,List(15),bad,bad,false), Span(11,12,List(16),you,you,false), Span(20,21,List(17),but,contrast-01,false), Span(31,32,List(18),someone,someone,false), Span(27,28,List(19),respect,respect-01,false), Span(24,25,List(20),admire,admire-01,false), Span(16,17,List(21),want,want-01,false), Span(41,42,List(22),successful,succeed-01,false)),Map(2 -> idol, 5 -> someone, 12 -> happy, 15 -> bad, 8 -> and, 21 -> want-01, 18 -> someone, 7 -> end-03, 17 -> contrast-01, 1 -> you, 4 -> aspire-01, 11 -> family, 14 -> background, 20 -> admire-01, 6 -> someone, 9 -> marry-01, 0 -> focus-01, 22 -> succeed-01, 16 -> you, 19 -> respect-01, 10 -> have-03, 3 -> i, 13 -> come-03),Map(e -> end-03, w -> want-01, h -> happy, h2 -> have-03, s2 -> someone, b -> background, b2 -> bad, m2 -> marry-01, a3 -> admire-01, s -> someone, s4 -> someone, y -> you, c3 -> contrast-01, a -> aspire-01, i2 -> idol, r -> respect-01, a2 -> and, i -> i, c -> come-03, s3 -> succeed-01, f2 -> family, f -> focus-01, y2 -> you))),[Ljava.lang.String;@1787bc24,Annotation([Ljava.lang.String;@544d57e,[Ljava.lang.String;@55c53a33,[Ljava.lang.String;@53b7f657),Annotation([Ljava.lang.String;@797b0699,[Ljava.lang.String;@5a37d3ed,[Ledu.cmu.lti.nlp.amr.Dependency;@26df6e3a),Annotation([Ljava.lang.String;@4a3631f8,[Ljava.lang.String;@6b58b9e9,[Ljava.lang.String;@f14a7d4),Annotation([Ljava.lang.String;@52e7a6b2,[Ljava.lang.String;@29a5f4e7,[Ledu.cmu.lti.nlp.amr.Entity;@79c97cb))
AMR:
(a / aspire-01, ARG0, y2 / you)
(a / aspire-01, ARG1, b2 / bad)
(a2 / and, op, h2 / have-03)
(a3 / admire-01, ARG0, f2 / family)
(a3 / admire-01, ARG1, r / respect-01)
(a3 / admire-01, ARG6, s2 / someone)
(c / come-03, ARG0, s4 / someone)
(c / come-03, ARG1, a / aspire-01)
(c3 / contrast-01, ARG0, i / i)
(c3 / contrast-01, ARG1, b / background)
(c3 / contrast-01, ARG6, s2 / someone)
(e / end-03, ARG1, s2 / someone)
(f / focus-01, ARG1, i2 / idol)
(f / focus-01, ARG6, y / you)
(h2 / have-03, ARG1, r / respect-01)
(m2 / marry-01, ARG1, f / focus-01)
(m2 / marry-01, ARG2, h / happy)
(s / someone, calendar, y2 / you)
(s3 / succeed-01, ARG1, f / focus-01)
(s3 / succeed-01, ARG6, e / end-03)
(w / want-01, ARG1, i2 / idol)
(w / want-01, ARG6, y2 / you)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.3
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.2
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0
Decoded in 1,390,035 microseconds
Sentence: Focus on what you want to achieve in life, you havent stated what your studying, or indeed why....is it because you wanted the experience? Because your mum wanted yo to go? Because u need a degree for the career you want to do?

Oracle Span 1:  achieve => (thing :ARG1-of achieve-01)
Oracle Span 2:  because => (thing :ARG0-of cause-01)
Oracle Span 3:  Because => cause-01
Oracle Span 4:  Because => cause-01
Oracle Span 5:  career => career
Oracle Span 6:  degree => degree
Oracle Span 7:  experience => experience-01
Oracle Span 8:  Focus => focus-01
Oracle Span 9:  go => go-01
Oracle Span 10:  indeed => indeed
Oracle Span 11:  life => life
Oracle Span 12:  mum => mum
Oracle Span 13:  need => need-01
Oracle Span 14:  or => or
Oracle Span 15:  stated => state-01
Oracle Span 16:  studying => (thing :ARG1-of study-01)
Oracle Span 17:  want => want-01
Oracle Span 18:  wanted => want-01
Oracle Span 19:  wanted => want-01
Oracle Span 20:  you => you
Oracle Span 21:  you => you
Oracle Span 22:  you => you
Oracle Span 23:  you => you
Spans:
Span 6-7:  achieve => (thing :ARG1-of achieve-01)
Span 23-24:  because => (thing :ARG0-of cause-01)
Span 29-30:  Because => cause-01
Span 37-38:  Because => cause-01
Span 44-45:  career => career
Span 41-42:  degree => degree
Span 27-28:  experience => experience-01
Span 0-1:  Focus => focus-01
Span 35-36:  go => go-01
Span 18-19:  indeed => indeed
Span 8-9:  life => life
Span 31-32:  mum => mum
Span 39-40:  need => need-01
Span 17-18:  or => or
Span 12-13:  stated => state-01
Span 15-16:  studying => (thing :ARG1-of study-01)
Span 4-5:  want => want-01
Span 25-26:  wanted => want-01
Span 32-33:  wanted => want-01
Span 3-4:  you => you
Span 10-11:  you => you
Span 24-25:  you => you
Span 45-46:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of Because in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of mum in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of wanted in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of yo in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of go in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of Because in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of u in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of need in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of degree in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of career in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of want in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 49
Langrangian relaxation converged after 56 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Because in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of mum in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of wanted in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of yo in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of go in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of Because in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of u in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of need in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of degree in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of career in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of want in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 49
Oracle Span 6-7:  achieve => (thing :ARG1-of achieve-01)
Oracle Span 23-24:  because => (thing :ARG0-of cause-01)
Oracle Span 29-30:  Because => cause-01
Oracle Span 37-38:  Because => cause-01
Oracle Span 44-45:  career => career
Oracle Span 41-42:  degree => degree
Oracle Span 27-28:  experience => experience-01
Oracle Span 0-1:  Focus => focus-01
Oracle Span 35-36:  go => go-01
Oracle Span 18-19:  indeed => indeed
Oracle Span 8-9:  life => life
Oracle Span 31-32:  mum => mum
Oracle Span 39-40:  need => need-01
Oracle Span 17-18:  or => or
Oracle Span 12-13:  stated => state-01
Oracle Span 15-16:  studying => (thing :ARG1-of study-01)
Oracle Span 4-5:  want => want-01
Oracle Span 25-26:  wanted => want-01
Oracle Span 32-33:  wanted => want-01
Oracle Span 3-4:  you => you
Oracle Span 10-11:  you => you
Oracle Span 24-25:  you => you
Oracle Span 45-46:  you => you

Dependencies:
1	Focus	_	NNS	NNS	_	13	nsubj	_	_
2	on	_	IN	IN	_	1	prep	_	_
3	what	_	WP	WP	_	5	dobj	_	_
4	you	_	PRP	PRP	_	5	nsubj	_	_
5	want	_	VBP	VBP	_	2	pcomp	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	achieve	_	VB	VB	_	5	xcomp	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	life	_	NN	NN	_	8	pobj	_	_
10	,	_	,	,	_	7	punct	_	_
11	you	_	PRP	PRP	_	12	nsubj	_	_
12	havent	_	VB	VB	_	7	ccomp	_	_
13	stated	_	VBD	VBD	_	0	root	_	_
14	what	_	WP	WP	_	23	dobj	_	_
15	your	_	PRP$	PRP$	_	16	poss	_	_
16	studying	_	NN	NN	_	23	nsubj	_	_
17	,	_	,	,	_	16	punct	_	_
18	or	_	CC	CC	_	16	cc	_	_
19	indeed	_	RB	RB	_	20	advmod	_	_
20	why	_	NNP	NNP	_	16	conj	_	_
21	....	_	:	:	_	16	punct	_	_
22	is	_	VBZ	VBZ	_	23	cop	_	_
23	it	_	PRP	PRP	_	13	ccomp	_	_
24	because	_	IN	IN	_	26	mark	_	_
25	you	_	PRP	PRP	_	26	nsubj	_	_
26	wanted	_	VBD	VBD	_	23	advcl	_	_
27	the	_	DT	DT	_	28	det	_	_
28	experience	_	NN	NN	_	26	dobj	_	_
29	?	_	.	.	_	13	punct	_	_
1	Because	_	IN	IN	_	4	mark	_	_
2	your	_	PRP$	PRP$	_	3	poss	_	_
3	mum	_	NN	NN	_	4	nsubj	_	_
4	wanted	_	VBD	VBD	_	5	csubj	_	_
5	yo	_	VBP	VBP	_	0	root	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	go	_	VB	VB	_	5	xcomp	_	_
8	?	_	.	.	_	5	punct	_	_
1	Because	_	IN	IN	_	3	mark	_	_
2	u	_	NN	NN	_	3	nsubj	_	_
3	need	_	VBP	VBP	_	10	advcl	_	_
4	a	_	DT	DT	_	5	det	_	_
5	degree	_	NN	NN	_	3	dobj	_	_
6	for	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	career	_	NN	NN	_	6	pobj	_	_
9	you	_	PRP	PRP	_	10	nsubj	_	_
10	want	_	VBP	VBP	_	0	root	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	do	_	VB	VB	_	10	xcomp	_	_
13	?	_	.	.	_	10	punct	_	_

Oracle:
(a / achieve-01, ARG0, y / you)
(a / achieve-01, ARG1, t / thing)
(a / achieve-01, prep-in, l / life)
(c / cause-01, ARG0, t3 / thing)
(c / cause-01, ARG1, s2 / study-01)
(c2 / cause-01, ARG0, w / want-01)
(c3 / cause-01, ARG0, w2 / want-01)
(e / experience-01, ARG0, y3 / you)
(f / focus-01, ARG0, y / you)
(f / focus-01, ARG2, t / thing)
(g / go-01, ARG1, y4 / you)
(m2 / mum, poss, y4 / you)
(n / need-01, ARG1, d / degree)
(n / need-01, prep-for, c5 / career)
(o / or, op, t2 / thing)
(o / or, op, t3 / thing)
(s / state-01, ARG0, y2 / you)
(s / state-01, ARG1, o / or)
(s2 / study-01, ARG0, y2 / you)
(s2 / study-01, ARG1, t2 / thing)
(t3 / thing, mod, i / indeed)
(w / want-01, ARG0, y3 / you)
(w / want-01, ARG1, e / experience-01)
(w2 / want-01, ARG0, m2 / mum)
(w2 / want-01, ARG1, g / go-01)
(w3 / want-01, ARG1, c5 / career)

Input(Some(Graph((multi-sentence :snt1 (focus-01 :ARG2 (thing :ARG1-of (achieve-01 :prep-in life :ARG0 you)) :ARG0 you) :snt2 (state-01 :ARG1 (or :op (thing :mod indeed :ARG0-of (cause-01 :ARG1 study-01)) :op (thing :ARG1-of (study-01 :ARG0 you))) :ARG0 you :polarity -) :snt3 (cause-01 :ARG0 (want-01 :ARG1 (experience-01 :ARG0 you) :ARG0 you :mode interrogative)) :snt4 (cause-01 :ARG0 (want-01 :ARG1 (go-01 :ARG1 you) :ARG0 (mum :poss you) :mode interrogative)) :snt5 (cause-01 :ARG0 (need-01 :prep-for (career :ARG1-of (want-01 :ARG0 you)) :ARG1 degree :ARG0 you :mode interrogative))),ArrayBuffer(Span(0,1,List(0),Focus,focus-01,false), Span(6,7,List(1, 2),achieve,(thing :ARG1-of achieve-01),false), Span(8,9,List(3),life,life,false), Span(3,4,List(4),you,you,false), Span(12,13,List(5),stated,state-01,false), Span(17,18,List(6),or,or,false), Span(23,24,List(7, 8),because,(thing :ARG0-of cause-01),false), Span(18,19,List(9),indeed,indeed,false), Span(15,16,List(10, 11),studying,(thing :ARG1-of study-01),false), Span(10,11,List(12),you,you,false), Span(29,30,List(13),Because,cause-01,false), Span(4,5,List(14),want,want-01,false), Span(27,28,List(15),experience,experience-01,false), Span(24,25,List(16),you,you,false), Span(37,38,List(17),Because,cause-01,false), Span(25,26,List(18),wanted,want-01,false), Span(35,36,List(19),go,go-01,false), Span(45,46,List(20),you,you,false), Span(31,32,List(21),mum,mum,false), Span(39,40,List(22),need,need-01,false), Span(44,45,List(23),career,career,false), Span(32,33,List(24),wanted,want-01,false), Span(41,42,List(25),degree,degree,false)),Map(2 -> achieve-01, 5 -> state-01, 12 -> you, 15 -> experience-01, 8 -> cause-01, 21 -> mum, 18 -> want-01, 24 -> want-01, 7 -> thing, 17 -> cause-01, 1 -> thing, 23 -> career, 4 -> you, 11 -> study-01, 14 -> want-01, 20 -> you, 6 -> or, 9 -> indeed, 0 -> focus-01, 22 -> need-01, 16 -> you, 19 -> go-01, 10 -> thing, 3 -> life, 25 -> degree, 13 -> cause-01),Map(e -> experience-01, n -> need-01, w -> want-01, y4 -> you, s2 -> study-01, t -> thing, m2 -> mum, w3 -> want-01, s -> state-01, d -> degree, t3 -> thing, y -> you, g -> go-01, c3 -> cause-01, a -> achieve-01, y3 -> you, t2 -> thing, w2 -> want-01, i -> indeed, c -> cause-01, l -> life, f -> focus-01, o -> or, c2 -> cause-01, y2 -> you, c5 -> career))),[Ljava.lang.String;@2d9caaeb,Annotation([Ljava.lang.String;@42a15bdc,[Ljava.lang.String;@44a59da3,[Ljava.lang.String;@27e47833),Annotation([Ljava.lang.String;@6f6745d6,[Ljava.lang.String;@27508c5d,[Ledu.cmu.lti.nlp.amr.Dependency;@4f704591),Annotation([Ljava.lang.String;@4b5189ac,[Ljava.lang.String;@1e4d3ce5,[Ljava.lang.String;@3ddc6915),Annotation([Ljava.lang.String;@704deff2,[Ljava.lang.String;@379614be,[Ledu.cmu.lti.nlp.amr.Entity;@404bbcbd))
AMR:
(a / achieve-01, ARG0, l / life)
(a / achieve-01, ARG1, t / thing)
(c / cause-01, ARG0, t3 / thing)
(c / cause-01, ARG1, y2 / you)
(c2 / cause-01, ARG1, m2 / mum)
(c3 / cause-01, ARG1, c5 / career)
(c5 / career, op, y4 / you)
(e / experience-01, ARG1, c2 / cause-01)
(f / focus-01, ARG1, w / want-01)
(g / go-01, ARG0, m2 / mum)
(g / go-01, ARG1, c3 / cause-01)
(n / need-01, ARG0, f / focus-01)
(n / need-01, ARG1, d / degree)
(o / or, op, t2 / thing)
(s / state-01, ARG0, f / focus-01)
(s / state-01, ARG1, t2 / thing)
(s2 / study-01, ARG1, t2 / thing)
(s2 / study-01, ARG6, i / indeed)
(t3 / thing, op, w2 / want-01)
(w / want-01, ARG0, y / you)
(w / want-01, ARG1, t / thing)
(w2 / want-01, ARG0, y3 / you)
(w2 / want-01, ARG1, e / experience-01)
(w3 / want-01, ARG0, f / focus-01)
(w3 / want-01, ARG1, m2 / mum)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.2.1.0
WARNING: makeIds can't find span Id: 0.1.2.1.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.2
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.2
WARNING: makeIds can't find span Id: 0.3.0.2.0
WARNING: makeIds can't find span Id: 0.3.0.1
WARNING: makeIds can't find span Id: 0.4.0
WARNING: makeIds can't find span Id: 0.4.0.3
WARNING: makeIds can't find span Id: 0.4.0.3.0
WARNING: makeIds can't find span Id: 0.4.0.2
Decoded in 2,558,246 microseconds
Sentence: Either way, sum up why youre there and work your bottom off to get the best grades you can, cos once you get ur degree, you wil have something you can say "hey i didnt fail, it was hard work and i passed"

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  best => (good :degree most)
Oracle Span 4:  bottom => bottom
Oracle Span 5:  can => possible
Oracle Span 6:  can => possible
Oracle Span 7:  degree => degree
Oracle Span 8:  Either => either
Oracle Span 9:  fail => fail-01
Oracle Span 10:  get => get-01
Oracle Span 11:  get => get-01
Oracle Span 12:  grades => grade
Oracle Span 13:  hard => hard
Oracle Span 14:  have => have-03
Oracle Span 15:  hey => hey
Oracle Span 16:  i => i
Oracle Span 17:  it => it
Oracle Span 18:  passed => pass-07
Oracle Span 19:  say => say-01
Oracle Span 20:  something => something
Oracle Span 21:  sum => sum-01
Oracle Span 22:  there => there
Oracle Span 23:  way => way
Oracle Span 24:  work => work-01
Oracle Span 25:  work => work-01
Oracle Span 26:  you => you
Spans:
Span 8-9:  and => and
Span 45-46:  and => and
Span 16-17:  best => (good :degree most)
Span 11-12:  bottom => bottom
Span 19-20:  can => possible
Span 33-34:  can => possible
Span 26-27:  degree => degree
Span 0-1:  Either => either
Span 39-40:  fail => fail-01
Span 14-15:  get => get-01
Span 24-25:  get => get-01
Span 17-18:  grades => grade
Span 43-44:  hard => hard
Span 30-31:  have => have-03
Span 36-37:  hey => hey
Span 37-38:  i => i
Span 41-42:  it => it
Span 47-48:  passed => pass-07
Span 34-35:  say => say-01
Span 31-32:  something => something
Span 3-4:  sum => sum-01
Span 7-8:  there => there
Span 1-2:  way => way
Span 9-10:  work => work-01
Span 44-45:  work => work-01
Span 18-19:  you => you

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 45-46:  and => and
Oracle Span 16-17:  best => (good :degree most)
Oracle Span 11-12:  bottom => bottom
Oracle Span 19-20:  can => possible
Oracle Span 33-34:  can => possible
Oracle Span 26-27:  degree => degree
Oracle Span 0-1:  Either => either
Oracle Span 39-40:  fail => fail-01
Oracle Span 14-15:  get => get-01
Oracle Span 24-25:  get => get-01
Oracle Span 17-18:  grades => grade
Oracle Span 43-44:  hard => hard
Oracle Span 30-31:  have => have-03
Oracle Span 36-37:  hey => hey
Oracle Span 37-38:  i => i
Oracle Span 41-42:  it => it
Oracle Span 47-48:  passed => pass-07
Oracle Span 34-35:  say => say-01
Oracle Span 31-32:  something => something
Oracle Span 3-4:  sum => sum-01
Oracle Span 7-8:  there => there
Oracle Span 1-2:  way => way
Oracle Span 9-10:  work => work-01
Oracle Span 44-45:  work => work-01
Oracle Span 18-19:  you => you

Dependencies:
1	Either	_	CC	CC	_	2	dep	_	_
2	way	_	NN	NN	_	30	nsubj	_	_
3	,	_	,	,	_	4	punct	_	_
4	sum	_	VB	VB	_	30	parataxis	_	_
5	up	_	RP	RP	_	4	prt	_	_
6	why	_	WRB	WRB	_	7	advmod	_	_
7	youre	_	VBP	VBP	_	4	advcl	_	_
8	there	_	RB	RB	_	7	advmod	_	_
9	and	_	CC	CC	_	4	cc	_	_
10	work	_	VB	VB	_	4	conj	_	_
11	your	_	PRP$	PRP$	_	12	poss	_	_
12	bottom	_	NN	NN	_	10	dobj	_	_
13	off	_	RP	RP	_	10	prt	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	get	_	VB	VB	_	10	vmod	_	_
16	the	_	DT	DT	_	18	det	_	_
17	best	_	JJS	JJS	_	18	amod	_	_
18	grades	_	NNS	NNS	_	15	dobj	_	_
19	you	_	PRP	PRP	_	20	nsubj	_	_
20	can	_	MD	MD	_	18	rcmod	_	_
21	,	_	,	,	_	4	punct	_	_
22	cos	_	VB	VB	_	4	dep	_	_
23	once	_	IN	IN	_	25	mark	_	_
24	you	_	PRP	PRP	_	25	nsubj	_	_
25	get	_	VBP	VBP	_	22	advcl	_	_
26	ur	_	NN	NN	_	27	nn	_	_
27	degree	_	NN	NN	_	25	dobj	_	_
28	,	_	,	,	_	4	punct	_	_
29	you	_	PRP	PRP	_	30	nsubj	_	_
30	wil	_	VBP	VBP	_	0	root	_	_
31	have	_	VB	VB	_	30	xcomp	_	_
32	something	_	NN	NN	_	31	dobj	_	_
33	you	_	PRP	PRP	_	35	nsubj	_	_
34	can	_	MD	MD	_	35	aux	_	_
35	say	_	VB	VB	_	32	rcmod	_	_
36	"	_	``	``	_	39	punct	_	_
37	hey	_	NNP	NNP	_	39	nn	_	_
38	i	_	FW	FW	_	39	nn	_	_
39	didnt	_	NNP	NNP	_	40	nsubj	_	_
40	fail	_	VB	VB	_	35	ccomp	_	_
41	,	_	,	,	_	40	punct	_	_
42	it	_	PRP	PRP	_	45	nsubj	_	_
43	was	_	VBD	VBD	_	45	cop	_	_
44	hard	_	JJ	JJ	_	45	amod	_	_
45	work	_	NN	NN	_	40	dep	_	_
46	and	_	CC	CC	_	45	cc	_	_
47	i	_	FW	FW	_	48	nsubj	_	_
48	passed	_	VBD	VBD	_	45	conj	_	_
49	"	_	''	''	_	30	punct	_	_

Oracle:
(a / and, mod, w3 / way)
(a / and, op, s / sum-01)
(a / and, op, w / work-01)
(a2 / and, op, f / fail-01)
(b2 / bottom, poss, y / you)
(d / degree, poss, y / you)
(f / fail-01, ARG1, i / i)
(f / fail-01, mod, h2 / hey)
(g / get-01, ARG0, y / you)
(g / get-01, ARG1, g2 / grade)
(g2 / grade, mod, g3 / good)
(g3 / good, degree, m / most)
(g3 / good, mod, p / possible)
(g4 / get-01, ARG0, y / you)
(g4 / get-01, ARG1, d / degree)
(h / have-03, ARG0, y / you)
(h / have-03, ARG1, s2 / something)
(h / have-03, time, g4 / get-01)
(p3 / pass-07, ARG1, i / i)
(s / sum-01, ARG0, y / you)
(s2 / something, example, a2 / and)
(s3 / say-01, ARG0, y / you)
(s3 / say-01, ARG1, s2 / something)
(s3 / say-01, mod, p2 / possible)
(w / work-01, ARG0, y / you)
(w / work-01, ARG1, b2 / bottom)
(w / work-01, purpose, g / get-01)
(w2 / work-01, domain, i2 / it)
(w2 / work-01, manner, h3 / hard)
(w3 / way, mod, e / either)

Input(Some(Graph((and :mod (way :mod either) :ARG1-of (cause-01 :ARG0 (have-03 :time (get-01 :ARG1 (degree :poss you) :ARG0 you) :ARG1 (something :example (and :op (and :op (work-01 :domain it :manner hard) :op (pass-07 :ARG1 i)) :op (fail-01 :mod (hey :mode expressive) :ARG1 i :polarity -)) :ARG1-of (say-01 :mod possible :ARG0 you)) :ARG0 you)) :op (work-01 :purpose (get-01 :ARG1 (grade :mod (good :mod possible :degree most)) :ARG0 you) :ARG1 (bottom :poss you) :ARG0 you) :op (sum-01 :ARG1 (thing :ARG0-of (cause-01 :ARG1 (be-located-at-91 :ARG2 there :ARG1 you))) :ARG0 you)),ArrayBuffer(Span(8,9,List(0),and,and,false), Span(1,2,List(1),way,way,false), Span(0,1,List(2),Either,either,false), Span(30,31,List(3),have,have-03,false), Span(14,15,List(4),get,get-01,false), Span(26,27,List(5),degree,degree,false), Span(31,32,List(6),something,something,false), Span(45,46,List(7),and,and,false), Span(9,10,List(8),work,work-01,false), Span(41,42,List(9),it,it,false), Span(43,44,List(10),hard,hard,false), Span(47,48,List(11),passed,pass-07,false), Span(39,40,List(12),fail,fail-01,false), Span(36,37,List(13),hey,hey,false), Span(37,38,List(14),i,i,false), Span(34,35,List(15),say,say-01,false), Span(19,20,List(16),can,possible,false), Span(44,45,List(17),work,work-01,false), Span(24,25,List(18),get,get-01,false), Span(17,18,List(19),grades,grade,false), Span(16,17,List(20, 21),best,(good :degree most),false), Span(33,34,List(22),can,possible,false), Span(11,12,List(23),bottom,bottom,false), Span(3,4,List(24),sum,sum-01,false), Span(7,8,List(25),there,there,false), Span(18,19,List(26),you,you,false)),Map(2 -> either, 5 -> degree, 12 -> fail-01, 15 -> say-01, 8 -> work-01, 21 -> most, 18 -> get-01, 24 -> sum-01, 7 -> and, 17 -> work-01, 1 -> way, 23 -> bottom, 26 -> you, 4 -> get-01, 11 -> pass-07, 14 -> i, 20 -> good, 6 -> something, 9 -> it, 0 -> and, 22 -> possible, 16 -> possible, 19 -> grade, 10 -> hard, 3 -> have-03, 25 -> there, 13 -> hey),Map(e -> either, w -> work-01, g3 -> good, h -> have-03, h2 -> hey, s2 -> something, b2 -> bottom, p2 -> possible, w3 -> way, s -> sum-01, m -> most, d -> degree, g2 -> grade, y -> you, p -> possible, g -> get-01, a -> and, t2 -> there, i2 -> it, w2 -> work-01, i -> i, a2 -> and, h3 -> hard, s3 -> say-01, f -> fail-01, p3 -> pass-07, g4 -> get-01))),[Ljava.lang.String;@1e81f160,Annotation([Ljava.lang.String;@1acaf3d,[Ljava.lang.String;@6986852,[Ljava.lang.String;@1bab8268),Annotation([Ljava.lang.String;@a307a8c,[Ljava.lang.String;@6e01f9b0,[Ledu.cmu.lti.nlp.amr.Dependency;@2b9ed6da),Annotation([Ljava.lang.String;@6c61a903,[Ljava.lang.String;@658c5a19,[Ljava.lang.String;@421e361),Annotation([Ljava.lang.String;@59d4cd39,[Ljava.lang.String;@389c4eb1,[Ledu.cmu.lti.nlp.amr.Entity;@3fc79729))
AMR:
(a / and, op, s / sum-01)
(a / and, op, t2 / there)
(a / and, op, w2 / work-01)
(a2 / and, op, p3 / pass-07)
(e / either, op, w3 / way)
(f / fail-01, ARG1, h3 / hard)
(f / fail-01, ARG6, i / i)
(g / get-01, ARG0, w3 / way)
(g / get-01, ARG1, d / degree)
(g2 / grade, mod, g3 / good)
(g3 / good, degree, m / most)
(g4 / get-01, ARG0, b2 / bottom)
(g4 / get-01, ARG1, g2 / grade)
(g4 / get-01, ARG6, p2 / possible)
(h / have-03, ARG0, s3 / say-01)
(h / have-03, ARG1, s2 / something)
(h2 / hey, calendar, i / i)
(p / possible, domain, s3 / say-01)
(p2 / possible, calendar, y / you)
(p3 / pass-07, ARG0, i2 / it)
(p3 / pass-07, ARG1, w / work-01)
(s / sum-01, ARG1, w3 / way)
(s3 / say-01, ARG0, a / and)
(s3 / say-01, ARG1, f / fail-01)
(w / work-01, ARG1, f / fail-01)
(w2 / work-01, ARG1, b2 / bottom)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.1.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.1.1
WARNING: makeIds can't find span Id: 0.2.0.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.0.2
WARNING: makeIds can't find span Id: 0.2.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 1,724,196 microseconds
Sentence: X

Oracle Span 1:  X => X
Spans:
Span 0-1:  X => X

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  X => X

Dependencies:
1	X	_	NNP	NNP	_	0	root	_	_

Oracle:


Input(Some(Graph(X,ArrayBuffer(Span(0,1,List(0),X,X,false)),Map(0 -> X),Map(x -> X))),[Ljava.lang.String;@34f6515b,Annotation([Ljava.lang.String;@4b34fff9,[Ljava.lang.String;@1187c9e8,[Ljava.lang.String;@127a7a2e),Annotation([Ljava.lang.String;@14008db3,[Ljava.lang.String;@78a773fd,[Ledu.cmu.lti.nlp.amr.Dependency;@57c03d88),Annotation([Ljava.lang.String;@16aa8654,[Ljava.lang.String;@6d7fc27,[Ljava.lang.String;@45ac5f9b),Annotation([Ljava.lang.String;@135606db,[Ljava.lang.String;@518caac3,[Ledu.cmu.lti.nlp.amr.Entity;@68034211))
AMR:


Decoded in 7,510 microseconds
Sentence: hope this helps

Oracle Span 1:  helps => help-01
Oracle Span 2:  hope => hope-01
Oracle Span 3:  this => this
Spans:
Span 2-3:  helps => help-01
Span 0-1:  hope => hope-01
Span 1-2:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  helps => help-01
Oracle Span 0-1:  hope => hope-01
Oracle Span 1-2:  this => this

Dependencies:
1	hope	_	VB	VB	_	0	root	_	_
2	this	_	DT	DT	_	3	nsubj	_	_
3	helps	_	VBZ	VBZ	_	1	ccomp	_	_

Oracle:
(h / hope-01, ARG1, h2 / help-01)
(h2 / help-01, ARG0, t / this)

Input(Some(Graph((hope-01 :ARG1 (help-01 :ARG0 this) :ARG0 i),ArrayBuffer(Span(0,1,List(0),hope,hope-01,false), Span(2,3,List(1),helps,help-01,false), Span(1,2,List(2),this,this,false)),Map(2 -> this, 1 -> help-01, 0 -> hope-01),Map(h -> hope-01, t -> this, h2 -> help-01))),[Ljava.lang.String;@4f74980d,Annotation([Ljava.lang.String;@6c372fe6,[Ljava.lang.String;@58594a11,[Ljava.lang.String;@2a3888c1),Annotation([Ljava.lang.String;@4167d97b,[Ljava.lang.String;@14fa86ae,[Ledu.cmu.lti.nlp.amr.Dependency;@6e15fe2),Annotation([Ljava.lang.String;@68f1b17f,[Ljava.lang.String;@1722011b,[Ljava.lang.String;@57ad2aa7),Annotation([Ljava.lang.String;@5b3f61ff,[Ljava.lang.String;@3e2059ae,[Ledu.cmu.lti.nlp.amr.Entity;@398dada8))
AMR:
(h / hope-01, ARG1, h2 / help-01)
(h2 / help-01, ARG1, t / this)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 7,383 microseconds
Sentence: I'm pretty much non-autistic (not diagnosed with dyspraxia but I think the doctor misdiagnosed), but I walk on my toes nearly all of the time.

Oracle Span 1:  all => all
Oracle Span 2:  autistic => autistic
Oracle Span 3:  but => contrast-01
Oracle Span 4:  but => contrast-01
Oracle Span 5:  diagnosed => diagnose-01
Oracle Span 6:  doctor => doctor
Oracle Span 7:  dyspraxia => dyspraxia
Oracle Span 8:  I => i
Oracle Span 9:  misdiagnosed => misdiagnose-01
Oracle Span 10:  nearly => nearly
Oracle Span 11:  pretty => pretty-much
Oracle Span 12:  think => think-01
Oracle Span 13:  time => time
Oracle Span 14:  toes => toe
Oracle Span 15:  walk => walk-01
Spans:
Span 27-28:  all => all
Span 6-7:  autistic => autistic
Span 12-13:  but => contrast-01
Span 20-21:  but => contrast-01
Span 9-10:  diagnosed => diagnose-01
Span 16-17:  doctor => doctor
Span 11-12:  dyspraxia => dyspraxia
Span 0-1:  I => i
Span 17-18:  misdiagnosed => misdiagnose-01
Span 26-27:  nearly => nearly
Span 2-3:  pretty => pretty-much
Span 14-15:  think => think-01
Span 30-31:  time => time
Span 25-26:  toes => toe
Span 22-23:  walk => walk-01

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Oracle Span 27-28:  all => all
Oracle Span 6-7:  autistic => autistic
Oracle Span 12-13:  but => contrast-01
Oracle Span 20-21:  but => contrast-01
Oracle Span 9-10:  diagnosed => diagnose-01
Oracle Span 16-17:  doctor => doctor
Oracle Span 11-12:  dyspraxia => dyspraxia
Oracle Span 0-1:  I => i
Oracle Span 17-18:  misdiagnosed => misdiagnose-01
Oracle Span 26-27:  nearly => nearly
Oracle Span 2-3:  pretty => pretty-much
Oracle Span 14-15:  think => think-01
Oracle Span 30-31:  time => time
Oracle Span 25-26:  toes => toe
Oracle Span 22-23:  walk => walk-01

Dependencies:
1	I	_	PRP	PRP	_	5	nsubj	_	_
2	'm	_	VBP	VBP	_	5	cop	_	_
3	pretty	_	RB	RB	_	5	advmod	_	_
4	much	_	RB	RB	_	5	advmod	_	_
5	non-autistic	_	JJ	JJ	_	0	root	_	_
6	(	_	(	(	_	8	punct	_	_
7	not	_	RB	RB	_	8	dep	_	_
8	diagnosed	_	VBD	VBD	_	5	parataxis	_	_
9	with	_	IN	IN	_	8	prep	_	_
10	dyspraxia	_	NN	NN	_	9	pobj	_	_
11	but	_	CC	CC	_	13	cc	_	_
12	I	_	PRP	PRP	_	13	nsubj	_	_
13	think	_	VBP	VBP	_	8	ccomp	_	_
14	the	_	DT	DT	_	15	det	_	_
15	doctor	_	NN	NN	_	16	nsubj	_	_
16	misdiagnosed	_	VBD	VBD	_	13	ccomp	_	_
17	)	_	)	)	_	8	punct	_	_
18	,	_	,	,	_	5	punct	_	_
19	but	_	CC	CC	_	5	cc	_	_
20	I	_	PRP	PRP	_	21	nsubj	_	_
21	walk	_	VBP	VBP	_	5	conj	_	_
22	on	_	IN	IN	_	21	prep	_	_
23	my	_	PRP$	PRP$	_	24	poss	_	_
24	toes	_	NNS	NNS	_	22	pobj	_	_
25	nearly	_	RB	RB	_	26	quantmod	_	_
26	all	_	DT	DT	_	21	dobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	time	_	NN	NN	_	27	pobj	_	_
30	.	_	.	.	_	5	punct	_	_

Oracle:
(a / autistic, degree, p / pretty-much)
(a / autistic, domain, i / i)
(c / contrast-01, ARG1, a / autistic)
(c / contrast-01, ARG2, w / walk-01)
(c2 / contrast-01, ARG1, d4 / diagnose-01)
(c2 / contrast-01, ARG2, t / think-01)
(d4 / diagnose-01, ARG1, i / i)
(d4 / diagnose-01, ARG2, d2 / dyspraxia)
(i / i, part, t2 / toe)
(m2 / misdiagnose-01, ARG0, d3 / doctor)
(n / nearly, op, a2 / all)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, m2 / misdiagnose-01)
(t3 / time, quant, n / nearly)
(w / walk-01, ARG0, i / i)
(w / walk-01, frequency, t3 / time)
(w / walk-01, prep-on, t2 / toe)

Input(Some(Graph((contrast-01 :ARG2 (walk-01 :frequency (time :quant (nearly :op all)) :prep-on (toe :part-of i) :ARG0 i) :ARG1 (autistic :domain i :degree pretty-much :ARG0-of (mean-01 :ARG1 (diagnose-01 :ARG1-of (contrast-01 :ARG2 (think-01 :ARG1 (misdiagnose-01 :ARG0 doctor) :ARG0 i)) :ARG2 dyspraxia :polarity - :ARG1 i)) :polarity -)),ArrayBuffer(Span(12,13,List(0),but,contrast-01,false), Span(22,23,List(1),walk,walk-01,false), Span(30,31,List(2),time,time,false), Span(26,27,List(3),nearly,nearly,false), Span(27,28,List(4),all,all,false), Span(25,26,List(5),toes,toe,false), Span(6,7,List(6),autistic,autistic,false), Span(0,1,List(7),I,i,false), Span(9,10,List(8),diagnosed,diagnose-01,false), Span(20,21,List(9),but,contrast-01,false), Span(14,15,List(10),think,think-01,false), Span(17,18,List(11),misdiagnosed,misdiagnose-01,false), Span(16,17,List(12),doctor,doctor,false), Span(11,12,List(13),dyspraxia,dyspraxia,false), Span(2,3,List(14),pretty,pretty-much,false)),Map(2 -> time, 5 -> toe, 12 -> doctor, 8 -> diagnose-01, 7 -> i, 1 -> walk-01, 4 -> all, 11 -> misdiagnose-01, 14 -> pretty-much, 6 -> autistic, 9 -> contrast-01, 0 -> contrast-01, 10 -> think-01, 3 -> nearly, 13 -> dyspraxia),Map(n -> nearly, w -> walk-01, t -> think-01, d3 -> doctor, m2 -> misdiagnose-01, t3 -> time, p -> pretty-much, a -> autistic, d2 -> dyspraxia, t2 -> toe, i -> i, a2 -> all, c -> contrast-01, d4 -> diagnose-01, c2 -> contrast-01))),[Ljava.lang.String;@7cb502c,Annotation([Ljava.lang.String;@275bf9b3,[Ljava.lang.String;@1b8a29df,[Ljava.lang.String;@4fbe37eb),Annotation([Ljava.lang.String;@12a94400,[Ljava.lang.String;@6a47b187,[Ledu.cmu.lti.nlp.amr.Dependency;@2049a9c1),Annotation([Ljava.lang.String;@1ef6d34c,[Ljava.lang.String;@46271dd6,[Ljava.lang.String;@11bb571c),Annotation([Ljava.lang.String;@7c51f34b,[Ljava.lang.String;@5495333e,[Ledu.cmu.lti.nlp.amr.Entity;@2a225dd7))
AMR:
(a / autistic, domain, i / i)
(a / autistic, mod, p / pretty-much)
(c / contrast-01, ARG1, t / think-01)
(c2 / contrast-01, ARG1, a / autistic)
(c2 / contrast-01, ARG2, w / walk-01)
(d4 / diagnose-01, ARG0, d2 / dyspraxia)
(d4 / diagnose-01, ARG1, c / contrast-01)
(d4 / diagnose-01, ARG6, a / autistic)
(m2 / misdiagnose-01, ARG1, d3 / doctor)
(t / think-01, ARG1, m2 / misdiagnose-01)
(t3 / time, quant, n / nearly)
(w / walk-01, ARG0, t2 / toe)
(w / walk-01, ARG1, n / nearly)
(w / walk-01, ARG6, a2 / all)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.2
WARNING: makeIds can't find span Id: 0.0.1.0.2.0
WARNING: makeIds can't find span Id: 0.0.1.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.2
Decoded in 894,431 microseconds
Sentence: It's more comfortable to me.

Oracle Span 1:  comfortable => comfortable
Oracle Span 2:  It => it
Oracle Span 3:  more => more
Spans:
Span 3-4:  comfortable => comfortable
Span 0-1:  It => it
Span 2-3:  more => more

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  comfortable => comfortable
Oracle Span 0-1:  It => it
Oracle Span 2-3:  more => more

Dependencies:
1	It	_	PRP	PRP	_	4	nsubj	_	_
2	's	_	VBZ	VBZ	_	4	cop	_	_
3	more	_	RBR	RBR	_	4	advmod	_	_
4	comfortable	_	JJ	JJ	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	me	_	PRP	PRP	_	5	pobj	_	_
7	.	_	.	.	_	4	punct	_	_

Oracle:
(c / comfortable, degree, m / more)
(c / comfortable, domain, i2 / it)

Input(Some(Graph((comfortable :domain it :beneficiary i :degree more),ArrayBuffer(Span(3,4,List(0),comfortable,comfortable,false), Span(0,1,List(1),It,it,false), Span(2,3,List(2),more,more,false)),Map(2 -> more, 1 -> it, 0 -> comfortable),Map(m -> more, i2 -> it, c -> comfortable))),[Ljava.lang.String;@61eaec38,Annotation([Ljava.lang.String;@125290e5,[Ljava.lang.String;@6fa34d52,[Ljava.lang.String;@57576994),Annotation([Ljava.lang.String;@616ac46a,[Ljava.lang.String;@67b9b51a,[Ledu.cmu.lti.nlp.amr.Dependency;@1205bd62),Annotation([Ljava.lang.String;@7ef27d7f,[Ljava.lang.String;@490caf5f,[Ljava.lang.String;@6337c201),Annotation([Ljava.lang.String;@5c669da8,[Ljava.lang.String;@31920ade,[Ledu.cmu.lti.nlp.amr.Entity;@1d483de4))
AMR:
(c / comfortable, degree, m / more)
(c / comfortable, domain, i2 / it)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.0
Decoded in 9,870 microseconds
Sentence: What made them decide toe-walking is a sign of autism since it seems so random and isn't always indicative?

Oracle Span 1:  always => always
Oracle Span 2:  and => and
Oracle Span 3:  autism => autism
Oracle Span 4:  decide => decide-01
Oracle Span 5:  indicative => (indicate-01 :polarity -)
Oracle Span 6:  made => make-02
Oracle Span 7:  random => random
Oracle Span 8:  seems => seem-01
Oracle Span 9:  sign => signal-01
Oracle Span 10:  so => so
Oracle Span 11:  toe => toe
Oracle Span 12:  walking => walk-01
Spans:
Span 20-21:  always => always
Span 17-18:  and => and
Span 11-12:  autism => autism
Span 3-4:  decide => decide-01
Span 21-22:  indicative => (indicate-01 :polarity -)
Span 1-2:  made => make-02
Span 16-17:  random => random
Span 14-15:  seems => seem-01
Span 9-10:  sign => signal-01
Span 15-16:  so => so
Span 4-5:  toe => toe
Span 6-7:  walking => walk-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 20-21:  always => always
Oracle Span 17-18:  and => and
Oracle Span 11-12:  autism => autism
Oracle Span 3-4:  decide => decide-01
Oracle Span 21-22:  indicative => (indicate-01 :polarity -)
Oracle Span 1-2:  made => make-02
Oracle Span 16-17:  random => random
Oracle Span 14-15:  seems => seem-01
Oracle Span 9-10:  sign => signal-01
Oracle Span 15-16:  so => so
Oracle Span 4-5:  toe => toe
Oracle Span 6-7:  walking => walk-01

Dependencies:
1	What	_	WP	WP	_	2	nsubj	_	_
2	made	_	VBD	VBD	_	0	root	_	_
3	them	_	PRP	PRP	_	4	nsubj	_	_
4	decide	_	VBP	VBP	_	2	ccomp	_	_
5	toe-walking	_	NN	NN	_	8	nsubj	_	_
6	is	_	VBZ	VBZ	_	8	cop	_	_
7	a	_	DT	DT	_	8	det	_	_
8	sign	_	NN	NN	_	4	ccomp	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	autism	_	NN	NN	_	9	pobj	_	_
11	since	_	IN	IN	_	13	mark	_	_
12	it	_	PRP	PRP	_	13	nsubj	_	_
13	seems	_	VBZ	VBZ	_	8	advcl	_	_
14	so	_	RB	RB	_	15	advmod	_	_
15	random	_	JJ	JJ	_	13	acomp	_	_
16	and	_	CC	CC	_	13	cc	_	_
17	is	_	VBZ	VBZ	_	20	cop	_	_
18	n't	_	RB	RB	_	20	neg	_	_
19	always	_	RB	RB	_	20	advmod	_	_
20	indicative	_	JJ	JJ	_	13	conj	_	_
21	?	_	.	.	_	2	punct	_	_

Oracle:
(a3 / and, op, i / indicate-01)
(a3 / and, op, s2 / seem-01)
(d / decide-01, ARG1, s / signal-01)
(i / indicate-01, ARG0, w / walk-01)
(i / indicate-01, polarity, -)
(i / indicate-01, time, a4 / always)
(m / make-02, ARG1, d / decide-01)
(r / random, degree, s3 / so)
(r / random, domain, w / walk-01)
(s / signal-01, ARG0, w / walk-01)
(s / signal-01, ARG1, a2 / autism)
(s2 / seem-01, ARG1, r / random)
(w / walk-01, manner, t2 / toe)

Input(Some(Graph((make-02 :ARG1-of (cause-01 :ARG0 (and :op (indicate-01 :time always :polarity - :ARG0 walk-01) :op (seem-01 :ARG1 (random :degree so :domain walk-01)))) :ARG1 (decide-01 :ARG1 (signal-01 :ARG1 autism :ARG0 (walk-01 :manner toe)) :ARG0 they) :ARG0 amr-unknown),ArrayBuffer(Span(1,2,List(0),made,make-02,false), Span(17,18,List(1),and,and,false), Span(20,21,List(2),always,always,false), Span(14,15,List(3),seems,seem-01,false), Span(16,17,List(4),random,random,false), Span(15,16,List(5),so,so,false), Span(3,4,List(6),decide,decide-01,false), Span(6,7,List(7),walking,walk-01,false), Span(4,5,List(8),toe,toe,false), Span(11,12,List(9),autism,autism,false), Span(21,22,List(10, 11),indicative,(indicate-01 :polarity -),false), Span(9,10,List(12),sign,signal-01,false)),Map(2 -> always, 5 -> so, 12 -> signal-01, 8 -> toe, 7 -> walk-01, 1 -> and, 4 -> random, 11 -> -, 6 -> decide-01, 9 -> autism, 0 -> make-02, 10 -> indicate-01, 3 -> seem-01),Map(w -> walk-01, s2 -> seem-01, a3 -> and, s -> signal-01, d -> decide-01, m -> make-02, t2 -> toe, i -> indicate-01, a2 -> autism, r -> random, s3 -> so, a4 -> always))),[Ljava.lang.String;@4032d386,Annotation([Ljava.lang.String;@28d18df5,[Ljava.lang.String;@934b6cb,[Ljava.lang.String;@55cf0d14),Annotation([Ljava.lang.String;@3b74ac8,[Ljava.lang.String;@27adc16e,[Ledu.cmu.lti.nlp.amr.Dependency;@b83a9be),Annotation([Ljava.lang.String;@2609b277,[Ljava.lang.String;@1fd14d74,[Ljava.lang.String;@563e4951),Annotation([Ljava.lang.String;@4066c471,[Ljava.lang.String;@2b175c00,[Ledu.cmu.lti.nlp.amr.Entity;@3eb81efb))
AMR:
(a3 / and, op, s2 / seem-01)
(d / decide-01, ARG1, s / signal-01)
(i / indicate-01, ARG1, s2 / seem-01)
(i / indicate-01, polarity, -)
(i / indicate-01, time, a4 / always)
(m / make-02, ARG1, d / decide-01)
(r / random, mod, s3 / so)
(s / signal-01, ARG0, t2 / toe)
(s / signal-01, ARG1, a2 / autism)
(s / signal-01, ARG6, s2 / seem-01)
(s2 / seem-01, ARG1, r / random)
(w / walk-01, ARG1, t2 / toe)

WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1.1
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 485,027 microseconds
Sentence: Well I might have signs of something on the autism spectrum but who doesn't have one or two?

Oracle Span 1:  autism => autism
Oracle Span 2:  but => contrast-01
Oracle Span 3:  have => have-03
Oracle Span 4:  have => have-03
Oracle Span 5:  I => i
Oracle Span 6:  one => 1
Oracle Span 7:  or => or
Oracle Span 8:  signs => (thing :ARG0-of signal-01)
Oracle Span 9:  something => something
Oracle Span 10:  spectrum => spectrum
Oracle Span 11:  two => 2
Oracle Span 12:  Well => well
Spans:
Span 9-10:  autism => autism
Span 11-12:  but => contrast-01
Span 3-4:  have => have-03
Span 15-16:  have => have-03
Span 1-2:  I => i
Span 16-17:  one => 1
Span 17-18:  or => or
Span 4-5:  signs => (thing :ARG0-of signal-01)
Span 6-7:  something => something
Span 10-11:  spectrum => spectrum
Span 18-19:  two => 2
Span 0-1:  Well => well

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 9-10:  autism => autism
Oracle Span 11-12:  but => contrast-01
Oracle Span 3-4:  have => have-03
Oracle Span 15-16:  have => have-03
Oracle Span 1-2:  I => i
Oracle Span 16-17:  one => 1
Oracle Span 17-18:  or => or
Oracle Span 4-5:  signs => (thing :ARG0-of signal-01)
Oracle Span 6-7:  something => something
Oracle Span 10-11:  spectrum => spectrum
Oracle Span 18-19:  two => 2
Oracle Span 0-1:  Well => well

Dependencies:
1	Well	_	VB	VB	_	0	root	_	_
2	I	_	PRP	PRP	_	4	nsubj	_	_
3	might	_	MD	MD	_	4	aux	_	_
4	have	_	VB	VB	_	1	dep	_	_
5	signs	_	NNS	NNS	_	4	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	something	_	NN	NN	_	6	pobj	_	_
8	on	_	IN	IN	_	4	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	autism	_	NN	NN	_	11	nn	_	_
11	spectrum	_	NN	NN	_	8	pobj	_	_
12	but	_	CC	CC	_	4	cc	_	_
13	who	_	WP	WP	_	16	nsubj	_	_
14	does	_	VBZ	VBZ	_	16	aux	_	_
15	n't	_	RB	RB	_	16	neg	_	_
16	have	_	VB	VB	_	4	conj	_	_
17	one	_	CD	CD	_	16	dobj	_	_
18	or	_	CC	CC	_	17	cc	_	_
19	two	_	CD	CD	_	17	conj	_	_
20	?	_	.	.	_	16	punct	_	_

Oracle:
(c / contrast-01, ARG2, h2 / have-03)
(c / contrast-01, mod, w / well)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, t / thing)
(h2 / have-03, ARG1, o2 / or)
(s / signal-01, ARG0, t / thing)
(s / signal-01, ARG1, s2 / something)
(s2 / something, location, s3 / spectrum)
(s3 / spectrum, mod, a / autism)

Input(Some(Graph((contrast-01 :mod well :ARG2 (have-03 :ARG1 (or :op (thing :quant 2 :ARG0-of signal-01) :op (thing :quant 1 :ARG0-of signal-01)) :ARG0 amr-unknown :polarity -) :ARG1 (possible :domain (have-03 :ARG1 (thing :ARG0-of (signal-01 :ARG1 (something :location (spectrum :mod autism)))) :ARG0 i))),ArrayBuffer(Span(11,12,List(0),but,contrast-01,false), Span(0,1,List(1),Well,well,false), Span(3,4,List(2),have,have-03,false), Span(17,18,List(3),or,or,false), Span(18,19,List(4),two,2,false), Span(16,17,List(5),one,1,false), Span(15,16,List(6),have,have-03,false), Span(6,7,List(7),something,something,false), Span(10,11,List(8),spectrum,spectrum,false), Span(9,10,List(9),autism,autism,false), Span(1,2,List(10),I,i,false), Span(4,5,List(11, 12),signs,(thing :ARG0-of signal-01),false)),Map(2 -> have-03, 5 -> 1, 12 -> signal-01, 8 -> spectrum, 7 -> something, 1 -> well, 4 -> 2, 11 -> thing, 6 -> have-03, 9 -> autism, 0 -> contrast-01, 10 -> i, 3 -> or),Map(w -> well, h -> have-03, 2 -> 2, s2 -> something, h2 -> have-03, t -> thing, s -> signal-01, 1 -> 1, a -> autism, o2 -> or, i -> i, s3 -> spectrum, c -> contrast-01))),[Ljava.lang.String;@1ae8bcbc,Annotation([Ljava.lang.String;@6cdba6dc,[Ljava.lang.String;@7d3d101b,[Ljava.lang.String;@30c8681),Annotation([Ljava.lang.String;@5cdec700,[Ljava.lang.String;@6d026701,[Ledu.cmu.lti.nlp.amr.Dependency;@78aa1f72),Annotation([Ljava.lang.String;@1f75a668,[Ljava.lang.String;@35399441,[Ljava.lang.String;@4b7dc788),Annotation([Ljava.lang.String;@6304101a,[Ljava.lang.String;@5170bcf4,[Ledu.cmu.lti.nlp.amr.Entity;@2812b107))
AMR:
(c / contrast-01, ARG1, h2 / have-03)
(c / contrast-01, ARG2, h / have-03)
(c / contrast-01, ARG6, w / well)
(h / have-03, ARG1, o2 / or)
(h / have-03, ARG6, 2 / 2)
(h / have-03, time, 1 / 1)
(h2 / have-03, ARG0, i / i)
(h2 / have-03, ARG1, t / thing)
(s / signal-01, ARG0, t / thing)
(s / signal-01, ARG1, s2 / something)
(s / signal-01, ARG2, s3 / spectrum)
(s3 / spectrum, mod, a / autism)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.1.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
Decoded in 442,579 microseconds
Sentence: You guys know what I mean.

Oracle Span 1:  guys => guy
Oracle Span 2:  I => i
Oracle Span 3:  know => know-01
Oracle Span 4:  mean => (thing :ARG1-of mean-01)
Oracle Span 5:  You => you
Spans:
Span 1-2:  guys => guy
Span 4-5:  I => i
Span 2-3:  know => know-01
Span 5-6:  mean => (thing :ARG1-of mean-01)
Span 0-1:  You => you

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 1-2:  guys => guy
Oracle Span 4-5:  I => i
Oracle Span 2-3:  know => know-01
Oracle Span 5-6:  mean => (thing :ARG1-of mean-01)
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	2	dep	_	_
2	guys	_	NNS	NNS	_	3	nsubj	_	_
3	know	_	VBP	VBP	_	0	root	_	_
4	what	_	WP	WP	_	6	dobj	_	_
5	I	_	PRP	PRP	_	6	nsubj	_	_
6	mean	_	VBP	VBP	_	3	ccomp	_	_
7	.	_	.	.	_	3	punct	_	_

Oracle:
(g / guy, mod, y / you)
(k / know-01, ARG0, g / guy)
(k / know-01, ARG1, t / thing)
(m / mean-01, ARG0, i / i)
(m / mean-01, ARG1, t / thing)

Input(Some(Graph((know-01 :ARG1 (thing :ARG1-of (mean-01 :ARG0 i)) :ARG0 (guy :mod you)),ArrayBuffer(Span(2,3,List(0),know,know-01,false), Span(5,6,List(1, 2),mean,(thing :ARG1-of mean-01),false), Span(4,5,List(3),I,i,false), Span(1,2,List(4),guys,guy,false), Span(0,1,List(5),You,you,false)),Map(2 -> mean-01, 5 -> you, 1 -> thing, 4 -> guy, 0 -> know-01, 3 -> i),Map(t -> thing, k -> know-01, m -> mean-01, y -> you, g -> guy, i -> i))),[Ljava.lang.String;@df6620a,Annotation([Ljava.lang.String;@4e31276e,[Ljava.lang.String;@1a72a540,[Ljava.lang.String;@27d5a580),Annotation([Ljava.lang.String;@198d6542,[Ljava.lang.String;@5e403b4a,[Ledu.cmu.lti.nlp.amr.Dependency;@5117dd67),Annotation([Ljava.lang.String;@5be49b60,[Ljava.lang.String;@2931522b,[Ljava.lang.String;@7674b62c),Annotation([Ljava.lang.String;@19e7a160,[Ljava.lang.String;@662706a7,[Ledu.cmu.lti.nlp.amr.Entity;@45a4b042))
AMR:
(k / know-01, ARG0, g / guy)
(k / know-01, ARG1, t / thing)
(k / know-01, ARG6, y / you)
(m / mean-01, ARG0, i / i)
(m / mean-01, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 64,609 microseconds
Sentence: Walking on toes can be a symptom of autism.

Oracle Span 1:  autism => autism
Oracle Span 2:  can => possible
Oracle Span 3:  symptom => symptom
Oracle Span 4:  toes => toe
Oracle Span 5:  Walking => walk-01
Spans:
Span 8-9:  autism => autism
Span 3-4:  can => possible
Span 6-7:  symptom => symptom
Span 2-3:  toes => toe
Span 0-1:  Walking => walk-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 8-9:  autism => autism
Oracle Span 3-4:  can => possible
Oracle Span 6-7:  symptom => symptom
Oracle Span 2-3:  toes => toe
Oracle Span 0-1:  Walking => walk-01

Dependencies:
1	Walking	_	VBG	VBG	_	7	nsubj	_	_
2	on	_	IN	IN	_	1	prep	_	_
3	toes	_	NNS	NNS	_	2	pobj	_	_
4	can	_	MD	MD	_	7	aux	_	_
5	be	_	VB	VB	_	7	cop	_	_
6	a	_	DT	DT	_	7	det	_	_
7	symptom	_	NN	NN	_	0	root	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	autism	_	NN	NN	_	8	pobj	_	_
10	.	_	.	.	_	7	punct	_	_

Oracle:
(p / possible, domain, s / symptom)
(s / symptom, domain, w / walk-01)
(s / symptom, mod, a / autism)
(w / walk-01, prep-on, t / toe)

Input(Some(Graph((possible :domain (symptom :domain (walk-01 :prep-on toe) :mod autism)),ArrayBuffer(Span(3,4,List(0),can,possible,false), Span(6,7,List(1),symptom,symptom,false), Span(0,1,List(2),Walking,walk-01,false), Span(2,3,List(3),toes,toe,false), Span(8,9,List(4),autism,autism,false)),Map(2 -> walk-01, 1 -> symptom, 4 -> autism, 0 -> possible, 3 -> toe),Map(w -> walk-01, t -> toe, s -> symptom, p -> possible, a -> autism))),[Ljava.lang.String;@16b2bb0c,Annotation([Ljava.lang.String;@327af41b,[Ljava.lang.String;@6cb6decd,[Ljava.lang.String;@c7045b9),Annotation([Ljava.lang.String;@f99f5e0,[Ljava.lang.String;@6aa61224,[Ledu.cmu.lti.nlp.amr.Dependency;@30bce90b),Annotation([Ljava.lang.String;@3e6f3f28,[Ljava.lang.String;@7e19ebf0,[Ljava.lang.String;@2474f125),Annotation([Ljava.lang.String;@7357a011,[Ljava.lang.String;@3406472c,[Ledu.cmu.lti.nlp.amr.Entity;@5717c37))
AMR:
(p / possible, domain, s / symptom)
(t / toe, mod, a / autism)
(w / walk-01, ARG0, t / toe)
(w / walk-01, ARG1, p / possible)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 68,199 microseconds
Sentence: Having a headache can be a symptom of brain tumours.

Oracle Span 1:  brain => brain
Oracle Span 2:  can => possible
Oracle Span 3:  headache => headache
Oracle Span 4:  symptom => symptom
Oracle Span 5:  tumours => tumour
Spans:
Span 8-9:  brain => brain
Span 3-4:  can => possible
Span 2-3:  headache => headache
Span 6-7:  symptom => symptom
Span 9-10:  tumours => tumour

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  brain => brain
Oracle Span 3-4:  can => possible
Oracle Span 2-3:  headache => headache
Oracle Span 6-7:  symptom => symptom
Oracle Span 9-10:  tumours => tumour

Dependencies:
1	Having	_	VBG	VBG	_	7	csubj	_	_
2	a	_	DT	DT	_	3	det	_	_
3	headache	_	NN	NN	_	1	dobj	_	_
4	can	_	MD	MD	_	7	aux	_	_
5	be	_	VB	VB	_	7	cop	_	_
6	a	_	DT	DT	_	7	det	_	_
7	symptom	_	NN	NN	_	0	root	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	brain	_	NN	NN	_	10	nn	_	_
10	tumours	_	NNS	NNS	_	8	pobj	_	_
11	.	_	.	.	_	7	punct	_	_

Oracle:
(p / possible, domain, s / symptom)
(s / symptom, domain, h / headache)
(s / symptom, mod, t / tumour)
(t / tumour, mod, b / brain)

Input(Some(Graph((possible :domain (symptom :domain headache :mod (tumour :mod brain))),ArrayBuffer(Span(3,4,List(0),can,possible,false), Span(6,7,List(1),symptom,symptom,false), Span(2,3,List(2),headache,headache,false), Span(9,10,List(3),tumours,tumour,false), Span(8,9,List(4),brain,brain,false)),Map(2 -> headache, 1 -> symptom, 4 -> brain, 0 -> possible, 3 -> tumour),Map(h -> headache, b -> brain, t -> tumour, s -> symptom, p -> possible))),[Ljava.lang.String;@68f4865,Annotation([Ljava.lang.String;@4816278d,[Ljava.lang.String;@4eaf3684,[Ljava.lang.String;@40317ba2),Annotation([Ljava.lang.String;@3c01cfa1,[Ljava.lang.String;@45d2ade3,[Ledu.cmu.lti.nlp.amr.Dependency;@727eb8cb),Annotation([Ljava.lang.String;@39d9314d,[Ljava.lang.String;@b978d10,[Ljava.lang.String;@5b7a8434),Annotation([Ljava.lang.String;@5c45d770,[Ljava.lang.String;@2ce6c6ec,[Ledu.cmu.lti.nlp.amr.Entity;@1bae316d))
AMR:
(h / headache, mod, b / brain)
(p / possible, domain, s / symptom)
(s / symptom, mod, t / tumour)
(t / tumour, mod, b / brain)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 21,647 microseconds
Sentence: Feeling tired a lot can be a symptom of leukaemia.

Oracle Span 1:  can => possible
Oracle Span 2:  Feeling => feel-01
Oracle Span 3:  leukaemia => leukaemia
Oracle Span 4:  lot => lot
Oracle Span 5:  symptom => symptom
Oracle Span 6:  tired => tire-01
Spans:
Span 4-5:  can => possible
Span 0-1:  Feeling => feel-01
Span 9-10:  leukaemia => leukaemia
Span 3-4:  lot => lot
Span 7-8:  symptom => symptom
Span 1-2:  tired => tire-01

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 4-5:  can => possible
Oracle Span 0-1:  Feeling => feel-01
Oracle Span 9-10:  leukaemia => leukaemia
Oracle Span 3-4:  lot => lot
Oracle Span 7-8:  symptom => symptom
Oracle Span 1-2:  tired => tire-01

Dependencies:
1	Feeling	_	VBG	VBG	_	8	dep	_	_
2	tired	_	JJ	JJ	_	1	acomp	_	_
3	a	_	DT	DT	_	4	det	_	_
4	lot	_	NN	NN	_	8	nsubj	_	_
5	can	_	MD	MD	_	8	aux	_	_
6	be	_	VB	VB	_	8	cop	_	_
7	a	_	DT	DT	_	8	det	_	_
8	symptom	_	NN	NN	_	0	root	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	leukaemia	_	NN	NN	_	9	pobj	_	_
11	.	_	.	.	_	8	punct	_	_

Oracle:
(f / feel-01, ARG1, t / tire-01)
(p / possible, domain, s / symptom)
(s / symptom, domain, f / feel-01)
(s / symptom, mod, l / leukaemia)
(t / tire-01, frequency, l2 / lot)

Input(Some(Graph((possible :domain (symptom :domain (feel-01 :ARG1 (tire-01 :frequency lot)) :mod leukaemia)),ArrayBuffer(Span(4,5,List(0),can,possible,false), Span(7,8,List(1),symptom,symptom,false), Span(0,1,List(2),Feeling,feel-01,false), Span(1,2,List(3),tired,tire-01,false), Span(3,4,List(4),lot,lot,false), Span(9,10,List(5),leukaemia,leukaemia,false)),Map(2 -> feel-01, 5 -> leukaemia, 1 -> symptom, 4 -> lot, 0 -> possible, 3 -> tire-01),Map(t -> tire-01, s -> symptom, p -> possible, l2 -> lot, l -> leukaemia, f -> feel-01))),[Ljava.lang.String;@147a5d08,Annotation([Ljava.lang.String;@6676f6a0,[Ljava.lang.String;@7cbd9d24,[Ljava.lang.String;@1672fe87),Annotation([Ljava.lang.String;@5026735c,[Ljava.lang.String;@1b45c0e,[Ledu.cmu.lti.nlp.amr.Dependency;@11f0a5a1),Annotation([Ljava.lang.String;@10f7f7de,[Ljava.lang.String;@73a8da0f,[Ljava.lang.String;@50dfbc58),Annotation([Ljava.lang.String;@4416d64f,[Ljava.lang.String;@6bf08014,[Ledu.cmu.lti.nlp.amr.Entity;@5e3d57c7))
AMR:
(f / feel-01, ARG1, t / tire-01)
(f / feel-01, ARG6, l2 / lot)
(l2 / lot, mod, l / leukaemia)
(p / possible, domain, s / symptom)
(t / tire-01, ARG1, s / symptom)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 127,045 microseconds
Sentence: Symptoms don't always apply but if they happen in a lot of cases (which it clearly must do in this instance) it's worth noting, since otherwise nothing would ever get diagnosed.

Oracle Span 1:  always => always
Oracle Span 2:  apply => apply-02
Oracle Span 3:  but => contrast-01
Oracle Span 4:  cases => case
Oracle Span 5:  clearly => clear
Oracle Span 6:  diagnosed => diagnose-01
Oracle Span 7:  ever => ever
Oracle Span 8:  happen => happen-01
Oracle Span 9:  if => cause-01
Oracle Span 10:  instance => instance
Oracle Span 11:  lot => lot
Oracle Span 12:  nothing => nothing
Oracle Span 13:  noting => note-01
Oracle Span 14:  Symptoms => symptom
Oracle Span 15:  this => this
Spans:
Span 3-4:  always => always
Span 4-5:  apply => apply-02
Span 5-6:  but => contrast-01
Span 13-14:  cases => case
Span 17-18:  clearly => clear
Span 35-36:  diagnosed => diagnose-01
Span 33-34:  ever => ever
Span 8-9:  happen => happen-01
Span 6-7:  if => cause-01
Span 22-23:  instance => instance
Span 11-12:  lot => lot
Span 31-32:  nothing => nothing
Span 27-28:  noting => note-01
Span 0-1:  Symptoms => symptom
Span 21-22:  this => this

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 3-4:  always => always
Oracle Span 4-5:  apply => apply-02
Oracle Span 5-6:  but => contrast-01
Oracle Span 13-14:  cases => case
Oracle Span 17-18:  clearly => clear
Oracle Span 35-36:  diagnosed => diagnose-01
Oracle Span 33-34:  ever => ever
Oracle Span 8-9:  happen => happen-01
Oracle Span 6-7:  if => cause-01
Oracle Span 22-23:  instance => instance
Oracle Span 11-12:  lot => lot
Oracle Span 31-32:  nothing => nothing
Oracle Span 27-28:  noting => note-01
Oracle Span 0-1:  Symptoms => symptom
Oracle Span 21-22:  this => this

Dependencies:
1	Symptoms	_	NNS	NNS	_	5	nsubj	_	_
2	do	_	VBP	VBP	_	5	aux	_	_
3	n't	_	RB	RB	_	5	neg	_	_
4	always	_	RB	RB	_	5	advmod	_	_
5	apply	_	VB	VB	_	0	root	_	_
6	but	_	CC	CC	_	5	cc	_	_
7	if	_	IN	IN	_	9	mark	_	_
8	they	_	PRP	PRP	_	9	nsubj	_	_
9	happen	_	VBP	VBP	_	27	advcl	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	lot	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	cases	_	NNS	NNS	_	13	pobj	_	_
15	(	_	(	(	_	20	punct	_	_
16	which	_	WDT	WDT	_	20	dobj	_	_
17	it	_	PRP	PRP	_	20	nsubj	_	_
18	clearly	_	RB	RB	_	20	advmod	_	_
19	must	_	MD	MD	_	20	aux	_	_
20	do	_	VB	VB	_	27	parataxis	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	this	_	DT	DT	_	23	det	_	_
23	instance	_	NN	NN	_	21	pobj	_	_
24	)	_	)	)	_	20	punct	_	_
25	it	_	PRP	PRP	_	27	nsubj	_	_
26	's	_	VBZ	VBZ	_	27	cop	_	_
27	worth	_	JJ	JJ	_	5	conj	_	_
28	noting	_	VBG	VBG	_	27	xcomp	_	_
29	,	_	,	,	_	27	punct	_	_
30	since	_	IN	IN	_	36	mark	_	_
31	otherwise	_	RB	RB	_	36	advmod	_	_
32	nothing	_	NN	NN	_	36	nsubjpass	_	_
33	would	_	MD	MD	_	36	aux	_	_
34	ever	_	RB	RB	_	36	advmod	_	_
35	get	_	VB	VB	_	36	auxpass	_	_
36	diagnosed	_	VBN	VBN	_	27	advcl	_	_
37	.	_	.	.	_	5	punct	_	_

Oracle:
(a / apply-02, ARG0, s / symptom)
(a / apply-02, time, a2 / always)
(c / contrast-01, ARG1, a / apply-02)
(c2 / case, quant, l / lot)
(c4 / cause-01, ARG1, d2 / diagnose-01)
(d2 / diagnose-01, ARG2, n2 / nothing)
(d2 / diagnose-01, time, e / ever)
(h / happen-01, ARG1, s / symptom)
(h / happen-01, frequency, c2 / case)
(i2 / instance, mod, t / this)

Input(Some(Graph((contrast-01 :ARG2 (recommend-01 :ARG1 note-01 :condition (happen-01 :ARG1-of (infer-01 :topic (instance :mod this) :mod clear) :frequency (case :quant lot) :ARG1 symptom) :ARG0-of (cause-01 :ARG1 (diagnose-01 :condition (note-01 :polarity -) :time ever :ARG2 nothing))) :ARG1 (apply-02 :time always :ARG0 symptom :polarity -)),ArrayBuffer(Span(5,6,List(0),but,contrast-01,false), Span(27,28,List(1),noting,note-01,false), Span(8,9,List(2),happen,happen-01,false), Span(22,23,List(3),instance,instance,false), Span(21,22,List(4),this,this,false), Span(13,14,List(5),cases,case,false), Span(11,12,List(6),lot,lot,false), Span(6,7,List(7),if,cause-01,false), Span(35,36,List(8),diagnosed,diagnose-01,false), Span(33,34,List(9),ever,ever,false), Span(31,32,List(10),nothing,nothing,false), Span(4,5,List(11),apply,apply-02,false), Span(3,4,List(12),always,always,false), Span(0,1,List(13),Symptoms,symptom,false), Span(17,18,List(14),clearly,clear,false)),Map(2 -> happen-01, 5 -> case, 12 -> always, 8 -> diagnose-01, 7 -> cause-01, 1 -> note-01, 4 -> this, 11 -> apply-02, 14 -> clear, 6 -> lot, 9 -> ever, 0 -> contrast-01, 10 -> nothing, 3 -> instance, 13 -> symptom),Map(e -> ever, n -> note-01, h -> happen-01, t -> this, c4 -> cause-01, s -> symptom, c3 -> clear, a -> apply-02, d2 -> diagnose-01, i2 -> instance, a2 -> always, c -> contrast-01, l -> lot, n2 -> nothing, c2 -> case))),[Ljava.lang.String;@732d0d24,Annotation([Ljava.lang.String;@1fb19a0,[Ljava.lang.String;@6ee4d9ab,[Ljava.lang.String;@5a5338df),Annotation([Ljava.lang.String;@418c5a9c,[Ljava.lang.String;@18e36d14,[Ledu.cmu.lti.nlp.amr.Dependency;@5082d622),Annotation([Ljava.lang.String;@13d4992d,[Ljava.lang.String;@302f7971,[Ljava.lang.String;@332729ad),Annotation([Ljava.lang.String;@75d2da2d,[Ljava.lang.String;@4278284b,[Ledu.cmu.lti.nlp.amr.Entity;@9573584))
AMR:
(a / apply-02, ARG0, s / symptom)
(a / apply-02, ARG1, h / happen-01)
(a / apply-02, time, a2 / always)
(c / contrast-01, ARG1, n / note-01)
(c / contrast-01, ARG6, a / apply-02)
(c4 / cause-01, ARG0, h / happen-01)
(c4 / cause-01, ARG1, c3 / clear)
(d2 / diagnose-01, ARG1, n2 / nothing)
(d2 / diagnose-01, time, e / ever)
(h / happen-01, ARG0, i2 / instance)
(h / happen-01, ARG1, l / lot)
(i2 / instance, mod, t / this)
(l / lot, location, c2 / case)
(n / note-01, ARG1, d2 / diagnose-01)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1.1.1.1
Decoded in 815,157 microseconds
Sentence: I used to walk on my toes, but that was because I was born with strange toes that curled under and had to be straightened with surgery two years ago.

Oracle Span 1:  because => cause-01
Oracle Span 2:  born => bear-02
Oracle Span 3:  but => contrast-01
Oracle Span 4:  curled => curl-01
Oracle Span 5:  I => i
Oracle Span 6:  straightened => straighten-01
Oracle Span 7:  strange => strange
Oracle Span 8:  surgery => surgery
Oracle Span 9:  toes => toe
Oracle Span 10:  toes => toe
Oracle Span 11:  two => 2
Oracle Span 12:  under => under
Oracle Span 13:  walk => walk-01
Oracle Span 14:  years => (temporal-quantity :unit year)
Spans:
Span 11-12:  because => cause-01
Span 14-15:  born => bear-02
Span 8-9:  but => contrast-01
Span 19-20:  curled => curl-01
Span 0-1:  I => i
Span 25-26:  straightened => straighten-01
Span 16-17:  strange => strange
Span 27-28:  surgery => surgery
Span 6-7:  toes => toe
Span 17-18:  toes => toe
Span 28-29:  two => 2
Span 20-21:  under => under
Span 3-4:  walk => walk-01
Span 29-30:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 11-12:  because => cause-01
Oracle Span 14-15:  born => bear-02
Oracle Span 8-9:  but => contrast-01
Oracle Span 19-20:  curled => curl-01
Oracle Span 0-1:  I => i
Oracle Span 25-26:  straightened => straighten-01
Oracle Span 16-17:  strange => strange
Oracle Span 27-28:  surgery => surgery
Oracle Span 6-7:  toes => toe
Oracle Span 17-18:  toes => toe
Oracle Span 28-29:  two => 2
Oracle Span 20-21:  under => under
Oracle Span 3-4:  walk => walk-01
Oracle Span 29-30:  years => (temporal-quantity :unit year)

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	used	_	VBD	VBD	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	walk	_	VB	VB	_	2	xcomp	_	_
5	on	_	IN	IN	_	4	prep	_	_
6	my	_	PRP$	PRP$	_	7	poss	_	_
7	toes	_	NNS	NNS	_	5	pobj	_	_
8	,	_	,	,	_	2	punct	_	_
9	but	_	CC	CC	_	2	cc	_	_
10	that	_	DT	DT	_	11	nsubj	_	_
11	was	_	VBD	VBD	_	2	conj	_	_
12	because	_	IN	IN	_	15	mark	_	_
13	I	_	PRP	PRP	_	15	nsubjpass	_	_
14	was	_	VBD	VBD	_	15	auxpass	_	_
15	born	_	VBN	VBN	_	11	advcl	_	_
16	with	_	IN	IN	_	15	prep	_	_
17	strange	_	JJ	JJ	_	18	amod	_	_
18	toes	_	NNS	NNS	_	16	pobj	_	_
19	that	_	WDT	WDT	_	20	nsubj	_	_
20	curled	_	VBD	VBD	_	18	rcmod	_	_
21	under	_	IN	IN	_	20	prep	_	_
22	and	_	CC	CC	_	20	cc	_	_
23	had	_	VBD	VBD	_	20	conj	_	_
24	to	_	TO	TO	_	26	aux	_	_
25	be	_	VB	VB	_	26	auxpass	_	_
26	straightened	_	VBN	VBN	_	23	xcomp	_	_
27	with	_	IN	IN	_	26	prep	_	_
28	surgery	_	NN	NN	_	27	pobj	_	_
29	two	_	CD	CD	_	30	num	_	_
30	years	_	NNS	NNS	_	31	npadvmod	_	_
31	ago	_	RB	RB	_	27	advmod	_	_
32	.	_	.	.	_	2	punct	_	_

Oracle:
(b / bear-02, ARG1, i / i)
(b / bear-02, prep-with, t3 / toe)
(c / cause-01, ARG0, b / bear-02)
(c / cause-01, ARG1, w / walk-01)
(c2 / curl-01, ARG1, t3 / toe)
(c2 / curl-01, ARG2, u / under)
(c3 / contrast-01, ARG1, w / walk-01)
(c3 / contrast-01, ARG2, c / cause-01)
(i / i, part, t2 / toe)
(s2 / straighten-01, ARG1, t3 / toe)
(s2 / straighten-01, ARG2, s3 / surgery)
(t3 / toe, mod, s / strange)
(t4 / temporal-quantity, quant, 2 / 2)
(t4 / temporal-quantity, unit, y2 / year)
(w / walk-01, ARG0, i / i)
(w / walk-01, prep-on, t2 / toe)

Input(Some(Graph((contrast-01 :ARG2 (cause-01 :ARG0 (bear-02 :prep-with (toe :ARG1-of (straighten-01 :time (before :op now :quant (temporal-quantity :unit year :quant 2)) :ARG2-of obligate-01 :ARG2 surgery) :ARG1-of (curl-01 :ARG2 under) :mod strange) :ARG1 i) :ARG1 walk-01) :ARG1 (walk-01 :prep-on (toe :part-of i) :ARG0 i)),ArrayBuffer(Span(8,9,List(0),but,contrast-01,false), Span(11,12,List(1),because,cause-01,false), Span(14,15,List(2),born,bear-02,false), Span(6,7,List(3),toes,toe,false), Span(25,26,List(4),straightened,straighten-01,false), Span(28,29,List(5),two,2,false), Span(29,30,List(6, 7),years,(temporal-quantity :unit year),false), Span(27,28,List(8),surgery,surgery,false), Span(19,20,List(9),curled,curl-01,false), Span(20,21,List(10),under,under,false), Span(16,17,List(11),strange,strange,false), Span(3,4,List(12),walk,walk-01,false), Span(17,18,List(13),toes,toe,false), Span(0,1,List(14),I,i,false)),Map(2 -> bear-02, 5 -> 2, 12 -> walk-01, 8 -> surgery, 7 -> year, 1 -> cause-01, 4 -> straighten-01, 11 -> strange, 14 -> i, 6 -> temporal-quantity, 9 -> curl-01, 0 -> contrast-01, 10 -> under, 3 -> toe, 13 -> toe),Map(w -> walk-01, t4 -> temporal-quantity, 2 -> 2, s2 -> straighten-01, b -> bear-02, s -> strange, t3 -> toe, c3 -> contrast-01, t2 -> toe, i -> i, s3 -> surgery, c -> cause-01, u -> under, c2 -> curl-01, y2 -> year))),[Ljava.lang.String;@3370f42,Annotation([Ljava.lang.String;@6057aebb,[Ljava.lang.String;@63eef88a,[Ljava.lang.String;@53251a66),Annotation([Ljava.lang.String;@6853425f,[Ljava.lang.String;@352c1b98,[Ledu.cmu.lti.nlp.amr.Dependency;@21129f1f),Annotation([Ljava.lang.String;@5a9f4771,[Ljava.lang.String;@282cb7c7,[Ljava.lang.String;@7d898981),Annotation([Ljava.lang.String;@48d61b48,[Ljava.lang.String;@68d279ec,[Ledu.cmu.lti.nlp.amr.Entity;@258d79be))
AMR:
(b / bear-02, ARG1, t2 / toe)
(c / cause-01, ARG0, b / bear-02)
(c / cause-01, ARG1, c3 / contrast-01)
(c2 / curl-01, ARG0, t2 / toe)
(c2 / curl-01, ARG1, s2 / straighten-01)
(c2 / curl-01, location, u / under)
(c3 / contrast-01, ARG1, w / walk-01)
(s2 / straighten-01, ARG1, s3 / surgery)
(s2 / straighten-01, time, 2 / 2)
(t2 / toe, mod, s / strange)
(t4 / temporal-quantity, quant, 2 / 2)
(t4 / temporal-quantity, unit, y2 / year)
(w / walk-01, ARG0, i / i)
(w / walk-01, ARG1, t3 / toe)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.0.0.2.2.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.2.2.1
WARNING: makeIds can't find span Id: 0.1.0.0.2.2.1.1
WARNING: makeIds can't find span Id: 0.1.0.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 476,329 microseconds
Sentence: My brother's autistic but I haven't noticed this with him either, but the spectrum is so broad and I myself probably have mild asperger's because I have problems with communication and don't pick up on social reactions/body language.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  asperger 's => (disease :name (name :op "asperger's"))
Oracle Span 4:  autistic => autistic
Oracle Span 5:  because => cause-01
Oracle Span 6:  body => body
Oracle Span 7:  broad => broad
Oracle Span 8:  brother => brother
Oracle Span 9:  but => contrast-01
Oracle Span 10:  but => contrast-01
Oracle Span 11:  communication => communicate-01
Oracle Span 12:  either => either
Oracle Span 13:  have => have-03
Oracle Span 14:  have => have-03
Oracle Span 15:  I => i
Oracle Span 16:  language => language
Oracle Span 17:  mild => mild
Oracle Span 18:  noticed => notice-01
Oracle Span 19:  pick => pick-04
Oracle Span 20:  probably => probable
Oracle Span 21:  problems => problem
Oracle Span 22:  reactions => react-01
Oracle Span 23:  so => so
Oracle Span 24:  social => society
Oracle Span 25:  spectrum => spectrum
Oracle Span 26:  this => this
Spans:
Span 20-21:  and => and
Span 34-35:  and => and
Span 26-28:  asperger 's => (disease :name (name :op "asperger's"))
Span 3-4:  autistic => autistic
Span 28-29:  because => cause-01
Span 43-44:  body => body
Span 19-20:  broad => broad
Span 1-2:  brother => brother
Span 4-5:  but => contrast-01
Span 14-15:  but => contrast-01
Span 33-34:  communication => communicate-01
Span 12-13:  either => either
Span 6-7:  have => have-03
Span 24-25:  have => have-03
Span 5-6:  I => i
Span 44-45:  language => language
Span 25-26:  mild => mild
Span 8-9:  noticed => notice-01
Span 37-38:  pick => pick-04
Span 23-24:  probably => probable
Span 31-32:  problems => problem
Span 41-42:  reactions => react-01
Span 18-19:  so => so
Span 40-41:  social => society
Span 16-17:  spectrum => spectrum
Span 9-10:  this => this

Langrangian relaxation converged after 60 iterations. Delta = 0.0
Oracle Span 20-21:  and => and
Oracle Span 34-35:  and => and
Oracle Span 26-28:  asperger 's => (disease :name (name :op "asperger's"))
Oracle Span 3-4:  autistic => autistic
Oracle Span 28-29:  because => cause-01
Oracle Span 43-44:  body => body
Oracle Span 19-20:  broad => broad
Oracle Span 1-2:  brother => brother
Oracle Span 4-5:  but => contrast-01
Oracle Span 14-15:  but => contrast-01
Oracle Span 33-34:  communication => communicate-01
Oracle Span 12-13:  either => either
Oracle Span 6-7:  have => have-03
Oracle Span 24-25:  have => have-03
Oracle Span 5-6:  I => i
Oracle Span 44-45:  language => language
Oracle Span 25-26:  mild => mild
Oracle Span 8-9:  noticed => notice-01
Oracle Span 37-38:  pick => pick-04
Oracle Span 23-24:  probably => probable
Oracle Span 31-32:  problems => problem
Oracle Span 41-42:  reactions => react-01
Oracle Span 18-19:  so => so
Oracle Span 40-41:  social => society
Oracle Span 16-17:  spectrum => spectrum
Oracle Span 9-10:  this => this

Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	brother	_	NN	NN	_	4	nsubj	_	_
3	's	_	VBZ	VBZ	_	4	cop	_	_
4	autistic	_	JJ	JJ	_	0	root	_	_
5	but	_	CC	CC	_	4	cc	_	_
6	I	_	PRP	PRP	_	9	nsubj	_	_
7	have	_	VBP	VBP	_	9	aux	_	_
8	n't	_	RB	RB	_	9	neg	_	_
9	noticed	_	VBN	VBN	_	4	conj	_	_
10	this	_	DT	DT	_	9	dobj	_	_
11	with	_	IN	IN	_	10	prep	_	_
12	him	_	PRP	PRP	_	11	pobj	_	_
13	either	_	RB	RB	_	9	advmod	_	_
14	,	_	,	,	_	9	punct	_	_
15	but	_	CC	CC	_	9	cc	_	_
16	the	_	DT	DT	_	17	det	_	_
17	spectrum	_	NN	NN	_	20	nsubj	_	_
18	is	_	VBZ	VBZ	_	20	cop	_	_
19	so	_	RB	RB	_	20	advmod	_	_
20	broad	_	JJ	JJ	_	9	conj	_	_
21	and	_	CC	CC	_	4	cc	_	_
22	I	_	PRP	PRP	_	25	dep	_	_
23	myself	_	PRP	PRP	_	25	nsubj	_	_
24	probably	_	RB	RB	_	25	advmod	_	_
25	have	_	VBP	VBP	_	4	conj	_	_
26	mild	_	JJ	JJ	_	27	amod	_	_
27	asperger	_	NN	NN	_	25	dobj	_	_
28	's	_	VBZ	VBZ	_	27	rcmod	_	_
29	because	_	IN	IN	_	31	mark	_	_
30	I	_	PRP	PRP	_	31	nsubj	_	_
31	have	_	VBP	VBP	_	28	advcl	_	_
32	problems	_	NNS	NNS	_	31	dobj	_	_
33	with	_	IN	IN	_	32	prep	_	_
34	communication	_	NN	NN	_	33	pobj	_	_
35	and	_	CC	CC	_	31	cc	_	_
36	do	_	VBP	VBP	_	38	aux	_	_
37	n't	_	RB	RB	_	38	neg	_	_
38	pick	_	VB	VB	_	31	conj	_	_
39	up	_	RP	RP	_	38	prt	_	_
40	on	_	IN	IN	_	38	prep	_	_
41	social	_	JJ	JJ	_	43	amod	_	_
42	reactions/body	_	JJ	JJ	_	43	amod	_	_
43	language	_	NN	NN	_	40	pobj	_	_
44	.	_	.	.	_	4	punct	_	_

Oracle:
(a / autistic, domain, b / brother)
(a2 / and, op, b2 / broad)
(a2 / and, op, p / probable)
(a5 / and, op, h / have-03)
(a5 / and, op, p3 / pick-04)
(b / brother, poss, i / i)
(b2 / broad, degree, s / so)
(b2 / broad, domain, s2 / spectrum)
(c / contrast-01, ARG1, c2 / contrast-01)
(c / contrast-01, ARG2, a2 / and)
(c2 / contrast-01, ARG1, a / autistic)
(c2 / contrast-01, ARG2, n / notice-01)
(c3 / cause-01, ARG0, h2 / have-03)
(c3 / cause-01, ARG1, a5 / and)
(d / disease, mod, m2 / mild)
(d / disease, name, n2 / name)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, p2 / problem)
(h2 / have-03, ARG0, i / i)
(h2 / have-03, ARG1, d / disease)
(l / language, mod, b3 / body)
(n / notice-01, ARG0, i / i)
(n / notice-01, ARG1, t / this)
(n / notice-01, mod, e / either)
(n2 / name, op, "asperger's")
(p / probable, domain, h2 / have-03)
(p2 / problem, topic, c4 / communicate-01)
(r / react-01, mod, s3 / society)
(t / this, topic, b / brother)

Input(Some(Graph((contrast-01 :ARG2 (and :op (probable :domain (have-03 :ARG0-of (cause-01 :ARG1 (and :op (pick-04 :ARG1 (slash :op (react-01 :mod society) :op (language :mod body))) :op (have-03 :ARG1 (problem :topic communicate-01) :ARG0 i))) :ARG1 (disease :mod mild :name (name :op "asperger's")) :ARG0 i)) :op (broad :domain spectrum :degree so)) :ARG1 (contrast-01 :ARG2 (notice-01 :mod either :ARG1 (this :topic brother) :polarity - :ARG0 i) :ARG1 (autistic :domain (brother :poss i)))),ArrayBuffer(Span(26,28,List(0, 1, 2),asperger 's,(disease :name (name :op "asperger's")),false), Span(4,5,List(3),but,contrast-01,false), Span(20,21,List(4),and,and,false), Span(6,7,List(5),have,have-03,false), Span(28,29,List(6),because,cause-01,false), Span(34,35,List(7),and,and,false), Span(37,38,List(8),pick,pick-04,false), Span(44,45,List(9),language,language,false), Span(43,44,List(10),body,body,false), Span(24,25,List(11),have,have-03,false), Span(31,32,List(12),problems,problem,false), Span(25,26,List(13),mild,mild,false), Span(19,20,List(14),broad,broad,false), Span(16,17,List(15),spectrum,spectrum,false), Span(18,19,List(16),so,so,false), Span(14,15,List(17),but,contrast-01,false), Span(8,9,List(18),noticed,notice-01,false), Span(12,13,List(19),either,either,false), Span(9,10,List(20),this,this,false), Span(3,4,List(21),autistic,autistic,false), Span(1,2,List(22),brother,brother,false), Span(5,6,List(23),I,i,false), Span(23,24,List(24),probably,probable,false), Span(41,42,List(25),reactions,react-01,false), Span(40,41,List(26),social,society,false), Span(33,34,List(27),communication,communicate-01,false)),Map(2 -> "asperger's", 5 -> have-03, 27 -> communicate-01, 12 -> problem, 15 -> spectrum, 8 -> pick-04, 21 -> autistic, 18 -> notice-01, 24 -> probable, 7 -> and, 17 -> contrast-01, 1 -> name, 23 -> i, 26 -> society, 4 -> and, 11 -> have-03, 14 -> broad, 20 -> this, 6 -> cause-01, 9 -> language, 0 -> disease, 22 -> brother, 16 -> so, 19 -> either, 10 -> body, 3 -> contrast-01, 25 -> react-01, 13 -> mild),Map(e -> either, n -> notice-01, b3 -> body, h -> have-03, s2 -> spectrum, h2 -> have-03, t -> this, b -> brother, b2 -> broad, m2 -> mild, p2 -> problem, c4 -> communicate-01, s -> so, d -> disease, p -> probable, a -> autistic, c3 -> cause-01, a5 -> and, r -> react-01, i -> i, a2 -> and, c -> contrast-01, s3 -> society, l -> language, p3 -> pick-04, c2 -> contrast-01, n2 -> name))),[Ljava.lang.String;@14f9390f,Annotation([Ljava.lang.String;@6c0d7c83,[Ljava.lang.String;@176b75f7,[Ljava.lang.String;@5965be2d),Annotation([Ljava.lang.String;@409c54f,[Ljava.lang.String;@3e74829,[Ledu.cmu.lti.nlp.amr.Dependency;@4f6f416f),Annotation([Ljava.lang.String;@3b8f0a79,[Ljava.lang.String;@71e693fa,[Ljava.lang.String;@48793bef),Annotation([Ljava.lang.String;@7d286fb6,[Ljava.lang.String;@3eb77ea8,[Ledu.cmu.lti.nlp.amr.Entity;@7b8b43c7))
AMR:
(a2 / and, op, h / have-03)
(a5 / and, op, p3 / pick-04)
(b2 / broad, domain, s2 / spectrum)
(b2 / broad, mod, s / so)
(c / contrast-01, ARG1, h / have-03)
(c / contrast-01, ARG2, n / notice-01)
(c2 / contrast-01, ARG1, n / notice-01)
(c2 / contrast-01, ARG2, b2 / broad)
(c3 / cause-01, ARG0, p2 / problem)
(c3 / cause-01, ARG1, d / disease)
(c3 / cause-01, ARG6, a5 / and)
(c4 / communicate-01, ARG1, m2 / mild)
(d / disease, name, n2 / name)
(h / have-03, ARG1, d / disease)
(h2 / have-03, ARG0, i / i)
(h2 / have-03, ARG1, e / either)
(h2 / have-03, ARG2, a / autistic)
(l / language, mod, s3 / society)
(n / notice-01, ARG0, h2 / have-03)
(n / notice-01, ARG1, t / this)
(n / notice-01, ARG6, b / brother)
(n2 / name, op, "asperger's")
(p / probable, domain, h / have-03)
(p2 / problem, mod, c4 / communicate-01)
(p3 / pick-04, ARG1, l / language)
(r / react-01, ARG0, l / language)
(r / react-01, ARG1, b3 / body)

WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0.0.0
Decoded in 2,793,640 microseconds
Sentence: But then I don't have a proper diagnosis and even having some symptoms might not mean you have a certain condition.

Oracle Span 1:  and => and
Oracle Span 2:  But => contrast-01
Oracle Span 3:  certain => certain
Oracle Span 4:  condition => condition
Oracle Span 5:  diagnosis => (thing :ARG2-of diagnose-01)
Oracle Span 6:  even => even
Oracle Span 7:  have => have-03
Oracle Span 8:  have => have-03
Oracle Span 9:  having => have-03
Oracle Span 10:  I => i
Oracle Span 11:  mean => mean-01
Oracle Span 12:  proper => proper
Oracle Span 13:  some => some
Oracle Span 14:  symptoms => symptom
Oracle Span 15:  then => then
Oracle Span 16:  you => you
Spans:
Span 9-10:  and => and
Span 0-1:  But => contrast-01
Span 20-21:  certain => certain
Span 21-22:  condition => condition
Span 8-9:  diagnosis => (thing :ARG2-of diagnose-01)
Span 10-11:  even => even
Span 5-6:  have => have-03
Span 18-19:  have => have-03
Span 11-12:  having => have-03
Span 2-3:  I => i
Span 16-17:  mean => mean-01
Span 7-8:  proper => proper
Span 12-13:  some => some
Span 13-14:  symptoms => symptom
Span 1-2:  then => then
Span 17-18:  you => you

Langrangian relaxation converged after 73 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 0-1:  But => contrast-01
Oracle Span 20-21:  certain => certain
Oracle Span 21-22:  condition => condition
Oracle Span 8-9:  diagnosis => (thing :ARG2-of diagnose-01)
Oracle Span 10-11:  even => even
Oracle Span 5-6:  have => have-03
Oracle Span 18-19:  have => have-03
Oracle Span 11-12:  having => have-03
Oracle Span 2-3:  I => i
Oracle Span 16-17:  mean => mean-01
Oracle Span 7-8:  proper => proper
Oracle Span 12-13:  some => some
Oracle Span 13-14:  symptoms => symptom
Oracle Span 1-2:  then => then
Oracle Span 17-18:  you => you

Dependencies:
1	But	_	CC	CC	_	6	cc	_	_
2	then	_	RB	RB	_	6	advmod	_	_
3	I	_	PRP	PRP	_	6	nsubj	_	_
4	do	_	VBP	VBP	_	6	aux	_	_
5	n't	_	RB	RB	_	6	neg	_	_
6	have	_	VB	VB	_	0	root	_	_
7	a	_	DT	DT	_	9	det	_	_
8	proper	_	JJ	JJ	_	9	amod	_	_
9	diagnosis	_	NN	NN	_	6	dobj	_	_
10	and	_	CC	CC	_	6	cc	_	_
11	even	_	RB	RB	_	12	advmod	_	_
12	having	_	VBG	VBG	_	6	conj	_	_
13	some	_	DT	DT	_	14	det	_	_
14	symptoms	_	NNS	NNS	_	17	nsubj	_	_
15	might	_	MD	MD	_	17	aux	_	_
16	not	_	RB	RB	_	17	neg	_	_
17	mean	_	VB	VB	_	12	ccomp	_	_
18	you	_	PRP	PRP	_	19	nsubj	_	_
19	have	_	VB	VB	_	17	ccomp	_	_
20	a	_	DT	DT	_	22	det	_	_
21	certain	_	JJ	JJ	_	22	amod	_	_
22	condition	_	NN	NN	_	19	dobj	_	_
23	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, h / have-03)
(a / and, op, h2 / have-03)
(c / contrast-01, ARG2, a / and)
(c / contrast-01, mod, t / then)
(c2 / condition, mod, c3 / certain)
(d / diagnose-01, ARG2, t2 / thing)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, t2 / thing)
(h2 / have-03, ARG0, y / you)
(h2 / have-03, ARG1, s / symptom)
(h2 / have-03, mod, e / even)
(h3 / have-03, ARG0, y / you)
(h3 / have-03, ARG1, c2 / condition)
(m / mean-01, ARG0, h2 / have-03)
(m / mean-01, ARG1, h3 / have-03)
(s / symptom, quant, s2 / some)
(t2 / thing, mod, p / proper)

Input(Some(Graph((contrast-01 :mod then :ARG2 (and :op (have-03 :ARG0-of (mean-01 :mod possible :ARG1 (have-03 :ARG1 (condition :mod certain) :ARG0 you) :polarity -) :mod even :ARG1 (symptom :quant some) :ARG0 you) :op (have-03 :ARG1 (thing :ARG2-of diagnose-01 :mod proper) :ARG0 i :polarity -))),ArrayBuffer(Span(0,1,List(0),But,contrast-01,false), Span(1,2,List(1),then,then,false), Span(9,10,List(2),and,and,false), Span(5,6,List(3),have,have-03,false), Span(16,17,List(4),mean,mean-01,false), Span(11,12,List(5),having,have-03,false), Span(21,22,List(6),condition,condition,false), Span(20,21,List(7),certain,certain,false), Span(17,18,List(8),you,you,false), Span(10,11,List(9),even,even,false), Span(13,14,List(10),symptoms,symptom,false), Span(12,13,List(11),some,some,false), Span(18,19,List(12),have,have-03,false), Span(7,8,List(13),proper,proper,false), Span(2,3,List(14),I,i,false), Span(8,9,List(15, 16),diagnosis,(thing :ARG2-of diagnose-01),false)),Map(2 -> and, 5 -> have-03, 12 -> have-03, 15 -> thing, 8 -> you, 7 -> certain, 1 -> then, 4 -> mean-01, 11 -> some, 14 -> i, 6 -> condition, 9 -> even, 0 -> contrast-01, 16 -> diagnose-01, 10 -> symptom, 3 -> have-03, 13 -> proper),Map(e -> even, h -> have-03, s2 -> some, h2 -> have-03, t -> then, s -> symptom, d -> diagnose-01, m -> mean-01, p -> proper, y -> you, c3 -> certain, a -> and, t2 -> thing, i -> i, h3 -> have-03, c -> contrast-01, c2 -> condition))),[Ljava.lang.String;@7aaca91a,Annotation([Ljava.lang.String;@44c73c26,[Ljava.lang.String;@41005828,[Ljava.lang.String;@60b4beb4),Annotation([Ljava.lang.String;@7fcf2fc1,[Ljava.lang.String;@2141a12,[Ledu.cmu.lti.nlp.amr.Dependency;@4196c360),Annotation([Ljava.lang.String;@41294f8,[Ljava.lang.String;@225129c,[Ljava.lang.String;@20435c40),Annotation([Ljava.lang.String;@573906eb,[Ljava.lang.String;@479ceda0,[Ledu.cmu.lti.nlp.amr.Entity;@6d07a63d))
AMR:
(a / and, op, h2 / have-03)
(a / and, op, h3 / have-03)
(c / contrast-01, ARG1, t / then)
(c / contrast-01, ARG2, a / and)
(c2 / condition, mod, c3 / certain)
(d / diagnose-01, ARG2, t2 / thing)
(h / have-03, ARG0, y / you)
(h / have-03, ARG1, c2 / condition)
(h2 / have-03, ARG1, t2 / thing)
(h3 / have-03, ARG1, s / symptom)
(h3 / have-03, ARG6, i / i)
(h3 / have-03, mod, e / even)
(m / mean-01, ARG0, s / symptom)
(m / mean-01, ARG1, h / have-03)
(s / symptom, quant, s2 / some)
(t2 / thing, mod, p / proper)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.1
WARNING: makeIds can't find span Id: 0.0.1.2.1.1
WARNING: makeIds can't find span Id: 0.0.1.2.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.2.1.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.1
Decoded in 1,348,312 microseconds
Sentence: I walk on my toes not as much since years of being told not to.

Oracle Span 1:  I => i
Oracle Span 2:  much => much
Oracle Span 3:  toes => toe
Oracle Span 4:  told => tell-01
Oracle Span 5:  walk => walk-01
Oracle Span 6:  years => (temporal-quantity :unit year)
Spans:
Span 0-1:  I => i
Span 7-8:  much => much
Span 4-5:  toes => toe
Span 12-13:  told => tell-01
Span 1-2:  walk => walk-01
Span 9-10:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 7-8:  much => much
Oracle Span 4-5:  toes => toe
Oracle Span 12-13:  told => tell-01
Oracle Span 1-2:  walk => walk-01
Oracle Span 9-10:  years => (temporal-quantity :unit year)

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	walk	_	VBP	VBP	_	0	root	_	_
3	on	_	IN	IN	_	2	prep	_	_
4	my	_	PRP$	PRP$	_	5	poss	_	_
5	toes	_	NNS	NNS	_	3	pobj	_	_
6	not	_	RB	RB	_	8	dep	_	_
7	as	_	RB	RB	_	8	advmod	_	_
8	much	_	RB	RB	_	2	advmod	_	_
9	since	_	IN	IN	_	8	prep	_	_
10	years	_	NNS	NNS	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	being	_	VBG	VBG	_	13	auxpass	_	_
13	told	_	VBN	VBN	_	11	pcomp	_	_
14	not	_	RB	RB	_	15	neg	_	_
15	to	_	TO	TO	_	13	xcomp	_	_
16	.	_	.	.	_	2	punct	_	_

Oracle:
(i / i, part, t3 / toe)
(t / tell-01, ARG1, w2 / walk-01)
(t / tell-01, ARG2, i / i)
(t4 / temporal-quantity, unit, y / year)
(w2 / walk-01, prep-on, t3 / toe)

Input(Some(Graph((cause-01 :ARG0 (tell-01 :duration (multiple :op (temporal-quantity :unit year :quant 1)) :ARG2 i :ARG1 (walk-01 :prep-on (toe :part-of i) :polarity -)) :ARG1 (walk-01 :prep-on (toe :part-of i) :frequency (much :polarity -) :ARG0 i)),ArrayBuffer(Span(12,13,List(0),told,tell-01,false), Span(9,10,List(1, 2),years,(temporal-quantity :unit year),false), Span(0,1,List(3),I,i,false), Span(1,2,List(4),walk,walk-01,false), Span(4,5,List(5),toes,toe,false), Span(7,8,List(6),much,much,false)),Map(2 -> year, 5 -> toe, 1 -> temporal-quantity, 4 -> walk-01, 6 -> much, 0 -> tell-01, 3 -> i),Map(t4 -> temporal-quantity, t -> tell-01, m -> much, t3 -> toe, y -> year, w2 -> walk-01, i -> i))),[Ljava.lang.String;@571c5681,Annotation([Ljava.lang.String;@488d1cd7,[Ljava.lang.String;@68dc098b,[Ljava.lang.String;@38ba6ce3),Annotation([Ljava.lang.String;@d278d2b,[Ljava.lang.String;@2d6c53fc,[Ledu.cmu.lti.nlp.amr.Dependency;@25f4878b),Annotation([Ljava.lang.String;@4e423aa2,[Ljava.lang.String;@7fbdb894,[Ljava.lang.String;@3081f72c),Annotation([Ljava.lang.String;@3148f668,[Ljava.lang.String;@6e005dc9,[Ledu.cmu.lti.nlp.amr.Entity;@7ceb3185))
AMR:
(m / much, domain, i / i)
(t / tell-01, ARG1, t4 / temporal-quantity)
(t4 / temporal-quantity, unit, y / year)
(w2 / walk-01, ARG0, i / i)
(w2 / walk-01, ARG1, t4 / temporal-quantity)
(w2 / walk-01, medium, t3 / toe)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 105,071 microseconds
Sentence: I have dyspraxia.

Oracle Span 1:  dyspraxia => dyspraxia
Oracle Span 2:  have => have-03
Oracle Span 3:  I => i
Spans:
Span 2-3:  dyspraxia => dyspraxia
Span 1-2:  have => have-03
Span 0-1:  I => i

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  dyspraxia => dyspraxia
Oracle Span 1-2:  have => have-03
Oracle Span 0-1:  I => i

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	have	_	VBP	VBP	_	0	root	_	_
3	dyspraxia	_	NN	NN	_	2	dobj	_	_
4	.	_	.	.	_	2	punct	_	_

Oracle:
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, d / dyspraxia)

Input(Some(Graph((have-03 :ARG1 dyspraxia :ARG0 i),ArrayBuffer(Span(1,2,List(0),have,have-03,false), Span(2,3,List(1),dyspraxia,dyspraxia,false), Span(0,1,List(2),I,i,false)),Map(2 -> i, 1 -> dyspraxia, 0 -> have-03),Map(h -> have-03, d -> dyspraxia, i -> i))),[Ljava.lang.String;@436c81a3,Annotation([Ljava.lang.String;@3561c410,[Ljava.lang.String;@59e32960,[Ljava.lang.String;@7c214cc0),Annotation([Ljava.lang.String;@5b67bb7e,[Ljava.lang.String;@609db546,[Ledu.cmu.lti.nlp.amr.Dependency;@20f5281c),Annotation([Ljava.lang.String;@56c4278e,[Ljava.lang.String;@301eda63,[Ljava.lang.String;@3d246ea3),Annotation([Ljava.lang.String;@341814d3,[Ljava.lang.String;@4397ad89,[Ledu.cmu.lti.nlp.amr.Entity;@59cba5a))
AMR:
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, d / dyspraxia)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 7,165 microseconds
Sentence: So maybe you are dyspraxic or have short tendons.

Oracle Span 1:  dyspraxic => dyspraxic
Oracle Span 2:  have => have-03
Oracle Span 3:  or => or
Oracle Span 4:  short => short
Oracle Span 5:  So => so
Oracle Span 6:  tendons => tendon
Oracle Span 7:  you => you
Spans:
Span 4-5:  dyspraxic => dyspraxic
Span 6-7:  have => have-03
Span 5-6:  or => or
Span 7-8:  short => short
Span 0-1:  So => so
Span 8-9:  tendons => tendon
Span 2-3:  you => you

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 4-5:  dyspraxic => dyspraxic
Oracle Span 6-7:  have => have-03
Oracle Span 5-6:  or => or
Oracle Span 7-8:  short => short
Oracle Span 0-1:  So => so
Oracle Span 8-9:  tendons => tendon
Oracle Span 2-3:  you => you

Dependencies:
1	So	_	IN	IN	_	5	dep	_	_
2	maybe	_	RB	RB	_	5	advmod	_	_
3	you	_	PRP	PRP	_	5	nsubj	_	_
4	are	_	VBP	VBP	_	5	cop	_	_
5	dyspraxic	_	JJ	JJ	_	0	root	_	_
6	or	_	CC	CC	_	5	cc	_	_
7	have	_	VBP	VBP	_	5	conj	_	_
8	short	_	JJ	JJ	_	9	amod	_	_
9	tendons	_	NNS	NNS	_	7	dobj	_	_
10	.	_	.	.	_	5	punct	_	_

Oracle:
(d / dyspraxic, domain, y / you)
(h / have-03, ARG0, y / you)
(h / have-03, ARG1, t / tendon)
(o / or, op, d / dyspraxic)
(o / or, op, h / have-03)
(t / tendon, mod, s2 / short)

Input(Some(Graph((possible :mod so :domain (or :op (have-03 :ARG1 (tendon :mod short) :ARG0 you) :op (dyspraxic :domain you))),ArrayBuffer(Span(0,1,List(0),So,so,false), Span(5,6,List(1),or,or,false), Span(6,7,List(2),have,have-03,false), Span(8,9,List(3),tendons,tendon,false), Span(7,8,List(4),short,short,false), Span(2,3,List(5),you,you,false), Span(4,5,List(6),dyspraxic,dyspraxic,false)),Map(2 -> have-03, 5 -> you, 1 -> or, 4 -> short, 6 -> dyspraxic, 0 -> so, 3 -> tendon),Map(h -> have-03, s2 -> short, t -> tendon, s -> so, d -> dyspraxic, y -> you, o -> or))),[Ljava.lang.String;@1bd39d3c,Annotation([Ljava.lang.String;@6f19ac19,[Ljava.lang.String;@119cbf96,[Ljava.lang.String;@71329995),Annotation([Ljava.lang.String;@768fc0f2,[Ljava.lang.String;@5454d35e,[Ledu.cmu.lti.nlp.amr.Dependency;@20c0a64d),Annotation([Ljava.lang.String;@455b6df1,[Ljava.lang.String;@4ddbbdf8,[Ljava.lang.String;@3f67593e),Annotation([Ljava.lang.String;@1ab06251,[Ljava.lang.String;@41ab013,[Ledu.cmu.lti.nlp.amr.Entity;@14bee915))
AMR:
(d / dyspraxic, calendar, t / tendon)
(d / dyspraxic, domain, y / you)
(h / have-03, ARG1, t / tendon)
(h / have-03, ARG6, s / so)
(o / or, op, h / have-03)
(t / tendon, mod, s2 / short)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 96,623 microseconds
Sentence: People who do dance/ gymnastics/ ballet etc have it drilled into them, to the point where I find it more comfortable now =P

Oracle Span 1:  ballet => ballet
Oracle Span 2:  comfortable => comfortable
Oracle Span 3:  dance => dance-01
Oracle Span 4:  do => (person :ARG0-of do-02)
Oracle Span 5:  drilled => drill-02
Oracle Span 6:  find => find-02
Oracle Span 7:  gymnastics => gymnastics
Oracle Span 8:  it => it
Oracle Span 9:  more => more
Oracle Span 10:  now => now
Spans:
Span 7-8:  ballet => ballet
Span 23-24:  comfortable => comfortable
Span 3-4:  dance => dance-01
Span 2-3:  do => (person :ARG0-of do-02)
Span 11-12:  drilled => drill-02
Span 20-21:  find => find-02
Span 5-6:  gymnastics => gymnastics
Span 10-11:  it => it
Span 22-23:  more => more
Span 24-25:  now => now

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 7-8:  ballet => ballet
Oracle Span 23-24:  comfortable => comfortable
Oracle Span 3-4:  dance => dance-01
Oracle Span 2-3:  do => (person :ARG0-of do-02)
Oracle Span 11-12:  drilled => drill-02
Oracle Span 20-21:  find => find-02
Oracle Span 5-6:  gymnastics => gymnastics
Oracle Span 10-11:  it => it
Oracle Span 22-23:  more => more
Oracle Span 24-25:  now => now

Dependencies:
1	People	_	NNS	NNS	_	0	root	_	_
2	who	_	WP	WP	_	3	nsubj	_	_
3	do	_	VBP	VBP	_	1	rcmod	_	_
4	dance	_	NN	NN	_	27	nsubj	_	_
5	/	_	FW	FW	_	4	nn	_	_
6	gymnastics	_	FW	FW	_	4	nn	_	_
7	/	_	FW	FW	_	4	nn	_	_
8	ballet	_	FW	FW	_	4	nn	_	_
9	etc	_	FW	FW	_	4	conj	_	_
10	have	_	VBP	VBP	_	4	rcmod	_	_
11	it	_	PRP	PRP	_	12	nsubj	_	_
12	drilled	_	VBN	VBN	_	10	ccomp	_	_
13	into	_	IN	IN	_	12	prep	_	_
14	them	_	PRP	PRP	_	13	pobj	_	_
15	,	_	,	,	_	12	punct	_	_
16	to	_	TO	TO	_	12	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	point	_	NN	NN	_	16	pobj	_	_
19	where	_	WRB	WRB	_	21	advmod	_	_
20	I	_	PRP	PRP	_	21	nsubj	_	_
21	find	_	VBP	VBP	_	18	rcmod	_	_
22	it	_	PRP	PRP	_	24	nsubj	_	_
23	more	_	RBR	RBR	_	24	advmod	_	_
24	comfortable	_	JJ	JJ	_	21	xcomp	_	_
25	now	_	RB	RB	_	24	advmod	_	_
26	=	_	SYM	SYM	_	27	dep	_	_
27	P	_	NNP	NNP	_	3	ccomp	_	_

Oracle:
(c / comfortable, degree, m / more)
(c / comfortable, domain, i / it)
(c / comfortable, time, n / now)
(d / drill-02, ARG1, p / person)
(d / drill-02, ARG2, i / it)
(d / drill-02, extent, f / find-02)
(d2 / do-02, ARG0, p / person)
(f / find-02, ARG0, i / it)
(f / find-02, ARG1, c / comfortable)

Input(Some(Graph((drill-02 :extent (find-02 :ARG1 (comfortable :time now :degree more :domain it) :ARG0 it) :ARG2 it :ARG1 (person :ARG0-of (do-02 :ARG1 (slash :op dance-01 :op gymnastics :op ballet :op et-cetera)))),ArrayBuffer(Span(11,12,List(0),drilled,drill-02,false), Span(20,21,List(1),find,find-02,false), Span(23,24,List(2),comfortable,comfortable,false), Span(24,25,List(3),now,now,false), Span(22,23,List(4),more,more,false), Span(10,11,List(5),it,it,false), Span(2,3,List(6, 7),do,(person :ARG0-of do-02),false), Span(3,4,List(8),dance,dance-01,false), Span(5,6,List(9),gymnastics,gymnastics,false), Span(7,8,List(10),ballet,ballet,false)),Map(2 -> comfortable, 5 -> it, 8 -> dance-01, 7 -> do-02, 1 -> find-02, 4 -> more, 6 -> person, 9 -> gymnastics, 0 -> drill-02, 10 -> ballet, 3 -> now),Map(n -> now, b -> ballet, d3 -> dance-01, m -> more, d -> drill-02, g -> gymnastics, p -> person, d2 -> do-02, i -> it, c -> comfortable, f -> find-02))),[Ljava.lang.String;@1115ec15,Annotation([Ljava.lang.String;@82ea68c,[Ljava.lang.String;@59e505b2,[Ljava.lang.String;@3af0a9da),Annotation([Ljava.lang.String;@43b9fd5,[Ljava.lang.String;@79dc5318,[Ledu.cmu.lti.nlp.amr.Dependency;@8e50104),Annotation([Ljava.lang.String;@37e4d7bb,[Ljava.lang.String;@6f7923a5,[Ljava.lang.String;@74a6f9c1),Annotation([Ljava.lang.String;@54eb2b70,[Ljava.lang.String;@45a37759,[Ledu.cmu.lti.nlp.amr.Entity;@63611043))
AMR:
(c / comfortable, degree, m / more)
(d / drill-02, ARG0, i / it)
(d / drill-02, ARG1, d3 / dance-01)
(d2 / do-02, ARG0, p / person)
(d2 / do-02, ARG1, d3 / dance-01)
(d3 / dance-01, ARG0, n / now)
(d3 / dance-01, ARG1, b / ballet)
(d3 / dance-01, ARG6, g / gymnastics)
(f / find-02, ARG1, c / comfortable)
(f / find-02, ARG6, n / now)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.2
Decoded in 399,713 microseconds
Sentence: I wouldn't read too much into random "symptoms" like that

Oracle Span 1:  I => i
Oracle Span 2:  much => much
Oracle Span 3:  random => random
Oracle Span 4:  read => read-01
Oracle Span 5:  symptoms => symptom
Oracle Span 6:  that => that
Oracle Span 7:  too => too
Spans:
Span 0-1:  I => i
Span 5-6:  much => much
Span 7-8:  random => random
Span 3-4:  read => read-01
Span 9-10:  symptoms => symptom
Span 12-13:  that => that
Span 4-5:  too => too

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 5-6:  much => much
Oracle Span 7-8:  random => random
Oracle Span 3-4:  read => read-01
Oracle Span 9-10:  symptoms => symptom
Oracle Span 12-13:  that => that
Oracle Span 4-5:  too => too

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	would	_	MD	MD	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	read	_	VB	VB	_	0	root	_	_
5	too	_	RB	RB	_	6	advmod	_	_
6	much	_	RB	RB	_	4	advmod	_	_
7	into	_	IN	IN	_	4	prep	_	_
8	random	_	JJ	JJ	_	10	amod	_	_
9	"	_	``	``	_	10	punct	_	_
10	symptoms	_	NNS	NNS	_	7	pobj	_	_
11	"	_	''	''	_	10	punct	_	_
12	like	_	IN	IN	_	10	prep	_	_
13	that	_	DT	DT	_	12	pobj	_	_

Oracle:
(m / much, degree, t / too)
(r / read-01, ARG0, i / i)
(r / read-01, ARG2, s / symptom)
(r / read-01, mod, m / much)
(s / symptom, mod, r2 / random)

Input(Some(Graph((read-01 :mod (much :degree too) :ARG2 (symptom :ARG1-of (resemble-01 :ARG2 that) :mod random) :ARG0 i :polarity -),ArrayBuffer(Span(3,4,List(0),read,read-01,false), Span(5,6,List(1),much,much,false), Span(4,5,List(2),too,too,false), Span(9,10,List(3),symptoms,symptom,false), Span(12,13,List(4),that,that,false), Span(7,8,List(5),random,random,false), Span(0,1,List(6),I,i,false)),Map(2 -> too, 5 -> random, 1 -> much, 4 -> that, 6 -> i, 0 -> read-01, 3 -> symptom),Map(t -> too, s -> symptom, m -> much, r2 -> random, t2 -> that, i -> i, r -> read-01))),[Ljava.lang.String;@20ca951f,Annotation([Ljava.lang.String;@2d778add,[Ljava.lang.String;@73302995,[Ljava.lang.String;@1838ccb8),Annotation([Ljava.lang.String;@6c2ed0cd,[Ljava.lang.String;@7d9e8ef7,[Ledu.cmu.lti.nlp.amr.Dependency;@f107c50),Annotation([Ljava.lang.String;@51133c06,[Ljava.lang.String;@4b213651,[Ljava.lang.String;@4241e0f4),Annotation([Ljava.lang.String;@4ebff610,[Ljava.lang.String;@60410cd,[Ledu.cmu.lti.nlp.amr.Entity;@44d52de2))
AMR:
(r / read-01, ARG0, i / i)
(r / read-01, ARG1, s / symptom)
(r / read-01, ARG6, t / too)
(r / read-01, degree, m / much)
(s / symptom, calendar, t2 / that)
(s / symptom, mod, r2 / random)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 76,170 microseconds
Sentence: hello, i am a 12 year old girl (13 in two days) who is addicted to self harming

Oracle Span 1:  12 => 12
Oracle Span 2:  13 => 13
Oracle Span 3:  addicted => addict-01
Oracle Span 4:  days => (temporal-quantity :unit day)
Oracle Span 5:  girl => girl
Oracle Span 6:  harming => harm-01
Oracle Span 7:  hello => hello
Oracle Span 8:  i => i
Oracle Span 9:  self => self
Oracle Span 10:  two => 2
Oracle Span 11:  year => (temporal-quantity :unit year)
Spans:
Span 5-6:  12 => 12
Span 10-11:  13 => 13
Span 17-18:  addicted => addict-01
Span 13-14:  days => (temporal-quantity :unit day)
Span 8-9:  girl => girl
Span 20-21:  harming => harm-01
Span 0-1:  hello => hello
Span 2-3:  i => i
Span 19-20:  self => self
Span 12-13:  two => 2
Span 6-7:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 5-6:  12 => 12
Oracle Span 10-11:  13 => 13
Oracle Span 17-18:  addicted => addict-01
Oracle Span 13-14:  days => (temporal-quantity :unit day)
Oracle Span 8-9:  girl => girl
Oracle Span 20-21:  harming => harm-01
Oracle Span 0-1:  hello => hello
Oracle Span 2-3:  i => i
Oracle Span 19-20:  self => self
Oracle Span 12-13:  two => 2
Oracle Span 6-7:  year => (temporal-quantity :unit year)

Dependencies:
1	hello	_	RB	RB	_	9	advmod	_	_
2	,	_	,	,	_	9	punct	_	_
3	i	_	FW	FW	_	9	nsubj	_	_
4	am	_	VBP	VBP	_	9	cop	_	_
5	a	_	DT	DT	_	9	det	_	_
6	12	_	CD	CD	_	8	number	_	_
7	year	_	NN	NN	_	8	npadvmod	_	_
8	old	_	JJ	JJ	_	9	amod	_	_
9	girl	_	NN	NN	_	0	root	_	_
10	(	_	(	(	_	11	punct	_	_
11	13	_	CD	CD	_	9	dep	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	two	_	CD	CD	_	14	num	_	_
14	days	_	NNS	NNS	_	12	pobj	_	_
15	)	_	)	)	_	11	punct	_	_
16	who	_	WP	WP	_	18	nsubjpass	_	_
17	is	_	VBZ	VBZ	_	18	auxpass	_	_
18	addicted	_	VBN	VBN	_	9	rcmod	_	_
19	to	_	TO	TO	_	18	prep	_	_
20	self	_	NN	NN	_	21	nn	_	_
21	harming	_	NN	NN	_	19	pobj	_	_

Oracle:
(a2 / addict-01, ARG1, g / girl)
(a2 / addict-01, ARG2, h / harm-01)
(g / girl, age, t2 / temporal-quantity)
(g / girl, domain, i / i)
(h / harm-01, ARG1, s / self)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, d2 / day)
(t2 / temporal-quantity, quant, 1 / 12)
(t2 / temporal-quantity, unit, y / year)

Input(Some(Graph((multi-sentence :snt1 hello :snt2 (girl :domain i :ARG1-of (addict-01 :ARG2 (harm-01 :ARG1 self)) :age (temporal-quantity :ARG0-of (mean-01 :ARG1 (age-01 :ARG2 (temporal-quantity :quant 13 :unit year) :time (after :op now :quant (temporal-quantity :unit day :quant 2)))) :unit year :quant 12))),ArrayBuffer(Span(0,1,List(0),hello,hello,false), Span(8,9,List(1),girl,girl,false), Span(2,3,List(2),i,i,false), Span(17,18,List(3),addicted,addict-01,false), Span(20,21,List(4),harming,harm-01,false), Span(19,20,List(5),self,self,false), Span(5,6,List(6),12,12,false), Span(6,7,List(7, 8),year,(temporal-quantity :unit year),false), Span(10,11,List(9),13,13,false), Span(12,13,List(10),two,2,false), Span(13,14,List(11, 12),days,(temporal-quantity :unit day),false)),Map(2 -> i, 5 -> self, 12 -> day, 8 -> year, 7 -> temporal-quantity, 1 -> girl, 4 -> harm-01, 11 -> temporal-quantity, 6 -> 12, 9 -> 13, 0 -> hello, 10 -> 2, 3 -> addict-01),Map(h -> harm-01, 2 -> 2, h2 -> hello, 12 -> 13, t -> temporal-quantity, s -> self, 1 -> 12, y -> year, g -> girl, d2 -> day, t2 -> temporal-quantity, a2 -> addict-01, i -> i))),[Ljava.lang.String;@95e33cc,Annotation([Ljava.lang.String;@38604b81,[Ljava.lang.String;@1e44b638,[Ljava.lang.String;@7393222f),Annotation([Ljava.lang.String;@babafc2,[Ljava.lang.String;@31add175,[Ledu.cmu.lti.nlp.amr.Dependency;@ae3540e),Annotation([Ljava.lang.String;@600b9d27,[Ljava.lang.String;@3688eb5b,[Ljava.lang.String;@69f1a286),Annotation([Ljava.lang.String;@7922d892,[Ljava.lang.String;@457c9034,[Ledu.cmu.lti.nlp.amr.Entity;@345f69f3))
AMR:
(12 / 13, calendar, g / girl)
(a2 / addict-01, ARG0, t / temporal-quantity)
(a2 / addict-01, ARG1, h / harm-01)
(a2 / addict-01, ARG6, 12 / 13)
(g / girl, mod, t2 / temporal-quantity)
(h / harm-01, ARG0, h2 / hello)
(h / harm-01, ARG1, s / self)
(i / i, calendar, h2 / hello)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, d2 / day)
(t2 / temporal-quantity, quant, 1 / 12)
(t2 / temporal-quantity, unit, y / year)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.2.0.1.1.1
Decoded in 235,541 microseconds
Sentence: i started when i was seven as i slit each firnger indevidually with sissors, and from that day i never stopped,

Oracle Span 1:  and => and
Oracle Span 2:  day => day
Oracle Span 3:  each => each
Oracle Span 4:  from => from
Oracle Span 5:  i => i
Oracle Span 6:  seven => 7
Oracle Span 7:  slit => slit-01
Oracle Span 8:  started => start-01
Oracle Span 9:  stopped => stop-01
Oracle Span 10:  that => that
Spans:
Span 15-16:  and => and
Span 18-19:  day => day
Span 9-10:  each => each
Span 16-17:  from => from
Span 0-1:  i => i
Span 5-6:  seven => 7
Span 8-9:  slit => slit-01
Span 1-2:  started => start-01
Span 21-22:  stopped => stop-01
Span 17-18:  that => that

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 15-16:  and => and
Oracle Span 18-19:  day => day
Oracle Span 9-10:  each => each
Oracle Span 16-17:  from => from
Oracle Span 0-1:  i => i
Oracle Span 5-6:  seven => 7
Oracle Span 8-9:  slit => slit-01
Oracle Span 1-2:  started => start-01
Oracle Span 21-22:  stopped => stop-01
Oracle Span 17-18:  that => that

Dependencies:
1	i	_	FW	FW	_	2	nsubj	_	_
2	started	_	VBD	VBD	_	0	root	_	_
3	when	_	WRB	WRB	_	6	advmod	_	_
4	i	_	FW	FW	_	6	nsubj	_	_
5	was	_	VBD	VBD	_	6	cop	_	_
6	seven	_	CD	CD	_	2	advcl	_	_
7	as	_	IN	IN	_	9	mark	_	_
8	i	_	FW	FW	_	9	nsubj	_	_
9	slit	_	VBP	VBP	_	6	advcl	_	_
10	each	_	DT	DT	_	12	det	_	_
11	firnger	_	NN	NN	_	12	nn	_	_
12	indevidually	_	NN	NN	_	9	dobj	_	_
13	with	_	IN	IN	_	9	prep	_	_
14	sissors	_	NNS	NNS	_	13	pobj	_	_
15	,	_	,	,	_	9	punct	_	_
16	and	_	CC	CC	_	9	cc	_	_
17	from	_	IN	IN	_	22	prep	_	_
18	that	_	WDT	WDT	_	19	det	_	_
19	day	_	NN	NN	_	17	pobj	_	_
20	i	_	FW	FW	_	22	nsubj	_	_
21	never	_	RB	RB	_	22	neg	_	_
22	stopped	_	VBD	VBD	_	9	conj	_	_
23	,	_	,	,	_	2	punct	_	_

Oracle:
(a2 / and, op, s / start-01)
(a2 / and, op, s4 / stop-01)
(d / day, mod, t2 / that)
(f2 / from, op, d / day)
(s / start-01, ARG0, i / i)
(s / start-01, ARG2, s2 / slit-01)
(s2 / slit-01, ARG0, i / i)
(s4 / stop-01, ARG0, i / i)
(s4 / stop-01, time, f2 / from)

Input(Some(Graph((and :op (stop-01 :time (from :op (day :mod that)) :time ever :polarity - :ARG0 i) :op (start-01 :time (age-01 :ARG2 (temporal-quantity :quant 7 :unit year) :ARG1 i) :ARG2 (slit-01 :ARG3 scissors :ARG1 (finger :mod each :mod individual) :ARG0 i) :ARG0 i)),ArrayBuffer(Span(15,16,List(0),and,and,false), Span(21,22,List(1),stopped,stop-01,false), Span(16,17,List(2),from,from,false), Span(18,19,List(3),day,day,false), Span(17,18,List(4),that,that,false), Span(1,2,List(5),started,start-01,false), Span(5,6,List(6),seven,7,false), Span(8,9,List(7),slit,slit-01,false), Span(9,10,List(8),each,each,false), Span(0,1,List(9),i,i,false)),Map(2 -> from, 5 -> start-01, 8 -> each, 7 -> slit-01, 1 -> stop-01, 4 -> that, 6 -> 7, 9 -> i, 0 -> and, 3 -> day),Map(e -> each, s2 -> slit-01, s -> start-01, s4 -> stop-01, 7 -> 7, d -> day, t2 -> that, i -> i, a2 -> and, f2 -> from))),[Ljava.lang.String;@50de186c,Annotation([Ljava.lang.String;@3f57bcad,[Ljava.lang.String;@1e8b7643,[Ljava.lang.String;@51549490),Annotation([Ljava.lang.String;@71e9ebae,[Ljava.lang.String;@73d983ea,[Ledu.cmu.lti.nlp.amr.Dependency;@36a5cabc),Annotation([Ljava.lang.String;@432038ec,[Ljava.lang.String;@7daa0fbd,[Ljava.lang.String;@42530531),Annotation([Ljava.lang.String;@5a3bc7ed,[Ljava.lang.String;@181e731e,[Ledu.cmu.lti.nlp.amr.Entity;@35645047))
AMR:
(a2 / and, op, s2 / slit-01)
(a2 / and, op, s4 / stop-01)
(f2 / from, calendar, t2 / that)
(s / start-01, ARG1, 7 / 7)
(s / start-01, ARG6, i / i)
(s2 / slit-01, ARG1, 7 / 7)
(s2 / slit-01, ARG6, e / each)
(s4 / stop-01, ARG1, d / day)
(s4 / stop-01, ARG6, f2 / from)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 226,393 microseconds
Sentence: it has got worse as i have a scar on my leg as i slit in my ex boyfriends name with stables,as i wont stop cutting unless i bleed,

Oracle Span 1:  bleed => bleed-01
Oracle Span 2:  boyfriends => boyfriend
Oracle Span 3:  cutting => cut-01
Oracle Span 4:  ex => ex
Oracle Span 5:  has => have-03
Oracle Span 6:  i => i
Oracle Span 7:  it => it
Oracle Span 8:  leg => leg
Oracle Span 9:  name => name
Oracle Span 10:  scar => scar-01
Oracle Span 11:  slit => slit-01
Oracle Span 12:  stop => stop-01
Oracle Span 13:  worse => worsen-01
Spans:
Span 30-31:  bleed => bleed-01
Span 18-19:  boyfriends => boyfriend
Span 27-28:  cutting => cut-01
Span 17-18:  ex => ex
Span 1-2:  has => have-03
Span 5-6:  i => i
Span 0-1:  it => it
Span 11-12:  leg => leg
Span 19-20:  name => name
Span 8-9:  scar => scar-01
Span 14-15:  slit => slit-01
Span 26-27:  stop => stop-01
Span 3-4:  worse => worsen-01

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Oracle Span 30-31:  bleed => bleed-01
Oracle Span 18-19:  boyfriends => boyfriend
Oracle Span 27-28:  cutting => cut-01
Oracle Span 17-18:  ex => ex
Oracle Span 1-2:  has => have-03
Oracle Span 5-6:  i => i
Oracle Span 0-1:  it => it
Oracle Span 11-12:  leg => leg
Oracle Span 19-20:  name => name
Oracle Span 8-9:  scar => scar-01
Oracle Span 14-15:  slit => slit-01
Oracle Span 26-27:  stop => stop-01
Oracle Span 3-4:  worse => worsen-01

Dependencies:
1	it	_	PRP	PRP	_	3	nsubj	_	_
2	has	_	VBZ	VBZ	_	3	aux	_	_
3	got	_	VBN	VBN	_	0	root	_	_
4	worse	_	RBR	RBR	_	3	dep	_	_
5	as	_	IN	IN	_	7	mark	_	_
6	i	_	FW	FW	_	7	nsubj	_	_
7	have	_	VBP	VBP	_	3	advcl	_	_
8	a	_	DT	DT	_	9	det	_	_
9	scar	_	NN	NN	_	7	dobj	_	_
10	on	_	IN	IN	_	9	prep	_	_
11	my	_	PRP$	PRP$	_	12	poss	_	_
12	leg	_	NN	NN	_	10	pobj	_	_
13	as	_	IN	IN	_	12	prep	_	_
14	i	_	JJ	JJ	_	15	amod	_	_
15	slit	_	NN	NN	_	13	pobj	_	_
16	in	_	IN	IN	_	15	prep	_	_
17	my	_	PRP$	PRP$	_	20	poss	_	_
18	ex	_	JJ	JJ	_	20	amod	_	_
19	boyfriends	_	NNS	NNS	_	20	nn	_	_
20	name	_	NN	NN	_	16	pobj	_	_
21	with	_	IN	IN	_	7	prep	_	_
22	stables	_	NNS	NNS	_	21	pobj	_	_
23	,	_	,	,	_	22	punct	_	_
24	as	_	IN	IN	_	27	mark	_	_
25	i	_	JJ	JJ	_	26	amod	_	_
26	wont	_	NN	NN	_	27	nsubj	_	_
27	stop	_	VBP	VBP	_	22	rcmod	_	_
28	cutting	_	VBG	VBG	_	27	xcomp	_	_
29	unless	_	IN	IN	_	31	mark	_	_
30	i	_	FW	FW	_	31	nsubj	_	_
31	bleed	_	VB	VB	_	28	advcl	_	_
32	,	_	,	,	_	22	punct	_	_

Oracle:
(b / boyfriend, mod, e / ex)
(b / boyfriend, poss, i2 / i)
(b2 / bleed-01, ARG0, i2 / i)
(h / have-03, ARG0, i2 / i)
(h / have-03, ARG1, s / scar-01)
(i2 / i, part, l / leg)
(n / name, poss, b / boyfriend)
(s / scar-01, ARG1, l / leg)
(s2 / slit-01, ARG0, i2 / i)
(s2 / slit-01, ARG1, l / leg)
(s2 / slit-01, topic, n / name)
(s4 / stop-01, ARG0, i2 / i)
(s4 / stop-01, ARG1, c4 / cut-01)
(s4 / stop-01, condition, b2 / bleed-01)
(w / worsen-01, ARG1, i / it)

Input(Some(Graph((worsen-01 :ARG1-of (cause-01 :ARG0 (have-03 :ARG1 (scar-01 :ARG1-of (cause-01 :ARG0 (slit-01 :ARG1-of (cause-01 :ARG0 (stop-01 :condition (bleed-01 :ARG0 i) :ARG1 cut-01 :polarity - :ARG0 i)) :topic (name :poss (boyfriend :mod ex :poss i)) :ARG3 staple :ARG0 i :ARG1 leg)) :ARG1 (leg :part-of i)) :ARG0 i)) :ARG1 it),ArrayBuffer(Span(0,1,List(0),it,it,false), Span(1,2,List(1),has,have-03,false), Span(8,9,List(2),scar,scar-01,false), Span(14,15,List(3),slit,slit-01,false), Span(26,27,List(4),stop,stop-01,false), Span(30,31,List(5),bleed,bleed-01,false), Span(27,28,List(6),cutting,cut-01,false), Span(19,20,List(7),name,name,false), Span(18,19,List(8),boyfriends,boyfriend,false), Span(17,18,List(9),ex,ex,false), Span(11,12,List(10),leg,leg,false), Span(5,6,List(11),i,i,false), Span(3,4,List(12),worse,worsen-01,false)),Map(2 -> scar-01, 5 -> bleed-01, 12 -> worsen-01, 8 -> boyfriend, 7 -> name, 1 -> have-03, 4 -> stop-01, 11 -> i, 6 -> cut-01, 9 -> ex, 0 -> it, 10 -> leg, 3 -> slit-01),Map(e -> ex, w -> worsen-01, n -> name, h -> have-03, s2 -> slit-01, b -> boyfriend, b2 -> bleed-01, c4 -> cut-01, s -> scar-01, s4 -> stop-01, i2 -> i, i -> it, l -> leg))),[Ljava.lang.String;@6f44a157,Annotation([Ljava.lang.String;@6bc407fd,[Ljava.lang.String;@291f18,[Ljava.lang.String;@17d88132),Annotation([Ljava.lang.String;@5ddcc487,[Ljava.lang.String;@16eccb2e,[Ledu.cmu.lti.nlp.amr.Dependency;@5ef5c734),Annotation([Ljava.lang.String;@d771cc9,[Ljava.lang.String;@36b4091c,[Ljava.lang.String;@4671115f),Annotation([Ljava.lang.String;@36cda2c2,[Ljava.lang.String;@3697186,[Ledu.cmu.lti.nlp.amr.Entity;@1583741e))
AMR:
(b / boyfriend, name, n / name)
(b2 / bleed-01, ARG1, s / scar-01)
(c4 / cut-01, ARG1, b2 / bleed-01)
(h / have-03, ARG0, i / it)
(h / have-03, ARG1, w / worsen-01)
(s / scar-01, ARG0, l / leg)
(s / scar-01, ARG1, i2 / i)
(s2 / slit-01, ARG1, n / name)
(s2 / slit-01, part, l / leg)
(s4 / stop-01, ARG1, c4 / cut-01)
(w / worsen-01, ARG1, e / ex)
(w / worsen-01, ARG6, i2 / i)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.1.1.0.2.0.2
WARNING: makeIds can't find span Id: 0.1.0.1.1.0.2.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 803,170 microseconds
Sentence: i have sevral slits on my arm,

Oracle Span 1:  arm => arm
Oracle Span 2:  have => have-03
Oracle Span 3:  i => i
Oracle Span 4:  slits => slit
Spans:
Span 6-7:  arm => arm
Span 1-2:  have => have-03
Span 0-1:  i => i
Span 3-4:  slits => slit

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 6-7:  arm => arm
Oracle Span 1-2:  have => have-03
Oracle Span 0-1:  i => i
Oracle Span 3-4:  slits => slit

Dependencies:
1	i	_	FW	FW	_	2	nsubj	_	_
2	have	_	VBP	VBP	_	0	root	_	_
3	sevral	_	JJ	JJ	_	4	amod	_	_
4	slits	_	NNS	NNS	_	2	dobj	_	_
5	on	_	IN	IN	_	4	prep	_	_
6	my	_	PRP$	PRP$	_	7	poss	_	_
7	arm	_	NN	NN	_	5	pobj	_	_
8	,	_	,	,	_	2	punct	_	_

Oracle:
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, s / slit)
(i / i, part, a / arm)
(s / slit, location, a / arm)

Input(Some(Graph((have-03 :ARG1 (slit :quant several :location (arm :part-of i)) :ARG0 i),ArrayBuffer(Span(1,2,List(0),have,have-03,false), Span(3,4,List(1),slits,slit,false), Span(6,7,List(2),arm,arm,false), Span(0,1,List(3),i,i,false)),Map(2 -> arm, 1 -> slit, 0 -> have-03, 3 -> i),Map(h -> have-03, s -> slit, a -> arm, i -> i))),[Ljava.lang.String;@5b367418,Annotation([Ljava.lang.String;@36060e,[Ljava.lang.String;@481ba2cf,[Ljava.lang.String;@46b61c56),Annotation([Ljava.lang.String;@2e48362c,[Ljava.lang.String;@1efe439d,[Ledu.cmu.lti.nlp.amr.Dependency;@be68757),Annotation([Ljava.lang.String;@7d446ed1,[Ljava.lang.String;@12d2ce03,[Ljava.lang.String;@7e5c856f),Annotation([Ljava.lang.String;@413f69cc,[Ljava.lang.String;@1f53a5dc,[Ledu.cmu.lti.nlp.amr.Entity;@1b75c2e3))
AMR:
(h / have-03, ARG1, s / slit)
(h / have-03, ARG6, i / i)
(h / have-03, location, a / arm)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 48,384 microseconds
Sentence: they healed, then i cut myself with staples i robbed from school and a razor.

Oracle Span 1:  and => and
Oracle Span 2:  cut => cut-01
Oracle Span 3:  healed => heal-01
Oracle Span 4:  i => i
Oracle Span 5:  razor => razor
Oracle Span 6:  robbed => rob-01
Oracle Span 7:  school => school
Oracle Span 8:  staples => staple
Oracle Span 9:  then => then
Oracle Span 10:  they => they
Spans:
Span 13-14:  and => and
Span 5-6:  cut => cut-01
Span 1-2:  healed => heal-01
Span 4-5:  i => i
Span 15-16:  razor => razor
Span 10-11:  robbed => rob-01
Span 12-13:  school => school
Span 8-9:  staples => staple
Span 3-4:  then => then
Span 0-1:  they => they

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 5-6:  cut => cut-01
Oracle Span 1-2:  healed => heal-01
Oracle Span 4-5:  i => i
Oracle Span 15-16:  razor => razor
Oracle Span 10-11:  robbed => rob-01
Oracle Span 12-13:  school => school
Oracle Span 8-9:  staples => staple
Oracle Span 3-4:  then => then
Oracle Span 0-1:  they => they

Dependencies:
1	they	_	PRP	PRP	_	2	nsubj	_	_
2	healed	_	VBN	VBN	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	then	_	RB	RB	_	6	advmod	_	_
5	i	_	FW	FW	_	6	nsubj	_	_
6	cut	_	VBD	VBD	_	2	parataxis	_	_
7	myself	_	PRP	PRP	_	6	dobj	_	_
8	with	_	IN	IN	_	6	prep	_	_
9	staples	_	NNP	NNP	_	11	nn	_	_
10	i	_	FW	FW	_	11	nn	_	_
11	robbed	_	NNP	NNP	_	8	pobj	_	_
12	from	_	IN	IN	_	6	prep	_	_
13	school	_	NN	NN	_	12	pobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	a	_	DT	DT	_	16	det	_	_
16	razor	_	NN	NN	_	13	conj	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c / cut-01)
(a / and, op, h / heal-01)
(c / cut-01, ARG0, i / i)
(c / cut-01, ARG1, i / i)
(c / cut-01, mod, t2 / then)
(h / heal-01, ARG1, t / they)
(r / rob-01, ARG0, i / i)
(r / rob-01, ARG1, s2 / school)
(r / rob-01, ARG2, s / staple)

Input(Some(Graph((and :op (cut-01 :mod then :ARG3 (and :op (staple :ARG2-of (rob-01 :ARG1 school :ARG0 i)) :op razor) :ARG0 i :ARG1 i) :op (heal-01 :ARG1 they)),ArrayBuffer(Span(13,14,List(0),and,and,false), Span(5,6,List(1),cut,cut-01,false), Span(3,4,List(2),then,then,false), Span(8,9,List(3),staples,staple,false), Span(10,11,List(4),robbed,rob-01,false), Span(12,13,List(5),school,school,false), Span(15,16,List(6),razor,razor,false), Span(4,5,List(7),i,i,false), Span(1,2,List(8),healed,heal-01,false), Span(0,1,List(9),they,they,false)),Map(2 -> then, 5 -> school, 8 -> heal-01, 7 -> i, 1 -> cut-01, 4 -> rob-01, 6 -> razor, 9 -> they, 0 -> and, 3 -> staple),Map(h -> heal-01, t -> they, s2 -> school, s -> staple, r2 -> razor, a -> and, t2 -> then, i -> i, r -> rob-01, c -> cut-01))),[Ljava.lang.String;@1984b1f,Annotation([Ljava.lang.String;@3bd323e9,[Ljava.lang.String;@39ac0c0a,[Ljava.lang.String;@c7ba306),Annotation([Ljava.lang.String;@4ff8d125,[Ljava.lang.String;@6d167f58,[Ledu.cmu.lti.nlp.amr.Dependency;@3403e2ac),Annotation([Ljava.lang.String;@65b104b9,[Ljava.lang.String;@6c4980d3,[Ljava.lang.String;@327bcebd),Annotation([Ljava.lang.String;@19c65cdc,[Ljava.lang.String;@74bf1791,[Ledu.cmu.lti.nlp.amr.Entity;@54504ecd))
AMR:
(a / and, op, r2 / razor)
(a / and, op, s2 / school)
(c / cut-01, ARG0, a / and)
(c / cut-01, ARG1, i / i)
(c / cut-01, time, t2 / then)
(h / heal-01, ARG0, t / they)
(h / heal-01, ARG1, c / cut-01)
(r / rob-01, ARG1, a / and)
(r / rob-01, ARG6, s / staple)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 211,512 microseconds
Sentence: when i cant find anything to cut with i take around 5 paracetmols and other drugs and i take them with larger and vodka.

Oracle Span 1:  5 => 5
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  around => around
Oracle Span 6:  cut => (thing :instrument-of cut-01)
Oracle Span 7:  drugs => drug
Oracle Span 8:  find => find-01
Oracle Span 9:  i => i
Oracle Span 10:  other => other
Oracle Span 11:  paracetmols => paracetamol
Oracle Span 12:  take => take-01
Oracle Span 13:  take => take-01
Oracle Span 14:  vodka => vodka
Spans:
Span 11-12:  5 => 5
Span 13-14:  and => and
Span 16-17:  and => and
Span 22-23:  and => and
Span 10-11:  around => around
Span 6-7:  cut => (thing :instrument-of cut-01)
Span 15-16:  drugs => drug
Span 3-4:  find => find-01
Span 1-2:  i => i
Span 14-15:  other => other
Span 12-13:  paracetmols => paracetamol
Span 9-10:  take => take-01
Span 18-19:  take => take-01
Span 23-24:  vodka => vodka

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 11-12:  5 => 5
Oracle Span 13-14:  and => and
Oracle Span 16-17:  and => and
Oracle Span 22-23:  and => and
Oracle Span 10-11:  around => around
Oracle Span 6-7:  cut => (thing :instrument-of cut-01)
Oracle Span 15-16:  drugs => drug
Oracle Span 3-4:  find => find-01
Oracle Span 1-2:  i => i
Oracle Span 14-15:  other => other
Oracle Span 12-13:  paracetmols => paracetamol
Oracle Span 9-10:  take => take-01
Oracle Span 18-19:  take => take-01
Oracle Span 23-24:  vodka => vodka

Dependencies:
1	when	_	WRB	WRB	_	4	advmod	_	_
2	i	_	NNP	NNP	_	3	nn	_	_
3	cant	_	NNP	NNP	_	4	nsubj	_	_
4	find	_	VBP	VBP	_	10	advcl	_	_
5	anything	_	NN	NN	_	4	dobj	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	cut	_	VB	VB	_	4	vmod	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	i	_	FW	FW	_	8	pobj	_	_
10	take	_	VBP	VBP	_	0	root	_	_
11	around	_	IN	IN	_	10	prep	_	_
12	5	_	CD	CD	_	13	num	_	_
13	paracetmols	_	NNS	NNS	_	11	pobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	other	_	JJ	JJ	_	16	amod	_	_
16	drugs	_	NNS	NNS	_	13	conj	_	_
17	and	_	CC	CC	_	10	cc	_	_
18	i	_	FW	FW	_	19	nsubj	_	_
19	take	_	VBP	VBP	_	10	conj	_	_
20	them	_	PRP	PRP	_	19	dobj	_	_
21	with	_	IN	IN	_	19	prep	_	_
22	larger	_	JJR	JJR	_	21	pobj	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	vodka	_	NN	NN	_	22	conj	_	_
25	.	_	.	.	_	10	punct	_	_

Oracle:
(a / around, op, 5 / 5)
(a2 / and, op, t / take-01)
(a2 / and, op, t2 / take-01)
(a4 / and, op, d / drug)
(a4 / and, op, p / paracetamol)
(a5 / and, op, v / vodka)
(c / cut-01, instrument, t3 / thing)
(d / drug, mod, o / other)
(f / find-01, ARG1, t3 / thing)
(p / paracetamol, quant, a / around)
(t / take-01, ARG0, i / i)
(t / take-01, ARG1, a4 / and)
(t2 / take-01, ARG0, i / i)
(t2 / take-01, ARG1, a4 / and)
(t2 / take-01, prep-with, a5 / and)

Input(Some(Graph((and :time (possible :polarity - :domain (find-01 :ARG1 (thing :instrument-of cut-01))) :op (take-01 :prep-with (and :op vodka :op lager) :ARG0 i :ARG1 and) :op (take-01 :ARG1 (and :op (drug :mod other) :op (paracetamol :quant (around :op 5))) :ARG0 i)),ArrayBuffer(Span(13,14,List(0),and,and,false), Span(3,4,List(1),find,find-01,false), Span(6,7,List(2, 3),cut,(thing :instrument-of cut-01),false), Span(9,10,List(4),take,take-01,false), Span(16,17,List(5),and,and,false), Span(23,24,List(6),vodka,vodka,false), Span(18,19,List(7),take,take-01,false), Span(22,23,List(8),and,and,false), Span(15,16,List(9),drugs,drug,false), Span(14,15,List(10),other,other,false), Span(10,11,List(11),around,around,false), Span(11,12,List(12),5,5,false), Span(1,2,List(13),i,i,false), Span(12,13,List(14),paracetmols,paracetamol,false)),Map(2 -> thing, 5 -> and, 12 -> 5, 8 -> and, 7 -> take-01, 1 -> find-01, 4 -> take-01, 11 -> around, 14 -> paracetamol, 6 -> vodka, 9 -> drug, 0 -> and, 10 -> other, 3 -> cut-01, 13 -> i),Map(5 -> 5, t -> take-01, v -> vodka, d -> drug, t3 -> thing, p -> paracetamol, a -> around, a5 -> and, t2 -> take-01, i -> i, a2 -> and, c -> cut-01, f -> find-01, o -> other, a4 -> and))),[Ljava.lang.String;@38b27cdc,Annotation([Ljava.lang.String;@1339e7aa,[Ljava.lang.String;@1fb669c3,[Ljava.lang.String;@49c66ade),Annotation([Ljava.lang.String;@6239aba6,[Ljava.lang.String;@3e6104fc,[Ledu.cmu.lti.nlp.amr.Dependency;@12359a82),Annotation([Ljava.lang.String;@68df9280,[Ljava.lang.String;@479460a6,[Ljava.lang.String;@7164ca4c),Annotation([Ljava.lang.String;@4f3bbf68,[Ljava.lang.String;@5be46f9d,[Ledu.cmu.lti.nlp.amr.Entity;@3f91b517))
AMR:
(a / around, op, 5 / 5)
(a / around, op, a2 / and)
(a2 / and, op, t2 / take-01)
(a5 / and, condition, f / find-01)
(a5 / and, op, d / drug)
(a5 / and, op, t / take-01)
(a5 / and, op, t2 / take-01)
(c / cut-01, ARG1, i / i)
(c / cut-01, instrument, t3 / thing)
(d / drug, mod, o / other)
(f / find-01, ARG0, a4 / and)
(f / find-01, ARG1, t3 / thing)
(t / take-01, ARG1, v / vodka)
(t2 / take-01, ARG1, p / paracetamol)

WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 309,091 microseconds
Sentence: as im writing this i am really tempted to cut my arm or burn myslef,

Oracle Span 1:  arm => arm
Oracle Span 2:  burn => burn-01
Oracle Span 3:  cut => cut-01
Oracle Span 4:  i => i
Oracle Span 5:  or => or
Oracle Span 6:  tempted => tempt-01
Oracle Span 7:  this => this
Oracle Span 8:  writing => write-01
Spans:
Span 11-12:  arm => arm
Span 13-14:  burn => burn-01
Span 9-10:  cut => cut-01
Span 4-5:  i => i
Span 12-13:  or => or
Span 7-8:  tempted => tempt-01
Span 3-4:  this => this
Span 2-3:  writing => write-01

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 11-12:  arm => arm
Oracle Span 13-14:  burn => burn-01
Oracle Span 9-10:  cut => cut-01
Oracle Span 4-5:  i => i
Oracle Span 12-13:  or => or
Oracle Span 7-8:  tempted => tempt-01
Oracle Span 3-4:  this => this
Oracle Span 2-3:  writing => write-01

Dependencies:
1	as	_	IN	IN	_	2	mark	_	_
2	im	_	VBP	VBP	_	0	root	_	_
3	writing	_	VBG	VBG	_	2	xcomp	_	_
4	this	_	DT	DT	_	5	det	_	_
5	i	_	FW	FW	_	8	nsubjpass	_	_
6	am	_	VBP	VBP	_	8	auxpass	_	_
7	really	_	RB	RB	_	8	advmod	_	_
8	tempted	_	VBN	VBN	_	3	ccomp	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	cut	_	VB	VB	_	8	xcomp	_	_
11	my	_	PRP$	PRP$	_	12	poss	_	_
12	arm	_	NN	NN	_	10	dobj	_	_
13	or	_	CC	CC	_	10	cc	_	_
14	burn	_	VB	VB	_	10	conj	_	_
15	myslef	_	NN	NN	_	14	dobj	_	_
16	,	_	,	,	_	2	punct	_	_

Oracle:
(b / burn-01, ARG0, i / i)
(b / burn-01, ARG1, i / i)
(c / cut-01, ARG0, i / i)
(c / cut-01, ARG1, a / arm)
(i / i, part, a / arm)
(o / or, op, b / burn-01)
(o / or, op, c / cut-01)
(t / tempt-01, ARG1, i / i)
(t / tempt-01, ARG3, o / or)
(t / tempt-01, time, w / write-01)
(w / write-01, ARG0, i / i)
(w / write-01, ARG1, t2 / this)

Input(Some(Graph((tempt-01 :time (write-01 :ARG1 this :ARG0 i) :ARG3 (or :op (burn-01 :ARG0 i :ARG1 i) :op (cut-01 :ARG1 (arm :part-of i) :ARG0 i)) :ARG1 i),ArrayBuffer(Span(7,8,List(0),tempted,tempt-01,false), Span(2,3,List(1),writing,write-01,false), Span(3,4,List(2),this,this,false), Span(12,13,List(3),or,or,false), Span(13,14,List(4),burn,burn-01,false), Span(9,10,List(5),cut,cut-01,false), Span(11,12,List(6),arm,arm,false), Span(4,5,List(7),i,i,false)),Map(2 -> this, 5 -> cut-01, 7 -> i, 1 -> write-01, 4 -> burn-01, 6 -> arm, 0 -> tempt-01, 3 -> or),Map(w -> write-01, b -> burn-01, t -> tempt-01, a -> arm, t2 -> this, i -> i, c -> cut-01, o -> or))),[Ljava.lang.String;@68702e03,Annotation([Ljava.lang.String;@7a220c9a,[Ljava.lang.String;@2421cc4,[Ljava.lang.String;@30c93896),Annotation([Ljava.lang.String;@59a008ba,[Ljava.lang.String;@338c99c8,[Ledu.cmu.lti.nlp.amr.Dependency;@21ba0741),Annotation([Ljava.lang.String;@58ce9668,[Ljava.lang.String;@172b013,[Ljava.lang.String;@56673b2c),Annotation([Ljava.lang.String;@2796aeae,[Ljava.lang.String;@b4711e2,[Ledu.cmu.lti.nlp.amr.Entity;@1fa1cab1))
AMR:
(b / burn-01, ARG1, t2 / this)
(c / cut-01, ARG1, a / arm)
(o / or, op, b / burn-01)
(o / or, op, c / cut-01)
(t / tempt-01, ARG1, c / cut-01)
(w / write-01, ARG1, t / tempt-01)
(w / write-01, ARG6, i / i)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 253,408 microseconds
Sentence: i am addicted,when ever one heals i cut again

Oracle Span 1:  addicted => addict-01
Oracle Span 2:  again => again
Oracle Span 3:  cut => cut-01
Oracle Span 4:  ever => ever
Oracle Span 5:  heals => heal-01
Oracle Span 6:  i => i
Oracle Span 7:  one => one
Spans:
Span 2-3:  addicted => addict-01
Span 10-11:  again => again
Span 9-10:  cut => cut-01
Span 5-6:  ever => ever
Span 7-8:  heals => heal-01
Span 0-1:  i => i
Span 6-7:  one => one

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 2-3:  addicted => addict-01
Oracle Span 10-11:  again => again
Oracle Span 9-10:  cut => cut-01
Oracle Span 5-6:  ever => ever
Oracle Span 7-8:  heals => heal-01
Oracle Span 0-1:  i => i
Oracle Span 6-7:  one => one

Dependencies:
1	i	_	FW	FW	_	3	nsubjpass	_	_
2	am	_	VBP	VBP	_	3	auxpass	_	_
3	addicted	_	VBN	VBN	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	when	_	WRB	WRB	_	10	advmod	_	_
6	ever	_	RB	RB	_	8	advmod	_	_
7	one	_	CD	CD	_	8	num	_	_
8	heals	_	NNS	NNS	_	5	dep	_	_
9	i	_	FW	FW	_	10	nsubj	_	_
10	cut	_	VBD	VBD	_	3	advcl	_	_
11	again	_	RB	RB	_	10	advmod	_	_

Oracle:
(a / addict-01, ARG1, i / i)
(c / cut-01, ARG0, i / i)
(c / cut-01, mod, a2 / again)
(c / cut-01, time, h / heal-01)
(h / heal-01, ARG1, o / one)
(h / heal-01, time, e / ever)

Input(Some(Graph((multi-sentence :snt1 (addict-01 :ARG1 i) :snt2 (cut-01 :time (heal-01 :time ever :ARG1 one) :mod again :ARG0 i)),ArrayBuffer(Span(2,3,List(0),addicted,addict-01,false), Span(0,1,List(1),i,i,false), Span(9,10,List(2),cut,cut-01,false), Span(7,8,List(3),heals,heal-01,false), Span(5,6,List(4),ever,ever,false), Span(6,7,List(5),one,one,false), Span(10,11,List(6),again,again,false)),Map(2 -> cut-01, 5 -> one, 1 -> i, 4 -> ever, 6 -> again, 0 -> addict-01, 3 -> heal-01),Map(e -> ever, h -> heal-01, a -> addict-01, a2 -> again, i -> i, c -> cut-01, o -> one))),[Ljava.lang.String;@70f02c32,Annotation([Ljava.lang.String;@62010f5c,[Ljava.lang.String;@51fadaff,[Ljava.lang.String;@401f7633),Annotation([Ljava.lang.String;@31ff43be,[Ljava.lang.String;@5b6ec132,[Ledu.cmu.lti.nlp.amr.Dependency;@5c44c582),Annotation([Ljava.lang.String;@67d18ed7,[Ljava.lang.String;@2c78d320,[Ljava.lang.String;@132e0cc),Annotation([Ljava.lang.String;@7b205dbd,[Ljava.lang.String;@106cc338,[Ledu.cmu.lti.nlp.amr.Entity;@7a67e3c6))
AMR:
(a / addict-01, ARG1, i / i)
(a / addict-01, condition, c / cut-01)
(c / cut-01, ARG1, o / one)
(c / cut-01, mod, a2 / again)
(e / ever, op, o / one)
(h / heal-01, ARG1, c / cut-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 90,667 microseconds
Sentence: it think about it everyday,

Oracle Span 1:  it => it
Oracle Span 2:  think => think-01
Spans:
Span 0-1:  it => it
Span 1-2:  think => think-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  it => it
Oracle Span 1-2:  think => think-01

Dependencies:
1	it	_	PRP	PRP	_	2	nsubj	_	_
2	think	_	VBP	VBP	_	0	root	_	_
3	about	_	IN	IN	_	2	prep	_	_
4	it	_	PRP	PRP	_	3	pobj	_	_
5	everyday	_	NN	NN	_	2	tmod	_	_
6	,	_	,	,	_	2	punct	_	_

Oracle:
(t / think-01, ARG1, i2 / it)

Input(Some(Graph((think-01 :frequency (rate-entity-91 :ARG3 (temporal-quantity :quant 1 :unit day)) :ARG1 it :ARG0 i),ArrayBuffer(Span(1,2,List(0),think,think-01,false), Span(0,1,List(1),it,it,false)),Map(1 -> it, 0 -> think-01),Map(t -> think-01, i2 -> it))),[Ljava.lang.String;@6cc558c6,Annotation([Ljava.lang.String;@15713d56,[Ljava.lang.String;@63f259c3,[Ljava.lang.String;@26ceffa8),Annotation([Ljava.lang.String;@600b90df,[Ljava.lang.String;@7c8c9a05,[Ledu.cmu.lti.nlp.amr.Dependency;@d41f816),Annotation([Ljava.lang.String;@5c2375a9,[Ljava.lang.String;@60129b9a,[Ljava.lang.String;@78d6692f),Annotation([Ljava.lang.String;@7a55af6b,[Ljava.lang.String;@3d9c13b5,[Ledu.cmu.lti.nlp.amr.Entity;@492691d7))
AMR:
(t / think-01, ARG0, i2 / it)

WARNING: makeIds can't find span Id: 0.1
Decoded in 6,897 microseconds
Sentence: i am 12 and i am already sick of my life.

Oracle Span 1:  12 => 12
Oracle Span 2:  already => already
Oracle Span 3:  and => and
Oracle Span 4:  i => i
Oracle Span 5:  life => life
Spans:
Span 2-3:  12 => 12
Span 6-7:  already => already
Span 3-4:  and => and
Span 0-1:  i => i
Span 10-11:  life => life

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  12 => 12
Oracle Span 6-7:  already => already
Oracle Span 3-4:  and => and
Oracle Span 0-1:  i => i
Oracle Span 10-11:  life => life

Dependencies:
1	i	_	FW	FW	_	3	nsubj	_	_
2	am	_	VBP	VBP	_	3	cop	_	_
3	12	_	CD	CD	_	0	root	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	i	_	FW	FW	_	8	nsubj	_	_
6	am	_	VBP	VBP	_	8	cop	_	_
7	already	_	RB	RB	_	8	advmod	_	_
8	sick	_	JJ	JJ	_	3	conj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	my	_	PRP$	PRP$	_	11	poss	_	_
11	life	_	NN	NN	_	9	pobj	_	_
12	.	_	.	.	_	3	punct	_	_

Oracle:
(l / life, poss, i / i)

Input(Some(Graph((and :op (tire-01 :ARG0 (life :poss i) :time already :ARG1 i) :op (age-01 :ARG1 i :ARG2 (temporal-quantity :quant 12 :unit year))),ArrayBuffer(Span(3,4,List(0),and,and,false), Span(10,11,List(1),life,life,false), Span(6,7,List(2),already,already,false), Span(0,1,List(3),i,i,false), Span(2,3,List(4),12,12,false)),Map(2 -> already, 1 -> life, 4 -> 12, 0 -> and, 3 -> i),Map(a3 -> already, 1 -> 12, a -> and, i -> i, l -> life))),[Ljava.lang.String;@27216cd,Annotation([Ljava.lang.String;@558bdf1f,[Ljava.lang.String;@8576fa0,[Ljava.lang.String;@7582ff54),Annotation([Ljava.lang.String;@67545b57,[Ljava.lang.String;@6c2c1385,[Ledu.cmu.lti.nlp.amr.Dependency;@5f354bcf),Annotation([Ljava.lang.String;@3daf7722,[Ljava.lang.String;@78641d23,[Ljava.lang.String;@74589991),Annotation([Ljava.lang.String;@146dfe6,[Ljava.lang.String;@4716be8b,[Ledu.cmu.lti.nlp.amr.Entity;@1fc32e4f))
AMR:
(1 / 12, calendar, a3 / already)
(1 / 12, calendar, i / i)
(a / and, calendar, i / i)
(a / and, op, l / life)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 19,725 microseconds
Sentence: the source of this is that; when i was 7 my dad left,and he doesnt want to know me anymore,

Oracle Span 1:  7 => 7
Oracle Span 2:  ; => and
Oracle Span 3:  anymore => anymore
Oracle Span 4:  dad => dad
Oracle Span 5:  i => i
Oracle Span 6:  know => know-01
Oracle Span 7:  left => leave-01
Oracle Span 8:  source => source-02
Oracle Span 9:  this => this
Oracle Span 10:  want => want-01
Spans:
Span 10-11:  7 => 7
Span 6-7:  ; => and
Span 22-23:  anymore => anymore
Span 12-13:  dad => dad
Span 8-9:  i => i
Span 20-21:  know => know-01
Span 13-14:  left => leave-01
Span 1-2:  source => source-02
Span 3-4:  this => this
Span 18-19:  want => want-01

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 10-11:  7 => 7
Oracle Span 6-7:  ; => and
Oracle Span 22-23:  anymore => anymore
Oracle Span 12-13:  dad => dad
Oracle Span 8-9:  i => i
Oracle Span 20-21:  know => know-01
Oracle Span 13-14:  left => leave-01
Oracle Span 1-2:  source => source-02
Oracle Span 3-4:  this => this
Oracle Span 18-19:  want => want-01

Dependencies:
1	the	_	DT	DT	_	2	det	_	_
2	source	_	NN	NN	_	6	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	this	_	DT	DT	_	3	pobj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	that	_	DT	DT	_	0	root	_	_
7	;	_	:	:	_	6	punct	_	_
8	when	_	WRB	WRB	_	11	advmod	_	_
9	i	_	FW	FW	_	11	nsubj	_	_
10	was	_	VBD	VBD	_	11	cop	_	_
11	7	_	CD	CD	_	14	advcl	_	_
12	my	_	PRP$	PRP$	_	13	poss	_	_
13	dad	_	NN	NN	_	14	nsubj	_	_
14	left	_	VBD	VBD	_	6	conj	_	_
15	,	_	,	,	_	6	punct	_	_
16	and	_	CC	CC	_	6	cc	_	_
17	he	_	PRP	PRP	_	18	nsubj	_	_
18	doesnt	_	VBP	VBP	_	6	conj	_	_
19	want	_	VBP	VBP	_	18	ccomp	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	know	_	VB	VB	_	19	xcomp	_	_
22	me	_	PRP	PRP	_	21	dobj	_	_
23	anymore	_	RB	RB	_	21	advmod	_	_
24	,	_	,	,	_	18	punct	_	_

Oracle:
(a / and, op, l / leave-01)
(a / and, op, w / want-01)
(d / dad, poss, i / i)
(k / know-01, ARG1, i / i)
(l / leave-01, ARG0, d / dad)
(s / source-02, ARG0, a / and)
(s / source-02, ARG1, t / this)
(w / want-01, ARG0, d / dad)
(w / want-01, ARG1, k / know-01)
(w / want-01, time, a3 / anymore)

Input(Some(Graph((source-02 :ARG1 this :ARG0 (and :op (want-01 :time anymore :ARG1 (know-01 :ARG1 i) :polarity - :ARG0 dad) :op (leave-01 :time (age-01 :ARG2 (temporal-quantity :quant 7 :unit year) :ARG1 i) :ARG0 (dad :poss i)))),ArrayBuffer(Span(1,2,List(0),source,source-02,false), Span(3,4,List(1),this,this,false), Span(6,7,List(2),;,and,false), Span(18,19,List(3),want,want-01,false), Span(22,23,List(4),anymore,anymore,false), Span(20,21,List(5),know,know-01,false), Span(13,14,List(6),left,leave-01,false), Span(10,11,List(7),7,7,false), Span(12,13,List(8),dad,dad,false), Span(8,9,List(9),i,i,false)),Map(2 -> and, 5 -> know-01, 8 -> dad, 7 -> 7, 1 -> this, 4 -> anymore, 6 -> leave-01, 9 -> i, 0 -> source-02, 3 -> want-01),Map(w -> want-01, k -> know-01, t -> this, a3 -> anymore, s -> source-02, 7 -> 7, d -> dad, a -> and, i -> i, l -> leave-01))),[Ljava.lang.String;@2f67b837,Annotation([Ljava.lang.String;@1869fbd2,[Ljava.lang.String;@6af9fcb2,[Ljava.lang.String;@6cce16f4),Annotation([Ljava.lang.String;@7efaad5a,[Ljava.lang.String;@291a7e3c,[Ledu.cmu.lti.nlp.amr.Dependency;@ca30bc1),Annotation([Ljava.lang.String;@1046d517,[Ljava.lang.String;@3b7d3a38,[Ljava.lang.String;@416c58f5),Annotation([Ljava.lang.String;@5505ae1a,[Ljava.lang.String;@73cd37c0,[Ledu.cmu.lti.nlp.amr.Entity;@21337f7b))
AMR:
(7 / 7, calendar, i / i)
(k / know-01, ARG1, a / and)
(k / know-01, ARG6, a3 / anymore)
(l / leave-01, ARG0, d / dad)
(l / leave-01, ARG1, a / and)
(l / leave-01, ARG6, 7 / 7)
(s / source-02, ARG1, a / and)
(s / source-02, ARG6, t / this)
(w / want-01, ARG1, k / know-01)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
Decoded in 341,119 microseconds
Sentence: he just cares about his new little girl and wife,his new life, where im not wanted.

Oracle Span 1:  and => and
Oracle Span 2:  cares => care-01
Oracle Span 3:  girl => girl
Oracle Span 4:  he => he
Oracle Span 5:  just => just
Oracle Span 6:  life => life
Oracle Span 7:  little => little
Oracle Span 8:  new => new
Oracle Span 9:  new => new
Oracle Span 10:  wanted => want-01
Oracle Span 11:  wife => wife
Spans:
Span 8-9:  and => and
Span 2-3:  cares => care-01
Span 7-8:  girl => girl
Span 0-1:  he => he
Span 1-2:  just => just
Span 13-14:  life => life
Span 6-7:  little => little
Span 5-6:  new => new
Span 12-13:  new => new
Span 18-19:  wanted => want-01
Span 9-10:  wife => wife

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 2-3:  cares => care-01
Oracle Span 7-8:  girl => girl
Oracle Span 0-1:  he => he
Oracle Span 1-2:  just => just
Oracle Span 13-14:  life => life
Oracle Span 6-7:  little => little
Oracle Span 5-6:  new => new
Oracle Span 12-13:  new => new
Oracle Span 18-19:  wanted => want-01
Oracle Span 9-10:  wife => wife

Dependencies:
1	he	_	PRP	PRP	_	3	nsubj	_	_
2	just	_	RB	RB	_	3	advmod	_	_
3	cares	_	VBZ	VBZ	_	0	root	_	_
4	about	_	IN	IN	_	3	prep	_	_
5	his	_	PRP$	PRP$	_	8	poss	_	_
6	new	_	JJ	JJ	_	8	amod	_	_
7	little	_	JJ	JJ	_	8	amod	_	_
8	girl	_	NN	NN	_	4	pobj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	wife	_	NN	NN	_	8	conj	_	_
11	,	_	,	,	_	10	punct	_	_
12	his	_	PRP$	PRP$	_	14	poss	_	_
13	new	_	JJ	JJ	_	14	amod	_	_
14	life	_	NN	NN	_	10	appos	_	_
15	,	_	,	,	_	10	punct	_	_
16	where	_	WRB	WRB	_	19	advmod	_	_
17	im	_	NN	NN	_	19	nsubj	_	_
18	not	_	RB	RB	_	17	neg	_	_
19	wanted	_	VBD	VBD	_	10	rcmod	_	_
20	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, g / girl)
(a / and, op, l2 / life)
(a / and, op, w / wife)
(c / care-01, ARG0, h / he)
(c / care-01, ARG1, a / and)
(c / care-01, mod, j / just)
(g / girl, mod, l / little)
(g / girl, mod, n / new)
(g / girl, poss, h / he)
(l2 / life, mod, n2 / new)
(l2 / life, poss, h / he)
(w / wife, poss, h / he)
(w2 / want-01, location, l2 / life)

Input(Some(Graph((care-01 :mod just :ARG1 (and :op (life :location-of (want-01 :ARG1 i :polarity -) :mod new :poss he) :op (wife :poss he) :op (girl :mod new :mod little :poss he)) :ARG0 he),ArrayBuffer(Span(2,3,List(0),cares,care-01,false), Span(1,2,List(1),just,just,false), Span(8,9,List(2),and,and,false), Span(13,14,List(3),life,life,false), Span(18,19,List(4),wanted,want-01,false), Span(5,6,List(5),new,new,false), Span(9,10,List(6),wife,wife,false), Span(7,8,List(7),girl,girl,false), Span(12,13,List(8),new,new,false), Span(6,7,List(9),little,little,false), Span(0,1,List(10),he,he,false)),Map(2 -> and, 5 -> new, 8 -> new, 7 -> girl, 1 -> just, 4 -> want-01, 6 -> wife, 9 -> little, 0 -> care-01, 10 -> he, 3 -> life),Map(n -> new, w -> wife, h -> he, j -> just, g -> girl, a -> and, w2 -> want-01, l2 -> life, l -> little, c -> care-01, n2 -> new))),[Ljava.lang.String;@2bb3058,Annotation([Ljava.lang.String;@7a362b6b,[Ljava.lang.String;@60df60da,[Ljava.lang.String;@5a2d131d),Annotation([Ljava.lang.String;@14fc1f0,[Ljava.lang.String;@4ae9cfc1,[Ledu.cmu.lti.nlp.amr.Dependency;@512baff6),Annotation([Ljava.lang.String;@632ceb35,[Ljava.lang.String;@1c93f6e1,[Ljava.lang.String;@1800a575),Annotation([Ljava.lang.String;@1458ed9c,[Ljava.lang.String;@10a9d961,[Ledu.cmu.lti.nlp.amr.Entity;@130e116b))
AMR:
(a / and, op, g / girl)
(a / and, op, n / new)
(a / and, op, w / wife)
(c / care-01, ARG0, h / he)
(c / care-01, ARG1, g / girl)
(c / care-01, ARG6, j / just)
(g / girl, degree, l / little)
(g / girl, mod, n2 / new)
(l2 / life, mod, n / new)
(w2 / want-01, ARG1, l2 / life)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 162,275 microseconds
Sentence: my best mate died when i was 10

Oracle Span 1:  10 => 10
Oracle Span 2:  best => (good :degree most)
Oracle Span 3:  died => die-01
Oracle Span 4:  i => i
Oracle Span 5:  mate => mate
Spans:
Span 7-8:  10 => 10
Span 1-2:  best => (good :degree most)
Span 3-4:  died => die-01
Span 5-6:  i => i
Span 2-3:  mate => mate

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 7-8:  10 => 10
Oracle Span 1-2:  best => (good :degree most)
Oracle Span 3-4:  died => die-01
Oracle Span 5-6:  i => i
Oracle Span 2-3:  mate => mate

Dependencies:
1	my	_	PRP$	PRP$	_	3	poss	_	_
2	best	_	JJS	JJS	_	3	amod	_	_
3	mate	_	NN	NN	_	4	nsubj	_	_
4	died	_	VBD	VBD	_	0	root	_	_
5	when	_	WRB	WRB	_	8	advmod	_	_
6	i	_	FW	FW	_	8	nsubj	_	_
7	was	_	VBD	VBD	_	8	cop	_	_
8	10	_	CD	CD	_	4	advcl	_	_

Oracle:
(d / die-01, ARG1, m / mate)
(g / good, degree, m2 / most)
(m / mate, mod, g / good)
(m / mate, poss, i / i)

Input(Some(Graph((die-01 :time (age-01 :ARG2 (temporal-quantity :quant 10 :unit year) :ARG1 i) :ARG1 (mate :poss i :mod (good :degree most))),ArrayBuffer(Span(3,4,List(0),died,die-01,false), Span(7,8,List(1),10,10,false), Span(2,3,List(2),mate,mate,false), Span(5,6,List(3),i,i,false), Span(1,2,List(4, 5),best,(good :degree most),false)),Map(2 -> mate, 5 -> most, 1 -> 10, 4 -> good, 0 -> die-01, 3 -> i),Map(m2 -> most, m -> mate, d -> die-01, 1 -> 10, g -> good, i -> i))),[Ljava.lang.String;@e383572,Annotation([Ljava.lang.String;@5ddf0d24,[Ljava.lang.String;@363a52f,[Ljava.lang.String;@60856961),Annotation([Ljava.lang.String;@2fd953a6,[Ljava.lang.String;@a4add54,[Ledu.cmu.lti.nlp.amr.Dependency;@141e5bef),Annotation([Ljava.lang.String;@5f9be66c,[Ljava.lang.String;@3abada5a,[Ljava.lang.String;@66c61024),Annotation([Ljava.lang.String;@61fe30,[Ljava.lang.String;@c9d0d6,[Ledu.cmu.lti.nlp.amr.Entity;@6ccdb29f))
AMR:
(d / die-01, ARG0, m / mate)
(d / die-01, ARG1, 1 / 10)
(d / die-01, ARG6, i / i)
(g / good, degree, m2 / most)
(m / mate, mod, g / good)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 63,477 microseconds
Sentence: i had a reltionship with a boy who is 16 and i am forbidden to speak to him because of what happend and the age diffrience

Oracle Span 1:  16 => 16
Oracle Span 2:  age => age
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  because => cause-01
Oracle Span 6:  boy => boy
Oracle Span 7:  diffrience => differ-02
Oracle Span 8:  forbidden => forbid-01
Oracle Span 9:  had => have-03
Oracle Span 10:  happend => (thing :ARG1-of happen-01)
Oracle Span 11:  i => i
Oracle Span 12:  speak => speak-01
Spans:
Span 9-10:  16 => 16
Span 24-25:  age => age
Span 10-11:  and => and
Span 22-23:  and => and
Span 18-19:  because => cause-01
Span 6-7:  boy => boy
Span 25-26:  diffrience => differ-02
Span 13-14:  forbidden => forbid-01
Span 1-2:  had => have-03
Span 21-22:  happend => (thing :ARG1-of happen-01)
Span 0-1:  i => i
Span 15-16:  speak => speak-01

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Oracle Span 9-10:  16 => 16
Oracle Span 24-25:  age => age
Oracle Span 10-11:  and => and
Oracle Span 22-23:  and => and
Oracle Span 18-19:  because => cause-01
Oracle Span 6-7:  boy => boy
Oracle Span 25-26:  diffrience => differ-02
Oracle Span 13-14:  forbidden => forbid-01
Oracle Span 1-2:  had => have-03
Oracle Span 21-22:  happend => (thing :ARG1-of happen-01)
Oracle Span 0-1:  i => i
Oracle Span 15-16:  speak => speak-01

Dependencies:
1	i	_	FW	FW	_	2	nsubj	_	_
2	had	_	VBD	VBD	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	reltionship	_	NN	NN	_	2	dobj	_	_
5	with	_	IN	IN	_	4	prep	_	_
6	a	_	DT	DT	_	7	det	_	_
7	boy	_	NN	NN	_	5	pobj	_	_
8	who	_	WP	WP	_	9	nsubj	_	_
9	is	_	VBZ	VBZ	_	7	rcmod	_	_
10	16	_	CD	CD	_	14	nsubjpass	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	i	_	FW	FW	_	10	conj	_	_
13	am	_	VBP	VBP	_	14	auxpass	_	_
14	forbidden	_	VBN	VBN	_	9	ccomp	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	speak	_	VB	VB	_	14	xcomp	_	_
17	to	_	TO	TO	_	16	prep	_	_
18	him	_	PRP	PRP	_	17	pobj	_	_
19	because	_	RB	RB	_	20	advmod	_	_
20	of	_	IN	IN	_	18	prep	_	_
21	what	_	WP	WP	_	22	det	_	_
22	happend	_	NN	NN	_	20	pobj	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	the	_	DT	DT	_	26	det	_	_
25	age	_	NN	NN	_	26	nn	_	_
26	diffrience	_	NN	NN	_	22	conj	_	_

Oracle:
(a / and, op, f / forbid-01)
(a / and, op, h / have-03)
(a2 / and, op, d / differ-02)
(a2 / and, op, t / thing)
(b / boy, age, 1 / 16)
(c / cause-01, ARG0, a2 / and)
(c / cause-01, ARG1, f / forbid-01)
(d / differ-02, ARG1, a3 / age)
(f / forbid-01, ARG1, s / speak-01)
(f / forbid-01, ARG2, i / i)
(h / have-03, ARG0, i / i)
(h2 / happen-01, ARG1, t / thing)
(s / speak-01, ARG0, i / i)
(s / speak-01, ARG2, b / boy)

Input(Some(Graph((and :op (forbid-01 :ARG1-of (cause-01 :ARG0 (and :op (differ-02 :ARG1 age) :op (thing :ARG1-of happen-01))) :ARG1 (speak-01 :ARG0 i :ARG2 boy) :ARG2 i) :op (have-03 :ARG1 (relationship :prep-with (boy :age 16)) :ARG0 i)),ArrayBuffer(Span(10,11,List(0),and,and,false), Span(13,14,List(1),forbidden,forbid-01,false), Span(18,19,List(2),because,cause-01,false), Span(22,23,List(3),and,and,false), Span(24,25,List(4),age,age,false), Span(15,16,List(5),speak,speak-01,false), Span(1,2,List(6),had,have-03,false), Span(6,7,List(7),boy,boy,false), Span(9,10,List(8),16,16,false), Span(0,1,List(9),i,i,false), Span(25,26,List(10),diffrience,differ-02,false), Span(21,22,List(11, 12),happend,(thing :ARG1-of happen-01),false)),Map(2 -> cause-01, 5 -> speak-01, 12 -> happen-01, 8 -> 16, 7 -> boy, 1 -> forbid-01, 4 -> age, 11 -> thing, 6 -> have-03, 9 -> i, 0 -> and, 10 -> differ-02, 3 -> and),Map(h -> have-03, h2 -> happen-01, t -> thing, b -> boy, a3 -> age, s -> speak-01, d -> differ-02, 1 -> 16, a -> and, i -> i, a2 -> and, c -> cause-01, f -> forbid-01))),[Ljava.lang.String;@3adcc812,Annotation([Ljava.lang.String;@35432107,[Ljava.lang.String;@7b420819,[Ljava.lang.String;@7a1a14a4),Annotation([Ljava.lang.String;@265adfad,[Ljava.lang.String;@a3d9978,[Ledu.cmu.lti.nlp.amr.Dependency;@61544ae6),Annotation([Ljava.lang.String;@4b41dd5c,[Ljava.lang.String;@3b96c42e,[Ljava.lang.String;@5d066c7d),Annotation([Ljava.lang.String;@1e461e41,[Ljava.lang.String;@5ba88be8,[Ledu.cmu.lti.nlp.amr.Entity;@56928307))
AMR:
(a2 / and, op, d / differ-02)
(c / cause-01, ARG0, a2 / and)
(c / cause-01, ARG1, a / and)
(c / cause-01, ARG6, t / thing)
(d / differ-02, ARG1, a3 / age)
(f / forbid-01, ARG0, b / boy)
(f / forbid-01, ARG1, s / speak-01)
(f / forbid-01, ARG6, a / and)
(h / have-03, ARG0, a2 / and)
(h / have-03, ARG1, i / i)
(h2 / happen-01, ARG1, t / thing)
(s / speak-01, ARG1, 1 / 16)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
Decoded in 664,593 microseconds
Sentence: also my mum suffers from bi polar and i have depression

Oracle Span 1:  also => also
Oracle Span 2:  and => and
Oracle Span 3:  bi polar => (disease :name (name :op "bipolar"))
Oracle Span 4:  depression => depression
Oracle Span 5:  have => have-03
Oracle Span 6:  i => i
Oracle Span 7:  mum => mum
Oracle Span 8:  suffers => suffer-01
Spans:
Span 0-1:  also => also
Span 7-8:  and => and
Span 5-7:  bi polar => (disease :name (name :op "bipolar"))
Span 10-11:  depression => depression
Span 9-10:  have => have-03
Span 8-9:  i => i
Span 2-3:  mum => mum
Span 3-4:  suffers => suffer-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 0-1:  also => also
Oracle Span 7-8:  and => and
Oracle Span 5-7:  bi polar => (disease :name (name :op "bipolar"))
Oracle Span 10-11:  depression => depression
Oracle Span 9-10:  have => have-03
Oracle Span 8-9:  i => i
Oracle Span 2-3:  mum => mum
Oracle Span 3-4:  suffers => suffer-01

Dependencies:
1	also	_	RB	RB	_	4	advmod	_	_
2	my	_	PRP$	PRP$	_	3	poss	_	_
3	mum	_	NN	NN	_	4	nsubj	_	_
4	suffers	_	VBZ	VBZ	_	0	root	_	_
5	from	_	IN	IN	_	4	prep	_	_
6	bi	_	NN	NN	_	7	nn	_	_
7	polar	_	NNS	NNS	_	5	pobj	_	_
8	and	_	CC	CC	_	4	cc	_	_
9	i	_	FW	FW	_	10	nsubj	_	_
10	have	_	VBP	VBP	_	4	conj	_	_
11	depression	_	NN	NN	_	10	dobj	_	_

Oracle:
(a / and, op, h / have-03)
(a / and, op, s / suffer-01)
(d2 / disease, name, n / name)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, d / depression)
(m / mum, poss, i / i)
(n / name, op, "bipolar")
(s / suffer-01, ARG0, m / mum)
(s / suffer-01, ARG1, d2 / disease)
(s / suffer-01, mod, a2 / also)

Input(Some(Graph((and :op (have-03 :ARG1 depression :ARG0 i) :op (suffer-01 :mod also :ARG1 (disease :name (name :op "bipolar")) :ARG0 (mum :poss i))),ArrayBuffer(Span(5,7,List(0, 1, 2),bi polar,(disease :name (name :op "bipolar")),false), Span(7,8,List(3),and,and,false), Span(9,10,List(4),have,have-03,false), Span(10,11,List(5),depression,depression,false), Span(3,4,List(6),suffers,suffer-01,false), Span(0,1,List(7),also,also,false), Span(2,3,List(8),mum,mum,false), Span(8,9,List(9),i,i,false)),Map(2 -> "bipolar", 5 -> depression, 8 -> mum, 7 -> also, 1 -> name, 4 -> have-03, 6 -> suffer-01, 9 -> i, 0 -> disease, 3 -> and),Map(n -> name, h -> have-03, s -> suffer-01, m -> mum, d -> depression, a -> and, d2 -> disease, i -> i, a2 -> also))),[Ljava.lang.String;@3899782c,Annotation([Ljava.lang.String;@1603cd68,[Ljava.lang.String;@9ebe38b,[Ljava.lang.String;@4b23c30a),Annotation([Ljava.lang.String;@38089a5a,[Ljava.lang.String;@30e868be,[Ledu.cmu.lti.nlp.amr.Dependency;@66c92293),Annotation([Ljava.lang.String;@332796d3,[Ljava.lang.String;@4f0100a7,[Ljava.lang.String;@3cdf2c61),Annotation([Ljava.lang.String;@13ad5cd3,[Ljava.lang.String;@1c33c17b,[Ledu.cmu.lti.nlp.amr.Entity;@5bf0fe62))
AMR:
(a / and, op, h / have-03)
(d2 / disease, name, n / name)
(h / have-03, ARG0, m / mum)
(h / have-03, ARG1, d / depression)
(h / have-03, ARG6, i / i)
(n / name, op, "bipolar")
(s / suffer-01, ARG0, m / mum)
(s / suffer-01, ARG1, d2 / disease)
(s / suffer-01, mod, a2 / also)

WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 192,473 microseconds
Sentence: i dont what to stop,

Oracle Span 1:  i => i
Oracle Span 2:  stop => stop-01
Spans:
Span 0-1:  i => i
Span 4-5:  stop => stop-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  i => i
Oracle Span 4-5:  stop => stop-01

Dependencies:
1	i	_	FW	FW	_	2	nsubj	_	_
2	dont	_	VBP	VBP	_	0	root	_	_
3	what	_	WP	WP	_	5	nsubj	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	stop	_	VB	VB	_	2	ccomp	_	_
6	,	_	,	,	_	2	punct	_	_

Oracle:


Input(Some(Graph((want-01 :polarity - :ARG0 i :ARG1 stop-01),ArrayBuffer(Span(0,1,List(0),i,i,false), Span(4,5,List(1),stop,stop-01,false)),Map(1 -> stop-01, 0 -> i),Map(s -> stop-01, i -> i))),[Ljava.lang.String;@1e097d59,Annotation([Ljava.lang.String;@673be18f,[Ljava.lang.String;@6581dc0a,[Ljava.lang.String;@39de3d36),Annotation([Ljava.lang.String;@6ce86ce1,[Ljava.lang.String;@54e7df6a,[Ledu.cmu.lti.nlp.amr.Dependency;@3fed2870),Annotation([Ljava.lang.String;@77128536,[Ljava.lang.String;@58326051,[Ljava.lang.String;@32c4e8b2),Annotation([Ljava.lang.String;@64bce832,[Ljava.lang.String;@764faa6,[Ledu.cmu.lti.nlp.amr.Entity;@4c1f22f3))
AMR:
(s / stop-01, ARG1, i / i)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
Decoded in 5,860 microseconds
Sentence: i dont care what i do to myself,i want to do it again and again to tourture myslef,i hate me.

Oracle Span 1:  again => again-and-again
Oracle Span 2:  care => care-01
Oracle Span 3:  do => (thing :ARG1-of do-02)
Oracle Span 4:  do => do-02
Oracle Span 5:  hate => hate-01
Oracle Span 6:  i => i
Oracle Span 7:  want => want-01
Spans:
Span 14-15:  again => again-and-again
Span 2-3:  care => care-01
Span 5-6:  do => (thing :ARG1-of do-02)
Span 12-13:  do => do-02
Span 22-23:  hate => hate-01
Span 0-1:  i => i
Span 10-11:  want => want-01

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 14-15:  again => again-and-again
Oracle Span 2-3:  care => care-01
Oracle Span 5-6:  do => (thing :ARG1-of do-02)
Oracle Span 12-13:  do => do-02
Oracle Span 22-23:  hate => hate-01
Oracle Span 0-1:  i => i
Oracle Span 10-11:  want => want-01

Dependencies:
1	i	_	JJ	JJ	_	2	amod	_	_
2	dont	_	NN	NN	_	3	nsubj	_	_
3	care	_	VBP	VBP	_	23	ccomp	_	_
4	what	_	WP	WP	_	6	dobj	_	_
5	i	_	FW	FW	_	6	nsubj	_	_
6	do	_	VBP	VBP	_	11	advcl	_	_
7	to	_	TO	TO	_	6	prep	_	_
8	myself	_	PRP	PRP	_	7	pobj	_	_
9	,	_	,	,	_	11	punct	_	_
10	i	_	FW	FW	_	11	nsubj	_	_
11	want	_	VBP	VBP	_	3	ccomp	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	do	_	VB	VB	_	11	ccomp	_	_
14	it	_	PRP	PRP	_	13	dobj	_	_
15	again	_	RB	RB	_	13	advmod	_	_
16	and	_	CC	CC	_	13	cc	_	_
17	again	_	RB	RB	_	19	advmod	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	tourture	_	VB	VB	_	13	conj	_	_
20	myslef	_	NN	NN	_	19	dobj	_	_
21	,	_	,	,	_	23	punct	_	_
22	i	_	FW	FW	_	23	nsubj	_	_
23	hate	_	VBP	VBP	_	0	root	_	_
24	me	_	PRP	PRP	_	23	dobj	_	_
25	.	_	.	.	_	23	punct	_	_

Oracle:
(c / care-01, ARG0, i / i)
(c / care-01, ARG1, t / thing)
(d / do-02, ARG1, t / thing)
(d / do-02, prep-to, i / i)
(d2 / do-02, ARG1, t / thing)
(d2 / do-02, frequency, a / again-and-again)
(h / hate-01, ARG0, i / i)
(h / hate-01, ARG1, i / i)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, d2 / do-02)

Input(Some(Graph((multi-sentence :snt1 (care-01 :ARG1 (thing :ARG1-of (do-02 :prep-to i)) :ARG0 i) :snt2 (want-01 :ARG1 (do-02 :purpose (torture-01 :ARG0 i :ARG1 i) :frequency again-and-again :ARG1 thing) :ARG0 i) :snt3 (hate-01 :ARG0 i :ARG1 i)),ArrayBuffer(Span(2,3,List(0),care,care-01,false), Span(5,6,List(1, 2),do,(thing :ARG1-of do-02),false), Span(0,1,List(3),i,i,false), Span(10,11,List(4),want,want-01,false), Span(12,13,List(5),do,do-02,false), Span(22,23,List(6),hate,hate-01,false), Span(14,15,List(7),again,again-and-again,false)),Map(2 -> do-02, 5 -> do-02, 7 -> again-and-again, 1 -> thing, 4 -> want-01, 6 -> hate-01, 0 -> care-01, 3 -> i),Map(w -> want-01, h -> hate-01, t -> thing, d -> do-02, a -> again-and-again, d2 -> do-02, i -> i, c -> care-01))),[Ljava.lang.String;@598bd2ba,Annotation([Ljava.lang.String;@5a755cc1,[Ljava.lang.String;@7ae42ce3,[Ljava.lang.String;@4f5991f6),Annotation([Ljava.lang.String;@484094a5,[Ljava.lang.String;@38234a38,[Ledu.cmu.lti.nlp.amr.Dependency;@63fbfaeb),Annotation([Ljava.lang.String;@602e0143,[Ljava.lang.String;@2c07545f,[Ljava.lang.String;@e57b96d),Annotation([Ljava.lang.String;@32c726ee,[Ljava.lang.String;@22f31dec,[Ledu.cmu.lti.nlp.amr.Entity;@34c01041))
AMR:
(c / care-01, ARG1, w / want-01)
(d / do-02, ARG1, t / thing)
(d2 / do-02, ARG1, a / again-and-again)
(h / hate-01, ARG0, i / i)
(h / hate-01, ARG1, c / care-01)
(w / want-01, ARG0, t / thing)
(w / want-01, ARG1, d2 / do-02)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 313,330 microseconds
Sentence: however,my best mate,i love him,loads,he means the world to me and if i do anything then he will,

Oracle Span 1:  and => and
Oracle Span 2:  anything => anything
Oracle Span 3:  best => (good :degree most)
Oracle Span 4:  do => do-02
Oracle Span 5:  he => he
Oracle Span 6:  i => i
Oracle Span 7:  loads => loads
Oracle Span 8:  love => love-01
Oracle Span 9:  mate => mate
Oracle Span 10:  means => mean-01
Oracle Span 11:  world => world
Spans:
Span 18-19:  and => and
Span 22-23:  anything => anything
Span 3-4:  best => (good :degree most)
Span 21-22:  do => do-02
Span 12-13:  he => he
Span 6-7:  i => i
Span 10-11:  loads => loads
Span 7-8:  love => love-01
Span 4-5:  mate => mate
Span 13-14:  means => mean-01
Span 15-16:  world => world

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Oracle Span 18-19:  and => and
Oracle Span 22-23:  anything => anything
Oracle Span 3-4:  best => (good :degree most)
Oracle Span 21-22:  do => do-02
Oracle Span 12-13:  he => he
Oracle Span 6-7:  i => i
Oracle Span 10-11:  loads => loads
Oracle Span 7-8:  love => love-01
Oracle Span 4-5:  mate => mate
Oracle Span 13-14:  means => mean-01
Oracle Span 15-16:  world => world

Dependencies:
1	however	_	RB	RB	_	8	advmod	_	_
2	,	_	,	,	_	8	punct	_	_
3	my	_	PRP$	PRP$	_	5	poss	_	_
4	best	_	JJS	JJS	_	5	amod	_	_
5	mate	_	NN	NN	_	8	nsubj	_	_
6	,	_	,	,	_	8	punct	_	_
7	i	_	RB	RB	_	8	advmod	_	_
8	love	_	VBP	VBP	_	0	root	_	_
9	him	_	PRP	PRP	_	14	nsubj	_	_
10	,	_	,	,	_	14	punct	_	_
11	loads	_	RB	RB	_	14	advmod	_	_
12	,	_	,	,	_	14	punct	_	_
13	he	_	PRP	PRP	_	14	nsubj	_	_
14	means	_	VBZ	VBZ	_	8	dep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	world	_	NN	NN	_	14	dobj	_	_
17	to	_	TO	TO	_	14	prep	_	_
18	me	_	PRP	PRP	_	17	pobj	_	_
19	and	_	CC	CC	_	14	cc	_	_
20	if	_	IN	IN	_	22	mark	_	_
21	i	_	FW	FW	_	22	nsubj	_	_
22	do	_	VBP	VBP	_	26	advcl	_	_
23	anything	_	NN	NN	_	22	dobj	_	_
24	then	_	RB	RB	_	26	advmod	_	_
25	he	_	PRP	PRP	_	26	nsubj	_	_
26	will	_	MD	MD	_	14	conj	_	_
27	,	_	,	,	_	8	punct	_	_

Oracle:
(a / and, op, l / love-01)
(a / and, op, m2 / mean-01)
(d / do-02, ARG0, h / he)
(d / do-02, ARG1, a3 / anything)
(g / good, degree, m3 / most)
(l / love-01, ARG0, i / i)
(l / love-01, ARG1, m / mate)
(l / love-01, mod, l2 / loads)
(m / mate, mod, g / good)
(m / mate, poss, i / i)
(m2 / mean-01, ARG0, h / he)
(m2 / mean-01, ARG1, w / world)
(m2 / mean-01, ARG2, i / i)

Input(Some(Graph((contrast-01 :ARG2 (and :op (have-condition-91 :ARG1 (do-02 :ARG0 he :ARG1 anything) :ARG2 (do-02 :ARG1 anything :ARG0 i)) :op (mean-01 :ARG1 world :ARG0 he :ARG2 i) :op (love-01 :mod loads :ARG1 (mate :mod (good :degree most) :poss i) :ARG0 i))),ArrayBuffer(Span(18,19,List(0),and,and,false), Span(21,22,List(1),do,do-02,false), Span(22,23,List(2),anything,anything,false), Span(13,14,List(3),means,mean-01,false), Span(15,16,List(4),world,world,false), Span(12,13,List(5),he,he,false), Span(7,8,List(6),love,love-01,false), Span(10,11,List(7),loads,loads,false), Span(4,5,List(8),mate,mate,false), Span(3,4,List(9, 10),best,(good :degree most),false), Span(6,7,List(11),i,i,false)),Map(2 -> anything, 5 -> he, 8 -> mate, 7 -> loads, 1 -> do-02, 4 -> world, 11 -> i, 6 -> love-01, 9 -> good, 0 -> and, 10 -> most, 3 -> mean-01),Map(m3 -> most, w -> world, h -> he, m2 -> mean-01, a3 -> anything, m -> mate, d -> do-02, g -> good, a -> and, l2 -> loads, i -> i, l -> love-01))),[Ljava.lang.String;@76f4b65,Annotation([Ljava.lang.String;@c94fd30,[Ljava.lang.String;@36328d33,[Ljava.lang.String;@2c4d1ac),Annotation([Ljava.lang.String;@7f0d96f2,[Ljava.lang.String;@545b995e,[Ledu.cmu.lti.nlp.amr.Dependency;@76a2ddf3),Annotation([Ljava.lang.String;@524f3b3a,[Ljava.lang.String;@41e68d87,[Ljava.lang.String;@49ff7d8c),Annotation([Ljava.lang.String;@29526c05,[Ljava.lang.String;@2ef14fe,[Ledu.cmu.lti.nlp.amr.Entity;@77102b91))
AMR:
(a / and, op, l / love-01)
(a / and, op, m2 / mean-01)
(d / do-02, ARG1, a3 / anything)
(d / do-02, ARG6, m2 / mean-01)
(g / good, degree, m3 / most)
(l / love-01, ARG1, m / mate)
(l / love-01, ARG6, l2 / loads)
(l / love-01, manner, i / i)
(m / mate, mod, g / good)
(m2 / mean-01, ARG0, h / he)
(m2 / mean-01, ARG1, w / world)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 615,686 microseconds
Sentence: i dont tell him but he finds out,

Oracle Span 1:  but => contrast-01
Oracle Span 2:  finds => find-03
Oracle Span 3:  he => he
Oracle Span 4:  i => i
Oracle Span 5:  tell => tell-01
Spans:
Span 4-5:  but => contrast-01
Span 6-7:  finds => find-03
Span 5-6:  he => he
Span 0-1:  i => i
Span 2-3:  tell => tell-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 4-5:  but => contrast-01
Oracle Span 6-7:  finds => find-03
Oracle Span 5-6:  he => he
Oracle Span 0-1:  i => i
Oracle Span 2-3:  tell => tell-01

Dependencies:
1	i	_	FW	FW	_	2	nsubj	_	_
2	dont	_	VBP	VBP	_	0	root	_	_
3	tell	_	VB	VB	_	2	xcomp	_	_
4	him	_	PRP	PRP	_	3	dobj	_	_
5	but	_	CC	CC	_	7	cc	_	_
6	he	_	PRP	PRP	_	7	nsubj	_	_
7	finds	_	VBZ	VBZ	_	3	dep	_	_
8	out	_	RP	RP	_	7	prt	_	_
9	,	_	,	,	_	2	punct	_	_

Oracle:
(c / contrast-01, ARG1, t / tell-01)
(c / contrast-01, ARG2, f / find-03)
(f / find-03, ARG0, h / he)
(t / tell-01, ARG0, i / i)
(t / tell-01, ARG2, h / he)

Input(Some(Graph((contrast-01 :ARG2 (find-03 :ARG0 he) :ARG1 (tell-01 :ARG2 he :ARG0 i)),ArrayBuffer(Span(4,5,List(0),but,contrast-01,false), Span(6,7,List(1),finds,find-03,false), Span(2,3,List(2),tell,tell-01,false), Span(5,6,List(3),he,he,false), Span(0,1,List(4),i,i,false)),Map(2 -> tell-01, 1 -> find-03, 4 -> i, 0 -> contrast-01, 3 -> he),Map(h -> he, t -> tell-01, i -> i, c -> contrast-01, f -> find-03))),[Ljava.lang.String;@45312be2,Annotation([Ljava.lang.String;@7fb95505,[Ljava.lang.String;@58be6e8,[Ljava.lang.String;@7331196b),Annotation([Ljava.lang.String;@3f9342d4,[Ljava.lang.String;@ab7395e,[Ledu.cmu.lti.nlp.amr.Dependency;@50d13246),Annotation([Ljava.lang.String;@2bd08376,[Ljava.lang.String;@e70f13a,[Ljava.lang.String;@3d3e5463),Annotation([Ljava.lang.String;@64a40280,[Ljava.lang.String;@4b40f651,[Ledu.cmu.lti.nlp.amr.Entity;@42b02722))
AMR:
(c / contrast-01, ARG1, f / find-03)
(f / find-03, ARG0, h / he)
(f / find-03, ARG1, t / tell-01)
(t / tell-01, ARG6, i / i)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 105,885 microseconds
Sentence: i dont want to hurt him,i dont want him to hurt himself

Oracle Span 1:  hurt => hurt-01
Oracle Span 2:  hurt => hurt-01
Oracle Span 3:  i => i
Oracle Span 4:  i => i
Oracle Span 5:  want => want-01
Oracle Span 6:  want => want-01
Spans:
Span 4-5:  hurt => hurt-01
Span 12-13:  hurt => hurt-01
Span 0-1:  i => i
Span 7-8:  i => i
Span 2-3:  want => want-01
Span 9-10:  want => want-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 4-5:  hurt => hurt-01
Oracle Span 12-13:  hurt => hurt-01
Oracle Span 0-1:  i => i
Oracle Span 7-8:  i => i
Oracle Span 2-3:  want => want-01
Oracle Span 9-10:  want => want-01

Dependencies:
1	i	_	IN	IN	_	3	mark	_	_
2	dont	_	NN	NN	_	3	nsubj	_	_
3	want	_	VBP	VBP	_	10	advcl	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	hurt	_	VB	VB	_	3	xcomp	_	_
6	him	_	PRP	PRP	_	5	dobj	_	_
7	,	_	,	,	_	10	punct	_	_
8	i	_	JJ	JJ	_	9	amod	_	_
9	dont	_	NN	NN	_	10	nsubj	_	_
10	want	_	VBP	VBP	_	0	root	_	_
11	him	_	PRP	PRP	_	10	dobj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	hurt	_	VB	VB	_	10	xcomp	_	_
14	himself	_	PRP	PRP	_	13	dobj	_	_

Oracle:
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, h / hurt-01)
(w2 / want-01, ARG0, i2 / i)
(w2 / want-01, ARG1, h3 / hurt-01)

Input(Some(Graph((multi-sentence :snt1 (want-01 :ARG1 (hurt-01 :ARG1 he) :ARG0 i :polarity -) :snt2 (want-01 :ARG1 (hurt-01 :ARG0 he :ARG1 he) :ARG0 i :polarity -)),ArrayBuffer(Span(2,3,List(0),want,want-01,false), Span(4,5,List(1),hurt,hurt-01,false), Span(0,1,List(2),i,i,false), Span(9,10,List(3),want,want-01,false), Span(12,13,List(4),hurt,hurt-01,false), Span(7,8,List(5),i,i,false)),Map(2 -> i, 5 -> i, 1 -> hurt-01, 4 -> hurt-01, 0 -> want-01, 3 -> want-01),Map(w -> want-01, h -> hurt-01, i2 -> i, w2 -> want-01, i -> i, h3 -> hurt-01))),[Ljava.lang.String;@d62fe5b,Annotation([Ljava.lang.String;@49964d75,[Ljava.lang.String;@528c868,[Ljava.lang.String;@466276d8),Annotation([Ljava.lang.String;@5ce8d869,[Ljava.lang.String;@27eedb64,[Ledu.cmu.lti.nlp.amr.Dependency;@64c63c79),Annotation([Ljava.lang.String;@31c7528f,[Ljava.lang.String;@2b76ff4e,[Ljava.lang.String;@7a1234bf),Annotation([Ljava.lang.String;@2f62ea70,[Ljava.lang.String;@24ba9639,[Ledu.cmu.lti.nlp.amr.Entity;@38aa816f))
AMR:
(h / hurt-01, ARG1, i2 / i)
(i / i, op, w / want-01)
(w / want-01, ARG1, h / hurt-01)
(w2 / want-01, ARG1, h3 / hurt-01)
(w2 / want-01, time, i / i)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 40,015 microseconds
Sentence: what do i do

Oracle Span 1:  do => do-02
Oracle Span 2:  i => i
Spans:
Span 1-2:  do => do-02
Span 2-3:  i => i

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  do => do-02
Oracle Span 2-3:  i => i

Dependencies:
1	what	_	WP	WP	_	4	dobj	_	_
2	do	_	VBP	VBP	_	4	aux	_	_
3	i	_	FW	FW	_	4	nsubj	_	_
4	do	_	VB	VB	_	0	root	_	_

Oracle:
(d / do-02, ARG0, i / i)

Input(Some(Graph((do-02 :ARG1 amr-unknown :ARG0 i),ArrayBuffer(Span(1,2,List(0),do,do-02,false), Span(2,3,List(1),i,i,false)),Map(1 -> i, 0 -> do-02),Map(d -> do-02, i -> i))),[Ljava.lang.String;@53f6fd09,Annotation([Ljava.lang.String;@6bffbc6d,[Ljava.lang.String;@1b84f475,[Ljava.lang.String;@7749bf93),Annotation([Ljava.lang.String;@13330ac6,[Ljava.lang.String;@539d019,[Ledu.cmu.lti.nlp.amr.Dependency;@39a2bb97),Annotation([Ljava.lang.String;@3ad2e17,[Ljava.lang.String;@8c3619e,[Ljava.lang.String;@4331d187),Annotation([Ljava.lang.String;@6f63b475,[Ljava.lang.String;@554e218,[Ledu.cmu.lti.nlp.amr.Entity;@1608bcbd))
AMR:
(d / do-02, ARG1, i / i)

WARNING: makeIds can't find span Id: 0.0
Decoded in 4,798 microseconds
Sentence: thanks you for reading

Oracle Span 1:  reading => read-01
Oracle Span 2:  thanks => thank-01
Oracle Span 3:  you => you
Spans:
Span 3-4:  reading => read-01
Span 0-1:  thanks => thank-01
Span 1-2:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  reading => read-01
Oracle Span 0-1:  thanks => thank-01
Oracle Span 1-2:  you => you

Dependencies:
1	thanks	_	NNS	NNS	_	0	root	_	_
2	you	_	PRP	PRP	_	1	dep	_	_
3	for	_	IN	IN	_	2	prep	_	_
4	reading	_	NN	NN	_	3	pobj	_	_

Oracle:
(r / read-01, ARG0, y / you)
(t / thank-01, ARG1, y / you)
(t / thank-01, ARG2, r / read-01)

Input(Some(Graph((thank-01 :ARG2 (read-01 :ARG0 you) :ARG1 you :ARG0 i),ArrayBuffer(Span(0,1,List(0),thanks,thank-01,false), Span(3,4,List(1),reading,read-01,false), Span(1,2,List(2),you,you,false)),Map(2 -> you, 1 -> read-01, 0 -> thank-01),Map(t -> thank-01, y -> you, r -> read-01))),[Ljava.lang.String;@5bf8fa12,Annotation([Ljava.lang.String;@29ca3d04,[Ljava.lang.String;@b2c5e07,[Ljava.lang.String;@5812f68b),Annotation([Ljava.lang.String;@4426bff1,[Ljava.lang.String;@3c7c886c,[Ledu.cmu.lti.nlp.amr.Dependency;@55493582),Annotation([Ljava.lang.String;@1a20270e,[Ljava.lang.String;@6b88ca8c,[Ljava.lang.String;@336f1079),Annotation([Ljava.lang.String;@2f16c6b3,[Ljava.lang.String;@34158c08,[Ledu.cmu.lti.nlp.amr.Entity;@19e4fcac))
AMR:
(r / read-01, ARG1, y / you)
(t / thank-01, ARG1, y / you)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
Decoded in 7,575 microseconds
Sentence: Are you on any drugs or getting any therapy?

Oracle Span 1:  any => any
Oracle Span 2:  any => any
Oracle Span 3:  drugs => drug
Oracle Span 4:  getting => get-01
Oracle Span 5:  or => or
Oracle Span 6:  therapy => therapy
Oracle Span 7:  you => you
Spans:
Span 3-4:  any => any
Span 7-8:  any => any
Span 4-5:  drugs => drug
Span 6-7:  getting => get-01
Span 5-6:  or => or
Span 8-9:  therapy => therapy
Span 1-2:  you => you

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 3-4:  any => any
Oracle Span 7-8:  any => any
Oracle Span 4-5:  drugs => drug
Oracle Span 6-7:  getting => get-01
Oracle Span 5-6:  or => or
Oracle Span 8-9:  therapy => therapy
Oracle Span 1-2:  you => you

Dependencies:
1	Are	_	VBP	VBP	_	5	aux	_	_
2	you	_	PRP	PRP	_	5	nsubj	_	_
3	on	_	IN	IN	_	5	advmod	_	_
4	any	_	DT	DT	_	3	dep	_	_
5	drugs	_	VBG	VBG	_	0	root	_	_
6	or	_	CC	CC	_	5	cc	_	_
7	getting	_	VBG	VBG	_	5	conj	_	_
8	any	_	DT	DT	_	9	det	_	_
9	therapy	_	NN	NN	_	7	dobj	_	_
10	?	_	.	.	_	5	punct	_	_

Oracle:
(d / drug, mod, a / any)
(g / get-01, ARG0, d / drug)
(g / get-01, ARG1, t / therapy)
(o / or, op, g / get-01)
(o / or, op, y2 / you)
(t / therapy, mod, a2 / any)
(y2 / you, prep-on, d / drug)

Input(Some(Graph((or :op (get-01 :ARG1 (therapy :mod any) :ARG0 drug) :op (you :prep-on (drug :mod any))),ArrayBuffer(Span(5,6,List(0),or,or,false), Span(6,7,List(1),getting,get-01,false), Span(8,9,List(2),therapy,therapy,false), Span(3,4,List(3),any,any,false), Span(1,2,List(4),you,you,false), Span(4,5,List(5),drugs,drug,false), Span(7,8,List(6),any,any,false)),Map(2 -> therapy, 5 -> drug, 1 -> get-01, 4 -> you, 6 -> any, 0 -> or, 3 -> any),Map(t -> therapy, d -> drug, g -> get-01, a -> any, a2 -> any, o -> or, y2 -> you))),[Ljava.lang.String;@52c3cb31,Annotation([Ljava.lang.String;@4b79ac84,[Ljava.lang.String;@53941c2f,[Ljava.lang.String;@6dab9b6d),Annotation([Ljava.lang.String;@21fd5faa,[Ljava.lang.String;@2766ca9d,[Ledu.cmu.lti.nlp.amr.Dependency;@5460cf3a),Annotation([Ljava.lang.String;@65a15628,[Ljava.lang.String;@2e6a5539,[Ljava.lang.String;@3fc9504b),Annotation([Ljava.lang.String;@6d025197,[Ljava.lang.String;@27d4a09,[Ledu.cmu.lti.nlp.amr.Entity;@7e4204e2))
AMR:
(d / drug, mod, a2 / any)
(g / get-01, ARG1, t / therapy)
(g / get-01, ARG6, y2 / you)
(o / or, op, d / drug)
(o / or, op, g / get-01)
(t / therapy, mod, a / any)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 179,464 microseconds
Sentence: It might be an idea to talk to your school nurse or your GP and tell them what's going on.

Oracle Span 1:  and => and
Oracle Span 2:  going => (thing :ARG1-of go-00)
Oracle Span 3:  nurse => (have-org-role-91 :ARG2 nurse)
Oracle Span 4:  or => or
Oracle Span 5:  school => school
Oracle Span 6:  talk => talk-01
Oracle Span 7:  tell => tell-01
Spans:
Span 14-15:  and => and
Span 19-20:  going => (thing :ARG1-of go-00)
Span 10-11:  nurse => (have-org-role-91 :ARG2 nurse)
Span 11-12:  or => or
Span 9-10:  school => school
Span 6-7:  talk => talk-01
Span 15-16:  tell => tell-01

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 19-20:  going => (thing :ARG1-of go-00)
Oracle Span 10-11:  nurse => (have-org-role-91 :ARG2 nurse)
Oracle Span 11-12:  or => or
Oracle Span 9-10:  school => school
Oracle Span 6-7:  talk => talk-01
Oracle Span 15-16:  tell => tell-01

Dependencies:
1	It	_	PRP	PRP	_	5	nsubj	_	_
2	might	_	MD	MD	_	5	aux	_	_
3	be	_	VB	VB	_	5	cop	_	_
4	an	_	DT	DT	_	5	det	_	_
5	idea	_	NN	NN	_	0	root	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	talk	_	VB	VB	_	5	vmod	_	_
8	to	_	TO	TO	_	7	prep	_	_
9	your	_	PRP$	PRP$	_	11	poss	_	_
10	school	_	NN	NN	_	11	nn	_	_
11	nurse	_	NN	NN	_	8	pobj	_	_
12	or	_	CC	CC	_	11	cc	_	_
13	your	_	PRP$	PRP$	_	14	poss	_	_
14	GP	_	NN	NN	_	11	conj	_	_
15	and	_	CC	CC	_	7	cc	_	_
16	tell	_	VB	VB	_	7	conj	_	_
17	them	_	PRP	PRP	_	16	dobj	_	_
18	what	_	WP	WP	_	20	nsubj	_	_
19	's	_	VBZ	VBZ	_	20	aux	_	_
20	going	_	VBG	VBG	_	16	dep	_	_
21	on	_	RP	RP	_	20	prt	_	_
22	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, t / talk-01)
(a / and, op, t2 / tell-01)
(g2 / go-00, ARG1, t3 / thing)
(h2 / have-org-role-91, ARG1, s / school)
(h2 / have-org-role-91, ARG2, n / nurse)
(t / talk-01, ARG2, o / or)
(t2 / tell-01, ARG1, t3 / thing)
(t2 / tell-01, ARG2, a / and)

Input(Some(Graph((recommend-01 :ARG1 (and :op (tell-01 :ARG1 (thing :ARG1-of go-00) :ARG2 and) :op (talk-01 :ARG2 (or :op (practitioner :mod general :poss you) :op (person :ARG0-of (have-org-role-91 :ARG2 nurse :ARG1 (school :poss you)))) :ARG0 you))),ArrayBuffer(Span(14,15,List(0),and,and,false), Span(15,16,List(1),tell,tell-01,false), Span(19,20,List(2, 3),going,(thing :ARG1-of go-00),false), Span(6,7,List(4),talk,talk-01,false), Span(11,12,List(5),or,or,false), Span(9,10,List(6),school,school,false), Span(10,11,List(7, 8),nurse,(have-org-role-91 :ARG2 nurse),false)),Map(2 -> thing, 5 -> or, 8 -> nurse, 7 -> have-org-role-91, 1 -> tell-01, 4 -> talk-01, 6 -> school, 0 -> and, 3 -> go-00),Map(n -> nurse, h2 -> have-org-role-91, t -> talk-01, s -> school, g2 -> go-00, t3 -> thing, a -> and, t2 -> tell-01, o -> or))),[Ljava.lang.String;@b7c4869,Annotation([Ljava.lang.String;@740d2e78,[Ljava.lang.String;@1c481ff2,[Ljava.lang.String;@72437d8d),Annotation([Ljava.lang.String;@1b955cac,[Ljava.lang.String;@676cf48,[Ledu.cmu.lti.nlp.amr.Dependency;@5a1de7fb),Annotation([Ljava.lang.String;@335b5620,[Ljava.lang.String;@29a0cdb,[Ljava.lang.String;@32a68f4f),Annotation([Ljava.lang.String;@73194df,[Ljava.lang.String;@6eb2384f,[Ledu.cmu.lti.nlp.amr.Entity;@3c9c0d96))
AMR:
(a / and, op, t / talk-01)
(a / and, op, t2 / tell-01)
(g2 / go-00, ARG1, t3 / thing)
(h2 / have-org-role-91, ARG1, s / school)
(h2 / have-org-role-91, ARG2, n / nurse)
(t / talk-01, ARG1, o / or)
(t / talk-01, ARG2, s / school)
(t2 / tell-01, ARG1, t3 / thing)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.1
Decoded in 272,180 microseconds
Sentence: Perhaps there's a teacher at school who you trust and could tell.

Oracle Span 1:  could => possible
Oracle Span 2:  school => (have-org-role-91 :ARG1 school)
Oracle Span 3:  teacher => teach-01
Oracle Span 4:  tell => tell-01
Oracle Span 5:  trust => (person :ARG2-of trust-01)
Oracle Span 6:  you => you
Spans:
Span 11-12:  could => possible
Span 6-7:  school => (have-org-role-91 :ARG1 school)
Span 4-5:  teacher => teach-01
Span 12-13:  tell => tell-01
Span 9-10:  trust => (person :ARG2-of trust-01)
Span 8-9:  you => you

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 11-12:  could => possible
Oracle Span 6-7:  school => (have-org-role-91 :ARG1 school)
Oracle Span 4-5:  teacher => teach-01
Oracle Span 12-13:  tell => tell-01
Oracle Span 9-10:  trust => (person :ARG2-of trust-01)
Oracle Span 8-9:  you => you

Dependencies:
1	Perhaps	_	RB	RB	_	3	advmod	_	_
2	there	_	EX	EX	_	3	expl	_	_
3	's	_	VBZ	VBZ	_	0	root	_	_
4	a	_	DT	DT	_	5	det	_	_
5	teacher	_	NN	NN	_	3	nsubj	_	_
6	at	_	IN	IN	_	5	prep	_	_
7	school	_	NN	NN	_	6	pobj	_	_
8	who	_	WP	WP	_	10	dobj	_	_
9	you	_	PRP	PRP	_	10	nsubj	_	_
10	trust	_	VBP	VBP	_	5	rcmod	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	could	_	MD	MD	_	13	aux	_	_
13	tell	_	VB	VB	_	10	conj	_	_
14	.	_	.	.	_	3	punct	_	_

Oracle:
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, s / school)
(h / have-org-role-91, ARG3, t / teach-01)
(p / possible, domain, p3 / person)
(t2 / trust-01, ARG0, y / you)
(t2 / trust-01, ARG2, p3 / person)
(t3 / tell-01, ARG0, y / you)
(t3 / tell-01, ARG2, p3 / person)

Input(Some(Graph((possible :domain (person :ARG0-of (have-org-role-91 :ARG3 teach-01 :ARG1 school) :ARG2-of (tell-01 :mod possible :ARG0 you) :ARG2-of (trust-01 :ARG0 you))),ArrayBuffer(Span(11,12,List(0),could,possible,false), Span(9,10,List(1, 2),trust,(person :ARG2-of trust-01),false), Span(8,9,List(3),you,you,false), Span(12,13,List(4),tell,tell-01,false), Span(6,7,List(5, 6),school,(have-org-role-91 :ARG1 school),false), Span(4,5,List(7),teacher,teach-01,false)),Map(2 -> trust-01, 5 -> have-org-role-91, 7 -> teach-01, 1 -> person, 4 -> tell-01, 6 -> school, 0 -> possible, 3 -> you),Map(h -> have-org-role-91, t -> teach-01, s -> school, t3 -> tell-01, y -> you, p -> possible, t2 -> trust-01, p3 -> person))),[Ljava.lang.String;@3a4621bd,Annotation([Ljava.lang.String;@31dadd46,[Ljava.lang.String;@4ed5eb72,[Ljava.lang.String;@12f9af83),Annotation([Ljava.lang.String;@19b93fa8,[Ljava.lang.String;@7e6ef134,[Ledu.cmu.lti.nlp.amr.Dependency;@1f010bf0),Annotation([Ljava.lang.String;@40db2a24,[Ljava.lang.String;@10cf09e8,[Ljava.lang.String;@1921ad94),Annotation([Ljava.lang.String;@ee86bcb,[Ljava.lang.String;@177bea38,[Ledu.cmu.lti.nlp.amr.Entity;@7f132176))
AMR:
(h / have-org-role-91, ARG1, s / school)
(p / possible, domain, t3 / tell-01)
(t / teach-01, ARG1, y / you)
(t2 / trust-01, ARG0, y / you)
(t2 / trust-01, ARG1, h / have-org-role-91)
(t2 / trust-01, ARG2, p3 / person)
(t3 / tell-01, ARG1, t / teach-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.1
Decoded in 209,309 microseconds
Sentence: If you tell people they can help you,

Oracle Span 1:  can => possible
Oracle Span 2:  help => help-01
Oracle Span 3:  tell => tell-01
Oracle Span 4:  you => you
Spans:
Span 5-6:  can => possible
Span 6-7:  help => help-01
Span 2-3:  tell => tell-01
Span 1-2:  you => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  can => possible
Oracle Span 6-7:  help => help-01
Oracle Span 2-3:  tell => tell-01
Oracle Span 1-2:  you => you

Dependencies:
1	If	_	IN	IN	_	3	mark	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	tell	_	VBP	VBP	_	0	root	_	_
4	people	_	NNS	NNS	_	3	dobj	_	_
5	they	_	PRP	PRP	_	7	nsubj	_	_
6	can	_	MD	MD	_	7	aux	_	_
7	help	_	VB	VB	_	4	rcmod	_	_
8	you	_	PRP	PRP	_	7	dobj	_	_
9	,	_	,	,	_	7	punct	_	_

Oracle:
(h / help-01, ARG1, y / you)
(p / possible, condition, t / tell-01)
(p / possible, domain, h / help-01)
(t / tell-01, ARG0, y / you)

Input(Some(Graph((possible :condition (tell-01 :ARG0 you :ARG2 person) :domain (help-01 :ARG1 you :ARG0 person)),ArrayBuffer(Span(5,6,List(0),can,possible,false), Span(2,3,List(1),tell,tell-01,false), Span(6,7,List(2),help,help-01,false), Span(1,2,List(3),you,you,false)),Map(2 -> help-01, 1 -> tell-01, 0 -> possible, 3 -> you),Map(h -> help-01, t -> tell-01, y -> you, p -> possible))),[Ljava.lang.String;@6bca7e0d,Annotation([Ljava.lang.String;@2631f68c,[Ljava.lang.String;@6ed3f258,[Ljava.lang.String;@8ad6665),Annotation([Ljava.lang.String;@30af5b6b,[Ljava.lang.String;@19835e64,[Ledu.cmu.lti.nlp.amr.Dependency;@68b32e3e),Annotation([Ljava.lang.String;@bcef303,[Ljava.lang.String;@41709512,[Ljava.lang.String;@42039326),Annotation([Ljava.lang.String;@33308786,[Ljava.lang.String;@4f9a2c08,[Ledu.cmu.lti.nlp.amr.Entity;@a87f8ec))
AMR:
(p / possible, domain, h / help-01)
(t / tell-01, ARG0, y / you)
(t / tell-01, ARG1, h / help-01)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 15,567 microseconds
Sentence: if you keep it bottled up inside it's likely to only get worse.

Oracle Span 1:  bottled => bottle-02
Oracle Span 2:  inside => inside
Oracle Span 3:  it => it
Oracle Span 4:  it => it
Oracle Span 5:  keep => keep-01
Oracle Span 6:  likely => likely
Oracle Span 7:  only => only
Oracle Span 8:  worse => worsen-01
Oracle Span 9:  you => you
Spans:
Span 4-5:  bottled => bottle-02
Span 6-7:  inside => inside
Span 3-4:  it => it
Span 7-8:  it => it
Span 2-3:  keep => keep-01
Span 9-10:  likely => likely
Span 11-12:  only => only
Span 13-14:  worse => worsen-01
Span 1-2:  you => you

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 4-5:  bottled => bottle-02
Oracle Span 6-7:  inside => inside
Oracle Span 3-4:  it => it
Oracle Span 7-8:  it => it
Oracle Span 2-3:  keep => keep-01
Oracle Span 9-10:  likely => likely
Oracle Span 11-12:  only => only
Oracle Span 13-14:  worse => worsen-01
Oracle Span 1-2:  you => you

Dependencies:
1	if	_	IN	IN	_	3	mark	_	_
2	you	_	PRP	PRP	_	3	nsubj	_	_
3	keep	_	VBP	VBP	_	10	advcl	_	_
4	it	_	PRP	PRP	_	5	nsubj	_	_
5	bottled	_	VBN	VBN	_	3	dep	_	_
6	up	_	RP	RP	_	5	prt	_	_
7	inside	_	RB	RB	_	5	advmod	_	_
8	it	_	PRP	PRP	_	10	nsubj	_	_
9	's	_	VBZ	VBZ	_	10	cop	_	_
10	likely	_	JJ	JJ	_	0	root	_	_
11	to	_	TO	TO	_	14	aux	_	_
12	only	_	RB	RB	_	14	advmod	_	_
13	get	_	VB	VB	_	14	dep	_	_
14	worse	_	JJR	JJR	_	10	xcomp	_	_
15	.	_	.	.	_	10	punct	_	_

Oracle:
(b / bottle-02, ARG1, i4 / it)
(i4 / it, location, i3 / inside)
(k / keep-01, ARG0, y / you)
(k / keep-01, ARG1, i4 / it)
(l / likely, condition, k / keep-01)
(l / likely, domain, w / worsen-01)
(w / worsen-01, ARG1, i / it)
(w / worsen-01, mod, o / only)

Input(Some(Graph((likely :condition (keep-01 :ARG1 (it :location inside :ARG1-of bottle-02) :ARG0 you) :domain (worsen-01 :mod only :ARG1 it)),ArrayBuffer(Span(9,10,List(0),likely,likely,false), Span(2,3,List(1),keep,keep-01,false), Span(3,4,List(2),it,it,false), Span(6,7,List(3),inside,inside,false), Span(4,5,List(4),bottled,bottle-02,false), Span(1,2,List(5),you,you,false), Span(7,8,List(6),it,it,false), Span(11,12,List(7),only,only,false), Span(13,14,List(8),worse,worsen-01,false)),Map(2 -> it, 5 -> you, 8 -> worsen-01, 7 -> only, 1 -> keep-01, 4 -> bottle-02, 6 -> it, 0 -> likely, 3 -> inside),Map(w -> worsen-01, i4 -> it, b -> bottle-02, k -> keep-01, y -> you, i3 -> inside, i -> it, l -> likely, o -> only))),[Ljava.lang.String;@5443d039,Annotation([Ljava.lang.String;@63787180,[Ljava.lang.String;@7d1cfb8b,[Ljava.lang.String;@48e92c5c),Annotation([Ljava.lang.String;@2e1ef60,[Ljava.lang.String;@22356acd,[Ledu.cmu.lti.nlp.amr.Dependency;@386f0da3),Annotation([Ljava.lang.String;@39655d3e,[Ljava.lang.String;@34f22f9d,[Ljava.lang.String;@3d1848cc),Annotation([Ljava.lang.String;@7dda48d9,[Ljava.lang.String;@6e4566f1,[Ledu.cmu.lti.nlp.amr.Entity;@4b6e2263))
AMR:
(b / bottle-02, ARG0, i4 / it)
(b / bottle-02, ARG1, i3 / inside)
(k / keep-01, ARG0, y / you)
(k / keep-01, ARG1, b / bottle-02)
(l / likely, domain, i / it)
(l / likely, time, k / keep-01)
(w / worsen-01, ARG1, l / likely)
(w / worsen-01, ARG6, o / only)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 223,732 microseconds
Sentence: Trust me, it's better to get these things as early as possible rather than let them get even worse.

Oracle Span 1:  better => good
Oracle Span 2:  early => early
Oracle Span 3:  even => even
Oracle Span 4:  get => get-01
Oracle Span 5:  let => let-01
Oracle Span 6:  possible => possible
Oracle Span 7:  things => thing
Oracle Span 8:  Trust => trust-01
Oracle Span 9:  worse => worsen-01
Spans:
Span 5-6:  better => good
Span 11-12:  early => early
Span 19-20:  even => even
Span 7-8:  get => get-01
Span 16-17:  let => let-01
Span 13-14:  possible => possible
Span 9-10:  things => thing
Span 0-1:  Trust => trust-01
Span 20-21:  worse => worsen-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 5-6:  better => good
Oracle Span 11-12:  early => early
Oracle Span 19-20:  even => even
Oracle Span 7-8:  get => get-01
Oracle Span 16-17:  let => let-01
Oracle Span 13-14:  possible => possible
Oracle Span 9-10:  things => thing
Oracle Span 0-1:  Trust => trust-01
Oracle Span 20-21:  worse => worsen-01

Dependencies:
1	Trust	_	NNP	NNP	_	6	nsubj	_	_
2	me	_	PRP	PRP	_	1	dep	_	_
3	,	_	,	,	_	6	punct	_	_
4	it	_	PRP	PRP	_	6	nsubj	_	_
5	's	_	VBZ	VBZ	_	6	cop	_	_
6	better	_	JJR	JJR	_	0	root	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	get	_	VB	VB	_	6	xcomp	_	_
9	these	_	DT	DT	_	10	det	_	_
10	things	_	NNS	NNS	_	8	dobj	_	_
11	as	_	RB	RB	_	12	advmod	_	_
12	early	_	RB	RB	_	8	advmod	_	_
13	as	_	IN	IN	_	12	prep	_	_
14	possible	_	JJ	JJ	_	13	pobj	_	_
15	rather	_	RB	RB	_	8	cc	_	_
16	than	_	IN	IN	_	15	mwe	_	_
17	let	_	VB	VB	_	8	conj	_	_
18	them	_	PRP	PRP	_	21	nsubj	_	_
19	get	_	VB	VB	_	21	dep	_	_
20	even	_	RB	RB	_	21	advmod	_	_
21	worse	_	JJR	JJR	_	17	ccomp	_	_
22	.	_	.	.	_	6	punct	_	_

Oracle:
(e / early, mod, p / possible)
(g / good, domain, g2 / get-01)
(g2 / get-01, ARG1, t2 / thing)
(g2 / get-01, time, e / early)
(l / let-01, ARG1, w / worsen-01)
(w / worsen-01, ARG1, t2 / thing)
(w / worsen-01, mod, e2 / even)

Input(Some(Graph((multi-sentence :snt1 (trust-01 :ARG2 i) :snt2 (good :domain (get-01 :ARG1-of (contrast-01 :ARG2 (let-01 :ARG1 (worsen-01 :mod even :ARG1 thing))) :time (early :mod possible) :ARG1 (thing :mod this)) :degree more)),ArrayBuffer(Span(0,1,List(0),Trust,trust-01,false), Span(5,6,List(1),better,good,false), Span(7,8,List(2),get,get-01,false), Span(16,17,List(3),let,let-01,false), Span(19,20,List(4),even,even,false), Span(11,12,List(5),early,early,false), Span(13,14,List(6),possible,possible,false), Span(9,10,List(7),things,thing,false), Span(20,21,List(8),worse,worsen-01,false)),Map(2 -> get-01, 5 -> early, 8 -> worsen-01, 7 -> thing, 1 -> good, 4 -> even, 6 -> possible, 0 -> trust-01, 3 -> let-01),Map(e -> early, w -> worsen-01, t -> trust-01, e2 -> even, g2 -> get-01, p -> possible, g -> good, t2 -> thing, l -> let-01))),[Ljava.lang.String;@344f4dea,Annotation([Ljava.lang.String;@1b7c473a,[Ljava.lang.String;@5e4bd84a,[Ljava.lang.String;@648c94da),Annotation([Ljava.lang.String;@2a62b5bc,[Ljava.lang.String;@53de625d,[Ledu.cmu.lti.nlp.amr.Dependency;@535779e4),Annotation([Ljava.lang.String;@53fd0d10,[Ljava.lang.String;@6c0d9d86,[Ljava.lang.String;@4ce1d6d0),Annotation([Ljava.lang.String;@24111ef1,[Ljava.lang.String;@1f3f02ee,[Ledu.cmu.lti.nlp.amr.Entity;@1fde5d22))
AMR:
(e / early, degree, p / possible)
(g / good, domain, t / trust-01)
(g2 / get-01, ARG1, t2 / thing)
(g2 / get-01, ARG6, e / early)
(l / let-01, ARG0, e2 / even)
(l / let-01, ARG1, t2 / thing)
(t / trust-01, ARG1, g2 / get-01)
(w / worsen-01, ARG1, e2 / even)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.0
Decoded in 229,970 microseconds
Sentence: Please don't do this,

Oracle Span 1:  do => do-02
Oracle Span 2:  this => this
Spans:
Span 1-2:  do => do-02
Span 4-5:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  do => do-02
Oracle Span 4-5:  this => this

Dependencies:
1	Please	_	NNP	NNP	_	4	nsubj	_	_
2	do	_	VBP	VBP	_	4	aux	_	_
3	n't	_	RB	RB	_	4	neg	_	_
4	do	_	VB	VB	_	0	root	_	_
5	this	_	DT	DT	_	4	dobj	_	_
6	,	_	,	,	_	4	punct	_	_

Oracle:
(d / do-02, ARG1, t / this)

Input(Some(Graph((do-02 :ARG1 this :ARG0 you :polite + :mode imperative :polarity -),ArrayBuffer(Span(1,2,List(0),do,do-02,false), Span(4,5,List(1),this,this,false)),Map(1 -> this, 0 -> do-02),Map(t -> this, d -> do-02))),[Ljava.lang.String;@5dcb4f5f,Annotation([Ljava.lang.String;@71812481,[Ljava.lang.String;@16ce702d,[Ljava.lang.String;@7b94089b),Annotation([Ljava.lang.String;@7ca20101,[Ljava.lang.String;@47f9738,[Ledu.cmu.lti.nlp.amr.Dependency;@6155d082),Annotation([Ljava.lang.String;@3a5ecce3,[Ljava.lang.String;@561868a0,[Ljava.lang.String;@2ea6e30c),Annotation([Ljava.lang.String;@6138e79a,[Ljava.lang.String;@2dcd168a,[Ledu.cmu.lti.nlp.amr.Entity;@388526fb))
AMR:
(d / do-02, ARG1, t / this)

WARNING: makeIds can't find span Id: 0.4
Decoded in 6,768 microseconds
Sentence: I'm 17 I started self harming last year, mainly cutting my arms, but I have stopped since the last few months,

Oracle Span 1:  17 => 17
Oracle Span 2:  arms => arm
Oracle Span 3:  but => contrast-01
Oracle Span 4:  cutting => cut-01
Oracle Span 5:  few => few
Oracle Span 6:  harming => harm-01
Oracle Span 7:  I => i
Oracle Span 8:  last => last
Oracle Span 9:  last => last
Oracle Span 10:  mainly => main
Oracle Span 11:  months => (temporal-quantity :unit month)
Oracle Span 12:  self => self
Oracle Span 13:  since => since
Oracle Span 14:  started => start-01
Oracle Span 15:  stopped => stop-01
Oracle Span 16:  year => (temporal-quantity :unit year)
Spans:
Span 2-3:  17 => 17
Span 13-14:  arms => arm
Span 15-16:  but => contrast-01
Span 11-12:  cutting => cut-01
Span 22-23:  few => few
Span 6-7:  harming => harm-01
Span 0-1:  I => i
Span 7-8:  last => last
Span 21-22:  last => last
Span 10-11:  mainly => main
Span 23-24:  months => (temporal-quantity :unit month)
Span 5-6:  self => self
Span 19-20:  since => since
Span 4-5:  started => start-01
Span 18-19:  stopped => stop-01
Span 8-9:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 2-3:  17 => 17
Oracle Span 13-14:  arms => arm
Oracle Span 15-16:  but => contrast-01
Oracle Span 11-12:  cutting => cut-01
Oracle Span 22-23:  few => few
Oracle Span 6-7:  harming => harm-01
Oracle Span 0-1:  I => i
Oracle Span 7-8:  last => last
Oracle Span 21-22:  last => last
Oracle Span 10-11:  mainly => main
Oracle Span 23-24:  months => (temporal-quantity :unit month)
Oracle Span 5-6:  self => self
Oracle Span 19-20:  since => since
Oracle Span 4-5:  started => start-01
Oracle Span 18-19:  stopped => stop-01
Oracle Span 8-9:  year => (temporal-quantity :unit year)

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	'm	_	VBP	VBP	_	3	cop	_	_
3	17	_	CD	CD	_	0	root	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	started	_	VBD	VBD	_	3	rcmod	_	_
6	self	_	NN	NN	_	7	nn	_	_
7	harming	_	NN	NN	_	5	dobj	_	_
8	last	_	JJ	JJ	_	9	amod	_	_
9	year	_	NN	NN	_	5	tmod	_	_
10	,	_	,	,	_	5	punct	_	_
11	mainly	_	RB	RB	_	12	advmod	_	_
12	cutting	_	VBG	VBG	_	5	vmod	_	_
13	my	_	PRP$	PRP$	_	14	poss	_	_
14	arms	_	NNS	NNS	_	12	dobj	_	_
15	,	_	,	,	_	5	punct	_	_
16	but	_	CC	CC	_	5	cc	_	_
17	I	_	PRP	PRP	_	19	nsubj	_	_
18	have	_	VBP	VBP	_	19	aux	_	_
19	stopped	_	VBN	VBN	_	5	conj	_	_
20	since	_	IN	IN	_	19	prep	_	_
21	the	_	DT	DT	_	24	det	_	_
22	last	_	JJ	JJ	_	24	amod	_	_
23	few	_	JJ	JJ	_	24	amod	_	_
24	months	_	NNS	NNS	_	20	pobj	_	_
25	,	_	,	,	_	3	punct	_	_

Oracle:
(c / contrast-01, ARG2, s3 / stop-01)
(c2 / cut-01, ARG1, a3 / arm)
(c2 / cut-01, mod, m3 / main)
(f / few, op, t3 / temporal-quantity)
(h / harm-01, ARG1, s2 / self)
(i / i, part, a3 / arm)
(s / start-01, ARG0, i / i)
(s / start-01, ARG1, h / harm-01)
(s3 / stop-01, ARG0, i / i)
(s3 / stop-01, ARG1, h / harm-01)
(s3 / stop-01, time, s4 / since)
(s4 / since, op, f / few)
(t2 / temporal-quantity, quant, 1 / 17)
(t2 / temporal-quantity, unit, y / year)
(t3 / temporal-quantity, mod, l2 / last)
(t3 / temporal-quantity, unit, m4 / month)

Input(Some(Graph((contrast-01 :ARG2 (stop-01 :time (since :op (few :op (temporal-quantity :mod last :unit month :quant 1))) :ARG0 i :ARG1 harm-01) :ARG1 (and :op (age-01 :ARG1 i :ARG2 (temporal-quantity :unit year :quant 17)) :op (start-01 :time (year :mod last) :ARG1 (harm-01 :ARG0-of (mean-01 :ARG1 (cut-01 :mod main :ARG1 (arm :part-of i))) :ARG1 self) :ARG0 i))),ArrayBuffer(Span(15,16,List(0),but,contrast-01,false), Span(18,19,List(1),stopped,stop-01,false), Span(19,20,List(2),since,since,false), Span(22,23,List(3),few,few,false), Span(23,24,List(4, 5),months,(temporal-quantity :unit month),false), Span(7,8,List(6),last,last,false), Span(0,1,List(7),I,i,false), Span(2,3,List(8),17,17,false), Span(8,9,List(9, 10),year,(temporal-quantity :unit year),false), Span(4,5,List(11),started,start-01,false), Span(21,22,List(12),last,last,false), Span(6,7,List(13),harming,harm-01,false), Span(11,12,List(14),cutting,cut-01,false), Span(13,14,List(15),arms,arm,false), Span(5,6,List(16),self,self,false), Span(10,11,List(17),mainly,main,false)),Map(2 -> since, 5 -> month, 12 -> last, 15 -> arm, 8 -> 17, 7 -> i, 17 -> main, 1 -> stop-01, 4 -> temporal-quantity, 11 -> start-01, 14 -> cut-01, 6 -> last, 9 -> temporal-quantity, 0 -> contrast-01, 16 -> self, 10 -> year, 3 -> few, 13 -> harm-01),Map(m3 -> main, h -> harm-01, s2 -> self, a3 -> arm, s -> start-01, s4 -> since, 1 -> 17, t3 -> temporal-quantity, y -> year, t2 -> temporal-quantity, m4 -> month, l2 -> last, i -> i, s3 -> stop-01, c -> contrast-01, l -> last, f -> few, c2 -> cut-01))),[Ljava.lang.String;@21a21c64,Annotation([Ljava.lang.String;@7803bfd,[Ljava.lang.String;@42bc14c1,[Ljava.lang.String;@531f4093),Annotation([Ljava.lang.String;@62ef27a8,[Ljava.lang.String;@6436a7db,[Ledu.cmu.lti.nlp.amr.Dependency;@460ebd80),Annotation([Ljava.lang.String;@6f3c660a,[Ljava.lang.String;@74f5ce22,[Ljava.lang.String;@25aca718),Annotation([Ljava.lang.String;@16fdec90,[Ljava.lang.String;@1afdd473,[Ledu.cmu.lti.nlp.amr.Entity;@40238dd0))
AMR:
(c / contrast-01, ARG1, s / start-01)
(c / contrast-01, ARG2, s3 / stop-01)
(c / contrast-01, time, 1 / 17)
(c2 / cut-01, ARG1, a3 / arm)
(c2 / cut-01, ARG6, t2 / temporal-quantity)
(c2 / cut-01, manner, m3 / main)
(f / few, op, t3 / temporal-quantity)
(h / harm-01, ARG1, s2 / self)
(m4 / month, mod, l / last)
(s / start-01, ARG1, h / harm-01)
(s / start-01, ARG6, i / i)
(s3 / stop-01, ARG1, c2 / cut-01)
(s3 / stop-01, time, s4 / since)
(s4 / since, op, t3 / temporal-quantity)
(t2 / temporal-quantity, mod, l2 / last)
(t2 / temporal-quantity, unit, y / year)
(t3 / temporal-quantity, unit, m4 / month)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.1
Decoded in 754,028 microseconds
Sentence: its hard but you can do it.

Oracle Span 1:  but => contrast-01
Oracle Span 2:  can => possible
Oracle Span 3:  do => do-02
Oracle Span 4:  hard => hard
Oracle Span 5:  its => it
Oracle Span 6:  you => you
Spans:
Span 2-3:  but => contrast-01
Span 4-5:  can => possible
Span 5-6:  do => do-02
Span 1-2:  hard => hard
Span 0-1:  its => it
Span 3-4:  you => you

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 2-3:  but => contrast-01
Oracle Span 4-5:  can => possible
Oracle Span 5-6:  do => do-02
Oracle Span 1-2:  hard => hard
Oracle Span 0-1:  its => it
Oracle Span 3-4:  you => you

Dependencies:
1	its	_	PRP$	PRP$	_	2	poss	_	_
2	hard	_	JJ	JJ	_	6	nsubj	_	_
3	but	_	CC	CC	_	2	prep	_	_
4	you	_	PRP	PRP	_	3	pobj	_	_
5	can	_	MD	MD	_	6	aux	_	_
6	do	_	VB	VB	_	0	root	_	_
7	it	_	PRP	PRP	_	6	dobj	_	_
8	.	_	.	.	_	6	punct	_	_

Oracle:
(c / contrast-01, ARG1, h / hard)
(c / contrast-01, ARG2, p / possible)
(d / do-02, ARG0, y / you)
(d / do-02, ARG1, i2 / it)
(h / hard, domain, i2 / it)
(p / possible, domain, d / do-02)

Input(Some(Graph((contrast-01 :ARG2 (possible :domain (do-02 :ARG0 you :ARG1 it)) :ARG1 (hard :domain it)),ArrayBuffer(Span(2,3,List(0),but,contrast-01,false), Span(4,5,List(1),can,possible,false), Span(5,6,List(2),do,do-02,false), Span(3,4,List(3),you,you,false), Span(1,2,List(4),hard,hard,false), Span(0,1,List(5),its,it,false)),Map(2 -> do-02, 5 -> it, 1 -> possible, 4 -> hard, 0 -> contrast-01, 3 -> you),Map(h -> hard, d -> do-02, y -> you, p -> possible, i2 -> it, c -> contrast-01))),[Ljava.lang.String;@7776ab,Annotation([Ljava.lang.String;@79179359,[Ljava.lang.String;@dbd8e44,[Ljava.lang.String;@51acdf2e),Annotation([Ljava.lang.String;@6a55299e,[Ljava.lang.String;@2f1de2d6,[Ledu.cmu.lti.nlp.amr.Dependency;@4eb386df),Annotation([Ljava.lang.String;@79517588,[Ljava.lang.String;@3a0baae5,[Ljava.lang.String;@7ac0e420),Annotation([Ljava.lang.String;@289710d9,[Ljava.lang.String;@5a18cd76,[Ledu.cmu.lti.nlp.amr.Entity;@3da30852))
AMR:
(c / contrast-01, ARG1, h / hard)
(c / contrast-01, ARG6, y / you)
(d / do-02, ARG0, y / you)
(d / do-02, ARG1, i2 / it)
(p / possible, domain, d / do-02)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 73,829 microseconds
Sentence: I feel so much happier, but seeing the scars is both a painful reminder of how I felt at that time, how strong my feelings were that I would want to do such a thing to myself!

Oracle Span 1:  but => contrast-01
Oracle Span 2:  do => do-02
Oracle Span 3:  feel => feel-01
Oracle Span 4:  feelings => feeling
Oracle Span 5:  felt => feel-01
Oracle Span 6:  happier => happy
Oracle Span 7:  I => i
Oracle Span 8:  much => much
Oracle Span 9:  painful => pain-01
Oracle Span 10:  reminder => remind-01
Oracle Span 11:  scars => scar
Oracle Span 12:  seeing => see-01
Oracle Span 13:  so => so
Oracle Span 14:  strong => strong
Oracle Span 15:  such => such
Oracle Span 16:  that => that
Oracle Span 17:  thing => thing
Oracle Span 18:  time => time
Oracle Span 19:  want => want-01
Spans:
Span 6-7:  but => contrast-01
Span 33-34:  do => do-02
Span 1-2:  feel => feel-01
Span 26-27:  feelings => feeling
Span 18-19:  felt => feel-01
Span 4-5:  happier => happy
Span 0-1:  I => i
Span 3-4:  much => much
Span 13-14:  painful => pain-01
Span 14-15:  reminder => remind-01
Span 9-10:  scars => scar
Span 7-8:  seeing => see-01
Span 2-3:  so => so
Span 24-25:  strong => strong
Span 34-35:  such => such
Span 20-21:  that => that
Span 36-37:  thing => thing
Span 21-22:  time => time
Span 31-32:  want => want-01

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Oracle Span 6-7:  but => contrast-01
Oracle Span 33-34:  do => do-02
Oracle Span 1-2:  feel => feel-01
Oracle Span 26-27:  feelings => feeling
Oracle Span 18-19:  felt => feel-01
Oracle Span 4-5:  happier => happy
Oracle Span 0-1:  I => i
Oracle Span 3-4:  much => much
Oracle Span 13-14:  painful => pain-01
Oracle Span 14-15:  reminder => remind-01
Oracle Span 9-10:  scars => scar
Oracle Span 7-8:  seeing => see-01
Oracle Span 2-3:  so => so
Oracle Span 24-25:  strong => strong
Oracle Span 34-35:  such => such
Oracle Span 20-21:  that => that
Oracle Span 36-37:  thing => thing
Oracle Span 21-22:  time => time
Oracle Span 31-32:  want => want-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	feel	_	VBP	VBP	_	0	root	_	_
3	so	_	RB	RB	_	5	advmod	_	_
4	much	_	RB	RB	_	5	advmod	_	_
5	happier	_	JJR	JJR	_	2	acomp	_	_
6	,	_	,	,	_	2	punct	_	_
7	but	_	CC	CC	_	2	cc	_	_
8	seeing	_	VBG	VBG	_	15	csubj	_	_
9	the	_	DT	DT	_	10	det	_	_
10	scars	_	NNS	NNS	_	8	dobj	_	_
11	is	_	VBZ	VBZ	_	15	cop	_	_
12	both	_	PDT	PDT	_	15	predet	_	_
13	a	_	DT	DT	_	15	det	_	_
14	painful	_	JJ	JJ	_	15	amod	_	_
15	reminder	_	NN	NN	_	2	conj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	how	_	WRB	WRB	_	19	advmod	_	_
18	I	_	PRP	PRP	_	19	nsubj	_	_
19	felt	_	VBD	VBD	_	16	pcomp	_	_
20	at	_	IN	IN	_	19	prep	_	_
21	that	_	DT	DT	_	22	det	_	_
22	time	_	NN	NN	_	20	pobj	_	_
23	,	_	,	,	_	19	punct	_	_
24	how	_	WRB	WRB	_	25	advmod	_	_
25	strong	_	JJ	JJ	_	28	dep	_	_
26	my	_	PRP$	PRP$	_	27	poss	_	_
27	feelings	_	NNS	NNS	_	28	nsubj	_	_
28	were	_	VBD	VBD	_	19	ccomp	_	_
29	that	_	IN	IN	_	32	mark	_	_
30	I	_	PRP	PRP	_	32	nsubj	_	_
31	would	_	MD	MD	_	32	aux	_	_
32	want	_	VB	VB	_	28	ccomp	_	_
33	to	_	TO	TO	_	34	aux	_	_
34	do	_	VB	VB	_	32	xcomp	_	_
35	such	_	PDT	PDT	_	37	predet	_	_
36	a	_	DT	DT	_	37	det	_	_
37	thing	_	NN	NN	_	34	dobj	_	_
38	to	_	TO	TO	_	34	prep	_	_
39	myself	_	PRP	PRP	_	38	pobj	_	_
40	!	_	.	.	_	2	punct	_	_

Oracle:
(c / contrast-01, ARG1, f / feel-01)
(c / contrast-01, ARG2, r / remind-01)
(d / do-02, prep-to, i / i)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, h / happy)
(f2 / feel-01, ARG1, t4 / thing)
(f2 / feel-01, time, t / time)
(f3 / feeling, mod, s2 / strong)
(p / pain-01, ARG0, r / remind-01)
(r / remind-01, ARG0, s4 / see-01)
(r / remind-01, ARG2, i / i)
(s2 / strong, degree, s6 / so)
(s4 / see-01, ARG0, i / i)
(s4 / see-01, ARG1, s5 / scar)
(t / time, mod, t2 / that)
(w / want-01, ARG0, i / i)
(w / want-01, ARG1, d / do-02)

Input(Some(Graph((contrast-01 :ARG2 (remind-01 :ARG0-of pain-01 :ARG1 (and :op (thing :ARG1-of (feel-01 :time (time :mod that))) :op (feeling :ARG0-of (cause-01 :ARG1 (want-01 :ARG1 (do-02 :ARG1 (thing :mod such) :prep-to i) :ARG0 i)) :mod (strong :degree so))) :ARG0 (see-01 :ARG1 scar :ARG0 i) :ARG2 i) :ARG1 (feel-01 :ARG1 (happy :degree (more :quant (much :degree so))) :ARG0 i)),ArrayBuffer(Span(6,7,List(0),but,contrast-01,false), Span(14,15,List(1),reminder,remind-01,false), Span(36,37,List(2),thing,thing,false), Span(1,2,List(3),feel,feel-01,false), Span(21,22,List(4),time,time,false), Span(20,21,List(5),that,that,false), Span(26,27,List(6),feelings,feeling,false), Span(31,32,List(7),want,want-01,false), Span(33,34,List(8),do,do-02,false), Span(34,35,List(9),such,such,false), Span(24,25,List(10),strong,strong,false), Span(2,3,List(11),so,so,false), Span(7,8,List(12),seeing,see-01,false), Span(9,10,List(13),scars,scar,false), Span(18,19,List(14),felt,feel-01,false), Span(4,5,List(15),happier,happy,false), Span(3,4,List(16),much,much,false), Span(0,1,List(17),I,i,false), Span(13,14,List(18),painful,pain-01,false)),Map(2 -> thing, 5 -> that, 12 -> see-01, 15 -> happy, 8 -> do-02, 18 -> pain-01, 7 -> want-01, 17 -> i, 1 -> remind-01, 4 -> time, 11 -> so, 14 -> feel-01, 6 -> feeling, 9 -> such, 0 -> contrast-01, 16 -> much, 10 -> strong, 3 -> feel-01, 13 -> scar),Map(s5 -> scar, w -> want-01, h -> happy, t4 -> thing, s2 -> strong, t -> time, m2 -> much, s4 -> see-01, d -> do-02, p -> pain-01, f3 -> feeling, t2 -> that, i -> i, r -> remind-01, s3 -> such, c -> contrast-01, f2 -> feel-01, f -> feel-01, s6 -> so))),[Ljava.lang.String;@403f0a22,Annotation([Ljava.lang.String;@503ecb24,[Ljava.lang.String;@4c51cf28,[Ljava.lang.String;@6995bf68),Annotation([Ljava.lang.String;@5143c662,[Ljava.lang.String;@77825085,[Ledu.cmu.lti.nlp.amr.Dependency;@3568f9d2),Annotation([Ljava.lang.String;@71c27ee8,[Ljava.lang.String;@3e7dd664,[Ljava.lang.String;@5b1ebf56),Annotation([Ljava.lang.String;@294a6b8e,[Ljava.lang.String;@4b1d6571,[Ledu.cmu.lti.nlp.amr.Entity;@1b835480))
AMR:
(c / contrast-01, ARG1, f2 / feel-01)
(c / contrast-01, ARG2, s4 / see-01)
(c / contrast-01, ARG6, h / happy)
(d / do-02, ARG1, t4 / thing)
(f / feel-01, ARG0, t / time)
(f / feel-01, ARG1, f3 / feeling)
(f2 / feel-01, ARG0, i / i)
(f2 / feel-01, ARG1, r / remind-01)
(f2 / feel-01, ARG6, m2 / much)
(m2 / much, calendar, s6 / so)
(p / pain-01, ARG1, r / remind-01)
(r / remind-01, ARG1, f / feel-01)
(s4 / see-01, ARG1, s5 / scar)
(t / time, mod, t2 / that)
(t4 / thing, mod, s3 / such)
(w / want-01, ARG0, f3 / feeling)
(w / want-01, ARG1, d / do-02)
(w / want-01, ARG6, s2 / strong)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 1,424,580 microseconds
Sentence: And, also strength, you can do it, I found salvation in poetry writing and keeping a journal,

Oracle Span 1:  also => also
Oracle Span 2:  And => and
Oracle Span 3:  and => and
Oracle Span 4:  can => possible
Oracle Span 5:  do => do-02
Oracle Span 6:  found => find-01
Oracle Span 7:  I => i
Oracle Span 8:  it => it
Oracle Span 9:  journal => journal
Oracle Span 10:  keeping => keep-03
Oracle Span 11:  poetry => poetry
Oracle Span 12:  salvation => salvation
Oracle Span 13:  strength => strength
Oracle Span 14:  writing => write-01
Oracle Span 15:  you => you
Spans:
Span 2-3:  also => also
Span 0-1:  And => and
Span 16-17:  and => and
Span 6-7:  can => possible
Span 7-8:  do => do-02
Span 11-12:  found => find-01
Span 10-11:  I => i
Span 8-9:  it => it
Span 19-20:  journal => journal
Span 17-18:  keeping => keep-03
Span 14-15:  poetry => poetry
Span 12-13:  salvation => salvation
Span 3-4:  strength => strength
Span 15-16:  writing => write-01
Span 5-6:  you => you

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 2-3:  also => also
Oracle Span 0-1:  And => and
Oracle Span 16-17:  and => and
Oracle Span 6-7:  can => possible
Oracle Span 7-8:  do => do-02
Oracle Span 11-12:  found => find-01
Oracle Span 10-11:  I => i
Oracle Span 8-9:  it => it
Oracle Span 19-20:  journal => journal
Oracle Span 17-18:  keeping => keep-03
Oracle Span 14-15:  poetry => poetry
Oracle Span 12-13:  salvation => salvation
Oracle Span 3-4:  strength => strength
Oracle Span 15-16:  writing => write-01
Oracle Span 5-6:  you => you

Dependencies:
1	And	_	CC	CC	_	8	cc	_	_
2	,	_	,	,	_	8	punct	_	_
3	also	_	RB	RB	_	8	prep	_	_
4	strength	_	NN	NN	_	3	pobj	_	_
5	,	_	,	,	_	8	punct	_	_
6	you	_	PRP	PRP	_	8	nsubj	_	_
7	can	_	MD	MD	_	8	aux	_	_
8	do	_	VB	VB	_	0	root	_	_
9	it	_	PRP	PRP	_	8	dobj	_	_
10	,	_	,	,	_	12	punct	_	_
11	I	_	PRP	PRP	_	12	nsubj	_	_
12	found	_	VBD	VBD	_	8	parataxis	_	_
13	salvation	_	NN	NN	_	12	dobj	_	_
14	in	_	IN	IN	_	12	prep	_	_
15	poetry	_	NN	NN	_	14	pobj	_	_
16	writing	_	VBG	VBG	_	12	xcomp	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	keeping	_	VBG	VBG	_	16	conj	_	_
19	a	_	DT	DT	_	20	det	_	_
20	journal	_	NN	NN	_	16	dobj	_	_
21	,	_	,	,	_	12	punct	_	_

Oracle:
(a / and, mod, a2 / also)
(a / and, op, s / strength)
(a3 / and, op, k / keep-03)
(a3 / and, op, w / write-01)
(d / do-02, ARG0, y / you)
(d / do-02, ARG1, i / it)
(f / find-01, ARG0, i2 / i)
(f / find-01, ARG1, s2 / salvation)
(k / keep-03, ARG1, j / journal)
(p / possible, domain, d / do-02)
(s2 / salvation, prep-in, a3 / and)
(w / write-01, ARG1, p2 / poetry)

Input(Some(Graph((multi-sentence :snt1 (and :mod also :op strength) :snt2 (possible :domain (do-02 :ARG1 it :ARG0 you)) :snt3 (find-01 :ARG1 (salvation :prep-in (and :op (keep-03 :ARG1 journal) :op (write-01 :ARG1 poetry))) :ARG0 i)),ArrayBuffer(Span(0,1,List(0),And,and,false), Span(2,3,List(1),also,also,false), Span(3,4,List(2),strength,strength,false), Span(6,7,List(3),can,possible,false), Span(7,8,List(4),do,do-02,false), Span(8,9,List(5),it,it,false), Span(5,6,List(6),you,you,false), Span(11,12,List(7),found,find-01,false), Span(12,13,List(8),salvation,salvation,false), Span(16,17,List(9),and,and,false), Span(17,18,List(10),keeping,keep-03,false), Span(19,20,List(11),journal,journal,false), Span(15,16,List(12),writing,write-01,false), Span(14,15,List(13),poetry,poetry,false), Span(10,11,List(14),I,i,false)),Map(2 -> strength, 5 -> it, 12 -> write-01, 8 -> salvation, 7 -> find-01, 1 -> also, 4 -> do-02, 11 -> journal, 14 -> i, 6 -> you, 9 -> and, 0 -> and, 10 -> keep-03, 3 -> possible, 13 -> poetry),Map(w -> write-01, s2 -> salvation, k -> keep-03, p2 -> poetry, j -> journal, a3 -> and, s -> strength, d -> do-02, y -> you, p -> possible, a -> and, i2 -> i, i -> it, a2 -> also, f -> find-01))),[Ljava.lang.String;@3549bca9,Annotation([Ljava.lang.String;@4f25b795,[Ljava.lang.String;@6fb365ed,[Ljava.lang.String;@6e950bcf),Annotation([Ljava.lang.String;@16414e40,[Ljava.lang.String;@74bada02,[Ledu.cmu.lti.nlp.amr.Dependency;@525575),Annotation([Ljava.lang.String;@46dffdc3,[Ljava.lang.String;@5a709816,[Ljava.lang.String;@78383390),Annotation([Ljava.lang.String;@6ad3381f,[Ljava.lang.String;@53dbe163,[Ledu.cmu.lti.nlp.amr.Entity;@db57326))
AMR:
(a3 / and, op, k / keep-03)
(a3 / and, op, w / write-01)
(d / do-02, ARG0, y / you)
(d / do-02, ARG2, s / strength)
(d / do-02, ARG6, i / it)
(f / find-01, ARG0, i2 / i)
(f / find-01, ARG1, a3 / and)
(f / find-01, ARG6, i / it)
(k / keep-03, ARG0, p2 / poetry)
(k / keep-03, ARG1, j / journal)
(p / possible, domain, a / and)
(p / possible, domain, d / do-02)
(s / strength, calendar, a2 / also)
(w / write-01, ARG1, s2 / salvation)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.0.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 481,153 microseconds
Sentence: self harming is addictive, but you can overcome it,

Oracle Span 1:  addictive => addict-01
Oracle Span 2:  but => contrast-01
Oracle Span 3:  can => possible
Oracle Span 4:  harming => harm-01
Oracle Span 5:  overcome => overcome-01
Oracle Span 6:  self => self
Oracle Span 7:  you => you
Spans:
Span 3-4:  addictive => addict-01
Span 5-6:  but => contrast-01
Span 7-8:  can => possible
Span 1-2:  harming => harm-01
Span 8-9:  overcome => overcome-01
Span 0-1:  self => self
Span 6-7:  you => you

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Oracle Span 3-4:  addictive => addict-01
Oracle Span 5-6:  but => contrast-01
Oracle Span 7-8:  can => possible
Oracle Span 1-2:  harming => harm-01
Oracle Span 8-9:  overcome => overcome-01
Oracle Span 0-1:  self => self
Oracle Span 6-7:  you => you

Dependencies:
1	self	_	NN	NN	_	2	nn	_	_
2	harming	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	addictive	_	JJ	JJ	_	0	root	_	_
5	,	_	,	,	_	4	punct	_	_
6	but	_	CC	CC	_	9	cc	_	_
7	you	_	PRP	PRP	_	9	nsubj	_	_
8	can	_	MD	MD	_	9	aux	_	_
9	overcome	_	VB	VB	_	4	ccomp	_	_
10	it	_	PRP	PRP	_	9	dobj	_	_
11	,	_	,	,	_	4	punct	_	_

Oracle:
(a / addict-01, ARG2, h / harm-01)
(c / contrast-01, ARG1, a / addict-01)
(c / contrast-01, ARG2, p / possible)
(h / harm-01, ARG1, s / self)
(o / overcome-01, ARG0, y / you)
(o / overcome-01, ARG1, h / harm-01)
(p / possible, domain, o / overcome-01)

Input(Some(Graph((contrast-01 :ARG2 (possible :domain (overcome-01 :ARG0 you :ARG1 harm-01)) :ARG1 (addict-01 :ARG2 (harm-01 :ARG1 self))),ArrayBuffer(Span(5,6,List(0),but,contrast-01,false), Span(7,8,List(1),can,possible,false), Span(8,9,List(2),overcome,overcome-01,false), Span(6,7,List(3),you,you,false), Span(1,2,List(4),harming,harm-01,false), Span(0,1,List(5),self,self,false), Span(3,4,List(6),addictive,addict-01,false)),Map(2 -> overcome-01, 5 -> self, 1 -> possible, 4 -> harm-01, 6 -> addict-01, 0 -> contrast-01, 3 -> you),Map(h -> harm-01, s -> self, y -> you, p -> possible, a -> addict-01, c -> contrast-01, o -> overcome-01))),[Ljava.lang.String;@34a875b3,Annotation([Ljava.lang.String;@4748a0f9,[Ljava.lang.String;@4b14918a,[Ljava.lang.String;@6d1ef78d),Annotation([Ljava.lang.String;@1a6c1270,[Ljava.lang.String;@18a136ac,[Ledu.cmu.lti.nlp.amr.Dependency;@77d67cf3),Annotation([Ljava.lang.String;@6dee4f1b,[Ljava.lang.String;@176b3f44,[Ljava.lang.String;@6ee6f53),Annotation([Ljava.lang.String;@421bba99,[Ljava.lang.String;@5d12a356,[Ledu.cmu.lti.nlp.amr.Entity;@134d26af))
AMR:
(a / addict-01, ARG1, h / harm-01)
(c / contrast-01, ARG1, o / overcome-01)
(c / contrast-01, ARG6, a / addict-01)
(h / harm-01, ARG1, s / self)
(o / overcome-01, ARG0, y / you)
(o / overcome-01, mod, p / possible)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 231,667 microseconds
Sentence: remember your self harming does not define who you are.

Oracle Span 1:  define => define-01
Oracle Span 2:  harming => harm-01
Oracle Span 3:  remember => remember-01
Oracle Span 4:  self => self
Oracle Span 5:  you => (person :domain you)
Spans:
Span 6-7:  define => define-01
Span 3-4:  harming => harm-01
Span 0-1:  remember => remember-01
Span 2-3:  self => self
Span 8-9:  you => (person :domain you)

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 6-7:  define => define-01
Oracle Span 3-4:  harming => harm-01
Oracle Span 0-1:  remember => remember-01
Oracle Span 2-3:  self => self
Oracle Span 8-9:  you => (person :domain you)

Dependencies:
1	remember	_	VB	VB	_	7	csubj	_	_
2	your	_	PRP$	PRP$	_	4	poss	_	_
3	self	_	NN	NN	_	4	nn	_	_
4	harming	_	NN	NN	_	1	dobj	_	_
5	does	_	VBZ	VBZ	_	7	aux	_	_
6	not	_	RB	RB	_	7	neg	_	_
7	define	_	VB	VB	_	0	root	_	_
8	who	_	WP	WP	_	10	dobj	_	_
9	you	_	PRP	PRP	_	10	nsubj	_	_
10	are	_	VBP	VBP	_	7	ccomp	_	_
11	.	_	.	.	_	7	punct	_	_

Oracle:
(d / define-01, ARG0, h / harm-01)
(d / define-01, ARG1, p / person)
(h / harm-01, ARG1, s / self)
(p / person, domain, y2 / you)
(r / remember-01, ARG1, d / define-01)

Input(Some(Graph((remember-01 :ARG1 (define-01 :ARG1 (person :domain you) :ARG0 (harm-01 :ARG1 self) :polarity -) :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),remember,remember-01,false), Span(6,7,List(1),define,define-01,false), Span(8,9,List(2, 3),you,(person :domain you),false), Span(3,4,List(4),harming,harm-01,false), Span(2,3,List(5),self,self,false)),Map(2 -> person, 5 -> self, 1 -> define-01, 4 -> harm-01, 0 -> remember-01, 3 -> you),Map(h -> harm-01, s -> self, d -> define-01, p -> person, r -> remember-01, y2 -> you))),[Ljava.lang.String;@66ac5762,Annotation([Ljava.lang.String;@797cf65c,[Ljava.lang.String;@31bcf236,[Ljava.lang.String;@4b3ed2f0),Annotation([Ljava.lang.String;@4fad9bb2,[Ljava.lang.String;@517d4a0d,[Ledu.cmu.lti.nlp.amr.Dependency;@7862f56),Annotation([Ljava.lang.String;@3a12c404,[Ljava.lang.String;@1941a8ff,[Ljava.lang.String;@22d7b4f8),Annotation([Ljava.lang.String;@149dd36b,[Ljava.lang.String;@38831718,[Ledu.cmu.lti.nlp.amr.Entity;@2c1156a7))
AMR:
(d / define-01, ARG0, r / remember-01)
(d / define-01, ARG6, p / person)
(h / harm-01, ARG1, s / self)
(p / person, domain, y2 / you)
(r / remember-01, ARG1, h / harm-01)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
Decoded in 139,670 microseconds
Sentence: You can overcome it.

Oracle Span 1:  can => possible
Oracle Span 2:  it => it
Oracle Span 3:  overcome => overcome-01
Oracle Span 4:  You => you
Spans:
Span 1-2:  can => possible
Span 3-4:  it => it
Span 2-3:  overcome => overcome-01
Span 0-1:  You => you

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  can => possible
Oracle Span 3-4:  it => it
Oracle Span 2-3:  overcome => overcome-01
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	3	nsubj	_	_
2	can	_	MD	MD	_	3	aux	_	_
3	overcome	_	VB	VB	_	0	root	_	_
4	it	_	PRP	PRP	_	3	dobj	_	_
5	.	_	.	.	_	3	punct	_	_

Oracle:
(o / overcome-01, ARG0, y / you)
(o / overcome-01, ARG1, i / it)
(p / possible, domain, o / overcome-01)

Input(Some(Graph((possible :domain (overcome-01 :ARG1 it :ARG0 you)),ArrayBuffer(Span(1,2,List(0),can,possible,false), Span(2,3,List(1),overcome,overcome-01,false), Span(3,4,List(2),it,it,false), Span(0,1,List(3),You,you,false)),Map(2 -> it, 1 -> overcome-01, 0 -> possible, 3 -> you),Map(y -> you, p -> possible, i -> it, o -> overcome-01))),[Ljava.lang.String;@33fe57a9,Annotation([Ljava.lang.String;@4982cc36,[Ljava.lang.String;@691939c9,[Ljava.lang.String;@4f1bfe23),Annotation([Ljava.lang.String;@e19bb76,[Ljava.lang.String;@512535ff,[Ledu.cmu.lti.nlp.amr.Dependency;@71529963),Annotation([Ljava.lang.String;@61a88b8c,[Ljava.lang.String;@22295ec4,[Ljava.lang.String;@5adb0db3),Annotation([Ljava.lang.String;@3f270e0a,[Ljava.lang.String;@1a760689,[Ledu.cmu.lti.nlp.amr.Entity;@7241a47d))
AMR:
(o / overcome-01, ARG0, y / you)
(o / overcome-01, ARG1, i / it)
(o / overcome-01, mod, p / possible)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 10,907 microseconds
Sentence: So I think Ive got a form of OCD because for the past year, I've found that everytime I go out, especially to Uni, I'm always checking my belongings to make sure I haven't lost or left anything.

Oracle Span 1:  always => always
Oracle Span 2:  anything => anything
Oracle Span 3:  because => cause-01
Oracle Span 4:  belongings => (thing :ARG0-of belong-01)
Oracle Span 5:  checking => check-01
Oracle Span 6:  especially => especially
Oracle Span 7:  form => form
Oracle Span 8:  found => find-01
Oracle Span 9:  go => go-17
Oracle Span 10:  got => get-02
Oracle Span 11:  I => i
Oracle Span 12:  left => leave-02
Oracle Span 13:  lost => lose-02
Oracle Span 14:  OCD => (disease :name (name :op "OCD"))
Oracle Span 15:  or => or
Oracle Span 16:  past => past
Oracle Span 17:  So => so
Oracle Span 18:  think => think-01
Oracle Span 19:  year => year
NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 30-31:  always => always
Span 43-44:  anything => anything
Span 9-10:  because => cause-01
Span 33-34:  belongings => (thing :ARG0-of belong-01)
Span 31-32:  checking => check-01
Span 24-25:  especially => especially
Span 6-7:  form => form
Span 17-18:  found => find-01
Span 21-22:  go => go-17
Span 4-5:  got => get-02
Span 1-2:  I => i
Span 42-43:  left => leave-02
Span 40-41:  lost => lose-02
Span 8-9:  OCD => (disease :name (name :op "OCD"))
Span 41-42:  or => or
Span 12-13:  past => past
Span 0-1:  So => so
Span 2-3:  think => think-01
Span 13-14:  year => year

Langrangian relaxation converged after 96 iterations. Delta = 0.0
Oracle Span 30-31:  always => always
Oracle Span 43-44:  anything => anything
Oracle Span 9-10:  because => cause-01
Oracle Span 33-34:  belongings => (thing :ARG0-of belong-01)
Oracle Span 31-32:  checking => check-01
Oracle Span 24-25:  especially => especially
Oracle Span 6-7:  form => form
Oracle Span 17-18:  found => find-01
Oracle Span 21-22:  go => go-17
Oracle Span 4-5:  got => get-02
Oracle Span 1-2:  I => i
Oracle Span 42-43:  left => leave-02
Oracle Span 40-41:  lost => lose-02
Oracle Span 8-9:  OCD => (disease :name (name :op "OCD"))
Oracle Span 41-42:  or => or
Oracle Span 12-13:  past => past
Oracle Span 0-1:  So => so
Oracle Span 2-3:  think => think-01
Oracle Span 13-14:  year => year

Dependencies:
1	So	_	IN	IN	_	3	dep	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	think	_	VBP	VBP	_	32	ccomp	_	_
4	Ive	_	NNP	NNP	_	5	nsubj	_	_
5	got	_	VBD	VBD	_	3	ccomp	_	_
6	a	_	DT	DT	_	7	det	_	_
7	form	_	NN	NN	_	5	dobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	OCD	_	NNP	NNP	_	8	pobj	_	_
10	because	_	IN	IN	_	18	mark	_	_
11	for	_	IN	IN	_	18	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	past	_	JJ	JJ	_	14	amod	_	_
14	year	_	NN	NN	_	11	pobj	_	_
15	,	_	,	,	_	18	punct	_	_
16	I	_	PRP	PRP	_	18	nsubj	_	_
17	've	_	VBP	VBP	_	18	aux	_	_
18	found	_	VBN	VBN	_	5	advcl	_	_
19	that	_	IN	IN	_	20	mark	_	_
20	everytime	_	VBP	VBP	_	18	ccomp	_	_
21	I	_	PRP	PRP	_	22	nsubj	_	_
22	go	_	VB	VB	_	20	ccomp	_	_
23	out	_	RP	RP	_	22	prt	_	_
24	,	_	,	,	_	20	punct	_	_
25	especially	_	RB	RB	_	27	advmod	_	_
26	to	_	TO	TO	_	27	aux	_	_
27	Uni	_	VB	VB	_	20	xcomp	_	_
28	,	_	,	,	_	32	punct	_	_
29	I	_	PRP	PRP	_	32	nsubj	_	_
30	'm	_	VBP	VBP	_	32	aux	_	_
31	always	_	RB	RB	_	32	advmod	_	_
32	checking	_	VBG	VBG	_	0	root	_	_
33	my	_	PRP$	PRP$	_	34	poss	_	_
34	belongings	_	NNS	NNS	_	32	dobj	_	_
35	to	_	TO	TO	_	36	aux	_	_
36	make	_	VB	VB	_	32	vmod	_	_
37	sure	_	JJ	JJ	_	36	acomp	_	_
38	I	_	PRP	PRP	_	41	nsubj	_	_
39	have	_	VBP	VBP	_	41	aux	_	_
40	n't	_	RB	RB	_	41	neg	_	_
41	lost	_	VBN	VBN	_	37	ccomp	_	_
42	or	_	CC	CC	_	41	cc	_	_
43	left	_	VBN	VBN	_	41	conj	_	_
44	anything	_	NN	NN	_	41	dobj	_	_
45	.	_	.	.	_	32	punct	_	_

Oracle:
(b / belong-01, ARG0, t / thing)
(b / belong-01, ARG1, i / i)
(c / cause-01, ARG0, f / find-01)
(c / cause-01, ARG1, t3 / think-01)
(c2 / check-01, ARG0, i / i)
(c2 / check-01, ARG1, t / thing)
(c2 / check-01, time, a / always)
(d / disease, mod, f2 / form)
(d / disease, name, n / name)
(f / find-01, ARG0, i / i)
(f / find-01, ARG1, c2 / check-01)
(f / find-01, time, y / year)
(g / get-02, ARG0, i / i)
(g / get-02, ARG1, d / disease)
(g2 / go-17, ARG0, i / i)
(l / lose-02, ARG0, i / i)
(l / lose-02, ARG1, a2 / anything)
(l2 / leave-02, ARG0, i / i)
(l2 / leave-02, ARG1, a2 / anything)
(n / name, op, "OCD")
(o / or, op, l / lose-02)
(o / or, op, l2 / leave-02)
(t3 / think-01, ARG0, i / i)
(t3 / think-01, ARG1, g / get-02)
(t3 / think-01, mod, s / so)
(y / year, mod, p / past)

Input(Some(Graph((cause-01 :ARG1 (think-01 :mod so :ARG1 (get-02 :ARG1 (disease :mod form :name (name :op "OCD")) :ARG0 i) :ARG0 i) :ARG0 (find-01 :time (year :mod past) :ARG1 (check-01 :frequency (rate-entity-91 :ARG4 (go-17 :direction (university :mod especially) :ARG0 i)) :purpose (insure-01 :ARG1 (or :op (leave-02 :polarity - :ARG0 i :ARG1 anything) :op (lose-02 :ARG1 anything :polarity - :ARG0 i)) :ARG0 i) :time always :ARG1 (thing :ARG0-of (belong-01 :ARG1 i)) :ARG0 i) :ARG0 i)),ArrayBuffer(Span(8,9,List(0, 1, 2),OCD,(disease :name (name :op "OCD")),false), Span(9,10,List(3),because,cause-01,false), Span(2,3,List(4),think,think-01,false), Span(0,1,List(5),So,so,false), Span(4,5,List(6),got,get-02,false), Span(6,7,List(7),form,form,false), Span(17,18,List(8),found,find-01,false), Span(13,14,List(9),year,year,false), Span(12,13,List(10),past,past,false), Span(31,32,List(11),checking,check-01,false), Span(21,22,List(12),go,go-17,false), Span(24,25,List(13),especially,especially,false), Span(41,42,List(14),or,or,false), Span(42,43,List(15),left,leave-02,false), Span(40,41,List(16),lost,lose-02,false), Span(43,44,List(17),anything,anything,false), Span(30,31,List(18),always,always,false), Span(1,2,List(19),I,i,false), Span(33,34,List(20, 21),belongings,(thing :ARG0-of belong-01),false)),Map(2 -> "OCD", 5 -> so, 12 -> go-17, 15 -> leave-02, 8 -> find-01, 21 -> belong-01, 18 -> always, 7 -> form, 17 -> anything, 1 -> name, 4 -> think-01, 11 -> check-01, 14 -> or, 20 -> thing, 6 -> get-02, 9 -> year, 0 -> disease, 16 -> lose-02, 19 -> i, 10 -> past, 3 -> cause-01, 13 -> especially),Map(e -> especially, n -> name, b -> belong-01, t -> thing, s -> so, d -> disease, g2 -> go-17, t3 -> think-01, p -> past, y -> year, g -> get-02, a -> always, l2 -> leave-02, i -> i, a2 -> anything, c -> cause-01, l -> lose-02, f2 -> form, f -> find-01, o -> or, c2 -> check-01))),[Ljava.lang.String;@70f59913,Annotation([Ljava.lang.String;@77258e59,[Ljava.lang.String;@5dcd8c7a,[Ljava.lang.String;@2250b9f2),Annotation([Ljava.lang.String;@7e3181aa,[Ljava.lang.String;@253d9f73,[Ledu.cmu.lti.nlp.amr.Dependency;@142269f2),Annotation([Ljava.lang.String;@331acdad,[Ljava.lang.String;@41d426b5,[Ljava.lang.String;@8dbfffb),Annotation([Ljava.lang.String;@f316aeb,[Ljava.lang.String;@6aa3a905,[Ledu.cmu.lti.nlp.amr.Entity;@a22cb6a))
AMR:
(b / belong-01, ARG0, t / thing)
(b / belong-01, ARG1, t3 / think-01)
(c / cause-01, ARG0, f / find-01)
(c / cause-01, ARG1, g / get-02)
(c2 / check-01, ARG1, t / thing)
(c2 / check-01, time, a / always)
(d / disease, name, n / name)
(d / disease, quant, f2 / form)
(f / find-01, ARG1, y / year)
(g / get-02, ARG0, e / especially)
(g / get-02, ARG1, f2 / form)
(g2 / go-17, ARG1, f / find-01)
(l / lose-02, ARG1, a2 / anything)
(l2 / leave-02, ARG1, g2 / go-17)
(n / name, op, "OCD")
(o / or, op, l / lose-02)
(o / or, op, l2 / leave-02)
(s / so, op, t3 / think-01)
(t3 / think-01, ARG0, i / i)
(t3 / think-01, ARG1, g / get-02)
(y / year, mod, p / past)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.3.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.1
WARNING: makeIds can't find span Id: 0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
Decoded in 2,834,336 microseconds
Sentence: I often have to check twice at one go, then after 30 seconds for some reason I cant resist checking again!

Oracle Span 1:  30 => 30
Oracle Span 2:  after => after
Oracle Span 3:  again => again
Oracle Span 4:  check => check-01
Oracle Span 5:  checking => check-01
Oracle Span 6:  go => go
Oracle Span 7:  I => i
Oracle Span 8:  often => often
Oracle Span 9:  one => 1
Oracle Span 10:  reason => reason
Oracle Span 11:  resist => resist-01
Oracle Span 12:  seconds => (temporal-quantity :unit second)
Oracle Span 13:  some => some
Oracle Span 14:  then => then
Spans:
Span 12-13:  30 => 30
Span 11-12:  after => after
Span 21-22:  again => again
Span 4-5:  check => check-01
Span 20-21:  checking => check-01
Span 8-9:  go => go
Span 0-1:  I => i
Span 1-2:  often => often
Span 7-8:  one => 1
Span 16-17:  reason => reason
Span 19-20:  resist => resist-01
Span 13-14:  seconds => (temporal-quantity :unit second)
Span 15-16:  some => some
Span 10-11:  then => then

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 12-13:  30 => 30
Oracle Span 11-12:  after => after
Oracle Span 21-22:  again => again
Oracle Span 4-5:  check => check-01
Oracle Span 20-21:  checking => check-01
Oracle Span 8-9:  go => go
Oracle Span 0-1:  I => i
Oracle Span 1-2:  often => often
Oracle Span 7-8:  one => 1
Oracle Span 16-17:  reason => reason
Oracle Span 19-20:  resist => resist-01
Oracle Span 13-14:  seconds => (temporal-quantity :unit second)
Oracle Span 15-16:  some => some
Oracle Span 10-11:  then => then

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	often	_	RB	RB	_	3	advmod	_	_
3	have	_	VBP	VBP	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	check	_	VB	VB	_	3	xcomp	_	_
6	twice	_	RB	RB	_	5	advmod	_	_
7	at	_	IN	IN	_	5	advmod	_	_
8	one	_	CD	CD	_	7	pobj	_	_
9	go	_	VB	VB	_	5	dep	_	_
10	,	_	,	,	_	5	punct	_	_
11	then	_	RB	RB	_	20	advmod	_	_
12	after	_	IN	IN	_	20	mark	_	_
13	30	_	CD	CD	_	14	num	_	_
14	seconds	_	NNS	NNS	_	20	nsubj	_	_
15	for	_	IN	IN	_	14	prep	_	_
16	some	_	DT	DT	_	19	det	_	_
17	reason	_	NN	NN	_	19	nn	_	_
18	I	_	NN	NN	_	19	nn	_	_
19	cant	_	NN	NN	_	15	pobj	_	_
20	resist	_	VBP	VBP	_	5	advcl	_	_
21	checking	_	VBG	VBG	_	20	xcomp	_	_
22	again	_	RB	RB	_	21	advmod	_	_
23	!	_	.	.	_	3	punct	_	_

Oracle:
(a2 / after, op, t / temporal-quantity)
(c / check-01, ARG0, i / i)
(c3 / check-01, ARG0, i / i)
(c3 / check-01, mod, a / again)
(g / go, quant, 1 / 1)
(r / resist-01, ARG0, i / i)
(r / resist-01, ARG1, c3 / check-01)
(r2 / reason, mod, s2 / some)
(t / temporal-quantity, quant, 3 / 30)
(t / temporal-quantity, unit, s / second)

Input(Some(Graph((and :op (obligate-01 :ARG1 i :ARG2 (check-01 :frequency (rate-entity-91 :ARG1 2 :ARG4 (go :quant 1)) :ARG0 i) :frequency often) :op (capable-41 :polarity - :ARG2 (resist-01 :ARG1 (check-01 :mod again :ARG0 i) :ARG0 i) :time (after :op (temporal-quantity :unit second :quant 30)) :time then :ARG1-of (cause-01 :ARG0 (reason :mod some)) :ARG1 i)),ArrayBuffer(Span(0,1,List(0),I,i,false), Span(4,5,List(1),check,check-01,false), Span(8,9,List(2),go,go,false), Span(7,8,List(3),one,1,false), Span(1,2,List(4),often,often,false), Span(19,20,List(5),resist,resist-01,false), Span(20,21,List(6),checking,check-01,false), Span(21,22,List(7),again,again,false), Span(11,12,List(8),after,after,false), Span(12,13,List(9),30,30,false), Span(13,14,List(10, 11),seconds,(temporal-quantity :unit second),false), Span(10,11,List(12),then,then,false), Span(16,17,List(13),reason,reason,false), Span(15,16,List(14),some,some,false)),Map(2 -> go, 5 -> resist-01, 12 -> then, 8 -> after, 7 -> again, 1 -> check-01, 4 -> often, 11 -> second, 14 -> some, 6 -> check-01, 9 -> 30, 0 -> i, 10 -> temporal-quantity, 3 -> 1, 13 -> reason),Map(s2 -> some, t -> temporal-quantity, s -> second, 1 -> 1, r2 -> reason, g -> go, a -> again, c3 -> check-01, o2 -> often, t2 -> then, a2 -> after, r -> resist-01, i -> i, c -> check-01, 3 -> 30))),[Ljava.lang.String;@5dd1c9f2,Annotation([Ljava.lang.String;@59b38691,[Ljava.lang.String;@2e2ff723,[Ljava.lang.String;@324a0017),Annotation([Ljava.lang.String;@6187d1f5,[Ljava.lang.String;@2445445a,[Ledu.cmu.lti.nlp.amr.Dependency;@7502291e),Annotation([Ljava.lang.String;@17aad511,[Ljava.lang.String;@487db668,[Ljava.lang.String;@46944ca9),Annotation([Ljava.lang.String;@22bac7bc,[Ljava.lang.String;@63798ca7,[Ledu.cmu.lti.nlp.amr.Entity;@4612b856))
AMR:
(a2 / after, mod, t2 / then)
(a2 / after, op, r / resist-01)
(c / check-01, ARG0, i / i)
(c / check-01, ARG1, g / go)
(c / check-01, ARG6, 1 / 1)
(c / check-01, time, a2 / after)
(c3 / check-01, ARG1, r2 / reason)
(c3 / check-01, mod, a / again)
(o2 / often, calendar, i / i)
(r / resist-01, ARG0, t / temporal-quantity)
(r / resist-01, ARG1, c3 / check-01)
(r / resist-01, ARG6, s2 / some)
(t / temporal-quantity, quant, 3 / 30)
(t / temporal-quantity, unit, s / second)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.4.0
WARNING: makeIds can't find span Id: 0.1.4.0.0
Decoded in 460,376 microseconds
Sentence: Why is this!?

Oracle Span 1:  this => this
Spans:
Span 2-3:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  this => this

Dependencies:
1	Why	_	WRB	WRB	_	2	advmod	_	_
2	is	_	VBZ	VBZ	_	0	root	_	_
3	this	_	DT	DT	_	4	det	_	_
4	!?	_	NN	NN	_	2	nsubj	_	_

Oracle:


Input(Some(Graph((this :ARG1-of (cause-01 :ARG0 amr-unknown)),ArrayBuffer(Span(2,3,List(0),this,this,false)),Map(0 -> this),Map(t -> this))),[Ljava.lang.String;@22875539,Annotation([Ljava.lang.String;@5674e1f2,[Ljava.lang.String;@79c7532f,[Ljava.lang.String;@2a448449),Annotation([Ljava.lang.String;@32f232a5,[Ljava.lang.String;@43f82e78,[Ledu.cmu.lti.nlp.amr.Dependency;@e54303),Annotation([Ljava.lang.String;@e8df99a,[Ljava.lang.String;@2dc995f4,[Ljava.lang.String;@2f40e5db),Annotation([Ljava.lang.String;@517566b,[Ljava.lang.String;@64b73e7a,[Ledu.cmu.lti.nlp.amr.Entity;@530712d))
AMR:


Decoded in 3,644 microseconds
Sentence: Am I going crazy or something?

Oracle Span 1:  crazy => crazy
Oracle Span 2:  going => go-08
Oracle Span 3:  I => i
Oracle Span 4:  or => or
Oracle Span 5:  something => something
Spans:
Span 3-4:  crazy => crazy
Span 2-3:  going => go-08
Span 1-2:  I => i
Span 4-5:  or => or
Span 5-6:  something => something

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 3-4:  crazy => crazy
Oracle Span 2-3:  going => go-08
Oracle Span 1-2:  I => i
Oracle Span 4-5:  or => or
Oracle Span 5-6:  something => something

Dependencies:
1	Am	_	VBP	VBP	_	3	aux	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	going	_	VBG	VBG	_	0	root	_	_
4	crazy	_	JJ	JJ	_	3	acomp	_	_
5	or	_	CC	CC	_	4	cc	_	_
6	something	_	NN	NN	_	4	conj	_	_
7	?	_	.	.	_	3	punct	_	_

Oracle:
(g / go-08, ARG1, i / i)
(g / go-08, ARG2, c / crazy)
(o / or, op, g / go-08)
(o / or, op, s / something)

Input(Some(Graph((or :op something :op (go-08 :ARG2 crazy :ARG1 i) :mode interrogative),ArrayBuffer(Span(4,5,List(0),or,or,false), Span(5,6,List(1),something,something,false), Span(2,3,List(2),going,go-08,false), Span(3,4,List(3),crazy,crazy,false), Span(1,2,List(4),I,i,false)),Map(2 -> go-08, 1 -> something, 4 -> i, 0 -> or, 3 -> crazy),Map(s -> something, g -> go-08, i -> i, c -> crazy, o -> or))),[Ljava.lang.String;@2df6226d,Annotation([Ljava.lang.String;@12ed9db6,[Ljava.lang.String;@4ff4357f,[Ljava.lang.String;@49cb9cb5),Annotation([Ljava.lang.String;@55322aab,[Ljava.lang.String;@2b4c1d96,[Ledu.cmu.lti.nlp.amr.Dependency;@45fd9a4d),Annotation([Ljava.lang.String;@50468873,[Ljava.lang.String;@146587a2,[Ljava.lang.String;@5f0e9815),Annotation([Ljava.lang.String;@76884e4b,[Ljava.lang.String;@126945f9,[Ledu.cmu.lti.nlp.amr.Entity;@2a898881))
AMR:
(g / go-08, ARG0, i / i)
(g / go-08, ARG1, c / crazy)
(g / go-08, ARG6, s / something)
(o / or, op, g / go-08)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 53,563 microseconds
Sentence: It happens most often when I'm carrying many things, but that is rarely and even still daily I'm checking many times. And is this OCD to any extent?

Oracle Span 1:  and => and
Oracle Span 2:  any => any
Oracle Span 3:  but => contrast-01
Oracle Span 4:  carrying => carry-01
Oracle Span 5:  checking => check-01
Oracle Span 6:  even => even
Oracle Span 7:  extent => extent
Oracle Span 8:  happens => happen-01
Oracle Span 9:  It => it
Oracle Span 10:  many => many
Oracle Span 11:  many => many
Oracle Span 12:  most => most
Oracle Span 13:  OCD => (disease :name (name :op "OCD"))
Oracle Span 14:  often => often
Oracle Span 15:  rarely => rare
Oracle Span 16:  still => still
Oracle Span 17:  things => thing
Oracle Span 18:  this => this
NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 15-16:  and => and
Span 30-31:  any => any
Span 11-12:  but => contrast-01
Span 7-8:  carrying => carry-01
Span 21-22:  checking => check-01
Span 16-17:  even => even
Span 31-32:  extent => extent
Span 1-2:  happens => happen-01
Span 0-1:  It => it
Span 8-9:  many => many
Span 22-23:  many => many
Span 2-3:  most => most
Span 28-29:  OCD => (disease :name (name :op "OCD"))
Span 3-4:  often => often
Span 14-15:  rarely => rare
Span 17-18:  still => still
Span 9-10:  things => thing
Span 27-28:  this => this

 *** WARNING: The dependency tree seems broken.  I can't find the head of And in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of OCD in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of any in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of extent in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 32
Langrangian relaxation converged after 27 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of And in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of OCD in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of any in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of extent in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 32
Oracle Span 15-16:  and => and
Oracle Span 30-31:  any => any
Oracle Span 11-12:  but => contrast-01
Oracle Span 7-8:  carrying => carry-01
Oracle Span 21-22:  checking => check-01
Oracle Span 16-17:  even => even
Oracle Span 31-32:  extent => extent
Oracle Span 1-2:  happens => happen-01
Oracle Span 0-1:  It => it
Oracle Span 8-9:  many => many
Oracle Span 22-23:  many => many
Oracle Span 2-3:  most => most
Oracle Span 28-29:  OCD => (disease :name (name :op "OCD"))
Oracle Span 3-4:  often => often
Oracle Span 14-15:  rarely => rare
Oracle Span 17-18:  still => still
Oracle Span 9-10:  things => thing
Oracle Span 27-28:  this => this

Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	happens	_	VBZ	VBZ	_	0	root	_	_
3	most	_	RBS	RBS	_	4	advmod	_	_
4	often	_	RB	RB	_	8	advmod	_	_
5	when	_	WRB	WRB	_	8	advmod	_	_
6	I	_	PRP	PRP	_	8	nsubj	_	_
7	'm	_	VBP	VBP	_	8	aux	_	_
8	carrying	_	VBG	VBG	_	2	advcl	_	_
9	many	_	JJ	JJ	_	10	amod	_	_
10	things	_	NNS	NNS	_	8	dobj	_	_
11	,	_	,	,	_	8	punct	_	_
12	but	_	CC	CC	_	8	cc	_	_
13	that	_	WDT	WDT	_	14	nsubj	_	_
14	is	_	VBZ	VBZ	_	8	conj	_	_
15	rarely	_	RB	RB	_	14	advmod	_	_
16	and	_	CC	CC	_	2	cc	_	_
17	even	_	RB	RB	_	22	advmod	_	_
18	still	_	RB	RB	_	22	advmod	_	_
19	daily	_	RB	RB	_	22	advmod	_	_
20	I	_	PRP	PRP	_	22	nsubj	_	_
21	'm	_	VBP	VBP	_	22	aux	_	_
22	checking	_	VBG	VBG	_	2	conj	_	_
23	many	_	JJ	JJ	_	24	quantmod	_	_
24	times	_	NNS	NNS	_	22	dobj	_	_
25	.	_	.	.	_	2	punct	_	_
1	And	_	CC	CC	_	2	cc	_	_
2	is	_	VBZ	VBZ	_	0	root	_	_
3	this	_	DT	DT	_	4	det	_	_
4	OCD	_	NNP	NNP	_	2	nsubj	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	any	_	DT	DT	_	7	det	_	_
7	extent	_	NN	NN	_	5	pobj	_	_
8	?	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c2 / check-01)
(a / and, op, h / happen-01)
(c / carry-01, ARG0, i / it)
(c / carry-01, ARG1, t / thing)
(c / carry-01, time, o / often)
(c2 / check-01, ARG0, i / it)
(c3 / contrast-01, ARG1, c / carry-01)
(d2 / disease, degree, e2 / extent)
(d2 / disease, domain, t3 / this)
(d2 / disease, name, n / name)
(e2 / extent, mod, a2 / any)
(h / happen-01, ARG1, i / it)
(h / happen-01, frequency, o / often)
(n / name, op, "OCD")
(o / often, degree, m2 / most)
(t / thing, quant, m3 / many)

Input(Some(Graph((multi-sentence :snt1 (and :op (check-01 :frequency (rate-entity-91 :ARG1 many :ARG2 (temporal-quantity :quant 1 :unit day) :mod still :mod even) :ARG0 it) :op (happen-01 :frequency (often :time-of (carry-01 :ARG1-of (contrast-01 :ARG2 (carry-01 :frequency rare :ARG0 it :ARG1 thing)) :ARG1 (thing :quant many) :ARG0 it) :degree most) :ARG1 it)) :snt2 (disease :degree (extent :mod any) :domain this :name (name :op "OCD") :mode interrogative)),ArrayBuffer(Span(28,29,List(0, 1, 2),OCD,(disease :name (name :op "OCD")),false), Span(15,16,List(3),and,and,false), Span(21,22,List(4),checking,check-01,false), Span(8,9,List(5),many,many,false), Span(17,18,List(6),still,still,false), Span(16,17,List(7),even,even,false), Span(1,2,List(8),happens,happen-01,false), Span(3,4,List(9),often,often,false), Span(7,8,List(10),carrying,carry-01,false), Span(11,12,List(11),but,contrast-01,false), Span(9,10,List(12),things,thing,false), Span(22,23,List(13),many,many,false), Span(2,3,List(14),most,most,false), Span(0,1,List(15),It,it,false), Span(27,28,List(16),this,this,false), Span(31,32,List(17),extent,extent,false), Span(30,31,List(18),any,any,false), Span(14,15,List(19),rarely,rare,false)),Map(2 -> "OCD", 5 -> many, 12 -> thing, 15 -> it, 8 -> happen-01, 18 -> any, 7 -> even, 17 -> extent, 1 -> name, 4 -> check-01, 11 -> contrast-01, 14 -> most, 6 -> still, 9 -> often, 0 -> disease, 16 -> this, 19 -> rare, 10 -> carry-01, 3 -> and, 13 -> many),Map(m3 -> many, e -> even, n -> name, h -> happen-01, t -> thing, m2 -> most, e2 -> extent, m5 -> many, s -> still, t3 -> this, c3 -> contrast-01, a -> and, d2 -> disease, r -> rare, a2 -> any, i -> it, c -> carry-01, o -> often, c2 -> check-01))),[Ljava.lang.String;@16c63f5,Annotation([Ljava.lang.String;@35229f85,[Ljava.lang.String;@6d3c5255,[Ljava.lang.String;@b1712f3),Annotation([Ljava.lang.String;@6986bbaf,[Ljava.lang.String;@4879dfad,[Ledu.cmu.lti.nlp.amr.Dependency;@4758820d),Annotation([Ljava.lang.String;@74eb909f,[Ljava.lang.String;@28ec166e,[Ljava.lang.String;@2eee3069),Annotation([Ljava.lang.String;@2da59753,[Ljava.lang.String;@5629510,[Ledu.cmu.lti.nlp.amr.Entity;@4df5bcb4))
AMR:
(a / and, op, a2 / any)
(a / and, op, c2 / check-01)
(a / and, op, d2 / disease)
(a / and, op, e2 / extent)
(a / and, op, h / happen-01)
(a / and, op, r / rare)
(a / and, op, t3 / this)
(c / carry-01, ARG1, t / thing)
(c / carry-01, frequency, o / often)
(c2 / check-01, ARG1, m3 / many)
(c2 / check-01, mod, s / still)
(c3 / contrast-01, ARG1, a2 / any)
(c3 / contrast-01, ARG2, c / carry-01)
(d2 / disease, name, n / name)
(h / happen-01, ARG0, i / it)
(h / happen-01, ARG1, e / even)
(n / name, op, "OCD")
(o / often, degree, m2 / most)
(t / thing, quant, m5 / many)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.2
WARNING: makeIds can't find span Id: 0.0.1.0.3
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.1.0.0
Decoded in 779,666 microseconds
Sentence: What can I do about this?

Oracle Span 1:  can => possible
Oracle Span 2:  do => do-02
Oracle Span 3:  I => i
Oracle Span 4:  this => this
Spans:
Span 1-2:  can => possible
Span 3-4:  do => do-02
Span 2-3:  I => i
Span 5-6:  this => this

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  can => possible
Oracle Span 3-4:  do => do-02
Oracle Span 2-3:  I => i
Oracle Span 5-6:  this => this

Dependencies:
1	What	_	WP	WP	_	4	dobj	_	_
2	can	_	MD	MD	_	4	aux	_	_
3	I	_	PRP	PRP	_	4	nsubj	_	_
4	do	_	VB	VB	_	0	root	_	_
5	about	_	IN	IN	_	4	prep	_	_
6	this	_	DT	DT	_	5	pobj	_	_
7	?	_	.	.	_	4	punct	_	_

Oracle:
(d / do-02, ARG0, i / i)
(d / do-02, ARG2, t / this)
(d / do-02, mod, p / possible)

Input(Some(Graph((amr-unknown :ARG1-of (do-02 :mod possible :ARG2 this :ARG0 i)),ArrayBuffer(Span(3,4,List(0),do,do-02,false), Span(1,2,List(1),can,possible,false), Span(5,6,List(2),this,this,false), Span(2,3,List(3),I,i,false)),Map(2 -> this, 1 -> possible, 0 -> do-02, 3 -> i),Map(t -> this, d -> do-02, p -> possible, i -> i))),[Ljava.lang.String;@12c7a01b,Annotation([Ljava.lang.String;@13d9b21f,[Ljava.lang.String;@2826f61,[Ljava.lang.String;@62727399),Annotation([Ljava.lang.String;@4d9ac0b4,[Ljava.lang.String;@130dca52,[Ledu.cmu.lti.nlp.amr.Dependency;@2654635),Annotation([Ljava.lang.String;@737a135b,[Ljava.lang.String;@687ef2e0,[Ljava.lang.String;@15dcfae7),Annotation([Ljava.lang.String;@3da05287,[Ljava.lang.String;@1e636ea3,[Ledu.cmu.lti.nlp.amr.Entity;@115667d))
AMR:
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, t / this)
(p / possible, domain, d / do-02)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 12,670 microseconds
Sentence: If I don't check, I get very very anxious, which does sort of go away after 15-30 mins, but often the anxiety is so much that I can't wait that long.

Oracle Span 1:  after => after
Oracle Span 2:  anxiety => anxiety
Oracle Span 3:  anxious => anxious
Oracle Span 4:  away => away
Oracle Span 5:  but => contrast-01
Oracle Span 6:  check => check-01
Oracle Span 7:  get => get-03
Oracle Span 8:  go => go-01
Oracle Span 9:  I => i
Oracle Span 10:  If => cause-01
Oracle Span 11:  long => long
Oracle Span 12:  much => much
Oracle Span 13:  often => often
Oracle Span 14:  sort => sort
Oracle Span 15:  that => that
Oracle Span 16:  very => very
Oracle Span 17:  wait => wait-01
Spans:
Span 18-19:  after => after
Span 25-26:  anxiety => anxiety
Span 10-11:  anxious => anxious
Span 17-18:  away => away
Span 22-23:  but => contrast-01
Span 4-5:  check => check-01
Span 7-8:  get => get-03
Span 16-17:  go => go-01
Span 1-2:  I => i
Span 0-1:  If => cause-01
Span 35-36:  long => long
Span 28-29:  much => much
Span 23-24:  often => often
Span 14-15:  sort => sort
Span 29-30:  that => that
Span 8-9:  very => very
Span 33-34:  wait => wait-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 18-19:  after => after
Oracle Span 25-26:  anxiety => anxiety
Oracle Span 10-11:  anxious => anxious
Oracle Span 17-18:  away => away
Oracle Span 22-23:  but => contrast-01
Oracle Span 4-5:  check => check-01
Oracle Span 7-8:  get => get-03
Oracle Span 16-17:  go => go-01
Oracle Span 1-2:  I => i
Oracle Span 0-1:  If => cause-01
Oracle Span 35-36:  long => long
Oracle Span 28-29:  much => much
Oracle Span 23-24:  often => often
Oracle Span 14-15:  sort => sort
Oracle Span 29-30:  that => that
Oracle Span 8-9:  very => very
Oracle Span 33-34:  wait => wait-01

Dependencies:
1	If	_	IN	IN	_	5	mark	_	_
2	I	_	PRP	PRP	_	5	nsubj	_	_
3	do	_	VBP	VBP	_	5	aux	_	_
4	n't	_	RB	RB	_	5	neg	_	_
5	check	_	VB	VB	_	11	advcl	_	_
6	,	_	,	,	_	11	punct	_	_
7	I	_	PRP	PRP	_	11	nsubj	_	_
8	get	_	VBP	VBP	_	11	dep	_	_
9	very	_	RB	RB	_	11	advmod	_	_
10	very	_	RB	RB	_	11	advmod	_	_
11	anxious	_	JJ	JJ	_	0	root	_	_
12	,	_	,	,	_	11	punct	_	_
13	which	_	WDT	WDT	_	14	nsubj	_	_
14	does	_	VBZ	VBZ	_	11	ccomp	_	_
15	sort	_	NN	NN	_	14	dobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	go	_	VB	VB	_	16	pcomp	_	_
18	away	_	RP	RP	_	17	prt	_	_
19	after	_	IN	IN	_	17	prep	_	_
20	15-30	_	CD	CD	_	21	num	_	_
21	mins	_	NNS	NNS	_	19	pobj	_	_
22	,	_	,	,	_	11	punct	_	_
23	but	_	CC	CC	_	11	cc	_	_
24	often	_	RB	RB	_	29	advmod	_	_
25	the	_	DT	DT	_	26	det	_	_
26	anxiety	_	NN	NN	_	29	nsubj	_	_
27	is	_	VBZ	VBZ	_	29	cop	_	_
28	so	_	RB	RB	_	29	advmod	_	_
29	much	_	JJ	JJ	_	11	conj	_	_
30	that	_	IN	IN	_	34	mark	_	_
31	I	_	PRP	PRP	_	34	nsubj	_	_
32	ca	_	MD	MD	_	34	aux	_	_
33	n't	_	RB	RB	_	34	neg	_	_
34	wait	_	VB	VB	_	29	ccomp	_	_
35	that	_	DT	DT	_	34	dobj	_	_
36	long	_	RB	RB	_	34	advmod	_	_
37	.	_	.	.	_	11	punct	_	_

Oracle:
(a / anxious, degree, v / very)
(a4 / anxiety, quant, m3 / much)
(a4 / anxiety, time, o2 / often)
(c / contrast-01, ARG1, g / get-03)
(c / contrast-01, ARG2, a4 / anxiety)
(c2 / check-01, ARG0, i / i)
(c3 / cause-01, ARG0, m3 / much)
(g / get-03, ARG1, i / i)
(g / get-03, ARG2, a / anxious)
(g / get-03, condition, c2 / check-01)
(g2 / go-01, ARG1, a / anxious)
(g2 / go-01, direction, a2 / away)
(g2 / go-01, mod, s / sort)
(g2 / go-01, time, a3 / after)
(l / long, degree, t3 / that)
(w / wait-01, ARG1, i / i)
(w / wait-01, duration, l / long)

Input(Some(Graph((contrast-01 :ARG2 (anxiety :time often :quant (much :ARG0-of (cause-01 :ARG1 (capable-41 :polarity - :ARG2 (wait-01 :duration (long :degree that) :ARG1 i) :ARG1 i)))) :ARG1 (get-03 :condition (check-01 :polarity - :ARG0 i) :ARG2 (anxious :ARG1-of (go-01 :time (after :op (or :op (temporal-quantity :quant 15 :unit minute) :op (temporal-quantity :quant 30 :unit minute))) :mod sort :direction away) :degree very) :ARG1 i)),ArrayBuffer(Span(22,23,List(0),but,contrast-01,false), Span(25,26,List(1),anxiety,anxiety,false), Span(23,24,List(2),often,often,false), Span(28,29,List(3),much,much,false), Span(0,1,List(4),If,cause-01,false), Span(33,34,List(5),wait,wait-01,false), Span(35,36,List(6),long,long,false), Span(29,30,List(7),that,that,false), Span(7,8,List(8),get,get-03,false), Span(4,5,List(9),check,check-01,false), Span(10,11,List(10),anxious,anxious,false), Span(16,17,List(11),go,go-01,false), Span(18,19,List(12),after,after,false), Span(14,15,List(13),sort,sort,false), Span(17,18,List(14),away,away,false), Span(8,9,List(15),very,very,false), Span(1,2,List(16),I,i,false)),Map(2 -> often, 5 -> wait-01, 12 -> after, 15 -> very, 8 -> get-03, 7 -> that, 1 -> anxiety, 4 -> cause-01, 11 -> go-01, 14 -> away, 6 -> long, 9 -> check-01, 0 -> contrast-01, 16 -> i, 10 -> anxious, 3 -> much, 13 -> sort),Map(m3 -> much, w -> wait-01, a3 -> after, s -> sort, v -> very, g2 -> go-01, t3 -> that, g -> get-03, a -> anxious, c3 -> cause-01, o2 -> often, i -> i, a2 -> away, c -> contrast-01, l -> long, c2 -> check-01, a4 -> anxiety))),[Ljava.lang.String;@736caf7a,Annotation([Ljava.lang.String;@4ce7fffa,[Ljava.lang.String;@497486b3,[Ljava.lang.String;@63f8276e),Annotation([Ljava.lang.String;@75f95314,[Ljava.lang.String;@6127a7e,[Ledu.cmu.lti.nlp.amr.Dependency;@6bbe2511),Annotation([Ljava.lang.String;@495fac5f,[Ljava.lang.String;@76012793,[Ljava.lang.String;@635572a7),Annotation([Ljava.lang.String;@79d94571,[Ljava.lang.String;@4dd02341,[Ledu.cmu.lti.nlp.amr.Entity;@3212a8d7))
AMR:
(a / anxious, degree, v / very)
(c / contrast-01, ARG1, a / anxious)
(c / contrast-01, ARG2, m3 / much)
(c2 / check-01, ARG1, i / i)
(c3 / cause-01, ARG0, c2 / check-01)
(c3 / cause-01, ARG1, a / anxious)
(g / get-03, ARG1, a / anxious)
(g2 / go-01, ARG0, s / sort)
(g2 / go-01, ARG1, l / long)
(g2 / go-01, mod, a2 / away)
(g2 / go-01, time, a3 / after)
(m3 / much, domain, a4 / anxiety)
(m3 / much, domain, w / wait-01)
(o2 / often, quant, m3 / much)
(t3 / that, op, w / wait-01)
(w / wait-01, ARG1, l / long)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.2
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 486,659 microseconds
Sentence: I feel if I lost my wallet or phone, then I'm doomed or so I feel.

Oracle Span 1:  doomed => doom-01
Oracle Span 2:  feel => feel-02
Oracle Span 3:  feel => feel-02
Oracle Span 4:  I => i
Oracle Span 5:  lost => lose-02
Oracle Span 6:  or => or
Oracle Span 7:  or => or
Oracle Span 8:  phone => phone
Oracle Span 9:  wallet => wallet
Spans:
Span 13-14:  doomed => doom-01
Span 1-2:  feel => feel-02
Span 17-18:  feel => feel-02
Span 0-1:  I => i
Span 4-5:  lost => lose-02
Span 7-8:  or => or
Span 14-15:  or => or
Span 8-9:  phone => phone
Span 6-7:  wallet => wallet

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Oracle Span 13-14:  doomed => doom-01
Oracle Span 1-2:  feel => feel-02
Oracle Span 17-18:  feel => feel-02
Oracle Span 0-1:  I => i
Oracle Span 4-5:  lost => lose-02
Oracle Span 7-8:  or => or
Oracle Span 14-15:  or => or
Oracle Span 8-9:  phone => phone
Oracle Span 6-7:  wallet => wallet

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	feel	_	VBP	VBP	_	0	root	_	_
3	if	_	IN	IN	_	5	mark	_	_
4	I	_	PRP	PRP	_	5	nsubj	_	_
5	lost	_	VBD	VBD	_	2	advcl	_	_
6	my	_	PRP$	PRP$	_	7	poss	_	_
7	wallet	_	NN	NN	_	5	dobj	_	_
8	or	_	CC	CC	_	7	cc	_	_
9	phone	_	NN	NN	_	7	conj	_	_
10	,	_	,	,	_	5	punct	_	_
11	then	_	RB	RB	_	14	advmod	_	_
12	I	_	PRP	PRP	_	14	nsubjpass	_	_
13	'm	_	VBP	VBP	_	14	auxpass	_	_
14	doomed	_	VBN	VBN	_	5	parataxis	_	_
15	or	_	CC	CC	_	5	cc	_	_
16	so	_	IN	IN	_	18	mark	_	_
17	I	_	PRP	PRP	_	18	nsubj	_	_
18	feel	_	VBP	VBP	_	5	conj	_	_
19	.	_	.	.	_	2	punct	_	_

Oracle:
(d / doom-01, ARG1, i / i)
(f / feel-02, ARG0, i / i)
(f2 / feel-02, ARG0, i / i)
(f2 / feel-02, ARG1, d / doom-01)
(l / lose-02, ARG0, i / i)
(l / lose-02, ARG1, o2 / or)
(o / or, op, f / feel-02)
(o / or, op, f2 / feel-02)
(o2 / or, op, p / phone)
(o2 / or, op, w / wallet)
(p / phone, poss, i / i)
(w / wallet, poss, i / i)

Input(Some(Graph((or :op (feel-02 :ARG0 i :ARG1 doom-01) :op (feel-02 :ARG1 (have-condition-91 :ARG1 (doom-01 :ARG1 i) :ARG2 (lose-02 :ARG1 (or :op (phone :poss i) :op (wallet :poss i)) :ARG0 i)) :ARG0 i)),ArrayBuffer(Span(7,8,List(0),or,or,false), Span(1,2,List(1),feel,feel-02,false), Span(17,18,List(2),feel,feel-02,false), Span(13,14,List(3),doomed,doom-01,false), Span(4,5,List(4),lost,lose-02,false), Span(14,15,List(5),or,or,false), Span(8,9,List(6),phone,phone,false), Span(6,7,List(7),wallet,wallet,false), Span(0,1,List(8),I,i,false)),Map(2 -> feel-02, 5 -> or, 8 -> i, 7 -> wallet, 1 -> feel-02, 4 -> lose-02, 6 -> phone, 0 -> or, 3 -> doom-01),Map(w -> wallet, d -> doom-01, p -> phone, o2 -> or, i -> i, l -> lose-02, f2 -> feel-02, f -> feel-02, o -> or))),[Ljava.lang.String;@7a1a3478,Annotation([Ljava.lang.String;@495b0487,[Ljava.lang.String;@55dfcc6,[Ljava.lang.String;@222eb8aa),Annotation([Ljava.lang.String;@93cf163,[Ljava.lang.String;@1852a3ff,[Ledu.cmu.lti.nlp.amr.Dependency;@7203c7ff),Annotation([Ljava.lang.String;@25bfcafd,[Ljava.lang.String;@4b6690c0,[Ljava.lang.String;@46268f08),Annotation([Ljava.lang.String;@2a76840c,[Ljava.lang.String;@71454b9d,[Ledu.cmu.lti.nlp.amr.Entity;@eda25e5))
AMR:
(d / doom-01, ARG1, o2 / or)
(f2 / feel-02, ARG0, i / i)
(f2 / feel-02, ARG1, l / lose-02)
(l / lose-02, ARG1, w / wallet)
(l / lose-02, ARG6, o / or)
(o2 / or, op, f / feel-02)
(o2 / or, op, l / lose-02)
(o2 / or, op, p / phone)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 334,939 microseconds
Sentence: I just wish I could go out without worrying every 2 mins whether I've left or lost something.

Oracle Span 1:  2 => 2
Oracle Span 2:  go => go-17
Oracle Span 3:  I => i
Oracle Span 4:  just => just
Oracle Span 5:  left => leave-01
Oracle Span 6:  lost => lose-02
Oracle Span 7:  or => or
Oracle Span 8:  something => something
Oracle Span 9:  wish => wish-01
Oracle Span 10:  worrying => worry-02
Spans:
Span 10-11:  2 => 2
Span 5-6:  go => go-17
Span 0-1:  I => i
Span 1-2:  just => just
Span 15-16:  left => leave-01
Span 17-18:  lost => lose-02
Span 16-17:  or => or
Span 18-19:  something => something
Span 2-3:  wish => wish-01
Span 8-9:  worrying => worry-02

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 10-11:  2 => 2
Oracle Span 5-6:  go => go-17
Oracle Span 0-1:  I => i
Oracle Span 1-2:  just => just
Oracle Span 15-16:  left => leave-01
Oracle Span 17-18:  lost => lose-02
Oracle Span 16-17:  or => or
Oracle Span 18-19:  something => something
Oracle Span 2-3:  wish => wish-01
Oracle Span 8-9:  worrying => worry-02

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	just	_	RB	RB	_	3	advmod	_	_
3	wish	_	VBP	VBP	_	0	root	_	_
4	I	_	PRP	PRP	_	6	nsubj	_	_
5	could	_	MD	MD	_	6	aux	_	_
6	go	_	VB	VB	_	3	ccomp	_	_
7	out	_	RP	RP	_	6	prt	_	_
8	without	_	IN	IN	_	6	prep	_	_
9	worrying	_	VBG	VBG	_	8	pcomp	_	_
10	every	_	DT	DT	_	11	quantmod	_	_
11	2	_	CD	CD	_	12	num	_	_
12	mins	_	NNS	NNS	_	9	dobj	_	_
13	whether	_	IN	IN	_	16	mark	_	_
14	I	_	PRP	PRP	_	16	nsubj	_	_
15	've	_	VBP	VBP	_	16	aux	_	_
16	left	_	VBN	VBN	_	9	ccomp	_	_
17	or	_	CC	CC	_	16	cc	_	_
18	lost	_	VBN	VBN	_	16	conj	_	_
19	something	_	NN	NN	_	16	dobj	_	_
20	.	_	.	.	_	3	punct	_	_

Oracle:
(g / go-17, ARG0, i / i)
(g / go-17, manner, w2 / worry-02)
(l / leave-01, ARG0, i / i)
(l / leave-01, ARG1, s / something)
(l2 / lose-02, ARG0, i / i)
(l2 / lose-02, ARG1, s / something)
(o / or, op, l / leave-01)
(o / or, op, l2 / lose-02)
(w / wish-01, ARG0, i / i)
(w / wish-01, mod, j / just)
(w2 / worry-02, ARG0, i / i)
(w2 / worry-02, ARG1, o / or)

Input(Some(Graph((wish-01 :mod just :ARG1 (capable-41 :ARG2 (go-17 :manner (worry-02 :frequency (rate-entity-91 :ARG3 (temporal-quantity :quant 2 :unit minute)) :ARG1 (or :op (lose-02 :ARG0 i :ARG1 something) :op (leave-01 :ARG1 something :ARG0 i)) :polarity - :ARG0 i) :ARG0 i) :ARG1 i) :ARG0 i),ArrayBuffer(Span(2,3,List(0),wish,wish-01,false), Span(1,2,List(1),just,just,false), Span(5,6,List(2),go,go-17,false), Span(8,9,List(3),worrying,worry-02,false), Span(10,11,List(4),2,2,false), Span(16,17,List(5),or,or,false), Span(17,18,List(6),lost,lose-02,false), Span(15,16,List(7),left,leave-01,false), Span(18,19,List(8),something,something,false), Span(0,1,List(9),I,i,false)),Map(2 -> go-17, 5 -> or, 8 -> something, 7 -> leave-01, 1 -> just, 4 -> 2, 6 -> lose-02, 9 -> i, 0 -> wish-01, 3 -> worry-02),Map(w -> wish-01, 2 -> 2, j -> just, s -> something, g -> go-17, l2 -> lose-02, w2 -> worry-02, i -> i, l -> leave-01, o -> or))),[Ljava.lang.String;@7cf6a5f9,Annotation([Ljava.lang.String;@623e088f,[Ljava.lang.String;@39fcbef6,[Ljava.lang.String;@66565121),Annotation([Ljava.lang.String;@2fc6f97f,[Ljava.lang.String;@3d2ee678,[Ledu.cmu.lti.nlp.amr.Dependency;@6179e425),Annotation([Ljava.lang.String;@35f26e72,[Ljava.lang.String;@2d6764b2,[Ljava.lang.String;@67304a40),Annotation([Ljava.lang.String;@49c6c24f,[Ljava.lang.String;@6fe1b4fb,[Ledu.cmu.lti.nlp.amr.Entity;@79351f41))
AMR:
(g / go-17, ARG1, w2 / worry-02)
(l / leave-01, ARG1, 2 / 2)
(l2 / lose-02, ARG1, s / something)
(o / or, op, l / leave-01)
(o / or, op, l2 / lose-02)
(w / wish-01, ARG0, i / i)
(w / wish-01, ARG1, g / go-17)
(w / wish-01, ARG6, j / just)
(w2 / worry-02, ARG1, l / leave-01)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 190,620 microseconds
Sentence: I really dont know what to do, and am afraid of going to the GP.

Oracle Span 1:  and => and
Oracle Span 2:  do => (thing :ARG1-of do-02)
Oracle Span 3:  going => go-02
Oracle Span 4:  I => i
Oracle Span 5:  know => know-01
Oracle Span 6:  really => really
Spans:
Span 8-9:  and => and
Span 6-7:  do => (thing :ARG1-of do-02)
Span 12-13:  going => go-02
Span 0-1:  I => i
Span 3-4:  know => know-01
Span 1-2:  really => really

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 6-7:  do => (thing :ARG1-of do-02)
Oracle Span 12-13:  going => go-02
Oracle Span 0-1:  I => i
Oracle Span 3-4:  know => know-01
Oracle Span 1-2:  really => really

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	really	_	RB	RB	_	3	advmod	_	_
3	dont	_	VBP	VBP	_	0	root	_	_
4	know	_	VB	VB	_	3	xcomp	_	_
5	what	_	WP	WP	_	7	nsubj	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	do	_	VB	VB	_	4	ccomp	_	_
8	,	_	,	,	_	3	punct	_	_
9	and	_	CC	CC	_	3	cc	_	_
10	am	_	VBP	VBP	_	11	cop	_	_
11	afraid	_	JJ	JJ	_	3	conj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	going	_	VBG	VBG	_	12	pcomp	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	GP	_	NNP	NNP	_	14	pobj	_	_
17	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, k / know-01)
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, t / thing)
(g / go-02, ARG0, i / i)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t / thing)
(k / know-01, mod, r / really)

Input(Some(Graph((and :op (fear-01 :ARG1 (go-02 :ARG4 (practitioner :mod general) :ARG0 i) :ARG0 i) :op (know-01 :mod really :ARG1 (thing :ARG1-of (do-02 :ARG0 i)) :ARG0 i :polarity -)),ArrayBuffer(Span(8,9,List(0),and,and,false), Span(12,13,List(1),going,go-02,false), Span(3,4,List(2),know,know-01,false), Span(1,2,List(3),really,really,false), Span(6,7,List(4, 5),do,(thing :ARG1-of do-02),false), Span(0,1,List(6),I,i,false)),Map(2 -> know-01, 5 -> do-02, 1 -> go-02, 4 -> thing, 6 -> i, 0 -> and, 3 -> really),Map(t -> thing, k -> know-01, d -> do-02, g -> go-02, a -> and, i -> i, r -> really))),[Ljava.lang.String;@1c32386d,Annotation([Ljava.lang.String;@6399551e,[Ljava.lang.String;@13d73fa,[Ljava.lang.String;@5023bb8b),Annotation([Ljava.lang.String;@5d5f10b2,[Ljava.lang.String;@74c79fa2,[Ledu.cmu.lti.nlp.amr.Dependency;@1e0f9063),Annotation([Ljava.lang.String;@53bd8fca,[Ljava.lang.String;@7642df8f,[Ljava.lang.String;@3e30646a),Annotation([Ljava.lang.String;@5cde6747,[Ljava.lang.String;@63a270c9,[Ledu.cmu.lti.nlp.amr.Entity;@37c7595))
AMR:
(a / and, op, k / know-01)
(d / do-02, ARG1, t / thing)
(g / go-02, ARG1, k / know-01)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t / thing)
(r / really, calendar, i / i)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 148,744 microseconds
Sentence: They've probably never heard of some compulsion like this and I just dont know what to do

Oracle Span 1:  and => and
Oracle Span 2:  compulsion => compulsion
Oracle Span 3:  do => (thing :ARG1-of do-02)
Oracle Span 4:  heard => hear-01
Oracle Span 5:  I => i
Oracle Span 6:  just => just
Oracle Span 7:  know => know-01
Oracle Span 8:  probably => probable
Oracle Span 9:  some => some
Oracle Span 10:  They => they
Oracle Span 11:  this => this
Spans:
Span 10-11:  and => and
Span 7-8:  compulsion => compulsion
Span 17-18:  do => (thing :ARG1-of do-02)
Span 4-5:  heard => hear-01
Span 11-12:  I => i
Span 12-13:  just => just
Span 14-15:  know => know-01
Span 2-3:  probably => probable
Span 6-7:  some => some
Span 0-1:  They => they
Span 9-10:  this => this

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 10-11:  and => and
Oracle Span 7-8:  compulsion => compulsion
Oracle Span 17-18:  do => (thing :ARG1-of do-02)
Oracle Span 4-5:  heard => hear-01
Oracle Span 11-12:  I => i
Oracle Span 12-13:  just => just
Oracle Span 14-15:  know => know-01
Oracle Span 2-3:  probably => probable
Oracle Span 6-7:  some => some
Oracle Span 0-1:  They => they
Oracle Span 9-10:  this => this

Dependencies:
1	They	_	PRP	PRP	_	5	nsubj	_	_
2	've	_	VBP	VBP	_	5	aux	_	_
3	probably	_	RB	RB	_	5	advmod	_	_
4	never	_	RB	RB	_	5	neg	_	_
5	heard	_	VBN	VBN	_	0	root	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	some	_	DT	DT	_	8	det	_	_
8	compulsion	_	NN	NN	_	6	pobj	_	_
9	like	_	IN	IN	_	8	prep	_	_
10	this	_	DT	DT	_	9	pobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	I	_	PRP	PRP	_	10	conj	_	_
13	just	_	RB	RB	_	15	advmod	_	_
14	dont	_	NN	NN	_	15	nsubj	_	_
15	know	_	VBP	VBP	_	5	ccomp	_	_
16	what	_	WP	WP	_	18	nsubj	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	do	_	VB	VB	_	15	ccomp	_	_

Oracle:
(a / and, op, h / hear-01)
(a / and, op, k / know-01)
(c / compulsion, mod, s / some)
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, t3 / thing)
(h / hear-01, ARG0, t / they)
(h / hear-01, ARG1, c / compulsion)
(h / hear-01, mod, p / probable)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, t3 / thing)
(k / know-01, mod, j / just)

Input(Some(Graph((and :op (know-01 :mod just :ARG1 (thing :ARG1-of (do-02 :ARG0 i)) :ARG0 i :polarity -) :op (hear-01 :mod probable :time ever :ARG1 (compulsion :ARG1-of (resemble-01 :ARG2 this) :mod some) :ARG0 they :polarity -)),ArrayBuffer(Span(10,11,List(0),and,and,false), Span(14,15,List(1),know,know-01,false), Span(12,13,List(2),just,just,false), Span(17,18,List(3, 4),do,(thing :ARG1-of do-02),false), Span(11,12,List(5),I,i,false), Span(4,5,List(6),heard,hear-01,false), Span(7,8,List(7),compulsion,compulsion,false), Span(9,10,List(8),this,this,false), Span(6,7,List(9),some,some,false), Span(0,1,List(10),They,they,false), Span(2,3,List(11),probably,probable,false)),Map(2 -> just, 5 -> i, 8 -> this, 7 -> compulsion, 1 -> know-01, 4 -> do-02, 11 -> probable, 6 -> hear-01, 9 -> some, 0 -> and, 10 -> they, 3 -> thing),Map(h -> hear-01, t -> they, k -> know-01, j -> just, s -> some, d -> do-02, t3 -> thing, p -> probable, a -> and, t2 -> this, i -> i, c -> compulsion))),[Ljava.lang.String;@3ed242a4,Annotation([Ljava.lang.String;@1199fe66,[Ljava.lang.String;@614df0a4,[Ljava.lang.String;@1fdf1c5),Annotation([Ljava.lang.String;@2d96543c,[Ljava.lang.String;@73a2e526,[Ledu.cmu.lti.nlp.amr.Dependency;@7d64e326),Annotation([Ljava.lang.String;@13f95696,[Ljava.lang.String;@cd1d761,[Ljava.lang.String;@68be8808),Annotation([Ljava.lang.String;@32193bea,[Ljava.lang.String;@6b8d96d9,[Ledu.cmu.lti.nlp.amr.Entity;@69653e16))
AMR:
(a / and, calendar, t2 / this)
(a / and, op, i / i)
(c / compulsion, quant, s / some)
(d / do-02, ARG1, t3 / thing)
(h / hear-01, ARG0, t / they)
(h / hear-01, ARG1, k / know-01)
(h / hear-01, location, a / and)
(h / hear-01, location, c / compulsion)
(k / know-01, ARG1, t3 / thing)
(k / know-01, frequency, j / just)
(p / probable, domain, t / they)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.4
Decoded in 405,470 microseconds
Sentence: Do any of you have a similar 'ritual'?

Oracle Span 1:  any => any
Oracle Span 2:  have => have-03
Oracle Span 3:  of => (person :ARG1-of include-91)
Oracle Span 4:  ritual => ritual
Oracle Span 5:  you => you
Spans:
Span 1-2:  any => any
Span 4-5:  have => have-03
Span 2-3:  of => (person :ARG1-of include-91)
Span 8-9:  ritual => ritual
Span 3-4:  you => you

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 1-2:  any => any
Oracle Span 4-5:  have => have-03
Oracle Span 2-3:  of => (person :ARG1-of include-91)
Oracle Span 8-9:  ritual => ritual
Oracle Span 3-4:  you => you

Dependencies:
1	Do	_	VBP	VBP	_	5	aux	_	_
2	any	_	DT	DT	_	5	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	you	_	PRP	PRP	_	3	pobj	_	_
5	have	_	VB	VB	_	0	root	_	_
6	a	_	DT	DT	_	9	det	_	_
7	similar	_	JJ	JJ	_	9	amod	_	_
8	'	_	``	``	_	9	punct	_	_
9	ritual	_	NN	NN	_	5	dobj	_	_
10	'	_	''	''	_	9	punct	_	_
11	?	_	.	.	_	5	punct	_	_

Oracle:
(h / have-03, ARG0, p / person)
(h / have-03, ARG1, r / ritual)
(i / include-91, ARG1, p / person)
(i / include-91, ARG2, y / you)
(p / person, mod, a / any)

Input(Some(Graph((have-03 :ARG1 (ritual :ARG1-of resemble-01) :ARG0 (person :mod any :ARG1-of (include-91 :ARG2 you)) :mode interrogative),ArrayBuffer(Span(4,5,List(0),have,have-03,false), Span(8,9,List(1),ritual,ritual,false), Span(2,3,List(2, 3),of,(person :ARG1-of include-91),false), Span(3,4,List(4),you,you,false), Span(1,2,List(5),any,any,false)),Map(2 -> person, 5 -> any, 1 -> ritual, 4 -> you, 0 -> have-03, 3 -> include-91),Map(h -> have-03, y -> you, p -> person, a -> any, i -> include-91, r -> ritual))),[Ljava.lang.String;@758705fa,Annotation([Ljava.lang.String;@ebaa6cb,[Ljava.lang.String;@906d29b,[Ljava.lang.String;@49d3c823),Annotation([Ljava.lang.String;@436bc36,[Ljava.lang.String;@5fe1ce85,[Ledu.cmu.lti.nlp.amr.Dependency;@604c5de8),Annotation([Ljava.lang.String;@37091312,[Ljava.lang.String;@66fdec9,[Ljava.lang.String;@57abad67),Annotation([Ljava.lang.String;@550a1967,[Ljava.lang.String;@2a640157,[Ledu.cmu.lti.nlp.amr.Entity;@52851b44))
AMR:
(h / have-03, ARG0, p / person)
(h / have-03, ARG1, r / ritual)
(h / have-03, ARG6, a / any)
(i / include-91, ARG1, p / person)
(i / include-91, ARG6, y / you)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 122,693 microseconds
Sentence: People would think I'm crazy, but it's very strangely difficult to get yourself out of this.

Oracle Span 1:  but => contrast-01
Oracle Span 2:  crazy => crazy
Oracle Span 3:  difficult => difficult
Oracle Span 4:  get => get-05
Oracle Span 5:  I => i
Oracle Span 6:  out => out
Oracle Span 7:  strangely => strange
Oracle Span 8:  think => think-01
Oracle Span 9:  this => this
Oracle Span 10:  very => very
Spans:
Span 7-8:  but => contrast-01
Span 5-6:  crazy => crazy
Span 12-13:  difficult => difficult
Span 14-15:  get => get-05
Span 3-4:  I => i
Span 16-17:  out => out
Span 11-12:  strangely => strange
Span 2-3:  think => think-01
Span 18-19:  this => this
Span 10-11:  very => very

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 7-8:  but => contrast-01
Oracle Span 5-6:  crazy => crazy
Oracle Span 12-13:  difficult => difficult
Oracle Span 14-15:  get => get-05
Oracle Span 3-4:  I => i
Oracle Span 16-17:  out => out
Oracle Span 11-12:  strangely => strange
Oracle Span 2-3:  think => think-01
Oracle Span 18-19:  this => this
Oracle Span 10-11:  very => very

Dependencies:
1	People	_	NNS	NNS	_	3	nsubj	_	_
2	would	_	MD	MD	_	3	aux	_	_
3	think	_	VB	VB	_	0	root	_	_
4	I	_	PRP	PRP	_	6	nsubj	_	_
5	'm	_	VBP	VBP	_	6	cop	_	_
6	crazy	_	JJ	JJ	_	3	ccomp	_	_
7	,	_	,	,	_	3	punct	_	_
8	but	_	CC	CC	_	3	cc	_	_
9	it	_	PRP	PRP	_	13	nsubj	_	_
10	's	_	VBZ	VBZ	_	13	cop	_	_
11	very	_	RB	RB	_	13	advmod	_	_
12	strangely	_	RB	RB	_	13	advmod	_	_
13	difficult	_	JJ	JJ	_	3	conj	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	get	_	VB	VB	_	13	xcomp	_	_
16	yourself	_	PRP	PRP	_	15	dobj	_	_
17	out	_	RP	RP	_	15	prt	_	_
18	of	_	IN	IN	_	15	prep	_	_
19	this	_	DT	DT	_	18	pobj	_	_
20	.	_	.	.	_	3	punct	_	_

Oracle:
(c / contrast-01, ARG1, t / think-01)
(c / contrast-01, ARG2, d / difficult)
(c2 / crazy, domain, i / i)
(d / difficult, domain, g / get-05)
(d / difficult, manner, s / strange)
(g / get-05, ARG2, o / out)
(o / out, source, t2 / this)
(s / strange, degree, v / very)
(t / think-01, ARG1, c2 / crazy)

Input(Some(Graph((contrast-01 :ARG2 (difficult :manner (strange :degree very) :domain (get-05 :ARG2 (out :source this) :ARG1 you :ARG0 you)) :ARG1 (think-01 :ARG1 (crazy :domain i) :ARG0 person)),ArrayBuffer(Span(7,8,List(0),but,contrast-01,false), Span(12,13,List(1),difficult,difficult,false), Span(10,11,List(2),very,very,false), Span(14,15,List(3),get,get-05,false), Span(16,17,List(4),out,out,false), Span(18,19,List(5),this,this,false), Span(2,3,List(6),think,think-01,false), Span(5,6,List(7),crazy,crazy,false), Span(3,4,List(8),I,i,false), Span(11,12,List(9),strangely,strange,false)),Map(2 -> very, 5 -> this, 8 -> i, 7 -> crazy, 1 -> difficult, 4 -> out, 6 -> think-01, 9 -> strange, 0 -> contrast-01, 3 -> get-05),Map(t -> think-01, s -> strange, v -> very, d -> difficult, g -> get-05, t2 -> this, i -> i, c -> contrast-01, o -> out, c2 -> crazy))),[Ljava.lang.String;@584f54e6,Annotation([Ljava.lang.String;@5d8bafa9,[Ljava.lang.String;@576f63f6,[Ljava.lang.String;@2dca0d64),Annotation([Ljava.lang.String;@f80945f,[Ljava.lang.String;@ff684e1,[Ledu.cmu.lti.nlp.amr.Dependency;@23aa363a),Annotation([Ljava.lang.String;@5ef6ae06,[Ljava.lang.String;@55dfebeb,[Ljava.lang.String;@6e35bc3d),Annotation([Ljava.lang.String;@1cdc4c27,[Ljava.lang.String;@77b14724,[Ledu.cmu.lti.nlp.amr.Entity;@5d9b7a8a))
AMR:
(c / contrast-01, ARG1, c2 / crazy)
(c / contrast-01, ARG2, d / difficult)
(c2 / crazy, domain, i / i)
(d / difficult, degree, v / very)
(d / difficult, domain, g / get-05)
(d / difficult, mod, s / strange)
(g / get-05, ARG1, t2 / this)
(g / get-05, ARG6, o / out)
(t / think-01, ARG1, c2 / crazy)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 149,226 microseconds
Sentence: What advice could you give me?

Oracle Span 1:  advice => advise-01
Oracle Span 2:  could => possible
Oracle Span 3:  you => you
Spans:
Span 1-2:  advice => advise-01
Span 2-3:  could => possible
Span 3-4:  you => you

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 1-2:  advice => advise-01
Oracle Span 2-3:  could => possible
Oracle Span 3-4:  you => you

Dependencies:
1	What	_	WDT	WDT	_	2	det	_	_
2	advice	_	NN	NN	_	5	dep	_	_
3	could	_	MD	MD	_	5	aux	_	_
4	you	_	PRP	PRP	_	5	nsubj	_	_
5	give	_	VB	VB	_	0	root	_	_
6	me	_	PRP	PRP	_	5	dobj	_	_
7	?	_	.	.	_	5	punct	_	_

Oracle:
(a / advise-01, ARG0, y / you)
(a / advise-01, mod, p / possible)

Input(Some(Graph((advise-01 :mod possible :ARG2 amr-unknown :ARG1 i :ARG0 you),ArrayBuffer(Span(3,4,List(0),you,you,false), Span(2,3,List(1),could,possible,false), Span(1,2,List(2),advice,advise-01,false)),Map(2 -> advise-01, 1 -> possible, 0 -> you),Map(p -> possible, y -> you, a -> advise-01))),[Ljava.lang.String;@1e8ce150,Annotation([Ljava.lang.String;@604f2bd2,[Ljava.lang.String;@1d3ac898,[Ljava.lang.String;@1b73be9f),Annotation([Ljava.lang.String;@628c4ac0,[Ljava.lang.String;@7b84fcf8,[Ledu.cmu.lti.nlp.amr.Dependency;@30b19518),Annotation([Ljava.lang.String;@363042d7,[Ljava.lang.String;@366ac49b,[Ljava.lang.String;@6ad59d92),Annotation([Ljava.lang.String;@56f0cc85,[Ljava.lang.String;@62e20a76,[Ledu.cmu.lti.nlp.amr.Entity;@2cc44ad))
AMR:
(a / advise-01, ARG1, y / you)
(a / advise-01, ARG6, p / possible)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.3
Decoded in 26,586 microseconds
Sentence: I used to do this on my way to college-I had a list of items I knew I had on me and used to check compulsively on the bus.

Oracle Span 1:  and => and
Oracle Span 2:  bus => bus
Oracle Span 3:  check => check-01
Oracle Span 4:  college => college
Oracle Span 5:  compulsively => compulsive
Oracle Span 6:  do => do-02
Oracle Span 7:  had => have-03
Oracle Span 8:  had => have-03
Oracle Span 9:  I => i
Oracle Span 10:  items => item
Oracle Span 11:  knew => know-01
Oracle Span 12:  list => (thing :ARG2-of list-01)
Oracle Span 13:  this => this
Oracle Span 14:  used => use-02
Oracle Span 15:  used => use-02
Oracle Span 16:  way => way
Spans:
Span 23-24:  and => and
Span 30-31:  bus => bus
Span 26-27:  check => check-01
Span 9-10:  college => college
Span 27-28:  compulsively => compulsive
Span 3-4:  do => do-02
Span 12-13:  had => have-03
Span 20-21:  had => have-03
Span 0-1:  I => i
Span 16-17:  items => item
Span 18-19:  knew => know-01
Span 14-15:  list => (thing :ARG2-of list-01)
Span 4-5:  this => this
Span 1-2:  used => use-02
Span 24-25:  used => use-02
Span 7-8:  way => way

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 23-24:  and => and
Oracle Span 30-31:  bus => bus
Oracle Span 26-27:  check => check-01
Oracle Span 9-10:  college => college
Oracle Span 27-28:  compulsively => compulsive
Oracle Span 3-4:  do => do-02
Oracle Span 12-13:  had => have-03
Oracle Span 20-21:  had => have-03
Oracle Span 0-1:  I => i
Oracle Span 16-17:  items => item
Oracle Span 18-19:  knew => know-01
Oracle Span 14-15:  list => (thing :ARG2-of list-01)
Oracle Span 4-5:  this => this
Oracle Span 1-2:  used => use-02
Oracle Span 24-25:  used => use-02
Oracle Span 7-8:  way => way

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	used	_	VBD	VBD	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	do	_	VB	VB	_	2	xcomp	_	_
5	this	_	DT	DT	_	4	dobj	_	_
6	on	_	IN	IN	_	5	prep	_	_
7	my	_	PRP$	PRP$	_	8	poss	_	_
8	way	_	NN	NN	_	6	pobj	_	_
9	to	_	TO	TO	_	4	prep	_	_
10	college-I	_	NN	NN	_	9	pobj	_	_
11	had	_	VBN	VBN	_	10	dep	_	_
12	a	_	DT	DT	_	13	det	_	_
13	list	_	NN	NN	_	11	dobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	items	_	NNS	NNS	_	14	pobj	_	_
16	I	_	PRP	PRP	_	17	nsubj	_	_
17	knew	_	VBD	VBD	_	15	rcmod	_	_
18	I	_	PRP	PRP	_	19	nsubj	_	_
19	had	_	VBD	VBD	_	17	ccomp	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	me	_	PRP	PRP	_	20	pobj	_	_
22	and	_	CC	CC	_	11	cc	_	_
23	used	_	VBN	VBN	_	11	conj	_	_
24	to	_	TO	TO	_	25	aux	_	_
25	check	_	VB	VB	_	23	xcomp	_	_
26	compulsively	_	RB	RB	_	25	advmod	_	_
27	on	_	IN	IN	_	25	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	bus	_	NN	NN	_	27	pobj	_	_
30	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, h / have-03)
(a / and, op, u2 / use-02)
(c2 / check-01, ARG0, i / i)
(c2 / check-01, location, b / bus)
(c2 / check-01, manner, c3 / compulsive)
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, t / this)
(d / do-02, time, w / way)
(h / have-03, ARG1, t2 / thing)
(h2 / have-03, ARG0, i / i)
(h2 / have-03, ARG1, i2 / item)
(h2 / have-03, prep-on, i / i)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, h2 / have-03)
(l / list-01, ARG1, i2 / item)
(l / list-01, ARG2, t2 / thing)
(u / use-02, ARG0, i / i)
(u / use-02, ARG1, d / do-02)
(u2 / use-02, ARG0, i / i)
(u2 / use-02, ARG1, c2 / check-01)
(w / way, destination, c / college)
(w / way, poss, i / i)

Input(Some(Graph((multi-sentence :snt1 (use-02 :ARG1 (do-02 :time (way :destination college :poss i) :ARG1 this :ARG0 i) :ARG0 i) :snt2 (and :op (use-02 :ARG1 (check-01 :location bus :manner compulsive :ARG0 i) :ARG0 i) :op (have-03 :ARG1 (thing :ARG2-of (list-01 :ARG1 (item :ARG1-of (have-03 :ARG1-of (know-01 :ARG0 i) :ARG0 i :prep-on i))))))),ArrayBuffer(Span(1,2,List(0),used,use-02,false), Span(3,4,List(1),do,do-02,false), Span(7,8,List(2),way,way,false), Span(9,10,List(3),college,college,false), Span(4,5,List(4),this,this,false), Span(0,1,List(5),I,i,false), Span(23,24,List(6),and,and,false), Span(24,25,List(7),used,use-02,false), Span(26,27,List(8),check,check-01,false), Span(30,31,List(9),bus,bus,false), Span(12,13,List(10),had,have-03,false), Span(14,15,List(11, 12),list,(thing :ARG2-of list-01),false), Span(16,17,List(13),items,item,false), Span(20,21,List(14),had,have-03,false), Span(18,19,List(15),knew,know-01,false), Span(27,28,List(16),compulsively,compulsive,false)),Map(2 -> way, 5 -> i, 12 -> list-01, 15 -> know-01, 8 -> check-01, 7 -> use-02, 1 -> do-02, 4 -> this, 11 -> thing, 14 -> have-03, 6 -> and, 9 -> bus, 0 -> use-02, 16 -> compulsive, 10 -> have-03, 3 -> college, 13 -> item),Map(w -> way, h -> have-03, h2 -> have-03, k -> know-01, b -> bus, t -> this, u2 -> use-02, d -> do-02, c3 -> compulsive, a -> and, i2 -> item, t2 -> thing, i -> i, c -> college, l -> list-01, u -> use-02, c2 -> check-01))),[Ljava.lang.String;@44b3606b,Annotation([Ljava.lang.String;@1477089c,[Ljava.lang.String;@663411de,[Ljava.lang.String;@63dd899),Annotation([Ljava.lang.String;@59d2400d,[Ljava.lang.String;@75cd8043,[Ledu.cmu.lti.nlp.amr.Dependency;@33b1c5c5),Annotation([Ljava.lang.String;@5b202a3a,[Ljava.lang.String;@10b9db7b,[Ljava.lang.String;@9ef8eb7),Annotation([Ljava.lang.String;@34cdeda2,[Ljava.lang.String;@6ee660fb,[Ledu.cmu.lti.nlp.amr.Entity;@305a0c5f))
AMR:
(a / and, op, h / have-03)
(a / and, op, u2 / use-02)
(c2 / check-01, ARG1, c3 / compulsive)
(c2 / check-01, ARG2, b / bus)
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, t / this)
(d / do-02, ARG2, c / college)
(h / have-03, ARG1, t2 / thing)
(h2 / have-03, ARG1, i2 / item)
(k / know-01, ARG1, h2 / have-03)
(l / list-01, ARG1, i2 / item)
(l / list-01, ARG2, t2 / thing)
(u / use-02, ARG0, i / i)
(u / use-02, ARG1, w / way)
(u2 / use-02, ARG1, c / college)
(u2 / use-02, ARG2, c2 / check-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
Decoded in 731,500 microseconds
Sentence: I now have more severe anxiety and think this was just a warning sign so just try and wean yourself out of the habit while it's relatively fresh-definitely visit your doctor but also tell yourself not to keep checking these things (easier said than done I know).

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  anxiety => anxiety
Oracle Span 4:  but => contrast-01
Oracle Span 5:  checking => check-01
Oracle Span 6:  definitely => definite
Oracle Span 7:  doctor => doctor
Oracle Span 8:  done => do-02
Oracle Span 9:  easier => easy
Oracle Span 10:  fresh => fresh
Oracle Span 11:  habit => habit
Oracle Span 12:  have => have-03
Oracle Span 13:  I => i
Oracle Span 14:  just => just
Oracle Span 15:  keep => keep-01
Oracle Span 16:  know => know-01
Oracle Span 17:  more => more
Oracle Span 18:  now => now
Oracle Span 19:  relatively => relative
Oracle Span 20:  said => say-01
Oracle Span 21:  severe => severe
Oracle Span 22:  sign => sign
Oracle Span 23:  tell => tell-01
Oracle Span 24:  things => thing
Oracle Span 25:  think => think-01
Oracle Span 26:  this => this
Oracle Span 27:  try => try-01
Oracle Span 28:  visit => visit-01
Oracle Span 29:  warning => warn-01
Oracle Span 30:  wean => wean-01
Spans:
Span 6-7:  and => and
Span 17-18:  and => and
Span 5-6:  anxiety => anxiety
Span 34-35:  but => contrast-01
Span 41-42:  checking => check-01
Span 30-31:  definitely => definite
Span 33-34:  doctor => doctor
Span 48-49:  done => do-02
Span 45-46:  easier => easy
Span 28-29:  fresh => fresh
Span 23-24:  habit => habit
Span 2-3:  have => have-03
Span 0-1:  I => i
Span 10-11:  just => just
Span 40-41:  keep => keep-01
Span 50-51:  know => know-01
Span 3-4:  more => more
Span 1-2:  now => now
Span 27-28:  relatively => relative
Span 46-47:  said => say-01
Span 4-5:  severe => severe
Span 13-14:  sign => sign
Span 36-37:  tell => tell-01
Span 43-44:  things => thing
Span 7-8:  think => think-01
Span 8-9:  this => this
Span 16-17:  try => try-01
Span 31-32:  visit => visit-01
Span 12-13:  warning => warn-01
Span 18-19:  wean => wean-01

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 17-18:  and => and
Oracle Span 5-6:  anxiety => anxiety
Oracle Span 34-35:  but => contrast-01
Oracle Span 41-42:  checking => check-01
Oracle Span 30-31:  definitely => definite
Oracle Span 33-34:  doctor => doctor
Oracle Span 48-49:  done => do-02
Oracle Span 45-46:  easier => easy
Oracle Span 28-29:  fresh => fresh
Oracle Span 23-24:  habit => habit
Oracle Span 2-3:  have => have-03
Oracle Span 0-1:  I => i
Oracle Span 10-11:  just => just
Oracle Span 40-41:  keep => keep-01
Oracle Span 50-51:  know => know-01
Oracle Span 3-4:  more => more
Oracle Span 1-2:  now => now
Oracle Span 27-28:  relatively => relative
Oracle Span 46-47:  said => say-01
Oracle Span 4-5:  severe => severe
Oracle Span 13-14:  sign => sign
Oracle Span 36-37:  tell => tell-01
Oracle Span 43-44:  things => thing
Oracle Span 7-8:  think => think-01
Oracle Span 8-9:  this => this
Oracle Span 16-17:  try => try-01
Oracle Span 31-32:  visit => visit-01
Oracle Span 12-13:  warning => warn-01
Oracle Span 18-19:  wean => wean-01

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	now	_	RB	RB	_	3	advmod	_	_
3	have	_	VBP	VBP	_	0	root	_	_
4	more	_	RBR	RBR	_	5	advmod	_	_
5	severe	_	JJ	JJ	_	6	amod	_	_
6	anxiety	_	NN	NN	_	3	dobj	_	_
7	and	_	CC	CC	_	3	cc	_	_
8	think	_	VBP	VBP	_	3	conj	_	_
9	this	_	DT	DT	_	14	nsubj	_	_
10	was	_	VBD	VBD	_	14	cop	_	_
11	just	_	RB	RB	_	14	advmod	_	_
12	a	_	DT	DT	_	14	det	_	_
13	warning	_	NN	NN	_	14	nn	_	_
14	sign	_	NN	NN	_	8	ccomp	_	_
15	so	_	RB	RB	_	16	advmod	_	_
16	just	_	RB	RB	_	14	advmod	_	_
17	try	_	VB	VB	_	3	dep	_	_
18	and	_	CC	CC	_	17	cc	_	_
19	wean	_	VB	VB	_	17	conj	_	_
20	yourself	_	PRP	PRP	_	19	dobj	_	_
21	out	_	RP	RP	_	19	prt	_	_
22	of	_	IN	IN	_	19	prep	_	_
23	the	_	DT	DT	_	24	det	_	_
24	habit	_	NN	NN	_	22	pobj	_	_
25	while	_	IN	IN	_	29	mark	_	_
26	it	_	PRP	PRP	_	29	nsubj	_	_
27	's	_	VBZ	VBZ	_	29	cop	_	_
28	relatively	_	RB	RB	_	29	advmod	_	_
29	fresh-definitely	_	JJ	JJ	_	19	advcl	_	_
30	visit	_	VB	VB	_	29	ccomp	_	_
31	your	_	PRP$	PRP$	_	32	poss	_	_
32	doctor	_	NN	NN	_	30	dobj	_	_
33	but	_	CC	CC	_	34	cc	_	_
34	also	_	RB	RB	_	19	cc	_	_
35	tell	_	VB	VB	_	19	conj	_	_
36	yourself	_	PRP	PRP	_	35	dobj	_	_
37	not	_	RB	RB	_	39	neg	_	_
38	to	_	TO	TO	_	39	aux	_	_
39	keep	_	VB	VB	_	35	xcomp	_	_
40	checking	_	NN	NN	_	39	dobj	_	_
41	these	_	DT	DT	_	42	det	_	_
42	things	_	NNS	NNS	_	19	dobj	_	_
43	(	_	(	(	_	44	punct	_	_
44	easier	_	RB	RB	_	19	dep	_	_
45	said	_	VBD	VBD	_	44	ccomp	_	_
46	than	_	IN	IN	_	47	mark	_	_
47	done	_	VBN	VBN	_	45	advcl	_	_
48	I	_	PRP	PRP	_	49	nsubj	_	_
49	know	_	VB	VB	_	47	ccomp	_	_
50	)	_	)	)	_	44	punct	_	_
51	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, h / have-03)
(a / and, op, t / think-01)
(a2 / anxiety, mod, s / severe)
(a3 / and, op, t3 / try-01)
(a3 / and, op, v2 / visit-01)
(c / contrast-01, ARG1, v2 / visit-01)
(c / contrast-01, ARG2, t4 / tell-01)
(c2 / check-01, ARG1, t5 / thing)
(e / easy, compared-to, d3 / do-02)
(e / easy, degree, m3 / more)
(e / easy, domain, s3 / say-01)
(f / fresh, domain, h2 / habit)
(f / fresh, mod, r / relative)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, a2 / anxiety)
(h / have-03, time, n / now)
(k / keep-01, ARG1, c2 / check-01)
(k2 / know-01, ARG0, i / i)
(k2 / know-01, ARG1, e / easy)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, s2 / sign)
(t3 / try-01, ARG1, w2 / wean-01)
(t3 / try-01, mod, j / just)
(t4 / tell-01, ARG1, k / keep-01)
(t5 / thing, mod, t6 / this)
(v2 / visit-01, ARG1, d / doctor)
(v2 / visit-01, mod, d2 / definite)
(w / warn-01, ARG0, s2 / sign)
(w2 / wean-01, ARG2, h2 / habit)
(w2 / wean-01, time, f / fresh)

Input(Some(Graph((multi-sentence :snt2 (know-01 :ARG1 (easy :compared-to do-02 :domain say-01 :degree more) :ARG0 i) :snt1 (and :ARG0-of (cause-01 :ARG1 (and :op (visit-01 :ARG1-of (contrast-01 :ARG2 (tell-01 :ARG1 (keep-01 :ARG1 (check-01 :ARG1 (thing :mod this) :ARG0 you) :polarity - :ARG0 you) :ARG0 you :ARG2 you)) :mod definite :ARG1 (doctor :poss you) :mode imperative :ARG0 you) :op (try-01 :mod just :ARG1 (wean-01 :time (fresh :mod relative :domain habit) :ARG2 habit) :ARG0 you))) :op (think-01 :ARG1 (sign :domain this :ARG0-of warn-01) :ARG0 i) :op (have-03 :time now :ARG1 (anxiety :mod (severe :degree more)) :ARG0 i))),ArrayBuffer(Span(50,51,List(0),know,know-01,false), Span(45,46,List(1),easier,easy,false), Span(48,49,List(2),done,do-02,false), Span(46,47,List(3),said,say-01,false), Span(3,4,List(4),more,more,false), Span(6,7,List(5),and,and,false), Span(17,18,List(6),and,and,false), Span(31,32,List(7),visit,visit-01,false), Span(34,35,List(8),but,contrast-01,false), Span(36,37,List(9),tell,tell-01,false), Span(40,41,List(10),keep,keep-01,false), Span(41,42,List(11),checking,check-01,false), Span(43,44,List(12),things,thing,false), Span(8,9,List(13),this,this,false), Span(33,34,List(14),doctor,doctor,false), Span(16,17,List(15),try,try-01,false), Span(10,11,List(16),just,just,false), Span(18,19,List(17),wean,wean-01,false), Span(28,29,List(18),fresh,fresh,false), Span(23,24,List(19),habit,habit,false), Span(7,8,List(20),think,think-01,false), Span(13,14,List(21),sign,sign,false), Span(12,13,List(22),warning,warn-01,false), Span(2,3,List(23),have,have-03,false), Span(1,2,List(24),now,now,false), Span(5,6,List(25),anxiety,anxiety,false), Span(4,5,List(26),severe,severe,false), Span(0,1,List(27),I,i,false), Span(30,31,List(28),definitely,definite,false), Span(27,28,List(29),relatively,relative,false)),Map(2 -> do-02, 5 -> and, 27 -> i, 12 -> thing, 15 -> try-01, 8 -> contrast-01, 21 -> sign, 18 -> fresh, 24 -> now, 7 -> visit-01, 17 -> wean-01, 1 -> easy, 23 -> have-03, 26 -> severe, 4 -> more, 11 -> check-01, 14 -> doctor, 29 -> relative, 20 -> think-01, 28 -> definite, 6 -> and, 9 -> tell-01, 0 -> know-01, 22 -> warn-01, 16 -> just, 19 -> habit, 10 -> keep-01, 3 -> say-01, 25 -> anxiety, 13 -> this),Map(m3 -> more, e -> easy, n -> now, w -> warn-01, v2 -> visit-01, k2 -> know-01, h -> have-03, t4 -> tell-01, s2 -> sign, h2 -> habit, t -> think-01, k -> keep-01, d3 -> do-02, j -> just, a3 -> and, t6 -> this, s -> severe, d -> doctor, t3 -> try-01, a -> and, d2 -> definite, w2 -> wean-01, t5 -> thing, r -> relative, i -> i, a2 -> anxiety, c -> contrast-01, s3 -> say-01, f -> fresh, c2 -> check-01))),[Ljava.lang.String;@4535b6d5,Annotation([Ljava.lang.String;@1ecee32c,[Ljava.lang.String;@4372b9b6,[Ljava.lang.String;@232a7d73),Annotation([Ljava.lang.String;@4b41e4dd,[Ljava.lang.String;@22ffa91a,[Ledu.cmu.lti.nlp.amr.Dependency;@74960bfa),Annotation([Ljava.lang.String;@42721fe,[Ljava.lang.String;@40844aab,[Ljava.lang.String;@1f6c9cd8),Annotation([Ljava.lang.String;@5b619d14,[Ljava.lang.String;@66746f57,[Ledu.cmu.lti.nlp.amr.Entity;@447a020))
AMR:
(a / and, op, h / have-03)
(a / and, op, t / think-01)
(a2 / anxiety, mod, s / severe)
(a3 / and, op, h / have-03)
(a3 / and, op, t3 / try-01)
(a3 / and, op, t4 / tell-01)
(a3 / and, op, w2 / wean-01)
(c / contrast-01, ARG1, v2 / visit-01)
(c2 / check-01, ARG1, h2 / habit)
(d2 / definite, mod, r / relative)
(d3 / do-02, ARG1, k2 / know-01)
(f / fresh, mod, r / relative)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, a2 / anxiety)
(k / keep-01, ARG1, c2 / check-01)
(k2 / know-01, ARG1, a3 / and)
(s / severe, degree, m3 / more)
(s3 / say-01, ARG1, d3 / do-02)
(s3 / say-01, ARG6, e / easy)
(t / think-01, ARG1, t6 / this)
(t3 / try-01, ARG1, n / now)
(t4 / tell-01, ARG1, k / keep-01)
(t6 / this, mod, s2 / sign)
(t6 / this, time, j / just)
(v2 / visit-01, ARG1, d / doctor)
(v2 / visit-01, ARG6, d2 / definite)
(w / warn-01, ARG0, s2 / sign)
(w / warn-01, ARG1, c / contrast-01)
(w2 / wean-01, ARG1, t5 / thing)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.1.3
WARNING: makeIds can't find span Id: 0.1.2.0.1.3.0
WARNING: makeIds can't find span Id: 0.1.2.0.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.1.3.0.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.1.3.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.2.0.1.3.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.1.1
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.2
WARNING: makeIds can't find span Id: 0.1.2.0.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0.1.1
WARNING: makeIds can't find span Id: 0.1.2.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0.0.1.1.0
Decoded in 2,318,916 microseconds
Sentence: Doctors will have seen much worse cases so don't worry about that!

Oracle Span 1:  cases => case
Oracle Span 2:  Doctors => doctor
Oracle Span 3:  much => much
Oracle Span 4:  seen => see-01
Oracle Span 5:  that => that
Oracle Span 6:  worry => worry-02
Oracle Span 7:  worse => bad
Spans:
Span 6-7:  cases => case
Span 0-1:  Doctors => doctor
Span 4-5:  much => much
Span 3-4:  seen => see-01
Span 12-13:  that => that
Span 10-11:  worry => worry-02
Span 5-6:  worse => bad

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 6-7:  cases => case
Oracle Span 0-1:  Doctors => doctor
Oracle Span 4-5:  much => much
Oracle Span 3-4:  seen => see-01
Oracle Span 12-13:  that => that
Oracle Span 10-11:  worry => worry-02
Oracle Span 5-6:  worse => bad

Dependencies:
1	Doctors	_	NNS	NNS	_	4	nsubj	_	_
2	will	_	MD	MD	_	4	aux	_	_
3	have	_	VB	VB	_	4	aux	_	_
4	seen	_	VBN	VBN	_	0	root	_	_
5	much	_	RB	RB	_	6	advmod	_	_
6	worse	_	JJR	JJR	_	7	amod	_	_
7	cases	_	NNS	NNS	_	4	dobj	_	_
8	so	_	IN	IN	_	11	mark	_	_
9	do	_	VBP	VBP	_	11	aux	_	_
10	n't	_	RB	RB	_	11	neg	_	_
11	worry	_	VB	VB	_	4	advcl	_	_
12	about	_	IN	IN	_	11	prep	_	_
13	that	_	DT	DT	_	12	pobj	_	_
14	!	_	.	.	_	4	punct	_	_

Oracle:
(c2 / case, mod, b / bad)
(s / see-01, ARG0, d / doctor)
(s / see-01, ARG1, c2 / case)
(w / worry-02, ARG1, t / that)

Input(Some(Graph((cause-01 :ARG0 (see-01 :ARG1 (case :mod (bad :degree (more :quant much))) :ARG0 doctor) :ARG1 (worry-02 :ARG1 that :ARG0 you :mode imperative :polarity -)),ArrayBuffer(Span(3,4,List(0),seen,see-01,false), Span(6,7,List(1),cases,case,false), Span(5,6,List(2),worse,bad,false), Span(4,5,List(3),much,much,false), Span(0,1,List(4),Doctors,doctor,false), Span(10,11,List(5),worry,worry-02,false), Span(12,13,List(6),that,that,false)),Map(2 -> bad, 5 -> worry-02, 1 -> case, 4 -> doctor, 6 -> that, 0 -> see-01, 3 -> much),Map(w -> worry-02, t -> that, b -> bad, m2 -> much, s -> see-01, d -> doctor, c2 -> case))),[Ljava.lang.String;@7f36662c,Annotation([Ljava.lang.String;@28e8dde3,[Ljava.lang.String;@6d23017e,[Ljava.lang.String;@54dcfa5a),Annotation([Ljava.lang.String;@1817f1eb,[Ljava.lang.String;@767e20cf,[Ledu.cmu.lti.nlp.amr.Dependency;@3a3e78f),Annotation([Ljava.lang.String;@301ec38b,[Ljava.lang.String;@17a1e4ca,[Ljava.lang.String;@10ded6a9),Annotation([Ljava.lang.String;@c5dc4a2,[Ljava.lang.String;@4a194c39,[Ledu.cmu.lti.nlp.amr.Entity;@52066604))
AMR:
(c2 / case, mod, b / bad)
(s / see-01, ARG0, d / doctor)
(s / see-01, ARG1, c2 / case)
(s / see-01, condition, w / worry-02)
(w / worry-02, ARG0, t / that)
(w / worry-02, ARG1, m2 / much)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
Decoded in 94,782 microseconds
Sentence: I did about OCD in psycology today :P

Oracle Span 1:  did => do-02
Oracle Span 2:  I => i
Oracle Span 3:  OCD => (disease :name (name :op "OCD"))
Oracle Span 4:  psycology => psychology
Oracle Span 5:  today => today
NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 1-2:  did => do-02
Span 0-1:  I => i
Span 3-4:  OCD => (disease :name (name :op "OCD"))
Span 5-6:  psycology => psychology
Span 6-7:  today => today

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 1-2:  did => do-02
Oracle Span 0-1:  I => i
Oracle Span 3-4:  OCD => (disease :name (name :op "OCD"))
Oracle Span 5-6:  psycology => psychology
Oracle Span 6-7:  today => today

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	did	_	VBD	VBD	_	0	root	_	_
3	about	_	IN	IN	_	2	prep	_	_
4	OCD	_	NNP	NNP	_	3	pobj	_	_
5	in	_	IN	IN	_	2	prep	_	_
6	psycology	_	JJ	JJ	_	7	amod	_	_
7	today	_	NN	NN	_	5	pobj	_	_
8	:	_	:	:	_	7	punct	_	_
9	P	_	NNP	NNP	_	7	dep	_	_

Oracle:
(d / do-02, ARG0, i / i)
(d / do-02, time, p / psychology)
(d / do-02, time, t / today)
(d / do-02, topic, d2 / disease)
(d2 / disease, name, n / name)
(n / name, op, "OCD")

Input(Some(Graph((do-02 :time today :time psychology :topic (disease :name (name :op "OCD")) :ARG0 i),ArrayBuffer(Span(3,4,List(0, 1, 2),OCD,(disease :name (name :op "OCD")),false), Span(1,2,List(3),did,do-02,false), Span(6,7,List(4),today,today,false), Span(0,1,List(5),I,i,false), Span(5,6,List(6),psycology,psychology,false)),Map(2 -> "OCD", 5 -> i, 1 -> name, 4 -> today, 6 -> psychology, 0 -> disease, 3 -> do-02),Map(n -> name, t -> today, d -> do-02, p -> psychology, d2 -> disease, i -> i))),[Ljava.lang.String;@340b9973,Annotation([Ljava.lang.String;@56113384,[Ljava.lang.String;@5669c5fb,[Ljava.lang.String;@373ebf74),Annotation([Ljava.lang.String;@5f9678e1,[Ljava.lang.String;@c4ed84,[Ledu.cmu.lti.nlp.amr.Dependency;@189aa67a),Annotation([Ljava.lang.String;@5a9d6f02,[Ljava.lang.String;@362045c0,[Ljava.lang.String;@112f364d),Annotation([Ljava.lang.String;@5ccbeb64,[Ljava.lang.String;@6d9f7a80,[Ledu.cmu.lti.nlp.amr.Entity;@59252cb6))
AMR:
(d / do-02, ARG0, i / i)
(d / do-02, ARG1, t / today)
(d / do-02, ARG2, d2 / disease)
(d2 / disease, name, n / name)
(n / name, op, "OCD")
(t / today, mod, p / psychology)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 105,989 microseconds
Sentence: To get rid of it, one way could be just to avoid the compulsive act so don't check to see whether you have lost something, just leave it (:

Oracle Span 1:  act => act-01
Oracle Span 2:  avoid => avoid-01
Oracle Span 3:  check => check-01
Oracle Span 4:  compulsive => compulsive
Oracle Span 5:  could => possible
Oracle Span 6:  it => it
Oracle Span 7:  it => it
Oracle Span 8:  just => just
Oracle Span 9:  just => just
Oracle Span 10:  leave => leave-01
Oracle Span 11:  lost => lose-02
Oracle Span 12:  rid => rid-01
Oracle Span 13:  something => something
Oracle Span 14:  way => way
Oracle Span 15:  you => you
Spans:
Span 15-16:  act => act-01
Span 12-13:  avoid => avoid-01
Span 19-20:  check => check-01
Span 14-15:  compulsive => compulsive
Span 8-9:  could => possible
Span 4-5:  it => it
Span 30-31:  it => it
Span 10-11:  just => just
Span 28-29:  just => just
Span 29-30:  leave => leave-01
Span 25-26:  lost => lose-02
Span 2-3:  rid => rid-01
Span 26-27:  something => something
Span 7-8:  way => way
Span 23-24:  you => you

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 15-16:  act => act-01
Oracle Span 12-13:  avoid => avoid-01
Oracle Span 19-20:  check => check-01
Oracle Span 14-15:  compulsive => compulsive
Oracle Span 8-9:  could => possible
Oracle Span 4-5:  it => it
Oracle Span 30-31:  it => it
Oracle Span 10-11:  just => just
Oracle Span 28-29:  just => just
Oracle Span 29-30:  leave => leave-01
Oracle Span 25-26:  lost => lose-02
Oracle Span 2-3:  rid => rid-01
Oracle Span 26-27:  something => something
Oracle Span 7-8:  way => way
Oracle Span 23-24:  you => you

Dependencies:
1	To	_	TO	TO	_	3	aux	_	_
2	get	_	VB	VB	_	3	dep	_	_
3	rid	_	JJ	JJ	_	10	advcl	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	it	_	PRP	PRP	_	4	pobj	_	_
6	,	_	,	,	_	10	punct	_	_
7	one	_	CD	CD	_	8	num	_	_
8	way	_	NN	NN	_	10	nsubj	_	_
9	could	_	MD	MD	_	10	aux	_	_
10	be	_	VB	VB	_	0	root	_	_
11	just	_	RB	RB	_	10	advmod	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	avoid	_	VB	VB	_	10	xcomp	_	_
14	the	_	DT	DT	_	16	det	_	_
15	compulsive	_	JJ	JJ	_	16	amod	_	_
16	act	_	NN	NN	_	13	dobj	_	_
17	so	_	IN	IN	_	20	mark	_	_
18	do	_	VBP	VBP	_	20	aux	_	_
19	n't	_	RB	RB	_	20	neg	_	_
20	check	_	VB	VB	_	10	advcl	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	see	_	VB	VB	_	20	xcomp	_	_
23	whether	_	IN	IN	_	26	mark	_	_
24	you	_	PRP	PRP	_	26	nsubj	_	_
25	have	_	VBP	VBP	_	26	aux	_	_
26	lost	_	VBN	VBN	_	22	ccomp	_	_
27	something	_	NN	NN	_	26	dobj	_	_
28	,	_	,	,	_	26	punct	_	_
29	just	_	RB	RB	_	30	advmod	_	_
30	leave	_	VB	VB	_	26	dep	_	_
31	it	_	PRP	PRP	_	32	nsubj	_	_
32	(	_	JJ	JJ	_	30	xcomp	_	_
33	:	_	:	:	_	10	punct	_	_

Oracle:
(a / avoid-01, ARG0, y / you)
(a / avoid-01, ARG1, a2 / act-01)
(a / avoid-01, mod, j / just)
(a2 / act-01, ARG1, c / compulsive)
(c3 / check-01, ARG0, y / you)
(c3 / check-01, ARG1, l2 / lose-02)
(l / leave-01, ARG0, y / you)
(l / leave-01, ARG1, i2 / it)
(l / leave-01, mod, j2 / just)
(l2 / lose-02, ARG0, y / you)
(l2 / lose-02, ARG1, s / something)
(r / rid-01, ARG0, y / you)
(r / rid-01, ARG1, i / it)
(r / rid-01, instrument, w / way)
(w / way, domain, a / avoid-01)
(w / way, mod, p / possible)

Input(Some(Graph((way :ARG0-of (cause-01 :ARG1 (and :op (check-01 :ARG1 (lose-02 :ARG1 something :ARG0 you) :polarity - :mode imperative :ARG0 you) :op (leave-01 :mod just :ARG1 it :mode imperative :ARG0 you))) :domain (avoid-01 :mod just :ARG1 (act-01 :ARG1 compulsive) :ARG0 you) :instrument-of (rid-01 :ARG1 it :ARG0 you) :mod possible),ArrayBuffer(Span(7,8,List(0),way,way,false), Span(19,20,List(1),check,check-01,false), Span(25,26,List(2),lost,lose-02,false), Span(26,27,List(3),something,something,false), Span(29,30,List(4),leave,leave-01,false), Span(10,11,List(5),just,just,false), Span(4,5,List(6),it,it,false), Span(12,13,List(7),avoid,avoid-01,false), Span(28,29,List(8),just,just,false), Span(15,16,List(9),act,act-01,false), Span(14,15,List(10),compulsive,compulsive,false), Span(2,3,List(11),rid,rid-01,false), Span(30,31,List(12),it,it,false), Span(23,24,List(13),you,you,false), Span(8,9,List(14),could,possible,false)),Map(2 -> lose-02, 5 -> just, 12 -> it, 8 -> just, 7 -> avoid-01, 1 -> check-01, 4 -> leave-01, 11 -> rid-01, 14 -> possible, 6 -> it, 9 -> act-01, 0 -> way, 10 -> compulsive, 3 -> something, 13 -> you),Map(w -> way, j -> just, j2 -> just, s -> something, p -> possible, y -> you, a -> avoid-01, c3 -> check-01, i2 -> it, l2 -> lose-02, i -> it, r -> rid-01, a2 -> act-01, c -> compulsive, l -> leave-01))),[Ljava.lang.String;@31d0e481,Annotation([Ljava.lang.String;@3243b914,[Ljava.lang.String;@241e8ea6,[Ljava.lang.String;@542e560f),Annotation([Ljava.lang.String;@626c44e7,[Ljava.lang.String;@4dc8caa7,[Ledu.cmu.lti.nlp.amr.Dependency;@1d730606),Annotation([Ljava.lang.String;@3bcbb589,[Ljava.lang.String;@3b00856b,[Ljava.lang.String;@3016fd5e),Annotation([Ljava.lang.String;@35d08e6c,[Ljava.lang.String;@53d102a2,[Ledu.cmu.lti.nlp.amr.Entity;@6c45ee6e))
AMR:
(a / avoid-01, ARG0, w / way)
(a / avoid-01, ARG1, a2 / act-01)
(a / avoid-01, ARG6, r / rid-01)
(a / avoid-01, degree, j2 / just)
(a2 / act-01, ARG1, i / it)
(a2 / act-01, mod, c / compulsive)
(c3 / check-01, ARG0, w / way)
(c3 / check-01, ARG1, l2 / lose-02)
(l / leave-01, ARG1, s / something)
(l2 / lose-02, ARG0, y / you)
(l2 / lose-02, ARG1, s / something)
(l2 / lose-02, ARG6, j / just)
(p / possible, domain, w / way)
(r / rid-01, ARG1, i2 / it)

WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.3.0.0.2
WARNING: makeIds can't find span Id: 0.3.0.0.2.0
WARNING: makeIds can't find span Id: 0.3.0.1
WARNING: makeIds can't find span Id: 0.3.0.1.2
WARNING: makeIds can't find span Id: 0.3.0.1.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 543,863 microseconds
Sentence: Even though your anxiety levels would increase for a duration, they will gradualy decrease so hopefully, overtime your OCD will disappear (:

Oracle Span 1:  anxiety => anxiety
Oracle Span 2:  decrease => decrease-01
Oracle Span 3:  disappear => disappear-01
Oracle Span 4:  duration => duration
Oracle Span 5:  gradualy => gradual
Oracle Span 6:  hopefully => hope-01
Oracle Span 7:  increase => increase-01
Oracle Span 8:  levels => level
Oracle Span 9:  OCD => (disease :name (name :op "OCD"))
Oracle Span 10:  overtime => overtime
NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 3-4:  anxiety => anxiety
Span 14-15:  decrease => decrease-01
Span 22-23:  disappear => disappear-01
Span 9-10:  duration => duration
Span 13-14:  gradualy => gradual
Span 16-17:  hopefully => hope-01
Span 6-7:  increase => increase-01
Span 4-5:  levels => level
Span 20-21:  OCD => (disease :name (name :op "OCD"))
Span 18-19:  overtime => overtime

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 3-4:  anxiety => anxiety
Oracle Span 14-15:  decrease => decrease-01
Oracle Span 22-23:  disappear => disappear-01
Oracle Span 9-10:  duration => duration
Oracle Span 13-14:  gradualy => gradual
Oracle Span 16-17:  hopefully => hope-01
Oracle Span 6-7:  increase => increase-01
Oracle Span 4-5:  levels => level
Oracle Span 20-21:  OCD => (disease :name (name :op "OCD"))
Oracle Span 18-19:  overtime => overtime

Dependencies:
1	Even	_	RB	RB	_	7	advmod	_	_
2	though	_	IN	IN	_	7	mark	_	_
3	your	_	PRP$	PRP$	_	5	poss	_	_
4	anxiety	_	NN	NN	_	5	nn	_	_
5	levels	_	NNS	NNS	_	7	nsubj	_	_
6	would	_	MD	MD	_	7	aux	_	_
7	increase	_	VB	VB	_	23	advcl	_	_
8	for	_	IN	IN	_	7	prep	_	_
9	a	_	DT	DT	_	10	det	_	_
10	duration	_	NN	NN	_	8	pobj	_	_
11	,	_	,	,	_	15	punct	_	_
12	they	_	PRP	PRP	_	15	nsubj	_	_
13	will	_	MD	MD	_	15	aux	_	_
14	gradualy	_	RB	RB	_	15	advmod	_	_
15	decrease	_	VB	VB	_	23	parataxis	_	_
16	so	_	RB	RB	_	15	advmod	_	_
17	hopefully	_	RB	RB	_	15	advmod	_	_
18	,	_	,	,	_	15	punct	_	_
19	overtime	_	RB	RB	_	23	advmod	_	_
20	your	_	PRP$	PRP$	_	21	poss	_	_
21	OCD	_	NN	NN	_	23	nsubj	_	_
22	will	_	MD	MD	_	23	aux	_	_
23	disappear	_	VB	VB	_	0	root	_	_
24	(	_	NNS	NNS	_	23	dobj	_	_
25	:	_	:	:	_	23	punct	_	_

Oracle:
(d2 / decrease-01, ARG1, l / level)
(d2 / decrease-01, concession, i / increase-01)
(d2 / decrease-01, mod, g / gradual)
(d3 / disappear-01, ARG1, d4 / disease)
(d3 / disappear-01, time, o / overtime)
(d4 / disease, name, n / name)
(h / hope-01, ARG1, d3 / disappear-01)
(i / increase-01, ARG1, l / level)
(i / increase-01, duration, d / duration)
(l / level, mod, a / anxiety)
(n / name, op, "OCD")

Input(Some(Graph((decrease-01 :concession (increase-01 :duration duration :ARG1 (level :mod (anxiety :poss you))) :ARG0-of (cause-01 :ARG1 (disappear-01 :ARG1-of hope-01 :time overtime :ARG1 (disease :name (name :op "OCD") :poss you))) :mod gradual :ARG1 level),ArrayBuffer(Span(20,21,List(0, 1, 2),OCD,(disease :name (name :op "OCD")),false), Span(14,15,List(3),decrease,decrease-01,false), Span(6,7,List(4),increase,increase-01,false), Span(9,10,List(5),duration,duration,false), Span(4,5,List(6),levels,level,false), Span(3,4,List(7),anxiety,anxiety,false), Span(22,23,List(8),disappear,disappear-01,false), Span(18,19,List(9),overtime,overtime,false), Span(16,17,List(10),hopefully,hope-01,false), Span(13,14,List(11),gradualy,gradual,false)),Map(2 -> "OCD", 5 -> duration, 8 -> disappear-01, 7 -> anxiety, 1 -> name, 4 -> increase-01, 11 -> gradual, 6 -> level, 9 -> overtime, 0 -> disease, 10 -> hope-01, 3 -> decrease-01),Map(n -> name, h -> hope-01, d3 -> disappear-01, d -> duration, g -> gradual, a -> anxiety, d2 -> decrease-01, i -> increase-01, l -> level, d4 -> disease, o -> overtime))),[Ljava.lang.String;@6b3e12b5,Annotation([Ljava.lang.String;@5aac4250,[Ljava.lang.String;@1338fb5,[Ljava.lang.String;@42463763),Annotation([Ljava.lang.String;@59f63e24,[Ljava.lang.String;@61f05988,[Ledu.cmu.lti.nlp.amr.Dependency;@7ca33c24),Annotation([Ljava.lang.String;@fade1fc,[Ljava.lang.String;@67c2e933,[Ljava.lang.String;@41dd05a),Annotation([Ljava.lang.String;@613a8ee1,[Ljava.lang.String;@178213b,[Ledu.cmu.lti.nlp.amr.Entity;@7103cb56))
AMR:
(d2 / decrease-01, ARG1, o / overtime)
(d2 / decrease-01, degree, h / hope-01)
(d2 / decrease-01, manner, g / gradual)
(d3 / disappear-01, ARG1, d4 / disease)
(d3 / disappear-01, time, i / increase-01)
(d4 / disease, name, n / name)
(h / hope-01, ARG1, d3 / disappear-01)
(i / increase-01, ARG1, l / level)
(i / increase-01, ARG2, d / duration)
(l / level, mod, a / anxiety)
(n / name, op, "OCD")

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.0
Decoded in 312,832 microseconds
Sentence: To me that just sounds like you being overly anxious, as opposed to having really bad OCD.

Oracle Span 1:  anxious => anxious
Oracle Span 2:  bad => bad
Oracle Span 3:  having => have-03
Oracle Span 4:  OCD => (disease :name (name :op "OCD"))
Oracle Span 5:  overly => overly
Oracle Span 6:  really => really
Oracle Span 7:  sounds => sound-01
Oracle Span 8:  that => that
Oracle Span 9:  you => you
NER Entity: (organization :name (name :op "OCD"))
Spans:
Span 9-10:  anxious => anxious
Span 16-17:  bad => bad
Span 14-15:  having => have-03
Span 17-18:  OCD => (disease :name (name :op "OCD"))
Span 8-9:  overly => overly
Span 15-16:  really => really
Span 4-5:  sounds => sound-01
Span 2-3:  that => that
Span 6-7:  you => you

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 9-10:  anxious => anxious
Oracle Span 16-17:  bad => bad
Oracle Span 14-15:  having => have-03
Oracle Span 17-18:  OCD => (disease :name (name :op "OCD"))
Oracle Span 8-9:  overly => overly
Oracle Span 15-16:  really => really
Oracle Span 4-5:  sounds => sound-01
Oracle Span 2-3:  that => that
Oracle Span 6-7:  you => you

Dependencies:
1	To	_	TO	TO	_	5	prep	_	_
2	me	_	PRP	PRP	_	1	pobj	_	_
3	that	_	DT	DT	_	5	nsubj	_	_
4	just	_	RB	RB	_	5	advmod	_	_
5	sounds	_	VBZ	VBZ	_	0	root	_	_
6	like	_	IN	IN	_	5	prep	_	_
7	you	_	PRP	PRP	_	10	nsubj	_	_
8	being	_	VBG	VBG	_	10	cop	_	_
9	overly	_	RB	RB	_	10	advmod	_	_
10	anxious	_	JJ	JJ	_	6	pcomp	_	_
11	,	_	,	,	_	10	punct	_	_
12	as	_	RB	RB	_	10	advmod	_	_
13	opposed	_	VBN	VBN	_	10	dep	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	having	_	VBG	VBG	_	14	pcomp	_	_
16	really	_	RB	RB	_	18	advmod	_	_
17	bad	_	JJ	JJ	_	18	amod	_	_
18	OCD	_	NN	NN	_	15	dobj	_	_
19	.	_	.	.	_	5	punct	_	_

Oracle:
(a / anxious, degree, o / overly)
(a / anxious, domain, y / you)
(b / bad, degree, r / really)
(d / disease, mod, b / bad)
(d / disease, name, n / name)
(h / have-03, ARG0, y / you)
(h / have-03, ARG1, d / disease)
(n / name, op, "OCD")
(s / sound-01, ARG1, t / that)
(s / sound-01, ARG2, a / anxious)

Input(Some(Graph((sound-01 :ARG1-of (contrast-01 :ARG2 (have-03 :ARG1 (disease :mod (bad :degree really) :name (name :op "OCD")) :ARG0 you)) :ARG3 i :ARG2 (anxious :domain you :degree overly) :ARG1 that),ArrayBuffer(Span(17,18,List(0, 1, 2),OCD,(disease :name (name :op "OCD")),false), Span(4,5,List(3),sounds,sound-01,false), Span(14,15,List(4),having,have-03,false), Span(16,17,List(5),bad,bad,false), Span(15,16,List(6),really,really,false), Span(9,10,List(7),anxious,anxious,false), Span(6,7,List(8),you,you,false), Span(8,9,List(9),overly,overly,false), Span(2,3,List(10),that,that,false)),Map(2 -> "OCD", 5 -> bad, 8 -> you, 7 -> anxious, 1 -> name, 4 -> have-03, 6 -> really, 9 -> overly, 0 -> disease, 10 -> that, 3 -> sound-01),Map(n -> name, h -> have-03, t -> that, b -> bad, s -> sound-01, d -> disease, y -> you, a -> anxious, r -> really, o -> overly))),[Ljava.lang.String;@1b765a2c,Annotation([Ljava.lang.String;@2e8e8225,[Ljava.lang.String;@6ebf0f36,[Ljava.lang.String;@18920cc),Annotation([Ljava.lang.String;@2807bdeb,[Ljava.lang.String;@72c28d64,[Ledu.cmu.lti.nlp.amr.Dependency;@6492fab5),Annotation([Ljava.lang.String;@2c5529ab,[Ljava.lang.String;@39a8312f,[Ljava.lang.String;@5f6722d3),Annotation([Ljava.lang.String;@2c532cd8,[Ljava.lang.String;@294e5088,[Ledu.cmu.lti.nlp.amr.Entity;@51972dc7))
AMR:
(a / anxious, domain, y / you)
(a / anxious, mod, o / overly)
(d / disease, name, n / name)
(h / have-03, ARG0, o / overly)
(h / have-03, ARG1, d / disease)
(h / have-03, ARG6, r / really)
(n / name, op, "OCD")
(r / really, calendar, b / bad)
(s / sound-01, ARG0, t / that)
(s / sound-01, ARG1, a / anxious)

WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.3.0.0.0
WARNING: makeIds can't find span Id: 0.3.0.0.0.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.0.1
WARNING: makeIds can't find span Id: 0.3.0.0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 162,435 microseconds
Sentence: I am very obsessional to the point where I get up 20 times a night to check the locks in my house are all locked a particular way.

Oracle Span 1:  20 => 20
Oracle Span 2:  all => all
Oracle Span 3:  check => check-01
Oracle Span 4:  get => get-05
Oracle Span 5:  house => house
Oracle Span 6:  I => i
Oracle Span 7:  locked => lock
Oracle Span 8:  locks => lock-01
Oracle Span 9:  night => (temporal-quantity :unit night)
Oracle Span 10:  obsessional => obsess-01
Oracle Span 11:  particular => particular
Oracle Span 12:  up => up
Oracle Span 13:  very => very
Spans:
Span 11-12:  20 => 20
Span 23-24:  all => all
Span 16-17:  check => check-01
Span 9-10:  get => get-05
Span 21-22:  house => house
Span 0-1:  I => i
Span 24-25:  locked => lock
Span 18-19:  locks => lock-01
Span 14-15:  night => (temporal-quantity :unit night)
Span 3-4:  obsessional => obsess-01
Span 26-27:  particular => particular
Span 10-11:  up => up
Span 2-3:  very => very

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 11-12:  20 => 20
Oracle Span 23-24:  all => all
Oracle Span 16-17:  check => check-01
Oracle Span 9-10:  get => get-05
Oracle Span 21-22:  house => house
Oracle Span 0-1:  I => i
Oracle Span 24-25:  locked => lock
Oracle Span 18-19:  locks => lock-01
Oracle Span 14-15:  night => (temporal-quantity :unit night)
Oracle Span 3-4:  obsessional => obsess-01
Oracle Span 26-27:  particular => particular
Oracle Span 10-11:  up => up
Oracle Span 2-3:  very => very

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	am	_	VBP	VBP	_	4	cop	_	_
3	very	_	RB	RB	_	4	advmod	_	_
4	obsessional	_	JJ	JJ	_	0	root	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	point	_	NN	NN	_	5	pobj	_	_
8	where	_	WRB	WRB	_	10	advmod	_	_
9	I	_	PRP	PRP	_	10	nsubj	_	_
10	get	_	VBP	VBP	_	7	rcmod	_	_
11	up	_	RP	RP	_	10	prt	_	_
12	20	_	CD	CD	_	13	number	_	_
13	times	_	NNS	NNS	_	10	dobj	_	_
14	a	_	DT	DT	_	15	det	_	_
15	night	_	NN	NN	_	13	dep	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	check	_	VB	VB	_	10	vmod	_	_
18	the	_	DT	DT	_	19	det	_	_
19	locks	_	NNS	NNS	_	25	nsubjpass	_	_
20	in	_	IN	IN	_	19	prep	_	_
21	my	_	PRP$	PRP$	_	22	poss	_	_
22	house	_	NN	NN	_	20	pobj	_	_
23	are	_	VBP	VBP	_	25	auxpass	_	_
24	all	_	RB	RB	_	25	advmod	_	_
25	locked	_	VBN	VBN	_	17	ccomp	_	_
26	a	_	DT	DT	_	28	det	_	_
27	particular	_	JJ	JJ	_	28	amod	_	_
28	way	_	NN	NN	_	25	dobj	_	_
29	.	_	.	.	_	4	punct	_	_

Oracle:
(c / check-01, ARG0, i / i)
(c / check-01, ARG1, l / lock-01)
(g / get-05, ARG1, i / i)
(g / get-05, ARG2, u / up)
(g / get-05, purpose, c / check-01)
(h / house, poss, i / i)
(l / lock-01, ARG1, l2 / lock)
(l / lock-01, manner, p / particular)
(l2 / lock, location, h / house)
(l2 / lock, quant, a / all)
(o / obsess-01, ARG0, i / i)
(o / obsess-01, degree, v / very)
(o / obsess-01, extent, g / get-05)
(t / temporal-quantity, unit, n / night)

Input(Some(Graph((obsess-01 :extent (get-05 :purpose (check-01 :ARG1 (lock-01 :manner particular :ARG1 (lock :quant all :location (house :poss i))) :ARG0 i) :frequency (rate-entity-91 :ARG1 20 :ARG2 (temporal-quantity :unit night :quant 1)) :ARG2 up :ARG1 i) :degree very :ARG0 i),ArrayBuffer(Span(0,1,List(0),I,i,false), Span(2,3,List(1),very,very,false), Span(9,10,List(2),get,get-05,false), Span(16,17,List(3),check,check-01,false), Span(18,19,List(4),locks,lock-01,false), Span(26,27,List(5),particular,particular,false), Span(24,25,List(6),locked,lock,false), Span(23,24,List(7),all,all,false), Span(21,22,List(8),house,house,false), Span(11,12,List(9),20,20,false), Span(14,15,List(10, 11),night,(temporal-quantity :unit night),false), Span(10,11,List(12),up,up,false), Span(3,4,List(13),obsessional,obsess-01,false)),Map(2 -> get-05, 5 -> particular, 12 -> up, 8 -> house, 7 -> all, 1 -> very, 4 -> lock-01, 11 -> night, 6 -> lock, 9 -> 20, 0 -> i, 10 -> temporal-quantity, 3 -> check-01, 13 -> obsess-01),Map(n -> night, h -> house, 2 -> 20, t -> temporal-quantity, v -> very, p -> particular, g -> get-05, a -> all, l2 -> lock, i -> i, c -> check-01, u -> up, l -> lock-01, o -> obsess-01))),[Ljava.lang.String;@3700ec9c,Annotation([Ljava.lang.String;@2002348,[Ljava.lang.String;@5911e990,[Ljava.lang.String;@31000e60),Annotation([Ljava.lang.String;@1d470d0,[Ljava.lang.String;@24d09c1,[Ledu.cmu.lti.nlp.amr.Dependency;@54c62d71),Annotation([Ljava.lang.String;@65045a87,[Ljava.lang.String;@47f4e407,[Ljava.lang.String;@2d1dee39),Annotation([Ljava.lang.String;@48d5f34e,[Ljava.lang.String;@fc258b1,[Ledu.cmu.lti.nlp.amr.Entity;@6ff65192))
AMR:
(c / check-01, ARG0, t / temporal-quantity)
(c / check-01, ARG1, l2 / lock)
(g / get-05, ARG0, p / particular)
(g / get-05, ARG2, l2 / lock)
(g / get-05, direction, u / up)
(l / lock-01, ARG0, l2 / lock)
(l / lock-01, ARG1, h / house)
(l2 / lock, mod, a / all)
(o / obsess-01, ARG0, l2 / lock)
(o / obsess-01, ARG1, i / i)
(o / obsess-01, degree, v / very)
(t / temporal-quantity, unit, n / night)
(u / up, op, 2 / 20)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.2.2.0.1
WARNING: makeIds can't find span Id: 0.2.2.0.0
WARNING: makeIds can't find span Id: 0.2.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.1.1.1
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 611,629 microseconds
Sentence: Sometimes although I know they're locked I'm convinced they're not.

Oracle Span 1:  convinced => convince-01
Oracle Span 2:  I => i
Oracle Span 3:  know => know-01
Oracle Span 4:  locked => lock-01
Oracle Span 5:  Sometimes => sometimes
Oracle Span 6:  they => they
Spans:
Span 9-10:  convinced => convince-01
Span 2-3:  I => i
Span 3-4:  know => know-01
Span 6-7:  locked => lock-01
Span 0-1:  Sometimes => sometimes
Span 4-5:  they => they

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 9-10:  convinced => convince-01
Oracle Span 2-3:  I => i
Oracle Span 3-4:  know => know-01
Oracle Span 6-7:  locked => lock-01
Oracle Span 0-1:  Sometimes => sometimes
Oracle Span 4-5:  they => they

Dependencies:
1	Sometimes	_	RB	RB	_	4	advmod	_	_
2	although	_	IN	IN	_	4	mark	_	_
3	I	_	PRP	PRP	_	4	nsubj	_	_
4	know	_	VBP	VBP	_	10	advcl	_	_
5	they	_	PRP	PRP	_	7	nsubjpass	_	_
6	're	_	VBP	VBP	_	7	auxpass	_	_
7	locked	_	VBN	VBN	_	4	ccomp	_	_
8	I	_	PRP	PRP	_	10	nsubjpass	_	_
9	'm	_	VBP	VBP	_	10	auxpass	_	_
10	convinced	_	VBN	VBN	_	0	root	_	_
11	they	_	PRP	PRP	_	12	nsubj	_	_
12	're	_	VBP	VBP	_	10	ccomp	_	_
13	not	_	RB	RB	_	12	neg	_	_
14	.	_	.	.	_	10	punct	_	_

Oracle:
(c / convince-01, ARG1, i / i)
(c / convince-01, concession, k / know-01)
(c / convince-01, time, s / sometimes)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, l2 / lock-01)
(l2 / lock-01, ARG1, t / they)

Input(Some(Graph((convince-01 :concession (know-01 :ARG1 (lock-01 :ARG1 they) :ARG0 i) :time sometimes :ARG2 (lock-01 :polarity - :ARG1 they) :ARG1 i),ArrayBuffer(Span(9,10,List(0),convinced,convince-01,false), Span(3,4,List(1),know,know-01,false), Span(6,7,List(2),locked,lock-01,false), Span(0,1,List(3),Sometimes,sometimes,false), Span(4,5,List(4),they,they,false), Span(2,3,List(5),I,i,false)),Map(2 -> lock-01, 5 -> i, 1 -> know-01, 4 -> they, 0 -> convince-01, 3 -> sometimes),Map(t -> they, k -> know-01, s -> sometimes, i -> i, l2 -> lock-01, c -> convince-01))),[Ljava.lang.String;@2dd80673,Annotation([Ljava.lang.String;@4af0df05,[Ljava.lang.String;@57ea113a,[Ljava.lang.String;@acdb094),Annotation([Ljava.lang.String;@674bd420,[Ljava.lang.String;@2b0f373b,[Ledu.cmu.lti.nlp.amr.Dependency;@2ceb80a1),Annotation([Ljava.lang.String;@4b45dcb8,[Ljava.lang.String;@7216fb24,[Ljava.lang.String;@2072acb2),Annotation([Ljava.lang.String;@50ecde95,[Ljava.lang.String;@35a9782c,[Ledu.cmu.lti.nlp.amr.Entity;@70a36a66))
AMR:
(c / convince-01, ARG1, l2 / lock-01)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, l2 / lock-01)
(l2 / lock-01, ARG1, t / they)
(s / sometimes, domain, i / i)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 142,424 microseconds
Sentence: I think it becomes a real problem when the obsession starts to really interrupt your everyday routine.

Oracle Span 1:  becomes => become-01
Oracle Span 2:  I => i
Oracle Span 3:  interrupt => interrupt-01
Oracle Span 4:  it => it
Oracle Span 5:  obsession => obsess-01
Oracle Span 6:  problem => problem
Oracle Span 7:  real => real
Oracle Span 8:  really => really
Oracle Span 9:  routine => routine
Oracle Span 10:  starts => start-01
Oracle Span 11:  think => think-01
Spans:
Span 3-4:  becomes => become-01
Span 0-1:  I => i
Span 13-14:  interrupt => interrupt-01
Span 2-3:  it => it
Span 9-10:  obsession => obsess-01
Span 6-7:  problem => problem
Span 5-6:  real => real
Span 12-13:  really => really
Span 16-17:  routine => routine
Span 10-11:  starts => start-01
Span 1-2:  think => think-01

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 3-4:  becomes => become-01
Oracle Span 0-1:  I => i
Oracle Span 13-14:  interrupt => interrupt-01
Oracle Span 2-3:  it => it
Oracle Span 9-10:  obsession => obsess-01
Oracle Span 6-7:  problem => problem
Oracle Span 5-6:  real => real
Oracle Span 12-13:  really => really
Oracle Span 16-17:  routine => routine
Oracle Span 10-11:  starts => start-01
Oracle Span 1-2:  think => think-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	think	_	VBP	VBP	_	0	root	_	_
3	it	_	PRP	PRP	_	4	nsubj	_	_
4	becomes	_	VBZ	VBZ	_	2	ccomp	_	_
5	a	_	DT	DT	_	7	det	_	_
6	real	_	JJ	JJ	_	7	amod	_	_
7	problem	_	NN	NN	_	4	xcomp	_	_
8	when	_	WRB	WRB	_	11	advmod	_	_
9	the	_	DT	DT	_	10	det	_	_
10	obsession	_	NN	NN	_	11	nsubj	_	_
11	starts	_	VBZ	VBZ	_	7	rcmod	_	_
12	to	_	TO	TO	_	14	aux	_	_
13	really	_	RB	RB	_	14	advmod	_	_
14	interrupt	_	VB	VB	_	11	xcomp	_	_
15	your	_	PRP$	PRP$	_	17	poss	_	_
16	everyday	_	JJ	JJ	_	17	amod	_	_
17	routine	_	NN	NN	_	14	dobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(b / become-01, ARG1, i2 / it)
(b / become-01, ARG2, p / problem)
(i3 / interrupt-01, ARG0, o / obsess-01)
(i3 / interrupt-01, ARG1, r2 / routine)
(i3 / interrupt-01, mod, r3 / really)
(p / problem, mod, r / real)
(s / start-01, ARG1, i3 / interrupt-01)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, b / become-01)
(t / think-01, time, s / start-01)

Input(Some(Graph((think-01 :time (start-01 :ARG1 (interrupt-01 :mod really :ARG1 (routine :frequency (rate-entity-91 :ARG3 (temporal-quantity :quant 1 :unit day)) :poss you) :ARG0 obsess-01)) :ARG1 (become-01 :ARG2 (problem :mod real) :ARG1 it) :ARG0 i),ArrayBuffer(Span(1,2,List(0),think,think-01,false), Span(10,11,List(1),starts,start-01,false), Span(13,14,List(2),interrupt,interrupt-01,false), Span(12,13,List(3),really,really,false), Span(16,17,List(4),routine,routine,false), Span(3,4,List(5),becomes,become-01,false), Span(6,7,List(6),problem,problem,false), Span(5,6,List(7),real,real,false), Span(2,3,List(8),it,it,false), Span(0,1,List(9),I,i,false), Span(9,10,List(10),obsession,obsess-01,false)),Map(2 -> interrupt-01, 5 -> become-01, 8 -> it, 7 -> real, 1 -> start-01, 4 -> routine, 6 -> problem, 9 -> i, 0 -> think-01, 10 -> obsess-01, 3 -> really),Map(r3 -> really, b -> become-01, t -> think-01, s -> start-01, i3 -> interrupt-01, p -> problem, r2 -> routine, i2 -> it, i -> i, r -> real, o -> obsess-01))),[Ljava.lang.String;@45815ffc,Annotation([Ljava.lang.String;@732f29af,[Ljava.lang.String;@d3957fe,[Ljava.lang.String;@6622fc65),Annotation([Ljava.lang.String;@299321e2,[Ljava.lang.String;@23fb172e,[Ledu.cmu.lti.nlp.amr.Dependency;@64ba3208),Annotation([Ljava.lang.String;@158a3b2e,[Ljava.lang.String;@25a6944c,[Ljava.lang.String;@5e1fa5b1),Annotation([Ljava.lang.String;@6b00f608,[Ljava.lang.String;@2f17e30d,[Ledu.cmu.lti.nlp.amr.Entity;@3e821657))
AMR:
(b / become-01, ARG0, i2 / it)
(b / become-01, ARG1, p / problem)
(i3 / interrupt-01, ARG1, r2 / routine)
(i3 / interrupt-01, manner, r3 / really)
(p / problem, mod, r / real)
(s / start-01, ARG0, o / obsess-01)
(s / start-01, ARG1, i3 / interrupt-01)
(s / start-01, ARG2, p / problem)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, b / become-01)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.2
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2.0.0
Decoded in 334,802 microseconds
Sentence: You definitely aren't crazy though don't worry and your GP will be understanding of the issue I'm sure.

Oracle Span 1:  and => and
Oracle Span 2:  crazy => crazy
Oracle Span 3:  definitely => definite
Oracle Span 4:  I => i
Oracle Span 5:  issue => issue
Oracle Span 6:  understanding => understand-01
Oracle Span 7:  worry => worry-02
Oracle Span 8:  You => you
Spans:
Span 9-10:  and => and
Span 4-5:  crazy => crazy
Span 1-2:  definitely => definite
Span 18-19:  I => i
Span 17-18:  issue => issue
Span 14-15:  understanding => understand-01
Span 8-9:  worry => worry-02
Span 0-1:  You => you

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 4-5:  crazy => crazy
Oracle Span 1-2:  definitely => definite
Oracle Span 18-19:  I => i
Oracle Span 17-18:  issue => issue
Oracle Span 14-15:  understanding => understand-01
Oracle Span 8-9:  worry => worry-02
Oracle Span 0-1:  You => you

Dependencies:
1	You	_	PRP	PRP	_	5	nsubj	_	_
2	definitely	_	RB	RB	_	5	advmod	_	_
3	are	_	VBP	VBP	_	5	cop	_	_
4	n't	_	RB	RB	_	5	neg	_	_
5	crazy	_	JJ	JJ	_	0	root	_	_
6	though	_	IN	IN	_	9	mark	_	_
7	do	_	VBP	VBP	_	9	aux	_	_
8	n't	_	RB	RB	_	9	neg	_	_
9	worry	_	VB	VB	_	5	ccomp	_	_
10	and	_	CC	CC	_	5	cc	_	_
11	your	_	PRP$	PRP$	_	12	poss	_	_
12	GP	_	NN	NN	_	15	nsubj	_	_
13	will	_	MD	MD	_	15	aux	_	_
14	be	_	VB	VB	_	15	aux	_	_
15	understanding	_	VBG	VBG	_	5	conj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	issue	_	NN	NN	_	16	pobj	_	_
19	I	_	PRP	PRP	_	21	nsubj	_	_
20	'm	_	VBP	VBP	_	21	cop	_	_
21	sure	_	JJ	JJ	_	18	rcmod	_	_
22	.	_	.	.	_	5	punct	_	_

Oracle:
(c2 / crazy, domain, y / you)
(c2 / crazy, mod, d / definite)
(u / understand-01, ARG1, i2 / issue)
(w / worry-02, ARG0, y / you)

Input(Some(Graph((and :op (know-01 :ARG0 i :ARG1 (understand-01 :ARG1 issue :ARG0 (practitioner :mod general :poss you))) :op (cause-01 :ARG0 (crazy :mod definite :domain you :polarity -) :ARG1 (worry-02 :mode imperative :polarity - :ARG0 you))),ArrayBuffer(Span(9,10,List(0),and,and,false), Span(18,19,List(1),I,i,false), Span(14,15,List(2),understanding,understand-01,false), Span(17,18,List(3),issue,issue,false), Span(4,5,List(4),crazy,crazy,false), Span(0,1,List(5),You,you,false), Span(8,9,List(6),worry,worry-02,false), Span(1,2,List(7),definitely,definite,false)),Map(2 -> understand-01, 5 -> you, 7 -> definite, 1 -> i, 4 -> crazy, 6 -> worry-02, 0 -> and, 3 -> issue),Map(w -> worry-02, d -> definite, y -> you, a -> and, i2 -> issue, i -> i, u -> understand-01, c2 -> crazy))),[Ljava.lang.String;@1d131e1b,Annotation([Ljava.lang.String;@71cf1b07,[Ljava.lang.String;@615091b8,[Ljava.lang.String;@4fce136b),Annotation([Ljava.lang.String;@4aa83f4f,[Ljava.lang.String;@43b6123e,[Ledu.cmu.lti.nlp.amr.Dependency;@260e86a1),Annotation([Ljava.lang.String;@19648c40,[Ljava.lang.String;@12bd8a64,[Ljava.lang.String;@61e94def),Annotation([Ljava.lang.String;@3300f4fd,[Ljava.lang.String;@ebb6851,[Ledu.cmu.lti.nlp.amr.Entity;@70ab2d48))
AMR:
(a / and, op, u / understand-01)
(a / and, op, w / worry-02)
(c2 / crazy, domain, w / worry-02)
(c2 / crazy, mod, d / definite)
(i2 / issue, calendar, i / i)
(u / understand-01, ARG1, i2 / issue)
(w / worry-02, ARG1, y / you)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0.2
Decoded in 127,793 microseconds
Sentence: I go to therapy (for other reasons also) and they have encouraged me to pick a number of times to check, obviously that is less than 20, and to stick to it and cut down that way.

Oracle Span 1:  20 => 20
Oracle Span 2:  also => also
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  check => check-01
Oracle Span 6:  cut => cut-02
Oracle Span 7:  encouraged => encourage-01
Oracle Span 8:  go => go-01
Oracle Span 9:  I => i
Oracle Span 10:  less => less
Oracle Span 11:  number => number
Oracle Span 12:  obviously => obvious
Oracle Span 13:  other => other
Oracle Span 14:  pick => pick-01
Oracle Span 15:  reasons => reason
Oracle Span 16:  stick => stick-01
Oracle Span 17:  therapy => therapy
Oracle Span 18:  they => they
Spans:
Span 29-30:  20 => 20
Span 8-9:  also => also
Span 10-11:  and => and
Span 31-32:  and => and
Span 22-23:  check => check-01
Span 37-38:  cut => cut-02
Span 13-14:  encouraged => encourage-01
Span 1-2:  go => go-01
Span 0-1:  I => i
Span 27-28:  less => less
Span 18-19:  number => number
Span 24-25:  obviously => obvious
Span 6-7:  other => other
Span 16-17:  pick => pick-01
Span 7-8:  reasons => reason
Span 33-34:  stick => stick-01
Span 3-4:  therapy => therapy
Span 11-12:  they => they

Langrangian relaxation converged after 66 iterations. Delta = 0.0
Oracle Span 29-30:  20 => 20
Oracle Span 8-9:  also => also
Oracle Span 10-11:  and => and
Oracle Span 31-32:  and => and
Oracle Span 22-23:  check => check-01
Oracle Span 37-38:  cut => cut-02
Oracle Span 13-14:  encouraged => encourage-01
Oracle Span 1-2:  go => go-01
Oracle Span 0-1:  I => i
Oracle Span 27-28:  less => less
Oracle Span 18-19:  number => number
Oracle Span 24-25:  obviously => obvious
Oracle Span 6-7:  other => other
Oracle Span 16-17:  pick => pick-01
Oracle Span 7-8:  reasons => reason
Oracle Span 33-34:  stick => stick-01
Oracle Span 3-4:  therapy => therapy
Oracle Span 11-12:  they => they

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	go	_	VBP	VBP	_	0	root	_	_
3	to	_	TO	TO	_	2	prep	_	_
4	therapy	_	NN	NN	_	3	pobj	_	_
5	(	_	(	(	_	6	punct	_	_
6	for	_	IN	IN	_	4	prep	_	_
7	other	_	JJ	JJ	_	8	amod	_	_
8	reasons	_	NNS	NNS	_	6	pobj	_	_
9	also	_	RB	RB	_	6	advmod	_	_
10	)	_	)	)	_	6	punct	_	_
11	and	_	CC	CC	_	2	cc	_	_
12	they	_	PRP	PRP	_	14	nsubj	_	_
13	have	_	VBP	VBP	_	14	aux	_	_
14	encouraged	_	VBN	VBN	_	2	conj	_	_
15	me	_	PRP	PRP	_	14	dobj	_	_
16	to	_	TO	TO	_	17	aux	_	_
17	pick	_	VB	VB	_	14	xcomp	_	_
18	a	_	DT	DT	_	19	det	_	_
19	number	_	NN	NN	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	times	_	NNS	NNS	_	20	pobj	_	_
22	to	_	TO	TO	_	23	aux	_	_
23	check	_	VB	VB	_	17	dep	_	_
24	,	_	,	,	_	23	punct	_	_
25	obviously	_	RB	RB	_	23	advmod	_	_
26	that	_	IN	IN	_	30	mark	_	_
27	is	_	VBZ	VBZ	_	30	cop	_	_
28	less	_	JJR	JJR	_	29	mwe	_	_
29	than	_	IN	IN	_	30	quantmod	_	_
30	20	_	CD	CD	_	23	ccomp	_	_
31	,	_	,	,	_	23	punct	_	_
32	and	_	CC	CC	_	23	cc	_	_
33	to	_	TO	TO	_	34	aux	_	_
34	stick	_	VB	VB	_	23	conj	_	_
35	to	_	TO	TO	_	34	prep	_	_
36	it	_	PRP	PRP	_	35	pobj	_	_
37	and	_	CC	CC	_	34	cc	_	_
38	cut	_	VB	VB	_	34	conj	_	_
39	down	_	RP	RP	_	38	prt	_	_
40	that	_	DT	DT	_	41	det	_	_
41	way	_	NN	NN	_	38	dobj	_	_
42	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, e / encourage-01)
(a / and, op, g / go-01)
(a3 / and, op, c / cut-02)
(a3 / and, op, p / pick-01)
(a3 / and, op, s / stick-01)
(c / cut-02, ARG0, i / i)
(c / cut-02, ARG4, n2 / number)
(c2 / check-01, ARG0, i / i)
(c2 / check-01, frequency, n2 / number)
(e / encourage-01, ARG0, t2 / they)
(e / encourage-01, ARG1, i / i)
(e / encourage-01, ARG2, a3 / and)
(g / go-01, ARG1, i / i)
(g / go-01, ARG4, t / therapy)
(g / go-01, purpose, r / reason)
(l / less, compared-to, 2 / 20)
(l / less, mod, o2 / obvious)
(n2 / number, mod, l / less)
(p / pick-01, ARG0, i / i)
(p / pick-01, ARG1, n2 / number)
(r / reason, mod, a2 / also)
(r / reason, mod, o / other)
(s / stick-01, ARG1, i / i)
(s / stick-01, ARG2, n2 / number)

Input(Some(Graph((and :op (encourage-01 :ARG2 (and :op (cut-02 :ARG0 i :ARG4 number) :op (stick-01 :ARG1 i :ARG2 number) :op (pick-01 :ARG1 (number :frequency-of (check-01 :ARG0 i) :mod (less :mod obvious :compared-to 20)) :ARG0 i)) :ARG0 they :ARG1 i) :op (go-01 :purpose (reason :mod also :mod other) :ARG4 therapy :ARG1 i)),ArrayBuffer(Span(10,11,List(0),and,and,false), Span(13,14,List(1),encouraged,encourage-01,false), Span(31,32,List(2),and,and,false), Span(37,38,List(3),cut,cut-02,false), Span(33,34,List(4),stick,stick-01,false), Span(16,17,List(5),pick,pick-01,false), Span(18,19,List(6),number,number,false), Span(22,23,List(7),check,check-01,false), Span(27,28,List(8),less,less,false), Span(29,30,List(9),20,20,false), Span(11,12,List(10),they,they,false), Span(1,2,List(11),go,go-01,false), Span(7,8,List(12),reasons,reason,false), Span(8,9,List(13),also,also,false), Span(6,7,List(14),other,other,false), Span(3,4,List(15),therapy,therapy,false), Span(0,1,List(16),I,i,false), Span(24,25,List(17),obviously,obvious,false)),Map(2 -> and, 5 -> pick-01, 12 -> reason, 15 -> therapy, 8 -> less, 7 -> check-01, 17 -> obvious, 1 -> encourage-01, 4 -> stick-01, 11 -> go-01, 14 -> other, 6 -> number, 9 -> 20, 0 -> and, 16 -> i, 10 -> they, 3 -> cut-02, 13 -> also),Map(e -> encourage-01, 2 -> 20, t -> therapy, a3 -> and, s -> stick-01, g -> go-01, p -> pick-01, a -> and, o2 -> obvious, t2 -> they, i -> i, a2 -> also, r -> reason, c -> cut-02, l -> less, o -> other, c2 -> check-01, n2 -> number))),[Ljava.lang.String;@5b068087,Annotation([Ljava.lang.String;@6f152006,[Ljava.lang.String;@3a393455,[Ljava.lang.String;@13518f37),Annotation([Ljava.lang.String;@7cbc3762,[Ljava.lang.String;@3a6f2de3,[Ledu.cmu.lti.nlp.amr.Dependency;@49872d67),Annotation([Ljava.lang.String;@56303b57,[Ljava.lang.String;@4b2a01d4,[Ljava.lang.String;@8692d67),Annotation([Ljava.lang.String;@78f5c518,[Ljava.lang.String;@2f48b3d2,[Ledu.cmu.lti.nlp.amr.Entity;@34f7234e))
AMR:
(a / and, op, e / encourage-01)
(a / and, op, g / go-01)
(a3 / and, op, c / cut-02)
(a3 / and, op, c2 / check-01)
(a3 / and, op, s / stick-01)
(c / cut-02, ARG1, l / less)
(c2 / check-01, ARG1, a2 / also)
(c2 / check-01, ARG6, o2 / obvious)
(e / encourage-01, ARG0, t2 / they)
(e / encourage-01, ARG1, a3 / and)
(e / encourage-01, ARG2, p / pick-01)
(g / go-01, ARG0, i / i)
(g / go-01, ARG1, r / reason)
(g / go-01, ARG4, t / therapy)
(p / pick-01, ARG1, n2 / number)
(r / reason, mod, o / other)
(s / stick-01, ARG1, 2 / 20)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.1
Decoded in 1,508,739 microseconds
Sentence: I think the idea is to teach me, I'm still 'okay' if I check 5 times or 20 times.

Oracle Span 1:  20 => 20
Oracle Span 2:  5 => 5
Oracle Span 3:  check => check-01
Oracle Span 4:  I => i
Oracle Span 5:  idea => idea
Oracle Span 6:  okay => okay
Oracle Span 7:  or => or
Oracle Span 8:  still => still
Oracle Span 9:  teach => teach-01
Oracle Span 10:  think => think-01
Spans:
Span 21-22:  20 => 20
Span 18-19:  5 => 5
Span 17-18:  check => check-01
Span 0-1:  I => i
Span 3-4:  idea => idea
Span 13-14:  okay => okay
Span 20-21:  or => or
Span 11-12:  still => still
Span 6-7:  teach => teach-01
Span 1-2:  think => think-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 21-22:  20 => 20
Oracle Span 18-19:  5 => 5
Oracle Span 17-18:  check => check-01
Oracle Span 0-1:  I => i
Oracle Span 3-4:  idea => idea
Oracle Span 13-14:  okay => okay
Oracle Span 20-21:  or => or
Oracle Span 11-12:  still => still
Oracle Span 6-7:  teach => teach-01
Oracle Span 1-2:  think => think-01

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	think	_	VBP	VBP	_	14	ccomp	_	_
3	the	_	DT	DT	_	4	det	_	_
4	idea	_	NN	NN	_	5	nsubj	_	_
5	is	_	VBZ	VBZ	_	2	ccomp	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	teach	_	VB	VB	_	5	xcomp	_	_
8	me	_	PRP	PRP	_	7	dobj	_	_
9	,	_	,	,	_	14	punct	_	_
10	I	_	PRP	PRP	_	14	nsubj	_	_
11	'm	_	VBP	VBP	_	14	cop	_	_
12	still	_	RB	RB	_	14	advmod	_	_
13	'	_	``	``	_	14	punct	_	_
14	okay	_	JJ	JJ	_	0	root	_	_
15	'	_	''	''	_	14	punct	_	_
16	if	_	IN	IN	_	18	mark	_	_
17	I	_	PRP	PRP	_	18	nsubj	_	_
18	check	_	VBP	VBP	_	14	ccomp	_	_
19	5	_	CD	CD	_	20	num	_	_
20	times	_	NNS	NNS	_	18	dobj	_	_
21	or	_	CC	CC	_	20	cc	_	_
22	20	_	CD	CD	_	23	num	_	_
23	times	_	NNS	NNS	_	20	conj	_	_
24	.	_	.	.	_	14	punct	_	_

Oracle:
(c2 / check-01, ARG0, i / i)
(c2 / check-01, frequency, 2 / 20)
(o / okay, concession, o2 / or)
(o / okay, domain, i / i)
(o / okay, mod, s / still)
(o2 / or, op, c2 / check-01)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, t2 / teach-01)
(t2 / teach-01, ARG1, o / okay)
(t2 / teach-01, ARG2, i / i)
(t2 / teach-01, domain, i2 / idea)

Input(Some(Graph((think-01 :ARG1 (teach-01 :domain idea :ARG1 (okay :concession (or :op (check-01 :frequency 20 :ARG0 i) :op (check-01 :frequency 5 :ARG0 i)) :mod still :domain i) :ARG2 i) :ARG0 i),ArrayBuffer(Span(1,2,List(0),think,think-01,false), Span(6,7,List(1),teach,teach-01,false), Span(3,4,List(2),idea,idea,false), Span(13,14,List(3),okay,okay,false), Span(20,21,List(4),or,or,false), Span(17,18,List(5),check,check-01,false), Span(21,22,List(6),20,20,false), Span(18,19,List(7),5,5,false), Span(11,12,List(8),still,still,false), Span(0,1,List(9),I,i,false)),Map(2 -> idea, 5 -> check-01, 8 -> still, 7 -> 5, 1 -> teach-01, 4 -> or, 6 -> 20, 9 -> i, 0 -> think-01, 3 -> okay),Map(2 -> 20, 5 -> 5, t -> think-01, s -> still, o2 -> or, i2 -> idea, t2 -> teach-01, i -> i, o -> okay, c2 -> check-01))),[Ljava.lang.String;@753432a2,Annotation([Ljava.lang.String;@23bff419,[Ljava.lang.String;@4983159f,[Ljava.lang.String;@44e3a2b2),Annotation([Ljava.lang.String;@101639ae,[Ljava.lang.String;@4c550889,[Ledu.cmu.lti.nlp.amr.Dependency;@1d2bd371),Annotation([Ljava.lang.String;@44040454,[Ljava.lang.String;@65fe9e33,[Ljava.lang.String;@18bc345),Annotation([Ljava.lang.String;@42f8285e,[Ljava.lang.String;@26bab2f1,[Ledu.cmu.lti.nlp.amr.Entity;@3724af13))
AMR:
(2 / 20, op, t / think-01)
(c2 / check-01, ARG1, o2 / or)
(o / okay, domain, c2 / check-01)
(o / okay, domain, t / think-01)
(o / okay, mod, s / still)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, i2 / idea)
(t2 / teach-01, ARG0, i2 / idea)
(t2 / teach-01, ARG1, 5 / 5)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 299,976 microseconds
Sentence: So far I have been a lot better, I think there is definitely hope of improvement for anyone that wants it.

Oracle Span 1:  anyone => anyone
Oracle Span 2:  better => good
Oracle Span 3:  definitely => definite
Oracle Span 4:  hope => hope-01
Oracle Span 5:  I => i
Oracle Span 6:  improvement => improve-01
Oracle Span 7:  lot => lot
Oracle Span 8:  think => think-01
Oracle Span 9:  wants => want-01
Spans:
Span 18-19:  anyone => anyone
Span 7-8:  better => good
Span 13-14:  definitely => definite
Span 14-15:  hope => hope-01
Span 2-3:  I => i
Span 16-17:  improvement => improve-01
Span 6-7:  lot => lot
Span 10-11:  think => think-01
Span 20-21:  wants => want-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 18-19:  anyone => anyone
Oracle Span 7-8:  better => good
Oracle Span 13-14:  definitely => definite
Oracle Span 14-15:  hope => hope-01
Oracle Span 2-3:  I => i
Oracle Span 16-17:  improvement => improve-01
Oracle Span 6-7:  lot => lot
Oracle Span 10-11:  think => think-01
Oracle Span 20-21:  wants => want-01

Dependencies:
1	So	_	IN	IN	_	8	advmod	_	_
2	far	_	RB	RB	_	1	advmod	_	_
3	I	_	PRP	PRP	_	8	nsubj	_	_
4	have	_	VBP	VBP	_	8	aux	_	_
5	been	_	VBN	VBN	_	8	cop	_	_
6	a	_	DT	DT	_	7	det	_	_
7	lot	_	RB	RB	_	8	npadvmod	_	_
8	better	_	JJR	JJR	_	11	ccomp	_	_
9	,	_	,	,	_	11	punct	_	_
10	I	_	PRP	PRP	_	11	nsubj	_	_
11	think	_	VBP	VBP	_	0	root	_	_
12	there	_	EX	EX	_	13	expl	_	_
13	is	_	VBZ	VBZ	_	11	ccomp	_	_
14	definitely	_	RB	RB	_	13	advmod	_	_
15	hope	_	NN	NN	_	13	nsubj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	improvement	_	NN	NN	_	16	pobj	_	_
18	for	_	IN	IN	_	17	prep	_	_
19	anyone	_	NN	NN	_	18	pobj	_	_
20	that	_	WDT	WDT	_	21	nsubj	_	_
21	wants	_	VBZ	VBZ	_	15	rcmod	_	_
22	it	_	PRP	PRP	_	21	dobj	_	_
23	.	_	.	.	_	11	punct	_	_

Oracle:
(g / good, domain, i / i)
(h / hope-01, ARG1, i2 / improve-01)
(h / hope-01, mod, d / definite)
(i2 / improve-01, ARG0, a / anyone)
(t / think-01, ARG0, i / i)
(t / think-01, ARG1, h / hope-01)
(w / want-01, ARG0, a / anyone)
(w / want-01, ARG1, i2 / improve-01)

Input(Some(Graph((and :op (good :time so-far :domain i :degree (more :quant lot)) :op (think-01 :ARG1 (hope-01 :mod definite :ARG1 (improve-01 :ARG0 (anyone :ARG0-of (want-01 :ARG1 improve-01)))) :ARG0 i)),ArrayBuffer(Span(7,8,List(0),better,good,false), Span(2,3,List(1),I,i,false), Span(6,7,List(2),lot,lot,false), Span(10,11,List(3),think,think-01,false), Span(14,15,List(4),hope,hope-01,false), Span(18,19,List(5),anyone,anyone,false), Span(20,21,List(6),wants,want-01,false), Span(13,14,List(7),definitely,definite,false), Span(16,17,List(8),improvement,improve-01,false)),Map(2 -> lot, 5 -> anyone, 8 -> improve-01, 7 -> definite, 1 -> i, 4 -> hope-01, 6 -> want-01, 0 -> good, 3 -> think-01),Map(w -> want-01, h -> hope-01, t -> think-01, d -> definite, g -> good, a -> anyone, i2 -> improve-01, i -> i, l -> lot))),[Ljava.lang.String;@68ead359,Annotation([Ljava.lang.String;@6b53bcc2,[Ljava.lang.String;@180da663,[Ljava.lang.String;@a43ce46),Annotation([Ljava.lang.String;@340da44c,[Ljava.lang.String;@424ebba3,[Ledu.cmu.lti.nlp.amr.Dependency;@37052337),Annotation([Ljava.lang.String;@2320fa6f,[Ljava.lang.String;@7a560583,[Ljava.lang.String;@4d722ac9),Annotation([Ljava.lang.String;@53f0a4cb,[Ljava.lang.String;@77a7cf58,[Ledu.cmu.lti.nlp.amr.Entity;@3d97a632))
AMR:
(g / good, calendar, l / lot)
(h / hope-01, ARG1, i2 / improve-01)
(h / hope-01, ARG6, d / definite)
(i2 / improve-01, ARG1, a / anyone)
(t / think-01, ARG0, d / definite)
(t / think-01, ARG1, i / i)
(t / think-01, ARG6, g / good)
(w / want-01, ARG0, h / hope-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 221,174 microseconds
Sentence: Usually I'm pretty calm about things and like to take things as they come and not to worry too much.

Oracle Span 1:  and => and
Oracle Span 2:  calm => calm
Oracle Span 3:  come => come-01
Oracle Span 4:  I => i
Oracle Span 5:  like => like-02
Oracle Span 6:  much => much
Oracle Span 7:  pretty => pretty
Oracle Span 8:  take => take-02
Oracle Span 9:  things => thing
Oracle Span 10:  too => too
Oracle Span 11:  Usually => usual
Oracle Span 12:  worry => worry-01
Spans:
Span 7-8:  and => and
Span 4-5:  calm => calm
Span 14-15:  come => come-01
Span 1-2:  I => i
Span 8-9:  like => like-02
Span 20-21:  much => much
Span 3-4:  pretty => pretty
Span 10-11:  take => take-02
Span 6-7:  things => thing
Span 19-20:  too => too
Span 0-1:  Usually => usual
Span 18-19:  worry => worry-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 4-5:  calm => calm
Oracle Span 14-15:  come => come-01
Oracle Span 1-2:  I => i
Oracle Span 8-9:  like => like-02
Oracle Span 20-21:  much => much
Oracle Span 3-4:  pretty => pretty
Oracle Span 10-11:  take => take-02
Oracle Span 6-7:  things => thing
Oracle Span 19-20:  too => too
Oracle Span 0-1:  Usually => usual
Oracle Span 18-19:  worry => worry-01

Dependencies:
1	Usually	_	RB	RB	_	5	advmod	_	_
2	I	_	PRP	PRP	_	5	nsubj	_	_
3	'm	_	VBP	VBP	_	5	cop	_	_
4	pretty	_	RB	RB	_	5	advmod	_	_
5	calm	_	JJ	JJ	_	0	root	_	_
6	about	_	IN	IN	_	5	prep	_	_
7	things	_	NNS	NNS	_	6	pobj	_	_
8	and	_	CC	CC	_	5	cc	_	_
9	like	_	VBP	VBP	_	5	conj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	take	_	VB	VB	_	9	ccomp	_	_
12	things	_	NNS	NNS	_	11	dobj	_	_
13	as	_	IN	IN	_	15	mark	_	_
14	they	_	PRP	PRP	_	15	nsubj	_	_
15	come	_	VBP	VBP	_	11	advcl	_	_
16	and	_	CC	CC	_	11	cc	_	_
17	not	_	RB	RB	_	19	neg	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	worry	_	VB	VB	_	11	conj	_	_
20	too	_	RB	RB	_	21	advmod	_	_
21	much	_	RB	RB	_	19	advmod	_	_
22	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, c / calm)
(a / and, op, l / like-02)
(a / and, op, w / worry-01)
(c / calm, domain, i / i)
(c / calm, mod, p / pretty)
(c / calm, mod, u / usual)
(c / calm, topic, t / thing)
(c2 / come-01, ARG1, t / thing)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, t2 / take-02)
(m / much, degree, t3 / too)
(t2 / take-02, ARG0, i / i)
(t2 / take-02, ARG1, t / thing)
(t2 / take-02, prep-as, c2 / come-01)
(w / worry-01, ARG1, i / i)
(w / worry-01, quant, m / much)

Input(Some(Graph((and :op (worry-01 :quant (much :degree too) :polarity - :ARG1 i) :op (like-02 :ARG1 (take-02 :prep-as (come-01 :ARG1 thing) :ARG0 i :ARG1 thing) :ARG0 i) :op (calm :mod usual :topic thing :domain i :mod pretty)),ArrayBuffer(Span(7,8,List(0),and,and,false), Span(18,19,List(1),worry,worry-01,false), Span(20,21,List(2),much,much,false), Span(19,20,List(3),too,too,false), Span(8,9,List(4),like,like-02,false), Span(10,11,List(5),take,take-02,false), Span(14,15,List(6),come,come-01,false), Span(4,5,List(7),calm,calm,false), Span(6,7,List(8),things,thing,false), Span(1,2,List(9),I,i,false), Span(3,4,List(10),pretty,pretty,false), Span(0,1,List(11),Usually,usual,false)),Map(2 -> much, 5 -> take-02, 8 -> thing, 7 -> calm, 1 -> worry-01, 4 -> like-02, 11 -> usual, 6 -> come-01, 9 -> i, 0 -> and, 10 -> pretty, 3 -> too),Map(w -> worry-01, t -> thing, m -> much, p -> pretty, t3 -> too, a -> and, t2 -> take-02, i -> i, u -> usual, c -> calm, l -> like-02, c2 -> come-01))),[Ljava.lang.String;@616fe72b,Annotation([Ljava.lang.String;@37efd131,[Ljava.lang.String;@7e7b159b,[Ljava.lang.String;@7e5d9a50),Annotation([Ljava.lang.String;@60957c0f,[Ljava.lang.String;@293a5f75,[Ledu.cmu.lti.nlp.amr.Dependency;@fcb4004),Annotation([Ljava.lang.String;@1dd6d4b7,[Ljava.lang.String;@56e8b606,[Ljava.lang.String;@2dd29a59),Annotation([Ljava.lang.String;@784c3487,[Ljava.lang.String;@53142455,[Ledu.cmu.lti.nlp.amr.Entity;@40dff0b7))
AMR:
(a / and, op, l / like-02)
(c / calm, domain, i / i)
(c / calm, location, t / thing)
(c / calm, mod, p / pretty)
(c2 / come-01, ARG1, u / usual)
(l / like-02, ARG1, t2 / take-02)
(t2 / take-02, ARG1, c / calm)
(t2 / take-02, time, c2 / come-01)
(w / worry-01, ARG1, t2 / take-02)
(w / worry-01, ARG6, t3 / too)
(w / worry-01, degree, m / much)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.3
Decoded in 284,915 microseconds
Sentence: However, over the last month or two I've found myself becoming really anxious about things, and I'm not talking about a mere out of the blue feeling of nervousness.

Oracle Span 1:  and => and
Oracle Span 2:  anxious => anxious
Oracle Span 3:  becoming => become-01
Oracle Span 4:  feeling => feel-01
Oracle Span 5:  found => find-01
Oracle Span 6:  I => i
Oracle Span 7:  last => last
Oracle Span 8:  mere => mere
Oracle Span 9:  month => (temporal-quantity :unit month)
Oracle Span 10:  nervousness => nervous
Oracle Span 11:  or => or
Oracle Span 12:  really => real
Oracle Span 13:  talking => talk-01
Oracle Span 14:  things => thing
Oracle Span 15:  two => 2
Spans:
Span 18-19:  and => and
Span 14-15:  anxious => anxious
Span 12-13:  becoming => become-01
Span 30-31:  feeling => feel-01
Span 10-11:  found => find-01
Span 8-9:  I => i
Span 4-5:  last => last
Span 25-26:  mere => mere
Span 5-6:  month => (temporal-quantity :unit month)
Span 32-33:  nervousness => nervous
Span 6-7:  or => or
Span 13-14:  really => real
Span 22-23:  talking => talk-01
Span 16-17:  things => thing
Span 7-8:  two => 2

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 18-19:  and => and
Oracle Span 14-15:  anxious => anxious
Oracle Span 12-13:  becoming => become-01
Oracle Span 30-31:  feeling => feel-01
Oracle Span 10-11:  found => find-01
Oracle Span 8-9:  I => i
Oracle Span 4-5:  last => last
Oracle Span 25-26:  mere => mere
Oracle Span 5-6:  month => (temporal-quantity :unit month)
Oracle Span 32-33:  nervousness => nervous
Oracle Span 6-7:  or => or
Oracle Span 13-14:  really => real
Oracle Span 22-23:  talking => talk-01
Oracle Span 16-17:  things => thing
Oracle Span 7-8:  two => 2

Dependencies:
1	However	_	RB	RB	_	11	advmod	_	_
2	,	_	,	,	_	11	punct	_	_
3	over	_	IN	IN	_	11	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	last	_	JJ	JJ	_	6	amod	_	_
6	month	_	NN	NN	_	3	pobj	_	_
7	or	_	CC	CC	_	6	cc	_	_
8	two	_	CD	CD	_	6	conj	_	_
9	I	_	PRP	PRP	_	11	nsubj	_	_
10	've	_	VBP	VBP	_	11	aux	_	_
11	found	_	VBN	VBN	_	0	root	_	_
12	myself	_	PRP	PRP	_	13	nsubj	_	_
13	becoming	_	VBG	VBG	_	11	dep	_	_
14	really	_	RB	RB	_	15	advmod	_	_
15	anxious	_	JJ	JJ	_	13	acomp	_	_
16	about	_	IN	IN	_	13	prep	_	_
17	things	_	NNS	NNS	_	16	pobj	_	_
18	,	_	,	,	_	11	punct	_	_
19	and	_	CC	CC	_	11	cc	_	_
20	I	_	PRP	PRP	_	23	nsubj	_	_
21	'm	_	VBP	VBP	_	23	aux	_	_
22	not	_	RB	RB	_	23	neg	_	_
23	talking	_	VBG	VBG	_	11	conj	_	_
24	about	_	IN	IN	_	23	prep	_	_
25	a	_	DT	DT	_	27	det	_	_
26	mere	_	JJ	JJ	_	27	amod	_	_
27	out	_	NN	NN	_	24	pobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	31	det	_	_
30	blue	_	JJ	JJ	_	31	amod	_	_
31	feeling	_	NN	NN	_	28	pobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	nervousness	_	NN	NN	_	32	pobj	_	_
34	.	_	.	.	_	11	punct	_	_

Oracle:
(a / anxious, mod, r / real)
(a / anxious, topic, t / thing)
(a2 / and, op, f / find-01)
(a2 / and, op, t4 / talk-01)
(b / become-01, ARG1, i / i)
(b / become-01, ARG2, a / anxious)
(f / find-01, ARG0, i / i)
(f / find-01, ARG1, b / become-01)
(f / find-01, duration, o / or)
(f2 / feel-01, ARG1, n / nervous)
(f2 / feel-01, mod, m3 / mere)
(o / or, op, t3 / temporal-quantity)
(t3 / temporal-quantity, mod, l / last)
(t3 / temporal-quantity, quant, 2 / 2)
(t3 / temporal-quantity, unit, m2 / month)
(t4 / talk-01, ARG0, i / i)
(t4 / talk-01, ARG1, f2 / feel-01)

Input(Some(Graph((contrast-01 :ARG2 (and :op (talk-01 :ARG1 (feel-01 :mod out-of-the-blue :mod mere :ARG1 nervous) :polarity - :ARG0 i) :op (find-01 :duration (or :op (temporal-quantity :unit month :quant 2 :mod last) :op (temporal-quantity :quant 1 :unit month :mod last)) :ARG1 (become-01 :ARG2 (anxious :mod real :topic thing) :ARG1 i) :ARG0 i))),ArrayBuffer(Span(18,19,List(0),and,and,false), Span(22,23,List(1),talking,talk-01,false), Span(30,31,List(2),feeling,feel-01,false), Span(25,26,List(3),mere,mere,false), Span(10,11,List(4),found,find-01,false), Span(6,7,List(5),or,or,false), Span(7,8,List(6),two,2,false), Span(5,6,List(7, 8),month,(temporal-quantity :unit month),false), Span(4,5,List(9),last,last,false), Span(12,13,List(10),becoming,become-01,false), Span(14,15,List(11),anxious,anxious,false), Span(16,17,List(12),things,thing,false), Span(8,9,List(13),I,i,false), Span(32,33,List(14),nervousness,nervous,false), Span(13,14,List(15),really,real,false)),Map(2 -> feel-01, 5 -> or, 12 -> thing, 15 -> real, 8 -> month, 7 -> temporal-quantity, 1 -> talk-01, 4 -> find-01, 11 -> anxious, 14 -> nervous, 6 -> 2, 9 -> last, 0 -> and, 10 -> become-01, 3 -> mere, 13 -> i),Map(m3 -> mere, n -> nervous, t4 -> talk-01, 2 -> 2, t -> thing, b -> become-01, m2 -> month, t3 -> temporal-quantity, a -> anxious, r -> real, i -> i, a2 -> and, l -> last, f2 -> feel-01, f -> find-01, o -> or))),[Ljava.lang.String;@7966baa7,Annotation([Ljava.lang.String;@60975100,[Ljava.lang.String;@1253e7cb,[Ljava.lang.String;@2d36e77e),Annotation([Ljava.lang.String;@61c9c3fd,[Ljava.lang.String;@3b0c9195,[Ledu.cmu.lti.nlp.amr.Dependency;@366c4480),Annotation([Ljava.lang.String;@2c7b5824,[Ljava.lang.String;@302a07d,[Ljava.lang.String;@5cdd09b1),Annotation([Ljava.lang.String;@8c11eee,[Ljava.lang.String;@7e8dcdaa,[Ledu.cmu.lti.nlp.amr.Entity;@681a8b4e))
AMR:
(a / anxious, mod, r / real)
(a2 / and, op, f / find-01)
(a2 / and, op, t4 / talk-01)
(b / become-01, ARG0, m3 / mere)
(b / become-01, ARG1, a / anxious)
(b / become-01, ARG2, t / thing)
(f / find-01, ARG1, b / become-01)
(f / find-01, ARG2, o / or)
(f2 / feel-01, ARG0, i / i)
(f2 / feel-01, ARG1, n / nervous)
(m2 / month, mod, l / last)
(o / or, op, 2 / 2)
(o / or, op, t3 / temporal-quantity)
(t3 / temporal-quantity, unit, m2 / month)
(t4 / talk-01, ARG1, i / i)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.0.2.1
WARNING: makeIds can't find span Id: 0.0.0.2.1.1
WARNING: makeIds can't find span Id: 0.0.0.2.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.1
Decoded in 546,750 microseconds
Sentence: I have begun to feel irrationally panicky about a variety of things which beforehand wouldn't worry me too much or even cross my mind as something to cause alarm bells to ring in my head.

Oracle Span 1:  alarm => alarm-01
Oracle Span 2:  beforehand => beforehand
Oracle Span 3:  begun => begin-01
Oracle Span 4:  bells => bell
Oracle Span 5:  cause => cause-01
Oracle Span 6:  cross => cross-01
Oracle Span 7:  even => even
Oracle Span 8:  feel => feel-01
Oracle Span 9:  head => head
Oracle Span 10:  I => i
Oracle Span 11:  mind => mind
Oracle Span 12:  much => much
Oracle Span 13:  panicky => panic-01
Oracle Span 14:  ring => ring-01
Oracle Span 15:  something => something
Oracle Span 16:  things => thing
Oracle Span 17:  too => too
Oracle Span 18:  variety => variety
Oracle Span 19:  worry => worry-02
Spans:
Span 29-30:  alarm => alarm-01
Span 13-14:  beforehand => beforehand
Span 2-3:  begun => begin-01
Span 30-31:  bells => bell
Span 28-29:  cause => cause-01
Span 22-23:  cross => cross-01
Span 21-22:  even => even
Span 4-5:  feel => feel-01
Span 35-36:  head => head
Span 0-1:  I => i
Span 24-25:  mind => mind
Span 19-20:  much => much
Span 6-7:  panicky => panic-01
Span 32-33:  ring => ring-01
Span 26-27:  something => something
Span 11-12:  things => thing
Span 18-19:  too => too
Span 9-10:  variety => variety
Span 16-17:  worry => worry-02

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 29-30:  alarm => alarm-01
Oracle Span 13-14:  beforehand => beforehand
Oracle Span 2-3:  begun => begin-01
Oracle Span 30-31:  bells => bell
Oracle Span 28-29:  cause => cause-01
Oracle Span 22-23:  cross => cross-01
Oracle Span 21-22:  even => even
Oracle Span 4-5:  feel => feel-01
Oracle Span 35-36:  head => head
Oracle Span 0-1:  I => i
Oracle Span 24-25:  mind => mind
Oracle Span 19-20:  much => much
Oracle Span 6-7:  panicky => panic-01
Oracle Span 32-33:  ring => ring-01
Oracle Span 26-27:  something => something
Oracle Span 11-12:  things => thing
Oracle Span 18-19:  too => too
Oracle Span 9-10:  variety => variety
Oracle Span 16-17:  worry => worry-02

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	have	_	VBP	VBP	_	3	aux	_	_
3	begun	_	VBN	VBN	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	feel	_	VB	VB	_	3	xcomp	_	_
6	irrationally	_	NN	NN	_	5	dobj	_	_
7	panicky	_	JJ	JJ	_	6	amod	_	_
8	about	_	IN	IN	_	5	prep	_	_
9	a	_	DT	DT	_	10	det	_	_
10	variety	_	NN	NN	_	8	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	things	_	NNS	NNS	_	11	pobj	_	_
13	which	_	WDT	WDT	_	17	nsubj	_	_
14	beforehand	_	RB	RB	_	17	advmod	_	_
15	would	_	MD	MD	_	17	aux	_	_
16	n't	_	RB	RB	_	17	neg	_	_
17	worry	_	VB	VB	_	12	rcmod	_	_
18	me	_	PRP	PRP	_	20	nsubj	_	_
19	too	_	RB	RB	_	20	advmod	_	_
20	much	_	JJ	JJ	_	17	xcomp	_	_
21	or	_	CC	CC	_	17	cc	_	_
22	even	_	RB	RB	_	23	advmod	_	_
23	cross	_	VB	VB	_	17	conj	_	_
24	my	_	PRP$	PRP$	_	25	poss	_	_
25	mind	_	NN	NN	_	23	dobj	_	_
26	as	_	IN	IN	_	23	prep	_	_
27	something	_	NN	NN	_	26	pobj	_	_
28	to	_	TO	TO	_	29	aux	_	_
29	cause	_	VB	VB	_	23	vmod	_	_
30	alarm	_	NN	NN	_	31	nn	_	_
31	bells	_	NNS	NNS	_	29	dobj	_	_
32	to	_	TO	TO	_	33	aux	_	_
33	ring	_	VB	VB	_	29	vmod	_	_
34	in	_	IN	IN	_	33	prep	_	_
35	my	_	PRP$	PRP$	_	36	poss	_	_
36	head	_	NN	NN	_	34	pobj	_	_
37	.	_	.	.	_	3	punct	_	_

Oracle:
(a / alarm-01, instrument, b3 / bell)
(b / begin-01, ARG0, i / i)
(b / begin-01, ARG1, f / feel-01)
(c / cross-01, ARG0, t / thing)
(c / cross-01, ARG1, m2 / mind)
(c / cross-01, mod, e / even)
(c / cross-01, prep-as, s / something)
(c2 / cause-01, ARG0, s / something)
(c2 / cause-01, ARG1, r2 / ring-01)
(f / feel-01, ARG0, i / i)
(f / feel-01, ARG1, p / panic-01)
(i / i, part, h / head)
(m / much, degree, t2 / too)
(m2 / mind, poss, i / i)
(p / panic-01, ARG1, t / thing)
(r2 / ring-01, ARG1, b3 / bell)
(r2 / ring-01, location, h / head)
(t / thing, mod, v / variety)
(w / worry-02, ARG0, i / i)
(w / worry-02, ARG1, t / thing)
(w / worry-02, quant, m / much)
(w / worry-02, time, b2 / beforehand)

Input(Some(Graph((begin-01 :ARG1 (feel-01 :ARG1 (panic-01 :manner (rational :polarity -) :ARG1 (thing :ARG0-of (cross-01 :mod even :prep-as (something :ARG0-of (cause-01 :ARG1 (ring-01 :location (head :part-of i) :ARG1 (bell :instrument-of alarm-01)))) :ARG1 (mind :poss i) :polarity -) :ARG1-of (worry-02 :quant (much :degree too) :time beforehand :polarity - :ARG0 i) :mod variety)) :ARG0 i) :ARG0 i),ArrayBuffer(Span(2,3,List(0),begun,begin-01,false), Span(4,5,List(1),feel,feel-01,false), Span(11,12,List(2),things,thing,false), Span(22,23,List(3),cross,cross-01,false), Span(21,22,List(4),even,even,false), Span(26,27,List(5),something,something,false), Span(28,29,List(6),cause,cause-01,false), Span(32,33,List(7),ring,ring-01,false), Span(35,36,List(8),head,head,false), Span(30,31,List(9),bells,bell,false), Span(29,30,List(10),alarm,alarm-01,false), Span(24,25,List(11),mind,mind,false), Span(16,17,List(12),worry,worry-02,false), Span(19,20,List(13),much,much,false), Span(18,19,List(14),too,too,false), Span(13,14,List(15),beforehand,beforehand,false), Span(9,10,List(16),variety,variety,false), Span(0,1,List(17),I,i,false), Span(6,7,List(18),panicky,panic-01,false)),Map(2 -> thing, 5 -> something, 12 -> worry-02, 15 -> beforehand, 8 -> head, 18 -> panic-01, 7 -> ring-01, 17 -> i, 1 -> feel-01, 4 -> even, 11 -> mind, 14 -> too, 6 -> cause-01, 9 -> bell, 0 -> begin-01, 16 -> variety, 10 -> alarm-01, 3 -> cross-01, 13 -> much),Map(e -> even, w -> worry-02, b3 -> bell, h -> head, t -> thing, b -> begin-01, b2 -> beforehand, m2 -> mind, s -> something, v -> variety, m -> much, p -> panic-01, r2 -> ring-01, a -> alarm-01, t2 -> too, i -> i, c -> cross-01, f -> feel-01, c2 -> cause-01))),[Ljava.lang.String;@5cbe877d,Annotation([Ljava.lang.String;@5c08c46a,[Ljava.lang.String;@4cf8b2dc,[Ljava.lang.String;@708400f6),Annotation([Ljava.lang.String;@5829e4f4,[Ljava.lang.String;@4218500f,[Ledu.cmu.lti.nlp.amr.Dependency;@4bff64c2),Annotation([Ljava.lang.String;@1b2c4efb,[Ljava.lang.String;@c35172e,[Ljava.lang.String;@c2db68f),Annotation([Ljava.lang.String;@3cc41abc,[Ljava.lang.String;@4566d049,[Ledu.cmu.lti.nlp.amr.Entity;@61ce23ac))
AMR:
(a / alarm-01, ARG1, b3 / bell)
(b / begin-01, ARG0, i / i)
(b / begin-01, ARG1, f / feel-01)
(c / cross-01, ARG0, t / thing)
(c / cross-01, ARG1, m2 / mind)
(c / cross-01, manner, e / even)
(c2 / cause-01, ARG0, m2 / mind)
(c2 / cause-01, ARG1, b3 / bell)
(f / feel-01, ARG1, v / variety)
(m2 / mind, location, s / something)
(p / panic-01, ARG1, v / variety)
(r2 / ring-01, ARG0, h / head)
(r2 / ring-01, ARG1, b3 / bell)
(t / thing, mod, v / variety)
(t2 / too, quant, m / much)
(w / worry-02, ARG0, t / thing)
(w / worry-02, ARG1, m / much)
(w / worry-02, ARG6, b2 / beforehand)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.0.0.2.3
WARNING: makeIds can't find span Id: 0.1.0.0.2.2
WARNING: makeIds can't find span Id: 0.1.0.0.2.2.0
WARNING: makeIds can't find span Id: 0.1.0.0.2.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2.2.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.2.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2.1
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.2
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 1,130,841 microseconds
Sentence: I'm not sure if it's the change in lifestyle (going from care-free student to unemployed graduate) that is causing this or if it's a sign of other issues, but it's beginning to bug me as it's affecting my confidence and happiness.

Oracle Span 1:  affecting => affect-01
Oracle Span 2:  and => and
Oracle Span 3:  beginning => begin-01
Oracle Span 4:  bug => bug-01
Oracle Span 5:  but => contrast-01
Oracle Span 6:  care => care-01
Oracle Span 7:  causing => cause-01
Oracle Span 8:  change => change-01
Oracle Span 9:  confidence => confident-41
Oracle Span 10:  free => free-41
Oracle Span 11:  going => go-01
Oracle Span 12:  graduate => (person :ARG0-of graduate-01)
Oracle Span 13:  happiness => happy
Oracle Span 14:  I => i
Oracle Span 15:  if => cause-01
Oracle Span 16:  issues => issue
Oracle Span 17:  lifestyle => lifestyle
Oracle Span 18:  or => or
Oracle Span 19:  other => other
Oracle Span 20:  sign => signal-01
Oracle Span 21:  student => (person :ARG0-of study-01)
Oracle Span 22:  this => this
Oracle Span 23:  unemployed => employ-01
Spans:
Span 46-47:  affecting => affect-01
Span 49-50:  and => and
Span 39-40:  beginning => begin-01
Span 41-42:  bug => bug-01
Span 36-37:  but => contrast-01
Span 14-15:  care => care-01
Span 24-25:  causing => cause-01
Span 8-9:  change => change-01
Span 48-49:  confidence => confident-41
Span 16-17:  free => free-41
Span 12-13:  going => go-01
Span 20-21:  graduate => (person :ARG0-of graduate-01)
Span 50-51:  happiness => happy
Span 0-1:  I => i
Span 4-5:  if => cause-01
Span 34-35:  issues => issue
Span 10-11:  lifestyle => lifestyle
Span 26-27:  or => or
Span 33-34:  other => other
Span 31-32:  sign => signal-01
Span 17-18:  student => (person :ARG0-of study-01)
Span 25-26:  this => this
Span 19-20:  unemployed => employ-01

Langrangian relaxation converged after 68 iterations. Delta = 0.0
Oracle Span 46-47:  affecting => affect-01
Oracle Span 49-50:  and => and
Oracle Span 39-40:  beginning => begin-01
Oracle Span 41-42:  bug => bug-01
Oracle Span 36-37:  but => contrast-01
Oracle Span 14-15:  care => care-01
Oracle Span 24-25:  causing => cause-01
Oracle Span 8-9:  change => change-01
Oracle Span 48-49:  confidence => confident-41
Oracle Span 16-17:  free => free-41
Oracle Span 12-13:  going => go-01
Oracle Span 20-21:  graduate => (person :ARG0-of graduate-01)
Oracle Span 50-51:  happiness => happy
Oracle Span 0-1:  I => i
Oracle Span 4-5:  if => cause-01
Oracle Span 34-35:  issues => issue
Oracle Span 10-11:  lifestyle => lifestyle
Oracle Span 26-27:  or => or
Oracle Span 33-34:  other => other
Oracle Span 31-32:  sign => signal-01
Oracle Span 17-18:  student => (person :ARG0-of study-01)
Oracle Span 25-26:  this => this
Oracle Span 19-20:  unemployed => employ-01

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	'm	_	VBP	VBP	_	4	cop	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	sure	_	JJ	JJ	_	0	root	_	_
5	if	_	IN	IN	_	9	mark	_	_
6	it	_	PRP	PRP	_	9	nsubj	_	_
7	's	_	VBZ	VBZ	_	9	cop	_	_
8	the	_	DT	DT	_	9	det	_	_
9	change	_	NN	NN	_	4	advcl	_	_
10	in	_	IN	IN	_	9	prep	_	_
11	lifestyle	_	NN	NN	_	10	pobj	_	_
12	(	_	(	(	_	13	punct	_	_
13	going	_	VBG	VBG	_	11	dep	_	_
14	from	_	IN	IN	_	13	prep	_	_
15	care-free	_	JJ	JJ	_	16	amod	_	_
16	student	_	NN	NN	_	14	pobj	_	_
17	to	_	TO	TO	_	13	prep	_	_
18	unemployed	_	JJ	JJ	_	19	amod	_	_
19	graduate	_	NN	NN	_	17	pobj	_	_
20	)	_	)	)	_	13	punct	_	_
21	that	_	WDT	WDT	_	23	nsubj	_	_
22	is	_	VBZ	VBZ	_	23	aux	_	_
23	causing	_	VBG	VBG	_	11	rcmod	_	_
24	this	_	DT	DT	_	23	dobj	_	_
25	or	_	CC	CC	_	9	cc	_	_
26	if	_	IN	IN	_	30	mark	_	_
27	it	_	PRP	PRP	_	30	nsubj	_	_
28	's	_	VBZ	VBZ	_	30	cop	_	_
29	a	_	DT	DT	_	30	det	_	_
30	sign	_	NN	NN	_	9	conj	_	_
31	of	_	IN	IN	_	30	prep	_	_
32	other	_	JJ	JJ	_	33	amod	_	_
33	issues	_	NNS	NNS	_	31	pobj	_	_
34	,	_	,	,	_	4	punct	_	_
35	but	_	CC	CC	_	4	cc	_	_
36	it	_	PRP	PRP	_	38	nsubj	_	_
37	's	_	VBZ	VBZ	_	38	aux	_	_
38	beginning	_	VBG	VBG	_	4	conj	_	_
39	to	_	TO	TO	_	40	aux	_	_
40	bug	_	VB	VB	_	38	xcomp	_	_
41	me	_	PRP	PRP	_	40	dobj	_	_
42	as	_	IN	IN	_	45	mark	_	_
43	it	_	PRP	PRP	_	45	nsubj	_	_
44	's	_	VBZ	VBZ	_	45	aux	_	_
45	affecting	_	VBG	VBG	_	40	advcl	_	_
46	my	_	PRP$	PRP$	_	47	poss	_	_
47	confidence	_	NN	NN	_	45	dobj	_	_
48	and	_	CC	CC	_	47	cc	_	_
49	happiness	_	NN	NN	_	47	conj	_	_
50	.	_	.	.	_	4	punct	_	_

Oracle:
(a / affect-01, ARG1, a2 / and)
(a / affect-01, ARG2, t / this)
(a2 / and, op, c6 / confident-41)
(a2 / and, op, h / happy)
(b / begin-01, ARG1, b2 / bug-01)
(b2 / bug-01, ARG0, t / this)
(b2 / bug-01, ARG1, i / i)
(c / contrast-01, ARG2, b / begin-01)
(c2 / cause-01, ARG0, c3 / change-01)
(c2 / cause-01, ARG1, t / this)
(c3 / change-01, ARG1, l / lifestyle)
(c5 / cause-01, ARG0, a / affect-01)
(c5 / cause-01, ARG1, b2 / bug-01)
(c6 / confident-41, ARG1, i / i)
(e / employ-01, ARG1, p2 / person)
(f / free-41, ARG1, p3 / person)
(f / free-41, ARG2, c4 / care-01)
(g / go-01, ARG3, p3 / person)
(g / go-01, ARG4, p2 / person)
(g2 / graduate-01, ARG0, p2 / person)
(h / happy, domain, i / i)
(i2 / issue, mod, o2 / other)
(o / or, op, c2 / cause-01)
(o / or, op, s2 / signal-01)
(s / study-01, ARG0, p3 / person)
(s2 / signal-01, ARG0, t / this)
(s2 / signal-01, ARG1, i2 / issue)

Input(Some(Graph((contrast-01 :ARG2 (begin-01 :ARG1 (bug-01 :ARG1-of (cause-01 :ARG0 (affect-01 :ARG1 (and :op (happy :domain i) :op (confident-41 :ARG1 i)) :ARG2 this)) :ARG0 this :ARG1 i)) :ARG1 (know-01 :polarity - :ARG0 i :ARG1 (or :op (signal-01 :ARG1 (issue :mod other) :ARG0 this) :op (cause-01 :ARG1 this :ARG0 (change-01 :ARG1-of (mean-01 :ARG2 (go-01 :ARG4 (person :ARG1-of (employ-01 :polarity -) :ARG0-of graduate-01) :ARG3 (person :ARG1-of (free-41 :ARG2 care-01) :ARG0-of study-01))) :ARG1 lifestyle)) :mode interrogative))),ArrayBuffer(Span(36,37,List(0),but,contrast-01,false), Span(39,40,List(1),beginning,begin-01,false), Span(41,42,List(2),bug,bug-01,false), Span(4,5,List(3),if,cause-01,false), Span(46,47,List(4),affecting,affect-01,false), Span(49,50,List(5),and,and,false), Span(0,1,List(6),I,i,false), Span(26,27,List(7),or,or,false), Span(34,35,List(8),issues,issue,false), Span(33,34,List(9),other,other,false), Span(24,25,List(10),causing,cause-01,false), Span(25,26,List(11),this,this,false), Span(8,9,List(12),change,change-01,false), Span(12,13,List(13),going,go-01,false), Span(20,21,List(14, 15),graduate,(person :ARG0-of graduate-01),false), Span(16,17,List(16),free,free-41,false), Span(14,15,List(17),care,care-01,false), Span(10,11,List(18),lifestyle,lifestyle,false), Span(50,51,List(19),happiness,happy,false), Span(48,49,List(20),confidence,confident-41,false), Span(31,32,List(21),sign,signal-01,false), Span(19,20,List(22),unemployed,employ-01,false), Span(17,18,List(23, 24),student,(person :ARG0-of study-01),false)),Map(2 -> bug-01, 5 -> and, 12 -> change-01, 15 -> graduate-01, 8 -> issue, 21 -> signal-01, 18 -> lifestyle, 24 -> study-01, 7 -> or, 17 -> care-01, 1 -> begin-01, 23 -> person, 4 -> affect-01, 11 -> this, 14 -> person, 20 -> confident-41, 6 -> i, 9 -> other, 0 -> contrast-01, 22 -> employ-01, 16 -> free-41, 19 -> happy, 10 -> cause-01, 3 -> cause-01, 13 -> go-01),Map(e -> employ-01, h -> happy, s2 -> signal-01, t -> this, b -> begin-01, b2 -> bug-01, p2 -> person, c4 -> care-01, s -> study-01, g2 -> graduate-01, g -> go-01, c3 -> change-01, a -> affect-01, o2 -> other, c6 -> confident-41, i2 -> issue, i -> i, a2 -> and, c -> contrast-01, l -> lifestyle, f -> free-41, o -> or, p3 -> person, c2 -> cause-01, c5 -> cause-01))),[Ljava.lang.String;@3668d4,Annotation([Ljava.lang.String;@1c3b9394,[Ljava.lang.String;@6f2cfcc2,[Ljava.lang.String;@7f6f61c8),Annotation([Ljava.lang.String;@4c2cc639,[Ljava.lang.String;@ccb4b1b,[Ledu.cmu.lti.nlp.amr.Dependency;@4097cac),Annotation([Ljava.lang.String;@ec2cc4,[Ljava.lang.String;@2a5b3fee,[Ljava.lang.String;@7c1e2a2d),Annotation([Ljava.lang.String;@333dd51e,[Ljava.lang.String;@52d645b1,[Ledu.cmu.lti.nlp.amr.Entity;@2101b44a))
AMR:
(a / affect-01, ARG2, c6 / confident-41)
(a / affect-01, ARG6, h / happy)
(a2 / and, op, c6 / confident-41)
(b / begin-01, ARG1, b2 / bug-01)
(b2 / bug-01, ARG1, a / affect-01)
(c / contrast-01, ARG1, i2 / issue)
(c / contrast-01, ARG2, b / begin-01)
(c2 / cause-01, ARG0, a2 / and)
(c2 / cause-01, ARG1, t / this)
(c3 / change-01, ARG1, l / lifestyle)
(c3 / change-01, ARG6, i / i)
(c4 / care-01, ARG1, f / free-41)
(c5 / cause-01, ARG1, l / lifestyle)
(c6 / confident-41, ARG1, p2 / person)
(e / employ-01, ARG1, p2 / person)
(f / free-41, ARG1, p3 / person)
(g / go-01, ARG1, p3 / person)
(g / go-01, ARG6, l / lifestyle)
(g2 / graduate-01, ARG0, p2 / person)
(i2 / issue, mod, o2 / other)
(o / or, op, c3 / change-01)
(o / or, op, s2 / signal-01)
(s / study-01, ARG0, p3 / person)
(s2 / signal-01, ARG1, i2 / issue)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.2.0
WARNING: makeIds can't find span Id: 0.0.2.2.0.0
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.1.1
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.2.2
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.1.1
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.0.0
Decoded in 2,839,416 microseconds
Sentence: I've spoken to a few people about it including my parents but they all think the same: that I'm going through a random phase and that I should hold off taking action until it is clear that it is a serious problem

Oracle Span 1:  all => (person :quant all)
Oracle Span 2:  and => and
Oracle Span 3:  but => contrast-01
Oracle Span 4:  clear => clear
Oracle Span 5:  few => few
Oracle Span 6:  going => go-02
Oracle Span 7:  hold => hold-08
Oracle Span 8:  I => i
Oracle Span 9:  including => (person :ARG2-of include-01)
Oracle Span 10:  it => it
Oracle Span 11:  parents => parent
Oracle Span 12:  phase => phase
Oracle Span 13:  problem => problem
Oracle Span 14:  random => random
Oracle Span 15:  same => same-41
Oracle Span 16:  serious => serious
Oracle Span 17:  should => recommend-01
Oracle Span 18:  spoken => speak-01
Oracle Span 19:  think => think-01
Oracle Span 20:  until => until
Spans:
Span 14-15:  all => (person :quant all)
Span 27-28:  and => and
Span 12-13:  but => contrast-01
Span 38-39:  clear => clear
Span 5-6:  few => few
Span 22-23:  going => go-02
Span 31-32:  hold => hold-08
Span 0-1:  I => i
Span 9-10:  including => (person :ARG2-of include-01)
Span 8-9:  it => it
Span 11-12:  parents => parent
Span 26-27:  phase => phase
Span 44-45:  problem => problem
Span 25-26:  random => random
Span 17-18:  same => same-41
Span 43-44:  serious => serious
Span 30-31:  should => recommend-01
Span 2-3:  spoken => speak-01
Span 15-16:  think => think-01
Span 35-36:  until => until

Langrangian relaxation converged after 67 iterations. Delta = 0.0
Oracle Span 14-15:  all => (person :quant all)
Oracle Span 27-28:  and => and
Oracle Span 12-13:  but => contrast-01
Oracle Span 38-39:  clear => clear
Oracle Span 5-6:  few => few
Oracle Span 22-23:  going => go-02
Oracle Span 31-32:  hold => hold-08
Oracle Span 0-1:  I => i
Oracle Span 9-10:  including => (person :ARG2-of include-01)
Oracle Span 8-9:  it => it
Oracle Span 11-12:  parents => parent
Oracle Span 26-27:  phase => phase
Oracle Span 44-45:  problem => problem
Oracle Span 25-26:  random => random
Oracle Span 17-18:  same => same-41
Oracle Span 43-44:  serious => serious
Oracle Span 30-31:  should => recommend-01
Oracle Span 2-3:  spoken => speak-01
Oracle Span 15-16:  think => think-01
Oracle Span 35-36:  until => until

Dependencies:
1	I	_	PRP	PRP	_	3	nsubj	_	_
2	've	_	VBP	VBP	_	3	aux	_	_
3	spoken	_	VBN	VBN	_	0	root	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	a	_	DT	DT	_	7	det	_	_
6	few	_	JJ	JJ	_	7	amod	_	_
7	people	_	NNS	NNS	_	4	pobj	_	_
8	about	_	IN	IN	_	3	prep	_	_
9	it	_	PRP	PRP	_	10	nsubj	_	_
10	including	_	VBG	VBG	_	8	pcomp	_	_
11	my	_	PRP$	PRP$	_	12	poss	_	_
12	parents	_	NNS	NNS	_	10	dobj	_	_
13	but	_	CC	CC	_	16	cc	_	_
14	they	_	PRP	PRP	_	16	nsubj	_	_
15	all	_	DT	DT	_	16	advmod	_	_
16	think	_	VBP	VBP	_	10	dep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	same	_	JJ	JJ	_	16	dobj	_	_
19	:	_	:	:	_	16	punct	_	_
20	that	_	IN	IN	_	23	mark	_	_
21	I	_	PRP	PRP	_	23	nsubj	_	_
22	'm	_	VBP	VBP	_	23	aux	_	_
23	going	_	VBG	VBG	_	16	ccomp	_	_
24	through	_	IN	IN	_	23	prep	_	_
25	a	_	DT	DT	_	27	det	_	_
26	random	_	JJ	JJ	_	27	amod	_	_
27	phase	_	NN	NN	_	24	pobj	_	_
28	and	_	CC	CC	_	23	cc	_	_
29	that	_	IN	IN	_	32	mark	_	_
30	I	_	PRP	PRP	_	32	nsubj	_	_
31	should	_	MD	MD	_	32	aux	_	_
32	hold	_	VB	VB	_	23	conj	_	_
33	off	_	RP	RP	_	32	prt	_	_
34	taking	_	VBG	VBG	_	32	xcomp	_	_
35	action	_	NN	NN	_	34	dobj	_	_
36	until	_	IN	IN	_	39	mark	_	_
37	it	_	PRP	PRP	_	39	nsubj	_	_
38	is	_	VBZ	VBZ	_	39	cop	_	_
39	clear	_	JJ	JJ	_	34	advcl	_	_
40	that	_	IN	IN	_	45	mark	_	_
41	it	_	PRP	PRP	_	45	nsubj	_	_
42	is	_	VBZ	VBZ	_	45	cop	_	_
43	a	_	DT	DT	_	45	det	_	_
44	serious	_	JJ	JJ	_	45	amod	_	_
45	problem	_	NN	NN	_	39	ccomp	_	_

Oracle:
(a2 / and, op, g / go-02)
(a2 / and, op, r / recommend-01)
(c / contrast-01, ARG1, s / speak-01)
(c / contrast-01, ARG2, t / think-01)
(c2 / clear, domain, p5 / problem)
(g / go-02, ARG0, i / i)
(g / go-02, ARG1, p4 / phase)
(h / hold-08, ARG0, i / i)
(h / hold-08, time, u / until)
(i3 / include-01, ARG1, p2 / parent)
(i3 / include-01, ARG2, p / person)
(p / person, quant, f / few)
(p2 / parent, poss, i / i)
(p3 / person, quant, a / all)
(p4 / phase, mod, r2 / random)
(p5 / problem, mod, s2 / serious)
(r / recommend-01, ARG1, h / hold-08)
(r / recommend-01, ARG2, i / i)
(s / speak-01, ARG0, i / i)
(s / speak-01, ARG1, i2 / it)
(s / speak-01, ARG2, p / person)
(s3 / same-41, ARG1, t / think-01)
(t / think-01, ARG0, p3 / person)
(t / think-01, ARG1, a2 / and)
(u / until, op, c2 / clear)

Input(Some(Graph((contrast-01 :ARG2 (think-01 :ARG1-of same-41 :ARG1 (and :op (recommend-01 :ARG1 (hold-08 :time (until :op (clear :domain (problem :mod serious))) :ARG1 (act-02 :ARG0 i) :ARG0 i) :ARG2 i) :op (go-02 :ARG1 (phase :mod random) :ARG0 i)) :ARG0 (person :quant all)) :ARG1 (speak-01 :ARG2 (person :ARG2-of (include-01 :ARG1 (parent :poss i)) :quant few) :ARG1 it :ARG0 i)),ArrayBuffer(Span(12,13,List(0),but,contrast-01,false), Span(15,16,List(1),think,think-01,false), Span(17,18,List(2),same,same-41,false), Span(27,28,List(3),and,and,false), Span(30,31,List(4),should,recommend-01,false), Span(31,32,List(5),hold,hold-08,false), Span(35,36,List(6),until,until,false), Span(38,39,List(7),clear,clear,false), Span(44,45,List(8),problem,problem,false), Span(43,44,List(9),serious,serious,false), Span(22,23,List(10),going,go-02,false), Span(26,27,List(11),phase,phase,false), Span(25,26,List(12),random,random,false), Span(14,15,List(13, 14),all,(person :quant all),false), Span(2,3,List(15),spoken,speak-01,false), Span(5,6,List(16),few,few,false), Span(9,10,List(17, 18),including,(person :ARG2-of include-01),false), Span(11,12,List(19),parents,parent,false), Span(8,9,List(20),it,it,false), Span(0,1,List(21),I,i,false)),Map(2 -> same-41, 5 -> hold-08, 12 -> random, 15 -> speak-01, 8 -> problem, 21 -> i, 18 -> include-01, 7 -> clear, 17 -> person, 1 -> think-01, 4 -> recommend-01, 11 -> phase, 14 -> all, 20 -> it, 6 -> until, 9 -> serious, 0 -> contrast-01, 16 -> few, 19 -> parent, 10 -> go-02, 3 -> and, 13 -> person),Map(h -> hold-08, s2 -> serious, p5 -> problem, t -> think-01, p2 -> parent, s -> speak-01, i3 -> include-01, p -> person, r2 -> random, g -> go-02, a -> all, p4 -> phase, i2 -> it, i -> i, r -> recommend-01, a2 -> and, s3 -> same-41, c -> contrast-01, u -> until, f -> few, p3 -> person, c2 -> clear))),[Ljava.lang.String;@2cc3ad05,Annotation([Ljava.lang.String;@710b18a6,[Ljava.lang.String;@119020fb,[Ljava.lang.String;@3d9f6567),Annotation([Ljava.lang.String;@c055c54,[Ljava.lang.String;@25e2ab5a,[Ledu.cmu.lti.nlp.amr.Dependency;@35e5d0e5),Annotation([Ljava.lang.String;@73173f63,[Ljava.lang.String;@55562aa9,[Ljava.lang.String;@655ef322),Annotation([Ljava.lang.String;@7e276594,[Ljava.lang.String;@3401a114,[Ledu.cmu.lti.nlp.amr.Entity;@5066d65f))
AMR:
(a2 / and, op, g / go-02)
(a2 / and, op, h / hold-08)
(c / contrast-01, ARG1, g / go-02)
(c / contrast-01, ARG2, t / think-01)
(c / contrast-01, ARG6, p / person)
(g / go-02, ARG1, p5 / problem)
(g / go-02, ARG2, p4 / phase)
(h / hold-08, ARG1, f / few)
(i3 / include-01, ARG0, i2 / it)
(i3 / include-01, ARG1, p2 / parent)
(i3 / include-01, ARG2, p / person)
(p3 / person, quant, a / all)
(p5 / problem, mod, s2 / serious)
(r / recommend-01, ARG1, h / hold-08)
(s / speak-01, ARG0, i / i)
(s / speak-01, ARG1, r2 / random)
(s / speak-01, ARG2, p / person)
(s3 / same-41, ARG1, c2 / clear)
(t / think-01, ARG0, p3 / person)
(t / think-01, ARG1, s3 / same-41)
(u / until, op, c2 / clear)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 2,205,633 microseconds
Sentence: So was wondering what's the best thing to do?

Oracle Span 1:  best => (good :degree most)
Oracle Span 2:  do => do-02
Oracle Span 3:  So => so
Oracle Span 4:  thing => thing
Oracle Span 5:  wondering => wonder-01
Spans:
Span 6-7:  best => (good :degree most)
Span 9-10:  do => do-02
Span 0-1:  So => so
Span 7-8:  thing => thing
Span 2-3:  wondering => wonder-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 6-7:  best => (good :degree most)
Oracle Span 9-10:  do => do-02
Oracle Span 0-1:  So => so
Oracle Span 7-8:  thing => thing
Oracle Span 2-3:  wondering => wonder-01

Dependencies:
1	So	_	RB	RB	_	3	advmod	_	_
2	was	_	VBD	VBD	_	3	aux	_	_
3	wondering	_	VBG	VBG	_	0	root	_	_
4	what	_	WP	WP	_	8	nsubj	_	_
5	's	_	VBZ	VBZ	_	8	cop	_	_
6	the	_	DT	DT	_	8	det	_	_
7	best	_	JJS	JJS	_	8	amod	_	_
8	thing	_	NN	NN	_	3	dep	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	do	_	VB	VB	_	8	vmod	_	_
11	?	_	.	.	_	8	punct	_	_

Oracle:
(d / do-02, ARG1, t / thing)
(g / good, degree, m / most)
(t / thing, mod, g / good)
(w / wonder-01, ARG1, t / thing)
(w / wonder-01, mod, s / so)

Input(Some(Graph((wonder-01 :mod so :ARG1 (thing :domain amr-unknown :ARG1-of do-02 :mod (good :degree most))),ArrayBuffer(Span(2,3,List(0),wondering,wonder-01,false), Span(0,1,List(1),So,so,false), Span(7,8,List(2),thing,thing,false), Span(9,10,List(3),do,do-02,false), Span(6,7,List(4, 5),best,(good :degree most),false)),Map(2 -> thing, 5 -> most, 1 -> so, 4 -> good, 0 -> wonder-01, 3 -> do-02),Map(w -> wonder-01, t -> thing, s -> so, m -> most, d -> do-02, g -> good))),[Ljava.lang.String;@4233e892,Annotation([Ljava.lang.String;@77d2e85,[Ljava.lang.String;@3ecd267f,[Ljava.lang.String;@58ffcbd7),Annotation([Ljava.lang.String;@555cf22,[Ljava.lang.String;@6bb2d00b,[Ledu.cmu.lti.nlp.amr.Dependency;@3c9bfddc),Annotation([Ljava.lang.String;@1a9c38eb,[Ljava.lang.String;@319bc845,[Ljava.lang.String;@4c5474f5),Annotation([Ljava.lang.String;@2f4205be,[Ljava.lang.String;@54e22bdd,[Ledu.cmu.lti.nlp.amr.Entity;@3bd418e4))
AMR:
(d / do-02, ARG1, t / thing)
(g / good, degree, m / most)
(t / thing, mod, g / good)
(w / wonder-01, ARG1, t / thing)
(w / wonder-01, mod, s / so)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 112,426 microseconds
Sentence: Speak to a doctor about it and see if anti-anxiety pills could take the edge off of things?

Oracle Span 1:  and => and
Oracle Span 2:  anti => counter-01
Oracle Span 3:  anxiety => anxiety
Oracle Span 4:  could => possible
Oracle Span 5:  doctor => doctor
Oracle Span 6:  edge => edge
Oracle Span 7:  it => it
Oracle Span 8:  pills => pill
Oracle Span 9:  see => see-01
Oracle Span 10:  Speak => speak-01
Oracle Span 11:  take => take-07
Oracle Span 12:  things => thing
Spans:
Span 6-7:  and => and
Span 9-10:  anti => counter-01
Span 11-12:  anxiety => anxiety
Span 13-14:  could => possible
Span 3-4:  doctor => doctor
Span 16-17:  edge => edge
Span 5-6:  it => it
Span 12-13:  pills => pill
Span 7-8:  see => see-01
Span 0-1:  Speak => speak-01
Span 14-15:  take => take-07
Span 19-20:  things => thing

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 9-10:  anti => counter-01
Oracle Span 11-12:  anxiety => anxiety
Oracle Span 13-14:  could => possible
Oracle Span 3-4:  doctor => doctor
Oracle Span 16-17:  edge => edge
Oracle Span 5-6:  it => it
Oracle Span 12-13:  pills => pill
Oracle Span 7-8:  see => see-01
Oracle Span 0-1:  Speak => speak-01
Oracle Span 14-15:  take => take-07
Oracle Span 19-20:  things => thing

Dependencies:
1	Speak	_	VB	VB	_	0	root	_	_
2	to	_	TO	TO	_	1	prep	_	_
3	a	_	DT	DT	_	4	det	_	_
4	doctor	_	NN	NN	_	2	pobj	_	_
5	about	_	IN	IN	_	4	prep	_	_
6	it	_	PRP	PRP	_	5	pobj	_	_
7	and	_	CC	CC	_	1	cc	_	_
8	see	_	VB	VB	_	1	conj	_	_
9	if	_	IN	IN	_	13	mark	_	_
10	anti-anxiety	_	JJ	JJ	_	11	amod	_	_
11	pills	_	NNS	NNS	_	13	nsubj	_	_
12	could	_	MD	MD	_	13	aux	_	_
13	take	_	VB	VB	_	8	advcl	_	_
14	the	_	DT	DT	_	15	det	_	_
15	edge	_	NN	NN	_	13	dobj	_	_
16	off	_	RP	RP	_	13	prt	_	_
17	of	_	IN	IN	_	13	prep	_	_
18	things	_	NNS	NNS	_	17	pobj	_	_
19	?	_	.	.	_	1	punct	_	_

Oracle:
(a / and, op, s / speak-01)
(a / and, op, s2 / see-01)
(c / counter-01, ARG0, p / pill)
(c / counter-01, ARG1, a2 / anxiety)
(s / speak-01, ARG1, i / it)
(s / speak-01, ARG2, d / doctor)
(s2 / see-01, ARG1, t / take-07)
(t / take-07, ARG0, p / pill)
(t / take-07, ARG1, e / edge)
(t / take-07, mod, p2 / possible)
(t / take-07, source, t2 / thing)

Input(Some(Graph((and :op (see-01 :ARG1 (take-07 :source thing :mod (possible :mode interrogative) :ARG1 edge :ARG0 (pill :ARG0-of (counter-01 :ARG1 anxiety))) :ARG0 you) :op (speak-01 :ARG2 doctor :ARG1 it :ARG0 you)),ArrayBuffer(Span(6,7,List(0),and,and,false), Span(7,8,List(1),see,see-01,false), Span(14,15,List(2),take,take-07,false), Span(19,20,List(3),things,thing,false), Span(13,14,List(4),could,possible,false), Span(16,17,List(5),edge,edge,false), Span(12,13,List(6),pills,pill,false), Span(9,10,List(7),anti,counter-01,false), Span(11,12,List(8),anxiety,anxiety,false), Span(0,1,List(9),Speak,speak-01,false), Span(3,4,List(10),doctor,doctor,false), Span(5,6,List(11),it,it,false)),Map(2 -> take-07, 5 -> edge, 8 -> anxiety, 7 -> counter-01, 1 -> see-01, 4 -> possible, 11 -> it, 6 -> pill, 9 -> speak-01, 0 -> and, 10 -> doctor, 3 -> thing),Map(e -> edge, s2 -> see-01, t -> take-07, p2 -> possible, s -> speak-01, d -> doctor, p -> pill, a -> and, t2 -> thing, i -> it, a2 -> anxiety, c -> counter-01))),[Ljava.lang.String;@544820b7,Annotation([Ljava.lang.String;@6b98a075,[Ljava.lang.String;@2e61d218,[Ljava.lang.String;@3569fc08),Annotation([Ljava.lang.String;@20b12f8a,[Ljava.lang.String;@e84a8e1,[Ledu.cmu.lti.nlp.amr.Dependency;@2e554a3b),Annotation([Ljava.lang.String;@54a67a45,[Ljava.lang.String;@7d42c224,[Ljava.lang.String;@56aaaecd),Annotation([Ljava.lang.String;@522a32b1,[Ljava.lang.String;@35390ee3,[Ledu.cmu.lti.nlp.amr.Entity;@5e01a982))
AMR:
(a / and, op, i / it)
(a / and, op, s / speak-01)
(a / and, op, s2 / see-01)
(c / counter-01, ARG0, p / pill)
(c / counter-01, ARG1, a2 / anxiety)
(p2 / possible, domain, t / take-07)
(s / speak-01, ARG1, d / doctor)
(s2 / see-01, ARG1, p2 / possible)
(t / take-07, ARG0, p / pill)
(t / take-07, ARG1, e / edge)
(t / take-07, location, t2 / thing)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 308,425 microseconds
Sentence: See if I can speak to a counsellor?

Oracle Span 1:  can => possible
Oracle Span 2:  counsellor => (person :ARG0-of counsel-01)
Oracle Span 3:  I => i
Oracle Span 4:  See => see-01
Oracle Span 5:  speak => speak-01
Spans:
Span 3-4:  can => possible
Span 7-8:  counsellor => (person :ARG0-of counsel-01)
Span 2-3:  I => i
Span 0-1:  See => see-01
Span 4-5:  speak => speak-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  can => possible
Oracle Span 7-8:  counsellor => (person :ARG0-of counsel-01)
Oracle Span 2-3:  I => i
Oracle Span 0-1:  See => see-01
Oracle Span 4-5:  speak => speak-01

Dependencies:
1	See	_	VB	VB	_	0	root	_	_
2	if	_	IN	IN	_	5	mark	_	_
3	I	_	PRP	PRP	_	5	nsubj	_	_
4	can	_	MD	MD	_	5	aux	_	_
5	speak	_	VB	VB	_	1	advcl	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	a	_	DT	DT	_	8	det	_	_
8	counsellor	_	NN	NN	_	6	pobj	_	_
9	?	_	.	.	_	1	punct	_	_

Oracle:
(c / counsel-01, ARG0, p / person)
(s / see-01, ARG1, s2 / speak-01)
(s2 / speak-01, ARG0, i / i)
(s2 / speak-01, ARG2, p / person)
(s2 / speak-01, mod, p2 / possible)

Input(Some(Graph((see-01 :ARG1 (speak-01 :mod possible :ARG2 (person :ARG0-of counsel-01) :ARG0 i) :ARG0 i :mode interrogative),ArrayBuffer(Span(0,1,List(0),See,see-01,false), Span(4,5,List(1),speak,speak-01,false), Span(3,4,List(2),can,possible,false), Span(2,3,List(3),I,i,false), Span(7,8,List(4, 5),counsellor,(person :ARG0-of counsel-01),false)),Map(2 -> possible, 5 -> counsel-01, 1 -> speak-01, 4 -> person, 0 -> see-01, 3 -> i),Map(s2 -> speak-01, p2 -> possible, s -> see-01, p -> person, i -> i, c -> counsel-01))),[Ljava.lang.String;@5ddea849,Annotation([Ljava.lang.String;@5ee2b6f9,[Ljava.lang.String;@23d1e5d0,[Ljava.lang.String;@704f1591),Annotation([Ljava.lang.String;@58fb7731,[Ljava.lang.String;@13e547a9,[Ledu.cmu.lti.nlp.amr.Dependency;@3fb6cf60),Annotation([Ljava.lang.String;@37ddb69a,[Ljava.lang.String;@349c1daf,[Ljava.lang.String;@dfddc9a),Annotation([Ljava.lang.String;@4b9df8a,[Ljava.lang.String;@5e8ac0e1,[Ledu.cmu.lti.nlp.amr.Entity;@aafcffa))
AMR:
(c / counsel-01, ARG0, p / person)
(p2 / possible, domain, s2 / speak-01)
(s / see-01, ARG1, p2 / possible)
(s2 / speak-01, ARG0, i / i)
(s2 / speak-01, ARG1, p / person)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
Decoded in 22,081 microseconds
Sentence: Or should I take the advice given by the close people around me and just keep an eye on the anxiety until it becomes a problem?

Oracle Span 1:  advice => (thing :ARG2-of advise-01)
Oracle Span 2:  and => and
Oracle Span 3:  anxiety => anxiety
Oracle Span 4:  around => around
Oracle Span 5:  becomes => become-01
Oracle Span 6:  close => close
Oracle Span 7:  eye => eye-01
Oracle Span 8:  I => i
Oracle Span 9:  just => just
Oracle Span 10:  Or => or
Oracle Span 11:  problem => problem
Oracle Span 12:  should => recommend-01
Oracle Span 13:  take => take-01
Oracle Span 14:  until => until
Spans:
Span 5-6:  advice => (thing :ARG2-of advise-01)
Span 13-14:  and => and
Span 20-21:  anxiety => anxiety
Span 11-12:  around => around
Span 23-24:  becomes => become-01
Span 9-10:  close => close
Span 17-18:  eye => eye-01
Span 2-3:  I => i
Span 14-15:  just => just
Span 0-1:  Or => or
Span 25-26:  problem => problem
Span 1-2:  should => recommend-01
Span 3-4:  take => take-01
Span 21-22:  until => until

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 5-6:  advice => (thing :ARG2-of advise-01)
Oracle Span 13-14:  and => and
Oracle Span 20-21:  anxiety => anxiety
Oracle Span 11-12:  around => around
Oracle Span 23-24:  becomes => become-01
Oracle Span 9-10:  close => close
Oracle Span 17-18:  eye => eye-01
Oracle Span 2-3:  I => i
Oracle Span 14-15:  just => just
Oracle Span 0-1:  Or => or
Oracle Span 25-26:  problem => problem
Oracle Span 1-2:  should => recommend-01
Oracle Span 3-4:  take => take-01
Oracle Span 21-22:  until => until

Dependencies:
1	Or	_	CC	CC	_	4	cc	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	I	_	PRP	PRP	_	4	nsubj	_	_
4	take	_	VB	VB	_	0	root	_	_
5	the	_	DT	DT	_	6	det	_	_
6	advice	_	NN	NN	_	4	dobj	_	_
7	given	_	VBN	VBN	_	4	prep	_	_
8	by	_	IN	IN	_	7	pcomp	_	_
9	the	_	DT	DT	_	11	det	_	_
10	close	_	JJ	JJ	_	11	amod	_	_
11	people	_	NNS	NNS	_	8	pobj	_	_
12	around	_	IN	IN	_	11	prep	_	_
13	me	_	PRP	PRP	_	12	pobj	_	_
14	and	_	CC	CC	_	4	cc	_	_
15	just	_	RB	RB	_	16	advmod	_	_
16	keep	_	VB	VB	_	4	conj	_	_
17	an	_	DT	DT	_	18	det	_	_
18	eye	_	NN	NN	_	16	dobj	_	_
19	on	_	IN	IN	_	16	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	anxiety	_	NN	NN	_	19	pobj	_	_
22	until	_	IN	IN	_	24	mark	_	_
23	it	_	PRP	PRP	_	24	nsubj	_	_
24	becomes	_	VBZ	VBZ	_	16	advcl	_	_
25	a	_	DT	DT	_	26	det	_	_
26	problem	_	NN	NN	_	24	xcomp	_	_
27	?	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, e / eye-01)
(a / and, op, t / take-01)
(a2 / advise-01, ARG2, t2 / thing)
(a3 / around, op, i / i)
(b / become-01, ARG1, a4 / anxiety)
(b / become-01, ARG2, p2 / problem)
(e / eye-01, ARG0, i / i)
(e / eye-01, mod, j / just)
(e / eye-01, time, u / until)
(o / or, op, r / recommend-01)
(r / recommend-01, ARG1, a / and)
(r / recommend-01, ARG2, i / i)
(t / take-01, ARG0, i / i)
(t / take-01, ARG1, t2 / thing)
(u / until, op, b / become-01)

Input(Some(Graph((or :op (recommend-01 :ARG1 (and :op (eye-01 :mod just :time (until :op (become-01 :ARG2 problem :ARG1 anxiety)) :ARG1 anxiety :ARG0 i) :op (take-01 :ARG1 (thing :ARG2-of (advise-01 :ARG0 (person :mod close :location (around :op i)))) :ARG0 i)) :mode interrogative :ARG2 i)),ArrayBuffer(Span(0,1,List(0),Or,or,false), Span(1,2,List(1),should,recommend-01,false), Span(13,14,List(2),and,and,false), Span(17,18,List(3),eye,eye-01,false), Span(14,15,List(4),just,just,false), Span(21,22,List(5),until,until,false), Span(23,24,List(6),becomes,become-01,false), Span(25,26,List(7),problem,problem,false), Span(20,21,List(8),anxiety,anxiety,false), Span(3,4,List(9),take,take-01,false), Span(9,10,List(10),close,close,false), Span(11,12,List(11),around,around,false), Span(2,3,List(12),I,i,false), Span(5,6,List(13, 14),advice,(thing :ARG2-of advise-01),false)),Map(2 -> and, 5 -> until, 12 -> i, 8 -> anxiety, 7 -> problem, 1 -> recommend-01, 4 -> just, 11 -> around, 14 -> advise-01, 6 -> become-01, 9 -> take-01, 0 -> or, 10 -> close, 3 -> eye-01, 13 -> thing),Map(e -> eye-01, t -> take-01, b -> become-01, p2 -> problem, a3 -> around, j -> just, a -> and, t2 -> thing, a2 -> advise-01, i -> i, r -> recommend-01, c -> close, u -> until, o -> or, a4 -> anxiety))),[Ljava.lang.String;@6955cb39,Annotation([Ljava.lang.String;@235a0c16,[Ljava.lang.String;@2b5f4d54,[Ljava.lang.String;@5f7b97da),Annotation([Ljava.lang.String;@18b0930f,[Ljava.lang.String;@6b7906b3,[Ledu.cmu.lti.nlp.amr.Dependency;@3a1dd365),Annotation([Ljava.lang.String;@395b56bb,[Ljava.lang.String;@256f8274,[Ljava.lang.String;@68044f4),Annotation([Ljava.lang.String;@52d239ba,[Ljava.lang.String;@315f43d5,[Ledu.cmu.lti.nlp.amr.Entity;@68fa0ba8))
AMR:
(a / and, op, r / recommend-01)
(a2 / advise-01, ARG1, a3 / around)
(a2 / advise-01, ARG2, t2 / thing)
(b / become-01, ARG0, c / close)
(b / become-01, ARG1, e / eye-01)
(b / become-01, ARG2, p2 / problem)
(e / eye-01, ARG1, a4 / anxiety)
(e / eye-01, ARG6, j / just)
(r / recommend-01, ARG1, t / take-01)
(r / recommend-01, ARG6, o / or)
(t / take-01, ARG0, i / i)
(t / take-01, ARG1, t2 / thing)
(t / take-01, time, b / become-01)
(u / until, op, b / become-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.2
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
Decoded in 495,306 microseconds
Sentence: Well I woudnt try to keep an eye on ur anxiety for a start because that will make u tense and more likely to become more panicky (circle of demise there)

Oracle Span 1:  and => and
Oracle Span 2:  anxiety => anxiety
Oracle Span 3:  because => cause-01
Oracle Span 4:  circle => circle
Oracle Span 5:  demise => demise
Oracle Span 6:  eye => eye-01
Oracle Span 7:  I => i
Oracle Span 8:  likely => likely
Oracle Span 9:  make => make-01
Oracle Span 10:  more => more
Oracle Span 11:  more => more
Oracle Span 12:  panicky => panic-01
Oracle Span 13:  start => start
Oracle Span 14:  tense => tense-01
Oracle Span 15:  there => there
Oracle Span 16:  try => try-01
Spans:
Span 20-21:  and => and
Span 10-11:  anxiety => anxiety
Span 14-15:  because => cause-01
Span 28-29:  circle => circle
Span 30-31:  demise => demise
Span 7-8:  eye => eye-01
Span 1-2:  I => i
Span 22-23:  likely => likely
Span 17-18:  make => make-01
Span 21-22:  more => more
Span 25-26:  more => more
Span 26-27:  panicky => panic-01
Span 13-14:  start => start
Span 19-20:  tense => tense-01
Span 31-32:  there => there
Span 3-4:  try => try-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 20-21:  and => and
Oracle Span 10-11:  anxiety => anxiety
Oracle Span 14-15:  because => cause-01
Oracle Span 28-29:  circle => circle
Oracle Span 30-31:  demise => demise
Oracle Span 7-8:  eye => eye-01
Oracle Span 1-2:  I => i
Oracle Span 22-23:  likely => likely
Oracle Span 17-18:  make => make-01
Oracle Span 21-22:  more => more
Oracle Span 25-26:  more => more
Oracle Span 26-27:  panicky => panic-01
Oracle Span 13-14:  start => start
Oracle Span 19-20:  tense => tense-01
Oracle Span 31-32:  there => there
Oracle Span 3-4:  try => try-01

Dependencies:
1	Well	_	VB	VB	_	0	root	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	woudnt	_	JJ	JJ	_	1	xcomp	_	_
4	try	_	VBP	VBP	_	3	ccomp	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	keep	_	VB	VB	_	4	xcomp	_	_
7	an	_	DT	DT	_	8	det	_	_
8	eye	_	NN	NN	_	6	dobj	_	_
9	on	_	IN	IN	_	6	prep	_	_
10	ur	_	NN	NN	_	11	nn	_	_
11	anxiety	_	NN	NN	_	9	pobj	_	_
12	for	_	IN	IN	_	11	prep	_	_
13	a	_	DT	DT	_	14	det	_	_
14	start	_	NN	NN	_	12	pobj	_	_
15	because	_	IN	IN	_	18	mark	_	_
16	that	_	DT	DT	_	18	nsubj	_	_
17	will	_	MD	MD	_	18	aux	_	_
18	make	_	VB	VB	_	6	advcl	_	_
19	u	_	NN	NN	_	18	dobj	_	_
20	tense	_	JJ	JJ	_	19	amod	_	_
21	and	_	CC	CC	_	3	cc	_	_
22	more	_	RBR	RBR	_	23	advmod	_	_
23	likely	_	JJ	JJ	_	3	conj	_	_
24	to	_	TO	TO	_	25	aux	_	_
25	become	_	VB	VB	_	23	xcomp	_	_
26	more	_	JJR	JJR	_	25	xcomp	_	_
27	panicky	_	JJ	JJ	_	26	amod	_	_
28	(	_	(	(	_	32	punct	_	_
29	circle	_	NN	NN	_	32	dep	_	_
30	of	_	IN	IN	_	29	prep	_	_
31	demise	_	NN	NN	_	30	pobj	_	_
32	there	_	EX	EX	_	26	dep	_	_
33	)	_	)	)	_	32	punct	_	_

Oracle:
(a2 / and, op, l / likely)
(a2 / and, op, t2 / tense-01)
(c / cause-01, ARG0, m2 / make-01)
(c2 / circle, location, t3 / there)
(c2 / circle, mod, d / demise)
(e / eye-01, ARG0, i / i)
(e / eye-01, ARG1, a / anxiety)
(l / likely, degree, m3 / more)
(l / likely, domain, p2 / panic-01)
(m2 / make-01, ARG0, e / eye-01)
(m2 / make-01, ARG1, a2 / and)
(p2 / panic-01, degree, m4 / more)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, e / eye-01)
(t / try-01, prep-for, s / start)
(t2 / tense-01, ARG1, i / i)

Input(Some(Graph((multi-sentence :snt1 (recommend-01 :ARG1 (try-01 :prep-for start :ARG1 (eye-01 :ARG1 (anxiety :poss you) :ARG0 i) :ARG0 i :polarity -) :ARG1-of (cause-01 :ARG0 (make-01 :ARG1 (and :op (likely :domain (panic-01 :degree more :ARG1 you) :degree more) :op (tense-01 :ARG1 i)) :ARG0 eye-01))) :snt2 (circle :location there :mod demise)),ArrayBuffer(Span(3,4,List(0),try,try-01,false), Span(13,14,List(1),start,start,false), Span(7,8,List(2),eye,eye-01,false), Span(10,11,List(3),anxiety,anxiety,false), Span(1,2,List(4),I,i,false), Span(14,15,List(5),because,cause-01,false), Span(17,18,List(6),make,make-01,false), Span(20,21,List(7),and,and,false), Span(22,23,List(8),likely,likely,false), Span(21,22,List(9),more,more,false), Span(25,26,List(10),more,more,false), Span(19,20,List(11),tense,tense-01,false), Span(28,29,List(12),circle,circle,false), Span(31,32,List(13),there,there,false), Span(30,31,List(14),demise,demise,false), Span(26,27,List(15),panicky,panic-01,false)),Map(2 -> eye-01, 5 -> cause-01, 12 -> circle, 15 -> panic-01, 8 -> likely, 7 -> and, 1 -> start, 4 -> i, 11 -> tense-01, 14 -> demise, 6 -> make-01, 9 -> more, 0 -> try-01, 10 -> more, 3 -> anxiety, 13 -> there),Map(m3 -> more, e -> eye-01, t -> try-01, m2 -> make-01, p2 -> panic-01, s -> start, d -> demise, t3 -> there, a -> anxiety, t2 -> tense-01, m4 -> more, a2 -> and, i -> i, c -> cause-01, l -> likely, c2 -> circle))),[Ljava.lang.String;@6c5945a7,Annotation([Ljava.lang.String;@2f05be7f,[Ljava.lang.String;@640f11a1,[Ljava.lang.String;@5c10f1c3),Annotation([Ljava.lang.String;@7ac2e39b,[Ljava.lang.String;@78365cfa,[Ledu.cmu.lti.nlp.amr.Dependency;@64a8c844),Annotation([Ljava.lang.String;@3f6db3fb,[Ljava.lang.String;@52de51b6,[Ljava.lang.String;@18c5069b),Annotation([Ljava.lang.String;@3a0d172f,[Ljava.lang.String;@68ad99fe,[Ledu.cmu.lti.nlp.amr.Entity;@485e36bc))
AMR:
(a / anxiety, poss, s / start)
(a2 / and, op, t2 / tense-01)
(c / cause-01, ARG0, m2 / make-01)
(c / cause-01, ARG1, t / try-01)
(c2 / circle, location, d / demise)
(e / eye-01, ARG1, a / anxiety)
(l / likely, degree, m4 / more)
(l / likely, domain, i / i)
(m2 / make-01, ARG1, a2 / and)
(p2 / panic-01, ARG0, c2 / circle)
(p2 / panic-01, ARG1, t3 / there)
(p2 / panic-01, ARG6, m3 / more)
(t / try-01, ARG0, m3 / more)
(t / try-01, ARG1, e / eye-01)
(t / try-01, ARG6, i / i)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1.1
Decoded in 620,101 microseconds
Sentence: what I would try to do is focus on something that is garunteed to make you smile or feel happier as soon as you start to feel a bit panicky about anything.

Oracle Span 1:  anything => anything
Oracle Span 2:  bit => bit
Oracle Span 3:  feel => feel-01
Oracle Span 4:  feel => feel-01
Oracle Span 5:  focus => focus-01
Oracle Span 6:  happier => happy
Oracle Span 7:  I => i
Oracle Span 8:  make => make-02
Oracle Span 9:  or => or
Oracle Span 10:  panicky => panic-01
Oracle Span 11:  smile => smile-01
Oracle Span 12:  something => something
Oracle Span 13:  start => start-01
Oracle Span 14:  try => try-01
Oracle Span 15:  you => you
Spans:
Span 31-32:  anything => anything
Span 28-29:  bit => bit
Span 18-19:  feel => feel-01
Span 26-27:  feel => feel-01
Span 7-8:  focus => focus-01
Span 19-20:  happier => happy
Span 1-2:  I => i
Span 14-15:  make => make-02
Span 17-18:  or => or
Span 29-30:  panicky => panic-01
Span 16-17:  smile => smile-01
Span 9-10:  something => something
Span 24-25:  start => start-01
Span 3-4:  try => try-01
Span 15-16:  you => you

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 31-32:  anything => anything
Oracle Span 28-29:  bit => bit
Oracle Span 18-19:  feel => feel-01
Oracle Span 26-27:  feel => feel-01
Oracle Span 7-8:  focus => focus-01
Oracle Span 19-20:  happier => happy
Oracle Span 1-2:  I => i
Oracle Span 14-15:  make => make-02
Oracle Span 17-18:  or => or
Oracle Span 29-30:  panicky => panic-01
Oracle Span 16-17:  smile => smile-01
Oracle Span 9-10:  something => something
Oracle Span 24-25:  start => start-01
Oracle Span 3-4:  try => try-01
Oracle Span 15-16:  you => you

Dependencies:
1	what	_	WP	WP	_	4	dobj	_	_
2	I	_	PRP	PRP	_	4	nsubj	_	_
3	would	_	MD	MD	_	4	aux	_	_
4	try	_	VB	VB	_	8	csubj	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	do	_	VB	VB	_	4	xcomp	_	_
7	is	_	VBZ	VBZ	_	8	cop	_	_
8	focus	_	NN	NN	_	0	root	_	_
9	on	_	IN	IN	_	8	prep	_	_
10	something	_	NN	NN	_	9	pobj	_	_
11	that	_	WDT	WDT	_	13	nsubjpass	_	_
12	is	_	VBZ	VBZ	_	13	auxpass	_	_
13	garunteed	_	VBN	VBN	_	8	rcmod	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	make	_	VB	VB	_	13	xcomp	_	_
16	you	_	PRP	PRP	_	17	nsubj	_	_
17	smile	_	VBP	VBP	_	15	ccomp	_	_
18	or	_	CC	CC	_	15	cc	_	_
19	feel	_	VB	VB	_	15	conj	_	_
20	happier	_	JJR	JJR	_	19	acomp	_	_
21	as	_	RB	RB	_	22	advmod	_	_
22	soon	_	RB	RB	_	19	advmod	_	_
23	as	_	IN	IN	_	25	mark	_	_
24	you	_	PRP	PRP	_	25	nsubj	_	_
25	start	_	VBP	VBP	_	19	advcl	_	_
26	to	_	TO	TO	_	27	aux	_	_
27	feel	_	VB	VB	_	25	xcomp	_	_
28	a	_	DT	DT	_	30	det	_	_
29	bit	_	NN	NN	_	30	nn	_	_
30	panicky	_	NN	NN	_	27	dobj	_	_
31	about	_	IN	IN	_	27	prep	_	_
32	anything	_	NN	NN	_	31	pobj	_	_
33	.	_	.	.	_	8	punct	_	_

Oracle:
(f / focus-01, ARG0, y / you)
(f / focus-01, ARG2, s / something)
(f2 / feel-01, ARG0, y / you)
(f2 / feel-01, ARG1, h / happy)
(f3 / feel-01, ARG0, y / you)
(f3 / feel-01, ARG1, p / panic-01)
(m / make-02, ARG1, o / or)
(o / or, op, f2 / feel-01)
(o / or, op, s2 / smile-01)
(p / panic-01, ARG1, y / you)
(p / panic-01, quant, b / bit)
(p / panic-01, topic, a2 / anything)
(s2 / smile-01, ARG0, y / you)
(s3 / start-01, ARG0, y / you)
(s3 / start-01, ARG1, f3 / feel-01)
(t / try-01, ARG0, y / you)
(t / try-01, ARG1, f / focus-01)

Input(Some(Graph((recommend-01 :ARG0 i :ARG1 (try-01 :ARG1 (focus-01 :time (as-soon-as :op (start-01 :ARG1 (feel-01 :ARG1 (panic-01 :topic anything :quant bit :ARG1 you) :ARG0 you) :ARG0 you)) :ARG2 (something :ARG0-of (guarantee-01 :ARG0-of (make-02 :ARG1 (or :op (feel-01 :ARG1 (happy :degree more) :ARG0 you) :op (smile-01 :ARG0 you))))) :ARG0 you) :ARG0 you)),ArrayBuffer(Span(1,2,List(0),I,i,false), Span(3,4,List(1),try,try-01,false), Span(7,8,List(2),focus,focus-01,false), Span(24,25,List(3),start,start-01,false), Span(18,19,List(4),feel,feel-01,false), Span(28,29,List(5),bit,bit,false), Span(31,32,List(6),anything,anything,false), Span(9,10,List(7),something,something,false), Span(14,15,List(8),make,make-02,false), Span(17,18,List(9),or,or,false), Span(26,27,List(10),feel,feel-01,false), Span(19,20,List(11),happier,happy,false), Span(16,17,List(12),smile,smile-01,false), Span(15,16,List(13),you,you,false), Span(29,30,List(14),panicky,panic-01,false)),Map(2 -> focus-01, 5 -> bit, 12 -> smile-01, 8 -> make-02, 7 -> something, 1 -> try-01, 4 -> feel-01, 11 -> happy, 14 -> panic-01, 6 -> anything, 9 -> or, 0 -> i, 10 -> feel-01, 3 -> start-01, 13 -> you),Map(h -> happy, s2 -> smile-01, b -> bit, t -> try-01, s -> something, m -> make-02, p -> panic-01, y -> you, f3 -> feel-01, a2 -> anything, i -> i, s3 -> start-01, f2 -> feel-01, f -> focus-01, o -> or))),[Ljava.lang.String;@781f10f2,Annotation([Ljava.lang.String;@2a79d4b1,[Ljava.lang.String;@2e9fda69,[Ljava.lang.String;@17cdf2d0),Annotation([Ljava.lang.String;@1755e85b,[Ljava.lang.String;@736d6a5c,[Ledu.cmu.lti.nlp.amr.Dependency;@2371aaca),Annotation([Ljava.lang.String;@5b529706,[Ljava.lang.String;@63fdab07,[Ljava.lang.String;@7b5a12ae),Annotation([Ljava.lang.String;@5553d0f5,[Ljava.lang.String;@1af687fe,[Ledu.cmu.lti.nlp.amr.Entity;@14dda234))
AMR:
(f / focus-01, ARG1, s / something)
(f2 / feel-01, ARG1, p / panic-01)
(f3 / feel-01, ARG1, h / happy)
(m / make-02, ARG1, f / focus-01)
(o / or, op, f3 / feel-01)
(o / or, op, m / make-02)
(o / or, op, s2 / smile-01)
(p / panic-01, ARG0, b / bit)
(p / panic-01, ARG1, a2 / anything)
(s2 / smile-01, ARG0, y / you)
(s2 / smile-01, ARG1, s3 / start-01)
(s3 / start-01, ARG1, f2 / feel-01)
(t / try-01, ARG0, i / i)
(t / try-01, ARG1, f / focus-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0
Decoded in 899,921 microseconds
Sentence: Or if u cant do that-when you start to feel panicky, get one of your friends to make you laugh (it works for me and i suffer from random panic attacks lol

Oracle Span 1:  and => and
Oracle Span 2:  attacks => attack
Oracle Span 3:  do => do-02
Oracle Span 4:  feel => feel-01
Oracle Span 5:  friends => friend
Oracle Span 6:  get => get-04
Oracle Span 7:  i => i
Oracle Span 8:  laugh => laugh-01
Oracle Span 9:  lol => lol
Oracle Span 10:  make => make-02
Oracle Span 11:  of => include-91
Oracle Span 12:  Or => or
Oracle Span 13:  panic => panic-01
Oracle Span 14:  panicky => panic-01
Oracle Span 15:  random => random
Oracle Span 16:  start => start-01
Oracle Span 17:  suffer => suffer-01
Oracle Span 18:  that => that
Oracle Span 19:  works => work-09
Oracle Span 20:  you => you
Spans:
Span 28-29:  and => and
Span 34-35:  attacks => attack
Span 4-5:  do => do-02
Span 11-12:  feel => feel-01
Span 18-19:  friends => friend
Span 14-15:  get => get-04
Span 29-30:  i => i
Span 22-23:  laugh => laugh-01
Span 35-36:  lol => lol
Span 20-21:  make => make-02
Span 16-17:  of => include-91
Span 0-1:  Or => or
Span 33-34:  panic => panic-01
Span 12-13:  panicky => panic-01
Span 32-33:  random => random
Span 9-10:  start => start-01
Span 30-31:  suffer => suffer-01
Span 5-6:  that => that
Span 25-26:  works => work-09
Span 8-9:  you => you

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 28-29:  and => and
Oracle Span 34-35:  attacks => attack
Oracle Span 4-5:  do => do-02
Oracle Span 11-12:  feel => feel-01
Oracle Span 18-19:  friends => friend
Oracle Span 14-15:  get => get-04
Oracle Span 29-30:  i => i
Oracle Span 22-23:  laugh => laugh-01
Oracle Span 35-36:  lol => lol
Oracle Span 20-21:  make => make-02
Oracle Span 16-17:  of => include-91
Oracle Span 0-1:  Or => or
Oracle Span 33-34:  panic => panic-01
Oracle Span 12-13:  panicky => panic-01
Oracle Span 32-33:  random => random
Oracle Span 9-10:  start => start-01
Oracle Span 30-31:  suffer => suffer-01
Oracle Span 5-6:  that => that
Oracle Span 25-26:  works => work-09
Oracle Span 8-9:  you => you

Dependencies:
1	Or	_	CC	CC	_	13	cc	_	_
2	if	_	IN	IN	_	6	mark	_	_
3	u	_	NN	NN	_	4	nn	_	_
4	cant	_	NN	NN	_	6	nsubj	_	_
5	do	_	VBP	VBP	_	6	dep	_	_
6	that-when	_	JJ	JJ	_	13	advcl	_	_
7	you	_	PRP	PRP	_	8	nsubj	_	_
8	start	_	VBP	VBP	_	6	ccomp	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	feel	_	VB	VB	_	8	xcomp	_	_
11	panicky	_	JJ	JJ	_	10	dobj	_	_
12	,	_	,	,	_	13	punct	_	_
13	get	_	VBP	VBP	_	0	root	_	_
14	one	_	CD	CD	_	13	dobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	your	_	PRP$	PRP$	_	17	poss	_	_
17	friends	_	NNS	NNS	_	15	pobj	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	make	_	VB	VB	_	17	vmod	_	_
20	you	_	PRP	PRP	_	21	nsubj	_	_
21	laugh	_	NN	NN	_	19	dep	_	_
22	(	_	(	(	_	24	punct	_	_
23	it	_	PRP	PRP	_	24	nsubj	_	_
24	works	_	VBZ	VBZ	_	21	ccomp	_	_
25	for	_	IN	IN	_	24	prep	_	_
26	me	_	PRP	PRP	_	25	pobj	_	_
27	and	_	CC	CC	_	21	cc	_	_
28	i	_	FW	FW	_	29	nsubj	_	_
29	suffer	_	VBP	VBP	_	21	conj	_	_
30	from	_	IN	IN	_	29	prep	_	_
31	random	_	JJ	JJ	_	34	amod	_	_
32	panic	_	NN	NN	_	34	nn	_	_
33	attacks	_	NNS	NNS	_	34	nn	_	_
34	lol	_	NN	NN	_	30	pobj	_	_

Oracle:
(a / and, mod, l2 / lol)
(a / and, op, s2 / suffer-01)
(a / and, op, w / work-09)
(a2 / attack, mod, p2 / panic-01)
(a2 / attack, mod, r / random)
(d / do-02, ARG0, y / you)
(d / do-02, ARG1, t / that)
(f3 / feel-01, ARG0, g / get-04)
(f3 / feel-01, ARG1, p / panic-01)
(g / get-04, ARG0, y / you)
(g / get-04, ARG1, m2 / make-02)
(g / get-04, time, s / start-01)
(i3 / include-91, ARG1, f / friend)
(l / laugh-01, ARG0, y / you)
(m2 / make-02, ARG0, f / friend)
(m2 / make-02, ARG1, l / laugh-01)
(o / or, op, g / get-04)
(s / start-01, ARG0, g / get-04)
(s / start-01, ARG1, f3 / feel-01)
(s2 / suffer-01, ARG0, i / i)
(s2 / suffer-01, ARG1, a2 / attack)
(w / work-09, ARG1, g / get-04)

Input(Some(Graph((multi-sentence :snt1 (or :condition (capable-41 :polarity - :ARG2 (do-02 :ARG1 that :ARG0 you) :ARG1 you) :op (get-04 :time (start-01 :ARG1 (feel-01 :ARG1 panic-01 :ARG0 get-04) :ARG0 get-04) :ARG1 (make-02 :ARG1 (laugh-01 :ARG0 you) :ARG0 (friend :ARG1-of (include-91 :ARG2 (friend :poss you)))) :ARG0 you)) :snt2 (and :mod (lol :mode expressive) :op (suffer-01 :ARG1 (attack :mod random :mod panic-01) :ARG0 i) :op (work-09 :ARG2 I :ARG1 get-04))),ArrayBuffer(Span(0,1,List(0),Or,or,false), Span(4,5,List(1),do,do-02,false), Span(5,6,List(2),that,that,false), Span(14,15,List(3),get,get-04,false), Span(9,10,List(4),start,start-01,false), Span(11,12,List(5),feel,feel-01,false), Span(33,34,List(6),panic,panic-01,false), Span(20,21,List(7),make,make-02,false), Span(22,23,List(8),laugh,laugh-01,false), Span(18,19,List(9),friends,friend,false), Span(16,17,List(10),of,include-91,false), Span(8,9,List(11),you,you,false), Span(28,29,List(12),and,and,false), Span(35,36,List(13),lol,lol,false), Span(30,31,List(14),suffer,suffer-01,false), Span(34,35,List(15),attacks,attack,false), Span(32,33,List(16),random,random,false), Span(29,30,List(17),i,i,false), Span(25,26,List(18),works,work-09,false), Span(12,13,List(19),panicky,panic-01,false)),Map(2 -> that, 5 -> feel-01, 12 -> and, 15 -> attack, 8 -> laugh-01, 18 -> work-09, 7 -> make-02, 17 -> i, 1 -> do-02, 4 -> start-01, 11 -> you, 14 -> suffer-01, 6 -> panic-01, 9 -> friend, 0 -> or, 16 -> random, 19 -> panic-01, 10 -> include-91, 3 -> get-04, 13 -> lol),Map(w -> work-09, s2 -> suffer-01, t -> that, m2 -> make-02, p2 -> panic-01, s -> start-01, d -> do-02, i3 -> include-91, y -> you, p -> panic-01, g -> get-04, a -> and, f3 -> feel-01, l2 -> lol, i -> i, r -> random, a2 -> attack, l -> laugh-01, f -> friend, o -> or))),[Ljava.lang.String;@3f390d63,Annotation([Ljava.lang.String;@74a6a609,[Ljava.lang.String;@5a411614,[Ljava.lang.String;@2374d36a),Annotation([Ljava.lang.String;@54d18072,[Ljava.lang.String;@1506f20f,[Ledu.cmu.lti.nlp.amr.Dependency;@47a5b70d),Annotation([Ljava.lang.String;@424fd310,[Ljava.lang.String;@1a45193b,[Ljava.lang.String;@38f116f6),Annotation([Ljava.lang.String;@5286c33a,[Ljava.lang.String;@6e6d5d29,[Ledu.cmu.lti.nlp.amr.Entity;@5c530d1e))
AMR:
(a / and, op, l / laugh-01)
(a / and, op, s2 / suffer-01)
(d / do-02, ARG1, t / that)
(f3 / feel-01, ARG0, y / you)
(f3 / feel-01, ARG1, p2 / panic-01)
(g / get-04, ARG1, i3 / include-91)
(i3 / include-91, ARG1, r / random)
(i3 / include-91, ARG2, f / friend)
(l / laugh-01, ARG1, w / work-09)
(l2 / lol, mod, a2 / attack)
(m2 / make-02, ARG1, f / friend)
(o / or, op, g / get-04)
(o / or, op, t / that)
(p / panic-01, ARG1, l2 / lol)
(p2 / panic-01, ARG1, g / get-04)
(s / start-01, ARG1, f3 / feel-01)
(s2 / suffer-01, ARG1, l2 / lol)
(s2 / suffer-01, ARG6, i / i)
(w / work-09, ARG1, m2 / make-02)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0
Decoded in 1,129,673 microseconds
Sentence: This started happening to me, where I'd just start being really anxious over tiny things, although from the sound of things, not as severely as you.

Oracle Span 1:  happening => happen-01
Oracle Span 2:  I => i
Oracle Span 3:  really => really
Oracle Span 4:  severely => severe
Oracle Span 5:  sound => sound-01
Oracle Span 6:  start => start-01
Oracle Span 7:  started => start-01
Oracle Span 8:  things => thing
Oracle Span 9:  things => thing
Oracle Span 10:  tiny => tiny
Oracle Span 11:  you => you
Spans:
Span 2-3:  happening => happen-01
Span 7-8:  I => i
Span 12-13:  really => really
Span 27-28:  severely => severe
Span 21-22:  sound => sound-01
Span 10-11:  start => start-01
Span 1-2:  started => start-01
Span 16-17:  things => thing
Span 23-24:  things => thing
Span 15-16:  tiny => tiny
Span 29-30:  you => you

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 2-3:  happening => happen-01
Oracle Span 7-8:  I => i
Oracle Span 12-13:  really => really
Oracle Span 27-28:  severely => severe
Oracle Span 21-22:  sound => sound-01
Oracle Span 10-11:  start => start-01
Oracle Span 1-2:  started => start-01
Oracle Span 16-17:  things => thing
Oracle Span 23-24:  things => thing
Oracle Span 15-16:  tiny => tiny
Oracle Span 29-30:  you => you

Dependencies:
1	This	_	DT	DT	_	2	nsubj	_	_
2	started	_	VBD	VBD	_	0	root	_	_
3	happening	_	VBG	VBG	_	2	xcomp	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	me	_	PRP	PRP	_	4	pobj	_	_
6	,	_	,	,	_	2	punct	_	_
7	where	_	WRB	WRB	_	11	advmod	_	_
8	I	_	PRP	PRP	_	11	nsubj	_	_
9	'd	_	MD	MD	_	11	aux	_	_
10	just	_	RB	RB	_	11	advmod	_	_
11	start	_	VB	VB	_	2	advcl	_	_
12	being	_	VBG	VBG	_	14	cop	_	_
13	really	_	RB	RB	_	14	advmod	_	_
14	anxious	_	JJ	JJ	_	11	xcomp	_	_
15	over	_	IN	IN	_	14	prep	_	_
16	tiny	_	JJ	JJ	_	17	amod	_	_
17	things	_	NNS	NNS	_	15	pobj	_	_
18	,	_	,	,	_	17	punct	_	_
19	although	_	IN	IN	_	20	mark	_	_
20	from	_	IN	IN	_	17	dep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	sound	_	NN	NN	_	20	pobj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	things	_	NNS	NNS	_	23	pobj	_	_
25	,	_	,	,	_	15	punct	_	_
26	not	_	RB	RB	_	15	cc	_	_
27	as	_	IN	IN	_	26	dep	_	_
28	severely	_	RB	RB	_	29	advmod	_	_
29	as	_	IN	IN	_	15	conj	_	_
30	you	_	PRP	PRP	_	29	pobj	_	_
31	.	_	.	.	_	2	punct	_	_

Oracle:
(h / happen-01, ARG1, s2 / start-01)
(s / start-01, ARG1, h / happen-01)
(s2 / start-01, concession, s3 / severe)
(s3 / severe, compared-to, y / you)
(s3 / severe, source, s4 / sound-01)
(s4 / sound-01, ARG1, t4 / thing)
(t / thing, mod, t2 / tiny)

Input(Some(Graph((start-01 :ARG1 (happen-01 :ARG1 (start-01 :concession (severe :source (sound-01 :ARG1 thing) :compared-to you :polarity -) :ARG1 (worry-01 :ARG0 (thing :mod tiny) :ARG1 i :mod really)))),ArrayBuffer(Span(1,2,List(0),started,start-01,false), Span(2,3,List(1),happening,happen-01,false), Span(10,11,List(2),start,start-01,false), Span(29,30,List(3),you,you,false), Span(21,22,List(4),sound,sound-01,false), Span(16,17,List(5),things,thing,false), Span(23,24,List(6),things,thing,false), Span(15,16,List(7),tiny,tiny,false), Span(7,8,List(8),I,i,false), Span(12,13,List(9),really,really,false), Span(27,28,List(10),severely,severe,false)),Map(2 -> start-01, 5 -> thing, 8 -> i, 7 -> tiny, 1 -> happen-01, 4 -> sound-01, 6 -> thing, 9 -> really, 0 -> start-01, 10 -> severe, 3 -> you),Map(t4 -> thing, h -> happen-01, t -> thing, s2 -> start-01, s -> start-01, s4 -> sound-01, y -> you, t2 -> tiny, r -> really, i -> i, s3 -> severe))),[Ljava.lang.String;@6c25e6c4,Annotation([Ljava.lang.String;@85e6769,[Ljava.lang.String;@c5ee75e,[Ljava.lang.String;@48a12036),Annotation([Ljava.lang.String;@bf1ec20,[Ljava.lang.String;@70efb718,[Ledu.cmu.lti.nlp.amr.Dependency;@b70da4c),Annotation([Ljava.lang.String;@4a11eb84,[Ljava.lang.String;@4e858e0a,[Ljava.lang.String;@435fb7b5),Annotation([Ljava.lang.String;@4e70a728,[Ljava.lang.String;@b7838a9,[Ledu.cmu.lti.nlp.amr.Entity;@696f0212))
AMR:
(h / happen-01, ARG1, t / thing)
(s / start-01, ARG0, y / you)
(s / start-01, ARG1, h / happen-01)
(s / start-01, condition, s2 / start-01)
(s2 / start-01, ARG0, i / i)
(s2 / start-01, ARG6, r / really)
(s4 / sound-01, ARG1, t / thing)
(s4 / sound-01, ARG6, t4 / thing)
(t4 / thing, mod, t2 / tiny)
(y / you, calendar, s3 / severe)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.2
WARNING: makeIds can't find span Id: 0.0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
Decoded in 352,687 microseconds
Sentence: What I find helps is just talking about what is making you anxious to someone else.

Oracle Span 1:  anxious => anxious
Oracle Span 2:  else => else
Oracle Span 3:  find => find-01
Oracle Span 4:  helps => help-01
Oracle Span 5:  I => i
Oracle Span 6:  just => just
Oracle Span 7:  making => (thing :ARG0-of make-02)
Oracle Span 8:  someone => someone
Oracle Span 9:  talking => talk-01
Oracle Span 10:  you => you
Spans:
Span 12-13:  anxious => anxious
Span 15-16:  else => else
Span 2-3:  find => find-01
Span 3-4:  helps => help-01
Span 1-2:  I => i
Span 5-6:  just => just
Span 10-11:  making => (thing :ARG0-of make-02)
Span 14-15:  someone => someone
Span 6-7:  talking => talk-01
Span 11-12:  you => you

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 12-13:  anxious => anxious
Oracle Span 15-16:  else => else
Oracle Span 2-3:  find => find-01
Oracle Span 3-4:  helps => help-01
Oracle Span 1-2:  I => i
Oracle Span 5-6:  just => just
Oracle Span 10-11:  making => (thing :ARG0-of make-02)
Oracle Span 14-15:  someone => someone
Oracle Span 6-7:  talking => talk-01
Oracle Span 11-12:  you => you

Dependencies:
1	What	_	WP	WP	_	3	dobj	_	_
2	I	_	PRP	PRP	_	3	nsubj	_	_
3	find	_	VBP	VBP	_	7	csubj	_	_
4	helps	_	VBZ	VBZ	_	3	ccomp	_	_
5	is	_	VBZ	VBZ	_	7	aux	_	_
6	just	_	RB	RB	_	7	advmod	_	_
7	talking	_	VBG	VBG	_	0	root	_	_
8	about	_	IN	IN	_	7	prep	_	_
9	what	_	WP	WP	_	11	nsubj	_	_
10	is	_	VBZ	VBZ	_	11	aux	_	_
11	making	_	VBG	VBG	_	8	pcomp	_	_
12	you	_	PRP	PRP	_	13	nsubj	_	_
13	anxious	_	JJ	JJ	_	11	xcomp	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	someone	_	NN	NN	_	14	pobj	_	_
16	else	_	RB	RB	_	15	advmod	_	_
17	.	_	.	.	_	7	punct	_	_

Oracle:
(a / anxious, domain, y / you)
(f / find-01, ARG0, i / i)
(f / find-01, ARG1, h / help-01)
(h / help-01, ARG0, t / talk-01)
(m / make-02, ARG0, t2 / thing)
(m / make-02, ARG1, a / anxious)
(s / someone, mod, e / else)
(t / talk-01, ARG1, t2 / thing)
(t / talk-01, ARG2, s / someone)
(t / talk-01, mod, j / just)

Input(Some(Graph((find-01 :ARG1 (help-01 :ARG0 (talk-01 :mod just :ARG2 (someone :mod else) :ARG1 (thing :ARG0-of (make-02 :ARG1 (anxious :domain you))))) :ARG0 i),ArrayBuffer(Span(2,3,List(0),find,find-01,false), Span(3,4,List(1),helps,help-01,false), Span(6,7,List(2),talking,talk-01,false), Span(5,6,List(3),just,just,false), Span(14,15,List(4),someone,someone,false), Span(15,16,List(5),else,else,false), Span(10,11,List(6, 7),making,(thing :ARG0-of make-02),false), Span(12,13,List(8),anxious,anxious,false), Span(11,12,List(9),you,you,false), Span(1,2,List(10),I,i,false)),Map(2 -> talk-01, 5 -> else, 8 -> anxious, 7 -> make-02, 1 -> help-01, 4 -> someone, 6 -> thing, 9 -> you, 0 -> find-01, 10 -> i, 3 -> just),Map(e -> else, h -> help-01, t -> talk-01, s -> someone, j -> just, m -> make-02, y -> you, a -> anxious, t2 -> thing, i -> i, f -> find-01))),[Ljava.lang.String;@5733f295,Annotation([Ljava.lang.String;@1c3146bc,[Ljava.lang.String;@56c698e3,[Ljava.lang.String;@47a86fbb),Annotation([Ljava.lang.String;@f478a81,[Ljava.lang.String;@19553973,[Ledu.cmu.lti.nlp.amr.Dependency;@7bb6ab3a),Annotation([Ljava.lang.String;@7fe7c640,[Ljava.lang.String;@4c4748bf,[Ljava.lang.String;@7ce97ee5),Annotation([Ljava.lang.String;@32c8e539,[Ljava.lang.String;@73dce0e6,[Ledu.cmu.lti.nlp.amr.Entity;@5a85c92))
AMR:
(a / anxious, calendar, s / someone)
(a / anxious, calendar, y / you)
(f / find-01, ARG0, i / i)
(f / find-01, ARG1, e / else)
(h / help-01, ARG1, t / talk-01)
(m / make-02, ARG0, t2 / thing)
(m / make-02, ARG1, a / anxious)
(t / talk-01, ARG0, f / find-01)
(t / talk-01, ARG1, t2 / thing)
(t / talk-01, ARG6, j / just)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 173,795 microseconds
Sentence: Perhaps not in a moany way but I found that mentioning the thing that I was worried about to my mum and seeing her react to the situation in a calm way (like I should have been reacting) made me feel better about it because I knew it wasn't a big deal and I didn't need to be anxious about it.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  anxious => anxious
Oracle Span 4:  because => cause-01
Oracle Span 5:  better => good
Oracle Span 6:  big => big
Oracle Span 7:  but => contrast-01
Oracle Span 8:  calm => calm
Oracle Span 9:  deal => deal
Oracle Span 10:  feel => feel-01
Oracle Span 11:  found => find-01
Oracle Span 12:  I => i
Oracle Span 13:  knew => know-01
Oracle Span 14:  made => make-02
Oracle Span 15:  mentioning => mention-01
Oracle Span 16:  moany => moan-01
Oracle Span 17:  mum => mum
Oracle Span 18:  need => need-01
Oracle Span 19:  Perhaps => perhaps
Oracle Span 20:  react => react-01
Oracle Span 21:  reacting => react-01
Oracle Span 22:  seeing => see-01
Oracle Span 23:  should => recommend-01
Oracle Span 24:  situation => situation
Oracle Span 25:  thing => thing
Oracle Span 26:  way => way
Oracle Span 27:  way => way
Oracle Span 28:  worried => worry-02
Spans:
Span 21-22:  and => and
Span 55-56:  and => and
Span 62-63:  anxious => anxious
Span 46-47:  because => cause-01
Span 43-44:  better => good
Span 53-54:  big => big
Span 6-7:  but => contrast-01
Span 30-31:  calm => calm
Span 54-55:  deal => deal
Span 42-43:  feel => feel-01
Span 8-9:  found => find-01
Span 7-8:  I => i
Span 48-49:  knew => know-01
Span 40-41:  made => make-02
Span 10-11:  mentioning => mention-01
Span 4-5:  moany => moan-01
Span 20-21:  mum => mum
Span 59-60:  need => need-01
Span 0-1:  Perhaps => perhaps
Span 24-25:  react => react-01
Span 38-39:  reacting => react-01
Span 22-23:  seeing => see-01
Span 35-36:  should => recommend-01
Span 27-28:  situation => situation
Span 12-13:  thing => thing
Span 5-6:  way => way
Span 31-32:  way => way
Span 16-17:  worried => worry-02

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Oracle Span 21-22:  and => and
Oracle Span 55-56:  and => and
Oracle Span 62-63:  anxious => anxious
Oracle Span 46-47:  because => cause-01
Oracle Span 43-44:  better => good
Oracle Span 53-54:  big => big
Oracle Span 6-7:  but => contrast-01
Oracle Span 30-31:  calm => calm
Oracle Span 54-55:  deal => deal
Oracle Span 42-43:  feel => feel-01
Oracle Span 8-9:  found => find-01
Oracle Span 7-8:  I => i
Oracle Span 48-49:  knew => know-01
Oracle Span 40-41:  made => make-02
Oracle Span 10-11:  mentioning => mention-01
Oracle Span 4-5:  moany => moan-01
Oracle Span 20-21:  mum => mum
Oracle Span 59-60:  need => need-01
Oracle Span 0-1:  Perhaps => perhaps
Oracle Span 24-25:  react => react-01
Oracle Span 38-39:  reacting => react-01
Oracle Span 22-23:  seeing => see-01
Oracle Span 35-36:  should => recommend-01
Oracle Span 27-28:  situation => situation
Oracle Span 12-13:  thing => thing
Oracle Span 5-6:  way => way
Oracle Span 31-32:  way => way
Oracle Span 16-17:  worried => worry-02

Dependencies:
1	Perhaps	_	RB	RB	_	2	dep	_	_
2	not	_	RB	RB	_	0	root	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	a	_	DT	DT	_	6	det	_	_
5	moany	_	JJ	JJ	_	6	amod	_	_
6	way	_	NN	NN	_	3	pobj	_	_
7	but	_	CC	CC	_	9	cc	_	_
8	I	_	PRP	PRP	_	9	nsubj	_	_
9	found	_	VBD	VBD	_	3	dep	_	_
10	that	_	IN	IN	_	41	mark	_	_
11	mentioning	_	VBG	VBG	_	41	csubj	_	_
12	the	_	DT	DT	_	13	det	_	_
13	thing	_	NN	NN	_	11	dobj	_	_
14	that	_	IN	IN	_	17	mark	_	_
15	I	_	PRP	PRP	_	17	nsubjpass	_	_
16	was	_	VBD	VBD	_	17	auxpass	_	_
17	worried	_	VBN	VBN	_	11	ccomp	_	_
18	about	_	IN	IN	_	17	prep	_	_
19	to	_	TO	TO	_	18	pcomp	_	_
20	my	_	PRP$	PRP$	_	21	poss	_	_
21	mum	_	NN	NN	_	19	pobj	_	_
22	and	_	CC	CC	_	11	cc	_	_
23	seeing	_	VBG	VBG	_	11	conj	_	_
24	her	_	PRP	PRP	_	25	nsubj	_	_
25	react	_	VB	VB	_	23	ccomp	_	_
26	to	_	TO	TO	_	25	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	situation	_	NN	NN	_	26	pobj	_	_
29	in	_	IN	IN	_	28	prep	_	_
30	a	_	DT	DT	_	32	det	_	_
31	calm	_	NN	NN	_	32	nn	_	_
32	way	_	NN	NN	_	29	pobj	_	_
33	(	_	(	(	_	39	punct	_	_
34	like	_	IN	IN	_	39	mark	_	_
35	I	_	PRP	PRP	_	39	nsubj	_	_
36	should	_	MD	MD	_	39	aux	_	_
37	have	_	VB	VB	_	39	aux	_	_
38	been	_	VBN	VBN	_	39	aux	_	_
39	reacting	_	VBG	VBG	_	28	dep	_	_
40	)	_	)	)	_	39	punct	_	_
41	made	_	VBD	VBD	_	9	ccomp	_	_
42	me	_	PRP	PRP	_	43	nsubj	_	_
43	feel	_	VBP	VBP	_	41	ccomp	_	_
44	better	_	RBR	RBR	_	43	advmod	_	_
45	about	_	IN	IN	_	43	prep	_	_
46	it	_	PRP	PRP	_	45	pobj	_	_
47	because	_	IN	IN	_	49	mark	_	_
48	I	_	PRP	PRP	_	49	nsubj	_	_
49	knew	_	VBD	VBD	_	43	advcl	_	_
50	it	_	PRP	PRP	_	55	nsubj	_	_
51	was	_	VBD	VBD	_	55	cop	_	_
52	n't	_	RB	RB	_	55	neg	_	_
53	a	_	DT	DT	_	55	det	_	_
54	big	_	JJ	JJ	_	55	amod	_	_
55	deal	_	NN	NN	_	49	ccomp	_	_
56	and	_	CC	CC	_	41	cc	_	_
57	I	_	PRP	PRP	_	60	nsubj	_	_
58	did	_	VBD	VBD	_	60	aux	_	_
59	n't	_	RB	RB	_	60	neg	_	_
60	need	_	VB	VB	_	41	conj	_	_
61	to	_	TO	TO	_	63	aux	_	_
62	be	_	VB	VB	_	63	cop	_	_
63	anxious	_	JJ	JJ	_	60	xcomp	_	_
64	about	_	IN	IN	_	63	prep	_	_
65	it	_	PRP	PRP	_	64	pobj	_	_
66	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, m / mention-01)
(a / and, op, s / see-01)
(a2 / and, op, d / deal)
(a2 / and, op, n / need-01)
(a3 / anxious, domain, i / i)
(a3 / anxious, topic, t / thing)
(c / contrast-01, ARG1, f / find-01)
(c / contrast-01, ARG2, w4 / way)
(c3 / cause-01, ARG0, m3 / make-02)
(c3 / cause-01, ARG1, k / know-01)
(d / deal, domain, t / thing)
(d / deal, mod, b / big)
(f / find-01, ARG0, i / i)
(f / find-01, ARG1, a / and)
(f2 / feel-01, ARG0, i / i)
(f2 / feel-01, ARG1, g / good)
(f2 / feel-01, ARG2, t / thing)
(k / know-01, ARG0, i / i)
(k / know-01, ARG1, a2 / and)
(m / mention-01, ARG0, i / i)
(m / mention-01, ARG1, t / thing)
(m / mention-01, ARG2, m2 / mum)
(m2 / mum, poss, i / i)
(m3 / make-02, ARG0, a / and)
(m3 / make-02, ARG1, f2 / feel-01)
(n / need-01, ARG0, i / i)
(n / need-01, ARG1, a3 / anxious)
(r / react-01, ARG0, m2 / mum)
(r / react-01, ARG1, s2 / situation)
(r / react-01, ARG2, w2 / way)
(r2 / recommend-01, ARG1, r3 / react-01)
(r2 / recommend-01, ARG2, i / i)
(r3 / react-01, ARG0, i / i)
(r3 / react-01, ARG1, c2 / calm)
(s / see-01, ARG0, i / i)
(s / see-01, ARG1, r / react-01)
(w / worry-02, ARG0, i / i)
(w / worry-02, ARG1, t / thing)
(w2 / way, mod, c2 / calm)
(w4 / way, mod, m5 / moan-01)
(w4 / way, mod, p / perhaps)

Input(Some(Graph((contrast-01 :ARG2 (way :mod (moan-01 :polarity -) :mod perhaps) :ARG1 (find-01 :ARG1 (and :ARG0-of (make-02 :ARG0-of (cause-01 :ARG1 (know-01 :ARG1 (and :op (need-01 :ARG1 (anxious :topic thing :domain i) :polarity - :ARG0 i) :op (deal :mod (big :polarity -) :domain thing)) :ARG0 i)) :ARG1 (feel-01 :ARG1 (good :degree more) :ARG0 i :ARG2 thing)) :op (see-01 :ARG1 (react-01 :ARG2 (way :mod (calm :ARG1-of (react-01 :ARG1-of (recommend-01 :ARG2 i) :ARG0 i))) :ARG1 situation :ARG0 mum) :ARG0 i) :op (mention-01 :ARG2 (mum :poss i) :ARG1 (thing :ARG1-of (worry-02 :ARG0 i)) :ARG0 i)) :ARG0 i)),ArrayBuffer(Span(6,7,List(0),but,contrast-01,false), Span(5,6,List(1),way,way,false), Span(0,1,List(2),Perhaps,perhaps,false), Span(8,9,List(3),found,find-01,false), Span(21,22,List(4),and,and,false), Span(40,41,List(5),made,make-02,false), Span(46,47,List(6),because,cause-01,false), Span(48,49,List(7),knew,know-01,false), Span(55,56,List(8),and,and,false), Span(59,60,List(9),need,need-01,false), Span(62,63,List(10),anxious,anxious,false), Span(54,55,List(11),deal,deal,false), Span(53,54,List(12),big,big,false), Span(42,43,List(13),feel,feel-01,false), Span(43,44,List(14),better,good,false), Span(22,23,List(15),seeing,see-01,false), Span(24,25,List(16),react,react-01,false), Span(31,32,List(17),way,way,false), Span(30,31,List(18),calm,calm,false), Span(38,39,List(19),reacting,react-01,false), Span(35,36,List(20),should,recommend-01,false), Span(27,28,List(21),situation,situation,false), Span(10,11,List(22),mentioning,mention-01,false), Span(20,21,List(23),mum,mum,false), Span(12,13,List(24),thing,thing,false), Span(16,17,List(25),worried,worry-02,false), Span(7,8,List(26),I,i,false), Span(4,5,List(27),moany,moan-01,false)),Map(2 -> perhaps, 5 -> make-02, 27 -> moan-01, 12 -> big, 15 -> see-01, 8 -> and, 21 -> situation, 18 -> calm, 24 -> thing, 7 -> know-01, 17 -> way, 1 -> way, 23 -> mum, 26 -> i, 4 -> and, 11 -> deal, 14 -> good, 20 -> recommend-01, 6 -> cause-01, 9 -> need-01, 0 -> contrast-01, 22 -> mention-01, 16 -> react-01, 19 -> react-01, 10 -> anxious, 3 -> find-01, 25 -> worry-02, 13 -> feel-01),Map(m3 -> make-02, w -> worry-02, n -> need-01, r3 -> react-01, s2 -> situation, t -> thing, b -> big, k -> know-01, m2 -> mum, m5 -> moan-01, a3 -> anxious, s -> see-01, m -> mention-01, d -> deal, r2 -> recommend-01, g -> good, p -> perhaps, c3 -> cause-01, a -> and, w2 -> way, i -> i, r -> react-01, a2 -> and, c -> contrast-01, f2 -> feel-01, f -> find-01, c2 -> calm, w4 -> way))),[Ljava.lang.String;@32811494,Annotation([Ljava.lang.String;@4795ded0,[Ljava.lang.String;@53dacd14,[Ljava.lang.String;@14d14731),Annotation([Ljava.lang.String;@2eced48b,[Ljava.lang.String;@47c4ecdc,[Ledu.cmu.lti.nlp.amr.Dependency;@42f33b5d),Annotation([Ljava.lang.String;@5c8504fd,[Ljava.lang.String;@4b7e96a,[Ljava.lang.String;@6475472c),Annotation([Ljava.lang.String;@3f07b12c,[Ljava.lang.String;@4bd1f8dd,[Ledu.cmu.lti.nlp.amr.Entity;@7096b474))
AMR:
(a / and, op, m / mention-01)
(a / and, op, s / see-01)
(a / and, op, w / worry-02)
(a2 / and, op, m3 / make-02)
(a2 / and, op, n / need-01)
(c / contrast-01, ARG1, m3 / make-02)
(c3 / cause-01, ARG0, k / know-01)
(c3 / cause-01, ARG1, f2 / feel-01)
(d / deal, mod, b / big)
(f / find-01, ARG0, i / i)
(f / find-01, ARG1, a2 / and)
(f / find-01, ARG6, w4 / way)
(f2 / feel-01, ARG1, g / good)
(k / know-01, ARG1, d / deal)
(m / mention-01, ARG1, t / thing)
(m3 / make-02, ARG0, m / mention-01)
(m3 / make-02, ARG1, f2 / feel-01)
(m5 / moan-01, ARG1, w4 / way)
(n / need-01, ARG1, a3 / anxious)
(r / react-01, ARG1, s2 / situation)
(r2 / recommend-01, ARG1, r3 / react-01)
(r3 / react-01, ARG1, m3 / make-02)
(s / see-01, ARG1, r / react-01)
(s2 / situation, location, w2 / way)
(w / worry-02, ARG1, m2 / mum)
(w2 / way, mod, c2 / calm)
(w4 / way, time, p / perhaps)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.1
WARNING: makeIds can't find span Id: 0.0.1.2.1.0
WARNING: makeIds can't find span Id: 0.0.1.2.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 3,052,342 microseconds
Sentence: However, if it gets worse, then yes, go to the doctor's.

Oracle Span 1:  doctor => doctor
Oracle Span 2:  go => go-02
Oracle Span 3:  it => it
Oracle Span 4:  worse => worsen-01
Spans:
Span 13-14:  doctor => doctor
Span 10-11:  go => go-02
Span 3-4:  it => it
Span 5-6:  worse => worsen-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Oracle Span 13-14:  doctor => doctor
Oracle Span 10-11:  go => go-02
Oracle Span 3-4:  it => it
Oracle Span 5-6:  worse => worsen-01

Dependencies:
1	However	_	RB	RB	_	11	advmod	_	_
2	,	_	,	,	_	11	punct	_	_
3	if	_	IN	IN	_	6	mark	_	_
4	it	_	PRP	PRP	_	6	nsubj	_	_
5	gets	_	VBZ	VBZ	_	6	dep	_	_
6	worse	_	JJR	JJR	_	11	dep	_	_
7	,	_	,	,	_	11	punct	_	_
8	then	_	RB	RB	_	9	advmod	_	_
9	yes	_	RB	RB	_	11	ccomp	_	_
10	,	_	,	,	_	11	punct	_	_
11	go	_	VBP	VBP	_	0	root	_	_
12	to	_	TO	TO	_	11	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	doctor	_	NN	NN	_	12	pobj	_	_
15	's	_	POS	POS	_	14	possessive	_	_
16	.	_	.	.	_	11	punct	_	_

Oracle:
(g / go-02, ARG4, d / doctor)
(g / go-02, condition, w / worsen-01)
(w / worsen-01, ARG1, i / it)

Input(Some(Graph((contrast-01 :ARG2 (go-02 :condition (worsen-01 :ARG1 it) :ARG4 doctor :ARG0 you :mode imperative)),ArrayBuffer(Span(10,11,List(0),go,go-02,false), Span(3,4,List(1),it,it,false), Span(13,14,List(2),doctor,doctor,false), Span(5,6,List(3),worse,worsen-01,false)),Map(2 -> doctor, 1 -> it, 0 -> go-02, 3 -> worsen-01),Map(w -> worsen-01, d -> doctor, g -> go-02, i -> it))),[Ljava.lang.String;@3e14c16d,Annotation([Ljava.lang.String;@3c989952,[Ljava.lang.String;@784b990c,[Ljava.lang.String;@3d3ba765),Annotation([Ljava.lang.String;@25bc0606,[Ljava.lang.String;@5d1659ea,[Ledu.cmu.lti.nlp.amr.Dependency;@793138bd),Annotation([Ljava.lang.String;@1951b871,[Ljava.lang.String;@5c18016b,[Ljava.lang.String;@33aeca0b),Annotation([Ljava.lang.String;@43aaf813,[Ljava.lang.String;@57ac5227,[Ledu.cmu.lti.nlp.amr.Entity;@4ba302e0))
AMR:
(g / go-02, ARG1, w / worsen-01)
(g / go-02, ARG4, d / doctor)
(w / worsen-01, ARG1, i / it)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.3
Decoded in 58,628 microseconds
Sentence: I have a friend who suffers from severe anxiety that can prevent her from leaving the house and doing things because she's so worried about what can go wrong.

Oracle Span 1:  and => and
Oracle Span 2:  anxiety => anxiety
Oracle Span 3:  because => cause-01
Oracle Span 4:  can => possible
Oracle Span 5:  can => possible
Oracle Span 6:  doing => do-02
Oracle Span 7:  friend => friend
Oracle Span 8:  go => go-06
Oracle Span 9:  have => have-03
Oracle Span 10:  house => house
Oracle Span 11:  I => i
Oracle Span 12:  leaving => leave-01
Oracle Span 13:  prevent => prevent-01
Oracle Span 14:  severe => severe
Oracle Span 15:  so => so
Oracle Span 16:  suffers => suffer-01
Oracle Span 17:  things => thing
Oracle Span 18:  worried => worry-02
Oracle Span 19:  wrong => wrong
Spans:
Span 17-18:  and => and
Span 8-9:  anxiety => anxiety
Span 20-21:  because => cause-01
Span 10-11:  can => possible
Span 27-28:  can => possible
Span 18-19:  doing => do-02
Span 3-4:  friend => friend
Span 28-29:  go => go-06
Span 1-2:  have => have-03
Span 16-17:  house => house
Span 0-1:  I => i
Span 14-15:  leaving => leave-01
Span 11-12:  prevent => prevent-01
Span 7-8:  severe => severe
Span 23-24:  so => so
Span 5-6:  suffers => suffer-01
Span 19-20:  things => thing
Span 24-25:  worried => worry-02
Span 29-30:  wrong => wrong

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Oracle Span 17-18:  and => and
Oracle Span 8-9:  anxiety => anxiety
Oracle Span 20-21:  because => cause-01
Oracle Span 10-11:  can => possible
Oracle Span 27-28:  can => possible
Oracle Span 18-19:  doing => do-02
Oracle Span 3-4:  friend => friend
Oracle Span 28-29:  go => go-06
Oracle Span 1-2:  have => have-03
Oracle Span 16-17:  house => house
Oracle Span 0-1:  I => i
Oracle Span 14-15:  leaving => leave-01
Oracle Span 11-12:  prevent => prevent-01
Oracle Span 7-8:  severe => severe
Oracle Span 23-24:  so => so
Oracle Span 5-6:  suffers => suffer-01
Oracle Span 19-20:  things => thing
Oracle Span 24-25:  worried => worry-02
Oracle Span 29-30:  wrong => wrong

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	have	_	VBP	VBP	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	friend	_	NN	NN	_	2	dobj	_	_
5	who	_	WP	WP	_	6	nsubj	_	_
6	suffers	_	VBZ	VBZ	_	4	rcmod	_	_
7	from	_	IN	IN	_	6	prep	_	_
8	severe	_	JJ	JJ	_	9	amod	_	_
9	anxiety	_	NN	NN	_	7	pobj	_	_
10	that	_	WDT	WDT	_	12	nsubj	_	_
11	can	_	MD	MD	_	12	aux	_	_
12	prevent	_	VB	VB	_	9	rcmod	_	_
13	her	_	PRP	PRP	_	12	dobj	_	_
14	from	_	IN	IN	_	12	prep	_	_
15	leaving	_	VBG	VBG	_	14	pcomp	_	_
16	the	_	DT	DT	_	17	det	_	_
17	house	_	NN	NN	_	15	dobj	_	_
18	and	_	CC	CC	_	15	cc	_	_
19	doing	_	VBG	VBG	_	15	conj	_	_
20	things	_	NNS	NNS	_	19	dobj	_	_
21	because	_	IN	IN	_	25	mark	_	_
22	she	_	PRP	PRP	_	25	nsubj	_	_
23	's	_	VBZ	VBZ	_	25	cop	_	_
24	so	_	RB	RB	_	25	advmod	_	_
25	worried	_	JJ	JJ	_	2	advcl	_	_
26	about	_	IN	IN	_	25	prep	_	_
27	what	_	WP	WP	_	29	nsubj	_	_
28	can	_	MD	MD	_	29	aux	_	_
29	go	_	VB	VB	_	26	pcomp	_	_
30	wrong	_	JJ	JJ	_	29	acomp	_	_
31	.	_	.	.	_	2	punct	_	_

Oracle:
(a / anxiety, mod, s2 / severe)
(a2 / and, op, d / do-02)
(a2 / and, op, l / leave-01)
(c / cause-01, ARG0, w / worry-02)
(c / cause-01, ARG1, p / prevent-01)
(d / do-02, ARG0, f / friend)
(g / go-06, ARG1, t2 / thing)
(g / go-06, ARG2, w2 / wrong)
(g / go-06, mod, p3 / possible)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, f / friend)
(l / leave-01, ARG0, f / friend)
(l / leave-01, ARG1, h2 / house)
(p / prevent-01, ARG0, f / friend)
(p / prevent-01, ARG1, a2 / and)
(p / prevent-01, ARG3, a / anxiety)
(p / prevent-01, mod, p2 / possible)
(s / suffer-01, ARG0, f / friend)
(s / suffer-01, ARG1, a / anxiety)
(w / worry-02, ARG0, f / friend)
(w / worry-02, ARG1, t2 / thing)
(w / worry-02, degree, s3 / so)

Input(Some(Graph((have-03 :ARG1 (friend :ARG0-of (suffer-01 :ARG1 (anxiety :ARG3-of (prevent-01 :ARG1-of (cause-01 :ARG0 (worry-02 :degree so :ARG1 (thing :ARG1-of (go-06 :mod possible :ARG2 wrong)) :ARG0 friend)) :mod possible :ARG1 (and :op (do-02 :ARG1 thing :ARG0 friend) :op (leave-01 :ARG1 house :ARG0 friend)) :ARG0 friend) :mod severe))) :ARG0 i),ArrayBuffer(Span(1,2,List(0),have,have-03,false), Span(3,4,List(1),friend,friend,false), Span(5,6,List(2),suffers,suffer-01,false), Span(8,9,List(3),anxiety,anxiety,false), Span(11,12,List(4),prevent,prevent-01,false), Span(20,21,List(5),because,cause-01,false), Span(24,25,List(6),worried,worry-02,false), Span(23,24,List(7),so,so,false), Span(19,20,List(8),things,thing,false), Span(28,29,List(9),go,go-06,false), Span(10,11,List(10),can,possible,false), Span(29,30,List(11),wrong,wrong,false), Span(27,28,List(12),can,possible,false), Span(17,18,List(13),and,and,false), Span(18,19,List(14),doing,do-02,false), Span(14,15,List(15),leaving,leave-01,false), Span(16,17,List(16),house,house,false), Span(7,8,List(17),severe,severe,false), Span(0,1,List(18),I,i,false)),Map(2 -> suffer-01, 5 -> cause-01, 12 -> possible, 15 -> leave-01, 8 -> thing, 18 -> i, 7 -> so, 17 -> severe, 1 -> friend, 4 -> prevent-01, 11 -> wrong, 14 -> do-02, 6 -> worry-02, 9 -> go-06, 0 -> have-03, 16 -> house, 10 -> possible, 3 -> anxiety, 13 -> and),Map(w -> worry-02, h -> have-03, s2 -> severe, h2 -> house, p2 -> possible, s -> suffer-01, d -> do-02, g -> go-06, p -> prevent-01, a -> anxiety, t2 -> thing, w2 -> wrong, i -> i, a2 -> and, s3 -> so, c -> cause-01, l -> leave-01, f -> friend, p3 -> possible))),[Ljava.lang.String;@e98770d,Annotation([Ljava.lang.String;@1ae67cad,[Ljava.lang.String;@2f6e28bc,[Ljava.lang.String;@7c098bb3),Annotation([Ljava.lang.String;@31e4bb20,[Ljava.lang.String;@18cebaa5,[Ledu.cmu.lti.nlp.amr.Dependency;@463b4ac8),Annotation([Ljava.lang.String;@765f05af,[Ljava.lang.String;@62f68dff,[Ljava.lang.String;@f001896),Annotation([Ljava.lang.String;@13f17eb4,[Ljava.lang.String;@1d0d6318,[Ledu.cmu.lti.nlp.amr.Entity;@4bc28c33))
AMR:
(a / anxiety, mod, s2 / severe)
(a2 / and, op, d / do-02)
(a2 / and, op, l / leave-01)
(c / cause-01, ARG1, w / worry-02)
(d / do-02, ARG1, t2 / thing)
(g / go-06, ARG1, w2 / wrong)
(h / have-03, ARG0, i / i)
(h / have-03, ARG1, f / friend)
(h / have-03, time, c / cause-01)
(l / leave-01, ARG1, h2 / house)
(p / prevent-01, ARG0, a / anxiety)
(p / prevent-01, ARG1, l / leave-01)
(p2 / possible, domain, g / go-06)
(p3 / possible, domain, p / prevent-01)
(s / suffer-01, ARG0, f / friend)
(s / suffer-01, ARG1, a / anxiety)
(w / worry-02, ARG1, g / go-06)
(w / worry-02, manner, s3 / so)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.2
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 1,160,703 microseconds
Sentence: The doctors gave her medication and it's made her much better.

Oracle Span 1:  and => and
Oracle Span 2:  better => good
Oracle Span 3:  doctors => doctor
Oracle Span 4:  gave => give-01
Oracle Span 5:  made => make-02
Oracle Span 6:  medication => medication
Oracle Span 7:  much => much
Spans:
Span 5-6:  and => and
Span 11-12:  better => good
Span 1-2:  doctors => doctor
Span 2-3:  gave => give-01
Span 8-9:  made => make-02
Span 4-5:  medication => medication
Span 10-11:  much => much

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 5-6:  and => and
Oracle Span 11-12:  better => good
Oracle Span 1-2:  doctors => doctor
Oracle Span 2-3:  gave => give-01
Oracle Span 8-9:  made => make-02
Oracle Span 4-5:  medication => medication
Oracle Span 10-11:  much => much

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	doctors	_	NNS	NNS	_	3	nsubj	_	_
3	gave	_	VBD	VBD	_	0	root	_	_
4	her	_	PRP$	PRP$	_	5	poss	_	_
5	medication	_	NN	NN	_	3	dobj	_	_
6	and	_	CC	CC	_	3	cc	_	_
7	it	_	PRP	PRP	_	9	nsubjpass	_	_
8	's	_	VBZ	VBZ	_	9	auxpass	_	_
9	made	_	VBN	VBN	_	3	conj	_	_
10	her	_	PRP	PRP	_	12	nsubj	_	_
11	much	_	RB	RB	_	12	advmod	_	_
12	better	_	JJR	JJR	_	9	xcomp	_	_
13	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, g / give-01)
(a / and, op, m / make-02)
(g / give-01, ARG0, d / doctor)
(g / give-01, ARG1, m2 / medication)
(m / make-02, ARG0, m2 / medication)
(m / make-02, ARG1, g2 / good)

Input(Some(Graph((and :op (make-02 :ARG1 (good :degree (more :quant much) :domain she) :ARG0 medication) :op (give-01 :ARG2 she :ARG1 medication :ARG0 doctor)),ArrayBuffer(Span(5,6,List(0),and,and,false), Span(8,9,List(1),made,make-02,false), Span(11,12,List(2),better,good,false), Span(10,11,List(3),much,much,false), Span(2,3,List(4),gave,give-01,false), Span(4,5,List(5),medication,medication,false), Span(1,2,List(6),doctors,doctor,false)),Map(2 -> good, 5 -> medication, 1 -> make-02, 4 -> give-01, 6 -> doctor, 0 -> and, 3 -> much),Map(m2 -> medication, d -> doctor, m -> make-02, g -> give-01, g2 -> good, a -> and, m4 -> much))),[Ljava.lang.String;@4409e975,Annotation([Ljava.lang.String;@5c153b9e,[Ljava.lang.String;@2a7686a7,[Ljava.lang.String;@758a34ce),Annotation([Ljava.lang.String;@7ec3394b,[Ljava.lang.String;@bff34c6,[Ledu.cmu.lti.nlp.amr.Dependency;@1522d8a0),Annotation([Ljava.lang.String;@312ab28e,[Ljava.lang.String;@5644dc81,[Ljava.lang.String;@246f8b8b),Annotation([Ljava.lang.String;@278bb07e,[Ljava.lang.String;@4351c8c3,[Ledu.cmu.lti.nlp.amr.Entity;@3381b4fc))
AMR:
(a / and, op, g / give-01)
(a / and, op, m / make-02)
(g / give-01, ARG0, d / doctor)
(g / give-01, ARG1, m2 / medication)
(m / make-02, ARG1, g2 / good)
(m / make-02, ARG6, m4 / much)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 151,423 microseconds
