Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: Xinhua News Agency , Beijing , September 1st , by reporter Guojun Yang

Oracle Span 1:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 2:  Guojun Yang => (person :name (name :op "Yang" :op "Guojun"))
Oracle Span 3:  reporter => report-01
Oracle Span 4:  September => 9
Oracle Span 5:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Guojun" :op "Yang"))
NER Entity: (country :name (name :op "Beijing"))
Registering annotator regexner2 with class edu.stanford.nlp.pipeline.TokensRegexNERAnnotator
Registering annotator regexner1 with class edu.stanford.nlp.pipeline.TokensRegexNERAnnotator
Adding annotator tokenize
TokenizerAnnotator: No tokenizer type provided. Defaulting to PTBTokenizer.
Adding annotator ssplit
edu.stanford.nlp.curator.CuratorAnnotatorImplementations:
Adding annotator pos
Reading POS tagger model from edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger ... done [0.8 sec].
Adding annotator lemma
Adding annotator ner
Loading classifier from edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz ... done [4.7 sec].
Loading classifier from edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz ... done [3.1 sec].
Loading classifier from edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz ... done [3.2 sec].
sutime.binder.1.
Initializing JollyDayHoliday for sutime with classpath:edu/stanford/nlp/models/sutime/jollyday/Holidays_sutime.xml
Reading TokensRegex rules from edu/stanford/nlp/models/sutime/defs.sutime.txt
Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.sutime.txt
Feb 17, 2015 12:45:29 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules
INFO: Ignoring inactive rule: null
Feb 17, 2015 12:45:29 PM edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor appendRules
INFO: Ignoring inactive rule: temporal-composite-8:ranges
Reading TokensRegex rules from edu/stanford/nlp/models/sutime/english.holidays.sutime.txt
Adding annotator regexner1
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{Deist RELIGION [ORGANIZATION, PERSON, MISC] 1.0}, new=Entry{Deist RELIGION [ORGANIZATION, PERSON, MISC] 3.0}
TokensRegexNERAnnotator regexner1: Entry has multiple types: murder	CRIMINAL_CHARGE,CAUSE_OF_DEATH	11.  Taking type to be CRIMINAL_CHARGE
TokensRegexNERAnnotator regexner1: Entry has multiple types: New York	CITY,STATE_OR_PROVINCE	LOCATION	2.  Taking type to be CITY
TokensRegexNERAnnotator regexner1: Entry has multiple types: England	COUNTRY,STATE_OR_PROVINCE	LOCATION	1.  Taking type to be COUNTRY
TokensRegexNERAnnotator regexner1: Entry has multiple types: Scotland	COUNTRY,STATE_OR_PROVINCE	LOCATION	1.  Taking type to be COUNTRY
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{SANDER TITLE [1] 0.0}, new=Entry{sander CITY [LOCATION] 1.0}
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{WINDER TITLE [1] 0.0}, new=Entry{winder CITY [LOCATION] 1.0}
TokensRegexNERAnnotator regexner1: Replace duplicate entry (higher priority): old=Entry{CARVER TITLE [1] 0.0}, new=Entry{carver CITY [LOCATION] 1.0}
TokensRegexNERAnnotator regexner1: Read 56933 unique entries out of 73409 from data/kbp_regexner_mapping_nocase.tab, 0 TokensRegex patterns.
Adding annotator regexner2
TokensRegexNERAnnotator regexner2: Read 478 unique entries out of 481 from data/kbp_regexner_mapping.tab, 0 TokensRegex patterns.
Adding annotator parse
Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ...done [0.8 sec].
Adding annotator dcoref
Adding annotator srl
Adding annotator nom
Adding annotator prep
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Spans:
Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Span 10-11:  reporter => (person :ARG0-of report-01)
Span 0-3:  Xinhua News Agency => (publication :name (name :op "News" :op "Agency" :op "Xinhua"))
Span 0-7:  Xinhua News Agency , Beijing , September => (date-entity :month 9 :day 1)
Span 12-13:  Yang => "Yang"

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 11-13:  Guojun Yang => (person :name (name :op "Yang" :op "Guojun"))
Oracle Span 10-11:  reporter => report-01
Oracle Span 6-7:  September => 9
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Beijing	_	NNP	NNP	_	7	nn	_	_
6	,	_	,	,	_	7	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporter	_	NN	NN	_	13	nn	_	_
12	Guojun	_	NNP	NNP	_	13	nn	_	_
13	Yang	_	NNP	NNP	_	10	pobj	_	_

Oracle:
(c2 / city, name, n3 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Guojun")
(n2 / name, op, "Yang")
(n3 / name, op, "Beijing")
(p / person, name, n2 / name)
(p2 / publication, name, n / name)
(r / report-01, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(0,7,List(2, 1, 0),Xinhua News Agency , Beijing , September,(date-entity :month 9 :day 1),false), Span(10,11,List(4, 3),reporter,(person :ARG0-of report-01),false), Span(4,5,List(7, 6, 5),Beijing,(city :name (name :op "Beijing")),false), Span(0,3,List(12, 11, 10, 9, 8),Xinhua News Agency,(publication :name (name :op "News" :op "Agency" :op "Xinhua")),false), Span(12,13,List(13),Yang,"Yang",false)),Map(2 -> 1, 5 -> city, 12 -> "Xinhua", 8 -> publication, 7 -> "Beijing", 1 -> 9, 4 -> report-01, 11 -> "Agency", 6 -> name, 0 -> date-entity, 9 -> name, 3 -> person, 10 -> "News", 13 -> "Yang"),Map(n -> name, Y -> "Yang", p2 -> publication, d -> date-entity, p -> person, 1 -> 1, r -> report-01, c -> city, 9 -> 9, n2 -> name))),[Ljava.lang.String;@786e60e7,Annotation([Ljava.lang.String;@3aa66a26,[Ljava.lang.String;@25dacaa3,[Ljava.lang.String;@592800d6),Annotation([Ljava.lang.String;@52ca3a4c,[Ljava.lang.String;@5bb48d69,[Ledu.cmu.lti.nlp.amr.Dependency;@2848db6e),Annotation([Ljava.lang.String;@317f4001,[Ljava.lang.String;@32e40438,[Ljava.lang.String;@4dc408c8),Annotation([Ljava.lang.String;@233939b5,[Ljava.lang.String;@688d0a9b,[Ledu.cmu.lti.nlp.amr.Entity;@7ada1676))
AMR:
(Y / "Yang", location, c / city)
(c / city, name, n / name)
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 9 / 9)
(d / date-entity, poss, Y / "Yang")
(n / name, op, "Beijing")
(n2 / name, op, "Agency")
(n2 / name, op, "News")
(n2 / name, op, "Xinhua")
(p2 / publication, name, n2 / name)
(p2 / publication, poss, Y / "Yang")
(r / report-01, ARG0, p / person)
(r / report-01, ARG1, Y / "Yang")

Decoded in 30,954,987 microseconds
Sentence: When meeting with Chavalit Yoncayu , vice-premier and concurrent Minister of Domestic Affairs of Thailand , at the Diaoyutai State Guesthouse today , Huaqing Liu , vice-chairman of the Central Military Commission said that China placed a great deal of importance in developing friendship with the government , people and Armed Forces of Thailand , especially the economic and trade cooperation between the two countries .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  Armed Forces => (military :name (name :op "Forces" :op "Armed"))
Oracle Span 5:  Central Military Commission => (government-organization :name (name :op "Commission" :op "Military" :op "Central"))
Oracle Span 6:  chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 7:  Chavalit Yoncayu => (person :name (name :op "Yoncayu" :op "Chavalit"))
Oracle Span 8:  China => (country :name (name :op "China"))
Oracle Span 9:  concurrent => concurrent
Oracle Span 10:  cooperation => cooperate-01
Oracle Span 11:  countries => country
Oracle Span 12:  deal => deal
Oracle Span 13:  developing => develop-02
Oracle Span 14:  Diaoyutai State Guesthouse => (hotel :name (name :op "Guesthouse" :op "State" :op "Diaoyutai"))
Oracle Span 15:  Domestic Affairs => (name :op "Affairs" :op "Domestic")
Oracle Span 16:  economic => economy
Oracle Span 17:  especially => especially
Oracle Span 18:  friendship => friendship
Oracle Span 19:  government => government-organization
Oracle Span 20:  great => great
Oracle Span 21:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 22:  importance => importance
Oracle Span 23:  meeting => meet-03
Oracle Span 24:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 25:  placed => place-01
Oracle Span 26:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 27:  said => say-01
Oracle Span 28:  Thailand => (name :op "Thailand")
Oracle Span 29:  today => today
Oracle Span 30:  trade => trade-01
Oracle Span 31:  vice => vice
Oracle Span 32:  vice => vice
NER Entity: (person :name (name :op "Chavalit" :op "Yoncayu"))
NER Entity: (person :name (name :op "Huaqing" :op "Liu"))
NER Entity: (organization :name (name :op "Domestic" :op "Affairs" :op "of" :op "Thailand"))
NER Entity: (organization :name (name :op "Armed" :op "Forces" :op "of" :op "Thailand"))
Spans:
Span 12-13:  Affairs => affair
Span 58-59:  and => and
Span 7-8:  and => and
Span 49-50:  and => and
Span 50-51:  Armed => arm
Span 29-32:  Central Military Commission => (government-organization :name (name :op "Commission" :op "Military" :op "Central"))
Span 3-5:  Chavalit Yoncayu => (person :name (name :op "Chavalit" :op "Yoncayu"))
Span 34-35:  China => (country :name (name :op "China"))
Span 8-9:  concurrent => concurrent
Span 60-61:  cooperation => cooperate-01
Span 64-65:  countries => country
Span 38-39:  deal => deal-01
Span 42-43:  developing => develop-02
Span 11-12:  Domestic => domestic
Span 57-58:  economic => economy
Span 55-56:  especially => especially
Span 43-44:  friendship => friendship
Span 46-47:  government => (government-organization :ARG0-of govern-01)
Span 37-38:  great => great
Span 23-25:  Huaqing Liu => (person :name (name :op "Huaqing" :op "Liu"))
Span 40-41:  importance => important
Span 1-2:  meeting => meet-01
Span 9-10:  Minister => (have-org-role-91 :ARG2 minister)
Span 48-49:  people => person
Span 35-36:  placed => place-01
Span 32-33:  said => say-01
Span 19-20:  State => (thing :ARG1-of state-01)
Span 14-15:  Thailand => (country :name (name :op "Thailand"))
Span 53-54:  Thailand => (country :name (name :op "Thailand"))
Span 59-60:  trade => trade-01
Span 0-1:  When => 1
Span 0-1:  When => multi-sentence
Span 0-22:  When meeting with Chavalit Yoncayu , vice-premier and concurrent Minister of Domestic Affairs of Thailand , at the Diaoyutai State Guesthouse today => (date-entity :time today)

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 53-54:  and => and
Oracle Span 62-63:  and => and
Oracle Span 54-56:  Armed Forces => (military :name (name :op "Forces" :op "Armed"))
Oracle Span 33-36:  Central Military Commission => (government-organization :name (name :op "Commission" :op "Military" :op "Central"))
Oracle Span 30-31:  chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 3-5:  Chavalit Yoncayu => (person :name (name :op "Yoncayu" :op "Chavalit"))
Oracle Span 38-39:  China => (country :name (name :op "China"))
Oracle Span 10-11:  concurrent => concurrent
Oracle Span 64-65:  cooperation => cooperate-01
Oracle Span 68-69:  countries => country
Oracle Span 42-43:  deal => deal
Oracle Span 46-47:  developing => develop-02
Oracle Span 20-23:  Diaoyutai State Guesthouse => (hotel :name (name :op "Guesthouse" :op "State" :op "Diaoyutai"))
Oracle Span 13-15:  Domestic Affairs => (name :op "Affairs" :op "Domestic")
Oracle Span 61-62:  economic => economy
Oracle Span 59-60:  especially => especially
Oracle Span 47-48:  friendship => friendship
Oracle Span 50-51:  government => government-organization
Oracle Span 41-42:  great => great
Oracle Span 25-27:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 44-45:  importance => importance
Oracle Span 1-2:  meeting => meet-03
Oracle Span 11-12:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 39-40:  placed => place-01
Oracle Span 8-9:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 36-37:  said => say-01
Oracle Span 16-17:  Thailand => (name :op "Thailand")
Oracle Span 23-24:  today => today
Oracle Span 63-64:  trade => trade-01
Oracle Span 6-7:  vice => vice
Oracle Span 28-29:  vice => vice

Dependencies:
1	When	_	WRB	WRB	_	2	advmod	_	_
2	meeting	_	VBG	VBG	_	33	advcl	_	_
3	with	_	IN	IN	_	2	prep	_	_
4	Chavalit	_	NNP	NNP	_	5	nn	_	_
5	Yoncayu	_	NNP	NNP	_	3	pobj	_	_
6	,	_	,	,	_	5	punct	_	_
7	vice-premier	_	JJ	JJ	_	10	amod	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	concurrent	_	JJ	JJ	_	7	conj	_	_
10	Minister	_	NNP	NNP	_	5	appos	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	Domestic	_	JJ	JJ	_	13	amod	_	_
13	Affairs	_	NNPS	NNPS	_	11	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	Thailand	_	NNP	NNP	_	14	pobj	_	_
16	,	_	,	,	_	5	punct	_	_
17	at	_	IN	IN	_	5	prep	_	_
18	the	_	DT	DT	_	21	det	_	_
19	Diaoyutai	_	NNP	NNP	_	21	nn	_	_
20	State	_	NNP	NNP	_	21	nn	_	_
21	Guesthouse	_	NNP	NNP	_	17	pobj	_	_
22	today	_	NN	NN	_	2	tmod	_	_
23	,	_	,	,	_	33	punct	_	_
24	Huaqing	_	NNP	NNP	_	25	nn	_	_
25	Liu	_	NNP	NNP	_	33	nsubj	_	_
26	,	_	,	,	_	25	punct	_	_
27	vice-chairman	_	NN	NN	_	25	appos	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	32	det	_	_
30	Central	_	NNP	NNP	_	32	nn	_	_
31	Military	_	NNP	NNP	_	32	nn	_	_
32	Commission	_	NNP	NNP	_	28	pobj	_	_
33	said	_	VBD	VBD	_	0	root	_	_
34	that	_	IN	IN	_	36	mark	_	_
35	China	_	NNP	NNP	_	36	nsubj	_	_
36	placed	_	VBD	VBD	_	33	ccomp	_	_
37	a	_	DT	DT	_	39	det	_	_
38	great	_	JJ	JJ	_	39	amod	_	_
39	deal	_	NN	NN	_	36	dobj	_	_
40	of	_	IN	IN	_	39	prep	_	_
41	importance	_	NN	NN	_	40	pobj	_	_
42	in	_	IN	IN	_	36	prep	_	_
43	developing	_	VBG	VBG	_	44	amod	_	_
44	friendship	_	NN	NN	_	42	pobj	_	_
45	with	_	IN	IN	_	44	prep	_	_
46	the	_	DT	DT	_	47	det	_	_
47	government	_	NN	NN	_	45	pobj	_	_
48	,	_	,	,	_	47	punct	_	_
49	people	_	NNS	NNS	_	47	conj	_	_
50	and	_	CC	CC	_	47	cc	_	_
51	Armed	_	NNP	NNP	_	52	nn	_	_
52	Forces	_	NNP	NNP	_	47	conj	_	_
53	of	_	IN	IN	_	44	prep	_	_
54	Thailand	_	NNP	NNP	_	53	pobj	_	_
55	,	_	,	,	_	44	punct	_	_
56	especially	_	RB	RB	_	58	advmod	_	_
57	the	_	DT	DT	_	58	det	_	_
58	economic	_	JJ	JJ	_	44	conj	_	_
59	and	_	CC	CC	_	44	cc	_	_
60	trade	_	NN	NN	_	61	nn	_	_
61	cooperation	_	NN	NN	_	44	conj	_	_
62	between	_	IN	IN	_	61	prep	_	_
63	the	_	DT	DT	_	65	det	_	_
64	two	_	CD	CD	_	65	num	_	_
65	countries	_	NNS	NNS	_	62	pobj	_	_
66	.	_	.	.	_	33	punct	_	_

Oracle:
(a / and, op, c9 / cooperate-01)
(a / and, op, f2 / friendship)
(a2 / and, op, m / military)
(a3 / and, op, e / economy)
(a3 / and, op, t2 / trade-01)
(c / chairman, mod, v / vice)
(c7 / country, name, n3 / name)
(c8 / country, name, n4 / name)
(c9 / cooperate-01, ARG0, c7 / country)
(c9 / cooperate-01, ARG1, c8 / country)
(c9 / cooperate-01, ARG2, a3 / and)
(c9 / cooperate-01, mod, e2 / especially)
(d3 / deal, mod, g2 / great)
(d4 / develop-02, ARG0, c7 / country)
(d4 / develop-02, ARG1, a / and)
(f2 / friendship, prep-with, a2 / and)
(g / government-organization, name, n2 / name)
(g5 / government-organization, name, n7 / name)
(g5 / government-organization, poss, c8 / country)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, c / chairman)
(h2 / hotel, name, n8 / name)
(h3 / have-org-role-91, ARG0, p6 / person)
(h3 / have-org-role-91, ARG2, p7 / premier)
(h4 / have-org-role-91, ARG0, p6 / person)
(h4 / have-org-role-91, ARG1, g5 / government-organization)
(h4 / have-org-role-91, ARG2, m3 / minister)
(i / importance, quant, d3 / deal)
(m / military, mod, c8 / country)
(m / military, name, n5 / name)
(m2 / meet-03, ARG0, p3 / person)
(m2 / meet-03, ARG1, p6 / person)
(m2 / meet-03, location, h2 / hotel)
(m2 / meet-03, time, t4 / today)
(m3 / minister, mod, c2 / concurrent)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "Central")
(n2 / name, op, "Commission")
(n2 / name, op, "Military")
(n3 / name, op, "China")
(n4 / name, op, "Thailand")
(n5 / name, op, "Armed")
(n5 / name, op, "Forces")
(n6 / name, op, "Chavalit")
(n6 / name, op, "Yoncayu")
(n7 / name, op, "Affairs")
(n7 / name, op, "Domestic")
(n8 / name, op, "Diaoyutai")
(n8 / name, op, "Guesthouse")
(n8 / name, op, "State")
(p3 / person, name, n / name)
(p4 / place-01, ARG0, c7 / country)
(p4 / place-01, ARG1, i / importance)
(p4 / place-01, ARG2, d4 / develop-02)
(p6 / person, name, n6 / name)
(p7 / premier, mod, v2 / vice)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, p4 / place-01)
(s / say-01, time, m2 / meet-03)

Input(Some(Graph(null,ArrayBuffer(Span(23,25,List(3, 2, 1, 0),Huaqing Liu,(person :name (name :op "Huaqing" :op "Liu")),false), Span(55,56,List(4),especially,especially,false), Span(58,59,List(5),and,and,false), Span(64,65,List(6),countries,country,false), Span(0,22,List(8, 7),When meeting with Chavalit Yoncayu , vice-premier and concurrent Minister of Domestic Affairs of Thailand , at the Diaoyutai State Guesthouse today,(date-entity :time today),false), Span(46,47,List(10, 9),government,(government-organization :ARG0-of govern-01),false), Span(3,5,List(14, 13, 12, 11),Chavalit Yoncayu,(person :name (name :op "Chavalit" :op "Yoncayu")),false), Span(57,58,List(15),economic,economy,false), Span(40,41,List(16),importance,important,false), Span(48,49,List(17),people,person,false), Span(29,32,List(22, 21, 20, 19, 18),Central Military Commission,(government-organization :name (name :op "Commission" :op "Military" :op "Central")),false), Span(12,13,List(23),Affairs,affair,false), Span(38,39,List(24),deal,deal-01,false), Span(43,44,List(25),friendship,friendship,false), Span(14,15,List(28, 27, 26),Thailand,(country :name (name :op "Thailand")),false), Span(37,38,List(29),great,great,false), Span(42,43,List(30),developing,develop-02,false), Span(11,12,List(31),Domestic,domestic,false), Span(53,54,List(34, 33, 32),Thailand,(country :name (name :op "Thailand")),false), Span(59,60,List(35),trade,trade-01,false), Span(9,10,List(37, 36),Minister,(have-org-role-91 :ARG2 minister),false), Span(34,35,List(40, 39, 38),China,(country :name (name :op "China")),false), Span(0,1,List(41),When,1,false), Span(8,9,List(42),concurrent,concurrent,false), Span(35,36,List(43),placed,place-01,false), Span(32,33,List(44),said,say-01,false), Span(60,61,List(45),cooperation,cooperate-01,false), Span(1,2,List(46),meeting,meet-01,false), Span(7,8,List(47),and,and,false), Span(19,20,List(49, 48),State,(thing :ARG1-of state-01),false), Span(50,51,List(50),Armed,arm,false), Span(0,1,List(51),When,multi-sentence,false), Span(49,50,List(52),and,and,false)),Map(30 -> develop-02, 39 -> name, 45 -> cooperate-01, 51 -> multi-sentence, 2 -> "Huaqing", 5 -> and, 48 -> thing, 33 -> name, 27 -> name, 12 -> name, 8 -> today, 15 -> economy, 42 -> concurrent, 36 -> have-org-role-91, 21 -> "Military", 18 -> government-organization, 24 -> deal-01, 35 -> trade-01, 41 -> 1, 7 -> date-entity, 17 -> person, 1 -> name, 50 -> arm, 44 -> say-01, 23 -> affair, 38 -> country, 47 -> and, 4 -> especially, 26 -> country, 11 -> person, 32 -> country, 14 -> "Yoncayu", 20 -> "Commission", 29 -> great, 46 -> meet-01, 52 -> and, 34 -> "Thailand", 6 -> country, 28 -> "Thailand", 40 -> "China", 49 -> state-01, 0 -> person, 9 -> government-organization, 43 -> place-01, 22 -> "Central", 16 -> important, 37 -> minister, 19 -> name, 3 -> "Liu", 10 -> govern-01, 25 -> friendship, 31 -> domestic, 13 -> "Chavalit"),Map(m3 -> multi-sentence, e -> especially, n -> name, h -> have-org-role-91, g3 -> government-organization, s2 -> state-01, t -> today, m2 -> meet-01, d3 -> develop-02, e2 -> economy, p2 -> person, a3 -> and, c4 -> country, n4 -> name, s -> say-01, m -> minister, d -> date-entity, t3 -> thing, 1 -> 1, g2 -> govern-01, g -> government-organization, p -> person, a -> and, n3 -> name, c3 -> country, p4 -> place-01, a5 -> and, n6 -> name, d2 -> deal-01, c6 -> cooperate-01, t2 -> trade-01, i -> important, a2 -> affair, c -> country, d4 -> domestic, f -> friendship, p3 -> person, n2 -> name, c2 -> country, g4 -> great, a4 -> arm, c5 -> concurrent, n5 -> name))),[Ljava.lang.String;@3b61453a,Annotation([Ljava.lang.String;@10c652ed,[Ljava.lang.String;@12471acf,[Ljava.lang.String;@649480e5),Annotation([Ljava.lang.String;@55ed41d8,[Ljava.lang.String;@779e30b2,[Ledu.cmu.lti.nlp.amr.Dependency;@5da5ddec),Annotation([Ljava.lang.String;@1d76ed15,[Ljava.lang.String;@222a8ce2,[Ljava.lang.String;@243723b5),Annotation([Ljava.lang.String;@570ec062,[Ljava.lang.String;@7dba81d3,[Ledu.cmu.lti.nlp.amr.Entity;@b015f1a))
AMR:
(a / and, op, c / country)
(a2 / affair, calendar, c2 / country)
(a5 / and, op, p3 / person)
(c2 / country, name, n4 / name)
(c3 / country, name, n5 / name)
(c3 / country, op, a4 / arm)
(c3 / country, op, e / especially)
(c4 / country, name, n6 / name)
(c5 / concurrent, mod, a3 / and)
(c6 / cooperate-01, ARG0, a5 / and)
(d / date-entity, time, t / today)
(d2 / deal-01, ARG1, c / country)
(d3 / develop-02, ARG0, d2 / deal-01)
(d3 / develop-02, ARG1, c4 / country)
(d3 / develop-02, ARG6, i / important)
(d4 / domestic, mod, c2 / country)
(e / especially, location, e2 / economy)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c4 / country)
(g3 / government-organization, name, n3 / name)
(g4 / great, op, d3 / develop-02)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, m / minister)
(h / have-org-role-91, ARG6, c5 / concurrent)
(i / important, calendar, f / friendship)
(m2 / meet-01, ARG0, p2 / person)
(m2 / meet-01, ARG1, d / date-entity)
(m2 / meet-01, manner, 1 / 1)
(m2 / meet-01, manner, m3 / multi-sentence)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "Chavalit")
(n2 / name, op, "Yoncayu")
(n3 / name, op, "Central")
(n3 / name, op, "Commission")
(n3 / name, op, "Military")
(n4 / name, op, "Thailand")
(n5 / name, op, "Thailand")
(n6 / name, op, "China")
(p / person, name, n / name)
(p2 / person, mod, h / have-org-role-91)
(p2 / person, name, n2 / name)
(p3 / person, op, a4 / arm)
(p4 / place-01, ARG0, c4 / country)
(p4 / place-01, ARG1, g3 / government-organization)
(s / say-01, ARG1, a3 / and)
(s / say-01, ARG6, g3 / government-organization)
(s2 / state-01, ARG0, p2 / person)
(s2 / state-01, ARG1, t3 / thing)
(t2 / trade-01, ARG1, c6 / cooperate-01)
(t2 / trade-01, ARG6, a / and)

Decoded in 35,432,664 microseconds
Sentence: Huaqing Liu said that , the people of China and Thailand have traditional friendship and the relationship between the two countries was also very friendly too .

Oracle Span 1:  also => also
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  between => between
Oracle Span 5:  China => (person :mod (country :name (name :op "China")))
Oracle Span 6:  countries => (person :mod country)
Oracle Span 7:  friendly => friendly-41
Oracle Span 8:  friendship => friendship
Oracle Span 9:  have => have-03
Oracle Span 10:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 11:  relationship => relationship
Oracle Span 12:  said => say-01
Oracle Span 13:  Thailand => (name :op "Thailand")
Oracle Span 14:  too => too
Oracle Span 15:  traditional => tradition
Oracle Span 16:  very => very
NER Entity: (person :name (name :op "Huaqing" :op "Liu"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Thailand"))
Spans:
Span 22-23:  also => also
Span 9-10:  and => and
Span 14-15:  and => and
Span 8-9:  China => (country :name (name :op "China"))
Span 20-21:  countries => country
Span 24-25:  friendly => friendly
Span 13-14:  friendship => friendship
Span 11-12:  have => have-03
Span 0-1:  Huaqing => 1
Span 0-2:  Huaqing Liu => (person :name (name :op "Huaqing" :op "Liu"))
Span 6-7:  people => people
Span 16-17:  relationship => relationship
Span 2-3:  said => say-01
Span 10-11:  Thailand => (country :name (name :op "Thailand"))
Span 25-26:  too => too
Span 12-13:  traditional => traditional
Span 23-24:  very => very

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 22-23:  also => also
Oracle Span 9-10:  and => and
Oracle Span 14-15:  and => and
Oracle Span 17-18:  between => between
Oracle Span 8-9:  China => (person :mod (country :name (name :op "China")))
Oracle Span 20-21:  countries => (person :mod country)
Oracle Span 24-25:  friendly => friendly-41
Oracle Span 13-14:  friendship => friendship
Oracle Span 11-12:  have => have-03
Oracle Span 0-2:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 16-17:  relationship => relationship
Oracle Span 2-3:  said => say-01
Oracle Span 10-11:  Thailand => (name :op "Thailand")
Oracle Span 25-26:  too => too
Oracle Span 12-13:  traditional => tradition
Oracle Span 23-24:  very => very

Dependencies:
1	Huaqing	_	NNP	NNP	_	2	nn	_	_
2	Liu	_	NNP	NNP	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	12	mark	_	_
5	,	_	,	,	_	12	punct	_	_
6	the	_	DT	DT	_	7	det	_	_
7	people	_	NNS	NNS	_	12	nsubj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	China	_	NNP	NNP	_	8	pobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	Thailand	_	NNP	NNP	_	9	conj	_	_
12	have	_	VBP	VBP	_	3	ccomp	_	_
13	traditional	_	JJ	JJ	_	14	amod	_	_
14	friendship	_	NN	NN	_	12	dobj	_	_
15	and	_	CC	CC	_	12	cc	_	_
16	the	_	DT	DT	_	17	det	_	_
17	relationship	_	NN	NN	_	25	nsubj	_	_
18	between	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	21	det	_	_
20	two	_	CD	CD	_	21	num	_	_
21	countries	_	NNS	NNS	_	18	pobj	_	_
22	was	_	VBD	VBD	_	25	cop	_	_
23	also	_	RB	RB	_	25	advmod	_	_
24	very	_	RB	RB	_	25	advmod	_	_
25	friendly	_	JJ	JJ	_	12	conj	_	_
26	too	_	RB	RB	_	25	advmod	_	_
27	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, f2 / friendly-41)
(a / and, op, h2 / have-03)
(a4 / and, op, p / person)
(a4 / and, op, p3 / person)
(b / between, op, c4 / country)
(b / between, op, c5 / country)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(f / friendship, mod, t2 / tradition)
(f2 / friendly-41, ARG1, r / relationship)
(f2 / friendly-41, degree, v / very)
(f2 / friendly-41, mod, a2 / also)
(f2 / friendly-41, mod, t / too)
(h2 / have-03, ARG0, a4 / and)
(h2 / have-03, ARG1, f / friendship)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "China")
(n3 / name, op, "Thailand")
(p / person, mod, c5 / country)
(p2 / person, name, n / name)
(p3 / person, mod, c4 / country)
(r / relationship, mod, b / between)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(23,24,List(3),very,very,false), Span(10,11,List(6, 5, 4),Thailand,(country :name (name :op "Thailand")),false), Span(13,14,List(7),friendship,friendship,false), Span(6,7,List(8),people,people,false), Span(9,10,List(9),and,and,false), Span(11,12,List(10),have,have-03,false), Span(24,25,List(11),friendly,friendly,false), Span(0,1,List(12),Huaqing,1,false), Span(14,15,List(13),and,and,false), Span(16,17,List(14),relationship,relationship,false), Span(12,13,List(15),traditional,traditional,false), Span(22,23,List(16),also,also,false), Span(0,2,List(20, 19, 18, 17),Huaqing Liu,(person :name (name :op "Huaqing" :op "Liu")),false), Span(20,21,List(21),countries,country,false), Span(25,26,List(22),too,too,false), Span(2,3,List(23),said,say-01,false)),Map(2 -> "China", 5 -> name, 12 -> 1, 15 -> traditional, 8 -> people, 21 -> country, 18 -> name, 7 -> friendship, 17 -> person, 1 -> name, 23 -> say-01, 4 -> country, 11 -> friendly, 14 -> relationship, 20 -> "Liu", 6 -> "Thailand", 22 -> too, 0 -> country, 9 -> and, 16 -> also, 19 -> "Huaqing", 3 -> very, 10 -> have-03, 13 -> and),Map(n -> name, h -> have-03, t -> traditional, p2 -> person, a3 -> also, s -> say-01, v -> very, 1 -> 1, p -> people, c3 -> country, n3 -> name, a -> and, t2 -> too, a2 -> and, r -> relationship, c -> country, f2 -> friendly, f -> friendship, c2 -> country, n2 -> name))),[Ljava.lang.String;@5379292f,Annotation([Ljava.lang.String;@7125576a,[Ljava.lang.String;@532b44f1,[Ljava.lang.String;@70a245e4),Annotation([Ljava.lang.String;@6a083a8e,[Ljava.lang.String;@314daea2,[Ledu.cmu.lti.nlp.amr.Dependency;@384878b6),Annotation([Ljava.lang.String;@5a27873e,[Ljava.lang.String;@71d01abe,[Ljava.lang.String;@2d349298),Annotation([Ljava.lang.String;@5642c240,[Ljava.lang.String;@303aa1c1,[Ledu.cmu.lti.nlp.amr.Entity;@41ce4892))
AMR:
(1 / 1, mod, p2 / person)
(a / and, op, c / country)
(a / and, op, f / friendship)
(a2 / and, op, f2 / friendly)
(a2 / and, op, h / have-03)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(f / friendship, mod, t / traditional)
(f / friendship, poss, p / people)
(f2 / friendly, degree, v / very)
(f2 / friendly, domain, r / relationship)
(f2 / friendly, mod, a3 / also)
(f2 / friendly, mod, t2 / too)
(h / have-03, ARG0, c3 / country)
(h / have-03, ARG1, f / friendship)
(n / name, op, "China")
(n2 / name, op, "Thailand")
(n3 / name, op, "Huaqing")
(n3 / name, op, "Liu")
(p / people, mod, c2 / country)
(p2 / person, name, n3 / name)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, a2 / and)

Decoded in 8,157,007 microseconds
Sentence: He said that this visit by vice-premier Chavalit and mutual visits by other high - level leaders of China and Thailand were beneficial in promoting further development of relationships and the efficient cooperation in all fields between the two countries .

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  beneficial => benefit-01
Oracle Span 6:  Chavalit => (person :name (name :op "Chavalit"))
Oracle Span 7:  China => (country :name (name :op "China"))
Oracle Span 8:  cooperation => cooperate-01
Oracle Span 9:  countries => country
Oracle Span 10:  development => develop-02
Oracle Span 11:  efficient => efficient-41
Oracle Span 12:  fields => field
Oracle Span 13:  further => further
Oracle Span 14:  He => he
Oracle Span 15:  high => high
Oracle Span 16:  leaders => (person :ARG0-of lead-02)
Oracle Span 17:  level => level
Oracle Span 18:  mutual => mutual
Oracle Span 19:  other => other
Oracle Span 20:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 21:  promoting => promote-02
Oracle Span 22:  relationships => relationship
Oracle Span 23:  said => say-01
Oracle Span 24:  Thailand => (name :op "Thailand")
Oracle Span 25:  this => this
Oracle Span 26:  vice => vice
Oracle Span 27:  visit => visit-01
Oracle Span 28:  visits => visit-01
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 34-35:  all => all
Span 8-9:  and => and
Span 19-20:  and => and
Span 29-30:  and => and
Span 22-23:  beneficial => benefit-01
Span 7-8:  Chavalit => (person :name (name :op "Chavalit"))
Span 18-19:  China => (country :name (name :op "China"))
Span 32-33:  cooperation => cooperate-01
Span 39-40:  countries => country
Span 26-27:  development => develop-01
Span 31-32:  efficient => efficient
Span 35-36:  fields => field
Span 25-26:  further => further
Span 0-1:  He => he
Span 0-1:  He => 1
Span 13-14:  high => high
Span 16-17:  leaders => (person :ARG0-of lead-02)
Span 15-16:  level => level
Span 9-10:  mutual => mutual
Span 12-13:  other => other
Span 24-25:  promoting => promote-02
Span 28-29:  relationships => relationship
Span 1-2:  said => say-01
Span 20-21:  Thailand => (country :name (name :op "Thailand"))
Span 3-4:  this => this
Span 4-5:  visit => visit-01
Span 10-11:  visits => visit-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 36-37:  all => all
Oracle Span 10-11:  and => and
Oracle Span 21-22:  and => and
Oracle Span 31-32:  and => and
Oracle Span 24-25:  beneficial => benefit-01
Oracle Span 9-10:  Chavalit => (person :name (name :op "Chavalit"))
Oracle Span 20-21:  China => (country :name (name :op "China"))
Oracle Span 34-35:  cooperation => cooperate-01
Oracle Span 41-42:  countries => country
Oracle Span 28-29:  development => develop-02
Oracle Span 33-34:  efficient => efficient-41
Oracle Span 37-38:  fields => field
Oracle Span 27-28:  further => further
Oracle Span 0-1:  He => he
Oracle Span 15-16:  high => high
Oracle Span 18-19:  leaders => (person :ARG0-of lead-02)
Oracle Span 17-18:  level => level
Oracle Span 11-12:  mutual => mutual
Oracle Span 14-15:  other => other
Oracle Span 8-9:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 26-27:  promoting => promote-02
Oracle Span 30-31:  relationships => relationship
Oracle Span 1-2:  said => say-01
Oracle Span 22-23:  Thailand => (name :op "Thailand")
Oracle Span 3-4:  this => this
Oracle Span 6-7:  vice => vice
Oracle Span 4-5:  visit => visit-01
Oracle Span 12-13:  visits => visit-01

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	this	_	DT	DT	_	5	nsubj	_	_
5	visit	_	VBP	VBP	_	2	ccomp	_	_
6	by	_	IN	IN	_	5	prep	_	_
7	vice-premier	_	NNP	NNP	_	8	nn	_	_
8	Chavalit	_	NNP	NNP	_	6	pobj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	mutual	_	JJ	JJ	_	11	amod	_	_
11	visits	_	NNS	NNS	_	8	conj	_	_
12	by	_	IN	IN	_	5	prep	_	_
13	other	_	JJ	JJ	_	14	amod	_	_
14	high	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	2	punct	_	_
16	level	_	NN	NN	_	17	nn	_	_
17	leaders	_	NNS	NNS	_	23	nsubj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	China	_	NNP	NNP	_	18	pobj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	Thailand	_	NNP	NNP	_	19	conj	_	_
22	were	_	VBD	VBD	_	23	cop	_	_
23	beneficial	_	JJ	JJ	_	2	parataxis	_	_
24	in	_	IN	IN	_	23	prep	_	_
25	promoting	_	VBG	VBG	_	24	pcomp	_	_
26	further	_	JJ	JJ	_	27	amod	_	_
27	development	_	NN	NN	_	25	dobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	relationships	_	NNS	NNS	_	28	pobj	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	the	_	DT	DT	_	33	det	_	_
32	efficient	_	JJ	JJ	_	33	amod	_	_
33	cooperation	_	NN	NN	_	29	conj	_	_
34	in	_	IN	IN	_	25	prep	_	_
35	all	_	DT	DT	_	36	det	_	_
36	fields	_	NNS	NNS	_	34	pobj	_	_
37	between	_	IN	IN	_	36	prep	_	_
38	the	_	DT	DT	_	40	det	_	_
39	two	_	CD	CD	_	40	num	_	_
40	countries	_	NNS	NNS	_	37	pobj	_	_
41	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, v / visit-01)
(a / and, op, v3 / visit-01)
(a2 / and, mod, l2 / level)
(a2 / and, mod, o / other)
(a2 / and, op, p5 / person)
(a3 / and, op, c7 / cooperate-01)
(a3 / and, op, d / develop-02)
(b / benefit-01, ARG0, a / and)
(b / benefit-01, ARG1, p4 / promote-02)
(c5 / country, name, n2 / name)
(c6 / country, name, n3 / name)
(c7 / cooperate-01, ARG0, c5 / country)
(c7 / cooperate-01, ARG1, c6 / country)
(c7 / cooperate-01, ARG2, f2 / field)
(d / develop-02, ARG1, r / relationship)
(d / develop-02, degree, f / further)
(e / efficient-41, ARG1, c7 / cooperate-01)
(f2 / field, mod, a4 / all)
(h3 / have-org-role-91, ARG0, p / person)
(h3 / have-org-role-91, ARG2, p2 / premier)
(l2 / level, mod, h2 / high)
(l3 / lead-02, ARG0, p5 / person)
(l3 / lead-02, ARG1, c6 / country)
(n / name, op, "Chavalit")
(n2 / name, op, "China")
(n3 / name, op, "Thailand")
(p / person, name, n / name)
(p2 / premier, mod, v2 / vice)
(p4 / promote-02, ARG0, a / and)
(p4 / promote-02, ARG1, a3 / and)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, b / benefit-01)
(v / visit-01, ARG0, p / person)
(v / visit-01, mod, t2 / this)
(v3 / visit-01, ARG0, a2 / and)
(v3 / visit-01, mod, m / mutual)

Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),further,further,false), Span(0,1,List(1),He,he,false), Span(20,21,List(4, 3, 2),Thailand,(country :name (name :op "Thailand")),false), Span(28,29,List(5),relationships,relationship,false), Span(18,19,List(8, 7, 6),China,(country :name (name :op "China")),false), Span(9,10,List(9),mutual,mutual,false), Span(13,14,List(10),high,high,false), Span(39,40,List(11),countries,country,false), Span(1,2,List(12),said,say-01,false), Span(8,9,List(13),and,and,false), Span(12,13,List(14),other,other,false), Span(22,23,List(15),beneficial,benefit-01,false), Span(10,11,List(16),visits,visit-01,false), Span(24,25,List(17),promoting,promote-02,false), Span(7,8,List(20, 19, 18),Chavalit,(person :name (name :op "Chavalit")),false), Span(34,35,List(21),all,all,false), Span(35,36,List(22),fields,field,false), Span(26,27,List(23),development,develop-01,false), Span(3,4,List(24),this,this,false), Span(32,33,List(25),cooperation,cooperate-01,false), Span(0,1,List(26),He,1,false), Span(19,20,List(27),and,and,false), Span(16,17,List(29, 28),leaders,(person :ARG0-of lead-02),false), Span(29,30,List(30),and,and,false), Span(15,16,List(31),level,level,false), Span(4,5,List(32),visit,visit-01,false), Span(31,32,List(33),efficient,efficient,false)),Map(30 -> and, 2 -> country, 5 -> relationship, 33 -> efficient, 27 -> and, 12 -> say-01, 8 -> "China", 15 -> benefit-01, 21 -> all, 18 -> person, 24 -> this, 7 -> name, 1 -> he, 17 -> promote-02, 23 -> develop-01, 26 -> 1, 4 -> "Thailand", 11 -> country, 32 -> visit-01, 14 -> other, 29 -> lead-02, 20 -> "Chavalit", 28 -> person, 6 -> country, 9 -> mutual, 0 -> further, 22 -> field, 16 -> visit-01, 19 -> name, 10 -> high, 3 -> name, 31 -> level, 25 -> cooperate-01, 13 -> and),Map(e -> efficient, n -> name, v2 -> visit-01, h -> he, h2 -> high, t -> this, b -> benefit-01, p2 -> person, c4 -> cooperate-01, a3 -> and, s -> say-01, v -> visit-01, m -> mutual, d -> develop-01, 1 -> 1, p -> promote-02, a -> and, c3 -> country, n3 -> name, l2 -> level, r -> relationship, a2 -> all, c -> country, f2 -> field, l -> lead-02, f -> further, o -> other, p3 -> person, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@3186533c,Annotation([Ljava.lang.String;@6b6cab6d,[Ljava.lang.String;@7c7932df,[Ljava.lang.String;@210124fd),Annotation([Ljava.lang.String;@229d9c52,[Ljava.lang.String;@2c246caf,[Ledu.cmu.lti.nlp.amr.Dependency;@19fe5c3e),Annotation([Ljava.lang.String;@3170a530,[Ljava.lang.String;@7fc1d040,[Ljava.lang.String;@700f9a03),Annotation([Ljava.lang.String;@1b7b2790,[Ljava.lang.String;@2f9658ea,[Ledu.cmu.lti.nlp.amr.Entity;@5e24de88))
AMR:
(a / and, op, p2 / person)
(a3 / and, op, c / country)
(b / benefit-01, ARG1, c3 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c4 / cooperate-01, ARG0, a / and)
(c4 / cooperate-01, ARG1, e / efficient)
(d / develop-01, ARG0, b / benefit-01)
(d / develop-01, ARG1, r / relationship)
(d / develop-01, ARG6, a4 / and)
(d / develop-01, time, f2 / field)
(e / efficient, op, a2 / all)
(e / efficient, op, c2 / country)
(e / efficient, op, d / develop-01)
(f / further, op, d / develop-01)
(l / lead-02, ARG0, p3 / person)
(l2 / level, example, v / visit-01)
(m / mutual, mod, a / and)
(n / name, op, "Thailand")
(n2 / name, op, "China")
(n3 / name, op, "Chavalit")
(p / promote-02, ARG1, a3 / and)
(p / promote-02, ARG2, d / develop-01)
(p2 / person, name, n3 / name)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, v2 / visit-01)
(s / say-01, ARG6, 1 / 1)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, ARG1, o / other)
(v / visit-01, location, h2 / high)
(v2 / visit-01, ARG0, p3 / person)
(v2 / visit-01, ARG1, t / this)
(v2 / visit-01, time, h2 / high)

Decoded in 13,993,382 microseconds
Sentence: Chavalit said that he was extremely happy to meet vice-chairman Liu .

Oracle Span 1:  chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 2:  Chavalit => (person :name (name :op "Chavalit"))
Oracle Span 3:  extremely => extreme
Oracle Span 4:  Liu => (person :name (name :op "Liu"))
Oracle Span 5:  meet => meet-02
Oracle Span 6:  said => say-01
Oracle Span 7:  vice => vice
NER Entity: (person :name (name :op "Chavalit"))
Spans:
Span 0-1:  Chavalit => (person :name (name :op "Chavalit"))
Span 5-6:  extremely => extreme
Span 6-7:  happy => happen-01
Span 10-11:  Liu => (person :name (name :op "Liu"))
Span 8-9:  meet => meet-01
Span 1-2:  said => say-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 11-12:  chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 0-1:  Chavalit => (person :name (name :op "Chavalit"))
Oracle Span 5-6:  extremely => extreme
Oracle Span 12-13:  Liu => (person :name (name :op "Liu"))
Oracle Span 8-9:  meet => meet-02
Oracle Span 1-2:  said => say-01
Oracle Span 9-10:  vice => vice

Dependencies:
1	Chavalit	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	he	_	PRP	PRP	_	7	nsubj	_	_
5	was	_	VBD	VBD	_	7	cop	_	_
6	extremely	_	RB	RB	_	7	advmod	_	_
7	happy	_	JJ	JJ	_	2	ccomp	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	meet	_	VB	VB	_	7	xcomp	_	_
10	vice-chairman	_	JJ	JJ	_	11	amod	_	_
11	Liu	_	NNP	NNP	_	9	dobj	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(c / chairman, mod, v / vice)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, c / chairman)
(m / meet-02, ARG0, p3 / person)
(m / meet-02, ARG1, p / person)
(n / name, op, "Chavalit")
(n2 / name, op, "Liu")
(p / person, name, n2 / name)
(p3 / person, name, n / name)
(s / say-01, ARG0, p3 / person)

Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),said,say-01,false), Span(5,6,List(1),extremely,extreme,false), Span(6,7,List(2),happy,happen-01,false), Span(0,1,List(5, 4, 3),Chavalit,(person :name (name :op "Chavalit")),false), Span(8,9,List(6),meet,meet-01,false), Span(10,11,List(9, 8, 7),Liu,(person :name (name :op "Liu")),false)),Map(2 -> happen-01, 5 -> "Chavalit", 8 -> name, 7 -> person, 1 -> extreme, 4 -> name, 6 -> meet-01, 9 -> "Liu", 0 -> say-01, 3 -> person),Map(n -> name, e -> extreme, h -> happen-01, p2 -> person, s -> say-01, m -> meet-01, p -> person, n2 -> name))),[Ljava.lang.String;@2a34f1bb,Annotation([Ljava.lang.String;@7583c1b9,[Ljava.lang.String;@3772c9b,[Ljava.lang.String;@a23422),Annotation([Ljava.lang.String;@d16a4a4,[Ljava.lang.String;@667322b6,[Ledu.cmu.lti.nlp.amr.Dependency;@5c5ad917),Annotation([Ljava.lang.String;@4d48e59a,[Ljava.lang.String;@75c34b13,[Ljava.lang.String;@adab18f),Annotation([Ljava.lang.String;@4243a2,[Ljava.lang.String;@aac1205,[Ledu.cmu.lti.nlp.amr.Entity;@65584b90))
AMR:
(h / happen-01, ARG1, m / meet-01)
(h / happen-01, ARG6, e / extreme)
(m / meet-01, ARG1, p2 / person)
(n / name, op, "Chavalit")
(n2 / name, op, "Liu")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, h / happen-01)

Decoded in 275,195 microseconds
Sentence: He said that in recent years , the development of China 's economy has accelerated , and the government and the people of Thailand feel extremely happy .

Oracle Span 1:  accelerated => accelerate-01
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  China => (country :name (name :op "China"))
Oracle Span 5:  development => develop-02
Oracle Span 6:  economy => economy
Oracle Span 7:  extremely => extreme
Oracle Span 8:  feel => feel-01
Oracle Span 9:  government => (government-organization :ARG0-of govern-01)
Oracle Span 10:  He => he
Oracle Span 11:  recent => recent
Oracle Span 12:  said => say-01
Oracle Span 13:  Thailand => (country :name (name :op "Thailand"))
Oracle Span 14:  years => year
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Thailand"))
Spans:
Span 14-15:  accelerated => accelerate-01
Span 16-17:  and => and
Span 19-20:  and => and
Span 10-11:  China => (country :name (name :op "China"))
Span 8-9:  development => develop-01
Span 12-13:  economy => economy
Span 25-26:  extremely => extreme
Span 24-25:  feel => feel-01
Span 18-19:  government => (government-organization :ARG0-of govern-01)
Span 26-27:  happy => happy
Span 0-1:  He => he
Span 21-22:  people => people
Span 4-5:  recent => recent
Span 1-2:  said => say-01
Span 23-24:  Thailand => (country :name (name :op "Thailand"))
Span 5-6:  years => year

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 14-15:  accelerated => accelerate-01
Oracle Span 16-17:  and => and
Oracle Span 19-20:  and => and
Oracle Span 10-11:  China => (country :name (name :op "China"))
Oracle Span 8-9:  development => develop-02
Oracle Span 12-13:  economy => economy
Oracle Span 25-26:  extremely => extreme
Oracle Span 24-25:  feel => feel-01
Oracle Span 18-19:  government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  He => he
Oracle Span 4-5:  recent => recent
Oracle Span 1-2:  said => say-01
Oracle Span 23-24:  Thailand => (country :name (name :op "Thailand"))
Oracle Span 5-6:  years => year

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	15	mark	_	_
4	in	_	IN	IN	_	15	prep	_	_
5	recent	_	JJ	JJ	_	6	amod	_	_
6	years	_	NNS	NNS	_	4	pobj	_	_
7	,	_	,	,	_	15	punct	_	_
8	the	_	DT	DT	_	9	det	_	_
9	development	_	NN	NN	_	15	nsubj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	China	_	NNP	NNP	_	13	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	economy	_	NN	NN	_	10	pobj	_	_
14	has	_	VBZ	VBZ	_	15	aux	_	_
15	accelerated	_	VBN	VBN	_	2	ccomp	_	_
16	,	_	,	,	_	2	punct	_	_
17	and	_	CC	CC	_	2	cc	_	_
18	the	_	DT	DT	_	19	det	_	_
19	government	_	NN	NN	_	25	nsubj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	the	_	DT	DT	_	22	det	_	_
22	people	_	NNS	NNS	_	19	conj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	Thailand	_	NNP	NNP	_	23	pobj	_	_
25	feel	_	VBP	VBP	_	2	conj	_	_
26	extremely	_	RB	RB	_	27	advmod	_	_
27	happy	_	JJ	JJ	_	25	acomp	_	_
28	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a2 / accelerate-01)
(a / and, op, f / feel-01)
(a / and, time, y / year)
(a2 / accelerate-01, ARG1, d / develop-02)
(a3 / and, op, g / government-organization)
(c4 / country, name, n / name)
(c6 / country, name, n2 / name)
(d / develop-02, ARG1, e / economy)
(e / economy, poss, c4 / country)
(f / feel-01, ARG0, a3 / and)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c6 / country)
(n / name, op, "China")
(n2 / name, op, "Thailand")
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a / and)
(y / year, mod, r / recent)

Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),government,(government-organization :ARG0-of govern-01),false), Span(0,1,List(2),He,he,false), Span(16,17,List(3),and,and,false), Span(14,15,List(4),accelerated,accelerate-01,false), Span(8,9,List(5),development,develop-01,false), Span(24,25,List(6),feel,feel-01,false), Span(19,20,List(7),and,and,false), Span(23,24,List(10, 9, 8),Thailand,(country :name (name :op "Thailand")),false), Span(26,27,List(11),happy,happy,false), Span(1,2,List(12),said,say-01,false), Span(21,22,List(13),people,people,false), Span(5,6,List(14),years,year,false), Span(12,13,List(15),economy,economy,false), Span(25,26,List(16),extremely,extreme,false), Span(10,11,List(19, 18, 17),China,(country :name (name :op "China")),false), Span(4,5,List(20),recent,recent,false)),Map(2 -> he, 5 -> develop-01, 12 -> say-01, 15 -> economy, 8 -> country, 18 -> name, 7 -> and, 17 -> country, 1 -> govern-01, 4 -> accelerate-01, 11 -> happy, 14 -> year, 20 -> recent, 6 -> feel-01, 0 -> government-organization, 9 -> name, 16 -> extreme, 19 -> "China", 3 -> and, 10 -> "Thailand", 13 -> people),Map(e -> economy, n -> name, h -> he, h2 -> happy, e2 -> extreme, a3 -> and, s -> say-01, d -> develop-01, g2 -> govern-01, y -> year, g -> government-organization, p -> people, a -> and, r -> recent, a2 -> accelerate-01, c -> country, f -> feel-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@4d8a3027,Annotation([Ljava.lang.String;@1f494167,[Ljava.lang.String;@2b775cf5,[Ljava.lang.String;@56bacc32),Annotation([Ljava.lang.String;@4a2dd5ca,[Ljava.lang.String;@1f3ae791,[Ledu.cmu.lti.nlp.amr.Dependency;@e3b8077),Annotation([Ljava.lang.String;@ee016de,[Ljava.lang.String;@2a47014d,[Ljava.lang.String;@62897dfb),Annotation([Ljava.lang.String;@30e371e5,[Ljava.lang.String;@3e3bc7c1,[Ledu.cmu.lti.nlp.amr.Entity;@2ce4f422))
AMR:
(a / and, op, a2 / accelerate-01)
(a / and, op, f / feel-01)
(a2 / accelerate-01, ARG1, y / year)
(a3 / and, op, p / people)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / develop-01, ARG1, e / economy)
(e / economy, poss, c2 / country)
(f / feel-01, ARG0, g / government-organization)
(f / feel-01, ARG1, a3 / and)
(f / feel-01, ARG6, h2 / happy)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(h2 / happy, mod, e2 / extreme)
(n / name, op, "Thailand")
(n2 / name, op, "China")
(p / people, location, c / country)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a / and)
(y / year, mod, r / recent)

Decoded in 5,535,291 microseconds
Sentence: He said that he agreed with Huaqing Liu 's opinion that Thailand and China should further develop various forms of economic and trade cooperation .

Oracle Span 1:  agreed => agree-01
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  China => (country :name (name :op "China"))
Oracle Span 5:  cooperation => cooperate-01
Oracle Span 6:  develop => develop-02
Oracle Span 7:  economic => economy
Oracle Span 8:  forms => form
Oracle Span 9:  further => further
Oracle Span 10:  He => he
Oracle Span 11:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 12:  opinion => opine-01
Oracle Span 13:  said => say-01
Oracle Span 14:  should => recommend-01
Oracle Span 15:  Thailand => (country :name (name :op "Thailand"))
Oracle Span 16:  trade => trade-01
Oracle Span 17:  various => various
NER Entity: (person :name (name :op "Huaqing" :op "Liu"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 4-5:  agreed => agree-01
Span 21-22:  and => and
Span 12-13:  and => and
Span 13-14:  China => (country :name (name :op "China"))
Span 23-24:  cooperation => cooperate-01
Span 16-17:  develop => develop-02
Span 20-21:  economic => economy
Span 18-19:  forms => form
Span 15-16:  further => further
Span 0-1:  He => he
Span 6-8:  Huaqing Liu => (person :name (name :op "Huaqing" :op "Liu"))
Span 9-10:  opinion => pioneer-01
Span 1-2:  said => say-01
Span 14-15:  should => shoulder-01
Span 11-12:  Thailand => (country :name (name :op "Thailand"))
Span 22-23:  trade => trade-01
Span 17-18:  various => various

Langrangian relaxation converged after 91 iterations. Delta = 0.0
Oracle Span 4-5:  agreed => agree-01
Oracle Span 12-13:  and => and
Oracle Span 21-22:  and => and
Oracle Span 13-14:  China => (country :name (name :op "China"))
Oracle Span 23-24:  cooperation => cooperate-01
Oracle Span 16-17:  develop => develop-02
Oracle Span 20-21:  economic => economy
Oracle Span 18-19:  forms => form
Oracle Span 15-16:  further => further
Oracle Span 0-1:  He => he
Oracle Span 6-8:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 9-10:  opinion => opine-01
Oracle Span 1-2:  said => say-01
Oracle Span 14-15:  should => recommend-01
Oracle Span 11-12:  Thailand => (country :name (name :op "Thailand"))
Oracle Span 22-23:  trade => trade-01
Oracle Span 17-18:  various => various

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	agreed	_	VBD	VBD	_	2	ccomp	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	Huaqing	_	NNP	NNP	_	8	nn	_	_
8	Liu	_	NNP	NNP	_	10	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	opinion	_	NN	NN	_	6	pobj	_	_
11	that	_	IN	IN	_	17	mark	_	_
12	Thailand	_	NNP	NNP	_	17	nsubj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	China	_	NNP	NNP	_	12	conj	_	_
15	should	_	MD	MD	_	17	aux	_	_
16	further	_	RBR	RBR	_	17	advmod	_	_
17	develop	_	VB	VB	_	5	ccomp	_	_
18	various	_	JJ	JJ	_	19	amod	_	_
19	forms	_	NNS	NNS	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	economic	_	JJ	JJ	_	20	pobj	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	trade	_	NN	NN	_	24	nn	_	_
24	cooperation	_	NN	NN	_	21	conj	_	_
25	.	_	.	.	_	2	punct	_	_

Oracle:
(a / agree-01, ARG0, h2 / he)
(a / agree-01, ARG1, o / opine-01)
(a2 / and, op, c4 / country)
(a2 / and, op, c5 / country)
(a3 / and, op, c7 / cooperate-01)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(c7 / cooperate-01, ARG2, t2 / trade-01)
(c7 / cooperate-01, mod, f / form)
(d / develop-02, ARG0, a2 / and)
(d / develop-02, ARG1, a3 / and)
(d / develop-02, degree, f2 / further)
(f / form, mod, v / various)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "Thailand")
(n3 / name, op, "China")
(o / opine-01, ARG0, p2 / person)
(o / opine-01, ARG1, r / recommend-01)
(p2 / person, name, n / name)
(r / recommend-01, ARG1, d / develop-02)
(s / say-01, ARG0, h2 / he)
(s / say-01, ARG1, a / agree-01)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(17,18,List(3),various,various,false), Span(0,1,List(4),He,he,false), Span(21,22,List(5),and,and,false), Span(9,10,List(6),opinion,pioneer-01,false), Span(23,24,List(7),cooperation,cooperate-01,false), Span(22,23,List(8),trade,trade-01,false), Span(18,19,List(9),forms,form,false), Span(11,12,List(12, 11, 10),Thailand,(country :name (name :op "Thailand")),false), Span(20,21,List(13),economic,economy,false), Span(1,2,List(14),said,say-01,false), Span(6,8,List(18, 17, 16, 15),Huaqing Liu,(person :name (name :op "Huaqing" :op "Liu")),false), Span(14,15,List(19),should,shoulder-01,false), Span(16,17,List(20),develop,develop-02,false), Span(12,13,List(21),and,and,false), Span(4,5,List(22),agreed,agree-01,false), Span(15,16,List(23),further,further,false)),Map(2 -> "China", 5 -> and, 12 -> "Thailand", 15 -> person, 8 -> trade-01, 21 -> and, 18 -> "Liu", 7 -> cooperate-01, 17 -> "Huaqing", 1 -> name, 23 -> further, 4 -> he, 11 -> name, 14 -> say-01, 20 -> develop-02, 6 -> pioneer-01, 22 -> agree-01, 0 -> country, 9 -> form, 16 -> name, 19 -> shoulder-01, 3 -> various, 10 -> country, 13 -> economy),Map(e -> economy, n -> name, h -> he, s2 -> shoulder-01, t -> trade-01, p2 -> person, a3 -> agree-01, s -> say-01, v -> various, d -> develop-02, p -> pioneer-01, n3 -> name, a -> and, c3 -> country, a2 -> and, c -> country, f2 -> further, f -> form, c2 -> cooperate-01, n2 -> name))),[Ljava.lang.String;@1517718b,Annotation([Ljava.lang.String;@698ea15c,[Ljava.lang.String;@3f67073c,[Ljava.lang.String;@4b7c243d),Annotation([Ljava.lang.String;@65c98ff0,[Ljava.lang.String;@79515654,[Ledu.cmu.lti.nlp.amr.Dependency;@7e08f0a5),Annotation([Ljava.lang.String;@547f7e95,[Ljava.lang.String;@7d60dde5,[Ljava.lang.String;@ef0c7eb),Annotation([Ljava.lang.String;@37c49348,[Ljava.lang.String;@1860d8f3,[Ledu.cmu.lti.nlp.amr.Entity;@6394b1ef))
AMR:
(a / and, op, e / economy)
(a / and, op, t / trade-01)
(a3 / agree-01, ARG1, s2 / shoulder-01)
(c / country, name, n / name)
(c2 / cooperate-01, ARG1, c / country)
(c2 / cooperate-01, ARG2, a / and)
(c3 / country, name, n2 / name)
(d / develop-02, ARG0, c3 / country)
(d / develop-02, ARG1, f / form)
(d / develop-02, ARG2, c2 / cooperate-01)
(d / develop-02, degree, f2 / further)
(n / name, op, "China")
(n2 / name, op, "Thailand")
(n3 / name, op, "Huaqing")
(n3 / name, op, "Liu")
(p / pioneer-01, ARG0, p2 / person)
(p / pioneer-01, ARG1, a2 / and)
(p2 / person, name, n3 / name)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a3 / agree-01)
(s2 / shoulder-01, ARG1, d / develop-02)
(s2 / shoulder-01, ARG6, a2 / and)
(t / trade-01, ARG1, v / various)

Decoded in 9,795,368 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@656a6499,Annotation([Ljava.lang.String;@18e70623,[Ljava.lang.String;@584d9d31,[Ljava.lang.String;@2e135f3f),Annotation([Ljava.lang.String;@186bb8c8,[Ljava.lang.String;@389d73f8,[Ledu.cmu.lti.nlp.amr.Dependency;@c8dc5cf),Annotation([Ljava.lang.String;@38d399c6,[Ljava.lang.String;@7d3bcbec,[Ljava.lang.String;@2eea7500),Annotation([Ljava.lang.String;@4cab7eaf,[Ljava.lang.String;@6812c355,[Ledu.cmu.lti.nlp.amr.Entity;@4bd51110))
AMR:


Decoded in 1,369,953 microseconds
Sentence: Xinhua News Agency , Beijing , September 1st

Oracle Span 1:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 2:  September => 9
Oracle Span 3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (country :name (name :op "Beijing"))
Spans:
Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Span 6-8:  September 1st => (byline-91 :time (date-entity :month 9 :day 1))
Span 0-3:  Xinhua News Agency => (publication :name (name :op "News" :op "Agency" :op "Xinhua"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 6-7:  September => 9
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Beijing	_	NNP	NNP	_	7	nn	_	_
6	,	_	,	,	_	7	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_

Oracle:
(c2 / city, name, n2 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Beijing")
(p / publication, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(6,8,List(3, 2, 1, 0),September 1st,(byline-91 :time (date-entity :month 9 :day 1)),false), Span(4,5,List(6, 5, 4),Beijing,(city :name (name :op "Beijing")),false), Span(0,3,List(11, 10, 9, 8, 7),Xinhua News Agency,(publication :name (name :op "News" :op "Agency" :op "Xinhua")),false)),Map(2 -> 9, 5 -> name, 8 -> name, 7 -> publication, 1 -> date-entity, 11 -> "Xinhua", 4 -> city, 6 -> "Beijing", 9 -> "News", 0 -> byline-91, 10 -> "Agency", 3 -> 1),Map(n -> name, b -> byline-91, d -> date-entity, p -> publication, 1 -> 1, c -> city, 9 -> 9, n2 -> name))),[Ljava.lang.String;@a10e24f,Annotation([Ljava.lang.String;@295e96d9,[Ljava.lang.String;@2d72829e,[Ljava.lang.String;@59d8d97f),Annotation([Ljava.lang.String;@54574a91,[Ljava.lang.String;@962e69c,[Ledu.cmu.lti.nlp.amr.Dependency;@303df35c),Annotation([Ljava.lang.String;@2fb1c705,[Ljava.lang.String;@41dc13a0,[Ljava.lang.String;@5f945b01),Annotation([Ljava.lang.String;@ecf4bc,[Ljava.lang.String;@2144924b,[Ledu.cmu.lti.nlp.amr.Entity;@24c4d0))
AMR:
(b / byline-91, ARG1, p / publication)
(b / byline-91, ARG6, c / city)
(b / byline-91, time, d / date-entity)
(c / city, name, n / name)
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 9 / 9)
(n / name, op, "Beijing")
(n2 / name, op, "Agency")
(n2 / name, op, "News")
(n2 / name, op, "Xinhua")
(p / publication, name, n2 / name)

Decoded in 206,931 microseconds
Sentence: Guofang Shen , The foreign ministry spokesperson , announced at a news conference held this afternoon that President Gentzs Aerpade of the Hungary Republic , would pay a State visit to China from September 14th to the 17th at the invitation of president Zemin Jiang .

Oracle Span 1:  afternoon => afternoon
Oracle Span 2:  announced => announce-01
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  conference => conference
Oracle Span 5:  foreign ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Oracle Span 6:  Gentzs Aerpade => (person :name (name :op "Aerpade" :op "Gentzs"))
Oracle Span 7:  Guofang Shen => (person :name (name :op "Shen" :op "Guofang"))
Oracle Span 8:  held => hold-04
Oracle Span 9:  Hungary Republic => (country :name (name :op "Republic" :op "Hungary"))
Oracle Span 10:  invitation => invite-01
Oracle Span 11:  news => news
Oracle Span 12:  President => (have-org-role-91 :ARG2 president)
Oracle Span 13:  president => (have-org-role-91 :ARG2 president)
Oracle Span 14:  September => 9
Oracle Span 15:  spokesperson => (have-org-role-91 :ARG2 spokesperson)
Oracle Span 16:  State => state
Oracle Span 17:  this => this
Oracle Span 18:  visit => visit-01
Oracle Span 19:  Zemin Jiang => (person :name (name :op "Jiang" :op "Zemin"))
NER Entity: (person :name (name :op "Guofang" :op "Shen"))
NER Entity: (person :name (name :op "Gentzs" :op "Aerpade"))
NER Entity: (country :name (name :op "Hungary"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Zemin" :op "Jiang"))
Spans:
Span 15-16:  afternoon => afternoon
Span 8-9:  announced => announce-01
Span 31-32:  China => (country :name (name :op "China"))
Span 12-13:  conference => conference
Span 4-5:  foreign => (country :name (name :op "Libya"))
Span 18-20:  Gentzs Aerpade => (person :name (name :op "Gentzs" :op "Aerpade"))
Span 0-2:  Guofang Shen => (person :name (name :op "Guofang" :op "Shen"))
Span 0-34:  Guofang Shen , The foreign ministry spokesperson , announced at a news conference held this afternoon that President Gentzs Aerpade of the Hungary Republic , would pay a State visit to China from September => (date-entity :month 9 :day 14)
Span 0-38:  Guofang Shen , The foreign ministry spokesperson , announced at a news conference held this afternoon that President Gentzs Aerpade of the Hungary Republic , would pay a State visit to China from September 14th to the 17th => (ordinal-entity :value 646.0)
Span 22-23:  Hungary => (country :name (name :op "Hungary"))
Span 40-41:  invitation => invigorate-01
Span 5-6:  ministry => government-organization
Span 11-12:  news => news
Span 26-27:  pay => pay-01
Span 23-24:  Republic => (include-91 :ARG2 republic)
Span 6-7:  spokesperson => (person :ARG0-of (have-org-role-91 :ARG2 spokesperson))
Span 28-29:  State => state
Span 14-15:  this => this
Span 29-30:  visit => visit-01
Span 43-45:  Zemin Jiang => (person :name (name :op "Zemin" :op "Jiang"))

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 15-16:  afternoon => afternoon
Oracle Span 8-9:  announced => announce-01
Oracle Span 31-32:  China => (country :name (name :op "China"))
Oracle Span 12-13:  conference => conference
Oracle Span 4-6:  foreign ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Oracle Span 18-20:  Gentzs Aerpade => (person :name (name :op "Aerpade" :op "Gentzs"))
Oracle Span 0-2:  Guofang Shen => (person :name (name :op "Shen" :op "Guofang"))
Oracle Span 13-14:  held => hold-04
Oracle Span 22-24:  Hungary Republic => (country :name (name :op "Republic" :op "Hungary"))
Oracle Span 40-41:  invitation => invite-01
Oracle Span 11-12:  news => news
Oracle Span 17-18:  President => (have-org-role-91 :ARG2 president)
Oracle Span 42-43:  president => (have-org-role-91 :ARG2 president)
Oracle Span 33-34:  September => 9
Oracle Span 6-7:  spokesperson => (have-org-role-91 :ARG2 spokesperson)
Oracle Span 28-29:  State => state
Oracle Span 14-15:  this => this
Oracle Span 29-30:  visit => visit-01
Oracle Span 43-45:  Zemin Jiang => (person :name (name :op "Jiang" :op "Zemin"))

Dependencies:
1	Guofang	_	NNP	NNP	_	2	nn	_	_
2	Shen	_	NNP	NNP	_	9	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	The	_	DT	DT	_	7	det	_	_
5	foreign	_	JJ	JJ	_	7	amod	_	_
6	ministry	_	NN	NN	_	7	nn	_	_
7	spokesperson	_	NN	NN	_	2	appos	_	_
8	,	_	,	,	_	2	punct	_	_
9	announced	_	VBD	VBD	_	0	root	_	_
10	at	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	13	det	_	_
12	news	_	NN	NN	_	13	nn	_	_
13	conference	_	NN	NN	_	10	pobj	_	_
14	held	_	VBN	VBN	_	13	vmod	_	_
15	this	_	DT	DT	_	16	det	_	_
16	afternoon	_	NN	NN	_	14	tmod	_	_
17	that	_	IN	IN	_	27	mark	_	_
18	President	_	NNP	NNP	_	20	nn	_	_
19	Gentzs	_	NNPS	NNPS	_	20	nn	_	_
20	Aerpade	_	NNP	NNP	_	27	nsubj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	24	det	_	_
23	Hungary	_	NNP	NNP	_	24	nn	_	_
24	Republic	_	NNP	NNP	_	21	pobj	_	_
25	,	_	,	,	_	27	punct	_	_
26	would	_	MD	MD	_	27	aux	_	_
27	pay	_	VB	VB	_	14	ccomp	_	_
28	a	_	DT	DT	_	30	det	_	_
29	State	_	NNP	NNP	_	30	nn	_	_
30	visit	_	NN	NN	_	27	dobj	_	_
31	to	_	TO	TO	_	27	prep	_	_
32	China	_	NNP	NNP	_	31	pobj	_	_
33	from	_	IN	IN	_	9	prep	_	_
34	September	_	NNP	NNP	_	35	nn	_	_
35	14th	_	NNP	NNP	_	33	pobj	_	_
36	to	_	TO	TO	_	9	prep	_	_
37	the	_	DT	DT	_	38	det	_	_
38	17th	_	JJ	JJ	_	36	pobj	_	_
39	at	_	IN	IN	_	9	prep	_	_
40	the	_	DT	DT	_	41	det	_	_
41	invitation	_	NN	NN	_	39	pobj	_	_
42	of	_	IN	IN	_	41	prep	_	_
43	president	_	NN	NN	_	45	nn	_	_
44	Zemin	_	NNP	NNP	_	45	nn	_	_
45	Jiang	_	NNP	NNP	_	42	pobj	_	_
46	.	_	.	.	_	9	punct	_	_

Oracle:
(a / announce-01, ARG0, p / person)
(a / announce-01, ARG1, v / visit-01)
(a / announce-01, time, c6 / conference)
(a2 / afternoon, mod, t / this)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(c6 / conference, mod, n7 / news)
(g4 / government-organization, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, g4 / government-organization)
(h / have-org-role-91, ARG2, s / spokesperson)
(h2 / hold-04, ARG1, c6 / conference)
(h2 / hold-04, time, a2 / afternoon)
(h3 / have-org-role-91, ARG0, p2 / person)
(h3 / have-org-role-91, ARG1, c3 / country)
(h3 / have-org-role-91, ARG2, p3 / president)
(h4 / have-org-role-91, ARG0, p4 / person)
(h4 / have-org-role-91, ARG2, p5 / president)
(i / invite-01, ARG0, p4 / person)
(i / invite-01, ARG2, v / visit-01)
(n / name, op, "Guofang")
(n / name, op, "Shen")
(n2 / name, op, "Foreign")
(n2 / name, op, "Ministry")
(n3 / name, op, "Aerpade")
(n3 / name, op, "Gentzs")
(n4 / name, op, "Hungary")
(n4 / name, op, "Republic")
(n5 / name, op, "China")
(n6 / name, op, "Jiang")
(n6 / name, op, "Zemin")
(p / person, name, n / name)
(p2 / person, name, n3 / name)
(p4 / person, name, n6 / name)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, ARG1, c4 / country)
(v / visit-01, mod, s2 / state)

Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),pay,pay-01,false), Span(0,34,List(3, 2, 1),Guofang Shen , The foreign ministry spokesperson , announced at a news conference held this afternoon that President Gentzs Aerpade of the Hungary Republic , would pay a State visit to China from September,(date-entity :month 9 :day 14),false), Span(22,23,List(6, 5, 4),Hungary,(country :name (name :op "Hungary")),false), Span(0,2,List(10, 9, 8, 7),Guofang Shen,(person :name (name :op "Guofang" :op "Shen")),false), Span(11,12,List(11),news,news,false), Span(6,7,List(14, 13, 12),spokesperson,(person :ARG0-of (have-org-role-91 :ARG2 spokesperson)),false), Span(43,45,List(18, 17, 16, 15),Zemin Jiang,(person :name (name :op "Zemin" :op "Jiang")),false), Span(14,15,List(19),this,this,false), Span(28,29,List(20),State,state,false), Span(5,6,List(21),ministry,government-organization,false), Span(0,38,List(23, 22),Guofang Shen , The foreign ministry spokesperson , announced at a news conference held this afternoon that President Gentzs Aerpade of the Hungary Republic , would pay a State visit to China from September 14th to the 17th,(ordinal-entity :value 646.0),false), Span(12,13,List(24),conference,conference,false), Span(29,30,List(25),visit,visit-01,false), Span(40,41,List(26),invitation,invigorate-01,false), Span(15,16,List(27),afternoon,afternoon,false), Span(8,9,List(28),announced,announce-01,false), Span(18,20,List(32, 31, 30, 29),Gentzs Aerpade,(person :name (name :op "Gentzs" :op "Aerpade")),false), Span(23,24,List(34, 33),Republic,(include-91 :ARG2 republic),false), Span(31,32,List(37, 36, 35),China,(country :name (name :op "China")),false), Span(4,5,List(40, 39, 38),foreign,(country :name (name :op "Libya")),false)),Map(39 -> name, 30 -> name, 2 -> 9, 5 -> name, 33 -> include-91, 27 -> afternoon, 12 -> person, 8 -> name, 15 -> person, 36 -> name, 21 -> government-organization, 18 -> "Jiang", 24 -> conference, 35 -> country, 7 -> person, 1 -> date-entity, 17 -> "Zemin", 23 -> 646.0, 38 -> country, 26 -> invigorate-01, 4 -> country, 11 -> news, 32 -> "Aerpade", 14 -> spokesperson, 29 -> person, 20 -> state, 34 -> republic, 28 -> announce-01, 6 -> "Hungary", 40 -> "Libya", 9 -> "Guofang", 0 -> pay-01, 22 -> ordinal-entity, 16 -> name, 37 -> "China", 19 -> this, 10 -> "Shen", 3 -> 14, 31 -> "Gentzs", 25 -> visit-01, 13 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, s2 -> state, p5 -> person, t -> this, n7 -> name, p2 -> person, c4 -> country, n4 -> name, s -> spokesperson, v -> visit-01, d -> date-entity, 1 -> 14, p -> pay-01, g -> government-organization, c3 -> country, n3 -> news, a -> afternoon, p4 -> person, n6 -> name, i2 -> include-91, r -> republic, i -> invigorate-01, a2 -> announce-01, c -> country, 6 -> 646.0, 9 -> 9, o -> ordinal-entity, p3 -> person, n2 -> name, c2 -> conference, n5 -> name))),[Ljava.lang.String;@2e635ca7,Annotation([Ljava.lang.String;@6b55ad2c,[Ljava.lang.String;@26ec6a69,[Ljava.lang.String;@5dd27022),Annotation([Ljava.lang.String;@69e0895b,[Ljava.lang.String;@2f1a7586,[Ledu.cmu.lti.nlp.amr.Dependency;@6ae0fd2e),Annotation([Ljava.lang.String;@24fdd330,[Ljava.lang.String;@493a3ca5,[Ljava.lang.String;@35f0d641),Annotation([Ljava.lang.String;@5814445c,[Ljava.lang.String;@123a783d,[Ledu.cmu.lti.nlp.amr.Entity;@afdb1cb))
AMR:
(a / afternoon, mod, t / this)
(a / afternoon, prep-on, p5 / person)
(a2 / announce-01, ARG0, p2 / person)
(a2 / announce-01, ARG1, c2 / conference)
(a2 / announce-01, ARG6, p3 / person)
(c / country, name, n / name)
(c2 / conference, mod, n3 / news)
(c3 / country, name, n6 / name)
(c4 / country, name, n7 / name)
(d / date-entity, day, 1 / 14)
(d / date-entity, month, 9 / 9)
(g / government-organization, poss, c4 / country)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, s / spokesperson)
(i / invigorate-01, ARG0, p2 / person)
(i / invigorate-01, ARG1, p4 / person)
(i / invigorate-01, ARG6, o / ordinal-entity)
(i2 / include-91, ARG0, c / country)
(i2 / include-91, ARG1, p2 / person)
(i2 / include-91, ARG2, r / republic)
(n / name, op, "Hungary")
(n2 / name, op, "Guofang")
(n2 / name, op, "Shen")
(n4 / name, op, "Jiang")
(n4 / name, op, "Zemin")
(n5 / name, op, "Aerpade")
(n5 / name, op, "Gentzs")
(n6 / name, op, "China")
(n7 / name, op, "Libya")
(o / ordinal-entity, value, 6 / 646.0)
(p / pay-01, ARG0, p5 / person)
(p / pay-01, ARG1, v / visit-01)
(p / pay-01, ARG2, c3 / country)
(p2 / person, name, n2 / name)
(p4 / person, name, n4 / name)
(p5 / person, name, n5 / name)
(v / visit-01, ARG0, p3 / person)
(v / visit-01, ARG1, d / date-entity)
(v / visit-01, mod, s2 / state)

Decoded in 5,278,249 microseconds
Sentence: He also announced that Casymier Auye Muba , premier of the Gabon Republic , would pay a formal , friendly visit to China from September 6th to the 11th at the invitation of Peng Li , premier of the State Council .

Oracle Span 1:  also => also
Oracle Span 2:  announced => announce-01
Oracle Span 3:  Casymier Auye Muba => (person :name (name :op "Muba" :op "Auye" :op "Casymier"))
Oracle Span 4:  China => (country :name (name :op "China"))
Oracle Span 5:  formal => formal
Oracle Span 6:  friendly => friendly-41
Oracle Span 7:  Gabon Republic => (country :name (name :op "Republic" :op "Gabon"))
Oracle Span 8:  He => he
Oracle Span 9:  invitation => invite-01
Oracle Span 10:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 11:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 12:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 13:  September => 9
Oracle Span 14:  State Council => (government-organization :name (name :op "Council" :op "State"))
Oracle Span 15:  visit => visit-01
NER Entity: (country :name (name :op "Gabon"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (organization :name (name :op "State" :op "Council"))
Spans:
Span 1-2:  also => also
Span 2-3:  announced => announce-01
Span 4-7:  Casymier Auye Muba => (person :name (name :op "Casymier" :op "Auye" :op "Muba"))
Span 22-23:  China => (country :name (name :op "China"))
Span 17-18:  formal => formal
Span 0-1:  He => he
Span 0-25:  He also announced that Casymier Auye Muba , premier of the Gabon Republic , would pay a formal , friendly visit to China from September => (date-entity :month 9 :day 6)
Span 0-29:  He also announced that Casymier Auye Muba , premier of the Gabon Republic , would pay a formal , friendly visit to China from September 6th to the 11th => (ordinal-entity :value 319.0)
Span 31-32:  invitation => invigorate-01
Span 15-16:  pay => pay-01
Span 33-35:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 12-13:  Republic => (include-91 :ARG2 republic)
Span 39-41:  State Council => (government-organization :name (name :op "Council" :op "State"))
Span 20-21:  visit => visit-01

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Oracle Span 1-2:  also => also
Oracle Span 2-3:  announced => announce-01
Oracle Span 4-7:  Casymier Auye Muba => (person :name (name :op "Muba" :op "Auye" :op "Casymier"))
Oracle Span 22-23:  China => (country :name (name :op "China"))
Oracle Span 17-18:  formal => formal
Oracle Span 19-20:  friendly => friendly-41
Oracle Span 11-13:  Gabon Republic => (country :name (name :op "Republic" :op "Gabon"))
Oracle Span 0-1:  He => he
Oracle Span 31-32:  invitation => invite-01
Oracle Span 33-35:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 8-9:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 36-37:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 24-25:  September => 9
Oracle Span 39-41:  State Council => (government-organization :name (name :op "Council" :op "State"))
Oracle Span 20-21:  visit => visit-01

Dependencies:
1	He	_	PRP	PRP	_	3	nsubj	_	_
2	also	_	RB	RB	_	3	advmod	_	_
3	announced	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	16	mark	_	_
5	Casymier	_	NNP	NNP	_	7	nn	_	_
6	Auye	_	NNP	NNP	_	7	nn	_	_
7	Muba	_	NNP	NNP	_	16	nsubj	_	_
8	,	_	,	,	_	7	punct	_	_
9	premier	_	NN	NN	_	7	appos	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	Gabon	_	NNP	NNP	_	13	nn	_	_
13	Republic	_	NNP	NNP	_	10	pobj	_	_
14	,	_	,	,	_	7	punct	_	_
15	would	_	MD	MD	_	16	aux	_	_
16	pay	_	VB	VB	_	3	ccomp	_	_
17	a	_	DT	DT	_	21	det	_	_
18	formal	_	JJ	JJ	_	21	amod	_	_
19	,	_	,	,	_	21	punct	_	_
20	friendly	_	JJ	JJ	_	21	amod	_	_
21	visit	_	NN	NN	_	16	dobj	_	_
22	to	_	TO	TO	_	16	prep	_	_
23	China	_	NNP	NNP	_	22	pobj	_	_
24	from	_	IN	IN	_	16	prep	_	_
25	September	_	NNP	NNP	_	26	nn	_	_
26	6th	_	NNP	NNP	_	24	pobj	_	_
27	to	_	TO	TO	_	26	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	11th	_	NN	NN	_	27	pobj	_	_
30	at	_	IN	IN	_	29	prep	_	_
31	the	_	DT	DT	_	32	det	_	_
32	invitation	_	NN	NN	_	30	pobj	_	_
33	of	_	IN	IN	_	32	prep	_	_
34	Peng	_	NNP	NNP	_	35	nn	_	_
35	Li	_	NNP	NNP	_	33	pobj	_	_
36	,	_	,	,	_	35	punct	_	_
37	premier	_	NN	NN	_	35	appos	_	_
38	of	_	IN	IN	_	37	prep	_	_
39	the	_	DT	DT	_	41	det	_	_
40	State	_	NNP	NNP	_	41	nn	_	_
41	Council	_	NNP	NNP	_	38	pobj	_	_
42	.	_	.	.	_	3	punct	_	_

Oracle:
(a / announce-01, ARG0, h / he)
(a / announce-01, ARG1, v / visit-01)
(a / announce-01, mod, a2 / also)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(f2 / friendly-41, ARG1, v / visit-01)
(g3 / government-organization, name, n5 / name)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, c4 / country)
(h2 / have-org-role-91, ARG2, p2 / premier)
(h3 / have-org-role-91, ARG0, p3 / person)
(h3 / have-org-role-91, ARG1, g3 / government-organization)
(h3 / have-org-role-91, ARG2, p4 / premier)
(i / invite-01, ARG0, p3 / person)
(i / invite-01, ARG2, v / visit-01)
(n / name, op, "Auye")
(n / name, op, "Casymier")
(n / name, op, "Muba")
(n2 / name, op, "Gabon")
(n2 / name, op, "Republic")
(n3 / name, op, "China")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(n5 / name, op, "Council")
(n5 / name, op, "State")
(p / person, name, n / name)
(p3 / person, name, n4 / name)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, c5 / country)
(v / visit-01, mod, f / formal)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),He,he,false), Span(15,16,List(1),pay,pay-01,false), Span(4,7,List(6, 5, 4, 3, 2),Casymier Auye Muba,(person :name (name :op "Casymier" :op "Auye" :op "Muba")),false), Span(1,2,List(7),also,also,false), Span(17,18,List(8),formal,formal,false), Span(39,41,List(12, 11, 10, 9),State Council,(government-organization :name (name :op "Council" :op "State")),false), Span(31,32,List(13),invitation,invigorate-01,false), Span(0,29,List(15, 14),He also announced that Casymier Auye Muba , premier of the Gabon Republic , would pay a formal , friendly visit to China from September 6th to the 11th,(ordinal-entity :value 319.0),false), Span(0,25,List(18, 17, 16),He also announced that Casymier Auye Muba , premier of the Gabon Republic , would pay a formal , friendly visit to China from September,(date-entity :month 9 :day 6),false), Span(22,23,List(21, 20, 19),China,(country :name (name :op "China")),false), Span(2,3,List(22),announced,announce-01,false), Span(33,35,List(26, 25, 24, 23),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(12,13,List(28, 27),Republic,(include-91 :ARG2 republic),false), Span(20,21,List(29),visit,visit-01,false)),Map(2 -> person, 5 -> "Auye", 27 -> include-91, 12 -> "State", 8 -> formal, 15 -> 319.0, 21 -> "China", 18 -> 6, 24 -> name, 7 -> also, 1 -> pay-01, 17 -> 9, 23 -> person, 26 -> "Li", 4 -> "Casymier", 11 -> "Council", 14 -> ordinal-entity, 29 -> visit-01, 20 -> name, 28 -> republic, 6 -> "Muba", 9 -> government-organization, 0 -> he, 22 -> announce-01, 16 -> date-entity, 19 -> country, 10 -> name, 3 -> name, 25 -> "Peng", 13 -> invigorate-01),Map(n -> name, h -> he, p2 -> person, n4 -> name, v -> visit-01, d -> date-entity, p -> pay-01, g -> government-organization, n3 -> name, a -> also, i2 -> include-91, r -> republic, a2 -> announce-01, i -> invigorate-01, c -> country, 6 -> 6, f -> formal, 9 -> 9, o -> ordinal-entity, p3 -> person, 3 -> 319.0, n2 -> name))),[Ljava.lang.String;@72d38a1c,Annotation([Ljava.lang.String;@49a985c2,[Ljava.lang.String;@12227083,[Ljava.lang.String;@2034bbb6),Annotation([Ljava.lang.String;@4ed946c6,[Ljava.lang.String;@4b5b4d4a,[Ledu.cmu.lti.nlp.amr.Dependency;@4afc9aca),Annotation([Ljava.lang.String;@4f106128,[Ljava.lang.String;@4bfbe17a,[Ljava.lang.String;@5adbd452),Annotation([Ljava.lang.String;@74df2f09,[Ljava.lang.String;@388a099b,[Ledu.cmu.lti.nlp.amr.Entity;@2c6edfc1))
AMR:
(a2 / announce-01, ARG0, h / he)
(a2 / announce-01, ARG1, p / pay-01)
(a2 / announce-01, mod, a / also)
(c / country, name, n3 / name)
(d / date-entity, day, 6 / 6)
(d / date-entity, month, 9 / 9)
(g / government-organization, name, n2 / name)
(g / government-organization, op, p / pay-01)
(i / invigorate-01, ARG0, p3 / person)
(i / invigorate-01, ARG1, d / date-entity)
(i / invigorate-01, ARG6, o / ordinal-entity)
(i2 / include-91, ARG1, p3 / person)
(i2 / include-91, ARG2, r / republic)
(n / name, op, "Auye")
(n / name, op, "Casymier")
(n / name, op, "Muba")
(n2 / name, op, "Council")
(n2 / name, op, "State")
(n3 / name, op, "China")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(o / ordinal-entity, value, 3 / 319.0)
(p / pay-01, ARG0, p2 / person)
(p / pay-01, ARG1, v / visit-01)
(p2 / person, name, n / name)
(p3 / person, name, n4 / name)
(v / visit-01, ARG0, p3 / person)
(v / visit-01, ARG1, c / country)
(v / visit-01, mod, f / formal)

Decoded in 4,072,217 microseconds
Sentence: At the invitation of Peng Li , premier of the State Council , premier and first vice-president of the Tanzania United Republic , John Malsela will pay an official visit to China from September 9th to the 13th .

Oracle Span 1:  and => (have-org-role-91 :ARG2 and)
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  invitation => invite-01
Oracle Span 4:  John Malsela => (person :name (name :op "Malsela" :op "John"))
Oracle Span 5:  official => official
Oracle Span 6:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 8:  premier => premier
Oracle Span 9:  president => president
Oracle Span 10:  September => 9
Oracle Span 11:  State Council => (government-organization :name (name :op "Council" :op "State"))
Oracle Span 12:  Tanzania United Republic => (country :name (name :op "Republic" :op "United" :op "Tanzania"))
Oracle Span 13:  vice => vice
Oracle Span 14:  visit => visit-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (organization :name (name :op "State" :op "Council"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 14-15:  and => and
Span 0-16:  At the invitation of Peng Li , premier of the State Council , premier and first => (ordinal-entity :value 1)
Span 0-34:  At the invitation of Peng Li , premier of the State Council , premier and first vice-president of the Tanzania United Republic , John Malsela will pay an official visit to China from September => (date-entity :month 9 :day 9)
Span 0-38:  At the invitation of Peng Li , premier of the State Council , premier and first vice-president of the Tanzania United Republic , John Malsela will pay an official visit to China from September 9th to the 13th => (ordinal-entity :value 494.0)
Span 31-32:  China => (country :name (name :op "China"))
Span 2-3:  invitation => invigorate-01
Span 23-25:  John Malsela => (person :name (name :op "John" :op "Malsela"))
Span 28-29:  official => (person :ARG0-of (have-org-role-91 :ARG2 official))
Span 26-27:  pay => pay-01
Span 4-6:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 7-8:  premier => premier
Span 21-22:  Republic => (include-91 :ARG2 republic)
Span 10-12:  State Council => (government-organization :name (name :op "Council" :op "State"))
Span 19-20:  Tanzania => (country :name (name :op "Tanzania"))
Span 1-2:  the => (country :name (name :op "North"))
Span 20-21:  United => (company :name (name :op "Services" :op "United" :op "Energy"))
Span 16-17:  vice-president => (president :mod vice)
Span 29-30:  visit => visit-01

Langrangian relaxation converged after 77 iterations. Delta = 0.0
Oracle Span 14-15:  and => (have-org-role-91 :ARG2 and)
Oracle Span 33-34:  China => (country :name (name :op "China"))
Oracle Span 2-3:  invitation => invite-01
Oracle Span 25-27:  John Malsela => (person :name (name :op "Malsela" :op "John"))
Oracle Span 30-31:  official => official
Oracle Span 4-6:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7-8:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 13-14:  premier => premier
Oracle Span 18-19:  president => president
Oracle Span 35-36:  September => 9
Oracle Span 10-12:  State Council => (government-organization :name (name :op "Council" :op "State"))
Oracle Span 21-24:  Tanzania United Republic => (country :name (name :op "Republic" :op "United" :op "Tanzania"))
Oracle Span 16-17:  vice => vice
Oracle Span 31-32:  visit => visit-01

Dependencies:
1	At	_	IN	IN	_	27	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	invitation	_	NN	NN	_	1	pobj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	Peng	_	NNP	NNP	_	6	nn	_	_
6	Li	_	NNP	NNP	_	4	pobj	_	_
7	,	_	,	,	_	3	punct	_	_
8	premier	_	NN	NN	_	3	conj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	State	_	NNP	NNP	_	12	nn	_	_
12	Council	_	NNP	NNP	_	9	pobj	_	_
13	,	_	,	,	_	12	punct	_	_
14	premier	_	NN	NN	_	12	appos	_	_
15	and	_	CC	CC	_	3	cc	_	_
16	first	_	JJ	JJ	_	17	amod	_	_
17	vice-president	_	NN	NN	_	3	conj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	22	det	_	_
20	Tanzania	_	NNP	NNP	_	22	nn	_	_
21	United	_	NNP	NNP	_	22	nn	_	_
22	Republic	_	NNP	NNP	_	18	pobj	_	_
23	,	_	,	,	_	27	punct	_	_
24	John	_	NNP	NNP	_	25	nn	_	_
25	Malsela	_	NNP	NNP	_	27	nsubj	_	_
26	will	_	MD	MD	_	27	aux	_	_
27	pay	_	VB	VB	_	0	root	_	_
28	an	_	DT	DT	_	30	det	_	_
29	official	_	JJ	JJ	_	30	amod	_	_
30	visit	_	NN	NN	_	27	dobj	_	_
31	to	_	TO	TO	_	27	prep	_	_
32	China	_	NNP	NNP	_	31	pobj	_	_
33	from	_	IN	IN	_	27	prep	_	_
34	September	_	NNP	NNP	_	35	nn	_	_
35	9th	_	NNP	NNP	_	33	pobj	_	_
36	to	_	TO	TO	_	35	prep	_	_
37	the	_	DT	DT	_	38	det	_	_
38	13th	_	NN	NN	_	36	pobj	_	_
39	.	_	.	.	_	27	punct	_	_

Oracle:
(a / and, op, p5 / premier)
(a / and, op, p6 / president)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(g2 / government-organization, name, n5 / name)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, a / and)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, g2 / government-organization)
(h2 / have-org-role-91, ARG2, p2 / premier)
(i / invite-01, ARG0, p / person)
(i / invite-01, ARG2, v / visit-01)
(n / name, op, "John")
(n / name, op, "Malsela")
(n2 / name, op, "Republic")
(n2 / name, op, "Tanzania")
(n2 / name, op, "United")
(n3 / name, op, "China")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(n5 / name, op, "Council")
(n5 / name, op, "State")
(p / person, name, n4 / name)
(p4 / person, name, n / name)
(p6 / president, mod, v2 / vice)
(v / visit-01, ARG0, p4 / person)
(v / visit-01, ARG1, c4 / country)
(v / visit-01, mod, o2 / official)

Input(Some(Graph(null,ArrayBuffer(Span(10,12,List(3, 2, 1, 0),State Council,(government-organization :name (name :op "Council" :op "State")),false), Span(20,21,List(8, 7, 6, 5, 4),United,(company :name (name :op "Services" :op "United" :op "Energy")),false), Span(21,22,List(10, 9),Republic,(include-91 :ARG2 republic),false), Span(16,17,List(12, 11),vice-president,(president :mod vice),false), Span(26,27,List(13),pay,pay-01,false), Span(1,2,List(16, 15, 14),the,(country :name (name :op "North")),false), Span(4,6,List(20, 19, 18, 17),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(0,34,List(23, 22, 21),At the invitation of Peng Li , premier of the State Council , premier and first vice-president of the Tanzania United Republic , John Malsela will pay an official visit to China from September,(date-entity :month 9 :day 9),false), Span(0,16,List(25, 24),At the invitation of Peng Li , premier of the State Council , premier and first,(ordinal-entity :value 1),false), Span(14,15,List(26),and,and,false), Span(29,30,List(27),visit,visit-01,false), Span(7,8,List(28),premier,premier,false), Span(19,20,List(31, 30, 29),Tanzania,(country :name (name :op "Tanzania")),false), Span(23,25,List(35, 34, 33, 32),John Malsela,(person :name (name :op "John" :op "Malsela")),false), Span(0,38,List(37, 36),At the invitation of Peng Li , premier of the State Council , premier and first vice-president of the Tanzania United Republic , John Malsela will pay an official visit to China from September 9th to the 13th,(ordinal-entity :value 494.0),false), Span(28,29,List(40, 39, 38),official,(person :ARG0-of (have-org-role-91 :ARG2 official)),false), Span(2,3,List(41),invitation,invigorate-01,false), Span(31,32,List(44, 43, 42),China,(country :name (name :op "China")),false)),Map(39 -> have-org-role-91, 30 -> name, 2 -> "Council", 5 -> name, 33 -> name, 27 -> visit-01, 12 -> vice, 8 -> "Energy", 15 -> name, 42 -> country, 36 -> ordinal-entity, 21 -> date-entity, 18 -> name, 24 -> ordinal-entity, 41 -> invigorate-01, 35 -> "Malsela", 7 -> "United", 1 -> name, 17 -> person, 44 -> "China", 23 -> 9, 38 -> person, 26 -> and, 4 -> company, 11 -> president, 32 -> person, 14 -> country, 29 -> country, 20 -> "Li", 34 -> "John", 28 -> premier, 6 -> "Services", 40 -> official, 43 -> name, 9 -> include-91, 0 -> government-organization, 22 -> 9, 16 -> "North", 37 -> 494.0, 19 -> "Peng", 10 -> republic, 3 -> "State", 31 -> "Tanzania", 25 -> 1, 13 -> pay-01),Map(n -> name, v2 -> visit-01, h -> have-org-role-91, p5 -> person, o3 -> official, n7 -> name, 92 -> 9, p2 -> pay-01, c4 -> country, n4 -> name, v -> vice, d -> date-entity, 1 -> 1, p -> president, g -> government-organization, n3 -> name, a -> and, c3 -> country, 4 -> 494.0, p4 -> premier, o2 -> ordinal-entity, n6 -> name, i2 -> invigorate-01, r -> republic, i -> include-91, c -> company, p6 -> person, 9 -> 9, o -> ordinal-entity, p3 -> person, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@14d95866,Annotation([Ljava.lang.String;@1ea349b9,[Ljava.lang.String;@28250c61,[Ljava.lang.String;@5595b450),Annotation([Ljava.lang.String;@bd1ccec,[Ljava.lang.String;@fbba2ae,[Ledu.cmu.lti.nlp.amr.Dependency;@ffdf13c),Annotation([Ljava.lang.String;@7732e3a7,[Ljava.lang.String;@7201f701,[Ljava.lang.String;@20fd953d),Annotation([Ljava.lang.String;@40e9e40f,[Ljava.lang.String;@2026086e,[Ledu.cmu.lti.nlp.amr.Entity;@5d624a94))
AMR:
(a / and, location, c3 / country)
(a / and, op, o / ordinal-entity)
(a / and, op, p / president)
(a / and, op, p4 / premier)
(a / and, op, p5 / person)
(c / company, location, c3 / country)
(c / company, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(c4 / country, name, n7 / name)
(d / date-entity, day, 92 / 9)
(d / date-entity, month, 9 / 9)
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG0, p6 / person)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, o3 / official)
(h / have-org-role-91, ARG6, p2 / pay-01)
(i / include-91, ARG1, p5 / person)
(i / include-91, ARG2, r / republic)
(i2 / invigorate-01, ARG0, p3 / person)
(i2 / invigorate-01, ARG1, p2 / pay-01)
(i2 / invigorate-01, ARG6, c2 / country)
(n / name, op, "Council")
(n / name, op, "State")
(n2 / name, op, "Energy")
(n2 / name, op, "Services")
(n2 / name, op, "United")
(n3 / name, op, "North")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(n5 / name, op, "Tanzania")
(n6 / name, op, "John")
(n6 / name, op, "Malsela")
(n7 / name, op, "China")
(o / ordinal-entity, value, 1 / 1)
(o2 / ordinal-entity, value, 4 / 494.0)
(p / president, mod, v / vice)
(p2 / pay-01, ARG1, d / date-entity)
(p2 / pay-01, ARG6, p5 / person)
(p3 / person, name, n4 / name)
(p4 / premier, poss, g / government-organization)
(p5 / person, name, n6 / name)
(v2 / visit-01, ARG0, p3 / person)
(v2 / visit-01, ARG1, o2 / ordinal-entity)

Decoded in 8,157,663 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@4d23d891,Annotation([Ljava.lang.String;@6c23265b,[Ljava.lang.String;@550f1f34,[Ljava.lang.String;@3f636702),Annotation([Ljava.lang.String;@6cd7d72f,[Ljava.lang.String;@19b33510,[Ledu.cmu.lti.nlp.amr.Dependency;@34687fad),Annotation([Ljava.lang.String;@10175555,[Ljava.lang.String;@42ab96d7,[Ljava.lang.String;@42302027),Annotation([Ljava.lang.String;@35d2aadb,[Ljava.lang.String;@1fc5ecc9,[Ledu.cmu.lti.nlp.amr.Entity;@146ccc8))
AMR:


Decoded in 26,942 microseconds
Sentence: Xinhua News Agency , Bishket , April 23rd , by reporters Menjun Ju and Xiaoguang Hu

Oracle Span 1:  and => and
Oracle Span 2:  April => 4
Oracle Span 3:  Bishket => (city :name (name :op "Bishket"))
Oracle Span 4:  Menjun Ju => (person :name (name :op "Ju" :op "Menjun"))
Oracle Span 5:  reporters => report-01
Oracle Span 6:  Xiaoguang Hu => (person :name (name :op "Hu" :op "Xiaoguang"))
Oracle Span 7:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Menjun" :op "Ju"))
NER Entity: (person :name (name :op "Xiaoguang" :op "Hu"))
Spans:
Span 13-14:  and => and
Span 15-16:  Hu => (name :op "Hu")
Span 11-13:  Menjun Ju => (person :name (name :op "Menjun" :op "Ju"))
Span 0-3:  Xinhua News Agency => (publication :name (name :op "News" :op "Agency" :op "Xinhua"))
Span 0-7:  Xinhua News Agency , Bishket , April => (date-entity :month 4 :day 23)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 6-7:  April => 4
Oracle Span 4-5:  Bishket => (city :name (name :op "Bishket"))
Oracle Span 11-13:  Menjun Ju => (person :name (name :op "Ju" :op "Menjun"))
Oracle Span 10-11:  reporters => report-01
Oracle Span 14-16:  Xiaoguang Hu => (person :name (name :op "Hu" :op "Xiaoguang"))
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Bishket	_	NNP	NNP	_	3	appos	_	_
6	,	_	,	,	_	3	punct	_	_
7	April	_	NNP	NNP	_	8	nn	_	_
8	23rd	_	NNP	NNP	_	3	appos	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporters	_	NNS	NNS	_	10	pobj	_	_
12	Menjun	_	NNP	NNP	_	13	nn	_	_
13	Ju	_	NNP	NNP	_	3	dep	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	Xiaoguang	_	NNP	NNP	_	16	nn	_	_
16	Hu	_	NNP	NNP	_	13	conj	_	_

Oracle:
(a / and, op, p / person)
(a / and, op, p2 / person)
(c2 / city, name, n4 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Ju")
(n2 / name, op, "Menjun")
(n3 / name, op, "Hu")
(n3 / name, op, "Xiaoguang")
(n4 / name, op, "Bishket")
(p / person, name, n2 / name)
(p2 / person, name, n3 / name)
(p3 / publication, name, n / name)
(r / report-01, ARG0, p / person)
(r / report-01, ARG0, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),Hu,(name :op "Hu"),false), Span(11,13,List(5, 4, 3, 2),Menjun Ju,(person :name (name :op "Menjun" :op "Ju")),false), Span(13,14,List(6),and,and,false), Span(0,7,List(9, 8, 7),Xinhua News Agency , Bishket , April,(date-entity :month 4 :day 23),false), Span(0,3,List(14, 13, 12, 11, 10),Xinhua News Agency,(publication :name (name :op "News" :op "Agency" :op "Xinhua")),false)),Map(2 -> person, 5 -> "Ju", 12 -> "News", 8 -> 4, 7 -> date-entity, 1 -> "Hu", 4 -> "Menjun", 11 -> name, 14 -> "Xinhua", 6 -> and, 0 -> name, 9 -> 23, 3 -> name, 10 -> publication, 13 -> "Agency"),Map(n -> name, 2 -> 23, p2 -> publication, d -> date-entity, p -> person, n3 -> name, 4 -> 4, a -> and, n2 -> name))),[Ljava.lang.String;@26506fc3,Annotation([Ljava.lang.String;@4c9ae9cf,[Ljava.lang.String;@31a983f8,[Ljava.lang.String;@38b0df7e),Annotation([Ljava.lang.String;@1d3b91dc,[Ljava.lang.String;@674d725,[Ledu.cmu.lti.nlp.amr.Dependency;@7bbf3250),Annotation([Ljava.lang.String;@45ca4976,[Ljava.lang.String;@4be9562,[Ljava.lang.String;@2453a72f),Annotation([Ljava.lang.String;@267c3c47,[Ljava.lang.String;@316a4007,[Ledu.cmu.lti.nlp.amr.Entity;@418fc6cd))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / publication)
(a / and, time, d / date-entity)
(d / date-entity, day, 2 / 23)
(d / date-entity, month, 4 / 4)
(n / name, op, "Hu")
(n / name, poss, a / and)
(n2 / name, op, "Ju")
(n2 / name, op, "Menjun")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(p / person, name, n2 / name)
(p2 / publication, name, n3 / name)

Decoded in 3,286,653 microseconds
Sentence: Principles of parties concerned from China and Kirghizia signed six documents here today .

Oracle Span 1:  and => and
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  concerned => concern-01
Oracle Span 4:  documents => document
Oracle Span 5:  here => here
Oracle Span 6:  Kirghizia => (country :name (name :op "Kirghizia"))
Oracle Span 7:  parties => party
Oracle Span 8:  Principles => principle
Oracle Span 9:  signed => sign-01
Oracle Span 10:  six => 6
Oracle Span 11:  today => today
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kirghizia"))
Spans:
Span 6-7:  and => and
Span 5-6:  China => (country :name (name :op "China"))
Span 3-4:  concerned => concern-01
Span 10-11:  documents => document
Span 11-12:  here => here
Span 2-3:  parties => party
Span 0-1:  Principles => 1
Span 0-1:  Principles => (principle :ARG0-of mean-01)
Span 0-13:  Principles of parties concerned from China and Kirghizia signed six documents here today => (date-entity :time today)
Span 8-9:  signed => sign-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 5-6:  China => (country :name (name :op "China"))
Oracle Span 3-4:  concerned => concern-01
Oracle Span 10-11:  documents => document
Oracle Span 11-12:  here => here
Oracle Span 7-8:  Kirghizia => (country :name (name :op "Kirghizia"))
Oracle Span 2-3:  parties => party
Oracle Span 0-1:  Principles => principle
Oracle Span 8-9:  signed => sign-01
Oracle Span 9-10:  six => 6
Oracle Span 12-13:  today => today

Dependencies:
1	Principles	_	NNS	NNS	_	9	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	parties	_	NNS	NNS	_	2	pobj	_	_
4	concerned	_	VBN	VBN	_	3	vmod	_	_
5	from	_	IN	IN	_	4	prep	_	_
6	China	_	NNP	NNP	_	5	pobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	Kirghizia	_	NNP	NNP	_	6	conj	_	_
9	signed	_	VBD	VBD	_	0	root	_	_
10	six	_	CD	CD	_	11	num	_	_
11	documents	_	NNS	NNS	_	12	npadvmod	_	_
12	here	_	RB	RB	_	9	advmod	_	_
13	today	_	NN	NN	_	9	tmod	_	_
14	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(c3 / concern-01, ARG1, p2 / party)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(d / document, quant, 6 / 6)
(n / name, op, "China")
(n2 / name, op, "Kirghizia")
(p / principle, poss, p2 / party)
(p2 / party, source, a / and)
(s / sign-01, ARG0, p / principle)
(s / sign-01, ARG1, d / document)
(s / sign-01, location, h / here)
(s / sign-01, time, t / today)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(3,4,List(3),concerned,concern-01,false), Span(0,1,List(4),Principles,1,false), Span(0,1,List(6, 5),Principles,(principle :ARG0-of mean-01),false), Span(6,7,List(7),and,and,false), Span(0,13,List(9, 8),Principles of parties concerned from China and Kirghizia signed six documents here today,(date-entity :time today),false), Span(10,11,List(10),documents,document,false), Span(8,9,List(11),signed,sign-01,false), Span(2,3,List(12),parties,party,false), Span(11,12,List(13),here,here,false)),Map(2 -> "China", 5 -> principle, 12 -> party, 8 -> date-entity, 7 -> and, 1 -> name, 4 -> 1, 11 -> sign-01, 6 -> mean-01, 0 -> country, 9 -> today, 3 -> concern-01, 10 -> document, 13 -> here),Map(n -> name, h -> here, t -> today, p2 -> party, s -> sign-01, m -> mean-01, d -> date-entity, 1 -> 1, p -> principle, a -> and, d2 -> document, c -> country, c2 -> concern-01))),[Ljava.lang.String;@1a0d1fb1,Annotation([Ljava.lang.String;@278a0cab,[Ljava.lang.String;@340a9bb7,[Ljava.lang.String;@3c335acf),Annotation([Ljava.lang.String;@4e313a6f,[Ljava.lang.String;@39299856,[Ledu.cmu.lti.nlp.amr.Dependency;@599e6be7),Annotation([Ljava.lang.String;@7fdda739,[Ljava.lang.String;@387818ef,[Ljava.lang.String;@4de6cc9e),Annotation([Ljava.lang.String;@678d4796,[Ljava.lang.String;@757bc031,[Ledu.cmu.lti.nlp.amr.Entity;@dbc1111))
AMR:
(1 / 1, location, h / here)
(a / and, op, 1 / 1)
(a / and, op, d2 / document)
(a / and, op, p / principle)
(c / country, name, n / name)
(c2 / concern-01, ARG0, c / country)
(c2 / concern-01, ARG1, p2 / party)
(c2 / concern-01, ARG2, a / and)
(d / date-entity, time, t / today)
(m / mean-01, ARG0, p / principle)
(m / mean-01, ARG1, d / date-entity)
(n / name, op, "China")
(s / sign-01, ARG1, p / principle)

Decoded in 3,489,895 microseconds
Sentence: Premier Peng Li and Kirghizian President Akayev attended the signing ceremony .

Oracle Span 1:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 2:  and => and
Oracle Span 3:  attended => attend-01
Oracle Span 4:  ceremony => ceremony
Oracle Span 5:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 6:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 8:  President => (have-org-role-91 :ARG2 president)
Oracle Span 9:  signing => sign-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (person :name (name :op "Akayev"))
Spans:
Span 6-7:  Akayev => (person :name (name :op "Akayev"))
Span 3-4:  and => and
Span 7-8:  attended => attend-01
Span 10-11:  ceremony => ceremony
Span 1-3:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 9-10:  signing => sign-02

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 6-7:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 3-4:  and => and
Oracle Span 7-8:  attended => attend-01
Oracle Span 10-11:  ceremony => ceremony
Oracle Span 4-5:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 1-3:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 0-1:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 5-6:  President => (have-org-role-91 :ARG2 president)
Oracle Span 9-10:  signing => sign-01

Dependencies:
1	Premier	_	NNP	NNP	_	3	nn	_	_
2	Peng	_	NNP	NNP	_	3	nn	_	_
3	Li	_	NNP	NNP	_	8	nsubj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	Kirghizian	_	NNP	NNP	_	7	nn	_	_
6	President	_	NNP	NNP	_	7	nn	_	_
7	Akayev	_	NNP	NNP	_	3	conj	_	_
8	attended	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	11	det	_	_
10	signing	_	NN	NN	_	11	nn	_	_
11	ceremony	_	NN	NN	_	8	dobj	_	_
12	.	_	.	.	_	8	punct	_	_

Oracle:
(a2 / attend-01, ARG0, a3 / and)
(a2 / attend-01, ARG1, c2 / ceremony)
(a3 / and, op, p / person)
(a3 / and, op, p3 / person)
(c / country, name, n4 / name)
(c2 / ceremony, mod, s / sign-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / premier)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, p4 / president)
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(n3 / name, op, "Akayev")
(n4 / name, op, "Kirghizia")
(p / person, name, n2 / name)
(p3 / person, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),signing,sign-02,false), Span(7,8,List(1),attended,attend-01,false), Span(3,4,List(2),and,and,false), Span(10,11,List(3),ceremony,ceremony,false), Span(6,7,List(6, 5, 4),Akayev,(person :name (name :op "Akayev")),false), Span(1,3,List(10, 9, 8, 7),Peng Li,(person :name (name :op "Peng" :op "Li")),false)),Map(2 -> and, 5 -> name, 8 -> name, 7 -> person, 1 -> attend-01, 4 -> person, 6 -> "Akayev", 9 -> "Peng", 0 -> sign-02, 10 -> "Li", 3 -> ceremony),Map(n -> name, p2 -> person, s -> sign-02, p -> person, a -> attend-01, a2 -> and, c -> ceremony, n2 -> name))),[Ljava.lang.String;@13985e7f,Annotation([Ljava.lang.String;@219286a2,[Ljava.lang.String;@66fb3de5,[Ljava.lang.String;@1f0e256a),Annotation([Ljava.lang.String;@4e34eb52,[Ljava.lang.String;@7b26d3a0,[Ledu.cmu.lti.nlp.amr.Dependency;@448dcd34),Annotation([Ljava.lang.String;@2ac695ba,[Ljava.lang.String;@434185cb,[Ljava.lang.String;@e37f5d0),Annotation([Ljava.lang.String;@24f97d4f,[Ljava.lang.String;@3a8c572f,[Ledu.cmu.lti.nlp.amr.Entity;@752ce268))
AMR:
(a / attend-01, ARG0, a2 / and)
(a / attend-01, ARG1, c / ceremony)
(a2 / and, op, p / person)
(a2 / and, op, p2 / person)
(c / ceremony, mod, s / sign-02)
(n / name, op, "Akayev")
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(p / person, name, n / name)
(p2 / person, name, n2 / name)

Decoded in 295,279 microseconds
Sentence: The six documents are : an agreement on Chinese providing a loan to the Kirghizia government , an agreement on forming a combined Economy and Trade Committee between the Sino - Kirghizian governments , an note exchange on the presenting of materials to Kirghizia by China , a cultural cooperation agreement between the two countries of China and Kirghizia , ratification letters on exchanging consular treaties between the two countries , an agreement on cooperating on the China Trade Promotion Council and the Kirghizian Chamber of Industry and Commerce .

Oracle Span 1:  agreement => agree-01
Oracle Span 2:  agreement => agree-01
Oracle Span 3:  agreement => agree-01
Oracle Span 4:  agreement => agree-01
Oracle Span 5:  and => and
Oracle Span 6:  and => and
Oracle Span 7:  Chamber of Industry and Commerce => (name :op "Commerce" :op "and" :op "Industry" :op "of" :op "Chamber")
Oracle Span 8:  China => (name :op "China")
Oracle Span 9:  combined => combine-01
Oracle Span 10:  consular => consul
Oracle Span 11:  cooperating => cooperate-01
Oracle Span 12:  countries => country
Oracle Span 13:  countries => country
Oracle Span 14:  cultural => culture
Oracle Span 15:  documents => document
Oracle Span 16:  Economy and Trade Committee => (government-organization :name (name :op "Committee" :op "Trade" :op "and" :op "Economy"))
Oracle Span 17:  exchange => exchange-01
Oracle Span 18:  exchanging => exchange-01
Oracle Span 19:  forming => form-01
Oracle Span 20:  government => government-organization
Oracle Span 21:  governments => government-organization
Oracle Span 22:  Kirghizia => (name :op "Kirghizia")
Oracle Span 23:  letters => letter
Oracle Span 24:  loan => loan-01
Oracle Span 25:  materials => material
Oracle Span 26:  note => note
Oracle Span 27:  of => include-91
Oracle Span 28:  presenting => present-01
Oracle Span 29:  ratification => ratify-01
Oracle Span 30:  six => 6
Oracle Span 31:  Trade Promotion Council => (name :op "Council" :op "Promotion" :op "Trade")
Oracle Span 32:  treaties => treaty
NER Entity: (country :name (name :op "Kirghizia"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 18-19:  agreement => agree-01
Span 50-51:  agreement => agree-01
Span 72-73:  agreement => agree-01
Span 6-7:  agreement => agree-01
Span 87-88:  and => (and :op (person :ARG0-of have-org-role-91))
Span 81-82:  and => and
Span 57-58:  and => and
Span 24-25:  and => and
Span 51-52:  between => between
Span 77-78:  China => (country :name (name :op "China"))
Span 56-57:  China => (country :name (name :op "China"))
Span 8-9:  Chinese => (country :name (name :op "China"))
Span 22-23:  combined => combine-01
Span 26-27:  Committee => "Committee"
Span 74-75:  cooperating => cooperate-01
Span 49-50:  cooperation => cooperate-01
Span 80-81:  Council => "Council"
Span 69-70:  countries => country
Span 54-55:  countries => country
Span 48-49:  cultural => culture
Span 2-3:  documents => document
Span 23-24:  Economy => economy
Span 36-37:  exchange => exchange-01
Span 63-64:  exchanging => exchange-01
Span 20-21:  forming => form-01
Span 15-16:  government => (government-organization :ARG0-of govern-01)
Span 32-33:  governments => (government-organization :ARG0-of govern-01)
Span 86-87:  Industry => 1
Span 61-62:  letters => letter
Span 11-12:  loan => loan-01
Span 41-42:  materials => material
Span 35-36:  note => note
Span 39-40:  presenting => present-01
Span 60-61:  ratification => ratify-01
Span 29-30:  Sino => between
Span 0-1:  The => 1
Span 65-66:  treaties => treaty

Langrangian relaxation converged after 67 iterations. Delta = 0.0
Oracle Span 6-7:  agreement => agree-01
Oracle Span 18-19:  agreement => agree-01
Oracle Span 50-51:  agreement => agree-01
Oracle Span 72-73:  agreement => agree-01
Oracle Span 57-58:  and => and
Oracle Span 81-82:  and => and
Oracle Span 84-89:  Chamber of Industry and Commerce => (name :op "Commerce" :op "and" :op "Industry" :op "of" :op "Chamber")
Oracle Span 45-46:  China => (name :op "China")
Oracle Span 22-23:  combined => combine-01
Oracle Span 64-65:  consular => consul
Oracle Span 74-75:  cooperating => cooperate-01
Oracle Span 54-55:  countries => country
Oracle Span 69-70:  countries => country
Oracle Span 48-49:  cultural => culture
Oracle Span 2-3:  documents => document
Oracle Span 23-27:  Economy and Trade Committee => (government-organization :name (name :op "Committee" :op "Trade" :op "and" :op "Economy"))
Oracle Span 36-37:  exchange => exchange-01
Oracle Span 63-64:  exchanging => exchange-01
Oracle Span 20-21:  forming => form-01
Oracle Span 15-16:  government => government-organization
Oracle Span 32-33:  governments => government-organization
Oracle Span 14-15:  Kirghizia => (name :op "Kirghizia")
Oracle Span 61-62:  letters => letter
Oracle Span 11-12:  loan => loan-01
Oracle Span 41-42:  materials => material
Oracle Span 35-36:  note => note
Oracle Span 40-41:  of => include-91
Oracle Span 39-40:  presenting => present-01
Oracle Span 60-61:  ratification => ratify-01
Oracle Span 1-2:  six => 6
Oracle Span 78-81:  Trade Promotion Council => (name :op "Council" :op "Promotion" :op "Trade")
Oracle Span 65-66:  treaties => treaty

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	six	_	CD	CD	_	3	num	_	_
3	documents	_	NNS	NNS	_	7	nsubj	_	_
4	are	_	VBP	VBP	_	7	cop	_	_
5	:	_	:	:	_	7	punct	_	_
6	an	_	DT	DT	_	7	det	_	_
7	agreement	_	NN	NN	_	0	root	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	Chinese	_	NNP	NNP	_	8	pobj	_	_
10	providing	_	VBG	VBG	_	9	vmod	_	_
11	a	_	DT	DT	_	12	det	_	_
12	loan	_	NN	NN	_	10	dobj	_	_
13	to	_	TO	TO	_	10	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	Kirghizia	_	NNP	NNP	_	16	nn	_	_
16	government	_	NN	NN	_	13	pobj	_	_
17	,	_	,	,	_	9	punct	_	_
18	an	_	DT	DT	_	19	det	_	_
19	agreement	_	NN	NN	_	9	conj	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	forming	_	VBG	VBG	_	20	pcomp	_	_
22	a	_	DT	DT	_	24	det	_	_
23	combined	_	JJ	JJ	_	24	amod	_	_
24	Economy	_	NN	NN	_	21	dobj	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	Trade	_	NNP	NNP	_	27	nn	_	_
27	Committee	_	NNP	NNP	_	24	conj	_	_
28	between	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	30	det	_	_
30	Sino	_	NNP	NNP	_	28	pobj	_	_
31	-	_	:	:	_	27	punct	_	_
32	Kirghizian	_	JJ	JJ	_	33	amod	_	_
33	governments	_	NNS	NNS	_	27	dep	_	_
34	,	_	,	,	_	33	punct	_	_
35	an	_	DT	DT	_	37	det	_	_
36	note	_	NN	NN	_	37	nn	_	_
37	exchange	_	NN	NN	_	33	appos	_	_
38	on	_	IN	IN	_	21	prep	_	_
39	the	_	DT	DT	_	40	det	_	_
40	presenting	_	NN	NN	_	38	pobj	_	_
41	of	_	IN	IN	_	40	prep	_	_
42	materials	_	NNS	NNS	_	41	pobj	_	_
43	to	_	TO	TO	_	42	prep	_	_
44	Kirghizia	_	NNP	NNP	_	43	pobj	_	_
45	by	_	IN	IN	_	21	prep	_	_
46	China	_	NNP	NNP	_	45	pobj	_	_
47	,	_	,	,	_	9	punct	_	_
48	a	_	DT	DT	_	51	det	_	_
49	cultural	_	JJ	JJ	_	51	amod	_	_
50	cooperation	_	NN	NN	_	51	nn	_	_
51	agreement	_	NN	NN	_	9	conj	_	_
52	between	_	IN	IN	_	51	prep	_	_
53	the	_	DT	DT	_	55	det	_	_
54	two	_	CD	CD	_	55	num	_	_
55	countries	_	NNS	NNS	_	52	pobj	_	_
56	of	_	IN	IN	_	55	prep	_	_
57	China	_	NNP	NNP	_	56	pobj	_	_
58	and	_	CC	CC	_	57	cc	_	_
59	Kirghizia	_	NNP	NNP	_	57	conj	_	_
60	,	_	,	,	_	9	punct	_	_
61	ratification	_	NN	NN	_	62	nn	_	_
62	letters	_	NNS	NNS	_	9	conj	_	_
63	on	_	IN	IN	_	62	prep	_	_
64	exchanging	_	JJ	JJ	_	66	amod	_	_
65	consular	_	NN	NN	_	66	nn	_	_
66	treaties	_	NNS	NNS	_	63	pobj	_	_
67	between	_	IN	IN	_	66	prep	_	_
68	the	_	DT	DT	_	70	det	_	_
69	two	_	CD	CD	_	70	num	_	_
70	countries	_	NNS	NNS	_	67	pobj	_	_
71	,	_	,	,	_	9	punct	_	_
72	an	_	DT	DT	_	73	det	_	_
73	agreement	_	NN	NN	_	9	conj	_	_
74	on	_	IN	IN	_	73	prep	_	_
75	cooperating	_	VBG	VBG	_	74	pcomp	_	_
76	on	_	IN	IN	_	75	prep	_	_
77	the	_	DT	DT	_	81	det	_	_
78	China	_	NNP	NNP	_	81	nn	_	_
79	Trade	_	NNP	NNP	_	81	nn	_	_
80	Promotion	_	NNP	NNP	_	81	nn	_	_
81	Council	_	NNP	NNP	_	76	pobj	_	_
82	and	_	CC	CC	_	9	cc	_	_
83	the	_	DT	DT	_	85	det	_	_
84	Kirghizian	_	NNP	NNP	_	85	nn	_	_
85	Chamber	_	NNP	NNP	_	9	conj	_	_
86	of	_	IN	IN	_	85	prep	_	_
87	Industry	_	NNP	NNP	_	86	pobj	_	_
88	and	_	CC	CC	_	87	cc	_	_
89	Commerce	_	NNP	NNP	_	87	conj	_	_
90	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, a2 / agree-01)
(a / and, op, a3 / agree-01)
(a / and, op, a5 / agree-01)
(a / and, op, a7 / agree-01)
(a / and, op, e2 / exchange-01)
(a / and, op, l2 / letter)
(a2 / agree-01, ARG1, l / loan-01)
(a3 / agree-01, ARG1, f / form-01)
(a7 / agree-01, ARG1, c11 / cooperate-01)
(a8 / and, op, g10 / government-organization)
(a8 / and, op, g9 / government-organization)
(c11 / cooperate-01, ARG2, a8 / and)
(c5 / country, name, n4 / name)
(c6 / combine-01, ARG3, g4 / government-organization)
(c7 / country, name, n6 / name)
(d / document, quant, 6 / 6)
(e2 / exchange-01, mod, n7 / note)
(e2 / exchange-01, topic, p3 / present-01)
(e3 / exchange-01, ARG0, c7 / country)
(e3 / exchange-01, ARG1, t / treaty)
(e3 / exchange-01, ARG2, c5 / country)
(f / form-01, ARG1, g4 / government-organization)
(g10 / government-organization, name, n9 / name)
(g10 / government-organization, poss, c5 / country)
(g4 / government-organization, name, n5 / name)
(g9 / government-organization, name, n8 / name)
(g9 / government-organization, poss, c7 / country)
(i / include-91, ARG1, a / and)
(i / include-91, ARG2, d / document)
(l2 / letter, topic, e3 / exchange-01)
(n4 / name, op, "Kirghizia")
(n5 / name, op, "Committee")
(n5 / name, op, "Economy")
(n5 / name, op, "Trade")
(n5 / name, op, "and")
(n6 / name, op, "China")
(n8 / name, op, "Council")
(n8 / name, op, "Promotion")
(n8 / name, op, "Trade")
(n9 / name, op, "Chamber")
(n9 / name, op, "Commerce")
(n9 / name, op, "Industry")
(n9 / name, op, "and")
(n9 / name, op, "of")
(p3 / present-01, ARG0, c7 / country)
(p3 / present-01, ARG1, m / material)
(p3 / present-01, ARG2, c5 / country)
(r / ratify-01, ARG0, l2 / letter)
(t / treaty, mod, c10 / consul)

Input(Some(Graph(null,ArrayBuffer(Span(77,78,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(8,9,List(5, 4, 3),Chinese,(country :name (name :op "China")),false), Span(18,19,List(6),agreement,agree-01,false), Span(50,51,List(7),agreement,agree-01,false), Span(60,61,List(8),ratification,ratify-01,false), Span(39,40,List(9),presenting,present-01,false), Span(41,42,List(10),materials,material,false), Span(69,70,List(11),countries,country,false), Span(72,73,List(12),agreement,agree-01,false), Span(36,37,List(13),exchange,exchange-01,false), Span(87,88,List(16, 15, 14),and,(and :op (person :ARG0-of have-org-role-91)),false), Span(6,7,List(17),agreement,agree-01,false), Span(54,55,List(18),countries,country,false), Span(48,49,List(19),cultural,culture,false), Span(63,64,List(20),exchanging,exchange-01,false), Span(26,27,List(21),Committee,"Committee",false), Span(23,24,List(22),Economy,economy,false), Span(49,50,List(23),cooperation,cooperate-01,false), Span(15,16,List(25, 24),government,(government-organization :ARG0-of govern-01),false), Span(2,3,List(26),documents,document,false), Span(32,33,List(28, 27),governments,(government-organization :ARG0-of govern-01),false), Span(20,21,List(29),forming,form-01,false), Span(22,23,List(30),combined,combine-01,false), Span(81,82,List(31),and,and,false), Span(56,57,List(34, 33, 32),China,(country :name (name :op "China")),false), Span(74,75,List(35),cooperating,cooperate-01,false), Span(65,66,List(36),treaties,treaty,false), Span(57,58,List(37),and,and,false), Span(0,1,List(38),The,1,false), Span(61,62,List(39),letters,letter,false), Span(86,87,List(40),Industry,1,false), Span(24,25,List(41),and,and,false), Span(29,30,List(42),Sino,between,false), Span(35,36,List(43),note,note,false), Span(51,52,List(44),between,between,false), Span(11,12,List(45),loan,loan-01,false), Span(80,81,List(46),Council,"Council",false)),Map(45 -> loan-01, 39 -> letter, 30 -> combine-01, 2 -> "China", 5 -> "China", 33 -> name, 27 -> government-organization, 12 -> agree-01, 8 -> ratify-01, 15 -> person, 42 -> between, 36 -> treaty, 21 -> "Committee", 18 -> country, 24 -> government-organization, 41 -> and, 35 -> cooperate-01, 7 -> agree-01, 1 -> name, 17 -> agree-01, 44 -> between, 23 -> cooperate-01, 38 -> 1, 26 -> document, 4 -> name, 11 -> country, 32 -> country, 14 -> and, 29 -> form-01, 20 -> exchange-01, 46 -> "Council", 34 -> "China", 28 -> govern-01, 6 -> agree-01, 40 -> 1, 43 -> note, 9 -> present-01, 0 -> country, 22 -> economy, 16 -> have-org-role-91, 37 -> and, 19 -> culture, 10 -> material, 3 -> country, 31 -> and, 25 -> govern-01, 13 -> exchange-01),Map(a7 -> and, e -> exchange-01, n -> name, c8 -> country, h -> have-org-role-91, g3 -> government-organization, 12 -> 1, t -> treaty, b -> between, b2 -> between, c7 -> combine-01, p2 -> person, e2 -> exchange-01, n4 -> note, a3 -> agree-01, c4 -> country, a6 -> and, m -> material, d -> document, C -> "Committee", 1 -> 1, g2 -> govern-01, p -> present-01, g -> government-organization, n3 -> name, c3 -> country, a -> agree-01, a5 -> agree-01, C2 -> "Council", c6 -> cooperate-01, a8 -> and, c9 -> cooperate-01, l2 -> loan-01, r -> ratify-01, a2 -> agree-01, c -> country, l -> letter, f -> form-01, e3 -> economy, g4 -> govern-01, n2 -> name, c2 -> country, a4 -> and, c5 -> culture))),[Ljava.lang.String;@53a9e163,Annotation([Ljava.lang.String;@eff9dce,[Ljava.lang.String;@ecfc31e,[Ljava.lang.String;@59a87d2a),Annotation([Ljava.lang.String;@45962d85,[Ljava.lang.String;@3775c914,[Ledu.cmu.lti.nlp.amr.Dependency;@47522bd7),Annotation([Ljava.lang.String;@5d095f3a,[Ljava.lang.String;@2987bb1b,[Ljava.lang.String;@3023fa56),Annotation([Ljava.lang.String;@66796316,[Ljava.lang.String;@711e106c,[Ledu.cmu.lti.nlp.amr.Entity;@65d53237))
AMR:
(a / agree-01, ARG1, f / form-01)
(a2 / agree-01, ARG1, c6 / cooperate-01)
(a2 / agree-01, location, b2 / between)
(a3 / agree-01, ARG0, a7 / and)
(a3 / agree-01, ARG1, c9 / cooperate-01)
(a4 / and, op, 12 / 1)
(a4 / and, op, p2 / person)
(a5 / agree-01, ARG1, d / document)
(a5 / agree-01, ARG2, c2 / country)
(a6 / and, op, a / agree-01)
(a6 / and, op, a2 / agree-01)
(a6 / and, op, c / country)
(a6 / and, op, l / letter)
(a7 / and, op, c8 / country)
(a8 / and, op, C / "Committee")
(a8 / and, op, b / between)
(b2 / between, op, c4 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c6 / cooperate-01, ARG0, c3 / country)
(c6 / cooperate-01, ARG1, c5 / culture)
(c7 / combine-01, ARG1, C / "Committee")
(c8 / country, name, n3 / name)
(c9 / cooperate-01, ARG0, a6 / and)
(c9 / cooperate-01, ARG1, C2 / "Council")
(d / document, mod, 1 / 1)
(e / exchange-01, ARG0, c8 / country)
(e / exchange-01, ARG1, n4 / note)
(e2 / exchange-01, ARG0, c / country)
(e2 / exchange-01, ARG1, t / treaty)
(f / form-01, ARG1, e3 / economy)
(f / form-01, ARG2, a8 / and)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c4 / country)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c3 / country)
(l / letter, mod, r / ratify-01)
(l2 / loan-01, ARG1, g3 / government-organization)
(l2 / loan-01, ARG2, g / government-organization)
(n / name, op, "China")
(n2 / name, op, "China")
(n3 / name, op, "China")
(p / present-01, ARG1, m / material)
(r / ratify-01, ARG1, p / present-01)

Decoded in 41,603,471 microseconds
Sentence: After the signing ceremony , Kirghizian President Akayev and Premier Peng Li respectively answered questions from reporters .

Oracle Span 1:  After => after
Oracle Span 2:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 3:  and => and
Oracle Span 4:  answered => answer-01
Oracle Span 5:  ceremony => ceremony
Oracle Span 6:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 7:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 8:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 9:  President => (have-org-role-91 :ARG2 president)
Oracle Span 10:  questions => (thing :ARG1-of question-01)
Oracle Span 11:  reporters => (person :ARG0-of report-01)
Oracle Span 12:  respectively => respective
Oracle Span 13:  signing => sign-01
NER Entity: (person :name (name :op "Akayev"))
NER Entity: (person :name (name :op "Peng" :op "Li"))
Spans:
Span 0-1:  After => after
Span 7-8:  Akayev => (person :name (name :op "Akayev"))
Span 8-9:  and => and
Span 13-14:  answered => answer-01
Span 3-4:  ceremony => ceremony
Span 10-12:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 14-15:  questions => question-01
Span 16-17:  reporters => (person :ARG0-of report-01)
Span 2-3:  signing => sign-02

Langrangian relaxation converged after 62 iterations. Delta = 0.0
Oracle Span 0-1:  After => after
Oracle Span 7-8:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 8-9:  and => and
Oracle Span 13-14:  answered => answer-01
Oracle Span 3-4:  ceremony => ceremony
Oracle Span 5-6:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 10-12:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 9-10:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 6-7:  President => (have-org-role-91 :ARG2 president)
Oracle Span 14-15:  questions => (thing :ARG1-of question-01)
Oracle Span 16-17:  reporters => (person :ARG0-of report-01)
Oracle Span 12-13:  respectively => respective
Oracle Span 2-3:  signing => sign-01

Dependencies:
1	After	_	IN	IN	_	14	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	signing	_	NN	NN	_	4	nn	_	_
4	ceremony	_	NN	NN	_	1	pobj	_	_
5	,	_	,	,	_	14	punct	_	_
6	Kirghizian	_	NNP	NNP	_	8	nn	_	_
7	President	_	NNP	NNP	_	8	nn	_	_
8	Akayev	_	NNP	NNP	_	14	nsubj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	Premier	_	NNP	NNP	_	12	nn	_	_
11	Peng	_	NNP	NNP	_	12	nn	_	_
12	Li	_	NNP	NNP	_	8	conj	_	_
13	respectively	_	RB	RB	_	14	advmod	_	_
14	answered	_	VBD	VBD	_	0	root	_	_
15	questions	_	NNS	NNS	_	14	dobj	_	_
16	from	_	IN	IN	_	14	prep	_	_
17	reporters	_	NNS	NNS	_	16	pobj	_	_
18	.	_	.	.	_	14	punct	_	_

Oracle:
(a2 / answer-01, ARG0, a3 / and)
(a2 / answer-01, ARG1, t / thing)
(a2 / answer-01, mod, r / respective)
(a2 / answer-01, time, a4 / after)
(a3 / and, op, p / person)
(a3 / and, op, p3 / person)
(a4 / after, op, c2 / ceremony)
(c / country, name, n3 / name)
(c2 / ceremony, mod, s / sign-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG2, p4 / premier)
(n2 / name, op, "Akayev")
(n3 / name, op, "Kirghizia")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(p / person, name, n2 / name)
(p3 / person, name, n4 / name)
(q / question-01, ARG0, p6 / person)
(q / question-01, ARG1, t / thing)
(r2 / report-01, ARG0, p6 / person)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),After,after,false), Span(14,15,List(1),questions,question-01,false), Span(10,12,List(5, 4, 3, 2),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(8,9,List(6),and,and,false), Span(16,17,List(8, 7),reporters,(person :ARG0-of report-01),false), Span(7,8,List(11, 10, 9),Akayev,(person :name (name :op "Akayev")),false), Span(3,4,List(12),ceremony,ceremony,false), Span(2,3,List(13),signing,sign-02,false), Span(13,14,List(14),answered,answer-01,false)),Map(2 -> person, 5 -> "Li", 12 -> ceremony, 8 -> report-01, 7 -> person, 1 -> question-01, 4 -> "Peng", 11 -> "Akayev", 14 -> answer-01, 6 -> and, 0 -> after, 9 -> person, 3 -> name, 10 -> name, 13 -> sign-02),Map(n -> name, q -> question-01, p2 -> person, a3 -> answer-01, s -> sign-02, p -> person, a -> after, r -> report-01, a2 -> and, c -> ceremony, n2 -> name, p3 -> person))),[Ljava.lang.String;@36f785d8,Annotation([Ljava.lang.String;@617fb243,[Ljava.lang.String;@35ea6baa,[Ljava.lang.String;@604398c7),Annotation([Ljava.lang.String;@6a900852,[Ljava.lang.String;@76e142e9,[Ledu.cmu.lti.nlp.amr.Dependency;@10b0d0a4),Annotation([Ljava.lang.String;@6c49f7d5,[Ljava.lang.String;@671b096,[Ljava.lang.String;@7a7b5cbb),Annotation([Ljava.lang.String;@6cd896a0,[Ljava.lang.String;@4f0c23b1,[Ledu.cmu.lti.nlp.amr.Entity;@44f2cfc6))
AMR:
(a / after, op, c / ceremony)
(a2 / and, op, p / person)
(a2 / and, op, p3 / person)
(a3 / answer-01, ARG0, a2 / and)
(a3 / answer-01, ARG1, q / question-01)
(a3 / answer-01, time, a / after)
(c / ceremony, mod, s / sign-02)
(n / name, op, "Li")
(n / name, op, "Peng")
(n2 / name, op, "Akayev")
(p / person, name, n / name)
(p3 / person, name, n2 / name)
(q / question-01, ARG1, p2 / person)
(r / report-01, ARG0, p2 / person)

Decoded in 4,363,142 microseconds
Sentence: Akayev highly commended the results of the conference with Peng Li

Oracle Span 1:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 2:  commended => commend-01
Oracle Span 3:  conference => conference
Oracle Span 4:  highly => high
Oracle Span 5:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 6:  results => (thing :ARG2-of result-01)
NER Entity: (person :name (name :op "Akayev"))
NER Entity: (person :name (name :op "Peng" :op "Li"))
Spans:
Span 0-1:  Akayev => (person :name (name :op "Akayev"))
Span 2-3:  commended => commend-01
Span 7-8:  conference => conference
Span 9-11:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Span 4-5:  results => result
Span 3-4:  the => (country :name (name :op "North"))

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 0-1:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 2-3:  commended => commend-01
Oracle Span 7-8:  conference => conference
Oracle Span 1-2:  highly => high
Oracle Span 9-11:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 4-5:  results => (thing :ARG2-of result-01)

Dependencies:
1	Akayev	_	VB	VB	_	0	root	_	_
2	highly	_	RB	RB	_	3	advmod	_	_
3	commended	_	JJ	JJ	_	1	acomp	_	_
4	the	_	DT	DT	_	5	det	_	_
5	results	_	NNS	NNS	_	3	dep	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	conference	_	NN	NN	_	6	pobj	_	_
9	with	_	IN	IN	_	8	prep	_	_
10	Peng	_	NNP	NNP	_	11	nn	_	_
11	Li	_	NNP	NNP	_	9	pobj	_	_

Oracle:
(c / commend-01, ARG0, p / person)
(c / commend-01, ARG1, t / thing)
(c / commend-01, degree, h / high)
(c5 / conference, prep-with, p3 / person)
(n / name, op, "Akayev")
(n3 / name, op, "Li")
(n3 / name, op, "Peng")
(p / person, name, n / name)
(p3 / person, name, n3 / name)
(r2 / result-01, ARG1, c5 / conference)
(r2 / result-01, ARG2, t / thing)

Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),Peng Li,(person :name (name :op "Li" :op "Peng")),false), Span(0,1,List(6, 5, 4),Akayev,(person :name (name :op "Akayev")),false), Span(4,5,List(7),results,result,false), Span(3,4,List(10, 9, 8),the,(country :name (name :op "North")),false), Span(7,8,List(11),conference,conference,false), Span(2,3,List(12),commended,commend-01,false)),Map(2 -> "Li", 5 -> name, 12 -> commend-01, 8 -> country, 7 -> result, 1 -> name, 4 -> person, 11 -> conference, 6 -> "Akayev", 0 -> person, 9 -> name, 3 -> "Peng", 10 -> "North"),Map(n -> name, p2 -> person, p -> person, c3 -> commend-01, n3 -> name, r -> result, c -> country, c2 -> conference, n2 -> name))),[Ljava.lang.String;@fd0d19d,Annotation([Ljava.lang.String;@58ee2f2b,[Ljava.lang.String;@4d98bfe1,[Ljava.lang.String;@275a4e36),Annotation([Ljava.lang.String;@2e8f2f79,[Ljava.lang.String;@731daf4,[Ledu.cmu.lti.nlp.amr.Dependency;@f5e1a44),Annotation([Ljava.lang.String;@7a80de67,[Ljava.lang.String;@2da3c2a9,[Ljava.lang.String;@244c4b93),Annotation([Ljava.lang.String;@5bbfe964,[Ljava.lang.String;@27b06792,[Ledu.cmu.lti.nlp.amr.Entity;@14b54f47))
AMR:
(c / country, name, n3 / name)
(c2 / conference, poss, p / person)
(c3 / commend-01, ARG1, p2 / person)
(c3 / commend-01, ARG6, c / country)
(n / name, op, "Li")
(n / name, op, "Peng")
(n2 / name, op, "Akayev")
(n3 / name, op, "North")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(r / result, location, c2 / conference)
(r / result, mod, c / country)

Decoded in 2,484,877 microseconds
Sentence: He expressed that , this visit by Premier Peng Li would promote the peace , security and stability of the Central Asian region .

Oracle Span 1:  and => and
Oracle Span 2:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Oracle Span 3:  expressed => express-01
Oracle Span 4:  He => he
Oracle Span 5:  peace => peace
Oracle Span 6:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 8:  promote => promote-02
Oracle Span 9:  security => security
Oracle Span 10:  stability => stability
Oracle Span 11:  this => this
Oracle Span 12:  visit => visit-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (country :name (name :op "Central" :op "Asian"))
Spans:
Span 14-15:  , => and
Span 16-17:  and => and
Span 21-22:  Asian => "Asian"
Span 20-21:  Central => center
Span 1-2:  expressed => express-01
Span 0-1:  He => he
Span 13-14:  peace => peace
Span 8-10:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 11-12:  promote => promote-02
Span 22-23:  region => region
Span 15-16:  security => security
Span 17-18:  stability => stability
Span 4-5:  this => this
Span 5-6:  visit => visit-01

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 20-22:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Oracle Span 1-2:  expressed => express-01
Oracle Span 0-1:  He => he
Oracle Span 13-14:  peace => peace
Oracle Span 8-10:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7-8:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 11-12:  promote => promote-02
Oracle Span 15-16:  security => security
Oracle Span 17-18:  stability => stability
Oracle Span 4-5:  this => this
Oracle Span 5-6:  visit => visit-01

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	expressed	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	12	mark	_	_
4	,	_	,	,	_	12	punct	_	_
5	this	_	DT	DT	_	6	det	_	_
6	visit	_	NN	NN	_	12	nsubj	_	_
7	by	_	IN	IN	_	6	prep	_	_
8	Premier	_	NNP	NNP	_	10	nn	_	_
9	Peng	_	NNP	NNP	_	10	nn	_	_
10	Li	_	NNP	NNP	_	7	pobj	_	_
11	would	_	MD	MD	_	12	aux	_	_
12	promote	_	VB	VB	_	2	ccomp	_	_
13	the	_	DT	DT	_	14	det	_	_
14	peace	_	NN	NN	_	12	dobj	_	_
15	,	_	,	,	_	14	punct	_	_
16	security	_	NN	NN	_	14	conj	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	stability	_	NN	NN	_	14	conj	_	_
19	of	_	IN	IN	_	14	prep	_	_
20	the	_	DT	DT	_	23	det	_	_
21	Central	_	NNP	NNP	_	23	nn	_	_
22	Asian	_	NNP	NNP	_	23	nn	_	_
23	region	_	NN	NN	_	19	pobj	_	_
24	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, p5 / peace)
(a / and, op, s / security)
(a / and, op, s2 / stability)
(e / express-01, ARG0, h / he)
(e / express-01, ARG1, p3 / promote-02)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG2, p2 / premier)
(n / name, op, "Li")
(n / name, op, "Peng")
(n2 / name, op, "Asia")
(n2 / name, op, "Central")
(p / person, name, n / name)
(p3 / promote-02, ARG0, v / visit-01)
(p3 / promote-02, ARG1, a / and)
(p5 / peace, poss, w / world-region)
(s / security, poss, w / world-region)
(s2 / stability, poss, w / world-region)
(v / visit-01, ARG0, p / person)
(v / visit-01, mod, t / this)
(w / world-region, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),security,security,false), Span(0,1,List(1),He,he,false), Span(5,6,List(2),visit,visit-01,false), Span(16,17,List(3),and,and,false), Span(20,21,List(4),Central,center,false), Span(22,23,List(5),region,region,false), Span(4,5,List(6),this,this,false), Span(11,12,List(7),promote,promote-02,false), Span(1,2,List(8),expressed,express-01,false), Span(17,18,List(9),stability,stability,false), Span(8,10,List(13, 12, 11, 10),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(14,15,List(14),,,and,false), Span(13,14,List(15),peace,peace,false), Span(21,22,List(16),Asian,"Asian",false)),Map(2 -> visit-01, 5 -> region, 12 -> "Peng", 15 -> peace, 8 -> express-01, 7 -> promote-02, 1 -> he, 4 -> center, 11 -> name, 14 -> and, 6 -> this, 0 -> security, 9 -> stability, 16 -> "Asian", 3 -> and, 10 -> person, 13 -> "Li"),Map(e -> express-01, n -> name, h -> he, s2 -> stability, t -> this, A -> "Asian", p2 -> person, s -> security, v -> visit-01, p -> promote-02, a -> and, r -> region, a2 -> and, c -> center, p3 -> peace))),[Ljava.lang.String;@f7bfcba,Annotation([Ljava.lang.String;@27947e8c,[Ljava.lang.String;@861088,[Ljava.lang.String;@18e9118b),Annotation([Ljava.lang.String;@4827b000,[Ljava.lang.String;@4c43d796,[Ledu.cmu.lti.nlp.amr.Dependency;@7c719cc6),Annotation([Ljava.lang.String;@2cc4af8a,[Ljava.lang.String;@5996bda2,[Ljava.lang.String;@bbb3e61),Annotation([Ljava.lang.String;@7b5c047c,[Ljava.lang.String;@72ed4c62,[Ledu.cmu.lti.nlp.amr.Entity;@1efa9430))
AMR:
(a / and, op, p3 / peace)
(a / and, op, s / security)
(a / and, op, s2 / stability)
(a2 / and, op, a / and)
(e / express-01, ARG0, h / he)
(e / express-01, ARG1, p / promote-02)
(n / name, op, "Li")
(n / name, op, "Peng")
(p / promote-02, ARG0, v / visit-01)
(p / promote-02, ARG1, a / and)
(p / promote-02, location, r / region)
(p2 / person, name, n / name)
(r / region, mod, A / "Asian")
(v / visit-01, ARG0, p2 / person)
(v / visit-01, ARG1, c / center)
(v / visit-01, mod, t / this)

Decoded in 3,691,735 microseconds
Sentence: He felt that , the recently signed documents were very important in enforcing good neighborhood relations and friendly cooperation between both countries .

Oracle Span 1:  and => and
Oracle Span 2:  both => both
Oracle Span 3:  cooperation => cooperate-01
Oracle Span 4:  countries => country
Oracle Span 5:  documents => document
Oracle Span 6:  enforcing => enforce-01
Oracle Span 7:  felt => feel-02
Oracle Span 8:  friendly => friendly-41
Oracle Span 9:  good => good
Oracle Span 10:  He => he
Oracle Span 11:  important => important
Oracle Span 12:  neighborhood => neighborhood
Oracle Span 13:  recently => recent
Oracle Span 14:  relations => relation
Oracle Span 15:  signed => sign-01
Oracle Span 16:  very => very
Spans:
Span 16-17:  and => and
Span 20-21:  both => both
Span 18-19:  cooperation => cooperate-01
Span 21-22:  countries => country
Span 7-8:  documents => document
Span 12-13:  enforcing => enforce-01
Span 1-2:  felt => felt-01
Span 17-18:  friendly => friendly
Span 13-14:  good => good
Span 0-1:  He => he
Span 0-6:  He felt that , the recently => (date-entity :time recently)
Span 10-11:  important => important
Span 14-15:  neighborhood => neighborhood
Span 15-16:  relations => relation
Span 6-7:  signed => sign-02
Span 9-10:  very => very

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 20-21:  both => both
Oracle Span 18-19:  cooperation => cooperate-01
Oracle Span 21-22:  countries => country
Oracle Span 7-8:  documents => document
Oracle Span 12-13:  enforcing => enforce-01
Oracle Span 1-2:  felt => feel-02
Oracle Span 17-18:  friendly => friendly-41
Oracle Span 13-14:  good => good
Oracle Span 0-1:  He => he
Oracle Span 10-11:  important => important
Oracle Span 14-15:  neighborhood => neighborhood
Oracle Span 5-6:  recently => recent
Oracle Span 15-16:  relations => relation
Oracle Span 6-7:  signed => sign-01
Oracle Span 9-10:  very => very

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	felt	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	11	mark	_	_
4	,	_	,	,	_	11	punct	_	_
5	the	_	DT	DT	_	8	det	_	_
6	recently	_	RB	RB	_	7	advmod	_	_
7	signed	_	VBN	VBN	_	8	amod	_	_
8	documents	_	NNS	NNS	_	11	nsubj	_	_
9	were	_	VBD	VBD	_	11	cop	_	_
10	very	_	RB	RB	_	11	advmod	_	_
11	important	_	JJ	JJ	_	2	ccomp	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	enforcing	_	VBG	VBG	_	12	pcomp	_	_
14	good	_	JJ	JJ	_	16	amod	_	_
15	neighborhood	_	NN	NN	_	16	nn	_	_
16	relations	_	NNS	NNS	_	13	dobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	friendly	_	JJ	JJ	_	19	amod	_	_
19	cooperation	_	NN	NN	_	16	conj	_	_
20	between	_	IN	IN	_	19	prep	_	_
21	both	_	DT	DT	_	22	det	_	_
22	countries	_	NNS	NNS	_	20	pobj	_	_
23	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c / cooperate-01)
(a / and, op, r2 / relation)
(c / cooperate-01, ARG0, c2 / country)
(c2 / country, mod, b / both)
(e / enforce-01, ARG1, a / and)
(f / feel-02, ARG0, h / he)
(f / feel-02, ARG1, i / important)
(f2 / friendly-41, ARG1, c / cooperate-01)
(i / important, degree, v / very)
(i / important, domain, d / document)
(i / important, purpose, e / enforce-01)
(r2 / relation, mod, g / good)
(r2 / relation, mod, n / neighborhood)
(s / sign-01, ARG1, d / document)
(s / sign-01, time, r / recent)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),both,both,false), Span(0,1,List(1),He,he,false), Span(6,7,List(2),signed,sign-02,false), Span(16,17,List(3),and,and,false), Span(18,19,List(4),cooperation,cooperate-01,false), Span(14,15,List(5),neighborhood,neighborhood,false), Span(1,2,List(6),felt,felt-01,false), Span(15,16,List(7),relations,relation,false), Span(13,14,List(8),good,good,false), Span(7,8,List(9),documents,document,false), Span(12,13,List(10),enforcing,enforce-01,false), Span(10,11,List(11),important,important,false), Span(0,6,List(13, 12),He felt that , the recently,(date-entity :time recently),false), Span(21,22,List(14),countries,country,false), Span(17,18,List(15),friendly,friendly,false), Span(9,10,List(16),very,very,false)),Map(2 -> sign-02, 5 -> neighborhood, 12 -> date-entity, 15 -> friendly, 8 -> good, 7 -> relation, 1 -> he, 4 -> cooperate-01, 11 -> important, 14 -> country, 6 -> felt-01, 0 -> both, 9 -> document, 16 -> very, 3 -> and, 10 -> enforce-01, 13 -> recently),Map(e -> enforce-01, n -> neighborhood, h -> he, b -> both, s -> sign-02, v -> very, d -> document, r2 -> recently, g -> good, a -> and, d2 -> date-entity, r -> relation, i -> important, c -> cooperate-01, f2 -> friendly, f -> felt-01, c2 -> country))),[Ljava.lang.String;@3034d653,Annotation([Ljava.lang.String;@58d8e7e7,[Ljava.lang.String;@b91cb9a,[Ljava.lang.String;@4f31b4b3),Annotation([Ljava.lang.String;@59217548,[Ljava.lang.String;@46d95654,[Ledu.cmu.lti.nlp.amr.Dependency;@4391980e),Annotation([Ljava.lang.String;@1c728e3,[Ljava.lang.String;@539e86a6,[Ljava.lang.String;@5ff91177),Annotation([Ljava.lang.String;@1067a36e,[Ljava.lang.String;@285f01b1,[Ledu.cmu.lti.nlp.amr.Entity;@f5319aa))
AMR:
(a / and, op, c / cooperate-01)
(c / cooperate-01, ARG0, c2 / country)
(c / cooperate-01, ARG1, f2 / friendly)
(c2 / country, mod, b / both)
(d / document, mod, d2 / date-entity)
(d2 / date-entity, time, r2 / recently)
(e / enforce-01, ARG0, d / document)
(e / enforce-01, ARG1, a / and)
(e / enforce-01, ARG6, r / relation)
(f / felt-01, ARG0, h / he)
(f / felt-01, ARG1, i / important)
(i / important, degree, v / very)
(i / important, domain, d / document)
(r / relation, mod, g / good)
(r / relation, mod, n / neighborhood)
(s / sign-02, ARG1, d / document)

Decoded in 5,821,584 microseconds
Sentence: Premier Peng Li said that , this visit had improved mutual friendship and understanding and set a good foundation for further cooperation between China and Kirghizia .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  cooperation => cooperate-01
Oracle Span 5:  foundation => foundation
Oracle Span 6:  friendship => friendship
Oracle Span 7:  further => further
Oracle Span 8:  good => good
Oracle Span 9:  had => have-org-role-91
Oracle Span 10:  improved => improve-01
Oracle Span 11:  Kirghizia => (country :name (name :op "Kirghizia"))
Oracle Span 12:  mutual => mutual
Oracle Span 13:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 14:  Premier => premier
Oracle Span 15:  said => say-01
Oracle Span 16:  set => set-02
Oracle Span 17:  this => this
Oracle Span 18:  understanding => understand-01
Oracle Span 19:  visit => visit-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kirghizia"))
Spans:
Span 14-15:  and => and
Span 24-25:  and => and
Span 12-13:  and => and
Span 23-24:  China => (country :name (name :op "China"))
Span 21-22:  cooperation => cooperate-01
Span 18-19:  foundation => found-01
Span 11-12:  friendship => friendship
Span 20-21:  further => further
Span 17-18:  good => good
Span 9-10:  improved => improve-01
Span 10-11:  mutual => mutual
Span 1-3:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 3-4:  said => say-01
Span 15-16:  set => set-01
Span 6-7:  this => this
Span 13-14:  understanding => understand-01
Span 7-8:  visit => visit-01

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Oracle Span 12-13:  and => and
Oracle Span 14-15:  and => and
Oracle Span 23-24:  China => (country :name (name :op "China"))
Oracle Span 21-22:  cooperation => cooperate-01
Oracle Span 18-19:  foundation => foundation
Oracle Span 11-12:  friendship => friendship
Oracle Span 20-21:  further => further
Oracle Span 17-18:  good => good
Oracle Span 8-9:  had => have-org-role-91
Oracle Span 9-10:  improved => improve-01
Oracle Span 25-26:  Kirghizia => (country :name (name :op "Kirghizia"))
Oracle Span 10-11:  mutual => mutual
Oracle Span 1-3:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 0-1:  Premier => premier
Oracle Span 3-4:  said => say-01
Oracle Span 15-16:  set => set-02
Oracle Span 6-7:  this => this
Oracle Span 13-14:  understanding => understand-01
Oracle Span 7-8:  visit => visit-01

Dependencies:
1	Premier	_	NNP	NNP	_	3	nn	_	_
2	Peng	_	NNP	NNP	_	3	nn	_	_
3	Li	_	NNP	NNP	_	4	nsubj	_	_
4	said	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	10	mark	_	_
6	,	_	,	,	_	10	punct	_	_
7	this	_	DT	DT	_	8	det	_	_
8	visit	_	NN	NN	_	10	nsubj	_	_
9	had	_	VBD	VBD	_	10	aux	_	_
10	improved	_	VBN	VBN	_	4	ccomp	_	_
11	mutual	_	JJ	JJ	_	12	amod	_	_
12	friendship	_	NN	NN	_	10	dobj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	understanding	_	NN	NN	_	12	conj	_	_
15	and	_	CC	CC	_	4	cc	_	_
16	set	_	VBD	VBD	_	4	conj	_	_
17	a	_	DT	DT	_	19	det	_	_
18	good	_	JJ	JJ	_	19	amod	_	_
19	foundation	_	NN	NN	_	16	dobj	_	_
20	for	_	IN	IN	_	16	prep	_	_
21	further	_	JJ	JJ	_	22	amod	_	_
22	cooperation	_	NN	NN	_	20	pobj	_	_
23	between	_	IN	IN	_	22	prep	_	_
24	China	_	NNP	NNP	_	23	pobj	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	Kirghizia	_	NNP	NNP	_	24	conj	_	_
27	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, i / improve-01)
(a / and, op, s2 / set-02)
(a2 / and, mod, m / mutual)
(a2 / and, op, f / friendship)
(a2 / and, op, u / understand-01)
(c3 / cooperate-01, ARG0, c4 / country)
(c3 / cooperate-01, ARG1, c5 / country)
(c3 / cooperate-01, degree, f3 / further)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(f2 / foundation, mod, g2 / good)
(f2 / foundation, purpose, c3 / cooperate-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / premier)
(i / improve-01, ARG0, v / visit-01)
(i / improve-01, ARG1, a2 / and)
(n / name, op, "Li")
(n / name, op, "Peng")
(n2 / name, op, "China")
(n3 / name, op, "Kirghizia")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / and)
(s2 / set-02, ARG0, v / visit-01)
(s2 / set-02, ARG1, f2 / foundation)
(v / visit-01, mod, t / this)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),said,say-01,false), Span(13,14,List(1),understanding,understand-01,false), Span(17,18,List(2),good,good,false), Span(10,11,List(3),mutual,mutual,false), Span(7,8,List(4),visit,visit-01,false), Span(23,24,List(7, 6, 5),China,(country :name (name :op "China")),false), Span(14,15,List(8),and,and,false), Span(15,16,List(9),set,set-01,false), Span(18,19,List(10),foundation,found-01,false), Span(21,22,List(11),cooperation,cooperate-01,false), Span(24,25,List(12),and,and,false), Span(11,12,List(13),friendship,friendship,false), Span(9,10,List(14),improved,improve-01,false), Span(12,13,List(15),and,and,false), Span(20,21,List(16),further,further,false), Span(1,3,List(20, 19, 18, 17),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(6,7,List(21),this,this,false)),Map(2 -> good, 5 -> country, 12 -> and, 15 -> and, 8 -> and, 21 -> this, 18 -> name, 7 -> "China", 17 -> person, 1 -> understand-01, 4 -> visit-01, 11 -> cooperate-01, 14 -> improve-01, 20 -> "Li", 6 -> name, 0 -> say-01, 9 -> set-01, 16 -> further, 19 -> "Peng", 3 -> mutual, 10 -> found-01, 13 -> friendship),Map(n -> name, s2 -> set-01, t -> this, a3 -> and, s -> say-01, v -> visit-01, m -> mutual, p -> person, g -> good, a -> and, f3 -> further, i -> improve-01, a2 -> and, c -> country, u -> understand-01, f2 -> friendship, f -> found-01, n2 -> name, c2 -> cooperate-01))),[Ljava.lang.String;@4a546070,Annotation([Ljava.lang.String;@6011ca2e,[Ljava.lang.String;@75151f73,[Ljava.lang.String;@2d962a11),Annotation([Ljava.lang.String;@44288833,[Ljava.lang.String;@2a067a22,[Ledu.cmu.lti.nlp.amr.Dependency;@77351696),Annotation([Ljava.lang.String;@6bef6cc3,[Ljava.lang.String;@6b86089d,[Ljava.lang.String;@7248a8a5),Annotation([Ljava.lang.String;@2d9691dc,[Ljava.lang.String;@3d8f79d9,[Ledu.cmu.lti.nlp.amr.Entity;@66965c15))
AMR:
(a / and, op, i / improve-01)
(a / and, op, s2 / set-01)
(a3 / and, op, u / understand-01)
(c / country, name, n / name)
(c2 / cooperate-01, ARG0, c / country)
(c2 / cooperate-01, ARG1, a2 / and)
(c2 / cooperate-01, mod, f3 / further)
(f / found-01, ARG1, c2 / cooperate-01)
(f2 / friendship, mod, m / mutual)
(i / improve-01, ARG0, v / visit-01)
(i / improve-01, ARG1, f2 / friendship)
(n / name, op, "China")
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(p / person, name, n2 / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / and)
(s2 / set-01, ARG0, a3 / and)
(s2 / set-01, ARG1, f / found-01)
(v / visit-01, ARG1, g / good)
(v / visit-01, mod, t / this)

Decoded in 1,789,407 microseconds
Sentence: He expressed hopes that the Central Asian region would be stable and developed , and that the standard of living of the people would continuously improve .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Oracle Span 4:  continuously => continue-01
Oracle Span 5:  developed => develop-02
Oracle Span 6:  expressed => express-01
Oracle Span 7:  He => he
Oracle Span 8:  hopes => hope-01
Oracle Span 9:  improve => improve-01
Oracle Span 10:  living => live-01
Oracle Span 11:  stable => stable
Oracle Span 12:  standard => standard
NER Entity: (country :name (name :op "Central" :op "Asian"))
Spans:
Span 11-12:  and => and
Span 14-15:  and => and
Span 6-7:  Asian => "Asian"
Span 5-6:  Central => center
Span 12-13:  developed => develop-02
Span 1-2:  expressed => express-01
Span 0-1:  He => he
Span 2-3:  hopes => hope-01
Span 25-26:  improve => improve-01
Span 19-20:  living => live-01
Span 22-23:  people => people
Span 7-8:  region => region
Span 10-11:  stable => stable
Span 17-18:  standard => standard

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 14-15:  and => and
Oracle Span 5-7:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Oracle Span 24-25:  continuously => continue-01
Oracle Span 12-13:  developed => develop-02
Oracle Span 1-2:  expressed => express-01
Oracle Span 0-1:  He => he
Oracle Span 2-3:  hopes => hope-01
Oracle Span 25-26:  improve => improve-01
Oracle Span 19-20:  living => live-01
Oracle Span 10-11:  stable => stable
Oracle Span 17-18:  standard => standard

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	expressed	_	VBD	VBD	_	0	root	_	_
3	hopes	_	VBZ	VBZ	_	2	ccomp	_	_
4	that	_	IN	IN	_	11	mark	_	_
5	the	_	DT	DT	_	8	det	_	_
6	Central	_	NNP	NNP	_	8	nn	_	_
7	Asian	_	NNP	NNP	_	8	nn	_	_
8	region	_	NN	NN	_	11	nsubj	_	_
9	would	_	MD	MD	_	11	aux	_	_
10	be	_	VB	VB	_	11	cop	_	_
11	stable	_	JJ	JJ	_	3	ccomp	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	developed	_	JJ	JJ	_	11	conj	_	_
14	,	_	,	,	_	3	punct	_	_
15	and	_	CC	CC	_	3	cc	_	_
16	that	_	IN	IN	_	26	mark	_	_
17	the	_	DT	DT	_	18	det	_	_
18	standard	_	NN	NN	_	26	nsubj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	living	_	NN	NN	_	19	pobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	people	_	NNS	NNS	_	21	pobj	_	_
24	would	_	MD	MD	_	26	aux	_	_
25	continuously	_	RB	RB	_	26	advmod	_	_
26	improve	_	VB	VB	_	3	conj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a2 / and)
(a / and, op, i / improve-01)
(a2 / and, op, d / develop-02)
(a2 / and, op, s / stable)
(c / continue-01, ARG1, i / improve-01)
(d / develop-02, ARG1, w / world-region)
(e / express-01, ARG0, h / he)
(e / express-01, ARG1, h2 / hope-01)
(h2 / hope-01, ARG0, h / he)
(h2 / hope-01, ARG1, a / and)
(i / improve-01, ARG0, s2 / standard)
(n / name, op, "Asia")
(n / name, op, "Central")
(s / stable, domain, w / world-region)
(s2 / standard, mod, l / live-01)
(w / world-region, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),Asian,"Asian",false), Span(5,6,List(1),Central,center,false), Span(2,3,List(2),hopes,hope-01,false), Span(7,8,List(3),region,region,false), Span(10,11,List(4),stable,stable,false), Span(0,1,List(5),He,he,false), Span(11,12,List(6),and,and,false), Span(17,18,List(7),standard,standard,false), Span(22,23,List(8),people,people,false), Span(1,2,List(9),expressed,express-01,false), Span(14,15,List(10),and,and,false), Span(12,13,List(11),developed,develop-02,false), Span(25,26,List(12),improve,improve-01,false), Span(19,20,List(13),living,live-01,false)),Map(2 -> hope-01, 5 -> he, 12 -> improve-01, 8 -> people, 7 -> standard, 1 -> center, 4 -> stable, 11 -> develop-02, 6 -> and, 0 -> "Asian", 9 -> express-01, 3 -> region, 10 -> and, 13 -> live-01),Map(e -> express-01, h -> hope-01, h2 -> he, s2 -> standard, A -> "Asian", s -> stable, d -> develop-02, p -> people, a -> and, r -> region, a2 -> and, i -> improve-01, c -> center, l -> live-01))),[Ljava.lang.String;@685a8004,Annotation([Ljava.lang.String;@27553ff1,[Ljava.lang.String;@7d8f32c5,[Ljava.lang.String;@cfb71be),Annotation([Ljava.lang.String;@309d8a85,[Ljava.lang.String;@3eb991d0,[Ledu.cmu.lti.nlp.amr.Dependency;@3aa485d8),Annotation([Ljava.lang.String;@6d0565b3,[Ljava.lang.String;@31100334,[Ljava.lang.String;@435533d7),Annotation([Ljava.lang.String;@5d41e420,[Ljava.lang.String;@1b2f3ac6,[Ledu.cmu.lti.nlp.amr.Entity;@2a179334))
AMR:
(A / "Asian", mod, c / center)
(a / and, op, d / develop-02)
(a2 / and, op, h / hope-01)
(a2 / and, op, i / improve-01)
(d / develop-02, ARG1, l / live-01)
(e / express-01, ARG0, h2 / he)
(e / express-01, ARG1, a2 / and)
(h / hope-01, ARG1, a / and)
(i / improve-01, ARG1, s2 / standard)
(l / live-01, ARG1, p / people)
(r / region, mod, A / "Asian")
(s / stable, domain, a2 / and)
(s / stable, domain, r / region)

Decoded in 5,665,592 microseconds
Sentence: Peng Li hoped that the Kirghizian news media would relay greetings from the Chinese people to the Kirghizian people .

Oracle Span 1:  Chinese => (person :mod (country :name (name :op "China")))
Oracle Span 2:  greetings => greet-01
Oracle Span 3:  hoped => hope-01
Oracle Span 4:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 5:  media => media
Oracle Span 6:  news => news
Oracle Span 7:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 8:  relay => relay-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (thing :name (name :op "Kirghizian"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 2-3:  hoped => hope-01
Span 7-8:  media => media
Span 6-7:  news => news
Span 0-2:  Peng Li => (person :name (name :op "Peng" :op "Li"))
Span 9-10:  relay => relay-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 13-14:  Chinese => (person :mod (country :name (name :op "China")))
Oracle Span 10-11:  greetings => greet-01
Oracle Span 2-3:  hoped => hope-01
Oracle Span 5-6:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 7-8:  media => media
Oracle Span 6-7:  news => news
Oracle Span 0-2:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 9-10:  relay => relay-01

Dependencies:
1	Peng	_	NNP	NNP	_	2	nn	_	_
2	Li	_	NNP	NNP	_	3	nsubj	_	_
3	hoped	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	10	mark	_	_
5	the	_	DT	DT	_	8	det	_	_
6	Kirghizian	_	NNP	NNP	_	8	nn	_	_
7	news	_	NN	NN	_	8	nn	_	_
8	media	_	NNS	NNS	_	10	nsubj	_	_
9	would	_	MD	MD	_	10	aux	_	_
10	relay	_	VB	VB	_	3	ccomp	_	_
11	greetings	_	NNS	NNS	_	10	dobj	_	_
12	from	_	IN	IN	_	10	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	Chinese	_	JJ	JJ	_	15	amod	_	_
15	people	_	NNS	NNS	_	12	pobj	_	_
16	to	_	TO	TO	_	10	prep	_	_
17	the	_	DT	DT	_	19	det	_	_
18	Kirghizian	_	NNP	NNP	_	19	nn	_	_
19	people	_	NNS	NNS	_	16	pobj	_	_
20	.	_	.	.	_	3	punct	_	_

Oracle:
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(g / greet-01, ARG0, p4 / person)
(h / hope-01, ARG0, p / person)
(h / hope-01, ARG1, r / relay-01)
(m / media, mod, c3 / country)
(m / media, mod, n3 / news)
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(n4 / name, op, "Kirghizia")
(n5 / name, op, "China")
(p / person, name, n2 / name)
(p4 / person, mod, c4 / country)
(r / relay-01, ARG0, m / media)
(r / relay-01, ARG1, g / greet-01)

Input(Some(Graph(null,ArrayBuffer(Span(0,2,List(3, 2, 1, 0),Peng Li,(person :name (name :op "Peng" :op "Li")),false), Span(2,3,List(4),hoped,hope-01,false), Span(7,8,List(5),media,media,false), Span(6,7,List(6),news,news,false), Span(9,10,List(7),relay,relay-01,false)),Map(2 -> "Peng", 5 -> media, 7 -> relay-01, 1 -> name, 4 -> hope-01, 6 -> news, 0 -> person, 3 -> "Li"),Map(n -> name, h -> hope-01, m -> media, p -> person, r -> relay-01, n2 -> news))),[Ljava.lang.String;@43622df8,Annotation([Ljava.lang.String;@2074113a,[Ljava.lang.String;@72db6499,[Ljava.lang.String;@651cebe2),Annotation([Ljava.lang.String;@37431754,[Ljava.lang.String;@37be3d47,[Ledu.cmu.lti.nlp.amr.Dependency;@1e687885),Annotation([Ljava.lang.String;@1c29d351,[Ljava.lang.String;@337f8e37,[Ljava.lang.String;@756dd91a),Annotation([Ljava.lang.String;@281c2b62,[Ljava.lang.String;@7a7dd66b,[Ledu.cmu.lti.nlp.amr.Entity;@35bce125))
AMR:
(h / hope-01, ARG0, p / person)
(h / hope-01, ARG1, r / relay-01)
(m / media, mod, n2 / news)
(n / name, op, "Li")
(n / name, op, "Peng")
(p / person, name, n / name)
(r / relay-01, ARG1, m / media)

Decoded in 5,641,630 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@175b6821,Annotation([Ljava.lang.String;@444e1161,[Ljava.lang.String;@5a2bda1a,[Ljava.lang.String;@7b8ee438),Annotation([Ljava.lang.String;@37d88108,[Ljava.lang.String;@3a94b8b,[Ledu.cmu.lti.nlp.amr.Dependency;@7d6baee),Annotation([Ljava.lang.String;@bf52108,[Ljava.lang.String;@785631bf,[Ljava.lang.String;@31ead82d),Annotation([Ljava.lang.String;@3d91534,[Ljava.lang.String;@21868926,[Ledu.cmu.lti.nlp.amr.Entity;@68948f60))
AMR:


Decoded in 28,694 microseconds
Sentence: Xinhua News Agency , Tokyo , September 1st , by reporter Yiguo Yu

Oracle Span 1:  reporter => report-01
Oracle Span 2:  September => 9
Oracle Span 3:  Tokyo => (city :name (name :op "Tokyo"))
Oracle Span 4:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
Oracle Span 5:  Yiguo Yu => (person :name (name :op "Yu" :op "Yiguo"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Yiguo" :op "Yu"))
NER Entity: (country :name (name :op "Tokyo"))
Spans:
Span 10-11:  reporter => (person :ARG0-of report-01)
Span 4-5:  Tokyo => (city :name (name :op "Tokyo"))
Span 0-3:  Xinhua News Agency => (publication :name (name :op "News" :op "Agency" :op "Xinhua"))
Span 0-7:  Xinhua News Agency , Tokyo , September => (date-entity :month 9 :day 1)
Span 12-13:  Yu => (person :name (name :op "Yu"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 10-11:  reporter => report-01
Oracle Span 6-7:  September => 9
Oracle Span 4-5:  Tokyo => (city :name (name :op "Tokyo"))
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
Oracle Span 11-13:  Yiguo Yu => (person :name (name :op "Yu" :op "Yiguo"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Tokyo	_	NNP	NNP	_	7	nn	_	_
6	,	_	,	,	_	7	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporter	_	NN	NN	_	13	nn	_	_
12	Yiguo	_	NNP	NNP	_	13	nn	_	_
13	Yu	_	NNP	NNP	_	10	pobj	_	_

Oracle:
(c2 / city, name, n3 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Yiguo")
(n2 / name, op, "Yu")
(n3 / name, op, "Tokyo")
(p / person, name, n2 / name)
(p2 / publication, name, n / name)
(r / report-01, ARG0, p / person)

Input(Some(Graph(null,ArrayBuffer(Span(0,7,List(2, 1, 0),Xinhua News Agency , Tokyo , September,(date-entity :month 9 :day 1),false), Span(4,5,List(5, 4, 3),Tokyo,(city :name (name :op "Tokyo")),false), Span(10,11,List(7, 6),reporter,(person :ARG0-of report-01),false), Span(12,13,List(10, 9, 8),Yu,(person :name (name :op "Yu")),false), Span(0,3,List(15, 14, 13, 12, 11),Xinhua News Agency,(publication :name (name :op "News" :op "Agency" :op "Xinhua")),false)),Map(2 -> 1, 5 -> "Tokyo", 12 -> name, 15 -> "Xinhua", 8 -> person, 7 -> report-01, 1 -> 9, 4 -> name, 11 -> publication, 14 -> "Agency", 6 -> person, 0 -> date-entity, 9 -> name, 3 -> city, 10 -> "Yu", 13 -> "News"),Map(n -> name, p2 -> person, d -> date-entity, p -> person, 1 -> 1, n3 -> name, r -> report-01, c -> city, 9 -> 9, p3 -> publication, n2 -> name))),[Ljava.lang.String;@18d33e00,Annotation([Ljava.lang.String;@a9ed7fd,[Ljava.lang.String;@e4b1b8c,[Ljava.lang.String;@5cebc9c2),Annotation([Ljava.lang.String;@5dc9cf61,[Ljava.lang.String;@2114ca1a,[Ledu.cmu.lti.nlp.amr.Dependency;@775522cf),Annotation([Ljava.lang.String;@7572403e,[Ljava.lang.String;@66533b36,[Ljava.lang.String;@619079fc),Annotation([Ljava.lang.String;@3f8d6c5b,[Ljava.lang.String;@5819a824,[Ledu.cmu.lti.nlp.amr.Entity;@27ecb29a))
AMR:
(c / city, name, n / name)
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 9 / 9)
(d / date-entity, poss, p2 / person)
(n / name, op, "Tokyo")
(n2 / name, op, "Yu")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(p2 / person, name, n2 / name)
(p3 / publication, name, n3 / name)
(p3 / publication, poss, p / person)
(p3 / publication, poss, p2 / person)
(r / report-01, ARG0, p / person)
(r / report-01, ARG1, c / city)

Decoded in 462,040 microseconds
Sentence: The Japanese delegation participating in the Sixth Far East and South Pacific Region Handicapped Sports Meet held a grand swearing in ceremony in Tokyo this afternoon .

Oracle Span 1:  afternoon => afternoon
Oracle Span 2:  ceremony => ceremony
Oracle Span 3:  delegation => delegation
Oracle Span 4:  Far East and South Pacific Region Handicapped Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "Handicapped" :op "Region" :op "Pacific" :op "South" :op "and" :op "East" :op "Far"))
Oracle Span 5:  grand => grand
Oracle Span 6:  held => hold-04
Oracle Span 7:  Japanese => (country :name (name :op "Japan"))
Oracle Span 8:  participating => participate-01
Oracle Span 9:  swearing => swear-06
Oracle Span 10:  this => this
Oracle Span 11:  Tokyo => (city :name (name :op "Tokyo"))
NER Entity: (country :name (name :op "Tokyo"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 25-26:  afternoon => afternoon
Span 9-10:  and => and
Span 21-22:  ceremony => ceremony
Span 2-3:  delegation => delegation
Span 7-9:  Far East => (world-region :name (name :op "Far" :op "East"))
Span 18-19:  grand => grand
Span 1-2:  Japanese => (country :name (name :op "Japan"))
Span 15-16:  Meet => "Meeting"
Span 11-12:  Pacific => (ocean :name (name :op "Pacific"))
Span 3-4:  participating => participate-01
Span 6-7:  Sixth => (ordinal-entity :value 6)
Span 10-11:  South => (country :name (name :op "South" :op "Africa"))
Span 24-25:  this => this
Span 23-24:  Tokyo => (city :name (name :op "Tokyo"))

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 25-26:  afternoon => afternoon
Oracle Span 21-22:  ceremony => ceremony
Oracle Span 2-3:  delegation => delegation
Oracle Span 7-16:  Far East and South Pacific Region Handicapped Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "Handicapped" :op "Region" :op "Pacific" :op "South" :op "and" :op "East" :op "Far"))
Oracle Span 18-19:  grand => grand
Oracle Span 16-17:  held => hold-04
Oracle Span 1-2:  Japanese => (country :name (name :op "Japan"))
Oracle Span 3-4:  participating => participate-01
Oracle Span 19-20:  swearing => swear-06
Oracle Span 24-25:  this => this
Oracle Span 23-24:  Tokyo => (city :name (name :op "Tokyo"))

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Japanese	_	JJ	JJ	_	3	amod	_	_
3	delegation	_	NN	NN	_	17	nsubj	_	_
4	participating	_	VBG	VBG	_	3	vmod	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	Sixth	_	NNP	NNP	_	9	nn	_	_
8	Far	_	NNP	NNP	_	9	nn	_	_
9	East	_	NNP	NNP	_	5	pobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	South	_	NNP	NNP	_	16	nn	_	_
12	Pacific	_	NNP	NNP	_	16	nn	_	_
13	Region	_	NNP	NNP	_	16	nn	_	_
14	Handicapped	_	NNP	NNP	_	16	nn	_	_
15	Sports	_	NNPS	NNPS	_	16	nn	_	_
16	Meet	_	NNP	NNP	_	9	conj	_	_
17	held	_	VBD	VBD	_	0	root	_	_
18	a	_	DT	DT	_	20	det	_	_
19	grand	_	JJ	JJ	_	20	amod	_	_
20	swearing	_	NN	NN	_	17	dobj	_	_
21	in	_	IN	IN	_	17	prep	_	_
22	ceremony	_	NN	NN	_	21	pobj	_	_
23	in	_	IN	IN	_	17	prep	_	_
24	Tokyo	_	NNP	NNP	_	23	pobj	_	_
25	this	_	DT	DT	_	26	det	_	_
26	afternoon	_	NN	NN	_	17	tmod	_	_
27	.	_	.	.	_	17	punct	_	_

Oracle:
(a / afternoon, mod, t2 / this)
(c3 / ceremony, mod, g2 / grand)
(c3 / ceremony, mod, s2 / swear-06)
(c4 / city, name, n2 / name)
(c5 / country, name, n3 / name)
(d / delegation, mod, c5 / country)
(g / game, name, n / name)
(h / hold-04, ARG0, d / delegation)
(h / hold-04, ARG1, c3 / ceremony)
(h / hold-04, location, c4 / city)
(h / hold-04, time, a / afternoon)
(n / name, op, "East")
(n / name, op, "Far")
(n / name, op, "Handicapped")
(n / name, op, "Meet")
(n / name, op, "Pacific")
(n / name, op, "Region")
(n / name, op, "South")
(n / name, op, "Sports")
(n / name, op, "and")
(n2 / name, op, "Tokyo")
(n3 / name, op, "Japan")
(p / participate-01, ARG0, d / delegation)
(p / participate-01, ARG1, g / game)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),this,this,false), Span(6,7,List(2, 1),Sixth,(ordinal-entity :value 6),false), Span(2,3,List(3),delegation,delegation,false), Span(9,10,List(4),and,and,false), Span(11,12,List(7, 6, 5),Pacific,(ocean :name (name :op "Pacific")),false), Span(1,2,List(10, 9, 8),Japanese,(country :name (name :op "Japan")),false), Span(10,11,List(14, 13, 12, 11),South,(country :name (name :op "South" :op "Africa")),false), Span(15,16,List(15),Meet,"Meeting",false), Span(23,24,List(18, 17, 16),Tokyo,(city :name (name :op "Tokyo")),false), Span(18,19,List(19),grand,grand,false), Span(3,4,List(20),participating,participate-01,false), Span(7,9,List(24, 23, 22, 21),Far East,(world-region :name (name :op "Far" :op "East")),false), Span(21,22,List(25),ceremony,ceremony,false), Span(25,26,List(26),afternoon,afternoon,false)),Map(2 -> 6, 5 -> ocean, 12 -> name, 8 -> country, 15 -> "Meeting", 21 -> world-region, 18 -> "Tokyo", 24 -> "East", 7 -> "Pacific", 1 -> ordinal-entity, 17 -> name, 23 -> "Far", 26 -> afternoon, 4 -> and, 11 -> country, 14 -> "Africa", 20 -> participate-01, 6 -> name, 9 -> name, 0 -> this, 22 -> name, 16 -> city, 19 -> grand, 10 -> "Japan", 3 -> delegation, 25 -> ceremony, 13 -> "South"),Map(w -> world-region, n -> name, M -> "Meeting", t -> this, c4 -> ceremony, n4 -> name, d -> delegation, p -> participate-01, g -> grand, a -> and, n3 -> name, c3 -> city, o2 -> ocean, a2 -> afternoon, 6 -> 6, c -> country, o -> ordinal-entity, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@c339311,Annotation([Ljava.lang.String;@2206d85e,[Ljava.lang.String;@3d6c6a07,[Ljava.lang.String;@6f129eaf),Annotation([Ljava.lang.String;@7fa92347,[Ljava.lang.String;@6b79c0c4,[Ledu.cmu.lti.nlp.amr.Dependency;@351ba3fe),Annotation([Ljava.lang.String;@4e07a414,[Ljava.lang.String;@78821588,[Ljava.lang.String;@5d5895bc),Annotation([Ljava.lang.String;@35b4c9ba,[Ljava.lang.String;@4660fc1c,[Ledu.cmu.lti.nlp.amr.Entity;@2ea68f0d))
AMR:
(a / and, op, M / "Meeting")
(a / and, op, c2 / country)
(a / and, op, o2 / ocean)
(a2 / afternoon, mod, t / this)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / city, name, n4 / name)
(c4 / ceremony, location, c3 / city)
(c4 / ceremony, mod, M / "Meeting")
(d / delegation, mod, c / country)
(g / grand, mod, o / ordinal-entity)
(n / name, op, "Pacific")
(n2 / name, op, "Japan")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Tokyo")
(n5 / name, op, "East")
(n5 / name, op, "Far")
(o / ordinal-entity, value, 6 / 6)
(o2 / ocean, name, n / name)
(p / participate-01, ARG0, d / delegation)
(p / participate-01, ARG1, w / world-region)
(p / participate-01, ARG2, a2 / afternoon)
(p / participate-01, location, a / and)
(w / world-region, mod, o / ordinal-entity)
(w / world-region, name, n5 / name)

Decoded in 1,226,717 microseconds
Sentence: A Japanese flag hung from the Chairman 's stage .

Oracle Span 1:  Chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 2:  flag => flag
Oracle Span 3:  hung => hang-01
Oracle Span 4:  Japanese => (country :name (name :op "Japan"))
Oracle Span 5:  stage => stage
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 6-7:  Chairman => (chairman :ARG2-of have-org-role-91)
Span 2-3:  flag => flag
Span 3-4:  hung => hang-01
Span 1-2:  Japanese => (country :name (name :op "Japan"))
Span 8-9:  stage => stage

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 6-7:  Chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 2-3:  flag => flag
Oracle Span 3-4:  hung => hang-01
Oracle Span 1-2:  Japanese => (country :name (name :op "Japan"))
Oracle Span 8-9:  stage => stage

Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	Japanese	_	JJ	JJ	_	3	amod	_	_
3	flag	_	NN	NN	_	4	nsubj	_	_
4	hung	_	VBD	VBD	_	0	root	_	_
5	from	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	Chairman	_	NNP	NNP	_	9	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	stage	_	NN	NN	_	5	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(c2 / country, name, n / name)
(f / flag, mod, c2 / country)
(h / hang-01, ARG1, f / flag)
(h / hang-01, ARG2, s / stage)
(h2 / have-org-role-91, ARG2, c3 / chairman)
(n / name, op, "Japan")

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),hung,hang-01,false), Span(8,9,List(1),stage,stage,false), Span(6,7,List(3, 2),Chairman,(chairman :ARG2-of have-org-role-91),false), Span(1,2,List(6, 5, 4),Japanese,(country :name (name :op "Japan")),false), Span(2,3,List(7),flag,flag,false)),Map(2 -> chairman, 5 -> name, 7 -> flag, 1 -> stage, 4 -> country, 6 -> "Japan", 0 -> hang-01, 3 -> have-org-role-91),Map(n -> name, h -> hang-01, h2 -> have-org-role-91, s -> stage, c -> chairman, f -> flag, c2 -> country))),[Ljava.lang.String;@7a47ac88,Annotation([Ljava.lang.String;@50e3166b,[Ljava.lang.String;@7a8163ed,[Ljava.lang.String;@7ddb14f8),Annotation([Ljava.lang.String;@3a3fc427,[Ljava.lang.String;@7227dd45,[Ledu.cmu.lti.nlp.amr.Dependency;@3c846e7),Annotation([Ljava.lang.String;@2691eeb2,[Ljava.lang.String;@624b08bb,[Ljava.lang.String;@2eca2c42),Annotation([Ljava.lang.String;@6f74b802,[Ljava.lang.String;@46393f20,[Ledu.cmu.lti.nlp.amr.Entity;@7c8de98c))
AMR:
(c2 / country, name, n / name)
(f / flag, mod, c2 / country)
(h / hang-01, ARG0, f / flag)
(h / hang-01, ARG1, s / stage)
(h2 / have-org-role-91, ARG2, c / chairman)
(n / name, op, "Japan")
(s / stage, poss, c / chairman)

Decoded in 193,748 microseconds
Sentence: Sportsmen , coaches , doctors , nurses and officials of the delegation sat neatly below the stage .

Oracle Span 1:  and => and
Oracle Span 2:  below => below
Oracle Span 3:  coaches => (person :ARG0-of coach-01)
Oracle Span 4:  delegation => delegation
Oracle Span 5:  doctors => doctor
Oracle Span 6:  neatly => neat
Oracle Span 7:  nurses => nurse
Oracle Span 8:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 9:  sat => sit-01
Oracle Span 10:  Sportsmen => sportsman
Oracle Span 11:  stage => stage
Spans:
Span 7-8:  and => and
Span 14-15:  below => below
Span 2-3:  coaches => (person :ARG0-of coach-01)
Span 11-12:  delegation => delegation
Span 4-5:  doctors => doctor
Span 13-14:  neatly => neat
Span 6-7:  nurses => nurse
Span 8-9:  officials => (person :ARG0-of (have-org-role-91 :ARG2 official))
Span 12-13:  sat => sit-01
Span 16-17:  stage => stage

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 14-15:  below => below
Oracle Span 2-3:  coaches => (person :ARG0-of coach-01)
Oracle Span 11-12:  delegation => delegation
Oracle Span 4-5:  doctors => doctor
Oracle Span 13-14:  neatly => neat
Oracle Span 6-7:  nurses => nurse
Oracle Span 8-9:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 12-13:  sat => sit-01
Oracle Span 0-1:  Sportsmen => sportsman
Oracle Span 16-17:  stage => stage

Dependencies:
1	Sportsmen	_	JJ	JJ	_	13	nsubj	_	_
2	,	_	,	,	_	1	punct	_	_
3	coaches	_	NNS	NNS	_	1	conj	_	_
4	,	_	,	,	_	1	punct	_	_
5	doctors	_	NNS	NNS	_	1	conj	_	_
6	,	_	,	,	_	1	punct	_	_
7	nurses	_	NNS	NNS	_	1	conj	_	_
8	and	_	CC	CC	_	1	cc	_	_
9	officials	_	NNS	NNS	_	1	conj	_	_
10	of	_	IN	IN	_	1	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	delegation	_	NN	NN	_	10	pobj	_	_
13	sat	_	VBD	VBD	_	0	root	_	_
14	neatly	_	RB	RB	_	13	advmod	_	_
15	below	_	IN	IN	_	13	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	stage	_	NN	NN	_	15	pobj	_	_
18	.	_	.	.	_	13	punct	_	_

Oracle:
(a / and, op, d / doctor)
(a / and, op, n / nurse)
(a / and, op, p / person)
(a / and, op, s2 / sportsman)
(b / below, op, s3 / stage)
(c / coach-01, ARG0, p / person)
(h / have-org-role-91, ARG1, d2 / delegation)
(h / have-org-role-91, ARG2, o2 / official)
(s / sit-01, ARG1, a / and)
(s / sit-01, location, b / below)
(s / sit-01, manner, n2 / neat)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),below,below,false), Span(4,5,List(1),doctors,doctor,false), Span(11,12,List(2),delegation,delegation,false), Span(8,9,List(5, 4, 3),officials,(person :ARG0-of (have-org-role-91 :ARG2 official)),false), Span(16,17,List(6),stage,stage,false), Span(13,14,List(7),neatly,neat,false), Span(2,3,List(9, 8),coaches,(person :ARG0-of coach-01),false), Span(12,13,List(10),sat,sit-01,false), Span(6,7,List(11),nurses,nurse,false), Span(7,8,List(12),and,and,false)),Map(2 -> delegation, 5 -> official, 12 -> and, 8 -> person, 7 -> neat, 1 -> doctor, 4 -> have-org-role-91, 11 -> nurse, 6 -> stage, 0 -> below, 9 -> coach-01, 3 -> person, 10 -> sit-01),Map(n -> neat, h -> have-org-role-91, s2 -> sit-01, b -> below, p2 -> person, s -> stage, d -> doctor, p -> person, a -> and, d2 -> delegation, c -> coach-01, o -> official, n2 -> nurse))),[Ljava.lang.String;@1543278a,Annotation([Ljava.lang.String;@46760452,[Ljava.lang.String;@5c8b5742,[Ljava.lang.String;@7afac118),Annotation([Ljava.lang.String;@7609c6ba,[Ljava.lang.String;@ab18bd,[Ledu.cmu.lti.nlp.amr.Dependency;@69c6ead),Annotation([Ljava.lang.String;@2ac29d67,[Ljava.lang.String;@1246a293,[Ljava.lang.String;@4a703e96),Annotation([Ljava.lang.String;@2f7cd873,[Ljava.lang.String;@11eb415e,[Ledu.cmu.lti.nlp.amr.Entity;@369e2bca))
AMR:
(a / and, op, d / doctor)
(a / and, op, p2 / person)
(b / below, mod, n / neat)
(b / below, op, s / stage)
(c / coach-01, ARG0, p2 / person)
(c / coach-01, ARG1, s2 / sit-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, s2 / sit-01)
(h / have-org-role-91, ARG2, o / official)
(s2 / sit-01, ARG0, d2 / delegation)
(s2 / sit-01, ARG1, n2 / nurse)
(s2 / sit-01, ARG6, b / below)

Decoded in 2,769,697 microseconds
Sentence: An atmosphere of confidence and eagerness for progress filled the ceremony ground .

Oracle Span 1:  and => and
Oracle Span 2:  atmosphere => atmosphere
Oracle Span 3:  ceremony => ceremony
Oracle Span 4:  confidence => confident-41
Oracle Span 5:  eagerness => eager-41
Oracle Span 6:  filled => fill-01
Oracle Span 7:  ground => ground
Oracle Span 8:  progress => progress-01
Spans:
Span 4-5:  and => and
Span 1-2:  atmosphere => atmosphere
Span 10-11:  ceremony => ceremony
Span 3-4:  confidence => confidence
Span 8-9:  filled => fill-01
Span 11-12:  ground => ground
Span 7-8:  progress => progress-01
Span 9-10:  the => (country :name (name :op "North"))

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 1-2:  atmosphere => atmosphere
Oracle Span 10-11:  ceremony => ceremony
Oracle Span 3-4:  confidence => confident-41
Oracle Span 5-6:  eagerness => eager-41
Oracle Span 8-9:  filled => fill-01
Oracle Span 11-12:  ground => ground
Oracle Span 7-8:  progress => progress-01

Dependencies:
1	An	_	DT	DT	_	2	det	_	_
2	atmosphere	_	NN	NN	_	9	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	confidence	_	NN	NN	_	3	pobj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	eagerness	_	NN	NN	_	4	conj	_	_
7	for	_	IN	IN	_	4	prep	_	_
8	progress	_	NN	NN	_	7	pobj	_	_
9	filled	_	VBD	VBD	_	0	root	_	_
10	the	_	DT	DT	_	12	det	_	_
11	ceremony	_	NN	NN	_	12	nn	_	_
12	ground	_	NN	NN	_	9	dobj	_	_
13	.	_	.	.	_	9	punct	_	_

Oracle:
(a2 / and, consist, a / atmosphere)
(a2 / and, op, c / confident-41)
(a2 / and, op, e / eager-41)
(c2 / ceremony, location, g / ground)
(e / eager-41, ARG1, p / progress-01)
(f / fill-01, ARG1, g / ground)
(f / fill-01, ARG2, a / atmosphere)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),confidence,confidence,false), Span(11,12,List(1),ground,ground,false), Span(9,10,List(4, 3, 2),the,(country :name (name :op "North")),false), Span(1,2,List(5),atmosphere,atmosphere,false), Span(8,9,List(6),filled,fill-01,false), Span(10,11,List(7),ceremony,ceremony,false), Span(4,5,List(8),and,and,false), Span(7,8,List(9),progress,progress-01,false)),Map(2 -> country, 5 -> atmosphere, 8 -> and, 7 -> ceremony, 1 -> ground, 4 -> "North", 6 -> fill-01, 9 -> progress-01, 0 -> confidence, 3 -> name),Map(n -> name, p -> progress-01, g -> ground, c3 -> ceremony, a -> atmosphere, a2 -> and, c -> confidence, f -> fill-01, c2 -> country))),[Ljava.lang.String;@7e2acedf,Annotation([Ljava.lang.String;@54f8a789,[Ljava.lang.String;@7ce42d5d,[Ljava.lang.String;@34ce889),Annotation([Ljava.lang.String;@2b388209,[Ljava.lang.String;@3aedac08,[Ledu.cmu.lti.nlp.amr.Dependency;@67bee0cd),Annotation([Ljava.lang.String;@3d25413,[Ljava.lang.String;@6c15a6aa,[Ljava.lang.String;@3bcfcacc),Annotation([Ljava.lang.String;@2b67fdf0,[Ljava.lang.String;@3a044643,[Ledu.cmu.lti.nlp.amr.Entity;@7be5975f))
AMR:
(a2 / and, mod, c2 / country)
(a2 / and, op, c / confidence)
(c2 / country, name, n / name)
(c3 / ceremony, location, g / ground)
(f / fill-01, ARG0, a2 / and)
(f / fill-01, ARG1, g / ground)
(f / fill-01, ARG6, a / atmosphere)
(n / name, op, "North")
(p / progress-01, ARG1, f / fill-01)

Decoded in 381,068 microseconds
Sentence: Vice-minister of the Japanese State Welfare Ministry , Souyasen , delivered a " bolstering departure speech " to the delegation .

Oracle Span 1:  bolstering => bolster-01
Oracle Span 2:  delegation => delegation
Oracle Span 3:  delivered => deliver-01
Oracle Span 4:  departure => depart-01
Oracle Span 5:  Japanese => (country :name (name :op "Japan"))
Oracle Span 6:  minister => (have-org-role-91 :ARG2 minister)
Oracle Span 7:  Souyasen => (person :name (name :op "Souyasen"))
Oracle Span 8:  speech => speech
Oracle Span 9:  State Welfare Ministry => (government-organization :name (name :op "Ministry" :op "Welfare" :op "State"))
Oracle Span 10:  Vice => vice
NER Entity: (organization :name (name :op "Welfare" :op "Ministry"))
Spans:
Span 13-14:  bolstering => bolster-01
Span 19-20:  delegation => delegation
Span 10-11:  delivered => deliver-01
Span 14-15:  departure => depart-01
Span 3-4:  Japanese => (country :name (name :op "Japan"))
Span 6-7:  Ministry => government-organization
Span 15-16:  speech => speech
Span 4-5:  State => (thing :ARG1-of state-01)
Span 0-1:  Vice-minister => vice
Span 5-6:  Welfare => socialist

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 15-16:  bolstering => bolster-01
Oracle Span 21-22:  delegation => delegation
Oracle Span 12-13:  delivered => deliver-01
Oracle Span 16-17:  departure => depart-01
Oracle Span 5-6:  Japanese => (country :name (name :op "Japan"))
Oracle Span 2-3:  minister => (have-org-role-91 :ARG2 minister)
Oracle Span 10-11:  Souyasen => (person :name (name :op "Souyasen"))
Oracle Span 17-18:  speech => speech
Oracle Span 6-9:  State Welfare Ministry => (government-organization :name (name :op "Ministry" :op "Welfare" :op "State"))
Oracle Span 0-1:  Vice => vice

Dependencies:
1	Vice-minister	_	NN	NN	_	11	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	7	det	_	_
4	Japanese	_	JJ	JJ	_	7	amod	_	_
5	State	_	NNP	NNP	_	7	nn	_	_
6	Welfare	_	NNP	NNP	_	7	nn	_	_
7	Ministry	_	NNP	NNP	_	2	pobj	_	_
8	,	_	,	,	_	1	punct	_	_
9	Souyasen	_	NNP	NNP	_	1	appos	_	_
10	,	_	,	,	_	1	punct	_	_
11	delivered	_	VBD	VBD	_	0	root	_	_
12	a	_	SYM	SYM	_	11	dobj	_	_
13	"	_	''	''	_	12	punct	_	_
14	bolstering	_	VBG	VBG	_	12	vmod	_	_
15	departure	_	NN	NN	_	16	nn	_	_
16	speech	_	NN	NN	_	14	dobj	_	_
17	"	_	''	''	_	14	punct	_	_
18	to	_	TO	TO	_	14	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	delegation	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	11	punct	_	_

Oracle:
(b / bolster-01, ARG0, s2 / speech)
(c / country, name, n3 / name)
(d / deliver-01, ARG0, p / person)
(d / deliver-01, ARG1, s2 / speech)
(d / deliver-01, ARG2, d3 / delegation)
(g / government-organization, mod, c / country)
(g / government-organization, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, v / vice)
(n / name, op, "Souyasen")
(n2 / name, op, "Ministry")
(n2 / name, op, "State")
(n2 / name, op, "Welfare")
(n3 / name, op, "Japan")
(p / person, name, n / name)
(s2 / speech, mod, d2 / depart-01)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(1, 0),State,(thing :ARG1-of state-01),false), Span(19,20,List(2),delegation,delegation,false), Span(5,6,List(3),Welfare,socialist,false), Span(13,14,List(4),bolstering,bolster-01,false), Span(15,16,List(5),speech,speech,false), Span(3,4,List(8, 7, 6),Japanese,(country :name (name :op "Japan")),false), Span(14,15,List(9),departure,depart-01,false), Span(0,1,List(10),Vice-minister,vice,false), Span(10,11,List(11),delivered,deliver-01,false), Span(6,7,List(12),Ministry,government-organization,false)),Map(2 -> delegation, 5 -> speech, 12 -> government-organization, 8 -> "Japan", 7 -> name, 1 -> state-01, 4 -> bolster-01, 11 -> deliver-01, 6 -> country, 0 -> thing, 9 -> depart-01, 3 -> socialist, 10 -> vice),Map(n -> name, b -> bolster-01, s2 -> socialist, t -> thing, d3 -> deliver-01, s -> state-01, v -> vice, d -> delegation, g -> government-organization, d2 -> depart-01, c -> country, s3 -> speech))),[Ljava.lang.String;@5bc86b51,Annotation([Ljava.lang.String;@436bc066,[Ljava.lang.String;@5a582e54,[Ljava.lang.String;@313ff1d6),Annotation([Ljava.lang.String;@29359643,[Ljava.lang.String;@34c00bf3,[Ledu.cmu.lti.nlp.amr.Dependency;@2ff1b9b1),Annotation([Ljava.lang.String;@610e5cd8,[Ljava.lang.String;@640c4934,[Ljava.lang.String;@502749d5),Annotation([Ljava.lang.String;@72395e51,[Ljava.lang.String;@61423452,[Ledu.cmu.lti.nlp.amr.Entity;@670194a7))
AMR:
(b / bolster-01, ARG0, v / vice)
(b / bolster-01, ARG1, d / delegation)
(b / bolster-01, ARG6, d2 / depart-01)
(c / country, name, n / name)
(d2 / depart-01, ARG0, s2 / socialist)
(d2 / depart-01, ARG2, c / country)
(d2 / depart-01, ARG6, s3 / speech)
(d3 / deliver-01, ARG1, c / country)
(n / name, op, "Japan")
(s / state-01, ARG1, t / thing)
(s / state-01, ARG6, c / country)
(v / vice, poss, g / government-organization)

Decoded in 3,559,533 microseconds
Sentence: Souya said , the Far South Sports Meet was an international sports meet that attracts the world 's attention , and the scale of this sports meet to be held in Beijing is the largest to date .

Oracle Span 1:  and => and
Oracle Span 2:  attention => attention
Oracle Span 3:  attracts => attract-01
Oracle Span 4:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 5:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Oracle Span 6:  held => hold-04
Oracle Span 7:  international => international
Oracle Span 8:  largest => (large :degree most)
Oracle Span 9:  meet => meet
Oracle Span 10:  said => say-01
Oracle Span 11:  scale => scale
Oracle Span 12:  Souya => (person :name (name :op "Souya"))
Oracle Span 13:  sports => sport
Oracle Span 14:  world => world
NER Entity: (person :name (name :op "Souya"))
NER Entity: (organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet"))
NER Entity: (country :name (name :op "Beijing"))
Spans:
Span 20-21:  and => and
Span 18-19:  attention => attention
Span 14-15:  attracts => attract-01
Span 31-32:  Beijing => (city :name (name :op "Beijing"))
Span 10-11:  international => international
Span 7-8:  Meet => "Meeting"
Span 26-27:  meet => meet-02
Span 12-13:  meet => meet-02
Span 1-2:  said => say-01
Span 22-23:  scale => scale
Span 5-6:  South => (country :name (name :op "South" :op "Africa"))
Span 0-1:  Souya => (person :name (name :op "Souya"))
Span 25-26:  sports => sport
Span 11-12:  sports => sport
Span 33-34:  the => most
Span 24-25:  this => this
Span 16-17:  world => world

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 20-21:  and => and
Oracle Span 18-19:  attention => attention
Oracle Span 14-15:  attracts => attract-01
Oracle Span 31-32:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 4-8:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Oracle Span 29-30:  held => hold-04
Oracle Span 10-11:  international => international
Oracle Span 34-35:  largest => (large :degree most)
Oracle Span 12-13:  meet => meet
Oracle Span 1-2:  said => say-01
Oracle Span 22-23:  scale => scale
Oracle Span 0-1:  Souya => (person :name (name :op "Souya"))
Oracle Span 11-12:  sports => sport
Oracle Span 16-17:  world => world

Dependencies:
1	Souya	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	,	_	,	,	_	12	punct	_	_
4	the	_	DT	DT	_	8	det	_	_
5	Far	_	NNP	NNP	_	8	nn	_	_
6	South	_	NNP	NNP	_	8	nn	_	_
7	Sports	_	NNP	NNP	_	8	nn	_	_
8	Meet	_	NNP	NNP	_	12	nsubj	_	_
9	was	_	VBD	VBD	_	12	cop	_	_
10	an	_	DT	DT	_	12	det	_	_
11	international	_	JJ	JJ	_	12	amod	_	_
12	sports	_	NNS	NNS	_	2	dep	_	_
13	meet	_	VBP	VBP	_	12	rcmod	_	_
14	that	_	IN	IN	_	15	mark	_	_
15	attracts	_	VBZ	VBZ	_	13	ccomp	_	_
16	the	_	DT	DT	_	17	det	_	_
17	world	_	NN	NN	_	19	poss	_	_
18	's	_	POS	POS	_	17	possessive	_	_
19	attention	_	NN	NN	_	15	dobj	_	_
20	,	_	,	,	_	12	punct	_	_
21	and	_	CC	CC	_	2	cc	_	_
22	the	_	DT	DT	_	23	det	_	_
23	scale	_	NN	NN	_	27	nsubj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	this	_	DT	DT	_	26	det	_	_
26	sports	_	NNS	NNS	_	24	pobj	_	_
27	meet	_	VBP	VBP	_	2	conj	_	_
28	to	_	TO	TO	_	30	aux	_	_
29	be	_	VB	VB	_	30	auxpass	_	_
30	held	_	VBN	VBN	_	27	xcomp	_	_
31	in	_	IN	IN	_	30	prep	_	_
32	Beijing	_	NNP	NNP	_	31	pobj	_	_
33	is	_	VBZ	VBZ	_	35	cop	_	_
34	the	_	DT	DT	_	35	det	_	_
35	largest	_	JJS	JJS	_	32	rcmod	_	_
36	to	_	TO	TO	_	35	prep	_	_
37	date	_	NN	NN	_	36	pobj	_	_
38	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, l / large)
(a / and, op, m3 / meet)
(a2 / attract-01, ARG0, m3 / meet)
(a2 / attract-01, ARG1, a3 / attention)
(a3 / attention, poss, w / world)
(c2 / city, name, n3 / name)
(g / game, name, n2 / name)
(h / hold-04, ARG1, m3 / meet)
(h / hold-04, location, c2 / city)
(l / large, degree, m2 / most)
(l / large, domain, s4 / scale)
(m3 / meet, domain, g / game)
(m3 / meet, mod, i / international)
(m3 / meet, mod, s3 / sport)
(n / name, op, "Souya")
(n2 / name, op, "Far")
(n2 / name, op, "Meet")
(n2 / name, op, "South")
(n2 / name, op, "Sports")
(n3 / name, op, "Beijing")
(p2 / person, name, n / name)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, a / and)
(s4 / scale, poss, g / game)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),this,this,false), Span(10,11,List(1),international,international,false), Span(7,8,List(2),Meet,"Meeting",false), Span(31,32,List(5, 4, 3),Beijing,(city :name (name :op "Beijing")),false), Span(26,27,List(6),meet,meet-02,false), Span(18,19,List(7),attention,attention,false), Span(20,21,List(8),and,and,false), Span(22,23,List(9),scale,scale,false), Span(0,1,List(12, 11, 10),Souya,(person :name (name :op "Souya")),false), Span(25,26,List(13),sports,sport,false), Span(5,6,List(17, 16, 15, 14),South,(country :name (name :op "South" :op "Africa")),false), Span(1,2,List(18),said,say-01,false), Span(12,13,List(19),meet,meet-02,false), Span(33,34,List(20),the,most,false), Span(16,17,List(21),world,world,false), Span(14,15,List(22),attracts,attract-01,false), Span(11,12,List(23),sports,sport,false)),Map(2 -> "Meeting", 5 -> "Beijing", 12 -> "Souya", 15 -> name, 8 -> and, 21 -> world, 18 -> say-01, 7 -> attention, 17 -> "Africa", 1 -> international, 23 -> sport, 4 -> name, 11 -> name, 14 -> country, 20 -> most, 6 -> meet-02, 22 -> attract-01, 0 -> this, 9 -> scale, 16 -> "South", 19 -> meet-02, 3 -> city, 10 -> person, 13 -> sport),Map(m3 -> most, w -> world, n -> name, M -> "Meeting", s2 -> sport, t -> this, m2 -> meet-02, a3 -> attract-01, s -> scale, s4 -> sport, m -> meet-02, p -> person, a -> attention, n3 -> name, i -> international, a2 -> and, s3 -> say-01, c -> city, n2 -> name, c2 -> country))),[Ljava.lang.String;@f2a93cd,Annotation([Ljava.lang.String;@49b03a6d,[Ljava.lang.String;@79f8bf73,[Ljava.lang.String;@61d8515e),Annotation([Ljava.lang.String;@3ab70253,[Ljava.lang.String;@721c343a,[Ledu.cmu.lti.nlp.amr.Dependency;@4ea30e2d),Annotation([Ljava.lang.String;@6dd2f406,[Ljava.lang.String;@6ff5c675,[Ljava.lang.String;@7c5b8255),Annotation([Ljava.lang.String;@2adf2995,[Ljava.lang.String;@50578a0c,[Ledu.cmu.lti.nlp.amr.Entity;@11d0281d))
AMR:
(M / "Meeting", mod, c2 / country)
(a2 / and, op, m / meet-02)
(a2 / and, time, s4 / sport)
(a3 / attract-01, ARG0, w / world)
(a3 / attract-01, ARG1, a / attention)
(c / city, mod, m3 / most)
(c / city, name, n / name)
(c2 / country, name, n3 / name)
(m / meet-02, ARG0, s / scale)
(m / meet-02, ARG1, c / city)
(m2 / meet-02, ARG0, s4 / sport)
(m2 / meet-02, ARG1, a3 / attract-01)
(n / name, op, "Beijing")
(n2 / name, op, "Souya")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(p / person, name, n2 / name)
(s / scale, poss, s2 / sport)
(s2 / sport, mod, t / this)
(s3 / say-01, ARG0, p / person)
(s3 / say-01, ARG1, a2 / and)
(s4 / sport, domain, M / "Meeting")
(s4 / sport, mod, i / international)

Decoded in 7,423,219 microseconds
Sentence: He hoped that all the athletes would " fully demonstrate the strength and skill that they cultivate daily , as the competitors representing Japan , they should carry out competition with athletes from various countries honestly " .

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  athletes => athlete
Oracle Span 4:  athletes => athlete
Oracle Span 5:  competition => (person :ARG0-of compete-01)
Oracle Span 6:  competitors => compete-01
Oracle Span 7:  countries => country
Oracle Span 8:  cultivate => cultivate-01
Oracle Span 9:  demonstrate => demonstrate-01
Oracle Span 10:  fully => full
Oracle Span 11:  He => he
Oracle Span 12:  honestly => honest
Oracle Span 13:  hoped => hope-01
Oracle Span 14:  Japan => (country :name (name :op "Japan"))
Oracle Span 15:  representing => represent-01
Oracle Span 16:  should => recommend-01
Oracle Span 17:  skill => skill
Oracle Span 18:  strength => strength
Oracle Span 19:  various => various
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 3-4:  all => all
Span 12-13:  and => and
Span 5-6:  athletes => athlete
Span 31-32:  athletes => athlete
Span 27-28:  carry => carry-03
Span 29-30:  competition => complement-01
Span 21-22:  competitors => (company :ARG0-of compete-01)
Span 34-35:  countries => country
Span 16-17:  cultivate => cultivate-01
Span 17-18:  daily => (rate-entity-91 :ARG3 (temporal-quantity :unit day))
Span 9-10:  demonstrate => demonstrate-01
Span 8-9:  fully => full
Span 0-1:  He => he
Span 35-36:  honestly => honest
Span 1-2:  hoped => hope-01
Span 23-24:  Japan => (country :name (name :op "Japan"))
Span 22-23:  representing => represent-01
Span 26-27:  should => shoulder-01
Span 13-14:  skill => skill
Span 11-12:  strength => strength
Span 33-34:  various => various

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 3-4:  all => all
Oracle Span 12-13:  and => and
Oracle Span 5-6:  athletes => athlete
Oracle Span 31-32:  athletes => athlete
Oracle Span 29-30:  competition => (person :ARG0-of compete-01)
Oracle Span 21-22:  competitors => compete-01
Oracle Span 34-35:  countries => country
Oracle Span 16-17:  cultivate => cultivate-01
Oracle Span 9-10:  demonstrate => demonstrate-01
Oracle Span 8-9:  fully => full
Oracle Span 0-1:  He => he
Oracle Span 35-36:  honestly => honest
Oracle Span 1-2:  hoped => hope-01
Oracle Span 23-24:  Japan => (country :name (name :op "Japan"))
Oracle Span 22-23:  representing => represent-01
Oracle Span 26-27:  should => recommend-01
Oracle Span 13-14:  skill => skill
Oracle Span 11-12:  strength => strength
Oracle Span 33-34:  various => various

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	hoped	_	VBD	VBD	_	10	ccomp	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	all	_	PDT	PDT	_	6	predet	_	_
5	the	_	DT	DT	_	6	det	_	_
6	athletes	_	NNS	NNS	_	7	nsubj	_	_
7	would	_	MD	MD	_	2	ccomp	_	_
8	"	_	''	''	_	10	punct	_	_
9	fully	_	RB	RB	_	10	advmod	_	_
10	demonstrate	_	VBP	VBP	_	0	root	_	_
11	the	_	DT	DT	_	12	det	_	_
12	strength	_	NN	NN	_	10	dobj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	skill	_	NN	NN	_	12	conj	_	_
15	that	_	IN	IN	_	17	mark	_	_
16	they	_	PRP	PRP	_	17	nsubj	_	_
17	cultivate	_	VBP	VBP	_	10	ccomp	_	_
18	daily	_	RB	RB	_	17	advmod	_	_
19	,	_	,	,	_	17	punct	_	_
20	as	_	IN	IN	_	17	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	competitors	_	NNS	NNS	_	23	nsubj	_	_
23	representing	_	VBG	VBG	_	20	pcomp	_	_
24	Japan	_	NNP	NNP	_	28	nsubj	_	_
25	,	_	,	,	_	28	punct	_	_
26	they	_	PRP	PRP	_	28	nsubj	_	_
27	should	_	MD	MD	_	28	aux	_	_
28	carry	_	VB	VB	_	23	ccomp	_	_
29	out	_	RP	RP	_	28	prt	_	_
30	competition	_	NN	NN	_	28	dobj	_	_
31	with	_	IN	IN	_	28	prep	_	_
32	athletes	_	NNS	NNS	_	31	pobj	_	_
33	from	_	IN	IN	_	32	prep	_	_
34	various	_	JJ	JJ	_	35	amod	_	_
35	countries	_	NNS	NNS	_	33	pobj	_	_
36	honestly	_	RB	RB	_	28	advmod	_	_
37	"	_	''	''	_	28	punct	_	_
38	.	_	.	.	_	10	punct	_	_

Oracle:
(a / and, op, h / hope-01)
(a2 / athlete, quant, a3 / all)
(a5 / athlete, source, c4 / country)
(c2 / cultivate-01, ARG0, a2 / athlete)
(c3 / compete-01, ARG0, a2 / athlete)
(c3 / compete-01, ARG1, a5 / athlete)
(c3 / compete-01, manner, h3 / honest)
(c3 / compete-01, prep-as, p / person)
(c4 / country, mod, v / various)
(c5 / country, name, n / name)
(c6 / compete-01, ARG0, p / person)
(d / demonstrate-01, ARG0, a2 / athlete)
(d / demonstrate-01, degree, f / full)
(h / hope-01, ARG0, h2 / he)
(h / hope-01, ARG1, d / demonstrate-01)
(n / name, op, "Japan")
(r / recommend-01, ARG1, c3 / compete-01)
(r2 / represent-01, ARG0, p / person)
(r2 / represent-01, ARG1, c5 / country)

Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),fully,full,false), Span(33,34,List(1),various,various,false), Span(0,1,List(2),He,he,false), Span(11,12,List(3),strength,strength,false), Span(5,6,List(4),athletes,athlete,false), Span(22,23,List(5),representing,represent-01,false), Span(27,28,List(6),carry,carry-03,false), Span(9,10,List(7),demonstrate,demonstrate-01,false), Span(26,27,List(8),should,shoulder-01,false), Span(21,22,List(10, 9),competitors,(company :ARG0-of compete-01),false), Span(23,24,List(13, 12, 11),Japan,(country :name (name :op "Japan")),false), Span(13,14,List(14),skill,skill,false), Span(35,36,List(15),honestly,honest,false), Span(34,35,List(16),countries,country,false), Span(16,17,List(17),cultivate,cultivate-01,false), Span(17,18,List(20, 19, 18),daily,(rate-entity-91 :ARG3 (temporal-quantity :unit day)),false), Span(29,30,List(21),competition,complement-01,false), Span(1,2,List(22),hoped,hope-01,false), Span(31,32,List(23),athletes,athlete,false), Span(3,4,List(24),all,all,false), Span(12,13,List(25),and,and,false)),Map(2 -> he, 5 -> represent-01, 12 -> name, 8 -> shoulder-01, 15 -> honest, 21 -> complement-01, 18 -> rate-entity-91, 24 -> all, 7 -> demonstrate-01, 1 -> various, 17 -> cultivate-01, 23 -> athlete, 4 -> athlete, 11 -> country, 14 -> skill, 20 -> day, 6 -> carry-03, 9 -> company, 0 -> full, 22 -> hope-01, 16 -> country, 19 -> temporal-quantity, 10 -> compete-01, 3 -> strength, 25 -> and, 13 -> "Japan"),Map(n -> name, h -> he, s2 -> shoulder-01, h2 -> honest, t -> temporal-quantity, c7 -> complement-01, c4 -> country, a3 -> all, s -> strength, v -> various, d -> demonstrate-01, r2 -> rate-entity-91, c3 -> compete-01, a -> athlete, d2 -> day, c6 -> cultivate-01, r -> represent-01, a2 -> athlete, c -> carry-03, h3 -> hope-01, s3 -> skill, f -> full, c2 -> company, a4 -> and, c5 -> country))),[Ljava.lang.String;@161daf17,Annotation([Ljava.lang.String;@449a2e73,[Ljava.lang.String;@3149f413,[Ljava.lang.String;@628952b5),Annotation([Ljava.lang.String;@19973ce4,[Ljava.lang.String;@ceb7013,[Ledu.cmu.lti.nlp.amr.Dependency;@72fcf4f1),Annotation([Ljava.lang.String;@5a480ce1,[Ljava.lang.String;@7a186b50,[Ljava.lang.String;@2d24e7e8),Annotation([Ljava.lang.String;@386ac5c1,[Ljava.lang.String;@225fe929,[Ledu.cmu.lti.nlp.amr.Entity;@1ba444d9))
AMR:
(a / athlete, quant, a3 / all)
(a2 / athlete, location, c5 / country)
(a4 / and, op, h3 / hope-01)
(a4 / and, op, s / strength)
(a4 / and, op, s3 / skill)
(c / carry-03, ARG0, c4 / country)
(c / carry-03, ARG1, c7 / complement-01)
(c3 / compete-01, ARG0, c2 / company)
(c4 / country, name, n / name)
(c5 / country, mod, v / various)
(c6 / cultivate-01, ARG0, h2 / honest)
(c6 / cultivate-01, ARG1, r / represent-01)
(c6 / cultivate-01, manner, r2 / rate-entity-91)
(c7 / complement-01, ARG1, a2 / athlete)
(d / demonstrate-01, ARG1, s / strength)
(d / demonstrate-01, manner, f / full)
(h3 / hope-01, ARG0, h / he)
(h3 / hope-01, ARG1, a3 / all)
(n / name, op, "Japan")
(r / represent-01, ARG0, c2 / company)
(r / represent-01, ARG1, s2 / shoulder-01)
(r2 / rate-entity-91, ARG1, d / demonstrate-01)
(r2 / rate-entity-91, ARG3, t / temporal-quantity)
(s2 / shoulder-01, ARG1, c / carry-03)
(t / temporal-quantity, unit, d2 / day)

Decoded in 8,560,795 microseconds
Sentence: Souya emphasized , the Japanese delegation must make use of this opportunity of participation in the Beijing Far South Sports Meet " to deepen friendship with athletes from various countries , and expand the scope of international friendliness . "

Oracle Span 1:  and => and
Oracle Span 2:  athletes => athlete
Oracle Span 3:  Beijing Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far" :op "Beijing"))
Oracle Span 4:  countries => country
Oracle Span 5:  deepen => deepen-01
Oracle Span 6:  delegation => delegation
Oracle Span 7:  emphasized => emphasize-01
Oracle Span 8:  expand => expand-01
Oracle Span 9:  friendliness => friendly-41
Oracle Span 10:  friendship => friendship
Oracle Span 11:  international => international
Oracle Span 12:  Japanese => (name :op "Japan")
Oracle Span 13:  opportunity => opportunity
Oracle Span 14:  participation => participate-01
Oracle Span 15:  scope => scope
Oracle Span 16:  Souya => (person :name (name :op "Souya"))
Oracle Span 17:  this => this
Oracle Span 18:  use => use-01
Oracle Span 19:  various => various
NER Entity: (person :name (name :op "Souya"))
NER Entity: (country :name (name :op "Beijing" :op "Far" :op "South" :op "Sports"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 31-32:  and => and
Span 26-27:  athletes => athlete
Span 16-17:  Beijing => (city :name (name :op "Beijing"))
Span 29-30:  countries => country
Span 23-24:  deepen => deepen-01
Span 5-6:  delegation => delegation
Span 1-2:  emphasized => emphasize-01
Span 32-33:  expand => expand-01
Span 37-38:  friendliness => friendliness
Span 24-25:  friendship => friendship
Span 36-37:  international => international
Span 7-8:  make => make-01
Span 20-21:  Meet => "Meeting"
Span 6-7:  must => muster-01
Span 11-12:  opportunity => opportunity
Span 13-14:  participation => partition-01
Span 34-35:  scope => scope
Span 18-19:  South => (country :name (name :op "South" :op "Africa"))
Span 0-1:  Souya => (person :name (name :op "Souya"))
Span 10-11:  this => this
Span 8-9:  use => use-01
Span 28-29:  various => various

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 31-32:  and => and
Oracle Span 26-27:  athletes => athlete
Oracle Span 16-21:  Beijing Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far" :op "Beijing"))
Oracle Span 29-30:  countries => country
Oracle Span 23-24:  deepen => deepen-01
Oracle Span 5-6:  delegation => delegation
Oracle Span 1-2:  emphasized => emphasize-01
Oracle Span 32-33:  expand => expand-01
Oracle Span 37-38:  friendliness => friendly-41
Oracle Span 24-25:  friendship => friendship
Oracle Span 36-37:  international => international
Oracle Span 4-5:  Japanese => (name :op "Japan")
Oracle Span 11-12:  opportunity => opportunity
Oracle Span 13-14:  participation => participate-01
Oracle Span 34-35:  scope => scope
Oracle Span 0-1:  Souya => (person :name (name :op "Souya"))
Oracle Span 10-11:  this => this
Oracle Span 8-9:  use => use-01
Oracle Span 28-29:  various => various

Dependencies:
1	Souya	_	NNP	NNP	_	2	nsubj	_	_
2	emphasized	_	VBD	VBD	_	8	ccomp	_	_
3	,	_	,	,	_	8	punct	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Japanese	_	JJ	JJ	_	6	amod	_	_
6	delegation	_	NN	NN	_	8	nsubj	_	_
7	must	_	MD	MD	_	8	aux	_	_
8	make	_	VB	VB	_	0	root	_	_
9	use	_	NN	NN	_	8	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	this	_	DT	DT	_	12	det	_	_
12	opportunity	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	participation	_	NN	NN	_	13	pobj	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	21	det	_	_
17	Beijing	_	NNP	NNP	_	21	nn	_	_
18	Far	_	NNP	NNP	_	21	nn	_	_
19	South	_	NNP	NNP	_	21	nn	_	_
20	Sports	_	NNPS	NNPS	_	21	nn	_	_
21	Meet	_	NNP	NNP	_	15	pobj	_	_
22	"	_	''	''	_	8	punct	_	_
23	to	_	TO	TO	_	24	aux	_	_
24	deepen	_	VB	VB	_	8	vmod	_	_
25	friendship	_	NN	NN	_	24	dobj	_	_
26	with	_	IN	IN	_	24	prep	_	_
27	athletes	_	NNS	NNS	_	26	pobj	_	_
28	from	_	IN	IN	_	27	prep	_	_
29	various	_	JJ	JJ	_	30	amod	_	_
30	countries	_	NNS	NNS	_	28	pobj	_	_
31	,	_	,	,	_	24	punct	_	_
32	and	_	CC	CC	_	24	cc	_	_
33	expand	_	VB	VB	_	24	conj	_	_
34	the	_	DT	DT	_	35	det	_	_
35	scope	_	NN	NN	_	33	dobj	_	_
36	of	_	IN	IN	_	35	prep	_	_
37	international	_	JJ	JJ	_	38	amod	_	_
38	friendliness	_	NN	NN	_	36	pobj	_	_
39	.	_	.	.	_	8	punct	_	_
40	"	_	''	''	_	8	punct	_	_

Oracle:
(a / and, op, d2 / deepen-01)
(a / and, op, e3 / expand-01)
(c3 / country, name, n2 / name)
(d / delegation, mod, c3 / country)
(d2 / deepen-01, ARG0, d / delegation)
(d2 / deepen-01, ARG1, f2 / friendship)
(e2 / emphasize-01, ARG0, p2 / person)
(e3 / expand-01, ARG0, d / delegation)
(e3 / expand-01, ARG1, s2 / scope)
(f / friendly-41, mod, i / international)
(f2 / friendship, prep-with, a2 / athlete)
(g / game, name, n3 / name)
(n / name, op, "Souya")
(n2 / name, op, "Japan")
(n3 / name, op, "Beijing")
(n3 / name, op, "Far")
(n3 / name, op, "Meet")
(n3 / name, op, "South")
(n3 / name, op, "Sports")
(o2 / opportunity, mod, p3 / participate-01)
(o2 / opportunity, mod, t / this)
(p2 / person, name, n / name)
(p3 / participate-01, ARG0, d / delegation)
(p3 / participate-01, ARG1, g / game)
(s2 / scope, poss, f / friendly-41)
(u / use-01, ARG0, d / delegation)
(u / use-01, ARG1, o2 / opportunity)
(u / use-01, ARG2, a / and)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),international,international,false), Span(18,19,List(4, 3, 2, 1),South,(country :name (name :op "South" :op "Africa")),false), Span(6,7,List(5),must,muster-01,false), Span(8,9,List(6),use,use-01,false), Span(29,30,List(7),countries,country,false), Span(24,25,List(8),friendship,friendship,false), Span(7,8,List(9),make,make-01,false), Span(31,32,List(10),and,and,false), Span(34,35,List(11),scope,scope,false), Span(28,29,List(12),various,various,false), Span(0,1,List(15, 14, 13),Souya,(person :name (name :op "Souya")),false), Span(11,12,List(16),opportunity,opportunity,false), Span(1,2,List(17),emphasized,emphasize-01,false), Span(23,24,List(18),deepen,deepen-01,false), Span(16,17,List(21, 20, 19),Beijing,(city :name (name :op "Beijing")),false), Span(20,21,List(22),Meet,"Meeting",false), Span(37,38,List(23),friendliness,friendliness,false), Span(5,6,List(24),delegation,delegation,false), Span(10,11,List(25),this,this,false), Span(26,27,List(26),athletes,athlete,false), Span(13,14,List(27),participation,partition-01,false), Span(32,33,List(28),expand,expand-01,false)),Map(2 -> name, 5 -> muster-01, 27 -> partition-01, 12 -> various, 8 -> friendship, 15 -> "Souya", 21 -> "Beijing", 18 -> deepen-01, 24 -> delegation, 7 -> country, 1 -> country, 17 -> emphasize-01, 23 -> friendliness, 26 -> athlete, 4 -> "Africa", 11 -> scope, 14 -> name, 20 -> name, 28 -> expand-01, 6 -> use-01, 9 -> make-01, 0 -> international, 22 -> "Meeting", 16 -> opportunity, 19 -> city, 10 -> and, 3 -> "South", 25 -> this, 13 -> person),Map(e -> emphasize-01, n -> name, M -> "Meeting", t -> this, m2 -> make-01, p2 -> partition-01, e2 -> expand-01, s -> scope, v -> various, m -> muster-01, d -> deepen-01, p -> person, a -> and, c3 -> city, n3 -> name, d2 -> delegation, i -> international, a2 -> athlete, c -> country, f2 -> friendliness, u -> use-01, f -> friendship, o -> opportunity, n2 -> name, c2 -> country))),[Ljava.lang.String;@6f67d02f,Annotation([Ljava.lang.String;@97d5332,[Ljava.lang.String;@2ee568ed,[Ljava.lang.String;@55710f2c),Annotation([Ljava.lang.String;@4465b05,[Ljava.lang.String;@67c17c7c,[Ledu.cmu.lti.nlp.amr.Dependency;@62e6d269),Annotation([Ljava.lang.String;@3fb3a976,[Ljava.lang.String;@91b53f6,[Ljava.lang.String;@6555fc35),Annotation([Ljava.lang.String;@31f40f6c,[Ljava.lang.String;@132ee83d,[Ledu.cmu.lti.nlp.amr.Entity;@40f98d4d))
AMR:
(M / "Meeting", location, c3 / city)
(M / "Meeting", mod, c / country)
(a / and, op, c2 / country)
(a / and, op, d / deepen-01)
(a / and, op, e2 / expand-01)
(c / country, name, n / name)
(c2 / country, mod, v / various)
(c3 / city, name, n3 / name)
(d / deepen-01, ARG0, u / use-01)
(d / deepen-01, ARG1, f / friendship)
(e / emphasize-01, ARG0, p / person)
(e2 / expand-01, ARG0, a2 / athlete)
(e2 / expand-01, ARG1, s / scope)
(f2 / friendliness, mod, i / international)
(m / muster-01, ARG1, u / use-01)
(m2 / make-01, ARG0, d2 / delegation)
(m2 / make-01, ARG1, u / use-01)
(n / name, op, "Africa")
(n / name, op, "South")
(n2 / name, op, "Souya")
(n3 / name, op, "Beijing")
(o / opportunity, beneficiary, p2 / partition-01)
(o / opportunity, mod, t / this)
(p / person, name, n2 / name)
(p2 / partition-01, ARG1, M / "Meeting")
(s / scope, mod, f2 / friendliness)
(u / use-01, ARG1, e / emphasize-01)
(u / use-01, ARG2, o / opportunity)

Decoded in 8,097,652 microseconds
Sentence: Souya handed over the delegation flag of the Japanese delegation to the head of the delegation and Director of the Tokyo Handicapped Integrated Sports Center , Banminyan .

Oracle Span 1:  Banminyan => (person :name (name :op "Banminyan"))
Oracle Span 2:  delegation => delegation
Oracle Span 3:  delegation => delegation
Oracle Span 4:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 5:  flag => flag
Oracle Span 6:  handed => hand-02
Oracle Span 7:  head => head-01
Oracle Span 8:  Japanese => (country :name (name :op "Japan"))
Oracle Span 9:  Souya => (person :name (name :op "Souya"))
Oracle Span 10:  Tokyo Handicapped Integrated Sports Center => (sports-facility :name (name :op "Center" :op "Sports" :op "Integrated" :op "Handicapped" :op "Tokyo"))
NER Entity: (person :name (name :op "Souya"))
NER Entity: (organization :name (name :op "Banminyan"))
NER Entity: (country :name (name :op "Tokyo"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 16-17:  and => and
Span 26-27:  Banminyan => (person :name (name :op "Banminyan"))
Span 24-25:  Center => center
Span 4-5:  delegation => delegation
Span 15-16:  delegation => delegation
Span 9-10:  delegation => delegation
Span 17-18:  Director => (have-org-role-91 :ARG2 director)
Span 5-6:  flag => flag
Span 1-2:  handed => hand-02
Span 12-13:  head => (person :ARG0-of head-01)
Span 2-3:  over => over
Span 0-1:  Souya => (person :name (name :op "Souya"))
Span 20-21:  Tokyo => (city :name (name :op "Tokyo"))

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 26-27:  Banminyan => (person :name (name :op "Banminyan"))
Oracle Span 4-5:  delegation => delegation
Oracle Span 9-10:  delegation => delegation
Oracle Span 17-18:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 5-6:  flag => flag
Oracle Span 1-2:  handed => hand-02
Oracle Span 12-13:  head => head-01
Oracle Span 8-9:  Japanese => (country :name (name :op "Japan"))
Oracle Span 0-1:  Souya => (person :name (name :op "Souya"))
Oracle Span 20-25:  Tokyo Handicapped Integrated Sports Center => (sports-facility :name (name :op "Center" :op "Sports" :op "Integrated" :op "Handicapped" :op "Tokyo"))

Dependencies:
1	Souya	_	NNP	NNP	_	2	nsubj	_	_
2	handed	_	VBD	VBD	_	0	root	_	_
3	over	_	RP	RP	_	2	prt	_	_
4	the	_	DT	DT	_	6	det	_	_
5	delegation	_	NN	NN	_	6	nn	_	_
6	flag	_	NN	NN	_	2	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	Japanese	_	JJ	JJ	_	10	amod	_	_
10	delegation	_	NN	NN	_	7	pobj	_	_
11	to	_	TO	TO	_	2	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	head	_	NN	NN	_	11	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	delegation	_	NN	NN	_	14	pobj	_	_
17	and	_	CC	CC	_	13	cc	_	_
18	Director	_	NNP	NNP	_	13	conj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	25	det	_	_
21	Tokyo	_	NNP	NNP	_	25	nn	_	_
22	Handicapped	_	NNP	NNP	_	25	nn	_	_
23	Integrated	_	NNP	NNP	_	25	nn	_	_
24	Sports	_	NNPS	NNPS	_	25	nn	_	_
25	Center	_	NNP	NNP	_	19	pobj	_	_
26	,	_	,	,	_	2	punct	_	_
27	Banminyan	_	NNP	NNP	_	2	dobj	_	_
28	.	_	.	.	_	2	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(d / delegation, source, c2 / country)
(f2 / flag, mod, d2 / delegation)
(f2 / flag, poss, d / delegation)
(h / hand-02, ARG0, p3 / person)
(h / hand-02, ARG1, f2 / flag)
(h / hand-02, ARG2, p / person)
(h2 / head-01, ARG0, p / person)
(h2 / head-01, ARG1, d / delegation)
(h3 / have-org-role-91, ARG0, p / person)
(h3 / have-org-role-91, ARG1, s2 / sports-facility)
(h3 / have-org-role-91, ARG2, d3 / director)
(n / name, op, "Souya")
(n2 / name, op, "Japan")
(n3 / name, op, "Banminyan")
(n4 / name, op, "Center")
(n4 / name, op, "Handicapped")
(n4 / name, op, "Integrated")
(n4 / name, op, "Sports")
(n4 / name, op, "Tokyo")
(p / person, name, n3 / name)
(p3 / person, name, n / name)
(s2 / sports-facility, name, n4 / name)

Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(2, 1, 0),Tokyo,(city :name (name :op "Tokyo")),false), Span(16,17,List(3),and,and,false), Span(1,2,List(4),handed,hand-02,false), Span(2,3,List(5),over,over,false), Span(17,18,List(7, 6),Director,(have-org-role-91 :ARG2 director),false), Span(0,1,List(10, 9, 8),Souya,(person :name (name :op "Souya")),false), Span(24,25,List(11),Center,center,false), Span(12,13,List(13, 12),head,(person :ARG0-of head-01),false), Span(4,5,List(14),delegation,delegation,false), Span(26,27,List(17, 16, 15),Banminyan,(person :name (name :op "Banminyan")),false), Span(5,6,List(18),flag,flag,false), Span(15,16,List(19),delegation,delegation,false), Span(9,10,List(20),delegation,delegation,false)),Map(2 -> "Tokyo", 5 -> over, 12 -> person, 15 -> person, 8 -> person, 18 -> flag, 7 -> director, 17 -> "Banminyan", 1 -> name, 4 -> hand-02, 11 -> center, 14 -> delegation, 20 -> delegation, 6 -> have-org-role-91, 0 -> city, 9 -> name, 16 -> name, 19 -> delegation, 3 -> and, 10 -> "Souya", 13 -> head-01),Map(n -> name, h -> hand-02, h2 -> have-org-role-91, d3 -> delegation, p2 -> person, d -> director, p -> person, n3 -> name, a -> and, d2 -> delegation, c -> city, h3 -> head-01, d4 -> delegation, f -> flag, o -> over, p3 -> person, n2 -> name, c2 -> center))),[Ljava.lang.String;@4287449,Annotation([Ljava.lang.String;@6a5ff6eb,[Ljava.lang.String;@13965c4a,[Ljava.lang.String;@58b05c90),Annotation([Ljava.lang.String;@1ffde1f3,[Ljava.lang.String;@a80b449,[Ledu.cmu.lti.nlp.amr.Dependency;@2b55cd5f),Annotation([Ljava.lang.String;@71db5079,[Ljava.lang.String;@159d5c8,[Ljava.lang.String;@e740b56),Annotation([Ljava.lang.String;@b4e00f2,[Ljava.lang.String;@20bdc17a,[Ledu.cmu.lti.nlp.amr.Entity;@6f85b730))
AMR:
(a / and, op, c2 / center)
(c / city, name, n / name)
(c2 / center, location, c / city)
(d4 / delegation, location, c / city)
(f / flag, mod, d2 / delegation)
(h / hand-02, ARG0, p / person)
(h / hand-02, ARG1, p3 / person)
(h / hand-02, ARG2, p2 / person)
(h / hand-02, ARG6, f / flag)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, c2 / center)
(h2 / have-org-role-91, ARG2, d / director)
(h3 / head-01, ARG0, p2 / person)
(h3 / head-01, ARG1, d3 / delegation)
(n / name, op, "Tokyo")
(n2 / name, op, "Souya")
(n3 / name, op, "Banminyan")
(o / over, op, f / flag)
(p / person, name, n2 / name)
(p3 / person, name, n3 / name)

Decoded in 1,576,479 microseconds
Sentence: From this tight , orderly , warm and serious swearing in ceremony , this reporter felt that , the Japanese Handicapped Sports Team was a team that was well trained , disciplined and possessed fighting spirit .

Oracle Span 1:  and => and
Oracle Span 2:  ceremony => ceremony
Oracle Span 3:  disciplined => discipline-01
Oracle Span 4:  felt => feel-02
Oracle Span 5:  fighting => fight-01
Oracle Span 6:  Japanese Handicapped Sports Team => (name :op "Team" :op "Sports" :op "Handicapped" :op "Japanese")
Oracle Span 7:  orderly => orderly
Oracle Span 8:  possessed => possess-01
Oracle Span 9:  reporter => (person :ARG0-of report-01)
Oracle Span 10:  serious => serious-41
Oracle Span 11:  spirit => spirit
Oracle Span 12:  swearing => swear-06
Oracle Span 13:  team => team
Oracle Span 14:  this => this
Oracle Span 15:  tight => tight
Oracle Span 16:  trained => train-01
Oracle Span 17:  warm => warm
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 32-33:  and => and
Span 7-8:  and => and
Span 11-12:  ceremony => ceremony
Span 15-16:  felt => felt-01
Span 34-35:  fighting => fight-01
Span 4-5:  orderly => city
Span 14-15:  reporter => reporter
Span 8-9:  serious => serious
Span 35-36:  spirit => spirit
Span 22-23:  Team => have-org-role-91
Span 25-26:  team => team
Span 13-14:  this => this
Span 1-2:  this => this
Span 2-3:  tight => tight
Span 29-30:  trained => train-01
Span 6-7:  warm => warm
Span 28-29:  well => well

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 11-12:  ceremony => ceremony
Oracle Span 31-32:  disciplined => discipline-01
Oracle Span 15-16:  felt => feel-02
Oracle Span 34-35:  fighting => fight-01
Oracle Span 19-23:  Japanese Handicapped Sports Team => (name :op "Team" :op "Sports" :op "Handicapped" :op "Japanese")
Oracle Span 4-5:  orderly => orderly
Oracle Span 33-34:  possessed => possess-01
Oracle Span 14-15:  reporter => (person :ARG0-of report-01)
Oracle Span 8-9:  serious => serious-41
Oracle Span 35-36:  spirit => spirit
Oracle Span 9-10:  swearing => swear-06
Oracle Span 25-26:  team => team
Oracle Span 1-2:  this => this
Oracle Span 2-3:  tight => tight
Oracle Span 29-30:  trained => train-01
Oracle Span 6-7:  warm => warm

Dependencies:
1	From	_	IN	IN	_	16	prep	_	_
2	this	_	DT	DT	_	10	det	_	_
3	tight	_	JJ	JJ	_	10	amod	_	_
4	,	_	,	,	_	3	punct	_	_
5	orderly	_	JJ	JJ	_	3	conj	_	_
6	,	_	,	,	_	3	punct	_	_
7	warm	_	JJ	JJ	_	3	conj	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	serious	_	JJ	JJ	_	3	conj	_	_
10	swearing	_	NN	NN	_	1	pobj	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	ceremony	_	NN	NN	_	11	pobj	_	_
13	,	_	,	,	_	16	punct	_	_
14	this	_	DT	DT	_	15	det	_	_
15	reporter	_	NN	NN	_	16	nsubj	_	_
16	felt	_	VBD	VBD	_	0	root	_	_
17	that	_	IN	IN	_	26	mark	_	_
18	,	_	,	,	_	26	punct	_	_
19	the	_	DT	DT	_	23	det	_	_
20	Japanese	_	JJ	JJ	_	23	amod	_	_
21	Handicapped	_	NNP	NNP	_	23	nn	_	_
22	Sports	_	NNP	NNP	_	23	nn	_	_
23	Team	_	NNP	NNP	_	26	nsubj	_	_
24	was	_	VBD	VBD	_	26	cop	_	_
25	a	_	DT	DT	_	26	det	_	_
26	team	_	NN	NN	_	16	ccomp	_	_
27	that	_	WDT	WDT	_	30	nsubjpass	_	_
28	was	_	VBD	VBD	_	30	auxpass	_	_
29	well	_	RB	RB	_	30	advmod	_	_
30	trained	_	VBN	VBN	_	26	rcmod	_	_
31	,	_	,	,	_	30	punct	_	_
32	disciplined	_	VBN	VBN	_	30	conj	_	_
33	and	_	CC	CC	_	30	cc	_	_
34	possessed	_	VBN	VBN	_	30	conj	_	_
35	fighting	_	NN	NN	_	36	nn	_	_
36	spirit	_	NN	NN	_	30	dobj	_	_
37	.	_	.	.	_	16	punct	_	_

Oracle:
(a / and, op, d / discipline-01)
(a / and, op, p2 / possess-01)
(a / and, op, t3 / train-01)
(c3 / ceremony, mod, o2 / orderly)
(c3 / ceremony, mod, t4 / tight)
(c3 / ceremony, mod, w2 / warm)
(c3 / ceremony, purpose, s3 / swear-06)
(d / discipline-01, ARG1, t3 / train-01)
(f / feel-02, ARG0, p / person)
(f / feel-02, ARG1, a / and)
(n / name, op, "Handicapped")
(n / name, op, "Japanese")
(n / name, op, "Sports")
(n / name, op, "Team")
(p / person, mod, t / this)
(p2 / possess-01, ARG1, s / spirit)
(r / report-01, ARG0, p / person)
(s / spirit, mod, f2 / fight-01)
(s2 / serious-41, ARG1, c3 / ceremony)
(t2 / team, name, n / name)
(t3 / train-01, ARG2, t2 / team)

Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),this,this,false), Span(2,3,List(1),tight,tight,false), Span(14,15,List(2),reporter,reporter,false), Span(32,33,List(3),and,and,false), Span(11,12,List(4),ceremony,ceremony,false), Span(34,35,List(5),fighting,fight-01,false), Span(28,29,List(6),well,well,false), Span(22,23,List(7),Team,have-org-role-91,false), Span(25,26,List(8),team,team,false), Span(6,7,List(9),warm,warm,false), Span(35,36,List(10),spirit,spirit,false), Span(29,30,List(11),trained,train-01,false), Span(1,2,List(12),this,this,false), Span(4,5,List(13),orderly,city,false), Span(7,8,List(14),and,and,false), Span(8,9,List(15),serious,serious,false), Span(15,16,List(16),felt,felt-01,false)),Map(2 -> reporter, 5 -> fight-01, 12 -> this, 15 -> serious, 8 -> team, 7 -> have-org-role-91, 1 -> tight, 4 -> ceremony, 11 -> train-01, 14 -> and, 6 -> well, 0 -> this, 9 -> warm, 16 -> felt-01, 3 -> and, 10 -> spirit, 13 -> city),Map(w -> well, h -> have-org-role-91, t4 -> train-01, s2 -> serious, t -> this, s -> spirit, t3 -> team, a -> and, t2 -> tight, w2 -> warm, t5 -> this, a2 -> and, r -> reporter, c -> ceremony, f2 -> felt-01, f -> fight-01, c2 -> city))),[Ljava.lang.String;@7ce13184,Annotation([Ljava.lang.String;@71b7363,[Ljava.lang.String;@13200c26,[Ljava.lang.String;@227394b3),Annotation([Ljava.lang.String;@576bfc68,[Ljava.lang.String;@b370d8d,[Ledu.cmu.lti.nlp.amr.Dependency;@186571f1),Annotation([Ljava.lang.String;@268da842,[Ljava.lang.String;@2e8d9847,[Ljava.lang.String;@1d65b37e),Annotation([Ljava.lang.String;@2ebca3da,[Ljava.lang.String;@6538d1f7,[Ledu.cmu.lti.nlp.amr.Entity;@27b532b7))
AMR:
(a / and, op, t4 / train-01)
(a2 / and, op, a / and)
(a2 / and, op, c / ceremony)
(a2 / and, op, s2 / serious)
(c / ceremony, mod, t5 / this)
(f / fight-01, ARG0, c2 / city)
(f / fight-01, ARG1, s / spirit)
(f2 / felt-01, ARG0, r / reporter)
(f2 / felt-01, ARG1, t3 / team)
(h / have-org-role-91, ARG1, t2 / tight)
(r / reporter, mod, t / this)
(t3 / team, domain, h / have-org-role-91)
(t4 / train-01, ARG0, w2 / warm)
(t4 / train-01, ARG1, s / spirit)
(t4 / train-01, ARG2, t3 / team)
(t4 / train-01, mod, w / well)

Decoded in 1,592,277 microseconds
Sentence: The Japanese delegation will fly to Beijing on the 2nd .

Oracle Span 1:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 2:  delegation => delegation
Oracle Span 3:  fly => fly-01
Oracle Span 4:  Japanese => (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Beijing"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 6-7:  Beijing => (city :name (name :op "Beijing"))
Span 2-3:  delegation => delegation
Span 4-5:  fly => fly-01
Span 1-2:  Japanese => (country :name (name :op "Japan"))
Span 0-10:  The Japanese delegation will fly to Beijing on the 2nd => (ordinal-entity :value 20.0)

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 6-7:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 2-3:  delegation => delegation
Oracle Span 4-5:  fly => fly-01
Oracle Span 1-2:  Japanese => (country :name (name :op "Japan"))

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Japanese	_	JJ	JJ	_	3	amod	_	_
3	delegation	_	NN	NN	_	5	nsubj	_	_
4	will	_	MD	MD	_	5	aux	_	_
5	fly	_	VB	VB	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	Beijing	_	NNP	NNP	_	6	pobj	_	_
8	on	_	IN	IN	_	5	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	2nd	_	NNS	NNS	_	8	pobj	_	_
11	.	_	.	.	_	5	punct	_	_

Oracle:
(c3 / country, name, n / name)
(c4 / city, name, n2 / name)
(d2 / delegation, mod, c3 / country)
(f / fly-01, ARG1, d2 / delegation)
(f / fly-01, destination, c4 / city)
(n / name, op, "Japan")
(n2 / name, op, "Beijing")

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(2, 1, 0),Beijing,(city :name (name :op "Beijing")),false), Span(1,2,List(5, 4, 3),Japanese,(country :name (name :op "Japan")),false), Span(2,3,List(6),delegation,delegation,false), Span(0,10,List(8, 7),The Japanese delegation will fly to Beijing on the 2nd,(ordinal-entity :value 20.0),false), Span(4,5,List(9),fly,fly-01,false)),Map(2 -> "Beijing", 5 -> "Japan", 8 -> 20.0, 7 -> ordinal-entity, 1 -> name, 4 -> name, 6 -> delegation, 9 -> fly-01, 0 -> city, 3 -> country),Map(n -> name, 2 -> 20.0, d -> delegation, c -> city, f -> fly-01, o -> ordinal-entity, n2 -> name, c2 -> country))),[Ljava.lang.String;@413db64f,Annotation([Ljava.lang.String;@7aa49e04,[Ljava.lang.String;@add8f8d,[Ljava.lang.String;@3a4ac28b),Annotation([Ljava.lang.String;@16699443,[Ljava.lang.String;@48e37c34,[Ledu.cmu.lti.nlp.amr.Dependency;@2e242342),Annotation([Ljava.lang.String;@4296f297,[Ljava.lang.String;@1807bd0a,[Ljava.lang.String;@4bd660e2),Annotation([Ljava.lang.String;@446774e9,[Ljava.lang.String;@319034b8,[Ledu.cmu.lti.nlp.amr.Entity;@145a206d))
AMR:
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(d / delegation, mod, c2 / country)
(f / fly-01, ARG0, d / delegation)
(f / fly-01, ARG1, o / ordinal-entity)
(f / fly-01, ARG2, c / city)
(n / name, op, "Beijing")
(n2 / name, op, "Japan")
(o / ordinal-entity, value, 2 / 20.0)

Decoded in 198,550 microseconds
Sentence: After the closing ceremonies of the Sports Meet , they will continue to remain in Beijing for two days , to carry out interaction activities with relevant Chinese parties and visit and tour , and return to Japan on 13th .

Oracle Span 1:  activities => activity
Oracle Span 2:  After => after
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 6:  carry => carry-03
Oracle Span 7:  ceremonies => ceremony
Oracle Span 8:  Chinese => (country :name (name :op "China"))
Oracle Span 9:  closing => close-01
Oracle Span 10:  days => (temporal-quantity :unit day)
Oracle Span 11:  interaction => interact-01
Oracle Span 12:  Japan => (country :name (name :op "Japan"))
Oracle Span 13:  parties => party
Oracle Span 14:  relevant => relevant-41
Oracle Span 15:  remain => remain-01
Oracle Span 16:  return => return-01
Oracle Span 17:  Sports Meet => (game :name (name :op "Meet" :op "Sports"))
Oracle Span 18:  they => they
Oracle Span 19:  tour => tour-01
Oracle Span 20:  two => 2
Oracle Span 21:  visit => visit-01
NER Entity: (country :name (name :op "Beijing"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 24-25:  activities => activity
Span 0-1:  After => after
Span 0-40:  After the closing ceremonies of the Sports Meet , they will continue to remain in Beijing for two days , to carry out interaction activities with relevant Chinese parties and visit and tour , and return to Japan on 13th => (ordinal-entity :value 520.0)
Span 31-32:  and => and
Span 29-30:  and => and
Span 34-35:  and => and
Span 15-16:  Beijing => (city :name (name :op "Beijing"))
Span 21-22:  carry => carry-03
Span 3-4:  ceremonies => ceremony
Span 27-28:  Chinese => (country :name (name :op "China"))
Span 2-3:  closing => cling-01
Span 11-12:  continue => continue-01
Span 18-19:  days => day
Span 23-24:  interaction => interact-01
Span 37-38:  Japan => (country :name (name :op "Japan"))
Span 7-8:  Meet => "Meeting"
Span 28-29:  parties => party
Span 26-27:  relevant => relevant
Span 13-14:  remain => remain-01
Span 35-36:  return => return-01
Span 9-10:  they => country
Span 32-33:  tour => tour-01
Span 30-31:  visit => visit-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 24-25:  activities => activity
Oracle Span 0-1:  After => after
Oracle Span 29-30:  and => and
Oracle Span 31-32:  and => and
Oracle Span 15-16:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 21-22:  carry => carry-03
Oracle Span 3-4:  ceremonies => ceremony
Oracle Span 27-28:  Chinese => (country :name (name :op "China"))
Oracle Span 2-3:  closing => close-01
Oracle Span 18-19:  days => (temporal-quantity :unit day)
Oracle Span 23-24:  interaction => interact-01
Oracle Span 37-38:  Japan => (country :name (name :op "Japan"))
Oracle Span 28-29:  parties => party
Oracle Span 26-27:  relevant => relevant-41
Oracle Span 13-14:  remain => remain-01
Oracle Span 35-36:  return => return-01
Oracle Span 6-8:  Sports Meet => (game :name (name :op "Meet" :op "Sports"))
Oracle Span 9-10:  they => they
Oracle Span 32-33:  tour => tour-01
Oracle Span 17-18:  two => 2
Oracle Span 30-31:  visit => visit-01

Dependencies:
1	After	_	IN	IN	_	12	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	closing	_	VBG	VBG	_	4	amod	_	_
4	ceremonies	_	NNS	NNS	_	1	pobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Sports	_	NNP	NNP	_	8	nn	_	_
8	Meet	_	NNP	NNP	_	5	pobj	_	_
9	,	_	,	,	_	12	punct	_	_
10	they	_	PRP	PRP	_	12	nsubj	_	_
11	will	_	MD	MD	_	12	aux	_	_
12	continue	_	VB	VB	_	0	root	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	remain	_	VB	VB	_	12	xcomp	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	Beijing	_	NNP	NNP	_	15	pobj	_	_
17	for	_	IN	IN	_	14	prep	_	_
18	two	_	CD	CD	_	19	num	_	_
19	days	_	NNS	NNS	_	17	pobj	_	_
20	,	_	,	,	_	14	punct	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	carry	_	VB	VB	_	14	xcomp	_	_
23	out	_	RP	RP	_	22	prt	_	_
24	interaction	_	NN	NN	_	25	nn	_	_
25	activities	_	NNS	NNS	_	22	dobj	_	_
26	with	_	IN	IN	_	22	prep	_	_
27	relevant	_	JJ	JJ	_	29	amod	_	_
28	Chinese	_	JJ	JJ	_	29	amod	_	_
29	parties	_	NNS	NNS	_	26	pobj	_	_
30	and	_	CC	CC	_	22	cc	_	_
31	visit	_	VB	VB	_	22	conj	_	_
32	and	_	CC	CC	_	31	cc	_	_
33	tour	_	VB	VB	_	31	conj	_	_
34	,	_	,	,	_	22	punct	_	_
35	and	_	CC	CC	_	22	cc	_	_
36	return	_	VB	VB	_	22	conj	_	_
37	to	_	TO	TO	_	36	prep	_	_
38	Japan	_	NNP	NNP	_	37	pobj	_	_
39	on	_	IN	IN	_	36	prep	_	_
40	13th	_	NN	NN	_	39	pobj	_	_
41	.	_	.	.	_	12	punct	_	_

Oracle:
(a / and, op, r / remain-01)
(a / and, op, r3 / return-01)
(a2 / activity, mod, i / interact-01)
(a3 / after, op, c11 / ceremony)
(a4 / and, op, c7 / carry-03)
(a4 / and, op, t4 / tour-01)
(a4 / and, op, v / visit-01)
(c / close-01, ARG0, c11 / ceremony)
(c / close-01, ARG1, g / game)
(c6 / city, name, n / name)
(c7 / carry-03, ARG0, t2 / they)
(c7 / carry-03, ARG1, a2 / activity)
(c8 / country, name, n2 / name)
(c9 / country, name, n3 / name)
(g / game, name, n4 / name)
(i / interact-01, ARG0, t2 / they)
(i / interact-01, ARG1, p / party)
(n / name, op, "Beijing")
(n2 / name, op, "China")
(n3 / name, op, "Japan")
(n4 / name, op, "Meet")
(n4 / name, op, "Sports")
(p / party, mod, c8 / country)
(r / remain-01, ARG1, t2 / they)
(r / remain-01, duration, t3 / temporal-quantity)
(r / remain-01, location, c6 / city)
(r / remain-01, time, a3 / after)
(r2 / relevant-41, ARG1, p / party)
(r3 / return-01, ARG1, t2 / they)
(r3 / return-01, ARG4, c9 / country)
(t3 / temporal-quantity, quant, 2 / 2)
(t3 / temporal-quantity, unit, d3 / day)
(t4 / tour-01, ARG0, t2 / they)
(t4 / tour-01, ARG1, c6 / city)
(v / visit-01, ARG0, t2 / they)
(v / visit-01, ARG1, c6 / city)

Input(Some(Graph(null,ArrayBuffer(Span(0,40,List(1, 0),After the closing ceremonies of the Sports Meet , they will continue to remain in Beijing for two days , to carry out interaction activities with relevant Chinese parties and visit and tour , and return to Japan on 13th,(ordinal-entity :value 520.0),false), Span(9,10,List(2),they,country,false), Span(11,12,List(3),continue,continue-01,false), Span(28,29,List(4),parties,party,false), Span(2,3,List(5),closing,cling-01,false), Span(35,36,List(6),return,return-01,false), Span(7,8,List(7),Meet,"Meeting",false), Span(15,16,List(10, 9, 8),Beijing,(city :name (name :op "Beijing")),false), Span(31,32,List(11),and,and,false), Span(24,25,List(12),activities,activity,false), Span(37,38,List(15, 14, 13),Japan,(country :name (name :op "Japan")),false), Span(32,33,List(16),tour,tour-01,false), Span(0,1,List(17),After,after,false), Span(30,31,List(18),visit,visit-01,false), Span(27,28,List(21, 20, 19),Chinese,(country :name (name :op "China")),false), Span(21,22,List(22),carry,carry-03,false), Span(26,27,List(23),relevant,relevant,false), Span(3,4,List(24),ceremonies,ceremony,false), Span(29,30,List(25),and,and,false), Span(34,35,List(26),and,and,false), Span(18,19,List(27),days,day,false), Span(23,24,List(28),interaction,interact-01,false), Span(13,14,List(29),remain,remain-01,false)),Map(2 -> country, 5 -> cling-01, 27 -> day, 12 -> activity, 8 -> city, 15 -> "Japan", 21 -> "China", 18 -> visit-01, 24 -> ceremony, 7 -> "Meeting", 1 -> 520.0, 17 -> after, 23 -> relevant, 26 -> and, 4 -> party, 11 -> and, 14 -> name, 29 -> remain-01, 20 -> name, 28 -> interact-01, 6 -> return-01, 9 -> name, 0 -> ordinal-entity, 22 -> carry-03, 16 -> tour-01, 19 -> country, 10 -> "Beijing", 3 -> continue-01, 25 -> and, 13 -> country),Map(n -> name, c8 -> ceremony, r3 -> remain-01, M -> "Meeting", 5 -> 520.0, t -> tour-01, c7 -> carry-03, c4 -> city, a3 -> after, v -> visit-01, d -> day, r2 -> relevant, p -> party, a -> and, c3 -> cling-01, n3 -> name, a5 -> and, c6 -> country, a2 -> activity, r -> return-01, i -> interact-01, c -> country, o -> ordinal-entity, n2 -> name, c2 -> continue-01, a4 -> and, c5 -> country))),[Ljava.lang.String;@667f6162,Annotation([Ljava.lang.String;@73c2f08e,[Ljava.lang.String;@4f12bd97,[Ljava.lang.String;@7ccfbbc1),Annotation([Ljava.lang.String;@61a6a14b,[Ljava.lang.String;@5847b71,[Ledu.cmu.lti.nlp.amr.Dependency;@5f209053),Annotation([Ljava.lang.String;@5eb029c5,[Ljava.lang.String;@ac877a1,[Ljava.lang.String;@2c31ca7a),Annotation([Ljava.lang.String;@774865a7,[Ljava.lang.String;@2869848a,[Ledu.cmu.lti.nlp.amr.Entity;@61d58b59))
AMR:
(a / and, op, p / party)
(a / and, op, t / tour-01)
(a / and, op, v / visit-01)
(a2 / activity, mod, i / interact-01)
(a3 / after, op, c8 / ceremony)
(a4 / and, op, c7 / carry-03)
(a4 / and, op, r / return-01)
(a4 / and, op, v / visit-01)
(a5 / and, op, r / return-01)
(c2 / continue-01, ARG0, c / country)
(c2 / continue-01, ARG1, r3 / remain-01)
(c2 / continue-01, time, a3 / after)
(c3 / cling-01, ARG1, c8 / ceremony)
(c4 / city, name, n / name)
(c5 / country, name, n2 / name)
(c6 / country, name, n3 / name)
(c7 / carry-03, ARG1, a2 / activity)
(i / interact-01, ARG1, M / "Meeting")
(n / name, op, "Beijing")
(n2 / name, op, "Japan")
(n3 / name, op, "China")
(o / ordinal-entity, value, 5 / 520.0)
(p / party, mod, c6 / country)
(r / return-01, ARG1, o / ordinal-entity)
(r / return-01, ARG4, c5 / country)
(r3 / remain-01, ARG1, a5 / and)
(r3 / remain-01, ARG3, c4 / city)
(r3 / remain-01, time, d / day)
(v / visit-01, ARG1, r2 / relevant)

Decoded in 7,881,045 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@a783492,Annotation([Ljava.lang.String;@2c92c058,[Ljava.lang.String;@401efb05,[Ljava.lang.String;@93c07aa),Annotation([Ljava.lang.String;@422b6ebb,[Ljava.lang.String;@7881f6a6,[Ledu.cmu.lti.nlp.amr.Dependency;@4ff0ec60),Annotation([Ljava.lang.String;@2698a363,[Ljava.lang.String;@3fdf5fbd,[Ljava.lang.String;@489cba26),Annotation([Ljava.lang.String;@47dcb9,[Ljava.lang.String;@63a7f469,[Ledu.cmu.lti.nlp.amr.Entity;@26c07d17))
AMR:


Decoded in 31,439 microseconds
Sentence: In the script " Mongolian handicapped athletes prepare for the Far South Sports Meet " broadcast today , the " Sports Association Chairman Lahagewasu " at the end of paragraph three should be changed to " Sports Association Chairman Lahagewasulen " .

Oracle Span 1:  athletes => athlete
Oracle Span 2:  broadcast => broadcast-01
Oracle Span 3:  Chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 4:  changed => change-01
Oracle Span 5:  end => end
Oracle Span 6:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Oracle Span 7:  handicapped => handicap-01
Oracle Span 8:  Lahagewasu => (person :name (name :op "Lahagewasu"))
Oracle Span 9:  Lahagewasulen => (person :name (name :op "Lahagewasulen"))
Oracle Span 10:  Mongolian => (country :name (name :op "Mongolia"))
Oracle Span 11:  paragraph => paragraph
Oracle Span 12:  prepare => prepare-02
Oracle Span 13:  script => script
Oracle Span 14:  should => recommend-01
Oracle Span 15:  Sports Association => (organization :name (name :op "Association" :op "Sports"))
Oracle Span 16:  three => 3
Oracle Span 17:  today => today
NER Entity: (thing :name (name :op "Lahagewasulen"))
NER Entity: (organization :name (name :op "Sports" :op "Association"))
NER Entity: (thing :name (name :op "Lahagewasu"))
NER Entity: (organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet"))
NER Entity: (thing :name (name :op "Mongolian"))
Spans:
Span 6-7:  athletes => athlete
Span 22-23:  Chairman => (chairman :ARG2-of have-org-role-91)
Span 38-39:  Chairman => (chairman :ARG2-of have-org-role-91)
Span 33-34:  changed => change-01
Span 27-28:  end => end-01
Span 0-1:  In => 1
Span 0-17:  In the script " Mongolian handicapped athletes prepare for the Far South Sports Meet " broadcast today => (date-entity :time today)
Span 13-14:  Meet => "Meeting"
Span 7-8:  prepare => prepare-01
Span 2-3:  script => (thing :ARG1-of script-01)
Span 31-32:  should => shoulder-01
Span 11-12:  South => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 6-7:  athletes => athlete
Oracle Span 15-16:  broadcast => broadcast-01
Oracle Span 22-23:  Chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 33-34:  changed => change-01
Oracle Span 27-28:  end => end
Oracle Span 10-14:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Oracle Span 5-6:  handicapped => handicap-01
Oracle Span 23-24:  Lahagewasu => (person :name (name :op "Lahagewasu"))
Oracle Span 39-40:  Lahagewasulen => (person :name (name :op "Lahagewasulen"))
Oracle Span 4-5:  Mongolian => (country :name (name :op "Mongolia"))
Oracle Span 29-30:  paragraph => paragraph
Oracle Span 7-8:  prepare => prepare-02
Oracle Span 2-3:  script => script
Oracle Span 31-32:  should => recommend-01
Oracle Span 20-22:  Sports Association => (organization :name (name :op "Association" :op "Sports"))
Oracle Span 30-31:  three => 3
Oracle Span 16-17:  today => today

Dependencies:
1	In	_	IN	IN	_	34	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	script	_	NN	NN	_	1	pobj	_	_
4	"	_	''	''	_	3	punct	_	_
5	Mongolian	_	JJ	JJ	_	7	amod	_	_
6	handicapped	_	VBN	VBN	_	7	amod	_	_
7	athletes	_	NNS	NNS	_	8	nsubj	_	_
8	prepare	_	VBP	VBP	_	3	rcmod	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	16	det	_	_
11	Far	_	NNP	NNP	_	16	nn	_	_
12	South	_	NNP	NNP	_	16	nn	_	_
13	Sports	_	NNPS	NNPS	_	16	nn	_	_
14	Meet	_	JJ	JJ	_	16	amod	_	_
15	"	_	''	''	_	16	punct	_	_
16	broadcast	_	NN	NN	_	9	pobj	_	_
17	today	_	NN	NN	_	34	tmod	_	_
18	,	_	,	,	_	34	punct	_	_
19	the	_	NNP	NNP	_	24	nn	_	_
20	"	_	''	''	_	24	punct	_	_
21	Sports	_	NNP	NNP	_	24	nn	_	_
22	Association	_	NNP	NNP	_	24	nn	_	_
23	Chairman	_	NNP	NNP	_	24	nn	_	_
24	Lahagewasu	_	NNP	NNP	_	34	nsubjpass	_	_
25	"	_	''	''	_	24	punct	_	_
26	at	_	IN	IN	_	34	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	end	_	NN	NN	_	26	pobj	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	paragraph	_	NN	NN	_	29	pobj	_	_
31	three	_	CD	CD	_	30	num	_	_
32	should	_	MD	MD	_	34	aux	_	_
33	be	_	VB	VB	_	34	auxpass	_	_
34	changed	_	VBN	VBN	_	0	root	_	_
35	to	_	IN	IN	_	34	prep	_	_
36	"	_	''	''	_	35	punct	_	_
37	Sports	_	NNP	NNP	_	40	nn	_	_
38	Association	_	NNP	NNP	_	40	nn	_	_
39	Chairman	_	NNP	NNP	_	40	nn	_	_
40	Lahagewasulen	_	NNP	NNP	_	35	pobj	_	_
41	"	_	''	''	_	40	punct	_	_
42	.	_	.	.	_	34	punct	_	_

Oracle:
(a / athlete, mod, c3 / country)
(b / broadcast-01, ARG1, s / script)
(b / broadcast-01, time, t / today)
(c2 / change-01, ARG2, p / person)
(c2 / change-01, ARG3, p3 / person)
(c2 / change-01, location, s / script)
(c3 / country, name, n6 / name)
(e / end, op, p4 / paragraph)
(g / game, name, n7 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, c / chairman)
(h3 / handicap-01, ARG1, a / athlete)
(n2 / name, op, "Lahagewasulen")
(n4 / name, op, "Association")
(n4 / name, op, "Sports")
(n5 / name, op, "Lahagewasu")
(n6 / name, op, "Mongolia")
(n7 / name, op, "Far")
(n7 / name, op, "Meet")
(n7 / name, op, "South")
(n7 / name, op, "Sports")
(o / organization, name, n4 / name)
(p / person, name, n2 / name)
(p3 / person, location, e / end)
(p3 / person, name, n5 / name)
(p4 / paragraph, mod, 3 / 3)
(p5 / prepare-02, ARG0, a / athlete)
(p5 / prepare-02, ARG1, a / athlete)
(p5 / prepare-02, ARG2, g / game)
(r / recommend-01, ARG1, c2 / change-01)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),In,1,false), Span(2,3,List(2, 1),script,(thing :ARG1-of script-01),false), Span(6,7,List(3),athletes,athlete,false), Span(13,14,List(4),Meet,"Meeting",false), Span(22,23,List(6, 5),Chairman,(chairman :ARG2-of have-org-role-91),false), Span(38,39,List(8, 7),Chairman,(chairman :ARG2-of have-org-role-91),false), Span(31,32,List(9),should,shoulder-01,false), Span(27,28,List(10),end,end-01,false), Span(7,8,List(11),prepare,prepare-01,false), Span(11,12,List(15, 14, 13, 12),South,(country :name (name :op "South" :op "Africa")),false), Span(0,17,List(17, 16),In the script " Mongolian handicapped athletes prepare for the Far South Sports Meet " broadcast today,(date-entity :time today),false), Span(33,34,List(18),changed,change-01,false)),Map(2 -> script-01, 5 -> chairman, 12 -> country, 15 -> "Africa", 8 -> have-org-role-91, 18 -> change-01, 7 -> chairman, 17 -> today, 1 -> thing, 4 -> "Meeting", 11 -> prepare-01, 14 -> "South", 6 -> have-org-role-91, 0 -> 1, 9 -> shoulder-01, 16 -> date-entity, 3 -> athlete, 10 -> end-01, 13 -> name),Map(e -> end-01, n -> name, h -> have-org-role-91, M -> "Meeting", h2 -> have-org-role-91, s2 -> shoulder-01, t -> thing, c4 -> change-01, s -> script-01, d -> date-entity, 1 -> 1, p -> prepare-01, a -> athlete, c3 -> country, t2 -> today, c -> chairman, c2 -> chairman))),[Ljava.lang.String;@111ce64e,Annotation([Ljava.lang.String;@18f086b5,[Ljava.lang.String;@5b84f89,[Ljava.lang.String;@72d89e6),Annotation([Ljava.lang.String;@71f531db,[Ljava.lang.String;@6d2cc47e,[Ledu.cmu.lti.nlp.amr.Dependency;@2aaf1a55),Annotation([Ljava.lang.String;@41a6d45f,[Ljava.lang.String;@19855e59,[Ljava.lang.String;@12017623),Annotation([Ljava.lang.String;@40aebb84,[Ljava.lang.String;@375d8be2,[Ledu.cmu.lti.nlp.amr.Entity;@4996cc6))
AMR:
(1 / 1, op, t / thing)
(c3 / country, name, n / name)
(c4 / change-01, ARG0, M / "Meeting")
(c4 / change-01, ARG1, c3 / country)
(c4 / change-01, time, 1 / 1)
(c4 / change-01, time, d / date-entity)
(d / date-entity, time, t2 / today)
(e / end-01, time, d / date-entity)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, c / chairman)
(h2 / have-org-role-91, ARG1, c3 / country)
(h2 / have-org-role-91, ARG2, c2 / chairman)
(n / name, op, "Africa")
(n / name, op, "South")
(p / prepare-01, ARG0, t / thing)
(p / prepare-01, ARG1, a / athlete)
(s / script-01, ARG1, t / thing)
(s2 / shoulder-01, ARG1, c4 / change-01)

Decoded in 6,892,684 microseconds
Sentence: Xinhua News Agency , August 31st .

Oracle Span 1:  August => 8
Oracle Span 2:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
Spans:
Span 0-3:  Xinhua News Agency => (publication :name (name :op "News" :op "Agency" :op "Xinhua"))
Span 0-5:  Xinhua News Agency , August => (date-entity :month 8 :day 31)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  August => 8
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	August	_	NNP	NNP	_	6	nn	_	_
6	31st	_	NNP	NNP	_	3	appos	_	_
7	.	_	.	.	_	3	punct	_	_

Oracle:
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(p / publication, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(0,5,List(2, 1, 0),Xinhua News Agency , August,(date-entity :month 8 :day 31),false), Span(0,3,List(7, 6, 5, 4, 3),Xinhua News Agency,(publication :name (name :op "News" :op "Agency" :op "Xinhua")),false)),Map(2 -> 31, 5 -> "News", 7 -> "Xinhua", 1 -> 8, 4 -> name, 6 -> "Agency", 0 -> date-entity, 3 -> publication),Map(n -> name, 8 -> 8, d -> date-entity, p -> publication, 3 -> 31))),[Ljava.lang.String;@19c190af,Annotation([Ljava.lang.String;@6107bfc1,[Ljava.lang.String;@5269c797,[Ljava.lang.String;@583ff878),Annotation([Ljava.lang.String;@4dee5f38,[Ljava.lang.String;@11cb08f3,[Ledu.cmu.lti.nlp.amr.Dependency;@d022022),Annotation([Ljava.lang.String;@2a59f5c2,[Ljava.lang.String;@15f1782e,[Ljava.lang.String;@5c3476f3),Annotation([Ljava.lang.String;@40ab5e67,[Ljava.lang.String;@25b94455,[Ledu.cmu.lti.nlp.amr.Entity;@3b9768c4))
AMR:
(d / date-entity, calendar, p / publication)
(d / date-entity, day, 3 / 31)
(d / date-entity, month, 8 / 8)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(p / publication, name, n / name)

Decoded in 83,297 microseconds
Sentence: Xinhua News Agency , Seoul , August 31st , by reporter Shuifu Tang

Oracle Span 1:  August => 8
Oracle Span 2:  reporter => report-01
Oracle Span 3:  Seoul => (city :name (name :op "Seoul"))
Oracle Span 4:  Shuifu Tang => (person :name (name :op "Tang" :op "Shuifu"))
Oracle Span 5:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Shuifu" :op "Tang"))
NER Entity: (country :name (name :op "Seoul"))
Spans:
Span 10-11:  reporter => (person :ARG0-of report-01)
Span 4-5:  Seoul => (city :name (name :op "Seoul"))
Span 0-3:  Xinhua News Agency => (publication :name (name :op "News" :op "Agency" :op "Xinhua"))
Span 0-7:  Xinhua News Agency , Seoul , August => (date-entity :month 8 :day 31)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  August => 8
Oracle Span 10-11:  reporter => report-01
Oracle Span 4-5:  Seoul => (city :name (name :op "Seoul"))
Oracle Span 11-13:  Shuifu Tang => (person :name (name :op "Tang" :op "Shuifu"))
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Seoul	_	NNP	NNP	_	8	nn	_	_
6	,	_	,	,	_	8	punct	_	_
7	August	_	NNP	NNP	_	8	appos	_	_
8	31st	_	NNPS	NNPS	_	3	appos	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporter	_	NN	NN	_	13	nn	_	_
12	Shuifu	_	NNP	NNP	_	13	nn	_	_
13	Tang	_	NNP	NNP	_	10	pobj	_	_

Oracle:
(c3 / city, name, n3 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Shuifu")
(n2 / name, op, "Tang")
(n3 / name, op, "Seoul")
(p / publication, name, n / name)
(p2 / person, name, n2 / name)
(r / report-01, ARG0, p2 / person)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(1, 0),reporter,(person :ARG0-of report-01),false), Span(0,7,List(4, 3, 2),Xinhua News Agency , Seoul , August,(date-entity :month 8 :day 31),false), Span(4,5,List(7, 6, 5),Seoul,(city :name (name :op "Seoul")),false), Span(0,3,List(12, 11, 10, 9, 8),Xinhua News Agency,(publication :name (name :op "News" :op "Agency" :op "Xinhua")),false)),Map(2 -> date-entity, 5 -> city, 12 -> "Xinhua", 8 -> publication, 7 -> "Seoul", 1 -> report-01, 4 -> 31, 11 -> "Agency", 6 -> name, 0 -> person, 9 -> name, 3 -> 8, 10 -> "News"),Map(n -> name, 8 -> 8, p2 -> publication, d -> date-entity, p -> person, r -> report-01, c -> city, n2 -> name, 3 -> 31))),[Ljava.lang.String;@2cf82a7f,Annotation([Ljava.lang.String;@4d2fa9ad,[Ljava.lang.String;@63b4a049,[Ljava.lang.String;@50a798a6),Annotation([Ljava.lang.String;@3d61fb1f,[Ljava.lang.String;@db34fdf,[Ledu.cmu.lti.nlp.amr.Dependency;@4b4310c8),Annotation([Ljava.lang.String;@27cdd3ae,[Ljava.lang.String;@15c67d4b,[Ljava.lang.String;@29c059b),Annotation([Ljava.lang.String;@510a8050,[Ljava.lang.String;@1893697c,[Ledu.cmu.lti.nlp.amr.Entity;@3e996300))
AMR:
(c / city, name, n / name)
(d / date-entity, day, 3 / 31)
(d / date-entity, month, 8 / 8)
(d / date-entity, poss, p / person)
(n / name, op, "Seoul")
(n2 / name, op, "Agency")
(n2 / name, op, "News")
(n2 / name, op, "Xinhua")
(p2 / publication, name, n2 / name)
(p2 / publication, poss, p / person)
(r / report-01, ARG0, p / person)
(r / report-01, ARG1, c / city)

Decoded in 197,909 microseconds
Sentence: The first " Le Tian Cup " China and Korea Go competition started today at Fushan , the second largest city of Korea .

Oracle Span 1:  China => (country :name (name :op "China"))
Oracle Span 2:  city => city
Oracle Span 3:  competition => compete-01
Oracle Span 4:  Fushan => (name :op "Fushan")
Oracle Span 5:  Go => (game :name (name :op "Go"))
Oracle Span 6:  Korea => (country :name (name :op "Korea"))
Oracle Span 7:  largest => (large :degree most)
Oracle Span 8:  Le Tian Cup => (name :op "Cup" :op "Tian" :op "Le")
Oracle Span 9:  started => start-01
Oracle Span 10:  today => today
NER Entity: (person :name (name :op "Le"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Fushan"))
NER Entity: (country :name (name :op "Korea"))
Spans:
Span 8-9:  and => and
Span 7-8:  China => (country :name (name :op "China"))
Span 11-12:  competition => complement-01
Span 5-6:  Cup => "Cup"
Span 10-11:  Go => go-01
Span 22-23:  Korea => (country :name (name :op "Korea"))
Span 9-10:  Korea => (country :name (name :op "Korea"))
Span 12-13:  started => start-01
Span 0-2:  The first => (ordinal-entity :value 1)
Span 0-14:  The first " Le Tian Cup " China and Korea Go competition started today => (date-entity :time today)
Span 0-19:  The first " Le Tian Cup " China and Korea Go competition started today at Fushan , the second => (ordinal-entity :value 1)

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Oracle Span 7-8:  China => (country :name (name :op "China"))
Oracle Span 20-21:  city => city
Oracle Span 11-12:  competition => compete-01
Oracle Span 15-16:  Fushan => (name :op "Fushan")
Oracle Span 10-11:  Go => (game :name (name :op "Go"))
Oracle Span 9-10:  Korea => (country :name (name :op "Korea"))
Oracle Span 19-20:  largest => (large :degree most)
Oracle Span 3-6:  Le Tian Cup => (name :op "Cup" :op "Tian" :op "Le")
Oracle Span 12-13:  started => start-01
Oracle Span 13-14:  today => today

Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	first	_	JJ	JJ	_	4	amod	_	_
3	"	_	''	''	_	4	punct	_	_
4	Le	_	NNP	NNP	_	13	nsubj	_	_
5	Tian	_	NNP	NNP	_	8	nn	_	_
6	Cup	_	NNP	NNP	_	8	nn	_	_
7	"	_	''	''	_	8	punct	_	_
8	China	_	NNP	NNP	_	4	dep	_	_
9	and	_	CC	CC	_	4	cc	_	_
10	Korea	_	NNP	NNP	_	11	nn	_	_
11	Go	_	NNP	NNP	_	4	conj	_	_
12	competition	_	NN	NN	_	11	dep	_	_
13	started	_	VBD	VBD	_	0	root	_	_
14	today	_	NN	NN	_	13	tmod	_	_
15	at	_	IN	IN	_	13	prep	_	_
16	Fushan	_	NNP	NNP	_	15	pobj	_	_
17	,	_	,	,	_	13	punct	_	_
18	the	_	DT	DT	_	21	det	_	_
19	second	_	JJ	JJ	_	21	amod	_	_
20	largest	_	JJS	JJS	_	19	dep	_	_
21	city	_	NN	NN	_	13	dobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	Korea	_	NNP	NNP	_	22	pobj	_	_
24	.	_	.	.	_	13	punct	_	_

Oracle:
(c3 / city, mod, l2 / large)
(c3 / city, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / compete-01, ARG0, c5 / country)
(c6 / compete-01, ARG1, c4 / country)
(c6 / compete-01, mod, g2 / game)
(c6 / compete-01, name, n6 / name)
(g2 / game, name, n2 / name)
(l2 / large, compared-to, c4 / country)
(l2 / large, degree, m / most)
(n2 / name, op, "Go")
(n3 / name, op, "Fushan")
(n4 / name, op, "Korea")
(n5 / name, op, "China")
(n6 / name, op, "Cup")
(n6 / name, op, "Le")
(n6 / name, op, "Tian")
(s / start-01, ARG1, c6 / compete-01)
(s / start-01, location, c3 / city)
(s / start-01, time, t / today)

Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(2, 1, 0),Korea,(country :name (name :op "Korea")),false), Span(0,14,List(4, 3),The first " Le Tian Cup " China and Korea Go competition started today,(date-entity :time today),false), Span(8,9,List(5),and,and,false), Span(9,10,List(8, 7, 6),Korea,(country :name (name :op "Korea")),false), Span(11,12,List(9),competition,complement-01,false), Span(10,11,List(10),Go,go-01,false), Span(12,13,List(11),started,start-01,false), Span(0,2,List(13, 12),The first,(ordinal-entity :value 1),false), Span(5,6,List(14),Cup,"Cup",false), Span(7,8,List(17, 16, 15),China,(country :name (name :op "China")),false), Span(0,19,List(19, 18),The first " Le Tian Cup " China and Korea Go competition started today at Fushan , the second,(ordinal-entity :value 1),false)),Map(2 -> "Korea", 5 -> and, 12 -> ordinal-entity, 15 -> country, 8 -> "Korea", 18 -> ordinal-entity, 7 -> name, 17 -> "China", 1 -> name, 4 -> today, 11 -> start-01, 14 -> "Cup", 6 -> country, 0 -> country, 9 -> complement-01, 16 -> name, 19 -> 1, 3 -> date-entity, 10 -> go-01, 13 -> 1),Map(n -> name, 12 -> 1, t -> today, c4 -> country, s -> start-01, d -> date-entity, C -> "Cup", 1 -> 1, g -> go-01, n3 -> name, a -> and, c3 -> complement-01, o2 -> ordinal-entity, c -> country, o -> ordinal-entity, c2 -> country, n2 -> name))),[Ljava.lang.String;@75ff2521,Annotation([Ljava.lang.String;@37ae3878,[Ljava.lang.String;@4bec2189,[Ljava.lang.String;@470b22a),Annotation([Ljava.lang.String;@8aa49a8,[Ljava.lang.String;@4e01dd3d,[Ledu.cmu.lti.nlp.amr.Dependency;@64cb4d1d),Annotation([Ljava.lang.String;@65ab524c,[Ljava.lang.String;@3f16b058,[Ljava.lang.String;@7f3e6ab2),Annotation([Ljava.lang.String;@412373ed,[Ljava.lang.String;@7e2570b7,[Ledu.cmu.lti.nlp.amr.Entity;@743b9b5b))
AMR:
(a / and, op, c4 / country)
(a / and, op, g / go-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / complement-01, ARG1, g / go-01)
(c4 / country, mod, C / "Cup")
(c4 / country, name, n3 / name)
(d / date-entity, time, t / today)
(g / go-01, ARG0, o2 / ordinal-entity)
(g / go-01, ARG1, c2 / country)
(g / go-01, ARG6, o / ordinal-entity)
(n / name, op, "Korea")
(n2 / name, op, "Korea")
(n3 / name, op, "China")
(o / ordinal-entity, value, 1 / 1)
(o2 / ordinal-entity, value, 12 / 1)
(s / start-01, ARG0, a / and)
(s / start-01, ARG1, d / date-entity)
(s / start-01, location, c / country)

Decoded in 5,567,682 microseconds
Sentence: In the first round of competition , the Chinese team defeated the relatively stronger Korean team with a score of 4 : 3 .

Oracle Span 1:  3 => 3
Oracle Span 2:  4 => 4
Oracle Span 3:  Chinese => (country :name (name :op "China"))
Oracle Span 4:  competition => compete-01
Oracle Span 5:  defeated => defeat-01
Oracle Span 6:  Korean => (country :name (name :op "Korea"))
Oracle Span 7:  relatively => relative
Oracle Span 8:  round => round
Oracle Span 9:  score => score-entity
Oracle Span 10:  stronger => strong
Oracle Span 11:  team => team
Oracle Span 12:  team => team
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 5-6:  competition => complement-01
Span 10-11:  defeated => defeat-01
Span 0-1:  In => 1
Span 0-3:  In the first => (ordinal-entity :value 1)
Span 12-13:  relatively => relative
Span 3-4:  round => round
Span 13-14:  stronger => (strong :degree more)
Span 15-16:  team => team
Span 9-10:  team => team

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 22-23:  3 => 3
Oracle Span 20-21:  4 => 4
Oracle Span 8-9:  Chinese => (country :name (name :op "China"))
Oracle Span 5-6:  competition => compete-01
Oracle Span 10-11:  defeated => defeat-01
Oracle Span 14-15:  Korean => (country :name (name :op "Korea"))
Oracle Span 12-13:  relatively => relative
Oracle Span 3-4:  round => round
Oracle Span 18-19:  score => score-entity
Oracle Span 13-14:  stronger => strong
Oracle Span 9-10:  team => team
Oracle Span 15-16:  team => team

Dependencies:
1	In	_	IN	IN	_	11	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	first	_	JJ	JJ	_	4	amod	_	_
4	round	_	NN	NN	_	1	pobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	competition	_	NN	NN	_	5	pobj	_	_
7	,	_	,	,	_	11	punct	_	_
8	the	_	DT	DT	_	10	det	_	_
9	Chinese	_	JJ	JJ	_	10	amod	_	_
10	team	_	NN	NN	_	11	nsubj	_	_
11	defeated	_	VBD	VBD	_	0	root	_	_
12	the	_	DT	DT	_	16	det	_	_
13	relatively	_	RB	RB	_	14	advmod	_	_
14	stronger	_	JJR	JJR	_	16	amod	_	_
15	Korean	_	JJ	JJ	_	16	amod	_	_
16	team	_	NN	NN	_	11	dobj	_	_
17	with	_	IN	IN	_	11	prep	_	_
18	a	_	DT	DT	_	19	det	_	_
19	score	_	NN	NN	_	17	pobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	4	_	CD	CD	_	20	pobj	_	_
22	:	_	:	:	_	19	punct	_	_
23	3	_	CD	CD	_	19	dep	_	_
24	.	_	.	.	_	11	punct	_	_

Oracle:
(c / compete-01, part, r / round)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(d / defeat-01, ARG0, t / team)
(d / defeat-01, ARG1, t2 / team)
(d / defeat-01, quant, s2 / score-entity)
(d / defeat-01, time, r / round)
(n / name, op, "China")
(n2 / name, op, "Korea")
(s / strong, compared-to, t / team)
(s / strong, degree, r2 / relative)
(s2 / score-entity, op, 3 / 3)
(s2 / score-entity, op, 4 / 4)
(t / team, mod, c4 / country)
(t2 / team, mod, c5 / country)
(t2 / team, mod, s / strong)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),In,1,false), Span(15,16,List(1),team,team,false), Span(10,11,List(2),defeated,defeat-01,false), Span(12,13,List(3),relatively,relative,false), Span(13,14,List(5, 4),stronger,(strong :degree more),false), Span(5,6,List(6),competition,complement-01,false), Span(3,4,List(7),round,round,false), Span(0,3,List(9, 8),In the first,(ordinal-entity :value 1),false), Span(9,10,List(10),team,team,false)),Map(2 -> defeat-01, 5 -> more, 8 -> ordinal-entity, 7 -> round, 1 -> team, 4 -> strong, 6 -> complement-01, 9 -> 1, 0 -> 1, 10 -> team, 3 -> relative),Map(12 -> 1, t -> team, s -> strong, m -> more, d -> defeat-01, r2 -> round, 1 -> 1, t2 -> team, r -> relative, c -> complement-01, o -> ordinal-entity))),[Ljava.lang.String;@3bfd7e7d,Annotation([Ljava.lang.String;@3b0c8ba7,[Ljava.lang.String;@7704300b,[Ljava.lang.String;@450ddc60),Annotation([Ljava.lang.String;@15534c2a,[Ljava.lang.String;@4a5dac94,[Ledu.cmu.lti.nlp.amr.Dependency;@1c8f49bc),Annotation([Ljava.lang.String;@374a7891,[Ljava.lang.String;@38f7504e,[Ljava.lang.String;@1f6972c8),Annotation([Ljava.lang.String;@79cd1a30,[Ljava.lang.String;@1d276b68,[Ledu.cmu.lti.nlp.amr.Entity;@1f503da2))
AMR:
(1 / 1, op, r2 / round)
(c / complement-01, ARG1, r2 / round)
(d / defeat-01, ARG0, t2 / team)
(d / defeat-01, ARG1, t / team)
(d / defeat-01, time, o / ordinal-entity)
(m / more, mod, r / relative)
(o / ordinal-entity, op, r2 / round)
(o / ordinal-entity, value, 12 / 1)
(s / strong, degree, m / more)
(t / team, mod, s / strong)

Decoded in 456,243 microseconds
Sentence: In the competition today , both sides each have 7 Go players participating .

Oracle Span 1:  7 => 7
Oracle Span 2:  both => both
Oracle Span 3:  competition => compete-01
Oracle Span 4:  each => each
Oracle Span 5:  Go => (game :name (name :op "Go"))
Oracle Span 6:  have => have-03
Oracle Span 7:  players => (person :ARG0-of play-01)
Oracle Span 8:  sides => side
Oracle Span 9:  today => today
Spans:
Span 5-6:  both => both
Span 2-3:  competition => complement-01
Span 7-8:  each => each
Span 10-11:  Go => go-01
Span 8-9:  have => have-org-role-91
Span 0-1:  In => 1
Span 0-4:  In the competition today => (date-entity :time today)
Span 12-13:  participating => participate-01
Span 11-12:  players => player
Span 6-7:  sides => side

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Oracle Span 9-10:  7 => 7
Oracle Span 5-6:  both => both
Oracle Span 2-3:  competition => compete-01
Oracle Span 7-8:  each => each
Oracle Span 10-11:  Go => (game :name (name :op "Go"))
Oracle Span 8-9:  have => have-03
Oracle Span 11-12:  players => (person :ARG0-of play-01)
Oracle Span 6-7:  sides => side
Oracle Span 3-4:  today => today

Dependencies:
1	In	_	IN	IN	_	9	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	competition	_	NN	NN	_	1	pobj	_	_
4	today	_	NN	NN	_	9	tmod	_	_
5	,	_	,	,	_	9	punct	_	_
6	both	_	DT	DT	_	7	det	_	_
7	sides	_	NNS	NNS	_	9	nsubj	_	_
8	each	_	DT	DT	_	9	dep	_	_
9	have	_	VBP	VBP	_	0	root	_	_
10	7	_	CD	CD	_	12	num	_	_
11	Go	_	NNP	NNP	_	12	nn	_	_
12	players	_	NNS	NNS	_	9	dobj	_	_
13	participating	_	VBG	VBG	_	12	vmod	_	_
14	.	_	.	.	_	9	punct	_	_

Oracle:
(c / compete-01, ARG0, p2 / person)
(c / compete-01, time, t / today)
(g / game, name, n / name)
(h / have-03, ARG0, s / side)
(h / have-03, ARG1, p2 / person)
(n / name, op, "Go")
(p2 / person, quant, 7 / 7)
(p3 / play-01, ARG0, p2 / person)
(p3 / play-01, ARG1, g / game)
(s / side, mod, b / both)
(s / side, mod, e2 / each)

Input(Some(Graph(null,ArrayBuffer(Span(0,4,List(1, 0),In the competition today,(date-entity :time today),false), Span(12,13,List(2),participating,participate-01,false), Span(0,1,List(3),In,1,false), Span(8,9,List(4),have,have-org-role-91,false), Span(6,7,List(5),sides,side,false), Span(5,6,List(6),both,both,false), Span(7,8,List(7),each,each,false), Span(10,11,List(8),Go,go-01,false), Span(11,12,List(9),players,player,false), Span(2,3,List(10),competition,complement-01,false)),Map(2 -> participate-01, 5 -> side, 8 -> go-01, 7 -> each, 1 -> today, 4 -> have-org-role-91, 6 -> both, 9 -> player, 0 -> date-entity, 10 -> complement-01, 3 -> 1),Map(e -> each, h -> have-org-role-91, b -> both, t -> today, p2 -> player, s -> side, d -> date-entity, g -> go-01, 1 -> 1, p -> participate-01, c -> complement-01))),[Ljava.lang.String;@2e363c3b,Annotation([Ljava.lang.String;@53a2d530,[Ljava.lang.String;@22cf76a2,[Ljava.lang.String;@49b58436),Annotation([Ljava.lang.String;@567dbedf,[Ljava.lang.String;@13b3ea75,[Ledu.cmu.lti.nlp.amr.Dependency;@4a10e4c7),Annotation([Ljava.lang.String;@2f614d87,[Ljava.lang.String;@145195f2,[Ljava.lang.String;@18bd354f),Annotation([Ljava.lang.String;@5546dc43,[Ljava.lang.String;@70eebe19,[Ledu.cmu.lti.nlp.amr.Entity;@68884bf3))
AMR:
(1 / 1, op, c / complement-01)
(c / complement-01, ARG1, d / date-entity)
(d / date-entity, time, t / today)
(g / go-01, ARG1, p2 / player)
(h / have-org-role-91, ARG0, s / side)
(h / have-org-role-91, ARG1, p / participate-01)
(h / have-org-role-91, ARG4, d / date-entity)
(h / have-org-role-91, ARG6, e / each)
(p / participate-01, ARG1, p2 / player)
(s / side, mod, b / both)

Decoded in 3,384,063 microseconds
Sentence: Weiping Nie ( 9th level ) , Xiaoguang Liu ( 9th level ) , Hao Chang ( 6th level ) and Dayuan Cao ( 9th level ) from the Chinese team defeated Guibing Cui ( 6th level ) , Xiuying Zhang ( 9th level ) , Fengzhu Xu ( 9th level ) and Xuange Lin ( 8th level ) from the Korean team respectively .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  Chinese => (country :name (name :op "China"))
Oracle Span 4:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Oracle Span 5:  defeated => defeat-01
Oracle Span 6:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 7:  Guibing Cui => (person :name (name :op "Cui" :op "Guibing"))
Oracle Span 8:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 9:  Korean => (country :name (name :op "Korea"))
Oracle Span 10:  level => level
Oracle Span 11:  level => level
Oracle Span 12:  level => level
Oracle Span 13:  respectively => respective
Oracle Span 14:  team => team
Oracle Span 15:  team => team
Oracle Span 16:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 17:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))
Oracle Span 18:  Xiuying Zhang => (person :name (name :op "Zhang" :op "Xiuying"))
Oracle Span 19:  Xuange Lin => (person :name (name :op "Lin" :op "Xuange"))
NER Entity: (person :name (name :op "Xiaoguang" :op "Liu"))
NER Entity: (person :name (name :op "Hao" :op "Chang"))
NER Entity: (person :name (name :op "Dayuan" :op "Cao"))
NER Entity: (person :name (name :op "Guibing" :op "Cui"))
NER Entity: (person :name (name :op "Xiuying" :op "Zhang"))
NER Entity: (person :name (name :op "Fengzhu" :op "Xu"))
NER Entity: (person :name (name :op "Xuange" :op "Lin"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 20-21:  and => and
Span 52-53:  and => and
Span 21-23:  Dayuan Cao => (person :name (name :op "Dayuan" :op "Cao"))
Span 31-32:  defeated => defeat-01
Span 14-16:  Hao Chang => (person :name (name :op "Hao" :op "Chang"))
Span 30-31:  team => team
Span 62-63:  team => team
Span 0-2:  Weiping Nie => (person :name (name :op "Weiping" :op "Nie"))
Span 7-9:  Xiaoguang Liu => (person :name (name :op "Xiaoguang" :op "Liu"))
Span 39-41:  Xiuying Zhang => (person :name (name :op "Xiuying" :op "Zhang"))

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Oracle Span 20-21:  and => and
Oracle Span 52-53:  and => and
Oracle Span 29-30:  Chinese => (country :name (name :op "China"))
Oracle Span 21-23:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Oracle Span 31-32:  defeated => defeat-01
Oracle Span 46-48:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 32-34:  Guibing Cui => (person :name (name :op "Cui" :op "Guibing"))
Oracle Span 14-16:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 61-62:  Korean => (country :name (name :op "Korea"))
Oracle Span 4-5:  level => level
Oracle Span 11-12:  level => level
Oracle Span 18-19:  level => level
Oracle Span 63-64:  respectively => respective
Oracle Span 30-31:  team => team
Oracle Span 62-63:  team => team
Oracle Span 0-2:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 7-9:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))
Oracle Span 39-41:  Xiuying Zhang => (person :name (name :op "Zhang" :op "Xiuying"))
Oracle Span 53-55:  Xuange Lin => (person :name (name :op "Lin" :op "Xuange"))

Dependencies:
1	Weiping	_	NNP	NNP	_	16	nn	_	_
2	Nie	_	NNP	NNP	_	16	nn	_	_
3	(	_	(	(	_	5	punct	_	_
4	9th	_	JJ	JJ	_	5	amod	_	_
5	level	_	NN	NN	_	16	appos	_	_
6	)	_	)	)	_	5	punct	_	_
7	,	_	,	,	_	16	punct	_	_
8	Xiaoguang	_	NNP	NNP	_	16	dep	_	_
9	Liu	_	NNP	NNP	_	16	nn	_	_
10	(	_	(	(	_	12	punct	_	_
11	9th	_	JJ	JJ	_	12	amod	_	_
12	level	_	NN	NN	_	16	appos	_	_
13	)	_	)	)	_	12	punct	_	_
14	,	_	,	,	_	16	punct	_	_
15	Hao	_	NNP	NNP	_	16	dep	_	_
16	Chang	_	NNP	NNP	_	32	nsubj	_	_
17	(	_	(	(	_	19	punct	_	_
18	6th	_	JJ	JJ	_	19	amod	_	_
19	level	_	NN	NN	_	16	appos	_	_
20	)	_	)	)	_	19	punct	_	_
21	and	_	CC	CC	_	16	cc	_	_
22	Dayuan	_	NNP	NNP	_	23	nn	_	_
23	Cao	_	NNP	NNP	_	16	conj	_	_
24	(	_	(	(	_	26	punct	_	_
25	9th	_	JJ	JJ	_	26	amod	_	_
26	level	_	NN	NN	_	23	appos	_	_
27	)	_	)	)	_	26	punct	_	_
28	from	_	IN	IN	_	32	prep	_	_
29	the	_	DT	DT	_	31	det	_	_
30	Chinese	_	JJ	JJ	_	31	amod	_	_
31	team	_	NN	NN	_	28	pobj	_	_
32	defeated	_	VBD	VBD	_	0	root	_	_
33	Guibing	_	NNP	NNP	_	48	nn	_	_
34	Cui	_	NNP	NNP	_	48	nn	_	_
35	(	_	(	(	_	37	punct	_	_
36	6th	_	JJ	JJ	_	37	amod	_	_
37	level	_	NN	NN	_	48	appos	_	_
38	)	_	)	)	_	37	punct	_	_
39	,	_	,	,	_	48	punct	_	_
40	Xiuying	_	NNP	NNP	_	48	dep	_	_
41	Zhang	_	NNP	NNP	_	48	nn	_	_
42	(	_	(	(	_	44	punct	_	_
43	9th	_	JJ	JJ	_	44	amod	_	_
44	level	_	NN	NN	_	48	appos	_	_
45	)	_	)	)	_	44	punct	_	_
46	,	_	,	,	_	48	punct	_	_
47	Fengzhu	_	NNP	NNP	_	48	dep	_	_
48	Xu	_	NNP	NNP	_	32	dep	_	_
49	(	_	(	(	_	51	punct	_	_
50	9th	_	JJ	JJ	_	51	amod	_	_
51	level	_	NN	NN	_	48	appos	_	_
52	)	_	)	)	_	51	punct	_	_
53	and	_	CC	CC	_	48	cc	_	_
54	Xuange	_	NNP	NNP	_	55	nn	_	_
55	Lin	_	NNP	NNP	_	48	conj	_	_
56	(	_	(	(	_	58	punct	_	_
57	8th	_	JJ	JJ	_	58	amod	_	_
58	level	_	NN	NN	_	55	appos	_	_
59	)	_	)	)	_	58	punct	_	_
60	from	_	IN	IN	_	32	prep	_	_
61	the	_	DT	DT	_	63	det	_	_
62	Korean	_	JJ	JJ	_	63	amod	_	_
63	team	_	NN	NN	_	60	pobj	_	_
64	respectively	_	RB	RB	_	32	advmod	_	_
65	.	_	.	.	_	32	punct	_	_

Oracle:
(a / and, op, p10 / person)
(a / and, op, p11 / person)
(a / and, op, p12 / person)
(a / and, op, p9 / person)
(a2 / and, op, p13 / person)
(a2 / and, op, p14 / person)
(a2 / and, op, p15 / person)
(a2 / and, op, p16 / person)
(c4 / country, name, n5 / name)
(c5 / country, name, n10 / name)
(d2 / defeat-01, ARG0, a / and)
(d2 / defeat-01, ARG1, a2 / and)
(d2 / defeat-01, mod, r / respective)
(n / name, op, "Nie")
(n / name, op, "Weiping")
(n10 / name, op, "Korea")
(n2 / name, op, "Liu")
(n2 / name, op, "Xiaoguang")
(n3 / name, op, "Chang")
(n3 / name, op, "Hao")
(n4 / name, op, "Cao")
(n4 / name, op, "Dayuan")
(n5 / name, op, "China")
(n6 / name, op, "Cui")
(n6 / name, op, "Guibing")
(n7 / name, op, "Xiuying")
(n7 / name, op, "Zhang")
(n8 / name, op, "Fengzhu")
(n8 / name, op, "Xu")
(n9 / name, op, "Lin")
(n9 / name, op, "Xuange")
(p10 / person, mod, l / level)
(p10 / person, name, n2 / name)
(p11 / person, mod, l2 / level)
(p11 / person, name, n3 / name)
(p12 / person, mod, l / level)
(p12 / person, name, n4 / name)
(p13 / person, mod, l2 / level)
(p13 / person, name, n6 / name)
(p14 / person, mod, l / level)
(p14 / person, name, n7 / name)
(p15 / person, mod, l / level)
(p15 / person, name, n8 / name)
(p16 / person, mod, l3 / level)
(p16 / person, name, n9 / name)
(p9 / person, mod, l / level)
(p9 / person, name, n / name)
(t / team, mod, c4 / country)
(t / team, part, a / and)
(t2 / team, mod, c5 / country)
(t2 / team, part, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(39,41,List(3, 2, 1, 0),Xiuying Zhang,(person :name (name :op "Xiuying" :op "Zhang")),false), Span(31,32,List(4),defeated,defeat-01,false), Span(14,16,List(8, 7, 6, 5),Hao Chang,(person :name (name :op "Hao" :op "Chang")),false), Span(30,31,List(9),team,team,false), Span(21,23,List(13, 12, 11, 10),Dayuan Cao,(person :name (name :op "Dayuan" :op "Cao")),false), Span(7,9,List(17, 16, 15, 14),Xiaoguang Liu,(person :name (name :op "Xiaoguang" :op "Liu")),false), Span(20,21,List(18),and,and,false), Span(52,53,List(19),and,and,false), Span(0,2,List(23, 22, 21, 20),Weiping Nie,(person :name (name :op "Weiping" :op "Nie")),false), Span(62,63,List(24),team,team,false)),Map(2 -> "Xiuying", 5 -> person, 12 -> "Dayuan", 8 -> "Chang", 15 -> name, 21 -> name, 18 -> and, 24 -> team, 7 -> "Hao", 1 -> name, 17 -> "Liu", 23 -> "Nie", 4 -> defeat-01, 11 -> name, 14 -> person, 20 -> person, 6 -> name, 9 -> team, 0 -> person, 22 -> "Weiping", 16 -> "Xiaoguang", 19 -> and, 10 -> person, 3 -> "Zhang", 13 -> "Cao"),Map(n -> name, p5 -> person, t -> team, p2 -> person, n4 -> name, d -> defeat-01, p -> person, n3 -> name, a -> and, p4 -> person, t2 -> team, a2 -> and, p3 -> person, n2 -> name, n5 -> name))),[Ljava.lang.String;@3982b57d,Annotation([Ljava.lang.String;@6a55bf84,[Ljava.lang.String;@6121719e,[Ljava.lang.String;@78450a03),Annotation([Ljava.lang.String;@5440612b,[Ljava.lang.String;@132e4db8,[Ledu.cmu.lti.nlp.amr.Dependency;@796963c2),Annotation([Ljava.lang.String;@29ac7bfe,[Ljava.lang.String;@7e320ed9,[Ljava.lang.String;@1f10df2a),Annotation([Ljava.lang.String;@2dd5c879,[Ljava.lang.String;@67ec35b6,[Ledu.cmu.lti.nlp.amr.Entity;@9c6bb54))
AMR:
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(a / and, op, p4 / person)
(a / and, op, p5 / person)
(a / and, poss, t2 / team)
(a2 / and, op, p / person)
(d / defeat-01, ARG0, p2 / person)
(d / defeat-01, ARG1, t / team)
(d / defeat-01, ARG6, p / person)
(n / name, op, "Xiuying")
(n / name, op, "Zhang")
(n2 / name, op, "Chang")
(n2 / name, op, "Hao")
(n3 / name, op, "Cao")
(n3 / name, op, "Dayuan")
(n4 / name, op, "Liu")
(n4 / name, op, "Xiaoguang")
(n5 / name, op, "Nie")
(n5 / name, op, "Weiping")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / person, name, n3 / name)
(p4 / person, name, n4 / name)
(p5 / person, name, n5 / name)

Decoded in 11,908,123 microseconds
Sentence: Among which , Weiping Nie , Xiaoguang Liu and Hao Chang both achieved victories in the middle games .

Oracle Span 1:  and => and
Oracle Span 2:  games => game
Oracle Span 3:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 4:  middle => middle
Oracle Span 5:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 6:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))
NER Entity: (person :name (name :op "Xiaoguang" :op "Liu"))
NER Entity: (person :name (name :op "Hao" :op "Chang"))
Spans:
Span 12-13:  achieved => achieve-01
Span 0-1:  Among => moon-01
Span 8-9:  and => and
Span 11-12:  both => both
Span 17-18:  games => game
Span 9-11:  Hao Chang => (person :name (name :op "Hao" :op "Chang"))
Span 16-17:  middle => middle
Span 13-14:  victories => victory
Span 3-5:  Weiping Nie => (person :name (name :op "Weiping" :op "Nie"))
Span 6-8:  Xiaoguang Liu => (person :name (name :op "Xiaoguang" :op "Liu"))

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 17-18:  games => game
Oracle Span 9-11:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 16-17:  middle => middle
Oracle Span 3-5:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 6-8:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))

Dependencies:
1	Among	_	IN	IN	_	13	prep	_	_
2	which	_	WDT	WDT	_	1	pobj	_	_
3	,	_	,	,	_	13	punct	_	_
4	Weiping	_	NNP	NNP	_	5	nn	_	_
5	Nie	_	NNP	NNP	_	13	nsubj	_	_
6	,	_	,	,	_	5	punct	_	_
7	Xiaoguang	_	NNP	NNP	_	8	nn	_	_
8	Liu	_	NNP	NNP	_	5	conj	_	_
9	and	_	CC	CC	_	5	cc	_	_
10	Hao	_	NNP	NNP	_	11	nn	_	_
11	Chang	_	NNP	NNP	_	5	conj	_	_
12	both	_	DT	DT	_	13	dep	_	_
13	achieved	_	VBD	VBD	_	0	root	_	_
14	victories	_	NNS	NNS	_	13	dobj	_	_
15	in	_	IN	IN	_	13	prep	_	_
16	the	_	DT	DT	_	18	det	_	_
17	middle	_	JJ	JJ	_	18	amod	_	_
18	games	_	NNS	NNS	_	15	pobj	_	_
19	.	_	.	.	_	13	punct	_	_

Oracle:
(a2 / and, op, p4 / person)
(a2 / and, op, p5 / person)
(a2 / and, op, p6 / person)
(g / game, mod, m / middle)
(n / name, op, "Liu")
(n / name, op, "Xiaoguang")
(n2 / name, op, "Chang")
(n2 / name, op, "Hao")
(n3 / name, op, "Nie")
(n3 / name, op, "Weiping")
(p4 / person, name, n / name)
(p5 / person, name, n2 / name)
(p6 / person, name, n3 / name)

Input(Some(Graph(null,ArrayBuffer(Span(3,5,List(3, 2, 1, 0),Weiping Nie,(person :name (name :op "Weiping" :op "Nie")),false), Span(13,14,List(4),victories,victory,false), Span(16,17,List(5),middle,middle,false), Span(6,8,List(9, 8, 7, 6),Xiaoguang Liu,(person :name (name :op "Xiaoguang" :op "Liu")),false), Span(9,11,List(13, 12, 11, 10),Hao Chang,(person :name (name :op "Hao" :op "Chang")),false), Span(0,1,List(14),Among,moon-01,false), Span(8,9,List(15),and,and,false), Span(11,12,List(16),both,both,false), Span(12,13,List(17),achieved,achieve-01,false), Span(17,18,List(18),games,game,false)),Map(2 -> "Weiping", 5 -> middle, 12 -> "Hao", 15 -> and, 8 -> "Xiaoguang", 18 -> game, 7 -> name, 17 -> achieve-01, 1 -> name, 4 -> victory, 11 -> name, 14 -> moon-01, 6 -> person, 0 -> person, 9 -> "Liu", 16 -> both, 3 -> "Nie", 10 -> person, 13 -> "Chang"),Map(n -> name, b -> both, m2 -> moon-01, p2 -> person, v -> victory, m -> middle, p -> person, g -> game, n3 -> name, a -> and, a2 -> achieve-01, p3 -> person, n2 -> name))),[Ljava.lang.String;@59a0cd77,Annotation([Ljava.lang.String;@5dfcfb0f,[Ljava.lang.String;@54b1f4fb,[Ljava.lang.String;@14aa3e42),Annotation([Ljava.lang.String;@4b3e82d5,[Ljava.lang.String;@71a02c3e,[Ledu.cmu.lti.nlp.amr.Dependency;@2aed08dd),Annotation([Ljava.lang.String;@6ff06bec,[Ljava.lang.String;@506774ed,[Ljava.lang.String;@20566303),Annotation([Ljava.lang.String;@623f3c34,[Ljava.lang.String;@efc9494,[Ledu.cmu.lti.nlp.amr.Entity;@655749ba))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(a2 / achieve-01, ARG0, a / and)
(a2 / achieve-01, ARG1, v / victory)
(a2 / achieve-01, ARG2, g / game)
(a2 / achieve-01, ARG6, b / both)
(g / game, mod, m / middle)
(m2 / moon-01, ARG1, p / person)
(n / name, op, "Nie")
(n / name, op, "Weiping")
(n2 / name, op, "Liu")
(n2 / name, op, "Xiaoguang")
(n3 / name, op, "Chang")
(n3 / name, op, "Hao")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / person, name, n3 / name)

Decoded in 3,558,797 microseconds
Sentence: Dayuan Cao achieved victory with an advantage of seven and a half ' mu ' .

Oracle Span 1:  advantage => advantage
Oracle Span 2:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Oracle Span 3:  mu => mu
NER Entity: (person :name (name :op "Dayuan" :op "Cao"))
Spans:
Span 2-3:  achieved => achieve-01
Span 6-7:  advantage => advantage
Span 9-10:  and => and
Span 0-1:  Dayuan => 1
Span 0-2:  Dayuan Cao => (person :name (name :op "Dayuan" :op "Cao"))
Span 3-4:  victory => vitrify-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 6-7:  advantage => advantage
Oracle Span 0-2:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Oracle Span 13-14:  mu => mu

Dependencies:
1	Dayuan	_	NNP	NNP	_	2	nn	_	_
2	Cao	_	NNP	NNP	_	3	nsubj	_	_
3	achieved	_	VBD	VBD	_	0	root	_	_
4	victory	_	NN	NN	_	3	dobj	_	_
5	with	_	IN	IN	_	3	prep	_	_
6	an	_	DT	DT	_	7	det	_	_
7	advantage	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	seven	_	CD	CD	_	8	pobj	_	_
10	and	_	CC	CC	_	7	cc	_	_
11	a	_	DT	DT	_	12	det	_	_
12	half	_	NN	NN	_	14	poss	_	_
13	'	_	POS	POS	_	12	possessive	_	_
14	mu	_	NN	NN	_	7	conj	_	_
15	'	_	''	''	_	3	punct	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(m / mu, consist, a2 / advantage)
(n / name, op, "Cao")
(n / name, op, "Dayuan")
(p2 / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Dayuan,1,false), Span(3,4,List(1),victory,vitrify-01,false), Span(2,3,List(2),achieved,achieve-01,false), Span(6,7,List(3),advantage,advantage,false), Span(0,2,List(7, 6, 5, 4),Dayuan Cao,(person :name (name :op "Dayuan" :op "Cao")),false), Span(9,10,List(8),and,and,false)),Map(2 -> achieve-01, 5 -> name, 8 -> and, 7 -> "Cao", 1 -> vitrify-01, 4 -> person, 6 -> "Dayuan", 0 -> 1, 3 -> advantage),Map(n -> name, a3 -> and, v -> vitrify-01, p -> person, 1 -> 1, a -> achieve-01, a2 -> advantage))),[Ljava.lang.String;@3c877f8a,Annotation([Ljava.lang.String;@13841859,[Ljava.lang.String;@114c8c29,[Ljava.lang.String;@38ea953),Annotation([Ljava.lang.String;@472fd87,[Ljava.lang.String;@37877b80,[Ledu.cmu.lti.nlp.amr.Dependency;@42df949d),Annotation([Ljava.lang.String;@346d69a4,[Ljava.lang.String;@27e0346b,[Ljava.lang.String;@2bb7106c),Annotation([Ljava.lang.String;@157212fb,[Ljava.lang.String;@4a0d69b8,[Ledu.cmu.lti.nlp.amr.Entity;@6c685ffe))
AMR:
(1 / 1, mod, p / person)
(a / achieve-01, ARG0, p / person)
(a / achieve-01, ARG1, v / vitrify-01)
(n / name, op, "Cao")
(n / name, op, "Dayuan")
(p / person, name, n / name)
(v / vitrify-01, ARG0, a3 / and)
(v / vitrify-01, ARG1, a2 / advantage)

Decoded in 251,094 microseconds
Sentence: Xunxuan Cao ( 9th level ) , Changhao Li ( 7th level ) and Changhe Liu ( 6th level ) from the Korean team defeated Jing Liu ( 5th level ) , Xiaocun Ma ( 9th level ) and Jianhong Wang ( 7th level ) from the Chinese team respectively .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Oracle Span 4:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Oracle Span 5:  Chinese => (country :name (name :op "China"))
Oracle Span 6:  defeated => defeat-01
Oracle Span 7:  Jianhong Wang => (person :name (name :op "Wang" :op "Jianhong"))
Oracle Span 8:  Jing => "Jing"
Oracle Span 9:  Korean => (country :name (name :op "Korea"))
Oracle Span 10:  level => level
Oracle Span 11:  level => level
Oracle Span 12:  level => level
Oracle Span 13:  level => level
Oracle Span 14:  respectively => respective
Oracle Span 15:  team => team
Oracle Span 16:  team => team
Oracle Span 17:  Xiaocun Ma => (person :name (name :op "Ma" :op "Xiaocun"))
Oracle Span 18:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))
NER Entity: (person :name (name :op "Xunxuan" :op "Cao"))
NER Entity: (person :name (name :op "Changhao" :op "Li"))
NER Entity: (person :name (name :op "Changhe" :op "Liu"))
NER Entity: (person :name (name :op "Xiaocun" :op "Ma"))
NER Entity: (person :name (name :op "Jianhong" :op "Wang"))
NER Entity: (thing :name (name :op "Korean"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Jing" :op "Liu"))
Spans:
Span 38-39:  and => and
Span 13-14:  and => and
Span 7-9:  Changhao Li => (person :name (name :op "Changhao" :op "Li"))
Span 14-16:  Changhe Liu => (person :name (name :op "Changhe" :op "Liu"))
Span 24-25:  defeated => defeat-01
Span 39-41:  Jianhong Wang => (person :name (name :op "Jianhong" :op "Wang"))
Span 25-27:  Jing Liu => (person :name (name :op "Jing" :op "Liu"))
Span 33-34:  Ma => (person :name (name :op "Ma"))
Span 23-24:  team => team
Span 48-49:  team => team

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 38-39:  and => and
Oracle Span 7-9:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Oracle Span 14-16:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Oracle Span 47-48:  Chinese => (country :name (name :op "China"))
Oracle Span 24-25:  defeated => defeat-01
Oracle Span 39-41:  Jianhong Wang => (person :name (name :op "Wang" :op "Jianhong"))
Oracle Span 25-26:  Jing => "Jing"
Oracle Span 22-23:  Korean => (country :name (name :op "Korea"))
Oracle Span 4-5:  level => level
Oracle Span 11-12:  level => level
Oracle Span 18-19:  level => level
Oracle Span 29-30:  level => level
Oracle Span 49-50:  respectively => respective
Oracle Span 23-24:  team => team
Oracle Span 48-49:  team => team
Oracle Span 32-34:  Xiaocun Ma => (person :name (name :op "Ma" :op "Xiaocun"))
Oracle Span 0-2:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))

Dependencies:
1	Xunxuan	_	NNP	NNP	_	9	nn	_	_
2	Cao	_	NNP	NNP	_	9	nn	_	_
3	(	_	(	(	_	5	punct	_	_
4	9th	_	JJ	JJ	_	5	amod	_	_
5	level	_	NN	NN	_	9	appos	_	_
6	)	_	)	)	_	5	punct	_	_
7	,	_	,	,	_	9	punct	_	_
8	Changhao	_	NNP	NNP	_	9	dep	_	_
9	Li	_	NNP	NNP	_	25	nsubj	_	_
10	(	_	(	(	_	12	punct	_	_
11	7th	_	JJ	JJ	_	12	amod	_	_
12	level	_	NN	NN	_	9	appos	_	_
13	)	_	)	)	_	12	punct	_	_
14	and	_	CC	CC	_	9	cc	_	_
15	Changhe	_	NNP	NNP	_	16	nn	_	_
16	Liu	_	NNP	NNP	_	9	conj	_	_
17	(	_	(	(	_	19	punct	_	_
18	6th	_	JJ	JJ	_	19	amod	_	_
19	level	_	NN	NN	_	16	appos	_	_
20	)	_	)	)	_	19	punct	_	_
21	from	_	IN	IN	_	25	prep	_	_
22	the	_	DT	DT	_	24	det	_	_
23	Korean	_	JJ	JJ	_	24	amod	_	_
24	team	_	NN	NN	_	21	pobj	_	_
25	defeated	_	VBD	VBD	_	0	root	_	_
26	Jing	_	NNP	NNP	_	34	nn	_	_
27	Liu	_	NNP	NNP	_	34	nn	_	_
28	(	_	(	(	_	30	punct	_	_
29	5th	_	JJ	JJ	_	30	amod	_	_
30	level	_	NN	NN	_	34	appos	_	_
31	)	_	)	)	_	30	punct	_	_
32	,	_	,	,	_	34	punct	_	_
33	Xiaocun	_	NNP	NNP	_	34	dep	_	_
34	Ma	_	NNP	NNP	_	25	dep	_	_
35	(	_	(	(	_	37	punct	_	_
36	9th	_	JJ	JJ	_	37	amod	_	_
37	level	_	NN	NN	_	34	appos	_	_
38	)	_	)	)	_	37	punct	_	_
39	and	_	CC	CC	_	34	cc	_	_
40	Jianhong	_	NNP	NNP	_	41	nn	_	_
41	Wang	_	NNP	NNP	_	34	conj	_	_
42	(	_	(	(	_	44	punct	_	_
43	7th	_	JJ	JJ	_	44	amod	_	_
44	level	_	NN	NN	_	41	appos	_	_
45	)	_	)	)	_	44	punct	_	_
46	from	_	IN	IN	_	25	prep	_	_
47	the	_	DT	DT	_	49	det	_	_
48	Chinese	_	JJ	JJ	_	49	amod	_	_
49	team	_	NN	NN	_	46	pobj	_	_
50	respectively	_	RB	RB	_	25	advmod	_	_
51	.	_	.	.	_	25	punct	_	_

Oracle:
(a / and, op, p7 / person)
(a / and, op, p8 / person)
(a / and, op, p9 / person)
(a2 / and, op, p11 / person)
(a2 / and, op, p12 / person)
(c6 / country, name, n4 / name)
(c7 / country, name, n8 / name)
(d / defeat-01, ARG0, a / and)
(d / defeat-01, ARG1, a2 / and)
(d / defeat-01, mod, r / respective)
(n / name, op, "Cao")
(n / name, op, "XunXuan")
(n2 / name, op, "Changhao")
(n2 / name, op, "Li")
(n3 / name, op, "Changhe")
(n3 / name, op, "Liu")
(n4 / name, op, "Korea")
(n6 / name, op, "Ma")
(n6 / name, op, "Xiaocun")
(n7 / name, op, "Jianhong")
(n7 / name, op, "Wang")
(n8 / name, op, "China")
(p11 / person, mod, l / level)
(p11 / person, name, n6 / name)
(p12 / person, mod, l2 / level)
(p12 / person, name, n7 / name)
(p7 / person, mod, l / level)
(p7 / person, name, n / name)
(p8 / person, mod, l2 / level)
(p8 / person, name, n2 / name)
(p9 / person, mod, l3 / level)
(p9 / person, name, n3 / name)
(t / team, mod, c6 / country)
(t / team, part, a / and)
(t2 / team, mod, c7 / country)
(t2 / team, part, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),and,and,false), Span(39,41,List(4, 3, 2, 1),Jianhong Wang,(person :name (name :op "Jianhong" :op "Wang")),false), Span(23,24,List(5),team,team,false), Span(48,49,List(6),team,team,false), Span(33,34,List(9, 8, 7),Ma,(person :name (name :op "Ma")),false), Span(7,9,List(13, 12, 11, 10),Changhao Li,(person :name (name :op "Changhao" :op "Li")),false), Span(25,27,List(17, 16, 15, 14),Jing Liu,(person :name (name :op "Jing" :op "Liu")),false), Span(13,14,List(18),and,and,false), Span(24,25,List(19),defeated,defeat-01,false), Span(14,16,List(23, 22, 21, 20),Changhe Liu,(person :name (name :op "Changhe" :op "Liu")),false)),Map(2 -> name, 5 -> team, 12 -> "Changhao", 15 -> name, 8 -> name, 21 -> name, 18 -> and, 7 -> person, 17 -> "Liu", 1 -> person, 23 -> "Liu", 4 -> "Wang", 11 -> name, 14 -> person, 20 -> person, 6 -> team, 22 -> "Changhe", 0 -> and, 9 -> "Ma", 16 -> "Jing", 19 -> defeat-01, 3 -> "Jianhong", 10 -> person, 13 -> "Li"),Map(n -> name, p5 -> person, t -> team, p2 -> person, n4 -> name, d -> defeat-01, p -> person, a -> and, n3 -> name, p4 -> person, t2 -> team, a2 -> and, p3 -> person, n2 -> name, n5 -> name))),[Ljava.lang.String;@3ffd6fc1,Annotation([Ljava.lang.String;@50b9710,[Ljava.lang.String;@ad8ee4a,[Ljava.lang.String;@5f95d13b),Annotation([Ljava.lang.String;@b422e6f,[Ljava.lang.String;@52a89b00,[Ledu.cmu.lti.nlp.amr.Dependency;@1f4f95a1),Annotation([Ljava.lang.String;@6e22937a,[Ljava.lang.String;@7489e987,[Ljava.lang.String;@626f0c8d),Annotation([Ljava.lang.String;@16e6ffc,[Ljava.lang.String;@7b2d95e8,[Ledu.cmu.lti.nlp.amr.Entity;@40d39edb))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / person)
(a / and, op, p5 / person)
(a2 / and, op, p3 / person)
(a2 / and, op, p5 / person)
(a2 / and, poss, t2 / team)
(d / defeat-01, ARG0, p3 / person)
(d / defeat-01, ARG1, t / team)
(d / defeat-01, ARG6, p4 / person)
(n / name, op, "Jianhong")
(n / name, op, "Wang")
(n2 / name, op, "Ma")
(n3 / name, op, "Changhao")
(n3 / name, op, "Li")
(n4 / name, op, "Jing")
(n4 / name, op, "Liu")
(n5 / name, op, "Changhe")
(n5 / name, op, "Liu")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / person, name, n3 / name)
(p4 / person, name, n4 / name)
(p5 / person, name, n5 / name)

Decoded in 9,436,065 microseconds
Sentence: Among which , Xunxuan Cao achieved a victory in the middle game .

Oracle Span 1:  game => game
Oracle Span 2:  middle => middle
Oracle Span 3:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))
NER Entity: (person :name (name :op "Xunxuan" :op "Cao"))
Spans:
Span 5-6:  achieved => achieve-01
Span 0-1:  Among => moon-01
Span 11-12:  game => game
Span 10-11:  middle => middle
Span 7-8:  victory => vitrify-01
Span 3-5:  Xunxuan Cao => (person :name (name :op "Xunxuan" :op "Cao"))

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 11-12:  game => game
Oracle Span 10-11:  middle => middle
Oracle Span 3-5:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))

Dependencies:
1	Among	_	IN	IN	_	6	prep	_	_
2	which	_	WDT	WDT	_	1	pobj	_	_
3	,	_	,	,	_	6	punct	_	_
4	Xunxuan	_	NNP	NNP	_	5	nn	_	_
5	Cao	_	NNP	NNP	_	6	nsubj	_	_
6	achieved	_	VBD	VBD	_	0	root	_	_
7	a	_	DT	DT	_	8	det	_	_
8	victory	_	NN	NN	_	6	dobj	_	_
9	in	_	IN	IN	_	6	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	middle	_	JJ	JJ	_	12	amod	_	_
12	game	_	NN	NN	_	9	pobj	_	_
13	.	_	.	.	_	6	punct	_	_

Oracle:
(g / game, mod, m / middle)
(n / name, op, "Cao")
(n / name, op, "XunXuan")
(p2 / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),achieved,achieve-01,false), Span(0,1,List(1),Among,moon-01,false), Span(11,12,List(2),game,game,false), Span(7,8,List(3),victory,vitrify-01,false), Span(3,5,List(7, 6, 5, 4),Xunxuan Cao,(person :name (name :op "Xunxuan" :op "Cao")),false), Span(10,11,List(8),middle,middle,false)),Map(2 -> game, 5 -> name, 8 -> middle, 7 -> "Cao", 1 -> moon-01, 4 -> person, 6 -> "Xunxuan", 0 -> achieve-01, 3 -> vitrify-01),Map(n -> name, m2 -> middle, v -> vitrify-01, m -> moon-01, p -> person, g -> game, a -> achieve-01))),[Ljava.lang.String;@62613b65,Annotation([Ljava.lang.String;@3a46f4f6,[Ljava.lang.String;@10665877,[Ljava.lang.String;@330a8e93),Annotation([Ljava.lang.String;@58db2184,[Ljava.lang.String;@55b78f2d,[Ledu.cmu.lti.nlp.amr.Dependency;@77b0d00c),Annotation([Ljava.lang.String;@10a9b67f,[Ljava.lang.String;@11ff62ef,[Ljava.lang.String;@7858591a),Annotation([Ljava.lang.String;@999c6ad,[Ljava.lang.String;@54de93af,[Ledu.cmu.lti.nlp.amr.Entity;@3e5c6bc1))
AMR:
(a / achieve-01, ARG0, p / person)
(a / achieve-01, ARG1, v / vitrify-01)
(g / game, mod, m2 / middle)
(m / moon-01, ARG1, a / achieve-01)
(n / name, op, "Cao")
(n / name, op, "Xunxuan")
(p / person, name, n / name)
(v / vitrify-01, ARG1, g / game)

Decoded in 184,680 microseconds
Sentence: Changhao Li and Changhe Liu achieved victories with advantages of six and a half ' mu ' and seven and a half ' mu ' respectively .

Oracle Span 1:  advantages => advantage
Oracle Span 2:  and => and
Oracle Span 3:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Oracle Span 4:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Oracle Span 5:  mu => mu
Oracle Span 6:  mu => mu
Oracle Span 7:  respectively => respective
NER Entity: (person :name (name :op "Changhao" :op "Li"))
NER Entity: (person :name (name :op "Changhe" :op "Liu"))
Spans:
Span 5-6:  achieved => achieve-01
Span 8-9:  advantages => advantage
Span 11-12:  and => and
Span 19-20:  and => and
Span 2-3:  and => and
Span 17-18:  and => and
Span 0-1:  Changhao => 1
Span 0-2:  Changhao Li => (person :name (name :op "Changhao" :op "Li"))
Span 3-5:  Changhe Liu => (person :name (name :op "Changhe" :op "Liu"))
Span 25-26:  respectively => respective
Span 6-7:  victories => victory

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 8-9:  advantages => advantage
Oracle Span 2-3:  and => and
Oracle Span 0-2:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Oracle Span 3-5:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Oracle Span 15-16:  mu => mu
Oracle Span 23-24:  mu => mu
Oracle Span 25-26:  respectively => respective

Dependencies:
1	Changhao	_	NNP	NNP	_	2	nn	_	_
2	Li	_	NNP	NNP	_	6	nsubj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	Changhe	_	NNP	NNP	_	5	nn	_	_
5	Liu	_	NNP	NNP	_	2	conj	_	_
6	achieved	_	VBD	VBD	_	0	root	_	_
7	victories	_	NNS	NNS	_	6	dobj	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	advantages	_	NNS	NNS	_	8	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	six	_	CD	CD	_	10	pobj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	a	_	DT	DT	_	14	det	_	_
14	half	_	NN	NN	_	16	poss	_	_
15	'	_	POS	POS	_	14	possessive	_	_
16	mu	_	NN	NN	_	11	conj	_	_
17	'	_	''	''	_	11	punct	_	_
18	and	_	CC	CC	_	11	cc	_	_
19	seven	_	CD	CD	_	11	conj	_	_
20	and	_	CC	CC	_	9	cc	_	_
21	a	_	DT	DT	_	22	det	_	_
22	half	_	NN	NN	_	24	poss	_	_
23	'	_	POS	POS	_	22	possessive	_	_
24	mu	_	NN	NN	_	9	conj	_	_
25	'	_	''	''	_	7	punct	_	_
26	respectively	_	RB	RB	_	6	advmod	_	_
27	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, mod, r / respective)
(m2 / mu, consist, a5 / advantage)
(n / name, op, "Changhao")
(n / name, op, "Li")
(n2 / name, op, "Changhe")
(n2 / name, op, "Liu")
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)

Input(Some(Graph(null,ArrayBuffer(Span(0,2,List(3, 2, 1, 0),Changhao Li,(person :name (name :op "Changhao" :op "Li")),false), Span(0,1,List(4),Changhao,1,false), Span(11,12,List(5),and,and,false), Span(19,20,List(6),and,and,false), Span(5,6,List(7),achieved,achieve-01,false), Span(6,7,List(8),victories,victory,false), Span(8,9,List(9),advantages,advantage,false), Span(2,3,List(10),and,and,false), Span(3,5,List(14, 13, 12, 11),Changhe Liu,(person :name (name :op "Changhe" :op "Liu")),false), Span(25,26,List(15),respectively,respective,false), Span(17,18,List(16),and,and,false)),Map(2 -> "Changhao", 5 -> and, 12 -> name, 15 -> respective, 8 -> victory, 7 -> achieve-01, 1 -> name, 4 -> 1, 11 -> person, 14 -> "Liu", 6 -> and, 0 -> person, 9 -> advantage, 16 -> and, 3 -> "Li", 10 -> and, 13 -> "Changhe"),Map(n -> name, p2 -> person, a3 -> achieve-01, v -> victory, a6 -> and, 1 -> 1, p -> person, a -> and, a5 -> and, a2 -> and, r -> respective, n2 -> name, a4 -> advantage))),[Ljava.lang.String;@1f3a2b7f,Annotation([Ljava.lang.String;@43525273,[Ljava.lang.String;@2cfe7fbb,[Ljava.lang.String;@2f8858af),Annotation([Ljava.lang.String;@6127fff2,[Ljava.lang.String;@30b7f86f,[Ledu.cmu.lti.nlp.amr.Dependency;@6feb5a65),Annotation([Ljava.lang.String;@24b3a17,[Ljava.lang.String;@5ccd9dc3,[Ljava.lang.String;@533672b5),Annotation([Ljava.lang.String;@663b32c4,[Ljava.lang.String;@3d7b2796,[Ledu.cmu.lti.nlp.amr.Entity;@de8967f))
AMR:
(1 / 1, mod, p / person)
(a / and, op, a6 / and)
(a2 / and, op, a3 / achieve-01)
(a3 / achieve-01, ARG0, a5 / and)
(a3 / achieve-01, ARG1, v / victory)
(a3 / achieve-01, ARG2, a4 / advantage)
(a5 / and, mod, r / respective)
(a5 / and, op, p / person)
(a5 / and, op, p2 / person)
(a6 / and, op, p / person)
(n / name, op, "Changhao")
(n / name, op, "Li")
(n2 / name, op, "Changhe")
(n2 / name, op, "Liu")
(p / person, name, n / name)
(p2 / person, name, n2 / name)

Decoded in 4,822,002 microseconds
Sentence: When receiving reporters telephone interviews , Runan Wang , leader of the Chinese delegation presented that , overall speaking , the strength of the Korean team was stronger than the Chinese team .

Oracle Span 1:  Chinese => (country :name (name :op "China"))
Oracle Span 2:  delegation => delegation
Oracle Span 3:  interviews => interview-01
Oracle Span 4:  Korean => (country :name (name :op "Korea"))
Oracle Span 5:  leader => lead-02
Oracle Span 6:  overall => overall
Oracle Span 7:  presented => present-00
Oracle Span 8:  receiving => receive-01
Oracle Span 9:  reporters => (person :ARG0-of report-01)
Oracle Span 10:  Runan Wang => (person :name (name :op "Wang" :op "Runan"))
Oracle Span 11:  speaking => speak-01
Oracle Span 12:  strength => strength
Oracle Span 13:  stronger => strong
Oracle Span 14:  team => team
Oracle Span 15:  team => team
Oracle Span 16:  telephone => telephone
NER Entity: (person :name (name :op "Runan" :op "Wang"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 12-13:  Chinese => (country :name (name :op "China"))
Span 13-14:  delegation => delegation
Span 4-5:  interviews => interview-01
Span 14-15:  presented => present-01
Span 1-2:  receiving => receive-01
Span 2-3:  reporters => (person :ARG0-of report-01)
Span 6-8:  Runan Wang => (person :name (name :op "Runan" :op "Wang"))
Span 21-22:  strength => strength
Span 27-28:  stronger => (strong :degree more)
Span 31-32:  team => team
Span 25-26:  team => team
Span 3-4:  telephone => telephone-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 12-13:  Chinese => (country :name (name :op "China"))
Oracle Span 13-14:  delegation => delegation
Oracle Span 4-5:  interviews => interview-01
Oracle Span 24-25:  Korean => (country :name (name :op "Korea"))
Oracle Span 9-10:  leader => lead-02
Oracle Span 17-18:  overall => overall
Oracle Span 14-15:  presented => present-00
Oracle Span 1-2:  receiving => receive-01
Oracle Span 2-3:  reporters => (person :ARG0-of report-01)
Oracle Span 6-8:  Runan Wang => (person :name (name :op "Wang" :op "Runan"))
Oracle Span 18-19:  speaking => speak-01
Oracle Span 21-22:  strength => strength
Oracle Span 27-28:  stronger => strong
Oracle Span 25-26:  team => team
Oracle Span 31-32:  team => team
Oracle Span 3-4:  telephone => telephone

Dependencies:
1	When	_	WRB	WRB	_	2	advmod	_	_
2	receiving	_	VBG	VBG	_	15	advcl	_	_
3	reporters	_	NNS	NNS	_	5	nn	_	_
4	telephone	_	NN	NN	_	5	nn	_	_
5	interviews	_	NNS	NNS	_	2	dobj	_	_
6	,	_	,	,	_	5	punct	_	_
7	Runan	_	NNP	NNP	_	8	nn	_	_
8	Wang	_	NNP	NNP	_	5	appos	_	_
9	,	_	,	,	_	15	punct	_	_
10	leader	_	NN	NN	_	15	nsubj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	Chinese	_	JJ	JJ	_	14	amod	_	_
14	delegation	_	NN	NN	_	11	pobj	_	_
15	presented	_	VBD	VBD	_	0	root	_	_
16	that	_	IN	IN	_	28	mark	_	_
17	,	_	,	,	_	28	punct	_	_
18	overall	_	JJ	JJ	_	19	amod	_	_
19	speaking	_	NN	NN	_	28	nsubj	_	_
20	,	_	,	,	_	19	punct	_	_
21	the	_	DT	DT	_	22	det	_	_
22	strength	_	NN	NN	_	19	appos	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	26	det	_	_
25	Korean	_	JJ	JJ	_	26	amod	_	_
26	team	_	NN	NN	_	23	pobj	_	_
27	was	_	VBD	VBD	_	28	cop	_	_
28	stronger	_	JJR	JJR	_	15	ccomp	_	_
29	than	_	IN	IN	_	28	prep	_	_
30	the	_	DT	DT	_	32	det	_	_
31	Chinese	_	JJ	JJ	_	32	amod	_	_
32	team	_	NN	NN	_	29	pobj	_	_
33	.	_	.	.	_	15	punct	_	_

Oracle:
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(d / delegation, source, c4 / country)
(i / interview-01, ARG0, p3 / person)
(i / interview-01, instrument, t4 / telephone)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, d / delegation)
(n / name, op, "Runan")
(n / name, op, "Wang")
(n2 / name, op, "China")
(n3 / name, op, "Korea")
(p / present-00, ARG0, p2 / person)
(p / present-00, ARG1, s3 / strong)
(p / present-00, time, r2 / receive-01)
(p2 / person, name, n / name)
(r2 / receive-01, ARG0, p2 / person)
(r2 / receive-01, ARG1, i / interview-01)
(r2 / receive-01, ARG2, p3 / person)
(r3 / report-01, ARG0, p3 / person)
(s2 / strength, poss, t / team)
(s3 / strong, condition, s5 / speak-01)
(s3 / strong, domain, s2 / strength)
(s5 / speak-01, manner, o / overall)
(t / team, mod, c5 / country)
(t2 / team, mod, c4 / country)

Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),presented,present-01,false), Span(2,3,List(2, 1),reporters,(person :ARG0-of report-01),false), Span(27,28,List(4, 3),stronger,(strong :degree more),false), Span(31,32,List(5),team,team,false), Span(1,2,List(6),receiving,receive-01,false), Span(4,5,List(7),interviews,interview-01,false), Span(13,14,List(8),delegation,delegation,false), Span(21,22,List(9),strength,strength,false), Span(12,13,List(12, 11, 10),Chinese,(country :name (name :op "China")),false), Span(6,8,List(16, 15, 14, 13),Runan Wang,(person :name (name :op "Runan" :op "Wang")),false), Span(25,26,List(17),team,team,false), Span(3,4,List(18),telephone,telephone-01,false)),Map(2 -> report-01, 5 -> team, 12 -> "China", 15 -> "Runan", 8 -> delegation, 18 -> telephone-01, 7 -> interview-01, 17 -> team, 1 -> person, 4 -> more, 11 -> name, 14 -> name, 6 -> receive-01, 0 -> present-01, 9 -> strength, 16 -> "Wang", 3 -> strong, 10 -> country, 13 -> person),Map(n -> name, s2 -> strength, t -> team, p2 -> person, s -> strong, m -> more, d -> delegation, t3 -> telephone-01, p -> present-01, r2 -> receive-01, t2 -> team, r -> report-01, i -> interview-01, c -> country, p3 -> person, n2 -> name))),[Ljava.lang.String;@57461763,Annotation([Ljava.lang.String;@7d560887,[Ljava.lang.String;@1841382f,[Ljava.lang.String;@78e49b65),Annotation([Ljava.lang.String;@1ffe7615,[Ljava.lang.String;@52a1575d,[Ledu.cmu.lti.nlp.amr.Dependency;@43b09d66),Annotation([Ljava.lang.String;@1f5309c6,[Ljava.lang.String;@73f19ae7,[Ljava.lang.String;@2bb2207b),Annotation([Ljava.lang.String;@6caec3c6,[Ljava.lang.String;@6b34faac,[Ledu.cmu.lti.nlp.amr.Entity;@146d738f))
AMR:
(c / country, name, n / name)
(d / delegation, mod, c / country)
(i / interview-01, ARG0, p3 / person)
(i / interview-01, ARG1, t3 / telephone-01)
(n / name, op, "China")
(n2 / name, op, "Runan")
(n2 / name, op, "Wang")
(p / present-01, ARG0, d / delegation)
(p / present-01, ARG1, s / strong)
(p / present-01, purpose, r2 / receive-01)
(p3 / person, name, n2 / name)
(r / report-01, ARG0, p2 / person)
(r / report-01, ARG1, t2 / team)
(r2 / receive-01, ARG0, s2 / strength)
(r2 / receive-01, ARG1, p2 / person)
(s / strong, compared-to, t / team)
(s / strong, degree, m / more)
(t3 / telephone-01, ARG1, p2 / person)

Decoded in 5,660,885 microseconds
Sentence: However , the Chinese team performed better today , and therefore achieved victory .

Oracle Span 1:  better => good
Oracle Span 2:  Chinese => (country :name (name :op "China"))
Oracle Span 3:  performed => perform-01
Oracle Span 4:  team => team
Oracle Span 5:  today => today
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 11-12:  achieved => achieve-01
Span 6-7:  better => (good :degree more)
Span 0-1:  However => (country :name (name :op "Russia"))
Span 0-8:  However , the Chinese team performed better today => (date-entity :time today)
Span 5-6:  performed => perform-01
Span 4-5:  team => have-org-role-91
Span 12-13:  victory => vitrify-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 6-7:  better => good
Oracle Span 3-4:  Chinese => (country :name (name :op "China"))
Oracle Span 5-6:  performed => perform-01
Oracle Span 4-5:  team => team
Oracle Span 7-8:  today => today

Dependencies:
1	However	_	RB	RB	_	6	advmod	_	_
2	,	_	,	,	_	6	punct	_	_
3	the	_	DT	DT	_	5	det	_	_
4	Chinese	_	JJ	JJ	_	5	amod	_	_
5	team	_	NN	NN	_	6	nsubj	_	_
6	performed	_	VBD	VBD	_	0	root	_	_
7	better	_	RBR	RBR	_	6	advmod	_	_
8	today	_	NN	NN	_	6	tmod	_	_
9	,	_	,	,	_	6	punct	_	_
10	and	_	CC	CC	_	6	cc	_	_
11	therefore	_	RB	RB	_	12	advmod	_	_
12	achieved	_	VBD	VBD	_	6	conj	_	_
13	victory	_	NN	NN	_	12	dobj	_	_
14	.	_	.	.	_	6	punct	_	_

Oracle:
(c3 / country, name, n / name)
(n / name, op, "China")
(p / perform-01, ARG0, t / team)
(p / perform-01, manner, g2 / good)
(p / perform-01, time, t2 / today)
(t / team, mod, c3 / country)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),achieved,achieve-01,false), Span(0,8,List(2, 1),However , the Chinese team performed better today,(date-entity :time today),false), Span(6,7,List(4, 3),better,(good :degree more),false), Span(4,5,List(5),team,have-org-role-91,false), Span(0,1,List(8, 7, 6),However,(country :name (name :op "Russia")),false), Span(12,13,List(9),victory,vitrify-01,false), Span(5,6,List(10),performed,perform-01,false)),Map(2 -> today, 5 -> have-org-role-91, 8 -> "Russia", 7 -> name, 1 -> date-entity, 4 -> more, 6 -> country, 9 -> vitrify-01, 0 -> achieve-01, 10 -> perform-01, 3 -> good),Map(n -> name, h -> have-org-role-91, t -> today, v -> vitrify-01, m -> more, d -> date-entity, p -> perform-01, g -> good, a -> achieve-01, c -> country))),[Ljava.lang.String;@60519095,Annotation([Ljava.lang.String;@bd93e6c,[Ljava.lang.String;@279fcecb,[Ljava.lang.String;@2e346c43),Annotation([Ljava.lang.String;@428d9428,[Ljava.lang.String;@65f84b,[Ledu.cmu.lti.nlp.amr.Dependency;@59d5871a),Annotation([Ljava.lang.String;@548eae17,[Ljava.lang.String;@7a0c5c7a,[Ljava.lang.String;@558444d0),Annotation([Ljava.lang.String;@209ce42d,[Ljava.lang.String;@143083f,[Ledu.cmu.lti.nlp.amr.Entity;@19346be1))
AMR:
(a / achieve-01, ARG0, h / have-org-role-91)
(a / achieve-01, ARG1, v / vitrify-01)
(c / country, name, n / name)
(d / date-entity, time, t / today)
(g / good, degree, m / more)
(h / have-org-role-91, ARG1, c / country)
(n / name, op, "Russia")
(p / perform-01, ARG0, h / have-org-role-91)
(p / perform-01, ARG1, g / good)
(v / vitrify-01, ARG1, d / date-entity)

Decoded in 350,041 microseconds
Sentence: The performance of our young competitor , Hao Chang , was especially outstanding today , defeating Fengzhu Xu of the Korean team in the middle game .

Oracle Span 1:  competitor => compete-01
Oracle Span 2:  defeating => defeat-01
Oracle Span 3:  especially => especially
Oracle Span 4:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 5:  game => game
Oracle Span 6:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 7:  Korean => (country :name (name :op "Korea"))
Oracle Span 8:  middle => middle
Oracle Span 9:  performance => perform-01
Oracle Span 10:  team => team
Oracle Span 11:  today => today
Oracle Span 12:  young => young
NER Entity: (person :name (name :op "Hao" :op "Chang"))
NER Entity: (person :name (name :op "Fengzhu" :op "Xu"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 5-6:  competitor => (company :ARG0-of compete-01)
Span 15-16:  defeating => defeat-01
Span 11-12:  especially => especially
Span 16-18:  Fengzhu Xu => (person :name (name :op "Fengzhu" :op "Xu"))
Span 25-26:  game => game
Span 7-9:  Hao Chang => (person :name (name :op "Hao" :op "Chang"))
Span 24-25:  middle => middle
Span 12-13:  outstanding => outstanding
Span 1-2:  performance => perform-01
Span 21-22:  team => team
Span 0-14:  The performance of our young competitor , Hao Chang , was especially outstanding today => (date-entity :time today)
Span 4-5:  young => young

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 5-6:  competitor => compete-01
Oracle Span 15-16:  defeating => defeat-01
Oracle Span 11-12:  especially => especially
Oracle Span 16-18:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 25-26:  game => game
Oracle Span 7-9:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 20-21:  Korean => (country :name (name :op "Korea"))
Oracle Span 24-25:  middle => middle
Oracle Span 1-2:  performance => perform-01
Oracle Span 21-22:  team => team
Oracle Span 13-14:  today => today
Oracle Span 4-5:  young => young

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	performance	_	NN	NN	_	13	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	our	_	PRP$	PRP$	_	6	poss	_	_
5	young	_	JJ	JJ	_	6	amod	_	_
6	competitor	_	NN	NN	_	3	pobj	_	_
7	,	_	,	,	_	6	punct	_	_
8	Hao	_	NNP	NNP	_	9	nn	_	_
9	Chang	_	NNP	NNP	_	6	appos	_	_
10	,	_	,	,	_	6	punct	_	_
11	was	_	VBD	VBD	_	13	cop	_	_
12	especially	_	RB	RB	_	13	advmod	_	_
13	outstanding	_	JJ	JJ	_	0	root	_	_
14	today	_	NN	NN	_	13	tmod	_	_
15	,	_	,	,	_	13	punct	_	_
16	defeating	_	VBG	VBG	_	13	vmod	_	_
17	Fengzhu	_	NNP	NNP	_	18	nn	_	_
18	Xu	_	NNP	NNP	_	16	dobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	22	det	_	_
21	Korean	_	JJ	JJ	_	22	amod	_	_
22	team	_	NN	NN	_	19	pobj	_	_
23	in	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	26	det	_	_
25	middle	_	JJ	JJ	_	26	amod	_	_
26	game	_	NN	NN	_	23	pobj	_	_
27	.	_	.	.	_	13	punct	_	_

Oracle:
(c2 / compete-01, ARG0, p3 / person)
(c3 / country, name, n3 / name)
(d / defeat-01, ARG0, p3 / person)
(d / defeat-01, ARG1, p5 / person)
(d / defeat-01, time, g / game)
(g / game, mod, m / middle)
(n / name, op, "Chang")
(n / name, op, "Hao")
(n2 / name, op, "Fengzhu")
(n2 / name, op, "Xu")
(n3 / name, op, "Korea")
(p3 / person, mod, y / young)
(p3 / person, name, n / name)
(p4 / perform-01, ARG0, p3 / person)
(p5 / person, name, n2 / name)
(t / team, mod, c3 / country)
(t / team, part, p5 / person)

Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),especially,especially,false), Span(7,9,List(4, 3, 2, 1),Hao Chang,(person :name (name :op "Hao" :op "Chang")),false), Span(0,14,List(6, 5),The performance of our young competitor , Hao Chang , was especially outstanding today,(date-entity :time today),false), Span(24,25,List(7),middle,middle,false), Span(5,6,List(9, 8),competitor,(company :ARG0-of compete-01),false), Span(4,5,List(10),young,young,false), Span(1,2,List(11),performance,perform-01,false), Span(15,16,List(12),defeating,defeat-01,false), Span(21,22,List(13),team,team,false), Span(25,26,List(14),game,game,false), Span(16,18,List(18, 17, 16, 15),Fengzhu Xu,(person :name (name :op "Fengzhu" :op "Xu")),false), Span(12,13,List(19),outstanding,outstanding,false)),Map(2 -> name, 5 -> date-entity, 12 -> defeat-01, 15 -> person, 8 -> company, 18 -> "Xu", 7 -> middle, 17 -> "Fengzhu", 1 -> person, 4 -> "Chang", 11 -> perform-01, 14 -> game, 6 -> today, 0 -> especially, 9 -> compete-01, 16 -> name, 19 -> outstanding, 3 -> "Hao", 10 -> young, 13 -> team),Map(e -> especially, n -> name, t -> today, p2 -> perform-01, d -> date-entity, m -> middle, p -> person, y -> young, g -> game, d2 -> defeat-01, t2 -> team, c -> company, o -> outstanding, p3 -> person, n2 -> name, c2 -> compete-01))),[Ljava.lang.String;@47a53590,Annotation([Ljava.lang.String;@3fea20db,[Ljava.lang.String;@617e93ed,[Ljava.lang.String;@2e78d987),Annotation([Ljava.lang.String;@409f706d,[Ljava.lang.String;@2e9d6c5d,[Ledu.cmu.lti.nlp.amr.Dependency;@3be96398),Annotation([Ljava.lang.String;@53353183,[Ljava.lang.String;@68923f90,[Ljava.lang.String;@2d28595b),Annotation([Ljava.lang.String;@5dad1ac5,[Ljava.lang.String;@27ee91da,[Ledu.cmu.lti.nlp.amr.Entity;@5ef94408))
AMR:
(c / company, location, p / person)
(c / company, mod, y / young)
(c2 / compete-01, ARG0, c / company)
(c2 / compete-01, ARG1, m / middle)
(d / date-entity, time, t / today)
(d2 / defeat-01, ARG0, p2 / perform-01)
(d2 / defeat-01, ARG1, p3 / person)
(d2 / defeat-01, ARG2, t2 / team)
(g / game, mod, m / middle)
(n / name, op, "Chang")
(n / name, op, "Hao")
(n2 / name, op, "Fengzhu")
(n2 / name, op, "Xu")
(o / outstanding, degree, e / especially)
(o / outstanding, domain, p2 / perform-01)
(p / person, name, n / name)
(p2 / perform-01, ARG0, c / company)
(p2 / perform-01, ARG1, d / date-entity)
(p3 / person, name, n2 / name)

Decoded in 959,520 microseconds
Sentence: Fengzhu Xu has won many championships in international competitions before .

Oracle Span 1:  before => before
Oracle Span 2:  championships => championship
Oracle Span 3:  competitions => compete-01
Oracle Span 4:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 5:  international => international
Oracle Span 6:  many => many
Oracle Span 7:  won => win-01
NER Entity: (person :name (name :op "Fengzhu" :op "Xu"))
Spans:
Span 9-10:  before => before
Span 5-6:  championships => championship
Span 8-9:  competitions => competition
Span 0-2:  Fengzhu Xu => (person :name (name :op "Fengzhu" :op "Xu"))
Span 7-8:  international => international
Span 4-5:  many => many
Span 3-4:  won => win-01

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 9-10:  before => before
Oracle Span 5-6:  championships => championship
Oracle Span 8-9:  competitions => compete-01
Oracle Span 0-2:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 7-8:  international => international
Oracle Span 4-5:  many => many
Oracle Span 3-4:  won => win-01

Dependencies:
1	Fengzhu	_	NNP	NNP	_	2	nn	_	_
2	Xu	_	NNP	NNP	_	4	nsubj	_	_
3	has	_	VBZ	VBZ	_	4	aux	_	_
4	won	_	VBN	VBN	_	0	root	_	_
5	many	_	JJ	JJ	_	6	amod	_	_
6	championships	_	NNS	NNS	_	4	dobj	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	international	_	JJ	JJ	_	9	amod	_	_
9	competitions	_	NNS	NNS	_	7	pobj	_	_
10	before	_	RB	RB	_	4	advmod	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(c / championship, quant, m / many)
(c2 / compete-01, mod, i / international)
(c2 / compete-01, part, w / win-01)
(n / name, op, "Fengzhu")
(n / name, op, "Xu")
(p2 / person, name, n / name)
(w / win-01, ARG0, p2 / person)
(w / win-01, ARG1, c / championship)
(w / win-01, time, b / before)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),international,international,false), Span(4,5,List(1),many,many,false), Span(8,9,List(2),competitions,competition,false), Span(9,10,List(3),before,before,false), Span(0,2,List(7, 6, 5, 4),Fengzhu Xu,(person :name (name :op "Fengzhu" :op "Xu")),false), Span(5,6,List(8),championships,championship,false), Span(3,4,List(9),won,win-01,false)),Map(2 -> competition, 5 -> name, 8 -> championship, 7 -> "Xu", 1 -> many, 4 -> person, 6 -> "Fengzhu", 9 -> win-01, 0 -> international, 3 -> before),Map(w -> win-01, n -> name, b -> before, m -> many, p -> person, i -> international, c -> competition, c2 -> championship))),[Ljava.lang.String;@588c741c,Annotation([Ljava.lang.String;@3d6f89e3,[Ljava.lang.String;@2716c12d,[Ljava.lang.String;@5f82b63c),Annotation([Ljava.lang.String;@64950544,[Ljava.lang.String;@2574b8a4,[Ledu.cmu.lti.nlp.amr.Dependency;@34fa1a8e),Annotation([Ljava.lang.String;@7e83797b,[Ljava.lang.String;@32f0ecca,[Ljava.lang.String;@3241d3a8),Annotation([Ljava.lang.String;@568b8104,[Ljava.lang.String;@33a6620f,[Ledu.cmu.lti.nlp.amr.Entity;@6054e0d))
AMR:
(b / before, calendar, c2 / championship)
(c / competition, mod, i / international)
(c2 / championship, quant, m / many)
(n / name, op, "Fengzhu")
(n / name, op, "Xu")
(p / person, name, n / name)
(w / win-01, ARG0, p / person)
(w / win-01, ARG1, c2 / championship)
(w / win-01, ARG2, c / competition)

Decoded in 2,559,734 microseconds
Sentence: He had achieved complete victory in nine games with Chinese Go players before .

Oracle Span 1:  before => before
Oracle Span 2:  Chinese => (country :name (name :op "China"))
Oracle Span 3:  complete => complete
Oracle Span 4:  games => game
Oracle Span 5:  Go => (game :name (name :op "Go"))
Oracle Span 6:  He => he
Oracle Span 7:  nine => 9
Oracle Span 8:  players => play-01
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 2-3:  achieved => achieve-01
Span 12-13:  before => before
Span 9-10:  Chinese => (country :name (name :op "China"))
Span 3-4:  complete => complete
Span 7-8:  games => game
Span 10-11:  Go => (thing :ARG1-of go-00)
Span 0-1:  He => 1
Span 0-1:  He => he
Span 11-12:  players => player
Span 4-5:  victory => vitrify-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 12-13:  before => before
Oracle Span 9-10:  Chinese => (country :name (name :op "China"))
Oracle Span 3-4:  complete => complete
Oracle Span 7-8:  games => game
Oracle Span 10-11:  Go => (game :name (name :op "Go"))
Oracle Span 0-1:  He => he
Oracle Span 6-7:  nine => 9
Oracle Span 11-12:  players => play-01

Dependencies:
1	He	_	PRP	PRP	_	3	nsubj	_	_
2	had	_	VBD	VBD	_	3	aux	_	_
3	achieved	_	VBN	VBN	_	0	root	_	_
4	complete	_	JJ	JJ	_	5	amod	_	_
5	victory	_	NN	NN	_	3	dobj	_	_
6	in	_	IN	IN	_	3	prep	_	_
7	nine	_	CD	CD	_	8	num	_	_
8	games	_	NNS	NNS	_	6	pobj	_	_
9	with	_	IN	IN	_	3	prep	_	_
10	Chinese	_	JJ	JJ	_	12	amod	_	_
11	Go	_	NNP	NNP	_	12	nn	_	_
12	players	_	NNS	NNS	_	9	pobj	_	_
13	before	_	RB	RB	_	3	advmod	_	_
14	.	_	.	.	_	3	punct	_	_

Oracle:
(c4 / country, name, n / name)
(g / game, quant, 9 / 9)
(g2 / game, name, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Go")
(p / play-01, ARG1, g / game)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),He,1,false), Span(0,1,List(1),He,he,false), Span(2,3,List(2),achieved,achieve-01,false), Span(9,10,List(5, 4, 3),Chinese,(country :name (name :op "China")),false), Span(11,12,List(6),players,player,false), Span(10,11,List(8, 7),Go,(thing :ARG1-of go-00),false), Span(12,13,List(9),before,before,false), Span(4,5,List(10),victory,vitrify-01,false), Span(7,8,List(11),games,game,false), Span(3,4,List(12),complete,complete,false)),Map(2 -> achieve-01, 5 -> "China", 12 -> complete, 8 -> go-00, 7 -> thing, 1 -> he, 4 -> name, 11 -> game, 6 -> player, 0 -> 1, 9 -> before, 3 -> country, 10 -> vitrify-01),Map(n -> name, h -> he, b -> before, t -> thing, v -> vitrify-01, g2 -> game, g -> go-00, p -> player, 1 -> 1, a -> achieve-01, c -> country, c2 -> complete))),[Ljava.lang.String;@4ac46c70,Annotation([Ljava.lang.String;@5add6bd2,[Ljava.lang.String;@3cd13028,[Ljava.lang.String;@42bee0fd),Annotation([Ljava.lang.String;@2b70a336,[Ljava.lang.String;@1a42de71,[Ledu.cmu.lti.nlp.amr.Dependency;@2fa7ed61),Annotation([Ljava.lang.String;@1aab5960,[Ljava.lang.String;@346c3010,[Ljava.lang.String;@3851d1ba),Annotation([Ljava.lang.String;@288def34,[Ljava.lang.String;@682dc31c,[Ledu.cmu.lti.nlp.amr.Entity;@3d9492b9))
AMR:
(a / achieve-01, ARG0, h / he)
(a / achieve-01, ARG1, v / vitrify-01)
(b / before, domain, h / he)
(c / country, name, n / name)
(g / go-00, ARG0, c / country)
(g / go-00, ARG1, t / thing)
(g2 / game, mod, t / thing)
(n / name, op, "China")
(p / player, mod, t / thing)
(v / vitrify-01, ARG0, 1 / 1)
(v / vitrify-01, ARG1, g2 / game)
(v / vitrify-01, mod, c2 / complete)

Decoded in 3,385,326 microseconds
Sentence: The Go teams from China and Korea will shift to Seoul on September 1st , and will hold the second competition in the Le Tian Hotel on the 2nd .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  competition => compete-01
Oracle Span 5:  Go => (game :name (name :op "Go"))
Oracle Span 6:  Korea => (country :name (name :op "Korea"))
Oracle Span 7:  Le Tian Hotel => (hotel :name (name :op "Hotel" :op "Tian" :op "Le"))
Oracle Span 8:  Seoul => (city :name (name :op "Seoul"))
Oracle Span 9:  September => 9
Oracle Span 10:  shift => shift-01
Oracle Span 11:  teams => team
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Korea"))
NER Entity: (country :name (name :op "Seoul"))
NER Entity: (organization :name (name :op "Le" :op "Tian" :op "Hotel"))
Spans:
Span 5-6:  and => and
Span 15-16:  and => and
Span 4-5:  China => (country :name (name :op "China"))
Span 20-21:  competition => complement-01
Span 1-2:  Go => (thing :ARG1-of go-00)
Span 17-18:  hold => hold-01
Span 25-26:  Hotel => hotel
Span 6-7:  Korea => (country :name (name :op "Korea"))
Span 10-11:  Seoul => (city :name (name :op "Seoul"))
Span 8-9:  shift => shift-01
Span 2-3:  teams => team
Span 0-13:  The Go teams from China and Korea will shift to Seoul on September => (date-entity :month 9 :day 1)
Span 0-20:  The Go teams from China and Korea will shift to Seoul on September 1st , and will hold the second => (ordinal-entity :value 1)
Span 0-29:  The Go teams from China and Korea will shift to Seoul on September 1st , and will hold the second competition in the Le Tian Hotel on the 2nd => (ordinal-entity :value 58.0)

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Oracle Span 5-6:  and => and
Oracle Span 15-16:  and => and
Oracle Span 4-5:  China => (country :name (name :op "China"))
Oracle Span 20-21:  competition => compete-01
Oracle Span 1-2:  Go => (game :name (name :op "Go"))
Oracle Span 6-7:  Korea => (country :name (name :op "Korea"))
Oracle Span 23-26:  Le Tian Hotel => (hotel :name (name :op "Hotel" :op "Tian" :op "Le"))
Oracle Span 10-11:  Seoul => (city :name (name :op "Seoul"))
Oracle Span 12-13:  September => 9
Oracle Span 8-9:  shift => shift-01
Oracle Span 2-3:  teams => team

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Go	_	NNP	NNP	_	3	nn	_	_
3	teams	_	NNS	NNS	_	9	nsubj	_	_
4	from	_	IN	IN	_	3	prep	_	_
5	China	_	NNP	NNP	_	4	pobj	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	Korea	_	NNP	NNP	_	5	conj	_	_
8	will	_	MD	MD	_	9	aux	_	_
9	shift	_	VB	VB	_	0	root	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	Seoul	_	NNP	NNP	_	10	pobj	_	_
12	on	_	IN	IN	_	9	prep	_	_
13	September	_	NNP	NNP	_	12	pobj	_	_
14	1st	_	CD	CD	_	13	num	_	_
15	,	_	,	,	_	9	punct	_	_
16	and	_	CC	CC	_	9	cc	_	_
17	will	_	MD	MD	_	18	aux	_	_
18	hold	_	VB	VB	_	9	conj	_	_
19	the	_	DT	DT	_	21	det	_	_
20	second	_	JJ	JJ	_	21	amod	_	_
21	competition	_	NN	NN	_	18	dobj	_	_
22	in	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	26	det	_	_
24	Le	_	NNP	NNP	_	26	nn	_	_
25	Tian	_	NNP	NNP	_	26	nn	_	_
26	Hotel	_	NNP	NNP	_	22	pobj	_	_
27	on	_	IN	IN	_	18	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	2nd	_	NNS	NNS	_	27	pobj	_	_
30	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, c / compete-01)
(a / and, op, s2 / shift-01)
(a2 / and, op, t2 / team)
(c / compete-01, ARG1, t2 / team)
(c / compete-01, location, h2 / hotel)
(c5 / country, name, n2 / name)
(c6 / country, name, n / name)
(c7 / city, name, n3 / name)
(g2 / game, name, n5 / name)
(h2 / hotel, name, n4 / name)
(n / name, op, "Korea")
(n2 / name, op, "China")
(n3 / name, op, "Seoul")
(n4 / name, op, "Hotel")
(n4 / name, op, "Le")
(n4 / name, op, "Tian")
(n5 / name, op, "Go")
(s2 / shift-01, ARG1, a2 / and)
(s2 / shift-01, ARG2, c7 / city)
(t2 / team, mod, c6 / country)
(t2 / team, mod, g2 / game)

Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),teams,team,false), Span(0,13,List(3, 2, 1),The Go teams from China and Korea will shift to Seoul on September,(date-entity :month 9 :day 1),false), Span(1,2,List(5, 4),Go,(thing :ARG1-of go-00),false), Span(10,11,List(8, 7, 6),Seoul,(city :name (name :op "Seoul")),false), Span(17,18,List(9),hold,hold-01,false), Span(5,6,List(10),and,and,false), Span(8,9,List(11),shift,shift-01,false), Span(15,16,List(12),and,and,false), Span(0,29,List(14, 13),The Go teams from China and Korea will shift to Seoul on September 1st , and will hold the second competition in the Le Tian Hotel on the 2nd,(ordinal-entity :value 58.0),false), Span(20,21,List(15),competition,complement-01,false), Span(6,7,List(18, 17, 16),Korea,(country :name (name :op "Korea")),false), Span(25,26,List(19),Hotel,hotel,false), Span(4,5,List(22, 21, 20),China,(country :name (name :op "China")),false), Span(0,20,List(24, 23),The Go teams from China and Korea will shift to Seoul on September 1st , and will hold the second,(ordinal-entity :value 1),false)),Map(2 -> 9, 5 -> go-00, 12 -> and, 8 -> "Seoul", 15 -> complement-01, 21 -> name, 18 -> "Korea", 24 -> 1, 7 -> name, 1 -> date-entity, 17 -> name, 23 -> ordinal-entity, 4 -> thing, 11 -> shift-01, 14 -> 58.0, 20 -> country, 6 -> city, 9 -> hold-01, 0 -> team, 22 -> "China", 16 -> country, 19 -> hotel, 10 -> and, 3 -> 1, 13 -> ordinal-entity),Map(n -> name, h -> hold-01, h2 -> hotel, 5 -> 58.0, 12 -> 1, t -> team, c4 -> country, s -> shift-01, d -> date-entity, 1 -> 1, g -> go-00, n3 -> name, c3 -> country, a -> and, o2 -> ordinal-entity, t2 -> thing, a2 -> and, c -> city, 9 -> 9, o -> ordinal-entity, n2 -> name, c2 -> complement-01))),[Ljava.lang.String;@26c97193,Annotation([Ljava.lang.String;@56817dc9,[Ljava.lang.String;@26dfb0a9,[Ljava.lang.String;@7ea577b3),Annotation([Ljava.lang.String;@138dc41d,[Ljava.lang.String;@4e3f8c90,[Ledu.cmu.lti.nlp.amr.Dependency;@153e2706),Annotation([Ljava.lang.String;@40f3d2fd,[Ljava.lang.String;@3da34bd2,[Ljava.lang.String;@f4a1bfa),Annotation([Ljava.lang.String;@6ba81b02,[Ljava.lang.String;@359248b0,[Ledu.cmu.lti.nlp.amr.Entity;@1248680b))
AMR:
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(a / and, op, s / shift-01)
(a2 / and, op, d / date-entity)
(a2 / and, op, h / hold-01)
(a2 / and, op, s / shift-01)
(c / city, name, n / name)
(c2 / complement-01, ARG1, h2 / hotel)
(c2 / complement-01, ARG6, o2 / ordinal-entity)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 9 / 9)
(g / go-00, ARG1, t2 / thing)
(h / hold-01, ARG0, t / team)
(h / hold-01, ARG1, c2 / complement-01)
(n / name, op, "Seoul")
(n2 / name, op, "Korea")
(n3 / name, op, "China")
(o / ordinal-entity, value, 5 / 58.0)
(o2 / ordinal-entity, value, 12 / 1)
(s / shift-01, ARG1, o / ordinal-entity)
(s / shift-01, ARG2, c / city)
(t / team, mod, t2 / thing)

Decoded in 7,552,120 microseconds
Sentence: According to the rules discussed and agreed upon by both sides , if the two teams draw with 7 : 7 , then the final result will be determined by the result of the competition between Weiping Nie of the Chinese team and Xunxuan Cao of the Korean team .

Oracle Span 1:  7 => 7
Oracle Span 2:  7 => 7
Oracle Span 3:  agreed => agree-01
Oracle Span 4:  both => both
Oracle Span 5:  Chinese => (country :name (name :op "China"))
Oracle Span 6:  competition => compete-01
Oracle Span 7:  determined => determine-01
Oracle Span 8:  discussed => discuss-01
Oracle Span 9:  draw => draw-00
Oracle Span 10:  final => final
Oracle Span 11:  Korean => (country :name (name :op "Korea"))
Oracle Span 12:  result => result-01
Oracle Span 13:  result => (thing :ARG2-of result-01)
Oracle Span 14:  rules => rule
Oracle Span 15:  sides => side
Oracle Span 16:  team => team
Oracle Span 17:  teams => team
Oracle Span 18:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 19:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))
NER Entity: (person :name (name :op "Xunxuan" :op "Cao"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 0-1:  According => accord-01
Span 0-1:  According => 1
Span 6-7:  agreed => agree-01
Span 5-6:  and => and
Span 42-43:  and => and
Span 9-10:  both => both
Span 34-35:  competition => complement-01
Span 28-29:  determined => determine-01
Span 4-5:  discussed => discuss-01
Span 16-17:  draw => draw-02
Span 24-25:  final => final
Span 31-32:  result => result-01
Span 25-26:  result => result-01
Span 3-4:  rules => rule
Span 10-11:  sides => side
Span 41-42:  team => team
Span 48-49:  team => team
Span 15-16:  teams => team
Span 36-38:  Weiping Nie => (person :name (name :op "Weiping" :op "Nie"))
Span 43-45:  Xunxuan Cao => (person :name (name :op "Xunxuan" :op "Cao"))

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 18-19:  7 => 7
Oracle Span 20-21:  7 => 7
Oracle Span 6-7:  agreed => agree-01
Oracle Span 9-10:  both => both
Oracle Span 40-41:  Chinese => (country :name (name :op "China"))
Oracle Span 34-35:  competition => compete-01
Oracle Span 28-29:  determined => determine-01
Oracle Span 4-5:  discussed => discuss-01
Oracle Span 16-17:  draw => draw-00
Oracle Span 24-25:  final => final
Oracle Span 47-48:  Korean => (country :name (name :op "Korea"))
Oracle Span 25-26:  result => result-01
Oracle Span 31-32:  result => (thing :ARG2-of result-01)
Oracle Span 3-4:  rules => rule
Oracle Span 10-11:  sides => side
Oracle Span 41-42:  team => team
Oracle Span 15-16:  teams => team
Oracle Span 36-38:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 43-45:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))

Dependencies:
1	According	_	VBG	VBG	_	29	prep	_	_
2	to	_	TO	TO	_	1	pcomp	_	_
3	the	_	DT	DT	_	4	det	_	_
4	rules	_	NNS	NNS	_	2	pobj	_	_
5	discussed	_	VBN	VBN	_	4	vmod	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	agreed	_	VBN	VBN	_	5	conj	_	_
8	upon	_	IN	IN	_	9	dep	_	_
9	by	_	IN	IN	_	5	prep	_	_
10	both	_	DT	DT	_	11	det	_	_
11	sides	_	NNS	NNS	_	9	pobj	_	_
12	,	_	,	,	_	11	punct	_	_
13	if	_	IN	IN	_	17	mark	_	_
14	the	_	DT	DT	_	16	det	_	_
15	two	_	CD	CD	_	16	num	_	_
16	teams	_	NNS	NNS	_	17	nsubj	_	_
17	draw	_	VBP	VBP	_	11	rcmod	_	_
18	with	_	IN	IN	_	17	prep	_	_
19	7	_	CD	CD	_	18	pobj	_	_
20	:	_	:	:	_	5	punct	_	_
21	7	_	CD	CD	_	5	dobj	_	_
22	,	_	,	,	_	29	punct	_	_
23	then	_	RB	RB	_	26	advmod	_	_
24	the	_	DT	DT	_	26	det	_	_
25	final	_	JJ	JJ	_	26	amod	_	_
26	result	_	NN	NN	_	29	nsubjpass	_	_
27	will	_	MD	MD	_	29	aux	_	_
28	be	_	VB	VB	_	29	auxpass	_	_
29	determined	_	VBN	VBN	_	0	root	_	_
30	by	_	IN	IN	_	29	prep	_	_
31	the	_	DT	DT	_	32	det	_	_
32	result	_	NN	NN	_	30	pobj	_	_
33	of	_	IN	IN	_	32	prep	_	_
34	the	_	DT	DT	_	35	det	_	_
35	competition	_	NN	NN	_	33	pobj	_	_
36	between	_	IN	IN	_	35	prep	_	_
37	Weiping	_	NNP	NNP	_	38	nn	_	_
38	Nie	_	NNP	NNP	_	36	pobj	_	_
39	of	_	IN	IN	_	38	prep	_	_
40	the	_	DT	DT	_	42	det	_	_
41	Chinese	_	JJ	JJ	_	42	amod	_	_
42	team	_	NN	NN	_	39	pobj	_	_
43	and	_	CC	CC	_	38	cc	_	_
44	Xunxuan	_	NNP	NNP	_	45	nn	_	_
45	Cao	_	NNP	NNP	_	38	conj	_	_
46	of	_	IN	IN	_	45	prep	_	_
47	the	_	DT	DT	_	49	det	_	_
48	Korean	_	JJ	JJ	_	49	amod	_	_
49	team	_	NN	NN	_	46	pobj	_	_
50	.	_	.	.	_	29	punct	_	_

Oracle:
(a / agree-01, ARG0, s2 / side)
(a / agree-01, ARG1, r / rule)
(c4 / compete-01, ARG0, p3 / person)
(c4 / compete-01, ARG1, p4 / person)
(c5 / country, name, n2 / name)
(c6 / country, name, n4 / name)
(d / discuss-01, ARG0, s2 / side)
(d / discuss-01, ARG1, r / rule)
(d2 / determine-01, ARG0, t4 / thing)
(d2 / determine-01, ARG1, r2 / result-01)
(d2 / determine-01, condition, d3 / draw-00)
(d3 / draw-00, ARG0, t / team)
(d3 / draw-00, ARG1, t2 / team)
(n / name, op, "Nie")
(n / name, op, "Weiping")
(n2 / name, op, "China")
(n3 / name, op, "Cao")
(n3 / name, op, "XunXuan")
(n4 / name, op, "Korea")
(p3 / person, name, n / name)
(p4 / person, name, n3 / name)
(r2 / result-01, mod, f / final)
(r3 / result-01, ARG1, c4 / compete-01)
(r3 / result-01, ARG2, t4 / thing)
(s2 / side, mod, b / both)
(t / team, mod, c5 / country)
(t / team, part, p3 / person)
(t2 / team, mod, c6 / country)
(t2 / team, part, p4 / person)

Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),result,result-01,false), Span(24,25,List(1),final,final,false), Span(36,38,List(5, 4, 3, 2),Weiping Nie,(person :name (name :op "Weiping" :op "Nie")),false), Span(28,29,List(6),determined,determine-01,false), Span(5,6,List(7),and,and,false), Span(41,42,List(8),team,team,false), Span(42,43,List(9),and,and,false), Span(0,1,List(10),According,accord-01,false), Span(6,7,List(11),agreed,agree-01,false), Span(10,11,List(12),sides,side,false), Span(9,10,List(13),both,both,false), Span(3,4,List(14),rules,rule,false), Span(25,26,List(15),result,result-01,false), Span(43,45,List(19, 18, 17, 16),Xunxuan Cao,(person :name (name :op "Xunxuan" :op "Cao")),false), Span(0,1,List(20),According,1,false), Span(15,16,List(21),teams,team,false), Span(16,17,List(22),draw,draw-02,false), Span(48,49,List(23),team,team,false), Span(34,35,List(24),competition,complement-01,false), Span(4,5,List(25),discussed,discuss-01,false)),Map(2 -> person, 5 -> "Nie", 12 -> side, 8 -> team, 15 -> result-01, 21 -> team, 18 -> "Xunxuan", 24 -> complement-01, 7 -> and, 1 -> final, 17 -> name, 23 -> team, 4 -> "Weiping", 11 -> agree-01, 14 -> rule, 20 -> 1, 6 -> determine-01, 9 -> and, 0 -> result-01, 22 -> draw-02, 16 -> person, 19 -> "Cao", 10 -> accord-01, 3 -> name, 25 -> discuss-01, 13 -> both),Map(n -> name, r3 -> result-01, t -> team, b -> both, d3 -> discuss-01, p2 -> person, a3 -> accord-01, s -> side, d -> determine-01, t3 -> team, 1 -> 1, p -> person, r2 -> rule, a -> and, d2 -> draw-02, t2 -> team, r -> result-01, a2 -> and, c -> complement-01, f -> final, n2 -> name, a4 -> agree-01))),[Ljava.lang.String;@2262ec7b,Annotation([Ljava.lang.String;@3df81ccc,[Ljava.lang.String;@2c3427e,[Ljava.lang.String;@34d083cf),Annotation([Ljava.lang.String;@164b01a,[Ljava.lang.String;@7c87c286,[Ledu.cmu.lti.nlp.amr.Dependency;@644fafda),Annotation([Ljava.lang.String;@54319667,[Ljava.lang.String;@7071089b,[Ljava.lang.String;@32a067e1),Annotation([Ljava.lang.String;@2b882f10,[Ljava.lang.String;@735206a8,[Ledu.cmu.lti.nlp.amr.Entity;@b9fed89))
AMR:
(a / and, op, a4 / agree-01)
(a / and, op, d3 / discuss-01)
(a2 / and, op, p / person)
(a2 / and, op, p2 / person)
(a2 / and, op, t / team)
(a3 / accord-01, ARG1, 1 / 1)
(a3 / accord-01, purpose, d3 / discuss-01)
(a4 / agree-01, ARG1, r2 / rule)
(c / complement-01, ARG1, p / person)
(d / determine-01, ARG1, r3 / result-01)
(d / determine-01, ARG2, r / result-01)
(d2 / draw-02, ARG0, t2 / team)
(d2 / draw-02, ARG1, s / side)
(d3 / discuss-01, ARG0, s / side)
(d3 / discuss-01, ARG1, a2 / and)
(n / name, op, "Nie")
(n / name, op, "Weiping")
(n2 / name, op, "Cao")
(n2 / name, op, "Xunxuan")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(r / result-01, ARG1, c / complement-01)
(r3 / result-01, ARG1, t3 / team)
(r3 / result-01, mod, f / final)
(s / side, mod, b / both)

Decoded in 8,954,386 microseconds
Sentence: The prize money of the competition this time is 100,000 US dollars , the team that wins will get 70,000 US dollars , while the team that loses will get 30,000 US dollars .

Oracle Span 1:  competition => compete-01
Oracle Span 2:  dollars => (monetary-quantity :unit dollar)
Oracle Span 3:  dollars => (monetary-quantity :unit dollar)
Oracle Span 4:  dollars => (monetary-quantity :unit dollar)
Oracle Span 5:  get => get-01
Oracle Span 6:  get => get-01
Oracle Span 7:  loses => lose-03
Oracle Span 8:  money => money
Oracle Span 9:  prize => prize
Oracle Span 10:  team => team
Oracle Span 11:  team => team
Oracle Span 12:  this => this
Oracle Span 13:  time => time
Oracle Span 14:  US => (country :name (name :op "States" :op "United"))
Oracle Span 15:  wins => win-01
Spans:
Span 5-6:  competition => complement-01
Span 29-30:  get => get-01
Span 18-19:  get => get-01
Span 2-3:  money => money
Span 1-2:  prize => prize-01
Span 14-15:  team => team
Span 25-26:  team => team
Span 0-1:  The => 1
Span 6-7:  this => this
Span 7-8:  time => time
Span 23-24:  while => will-01

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 5-6:  competition => compete-01
Oracle Span 11-12:  dollars => (monetary-quantity :unit dollar)
Oracle Span 21-22:  dollars => (monetary-quantity :unit dollar)
Oracle Span 32-33:  dollars => (monetary-quantity :unit dollar)
Oracle Span 18-19:  get => get-01
Oracle Span 29-30:  get => get-01
Oracle Span 27-28:  loses => lose-03
Oracle Span 2-3:  money => money
Oracle Span 1-2:  prize => prize
Oracle Span 14-15:  team => team
Oracle Span 25-26:  team => team
Oracle Span 6-7:  this => this
Oracle Span 7-8:  time => time
Oracle Span 10-11:  US => (country :name (name :op "States" :op "United"))
Oracle Span 16-17:  wins => win-01

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	prize	_	NN	NN	_	3	nn	_	_
3	money	_	NN	NN	_	12	nsubj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	competition	_	NN	NN	_	4	pobj	_	_
7	this	_	DT	DT	_	8	det	_	_
8	time	_	NN	NN	_	12	tmod	_	_
9	is	_	VBZ	VBZ	_	12	cop	_	_
10	100,000	_	CD	CD	_	12	num	_	_
11	US	_	NNP	NNP	_	12	nn	_	_
12	dollars	_	NNS	NNS	_	0	root	_	_
13	,	_	,	,	_	12	punct	_	_
14	the	_	DT	DT	_	15	det	_	_
15	team	_	NN	NN	_	12	appos	_	_
16	that	_	IN	IN	_	19	mark	_	_
17	wins	_	NNS	NNS	_	19	nsubj	_	_
18	will	_	MD	MD	_	19	aux	_	_
19	get	_	VB	VB	_	15	dep	_	_
20	70,000	_	CD	CD	_	22	num	_	_
21	US	_	NNP	NNP	_	22	nn	_	_
22	dollars	_	NNS	NNS	_	19	dobj	_	_
23	,	_	,	,	_	12	punct	_	_
24	while	_	IN	IN	_	30	mark	_	_
25	the	_	DT	DT	_	26	det	_	_
26	team	_	NN	NN	_	30	nsubj	_	_
27	that	_	WDT	WDT	_	28	nsubj	_	_
28	loses	_	VBZ	VBZ	_	26	rcmod	_	_
29	will	_	MD	MD	_	30	aux	_	_
30	get	_	VB	VB	_	12	advcl	_	_
31	30,000	_	CD	CD	_	33	num	_	_
32	US	_	NNP	NNP	_	33	nn	_	_
33	dollars	_	NNS	NNS	_	30	dobj	_	_
34	.	_	.	.	_	12	punct	_	_

Oracle:
(c4 / country, name, n4 / name)
(d / dollar, mod, c4 / country)
(d2 / dollar, mod, c4 / country)
(d4 / dollar, mod, c4 / country)
(g / get-01, ARG0, t3 / team)
(g / get-01, ARG1, m6 / monetary-quantity)
(g2 / get-01, ARG0, t4 / team)
(g2 / get-01, ARG1, m7 / monetary-quantity)
(l / lose-03, ARG0, t4 / team)
(m4 / monetary-quantity, domain, m5 / money)
(m4 / monetary-quantity, time, t / time)
(m4 / monetary-quantity, unit, d4 / dollar)
(m5 / money, mod, p / prize)
(m5 / money, poss, c / compete-01)
(m6 / monetary-quantity, unit, d / dollar)
(m7 / monetary-quantity, unit, d2 / dollar)
(n4 / name, op, "States")
(n4 / name, op, "United")
(t / time, mod, t2 / this)
(w / win-01, ARG0, t3 / team)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),while,will-01,false), Span(29,30,List(1),get,get-01,false), Span(0,1,List(2),The,1,false), Span(7,8,List(3),time,time,false), Span(18,19,List(4),get,get-01,false), Span(1,2,List(5),prize,prize-01,false), Span(14,15,List(6),team,team,false), Span(5,6,List(7),competition,complement-01,false), Span(2,3,List(8),money,money,false), Span(25,26,List(9),team,team,false), Span(6,7,List(10),this,this,false)),Map(2 -> 1, 5 -> prize-01, 8 -> money, 7 -> complement-01, 1 -> get-01, 4 -> get-01, 6 -> team, 9 -> team, 0 -> will-01, 10 -> this, 3 -> time),Map(w -> will-01, t4 -> this, t -> time, m -> money, t3 -> team, p -> prize-01, g2 -> get-01, 1 -> 1, g -> get-01, t2 -> team, c -> complement-01))),[Ljava.lang.String;@6e25d2d4,Annotation([Ljava.lang.String;@6e18b27e,[Ljava.lang.String;@65dcdf14,[Ljava.lang.String;@35d3305b),Annotation([Ljava.lang.String;@7520f747,[Ljava.lang.String;@5e0030df,[Ledu.cmu.lti.nlp.amr.Dependency;@5da77074),Annotation([Ljava.lang.String;@715ac273,[Ljava.lang.String;@3b289d0,[Ljava.lang.String;@5cebd7b1),Annotation([Ljava.lang.String;@3aa92888,[Ljava.lang.String;@1dc73cf4,[Ledu.cmu.lti.nlp.amr.Entity;@a2cca95))
AMR:
(c / complement-01, ARG1, g / get-01)
(g / get-01, ARG0, t3 / team)
(g / get-01, ARG1, t2 / team)
(g2 / get-01, ARG1, t / time)
(g2 / get-01, ARG2, t2 / team)
(m / money, mod, 1 / 1)
(m / money, mod, p / prize-01)
(p / prize-01, ARG1, c / complement-01)
(t / time, mod, t4 / this)
(w / will-01, ARG1, g / get-01)

Decoded in 5,355,378 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@622851ae,Annotation([Ljava.lang.String;@6d3249d,[Ljava.lang.String;@699384a7,[Ljava.lang.String;@298d0c64),Annotation([Ljava.lang.String;@9089dda,[Ljava.lang.String;@16e0b7aa,[Ledu.cmu.lti.nlp.amr.Dependency;@63a3af6d),Annotation([Ljava.lang.String;@228c6151,[Ljava.lang.String;@6fa7de97,[Ljava.lang.String;@7c69692e),Annotation([Ljava.lang.String;@2cf6909,[Ljava.lang.String;@438816e8,[Ledu.cmu.lti.nlp.amr.Entity;@128a2b68))
AMR:


Decoded in 27,734 microseconds
Sentence: Xinhua News Agency , Rome , September 1st , by reporters Aiguo Yang and Changrui Huang

Oracle Span 1:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Oracle Span 2:  and => and
Oracle Span 3:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Oracle Span 4:  reporters => report-01
Oracle Span 5:  Rome => (city :name (name :op "Rome"))
Oracle Span 6:  September => 9
Oracle Span 7:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Aiguo" :op "Yang"))
NER Entity: (person :name (name :op "Changrui" :op "Huang"))
NER Entity: (country :name (name :op "Rome"))
Spans:
Span 11-13:  Aiguo Yang => (person :name (name :op "Aiguo" :op "Yang"))
Span 13-14:  and => and
Span 4-5:  Rome => (city :name (name :op "Rome"))
Span 0-3:  Xinhua News Agency => (publication :name (name :op "News" :op "Agency" :op "Xinhua"))
Span 0-7:  Xinhua News Agency , Rome , September => (date-entity :month 9 :day 1)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 11-13:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Oracle Span 13-14:  and => and
Oracle Span 14-16:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Oracle Span 10-11:  reporters => report-01
Oracle Span 4-5:  Rome => (city :name (name :op "Rome"))
Oracle Span 6-7:  September => 9
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Rome	_	NNP	NNP	_	3	appos	_	_
6	,	_	,	,	_	3	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporters	_	NNS	NNS	_	10	pobj	_	_
12	Aiguo	_	NNP	NNP	_	13	nn	_	_
13	Yang	_	NNP	NNP	_	3	dep	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	Changrui	_	NNP	NNP	_	16	nn	_	_
16	Huang	_	NNP	NNP	_	13	conj	_	_

Oracle:
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / person)
(c4 / city, name, n4 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Aiguo")
(n2 / name, op, "Yang")
(n3 / name, op, "Changrui")
(n3 / name, op, "Huang")
(n4 / name, op, "Rome")
(p / publication, name, n / name)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(r2 / report-01, ARG0, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(0,7,List(2, 1, 0),Xinhua News Agency , Rome , September,(date-entity :month 9 :day 1),false), Span(11,13,List(6, 5, 4, 3),Aiguo Yang,(person :name (name :op "Aiguo" :op "Yang")),false), Span(13,14,List(7),and,and,false), Span(4,5,List(10, 9, 8),Rome,(city :name (name :op "Rome")),false), Span(0,3,List(15, 14, 13, 12, 11),Xinhua News Agency,(publication :name (name :op "News" :op "Agency" :op "Xinhua")),false)),Map(2 -> 1, 5 -> "Aiguo", 12 -> name, 15 -> "Xinhua", 8 -> city, 7 -> and, 1 -> 9, 4 -> name, 11 -> publication, 14 -> "Agency", 6 -> "Yang", 0 -> date-entity, 9 -> name, 3 -> person, 10 -> "Rome", 13 -> "News"),Map(n -> name, p2 -> publication, d -> date-entity, p -> person, 1 -> 1, n3 -> name, a -> and, c -> city, 9 -> 9, n2 -> name))),[Ljava.lang.String;@5eea0287,Annotation([Ljava.lang.String;@d55395f,[Ljava.lang.String;@7662d973,[Ljava.lang.String;@391cdbd2),Annotation([Ljava.lang.String;@37ec184c,[Ljava.lang.String;@1357402f,[Ledu.cmu.lti.nlp.amr.Dependency;@739eaa77),Annotation([Ljava.lang.String;@2c832d9d,[Ljava.lang.String;@7bfa6e39,[Ljava.lang.String;@52051f51),Annotation([Ljava.lang.String;@544eca74,[Ljava.lang.String;@6114faa5,[Ledu.cmu.lti.nlp.amr.Entity;@49b7db18))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / publication)
(a / and, time, d / date-entity)
(c / city, name, n2 / name)
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 9 / 9)
(n / name, op, "Aiguo")
(n / name, op, "Yang")
(n2 / name, op, "Rome")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(p / person, name, n / name)
(p2 / publication, location, c / city)
(p2 / publication, name, n3 / name)

Decoded in 2,355,047 microseconds
Sentence: The 1 - meter diving board preliminaries of the Seventh World Swimming Championship were held here this morning .

Oracle Span 1:  1 => 1
Oracle Span 2:  board => board
Oracle Span 3:  diving => dive-01
Oracle Span 4:  held => hold-04
Oracle Span 5:  here => here
Oracle Span 6:  meter => (distance-quantity :unit meter)
Oracle Span 7:  morning => morning
Oracle Span 8:  preliminaries => preliminary
Oracle Span 9:  Seventh World Swimming Championship => (game :name (name :op "Championship" :op "Swimming" :op "World" :op "Seventh"))
Oracle Span 10:  this => this
NER Entity: (thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championship"))
Spans:
Span 5-6:  board => (organization :name (name :op "Board"))
Span 4-5:  diving => ding-01
Span 15-16:  here => here
Span 3-4:  meter => meter
Span 17-18:  morning => morning
Span 0-1:  The => 1
Span 0-10:  The 1 - meter diving board preliminaries of the Seventh => (ordinal-entity :value 1)
Span 16-17:  this => this

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 1-2:  1 => 1
Oracle Span 5-6:  board => board
Oracle Span 4-5:  diving => dive-01
Oracle Span 14-15:  held => hold-04
Oracle Span 15-16:  here => here
Oracle Span 3-4:  meter => (distance-quantity :unit meter)
Oracle Span 17-18:  morning => morning
Oracle Span 6-7:  preliminaries => preliminary
Oracle Span 9-13:  Seventh World Swimming Championship => (game :name (name :op "Championship" :op "Swimming" :op "World" :op "Seventh"))
Oracle Span 16-17:  this => this

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	1	_	CD	CD	_	15	dep	_	_
3	-	_	:	:	_	15	punct	_	_
4	meter	_	JJ	JJ	_	7	amod	_	_
5	diving	_	JJ	JJ	_	7	amod	_	_
6	board	_	NN	NN	_	7	nn	_	_
7	preliminaries	_	NNS	NNS	_	15	nsubjpass	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	13	det	_	_
10	Seventh	_	NNP	NNP	_	13	nn	_	_
11	World	_	NNP	NNP	_	13	nn	_	_
12	Swimming	_	NNP	NNP	_	13	nn	_	_
13	Championship	_	NNP	NNP	_	8	pobj	_	_
14	were	_	VBD	VBD	_	15	auxpass	_	_
15	held	_	VBN	VBN	_	0	root	_	_
16	here	_	RB	RB	_	15	advmod	_	_
17	this	_	DT	DT	_	18	det	_	_
18	morning	_	NN	NN	_	15	tmod	_	_
19	.	_	.	.	_	15	punct	_	_

Oracle:
(b / board, mod, d3 / distance-quantity)
(d2 / dive-01, instrument, b / board)
(d3 / distance-quantity, quant, 1 / 1)
(d3 / distance-quantity, unit, m2 / meter)
(g / game, name, n / name)
(g / game, subevent, p / preliminary)
(h / hold-04, ARG0, p / preliminary)
(h / hold-04, location, h2 / here)
(h / hold-04, time, m3 / morning)
(m3 / morning, mod, t / this)
(n / name, op, "Championship")
(n / name, op, "Seventh")
(n / name, op, "Swimming")
(n / name, op, "World")
(p / preliminary, topic, b / board)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),The,1,false), Span(4,5,List(1),diving,ding-01,false), Span(0,10,List(3, 2),The 1 - meter diving board preliminaries of the Seventh,(ordinal-entity :value 1),false), Span(16,17,List(4),this,this,false), Span(15,16,List(5),here,here,false), Span(5,6,List(8, 7, 6),board,(organization :name (name :op "Board")),false), Span(3,4,List(9),meter,meter,false), Span(17,18,List(10),morning,morning,false)),Map(2 -> ordinal-entity, 5 -> here, 8 -> "Board", 7 -> name, 1 -> ding-01, 4 -> this, 6 -> organization, 9 -> meter, 0 -> 1, 10 -> morning, 3 -> 1),Map(n -> name, h -> here, t -> this, 12 -> 1, m2 -> morning, m -> meter, d -> ding-01, 1 -> 1, o2 -> organization, o -> ordinal-entity))),[Ljava.lang.String;@5647cf4d,Annotation([Ljava.lang.String;@469fef8a,[Ljava.lang.String;@50dad24f,[Ljava.lang.String;@6821a4d8),Annotation([Ljava.lang.String;@743336,[Ljava.lang.String;@39ae6f0d,[Ledu.cmu.lti.nlp.amr.Dependency;@3f608add),Annotation([Ljava.lang.String;@5a02fe8d,[Ljava.lang.String;@7b4e8b78,[Ljava.lang.String;@31d2551b),Annotation([Ljava.lang.String;@a5f079e,[Ljava.lang.String;@476476ce,[Ledu.cmu.lti.nlp.amr.Entity;@487e2011))
AMR:
(d / ding-01, ARG0, m2 / morning)
(d / ding-01, ARG1, o / ordinal-entity)
(d / ding-01, ARG2, o2 / organization)
(d / ding-01, ARG6, m / meter)
(h / here, op, t / this)
(m2 / morning, mod, t / this)
(n / name, op, "Board")
(o / ordinal-entity, mod, 1 / 1)
(o / ordinal-entity, value, 12 / 1)
(o2 / organization, name, n / name)

Decoded in 5,059,195 microseconds
Sentence: Chinese competitor Lan Wei and Sheng Chen both received qualification for the semi-finals .

Oracle Span 1:  and => and
Oracle Span 2:  Chinese => (country :name (name :op "China"))
Oracle Span 3:  competitor => compete-01
Oracle Span 4:  finals => final
Oracle Span 5:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Oracle Span 6:  qualification => qualify-02
Oracle Span 7:  semi => semi
Oracle Span 8:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
NER Entity: (person :name (name :op "Lan" :op "Wei"))
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 4-5:  and => and
Span 0-1:  Chinese => (country :name (name :op "China"))
Span 2-4:  Lan Wei => (person :name (name :op "Lan" :op "Wei"))
Span 9-10:  qualification => qualify-01
Span 8-9:  received => receive-01
Span 12-13:  semi-finals => semi-final
Span 5-7:  Sheng Chen => (person :name (name :op "Sheng" :op "Chen"))

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 0-1:  Chinese => (country :name (name :op "China"))
Oracle Span 1-2:  competitor => compete-01
Oracle Span 14-15:  finals => final
Oracle Span 2-4:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Oracle Span 9-10:  qualification => qualify-02
Oracle Span 12-13:  semi => semi
Oracle Span 5-7:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))

Dependencies:
1	Chinese	_	JJ	JJ	_	4	amod	_	_
2	competitor	_	NN	NN	_	4	nn	_	_
3	Lan	_	NNP	NNP	_	4	nn	_	_
4	Wei	_	NNP	NNP	_	9	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	Sheng	_	NNP	NNP	_	7	nn	_	_
7	Chen	_	NNP	NNP	_	4	conj	_	_
8	both	_	DT	DT	_	9	dep	_	_
9	received	_	VBD	VBD	_	0	root	_	_
10	qualification	_	NN	NN	_	9	dobj	_	_
11	for	_	IN	IN	_	9	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	semi-finals	_	NNS	NNS	_	11	pobj	_	_
14	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, mod, c4 / country)
(a / and, op, p3 / person)
(a / and, op, p4 / person)
(c3 / compete-01, ARG0, a / and)
(c4 / country, name, n3 / name)
(f / final, mod, s2 / semi)
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Chen")
(n2 / name, op, "Sheng")
(n3 / name, op, "China")
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)
(q / qualify-02, ARG1, a / and)
(q / qualify-02, ARG2, f / final)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Chinese,(country :name (name :op "China")),false), Span(2,4,List(6, 5, 4, 3),Lan Wei,(person :name (name :op "Lan" :op "Wei")),false), Span(9,10,List(7),qualification,qualify-01,false), Span(12,13,List(8),semi-finals,semi-final,false), Span(5,7,List(12, 11, 10, 9),Sheng Chen,(person :name (name :op "Sheng" :op "Chen")),false), Span(4,5,List(13),and,and,false), Span(8,9,List(14),received,receive-01,false)),Map(2 -> "China", 5 -> "Lan", 12 -> "Chen", 8 -> semi-final, 7 -> qualify-01, 1 -> name, 4 -> name, 11 -> "Sheng", 14 -> receive-01, 6 -> "Wei", 0 -> country, 9 -> person, 3 -> person, 10 -> name, 13 -> and),Map(n -> name, q -> qualify-01, p2 -> person, s -> semi-final, p -> person, a -> and, n3 -> name, r -> receive-01, c -> country, n2 -> name))),[Ljava.lang.String;@6b4ae603,Annotation([Ljava.lang.String;@721dffa8,[Ljava.lang.String;@f16e9c2,[Ljava.lang.String;@140e696c),Annotation([Ljava.lang.String;@28c8ff10,[Ljava.lang.String;@35b5a51e,[Ledu.cmu.lti.nlp.amr.Dependency;@dd51293),Annotation([Ljava.lang.String;@6a774f4c,[Ljava.lang.String;@5280d6d,[Ljava.lang.String;@1dadc583),Annotation([Ljava.lang.String;@38c90d2f,[Ljava.lang.String;@68142855,[Ledu.cmu.lti.nlp.amr.Entity;@2d12135f))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / person)
(c / country, name, n / name)
(n / name, op, "China")
(n2 / name, op, "Lan")
(n2 / name, op, "Wei")
(n3 / name, op, "Chen")
(n3 / name, op, "Sheng")
(p / person, mod, c / country)
(p / person, name, n2 / name)
(p2 / person, name, n3 / name)
(q / qualify-01, ARG1, s / semi-final)
(r / receive-01, ARG0, p / person)
(r / receive-01, ARG1, q / qualify-01)

Decoded in 2,895,017 microseconds
Sentence: In the preliminaries , Wei Lan , who is 26 years old this year , from Guangdong , with outstanding skill , occupied the lead position with a total score of 355.35 points .

Oracle Span 1:  26 => 26
Oracle Span 2:  355.35 => 355.35
Oracle Span 3:  Guangdong => (province :name (name :op "Guangdong"))
Oracle Span 4:  lead => lead-01
Oracle Span 5:  occupied => occupy-01
Oracle Span 6:  points => point
Oracle Span 7:  position => position
Oracle Span 8:  preliminaries => preliminary
Oracle Span 9:  score => score-01
Oracle Span 10:  skill => skill
Oracle Span 11:  this => this
Oracle Span 12:  total => total
Oracle Span 13:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))
Oracle Span 14:  year => year
Oracle Span 15:  years => (temporal-quantity :unit year)
NER Entity: (person :name (name :op "Wei" :op "Lan"))
NER Entity: (country :name (name :op "Guangdong"))
Spans:
Span 16-17:  Guangdong => (province :name (name :op "Guangdong"))
Span 0-1:  In => 1
Span 0-10:  In the preliminaries , Wei Lan , who is 26 => (date-entity :time 26 :time year :time old :time this :time year)
Span 24-25:  lead => lead-01
Span 22-23:  occupied => occupy-01
Span 19-20:  outstanding => outstanding
Span 32-33:  points => point
Span 25-26:  position => position
Span 2-3:  preliminaries => preliminary
Span 20-21:  skill => skill
Span 28-29:  total => total
Span 4-6:  Wei Lan => (person :name (name :op "Wei" :op "Lan"))

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 9-10:  26 => 26
Oracle Span 31-32:  355.35 => 355.35
Oracle Span 16-17:  Guangdong => (province :name (name :op "Guangdong"))
Oracle Span 24-25:  lead => lead-01
Oracle Span 22-23:  occupied => occupy-01
Oracle Span 32-33:  points => point
Oracle Span 25-26:  position => position
Oracle Span 2-3:  preliminaries => preliminary
Oracle Span 29-30:  score => score-01
Oracle Span 20-21:  skill => skill
Oracle Span 12-13:  this => this
Oracle Span 28-29:  total => total
Oracle Span 4-6:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))
Oracle Span 13-14:  year => year
Oracle Span 10-11:  years => (temporal-quantity :unit year)

Dependencies:
1	In	_	IN	IN	_	23	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	preliminaries	_	NNS	NNS	_	1	pobj	_	_
4	,	_	,	,	_	23	punct	_	_
5	Wei	_	NNP	NNP	_	6	nn	_	_
6	Lan	_	NNP	NNP	_	23	nsubj	_	_
7	,	_	,	,	_	6	punct	_	_
8	who	_	WP	WP	_	12	nsubj	_	_
9	is	_	VBZ	VBZ	_	12	cop	_	_
10	26	_	CD	CD	_	11	num	_	_
11	years	_	NNS	NNS	_	12	npadvmod	_	_
12	old	_	JJ	JJ	_	6	rcmod	_	_
13	this	_	DT	DT	_	14	det	_	_
14	year	_	NN	NN	_	12	tmod	_	_
15	,	_	,	,	_	12	punct	_	_
16	from	_	IN	IN	_	12	prep	_	_
17	Guangdong	_	NNP	NNP	_	16	pobj	_	_
18	,	_	,	,	_	12	punct	_	_
19	with	_	IN	IN	_	12	prep	_	_
20	outstanding	_	JJ	JJ	_	21	amod	_	_
21	skill	_	NN	NN	_	19	pobj	_	_
22	,	_	,	,	_	6	punct	_	_
23	occupied	_	VBD	VBD	_	0	root	_	_
24	the	_	DT	DT	_	26	det	_	_
25	lead	_	JJ	JJ	_	26	amod	_	_
26	position	_	NN	NN	_	23	dobj	_	_
27	with	_	IN	IN	_	23	prep	_	_
28	a	_	DT	DT	_	30	det	_	_
29	total	_	JJ	JJ	_	30	amod	_	_
30	score	_	NN	NN	_	27	pobj	_	_
31	of	_	IN	IN	_	30	prep	_	_
32	355.35	_	CD	CD	_	33	num	_	_
33	points	_	NNS	NNS	_	31	pobj	_	_
34	.	_	.	.	_	23	punct	_	_

Oracle:
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Guangdong")
(o / occupy-01, ARG0, p2 / person)
(o / occupy-01, ARG1, p3 / position)
(o / occupy-01, ARG2, s2 / score-01)
(o / occupy-01, location, p5 / preliminary)
(p / province, name, n2 / name)
(p2 / person, name, n / name)
(p2 / person, prep-with, s / skill)
(p2 / person, source, p / province)
(p3 / position, mod, l / lead-01)
(p4 / point, quant, 3 / 355.35)
(s2 / score-01, ARG0, p2 / person)
(s2 / score-01, ARG1, p4 / point)
(s2 / score-01, mod, t2 / total)
(t / temporal-quantity, quant, 2 / 26)
(t / temporal-quantity, unit, y / year)
(y2 / year, mod, t3 / this)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),In,1,false), Span(0,10,List(5, 4, 3, 2, 1),In the preliminaries , Wei Lan , who is 26,(date-entity :time 26 :time year :time old :time this :time year),false), Span(32,33,List(6),points,point,false), Span(19,20,List(7),outstanding,outstanding,false), Span(16,17,List(10, 9, 8),Guangdong,(province :name (name :op "Guangdong")),false), Span(28,29,List(11),total,total,false), Span(25,26,List(12),position,position,false), Span(22,23,List(13),occupied,occupy-01,false), Span(4,6,List(17, 16, 15, 14),Wei Lan,(person :name (name :op "Wei" :op "Lan")),false), Span(2,3,List(18),preliminaries,preliminary,false), Span(20,21,List(19),skill,skill,false), Span(24,25,List(20),lead,lead-01,false)),Map(2 -> 26, 5 -> this, 12 -> position, 15 -> name, 8 -> province, 18 -> preliminary, 7 -> outstanding, 17 -> "Lan", 1 -> date-entity, 4 -> old, 11 -> total, 14 -> person, 20 -> lead-01, 6 -> point, 0 -> 1, 9 -> name, 16 -> "Wei", 19 -> skill, 3 -> year, 10 -> "Guangdong", 13 -> occupy-01),Map(n -> name, 2 -> 26, p5 -> preliminary, t -> this, o3 -> occupy-01, p2 -> province, s -> skill, d -> date-entity, 1 -> 1, y -> year, p -> point, p4 -> person, o2 -> outstanding, t2 -> total, l -> lead-01, o -> old, p3 -> position, n2 -> name))),[Ljava.lang.String;@13f0e16b,Annotation([Ljava.lang.String;@46d53b82,[Ljava.lang.String;@1359cc84,[Ljava.lang.String;@221bfdf1),Annotation([Ljava.lang.String;@36f4ab60,[Ljava.lang.String;@59129f17,[Ledu.cmu.lti.nlp.amr.Dependency;@4f2455d),Annotation([Ljava.lang.String;@797bd447,[Ljava.lang.String;@6ac7cfa3,[Ljava.lang.String;@27e01fcb),Annotation([Ljava.lang.String;@312e6ec7,[Ljava.lang.String;@16d05d49,[Ledu.cmu.lti.nlp.amr.Entity;@42be32e7))
AMR:
(1 / 1, op, p5 / preliminary)
(d / date-entity, time, 2 / 26)
(d / date-entity, time, o / old)
(d / date-entity, time, t / this)
(d / date-entity, time, y / year)
(d / date-entity, time, y / year)
(l / lead-01, ARG0, p2 / province)
(l / lead-01, ARG1, p3 / position)
(n / name, op, "Guangdong")
(n2 / name, op, "Lan")
(n2 / name, op, "Wei")
(o3 / occupy-01, ARG0, p4 / person)
(o3 / occupy-01, ARG1, p3 / position)
(o3 / occupy-01, ARG6, s / skill)
(o3 / occupy-01, location, p / point)
(o3 / occupy-01, time, 1 / 1)
(o3 / occupy-01, time, d / date-entity)
(p / point, mod, t2 / total)
(p2 / province, name, n / name)
(p4 / person, name, n2 / name)
(s / skill, mod, o2 / outstanding)

Decoded in 6,722,338 microseconds
Sentence: Sheng Chen , who is 19 years old this year , from Hubei , is temporarily in the sixth position , the a total score of 342.60 points .

Oracle Span 1:  19 => 19
Oracle Span 2:  342.60 => 342.60
Oracle Span 3:  Hubei => (province :name (name :op "Hubei"))
Oracle Span 4:  points => point
Oracle Span 5:  position => position-01
Oracle Span 6:  score => score-01
Oracle Span 7:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 8:  temporarily => temporary
Oracle Span 9:  this => this
Oracle Span 10:  total => total
Oracle Span 11:  year => year
Oracle Span 12:  years => (temporal-quantity :unit year)
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
NER Entity: (country :name (name :op "Hubei"))
Spans:
Span 12-13:  Hubei => (province :name (name :op "Hubei"))
Span 27-28:  points => point
Span 19-20:  position => position
Span 0-1:  Sheng => 1
Span 0-2:  Sheng Chen => (person :name (name :op "Sheng" :op "Chen"))
Span 0-6:  Sheng Chen , who is 19 => (date-entity :time 19 :time year :time old :time this :time year)
Span 0-19:  Sheng Chen , who is 19 years old this year , from Hubei , is temporarily in the sixth => (ordinal-entity :value 1)
Span 15-16:  temporarily => temporary
Span 23-24:  total => total

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 5-6:  19 => 19
Oracle Span 26-27:  342.60 => 342.60
Oracle Span 12-13:  Hubei => (province :name (name :op "Hubei"))
Oracle Span 27-28:  points => point
Oracle Span 19-20:  position => position-01
Oracle Span 24-25:  score => score-01
Oracle Span 0-2:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 15-16:  temporarily => temporary
Oracle Span 8-9:  this => this
Oracle Span 23-24:  total => total
Oracle Span 9-10:  year => year
Oracle Span 6-7:  years => (temporal-quantity :unit year)

Dependencies:
1	Sheng	_	NNP	NNP	_	2	nn	_	_
2	Chen	_	NNP	NNP	_	15	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	who	_	WP	WP	_	8	nsubj	_	_
5	is	_	VBZ	VBZ	_	8	cop	_	_
6	19	_	CD	CD	_	7	num	_	_
7	years	_	NNS	NNS	_	8	npadvmod	_	_
8	old	_	JJ	JJ	_	2	rcmod	_	_
9	this	_	DT	DT	_	10	det	_	_
10	year	_	NN	NN	_	8	tmod	_	_
11	,	_	,	,	_	8	punct	_	_
12	from	_	IN	IN	_	8	prep	_	_
13	Hubei	_	NNP	NNP	_	12	pobj	_	_
14	,	_	,	,	_	2	punct	_	_
15	is	_	VBZ	VBZ	_	0	root	_	_
16	temporarily	_	RB	RB	_	15	advmod	_	_
17	in	_	IN	IN	_	15	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	sixth	_	JJ	JJ	_	20	amod	_	_
20	position	_	NN	NN	_	17	pobj	_	_
21	,	_	,	,	_	20	punct	_	_
22	the	_	DT	DT	_	25	predet	_	_
23	a	_	DT	DT	_	25	det	_	_
24	total	_	JJ	JJ	_	25	amod	_	_
25	score	_	NN	NN	_	20	appos	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	342.60	_	CD	CD	_	28	num	_	_
28	points	_	NNS	NNS	_	26	pobj	_	_
29	.	_	.	.	_	15	punct	_	_

Oracle:
(n / name, op, "Chen")
(n / name, op, "Sheng")
(n2 / name, op, "Hubei")
(p / position-01, ARG1, p3 / person)
(p / position-01, duration, t2 / temporary)
(p2 / point, quant, 3 / 342.60)
(p3 / person, name, n / name)
(p3 / person, source, p4 / province)
(p4 / province, name, n2 / name)
(s2 / score-01, ARG0, p3 / person)
(s2 / score-01, ARG1, p2 / point)
(s2 / score-01, mod, t3 / total)
(t / temporal-quantity, quant, 1 / 19)
(t / temporal-quantity, unit, y / year)
(y2 / year, mod, t4 / this)

Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),total,total,false), Span(0,6,List(5, 4, 3, 2, 1),Sheng Chen , who is 19,(date-entity :time 19 :time year :time old :time this :time year),false), Span(0,1,List(6),Sheng,1,false), Span(27,28,List(7),points,point,false), Span(19,20,List(8),position,position,false), Span(12,13,List(11, 10, 9),Hubei,(province :name (name :op "Hubei")),false), Span(0,2,List(15, 14, 13, 12),Sheng Chen,(person :name (name :op "Sheng" :op "Chen")),false), Span(15,16,List(16),temporarily,temporary,false), Span(0,19,List(18, 17),Sheng Chen , who is 19 years old this year , from Hubei , is temporarily in the sixth,(ordinal-entity :value 1),false)),Map(2 -> 19, 5 -> this, 12 -> person, 15 -> "Chen", 8 -> position, 18 -> 1, 7 -> point, 17 -> ordinal-entity, 1 -> date-entity, 4 -> old, 11 -> "Hubei", 14 -> "Sheng", 6 -> 1, 0 -> total, 9 -> province, 16 -> temporary, 3 -> year, 10 -> name, 13 -> name),Map(n -> name, t -> total, 12 -> 1, p2 -> position, d -> date-entity, t3 -> temporary, 1 -> 19, y -> year, p -> point, p4 -> person, o2 -> ordinal-entity, t2 -> this, o -> old, p3 -> province, n2 -> name, 13 -> 1))),[Ljava.lang.String;@3d130919,Annotation([Ljava.lang.String;@76e400f4,[Ljava.lang.String;@65edd2f1,[Ljava.lang.String;@35b0e1eb),Annotation([Ljava.lang.String;@10ce6d85,[Ljava.lang.String;@467b3cc8,[Ledu.cmu.lti.nlp.amr.Dependency;@4d8a04ac),Annotation([Ljava.lang.String;@7f070b4f,[Ljava.lang.String;@1c46e36f,[Ljava.lang.String;@3c41153),Annotation([Ljava.lang.String;@1e76cae3,[Ljava.lang.String;@596cf711,[Ledu.cmu.lti.nlp.amr.Entity;@729a2ac8))
AMR:
(12 / 1, mod, p4 / person)
(d / date-entity, mod, 12 / 1)
(d / date-entity, time, 1 / 19)
(d / date-entity, time, o / old)
(d / date-entity, time, t2 / this)
(d / date-entity, time, y / year)
(d / date-entity, time, y / year)
(n / name, op, "Hubei")
(n2 / name, op, "Chen")
(n2 / name, op, "Sheng")
(o2 / ordinal-entity, op, p2 / position)
(o2 / ordinal-entity, value, 13 / 1)
(p / point, mod, t / total)
(p / point, mod, t3 / temporary)
(p2 / position, poss, p4 / person)
(p3 / province, name, n / name)
(p4 / person, mod, p3 / province)
(p4 / person, mod, t / total)
(p4 / person, name, n2 / name)

Decoded in 5,360,188 microseconds
Sentence: The competitor who is temporarily in second place is the German athlete Bao Lizuo , with a total score of 355.02 points , slightly lower than Wei Lan .

Oracle Span 1:  355.02 => 355.02
Oracle Span 2:  athlete => athlete
Oracle Span 3:  Bao Lizuo => (name :op "Lizuo" :op "Bao")
Oracle Span 4:  competitor => (person :ARG0-of compete-01)
Oracle Span 5:  German => (country :name (name :op "Germany"))
Oracle Span 6:  lower => low
Oracle Span 7:  place => place-01
Oracle Span 8:  points => point
Oracle Span 9:  score => score-01
Oracle Span 10:  slightly => slight
Oracle Span 11:  temporarily => temporary
Oracle Span 12:  total => total-01
Oracle Span 13:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))
NER Entity: (person :name (name :op "Bao" :op "Lizuo"))
NER Entity: (person :name (name :op "Wei" :op "Lan"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 12-14:  Bao Lizuo => (person :name (name :op "Bao" :op "Lizuo"))
Span 1-2:  competitor => (company :ARG0-of compete-01)
Span 24-25:  lower => (low :degree more)
Span 21-22:  points => point
Span 23-24:  slightly => slight
Span 4-5:  temporarily => temporary
Span 0-1:  The => 1
Span 0-7:  The competitor who is temporarily in second => (ordinal-entity :value 1)
Span 17-18:  total => total
Span 26-28:  Wei Lan => (person :name (name :op "Wei" :op "Lan"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 20-21:  355.02 => 355.02
Oracle Span 11-12:  athlete => athlete
Oracle Span 12-14:  Bao Lizuo => (name :op "Lizuo" :op "Bao")
Oracle Span 1-2:  competitor => (person :ARG0-of compete-01)
Oracle Span 10-11:  German => (country :name (name :op "Germany"))
Oracle Span 24-25:  lower => low
Oracle Span 7-8:  place => place-01
Oracle Span 21-22:  points => point
Oracle Span 18-19:  score => score-01
Oracle Span 23-24:  slightly => slight
Oracle Span 4-5:  temporarily => temporary
Oracle Span 17-18:  total => total-01
Oracle Span 26-28:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	competitor	_	NN	NN	_	14	nsubj	_	_
3	who	_	WP	WP	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	2	rcmod	_	_
5	temporarily	_	RB	RB	_	4	advmod	_	_
6	in	_	IN	IN	_	4	prep	_	_
7	second	_	JJ	JJ	_	8	amod	_	_
8	place	_	NN	NN	_	6	pobj	_	_
9	is	_	VBZ	VBZ	_	14	cop	_	_
10	the	_	DT	DT	_	14	det	_	_
11	German	_	JJ	JJ	_	14	amod	_	_
12	athlete	_	NN	NN	_	14	nn	_	_
13	Bao	_	NNP	NNP	_	14	nn	_	_
14	Lizuo	_	NNP	NNP	_	0	root	_	_
15	,	_	,	,	_	14	punct	_	_
16	with	_	IN	IN	_	14	prep	_	_
17	a	_	DT	DT	_	19	det	_	_
18	total	_	JJ	JJ	_	19	amod	_	_
19	score	_	NN	NN	_	16	pobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	355.02	_	CD	CD	_	22	num	_	_
22	points	_	NNS	NNS	_	20	pobj	_	_
23	,	_	,	,	_	14	punct	_	_
24	slightly	_	RB	RB	_	25	advmod	_	_
25	lower	_	JJR	JJR	_	14	amod	_	_
26	than	_	IN	IN	_	25	prep	_	_
27	Wei	_	NNP	NNP	_	28	nn	_	_
28	Lan	_	NNP	NNP	_	26	pobj	_	_
29	.	_	.	.	_	14	punct	_	_

Oracle:
(a / athlete, mod, c3 / country)
(a / athlete, name, n / name)
(c2 / compete-01, ARG0, p / person)
(c3 / country, name, n2 / name)
(l / low, compared-to, p5 / person)
(n / name, op, "Bao")
(n / name, op, "Lizuo")
(n2 / name, op, "Germany")
(n3 / name, op, "Lan")
(n3 / name, op, "Wei")
(p / person, domain, a / athlete)
(p2 / place-01, ARG1, p / person)
(p2 / place-01, duration, t / temporary)
(p4 / point, mod, l / low)
(p4 / point, quant, x / 355.02)
(p5 / person, name, n3 / name)
(s / score-01, ARG0, a / athlete)
(s / score-01, ARG1, p4 / point)
(t2 / total-01, ARG1, p4 / point)
(t2 / total-01, ARG2, x / 355.02)

Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),lower,(low :degree more),false), Span(0,1,List(2),The,1,false), Span(17,18,List(3),total,total,false), Span(21,22,List(4),points,point,false), Span(23,24,List(5),slightly,slight,false), Span(0,7,List(7, 6),The competitor who is temporarily in second,(ordinal-entity :value 1),false), Span(1,2,List(9, 8),competitor,(company :ARG0-of compete-01),false), Span(12,14,List(13, 12, 11, 10),Bao Lizuo,(person :name (name :op "Bao" :op "Lizuo")),false), Span(26,28,List(17, 16, 15, 14),Wei Lan,(person :name (name :op "Wei" :op "Lan")),false), Span(4,5,List(18),temporarily,temporary,false)),Map(2 -> 1, 5 -> slight, 12 -> "Bao", 15 -> name, 8 -> company, 18 -> temporary, 7 -> 1, 17 -> "Lan", 1 -> more, 4 -> point, 11 -> name, 14 -> person, 6 -> ordinal-entity, 0 -> low, 9 -> compete-01, 16 -> "Wei", 3 -> total, 10 -> person, 13 -> "Lizuo"),Map(n -> name, t -> total, 12 -> 1, p2 -> person, s -> slight, m -> more, 1 -> 1, p -> point, t2 -> temporary, c -> company, l -> low, o -> ordinal-entity, p3 -> person, n2 -> name, c2 -> compete-01))),[Ljava.lang.String;@536e90bf,Annotation([Ljava.lang.String;@2af7cfb1,[Ljava.lang.String;@6ab8e55a,[Ljava.lang.String;@2086a2be),Annotation([Ljava.lang.String;@7ca3579,[Ljava.lang.String;@13d4f876,[Ledu.cmu.lti.nlp.amr.Dependency;@3eeb4d63),Annotation([Ljava.lang.String;@2bed8b52,[Ljava.lang.String;@7dda02ab,[Ljava.lang.String;@49f9422e),Annotation([Ljava.lang.String;@2d1d8e27,[Ljava.lang.String;@6a6d37cd,[Ledu.cmu.lti.nlp.amr.Entity;@478faf71))
AMR:
(1 / 1, mod, p / point)
(c / company, mod, 1 / 1)
(c2 / compete-01, ARG0, c / company)
(c2 / compete-01, ARG1, o / ordinal-entity)
(c2 / compete-01, ARG6, t2 / temporary)
(l / low, degree, m / more)
(l / low, location, p3 / person)
(m / more, mod, s / slight)
(n / name, op, "Bao")
(n / name, op, "Lizuo")
(n2 / name, op, "Lan")
(n2 / name, op, "Wei")
(o / ordinal-entity, value, 12 / 1)
(p / point, mod, t / total)
(p2 / person, domain, o / ordinal-entity)
(p2 / person, name, n / name)
(p3 / person, name, n2 / name)
(p3 / person, poss, c / company)

Decoded in 6,464,946 microseconds
Sentence: The competitor from Zimbabwe , Si Aiwan , who is temporarily in third place , has a total score of 354.39 points .

Oracle Span 1:  354.39 => 354.39
Oracle Span 2:  competitor => compete-01
Oracle Span 3:  place => place-01
Oracle Span 4:  points => point
Oracle Span 5:  score => score-01
Oracle Span 6:  Si Aiwan => (person :name (name :op "Aiwan" :op "Si"))
Oracle Span 7:  temporarily => temporary
Oracle Span 8:  total => total-01
Oracle Span 9:  Zimbabwe => (country :name (name :op "Zimbabwe"))
NER Entity: (person :name (name :op "Si" :op "Aiwan"))
NER Entity: (country :name (name :op "Zimbabwe"))
Spans:
Span 1-2:  competitor => (company :ARG0-of compete-01)
Span 15-16:  has => have-03
Span 21-22:  points => point
Span 5-7:  Si Aiwan => (person :name (name :op "Si" :op "Aiwan"))
Span 10-11:  temporarily => temporary
Span 0-1:  The => 1
Span 0-13:  The competitor from Zimbabwe , Si Aiwan , who is temporarily in third => (ordinal-entity :value 1)
Span 17-18:  total => total
Span 3-4:  Zimbabwe => (country :name (name :op "Zimbabwe"))

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 20-21:  354.39 => 354.39
Oracle Span 1-2:  competitor => compete-01
Oracle Span 13-14:  place => place-01
Oracle Span 21-22:  points => point
Oracle Span 18-19:  score => score-01
Oracle Span 5-7:  Si Aiwan => (person :name (name :op "Aiwan" :op "Si"))
Oracle Span 10-11:  temporarily => temporary
Oracle Span 17-18:  total => total-01
Oracle Span 3-4:  Zimbabwe => (country :name (name :op "Zimbabwe"))

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	competitor	_	NN	NN	_	16	nsubj	_	_
3	from	_	IN	IN	_	2	prep	_	_
4	Zimbabwe	_	NNP	NNP	_	7	nn	_	_
5	,	_	,	,	_	7	punct	_	_
6	Si	_	NNP	NNP	_	7	appos	_	_
7	Aiwan	_	NNP	NNP	_	3	pobj	_	_
8	,	_	,	,	_	2	punct	_	_
9	who	_	WP	WP	_	10	nsubj	_	_
10	is	_	VBZ	VBZ	_	2	rcmod	_	_
11	temporarily	_	RB	RB	_	10	advmod	_	_
12	in	_	IN	IN	_	10	prep	_	_
13	third	_	JJ	JJ	_	14	amod	_	_
14	place	_	NN	NN	_	12	pobj	_	_
15	,	_	,	,	_	2	punct	_	_
16	has	_	VBZ	VBZ	_	0	root	_	_
17	a	_	DT	DT	_	19	det	_	_
18	total	_	JJ	JJ	_	19	amod	_	_
19	score	_	NN	NN	_	16	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	354.39	_	CD	CD	_	22	num	_	_
22	points	_	NNS	NNS	_	20	pobj	_	_
23	.	_	.	.	_	16	punct	_	_

Oracle:
(c2 / compete-01, ARG0, p3 / person)
(c3 / country, name, n2 / name)
(n / name, op, "Aiwan")
(n / name, op, "Si")
(n2 / name, op, "Zimbabwe")
(p / place-01, ARG1, p3 / person)
(p / place-01, duration, t / temporary)
(p3 / person, name, n / name)
(p3 / person, source, c3 / country)
(p4 / point, quant, x / 354.39)
(s / score-01, ARG0, p3 / person)
(s / score-01, ARG1, p4 / point)
(t2 / total-01, ARG1, p4 / point)
(t2 / total-01, ARG2, x / 354.39)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),The,1,false), Span(10,11,List(1),temporarily,temporary,false), Span(17,18,List(2),total,total,false), Span(3,4,List(5, 4, 3),Zimbabwe,(country :name (name :op "Zimbabwe")),false), Span(21,22,List(6),points,point,false), Span(5,7,List(10, 9, 8, 7),Si Aiwan,(person :name (name :op "Si" :op "Aiwan")),false), Span(15,16,List(11),has,have-03,false), Span(0,13,List(13, 12),The competitor from Zimbabwe , Si Aiwan , who is temporarily in third,(ordinal-entity :value 1),false), Span(1,2,List(15, 14),competitor,(company :ARG0-of compete-01),false)),Map(2 -> total, 5 -> "Zimbabwe", 12 -> ordinal-entity, 15 -> compete-01, 8 -> name, 7 -> person, 1 -> temporary, 4 -> name, 11 -> have-03, 14 -> company, 6 -> point, 0 -> 1, 9 -> "Si", 3 -> country, 10 -> "Aiwan", 13 -> 1),Map(n -> name, h -> have-03, t -> temporary, 12 -> 1, p2 -> person, 1 -> 1, p -> point, c3 -> compete-01, t2 -> total, c -> country, o -> ordinal-entity, n2 -> name, c2 -> company))),[Ljava.lang.String;@5e5fa66c,Annotation([Ljava.lang.String;@77b01ad,[Ljava.lang.String;@4d7201c0,[Ljava.lang.String;@54075e90),Annotation([Ljava.lang.String;@7748feba,[Ljava.lang.String;@2861ef97,[Ledu.cmu.lti.nlp.amr.Dependency;@7540975a),Annotation([Ljava.lang.String;@1bddb4bc,[Ljava.lang.String;@2b502453,[Ljava.lang.String;@c6a6bf9),Annotation([Ljava.lang.String;@7de1d769,[Ljava.lang.String;@b6ff43d,[Ledu.cmu.lti.nlp.amr.Entity;@21b72bbf))
AMR:
(c / country, name, n / name)
(c2 / company, location, c / country)
(c2 / company, mod, 1 / 1)
(c3 / compete-01, ARG0, c2 / company)
(c3 / compete-01, ARG1, o / ordinal-entity)
(h / have-03, ARG0, c2 / company)
(h / have-03, ARG1, t / temporary)
(h / have-03, location, p / point)
(n / name, op, "Zimbabwe")
(n2 / name, op, "Aiwan")
(n2 / name, op, "Si")
(o / ordinal-entity, value, 12 / 1)
(p / point, mod, t2 / total)
(p2 / person, name, n2 / name)
(p2 / person, poss, c2 / company)

Decoded in 4,242,265 microseconds
Sentence: After the competition , the chief coach of the Chinese diving team said to our agency 's reporter : " Sheng Chen is a little nervous today . "

Oracle Span 1:  After => after
Oracle Span 2:  agency => (have-org-role-91 :ARG1 agency)
Oracle Span 3:  chief => chief
Oracle Span 4:  Chinese => (country :name (name :op "China"))
Oracle Span 5:  coach => (person :ARG0-of coach-01)
Oracle Span 6:  competition => compete-01
Oracle Span 7:  diving => dive-01
Oracle Span 8:  little => little
Oracle Span 9:  nervous => nervous-41
Oracle Span 10:  reporter => report-01
Oracle Span 11:  said => say-01
Oracle Span 12:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 13:  team => team
Oracle Span 14:  today => today
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 0-1:  After => after
Span 0-27:  After the competition , the chief coach of the Chinese diving team said to our agency 's reporter : " Sheng Chen is a little nervous today => (date-entity :time today)
Span 15-16:  agency => agency
Span 5-6:  chief => chief
Span 9-10:  Chinese => (country :name (name :op "China"))
Span 6-7:  coach => coach-01
Span 2-3:  competition => complement-01
Span 24-25:  little => little
Span 17-18:  reporter => report-01
Span 12-13:  said => say-01
Span 20-22:  Sheng Chen => (person :name (name :op "Sheng" :op "Chen"))
Span 11-12:  team => team

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 0-1:  After => after
Oracle Span 15-16:  agency => (have-org-role-91 :ARG1 agency)
Oracle Span 5-6:  chief => chief
Oracle Span 9-10:  Chinese => (country :name (name :op "China"))
Oracle Span 6-7:  coach => (person :ARG0-of coach-01)
Oracle Span 2-3:  competition => compete-01
Oracle Span 10-11:  diving => dive-01
Oracle Span 24-25:  little => little
Oracle Span 25-26:  nervous => nervous-41
Oracle Span 17-18:  reporter => report-01
Oracle Span 12-13:  said => say-01
Oracle Span 20-22:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 11-12:  team => team
Oracle Span 26-27:  today => today

Dependencies:
1	After	_	IN	IN	_	13	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	competition	_	NN	NN	_	1	pobj	_	_
4	,	_	,	,	_	13	punct	_	_
5	the	_	DT	DT	_	7	det	_	_
6	chief	_	JJ	JJ	_	7	amod	_	_
7	coach	_	NN	NN	_	13	nsubj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	12	det	_	_
10	Chinese	_	JJ	JJ	_	12	amod	_	_
11	diving	_	JJ	JJ	_	12	amod	_	_
12	team	_	NN	NN	_	8	pobj	_	_
13	said	_	VBD	VBD	_	0	root	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	our	_	PRP$	PRP$	_	16	poss	_	_
16	agency	_	NN	NN	_	18	poss	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	reporter	_	NN	NN	_	14	pobj	_	_
19	:	_	:	:	_	13	punct	_	_
20	"	_	''	''	_	13	punct	_	_
21	Sheng	_	NNP	NNP	_	22	nn	_	_
22	Chen	_	NNP	NNP	_	26	nsubj	_	_
23	is	_	VBZ	VBZ	_	26	cop	_	_
24	a	_	DT	DT	_	25	det	_	_
25	little	_	RB	RB	_	26	npadvmod	_	_
26	nervous	_	JJ	JJ	_	13	parataxis	_	_
27	today	_	NN	NN	_	26	tmod	_	_
28	.	_	.	.	_	13	punct	_	_
29	"	_	''	''	_	13	punct	_	_

Oracle:
(a2 / after, op, c / compete-01)
(c3 / coach-01, ARG0, p2 / person)
(c3 / coach-01, ARG1, t / team)
(c3 / coach-01, mod, c5 / chief)
(c4 / country, name, n / name)
(d / dive-01, ARG0, t / team)
(h / have-org-role-91, ARG1, a / agency)
(h / have-org-role-91, ARG3, r / report-01)
(n / name, op, "China")
(n2 / nervous-41, ARG1, p4 / person)
(n2 / nervous-41, degree, l / little)
(n2 / nervous-41, time, t2 / today)
(n3 / name, op, "Chen")
(n3 / name, op, "Sheng")
(p4 / person, name, n3 / name)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, n2 / nervous-41)
(s2 / say-01, time, a2 / after)
(t / team, mod, c4 / country)

Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),reporter,report-01,false), Span(5,6,List(1),chief,chief,false), Span(0,1,List(2),After,after,false), Span(6,7,List(3),coach,coach-01,false), Span(15,16,List(4),agency,agency,false), Span(9,10,List(7, 6, 5),Chinese,(country :name (name :op "China")),false), Span(11,12,List(8),team,team,false), Span(0,27,List(10, 9),After the competition , the chief coach of the Chinese diving team said to our agency 's reporter : " Sheng Chen is a little nervous today,(date-entity :time today),false), Span(12,13,List(11),said,say-01,false), Span(20,22,List(15, 14, 13, 12),Sheng Chen,(person :name (name :op "Sheng" :op "Chen")),false), Span(2,3,List(16),competition,complement-01,false), Span(24,25,List(17),little,little,false)),Map(2 -> after, 5 -> country, 12 -> person, 15 -> "Chen", 8 -> team, 7 -> "China", 17 -> little, 1 -> chief, 4 -> agency, 11 -> say-01, 14 -> "Sheng", 6 -> name, 0 -> report-01, 9 -> date-entity, 16 -> complement-01, 3 -> coach-01, 10 -> today, 13 -> name),Map(n -> name, t -> team, c4 -> complement-01, s -> say-01, d -> date-entity, p -> person, a -> after, c3 -> country, t2 -> today, r -> report-01, a2 -> agency, c -> chief, l -> little, c2 -> coach-01, n2 -> name))),[Ljava.lang.String;@748b92be,Annotation([Ljava.lang.String;@1e66d047,[Ljava.lang.String;@63e3874,[Ljava.lang.String;@7cfd5956),Annotation([Ljava.lang.String;@544b2a15,[Ljava.lang.String;@7c873c33,[Ledu.cmu.lti.nlp.amr.Dependency;@b0d464f),Annotation([Ljava.lang.String;@1dac8991,[Ljava.lang.String;@103a13b3,[Ljava.lang.String;@5599c323),Annotation([Ljava.lang.String;@3447c8e1,[Ljava.lang.String;@4dde3ff9,[Ledu.cmu.lti.nlp.amr.Entity;@d390a7a))
AMR:
(a / after, op, c4 / complement-01)
(c2 / coach-01, ARG1, t / team)
(c3 / country, name, n / name)
(c4 / complement-01, ARG1, d / date-entity)
(d / date-entity, time, t2 / today)
(n / name, op, "China")
(n2 / name, op, "Chen")
(n2 / name, op, "Sheng")
(p / person, mod, l / little)
(p / person, name, n2 / name)
(r / report-01, ARG0, a2 / agency)
(r / report-01, ARG1, c / chief)
(s / say-01, ARG0, c2 / coach-01)
(s / say-01, ARG1, r / report-01)
(s / say-01, ARG6, p / person)
(s / say-01, time, a / after)
(t / team, mod, c3 / country)

Decoded in 4,784,014 microseconds
Sentence: He also said : " Our athletes are not very used to carrying out competition under strong sunlight . "

Oracle Span 1:  also => also
Oracle Span 2:  athletes => athlete
Oracle Span 3:  competition => compete-01
Oracle Span 4:  He => he
Oracle Span 5:  said => say-01
Oracle Span 6:  strong => strong
Oracle Span 7:  sunlight => sunlight
Oracle Span 8:  under => under
Oracle Span 9:  used => use-02
Oracle Span 10:  very => very
Spans:
Span 1-2:  also => also
Span 6-7:  athletes => athlete
Span 12-13:  carrying => carry-03
Span 14-15:  competition => complement-01
Span 0-1:  He => he
Span 2-3:  said => say-01
Span 16-17:  strong => strong
Span 17-18:  sunlight => sunlight
Span 10-11:  used => use-01
Span 9-10:  very => very

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 1-2:  also => also
Oracle Span 6-7:  athletes => athlete
Oracle Span 14-15:  competition => compete-01
Oracle Span 0-1:  He => he
Oracle Span 2-3:  said => say-01
Oracle Span 16-17:  strong => strong
Oracle Span 17-18:  sunlight => sunlight
Oracle Span 15-16:  under => under
Oracle Span 10-11:  used => use-02
Oracle Span 9-10:  very => very

Dependencies:
1	He	_	PRP	PRP	_	3	nsubj	_	_
2	also	_	RB	RB	_	3	advmod	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	:	_	:	:	_	3	punct	_	_
5	"	_	''	''	_	3	punct	_	_
6	Our	_	PRP$	PRP$	_	7	poss	_	_
7	athletes	_	NNS	NNS	_	11	nsubjpass	_	_
8	are	_	VBP	VBP	_	11	auxpass	_	_
9	not	_	RB	RB	_	11	neg	_	_
10	very	_	RB	RB	_	11	advmod	_	_
11	used	_	VBN	VBN	_	3	parataxis	_	_
12	to	_	TO	TO	_	11	prep	_	_
13	carrying	_	VBG	VBG	_	12	pcomp	_	_
14	out	_	RP	RP	_	13	prt	_	_
15	competition	_	NN	NN	_	13	dobj	_	_
16	under	_	IN	IN	_	13	prep	_	_
17	strong	_	JJ	JJ	_	18	amod	_	_
18	sunlight	_	NN	NN	_	16	pobj	_	_
19	.	_	.	.	_	3	punct	_	_
20	"	_	''	''	_	3	punct	_	_

Oracle:
(c2 / compete-01, ARG0, a2 / athlete)
(c2 / compete-01, location, u / under)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, u2 / use-02)
(s / say-01, mod, a3 / also)
(s2 / sunlight, mod, s3 / strong)
(u / under, op, s2 / sunlight)
(u2 / use-02, ARG0, a2 / athlete)
(u2 / use-02, ARG1, c2 / compete-01)
(u2 / use-02, degree, v / very)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),athletes,athlete,false), Span(0,1,List(1),He,he,false), Span(17,18,List(2),sunlight,sunlight,false), Span(14,15,List(3),competition,complement-01,false), Span(1,2,List(4),also,also,false), Span(16,17,List(5),strong,strong,false), Span(10,11,List(6),used,use-01,false), Span(12,13,List(7),carrying,carry-03,false), Span(2,3,List(8),said,say-01,false), Span(9,10,List(9),very,very,false)),Map(2 -> sunlight, 5 -> strong, 8 -> say-01, 7 -> carry-03, 1 -> he, 4 -> also, 6 -> use-01, 9 -> very, 0 -> athlete, 3 -> complement-01),Map(h -> he, s2 -> strong, s -> sunlight, v -> very, a -> athlete, a2 -> also, s3 -> say-01, u -> use-01, c -> complement-01, c2 -> carry-03))),[Ljava.lang.String;@5ebd4dc4,Annotation([Ljava.lang.String;@1963d5b,[Ljava.lang.String;@1ecd1b6d,[Ljava.lang.String;@7bc5aa31),Annotation([Ljava.lang.String;@4fa20be0,[Ljava.lang.String;@7f6e9baa,[Ledu.cmu.lti.nlp.amr.Dependency;@90ee159),Annotation([Ljava.lang.String;@5f4c466b,[Ljava.lang.String;@eebb69,[Ljava.lang.String;@bd6c315),Annotation([Ljava.lang.String;@752cff1f,[Ljava.lang.String;@486e90cf,[Ledu.cmu.lti.nlp.amr.Entity;@3d2e5f58))
AMR:
(c / complement-01, ARG1, s / sunlight)
(c2 / carry-03, ARG1, c / complement-01)
(s / sunlight, mod, s2 / strong)
(s3 / say-01, ARG0, h / he)
(s3 / say-01, ARG1, a / athlete)
(s3 / say-01, mod, a2 / also)
(u / use-01, ARG1, a / athlete)
(u / use-01, ARG2, c2 / carry-03)
(u / use-01, manner, v / very)

Decoded in 2,444,778 microseconds
Sentence: At home , they carry out indoor training mostly .

Oracle Span 1:  home => home
Oracle Span 2:  indoor => indoor
Oracle Span 3:  mostly => most
Oracle Span 4:  they => they
Oracle Span 5:  training => train-01
Spans:
Span 4-5:  carry => carry-03
Span 1-2:  home => home
Span 8-9:  mostly => most
Span 7-8:  training => train-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 1-2:  home => home
Oracle Span 6-7:  indoor => indoor
Oracle Span 8-9:  mostly => most
Oracle Span 3-4:  they => they
Oracle Span 7-8:  training => train-01

Dependencies:
1	At	_	IN	IN	_	5	prep	_	_
2	home	_	NN	NN	_	1	pobj	_	_
3	,	_	,	,	_	5	punct	_	_
4	they	_	PRP	PRP	_	5	nsubj	_	_
5	carry	_	VBP	VBP	_	0	root	_	_
6	out	_	IN	IN	_	5	prep	_	_
7	indoor	_	JJ	JJ	_	8	amod	_	_
8	training	_	NN	NN	_	6	pobj	_	_
9	mostly	_	RB	RB	_	5	advmod	_	_
10	.	_	.	.	_	5	punct	_	_

Oracle:
(t2 / train-01, ARG2, t / they)
(t2 / train-01, degree, m / most)
(t2 / train-01, location, h / home)
(t2 / train-01, location, i / indoor)

Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),training,train-01,false), Span(1,2,List(1),home,home,false), Span(8,9,List(2),mostly,most,false), Span(4,5,List(3),carry,carry-03,false)),Map(2 -> most, 1 -> home, 0 -> train-01, 3 -> carry-03),Map(h -> home, t -> train-01, m -> most, c -> carry-03))),[Ljava.lang.String;@48a8c98b,Annotation([Ljava.lang.String;@2b28696,[Ljava.lang.String;@5557dd7c,[Ljava.lang.String;@9886b8f),Annotation([Ljava.lang.String;@7621fa4,[Ljava.lang.String;@11f2afe8,[Ledu.cmu.lti.nlp.amr.Dependency;@7aa52c97),Annotation([Ljava.lang.String;@303bf45f,[Ljava.lang.String;@27b342c3,[Ljava.lang.String;@23ba3432),Annotation([Ljava.lang.String;@70a86546,[Ljava.lang.String;@1f5eee00,[Ledu.cmu.lti.nlp.amr.Entity;@22c60272))
AMR:
(c / carry-03, ARG1, t / train-01)
(c / carry-03, ARG6, m / most)
(t / train-01, ARG1, h / home)

Decoded in 115,388 microseconds
Sentence: Looks like we still need to train more outdoors . "

Oracle Span 1:  Looks => look-02
Oracle Span 2:  more => more
Oracle Span 3:  need => need-01
Oracle Span 4:  outdoors => outdoor
Oracle Span 5:  still => still
Oracle Span 6:  train => train-01
Oracle Span 7:  we => we
Spans:
Span 0-1:  Looks => lock-01
Span 7-8:  more => more
Span 4-5:  need => need-01
Span 3-4:  still => still
Span 6-7:  train => train-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Oracle Span 0-1:  Looks => look-02
Oracle Span 7-8:  more => more
Oracle Span 4-5:  need => need-01
Oracle Span 8-9:  outdoors => outdoor
Oracle Span 3-4:  still => still
Oracle Span 6-7:  train => train-01
Oracle Span 2-3:  we => we

Dependencies:
1	Looks	_	NNS	NNS	_	2	nsubj	_	_
2	like	_	VBP	VBP	_	0	root	_	_
3	we	_	PRP	PRP	_	5	nsubj	_	_
4	still	_	RB	RB	_	5	advmod	_	_
5	need	_	VBP	VBP	_	2	ccomp	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	train	_	VB	VB	_	5	xcomp	_	_
8	more	_	JJR	JJR	_	9	amod	_	_
9	outdoors	_	NNS	NNS	_	7	dobj	_	_
10	.	_	.	.	_	2	punct	_	_
11	"	_	''	''	_	2	punct	_	_

Oracle:
(l / look-02, ARG1, n / need-01)
(n / need-01, ARG0, w / we)
(n / need-01, ARG1, t / train-01)
(n / need-01, mod, s / still)
(t / train-01, ARG0, w / we)
(t / train-01, ARG2, w / we)
(t / train-01, location, o / outdoor)
(t / train-01, quant, m / more)

Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),need,need-01,false), Span(7,8,List(1),more,more,false), Span(0,1,List(2),Looks,lock-01,false), Span(6,7,List(3),train,train-01,false), Span(3,4,List(4),still,still,false)),Map(2 -> lock-01, 1 -> more, 4 -> still, 0 -> need-01, 3 -> train-01),Map(n -> need-01, t -> train-01, s -> still, m -> more, l -> lock-01))),[Ljava.lang.String;@56a8a23e,Annotation([Ljava.lang.String;@49a46ac2,[Ljava.lang.String;@659d21ad,[Ljava.lang.String;@2033a468),Annotation([Ljava.lang.String;@33195b02,[Ljava.lang.String;@5901d5d9,[Ledu.cmu.lti.nlp.amr.Dependency;@551d171d),Annotation([Ljava.lang.String;@6830e932,[Ljava.lang.String;@11086e7d,[Ljava.lang.String;@4670ce98),Annotation([Ljava.lang.String;@7b689cb4,[Ljava.lang.String;@14fe8392,[Ledu.cmu.lti.nlp.amr.Entity;@46577cf6))
AMR:
(l / lock-01, ARG1, m / more)
(n / need-01, ARG0, l / lock-01)
(n / need-01, ARG1, t / train-01)
(n / need-01, mod, s / still)

Decoded in 1,851,500 microseconds
Sentence: He felt that , there were more new competitors from our country participating in this competition .

Oracle Span 1:  competition => compete-01
Oracle Span 2:  competitors => (person :ARG0-of compete-01)
Oracle Span 3:  country => country
Oracle Span 4:  felt => feel-02
Oracle Span 5:  He => he
Oracle Span 6:  more => more
Oracle Span 7:  new => new
Oracle Span 8:  participating => participate-01
Oracle Span 9:  this => this
Spans:
Span 15-16:  competition => complement-01
Span 8-9:  competitors => (company :ARG0-of compete-01)
Span 11-12:  country => country
Span 1-2:  felt => felt-01
Span 0-1:  He => he
Span 6-7:  more => more
Span 7-8:  new => new
Span 12-13:  participating => participate-01
Span 14-15:  this => this

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 15-16:  competition => compete-01
Oracle Span 8-9:  competitors => (person :ARG0-of compete-01)
Oracle Span 11-12:  country => country
Oracle Span 1-2:  felt => feel-02
Oracle Span 0-1:  He => he
Oracle Span 6-7:  more => more
Oracle Span 7-8:  new => new
Oracle Span 12-13:  participating => participate-01
Oracle Span 14-15:  this => this

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	felt	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	,	_	,	,	_	6	punct	_	_
5	there	_	EX	EX	_	6	expl	_	_
6	were	_	VBD	VBD	_	2	ccomp	_	_
7	more	_	JJR	JJR	_	9	amod	_	_
8	new	_	JJ	JJ	_	9	amod	_	_
9	competitors	_	NNS	NNS	_	6	nsubj	_	_
10	from	_	IN	IN	_	6	prep	_	_
11	our	_	PRP$	PRP$	_	12	poss	_	_
12	country	_	NN	NN	_	10	pobj	_	_
13	participating	_	VBG	VBG	_	12	vmod	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	this	_	DT	DT	_	16	det	_	_
16	competition	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(c / compete-01, ARG0, p / person)
(c3 / compete-01, mod, t / this)
(f / feel-02, ARG0, h / he)
(f / feel-02, ARG1, p / person)
(p / person, mod, n / new)
(p / person, quant, m / more)
(p / person, source, c2 / country)
(p2 / participate-01, ARG0, p / person)
(p2 / participate-01, ARG1, c3 / compete-01)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),participating,participate-01,false), Span(8,9,List(2, 1),competitors,(company :ARG0-of compete-01),false), Span(0,1,List(3),He,he,false), Span(11,12,List(4),country,country,false), Span(1,2,List(5),felt,felt-01,false), Span(6,7,List(6),more,more,false), Span(7,8,List(7),new,new,false), Span(15,16,List(8),competition,complement-01,false), Span(14,15,List(9),this,this,false)),Map(2 -> compete-01, 5 -> felt-01, 8 -> complement-01, 7 -> new, 1 -> company, 4 -> country, 6 -> more, 9 -> this, 0 -> participate-01, 3 -> he),Map(n -> new, h -> he, t -> this, c4 -> complement-01, m -> more, p -> participate-01, c3 -> country, c -> company, f -> felt-01, c2 -> compete-01))),[Ljava.lang.String;@66de1a22,Annotation([Ljava.lang.String;@6df56a75,[Ljava.lang.String;@1ed4cad9,[Ljava.lang.String;@3803949),Annotation([Ljava.lang.String;@15992c11,[Ljava.lang.String;@53f95a15,[Ledu.cmu.lti.nlp.amr.Dependency;@6bc3d0b1),Annotation([Ljava.lang.String;@690bf6f1,[Ljava.lang.String;@35aea665,[Ljava.lang.String;@2c1e7b37),Annotation([Ljava.lang.String;@59ad705d,[Ljava.lang.String;@6f27b9e7,[Ledu.cmu.lti.nlp.amr.Entity;@2ffaa7e8))
AMR:
(c / company, quant, m / more)
(c2 / compete-01, ARG0, c / company)
(c2 / compete-01, ARG1, n / new)
(c4 / complement-01, ARG1, f / felt-01)
(c4 / complement-01, mod, t / this)
(f / felt-01, ARG0, h / he)
(f / felt-01, ARG1, c / company)
(p / participate-01, ARG0, c3 / country)
(p / participate-01, ARG1, c4 / complement-01)

Decoded in 2,970,940 microseconds
Sentence: They still lack experience in international competitions .

Oracle Span 1:  competitions => compete-01
Oracle Span 2:  experience => experience-01
Oracle Span 3:  international => international
Oracle Span 4:  lack => lack-01
Oracle Span 5:  still => still
Oracle Span 6:  They => they
Spans:
Span 6-7:  competitions => competition
Span 3-4:  experience => experience-01
Span 5-6:  international => international
Span 2-3:  lack => lack-01
Span 1-2:  still => still
Span 0-1:  They => they

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 6-7:  competitions => compete-01
Oracle Span 3-4:  experience => experience-01
Oracle Span 5-6:  international => international
Oracle Span 2-3:  lack => lack-01
Oracle Span 1-2:  still => still
Oracle Span 0-1:  They => they

Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	still	_	RB	RB	_	3	advmod	_	_
3	lack	_	VBP	VBP	_	0	root	_	_
4	experience	_	NN	NN	_	3	dobj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	international	_	JJ	JJ	_	7	amod	_	_
7	competitions	_	NNS	NNS	_	5	pobj	_	_
8	.	_	.	.	_	3	punct	_	_

Oracle:
(c / compete-01, mod, i / international)
(e / experience-01, ARG0, t / they)
(e / experience-01, ARG1, c / compete-01)
(l / lack-01, ARG0, t / they)
(l / lack-01, ARG1, e / experience-01)
(l / lack-01, time, s / still)

Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),experience,experience-01,false), Span(6,7,List(1),competitions,competition,false), Span(5,6,List(2),international,international,false), Span(0,1,List(3),They,they,false), Span(1,2,List(4),still,still,false), Span(2,3,List(5),lack,lack-01,false)),Map(2 -> international, 5 -> lack-01, 1 -> competition, 4 -> still, 0 -> experience-01, 3 -> they),Map(e -> experience-01, t -> they, s -> still, i -> international, l -> lack-01, c -> competition))),[Ljava.lang.String;@26dc158c,Annotation([Ljava.lang.String;@3080b742,[Ljava.lang.String;@70011d4a,[Ljava.lang.String;@7322d937),Annotation([Ljava.lang.String;@3594c2aa,[Ljava.lang.String;@9b59fd,[Ledu.cmu.lti.nlp.amr.Dependency;@7808ffe9),Annotation([Ljava.lang.String;@1d067abe,[Ljava.lang.String;@e147a26,[Ljava.lang.String;@549a9ea8),Annotation([Ljava.lang.String;@6b52c465,[Ljava.lang.String;@452f803b,[Ledu.cmu.lti.nlp.amr.Entity;@684707f2))
AMR:
(c / competition, mod, i / international)
(e / experience-01, ARG1, c / competition)
(l / lack-01, ARG0, t / they)
(l / lack-01, ARG1, e / experience-01)
(l / lack-01, mod, s / still)

Decoded in 1,662,063 microseconds
Sentence: The preliminary competition for the women 's 10 - meter platform diving will be held this afternoon .

Oracle Span 1:  10 => 10
Oracle Span 2:  afternoon => afternoon
Oracle Span 3:  competition => compete-01
Oracle Span 4:  diving => dive-01
Oracle Span 5:  held => hold-04
Oracle Span 6:  meter => (distance-quantity :unit meter)
Oracle Span 7:  platform => platform
Oracle Span 8:  preliminary => preliminary
Oracle Span 9:  this => this
Oracle Span 10:  women => woman
Spans:
Span 16-17:  afternoon => afternoon
Span 2-3:  competition => complement-01
Span 11-12:  diving => ding-01
Span 9-10:  meter => meter
Span 10-11:  platform => platform
Span 1-2:  preliminary => preliminary
Span 0-1:  The => 1
Span 15-16:  this => this
Span 5-6:  women => woman

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 7-8:  10 => 10
Oracle Span 16-17:  afternoon => afternoon
Oracle Span 2-3:  competition => compete-01
Oracle Span 11-12:  diving => dive-01
Oracle Span 14-15:  held => hold-04
Oracle Span 9-10:  meter => (distance-quantity :unit meter)
Oracle Span 10-11:  platform => platform
Oracle Span 1-2:  preliminary => preliminary
Oracle Span 15-16:  this => this
Oracle Span 5-6:  women => woman

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	preliminary	_	JJ	JJ	_	3	amod	_	_
3	competition	_	NN	NN	_	8	nsubj	_	_
4	for	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	women	_	NNS	NNS	_	4	pobj	_	_
7	's	_	VBZ	VBZ	_	8	cop	_	_
8	10	_	CD	CD	_	0	root	_	_
9	-	_	:	:	_	8	punct	_	_
10	meter	_	NN	NN	_	12	nn	_	_
11	platform	_	NN	NN	_	12	nn	_	_
12	diving	_	NN	NN	_	15	nsubjpass	_	_
13	will	_	MD	MD	_	15	aux	_	_
14	be	_	VB	VB	_	15	auxpass	_	_
15	held	_	VBN	VBN	_	8	parataxis	_	_
16	this	_	DT	DT	_	17	det	_	_
17	afternoon	_	NN	NN	_	15	tmod	_	_
18	.	_	.	.	_	8	punct	_	_

Oracle:
(a / afternoon, mod, t / this)
(c / compete-01, mod, d2 / dive-01)
(c / compete-01, mod, p / preliminary)
(d2 / dive-01, ARG0, w / woman)
(d2 / dive-01, mod, p2 / platform)
(d3 / distance-quantity, quant, 1 / 10)
(d3 / distance-quantity, unit, m2 / meter)
(h / hold-04, ARG1, c / compete-01)
(h / hold-04, time, a / afternoon)
(p2 / platform, mod, d3 / distance-quantity)

Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),platform,platform,false), Span(0,1,List(1),The,1,false), Span(9,10,List(2),meter,meter,false), Span(16,17,List(3),afternoon,afternoon,false), Span(15,16,List(4),this,this,false), Span(1,2,List(5),preliminary,preliminary,false), Span(11,12,List(6),diving,ding-01,false), Span(5,6,List(7),women,woman,false), Span(2,3,List(8),competition,complement-01,false)),Map(2 -> meter, 5 -> preliminary, 8 -> complement-01, 7 -> woman, 1 -> 1, 4 -> this, 6 -> ding-01, 0 -> platform, 3 -> afternoon),Map(w -> woman, t -> this, p2 -> preliminary, d -> ding-01, m -> meter, 1 -> 1, p -> platform, a -> afternoon, c -> complement-01))),[Ljava.lang.String;@51376a8b,Annotation([Ljava.lang.String;@23dba473,[Ljava.lang.String;@62e2b99b,[Ljava.lang.String;@2a8f7b81),Annotation([Ljava.lang.String;@40063f69,[Ljava.lang.String;@3e80f326,[Ledu.cmu.lti.nlp.amr.Dependency;@4959bb0c),Annotation([Ljava.lang.String;@18db82d5,[Ljava.lang.String;@69570bd0,[Ljava.lang.String;@5077dc1f),Annotation([Ljava.lang.String;@54f28cc6,[Ljava.lang.String;@10fb61a7,[Ledu.cmu.lti.nlp.amr.Entity;@4123f1e3))
AMR:
(a / afternoon, mod, t / this)
(c / complement-01, ARG1, w / woman)
(c / complement-01, ARG6, 1 / 1)
(c / complement-01, mod, p2 / preliminary)
(d / ding-01, ARG0, 1 / 1)
(d / ding-01, ARG1, p / platform)
(d / ding-01, ARG6, a / afternoon)
(d / ding-01, mod, m / meter)

Decoded in 2,235,440 microseconds
Sentence: Mingxia Fu , who won the championship for our country at the World Championship and the Olympic Games , and the competitor from Hebei , Bin Chi , who won the championship at the World Cup will participate in the competition .

Oracle Span 1:  and => and
Oracle Span 2:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 3:  championship => championship
Oracle Span 4:  championship => championship
Oracle Span 5:  competition => compete-01
Oracle Span 6:  competitor => compete-01
Oracle Span 7:  country => country
Oracle Span 8:  Hebei => (province :name (name :op "Hebei"))
Oracle Span 9:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 10:  Olympic Games => (game :name (name :op "Games" :op "Olympic"))
Oracle Span 11:  participate => participate-01
Oracle Span 12:  won => win-01
Oracle Span 13:  won => win-01
Oracle Span 14:  World Championship => (game :name (name :op "Championship" :op "World"))
Oracle Span 15:  World Cup => (game :name (name :op "Cup" :op "World"))
NER Entity: (person :name (name :op "Mingxia" :op "Fu"))
NER Entity: (thing :name (name :op "World" :op "Championship"))
NER Entity: (thing :name (name :op "Olympic" :op "Games"))
NER Entity: (person :name (name :op "Bin" :op "Chi"))
NER Entity: (country :name (name :op "Hebei"))
NER Entity: (thing :name (name :op "World" :op "Cup"))
Spans:
Span 14-15:  and => and
Span 19-20:  and => and
Span 25-27:  Bin Chi => (person :name (name :op "Bin" :op "Chi"))
Span 40-41:  competition => complement-01
Span 21-22:  competitor => (company :ARG0-of compete-01)
Span 9-10:  country => country
Span 23-24:  Hebei => (province :name (name :op "Hebei"))
Span 0-2:  Mingxia Fu => (person :name (name :op "Mingxia" :op "Fu"))
Span 16-18:  Olympic Games => (game :name (name :op "Olympic" :op "Games"))
Span 37-38:  participate => participate-01
Span 15-16:  the => (country :name (name :op "North"))
Span 12-13:  World => (war :name (name :op "World"))
Span 34-36:  World Cup => (game :name (name :op "World" :op "Cup"))

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 25-27:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 6-7:  championship => championship
Oracle Span 31-32:  championship => championship
Oracle Span 40-41:  competition => compete-01
Oracle Span 21-22:  competitor => compete-01
Oracle Span 9-10:  country => country
Oracle Span 23-24:  Hebei => (province :name (name :op "Hebei"))
Oracle Span 0-2:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 16-18:  Olympic Games => (game :name (name :op "Games" :op "Olympic"))
Oracle Span 37-38:  participate => participate-01
Oracle Span 4-5:  won => win-01
Oracle Span 29-30:  won => win-01
Oracle Span 12-14:  World Championship => (game :name (name :op "Championship" :op "World"))
Oracle Span 34-36:  World Cup => (game :name (name :op "Cup" :op "World"))

Dependencies:
1	Mingxia	_	NNP	NNP	_	2	nn	_	_
2	Fu	_	NNP	NNP	_	38	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	who	_	WP	WP	_	5	nsubj	_	_
5	won	_	VBD	VBD	_	2	rcmod	_	_
6	the	_	DT	DT	_	7	det	_	_
7	championship	_	NN	NN	_	5	dobj	_	_
8	for	_	IN	IN	_	5	prep	_	_
9	our	_	PRP$	PRP$	_	10	poss	_	_
10	country	_	NN	NN	_	8	pobj	_	_
11	at	_	IN	IN	_	5	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	World	_	NNP	NNP	_	14	nn	_	_
14	Championship	_	NNP	NNP	_	11	pobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	the	_	DT	DT	_	18	det	_	_
17	Olympic	_	NNP	NNP	_	18	nn	_	_
18	Games	_	NNPS	NNPS	_	14	conj	_	_
19	,	_	,	,	_	2	punct	_	_
20	and	_	CC	CC	_	2	cc	_	_
21	the	_	DT	DT	_	22	det	_	_
22	competitor	_	NN	NN	_	2	conj	_	_
23	from	_	IN	IN	_	22	prep	_	_
24	Hebei	_	NNP	NNP	_	23	pobj	_	_
25	,	_	,	,	_	2	punct	_	_
26	Bin	_	NNP	NNP	_	27	nn	_	_
27	Chi	_	NNP	NNP	_	2	appos	_	_
28	,	_	,	,	_	2	punct	_	_
29	who	_	WP	WP	_	30	nsubj	_	_
30	won	_	VBD	VBD	_	2	rcmod	_	_
31	the	_	DT	DT	_	32	det	_	_
32	championship	_	NN	NN	_	30	dobj	_	_
33	at	_	IN	IN	_	30	prep	_	_
34	the	_	DT	DT	_	36	det	_	_
35	World	_	NNP	NNP	_	36	nn	_	_
36	Cup	_	NNP	NNP	_	33	pobj	_	_
37	will	_	MD	MD	_	38	aux	_	_
38	participate	_	VB	VB	_	0	root	_	_
39	in	_	IN	IN	_	38	prep	_	_
40	the	_	DT	DT	_	41	det	_	_
41	competition	_	NN	NN	_	39	pobj	_	_
42	.	_	.	.	_	38	punct	_	_

Oracle:
(a / and, op, p4 / person)
(a / and, op, p5 / person)
(c3 / compete-01, ARG0, p5 / person)
(g2 / game, name, n2 / name)
(g3 / game, name, n3 / name)
(g4 / game, name, n6 / name)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n2 / name, op, "Championship")
(n2 / name, op, "World")
(n3 / name, op, "Games")
(n3 / name, op, "Olympic")
(n4 / name, op, "Bin")
(n4 / name, op, "Chi")
(n5 / name, op, "Hebei")
(n6 / name, op, "Cup")
(n6 / name, op, "World")
(p / participate-01, ARG0, a / and)
(p / participate-01, ARG1, c5 / compete-01)
(p2 / province, name, n5 / name)
(p4 / person, name, n / name)
(p5 / person, name, n4 / name)
(p5 / person, source, p2 / province)
(w3 / win-01, ARG0, p4 / person)
(w3 / win-01, ARG1, c / championship)
(w3 / win-01, beneficiary, c2 / country)
(w3 / win-01, location, g2 / game)
(w3 / win-01, location, g3 / game)
(w5 / win-01, ARG0, p5 / person)
(w5 / win-01, ARG1, c4 / championship)
(w5 / win-01, location, g4 / game)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),country,country,false), Span(25,27,List(4, 3, 2, 1),Bin Chi,(person :name (name :op "Bin" :op "Chi")),false), Span(0,2,List(8, 7, 6, 5),Mingxia Fu,(person :name (name :op "Mingxia" :op "Fu")),false), Span(12,13,List(11, 10, 9),World,(war :name (name :op "World")),false), Span(34,36,List(15, 14, 13, 12),World Cup,(game :name (name :op "World" :op "Cup")),false), Span(14,15,List(16),and,and,false), Span(15,16,List(19, 18, 17),the,(country :name (name :op "North")),false), Span(23,24,List(22, 21, 20),Hebei,(province :name (name :op "Hebei")),false), Span(21,22,List(24, 23),competitor,(company :ARG0-of compete-01),false), Span(19,20,List(25),and,and,false), Span(37,38,List(26),participate,participate-01,false), Span(16,18,List(30, 29, 28, 27),Olympic Games,(game :name (name :op "Olympic" :op "Games")),false), Span(40,41,List(31),competition,complement-01,false)),Map(30 -> "Games", 2 -> name, 5 -> person, 27 -> game, 12 -> game, 8 -> "Fu", 15 -> "Cup", 21 -> name, 18 -> name, 24 -> compete-01, 7 -> "Mingxia", 1 -> person, 17 -> country, 23 -> company, 26 -> participate-01, 4 -> "Chi", 11 -> "World", 14 -> "World", 29 -> "Olympic", 20 -> province, 28 -> name, 6 -> name, 9 -> war, 0 -> country, 22 -> "Hebei", 16 -> and, 19 -> "North", 10 -> name, 3 -> "Bin", 31 -> complement-01, 25 -> and, 13 -> name),Map(n -> name, w -> war, n7 -> name, p2 -> person, c4 -> compete-01, n4 -> name, g2 -> game, p -> person, g -> game, c3 -> company, n3 -> name, a -> and, p4 -> participate-01, n6 -> name, a2 -> and, c -> country, p3 -> province, n2 -> name, c2 -> country, c5 -> complement-01, n5 -> name))),[Ljava.lang.String;@5832feb4,Annotation([Ljava.lang.String;@719f1a7e,[Ljava.lang.String;@6f51372a,[Ljava.lang.String;@c2968da),Annotation([Ljava.lang.String;@43a1f0b5,[Ljava.lang.String;@4ae45e55,[Ledu.cmu.lti.nlp.amr.Dependency;@2cead844),Annotation([Ljava.lang.String;@6bc21abb,[Ljava.lang.String;@27aa7b2e,[Ljava.lang.String;@4fd48f78),Annotation([Ljava.lang.String;@3506463e,[Ljava.lang.String;@4eea95e7,[Ledu.cmu.lti.nlp.amr.Entity;@3a6df41f))
AMR:
(a / and, op, g2 / game)
(a2 / and, op, c3 / company)
(a2 / and, op, g2 / game)
(a2 / and, op, p2 / person)
(c / country, location, w / war)
(c2 / country, name, n5 / name)
(c4 / compete-01, ARG0, c3 / company)
(c4 / compete-01, ARG1, p3 / province)
(c5 / complement-01, ARG0, p2 / person)
(c5 / complement-01, ARG1, g / game)
(g / game, name, n4 / name)
(g2 / game, mod, c2 / country)
(g2 / game, name, n7 / name)
(n / name, op, "Bin")
(n / name, op, "Chi")
(n2 / name, op, "Fu")
(n2 / name, op, "Mingxia")
(n3 / name, op, "World")
(n4 / name, op, "Cup")
(n4 / name, op, "World")
(n5 / name, op, "North")
(n6 / name, op, "Hebei")
(n7 / name, op, "Games")
(n7 / name, op, "Olympic")
(p / person, name, n / name)
(p2 / person, location, c / country)
(p2 / person, name, n2 / name)
(p3 / province, name, n6 / name)
(p4 / participate-01, ARG0, p / person)
(p4 / participate-01, ARG1, c5 / complement-01)
(w / war, name, n3 / name)

Decoded in 2,716,004 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@580a5f6b,Annotation([Ljava.lang.String;@576ad75b,[Ljava.lang.String;@71fb1fa6,[Ljava.lang.String;@2f42fc27),Annotation([Ljava.lang.String;@25b91fa3,[Ljava.lang.String;@2468d440,[Ledu.cmu.lti.nlp.amr.Dependency;@d47e944),Annotation([Ljava.lang.String;@355c9f0f,[Ljava.lang.String;@5875da00,[Ljava.lang.String;@3a5dcf9a),Annotation([Ljava.lang.String;@8e21c5c,[Ljava.lang.String;@59975ea8,[Ledu.cmu.lti.nlp.amr.Entity;@2fc43a40))
AMR:


Decoded in 46,953 microseconds
Sentence: Xinhua News Agency , Rome , September 1st , by reporters Changrui Huang and Aiguo Yang

Oracle Span 1:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Oracle Span 2:  and => and
Oracle Span 3:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Oracle Span 4:  reporters => report-01
Oracle Span 5:  Rome => (city :name (name :op "Rome"))
Oracle Span 6:  September => 9
Oracle Span 7:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Changrui" :op "Huang"))
NER Entity: (person :name (name :op "Aiguo" :op "Yang"))
NER Entity: (country :name (name :op "Rome"))
Spans:
Span 13-14:  and => and
Span 11-13:  Changrui Huang => (person :name (name :op "Changrui" :op "Huang"))
Span 4-5:  Rome => (city :name (name :op "Rome"))
Span 0-3:  Xinhua News Agency => (publication :name (name :op "News" :op "Agency" :op "Xinhua"))
Span 0-7:  Xinhua News Agency , Rome , September => (date-entity :month 9 :day 1)
Span 15-16:  Yang => "Yang"

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 14-16:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Oracle Span 13-14:  and => and
Oracle Span 11-13:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Oracle Span 10-11:  reporters => report-01
Oracle Span 4-5:  Rome => (city :name (name :op "Rome"))
Oracle Span 6-7:  September => 9
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Rome	_	NNP	NNP	_	3	appos	_	_
6	,	_	,	,	_	3	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporters	_	NNS	NNS	_	10	pobj	_	_
12	Changrui	_	NNP	NNP	_	13	nn	_	_
13	Huang	_	NNP	NNP	_	3	dep	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	Aiguo	_	NNP	NNP	_	16	nn	_	_
16	Yang	_	NNP	NNP	_	13	conj	_	_

Oracle:
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / person)
(c4 / city, name, n4 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Changrui")
(n2 / name, op, "Huang")
(n3 / name, op, "Aiguo")
(n3 / name, op, "Yang")
(n4 / name, op, "Rome")
(p / publication, name, n / name)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(r2 / report-01, ARG0, p3 / person)
(r2 / report-01, ARG0, p4 / person)

Input(Some(Graph(null,ArrayBuffer(Span(0,7,List(2, 1, 0),Xinhua News Agency , Rome , September,(date-entity :month 9 :day 1),false), Span(15,16,List(3),Yang,"Yang",false), Span(11,13,List(7, 6, 5, 4),Changrui Huang,(person :name (name :op "Changrui" :op "Huang")),false), Span(13,14,List(8),and,and,false), Span(4,5,List(11, 10, 9),Rome,(city :name (name :op "Rome")),false), Span(0,3,List(16, 15, 14, 13, 12),Xinhua News Agency,(publication :name (name :op "News" :op "Agency" :op "Xinhua")),false)),Map(2 -> 1, 5 -> name, 12 -> publication, 15 -> "Agency", 8 -> and, 7 -> "Huang", 1 -> 9, 4 -> person, 11 -> "Rome", 14 -> "News", 6 -> "Changrui", 0 -> date-entity, 9 -> city, 16 -> "Xinhua", 3 -> "Yang", 10 -> name, 13 -> name),Map(n -> name, Y -> "Yang", p2 -> publication, d -> date-entity, p -> person, 1 -> 1, n3 -> name, a -> and, c -> city, 9 -> 9, n2 -> name))),[Ljava.lang.String;@90d971e,Annotation([Ljava.lang.String;@5a01841e,[Ljava.lang.String;@12a79656,[Ljava.lang.String;@63e56f01),Annotation([Ljava.lang.String;@635b104,[Ljava.lang.String;@50c2e4a8,[Ledu.cmu.lti.nlp.amr.Dependency;@7ef9cdc0),Annotation([Ljava.lang.String;@362c2879,[Ljava.lang.String;@1d3a1229,[Ljava.lang.String;@5a1a5282),Annotation([Ljava.lang.String;@6abd13cc,[Ljava.lang.String;@3d058102,[Ledu.cmu.lti.nlp.amr.Entity;@706377d1))
AMR:
(Y / "Yang", mod, p2 / publication)
(a / and, op, Y / "Yang")
(a / and, op, p / person)
(a / and, time, d / date-entity)
(c / city, name, n2 / name)
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 9 / 9)
(n / name, op, "Changrui")
(n / name, op, "Huang")
(n2 / name, op, "Rome")
(n3 / name, op, "Agency")
(n3 / name, op, "News")
(n3 / name, op, "Xinhua")
(p / person, name, n / name)
(p2 / publication, location, c / city)
(p2 / publication, name, n3 / name)

Decoded in 2,014,976 microseconds
Sentence: The performance of the female competitors of the Chinese diving team , Mingxia Fu and Bin Chi , in the first 6 rounds of the 10 - meter platform diving preliminary competition at the Seventh World Swimming Championships held here today was ideal , and hopes of entering the heats are in sight .

Oracle Span 1:  10 => 10
Oracle Span 2:  6 => 6
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 6:  Chinese => (country :name (name :op "China"))
Oracle Span 7:  competition => compete-01
Oracle Span 8:  competitors => compete-01
Oracle Span 9:  diving => dive-01
Oracle Span 10:  diving => dive-01
Oracle Span 11:  entering => enter-01
Oracle Span 12:  female => female
Oracle Span 13:  heats => heat
Oracle Span 14:  held => hold-04
Oracle Span 15:  here => here
Oracle Span 16:  hopes => hope-01
Oracle Span 17:  ideal => ideal
Oracle Span 18:  meter => (distance-quantity :unit meter)
Oracle Span 19:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 20:  performance => perform-01
Oracle Span 21:  platform => platform
Oracle Span 22:  preliminary => preliminary
Oracle Span 23:  rounds => round
Oracle Span 24:  Seventh World Swimming Championships => (game :name (name :op "Championships" :op "Swimming" :op "World" :op "Seventh"))
Oracle Span 25:  team => team
Oracle Span 26:  today => today
NER Entity: (person :name (name :op "Mingxia" :op "Fu"))
NER Entity: (person :name (name :op "Bin" :op "Chi"))
NER Entity: (thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championships"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 14-15:  and => and
Span 44-45:  and => and
Span 15-17:  Bin Chi => (person :name (name :op "Bin" :op "Chi"))
Span 8-9:  Chinese => (country :name (name :op "China"))
Span 31-32:  competition => complement-01
Span 5-6:  competitors => (company :ARG0-of compete-01)
Span 29-30:  diving => ding-01
Span 47-48:  entering => enter-01
Span 4-5:  female => female
Span 49-50:  heats => heat-01
Span 39-40:  here => here
Span 45-46:  hopes => hope-01
Span 42-43:  ideal => ideal
Span 27-28:  meter => meter
Span 12-14:  Mingxia Fu => (person :name (name :op "Mingxia" :op "Fu"))
Span 1-2:  performance => perform-01
Span 28-29:  platform => platform
Span 30-31:  preliminary => preliminary
Span 22-23:  rounds => round
Span 52-53:  sight => sight
Span 10-11:  team => team
Span 0-1:  The => 1
Span 0-21:  The performance of the female competitors of the Chinese diving team , Mingxia Fu and Bin Chi , in the first => (ordinal-entity :value 1)
Span 0-35:  The performance of the female competitors of the Chinese diving team , Mingxia Fu and Bin Chi , in the first 6 rounds of the 10 - meter platform diving preliminary competition at the Seventh => (ordinal-entity :value 1)
Span 0-41:  The performance of the female competitors of the Chinese diving team , Mingxia Fu and Bin Chi , in the first 6 rounds of the 10 - meter platform diving preliminary competition at the Seventh World Swimming Championships held here today => (date-entity :time today)

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Oracle Span 25-26:  10 => 10
Oracle Span 21-22:  6 => 6
Oracle Span 14-15:  and => and
Oracle Span 44-45:  and => and
Oracle Span 15-17:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 8-9:  Chinese => (country :name (name :op "China"))
Oracle Span 31-32:  competition => compete-01
Oracle Span 5-6:  competitors => compete-01
Oracle Span 9-10:  diving => dive-01
Oracle Span 29-30:  diving => dive-01
Oracle Span 47-48:  entering => enter-01
Oracle Span 4-5:  female => female
Oracle Span 49-50:  heats => heat
Oracle Span 38-39:  held => hold-04
Oracle Span 39-40:  here => here
Oracle Span 45-46:  hopes => hope-01
Oracle Span 42-43:  ideal => ideal
Oracle Span 27-28:  meter => (distance-quantity :unit meter)
Oracle Span 12-14:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 1-2:  performance => perform-01
Oracle Span 28-29:  platform => platform
Oracle Span 30-31:  preliminary => preliminary
Oracle Span 22-23:  rounds => round
Oracle Span 34-38:  Seventh World Swimming Championships => (game :name (name :op "Championships" :op "Swimming" :op "World" :op "Seventh"))
Oracle Span 10-11:  team => team
Oracle Span 40-41:  today => today

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	performance	_	NN	NN	_	51	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	female	_	JJ	JJ	_	6	amod	_	_
6	competitors	_	NNS	NNS	_	3	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	11	det	_	_
9	Chinese	_	JJ	JJ	_	11	amod	_	_
10	diving	_	JJ	JJ	_	11	amod	_	_
11	team	_	NN	NN	_	7	pobj	_	_
12	,	_	,	,	_	11	punct	_	_
13	Mingxia	_	NNP	NNP	_	14	nn	_	_
14	Fu	_	NNP	NNP	_	11	conj	_	_
15	and	_	CC	CC	_	11	cc	_	_
16	Bin	_	NNP	NNP	_	17	nn	_	_
17	Chi	_	NNP	NNP	_	11	conj	_	_
18	,	_	,	,	_	6	punct	_	_
19	in	_	IN	IN	_	6	prep	_	_
20	the	_	DT	DT	_	23	det	_	_
21	first	_	JJ	JJ	_	23	amod	_	_
22	6	_	CD	CD	_	23	num	_	_
23	rounds	_	NNS	NNS	_	19	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	10	_	CD	CD	_	24	pobj	_	_
27	-	_	:	:	_	23	punct	_	_
28	meter	_	NN	NN	_	29	nn	_	_
29	platform	_	NN	NN	_	23	conj	_	_
30	diving	_	JJ	JJ	_	32	amod	_	_
31	preliminary	_	JJ	JJ	_	32	amod	_	_
32	competition	_	NN	NN	_	43	nsubj	_	_
33	at	_	IN	IN	_	32	prep	_	_
34	the	_	DT	DT	_	38	det	_	_
35	Seventh	_	NNP	NNP	_	38	nn	_	_
36	World	_	NNP	NNP	_	38	nn	_	_
37	Swimming	_	NNP	NNP	_	38	nn	_	_
38	Championships	_	NNP	NNP	_	33	pobj	_	_
39	held	_	VBN	VBN	_	32	vmod	_	_
40	here	_	RB	RB	_	39	advmod	_	_
41	today	_	NN	NN	_	39	tmod	_	_
42	was	_	VBD	VBD	_	43	cop	_	_
43	ideal	_	JJ	JJ	_	29	rcmod	_	_
44	,	_	,	,	_	23	punct	_	_
45	and	_	CC	CC	_	23	cc	_	_
46	hopes	_	NNS	NNS	_	23	conj	_	_
47	of	_	IN	IN	_	46	prep	_	_
48	entering	_	VBG	VBG	_	47	pcomp	_	_
49	the	_	DT	DT	_	50	det	_	_
50	heats	_	NN	NN	_	48	dobj	_	_
51	are	_	VBP	VBP	_	0	root	_	_
52	in	_	IN	IN	_	51	prep	_	_
53	sight	_	NN	NN	_	52	pobj	_	_
54	.	_	.	.	_	51	punct	_	_

Oracle:
(a / and, op, i / ideal)
(a2 / and, mod, f / female)
(a2 / and, op, p4 / person)
(a2 / and, op, p5 / person)
(c / compete-01, mod, d3 / dive-01)
(c / compete-01, mod, p6 / preliminary)
(c / compete-01, part, r / round)
(c3 / compete-01, ARG0, a2 / and)
(c4 / country, name, n3 / name)
(d2 / dive-01, ARG0, t / team)
(d3 / dive-01, mod, p7 / platform)
(d4 / distance-quantity, quant, 1 / 10)
(d4 / distance-quantity, unit, m3 / meter)
(e2 / enter-01, ARG0, a2 / and)
(e2 / enter-01, ARG1, h4 / heat)
(g / game, name, n4 / name)
(g / game, subevent, c / compete-01)
(h / hold-04, ARG1, c / compete-01)
(h / hold-04, location, h2 / here)
(h / hold-04, time, t2 / today)
(h3 / hope-01, ARG1, e2 / enter-01)
(i / ideal, domain, p3 / perform-01)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(n3 / name, op, "China")
(n4 / name, op, "Championships")
(n4 / name, op, "Seventh")
(n4 / name, op, "Swimming")
(n4 / name, op, "World")
(p3 / perform-01, ARG0, a2 / and)
(p3 / perform-01, time, r / round)
(p4 / person, name, n / name)
(p5 / person, name, n2 / name)
(p7 / platform, mod, d4 / distance-quantity)
(r / round, quant, 6 / 6)
(t / team, mod, c4 / country)
(t / team, part, a2 / and)

Input(Some(Graph(null,ArrayBuffer(Span(0,21,List(1, 0),The performance of the female competitors of the Chinese diving team , Mingxia Fu and Bin Chi , in the first,(ordinal-entity :value 1),false), Span(8,9,List(4, 3, 2),Chinese,(country :name (name :op "China")),false), Span(45,46,List(5),hopes,hope-01,false), Span(39,40,List(6),here,here,false), Span(15,17,List(10, 9, 8, 7),Bin Chi,(person :name (name :op "Bin" :op "Chi")),false), Span(30,31,List(11),preliminary,preliminary,false), Span(31,32,List(12),competition,complement-01,false), Span(1,2,List(13),performance,perform-01,false), Span(0,41,List(15, 14),The performance of the female competitors of the Chinese diving team , Mingxia Fu and Bin Chi , in the first 6 rounds of the 10 - meter platform diving preliminary competition at the Seventh World Swimming Championships held here today,(date-entity :time today),false), Span(42,43,List(16),ideal,ideal,false), Span(4,5,List(17),female,female,false), Span(29,30,List(18),diving,ding-01,false), Span(0,35,List(20, 19),The performance of the female competitors of the Chinese diving team , Mingxia Fu and Bin Chi , in the first 6 rounds of the 10 - meter platform diving preliminary competition at the Seventh,(ordinal-entity :value 1),false), Span(12,14,List(24, 23, 22, 21),Mingxia Fu,(person :name (name :op "Mingxia" :op "Fu")),false), Span(10,11,List(25),team,team,false), Span(49,50,List(26),heats,heat-01,false), Span(0,1,List(27),The,1,false), Span(14,15,List(28),and,and,false), Span(5,6,List(30, 29),competitors,(company :ARG0-of compete-01),false), Span(52,53,List(31),sight,sight,false), Span(47,48,List(32),entering,enter-01,false), Span(28,29,List(33),platform,platform,false), Span(27,28,List(34),meter,meter,false), Span(44,45,List(35),and,and,false), Span(22,23,List(36),rounds,round,false)),Map(30 -> compete-01, 2 -> country, 5 -> hope-01, 33 -> platform, 27 -> 1, 12 -> complement-01, 8 -> name, 15 -> today, 36 -> round, 21 -> person, 18 -> ding-01, 24 -> "Fu", 35 -> and, 7 -> person, 1 -> 1, 17 -> female, 23 -> "Mingxia", 26 -> heat-01, 4 -> "China", 11 -> preliminary, 32 -> enter-01, 14 -> date-entity, 29 -> company, 20 -> 1, 34 -> meter, 28 -> and, 6 -> here, 9 -> "Bin", 0 -> ordinal-entity, 22 -> name, 16 -> ideal, 19 -> ordinal-entity, 10 -> "Chi", 3 -> name, 31 -> sight, 25 -> team, 13 -> perform-01),Map(e -> enter-01, n -> name, h -> hope-01, p5 -> platform, h2 -> here, t -> today, 12 -> 1, p2 -> preliminary, c4 -> compete-01, s -> sight, m -> meter, d -> date-entity, 1 -> 1, p -> person, n3 -> name, a -> and, c3 -> company, p4 -> person, d2 -> ding-01, o2 -> ordinal-entity, t2 -> team, r -> round, a2 -> and, i -> ideal, c -> country, h3 -> heat-01, f -> female, o -> ordinal-entity, p3 -> perform-01, c2 -> complement-01, n2 -> name, 13 -> 1))),[Ljava.lang.String;@3c4c0777,Annotation([Ljava.lang.String;@25c226e6,[Ljava.lang.String;@25478ec4,[Ljava.lang.String;@9977e27),Annotation([Ljava.lang.String;@553cb7dd,[Ljava.lang.String;@617d4e8a,[Ledu.cmu.lti.nlp.amr.Dependency;@7855ddcf),Annotation([Ljava.lang.String;@4a81f2a4,[Ljava.lang.String;@7a333676,[Ljava.lang.String;@71b13ea4),Annotation([Ljava.lang.String;@27dc2ef8,[Ljava.lang.String;@620dfc75,[Ledu.cmu.lti.nlp.amr.Entity;@1eef6c4))
AMR:
(a / and, op, p / person)
(a / and, op, p4 / person)
(a2 / and, op, d / date-entity)
(a2 / and, op, h / hope-01)
(a2 / and, op, o2 / ordinal-entity)
(a2 / and, op, p5 / platform)
(a2 / and, op, r / round)
(c / country, name, n / name)
(c2 / complement-01, ARG1, p5 / platform)
(c2 / complement-01, mod, p2 / preliminary)
(c3 / company, mod, f / female)
(c4 / compete-01, ARG0, c3 / company)
(c4 / compete-01, ARG1, a / and)
(d / date-entity, time, t / today)
(d2 / ding-01, ARG1, c2 / complement-01)
(e / enter-01, ARG1, h3 / heat-01)
(h / hope-01, ARG0, p / person)
(h / hope-01, ARG1, e / enter-01)
(h3 / heat-01, ARG1, h2 / here)
(h3 / heat-01, ARG2, s / sight)
(i / ideal, domain, c2 / complement-01)
(n / name, op, "China")
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(n3 / name, op, "Fu")
(n3 / name, op, "Mingxia")
(o / ordinal-entity, value, 1 / 1)
(o2 / ordinal-entity, value, 12 / 1)
(p / person, name, n2 / name)
(p3 / perform-01, ARG0, c3 / company)
(p3 / perform-01, ARG1, o / ordinal-entity)
(p3 / perform-01, ARG6, 13 / 1)
(p4 / person, name, n3 / name)
(p5 / platform, mod, m / meter)
(t2 / team, mod, c / country)
(t2 / team, poss, c3 / company)

Decoded in 10,906,766 microseconds
Sentence: At the time this reporter dispatched , in the first 6 rounds of competition , Mingxia Fu and Bin Chi are temporarily occupying the first and third positions with total scores of 339.12 and 290.19 points respectively .

Oracle Span 1:  290.19 => 290.19
Oracle Span 2:  339.12 => 339.12
Oracle Span 3:  6 => 6
Oracle Span 4:  and => and
Oracle Span 5:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 6:  competition => compete-01
Oracle Span 7:  dispatched => dispatch-01
Oracle Span 8:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 9:  occupying => occupy-01
Oracle Span 10:  points => point
Oracle Span 11:  positions => position
Oracle Span 12:  reporter => (person :ARG0-of report-01)
Oracle Span 13:  respectively => respective
Oracle Span 14:  rounds => round
Oracle Span 15:  scores => score-01
Oracle Span 16:  temporarily => temporary
Oracle Span 17:  this => this
Oracle Span 18:  total => total-01
NER Entity: (person :name (name :op "Mingxia" :op "Fu"))
NER Entity: (person :name (name :op "Bin" :op "Chi"))
Spans:
Span 17-18:  and => and
Span 33-34:  and => and
Span 0-1:  At => 1
Span 0-10:  At the time this reporter dispatched , in the first => (ordinal-entity :value 1)
Span 0-25:  At the time this reporter dispatched , in the first 6 rounds of competition , Mingxia Fu and Bin Chi are temporarily occupying the first => (ordinal-entity :value 1)
Span 18-20:  Bin Chi => (person :name (name :op "Bin" :op "Chi"))
Span 13-14:  competition => complement-01
Span 5-6:  dispatched => dispatch-01
Span 15-17:  Mingxia Fu => (name :op "Mingxia" :op "Fu")
Span 22-23:  occupying => occupy-01
Span 35-36:  points => point
Span 27-28:  positions => position
Span 4-5:  reporter => reporter
Span 36-37:  respectively => respective
Span 11-12:  rounds => round
Span 30-31:  scores => score
Span 21-22:  temporarily => temporary
Span 3-4:  this => this
Span 2-3:  time => time
Span 29-30:  total => total

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 34-35:  290.19 => 290.19
Oracle Span 32-33:  339.12 => 339.12
Oracle Span 10-11:  6 => 6
Oracle Span 17-18:  and => and
Oracle Span 18-20:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 13-14:  competition => compete-01
Oracle Span 5-6:  dispatched => dispatch-01
Oracle Span 15-17:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 22-23:  occupying => occupy-01
Oracle Span 35-36:  points => point
Oracle Span 27-28:  positions => position
Oracle Span 4-5:  reporter => (person :ARG0-of report-01)
Oracle Span 36-37:  respectively => respective
Oracle Span 11-12:  rounds => round
Oracle Span 30-31:  scores => score-01
Oracle Span 21-22:  temporarily => temporary
Oracle Span 3-4:  this => this
Oracle Span 29-30:  total => total-01

Dependencies:
1	At	_	IN	IN	_	6	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	time	_	NN	NN	_	1	pobj	_	_
4	this	_	DT	DT	_	5	det	_	_
5	reporter	_	NN	NN	_	6	nsubj	_	_
6	dispatched	_	VBD	VBD	_	23	ccomp	_	_
7	,	_	,	,	_	6	punct	_	_
8	in	_	IN	IN	_	6	prep	_	_
9	the	_	DT	DT	_	12	det	_	_
10	first	_	JJ	JJ	_	12	amod	_	_
11	6	_	CD	CD	_	12	num	_	_
12	rounds	_	NNS	NNS	_	8	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	competition	_	NN	NN	_	13	pobj	_	_
15	,	_	,	,	_	23	punct	_	_
16	Mingxia	_	NNP	NNP	_	17	nn	_	_
17	Fu	_	NNP	NNP	_	23	nsubj	_	_
18	and	_	CC	CC	_	17	cc	_	_
19	Bin	_	NNP	NNP	_	20	nn	_	_
20	Chi	_	NNP	NNP	_	17	conj	_	_
21	are	_	VBP	VBP	_	23	aux	_	_
22	temporarily	_	RB	RB	_	23	advmod	_	_
23	occupying	_	VBG	VBG	_	0	root	_	_
24	the	_	DT	DT	_	28	det	_	_
25	first	_	JJ	JJ	_	28	amod	_	_
26	and	_	CC	CC	_	25	cc	_	_
27	third	_	JJ	JJ	_	25	conj	_	_
28	positions	_	NNS	NNS	_	23	dobj	_	_
29	with	_	IN	IN	_	23	prep	_	_
30	total	_	JJ	JJ	_	31	amod	_	_
31	scores	_	NNS	NNS	_	29	pobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	339.12	_	CD	CD	_	36	nn	_	_
34	and	_	CC	CC	_	33	cc	_	_
35	290.19	_	CD	CD	_	33	conj	_	_
36	points	_	NNS	NNS	_	32	pobj	_	_
37	respectively	_	RB	RB	_	23	advmod	_	_
38	.	_	.	.	_	23	punct	_	_

Oracle:
(a / and, duration, t3 / temporary)
(a / and, mod, r / respective)
(a / and, op, o2 / occupy-01)
(a / and, time, d / dispatch-01)
(a / and, time, r3 / round)
(c / compete-01, part, r3 / round)
(d / dispatch-01, ARG0, p9 / person)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(o2 / occupy-01, ARG0, p6 / person)
(o2 / occupy-01, ARG1, p7 / position)
(o2 / occupy-01, ARG2, s2 / score-01)
(p3 / person, name, n / name)
(p6 / person, name, n2 / name)
(p8 / point, quant, 2 / 290.19)
(p9 / person, mod, t2 / this)
(r2 / report-01, ARG0, p9 / person)
(r3 / round, quant, 6 / 6)
(s2 / score-01, ARG0, p6 / person)
(s2 / score-01, ARG1, p8 / point)
(s2 / score-01, mod, t / total-01)
(t / total-01, ARG2, x / 339.12)

Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),respectively,respective,false), Span(15,17,List(3, 2, 1),Mingxia Fu,(name :op "Mingxia" :op "Fu"),false), Span(35,36,List(4),points,point,false), Span(0,10,List(6, 5),At the time this reporter dispatched , in the first,(ordinal-entity :value 1),false), Span(27,28,List(7),positions,position,false), Span(21,22,List(8),temporarily,temporary,false), Span(5,6,List(9),dispatched,dispatch-01,false), Span(4,5,List(10),reporter,reporter,false), Span(0,25,List(12, 11),At the time this reporter dispatched , in the first 6 rounds of competition , Mingxia Fu and Bin Chi are temporarily occupying the first,(ordinal-entity :value 1),false), Span(29,30,List(13),total,total,false), Span(3,4,List(14),this,this,false), Span(0,1,List(15),At,1,false), Span(2,3,List(16),time,time,false), Span(18,20,List(20, 19, 18, 17),Bin Chi,(person :name (name :op "Bin" :op "Chi")),false), Span(22,23,List(21),occupying,occupy-01,false), Span(30,31,List(22),scores,score,false), Span(13,14,List(23),competition,complement-01,false), Span(11,12,List(24),rounds,round,false), Span(17,18,List(25),and,and,false), Span(33,34,List(26),and,and,false)),Map(2 -> "Mingxia", 5 -> ordinal-entity, 12 -> 1, 8 -> temporary, 15 -> 1, 21 -> occupy-01, 18 -> name, 24 -> round, 7 -> position, 1 -> name, 17 -> person, 23 -> complement-01, 26 -> and, 4 -> point, 11 -> ordinal-entity, 14 -> this, 20 -> "Chi", 6 -> 1, 9 -> dispatch-01, 0 -> respective, 22 -> score, 16 -> time, 19 -> "Bin", 10 -> reporter, 3 -> "Fu", 25 -> and, 13 -> total),Map(n -> name, r3 -> round, t4 -> time, t -> temporary, 12 -> 1, o3 -> occupy-01, p2 -> position, s -> score, d -> dispatch-01, 1 -> 1, t3 -> this, p -> point, r2 -> reporter, a -> and, o2 -> ordinal-entity, t2 -> total, a2 -> and, r -> respective, c -> complement-01, o -> ordinal-entity, p3 -> person, n2 -> name, 13 -> 1))),[Ljava.lang.String;@7b16609f,Annotation([Ljava.lang.String;@7318d113,[Ljava.lang.String;@63c84fd1,[Ljava.lang.String;@61da6b36),Annotation([Ljava.lang.String;@2900fd0a,[Ljava.lang.String;@1c252170,[Ledu.cmu.lti.nlp.amr.Dependency;@3db243e2),Annotation([Ljava.lang.String;@f030cb9,[Ljava.lang.String;@21c558fe,[Ljava.lang.String;@145ec317),Annotation([Ljava.lang.String;@3bdc3f2d,[Ljava.lang.String;@2c2d9a2b,[Ledu.cmu.lti.nlp.amr.Entity;@27a425f8))
AMR:
(13 / 1, op, t4 / time)
(a / and, mod, r / respective)
(a / and, op, c / complement-01)
(a / and, op, d / dispatch-01)
(a / and, op, o / ordinal-entity)
(a / and, op, o3 / occupy-01)
(a / and, op, p3 / person)
(c / complement-01, ARG1, p / point)
(c / complement-01, quant, r3 / round)
(d / dispatch-01, ARG0, r2 / reporter)
(d / dispatch-01, ARG1, s / score)
(d / dispatch-01, location, t4 / time)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n / name, poss, r2 / reporter)
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(o / ordinal-entity, value, 1 / 1)
(o2 / ordinal-entity, calendar, p2 / position)
(o2 / ordinal-entity, value, 12 / 1)
(o3 / occupy-01, ARG1, p2 / position)
(o3 / occupy-01, duration, t / temporary)
(p / point, quant, a2 / and)
(p3 / person, name, n2 / name)
(r2 / reporter, mod, t3 / this)
(s / score, mod, t2 / total)

Decoded in 6,941,130 microseconds
Sentence: If accidents do not occur , their hopes of entering the heats are already in sight .

Oracle Span 1:  accidents => accident
Oracle Span 2:  already => already
Oracle Span 3:  entering => enter-01
Oracle Span 4:  heats => heat
Oracle Span 5:  hopes => hope-01
Spans:
Span 1-2:  accidents => accident
Span 13-14:  already => already
Span 9-10:  entering => enter-01
Span 11-12:  heats => heat-01
Span 7-8:  hopes => hope-01
Span 15-16:  sight => sight

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 1-2:  accidents => accident
Oracle Span 13-14:  already => already
Oracle Span 9-10:  entering => enter-01
Oracle Span 11-12:  heats => heat
Oracle Span 7-8:  hopes => hope-01

Dependencies:
1	If	_	IN	IN	_	5	mark	_	_
2	accidents	_	NNS	NNS	_	5	nsubj	_	_
3	do	_	VBP	VBP	_	5	aux	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	occur	_	VB	VB	_	13	advcl	_	_
6	,	_	,	,	_	13	punct	_	_
7	their	_	PRP$	PRP$	_	8	poss	_	_
8	hopes	_	NNS	NNS	_	13	nsubj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	entering	_	VBG	VBG	_	9	pcomp	_	_
11	the	_	DT	DT	_	12	det	_	_
12	heats	_	NN	NN	_	10	dobj	_	_
13	are	_	VBP	VBP	_	0	root	_	_
14	already	_	RB	RB	_	13	advmod	_	_
15	in	_	IN	IN	_	13	prep	_	_
16	sight	_	NN	NN	_	15	pobj	_	_
17	.	_	.	.	_	13	punct	_	_

Oracle:
(e / enter-01, ARG1, h2 / heat)
(h / hope-01, ARG1, e / enter-01)

Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),entering,enter-01,false), Span(13,14,List(1),already,already,false), Span(7,8,List(2),hopes,hope-01,false), Span(15,16,List(3),sight,sight,false), Span(1,2,List(4),accidents,accident,false), Span(11,12,List(5),heats,heat-01,false)),Map(2 -> hope-01, 5 -> heat-01, 1 -> already, 4 -> accident, 0 -> enter-01, 3 -> sight),Map(e -> enter-01, h -> hope-01, h2 -> heat-01, s -> sight, a -> already, a2 -> accident))),[Ljava.lang.String;@18e31d0c,Annotation([Ljava.lang.String;@612c353a,[Ljava.lang.String;@6402e3fa,[Ljava.lang.String;@59ad948a),Annotation([Ljava.lang.String;@5926e9ce,[Ljava.lang.String;@59a39235,[Ledu.cmu.lti.nlp.amr.Dependency;@2acda7c8),Annotation([Ljava.lang.String;@1ff17fdf,[Ljava.lang.String;@71779d76,[Ljava.lang.String;@34809b57),Annotation([Ljava.lang.String;@73b499e8,[Ljava.lang.String;@67af1fc6,[Ledu.cmu.lti.nlp.amr.Entity;@2afea268))
AMR:
(e / enter-01, ARG0, s / sight)
(e / enter-01, ARG1, h2 / heat-01)
(h / hope-01, ARG1, e / enter-01)
(h / hope-01, ARG6, a / already)
(h2 / heat-01, ARG1, a2 / accident)

Decoded in 2,785,530 microseconds
Sentence: Occupying the second position is the US competitor , Richard .

Oracle Span 1:  competitor => compete-01
Oracle Span 2:  Occupying => occupy-01
Oracle Span 3:  position => position
Oracle Span 4:  Richard => (person :name (name :op "Richard"))
Oracle Span 5:  US => (country :name (name :op "States" :op "United"))
NER Entity: (person :name (name :op "Richard"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 0-1:  Occupying => occupy-01
Span 0-3:  Occupying the second => (ordinal-entity :value 1)
Span 3-4:  position => position
Span 9-10:  Richard => (person :name (name :op "Richard"))
Span 6-7:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 7-8:  competitor => compete-01
Oracle Span 0-1:  Occupying => occupy-01
Oracle Span 3-4:  position => position
Oracle Span 9-10:  Richard => (person :name (name :op "Richard"))
Oracle Span 6-7:  US => (country :name (name :op "States" :op "United"))

Dependencies:
1	Occupying	_	VBG	VBG	_	0	root	_	_
2	the	_	DT	DT	_	4	det	_	_
3	second	_	JJ	JJ	_	4	amod	_	_
4	position	_	NN	NN	_	1	dobj	_	_
5	is	_	VBZ	VBZ	_	1	aux	_	_
6	the	_	DT	DT	_	8	det	_	_
7	US	_	NNP	NNP	_	8	nn	_	_
8	competitor	_	NN	NN	_	1	nsubj	_	_
9	,	_	,	,	_	8	punct	_	_
10	Richard	_	NNP	NNP	_	8	appos	_	_
11	.	_	.	.	_	1	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(c3 / compete-01, ARG0, p2 / person)
(n / name, op, "Richard")
(n2 / name, op, "States")
(n2 / name, op, "United")
(o / occupy-01, ARG0, p2 / person)
(o / occupy-01, ARG1, p3 / position)
(p2 / person, mod, c2 / country)
(p2 / person, name, n / name)

Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(2, 1, 0),US,(country :name (name :op "US")),false), Span(3,4,List(3),position,position,false), Span(0,1,List(4),Occupying,occupy-01,false), Span(9,10,List(7, 6, 5),Richard,(person :name (name :op "Richard")),false), Span(0,3,List(9, 8),Occupying the second,(ordinal-entity :value 1),false)),Map(2 -> "US", 5 -> person, 8 -> ordinal-entity, 7 -> "Richard", 1 -> name, 4 -> occupy-01, 6 -> name, 9 -> 1, 0 -> country, 3 -> position),Map(n -> name, p2 -> person, 1 -> 1, p -> position, o2 -> ordinal-entity, c -> country, o -> occupy-01, n2 -> name))),[Ljava.lang.String;@62ac6e1f,Annotation([Ljava.lang.String;@87071eb,[Ljava.lang.String;@28ab8066,[Ljava.lang.String;@5e5f0c79),Annotation([Ljava.lang.String;@5f024d3b,[Ljava.lang.String;@54768019,[Ledu.cmu.lti.nlp.amr.Dependency;@20aa9241),Annotation([Ljava.lang.String;@6306ee9,[Ljava.lang.String;@4b968081,[Ljava.lang.String;@2b00b7a2),Annotation([Ljava.lang.String;@5f4c0019,[Ljava.lang.String;@5a0e7a3f,[Ledu.cmu.lti.nlp.amr.Entity;@25637b77))
AMR:
(c / country, calendar, p2 / person)
(c / country, name, n / name)
(n / name, op, "US")
(n2 / name, op, "Richard")
(o / occupy-01, ARG0, p2 / person)
(o / occupy-01, ARG1, p / position)
(o2 / ordinal-entity, calendar, p / position)
(o2 / ordinal-entity, value, 1 / 1)
(p2 / person, name, n2 / name)

Decoded in 294,933 microseconds
Sentence: Her performance was 303.00 points .

Oracle Span 1:  303.00 => 303.00
Oracle Span 2:  performance => perform-01
Oracle Span 3:  points => point
Spans:
Span 0-1:  Her => 1
Span 1-2:  performance => performance
Span 4-5:  points => point

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  303.00 => 303.00
Oracle Span 1-2:  performance => perform-01
Oracle Span 4-5:  points => point

Dependencies:
1	Her	_	PRP$	PRP$	_	2	poss	_	_
2	performance	_	NN	NN	_	5	nsubj	_	_
3	was	_	VBD	VBD	_	5	cop	_	_
4	303.00	_	CD	CD	_	5	num	_	_
5	points	_	NNS	NNS	_	0	root	_	_
6	.	_	.	.	_	5	punct	_	_

Oracle:
(p2 / point, domain, p / perform-01)
(p2 / point, quant, 3 / 303.00)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Her,1,false), Span(1,2,List(1),performance,performance,false), Span(4,5,List(2),points,point,false)),Map(2 -> point, 1 -> performance, 0 -> 1),Map(p2 -> point, p -> performance, 1 -> 1))),[Ljava.lang.String;@2311affe,Annotation([Ljava.lang.String;@58759c55,[Ljava.lang.String;@588a280a,[Ljava.lang.String;@12aafccd),Annotation([Ljava.lang.String;@3c6adf39,[Ljava.lang.String;@48097bd5,[Ledu.cmu.lti.nlp.amr.Dependency;@414ad0a6),Annotation([Ljava.lang.String;@4c300d6,[Ljava.lang.String;@6e3a9460,[Ljava.lang.String;@6d6e8da1),Annotation([Ljava.lang.String;@7ab6af4a,[Ljava.lang.String;@66efd57a,[Ledu.cmu.lti.nlp.amr.Entity;@5c4cc453))
AMR:
(p / performance, calendar, 1 / 1)
(p / performance, mod, p2 / point)

Decoded in 1,307,566 microseconds
Sentence: In the preliminary men 's 1 - meter platform diving competition this morning , our competitors Lan Wei and Sheng Chen have already gained rights to the heats .

Oracle Span 1:  1 => 1
Oracle Span 2:  already => already
Oracle Span 3:  and => and
Oracle Span 4:  competition => compete-01
Oracle Span 5:  competitors => compete-01
Oracle Span 6:  diving => dive-01
Oracle Span 7:  gained => gain-02
Oracle Span 8:  heats => heat
Oracle Span 9:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Oracle Span 10:  men => man
Oracle Span 11:  meter => (distance-quantity :unit meter)
Oracle Span 12:  morning => morning
Oracle Span 13:  platform => platform
Oracle Span 14:  preliminary => preliminary
Oracle Span 15:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 16:  this => this
NER Entity: (person :name (name :op "Lan" :op "Wei"))
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
Spans:
Span 22-23:  already => already
Span 18-19:  and => and
Span 10-11:  competition => complement-01
Span 9-10:  diving => ding-01
Span 23-24:  gained => gain-02
Span 27-28:  heats => heat-01
Span 0-1:  In => 1
Span 16-18:  Lan Wei => (person :name (name :op "Lan" :op "Wei"))
Span 7-8:  meter => meter
Span 12-13:  morning => morning
Span 8-9:  platform => platform
Span 2-3:  preliminary => preliminary
Span 24-25:  rights => right
Span 19-21:  Sheng Chen => (person :name (name :op "Sheng" :op "Chen"))
Span 11-12:  this => this

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 5-6:  1 => 1
Oracle Span 22-23:  already => already
Oracle Span 18-19:  and => and
Oracle Span 10-11:  competition => compete-01
Oracle Span 15-16:  competitors => compete-01
Oracle Span 9-10:  diving => dive-01
Oracle Span 23-24:  gained => gain-02
Oracle Span 27-28:  heats => heat
Oracle Span 16-18:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Oracle Span 3-4:  men => man
Oracle Span 7-8:  meter => (distance-quantity :unit meter)
Oracle Span 12-13:  morning => morning
Oracle Span 8-9:  platform => platform
Oracle Span 2-3:  preliminary => preliminary
Oracle Span 19-21:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 11-12:  this => this

Dependencies:
1	In	_	IN	IN	_	6	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	preliminary	_	JJ	JJ	_	4	amod	_	_
4	men	_	NNS	NNS	_	1	pobj	_	_
5	's	_	VBZ	VBZ	_	6	cop	_	_
6	1	_	CD	CD	_	0	root	_	_
7	-	_	:	:	_	6	punct	_	_
8	meter	_	NN	NN	_	11	nn	_	_
9	platform	_	NN	NN	_	11	nn	_	_
10	diving	_	NN	NN	_	11	nn	_	_
11	competition	_	NN	NN	_	6	dep	_	_
12	this	_	DT	DT	_	13	det	_	_
13	morning	_	NN	NN	_	6	nsubj	_	_
14	,	_	,	,	_	13	punct	_	_
15	our	_	PRP$	PRP$	_	16	poss	_	_
16	competitors	_	NNS	NNS	_	13	appos	_	_
17	Lan	_	NNP	NNP	_	18	nn	_	_
18	Wei	_	NNP	NNP	_	24	nsubj	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	Sheng	_	NNP	NNP	_	21	nn	_	_
21	Chen	_	NNP	NNP	_	18	conj	_	_
22	have	_	VBP	VBP	_	24	aux	_	_
23	already	_	RB	RB	_	24	advmod	_	_
24	gained	_	VBN	VBN	_	16	rcmod	_	_
25	rights	_	NNS	NNS	_	24	dobj	_	_
26	to	_	TO	TO	_	24	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	heats	_	NN	NN	_	26	pobj	_	_
29	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, p3 / person)
(a / and, op, p4 / person)
(c / compete-01, ARG0, a / and)
(c2 / compete-01, mod, d2 / dive-01)
(c2 / compete-01, mod, p5 / preliminary)
(d2 / dive-01, ARG0, m2 / man)
(d2 / dive-01, mod, p6 / platform)
(d3 / distance-quantity, quant, 1 / 1)
(d3 / distance-quantity, unit, m3 / meter)
(g / gain-02, ARG0, a / and)
(g / gain-02, time, a2 / already)
(g / gain-02, time, c2 / compete-01)
(g / gain-02, time, m4 / morning)
(m4 / morning, mod, t / this)
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Chen")
(n2 / name, op, "Sheng")
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)
(p6 / platform, mod, d3 / distance-quantity)

Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),morning,morning,false), Span(7,8,List(1),meter,meter,false), Span(19,21,List(5, 4, 3, 2),Sheng Chen,(person :name (name :op "Sheng" :op "Chen")),false), Span(22,23,List(6),already,already,false), Span(27,28,List(7),heats,heat-01,false), Span(10,11,List(8),competition,complement-01,false), Span(23,24,List(9),gained,gain-02,false), Span(0,1,List(10),In,1,false), Span(9,10,List(11),diving,ding-01,false), Span(8,9,List(12),platform,platform,false), Span(24,25,List(13),rights,right,false), Span(18,19,List(14),and,and,false), Span(16,18,List(18, 17, 16, 15),Lan Wei,(person :name (name :op "Lan" :op "Wei")),false), Span(2,3,List(19),preliminary,preliminary,false), Span(11,12,List(20),this,this,false)),Map(2 -> person, 5 -> "Chen", 12 -> platform, 15 -> person, 8 -> complement-01, 18 -> "Wei", 7 -> heat-01, 17 -> "Lan", 1 -> meter, 4 -> "Sheng", 11 -> ding-01, 14 -> and, 20 -> this, 6 -> already, 0 -> morning, 9 -> gain-02, 16 -> name, 19 -> preliminary, 3 -> name, 10 -> 1, 13 -> right),Map(n -> name, h -> heat-01, t -> this, m2 -> meter, p2 -> platform, m -> morning, d -> ding-01, 1 -> 1, p -> person, g -> gain-02, a -> already, p4 -> preliminary, r -> right, a2 -> and, c -> complement-01, p3 -> person, n2 -> name))),[Ljava.lang.String;@19a03e92,Annotation([Ljava.lang.String;@26c11707,[Ljava.lang.String;@ff08d91,[Ljava.lang.String;@7dff6eed),Annotation([Ljava.lang.String;@65b38b6e,[Ljava.lang.String;@4be4c1f0,[Ledu.cmu.lti.nlp.amr.Dependency;@40f34118),Annotation([Ljava.lang.String;@467dc7ed,[Ljava.lang.String;@3fecdcb7,[Ljava.lang.String;@52ea71fb),Annotation([Ljava.lang.String;@8cb113f,[Ljava.lang.String;@2021fd64,[Ledu.cmu.lti.nlp.amr.Entity;@797184b3))
AMR:
(a2 / and, op, h / heat-01)
(a2 / and, op, p / person)
(a2 / and, op, p3 / person)
(c / complement-01, ARG0, m2 / meter)
(c / complement-01, ARG1, d / ding-01)
(c / complement-01, ARG6, m / morning)
(d / ding-01, ARG0, 1 / 1)
(d / ding-01, ARG1, p2 / platform)
(g / gain-02, ARG0, a2 / and)
(g / gain-02, ARG1, r / right)
(g / gain-02, time, a / already)
(h / heat-01, ARG0, p2 / platform)
(h / heat-01, ARG1, p4 / preliminary)
(m / morning, mod, t / this)
(n / name, op, "Chen")
(n / name, op, "Sheng")
(n2 / name, op, "Lan")
(n2 / name, op, "Wei")
(p / person, name, n / name)
(p3 / person, name, n2 / name)

Decoded in 7,562,521 microseconds
Sentence: The results of today 's preliminary women 's water - polo competition are : the Hungarian team defeated the Canadian team by 13 : 7 , the French team defeated the Brazilian team by 10 : 9 , the Australian team defeated the German team by 10 : 8 , the Russian team defeated the Dutch team by 7 : 6 , the US team defeated the Kazakhstani team by 10 : 5 , and the Italian team defeated the New Zealand team by 12 : 2 .

Oracle Span 1:  10 => 10
Oracle Span 2:  10 => 10
Oracle Span 3:  10 => 10
Oracle Span 4:  12 => 12
Oracle Span 5:  13 => 13
Oracle Span 6:  2 => 2
Oracle Span 7:  5 => 5
Oracle Span 8:  6 => 6
Oracle Span 9:  7 => 7
Oracle Span 10:  7 => 7
Oracle Span 11:  8 => 8
Oracle Span 12:  9 => 9
Oracle Span 13:  and => and
Oracle Span 14:  Australian => (country :name (name :op "Australia"))
Oracle Span 15:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 16:  Canadian => (country :name (name :op "Canada"))
Oracle Span 17:  competition => compete-01
Oracle Span 18:  defeated => defeat-01
Oracle Span 19:  defeated => defeat-01
Oracle Span 20:  defeated => defeat-01
Oracle Span 21:  defeated => defeat-01
Oracle Span 22:  defeated => defeat-01
Oracle Span 23:  defeated => defeat-01
Oracle Span 24:  French => (country :name (name :op "France"))
Oracle Span 25:  German => (country :name (name :op "Germany"))
Oracle Span 26:  Hungarian => (country :name (name :op "Hungary"))
Oracle Span 27:  Italian => (country :name (name :op "Italy"))
Oracle Span 28:  Kazakhstani => (country :name (name :op "Kazakhstan"))
Oracle Span 29:  New Zealand => (country :name (name :op "Zealand" :op "New"))
Oracle Span 30:  polo => polo
Oracle Span 31:  preliminary => preliminary
Oracle Span 32:  results => result-01
Oracle Span 33:  Russian => (country :name (name :op "Russia"))
Oracle Span 34:  team => team
Oracle Span 35:  team => team
Oracle Span 36:  team => team
Oracle Span 37:  team => team
Oracle Span 38:  team => team
Oracle Span 39:  team => team
Oracle Span 40:  team => team
Oracle Span 41:  team => team
Oracle Span 42:  team => team
Oracle Span 43:  team => team
Oracle Span 44:  team => team
Oracle Span 45:  team => team
Oracle Span 46:  today => today
Oracle Span 47:  US => (country :name (name :op "States" :op "United"))
Oracle Span 48:  water => water
Oracle Span 49:  women => woman
NER Entity: (country :name (name :op "New" :op "Zealand"))
NER Entity: (thing :name (name :op "Hungarian"))
NER Entity: (thing :name (name :op "Canadian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Kazakhstani"))
NER Entity: (thing :name (name :op "Italian"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 74-75:  and => and
Span 39-40:  Australian => (country :name (name :op "Australia"))
Span 11-12:  competition => complement-01
Span 41-42:  defeated => defeat-01
Span 29-30:  defeated => defeat-01
Span 78-79:  defeated => defeat-01
Span 17-18:  defeated => defeat-01
Span 65-66:  defeated => defeat-01
Span 53-54:  defeated => defeat-01
Span 80-82:  New Zealand => (country :name (name :op "Zealand" :op "New"))
Span 5-6:  preliminary => preliminary
Span 1-2:  results => result
Span 77-78:  team => team
Span 40-41:  team => team
Span 82-83:  team => team
Span 52-53:  team => team
Span 20-21:  team => team
Span 16-17:  team => team
Span 28-29:  team => team
Span 56-57:  team => team
Span 68-69:  team => team
Span 32-33:  team => team
Span 64-65:  team => team
Span 44-45:  team => team
Span 0-1:  The => (country :name (name :op "North"))
Span 0-1:  The => 1
Span 0-4:  The results of today => (date-entity :time today)
Span 8-9:  water => water
Span 6-7:  women => woman

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Oracle Span 34-35:  10 => 10
Oracle Span 46-47:  10 => 10
Oracle Span 70-71:  10 => 10
Oracle Span 84-85:  12 => 12
Oracle Span 22-23:  13 => 13
Oracle Span 86-87:  2 => 2
Oracle Span 72-73:  5 => 5
Oracle Span 60-61:  6 => 6
Oracle Span 24-25:  7 => 7
Oracle Span 58-59:  7 => 7
Oracle Span 48-49:  8 => 8
Oracle Span 36-37:  9 => 9
Oracle Span 74-75:  and => and
Oracle Span 39-40:  Australian => (country :name (name :op "Australia"))
Oracle Span 31-32:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 19-20:  Canadian => (country :name (name :op "Canada"))
Oracle Span 11-12:  competition => compete-01
Oracle Span 17-18:  defeated => defeat-01
Oracle Span 29-30:  defeated => defeat-01
Oracle Span 41-42:  defeated => defeat-01
Oracle Span 53-54:  defeated => defeat-01
Oracle Span 65-66:  defeated => defeat-01
Oracle Span 78-79:  defeated => defeat-01
Oracle Span 27-28:  French => (country :name (name :op "France"))
Oracle Span 43-44:  German => (country :name (name :op "Germany"))
Oracle Span 15-16:  Hungarian => (country :name (name :op "Hungary"))
Oracle Span 76-77:  Italian => (country :name (name :op "Italy"))
Oracle Span 67-68:  Kazakhstani => (country :name (name :op "Kazakhstan"))
Oracle Span 80-82:  New Zealand => (country :name (name :op "Zealand" :op "New"))
Oracle Span 10-11:  polo => polo
Oracle Span 5-6:  preliminary => preliminary
Oracle Span 1-2:  results => result-01
Oracle Span 51-52:  Russian => (country :name (name :op "Russia"))
Oracle Span 16-17:  team => team
Oracle Span 20-21:  team => team
Oracle Span 28-29:  team => team
Oracle Span 32-33:  team => team
Oracle Span 40-41:  team => team
Oracle Span 44-45:  team => team
Oracle Span 52-53:  team => team
Oracle Span 56-57:  team => team
Oracle Span 64-65:  team => team
Oracle Span 68-69:  team => team
Oracle Span 77-78:  team => team
Oracle Span 82-83:  team => team
Oracle Span 3-4:  today => today
Oracle Span 63-64:  US => (country :name (name :op "States" :op "United"))
Oracle Span 8-9:  water => water
Oracle Span 6-7:  women => woman

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	results	_	NNS	NNS	_	9	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	today	_	NN	NN	_	7	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	preliminary	_	JJ	JJ	_	7	amod	_	_
7	women	_	NNS	NNS	_	3	pobj	_	_
8	's	_	VBZ	VBZ	_	9	cop	_	_
9	water	_	NN	NN	_	0	root	_	_
10	-	_	:	:	_	9	punct	_	_
11	polo	_	NN	NN	_	12	nn	_	_
12	competition	_	NN	NN	_	9	dep	_	_
13	are	_	VBP	VBP	_	12	dep	_	_
14	:	_	:	:	_	9	punct	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Hungarian	_	JJ	JJ	_	17	amod	_	_
17	team	_	NN	NN	_	9	conj	_	_
18	defeated	_	VBN	VBN	_	17	vmod	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Canadian	_	JJ	JJ	_	21	amod	_	_
21	team	_	NN	NN	_	18	dobj	_	_
22	by	_	IN	IN	_	18	prep	_	_
23	13	_	CD	CD	_	22	pobj	_	_
24	:	_	:	:	_	9	punct	_	_
25	7	_	CD	CD	_	9	conj	_	_
26	,	_	,	,	_	25	punct	_	_
27	the	_	DT	DT	_	29	det	_	_
28	French	_	JJ	JJ	_	29	amod	_	_
29	team	_	NN	NN	_	25	appos	_	_
30	defeated	_	VBN	VBN	_	29	vmod	_	_
31	the	_	DT	DT	_	33	det	_	_
32	Brazilian	_	JJ	JJ	_	33	amod	_	_
33	team	_	NN	NN	_	30	dobj	_	_
34	by	_	IN	IN	_	30	prep	_	_
35	10	_	CD	CD	_	34	pobj	_	_
36	:	_	:	:	_	9	punct	_	_
37	9	_	CD	CD	_	9	conj	_	_
38	,	_	,	,	_	37	punct	_	_
39	the	_	DT	DT	_	41	det	_	_
40	Australian	_	JJ	JJ	_	41	amod	_	_
41	team	_	NN	NN	_	37	appos	_	_
42	defeated	_	VBN	VBN	_	41	vmod	_	_
43	the	_	DT	DT	_	45	det	_	_
44	German	_	JJ	JJ	_	45	amod	_	_
45	team	_	NN	NN	_	42	dobj	_	_
46	by	_	IN	IN	_	42	prep	_	_
47	10	_	CD	CD	_	46	pobj	_	_
48	:	_	:	:	_	9	punct	_	_
49	8	_	CD	CD	_	9	conj	_	_
50	,	_	,	,	_	49	punct	_	_
51	the	_	DT	DT	_	53	det	_	_
52	Russian	_	JJ	JJ	_	53	amod	_	_
53	team	_	NN	NN	_	49	appos	_	_
54	defeated	_	VBN	VBN	_	53	vmod	_	_
55	the	_	DT	DT	_	57	det	_	_
56	Dutch	_	JJ	JJ	_	57	amod	_	_
57	team	_	NN	NN	_	54	dobj	_	_
58	by	_	IN	IN	_	54	prep	_	_
59	7	_	CD	CD	_	58	pobj	_	_
60	:	_	:	:	_	9	punct	_	_
61	6	_	CD	CD	_	9	conj	_	_
62	,	_	,	,	_	61	punct	_	_
63	the	_	DT	DT	_	65	det	_	_
64	US	_	NNP	NNP	_	65	nn	_	_
65	team	_	NN	NN	_	61	appos	_	_
66	defeated	_	VBN	VBN	_	65	vmod	_	_
67	the	_	DT	DT	_	69	det	_	_
68	Kazakhstani	_	NNP	NNP	_	69	nn	_	_
69	team	_	NN	NN	_	66	dobj	_	_
70	by	_	IN	IN	_	66	prep	_	_
71	10	_	CD	CD	_	70	pobj	_	_
72	:	_	:	:	_	71	punct	_	_
73	5	_	CD	CD	_	71	dep	_	_
74	,	_	,	,	_	9	punct	_	_
75	and	_	CC	CC	_	9	cc	_	_
76	the	_	DT	DT	_	78	det	_	_
77	Italian	_	JJ	JJ	_	78	amod	_	_
78	team	_	NN	NN	_	9	conj	_	_
79	defeated	_	VBN	VBN	_	78	vmod	_	_
80	the	_	DT	DT	_	83	det	_	_
81	New	_	NNP	NNP	_	83	nn	_	_
82	Zealand	_	NNP	NNP	_	83	nn	_	_
83	team	_	NN	NN	_	79	dobj	_	_
84	by	_	IN	IN	_	79	prep	_	_
85	12	_	CD	CD	_	84	pobj	_	_
86	:	_	:	:	_	9	punct	_	_
87	2	_	CD	CD	_	9	parataxis	_	_
88	.	_	.	.	_	9	punct	_	_

Oracle:
(a2 / and, op, d / defeat-01)
(a2 / and, op, d2 / defeat-01)
(a2 / and, op, d3 / defeat-01)
(a2 / and, op, d4 / defeat-01)
(a2 / and, op, d5 / defeat-01)
(a2 / and, op, d6 / defeat-01)
(c13 / compete-01, ARG0, w / woman)
(c13 / compete-01, mod, p / preliminary)
(c13 / compete-01, mod, p14 / polo)
(c13 / compete-01, time, t / today)
(c14 / country, name, n5 / name)
(c15 / country, name, n6 / name)
(c16 / country, name, n7 / name)
(c17 / country, name, n8 / name)
(c18 / country, name, n9 / name)
(c19 / country, name, n10 / name)
(c20 / country, name, n11 / name)
(c22 / country, name, n13 / name)
(c23 / country, name, n14 / name)
(c24 / country, name, n15 / name)
(c25 / country, name, n16 / name)
(d / defeat-01, ARG0, t2 / team)
(d / defeat-01, ARG1, t3 / team)
(d2 / defeat-01, ARG0, t4 / team)
(d2 / defeat-01, ARG1, t5 / team)
(d3 / defeat-01, ARG0, t6 / team)
(d3 / defeat-01, ARG1, t7 / team)
(d4 / defeat-01, ARG0, t8 / team)
(d4 / defeat-01, ARG1, t9 / team)
(d5 / defeat-01, ARG0, t10 / team)
(d5 / defeat-01, ARG1, t11 / team)
(d6 / defeat-01, ARG0, t12 / team)
(d6 / defeat-01, ARG1, t13 / team)
(n10 / name, op, "Germany")
(n11 / name, op, "Russia")
(n13 / name, op, "States")
(n13 / name, op, "United")
(n14 / name, op, "Kazakhstan")
(n15 / name, op, "Italy")
(n16 / name, op, "New")
(n16 / name, op, "Zealand")
(n5 / name, op, "Hungary")
(n6 / name, op, "Canada")
(n7 / name, op, "France")
(n8 / name, op, "Brazil")
(n9 / name, op, "Australia")
(p14 / polo, mod, w2 / water)
(r2 / result-01, ARG1, c13 / compete-01)
(r2 / result-01, ARG2, a2 / and)
(t10 / team, mod, c22 / country)
(t11 / team, mod, c23 / country)
(t12 / team, mod, c24 / country)
(t13 / team, mod, c25 / country)
(t2 / team, mod, c14 / country)
(t3 / team, mod, c15 / country)
(t4 / team, mod, c16 / country)
(t5 / team, mod, c17 / country)
(t6 / team, mod, c18 / country)
(t7 / team, mod, c19 / country)
(t8 / team, mod, c20 / country)

Input(Some(Graph(null,ArrayBuffer(Span(77,78,List(0),team,team,false), Span(41,42,List(1),defeated,defeat-01,false), Span(40,41,List(2),team,team,false), Span(11,12,List(3),competition,complement-01,false), Span(82,83,List(4),team,team,false), Span(29,30,List(5),defeated,defeat-01,false), Span(52,53,List(6),team,team,false), Span(78,79,List(7),defeated,defeat-01,false), Span(20,21,List(8),team,team,false), Span(8,9,List(9),water,water,false), Span(5,6,List(10),preliminary,preliminary,false), Span(17,18,List(11),defeated,defeat-01,false), Span(16,17,List(12),team,team,false), Span(0,1,List(15, 14, 13),The,(country :name (name :op "North")),false), Span(80,82,List(19, 18, 17, 16),New Zealand,(country :name (name :op "Zealand" :op "New")),false), Span(28,29,List(20),team,team,false), Span(6,7,List(21),women,woman,false), Span(1,2,List(22),results,result,false), Span(56,57,List(23),team,team,false), Span(68,69,List(24),team,team,false), Span(0,4,List(26, 25),The results of today,(date-entity :time today),false), Span(0,1,List(27),The,1,false), Span(65,66,List(28),defeated,defeat-01,false), Span(32,33,List(29),team,team,false), Span(64,65,List(30),team,team,false), Span(74,75,List(31),and,and,false), Span(39,40,List(34, 33, 32),Australian,(country :name (name :op "Australia")),false), Span(53,54,List(35),defeated,defeat-01,false), Span(44,45,List(36),team,team,false)),Map(30 -> team, 2 -> team, 5 -> defeat-01, 33 -> name, 27 -> 1, 12 -> team, 8 -> team, 15 -> "North", 36 -> team, 21 -> woman, 18 -> "Zealand", 24 -> team, 35 -> defeat-01, 7 -> defeat-01, 1 -> defeat-01, 17 -> name, 23 -> team, 26 -> today, 4 -> team, 11 -> defeat-01, 32 -> country, 14 -> name, 29 -> team, 20 -> team, 34 -> "Australia", 28 -> defeat-01, 6 -> team, 9 -> water, 0 -> team, 22 -> result, 16 -> country, 19 -> "New", 10 -> preliminary, 3 -> complement-01, 31 -> and, 25 -> date-entity, 13 -> country),Map(w -> water, n -> name, t4 -> team, t11 -> team, t -> team, d3 -> defeat-01, d6 -> defeat-01, c4 -> country, t6 -> team, t9 -> team, d -> defeat-01, t3 -> team, 1 -> 1, p -> preliminary, n3 -> name, a -> and, c3 -> country, t10 -> today, d2 -> defeat-01, t13 -> team, d5 -> date-entity, t2 -> team, t5 -> team, w2 -> woman, r -> result, c -> complement-01, t8 -> team, d4 -> defeat-01, d7 -> defeat-01, c2 -> country, n2 -> name, t12 -> team, t7 -> team))),[Ljava.lang.String;@589fcc1,Annotation([Ljava.lang.String;@77abccf1,[Ljava.lang.String;@4118e5e7,[Ljava.lang.String;@3c8e2004),Annotation([Ljava.lang.String;@762baca0,[Ljava.lang.String;@5f4e2ad0,[Ledu.cmu.lti.nlp.amr.Dependency;@597fdb03),Annotation([Ljava.lang.String;@143c4e28,[Ljava.lang.String;@3f59aea3,[Ljava.lang.String;@11ef1b32),Annotation([Ljava.lang.String;@366f6dcf,[Ljava.lang.String;@40d43824,[Ledu.cmu.lti.nlp.amr.Entity;@320aaa2b))
AMR:
(a / and, op, d5 / date-entity)
(a / and, op, r / result)
(a / and, op, t / team)
(c / complement-01, ARG0, t6 / team)
(c / complement-01, ARG1, d5 / date-entity)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(d / defeat-01, ARG0, t5 / team)
(d / defeat-01, ARG1, t13 / team)
(d / defeat-01, ARG6, t2 / team)
(d2 / defeat-01, ARG0, w / water)
(d2 / defeat-01, ARG1, t11 / team)
(d2 / defeat-01, ARG6, t7 / team)
(d3 / defeat-01, ARG1, t / team)
(d3 / defeat-01, ARG2, t3 / team)
(d4 / defeat-01, ARG0, w / water)
(d4 / defeat-01, ARG1, t5 / team)
(d4 / defeat-01, ARG6, t6 / team)
(d5 / date-entity, time, t10 / today)
(d6 / defeat-01, ARG0, t13 / team)
(d6 / defeat-01, ARG1, t9 / team)
(d6 / defeat-01, ARG6, t12 / team)
(d7 / defeat-01, ARG0, a / and)
(d7 / defeat-01, ARG1, t8 / team)
(d7 / defeat-01, ARG6, t4 / team)
(n / name, op, "North")
(n2 / name, op, "New")
(n2 / name, op, "Zealand")
(n3 / name, op, "Australia")
(r / result, mod, 1 / 1)
(r / result, mod, c2 / country)
(r / result, prep-in, w2 / woman)
(t2 / team, mod, c4 / country)
(t3 / team, mod, c3 / country)
(w2 / woman, mod, p / preliminary)

Decoded in 25,183,721 microseconds
Sentence: There are 12 teams totally participating in the competition .

Oracle Span 1:  12 => 12
Oracle Span 2:  competition => compete-01
Oracle Span 3:  participating => participate-01
Oracle Span 4:  teams => team
Oracle Span 5:  totally => total-01
Spans:
Span 8-9:  competition => complement-01
Span 5-6:  participating => participate-01
Span 3-4:  teams => team
Span 0-1:  There => 1
Span 4-5:  totally => total

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 2-3:  12 => 12
Oracle Span 8-9:  competition => compete-01
Oracle Span 5-6:  participating => participate-01
Oracle Span 3-4:  teams => team
Oracle Span 4-5:  totally => total-01

Dependencies:
1	There	_	EX	EX	_	6	expl	_	_
2	are	_	VBP	VBP	_	6	aux	_	_
3	12	_	CD	CD	_	4	num	_	_
4	teams	_	NNS	NNS	_	5	npadvmod	_	_
5	totally	_	RB	RB	_	6	advmod	_	_
6	participating	_	VBG	VBG	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	competition	_	NN	NN	_	7	pobj	_	_
10	.	_	.	.	_	6	punct	_	_

Oracle:
(p / participate-01, ARG0, t / team)
(p / participate-01, ARG1, c / compete-01)
(t / team, quant, x / 12)
(t2 / total-01, ARG1, t / team)
(t2 / total-01, ARG2, x / 12)

Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),There,1,false), Span(4,5,List(1),totally,total,false), Span(5,6,List(2),participating,participate-01,false), Span(8,9,List(3),competition,complement-01,false), Span(3,4,List(4),teams,team,false)),Map(2 -> participate-01, 1 -> total, 4 -> team, 0 -> 1, 3 -> complement-01),Map(t -> total, p -> participate-01, 1 -> 1, t2 -> team, c -> complement-01))),[Ljava.lang.String;@4eacbecd,Annotation([Ljava.lang.String;@32dcc013,[Ljava.lang.String;@3858bfaa,[Ljava.lang.String;@533f3432),Annotation([Ljava.lang.String;@78ceb24e,[Ljava.lang.String;@2cc6291c,[Ledu.cmu.lti.nlp.amr.Dependency;@519e66c1),Annotation([Ljava.lang.String;@7baa4664,[Ljava.lang.String;@767bd79d,[Ljava.lang.String;@6be88e87),Annotation([Ljava.lang.String;@49625555,[Ljava.lang.String;@60d2b37b,[Ledu.cmu.lti.nlp.amr.Entity;@483d57c3))
AMR:
(c / complement-01, ARG1, 1 / 1)
(p / participate-01, ARG1, c / complement-01)
(p / participate-01, compared-to, t2 / team)
(p / participate-01, manner, t / total)

Decoded in 1,697,842 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 0-1:   => amr-empty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(amr-empty,ArrayBuffer(Span(0,1,List(0),,amr-empty,false)),Map(0 -> amr-empty),Map(a -> amr-empty))),[Ljava.lang.String;@9a03a34,Annotation([Ljava.lang.String;@21eb3347,[Ljava.lang.String;@cc5ce04,[Ljava.lang.String;@20d0622c),Annotation([Ljava.lang.String;@28a99d98,[Ljava.lang.String;@5020f2c1,[Ledu.cmu.lti.nlp.amr.Dependency;@72b7a32f),Annotation([Ljava.lang.String;@51556e57,[Ljava.lang.String;@35f47cb8,[Ljava.lang.String;@6215263d),Annotation([Ljava.lang.String;@2d744f8b,[Ljava.lang.String;@57a9bba4,[Ledu.cmu.lti.nlp.amr.Entity;@41ae0c55))
AMR:


Decoded in 28,916 microseconds
