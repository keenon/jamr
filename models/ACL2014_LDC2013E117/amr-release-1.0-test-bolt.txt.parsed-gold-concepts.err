Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: Resolutely support the thread starter! I compose a poem in reply:

Oracle Span 1:  compose => compose-02
Oracle Span 2:  I => i
Oracle Span 3:  poem => poem
Oracle Span 4:  reply => reply-01
Oracle Span 5:  Resolutely => resolute
Oracle Span 6:  starter => (person :ARG0-of start-01)
Oracle Span 7:  support => support-01
Oracle Span 8:  thread => thread
Spans:
Span 7-8:  compose => compose-02
Span 6-7:  I => i
Span 9-10:  poem => poem
Span 11-12:  reply => reply-01
Span 0-1:  Resolutely => resolute
Span 4-5:  starter => (person :ARG0-of start-01)
Span 1-2:  support => support-01
Span 3-4:  thread => thread

 *** WARNING: The dependency tree seems broken.  I can't find the head of compose in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of poem in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of reply in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 12
Langrangian relaxation converged after 52 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of compose in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of poem in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of reply in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 12
Oracle Span 7-8:  compose => compose-02
Oracle Span 6-7:  I => i
Oracle Span 9-10:  poem => poem
Oracle Span 11-12:  reply => reply-01
Oracle Span 0-1:  Resolutely => resolute
Oracle Span 4-5:  starter => (person :ARG0-of start-01)
Oracle Span 1-2:  support => support-01
Oracle Span 3-4:  thread => thread

Dependencies:
1	Resolutely	_	RB	RB	_	2	advmod	_	_
2	support	_	VB	VB	_	0	root	_	_
3	the	_	DT	DT	_	5	det	_	_
4	thread	_	NN	NN	_	5	nn	_	_
5	starter	_	NN	NN	_	2	dobj	_	_
6	!	_	.	.	_	2	punct	_	_
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	compose	_	VBP	VBP	_	0	root	_	_
3	a	_	DT	DT	_	4	det	_	_
4	poem	_	NN	NN	_	2	dobj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	reply	_	NN	NN	_	5	pobj	_	_
7	:	_	:	:	_	2	punct	_	_

Oracle:
(c / compose-02, ARG0, i / i)
(c / compose-02, ARG1, p2 / poem)
(r2 / reply-01, ARG0, i / i)
(r2 / reply-01, ARG2, c / compose-02)
(s / support-01, ARG1, p / person)
(s / support-01, manner, r / resolute)
(s2 / start-01, ARG0, p / person)
(s2 / start-01, ARG1, t / thread)

Input(Some(Graph((multi-sentence :snt1 (support-01 :manner resolute :ARG1 (person :ARG0-of (start-01 :ARG1 thread)) :ARG0 you :mode imperative) :snt2 (reply-01 :ARG2 (compose-02 :ARG1 poem :ARG0 i) :ARG0 i)),ArrayBuffer(Span(1,2,List(0),support,support-01,false), Span(4,5,List(1, 2),starter,(person :ARG0-of start-01),false), Span(3,4,List(3),thread,thread,false), Span(11,12,List(4),reply,reply-01,false), Span(7,8,List(5),compose,compose-02,false), Span(9,10,List(6),poem,poem,false), Span(6,7,List(7),I,i,false), Span(0,1,List(8),Resolutely,resolute,false)),Map(2 -> start-01, 5 -> compose-02, 8 -> resolute, 7 -> i, 1 -> person, 4 -> reply-01, 6 -> poem, 0 -> support-01, 3 -> thread),Map(t -> thread, s2 -> start-01, p2 -> poem, s -> support-01, r2 -> reply-01, p -> person, r -> resolute, i -> i, c -> compose-02))),[Ljava.lang.String;@6e171cd7,Annotation([Ljava.lang.String;@402bba4f,[Ljava.lang.String;@795cd85e,[Ljava.lang.String;@59fd97a8),Annotation([Ljava.lang.String;@f5ac9e4,[Ljava.lang.String;@123ef382,[Ledu.cmu.lti.nlp.amr.Dependency;@dbf57b3),Annotation([Ljava.lang.String;@384ad17b,[Ljava.lang.String;@61862a7f,[Ljava.lang.String;@441772e),Annotation([Ljava.lang.String;@7334aada,[Ljava.lang.String;@1d9b7cce,[Ledu.cmu.lti.nlp.amr.Entity;@4d9e68d0))
AMR:
(c / compose-02, ARG0, p / person)
(c / compose-02, ARG1, p2 / poem)
(r2 / reply-01, ARG1, p / person)
(s / support-01, ARG0, p / person)
(s / support-01, ARG1, t / thread)
(s / support-01, degree, r / resolute)
(s2 / start-01, ARG0, p / person)
(s2 / start-01, ARG1, i / i)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.3
Decoded in 1,180,365 microseconds
Sentence: Pledge to fight to the death defending the Diaoyu Islands and the related islands

Oracle Span 1:  and => and
Oracle Span 2:  death => die-01
Oracle Span 3:  defending => defend-01
Oracle Span 4:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 5:  fight => fight-01
Oracle Span 6:  islands => island
Oracle Span 7:  Pledge => pledge-01
Oracle Span 8:  related => relate-01
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 10-11:  and => and
Span 5-6:  death => die-01
Span 6-7:  defending => defend-01
Span 8-10:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Span 2-3:  fight => fight-01
Span 13-14:  islands => island
Span 0-1:  Pledge => pledge-01
Span 12-13:  related => relate-01

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 10-11:  and => and
Oracle Span 5-6:  death => die-01
Oracle Span 6-7:  defending => defend-01
Oracle Span 8-10:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 2-3:  fight => fight-01
Oracle Span 13-14:  islands => island
Oracle Span 0-1:  Pledge => pledge-01
Oracle Span 12-13:  related => relate-01

Dependencies:
1	Pledge	_	VB	VB	_	0	root	_	_
2	to	_	TO	TO	_	3	aux	_	_
3	fight	_	VB	VB	_	1	xcomp	_	_
4	to	_	TO	TO	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	death	_	NN	NN	_	4	pobj	_	_
7	defending	_	VBG	VBG	_	6	vmod	_	_
8	the	_	DT	DT	_	10	det	_	_
9	Diaoyu	_	NNP	NNP	_	10	nn	_	_
10	Islands	_	NNPS	NNPS	_	7	dobj	_	_
11	and	_	CC	CC	_	10	cc	_	_
12	the	_	DT	DT	_	14	det	_	_
13	related	_	VBN	VBN	_	14	amod	_	_
14	islands	_	NNS	NNS	_	10	conj	_	_

Oracle:
(a / and, op, i / island)
(a / and, op, i2 / island)
(d2 / defend-01, ARG1, a / and)
(f / fight-01, manner, d / die-01)
(f / fight-01, purpose, d2 / defend-01)
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / pledge-01, ARG2, f / fight-01)
(r / relate-01, ARG1, i2 / island)
(r / relate-01, ARG2, i / island)

Input(Some(Graph((pledge-01 :ARG2 (fight-01 :purpose (defend-01 :ARG1 (and :op (island :ARG1-of (relate-01 :ARG2 island)) :op (island :name (name :op "Islands" :op "Diaoyu"))) :ARG0 you) :manner (die-01 :ARG1 you) :ARG0 you) :ARG0 you :mode imperative),ArrayBuffer(Span(8,10,List(0, 1, 2, 3),Diaoyu Islands,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(0,1,List(4),Pledge,pledge-01,false), Span(2,3,List(5),fight,fight-01,false), Span(6,7,List(6),defending,defend-01,false), Span(10,11,List(7),and,and,false), Span(13,14,List(8),islands,island,false), Span(12,13,List(9),related,relate-01,false), Span(5,6,List(10),death,die-01,false)),Map(2 -> "Islands", 5 -> fight-01, 8 -> island, 7 -> and, 1 -> name, 4 -> pledge-01, 6 -> defend-01, 9 -> relate-01, 0 -> island, 10 -> die-01, 3 -> "Diaoyu"),Map(n -> name, d -> die-01, p -> pledge-01, a -> and, d2 -> defend-01, i2 -> island, r -> relate-01, i -> island, f -> fight-01))),[Ljava.lang.String;@49ec71f8,Annotation([Ljava.lang.String;@1d2adfbe,[Ljava.lang.String;@36902638,[Ljava.lang.String;@223d2c72),Annotation([Ljava.lang.String;@8f4ea7c,[Ljava.lang.String;@436813f3,[Ledu.cmu.lti.nlp.amr.Dependency;@74fe5c40),Annotation([Ljava.lang.String;@3febb011,[Ljava.lang.String;@10e31a9a,[Ljava.lang.String;@131774fe),Annotation([Ljava.lang.String;@158d2680,[Ljava.lang.String;@77847718,[Ledu.cmu.lti.nlp.amr.Entity;@7f3b84b8))
AMR:
(a / and, op, i2 / island)
(d / die-01, ARG1, a / and)
(d2 / defend-01, ARG0, a / and)
(d2 / defend-01, ARG1, i / island)
(f / fight-01, ARG1, d2 / defend-01)
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / pledge-01, ARG1, f / fight-01)
(r / relate-01, ARG1, i2 / island)

WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.2.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.0.1.0
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 528,513 microseconds
Sentence: Fleets bumping fishing boats. Little evil Japanese ghosts stirring up trouble and unrest. With hearts of thieves and arrogant form, they again show their wolfish appearance

Oracle Span 1:  again => again
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  appearance => appearance
Oracle Span 5:  arrogant => arrogance
Oracle Span 6:  boats => boat
Oracle Span 7:  bumping => bump-01
Oracle Span 8:  evil => evil
Oracle Span 9:  fishing => fish-01
Oracle Span 10:  Fleets => fleet
Oracle Span 11:  form => form
Oracle Span 12:  ghosts => ghost
Oracle Span 13:  hearts => heart
Oracle Span 14:  Japanese => (country :name (name :op "Japan"))
Oracle Span 15:  Little => little
Oracle Span 16:  show => show-01
Oracle Span 17:  stirring => stir-04
Oracle Span 18:  they => they
Oracle Span 19:  thieves => (person :ARG0-of thieve-01)
Oracle Span 20:  trouble => trouble
Oracle Span 21:  unrest => unrest
Oracle Span 22:  wolfish => wolfish
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 24-25:  again => again
Span 12-13:  and => and
Span 19-20:  and => and
Span 28-29:  appearance => appearance
Span 20-21:  arrogant => arrogance
Span 3-4:  boats => boat
Span 1-2:  bumping => bump-01
Span 6-7:  evil => evil
Span 2-3:  fishing => fish-01
Span 0-1:  Fleets => fleet
Span 21-22:  form => form
Span 8-9:  ghosts => ghost
Span 16-17:  hearts => heart
Span 7-8:  Japanese => (country :name (name :op "Japan"))
Span 5-6:  Little => little
Span 25-26:  show => show-01
Span 9-10:  stirring => stir-04
Span 23-24:  they => they
Span 18-19:  thieves => (person :ARG0-of thieve-01)
Span 11-12:  trouble => trouble
Span 13-14:  unrest => unrest
Span 27-28:  wolfish => wolfish

 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of With in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of hearts in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of thieves in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of arrogant in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of form in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of they in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of again in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of their in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of wolfish in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of appearance in position 28
Langrangian relaxation converged after 23 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of With in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of hearts in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of thieves in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of arrogant in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of form in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of they in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of again in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of their in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of wolfish in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of appearance in position 28
Oracle Span 24-25:  again => again
Oracle Span 12-13:  and => and
Oracle Span 19-20:  and => and
Oracle Span 28-29:  appearance => appearance
Oracle Span 20-21:  arrogant => arrogance
Oracle Span 3-4:  boats => boat
Oracle Span 1-2:  bumping => bump-01
Oracle Span 6-7:  evil => evil
Oracle Span 2-3:  fishing => fish-01
Oracle Span 0-1:  Fleets => fleet
Oracle Span 21-22:  form => form
Oracle Span 8-9:  ghosts => ghost
Oracle Span 16-17:  hearts => heart
Oracle Span 7-8:  Japanese => (country :name (name :op "Japan"))
Oracle Span 5-6:  Little => little
Oracle Span 25-26:  show => show-01
Oracle Span 9-10:  stirring => stir-04
Oracle Span 23-24:  they => they
Oracle Span 18-19:  thieves => (person :ARG0-of thieve-01)
Oracle Span 11-12:  trouble => trouble
Oracle Span 13-14:  unrest => unrest
Oracle Span 27-28:  wolfish => wolfish

Dependencies:
1	Fleets	_	NNS	NNS	_	0	root	_	_
2	bumping	_	VBG	VBG	_	1	vmod	_	_
3	fishing	_	NN	NN	_	4	nn	_	_
4	boats	_	NNS	NNS	_	2	dobj	_	_
5	.	_	.	.	_	1	punct	_	_
1	Little	_	JJ	JJ	_	4	amod	_	_
2	evil	_	JJ	JJ	_	4	amod	_	_
3	Japanese	_	JJ	JJ	_	4	amod	_	_
4	ghosts	_	NNS	NNS	_	0	root	_	_
5	stirring	_	VBG	VBG	_	4	vmod	_	_
6	up	_	RP	RP	_	5	prt	_	_
7	trouble	_	NN	NN	_	5	dobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	unrest	_	NN	NN	_	7	conj	_	_
10	.	_	.	.	_	4	punct	_	_
1	With	_	IN	IN	_	11	prep	_	_
2	hearts	_	NNS	NNS	_	1	pobj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	thieves	_	NNS	NNS	_	3	pobj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	arrogant	_	JJ	JJ	_	7	amod	_	_
7	form	_	NN	NN	_	4	conj	_	_
8	,	_	,	,	_	11	punct	_	_
9	they	_	PRP	PRP	_	11	nsubj	_	_
10	again	_	RB	RB	_	11	advmod	_	_
11	show	_	VBP	VBP	_	0	root	_	_
12	their	_	PRP$	PRP$	_	14	poss	_	_
13	wolfish	_	JJ	JJ	_	14	amod	_	_
14	appearance	_	NN	NN	_	11	dobj	_	_

Oracle:
(a / and, op, t / trouble)
(a / and, op, u / unrest)
(a3 / appearance, mod, w / wolfish)
(a3 / appearance, poss, t2 / they)
(a4 / and, op, f3 / form)
(a4 / and, op, h / heart)
(b / bump-01, ARG1, b2 / boat)
(b / bump-01, ARG2, f2 / fleet)
(b2 / boat, purpose, f / fish-01)
(c / country, name, n / name)
(f3 / form, mod, a5 / arrogance)
(g / ghost, mod, c / country)
(g / ghost, mod, e / evil)
(g / ghost, mod, l / little)
(h / heart, mod, p / person)
(n / name, op, "Japan")
(s / stir-04, ARG0, g / ghost)
(s / stir-04, ARG1, a / and)
(s2 / show-01, ARG0, t2 / they)
(s2 / show-01, ARG1, a3 / appearance)
(s2 / show-01, mod, a2 / again)
(s2 / show-01, prep-with, a4 / and)
(t3 / thieve-01, ARG0, p / person)

Input(Some(Graph((multi-sentence :snt1 (bump-01 :ARG2 fleet :ARG1 (boat :purpose fish-01)) :snt2 (stir-04 :ARG1 (and :op unrest :op trouble) :ARG0 (ghost :mod evil :mod little :mod (country :name (name :op "Japan")))) :snt3 (show-01 :prep-with (and :op (form :mod arrogance) :op (heart :mod (person :ARG0-of thieve-01))) :mod again :ARG1 (appearance :mod wolfish :poss they) :ARG0 they)),ArrayBuffer(Span(7,8,List(0, 1, 2),Japanese,(country :name (name :op "Japan")),false), Span(1,2,List(3),bumping,bump-01,false), Span(0,1,List(4),Fleets,fleet,false), Span(3,4,List(5),boats,boat,false), Span(2,3,List(6),fishing,fish-01,false), Span(9,10,List(7),stirring,stir-04,false), Span(12,13,List(8),and,and,false), Span(13,14,List(9),unrest,unrest,false), Span(11,12,List(10),trouble,trouble,false), Span(8,9,List(11),ghosts,ghost,false), Span(6,7,List(12),evil,evil,false), Span(5,6,List(13),Little,little,false), Span(25,26,List(14),show,show-01,false), Span(19,20,List(15),and,and,false), Span(21,22,List(16),form,form,false), Span(16,17,List(17),hearts,heart,false), Span(18,19,List(18, 19),thieves,(person :ARG0-of thieve-01),false), Span(24,25,List(20),again,again,false), Span(28,29,List(21),appearance,appearance,false), Span(27,28,List(22),wolfish,wolfish,false), Span(23,24,List(23),they,they,false), Span(20,21,List(24),arrogant,arrogance,false)),Map(2 -> "Japan", 5 -> boat, 12 -> evil, 15 -> and, 8 -> and, 21 -> appearance, 18 -> person, 24 -> arrogance, 7 -> stir-04, 17 -> heart, 1 -> name, 23 -> they, 4 -> fleet, 11 -> ghost, 14 -> show-01, 20 -> again, 6 -> fish-01, 9 -> unrest, 0 -> country, 22 -> wolfish, 16 -> form, 19 -> thieve-01, 10 -> trouble, 3 -> bump-01, 13 -> little),Map(e -> evil, w -> wolfish, n -> name, h -> heart, s2 -> show-01, t -> trouble, b -> bump-01, b2 -> boat, a3 -> appearance, s -> stir-04, t3 -> thieve-01, p -> person, g -> ghost, a -> and, a5 -> arrogance, f3 -> form, t2 -> they, a2 -> again, c -> country, f2 -> fleet, l -> little, u -> unrest, f -> fish-01, a4 -> and))),[Ljava.lang.String;@57a3af25,Annotation([Ljava.lang.String;@2b662a77,[Ljava.lang.String;@7f0eb4b4,[Ljava.lang.String;@5c33f1a9),Annotation([Ljava.lang.String;@1623b78d,[Ljava.lang.String;@c8c12ac,[Ledu.cmu.lti.nlp.amr.Dependency;@6adbc9d),Annotation([Ljava.lang.String;@4550bb58,[Ljava.lang.String;@4ec4f3a0,[Ljava.lang.String;@223191a6),Annotation([Ljava.lang.String;@49139829,[Ljava.lang.String;@9597028,[Ledu.cmu.lti.nlp.amr.Entity;@6069db50))
AMR:
(a / and, op, t / trouble)
(a / and, op, u / unrest)
(a2 / again, op, t2 / they)
(a4 / and, op, a5 / arrogance)
(a4 / and, op, h / heart)
(a4 / and, op, p / person)
(b / bump-01, ARG0, f2 / fleet)
(b / bump-01, ARG1, b2 / boat)
(c / country, mod, e / evil)
(c / country, name, n / name)
(e / evil, mod, l / little)
(f / fish-01, ARG0, b2 / boat)
(f / fish-01, ARG1, s / stir-04)
(f3 / form, mod, a5 / arrogance)
(g / ghost, mod, l / little)
(n / name, op, "Japan")
(s / stir-04, ARG0, g / ghost)
(s / stir-04, ARG1, t / trouble)
(s2 / show-01, ARG0, a3 / appearance)
(s2 / show-01, ARG1, w / wolfish)
(s2 / show-01, ARG2, b / bump-01)
(s2 / show-01, ARG6, a2 / again)
(t3 / thieve-01, ARG0, p / person)
(t3 / thieve-01, ARG1, b / bump-01)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.3
WARNING: makeIds can't find span Id: 0.2.3.1
WARNING: makeIds can't find span Id: 0.2.3.0
WARNING: makeIds can't find span Id: 0.2.3.0.0
WARNING: makeIds can't find span Id: 0.2.3.0.0.0
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.3.1.0
Decoded in 1,057,914 microseconds
Sentence: Never go back to that time, our humiliating appearance when signing the treaties. China be strong, swords be sharp and knives be shining, let's bury the approaching enemies!

Oracle Span 1:  and => and
Oracle Span 2:  appearance => appear-01
Oracle Span 3:  approaching => approach-01
Oracle Span 4:  back => back
Oracle Span 5:  bury => bury-01
Oracle Span 6:  China => (country :name (name :op "China"))
Oracle Span 7:  enemies => enemy
Oracle Span 8:  go => go-01
Oracle Span 9:  humiliating => humiliate-01
Oracle Span 10:  knives => knife
Oracle Span 11:  sharp => sharp
Oracle Span 12:  shining => shine-01
Oracle Span 13:  signing => sign-02
Oracle Span 14:  strong => strong
Oracle Span 15:  swords => sword
Oracle Span 16:  that => that
Oracle Span 17:  time => time
Oracle Span 18:  treaties => treaty
NER Entity: (country :name (name :op "China"))
Spans:
Span 22-23:  and => and
Span 9-10:  appearance => appear-01
Span 31-32:  approaching => approach-01
Span 2-3:  back => back
Span 29-30:  bury => bury-01
Span 15-16:  China => (country :name (name :op "China"))
Span 32-33:  enemies => enemy
Span 1-2:  go => go-01
Span 8-9:  humiliating => humiliate-01
Span 23-24:  knives => knife
Span 21-22:  sharp => sharp
Span 25-26:  shining => shine-01
Span 11-12:  signing => sign-02
Span 17-18:  strong => strong
Span 19-20:  swords => sword
Span 4-5:  that => that
Span 5-6:  time => time
Span 13-14:  treaties => treaty

 *** WARNING: The dependency tree seems broken.  I can't find the head of swords in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of sharp in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of knives in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of shining in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of bury in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of approaching in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 33
Langrangian relaxation converged after 43 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of swords in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of sharp in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of knives in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of shining in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of bury in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of approaching in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 33
Oracle Span 22-23:  and => and
Oracle Span 9-10:  appearance => appear-01
Oracle Span 31-32:  approaching => approach-01
Oracle Span 2-3:  back => back
Oracle Span 29-30:  bury => bury-01
Oracle Span 15-16:  China => (country :name (name :op "China"))
Oracle Span 32-33:  enemies => enemy
Oracle Span 1-2:  go => go-01
Oracle Span 8-9:  humiliating => humiliate-01
Oracle Span 23-24:  knives => knife
Oracle Span 21-22:  sharp => sharp
Oracle Span 25-26:  shining => shine-01
Oracle Span 11-12:  signing => sign-02
Oracle Span 17-18:  strong => strong
Oracle Span 19-20:  swords => sword
Oracle Span 4-5:  that => that
Oracle Span 5-6:  time => time
Oracle Span 13-14:  treaties => treaty

Dependencies:
1	Never	_	RB	RB	_	2	neg	_	_
2	go	_	VB	VB	_	0	root	_	_
3	back	_	RP	RP	_	2	prt	_	_
4	to	_	TO	TO	_	2	prep	_	_
5	that	_	DT	DT	_	6	det	_	_
6	time	_	NN	NN	_	4	pobj	_	_
7	,	_	,	,	_	6	punct	_	_
8	our	_	PRP$	PRP$	_	10	poss	_	_
9	humiliating	_	JJ	JJ	_	10	amod	_	_
10	appearance	_	NN	NN	_	6	appos	_	_
11	when	_	WRB	WRB	_	12	advmod	_	_
12	signing	_	VBG	VBG	_	2	advcl	_	_
13	the	_	DT	DT	_	14	det	_	_
14	treaties	_	NNS	NNS	_	12	dobj	_	_
15	.	_	.	.	_	2	punct	_	_
1	China	_	NNP	NNP	_	3	nsubj	_	_
2	be	_	VB	VB	_	3	cop	_	_
3	strong	_	JJ	JJ	_	15	ccomp	_	_
4	,	_	,	,	_	3	punct	_	_
5	swords	_	RB	RB	_	7	advmod	_	_
6	be	_	VB	VB	_	7	cop	_	_
7	sharp	_	JJ	JJ	_	3	dep	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	knives	_	VBZ	VBZ	_	3	conj	_	_
10	be	_	VB	VB	_	11	aux	_	_
11	shining	_	VBG	VBG	_	9	xcomp	_	_
12	,	_	,	,	_	15	punct	_	_
13	let	_	NNP	NNP	_	15	nsubj	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	bury	_	VBP	VBP	_	0	root	_	_
16	the	_	DT	DT	_	18	det	_	_
17	approaching	_	JJ	JJ	_	18	amod	_	_
18	enemies	_	NNS	NNS	_	15	dobj	_	_
19	!	_	.	.	_	15	punct	_	_

Oracle:
(a / appear-01, time, s / sign-02)
(a / appear-01, time, t2 / time)
(a2 / and, op, s3 / sharp)
(a2 / and, op, s5 / shine-01)
(a4 / approach-01, ARG1, e2 / enemy)
(b3 / bury-01, ARG1, e2 / enemy)
(c / country, name, n / name)
(g / go-01, ARG4, t2 / time)
(g / go-01, direction, b / back)
(h / humiliate-01, ARG0, a / appear-01)
(n / name, op, "China")
(s / sign-02, ARG1, t / treaty)
(s2 / strong, domain, c / country)
(s3 / sharp, domain, s4 / sword)
(s5 / shine-01, ARG0, k / knife)
(t2 / time, mod, t3 / that)

Input(Some(Graph((multi-sentence :snt1 (go-01 :direction back :time ever :ARG4 (time :time-of (appear-01 :time (sign-02 :ARG1 treaty :ARG0 we) :ARG0-of humiliate-01 :ARG1 we) :mod that) :ARG1 you :polarity - :mode imperative) :snt2 (strong :domain (country :name (name :op "China")) :mode imperative) :snt3 (and :op (shine-01 :ARG0 knife :mode imperative) :op (sharp :domain sword :mode imperative)) :snt4 (bury-01 :ARG1 (enemy :ARG1-of approach-01) :ARG0 we :mode imperative)),ArrayBuffer(Span(15,16,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(1,2,List(3),go,go-01,false), Span(2,3,List(4),back,back,false), Span(5,6,List(5),time,time,false), Span(8,9,List(6),humiliating,humiliate-01,false), Span(11,12,List(7),signing,sign-02,false), Span(13,14,List(8),treaties,treaty,false), Span(4,5,List(9),that,that,false), Span(17,18,List(10),strong,strong,false), Span(22,23,List(11),and,and,false), Span(25,26,List(12),shining,shine-01,false), Span(23,24,List(13),knives,knife,false), Span(21,22,List(14),sharp,sharp,false), Span(19,20,List(15),swords,sword,false), Span(29,30,List(16),bury,bury-01,false), Span(32,33,List(17),enemies,enemy,false), Span(31,32,List(18),approaching,approach-01,false), Span(9,10,List(19),appearance,appear-01,false)),Map(2 -> "China", 5 -> time, 12 -> shine-01, 15 -> sword, 8 -> treaty, 18 -> approach-01, 7 -> sign-02, 17 -> enemy, 1 -> name, 4 -> back, 11 -> and, 14 -> sharp, 6 -> humiliate-01, 9 -> that, 0 -> country, 16 -> bury-01, 19 -> appear-01, 10 -> strong, 3 -> go-01, 13 -> knife),Map(s5 -> shine-01, b3 -> bury-01, n -> name, h -> humiliate-01, s2 -> strong, k -> knife, t -> treaty, b -> back, e2 -> enemy, s -> sign-02, s4 -> sword, t3 -> that, g -> go-01, a -> appear-01, t2 -> time, a2 -> and, s3 -> sharp, c -> country, a4 -> approach-01))),[Ljava.lang.String;@4efbca5a,Annotation([Ljava.lang.String;@1b7cc17c,[Ljava.lang.String;@59662a0b,[Ljava.lang.String;@77fbd92c),Annotation([Ljava.lang.String;@67c27493,[Ljava.lang.String;@1a482e36,[Ledu.cmu.lti.nlp.amr.Dependency;@72967906),Annotation([Ljava.lang.String;@5b8dfcc1,[Ljava.lang.String;@2f9f7dcf,[Ljava.lang.String;@747ddf94),Annotation([Ljava.lang.String;@35e2d654,[Ljava.lang.String;@1bd4fdd,[Ledu.cmu.lti.nlp.amr.Entity;@55183b20))
AMR:
(a / appear-01, ARG1, t3 / that)
(a2 / and, op, k / knife)
(a2 / and, op, s3 / sharp)
(a2 / and, op, s5 / shine-01)
(a4 / approach-01, ARG1, e2 / enemy)
(b3 / bury-01, ARG1, e2 / enemy)
(c / country, name, n / name)
(e2 / enemy, mod, b / back)
(g / go-01, ARG1, s2 / strong)
(g / go-01, ARG2, t2 / time)
(g / go-01, direction, b / back)
(g / go-01, time, s / sign-02)
(h / humiliate-01, ARG1, a / appear-01)
(h / humiliate-01, ARG6, t2 / time)
(n / name, op, "China")
(s / sign-02, ARG1, t / treaty)
(s3 / sharp, mod, b / back)
(s4 / sword, mod, b / back)
(s5 / shine-01, ARG1, c / country)

WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.5
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.1.1
WARNING: makeIds can't find span Id: 0.0.3.1.2
WARNING: makeIds can't find span Id: 0.0.3.1.2.0
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.2
WARNING: makeIds can't find span Id: 0.3.2.0
WARNING: makeIds can't find span Id: 0.0.3.1
Decoded in 1,203,423 microseconds
Sentence: September 11th, 2010

Oracle Span 1:  2010 => 2010
Oracle Span 2:  September => 9
Spans:
Span 3-4:  2010 => 2010
Span 0-1:  September => 9

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  2010 => 2010
Oracle Span 0-1:  September => 9

Dependencies:
1	September	_	NNP	NNP	_	2	nn	_	_
2	11th	_	NNP	NNP	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	2010	_	CD	CD	_	2	amod	_	_

Oracle:


Input(Some(Graph((date-entity :month 9 :day 11 :year 2010),ArrayBuffer(Span(0,1,List(0),September,9,false), Span(3,4,List(1),2010,2010,false)),Map(1 -> 2010, 0 -> 9),Map(2 -> 2010, 9 -> 9))),[Ljava.lang.String;@6aeb35e6,Annotation([Ljava.lang.String;@1283bb96,[Ljava.lang.String;@74f0ea28,[Ljava.lang.String;@f6efaab),Annotation([Ljava.lang.String;@3c19aaa5,[Ljava.lang.String;@3349e9bb,[Ledu.cmu.lti.nlp.amr.Dependency;@409bf450),Annotation([Ljava.lang.String;@38d8f54a,[Ljava.lang.String;@49e53c76,[Ljava.lang.String;@351d00c0),Annotation([Ljava.lang.String;@2a3b5b47,[Ljava.lang.String;@55b699ef,[Ledu.cmu.lti.nlp.amr.Entity;@35d019a3))
AMR:
(2 / 2010, calendar, 9 / 9)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 11,115 microseconds
Sentence: I agree with the analysis of the thread starter, resolutely bump up. If war really comes, I would like to be Hua Mulan, to protect our home and defend our homeland, to spread the prestige of our China, to pledge to fight to the death defending our national dignity.

Oracle Span 1:  agree => agree-01
Oracle Span 2:  analysis => analyze-01
Oracle Span 3:  and => and
Oracle Span 4:  bump => bump-02
Oracle Span 5:  China => (country :name (name :op "China"))
Oracle Span 6:  comes => come-03
Oracle Span 7:  death => die-01
Oracle Span 8:  defend => defend-01
Oracle Span 9:  defending => defend-01
Oracle Span 10:  dignity => dignity
Oracle Span 11:  fight => fight-01
Oracle Span 12:  home => home
Oracle Span 13:  homeland => homeland
Oracle Span 14:  Hua Mulan => (person :name (name :op "Mulan" :op "Hua"))
Oracle Span 15:  I => i
Oracle Span 16:  I => i
Oracle Span 17:  like => like-02
Oracle Span 18:  national => nation
Oracle Span 19:  pledge => pledge-01
Oracle Span 20:  prestige => prestige
Oracle Span 21:  protect => protect-01
Oracle Span 22:  really => really
Oracle Span 23:  resolutely => resolute
Oracle Span 24:  spread => spread-03
Oracle Span 25:  starter => (person :ARG0-of start-01)
Oracle Span 26:  thread => thread
Oracle Span 27:  up => up
Oracle Span 28:  war => war
NER Entity: (person :name (name :op "Hua" :op "Mulan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 1-2:  agree => agree-01
Span 4-5:  analysis => analyze-01
Span 31-32:  and => and
Span 11-12:  bump => bump-02
Span 42-43:  China => (country :name (name :op "China"))
Span 17-18:  comes => come-03
Span 50-51:  death => die-01
Span 32-33:  defend => defend-01
Span 51-52:  defending => defend-01
Span 54-55:  dignity => dignity
Span 47-48:  fight => fight-01
Span 30-31:  home => home
Span 34-35:  homeland => homeland
Span 24-26:  Hua Mulan => (person :name (name :op "Mulan" :op "Hua"))
Span 0-1:  I => i
Span 19-20:  I => i
Span 21-22:  like => like-02
Span 53-54:  national => nation
Span 45-46:  pledge => pledge-01
Span 39-40:  prestige => prestige
Span 28-29:  protect => protect-01
Span 16-17:  really => really
Span 10-11:  resolutely => resolute
Span 37-38:  spread => spread-03
Span 8-9:  starter => (person :ARG0-of start-01)
Span 7-8:  thread => thread
Span 12-13:  up => up
Span 15-16:  war => war

 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of pledge in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of fight in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of death in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of defending in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of dignity in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 55
Langrangian relaxation converged after 30 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of pledge in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of fight in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of death in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of defending in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of dignity in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 55
Oracle Span 1-2:  agree => agree-01
Oracle Span 4-5:  analysis => analyze-01
Oracle Span 31-32:  and => and
Oracle Span 11-12:  bump => bump-02
Oracle Span 42-43:  China => (country :name (name :op "China"))
Oracle Span 17-18:  comes => come-03
Oracle Span 50-51:  death => die-01
Oracle Span 32-33:  defend => defend-01
Oracle Span 51-52:  defending => defend-01
Oracle Span 54-55:  dignity => dignity
Oracle Span 47-48:  fight => fight-01
Oracle Span 30-31:  home => home
Oracle Span 34-35:  homeland => homeland
Oracle Span 24-26:  Hua Mulan => (person :name (name :op "Mulan" :op "Hua"))
Oracle Span 0-1:  I => i
Oracle Span 19-20:  I => i
Oracle Span 21-22:  like => like-02
Oracle Span 53-54:  national => nation
Oracle Span 45-46:  pledge => pledge-01
Oracle Span 39-40:  prestige => prestige
Oracle Span 28-29:  protect => protect-01
Oracle Span 16-17:  really => really
Oracle Span 10-11:  resolutely => resolute
Oracle Span 37-38:  spread => spread-03
Oracle Span 8-9:  starter => (person :ARG0-of start-01)
Oracle Span 7-8:  thread => thread
Oracle Span 12-13:  up => up
Oracle Span 15-16:  war => war

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	agree	_	VBP	VBP	_	12	ccomp	_	_
3	with	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	analysis	_	NN	NN	_	3	pobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	9	det	_	_
8	thread	_	NN	NN	_	9	nn	_	_
9	starter	_	NN	NN	_	6	pobj	_	_
10	,	_	,	,	_	12	punct	_	_
11	resolutely	_	RB	RB	_	12	advmod	_	_
12	bump	_	VB	VB	_	0	root	_	_
13	up	_	RP	RP	_	12	prt	_	_
14	.	_	.	.	_	12	punct	_	_
1	If	_	IN	IN	_	4	mark	_	_
2	war	_	NN	NN	_	4	nsubj	_	_
3	really	_	RB	RB	_	4	advmod	_	_
4	comes	_	VBZ	VBZ	_	8	advcl	_	_
5	,	_	,	,	_	8	punct	_	_
6	I	_	PRP	PRP	_	8	nsubj	_	_
7	would	_	MD	MD	_	8	aux	_	_
8	like	_	VB	VB	_	0	root	_	_
9	to	_	TO	TO	_	12	aux	_	_
10	be	_	VB	VB	_	12	cop	_	_
11	Hua	_	NNP	NNP	_	12	nn	_	_
12	Mulan	_	NNP	NNP	_	8	ccomp	_	_
13	,	_	,	,	_	12	punct	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	protect	_	VB	VB	_	12	dep	_	_
16	our	_	PRP$	PRP$	_	17	poss	_	_
17	home	_	NN	NN	_	15	dobj	_	_
18	and	_	CC	CC	_	15	cc	_	_
19	defend	_	VB	VB	_	15	conj	_	_
20	our	_	PRP$	PRP$	_	21	poss	_	_
21	homeland	_	NN	NN	_	19	dobj	_	_
22	,	_	,	,	_	12	punct	_	_
23	to	_	TO	TO	_	24	aux	_	_
24	spread	_	VB	VB	_	12	dep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	prestige	_	NN	NN	_	24	dobj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	our	_	PRP$	PRP$	_	29	poss	_	_
29	China	_	NNP	NNP	_	27	pobj	_	_
30	,	_	,	,	_	24	punct	_	_
31	to	_	TO	TO	_	24	prep	_	_
32	pledge	_	NN	NN	_	31	pobj	_	_
33	to	_	TO	TO	_	34	aux	_	_
34	fight	_	VB	VB	_	32	vmod	_	_
35	to	_	TO	TO	_	34	prep	_	_
36	the	_	DT	DT	_	37	det	_	_
37	death	_	NN	NN	_	35	pobj	_	_
38	defending	_	VBG	VBG	_	37	vmod	_	_
39	our	_	PRP$	PRP$	_	41	poss	_	_
40	national	_	JJ	JJ	_	41	amod	_	_
41	dignity	_	NN	NN	_	38	dobj	_	_
42	.	_	.	.	_	8	punct	_	_

Oracle:
(a2 / agree-01, ARG0, i2 / i)
(a2 / agree-01, ARG1, a3 / analyze-01)
(a3 / analyze-01, ARG0, p / person)
(a4 / and, op, p4 / pledge-01)
(a4 / and, op, s2 / spread-03)
(b / bump-02, ARG5, u / up)
(b / bump-02, manner, r / resolute)
(c / come-03, ARG1, w / war)
(c / come-03, mod, r2 / really)
(c2 / country, name, n2 / name)
(d / die-01, ARG1, i / i)
(d2 / defend-01, ARG0, i / i)
(d2 / defend-01, ARG1, h2 / homeland)
(d4 / defend-01, ARG1, d5 / dignity)
(d5 / dignity, mod, n3 / nation)
(f / fight-01, degree, d / die-01)
(f / fight-01, purpose, d4 / defend-01)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, p2 / person)
(l / like-02, condition, c / come-03)
(n / name, op, "Hua")
(n / name, op, "Mulan")
(n2 / name, op, "China")
(p2 / person, domain, i / i)
(p2 / person, name, n / name)
(p2 / person, purpose, a4 / and)
(p3 / protect-01, ARG0, i / i)
(p3 / protect-01, ARG1, h / home)
(p4 / pledge-01, ARG0, i / i)
(p4 / pledge-01, ARG2, f / fight-01)
(p5 / prestige, poss, c2 / country)
(s / start-01, ARG0, p / person)
(s / start-01, ARG1, t / thread)
(s2 / spread-03, ARG0, i / i)
(s2 / spread-03, ARG1, p5 / prestige)

Input(Some(Graph((multi-sentence :snt2 (bump-02 :manner resolute :ARG5 up) :snt1 (agree-01 :ARG1 (analyze-01 :ARG0 (person :ARG0-of (start-01 :ARG1 thread))) :ARG0 i) :snt3 (like-02 :condition (come-03 :mod really :ARG1 war) :ARG1 (person :purpose (and :op (pledge-01 :ARG2 (fight-01 :purpose (defend-01 :ARG1 (dignity :mod nation :poss we)) :degree (die-01 :ARG1 i)) :ARG0 i) :op (spread-03 :ARG1 (prestige :poss (country :name (name :op "China") :poss we)) :ARG0 i) :op (and :op (protect-01 :ARG1 (home :poss we) :ARG0 i) :op (defend-01 :ARG1 (homeland :poss we) :ARG0 i))) :name (name :op "Mulan" :op "Hua") :domain i) :ARG0 i)),ArrayBuffer(Span(24,26,List(0, 1, 2, 3),Hua Mulan,(person :name (name :op "Mulan" :op "Hua")),false), Span(42,43,List(4, 5, 6),China,(country :name (name :op "China")),false), Span(11,12,List(7),bump,bump-02,false), Span(12,13,List(8),up,up,false), Span(1,2,List(9),agree,agree-01,false), Span(8,9,List(10, 11),starter,(person :ARG0-of start-01),false), Span(7,8,List(12),thread,thread,false), Span(0,1,List(13),I,i,false), Span(21,22,List(14),like,like-02,false), Span(17,18,List(15),comes,come-03,false), Span(16,17,List(16),really,really,false), Span(15,16,List(17),war,war,false), Span(31,32,List(18),and,and,false), Span(45,46,List(19),pledge,pledge-01,false), Span(47,48,List(20),fight,fight-01,false), Span(32,33,List(21),defend,defend-01,false), Span(54,55,List(22),dignity,dignity,false), Span(50,51,List(23),death,die-01,false), Span(37,38,List(24),spread,spread-03,false), Span(39,40,List(25),prestige,prestige,false), Span(28,29,List(26),protect,protect-01,false), Span(30,31,List(27),home,home,false), Span(51,52,List(28),defending,defend-01,false), Span(34,35,List(29),homeland,homeland,false), Span(19,20,List(30),I,i,false), Span(10,11,List(31),resolutely,resolute,false), Span(4,5,List(32),analysis,analyze-01,false), Span(53,54,List(33),national,nation,false)),Map(30 -> i, 2 -> "Mulan", 5 -> name, 33 -> nation, 27 -> home, 12 -> thread, 15 -> come-03, 8 -> up, 21 -> defend-01, 18 -> and, 24 -> spread-03, 7 -> bump-02, 17 -> war, 1 -> name, 23 -> die-01, 26 -> protect-01, 4 -> country, 11 -> start-01, 32 -> analyze-01, 14 -> like-02, 29 -> homeland, 20 -> fight-01, 28 -> defend-01, 6 -> "China", 9 -> agree-01, 0 -> person, 22 -> dignity, 16 -> really, 19 -> pledge-01, 10 -> person, 3 -> "Hua", 31 -> resolute, 25 -> prestige, 13 -> i),Map(w -> war, n -> name, h -> home, h2 -> homeland, p5 -> prestige, s2 -> spread-03, t -> thread, b -> bump-02, p2 -> person, a3 -> analyze-01, s -> start-01, d -> die-01, r2 -> really, p -> person, n3 -> nation, p4 -> pledge-01, d2 -> defend-01, d5 -> dignity, i2 -> i, r -> resolute, i -> i, a2 -> agree-01, c -> come-03, l -> like-02, u -> up, d4 -> defend-01, f -> fight-01, p3 -> protect-01, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@689604d9,Annotation([Ljava.lang.String;@18078bef,[Ljava.lang.String;@799f10e1,[Ljava.lang.String;@4c371370),Annotation([Ljava.lang.String;@145f66e3,[Ljava.lang.String;@3023df74,[Ledu.cmu.lti.nlp.amr.Dependency;@313ac989),Annotation([Ljava.lang.String;@4562e04d,[Ljava.lang.String;@2a65fe7c,[Ljava.lang.String;@4135c3b),Annotation([Ljava.lang.String;@6302bbb1,[Ljava.lang.String;@31304f14,[Ledu.cmu.lti.nlp.amr.Entity;@34a3d150))
AMR:
(a2 / agree-01, ARG0, i2 / i)
(a2 / agree-01, ARG1, a3 / analyze-01)
(a3 / analyze-01, ARG1, p / person)
(a4 / and, op, d4 / defend-01)
(a4 / and, op, h / home)
(b / bump-02, ARG1, a2 / agree-01)
(b / bump-02, ARG6, r2 / really)
(b / bump-02, direction, u / up)
(b / bump-02, manner, r / resolute)
(c / come-03, ARG1, w / war)
(c / come-03, ARG6, r2 / really)
(c2 / country, mod, u / up)
(c2 / country, name, n2 / name)
(d / die-01, ARG1, n3 / nation)
(d2 / defend-01, ARG0, d5 / dignity)
(d2 / defend-01, ARG1, d / die-01)
(d4 / defend-01, ARG1, h2 / homeland)
(f / fight-01, ARG1, d / die-01)
(l / like-02, ARG0, i / i)
(l / like-02, ARG1, b / bump-02)
(n / name, op, "Hua")
(n / name, op, "Mulan")
(n2 / name, op, "China")
(n3 / nation, mod, u / up)
(p2 / person, name, n / name)
(p3 / protect-01, ARG1, a4 / and)
(p3 / protect-01, ARG6, p2 / person)
(p4 / pledge-01, ARG1, f / fight-01)
(p5 / prestige, topic, c2 / country)
(s / start-01, ARG0, p / person)
(s / start-01, ARG1, t / thread)
(s2 / spread-03, ARG1, p5 / prestige)
(s2 / spread-03, ARG6, h2 / homeland)

WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.1
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.1.1.2
WARNING: makeIds can't find span Id: 0.2.1.1.2.0
WARNING: makeIds can't find span Id: 0.2.1.1.2.0.1
WARNING: makeIds can't find span Id: 0.2.1.1.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.1.1.2.0.0
WARNING: makeIds can't find span Id: 0.2.1.1.1
WARNING: makeIds can't find span Id: 0.2.1.1.1.0
WARNING: makeIds can't find span Id: 0.2.1.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.2.1.1.2.0.1.0.0
Decoded in 2,230,718 microseconds
Sentence: I very much wish I had been born in those passionate and upsurging times of Mao Zedong, the Long March, losing my head and shedding my blood, completely extinguishing all the enemies that wrong China, spreading our dragon prestige!

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  blood => blood
Oracle Span 4:  born => bear-02
Oracle Span 5:  China => (country :name (name :op "China"))
Oracle Span 6:  completely => complete
Oracle Span 7:  dragon => dragon
Oracle Span 8:  enemies => enemy
Oracle Span 9:  extinguishing => extinguish-01
Oracle Span 10:  head => head
Oracle Span 11:  I => i
Oracle Span 12:  Long March => (event :name (name :op "March" :op "Long"))
Oracle Span 13:  losing => lose-02
Oracle Span 14:  Mao Zedong => (person :name (name :op "Zedong" :op "Mao"))
Oracle Span 15:  much => much
Oracle Span 16:  passionate => passionate
Oracle Span 17:  prestige => prestige
Oracle Span 18:  shedding => shed-00
Oracle Span 19:  spreading => spread-03
Oracle Span 20:  that => that
Oracle Span 21:  upsurging => upsurge-00
Oracle Span 22:  very => very
Oracle Span 23:  wish => wish-01
Oracle Span 24:  wrong => wrong-01
NER Entity: (person :name (name :op "Mao" :op "Zedong"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 32-33:  all => all
Span 11-12:  and => and
Span 28-29:  blood => blood
Span 7-8:  born => bear-02
Span 37-38:  China => (country :name (name :op "China"))
Span 30-31:  completely => complete
Span 41-42:  dragon => dragon
Span 34-35:  enemies => enemy
Span 31-32:  extinguishing => extinguish-01
Span 24-25:  head => head
Span 0-1:  I => i
Span 19-21:  Long March => (event :name (name :op "March" :op "Long"))
Span 22-23:  losing => lose-02
Span 15-17:  Mao Zedong => (person :name (name :op "Zedong" :op "Mao"))
Span 2-3:  much => much
Span 10-11:  passionate => passionate
Span 42-43:  prestige => prestige
Span 26-27:  shedding => shed-00
Span 39-40:  spreading => spread-03
Span 35-36:  that => that
Span 12-13:  upsurging => upsurge-00
Span 1-2:  very => very
Span 3-4:  wish => wish-01
Span 36-37:  wrong => wrong-01

Langrangian relaxation converged after 74 iterations. Delta = 0.0
Oracle Span 32-33:  all => all
Oracle Span 11-12:  and => and
Oracle Span 28-29:  blood => blood
Oracle Span 7-8:  born => bear-02
Oracle Span 37-38:  China => (country :name (name :op "China"))
Oracle Span 30-31:  completely => complete
Oracle Span 41-42:  dragon => dragon
Oracle Span 34-35:  enemies => enemy
Oracle Span 31-32:  extinguishing => extinguish-01
Oracle Span 24-25:  head => head
Oracle Span 0-1:  I => i
Oracle Span 19-21:  Long March => (event :name (name :op "March" :op "Long"))
Oracle Span 22-23:  losing => lose-02
Oracle Span 15-17:  Mao Zedong => (person :name (name :op "Zedong" :op "Mao"))
Oracle Span 2-3:  much => much
Oracle Span 10-11:  passionate => passionate
Oracle Span 42-43:  prestige => prestige
Oracle Span 26-27:  shedding => shed-00
Oracle Span 39-40:  spreading => spread-03
Oracle Span 35-36:  that => that
Oracle Span 12-13:  upsurging => upsurge-00
Oracle Span 1-2:  very => very
Oracle Span 3-4:  wish => wish-01
Oracle Span 36-37:  wrong => wrong-01

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	very	_	RB	RB	_	3	advmod	_	_
3	much	_	RB	RB	_	4	advmod	_	_
4	wish	_	VBP	VBP	_	0	root	_	_
5	I	_	PRP	PRP	_	8	nsubjpass	_	_
6	had	_	VBD	VBD	_	8	aux	_	_
7	been	_	VBN	VBN	_	8	auxpass	_	_
8	born	_	VBN	VBN	_	4	ccomp	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	those	_	DT	DT	_	14	det	_	_
11	passionate	_	JJ	JJ	_	14	amod	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	upsurging	_	JJ	JJ	_	11	conj	_	_
14	times	_	NNS	NNS	_	9	pobj	_	_
15	of	_	IN	IN	_	14	prep	_	_
16	Mao	_	NNP	NNP	_	17	nn	_	_
17	Zedong	_	NNP	NNP	_	15	pobj	_	_
18	,	_	,	,	_	17	punct	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Long	_	NNP	NNP	_	21	nn	_	_
21	March	_	NNP	NNP	_	17	appos	_	_
22	,	_	,	,	_	17	punct	_	_
23	losing	_	VBG	VBG	_	8	ccomp	_	_
24	my	_	PRP$	PRP$	_	25	poss	_	_
25	head	_	NN	NN	_	23	dobj	_	_
26	and	_	CC	CC	_	23	cc	_	_
27	shedding	_	VBG	VBG	_	23	conj	_	_
28	my	_	PRP$	PRP$	_	29	poss	_	_
29	blood	_	NN	NN	_	27	dobj	_	_
30	,	_	,	,	_	23	punct	_	_
31	completely	_	RB	RB	_	32	advmod	_	_
32	extinguishing	_	VBG	VBG	_	23	dep	_	_
33	all	_	PDT	PDT	_	35	predet	_	_
34	the	_	DT	DT	_	35	det	_	_
35	enemies	_	NNS	NNS	_	32	dobj	_	_
36	that	_	IN	IN	_	35	prep	_	_
37	wrong	_	JJ	JJ	_	38	amod	_	_
38	China	_	NNP	NNP	_	36	pobj	_	_
39	,	_	,	,	_	23	punct	_	_
40	spreading	_	VBG	VBG	_	23	dep	_	_
41	our	_	PRP$	PRP$	_	42	poss	_	_
42	dragon	_	NN	NN	_	40	dobj	_	_
43	prestige	_	NN	NN	_	23	dobj	_	_
44	!	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, e2 / extinguish-01)
(a / and, op, l / lose-02)
(a / and, op, s / shed-00)
(a / and, op, s2 / spread-03)
(b / bear-02, ARG1, i / i)
(b / bear-02, purpose, a / and)
(b / bear-02, time, e / event)
(c2 / country, name, n3 / name)
(e / event, mod, p2 / passionate)
(e / event, mod, t3 / that)
(e / event, name, n2 / name)
(e / event, poss, p / person)
(e2 / extinguish-01, ARG0, i / i)
(e2 / extinguish-01, ARG1, e3 / enemy)
(e2 / extinguish-01, degree, c / complete)
(e3 / enemy, quant, a3 / all)
(i / i, part, b2 / blood)
(i / i, part, h / head)
(l / lose-02, ARG0, i / i)
(l / lose-02, ARG1, h / head)
(m / much, degree, v / very)
(n / name, op, "Mao")
(n / name, op, "Zedong")
(n2 / name, op, "Long")
(n2 / name, op, "March")
(n3 / name, op, "China")
(p / person, name, n / name)
(p3 / prestige, mod, d / dragon)
(s / shed-00, ARG0, i / i)
(s / shed-00, ARG1, b2 / blood)
(s2 / spread-03, ARG0, i / i)
(s2 / spread-03, ARG1, p3 / prestige)
(u / upsurge-00, ARG1, e / event)
(w / wish-01, ARG0, i / i)
(w / wish-01, ARG1, b / bear-02)
(w / wish-01, degree, m / much)
(w2 / wrong-01, ARG0, e3 / enemy)
(w2 / wrong-01, ARG1, c2 / country)

Input(Some(Graph((wish-01 :degree (much :degree very) :ARG1 (bear-02 :purpose (and :op (spread-03 :ARG1 (prestige :poss we :mod dragon) :ARG0 i) :op (extinguish-01 :degree complete :ARG1 (enemy :ARG0-of (wrong-01 :ARG1 (country :name (name :op "China"))) :quant all) :ARG0 i) :op (shed-00 :ARG1 (blood :part-of i) :ARG0 i) :op (lose-02 :ARG1 (head :part-of i) :ARG0 i)) :time (event :poss (person :name (name :op "Zedong" :op "Mao")) :mod that :ARG1-of upsurge-00 :mod passionate :name (name :op "March" :op "Long")) :ARG1 i) :ARG0 i),ArrayBuffer(Span(19,21,List(0, 1, 2, 3),Long March,(event :name (name :op "March" :op "Long")),false), Span(15,17,List(4, 5, 6, 7),Mao Zedong,(person :name (name :op "Zedong" :op "Mao")),false), Span(37,38,List(8, 9, 10),China,(country :name (name :op "China")),false), Span(3,4,List(11),wish,wish-01,false), Span(2,3,List(12),much,much,false), Span(1,2,List(13),very,very,false), Span(7,8,List(14),born,bear-02,false), Span(11,12,List(15),and,and,false), Span(39,40,List(16),spreading,spread-03,false), Span(42,43,List(17),prestige,prestige,false), Span(41,42,List(18),dragon,dragon,false), Span(31,32,List(19),extinguishing,extinguish-01,false), Span(34,35,List(20),enemies,enemy,false), Span(36,37,List(21),wrong,wrong-01,false), Span(32,33,List(22),all,all,false), Span(26,27,List(23),shedding,shed-00,false), Span(28,29,List(24),blood,blood,false), Span(22,23,List(25),losing,lose-02,false), Span(24,25,List(26),head,head,false), Span(10,11,List(27),passionate,passionate,false), Span(12,13,List(28),upsurging,upsurge-00,false), Span(35,36,List(29),that,that,false), Span(0,1,List(30),I,i,false), Span(30,31,List(31),completely,complete,false)),Map(30 -> i, 2 -> "March", 5 -> name, 27 -> passionate, 12 -> much, 15 -> and, 8 -> country, 21 -> wrong-01, 18 -> dragon, 24 -> blood, 7 -> "Mao", 17 -> prestige, 1 -> name, 23 -> shed-00, 26 -> head, 4 -> person, 11 -> wish-01, 14 -> bear-02, 29 -> that, 20 -> enemy, 28 -> upsurge-00, 6 -> "Zedong", 9 -> name, 0 -> event, 22 -> all, 16 -> spread-03, 19 -> extinguish-01, 10 -> "China", 3 -> "Long", 31 -> complete, 25 -> lose-02, 13 -> very),Map(e -> event, w -> wish-01, n -> name, h -> head, s2 -> spread-03, b -> bear-02, b2 -> blood, p2 -> passionate, e2 -> extinguish-01, a3 -> all, s -> shed-00, v -> very, d -> dragon, m -> much, t3 -> that, p -> person, a -> and, n3 -> name, w2 -> wrong-01, i -> i, c -> complete, u -> upsurge-00, l -> lose-02, e3 -> enemy, p3 -> prestige, c2 -> country, n2 -> name))),[Ljava.lang.String;@2a4fb17b,Annotation([Ljava.lang.String;@5c6648b0,[Ljava.lang.String;@6f1de4c7,[Ljava.lang.String;@459e9125),Annotation([Ljava.lang.String;@128d2484,[Ljava.lang.String;@7cc0cdad,[Ledu.cmu.lti.nlp.amr.Dependency;@7c7b252e),Annotation([Ljava.lang.String;@4d5d943d,[Ljava.lang.String;@368f2016,[Ljava.lang.String;@4c583ecf),Annotation([Ljava.lang.String;@692f203f,[Ljava.lang.String;@48f2bd5b,[Ledu.cmu.lti.nlp.amr.Entity;@7b2bbc3))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / passionate)
(a / and, op, u / upsurge-00)
(a3 / all, op, e2 / extinguish-01)
(b / bear-02, ARG0, s / shed-00)
(b / bear-02, ARG1, l / lose-02)
(c2 / country, name, n3 / name)
(e / event, name, n2 / name)
(e2 / extinguish-01, ARG1, e3 / enemy)
(e2 / extinguish-01, ARG6, s2 / spread-03)
(e2 / extinguish-01, location, c2 / country)
(e2 / extinguish-01, manner, c / complete)
(l / lose-02, ARG0, c / complete)
(l / lose-02, ARG1, h / head)
(m / much, degree, v / very)
(n / name, op, "Mao")
(n / name, op, "Zedong")
(n2 / name, op, "Long")
(n2 / name, op, "March")
(n3 / name, op, "China")
(p / person, mod, e / event)
(p / person, name, n / name)
(s / shed-00, ARG1, b2 / blood)
(s2 / spread-03, ARG1, d / dragon)
(s2 / spread-03, ARG6, p3 / prestige)
(t3 / that, op, c2 / country)
(u / upsurge-00, ARG1, e3 / enemy)
(w / wish-01, ARG0, i / i)
(w / wish-01, ARG1, b / bear-02)
(w / wish-01, degree, m / much)
(w2 / wrong-01, ARG1, c2 / country)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.4
WARNING: makeIds can't find span Id: 0.1.0.4.0
WARNING: makeIds can't find span Id: 0.1.0.4.0.1
WARNING: makeIds can't find span Id: 0.1.0.4.0.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.3
WARNING: makeIds can't find span Id: 0.1.1.3.0
WARNING: makeIds can't find span Id: 0.1.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.1.2.1
Decoded in 3,481,086 microseconds
Sentence: How Long are We Going to Tolerate Japan?

Oracle Span 1:  Japan => (country :name (name :op "Japan"))
Oracle Span 2:  Tolerate => tolerate-01
Oracle Span 3:  We => we
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 7-8:  Japan => (country :name (name :op "Japan"))
Span 6-7:  Tolerate => tolerate-01
Span 3-4:  We => we

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 7-8:  Japan => (country :name (name :op "Japan"))
Oracle Span 6-7:  Tolerate => tolerate-01
Oracle Span 3-4:  We => we

Dependencies:
1	How	_	WRB	WRB	_	2	advmod	_	_
2	Long	_	JJ	JJ	_	5	dep	_	_
3	are	_	VBP	VBP	_	5	aux	_	_
4	We	_	PRP	PRP	_	5	nsubj	_	_
5	Going	_	VBG	VBG	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	Tolerate	_	NNP	NNP	_	8	nn	_	_
8	Japan	_	NNP	NNP	_	6	pobj	_	_
9	?	_	.	.	_	5	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "Japan")
(t / tolerate-01, ARG0, w / we)
(t / tolerate-01, ARG1, c / country)

Input(Some(Graph((tolerate-01 :duration amr-unknown :ARG1 (country :name (name :op "Japan")) :ARG0 we),ArrayBuffer(Span(7,8,List(0, 1, 2),Japan,(country :name (name :op "Japan")),false), Span(6,7,List(3),Tolerate,tolerate-01,false), Span(3,4,List(4),We,we,false)),Map(2 -> "Japan", 1 -> name, 4 -> we, 0 -> country, 3 -> tolerate-01),Map(w -> we, n -> name, t -> tolerate-01, c -> country))),[Ljava.lang.String;@a1153bc,Annotation([Ljava.lang.String;@1aafa419,[Ljava.lang.String;@47eaca72,[Ljava.lang.String;@55141def),Annotation([Ljava.lang.String;@55182842,[Ljava.lang.String;@3270d194,[Ledu.cmu.lti.nlp.amr.Dependency;@235834f2),Annotation([Ljava.lang.String;@5656be13,[Ljava.lang.String;@4218d6a3,[Ljava.lang.String;@76505305),Annotation([Ljava.lang.String;@14cd1699,[Ljava.lang.String;@77888435,[Ledu.cmu.lti.nlp.amr.Entity;@73a1e9a9))
AMR:
(c / country, name, n / name)
(n / name, op, "Japan")
(t / tolerate-01, ARG0, c / country)
(t / tolerate-01, ARG1, w / we)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 56,800 microseconds
Sentence: My fellow citizens:

Oracle Span 1:  citizens => citizen
Oracle Span 2:  fellow => fellow
Spans:
Span 2-3:  citizens => citizen
Span 1-2:  fellow => fellow

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  citizens => citizen
Oracle Span 1-2:  fellow => fellow

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	0	root	_	_
4	:	_	:	:	_	3	punct	_	_

Oracle:
(c / citizen, mod, f / fellow)

Input(Some(Graph((say-01 :ARG0 i :ARG2 (citizen :mod fellow :poss i)),ArrayBuffer(Span(2,3,List(0),citizens,citizen,false), Span(1,2,List(1),fellow,fellow,false)),Map(1 -> fellow, 0 -> citizen),Map(c -> citizen, f -> fellow))),[Ljava.lang.String;@71d44a3,Annotation([Ljava.lang.String;@7b98f307,[Ljava.lang.String;@4802796d,[Ljava.lang.String;@34123d65),Annotation([Ljava.lang.String;@59474f18,[Ljava.lang.String;@65fb9ffc,[Ledu.cmu.lti.nlp.amr.Dependency;@3e694b3f),Annotation([Ljava.lang.String;@1bb5a082,[Ljava.lang.String;@78691363,[Ljava.lang.String;@41d477ed),Annotation([Ljava.lang.String;@3590fc5b,[Ljava.lang.String;@397fbdb,[Ledu.cmu.lti.nlp.amr.Entity;@33d512c1))
AMR:
(c / citizen, mod, f / fellow)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 7,027 microseconds
Sentence: Hello, everyone! We all know the "September 18th" Incident, but now Japan again has a premeditated plan for another "September 18th" on the sea, another "Lugou Bridge on the sea".

Oracle Span 1:  again => again
Oracle Span 2:  all => all
Oracle Span 3:  another => another
Oracle Span 4:  another => another
Oracle Span 5:  everyone => everyone
Oracle Span 6:  has => have-concession-91
Oracle Span 7:  Hello => hello
Oracle Span 8:  Incident => incident
Oracle Span 9:  Japan => (country :name (name :op "Japan"))
Oracle Span 10:  know => know-01
Oracle Span 11:  Lugou Bridge => (incident :name (name :op "Bridge" :op "Lugou"))
Oracle Span 12:  now => now
Oracle Span 13:  plan => plan-01
Oracle Span 14:  premeditated => premeditate-01
Oracle Span 15:  sea => sea
Oracle Span 16:  sea => sea
Oracle Span 17:  September 18th => (incident :name (name :op "18th" :op "September"))
Oracle Span 18:  We => we
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Lugou" :op "Bridge"))
Spans:
Span 17-18:  again => again
Span 5-6:  all => all
Span 23-24:  another => another
Span 32-33:  another => another
Span 2-3:  everyone => everyone
Span 18-19:  has => have-concession-91
Span 0-1:  Hello => hello
Span 12-13:  Incident => incident
Span 16-17:  Japan => (country :name (name :op "Japan"))
Span 6-7:  know => know-01
Span 34-36:  Lugou Bridge => (incident :name (name :op "Bridge" :op "Lugou"))
Span 15-16:  now => now
Span 21-22:  plan => plan-01
Span 20-21:  premeditated => premeditate-01
Span 30-31:  sea => sea
Span 38-39:  sea => sea
Span 9-11:  September 18th => (incident :name (name :op "18th" :op "September"))
Span 4-5:  We => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of sea in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 40
Langrangian relaxation converged after 32 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of sea in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 40
Oracle Span 17-18:  again => again
Oracle Span 5-6:  all => all
Oracle Span 23-24:  another => another
Oracle Span 32-33:  another => another
Oracle Span 2-3:  everyone => everyone
Oracle Span 18-19:  has => have-concession-91
Oracle Span 0-1:  Hello => hello
Oracle Span 12-13:  Incident => incident
Oracle Span 16-17:  Japan => (country :name (name :op "Japan"))
Oracle Span 6-7:  know => know-01
Oracle Span 34-36:  Lugou Bridge => (incident :name (name :op "Bridge" :op "Lugou"))
Oracle Span 15-16:  now => now
Oracle Span 21-22:  plan => plan-01
Oracle Span 20-21:  premeditated => premeditate-01
Oracle Span 30-31:  sea => sea
Oracle Span 38-39:  sea => sea
Oracle Span 9-11:  September 18th => (incident :name (name :op "18th" :op "September"))
Oracle Span 4-5:  We => we

Dependencies:
1	Hello	_	UH	UH	_	3	discourse	_	_
2	,	_	,	,	_	3	punct	_	_
3	everyone	_	NN	NN	_	0	root	_	_
4	!	_	.	.	_	3	punct	_	_
1	We	_	PRP	PRP	_	3	nsubj	_	_
2	all	_	DT	DT	_	3	advmod	_	_
3	know	_	VBP	VBP	_	0	root	_	_
4	the	_	DT	DT	_	9	det	_	_
5	"	_	``	``	_	9	punct	_	_
6	September	_	NNP	NNP	_	9	nn	_	_
7	18th	_	NNPS	NNPS	_	9	nn	_	_
8	"	_	''	''	_	9	punct	_	_
9	Incident	_	NN	NN	_	3	dobj	_	_
10	,	_	,	,	_	3	punct	_	_
11	but	_	CC	CC	_	3	cc	_	_
12	now	_	RB	RB	_	15	advmod	_	_
13	Japan	_	NNP	NNP	_	15	nsubj	_	_
14	again	_	RB	RB	_	15	advmod	_	_
15	has	_	VBZ	VBZ	_	3	conj	_	_
16	a	_	DT	DT	_	18	det	_	_
17	premeditated	_	JJ	JJ	_	18	amod	_	_
18	plan	_	NN	NN	_	15	dobj	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	another	_	DT	DT	_	23	det	_	_
21	"	_	``	``	_	23	punct	_	_
22	September	_	NNP	NNP	_	23	nn	_	_
23	18th	_	NNP	NNP	_	19	pobj	_	_
24	"	_	''	''	_	23	punct	_	_
25	on	_	IN	IN	_	18	prep	_	_
26	the	_	DT	DT	_	27	det	_	_
27	sea	_	NN	NN	_	25	pobj	_	_
28	,	_	,	,	_	27	punct	_	_
29	another	_	DT	DT	_	32	det	_	_
30	"	_	``	``	_	32	punct	_	_
31	Lugou	_	NNP	NNP	_	32	nn	_	_
32	Bridge	_	NNP	NNP	_	27	appos	_	_
33	on	_	IN	IN	_	32	prep	_	_
34	the	_	DT	DT	_	35	det	_	_
35	sea	_	NN	NN	_	33	pobj	_	_
36	"	_	''	''	_	15	punct	_	_
37	.	_	.	.	_	3	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(h / have-concession-91, ARG1, p2 / plan-01)
(h / have-concession-91, ARG2, k / know-01)
(i / incident, name, n / name)
(i2 / incident, location, s / sea)
(i2 / incident, mod, a3 / another)
(i2 / incident, name, n / name)
(i3 / incident, location, s2 / sea)
(i3 / incident, mod, a4 / another)
(i3 / incident, name, n5 / name)
(k / know-01, ARG0, w / we)
(k / know-01, ARG1, i / incident)
(n / name, op, "18th")
(n / name, op, "September")
(n2 / name, op, "Japan")
(n5 / name, op, "Bridge")
(n5 / name, op, "Lugou")
(p / premeditate-01, ARG1, p2 / plan-01)
(p2 / plan-01, ARG0, c2 / country)
(p2 / plan-01, ARG1, i2 / incident)
(p2 / plan-01, mod, a2 / again)
(p2 / plan-01, time, n3 / now)
(w / we, mod, a / all)

Input(Some(Graph((multi-sentence :snt1 (say-01 :ARG0 i :ARG1 hello :ARG2 everyone) :snt2 (have-concession-91 :ARG2 (know-01 :ARG1 (incident :name (name :op "18th" :op "September")) :ARG0 (we :mod all)) :ARG1 (plan-01 :mod again :time now :ARG1-of premeditate-01 :ARG1 (incident :ARG0-of (mean-01 :ARG1 (incident :location sea :mod another :name (name :op "Bridge" :op "Lugou"))) :location sea :mod another :name name) :ARG0 (country :name (name :op "Japan"))))),ArrayBuffer(Span(16,17,List(0, 1, 2),Japan,(country :name (name :op "Japan")),false), Span(34,36,List(3, 4, 5, 6),Lugou Bridge,(incident :name (name :op "Bridge" :op "Lugou")),false), Span(9,11,List(7, 8, 9, 10),September 18th,(incident :name (name :op "18th" :op "September")),false), Span(0,1,List(11),Hello,hello,false), Span(2,3,List(12),everyone,everyone,false), Span(21,22,List(13),plan,plan-01,false), Span(17,18,List(14),again,again,false), Span(15,16,List(15),now,now,false), Span(20,21,List(16),premeditated,premeditate-01,false), Span(12,13,List(17),Incident,incident,false), Span(23,24,List(18),another,another,false), Span(30,31,List(19),sea,sea,false), Span(38,39,List(20),sea,sea,false), Span(32,33,List(21),another,another,false), Span(6,7,List(22),know,know-01,false), Span(4,5,List(23),We,we,false), Span(5,6,List(24),all,all,false), Span(18,19,List(25),has,have-concession-91,false)),Map(2 -> "Japan", 5 -> "Bridge", 12 -> everyone, 15 -> now, 8 -> name, 21 -> another, 18 -> another, 24 -> all, 7 -> incident, 17 -> incident, 1 -> name, 23 -> we, 4 -> name, 11 -> hello, 14 -> again, 20 -> sea, 6 -> "Lugou", 9 -> "18th", 0 -> country, 22 -> know-01, 16 -> premeditate-01, 19 -> sea, 10 -> "September", 3 -> incident, 25 -> have-concession-91, 13 -> plan-01),Map(e -> everyone, w -> we, n -> name, h -> have-concession-91, s2 -> sea, h2 -> hello, k -> know-01, p2 -> plan-01, a3 -> another, s -> sea, i3 -> incident, p -> premeditate-01, a -> all, n3 -> now, i2 -> incident, a2 -> again, i -> incident, n2 -> name, c2 -> country, a4 -> another, n5 -> name))),[Ljava.lang.String;@515c6049,Annotation([Ljava.lang.String;@639c2c1d,[Ljava.lang.String;@5fe94a96,[Ljava.lang.String;@443118b0),Annotation([Ljava.lang.String;@765d7657,[Ljava.lang.String;@74235045,[Ledu.cmu.lti.nlp.amr.Dependency;@618b19ad),Annotation([Ljava.lang.String;@2d3379b4,[Ljava.lang.String;@30c15d8b,[Ljava.lang.String;@5e0e82ae),Annotation([Ljava.lang.String;@6771beb3,[Ljava.lang.String;@51399530,[Ledu.cmu.lti.nlp.amr.Entity;@6b2ea799))
AMR:
(a3 / another, calendar, i3 / incident)
(c2 / country, name, n2 / name)
(e / everyone, calendar, h2 / hello)
(e / everyone, poss, i / incident)
(h / have-concession-91, ARG0, a2 / again)
(h / have-concession-91, ARG1, c2 / country)
(h / have-concession-91, ARG2, p2 / plan-01)
(h / have-concession-91, ARG6, n3 / now)
(i / incident, name, n / name)
(i2 / incident, calendar, a2 / again)
(i3 / incident, location, s / sea)
(i3 / incident, name, n5 / name)
(k / know-01, ARG0, a / all)
(k / know-01, ARG2, e / everyone)
(k / know-01, ARG6, w / we)
(n / name, op, "18th")
(n / name, op, "September")
(n2 / name, op, "Japan")
(n5 / name, op, "Bridge")
(n5 / name, op, "Lugou")
(p / premeditate-01, ARG0, s / sea)
(p / premeditate-01, ARG1, p2 / plan-01)
(p2 / plan-01, ARG0, h2 / hello)
(p2 / plan-01, ARG6, a4 / another)
(s2 / sea, calendar, a3 / another)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.2.0
WARNING: makeIds can't find span Id: 0.1.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.2.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.4
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.2.0.2
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 1,144,190 microseconds
Sentence: Japan surprisingly defied the strong condemnation of the whole world, openly invaded our country's sacred territory, "the Diaoyu Islands".

Oracle Span 1:  condemnation => condemn-01
Oracle Span 2:  country => country
Oracle Span 3:  defied => defy-01
Oracle Span 4:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Oracle Span 5:  invaded => invade-01
Oracle Span 6:  Japan => (name :op "Japan")
Oracle Span 7:  openly => open
Oracle Span 8:  sacred => sacred
Oracle Span 9:  strong => strong
Oracle Span 10:  surprisingly => surprise-01
Oracle Span 11:  territory => territory
Oracle Span 12:  whole => whole
Oracle Span 13:  world => world
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 5-6:  condemnation => condemn-01
Span 14-15:  country => country
Span 2-3:  defied => defy-01
Span 21-23:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Span 12-13:  invaded => invade-01
Span 0-1:  Japan => (name :op "Japan")
Span 11-12:  openly => open
Span 16-17:  sacred => sacred
Span 4-5:  strong => strong
Span 1-2:  surprisingly => surprise-01
Span 17-18:  territory => territory
Span 8-9:  whole => whole
Span 9-10:  world => world

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 5-6:  condemnation => condemn-01
Oracle Span 14-15:  country => country
Oracle Span 2-3:  defied => defy-01
Oracle Span 21-23:  Diaoyu Islands => (name :op "Islands" :op "Diaoyu")
Oracle Span 12-13:  invaded => invade-01
Oracle Span 0-1:  Japan => (name :op "Japan")
Oracle Span 11-12:  openly => open
Oracle Span 16-17:  sacred => sacred
Oracle Span 4-5:  strong => strong
Oracle Span 1-2:  surprisingly => surprise-01
Oracle Span 17-18:  territory => territory
Oracle Span 8-9:  whole => whole
Oracle Span 9-10:  world => world

Dependencies:
1	Japan	_	NNP	NNP	_	3	nsubj	_	_
2	surprisingly	_	RB	RB	_	3	advmod	_	_
3	defied	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	strong	_	JJ	JJ	_	6	amod	_	_
6	condemnation	_	NN	NN	_	3	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	whole	_	JJ	JJ	_	10	amod	_	_
10	world	_	NN	NN	_	7	pobj	_	_
11	,	_	,	,	_	3	punct	_	_
12	openly	_	RB	RB	_	13	advmod	_	_
13	invaded	_	VBD	VBD	_	3	dep	_	_
14	our	_	PRP$	PRP$	_	15	poss	_	_
15	country	_	NN	NN	_	18	poss	_	_
16	's	_	POS	POS	_	15	possessive	_	_
17	sacred	_	JJ	JJ	_	18	amod	_	_
18	territory	_	NN	NN	_	13	dobj	_	_
19	,	_	,	,	_	18	punct	_	_
20	"	_	``	``	_	18	punct	_	_
21	the	_	DT	DT	_	23	det	_	_
22	Diaoyu	_	NNP	NNP	_	23	nn	_	_
23	Islands	_	NNPS	NNPS	_	18	dep	_	_
24	"	_	''	''	_	18	punct	_	_
25	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(c2 / condemn-01, ARG0, w / world)
(c2 / condemn-01, ARG1, c / country)
(c2 / condemn-01, manner, s2 / strong)
(d / defy-01, ARG0, c / country)
(d / defy-01, ARG1, c2 / condemn-01)
(i / invade-01, ARG1, t / territory)
(i / invade-01, manner, o2 / open)
(n / name, op, "Japan")
(n2 / name, op, "Diaoyu")
(n2 / name, op, "Islands")
(s / surprise-01, ARG0, d / defy-01)
(t / territory, mod, s3 / sacred)
(t / territory, name, n2 / name)
(w / world, mod, w2 / whole)

Input(Some(Graph((and :op (defy-01 :ARG0-of surprise-01 :ARG1 (condemn-01 :manner strong :ARG0 (world :mod whole) :ARG1 country) :ARG0 (country :name (name :op "Japan"))) :op (invade-01 :manner open :ARG1 (territory :mod sacred :poss (country :poss we) :name (name :op "Islands" :op "Diaoyu")))),ArrayBuffer(Span(0,1,List(0, 1),Japan,(name :op "Japan"),false), Span(21,23,List(2, 3, 4),Diaoyu Islands,(name :op "Islands" :op "Diaoyu"),false), Span(2,3,List(5),defied,defy-01,false), Span(9,10,List(6),world,world,false), Span(8,9,List(7),whole,whole,false), Span(4,5,List(8),strong,strong,false), Span(14,15,List(9),country,country,false), Span(12,13,List(10),invaded,invade-01,false), Span(17,18,List(11),territory,territory,false), Span(16,17,List(12),sacred,sacred,false), Span(1,2,List(13),surprisingly,surprise-01,false), Span(5,6,List(14),condemnation,condemn-01,false), Span(11,12,List(15),openly,open,false)),Map(2 -> name, 5 -> defy-01, 12 -> sacred, 15 -> open, 8 -> strong, 7 -> whole, 1 -> "Japan", 4 -> "Diaoyu", 11 -> territory, 14 -> condemn-01, 6 -> world, 9 -> country, 0 -> name, 10 -> invade-01, 3 -> "Islands", 13 -> surprise-01),Map(w -> world, n -> name, s2 -> strong, t -> territory, s -> surprise-01, d -> defy-01, o2 -> open, w2 -> whole, i -> invade-01, s3 -> sacred, c -> country, c2 -> condemn-01, n2 -> name))),[Ljava.lang.String;@411f53a0,Annotation([Ljava.lang.String;@2b71e916,[Ljava.lang.String;@36fc695d,[Ljava.lang.String;@28701274),Annotation([Ljava.lang.String;@13c9d689,[Ljava.lang.String;@3754a4bf,[Ledu.cmu.lti.nlp.amr.Dependency;@62379589),Annotation([Ljava.lang.String;@4afcd809,[Ljava.lang.String;@175c2241,[Ljava.lang.String;@5bf0d49),Annotation([Ljava.lang.String;@5b7a5baa,[Ljava.lang.String;@776aec5c,[Ledu.cmu.lti.nlp.amr.Entity;@1d296da))
AMR:
(c2 / condemn-01, ARG1, w / world)
(c2 / condemn-01, manner, s2 / strong)
(d / defy-01, ARG0, n / name)
(d / defy-01, ARG1, c2 / condemn-01)
(d / defy-01, ARG6, o2 / open)
(i / invade-01, ARG1, t / territory)
(i / invade-01, manner, o2 / open)
(n / name, op, "Japan")
(n2 / name, op, "Diaoyu")
(n2 / name, op, "Islands")
(s / surprise-01, ARG0, n2 / name)
(s / surprise-01, ARG1, n / name)
(t / territory, mod, s3 / sacred)
(t / territory, poss, c / country)
(w / world, mod, w2 / whole)

WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 640,466 microseconds
Sentence: As we all know, the "Diaoyu Islands" have always belonged to China; due to historical reasons, what originally belongs us has become controversial.

Oracle Span 1:  all => all
Oracle Span 2:  always => always
Oracle Span 3:  become => become-01
Oracle Span 4:  belonged => belong-01
Oracle Span 5:  belongs => (thing :ARG0-of belong-01)
Oracle Span 6:  China => (country :name (name :op "China"))
Oracle Span 7:  controversial => controversy
Oracle Span 8:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 9:  historical => history
Oracle Span 10:  know => know-01
Oracle Span 11:  originally => original
Oracle Span 12:  reasons => reason
Oracle Span 13:  we => we
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 2-3:  all => all
Span 11-12:  always => always
Span 26-27:  become => become-01
Span 12-13:  belonged => belong-01
Span 23-24:  belongs => (thing :ARG0-of belong-01)
Span 14-15:  China => (country :name (name :op "China"))
Span 27-28:  controversial => controversy
Span 7-9:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Span 18-19:  historical => history
Span 3-4:  know => know-01
Span 22-23:  originally => original
Span 19-20:  reasons => reason
Span 1-2:  we => we

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Oracle Span 2-3:  all => all
Oracle Span 11-12:  always => always
Oracle Span 26-27:  become => become-01
Oracle Span 12-13:  belonged => belong-01
Oracle Span 23-24:  belongs => (thing :ARG0-of belong-01)
Oracle Span 14-15:  China => (country :name (name :op "China"))
Oracle Span 27-28:  controversial => controversy
Oracle Span 7-9:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 18-19:  historical => history
Oracle Span 3-4:  know => know-01
Oracle Span 22-23:  originally => original
Oracle Span 19-20:  reasons => reason
Oracle Span 1-2:  we => we

Dependencies:
1	As	_	IN	IN	_	4	mark	_	_
2	we	_	PRP	PRP	_	4	nsubj	_	_
3	all	_	DT	DT	_	4	advmod	_	_
4	know	_	VBP	VBP	_	13	advcl	_	_
5	,	_	,	,	_	13	punct	_	_
6	the	_	DT	DT	_	9	det	_	_
7	"	_	``	``	_	9	punct	_	_
8	Diaoyu	_	NNP	NNP	_	9	nn	_	_
9	Islands	_	NNP	NNP	_	13	nsubj	_	_
10	"	_	''	''	_	9	punct	_	_
11	have	_	VBP	VBP	_	13	aux	_	_
12	always	_	RB	RB	_	13	advmod	_	_
13	belonged	_	VBN	VBN	_	0	root	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	China	_	NNP	NNP	_	14	pobj	_	_
16	;	_	:	:	_	15	punct	_	_
17	due	_	JJ	JJ	_	15	amod	_	_
18	to	_	TO	TO	_	17	prep	_	_
19	historical	_	JJ	JJ	_	20	amod	_	_
20	reasons	_	NNS	NNS	_	18	pobj	_	_
21	,	_	,	,	_	20	punct	_	_
22	what	_	WP	WP	_	24	nsubj	_	_
23	originally	_	RB	RB	_	24	advmod	_	_
24	belongs	_	VBZ	VBZ	_	20	rcmod	_	_
25	us	_	PRP	PRP	_	27	nsubj	_	_
26	has	_	VBZ	VBZ	_	27	aux	_	_
27	become	_	VBN	VBN	_	24	ccomp	_	_
28	controversial	_	JJ	JJ	_	27	acomp	_	_
29	.	_	.	.	_	13	punct	_	_

Oracle:
(b / belong-01, ARG0, i / island)
(b / belong-01, ARG1, c2 / country)
(b / belong-01, time, a / always)
(b2 / become-01, ARG1, t / thing)
(b2 / become-01, ARG2, c3 / controversy)
(b3 / belong-01, ARG0, t / thing)
(b3 / belong-01, mod, o / original)
(c2 / country, name, n2 / name)
(i / island, name, n / name)
(k / know-01, ARG0, w / we)
(k / know-01, ARG1, b / belong-01)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(n2 / name, op, "China")
(r / reason, mod, h / history)
(w / we, mod, a2 / all)

Input(Some(Graph((multi-sentence :snt1 (belong-01 :ARG1-of (know-01 :ARG0 (we :mod all)) :time always :ARG1 (country :name (name :op "China")) :ARG0 (island :name (name :op "Islands" :op "Diaoyu"))) :snt2 (cause-01 :ARG0 (reason :mod history) :ARG1 (become-01 :ARG2 controversy :ARG1 (thing :ARG0-of (belong-01 :mod original :ARG1 we))))),ArrayBuffer(Span(7,9,List(0, 1, 2, 3),Diaoyu Islands,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(14,15,List(4, 5, 6),China,(country :name (name :op "China")),false), Span(12,13,List(7),belonged,belong-01,false), Span(3,4,List(8),know,know-01,false), Span(1,2,List(9),we,we,false), Span(2,3,List(10),all,all,false), Span(11,12,List(11),always,always,false), Span(19,20,List(12),reasons,reason,false), Span(26,27,List(13),become,become-01,false), Span(23,24,List(14, 15),belongs,(thing :ARG0-of belong-01),false), Span(18,19,List(16),historical,history,false), Span(27,28,List(17),controversial,controversy,false), Span(22,23,List(18),originally,original,false)),Map(2 -> "Islands", 5 -> name, 12 -> reason, 15 -> belong-01, 8 -> know-01, 18 -> original, 7 -> belong-01, 17 -> controversy, 1 -> name, 4 -> country, 11 -> always, 14 -> thing, 6 -> "China", 9 -> we, 0 -> island, 16 -> history, 10 -> all, 3 -> "Diaoyu", 13 -> become-01),Map(b3 -> belong-01, w -> we, n -> name, h -> history, t -> thing, k -> know-01, b -> belong-01, b2 -> become-01, c3 -> controversy, a -> always, r -> reason, a2 -> all, i -> island, o -> original, n2 -> name, c2 -> country))),[Ljava.lang.String;@7c7a06ec,Annotation([Ljava.lang.String;@75d4a5c2,[Ljava.lang.String;@557caf28,[Ljava.lang.String;@408d971b),Annotation([Ljava.lang.String;@6c6cb480,[Ljava.lang.String;@3c46e67a,[Ledu.cmu.lti.nlp.amr.Dependency;@c730b35),Annotation([Ljava.lang.String;@206a70ef,[Ljava.lang.String;@292b08d6,[Ljava.lang.String;@22555ebf),Annotation([Ljava.lang.String;@36ebc363,[Ljava.lang.String;@45752059,[Ledu.cmu.lti.nlp.amr.Entity;@34e9fd99))
AMR:
(b / belong-01, ARG0, i / island)
(b / belong-01, ARG1, c2 / country)
(b / belong-01, condition, k / know-01)
(b / belong-01, time, a / always)
(b2 / become-01, ARG0, r / reason)
(b2 / become-01, ARG1, c2 / country)
(b2 / become-01, ARG2, c3 / controversy)
(b3 / belong-01, ARG0, t / thing)
(b3 / belong-01, ARG1, b2 / become-01)
(c2 / country, name, n2 / name)
(i / island, name, n / name)
(k / know-01, ARG0, w / we)
(k / know-01, ARG1, a2 / all)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(n2 / name, op, "China")
(r / reason, mod, h / history)
(t / thing, mod, o / original)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
Decoded in 798,655 microseconds
Sentence: My fellow citizens, ours is ours, what need is there to negotiate! Japan thus goes even further - wants to create a fact of occupation. Can we allow this? No - absolutely not!

Oracle Span 1:  absolutely => absolute
Oracle Span 2:  allow => allow-01
Oracle Span 3:  Can => possible
Oracle Span 4:  citizens => citizen
Oracle Span 5:  create => create-01
Oracle Span 6:  even => even
Oracle Span 7:  fact => fact
Oracle Span 8:  fellow => fellow
Oracle Span 9:  further => further
Oracle Span 10:  goes => go-01
Oracle Span 11:  Japan => (country :name (name :op "Japan"))
Oracle Span 12:  need => need-01
Oracle Span 13:  negotiate => negotiate-01
Oracle Span 14:  No => -
Oracle Span 15:  occupation => occupy-01
Oracle Span 16:  this => this
Oracle Span 17:  wants => want-01
Oracle Span 18:  we => we
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 36-37:  absolutely => absolute
Span 31-32:  allow => allow-01
Span 29-30:  Can => possible
Span 2-3:  citizens => citizen
Span 23-24:  create => create-01
Span 18-19:  even => even
Span 25-26:  fact => fact
Span 1-2:  fellow => fellow
Span 19-20:  further => further
Span 17-18:  goes => go-01
Span 15-16:  Japan => (country :name (name :op "Japan"))
Span 9-10:  need => need-01
Span 13-14:  negotiate => negotiate-01
Span 34-35:  No => -
Span 27-28:  occupation => occupy-01
Span 32-33:  this => this
Span 21-22:  wants => want-01
Span 30-31:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of thus in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of goes in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of further in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of wants in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of create in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of fact in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of occupation in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of Can in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of allow in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of No in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of absolutely in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 38
Langrangian relaxation converged after 45 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of thus in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of goes in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of further in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of wants in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of create in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of fact in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of occupation in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of Can in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of allow in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of this in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of No in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of absolutely in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 38
Oracle Span 36-37:  absolutely => absolute
Oracle Span 31-32:  allow => allow-01
Oracle Span 29-30:  Can => possible
Oracle Span 2-3:  citizens => citizen
Oracle Span 23-24:  create => create-01
Oracle Span 18-19:  even => even
Oracle Span 25-26:  fact => fact
Oracle Span 1-2:  fellow => fellow
Oracle Span 19-20:  further => further
Oracle Span 17-18:  goes => go-01
Oracle Span 15-16:  Japan => (country :name (name :op "Japan"))
Oracle Span 9-10:  need => need-01
Oracle Span 13-14:  negotiate => negotiate-01
Oracle Span 34-35:  No => -
Oracle Span 27-28:  occupation => occupy-01
Oracle Span 32-33:  this => this
Oracle Span 21-22:  wants => want-01
Oracle Span 30-31:  we => we

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	0	root	_	_
4	,	_	,	,	_	7	punct	_	_
5	ours	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	ours	_	PRP	PRP	_	3	dep	_	_
8	,	_	,	,	_	7	punct	_	_
9	what	_	WP	WP	_	10	nsubj	_	_
10	need	_	VBP	VBP	_	3	rcmod	_	_
11	is	_	VBZ	VBZ	_	10	ccomp	_	_
12	there	_	EX	EX	_	11	dobj	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	negotiate	_	VB	VB	_	11	xcomp	_	_
15	!	_	.	.	_	3	punct	_	_
1	Japan	_	NNP	NNP	_	3	nsubj	_	_
2	thus	_	RB	RB	_	3	advmod	_	_
3	goes	_	VBZ	VBZ	_	0	root	_	_
4	even	_	RB	RB	_	7	advmod	_	_
5	further	_	JJ	JJ	_	6	amod	_	_
6	-	_	NNS	NNS	_	7	nsubj	_	_
7	wants	_	VBZ	VBZ	_	3	ccomp	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	create	_	VB	VB	_	7	xcomp	_	_
10	a	_	DT	DT	_	11	det	_	_
11	fact	_	NN	NN	_	9	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	occupation	_	NN	NN	_	12	pobj	_	_
14	.	_	.	.	_	3	punct	_	_
1	Can	_	MD	MD	_	3	aux	_	_
2	we	_	PRP	PRP	_	3	nsubj	_	_
3	allow	_	VB	VB	_	0	root	_	_
4	this	_	DT	DT	_	3	dobj	_	_
5	?	_	.	.	_	3	punct	_	_
1	No	_	NNP	NNP	_	0	root	_	_
2	-	_	:	:	_	1	punct	_	_
3	absolutely	_	RB	RB	_	4	dep	_	_
4	not	_	RB	RB	_	1	dep	_	_
5	!	_	.	.	_	1	punct	_	_

Oracle:
(a2 / allow-01, ARG1, t / this)
(c / citizen, mod, f / fellow)
(c2 / country, name, n2 / name)
(c3 / create-01, ARG0, c2 / country)
(c3 / create-01, ARG1, f3 / fact)
(f2 / further, degree, e3 / even)
(f3 / fact, topic, o / occupy-01)
(g / go-01, ARG1, c2 / country)
(g / go-01, ARG2, f2 / further)
(n2 / name, op, "Japan")
(n3 / need-01, ARG1, n4 / negotiate-01)
(p / possible, domain, a2 / allow-01)
(w2 / want-01, ARG0, c2 / country)
(w2 / want-01, ARG1, c3 / create-01)

Input(Some(Graph((multi-sentence :snt1 (say-01 :ARG0 i :ARG1 (and :op (thing :poss we :domain (thing :poss we)) :op (cause-01 :ARG0 amr-unknown :ARG1 (need-01 :ARG1 negotiate-01))) :ARG2 (citizen :mod fellow :poss i)) :snt2 (cause-01 :ARG1 (go-01 :ARG0-of (mean-01 :ARG1 (want-01 :ARG1 (create-01 :ARG1 (fact :topic occupy-01) :ARG0 country) :ARG0 country)) :ARG2 (further :degree even) :ARG1 (country :name (name :op "Japan")))) :snt3 (possible :domain (allow-01 :ARG1 this :ARG0 we) :mode interrogative) :snt4 (have-polarity-91 :ARG2 - :degree absolute)),ArrayBuffer(Span(15,16,List(0, 1, 2),Japan,(country :name (name :op "Japan")),false), Span(34,35,List(3),No,-,false), Span(30,31,List(4),we,we,false), Span(9,10,List(5),need,need-01,false), Span(13,14,List(6),negotiate,negotiate-01,false), Span(2,3,List(7),citizens,citizen,false), Span(1,2,List(8),fellow,fellow,false), Span(17,18,List(9),goes,go-01,false), Span(21,22,List(10),wants,want-01,false), Span(23,24,List(11),create,create-01,false), Span(25,26,List(12),fact,fact,false), Span(19,20,List(13),further,further,false), Span(18,19,List(14),even,even,false), Span(29,30,List(15),Can,possible,false), Span(31,32,List(16),allow,allow-01,false), Span(32,33,List(17),this,this,false), Span(27,28,List(18),occupation,occupy-01,false), Span(36,37,List(19),absolutely,absolute,false)),Map(2 -> "Japan", 5 -> need-01, 12 -> fact, 15 -> possible, 8 -> fellow, 18 -> occupy-01, 7 -> citizen, 17 -> this, 1 -> name, 4 -> we, 11 -> create-01, 14 -> even, 6 -> negotiate-01, 9 -> go-01, 0 -> country, 16 -> allow-01, 19 -> absolute, 10 -> want-01, 3 -> -, 13 -> further),Map(t -> this, n4 -> negotiate-01, w3 -> we, p -> possible, g -> go-01, a -> absolute, c3 -> create-01, n3 -> need-01, f3 -> fact, w2 -> want-01, a2 -> allow-01, - -> -, c -> citizen, f2 -> further, f -> fellow, o -> occupy-01, e3 -> even, n2 -> name, c2 -> country))),[Ljava.lang.String;@3c41ed1d,Annotation([Ljava.lang.String;@54d9d12d,[Ljava.lang.String;@38425407,[Ljava.lang.String;@43bc63a3),Annotation([Ljava.lang.String;@702657cc,[Ljava.lang.String;@6a6cb05c,[Ledu.cmu.lti.nlp.amr.Dependency;@40a4337a),Annotation([Ljava.lang.String;@6025e1b6,[Ljava.lang.String;@22ff4249,[Ljava.lang.String;@2d1ef81a),Annotation([Ljava.lang.String;@4c402120,[Ljava.lang.String;@327514f,[Ledu.cmu.lti.nlp.amr.Entity;@5b12b668))
AMR:
(a2 / allow-01, ARG0, w3 / we)
(a2 / allow-01, ARG1, - / -)
(a2 / allow-01, ARG6, t / this)
(c / citizen, mod, f / fellow)
(c2 / country, name, n2 / name)
(c3 / create-01, ARG1, f3 / fact)
(g / go-01, ARG0, c2 / country)
(g / go-01, ARG1, f2 / further)
(g / go-01, ARG6, e3 / even)
(n2 / name, op, "Japan")
(n3 / need-01, ARG0, c2 / country)
(n3 / need-01, ARG1, a / absolute)
(n3 / need-01, ARG6, c / citizen)
(n4 / negotiate-01, ARG1, c2 / country)
(o / occupy-01, ARG1, f3 / fact)
(o / occupy-01, ARG6, p / possible)
(w2 / want-01, ARG1, c3 / create-01)
(w2 / want-01, ARG6, n4 / negotiate-01)
(w3 / we, op, p / possible)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.1.0.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.3.1
Decoded in 1,153,599 microseconds
Sentence: My fellow citizens, Japan's militarism has brought the people of Asia grave disasters.

Oracle Span 1:  Asia => (person :mod (continent :name (name :op "Asia")))
Oracle Span 2:  brought => bring-01
Oracle Span 3:  citizens => citizen
Oracle Span 4:  disasters => disaster
Oracle Span 5:  fellow => fellow
Oracle Span 6:  grave => grave
Oracle Span 7:  Japan => (country :name (name :op "Japan"))
Oracle Span 8:  militarism => militarism
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Asia"))
Spans:
Span 12-13:  Asia => (person :mod (continent :name (name :op "Asia")))
Span 8-9:  brought => bring-01
Span 2-3:  citizens => citizen
Span 14-15:  disasters => disaster
Span 1-2:  fellow => fellow
Span 13-14:  grave => grave
Span 4-5:  Japan => (country :name (name :op "Japan"))
Span 6-7:  militarism => militarism

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 12-13:  Asia => (person :mod (continent :name (name :op "Asia")))
Oracle Span 8-9:  brought => bring-01
Oracle Span 2-3:  citizens => citizen
Oracle Span 14-15:  disasters => disaster
Oracle Span 1-2:  fellow => fellow
Oracle Span 13-14:  grave => grave
Oracle Span 4-5:  Japan => (country :name (name :op "Japan"))
Oracle Span 6-7:  militarism => militarism

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	9	nsubj	_	_
4	,	_	,	,	_	3	punct	_	_
5	Japan	_	NNP	NNP	_	7	poss	_	_
6	's	_	POS	POS	_	5	possessive	_	_
7	militarism	_	NN	NN	_	3	appos	_	_
8	has	_	VBZ	VBZ	_	9	aux	_	_
9	brought	_	VBN	VBN	_	0	root	_	_
10	the	_	DT	DT	_	11	det	_	_
11	people	_	NNS	NNS	_	9	dobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	Asia	_	NNP	NNP	_	15	nn	_	_
14	grave	_	JJ	JJ	_	15	amod	_	_
15	disasters	_	NNS	NNS	_	12	pobj	_	_
16	.	_	.	.	_	9	punct	_	_

Oracle:
(b / bring-01, ARG0, m2 / militarism)
(b / bring-01, ARG1, d / disaster)
(b / bring-01, ARG2, p / person)
(c / citizen, mod, f / fellow)
(c2 / country, name, n / name)
(c3 / continent, name, n2 / name)
(d / disaster, mod, g / grave)
(m2 / militarism, poss, c2 / country)
(n / name, op, "Japan")
(n2 / name, op, "Asia")
(p / person, mod, c3 / continent)

Input(Some(Graph((say-01 :ARG0 i :ARG1 (bring-01 :ARG2 (person :mod (continent :name (name :op "Asia"))) :ARG1 (disaster :mod grave) :ARG0 (militarism :poss (country :name (name :op "Japan")))) :ARG2 (citizen :mod fellow :poss i)),ArrayBuffer(Span(4,5,List(0, 1, 2),Japan,(country :name (name :op "Japan")),false), Span(12,13,List(3, 4, 5, 6),Asia,(person :mod (continent :name (name :op "Asia"))),false), Span(8,9,List(7),brought,bring-01,false), Span(14,15,List(8),disasters,disaster,false), Span(13,14,List(9),grave,grave,false), Span(6,7,List(10),militarism,militarism,false), Span(2,3,List(11),citizens,citizen,false), Span(1,2,List(12),fellow,fellow,false)),Map(2 -> "Japan", 5 -> name, 12 -> fellow, 8 -> disaster, 7 -> bring-01, 1 -> name, 4 -> continent, 11 -> citizen, 6 -> "Asia", 9 -> grave, 0 -> country, 10 -> militarism, 3 -> person),Map(n -> name, b -> bring-01, m2 -> militarism, d -> disaster, g -> grave, p -> person, c3 -> continent, c -> citizen, f -> fellow, n2 -> name, c2 -> country))),[Ljava.lang.String;@1165b38,Annotation([Ljava.lang.String;@4c12331b,[Ljava.lang.String;@7586beff,[Ljava.lang.String;@3b69e7d1),Annotation([Ljava.lang.String;@815b41f,[Ljava.lang.String;@5542c4ed,[Ledu.cmu.lti.nlp.amr.Dependency;@1573f9fc),Annotation([Ljava.lang.String;@6150c3ec,[Ljava.lang.String;@44c03695,[Ljava.lang.String;@7e6f74c),Annotation([Ljava.lang.String;@dd05255,[Ljava.lang.String;@6a78afa0,[Ledu.cmu.lti.nlp.amr.Entity;@2f4948e4))
AMR:
(b / bring-01, ARG0, c / citizen)
(b / bring-01, ARG1, m2 / militarism)
(c / citizen, mod, f / fellow)
(c2 / country, name, n / name)
(c3 / continent, name, n2 / name)
(d / disaster, mod, c2 / country)
(d / disaster, mod, g / grave)
(g / grave, location, p / person)
(m2 / militarism, mod, c2 / country)
(n / name, op, "Japan")
(n2 / name, op, "Asia")
(p / person, mod, c3 / continent)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 416,563 microseconds
Sentence: Especially China suffered the ravages of Japan for as long as several decades.

Oracle Span 1:  China => (country :name (name :op "China"))
Oracle Span 2:  decades => (temporal-quantity :unit decade)
Oracle Span 3:  Especially => especially
Oracle Span 4:  Japan => (country :name (name :op "Japan"))
Oracle Span 5:  ravages => ravage-01
Oracle Span 6:  several => several
Oracle Span 7:  suffered => suffer-01
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 1-2:  China => (country :name (name :op "China"))
Span 12-13:  decades => (temporal-quantity :unit decade)
Span 0-1:  Especially => especially
Span 6-7:  Japan => (country :name (name :op "Japan"))
Span 4-5:  ravages => ravage-01
Span 11-12:  several => several
Span 2-3:  suffered => suffer-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 1-2:  China => (country :name (name :op "China"))
Oracle Span 12-13:  decades => (temporal-quantity :unit decade)
Oracle Span 0-1:  Especially => especially
Oracle Span 6-7:  Japan => (country :name (name :op "Japan"))
Oracle Span 4-5:  ravages => ravage-01
Oracle Span 11-12:  several => several
Oracle Span 2-3:  suffered => suffer-01

Dependencies:
1	Especially	_	RB	RB	_	2	advmod	_	_
2	China	_	NNP	NNP	_	3	nsubj	_	_
3	suffered	_	VBD	VBD	_	0	root	_	_
4	the	_	DT	DT	_	5	det	_	_
5	ravages	_	NNS	NNS	_	3	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	Japan	_	NNP	NNP	_	6	pobj	_	_
8	for	_	IN	IN	_	3	prep	_	_
9	as	_	RB	RB	_	12	quantmod	_	_
10	long	_	JJ	JJ	_	12	quantmod	_	_
11	as	_	IN	IN	_	12	quantmod	_	_
12	several	_	JJ	JJ	_	13	num	_	_
13	decades	_	NNS	NNS	_	8	pobj	_	_
14	.	_	.	.	_	3	punct	_	_

Oracle:
(c / country, mod, e / especially)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Japan")
(r / ravage-01, ARG0, c2 / country)
(r / ravage-01, ARG1, c / country)
(s / suffer-01, ARG0, c / country)
(s / suffer-01, ARG1, r / ravage-01)
(s4 / several, op, t / temporal-quantity)
(t / temporal-quantity, unit, d3 / decade)

Input(Some(Graph((suffer-01 :duration (as-long-as :op (several :op (temporal-quantity :unit decade :quant 1))) :ARG1 (ravage-01 :ARG0 (country :name (name :op "Japan")) :ARG1 country) :ARG0 (country :mod especially :name (name :op "China"))),ArrayBuffer(Span(1,2,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(6,7,List(3, 4, 5),Japan,(country :name (name :op "Japan")),false), Span(2,3,List(6),suffered,suffer-01,false), Span(11,12,List(7),several,several,false), Span(12,13,List(8, 9),decades,(temporal-quantity :unit decade),false), Span(4,5,List(10),ravages,ravage-01,false), Span(0,1,List(11),Especially,especially,false)),Map(2 -> "China", 5 -> "Japan", 8 -> temporal-quantity, 7 -> several, 1 -> name, 4 -> name, 11 -> especially, 6 -> suffer-01, 9 -> decade, 0 -> country, 10 -> ravage-01, 3 -> country),Map(e -> especially, n -> name, t -> temporal-quantity, d3 -> decade, s -> suffer-01, s4 -> several, r -> ravage-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@1f2586d6,Annotation([Ljava.lang.String;@10683d9d,[Ljava.lang.String;@3fc2959f,[Ljava.lang.String;@5aa9e4eb),Annotation([Ljava.lang.String;@6989da5e,[Ljava.lang.String;@385c9627,[Ledu.cmu.lti.nlp.amr.Dependency;@139982de),Annotation([Ljava.lang.String;@682b2fa,[Ljava.lang.String;@217ed35e,[Ljava.lang.String;@7dcf94f8),Annotation([Ljava.lang.String;@229f66ed,[Ljava.lang.String;@31190526,[Ledu.cmu.lti.nlp.amr.Entity;@662ac478))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Japan")
(r / ravage-01, ARG0, s4 / several)
(r / ravage-01, ARG1, c2 / country)
(s / suffer-01, ARG0, c / country)
(s / suffer-01, ARG1, r / ravage-01)
(s / suffer-01, ARG6, e / especially)
(t / temporal-quantity, mod, s4 / several)
(t / temporal-quantity, unit, d3 / decade)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 253,654 microseconds
Sentence: In the Northeast, Japanese Unit 731 cruelly conducted human body experiments on living people of China, Korea and other countries, the method of which were extremely brutal; the Nanjing Massacre added a layer of blood to the ancient capital which will never fade away; the big bloody battles at Hengyang and Changsha laid bare the bones of the dead over a thousand kilometers and killed off everything ...

Oracle Span 1:  ; => and
Oracle Span 2:  ; => and
Oracle Span 3:  added => add-02
Oracle Span 4:  ancient => ancient
Oracle Span 5:  and => and
Oracle Span 6:  away => away
Oracle Span 7:  bare => bare-01
Oracle Span 8:  battles => battle-01
Oracle Span 9:  big => big
Oracle Span 10:  blood => blood
Oracle Span 11:  bloody => bloody
Oracle Span 12:  body => body
Oracle Span 13:  bones => bone
Oracle Span 14:  brutal => brutal
Oracle Span 15:  capital => capital
Oracle Span 16:  Changsha => (city :name (name :op "Changsha"))
Oracle Span 17:  China => (country :name (name :op "China"))
Oracle Span 18:  countries => country
Oracle Span 19:  cruelly => cruel
Oracle Span 20:  everything => everything
Oracle Span 21:  experiments => experiment-01
Oracle Span 22:  extremely => extreme
Oracle Span 23:  fade => fade-01
Oracle Span 24:  Hengyang => (city :name (name :op "Hengyang"))
Oracle Span 25:  human => human
Oracle Span 26:  Japanese => (country :name (name :op "Japan"))
Oracle Span 27:  killed => kill-02
Oracle Span 28:  kilometers => (distance-quantity :unit kilometers)
Oracle Span 29:  Korea => (country :name (name :op "Korea"))
Oracle Span 30:  layer => layer
Oracle Span 31:  living => (person :ARG0-of live-01)
Oracle Span 32:  method => method
Oracle Span 33:  Nanjing Massacre => (incident :name (name :op "Massacre" :op "Nanjing"))
Oracle Span 34:  Northeast => (country-region :name (name :op "Northeast"))
Oracle Span 35:  other => other
Oracle Span 36:  over => over
Oracle Span 37:  Unit 731 => (military :name (name :op "731" :op "Unit"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Korea"))
NER Entity: (country :name (name :op "Northeast"))
NER Entity: (country :name (name :op "Nanjing"))
NER Entity: (country :name (name :op "Hengyang"))
NER Entity: (country :name (name :op "Changsha"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 30-31:  ; => and
Span 48-49:  ; => and
Span 34-35:  added => add-02
Span 41-42:  ancient => ancient
Span 19-20:  and => and
Span 47-48:  away => away
Span 58-59:  bare => bare-01
Span 52-53:  battles => battle-01
Span 50-51:  big => big
Span 38-39:  blood => blood
Span 51-52:  bloody => bloody
Span 10-11:  body => body
Span 60-61:  bones => bone
Span 29-30:  brutal => brutal
Span 42-43:  capital => capital
Span 56-57:  Changsha => (city :name (name :op "Changsha"))
Span 16-17:  China => (country :name (name :op "China"))
Span 21-22:  countries => country
Span 7-8:  cruelly => cruel
Span 71-72:  everything => everything
Span 11-12:  experiments => experiment-01
Span 28-29:  extremely => extreme
Span 46-47:  fade => fade-01
Span 54-55:  Hengyang => (city :name (name :op "Hengyang"))
Span 9-10:  human => human
Span 4-5:  Japanese => (country :name (name :op "Japan"))
Span 69-70:  killed => kill-02
Span 67-68:  kilometers => (distance-quantity :unit kilometers)
Span 18-19:  Korea => (country :name (name :op "Korea"))
Span 36-37:  layer => layer
Span 13-14:  living => (person :ARG0-of live-01)
Span 24-25:  method => method
Span 32-34:  Nanjing Massacre => (incident :name (name :op "Massacre" :op "Nanjing"))
Span 2-3:  Northeast => (country-region :name (name :op "Northeast"))
Span 20-21:  other => other
Span 64-65:  over => over
Span 5-7:  Unit 731 => (military :name (name :op "731" :op "Unit"))

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 30-31:  ; => and
Oracle Span 48-49:  ; => and
Oracle Span 34-35:  added => add-02
Oracle Span 41-42:  ancient => ancient
Oracle Span 19-20:  and => and
Oracle Span 47-48:  away => away
Oracle Span 58-59:  bare => bare-01
Oracle Span 52-53:  battles => battle-01
Oracle Span 50-51:  big => big
Oracle Span 38-39:  blood => blood
Oracle Span 51-52:  bloody => bloody
Oracle Span 10-11:  body => body
Oracle Span 60-61:  bones => bone
Oracle Span 29-30:  brutal => brutal
Oracle Span 42-43:  capital => capital
Oracle Span 56-57:  Changsha => (city :name (name :op "Changsha"))
Oracle Span 16-17:  China => (country :name (name :op "China"))
Oracle Span 21-22:  countries => country
Oracle Span 7-8:  cruelly => cruel
Oracle Span 71-72:  everything => everything
Oracle Span 11-12:  experiments => experiment-01
Oracle Span 28-29:  extremely => extreme
Oracle Span 46-47:  fade => fade-01
Oracle Span 54-55:  Hengyang => (city :name (name :op "Hengyang"))
Oracle Span 9-10:  human => human
Oracle Span 4-5:  Japanese => (country :name (name :op "Japan"))
Oracle Span 69-70:  killed => kill-02
Oracle Span 67-68:  kilometers => (distance-quantity :unit kilometers)
Oracle Span 18-19:  Korea => (country :name (name :op "Korea"))
Oracle Span 36-37:  layer => layer
Oracle Span 13-14:  living => (person :ARG0-of live-01)
Oracle Span 24-25:  method => method
Oracle Span 32-34:  Nanjing Massacre => (incident :name (name :op "Massacre" :op "Nanjing"))
Oracle Span 2-3:  Northeast => (country-region :name (name :op "Northeast"))
Oracle Span 20-21:  other => other
Oracle Span 64-65:  over => over
Oracle Span 5-7:  Unit 731 => (military :name (name :op "731" :op "Unit"))

Dependencies:
1	In	_	IN	IN	_	58	prep	_	_
2	the	_	DT	DT	_	8	det	_	_
3	Northeast	_	NNP	NNP	_	5	amod	_	_
4	,	_	,	,	_	5	punct	_	_
5	Japanese	_	JJ	JJ	_	8	amod	_	_
6	Unit	_	NNP	NNP	_	8	nn	_	_
7	731	_	CD	CD	_	8	num	_	_
8	cruelly	_	NN	NN	_	1	pobj	_	_
9	conducted	_	VBN	VBN	_	8	vmod	_	_
10	human	_	JJ	JJ	_	12	amod	_	_
11	body	_	NN	NN	_	12	nn	_	_
12	experiments	_	NNS	NNS	_	9	dobj	_	_
13	on	_	IN	IN	_	9	prep	_	_
14	living	_	VBG	VBG	_	15	amod	_	_
15	people	_	NNS	NNS	_	13	pobj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	China	_	NNP	NNP	_	16	pobj	_	_
18	,	_	,	,	_	17	punct	_	_
19	Korea	_	NNP	NNP	_	17	conj	_	_
20	and	_	CC	CC	_	17	cc	_	_
21	other	_	JJ	JJ	_	22	amod	_	_
22	countries	_	NNS	NNS	_	17	conj	_	_
23	,	_	,	,	_	58	punct	_	_
24	the	_	DT	DT	_	25	det	_	_
25	method	_	NN	NN	_	58	nsubj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	which	_	WDT	WDT	_	30	nsubj	_	_
28	were	_	VBD	VBD	_	30	cop	_	_
29	extremely	_	RB	RB	_	30	advmod	_	_
30	brutal	_	JJ	JJ	_	34	dep	_	_
31	;	_	:	:	_	34	punct	_	_
32	the	_	DT	DT	_	34	det	_	_
33	Nanjing	_	NNP	NNP	_	34	nn	_	_
34	Massacre	_	NNP	NNP	_	26	pobj	_	_
35	added	_	VBN	VBN	_	34	vmod	_	_
36	a	_	DT	DT	_	37	det	_	_
37	layer	_	NN	NN	_	35	dobj	_	_
38	of	_	IN	IN	_	37	prep	_	_
39	blood	_	NN	NN	_	38	pobj	_	_
40	to	_	TO	TO	_	35	prep	_	_
41	the	_	DT	DT	_	43	det	_	_
42	ancient	_	JJ	JJ	_	43	amod	_	_
43	capital	_	NN	NN	_	40	pobj	_	_
44	which	_	WDT	WDT	_	47	nsubj	_	_
45	will	_	MD	MD	_	47	aux	_	_
46	never	_	RB	RB	_	47	neg	_	_
47	fade	_	VB	VB	_	43	rcmod	_	_
48	away	_	RP	RP	_	47	prt	_	_
49	;	_	:	:	_	34	punct	_	_
50	the	_	DT	DT	_	53	det	_	_
51	big	_	JJ	JJ	_	53	amod	_	_
52	bloody	_	JJ	JJ	_	53	amod	_	_
53	battles	_	NNS	NNS	_	34	dep	_	_
54	at	_	IN	IN	_	53	prep	_	_
55	Hengyang	_	NNP	NNP	_	54	pobj	_	_
56	and	_	CC	CC	_	55	cc	_	_
57	Changsha	_	NNP	NNP	_	55	conj	_	_
58	laid	_	VBD	VBD	_	0	root	_	_
59	bare	_	JJ	JJ	_	58	acomp	_	_
60	the	_	DT	DT	_	61	det	_	_
61	bones	_	NNS	NNS	_	59	dep	_	_
62	of	_	IN	IN	_	61	prep	_	_
63	the	_	DT	DT	_	64	det	_	_
64	dead	_	NN	NN	_	62	pobj	_	_
65	over	_	IN	IN	_	64	prep	_	_
66	a	_	DT	DT	_	68	det	_	_
67	thousand	_	CD	CD	_	68	num	_	_
68	kilometers	_	NNS	NNS	_	65	pobj	_	_
69	and	_	CC	CC	_	58	cc	_	_
70	killed	_	VBD	VBD	_	58	conj	_	_
71	off	_	RP	RP	_	70	prt	_	_
72	everything	_	NN	NN	_	70	dobj	_	_
73	...	_	:	:	_	58	punct	_	_

Oracle:
(a2 / and, op, p4 / person)
(a3 / add-02, ARG0, i / incident)
(a3 / add-02, ARG1, l2 / layer)
(a3 / add-02, ARG2, c8 / capital)
(a6 / and, op, b4 / bare-01)
(a6 / and, op, k / kill-02)
(a7 / and, op, c10 / city)
(a7 / and, op, c9 / city)
(b / brutal, degree, e2 / extreme)
(b2 / body, mod, h / human)
(b3 / blood, consist, l2 / layer)
(b4 / bare-01, ARG0, b5 / battle-01)
(b4 / bare-01, ARG1, b8 / bone)
(b4 / bare-01, quant, o2 / over)
(b5 / battle-01, location, a7 / and)
(b5 / battle-01, mod, b6 / big)
(b5 / battle-01, mod, b7 / bloody)
(c10 / city, name, n8 / name)
(c3 / country, name, n2 / name)
(c4 / country-region, name, n3 / name)
(c5 / country, name, n4 / name)
(c6 / country, name, n5 / name)
(c7 / country, mod, o / other)
(c8 / capital, mod, a4 / ancient)
(c9 / city, name, n7 / name)
(d2 / distance-quantity, unit, k2 / kilometers)
(e / experiment-01, ARG0, m / military)
(e / experiment-01, ARG1, a2 / and)
(e / experiment-01, ARG2, m3 / method)
(e / experiment-01, location, c4 / country-region)
(e / experiment-01, manner, c2 / cruel)
(e / experiment-01, mod, b2 / body)
(f / fade-01, ARG1, l2 / layer)
(f / fade-01, direction, a5 / away)
(i / incident, name, n6 / name)
(k / kill-02, ARG0, b5 / battle-01)
(k / kill-02, ARG1, e4 / everything)
(l4 / live-01, ARG0, p4 / person)
(m / military, mod, c3 / country)
(m / military, name, n / name)
(m3 / method, mod, b / brutal)
(n / name, op, "731")
(n / name, op, "Unit")
(n2 / name, op, "Japan")
(n3 / name, op, "Northeast")
(n4 / name, op, "China")
(n5 / name, op, "Korea")
(n6 / name, op, "Massacre")
(n6 / name, op, "Nanjing")
(n7 / name, op, "Hengyang")
(n8 / name, op, "Changsha")
(o2 / over, op, d2 / distance-quantity)
(p4 / person, mod, c7 / country)

Input(Some(Graph((multi-sentence :snt1 (experiment-01 :location (country-region :name (name :op "Northeast")) :manner cruel :mod (body :mod human) :ARG2 (method :mod (brutal :degree extreme)) :ARG1 (and :op (person :mod (country :mod other) :ARG0-of live-01) :op (person :ARG0-of live-01 :mod (country :name (name :op "Korea"))) :op (person :ARG0-of (live-01 :mod (country :name (name :op "China"))))) :ARG0 (military :mod (country :name (name :op "Japan")) :name (name :op "731" :op "Unit"))) :snt2 (add-02 :ARG2 (capital :mod ancient) :ARG1 (layer :ARG1-of (fade-01 :direction away :time ever :polarity -) :consist-of blood) :ARG0 (incident :name (name :op "Massacre" :op "Nanjing"))) :snt3 (and :op (kill-02 :ARG1 everything :ARG0 battle-01) :op (bare-01 :quant (over :op (distance-quantity :unit kilometers :quant 1000)) :ARG1 (bone :part-of (person :ARG1-of die-01)) :ARG0 (battle-01 :location (and :op (city :name (name :op "Changsha")) :op (city :name (name :op "Hengyang"))) :mod bloody :mod big)))),ArrayBuffer(Span(16,17,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(18,19,List(3, 4, 5),Korea,(country :name (name :op "Korea")),false), Span(2,3,List(6, 7, 8),Northeast,(country-region :name (name :op "Northeast")),false), Span(32,34,List(9, 10, 11, 12),Nanjing Massacre,(incident :name (name :op "Massacre" :op "Nanjing")),false), Span(54,55,List(13, 14, 15),Hengyang,(city :name (name :op "Hengyang")),false), Span(56,57,List(16, 17, 18),Changsha,(city :name (name :op "Changsha")),false), Span(5,7,List(19, 20, 21, 22),Unit 731,(military :name (name :op "731" :op "Unit")),false), Span(4,5,List(23, 24, 25),Japanese,(country :name (name :op "Japan")),false), Span(11,12,List(26),experiments,experiment-01,false), Span(10,11,List(27),body,body,false), Span(9,10,List(28),human,human,false), Span(24,25,List(29),method,method,false), Span(29,30,List(30),brutal,brutal,false), Span(19,20,List(31),and,and,false), Span(13,14,List(32, 33),living,(person :ARG0-of live-01),false), Span(21,22,List(34),countries,country,false), Span(20,21,List(35),other,other,false), Span(34,35,List(36),added,add-02,false), Span(42,43,List(37),capital,capital,false), Span(41,42,List(38),ancient,ancient,false), Span(36,37,List(39),layer,layer,false), Span(46,47,List(40),fade,fade-01,false), Span(47,48,List(41),away,away,false), Span(38,39,List(42),blood,blood,false), Span(30,31,List(43),;,and,false), Span(69,70,List(44),killed,kill-02,false), Span(71,72,List(45),everything,everything,false), Span(58,59,List(46),bare,bare-01,false), Span(64,65,List(47),over,over,false), Span(67,68,List(48, 49),kilometers,(distance-quantity :unit kilometers),false), Span(60,61,List(50),bones,bone,false), Span(52,53,List(51),battles,battle-01,false), Span(48,49,List(52),;,and,false), Span(51,52,List(53),bloody,bloody,false), Span(50,51,List(54),big,big,false), Span(7,8,List(55),cruelly,cruel,false), Span(28,29,List(56),extremely,extreme,false)),Map(45 -> everything, 39 -> layer, 30 -> brutal, 51 -> battle-01, 2 -> "China", 5 -> "Korea", 48 -> distance-quantity, 33 -> live-01, 27 -> body, 54 -> big, 12 -> "Nanjing", 8 -> "Northeast", 15 -> "Hengyang", 42 -> blood, 36 -> add-02, 21 -> "731", 18 -> "Changsha", 24 -> name, 53 -> bloody, 41 -> away, 35 -> other, 56 -> extreme, 7 -> name, 17 -> name, 1 -> name, 50 -> bone, 44 -> kill-02, 23 -> country, 38 -> ancient, 47 -> over, 26 -> experiment-01, 4 -> name, 11 -> "Massacre", 32 -> person, 14 -> name, 29 -> method, 20 -> name, 46 -> bare-01, 52 -> and, 34 -> country, 28 -> human, 6 -> country-region, 55 -> cruel, 40 -> fade-01, 49 -> kilometers, 43 -> and, 9 -> incident, 0 -> country, 22 -> "Unit", 16 -> city, 37 -> capital, 19 -> military, 3 -> country, 10 -> name, 31 -> and, 25 -> "Japan", 13 -> city),Map(a7 -> and, e -> experiment-01, m3 -> method, n -> name, b3 -> blood, k2 -> kilometers, c8 -> capital, h -> human, b -> brutal, k -> kill-02, b2 -> body, c7 -> country, n7 -> name, e2 -> extreme, b5 -> battle-01, c10 -> city, a3 -> add-02, c4 -> country-region, n4 -> name, b8 -> bone, a6 -> and, m -> military, c3 -> country, n3 -> name, p4 -> person, e4 -> everything, d2 -> distance-quantity, o2 -> over, n6 -> name, a5 -> away, c6 -> country, c9 -> city, b4 -> bare-01, l2 -> layer, b7 -> bloody, i -> incident, a2 -> and, n8 -> name, f -> fade-01, o -> other, b6 -> big, c2 -> cruel, n2 -> name, a4 -> ancient, l4 -> live-01, n5 -> name, c5 -> country))),[Ljava.lang.String;@6743e411,Annotation([Ljava.lang.String;@3eb25e1a,[Ljava.lang.String;@477b4cdf,[Ljava.lang.String;@77c2494c),Annotation([Ljava.lang.String;@f5958c9,[Ljava.lang.String;@233795b6,[Ledu.cmu.lti.nlp.amr.Dependency;@3eb738bb),Annotation([Ljava.lang.String;@5bda8e08,[Ljava.lang.String;@1e800aaa,[Ljava.lang.String;@185a6e9),Annotation([Ljava.lang.String;@6f03482,[Ljava.lang.String;@9d5509a,[Ledu.cmu.lti.nlp.amr.Entity;@179ece50))
AMR:
(a2 / and, op, a7 / and)
(a2 / and, op, c5 / country)
(a2 / and, op, c6 / country)
(a2 / and, op, c7 / country)
(a3 / add-02, ARG0, i / incident)
(a3 / add-02, ARG1, l2 / layer)
(a3 / add-02, ARG6, a6 / and)
(a6 / and, op, b / brutal)
(a7 / and, op, b / brutal)
(a7 / and, op, b5 / battle-01)
(b / brutal, mod, e2 / extreme)
(b2 / body, mod, h / human)
(b3 / blood, mod, c8 / capital)
(b4 / bare-01, ARG1, m3 / method)
(b4 / bare-01, ARG6, b8 / bone)
(b5 / battle-01, ARG0, c10 / city)
(b5 / battle-01, ARG1, c9 / city)
(b5 / battle-01, mod, b6 / big)
(b5 / battle-01, mod, b7 / bloody)
(c10 / city, name, n8 / name)
(c2 / cruel, mod, c3 / country)
(c3 / country, name, n2 / name)
(c4 / country-region, name, n3 / name)
(c5 / country, name, n4 / name)
(c6 / country, name, n5 / name)
(c7 / country, mod, o / other)
(c8 / capital, mod, a4 / ancient)
(c9 / city, name, n7 / name)
(d2 / distance-quantity, op, f / fade-01)
(d2 / distance-quantity, unit, k2 / kilometers)
(e / experiment-01, ARG1, b2 / body)
(e / experiment-01, ARG2, p4 / person)
(f / fade-01, ARG0, c8 / capital)
(f / fade-01, ARG1, l2 / layer)
(f / fade-01, mod, a5 / away)
(i / incident, name, n6 / name)
(k / kill-02, ARG0, m3 / method)
(k / kill-02, ARG1, e4 / everything)
(l2 / layer, poss, m3 / method)
(l4 / live-01, ARG0, p4 / person)
(l4 / live-01, ARG1, a2 / and)
(m / military, mod, c3 / country)
(m / military, mod, c4 / country-region)
(m / military, name, n / name)
(m / military, poss, c6 / country)
(n / name, op, "731")
(n / name, op, "Unit")
(n2 / name, op, "Japan")
(n3 / name, op, "Northeast")
(n4 / name, op, "China")
(n5 / name, op, "Korea")
(n6 / name, op, "Massacre")
(n6 / name, op, "Nanjing")
(n7 / name, op, "Hengyang")
(n8 / name, op, "Changsha")
(o2 / over, op, d2 / distance-quantity)

WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.5
WARNING: makeIds can't find span Id: 0.0.5.0
WARNING: makeIds can't find span Id: 0.0.5.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.2.1
WARNING: makeIds can't find span Id: 0.2.0.0.2.1.0
WARNING: makeIds can't find span Id: 0.2.0.0.2.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.1
WARNING: makeIds can't find span Id: 0.0.1.2.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.2
WARNING: makeIds can't find span Id: 0.2.0.2.0
WARNING: makeIds can't find span Id: 0.2.0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.2
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.4
WARNING: makeIds can't find span Id: 0.0.2.0.0
Decoded in 7,122,185 microseconds
Sentence: My fellow citizens, of the heinous crimes committed by Japan in China, there are too many instances to cite, difficult to record without exhausting all bamboo strips.

Oracle Span 1:  all => all
Oracle Span 2:  bamboo => bamboo
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  cite => cite-01
Oracle Span 5:  citizens => citizen
Oracle Span 6:  committed => commit-02
Oracle Span 7:  crimes => crime
Oracle Span 8:  difficult => difficult
Oracle Span 9:  exhausting => exhaust-01
Oracle Span 10:  fellow => fellow
Oracle Span 11:  heinous => heinous
Oracle Span 12:  instances => instance
Oracle Span 13:  Japan => (country :name (name :op "Japan"))
Oracle Span 14:  many => many
Oracle Span 15:  record => record-01
Oracle Span 16:  strips => strip
Oracle Span 17:  too => too
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 27-28:  all => all
Span 28-29:  bamboo => bamboo
Span 12-13:  China => (country :name (name :op "China"))
Span 20-21:  cite => cite-01
Span 2-3:  citizens => citizen
Span 8-9:  committed => commit-02
Span 7-8:  crimes => crime
Span 22-23:  difficult => difficult
Span 26-27:  exhausting => exhaust-01
Span 1-2:  fellow => fellow
Span 6-7:  heinous => heinous
Span 18-19:  instances => instance
Span 10-11:  Japan => (country :name (name :op "Japan"))
Span 17-18:  many => many
Span 24-25:  record => record-01
Span 29-30:  strips => strip
Span 16-17:  too => too

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Oracle Span 27-28:  all => all
Oracle Span 28-29:  bamboo => bamboo
Oracle Span 12-13:  China => (country :name (name :op "China"))
Oracle Span 20-21:  cite => cite-01
Oracle Span 2-3:  citizens => citizen
Oracle Span 8-9:  committed => commit-02
Oracle Span 7-8:  crimes => crime
Oracle Span 22-23:  difficult => difficult
Oracle Span 26-27:  exhausting => exhaust-01
Oracle Span 1-2:  fellow => fellow
Oracle Span 6-7:  heinous => heinous
Oracle Span 18-19:  instances => instance
Oracle Span 10-11:  Japan => (country :name (name :op "Japan"))
Oracle Span 17-18:  many => many
Oracle Span 24-25:  record => record-01
Oracle Span 29-30:  strips => strip
Oracle Span 16-17:  too => too

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	19	nsubj	_	_
4	,	_	,	,	_	3	punct	_	_
5	of	_	IN	IN	_	3	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	heinous	_	JJ	JJ	_	8	amod	_	_
8	crimes	_	NNS	NNS	_	5	pobj	_	_
9	committed	_	VBN	VBN	_	8	vmod	_	_
10	by	_	IN	IN	_	9	prep	_	_
11	Japan	_	NNP	NNP	_	10	pobj	_	_
12	in	_	IN	IN	_	9	prep	_	_
13	China	_	NNP	NNP	_	12	pobj	_	_
14	,	_	,	,	_	3	punct	_	_
15	there	_	RB	RB	_	19	advmod	_	_
16	are	_	VBP	VBP	_	19	cop	_	_
17	too	_	RB	RB	_	19	advmod	_	_
18	many	_	JJ	JJ	_	19	amod	_	_
19	instances	_	NNS	NNS	_	0	root	_	_
20	to	_	TO	TO	_	21	aux	_	_
21	cite	_	VB	VB	_	19	vmod	_	_
22	,	_	,	,	_	21	punct	_	_
23	difficult	_	JJ	JJ	_	21	acomp	_	_
24	to	_	TO	TO	_	25	aux	_	_
25	record	_	VB	VB	_	23	xcomp	_	_
26	without	_	IN	IN	_	25	prep	_	_
27	exhausting	_	VBG	VBG	_	26	pcomp	_	_
28	all	_	DT	DT	_	30	det	_	_
29	bamboo	_	NN	NN	_	30	nn	_	_
30	strips	_	NNS	NNS	_	27	dobj	_	_
31	.	_	.	.	_	19	punct	_	_

Oracle:
(b / bamboo, consist, s2 / strip)
(c / citizen, mod, f / fellow)
(c2 / crime, mod, h / heinous)
(c3 / commit-02, ARG0, c4 / country)
(c3 / commit-02, ARG1, c2 / crime)
(c3 / commit-02, location, c5 / country)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(c6 / cite-01, ARG1, i / instance)
(e / exhaust-01, ARG1, s2 / strip)
(i / instance, quant, m2 / many)
(i / instance, topic, c2 / crime)
(m2 / many, degree, t / too)
(n / name, op, "Japan")
(n2 / name, op, "China")
(r / record-01, ARG1, i / instance)
(r / record-01, manner, d / difficult)
(r / record-01, manner, e / exhaust-01)
(s2 / strip, quant, a / all)

Input(Some(Graph((say-01 :ARG0 i :ARG1 (instance :ARG1-of cite-01 :ARG1-of (record-01 :manner (exhaust-01 :ARG1 (strip :quant all :consist-of bamboo) :polarity -) :manner difficult) :topic (crime :ARG1-of (commit-02 :location (country :name (name :op "China")) :ARG0 (country :name (name :op "Japan"))) :mod heinous) :quant (many :degree too)) :ARG2 (citizen :mod fellow :poss i)),ArrayBuffer(Span(10,11,List(0, 1, 2),Japan,(country :name (name :op "Japan")),false), Span(12,13,List(3, 4, 5),China,(country :name (name :op "China")),false), Span(18,19,List(6),instances,instance,false), Span(20,21,List(7),cite,cite-01,false), Span(24,25,List(8),record,record-01,false), Span(26,27,List(9),exhausting,exhaust-01,false), Span(29,30,List(10),strips,strip,false), Span(27,28,List(11),all,all,false), Span(28,29,List(12),bamboo,bamboo,false), Span(22,23,List(13),difficult,difficult,false), Span(7,8,List(14),crimes,crime,false), Span(8,9,List(15),committed,commit-02,false), Span(6,7,List(16),heinous,heinous,false), Span(17,18,List(17),many,many,false), Span(16,17,List(18),too,too,false), Span(2,3,List(19),citizens,citizen,false), Span(1,2,List(20),fellow,fellow,false)),Map(2 -> "Japan", 5 -> "China", 12 -> bamboo, 15 -> commit-02, 8 -> record-01, 18 -> too, 7 -> cite-01, 17 -> many, 1 -> name, 4 -> name, 11 -> all, 14 -> crime, 20 -> fellow, 6 -> instance, 9 -> exhaust-01, 0 -> country, 16 -> heinous, 19 -> citizen, 10 -> strip, 3 -> country, 13 -> difficult),Map(e -> exhaust-01, n -> name, h -> heinous, s2 -> strip, t -> too, b -> bamboo, m2 -> many, c4 -> country, d -> difficult, c3 -> commit-02, a -> all, c6 -> cite-01, r -> record-01, i -> instance, c -> citizen, f -> fellow, c2 -> crime, n2 -> name, c5 -> country))),[Ljava.lang.String;@3b0090a4,Annotation([Ljava.lang.String;@3cd3e762,[Ljava.lang.String;@1fa121e2,[Ljava.lang.String;@7eac9008),Annotation([Ljava.lang.String;@4116aac9,[Ljava.lang.String;@62ddbd7e,[Ledu.cmu.lti.nlp.amr.Dependency;@74e52ef6),Annotation([Ljava.lang.String;@6ed3ccb2,[Ljava.lang.String;@1a677343,[Ljava.lang.String;@15de0b3c),Annotation([Ljava.lang.String;@489115ef,[Ljava.lang.String;@3857f613,[Ledu.cmu.lti.nlp.amr.Entity;@198b6731))
AMR:
(c / citizen, location, c2 / crime)
(c / citizen, mod, f / fellow)
(c2 / crime, mod, h / heinous)
(c3 / commit-02, ARG0, c4 / country)
(c3 / commit-02, ARG1, c2 / crime)
(c3 / commit-02, ARG2, c5 / country)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(c6 / cite-01, ARG0, i / instance)
(c6 / cite-01, ARG1, d / difficult)
(c6 / cite-01, ARG6, t / too)
(d / difficult, domain, r / record-01)
(e / exhaust-01, ARG1, s2 / strip)
(i / instance, domain, c / citizen)
(i / instance, quant, m2 / many)
(n / name, op, "Japan")
(n2 / name, op, "China")
(r / record-01, ARG1, e / exhaust-01)
(s2 / strip, mod, a / all)
(s2 / strip, mod, b / bamboo)

WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.2.1.1
WARNING: makeIds can't find span Id: 0.1.2.1.1.1
WARNING: makeIds can't find span Id: 0.1.2.1.1.0
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 642,092 microseconds
Sentence: It's just as if those ten million deceased souls who lost their lives are wandering over the Pacific Ocean, finding it difficult to rest in peace.

Oracle Span 1:  deceased => decease-01
Oracle Span 2:  difficult => difficult
Oracle Span 3:  finding => find-02
Oracle Span 4:  just => just
Oracle Span 5:  lives => life
Oracle Span 6:  lost => lose-02
Oracle Span 7:  over => over
Oracle Span 8:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))
Oracle Span 9:  peace => peace
Oracle Span 10:  rest => rest-01
Oracle Span 11:  souls => soul
Oracle Span 12:  wandering => wander-01
NER Entity: (country :name (name :op "Pacific" :op "Ocean"))
Spans:
Span 8-9:  deceased => decease-01
Span 23-24:  difficult => difficult
Span 21-22:  finding => find-02
Span 2-3:  just => just
Span 13-14:  lives => life
Span 11-12:  lost => lose-02
Span 16-17:  over => over
Span 18-20:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))
Span 27-28:  peace => peace
Span 25-26:  rest => rest-01
Span 9-10:  souls => soul
Span 15-16:  wandering => wander-01

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Oracle Span 8-9:  deceased => decease-01
Oracle Span 23-24:  difficult => difficult
Oracle Span 21-22:  finding => find-02
Oracle Span 2-3:  just => just
Oracle Span 13-14:  lives => life
Oracle Span 11-12:  lost => lose-02
Oracle Span 16-17:  over => over
Oracle Span 18-20:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))
Oracle Span 27-28:  peace => peace
Oracle Span 25-26:  rest => rest-01
Oracle Span 9-10:  souls => soul
Oracle Span 15-16:  wandering => wander-01

Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	's	_	VBZ	VBZ	_	0	root	_	_
3	just	_	RB	RB	_	16	advmod	_	_
4	as	_	RB	RB	_	16	advmod	_	_
5	if	_	IN	IN	_	16	mark	_	_
6	those	_	DT	DT	_	10	det	_	_
7	ten	_	CD	CD	_	8	number	_	_
8	million	_	CD	CD	_	10	num	_	_
9	deceased	_	JJ	JJ	_	10	amod	_	_
10	souls	_	NNS	NNS	_	16	nsubj	_	_
11	who	_	WP	WP	_	12	nsubj	_	_
12	lost	_	VBD	VBD	_	10	rcmod	_	_
13	their	_	PRP$	PRP$	_	14	poss	_	_
14	lives	_	NNS	NNS	_	12	dobj	_	_
15	are	_	VBP	VBP	_	16	aux	_	_
16	wandering	_	VBG	VBG	_	2	advcl	_	_
17	over	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	Pacific	_	NNP	NNP	_	20	nn	_	_
20	Ocean	_	NNP	NNP	_	17	pobj	_	_
21	,	_	,	,	_	16	punct	_	_
22	finding	_	VBG	VBG	_	16	vmod	_	_
23	it	_	PRP	PRP	_	24	nsubj	_	_
24	difficult	_	JJ	JJ	_	22	xcomp	_	_
25	to	_	TO	TO	_	26	aux	_	_
26	rest	_	VB	VB	_	24	xcomp	_	_
27	in	_	IN	IN	_	26	prep	_	_
28	peace	_	NN	NN	_	27	pobj	_	_
29	.	_	.	.	_	2	punct	_	_

Oracle:
(d / difficult, domain, r / rest-01)
(d2 / decease-01, ARG1, s / soul)
(f / find-02, ARG0, s / soul)
(f / find-02, ARG1, d / difficult)
(l / life, poss, s / soul)
(l3 / lose-02, ARG0, s / soul)
(l3 / lose-02, ARG1, l / life)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)
(o2 / over, op, o / ocean)
(r / rest-01, ARG1, s / soul)
(r / rest-01, manner, p / peace)
(w / wander-01, ARG0, s / soul)
(w / wander-01, ARG1, o2 / over)

Input(Some(Graph((resemble-01 :ARG2 (and :op (wander-01 :ARG1 (over :op (ocean :name (name :op "Ocean" :op "Pacific"))) :ARG0 (soul :ARG0-of (lose-02 :ARG1 (life :poss soul)) :mod that :ARG1-of decease-01 :quant 10000000)) :op (find-02 :ARG1 (difficult :domain (rest-01 :manner peace :ARG1 soul)) :ARG0 soul)) :mod just),ArrayBuffer(Span(18,20,List(0, 1, 2, 3),Pacific Ocean,(ocean :name (name :op "Ocean" :op "Pacific")),false), Span(15,16,List(4),wandering,wander-01,false), Span(16,17,List(5),over,over,false), Span(9,10,List(6),souls,soul,false), Span(11,12,List(7),lost,lose-02,false), Span(13,14,List(8),lives,life,false), Span(8,9,List(9),deceased,decease-01,false), Span(21,22,List(10),finding,find-02,false), Span(23,24,List(11),difficult,difficult,false), Span(25,26,List(12),rest,rest-01,false), Span(27,28,List(13),peace,peace,false), Span(2,3,List(14),just,just,false)),Map(2 -> "Ocean", 5 -> over, 12 -> rest-01, 8 -> life, 7 -> lose-02, 1 -> name, 4 -> wander-01, 11 -> difficult, 14 -> just, 6 -> soul, 9 -> decease-01, 0 -> ocean, 10 -> find-02, 3 -> "Pacific", 13 -> peace),Map(w -> wander-01, n -> name, j -> just, l3 -> lose-02, s -> soul, d -> difficult, p -> peace, d2 -> decease-01, o2 -> over, r -> rest-01, l -> life, f -> find-02, o -> ocean))),[Ljava.lang.String;@7c6908d7,Annotation([Ljava.lang.String;@3c9754d8,[Ljava.lang.String;@3bf7ca37,[Ljava.lang.String;@79079097),Annotation([Ljava.lang.String;@4d1c00d0,[Ljava.lang.String;@4b2bac3f,[Ledu.cmu.lti.nlp.amr.Dependency;@4e08711f),Annotation([Ljava.lang.String;@bcec361,[Ljava.lang.String;@26794848,[Ljava.lang.String;@302552ec),Annotation([Ljava.lang.String;@3d285d7e,[Ljava.lang.String;@40005471,[Ledu.cmu.lti.nlp.amr.Entity;@2cd76f31))
AMR:
(d / difficult, domain, r / rest-01)
(d2 / decease-01, ARG1, s / soul)
(f / find-02, ARG1, d / difficult)
(l3 / lose-02, ARG0, s / soul)
(l3 / lose-02, ARG1, l / life)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)
(o2 / over, op, o / ocean)
(r / rest-01, ARG0, j / just)
(r / rest-01, ARG1, p / peace)
(w / wander-01, ARG0, s / soul)
(w / wander-01, ARG1, f / find-02)
(w / wander-01, ARG6, o2 / over)

WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.0.3.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 687,179 microseconds
Sentence: All the people who experienced that era must still remember it vividly; even our younger generations also will cry with tears streaming down our cheeks, and our blood boils with indignation, whenever we turn to this page of history and read!

Oracle Span 1:  ; => and
Oracle Span 2:  All => all
Oracle Span 3:  also => also
Oracle Span 4:  and => and
Oracle Span 5:  blood => blood
Oracle Span 6:  boils => boil-01
Oracle Span 7:  cheeks => cheek
Oracle Span 8:  cry => cry-02
Oracle Span 9:  down => down
Oracle Span 10:  era => era
Oracle Span 11:  even => even
Oracle Span 12:  experienced => (person :ARG0-of experience-01)
Oracle Span 13:  generations => generation
Oracle Span 14:  history => history
Oracle Span 15:  indignation => indignation
Oracle Span 16:  page => page
Oracle Span 17:  read => read-01
Oracle Span 18:  remember => remember-01
Oracle Span 19:  still => still
Oracle Span 20:  streaming => stream-02
Oracle Span 21:  tears => tear
Oracle Span 22:  that => that
Oracle Span 23:  this => this
Oracle Span 24:  turn => turn-01
Oracle Span 25:  vividly => vivid
Oracle Span 26:  we => we
Oracle Span 27:  younger => young
Spans:
Span 12-13:  ; => and
Span 0-1:  All => all
Span 17-18:  also => also
Span 27-28:  and => and
Span 29-30:  blood => blood
Span 30-31:  boils => boil-01
Span 25-26:  cheeks => cheek
Span 19-20:  cry => cry-02
Span 23-24:  down => down
Span 6-7:  era => era
Span 13-14:  even => even
Span 4-5:  experienced => (person :ARG0-of experience-01)
Span 16-17:  generations => generation
Span 41-42:  history => history
Span 32-33:  indignation => indignation
Span 39-40:  page => page
Span 43-44:  read => read-01
Span 9-10:  remember => remember-01
Span 8-9:  still => still
Span 22-23:  streaming => stream-02
Span 21-22:  tears => tear
Span 5-6:  that => that
Span 38-39:  this => this
Span 36-37:  turn => turn-01
Span 11-12:  vividly => vivid
Span 35-36:  we => we
Span 15-16:  younger => young

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 12-13:  ; => and
Oracle Span 0-1:  All => all
Oracle Span 17-18:  also => also
Oracle Span 27-28:  and => and
Oracle Span 29-30:  blood => blood
Oracle Span 30-31:  boils => boil-01
Oracle Span 25-26:  cheeks => cheek
Oracle Span 19-20:  cry => cry-02
Oracle Span 23-24:  down => down
Oracle Span 6-7:  era => era
Oracle Span 13-14:  even => even
Oracle Span 4-5:  experienced => (person :ARG0-of experience-01)
Oracle Span 16-17:  generations => generation
Oracle Span 41-42:  history => history
Oracle Span 32-33:  indignation => indignation
Oracle Span 39-40:  page => page
Oracle Span 43-44:  read => read-01
Oracle Span 9-10:  remember => remember-01
Oracle Span 8-9:  still => still
Oracle Span 22-23:  streaming => stream-02
Oracle Span 21-22:  tears => tear
Oracle Span 5-6:  that => that
Oracle Span 38-39:  this => this
Oracle Span 36-37:  turn => turn-01
Oracle Span 11-12:  vividly => vivid
Oracle Span 35-36:  we => we
Oracle Span 15-16:  younger => young

Dependencies:
1	All	_	PDT	PDT	_	3	predet	_	_
2	the	_	DT	DT	_	3	det	_	_
3	people	_	NNS	NNS	_	0	root	_	_
4	who	_	WP	WP	_	5	nsubj	_	_
5	experienced	_	VBD	VBD	_	3	rcmod	_	_
6	that	_	IN	IN	_	10	mark	_	_
7	era	_	NN	NN	_	10	nsubj	_	_
8	must	_	MD	MD	_	10	aux	_	_
9	still	_	RB	RB	_	10	advmod	_	_
10	remember	_	VB	VB	_	5	ccomp	_	_
11	it	_	PRP	PRP	_	10	dobj	_	_
12	vividly	_	RB	RB	_	10	advmod	_	_
13	;	_	:	:	_	3	punct	_	_
14	even	_	RB	RB	_	20	dep	_	_
15	our	_	PRP$	PRP$	_	17	poss	_	_
16	younger	_	JJR	JJR	_	17	amod	_	_
17	generations	_	NNS	NNS	_	20	nsubj	_	_
18	also	_	RB	RB	_	20	advmod	_	_
19	will	_	MD	MD	_	20	aux	_	_
20	cry	_	VB	VB	_	3	dep	_	_
21	with	_	IN	IN	_	20	prep	_	_
22	tears	_	NNS	NNS	_	21	pobj	_	_
23	streaming	_	VBG	VBG	_	22	vmod	_	_
24	down	_	RP	RP	_	23	prt	_	_
25	our	_	PRP$	PRP$	_	26	poss	_	_
26	cheeks	_	NNS	NNS	_	23	dobj	_	_
27	,	_	,	,	_	20	punct	_	_
28	and	_	CC	CC	_	20	cc	_	_
29	our	_	PRP$	PRP$	_	30	poss	_	_
30	blood	_	NN	NN	_	31	nsubj	_	_
31	boils	_	VBZ	VBZ	_	20	conj	_	_
32	with	_	IN	IN	_	31	prep	_	_
33	indignation	_	NN	NN	_	32	pobj	_	_
34	,	_	,	,	_	33	punct	_	_
35	whenever	_	WRB	WRB	_	37	advmod	_	_
36	we	_	PRP	PRP	_	37	nsubj	_	_
37	turn	_	VBP	VBP	_	33	rcmod	_	_
38	to	_	TO	TO	_	37	prep	_	_
39	this	_	DT	DT	_	40	det	_	_
40	page	_	NN	NN	_	38	pobj	_	_
41	of	_	IN	IN	_	40	prep	_	_
42	history	_	NN	NN	_	41	pobj	_	_
43	and	_	CC	CC	_	37	cc	_	_
44	read	_	VBD	VBD	_	37	conj	_	_
45	!	_	.	.	_	3	punct	_	_

Oracle:
(a2 / and, op, b / boil-01)
(a2 / and, op, c / cry-02)
(a2 / and, time, a4 / and)
(a4 / and, op, r2 / read-01)
(a4 / and, op, t4 / turn-01)
(b / boil-01, ARG1, b2 / blood)
(b / boil-01, manner, i / indignation)
(b2 / blood, poss, w / we)
(c / cry-02, ARG0, g / generation)
(c / cry-02, ARG1, t2 / tear)
(c / cry-02, mod, a3 / also)
(e / era, mod, t / that)
(e2 / experience-01, ARG0, p / person)
(e2 / experience-01, ARG1, e / era)
(g / generation, mod, e3 / even)
(g / generation, mod, y / young)
(g / generation, poss, w / we)
(p / person, quant, a / all)
(p2 / page, mod, h / history)
(p2 / page, mod, t3 / this)
(r / remember-01, ARG0, p / person)
(r / remember-01, ARG1, e / era)
(r / remember-01, manner, v / vivid)
(r2 / read-01, ARG0, w / we)
(r2 / read-01, ARG1, p2 / page)
(s2 / stream-02, ARG1, t2 / tear)
(s2 / stream-02, direction, d / down)
(s2 / stream-02, location, c2 / cheek)
(t4 / turn-01, ARG1, w / we)
(t4 / turn-01, direction, p2 / page)
(w / we, part, c2 / cheek)

Input(Some(Graph((multi-sentence :snt1 (infer-01 :ARG1 (remember-01 :manner vivid :ARG0 (person :ARG0-of (experience-01 :ARG1 (era :mod that)) :quant all) :ARG1 era) :mod still) :snt2 (and :time (and :op (read-01 :ARG0 we :ARG1 page) :op (turn-01 :direction (page :mod this :mod history) :ARG1 we)) :op (boil-01 :manner indignation :ARG1 (blood :poss we)) :op (cry-02 :mod also :ARG1 (tear :ARG1-of (stream-02 :location (cheek :part-of we) :direction down)) :ARG0 (generation :mod even :poss we :mod (young :degree more))))),ArrayBuffer(Span(9,10,List(0),remember,remember-01,false), Span(0,1,List(1),All,all,false), Span(4,5,List(2, 3),experienced,(person :ARG0-of experience-01),false), Span(6,7,List(4),era,era,false), Span(5,6,List(5),that,that,false), Span(8,9,List(6),still,still,false), Span(12,13,List(7),;,and,false), Span(27,28,List(8),and,and,false), Span(43,44,List(9),read,read-01,false), Span(36,37,List(10),turn,turn-01,false), Span(39,40,List(11),page,page,false), Span(38,39,List(12),this,this,false), Span(41,42,List(13),history,history,false), Span(30,31,List(14),boils,boil-01,false), Span(32,33,List(15),indignation,indignation,false), Span(29,30,List(16),blood,blood,false), Span(19,20,List(17),cry,cry-02,false), Span(17,18,List(18),also,also,false), Span(21,22,List(19),tears,tear,false), Span(22,23,List(20),streaming,stream-02,false), Span(25,26,List(21),cheeks,cheek,false), Span(23,24,List(22),down,down,false), Span(16,17,List(23),generations,generation,false), Span(13,14,List(24),even,even,false), Span(35,36,List(25),we,we,false), Span(15,16,List(26),younger,young,false), Span(11,12,List(27),vividly,vivid,false)),Map(2 -> person, 5 -> that, 27 -> vivid, 12 -> this, 15 -> indignation, 8 -> and, 21 -> cheek, 18 -> also, 24 -> even, 7 -> and, 17 -> cry-02, 1 -> all, 23 -> generation, 26 -> young, 4 -> era, 11 -> page, 14 -> boil-01, 20 -> stream-02, 6 -> still, 9 -> read-01, 0 -> remember-01, 22 -> down, 16 -> blood, 19 -> tear, 10 -> turn-01, 3 -> experience-01, 25 -> we, 13 -> history),Map(e -> era, w -> we, h -> history, t4 -> turn-01, s2 -> stream-02, t -> that, b -> boil-01, b2 -> blood, p2 -> page, e2 -> experience-01, a3 -> also, s -> still, v -> vivid, d -> down, t3 -> this, y -> young, r2 -> read-01, g -> generation, p -> person, a -> all, t2 -> tear, i -> indignation, a2 -> and, r -> remember-01, c -> cry-02, e3 -> even, c2 -> cheek, a4 -> and))),[Ljava.lang.String;@367ffa75,Annotation([Ljava.lang.String;@49438269,[Ljava.lang.String;@ba2f4ec,[Ljava.lang.String;@1c1bbc4e),Annotation([Ljava.lang.String;@55fe41ea,[Ljava.lang.String;@fbd1f6,[Ledu.cmu.lti.nlp.amr.Dependency;@1ce24091),Annotation([Ljava.lang.String;@5dda768f,[Ljava.lang.String;@7a8c8dcf,[Ljava.lang.String;@24269709),Annotation([Ljava.lang.String;@2aceadd4,[Ljava.lang.String;@24aed80c,[Ledu.cmu.lti.nlp.amr.Entity;@3a52dba3))
AMR:
(a2 / and, op, c / cry-02)
(a2 / and, op, p / person)
(a4 / and, op, b / boil-01)
(a4 / and, op, c / cry-02)
(b / boil-01, ARG0, g / generation)
(b / boil-01, ARG1, b2 / blood)
(b / boil-01, ARG2, i / indignation)
(c / cry-02, ARG1, t2 / tear)
(c / cry-02, ARG6, e3 / even)
(c / cry-02, mod, a3 / also)
(e2 / experience-01, ARG0, p / person)
(e2 / experience-01, ARG1, e / era)
(e2 / experience-01, ARG6, a / all)
(g / generation, age, y / young)
(p2 / page, mod, t3 / this)
(r / remember-01, ARG0, e / era)
(r / remember-01, ARG1, v / vivid)
(r / remember-01, mod, s / still)
(r2 / read-01, ARG0, i / indignation)
(r2 / read-01, ARG1, w / we)
(s2 / stream-02, ARG0, t2 / tear)
(s2 / stream-02, ARG1, c2 / cheek)
(s2 / stream-02, ARG6, d / down)
(t / that, op, r / remember-01)
(t4 / turn-01, ARG0, w / we)
(t4 / turn-01, ARG1, p2 / page)
(t4 / turn-01, ARG2, h / history)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
Decoded in 2,270,237 microseconds
Sentence: Now Japan actually wants to reverse the verdict on the history of its aggression - fellow citizens, fellow Chinese in Asia, wake up!

Oracle Span 1:  actually => actual
Oracle Span 2:  aggression => aggression
Oracle Span 3:  Asia => (continent :name (name :op "Asia"))
Oracle Span 4:  Chinese => (country :name (name :op "China"))
Oracle Span 5:  citizens => citizen
Oracle Span 6:  fellow => fellow
Oracle Span 7:  history => history
Oracle Span 8:  Japan => (country :name (name :op "Japan"))
Oracle Span 9:  Now => now
Oracle Span 10:  reverse => reverse-01
Oracle Span 11:  verdict => verdict
Oracle Span 12:  wake => wake-02
Oracle Span 13:  wants => want-01
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Asia"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 2-3:  actually => actual
Span 13-14:  aggression => aggression
Span 21-22:  Asia => (continent :name (name :op "Asia"))
Span 19-20:  Chinese => (country :name (name :op "China"))
Span 16-17:  citizens => citizen
Span 15-16:  fellow => fellow
Span 10-11:  history => history
Span 1-2:  Japan => (country :name (name :op "Japan"))
Span 0-1:  Now => now
Span 5-6:  reverse => reverse-01
Span 7-8:  verdict => verdict
Span 23-24:  wake => wake-02
Span 3-4:  wants => want-01

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Oracle Span 2-3:  actually => actual
Oracle Span 13-14:  aggression => aggression
Oracle Span 21-22:  Asia => (continent :name (name :op "Asia"))
Oracle Span 19-20:  Chinese => (country :name (name :op "China"))
Oracle Span 16-17:  citizens => citizen
Oracle Span 15-16:  fellow => fellow
Oracle Span 10-11:  history => history
Oracle Span 1-2:  Japan => (country :name (name :op "Japan"))
Oracle Span 0-1:  Now => now
Oracle Span 5-6:  reverse => reverse-01
Oracle Span 7-8:  verdict => verdict
Oracle Span 23-24:  wake => wake-02
Oracle Span 3-4:  wants => want-01

Dependencies:
1	Now	_	NNP	NNP	_	2	nn	_	_
2	Japan	_	NNP	NNP	_	4	nsubj	_	_
3	actually	_	RB	RB	_	4	advmod	_	_
4	wants	_	VBZ	VBZ	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	reverse	_	VB	VB	_	4	xcomp	_	_
7	the	_	DT	DT	_	8	det	_	_
8	verdict	_	NN	NN	_	6	dobj	_	_
9	on	_	IN	IN	_	6	prep	_	_
10	the	_	DT	DT	_	11	det	_	_
11	history	_	NN	NN	_	9	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	its	_	PRP$	PRP$	_	14	poss	_	_
14	aggression	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	4	punct	_	_
16	fellow	_	JJ	JJ	_	17	amod	_	_
17	citizens	_	NNS	NNS	_	24	nsubj	_	_
18	,	_	,	,	_	17	punct	_	_
19	fellow	_	JJ	JJ	_	20	amod	_	_
20	Chinese	_	NNPS	NNPS	_	17	appos	_	_
21	in	_	IN	IN	_	20	prep	_	_
22	Asia	_	NNP	NNP	_	21	pobj	_	_
23	,	_	,	,	_	17	punct	_	_
24	wake	_	VBP	VBP	_	4	parataxis	_	_
25	up	_	RP	RP	_	24	prt	_	_
26	!	_	.	.	_	4	punct	_	_

Oracle:
(a4 / aggression, poss, c3 / country)
(c2 / continent, name, n / name)
(c3 / country, name, n2 / name)
(c5 / country, name, n4 / name)
(h / history, mod, a4 / aggression)
(n / name, op, "Asia")
(n2 / name, op, "Japan")
(n4 / name, op, "China")
(r / reverse-01, ARG0, c3 / country)
(r / reverse-01, ARG1, v / verdict)
(v / verdict, topic, h / history)
(w2 / want-01, ARG0, c3 / country)
(w2 / want-01, ARG1, r / reverse-01)
(w2 / want-01, mod, a / actual)
(w2 / want-01, time, n3 / now)

Input(Some(Graph((cause-01 :ARG0 (want-01 :mod actual :time now :ARG1 (reverse-01 :ARG1 (verdict :topic (history :mod (aggression :poss country))) :ARG0 country) :ARG0 (country :name (name :op "Japan"))) :ARG1 (wake-02 :ARG1 (and :op citizen :op (person :mod (country :name (name :op "China")) :location (continent :name (name :op "Asia"))) :mod fellow) :mode imperative :ARG0 and)),ArrayBuffer(Span(1,2,List(0, 1, 2),Japan,(country :name (name :op "Japan")),false), Span(21,22,List(3, 4, 5),Asia,(continent :name (name :op "Asia")),false), Span(19,20,List(6, 7, 8),Chinese,(country :name (name :op "China")),false), Span(3,4,List(9),wants,want-01,false), Span(0,1,List(10),Now,now,false), Span(5,6,List(11),reverse,reverse-01,false), Span(7,8,List(12),verdict,verdict,false), Span(10,11,List(13),history,history,false), Span(13,14,List(14),aggression,aggression,false), Span(23,24,List(15),wake,wake-02,false), Span(16,17,List(16),citizens,citizen,false), Span(15,16,List(17),fellow,fellow,false), Span(2,3,List(18),actually,actual,false)),Map(2 -> "Japan", 5 -> "Asia", 12 -> verdict, 15 -> wake-02, 8 -> "China", 18 -> actual, 7 -> name, 17 -> fellow, 1 -> name, 4 -> name, 11 -> reverse-01, 14 -> aggression, 6 -> country, 9 -> want-01, 0 -> country, 16 -> citizen, 10 -> now, 3 -> continent, 13 -> history),Map(w -> wake-02, n -> name, h -> history, n4 -> name, v -> verdict, a -> actual, n3 -> now, c3 -> country, w2 -> want-01, r -> reverse-01, c -> citizen, f -> fellow, c2 -> continent, n2 -> name, a4 -> aggression, c5 -> country))),[Ljava.lang.String;@2a5c8d3f,Annotation([Ljava.lang.String;@752325ad,[Ljava.lang.String;@279fedbd,[Ljava.lang.String;@b3ca52e),Annotation([Ljava.lang.String;@45c7e403,[Ljava.lang.String;@2925bf5b,[Ledu.cmu.lti.nlp.amr.Dependency;@710f4dc7),Annotation([Ljava.lang.String;@1ff4931d,[Ljava.lang.String;@65e98b1c,[Ljava.lang.String;@61322f9d),Annotation([Ljava.lang.String;@6ad82709,[Ljava.lang.String;@510f3d34,[Ledu.cmu.lti.nlp.amr.Entity;@7817fd62))
AMR:
(c / citizen, mod, f / fellow)
(c2 / continent, name, n / name)
(c3 / country, mod, n3 / now)
(c3 / country, name, n2 / name)
(c5 / country, mod, f / fellow)
(c5 / country, name, n4 / name)
(h / history, poss, a4 / aggression)
(n / name, op, "Asia")
(n2 / name, op, "Japan")
(n4 / name, op, "China")
(r / reverse-01, ARG1, v / verdict)
(r / reverse-01, location, h / history)
(w / wake-02, ARG0, c5 / country)
(w / wake-02, ARG1, c2 / continent)
(w2 / want-01, ARG0, c3 / country)
(w2 / want-01, ARG1, r / reverse-01)
(w2 / want-01, ARG6, w / wake-02)
(w2 / want-01, mod, a / actual)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.0.3
Decoded in 875,926 microseconds
Sentence: Although it is painful to look back at these hundred years of shame, we must go face it; although historical issues have not been resolved, let us create and choose history!

Oracle Span 1:  ; => and
Oracle Span 2:  back => back
Oracle Span 3:  choose => choose-01
Oracle Span 4:  create => create-01
Oracle Span 5:  face => face-01
Oracle Span 6:  go => go-05
Oracle Span 7:  history => history
Oracle Span 8:  issues => issue
Oracle Span 9:  look => look-01
Oracle Span 10:  painful => pain-01
Oracle Span 11:  resolved => resolve-01
Oracle Span 12:  shame => shame
Oracle Span 13:  we => we
Oracle Span 14:  years => (temporal-quantity :unit year)
Spans:
Span 19-20:  ; => and
Span 6-7:  back => back
Span 32-33:  choose => choose-01
Span 30-31:  create => create-01
Span 17-18:  face => face-01
Span 16-17:  go => go-05
Span 33-34:  history => history
Span 22-23:  issues => issue
Span 5-6:  look => look-01
Span 3-4:  painful => pain-01
Span 26-27:  resolved => resolve-01
Span 12-13:  shame => shame
Span 14-15:  we => we
Span 10-11:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 19-20:  ; => and
Oracle Span 6-7:  back => back
Oracle Span 32-33:  choose => choose-01
Oracle Span 30-31:  create => create-01
Oracle Span 17-18:  face => face-01
Oracle Span 16-17:  go => go-05
Oracle Span 33-34:  history => history
Oracle Span 22-23:  issues => issue
Oracle Span 5-6:  look => look-01
Oracle Span 3-4:  painful => pain-01
Oracle Span 26-27:  resolved => resolve-01
Oracle Span 12-13:  shame => shame
Oracle Span 14-15:  we => we
Oracle Span 10-11:  years => (temporal-quantity :unit year)

Dependencies:
1	Although	_	IN	IN	_	4	mark	_	_
2	it	_	PRP	PRP	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	painful	_	JJ	JJ	_	17	advcl	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	look	_	VB	VB	_	4	xcomp	_	_
7	back	_	RP	RP	_	6	prt	_	_
8	at	_	IN	IN	_	6	prep	_	_
9	these	_	DT	DT	_	11	det	_	_
10	hundred	_	CD	CD	_	11	num	_	_
11	years	_	NNS	NNS	_	8	pobj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	shame	_	NN	NN	_	12	pobj	_	_
14	,	_	,	,	_	17	punct	_	_
15	we	_	PRP	PRP	_	17	nsubj	_	_
16	must	_	MD	MD	_	17	aux	_	_
17	go	_	VB	VB	_	0	root	_	_
18	face	_	VB	VB	_	17	xcomp	_	_
19	it	_	PRP	PRP	_	18	dobj	_	_
20	;	_	:	:	_	17	punct	_	_
21	although	_	IN	IN	_	27	mark	_	_
22	historical	_	JJ	JJ	_	23	amod	_	_
23	issues	_	NNS	NNS	_	27	nsubjpass	_	_
24	have	_	VBP	VBP	_	27	aux	_	_
25	not	_	RB	RB	_	27	neg	_	_
26	been	_	VBN	VBN	_	27	auxpass	_	_
27	resolved	_	VBN	VBN	_	29	advcl	_	_
28	,	_	,	,	_	29	punct	_	_
29	let	_	VB	VB	_	17	parataxis	_	_
30	us	_	PRP	PRP	_	31	nsubj	_	_
31	create	_	VB	VB	_	29	ccomp	_	_
32	and	_	CC	CC	_	31	cc	_	_
33	choose	_	VB	VB	_	31	conj	_	_
34	history	_	NN	NN	_	31	dobj	_	_
35	!	_	.	.	_	17	punct	_	_

Oracle:
(a2 / and, concession, r / resolve-01)
(a2 / and, op, c / create-01)
(a2 / and, op, c2 / choose-01)
(f / face-01, ARG0, w / we)
(f / face-01, ARG1, t / temporal-quantity)
(g / go-05, ARG0, w / we)
(g / go-05, ARG1, f / face-01)
(i2 / issue, mod, h2 / history)
(l / look-01, ARG0, w / we)
(l / look-01, ARG1, t / temporal-quantity)
(l / look-01, direction, b / back)
(p / pain-01, ARG0, l / look-01)
(p / pain-01, ARG1, w / we)
(r / resolve-01, ARG1, i2 / issue)
(s / shame, duration, t / temporal-quantity)
(t / temporal-quantity, unit, y / year)

Input(Some(Graph((multi-sentence :snt1 (obligate-01 :ARG1 we :ARG2 (go-05 :ARG1 (face-01 :ARG0 we :ARG1 temporal-quantity) :ARG0 we) :concession (pain-01 :ARG0 (look-01 :direction back :ARG1 (temporal-quantity :duration-of shame :mod this :unit year :quant 100) :ARG0 we) :ARG1 we)) :snt2 (and :concession (resolve-01 :ARG1 (issue :mod history) :polarity -) :op (choose-01 :mode imperative :ARG0 we :ARG1 history) :op (create-01 :ARG1 history :ARG0 we :mode imperative))),ArrayBuffer(Span(14,15,List(0),we,we,false), Span(16,17,List(1),go,go-05,false), Span(17,18,List(2),face,face-01,false), Span(5,6,List(3),look,look-01,false), Span(6,7,List(4),back,back,false), Span(10,11,List(5, 6),years,(temporal-quantity :unit year),false), Span(12,13,List(7),shame,shame,false), Span(19,20,List(8),;,and,false), Span(26,27,List(9),resolved,resolve-01,false), Span(22,23,List(10),issues,issue,false), Span(33,34,List(11),history,history,false), Span(32,33,List(12),choose,choose-01,false), Span(30,31,List(13),create,create-01,false), Span(3,4,List(14),painful,pain-01,false)),Map(2 -> face-01, 5 -> temporal-quantity, 12 -> choose-01, 8 -> and, 7 -> shame, 1 -> go-05, 4 -> back, 11 -> history, 14 -> pain-01, 6 -> year, 9 -> resolve-01, 0 -> we, 10 -> issue, 3 -> look-01, 13 -> create-01),Map(w -> we, h2 -> history, t -> temporal-quantity, b -> back, s -> shame, p -> pain-01, y -> year, g -> go-05, i2 -> issue, r -> resolve-01, a2 -> and, c -> create-01, l -> look-01, f -> face-01, c2 -> choose-01))),[Ljava.lang.String;@8297b3a,Annotation([Ljava.lang.String;@2362f559,[Ljava.lang.String;@b2c9a9c,[Ljava.lang.String;@4c178a76),Annotation([Ljava.lang.String;@fa4c865,[Ljava.lang.String;@3bd82cf5,[Ledu.cmu.lti.nlp.amr.Dependency;@544fa968),Annotation([Ljava.lang.String;@247bddad,[Ljava.lang.String;@d35dea7,[Ljava.lang.String;@7770f470),Annotation([Ljava.lang.String;@5e5d171f,[Ljava.lang.String;@24313fcc,[Ledu.cmu.lti.nlp.amr.Entity;@7d20d0b))
AMR:
(c / create-01, ARG0, t / temporal-quantity)
(c / create-01, ARG1, h2 / history)
(c / create-01, ARG6, r / resolve-01)
(c2 / choose-01, ARG0, s / shame)
(c2 / choose-01, ARG1, h2 / history)
(f / face-01, ARG1, a2 / and)
(f / face-01, ARG6, p / pain-01)
(g / go-05, ARG0, w / we)
(g / go-05, ARG1, f / face-01)
(l / look-01, ARG1, r / resolve-01)
(l / look-01, ARG6, b / back)
(p / pain-01, ARG1, l / look-01)
(r / resolve-01, ARG1, i2 / issue)
(t / temporal-quantity, unit, y / year)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0.3
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.2.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.2
Decoded in 1,462,095 microseconds
Sentence: Since there is responsibility, we are not afraid. The territory is small, but it is related to the matter of dignity; no matter how the winds and clouds changes, the interests of the country and national unity are the guarantee of honor; even though scarred with wounds, we can not let our native lands be separated!

Oracle Span 1:  ; => and
Oracle Span 2:  and => and
Oracle Span 3:  can => possible
Oracle Span 4:  changes => (thing :manner-of change-01)
Oracle Span 5:  clouds => cloud
Oracle Span 6:  country => country
Oracle Span 7:  dignity => dignity
Oracle Span 8:  guarantee => guarantee-01
Oracle Span 9:  honor => honor
Oracle Span 10:  interests => interest
Oracle Span 11:  lands => land
Oracle Span 12:  let => let-01
Oracle Span 13:  matter => matter
Oracle Span 14:  national => nation
Oracle Span 15:  native => native
Oracle Span 16:  related => relate-01
Oracle Span 17:  responsibility => responsible-41
Oracle Span 18:  scarred => scar-01
Oracle Span 19:  separated => separate-01
Oracle Span 20:  small => small
Oracle Span 21:  territory => territory
Oracle Span 22:  unity => unity
Oracle Span 23:  we => we
Oracle Span 24:  we => we
Oracle Span 25:  winds => wind
Oracle Span 26:  wounds => wound-01
Spans:
Span 24-25:  ; => and
Span 30-31:  and => and
Span 55-56:  can => possible
Span 32-33:  changes => (thing :manner-of change-01)
Span 31-32:  clouds => cloud
Span 38-39:  country => country
Span 23-24:  dignity => dignity
Span 44-45:  guarantee => guarantee-01
Span 46-47:  honor => honor
Span 35-36:  interests => interest
Span 60-61:  lands => land
Span 57-58:  let => let-01
Span 21-22:  matter => matter
Span 40-41:  national => nation
Span 59-60:  native => native
Span 18-19:  related => relate-01
Span 3-4:  responsibility => responsible-41
Span 50-51:  scarred => scar-01
Span 62-63:  separated => separate-01
Span 13-14:  small => small
Span 11-12:  territory => territory
Span 41-42:  unity => unity
Span 5-6:  we => we
Span 54-55:  we => we
Span 29-30:  winds => wind
Span 52-53:  wounds => wound-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of native in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lands in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of separated in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Langrangian relaxation converged after 28 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of native in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lands in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of separated in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Oracle Span 24-25:  ; => and
Oracle Span 30-31:  and => and
Oracle Span 55-56:  can => possible
Oracle Span 32-33:  changes => (thing :manner-of change-01)
Oracle Span 31-32:  clouds => cloud
Oracle Span 38-39:  country => country
Oracle Span 23-24:  dignity => dignity
Oracle Span 44-45:  guarantee => guarantee-01
Oracle Span 46-47:  honor => honor
Oracle Span 35-36:  interests => interest
Oracle Span 60-61:  lands => land
Oracle Span 57-58:  let => let-01
Oracle Span 21-22:  matter => matter
Oracle Span 40-41:  national => nation
Oracle Span 59-60:  native => native
Oracle Span 18-19:  related => relate-01
Oracle Span 3-4:  responsibility => responsible-41
Oracle Span 50-51:  scarred => scar-01
Oracle Span 62-63:  separated => separate-01
Oracle Span 13-14:  small => small
Oracle Span 11-12:  territory => territory
Oracle Span 41-42:  unity => unity
Oracle Span 5-6:  we => we
Oracle Span 54-55:  we => we
Oracle Span 29-30:  winds => wind
Oracle Span 52-53:  wounds => wound-01

Dependencies:
1	Since	_	IN	IN	_	3	mark	_	_
2	there	_	EX	EX	_	3	expl	_	_
3	is	_	VBZ	VBZ	_	7	advcl	_	_
4	responsibility	_	NN	NN	_	3	nsubj	_	_
5	,	_	,	,	_	7	punct	_	_
6	we	_	PRP	PRP	_	7	nsubj	_	_
7	are	_	VBP	VBP	_	0	root	_	_
8	not	_	RB	RB	_	7	neg	_	_
9	afraid	_	JJ	JJ	_	7	acomp	_	_
10	.	_	.	.	_	7	punct	_	_
1	The	_	DT	DT	_	2	det	_	_
2	territory	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	small	_	JJ	JJ	_	0	root	_	_
5	,	_	,	,	_	4	punct	_	_
6	but	_	CC	CC	_	4	cc	_	_
7	it	_	PRP	PRP	_	9	nsubjpass	_	_
8	is	_	VBZ	VBZ	_	9	auxpass	_	_
9	related	_	VBN	VBN	_	4	conj	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	matter	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	dignity	_	NN	NN	_	13	pobj	_	_
15	;	_	:	:	_	4	punct	_	_
16	no	_	DT	DT	_	17	neg	_	_
17	matter	_	NN	NN	_	23	advmod	_	_
18	how	_	WRB	WRB	_	23	advmod	_	_
19	the	_	DT	DT	_	20	det	_	_
20	winds	_	NNS	NNS	_	23	nsubj	_	_
21	and	_	CC	CC	_	20	cc	_	_
22	clouds	_	NNS	NNS	_	20	conj	_	_
23	changes	_	VBZ	VBZ	_	35	advcl	_	_
24	,	_	,	,	_	35	punct	_	_
25	the	_	DT	DT	_	26	det	_	_
26	interests	_	NNS	NNS	_	35	nsubj	_	_
27	of	_	IN	IN	_	26	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	country	_	NN	NN	_	27	pobj	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	national	_	JJ	JJ	_	32	amod	_	_
32	unity	_	NN	NN	_	29	conj	_	_
33	are	_	VBP	VBP	_	35	cop	_	_
34	the	_	DT	DT	_	35	det	_	_
35	guarantee	_	NN	NN	_	4	conj	_	_
36	of	_	IN	IN	_	35	prep	_	_
37	honor	_	NN	NN	_	36	pobj	_	_
38	;	_	:	:	_	4	punct	_	_
39	even	_	RB	RB	_	41	advmod	_	_
40	though	_	IN	IN	_	41	mark	_	_
41	scarred	_	VBN	VBN	_	48	advcl	_	_
42	with	_	IN	IN	_	41	prep	_	_
43	wounds	_	NNS	NNS	_	42	pobj	_	_
44	,	_	,	,	_	48	punct	_	_
45	we	_	PRP	PRP	_	48	nsubj	_	_
46	can	_	MD	MD	_	48	aux	_	_
47	not	_	RB	RB	_	48	neg	_	_
48	let	_	VB	VB	_	4	conj	_	_
49	our	_	PRP$	PRP$	_	51	poss	_	_
50	native	_	JJ	JJ	_	51	amod	_	_
51	lands	_	NNS	NNS	_	53	nsubjpass	_	_
52	be	_	VB	VB	_	53	auxpass	_	_
53	separated	_	VBN	VBN	_	48	ccomp	_	_
54	!	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c3 / country)
(a / and, op, u / unity)
(a2 / and, op, c2 / cloud)
(a2 / and, op, w2 / wind)
(c4 / change-01, ARG1, a2 / and)
(c4 / change-01, manner, t2 / thing)
(g / guarantee-01, ARG0, i / interest)
(g / guarantee-01, ARG1, h / honor)
(g / guarantee-01, concession, t2 / thing)
(i / interest, poss, a / and)
(l / let-01, ARG0, w3 / we)
(l / let-01, ARG1, s2 / separate-01)
(l / let-01, concession, s3 / scar-01)
(l2 / land, mod, n3 / native)
(l2 / land, poss, w3 / we)
(m2 / matter, topic, d / dignity)
(p / possible, domain, l / let-01)
(r2 / relate-01, ARG1, t / territory)
(r2 / relate-01, ARG2, m2 / matter)
(s / small, domain, t / territory)
(s2 / separate-01, ARG1, l2 / land)
(s3 / scar-01, ARG1, l2 / land)
(s3 / scar-01, manner, w4 / wound-01)
(u / unity, mod, n / nation)
(w4 / wound-01, ARG1, l2 / land)

Input(Some(Graph((multi-sentence :snt1 (cause-01 :ARG0 responsible-41 :ARG1 (fear-01 :polarity - :ARG0 we)) :snt2 (have-concession-91 :ARG1 (relate-01 :ARG2 (matter :topic dignity) :ARG1 territory) :ARG2 (small :domain territory)) :snt3 (guarantee-01 :concession (thing :manner-of (change-01 :ARG1 (and :op cloud :op wind))) :ARG1 honor :ARG0 (interest :poss (and :op (unity :mod nation) :op country))) :snt4 (possible :domain (let-01 :concession (scar-01 :manner (wound-01 :ARG1 land) :ARG1 land) :ARG1 (separate-01 :ARG1 (land :mod native :poss we)) :ARG0 we) :polarity -)),ArrayBuffer(Span(5,6,List(0),we,we,false), Span(18,19,List(1),related,relate-01,false), Span(21,22,List(2),matter,matter,false), Span(23,24,List(3),dignity,dignity,false), Span(13,14,List(4),small,small,false), Span(11,12,List(5),territory,territory,false), Span(44,45,List(6),guarantee,guarantee-01,false), Span(32,33,List(7, 8),changes,(thing :manner-of change-01),false), Span(24,25,List(9),;,and,false), Span(31,32,List(10),clouds,cloud,false), Span(29,30,List(11),winds,wind,false), Span(46,47,List(12),honor,honor,false), Span(35,36,List(13),interests,interest,false), Span(30,31,List(14),and,and,false), Span(41,42,List(15),unity,unity,false), Span(38,39,List(16),country,country,false), Span(55,56,List(17),can,possible,false), Span(57,58,List(18),let,let-01,false), Span(50,51,List(19),scarred,scar-01,false), Span(52,53,List(20),wounds,wound-01,false), Span(62,63,List(21),separated,separate-01,false), Span(60,61,List(22),lands,land,false), Span(59,60,List(23),native,native,false), Span(54,55,List(24),we,we,false), Span(3,4,List(25),responsibility,responsible-41,false), Span(40,41,List(26),national,nation,false)),Map(2 -> matter, 5 -> territory, 12 -> honor, 15 -> unity, 8 -> change-01, 21 -> separate-01, 18 -> let-01, 24 -> we, 7 -> thing, 17 -> possible, 1 -> relate-01, 23 -> native, 26 -> nation, 4 -> small, 11 -> wind, 14 -> and, 20 -> wound-01, 6 -> guarantee-01, 9 -> and, 0 -> we, 22 -> land, 16 -> country, 19 -> scar-01, 10 -> cloud, 3 -> dignity, 25 -> responsible-41, 13 -> interest),Map(n -> nation, w -> we, h -> honor, s2 -> separate-01, t -> territory, m2 -> matter, c4 -> change-01, w3 -> we, s -> small, d -> dignity, r2 -> relate-01, p -> possible, g -> guarantee-01, n3 -> native, c3 -> country, a -> and, t2 -> thing, l2 -> land, w2 -> wind, r -> responsible-41, i -> interest, a2 -> and, s3 -> scar-01, l -> let-01, u -> unity, c2 -> cloud, w4 -> wound-01))),[Ljava.lang.String;@77f1baf5,Annotation([Ljava.lang.String;@41a2befb,[Ljava.lang.String;@6c40365c,[Ljava.lang.String;@7bedc48a),Annotation([Ljava.lang.String;@131ef10,[Ljava.lang.String;@55b0dcab,[Ledu.cmu.lti.nlp.amr.Dependency;@38afe297),Annotation([Ljava.lang.String;@2df3b89c,[Ljava.lang.String;@23348b5d,[Ljava.lang.String;@70325e14),Annotation([Ljava.lang.String;@37ceb1df,[Ljava.lang.String;@7c9d8e2,[Ledu.cmu.lti.nlp.amr.Entity;@20d525))
AMR:
(a / and, op, p / possible)
(a / and, op, w2 / wind)
(a2 / and, op, d / dignity)
(c4 / change-01, ARG0, c2 / cloud)
(c4 / change-01, ARG1, i / interest)
(c4 / change-01, manner, t2 / thing)
(g / guarantee-01, ARG0, u / unity)
(g / guarantee-01, ARG1, h / honor)
(g / guarantee-01, ARG6, n / nation)
(l / let-01, ARG0, l2 / land)
(l / let-01, ARG1, w3 / we)
(l / let-01, ARG6, n3 / native)
(p / possible, op, w3 / we)
(r / responsible-41, ARG1, a2 / and)
(r / responsible-41, ARG6, w / we)
(r2 / relate-01, ARG0, c3 / country)
(r2 / relate-01, ARG1, m2 / matter)
(r2 / relate-01, ARG2, d / dignity)
(s / small, calendar, t / territory)
(s2 / separate-01, ARG0, w / we)
(s2 / separate-01, ARG1, l2 / land)
(s3 / scar-01, ARG1, w4 / wound-01)
(t / territory, poss, c3 / country)
(t2 / thing, location, a / and)
(w4 / wound-01, ARG1, g / guarantee-01)
(w4 / wound-01, ARG6, w3 / we)

WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.2.2.0.0
WARNING: makeIds can't find span Id: 0.2.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.1.2
WARNING: makeIds can't find span Id: 0.3.1.2.0
WARNING: makeIds can't find span Id: 0.3.1.1
WARNING: makeIds can't find span Id: 0.3.1.1.0
WARNING: makeIds can't find span Id: 0.3.1.1.0.0
WARNING: makeIds can't find span Id: 0.3.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.0
Decoded in 1,708,308 microseconds
Sentence: My fellow citizens, for the Chinese nation, the advent of the twenty-first century means a time when we are beset with difficulties inside while being pressed from outside, and we will face many challenges.

Oracle Span 1:  advent => advent
Oracle Span 2:  and => and
Oracle Span 3:  beset => beset-01
Oracle Span 4:  challenges => (thing :ARG2-of challenge-01)
Oracle Span 5:  Chinese => (country :name (name :op "China"))
Oracle Span 6:  citizens => citizen
Oracle Span 7:  difficulties => difficulty
Oracle Span 8:  face => face-01
Oracle Span 9:  fellow => fellow
Oracle Span 10:  inside => inside
Oracle Span 11:  many => many
Oracle Span 12:  means => mean-01
Oracle Span 13:  nation => nation
Oracle Span 14:  outside => outside
Oracle Span 15:  pressed => press-01
Oracle Span 16:  time => time
Oracle Span 17:  we => we
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 10-11:  advent => advent
Span 33-34:  and => and
Span 23-24:  beset => beset-01
Span 38-39:  challenges => (thing :ARG2-of challenge-01)
Span 6-7:  Chinese => (country :name (name :op "China"))
Span 2-3:  citizens => citizen
Span 25-26:  difficulties => difficulty
Span 36-37:  face => face-01
Span 1-2:  fellow => fellow
Span 26-27:  inside => inside
Span 37-38:  many => many
Span 17-18:  means => mean-01
Span 7-8:  nation => nation
Span 31-32:  outside => outside
Span 29-30:  pressed => press-01
Span 19-20:  time => time
Span 21-22:  we => we

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 10-11:  advent => advent
Oracle Span 33-34:  and => and
Oracle Span 23-24:  beset => beset-01
Oracle Span 38-39:  challenges => (thing :ARG2-of challenge-01)
Oracle Span 6-7:  Chinese => (country :name (name :op "China"))
Oracle Span 2-3:  citizens => citizen
Oracle Span 25-26:  difficulties => difficulty
Oracle Span 36-37:  face => face-01
Oracle Span 1-2:  fellow => fellow
Oracle Span 26-27:  inside => inside
Oracle Span 37-38:  many => many
Oracle Span 17-18:  means => mean-01
Oracle Span 7-8:  nation => nation
Oracle Span 31-32:  outside => outside
Oracle Span 29-30:  pressed => press-01
Oracle Span 19-20:  time => time
Oracle Span 21-22:  we => we

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	16	nsubj	_	_
4	,	_	,	,	_	16	punct	_	_
5	for	_	IN	IN	_	16	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Chinese	_	JJ	JJ	_	8	amod	_	_
8	nation	_	NN	NN	_	5	pobj	_	_
9	,	_	,	,	_	16	punct	_	_
10	the	_	DT	DT	_	11	det	_	_
11	advent	_	NN	NN	_	16	nsubj	_	_
12	of	_	IN	IN	_	11	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	twenty-first	_	JJ	JJ	_	15	amod	_	_
15	century	_	NN	NN	_	12	pobj	_	_
16	means	_	VBZ	VBZ	_	0	root	_	_
17	a	_	DT	DT	_	18	det	_	_
18	time	_	NN	NN	_	16	dobj	_	_
19	when	_	WRB	WRB	_	22	advmod	_	_
20	we	_	PRP	PRP	_	22	nsubjpass	_	_
21	are	_	VBP	VBP	_	22	auxpass	_	_
22	beset	_	VBN	VBN	_	18	rcmod	_	_
23	with	_	IN	IN	_	22	prep	_	_
24	difficulties	_	NNS	NNS	_	23	pobj	_	_
25	inside	_	IN	IN	_	24	prep	_	_
26	while	_	NN	NN	_	25	pobj	_	_
27	being	_	VBG	VBG	_	28	auxpass	_	_
28	pressed	_	VBN	VBN	_	26	vmod	_	_
29	from	_	IN	IN	_	28	prep	_	_
30	outside	_	RB	RB	_	29	pobj	_	_
31	,	_	,	,	_	16	punct	_	_
32	and	_	CC	CC	_	16	cc	_	_
33	we	_	PRP	PRP	_	35	nsubj	_	_
34	will	_	MD	MD	_	35	aux	_	_
35	face	_	VB	VB	_	16	conj	_	_
36	many	_	JJ	JJ	_	37	amod	_	_
37	challenges	_	NNS	NNS	_	35	dobj	_	_
38	.	_	.	.	_	16	punct	_	_

Oracle:
(a / and, op, f2 / face-01)
(a / and, op, m2 / mean-01)
(b / beset-01, ARG0, d2 / difficulty)
(b / beset-01, ARG1, w / we)
(b / beset-01, location, i2 / inside)
(c / citizen, mod, f / fellow)
(c2 / challenge-01, ARG1, w / we)
(c2 / challenge-01, ARG2, t2 / thing)
(c3 / country, name, n2 / name)
(f2 / face-01, ARG0, w / we)
(f2 / face-01, ARG1, t2 / thing)
(m2 / mean-01, ARG0, a2 / advent)
(m2 / mean-01, ARG1, t / time)
(m2 / mean-01, ARG2, n / nation)
(n / nation, mod, c3 / country)
(n2 / name, op, "China")
(p / press-01, ARG1, w / we)
(p / press-01, source, o / outside)
(t2 / thing, quant, m / many)

Input(Some(Graph((say-01 :ARG1 (and :op (face-01 :ARG1 (thing :ARG2-of (challenge-01 :ARG1 we) :quant many) :ARG0 we) :op (mean-01 :ARG2 (nation :mod (country :name (name :op "China"))) :ARG1 (time :time-of (contrast-01 :ARG1 (beset-01 :location inside :ARG0 difficulty :ARG1 we) :ARG2 (press-01 :source outside :ARG1 we))) :ARG0 (advent :mod (date-entity :century 21)))) :ARG2 (citizen :poss i :mod fellow) :ARG0 i),ArrayBuffer(Span(6,7,List(0, 1, 2),Chinese,(country :name (name :op "China")),false), Span(33,34,List(3),and,and,false), Span(36,37,List(4),face,face-01,false), Span(37,38,List(5),many,many,false), Span(38,39,List(6, 7),challenges,(thing :ARG2-of challenge-01),false), Span(21,22,List(8),we,we,false), Span(17,18,List(9),means,mean-01,false), Span(7,8,List(10),nation,nation,false), Span(19,20,List(11),time,time,false), Span(23,24,List(12),beset,beset-01,false), Span(26,27,List(13),inside,inside,false), Span(25,26,List(14),difficulties,difficulty,false), Span(29,30,List(15),pressed,press-01,false), Span(31,32,List(16),outside,outside,false), Span(10,11,List(17),advent,advent,false), Span(2,3,List(18),citizens,citizen,false), Span(1,2,List(19),fellow,fellow,false)),Map(2 -> "China", 5 -> many, 12 -> beset-01, 15 -> press-01, 8 -> we, 18 -> citizen, 7 -> challenge-01, 17 -> advent, 1 -> name, 4 -> face-01, 11 -> time, 14 -> difficulty, 6 -> thing, 9 -> mean-01, 0 -> country, 16 -> outside, 19 -> fellow, 10 -> nation, 3 -> and, 13 -> inside),Map(n -> nation, w -> we, b -> beset-01, t -> time, m2 -> mean-01, m -> many, p -> press-01, a -> and, c3 -> country, d2 -> difficulty, i2 -> inside, t2 -> thing, a2 -> advent, c -> citizen, f2 -> face-01, f -> fellow, o -> outside, c2 -> challenge-01, n2 -> name))),[Ljava.lang.String;@6200f9cb,Annotation([Ljava.lang.String;@2002fc1d,[Ljava.lang.String;@69453e37,[Ljava.lang.String;@6f4a47c7),Annotation([Ljava.lang.String;@ae13544,[Ljava.lang.String;@3d34d211,[Ledu.cmu.lti.nlp.amr.Dependency;@7dc0f706),Annotation([Ljava.lang.String;@4009e306,[Ljava.lang.String;@43c1b556,[Ljava.lang.String;@587e5365),Annotation([Ljava.lang.String;@22fcf7ab,[Ljava.lang.String;@2de23121,[Ledu.cmu.lti.nlp.amr.Entity;@63475ace))
AMR:
(a / and, op, f2 / face-01)
(a / and, op, m2 / mean-01)
(b / beset-01, ARG0, d2 / difficulty)
(b / beset-01, ARG1, w / we)
(b / beset-01, ARG6, t / time)
(c / citizen, mod, f / fellow)
(c2 / challenge-01, ARG1, m / many)
(c2 / challenge-01, ARG2, t2 / thing)
(c3 / country, name, n2 / name)
(d2 / difficulty, location, i2 / inside)
(f2 / face-01, ARG0, c / citizen)
(f2 / face-01, ARG1, t2 / thing)
(m2 / mean-01, ARG0, a2 / advent)
(m2 / mean-01, ARG1, t / time)
(n / nation, mod, c3 / country)
(n2 / name, op, "China")
(o / outside, op, c3 / country)
(p / press-01, ARG1, d2 / difficulty)
(p / press-01, ARG6, o / outside)

WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 1,116,171 microseconds
Sentence: The Taiwan issue, the Tibet issue, the South China Sea issue, the surrounding environment, as well as the foreign forces which are aggressive to China - which way should we go?

Oracle Span 1:  aggressive => aggressive
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  environment => environment
Oracle Span 4:  forces => force
Oracle Span 5:  foreign => foreign
Oracle Span 6:  go => go-06
Oracle Span 7:  issue => issue
Oracle Span 8:  issue => issue
Oracle Span 9:  issue => issue
Oracle Span 10:  should => recommend-01
Oracle Span 11:  South China Sea => (sea :name (name :op "Sea" :op "China" :op "South"))
Oracle Span 12:  surrounding => surround-01
Oracle Span 13:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 14:  Tibet => (province :name (name :op "Tibet"))
Oracle Span 15:  way => way
Oracle Span 16:  we => we
NER Entity: (country :name (name :op "Taiwan"))
NER Entity: (country :name (name :op "Tibet"))
NER Entity: (country :name (name :op "South" :op "China" :op "Sea"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 26-27:  aggressive => aggressive
Span 28-29:  China => (country :name (name :op "China"))
Span 16-17:  environment => environment
Span 23-24:  forces => force
Span 22-23:  foreign => foreign
Span 34-35:  go => go-06
Span 2-3:  issue => issue
Span 6-7:  issue => issue
Span 12-13:  issue => issue
Span 32-33:  should => recommend-01
Span 9-12:  South China Sea => (sea :name (name :op "Sea" :op "China" :op "South"))
Span 15-16:  surrounding => surround-01
Span 1-2:  Taiwan => (country :name (name :op "Taiwan"))
Span 5-6:  Tibet => (province :name (name :op "Tibet"))
Span 31-32:  way => way
Span 33-34:  we => we

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 26-27:  aggressive => aggressive
Oracle Span 28-29:  China => (country :name (name :op "China"))
Oracle Span 16-17:  environment => environment
Oracle Span 23-24:  forces => force
Oracle Span 22-23:  foreign => foreign
Oracle Span 34-35:  go => go-06
Oracle Span 2-3:  issue => issue
Oracle Span 6-7:  issue => issue
Oracle Span 12-13:  issue => issue
Oracle Span 32-33:  should => recommend-01
Oracle Span 9-12:  South China Sea => (sea :name (name :op "Sea" :op "China" :op "South"))
Oracle Span 15-16:  surrounding => surround-01
Oracle Span 1-2:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 5-6:  Tibet => (province :name (name :op "Tibet"))
Oracle Span 31-32:  way => way
Oracle Span 33-34:  we => we

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Taiwan	_	NNP	NNP	_	3	nn	_	_
3	issue	_	NN	NN	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	the	_	DT	DT	_	7	det	_	_
6	Tibet	_	NNP	NNP	_	7	nn	_	_
7	issue	_	NN	NN	_	3	appos	_	_
8	,	_	,	,	_	3	punct	_	_
9	the	_	DT	DT	_	13	det	_	_
10	South	_	NNP	NNP	_	13	nn	_	_
11	China	_	NNP	NNP	_	13	nn	_	_
12	Sea	_	NNP	NNP	_	13	nn	_	_
13	issue	_	NN	NN	_	3	appos	_	_
14	,	_	,	,	_	3	punct	_	_
15	the	_	DT	DT	_	17	det	_	_
16	surrounding	_	JJ	JJ	_	17	amod	_	_
17	environment	_	NN	NN	_	3	appos	_	_
18	,	_	,	,	_	17	punct	_	_
19	as	_	RB	RB	_	20	advmod	_	_
20	well	_	RB	RB	_	17	cc	_	_
21	as	_	IN	IN	_	20	mwe	_	_
22	the	_	DT	DT	_	24	det	_	_
23	foreign	_	JJ	JJ	_	24	amod	_	_
24	forces	_	NNS	NNS	_	17	conj	_	_
25	which	_	WDT	WDT	_	27	nsubj	_	_
26	are	_	VBP	VBP	_	27	cop	_	_
27	aggressive	_	JJ	JJ	_	3	dep	_	_
28	to	_	TO	TO	_	27	prep	_	_
29	China	_	NNP	NNP	_	28	pobj	_	_
30	-	_	:	:	_	29	punct	_	_
31	which	_	WDT	WDT	_	32	det	_	_
32	way	_	NN	NN	_	35	dobj	_	_
33	should	_	MD	MD	_	35	aux	_	_
34	we	_	PRP	PRP	_	35	nsubj	_	_
35	go	_	VB	VB	_	29	dep	_	_
36	?	_	.	.	_	35	punct	_	_

Oracle:
(a2 / aggressive, prep-to, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(f3 / force, mod, a2 / aggressive)
(f3 / force, mod, f4 / foreign)
(g / go-06, ARG0, w / we)
(g / go-06, ARG2, w3 / way)
(i / issue, topic, c / country)
(i2 / issue, topic, p / province)
(i5 / issue, topic, s2 / sea)
(n / name, op, "Taiwan")
(n2 / name, op, "China")
(n2 / name, op, "Sea")
(n2 / name, op, "South")
(n3 / name, op, "China")
(n5 / name, op, "Tibet")
(p / province, name, n5 / name)
(r / recommend-01, ARG1, g / go-06)
(s2 / sea, name, n2 / name)
(s3 / surround-01, ARG1, e2 / environment)

Input(Some(Graph((recommend-01 :ARG1 (go-06 :ARG2 (way :mod amr-unknown) :ARG1 (or :op (issue :topic (country :name (name :op "Taiwan"))) :op (issue :topic (province :name (name :op "Tibet"))) :op (issue :topic (sea :name (name :op "Sea" :op "China" :op "South"))) :op (environment :ARG1-of surround-01) :op (force :mod (aggressive :prep-to (country :name (name :op "China"))) :mod foreign)) :ARG0 we)),ArrayBuffer(Span(1,2,List(0, 1, 2),Taiwan,(country :name (name :op "Taiwan")),false), Span(5,6,List(3, 4, 5),Tibet,(province :name (name :op "Tibet")),false), Span(9,12,List(6, 7, 8, 9, 10),South China Sea,(sea :name (name :op "Sea" :op "China" :op "South")),false), Span(28,29,List(11, 12, 13),China,(country :name (name :op "China")),false), Span(32,33,List(14),should,recommend-01,false), Span(34,35,List(15),go,go-06,false), Span(31,32,List(16),way,way,false), Span(2,3,List(17),issue,issue,false), Span(6,7,List(18),issue,issue,false), Span(12,13,List(19),issue,issue,false), Span(16,17,List(20),environment,environment,false), Span(15,16,List(21),surrounding,surround-01,false), Span(23,24,List(22),forces,force,false), Span(26,27,List(23),aggressive,aggressive,false), Span(22,23,List(24),foreign,foreign,false), Span(33,34,List(25),we,we,false)),Map(2 -> "Taiwan", 5 -> "Tibet", 12 -> name, 15 -> go-06, 8 -> "Sea", 21 -> surround-01, 18 -> issue, 24 -> foreign, 7 -> name, 17 -> issue, 1 -> name, 23 -> aggressive, 4 -> name, 11 -> country, 14 -> recommend-01, 20 -> environment, 6 -> sea, 9 -> "China", 0 -> country, 22 -> force, 16 -> way, 19 -> issue, 10 -> "South", 3 -> province, 25 -> we, 13 -> "China"),Map(w -> we, n -> name, s2 -> sea, f4 -> foreign, e2 -> environment, w3 -> way, g -> go-06, p -> province, n3 -> name, f3 -> force, i2 -> issue, a2 -> aggressive, i5 -> issue, i -> issue, r -> recommend-01, s3 -> surround-01, c -> country, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@4988d8b8,Annotation([Ljava.lang.String;@c0c2f8d,[Ljava.lang.String;@305b7c14,[Ljava.lang.String;@6913c1fb),Annotation([Ljava.lang.String;@66d18979,[Ljava.lang.String;@bccb269,[Ledu.cmu.lti.nlp.amr.Dependency;@609cd4d8),Annotation([Ljava.lang.String;@17f7cd29,[Ljava.lang.String;@7d8704ef,[Ljava.lang.String;@13b6aecc),Annotation([Ljava.lang.String;@158a8276,[Ljava.lang.String;@3c3d9b6b,[Ledu.cmu.lti.nlp.amr.Entity;@79d8407f))
AMR:
(a2 / aggressive, calendar, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(e2 / environment, mod, s3 / surround-01)
(f3 / force, mod, c / country)
(f3 / force, mod, f4 / foreign)
(g / go-06, ARG0, w / we)
(g / go-06, ARG1, w3 / way)
(i / issue, topic, c / country)
(i2 / issue, mod, p / province)
(i2 / issue, poss, c2 / country)
(i5 / issue, mod, s2 / sea)
(n / name, op, "Taiwan")
(n2 / name, op, "China")
(n2 / name, op, "Sea")
(n2 / name, op, "South")
(n3 / name, op, "China")
(n5 / name, op, "Tibet")
(p / province, name, n5 / name)
(r / recommend-01, ARG0, s2 / sea)
(r / recommend-01, ARG1, g / go-06)
(r / recommend-01, ARG6, c2 / country)
(s2 / sea, name, n2 / name)
(s3 / surround-01, ARG0, i5 / issue)
(s3 / surround-01, ARG1, f3 / force)

WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0.2
WARNING: makeIds can't find span Id: 0.0.1.2.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.4.1.0
WARNING: makeIds can't find span Id: 0.0.1.4.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.4.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.3
WARNING: makeIds can't find span Id: 0.0.1.3.0
WARNING: makeIds can't find span Id: 0.0.1.4
WARNING: makeIds can't find span Id: 0.0.1.4.1
WARNING: makeIds can't find span Id: 0.0.1.4.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 643,999 microseconds
Sentence: What to do, fellow citizens? Please take a look at the map of the world, that crescent-shaped encirclement is suppressing our breathing, strangling our development, and coveting our national territory.

Oracle Span 1:  and => and
Oracle Span 2:  breathing => breathe-01
Oracle Span 3:  citizens => citizen
Oracle Span 4:  coveting => covet-01
Oracle Span 5:  crescent => crescent
Oracle Span 6:  development => develop-02
Oracle Span 7:  do => do-02
Oracle Span 8:  encirclement => encircle-01
Oracle Span 9:  fellow => fellow
Oracle Span 10:  look => look-01
Oracle Span 11:  map => map
Oracle Span 12:  national => nation
Oracle Span 13:  shaped => shape-01
Oracle Span 14:  strangling => strangle-01
Oracle Span 15:  suppressing => suppress-01
Oracle Span 16:  territory => territory
Oracle Span 17:  world => world
Spans:
Span 32-33:  and => and
Span 26-27:  breathing => breathe-01
Span 5-6:  citizens => citizen
Span 33-34:  coveting => covet-01
Span 19-20:  crescent => crescent
Span 30-31:  development => develop-02
Span 2-3:  do => do-02
Span 22-23:  encirclement => encircle-01
Span 4-5:  fellow => fellow
Span 10-11:  look => look-01
Span 13-14:  map => map
Span 35-36:  national => nation
Span 21-22:  shaped => shape-01
Span 28-29:  strangling => strangle-01
Span 24-25:  suppressing => suppress-01
Span 36-37:  territory => territory
Span 16-17:  world => world

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of coveting in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of territory in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
Langrangian relaxation converged after 54 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of coveting in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of territory in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
Oracle Span 32-33:  and => and
Oracle Span 26-27:  breathing => breathe-01
Oracle Span 5-6:  citizens => citizen
Oracle Span 33-34:  coveting => covet-01
Oracle Span 19-20:  crescent => crescent
Oracle Span 30-31:  development => develop-02
Oracle Span 2-3:  do => do-02
Oracle Span 22-23:  encirclement => encircle-01
Oracle Span 4-5:  fellow => fellow
Oracle Span 10-11:  look => look-01
Oracle Span 13-14:  map => map
Oracle Span 35-36:  national => nation
Oracle Span 21-22:  shaped => shape-01
Oracle Span 28-29:  strangling => strangle-01
Oracle Span 24-25:  suppressing => suppress-01
Oracle Span 36-37:  territory => territory
Oracle Span 16-17:  world => world

Dependencies:
1	What	_	WP	WP	_	3	dep	_	_
2	to	_	TO	TO	_	3	aux	_	_
3	do	_	VB	VB	_	0	root	_	_
4	,	_	,	,	_	6	punct	_	_
5	fellow	_	JJ	JJ	_	6	amod	_	_
6	citizens	_	NNS	NNS	_	3	dep	_	_
7	?	_	.	.	_	3	punct	_	_
1	Please	_	VB	VB	_	2	discourse	_	_
2	take	_	VB	VB	_	16	ccomp	_	_
3	a	_	DT	DT	_	4	det	_	_
4	look	_	NN	NN	_	2	dobj	_	_
5	at	_	IN	IN	_	2	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	map	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	world	_	NN	NN	_	8	pobj	_	_
11	,	_	,	,	_	16	punct	_	_
12	that	_	DT	DT	_	14	det	_	_
13	crescent-shaped	_	JJ	JJ	_	14	amod	_	_
14	encirclement	_	NN	NN	_	16	nsubj	_	_
15	is	_	VBZ	VBZ	_	16	aux	_	_
16	suppressing	_	VBG	VBG	_	0	root	_	_
17	our	_	PRP$	PRP$	_	18	poss	_	_
18	breathing	_	NN	NN	_	16	dobj	_	_
19	,	_	,	,	_	16	punct	_	_
20	strangling	_	VBG	VBG	_	16	conj	_	_
21	our	_	PRP$	PRP$	_	22	poss	_	_
22	development	_	NN	NN	_	20	dobj	_	_
23	,	_	,	,	_	16	punct	_	_
24	and	_	CC	CC	_	16	cc	_	_
25	coveting	_	VBG	VBG	_	16	conj	_	_
26	our	_	PRP$	PRP$	_	28	poss	_	_
27	national	_	JJ	JJ	_	28	amod	_	_
28	territory	_	NN	NN	_	25	dobj	_	_
29	.	_	.	.	_	16	punct	_	_

Oracle:
(a2 / and, op, l / look-01)
(c / citizen, mod, f / fellow)
(c3 / covet-01, ARG0, e / encircle-01)
(c3 / covet-01, ARG1, t / territory)
(l / look-01, ARG1, m2 / map)
(m2 / map, mod, w / world)
(s2 / suppress-01, ARG0, e / encircle-01)
(s2 / suppress-01, ARG1, b / breathe-01)
(s3 / strangle-01, ARG0, e / encircle-01)
(s3 / strangle-01, ARG1, d2 / develop-02)
(s4 / shape-01, ARG1, e / encircle-01)
(s4 / shape-01, ARG2, c2 / crescent)
(t / territory, mod, n / nation)

Input(Some(Graph((multi-sentence :snt1 (say-01 :ARG0 i :ARG1 (do-02 :ARG1 amr-unknown) :ARG2 (citizen :mod fellow)) :snt2 (and :op (and :op (suppress-01 :ARG1 (breathe-01 :ARG0 we) :ARG0 (encircle-01 :ARG1-of (shape-01 :ARG2 crescent))) :op (strangle-01 :ARG1 (develop-02 :ARG1 we) :ARG0 encircle-01) :op (covet-01 :ARG1 (territory :mod nation :poss we) :ARG0 encircle-01)) :op (look-01 :ARG1 (map :mod world) :ARG0 you :polite + :mode imperative))),ArrayBuffer(Span(2,3,List(0),do,do-02,false), Span(5,6,List(1),citizens,citizen,false), Span(4,5,List(2),fellow,fellow,false), Span(32,33,List(3),and,and,false), Span(24,25,List(4),suppressing,suppress-01,false), Span(26,27,List(5),breathing,breathe-01,false), Span(21,22,List(6),shaped,shape-01,false), Span(19,20,List(7),crescent,crescent,false), Span(28,29,List(8),strangling,strangle-01,false), Span(33,34,List(9),coveting,covet-01,false), Span(36,37,List(10),territory,territory,false), Span(10,11,List(11),look,look-01,false), Span(13,14,List(12),map,map,false), Span(16,17,List(13),world,world,false), Span(22,23,List(14),encirclement,encircle-01,false), Span(30,31,List(15),development,develop-02,false), Span(35,36,List(16),national,nation,false)),Map(2 -> fellow, 5 -> breathe-01, 12 -> map, 15 -> develop-02, 8 -> strangle-01, 7 -> crescent, 1 -> citizen, 4 -> suppress-01, 11 -> look-01, 14 -> encircle-01, 6 -> shape-01, 9 -> covet-01, 0 -> do-02, 16 -> nation, 10 -> territory, 3 -> and, 13 -> world),Map(e -> encircle-01, n -> nation, w -> world, s2 -> suppress-01, t -> territory, b -> breathe-01, m2 -> map, s4 -> shape-01, d -> do-02, c3 -> covet-01, d2 -> develop-02, a2 -> and, s3 -> strangle-01, c -> citizen, l -> look-01, f -> fellow, c2 -> crescent))),[Ljava.lang.String;@5fbe4146,Annotation([Ljava.lang.String;@1e66f1f5,[Ljava.lang.String;@4e50c791,[Ljava.lang.String;@7530ad9c),Annotation([Ljava.lang.String;@58a9760d,[Ljava.lang.String;@71e9ddb4,[Ledu.cmu.lti.nlp.amr.Dependency;@394df057),Annotation([Ljava.lang.String;@4961f6af,[Ljava.lang.String;@5aebe890,[Ljava.lang.String;@65d09a04),Annotation([Ljava.lang.String;@33c911a1,[Ljava.lang.String;@75db5df9,[Ledu.cmu.lti.nlp.amr.Entity;@707194ba))
AMR:
(a2 / and, op, c3 / covet-01)
(a2 / and, op, d2 / develop-02)
(b / breathe-01, ARG1, e / encircle-01)
(c / citizen, mod, f / fellow)
(c3 / covet-01, ARG0, t / territory)
(c3 / covet-01, ARG1, n / nation)
(d / do-02, ARG1, c / citizen)
(d2 / develop-02, ARG1, b / breathe-01)
(e / encircle-01, ARG1, s4 / shape-01)
(l / look-01, ARG1, m2 / map)
(l / look-01, ARG6, c / citizen)
(s2 / suppress-01, ARG1, b / breathe-01)
(s3 / strangle-01, ARG1, b / breathe-01)
(s4 / shape-01, ARG0, w / world)
(s4 / shape-01, ARG1, c2 / crescent)
(s4 / shape-01, ARG6, m2 / map)

WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.2.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.3.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.0
Decoded in 1,115,951 microseconds
Sentence: We do not want to make enemies, but are never afraid of enemies; we do not want war, but are never afraid of war.

Oracle Span 1:  enemies => enemy
Oracle Span 2:  make => make-01
Oracle Span 3:  want => want-01
Oracle Span 4:  want => want-01
Oracle Span 5:  war => war
Oracle Span 6:  We => we
Oracle Span 7:  we => we
Spans:
Span 6-7:  enemies => enemy
Span 5-6:  make => make-01
Span 3-4:  want => want-01
Span 18-19:  want => want-01
Span 19-20:  war => war
Span 0-1:  We => we
Span 15-16:  we => we

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 6-7:  enemies => enemy
Oracle Span 5-6:  make => make-01
Oracle Span 3-4:  want => want-01
Oracle Span 18-19:  want => want-01
Oracle Span 19-20:  war => war
Oracle Span 0-1:  We => we
Oracle Span 15-16:  we => we

Dependencies:
1	We	_	PRP	PRP	_	4	nsubj	_	_
2	do	_	VBP	VBP	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	want	_	VB	VB	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	make	_	VB	VB	_	4	xcomp	_	_
7	enemies	_	NNS	NNS	_	6	dobj	_	_
8	,	_	,	,	_	4	punct	_	_
9	but	_	CC	CC	_	4	cc	_	_
10	are	_	VBP	VBP	_	12	cop	_	_
11	never	_	RB	RB	_	12	neg	_	_
12	afraid	_	JJ	JJ	_	4	conj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	enemies	_	NNS	NNS	_	13	pobj	_	_
15	;	_	:	:	_	4	punct	_	_
16	we	_	PRP	PRP	_	19	nsubj	_	_
17	do	_	VBP	VBP	_	19	aux	_	_
18	not	_	RB	RB	_	19	neg	_	_
19	want	_	VB	VB	_	4	parataxis	_	_
20	war	_	NN	NN	_	19	dobj	_	_
21	,	_	,	,	_	19	punct	_	_
22	but	_	CC	CC	_	19	cc	_	_
23	are	_	VBP	VBP	_	25	cop	_	_
24	never	_	RB	RB	_	25	neg	_	_
25	afraid	_	JJ	JJ	_	19	conj	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	war	_	NN	NN	_	26	pobj	_	_
28	.	_	.	.	_	4	punct	_	_

Oracle:
(m2 / make-01, ARG0, w / we)
(m2 / make-01, ARG1, e / enemy)
(w4 / want-01, ARG0, w / we)
(w4 / want-01, ARG1, m2 / make-01)
(w5 / want-01, ARG0, w2 / we)
(w5 / want-01, ARG1, w3 / war)

Input(Some(Graph((multi-sentence :snt1 (have-concession-91 :ARG1 (fear-01 :polarity - :time ever :ARG0 we :ARG1 enemy) :ARG2 (want-01 :ARG1 (make-01 :ARG1 enemy :ARG0 we) :ARG0 we :polarity -)) :snt2 (have-concession-91 :ARG1 (fear-01 :polarity - :ARG0 we :ARG1 war) :ARG2 (want-01 :ARG1 war :ARG0 we :polarity -))),ArrayBuffer(Span(3,4,List(0),want,want-01,false), Span(5,6,List(1),make,make-01,false), Span(6,7,List(2),enemies,enemy,false), Span(0,1,List(3),We,we,false), Span(18,19,List(4),want,want-01,false), Span(19,20,List(5),war,war,false), Span(15,16,List(6),we,we,false)),Map(2 -> enemy, 5 -> war, 1 -> make-01, 4 -> want-01, 6 -> we, 0 -> want-01, 3 -> we),Map(e -> enemy, w -> we, m2 -> make-01, w3 -> war, w5 -> want-01, w2 -> we, w4 -> want-01))),[Ljava.lang.String;@1190200a,Annotation([Ljava.lang.String;@6a2f6f80,[Ljava.lang.String;@45b4c3a9,[Ljava.lang.String;@399c4be1),Annotation([Ljava.lang.String;@291caca8,[Ljava.lang.String;@385e9564,[Ledu.cmu.lti.nlp.amr.Dependency;@5b94b04d),Annotation([Ljava.lang.String;@8c3b9d,[Ljava.lang.String;@4c39bec8,[Ljava.lang.String;@f79e),Annotation([Ljava.lang.String;@7ee8290b,[Ljava.lang.String;@1f59a598,[Ledu.cmu.lti.nlp.amr.Entity;@1e178745))
AMR:
(m2 / make-01, ARG0, w / we)
(m2 / make-01, ARG1, e / enemy)
(w4 / want-01, ARG1, m2 / make-01)
(w4 / want-01, ARG6, w5 / want-01)
(w5 / want-01, ARG1, w3 / war)
(w5 / want-01, ARG6, w2 / we)

WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.1
Decoded in 241,601 microseconds
Sentence: We must urgently arrange arms, strengthen all military forces on land, on sea, and in the air.

Oracle Span 1:  air => air
Oracle Span 2:  all => all
Oracle Span 3:  and => and
Oracle Span 4:  arms => arm
Oracle Span 5:  arrange => arrange-01
Oracle Span 6:  forces => force
Oracle Span 7:  land => land
Oracle Span 8:  military => military
Oracle Span 9:  sea => sea
Oracle Span 10:  strengthen => strengthen-01
Oracle Span 11:  urgently => urgent
Oracle Span 12:  We => we
Spans:
Span 19-20:  air => air
Span 7-8:  all => all
Span 16-17:  and => and
Span 4-5:  arms => arm
Span 3-4:  arrange => arrange-01
Span 9-10:  forces => force
Span 11-12:  land => land
Span 8-9:  military => military
Span 14-15:  sea => sea
Span 6-7:  strengthen => strengthen-01
Span 2-3:  urgently => urgent
Span 0-1:  We => we

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Oracle Span 19-20:  air => air
Oracle Span 7-8:  all => all
Oracle Span 16-17:  and => and
Oracle Span 4-5:  arms => arm
Oracle Span 3-4:  arrange => arrange-01
Oracle Span 9-10:  forces => force
Oracle Span 11-12:  land => land
Oracle Span 8-9:  military => military
Oracle Span 14-15:  sea => sea
Oracle Span 6-7:  strengthen => strengthen-01
Oracle Span 2-3:  urgently => urgent
Oracle Span 0-1:  We => we

Dependencies:
1	We	_	PRP	PRP	_	4	nsubj	_	_
2	must	_	MD	MD	_	4	aux	_	_
3	urgently	_	RB	RB	_	4	advmod	_	_
4	arrange	_	VB	VB	_	0	root	_	_
5	arms	_	NNS	NNS	_	4	dobj	_	_
6	,	_	,	,	_	4	punct	_	_
7	strengthen	_	VB	VB	_	4	dep	_	_
8	all	_	DT	DT	_	10	det	_	_
9	military	_	JJ	JJ	_	10	amod	_	_
10	forces	_	NNS	NNS	_	7	dobj	_	_
11	on	_	IN	IN	_	7	prep	_	_
12	land	_	NN	NN	_	11	pobj	_	_
13	,	_	,	,	_	4	punct	_	_
14	on	_	IN	IN	_	4	prep	_	_
15	sea	_	NN	NN	_	14	pobj	_	_
16	,	_	,	,	_	14	punct	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	in	_	IN	IN	_	14	conj	_	_
19	the	_	DT	DT	_	20	det	_	_
20	air	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, manner, u / urgent)
(a / and, op, a2 / arrange-01)
(a / and, op, s / strengthen-01)
(a2 / arrange-01, ARG0, w / we)
(a2 / arrange-01, ARG1, a3 / arm)
(f / force, mod, a6 / all)
(f / force, mod, m / military)
(s / strengthen-01, ARG0, w / we)
(s / strengthen-01, ARG1, f / force)

Input(Some(Graph((obligate-01 :ARG1 we :ARG2 (and :manner urgent :op (strengthen-01 :ARG1 (force :mod all :location (and :op land :op sea :op air) :mod military) :ARG0 we) :op (arrange-01 :ARG1 arm :ARG0 we))),ArrayBuffer(Span(0,1,List(0),We,we,false), Span(16,17,List(1),and,and,false), Span(6,7,List(2),strengthen,strengthen-01,false), Span(9,10,List(3),forces,force,false), Span(7,8,List(4),all,all,false), Span(11,12,List(5),land,land,false), Span(14,15,List(6),sea,sea,false), Span(19,20,List(7),air,air,false), Span(8,9,List(8),military,military,false), Span(3,4,List(9),arrange,arrange-01,false), Span(4,5,List(10),arms,arm,false), Span(2,3,List(11),urgently,urgent,false)),Map(2 -> strengthen-01, 5 -> land, 8 -> military, 7 -> air, 1 -> and, 4 -> all, 11 -> urgent, 6 -> sea, 9 -> arrange-01, 0 -> we, 10 -> arm, 3 -> force),Map(w -> we, s2 -> sea, a3 -> arm, s -> strengthen-01, a6 -> all, m -> military, a -> and, a5 -> air, a2 -> arrange-01, u -> urgent, l -> land, f -> force))),[Ljava.lang.String;@192c3f1e,Annotation([Ljava.lang.String;@26b3fd41,[Ljava.lang.String;@7494f96a,[Ljava.lang.String;@561b6512),Annotation([Ljava.lang.String;@2e377400,[Ljava.lang.String;@1757cd72,[Ledu.cmu.lti.nlp.amr.Dependency;@445b295b),Annotation([Ljava.lang.String;@49e5f737,[Ljava.lang.String;@5c671d7f,[Ljava.lang.String;@757277dc),Annotation([Ljava.lang.String;@687e99d8,[Ljava.lang.String;@e4487af,[Ledu.cmu.lti.nlp.amr.Entity;@6aaceffd))
AMR:
(a / and, op, s2 / sea)
(a2 / arrange-01, ARG0, w / we)
(a2 / arrange-01, ARG1, a3 / arm)
(a2 / arrange-01, ARG6, a / and)
(a2 / arrange-01, manner, u / urgent)
(f / force, location, l / land)
(f / force, mod, a6 / all)
(f / force, mod, m / military)
(s / strengthen-01, ARG0, a5 / air)
(s / strengthen-01, ARG1, f / force)
(s / strengthen-01, ARG6, a3 / arm)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.2
WARNING: makeIds can't find span Id: 0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.1.2
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 487,128 microseconds
Sentence: Over thousands of years, the Chinese nation has flourished several times, but before it has never had ambition to expand its territory outward.

Oracle Span 1:  ambition => ambition
Oracle Span 2:  before => before
Oracle Span 3:  Chinese => (country :name (name :op "China"))
Oracle Span 4:  expand => expand-01
Oracle Span 5:  flourished => flourish-01
Oracle Span 6:  has => have-03
Oracle Span 7:  has => have-concession-91
Oracle Span 8:  nation => nation
Oracle Span 9:  outward => outward
Oracle Span 10:  several => several
Oracle Span 11:  territory => territory
Oracle Span 12:  years => (temporal-quantity :unit year)
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 19-20:  ambition => ambition
Span 14-15:  before => before
Span 6-7:  Chinese => (country :name (name :op "China"))
Span 21-22:  expand => expand-01
Span 9-10:  flourished => flourish-01
Span 8-9:  has => have-03
Span 16-17:  has => have-concession-91
Span 7-8:  nation => nation
Span 24-25:  outward => outward
Span 10-11:  several => several
Span 23-24:  territory => territory
Span 3-4:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 19-20:  ambition => ambition
Oracle Span 14-15:  before => before
Oracle Span 6-7:  Chinese => (country :name (name :op "China"))
Oracle Span 21-22:  expand => expand-01
Oracle Span 9-10:  flourished => flourish-01
Oracle Span 8-9:  has => have-03
Oracle Span 16-17:  has => have-concession-91
Oracle Span 7-8:  nation => nation
Oracle Span 24-25:  outward => outward
Oracle Span 10-11:  several => several
Oracle Span 23-24:  territory => territory
Oracle Span 3-4:  years => (temporal-quantity :unit year)

Dependencies:
1	Over	_	IN	IN	_	10	prep	_	_
2	thousands	_	NNS	NNS	_	1	pobj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	years	_	NNS	NNS	_	3	pobj	_	_
5	,	_	,	,	_	10	punct	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Chinese	_	JJ	JJ	_	8	amod	_	_
8	nation	_	NN	NN	_	10	nsubj	_	_
9	has	_	VBZ	VBZ	_	10	aux	_	_
10	flourished	_	VBN	VBN	_	0	root	_	_
11	several	_	JJ	JJ	_	12	amod	_	_
12	times	_	NNS	NNS	_	10	tmod	_	_
13	,	_	,	,	_	10	punct	_	_
14	but	_	CC	CC	_	10	cc	_	_
15	before	_	IN	IN	_	19	mark	_	_
16	it	_	PRP	PRP	_	19	nsubj	_	_
17	has	_	VBZ	VBZ	_	19	aux	_	_
18	never	_	RB	RB	_	19	neg	_	_
19	had	_	VBN	VBN	_	10	advcl	_	_
20	ambition	_	NN	NN	_	19	dobj	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	expand	_	VB	VB	_	19	vmod	_	_
23	its	_	PRP$	PRP$	_	25	poss	_	_
24	territory	_	NN	NN	_	25	nn	_	_
25	outward	_	NN	NN	_	22	dobj	_	_
26	.	_	.	.	_	10	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(e / expand-01, ARG0, n / nation)
(e / expand-01, ARG1, t / territory)
(e / expand-01, consist, a / ambition)
(e / expand-01, direction, o / outward)
(f / flourish-01, ARG1, n / nation)
(f / flourish-01, frequency, s2 / several)
(h / have-03, ARG0, n / nation)
(h / have-03, ARG1, a / ambition)
(h / have-03, time, b / before)
(h2 / have-concession-91, ARG1, h / have-03)
(h2 / have-concession-91, ARG2, f / flourish-01)
(n / nation, mod, c2 / country)
(n2 / name, op, "China")
(t / territory, poss, n / nation)
(t3 / temporal-quantity, unit, y / year)

Input(Some(Graph((have-concession-91 :ARG2 (flourish-01 :duration (multiple :op (temporal-quantity :unit year :quant 1000)) :frequency several :ARG1 (nation :mod (country :name (name :op "China")))) :ARG1 (have-03 :time ever :time before :ARG1 (ambition :consist-of (expand-01 :direction outward :ARG1 (territory :poss nation) :ARG0 nation)) :polarity - :ARG0 nation)),ArrayBuffer(Span(6,7,List(0, 1, 2),Chinese,(country :name (name :op "China")),false), Span(8,9,List(3),has,have-03,false), Span(14,15,List(4),before,before,false), Span(19,20,List(5),ambition,ambition,false), Span(21,22,List(6),expand,expand-01,false), Span(24,25,List(7),outward,outward,false), Span(23,24,List(8),territory,territory,false), Span(9,10,List(9),flourished,flourish-01,false), Span(3,4,List(10, 11),years,(temporal-quantity :unit year),false), Span(10,11,List(12),several,several,false), Span(7,8,List(13),nation,nation,false), Span(16,17,List(14),has,have-concession-91,false)),Map(2 -> "China", 5 -> ambition, 12 -> several, 8 -> territory, 7 -> outward, 1 -> name, 4 -> before, 11 -> year, 14 -> have-concession-91, 6 -> expand-01, 9 -> flourish-01, 0 -> country, 10 -> temporal-quantity, 3 -> have-03, 13 -> nation),Map(e -> expand-01, n -> nation, h -> have-03, h2 -> have-concession-91, s2 -> several, t -> territory, b -> before, t3 -> temporal-quantity, y -> year, a -> ambition, f -> flourish-01, o -> outward, n2 -> name, c2 -> country))),[Ljava.lang.String;@c86b9e3,Annotation([Ljava.lang.String;@10aa41f2,[Ljava.lang.String;@3af9c5b7,[Ljava.lang.String;@37271612),Annotation([Ljava.lang.String;@ed7f8b4,[Ljava.lang.String;@4c309d4d,[Ledu.cmu.lti.nlp.amr.Dependency;@38102d01),Annotation([Ljava.lang.String;@37883b97,[Ljava.lang.String;@6ab778a,[Ljava.lang.String;@4e3958e7),Annotation([Ljava.lang.String;@77f80c04,[Ljava.lang.String;@1dac5ef,[Ledu.cmu.lti.nlp.amr.Entity;@5c90e579))
AMR:
(b / before, op, a / ambition)
(c2 / country, name, n2 / name)
(e / expand-01, ARG0, t3 / temporal-quantity)
(e / expand-01, ARG1, o / outward)
(f / flourish-01, ARG1, n / nation)
(f / flourish-01, ARG6, s2 / several)
(f / flourish-01, time, b / before)
(h / have-03, ARG2, f / flourish-01)
(h2 / have-concession-91, ARG1, f / flourish-01)
(n / nation, mod, c2 / country)
(n2 / name, op, "China")
(o / outward, mod, t / territory)
(o / outward, poss, a / ambition)
(t3 / temporal-quantity, unit, y / year)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 606,056 microseconds
Sentence: Not imposing on others what we don't want ourselves, what we follow is a foreign security strategic philosophy which applies benevolence and virtue.

Oracle Span 1:  and => and
Oracle Span 2:  applies => apply-02
Oracle Span 3:  benevolence => benevolence
Oracle Span 4:  follow => follow-02
Oracle Span 5:  foreign => foreign
Oracle Span 6:  imposing => impose-01
Oracle Span 7:  others => (person :mod other)
Oracle Span 8:  philosophy => philosophy
Oracle Span 9:  security => security
Oracle Span 10:  strategic => strategy
Oracle Span 11:  virtue => virtue
Oracle Span 12:  want => (thing :ARG1-of want-01)
Oracle Span 13:  we => we
Spans:
Span 23-24:  and => and
Span 21-22:  applies => apply-02
Span 22-23:  benevolence => benevolence
Span 13-14:  follow => follow-02
Span 16-17:  foreign => foreign
Span 1-2:  imposing => impose-01
Span 3-4:  others => (person :mod other)
Span 19-20:  philosophy => philosophy
Span 17-18:  security => security
Span 18-19:  strategic => strategy
Span 24-25:  virtue => virtue
Span 8-9:  want => (thing :ARG1-of want-01)
Span 5-6:  we => we

Langrangian relaxation converged after 60 iterations. Delta = 0.0
Oracle Span 23-24:  and => and
Oracle Span 21-22:  applies => apply-02
Oracle Span 22-23:  benevolence => benevolence
Oracle Span 13-14:  follow => follow-02
Oracle Span 16-17:  foreign => foreign
Oracle Span 1-2:  imposing => impose-01
Oracle Span 3-4:  others => (person :mod other)
Oracle Span 19-20:  philosophy => philosophy
Oracle Span 17-18:  security => security
Oracle Span 18-19:  strategic => strategy
Oracle Span 24-25:  virtue => virtue
Oracle Span 8-9:  want => (thing :ARG1-of want-01)
Oracle Span 5-6:  we => we

Dependencies:
1	Not	_	RB	RB	_	20	neg	_	_
2	imposing	_	VBG	VBG	_	20	csubj	_	_
3	on	_	IN	IN	_	2	prep	_	_
4	others	_	NNS	NNS	_	3	pobj	_	_
5	what	_	WP	WP	_	9	dobj	_	_
6	we	_	PRP	PRP	_	9	nsubj	_	_
7	do	_	VBP	VBP	_	9	aux	_	_
8	n't	_	RB	RB	_	9	neg	_	_
9	want	_	VB	VB	_	4	rcmod	_	_
10	ourselves	_	PRP	PRP	_	9	dobj	_	_
11	,	_	,	,	_	2	punct	_	_
12	what	_	WP	WP	_	14	dobj	_	_
13	we	_	PRP	PRP	_	14	nsubj	_	_
14	follow	_	VBP	VBP	_	2	ccomp	_	_
15	is	_	VBZ	VBZ	_	20	cop	_	_
16	a	_	DT	DT	_	20	det	_	_
17	foreign	_	JJ	JJ	_	20	amod	_	_
18	security	_	NN	NN	_	20	nn	_	_
19	strategic	_	JJ	JJ	_	20	amod	_	_
20	philosophy	_	NN	NN	_	0	root	_	_
21	which	_	WDT	WDT	_	22	nsubj	_	_
22	applies	_	VBZ	VBZ	_	20	rcmod	_	_
23	benevolence	_	NN	NN	_	22	dobj	_	_
24	and	_	CC	CC	_	23	cc	_	_
25	virtue	_	NN	NN	_	23	conj	_	_
26	.	_	.	.	_	20	punct	_	_

Oracle:
(a / apply-02, ARG0, p / philosophy)
(a / apply-02, ARG1, a2 / and)
(a2 / and, op, b / benevolence)
(a2 / and, op, v / virtue)
(f / follow-02, ARG0, w / we)
(f / follow-02, ARG1, p / philosophy)
(i / impose-01, ARG0, w / we)
(i / impose-01, ARG1, t / thing)
(i / impose-01, ARG2, p2 / person)
(p / philosophy, mod, s / strategy)
(p / philosophy, mod, s2 / security)
(p2 / person, mod, o / other)
(s2 / security, mod, f2 / foreign)
(w2 / want-01, ARG0, w / we)
(w2 / want-01, ARG1, t / thing)

Input(Some(Graph((cause-01 :ARG0 (impose-01 :ARG2 (person :mod other) :ARG1 (thing :ARG1-of (want-01 :polarity - :ARG0 we)) :polarity - :ARG0 we) :ARG1 (follow-02 :ARG1 (philosophy :ARG0-of (apply-02 :ARG1 (and :op virtue :op benevolence)) :mod (security :mod foreign) :mod strategy) :ARG0 we)),ArrayBuffer(Span(1,2,List(0),imposing,impose-01,false), Span(3,4,List(1, 2),others,(person :mod other),false), Span(8,9,List(3, 4),want,(thing :ARG1-of want-01),false), Span(13,14,List(5),follow,follow-02,false), Span(19,20,List(6),philosophy,philosophy,false), Span(21,22,List(7),applies,apply-02,false), Span(23,24,List(8),and,and,false), Span(24,25,List(9),virtue,virtue,false), Span(22,23,List(10),benevolence,benevolence,false), Span(17,18,List(11),security,security,false), Span(16,17,List(12),foreign,foreign,false), Span(5,6,List(13),we,we,false), Span(18,19,List(14),strategic,strategy,false)),Map(2 -> other, 5 -> follow-02, 12 -> foreign, 8 -> and, 7 -> apply-02, 1 -> person, 4 -> want-01, 11 -> security, 14 -> strategy, 6 -> philosophy, 9 -> virtue, 0 -> impose-01, 10 -> benevolence, 3 -> thing, 13 -> we),Map(w -> we, s2 -> security, b -> benevolence, t -> thing, p2 -> person, s -> strategy, v -> virtue, p -> philosophy, a -> apply-02, w2 -> want-01, a2 -> and, i -> impose-01, f2 -> foreign, f -> follow-02, o -> other))),[Ljava.lang.String;@58ea606c,Annotation([Ljava.lang.String;@6f45df59,[Ljava.lang.String;@38e79ae3,[Ljava.lang.String;@63070bab),Annotation([Ljava.lang.String;@68e5eea7,[Ljava.lang.String;@291b4bf5,[Ledu.cmu.lti.nlp.amr.Dependency;@2d2ffcb7),Annotation([Ljava.lang.String;@762ef0ea,[Ljava.lang.String;@31f9b85e,[Ljava.lang.String;@424e1977),Annotation([Ljava.lang.String;@10d68fcd,[Ljava.lang.String;@117e949d,[Ledu.cmu.lti.nlp.amr.Entity;@6db9f5a4))
AMR:
(a / apply-02, ARG0, p / philosophy)
(a / apply-02, ARG1, a2 / and)
(a / apply-02, ARG2, b / benevolence)
(a2 / and, op, v / virtue)
(f / follow-02, ARG1, p / philosophy)
(i / impose-01, ARG0, p2 / person)
(i / impose-01, ARG1, f / follow-02)
(p / philosophy, mod, s / strategy)
(p / philosophy, mod, s2 / security)
(p2 / person, mod, o / other)
(s2 / security, mod, f2 / foreign)
(w2 / want-01, ARG0, p2 / person)
(w2 / want-01, ARG1, t / thing)
(w2 / want-01, ARG6, w / we)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
Decoded in 953,077 microseconds
Sentence: The tolerance and liberalness of a country are like those of an individual - we avoid hurting others, but must insist on not being hurt ourselves.

Oracle Span 1:  and => and
Oracle Span 2:  avoid => avoid-01
Oracle Span 3:  country => country
Oracle Span 4:  hurt => hurt-01
Oracle Span 5:  hurting => hurt-01
Oracle Span 6:  individual => individual
Oracle Span 7:  insist => insist-01
Oracle Span 8:  liberalness => liberalness
Oracle Span 9:  others => (person :mod other)
Oracle Span 10:  tolerance => tolerance
Oracle Span 11:  we => we
Spans:
Span 2-3:  and => and
Span 15-16:  avoid => avoid-01
Span 6-7:  country => country
Span 25-26:  hurt => hurt-01
Span 16-17:  hurting => hurt-01
Span 12-13:  individual => individual
Span 21-22:  insist => insist-01
Span 3-4:  liberalness => liberalness
Span 17-18:  others => (person :mod other)
Span 1-2:  tolerance => tolerance
Span 14-15:  we => we

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 2-3:  and => and
Oracle Span 15-16:  avoid => avoid-01
Oracle Span 6-7:  country => country
Oracle Span 25-26:  hurt => hurt-01
Oracle Span 16-17:  hurting => hurt-01
Oracle Span 12-13:  individual => individual
Oracle Span 21-22:  insist => insist-01
Oracle Span 3-4:  liberalness => liberalness
Oracle Span 17-18:  others => (person :mod other)
Oracle Span 1-2:  tolerance => tolerance
Oracle Span 14-15:  we => we

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	tolerance	_	NN	NN	_	8	nsubj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	liberalness	_	NNS	NNS	_	2	conj	_	_
5	of	_	IN	IN	_	2	prep	_	_
6	a	_	DT	DT	_	7	det	_	_
7	country	_	NN	NN	_	5	pobj	_	_
8	are	_	VBP	VBP	_	0	root	_	_
9	like	_	IN	IN	_	8	prep	_	_
10	those	_	DT	DT	_	9	pobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	an	_	DT	DT	_	13	det	_	_
13	individual	_	NN	NN	_	11	pobj	_	_
14	-	_	:	:	_	8	punct	_	_
15	we	_	PRP	PRP	_	16	nsubj	_	_
16	avoid	_	VBP	VBP	_	8	parataxis	_	_
17	hurting	_	VBG	VBG	_	16	xcomp	_	_
18	others	_	NNS	NNS	_	17	dobj	_	_
19	,	_	,	,	_	16	punct	_	_
20	but	_	CC	CC	_	16	cc	_	_
21	must	_	MD	MD	_	22	aux	_	_
22	insist	_	VB	VB	_	16	conj	_	_
23	on	_	IN	IN	_	22	prep	_	_
24	not	_	RB	RB	_	26	neg	_	_
25	being	_	VBG	VBG	_	26	auxpass	_	_
26	hurt	_	VBN	VBN	_	23	pcomp	_	_
27	ourselves	_	PRP	PRP	_	26	dobj	_	_
28	.	_	.	.	_	8	punct	_	_

Oracle:
(a / and, op, l / liberalness)
(a / and, op, t / tolerance)
(a / and, poss, c / country)
(a2 / avoid-01, ARG0, w / we)
(a2 / avoid-01, ARG1, h / hurt-01)
(h / hurt-01, ARG0, w / we)
(h / hurt-01, ARG1, p / person)
(h2 / hurt-01, ARG1, w / we)
(i2 / insist-01, ARG0, w / we)
(i2 / insist-01, ARG1, h2 / hurt-01)
(p / person, mod, o / other)

Input(Some(Graph((resemble-01 :ARG1 (and :poss country :op liberalness :op tolerance) :ARG2 (and :poss individual :op tolerance :op liberalness) :ARG0-of (mean-01 :ARG1 (have-concession-91 :ARG1 (obligate-01 :ARG2 (insist-01 :ARG1 (hurt-01 :polarity - :ARG1 we) :ARG0 we)) :ARG2 (avoid-01 :ARG1 (hurt-01 :ARG1 (person :mod other) :ARG0 we) :ARG0 we)))),ArrayBuffer(Span(2,3,List(0),and,and,false), Span(6,7,List(1),country,country,false), Span(3,4,List(2),liberalness,liberalness,false), Span(1,2,List(3),tolerance,tolerance,false), Span(12,13,List(4),individual,individual,false), Span(21,22,List(5),insist,insist-01,false), Span(16,17,List(6),hurting,hurt-01,false), Span(14,15,List(7),we,we,false), Span(15,16,List(8),avoid,avoid-01,false), Span(25,26,List(9),hurt,hurt-01,false), Span(17,18,List(10, 11),others,(person :mod other),false)),Map(2 -> liberalness, 5 -> insist-01, 8 -> avoid-01, 7 -> we, 1 -> country, 4 -> individual, 11 -> other, 6 -> hurt-01, 9 -> hurt-01, 0 -> and, 10 -> person, 3 -> tolerance),Map(w -> we, h -> hurt-01, h2 -> hurt-01, t -> tolerance, p -> person, a -> and, i2 -> insist-01, a2 -> avoid-01, i -> individual, c -> country, l -> liberalness, o -> other))),[Ljava.lang.String;@5f8edcc5,Annotation([Ljava.lang.String;@7b02881e,[Ljava.lang.String;@1ebd319f,[Ljava.lang.String;@3c0be339),Annotation([Ljava.lang.String;@15ca7889,[Ljava.lang.String;@7a675056,[Ledu.cmu.lti.nlp.amr.Dependency;@d21a74c),Annotation([Ljava.lang.String;@6e509ffa,[Ljava.lang.String;@2898ac89,[Ljava.lang.String;@683dbc2c),Annotation([Ljava.lang.String;@68267da0,[Ljava.lang.String;@2638011,[Ledu.cmu.lti.nlp.amr.Entity;@6ff29830))
AMR:
(a / and, location, c / country)
(a / and, op, l / liberalness)
(a / and, op, t / tolerance)
(a2 / avoid-01, ARG0, w / we)
(a2 / avoid-01, ARG1, h2 / hurt-01)
(h / hurt-01, ARG1, l / liberalness)
(h2 / hurt-01, ARG1, p / person)
(i2 / insist-01, ARG1, w / we)
(i2 / insist-01, ARG2, h / hurt-01)
(l / liberalness, location, i / individual)
(p / person, mod, o / other)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.0
Decoded in 454,171 microseconds
Sentence: Tolerance is certainly not fear, and sincerity does not have to be cowardice.

Oracle Span 1:  and => and
Oracle Span 2:  certainly => certain
Oracle Span 3:  cowardice => cowardice
Oracle Span 4:  fear => fear
Oracle Span 5:  sincerity => sincerity
Oracle Span 6:  Tolerance => tolerance
Spans:
Span 6-7:  and => and
Span 2-3:  certainly => certain
Span 13-14:  cowardice => cowardice
Span 4-5:  fear => fear
Span 7-8:  sincerity => sincerity
Span 0-1:  Tolerance => tolerance

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 2-3:  certainly => certain
Oracle Span 13-14:  cowardice => cowardice
Oracle Span 4-5:  fear => fear
Oracle Span 7-8:  sincerity => sincerity
Oracle Span 0-1:  Tolerance => tolerance

Dependencies:
1	Tolerance	_	NNP	NNP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	certainly	_	RB	RB	_	4	advmod	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	fear	_	NN	NN	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	and	_	CC	CC	_	5	cc	_	_
8	sincerity	_	NN	NN	_	11	nsubj	_	_
9	does	_	VBZ	VBZ	_	11	aux	_	_
10	not	_	RB	RB	_	11	neg	_	_
11	have	_	VB	VB	_	5	conj	_	_
12	to	_	TO	TO	_	14	aux	_	_
13	be	_	VB	VB	_	14	cop	_	_
14	cowardice	_	JJ	JJ	_	11	xcomp	_	_
15	.	_	.	.	_	5	punct	_	_

Oracle:
(a / and, op, f / fear)
(c2 / cowardice, domain, s / sincerity)
(f / fear, domain, t / tolerance)
(f / fear, manner, c / certain)

Input(Some(Graph((and :op (obligate-01 :polarity - :ARG2 (cowardice :domain sincerity)) :op (fear :domain tolerance :manner certain :polarity -)),ArrayBuffer(Span(6,7,List(0),and,and,false), Span(13,14,List(1),cowardice,cowardice,false), Span(7,8,List(2),sincerity,sincerity,false), Span(4,5,List(3),fear,fear,false), Span(0,1,List(4),Tolerance,tolerance,false), Span(2,3,List(5),certainly,certain,false)),Map(2 -> sincerity, 5 -> certain, 1 -> cowardice, 4 -> tolerance, 0 -> and, 3 -> fear),Map(t -> tolerance, s -> sincerity, a -> and, c -> certain, f -> fear, c2 -> cowardice))),[Ljava.lang.String;@6a2b953e,Annotation([Ljava.lang.String;@313b2ea6,[Ljava.lang.String;@2f465398,[Ljava.lang.String;@548e6d58),Annotation([Ljava.lang.String;@623a8092,[Ljava.lang.String;@a1cdc6d,[Ledu.cmu.lti.nlp.amr.Dependency;@175b9425),Annotation([Ljava.lang.String;@3098cf3b,[Ljava.lang.String;@610f7aa,[Ljava.lang.String;@6a03bcb1),Annotation([Ljava.lang.String;@21b2e768,[Ljava.lang.String;@57250572,[Ledu.cmu.lti.nlp.amr.Entity;@5609159b))
AMR:
(a / and, op, f / fear)
(a / and, op, s / sincerity)
(a / and, op, t / tolerance)
(c / certain, calendar, f / fear)
(c2 / cowardice, poss, s / sincerity)

WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 36,042 microseconds
Sentence: China exempting Japan from war reparations for World War II was in service of peace, benevolent peace.

Oracle Span 1:  benevolent => benevolence
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  exempting => exempt-01
Oracle Span 4:  Japan => (country :name (name :op "Japan"))
Oracle Span 5:  peace => peace
Oracle Span 6:  reparations => repair-01
Oracle Span 7:  service => serve-01
Oracle Span 8:  war => war
Oracle Span 9:  World War II => (war :name (name :op "II" :op "War" :op "World"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (thing :name (name :op "World" :op "War" :op "II"))
Spans:
Span 16-17:  benevolent => benevolence
Span 0-1:  China => (country :name (name :op "China"))
Span 1-2:  exempting => exempt-01
Span 2-3:  Japan => (country :name (name :op "Japan"))
Span 14-15:  peace => peace
Span 5-6:  reparations => repair-01
Span 12-13:  service => serve-01
Span 4-5:  war => war
Span 7-10:  World War II => (war :name (name :op "II" :op "War" :op "World"))

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 16-17:  benevolent => benevolence
Oracle Span 0-1:  China => (country :name (name :op "China"))
Oracle Span 1-2:  exempting => exempt-01
Oracle Span 2-3:  Japan => (country :name (name :op "Japan"))
Oracle Span 14-15:  peace => peace
Oracle Span 5-6:  reparations => repair-01
Oracle Span 12-13:  service => serve-01
Oracle Span 4-5:  war => war
Oracle Span 7-10:  World War II => (war :name (name :op "II" :op "War" :op "World"))

Dependencies:
1	China	_	NNP	NNP	_	3	nn	_	_
2	exempting	_	NNP	NNP	_	3	nn	_	_
3	Japan	_	NNP	NNP	_	11	nsubj	_	_
4	from	_	IN	IN	_	3	prep	_	_
5	war	_	NN	NN	_	6	nn	_	_
6	reparations	_	NNS	NNS	_	4	pobj	_	_
7	for	_	IN	IN	_	6	prep	_	_
8	World	_	NNP	NNP	_	10	nn	_	_
9	War	_	NNP	NNP	_	10	nn	_	_
10	II	_	NNP	NNP	_	7	pobj	_	_
11	was	_	VBD	VBD	_	0	root	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	service	_	NN	NN	_	12	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	peace	_	NN	NN	_	14	pobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	benevolent	_	JJ	JJ	_	18	amod	_	_
18	peace	_	NN	NN	_	15	appos	_	_
19	.	_	.	.	_	11	punct	_	_

Oracle:
(c / country, name, n / name)
(c3 / country, name, n2 / name)
(e / exempt-01, ARG0, c / country)
(e / exempt-01, ARG1, c3 / country)
(e / exempt-01, ARG2, r / repair-01)
(n / name, op, "China")
(n2 / name, op, "Japan")
(n3 / name, op, "II")
(n3 / name, op, "War")
(n3 / name, op, "World")
(p / peace, mod, b / benevolence)
(r / repair-01, ARG0, c3 / country)
(r / repair-01, mod, w / war)
(s / serve-01, ARG0, e / exempt-01)
(s / serve-01, ARG2, p / peace)
(w2 / war, name, n3 / name)

Input(Some(Graph((serve-01 :ARG2 (peace :mod benevolence) :ARG0 (exempt-01 :ARG2 (repair-01 :ARG1-of (cause-01 :ARG0 (war :name (name :op "II" :op "War" :op "World"))) :mod war :ARG0 country) :ARG1 (country :name (name :op "Japan")) :ARG0 (country :name (name :op "China")))),ArrayBuffer(Span(0,1,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(2,3,List(3, 4, 5),Japan,(country :name (name :op "Japan")),false), Span(7,10,List(6, 7, 8, 9, 10),World War II,(war :name (name :op "II" :op "War" :op "World")),false), Span(1,2,List(11),exempting,exempt-01,false), Span(4,5,List(12),war,war,false), Span(14,15,List(13),peace,peace,false), Span(12,13,List(14),service,serve-01,false), Span(16,17,List(15),benevolent,benevolence,false), Span(5,6,List(16),reparations,repair-01,false)),Map(2 -> "China", 5 -> "Japan", 12 -> war, 15 -> benevolence, 8 -> "II", 7 -> name, 1 -> name, 4 -> name, 11 -> exempt-01, 14 -> serve-01, 6 -> war, 9 -> "War", 0 -> country, 16 -> repair-01, 10 -> "World", 3 -> country, 13 -> peace),Map(e -> exempt-01, w -> war, n -> name, b -> benevolence, s -> serve-01, p -> peace, n3 -> name, c3 -> country, w2 -> war, r -> repair-01, c -> country, n2 -> name))),[Ljava.lang.String;@2118cddf,Annotation([Ljava.lang.String;@17a7f733,[Ljava.lang.String;@68567e20,[Ljava.lang.String;@76ed1b7c),Annotation([Ljava.lang.String;@11fc564b,[Ljava.lang.String;@394a2528,[Ledu.cmu.lti.nlp.amr.Dependency;@6236eb5f),Annotation([Ljava.lang.String;@7c1e2a9e,[Ljava.lang.String;@fa36558,[Ljava.lang.String;@672872e1),Annotation([Ljava.lang.String;@32910148,[Ljava.lang.String;@3f56875e,[Ledu.cmu.lti.nlp.amr.Entity;@2b4bac49))
AMR:
(c / country, name, n / name)
(c3 / country, name, n2 / name)
(e / exempt-01, ARG0, c3 / country)
(e / exempt-01, ARG1, c / country)
(n / name, op, "China")
(n2 / name, op, "Japan")
(n3 / name, op, "II")
(n3 / name, op, "War")
(n3 / name, op, "World")
(r / repair-01, ARG0, b / benevolence)
(r / repair-01, ARG1, w2 / war)
(r / repair-01, condition, s / serve-01)
(r / repair-01, mod, w / war)
(s / serve-01, ARG0, c3 / country)
(s / serve-01, ARG1, p / peace)
(w2 / war, name, n3 / name)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.2
Decoded in 429,929 microseconds
Sentence: My fellow citizens, the People's Heroes Monument is a condensed history of the Chinese nation striving for continuous self-improvement

Oracle Span 1:  Chinese => (country :name (name :op "China"))
Oracle Span 2:  citizens => citizen
Oracle Span 3:  condensed => condense-01
Oracle Span 4:  continuous => continue-01
Oracle Span 5:  fellow => fellow
Oracle Span 6:  history => history
Oracle Span 7:  improvement => improve-01
Oracle Span 8:  nation => nation
Oracle Span 9:  People 's Heroes Monument => (facility :name (name :op "Monument" :op "Heroes" :op "People's"))
Oracle Span 10:  striving => strive-01
NER Entity: (organization :name (name :op "People" :op "'s" :op "Heroes" :op "Monument"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 15-16:  Chinese => (country :name (name :op "China"))
Span 2-3:  citizens => citizen
Span 11-12:  condensed => condense-01
Span 19-20:  continuous => continue-01
Span 1-2:  fellow => fellow
Span 12-13:  history => history
Span 22-23:  improvement => improve-01
Span 16-17:  nation => nation
Span 5-9:  People 's Heroes Monument => (facility :name (name :op "Monument" :op "Heroes" :op "People's"))
Span 17-18:  striving => strive-01

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Oracle Span 15-16:  Chinese => (country :name (name :op "China"))
Oracle Span 2-3:  citizens => citizen
Oracle Span 11-12:  condensed => condense-01
Oracle Span 19-20:  continuous => continue-01
Oracle Span 1-2:  fellow => fellow
Oracle Span 12-13:  history => history
Oracle Span 22-23:  improvement => improve-01
Oracle Span 16-17:  nation => nation
Oracle Span 5-9:  People 's Heroes Monument => (facility :name (name :op "Monument" :op "Heroes" :op "People's"))
Oracle Span 17-18:  striving => strive-01

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	13	nsubj	_	_
4	,	_	,	,	_	3	punct	_	_
5	the	_	DT	DT	_	6	det	_	_
6	People	_	NNS	NNS	_	9	poss	_	_
7	's	_	POS	POS	_	6	possessive	_	_
8	Heroes	_	NNP	NNP	_	9	nn	_	_
9	Monument	_	NNP	NNP	_	3	appos	_	_
10	is	_	VBZ	VBZ	_	13	cop	_	_
11	a	_	DT	DT	_	13	det	_	_
12	condensed	_	JJ	JJ	_	13	amod	_	_
13	history	_	NN	NN	_	0	root	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Chinese	_	JJ	JJ	_	17	amod	_	_
17	nation	_	NN	NN	_	14	pobj	_	_
18	striving	_	VBG	VBG	_	17	vmod	_	_
19	for	_	IN	IN	_	18	prep	_	_
20	continuous	_	JJ	JJ	_	21	amod	_	_
21	self-improvement	_	NN	NN	_	19	pobj	_	_

Oracle:
(c / citizen, mod, f / fellow)
(c2 / condense-01, ARG1, h / history)
(c3 / country, name, n2 / name)
(c4 / continue-01, ARG1, i2 / improve-01)
(f2 / facility, name, n3 / name)
(h / history, domain, f2 / facility)
(h / history, topic, n / nation)
(i2 / improve-01, ARG1, n / nation)
(n / nation, mod, c3 / country)
(n2 / name, op, "China")
(n3 / name, op, "Heroes")
(n3 / name, op, "Monument")
(n3 / name, op, "People's")
(s2 / strive-01, ARG0, n / nation)
(s2 / strive-01, ARG1, i2 / improve-01)

Input(Some(Graph((say-01 :ARG1 (history :domain (facility :name (name :op "Monument" :op "Heroes" :op "People's")) :topic (nation :ARG0-of (strive-01 :ARG1 (improve-01 :ARG1-of continue-01 :ARG1 nation)) :mod (country :name (name :op "China"))) :ARG1-of condense-01) :ARG2 (citizen :poss i :mod fellow) :ARG0 i),ArrayBuffer(Span(5,9,List(0, 1, 2, 3, 4),People 's Heroes Monument,(facility :name (name :op "Monument" :op "Heroes" :op "People's")),false), Span(15,16,List(5, 6, 7),Chinese,(country :name (name :op "China")),false), Span(12,13,List(8),history,history,false), Span(16,17,List(9),nation,nation,false), Span(17,18,List(10),striving,strive-01,false), Span(11,12,List(11),condensed,condense-01,false), Span(2,3,List(12),citizens,citizen,false), Span(1,2,List(13),fellow,fellow,false), Span(22,23,List(14),improvement,improve-01,false), Span(19,20,List(15),continuous,continue-01,false)),Map(2 -> "Monument", 5 -> country, 12 -> citizen, 15 -> continue-01, 8 -> history, 7 -> "China", 1 -> name, 4 -> "People's", 11 -> condense-01, 14 -> improve-01, 6 -> name, 9 -> nation, 0 -> facility, 10 -> strive-01, 3 -> "Heroes", 13 -> fellow),Map(n -> nation, h -> history, s2 -> strive-01, c4 -> continue-01, c3 -> country, n3 -> name, i2 -> improve-01, c -> citizen, f2 -> facility, f -> fellow, c2 -> condense-01, n2 -> name))),[Ljava.lang.String;@fd07cbb,Annotation([Ljava.lang.String;@3571b748,[Ljava.lang.String;@3e96bacf,[Ljava.lang.String;@484970b0),Annotation([Ljava.lang.String;@4470f8a6,[Ljava.lang.String;@7c83dc97,[Ledu.cmu.lti.nlp.amr.Dependency;@7748410a),Annotation([Ljava.lang.String;@740773a3,[Ljava.lang.String;@37f1104d,[Ljava.lang.String;@55740540),Annotation([Ljava.lang.String;@60015ef5,[Ljava.lang.String;@2f54a33d,[Ledu.cmu.lti.nlp.amr.Entity;@1018bde2))
AMR:
(c / citizen, mod, f / fellow)
(c2 / condense-01, ARG1, c / citizen)
(c3 / country, name, n2 / name)
(c4 / continue-01, ARG0, i2 / improve-01)
(c4 / continue-01, ARG1, f2 / facility)
(f2 / facility, name, n3 / name)
(h / history, mod, c2 / condense-01)
(i2 / improve-01, ARG1, f / fellow)
(n / nation, mod, c3 / country)
(n2 / name, op, "China")
(n3 / name, op, "Heroes")
(n3 / name, op, "Monument")
(n3 / name, op, "People's")
(s2 / strive-01, ARG1, n / nation)
(s2 / strive-01, ARG2, i2 / improve-01)

WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.2
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
Decoded in 554,622 microseconds
Sentence: The solemn and magnificent posture represents a sacred expectation for peace.

Oracle Span 1:  expectation => expect-01
Oracle Span 2:  magnificent => magnificent
Oracle Span 3:  peace => peace
Oracle Span 4:  posture => posture
Oracle Span 5:  represents => represent-01
Oracle Span 6:  sacred => sacred
Oracle Span 7:  solemn => solemn
Spans:
Span 8-9:  expectation => expect-01
Span 3-4:  magnificent => magnificent
Span 10-11:  peace => peace
Span 4-5:  posture => posture
Span 5-6:  represents => represent-01
Span 7-8:  sacred => sacred
Span 1-2:  solemn => solemn

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Oracle Span 8-9:  expectation => expect-01
Oracle Span 3-4:  magnificent => magnificent
Oracle Span 10-11:  peace => peace
Oracle Span 4-5:  posture => posture
Oracle Span 5-6:  represents => represent-01
Oracle Span 7-8:  sacred => sacred
Oracle Span 1-2:  solemn => solemn

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	solemn	_	NN	NN	_	6	nsubj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	magnificent	_	JJ	JJ	_	5	amod	_	_
5	posture	_	NN	NN	_	2	conj	_	_
6	represents	_	VBZ	VBZ	_	0	root	_	_
7	a	_	DT	DT	_	9	det	_	_
8	sacred	_	JJ	JJ	_	9	amod	_	_
9	expectation	_	NN	NN	_	6	dobj	_	_
10	for	_	IN	IN	_	9	prep	_	_
11	peace	_	NN	NN	_	10	pobj	_	_
12	.	_	.	.	_	6	punct	_	_

Oracle:
(e / expect-01, ARG1, p2 / peace)
(e / expect-01, mod, s2 / sacred)
(p / posture, mod, m / magnificent)
(p / posture, mod, s / solemn)
(r / represent-01, ARG0, p / posture)
(r / represent-01, ARG1, e / expect-01)

Input(Some(Graph((represent-01 :ARG1 (expect-01 :mod sacred :ARG1 peace) :ARG0 (posture :mod magnificent :mod solemn)),ArrayBuffer(Span(5,6,List(0),represents,represent-01,false), Span(10,11,List(1),peace,peace,false), Span(7,8,List(2),sacred,sacred,false), Span(4,5,List(3),posture,posture,false), Span(3,4,List(4),magnificent,magnificent,false), Span(1,2,List(5),solemn,solemn,false), Span(8,9,List(6),expectation,expect-01,false)),Map(2 -> sacred, 5 -> solemn, 1 -> peace, 4 -> magnificent, 6 -> expect-01, 0 -> represent-01, 3 -> posture),Map(e -> expect-01, s2 -> sacred, p2 -> peace, s -> solemn, m -> magnificent, p -> posture, r -> represent-01))),[Ljava.lang.String;@65b3f4a4,Annotation([Ljava.lang.String;@f2ff811,[Ljava.lang.String;@568ff82,[Ljava.lang.String;@50caa560),Annotation([Ljava.lang.String;@2a266d09,[Ljava.lang.String;@5ab9e72c,[Ledu.cmu.lti.nlp.amr.Dependency;@186f8716),Annotation([Ljava.lang.String;@1d8bd0de,[Ljava.lang.String;@45ca843,[Ljava.lang.String;@11c9af63),Annotation([Ljava.lang.String;@757acd7b,[Ljava.lang.String;@36b4fe2a,[Ledu.cmu.lti.nlp.amr.Entity;@574b560f))
AMR:
(e / expect-01, ARG0, s / solemn)
(e / expect-01, ARG1, p2 / peace)
(e / expect-01, mod, s2 / sacred)
(p / posture, mod, m / magnificent)
(r / represent-01, ARG0, p / posture)
(r / represent-01, ARG1, e / expect-01)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 90,981 microseconds
Sentence: The thought-strings of my memory have been agitated from time to time - many heroic, stirring, and tragic scenes of shining spears and armored horses spring up in my mind.

Oracle Span 1:  agitated => agitate-01
Oracle Span 2:  and => and
Oracle Span 3:  armored => armor-01
Oracle Span 4:  heroic => heroic
Oracle Span 5:  horses => horse
Oracle Span 6:  many => many
Oracle Span 7:  memory => memory
Oracle Span 8:  mind => mind
Oracle Span 9:  scenes => scene
Oracle Span 10:  shining => shine-01
Oracle Span 11:  spears => spear
Oracle Span 12:  spring => spring-02
Oracle Span 13:  stirring => stir-02
Oracle Span 14:  strings => string
Oracle Span 15:  thought => (thing :ARG1-of think-01)
Oracle Span 16:  tragic => tragic
Spans:
Span 9-10:  agitated => agitate-01
Span 20-21:  and => and
Span 27-28:  armored => armor-01
Span 16-17:  heroic => heroic
Span 28-29:  horses => horse
Span 15-16:  many => many
Span 6-7:  memory => memory
Span 33-34:  mind => mind
Span 22-23:  scenes => scene
Span 24-25:  shining => shine-01
Span 25-26:  spears => spear
Span 29-30:  spring => spring-02
Span 18-19:  stirring => stir-02
Span 3-4:  strings => string
Span 1-2:  thought => (thing :ARG1-of think-01)
Span 21-22:  tragic => tragic

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 9-10:  agitated => agitate-01
Oracle Span 20-21:  and => and
Oracle Span 27-28:  armored => armor-01
Oracle Span 16-17:  heroic => heroic
Oracle Span 28-29:  horses => horse
Oracle Span 15-16:  many => many
Oracle Span 6-7:  memory => memory
Oracle Span 33-34:  mind => mind
Oracle Span 22-23:  scenes => scene
Oracle Span 24-25:  shining => shine-01
Oracle Span 25-26:  spears => spear
Oracle Span 29-30:  spring => spring-02
Oracle Span 18-19:  stirring => stir-02
Oracle Span 3-4:  strings => string
Oracle Span 1-2:  thought => (thing :ARG1-of think-01)
Oracle Span 21-22:  tragic => tragic

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	thought-strings	_	NNS	NNS	_	8	nsubjpass	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	my	_	PRP$	PRP$	_	5	poss	_	_
5	memory	_	NN	NN	_	3	pobj	_	_
6	have	_	VBP	VBP	_	8	aux	_	_
7	been	_	VBN	VBN	_	8	auxpass	_	_
8	agitated	_	VBN	VBN	_	0	root	_	_
9	from	_	IN	IN	_	8	prep	_	_
10	time	_	NN	NN	_	9	pobj	_	_
11	to	_	TO	TO	_	8	prep	_	_
12	time	_	NN	NN	_	11	pobj	_	_
13	-	_	:	:	_	8	punct	_	_
14	many	_	JJ	JJ	_	15	amod	_	_
15	heroic	_	NNS	NNS	_	8	dobj	_	_
16	,	_	,	,	_	15	punct	_	_
17	stirring	_	VBG	VBG	_	15	conj	_	_
18	,	_	,	,	_	15	punct	_	_
19	and	_	CC	CC	_	15	cc	_	_
20	tragic	_	JJ	JJ	_	21	amod	_	_
21	scenes	_	NNS	NNS	_	15	conj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	shining	_	VBG	VBG	_	22	pcomp	_	_
24	spears	_	JJ	JJ	_	28	amod	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	armored	_	JJ	JJ	_	24	conj	_	_
27	horses	_	NNS	NNS	_	28	nn	_	_
28	spring	_	NN	NN	_	23	tmod	_	_
29	up	_	RP	RP	_	23	prt	_	_
30	in	_	IN	IN	_	23	prep	_	_
31	my	_	PRP$	PRP$	_	32	poss	_	_
32	mind	_	NN	NN	_	30	pobj	_	_
33	.	_	.	.	_	8	punct	_	_

Oracle:
(a / agitate-01, ARG0, s2 / spring-02)
(a / agitate-01, ARG1, s6 / string)
(a2 / and, op, h2 / horse)
(a2 / and, op, s3 / spear)
(a3 / armor-01, ARG1, h2 / horse)
(s / scene, mod, h / heroic)
(s / scene, mod, t2 / tragic)
(s / scene, quant, m2 / many)
(s / scene, topic, a2 / and)
(s2 / spring-02, ARG1, s / scene)
(s2 / spring-02, location, m3 / mind)
(s4 / shine-01, ARG1, s3 / spear)
(s5 / stir-02, ARG2, s / scene)
(s6 / string, mod, t4 / thing)
(s6 / string, poss, m / memory)
(t3 / think-01, ARG1, t4 / thing)

Input(Some(Graph((agitate-01 :frequency occasional :ARG1 (string :mod (thing :ARG1-of think-01) :poss (memory :poss i)) :ARG0 (spring-02 :location (mind :poss i) :ARG1 (scene :ARG2-of stir-02 :topic (and :op (horse :ARG1-of armor-01) :op (spear :ARG1-of shine-01)) :mod tragic :mod heroic :quant many))),ArrayBuffer(Span(9,10,List(0),agitated,agitate-01,false), Span(3,4,List(1),strings,string,false), Span(1,2,List(2, 3),thought,(thing :ARG1-of think-01),false), Span(6,7,List(4),memory,memory,false), Span(29,30,List(5),spring,spring-02,false), Span(33,34,List(6),mind,mind,false), Span(22,23,List(7),scenes,scene,false), Span(18,19,List(8),stirring,stir-02,false), Span(20,21,List(9),and,and,false), Span(28,29,List(10),horses,horse,false), Span(27,28,List(11),armored,armor-01,false), Span(25,26,List(12),spears,spear,false), Span(24,25,List(13),shining,shine-01,false), Span(21,22,List(14),tragic,tragic,false), Span(16,17,List(15),heroic,heroic,false), Span(15,16,List(16),many,many,false)),Map(2 -> thing, 5 -> spring-02, 12 -> spear, 15 -> heroic, 8 -> stir-02, 7 -> scene, 1 -> string, 4 -> memory, 11 -> armor-01, 14 -> tragic, 6 -> mind, 9 -> and, 0 -> agitate-01, 16 -> many, 10 -> horse, 3 -> think-01, 13 -> shine-01),Map(s5 -> stir-02, m3 -> mind, h -> heroic, t4 -> thing, h2 -> horse, s2 -> spring-02, m2 -> many, a3 -> armor-01, s -> scene, s4 -> shine-01, m -> memory, t3 -> think-01, a -> agitate-01, t2 -> tragic, a2 -> and, s3 -> spear, s6 -> string))),[Ljava.lang.String;@ba54932,Annotation([Ljava.lang.String;@28975c28,[Ljava.lang.String;@3943a2be,[Ljava.lang.String;@343570b7),Annotation([Ljava.lang.String;@157853da,[Ljava.lang.String;@71c3b41,[Ledu.cmu.lti.nlp.amr.Dependency;@236e3f4e),Annotation([Ljava.lang.String;@3cc1435c,[Ljava.lang.String;@6bf0219d,[Ljava.lang.String;@dd0c991),Annotation([Ljava.lang.String;@5f16132a,[Ljava.lang.String;@69fb6037,[Ledu.cmu.lti.nlp.amr.Entity;@36d585c))
AMR:
(a / agitate-01, ARG1, t4 / thing)
(a / agitate-01, ARG2, a2 / and)
(a / agitate-01, ARG6, s6 / string)
(a2 / and, op, s / scene)
(a2 / and, op, s5 / stir-02)
(a3 / armor-01, ARG0, s / scene)
(a3 / armor-01, ARG1, s2 / spring-02)
(h / heroic, quant, m2 / many)
(s / scene, mod, t2 / tragic)
(s2 / spring-02, ARG1, h2 / horse)
(s4 / shine-01, ARG0, s / scene)
(s4 / shine-01, ARG1, s3 / spear)
(s4 / shine-01, ARG2, m3 / mind)
(s5 / stir-02, ARG1, h / heroic)
(s6 / string, poss, m / memory)
(t3 / think-01, ARG1, t4 / thing)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.4
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.3.1
WARNING: makeIds can't find span Id: 0.0.0.3.1.0
WARNING: makeIds can't find span Id: 0.0.0.3.0
WARNING: makeIds can't find span Id: 0.0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 815,381 microseconds
Sentence: My thoughts go through those yellowing pages of history, as if I saw Emperor Kangxi, the famous ruler of a generation, contemplating alone about how to achieve unification of the territory in his audience hall, hundreds of years ago; also as if I saw Abraham Lincoln, former U.S. President, wandering alone in the dark of a great hall, thinking about the integrity of the Union.

Oracle Span 1:  ; => and
Oracle Span 2:  Abraham Lincoln => (person :name (name :op "Lincoln" :op "Abraham"))
Oracle Span 3:  achieve => (thing :manner-of achieve-01)
Oracle Span 4:  alone => alone
Oracle Span 5:  also => also
Oracle Span 6:  audience => audience
Oracle Span 7:  contemplating => contemplate-01
Oracle Span 8:  dark => dark
Oracle Span 9:  Emperor => (have-org-role-91 :ARG2 emperor)
Oracle Span 10:  famous => famous
Oracle Span 11:  former => former
Oracle Span 12:  generation => generation
Oracle Span 13:  go => go-01
Oracle Span 14:  great => great
Oracle Span 15:  hall => hall
Oracle Span 16:  hall => hall
Oracle Span 17:  history => history
Oracle Span 18:  I => i
Oracle Span 19:  integrity => integrity
Oracle Span 20:  Kangxi => (person :name (name :op "Kangxi"))
Oracle Span 21:  pages => page
Oracle Span 22:  President => (have-org-role-91 :ARG2 president)
Oracle Span 23:  ruler => rule-03
Oracle Span 24:  saw => see-01
Oracle Span 25:  territory => territory
Oracle Span 26:  thinking => think-01
Oracle Span 27:  U.S. => (country :name (name :op "U.S."))
Oracle Span 28:  unification => unify-01
Oracle Span 29:  Union => (thing :name (name :op "Union"))
Oracle Span 30:  wandering => wander-01
Oracle Span 31:  years => (temporal-quantity :unit year)
Oracle Span 32:  yellowing => yellow-01
NER Entity: (person :name (name :op "Abraham" :op "Lincoln"))
NER Entity: (organization :name (name :op "Union"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (organization :name (name :op "Emperor" :op "Kangxi"))
Spans:
Span 43-44:  ; => and
Span 49-51:  Abraham Lincoln => (person :name (name :op "Lincoln" :op "Abraham"))
Span 29-30:  achieve => (thing :manner-of achieve-01)
Span 25-26:  alone => alone
Span 44-45:  also => also
Span 36-37:  audience => audience
Span 24-25:  contemplating => contemplate-01
Span 60-61:  dark => dark
Span 14-15:  Emperor => (have-org-role-91 :ARG2 emperor)
Span 18-19:  famous => famous
Span 52-53:  former => former
Span 22-23:  generation => generation
Span 2-3:  go => go-01
Span 63-64:  great => great
Span 37-38:  hall => hall
Span 64-65:  hall => hall
Span 8-9:  history => history
Span 12-13:  I => i
Span 69-70:  integrity => integrity
Span 15-16:  Kangxi => (person :name (name :op "Kangxi"))
Span 6-7:  pages => page
Span 54-55:  President => (have-org-role-91 :ARG2 president)
Span 19-20:  ruler => rule-03
Span 13-14:  saw => see-01
Span 33-34:  territory => territory
Span 66-67:  thinking => think-01
Span 53-54:  U.S. => (country :name (name :op "U.S."))
Span 30-31:  unification => unify-01
Span 72-73:  Union => (thing :name (name :op "Union"))
Span 56-57:  wandering => wander-01
Span 41-42:  years => (temporal-quantity :unit year)
Span 5-6:  yellowing => yellow-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 43-44:  ; => and
Oracle Span 49-51:  Abraham Lincoln => (person :name (name :op "Lincoln" :op "Abraham"))
Oracle Span 29-30:  achieve => (thing :manner-of achieve-01)
Oracle Span 25-26:  alone => alone
Oracle Span 44-45:  also => also
Oracle Span 36-37:  audience => audience
Oracle Span 24-25:  contemplating => contemplate-01
Oracle Span 60-61:  dark => dark
Oracle Span 14-15:  Emperor => (have-org-role-91 :ARG2 emperor)
Oracle Span 18-19:  famous => famous
Oracle Span 52-53:  former => former
Oracle Span 22-23:  generation => generation
Oracle Span 2-3:  go => go-01
Oracle Span 63-64:  great => great
Oracle Span 37-38:  hall => hall
Oracle Span 64-65:  hall => hall
Oracle Span 8-9:  history => history
Oracle Span 12-13:  I => i
Oracle Span 69-70:  integrity => integrity
Oracle Span 15-16:  Kangxi => (person :name (name :op "Kangxi"))
Oracle Span 6-7:  pages => page
Oracle Span 54-55:  President => (have-org-role-91 :ARG2 president)
Oracle Span 19-20:  ruler => rule-03
Oracle Span 13-14:  saw => see-01
Oracle Span 33-34:  territory => territory
Oracle Span 66-67:  thinking => think-01
Oracle Span 53-54:  U.S. => (country :name (name :op "U.S."))
Oracle Span 30-31:  unification => unify-01
Oracle Span 72-73:  Union => (thing :name (name :op "Union"))
Oracle Span 56-57:  wandering => wander-01
Oracle Span 41-42:  years => (temporal-quantity :unit year)
Oracle Span 5-6:  yellowing => yellow-01

Dependencies:
1	My	_	PRP$	PRP$	_	2	poss	_	_
2	thoughts	_	NNS	NNS	_	3	nsubj	_	_
3	go	_	VBP	VBP	_	0	root	_	_
4	through	_	IN	IN	_	3	prep	_	_
5	those	_	DT	DT	_	7	det	_	_
6	yellowing	_	JJ	JJ	_	7	amod	_	_
7	pages	_	NNS	NNS	_	4	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	history	_	NN	NN	_	8	pobj	_	_
10	,	_	,	,	_	3	punct	_	_
11	as	_	RB	RB	_	14	advmod	_	_
12	if	_	IN	IN	_	14	mark	_	_
13	I	_	PRP	PRP	_	14	nsubj	_	_
14	saw	_	VBD	VBD	_	3	advcl	_	_
15	Emperor	_	NNP	NNP	_	16	nn	_	_
16	Kangxi	_	NNP	NNP	_	25	nsubj	_	_
17	,	_	,	,	_	16	punct	_	_
18	the	_	DT	DT	_	20	det	_	_
19	famous	_	JJ	JJ	_	20	amod	_	_
20	ruler	_	NN	NN	_	16	appos	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	a	_	DT	DT	_	23	det	_	_
23	generation	_	NN	NN	_	21	pobj	_	_
24	,	_	,	,	_	16	punct	_	_
25	contemplating	_	VBG	VBG	_	14	dep	_	_
26	alone	_	RB	RB	_	25	advmod	_	_
27	about	_	IN	IN	_	25	prep	_	_
28	how	_	WRB	WRB	_	30	advmod	_	_
29	to	_	TO	TO	_	30	aux	_	_
30	achieve	_	VB	VB	_	27	pcomp	_	_
31	unification	_	NN	NN	_	30	dobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	the	_	DT	DT	_	34	det	_	_
34	territory	_	NN	NN	_	32	pobj	_	_
35	in	_	IN	IN	_	34	prep	_	_
36	his	_	PRP$	PRP$	_	38	poss	_	_
37	audience	_	NN	NN	_	38	nn	_	_
38	hall	_	NN	NN	_	35	pobj	_	_
39	,	_	,	,	_	34	punct	_	_
40	hundreds	_	NNS	NNS	_	34	appos	_	_
41	of	_	IN	IN	_	40	prep	_	_
42	years	_	NNS	NNS	_	41	pobj	_	_
43	ago	_	IN	IN	_	42	advmod	_	_
44	;	_	:	:	_	34	punct	_	_
45	also	_	RB	RB	_	14	advmod	_	_
46	as	_	RB	RB	_	49	advmod	_	_
47	if	_	IN	IN	_	49	mark	_	_
48	I	_	PRP	PRP	_	49	nsubj	_	_
49	saw	_	VBD	VBD	_	14	dep	_	_
50	Abraham	_	NNP	NNP	_	51	nn	_	_
51	Lincoln	_	NNP	NNP	_	57	nsubj	_	_
52	,	_	,	,	_	51	punct	_	_
53	former	_	JJ	JJ	_	55	amod	_	_
54	U.S.	_	NNP	NNP	_	55	nn	_	_
55	President	_	NNP	NNP	_	51	appos	_	_
56	,	_	,	,	_	51	punct	_	_
57	wandering	_	VBG	VBG	_	49	ccomp	_	_
58	alone	_	RB	RB	_	57	advmod	_	_
59	in	_	IN	IN	_	57	prep	_	_
60	the	_	DT	DT	_	61	det	_	_
61	dark	_	NN	NN	_	59	pobj	_	_
62	of	_	IN	IN	_	61	prep	_	_
63	a	_	DT	DT	_	65	det	_	_
64	great	_	JJ	JJ	_	65	amod	_	_
65	hall	_	NN	NN	_	62	pobj	_	_
66	,	_	,	,	_	57	punct	_	_
67	thinking	_	VBG	VBG	_	57	dep	_	_
68	about	_	IN	IN	_	67	prep	_	_
69	the	_	DT	DT	_	70	det	_	_
70	integrity	_	NN	NN	_	68	pobj	_	_
71	of	_	IN	IN	_	70	prep	_	_
72	the	_	DT	DT	_	73	det	_	_
73	Union	_	NNP	NNP	_	71	pobj	_	_
74	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(a5 / achieve-01, ARG0, p3 / person)
(a5 / achieve-01, ARG1, u / unify-01)
(a5 / achieve-01, manner, t8 / thing)
(c / contemplate-01, ARG0, p3 / person)
(c / contemplate-01, ARG1, t8 / thing)
(c / contemplate-01, location, h3 / hall)
(c / contemplate-01, manner, a2 / alone)
(c2 / country, name, n3 / name)
(d / dark, poss, h2 / hall)
(g / go-01, path, p / page)
(h2 / hall, mod, g2 / great)
(h3 / hall, mod, a7 / audience)
(h3 / hall, poss, p3 / person)
(h4 / have-org-role-91, ARG0, p3 / person)
(h4 / have-org-role-91, ARG2, e / emperor)
(h5 / have-org-role-91, ARG0, p2 / person)
(h5 / have-org-role-91, ARG1, c2 / country)
(h5 / have-org-role-91, ARG2, p4 / president)
(h5 / have-org-role-91, time, f / former)
(i / integrity, poss, t4 / thing)
(n / name, op, "Kangxi")
(n2 / name, op, "Abraham")
(n2 / name, op, "Lincoln")
(n3 / name, op, "U.S.")
(n4 / name, op, "Union")
(p / page, mod, h / history)
(p2 / person, mod, a3 / also)
(p2 / person, name, n2 / name)
(p3 / person, mod, f2 / famous)
(p3 / person, name, n / name)
(r / rule-03, ARG0, p3 / person)
(r / rule-03, ARG1, g3 / generation)
(s / see-01, ARG0, i2 / i)
(s / see-01, ARG1, a / and)
(t3 / think-01, ARG0, p2 / person)
(t3 / think-01, ARG1, i / integrity)
(t4 / thing, name, n4 / name)
(t6 / temporal-quantity, unit, y2 / year)
(u / unify-01, ARG0, p3 / person)
(u / unify-01, ARG1, t5 / territory)
(w / wander-01, ARG0, p2 / person)
(w / wander-01, ARG1, d / dark)
(w / wander-01, manner, a2 / alone)
(y / yellow-01, ARG1, p / page)

Input(Some(Graph((go-01 :manner (resemble-01 :ARG2 (see-01 :ARG1 (and :op (person :ARG0-of (have-org-role-91 :time former :ARG2 president :ARG1 (country :name (name :op "U.S."))) :ARG0-of (think-01 :ARG1 (integrity :poss (thing :name (name :op "Union")))) :ARG0-of (wander-01 :ARG1 (dark :poss (hall :mod great)) :manner alone) :mod also :name (name :op "Lincoln" :op "Abraham")) :op (person :ARG0-of (have-org-role-91 :ARG2 emperor) :mod famous :ARG0-of (rule-03 :ARG1 generation) :ARG0-of (contemplate-01 :time (before :op now :quant (multiple :op (temporal-quantity :unit year :quant 100))) :location (hall :mod audience :poss person) :manner alone :ARG1 (thing :manner-of (achieve-01 :ARG1 (unify-01 :ARG1 territory :ARG0 person) :ARG0 person))) :name (name :op "Kangxi"))) :ARG0 i)) :path (page :mod history :ARG1-of yellow-01 :mod that) :ARG1 (thing :ARG1-of (think-01 :ARG0 i))),ArrayBuffer(Span(15,16,List(0, 1, 2),Kangxi,(person :name (name :op "Kangxi")),false), Span(49,51,List(3, 4, 5, 6),Abraham Lincoln,(person :name (name :op "Lincoln" :op "Abraham")),false), Span(72,73,List(7, 8, 9),Union,(thing :name (name :op "Union")),false), Span(53,54,List(10, 11, 12),U.S.,(country :name (name :op "U.S.")),false), Span(2,3,List(13),go,go-01,false), Span(13,14,List(14),saw,see-01,false), Span(43,44,List(15),;,and,false), Span(44,45,List(16),also,also,false), Span(56,57,List(17),wandering,wander-01,false), Span(60,61,List(18),dark,dark,false), Span(37,38,List(19),hall,hall,false), Span(63,64,List(20),great,great,false), Span(66,67,List(21),thinking,think-01,false), Span(69,70,List(22),integrity,integrity,false), Span(54,55,List(23, 24),President,(have-org-role-91 :ARG2 president),false), Span(52,53,List(25),former,former,false), Span(24,25,List(26),contemplating,contemplate-01,false), Span(41,42,List(27, 28),years,(temporal-quantity :unit year),false), Span(64,65,List(29),hall,hall,false), Span(36,37,List(30),audience,audience,false), Span(25,26,List(31),alone,alone,false), Span(29,30,List(32, 33),achieve,(thing :manner-of achieve-01),false), Span(33,34,List(34),territory,territory,false), Span(19,20,List(35),ruler,rule-03,false), Span(22,23,List(36),generation,generation,false), Span(18,19,List(37),famous,famous,false), Span(14,15,List(38, 39),Emperor,(have-org-role-91 :ARG2 emperor),false), Span(6,7,List(40),pages,page,false), Span(8,9,List(41),history,history,false), Span(5,6,List(42),yellowing,yellow-01,false), Span(12,13,List(43),I,i,false), Span(30,31,List(44),unification,unify-01,false)),Map(39 -> emperor, 30 -> audience, 2 -> "Kangxi", 5 -> "Lincoln", 33 -> achieve-01, 27 -> temporal-quantity, 12 -> "U.S.", 8 -> name, 15 -> and, 42 -> yellow-01, 36 -> generation, 21 -> think-01, 18 -> dark, 24 -> president, 41 -> history, 35 -> rule-03, 7 -> thing, 17 -> wander-01, 1 -> name, 44 -> unify-01, 23 -> have-org-role-91, 38 -> have-org-role-91, 26 -> contemplate-01, 4 -> name, 11 -> name, 32 -> thing, 14 -> see-01, 29 -> hall, 20 -> great, 34 -> territory, 28 -> year, 6 -> "Abraham", 40 -> page, 43 -> i, 9 -> "Union", 0 -> person, 22 -> integrity, 16 -> also, 37 -> famous, 19 -> hall, 3 -> person, 10 -> country, 31 -> alone, 25 -> former, 13 -> go-01),Map(e -> emperor, a7 -> audience, h5 -> have-org-role-91, w -> wander-01, n -> name, h -> history, g3 -> generation, t4 -> thing, h2 -> hall, p2 -> person, a3 -> also, n4 -> name, t6 -> temporal-quantity, s -> see-01, h4 -> have-org-role-91, d -> dark, t3 -> think-01, g2 -> great, y -> yellow-01, p -> page, g -> go-01, a -> and, n3 -> name, p4 -> president, a5 -> achieve-01, i2 -> i, t5 -> territory, r -> rule-03, a2 -> alone, i -> integrity, h3 -> hall, c -> contemplate-01, t8 -> thing, f2 -> famous, u -> unify-01, f -> former, p3 -> person, y2 -> year, c2 -> country, n2 -> name))),[Ljava.lang.String;@87a85e1,Annotation([Ljava.lang.String;@671a5887,[Ljava.lang.String;@5552768b,[Ljava.lang.String;@3c947bc5),Annotation([Ljava.lang.String;@609db43b,[Ljava.lang.String;@55f616cf,[Ledu.cmu.lti.nlp.amr.Dependency;@1356d4d4),Annotation([Ljava.lang.String;@c03cf28,[Ljava.lang.String;@1329eff,[Ljava.lang.String;@6497b078),Annotation([Ljava.lang.String;@41c2284a,[Ljava.lang.String;@53aad5d5,[Ledu.cmu.lti.nlp.amr.Entity;@46fa7c39))
AMR:
(a / and, op, p3 / person)
(a3 / also, domain, i2 / i)
(a5 / achieve-01, ARG0, p3 / person)
(a5 / achieve-01, ARG1, u / unify-01)
(a5 / achieve-01, manner, t8 / thing)
(a5 / achieve-01, time, a7 / audience)
(c / contemplate-01, ARG0, p3 / person)
(c / contemplate-01, ARG1, t6 / temporal-quantity)
(c / contemplate-01, manner, a2 / alone)
(c2 / country, name, n3 / name)
(d / dark, location, h3 / hall)
(g / go-01, ARG1, p / page)
(g / go-01, condition, s / see-01)
(h2 / hall, mod, a7 / audience)
(h3 / hall, mod, g2 / great)
(h4 / have-org-role-91, ARG0, p3 / person)
(h4 / have-org-role-91, ARG1, c2 / country)
(h4 / have-org-role-91, ARG2, e / emperor)
(h5 / have-org-role-91, ARG1, c2 / country)
(h5 / have-org-role-91, ARG2, p4 / president)
(i / integrity, poss, t4 / thing)
(n / name, op, "Kangxi")
(n2 / name, op, "Abraham")
(n2 / name, op, "Lincoln")
(n3 / name, op, "U.S.")
(n4 / name, op, "Union")
(p2 / person, name, n2 / name)
(p3 / person, name, n / name)
(p4 / president, mod, f / former)
(r / rule-03, ARG0, f2 / famous)
(r / rule-03, ARG1, g3 / generation)
(r / rule-03, ARG6, p3 / person)
(s / see-01, ARG0, i2 / i)
(s / see-01, ARG1, p3 / person)
(t3 / think-01, ARG0, p2 / person)
(t3 / think-01, ARG1, i / integrity)
(t4 / thing, name, n4 / name)
(t6 / temporal-quantity, unit, y2 / year)
(u / unify-01, ARG0, h / history)
(u / unify-01, ARG1, t5 / territory)
(w / wander-01, ARG0, p2 / person)
(w / wander-01, ARG1, h5 / have-org-role-91)
(w / wander-01, ARG2, d / dark)
(y / yellow-01, ARG1, p / page)

WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.3.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.3.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.3.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.4.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.4.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.4.0.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.1
WARNING: makeIds can't find span Id: 0.2.0.0.1.2
WARNING: makeIds can't find span Id: 0.2.0.0.1.2.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.3
WARNING: makeIds can't find span Id: 0.2.0.0.1.3.0
WARNING: makeIds can't find span Id: 0.2.0.0.1.4
WARNING: makeIds can't find span Id: 0.2.0.0.1.4.1
WARNING: makeIds can't find span Id: 0.2.0.0.1.4.2
WARNING: makeIds can't find span Id: 0.2.0.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0.1.3.1.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.1.3.1.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0.1.2
WARNING: makeIds can't find span Id: 0.2.0.0.0.1.2.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.1.1
WARNING: makeIds can't find span Id: 0.2.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.2
WARNING: makeIds can't find span Id: 0.2.0.0.0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.3
WARNING: makeIds can't find span Id: 0.2.0.0.0.4
WARNING: makeIds can't find span Id: 0.2.0.0.0.4.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.1.0.0.0
Decoded in 4,199,853 microseconds
Sentence: "Although it is peaceful throughout the world, it is certainly dangerous to forget war!" My fellow citizens, we want development and peace, but we must never exercise forbearance blindly. The "Boxer Protocol " of national betrayal and humiliation has aggravated China's poverty and backwardness in modern time - falling behind will lead to being bullied.

Oracle Span 1:  aggravated => aggravate-01
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  backwardness => backwardness
Oracle Span 6:  behind => behind
Oracle Span 7:  betrayal => betray-01
Oracle Span 8:  blindly => blind-01
Oracle Span 9:  Boxer Protocol => (treaty :name (name :op "Protocol" :op "Boxer"))
Oracle Span 10:  bullied => bully-01
Oracle Span 11:  certainly => certain
Oracle Span 12:  China => (country :name (name :op "China"))
Oracle Span 13:  citizens => citizen
Oracle Span 14:  dangerous => dangerous
Oracle Span 15:  development => develop-02
Oracle Span 16:  exercise => exercise-01
Oracle Span 17:  falling => fall-01
Oracle Span 18:  fellow => fellow
Oracle Span 19:  forbearance => forbearance
Oracle Span 20:  forget => forget-01
Oracle Span 21:  has => have-concession-91
Oracle Span 22:  humiliation => humiliate-01
Oracle Span 23:  lead => lead-03
Oracle Span 24:  modern => modern
Oracle Span 25:  national => nation
Oracle Span 26:  peace => peace
Oracle Span 27:  peaceful => peaceful
Oracle Span 28:  poverty => poverty
Oracle Span 29:  want => want-01
Oracle Span 30:  war => war
Oracle Span 31:  we => we
Oracle Span 32:  world => world
NER Entity: (thing :name (name :op "Boxer" :op "Protocol"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 47-48:  aggravated => aggravate-01
Span 25-26:  and => and
Span 44-45:  and => and
Span 51-52:  and => and
Span 52-53:  backwardness => backwardness
Span 58-59:  behind => behind
Span 43-44:  betrayal => betray-01
Span 34-35:  blindly => blind-01
Span 38-40:  Boxer Protocol => (treaty :name (name :op "Protocol" :op "Boxer"))
Span 63-64:  bullied => bully-01
Span 11-12:  certainly => certain
Span 48-49:  China => (country :name (name :op "China"))
Span 20-21:  citizens => citizen
Span 12-13:  dangerous => dangerous
Span 24-25:  development => develop-02
Span 32-33:  exercise => exercise-01
Span 57-58:  falling => fall-01
Span 19-20:  fellow => fellow
Span 33-34:  forbearance => forbearance
Span 14-15:  forget => forget-01
Span 46-47:  has => have-concession-91
Span 45-46:  humiliation => humiliate-01
Span 60-61:  lead => lead-03
Span 54-55:  modern => modern
Span 42-43:  national => nation
Span 26-27:  peace => peace
Span 4-5:  peaceful => peaceful
Span 50-51:  poverty => poverty
Span 23-24:  want => want-01
Span 15-16:  war => war
Span 22-23:  we => we
Span 7-8:  world => world

 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of never in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of exercise in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of forbearance in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of blindly in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of Boxer in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of Protocol in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of betrayal in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliation in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of aggravated in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of poverty in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of backwardness in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of modern in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of falling in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lead in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of bullied in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 64
Langrangian relaxation converged after 49 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of never in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of exercise in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of forbearance in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of blindly in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of Boxer in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of Protocol in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of betrayal in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliation in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of aggravated in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of poverty in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of backwardness in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of modern in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of time in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of - in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of falling in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of lead in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of being in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of bullied in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 64
Oracle Span 47-48:  aggravated => aggravate-01
Oracle Span 25-26:  and => and
Oracle Span 44-45:  and => and
Oracle Span 51-52:  and => and
Oracle Span 52-53:  backwardness => backwardness
Oracle Span 58-59:  behind => behind
Oracle Span 43-44:  betrayal => betray-01
Oracle Span 34-35:  blindly => blind-01
Oracle Span 38-40:  Boxer Protocol => (treaty :name (name :op "Protocol" :op "Boxer"))
Oracle Span 63-64:  bullied => bully-01
Oracle Span 11-12:  certainly => certain
Oracle Span 48-49:  China => (country :name (name :op "China"))
Oracle Span 20-21:  citizens => citizen
Oracle Span 12-13:  dangerous => dangerous
Oracle Span 24-25:  development => develop-02
Oracle Span 32-33:  exercise => exercise-01
Oracle Span 57-58:  falling => fall-01
Oracle Span 19-20:  fellow => fellow
Oracle Span 33-34:  forbearance => forbearance
Oracle Span 14-15:  forget => forget-01
Oracle Span 46-47:  has => have-concession-91
Oracle Span 45-46:  humiliation => humiliate-01
Oracle Span 60-61:  lead => lead-03
Oracle Span 54-55:  modern => modern
Oracle Span 42-43:  national => nation
Oracle Span 26-27:  peace => peace
Oracle Span 4-5:  peaceful => peaceful
Oracle Span 50-51:  poverty => poverty
Oracle Span 23-24:  want => want-01
Oracle Span 15-16:  war => war
Oracle Span 22-23:  we => we
Oracle Span 7-8:  world => world

Dependencies:
1	"	_	``	``	_	13	punct	_	_
2	Although	_	IN	IN	_	5	mark	_	_
3	it	_	PRP	PRP	_	5	nsubj	_	_
4	is	_	VBZ	VBZ	_	5	cop	_	_
5	peaceful	_	JJ	JJ	_	13	advcl	_	_
6	throughout	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	world	_	NN	NN	_	6	pobj	_	_
9	,	_	,	,	_	13	punct	_	_
10	it	_	PRP	PRP	_	13	nsubj	_	_
11	is	_	VBZ	VBZ	_	13	cop	_	_
12	certainly	_	RB	RB	_	13	advmod	_	_
13	dangerous	_	JJ	JJ	_	0	root	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	forget	_	VB	VB	_	13	xcomp	_	_
16	war	_	NN	NN	_	15	dobj	_	_
17	!	_	.	.	_	13	punct	_	_
18	"	_	''	''	_	13	punct	_	_
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	6	nsubj	_	_
4	,	_	,	,	_	6	punct	_	_
5	we	_	PRP	PRP	_	6	nsubj	_	_
6	want	_	VBP	VBP	_	0	root	_	_
7	development	_	NN	NN	_	6	dobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	peace	_	NN	NN	_	7	conj	_	_
10	,	_	,	,	_	6	punct	_	_
11	but	_	CC	CC	_	6	cc	_	_
12	we	_	PRP	PRP	_	15	nsubj	_	_
13	must	_	MD	MD	_	15	aux	_	_
14	never	_	RB	RB	_	15	neg	_	_
15	exercise	_	VB	VB	_	6	conj	_	_
16	forbearance	_	RB	RB	_	17	advmod	_	_
17	blindly	_	RB	RB	_	15	advmod	_	_
18	.	_	.	.	_	6	punct	_	_
1	The	_	DT	DT	_	4	det	_	_
2	"	_	``	``	_	4	punct	_	_
3	Boxer	_	NNP	NNP	_	4	nn	_	_
4	Protocol	_	NNP	NNP	_	12	nsubj	_	_
5	"	_	''	''	_	4	punct	_	_
6	of	_	IN	IN	_	4	prep	_	_
7	national	_	JJ	JJ	_	8	amod	_	_
8	betrayal	_	NN	NN	_	6	pobj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	humiliation	_	NN	NN	_	8	conj	_	_
11	has	_	VBZ	VBZ	_	12	aux	_	_
12	aggravated	_	VBN	VBN	_	0	root	_	_
13	China	_	NNP	NNP	_	15	poss	_	_
14	's	_	POS	POS	_	13	possessive	_	_
15	poverty	_	NN	NN	_	12	dobj	_	_
16	and	_	CC	CC	_	15	cc	_	_
17	backwardness	_	NNS	NNS	_	15	conj	_	_
18	in	_	IN	IN	_	12	prep	_	_
19	modern	_	JJ	JJ	_	20	amod	_	_
20	time	_	NN	NN	_	18	pobj	_	_
21	-	_	:	:	_	12	punct	_	_
22	falling	_	VBG	VBG	_	25	nsubj	_	_
23	behind	_	RB	RB	_	25	advmod	_	_
24	will	_	MD	MD	_	25	aux	_	_
25	lead	_	VB	VB	_	12	parataxis	_	_
26	to	_	TO	TO	_	25	prep	_	_
27	being	_	VBG	VBG	_	28	auxpass	_	_
28	bullied	_	VBD	VBD	_	26	pcomp	_	_
29	.	_	.	.	_	12	punct	_	_

Oracle:
(a / and, op, d / develop-02)
(a / and, op, p / peace)
(a3 / aggravate-01, ARG0, t2 / treaty)
(a3 / aggravate-01, ARG1, a4 / and)
(a3 / aggravate-01, time, m2 / modern)
(a4 / and, op, b2 / backwardness)
(a4 / and, op, p2 / poverty)
(a4 / and, poss, c3 / country)
(a5 / and, consist, t2 / treaty)
(a5 / and, op, b3 / betray-01)
(a5 / and, op, h / humiliate-01)
(b / blind-01, ARG1, w / want-01)
(b3 / betray-01, ARG1, n3 / nation)
(c / citizen, mod, f / fellow)
(c3 / country, name, n / name)
(d2 / dangerous, domain, f4 / forget-01)
(d2 / dangerous, mod, c4 / certain)
(e / exercise-01, ARG0, w2 / we)
(e / exercise-01, ARG1, f2 / forbearance)
(e / exercise-01, manner, b / blind-01)
(f3 / fall-01, direction, b5 / behind)
(f4 / forget-01, ARG1, w3 / war)
(h / humiliate-01, ARG1, n3 / nation)
(h2 / have-concession-91, ARG1, d2 / dangerous)
(h2 / have-concession-91, ARG2, p3 / peaceful)
(l / lead-03, ARG0, f3 / fall-01)
(l / lead-03, ARG2, b4 / bully-01)
(n / name, op, "China")
(n2 / name, op, "Boxer")
(n2 / name, op, "Protocol")
(p3 / peaceful, location, w4 / world)
(t2 / treaty, name, n2 / name)
(w / want-01, ARG0, w2 / we)
(w / want-01, ARG1, a / and)

Input(Some(Graph((multi-sentence :snt1 (have-concession-91 :ARG2 (peaceful :location world) :ARG1 (dangerous :mod certain :domain (forget-01 :ARG1 war))) :snt2 (say-01 :ARG0 i :ARG1 (have-concession-91 :ARG1 (obligate-01 :ARG2 (exercise-01 :time ever :manner (blind-01 :ARG1 want-01) :ARG1 forbearance :polarity - :ARG0 we) :ARG1 we) :ARG2 (want-01 :ARG1 (and :op peace :op develop-02) :ARG0 we)) :ARG2 (citizen :mod fellow :poss i)) :snt3 (aggravate-01 :time modern :ARG1 (and :poss (country :name (name :op "China")) :op backwardness :op poverty) :ARG0 (treaty :consist-of (and :op (humiliate-01 :ARG1 nation) :op (betray-01 :ARG1 nation)) :name (name :op "Protocol" :op "Boxer"))) :snt4 (lead-03 :ARG2 bully-01 :ARG0 (fall-01 :direction behind))),ArrayBuffer(Span(38,40,List(0, 1, 2, 3),Boxer Protocol,(treaty :name (name :op "Protocol" :op "Boxer")),false), Span(48,49,List(4, 5, 6),China,(country :name (name :op "China")),false), Span(12,13,List(7),dangerous,dangerous,false), Span(14,15,List(8),forget,forget-01,false), Span(15,16,List(9),war,war,false), Span(4,5,List(10),peaceful,peaceful,false), Span(7,8,List(11),world,world,false), Span(32,33,List(12),exercise,exercise-01,false), Span(33,34,List(13),forbearance,forbearance,false), Span(23,24,List(14),want,want-01,false), Span(25,26,List(15),and,and,false), Span(26,27,List(16),peace,peace,false), Span(22,23,List(17),we,we,false), Span(20,21,List(18),citizens,citizen,false), Span(19,20,List(19),fellow,fellow,false), Span(47,48,List(20),aggravated,aggravate-01,false), Span(54,55,List(21),modern,modern,false), Span(44,45,List(22),and,and,false), Span(52,53,List(23),backwardness,backwardness,false), Span(50,51,List(24),poverty,poverty,false), Span(51,52,List(25),and,and,false), Span(60,61,List(26),lead,lead-03,false), Span(63,64,List(27),bullied,bully-01,false), Span(57,58,List(28),falling,fall-01,false), Span(58,59,List(29),behind,behind,false), Span(46,47,List(30),has,have-concession-91,false), Span(11,12,List(31),certainly,certain,false), Span(34,35,List(32),blindly,blind-01,false), Span(24,25,List(33),development,develop-02,false), Span(45,46,List(34),humiliation,humiliate-01,false), Span(43,44,List(35),betrayal,betray-01,false), Span(42,43,List(36),national,nation,false)),Map(30 -> have-concession-91, 2 -> "Protocol", 5 -> name, 33 -> develop-02, 27 -> bully-01, 12 -> exercise-01, 15 -> and, 8 -> forget-01, 36 -> nation, 21 -> modern, 18 -> citizen, 24 -> poverty, 35 -> betray-01, 7 -> dangerous, 17 -> we, 1 -> name, 23 -> backwardness, 26 -> lead-03, 4 -> country, 11 -> world, 32 -> blind-01, 14 -> want-01, 29 -> behind, 20 -> aggravate-01, 34 -> humiliate-01, 28 -> fall-01, 6 -> "China", 9 -> war, 0 -> treaty, 22 -> and, 16 -> peace, 19 -> fellow, 10 -> peaceful, 3 -> "Boxer", 31 -> certain, 25 -> and, 13 -> forbearance),Map(e -> exercise-01, b3 -> betray-01, w -> want-01, n -> name, h -> humiliate-01, h2 -> have-concession-91, b -> blind-01, b2 -> backwardness, m2 -> modern, f4 -> forget-01, b5 -> behind, p2 -> poverty, c4 -> certain, a3 -> aggravate-01, w3 -> war, d -> develop-02, p -> peace, n3 -> nation, a -> and, c3 -> country, a5 -> and, d2 -> dangerous, f3 -> fall-01, b4 -> bully-01, t2 -> treaty, w2 -> we, c -> citizen, f2 -> forbearance, l -> lead-03, f -> fellow, p3 -> peaceful, n2 -> name, a4 -> and, w4 -> world))),[Ljava.lang.String;@1fb700ee,Annotation([Ljava.lang.String;@4f67eb2a,[Ljava.lang.String;@4a668b6e,[Ljava.lang.String;@5f683daf),Annotation([Ljava.lang.String;@78ffe6dc,[Ljava.lang.String;@8317c52,[Ledu.cmu.lti.nlp.amr.Dependency;@76f2bbc1),Annotation([Ljava.lang.String;@68e965f5,[Ljava.lang.String;@6f27a732,[Ljava.lang.String;@6c779568),Annotation([Ljava.lang.String;@f381794,[Ljava.lang.String;@2cdd0d4b,[Ledu.cmu.lti.nlp.amr.Entity;@7e9131d5))
AMR:
(a / and, op, d / develop-02)
(a / and, op, p / peace)
(a3 / aggravate-01, ARG0, c3 / country)
(a3 / aggravate-01, ARG1, h2 / have-concession-91)
(a4 / and, op, b3 / betray-01)
(a4 / and, op, h / humiliate-01)
(a5 / and, op, b2 / backwardness)
(a5 / and, op, p2 / poverty)
(b / blind-01, ARG6, f2 / forbearance)
(b3 / betray-01, ARG1, n3 / nation)
(b4 / bully-01, ARG1, f4 / forget-01)
(b5 / behind, domain, f4 / forget-01)
(c3 / country, name, n / name)
(d / develop-02, ARG6, c / citizen)
(d2 / dangerous, domain, f4 / forget-01)
(d2 / dangerous, mod, c4 / certain)
(e / exercise-01, ARG0, f / fellow)
(e / exercise-01, ARG1, b / blind-01)
(e / exercise-01, ARG6, a / and)
(f2 / forbearance, domain, f4 / forget-01)
(f3 / fall-01, ARG1, b5 / behind)
(f4 / forget-01, ARG1, w3 / war)
(f4 / forget-01, ARG6, p3 / peaceful)
(h / humiliate-01, ARG1, f4 / forget-01)
(h2 / have-concession-91, ARG1, h / humiliate-01)
(l / lead-03, ARG1, b4 / bully-01)
(m2 / modern, domain, f4 / forget-01)
(n / name, op, "China")
(n2 / name, op, "Boxer")
(n2 / name, op, "Protocol")
(p2 / poverty, domain, f4 / forget-01)
(p3 / peaceful, location, w4 / world)
(t2 / treaty, domain, f4 / forget-01)
(t2 / treaty, name, n2 / name)
(w / want-01, ARG0, w2 / we)
(w / want-01, ARG1, a / and)

WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.2
WARNING: makeIds can't find span Id: 0.2.1.2.0
WARNING: makeIds can't find span Id: 0.2.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.1.1.1.0
WARNING: makeIds can't find span Id: 0.2.0.1.1
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0
Decoded in 3,803,443 microseconds
Sentence: Without strength, where does peace come from!

Oracle Span 1:  come => come-03
Oracle Span 2:  peace => peace
Oracle Span 3:  strength => strength
Spans:
Span 6-7:  come => come-03
Span 5-6:  peace => peace
Span 1-2:  strength => strength

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Oracle Span 6-7:  come => come-03
Oracle Span 5-6:  peace => peace
Oracle Span 1-2:  strength => strength

Dependencies:
1	Without	_	IN	IN	_	7	prep	_	_
2	strength	_	NN	NN	_	1	pobj	_	_
3	,	_	,	,	_	7	punct	_	_
4	where	_	WRB	WRB	_	7	advmod	_	_
5	does	_	VBZ	VBZ	_	7	aux	_	_
6	peace	_	NN	NN	_	7	nsubj	_	_
7	come	_	VB	VB	_	0	root	_	_
8	from	_	IN	IN	_	7	prep	_	_
9	!	_	.	.	_	7	punct	_	_

Oracle:
(c / come-03, ARG1, p / peace)
(c / come-03, condition, s / strength)

Input(Some(Graph((come-03 :condition (strength :polarity -) :ARG2 amr-unknown :ARG1 peace),ArrayBuffer(Span(6,7,List(0),come,come-03,false), Span(1,2,List(1),strength,strength,false), Span(5,6,List(2),peace,peace,false)),Map(2 -> peace, 1 -> strength, 0 -> come-03),Map(s -> strength, p -> peace, c -> come-03))),[Ljava.lang.String;@2e1d27ba,Annotation([Ljava.lang.String;@61d6015a,[Ljava.lang.String;@2525ff7e,[Ljava.lang.String;@524d6d96),Annotation([Ljava.lang.String;@152aa092,[Ljava.lang.String;@44a7bfbc,[Ledu.cmu.lti.nlp.amr.Dependency;@4ef37659),Annotation([Ljava.lang.String;@776b83cc,[Ljava.lang.String;@37858383,[Ljava.lang.String;@4e268090),Annotation([Ljava.lang.String;@1bb266b3,[Ljava.lang.String;@306cf3ea,[Ledu.cmu.lti.nlp.amr.Entity;@2beee7ff))
AMR:
(c / come-03, ARG1, p / peace)
(c / come-03, location, s / strength)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.0
Decoded in 24,290 microseconds
Sentence: We must focus on national defense education, build up a Great Wall in the hearts of 1.3 billion people, and must establish the full range of a national defense system having the ability to both attack and defend;

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  attack => attack-01
Oracle Span 4:  build => build-05
Oracle Span 5:  defend => defend-01
Oracle Span 6:  defense => defense
Oracle Span 7:  defense => defense
Oracle Span 8:  education => education
Oracle Span 9:  establish => establish-01
Oracle Span 10:  focus => focus-01
Oracle Span 11:  full => full
Oracle Span 12:  Great => great
Oracle Span 13:  hearts => heart
Oracle Span 14:  national => nation
Oracle Span 15:  national => nation
Oracle Span 16:  range => range-01
Oracle Span 17:  system => system
Oracle Span 18:  Wall => wall
Oracle Span 19:  We => we
NER Entity: (country :name (name :op "Great" :op "Wall"))
Spans:
Span 21-22:  and => and
Span 38-39:  and => and
Span 37-38:  attack => attack-01
Span 8-9:  build => build-05
Span 39-40:  defend => defend-01
Span 5-6:  defense => defense
Span 30-31:  defense => defense
Span 6-7:  education => education
Span 23-24:  establish => establish-01
Span 2-3:  focus => focus-01
Span 25-26:  full => full
Span 11-12:  Great => great
Span 15-16:  hearts => heart
Span 4-5:  national => nation
Span 29-30:  national => nation
Span 26-27:  range => range-01
Span 31-32:  system => system
Span 12-13:  Wall => wall
Span 0-1:  We => we

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 21-22:  and => and
Oracle Span 38-39:  and => and
Oracle Span 37-38:  attack => attack-01
Oracle Span 8-9:  build => build-05
Oracle Span 39-40:  defend => defend-01
Oracle Span 5-6:  defense => defense
Oracle Span 30-31:  defense => defense
Oracle Span 6-7:  education => education
Oracle Span 23-24:  establish => establish-01
Oracle Span 2-3:  focus => focus-01
Oracle Span 25-26:  full => full
Oracle Span 11-12:  Great => great
Oracle Span 15-16:  hearts => heart
Oracle Span 4-5:  national => nation
Oracle Span 29-30:  national => nation
Oracle Span 26-27:  range => range-01
Oracle Span 31-32:  system => system
Oracle Span 12-13:  Wall => wall
Oracle Span 0-1:  We => we

Dependencies:
1	We	_	PRP	PRP	_	3	nsubj	_	_
2	must	_	MD	MD	_	3	aux	_	_
3	focus	_	VB	VB	_	0	root	_	_
4	on	_	IN	IN	_	3	prep	_	_
5	national	_	JJ	JJ	_	7	amod	_	_
6	defense	_	NN	NN	_	7	nn	_	_
7	education	_	NN	NN	_	4	pobj	_	_
8	,	_	,	,	_	3	punct	_	_
9	build	_	VBP	VBP	_	3	conj	_	_
10	up	_	RP	RP	_	9	prt	_	_
11	a	_	DT	DT	_	13	det	_	_
12	Great	_	NNP	NNP	_	13	nn	_	_
13	Wall	_	NNP	NNP	_	9	dobj	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	hearts	_	NNS	NNS	_	14	pobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	1.3	_	CD	CD	_	19	number	_	_
19	billion	_	CD	CD	_	20	num	_	_
20	people	_	NNS	NNS	_	17	pobj	_	_
21	,	_	,	,	_	3	punct	_	_
22	and	_	CC	CC	_	3	cc	_	_
23	must	_	MD	MD	_	24	aux	_	_
24	establish	_	VB	VB	_	3	conj	_	_
25	the	_	DT	DT	_	27	det	_	_
26	full	_	JJ	JJ	_	27	amod	_	_
27	range	_	NN	NN	_	24	dobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	a	_	DT	DT	_	32	det	_	_
30	national	_	JJ	JJ	_	32	amod	_	_
31	defense	_	NN	NN	_	32	nn	_	_
32	system	_	NN	NN	_	28	pobj	_	_
33	having	_	VBG	VBG	_	32	vmod	_	_
34	the	_	DT	DT	_	35	det	_	_
35	ability	_	NN	NN	_	33	dobj	_	_
36	to	_	TO	TO	_	38	aux	_	_
37	both	_	DT	DT	_	38	preconj	_	_
38	attack	_	VB	VB	_	33	vmod	_	_
39	and	_	CC	CC	_	38	cc	_	_
40	defend	_	VB	VB	_	38	conj	_	_
41	;	_	:	:	_	3	punct	_	_

Oracle:
(a / and, op, b / build-05)
(a / and, op, e2 / establish-01)
(a / and, op, f / focus-01)
(a6 / and, op, a7 / attack-01)
(a6 / and, op, d4 / defend-01)
(a7 / attack-01, ARG0, s / system)
(b / build-05, ARG0, w / we)
(b / build-05, ARG1, w2 / wall)
(b / build-05, location, h / heart)
(d / defense, mod, n / nation)
(d4 / defend-01, ARG0, s / system)
(e / education, mod, d / defense)
(e2 / establish-01, ARG0, w / we)
(e2 / establish-01, ARG1, s / system)
(f / focus-01, ARG0, w / we)
(f / focus-01, ARG2, e / education)
(n3 / nation, mod, d2 / defense)
(r / range-01, ARG1, s / system)
(r / range-01, ARG2, f2 / full)
(s / system, mod, n3 / nation)
(w2 / wall, mod, g / great)

Input(Some(Graph((obligate-01 :ARG1 we :ARG2 (and :op (establish-01 :ARG1 (system :ARG1-of (capable-41 :ARG2 (and :op (defend-01 :ARG0 system) :op (attack-01 :ARG0 system))) :ARG1-of (range-01 :ARG2 full) :mod (nation :mod defense)) :ARG0 we) :op (build-05 :location (heart :part-of (person :quant 1300000000)) :ARG1 (wall :mod great) :ARG0 we) :op (focus-01 :ARG2 (education :mod (defense :mod nation)) :ARG0 we))),ArrayBuffer(Span(0,1,List(0),We,we,false), Span(21,22,List(1),and,and,false), Span(23,24,List(2),establish,establish-01,false), Span(31,32,List(3),system,system,false), Span(38,39,List(4),and,and,false), Span(39,40,List(5),defend,defend-01,false), Span(37,38,List(6),attack,attack-01,false), Span(26,27,List(7),range,range-01,false), Span(25,26,List(8),full,full,false), Span(5,6,List(9),defense,defense,false), Span(8,9,List(10),build,build-05,false), Span(15,16,List(11),hearts,heart,false), Span(12,13,List(12),Wall,wall,false), Span(11,12,List(13),Great,great,false), Span(2,3,List(14),focus,focus-01,false), Span(6,7,List(15),education,education,false), Span(30,31,List(16),defense,defense,false), Span(4,5,List(17),national,nation,false), Span(29,30,List(18),national,nation,false)),Map(2 -> establish-01, 5 -> defend-01, 12 -> wall, 15 -> education, 8 -> full, 18 -> nation, 7 -> range-01, 17 -> nation, 1 -> and, 4 -> and, 11 -> heart, 14 -> focus-01, 6 -> attack-01, 9 -> defense, 0 -> we, 16 -> defense, 10 -> build-05, 3 -> system, 13 -> great),Map(e -> education, a7 -> attack-01, n -> nation, w -> we, h -> heart, b -> build-05, e2 -> establish-01, s -> system, a6 -> and, d -> defense, g -> great, n3 -> nation, a -> and, d2 -> defense, w2 -> wall, r -> range-01, f2 -> full, f -> focus-01, d4 -> defend-01))),[Ljava.lang.String;@e1de817,Annotation([Ljava.lang.String;@52102734,[Ljava.lang.String;@3541cb24,[Ljava.lang.String;@2177849e),Annotation([Ljava.lang.String;@40cb8df7,[Ljava.lang.String;@13b13b5d,[Ledu.cmu.lti.nlp.amr.Dependency;@2892dae4),Annotation([Ljava.lang.String;@355ce81c,[Ljava.lang.String;@29647f75,[Ljava.lang.String;@3315d2d7),Annotation([Ljava.lang.String;@d6e7bab,[Ljava.lang.String;@5fa07e12,[Ledu.cmu.lti.nlp.amr.Entity;@55b53d44))
AMR:
(a / and, op, b / build-05)
(a / and, op, e2 / establish-01)
(a / and, op, f / focus-01)
(a6 / and, op, a7 / attack-01)
(a6 / and, op, d4 / defend-01)
(a7 / attack-01, ARG1, s / system)
(b / build-05, ARG1, w2 / wall)
(d4 / defend-01, ARG1, h / heart)
(e / education, mod, d2 / defense)
(e / education, mod, n3 / nation)
(e2 / establish-01, ARG1, r / range-01)
(f / focus-01, ARG0, w / we)
(f / focus-01, ARG1, e / education)
(r / range-01, ARG1, s / system)
(r / range-01, mod, f2 / full)
(s / system, mod, d / defense)
(s / system, mod, n / nation)
(w2 / wall, mod, g / great)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.1.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
Decoded in 773,109 microseconds
Sentence: The best defense is to attack - we should strengthen forces which can engage in ultra-long-range attack, improve combat capability throughout all of aerospace, of great depth, and over great distances. On the premise of avoiding influence on national economic development, increase investment and construction of the defense industry, accelerate modernization and internationalization of military equipment, and establish a high-quality, high-tech elite division.

Oracle Span 1:  accelerate => accelerate-01
Oracle Span 2:  aerospace => aerospace
Oracle Span 3:  all => all
Oracle Span 4:  and => and
Oracle Span 5:  and => and
Oracle Span 6:  and => and
Oracle Span 7:  and => and
Oracle Span 8:  attack => attack-01
Oracle Span 9:  attack => attack-01
Oracle Span 10:  avoiding => avoid-01
Oracle Span 11:  best => (good :degree most)
Oracle Span 12:  can => possible
Oracle Span 13:  capability => capable-41
Oracle Span 14:  combat => combat-01
Oracle Span 15:  construction => construct-01
Oracle Span 16:  defense => defend-01
Oracle Span 17:  defense => defend
Oracle Span 18:  depth => depth
Oracle Span 19:  development => develop-02
Oracle Span 20:  distances => distance
Oracle Span 21:  division => division
Oracle Span 22:  economic => economy
Oracle Span 23:  elite => elite
Oracle Span 24:  engage => engage-01
Oracle Span 25:  equipment => equipment
Oracle Span 26:  establish => establish-01
Oracle Span 27:  forces => force
Oracle Span 28:  great => great
Oracle Span 29:  great => great
Oracle Span 30:  high => high
Oracle Span 31:  high => high
Oracle Span 32:  improve => improve-01
Oracle Span 33:  increase => increase-01
Oracle Span 34:  industry => industry
Oracle Span 35:  influence => influence-01
Oracle Span 36:  internationalization => internationalize-00
Oracle Span 37:  investment => invest-01
Oracle Span 38:  long => long
Oracle Span 39:  military => military
Oracle Span 40:  modernization => modernize-01
Oracle Span 41:  national => nation
Oracle Span 42:  premise => premise-01
Oracle Span 43:  quality => quality
Oracle Span 44:  range => range-01
Oracle Span 45:  should => recommend-01
Oracle Span 46:  strengthen => strengthen-01
Oracle Span 47:  tech => tech
Oracle Span 48:  ultra => ultra
Oracle Span 49:  we => we
Spans:
Span 59-60:  accelerate => accelerate-01
Span 28-29:  aerospace => aerospace
Span 26-27:  all => all
Span 34-35:  and => and
Span 52-53:  and => and
Span 61-62:  and => and
Span 67-68:  and => and
Span 5-6:  attack => attack-01
Span 20-21:  attack => attack-01
Span 43-44:  avoiding => avoid-01
Span 1-2:  best => (good :degree most)
Span 12-13:  can => possible
Span 24-25:  capability => capable-41
Span 23-24:  combat => combat-01
Span 53-54:  construction => construct-01
Span 2-3:  defense => defend-01
Span 56-57:  defense => defend
Span 32-33:  depth => depth
Span 48-49:  development => develop-02
Span 37-38:  distances => distance
Span 78-79:  division => division
Span 47-48:  economic => economy
Span 77-78:  elite => elite
Span 13-14:  engage => engage-01
Span 65-66:  equipment => equipment
Span 68-69:  establish => establish-01
Span 10-11:  forces => force
Span 31-32:  great => great
Span 36-37:  great => great
Span 70-71:  high => high
Span 74-75:  high => high
Span 22-23:  improve => improve-01
Span 50-51:  increase => increase-01
Span 57-58:  industry => industry
Span 44-45:  influence => influence-01
Span 62-63:  internationalization => internationalize-00
Span 51-52:  investment => invest-01
Span 17-18:  long => long
Span 64-65:  military => military
Span 60-61:  modernization => modernize-01
Span 46-47:  national => nation
Span 41-42:  premise => premise-01
Span 72-73:  quality => quality
Span 19-20:  range => range-01
Span 8-9:  should => recommend-01
Span 9-10:  strengthen => strengthen-01
Span 76-77:  tech => tech
Span 15-16:  ultra => ultra
Span 7-8:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of premise in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of avoiding in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of economic in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of development in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of increase in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of investment in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of construction in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of defense in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of industry in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of accelerate in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of modernization in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of internationalization in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of military in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of equipment in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of establish in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-quality in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-tech in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of elite in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of division in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 71
Langrangian relaxation converged after 47 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of premise in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of avoiding in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of national in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of economic in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of development in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of increase in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of investment in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of construction in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of defense in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of industry in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of accelerate in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of modernization in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of internationalization in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of military in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of equipment in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of establish in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-quality in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of high-tech in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of elite in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of division in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 71
Oracle Span 59-60:  accelerate => accelerate-01
Oracle Span 28-29:  aerospace => aerospace
Oracle Span 26-27:  all => all
Oracle Span 34-35:  and => and
Oracle Span 52-53:  and => and
Oracle Span 61-62:  and => and
Oracle Span 67-68:  and => and
Oracle Span 5-6:  attack => attack-01
Oracle Span 20-21:  attack => attack-01
Oracle Span 43-44:  avoiding => avoid-01
Oracle Span 1-2:  best => (good :degree most)
Oracle Span 12-13:  can => possible
Oracle Span 24-25:  capability => capable-41
Oracle Span 23-24:  combat => combat-01
Oracle Span 53-54:  construction => construct-01
Oracle Span 2-3:  defense => defend-01
Oracle Span 56-57:  defense => defend
Oracle Span 32-33:  depth => depth
Oracle Span 48-49:  development => develop-02
Oracle Span 37-38:  distances => distance
Oracle Span 78-79:  division => division
Oracle Span 47-48:  economic => economy
Oracle Span 77-78:  elite => elite
Oracle Span 13-14:  engage => engage-01
Oracle Span 65-66:  equipment => equipment
Oracle Span 68-69:  establish => establish-01
Oracle Span 10-11:  forces => force
Oracle Span 31-32:  great => great
Oracle Span 36-37:  great => great
Oracle Span 70-71:  high => high
Oracle Span 74-75:  high => high
Oracle Span 22-23:  improve => improve-01
Oracle Span 50-51:  increase => increase-01
Oracle Span 57-58:  industry => industry
Oracle Span 44-45:  influence => influence-01
Oracle Span 62-63:  internationalization => internationalize-00
Oracle Span 51-52:  investment => invest-01
Oracle Span 17-18:  long => long
Oracle Span 64-65:  military => military
Oracle Span 60-61:  modernization => modernize-01
Oracle Span 46-47:  national => nation
Oracle Span 41-42:  premise => premise-01
Oracle Span 72-73:  quality => quality
Oracle Span 19-20:  range => range-01
Oracle Span 8-9:  should => recommend-01
Oracle Span 9-10:  strengthen => strengthen-01
Oracle Span 76-77:  tech => tech
Oracle Span 15-16:  ultra => ultra
Oracle Span 7-8:  we => we

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	best	_	JJS	JJS	_	3	amod	_	_
3	defense	_	NN	NN	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	0	root	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	attack	_	VB	VB	_	4	xcomp	_	_
7	-	_	:	:	_	4	punct	_	_
8	we	_	PRP	PRP	_	10	nsubj	_	_
9	should	_	MD	MD	_	10	aux	_	_
10	strengthen	_	VB	VB	_	4	parataxis	_	_
11	forces	_	NNS	NNS	_	10	dobj	_	_
12	which	_	WDT	WDT	_	14	nsubj	_	_
13	can	_	MD	MD	_	14	aux	_	_
14	engage	_	VB	VB	_	11	rcmod	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	ultra-long-range	_	JJ	JJ	_	17	amod	_	_
17	attack	_	NN	NN	_	15	pobj	_	_
18	,	_	,	,	_	14	punct	_	_
19	improve	_	VB	VB	_	14	dep	_	_
20	combat	_	NN	NN	_	21	nn	_	_
21	capability	_	NN	NN	_	19	dobj	_	_
22	throughout	_	IN	IN	_	19	prep	_	_
23	all	_	DT	DT	_	22	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	aerospace	_	NN	NN	_	24	pobj	_	_
26	,	_	,	,	_	14	punct	_	_
27	of	_	IN	IN	_	14	prep	_	_
28	great	_	JJ	JJ	_	29	amod	_	_
29	depth	_	NN	NN	_	27	pobj	_	_
30	,	_	,	,	_	27	punct	_	_
31	and	_	CC	CC	_	27	cc	_	_
32	over	_	IN	IN	_	27	conj	_	_
33	great	_	JJ	JJ	_	34	amod	_	_
34	distances	_	NNS	NNS	_	32	pobj	_	_
35	.	_	.	.	_	4	punct	_	_
1	On	_	IN	IN	_	12	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	premise	_	NN	NN	_	1	pobj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	avoiding	_	VBG	VBG	_	4	pcomp	_	_
6	influence	_	NN	NN	_	5	dobj	_	_
7	on	_	IN	IN	_	5	prep	_	_
8	national	_	JJ	JJ	_	10	amod	_	_
9	economic	_	JJ	JJ	_	10	amod	_	_
10	development	_	NN	NN	_	7	pobj	_	_
11	,	_	,	,	_	12	punct	_	_
12	increase	_	VB	VB	_	0	root	_	_
13	investment	_	NN	NN	_	12	dobj	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	construction	_	NN	NN	_	13	conj	_	_
16	of	_	IN	IN	_	13	prep	_	_
17	the	_	DT	DT	_	19	det	_	_
18	defense	_	NN	NN	_	19	nn	_	_
19	industry	_	NN	NN	_	16	pobj	_	_
20	,	_	,	,	_	12	punct	_	_
21	accelerate	_	VB	VB	_	12	conj	_	_
22	modernization	_	NN	NN	_	21	dobj	_	_
23	and	_	CC	CC	_	22	cc	_	_
24	internationalization	_	NN	NN	_	22	conj	_	_
25	of	_	IN	IN	_	22	prep	_	_
26	military	_	JJ	JJ	_	27	amod	_	_
27	equipment	_	NN	NN	_	25	pobj	_	_
28	,	_	,	,	_	12	punct	_	_
29	and	_	CC	CC	_	12	cc	_	_
30	establish	_	VB	VB	_	12	conj	_	_
31	a	_	DT	DT	_	36	det	_	_
32	high-quality	_	JJ	JJ	_	36	amod	_	_
33	,	_	,	,	_	36	punct	_	_
34	high-tech	_	JJ	JJ	_	36	amod	_	_
35	elite	_	JJ	JJ	_	36	amod	_	_
36	division	_	NN	NN	_	30	dobj	_	_
37	.	_	.	.	_	12	punct	_	_

Oracle:
(a / attack-01, domain, d / defend-01)
(a10 / avoid-01, ARG1, i6 / influence-01)
(a2 / and, op, i / improve-01)
(a2 / and, op, s / strengthen-01)
(a3 / aerospace, mod, a4 / all)
(a6 / and, op, a7 / accelerate-01)
(a6 / and, op, e2 / establish-01)
(a6 / and, op, i2 / increase-01)
(a7 / accelerate-01, ARG1, a9 / and)
(a8 / and, op, c3 / construct-01)
(a8 / and, op, i3 / invest-01)
(a9 / and, op, i5 / internationalize-00)
(a9 / and, op, m3 / modernize-01)
(c / capable-41, ARG2, c2 / combat-01)
(c / capable-41, extent, d3 / distance)
(c / capable-41, location, a3 / aerospace)
(c / capable-41, mod, d2 / depth)
(c3 / construct-01, ARG1, i4 / industry)
(d / defend-01, manner, g / good)
(d2 / depth, mod, g2 / great)
(d3 / distance, mod, g3 / great)
(d5 / division, mod, e4 / elite)
(d5 / division, mod, q / quality)
(d5 / division, mod, t / tech)
(d6 / develop-02, ARG1, n / nation)
(d6 / develop-02, mod, e5 / economy)
(e / engage-01, ARG0, f / force)
(e / engage-01, ARG1, f / force)
(e / engage-01, ARG2, a5 / attack-01)
(e / engage-01, mod, p / possible)
(e2 / establish-01, ARG1, d5 / division)
(e3 / equipment, mod, m4 / military)
(g / good, degree, m2 / most)
(i / improve-01, ARG0, w / we)
(i / improve-01, ARG1, c / capable-41)
(i2 / increase-01, ARG1, a8 / and)
(i3 / invest-01, ARG2, i4 / industry)
(i4 / industry, mod, d4 / defend)
(i5 / internationalize-00, ARG1, e3 / equipment)
(i6 / influence-01, ARG1, d6 / develop-02)
(l / long, degree, u / ultra)
(m3 / modernize-01, ARG1, e3 / equipment)
(p2 / premise-01, ARG1, a6 / and)
(p2 / premise-01, ARG2, a10 / avoid-01)
(q / quality, mod, h2 / high)
(r / recommend-01, ARG1, a2 / and)
(r2 / range-01, ARG1, a5 / attack-01)
(r2 / range-01, ARG2, l / long)
(s / strengthen-01, ARG0, w / we)
(s / strengthen-01, ARG1, f / force)
(t / tech, mod, h / high)

Input(Some(Graph((multi-sentence :snt1 (attack-01 :domain (defend-01 :manner (good :degree most))) :snt2 (recommend-01 :ARG1 (and :op (improve-01 :ARG1 (capable-41 :mod (depth :mod great) :extent (distance :mod great) :location (aerospace :mod all) :ARG2 combat-01) :ARG0 we) :op (strengthen-01 :ARG1 (force :ARG0-of (engage-01 :mod possible :ARG2 (attack-01 :ARG1-of (range-01 :ARG2 (long :degree ultra))) :ARG1 force)) :ARG0 we))) :snt3 (and :ARG1-of (premise-01 :ARG2 (avoid-01 :ARG1 (influence-01 :ARG1 (develop-02 :mod economy :ARG1 nation)) :ARG0 you)) :op (establish-01 :ARG1 (division :mod (quality :mod high) :mod elite :mod (tech :mod high)) :mode imperative :ARG0 you) :op (accelerate-01 :ARG1 (and :op (internationalize-00 :ARG1 equipment) :op (modernize-01 :ARG1 (equipment :mod military))) :mode imperative :ARG0 you) :op (increase-01 :ARG1 (and :op (construct-01 :ARG1 industry) :op (invest-01 :ARG2 (industry :mod defend))) :ARG0 you :mode imperative))),ArrayBuffer(Span(5,6,List(0),attack,attack-01,false), Span(1,2,List(1, 2),best,(good :degree most),false), Span(8,9,List(3),should,recommend-01,false), Span(34,35,List(4),and,and,false), Span(22,23,List(5),improve,improve-01,false), Span(23,24,List(6),combat,combat-01,false), Span(28,29,List(7),aerospace,aerospace,false), Span(26,27,List(8),all,all,false), Span(37,38,List(9),distances,distance,false), Span(31,32,List(10),great,great,false), Span(32,33,List(11),depth,depth,false), Span(36,37,List(12),great,great,false), Span(9,10,List(13),strengthen,strengthen-01,false), Span(10,11,List(14),forces,force,false), Span(13,14,List(15),engage,engage-01,false), Span(12,13,List(16),can,possible,false), Span(20,21,List(17),attack,attack-01,false), Span(19,20,List(18),range,range-01,false), Span(17,18,List(19),long,long,false), Span(15,16,List(20),ultra,ultra,false), Span(7,8,List(21),we,we,false), Span(52,53,List(22),and,and,false), Span(41,42,List(23),premise,premise-01,false), Span(43,44,List(24),avoiding,avoid-01,false), Span(44,45,List(25),influence,influence-01,false), Span(68,69,List(26),establish,establish-01,false), Span(78,79,List(27),division,division,false), Span(72,73,List(28),quality,quality,false), Span(70,71,List(29),high,high,false), Span(77,78,List(30),elite,elite,false), Span(76,77,List(31),tech,tech,false), Span(74,75,List(32),high,high,false), Span(59,60,List(33),accelerate,accelerate-01,false), Span(61,62,List(34),and,and,false), Span(65,66,List(35),equipment,equipment,false), Span(64,65,List(36),military,military,false), Span(50,51,List(37),increase,increase-01,false), Span(67,68,List(38),and,and,false), Span(57,58,List(39),industry,industry,false), Span(2,3,List(40),defense,defend-01,false), Span(24,25,List(41),capability,capable-41,false), Span(48,49,List(42),development,develop-02,false), Span(47,48,List(43),economic,economy,false), Span(46,47,List(44),national,nation,false), Span(62,63,List(45),internationalization,internationalize-00,false), Span(60,61,List(46),modernization,modernize-01,false), Span(53,54,List(47),construction,construct-01,false), Span(51,52,List(48),investment,invest-01,false), Span(56,57,List(49),defense,defend,false)),Map(45 -> internationalize-00, 39 -> industry, 30 -> elite, 2 -> most, 5 -> improve-01, 48 -> invest-01, 33 -> accelerate-01, 27 -> division, 12 -> great, 8 -> all, 15 -> engage-01, 42 -> develop-02, 36 -> military, 21 -> we, 18 -> range-01, 24 -> avoid-01, 41 -> capable-41, 35 -> equipment, 7 -> aerospace, 17 -> attack-01, 1 -> good, 44 -> nation, 23 -> premise-01, 38 -> and, 47 -> construct-01, 26 -> establish-01, 4 -> and, 11 -> depth, 32 -> high, 14 -> force, 29 -> high, 20 -> ultra, 46 -> modernize-01, 34 -> and, 28 -> quality, 6 -> combat-01, 40 -> defend-01, 49 -> defend, 43 -> economy, 9 -> distance, 0 -> attack-01, 22 -> and, 16 -> possible, 37 -> increase-01, 19 -> long, 3 -> recommend-01, 10 -> great, 31 -> tech, 25 -> influence-01, 13 -> strengthen-01),Map(a7 -> accelerate-01, e -> engage-01, m3 -> modernize-01, n -> nation, w -> we, h -> high, g3 -> great, i4 -> industry, a10 -> avoid-01, q -> quality, e5 -> economy, h2 -> high, t -> tech, m2 -> most, d3 -> distance, d6 -> develop-02, e2 -> establish-01, p2 -> premise-01, a9 -> and, a3 -> aerospace, i6 -> influence-01, s -> strengthen-01, a6 -> and, d -> defend-01, g2 -> great, i3 -> invest-01, r2 -> range-01, g -> good, p -> possible, c3 -> construct-01, a -> attack-01, e4 -> elite, d2 -> depth, a5 -> attack-01, d5 -> division, a8 -> and, m4 -> military, i2 -> increase-01, i5 -> internationalize-00, i -> improve-01, a2 -> and, r -> recommend-01, c -> capable-41, l -> long, u -> ultra, d4 -> defend, f -> force, e3 -> equipment, c2 -> combat-01, a4 -> all))),[Ljava.lang.String;@482bce4f,Annotation([Ljava.lang.String;@366647c2,[Ljava.lang.String;@6a6afff2,[Ljava.lang.String;@1649b0e6),Annotation([Ljava.lang.String;@865dd6,[Ljava.lang.String;@4da4253,[Ledu.cmu.lti.nlp.amr.Dependency;@3972a855),Annotation([Ljava.lang.String;@62e7f11d,[Ljava.lang.String;@503d687a,[Ljava.lang.String;@6a370f4),Annotation([Ljava.lang.String;@2abf4075,[Ljava.lang.String;@770d3326,[Ledu.cmu.lti.nlp.amr.Entity;@4cc8eb05))
AMR:
(a / attack-01, ARG1, d / defend-01)
(a10 / avoid-01, ARG1, a / attack-01)
(a2 / and, op, d2 / depth)
(a2 / and, op, d3 / distance)
(a3 / aerospace, quant, a4 / all)
(a6 / and, op, c3 / construct-01)
(a6 / and, op, i3 / invest-01)
(a7 / accelerate-01, ARG1, m3 / modernize-01)
(a8 / and, op, e2 / establish-01)
(a8 / and, op, e3 / equipment)
(a9 / and, op, m3 / modernize-01)
(c / capable-41, ARG1, a5 / attack-01)
(c / capable-41, ARG2, c2 / combat-01)
(c3 / construct-01, ARG1, d4 / defend)
(d / defend-01, ARG1, s / strengthen-01)
(d / defend-01, mod, g / good)
(d2 / depth, mod, g3 / great)
(d3 / distance, mod, g2 / great)
(d5 / division, purpose, a / attack-01)
(d6 / develop-02, purpose, a / attack-01)
(e / engage-01, ARG0, f / force)
(e / engage-01, ARG1, a2 / and)
(e / engage-01, ARG2, a5 / attack-01)
(e2 / establish-01, ARG1, a / attack-01)
(e4 / elite, mod, h / high)
(e5 / economy, mod, n / nation)
(g / good, degree, m2 / most)
(h / high, purpose, a / attack-01)
(h2 / high, purpose, a / attack-01)
(i / improve-01, ARG0, a4 / all)
(i / improve-01, ARG1, c / capable-41)
(i2 / increase-01, ARG1, a / attack-01)
(i3 / invest-01, ARG1, a / attack-01)
(i4 / industry, purpose, a / attack-01)
(i5 / internationalize-00, ARG1, a / attack-01)
(i6 / influence-01, ARG1, a / attack-01)
(l / long, mod, u / ultra)
(m3 / modernize-01, ARG1, a / attack-01)
(m4 / military, purpose, a / attack-01)
(n / nation, purpose, a / attack-01)
(p / possible, domain, e / engage-01)
(p2 / premise-01, ARG1, a / attack-01)
(q / quality, mod, h2 / high)
(r / recommend-01, ARG1, f / force)
(r2 / range-01, ARG1, a5 / attack-01)
(r2 / range-01, ARG2, l / long)
(s / strengthen-01, ARG0, w / we)
(s / strengthen-01, ARG1, f / force)
(t / tech, mod, h / high)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.1.0.3.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.3
WARNING: makeIds can't find span Id: 0.2.3.0
WARNING: makeIds can't find span Id: 0.2.3.0.0
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.1
WARNING: makeIds can't find span Id: 0.2.2.1.2
WARNING: makeIds can't find span Id: 0.2.2.1.2.0
WARNING: makeIds can't find span Id: 0.2.2.1.1
WARNING: makeIds can't find span Id: 0.2.2.1.0
WARNING: makeIds can't find span Id: 0.2.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.1.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.2
WARNING: makeIds can't find span Id: 0.2.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.2.3.0.0.0
WARNING: makeIds can't find span Id: 0.2.3.0.0.0.1
WARNING: makeIds can't find span Id: 0.2.3.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.1.1
WARNING: makeIds can't find span Id: 0.2.1.1.0
WARNING: makeIds can't find span Id: 0.2.0.2.1
WARNING: makeIds can't find span Id: 0.2.0.2.0
WARNING: makeIds can't find span Id: 0.2.0.2.0.0.0
Decoded in 7,304,440 microseconds
Sentence: The battle horn is about to sound, the people are already fully equipped and ready to go.

Oracle Span 1:  about => about
Oracle Span 2:  already => already
Oracle Span 3:  and => and
Oracle Span 4:  battle => battle
Oracle Span 5:  equipped => equip-01
Oracle Span 6:  fully => full
Oracle Span 7:  go => go-01
Oracle Span 8:  horn => horn
Oracle Span 9:  ready => ready-01
Oracle Span 10:  sound => sound-02
Spans:
Span 4-5:  about => about
Span 11-12:  already => already
Span 14-15:  and => and
Span 1-2:  battle => battle
Span 13-14:  equipped => equip-01
Span 12-13:  fully => full
Span 17-18:  go => go-01
Span 2-3:  horn => horn
Span 15-16:  ready => ready-01
Span 6-7:  sound => sound-02

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 4-5:  about => about
Oracle Span 11-12:  already => already
Oracle Span 14-15:  and => and
Oracle Span 1-2:  battle => battle
Oracle Span 13-14:  equipped => equip-01
Oracle Span 12-13:  fully => full
Oracle Span 17-18:  go => go-01
Oracle Span 2-3:  horn => horn
Oracle Span 15-16:  ready => ready-01
Oracle Span 6-7:  sound => sound-02

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	battle	_	NN	NN	_	3	nn	_	_
3	horn	_	NN	NN	_	5	nsubj	_	_
4	is	_	VBZ	VBZ	_	5	aux	_	_
5	about	_	IN	IN	_	14	ccomp	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	sound	_	VB	VB	_	5	xcomp	_	_
8	,	_	,	,	_	14	punct	_	_
9	the	_	DT	DT	_	10	det	_	_
10	people	_	NNS	NNS	_	14	nsubjpass	_	_
11	are	_	VBP	VBP	_	14	auxpass	_	_
12	already	_	RB	RB	_	14	advmod	_	_
13	fully	_	RB	RB	_	14	advmod	_	_
14	equipped	_	VBN	VBN	_	0	root	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	ready	_	JJ	JJ	_	14	conj	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	go	_	VB	VB	_	16	xcomp	_	_
19	.	_	.	.	_	14	punct	_	_

Oracle:
(a / and, op, e / equip-01)
(a / and, op, r / ready-01)
(a / and, op, s / sound-02)
(e / equip-01, manner, f / full)
(e / equip-01, time, a3 / already)
(h / horn, mod, b / battle)
(r / ready-01, ARG2, g / go-01)
(s / sound-02, ARG0, h / horn)
(s / sound-02, time, a2 / about)

Input(Some(Graph((and :op (ready-01 :ARG2 (go-01 :ARG1 person) :ARG1 person) :op (equip-01 :manner full :time already :ARG1 person) :op (sound-02 :time about :ARG0 (horn :mod battle))),ArrayBuffer(Span(14,15,List(0),and,and,false), Span(15,16,List(1),ready,ready-01,false), Span(17,18,List(2),go,go-01,false), Span(13,14,List(3),equipped,equip-01,false), Span(11,12,List(4),already,already,false), Span(6,7,List(5),sound,sound-02,false), Span(4,5,List(6),about,about,false), Span(2,3,List(7),horn,horn,false), Span(1,2,List(8),battle,battle,false), Span(12,13,List(9),fully,full,false)),Map(2 -> go-01, 5 -> sound-02, 8 -> battle, 7 -> horn, 1 -> ready-01, 4 -> already, 6 -> about, 9 -> full, 0 -> and, 3 -> equip-01),Map(e -> equip-01, h -> horn, b -> battle, s -> sound-02, a3 -> already, g -> go-01, a -> and, a2 -> about, r -> ready-01, f -> full))),[Ljava.lang.String;@51f116b8,Annotation([Ljava.lang.String;@19d481b,[Ljava.lang.String;@1f97cf0d,[Ljava.lang.String;@140c9f39),Annotation([Ljava.lang.String;@4d910fd6,[Ljava.lang.String;@26275bef,[Ledu.cmu.lti.nlp.amr.Dependency;@7690781),Annotation([Ljava.lang.String;@77eca502,[Ljava.lang.String;@3246fb96,[Ljava.lang.String;@2e222612),Annotation([Ljava.lang.String;@61386958,[Ljava.lang.String;@73ee04c8,[Ledu.cmu.lti.nlp.amr.Entity;@7671cb68))
AMR:
(a / and, op, e / equip-01)
(a / and, op, r / ready-01)
(e / equip-01, ARG1, h / horn)
(e / equip-01, manner, f / full)
(e / equip-01, time, a3 / already)
(g / go-01, ARG1, s / sound-02)
(h / horn, mod, b / battle)
(r / ready-01, ARG1, g / go-01)
(s / sound-02, ARG1, a2 / about)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 221,471 microseconds
Sentence: Without the people's support we will accomplish nothing; with the support of the people, we will be all-powerful.

Oracle Span 1:  accomplish => accomplish-01
Oracle Span 2:  all => all
Oracle Span 3:  nothing => nothing
Oracle Span 4:  powerful => powerful
Oracle Span 5:  support => support-01
Oracle Span 6:  support => support-01
Oracle Span 7:  we => we
Spans:
Span 7-8:  accomplish => accomplish-01
Span 20-21:  all => all
Span 8-9:  nothing => nothing
Span 22-23:  powerful => powerful
Span 4-5:  support => support-01
Span 12-13:  support => support-01
Span 5-6:  we => we

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 7-8:  accomplish => accomplish-01
Oracle Span 20-21:  all => all
Oracle Span 8-9:  nothing => nothing
Oracle Span 22-23:  powerful => powerful
Oracle Span 4-5:  support => support-01
Oracle Span 12-13:  support => support-01
Oracle Span 5-6:  we => we

Dependencies:
1	Without	_	IN	IN	_	8	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	people	_	NNS	NNS	_	5	poss	_	_
4	's	_	POS	POS	_	3	possessive	_	_
5	support	_	NN	NN	_	1	pobj	_	_
6	we	_	PRP	PRP	_	8	nsubj	_	_
7	will	_	MD	MD	_	8	aux	_	_
8	accomplish	_	VB	VB	_	0	root	_	_
9	nothing	_	NN	NN	_	8	dobj	_	_
10	;	_	:	:	_	8	punct	_	_
11	with	_	IN	IN	_	21	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	support	_	NN	NN	_	11	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	people	_	NNS	NNS	_	14	pobj	_	_
17	,	_	,	,	_	21	punct	_	_
18	we	_	PRP	PRP	_	21	nsubj	_	_
19	will	_	MD	MD	_	21	aux	_	_
20	be	_	VB	VB	_	21	cop	_	_
21	all-powerful	_	NN	NN	_	8	parataxis	_	_
22	.	_	.	.	_	8	punct	_	_

Oracle:
(a / accomplish-01, ARG0, w / we)
(a / accomplish-01, ARG1, n / nothing)
(a / accomplish-01, manner, s / support-01)
(p2 / powerful, domain, w / we)
(p2 / powerful, manner, s2 / support-01)
(p2 / powerful, mod, a2 / all)
(s / support-01, ARG1, w / we)
(s2 / support-01, ARG1, w / we)

Input(Some(Graph((contrast-01 :ARG1 (accomplish-01 :manner (support-01 :ARG0 person :polarity - :ARG1 we) :ARG1 nothing :ARG0 we) :ARG2 (powerful :manner (support-01 :ARG0 person :ARG1 we) :mod all :domain we)),ArrayBuffer(Span(7,8,List(0),accomplish,accomplish-01,false), Span(4,5,List(1),support,support-01,false), Span(8,9,List(2),nothing,nothing,false), Span(5,6,List(3),we,we,false), Span(22,23,List(4),powerful,powerful,false), Span(12,13,List(5),support,support-01,false), Span(20,21,List(6),all,all,false)),Map(2 -> nothing, 5 -> support-01, 1 -> support-01, 4 -> powerful, 6 -> all, 0 -> accomplish-01, 3 -> we),Map(w -> we, n -> nothing, s2 -> support-01, p2 -> powerful, s -> support-01, a -> accomplish-01, a2 -> all))),[Ljava.lang.String;@49dc7102,Annotation([Ljava.lang.String;@6b8ca3c8,[Ljava.lang.String;@68c72235,[Ljava.lang.String;@10959ece),Annotation([Ljava.lang.String;@3a6bb9bf,[Ljava.lang.String;@34f7cfd9,[Ledu.cmu.lti.nlp.amr.Dependency;@65f095f8),Annotation([Ljava.lang.String;@59af0466,[Ljava.lang.String;@3e6ef8ad,[Ljava.lang.String;@346d61be),Annotation([Ljava.lang.String;@55536d9e,[Ljava.lang.String;@747edf66,[Ledu.cmu.lti.nlp.amr.Entity;@3d1cfad4))
AMR:
(a / accomplish-01, ARG0, w / we)
(a / accomplish-01, ARG1, n / nothing)
(a / accomplish-01, ARG2, s / support-01)
(p2 / powerful, mod, a2 / all)
(s / support-01, ARG1, p2 / powerful)
(s2 / support-01, ARG1, p2 / powerful)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 184,829 microseconds
Sentence: My fellow citizens, it is time for us to say "no" to others. Therefore, we must achieve:

Oracle Span 1:  achieve => achieve-01
Oracle Span 2:  citizens => citizen
Oracle Span 3:  fellow => fellow
Oracle Span 4:  no => no
Oracle Span 5:  others => (person :mod other)
Oracle Span 6:  say => say-01
Oracle Span 7:  time => time
Oracle Span 8:  we => we
Spans:
Span 21-22:  achieve => achieve-01
Span 2-3:  citizens => citizen
Span 1-2:  fellow => fellow
Span 12-13:  no => no
Span 15-16:  others => (person :mod other)
Span 10-11:  say => say-01
Span 6-7:  time => time
Span 19-20:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of Therefore in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of achieve in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 22
Langrangian relaxation converged after 29 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Therefore in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of achieve in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of : in position 22
Oracle Span 21-22:  achieve => achieve-01
Oracle Span 2-3:  citizens => citizen
Oracle Span 1-2:  fellow => fellow
Oracle Span 12-13:  no => no
Oracle Span 15-16:  others => (person :mod other)
Oracle Span 10-11:  say => say-01
Oracle Span 6-7:  time => time
Oracle Span 19-20:  we => we

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	7	nsubj	_	_
4	,	_	,	,	_	7	punct	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	time	_	NN	NN	_	0	root	_	_
8	for	_	IN	IN	_	7	prep	_	_
9	us	_	PRP	PRP	_	8	pobj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	say	_	VB	VB	_	7	vmod	_	_
12	"	_	``	``	_	13	punct	_	_
13	no	_	UH	UH	_	11	discourse	_	_
14	"	_	''	''	_	13	punct	_	_
15	to	_	TO	TO	_	11	prep	_	_
16	others	_	NNS	NNS	_	15	pobj	_	_
17	.	_	.	.	_	7	punct	_	_
1	Therefore	_	RB	RB	_	5	advmod	_	_
2	,	_	,	,	_	5	punct	_	_
3	we	_	PRP	PRP	_	5	nsubj	_	_
4	must	_	MD	MD	_	5	aux	_	_
5	achieve	_	VB	VB	_	0	root	_	_
6	:	_	:	:	_	5	punct	_	_

Oracle:
(c / citizen, mod, f / fellow)
(p / person, mod, o / other)
(s / say-01, ARG1, t / time)
(s / say-01, ARG2, c / citizen)

Input(Some(Graph((multi-sentence :snt1 (say-01 :ARG2 (citizen :mod fellow :poss i) :ARG1 (time :time-of (say-01 :ARG0 we :ARG1 no :ARG2 (person :mod other))) :ARG0 i) :snt2 (cause-01 :ARG1 (obligate-01 :ARG1 we :ARG2 (achieve-01 :ARG0 we)))),ArrayBuffer(Span(10,11,List(0),say,say-01,false), Span(2,3,List(1),citizens,citizen,false), Span(1,2,List(2),fellow,fellow,false), Span(6,7,List(3),time,time,false), Span(19,20,List(4),we,we,false), Span(12,13,List(5),no,no,false), Span(15,16,List(6, 7),others,(person :mod other),false), Span(21,22,List(8),achieve,achieve-01,false)),Map(2 -> fellow, 5 -> no, 8 -> achieve-01, 7 -> other, 1 -> citizen, 4 -> we, 6 -> person, 0 -> say-01, 3 -> time),Map(n -> no, w -> we, t -> time, s -> say-01, p -> person, a -> achieve-01, c -> citizen, f -> fellow, o -> other))),[Ljava.lang.String;@62230c58,Annotation([Ljava.lang.String;@2cd2a21f,[Ljava.lang.String;@2e55dd0c,[Ljava.lang.String;@74455848),Annotation([Ljava.lang.String;@e7edb54,[Ljava.lang.String;@378542de,[Ledu.cmu.lti.nlp.amr.Dependency;@3738449f),Annotation([Ljava.lang.String;@69e1dd28,[Ljava.lang.String;@11bd0f3b,[Ljava.lang.String;@c333c60),Annotation([Ljava.lang.String;@79da8dc5,[Ljava.lang.String;@1eb5174b,[Ledu.cmu.lti.nlp.amr.Entity;@67080771))
AMR:
(a / achieve-01, ARG0, c / citizen)
(a / achieve-01, ARG1, w / we)
(a / achieve-01, ARG6, p / person)
(c / citizen, mod, f / fellow)
(p / person, mod, o / other)
(s / say-01, ARG1, w / we)
(s / say-01, ARG6, n / no)
(t / time, condition, s / say-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.2
WARNING: makeIds can't find span Id: 0.0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.1
Decoded in 250,903 microseconds
Sentence: 1. Establish guaranteed funds, improve working environment and mechanisms, recruit back to China the hundreds of thousands of IT professionals who have emigrated to and linger in the United States and around the world.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  around => around
Oracle Span 5:  back => back
Oracle Span 6:  China => (country :name (name :op "China"))
Oracle Span 7:  emigrated => emigrate-01
Oracle Span 8:  environment => environment
Oracle Span 9:  Establish => establish-01
Oracle Span 10:  funds => fund
Oracle Span 11:  guaranteed => guarantee-01
Oracle Span 12:  improve => improve-01
Oracle Span 13:  IT => IT
Oracle Span 14:  linger => linger-01
Oracle Span 15:  mechanisms => mechanism
Oracle Span 16:  professionals => professional
Oracle Span 17:  recruit => recruit-01
Oracle Span 18:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 19:  working => work-01
Oracle Span 20:  world => world
Spans:
Span 8-9:  and => and
Span 26-27:  and => and
Span 32-33:  and => and
Span 33-34:  around => around
Span 12-13:  back => back
Span 14-15:  China => (country :name (name :op "China"))
Span 24-25:  emigrated => emigrate-01
Span 7-8:  environment => environment
Span 1-2:  Establish => establish-01
Span 3-4:  funds => fund
Span 2-3:  guaranteed => guarantee-01
Span 5-6:  improve => improve-01
Span 20-21:  IT => IT
Span 27-28:  linger => linger-01
Span 9-10:  mechanisms => mechanism
Span 21-22:  professionals => professional
Span 11-12:  recruit => recruit-01
Span 30-32:  United States => (country :name (name :op "States" :op "United"))
Span 6-7:  working => work-01
Span 35-36:  world => world

 *** WARNING: The dependency tree seems broken.  I can't find the head of world in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 37
Langrangian relaxation converged after 43 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of world in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 37
Oracle Span 8-9:  and => and
Oracle Span 26-27:  and => and
Oracle Span 32-33:  and => and
Oracle Span 33-34:  around => around
Oracle Span 12-13:  back => back
Oracle Span 14-15:  China => (country :name (name :op "China"))
Oracle Span 24-25:  emigrated => emigrate-01
Oracle Span 7-8:  environment => environment
Oracle Span 1-2:  Establish => establish-01
Oracle Span 3-4:  funds => fund
Oracle Span 2-3:  guaranteed => guarantee-01
Oracle Span 5-6:  improve => improve-01
Oracle Span 20-21:  IT => IT
Oracle Span 27-28:  linger => linger-01
Oracle Span 9-10:  mechanisms => mechanism
Oracle Span 21-22:  professionals => professional
Oracle Span 11-12:  recruit => recruit-01
Oracle Span 30-32:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 6-7:  working => work-01
Oracle Span 35-36:  world => world

Dependencies:
1	1	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Establish	_	VB	VB	_	0	root	_	_
2	guaranteed	_	VBN	VBN	_	3	amod	_	_
3	funds	_	NNS	NNS	_	1	dobj	_	_
4	,	_	,	,	_	1	punct	_	_
5	improve	_	VB	VB	_	1	conj	_	_
6	working	_	VBG	VBG	_	7	amod	_	_
7	environment	_	NN	NN	_	5	dobj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	mechanisms	_	NNS	NNS	_	7	conj	_	_
10	,	_	,	,	_	7	punct	_	_
11	recruit	_	RB	RB	_	12	advmod	_	_
12	back	_	RB	RB	_	7	advmod	_	_
13	to	_	TO	TO	_	12	prep	_	_
14	China	_	NNP	NNP	_	13	pobj	_	_
15	the	_	DT	DT	_	16	det	_	_
16	hundreds	_	NNS	NNS	_	7	dep	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	thousands	_	NNS	NNS	_	17	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	IT	_	NNP	NNP	_	21	nn	_	_
21	professionals	_	NNS	NNS	_	19	pobj	_	_
22	who	_	WP	WP	_	24	nsubj	_	_
23	have	_	VBP	VBP	_	24	aux	_	_
24	emigrated	_	VBD	VBD	_	5	dep	_	_
25	to	_	TO	TO	_	24	xcomp	_	_
26	and	_	CC	CC	_	1	cc	_	_
27	linger	_	VB	VB	_	1	conj	_	_
28	in	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	31	det	_	_
30	United	_	NNP	NNP	_	31	nn	_	_
31	States	_	NNPS	NNPS	_	28	pobj	_	_
32	and	_	CC	CC	_	28	cc	_	_
33	around	_	IN	IN	_	28	conj	_	_
34	the	_	DT	DT	_	35	det	_	_
35	world	_	NN	NN	_	33	pobj	_	_
36	.	_	.	.	_	1	punct	_	_

Oracle:
(a / and, op, e / establish-01)
(a / and, op, i / improve-01)
(a / and, op, r / recruit-01)
(a2 / and, op, e2 / environment)
(a2 / and, op, m / mechanism)
(a3 / and, op, a4 / around)
(a3 / and, op, c / country)
(a4 / around, op, w2 / world)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e / establish-01, ARG1, f / fund)
(e3 / emigrate-01, ARG0, p / professional)
(e3 / emigrate-01, ARG2, a3 / and)
(g / guarantee-01, ARG1, f / fund)
(i / improve-01, ARG1, a2 / and)
(l / linger-01, ARG1, p / professional)
(l / linger-01, ARG2, a3 / and)
(m / mechanism, mod, w3 / work-01)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "China")
(p / professional, mod, i2 / IT)
(r / recruit-01, ARG1, p / professional)
(r / recruit-01, destination, c2 / country)
(r / recruit-01, direction, b / back)

Input(Some(Graph((and :li 1 :op (recruit-01 :destination (country :name (name :op "China")) :direction back :ARG1 (professional :ARG1-of (linger-01 :ARG2 and) :mod IT :ARG0-of (emigrate-01 :ARG2 (and :op (around :op world) :op (country :name (name :op "States" :op "United")))) :quant (multiple :op 100000))) :op (improve-01 :ARG1 (and :op (mechanism :mod work-01) :op (environment :mod work-01))) :op (establish-01 :ARG1 (fund :ARG1-of guarantee-01))),ArrayBuffer(Span(30,32,List(0, 1, 2, 3),United States,(country :name (name :op "States" :op "United")),false), Span(14,15,List(4, 5, 6),China,(country :name (name :op "China")),false), Span(8,9,List(7),and,and,false), Span(11,12,List(8),recruit,recruit-01,false), Span(12,13,List(9),back,back,false), Span(21,22,List(10),professionals,professional,false), Span(27,28,List(11),linger,linger-01,false), Span(20,21,List(12),IT,IT,false), Span(24,25,List(13),emigrated,emigrate-01,false), Span(26,27,List(14),and,and,false), Span(33,34,List(15),around,around,false), Span(35,36,List(16),world,world,false), Span(5,6,List(17),improve,improve-01,false), Span(32,33,List(18),and,and,false), Span(9,10,List(19),mechanisms,mechanism,false), Span(6,7,List(20),working,work-01,false), Span(7,8,List(21),environment,environment,false), Span(1,2,List(22),Establish,establish-01,false), Span(3,4,List(23),funds,fund,false), Span(2,3,List(24),guaranteed,guarantee-01,false)),Map(2 -> "States", 5 -> name, 12 -> IT, 15 -> around, 8 -> recruit-01, 21 -> environment, 18 -> and, 24 -> guarantee-01, 7 -> and, 17 -> improve-01, 1 -> name, 23 -> fund, 4 -> country, 11 -> linger-01, 14 -> and, 20 -> work-01, 6 -> "China", 9 -> back, 0 -> country, 22 -> establish-01, 16 -> world, 19 -> mechanism, 10 -> professional, 3 -> "United", 13 -> emigrate-01),Map(e -> establish-01, n -> name, b -> back, e2 -> environment, a3 -> and, w3 -> work-01, m -> mechanism, g -> guarantee-01, p -> professional, a -> and, i2 -> IT, w2 -> world, a2 -> and, i -> improve-01, r -> recruit-01, c -> country, l -> linger-01, f -> fund, e3 -> emigrate-01, n2 -> name, c2 -> country, a4 -> around))),[Ljava.lang.String;@72cde7cc,Annotation([Ljava.lang.String;@5fd4f8f5,[Ljava.lang.String;@696da30b,[Ljava.lang.String;@4e7912d8),Annotation([Ljava.lang.String;@53976f5c,[Ljava.lang.String;@2bfc268b,[Ledu.cmu.lti.nlp.amr.Dependency;@2f8dad04),Annotation([Ljava.lang.String;@29e495ff,[Ljava.lang.String;@41e1e210,[Ljava.lang.String;@be35cd9),Annotation([Ljava.lang.String;@4944252c,[Ljava.lang.String;@44821a96,[Ledu.cmu.lti.nlp.amr.Entity;@a3d8174))
AMR:
(a / and, op, m / mechanism)
(a2 / and, op, a4 / around)
(a2 / and, op, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e / establish-01, ARG0, a3 / and)
(e / establish-01, ARG1, g / guarantee-01)
(e3 / emigrate-01, ARG1, w2 / world)
(e3 / emigrate-01, ARG6, a3 / and)
(e3 / emigrate-01, mod, p / professional)
(g / guarantee-01, ARG1, f / fund)
(i / improve-01, ARG0, e2 / environment)
(i / improve-01, ARG6, w3 / work-01)
(l / linger-01, ARG0, a2 / and)
(l / linger-01, ARG1, a3 / and)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "China")
(p / professional, mod, i2 / IT)
(r / recruit-01, ARG1, m / mechanism)
(r / recruit-01, ARG6, b / back)
(w3 / work-01, ARG0, a / and)
(w3 / work-01, ARG1, f / fund)
(w3 / work-01, ARG6, c2 / country)

WARNING: makeIds can't find span Id: 0.2.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.2.2.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.3
WARNING: makeIds can't find span Id: 0.2.0.2
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 1,631,458 microseconds
Sentence: 2. Create a few nuclear-powered aircraft carrier battle groups.

Oracle Span 1:  aircraft => aircraft
Oracle Span 2:  battle => battle-01
Oracle Span 3:  carrier => carrier
Oracle Span 4:  Create => create-01
Oracle Span 5:  few => few
Oracle Span 6:  groups => group
Oracle Span 7:  nuclear => nucleus
Oracle Span 8:  powered => power-01
Spans:
Span 7-8:  aircraft => aircraft
Span 9-10:  battle => battle-01
Span 8-9:  carrier => carrier
Span 1-2:  Create => create-01
Span 3-4:  few => few
Span 10-11:  groups => group
Span 4-5:  nuclear => nucleus
Span 6-7:  powered => power-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of groups in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Langrangian relaxation converged after 53 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of groups in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Oracle Span 7-8:  aircraft => aircraft
Oracle Span 9-10:  battle => battle-01
Oracle Span 8-9:  carrier => carrier
Oracle Span 1-2:  Create => create-01
Oracle Span 3-4:  few => few
Oracle Span 10-11:  groups => group
Oracle Span 4-5:  nuclear => nucleus
Oracle Span 6-7:  powered => power-01

Dependencies:
1	2	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Create	_	VB	VB	_	0	root	_	_
2	a	_	DT	DT	_	6	det	_	_
3	few	_	JJ	JJ	_	6	amod	_	_
4	nuclear-powered	_	JJ	JJ	_	6	amod	_	_
5	aircraft	_	NN	NN	_	6	nn	_	_
6	carrier	_	NN	NN	_	8	nsubj	_	_
7	battle	_	NN	NN	_	8	nn	_	_
8	groups	_	NNS	NNS	_	1	xcomp	_	_
9	.	_	.	.	_	1	punct	_	_

Oracle:
(c / create-01, ARG1, g / group)
(c2 / carrier, consist, g / group)
(c2 / carrier, mod, a / aircraft)
(g / group, mod, b / battle-01)
(g / group, quant, f / few)
(p / power-01, ARG0, n / nucleus)
(p / power-01, ARG1, c2 / carrier)

Input(Some(Graph((create-01 :li 2 :ARG1 (group :consist-of (carrier :ARG1-of (power-01 :ARG0 nucleus) :mod aircraft) :quant few :mod battle-01)),ArrayBuffer(Span(1,2,List(0),Create,create-01,false), Span(10,11,List(1),groups,group,false), Span(8,9,List(2),carrier,carrier,false), Span(6,7,List(3),powered,power-01,false), Span(7,8,List(4),aircraft,aircraft,false), Span(3,4,List(5),few,few,false), Span(9,10,List(6),battle,battle-01,false), Span(4,5,List(7),nuclear,nucleus,false)),Map(2 -> carrier, 5 -> few, 7 -> nucleus, 1 -> group, 4 -> aircraft, 6 -> battle-01, 0 -> create-01, 3 -> power-01),Map(n -> nucleus, b -> battle-01, p -> power-01, g -> group, a -> aircraft, c -> create-01, f -> few, c2 -> carrier))),[Ljava.lang.String;@1ba9117e,Annotation([Ljava.lang.String;@732c2a62,[Ljava.lang.String;@272ed83b,[Ljava.lang.String;@41fecb8b),Annotation([Ljava.lang.String;@120f102b,[Ljava.lang.String;@625732,[Ledu.cmu.lti.nlp.amr.Dependency;@51dcb805),Annotation([Ljava.lang.String;@66498326,[Ljava.lang.String;@cad498c,[Ljava.lang.String;@1e6454ec),Annotation([Ljava.lang.String;@2accdbb5,[Ljava.lang.String;@b62d79,[Ledu.cmu.lti.nlp.amr.Entity;@6631f5ca))
AMR:
(b / battle-01, ARG0, f / few)
(b / battle-01, ARG1, a / aircraft)
(b / battle-01, ARG6, c2 / carrier)
(c / create-01, ARG6, c2 / carrier)
(p / power-01, ARG1, c2 / carrier)
(p / power-01, ARG2, n / nucleus)
(p / power-01, ARG6, g / group)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0
Decoded in 288,027 microseconds
Sentence: 3. Manufacture 5000 advanced combat aircraft of various kinds.

Oracle Span 1:  5000 => 5000
Oracle Span 2:  advanced => advance-01
Oracle Span 3:  aircraft => aircraft
Oracle Span 4:  combat => combat-01
Oracle Span 5:  kinds => kind
Oracle Span 6:  Manufacture => manufacture-01
Oracle Span 7:  various => various
Spans:
Span 2-3:  5000 => 5000
Span 3-4:  advanced => advance-01
Span 5-6:  aircraft => aircraft
Span 4-5:  combat => combat-01
Span 8-9:  kinds => kind
Span 1-2:  Manufacture => manufacture-01
Span 7-8:  various => various

 *** WARNING: The dependency tree seems broken.  I can't find the head of kinds in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Langrangian relaxation converged after 41 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of kinds in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 10
Oracle Span 2-3:  5000 => 5000
Oracle Span 3-4:  advanced => advance-01
Oracle Span 5-6:  aircraft => aircraft
Oracle Span 4-5:  combat => combat-01
Oracle Span 8-9:  kinds => kind
Oracle Span 1-2:  Manufacture => manufacture-01
Oracle Span 7-8:  various => various

Dependencies:
1	3	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Manufacture	_	NNP	NNP	_	2	nn	_	_
2	5000	_	NNP	NNP	_	3	nsubj	_	_
3	advanced	_	VBD	VBD	_	0	root	_	_
4	combat	_	VB	VB	_	5	dep	_	_
5	aircraft	_	NN	NN	_	3	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	various	_	JJ	JJ	_	8	amod	_	_
8	kinds	_	NNS	NNS	_	6	pobj	_	_
9	.	_	.	.	_	3	punct	_	_

Oracle:
(a / aircraft, mod, k / kind)
(a / aircraft, purpose, c / combat-01)
(a / aircraft, quant, 5 / 5000)
(a2 / advance-01, ARG1, a / aircraft)
(k / kind, mod, v / various)
(m / manufacture-01, ARG1, a / aircraft)

Input(Some(Graph((manufacture-01 :li 3 :ARG1 (aircraft :mod (kind :mod various) :ARG1-of advance-01 :purpose combat-01 :quant 5000)),ArrayBuffer(Span(1,2,List(0),Manufacture,manufacture-01,false), Span(5,6,List(1),aircraft,aircraft,false), Span(8,9,List(2),kinds,kind,false), Span(7,8,List(3),various,various,false), Span(3,4,List(4),advanced,advance-01,false), Span(4,5,List(5),combat,combat-01,false), Span(2,3,List(6),5000,5000,false)),Map(2 -> kind, 5 -> combat-01, 1 -> aircraft, 4 -> advance-01, 6 -> 5000, 0 -> manufacture-01, 3 -> various),Map(5 -> 5000, k -> kind, v -> various, m -> manufacture-01, a -> aircraft, a2 -> advance-01, c -> combat-01))),[Ljava.lang.String;@5ace1ed4,Annotation([Ljava.lang.String;@1613674b,[Ljava.lang.String;@27ff5d15,[Ljava.lang.String;@4e096385),Annotation([Ljava.lang.String;@649bec2e,[Ljava.lang.String;@693fe6c9,[Ledu.cmu.lti.nlp.amr.Dependency;@34f5090e),Annotation([Ljava.lang.String;@31e5415e,[Ljava.lang.String;@a2431d0,[Ljava.lang.String;@1cbb87f3),Annotation([Ljava.lang.String;@1a4013,[Ljava.lang.String;@1b6e1eff,[Ledu.cmu.lti.nlp.amr.Entity;@306f16f3))
AMR:
(a2 / advance-01, ARG6, k / kind)
(c / combat-01, ARG0, a2 / advance-01)
(c / combat-01, ARG1, 5 / 5000)
(c / combat-01, ARG6, a / aircraft)
(m / manufacture-01, ARG0, 5 / 5000)
(m / manufacture-01, ARG6, v / various)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 196,359 microseconds
Sentence: 4. Accelerate the research and deployment of high-speed intercontinental ballistic missiles which can break missile defense systems and whose range is more than 10,000 nautical miles.

Oracle Span 1:  Accelerate => accelerate-01
Oracle Span 2:  and => and
Oracle Span 3:  ballistic => ballistic
Oracle Span 4:  break => break-01
Oracle Span 5:  can => possible
Oracle Span 6:  defense => defense
Oracle Span 7:  deployment => deploy-01
Oracle Span 8:  high => high
Oracle Span 9:  intercontinental => intercontinental
Oracle Span 10:  miles => (distance-quantity :unit mile)
Oracle Span 11:  missile => missile
Oracle Span 12:  missiles => missile
Oracle Span 13:  more => more-than
Oracle Span 14:  nautical => nautical
Oracle Span 15:  range => range-01
Oracle Span 16:  research => research-01
Oracle Span 17:  speed => speed
Oracle Span 18:  systems => system
Spans:
Span 1-2:  Accelerate => accelerate-01
Span 4-5:  and => and
Span 11-12:  ballistic => ballistic
Span 15-16:  break => break-01
Span 14-15:  can => possible
Span 17-18:  defense => defense
Span 5-6:  deployment => deploy-01
Span 7-8:  high => high
Span 10-11:  intercontinental => intercontinental
Span 27-28:  miles => (distance-quantity :unit mile)
Span 16-17:  missile => missile
Span 12-13:  missiles => missile
Span 23-24:  more => more-than
Span 26-27:  nautical => nautical
Span 21-22:  range => range-01
Span 3-4:  research => research-01
Span 9-10:  speed => speed
Span 18-19:  systems => system

 *** WARNING: The dependency tree seems broken.  I can't find the head of miles in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
Langrangian relaxation converged after 19 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of miles in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 27
Oracle Span 1-2:  Accelerate => accelerate-01
Oracle Span 4-5:  and => and
Oracle Span 11-12:  ballistic => ballistic
Oracle Span 15-16:  break => break-01
Oracle Span 14-15:  can => possible
Oracle Span 17-18:  defense => defense
Oracle Span 5-6:  deployment => deploy-01
Oracle Span 7-8:  high => high
Oracle Span 10-11:  intercontinental => intercontinental
Oracle Span 27-28:  miles => (distance-quantity :unit mile)
Oracle Span 16-17:  missile => missile
Oracle Span 12-13:  missiles => missile
Oracle Span 23-24:  more => more-than
Oracle Span 26-27:  nautical => nautical
Oracle Span 21-22:  range => range-01
Oracle Span 3-4:  research => research-01
Oracle Span 9-10:  speed => speed
Oracle Span 18-19:  systems => system

Dependencies:
1	4	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Accelerate	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	3	det	_	_
3	research	_	NN	NN	_	1	dobj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	deployment	_	NN	NN	_	3	conj	_	_
6	of	_	IN	IN	_	3	prep	_	_
7	high-speed	_	JJ	JJ	_	10	amod	_	_
8	intercontinental	_	JJ	JJ	_	10	amod	_	_
9	ballistic	_	JJ	JJ	_	10	amod	_	_
10	missiles	_	NNS	NNS	_	6	pobj	_	_
11	which	_	WDT	WDT	_	13	nsubj	_	_
12	can	_	MD	MD	_	13	aux	_	_
13	break	_	VB	VB	_	10	rcmod	_	_
14	missile	_	NN	NN	_	16	nn	_	_
15	defense	_	NN	NN	_	16	nn	_	_
16	systems	_	NNS	NNS	_	13	dobj	_	_
17	and	_	CC	CC	_	13	cc	_	_
18	whose	_	WP$	WP$	_	19	poss	_	_
19	range	_	NN	NN	_	25	nsubj	_	_
20	is	_	VBZ	VBZ	_	25	cop	_	_
21	more	_	JJR	JJR	_	22	mwe	_	_
22	than	_	IN	IN	_	23	quantmod	_	_
23	10,000	_	CD	CD	_	25	num	_	_
24	nautical	_	JJ	JJ	_	25	amod	_	_
25	miles	_	NNS	NNS	_	13	conj	_	_
26	.	_	.	.	_	1	punct	_	_

Oracle:
(a / accelerate-01, ARG1, a2 / and)
(a2 / and, op, d3 / deploy-01)
(a2 / and, op, r / research-01)
(b2 / break-01, ARG1, s / system)
(b2 / break-01, ARG2, m / missile)
(b2 / break-01, mod, p / possible)
(d / distance-quantity, unit, m3 / mile)
(d2 / defense, mod, m4 / missile)
(d3 / deploy-01, ARG1, m / missile)
(m / missile, mod, b / ballistic)
(m / missile, mod, i / intercontinental)
(m / missile, mod, s2 / speed)
(m2 / more-than, op, d / distance-quantity)
(m3 / mile, mod, n / nautical)
(r / research-01, ARG1, m / missile)
(r2 / range-01, ARG1, m / missile)
(r2 / range-01, ARG2, m2 / more-than)
(s / system, mod, d2 / defense)
(s2 / speed, mod, h / high)

Input(Some(Graph((accelerate-01 :li 4 :ARG1 (and :op (deploy-01 :ARG1 missile) :op (research-01 :ARG1 (missile :ARG2-of (break-01 :mod possible :ARG1 (system :mod (defense :mod missile))) :ARG1-of (range-01 :ARG2 (more-than :op (distance-quantity :unit (mile :mod nautical) :quant 10000))) :mod intercontinental :mod (speed :mod high) :mod ballistic)))),ArrayBuffer(Span(1,2,List(0),Accelerate,accelerate-01,false), Span(4,5,List(1),and,and,false), Span(3,4,List(2),research,research-01,false), Span(12,13,List(3),missiles,missile,false), Span(15,16,List(4),break,break-01,false), Span(14,15,List(5),can,possible,false), Span(18,19,List(6),systems,system,false), Span(17,18,List(7),defense,defense,false), Span(16,17,List(8),missile,missile,false), Span(21,22,List(9),range,range-01,false), Span(27,28,List(10, 11),miles,(distance-quantity :unit mile),false), Span(26,27,List(12),nautical,nautical,false), Span(10,11,List(13),intercontinental,intercontinental,false), Span(9,10,List(14),speed,speed,false), Span(7,8,List(15),high,high,false), Span(11,12,List(16),ballistic,ballistic,false), Span(5,6,List(17),deployment,deploy-01,false), Span(23,24,List(18),more,more-than,false)),Map(2 -> research-01, 5 -> possible, 12 -> nautical, 15 -> high, 8 -> missile, 18 -> more-than, 7 -> defense, 17 -> deploy-01, 1 -> and, 4 -> break-01, 11 -> mile, 14 -> speed, 6 -> system, 9 -> range-01, 0 -> accelerate-01, 16 -> ballistic, 10 -> distance-quantity, 3 -> missile, 13 -> intercontinental),Map(m3 -> mile, n -> nautical, h -> high, s2 -> speed, b -> ballistic, m2 -> more-than, d3 -> deploy-01, b2 -> break-01, s -> system, d -> distance-quantity, m -> missile, r2 -> range-01, p -> possible, a -> accelerate-01, d2 -> defense, m4 -> missile, i -> intercontinental, r -> research-01, a2 -> and))),[Ljava.lang.String;@702b8b12,Annotation([Ljava.lang.String;@22e357dc,[Ljava.lang.String;@49912c99,[Ljava.lang.String;@10163d6),Annotation([Ljava.lang.String;@2dde1bff,[Ljava.lang.String;@15bbf42f,[Ledu.cmu.lti.nlp.amr.Dependency;@550ee7e5),Annotation([Ljava.lang.String;@5f9b2141,[Ljava.lang.String;@247d8ae,[Ljava.lang.String;@48974e45),Annotation([Ljava.lang.String;@6a84a97d,[Ljava.lang.String;@6c130c45,[Ledu.cmu.lti.nlp.amr.Entity;@50ad3bc1))
AMR:
(a / accelerate-01, ARG0, m2 / more-than)
(a / accelerate-01, ARG1, r / research-01)
(a2 / and, op, a / accelerate-01)
(a2 / and, op, d3 / deploy-01)
(b / ballistic, mod, i / intercontinental)
(b2 / break-01, ARG0, m / missile)
(b2 / break-01, ARG1, d2 / defense)
(b2 / break-01, ARG2, m4 / missile)
(b2 / break-01, ARG6, p / possible)
(d / distance-quantity, unit, m3 / mile)
(d3 / deploy-01, ARG0, d / distance-quantity)
(d3 / deploy-01, ARG1, h / high)
(m / missile, mod, h / high)
(m / missile, mod, i / intercontinental)
(r / research-01, ARG1, n / nautical)
(r2 / range-01, ARG1, m2 / more-than)
(s / system, mod, d2 / defense)
(s2 / speed, mod, h / high)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.4
WARNING: makeIds can't find span Id: 0.0.0.0.4.1
WARNING: makeIds can't find span Id: 0.0.0.0.4.0
WARNING: makeIds can't find span Id: 0.0.0.0.4.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.4.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.3.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.3.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.3.0
Decoded in 592,835 microseconds
Sentence: 5. Resume nuclear experiments, and establish military forces in space.

Oracle Span 1:  and => and
Oracle Span 2:  establish => establish-01
Oracle Span 3:  experiments => experiment-01
Oracle Span 4:  forces => force
Oracle Span 5:  military => military
Oracle Span 6:  nuclear => nucleus
Oracle Span 7:  Resume => resume-01
Oracle Span 8:  space => space
Spans:
Span 5-6:  and => and
Span 6-7:  establish => establish-01
Span 3-4:  experiments => experiment-01
Span 8-9:  forces => force
Span 7-8:  military => military
Span 2-3:  nuclear => nucleus
Span 1-2:  Resume => resume-01
Span 10-11:  space => space

 *** WARNING: The dependency tree seems broken.  I can't find the head of space in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 12
Langrangian relaxation converged after 49 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of space in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 12
Oracle Span 5-6:  and => and
Oracle Span 6-7:  establish => establish-01
Oracle Span 3-4:  experiments => experiment-01
Oracle Span 8-9:  forces => force
Oracle Span 7-8:  military => military
Oracle Span 2-3:  nuclear => nucleus
Oracle Span 1-2:  Resume => resume-01
Oracle Span 10-11:  space => space

Dependencies:
1	5	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Resume	_	VB	VB	_	0	root	_	_
2	nuclear	_	JJ	JJ	_	3	amod	_	_
3	experiments	_	NNS	NNS	_	1	dobj	_	_
4	,	_	,	,	_	1	punct	_	_
5	and	_	CC	CC	_	1	cc	_	_
6	establish	_	VB	VB	_	1	conj	_	_
7	military	_	JJ	JJ	_	8	amod	_	_
8	forces	_	NNS	NNS	_	6	dobj	_	_
9	in	_	IN	IN	_	6	prep	_	_
10	space	_	NN	NN	_	9	pobj	_	_
11	.	_	.	.	_	1	punct	_	_

Oracle:
(a / and, op, e / establish-01)
(a / and, op, r / resume-01)
(e / establish-01, ARG1, f / force)
(e / establish-01, location, s / space)
(e2 / experiment-01, mod, n / nucleus)
(f / force, mod, m / military)
(r / resume-01, ARG1, e2 / experiment-01)

Input(Some(Graph((and :li 5 :op (establish-01 :location space :ARG1 (force :mod military)) :op (resume-01 :ARG1 (experiment-01 :mod nucleus))),ArrayBuffer(Span(5,6,List(0),and,and,false), Span(6,7,List(1),establish,establish-01,false), Span(10,11,List(2),space,space,false), Span(8,9,List(3),forces,force,false), Span(7,8,List(4),military,military,false), Span(1,2,List(5),Resume,resume-01,false), Span(3,4,List(6),experiments,experiment-01,false), Span(2,3,List(7),nuclear,nucleus,false)),Map(2 -> space, 5 -> resume-01, 7 -> nucleus, 1 -> establish-01, 4 -> military, 6 -> experiment-01, 0 -> and, 3 -> force),Map(n -> nucleus, e -> establish-01, e2 -> experiment-01, s -> space, m -> military, a -> and, r -> resume-01, f -> force))),[Ljava.lang.String;@223aa2f7,Annotation([Ljava.lang.String;@6d3a388c,[Ljava.lang.String;@193f604a,[Ljava.lang.String;@20f5239f),Annotation([Ljava.lang.String;@57af006c,[Ljava.lang.String;@6bedbc4d,[Ledu.cmu.lti.nlp.amr.Dependency;@932bc4a),Annotation([Ljava.lang.String;@d29f28,[Ljava.lang.String;@2fd1433e,[Ljava.lang.String;@29d89d5d),Annotation([Ljava.lang.String;@3514a4c0,[Ljava.lang.String;@212b5695,[Ledu.cmu.lti.nlp.amr.Entity;@446293d))
AMR:
(a / and, op, e2 / experiment-01)
(e / establish-01, ARG1, a / and)
(e / establish-01, ARG6, m / military)
(e2 / experiment-01, ARG1, n / nucleus)
(e2 / experiment-01, ARG6, s / space)
(f / force, name, m / military)
(r / resume-01, ARG1, e2 / experiment-01)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 249,347 microseconds
Sentence: 6. Retain 1000 nuclear bombs equivalent to ten million tons of TNT, and when necessary, install nuclear warheads on all short- and middle-range missiles.

Oracle Span 1:  1000 => 1000
Oracle Span 2:  all => all
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  bombs => bomb
Oracle Span 6:  install => install-01
Oracle Span 7:  middle => middle
Oracle Span 8:  missiles => missile
Oracle Span 9:  nuclear => nucleus
Oracle Span 10:  nuclear => nucleus
Oracle Span 11:  range => range-01
Oracle Span 12:  Retain => retain-01
Oracle Span 13:  short => short
Oracle Span 14:  TNT => TNT
Oracle Span 15:  tons => (mass-quantity :unit ton)
Oracle Span 16:  warheads => warhead
Spans:
Span 2-3:  1000 => 1000
Span 21-22:  all => all
Span 13-14:  and => and
Span 24-25:  and => and
Span 4-5:  bombs => bomb
Span 17-18:  install => install-01
Span 25-26:  middle => middle
Span 28-29:  missiles => missile
Span 3-4:  nuclear => nucleus
Span 18-19:  nuclear => nucleus
Span 27-28:  range => range-01
Span 1-2:  Retain => retain-01
Span 22-23:  short => short
Span 11-12:  TNT => TNT
Span 9-10:  tons => (mass-quantity :unit ton)
Span 19-20:  warheads => warhead

 *** WARNING: The dependency tree seems broken.  I can't find the head of missiles in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
Langrangian relaxation converged after 13 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of missiles in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 28
Oracle Span 2-3:  1000 => 1000
Oracle Span 21-22:  all => all
Oracle Span 13-14:  and => and
Oracle Span 24-25:  and => and
Oracle Span 4-5:  bombs => bomb
Oracle Span 17-18:  install => install-01
Oracle Span 25-26:  middle => middle
Oracle Span 28-29:  missiles => missile
Oracle Span 3-4:  nuclear => nucleus
Oracle Span 18-19:  nuclear => nucleus
Oracle Span 27-28:  range => range-01
Oracle Span 1-2:  Retain => retain-01
Oracle Span 22-23:  short => short
Oracle Span 11-12:  TNT => TNT
Oracle Span 9-10:  tons => (mass-quantity :unit ton)
Oracle Span 19-20:  warheads => warhead

Dependencies:
1	6	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Retain	_	CD	CD	_	4	num	_	_
2	1000	_	CD	CD	_	4	num	_	_
3	nuclear	_	JJ	JJ	_	4	amod	_	_
4	bombs	_	NNS	NNS	_	17	nsubj	_	_
5	equivalent	_	JJ	JJ	_	4	amod	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	ten	_	CD	CD	_	8	number	_	_
8	million	_	CD	CD	_	9	num	_	_
9	tons	_	NNS	NNS	_	6	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	TNT	_	NNP	NNP	_	10	pobj	_	_
12	,	_	,	,	_	10	punct	_	_
13	and	_	CC	CC	_	10	cc	_	_
14	when	_	WRB	WRB	_	15	advmod	_	_
15	necessary	_	JJ	JJ	_	10	conj	_	_
16	,	_	,	,	_	10	punct	_	_
17	install	_	VBP	VBP	_	0	root	_	_
18	nuclear	_	JJ	JJ	_	19	amod	_	_
19	warheads	_	NNS	NNS	_	17	dobj	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	all	_	DT	DT	_	26	det	_	_
22	short	_	JJ	JJ	_	26	amod	_	_
23	-	_	:	:	_	22	punct	_	_
24	and	_	CC	CC	_	22	cc	_	_
25	middle-range	_	JJ	JJ	_	22	conj	_	_
26	missiles	_	NNS	NNS	_	20	pobj	_	_
27	.	_	.	.	_	17	punct	_	_

Oracle:
(a / and, op, i / install-01)
(a / and, op, r / retain-01)
(a2 / and, op, m3 / missile)
(a2 / and, quant, a3 / all)
(b / bomb, mod, n / nucleus)
(b / bomb, quant, 1 / 1000)
(i / install-01, ARG1, w / warhead)
(i / install-01, ARG2, a2 / and)
(m / mass-quantity, unit, t2 / ton)
(r / retain-01, ARG1, b / bomb)
(r3 / range-01, ARG1, m3 / missile)
(r3 / range-01, ARG2, m4 / middle)
(t3 / TNT, quant, m / mass-quantity)
(w / warhead, mod, n3 / nucleus)

Input(Some(Graph((and :li 6 :op (install-01 :time (need-01 :ARG1 install-01) :ARG2 (and :quant all :op (missile :ARG1-of (range-01 :ARG2 middle)) :op (missile :ARG1-of (range-01 :ARG2 short))) :ARG1 (warhead :mod nucleus)) :op (retain-01 :ARG1 (bomb :ARG1-of (equal-01 :ARG2 (TNT :quant (mass-quantity :unit ton :quant 10000000))) :mod nucleus :quant 1000))),ArrayBuffer(Span(13,14,List(0),and,and,false), Span(17,18,List(1),install,install-01,false), Span(24,25,List(2),and,and,false), Span(21,22,List(3),all,all,false), Span(28,29,List(4),missiles,missile,false), Span(27,28,List(5),range,range-01,false), Span(25,26,List(6),middle,middle,false), Span(22,23,List(7),short,short,false), Span(19,20,List(8),warheads,warhead,false), Span(1,2,List(9),Retain,retain-01,false), Span(4,5,List(10),bombs,bomb,false), Span(11,12,List(11),TNT,TNT,false), Span(9,10,List(12, 13),tons,(mass-quantity :unit ton),false), Span(2,3,List(14),1000,1000,false), Span(3,4,List(15),nuclear,nucleus,false), Span(18,19,List(16),nuclear,nucleus,false)),Map(2 -> and, 5 -> range-01, 12 -> mass-quantity, 15 -> nucleus, 8 -> warhead, 7 -> short, 1 -> install-01, 4 -> missile, 11 -> TNT, 14 -> 1000, 6 -> middle, 9 -> retain-01, 0 -> and, 16 -> nucleus, 10 -> bomb, 3 -> all, 13 -> ton),Map(m3 -> missile, n -> nucleus, w -> warhead, r3 -> range-01, b -> bomb, a3 -> all, s -> short, m -> mass-quantity, 1 -> 1000, t3 -> TNT, n3 -> nucleus, a -> and, t2 -> ton, m4 -> middle, r -> retain-01, a2 -> and, i -> install-01))),[Ljava.lang.String;@69997e9d,Annotation([Ljava.lang.String;@793be5ca,[Ljava.lang.String;@2df9b86,[Ljava.lang.String;@37654521),Annotation([Ljava.lang.String;@15aab8c6,[Ljava.lang.String;@33990a0c,[Ledu.cmu.lti.nlp.amr.Dependency;@4de4b452),Annotation([Ljava.lang.String;@50b5ac82,[Ljava.lang.String;@101952da,[Ljava.lang.String;@6babf3bf),Annotation([Ljava.lang.String;@3059cbc,[Ljava.lang.String;@7ea9e1e2,[Ledu.cmu.lti.nlp.amr.Entity;@24fcf36f))
AMR:
(a / and, op, t3 / TNT)
(a2 / and, op, a / and)
(a3 / all, calendar, s / short)
(b / bomb, mod, n3 / nucleus)
(i / install-01, ARG1, n / nucleus)
(i / install-01, ARG6, a2 / and)
(i / install-01, time, s / short)
(m / mass-quantity, calendar, a / and)
(m / mass-quantity, unit, t2 / ton)
(r / retain-01, ARG0, s / short)
(r / retain-01, ARG1, n3 / nucleus)
(r / retain-01, ARG6, 1 / 1000)
(r3 / range-01, ARG0, m3 / missile)
(r3 / range-01, ARG1, i / install-01)
(r3 / range-01, ARG2, m4 / middle)
(w / warhead, mod, n / nucleus)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.0.2.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
Decoded in 376,653 microseconds
Sentence: 7. Retain 30 strategic nuclear submarines with the ability to inflict three devastating nuclear strikes against enemies.

Oracle Span 1:  30 => 30
Oracle Span 2:  devastating => devastate-01
Oracle Span 3:  enemies => enemy
Oracle Span 4:  inflict => inflict-01
Oracle Span 5:  nuclear => nucleus
Oracle Span 6:  nuclear => nucleus
Oracle Span 7:  Retain => retain-01
Oracle Span 8:  strategic => strategy
Oracle Span 9:  strikes => strike-01
Oracle Span 10:  submarines => submarine
Oracle Span 11:  three => 3
Spans:
Span 2-3:  30 => 30
Span 12-13:  devastating => devastate-01
Span 16-17:  enemies => enemy
Span 10-11:  inflict => inflict-01
Span 4-5:  nuclear => nucleus
Span 13-14:  nuclear => nucleus
Span 1-2:  Retain => retain-01
Span 3-4:  strategic => strategy
Span 14-15:  strikes => strike-01
Span 5-6:  submarines => submarine
Span 11-12:  three => 3

 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 18
Langrangian relaxation converged after 31 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of enemies in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 18
Oracle Span 2-3:  30 => 30
Oracle Span 12-13:  devastating => devastate-01
Oracle Span 16-17:  enemies => enemy
Oracle Span 10-11:  inflict => inflict-01
Oracle Span 4-5:  nuclear => nucleus
Oracle Span 13-14:  nuclear => nucleus
Oracle Span 1-2:  Retain => retain-01
Oracle Span 3-4:  strategic => strategy
Oracle Span 14-15:  strikes => strike-01
Oracle Span 5-6:  submarines => submarine
Oracle Span 11-12:  three => 3

Dependencies:
1	7	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Retain	_	VB	VB	_	0	root	_	_
2	30	_	CD	CD	_	5	num	_	_
3	strategic	_	JJ	JJ	_	5	amod	_	_
4	nuclear	_	JJ	JJ	_	5	amod	_	_
5	submarines	_	NNS	NNS	_	1	dobj	_	_
6	with	_	IN	IN	_	1	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	ability	_	NN	NN	_	6	pobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	inflict	_	VB	VB	_	8	vmod	_	_
11	three	_	CD	CD	_	14	num	_	_
12	devastating	_	JJ	JJ	_	14	amod	_	_
13	nuclear	_	JJ	JJ	_	14	amod	_	_
14	strikes	_	NNS	NNS	_	10	dobj	_	_
15	against	_	IN	IN	_	14	prep	_	_
16	enemies	_	NNS	NNS	_	15	pobj	_	_
17	.	_	.	.	_	1	punct	_	_

Oracle:
(d / devastate-01, ARG0, s3 / strike-01)
(i / inflict-01, ARG0, s / submarine)
(i / inflict-01, ARG1, s3 / strike-01)
(i / inflict-01, ARG2, e / enemy)
(r / retain-01, ARG1, s / submarine)
(s / submarine, mod, n / nucleus)
(s / submarine, mod, s2 / strategy)
(s / submarine, quant, 32 / 30)
(s3 / strike-01, ARG0, s / submarine)
(s3 / strike-01, mod, n2 / nucleus)
(s3 / strike-01, quant, 3 / 3)

Input(Some(Graph((retain-01 :li 7 :ARG1 (submarine :ARG1-of (capable-41 :ARG2 (inflict-01 :ARG2 enemy :ARG1 (strike-01 :ARG0-of devastate-01 :mod nucleus :quant 3 :ARG0 submarine) :ARG0 submarine)) :mod strategy :mod nucleus :quant 30)),ArrayBuffer(Span(1,2,List(0),Retain,retain-01,false), Span(5,6,List(1),submarines,submarine,false), Span(10,11,List(2),inflict,inflict-01,false), Span(16,17,List(3),enemies,enemy,false), Span(14,15,List(4),strikes,strike-01,false), Span(12,13,List(5),devastating,devastate-01,false), Span(11,12,List(6),three,3,false), Span(2,3,List(7),30,30,false), Span(4,5,List(8),nuclear,nucleus,false), Span(3,4,List(9),strategic,strategy,false), Span(13,14,List(10),nuclear,nucleus,false)),Map(2 -> inflict-01, 5 -> devastate-01, 8 -> nucleus, 7 -> 30, 1 -> submarine, 4 -> strike-01, 6 -> 3, 9 -> strategy, 0 -> retain-01, 10 -> nucleus, 3 -> enemy),Map(n -> nucleus, e -> enemy, s2 -> strategy, s -> submarine, d -> devastate-01, 32 -> 30, i -> inflict-01, r -> retain-01, s3 -> strike-01, 3 -> 3, n2 -> nucleus))),[Ljava.lang.String;@10feca44,Annotation([Ljava.lang.String;@3fb1549b,[Ljava.lang.String;@ea6147e,[Ljava.lang.String;@4d02f94e),Annotation([Ljava.lang.String;@2b48a640,[Ljava.lang.String;@1e683a3e,[Ledu.cmu.lti.nlp.amr.Dependency;@2053d869),Annotation([Ljava.lang.String;@7a419da4,[Ljava.lang.String;@14555e0a,[Ljava.lang.String;@4bb33f74),Annotation([Ljava.lang.String;@759d26fb,[Ljava.lang.String;@3c73951,[Ledu.cmu.lti.nlp.amr.Entity;@3d5c822d))
AMR:
(d / devastate-01, ARG1, s3 / strike-01)
(d / devastate-01, ARG6, 3 / 3)
(i / inflict-01, ARG0, s / submarine)
(i / inflict-01, ARG1, n / nucleus)
(n2 / nucleus, mod, s2 / strategy)
(r / retain-01, ARG1, 32 / 30)
(r / retain-01, ARG6, s2 / strategy)
(s / submarine, mod, s2 / strategy)
(s3 / strike-01, ARG6, n / nucleus)
(s3 / strike-01, location, e / enemy)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.1
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.2
WARNING: makeIds can't find span Id: 0.0.3.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 307,335 microseconds
Sentence: 8. Abandon the commitment to not use nuclear weapons first.

Oracle Span 1:  Abandon => abandon-03
Oracle Span 2:  commitment => commit-01
Oracle Span 3:  first => first
Oracle Span 4:  nuclear => nucleus
Oracle Span 5:  use => use-01
Oracle Span 6:  weapons => weapon
Spans:
Span 1-2:  Abandon => abandon-03
Span 3-4:  commitment => commit-01
Span 9-10:  first => first
Span 7-8:  nuclear => nucleus
Span 6-7:  use => use-01
Span 8-9:  weapons => weapon

 *** WARNING: The dependency tree seems broken.  I can't find the head of first in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 11
Langrangian relaxation converged after 32 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of first in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 11
Oracle Span 1-2:  Abandon => abandon-03
Oracle Span 3-4:  commitment => commit-01
Oracle Span 9-10:  first => first
Oracle Span 7-8:  nuclear => nucleus
Oracle Span 6-7:  use => use-01
Oracle Span 8-9:  weapons => weapon

Dependencies:
1	8	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Abandon	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	3	det	_	_
3	commitment	_	NN	NN	_	1	dobj	_	_
4	to	_	TO	TO	_	6	aux	_	_
5	not	_	RB	RB	_	6	neg	_	_
6	use	_	VB	VB	_	3	vmod	_	_
7	nuclear	_	JJ	JJ	_	8	amod	_	_
8	weapons	_	NNS	NNS	_	6	dobj	_	_
9	first	_	RB	RB	_	6	advmod	_	_
10	.	_	.	.	_	1	punct	_	_

Oracle:
(a / abandon-03, ARG1, c / commit-01)
(c / commit-01, ARG2, u / use-01)
(u / use-01, ARG1, w / weapon)
(u / use-01, time, f / first)
(w / weapon, mod, n / nucleus)

Input(Some(Graph((abandon-03 :li 8 :ARG1 (commit-01 :ARG2 (use-01 :time first :ARG1 (weapon :mod nucleus) :polarity -) :ARG1 you)),ArrayBuffer(Span(1,2,List(0),Abandon,abandon-03,false), Span(6,7,List(1),use,use-01,false), Span(9,10,List(2),first,first,false), Span(8,9,List(3),weapons,weapon,false), Span(3,4,List(4),commitment,commit-01,false), Span(7,8,List(5),nuclear,nucleus,false)),Map(2 -> first, 5 -> nucleus, 1 -> use-01, 4 -> commit-01, 0 -> abandon-03, 3 -> weapon),Map(n -> nucleus, w -> weapon, a -> abandon-03, c -> commit-01, u -> use-01, f -> first))),[Ljava.lang.String;@6f46426d,Annotation([Ljava.lang.String;@73700b80,[Ljava.lang.String;@49c7b90e,[Ljava.lang.String;@10d307f1),Annotation([Ljava.lang.String;@4d5b6aac,[Ljava.lang.String;@3e84448c,[Ledu.cmu.lti.nlp.amr.Dependency;@4a7f959b),Annotation([Ljava.lang.String;@429bffaa,[Ljava.lang.String;@5403f35f,[Ljava.lang.String;@483f6d77),Annotation([Ljava.lang.String;@7e5afaa6,[Ljava.lang.String;@63a12c68,[Ledu.cmu.lti.nlp.amr.Entity;@28f3b248))
AMR:
(a / abandon-03, ARG1, c / commit-01)
(a / abandon-03, ARG6, w / weapon)
(c / commit-01, ARG1, u / use-01)
(u / use-01, ARG1, n / nucleus)
(u / use-01, ARG6, f / first)

WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
Decoded in 122,439 microseconds
Sentence: 9. Retain the right of pre-emptive strike when national security is threatened.

Oracle Span 1:  national => nation
Oracle Span 2:  Retain => retain-01
Oracle Span 3:  security => security
Oracle Span 4:  strike => strike-01
Oracle Span 5:  threatened => threaten-01
Spans:
Span 10-11:  national => nation
Span 1-2:  Retain => retain-01
Span 11-12:  security => security
Span 8-9:  strike => strike-01
Span 13-14:  threatened => threaten-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of threatened in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 13
Langrangian relaxation converged after 57 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of threatened in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 13
Oracle Span 10-11:  national => nation
Oracle Span 1-2:  Retain => retain-01
Oracle Span 11-12:  security => security
Oracle Span 8-9:  strike => strike-01
Oracle Span 13-14:  threatened => threaten-01

Dependencies:
1	9	_	CD	CD	_	0	root	_	_
2	.	_	.	.	_	1	punct	_	_
1	Retain	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	3	det	_	_
3	right	_	NN	NN	_	1	dobj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	pre-emptive	_	JJ	JJ	_	6	amod	_	_
6	strike	_	NN	NN	_	4	pobj	_	_
7	when	_	WRB	WRB	_	11	advmod	_	_
8	national	_	JJ	JJ	_	9	amod	_	_
9	security	_	NN	NN	_	11	nsubjpass	_	_
10	is	_	VBZ	VBZ	_	11	auxpass	_	_
11	threatened	_	VBN	VBN	_	3	rcmod	_	_
12	.	_	.	.	_	1	punct	_	_

Oracle:
(r / retain-01, time, t / threaten-01)
(s / security, mod, n / nation)
(t / threaten-01, ARG2, s / security)

Input(Some(Graph((retain-01 :li 9 :time (threaten-01 :ARG2 (security :mod nation)) :ARG1 (entitle-01 :ARG1 (strike-01 :ARG0-of preempt-01))),ArrayBuffer(Span(1,2,List(0),Retain,retain-01,false), Span(13,14,List(1),threatened,threaten-01,false), Span(11,12,List(2),security,security,false), Span(8,9,List(3),strike,strike-01,false), Span(10,11,List(4),national,nation,false)),Map(2 -> security, 1 -> threaten-01, 4 -> nation, 0 -> retain-01, 3 -> strike-01),Map(n -> nation, s2 -> strike-01, t -> threaten-01, s -> security, r -> retain-01))),[Ljava.lang.String;@1b1426f4,Annotation([Ljava.lang.String;@32b260fa,[Ljava.lang.String;@581ac8a8,[Ljava.lang.String;@6d4e5011),Annotation([Ljava.lang.String;@57d7f8ca,[Ljava.lang.String;@76c3e77a,[Ledu.cmu.lti.nlp.amr.Dependency;@78123e82),Annotation([Ljava.lang.String;@67c33749,[Ljava.lang.String;@fba92d3,[Ljava.lang.String;@662b4c69),Annotation([Ljava.lang.String;@fa49800,[Ljava.lang.String;@71238fc2,[Ledu.cmu.lti.nlp.amr.Entity;@2a54a73f))
AMR:
(r / retain-01, ARG1, s / security)
(s2 / strike-01, ARG1, s / security)
(t / threaten-01, ARG1, s / security)
(t / threaten-01, ARG6, n / nation)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 151,821 microseconds
Sentence: My fellow citizens, only if we have self-confidence and self-improvement, can we strive to be strong. Qin Shi Huang unified China. Zheng Chenggong recovered Taiwan. In our responsibilities we must carry on the farsightedness, insight, and strong will of our predecessors.

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  can => possible
Oracle Span 4:  carry => carry-02
Oracle Span 5:  China => (country :name (name :op "China"))
Oracle Span 6:  citizens => citizen
Oracle Span 7:  confidence => confident-41
Oracle Span 8:  fellow => fellow
Oracle Span 9:  improvement => improve-01
Oracle Span 10:  insight => insight
Oracle Span 11:  only => only
Oracle Span 12:  predecessors => predecessor
Oracle Span 13:  Qin Shi Huang => (person :name (name :op "Huang" :op "Shi" :op "Qin"))
Oracle Span 14:  recovered => recover-02
Oracle Span 15:  responsibilities => responsible-41
Oracle Span 16:  strive => strive-01
Oracle Span 17:  strong => strong
Oracle Span 18:  strong => strong
Oracle Span 19:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 20:  unified => unify-01
Oracle Span 21:  we => we
Oracle Span 22:  we => we
Oracle Span 23:  will => will
Oracle Span 24:  Zheng Chenggong => (person :name (name :op "Chenggong" :op "Zheng"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 11-12:  and => and
Span 46-47:  and => and
Span 16-17:  can => possible
Span 39-40:  carry => carry-02
Span 27-28:  China => (country :name (name :op "China"))
Span 2-3:  citizens => citizen
Span 10-11:  confidence => confident-41
Span 1-2:  fellow => fellow
Span 14-15:  improvement => improve-01
Span 44-45:  insight => insight
Span 4-5:  only => only
Span 51-52:  predecessors => predecessor
Span 23-26:  Qin Shi Huang => (person :name (name :op "Huang" :op "Shi" :op "Qin"))
Span 31-32:  recovered => recover-02
Span 36-37:  responsibilities => responsible-41
Span 18-19:  strive => strive-01
Span 21-22:  strong => strong
Span 47-48:  strong => strong
Span 32-33:  Taiwan => (country :name (name :op "Taiwan"))
Span 26-27:  unified => unify-01
Span 6-7:  we => we
Span 17-18:  we => we
Span 48-49:  will => will
Span 29-31:  Zheng Chenggong => (person :name (name :op "Chenggong" :op "Zheng"))

 *** WARNING: The dependency tree seems broken.  I can't find the head of Qin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of Shi in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of Huang in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of unified in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zheng in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Chenggong in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of recovered in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of Taiwan in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of In in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of responsibilities in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of farsightedness in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of insight in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of predecessors in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 48
Langrangian relaxation converged after 50 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Qin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of Shi in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of Huang in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of unified in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zheng in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Chenggong in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of recovered in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of Taiwan in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of In in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of responsibilities in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of must in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of on in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of farsightedness in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of insight in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of predecessors in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 48
Oracle Span 11-12:  and => and
Oracle Span 46-47:  and => and
Oracle Span 16-17:  can => possible
Oracle Span 39-40:  carry => carry-02
Oracle Span 27-28:  China => (country :name (name :op "China"))
Oracle Span 2-3:  citizens => citizen
Oracle Span 10-11:  confidence => confident-41
Oracle Span 1-2:  fellow => fellow
Oracle Span 14-15:  improvement => improve-01
Oracle Span 44-45:  insight => insight
Oracle Span 4-5:  only => only
Oracle Span 51-52:  predecessors => predecessor
Oracle Span 23-26:  Qin Shi Huang => (person :name (name :op "Huang" :op "Shi" :op "Qin"))
Oracle Span 31-32:  recovered => recover-02
Oracle Span 36-37:  responsibilities => responsible-41
Oracle Span 18-19:  strive => strive-01
Oracle Span 21-22:  strong => strong
Oracle Span 47-48:  strong => strong
Oracle Span 32-33:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 26-27:  unified => unify-01
Oracle Span 6-7:  we => we
Oracle Span 17-18:  we => we
Oracle Span 48-49:  will => will
Oracle Span 29-31:  Zheng Chenggong => (person :name (name :op "Chenggong" :op "Zheng"))

Dependencies:
1	My	_	PRP$	PRP$	_	3	poss	_	_
2	fellow	_	JJ	JJ	_	3	amod	_	_
3	citizens	_	NNS	NNS	_	13	nsubj	_	_
4	,	_	,	,	_	13	punct	_	_
5	only	_	RB	RB	_	8	advmod	_	_
6	if	_	IN	IN	_	8	mark	_	_
7	we	_	PRP	PRP	_	8	nsubj	_	_
8	have	_	VBP	VBP	_	13	dep	_	_
9	self-confidence	_	NN	NN	_	8	dobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	self-improvement	_	NN	NN	_	9	conj	_	_
12	,	_	,	,	_	13	punct	_	_
13	can	_	MD	MD	_	15	dep	_	_
14	we	_	PRP	PRP	_	15	nsubj	_	_
15	strive	_	VBP	VBP	_	0	root	_	_
16	to	_	TO	TO	_	18	aux	_	_
17	be	_	VB	VB	_	18	cop	_	_
18	strong	_	JJ	JJ	_	15	xcomp	_	_
19	.	_	.	.	_	15	punct	_	_
1	Qin	_	NNP	NNP	_	5	nn	_	_
2	Shi	_	NNP	NNP	_	5	nn	_	_
3	Huang	_	NNP	NNP	_	5	nn	_	_
4	unified	_	NNP	NNP	_	5	nn	_	_
5	China	_	NNP	NNP	_	0	root	_	_
6	.	_	.	.	_	5	punct	_	_
1	Zheng	_	NNP	NNP	_	2	nn	_	_
2	Chenggong	_	NNP	NNP	_	3	nsubj	_	_
3	recovered	_	VBD	VBD	_	0	root	_	_
4	Taiwan	_	NNP	NNP	_	3	dobj	_	_
5	.	_	.	.	_	3	punct	_	_
1	In	_	IN	IN	_	6	prep	_	_
2	our	_	PRP$	PRP$	_	3	poss	_	_
3	responsibilities	_	NNS	NNS	_	1	pobj	_	_
4	we	_	PRP	PRP	_	6	nsubj	_	_
5	must	_	MD	MD	_	6	aux	_	_
6	carry	_	VB	VB	_	0	root	_	_
7	on	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	farsightedness	_	NNS	NNS	_	7	pobj	_	_
10	,	_	,	,	_	9	punct	_	_
11	insight	_	NN	NN	_	9	conj	_	_
12	,	_	,	,	_	9	punct	_	_
13	and	_	CC	CC	_	9	cc	_	_
14	strong	_	JJ	JJ	_	15	amod	_	_
15	will	_	NN	NN	_	9	conj	_	_
16	of	_	IN	IN	_	15	prep	_	_
17	our	_	PRP$	PRP$	_	18	poss	_	_
18	predecessors	_	NNS	NNS	_	16	pobj	_	_
19	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, mod, o2 / only)
(a / and, op, c4 / confident-41)
(a / and, op, i2 / improve-01)
(a2 / and, op, i3 / insight)
(a2 / and, op, w3 / will)
(a2 / and, poss, p4 / predecessor)
(c / country, name, n4 / name)
(c2 / citizen, mod, f / fellow)
(c3 / carry-02, ARG1, a2 / and)
(c4 / confident-41, ARG1, w / we)
(c4 / confident-41, ARG2, w / we)
(c5 / country, name, n2 / name)
(i2 / improve-01, ARG0, w / we)
(i2 / improve-01, ARG1, w / we)
(n / name, op, "Chenggong")
(n / name, op, "Zheng")
(n2 / name, op, "Taiwan")
(n3 / name, op, "Huang")
(n3 / name, op, "Qin")
(n3 / name, op, "Shi")
(n4 / name, op, "China")
(p / person, name, n / name)
(p2 / person, name, n3 / name)
(p3 / possible, condition, a / and)
(p3 / possible, domain, s3 / strive-01)
(p4 / predecessor, poss, w2 / we)
(r / recover-02, ARG0, p / person)
(r / recover-02, ARG1, c5 / country)
(r2 / responsible-41, ARG1, w2 / we)
(s3 / strive-01, ARG0, w / we)
(s3 / strive-01, ARG1, s4 / strong)
(s4 / strong, domain, w / we)
(u / unify-01, ARG0, p2 / person)
(u / unify-01, ARG1, c / country)
(w3 / will, mod, s7 / strong)

Input(Some(Graph((multi-sentence :snt1 (say-01 :ARG1 (possible :condition (and :mod only :op (improve-01 :ARG0 we :ARG1 we) :op (confident-41 :ARG1 we :ARG2 we)) :domain (strive-01 :ARG1 (strong :domain we) :ARG0 we)) :ARG2 (citizen :poss i :mod fellow)) :snt2 (unify-01 :ARG1 (country :name (name :op "China")) :ARG0 (person :name (name :op "Huang" :op "Shi" :op "Qin"))) :snt3 (recover-02 :ARG1 (country :name (name :op "Taiwan")) :ARG0 (person :name (name :op "Chenggong" :op "Zheng"))) :snt4 (obligate-01 :ARG1 we :ARG2 (carry-02 :ARG1 (and :poss (predecessor :poss we) :op (will :mod strong) :op insight :op (see-01 :mod far))) :ARG2-of (responsible-41 :ARG1 we))),ArrayBuffer(Span(23,26,List(0, 1, 2, 3, 4),Qin Shi Huang,(person :name (name :op "Huang" :op "Shi" :op "Qin")),false), Span(27,28,List(5, 6, 7),China,(country :name (name :op "China")),false), Span(29,31,List(8, 9, 10, 11),Zheng Chenggong,(person :name (name :op "Chenggong" :op "Zheng")),false), Span(32,33,List(12, 13, 14),Taiwan,(country :name (name :op "Taiwan")),false), Span(16,17,List(15),can,possible,false), Span(11,12,List(16),and,and,false), Span(4,5,List(17),only,only,false), Span(18,19,List(18),strive,strive-01,false), Span(21,22,List(19),strong,strong,false), Span(6,7,List(20),we,we,false), Span(2,3,List(21),citizens,citizen,false), Span(1,2,List(22),fellow,fellow,false), Span(26,27,List(23),unified,unify-01,false), Span(31,32,List(24),recovered,recover-02,false), Span(17,18,List(25),we,we,false), Span(39,40,List(26),carry,carry-02,false), Span(46,47,List(27),and,and,false), Span(51,52,List(28),predecessors,predecessor,false), Span(48,49,List(29),will,will,false), Span(47,48,List(30),strong,strong,false), Span(44,45,List(31),insight,insight,false), Span(14,15,List(32),improvement,improve-01,false), Span(10,11,List(33),confidence,confident-41,false), Span(36,37,List(34),responsibilities,responsible-41,false)),Map(30 -> strong, 2 -> "Huang", 5 -> country, 33 -> confident-41, 27 -> and, 12 -> country, 15 -> possible, 8 -> person, 21 -> citizen, 18 -> strive-01, 24 -> recover-02, 7 -> "China", 17 -> only, 1 -> name, 23 -> unify-01, 26 -> carry-02, 4 -> "Qin", 11 -> "Zheng", 32 -> improve-01, 14 -> "Taiwan", 29 -> will, 20 -> we, 34 -> responsible-41, 28 -> predecessor, 6 -> name, 9 -> name, 0 -> person, 22 -> fellow, 16 -> and, 19 -> strong, 10 -> "Chenggong", 3 -> "Shi", 31 -> insight, 25 -> we, 13 -> name),Map(w -> we, n -> name, p2 -> person, c4 -> confident-41, n4 -> name, w3 -> will, s4 -> strong, i3 -> insight, s7 -> strong, r2 -> responsible-41, p -> person, c3 -> carry-02, a -> and, n3 -> name, p4 -> predecessor, o2 -> only, i2 -> improve-01, w2 -> we, a2 -> and, r -> recover-02, c -> country, s3 -> strive-01, u -> unify-01, f -> fellow, p3 -> possible, c2 -> citizen, n2 -> name, c5 -> country))),[Ljava.lang.String;@16a0ee18,Annotation([Ljava.lang.String;@3d6f0054,[Ljava.lang.String;@505fc5a4,[Ljava.lang.String;@5fbdfdcf),Annotation([Ljava.lang.String;@4efc180e,[Ljava.lang.String;@bd4dc25,[Ledu.cmu.lti.nlp.amr.Dependency;@25084a1e),Annotation([Ljava.lang.String;@156b88f5,[Ljava.lang.String;@3bf9ce3e,[Ljava.lang.String;@16610890),Annotation([Ljava.lang.String;@71def8f8,[Ljava.lang.String;@383bfa16,[Ledu.cmu.lti.nlp.amr.Entity;@4d465b11))
AMR:
(a / and, op, c4 / confident-41)
(a / and, op, i2 / improve-01)
(a2 / and, op, i3 / insight)
(a2 / and, op, s7 / strong)
(a2 / and, op, w3 / will)
(c / country, name, n4 / name)
(c2 / citizen, mod, f / fellow)
(c3 / carry-02, ARG1, s4 / strong)
(c4 / confident-41, ARG0, w / we)
(c4 / confident-41, ARG1, p2 / person)
(c5 / country, name, n2 / name)
(i2 / improve-01, ARG1, c2 / citizen)
(n / name, op, "Chenggong")
(n / name, op, "Zheng")
(n2 / name, op, "Taiwan")
(n3 / name, op, "Huang")
(n3 / name, op, "Qin")
(n3 / name, op, "Shi")
(n4 / name, op, "China")
(o2 / only, domain, w / we)
(p / person, name, n / name)
(p2 / person, name, n3 / name)
(p4 / predecessor, poss, w2 / we)
(r / recover-02, ARG0, w2 / we)
(r / recover-02, ARG1, p / person)
(r / recover-02, ARG6, c5 / country)
(r2 / responsible-41, ARG0, w2 / we)
(r2 / responsible-41, ARG1, a2 / and)
(s3 / strive-01, ARG0, w2 / we)
(s3 / strive-01, ARG1, s4 / strong)
(s3 / strive-01, ARG6, p3 / possible)
(u / unify-01, ARG0, c / country)
(u / unify-01, ARG1, s4 / strong)
(u / unify-01, ARG6, p2 / person)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.2
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.1.0
WARNING: makeIds can't find span Id: 0.3.1.0.3
WARNING: makeIds can't find span Id: 0.3.1.0.2
WARNING: makeIds can't find span Id: 0.3.1.0.2.0
WARNING: makeIds can't find span Id: 0.3.1.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.3.2
Decoded in 2,705,188 microseconds
Sentence: Now, that piece of land trembling far away from the embrace of the motherland is shaking, moaning, and calling. Fellow citizens, let us carry forward the unfulfilled wishes of previous generals, moving forward courageously!

Oracle Span 1:  and => and
Oracle Span 2:  calling => call-02
Oracle Span 3:  carry => carry-01
Oracle Span 4:  citizens => citizen
Oracle Span 5:  courageously => courageous
Oracle Span 6:  embrace => embrace-01
Oracle Span 7:  far => far
Oracle Span 8:  Fellow => fellow
Oracle Span 9:  forward => forward
Oracle Span 10:  forward => forward
Oracle Span 11:  generals => (have-org-role-91 :ARG2 general)
Oracle Span 12:  land => land
Oracle Span 13:  moaning => moan-01
Oracle Span 14:  motherland => motherland
Oracle Span 15:  moving => move-01
Oracle Span 16:  Now => now
Oracle Span 17:  piece => piece
Oracle Span 18:  previous => previous
Oracle Span 19:  shaking => shake-01
Oracle Span 20:  that => that
Oracle Span 21:  trembling => tremble-01
Oracle Span 22:  unfulfilled => (fulfill-01 :polarity -)
Oracle Span 23:  wishes => (thing :ARG1-of wish-01)
Spans:
Span 20-21:  and => and
Span 21-22:  calling => call-02
Span 28-29:  carry => carry-01
Span 24-25:  citizens => citizen
Span 39-40:  courageously => courageous
Span 11-12:  embrace => embrace-01
Span 7-8:  far => far
Span 23-24:  Fellow => fellow
Span 29-30:  forward => forward
Span 38-39:  forward => forward
Span 35-36:  generals => (have-org-role-91 :ARG2 general)
Span 5-6:  land => land
Span 18-19:  moaning => moan-01
Span 14-15:  motherland => motherland
Span 37-38:  moving => move-01
Span 0-1:  Now => now
Span 3-4:  piece => piece
Span 34-35:  previous => previous
Span 16-17:  shaking => shake-01
Span 2-3:  that => that
Span 6-7:  trembling => tremble-01
Span 31-32:  unfulfilled => (fulfill-01 :polarity -)
Span 32-33:  wishes => (thing :ARG1-of wish-01)

 *** WARNING: The dependency tree seems broken.  I can't find the head of Fellow in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizens in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of us in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of unfulfilled in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of wishes in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of previous in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of generals in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of moving in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of courageously in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 40
Langrangian relaxation converged after 22 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Fellow in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizens in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of us in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of carry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of unfulfilled in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of wishes in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of previous in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of generals in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of moving in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of forward in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of courageously in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 40
Oracle Span 20-21:  and => and
Oracle Span 21-22:  calling => call-02
Oracle Span 28-29:  carry => carry-01
Oracle Span 24-25:  citizens => citizen
Oracle Span 39-40:  courageously => courageous
Oracle Span 11-12:  embrace => embrace-01
Oracle Span 7-8:  far => far
Oracle Span 23-24:  Fellow => fellow
Oracle Span 29-30:  forward => forward
Oracle Span 38-39:  forward => forward
Oracle Span 35-36:  generals => (have-org-role-91 :ARG2 general)
Oracle Span 5-6:  land => land
Oracle Span 18-19:  moaning => moan-01
Oracle Span 14-15:  motherland => motherland
Oracle Span 37-38:  moving => move-01
Oracle Span 0-1:  Now => now
Oracle Span 3-4:  piece => piece
Oracle Span 34-35:  previous => previous
Oracle Span 16-17:  shaking => shake-01
Oracle Span 2-3:  that => that
Oracle Span 6-7:  trembling => tremble-01
Oracle Span 31-32:  unfulfilled => (fulfill-01 :polarity -)
Oracle Span 32-33:  wishes => (thing :ARG1-of wish-01)

Dependencies:
1	Now	_	RB	RB	_	17	advmod	_	_
2	,	_	,	,	_	17	punct	_	_
3	that	_	DT	DT	_	4	det	_	_
4	piece	_	NN	NN	_	17	nsubj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	land	_	NN	NN	_	5	pobj	_	_
7	trembling	_	VBG	VBG	_	6	vmod	_	_
8	far	_	RB	RB	_	9	advmod	_	_
9	away	_	RB	RB	_	7	advmod	_	_
10	from	_	IN	IN	_	7	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	embrace	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	the	_	DT	DT	_	15	det	_	_
15	motherland	_	NN	NN	_	13	pobj	_	_
16	is	_	VBZ	VBZ	_	17	aux	_	_
17	shaking	_	VBG	VBG	_	0	root	_	_
18	,	_	,	,	_	17	punct	_	_
19	moaning	_	VBG	VBG	_	17	conj	_	_
20	,	_	,	,	_	17	punct	_	_
21	and	_	CC	CC	_	17	cc	_	_
22	calling	_	VBG	VBG	_	17	conj	_	_
23	.	_	.	.	_	17	punct	_	_
1	Fellow	_	NNP	NNP	_	2	nn	_	_
2	citizens	_	NNS	NNS	_	4	nsubj	_	_
3	,	_	,	,	_	4	punct	_	_
4	let	_	VB	VB	_	0	root	_	_
5	us	_	PRP	PRP	_	6	nsubj	_	_
6	carry	_	VB	VB	_	4	ccomp	_	_
7	forward	_	RP	RP	_	6	prt	_	_
8	the	_	DT	DT	_	10	det	_	_
9	unfulfilled	_	JJ	JJ	_	10	amod	_	_
10	wishes	_	NNS	NNS	_	6	dobj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	previous	_	JJ	JJ	_	13	amod	_	_
13	generals	_	NNS	NNS	_	11	pobj	_	_
14	,	_	,	,	_	10	punct	_	_
15	moving	_	VBG	VBG	_	10	vmod	_	_
16	forward	_	RP	RP	_	15	prt	_	_
17	courageously	_	RB	RB	_	15	advmod	_	_
18	!	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, c / call-02)
(a / and, op, m2 / moan-01)
(a / and, op, s / shake-01)
(a / and, time, n / now)
(c / call-02, ARG0, p / piece)
(c2 / citizen, mod, f2 / fellow)
(c3 / carry-01, ARG1, t3 / thing)
(c3 / carry-01, direction, f4 / forward)
(c3 / carry-01, manner, m4 / move-01)
(e / embrace-01, ARG0, m3 / motherland)
(e / embrace-01, ARG1, p / piece)
(f5 / fulfill-01, ARG1, w / wish-01)
(f5 / fulfill-01, polarity, -)
(h / have-org-role-91, ARG2, g / general)
(h / have-org-role-91, time, p2 / previous)
(l / land, part, p / piece)
(m2 / moan-01, ARG0, p / piece)
(m4 / move-01, direction, f3 / forward)
(m4 / move-01, manner, c4 / courageous)
(p / piece, mod, t2 / that)
(s / shake-01, ARG1, p / piece)
(t / tremble-01, ARG1, p / piece)
(w / wish-01, ARG1, t3 / thing)

Input(Some(Graph((multi-sentence :snt1 (and :time now :op (call-02 :ARG0 piece) :op (moan-01 :ARG0 piece) :op (shake-01 :ARG1 (piece :mod that :ARG1-of (tremble-01 :location (relative-position :op (embrace-01 :ARG0 motherland :ARG1 piece) :quant far)) :part-of land))) :snt2 (say-01 :ARG1 (carry-01 :manner (move-01 :manner courageous :direction forward :ARG1 we) :direction forward :ARG1 (thing :ARG1-of (wish-01 :ARG1-of (fulfill-01 :polarity -) :ARG0 (person :ARG0-of (have-org-role-91 :time previous :ARG2 general)))) :ARG0 we :mode imperative) :ARG2 (citizen :mod fellow))),ArrayBuffer(Span(20,21,List(0),and,and,false), Span(0,1,List(1),Now,now,false), Span(21,22,List(2),calling,call-02,false), Span(18,19,List(3),moaning,moan-01,false), Span(16,17,List(4),shaking,shake-01,false), Span(3,4,List(5),piece,piece,false), Span(2,3,List(6),that,that,false), Span(6,7,List(7),trembling,tremble-01,false), Span(11,12,List(8),embrace,embrace-01,false), Span(14,15,List(9),motherland,motherland,false), Span(7,8,List(10),far,far,false), Span(5,6,List(11),land,land,false), Span(28,29,List(12),carry,carry-01,false), Span(37,38,List(13),moving,move-01,false), Span(29,30,List(14),forward,forward,false), Span(38,39,List(15),forward,forward,false), Span(32,33,List(16, 17),wishes,(thing :ARG1-of wish-01),false), Span(35,36,List(18, 19),generals,(have-org-role-91 :ARG2 general),false), Span(34,35,List(20),previous,previous,false), Span(24,25,List(21),citizens,citizen,false), Span(23,24,List(22),Fellow,fellow,false), Span(39,40,List(23),courageously,courageous,false), Span(31,32,List(24, 25),unfulfilled,(fulfill-01 :polarity -),false)),Map(2 -> call-02, 5 -> piece, 12 -> carry-01, 15 -> forward, 8 -> embrace-01, 21 -> citizen, 18 -> have-org-role-91, 24 -> fulfill-01, 7 -> tremble-01, 17 -> wish-01, 1 -> now, 23 -> courageous, 4 -> shake-01, 11 -> land, 14 -> forward, 20 -> previous, 6 -> that, 9 -> motherland, 0 -> and, 22 -> fellow, 16 -> thing, 19 -> general, 10 -> far, 3 -> moan-01, 25 -> -, 13 -> move-01),Map(m3 -> motherland, e -> embrace-01, w -> wish-01, n -> now, h -> have-org-role-91, t -> tremble-01, m2 -> moan-01, f4 -> forward, p2 -> previous, c4 -> courageous, s -> shake-01, t3 -> thing, g -> general, p -> piece, c3 -> carry-01, a -> and, f3 -> forward, m4 -> move-01, t2 -> that, c -> call-02, f2 -> fellow, l -> land, f -> far, f5 -> fulfill-01, c2 -> citizen))),[Ljava.lang.String;@53fdffa1,Annotation([Ljava.lang.String;@5562c41e,[Ljava.lang.String;@32ee6fee,[Ljava.lang.String;@4d0f2471),Annotation([Ljava.lang.String;@7133da86,[Ljava.lang.String;@3232a28a,[Ledu.cmu.lti.nlp.amr.Dependency;@73e22a3d),Annotation([Ljava.lang.String;@47faa49c,[Ljava.lang.String;@28f2a10f,[Ljava.lang.String;@f736069),Annotation([Ljava.lang.String;@6da21078,[Ljava.lang.String;@7fee8714,[Ledu.cmu.lti.nlp.amr.Entity;@4229bb3f))
AMR:
(a / and, op, c / call-02)
(a / and, op, c2 / citizen)
(a / and, op, c4 / courageous)
(a / and, op, f2 / fellow)
(a / and, op, f3 / forward)
(a / and, op, f4 / forward)
(a / and, op, m2 / moan-01)
(a / and, op, p2 / previous)
(a / and, op, s / shake-01)
(a / and, op, t3 / thing)
(c / call-02, ARG1, t2 / that)
(c3 / carry-01, ARG1, a / and)
(e / embrace-01, ARG1, m3 / motherland)
(f5 / fulfill-01, ARG1, a / and)
(f5 / fulfill-01, polarity, -)
(h / have-org-role-91, ARG1, a / and)
(h / have-org-role-91, ARG2, g / general)
(m2 / moan-01, ARG0, p / piece)
(m2 / moan-01, ARG1, n / now)
(m4 / move-01, ARG1, a / and)
(s / shake-01, ARG1, m3 / motherland)
(t / tremble-01, ARG0, p / piece)
(t / tremble-01, ARG1, l / land)
(t / tremble-01, ARG6, f / far)
(w / wish-01, ARG1, t3 / thing)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.4
WARNING: makeIds can't find span Id: 0.1.0.4.0
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.4.1
WARNING: makeIds can't find span Id: 0.1.0.2.0.1
WARNING: makeIds can't find span Id: 0.1.0.2.0.1.0
Decoded in 1,160,340 microseconds
Sentence: When reading over history, the heaviness and anger in my heart simmer into concern for the nation. Although I was born to cloth gown and am one of the common people, for the prosperity of the motherland, for the motherland being splendid once again, I am willing to voluntarily serve our country, and I will have no regrets even if I die! My sincere patriotic heart is adequate to show to heaven!

Oracle Span 1:  adequate => adequate
Oracle Span 2:  again => again
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  and => and
Oracle Span 6:  anger => anger
Oracle Span 7:  born => bear-02
Oracle Span 8:  cloth => cloth
Oracle Span 9:  common => (person :mod common)
Oracle Span 10:  concern => concern-01
Oracle Span 11:  country => country
Oracle Span 12:  die => die-01
Oracle Span 13:  even => even-if
Oracle Span 14:  gown => gown
Oracle Span 15:  have => have-concession-91
Oracle Span 16:  heart => heart
Oracle Span 17:  heart => heart
Oracle Span 18:  heaven => heaven
Oracle Span 19:  heaviness => heaviness
Oracle Span 20:  history => history
Oracle Span 21:  I => i
Oracle Span 22:  I => i
Oracle Span 23:  I => i
Oracle Span 24:  motherland => motherland
Oracle Span 25:  nation => nation
Oracle Span 26:  no => -
Oracle Span 27:  of => include-91
Oracle Span 28:  once => once
Oracle Span 29:  patriotic => patriotic
Oracle Span 30:  prosperity => prosper-01
Oracle Span 31:  reading => read-01
Oracle Span 32:  regrets => regret-01
Oracle Span 33:  serve => serve-02
Oracle Span 34:  show => show-01
Oracle Span 35:  simmer => simmer-01
Oracle Span 36:  sincere => sincere
Oracle Span 37:  splendid => splendid
Oracle Span 38:  voluntarily => volunteer-01
Oracle Span 39:  willing => will-02
Spans:
Span 74-75:  adequate => adequate
Span 47-48:  again => again
Span 7-8:  and => and
Span 26-27:  and => and
Span 58-59:  and => and
Span 8-9:  anger => anger
Span 22-23:  born => bear-02
Span 24-25:  cloth => cloth
Span 31-32:  common => (person :mod common)
Span 14-15:  concern => concern-01
Span 56-57:  country => country
Span 67-68:  die => die-01
Span 64-65:  even => even-if
Span 25-26:  gown => gown
Span 61-62:  have => have-concession-91
Span 11-12:  heart => heart
Span 72-73:  heart => heart
Span 78-79:  heaven => heaven
Span 6-7:  heaviness => heaviness
Span 3-4:  history => history
Span 20-21:  I => i
Span 49-50:  I => i
Span 59-60:  I => i
Span 39-40:  motherland => motherland
Span 17-18:  nation => nation
Span 62-63:  no => -
Span 29-30:  of => include-91
Span 46-47:  once => once
Span 71-72:  patriotic => patriotic
Span 36-37:  prosperity => prosper-01
Span 1-2:  reading => read-01
Span 63-64:  regrets => regret-01
Span 54-55:  serve => serve-02
Span 76-77:  show => show-01
Span 12-13:  simmer => simmer-01
Span 70-71:  sincere => sincere
Span 45-46:  splendid => splendid
Span 53-54:  voluntarily => volunteer-01
Span 51-52:  willing => will-02

 *** WARNING: The dependency tree seems broken.  I can't find the head of am in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of willing in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of voluntarily in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of serve in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of regrets in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of die in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of My in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of sincere in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of patriotic in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of heart in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of adequate in position 74
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 75
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 76
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 77
 *** WARNING: The dependency tree seems broken.  I can't find the head of heaven in position 78
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 79
Langrangian relaxation converged after 42 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of am in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of willing in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of voluntarily in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of serve in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of our in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of regrets in position 63
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 64
 *** WARNING: The dependency tree seems broken.  I can't find the head of if in position 65
 *** WARNING: The dependency tree seems broken.  I can't find the head of I in position 66
 *** WARNING: The dependency tree seems broken.  I can't find the head of die in position 67
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 68
 *** WARNING: The dependency tree seems broken.  I can't find the head of My in position 69
 *** WARNING: The dependency tree seems broken.  I can't find the head of sincere in position 70
 *** WARNING: The dependency tree seems broken.  I can't find the head of patriotic in position 71
 *** WARNING: The dependency tree seems broken.  I can't find the head of heart in position 72
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 73
 *** WARNING: The dependency tree seems broken.  I can't find the head of adequate in position 74
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 75
 *** WARNING: The dependency tree seems broken.  I can't find the head of show in position 76
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 77
 *** WARNING: The dependency tree seems broken.  I can't find the head of heaven in position 78
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 79
Oracle Span 74-75:  adequate => adequate
Oracle Span 47-48:  again => again
Oracle Span 7-8:  and => and
Oracle Span 26-27:  and => and
Oracle Span 58-59:  and => and
Oracle Span 8-9:  anger => anger
Oracle Span 22-23:  born => bear-02
Oracle Span 24-25:  cloth => cloth
Oracle Span 31-32:  common => (person :mod common)
Oracle Span 14-15:  concern => concern-01
Oracle Span 56-57:  country => country
Oracle Span 67-68:  die => die-01
Oracle Span 64-65:  even => even-if
Oracle Span 25-26:  gown => gown
Oracle Span 61-62:  have => have-concession-91
Oracle Span 11-12:  heart => heart
Oracle Span 72-73:  heart => heart
Oracle Span 78-79:  heaven => heaven
Oracle Span 6-7:  heaviness => heaviness
Oracle Span 3-4:  history => history
Oracle Span 20-21:  I => i
Oracle Span 49-50:  I => i
Oracle Span 59-60:  I => i
Oracle Span 39-40:  motherland => motherland
Oracle Span 17-18:  nation => nation
Oracle Span 62-63:  no => -
Oracle Span 29-30:  of => include-91
Oracle Span 46-47:  once => once
Oracle Span 71-72:  patriotic => patriotic
Oracle Span 36-37:  prosperity => prosper-01
Oracle Span 1-2:  reading => read-01
Oracle Span 63-64:  regrets => regret-01
Oracle Span 54-55:  serve => serve-02
Oracle Span 76-77:  show => show-01
Oracle Span 12-13:  simmer => simmer-01
Oracle Span 70-71:  sincere => sincere
Oracle Span 45-46:  splendid => splendid
Oracle Span 53-54:  voluntarily => volunteer-01
Oracle Span 51-52:  willing => will-02

Dependencies:
1	When	_	WRB	WRB	_	2	advmod	_	_
2	reading	_	VBG	VBG	_	13	advcl	_	_
3	over	_	IN	IN	_	2	prep	_	_
4	history	_	NN	NN	_	3	pobj	_	_
5	,	_	,	,	_	13	punct	_	_
6	the	_	DT	DT	_	7	det	_	_
7	heaviness	_	NN	NN	_	13	nsubj	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	anger	_	NN	NN	_	7	conj	_	_
10	in	_	IN	IN	_	7	prep	_	_
11	my	_	PRP$	PRP$	_	12	poss	_	_
12	heart	_	NN	NN	_	10	pobj	_	_
13	simmer	_	VBP	VBP	_	0	root	_	_
14	into	_	IN	IN	_	13	prep	_	_
15	concern	_	NN	NN	_	14	pobj	_	_
16	for	_	IN	IN	_	15	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	nation	_	NN	NN	_	16	pobj	_	_
19	.	_	.	.	_	13	punct	_	_
1	Although	_	IN	IN	_	4	mark	_	_
2	I	_	PRP	PRP	_	4	nsubjpass	_	_
3	was	_	VBD	VBD	_	4	auxpass	_	_
4	born	_	VBN	VBN	_	33	advcl	_	_
5	to	_	TO	TO	_	4	prep	_	_
6	cloth	_	NN	NN	_	7	nn	_	_
7	gown	_	NN	NN	_	5	pobj	_	_
8	and	_	CC	CC	_	4	cc	_	_
9	am	_	VBP	VBP	_	10	cop	_	_
10	one	_	CD	CD	_	4	conj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	common	_	JJ	JJ	_	14	amod	_	_
14	people	_	NNS	NNS	_	11	pobj	_	_
15	,	_	,	,	_	4	punct	_	_
16	for	_	IN	IN	_	4	prep	_	_
17	the	_	DT	DT	_	18	det	_	_
18	prosperity	_	NN	NN	_	16	pobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	21	det	_	_
21	motherland	_	NN	NN	_	19	pobj	_	_
22	,	_	,	,	_	18	punct	_	_
23	for	_	IN	IN	_	18	prep	_	_
24	the	_	DT	DT	_	25	det	_	_
25	motherland	_	NN	NN	_	23	pobj	_	_
26	being	_	VBG	VBG	_	27	auxpass	_	_
27	splendid	_	VBN	VBN	_	25	vmod	_	_
28	once	_	RB	RB	_	29	advmod	_	_
29	again	_	RB	RB	_	27	advmod	_	_
30	,	_	,	,	_	33	punct	_	_
31	I	_	PRP	PRP	_	33	nsubj	_	_
32	am	_	VBP	VBP	_	33	cop	_	_
33	willing	_	JJ	JJ	_	0	root	_	_
34	to	_	TO	TO	_	36	aux	_	_
35	voluntarily	_	RB	RB	_	36	advmod	_	_
36	serve	_	VB	VB	_	33	xcomp	_	_
37	our	_	PRP$	PRP$	_	38	poss	_	_
38	country	_	NN	NN	_	36	dobj	_	_
39	,	_	,	,	_	33	punct	_	_
40	and	_	CC	CC	_	33	cc	_	_
41	I	_	PRP	PRP	_	43	nsubj	_	_
42	will	_	MD	MD	_	43	aux	_	_
43	have	_	VB	VB	_	33	conj	_	_
44	no	_	DT	DT	_	45	neg	_	_
45	regrets	_	NNS	NNS	_	43	dobj	_	_
46	even	_	RB	RB	_	49	advmod	_	_
47	if	_	IN	IN	_	49	mark	_	_
48	I	_	PRP	PRP	_	49	nsubj	_	_
49	die	_	VBP	VBP	_	43	advcl	_	_
50	!	_	.	.	_	33	punct	_	_
1	My	_	PRP$	PRP$	_	4	poss	_	_
2	sincere	_	JJ	JJ	_	3	amod	_	_
3	patriotic	_	JJ	JJ	_	4	amod	_	_
4	heart	_	NN	NN	_	6	nsubj	_	_
5	is	_	VBZ	VBZ	_	6	cop	_	_
6	adequate	_	JJ	JJ	_	0	root	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	show	_	VB	VB	_	6	xcomp	_	_
9	to	_	TO	TO	_	8	prep	_	_
10	heaven	_	NN	NN	_	9	pobj	_	_
11	!	_	.	.	_	6	punct	_	_

Oracle:
(a / and, location, h3 / heart)
(a / and, op, a2 / anger)
(a / and, op, h2 / heaviness)
(a3 / and, op, r2 / regret-01)
(a3 / and, op, w / will-02)
(a4 / adequate, domain, s3 / show-01)
(a5 / and, op, p2 / prosper-01)
(a5 / and, op, s5 / splendid)
(a6 / again, mod, o2 / once)
(b / bear-02, ARG1, i / i)
(b / bear-02, prep-to, g / gown)
(c / concern-01, ARG0, n / nation)
(c / concern-01, ARG1, i3 / i)
(d / die-01, ARG1, i / i)
(e2 / even-if, op, d / die-01)
(g / gown, mod, c3 / cloth)
(h4 / heart, mod, p / patriotic)
(h4 / heart, mod, s2 / sincere)
(h7 / have-concession-91, ARG1, a3 / and)
(i2 / include-91, ARG1, i / i)
(i2 / include-91, ARG2, p3 / person)
(i3 / i, part, h3 / heart)
(i4 / i, part, h4 / heart)
(p2 / prosper-01, ARG0, m4 / motherland)
(p3 / person, mod, c4 / common)
(r / read-01, ARG0, i3 / i)
(r / read-01, ARG1, h / history)
(r2 / regret-01, ARG0, i / i)
(r2 / regret-01, concession, e2 / even-if)
(r2 / regret-01, polarity, - / -)
(s / simmer-01, ARG1, a / and)
(s / simmer-01, prep-into, c / concern-01)
(s / simmer-01, time, r / read-01)
(s3 / show-01, ARG0, i4 / i)
(s3 / show-01, ARG1, h4 / heart)
(s3 / show-01, ARG2, h5 / heaven)
(s4 / serve-02, ARG0, i / i)
(s4 / serve-02, ARG1, c2 / country)
(s4 / serve-02, purpose, a5 / and)
(s5 / splendid, domain, m4 / motherland)
(s5 / splendid, mod, a6 / again)
(v / volunteer-01, ARG0, i / i)
(v / volunteer-01, ARG1, s4 / serve-02)
(w / will-02, ARG0, i / i)
(w / will-02, ARG1, s4 / serve-02)

Input(Some(Graph((multi-sentence :snt1 (simmer-01 :prep-into (concern-01 :ARG0 nation :ARG1 i) :time (read-01 :ARG1 history :ARG0 i) :ARG1 (and :location (heart :part-of i) :op anger :op heaviness)) :snt2 (have-concession-91 :ARG2 (and :op (bear-02 :prep-to (gown :mod cloth) :ARG1 i) :op (include-91 :ARG2 (person :mod common) :ARG1 i)) :ARG1 (and :op (regret-01 :concession (even-if :op (die-01 :ARG1 i)) :polarity - :ARG0 i) :op (will-02 :ARG1 (serve-02 :purpose (and :op (splendid :mod (again :mod once) :domain motherland) :op (prosper-01 :ARG0 motherland)) :ARG1-of (volunteer-01 :ARG0 i) :ARG1 (country :poss we) :ARG0 i) :ARG0 i))) :snt3 (adequate :domain (show-01 :ARG2 heaven :ARG1 (heart :part-of i :mod patriotic :mod sincere) :ARG0 i))),ArrayBuffer(Span(62,63,List(0),no,-,false), Span(12,13,List(1),simmer,simmer-01,false), Span(14,15,List(2),concern,concern-01,false), Span(17,18,List(3),nation,nation,false), Span(1,2,List(4),reading,read-01,false), Span(3,4,List(5),history,history,false), Span(7,8,List(6),and,and,false), Span(11,12,List(7),heart,heart,false), Span(20,21,List(8),I,i,false), Span(8,9,List(9),anger,anger,false), Span(6,7,List(10),heaviness,heaviness,false), Span(26,27,List(11),and,and,false), Span(63,64,List(12),regrets,regret-01,false), Span(67,68,List(13),die,die-01,false), Span(51,52,List(14),willing,will-02,false), Span(54,55,List(15),serve,serve-02,false), Span(58,59,List(16),and,and,false), Span(45,46,List(17),splendid,splendid,false), Span(47,48,List(18),again,again,false), Span(46,47,List(19),once,once,false), Span(39,40,List(20),motherland,motherland,false), Span(56,57,List(21),country,country,false), Span(49,50,List(22),I,i,false), Span(22,23,List(23),born,bear-02,false), Span(25,26,List(24),gown,gown,false), Span(24,25,List(25),cloth,cloth,false), Span(29,30,List(26),of,include-91,false), Span(31,32,List(27, 28),common,(person :mod common),false), Span(74,75,List(29),adequate,adequate,false), Span(76,77,List(30),show,show-01,false), Span(78,79,List(31),heaven,heaven,false), Span(72,73,List(32),heart,heart,false), Span(59,60,List(33),I,i,false), Span(71,72,List(34),patriotic,patriotic,false), Span(70,71,List(35),sincere,sincere,false), Span(61,62,List(36),have,have-concession-91,false), Span(64,65,List(37),even,even-if,false), Span(36,37,List(38),prosperity,prosper-01,false), Span(53,54,List(39),voluntarily,volunteer-01,false)),Map(39 -> volunteer-01, 30 -> show-01, 2 -> concern-01, 5 -> history, 33 -> i, 27 -> person, 12 -> regret-01, 15 -> serve-02, 8 -> i, 36 -> have-concession-91, 21 -> country, 18 -> again, 24 -> gown, 35 -> sincere, 7 -> heart, 17 -> splendid, 1 -> simmer-01, 23 -> bear-02, 38 -> prosper-01, 26 -> include-91, 4 -> read-01, 11 -> and, 32 -> heart, 14 -> will-02, 29 -> adequate, 20 -> motherland, 34 -> patriotic, 28 -> common, 6 -> and, 9 -> anger, 0 -> -, 22 -> i, 16 -> and, 37 -> even-if, 19 -> once, 10 -> heaviness, 3 -> nation, 31 -> heaven, 25 -> cloth, 13 -> die-01),Map(h5 -> heaven, s5 -> splendid, w -> will-02, n -> nation, h -> history, i4 -> i, s2 -> sincere, h2 -> heaviness, b -> bear-02, p2 -> prosper-01, e2 -> even-if, c4 -> common, a3 -> and, s -> simmer-01, h4 -> heart, a6 -> again, s4 -> serve-02, v -> volunteer-01, d -> die-01, h7 -> have-concession-91, i3 -> i, r2 -> regret-01, p -> patriotic, g -> gown, c3 -> cloth, a -> and, o2 -> once, a5 -> and, m4 -> motherland, i2 -> include-91, i -> i, a2 -> anger, r -> read-01, - -> -, h3 -> heart, c -> concern-01, s3 -> show-01, p3 -> person, c2 -> country, a4 -> adequate))),[Ljava.lang.String;@56cdfb3b,Annotation([Ljava.lang.String;@2b91004a,[Ljava.lang.String;@20ccf40b,[Ljava.lang.String;@2fb3536e),Annotation([Ljava.lang.String;@169e6180,[Ljava.lang.String;@35aea049,[Ledu.cmu.lti.nlp.amr.Dependency;@7205765b),Annotation([Ljava.lang.String;@47987356,[Ljava.lang.String;@22ef9844,[Ljava.lang.String;@6283d8b8),Annotation([Ljava.lang.String;@3b6ddd1d,[Ljava.lang.String;@3f6b0be5,[Ledu.cmu.lti.nlp.amr.Entity;@611889f4))
AMR:
(a / and, op, a2 / anger)
(a / and, op, a5 / and)
(a2 / anger, topic, h3 / heart)
(a3 / and, op, i2 / include-91)
(a5 / and, op, i4 / i)
(b / bear-02, ARG1, n / nation)
(b / bear-02, ARG2, c3 / cloth)
(c / concern-01, ARG0, n / nation)
(c / concern-01, ARG1, p3 / person)
(d / die-01, ARG0, a / and)
(d / die-01, ARG1, s2 / sincere)
(g / gown, mod, c3 / cloth)
(h7 / have-concession-91, ARG0, a / and)
(h7 / have-concession-91, ARG1, e2 / even-if)
(i2 / include-91, ARG1, m4 / motherland)
(i2 / include-91, ARG2, p3 / person)
(p / patriotic, mod, s2 / sincere)
(p2 / prosper-01, ARG1, m4 / motherland)
(p3 / person, mod, c4 / common)
(r / read-01, ARG0, a / and)
(r / read-01, ARG1, h / history)
(r2 / regret-01, ARG0, a / and)
(r2 / regret-01, ARG1, - / -)
(s / simmer-01, ARG0, h2 / heaviness)
(s / simmer-01, ARG1, a / and)
(s / simmer-01, ARG2, c / concern-01)
(s / simmer-01, ARG6, i3 / i)
(s3 / show-01, ARG0, a / and)
(s3 / show-01, ARG1, h4 / heart)
(s3 / show-01, ARG2, h5 / heaven)
(s3 / show-01, ARG6, a4 / adequate)
(s4 / serve-02, ARG0, a / and)
(s4 / serve-02, ARG1, c2 / country)
(s5 / splendid, mod, a6 / again)
(v / volunteer-01, ARG0, a / and)
(v / volunteer-01, ARG1, a6 / again)
(v / volunteer-01, ARG6, o2 / once)
(w / will-02, ARG0, a / and)
(w / will-02, ARG6, i / i)

WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.2
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.2
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.2.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.1
Decoded in 4,568,705 microseconds
Sentence: Here, I've composed a poem in classical ci form, to voice the aspirations of my heart.

Oracle Span 1:  aspirations => aspire-01
Oracle Span 2:  ci => ci
Oracle Span 3:  classical => classical
Oracle Span 4:  composed => compose-02
Oracle Span 5:  form => form
Oracle Span 6:  heart => heart
Oracle Span 7:  Here => here
Oracle Span 8:  I => i
Oracle Span 9:  poem => poem
Oracle Span 10:  voice => voice-01
Spans:
Span 15-16:  aspirations => aspire-01
Span 9-10:  ci => ci
Span 8-9:  classical => classical
Span 4-5:  composed => compose-02
Span 10-11:  form => form
Span 18-19:  heart => heart
Span 0-1:  Here => here
Span 2-3:  I => i
Span 6-7:  poem => poem
Span 13-14:  voice => voice-01

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 15-16:  aspirations => aspire-01
Oracle Span 9-10:  ci => ci
Oracle Span 8-9:  classical => classical
Oracle Span 4-5:  composed => compose-02
Oracle Span 10-11:  form => form
Oracle Span 18-19:  heart => heart
Oracle Span 0-1:  Here => here
Oracle Span 2-3:  I => i
Oracle Span 6-7:  poem => poem
Oracle Span 13-14:  voice => voice-01

Dependencies:
1	Here	_	RB	RB	_	5	advmod	_	_
2	,	_	,	,	_	5	punct	_	_
3	I	_	PRP	PRP	_	5	nsubj	_	_
4	've	_	VBP	VBP	_	5	aux	_	_
5	composed	_	VBN	VBN	_	0	root	_	_
6	a	_	DT	DT	_	7	det	_	_
7	poem	_	NN	NN	_	5	dobj	_	_
8	in	_	IN	IN	_	7	prep	_	_
9	classical	_	JJ	JJ	_	11	amod	_	_
10	ci	_	NN	NN	_	11	nn	_	_
11	form	_	NN	NN	_	8	pobj	_	_
12	,	_	,	,	_	5	punct	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	voice	_	VB	VB	_	5	vmod	_	_
15	the	_	DT	DT	_	16	det	_	_
16	aspirations	_	NNS	NNS	_	14	dobj	_	_
17	of	_	IN	IN	_	16	prep	_	_
18	my	_	PRP$	PRP$	_	19	poss	_	_
19	heart	_	NN	NN	_	17	pobj	_	_
20	.	_	.	.	_	5	punct	_	_

Oracle:
(a / aspire-01, ARG0, h / heart)
(c / compose-02, ARG0, i / i)
(c / compose-02, ARG1, p / poem)
(c / compose-02, manner, f / form)
(c / compose-02, mod, h2 / here)
(c / compose-02, purpose, v / voice-01)
(f / form, mod, c2 / classical)
(f / form, mod, c3 / ci)
(i / i, part, h / heart)
(v / voice-01, ARG0, i / i)
(v / voice-01, ARG1, a / aspire-01)

Input(Some(Graph((compose-02 :purpose (voice-01 :ARG1 (aspire-01 :ARG0 (heart :part-of i)) :ARG0 i) :manner (form :mod ci :mod classical) :mod here :ARG1 poem :ARG0 i),ArrayBuffer(Span(4,5,List(0),composed,compose-02,false), Span(13,14,List(1),voice,voice-01,false), Span(18,19,List(2),heart,heart,false), Span(10,11,List(3),form,form,false), Span(9,10,List(4),ci,ci,false), Span(8,9,List(5),classical,classical,false), Span(0,1,List(6),Here,here,false), Span(6,7,List(7),poem,poem,false), Span(2,3,List(8),I,i,false), Span(15,16,List(9),aspirations,aspire-01,false)),Map(2 -> heart, 5 -> classical, 8 -> i, 7 -> poem, 1 -> voice-01, 4 -> ci, 6 -> here, 9 -> aspire-01, 0 -> compose-02, 3 -> form),Map(h -> heart, h2 -> here, v -> voice-01, p -> poem, a -> aspire-01, c3 -> ci, i -> i, c -> compose-02, f -> form, c2 -> classical))),[Ljava.lang.String;@1da2cb77,Annotation([Ljava.lang.String;@48f278eb,[Ljava.lang.String;@2f217633,[Ljava.lang.String;@a530d0a),Annotation([Ljava.lang.String;@1a18644,[Ljava.lang.String;@5acf93bb,[Ledu.cmu.lti.nlp.amr.Dependency;@7e7be63f),Annotation([Ljava.lang.String;@6cd28fa7,[Ljava.lang.String;@614ca7df,[Ljava.lang.String;@4738a206),Annotation([Ljava.lang.String;@66d3eec0,[Ljava.lang.String;@1e04fa0a,[Ledu.cmu.lti.nlp.amr.Entity;@1af2d44a))
AMR:
(a / aspire-01, ARG1, h / heart)
(c / compose-02, ARG0, i / i)
(c / compose-02, ARG1, p / poem)
(f / form, domain, c2 / classical)
(f / form, mod, c3 / ci)
(h2 / here, domain, i / i)
(v / voice-01, ARG0, p / poem)
(v / voice-01, ARG1, a / aspire-01)
(v / voice-01, ARG6, f / form)

WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.4.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.4.0
Decoded in 356,375 microseconds
Sentence: Paint the deep red lips

Oracle Span 1:  deep => deep
Oracle Span 2:  lips => lip
Oracle Span 3:  Paint => paint-01
Oracle Span 4:  red => red
Spans:
Span 2-3:  deep => deep
Span 4-5:  lips => lip
Span 0-1:  Paint => paint-01
Span 3-4:  red => red

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  deep => deep
Oracle Span 4-5:  lips => lip
Oracle Span 0-1:  Paint => paint-01
Oracle Span 3-4:  red => red

Dependencies:
1	Paint	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	5	det	_	_
3	deep	_	JJ	JJ	_	5	amod	_	_
4	red	_	JJ	JJ	_	5	amod	_	_
5	lips	_	NNS	NNS	_	1	dobj	_	_

Oracle:
(l / lip, mod, r / red)
(p / paint-01, ARG1, l / lip)
(r / red, degree, d2 / deep)

Input(Some(Graph((paint-01 :mode imperative :ARG1 (lip :mod (red :degree deep)) :ARG0 you),ArrayBuffer(Span(0,1,List(0),Paint,paint-01,false), Span(4,5,List(1),lips,lip,false), Span(3,4,List(2),red,red,false), Span(2,3,List(3),deep,deep,false)),Map(2 -> red, 1 -> lip, 0 -> paint-01, 3 -> deep),Map(p -> paint-01, d2 -> deep, r -> red, l -> lip))),[Ljava.lang.String;@18d87d80,Annotation([Ljava.lang.String;@618425b5,[Ljava.lang.String;@58695725,[Ljava.lang.String;@543588e6),Annotation([Ljava.lang.String;@f5acb9d,[Ljava.lang.String;@4fb3ee4e,[Ledu.cmu.lti.nlp.amr.Dependency;@5d7148e2),Annotation([Ljava.lang.String;@25fb8912,[Ljava.lang.String;@7c24b813,[Ljava.lang.String;@2c35e847),Annotation([Ljava.lang.String;@7bd4937b,[Ljava.lang.String;@21e360a,[Ledu.cmu.lti.nlp.amr.Entity;@5ba3f27a))
AMR:
(l / lip, mod, d2 / deep)
(l / lip, mod, r / red)
(p / paint-01, ARG1, l / lip)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 11,691 microseconds
Sentence: Protect the Diaoyu Islands

Oracle Span 1:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 2:  Protect => protect-01
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 2-4:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Span 0-1:  Protect => protect-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-4:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 0-1:  Protect => protect-01

Dependencies:
1	Protect	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	4	det	_	_
3	Diaoyu	_	NNP	NNP	_	4	nn	_	_
4	Islands	_	NNPS	NNPS	_	1	dobj	_	_

Oracle:
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / protect-01, ARG1, i / island)

Input(Some(Graph((protect-01 :mode imperative :ARG1 (island :name (name :op "Islands" :op "Diaoyu")) :ARG0 you),ArrayBuffer(Span(2,4,List(0, 1, 2, 3),Diaoyu Islands,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(0,1,List(4),Protect,protect-01,false)),Map(2 -> "Islands", 1 -> name, 4 -> protect-01, 0 -> island, 3 -> "Diaoyu"),Map(n -> name, p -> protect-01, i -> island))),[Ljava.lang.String;@58d75e99,Annotation([Ljava.lang.String;@74751b3,[Ljava.lang.String;@741a8937,[Ljava.lang.String;@306e95ec),Annotation([Ljava.lang.String;@52af26ee,[Ljava.lang.String;@6fd83fc1,[Ledu.cmu.lti.nlp.amr.Dependency;@4f2b503c),Annotation([Ljava.lang.String;@bae7dc0,[Ljava.lang.String;@209da20d,[Ljava.lang.String;@e15b7e8),Annotation([Ljava.lang.String;@1b2abca6,[Ljava.lang.String;@6392827e,[Ledu.cmu.lti.nlp.amr.Entity;@2ed2d9cb))
AMR:
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / protect-01, ARG1, i / island)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 10,066 microseconds
Sentence: Bitterly lost our Ryukyu Islands

Oracle Span 1:  Bitterly => bitter
Oracle Span 2:  lost => lose-02
Oracle Span 3:  Ryukyu Islands => (island :name (name :op "Islands" :op "Ryukyu"))
NER Entity: (country :name (name :op "Ryukyu" :op "Islands"))
Spans:
Span 0-1:  Bitterly => bitter
Span 1-2:  lost => lose-02
Span 3-5:  Ryukyu Islands => (island :name (name :op "Islands" :op "Ryukyu"))

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 0-1:  Bitterly => bitter
Oracle Span 1-2:  lost => lose-02
Oracle Span 3-5:  Ryukyu Islands => (island :name (name :op "Islands" :op "Ryukyu"))

Dependencies:
1	Bitterly	_	RB	RB	_	2	advmod	_	_
2	lost	_	VBD	VBD	_	0	root	_	_
3	our	_	PRP$	PRP$	_	2	dobj	_	_
4	Ryukyu	_	NNP	NNP	_	5	nn	_	_
5	Islands	_	NNP	NNP	_	2	nsubj	_	_

Oracle:
(i / island, name, n / name)
(l / lose-02, ARG1, i / island)
(l / lose-02, manner, b / bitter)
(n / name, op, "Islands")
(n / name, op, "Ryukyu")

Input(Some(Graph((lose-02 :manner bitter :ARG1 (island :name (name :op "Islands" :op "Ryukyu") :poss we) :ARG0 we),ArrayBuffer(Span(3,5,List(0, 1, 2, 3),Ryukyu Islands,(island :name (name :op "Islands" :op "Ryukyu")),false), Span(1,2,List(4),lost,lose-02,false), Span(0,1,List(5),Bitterly,bitter,false)),Map(2 -> "Islands", 5 -> bitter, 1 -> name, 4 -> lose-02, 0 -> island, 3 -> "Ryukyu"),Map(n -> name, b -> bitter, i -> island, l -> lose-02))),[Ljava.lang.String;@d5b810e,Annotation([Ljava.lang.String;@43dac38f,[Ljava.lang.String;@342c38f8,[Ljava.lang.String;@c88a337),Annotation([Ljava.lang.String;@5d0a1059,[Ljava.lang.String;@485966cc,[Ledu.cmu.lti.nlp.amr.Dependency;@1de76cc7),Annotation([Ljava.lang.String;@54bff557,[Ljava.lang.String;@593aaf41,[Ljava.lang.String;@5a56cdac),Annotation([Ljava.lang.String;@7c711375,[Ljava.lang.String;@57cf54e1,[Ledu.cmu.lti.nlp.amr.Entity;@5b03b9fe))
AMR:
(i / island, name, n / name)
(l / lose-02, ARG1, i / island)
(l / lose-02, manner, b / bitter)
(n / name, op, "Islands")
(n / name, op, "Ryukyu")

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 49,271 microseconds
Sentence: How can we allow the Diaoyu Islands to fall to other countries

Oracle Span 1:  allow => allow-01
Oracle Span 2:  can => possible
Oracle Span 3:  countries => country
Oracle Span 4:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 5:  fall => fall-05
Oracle Span 6:  other => other
Oracle Span 7:  we => we
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
Spans:
Span 3-4:  allow => allow-01
Span 1-2:  can => possible
Span 11-12:  countries => country
Span 5-7:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Span 8-9:  fall => fall-05
Span 10-11:  other => other
Span 2-3:  we => we

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 3-4:  allow => allow-01
Oracle Span 1-2:  can => possible
Oracle Span 11-12:  countries => country
Oracle Span 5-7:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 8-9:  fall => fall-05
Oracle Span 10-11:  other => other
Oracle Span 2-3:  we => we

Dependencies:
1	How	_	WRB	WRB	_	4	advmod	_	_
2	can	_	MD	MD	_	4	aux	_	_
3	we	_	PRP	PRP	_	4	nsubj	_	_
4	allow	_	VB	VB	_	0	root	_	_
5	the	_	DT	DT	_	7	det	_	_
6	Diaoyu	_	NNP	NNP	_	7	nn	_	_
7	Islands	_	NNPS	NNPS	_	4	dobj	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	fall	_	VB	VB	_	4	xcomp	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	other	_	JJ	JJ	_	12	amod	_	_
12	countries	_	NNS	NNS	_	10	pobj	_	_

Oracle:
(a / allow-01, ARG0, w / we)
(a / allow-01, ARG1, f / fall-05)
(c / country, mod, o / other)
(f / fall-05, ARG1, i / island)
(f / fall-05, ARG2, c / country)
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / possible, domain, a / allow-01)

Input(Some(Graph((possible :domain (allow-01 :manner amr-unknown :ARG1 (fall-05 :ARG2 (country :mod other) :ARG1 (island :name (name :op "Islands" :op "Diaoyu"))) :ARG0 we)),ArrayBuffer(Span(5,7,List(0, 1, 2, 3),Diaoyu Islands,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(1,2,List(4),can,possible,false), Span(3,4,List(5),allow,allow-01,false), Span(8,9,List(6),fall,fall-05,false), Span(11,12,List(7),countries,country,false), Span(10,11,List(8),other,other,false), Span(2,3,List(9),we,we,false)),Map(2 -> "Islands", 5 -> allow-01, 8 -> other, 7 -> country, 1 -> name, 4 -> possible, 6 -> fall-05, 9 -> we, 0 -> island, 3 -> "Diaoyu"),Map(w -> we, n -> name, p -> possible, a -> allow-01, i -> island, c -> country, o -> other, f -> fall-05))),[Ljava.lang.String;@37d4349f,Annotation([Ljava.lang.String;@434a63ab,[Ljava.lang.String;@6e0f5f7f,[Ljava.lang.String;@2805d709),Annotation([Ljava.lang.String;@3ee37e5a,[Ljava.lang.String;@2ea41516,[Ledu.cmu.lti.nlp.amr.Dependency;@3a44431a),Annotation([Ljava.lang.String;@3c7f66c4,[Ljava.lang.String;@194bcebf,[Ljava.lang.String;@17497425),Annotation([Ljava.lang.String;@f0da945,[Ljava.lang.String;@4803b726,[Ledu.cmu.lti.nlp.amr.Entity;@ffaa6af))
AMR:
(a / allow-01, ARG0, w / we)
(a / allow-01, ARG1, f / fall-05)
(f / fall-05, ARG0, i / island)
(f / fall-05, ARG1, c / country)
(f / fall-05, ARG2, o / other)
(i / island, name, n / name)
(n / name, op, "Diaoyu")
(n / name, op, "Islands")
(p / possible, domain, a / allow-01)

WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 181,767 microseconds
Sentence: One hundred years of vicissitudes

Oracle Span 1:  vicissitudes => vicissitude
Oracle Span 2:  years => (temporal-quantity :unit year)
Spans:
Span 4-5:  vicissitudes => vicissitude
Span 2-3:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  vicissitudes => vicissitude
Oracle Span 2-3:  years => (temporal-quantity :unit year)

Dependencies:
1	One	_	CD	CD	_	0	root	_	_
2	hundred	_	CD	CD	_	3	num	_	_
3	years	_	NNS	NNS	_	1	dep	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	vicissitudes	_	NNS	NNS	_	4	pobj	_	_

Oracle:
(t / temporal-quantity, unit, y / year)
(v / vicissitude, duration, t / temporal-quantity)

Input(Some(Graph((temporal-quantity :duration-of vicissitude :unit year :quant 100),ArrayBuffer(Span(2,3,List(0, 1),years,(temporal-quantity :unit year),false), Span(4,5,List(2),vicissitudes,vicissitude,false)),Map(2 -> vicissitude, 1 -> year, 0 -> temporal-quantity),Map(t -> temporal-quantity, v -> vicissitude, y -> year))),[Ljava.lang.String;@53ce1329,Annotation([Ljava.lang.String;@316bcf94,[Ljava.lang.String;@6404f418,[Ljava.lang.String;@3e11f9e9),Annotation([Ljava.lang.String;@1de5f259,[Ljava.lang.String;@729d991e,[Ledu.cmu.lti.nlp.amr.Dependency;@31fa1761),Annotation([Ljava.lang.String;@957e06,[Ljava.lang.String;@32502377,[Ljava.lang.String;@2c1b194a),Annotation([Ljava.lang.String;@4dbb42b7,[Ljava.lang.String;@66f57048,[Ledu.cmu.lti.nlp.amr.Entity;@550dbc7a))
AMR:
(t / temporal-quantity, unit, y / year)
(v / vicissitude, quant, t / temporal-quantity)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
Decoded in 8,981 microseconds
Sentence: Smoke and clouds chase the flying waves

Oracle Span 1:  and => and
Oracle Span 2:  chase => chase-01
Oracle Span 3:  clouds => cloud
Oracle Span 4:  flying => fly-01
Oracle Span 5:  Smoke => smoke
Oracle Span 6:  waves => wave
Spans:
Span 1-2:  and => and
Span 3-4:  chase => chase-01
Span 2-3:  clouds => cloud
Span 5-6:  flying => fly-01
Span 0-1:  Smoke => smoke
Span 6-7:  waves => wave

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  and => and
Oracle Span 3-4:  chase => chase-01
Oracle Span 2-3:  clouds => cloud
Oracle Span 5-6:  flying => fly-01
Oracle Span 0-1:  Smoke => smoke
Oracle Span 6-7:  waves => wave

Dependencies:
1	Smoke	_	VB	VB	_	0	root	_	_
2	and	_	CC	CC	_	1	cc	_	_
3	clouds	_	VBZ	VBZ	_	1	conj	_	_
4	chase	_	VB	VB	_	3	ccomp	_	_
5	the	_	DT	DT	_	7	det	_	_
6	flying	_	VBG	VBG	_	7	amod	_	_
7	waves	_	NNS	NNS	_	4	dobj	_	_

Oracle:
(a / and, op, c2 / cloud)
(a / and, op, s / smoke)
(c / chase-01, ARG0, a / and)
(c / chase-01, ARG1, w / wave)
(f / fly-01, ARG1, w / wave)

Input(Some(Graph((chase-01 :ARG1 (wave :ARG1-of fly-01) :ARG0 (and :op cloud :op smoke)),ArrayBuffer(Span(3,4,List(0),chase,chase-01,false), Span(6,7,List(1),waves,wave,false), Span(5,6,List(2),flying,fly-01,false), Span(1,2,List(3),and,and,false), Span(2,3,List(4),clouds,cloud,false), Span(0,1,List(5),Smoke,smoke,false)),Map(2 -> fly-01, 5 -> smoke, 1 -> wave, 4 -> cloud, 0 -> chase-01, 3 -> and),Map(w -> wave, s -> smoke, a -> and, c -> chase-01, f -> fly-01, c2 -> cloud))),[Ljava.lang.String;@21282ed8,Annotation([Ljava.lang.String;@36916eb0,[Ljava.lang.String;@7bab3f1a,[Ljava.lang.String;@437da279),Annotation([Ljava.lang.String;@23c30a20,[Ljava.lang.String;@1e1a0406,[Ledu.cmu.lti.nlp.amr.Dependency;@3cebbb30),Annotation([Ljava.lang.String;@12aba8be,[Ljava.lang.String;@290222c1,[Ljava.lang.String;@67f639d3),Annotation([Ljava.lang.String;@6253c26,[Ljava.lang.String;@49049a04,[Ledu.cmu.lti.nlp.amr.Entity;@71a8adcf))
AMR:
(a / and, op, c / chase-01)
(a / and, op, c2 / cloud)
(a / and, op, s / smoke)
(c / chase-01, ARG1, w / wave)
(f / fly-01, ARG1, w / wave)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 21,421 microseconds
Sentence: Youngest brother is still a tender youth

Oracle Span 1:  brother => brother
Oracle Span 2:  still => still
Oracle Span 3:  tender => tender
Oracle Span 4:  Youngest => (young :degree most)
Oracle Span 5:  youth => youth
Spans:
Span 1-2:  brother => brother
Span 3-4:  still => still
Span 5-6:  tender => tender
Span 0-1:  Youngest => (young :degree most)
Span 6-7:  youth => youth

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  brother => brother
Oracle Span 3-4:  still => still
Oracle Span 5-6:  tender => tender
Oracle Span 0-1:  Youngest => (young :degree most)
Oracle Span 6-7:  youth => youth

Dependencies:
1	Youngest	_	JJ	JJ	_	2	amod	_	_
2	brother	_	NN	NN	_	7	nsubj	_	_
3	is	_	VBZ	VBZ	_	7	cop	_	_
4	still	_	RB	RB	_	7	advmod	_	_
5	a	_	DT	DT	_	7	det	_	_
6	tender	_	NN	NN	_	7	nn	_	_
7	youth	_	NN	NN	_	0	root	_	_

Oracle:
(b / brother, mod, y2 / young)
(y / youth, domain, b / brother)
(y / youth, mod, t / tender)
(y / youth, time, s / still)
(y2 / young, degree, m / most)

Input(Some(Graph((youth :domain (brother :mod (young :degree most)) :time still :mod tender),ArrayBuffer(Span(6,7,List(0),youth,youth,false), Span(1,2,List(1),brother,brother,false), Span(0,1,List(2, 3),Youngest,(young :degree most),false), Span(3,4,List(4),still,still,false), Span(5,6,List(5),tender,tender,false)),Map(2 -> young, 5 -> tender, 1 -> brother, 4 -> still, 0 -> youth, 3 -> most),Map(t -> tender, b -> brother, s -> still, m -> most, y -> youth, y2 -> young))),[Ljava.lang.String;@27462a88,Annotation([Ljava.lang.String;@82de64a,[Ljava.lang.String;@659499f1,[Ljava.lang.String;@51e69659),Annotation([Ljava.lang.String;@47e2e487,[Ljava.lang.String;@201a4587,[Ledu.cmu.lti.nlp.amr.Dependency;@61001b64),Annotation([Ljava.lang.String;@4310d43,[Ljava.lang.String;@54a7079e,[Ljava.lang.String;@26e356f0),Annotation([Ljava.lang.String;@47d9a273,[Ljava.lang.String;@4b8ee4de,[Ledu.cmu.lti.nlp.amr.Entity;@27f981c6))
AMR:
(b / brother, mod, y2 / young)
(s / still, calendar, t / tender)
(t / tender, domain, b / brother)
(y / youth, mod, t / tender)
(y2 / young, degree, m / most)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 22,166 microseconds
Sentence: Wandering in all directions, bearing a seal

Oracle Span 1:  all => all
Oracle Span 2:  bearing => bear-01
Oracle Span 3:  directions => direction
Oracle Span 4:  seal => seal
Oracle Span 5:  Wandering => wander-01
Spans:
Span 2-3:  all => all
Span 5-6:  bearing => bear-01
Span 3-4:  directions => direction
Span 7-8:  seal => seal
Span 0-1:  Wandering => wander-01

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 2-3:  all => all
Oracle Span 5-6:  bearing => bear-01
Oracle Span 3-4:  directions => direction
Oracle Span 7-8:  seal => seal
Oracle Span 0-1:  Wandering => wander-01

Dependencies:
1	Wandering	_	VBG	VBG	_	0	root	_	_
2	in	_	IN	IN	_	1	prep	_	_
3	all	_	DT	DT	_	4	det	_	_
4	directions	_	NNS	NNS	_	2	pobj	_	_
5	,	_	,	,	_	1	punct	_	_
6	bearing	_	VBG	VBG	_	1	dep	_	_
7	a	_	DT	DT	_	8	det	_	_
8	seal	_	NN	NN	_	6	dobj	_	_

Oracle:
(b / bear-01, ARG1, s / seal)
(d / direction, quant, a2 / all)
(w / wander-01, ARG1, d / direction)

Input(Some(Graph((and :op (wander-01 :ARG1 (direction :quant all)) :op (bear-01 :ARG1 seal)),ArrayBuffer(Span(0,1,List(0),Wandering,wander-01,false), Span(3,4,List(1),directions,direction,false), Span(2,3,List(2),all,all,false), Span(5,6,List(3),bearing,bear-01,false), Span(7,8,List(4),seal,seal,false)),Map(2 -> all, 1 -> direction, 4 -> seal, 0 -> wander-01, 3 -> bear-01),Map(w -> wander-01, b -> bear-01, s -> seal, d -> direction, a2 -> all))),[Ljava.lang.String;@1b11171f,Annotation([Ljava.lang.String;@1151e434,[Ljava.lang.String;@2dc54ad4,[Ljava.lang.String;@4659191b),Annotation([Ljava.lang.String;@55634720,[Ljava.lang.String;@4b0d79fc,[Ledu.cmu.lti.nlp.amr.Dependency;@4c1909a3),Annotation([Ljava.lang.String;@428640fa,[Ljava.lang.String;@d9345cd,[Ljava.lang.String;@2d710f1a),Annotation([Ljava.lang.String;@29215f06,[Ljava.lang.String;@59505b48,[Ledu.cmu.lti.nlp.amr.Entity;@4efac082))
AMR:
(b / bear-01, ARG1, s / seal)
(d / direction, name, s / seal)
(d / direction, quant, a2 / all)
(w / wander-01, ARG1, d / direction)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 122,557 microseconds
Sentence: Looking over to the flag

Oracle Span 1:  flag => flag
Oracle Span 2:  Looking => look-06
Spans:
Span 4-5:  flag => flag
Span 0-1:  Looking => look-06

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  flag => flag
Oracle Span 0-1:  Looking => look-06

Dependencies:
1	Looking	_	VBG	VBG	_	0	root	_	_
2	over	_	RP	RP	_	1	prt	_	_
3	to	_	TO	TO	_	1	prep	_	_
4	the	_	DT	DT	_	5	det	_	_
5	flag	_	NN	NN	_	3	pobj	_	_

Oracle:
(l / look-06, ARG1, f / flag)

Input(Some(Graph((look-06 :ARG1 flag),ArrayBuffer(Span(0,1,List(0),Looking,look-06,false), Span(4,5,List(1),flag,flag,false)),Map(1 -> flag, 0 -> look-06),Map(l -> look-06, f -> flag))),[Ljava.lang.String;@6bd61f98,Annotation([Ljava.lang.String;@48aca48b,[Ljava.lang.String;@13fd2ccd,[Ljava.lang.String;@b9b00e0),Annotation([Ljava.lang.String;@506ae4d4,[Ljava.lang.String;@7d4f9aae,[Ledu.cmu.lti.nlp.amr.Dependency;@72e5a8e),Annotation([Ljava.lang.String;@54e1c68b,[Ljava.lang.String;@53aac487,[Ljava.lang.String;@52b1beb6),Annotation([Ljava.lang.String;@273e7444,[Ljava.lang.String;@7db12bb6,[Ledu.cmu.lti.nlp.amr.Entity;@783a467b))
AMR:
(l / look-06, ARG1, f / flag)

WARNING: makeIds can't find span Id: 0.0
Decoded in 7,479 microseconds
Sentence: Brandish our weapons and cross to the east

Oracle Span 1:  and => and
Oracle Span 2:  Brandish => brandish-01
Oracle Span 3:  cross => cross-02
Oracle Span 4:  east => east
Oracle Span 5:  weapons => weapon
NER Entity: (thing :name (name :op "Brandish"))
Spans:
Span 3-4:  and => and
Span 0-1:  Brandish => brandish-01
Span 4-5:  cross => cross-02
Span 7-8:  east => east
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  and => and
Oracle Span 0-1:  Brandish => brandish-01
Oracle Span 4-5:  cross => cross-02
Oracle Span 7-8:  east => east
Oracle Span 2-3:  weapons => weapon

Dependencies:
1	Brandish	_	VB	VB	_	0	root	_	_
2	our	_	PRP$	PRP$	_	3	poss	_	_
3	weapons	_	NNS	NNS	_	1	dobj	_	_
4	and	_	CC	CC	_	1	cc	_	_
5	cross	_	VB	VB	_	1	conj	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	east	_	JJ	JJ	_	6	pobj	_	_

Oracle:
(a / and, op, b / brandish-01)
(a / and, op, c / cross-02)
(b / brandish-01, ARG1, w / weapon)
(c / cross-02, direction, e / east)

Input(Some(Graph((and :op (cross-02 :direction east :ARG0 we) :op (brandish-01 :ARG1 (weapon :poss we) :ARG0 we)),ArrayBuffer(Span(3,4,List(0),and,and,false), Span(4,5,List(1),cross,cross-02,false), Span(7,8,List(2),east,east,false), Span(0,1,List(3),Brandish,brandish-01,false), Span(2,3,List(4),weapons,weapon,false)),Map(2 -> east, 1 -> cross-02, 4 -> weapon, 0 -> and, 3 -> brandish-01),Map(w -> weapon, e -> east, b -> brandish-01, a -> and, c -> cross-02))),[Ljava.lang.String;@272113c4,Annotation([Ljava.lang.String;@73e9cf30,[Ljava.lang.String;@771a660,[Ljava.lang.String;@2d52216b),Annotation([Ljava.lang.String;@242b836,[Ljava.lang.String;@3f6f6701,[Ledu.cmu.lti.nlp.amr.Dependency;@3527942a),Annotation([Ljava.lang.String;@942a29c,[Ljava.lang.String;@1ed6388a,[Ljava.lang.String;@5a45133e),Annotation([Ljava.lang.String;@534a5a98,[Ljava.lang.String;@4f80542f,[Ledu.cmu.lti.nlp.amr.Entity;@60bd273d))
AMR:
(a / and, op, b / brandish-01)
(a / and, op, c / cross-02)
(b / brandish-01, ARG1, w / weapon)
(c / cross-02, ARG1, e / east)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 22,936 microseconds
Sentence: Let the horses drink from the Pacific Ocean

Oracle Span 1:  drink => drink-01
Oracle Span 2:  horses => horse
Oracle Span 3:  Let => let-01
Oracle Span 4:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))
NER Entity: (country :name (name :op "Pacific" :op "Ocean"))
Spans:
Span 3-4:  drink => drink-01
Span 2-3:  horses => horse
Span 0-1:  Let => let-01
Span 6-8:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 3-4:  drink => drink-01
Oracle Span 2-3:  horses => horse
Oracle Span 0-1:  Let => let-01
Oracle Span 6-8:  Pacific Ocean => (ocean :name (name :op "Ocean" :op "Pacific"))

Dependencies:
1	Let	_	VB	VB	_	0	root	_	_
2	the	_	DT	DT	_	4	det	_	_
3	horses	_	NNS	NNS	_	4	nn	_	_
4	drink	_	NN	NN	_	1	dobj	_	_
5	from	_	IN	IN	_	1	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Pacific	_	NNP	NNP	_	8	nn	_	_
8	Ocean	_	NNP	NNP	_	5	pobj	_	_

Oracle:
(d / drink-01, ARG0, h / horse)
(d / drink-01, ARG2, o / ocean)
(l / let-01, ARG1, d / drink-01)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)

Input(Some(Graph((let-01 :ARG1 (drink-01 :ARG2 (ocean :name (name :op "Ocean" :op "Pacific")) :ARG0 horse) :ARG0 you :mode imperative),ArrayBuffer(Span(6,8,List(0, 1, 2, 3),Pacific Ocean,(ocean :name (name :op "Ocean" :op "Pacific")),false), Span(0,1,List(4),Let,let-01,false), Span(3,4,List(5),drink,drink-01,false), Span(2,3,List(6),horses,horse,false)),Map(2 -> "Ocean", 5 -> drink-01, 1 -> name, 4 -> let-01, 6 -> horse, 0 -> ocean, 3 -> "Pacific"),Map(n -> name, h -> horse, d -> drink-01, l -> let-01, o -> ocean))),[Ljava.lang.String;@121314f7,Annotation([Ljava.lang.String;@130c12b7,[Ljava.lang.String;@5e600dd5,[Ljava.lang.String;@576d5deb),Annotation([Ljava.lang.String;@5d534f5d,[Ljava.lang.String;@2e3967ea,[Ledu.cmu.lti.nlp.amr.Dependency;@70e9c95d),Annotation([Ljava.lang.String;@4d5650ae,[Ljava.lang.String;@a38c7fe,[Ljava.lang.String;@6fdbe764),Annotation([Ljava.lang.String;@51c668e3,[Ljava.lang.String;@2e6a8155,[Ledu.cmu.lti.nlp.amr.Entity;@6221a451))
AMR:
(d / drink-01, ARG0, o / ocean)
(d / drink-01, ARG1, h / horse)
(l / let-01, ARG1, d / drink-01)
(n / name, op, "Ocean")
(n / name, op, "Pacific")
(o / ocean, name, n / name)

WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 152,196 microseconds
Sentence: June, 26th, 2002

Oracle Span 1:  2002 => 2002
Oracle Span 2:  June => 6
Spans:
Span 4-5:  2002 => 2002
Span 0-1:  June => 6

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  2002 => 2002
Oracle Span 0-1:  June => 6

Dependencies:
1	June	_	NNP	NNP	_	3	nn	_	_
2	,	_	,	,	_	3	punct	_	_
3	26th	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	2002	_	CD	CD	_	3	amod	_	_

Oracle:


Input(Some(Graph((date-entity :month 6 :day 26 :year 2002),ArrayBuffer(Span(0,1,List(0),June,6,false), Span(4,5,List(1),2002,2002,false)),Map(1 -> 2002, 0 -> 6),Map(2 -> 2002, 6 -> 6))),[Ljava.lang.String;@52719fb6,Annotation([Ljava.lang.String;@3012646b,[Ljava.lang.String;@4a883b15,[Ljava.lang.String;@25641d39),Annotation([Ljava.lang.String;@7b36aa0c,[Ljava.lang.String;@5824a83d,[Ledu.cmu.lti.nlp.amr.Dependency;@537f60bf),Annotation([Ljava.lang.String;@5677323c,[Ljava.lang.String;@18df8434,[Ljava.lang.String;@65c7a252),Annotation([Ljava.lang.String;@4d154ccd,[Ljava.lang.String;@229c6181,[Ledu.cmu.lti.nlp.amr.Entity;@4686afc2))
AMR:
(2 / 2002, calendar, 6 / 6)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 6,161 microseconds
Sentence: Other articles: "A book for Taiwan compatriots-I have a dream", "The necessity for building memorials museums or temples for Chinese national heroes", "How long will we tolerate it", "China is expecting the Olympics, but would never beg for the Olympics", "If we forget the hardship of history, there will be more history of hardship", "I am Chinese", "There is only one Chinese nation, there is only one Chinese culture", "With the over-development of sports, the state may decline", "'Wealthy country, strong people' or 'wealthy officials, poor people"?", "Disgusting Ren Zhiqiang, shut your filthy mouth", "Hateful housing prices! Pitiable people!", "Google, you have no right to make irresponsible remarks to China", "How long will we tolerate the US", "Japan deserved the bombing-strongly oppose Ban Ki-moon presenting a bouquet in Hiroshima", "Be strong, my brothers and sisters", "Do we need low-level entertainment stars, or talents in technological innovation?", "Contemporary garbage writer, shameless Li Yinhe, please let the children off the hook"

Oracle Span 1:  and => and
Oracle Span 2:  articles => article
Oracle Span 3:  Ban Ki - moon => (person :name (name :op "Ki-Moon" :op "Ban"))
Oracle Span 4:  beg => beg-01
Oracle Span 5:  bombing => bomb-01
Oracle Span 6:  book => book
Oracle Span 7:  bouquet => bouquet
Oracle Span 8:  brothers => brother
Oracle Span 9:  building => build-01
Oracle Span 10:  children => child
Oracle Span 11:  China => (country :name (name :op "China"))
Oracle Span 12:  compatriots => compatriot
Oracle Span 13:  Contemporary => contemporary
Oracle Span 14:  country => country
Oracle Span 15:  culture => culture
Oracle Span 16:  decline => decline-01
Oracle Span 17:  deserved => deserve-01
Oracle Span 18:  Disgusting => disgust-01
Oracle Span 19:  dream => (thing :ARG1-of dream-01)
Oracle Span 20:  entertainment => entertain-01
Oracle Span 21:  expecting => expect-01
Oracle Span 22:  filthy => filthy
Oracle Span 23:  forget => forget-01
Oracle Span 24:  garbage => garbage
Oracle Span 25:  Google => (company :name (name :op "Google"))
Oracle Span 26:  hardship => hardship
Oracle Span 27:  hardship => hardship
Oracle Span 28:  Hateful => hateful
Oracle Span 29:  have => have-03
Oracle Span 30:  have => have-condition-91
Oracle Span 31:  heroes => hero
Oracle Span 32:  Hiroshima => (city :name (name :op "Hiroshima"))
Oracle Span 33:  history => history
Oracle Span 34:  history => history
Oracle Span 35:  hook => (thing :ARG2-of hook-01)
Oracle Span 36:  housing => housing
Oracle Span 37:  I => i
Oracle Span 38:  I => (person :domain i)
Oracle Span 39:  innovation => innovate-01
Oracle Span 40:  it => it
Oracle Span 41:  Japan => (name :op "Japan")
Oracle Span 42:  let => let-00
Oracle Span 43:  level => level
Oracle Span 44:  Li Yinhe => (person :name (name :op "Yinhe" :op "Li"))
Oracle Span 45:  low => low
Oracle Span 46:  may => possible
Oracle Span 47:  memorials => memorial
Oracle Span 48:  more => more
Oracle Span 49:  mouth => mouth
Oracle Span 50:  museums => museum
Oracle Span 51:  nation => nation
Oracle Span 52:  national => nation
Oracle Span 53:  need => need-01
Oracle Span 54:  no => -
Oracle Span 55:  off => off
Oracle Span 56:  officials => official
Oracle Span 57:  Olympics => (game :name (name :op "Olympics"))
Oracle Span 58:  one => 1
Oracle Span 59:  one => 1
Oracle Span 60:  only => only
Oracle Span 61:  oppose => oppose-01
Oracle Span 62:  or => or
Oracle Span 63:  or => or
Oracle Span 64:  or => or
Oracle Span 65:  Other => other
Oracle Span 66:  over => overdevelop-00
Oracle Span 67:  poor => (person :mod poor)
Oracle Span 68:  presenting => present-01
Oracle Span 69:  prices => price-01
Oracle Span 70:  remarks => (thing :ARG1-of remark-01)
Oracle Span 71:  Ren Zhiqiang => (person :name (name :op "Zhiqiang" :op "Ren"))
Oracle Span 72:  shameless => shame-01
Oracle Span 73:  shut => shut-01
Oracle Span 74:  sisters => sister
Oracle Span 75:  sports => sport
Oracle Span 76:  stars => star
Oracle Span 77:  state => state
Oracle Span 78:  strong => strong
Oracle Span 79:  strong => strong
Oracle Span 80:  strongly => (person :mod strong)
Oracle Span 81:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 82:  talents => talent
Oracle Span 83:  technological => technology
Oracle Span 84:  temples => temple
Oracle Span 85:  tolerate => tolerate-01
Oracle Span 86:  tolerate => tolerate-01
Oracle Span 87:  US => (country :name (name :op "US"))
Oracle Span 88:  we => we
Oracle Span 89:  we => we
Oracle Span 90:  we => we
Oracle Span 91:  we => we
Oracle Span 92:  Wealthy => wealthy
Oracle Span 93:  writer => write-01
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Hiroshima"))
NER Entity: (organization :name (name :op "Google"))
NER Entity: (person :name (name :op "Ren" :op "Zhiqiang"))
NER Entity: (thing :name (name :op "Olympics"))
NER Entity: (person :name (name :op "Li" :op "Yinhe"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 201-202:  and => and
Span 1-2:  articles => article
Span 184-188:  Ban Ki - moon => (person :name (name :op "Ki-Moon" :op "Ban"))
Span 50-51:  beg => beg-01
Span 180-181:  bombing => bomb-01
Span 5-6:  book => book
Span 190-191:  bouquet => bouquet
Span 200-201:  brothers => brother
Span 20-21:  building => build-01
Span 235-236:  children => child
Span 41-42:  China => (country :name (name :op "China"))
Span 8-9:  compatriots => compatriot
Span 224-225:  Contemporary => contemporary
Span 114-115:  country => country
Span 93-94:  culture => culture
Span 108-109:  decline => decline-01
Span 178-179:  deserved => deserve-01
Span 131-132:  Disgusting => disgust-01
Span 13-14:  dream => (thing :ARG1-of dream-01)
Span 212-213:  entertainment => entertain-01
Span 43-44:  expecting => expect-01
Span 137-138:  filthy => filthy
Span 59-60:  forget => forget-01
Span 225-226:  garbage => garbage
Span 152-153:  Google => (company :name (name :op "Google"))
Span 61-62:  hardship => hardship
Span 71-72:  hardship => hardship
Span 142-143:  Hateful => hateful
Span 11-12:  have => have-03
Span 155-156:  have => have-condition-91
Span 28-29:  heroes => hero
Span 192-193:  Hiroshima => (city :name (name :op "Hiroshima"))
Span 63-64:  history => history
Span 69-70:  history => history
Span 238-239:  hook => (thing :ARG2-of hook-01)
Span 143-144:  housing => housing
Span 10-11:  I => i
Span 75-76:  I => (person :domain i)
Span 219-220:  innovation => innovate-01
Span 37-38:  it => it
Span 177-178:  Japan => (name :op "Japan")
Span 233-234:  let => let-00
Span 211-212:  level => level
Span 229-231:  Li Yinhe => (person :name (name :op "Yinhe" :op "Li"))
Span 209-210:  low => low
Span 107-108:  may => possible
Span 21-22:  memorials => memorial
Span 68-69:  more => more
Span 138-139:  mouth => mouth
Span 22-23:  museums => museum
Span 86-87:  nation => nation
Span 27-28:  national => nation
Span 208-209:  need => need-01
Span 156-157:  no => -
Span 236-237:  off => off
Span 122-123:  officials => official
Span 45-46:  Olympics => (game :name (name :op "Olympics"))
Span 84-85:  one => 1
Span 91-92:  one => 1
Span 83-84:  only => only
Span 183-184:  oppose => oppose-01
Span 23-24:  or => or
Span 119-120:  or => or
Span 215-216:  or => or
Span 0-1:  Other => other
Span 99-100:  over => overdevelop-00
Span 124-125:  poor => (person :mod poor)
Span 188-189:  presenting => present-01
Span 144-145:  prices => price-01
Span 161-162:  remarks => (thing :ARG1-of remark-01)
Span 132-134:  Ren Zhiqiang => (person :name (name :op "Zhiqiang" :op "Ren"))
Span 228-229:  shameless => shame-01
Span 135-136:  shut => shut-01
Span 202-203:  sisters => sister
Span 103-104:  sports => sport
Span 213-214:  stars => star
Span 106-107:  state => state
Span 116-117:  strong => strong
Span 197-198:  strong => strong
Span 182-183:  strongly => (person :mod strong)
Span 7-8:  Taiwan => (country :name (name :op "Taiwan"))
Span 216-217:  talents => talent
Span 218-219:  technological => technology
Span 24-25:  temples => temple
Span 36-37:  tolerate => tolerate-01
Span 171-172:  tolerate => tolerate-01
Span 173-174:  US => (country :name (name :op "US"))
Span 35-36:  we => we
Span 58-59:  we => we
Span 170-171:  we => we
Span 207-208:  we => we
Span 113-114:  Wealthy => wealthy
Span 226-227:  writer => write-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 125
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 126
 *** WARNING: The dependency tree seems broken.  I can't find the head of Disgusting in position 127
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ren in position 128
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zhiqiang in position 129
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 130
 *** WARNING: The dependency tree seems broken.  I can't find the head of shut in position 131
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 132
 *** WARNING: The dependency tree seems broken.  I can't find the head of filthy in position 133
 *** WARNING: The dependency tree seems broken.  I can't find the head of mouth in position 134
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 135
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 136
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 137
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hateful in position 138
 *** WARNING: The dependency tree seems broken.  I can't find the head of housing in position 139
 *** WARNING: The dependency tree seems broken.  I can't find the head of prices in position 140
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 141
 *** WARNING: The dependency tree seems broken.  I can't find the head of Pitiable in position 142
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 143
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 144
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 145
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 146
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 147
 *** WARNING: The dependency tree seems broken.  I can't find the head of Google in position 148
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 149
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 150
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 151
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 152
 *** WARNING: The dependency tree seems broken.  I can't find the head of right in position 153
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 154
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 155
 *** WARNING: The dependency tree seems broken.  I can't find the head of irresponsible in position 156
 *** WARNING: The dependency tree seems broken.  I can't find the head of remarks in position 157
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 158
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 159
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 160
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 161
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 162
 *** WARNING: The dependency tree seems broken.  I can't find the head of How in position 163
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 164
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 165
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 166
 *** WARNING: The dependency tree seems broken.  I can't find the head of tolerate in position 167
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 168
 *** WARNING: The dependency tree seems broken.  I can't find the head of US in position 169
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 170
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 171
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 172
 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 173
 *** WARNING: The dependency tree seems broken.  I can't find the head of deserved in position 174
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 175
 *** WARNING: The dependency tree seems broken.  I can't find the head of bombing-strongly in position 176
 *** WARNING: The dependency tree seems broken.  I can't find the head of oppose in position 177
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ban in position 178
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ki-moon in position 179
 *** WARNING: The dependency tree seems broken.  I can't find the head of presenting in position 180
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 181
 *** WARNING: The dependency tree seems broken.  I can't find the head of bouquet in position 182
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 183
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hiroshima in position 184
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 185
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 186
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 187
 *** WARNING: The dependency tree seems broken.  I can't find the head of Be in position 188
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 189
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 190
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 191
 *** WARNING: The dependency tree seems broken.  I can't find the head of brothers in position 192
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 193
 *** WARNING: The dependency tree seems broken.  I can't find the head of sisters in position 194
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 195
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 196
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 197
 *** WARNING: The dependency tree seems broken.  I can't find the head of Do in position 198
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 199
 *** WARNING: The dependency tree seems broken.  I can't find the head of need in position 200
 *** WARNING: The dependency tree seems broken.  I can't find the head of low-level in position 201
 *** WARNING: The dependency tree seems broken.  I can't find the head of entertainment in position 202
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 203
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 204
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 205
 *** WARNING: The dependency tree seems broken.  I can't find the head of talents in position 206
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 207
 *** WARNING: The dependency tree seems broken.  I can't find the head of technological in position 208
 *** WARNING: The dependency tree seems broken.  I can't find the head of innovation in position 209
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 210
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 211
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 212
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 213
 *** WARNING: The dependency tree seems broken.  I can't find the head of Contemporary in position 214
 *** WARNING: The dependency tree seems broken.  I can't find the head of garbage in position 215
 *** WARNING: The dependency tree seems broken.  I can't find the head of writer in position 216
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 217
 *** WARNING: The dependency tree seems broken.  I can't find the head of shameless in position 218
 *** WARNING: The dependency tree seems broken.  I can't find the head of Li in position 219
 *** WARNING: The dependency tree seems broken.  I can't find the head of Yinhe in position 220
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 221
 *** WARNING: The dependency tree seems broken.  I can't find the head of please in position 222
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 223
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 224
 *** WARNING: The dependency tree seems broken.  I can't find the head of children in position 225
 *** WARNING: The dependency tree seems broken.  I can't find the head of off in position 226
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 227
 *** WARNING: The dependency tree seems broken.  I can't find the head of hook in position 228
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 229
Langrangian relaxation converged after 56 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 125
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 126
 *** WARNING: The dependency tree seems broken.  I can't find the head of Disgusting in position 127
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ren in position 128
 *** WARNING: The dependency tree seems broken.  I can't find the head of Zhiqiang in position 129
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 130
 *** WARNING: The dependency tree seems broken.  I can't find the head of shut in position 131
 *** WARNING: The dependency tree seems broken.  I can't find the head of your in position 132
 *** WARNING: The dependency tree seems broken.  I can't find the head of filthy in position 133
 *** WARNING: The dependency tree seems broken.  I can't find the head of mouth in position 134
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 135
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 136
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 137
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hateful in position 138
 *** WARNING: The dependency tree seems broken.  I can't find the head of housing in position 139
 *** WARNING: The dependency tree seems broken.  I can't find the head of prices in position 140
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 141
 *** WARNING: The dependency tree seems broken.  I can't find the head of Pitiable in position 142
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 143
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 144
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 145
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 146
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 147
 *** WARNING: The dependency tree seems broken.  I can't find the head of Google in position 148
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 149
 *** WARNING: The dependency tree seems broken.  I can't find the head of you in position 150
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 151
 *** WARNING: The dependency tree seems broken.  I can't find the head of no in position 152
 *** WARNING: The dependency tree seems broken.  I can't find the head of right in position 153
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 154
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 155
 *** WARNING: The dependency tree seems broken.  I can't find the head of irresponsible in position 156
 *** WARNING: The dependency tree seems broken.  I can't find the head of remarks in position 157
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 158
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 159
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 160
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 161
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 162
 *** WARNING: The dependency tree seems broken.  I can't find the head of How in position 163
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 164
 *** WARNING: The dependency tree seems broken.  I can't find the head of will in position 165
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 166
 *** WARNING: The dependency tree seems broken.  I can't find the head of tolerate in position 167
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 168
 *** WARNING: The dependency tree seems broken.  I can't find the head of US in position 169
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 170
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 171
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 172
 *** WARNING: The dependency tree seems broken.  I can't find the head of Japan in position 173
 *** WARNING: The dependency tree seems broken.  I can't find the head of deserved in position 174
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 175
 *** WARNING: The dependency tree seems broken.  I can't find the head of bombing-strongly in position 176
 *** WARNING: The dependency tree seems broken.  I can't find the head of oppose in position 177
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ban in position 178
 *** WARNING: The dependency tree seems broken.  I can't find the head of Ki-moon in position 179
 *** WARNING: The dependency tree seems broken.  I can't find the head of presenting in position 180
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 181
 *** WARNING: The dependency tree seems broken.  I can't find the head of bouquet in position 182
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 183
 *** WARNING: The dependency tree seems broken.  I can't find the head of Hiroshima in position 184
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 185
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 186
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 187
 *** WARNING: The dependency tree seems broken.  I can't find the head of Be in position 188
 *** WARNING: The dependency tree seems broken.  I can't find the head of strong in position 189
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 190
 *** WARNING: The dependency tree seems broken.  I can't find the head of my in position 191
 *** WARNING: The dependency tree seems broken.  I can't find the head of brothers in position 192
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 193
 *** WARNING: The dependency tree seems broken.  I can't find the head of sisters in position 194
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 195
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 196
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 197
 *** WARNING: The dependency tree seems broken.  I can't find the head of Do in position 198
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 199
 *** WARNING: The dependency tree seems broken.  I can't find the head of need in position 200
 *** WARNING: The dependency tree seems broken.  I can't find the head of low-level in position 201
 *** WARNING: The dependency tree seems broken.  I can't find the head of entertainment in position 202
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 203
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 204
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 205
 *** WARNING: The dependency tree seems broken.  I can't find the head of talents in position 206
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 207
 *** WARNING: The dependency tree seems broken.  I can't find the head of technological in position 208
 *** WARNING: The dependency tree seems broken.  I can't find the head of innovation in position 209
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 210
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 211
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 212
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 213
 *** WARNING: The dependency tree seems broken.  I can't find the head of Contemporary in position 214
 *** WARNING: The dependency tree seems broken.  I can't find the head of garbage in position 215
 *** WARNING: The dependency tree seems broken.  I can't find the head of writer in position 216
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 217
 *** WARNING: The dependency tree seems broken.  I can't find the head of shameless in position 218
 *** WARNING: The dependency tree seems broken.  I can't find the head of Li in position 219
 *** WARNING: The dependency tree seems broken.  I can't find the head of Yinhe in position 220
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 221
 *** WARNING: The dependency tree seems broken.  I can't find the head of please in position 222
 *** WARNING: The dependency tree seems broken.  I can't find the head of let in position 223
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 224
 *** WARNING: The dependency tree seems broken.  I can't find the head of children in position 225
 *** WARNING: The dependency tree seems broken.  I can't find the head of off in position 226
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 227
 *** WARNING: The dependency tree seems broken.  I can't find the head of hook in position 228
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 229
Oracle Span 201-202:  and => and
Oracle Span 1-2:  articles => article
Oracle Span 184-188:  Ban Ki - moon => (person :name (name :op "Ki-Moon" :op "Ban"))
Oracle Span 50-51:  beg => beg-01
Oracle Span 180-181:  bombing => bomb-01
Oracle Span 5-6:  book => book
Oracle Span 190-191:  bouquet => bouquet
Oracle Span 200-201:  brothers => brother
Oracle Span 20-21:  building => build-01
Oracle Span 235-236:  children => child
Oracle Span 41-42:  China => (country :name (name :op "China"))
Oracle Span 8-9:  compatriots => compatriot
Oracle Span 224-225:  Contemporary => contemporary
Oracle Span 114-115:  country => country
Oracle Span 93-94:  culture => culture
Oracle Span 108-109:  decline => decline-01
Oracle Span 178-179:  deserved => deserve-01
Oracle Span 131-132:  Disgusting => disgust-01
Oracle Span 13-14:  dream => (thing :ARG1-of dream-01)
Oracle Span 212-213:  entertainment => entertain-01
Oracle Span 43-44:  expecting => expect-01
Oracle Span 137-138:  filthy => filthy
Oracle Span 59-60:  forget => forget-01
Oracle Span 225-226:  garbage => garbage
Oracle Span 152-153:  Google => (company :name (name :op "Google"))
Oracle Span 61-62:  hardship => hardship
Oracle Span 71-72:  hardship => hardship
Oracle Span 142-143:  Hateful => hateful
Oracle Span 11-12:  have => have-03
Oracle Span 155-156:  have => have-condition-91
Oracle Span 28-29:  heroes => hero
Oracle Span 192-193:  Hiroshima => (city :name (name :op "Hiroshima"))
Oracle Span 63-64:  history => history
Oracle Span 69-70:  history => history
Oracle Span 238-239:  hook => (thing :ARG2-of hook-01)
Oracle Span 143-144:  housing => housing
Oracle Span 10-11:  I => i
Oracle Span 75-76:  I => (person :domain i)
Oracle Span 219-220:  innovation => innovate-01
Oracle Span 37-38:  it => it
Oracle Span 177-178:  Japan => (name :op "Japan")
Oracle Span 233-234:  let => let-00
Oracle Span 211-212:  level => level
Oracle Span 229-231:  Li Yinhe => (person :name (name :op "Yinhe" :op "Li"))
Oracle Span 209-210:  low => low
Oracle Span 107-108:  may => possible
Oracle Span 21-22:  memorials => memorial
Oracle Span 68-69:  more => more
Oracle Span 138-139:  mouth => mouth
Oracle Span 22-23:  museums => museum
Oracle Span 86-87:  nation => nation
Oracle Span 27-28:  national => nation
Oracle Span 208-209:  need => need-01
Oracle Span 156-157:  no => -
Oracle Span 236-237:  off => off
Oracle Span 122-123:  officials => official
Oracle Span 45-46:  Olympics => (game :name (name :op "Olympics"))
Oracle Span 84-85:  one => 1
Oracle Span 91-92:  one => 1
Oracle Span 83-84:  only => only
Oracle Span 183-184:  oppose => oppose-01
Oracle Span 23-24:  or => or
Oracle Span 119-120:  or => or
Oracle Span 215-216:  or => or
Oracle Span 0-1:  Other => other
Oracle Span 99-100:  over => overdevelop-00
Oracle Span 124-125:  poor => (person :mod poor)
Oracle Span 188-189:  presenting => present-01
Oracle Span 144-145:  prices => price-01
Oracle Span 161-162:  remarks => (thing :ARG1-of remark-01)
Oracle Span 132-134:  Ren Zhiqiang => (person :name (name :op "Zhiqiang" :op "Ren"))
Oracle Span 228-229:  shameless => shame-01
Oracle Span 135-136:  shut => shut-01
Oracle Span 202-203:  sisters => sister
Oracle Span 103-104:  sports => sport
Oracle Span 213-214:  stars => star
Oracle Span 106-107:  state => state
Oracle Span 116-117:  strong => strong
Oracle Span 197-198:  strong => strong
Oracle Span 182-183:  strongly => (person :mod strong)
Oracle Span 7-8:  Taiwan => (country :name (name :op "Taiwan"))
Oracle Span 216-217:  talents => talent
Oracle Span 218-219:  technological => technology
Oracle Span 24-25:  temples => temple
Oracle Span 36-37:  tolerate => tolerate-01
Oracle Span 171-172:  tolerate => tolerate-01
Oracle Span 173-174:  US => (country :name (name :op "US"))
Oracle Span 35-36:  we => we
Oracle Span 58-59:  we => we
Oracle Span 170-171:  we => we
Oracle Span 207-208:  we => we
Oracle Span 113-114:  Wealthy => wealthy
Oracle Span 226-227:  writer => write-01

Dependencies:
1	Other	_	JJ	JJ	_	2	amod	_	_
2	articles	_	NNS	NNS	_	0	root	_	_
3	:	_	:	:	_	2	punct	_	_
4	"	_	``	``	_	2	punct	_	_
5	A	_	DT	DT	_	6	det	_	_
6	book	_	NN	NN	_	10	nsubj	_	_
7	for	_	IN	IN	_	6	prep	_	_
8	Taiwan	_	NNP	NNP	_	9	nn	_	_
9	compatriots-I	_	NNP	NNP	_	7	pobj	_	_
10	have	_	VBP	VBP	_	2	dep	_	_
11	a	_	DT	DT	_	12	det	_	_
12	dream	_	NN	NN	_	10	dobj	_	_
13	"	_	''	''	_	12	punct	_	_
14	,	_	,	,	_	10	punct	_	_
15	"	_	``	``	_	17	punct	_	_
16	The	_	DT	DT	_	17	det	_	_
17	necessity	_	NN	NN	_	10	dobj	_	_
18	for	_	IN	IN	_	42	prep	_	_
19	building	_	VBG	VBG	_	18	pcomp	_	_
20	memorials	_	JJ	JJ	_	21	amod	_	_
21	museums	_	NNS	NNS	_	19	dobj	_	_
22	or	_	CC	CC	_	21	cc	_	_
23	temples	_	NNS	NNS	_	21	conj	_	_
24	for	_	IN	IN	_	21	prep	_	_
25	Chinese	_	JJ	JJ	_	27	amod	_	_
26	national	_	JJ	JJ	_	27	amod	_	_
27	heroes	_	NNS	NNS	_	24	pobj	_	_
28	"	_	''	''	_	21	punct	_	_
29	,	_	,	,	_	19	punct	_	_
30	"	_	``	``	_	19	punct	_	_
31	How	_	WRB	WRB	_	32	advmod	_	_
32	long	_	JJ	JJ	_	35	dep	_	_
33	will	_	MD	MD	_	35	aux	_	_
34	we	_	PRP	PRP	_	35	nsubj	_	_
35	tolerate	_	VB	VB	_	19	ccomp	_	_
36	it	_	PRP	PRP	_	35	dobj	_	_
37	"	_	''	''	_	19	punct	_	_
38	,	_	,	,	_	42	punct	_	_
39	"	_	``	``	_	42	punct	_	_
40	China	_	NNP	NNP	_	42	nsubj	_	_
41	is	_	VBZ	VBZ	_	42	aux	_	_
42	expecting	_	VBG	VBG	_	17	rcmod	_	_
43	the	_	DT	DT	_	44	det	_	_
44	Olympics	_	NNPS	NNPS	_	42	dobj	_	_
45	,	_	,	,	_	42	punct	_	_
46	but	_	CC	CC	_	42	cc	_	_
47	would	_	MD	MD	_	49	aux	_	_
48	never	_	RB	RB	_	49	neg	_	_
49	beg	_	VB	VB	_	42	conj	_	_
50	for	_	IN	IN	_	49	prep	_	_
51	the	_	DT	DT	_	52	det	_	_
52	Olympics	_	NNPS	NNPS	_	50	pobj	_	_
53	"	_	''	''	_	49	punct	_	_
54	,	_	,	,	_	42	punct	_	_
55	"	_	``	``	_	68	punct	_	_
56	If	_	IN	IN	_	58	mark	_	_
57	we	_	PRP	PRP	_	58	nsubj	_	_
58	forget	_	VB	VB	_	68	advcl	_	_
59	the	_	DT	DT	_	60	det	_	_
60	hardship	_	NN	NN	_	58	dobj	_	_
61	of	_	IN	IN	_	60	prep	_	_
62	history	_	NN	NN	_	61	pobj	_	_
63	,	_	,	,	_	68	punct	_	_
64	there	_	EX	EX	_	68	expl	_	_
65	will	_	MD	MD	_	68	aux	_	_
66	be	_	VB	VB	_	68	cop	_	_
67	more	_	JJR	JJR	_	68	amod	_	_
68	history	_	NN	NN	_	42	parataxis	_	_
69	of	_	IN	IN	_	68	prep	_	_
70	hardship	_	NN	NN	_	69	pobj	_	_
71	"	_	''	''	_	68	punct	_	_
72	,	_	,	,	_	42	punct	_	_
73	"	_	``	``	_	76	punct	_	_
74	I	_	PRP	PRP	_	76	nsubj	_	_
75	am	_	VBP	VBP	_	76	cop	_	_
76	Chinese	_	JJ	JJ	_	42	parataxis	_	_
77	"	_	''	''	_	76	punct	_	_
78	,	_	,	,	_	42	punct	_	_
79	"	_	``	``	_	81	punct	_	_
80	There	_	EX	EX	_	81	expl	_	_
81	is	_	VBZ	VBZ	_	42	parataxis	_	_
82	only	_	RB	RB	_	81	advmod	_	_
83	one	_	CD	CD	_	85	num	_	_
84	Chinese	_	JJ	JJ	_	85	amod	_	_
85	nation	_	NN	NN	_	81	nsubj	_	_
86	,	_	,	,	_	81	punct	_	_
87	there	_	EX	EX	_	88	expl	_	_
88	is	_	VBZ	VBZ	_	81	parataxis	_	_
89	only	_	RB	RB	_	88	advmod	_	_
90	one	_	CD	CD	_	92	num	_	_
91	Chinese	_	JJ	JJ	_	92	amod	_	_
92	culture	_	NN	NN	_	88	nsubj	_	_
93	"	_	''	''	_	81	punct	_	_
94	,	_	,	,	_	42	punct	_	_
95	"	_	``	``	_	105	punct	_	_
96	With	_	IN	IN	_	105	prep	_	_
97	the	_	DT	DT	_	98	det	_	_
98	over-development	_	NN	NN	_	96	pobj	_	_
99	of	_	IN	IN	_	98	prep	_	_
100	sports	_	NNS	NNS	_	99	pobj	_	_
101	,	_	,	,	_	105	punct	_	_
102	the	_	DT	DT	_	103	det	_	_
103	state	_	NN	NN	_	105	nsubj	_	_
104	may	_	MD	MD	_	105	aux	_	_
105	decline	_	VB	VB	_	42	parataxis	_	_
106	"	_	''	''	_	105	punct	_	_
107	,	_	,	,	_	17	punct	_	_
108	"	_	''	''	_	17	punct	_	_
109	'	_	``	``	_	111	punct	_	_
110	Wealthy	_	NNP	NNP	_	111	nn	_	_
111	country	_	NN	NN	_	17	dep	_	_
112	,	_	,	,	_	111	punct	_	_
113	strong	_	JJ	JJ	_	114	amod	_	_
114	people	_	NNS	NNS	_	111	appos	_	_
115	'	_	''	''	_	111	punct	_	_
116	or	_	CC	CC	_	111	cc	_	_
117	'	_	``	``	_	111	punct	_	_
118	wealthy	_	JJ	JJ	_	119	amod	_	_
119	officials	_	NNS	NNS	_	111	conj	_	_
120	,	_	,	,	_	119	punct	_	_
121	poor	_	JJ	JJ	_	122	amod	_	_
122	people	_	NNS	NNS	_	119	appos	_	_
123	"	_	''	''	_	122	punct	_	_
124	?	_	.	.	_	2	punct	_	_
125	"	_	''	''	_	2	punct	_	_
1	,	_	,	,	_	3	punct	_	_
2	"	_	``	``	_	3	punct	_	_
3	Disgusting	_	NNP	NNP	_	7	dep	_	_
4	Ren	_	NNP	NNP	_	5	nn	_	_
5	Zhiqiang	_	NNP	NNP	_	3	dep	_	_
6	,	_	,	,	_	3	punct	_	_
7	shut	_	VB	VB	_	0	root	_	_
8	your	_	PRP$	PRP$	_	10	poss	_	_
9	filthy	_	NN	NN	_	10	nn	_	_
10	mouth	_	NN	NN	_	7	dobj	_	_
11	"	_	''	''	_	10	punct	_	_
12	,	_	,	,	_	15	punct	_	_
13	"	_	``	``	_	15	punct	_	_
14	Hateful	_	NNP	NNP	_	15	nsubj	_	_
15	housing	_	VBZ	VBZ	_	7	dep	_	_
16	prices	_	NNS	NNS	_	15	dobj	_	_
17	!	_	.	.	_	7	punct	_	_
1	Pitiable	_	VB	VB	_	0	root	_	_
2	people	_	NNS	NNS	_	1	dobj	_	_
3	!	_	.	.	_	1	punct	_	_
4	"	_	''	''	_	1	punct	_	_
1	,	_	,	,	_	6	punct	_	_
2	"	_	``	``	_	6	punct	_	_
3	Google	_	JJ	JJ	_	6	dep	_	_
4	,	_	,	,	_	6	punct	_	_
5	you	_	PRP	PRP	_	6	nsubj	_	_
6	have	_	VBP	VBP	_	0	root	_	_
7	no	_	RB	RB	_	8	neg	_	_
8	right	_	RB	RB	_	6	advmod	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	make	_	VB	VB	_	6	xcomp	_	_
11	irresponsible	_	VBG	VBG	_	10	xcomp	_	_
12	remarks	_	NNS	NNS	_	11	dobj	_	_
13	to	_	TO	TO	_	12	prep	_	_
14	China	_	NNP	NNP	_	13	pobj	_	_
15	"	_	''	''	_	12	punct	_	_
16	,	_	,	,	_	11	punct	_	_
17	"	_	``	``	_	11	punct	_	_
18	How	_	WRB	WRB	_	19	advmod	_	_
19	long	_	JJ	JJ	_	22	dep	_	_
20	will	_	MD	MD	_	22	aux	_	_
21	we	_	PRP	PRP	_	22	nsubj	_	_
22	tolerate	_	VB	VB	_	11	ccomp	_	_
23	the	_	DT	DT	_	24	det	_	_
24	US	_	NNP	NNP	_	22	dobj	_	_
25	"	_	''	''	_	11	punct	_	_
26	,	_	,	,	_	29	punct	_	_
27	"	_	``	``	_	29	punct	_	_
28	Japan	_	NNP	NNP	_	29	nsubj	_	_
29	deserved	_	VBD	VBD	_	10	parataxis	_	_
30	the	_	DT	DT	_	31	det	_	_
31	bombing-strongly	_	NN	NN	_	32	nsubj	_	_
32	oppose	_	VBP	VBP	_	29	ccomp	_	_
33	Ban	_	NNP	NNP	_	34	nn	_	_
34	Ki-moon	_	NNP	NNP	_	35	nsubj	_	_
35	presenting	_	VBG	VBG	_	32	dep	_	_
36	a	_	DT	DT	_	37	det	_	_
37	bouquet	_	NN	NN	_	35	dobj	_	_
38	in	_	IN	IN	_	37	prep	_	_
39	Hiroshima	_	NNP	NNP	_	38	pobj	_	_
40	"	_	''	''	_	37	punct	_	_
41	,	_	,	,	_	32	punct	_	_
42	"	_	``	``	_	44	punct	_	_
43	Be	_	VB	VB	_	44	cop	_	_
44	strong	_	JJ	JJ	_	32	ccomp	_	_
45	,	_	,	,	_	44	punct	_	_
46	my	_	PRP$	PRP$	_	47	poss	_	_
47	brothers	_	NNS	NNS	_	44	dep	_	_
48	and	_	CC	CC	_	47	cc	_	_
49	sisters	_	NNS	NNS	_	47	conj	_	_
50	"	_	''	''	_	29	punct	_	_
51	,	_	,	,	_	29	punct	_	_
52	"	_	``	``	_	10	punct	_	_
53	Do	_	VBP	VBP	_	55	aux	_	_
54	we	_	PRP	PRP	_	55	nsubj	_	_
55	need	_	VB	VB	_	10	dep	_	_
56	low-level	_	JJ	JJ	_	58	amod	_	_
57	entertainment	_	NN	NN	_	58	nn	_	_
58	stars	_	NNS	NNS	_	55	dobj	_	_
59	,	_	,	,	_	58	punct	_	_
60	or	_	CC	CC	_	58	cc	_	_
61	talents	_	NNS	NNS	_	58	conj	_	_
62	in	_	IN	IN	_	61	prep	_	_
63	technological	_	JJ	JJ	_	64	amod	_	_
64	innovation	_	NN	NN	_	62	pobj	_	_
65	?	_	.	.	_	55	punct	_	_
66	"	_	''	''	_	10	punct	_	_
1	,	_	,	,	_	12	punct	_	_
2	"	_	``	``	_	12	punct	_	_
3	Contemporary	_	NNP	NNP	_	5	nn	_	_
4	garbage	_	NN	NN	_	5	nn	_	_
5	writer	_	NN	NN	_	12	nsubj	_	_
6	,	_	,	,	_	5	punct	_	_
7	shameless	_	NNS	NNS	_	5	appos	_	_
8	Li	_	NNP	NNP	_	9	nn	_	_
9	Yinhe	_	NNP	NNP	_	7	dep	_	_
10	,	_	,	,	_	12	punct	_	_
11	please	_	NNP	NNP	_	12	nsubj	_	_
12	let	_	VBD	VBD	_	0	root	_	_
13	the	_	DT	DT	_	14	det	_	_
14	children	_	NNS	NNS	_	12	dobj	_	_
15	off	_	IN	IN	_	12	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	hook	_	NN	NN	_	15	pobj	_	_
18	"	_	''	''	_	12	punct	_	_

Oracle:
(a / article, mod, o / other)
(a2 / and, op, b / book)
(a2 / and, op, d5 / deserve-01)
(a2 / and, op, h4 / have-condition-91)
(a2 / and, op, l3 / let-00)
(a2 / and, op, n14 / need-01)
(a2 / and, op, o5 / or)
(a2 / and, op, p14 / person)
(a2 / and, op, s4 / shut-01)
(a2 / and, op, s6 / strong)
(a2 / and, op, t3 / tolerate-01)
(a2 / and, op, t5 / tolerate-01)
(b / book, beneficiary, c / compatriot)
(b / book, mod, h / have-03)
(b2 / build-01, ARG1, o2 / or)
(b2 / build-01, beneficiary, h2 / hero)
(b3 / beg-01, ARG0, c3 / country)
(b3 / beg-01, ARG2, g / game)
(b3 / beg-01, polarity, - / -)
(c / compatriot, mod, c2 / country)
(c10 / country, name, n10 / name)
(c11 / country, name, n11 / name)
(c12 / city, name, n13 / name)
(c15 / company, name, n8 / name)
(c2 / country, name, n18 / name)
(c3 / country, name, n20 / name)
(c7 / culture, quant, 12 / 1)
(d / dream-01, ARG1, t19 / thing)
(d2 / decline-01, ARG1, s / state)
(d4 / disgust-01, ARG0, p5 / person)
(d5 / deserve-01, ARG0, c11 / country)
(d5 / deserve-01, ARG1, p11 / present-01)
(e2 / expect-01, ARG1, g / game)
(e4 / entertain-01, ARG0, s8 / star)
(e4 / entertain-01, mod, l / level)
(f / forget-01, ARG0, w2 / we)
(f / forget-01, ARG1, h7 / hardship)
(g / game, name, n3 / name)
(h / have-03, ARG1, t19 / thing)
(h10 / hook-01, ARG2, t8 / thing)
(h2 / hero, mod, c3 / country)
(h2 / hero, mod, n19 / nation)
(h4 / have-condition-91, ARG1, h5 / history)
(h4 / have-condition-91, ARG2, f / forget-01)
(h5 / history, mod, h6 / hardship)
(h5 / history, mod, m3 / more)
(h7 / hardship, poss, h11 / history)
(i5 / innovate-01, ARG1, t7 / technology)
(l / level, mod, l2 / low)
(l3 / let-00, ARG0, p13 / person)
(l3 / let-00, ARG1, c14 / child)
(l3 / let-00, location, o9 / off)
(m / museum, mod, m2 / memorial)
(m4 / mouth, mod, f2 / filthy)
(n10 / name, op, "US")
(n11 / name, op, "Japan")
(n12 / name, op, "Ban")
(n12 / name, op, "Ki-Moon")
(n13 / name, op, "Hiroshima")
(n14 / need-01, ARG0, w5 / we)
(n14 / need-01, ARG1, o8 / or)
(n15 / name, op, "Li")
(n15 / name, op, "Yinhe")
(n18 / name, op, "Taiwan")
(n20 / name, op, "China")
(n3 / name, op, "Olympics")
(n5 / nation, mod, c3 / country)
(n5 / nation, quant, 1 / 1)
(n7 / name, op, "Ren")
(n7 / name, op, "Zhiqiang")
(n8 / name, op, "Google")
(o10 / overdevelop-00, ARG1, s2 / sport)
(o2 / or, op, m / museum)
(o2 / or, op, t2 / temple)
(o6 / official, mod, w3 / wealthy)
(o7 / oppose-01, ARG0, p12 / person)
(o7 / oppose-01, ARG1, b5 / bomb-01)
(o7 / oppose-01, manner, s5 / strong)
(o8 / or, op, s8 / star)
(o8 / or, op, t6 / talent)
(o9 / off, op, t8 / thing)
(p11 / present-01, ARG0, p12 / person)
(p11 / present-01, ARG1, b4 / bouquet)
(p11 / present-01, location, c12 / city)
(p12 / person, name, n12 / name)
(p13 / person, name, n15 / name)
(p14 / person, domain, i3 / i)
(p14 / person, mod, c3 / country)
(p2 / person, mod, s3 / strong)
(p3 / person, mod, p4 / poor)
(p5 / person, name, n7 / name)
(p5 / person, part, m4 / mouth)
(p6 / price-01, ARG1, h8 / housing)
(r / remark-01, ARG0, c15 / company)
(r / remark-01, ARG1, t4 / thing)
(r / remark-01, ARG2, c3 / country)
(s4 / shut-01, ARG0, p5 / person)
(s4 / shut-01, ARG1, m4 / mouth)
(s9 / shame-01, ARG1, p13 / person)
(t3 / tolerate-01, ARG0, w / we)
(t3 / tolerate-01, ARG1, i2 / it)
(t5 / tolerate-01, ARG0, w4 / we)
(t5 / tolerate-01, ARG1, c10 / country)
(t6 / talent, mod, i5 / innovate-01)
(w6 / write-01, ARG0, p13 / person)
(w6 / write-01, ARG1, g2 / garbage)
(w6 / write-01, time, c13 / contemporary)

Input(Some(Graph((title-01 :ARG1 (article :mod other) :ARG2 (and :op (let-00 :location (off :op (thing :ARG2-of hook-01)) :ARG1 child :ARG0 (person :ARG1-of (shame-01 :polarity -) :ARG0-of (write-01 :time contemporary :ARG1 garbage) :name (name :op "Yinhe" :op "Li")) :mode imperative :polite +) :op (need-01 :ARG1 (or :op (talent :mod (innovate-01 :ARG1 technology)) :op (star :ARG0-of (entertain-01 :mod (level :mod low)))) :ARG0 we :mode interrogative) :op (strong :domain (and :op brother :op sister :poss i) :mode imperative) :op (deserve-01 :ARG1 (present-01 :location (city :name (name :op "Hiroshima")) :ARG1 bouquet :ARG0 (person :ARG0-of (oppose-01 :manner strong :ARG1 bomb-01) :name (name :op "Ki-Moon" :op "Ban"))) :ARG0 (country :name (name :op "Japan"))) :op (tolerate-01 :duration amr-unknown :ARG1 (country :name (name :op "US")) :ARG0 we) :op (say-01 :ARG1 (entitle-01 :polarity - :ARG1 (thing :ARG1-of (responsible-41 :polarity -) :ARG1-of (remark-01 :ARG0 company :ARG2 country)) :ARG2 company) :ARG2 (company :name (name :op "Google"))) :op (multi-sentence :snt1 (monetary-quantity :ARG2-of (price-01 :ARG1 housing) :mod hateful) :snt2 (person :ARG1-of (pity-01 :mod possible))) :op (shut-01 :ARG1 (mouth :mod filthy :part-of person) :ARG0 (person :ARG0-of disgust-01 :name (name :op "Zhiqiang" :op "Ren"))) :op (or :op (and :op (official :mod wealthy) :op (person :mod poor)) :op (and :op (country :mod wealthy) :op (person :mod strong)) :mode interrogative) :op (possible :domain (decline-01 :ARG1 state) :time (overdevelop-00 :ARG1 sport)) :op (and :op (nation :quant 1 :mod country) :op (culture :mod country :quant 1) :mod only) :op (person :domain i :mod country) :op (have-condition-91 :ARG2 (forget-01 :ARG1 (hardship :poss history) :ARG0 we) :ARG1 (history :mod hardship :mod more)) :op (have-concession-91 :ARG1 (beg-01 :time ever :ARG2 (game :name (name :op "Olympics")) :polarity - :ARG0 country) :ARG2 (expect-01 :ARG0 country :ARG1 game)) :op (tolerate-01 :duration amr-unknown :ARG1 it :ARG0 we) :op (need-01 :ARG1 (build-01 :beneficiary (hero :mod (country :name (name :op "China")) :mod nation) :ARG1 (or :op temple :op (museum :mod memorial)))) :op (book :mod (have-03 :ARG1 (thing :ARG1-of dream-01) :ARG0 i) :beneficiary (compatriot :mod (country :name (name :op "Taiwan")))))),ArrayBuffer(Span(7,8,List(0, 1, 2),Taiwan,(country :name (name :op "Taiwan")),false), Span(41,42,List(3, 4, 5),China,(country :name (name :op "China")),false), Span(45,46,List(6, 7, 8),Olympics,(game :name (name :op "Olympics")),false), Span(132,134,List(9, 10, 11, 12),Ren Zhiqiang,(person :name (name :op "Zhiqiang" :op "Ren")),false), Span(152,153,List(13, 14, 15),Google,(company :name (name :op "Google")),false), Span(173,174,List(16, 17, 18),US,(country :name (name :op "US")),false), Span(177,178,List(19, 20),Japan,(name :op "Japan"),false), Span(184,188,List(21, 22, 23, 24),Ban Ki - moon,(person :name (name :op "Ki-Moon" :op "Ban")),false), Span(192,193,List(25, 26, 27),Hiroshima,(city :name (name :op "Hiroshima")),false), Span(229,231,List(28, 29, 30, 31),Li Yinhe,(person :name (name :op "Yinhe" :op "Li")),false), Span(156,157,List(32),no,-,false), Span(1,2,List(33),articles,article,false), Span(0,1,List(34),Other,other,false), Span(201,202,List(35),and,and,false), Span(233,234,List(36),let,let-00,false), Span(236,237,List(37),off,off,false), Span(238,239,List(38, 39),hook,(thing :ARG2-of hook-01),false), Span(235,236,List(40),children,child,false), Span(226,227,List(41),writer,write-01,false), Span(224,225,List(42),Contemporary,contemporary,false), Span(225,226,List(43),garbage,garbage,false), Span(208,209,List(44),need,need-01,false), Span(23,24,List(45),or,or,false), Span(216,217,List(46),talents,talent,false), Span(213,214,List(47),stars,star,false), Span(211,212,List(48),level,level,false), Span(209,210,List(49),low,low,false), Span(35,36,List(50),we,we,false), Span(116,117,List(51),strong,strong,false), Span(200,201,List(52),brothers,brother,false), Span(202,203,List(53),sisters,sister,false), Span(10,11,List(54),I,i,false), Span(178,179,List(55),deserved,deserve-01,false), Span(188,189,List(56),presenting,present-01,false), Span(190,191,List(57),bouquet,bouquet,false), Span(183,184,List(58),oppose,oppose-01,false), Span(197,198,List(59),strong,strong,false), Span(180,181,List(60),bombing,bomb-01,false), Span(114,115,List(61),country,country,false), Span(36,37,List(62),tolerate,tolerate-01,false), Span(58,59,List(63),we,we,false), Span(161,162,List(64, 65),remarks,(thing :ARG1-of remark-01),false), Span(144,145,List(66),prices,price-01,false), Span(143,144,List(67),housing,housing,false), Span(142,143,List(68),Hateful,hateful,false), Span(107,108,List(69),may,possible,false), Span(135,136,List(70),shut,shut-01,false), Span(138,139,List(71),mouth,mouth,false), Span(137,138,List(72),filthy,filthy,false), Span(131,132,List(73),Disgusting,disgust-01,false), Span(119,120,List(74),or,or,false), Span(122,123,List(75),officials,official,false), Span(124,125,List(76, 77),poor,(person :mod poor),false), Span(113,114,List(78),Wealthy,wealthy,false), Span(108,109,List(79),decline,decline-01,false), Span(106,107,List(80),state,state,false), Span(103,104,List(81),sports,sport,false), Span(86,87,List(82),nation,nation,false), Span(84,85,List(83),one,1,false), Span(93,94,List(84),culture,culture,false), Span(91,92,List(85),one,1,false), Span(83,84,List(86),only,only,false), Span(75,76,List(87, 88),I,(person :domain i),false), Span(63,64,List(89),history,history,false), Span(61,62,List(90),hardship,hardship,false), Span(68,69,List(91),more,more,false), Span(59,60,List(92),forget,forget-01,false), Span(71,72,List(93),hardship,hardship,false), Span(69,70,List(94),history,history,false), Span(170,171,List(95),we,we,false), Span(50,51,List(96),beg,beg-01,false), Span(43,44,List(97),expecting,expect-01,false), Span(171,172,List(98),tolerate,tolerate-01,false), Span(37,38,List(99),it,it,false), Span(207,208,List(100),we,we,false), Span(20,21,List(101),building,build-01,false), Span(28,29,List(102),heroes,hero,false), Span(215,216,List(103),or,or,false), Span(24,25,List(104),temples,temple,false), Span(22,23,List(105),museums,museum,false), Span(21,22,List(106),memorials,memorial,false), Span(5,6,List(107),book,book,false), Span(11,12,List(108),have,have-03,false), Span(13,14,List(109, 110),dream,(thing :ARG1-of dream-01),false), Span(8,9,List(111),compatriots,compatriot,false), Span(228,229,List(112),shameless,shame-01,false), Span(219,220,List(113),innovation,innovate-01,false), Span(218,219,List(114),technological,technology,false), Span(212,213,List(115),entertainment,entertain-01,false), Span(182,183,List(116, 117),strongly,(person :mod strong),false), Span(99,100,List(118),over,overdevelop-00,false), Span(155,156,List(119),have,have-condition-91,false), Span(27,28,List(120),national,nation,false)),Map(111 -> compatriot, 99 -> it, 90 -> hardship, 57 -> bouquet, 84 -> culture, 78 -> wealthy, 63 -> we, 105 -> museum, 45 -> or, 39 -> hook-01, 30 -> "Yinhe", 66 -> price-01, 51 -> strong, 87 -> person, 2 -> "Taiwan", 72 -> filthy, 5 -> "China", 48 -> level, 69 -> possible, 33 -> article, 27 -> "Hiroshima", 54 -> i, 12 -> "Ren", 60 -> bomb-01, 8 -> "Olympics", 15 -> "Google", 42 -> contemporary, 110 -> dream-01, 36 -> let-00, 98 -> tolerate-01, 21 -> person, 119 -> have-condition-91, 113 -> innovate-01, 92 -> forget-01, 71 -> mouth, 18 -> "US", 86 -> only, 24 -> "Ban", 107 -> book, 74 -> or, 101 -> build-01, 89 -> history, 95 -> we, 68 -> hateful, 53 -> sister, 80 -> state, 116 -> person, 41 -> write-01, 35 -> and, 83 -> 1, 104 -> temple, 62 -> tolerate-01, 56 -> present-01, 7 -> name, 77 -> poor, 59 -> strong, 17 -> name, 1 -> name, 50 -> we, 44 -> need-01, 23 -> "Ki-Moon", 38 -> thing, 65 -> remark-01, 47 -> star, 26 -> name, 4 -> name, 115 -> entertain-01, 11 -> "Zhiqiang", 32 -> -, 14 -> name, 97 -> expect-01, 82 -> nation, 118 -> overdevelop-00, 29 -> name, 20 -> "Japan", 103 -> or, 112 -> shame-01, 85 -> 1, 79 -> decline-01, 70 -> shut-01, 64 -> thing, 91 -> more, 106 -> memorial, 46 -> talent, 94 -> history, 52 -> brother, 109 -> thing, 73 -> disgust-01, 67 -> housing, 100 -> we, 88 -> i, 34 -> other, 28 -> person, 6 -> game, 40 -> child, 55 -> deserve-01, 49 -> low, 76 -> person, 61 -> country, 9 -> person, 0 -> country, 43 -> garbage, 22 -> name, 58 -> oppose-01, 16 -> country, 37 -> off, 19 -> name, 3 -> country, 10 -> name, 31 -> "Li", 25 -> city, 120 -> nation, 93 -> hardship, 114 -> technology, 108 -> have-03, 117 -> strong, 13 -> company, 81 -> sport, 75 -> official, 96 -> beg-01, 102 -> hero),Map(n12 -> name, c14 -> child, h5 -> history, s5 -> strong, m3 -> more, w -> we, b3 -> beg-01, h -> have-03, h8 -> housing, t4 -> thing, i4 -> i, s8 -> star, p5 -> person, h2 -> hero, s2 -> sport, 12 -> 1, b -> book, o9 -> off, o10 -> overdevelop-00, m2 -> memorial, b2 -> build-01, w6 -> write-01, o3 -> only, n11 -> name, c7 -> culture, n7 -> name, o6 -> official, p2 -> person, e2 -> expect-01, n14 -> need-01, h11 -> history, b5 -> bomb-01, n20 -> name, p12 -> person, c10 -> country, l3 -> let-00, t6 -> talent, w3 -> wealthy, s -> state, h4 -> have-condition-91, s4 -> shut-01, c13 -> contemporary, d -> dream-01, m -> museum, t3 -> tolerate-01, 1 -> 1, g2 -> garbage, h7 -> hardship, i3 -> i, s7 -> sister, o5 -> or, g -> game, a -> article, n3 -> name, c3 -> country, p14 -> person, p4 -> poor, t19 -> thing, e4 -> entertain-01, o8 -> or, o2 -> or, d2 -> decline-01, n19 -> nation, n10 -> name, w5 -> we, c12 -> city, h10 -> hook-01, c15 -> company, d5 -> deserve-01, n13 -> name, m4 -> mouth, b4 -> bouquet, t2 -> temple, i2 -> it, p11 -> present-01, w2 -> we, s9 -> shame-01, h9 -> hateful, t5 -> tolerate-01, l2 -> low, i5 -> innovate-01, r -> remark-01, a2 -> and, c -> compatriot, - -> -, s3 -> strong, t8 -> thing, f2 -> filthy, p6 -> price-01, l -> level, d4 -> disgust-01, n8 -> name, h6 -> hardship, f -> forget-01, o -> other, p9 -> possible, s6 -> strong, p3 -> person, o7 -> oppose-01, p13 -> person, n15 -> name, b6 -> brother, c2 -> country, n18 -> name, t7 -> technology, c11 -> country, w4 -> we, n5 -> nation))),[Ljava.lang.String;@1e0b4072,Annotation([Ljava.lang.String;@791f145a,[Ljava.lang.String;@38cee291,[Ljava.lang.String;@4b45a2f5),Annotation([Ljava.lang.String;@f09733f,[Ljava.lang.String;@e350b40,[Ledu.cmu.lti.nlp.amr.Dependency;@41a0aa7d),Annotation([Ljava.lang.String;@2794eab6,[Ljava.lang.String;@6340e5f0,[Ljava.lang.String;@45099dd3),Annotation([Ljava.lang.String;@13e344d,[Ljava.lang.String;@1ffaf86,[Ledu.cmu.lti.nlp.amr.Entity;@6574a52c))
AMR:
(1 / 1, op, f / forget-01)
(a / article, mod, o / other)
(a2 / and, op, b6 / brother)
(a2 / and, op, p12 / person)
(a2 / and, op, s5 / strong)
(a2 / and, op, s7 / sister)
(b / book, mod, c / compatriot)
(b / book, topic, i4 / i)
(b2 / build-01, ARG0, c3 / country)
(b2 / build-01, ARG1, m / museum)
(b2 / build-01, ARG2, o8 / or)
(b3 / beg-01, ARG0, c3 / country)
(b4 / bouquet, mod, c12 / city)
(b5 / bomb-01, ARG0, p2 / person)
(b5 / bomb-01, ARG1, w2 / we)
(c / compatriot, location, c2 / country)
(c10 / country, name, n10 / name)
(c12 / city, name, n13 / name)
(c15 / company, name, n8 / name)
(c2 / country, name, n18 / name)
(c3 / country, name, n20 / name)
(c7 / culture, mod, c11 / country)
(c7 / culture, poss, p14 / person)
(c7 / culture, quant, 12 / 1)
(d / dream-01, ARG1, t19 / thing)
(d2 / decline-01, ARG0, n5 / nation)
(d2 / decline-01, ARG1, s / state)
(d2 / decline-01, ARG2, o10 / overdevelop-00)
(d4 / disgust-01, ARG0, p5 / person)
(d4 / disgust-01, ARG1, s4 / shut-01)
(d4 / disgust-01, ARG6, c11 / country)
(d5 / deserve-01, ARG1, n11 / name)
(d5 / deserve-01, ARG6, b5 / bomb-01)
(e2 / expect-01, ARG0, c3 / country)
(e2 / expect-01, ARG1, g / game)
(e4 / entertain-01, ARG0, s8 / star)
(e4 / entertain-01, ARG1, l / level)
(f / forget-01, ARG0, w4 / we)
(f / forget-01, ARG1, h6 / hardship)
(g / game, name, n3 / name)
(g2 / garbage, mod, c13 / contemporary)
(h / have-03, ARG0, b / book)
(h / have-03, ARG1, t19 / thing)
(h10 / hook-01, ARG1, c14 / child)
(h10 / hook-01, ARG2, t8 / thing)
(h11 / history, location, h7 / hardship)
(h11 / history, quant, m3 / more)
(h11 / history, time, f / forget-01)
(h2 / hero, mod, n19 / nation)
(h4 / have-condition-91, ARG1, c15 / company)
(h4 / have-condition-91, ARG6, - / -)
(h5 / history, op, w4 / we)
(h5 / history, poss, c3 / country)
(i5 / innovate-01, ARG0, p13 / person)
(i5 / innovate-01, ARG1, t6 / talent)
(i5 / innovate-01, ARG6, t7 / technology)
(l / level, mod, l2 / low)
(l3 / let-00, ARG0, p13 / person)
(l3 / let-00, ARG1, c14 / child)
(l3 / let-00, ARG6, o9 / off)
(m / museum, domain, t5 / tolerate-01)
(m / museum, mod, m2 / memorial)
(m4 / mouth, mod, f2 / filthy)
(n10 / name, op, "US")
(n11 / name, op, "Japan")
(n12 / name, op, "Ban")
(n12 / name, op, "Ki-Moon")
(n13 / name, op, "Hiroshima")
(n14 / need-01, ARG0, w / we)
(n14 / need-01, ARG1, a2 / and)
(n14 / need-01, ARG6, l2 / low)
(n15 / name, op, "Li")
(n15 / name, op, "Yinhe")
(n18 / name, op, "Taiwan")
(n20 / name, op, "China")
(n3 / name, op, "Olympics")
(n5 / nation, mod, o3 / only)
(n5 / nation, quant, 1 / 1)
(n7 / name, op, "Ren")
(n7 / name, op, "Zhiqiang")
(n8 / name, op, "Google")
(o10 / overdevelop-00, ARG0, o6 / official)
(o10 / overdevelop-00, ARG1, s2 / sport)
(o2 / or, op, t6 / talent)
(o5 / or, op, c11 / country)
(o5 / or, op, o6 / official)
(o5 / or, op, p3 / person)
(o7 / oppose-01, ARG0, p12 / person)
(o7 / oppose-01, ARG1, p2 / person)
(o8 / or, mod, o / other)
(o8 / or, op, h / have-03)
(o8 / or, op, t2 / temple)
(p11 / present-01, ARG0, p12 / person)
(p11 / present-01, ARG1, b4 / bouquet)
(p12 / person, name, n12 / name)
(p13 / person, name, n15 / name)
(p14 / person, domain, i3 / i)
(p2 / person, mod, s3 / strong)
(p3 / person, mod, p4 / poor)
(p5 / person, name, n7 / name)
(p6 / price-01, ARG0, c15 / company)
(p6 / price-01, ARG1, h9 / hateful)
(p6 / price-01, ARG6, h8 / housing)
(p9 / possible, domain, d2 / decline-01)
(r / remark-01, ARG0, p3 / person)
(r / remark-01, ARG1, t4 / thing)
(s4 / shut-01, ARG0, s6 / strong)
(s4 / shut-01, ARG1, m4 / mouth)
(s4 / shut-01, ARG6, h9 / hateful)
(s9 / shame-01, ARG0, p13 / person)
(s9 / shame-01, ARG1, g2 / garbage)
(t2 / temple, poss, h2 / hero)
(t3 / tolerate-01, ARG0, w2 / we)
(t3 / tolerate-01, ARG1, c10 / country)
(t3 / tolerate-01, ARG6, t4 / thing)
(t5 / tolerate-01, ARG0, w5 / we)
(t5 / tolerate-01, ARG1, i2 / it)
(t7 / technology, mod, l / level)
(w3 / wealthy, mod, o5 / or)
(w6 / write-01, ARG1, g2 / garbage)

WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.1
WARNING: makeIds can't find span Id: 0.1.3.0.1.0
WARNING: makeIds can't find span Id: 0.1.3.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.9.0
WARNING: makeIds can't find span Id: 0.1.9.0.0
WARNING: makeIds can't find span Id: 0.1.9.0.0.1
WARNING: makeIds can't find span Id: 0.1.9.0.0.0
WARNING: makeIds can't find span Id: 0.1.11.1
WARNING: makeIds can't find span Id: 0.1.11.1.0
WARNING: makeIds can't find span Id: 0.1.11.1.0.0
WARNING: makeIds can't find span Id: 0.1.12.1
WARNING: makeIds can't find span Id: 0.1.12.1.0
WARNING: makeIds can't find span Id: 0.1.12.1.0.0
WARNING: makeIds can't find span Id: 0.1.13.0.0
WARNING: makeIds can't find span Id: 0.1.13.0.0.0
WARNING: makeIds can't find span Id: 0.1.13.1.0
WARNING: makeIds can't find span Id: 0.1.13.1.0.0
WARNING: makeIds can't find span Id: 0.1.13.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.13.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.13.1.2
WARNING: makeIds can't find span Id: 0.1.13.1.2.0
WARNING: makeIds can't find span Id: 0.1.13.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.16.2
WARNING: makeIds can't find span Id: 0.1.16.2.0
WARNING: makeIds can't find span Id: 0.1.16.2.0.1
WARNING: makeIds can't find span Id: 0.1.16.2.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.16
WARNING: makeIds can't find span Id: 0.1.16.4
WARNING: makeIds can't find span Id: 0.1.16.4.0
WARNING: makeIds can't find span Id: 0.1.16.4.0.0
WARNING: makeIds can't find span Id: 0.1.16.3
WARNING: makeIds can't find span Id: 0.1.16.2.1
WARNING: makeIds can't find span Id: 0.1.16.2.1.1
WARNING: makeIds can't find span Id: 0.1.16.2.1.0
WARNING: makeIds can't find span Id: 0.1.15
WARNING: makeIds can't find span Id: 0.1.15.2
WARNING: makeIds can't find span Id: 0.1.15.2.1
WARNING: makeIds can't find span Id: 0.1.15.2.0
WARNING: makeIds can't find span Id: 0.1.15.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.15.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.15.1
WARNING: makeIds can't find span Id: 0.1.14
WARNING: makeIds can't find span Id: 0.1.14.1.0
WARNING: makeIds can't find span Id: 0.1.14.1.1
WARNING: makeIds can't find span Id: 0.1.14.1.2
WARNING: makeIds can't find span Id: 0.1.13
WARNING: makeIds can't find span Id: 0.1.13.1
WARNING: makeIds can't find span Id: 0.1.13.1.1
WARNING: makeIds can't find span Id: 0.1.13.1.0.1
WARNING: makeIds can't find span Id: 0.1.13.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.13.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.13.0
WARNING: makeIds can't find span Id: 0.1.12
WARNING: makeIds can't find span Id: 0.1.12.0
WARNING: makeIds can't find span Id: 0.1.11.0.1
WARNING: makeIds can't find span Id: 0.1.11.0.1.0
WARNING: makeIds can't find span Id: 0.1.10.0.0
WARNING: makeIds can't find span Id: 0.1.10.0.0.0
WARNING: makeIds can't find span Id: 0.1.10.0.1
WARNING: makeIds can't find span Id: 0.1.10.1.0.0
WARNING: makeIds can't find span Id: 0.1.9
WARNING: makeIds can't find span Id: 0.1.9.1
WARNING: makeIds can't find span Id: 0.1.9.1.0
WARNING: makeIds can't find span Id: 0.1.9.0.1
WARNING: makeIds can't find span Id: 0.1.8
WARNING: makeIds can't find span Id: 0.1.8.2.0
WARNING: makeIds can't find span Id: 0.1.8.2.1
WARNING: makeIds can't find span Id: 0.1.8.2.1.0
WARNING: makeIds can't find span Id: 0.1.8.1.0.0
WARNING: makeIds can't find span Id: 0.1.7.0
WARNING: makeIds can't find span Id: 0.1.7.0.0
WARNING: makeIds can't find span Id: 0.1.7.1.0
WARNING: makeIds can't find span Id: 0.1.6.0
WARNING: makeIds can't find span Id: 0.1.6.0.0
WARNING: makeIds can't find span Id: 0.1.6.1
WARNING: makeIds can't find span Id: 0.1.6.1.0
WARNING: makeIds can't find span Id: 0.1.6.2
WARNING: makeIds can't find span Id: 0.1.5
WARNING: makeIds can't find span Id: 0.1.5.0
WARNING: makeIds can't find span Id: 0.1.4.0
WARNING: makeIds can't find span Id: 0.1.4.0.1
WARNING: makeIds can't find span Id: 0.1.4.0.0
WARNING: makeIds can't find span Id: 0.1.4.1
WARNING: makeIds can't find span Id: 0.1.4.1.1
WARNING: makeIds can't find span Id: 0.1.4.1.1.0
WARNING: makeIds can't find span Id: 0.1.4.1.0
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.3.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.16.2.2
WARNING: makeIds can't find span Id: 0.1.15.2.1.0
WARNING: makeIds can't find span Id: 0.1.15.2.1.0.0
WARNING: makeIds can't find span Id: 0.1.15.2.0.0
WARNING: makeIds can't find span Id: 0.1.8.1.1
WARNING: makeIds can't find span Id: 0.1.8.1.1.0
WARNING: makeIds can't find span Id: 0.1.7.1
WARNING: makeIds can't find span Id: 0.1.4
WARNING: makeIds can't find span Id: 0.1.1.0.1.0
Decoded in 44,440,764 microseconds
Sentence: Why don't we fight with little Japan?

Oracle Span 1:  fight => fight-01
Oracle Span 2:  Japan => (country :name (name :op "Japan"))
Oracle Span 3:  little => little
Oracle Span 4:  we => we
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 4-5:  fight => fight-01
Span 7-8:  Japan => (country :name (name :op "Japan"))
Span 6-7:  little => little
Span 3-4:  we => we

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  fight => fight-01
Oracle Span 7-8:  Japan => (country :name (name :op "Japan"))
Oracle Span 6-7:  little => little
Oracle Span 3-4:  we => we

Dependencies:
1	Why	_	WRB	WRB	_	5	advmod	_	_
2	do	_	VBP	VBP	_	5	aux	_	_
3	n't	_	RB	RB	_	5	neg	_	_
4	we	_	PRP	PRP	_	5	nsubj	_	_
5	fight	_	VB	VB	_	0	root	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	little	_	JJ	JJ	_	8	amod	_	_
8	Japan	_	NNP	NNP	_	6	pobj	_	_
9	?	_	.	.	_	5	punct	_	_

Oracle:
(c / country, mod, l / little)
(c / country, name, n / name)
(f / fight-01, ARG0, w / we)
(f / fight-01, ARG1, c / country)
(n / name, op, "Japan")

Input(Some(Graph((cause-01 :ARG0 amr-unknown :ARG1 (fight-01 :ARG1 (country :mod little :name (name :op "Japan")) :ARG0 we :polarity -)),ArrayBuffer(Span(7,8,List(0, 1, 2),Japan,(country :name (name :op "Japan")),false), Span(4,5,List(3),fight,fight-01,false), Span(6,7,List(4),little,little,false), Span(3,4,List(5),we,we,false)),Map(2 -> "Japan", 5 -> we, 1 -> name, 4 -> little, 0 -> country, 3 -> fight-01),Map(w -> we, n -> name, l -> little, c -> country, f -> fight-01))),[Ljava.lang.String;@6c1a5b54,Annotation([Ljava.lang.String;@1c7696c6,[Ljava.lang.String;@60099951,[Ljava.lang.String;@20140db9),Annotation([Ljava.lang.String;@1e6a3214,[Ljava.lang.String;@368247b9,[Ledu.cmu.lti.nlp.amr.Dependency;@1a6d8329),Annotation([Ljava.lang.String;@1a942c18,[Ljava.lang.String;@55a147cc,[Ljava.lang.String;@71ba6d4e),Annotation([Ljava.lang.String;@738dc9b,[Ljava.lang.String;@3c77d488,[Ledu.cmu.lti.nlp.amr.Entity;@63376bed))
AMR:
(c / country, degree, l / little)
(c / country, name, n / name)
(f / fight-01, ARG0, w / we)
(f / fight-01, ARG1, c / country)
(n / name, op, "Japan")

WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 20,200 microseconds
Sentence: What do Chinese still tolerate ...

Oracle Span 1:  Chinese => (person :mod (country :name (name :op "China")))
Oracle Span 2:  still => still
Oracle Span 3:  tolerate => tolerate-01
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 2-3:  Chinese => (person :mod (country :name (name :op "China")))
Span 3-4:  still => still
Span 4-5:  tolerate => tolerate-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  Chinese => (person :mod (country :name (name :op "China")))
Oracle Span 3-4:  still => still
Oracle Span 4-5:  tolerate => tolerate-01

Dependencies:
1	What	_	WP	WP	_	2	nsubj	_	_
2	do	_	VBP	VBP	_	0	root	_	_
3	Chinese	_	NNP	NNP	_	5	nsubj	_	_
4	still	_	RB	RB	_	5	advmod	_	_
5	tolerate	_	VB	VB	_	2	ccomp	_	_
6	...	_	:	:	_	2	punct	_	_

Oracle:
(c / country, name, n / name)
(n / name, op, "China")
(p / person, mod, c / country)
(t / tolerate-01, ARG0, p / person)
(t / tolerate-01, mod, s / still)

Input(Some(Graph((tolerate-01 :mod still :ARG1 amr-unknown :ARG0 (person :mod (country :name (name :op "China")))),ArrayBuffer(Span(2,3,List(0, 1, 2, 3),Chinese,(person :mod (country :name (name :op "China"))),false), Span(4,5,List(4),tolerate,tolerate-01,false), Span(3,4,List(5),still,still,false)),Map(2 -> name, 5 -> still, 1 -> country, 4 -> tolerate-01, 0 -> person, 3 -> "China"),Map(n -> name, t -> tolerate-01, s -> still, p -> person, c -> country))),[Ljava.lang.String;@4145bad8,Annotation([Ljava.lang.String;@d86a6f,[Ljava.lang.String;@2892d68,[Ljava.lang.String;@5ab956d7),Annotation([Ljava.lang.String;@3646a422,[Ljava.lang.String;@750e2b97,[Ledu.cmu.lti.nlp.amr.Dependency;@3e27aa33),Annotation([Ljava.lang.String;@2e385cce,[Ljava.lang.String;@2ddc9a9f,[Ljava.lang.String;@298a5e20),Annotation([Ljava.lang.String;@2a7f1f10,[Ljava.lang.String;@46cdf8bd,[Ledu.cmu.lti.nlp.amr.Entity;@f0c8a99))
AMR:
(c / country, name, n / name)
(n / name, op, "China")
(p / person, mod, c / country)
(t / tolerate-01, ARG0, p / person)
(t / tolerate-01, ARG1, s / still)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 22,247 microseconds
Sentence: They are riding even on our head

Oracle Span 1:  even => even
Oracle Span 2:  head => head
Oracle Span 3:  riding => ride-01
Oracle Span 4:  They => they
Spans:
Span 3-4:  even => even
Span 6-7:  head => head
Span 2-3:  riding => ride-01
Span 0-1:  They => they

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  even => even
Oracle Span 6-7:  head => head
Oracle Span 2-3:  riding => ride-01
Oracle Span 0-1:  They => they

Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	are	_	VBP	VBP	_	3	aux	_	_
3	riding	_	VBG	VBG	_	0	root	_	_
4	even	_	RB	RB	_	3	advmod	_	_
5	on	_	IN	IN	_	3	prep	_	_
6	our	_	PRP$	PRP$	_	7	poss	_	_
7	head	_	NN	NN	_	5	pobj	_	_

Oracle:
(r / ride-01, ARG0, t / they)
(r / ride-01, ARG1, h / head)
(r / ride-01, mod, e / even)

Input(Some(Graph((ride-01 :mod even :ARG1 (head :part-of we) :ARG0 they),ArrayBuffer(Span(2,3,List(0),riding,ride-01,false), Span(3,4,List(1),even,even,false), Span(6,7,List(2),head,head,false), Span(0,1,List(3),They,they,false)),Map(2 -> head, 1 -> even, 0 -> ride-01, 3 -> they),Map(e -> even, h -> head, t -> they, r -> ride-01))),[Ljava.lang.String;@740cae06,Annotation([Ljava.lang.String;@26d9b808,[Ljava.lang.String;@f78a47e,[Ljava.lang.String;@644baf4a),Annotation([Ljava.lang.String;@7526515b,[Ljava.lang.String;@1ed4ae0f,[Ledu.cmu.lti.nlp.amr.Dependency;@54c5a2ff),Annotation([Ljava.lang.String;@6d4d66d2,[Ljava.lang.String;@2a265ea9,[Ljava.lang.String;@11392934),Annotation([Ljava.lang.String;@6892b3b6,[Ljava.lang.String;@6e6f2380,[Ledu.cmu.lti.nlp.amr.Entity;@76a4ebf2))
AMR:
(e / even, domain, t / they)
(r / ride-01, ARG0, t / they)
(r / ride-01, ARG1, h / head)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 13,347 microseconds
Sentence: Is this still what Chinese with guts do?

Oracle Span 1:  Chinese => (country :name (name :op "China"))
Oracle Span 2:  do => do-02
Oracle Span 3:  guts => (person :poss-of gut)
Oracle Span 4:  still => still
Oracle Span 5:  this => this
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 4-5:  Chinese => (country :name (name :op "China"))
Span 7-8:  do => do-02
Span 6-7:  guts => (person :poss-of gut)
Span 2-3:  still => still
Span 1-2:  this => this

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Oracle Span 4-5:  Chinese => (country :name (name :op "China"))
Oracle Span 7-8:  do => do-02
Oracle Span 6-7:  guts => (person :poss-of gut)
Oracle Span 2-3:  still => still
Oracle Span 1-2:  this => this

Dependencies:
1	Is	_	VBZ	VBZ	_	3	cop	_	_
2	this	_	DT	DT	_	3	nsubj	_	_
3	still	_	JJ	JJ	_	0	root	_	_
4	what	_	WP	WP	_	8	dobj	_	_
5	Chinese	_	NNP	NNP	_	8	nsubj	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	guts	_	NNS	NNS	_	6	pobj	_	_
8	do	_	VBP	VBP	_	3	rcmod	_	_
9	?	_	.	.	_	3	punct	_	_

Oracle:
(c / country, name, n / name)
(d / do-02, ARG0, p / person)
(d / do-02, ARG1, t / this)
(d / do-02, mod, s / still)
(g / gut, poss, p / person)
(n / name, op, "China")
(p / person, mod, c / country)

Input(Some(Graph((do-02 :mod still :ARG1 this :ARG0 (person :poss-of gut :mod (country :name (name :op "China"))) :mode interrogative),ArrayBuffer(Span(4,5,List(0, 1, 2),Chinese,(country :name (name :op "China")),false), Span(7,8,List(3),do,do-02,false), Span(2,3,List(4),still,still,false), Span(1,2,List(5),this,this,false), Span(6,7,List(6, 7),guts,(person :poss-of gut),false)),Map(2 -> "China", 5 -> this, 7 -> gut, 1 -> name, 4 -> still, 6 -> person, 0 -> country, 3 -> do-02),Map(n -> name, t -> this, s -> still, d -> do-02, g -> gut, p -> person, c -> country))),[Ljava.lang.String;@2e8c1c9b,Annotation([Ljava.lang.String;@53fe15ff,[Ljava.lang.String;@449a4f23,[Ljava.lang.String;@1530c739),Annotation([Ljava.lang.String;@5b1669c0,[Ljava.lang.String;@78e4deb0,[Ledu.cmu.lti.nlp.amr.Dependency;@6e9175d8),Annotation([Ljava.lang.String;@7d0b7e3c,[Ljava.lang.String;@15bb5034,[Ljava.lang.String;@4b741d6d),Annotation([Ljava.lang.String;@2eae8e6e,[Ljava.lang.String;@8f2ef19,[Ledu.cmu.lti.nlp.amr.Entity;@470734c3))
AMR:
(c / country, name, n / name)
(d / do-02, ARG0, c / country)
(d / do-02, ARG1, t / this)
(d / do-02, ARG2, p / person)
(d / do-02, ARG6, s / still)
(g / gut, poss, p / person)
(n / name, op, "China")

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 290,933 microseconds
Sentence: We should tell the whole world, that Chinese can't be bullied at will by others ...

Oracle Span 1:  bullied => bully-01
Oracle Span 2:  Chinese => (country :name (name :op "China"))
Oracle Span 3:  others => other
Oracle Span 4:  should => recommend-01
Oracle Span 5:  tell => tell-01
Oracle Span 6:  We => we
Oracle Span 7:  whole => whole
Oracle Span 8:  will => will-02
Oracle Span 9:  world => world
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 12-13:  bullied => bully-01
Span 8-9:  Chinese => (country :name (name :op "China"))
Span 16-17:  others => other
Span 1-2:  should => recommend-01
Span 2-3:  tell => tell-01
Span 0-1:  We => we
Span 4-5:  whole => whole
Span 14-15:  will => will-02
Span 5-6:  world => world

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 12-13:  bullied => bully-01
Oracle Span 8-9:  Chinese => (country :name (name :op "China"))
Oracle Span 16-17:  others => other
Oracle Span 1-2:  should => recommend-01
Oracle Span 2-3:  tell => tell-01
Oracle Span 0-1:  We => we
Oracle Span 4-5:  whole => whole
Oracle Span 14-15:  will => will-02
Oracle Span 5-6:  world => world

Dependencies:
1	We	_	PRP	PRP	_	3	nsubj	_	_
2	should	_	MD	MD	_	3	aux	_	_
3	tell	_	VB	VB	_	0	root	_	_
4	the	_	DT	DT	_	6	det	_	_
5	whole	_	JJ	JJ	_	6	amod	_	_
6	world	_	NN	NN	_	3	dobj	_	_
7	,	_	,	,	_	3	punct	_	_
8	that	_	IN	IN	_	13	mark	_	_
9	Chinese	_	NNP	NNP	_	13	nsubjpass	_	_
10	ca	_	MD	MD	_	13	aux	_	_
11	n't	_	RB	RB	_	13	neg	_	_
12	be	_	VB	VB	_	13	auxpass	_	_
13	bullied	_	VBN	VBN	_	3	ccomp	_	_
14	at	_	IN	IN	_	13	prep	_	_
15	will	_	NN	NN	_	14	pobj	_	_
16	by	_	IN	IN	_	13	prep	_	_
17	others	_	NNS	NNS	_	16	pobj	_	_
18	...	_	:	:	_	3	punct	_	_

Oracle:
(b / bully-01, ARG0, o / other)
(b / bully-01, ARG1, c / country)
(b / bully-01, manner, w4 / will-02)
(c / country, name, n / name)
(n / name, op, "China")
(r / recommend-01, ARG1, t / tell-01)
(t / tell-01, ARG0, w / we)
(t / tell-01, ARG2, w2 / world)
(w2 / world, mod, w3 / whole)

Input(Some(Graph((recommend-01 :ARG1 (tell-01 :ARG2 (world :mod whole) :ARG1 (possible :polarity - :domain (bully-01 :manner will-02 :ARG1 (country :name (name :op "China")) :ARG0 other)) :ARG0 we)),ArrayBuffer(Span(8,9,List(0, 1, 2),Chinese,(country :name (name :op "China")),false), Span(1,2,List(3),should,recommend-01,false), Span(2,3,List(4),tell,tell-01,false), Span(5,6,List(5),world,world,false), Span(4,5,List(6),whole,whole,false), Span(12,13,List(7),bullied,bully-01,false), Span(14,15,List(8),will,will-02,false), Span(16,17,List(9),others,other,false), Span(0,1,List(10),We,we,false)),Map(2 -> "China", 5 -> world, 8 -> will-02, 7 -> bully-01, 1 -> name, 4 -> tell-01, 6 -> whole, 9 -> other, 0 -> country, 10 -> we, 3 -> recommend-01),Map(w -> we, n -> name, b -> bully-01, t -> tell-01, w3 -> whole, w2 -> world, r -> recommend-01, c -> country, o -> other, w4 -> will-02))),[Ljava.lang.String;@2cf3d63b,Annotation([Ljava.lang.String;@7674f035,[Ljava.lang.String;@69e153c5,[Ljava.lang.String;@173ed316),Annotation([Ljava.lang.String;@25ce9dc4,[Ljava.lang.String;@74ea2410,[Ledu.cmu.lti.nlp.amr.Dependency;@17f62e33),Annotation([Ljava.lang.String;@76b1e9b8,[Ljava.lang.String;@27406a17,[Ljava.lang.String;@2af004b),Annotation([Ljava.lang.String;@248e319b,[Ljava.lang.String;@5d0bf09b,[Ledu.cmu.lti.nlp.amr.Entity;@793f29ff))
AMR:
(b / bully-01, ARG1, c / country)
(b / bully-01, ARG2, w4 / will-02)
(c / country, name, n / name)
(n / name, op, "China")
(r / recommend-01, ARG1, t / tell-01)
(t / tell-01, ARG0, w / we)
(t / tell-01, ARG1, b / bully-01)
(t / tell-01, ARG2, w2 / world)
(w2 / world, mod, w3 / whole)
(w4 / will-02, ARG1, o / other)

WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.2
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 270,224 microseconds
Sentence: It is time to show our strength! China has been calm for too long!

Oracle Span 1:  calm => calm-01
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  long => long
Oracle Span 4:  show => show-01
Oracle Span 5:  strength => strength
Oracle Span 6:  time => time
Oracle Span 7:  too => too
NER Entity: (country :name (name :op "China"))
Spans:
Span 11-12:  calm => calm-01
Span 8-9:  China => (country :name (name :op "China"))
Span 14-15:  long => long
Span 4-5:  show => show-01
Span 6-7:  strength => strength
Span 2-3:  time => time
Span 13-14:  too => too

 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of been in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of calm in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 15
Langrangian relaxation converged after 26 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 8
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of been in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of calm in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of long in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 15
Oracle Span 11-12:  calm => calm-01
Oracle Span 8-9:  China => (country :name (name :op "China"))
Oracle Span 14-15:  long => long
Oracle Span 4-5:  show => show-01
Oracle Span 6-7:  strength => strength
Oracle Span 2-3:  time => time
Oracle Span 13-14:  too => too

Dependencies:
1	It	_	PRP	PRP	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	cop	_	_
3	time	_	NN	NN	_	0	root	_	_
4	to	_	TO	TO	_	5	aux	_	_
5	show	_	VB	VB	_	3	vmod	_	_
6	our	_	PRP$	PRP$	_	7	poss	_	_
7	strength	_	NN	NN	_	5	dobj	_	_
8	!	_	.	.	_	3	punct	_	_
1	China	_	NNP	NNP	_	4	nsubj	_	_
2	has	_	VBZ	VBZ	_	4	aux	_	_
3	been	_	VBN	VBN	_	4	cop	_	_
4	calm	_	JJ	JJ	_	0	root	_	_
5	for	_	IN	IN	_	4	prep	_	_
6	too	_	RB	RB	_	7	advmod	_	_
7	long	_	JJ	JJ	_	5	pobj	_	_
8	!	_	.	.	_	4	punct	_	_

Oracle:
(c / calm-01, ARG1, c2 / country)
(c / calm-01, duration, l / long)
(c2 / country, name, n / name)
(l / long, degree, t / too)
(n / name, op, "China")
(s / show-01, ARG1, s2 / strength)
(s / show-01, time, t2 / time)

Input(Some(Graph((multi-sentence :snt1 (time :time-of (show-01 :ARG1 (strength :poss we) :ARG0 we)) :snt2 (calm-01 :duration (long :degree too) :ARG1 (country :name (name :op "China")))),ArrayBuffer(Span(8,9,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(2,3,List(3),time,time,false), Span(4,5,List(4),show,show-01,false), Span(6,7,List(5),strength,strength,false), Span(11,12,List(6),calm,calm-01,false), Span(14,15,List(7),long,long,false), Span(13,14,List(8),too,too,false)),Map(2 -> "China", 5 -> strength, 8 -> too, 7 -> long, 1 -> name, 4 -> show-01, 6 -> calm-01, 0 -> country, 3 -> time),Map(n -> name, t -> too, s2 -> strength, s -> show-01, t2 -> time, l -> long, c -> calm-01, c2 -> country))),[Ljava.lang.String;@3e8c3cb,Annotation([Ljava.lang.String;@563f38c4,[Ljava.lang.String;@543295b0,[Ljava.lang.String;@54422e18),Annotation([Ljava.lang.String;@117159c0,[Ljava.lang.String;@3e27ba32,[Ledu.cmu.lti.nlp.amr.Dependency;@7ef82753),Annotation([Ljava.lang.String;@3b0fe47a,[Ljava.lang.String;@202b0582,[Ljava.lang.String;@235ecd9f),Annotation([Ljava.lang.String;@1ca3b418,[Ljava.lang.String;@58cbafc2,[Ledu.cmu.lti.nlp.amr.Entity;@2034b64c))
AMR:
(c / calm-01, ARG0, c2 / country)
(c / calm-01, ARG1, s / show-01)
(c / calm-01, ARG6, l / long)
(c2 / country, name, n / name)
(n / name, op, "China")
(s / show-01, ARG0, t2 / time)
(s / show-01, ARG1, s2 / strength)
(t / too, calendar, l / long)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
Decoded in 169,714 microseconds
Sentence: Currently our citizens' lives are all too carefree! The officials are too extravagant.

Oracle Span 1:  all => all
Oracle Span 2:  carefree => carefree
Oracle Span 3:  citizens => citizen
Oracle Span 4:  Currently => current
Oracle Span 5:  extravagant => extravagant
Oracle Span 6:  lives => life
Oracle Span 7:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 8:  too => too
Oracle Span 9:  too => too
Spans:
Span 6-7:  all => all
Span 8-9:  carefree => carefree
Span 2-3:  citizens => citizen
Span 0-1:  Currently => current
Span 14-15:  extravagant => extravagant
Span 4-5:  lives => life
Span 11-12:  officials => (have-org-role-91 :ARG2 official)
Span 7-8:  too => too
Span 13-14:  too => too

 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of extravagant in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 15
Langrangian relaxation converged after 6 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of The in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of extravagant in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 15
Oracle Span 6-7:  all => all
Oracle Span 8-9:  carefree => carefree
Oracle Span 2-3:  citizens => citizen
Oracle Span 0-1:  Currently => current
Oracle Span 14-15:  extravagant => extravagant
Oracle Span 4-5:  lives => life
Oracle Span 11-12:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 7-8:  too => too
Oracle Span 13-14:  too => too

Dependencies:
1	Currently	_	RB	RB	_	9	advmod	_	_
2	our	_	PRP$	PRP$	_	3	poss	_	_
3	citizens	_	NNS	NNS	_	5	poss	_	_
4	'	_	POS	POS	_	3	possessive	_	_
5	lives	_	NNS	NNS	_	9	nsubj	_	_
6	are	_	VBP	VBP	_	9	cop	_	_
7	all	_	RB	RB	_	9	advmod	_	_
8	too	_	RB	RB	_	9	advmod	_	_
9	carefree	_	JJ	JJ	_	0	root	_	_
10	!	_	.	.	_	9	punct	_	_
1	The	_	DT	DT	_	2	det	_	_
2	officials	_	NNS	NNS	_	5	nsubj	_	_
3	are	_	VBP	VBP	_	5	cop	_	_
4	too	_	RB	RB	_	5	advmod	_	_
5	extravagant	_	JJ	JJ	_	0	root	_	_
6	.	_	.	.	_	5	punct	_	_

Oracle:
(c / carefree, degree, t / too)
(c / carefree, domain, l / life)
(c / carefree, time, c3 / current)
(e / extravagant, degree, t2 / too)
(h / have-org-role-91, ARG2, o2 / official)
(l / life, poss, c2 / citizen)
(l / life, quant, a / all)

Input(Some(Graph((multi-sentence :snt1 (carefree :degree too :time current :domain (life :quant all :poss (citizen :poss we))) :snt2 (extravagant :domain (person :ARG0-of (have-org-role-91 :ARG2 official)) :degree too)),ArrayBuffer(Span(8,9,List(0),carefree,carefree,false), Span(7,8,List(1),too,too,false), Span(4,5,List(2),lives,life,false), Span(6,7,List(3),all,all,false), Span(2,3,List(4),citizens,citizen,false), Span(14,15,List(5),extravagant,extravagant,false), Span(11,12,List(6, 7),officials,(have-org-role-91 :ARG2 official),false), Span(13,14,List(8),too,too,false), Span(0,1,List(9),Currently,current,false)),Map(2 -> life, 5 -> extravagant, 8 -> too, 7 -> official, 1 -> too, 4 -> citizen, 6 -> have-org-role-91, 9 -> current, 0 -> carefree, 3 -> all),Map(e -> extravagant, h -> have-org-role-91, t -> too, c3 -> current, a -> all, o2 -> official, t2 -> too, c -> carefree, l -> life, c2 -> citizen))),[Ljava.lang.String;@75d3a5e0,Annotation([Ljava.lang.String;@74d1dc36,[Ljava.lang.String;@7161d8d1,[Ljava.lang.String;@74e28667),Annotation([Ljava.lang.String;@1cf6d1be,[Ljava.lang.String;@663c9e7a,[Ledu.cmu.lti.nlp.amr.Dependency;@19e4653c),Annotation([Ljava.lang.String;@795509d9,[Ljava.lang.String;@53045c6c,[Ljava.lang.String;@5149d738),Annotation([Ljava.lang.String;@6bbe85a8,[Ljava.lang.String;@3a7442c7,[Ledu.cmu.lti.nlp.amr.Entity;@4be29ed9))
AMR:
(a / all, op, t2 / too)
(c / carefree, degree, t / too)
(c / carefree, domain, l / life)
(c / carefree, mod, a / all)
(h / have-org-role-91, ARG0, l / life)
(h / have-org-role-91, ARG1, c3 / current)
(h / have-org-role-91, ARG2, o2 / official)
(l / life, poss, c2 / citizen)
(t / too, op, e / extravagant)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 95,271 microseconds
Sentence: Now we already have no cohesion! China needs to start a war! A harsh slap in the face of the countries which follow the United States' rear!

Oracle Span 1:  already => already
Oracle Span 2:  China => (name :op "China")
Oracle Span 3:  cohesion => cohesion
Oracle Span 4:  countries => country
Oracle Span 5:  face => face
Oracle Span 6:  follow => follow-02
Oracle Span 7:  harsh => harsh
Oracle Span 8:  have => have-03
Oracle Span 9:  needs => need-01
Oracle Span 10:  no => -
Oracle Span 11:  Now => now
Oracle Span 12:  rear => rear
Oracle Span 13:  slap => slap-01
Oracle Span 14:  start => start-01
Oracle Span 15:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 16:  war => war
Oracle Span 17:  we => we
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "United" :op "States" :op "'"))
Spans:
Span 2-3:  already => already
Span 7-8:  China => (name :op "China")
Span 5-6:  cohesion => cohesion
Span 22-23:  countries => country
Span 19-20:  face => face
Span 24-25:  follow => follow-02
Span 15-16:  harsh => harsh
Span 3-4:  have => have-03
Span 8-9:  needs => need-01
Span 4-5:  no => -
Span 0-1:  Now => now
Span 29-30:  rear => rear
Span 16-17:  slap => slap-01
Span 10-11:  start => start-01
Span 26-28:  United States => (country :name (name :op "States" :op "United"))
Span 12-13:  war => war
Span 1-2:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of countries in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of which in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of follow in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of United in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of States in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of rear in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 30
Langrangian relaxation converged after 29 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of countries in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of which in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of follow in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of United in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of States in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of rear in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 30
Oracle Span 2-3:  already => already
Oracle Span 7-8:  China => (name :op "China")
Oracle Span 5-6:  cohesion => cohesion
Oracle Span 22-23:  countries => country
Oracle Span 19-20:  face => face
Oracle Span 24-25:  follow => follow-02
Oracle Span 15-16:  harsh => harsh
Oracle Span 3-4:  have => have-03
Oracle Span 8-9:  needs => need-01
Oracle Span 4-5:  no => -
Oracle Span 0-1:  Now => now
Oracle Span 29-30:  rear => rear
Oracle Span 16-17:  slap => slap-01
Oracle Span 10-11:  start => start-01
Oracle Span 26-28:  United States => (country :name (name :op "States" :op "United"))
Oracle Span 12-13:  war => war
Oracle Span 1-2:  we => we

Dependencies:
1	Now	_	RB	RB	_	4	advmod	_	_
2	we	_	PRP	PRP	_	4	nsubj	_	_
3	already	_	RB	RB	_	4	advmod	_	_
4	have	_	VBP	VBP	_	0	root	_	_
5	no	_	DT	DT	_	6	neg	_	_
6	cohesion	_	NN	NN	_	4	dobj	_	_
7	!	_	.	.	_	4	punct	_	_
1	China	_	NNP	NNP	_	2	nsubj	_	_
2	needs	_	VBZ	VBZ	_	0	root	_	_
3	to	_	TO	TO	_	4	aux	_	_
4	start	_	VB	VB	_	2	xcomp	_	_
5	a	_	DT	DT	_	6	det	_	_
6	war	_	NN	NN	_	4	dobj	_	_
7	!	_	.	.	_	2	punct	_	_
1	A	_	DT	DT	_	3	det	_	_
2	harsh	_	JJ	JJ	_	3	amod	_	_
3	slap	_	NN	NN	_	0	root	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	face	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	countries	_	NNS	NNS	_	7	pobj	_	_
10	which	_	WDT	WDT	_	11	nsubj	_	_
11	follow	_	VBP	VBP	_	9	rcmod	_	_
12	the	_	DT	DT	_	16	det	_	_
13	United	_	NNP	NNP	_	16	nn	_	_
14	States	_	NNPS	NNPS	_	16	nn	_	_
15	'	_	''	''	_	16	punct	_	_
16	rear	_	NN	NN	_	11	dobj	_	_
17	!	_	.	.	_	3	punct	_	_

Oracle:
(c2 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(f2 / follow-02, ARG1, r / rear)
(h / have-03, ARG0, w / we)
(h / have-03, ARG1, c / cohesion)
(h / have-03, polarity, - / -)
(h / have-03, time, a / already)
(h / have-03, time, n / now)
(n2 / need-01, ARG0, c2 / country)
(n2 / need-01, ARG1, s / start-01)
(n3 / name, op, "China")
(n4 / name, op, "States")
(n4 / name, op, "United")
(r / rear, poss, c4 / country)
(s / start-01, ARG0, c2 / country)
(s / start-01, ARG1, w2 / war)
(s2 / slap-01, ARG1, f / face)
(s2 / slap-01, manner, h2 / harsh)

Input(Some(Graph((multi-sentence :snt1 (have-03 :time already :time now :ARG1 cohesion :ARG0 we :polarity -) :snt2 (need-01 :ARG1 (start-01 :ARG1 war :ARG0 country) :ARG0 (country :name (name :op "China"))) :snt3 (slap-01 :manner harsh :ARG1 (face :part-of (country :ARG0-of (follow-02 :ARG1 (rear :poss (country :name (name :op "States" :op "United")))))))),ArrayBuffer(Span(7,8,List(0, 1),China,(name :op "China"),false), Span(26,28,List(2, 3, 4, 5),United States,(country :name (name :op "States" :op "United")),false), Span(4,5,List(6),no,-,false), Span(3,4,List(7),have,have-03,false), Span(2,3,List(8),already,already,false), Span(0,1,List(9),Now,now,false), Span(5,6,List(10),cohesion,cohesion,false), Span(1,2,List(11),we,we,false), Span(8,9,List(12),needs,need-01,false), Span(10,11,List(13),start,start-01,false), Span(12,13,List(14),war,war,false), Span(22,23,List(15),countries,country,false), Span(16,17,List(16),slap,slap-01,false), Span(15,16,List(17),harsh,harsh,false), Span(19,20,List(18),face,face,false), Span(24,25,List(19),follow,follow-02,false), Span(29,30,List(20),rear,rear,false)),Map(2 -> country, 5 -> "United", 12 -> need-01, 15 -> country, 8 -> already, 18 -> face, 7 -> have-03, 17 -> harsh, 1 -> "China", 4 -> "States", 11 -> we, 14 -> war, 20 -> rear, 6 -> -, 9 -> now, 0 -> name, 16 -> slap-01, 19 -> follow-02, 10 -> cohesion, 3 -> name, 13 -> start-01),Map(w -> we, n -> now, h -> have-03, h2 -> harsh, s2 -> slap-01, n4 -> name, c4 -> country, s -> start-01, a -> already, n3 -> name, w2 -> war, r -> rear, - -> -, c -> cohesion, f2 -> follow-02, f -> face, c2 -> country, n2 -> need-01))),[Ljava.lang.String;@548d708a,Annotation([Ljava.lang.String;@4b013c76,[Ljava.lang.String;@53fb3dab,[Ljava.lang.String;@cb0755b),Annotation([Ljava.lang.String;@33065d67,[Ljava.lang.String;@712625fd,[Ledu.cmu.lti.nlp.amr.Dependency;@7bba5817),Annotation([Ljava.lang.String;@742ff096,[Ljava.lang.String;@75437611,[Ljava.lang.String;@350aac89),Annotation([Ljava.lang.String;@1c5920df,[Ljava.lang.String;@17f9d882,[Ledu.cmu.lti.nlp.amr.Entity;@79e4c792))
AMR:
(c4 / country, name, n4 / name)
(f / face, poss, w / we)
(f2 / follow-02, ARG0, c2 / country)
(f2 / follow-02, ARG1, c / cohesion)
(h / have-03, ARG0, w / we)
(h / have-03, ARG1, c / cohesion)
(h / have-03, ARG6, - / -)
(h / have-03, time, a / already)
(n / now, calendar, w / we)
(n2 / need-01, ARG0, n3 / name)
(n2 / need-01, ARG1, s / start-01)
(n2 / need-01, ARG6, h / have-03)
(n3 / name, op, "China")
(n4 / name, op, "States")
(n4 / name, op, "United")
(r / rear, poss, w / we)
(s / start-01, ARG1, w2 / war)
(s / start-01, ARG6, h2 / harsh)
(s2 / slap-01, ARG0, c4 / country)
(s2 / slap-01, ARG1, f / face)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.4
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.0.0
Decoded in 754,076 microseconds
Sentence: Let them know that the US is not a panacea! If we win, it may increase China's influence! and improve the cohesion of the citizenry! If we lose, we can clean out those incompetent bureaucrats, and make those trash get out! Let China have new blood and get updated. , Get up, China!

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  blood => blood
Oracle Span 5:  bureaucrats => bureaucrat
Oracle Span 6:  can => possible
Oracle Span 7:  China => (country :name (name :op "China"))
Oracle Span 8:  China => (country :name (name :op "China"))
Oracle Span 9:  China => (country :name (name :op "China"))
Oracle Span 10:  citizenry => citizen
Oracle Span 11:  clean => clean-03
Oracle Span 12:  cohesion => cohesion
Oracle Span 13:  get => get-05
Oracle Span 14:  get => get-05
Oracle Span 15:  have => have-03
Oracle Span 16:  improve => improve-01
Oracle Span 17:  incompetent => competent-41
Oracle Span 18:  increase => increase-01
Oracle Span 19:  influence => influence-01
Oracle Span 20:  know => know-01
Oracle Span 21:  Let => let-01
Oracle Span 22:  Let => let-01
Oracle Span 23:  lose => lose-03
Oracle Span 24:  make => make-02
Oracle Span 25:  may => possible
Oracle Span 26:  new => new
Oracle Span 27:  out => out
Oracle Span 28:  panacea => panacea
Oracle Span 29:  trash => trash
Oracle Span 30:  up => up
Oracle Span 31:  updated => update-01
Oracle Span 32:  US => (country :name (name :op "US"))
Oracle Span 33:  we => we
Oracle Span 34:  we => we
Oracle Span 35:  win => win-01
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 22-23:  and => and
Span 42-43:  and => and
Span 54-55:  and => and
Span 53-54:  blood => blood
Span 40-41:  bureaucrats => bureaucrat
Span 35-36:  can => possible
Span 18-19:  China => (country :name (name :op "China"))
Span 50-51:  China => (country :name (name :op "China"))
Span 62-63:  China => (country :name (name :op "China"))
Span 28-29:  citizenry => citizen
Span 36-37:  clean => clean-03
Span 25-26:  cohesion => cohesion
Span 46-47:  get => get-05
Span 55-56:  get => get-05
Span 51-52:  have => have-03
Span 23-24:  improve => improve-01
Span 39-40:  incompetent => competent-41
Span 17-18:  increase => increase-01
Span 20-21:  influence => influence-01
Span 2-3:  know => know-01
Span 0-1:  Let => let-01
Span 49-50:  Let => let-01
Span 32-33:  lose => lose-03
Span 43-44:  make => make-02
Span 16-17:  may => possible
Span 52-53:  new => new
Span 37-38:  out => out
Span 9-10:  panacea => panacea
Span 45-46:  trash => trash
Span 60-61:  up => up
Span 56-57:  updated => update-01
Span 5-6:  US => (country :name (name :op "US"))
Span 12-13:  we => we
Span 31-32:  we => we
Span 13-14:  win => win-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of improve in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of cohesion in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizenry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of If in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of clean in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of incompetent in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of bureaucrats in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of trash in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of Let in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of new in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of blood in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of updated in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of Get in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of up in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Langrangian relaxation converged after 45 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of influence in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of improve in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of cohesion in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of citizenry in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of If in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of clean in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of incompetent in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of bureaucrats in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of trash in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of out in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of Let in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 50
 *** WARNING: The dependency tree seems broken.  I can't find the head of have in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of new in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of blood in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of get in position 55
 *** WARNING: The dependency tree seems broken.  I can't find the head of updated in position 56
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 57
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 58
 *** WARNING: The dependency tree seems broken.  I can't find the head of Get in position 59
 *** WARNING: The dependency tree seems broken.  I can't find the head of up in position 60
 *** WARNING: The dependency tree seems broken.  I can't find the head of , in position 61
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 62
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 63
Oracle Span 22-23:  and => and
Oracle Span 42-43:  and => and
Oracle Span 54-55:  and => and
Oracle Span 53-54:  blood => blood
Oracle Span 40-41:  bureaucrats => bureaucrat
Oracle Span 35-36:  can => possible
Oracle Span 18-19:  China => (country :name (name :op "China"))
Oracle Span 50-51:  China => (country :name (name :op "China"))
Oracle Span 62-63:  China => (country :name (name :op "China"))
Oracle Span 28-29:  citizenry => citizen
Oracle Span 36-37:  clean => clean-03
Oracle Span 25-26:  cohesion => cohesion
Oracle Span 46-47:  get => get-05
Oracle Span 55-56:  get => get-05
Oracle Span 51-52:  have => have-03
Oracle Span 23-24:  improve => improve-01
Oracle Span 39-40:  incompetent => competent-41
Oracle Span 17-18:  increase => increase-01
Oracle Span 20-21:  influence => influence-01
Oracle Span 2-3:  know => know-01
Oracle Span 0-1:  Let => let-01
Oracle Span 49-50:  Let => let-01
Oracle Span 32-33:  lose => lose-03
Oracle Span 43-44:  make => make-02
Oracle Span 16-17:  may => possible
Oracle Span 52-53:  new => new
Oracle Span 37-38:  out => out
Oracle Span 9-10:  panacea => panacea
Oracle Span 45-46:  trash => trash
Oracle Span 60-61:  up => up
Oracle Span 56-57:  updated => update-01
Oracle Span 5-6:  US => (country :name (name :op "US"))
Oracle Span 12-13:  we => we
Oracle Span 31-32:  we => we
Oracle Span 13-14:  win => win-01

Dependencies:
1	Let	_	VB	VB	_	0	root	_	_
2	them	_	PRP	PRP	_	3	nsubj	_	_
3	know	_	VBP	VBP	_	1	ccomp	_	_
4	that	_	IN	IN	_	10	mark	_	_
5	the	_	DT	DT	_	6	det	_	_
6	US	_	NNP	NNP	_	10	nsubj	_	_
7	is	_	VBZ	VBZ	_	10	cop	_	_
8	not	_	RB	RB	_	10	neg	_	_
9	a	_	DT	DT	_	10	det	_	_
10	panacea	_	NN	NN	_	3	ccomp	_	_
11	!	_	.	.	_	1	punct	_	_
1	If	_	IN	IN	_	3	mark	_	_
2	we	_	PRP	PRP	_	3	nsubj	_	_
3	win	_	VBP	VBP	_	7	advcl	_	_
4	,	_	,	,	_	7	punct	_	_
5	it	_	PRP	PRP	_	7	nsubj	_	_
6	may	_	MD	MD	_	7	aux	_	_
7	increase	_	VB	VB	_	0	root	_	_
8	China	_	NNP	NNP	_	10	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	influence	_	NN	NN	_	7	dobj	_	_
11	!	_	.	.	_	7	punct	_	_
1	and	_	CC	CC	_	2	cc	_	_
2	improve	_	VB	VB	_	0	root	_	_
3	the	_	DT	DT	_	4	det	_	_
4	cohesion	_	NN	NN	_	2	dobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	citizenry	_	NN	NN	_	5	pobj	_	_
8	!	_	.	.	_	2	punct	_	_
1	If	_	IN	IN	_	3	mark	_	_
2	we	_	PRP	PRP	_	3	nsubj	_	_
3	lose	_	VBP	VBP	_	7	advcl	_	_
4	,	_	,	,	_	7	punct	_	_
5	we	_	PRP	PRP	_	7	nsubj	_	_
6	can	_	MD	MD	_	7	aux	_	_
7	clean	_	VB	VB	_	0	root	_	_
8	out	_	RP	RP	_	7	prt	_	_
9	those	_	DT	DT	_	11	det	_	_
10	incompetent	_	JJ	JJ	_	11	amod	_	_
11	bureaucrats	_	NNS	NNS	_	7	dobj	_	_
12	,	_	,	,	_	7	punct	_	_
13	and	_	CC	CC	_	7	cc	_	_
14	make	_	VB	VB	_	7	conj	_	_
15	those	_	DT	DT	_	16	det	_	_
16	trash	_	NN	NN	_	17	nsubj	_	_
17	get	_	VB	VB	_	14	ccomp	_	_
18	out	_	RP	RP	_	17	prt	_	_
19	!	_	.	.	_	7	punct	_	_
1	Let	_	VB	VB	_	0	root	_	_
2	China	_	NNP	NNP	_	3	nsubj	_	_
3	have	_	VB	VB	_	1	ccomp	_	_
4	new	_	JJ	JJ	_	5	amod	_	_
5	blood	_	NN	NN	_	3	dobj	_	_
6	and	_	CC	CC	_	3	cc	_	_
7	get	_	VB	VB	_	3	conj	_	_
8	updated	_	NNS	NNS	_	7	dobj	_	_
9	.	_	.	.	_	1	punct	_	_
1	,	_	,	,	_	2	punct	_	_
2	Get	_	VB	VB	_	0	root	_	_
3	up	_	RB	RB	_	2	advmod	_	_
4	,	_	,	,	_	2	punct	_	_
5	China	_	NNP	NNP	_	6	nn	_	_
6	!	_	NNP	NNP	_	2	dobj	_	_

Oracle:
(a / and, op, i3 / improve-01)
(a2 / and, op, c5 / clean-03)
(a2 / and, op, m2 / make-02)
(a3 / and, op, h / have-03)
(a3 / and, op, u / update-01)
(b2 / blood, mod, n5 / new)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / cohesion, mod, c4 / citizen)
(c5 / clean-03, ARG0, w3 / we)
(c5 / clean-03, ARG1, b / bureaucrat)
(c6 / country, name, n3 / name)
(c7 / country, name, n4 / name)
(c8 / competent-41, ARG1, b / bureaucrat)
(g / get-05, ARG1, t3 / trash)
(g / get-05, ARG2, o / out)
(g2 / get-05, ARG0, c6 / country)
(g2 / get-05, ARG1, c6 / country)
(g2 / get-05, ARG2, u2 / up)
(h / have-03, ARG0, c7 / country)
(h / have-03, ARG1, b2 / blood)
(i / increase-01, ARG0, w / win-01)
(i / increase-01, ARG1, i2 / influence-01)
(i2 / influence-01, ARG0, c2 / country)
(i3 / improve-01, ARG1, c3 / cohesion)
(k / know-01, ARG1, p / panacea)
(l / lose-03, ARG0, w3 / we)
(l3 / let-01, ARG1, a3 / and)
(l4 / let-01, ARG1, k / know-01)
(m2 / make-02, ARG0, w3 / we)
(m2 / make-02, ARG1, g / get-05)
(n / name, op, "US")
(n2 / name, op, "China")
(n3 / name, op, "China")
(n4 / name, op, "China")
(p / panacea, domain, c / country)
(p2 / possible, condition, w / win-01)
(p2 / possible, domain, i / increase-01)
(p3 / possible, condition, l / lose-03)
(p3 / possible, domain, a2 / and)
(u / update-01, ARG1, c7 / country)
(w / win-01, ARG0, w2 / we)

Input(Some(Graph((multi-sentence :snt1 (let-01 :ARG1 (know-01 :ARG1 (panacea :domain (country :name (name :op "US")) :polarity -) :ARG0 they) :ARG0 you :mode imperative) :snt2 (possible :condition (win-01 :ARG0 we) :domain (increase-01 :ARG1 (influence-01 :ARG0 (country :name (name :op "China"))) :ARG0 win-01)) :snt3 (and :op (improve-01 :ARG1 (cohesion :mod citizen))) :snt4 (possible :condition (lose-03 :ARG0 we) :domain (and :op (make-02 :ARG1 (get-05 :ARG2 out :ARG1 trash) :ARG0 we) :op (clean-03 :ARG1 (bureaucrat :ARG1-of (competent-41 :polarity -)) :ARG0 we))) :snt5 (let-01 :ARG1 (and :op (update-01 :ARG1 country) :op (have-03 :ARG1 (blood :mod new) :ARG0 (country :name (name :op "China")))) :ARG0 you :mode imperative) :snt6 (get-05 :ARG2 up :ARG1 (country :name (name :op "China")) :mode imperative :ARG0 country)),ArrayBuffer(Span(5,6,List(0, 1, 2),US,(country :name (name :op "US")),false), Span(18,19,List(3, 4, 5),China,(country :name (name :op "China")),false), Span(50,51,List(6, 7, 8),China,(country :name (name :op "China")),false), Span(62,63,List(9, 10, 11),China,(country :name (name :op "China")),false), Span(0,1,List(12),Let,let-01,false), Span(2,3,List(13),know,know-01,false), Span(9,10,List(14),panacea,panacea,false), Span(16,17,List(15),may,possible,false), Span(13,14,List(16),win,win-01,false), Span(12,13,List(17),we,we,false), Span(17,18,List(18),increase,increase-01,false), Span(20,21,List(19),influence,influence-01,false), Span(22,23,List(20),and,and,false), Span(23,24,List(21),improve,improve-01,false), Span(25,26,List(22),cohesion,cohesion,false), Span(35,36,List(23),can,possible,false), Span(32,33,List(24),lose,lose-03,false), Span(42,43,List(25),and,and,false), Span(43,44,List(26),make,make-02,false), Span(46,47,List(27),get,get-05,false), Span(37,38,List(28),out,out,false), Span(45,46,List(29),trash,trash,false), Span(36,37,List(30),clean,clean-03,false), Span(40,41,List(31),bureaucrats,bureaucrat,false), Span(39,40,List(32),incompetent,competent-41,false), Span(31,32,List(33),we,we,false), Span(49,50,List(34),Let,let-01,false), Span(54,55,List(35),and,and,false), Span(56,57,List(36),updated,update-01,false), Span(51,52,List(37),have,have-03,false), Span(53,54,List(38),blood,blood,false), Span(52,53,List(39),new,new,false), Span(55,56,List(40),get,get-05,false), Span(60,61,List(41),up,up,false), Span(28,29,List(42),citizenry,citizen,false)),Map(39 -> new, 30 -> clean-03, 2 -> "US", 5 -> "China", 33 -> we, 27 -> get-05, 12 -> let-01, 8 -> "China", 15 -> possible, 42 -> citizen, 36 -> update-01, 21 -> improve-01, 18 -> increase-01, 24 -> lose-03, 41 -> up, 35 -> and, 7 -> name, 17 -> we, 1 -> name, 23 -> possible, 38 -> blood, 26 -> make-02, 4 -> name, 11 -> "China", 32 -> competent-41, 14 -> panacea, 29 -> trash, 20 -> and, 34 -> let-01, 28 -> out, 6 -> country, 40 -> get-05, 9 -> country, 0 -> country, 22 -> cohesion, 16 -> win-01, 37 -> have-03, 19 -> influence-01, 3 -> country, 10 -> name, 31 -> bureaucrat, 25 -> and, 13 -> know-01),Map(w -> win-01, n -> name, c8 -> competent-41, h -> have-03, b -> bureaucrat, k -> know-01, b2 -> blood, m2 -> make-02, c7 -> country, p2 -> possible, c4 -> citizen, a3 -> and, l3 -> let-01, n4 -> name, u2 -> up, w3 -> we, g2 -> get-05, t3 -> trash, i3 -> improve-01, g -> get-05, p -> panacea, c3 -> cohesion, a -> and, n3 -> name, c6 -> country, i2 -> influence-01, w2 -> we, a2 -> and, i -> increase-01, c -> country, u -> update-01, l -> lose-03, o -> out, p3 -> possible, n2 -> name, c2 -> country, l4 -> let-01, n5 -> new, c5 -> clean-03))),[Ljava.lang.String;@196a42c3,Annotation([Ljava.lang.String;@4c60d6e9,[Ljava.lang.String;@15043a2f,[Ljava.lang.String;@4a83a74a),Annotation([Ljava.lang.String;@1349883,[Ljava.lang.String;@4b29d1d2,[Ledu.cmu.lti.nlp.amr.Dependency;@7f485fda),Annotation([Ljava.lang.String;@28261e8e,[Ljava.lang.String;@d737b89,[Ljava.lang.String;@8519cb4),Annotation([Ljava.lang.String;@35dab4eb,[Ljava.lang.String;@2d901eb0,[Ledu.cmu.lti.nlp.amr.Entity;@3ba987b8))
AMR:
(a / and, op, c4 / citizen)
(a / and, op, i2 / influence-01)
(a / and, op, i3 / improve-01)
(a2 / and, op, b / bureaucrat)
(a2 / and, op, m2 / make-02)
(a2 / and, op, p2 / possible)
(a3 / and, op, b2 / blood)
(a3 / and, op, g2 / get-05)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c5 / clean-03, ARG0, o / out)
(c5 / clean-03, ARG1, p3 / possible)
(c6 / country, name, n3 / name)
(c7 / country, name, n4 / name)
(c8 / competent-41, ARG0, b / bureaucrat)
(c8 / competent-41, ARG1, c5 / clean-03)
(g / get-05, ARG1, t3 / trash)
(g2 / get-05, ARG0, c6 / country)
(g2 / get-05, ARG1, u / update-01)
(h / have-03, ARG0, c7 / country)
(h / have-03, ARG1, a3 / and)
(h / have-03, ARG6, n5 / new)
(i / increase-01, ARG1, c2 / country)
(i / increase-01, ARG2, i2 / influence-01)
(i / increase-01, ARG6, p2 / possible)
(i2 / influence-01, ARG1, k / know-01)
(i3 / improve-01, ARG1, c3 / cohesion)
(k / know-01, ARG1, p / panacea)
(l / lose-03, ARG0, w3 / we)
(l / lose-03, ARG1, p3 / possible)
(l3 / let-01, ARG0, c7 / country)
(l3 / let-01, ARG1, g / get-05)
(l4 / let-01, ARG1, k / know-01)
(m2 / make-02, ARG1, g / get-05)
(n / name, op, "US")
(n2 / name, op, "China")
(n3 / name, op, "China")
(n4 / name, op, "China")
(p / panacea, domain, c / country)
(u / update-01, ARG1, u2 / up)
(w / win-01, ARG0, w2 / we)
(w / win-01, ARG1, p2 / possible)

WARNING: makeIds can't find span Id: 0.0.2.1.1
WARNING: makeIds can't find span Id: 0.0.2.1.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.4.2.0.0
WARNING: makeIds can't find span Id: 0.4.2.0.0.0
WARNING: makeIds can't find span Id: 0.4.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.5.1
WARNING: makeIds can't find span Id: 0.5.1.0
WARNING: makeIds can't find span Id: 0.5.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.1
WARNING: makeIds can't find span Id: 0.3.0.1.0
WARNING: makeIds can't find span Id: 0.3.0.1.0.1
WARNING: makeIds can't find span Id: 0.3.0.1.0.0
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.3.0.0.1
WARNING: makeIds can't find span Id: 0.3.0.0.1.0
WARNING: makeIds can't find span Id: 0.3.0.0.0
WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.4.2
WARNING: makeIds can't find span Id: 0.4.2.1
WARNING: makeIds can't find span Id: 0.4.2.0
WARNING: makeIds can't find span Id: 0.4.2.0.1
WARNING: makeIds can't find span Id: 0.4.2.0.1.0
WARNING: makeIds can't find span Id: 0.5
WARNING: makeIds can't find span Id: 0.5.2
WARNING: makeIds can't find span Id: 0.2.0.0.0
Decoded in 4,337,390 microseconds
Sentence: Go, China, go

Oracle Span 1:  China => (country :name (name :op "China"))
Oracle Span 2:  Go => go-01
NER Entity: (country :name (name :op "China"))
Spans:
Span 2-3:  China => (country :name (name :op "China"))
Span 0-1:  Go => go-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  China => (country :name (name :op "China"))
Oracle Span 0-1:  Go => go-01

Dependencies:
1	Go	_	NNP	NNP	_	5	nsubj	_	_
2	,	_	,	,	_	1	punct	_	_
3	China	_	NNP	NNP	_	1	appos	_	_
4	,	_	,	,	_	1	punct	_	_
5	go	_	VBP	VBP	_	0	root	_	_

Oracle:
(c / country, name, n / name)
(g / go-01, ARG1, c / country)
(n / name, op, "China")

Input(Some(Graph((go-01 :mode imperative :ARG1 (country :name (name :op "China"))),ArrayBuffer(Span(2,3,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(0,1,List(3),Go,go-01,false)),Map(2 -> "China", 1 -> name, 0 -> country, 3 -> go-01),Map(n -> name, g -> go-01, c -> country))),[Ljava.lang.String;@3f191845,Annotation([Ljava.lang.String;@5f049ea1,[Ljava.lang.String;@72cc7e6f,[Ljava.lang.String;@5afa3c9),Annotation([Ljava.lang.String;@72035809,[Ljava.lang.String;@909217e,[Ledu.cmu.lti.nlp.amr.Dependency;@18271936),Annotation([Ljava.lang.String;@606e4010,[Ljava.lang.String;@8458f04,[Ljava.lang.String;@48075da3),Annotation([Ljava.lang.String;@68c9133c,[Ljava.lang.String;@7a35b0f5,[Ledu.cmu.lti.nlp.amr.Entity;@5e2c3d18))
AMR:
(c / country, name, n / name)
(g / go-01, location, c / country)
(n / name, op, "China")

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 8,947 microseconds
Sentence: I suggest that China strengthens the guard on the Diaoyu Islands, make it daily, protect the fishermen and the sovereignty of our country; if Japan dares to invade our territory with military force, we will fight a small-scale war of self-defense, regardless of the cost. China can not lose!

Oracle Span 1:  ; => and
Oracle Span 2:  and => and
Oracle Span 3:  can => possible
Oracle Span 4:  China => (country :name (name :op "China"))
Oracle Span 5:  China => (country :name (name :op "China"))
Oracle Span 6:  cost => (thing :ARG2-of cost-01)
Oracle Span 7:  country => country
Oracle Span 8:  dares => dare-01
Oracle Span 9:  defense => defend-01
Oracle Span 10:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 11:  fight => fight-01
Oracle Span 12:  fishermen => (person :ARG0-of fish-01)
Oracle Span 13:  force => force
Oracle Span 14:  guard => guard-01
Oracle Span 15:  I => i
Oracle Span 16:  invade => invade-01
Oracle Span 17:  Japan => (country :name (name :op "Japan"))
Oracle Span 18:  lose => lose-02
Oracle Span 19:  military => military
Oracle Span 20:  protect => protect-01
Oracle Span 21:  scale => scale
Oracle Span 22:  small => small
Oracle Span 23:  sovereignty => sovereignty
Oracle Span 24:  strengthens => strengthen-01
Oracle Span 25:  suggest => suggest-01
Oracle Span 26:  territory => territory
Oracle Span 27:  war => war
Oracle Span 28:  we => we
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Diaoyu" :op "Islands"))
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 25-26:  ; => and
Span 19-20:  and => and
Span 56-57:  can => possible
Span 3-4:  China => (country :name (name :op "China"))
Span 55-56:  China => (country :name (name :op "China"))
Span 53-54:  cost => (thing :ARG2-of cost-01)
Span 24-25:  country => country
Span 28-29:  dares => dare-01
Span 48-49:  defense => defend-01
Span 9-11:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Span 39-40:  fight => fight-01
Span 18-19:  fishermen => (person :ARG0-of fish-01)
Span 35-36:  force => force
Span 6-7:  guard => guard-01
Span 0-1:  I => i
Span 30-31:  invade => invade-01
Span 27-28:  Japan => (country :name (name :op "Japan"))
Span 58-59:  lose => lose-02
Span 34-35:  military => military
Span 16-17:  protect => protect-01
Span 43-44:  scale => scale
Span 41-42:  small => small
Span 21-22:  sovereignty => sovereignty
Span 4-5:  strengthens => strengthen-01
Span 1-2:  suggest => suggest-01
Span 32-33:  territory => territory
Span 44-45:  war => war
Span 37-38:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 55
Langrangian relaxation converged after 44 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 51
 *** WARNING: The dependency tree seems broken.  I can't find the head of can in position 52
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 53
 *** WARNING: The dependency tree seems broken.  I can't find the head of lose in position 54
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 55
Oracle Span 25-26:  ; => and
Oracle Span 19-20:  and => and
Oracle Span 56-57:  can => possible
Oracle Span 3-4:  China => (country :name (name :op "China"))
Oracle Span 55-56:  China => (country :name (name :op "China"))
Oracle Span 53-54:  cost => (thing :ARG2-of cost-01)
Oracle Span 24-25:  country => country
Oracle Span 28-29:  dares => dare-01
Oracle Span 48-49:  defense => defend-01
Oracle Span 9-11:  Diaoyu Islands => (island :name (name :op "Islands" :op "Diaoyu"))
Oracle Span 39-40:  fight => fight-01
Oracle Span 18-19:  fishermen => (person :ARG0-of fish-01)
Oracle Span 35-36:  force => force
Oracle Span 6-7:  guard => guard-01
Oracle Span 0-1:  I => i
Oracle Span 30-31:  invade => invade-01
Oracle Span 27-28:  Japan => (country :name (name :op "Japan"))
Oracle Span 58-59:  lose => lose-02
Oracle Span 34-35:  military => military
Oracle Span 16-17:  protect => protect-01
Oracle Span 43-44:  scale => scale
Oracle Span 41-42:  small => small
Oracle Span 21-22:  sovereignty => sovereignty
Oracle Span 4-5:  strengthens => strengthen-01
Oracle Span 1-2:  suggest => suggest-01
Oracle Span 32-33:  territory => territory
Oracle Span 44-45:  war => war
Oracle Span 37-38:  we => we

Dependencies:
1	I	_	PRP	PRP	_	2	nsubj	_	_
2	suggest	_	VB	VB	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	China	_	NNP	NNP	_	5	nsubj	_	_
5	strengthens	_	VBZ	VBZ	_	2	ccomp	_	_
6	the	_	DT	DT	_	7	det	_	_
7	guard	_	NN	NN	_	5	dobj	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	11	det	_	_
10	Diaoyu	_	NNP	NNP	_	11	nn	_	_
11	Islands	_	NNPS	NNPS	_	8	pobj	_	_
12	,	_	,	,	_	2	punct	_	_
13	make	_	VB	VB	_	2	dep	_	_
14	it	_	PRP	PRP	_	13	dobj	_	_
15	daily	_	RB	RB	_	13	advmod	_	_
16	,	_	,	,	_	2	punct	_	_
17	protect	_	VB	VB	_	2	dep	_	_
18	the	_	DT	DT	_	19	det	_	_
19	fishermen	_	NNS	NNS	_	17	dobj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	the	_	DT	DT	_	22	det	_	_
22	sovereignty	_	NN	NN	_	19	conj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	our	_	PRP$	PRP$	_	25	poss	_	_
25	country	_	NN	NN	_	23	pobj	_	_
26	;	_	:	:	_	2	punct	_	_
27	if	_	IN	IN	_	29	mark	_	_
28	Japan	_	NNP	NNP	_	29	nsubj	_	_
29	dares	_	VBZ	VBZ	_	40	advcl	_	_
30	to	_	TO	TO	_	31	aux	_	_
31	invade	_	VB	VB	_	29	xcomp	_	_
32	our	_	PRP$	PRP$	_	33	poss	_	_
33	territory	_	NN	NN	_	31	dobj	_	_
34	with	_	IN	IN	_	31	prep	_	_
35	military	_	JJ	JJ	_	36	amod	_	_
36	force	_	NN	NN	_	34	pobj	_	_
37	,	_	,	,	_	40	punct	_	_
38	we	_	PRP	PRP	_	40	nsubj	_	_
39	will	_	MD	MD	_	40	aux	_	_
40	fight	_	VB	VB	_	2	parataxis	_	_
41	a	_	DT	DT	_	43	det	_	_
42	small-scale	_	JJ	JJ	_	43	amod	_	_
43	war	_	NN	NN	_	40	dobj	_	_
44	of	_	IN	IN	_	43	prep	_	_
45	self-defense	_	NN	NN	_	44	pobj	_	_
46	,	_	,	,	_	40	punct	_	_
47	regardless	_	RB	RB	_	40	advmod	_	_
48	of	_	IN	IN	_	47	prep	_	_
49	the	_	DT	DT	_	50	det	_	_
50	cost	_	NN	NN	_	48	pobj	_	_
51	.	_	.	.	_	2	punct	_	_
1	China	_	NNP	NNP	_	4	nsubj	_	_
2	can	_	MD	MD	_	4	aux	_	_
3	not	_	RB	RB	_	4	neg	_	_
4	lose	_	VB	VB	_	0	root	_	_
5	!	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, g2 / guard-01)
(a / and, op, p2 / protect-01)
(a / and, op, s2 / strengthen-01)
(a2 / and, op, p3 / person)
(a2 / and, op, s3 / sovereignty)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, poss, w3 / we)
(c4 / cost-01, ARG2, t3 / thing)
(c5 / country, name, n4 / name)
(d2 / defend-01, instrument, w2 / war)
(d3 / dare-01, ARG0, c5 / country)
(d3 / dare-01, ARG2, i3 / invade-01)
(f / fish-01, ARG0, p3 / person)
(f2 / fight-01, ARG1, w2 / war)
(f2 / fight-01, concession, t3 / thing)
(f2 / fight-01, condition, d3 / dare-01)
(f3 / force, mod, m3 / military)
(g2 / guard-01, ARG0, c2 / country)
(g2 / guard-01, ARG1, i2 / island)
(i2 / island, name, n3 / name)
(i3 / invade-01, ARG0, c5 / country)
(i3 / invade-01, ARG1, t / territory)
(i3 / invade-01, manner, f3 / force)
(l / lose-02, ARG0, c / country)
(n / name, op, "China")
(n2 / name, op, "China")
(n3 / name, op, "Diaoyu")
(n3 / name, op, "Islands")
(n4 / name, op, "Japan")
(p / possible, domain, l / lose-02)
(p2 / protect-01, ARG0, c2 / country)
(p2 / protect-01, ARG1, a2 / and)
(s / suggest-01, ARG0, i / i)
(s / suggest-01, ARG1, a / and)
(s2 / strengthen-01, ARG0, c2 / country)
(s3 / sovereignty, poss, c3 / country)
(s4 / scale, mod, s5 / small)
(w2 / war, mod, s4 / scale)

Input(Some(Graph((multi-sentence :snt1 (suggest-01 :ARG1 (and :op (protect-01 :ARG1 (and :op (sovereignty :poss (country :poss we)) :op (person :ARG0-of fish-01)) :ARG0 country) :op (guard-01 :frequency (rate-entity-91 :ARG3 (temporal-quantity :quant 1 :unit day)) :ARG0 country :ARG1 island) :op (strengthen-01 :ARG1 (guard-01 :ARG1 (island :name (name :op "Islands" :op "Diaoyu")) :ARG0 country) :ARG0 (country :name (name :op "China")))) :ARG0 i) :snt2 (fight-01 :condition (dare-01 :ARG2 (invade-01 :manner (force :mod military) :ARG1 (territory :poss we) :ARG0 country) :ARG0 (country :name (name :op "Japan"))) :concession (thing :ARG2-of cost-01) :ARG1 (war :instrument-of (defend-01 :ARG0 we :ARG1 we) :mod (scale :mod small)) :ARG0 we) :snt3 (possible :domain (lose-02 :ARG0 (country :name (name :op "China"))) :polarity -)),ArrayBuffer(Span(3,4,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(9,11,List(3, 4, 5, 6),Diaoyu Islands,(island :name (name :op "Islands" :op "Diaoyu")),false), Span(27,28,List(7, 8, 9),Japan,(country :name (name :op "Japan")),false), Span(55,56,List(10, 11, 12),China,(country :name (name :op "China")),false), Span(1,2,List(13),suggest,suggest-01,false), Span(19,20,List(14),and,and,false), Span(16,17,List(15),protect,protect-01,false), Span(25,26,List(16),;,and,false), Span(21,22,List(17),sovereignty,sovereignty,false), Span(24,25,List(18),country,country,false), Span(37,38,List(19),we,we,false), Span(6,7,List(20),guard,guard-01,false), Span(4,5,List(21),strengthens,strengthen-01,false), Span(0,1,List(22),I,i,false), Span(39,40,List(23),fight,fight-01,false), Span(28,29,List(24),dares,dare-01,false), Span(30,31,List(25),invade,invade-01,false), Span(35,36,List(26),force,force,false), Span(34,35,List(27),military,military,false), Span(32,33,List(28),territory,territory,false), Span(53,54,List(29, 30),cost,(thing :ARG2-of cost-01),false), Span(44,45,List(31),war,war,false), Span(43,44,List(32),scale,scale,false), Span(41,42,List(33),small,small,false), Span(56,57,List(34),can,possible,false), Span(58,59,List(35),lose,lose-02,false), Span(18,19,List(36, 37),fishermen,(person :ARG0-of fish-01),false), Span(48,49,List(38),defense,defend-01,false)),Map(30 -> cost-01, 2 -> "China", 5 -> "Islands", 33 -> small, 27 -> military, 12 -> "China", 15 -> protect-01, 8 -> name, 36 -> person, 21 -> strengthen-01, 18 -> country, 24 -> dare-01, 35 -> lose-02, 7 -> country, 17 -> sovereignty, 1 -> name, 23 -> fight-01, 38 -> defend-01, 26 -> force, 4 -> name, 11 -> name, 32 -> scale, 14 -> and, 29 -> thing, 20 -> guard-01, 34 -> possible, 28 -> territory, 6 -> "Diaoyu", 9 -> "Japan", 0 -> country, 22 -> i, 16 -> and, 37 -> fish-01, 19 -> we, 10 -> country, 3 -> island, 31 -> war, 25 -> invade-01, 13 -> suggest-01),Map(s5 -> small, m3 -> military, n -> name, s2 -> strengthen-01, t -> territory, d3 -> dare-01, p2 -> protect-01, c4 -> cost-01, n4 -> name, w3 -> we, s -> suggest-01, s4 -> scale, t3 -> thing, g2 -> guard-01, i3 -> invade-01, p -> possible, c3 -> country, a -> and, n3 -> name, d2 -> defend-01, f3 -> force, i2 -> island, w2 -> war, i -> i, a2 -> and, c -> country, s3 -> sovereignty, f2 -> fight-01, l -> lose-02, f -> fish-01, p3 -> person, n2 -> name, c2 -> country, c5 -> country))),[Ljava.lang.String;@5b218417,Annotation([Ljava.lang.String;@645aa696,[Ljava.lang.String;@6caf0677,[Ljava.lang.String;@413d1baf),Annotation([Ljava.lang.String;@16eb3ea3,[Ljava.lang.String;@273444fe,[Ledu.cmu.lti.nlp.amr.Dependency;@33bc72d1),Annotation([Ljava.lang.String;@1a75e76a,[Ljava.lang.String;@5524cca1,[Ljava.lang.String;@5032714f),Annotation([Ljava.lang.String;@48bb62,[Ljava.lang.String;@353352b6,[Ledu.cmu.lti.nlp.amr.Entity;@4681c175))
AMR:
(a / and, op, p3 / person)
(a / and, op, s3 / sovereignty)
(a2 / and, op, c3 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c4 / cost-01, ARG1, f2 / fight-01)
(c4 / cost-01, ARG2, t3 / thing)
(c5 / country, name, n4 / name)
(d2 / defend-01, ARG1, a2 / and)
(d3 / dare-01, ARG0, c5 / country)
(d3 / dare-01, ARG1, i3 / invade-01)
(f / fish-01, ARG0, p3 / person)
(f / fish-01, ARG1, f2 / fight-01)
(f2 / fight-01, ARG0, w3 / we)
(f2 / fight-01, ARG1, w2 / war)
(f2 / fight-01, condition, d3 / dare-01)
(f3 / force, mod, m3 / military)
(g2 / guard-01, ARG1, i2 / island)
(i2 / island, name, n3 / name)
(i3 / invade-01, ARG0, c5 / country)
(i3 / invade-01, ARG1, t / territory)
(i3 / invade-01, ARG2, f3 / force)
(l / lose-02, ARG1, p2 / protect-01)
(l / lose-02, ARG6, p / possible)
(m3 / military, poss, c / country)
(n / name, op, "China")
(n2 / name, op, "China")
(n3 / name, op, "Diaoyu")
(n3 / name, op, "Islands")
(n4 / name, op, "Japan")
(p2 / protect-01, ARG0, i / i)
(p2 / protect-01, ARG1, p3 / person)
(s / suggest-01, ARG0, i / i)
(s / suggest-01, ARG1, s2 / strengthen-01)
(s2 / strengthen-01, ARG0, c2 / country)
(s2 / strengthen-01, ARG1, g2 / guard-01)
(s3 / sovereignty, poss, c3 / country)
(s4 / scale, mod, s5 / small)
(w2 / war, mod, s4 / scale)

WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.0.0
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.1
WARNING: makeIds can't find span Id: 0.0.1.2.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.3.1
WARNING: makeIds can't find span Id: 0.1.3.1.1
WARNING: makeIds can't find span Id: 0.1.3.1.1.0
WARNING: makeIds can't find span Id: 0.1.3.1.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
Decoded in 3,443,170 microseconds
Sentence: We need shows in life, but it is really p. to show yourself within someone's embrace.

Oracle Span 1:  but => contrast-01
Oracle Span 2:  embrace => embrace-02
Oracle Span 3:  life => life
Oracle Span 4:  need => need-01
Oracle Span 5:  really => really
Oracle Span 6:  show => show
Oracle Span 7:  shows => show-01
Oracle Span 8:  someone => someone
Oracle Span 9:  We => we
Spans:
Span 6-7:  but => contrast-01
Span 17-18:  embrace => embrace-02
Span 4-5:  life => life
Span 1-2:  need => need-01
Span 9-10:  really => really
Span 12-13:  show => show
Span 2-3:  shows => show-01
Span 15-16:  someone => someone
Span 0-1:  We => we

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Oracle Span 6-7:  but => contrast-01
Oracle Span 17-18:  embrace => embrace-02
Oracle Span 4-5:  life => life
Oracle Span 1-2:  need => need-01
Oracle Span 9-10:  really => really
Oracle Span 12-13:  show => show
Oracle Span 2-3:  shows => show-01
Oracle Span 15-16:  someone => someone
Oracle Span 0-1:  We => we

Dependencies:
1	We	_	PRP	PRP	_	2	nsubj	_	_
2	need	_	VBP	VBP	_	0	root	_	_
3	shows	_	NNS	NNS	_	2	dobj	_	_
4	in	_	IN	IN	_	3	prep	_	_
5	life	_	NN	NN	_	4	pobj	_	_
6	,	_	,	,	_	2	punct	_	_
7	but	_	CC	CC	_	2	cc	_	_
8	it	_	PRP	PRP	_	11	nsubj	_	_
9	is	_	VBZ	VBZ	_	11	cop	_	_
10	really	_	RB	RB	_	11	advmod	_	_
11	p.	_	JJ	JJ	_	2	conj	_	_
12	to	_	TO	TO	_	13	aux	_	_
13	show	_	VB	VB	_	11	xcomp	_	_
14	yourself	_	PRP	PRP	_	13	dobj	_	_
15	within	_	IN	IN	_	13	prep	_	_
16	someone	_	NN	NN	_	18	poss	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	embrace	_	NN	NN	_	15	pobj	_	_
19	.	_	.	.	_	2	punct	_	_

Oracle:
(c / contrast-01, ARG1, n / need-01)
(e / embrace-02, ARG0, s2 / someone)
(n / need-01, ARG0, w / we)
(n / need-01, ARG1, s3 / show)
(n / need-01, prep-in, l / life)

Input(Some(Graph((contrast-01 :ARG2 (p :degree really :domain (show-01 :ARG1 (you :ARG1-of (embrace-02 :ARG0 someone)) :ARG0 you)) :ARG1 (need-01 :prep-in life :ARG1 show :ARG0 we)),ArrayBuffer(Span(6,7,List(0),but,contrast-01,false), Span(9,10,List(1),really,really,false), Span(2,3,List(2),shows,show-01,false), Span(17,18,List(3),embrace,embrace-02,false), Span(15,16,List(4),someone,someone,false), Span(1,2,List(5),need,need-01,false), Span(4,5,List(6),life,life,false), Span(12,13,List(7),show,show,false), Span(0,1,List(8),We,we,false)),Map(2 -> show-01, 5 -> need-01, 8 -> we, 7 -> show, 1 -> really, 4 -> someone, 6 -> life, 0 -> contrast-01, 3 -> embrace-02),Map(w -> we, n -> need-01, e -> embrace-02, s2 -> someone, s -> show-01, r -> really, s3 -> show, l -> life, c -> contrast-01))),[Ljava.lang.String;@57a78e3,Annotation([Ljava.lang.String;@402c4085,[Ljava.lang.String;@6fa51cd4,[Ljava.lang.String;@2767e23c),Annotation([Ljava.lang.String;@710c2b53,[Ljava.lang.String;@5386659f,[Ledu.cmu.lti.nlp.amr.Dependency;@14028087),Annotation([Ljava.lang.String;@cecf639,[Ljava.lang.String;@1caa0244,[Ljava.lang.String;@7ce026d3),Annotation([Ljava.lang.String;@7ce69770,[Ljava.lang.String;@1750fbeb,[Ledu.cmu.lti.nlp.amr.Entity;@5b247367))
AMR:
(c / contrast-01, ARG1, s3 / show)
(c / contrast-01, ARG2, n / need-01)
(e / embrace-02, ARG0, s2 / someone)
(e / embrace-02, ARG1, r / really)
(n / need-01, ARG0, w / we)
(n / need-01, ARG1, s / show-01)
(n / need-01, ARG6, r / really)
(s / show-01, ARG1, l / life)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 331,820 microseconds
Sentence: I'm just passing by

Oracle Span 1:  I => i
Oracle Span 2:  just => just
Oracle Span 3:  passing => pass-17
Spans:
Span 0-1:  I => i
Span 2-3:  just => just
Span 3-4:  passing => pass-17

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  I => i
Oracle Span 2-3:  just => just
Oracle Span 3-4:  passing => pass-17

Dependencies:
1	I	_	PRP	PRP	_	4	nsubj	_	_
2	'm	_	VBP	VBP	_	4	aux	_	_
3	just	_	RB	RB	_	4	advmod	_	_
4	passing	_	VBG	VBG	_	0	root	_	_
5	by	_	IN	IN	_	4	prep	_	_

Oracle:
(p / pass-17, ARG0, i / i)
(p / pass-17, mod, j / just)

Input(Some(Graph((pass-17 :mod just :ARG0 i),ArrayBuffer(Span(3,4,List(0),passing,pass-17,false), Span(2,3,List(1),just,just,false), Span(0,1,List(2),I,i,false)),Map(2 -> i, 1 -> just, 0 -> pass-17),Map(j -> just, p -> pass-17, i -> i))),[Ljava.lang.String;@268f106e,Annotation([Ljava.lang.String;@6e9a5ed8,[Ljava.lang.String;@7e057f43,[Ljava.lang.String;@6c284af),Annotation([Ljava.lang.String;@5890e879,[Ljava.lang.String;@6440112d,[Ledu.cmu.lti.nlp.amr.Dependency;@31ea9581),Annotation([Ljava.lang.String;@231f98ef,[Ljava.lang.String;@7c137fd5,[Ljava.lang.String;@183ec003),Annotation([Ljava.lang.String;@7d9d0818,[Ljava.lang.String;@221a3fa4,[Ledu.cmu.lti.nlp.amr.Entity;@451001e5))
AMR:
(j / just, domain, i / i)
(p / pass-17, ARG1, i / i)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
Decoded in 8,558 microseconds
Sentence: The whole society is like this, not to mention the stars

Oracle Span 1:  society => society
Oracle Span 2:  stars => (person :ARG1-of star-01)
Oracle Span 3:  this => this
Oracle Span 4:  whole => whole
Spans:
Span 2-3:  society => society
Span 11-12:  stars => (person :ARG1-of star-01)
Span 5-6:  this => this
Span 1-2:  whole => whole

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Oracle Span 2-3:  society => society
Oracle Span 11-12:  stars => (person :ARG1-of star-01)
Oracle Span 5-6:  this => this
Oracle Span 1-2:  whole => whole

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	whole	_	JJ	JJ	_	3	amod	_	_
3	society	_	NN	NN	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	0	root	_	_
5	like	_	IN	IN	_	4	prep	_	_
6	this	_	DT	DT	_	5	pobj	_	_
7	,	_	,	,	_	6	punct	_	_
8	not	_	RB	RB	_	10	neg	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	mention	_	VB	VB	_	6	vmod	_	_
11	the	_	DT	DT	_	12	det	_	_
12	stars	_	NNS	NNS	_	10	dobj	_	_

Oracle:
(s / society, mod, w / whole)
(s2 / star-01, ARG1, p / person)

Input(Some(Graph((resemble-01 :ARG1 (society :ARG2-of (include-91 :ARG1 (person :ARG1-of star-01)) :mod whole) :ARG2 this),ArrayBuffer(Span(2,3,List(0),society,society,false), Span(11,12,List(1, 2),stars,(person :ARG1-of star-01),false), Span(1,2,List(3),whole,whole,false), Span(5,6,List(4),this,this,false)),Map(2 -> star-01, 1 -> person, 4 -> this, 0 -> society, 3 -> whole),Map(w -> whole, t -> this, s2 -> star-01, s -> society, p -> person))),[Ljava.lang.String;@2b40ff9c,Annotation([Ljava.lang.String;@3e08ff24,[Ljava.lang.String;@4d1c005e,[Ljava.lang.String;@8462f31),Annotation([Ljava.lang.String;@24569dba,[Ljava.lang.String;@5ddeb7cb,[Ledu.cmu.lti.nlp.amr.Dependency;@70ed52de),Annotation([Ljava.lang.String;@496bc455,[Ljava.lang.String;@59402b8f,[Ljava.lang.String;@7188af83),Annotation([Ljava.lang.String;@6be968ce,[Ljava.lang.String;@7c37508a,[Ledu.cmu.lti.nlp.amr.Entity;@247310d0))
AMR:
(p / person, op, s / society)
(s / society, mod, w / whole)
(s2 / star-01, ARG1, p / person)
(s2 / star-01, ARG6, t / this)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 47,091 microseconds
Sentence: Damn it being not sexy

Oracle Span 1:  Damn => damn-01
Oracle Span 2:  sexy => sexy
Spans:
Span 0-1:  Damn => damn-01
Span 4-5:  sexy => sexy

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Damn => damn-01
Oracle Span 4-5:  sexy => sexy

Dependencies:
1	Damn	_	VB	VB	_	0	root	_	_
2	it	_	PRP	PRP	_	5	nsubj	_	_
3	being	_	VBG	VBG	_	5	cop	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	sexy	_	JJ	JJ	_	1	dep	_	_

Oracle:
(d / damn-01, ARG1, s / sexy)

Input(Some(Graph((damn-01 :ARG1 (sexy :polarity -)),ArrayBuffer(Span(0,1,List(0),Damn,damn-01,false), Span(4,5,List(1),sexy,sexy,false)),Map(1 -> sexy, 0 -> damn-01),Map(s -> sexy, d -> damn-01))),[Ljava.lang.String;@1033576a,Annotation([Ljava.lang.String;@303cf2ba,[Ljava.lang.String;@76494737,[Ljava.lang.String;@4a003cbe),Annotation([Ljava.lang.String;@4082ba93,[Ljava.lang.String;@17fc391b,[Ledu.cmu.lti.nlp.amr.Dependency;@2b30a42c),Annotation([Ljava.lang.String;@609e8838,[Ljava.lang.String;@359df09a,[Ljava.lang.String;@43df23d3),Annotation([Ljava.lang.String;@6d60fe40,[Ljava.lang.String;@792b749c,[Ledu.cmu.lti.nlp.amr.Entity;@23e84203))
AMR:
(d / damn-01, ARG1, s / sexy)

WARNING: makeIds can't find span Id: 0.0
Decoded in 5,797 microseconds
Sentence: It's totally unacceptable

Oracle Span 1:  It => it
Oracle Span 2:  totally => total
Oracle Span 3:  unacceptable => accept-01
Spans:
Span 0-1:  It => it
Span 2-3:  totally => total
Span 3-4:  unacceptable => accept-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 0-1:  It => it
Oracle Span 2-3:  totally => total
Oracle Span 3-4:  unacceptable => accept-01

Dependencies:
1	It	_	PRP	PRP	_	4	nsubj	_	_
2	's	_	VBZ	VBZ	_	4	cop	_	_
3	totally	_	RB	RB	_	4	advmod	_	_
4	unacceptable	_	JJ	JJ	_	0	root	_	_

Oracle:
(a / accept-01, ARG1, i / it)

Input(Some(Graph((possible :polarity - :domain (accept-01 :ARG1 it) :degree total),ArrayBuffer(Span(0,1,List(0),It,it,false), Span(3,4,List(1),unacceptable,accept-01,false), Span(2,3,List(2),totally,total,false)),Map(2 -> total, 1 -> accept-01, 0 -> it),Map(t -> total, a -> accept-01, i -> it))),[Ljava.lang.String;@19932c16,Annotation([Ljava.lang.String;@73eb439a,[Ljava.lang.String;@514646ef,[Ljava.lang.String;@305ffe9e),Annotation([Ljava.lang.String;@302c971f,[Ljava.lang.String;@1972e513,[Ledu.cmu.lti.nlp.amr.Dependency;@7ae0a9ec),Annotation([Ljava.lang.String;@35841320,[Ljava.lang.String;@61c4eee0,[Ljava.lang.String;@6f10d5b6),Annotation([Ljava.lang.String;@1040be71,[Ljava.lang.String;@548a24a,[Ledu.cmu.lti.nlp.amr.Entity;@433defed))
AMR:
(a / accept-01, ARG1, i / it)
(a / accept-01, ARG6, t / total)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
Decoded in 16,154 microseconds
Sentence: Agree, just cheap entertainers. Their reputation in feudal China somewhat makes sense.

Oracle Span 1:  Agree => agree-01
Oracle Span 2:  cheap => cheap
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  entertainers => (person :ARG0-of entertain-01)
Oracle Span 5:  feudal => feudal
Oracle Span 6:  just => just
Oracle Span 7:  makes => make-01
Oracle Span 8:  reputation => (thing :ARG2-of repute-01)
Oracle Span 9:  sense => sense
Oracle Span 10:  somewhat => somewhat
NER Entity: (country :name (name :op "China"))
Spans:
Span 0-1:  Agree => agree-01
Span 3-4:  cheap => cheap
Span 10-11:  China => (country :name (name :op "China"))
Span 4-5:  entertainers => (person :ARG0-of entertain-01)
Span 9-10:  feudal => feudal
Span 2-3:  just => just
Span 12-13:  makes => make-01
Span 7-8:  reputation => (thing :ARG2-of repute-01)
Span 13-14:  sense => sense
Span 11-12:  somewhat => somewhat

 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Langrangian relaxation converged after 31 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Oracle Span 0-1:  Agree => agree-01
Oracle Span 3-4:  cheap => cheap
Oracle Span 10-11:  China => (country :name (name :op "China"))
Oracle Span 4-5:  entertainers => (person :ARG0-of entertain-01)
Oracle Span 9-10:  feudal => feudal
Oracle Span 2-3:  just => just
Oracle Span 12-13:  makes => make-01
Oracle Span 7-8:  reputation => (thing :ARG2-of repute-01)
Oracle Span 13-14:  sense => sense
Oracle Span 11-12:  somewhat => somewhat

Dependencies:
1	Agree	_	NNP	NNP	_	0	root	_	_
2	,	_	,	,	_	1	punct	_	_
3	just	_	RB	RB	_	5	advmod	_	_
4	cheap	_	JJ	JJ	_	5	amod	_	_
5	entertainers	_	NNS	NNS	_	1	appos	_	_
6	.	_	.	.	_	1	punct	_	_
1	Their	_	PRP$	PRP$	_	2	poss	_	_
2	reputation	_	NN	NN	_	7	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	feudal	_	JJ	JJ	_	5	amod	_	_
5	China	_	NNP	NNP	_	3	pobj	_	_
6	somewhat	_	RB	RB	_	7	advmod	_	_
7	makes	_	VBZ	VBZ	_	0	root	_	_
8	sense	_	NN	NN	_	7	dobj	_	_
9	.	_	.	.	_	7	punct	_	_

Oracle:
(a / agree-01, ARG1, p / person)
(c2 / country, mod, f / feudal)
(c2 / country, name, n / name)
(e / entertain-01, ARG0, p / person)
(e / entertain-01, mod, c / cheap)
(m2 / make-01, ARG0, t2 / thing)
(m2 / make-01, ARG1, s / sense)
(m2 / make-01, degree, s2 / somewhat)
(n / name, op, "China")
(p / person, mod, j / just)
(r / repute-01, ARG2, t2 / thing)
(r / repute-01, location, c2 / country)

Input(Some(Graph((multi-sentence :snt1 (agree-01 :ARG1 (person :mod just :ARG0-of (entertain-01 :mod cheap))) :snt2 (make-01 :degree somewhat :ARG1 sense :ARG0 (thing :ARG2-of (repute-01 :location (country :mod feudal :name (name :op "China")) :ARG1 they)))),ArrayBuffer(Span(10,11,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(0,1,List(3),Agree,agree-01,false), Span(4,5,List(4, 5),entertainers,(person :ARG0-of entertain-01),false), Span(3,4,List(6),cheap,cheap,false), Span(2,3,List(7),just,just,false), Span(12,13,List(8),makes,make-01,false), Span(11,12,List(9),somewhat,somewhat,false), Span(13,14,List(10),sense,sense,false), Span(9,10,List(11),feudal,feudal,false), Span(7,8,List(12, 13),reputation,(thing :ARG2-of repute-01),false)),Map(2 -> "China", 5 -> entertain-01, 12 -> thing, 8 -> make-01, 7 -> just, 1 -> name, 4 -> person, 11 -> feudal, 6 -> cheap, 9 -> somewhat, 0 -> country, 10 -> sense, 3 -> agree-01, 13 -> repute-01),Map(e -> entertain-01, n -> name, s2 -> somewhat, m2 -> make-01, j -> just, s -> sense, p -> person, a -> agree-01, t2 -> thing, r -> repute-01, c -> cheap, f -> feudal, c2 -> country))),[Ljava.lang.String;@2a693f59,Annotation([Ljava.lang.String;@3f4faf53,[Ljava.lang.String;@7fd50002,[Ljava.lang.String;@533bda92),Annotation([Ljava.lang.String;@304bb45b,[Ljava.lang.String;@723ca036,[Ledu.cmu.lti.nlp.amr.Dependency;@25be7b63),Annotation([Ljava.lang.String;@28dcca0c,[Ljava.lang.String;@45d84a20,[Ljava.lang.String;@52f27fbd),Annotation([Ljava.lang.String;@4c163e3,[Ljava.lang.String;@4a8355dd,[Ledu.cmu.lti.nlp.amr.Entity;@4d0d9fe7))
AMR:
(a / agree-01, ARG0, c2 / country)
(a / agree-01, ARG1, t2 / thing)
(a / agree-01, ARG6, j / just)
(c2 / country, name, n / name)
(e / entertain-01, ARG0, p / person)
(e / entertain-01, ARG1, t2 / thing)
(m2 / make-01, ARG0, c2 / country)
(m2 / make-01, ARG1, s / sense)
(m2 / make-01, ARG6, s2 / somewhat)
(n / name, op, "China")
(p / person, mod, c / cheap)
(r / repute-01, ARG1, f / feudal)
(r / repute-01, ARG2, t2 / thing)

WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 416,770 microseconds
Sentence: Their life looks glorious

Oracle Span 1:  glorious => glorious
Oracle Span 2:  looks => look-02
Spans:
Span 3-4:  glorious => glorious
Span 2-3:  looks => look-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  glorious => glorious
Oracle Span 2-3:  looks => look-02

Dependencies:
1	Their	_	PRP$	PRP$	_	2	poss	_	_
2	life	_	NN	NN	_	3	nsubj	_	_
3	looks	_	VBZ	VBZ	_	0	root	_	_
4	glorious	_	JJ	JJ	_	3	dobj	_	_

Oracle:
(l / look-02, ARG1, g / glorious)

Input(Some(Graph((look-02 :ARG1 glorious :ARG0 (live-01 :ARG0 they)),ArrayBuffer(Span(2,3,List(0),looks,look-02,false), Span(3,4,List(1),glorious,glorious,false)),Map(1 -> glorious, 0 -> look-02),Map(g -> glorious, l -> look-02))),[Ljava.lang.String;@c430e6c,Annotation([Ljava.lang.String;@312aa7c,[Ljava.lang.String;@536f2a7e,[Ljava.lang.String;@72bc6553),Annotation([Ljava.lang.String;@66982506,[Ljava.lang.String;@70cf32e3,[Ledu.cmu.lti.nlp.amr.Dependency;@5a59ca5e),Annotation([Ljava.lang.String;@4bdeaabb,[Ljava.lang.String;@6c4906d3,[Ljava.lang.String;@65987993),Annotation([Ljava.lang.String;@71075444,[Ljava.lang.String;@4f32a3ad,[Ledu.cmu.lti.nlp.amr.Entity;@6b695b06))
AMR:
(l / look-02, ARG1, g / glorious)

WARNING: makeIds can't find span Id: 0.1
Decoded in 6,213 microseconds
Sentence: a group of people of nine professions

Oracle Span 1:  group => group
Oracle Span 2:  nine => 9
Oracle Span 3:  professions => (have-org-role-91 :ARG2 profession)
Spans:
Span 1-2:  group => group
Span 5-6:  nine => 9
Span 6-7:  professions => (have-org-role-91 :ARG2 profession)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  group => group
Oracle Span 5-6:  nine => 9
Oracle Span 6-7:  professions => (have-org-role-91 :ARG2 profession)

Dependencies:
1	a	_	DT	DT	_	2	det	_	_
2	group	_	NN	NN	_	0	root	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	people	_	NNS	NNS	_	3	pobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	nine	_	CD	CD	_	7	num	_	_
7	professions	_	NNS	NNS	_	5	pobj	_	_

Oracle:
(h / have-org-role-91, ARG2, p2 / profession)
(p2 / profession, quant, 9 / 9)

Input(Some(Graph((group :consist-of (person :ARG0-of (have-org-role-91 :ARG2 (profession :quant 9)))),ArrayBuffer(Span(1,2,List(0),group,group,false), Span(6,7,List(1, 2),professions,(have-org-role-91 :ARG2 profession),false), Span(5,6,List(3),nine,9,false)),Map(2 -> profession, 1 -> have-org-role-91, 0 -> group, 3 -> 9),Map(h -> have-org-role-91, p2 -> profession, g -> group, 9 -> 9))),[Ljava.lang.String;@4d1bf319,Annotation([Ljava.lang.String;@6f53b8a,[Ljava.lang.String;@5c80cf32,[Ljava.lang.String;@7d900ecf),Annotation([Ljava.lang.String;@6f01b95f,[Ljava.lang.String;@4007f65e,[Ledu.cmu.lti.nlp.amr.Dependency;@1a245833),Annotation([Ljava.lang.String;@673fdbce,[Ljava.lang.String;@5965d37,[Ljava.lang.String;@7a5ceedd),Annotation([Ljava.lang.String;@4201c465,[Ljava.lang.String;@5b799640,[Ledu.cmu.lti.nlp.amr.Entity;@6cb107fd))
AMR:
(h / have-org-role-91, ARG1, g / group)
(h / have-org-role-91, ARG2, p2 / profession)
(p2 / profession, quant, 9 / 9)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
Decoded in 13,017 microseconds
Sentence: Life is hard.

Oracle Span 1:  hard => hard
Oracle Span 2:  Life => life
Spans:
Span 2-3:  hard => hard
Span 0-1:  Life => life

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  hard => hard
Oracle Span 0-1:  Life => life

Dependencies:
1	Life	_	NNP	NNP	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	cop	_	_
3	hard	_	JJ	JJ	_	0	root	_	_
4	.	_	.	.	_	3	punct	_	_

Oracle:
(h / hard, domain, l / life)

Input(Some(Graph((hard :domain life),ArrayBuffer(Span(2,3,List(0),hard,hard,false), Span(0,1,List(1),Life,life,false)),Map(1 -> life, 0 -> hard),Map(h -> hard, l -> life))),[Ljava.lang.String;@710636b0,Annotation([Ljava.lang.String;@3de8f619,[Ljava.lang.String;@2ab4bc72,[Ljava.lang.String;@4e5ed836),Annotation([Ljava.lang.String;@eadd4fb,[Ljava.lang.String;@740fb309,[Ledu.cmu.lti.nlp.amr.Dependency;@7bd7d6d6),Annotation([Ljava.lang.String;@43f02ef2,[Ljava.lang.String;@239a307b,[Ljava.lang.String;@2a8448fa),Annotation([Ljava.lang.String;@6f204a1a,[Ljava.lang.String;@2de56eb2,[Ledu.cmu.lti.nlp.amr.Entity;@5f8e8a9d))
AMR:
(h / hard, domain, l / life)

WARNING: makeIds can't find span Id: 0.0
Decoded in 5,338 microseconds
Sentence: :shocked:

Oracle Span 1:  shocked => shock-01
Spans:
Span 1-2:  shocked => shock-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  shocked => shock-01

Dependencies:
1	:	_	:	:	_	2	punct	_	_
2	shocked	_	VBN	VBN	_	0	root	_	_
3	:	_	:	:	_	2	punct	_	_

Oracle:


Input(Some(Graph(shock-01,ArrayBuffer(Span(1,2,List(0),shocked,shock-01,false)),Map(0 -> shock-01),Map(s -> shock-01))),[Ljava.lang.String;@5745ca0e,Annotation([Ljava.lang.String;@3ad83a66,[Ljava.lang.String;@3cce5371,[Ljava.lang.String;@17bffc17),Annotation([Ljava.lang.String;@6e535154,[Ljava.lang.String;@15a34df2,[Ledu.cmu.lti.nlp.amr.Dependency;@5b38c1ec),Annotation([Ljava.lang.String;@338fc1d8,[Ljava.lang.String;@4722ef0c,[Ljava.lang.String;@48e1f6c7),Annotation([Ljava.lang.String;@55cb6996,[Ljava.lang.String;@1807e3f6,[Ledu.cmu.lti.nlp.amr.Entity;@480d3575))
AMR:


Decoded in 2,551 microseconds
Sentence: That's normal, it has always been the case that a whore is heartless and a performer is unrighteous

Oracle Span 1:  always => always
Oracle Span 2:  and => and
Oracle Span 3:  heartless => heartless
Oracle Span 4:  normal => normal
Oracle Span 5:  performer => (person :ARG0-of perform-01)
Oracle Span 6:  That => that
Oracle Span 7:  unrighteous => (righteous :polarity -)
Oracle Span 8:  whore => whore
Spans:
Span 6-7:  always => always
Span 15-16:  and => and
Span 14-15:  heartless => heartless
Span 2-3:  normal => normal
Span 17-18:  performer => (person :ARG0-of perform-01)
Span 0-1:  That => that
Span 19-20:  unrighteous => (righteous :polarity -)
Span 12-13:  whore => whore

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Oracle Span 6-7:  always => always
Oracle Span 15-16:  and => and
Oracle Span 14-15:  heartless => heartless
Oracle Span 2-3:  normal => normal
Oracle Span 17-18:  performer => (person :ARG0-of perform-01)
Oracle Span 0-1:  That => that
Oracle Span 19-20:  unrighteous => (righteous :polarity -)
Oracle Span 12-13:  whore => whore

Dependencies:
1	That	_	DT	DT	_	3	nsubj	_	_
2	's	_	VBZ	VBZ	_	3	cop	_	_
3	normal	_	JJ	JJ	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	it	_	PRP	PRP	_	10	nsubj	_	_
6	has	_	VBZ	VBZ	_	10	aux	_	_
7	always	_	RB	RB	_	10	advmod	_	_
8	been	_	VBN	VBN	_	10	cop	_	_
9	the	_	DT	DT	_	10	det	_	_
10	case	_	NN	NN	_	3	conj	_	_
11	that	_	IN	IN	_	15	mark	_	_
12	a	_	DT	DT	_	13	det	_	_
13	whore	_	NN	NN	_	15	nsubj	_	_
14	is	_	VBZ	VBZ	_	15	cop	_	_
15	heartless	_	JJ	JJ	_	10	ccomp	_	_
16	and	_	CC	CC	_	3	cc	_	_
17	a	_	DT	DT	_	18	det	_	_
18	performer	_	NN	NN	_	20	nsubj	_	_
19	is	_	VBZ	VBZ	_	20	cop	_	_
20	unrighteous	_	JJ	JJ	_	3	conj	_	_

Oracle:
(h / heartless, domain, w2 / whore)
(n / normal, domain, t / that)
(p3 / perform-01, ARG0, p2 / person)
(r / righteous, domain, p2 / person)
(r / righteous, polarity, -)

Input(Some(Graph((multi-sentence :snt1 (normal :domain that) :snt2 (and :op (and :op (heartless :domain whore) :op (righteous :domain (person :ARG0-of perform-01) :polarity -) :time always))),ArrayBuffer(Span(2,3,List(0),normal,normal,false), Span(0,1,List(1),That,that,false), Span(15,16,List(2),and,and,false), Span(14,15,List(3),heartless,heartless,false), Span(12,13,List(4),whore,whore,false), Span(19,20,List(5, 6),unrighteous,(righteous :polarity -),false), Span(17,18,List(7, 8),performer,(person :ARG0-of perform-01),false), Span(6,7,List(9),always,always,false)),Map(2 -> and, 5 -> righteous, 8 -> perform-01, 7 -> person, 1 -> that, 4 -> whore, 6 -> -, 9 -> always, 0 -> normal, 3 -> heartless),Map(n -> normal, h -> heartless, t -> that, p2 -> person, a3 -> always, a -> and, r -> righteous, w2 -> whore, p3 -> perform-01))),[Ljava.lang.String;@f1da57d,Annotation([Ljava.lang.String;@194fad1,[Ljava.lang.String;@26abb146,[Ljava.lang.String;@72c8e7b),Annotation([Ljava.lang.String;@65f8f5ae,[Ljava.lang.String;@431cd9b2,[Ledu.cmu.lti.nlp.amr.Dependency;@38467116),Annotation([Ljava.lang.String;@5b7a7f33,[Ljava.lang.String;@790da477,[Ljava.lang.String;@5c7933ad),Annotation([Ljava.lang.String;@57bc27f5,[Ljava.lang.String;@5fb759d6,[Ledu.cmu.lti.nlp.amr.Entity;@4b8d604b))
AMR:
(a / and, op, h / heartless)
(a / and, op, n / normal)
(h / heartless, domain, w2 / whore)
(n / normal, calendar, a3 / always)
(n / normal, calendar, t / that)
(p3 / perform-01, ARG0, p2 / person)
(p3 / perform-01, ARG1, a / and)
(r / righteous, domain, p2 / person)
(r / righteous, polarity, -)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.2
Decoded in 136,444 microseconds
Sentence: They want money, not the face

Oracle Span 1:  face => face
Oracle Span 2:  money => money
Oracle Span 3:  They => they
Oracle Span 4:  want => want-01
Spans:
Span 6-7:  face => face
Span 2-3:  money => money
Span 0-1:  They => they
Span 1-2:  want => want-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 6-7:  face => face
Oracle Span 2-3:  money => money
Oracle Span 0-1:  They => they
Oracle Span 1-2:  want => want-01

Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	want	_	VBP	VBP	_	0	root	_	_
3	money	_	NN	NN	_	2	dobj	_	_
4	,	_	,	,	_	3	punct	_	_
5	not	_	RB	RB	_	7	neg	_	_
6	the	_	DT	DT	_	7	det	_	_
7	face	_	NN	NN	_	3	appos	_	_

Oracle:
(w / want-01, ARG0, t / they)
(w / want-01, ARG1, m / money)

Input(Some(Graph((contrast-01 :ARG1 (want-01 :ARG1 money :ARG0 they) :ARG2 (want-01 :polarity - :ARG1 face :ARG0 they)),ArrayBuffer(Span(1,2,List(0),want,want-01,false), Span(2,3,List(1),money,money,false), Span(0,1,List(2),They,they,false), Span(6,7,List(3),face,face,false)),Map(2 -> they, 1 -> money, 0 -> want-01, 3 -> face),Map(w -> want-01, t -> they, m -> money, f -> face))),[Ljava.lang.String;@5e7cd6cc,Annotation([Ljava.lang.String;@68c9d179,[Ljava.lang.String;@d554c5f,[Ljava.lang.String;@2dfaea86),Annotation([Ljava.lang.String;@15888343,[Ljava.lang.String;@33ecda92,[Ledu.cmu.lti.nlp.amr.Dependency;@14fc5f04),Annotation([Ljava.lang.String;@6e2829c7,[Ljava.lang.String;@3feb2dda,[Ljava.lang.String;@6a8658ff),Annotation([Ljava.lang.String;@1c742ed4,[Ljava.lang.String;@333d4a8c,[Ledu.cmu.lti.nlp.amr.Entity;@55de24cc))
AMR:
(w / want-01, ARG0, t / they)
(w / want-01, ARG1, m / money)
(w / want-01, ARG6, f / face)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 51,062 microseconds
Sentence: Have a look at the "wolf with glasses" near Ms. Fan, you will know the actress has no choice but drink with him or she will be forced out or even framed.

Oracle Span 1:  drink => drink-01
Oracle Span 2:  even => even
Oracle Span 3:  forced => force-01
Oracle Span 4:  framed => frame-02
Oracle Span 5:  glasses => glasses
Oracle Span 6:  has => have-condition-91
Oracle Span 7:  Have => have-03
Oracle Span 8:  know => know-01
Oracle Span 9:  look => look-01
Oracle Span 10:  Ms. Fan => (person :name (name :op "Fan" :op "Ms."))
Oracle Span 11:  near => near
Oracle Span 12:  no => -
Oracle Span 13:  or => or
Oracle Span 14:  out => out
Oracle Span 15:  wolf => wolf
Oracle Span 16:  you => you
NER Entity: (country :name (name :op "Ms."))
Spans:
Span 23-24:  drink => drink-01
Span 33-34:  even => even
Span 30-31:  forced => force-01
Span 34-35:  framed => frame-02
Span 8-9:  glasses => glasses
Span 19-20:  has => have-condition-91
Span 0-1:  Have => have-03
Span 16-17:  know => know-01
Span 2-3:  look => look-01
Span 11-13:  Ms. Fan => (person :name (name :op "Fan" :op "Ms."))
Span 10-11:  near => near
Span 20-21:  no => -
Span 26-27:  or => or
Span 31-32:  out => out
Span 6-7:  wolf => wolf
Span 14-15:  you => you

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Oracle Span 23-24:  drink => drink-01
Oracle Span 33-34:  even => even
Oracle Span 30-31:  forced => force-01
Oracle Span 34-35:  framed => frame-02
Oracle Span 8-9:  glasses => glasses
Oracle Span 19-20:  has => have-condition-91
Oracle Span 0-1:  Have => have-03
Oracle Span 16-17:  know => know-01
Oracle Span 2-3:  look => look-01
Oracle Span 11-13:  Ms. Fan => (person :name (name :op "Fan" :op "Ms."))
Oracle Span 10-11:  near => near
Oracle Span 20-21:  no => -
Oracle Span 26-27:  or => or
Oracle Span 31-32:  out => out
Oracle Span 6-7:  wolf => wolf
Oracle Span 14-15:  you => you

Dependencies:
1	Have	_	VBG	VBG	_	17	vmod	_	_
2	a	_	DT	DT	_	3	det	_	_
3	look	_	NN	NN	_	1	dobj	_	_
4	at	_	IN	IN	_	1	prep	_	_
5	the	_	DT	DT	_	7	det	_	_
6	"	_	``	``	_	7	punct	_	_
7	wolf	_	NN	NN	_	4	pobj	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	glasses	_	NNS	NNS	_	8	pobj	_	_
10	"	_	''	''	_	9	punct	_	_
11	near	_	IN	IN	_	9	prep	_	_
12	Ms.	_	NNP	NNP	_	13	nn	_	_
13	Fan	_	NNP	NNP	_	11	pobj	_	_
14	,	_	,	,	_	17	punct	_	_
15	you	_	PRP	PRP	_	17	nsubj	_	_
16	will	_	MD	MD	_	17	aux	_	_
17	know	_	VB	VB	_	0	root	_	_
18	the	_	DT	DT	_	19	det	_	_
19	actress	_	NN	NN	_	20	nsubj	_	_
20	has	_	VBZ	VBZ	_	17	dep	_	_
21	no	_	DT	DT	_	22	neg	_	_
22	choice	_	NN	NN	_	20	dobj	_	_
23	but	_	CC	CC	_	20	cc	_	_
24	drink	_	VBP	VBP	_	20	conj	_	_
25	with	_	IN	IN	_	24	prep	_	_
26	him	_	PRP	PRP	_	25	pobj	_	_
27	or	_	CC	CC	_	20	cc	_	_
28	she	_	PRP	PRP	_	31	nsubjpass	_	_
29	will	_	MD	MD	_	31	aux	_	_
30	be	_	VB	VB	_	31	auxpass	_	_
31	forced	_	VBN	VBN	_	20	conj	_	_
32	out	_	RP	RP	_	31	prt	_	_
33	or	_	CC	CC	_	31	cc	_	_
34	even	_	RB	RB	_	35	advmod	_	_
35	framed	_	VBN	VBN	_	31	conj	_	_
36	.	_	.	.	_	17	punct	_	_

Oracle:
(f / force-01, ARG2, o3 / out)
(f / force-01, polarity, - / -)
(f2 / frame-02, mod, e / even)
(h2 / have-03, ARG0, w / wolf)
(h2 / have-03, ARG1, g / glasses)
(h3 / have-condition-91, ARG1, o2 / or)
(l / look-01, ARG0, y2 / you)
(l / look-01, ARG1, w / wolf)
(n / near, op, p / person)
(n2 / name, op, "Fan")
(n2 / name, op, "Ms.")
(o2 / or, op, f / force-01)
(o2 / or, op, f2 / frame-02)
(p / person, name, n2 / name)
(w / wolf, location, n / near)

Input(Some(Graph((multi-sentence :snt1 (look-01 :ARG1 (wolf :ARG0-of (have-03 :ARG1 glasses) :location (near :op (person :name (name :op "Fan" :op "Ms.")))) :ARG0 you :mode imperative) :snt2 (know-01 :ARG1 (obligate-01 :ARG1 (person :ARG0-of act-01) :ARG2 (drink-01 :accompanier he :ARG0 person) :ARG2-of (have-condition-91 :ARG1 (or :op (frame-02 :mod even :polarity - :ARG1 person) :op (force-01 :ARG2 out :polarity - :ARG1 person)))) :ARG0 you)),ArrayBuffer(Span(11,13,List(0, 1, 2, 3),Ms. Fan,(person :name (name :op "Fan" :op "Ms.")),false), Span(20,21,List(4),no,-,false), Span(2,3,List(5),look,look-01,false), Span(6,7,List(6),wolf,wolf,false), Span(0,1,List(7),Have,have-03,false), Span(8,9,List(8),glasses,glasses,false), Span(10,11,List(9),near,near,false), Span(14,15,List(10),you,you,false), Span(16,17,List(11),know,know-01,false), Span(23,24,List(12),drink,drink-01,false), Span(26,27,List(13),or,or,false), Span(34,35,List(14),framed,frame-02,false), Span(33,34,List(15),even,even,false), Span(30,31,List(16),forced,force-01,false), Span(31,32,List(17),out,out,false), Span(19,20,List(18),has,have-condition-91,false)),Map(2 -> "Fan", 5 -> look-01, 12 -> drink-01, 15 -> even, 8 -> glasses, 18 -> have-condition-91, 7 -> have-03, 17 -> out, 1 -> name, 4 -> -, 11 -> know-01, 14 -> frame-02, 6 -> wolf, 9 -> near, 0 -> person, 16 -> force-01, 10 -> you, 3 -> "Ms.", 13 -> or),Map(e -> even, n -> near, w -> wolf, h2 -> have-03, k -> know-01, o3 -> out, d -> drink-01, g -> glasses, p -> person, o2 -> or, - -> -, h3 -> have-condition-91, f2 -> frame-02, l -> look-01, f -> force-01, y2 -> you, n2 -> name))),[Ljava.lang.String;@dc7df28,Annotation([Ljava.lang.String;@30f842ca,[Ljava.lang.String;@69c81773,[Ljava.lang.String;@4d14b6c2),Annotation([Ljava.lang.String;@7e990ed7,[Ljava.lang.String;@c05fddc,[Ledu.cmu.lti.nlp.amr.Dependency;@25df00a0),Annotation([Ljava.lang.String;@4d15107f,[Ljava.lang.String;@7b4c50bc,[Ljava.lang.String;@5884a914),Annotation([Ljava.lang.String;@50378a4,[Ljava.lang.String;@60f00693,[Ledu.cmu.lti.nlp.amr.Entity;@79207381))
AMR:
(d / drink-01, ARG1, k / know-01)
(f / force-01, ARG1, g / glasses)
(f / force-01, ARG5, o3 / out)
(f2 / frame-02, ARG1, f / force-01)
(f2 / frame-02, manner, e / even)
(h2 / have-03, ARG0, p / person)
(h2 / have-03, ARG1, l / look-01)
(h3 / have-condition-91, ARG1, - / -)
(k / know-01, ARG0, y2 / you)
(k / know-01, ARG1, h2 / have-03)
(l / look-01, ARG1, w / wolf)
(n / near, op, p / person)
(n2 / name, op, "Fan")
(n2 / name, op, "Ms.")
(o2 / or, op, d / drink-01)
(o2 / or, op, f / force-01)
(o2 / or, op, h3 / have-condition-91)
(p / person, name, n2 / name)

WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.1.2.0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1.2.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.2
Decoded in 1,116,177 microseconds
Sentence: SOB

Spans:

Langrangian relaxation converged after 1 iterations. Delta = 0.0

Dependencies:
1	SOB	_	NNP	NNP	_	0	root	_	_

Oracle:


Input(Some(Graph((son :poss bitch),ArrayBuffer(),Map(),Map())),[Ljava.lang.String;@491b9b8,Annotation([Ljava.lang.String;@1a4927d6,[Ljava.lang.String;@7a6d7e92,[Ljava.lang.String;@aba625),Annotation([Ljava.lang.String;@97e93f1,[Ljava.lang.String;@5a5a729f,[Ledu.cmu.lti.nlp.amr.Dependency;@4b520ea8),Annotation([Ljava.lang.String;@16150369,[Ljava.lang.String;@6b09fb41,[Ljava.lang.String;@624ea235),Annotation([Ljava.lang.String;@3932c79a,[Ljava.lang.String;@782859e,[Ledu.cmu.lti.nlp.amr.Entity;@23f5b5dc))
AMR:


Decoded in 2,123 microseconds
Sentence: It's ok as long as there is something to eat :loveliness:

Oracle Span 1:  eat => eat-01
Oracle Span 2:  loveliness => loveliness
Oracle Span 3:  something => something
Spans:
Span 10-11:  eat => eat-01
Span 12-13:  loveliness => loveliness
Span 8-9:  something => something

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 10-11:  eat => eat-01
Oracle Span 12-13:  loveliness => loveliness
Oracle Span 8-9:  something => something

Dependencies:
1	It	_	PRP	PRP	_	3	nsubjpass	_	_
2	's	_	VBZ	VBZ	_	3	auxpass	_	_
3	ok	_	VBN	VBN	_	0	root	_	_
4	as	_	RB	RB	_	5	advmod	_	_
5	long	_	RB	RB	_	3	advmod	_	_
6	as	_	IN	IN	_	8	mark	_	_
7	there	_	EX	EX	_	8	expl	_	_
8	is	_	VBZ	VBZ	_	5	advcl	_	_
9	something	_	NN	NN	_	8	nsubj	_	_
10	to	_	TO	TO	_	11	aux	_	_
11	eat	_	VB	VB	_	9	vmod	_	_
12	:	_	:	:	_	11	punct	_	_
13	loveliness	_	NNS	NNS	_	11	dobj	_	_
14	:	_	:	:	_	3	punct	_	_

Oracle:
(e / eat-01, ARG1, s2 / something)
(s2 / something, mod, l / loveliness)

Input(Some(Graph((okay-01 :condition (as-long-as :op (something :mod loveliness :ARG1-of eat-01))),ArrayBuffer(Span(8,9,List(0),something,something,false), Span(12,13,List(1),loveliness,loveliness,false), Span(10,11,List(2),eat,eat-01,false)),Map(2 -> eat-01, 1 -> loveliness, 0 -> something),Map(e -> eat-01, s2 -> something, l -> loveliness))),[Ljava.lang.String;@34bde49d,Annotation([Ljava.lang.String;@1b1cfb87,[Ljava.lang.String;@821330f,[Ljava.lang.String;@6f43c82),Annotation([Ljava.lang.String;@5db6b9cd,[Ljava.lang.String;@210ab13f,[Ledu.cmu.lti.nlp.amr.Dependency;@20b2475a),Annotation([Ljava.lang.String;@7857fe2,[Ljava.lang.String;@6f15d60e,[Ljava.lang.String;@1be2019a),Annotation([Ljava.lang.String;@29d80d2b,[Ljava.lang.String;@58e1d9d,[Ledu.cmu.lti.nlp.amr.Entity;@446a1e84))
AMR:
(e / eat-01, ARG0, s2 / something)
(e / eat-01, ARG1, l / loveliness)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 48,571 microseconds
Sentence: No one is easy. Life is like a show, you must have a look at the script to know how to perform

Oracle Span 1:  easy => easy
Oracle Span 2:  know => know-01
Oracle Span 3:  look => look-01
Oracle Span 4:  perform => (thing :manner-of perform-01)
Oracle Span 5:  script => script
Oracle Span 6:  show => show
Oracle Span 7:  you => you
Spans:
Span 3-4:  easy => easy
Span 20-21:  know => know-01
Span 15-16:  look => look-01
Span 23-24:  perform => (thing :manner-of perform-01)
Span 18-19:  script => script
Span 9-10:  show => show
Span 11-12:  you => you

 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of know in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of how in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of perform in position 23
Langrangian relaxation converged after 41 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of know in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of how in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of perform in position 23
Oracle Span 3-4:  easy => easy
Oracle Span 20-21:  know => know-01
Oracle Span 15-16:  look => look-01
Oracle Span 23-24:  perform => (thing :manner-of perform-01)
Oracle Span 18-19:  script => script
Oracle Span 9-10:  show => show
Oracle Span 11-12:  you => you

Dependencies:
1	No	_	DT	DT	_	2	neg	_	_
2	one	_	NN	NN	_	4	nsubj	_	_
3	is	_	VBZ	VBZ	_	4	cop	_	_
4	easy	_	JJ	JJ	_	0	root	_	_
5	.	_	.	.	_	4	punct	_	_
1	Life	_	NNP	NNP	_	2	nsubj	_	_
2	is	_	VBZ	VBZ	_	0	root	_	_
3	like	_	IN	IN	_	9	prep	_	_
4	a	_	DT	DT	_	5	det	_	_
5	show	_	NN	NN	_	3	pobj	_	_
6	,	_	,	,	_	9	punct	_	_
7	you	_	PRP	PRP	_	9	nsubj	_	_
8	must	_	MD	MD	_	9	aux	_	_
9	have	_	VB	VB	_	2	ccomp	_	_
10	a	_	DT	DT	_	11	det	_	_
11	look	_	NN	NN	_	9	dobj	_	_
12	at	_	IN	IN	_	9	prep	_	_
13	the	_	DT	DT	_	14	det	_	_
14	script	_	NN	NN	_	12	pobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	know	_	VB	VB	_	9	vmod	_	_
17	how	_	WRB	WRB	_	19	advmod	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	perform	_	VB	VB	_	16	ccomp	_	_

Oracle:
(k / know-01, ARG0, y / you)
(k / know-01, ARG1, t / thing)
(l2 / look-01, ARG0, y / you)
(l2 / look-01, ARG1, s2 / script)
(l2 / look-01, purpose, k / know-01)
(p2 / perform-01, manner, t / thing)

Input(Some(Graph((multi-sentence :snt1 (easy :domain no-one) :snt1 (resemble-01 :ARG1 live-01 :ARG2 show :ARG0-of (mean-01 :ARG1 (obligate-01 :ARG1 you :ARG2 (look-01 :purpose (know-01 :ARG1 (thing :manner-of perform-01) :ARG0 you) :ARG1 script :ARG0 you))))),ArrayBuffer(Span(3,4,List(0),easy,easy,false), Span(9,10,List(1),show,show,false), Span(11,12,List(2),you,you,false), Span(15,16,List(3),look,look-01,false), Span(20,21,List(4),know,know-01,false), Span(23,24,List(5, 6),perform,(thing :manner-of perform-01),false), Span(18,19,List(7),script,script,false)),Map(2 -> you, 5 -> thing, 7 -> script, 1 -> show, 4 -> know-01, 6 -> perform-01, 0 -> easy, 3 -> look-01),Map(e -> easy, s2 -> script, t -> thing, k -> know-01, p2 -> perform-01, s -> show, y -> you, l2 -> look-01))),[Ljava.lang.String;@4f0f2942,Annotation([Ljava.lang.String;@2657d4dd,[Ljava.lang.String;@5340477f,[Ljava.lang.String;@47caedad),Annotation([Ljava.lang.String;@7139992f,[Ljava.lang.String;@69504ae9,[Ledu.cmu.lti.nlp.amr.Dependency;@387a8303),Annotation([Ljava.lang.String;@28cda624,[Ljava.lang.String;@1500b2f3,[Ljava.lang.String;@7eecb5b8),Annotation([Ljava.lang.String;@126253fd,[Ljava.lang.String;@57db2b13,[Ledu.cmu.lti.nlp.amr.Entity;@475c9c31))
AMR:
(k / know-01, ARG0, s / show)
(k / know-01, ARG6, l2 / look-01)
(l2 / look-01, ARG0, e / easy)
(l2 / look-01, ARG1, s2 / script)
(l2 / look-01, ARG6, y / you)
(p2 / perform-01, ARG1, k / know-01)
(p2 / perform-01, manner, t / thing)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.1.1
WARNING: makeIds can't find span Id: 0.1.2.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.2.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.1.0
Decoded in 262,856 microseconds
Sentence: All are SB

Oracle Span 1:  All => all
Spans:
Span 0-1:  All => all

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  All => all

Dependencies:
1	All	_	DT	DT	_	3	nsubj	_	_
2	are	_	VBP	VBP	_	3	cop	_	_
3	SB	_	NNP	NNP	_	0	root	_	_

Oracle:


Input(Some(Graph((somebody :domain all),ArrayBuffer(Span(0,1,List(0),All,all,false)),Map(0 -> all),Map(a -> all))),[Ljava.lang.String;@5c86a017,Annotation([Ljava.lang.String;@5c7bfdc1,[Ljava.lang.String;@5276d6ee,[Ljava.lang.String;@71687585),Annotation([Ljava.lang.String;@1807f5a7,[Ljava.lang.String;@1b919693,[Ledu.cmu.lti.nlp.amr.Dependency;@7fb4f2a9),Annotation([Ljava.lang.String;@4dc27487,[Ljava.lang.String;@6a4f1a55,[Ljava.lang.String;@7dfd3c81),Annotation([Ljava.lang.String;@2584b82d,[Ljava.lang.String;@7bbc8656,[Ledu.cmu.lti.nlp.amr.Entity;@6933b6c6))
AMR:


WARNING: makeIds can't find span Id: 0.0
Decoded in 3,282 microseconds
Sentence: There are top scorer in the Imperial Examination in all 360 walks of life! What effort and endeavor behind those top scorer in the Imperial Examination! This is humiliating the word " bean vermicelli"!

Oracle Span 1:  360 => 360
Oracle Span 2:  all => all
Oracle Span 3:  and => and
Oracle Span 4:  bean => bean
Oracle Span 5:  behind => behind
Oracle Span 6:  effort => effort
Oracle Span 7:  endeavor => endeavor-01
Oracle Span 8:  humiliating => humiliate-01
Oracle Span 9:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Oracle Span 10:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Oracle Span 11:  life => life
Oracle Span 12:  scorer => (person :ARG0-of score-01)
Oracle Span 13:  scorer => (person :ARG0-of score-01)
Oracle Span 14:  This => this
Oracle Span 15:  top => top
Oracle Span 16:  top => top
Oracle Span 17:  vermicelli => vermicelli
Oracle Span 18:  walks => walk
Oracle Span 19:  word => word
NER Entity: (thing :name (name :op "Imperial" :op "Examination"))
NER Entity: (thing :name (name :op "Imperial" :op "Examination"))
Spans:
Span 10-11:  360 => 360
Span 9-10:  all => all
Span 17-18:  and => and
Span 34-35:  bean => bean
Span 19-20:  behind => behind
Span 16-17:  effort => effort
Span 18-19:  endeavor => endeavor-01
Span 30-31:  humiliating => humiliate-01
Span 6-8:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Span 25-27:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Span 13-14:  life => life
Span 3-4:  scorer => (person :ARG0-of score-01)
Span 22-23:  scorer => (person :ARG0-of score-01)
Span 28-29:  This => this
Span 2-3:  top => top
Span 21-22:  top => top
Span 35-36:  vermicelli => vermicelli
Span 11-12:  walks => walk
Span 32-33:  word => word

 *** WARNING: The dependency tree seems broken.  I can't find the head of What in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of effort in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of endeavor in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of top in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of scorer in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Imperial in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Examination in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of This in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliating in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of word in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of bean in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of vermicelli in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 37
Langrangian relaxation converged after 49 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of What in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of effort in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of endeavor in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of behind in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of those in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of top in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of scorer in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of in in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of Imperial in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of Examination in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of This in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of is in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of humiliating in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of word in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of bean in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of vermicelli in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of " in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 37
Oracle Span 10-11:  360 => 360
Oracle Span 9-10:  all => all
Oracle Span 17-18:  and => and
Oracle Span 34-35:  bean => bean
Oracle Span 19-20:  behind => behind
Oracle Span 16-17:  effort => effort
Oracle Span 18-19:  endeavor => endeavor-01
Oracle Span 30-31:  humiliating => humiliate-01
Oracle Span 6-8:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Oracle Span 25-27:  Imperial Examination => (thing :name (name :op "Examination" :op "Imperial"))
Oracle Span 13-14:  life => life
Oracle Span 3-4:  scorer => (person :ARG0-of score-01)
Oracle Span 22-23:  scorer => (person :ARG0-of score-01)
Oracle Span 28-29:  This => this
Oracle Span 2-3:  top => top
Oracle Span 21-22:  top => top
Oracle Span 35-36:  vermicelli => vermicelli
Oracle Span 11-12:  walks => walk
Oracle Span 32-33:  word => word

Dependencies:
1	There	_	EX	EX	_	2	expl	_	_
2	are	_	VBP	VBP	_	0	root	_	_
3	top	_	JJ	JJ	_	4	amod	_	_
4	scorer	_	NN	NN	_	2	nsubj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Imperial	_	NNP	NNP	_	8	nn	_	_
8	Examination	_	NNP	NNP	_	5	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	all	_	DT	DT	_	12	det	_	_
11	360	_	CD	CD	_	12	num	_	_
12	walks	_	NNS	NNS	_	9	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	life	_	NN	NN	_	13	pobj	_	_
15	!	_	.	.	_	2	punct	_	_
1	What	_	WP	WP	_	0	root	_	_
2	effort	_	NN	NN	_	1	dep	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	endeavor	_	NN	NN	_	2	conj	_	_
5	behind	_	IN	IN	_	1	prep	_	_
6	those	_	DT	DT	_	8	det	_	_
7	top	_	JJ	JJ	_	8	amod	_	_
8	scorer	_	NN	NN	_	5	pobj	_	_
9	in	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	Imperial	_	NNP	NNP	_	12	nn	_	_
12	Examination	_	NNP	NNP	_	9	pobj	_	_
13	!	_	.	.	_	1	punct	_	_
1	This	_	DT	DT	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	aux	_	_
3	humiliating	_	VBG	VBG	_	0	root	_	_
4	the	_	DT	DT	_	8	det	_	_
5	word	_	NN	NN	_	8	nn	_	_
6	"	_	''	''	_	8	punct	_	_
7	bean	_	NN	NN	_	8	nn	_	_
8	vermicelli	_	NN	NN	_	3	dobj	_	_
9	"	_	''	''	_	3	punct	_	_
10	!	_	.	.	_	3	punct	_	_

Oracle:
(a2 / and, location, b / behind)
(a2 / and, op, e / effort)
(a2 / and, op, e2 / endeavor-01)
(b / behind, op, p2 / person)
(h / humiliate-01, ARG0, t5 / this)
(h / humiliate-01, ARG1, w3 / word)
(n / name, op, "Examination")
(n / name, op, "Imperial")
(n2 / name, op, "Examination")
(n2 / name, op, "Imperial")
(p / person, location, w / walk)
(s / score-01, ARG0, p / person)
(s / score-01, ARG1, t / top)
(s / score-01, time, t2 / thing)
(s2 / score-01, ARG0, p2 / person)
(s2 / score-01, ARG1, t6 / top)
(s2 / score-01, time, t4 / thing)
(t2 / thing, name, n / name)
(t4 / thing, name, n2 / name)
(v / vermicelli, mod, b2 / bean)
(w / walk, mod, l / life)
(w / walk, quant, 3 / 360)
(w / walk, quant, a / all)
(w3 / word, mod, v / vermicelli)

Input(Some(Graph((multi-sentence :snt1 (person :location (walk :mod life :quant all :quant 360) :ARG0-of (score-01 :time (thing :name (name :op "Examination" :op "Imperial")) :ARG1 top)) :snt2 (and :degree so :location (behind :op (person :ARG0-of (score-01 :time (thing :name (name :op "Examination" :op "Imperial")) :ARG1 top))) :op endeavor-01 :op effort) :snt3 (humiliate-01 :ARG1 (word :mod (vermicelli :mod bean)) :ARG0 this)),ArrayBuffer(Span(6,8,List(0, 1, 2, 3),Imperial Examination,(thing :name (name :op "Examination" :op "Imperial")),false), Span(25,27,List(4, 5, 6, 7),Imperial Examination,(thing :name (name :op "Examination" :op "Imperial")),false), Span(3,4,List(8, 9),scorer,(person :ARG0-of score-01),false), Span(2,3,List(10),top,top,false), Span(11,12,List(11),walks,walk,false), Span(13,14,List(12),life,life,false), Span(9,10,List(13),all,all,false), Span(10,11,List(14),360,360,false), Span(17,18,List(15),and,and,false), Span(19,20,List(16),behind,behind,false), Span(22,23,List(17, 18),scorer,(person :ARG0-of score-01),false), Span(21,22,List(19),top,top,false), Span(18,19,List(20),endeavor,endeavor-01,false), Span(16,17,List(21),effort,effort,false), Span(30,31,List(22),humiliating,humiliate-01,false), Span(32,33,List(23),word,word,false), Span(35,36,List(24),vermicelli,vermicelli,false), Span(34,35,List(25),bean,bean,false), Span(28,29,List(26),This,this,false)),Map(2 -> "Examination", 5 -> name, 12 -> life, 15 -> and, 8 -> person, 21 -> effort, 18 -> score-01, 24 -> vermicelli, 7 -> "Imperial", 17 -> person, 1 -> name, 23 -> word, 26 -> this, 4 -> thing, 11 -> walk, 14 -> 360, 20 -> endeavor-01, 6 -> "Examination", 9 -> score-01, 0 -> thing, 22 -> humiliate-01, 16 -> behind, 19 -> top, 10 -> top, 3 -> "Imperial", 25 -> bean, 13 -> all),Map(e -> effort, w -> walk, n -> name, h -> humiliate-01, t4 -> thing, s2 -> score-01, b -> behind, t -> top, b2 -> bean, e2 -> endeavor-01, p2 -> person, w3 -> word, t6 -> top, s -> score-01, v -> vermicelli, p -> person, a -> all, t2 -> thing, t5 -> this, a2 -> and, l -> life, 3 -> 360, n2 -> name))),[Ljava.lang.String;@7d3e8655,Annotation([Ljava.lang.String;@7dfb0c0f,[Ljava.lang.String;@626abbd0,[Ljava.lang.String;@169bb4dd),Annotation([Ljava.lang.String;@1f9e9475,[Ljava.lang.String;@3aa078fd,[Ledu.cmu.lti.nlp.amr.Dependency;@d23e042),Annotation([Ljava.lang.String;@46d59067,[Ljava.lang.String;@2d0399f4,[Ljava.lang.String;@14dd7b39),Annotation([Ljava.lang.String;@66ea810,[Ljava.lang.String;@6cd24612,[Ledu.cmu.lti.nlp.amr.Entity;@5dafbe45))
AMR:
(a / all, op, h / humiliate-01)
(a2 / and, op, e / effort)
(a2 / and, op, e2 / endeavor-01)
(e2 / endeavor-01, ARG0, p / person)
(e2 / endeavor-01, ARG1, t6 / top)
(e2 / endeavor-01, ARG6, b / behind)
(h / humiliate-01, ARG0, p / person)
(h / humiliate-01, ARG1, t5 / this)
(h / humiliate-01, ARG2, b2 / bean)
(h / humiliate-01, ARG6, w3 / word)
(n / name, op, "Examination")
(n / name, op, "Imperial")
(n2 / name, op, "Examination")
(n2 / name, op, "Imperial")
(p / person, mod, t / top)
(s / score-01, ARG0, p / person)
(s / score-01, ARG1, t2 / thing)
(s2 / score-01, ARG0, p2 / person)
(s2 / score-01, ARG1, t6 / top)
(t2 / thing, name, n / name)
(t4 / thing, mod, t5 / this)
(t4 / thing, name, n2 / name)
(v / vermicelli, mod, b2 / bean)
(w / walk, mod, a / all)
(w / walk, mod, l / life)
(w / walk, quant, 3 / 360)

WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 1,839,876 microseconds
Sentence: Haha

Oracle Span 1:  Haha => haha
Spans:
Span 0-1:  Haha => haha

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Haha => haha

Dependencies:
1	Haha	_	NNP	NNP	_	0	root	_	_

Oracle:


Input(Some(Graph((haha :mode expressive),ArrayBuffer(Span(0,1,List(0),Haha,haha,false)),Map(0 -> haha),Map(h -> haha))),[Ljava.lang.String;@2254127a,Annotation([Ljava.lang.String;@51891008,[Ljava.lang.String;@2f953efd,[Ljava.lang.String;@f68f0dc),Annotation([Ljava.lang.String;@d2de489,[Ljava.lang.String;@14bdbc74,[Ledu.cmu.lti.nlp.amr.Dependency;@12591ac8),Annotation([Ljava.lang.String;@5a7fe64f,[Ljava.lang.String;@38145825,[Ljava.lang.String;@41330d4f),Annotation([Ljava.lang.String;@1b66c0fb,[Ljava.lang.String;@3e0e1046,[Ledu.cmu.lti.nlp.amr.Entity;@24c1b2d2))
AMR:


Decoded in 2,158 microseconds
Sentence: Overdoing

Oracle Span 1:  Overdoing => overdo-01
Spans:
Span 0-1:  Overdoing => overdo-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Overdoing => overdo-01

Dependencies:
1	Overdoing	_	NN	NN	_	0	root	_	_

Oracle:


Input(Some(Graph(overdo-01,ArrayBuffer(Span(0,1,List(0),Overdoing,overdo-01,false)),Map(0 -> overdo-01),Map(o -> overdo-01))),[Ljava.lang.String;@7dc19a70,Annotation([Ljava.lang.String;@508dec2b,[Ljava.lang.String;@1e4f4a5c,[Ljava.lang.String;@37313c65),Annotation([Ljava.lang.String;@465232e9,[Ljava.lang.String;@798162bc,[Ledu.cmu.lti.nlp.amr.Dependency;@1df8da7a),Annotation([Ljava.lang.String;@23941fb4,[Ljava.lang.String;@7486b455,[Ljava.lang.String;@660acfb),Annotation([Ljava.lang.String;@5d908d47,[Ljava.lang.String;@5efa40fe,[Ledu.cmu.lti.nlp.amr.Entity;@1f9f6368))
AMR:


Decoded in 2,527 microseconds
Sentence: The reality

Oracle Span 1:  reality => reality
Spans:
Span 1-2:  reality => reality

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  reality => reality

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	reality	_	NN	NN	_	0	root	_	_

Oracle:


Input(Some(Graph(reality,ArrayBuffer(Span(1,2,List(0),reality,reality,false)),Map(0 -> reality),Map(r -> reality))),[Ljava.lang.String;@1c9b0314,Annotation([Ljava.lang.String;@45385f75,[Ljava.lang.String;@49c90a9c,[Ljava.lang.String;@2d29b4ee),Annotation([Ljava.lang.String;@69ee81fc,[Ljava.lang.String;@6e2aa843,[Ledu.cmu.lti.nlp.amr.Dependency;@6f36c2f0),Annotation([Ljava.lang.String;@f58853c,[Ljava.lang.String;@1224144a,[Ljava.lang.String;@29f7cefd),Annotation([Ljava.lang.String;@700fb871,[Ljava.lang.String;@3b35a229,[Ledu.cmu.lti.nlp.amr.Entity;@9816741))
AMR:


Decoded in 2,683 microseconds
Sentence: Shoot those hooligans

Oracle Span 1:  hooligans => hooligan
Oracle Span 2:  Shoot => shoot-02
Spans:
Span 2-3:  hooligans => hooligan
Span 0-1:  Shoot => shoot-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 2-3:  hooligans => hooligan
Oracle Span 0-1:  Shoot => shoot-02

Dependencies:
1	Shoot	_	VB	VB	_	0	root	_	_
2	those	_	DT	DT	_	3	det	_	_
3	hooligans	_	NNS	NNS	_	1	dobj	_	_

Oracle:
(s / shoot-02, ARG1, h / hooligan)

Input(Some(Graph((shoot-02 :ARG1 (hooligan :mod that) :ARG0 you :mode imperative),ArrayBuffer(Span(0,1,List(0),Shoot,shoot-02,false), Span(2,3,List(1),hooligans,hooligan,false)),Map(1 -> hooligan, 0 -> shoot-02),Map(h -> hooligan, s -> shoot-02))),[Ljava.lang.String;@1e16c0aa,Annotation([Ljava.lang.String;@13d73f29,[Ljava.lang.String;@565f390,[Ljava.lang.String;@7dc3712),Annotation([Ljava.lang.String;@2f67a4d3,[Ljava.lang.String;@5e3f861,[Ledu.cmu.lti.nlp.amr.Dependency;@2fb0623e),Annotation([Ljava.lang.String;@49b2a47d,[Ljava.lang.String;@5be1d0a4,[Ljava.lang.String;@415b0b49),Annotation([Ljava.lang.String;@6d5620ce,[Ljava.lang.String;@311bf055,[Ledu.cmu.lti.nlp.amr.Entity;@642a7222))
AMR:
(s / shoot-02, ARG1, h / hooligan)

WARNING: makeIds can't find span Id: 0.2
Decoded in 4,802 microseconds
Sentence: Cheap performers

Oracle Span 1:  Cheap => cheap
Oracle Span 2:  performers => (person :ARG0-of perform-01)
Spans:
Span 0-1:  Cheap => cheap
Span 1-2:  performers => (person :ARG0-of perform-01)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Cheap => cheap
Oracle Span 1-2:  performers => (person :ARG0-of perform-01)

Dependencies:
1	Cheap	_	JJ	JJ	_	2	amod	_	_
2	performers	_	NNS	NNS	_	0	root	_	_

Oracle:
(p2 / perform-01, ARG0, p / person)
(p2 / perform-01, mod, c / cheap)

Input(Some(Graph((person :ARG0-of (perform-01 :mod cheap)),ArrayBuffer(Span(1,2,List(0, 1),performers,(person :ARG0-of perform-01),false), Span(0,1,List(2),Cheap,cheap,false)),Map(2 -> cheap, 1 -> perform-01, 0 -> person),Map(p2 -> perform-01, p -> person, c -> cheap))),[Ljava.lang.String;@7d322cad,Annotation([Ljava.lang.String;@21be3395,[Ljava.lang.String;@4f49f6af,[Ljava.lang.String;@78452606),Annotation([Ljava.lang.String;@147e2ae7,[Ljava.lang.String;@448c8166,[Ledu.cmu.lti.nlp.amr.Dependency;@4470fbd6),Annotation([Ljava.lang.String;@15d49048,[Ljava.lang.String;@7098b907,[Ljava.lang.String;@503f91c3),Annotation([Ljava.lang.String;@13526e59,[Ljava.lang.String;@2235eaab,[Ledu.cmu.lti.nlp.amr.Entity;@17503f6b))
AMR:
(p2 / perform-01, ARG0, p / person)
(p2 / perform-01, ARG1, c / cheap)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 6,232 microseconds
Sentence: Cheap performers!

Oracle Span 1:  Cheap => cheap
Oracle Span 2:  performers => (person :ARG0-of perform-01)
Spans:
Span 0-1:  Cheap => cheap
Span 1-2:  performers => (person :ARG0-of perform-01)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Cheap => cheap
Oracle Span 1-2:  performers => (person :ARG0-of perform-01)

Dependencies:
1	Cheap	_	JJ	JJ	_	2	amod	_	_
2	performers	_	NNS	NNS	_	0	root	_	_
3	!	_	.	.	_	2	punct	_	_

Oracle:
(p / person, mod, c / cheap)
(p2 / perform-01, ARG0, p / person)

Input(Some(Graph((person :mod cheap :ARG0-of perform-01),ArrayBuffer(Span(1,2,List(0, 1),performers,(person :ARG0-of perform-01),false), Span(0,1,List(2),Cheap,cheap,false)),Map(2 -> cheap, 1 -> perform-01, 0 -> person),Map(p2 -> perform-01, p -> person, c -> cheap))),[Ljava.lang.String;@3bcd05cb,Annotation([Ljava.lang.String;@3b6d844d,[Ljava.lang.String;@36804139,[Ljava.lang.String;@20bd8be5),Annotation([Ljava.lang.String;@730d2164,[Ljava.lang.String;@24959ca4,[Ledu.cmu.lti.nlp.amr.Dependency;@10289886),Annotation([Ljava.lang.String;@5c86dbc5,[Ljava.lang.String;@461ad730,[Ljava.lang.String;@4ee203eb),Annotation([Ljava.lang.String;@1a5a4e19,[Ljava.lang.String;@7068e664,[Ledu.cmu.lti.nlp.amr.Entity;@60db1c0e))
AMR:
(p2 / perform-01, ARG0, p / person)
(p2 / perform-01, ARG1, c / cheap)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 8,271 microseconds
Sentence: The entertainment circle is a dirty one, all men in it are birds and beasts and scum

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  beasts => beast
Oracle Span 4:  birds => bird
Oracle Span 5:  circle => circle
Oracle Span 6:  dirty => dirty
Oracle Span 7:  entertainment => entertain-01
Oracle Span 8:  it => it
Oracle Span 9:  men => man
Oracle Span 10:  scum => scum
Spans:
Span 8-9:  all => all
Span 14-15:  and => and
Span 15-16:  beasts => beast
Span 13-14:  birds => bird
Span 2-3:  circle => circle
Span 5-6:  dirty => dirty
Span 1-2:  entertainment => entertain-01
Span 11-12:  it => it
Span 9-10:  men => man
Span 17-18:  scum => scum

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 8-9:  all => all
Oracle Span 14-15:  and => and
Oracle Span 15-16:  beasts => beast
Oracle Span 13-14:  birds => bird
Oracle Span 2-3:  circle => circle
Oracle Span 5-6:  dirty => dirty
Oracle Span 1-2:  entertainment => entertain-01
Oracle Span 11-12:  it => it
Oracle Span 9-10:  men => man
Oracle Span 17-18:  scum => scum

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	entertainment	_	NN	NN	_	3	nn	_	_
3	circle	_	NN	NN	_	7	nsubj	_	_
4	is	_	VBZ	VBZ	_	7	cop	_	_
5	a	_	DT	DT	_	7	det	_	_
6	dirty	_	JJ	JJ	_	7	amod	_	_
7	one	_	NN	NN	_	0	root	_	_
8	,	_	,	,	_	7	punct	_	_
9	all	_	DT	DT	_	10	det	_	_
10	men	_	NNS	NNS	_	7	appos	_	_
11	in	_	IN	IN	_	14	mark	_	_
12	it	_	PRP	PRP	_	14	nsubj	_	_
13	are	_	VBP	VBP	_	14	cop	_	_
14	birds	_	NNS	NNS	_	10	dep	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	beasts	_	NNS	NNS	_	14	conj	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	scum	_	NN	NN	_	14	conj	_	_

Oracle:
(a2 / and, domain, m / man)
(a2 / and, op, b / bird)
(a2 / and, op, b2 / beast)
(a2 / and, op, s / scum)
(c / circle, mod, e / entertain-01)
(d / dirty, domain, c / circle)
(m / man, location, i / it)
(m / man, quant, a3 / all)

Input(Some(Graph((multi-sentence :snt1 (dirty :domain (circle :mod entertain-01)) :snt2 (and :domain (man :location it :quant all) :op scum :op beast :op bird)),ArrayBuffer(Span(5,6,List(0),dirty,dirty,false), Span(2,3,List(1),circle,circle,false), Span(14,15,List(2),and,and,false), Span(9,10,List(3),men,man,false), Span(11,12,List(4),it,it,false), Span(8,9,List(5),all,all,false), Span(17,18,List(6),scum,scum,false), Span(15,16,List(7),beasts,beast,false), Span(13,14,List(8),birds,bird,false), Span(1,2,List(9),entertainment,entertain-01,false)),Map(2 -> and, 5 -> all, 8 -> bird, 7 -> beast, 1 -> circle, 4 -> it, 6 -> scum, 9 -> entertain-01, 0 -> dirty, 3 -> man),Map(e -> entertain-01, b -> bird, b2 -> beast, s -> scum, a3 -> all, m -> man, d -> dirty, i -> it, a2 -> and, c -> circle))),[Ljava.lang.String;@3e78b6a5,Annotation([Ljava.lang.String;@769a1df5,[Ljava.lang.String;@41f69e84,[Ljava.lang.String;@7975d1d8),Annotation([Ljava.lang.String;@2438dcd,[Ljava.lang.String;@24105dc5,[Ledu.cmu.lti.nlp.amr.Dependency;@5167f57d),Annotation([Ljava.lang.String;@64b0598,[Ljava.lang.String;@18f8cd79,[Ljava.lang.String;@3e2055d6),Annotation([Ljava.lang.String;@50029372,[Ljava.lang.String;@e3b3b2f,[Ledu.cmu.lti.nlp.amr.Entity;@50f6ac94))
AMR:
(a2 / and, op, b / bird)
(a2 / and, op, b2 / beast)
(a2 / and, op, m / man)
(a2 / and, op, s / scum)
(d / dirty, poss, s / scum)
(e / entertain-01, ARG0, c / circle)
(e / entertain-01, ARG1, m / man)
(m / man, calendar, i / it)
(m / man, quant, a3 / all)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.3.1
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 103,835 microseconds
Sentence: Pity them, but who is to blame? Those female stars are not easy

Oracle Span 1:  blame => blame-01
Oracle Span 2:  but => contrast-01
Oracle Span 3:  easy => easy
Oracle Span 4:  female => female
Oracle Span 5:  Pity => pity-01
Oracle Span 6:  stars => star-01
Spans:
Span 7-8:  blame => blame-01
Span 3-4:  but => contrast-01
Span 14-15:  easy => easy
Span 10-11:  female => female
Span 0-1:  Pity => pity-01
Span 11-12:  stars => star-01

 *** WARNING: The dependency tree seems broken.  I can't find the head of Those in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of female in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of easy in position 14
Langrangian relaxation converged after 60 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of Those in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of female in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of stars in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of are in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of not in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of easy in position 14
Oracle Span 7-8:  blame => blame-01
Oracle Span 3-4:  but => contrast-01
Oracle Span 14-15:  easy => easy
Oracle Span 10-11:  female => female
Oracle Span 0-1:  Pity => pity-01
Oracle Span 11-12:  stars => star-01

Dependencies:
1	Pity	_	RB	RB	_	2	dep	_	_
2	them	_	PRP	PRP	_	0	root	_	_
3	,	_	,	,	_	2	punct	_	_
4	but	_	IN	IN	_	2	prep	_	_
5	who	_	WP	WP	_	6	nsubj	_	_
6	is	_	VBZ	VBZ	_	4	pcomp	_	_
7	to	_	TO	TO	_	8	aux	_	_
8	blame	_	VB	VB	_	6	xcomp	_	_
9	?	_	.	.	_	2	punct	_	_
1	Those	_	DT	DT	_	3	det	_	_
2	female	_	JJ	JJ	_	3	amod	_	_
3	stars	_	NNS	NNS	_	6	nsubj	_	_
4	are	_	VBP	VBP	_	6	cop	_	_
5	not	_	RB	RB	_	6	neg	_	_
6	easy	_	JJ	JJ	_	0	root	_	_

Oracle:
(c / contrast-01, ARG1, p / pity-01)
(c / contrast-01, ARG2, b2 / blame-01)
(e / easy, domain, f2 / female)
(s2 / star-01, ARG1, f2 / female)

Input(Some(Graph((multi-sentence :snt2 (easy :domain (female :ARG1-of star-01 :mod that) :polarity -) :snt1 (contrast-01 :ARG2 (blame-01 :ARG1 amr-unknown) :ARG1 (pity-01 :ARG1 they))),ArrayBuffer(Span(14,15,List(0),easy,easy,false), Span(10,11,List(1),female,female,false), Span(11,12,List(2),stars,star-01,false), Span(3,4,List(3),but,contrast-01,false), Span(7,8,List(4),blame,blame-01,false), Span(0,1,List(5),Pity,pity-01,false)),Map(2 -> star-01, 5 -> pity-01, 1 -> female, 4 -> blame-01, 0 -> easy, 3 -> contrast-01),Map(e -> easy, s2 -> star-01, b2 -> blame-01, p -> pity-01, c -> contrast-01, f2 -> female))),[Ljava.lang.String;@6cc4cdb9,Annotation([Ljava.lang.String;@28194a50,[Ljava.lang.String;@7f2cfe3f,[Ljava.lang.String;@1a5b6f42),Annotation([Ljava.lang.String;@5038d0b5,[Ljava.lang.String;@32115b28,[Ledu.cmu.lti.nlp.amr.Dependency;@2ad48653),Annotation([Ljava.lang.String;@6bb4dd34,[Ljava.lang.String;@7d9f158f,[Ljava.lang.String;@45efd90f),Annotation([Ljava.lang.String;@4b8729ff,[Ljava.lang.String;@61710c6,[Ledu.cmu.lti.nlp.amr.Entity;@3214ee6))
AMR:
(b2 / blame-01, ARG1, f2 / female)
(c / contrast-01, ARG1, b2 / blame-01)
(p / pity-01, ARG1, c / contrast-01)
(s2 / star-01, ARG0, f2 / female)
(s2 / star-01, ARG1, e / easy)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 213,900 microseconds
Sentence: Everybody is doing this, how can you make money if you don't do this

Oracle Span 1:  can => possible
Oracle Span 2:  do => do-02
Oracle Span 3:  doing => do-02
Oracle Span 4:  Everybody => everybody
Oracle Span 5:  make => make-05
Oracle Span 6:  money => money
Oracle Span 7:  this => this
Oracle Span 8:  you => you
Spans:
Span 6-7:  can => possible
Span 12-13:  do => do-02
Span 2-3:  doing => do-02
Span 0-1:  Everybody => everybody
Span 8-9:  make => make-05
Span 9-10:  money => money
Span 3-4:  this => this
Span 7-8:  you => you

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 6-7:  can => possible
Oracle Span 12-13:  do => do-02
Oracle Span 2-3:  doing => do-02
Oracle Span 0-1:  Everybody => everybody
Oracle Span 8-9:  make => make-05
Oracle Span 9-10:  money => money
Oracle Span 3-4:  this => this
Oracle Span 7-8:  you => you

Dependencies:
1	Everybody	_	WDT	WDT	_	3	nsubj	_	_
2	is	_	VBZ	VBZ	_	3	aux	_	_
3	doing	_	VBG	VBG	_	9	dep	_	_
4	this	_	DT	DT	_	3	dobj	_	_
5	,	_	,	,	_	9	punct	_	_
6	how	_	WRB	WRB	_	9	advmod	_	_
7	can	_	MD	MD	_	9	aux	_	_
8	you	_	PRP	PRP	_	9	nsubj	_	_
9	make	_	VB	VB	_	0	root	_	_
10	money	_	NN	NN	_	9	dobj	_	_
11	if	_	IN	IN	_	15	mark	_	_
12	you	_	PRP	PRP	_	15	nsubj	_	_
13	do	_	VBP	VBP	_	15	aux	_	_
14	n't	_	RB	RB	_	15	neg	_	_
15	do	_	VB	VB	_	9	advcl	_	_
16	this	_	DT	DT	_	15	dobj	_	_

Oracle:
(d / do-02, ARG0, e2 / everybody)
(d / do-02, ARG1, t / this)
(d2 / do-02, ARG0, y / you)
(d2 / do-02, ARG1, t / this)
(m / make-05, ARG0, y / you)
(m / make-05, ARG1, m2 / money)
(m / make-05, condition, d2 / do-02)
(p2 / possible, domain, m / make-05)

Input(Some(Graph((multi-sentence :snt1 (do-02 :ARG1 this :ARG0 everybody) :snt2 (possible :domain (make-05 :condition (do-02 :polarity - :ARG0 you :ARG1 this) :manner amr-unknown :ARG1 money :ARG0 you))),ArrayBuffer(Span(2,3,List(0),doing,do-02,false), Span(3,4,List(1),this,this,false), Span(0,1,List(2),Everybody,everybody,false), Span(6,7,List(3),can,possible,false), Span(8,9,List(4),make,make-05,false), Span(12,13,List(5),do,do-02,false), Span(9,10,List(6),money,money,false), Span(7,8,List(7),you,you,false)),Map(2 -> everybody, 5 -> do-02, 7 -> you, 1 -> this, 4 -> make-05, 6 -> money, 0 -> do-02, 3 -> possible),Map(t -> this, m2 -> money, p2 -> possible, e2 -> everybody, m -> make-05, d -> do-02, y -> you, d2 -> do-02))),[Ljava.lang.String;@383dc82c,Annotation([Ljava.lang.String;@4a07d605,[Ljava.lang.String;@74287ea3,[Ljava.lang.String;@7d7758be),Annotation([Ljava.lang.String;@2bdd8394,[Ljava.lang.String;@5f9edf14,[Ledu.cmu.lti.nlp.amr.Dependency;@68746f22),Annotation([Ljava.lang.String;@2f01783a,[Ljava.lang.String;@68878f6d,[Ljava.lang.String;@41488b16),Annotation([Ljava.lang.String;@a8ef162,[Ljava.lang.String;@2eea88a1,[Ledu.cmu.lti.nlp.amr.Entity;@7ac296f6))
AMR:
(d / do-02, ARG0, y / you)
(d / do-02, ARG1, t / this)
(d / do-02, ARG6, e2 / everybody)
(d2 / do-02, ARG1, m / make-05)
(m / make-05, ARG0, y / you)
(m / make-05, ARG1, m2 / money)
(p2 / possible, domain, m / make-05)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 177,585 microseconds
Sentence: She is a proud woman in front of others but is in melancholy mood when staying alone ...

Oracle Span 1:  alone => alone
Oracle Span 2:  but => contrast-01
Oracle Span 3:  front => front
Oracle Span 4:  melancholy => melancholy
Oracle Span 5:  mood => mood
Oracle Span 6:  others => (person :mod other)
Oracle Span 7:  proud => proud-41
Oracle Span 8:  staying => stay-01
Oracle Span 9:  woman => woman
Spans:
Span 16-17:  alone => alone
Span 9-10:  but => contrast-01
Span 6-7:  front => front
Span 12-13:  melancholy => melancholy
Span 13-14:  mood => mood
Span 8-9:  others => (person :mod other)
Span 3-4:  proud => proud-41
Span 15-16:  staying => stay-01
Span 4-5:  woman => woman

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 16-17:  alone => alone
Oracle Span 9-10:  but => contrast-01
Oracle Span 6-7:  front => front
Oracle Span 12-13:  melancholy => melancholy
Oracle Span 13-14:  mood => mood
Oracle Span 8-9:  others => (person :mod other)
Oracle Span 3-4:  proud => proud-41
Oracle Span 15-16:  staying => stay-01
Oracle Span 4-5:  woman => woman

Dependencies:
1	She	_	PRP	PRP	_	5	nsubj	_	_
2	is	_	VBZ	VBZ	_	5	cop	_	_
3	a	_	DT	DT	_	5	det	_	_
4	proud	_	JJ	JJ	_	5	amod	_	_
5	woman	_	NN	NN	_	0	root	_	_
6	in	_	IN	IN	_	5	prep	_	_
7	front	_	NN	NN	_	6	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	others	_	NNS	NNS	_	8	pobj	_	_
10	but	_	CC	CC	_	11	cc	_	_
11	is	_	VBZ	VBZ	_	9	dep	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	melancholy	_	JJ	JJ	_	14	amod	_	_
14	mood	_	NN	NN	_	12	pobj	_	_
15	when	_	WRB	WRB	_	16	advmod	_	_
16	staying	_	VBG	VBG	_	11	advcl	_	_
17	alone	_	RB	RB	_	16	advmod	_	_
18	...	_	:	:	_	5	punct	_	_

Oracle:
(c / contrast-01, ARG1, p / proud-41)
(c / contrast-01, ARG2, m / mood)
(f / front, op, p2 / person)
(m / mood, domain, w / woman)
(m / mood, mod, m2 / melancholy)
(m / mood, time, s / stay-01)
(p / proud-41, ARG1, w / woman)
(p2 / person, mod, o / other)
(s / stay-01, ARG1, w / woman)
(s / stay-01, ARG3, a / alone)

Input(Some(Graph((contrast-01 :ARG2 (mood :time (stay-01 :ARG3 alone :ARG1 woman) :mod melancholy :domain woman) :ARG1 (proud-41 :time (be-located-at-91 :ARG2 (front :op (person :mod other)) :ARG1 woman) :ARG1 woman)),ArrayBuffer(Span(9,10,List(0),but,contrast-01,false), Span(13,14,List(1),mood,mood,false), Span(15,16,List(2),staying,stay-01,false), Span(16,17,List(3),alone,alone,false), Span(12,13,List(4),melancholy,melancholy,false), Span(3,4,List(5),proud,proud-41,false), Span(6,7,List(6),front,front,false), Span(8,9,List(7, 8),others,(person :mod other),false), Span(4,5,List(9),woman,woman,false)),Map(2 -> stay-01, 5 -> proud-41, 8 -> other, 7 -> person, 1 -> mood, 4 -> melancholy, 6 -> front, 9 -> woman, 0 -> contrast-01, 3 -> alone),Map(w -> woman, m2 -> melancholy, p2 -> person, s -> stay-01, m -> mood, p -> proud-41, a -> alone, c -> contrast-01, o -> other, f -> front))),[Ljava.lang.String;@7fd7a283,Annotation([Ljava.lang.String;@22f59fa,[Ljava.lang.String;@78fa769e,[Ljava.lang.String;@16612a51),Annotation([Ljava.lang.String;@54e041a4,[Ljava.lang.String;@2c78324b,[Ledu.cmu.lti.nlp.amr.Dependency;@79defdc),Annotation([Ljava.lang.String;@18317edc,[Ljava.lang.String;@4e0ae11f,[Ljava.lang.String;@238d68ff),Annotation([Ljava.lang.String;@4b86805d,[Ljava.lang.String;@5852c06f,[Ledu.cmu.lti.nlp.amr.Entity;@4149c063))
AMR:
(c / contrast-01, ARG1, s / stay-01)
(c / contrast-01, ARG6, p2 / person)
(c / contrast-01, instrument, f / front)
(m / mood, mod, m2 / melancholy)
(m / mood, mod, p2 / person)
(p / proud-41, ARG1, w / woman)
(p2 / person, mod, o / other)
(s / stay-01, manner, a / alone)
(w / woman, prep-with, c / contrast-01)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 252,895 microseconds
Sentence: To put it plainly stars nowadays are just popular prostitutes in ancient times. Now that they are famous prostitutes, it should be just normal to drink with some high officials or even sleep with them

Oracle Span 1:  ancient => ancient
Oracle Span 2:  drink => drink-01
Oracle Span 3:  even => even
Oracle Span 4:  famous => famous
Oracle Span 5:  high => high
Oracle Span 6:  just => just
Oracle Span 7:  just => just
Oracle Span 8:  normal => normal
Oracle Span 9:  Now => now
Oracle Span 10:  nowadays => nowadays
Oracle Span 11:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 12:  or => or
Oracle Span 13:  plainly => plain
Oracle Span 14:  popular => popular-41
Oracle Span 15:  prostitutes => (person :ARG1-of prostitute-01)
Oracle Span 16:  prostitutes => (person :ARG1-of prostitute-01)
Oracle Span 17:  put => put-02
Oracle Span 18:  should => recommend-01
Oracle Span 19:  sleep => sleep-02
Oracle Span 20:  some => some
Oracle Span 21:  stars => (person :ARG1-of star-01)
Oracle Span 22:  they => they
Oracle Span 23:  times => time
Spans:
Span 11-12:  ancient => ancient
Span 27-28:  drink => drink-01
Span 33-34:  even => even
Span 18-19:  famous => famous
Span 30-31:  high => high
Span 7-8:  just => just
Span 24-25:  just => just
Span 25-26:  normal => normal
Span 14-15:  Now => now
Span 5-6:  nowadays => nowadays
Span 31-32:  officials => (have-org-role-91 :ARG2 official)
Span 32-33:  or => or
Span 3-4:  plainly => plain
Span 8-9:  popular => popular-41
Span 9-10:  prostitutes => (person :ARG1-of prostitute-01)
Span 19-20:  prostitutes => (person :ARG1-of prostitute-01)
Span 1-2:  put => put-02
Span 22-23:  should => recommend-01
Span 34-35:  sleep => sleep-02
Span 29-30:  some => some
Span 4-5:  stars => (person :ARG1-of star-01)
Span 16-17:  they => they
Span 12-13:  times => time

 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of just in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of normal in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of drink in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of sleep in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of them in position 36
Langrangian relaxation converged after 24 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of be in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of just in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of normal in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of drink in position 27
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of some in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of officials in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of or in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of even in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of sleep in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of with in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of them in position 36
Oracle Span 11-12:  ancient => ancient
Oracle Span 27-28:  drink => drink-01
Oracle Span 33-34:  even => even
Oracle Span 18-19:  famous => famous
Oracle Span 30-31:  high => high
Oracle Span 7-8:  just => just
Oracle Span 24-25:  just => just
Oracle Span 25-26:  normal => normal
Oracle Span 14-15:  Now => now
Oracle Span 5-6:  nowadays => nowadays
Oracle Span 31-32:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 32-33:  or => or
Oracle Span 3-4:  plainly => plain
Oracle Span 8-9:  popular => popular-41
Oracle Span 9-10:  prostitutes => (person :ARG1-of prostitute-01)
Oracle Span 19-20:  prostitutes => (person :ARG1-of prostitute-01)
Oracle Span 1-2:  put => put-02
Oracle Span 22-23:  should => recommend-01
Oracle Span 34-35:  sleep => sleep-02
Oracle Span 29-30:  some => some
Oracle Span 4-5:  stars => (person :ARG1-of star-01)
Oracle Span 16-17:  they => they
Oracle Span 12-13:  times => time

Dependencies:
1	To	_	TO	TO	_	2	aux	_	_
2	put	_	VB	VB	_	10	csubj	_	_
3	it	_	PRP	PRP	_	5	nsubj	_	_
4	plainly	_	RB	RB	_	5	advmod	_	_
5	stars	_	VBZ	VBZ	_	2	ccomp	_	_
6	nowadays	_	RB	RB	_	5	advmod	_	_
7	are	_	VBP	VBP	_	10	cop	_	_
8	just	_	RB	RB	_	10	advmod	_	_
9	popular	_	JJ	JJ	_	10	amod	_	_
10	prostitutes	_	NNS	NNS	_	0	root	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	ancient	_	JJ	JJ	_	13	amod	_	_
13	times	_	NNS	NNS	_	11	pobj	_	_
14	.	_	.	.	_	10	punct	_	_
1	Now	_	RB	RB	_	6	advmod	_	_
2	that	_	IN	IN	_	6	mark	_	_
3	they	_	PRP	PRP	_	6	nsubj	_	_
4	are	_	VBP	VBP	_	6	cop	_	_
5	famous	_	JJ	JJ	_	6	amod	_	_
6	prostitutes	_	NNS	NNS	_	12	advcl	_	_
7	,	_	,	,	_	12	punct	_	_
8	it	_	PRP	PRP	_	12	nsubj	_	_
9	should	_	MD	MD	_	12	aux	_	_
10	be	_	VB	VB	_	12	cop	_	_
11	just	_	RB	RB	_	12	advmod	_	_
12	normal	_	JJ	JJ	_	0	root	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	drink	_	VB	VB	_	12	xcomp	_	_
15	with	_	IN	IN	_	14	prep	_	_
16	some	_	DT	DT	_	18	det	_	_
17	high	_	JJ	JJ	_	18	amod	_	_
18	officials	_	NNS	NNS	_	15	pobj	_	_
19	or	_	CC	CC	_	14	cc	_	_
20	even	_	RB	RB	_	21	advmod	_	_
21	sleep	_	VB	VB	_	14	conj	_	_
22	with	_	IN	IN	_	21	prep	_	_
23	them	_	PRP	PRP	_	22	pobj	_	_

Oracle:
(d / drink-01, ARG0, t / they)
(h2 / have-org-role-91, ARG2, o2 / official)
(n3 / normal, domain, o / or)
(n3 / normal, mod, j2 / just)
(o / or, op, d / drink-01)
(o / or, op, s3 / sleep-02)
(o2 / official, mod, h / high)
(p / put-02, ARG1, p6 / person)
(p / put-02, manner, p2 / plain)
(p3 / prostitute-01, ARG0, p6 / person)
(p3 / prostitute-01, ARG1, p6 / person)
(p4 / popular-41, ARG1, p6 / person)
(p5 / prostitute-01, ARG0, p8 / person)
(p5 / prostitute-01, ARG1, p8 / person)
(p6 / person, domain, p7 / person)
(p6 / person, mod, j / just)
(p6 / person, time, t2 / time)
(p7 / person, time, n4 / nowadays)
(p8 / person, domain, t / they)
(p8 / person, mod, f / famous)
(p8 / person, time, n2 / now)
(r / recommend-01, ARG1, n3 / normal)
(s3 / sleep-02, ARG0, t / they)
(s3 / sleep-02, ARG1, o2 / official)
(s3 / sleep-02, mod, e / even)
(s4 / star-01, ARG1, p7 / person)
(t2 / time, mod, a / ancient)

Input(Some(Graph((multi-sentence :snt1 (person :ARG1-of (put-02 :manner plain) :domain (person :time nowadays :ARG1-of star-01) :time (time :mod ancient) :mod just :ARG1-of popular-41 :ARG1-of (prostitute-01 :ARG0 person)) :snt2 (cause-01 :ARG0 (person :time now :domain they :mod famous :ARG1-of (prostitute-01 :ARG0 person)) :ARG1 (recommend-01 :ARG1 (normal :mod just :domain (or :op (sleep-02 :mod even :ARG0 they :ARG1 official) :op (drink-01 :accompanier (person :quant some :ARG0-of (have-org-role-91 :ARG2 (official :mod high))) :ARG0 they)))))),ArrayBuffer(Span(9,10,List(0, 1),prostitutes,(person :ARG1-of prostitute-01),false), Span(8,9,List(2),popular,popular-41,false), Span(7,8,List(3),just,just,false), Span(12,13,List(4),times,time,false), Span(11,12,List(5),ancient,ancient,false), Span(4,5,List(6, 7),stars,(person :ARG1-of star-01),false), Span(5,6,List(8),nowadays,nowadays,false), Span(1,2,List(9),put,put-02,false), Span(19,20,List(10, 11),prostitutes,(person :ARG1-of prostitute-01),false), Span(18,19,List(12),famous,famous,false), Span(16,17,List(13),they,they,false), Span(14,15,List(14),Now,now,false), Span(22,23,List(15),should,recommend-01,false), Span(25,26,List(16),normal,normal,false), Span(24,25,List(17),just,just,false), Span(32,33,List(18),or,or,false), Span(34,35,List(19),sleep,sleep-02,false), Span(33,34,List(20),even,even,false), Span(27,28,List(21),drink,drink-01,false), Span(29,30,List(22),some,some,false), Span(31,32,List(23, 24),officials,(have-org-role-91 :ARG2 official),false), Span(30,31,List(25),high,high,false), Span(3,4,List(26),plainly,plain,false)),Map(2 -> popular-41, 5 -> ancient, 12 -> famous, 15 -> recommend-01, 8 -> nowadays, 21 -> drink-01, 18 -> or, 24 -> official, 7 -> star-01, 17 -> just, 1 -> prostitute-01, 23 -> have-org-role-91, 26 -> plain, 4 -> time, 11 -> prostitute-01, 14 -> now, 20 -> even, 6 -> person, 9 -> put-02, 0 -> person, 22 -> some, 16 -> normal, 19 -> sleep-02, 10 -> person, 3 -> just, 25 -> high, 13 -> they),Map(e -> even, h -> high, h2 -> have-org-role-91, s2 -> some, p5 -> prostitute-01, t -> they, p8 -> person, p2 -> plain, n4 -> nowadays, j -> just, j2 -> just, s4 -> star-01, d -> drink-01, p -> put-02, n3 -> normal, a -> ancient, p4 -> popular-41, o2 -> official, p7 -> person, t2 -> time, r -> recommend-01, s3 -> sleep-02, p6 -> person, f -> famous, o -> or, p3 -> prostitute-01, n2 -> now))),[Ljava.lang.String;@9cb8225,Annotation([Ljava.lang.String;@76b07f29,[Ljava.lang.String;@38af9828,[Ljava.lang.String;@376a0d86),Annotation([Ljava.lang.String;@62656be4,[Ljava.lang.String;@17d919b6,[Ledu.cmu.lti.nlp.amr.Dependency;@53f3bdbd),Annotation([Ljava.lang.String;@34129c78,[Ljava.lang.String;@7d61eb55,[Ljava.lang.String;@222a59e6),Annotation([Ljava.lang.String;@6c7a164b,[Ljava.lang.String;@4c2bb6e0,[Ledu.cmu.lti.nlp.amr.Entity;@3e62d773))
AMR:
(d / drink-01, ARG1, h / high)
(d / drink-01, ARG6, f / famous)
(h2 / have-org-role-91, ARG0, p8 / person)
(h2 / have-org-role-91, ARG1, a / ancient)
(h2 / have-org-role-91, ARG2, o2 / official)
(h2 / have-org-role-91, ARG6, h / high)
(j2 / just, domain, p / put-02)
(n3 / normal, domain, p / put-02)
(o / or, domain, p / put-02)
(p / put-02, ARG1, p7 / person)
(p / put-02, ARG6, j / just)
(p3 / prostitute-01, ARG1, p6 / person)
(p3 / prostitute-01, ARG6, n2 / now)
(p4 / popular-41, ARG1, p6 / person)
(p5 / prostitute-01, ARG1, p8 / person)
(p6 / person, domain, p / put-02)
(r / recommend-01, ARG1, j2 / just)
(s2 / some, domain, p / put-02)
(s2 / some, mod, h / high)
(s3 / sleep-02, ARG0, e / even)
(s3 / sleep-02, ARG1, o / or)
(s4 / star-01, ARG1, p7 / person)
(s4 / star-01, manner, n4 / nowadays)
(s4 / star-01, manner, p2 / plain)
(t / they, calendar, n2 / now)
(t2 / time, mod, a / ancient)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.4
WARNING: makeIds can't find span Id: 0.0.4.0
WARNING: makeIds can't find span Id: 0.0.4.1
WARNING: makeIds can't find span Id: 0.0.5
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.5.0
Decoded in 1,299,140 microseconds
Sentence: Stop talking about others just behave yourself

Oracle Span 1:  behave => behave-01
Oracle Span 2:  just => just
Oracle Span 3:  others => (person :mod other)
Oracle Span 4:  Stop => stop-01
Oracle Span 5:  talking => talk-01
Spans:
Span 5-6:  behave => behave-01
Span 4-5:  just => just
Span 3-4:  others => (person :mod other)
Span 0-1:  Stop => stop-01
Span 1-2:  talking => talk-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 5-6:  behave => behave-01
Oracle Span 4-5:  just => just
Oracle Span 3-4:  others => (person :mod other)
Oracle Span 0-1:  Stop => stop-01
Oracle Span 1-2:  talking => talk-01

Dependencies:
1	Stop	_	VB	VB	_	0	root	_	_
2	talking	_	VBG	VBG	_	1	xcomp	_	_
3	about	_	IN	IN	_	2	prep	_	_
4	others	_	NNS	NNS	_	3	pobj	_	_
5	just	_	RB	RB	_	6	advmod	_	_
6	behave	_	VB	VB	_	4	dep	_	_
7	yourself	_	PRP	PRP	_	6	dobj	_	_

Oracle:
(b / behave-01, mod, j / just)
(p / person, mod, o / other)
(s / stop-01, ARG1, t / talk-01)
(t / talk-01, ARG1, p / person)

Input(Some(Graph((multi-sentence :snt1 (stop-01 :ARG1 (talk-01 :ARG1 (person :mod other) :ARG0 you) :ARG0 you :mode imperative) :snt2 (behave-01 :mod just :ARG0 you :mode imperative)),ArrayBuffer(Span(0,1,List(0),Stop,stop-01,false), Span(1,2,List(1),talking,talk-01,false), Span(3,4,List(2, 3),others,(person :mod other),false), Span(5,6,List(4),behave,behave-01,false), Span(4,5,List(5),just,just,false)),Map(2 -> person, 5 -> just, 1 -> talk-01, 4 -> behave-01, 0 -> stop-01, 3 -> other),Map(b -> behave-01, t -> talk-01, j -> just, s -> stop-01, p -> person, o -> other))),[Ljava.lang.String;@4ef74c30,Annotation([Ljava.lang.String;@7283d3eb,[Ljava.lang.String;@638ef7ed,[Ljava.lang.String;@4bff7da0),Annotation([Ljava.lang.String;@3f1d2e23,[Ljava.lang.String;@536dbea0,[Ledu.cmu.lti.nlp.amr.Dependency;@47c81abf),Annotation([Ljava.lang.String;@776a6d9b,[Ljava.lang.String;@21d03963,[Ljava.lang.String;@1f760b47),Annotation([Ljava.lang.String;@18ece7f4,[Ljava.lang.String;@3cce57c7,[Ledu.cmu.lti.nlp.amr.Entity;@1cf56a1c))
AMR:
(b / behave-01, ARG0, p / person)
(b / behave-01, ARG1, j / just)
(p / person, mod, o / other)
(s / stop-01, ARG1, t / talk-01)
(t / talk-01, ARG1, p / person)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 67,122 microseconds
Sentence: What should we do in the future! Ability alone isn't enough to become successful! Are we goin' to face such hard choices too?

Oracle Span 1:  alone => alone
Oracle Span 2:  do => do-02
Oracle Span 3:  enough => enough
Oracle Span 4:  face => face-01
Oracle Span 5:  future => future
Oracle Span 6:  hard => hard
Oracle Span 7:  should => recommend-01
Oracle Span 8:  successful => succeed-01
Oracle Span 9:  such => such
Oracle Span 10:  too => too
Oracle Span 11:  we => we
Oracle Span 12:  we => we
Spans:
Span 9-10:  alone => alone
Span 3-4:  do => do-02
Span 12-13:  enough => enough
Span 22-23:  face => face-01
Span 6-7:  future => future
Span 24-25:  hard => hard
Span 1-2:  should => recommend-01
Span 15-16:  successful => succeed-01
Span 23-24:  such => such
Span 26-27:  too => too
Span 2-3:  we => we
Span 18-19:  we => we

 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of enough in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of become in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of successful in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of Are in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of goin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of hard in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of choices in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 27
Langrangian relaxation converged after 49 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of n't in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of enough in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of become in position 14
 *** WARNING: The dependency tree seems broken.  I can't find the head of successful in position 15
 *** WARNING: The dependency tree seems broken.  I can't find the head of ! in position 16
 *** WARNING: The dependency tree seems broken.  I can't find the head of Are in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of we in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of goin in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of ' in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of face in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of hard in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of choices in position 25
 *** WARNING: The dependency tree seems broken.  I can't find the head of too in position 26
 *** WARNING: The dependency tree seems broken.  I can't find the head of ? in position 27
Oracle Span 9-10:  alone => alone
Oracle Span 3-4:  do => do-02
Oracle Span 12-13:  enough => enough
Oracle Span 22-23:  face => face-01
Oracle Span 6-7:  future => future
Oracle Span 24-25:  hard => hard
Oracle Span 1-2:  should => recommend-01
Oracle Span 15-16:  successful => succeed-01
Oracle Span 23-24:  such => such
Oracle Span 26-27:  too => too
Oracle Span 2-3:  we => we
Oracle Span 18-19:  we => we

Dependencies:
1	What	_	WP	WP	_	4	dobj	_	_
2	should	_	MD	MD	_	4	aux	_	_
3	we	_	PRP	PRP	_	4	nsubj	_	_
4	do	_	VB	VB	_	0	root	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	future	_	NN	NN	_	5	pobj	_	_
8	!	_	.	.	_	4	punct	_	_
1	Ability	_	NNP	NNP	_	5	nsubj	_	_
2	alone	_	RB	RB	_	5	advmod	_	_
3	is	_	VBZ	VBZ	_	5	cop	_	_
4	n't	_	RB	RB	_	5	neg	_	_
5	enough	_	JJ	JJ	_	0	root	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	become	_	VB	VB	_	5	xcomp	_	_
8	successful	_	JJ	JJ	_	7	acomp	_	_
9	!	_	.	.	_	5	punct	_	_
1	Are	_	VBP	VBP	_	3	auxpass	_	_
2	we	_	PRP	PRP	_	3	nsubjpass	_	_
3	goin	_	VBN	VBN	_	0	root	_	_
4	'	_	''	''	_	3	punct	_	_
5	to	_	TO	TO	_	6	aux	_	_
6	face	_	VB	VB	_	3	xcomp	_	_
7	such	_	JJ	JJ	_	9	amod	_	_
8	hard	_	JJ	JJ	_	9	amod	_	_
9	choices	_	NNS	NNS	_	6	dobj	_	_
10	too	_	RB	RB	_	6	advmod	_	_
11	?	_	.	.	_	3	punct	_	_

Oracle:
(d / do-02, time, f / future)
(e / enough, purpose, s3 / succeed-01)
(f2 / face-01, ARG0, w2 / we)
(f2 / face-01, mod, t2 / too)
(h / hard, mod, s2 / such)
(r / recommend-01, ARG1, d / do-02)
(r / recommend-01, ARG2, w / we)

Input(Some(Graph((multi-sentence :snt1 (recommend-01 :ARG2 we :ARG1 (do-02 :time future :ARG1 amr-unknown)) :snt2 (enough :purpose succeed-01 :domain (capable-41 :mod alone) :polarity -) :snt3 (face-01 :mod too :ARG1 (thing :ARG1-of choose-01 :mod (hard :mod such)) :ARG0 we :mode interrogative)),ArrayBuffer(Span(1,2,List(0),should,recommend-01,false), Span(2,3,List(1),we,we,false), Span(3,4,List(2),do,do-02,false), Span(6,7,List(3),future,future,false), Span(12,13,List(4),enough,enough,false), Span(9,10,List(5),alone,alone,false), Span(22,23,List(6),face,face-01,false), Span(26,27,List(7),too,too,false), Span(24,25,List(8),hard,hard,false), Span(23,24,List(9),such,such,false), Span(18,19,List(10),we,we,false), Span(15,16,List(11),successful,succeed-01,false)),Map(2 -> do-02, 5 -> alone, 8 -> hard, 7 -> too, 1 -> we, 4 -> enough, 11 -> succeed-01, 6 -> face-01, 9 -> such, 0 -> recommend-01, 10 -> we, 3 -> future),Map(e -> enough, w -> we, h -> hard, s2 -> such, a3 -> alone, d -> do-02, t2 -> too, w2 -> we, r -> recommend-01, s3 -> succeed-01, f2 -> face-01, f -> future))),[Ljava.lang.String;@33f676f6,Annotation([Ljava.lang.String;@4c5ae43b,[Ljava.lang.String;@264f218,[Ljava.lang.String;@3576ddc2),Annotation([Ljava.lang.String;@35b74c5c,[Ljava.lang.String;@2e570ded,[Ledu.cmu.lti.nlp.amr.Dependency;@b86de0d),Annotation([Ljava.lang.String;@81d9a72,[Ljava.lang.String;@747f281,[Ljava.lang.String;@1169afe1),Annotation([Ljava.lang.String;@2ca26d77,[Ljava.lang.String;@4808bc9b,[Ledu.cmu.lti.nlp.amr.Entity;@70e38ce1))
AMR:
(a3 / alone, calendar, f / future)
(d / do-02, ARG0, w / we)
(d / do-02, ARG1, f / future)
(f2 / face-01, ARG0, w / we)
(f2 / face-01, ARG1, s2 / such)
(h / hard, mod, s2 / such)
(r / recommend-01, ARG0, e / enough)
(r / recommend-01, ARG1, t2 / too)
(r / recommend-01, ARG6, d / do-02)
(s3 / succeed-01, ARG0, w / we)
(s3 / succeed-01, ARG1, w2 / we)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.3
WARNING: makeIds can't find span Id: 0.2.2.1
WARNING: makeIds can't find span Id: 0.2.2.1.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 553,091 microseconds
Sentence: More suffering is under the disguise of glorious looks, 'tis the undisputable fact.

Oracle Span 1:  disguise => disguise-01
Oracle Span 2:  glorious => glorious
Oracle Span 3:  looks => look-02
Oracle Span 4:  More => more
Oracle Span 5:  suffering => suffer-01
Oracle Span 6:  undisputable => dispute-01
Spans:
Span 5-6:  disguise => disguise-01
Span 7-8:  glorious => glorious
Span 8-9:  looks => look-02
Span 0-1:  More => more
Span 1-2:  suffering => suffer-01
Span 13-14:  undisputable => dispute-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 5-6:  disguise => disguise-01
Oracle Span 7-8:  glorious => glorious
Oracle Span 8-9:  looks => look-02
Oracle Span 0-1:  More => more
Oracle Span 1-2:  suffering => suffer-01
Oracle Span 13-14:  undisputable => dispute-01

Dependencies:
1	More	_	JJR	JJR	_	2	amod	_	_
2	suffering	_	NN	NN	_	3	nsubj	_	_
3	is	_	VBZ	VBZ	_	15	ccomp	_	_
4	under	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	disguise	_	NN	NN	_	4	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	glorious	_	JJ	JJ	_	9	amod	_	_
9	looks	_	NNS	NNS	_	7	pobj	_	_
10	,	_	,	,	_	15	punct	_	_
11	't	_	NN	NN	_	15	nsubj	_	_
12	is	_	VBZ	VBZ	_	15	cop	_	_
13	the	_	DT	DT	_	15	det	_	_
14	undisputable	_	JJ	JJ	_	15	amod	_	_
15	fact	_	NN	NN	_	0	root	_	_
16	.	_	.	.	_	15	punct	_	_

Oracle:
(d / dispute-01, ARG2, d2 / disguise-01)
(d2 / disguise-01, ARG1, s / suffer-01)
(d2 / disguise-01, ARG2, l / look-02)
(l / look-02, ARG1, g / glorious)
(s / suffer-01, quant, m / more)

Input(Some(Graph((disguise-01 :ARG2-of (dispute-01 :mod (possible :polarity -)) :ARG2 (look-02 :ARG1 glorious) :ARG1 (suffer-01 :quant more)),ArrayBuffer(Span(5,6,List(0),disguise,disguise-01,false), Span(8,9,List(1),looks,look-02,false), Span(7,8,List(2),glorious,glorious,false), Span(1,2,List(3),suffering,suffer-01,false), Span(0,1,List(4),More,more,false), Span(13,14,List(5),undisputable,dispute-01,false)),Map(2 -> glorious, 5 -> dispute-01, 1 -> look-02, 4 -> more, 0 -> disguise-01, 3 -> suffer-01),Map(s -> suffer-01, d -> dispute-01, m -> more, g -> glorious, d2 -> disguise-01, l -> look-02))),[Ljava.lang.String;@2ca923bb,Annotation([Ljava.lang.String;@13df2a8c,[Ljava.lang.String;@1ebea008,[Ljava.lang.String;@72d6b3ba),Annotation([Ljava.lang.String;@1787f2a0,[Ljava.lang.String;@7de62196,[Ledu.cmu.lti.nlp.amr.Dependency;@163370c2),Annotation([Ljava.lang.String;@51bf5add,[Ljava.lang.String;@7905a0b8,[Ljava.lang.String;@35a3d49f),Annotation([Ljava.lang.String;@389b0789,[Ljava.lang.String;@13d9cbf5,[Ledu.cmu.lti.nlp.amr.Entity;@478db956))
AMR:
(d / dispute-01, ARG1, d2 / disguise-01)
(d2 / disguise-01, ARG1, l / look-02)
(l / look-02, ARG1, g / glorious)
(s / suffer-01, ARG1, d / dispute-01)
(s / suffer-01, ARG6, m / more)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 105,876 microseconds
Sentence: It's not so bad, they're just playing in their own circle, out of sight, out of mind,

Oracle Span 1:  bad => bad
Oracle Span 2:  circle => circle
Oracle Span 3:  just => just
Oracle Span 4:  mind => mind
Oracle Span 5:  out => out
Oracle Span 6:  out => out
Oracle Span 7:  playing => play-01
Oracle Span 8:  so => so
Oracle Span 9:  they => they
Spans:
Span 4-5:  bad => bad
Span 13-14:  circle => circle
Span 8-9:  just => just
Span 21-22:  mind => mind
Span 15-16:  out => out
Span 19-20:  out => out
Span 9-10:  playing => play-01
Span 3-4:  so => so
Span 6-7:  they => they

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 4-5:  bad => bad
Oracle Span 13-14:  circle => circle
Oracle Span 8-9:  just => just
Oracle Span 21-22:  mind => mind
Oracle Span 15-16:  out => out
Oracle Span 19-20:  out => out
Oracle Span 9-10:  playing => play-01
Oracle Span 3-4:  so => so
Oracle Span 6-7:  they => they

Dependencies:
1	It	_	PRP	PRP	_	5	nsubj	_	_
2	's	_	VBZ	VBZ	_	5	cop	_	_
3	not	_	RB	RB	_	5	neg	_	_
4	so	_	RB	RB	_	5	advmod	_	_
5	bad	_	JJ	JJ	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	they	_	PRP	PRP	_	10	nsubj	_	_
8	're	_	VBP	VBP	_	10	aux	_	_
9	just	_	RB	RB	_	10	advmod	_	_
10	playing	_	VBG	VBG	_	5	ccomp	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	their	_	PRP$	PRP$	_	14	poss	_	_
13	own	_	JJ	JJ	_	14	amod	_	_
14	circle	_	NN	NN	_	11	pobj	_	_
15	,	_	,	,	_	11	punct	_	_
16	out	_	RB	RB	_	11	dep	_	_
17	of	_	IN	IN	_	11	prep	_	_
18	sight	_	NN	NN	_	17	pobj	_	_
19	,	_	,	,	_	11	punct	_	_
20	out	_	RB	RB	_	11	dep	_	_
21	of	_	IN	IN	_	11	prep	_	_
22	mind	_	NN	NN	_	21	pobj	_	_
23	,	_	,	,	_	5	punct	_	_

Oracle:
(b / bad, degree, s2 / so)
(c / circle, poss, t / they)
(o2 / out, op, m / mind)
(p / play-01, ARG0, t / they)
(p / play-01, location, c / circle)
(p / play-01, location, o / out)
(p / play-01, location, o2 / out)
(p / play-01, mod, j / just)

Input(Some(Graph((cause-01 :ARG0 (play-01 :location (out :op mind) :location (out :op see-01) :mod just :location (circle :poss they) :ARG0 they) :ARG1 (bad :degree so :polarity -)),ArrayBuffer(Span(9,10,List(0),playing,play-01,false), Span(15,16,List(1),out,out,false), Span(21,22,List(2),mind,mind,false), Span(19,20,List(3),out,out,false), Span(8,9,List(4),just,just,false), Span(13,14,List(5),circle,circle,false), Span(6,7,List(6),they,they,false), Span(4,5,List(7),bad,bad,false), Span(3,4,List(8),so,so,false)),Map(2 -> mind, 5 -> circle, 8 -> so, 7 -> bad, 1 -> out, 4 -> just, 6 -> they, 0 -> play-01, 3 -> out),Map(s2 -> so, b -> bad, t -> they, j -> just, m -> mind, p -> play-01, o2 -> out, c -> circle, o -> out))),[Ljava.lang.String;@6ca18a14,Annotation([Ljava.lang.String;@c667f46,[Ljava.lang.String;@51bd8b5c,[Ljava.lang.String;@7b50df34),Annotation([Ljava.lang.String;@1b410b60,[Ljava.lang.String;@2462cb01,[Ledu.cmu.lti.nlp.amr.Dependency;@19b843ba),Annotation([Ljava.lang.String;@64ec96c6,[Ljava.lang.String;@77659b30,[Ljava.lang.String;@456d6c1e),Annotation([Ljava.lang.String;@1e13529a,[Ljava.lang.String;@1ec9bd38,[Ledu.cmu.lti.nlp.amr.Entity;@452e19ca))
AMR:
(b / bad, domain, p / play-01)
(b / bad, mod, s2 / so)
(j / just, domain, t / they)
(o / out, op, m / mind)
(o2 / out, calendar, c / circle)
(p / play-01, ARG1, c / circle)
(p / play-01, ARG6, o / out)
(p / play-01, mod, j / just)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.4
WARNING: makeIds can't find span Id: 0.0.4.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 203,545 microseconds
Sentence: Not like the old guy Zhang Jizhong not only behaved like a hooligan in his own circle, but also thinks he is virtuous without any talent. He makes TV series when he has nothing to do to wreck people of the whole country.

Oracle Span 1:  also => also
Oracle Span 2:  behaved => behave-01
Oracle Span 3:  but => contrast-01
Oracle Span 4:  circle => circle
Oracle Span 5:  country => (person :poss country)
Oracle Span 6:  do => do-02
Oracle Span 7:  guy => guy
Oracle Span 8:  has => have-03
Oracle Span 9:  he => he
Oracle Span 10:  hooligan => hooligan
Oracle Span 11:  makes => make-01
Oracle Span 12:  nothing => nothing
Oracle Span 13:  old => old
Oracle Span 14:  series => series
Oracle Span 15:  talent => talent
Oracle Span 16:  thinks => think-01
Oracle Span 17:  TV => TV
Oracle Span 18:  virtuous => virtuous
Oracle Span 19:  whole => whole
Oracle Span 20:  wreck => wreck-01
Oracle Span 21:  Zhang Jizhong => (name :op "Jizhong" :op "Zhang")
NER Entity: (person :name (name :op "Zhang" :op "Jizhong"))
Spans:
Span 19-20:  also => also
Span 9-10:  behaved => behave-01
Span 18-19:  but => contrast-01
Span 16-17:  circle => circle
Span 44-45:  country => (person :poss country)
Span 37-38:  do => do-02
Span 4-5:  guy => guy
Span 34-35:  has => have-03
Span 21-22:  he => he
Span 12-13:  hooligan => hooligan
Span 29-30:  makes => make-01
Span 35-36:  nothing => nothing
Span 3-4:  old => old
Span 31-32:  series => series
Span 26-27:  talent => talent
Span 20-21:  thinks => think-01
Span 30-31:  TV => TV
Span 23-24:  virtuous => virtuous
Span 43-44:  whole => whole
Span 39-40:  wreck => wreck-01
Span 5-7:  Zhang Jizhong => (name :op "Jizhong" :op "Zhang")

 *** WARNING: The dependency tree seems broken.  I can't find the head of He in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of TV in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of series in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of when in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of nothing in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of wreck in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of whole in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 45
Langrangian relaxation converged after 50 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of He in position 28
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 29
 *** WARNING: The dependency tree seems broken.  I can't find the head of TV in position 30
 *** WARNING: The dependency tree seems broken.  I can't find the head of series in position 31
 *** WARNING: The dependency tree seems broken.  I can't find the head of when in position 32
 *** WARNING: The dependency tree seems broken.  I can't find the head of he in position 33
 *** WARNING: The dependency tree seems broken.  I can't find the head of has in position 34
 *** WARNING: The dependency tree seems broken.  I can't find the head of nothing in position 35
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 36
 *** WARNING: The dependency tree seems broken.  I can't find the head of do in position 37
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 38
 *** WARNING: The dependency tree seems broken.  I can't find the head of wreck in position 39
 *** WARNING: The dependency tree seems broken.  I can't find the head of people in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of of in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of the in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of whole in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of country in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 45
Oracle Span 19-20:  also => also
Oracle Span 9-10:  behaved => behave-01
Oracle Span 18-19:  but => contrast-01
Oracle Span 16-17:  circle => circle
Oracle Span 44-45:  country => (person :poss country)
Oracle Span 37-38:  do => do-02
Oracle Span 4-5:  guy => guy
Oracle Span 34-35:  has => have-03
Oracle Span 21-22:  he => he
Oracle Span 12-13:  hooligan => hooligan
Oracle Span 29-30:  makes => make-01
Oracle Span 35-36:  nothing => nothing
Oracle Span 3-4:  old => old
Oracle Span 31-32:  series => series
Oracle Span 26-27:  talent => talent
Oracle Span 20-21:  thinks => think-01
Oracle Span 30-31:  TV => TV
Oracle Span 23-24:  virtuous => virtuous
Oracle Span 43-44:  whole => whole
Oracle Span 39-40:  wreck => wreck-01
Oracle Span 5-7:  Zhang Jizhong => (name :op "Jizhong" :op "Zhang")

Dependencies:
1	Not	_	RB	RB	_	10	neg	_	_
2	like	_	IN	IN	_	10	prep	_	_
3	the	_	DT	DT	_	5	det	_	_
4	old	_	JJ	JJ	_	5	amod	_	_
5	guy	_	NN	NN	_	2	pobj	_	_
6	Zhang	_	NNP	NNP	_	7	nn	_	_
7	Jizhong	_	NNP	NNP	_	10	nsubj	_	_
8	not	_	RB	RB	_	9	neg	_	_
9	only	_	JJ	JJ	_	10	preconj	_	_
10	behaved	_	VBD	VBD	_	0	root	_	_
11	like	_	IN	IN	_	10	prep	_	_
12	a	_	DT	DT	_	13	det	_	_
13	hooligan	_	NN	NN	_	11	pobj	_	_
14	in	_	IN	IN	_	10	prep	_	_
15	his	_	PRP$	PRP$	_	17	poss	_	_
16	own	_	JJ	JJ	_	17	amod	_	_
17	circle	_	NN	NN	_	14	pobj	_	_
18	,	_	,	,	_	10	punct	_	_
19	but	_	CC	CC	_	20	cc	_	_
20	also	_	RB	RB	_	10	cc	_	_
21	thinks	_	VBZ	VBZ	_	10	conj	_	_
22	he	_	PRP	PRP	_	24	nsubj	_	_
23	is	_	VBZ	VBZ	_	24	cop	_	_
24	virtuous	_	JJ	JJ	_	21	ccomp	_	_
25	without	_	IN	IN	_	24	prep	_	_
26	any	_	DT	DT	_	27	det	_	_
27	talent	_	NN	NN	_	25	pobj	_	_
28	.	_	.	.	_	10	punct	_	_
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	makes	_	VBZ	VBZ	_	0	root	_	_
3	TV	_	NN	NN	_	4	nn	_	_
4	series	_	NN	NN	_	2	dobj	_	_
5	when	_	WRB	WRB	_	7	advmod	_	_
6	he	_	PRP	PRP	_	7	nsubj	_	_
7	has	_	VBZ	VBZ	_	4	rcmod	_	_
8	nothing	_	NN	NN	_	7	dobj	_	_
9	to	_	TO	TO	_	10	aux	_	_
10	do	_	VB	VB	_	8	vmod	_	_
11	to	_	TO	TO	_	12	aux	_	_
12	wreck	_	VB	VB	_	10	xcomp	_	_
13	people	_	NNS	NNS	_	12	dobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	17	det	_	_
16	whole	_	JJ	JJ	_	17	amod	_	_
17	country	_	NN	NN	_	14	pobj	_	_
18	.	_	.	.	_	2	punct	_	_

Oracle:
(b / behave-01, ARG0, g / guy)
(b / behave-01, ARG1, h / hooligan)
(b / behave-01, location, c2 / circle)
(c / contrast-01, ARG2, g / guy)
(c2 / circle, poss, g / guy)
(c3 / country, mod, w2 / whole)
(d / do-02, ARG1, n2 / nothing)
(g / guy, mod, o / old)
(g / guy, name, n / name)
(h2 / have-03, ARG0, g / guy)
(h2 / have-03, ARG1, n2 / nothing)
(m2 / make-01, ARG0, h3 / he)
(m2 / make-01, ARG1, s / series)
(m2 / make-01, purpose, w / wreck-01)
(m2 / make-01, time, h2 / have-03)
(n / name, op, "Jizhong")
(n / name, op, "Zhang")
(p / person, poss, c3 / country)
(s / series, mod, t3 / TV)
(t / think-01, ARG0, g / guy)
(t / think-01, ARG1, v / virtuous)
(t / think-01, mod, a2 / also)
(v / virtuous, domain, g / guy)
(v / virtuous, manner, t2 / talent)
(w / wreck-01, ARG1, p / person)

Input(Some(Graph((multi-sentence :snt1 (contrast-01 :ARG2 (guy :ARG0-of (think-01 :mod also :ARG1 (virtuous :manner (talent :polarity -) :domain guy)) :ARG0-of (behave-01 :location (circle :poss guy) :ARG1 hooligan) :mod old :name (name :op "Jizhong" :op "Zhang"))) :snt2 (make-01 :purpose (wreck-01 :ARG1 (person :poss (country :mod whole))) :time (have-03 :ARG1 (nothing :ARG1-of do-02) :ARG0 guy) :ARG1 (series :mod TV) :ARG0 he)),ArrayBuffer(Span(5,7,List(0, 1, 2),Zhang Jizhong,(name :op "Jizhong" :op "Zhang"),false), Span(18,19,List(3),but,contrast-01,false), Span(4,5,List(4),guy,guy,false), Span(20,21,List(5),thinks,think-01,false), Span(19,20,List(6),also,also,false), Span(23,24,List(7),virtuous,virtuous,false), Span(26,27,List(8),talent,talent,false), Span(9,10,List(9),behaved,behave-01,false), Span(16,17,List(10),circle,circle,false), Span(12,13,List(11),hooligan,hooligan,false), Span(3,4,List(12),old,old,false), Span(29,30,List(13),makes,make-01,false), Span(39,40,List(14),wreck,wreck-01,false), Span(44,45,List(15, 16),country,(person :poss country),false), Span(43,44,List(17),whole,whole,false), Span(34,35,List(18),has,have-03,false), Span(35,36,List(19),nothing,nothing,false), Span(37,38,List(20),do,do-02,false), Span(31,32,List(21),series,series,false), Span(30,31,List(22),TV,TV,false), Span(21,22,List(23),he,he,false)),Map(2 -> "Zhang", 5 -> think-01, 12 -> old, 15 -> person, 8 -> talent, 21 -> series, 18 -> have-03, 7 -> virtuous, 17 -> whole, 1 -> "Jizhong", 23 -> he, 4 -> guy, 11 -> hooligan, 14 -> wreck-01, 20 -> do-02, 6 -> also, 9 -> behave-01, 0 -> name, 22 -> TV, 16 -> country, 19 -> nothing, 10 -> circle, 3 -> contrast-01, 13 -> make-01),Map(w -> wreck-01, n -> name, h -> hooligan, h2 -> have-03, b -> behave-01, t -> think-01, m2 -> make-01, s -> series, v -> virtuous, d -> do-02, t3 -> TV, p -> person, g -> guy, c3 -> country, t2 -> talent, w2 -> whole, a2 -> also, h3 -> he, c -> contrast-01, o -> old, n2 -> nothing, c2 -> circle))),[Ljava.lang.String;@6b0d80ed,Annotation([Ljava.lang.String;@6f8e8894,[Ljava.lang.String;@3cfdd820,[Ljava.lang.String;@928763c),Annotation([Ljava.lang.String;@e25951c,[Ljava.lang.String;@15f47664,[Ledu.cmu.lti.nlp.amr.Dependency;@471a9022),Annotation([Ljava.lang.String;@dc9876b,[Ljava.lang.String;@2f666ebb,[Ljava.lang.String;@19976a65),Annotation([Ljava.lang.String;@a1f72f5,[Ljava.lang.String;@4b2c5e02,[Ledu.cmu.lti.nlp.amr.Entity;@57a3e26a))
AMR:
(b / behave-01, ARG1, h / hooligan)
(c / contrast-01, ARG1, c2 / circle)
(d / do-02, ARG0, n2 / nothing)
(d / do-02, ARG1, w / wreck-01)
(d / do-02, location, c2 / circle)
(d / do-02, location, g / guy)
(d / do-02, location, h / hooligan)
(g / guy, mod, o / old)
(h2 / have-03, ARG0, p / person)
(h2 / have-03, ARG1, n2 / nothing)
(m2 / make-01, ARG1, t3 / TV)
(m2 / make-01, ARG2, t / think-01)
(n / name, op, "Jizhong")
(n / name, op, "Zhang")
(p / person, poss, c3 / country)
(s / series, mod, t3 / TV)
(t / think-01, ARG0, n / name)
(t / think-01, ARG1, v / virtuous)
(t / think-01, ARG6, a2 / also)
(t / think-01, manner, c / contrast-01)
(v / virtuous, domain, h3 / he)
(v / virtuous, location, t2 / talent)
(w / wreck-01, ARG1, w2 / whole)

WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.3.1
WARNING: makeIds can't find span Id: 0.0.0.3.0
WARNING: makeIds can't find span Id: 0.0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.2.1
WARNING: makeIds can't find span Id: 0.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 1,711,864 microseconds
Sentence: Both take what they need

Oracle Span 1:  Both => both
Oracle Span 2:  need => (thing :ARG1-of need-01)
Oracle Span 3:  take => take-01
Spans:
Span 0-1:  Both => both
Span 4-5:  need => (thing :ARG1-of need-01)
Span 1-2:  take => take-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 0-1:  Both => both
Oracle Span 4-5:  need => (thing :ARG1-of need-01)
Oracle Span 1-2:  take => take-01

Dependencies:
1	Both	_	DT	DT	_	2	nsubj	_	_
2	take	_	VBP	VBP	_	0	root	_	_
3	what	_	WP	WP	_	5	dobj	_	_
4	they	_	PRP	PRP	_	5	nsubj	_	_
5	need	_	VBP	VBP	_	2	ccomp	_	_

Oracle:
(n / need-01, ARG0, b / both)
(n / need-01, ARG1, t2 / thing)
(t / take-01, ARG0, b / both)
(t / take-01, ARG1, t2 / thing)

Input(Some(Graph((take-01 :ARG1 (thing :ARG1-of (need-01 :ARG0 both)) :ARG0 both),ArrayBuffer(Span(1,2,List(0),take,take-01,false), Span(4,5,List(1, 2),need,(thing :ARG1-of need-01),false), Span(0,1,List(3),Both,both,false)),Map(2 -> need-01, 1 -> thing, 0 -> take-01, 3 -> both),Map(n -> need-01, b -> both, t -> take-01, t2 -> thing))),[Ljava.lang.String;@75c56eb9,Annotation([Ljava.lang.String;@4bc222e,[Ljava.lang.String;@2dc9b0f5,[Ljava.lang.String;@6531a794),Annotation([Ljava.lang.String;@3b5fad2d,[Ljava.lang.String;@5e17553a,[Ledu.cmu.lti.nlp.amr.Dependency;@3eb91815),Annotation([Ljava.lang.String;@56dc1551,[Ljava.lang.String;@102cec62,[Ljava.lang.String;@74f6c5d8),Annotation([Ljava.lang.String;@27912e3,[Ljava.lang.String;@34b9f960,[Ledu.cmu.lti.nlp.amr.Entity;@43015c69))
AMR:
(n / need-01, ARG1, t2 / thing)
(t / take-01, ARG0, b / both)
(t / take-01, ARG1, t2 / thing)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 58,688 microseconds
Sentence: When can China have a pure, innocent girl?

Oracle Span 1:  can => possible
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  girl => girl
Oracle Span 4:  have => have-03
Oracle Span 5:  innocent => innocent-41
Oracle Span 6:  pure => pure
NER Entity: (country :name (name :op "China"))
Spans:
Span 1-2:  can => possible
Span 2-3:  China => (country :name (name :op "China"))
Span 8-9:  girl => girl
Span 3-4:  have => have-03
Span 7-8:  innocent => innocent-41
Span 5-6:  pure => pure

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  can => possible
Oracle Span 2-3:  China => (country :name (name :op "China"))
Oracle Span 8-9:  girl => girl
Oracle Span 3-4:  have => have-03
Oracle Span 7-8:  innocent => innocent-41
Oracle Span 5-6:  pure => pure

Dependencies:
1	When	_	WRB	WRB	_	4	advmod	_	_
2	can	_	MD	MD	_	4	aux	_	_
3	China	_	NNP	NNP	_	4	nsubj	_	_
4	have	_	VB	VB	_	0	root	_	_
5	a	_	DT	DT	_	9	det	_	_
6	pure	_	JJ	JJ	_	9	amod	_	_
7	,	_	,	,	_	9	punct	_	_
8	innocent	_	JJ	JJ	_	9	amod	_	_
9	girl	_	NN	NN	_	4	dobj	_	_
10	?	_	.	.	_	4	punct	_	_

Oracle:
(c / country, name, n / name)
(g / girl, mod, p2 / pure)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, g / girl)
(i / innocent-41, ARG1, g / girl)
(n / name, op, "China")
(p / possible, domain, h / have-03)

Input(Some(Graph((possible :time amr-unknown :domain (have-03 :ARG1 (girl :ARG1-of innocent-41 :mod pure) :ARG0 (country :name (name :op "China")))),ArrayBuffer(Span(2,3,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(1,2,List(3),can,possible,false), Span(3,4,List(4),have,have-03,false), Span(8,9,List(5),girl,girl,false), Span(7,8,List(6),innocent,innocent-41,false), Span(5,6,List(7),pure,pure,false)),Map(2 -> "China", 5 -> girl, 7 -> pure, 1 -> name, 4 -> have-03, 6 -> innocent-41, 0 -> country, 3 -> possible),Map(n -> name, h -> have-03, p2 -> pure, g -> girl, p -> possible, i -> innocent-41, c -> country))),[Ljava.lang.String;@19b89d4,Annotation([Ljava.lang.String;@4bbf6d0e,[Ljava.lang.String;@30b6ffe0,[Ljava.lang.String;@791d1f8b),Annotation([Ljava.lang.String;@2415fc55,[Ljava.lang.String;@14f232c4,[Ledu.cmu.lti.nlp.amr.Dependency;@13bc8645),Annotation([Ljava.lang.String;@24c22fe,[Ljava.lang.String;@93081b6,[Ljava.lang.String;@cd1e646),Annotation([Ljava.lang.String;@7ba8c737,[Ljava.lang.String;@1890516e,[Ledu.cmu.lti.nlp.amr.Entity;@15a04efb))
AMR:
(c / country, name, n / name)
(g / girl, mod, p2 / pure)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, g / girl)
(i / innocent-41, ARG1, g / girl)
(n / name, op, "China")
(p / possible, domain, h / have-03)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 29,955 microseconds
Sentence: A story is now very shocking in the entertainment world. It is rumored that Hsu Yuki has been forced out because she refused to drink with a guest as arranged by the company and has to switch to work as a lawyer's assistant instead to make ends meet.

Oracle Span 1:  and => and
Oracle Span 2:  arranged => arrange-01
Oracle Span 3:  assistant => (person :ARG0-of assist-01)
Oracle Span 4:  because => cause-01
Oracle Span 5:  company => company
Oracle Span 6:  drink => drink-01
Oracle Span 7:  ends => end
Oracle Span 8:  entertainment => entertain-01
Oracle Span 9:  forced => force-01
Oracle Span 10:  guest => guest
Oracle Span 11:  Hsu Yuki => (person :name (name :op "Yuki" :op "Hsu"))
Oracle Span 12:  instead => instead
Oracle Span 13:  lawyer => lawyer
Oracle Span 14:  make => make-02
Oracle Span 15:  meet => meet-03
Oracle Span 16:  now => now
Oracle Span 17:  out => out
Oracle Span 18:  refused => refuse-01
Oracle Span 19:  rumored => rumor-01
Oracle Span 20:  shocking => shock-01
Oracle Span 21:  story => story
Oracle Span 22:  switch => switch-01
Oracle Span 23:  very => very
Oracle Span 24:  work => work-01
Oracle Span 25:  world => world
NER Entity: (person :name (name :op "Hsu" :op "Yuki"))
Spans:
Span 34-35:  and => and
Span 30-31:  arranged => arrange-01
Span 44-45:  assistant => (person :ARG0-of assist-01)
Span 21-22:  because => cause-01
Span 33-34:  company => company
Span 25-26:  drink => drink-01
Span 48-49:  ends => end
Span 8-9:  entertainment => entertain-01
Span 19-20:  forced => force-01
Span 28-29:  guest => guest
Span 15-17:  Hsu Yuki => (person :name (name :op "Yuki" :op "Hsu"))
Span 45-46:  instead => instead
Span 42-43:  lawyer => lawyer
Span 47-48:  make => make-02
Span 49-50:  meet => meet-03
Span 3-4:  now => now
Span 20-21:  out => out
Span 23-24:  refused => refuse-01
Span 13-14:  rumored => rumor-01
Span 5-6:  shocking => shock-01
Span 1-2:  story => story
Span 37-38:  switch => switch-01
Span 4-5:  very => very
Span 39-40:  work => work-01
Span 9-10:  world => world

 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of lawyer in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of assistant in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of instead in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ends in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of meet in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 50
Langrangian relaxation converged after 54 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of as in position 40
 *** WARNING: The dependency tree seems broken.  I can't find the head of a in position 41
 *** WARNING: The dependency tree seems broken.  I can't find the head of lawyer in position 42
 *** WARNING: The dependency tree seems broken.  I can't find the head of 's in position 43
 *** WARNING: The dependency tree seems broken.  I can't find the head of assistant in position 44
 *** WARNING: The dependency tree seems broken.  I can't find the head of instead in position 45
 *** WARNING: The dependency tree seems broken.  I can't find the head of to in position 46
 *** WARNING: The dependency tree seems broken.  I can't find the head of make in position 47
 *** WARNING: The dependency tree seems broken.  I can't find the head of ends in position 48
 *** WARNING: The dependency tree seems broken.  I can't find the head of meet in position 49
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 50
Oracle Span 34-35:  and => and
Oracle Span 30-31:  arranged => arrange-01
Oracle Span 44-45:  assistant => (person :ARG0-of assist-01)
Oracle Span 21-22:  because => cause-01
Oracle Span 33-34:  company => company
Oracle Span 25-26:  drink => drink-01
Oracle Span 48-49:  ends => end
Oracle Span 8-9:  entertainment => entertain-01
Oracle Span 19-20:  forced => force-01
Oracle Span 28-29:  guest => guest
Oracle Span 15-17:  Hsu Yuki => (person :name (name :op "Yuki" :op "Hsu"))
Oracle Span 45-46:  instead => instead
Oracle Span 42-43:  lawyer => lawyer
Oracle Span 47-48:  make => make-02
Oracle Span 49-50:  meet => meet-03
Oracle Span 3-4:  now => now
Oracle Span 20-21:  out => out
Oracle Span 23-24:  refused => refuse-01
Oracle Span 13-14:  rumored => rumor-01
Oracle Span 5-6:  shocking => shock-01
Oracle Span 1-2:  story => story
Oracle Span 37-38:  switch => switch-01
Oracle Span 4-5:  very => very
Oracle Span 39-40:  work => work-01
Oracle Span 9-10:  world => world

Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	story	_	NN	NN	_	6	nsubj	_	_
3	is	_	VBZ	VBZ	_	6	cop	_	_
4	now	_	RB	RB	_	6	advmod	_	_
5	very	_	RB	RB	_	6	advmod	_	_
6	shocking	_	JJ	JJ	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	entertainment	_	NN	NN	_	10	nn	_	_
10	world	_	NN	NN	_	7	pobj	_	_
11	.	_	.	.	_	6	punct	_	_
1	It	_	PRP	PRP	_	3	nsubjpass	_	_
2	is	_	VBZ	VBZ	_	3	auxpass	_	_
3	rumored	_	VBN	VBN	_	0	root	_	_
4	that	_	IN	IN	_	9	mark	_	_
5	Hsu	_	NNP	NNP	_	6	nn	_	_
6	Yuki	_	NNP	NNP	_	9	nsubjpass	_	_
7	has	_	VBZ	VBZ	_	9	aux	_	_
8	been	_	VBN	VBN	_	9	auxpass	_	_
9	forced	_	VBN	VBN	_	3	ccomp	_	_
10	out	_	RP	RP	_	9	prt	_	_
11	because	_	IN	IN	_	13	mark	_	_
12	she	_	PRP	PRP	_	13	nsubj	_	_
13	refused	_	VBD	VBD	_	9	advcl	_	_
14	to	_	TO	TO	_	15	aux	_	_
15	drink	_	VB	VB	_	13	xcomp	_	_
16	with	_	IN	IN	_	15	prep	_	_
17	a	_	DT	DT	_	18	det	_	_
18	guest	_	NN	NN	_	16	pobj	_	_
19	as	_	IN	IN	_	20	mark	_	_
20	arranged	_	VBD	VBD	_	15	advcl	_	_
21	by	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	company	_	NN	NN	_	21	pobj	_	_
24	and	_	CC	CC	_	20	cc	_	_
25	has	_	VBZ	VBZ	_	20	conj	_	_
26	to	_	TO	TO	_	27	aux	_	_
27	switch	_	VB	VB	_	25	xcomp	_	_
28	to	_	TO	TO	_	29	aux	_	_
29	work	_	VB	VB	_	27	xcomp	_	_
30	as	_	IN	IN	_	29	prep	_	_
31	a	_	DT	DT	_	32	det	_	_
32	lawyer	_	NN	NN	_	34	poss	_	_
33	's	_	POS	POS	_	32	possessive	_	_
34	assistant	_	NN	NN	_	30	pobj	_	_
35	instead	_	RB	RB	_	37	advmod	_	_
36	to	_	TO	TO	_	37	aux	_	_
37	make	_	VB	VB	_	34	vmod	_	_
38	ends	_	NNS	NNS	_	39	nsubj	_	_
39	meet	_	VB	VB	_	37	ccomp	_	_
40	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, f / force-01)
(a2 / assist-01, ARG0, p2 / person)
(a2 / assist-01, ARG1, l / lawyer)
(a3 / arrange-01, ARG0, c2 / company)
(a3 / arrange-01, ARG1, d / drink-01)
(c / cause-01, ARG0, r2 / refuse-01)
(c / cause-01, ARG1, f / force-01)
(d / drink-01, accompanier, g / guest)
(f / force-01, ARG1, p / person)
(f / force-01, ARG2, o / out)
(m2 / make-02, ARG0, p / person)
(m2 / make-02, ARG1, m3 / meet-03)
(m3 / meet-03, ARG0, e2 / end)
(n2 / name, op, "Hsu")
(n2 / name, op, "Yuki")
(p / person, name, n2 / name)
(r / rumor-01, ARG1, a / and)
(r2 / refuse-01, ARG0, p / person)
(r2 / refuse-01, ARG1, d / drink-01)
(s / shock-01, ARG0, s2 / story)
(s / shock-01, degree, v / very)
(s / shock-01, location, w / world)
(s / shock-01, time, n / now)
(s3 / switch-01, ARG1, p / person)
(s3 / switch-01, ARG2, w2 / work-01)
(w / world, mod, e / entertain-01)
(w2 / work-01, ARG0, p / person)
(w2 / work-01, ARG1, p2 / person)
(w2 / work-01, mod, i / instead)
(w2 / work-01, purpose, m2 / make-02)

Input(Some(Graph((multi-sentence :snt1 (shock-01 :location (world :mod entertain-01) :time now :degree very :ARG0 story) :snt2 (rumor-01 :ARG1 (and :op (obligate-01 :ARG2 (switch-01 :ARG2 (work-01 :mod instead :purpose (make-02 :ARG1 (meet-03 :ARG0 end) :ARG0 person) :ARG1 (person :ARG0-of (assist-01 :ARG1 lawyer)) :ARG0 person) :ARG1 person) :ARG1 person) :op (force-01 :ARG1-of (cause-01 :ARG0 (refuse-01 :ARG1 (drink-01 :ARG1-of (arrange-01 :ARG0 company) :accompanier guest) :ARG0 person)) :ARG2 out :ARG1 (person :name (name :op "Yuki" :op "Hsu")))))),ArrayBuffer(Span(15,17,List(0, 1, 2, 3),Hsu Yuki,(person :name (name :op "Yuki" :op "Hsu")),false), Span(5,6,List(4),shocking,shock-01,false), Span(9,10,List(5),world,world,false), Span(3,4,List(6),now,now,false), Span(4,5,List(7),very,very,false), Span(1,2,List(8),story,story,false), Span(13,14,List(9),rumored,rumor-01,false), Span(34,35,List(10),and,and,false), Span(37,38,List(11),switch,switch-01,false), Span(39,40,List(12),work,work-01,false), Span(45,46,List(13),instead,instead,false), Span(47,48,List(14),make,make-02,false), Span(49,50,List(15),meet,meet-03,false), Span(48,49,List(16),ends,end,false), Span(42,43,List(17),lawyer,lawyer,false), Span(19,20,List(18),forced,force-01,false), Span(21,22,List(19),because,cause-01,false), Span(23,24,List(20),refused,refuse-01,false), Span(25,26,List(21),drink,drink-01,false), Span(30,31,List(22),arranged,arrange-01,false), Span(33,34,List(23),company,company,false), Span(28,29,List(24),guest,guest,false), Span(20,21,List(25),out,out,false), Span(8,9,List(26),entertainment,entertain-01,false), Span(44,45,List(27, 28),assistant,(person :ARG0-of assist-01),false)),Map(2 -> "Yuki", 5 -> world, 27 -> person, 12 -> work-01, 15 -> meet-03, 8 -> story, 21 -> drink-01, 18 -> force-01, 24 -> guest, 7 -> very, 17 -> lawyer, 1 -> name, 23 -> company, 26 -> entertain-01, 4 -> shock-01, 11 -> switch-01, 14 -> make-02, 20 -> refuse-01, 28 -> assist-01, 6 -> now, 9 -> rumor-01, 0 -> person, 22 -> arrange-01, 16 -> end, 19 -> cause-01, 10 -> and, 3 -> "Hsu", 25 -> out, 13 -> instead),Map(e -> entertain-01, m3 -> meet-03, n -> now, w -> world, s2 -> story, m2 -> make-02, p2 -> person, e2 -> end, a3 -> arrange-01, s -> shock-01, v -> very, d -> drink-01, r2 -> refuse-01, g -> guest, p -> person, a -> and, w2 -> work-01, a2 -> assist-01, i -> instead, r -> rumor-01, c -> cause-01, s3 -> switch-01, l -> lawyer, f -> force-01, o -> out, c2 -> company, n2 -> name))),[Ljava.lang.String;@16c069df,Annotation([Ljava.lang.String;@2bec854f,[Ljava.lang.String;@31edaa7d,[Ljava.lang.String;@26adfd2d),Annotation([Ljava.lang.String;@3336e6b6,[Ljava.lang.String;@7c3fdb62,[Ledu.cmu.lti.nlp.amr.Dependency;@205d38da),Annotation([Ljava.lang.String;@6950ed69,[Ljava.lang.String;@6dd7b5a3,[Ljava.lang.String;@6f3187b0),Annotation([Ljava.lang.String;@2663e964,[Ljava.lang.String;@48b67364,[Ledu.cmu.lti.nlp.amr.Entity;@189cbd7c))
AMR:
(a / and, op, c2 / company)
(a / and, op, r2 / refuse-01)
(a2 / assist-01, ARG0, p2 / person)
(a2 / assist-01, ARG1, l / lawyer)
(a3 / arrange-01, ARG0, g / guest)
(a3 / arrange-01, ARG1, w2 / work-01)
(c / cause-01, ARG1, r2 / refuse-01)
(c / cause-01, ARG6, o / out)
(d / drink-01, ARG1, g / guest)
(e / entertain-01, ARG1, w / world)
(f / force-01, ARG1, p / person)
(f / force-01, ARG6, o / out)
(l / lawyer, domain, s2 / story)
(m2 / make-02, ARG1, e2 / end)
(m2 / make-02, ARG6, i / instead)
(m3 / meet-03, ARG0, p2 / person)
(m3 / meet-03, ARG1, e2 / end)
(n2 / name, op, "Hsu")
(n2 / name, op, "Yuki")
(p / person, name, n2 / name)
(r / rumor-01, ARG1, p / person)
(r2 / refuse-01, ARG1, d / drink-01)
(s / shock-01, ARG0, s2 / story)
(s / shock-01, ARG1, n / now)
(s / shock-01, ARG6, w / world)
(s / shock-01, degree, v / very)
(s3 / switch-01, ARG1, w2 / work-01)
(w2 / work-01, ARG1, p2 / person)

WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.0.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.0.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.2.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0
Decoded in 2,591,347 microseconds
Sentence: Much envied super stars often encounter social engagements or circumstances which they don't welcome but have to join in,

Oracle Span 1:  circumstances => circumstance
Oracle Span 2:  encounter => encounter-01
Oracle Span 3:  engagements => engage-01
Oracle Span 4:  envied => (person :ARG1-of envy-01)
Oracle Span 5:  join => join-05
Oracle Span 6:  Much => much
Oracle Span 7:  often => often
Oracle Span 8:  or => or
Oracle Span 9:  social => social
Oracle Span 10:  stars => star-01
Oracle Span 11:  super => super
Oracle Span 12:  welcome => welcome-01
Spans:
Span 9-10:  circumstances => circumstance
Span 5-6:  encounter => encounter-01
Span 7-8:  engagements => engage-01
Span 1-2:  envied => (person :ARG1-of envy-01)
Span 18-19:  join => join-05
Span 0-1:  Much => much
Span 4-5:  often => often
Span 8-9:  or => or
Span 6-7:  social => social
Span 3-4:  stars => star-01
Span 2-3:  super => super
Span 14-15:  welcome => welcome-01

Langrangian relaxation converged after 77 iterations. Delta = 0.0
Oracle Span 9-10:  circumstances => circumstance
Oracle Span 5-6:  encounter => encounter-01
Oracle Span 7-8:  engagements => engage-01
Oracle Span 1-2:  envied => (person :ARG1-of envy-01)
Oracle Span 18-19:  join => join-05
Oracle Span 0-1:  Much => much
Oracle Span 4-5:  often => often
Oracle Span 8-9:  or => or
Oracle Span 6-7:  social => social
Oracle Span 3-4:  stars => star-01
Oracle Span 2-3:  super => super
Oracle Span 14-15:  welcome => welcome-01

Dependencies:
1	Much	_	RB	RB	_	2	nsubj	_	_
2	envied	_	VBD	VBD	_	0	root	_	_
3	super	_	JJ	JJ	_	4	amod	_	_
4	stars	_	NNS	NNS	_	6	nsubj	_	_
5	often	_	RB	RB	_	6	advmod	_	_
6	encounter	_	VB	VB	_	2	ccomp	_	_
7	social	_	JJ	JJ	_	8	amod	_	_
8	engagements	_	NNS	NNS	_	6	dobj	_	_
9	or	_	CC	CC	_	8	cc	_	_
10	circumstances	_	NNS	NNS	_	8	conj	_	_
11	which	_	WDT	WDT	_	15	dobj	_	_
12	they	_	PRP	PRP	_	15	nsubj	_	_
13	do	_	VBP	VBP	_	15	aux	_	_
14	n't	_	RB	RB	_	15	neg	_	_
15	welcome	_	VB	VB	_	6	dep	_	_
16	but	_	CC	CC	_	6	cc	_	_
17	have	_	VB	VB	_	6	conj	_	_
18	to	_	TO	TO	_	19	aux	_	_
19	join	_	VB	VB	_	17	xcomp	_	_
20	in	_	RP	RP	_	19	prt	_	_
21	,	_	,	,	_	2	punct	_	_

Oracle:
(e / encounter-01, ARG0, p / person)
(e / encounter-01, ARG1, o2 / or)
(e / encounter-01, frequency, o / often)
(e2 / envy-01, ARG1, p / person)
(e2 / envy-01, degree, m / much)
(e3 / engage-01, mod, s3 / social)
(j / join-05, ARG0, p / person)
(j / join-05, ARG1, o2 / or)
(o2 / or, op, c2 / circumstance)
(o2 / or, op, e3 / engage-01)
(p / person, mod, s2 / super)
(s / star-01, ARG1, p / person)
(w / welcome-01, ARG0, p / person)
(w / welcome-01, ARG1, o2 / or)

Input(Some(Graph((encounter-01 :frequency often :ARG1 (or :ARG1-of (welcome-01 :concession-of (obligate-01 :ARG2 (join-05 :ARG0 person :ARG1 or) :ARG1 person) :polarity - :ARG0 person) :op circumstance :op (engage-01 :mod social)) :ARG0 (person :ARG1-of star-01 :ARG1-of (envy-01 :degree much) :mod super)),ArrayBuffer(Span(5,6,List(0),encounter,encounter-01,false), Span(4,5,List(1),often,often,false), Span(8,9,List(2),or,or,false), Span(14,15,List(3),welcome,welcome-01,false), Span(18,19,List(4),join,join-05,false), Span(9,10,List(5),circumstances,circumstance,false), Span(6,7,List(6),social,social,false), Span(2,3,List(7),super,super,false), Span(1,2,List(8, 9),envied,(person :ARG1-of envy-01),false), Span(0,1,List(10),Much,much,false), Span(3,4,List(11),stars,star-01,false), Span(7,8,List(12),engagements,engage-01,false)),Map(2 -> or, 5 -> circumstance, 12 -> engage-01, 8 -> person, 7 -> super, 1 -> often, 4 -> join-05, 11 -> star-01, 6 -> social, 9 -> envy-01, 0 -> encounter-01, 10 -> much, 3 -> welcome-01),Map(e -> encounter-01, w -> welcome-01, s2 -> super, e2 -> envy-01, j -> join-05, s -> star-01, m -> much, p -> person, o2 -> or, s3 -> social, o -> often, e3 -> engage-01, c2 -> circumstance))),[Ljava.lang.String;@7bf3a5d8,Annotation([Ljava.lang.String;@42e25b0b,[Ljava.lang.String;@39b43d60,[Ljava.lang.String;@44be0077),Annotation([Ljava.lang.String;@2205a05d,[Ljava.lang.String;@72ef8d15,[Ledu.cmu.lti.nlp.amr.Dependency;@6aa8e115),Annotation([Ljava.lang.String;@5e21e98f,[Ljava.lang.String;@51a9ad5e,[Ljava.lang.String;@5f20155b),Annotation([Ljava.lang.String;@72ade7e3,[Ljava.lang.String;@239105a8,[Ledu.cmu.lti.nlp.amr.Entity;@3fce8fd9))
AMR:
(e / encounter-01, ARG0, s / star-01)
(e / encounter-01, ARG2, o2 / or)
(e / encounter-01, frequency, o / often)
(e2 / envy-01, ARG0, m / much)
(e2 / envy-01, ARG1, p / person)
(e2 / envy-01, ARG6, s / star-01)
(e3 / engage-01, ARG1, s3 / social)
(j / join-05, ARG1, e3 / engage-01)
(o2 / or, op, c2 / circumstance)
(o2 / or, op, e3 / engage-01)
(s / star-01, ARG1, s2 / super)
(w / welcome-01, ARG1, e3 / engage-01)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.1.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 893,654 microseconds
Sentence: After all, there are many things they can't decide themselves 'cause that will have to do with many aspects and the interests of many people,

Oracle Span 1:  After => after-all
Oracle Span 2:  and => and
Oracle Span 3:  aspects => aspect
Oracle Span 4:  cause => cause-01
Oracle Span 5:  decide => decide-01
Oracle Span 6:  do => do-04
Oracle Span 7:  interests => interest
Oracle Span 8:  many => many
Oracle Span 9:  many => (person :quant many)
Oracle Span 10:  many => many
Oracle Span 11:  they => they
Oracle Span 12:  things => thing
Spans:
Span 0-1:  After => after-all
Span 22-23:  and => and
Span 21-22:  aspects => aspect
Span 13-14:  cause => cause-01
Span 10-11:  decide => decide-01
Span 18-19:  do => do-04
Span 24-25:  interests => interest
Span 5-6:  many => many
Span 20-21:  many => (person :quant many)
Span 26-27:  many => many
Span 7-8:  they => they
Span 6-7:  things => thing

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 0-1:  After => after-all
Oracle Span 22-23:  and => and
Oracle Span 21-22:  aspects => aspect
Oracle Span 13-14:  cause => cause-01
Oracle Span 10-11:  decide => decide-01
Oracle Span 18-19:  do => do-04
Oracle Span 24-25:  interests => interest
Oracle Span 5-6:  many => many
Oracle Span 20-21:  many => (person :quant many)
Oracle Span 26-27:  many => many
Oracle Span 7-8:  they => they
Oracle Span 6-7:  things => thing

Dependencies:
1	After	_	IN	IN	_	7	prep	_	_
2	all	_	DT	DT	_	1	pobj	_	_
3	,	_	,	,	_	7	punct	_	_
4	there	_	RB	RB	_	7	advmod	_	_
5	are	_	VBP	VBP	_	7	cop	_	_
6	many	_	JJ	JJ	_	7	amod	_	_
7	things	_	NNS	NNS	_	0	root	_	_
8	they	_	PRP	PRP	_	11	nsubj	_	_
9	ca	_	MD	MD	_	11	aux	_	_
10	n't	_	RB	RB	_	11	neg	_	_
11	decide	_	VB	VB	_	7	rcmod	_	_
12	themselves	_	PRP	PRP	_	16	nsubj	_	_
13	'cause	_	JJ	JJ	_	16	dep	_	_
14	that	_	WDT	WDT	_	16	nsubj	_	_
15	will	_	MD	MD	_	16	aux	_	_
16	have	_	VB	VB	_	11	xcomp	_	_
17	to	_	TO	TO	_	18	aux	_	_
18	do	_	VB	VB	_	16	xcomp	_	_
19	with	_	IN	IN	_	18	prep	_	_
20	many	_	JJ	JJ	_	21	amod	_	_
21	aspects	_	NNS	NNS	_	19	pobj	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	the	_	DT	DT	_	24	det	_	_
24	interests	_	NNS	NNS	_	21	conj	_	_
25	of	_	IN	IN	_	24	prep	_	_
26	many	_	JJ	JJ	_	27	amod	_	_
27	people	_	NNS	NNS	_	25	pobj	_	_
28	,	_	,	,	_	7	punct	_	_

Oracle:
(a / and, op, a2 / aspect)
(a / and, op, i / interest)
(a2 / aspect, quant, m2 / many)
(d / decide-01, ARG0, t / they)
(d / decide-01, ARG1, t2 / thing)
(d2 / do-04, ARG0, d / decide-01)
(d2 / do-04, ARG1, a / and)
(i / interest, poss, p2 / person)
(p2 / person, quant, m3 / many)
(t2 / thing, quant, m / many)

Input(Some(Graph((cause-01 :ARG1 (possible :polarity - :domain (decide-01 :ARG1 (thing :quant many) :ARG0 they) :mod after-all) :ARG0 (obligate-01 :ARG2 (do-04 :ARG1 (and :op (interest :poss (person :quant many)) :op (aspect :quant many)) :ARG0 decide-01))),ArrayBuffer(Span(13,14,List(0),cause,cause-01,false), Span(10,11,List(1),decide,decide-01,false), Span(6,7,List(2),things,thing,false), Span(5,6,List(3),many,many,false), Span(7,8,List(4),they,they,false), Span(18,19,List(5),do,do-04,false), Span(22,23,List(6),and,and,false), Span(24,25,List(7),interests,interest,false), Span(20,21,List(8, 9),many,(person :quant many),false), Span(21,22,List(10),aspects,aspect,false), Span(26,27,List(11),many,many,false), Span(0,1,List(12),After,after-all,false)),Map(2 -> thing, 5 -> do-04, 12 -> after-all, 8 -> person, 7 -> interest, 1 -> decide-01, 4 -> they, 11 -> many, 6 -> and, 9 -> many, 0 -> cause-01, 10 -> aspect, 3 -> many),Map(m3 -> many, t -> they, m2 -> many, p2 -> person, a3 -> after-all, m -> many, d -> decide-01, a -> and, d2 -> do-04, t2 -> thing, a2 -> aspect, i -> interest, c -> cause-01))),[Ljava.lang.String;@609bcfb6,Annotation([Ljava.lang.String;@7d94beb9,[Ljava.lang.String;@560348e6,[Ljava.lang.String;@1df8b5b8),Annotation([Ljava.lang.String;@23202fce,[Ljava.lang.String;@7b993c65,[Ledu.cmu.lti.nlp.amr.Dependency;@37911f88),Annotation([Ljava.lang.String;@6f1c29b7,[Ljava.lang.String;@4d6025c5,[Ljava.lang.String;@7f284218),Annotation([Ljava.lang.String;@407a7f2a,[Ljava.lang.String;@4ea5b703,[Ledu.cmu.lti.nlp.amr.Entity;@2a7ed1f))
AMR:
(a / and, op, i / interest)
(c / cause-01, ARG0, a / and)
(c / cause-01, ARG1, d / decide-01)
(d / decide-01, ARG0, t / they)
(d / decide-01, ARG1, t2 / thing)
(d / decide-01, time, a3 / after-all)
(d2 / do-04, ARG0, a / and)
(d2 / do-04, ARG1, a2 / aspect)
(d2 / do-04, ARG2, m2 / many)
(m2 / many, mod, p2 / person)
(p2 / person, quant, m3 / many)
(t2 / thing, quant, m / many)

WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 462,172 microseconds
Sentence: Sometimes a dinner party which seems very normal for us ordinary people may not be that simple for stars as we imagined.

Oracle Span 1:  dinner => dinner
Oracle Span 2:  imagined => imagine-01
Oracle Span 3:  may => possible
Oracle Span 4:  normal => normal
Oracle Span 5:  ordinary => (person :mod ordinary)
Oracle Span 6:  party => party
Oracle Span 7:  seems => seem-01
Oracle Span 8:  simple => simple
Oracle Span 9:  Sometimes => sometimes
Oracle Span 10:  stars => (person :ARG1-of star-01)
Oracle Span 11:  that => that
Oracle Span 12:  very => very
Oracle Span 13:  we => we
Spans:
Span 2-3:  dinner => dinner
Span 21-22:  imagined => imagine-01
Span 12-13:  may => possible
Span 7-8:  normal => normal
Span 10-11:  ordinary => (person :mod ordinary)
Span 3-4:  party => party
Span 5-6:  seems => seem-01
Span 16-17:  simple => simple
Span 0-1:  Sometimes => sometimes
Span 18-19:  stars => (person :ARG1-of star-01)
Span 15-16:  that => that
Span 6-7:  very => very
Span 20-21:  we => we

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 2-3:  dinner => dinner
Oracle Span 21-22:  imagined => imagine-01
Oracle Span 12-13:  may => possible
Oracle Span 7-8:  normal => normal
Oracle Span 10-11:  ordinary => (person :mod ordinary)
Oracle Span 3-4:  party => party
Oracle Span 5-6:  seems => seem-01
Oracle Span 16-17:  simple => simple
Oracle Span 0-1:  Sometimes => sometimes
Oracle Span 18-19:  stars => (person :ARG1-of star-01)
Oracle Span 15-16:  that => that
Oracle Span 6-7:  very => very
Oracle Span 20-21:  we => we

Dependencies:
1	Sometimes	_	RB	RB	_	17	advmod	_	_
2	a	_	DT	DT	_	4	det	_	_
3	dinner	_	NN	NN	_	4	nn	_	_
4	party	_	NN	NN	_	17	nsubj	_	_
5	which	_	WDT	WDT	_	6	nsubj	_	_
6	seems	_	VBZ	VBZ	_	4	rcmod	_	_
7	very	_	RB	RB	_	8	advmod	_	_
8	normal	_	JJ	JJ	_	12	amod	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	us	_	PRP	PRP	_	9	pobj	_	_
11	ordinary	_	JJ	JJ	_	12	amod	_	_
12	people	_	NNS	NNS	_	6	xcomp	_	_
13	may	_	MD	MD	_	17	aux	_	_
14	not	_	RB	RB	_	17	neg	_	_
15	be	_	VB	VB	_	17	cop	_	_
16	that	_	RB	RB	_	17	advmod	_	_
17	simple	_	JJ	JJ	_	0	root	_	_
18	for	_	IN	IN	_	17	prep	_	_
19	stars	_	NNS	NNS	_	18	pobj	_	_
20	as	_	IN	IN	_	22	mark	_	_
21	we	_	PRP	PRP	_	22	nsubj	_	_
22	imagined	_	VBD	VBD	_	17	advcl	_	_
23	.	_	.	.	_	17	punct	_	_

Oracle:
(i / imagine-01, ARG0, w / we)
(n / normal, degree, v / very)
(p / party, mod, d / dinner)
(p / party, mod, n / normal)
(p2 / person, mod, o / ordinary)
(p3 / possible, domain, s3 / simple)
(p3 / possible, frequency, s2 / sometimes)
(s / seem-01, ARG1, p / party)
(s / seem-01, ARG2, w / we)
(s3 / simple, degree, t / that)
(s3 / simple, domain, p / party)
(s3 / simple, prep-for, p4 / person)
(s4 / star-01, ARG1, p4 / person)
(w / we, mod, p2 / person)

Input(Some(Graph((possible :frequency sometimes :domain (simple :ARG1-of (resemble-01 :ARG2 (imagine-01 :ARG0 we)) :degree that :domain (party :ARG1-of (seem-01 :ARG2 (we :mod (person :mod ordinary))) :mod dinner :mod (normal :degree very)) :prep-for (person :ARG1-of star-01) :polarity -)),ArrayBuffer(Span(12,13,List(0),may,possible,false), Span(0,1,List(1),Sometimes,sometimes,false), Span(16,17,List(2),simple,simple,false), Span(21,22,List(3),imagined,imagine-01,false), Span(15,16,List(4),that,that,false), Span(3,4,List(5),party,party,false), Span(5,6,List(6),seems,seem-01,false), Span(20,21,List(7),we,we,false), Span(10,11,List(8, 9),ordinary,(person :mod ordinary),false), Span(2,3,List(10),dinner,dinner,false), Span(7,8,List(11),normal,normal,false), Span(6,7,List(12),very,very,false), Span(18,19,List(13, 14),stars,(person :ARG1-of star-01),false)),Map(2 -> simple, 5 -> party, 12 -> very, 8 -> person, 7 -> we, 1 -> sometimes, 4 -> that, 11 -> normal, 14 -> star-01, 6 -> seem-01, 9 -> ordinary, 0 -> possible, 10 -> dinner, 3 -> imagine-01, 13 -> person),Map(n -> normal, w -> we, s2 -> sometimes, t -> that, p2 -> person, s -> seem-01, s4 -> star-01, v -> very, d -> dinner, p -> party, p4 -> person, i -> imagine-01, s3 -> simple, o -> ordinary, p3 -> possible))),[Ljava.lang.String;@3fa247d1,Annotation([Ljava.lang.String;@2cb2fc20,[Ljava.lang.String;@4f4c4b1a,[Ljava.lang.String;@723e88f9),Annotation([Ljava.lang.String;@5f0fd5a0,[Ljava.lang.String;@64e7619d,[Ledu.cmu.lti.nlp.amr.Dependency;@495ee280),Annotation([Ljava.lang.String;@4fa1c212,[Ljava.lang.String;@6ea2bc93,[Ljava.lang.String;@3116c353),Annotation([Ljava.lang.String;@f627d13,[Ljava.lang.String;@4e928fbf,[Ledu.cmu.lti.nlp.amr.Entity;@352ff4da))
AMR:
(i / imagine-01, ARG0, w / we)
(i / imagine-01, ARG1, s3 / simple)
(n / normal, degree, v / very)
(p / party, mod, d / dinner)
(p2 / person, mod, n / normal)
(p2 / person, mod, o / ordinary)
(p3 / possible, domain, s3 / simple)
(s / seem-01, ARG0, p / party)
(s / seem-01, ARG1, s3 / simple)
(s / seem-01, ARG6, n / normal)
(s2 / sometimes, op, s3 / simple)
(s3 / simple, location, p4 / person)
(s3 / simple, mod, t / that)
(s4 / star-01, ARG1, p4 / person)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.4.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.2
WARNING: makeIds can't find span Id: 0.0.2.2.0
WARNING: makeIds can't find span Id: 0.0.2.2.0.0
WARNING: makeIds can't find span Id: 0.0.2.2.0.0.0
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 573,980 microseconds
Sentence: A star will have lots of contracts and her source of money will be rolling if she tackles well; If she doesn't tack well, what comes after her heel would be forcing out or even frame-ups ...

Oracle Span 1:  and => and
Oracle Span 2:  comes => come-02
Oracle Span 3:  contracts => contract-02
Oracle Span 4:  even => even
Oracle Span 5:  forcing => force-01
Oracle Span 6:  frame => frame-02
Oracle Span 7:  have => have-03
Oracle Span 8:  heel => heel
Oracle Span 9:  lots => lot
Oracle Span 10:  money => money
Oracle Span 11:  or => or
Oracle Span 12:  out => out
Oracle Span 13:  rolling => roll-01
Oracle Span 14:  she => she
Oracle Span 15:  source => source-01
Oracle Span 16:  star => (person :ARG1-of star-01)
Oracle Span 17:  tack => tack-00
Oracle Span 18:  tackles => tackle-01
Spans:
Span 7-8:  and => and
Span 28-29:  comes => come-02
Span 6-7:  contracts => contract-02
Span 37-38:  even => even
Span 34-35:  forcing => force-01
Span 38-39:  frame => frame-02
Span 3-4:  have => have-03
Span 31-32:  heel => heel
Span 4-5:  lots => lot
Span 11-12:  money => money
Span 36-37:  or => or
Span 35-36:  out => out
Span 14-15:  rolling => roll-01
Span 16-17:  she => she
Span 9-10:  source => source-01
Span 1-2:  star => (person :ARG1-of star-01)
Span 24-25:  tack => tack-00
Span 17-18:  tackles => tackle-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 28-29:  comes => come-02
Oracle Span 6-7:  contracts => contract-02
Oracle Span 37-38:  even => even
Oracle Span 34-35:  forcing => force-01
Oracle Span 38-39:  frame => frame-02
Oracle Span 3-4:  have => have-03
Oracle Span 31-32:  heel => heel
Oracle Span 4-5:  lots => lot
Oracle Span 11-12:  money => money
Oracle Span 36-37:  or => or
Oracle Span 35-36:  out => out
Oracle Span 14-15:  rolling => roll-01
Oracle Span 16-17:  she => she
Oracle Span 9-10:  source => source-01
Oracle Span 1-2:  star => (person :ARG1-of star-01)
Oracle Span 24-25:  tack => tack-00
Oracle Span 17-18:  tackles => tackle-01

Dependencies:
1	A	_	DT	DT	_	2	det	_	_
2	star	_	NN	NN	_	4	nsubj	_	_
3	will	_	MD	MD	_	4	aux	_	_
4	have	_	VB	VB	_	0	root	_	_
5	lots	_	NNS	NNS	_	4	dobj	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	contracts	_	NNS	NNS	_	6	pobj	_	_
8	and	_	CC	CC	_	4	cc	_	_
9	her	_	PRP$	PRP$	_	10	poss	_	_
10	source	_	NN	NN	_	15	nsubj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	money	_	NN	NN	_	11	pobj	_	_
13	will	_	MD	MD	_	15	aux	_	_
14	be	_	VB	VB	_	15	aux	_	_
15	rolling	_	VBG	VBG	_	4	conj	_	_
16	if	_	IN	IN	_	18	mark	_	_
17	she	_	PRP	PRP	_	18	nsubj	_	_
18	tackles	_	VBZ	VBZ	_	15	advcl	_	_
19	well	_	RB	RB	_	18	advmod	_	_
20	;	_	:	:	_	4	punct	_	_
21	If	_	IN	IN	_	25	mark	_	_
22	she	_	PRP	PRP	_	25	nsubj	_	_
23	does	_	VBZ	VBZ	_	25	aux	_	_
24	n't	_	RB	RB	_	25	neg	_	_
25	tack	_	VB	VB	_	29	advcl	_	_
26	well	_	RB	RB	_	25	advmod	_	_
27	,	_	,	,	_	29	punct	_	_
28	what	_	WDT	WDT	_	29	nsubj	_	_
29	comes	_	VBZ	VBZ	_	4	parataxis	_	_
30	after	_	IN	IN	_	35	mark	_	_
31	her	_	PRP$	PRP$	_	32	poss	_	_
32	heel	_	NN	NN	_	35	nsubj	_	_
33	would	_	MD	MD	_	35	aux	_	_
34	be	_	VB	VB	_	35	aux	_	_
35	forcing	_	VBG	VBG	_	29	advcl	_	_
36	out	_	RP	RP	_	35	prt	_	_
37	or	_	CC	CC	_	38	cc	_	_
38	even	_	RB	RB	_	39	num	_	_
39	frame-ups	_	NNS	NNS	_	35	dobj	_	_
40	...	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, h / have-03)
(a / and, op, r / roll-01)
(c2 / come-02, ARG0, o2 / or)
(c2 / come-02, ARG1, h2 / heel)
(c2 / come-02, condition, t3 / tack-00)
(c3 / contract-02, quant, l / lot)
(f2 / force-01, ARG2, o / out)
(f3 / frame-02, mod, e / even)
(h / have-03, ARG0, p / person)
(h / have-03, ARG1, c3 / contract-02)
(o2 / or, op, f2 / force-01)
(o2 / or, op, f3 / frame-02)
(r / roll-01, condition, t2 / tackle-01)
(s / she, part, h2 / heel)
(s2 / source-01, ARG1, m2 / money)
(s2 / source-01, ARG2, r / roll-01)
(s3 / star-01, ARG1, p / person)
(t2 / tackle-01, ARG0, p / person)
(t3 / tack-00, ARG0, s / she)

Input(Some(Graph((multi-sentence :snt1 (and :op (roll-01 :condition (tackle-01 :manner good :ARG0 person) :ARG2-of (source-01 :ARG1 money) :ARG1 (thing :beneficiary person)) :op (have-03 :ARG1 (contract-02 :quant lot) :ARG0 (person :ARG1-of star-01))) :snt2 (come-02 :condition (tack-00 :manner good :polarity - :ARG0 she) :ARG1 (heel :part-of she) :ARG0 (or :op (frame-02 :mod even) :op (force-01 :ARG2 out)))),ArrayBuffer(Span(7,8,List(0),and,and,false), Span(14,15,List(1),rolling,roll-01,false), Span(17,18,List(2),tackles,tackle-01,false), Span(9,10,List(3),source,source-01,false), Span(11,12,List(4),money,money,false), Span(3,4,List(5),have,have-03,false), Span(6,7,List(6),contracts,contract-02,false), Span(4,5,List(7),lots,lot,false), Span(1,2,List(8, 9),star,(person :ARG1-of star-01),false), Span(28,29,List(10),comes,come-02,false), Span(24,25,List(11),tack,tack-00,false), Span(31,32,List(12),heel,heel,false), Span(16,17,List(13),she,she,false), Span(36,37,List(14),or,or,false), Span(38,39,List(15),frame,frame-02,false), Span(37,38,List(16),even,even,false), Span(34,35,List(17),forcing,force-01,false), Span(35,36,List(18),out,out,false)),Map(2 -> tackle-01, 5 -> have-03, 12 -> heel, 15 -> frame-02, 8 -> person, 18 -> out, 7 -> lot, 17 -> force-01, 1 -> roll-01, 4 -> money, 11 -> tack-00, 14 -> or, 6 -> contract-02, 9 -> star-01, 0 -> and, 16 -> even, 10 -> come-02, 3 -> source-01, 13 -> she),Map(e -> even, h -> have-03, h2 -> heel, s2 -> source-01, m2 -> money, s -> she, t3 -> tack-00, p -> person, c3 -> contract-02, a -> and, o2 -> or, f3 -> frame-02, t2 -> tackle-01, r -> roll-01, s3 -> star-01, f2 -> force-01, l -> lot, o -> out, c2 -> come-02))),[Ljava.lang.String;@3224a577,Annotation([Ljava.lang.String;@2e32ccc5,[Ljava.lang.String;@748741cb,[Ljava.lang.String;@3e44f2a5),Annotation([Ljava.lang.String;@295cf707,[Ljava.lang.String;@1130520d,[Ledu.cmu.lti.nlp.amr.Dependency;@5f77d0f9),Annotation([Ljava.lang.String;@463fd068,[Ljava.lang.String;@895e367,[Ljava.lang.String;@1b266842),Annotation([Ljava.lang.String;@7a3793c7,[Ljava.lang.String;@42b3b079,[Ledu.cmu.lti.nlp.amr.Entity;@651aed93))
AMR:
(a / and, op, r / roll-01)
(c2 / come-02, ARG1, h2 / heel)
(c3 / contract-02, ARG1, c2 / come-02)
(f2 / force-01, ARG0, h2 / heel)
(f2 / force-01, ARG1, f3 / frame-02)
(f2 / force-01, ARG5, o / out)
(f3 / frame-02, ARG1, e / even)
(h / have-03, ARG0, p / person)
(h / have-03, ARG1, l / lot)
(m2 / money, location, a / and)
(o2 / or, op, e / even)
(r / roll-01, ARG0, p / person)
(r / roll-01, ARG1, t2 / tackle-01)
(s2 / source-01, ARG2, c3 / contract-02)
(s3 / star-01, ARG1, p / person)
(t2 / tackle-01, ARG0, s / she)
(t2 / tackle-01, ARG1, s2 / source-01)
(t3 / tack-00, ARG1, f2 / force-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
Decoded in 1,061,032 microseconds
Sentence: There are two kinds of smart female stars. Those of the first kind always hold very high integrity and sternly reject all such invitations;

Oracle Span 1:  all => all
Oracle Span 2:  always => always
Oracle Span 3:  and => and
Oracle Span 4:  female => female
Oracle Span 5:  high => high
Oracle Span 6:  hold => hold-01
Oracle Span 7:  integrity => integrity
Oracle Span 8:  invitations => invite-01
Oracle Span 9:  kind => kind
Oracle Span 10:  kinds => kind
Oracle Span 11:  reject => reject-01
Oracle Span 12:  smart => smart
Oracle Span 13:  stars => star-01
Oracle Span 14:  sternly => stern
Oracle Span 15:  such => such
Oracle Span 16:  two => 2
Oracle Span 17:  very => very
Spans:
Span 22-23:  all => all
Span 14-15:  always => always
Span 19-20:  and => and
Span 6-7:  female => female
Span 17-18:  high => high
Span 15-16:  hold => hold-01
Span 18-19:  integrity => integrity
Span 24-25:  invitations => invite-01
Span 13-14:  kind => kind
Span 3-4:  kinds => kind
Span 21-22:  reject => reject-01
Span 5-6:  smart => smart
Span 7-8:  stars => star-01
Span 20-21:  sternly => stern
Span 23-24:  such => such
Span 2-3:  two => 2
Span 16-17:  very => very

 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of integrity in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of sternly in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of reject in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of all in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of invitations in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of ; in position 25
Langrangian relaxation converged after 28 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of high in position 17
 *** WARNING: The dependency tree seems broken.  I can't find the head of integrity in position 18
 *** WARNING: The dependency tree seems broken.  I can't find the head of and in position 19
 *** WARNING: The dependency tree seems broken.  I can't find the head of sternly in position 20
 *** WARNING: The dependency tree seems broken.  I can't find the head of reject in position 21
 *** WARNING: The dependency tree seems broken.  I can't find the head of all in position 22
 *** WARNING: The dependency tree seems broken.  I can't find the head of such in position 23
 *** WARNING: The dependency tree seems broken.  I can't find the head of invitations in position 24
 *** WARNING: The dependency tree seems broken.  I can't find the head of ; in position 25
Oracle Span 22-23:  all => all
Oracle Span 14-15:  always => always
Oracle Span 19-20:  and => and
Oracle Span 6-7:  female => female
Oracle Span 17-18:  high => high
Oracle Span 15-16:  hold => hold-01
Oracle Span 18-19:  integrity => integrity
Oracle Span 24-25:  invitations => invite-01
Oracle Span 13-14:  kind => kind
Oracle Span 3-4:  kinds => kind
Oracle Span 21-22:  reject => reject-01
Oracle Span 5-6:  smart => smart
Oracle Span 7-8:  stars => star-01
Oracle Span 20-21:  sternly => stern
Oracle Span 23-24:  such => such
Oracle Span 2-3:  two => 2
Oracle Span 16-17:  very => very

Dependencies:
1	There	_	EX	EX	_	2	expl	_	_
2	are	_	VBP	VBP	_	0	root	_	_
3	two	_	CD	CD	_	4	num	_	_
4	kinds	_	NNS	NNS	_	2	nsubj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	smart	_	JJ	JJ	_	8	amod	_	_
7	female	_	JJ	JJ	_	8	amod	_	_
8	stars	_	NNS	NNS	_	5	pobj	_	_
9	.	_	.	.	_	2	punct	_	_
1	Those	_	DT	DT	_	7	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	5	det	_	_
4	first	_	JJ	JJ	_	5	amod	_	_
5	kind	_	NN	NN	_	2	pobj	_	_
6	always	_	RB	RB	_	7	advmod	_	_
7	hold	_	VBP	VBP	_	0	root	_	_
8	very	_	RB	RB	_	9	advmod	_	_
9	high	_	JJ	JJ	_	10	amod	_	_
10	integrity	_	NN	NN	_	7	dobj	_	_
11	and	_	CC	CC	_	7	cc	_	_
12	sternly	_	RB	RB	_	13	advmod	_	_
13	reject	_	VBP	VBP	_	7	conj	_	_
14	all	_	DT	DT	_	16	det	_	_
15	such	_	JJ	JJ	_	16	amod	_	_
16	invitations	_	NNS	NNS	_	13	dobj	_	_
17	;	_	:	:	_	7	punct	_	_

Oracle:
(a / and, op, h / hold-01)
(a / and, op, r / reject-01)
(f2 / female, mod, s4 / smart)
(h / hold-01, ARG1, i / integrity)
(h / hold-01, time, a2 / always)
(h2 / high, degree, v / very)
(i / integrity, mod, h2 / high)
(i2 / invite-01, mod, s2 / such)
(i2 / invite-01, quant, a3 / all)
(k / kind, domain, f2 / female)
(k / kind, quant, 2 / 2)
(r / reject-01, ARG1, i2 / invite-01)
(r / reject-01, manner, s3 / stern)
(s / star-01, ARG1, f2 / female)

Input(Some(Graph((multi-sentence :snt2 (and :op (reject-01 :manner stern :ARG1 (invite-01 :quant all :mod such) :ARG0 person) :op (hold-01 :time always :ARG1 (integrity :mod (high :degree very)) :ARG0 (person :mod (kind :ord (ordinal-entity :value 1)) :mod that))) :snt1 (kind :domain (female :mod smart :ARG1-of star-01) :quant 2)),ArrayBuffer(Span(19,20,List(0),and,and,false), Span(21,22,List(1),reject,reject-01,false), Span(23,24,List(2),such,such,false), Span(22,23,List(3),all,all,false), Span(15,16,List(4),hold,hold-01,false), Span(14,15,List(5),always,always,false), Span(18,19,List(6),integrity,integrity,false), Span(17,18,List(7),high,high,false), Span(16,17,List(8),very,very,false), Span(3,4,List(9),kinds,kind,false), Span(13,14,List(10),kind,kind,false), Span(6,7,List(11),female,female,false), Span(5,6,List(12),smart,smart,false), Span(7,8,List(13),stars,star-01,false), Span(2,3,List(14),two,2,false), Span(20,21,List(15),sternly,stern,false), Span(24,25,List(16),invitations,invite-01,false)),Map(2 -> such, 5 -> always, 12 -> smart, 15 -> stern, 8 -> very, 7 -> high, 1 -> reject-01, 4 -> hold-01, 11 -> female, 14 -> 2, 6 -> integrity, 9 -> kind, 0 -> and, 16 -> invite-01, 10 -> kind, 3 -> all, 13 -> star-01),Map(k2 -> kind, h -> hold-01, 2 -> 2, h2 -> high, s2 -> such, k -> kind, a3 -> all, s -> star-01, s4 -> smart, v -> very, a -> and, i2 -> invite-01, i -> integrity, a2 -> always, r -> reject-01, s3 -> stern, f2 -> female))),[Ljava.lang.String;@4dd6fd0a,Annotation([Ljava.lang.String;@bb9e6dc,[Ljava.lang.String;@5456afaa,[Ljava.lang.String;@6692b6c6),Annotation([Ljava.lang.String;@1cd629b3,[Ljava.lang.String;@589da3f3,[Ledu.cmu.lti.nlp.amr.Dependency;@39d76cb5),Annotation([Ljava.lang.String;@4a00d9cf,[Ljava.lang.String;@6736fa8d,[Ljava.lang.String;@52815fa3),Annotation([Ljava.lang.String;@50313382,[Ljava.lang.String;@1cb346ea,[Ledu.cmu.lti.nlp.amr.Entity;@4c012563))
AMR:
(a / and, op, i / integrity)
(a / and, op, s3 / stern)
(h / hold-01, ARG0, k / kind)
(h / hold-01, ARG1, f2 / female)
(h / hold-01, ARG6, a2 / always)
(i / integrity, mod, h2 / high)
(i2 / invite-01, ARG1, s2 / such)
(k2 / kind, quant, 2 / 2)
(r / reject-01, ARG0, a3 / all)
(r / reject-01, ARG1, i2 / invite-01)
(r / reject-01, ARG2, k / kind)
(r / reject-01, ARG6, s3 / stern)
(s / star-01, ARG1, v / very)
(s / star-01, consist, k2 / kind)
(s / star-01, mod, f2 / female)
(s / star-01, mod, s4 / smart)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 586,179 microseconds
Sentence: the second kind are good at playing the trick and making their objectives achieved with their seed money,

Oracle Span 1:  achieved => achieve-01
Oracle Span 2:  and => and
Oracle Span 3:  good => good-41
Oracle Span 4:  kind => (person :mod kind)
Oracle Span 5:  money => money
Oracle Span 6:  objectives => objective
Oracle Span 7:  playing => play-01
Oracle Span 8:  seed => seed
Oracle Span 9:  trick => trick
Spans:
Span 13-14:  achieved => achieve-01
Span 9-10:  and => and
Span 4-5:  good => good-41
Span 2-3:  kind => (person :mod kind)
Span 17-18:  money => money
Span 12-13:  objectives => objective
Span 6-7:  playing => play-01
Span 16-17:  seed => seed
Span 8-9:  trick => trick

Langrangian relaxation converged after 68 iterations. Delta = 0.0
Oracle Span 13-14:  achieved => achieve-01
Oracle Span 9-10:  and => and
Oracle Span 4-5:  good => good-41
Oracle Span 2-3:  kind => (person :mod kind)
Oracle Span 17-18:  money => money
Oracle Span 12-13:  objectives => objective
Oracle Span 6-7:  playing => play-01
Oracle Span 16-17:  seed => seed
Oracle Span 8-9:  trick => trick

Dependencies:
1	the	_	DT	DT	_	3	det	_	_
2	second	_	JJ	JJ	_	3	amod	_	_
3	kind	_	NN	NN	_	5	nsubj	_	_
4	are	_	VBP	VBP	_	5	cop	_	_
5	good	_	JJ	JJ	_	0	root	_	_
6	at	_	IN	IN	_	5	prep	_	_
7	playing	_	VBG	VBG	_	6	pcomp	_	_
8	the	_	DT	DT	_	9	det	_	_
9	trick	_	NN	NN	_	7	dobj	_	_
10	and	_	CC	CC	_	7	cc	_	_
11	making	_	VBG	VBG	_	7	conj	_	_
12	their	_	PRP$	PRP$	_	13	poss	_	_
13	objectives	_	NNS	NNS	_	11	dobj	_	_
14	achieved	_	VBN	VBN	_	13	vmod	_	_
15	with	_	IN	IN	_	14	prep	_	_
16	their	_	PRP$	PRP$	_	18	poss	_	_
17	seed	_	NN	NN	_	18	nn	_	_
18	money	_	NN	NN	_	15	pobj	_	_
19	,	_	,	,	_	5	punct	_	_

Oracle:
(a3 / and, op, a4 / achieve-01)
(a3 / and, op, p4 / play-01)
(a4 / achieve-01, ARG0, p3 / person)
(a4 / achieve-01, ARG1, o2 / objective)
(a4 / achieve-01, instrument, m2 / money)
(g3 / good-41, ARG1, p3 / person)
(g3 / good-41, ARG2, a3 / and)
(m2 / money, mod, s2 / seed)
(m2 / money, poss, p3 / person)
(o2 / objective, poss, p3 / person)
(p3 / person, mod, k2 / kind)
(p4 / play-01, ARG0, p3 / person)
(p4 / play-01, ARG1, t / trick)

Input(Some(Graph((good-41 :ARG2 (and :op (achieve-01 :instrument (money :mod seed :poss person) :ARG1 (objective :poss person) :ARG0 person) :op (play-01 :ARG1 trick :ARG0 person)) :ARG1 (person :mod (kind :ord (ordinal-entity :value 2)))),ArrayBuffer(Span(4,5,List(0),good,good-41,false), Span(9,10,List(1),and,and,false), Span(13,14,List(2),achieved,achieve-01,false), Span(17,18,List(3),money,money,false), Span(16,17,List(4),seed,seed,false), Span(12,13,List(5),objectives,objective,false), Span(6,7,List(6),playing,play-01,false), Span(8,9,List(7),trick,trick,false), Span(2,3,List(8, 9),kind,(person :mod kind),false)),Map(2 -> achieve-01, 5 -> objective, 8 -> person, 7 -> trick, 1 -> and, 4 -> seed, 6 -> play-01, 9 -> kind, 0 -> good-41, 3 -> money),Map(k2 -> kind, g3 -> good-41, t -> trick, s2 -> seed, m2 -> money, a3 -> and, p4 -> play-01, o2 -> objective, p3 -> person, a4 -> achieve-01))),[Ljava.lang.String;@14a50707,Annotation([Ljava.lang.String;@4d518b32,[Ljava.lang.String;@4bd31064,[Ljava.lang.String;@e3c0e40),Annotation([Ljava.lang.String;@329dbdbf,[Ljava.lang.String;@7354b8c5,[Ledu.cmu.lti.nlp.amr.Dependency;@20d7d6fb),Annotation([Ljava.lang.String;@4ef782af,[Ljava.lang.String;@11d8ae8b,[Ljava.lang.String;@479cbee5),Annotation([Ljava.lang.String;@59e2d8e3,[Ljava.lang.String;@2b72cb8a,[Ledu.cmu.lti.nlp.amr.Entity;@7f8a9499))
AMR:
(a3 / and, op, p4 / play-01)
(a4 / achieve-01, ARG0, m2 / money)
(a4 / achieve-01, ARG1, o2 / objective)
(g3 / good-41, ARG1, p3 / person)
(g3 / good-41, ARG2, p4 / play-01)
(m2 / money, mod, s2 / seed)
(p3 / person, mod, k2 / kind)
(p4 / play-01, ARG1, t / trick)
(p4 / play-01, ARG6, o2 / objective)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 530,026 microseconds
Sentence: It's rumored that even some super female stars won their first roles in this way.

Oracle Span 1:  even => even
Oracle Span 2:  female => female
Oracle Span 3:  roles => role
Oracle Span 4:  rumored => rumor-01
Oracle Span 5:  some => some
Oracle Span 6:  stars => star-01
Oracle Span 7:  super => super
Oracle Span 8:  this => this
Oracle Span 9:  way => way
Oracle Span 10:  won => win-01
Spans:
Span 4-5:  even => even
Span 7-8:  female => female
Span 12-13:  roles => role
Span 2-3:  rumored => rumor-01
Span 5-6:  some => some
Span 8-9:  stars => star-01
Span 6-7:  super => super
Span 14-15:  this => this
Span 15-16:  way => way
Span 9-10:  won => win-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 4-5:  even => even
Oracle Span 7-8:  female => female
Oracle Span 12-13:  roles => role
Oracle Span 2-3:  rumored => rumor-01
Oracle Span 5-6:  some => some
Oracle Span 8-9:  stars => star-01
Oracle Span 6-7:  super => super
Oracle Span 14-15:  this => this
Oracle Span 15-16:  way => way
Oracle Span 9-10:  won => win-01

Dependencies:
1	It	_	PRP	PRP	_	3	nsubjpass	_	_
2	's	_	VBZ	VBZ	_	3	auxpass	_	_
3	rumored	_	VBN	VBN	_	0	root	_	_
4	that	_	IN	IN	_	10	mark	_	_
5	even	_	RB	RB	_	9	advmod	_	_
6	some	_	DT	DT	_	9	det	_	_
7	super	_	JJ	JJ	_	9	amod	_	_
8	female	_	JJ	JJ	_	9	amod	_	_
9	stars	_	NNS	NNS	_	10	nsubj	_	_
10	won	_	VBD	VBD	_	3	ccomp	_	_
11	their	_	PRP$	PRP$	_	13	poss	_	_
12	first	_	JJ	JJ	_	13	amod	_	_
13	roles	_	NNS	NNS	_	10	dobj	_	_
14	in	_	IN	IN	_	10	prep	_	_
15	this	_	DT	DT	_	16	det	_	_
16	way	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	3	punct	_	_

Oracle:
(f2 / female, mod, e / even)
(f2 / female, mod, s2 / super)
(f2 / female, quant, s3 / some)
(r / role, poss, f2 / female)
(r2 / rumor-01, ARG1, w / win-01)
(s / star-01, ARG1, f2 / female)
(w / win-01, ARG0, f2 / female)
(w / win-01, ARG1, r / role)
(w / win-01, manner, w2 / way)
(w2 / way, mod, t / this)

Input(Some(Graph((rumor-01 :ARG1 (win-01 :manner (way :mod this) :ARG1 (role :ord (ordinal-entity :value 1) :poss female) :ARG0 (female :ARG1-of star-01 :mod super :mod even :quant some))),ArrayBuffer(Span(2,3,List(0),rumored,rumor-01,false), Span(9,10,List(1),won,win-01,false), Span(15,16,List(2),way,way,false), Span(14,15,List(3),this,this,false), Span(12,13,List(4),roles,role,false), Span(7,8,List(5),female,female,false), Span(8,9,List(6),stars,star-01,false), Span(6,7,List(7),super,super,false), Span(4,5,List(8),even,even,false), Span(5,6,List(9),some,some,false)),Map(2 -> way, 5 -> female, 8 -> even, 7 -> super, 1 -> win-01, 4 -> role, 6 -> star-01, 9 -> some, 0 -> rumor-01, 3 -> this),Map(e -> even, w -> win-01, s2 -> super, t -> this, s -> star-01, r2 -> rumor-01, r -> role, w2 -> way, s3 -> some, f2 -> female))),[Ljava.lang.String;@5d43661b,Annotation([Ljava.lang.String;@12299890,[Ljava.lang.String;@2fba3fc4,[Ljava.lang.String;@4bf48f6),Annotation([Ljava.lang.String;@420a85c4,[Ljava.lang.String;@1c39680d,[Ledu.cmu.lti.nlp.amr.Dependency;@62833051),Annotation([Ljava.lang.String;@1c852c0f,[Ljava.lang.String;@a37aefe,[Ljava.lang.String;@5d99c6b5),Annotation([Ljava.lang.String;@266374ef,[Ljava.lang.String;@13b3d178,[Ledu.cmu.lti.nlp.amr.Entity;@24c4ddae))
AMR:
(e / even, calendar, s3 / some)
(r / role, location, w2 / way)
(r2 / rumor-01, ARG1, w / win-01)
(s / star-01, ARG1, f2 / female)
(s / star-01, mod, s2 / super)
(w / win-01, ARG0, s / star-01)
(w / win-01, ARG1, r / role)
(w / win-01, ARG6, e / even)
(w2 / way, mod, t / this)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 208,813 microseconds
Sentence: After drinking some alcohol, the advertiser or show sponsor may take the chance to lie on the female star's shoulder, feel her chin or kiss her cheek, and endurance is the attitude most adopted by the female stars.

Oracle Span 1:  adopted => adopt-01
Oracle Span 2:  advertiser => (person :ARG0-of advertise-01)
Oracle Span 3:  After => after
Oracle Span 4:  alcohol => alcohol
Oracle Span 5:  and => and
Oracle Span 6:  attitude => attitude
Oracle Span 7:  chance => chance-01
Oracle Span 8:  cheek => cheek
Oracle Span 9:  chin => chin
Oracle Span 10:  drinking => drink-01
Oracle Span 11:  endurance => endure-01
Oracle Span 12:  feel => feel-01
Oracle Span 13:  female => female
Oracle Span 14:  kiss => kiss-01
Oracle Span 15:  lie => lie-01
Oracle Span 16:  may => possible
Oracle Span 17:  most => most
Oracle Span 18:  or => or
Oracle Span 19:  or => or
Oracle Span 20:  shoulder => shoulder
Oracle Span 21:  show => show
Oracle Span 22:  some => some
Oracle Span 23:  sponsor => (person :ARG0-of sponsor-01)
Oracle Span 24:  star => star-01
Spans:
Span 37-38:  adopted => adopt-01
Span 6-7:  advertiser => (person :ARG0-of advertise-01)
Span 0-1:  After => after
Span 3-4:  alcohol => alcohol
Span 31-32:  and => and
Span 35-36:  attitude => attitude
Span 13-14:  chance => chance-01
Span 29-30:  cheek => cheek
Span 25-26:  chin => chin
Span 1-2:  drinking => drink-01
Span 32-33:  endurance => endure-01
Span 23-24:  feel => feel-01
Span 18-19:  female => female
Span 27-28:  kiss => kiss-01
Span 15-16:  lie => lie-01
Span 10-11:  may => possible
Span 36-37:  most => most
Span 7-8:  or => or
Span 26-27:  or => or
Span 21-22:  shoulder => shoulder
Span 8-9:  show => show
Span 2-3:  some => some
Span 9-10:  sponsor => (person :ARG0-of sponsor-01)
Span 19-20:  star => star-01

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 37-38:  adopted => adopt-01
Oracle Span 6-7:  advertiser => (person :ARG0-of advertise-01)
Oracle Span 0-1:  After => after
Oracle Span 3-4:  alcohol => alcohol
Oracle Span 31-32:  and => and
Oracle Span 35-36:  attitude => attitude
Oracle Span 13-14:  chance => chance-01
Oracle Span 29-30:  cheek => cheek
Oracle Span 25-26:  chin => chin
Oracle Span 1-2:  drinking => drink-01
Oracle Span 32-33:  endurance => endure-01
Oracle Span 23-24:  feel => feel-01
Oracle Span 18-19:  female => female
Oracle Span 27-28:  kiss => kiss-01
Oracle Span 15-16:  lie => lie-01
Oracle Span 10-11:  may => possible
Oracle Span 36-37:  most => most
Oracle Span 7-8:  or => or
Oracle Span 26-27:  or => or
Oracle Span 21-22:  shoulder => shoulder
Oracle Span 8-9:  show => show
Oracle Span 2-3:  some => some
Oracle Span 9-10:  sponsor => (person :ARG0-of sponsor-01)
Oracle Span 19-20:  star => star-01

Dependencies:
1	After	_	IN	IN	_	12	prep	_	_
2	drinking	_	VBG	VBG	_	1	pcomp	_	_
3	some	_	DT	DT	_	4	det	_	_
4	alcohol	_	NN	NN	_	2	dobj	_	_
5	,	_	,	,	_	12	punct	_	_
6	the	_	DT	DT	_	10	det	_	_
7	advertiser	_	NN	NN	_	10	nn	_	_
8	or	_	CC	CC	_	7	cc	_	_
9	show	_	NN	NN	_	7	conj	_	_
10	sponsor	_	NN	NN	_	12	nsubj	_	_
11	may	_	MD	MD	_	12	aux	_	_
12	take	_	VB	VB	_	0	root	_	_
13	the	_	DT	DT	_	14	det	_	_
14	chance	_	NN	NN	_	12	dobj	_	_
15	to	_	TO	TO	_	16	aux	_	_
16	lie	_	VB	VB	_	14	vmod	_	_
17	on	_	IN	IN	_	16	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	female	_	JJ	JJ	_	20	amod	_	_
20	star	_	NN	NN	_	22	poss	_	_
21	's	_	POS	POS	_	20	possessive	_	_
22	shoulder	_	NN	NN	_	17	pobj	_	_
23	,	_	,	,	_	16	punct	_	_
24	feel	_	VB	VB	_	16	conj	_	_
25	her	_	PRP$	PRP$	_	26	poss	_	_
26	chin	_	NN	NN	_	24	dobj	_	_
27	or	_	CC	CC	_	16	cc	_	_
28	kiss	_	VB	VB	_	16	conj	_	_
29	her	_	PRP$	PRP$	_	30	poss	_	_
30	cheek	_	NN	NN	_	28	dobj	_	_
31	,	_	,	,	_	12	punct	_	_
32	and	_	CC	CC	_	12	cc	_	_
33	endurance	_	NNP	NNP	_	36	nsubj	_	_
34	is	_	VBZ	VBZ	_	36	cop	_	_
35	the	_	DT	DT	_	36	det	_	_
36	attitude	_	NN	NN	_	12	conj	_	_
37	most	_	RBS	RBS	_	38	advmod	_	_
38	adopted	_	VBN	VBN	_	36	vmod	_	_
39	by	_	IN	IN	_	38	prep	_	_
40	the	_	DT	DT	_	42	det	_	_
41	female	_	JJ	JJ	_	42	amod	_	_
42	stars	_	NNS	NNS	_	39	pobj	_	_
43	.	_	.	.	_	12	punct	_	_

Oracle:
(a / and, op, a5 / adopt-01)
(a / and, op, p / possible)
(a2 / advertise-01, ARG0, p2 / person)
(a3 / after, op, d / drink-01)
(a4 / alcohol, quant, s5 / some)
(a5 / adopt-01, ARG0, f3 / female)
(a5 / adopt-01, ARG1, a6 / attitude)
(a5 / adopt-01, degree, m / most)
(a6 / attitude, mod, e / endure-01)
(c / chance-01, ARG0, o / or)
(c / chance-01, ARG1, o2 / or)
(d / drink-01, ARG0, o / or)
(d / drink-01, ARG1, a4 / alcohol)
(f / feel-01, ARG0, o / or)
(f / feel-01, ARG1, c2 / chin)
(f3 / female, part, c2 / chin)
(f3 / female, part, c3 / cheek)
(f3 / female, part, s3 / shoulder)
(k / kiss-01, ARG0, o / or)
(k / kiss-01, ARG1, c3 / cheek)
(l / lie-01, ARG1, o / or)
(l / lie-01, ARG2, s3 / shoulder)
(o / or, op, p2 / person)
(o / or, op, p3 / person)
(o2 / or, op, f / feel-01)
(o2 / or, op, k / kiss-01)
(o2 / or, op, l / lie-01)
(p / possible, domain, c / chance-01)
(p / possible, time, a3 / after)
(s / sponsor-01, ARG0, p3 / person)
(s / sponsor-01, ARG1, s2 / show)
(s4 / star-01, ARG1, f3 / female)

Input(Some(Graph((and :op (adopt-01 :degree most :ARG1 (attitude :mod endure-01) :ARG0 female) :op (possible :time (after :op (drink-01 :ARG1 (alcohol :quant some) :ARG0 or)) :domain (chance-01 :ARG1 (or :op (kiss-01 :ARG1 (cheek :part-of female) :ARG0 or) :op (feel-01 :ARG1 (chin :part-of female) :ARG0 or) :op (lie-01 :ARG2 (shoulder :part-of (female :ARG1-of star-01)) :ARG1 or)) :ARG0 (or :op (person :ARG0-of (sponsor-01 :ARG1 show)) :op (person :ARG0-of advertise-01))))),ArrayBuffer(Span(31,32,List(0),and,and,false), Span(37,38,List(1),adopted,adopt-01,false), Span(36,37,List(2),most,most,false), Span(35,36,List(3),attitude,attitude,false), Span(10,11,List(4),may,possible,false), Span(0,1,List(5),After,after,false), Span(1,2,List(6),drinking,drink-01,false), Span(3,4,List(7),alcohol,alcohol,false), Span(2,3,List(8),some,some,false), Span(13,14,List(9),chance,chance-01,false), Span(7,8,List(10),or,or,false), Span(27,28,List(11),kiss,kiss-01,false), Span(29,30,List(12),cheek,cheek,false), Span(23,24,List(13),feel,feel-01,false), Span(25,26,List(14),chin,chin,false), Span(15,16,List(15),lie,lie-01,false), Span(21,22,List(16),shoulder,shoulder,false), Span(18,19,List(17),female,female,false), Span(19,20,List(18),star,star-01,false), Span(26,27,List(19),or,or,false), Span(9,10,List(20, 21),sponsor,(person :ARG0-of sponsor-01),false), Span(8,9,List(22),show,show,false), Span(6,7,List(23, 24),advertiser,(person :ARG0-of advertise-01),false), Span(32,33,List(25),endurance,endure-01,false)),Map(2 -> most, 5 -> after, 12 -> cheek, 15 -> lie-01, 8 -> some, 21 -> sponsor-01, 18 -> star-01, 24 -> advertise-01, 7 -> alcohol, 17 -> female, 1 -> adopt-01, 23 -> person, 4 -> possible, 11 -> kiss-01, 14 -> chin, 20 -> person, 6 -> drink-01, 9 -> chance-01, 0 -> and, 22 -> show, 16 -> shoulder, 19 -> or, 10 -> or, 3 -> attitude, 25 -> endure-01, 13 -> feel-01),Map(e -> endure-01, s5 -> some, s2 -> show, k -> kiss-01, p2 -> person, a3 -> after, s -> sponsor-01, s4 -> star-01, a6 -> attitude, d -> drink-01, m -> most, p -> possible, c3 -> cheek, a -> and, o2 -> or, a5 -> adopt-01, f3 -> female, a2 -> advertise-01, c -> chance-01, s3 -> shoulder, l -> lie-01, f -> feel-01, o -> or, p3 -> person, c2 -> chin, a4 -> alcohol))),[Ljava.lang.String;@37fb0bed,Annotation([Ljava.lang.String;@a82c5f1,[Ljava.lang.String;@7b7fdc8,[Ljava.lang.String;@51c693d),Annotation([Ljava.lang.String;@6a57ae10,[Ljava.lang.String;@766653e6,[Ledu.cmu.lti.nlp.amr.Dependency;@4e07b95f),Annotation([Ljava.lang.String;@28b46423,[Ljava.lang.String;@7fc4780b,[Ljava.lang.String;@3b79fd76),Annotation([Ljava.lang.String;@48c76607,[Ljava.lang.String;@43599640,[Ledu.cmu.lti.nlp.amr.Entity;@1f81aa00))
AMR:
(a / and, op, c3 / cheek)
(a / and, op, e / endure-01)
(a / and, op, p / possible)
(a2 / advertise-01, ARG0, p2 / person)
(a3 / after, op, d / drink-01)
(a4 / alcohol, quant, s5 / some)
(a5 / adopt-01, ARG1, a6 / attitude)
(a6 / attitude, domain, e / endure-01)
(c / chance-01, ARG1, l / lie-01)
(d / drink-01, ARG0, p3 / person)
(d / drink-01, ARG1, a4 / alcohol)
(e / endure-01, ARG1, m / most)
(f / feel-01, ARG1, c2 / chin)
(k / kiss-01, ARG1, c3 / cheek)
(l / lie-01, ARG0, s2 / show)
(l / lie-01, ARG1, p3 / person)
(l / lie-01, manner, s3 / shoulder)
(o / or, op, f / feel-01)
(o / or, op, k / kiss-01)
(o / or, op, l / lie-01)
(o2 / or, op, p2 / person)
(o2 / or, op, p3 / person)
(s / sponsor-01, ARG0, p3 / person)
(s3 / shoulder, poss, s4 / star-01)
(s4 / star-01, ARG1, f3 / female)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.2
WARNING: makeIds can't find span Id: 0.0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 1,766,035 microseconds
Sentence: They are the very people of lower nine professions

Oracle Span 1:  lower => low
Oracle Span 2:  nine => 9
Oracle Span 3:  professions => (have-org-role-91 :ARG2 profession)
Oracle Span 4:  They => they
Oracle Span 5:  very => very
Spans:
Span 6-7:  lower => low
Span 7-8:  nine => 9
Span 8-9:  professions => (have-org-role-91 :ARG2 profession)
Span 0-1:  They => they
Span 3-4:  very => very

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 6-7:  lower => low
Oracle Span 7-8:  nine => 9
Oracle Span 8-9:  professions => (have-org-role-91 :ARG2 profession)
Oracle Span 0-1:  They => they
Oracle Span 3-4:  very => very

Dependencies:
1	They	_	PRP	PRP	_	5	nsubj	_	_
2	are	_	VBP	VBP	_	5	cop	_	_
3	the	_	DT	DT	_	5	det	_	_
4	very	_	JJ	JJ	_	5	amod	_	_
5	people	_	NNS	NNS	_	0	root	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	lower	_	RBR	RBR	_	9	advmod	_	_
8	nine	_	CD	CD	_	9	num	_	_
9	professions	_	NNS	NNS	_	6	pobj	_	_

Oracle:
(h / have-org-role-91, ARG2, p3 / profession)
(p3 / profession, mod, l / low)
(p3 / profession, quant, 9 / 9)

Input(Some(Graph((person :mod very :domain they :ARG0-of (have-org-role-91 :ARG2 (profession :mod (low :degree more) :quant 9))),ArrayBuffer(Span(3,4,List(0),very,very,false), Span(0,1,List(1),They,they,false), Span(8,9,List(2, 3),professions,(have-org-role-91 :ARG2 profession),false), Span(6,7,List(4),lower,low,false), Span(7,8,List(5),nine,9,false)),Map(2 -> have-org-role-91, 5 -> 9, 1 -> they, 4 -> low, 0 -> very, 3 -> profession),Map(h -> have-org-role-91, t -> they, v -> very, l -> low, 9 -> 9, p3 -> profession))),[Ljava.lang.String;@6b6776cb,Annotation([Ljava.lang.String;@1863d2fe,[Ljava.lang.String;@1787bc24,[Ljava.lang.String;@544d57e),Annotation([Ljava.lang.String;@55c53a33,[Ljava.lang.String;@53b7f657,[Ledu.cmu.lti.nlp.amr.Dependency;@797b0699),Annotation([Ljava.lang.String;@5a37d3ed,[Ljava.lang.String;@26df6e3a,[Ljava.lang.String;@4a3631f8),Annotation([Ljava.lang.String;@6b58b9e9,[Ljava.lang.String;@f14a7d4,[Ledu.cmu.lti.nlp.amr.Entity;@52e7a6b2))
AMR:
(h / have-org-role-91, ARG1, t / they)
(h / have-org-role-91, ARG2, p3 / profession)
(h / have-org-role-91, ARG6, l / low)
(l / low, calendar, 9 / 9)
(v / very, calendar, t / they)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.0
Decoded in 76,377 microseconds
Sentence: Those stars are just pretending, they are all actually living a much damned better life than this

Oracle Span 1:  actually => actual
Oracle Span 2:  better => good
Oracle Span 3:  damned => damn-01
Oracle Span 4:  just => just
Oracle Span 5:  life => life
Oracle Span 6:  living => live-01
Oracle Span 7:  much => much
Oracle Span 8:  pretending => pretend-01
Oracle Span 9:  stars => (person :ARG1-of star-01)
Oracle Span 10:  this => this
Spans:
Span 9-10:  actually => actual
Span 14-15:  better => good
Span 13-14:  damned => damn-01
Span 3-4:  just => just
Span 15-16:  life => life
Span 10-11:  living => live-01
Span 12-13:  much => much
Span 4-5:  pretending => pretend-01
Span 1-2:  stars => (person :ARG1-of star-01)
Span 17-18:  this => this

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 9-10:  actually => actual
Oracle Span 14-15:  better => good
Oracle Span 13-14:  damned => damn-01
Oracle Span 3-4:  just => just
Oracle Span 15-16:  life => life
Oracle Span 10-11:  living => live-01
Oracle Span 12-13:  much => much
Oracle Span 4-5:  pretending => pretend-01
Oracle Span 1-2:  stars => (person :ARG1-of star-01)
Oracle Span 17-18:  this => this

Dependencies:
1	Those	_	DT	DT	_	2	det	_	_
2	stars	_	NNS	NNS	_	5	nsubj	_	_
3	are	_	VBP	VBP	_	5	cop	_	_
4	just	_	RB	RB	_	5	advmod	_	_
5	pretending	_	JJ	JJ	_	0	root	_	_
6	,	_	,	,	_	5	punct	_	_
7	they	_	PRP	PRP	_	11	nsubj	_	_
8	are	_	VBP	VBP	_	11	aux	_	_
9	all	_	RB	RB	_	11	advmod	_	_
10	actually	_	RB	RB	_	11	advmod	_	_
11	living	_	VBG	VBG	_	5	ccomp	_	_
12	a	_	DT	DT	_	16	det	_	_
13	much	_	RB	RB	_	15	advmod	_	_
14	damned	_	RB	RB	_	15	advmod	_	_
15	better	_	JJR	JJR	_	16	amod	_	_
16	life	_	NN	NN	_	11	dobj	_	_
17	than	_	IN	IN	_	16	prep	_	_
18	this	_	DT	DT	_	17	pobj	_	_

Oracle:
(d / damn-01, ARG1, l2 / life)
(l / live-01, ARG0, p2 / person)
(l / live-01, ARG1, l2 / life)
(l / live-01, compared-to, t2 / this)
(l / live-01, mod, a2 / actual)
(l2 / life, mod, g / good)
(p / pretend-01, ARG0, p2 / person)
(p / pretend-01, mod, j / just)
(s / star-01, ARG1, p2 / person)

Input(Some(Graph((and :op (pretend-01 :mod just :ARG0 (person :ARG1-of star-01 :mod that)) :op (live-01 :compared-to this :mod actual :ARG1 (life :ARG1-of (damn-01 :mode expressive) :mod (good :degree (more :quant much))) :ARG0 person)),ArrayBuffer(Span(4,5,List(0),pretending,pretend-01,false), Span(3,4,List(1),just,just,false), Span(1,2,List(2, 3),stars,(person :ARG1-of star-01),false), Span(10,11,List(4),living,live-01,false), Span(17,18,List(5),this,this,false), Span(15,16,List(6),life,life,false), Span(13,14,List(7),damned,damn-01,false), Span(14,15,List(8),better,good,false), Span(12,13,List(9),much,much,false), Span(9,10,List(10),actually,actual,false)),Map(2 -> person, 5 -> this, 8 -> good, 7 -> damn-01, 1 -> just, 4 -> live-01, 6 -> life, 9 -> much, 0 -> pretend-01, 10 -> actual, 3 -> star-01),Map(m2 -> much, p2 -> person, j -> just, s -> star-01, d -> damn-01, g -> good, p -> pretend-01, t2 -> this, l2 -> life, a2 -> actual, l -> live-01))),[Ljava.lang.String;@29a5f4e7,Annotation([Ljava.lang.String;@79c97cb,[Ljava.lang.String;@2d9caaeb,[Ljava.lang.String;@42a15bdc),Annotation([Ljava.lang.String;@44a59da3,[Ljava.lang.String;@27e47833,[Ledu.cmu.lti.nlp.amr.Dependency;@6f6745d6),Annotation([Ljava.lang.String;@27508c5d,[Ljava.lang.String;@4f704591,[Ljava.lang.String;@4b5189ac),Annotation([Ljava.lang.String;@1e4d3ce5,[Ljava.lang.String;@3ddc6915,[Ledu.cmu.lti.nlp.amr.Entity;@704deff2))
AMR:
(d / damn-01, ARG1, l2 / life)
(d / damn-01, ARG6, m2 / much)
(l / live-01, ARG1, l2 / life)
(l / live-01, mod, a2 / actual)
(l2 / life, mod, g / good)
(p / pretend-01, ARG0, l / live-01)
(p / pretend-01, ARG1, p2 / person)
(p / pretend-01, ARG6, j / just)
(s / star-01, ARG1, p2 / person)
(t2 / this, calendar, l2 / life)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 285,834 microseconds
Sentence: Agree, just cheap entertainers. Their reputation in feudal China somewhat makes sense.

Oracle Span 1:  Agree => agree-01
Oracle Span 2:  cheap => cheap
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  entertainers => (person :ARG0-of entertain-01)
Oracle Span 5:  feudal => feudal
Oracle Span 6:  just => just
Oracle Span 7:  makes => make-01
Oracle Span 8:  reputation => (thing :ARG2-of repute-01)
Oracle Span 9:  sense => sense
Oracle Span 10:  somewhat => somewhat
NER Entity: (country :name (name :op "China"))
Spans:
Span 0-1:  Agree => agree-01
Span 3-4:  cheap => cheap
Span 10-11:  China => (country :name (name :op "China"))
Span 4-5:  entertainers => (person :ARG0-of entertain-01)
Span 9-10:  feudal => feudal
Span 2-3:  just => just
Span 12-13:  makes => make-01
Span 7-8:  reputation => (thing :ARG2-of repute-01)
Span 13-14:  sense => sense
Span 11-12:  somewhat => somewhat

 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Langrangian relaxation converged after 31 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of feudal in position 9
 *** WARNING: The dependency tree seems broken.  I can't find the head of China in position 10
 *** WARNING: The dependency tree seems broken.  I can't find the head of somewhat in position 11
 *** WARNING: The dependency tree seems broken.  I can't find the head of makes in position 12
 *** WARNING: The dependency tree seems broken.  I can't find the head of sense in position 13
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 14
Oracle Span 0-1:  Agree => agree-01
Oracle Span 3-4:  cheap => cheap
Oracle Span 10-11:  China => (country :name (name :op "China"))
Oracle Span 4-5:  entertainers => (person :ARG0-of entertain-01)
Oracle Span 9-10:  feudal => feudal
Oracle Span 2-3:  just => just
Oracle Span 12-13:  makes => make-01
Oracle Span 7-8:  reputation => (thing :ARG2-of repute-01)
Oracle Span 13-14:  sense => sense
Oracle Span 11-12:  somewhat => somewhat

Dependencies:
1	Agree	_	NNP	NNP	_	0	root	_	_
2	,	_	,	,	_	1	punct	_	_
3	just	_	RB	RB	_	5	advmod	_	_
4	cheap	_	JJ	JJ	_	5	amod	_	_
5	entertainers	_	NNS	NNS	_	1	appos	_	_
6	.	_	.	.	_	1	punct	_	_
1	Their	_	PRP$	PRP$	_	2	poss	_	_
2	reputation	_	NN	NN	_	7	nsubj	_	_
3	in	_	IN	IN	_	2	prep	_	_
4	feudal	_	JJ	JJ	_	5	amod	_	_
5	China	_	NNP	NNP	_	3	pobj	_	_
6	somewhat	_	RB	RB	_	7	advmod	_	_
7	makes	_	VBZ	VBZ	_	0	root	_	_
8	sense	_	NN	NN	_	7	dobj	_	_
9	.	_	.	.	_	7	punct	_	_

Oracle:
(a / agree-01, ARG1, p / person)
(c2 / country, mod, f / feudal)
(c2 / country, name, n / name)
(e / entertain-01, ARG0, p / person)
(e / entertain-01, mod, c / cheap)
(m2 / make-01, ARG0, t2 / thing)
(m2 / make-01, ARG1, s / sense)
(m2 / make-01, degree, s2 / somewhat)
(n / name, op, "China")
(p / person, mod, j / just)
(r / repute-01, ARG2, t2 / thing)
(r / repute-01, location, c2 / country)

Input(Some(Graph((multi-sentence :snt1 (agree-01 :ARG1 (person :mod just :ARG0-of (entertain-01 :mod cheap))) :snt2 (make-01 :degree somewhat :ARG1 sense :ARG0 (thing :ARG2-of (repute-01 :location (country :mod feudal :name (name :op "China")) :ARG1 they)))),ArrayBuffer(Span(10,11,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(0,1,List(3),Agree,agree-01,false), Span(4,5,List(4, 5),entertainers,(person :ARG0-of entertain-01),false), Span(3,4,List(6),cheap,cheap,false), Span(2,3,List(7),just,just,false), Span(12,13,List(8),makes,make-01,false), Span(11,12,List(9),somewhat,somewhat,false), Span(13,14,List(10),sense,sense,false), Span(9,10,List(11),feudal,feudal,false), Span(7,8,List(12, 13),reputation,(thing :ARG2-of repute-01),false)),Map(2 -> "China", 5 -> entertain-01, 12 -> thing, 8 -> make-01, 7 -> just, 1 -> name, 4 -> person, 11 -> feudal, 6 -> cheap, 9 -> somewhat, 0 -> country, 10 -> sense, 3 -> agree-01, 13 -> repute-01),Map(e -> entertain-01, n -> name, s2 -> somewhat, m2 -> make-01, j -> just, s -> sense, p -> person, a -> agree-01, t2 -> thing, r -> repute-01, c -> cheap, f -> feudal, c2 -> country))),[Ljava.lang.String;@379614be,Annotation([Ljava.lang.String;@404bbcbd,[Ljava.lang.String;@1e81f160,[Ljava.lang.String;@1acaf3d),Annotation([Ljava.lang.String;@6986852,[Ljava.lang.String;@1bab8268,[Ledu.cmu.lti.nlp.amr.Dependency;@a307a8c),Annotation([Ljava.lang.String;@6e01f9b0,[Ljava.lang.String;@2b9ed6da,[Ljava.lang.String;@6c61a903),Annotation([Ljava.lang.String;@658c5a19,[Ljava.lang.String;@421e361,[Ledu.cmu.lti.nlp.amr.Entity;@59d4cd39))
AMR:
(a / agree-01, ARG0, c2 / country)
(a / agree-01, ARG1, t2 / thing)
(a / agree-01, ARG6, j / just)
(c2 / country, name, n / name)
(e / entertain-01, ARG0, p / person)
(e / entertain-01, ARG1, t2 / thing)
(m2 / make-01, ARG0, c2 / country)
(m2 / make-01, ARG1, s / sense)
(m2 / make-01, ARG6, s2 / somewhat)
(n / name, op, "China")
(p / person, mod, c / cheap)
(r / repute-01, ARG1, f / feudal)
(r / repute-01, ARG2, t2 / thing)

WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 485,034 microseconds
Sentence: Agree!

Oracle Span 1:  Agree => agree-01
Spans:
Span 0-1:  Agree => agree-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 0-1:  Agree => agree-01

Dependencies:
1	Agree	_	VB	VB	_	0	root	_	_
2	!	_	.	.	_	1	punct	_	_

Oracle:


Input(Some(Graph(agree-01,ArrayBuffer(Span(0,1,List(0),Agree,agree-01,false)),Map(0 -> agree-01),Map(a -> agree-01))),[Ljava.lang.String;@389c4eb1,Annotation([Ljava.lang.String;@3fc79729,[Ljava.lang.String;@34f6515b,[Ljava.lang.String;@4b34fff9),Annotation([Ljava.lang.String;@1187c9e8,[Ljava.lang.String;@127a7a2e,[Ledu.cmu.lti.nlp.amr.Dependency;@14008db3),Annotation([Ljava.lang.String;@78a773fd,[Ljava.lang.String;@57c03d88,[Ljava.lang.String;@16aa8654),Annotation([Ljava.lang.String;@6d7fc27,[Ljava.lang.String;@45ac5f9b,[Ledu.cmu.lti.nlp.amr.Entity;@135606db))
AMR:


Decoded in 3,408 microseconds
Sentence: Ah well, it is not easy to be an actress

Oracle Span 1:  easy => easy
Spans:
Span 6-7:  easy => easy

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  easy => easy

Dependencies:
1	Ah	_	RB	RB	_	2	advmod	_	_
2	well	_	RB	RB	_	7	advmod	_	_
3	,	_	,	,	_	7	punct	_	_
4	it	_	PRP	PRP	_	7	nsubj	_	_
5	is	_	VBZ	VBZ	_	7	cop	_	_
6	not	_	RB	RB	_	7	neg	_	_
7	easy	_	JJ	JJ	_	0	root	_	_
8	to	_	TO	TO	_	11	aux	_	_
9	be	_	VB	VB	_	11	cop	_	_
10	an	_	DT	DT	_	11	det	_	_
11	actress	_	NN	NN	_	7	xcomp	_	_

Oracle:


Input(Some(Graph((easy :mod (ah-well :mode expressive) :domain (person :ARG0-of act-01) :polarity -),ArrayBuffer(Span(6,7,List(0),easy,easy,false)),Map(0 -> easy),Map(e -> easy))),[Ljava.lang.String;@518caac3,Annotation([Ljava.lang.String;@68034211,[Ljava.lang.String;@4f74980d,[Ljava.lang.String;@6c372fe6),Annotation([Ljava.lang.String;@58594a11,[Ljava.lang.String;@2a3888c1,[Ledu.cmu.lti.nlp.amr.Dependency;@4167d97b),Annotation([Ljava.lang.String;@14fa86ae,[Ljava.lang.String;@6e15fe2,[Ljava.lang.String;@68f1b17f),Annotation([Ljava.lang.String;@1722011b,[Ljava.lang.String;@57ad2aa7,[Ledu.cmu.lti.nlp.amr.Entity;@5b3f61ff))
AMR:


Decoded in 12,399 microseconds
Sentence: They deserve it. They asked for that.

Oracle Span 1:  asked => ask-02
Oracle Span 2:  deserve => deserve-01
Oracle Span 3:  it => it
Oracle Span 4:  that => that
Oracle Span 5:  They => they
Oracle Span 6:  They => they
Spans:
Span 5-6:  asked => ask-02
Span 1-2:  deserve => deserve-01
Span 2-3:  it => it
Span 7-8:  that => that
Span 0-1:  They => they
Span 4-5:  They => they

 *** WARNING: The dependency tree seems broken.  I can't find the head of asked in position 5
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 6
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 8
Langrangian relaxation converged after 22 iterations. Delta = 0.0
 *** WARNING: The dependency tree seems broken.  I can't find the head of asked in position 5
 *** WARNING: The dependency tree seems broken.  I can't find the head of for in position 6
 *** WARNING: The dependency tree seems broken.  I can't find the head of that in position 7
 *** WARNING: The dependency tree seems broken.  I can't find the head of . in position 8
Oracle Span 5-6:  asked => ask-02
Oracle Span 1-2:  deserve => deserve-01
Oracle Span 2-3:  it => it
Oracle Span 7-8:  that => that
Oracle Span 0-1:  They => they
Oracle Span 4-5:  They => they

Dependencies:
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	deserve	_	VBP	VBP	_	0	root	_	_
3	it	_	PRP	PRP	_	2	dobj	_	_
4	.	_	.	.	_	2	punct	_	_
1	They	_	PRP	PRP	_	2	nsubj	_	_
2	asked	_	VBD	VBD	_	0	root	_	_
3	for	_	IN	IN	_	2	prep	_	_
4	that	_	DT	DT	_	3	pobj	_	_
5	.	_	.	.	_	2	punct	_	_

Oracle:
(a / ask-02, ARG0, t2 / they)
(a / ask-02, ARG1, t3 / that)
(d / deserve-01, ARG0, t / they)
(d / deserve-01, ARG1, i / it)

Input(Some(Graph((multi-sentence :snt1 (deserve-01 :ARG1 it :ARG0 they) :snt2 (ask-02 :ARG1 that :ARG0 they)),ArrayBuffer(Span(1,2,List(0),deserve,deserve-01,false), Span(2,3,List(1),it,it,false), Span(0,1,List(2),They,they,false), Span(5,6,List(3),asked,ask-02,false), Span(7,8,List(4),that,that,false), Span(4,5,List(5),They,they,false)),Map(2 -> they, 5 -> they, 1 -> it, 4 -> that, 0 -> deserve-01, 3 -> ask-02),Map(t -> they, d -> deserve-01, t3 -> that, a -> ask-02, t2 -> they, i -> it))),[Ljava.lang.String;@3e2059ae,Annotation([Ljava.lang.String;@398dada8,[Ljava.lang.String;@7cb502c,[Ljava.lang.String;@275bf9b3),Annotation([Ljava.lang.String;@1b8a29df,[Ljava.lang.String;@4fbe37eb,[Ledu.cmu.lti.nlp.amr.Dependency;@12a94400),Annotation([Ljava.lang.String;@6a47b187,[Ljava.lang.String;@2049a9c1,[Ljava.lang.String;@1ef6d34c),Annotation([Ljava.lang.String;@46271dd6,[Ljava.lang.String;@11bb571c,[Ledu.cmu.lti.nlp.amr.Entity;@7c51f34b))
AMR:
(a / ask-02, ARG0, t / they)
(a / ask-02, ARG1, t2 / they)
(d / deserve-01, ARG0, t / they)
(d / deserve-01, ARG1, i / it)
(t3 / that, poss, t / they)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 89,965 microseconds
Sentence: It dawned on me nothing is easy!

Oracle Span 1:  dawned => dawn-01
Oracle Span 2:  easy => easy
Oracle Span 3:  nothing => nothing
Spans:
Span 1-2:  dawned => dawn-01
Span 6-7:  easy => easy
Span 4-5:  nothing => nothing

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  dawned => dawn-01
Oracle Span 6-7:  easy => easy
Oracle Span 4-5:  nothing => nothing

Dependencies:
1	It	_	PRP	PRP	_	2	nsubj	_	_
2	dawned	_	VBD	VBD	_	0	root	_	_
3	on	_	IN	IN	_	7	prep	_	_
4	me	_	PRP	PRP	_	3	pobj	_	_
5	nothing	_	NN	NN	_	7	nsubj	_	_
6	is	_	VBZ	VBZ	_	7	cop	_	_
7	easy	_	JJ	JJ	_	2	ccomp	_	_
8	!	_	.	.	_	2	punct	_	_

Oracle:
(d / dawn-01, ARG1, e / easy)
(e / easy, domain, n / nothing)

Input(Some(Graph((dawn-01 :ARG2 i :ARG1 (easy :domain nothing)),ArrayBuffer(Span(1,2,List(0),dawned,dawn-01,false), Span(6,7,List(1),easy,easy,false), Span(4,5,List(2),nothing,nothing,false)),Map(2 -> nothing, 1 -> easy, 0 -> dawn-01),Map(n -> nothing, e -> easy, d -> dawn-01))),[Ljava.lang.String;@5495333e,Annotation([Ljava.lang.String;@2a225dd7,[Ljava.lang.String;@61eaec38,[Ljava.lang.String;@125290e5),Annotation([Ljava.lang.String;@6fa34d52,[Ljava.lang.String;@57576994,[Ledu.cmu.lti.nlp.amr.Dependency;@616ac46a),Annotation([Ljava.lang.String;@67b9b51a,[Ljava.lang.String;@1205bd62,[Ljava.lang.String;@7ef27d7f),Annotation([Ljava.lang.String;@490caf5f,[Ljava.lang.String;@6337c201,[Ledu.cmu.lti.nlp.amr.Entity;@5c669da8))
AMR:
(d / dawn-01, ARG1, e / easy)
(e / easy, domain, n / nothing)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 11,911 microseconds
Sentence: The women are birds and beasts, and the men are worse than birds and beasts

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  beasts => beast
Oracle Span 5:  birds => bird
Oracle Span 6:  men => man
Oracle Span 7:  women => woman
Oracle Span 8:  worse => bad
Spans:
Span 4-5:  and => and
Span 7-8:  and => and
Span 14-15:  and => and
Span 5-6:  beasts => beast
Span 3-4:  birds => bird
Span 9-10:  men => man
Span 1-2:  women => woman
Span 11-12:  worse => bad

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 7-8:  and => and
Oracle Span 14-15:  and => and
Oracle Span 5-6:  beasts => beast
Oracle Span 3-4:  birds => bird
Oracle Span 9-10:  men => man
Oracle Span 1-2:  women => woman
Oracle Span 11-12:  worse => bad

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	women	_	NNS	NNS	_	4	nsubj	_	_
3	are	_	VBP	VBP	_	4	cop	_	_
4	birds	_	NNS	NNS	_	0	root	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	beasts	_	NNS	NNS	_	4	conj	_	_
7	,	_	,	,	_	4	punct	_	_
8	and	_	CC	CC	_	4	cc	_	_
9	the	_	DT	DT	_	10	det	_	_
10	men	_	NNS	NNS	_	12	nsubj	_	_
11	are	_	VBP	VBP	_	12	cop	_	_
12	worse	_	JJR	JJR	_	4	conj	_	_
13	than	_	IN	IN	_	12	prep	_	_
14	birds	_	NNS	NNS	_	13	pobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	beasts	_	NNS	NNS	_	14	conj	_	_

Oracle:
(a / and, op, a3 / and)
(a / and, op, b3 / bad)
(a2 / and, op, b4 / bird)
(a2 / and, op, b5 / beast)
(a3 / and, domain, w / woman)
(a3 / and, op, b4 / bird)
(a3 / and, op, b5 / beast)
(b3 / bad, compared-to, a2 / and)
(b3 / bad, domain, m / man)

Input(Some(Graph((and :op (bad :compared-to (and :op bird :op beast) :domain man :degree more) :op (and :domain woman :op beast :op bird)),ArrayBuffer(Span(4,5,List(0),and,and,false), Span(11,12,List(1),worse,bad,false), Span(7,8,List(2),and,and,false), Span(9,10,List(3),men,man,false), Span(14,15,List(4),and,and,false), Span(1,2,List(5),women,woman,false), Span(5,6,List(6),beasts,beast,false), Span(3,4,List(7),birds,bird,false)),Map(2 -> and, 5 -> woman, 7 -> bird, 1 -> bad, 4 -> and, 6 -> beast, 0 -> and, 3 -> man),Map(w -> woman, b3 -> bad, b5 -> beast, a3 -> and, m -> man, a -> and, b4 -> bird, a2 -> and))),[Ljava.lang.String;@31920ade,Annotation([Ljava.lang.String;@1d483de4,[Ljava.lang.String;@4032d386,[Ljava.lang.String;@28d18df5),Annotation([Ljava.lang.String;@934b6cb,[Ljava.lang.String;@55cf0d14,[Ledu.cmu.lti.nlp.amr.Dependency;@3b74ac8),Annotation([Ljava.lang.String;@27adc16e,[Ljava.lang.String;@b83a9be,[Ljava.lang.String;@2609b277),Annotation([Ljava.lang.String;@1fd14d74,[Ljava.lang.String;@563e4951,[Ledu.cmu.lti.nlp.amr.Entity;@4066c471))
AMR:
(a / and, op, m / man)
(a / and, op, w / woman)
(a2 / and, op, b4 / bird)
(a2 / and, op, b5 / beast)
(a2 / and, op, w / woman)
(a3 / and, op, b3 / bad)
(b3 / bad, domain, m / man)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 52,932 microseconds
